{"path":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testBasicSelect().mjava","commits":[{"id":"7b2c4e17100e207bc842e56d016b9f91f411304e","date":1434336696,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testBasicSelect().mjava","pathOld":"/dev/null","sourceNew":"  private void testBasicSelect() throws Exception {\n    try {\n\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexr(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"7\");\n      indexr(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"8\");\n      indexr(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\");\n      indexr(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"11\");\n      indexr(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\");\n      indexr(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"40\");\n      indexr(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\");\n      indexr(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\");\n      commit();\n      Map params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"sql\", \"select id, field_i, str_s from mytable where text='XXXX' order by field_i desc\");\n\n      SolrStream solrStream = new SolrStream(jetty.url, params);\n      List<Tuple> tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 8);\n\n      Tuple tuple = null;\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 8);\n      assert(tuple.getLong(\"field_i\") == 60);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"id\") == 7);\n      assert(tuple.getLong(\"field_i\") == 50);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"id\") == 6);\n      assert(tuple.getLong(\"field_i\") == 40);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(3);\n      assert(tuple.getLong(\"id\") == 5);\n      assert(tuple.getLong(\"field_i\") == 30);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(4);\n      assert(tuple.getLong(\"id\") == 3);\n      assert(tuple.getLong(\"field_i\") == 20);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      tuple = tuples.get(5);\n      assert(tuple.getLong(\"id\") == 4);\n      assert(tuple.getLong(\"field_i\") == 11);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(6);\n      assert(tuple.getLong(\"id\") == 2);\n      assert(tuple.getLong(\"field_i\") == 8);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(7);\n      assert(tuple.getLong(\"id\") == 1);\n      assert(tuple.getLong(\"field_i\") == 7);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"sql\", \"select id, field_i, str_s from mytable where text='XXXX' order by field_i desc limit 1\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 1);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 8);\n      assert(tuple.getLong(\"field_i\") == 60);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"sql\", \"select id, field_i, str_s from mytable where text='XXXX' AND id='(1 2 3)' order by field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 3);\n      assert(tuple.getLong(\"field_i\") == 20);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"id\") == 2);\n      assert(tuple.getLong(\"field_i\") == 8);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"id\") == 1);\n      assert(tuple.getLong(\"field_i\") == 7);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n    } finally {\n      delete();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8da9a71da64ce12a97dcfcdd912893aeb1fa2981","date":1437510515,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testBasicSelect().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testBasicSelect().mjava","sourceNew":"  private void testBasicSelect() throws Exception {\n    try {\n\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexr(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"7\");\n      indexr(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"8\");\n      indexr(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\");\n      indexr(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"11\");\n      indexr(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\");\n      indexr(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"40\");\n      indexr(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\");\n      indexr(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\");\n      commit();\n      Map params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"sql\", \"select id, field_i, str_s from collection1 where text='XXXX' order by field_i desc\");\n\n      SolrStream solrStream = new SolrStream(jetty.url, params);\n      List<Tuple> tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 8);\n\n      Tuple tuple = null;\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 8);\n      assert(tuple.getLong(\"field_i\") == 60);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"id\") == 7);\n      assert(tuple.getLong(\"field_i\") == 50);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"id\") == 6);\n      assert(tuple.getLong(\"field_i\") == 40);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(3);\n      assert(tuple.getLong(\"id\") == 5);\n      assert(tuple.getLong(\"field_i\") == 30);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(4);\n      assert(tuple.getLong(\"id\") == 3);\n      assert(tuple.getLong(\"field_i\") == 20);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      tuple = tuples.get(5);\n      assert(tuple.getLong(\"id\") == 4);\n      assert(tuple.getLong(\"field_i\") == 11);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(6);\n      assert(tuple.getLong(\"id\") == 2);\n      assert(tuple.getLong(\"field_i\") == 8);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(7);\n      assert(tuple.getLong(\"id\") == 1);\n      assert(tuple.getLong(\"field_i\") == 7);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"sql\", \"select id, field_i, str_s from collection1 where text='XXXX' order by field_i desc limit 1\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 1);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 8);\n      assert(tuple.getLong(\"field_i\") == 60);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"sql\", \"select id, field_i, str_s from collection1 where text='XXXX' AND id='(1 2 3)' order by field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 3);\n      assert(tuple.getLong(\"field_i\") == 20);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"id\") == 2);\n      assert(tuple.getLong(\"field_i\") == 8);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"id\") == 1);\n      assert(tuple.getLong(\"field_i\") == 7);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n    } finally {\n      delete();\n    }\n  }\n\n","sourceOld":"  private void testBasicSelect() throws Exception {\n    try {\n\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexr(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"7\");\n      indexr(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"8\");\n      indexr(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\");\n      indexr(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"11\");\n      indexr(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\");\n      indexr(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"40\");\n      indexr(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\");\n      indexr(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\");\n      commit();\n      Map params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"sql\", \"select id, field_i, str_s from mytable where text='XXXX' order by field_i desc\");\n\n      SolrStream solrStream = new SolrStream(jetty.url, params);\n      List<Tuple> tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 8);\n\n      Tuple tuple = null;\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 8);\n      assert(tuple.getLong(\"field_i\") == 60);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"id\") == 7);\n      assert(tuple.getLong(\"field_i\") == 50);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"id\") == 6);\n      assert(tuple.getLong(\"field_i\") == 40);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(3);\n      assert(tuple.getLong(\"id\") == 5);\n      assert(tuple.getLong(\"field_i\") == 30);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(4);\n      assert(tuple.getLong(\"id\") == 3);\n      assert(tuple.getLong(\"field_i\") == 20);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      tuple = tuples.get(5);\n      assert(tuple.getLong(\"id\") == 4);\n      assert(tuple.getLong(\"field_i\") == 11);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(6);\n      assert(tuple.getLong(\"id\") == 2);\n      assert(tuple.getLong(\"field_i\") == 8);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(7);\n      assert(tuple.getLong(\"id\") == 1);\n      assert(tuple.getLong(\"field_i\") == 7);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"sql\", \"select id, field_i, str_s from mytable where text='XXXX' order by field_i desc limit 1\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 1);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 8);\n      assert(tuple.getLong(\"field_i\") == 60);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"sql\", \"select id, field_i, str_s from mytable where text='XXXX' AND id='(1 2 3)' order by field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 3);\n      assert(tuple.getLong(\"field_i\") == 20);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"id\") == 2);\n      assert(tuple.getLong(\"field_i\") == 8);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"id\") == 1);\n      assert(tuple.getLong(\"field_i\") == 7);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n    } finally {\n      delete();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"36479872320bb00635cb97ca6757614c88562e1b","date":1444426483,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testBasicSelect().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testBasicSelect().mjava","sourceNew":"  private void testBasicSelect() throws Exception {\n    try {\n\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexDoc(sdoc(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"7\"));\n      indexDoc(sdoc(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"8\"));\n      indexDoc(sdoc(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\"));\n      indexDoc(sdoc(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"11\"));\n      indexDoc(sdoc(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\"));\n      indexDoc(sdoc(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"40\"));\n      indexDoc(sdoc(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\"));\n      indexDoc(sdoc(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\"));\n      commit();\n      Map params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"sql\", \"select 'id', field_i, str_s from collection1 where 'text'='XXXX' order by field_i desc\");\n\n      SolrStream solrStream = new SolrStream(jetty.url, params);\n      List<Tuple> tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 8);\n\n      Tuple tuple = null;\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 8);\n      assert(tuple.getLong(\"field_i\") == 60);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"id\") == 7);\n      assert(tuple.getLong(\"field_i\") == 50);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"id\") == 6);\n      assert(tuple.getLong(\"field_i\") == 40);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(3);\n      assert(tuple.getLong(\"id\") == 5);\n      assert(tuple.getLong(\"field_i\") == 30);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(4);\n      assert(tuple.getLong(\"id\") == 3);\n      assert(tuple.getLong(\"field_i\") == 20);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      tuple = tuples.get(5);\n      assert(tuple.getLong(\"id\") == 4);\n      assert(tuple.getLong(\"field_i\") == 11);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(6);\n      assert(tuple.getLong(\"id\") == 2);\n      assert(tuple.getLong(\"field_i\") == 8);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(7);\n      assert(tuple.getLong(\"id\") == 1);\n      assert(tuple.getLong(\"field_i\") == 7);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"sql\", \"select id, field_i, str_s from collection1 where text='XXXX' order by field_i desc limit 1\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 1);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 8);\n      assert(tuple.getLong(\"field_i\") == 60);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"sql\", \"select id, field_i, str_s from collection1 where text='XXXX' AND id='(1 2 3)' order by field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 3);\n      assert(tuple.getLong(\"field_i\") == 20);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"id\") == 2);\n      assert(tuple.getLong(\"field_i\") == 8);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"id\") == 1);\n      assert(tuple.getLong(\"field_i\") == 7);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n    } finally {\n      delete();\n    }\n  }\n\n","sourceOld":"  private void testBasicSelect() throws Exception {\n    try {\n\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexr(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"7\");\n      indexr(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"8\");\n      indexr(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\");\n      indexr(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"11\");\n      indexr(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\");\n      indexr(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"40\");\n      indexr(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\");\n      indexr(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\");\n      commit();\n      Map params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"sql\", \"select id, field_i, str_s from collection1 where text='XXXX' order by field_i desc\");\n\n      SolrStream solrStream = new SolrStream(jetty.url, params);\n      List<Tuple> tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 8);\n\n      Tuple tuple = null;\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 8);\n      assert(tuple.getLong(\"field_i\") == 60);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"id\") == 7);\n      assert(tuple.getLong(\"field_i\") == 50);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"id\") == 6);\n      assert(tuple.getLong(\"field_i\") == 40);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(3);\n      assert(tuple.getLong(\"id\") == 5);\n      assert(tuple.getLong(\"field_i\") == 30);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(4);\n      assert(tuple.getLong(\"id\") == 3);\n      assert(tuple.getLong(\"field_i\") == 20);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      tuple = tuples.get(5);\n      assert(tuple.getLong(\"id\") == 4);\n      assert(tuple.getLong(\"field_i\") == 11);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(6);\n      assert(tuple.getLong(\"id\") == 2);\n      assert(tuple.getLong(\"field_i\") == 8);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(7);\n      assert(tuple.getLong(\"id\") == 1);\n      assert(tuple.getLong(\"field_i\") == 7);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"sql\", \"select id, field_i, str_s from collection1 where text='XXXX' order by field_i desc limit 1\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 1);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 8);\n      assert(tuple.getLong(\"field_i\") == 60);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"sql\", \"select id, field_i, str_s from collection1 where text='XXXX' AND id='(1 2 3)' order by field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 3);\n      assert(tuple.getLong(\"field_i\") == 20);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"id\") == 2);\n      assert(tuple.getLong(\"field_i\") == 8);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"id\") == 1);\n      assert(tuple.getLong(\"field_i\") == 7);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n    } finally {\n      delete();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3ec71d4701edbd96cfea97384101d13611393552","date":1444686705,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testBasicSelect().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testBasicSelect().mjava","sourceNew":"  private void testBasicSelect() throws Exception {\n    try {\n\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexDoc(sdoc(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"7\"));\n      indexDoc(sdoc(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"8\"));\n      indexDoc(sdoc(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\"));\n      indexDoc(sdoc(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"11\"));\n      indexDoc(sdoc(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\"));\n      indexDoc(sdoc(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"40\"));\n      indexDoc(sdoc(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\"));\n      indexDoc(sdoc(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\"));\n      commit();\n      Map params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select 'id', field_i, str_s from collection1 where 'text'='XXXX' order by field_i desc\");\n\n      SolrStream solrStream = new SolrStream(jetty.url, params);\n      List<Tuple> tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 8);\n\n      Tuple tuple = null;\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 8);\n      assert(tuple.getLong(\"field_i\") == 60);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"id\") == 7);\n      assert(tuple.getLong(\"field_i\") == 50);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"id\") == 6);\n      assert(tuple.getLong(\"field_i\") == 40);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(3);\n      assert(tuple.getLong(\"id\") == 5);\n      assert(tuple.getLong(\"field_i\") == 30);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(4);\n      assert(tuple.getLong(\"id\") == 3);\n      assert(tuple.getLong(\"field_i\") == 20);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      tuple = tuples.get(5);\n      assert(tuple.getLong(\"id\") == 4);\n      assert(tuple.getLong(\"field_i\") == 11);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(6);\n      assert(tuple.getLong(\"id\") == 2);\n      assert(tuple.getLong(\"field_i\") == 8);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(7);\n      assert(tuple.getLong(\"id\") == 1);\n      assert(tuple.getLong(\"field_i\") == 7);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select id, field_i, str_s from collection1 where text='XXXX' order by field_i desc limit 1\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 1);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 8);\n      assert(tuple.getLong(\"field_i\") == 60);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select id, field_i, str_s from collection1 where text='XXXX' AND id='(1 2 3)' order by field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 3);\n      assert(tuple.getLong(\"field_i\") == 20);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"id\") == 2);\n      assert(tuple.getLong(\"field_i\") == 8);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"id\") == 1);\n      assert(tuple.getLong(\"field_i\") == 7);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n    } finally {\n      delete();\n    }\n  }\n\n","sourceOld":"  private void testBasicSelect() throws Exception {\n    try {\n\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexDoc(sdoc(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"7\"));\n      indexDoc(sdoc(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"8\"));\n      indexDoc(sdoc(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\"));\n      indexDoc(sdoc(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"11\"));\n      indexDoc(sdoc(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\"));\n      indexDoc(sdoc(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"40\"));\n      indexDoc(sdoc(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\"));\n      indexDoc(sdoc(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\"));\n      commit();\n      Map params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"sql\", \"select 'id', field_i, str_s from collection1 where 'text'='XXXX' order by field_i desc\");\n\n      SolrStream solrStream = new SolrStream(jetty.url, params);\n      List<Tuple> tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 8);\n\n      Tuple tuple = null;\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 8);\n      assert(tuple.getLong(\"field_i\") == 60);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"id\") == 7);\n      assert(tuple.getLong(\"field_i\") == 50);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"id\") == 6);\n      assert(tuple.getLong(\"field_i\") == 40);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(3);\n      assert(tuple.getLong(\"id\") == 5);\n      assert(tuple.getLong(\"field_i\") == 30);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(4);\n      assert(tuple.getLong(\"id\") == 3);\n      assert(tuple.getLong(\"field_i\") == 20);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      tuple = tuples.get(5);\n      assert(tuple.getLong(\"id\") == 4);\n      assert(tuple.getLong(\"field_i\") == 11);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(6);\n      assert(tuple.getLong(\"id\") == 2);\n      assert(tuple.getLong(\"field_i\") == 8);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(7);\n      assert(tuple.getLong(\"id\") == 1);\n      assert(tuple.getLong(\"field_i\") == 7);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"sql\", \"select id, field_i, str_s from collection1 where text='XXXX' order by field_i desc limit 1\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 1);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 8);\n      assert(tuple.getLong(\"field_i\") == 60);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"sql\", \"select id, field_i, str_s from collection1 where text='XXXX' AND id='(1 2 3)' order by field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 3);\n      assert(tuple.getLong(\"field_i\") == 20);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"id\") == 2);\n      assert(tuple.getLong(\"field_i\") == 8);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"id\") == 1);\n      assert(tuple.getLong(\"field_i\") == 7);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n    } finally {\n      delete();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f90f992f4e4fdedb0fe0cc2fe3925df71a5b9f7","date":1452631653,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testBasicSelect().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testBasicSelect().mjava","sourceNew":"  private void testBasicSelect() throws Exception {\n    try {\n\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexDoc(sdoc(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"7\"));\n      indexDoc(sdoc(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"8\"));\n      indexDoc(sdoc(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\"));\n      indexDoc(sdoc(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"11\"));\n      indexDoc(sdoc(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\"));\n      indexDoc(sdoc(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"40\"));\n      indexDoc(sdoc(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\"));\n      indexDoc(sdoc(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\"));\n      commit();\n      Map params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select 'id', field_i, str_s from collection1 where 'text'='XXXX' order by field_i desc\");\n\n      SolrStream solrStream = new SolrStream(jetty.url, params);\n      List<Tuple> tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 8);\n\n      Tuple tuple = null;\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 8);\n      assert(tuple.getLong(\"field_i\") == 60);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"id\") == 7);\n      assert(tuple.getLong(\"field_i\") == 50);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"id\") == 6);\n      assert(tuple.getLong(\"field_i\") == 40);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(3);\n      assert(tuple.getLong(\"id\") == 5);\n      assert(tuple.getLong(\"field_i\") == 30);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(4);\n      assert(tuple.getLong(\"id\") == 3);\n      assert(tuple.getLong(\"field_i\") == 20);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      tuple = tuples.get(5);\n      assert(tuple.getLong(\"id\") == 4);\n      assert(tuple.getLong(\"field_i\") == 11);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(6);\n      assert(tuple.getLong(\"id\") == 2);\n      assert(tuple.getLong(\"field_i\") == 8);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(7);\n      assert(tuple.getLong(\"id\") == 1);\n      assert(tuple.getLong(\"field_i\") == 7);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select id, field_i, str_s from collection1 where text='XXXX' order by field_i desc limit 1\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 1);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 8);\n      assert(tuple.getLong(\"field_i\") == 60);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select id, field_i, str_s from collection1 where text='XXXX' AND id='(1 2 3)' order by field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 3);\n      assert(tuple.getLong(\"field_i\") == 20);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"id\") == 2);\n      assert(tuple.getLong(\"field_i\") == 8);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"id\") == 1);\n      assert(tuple.getLong(\"field_i\") == 7);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select id as myId, field_i as myInt, str_s as myString from collection1 where text='XXXX' AND id='(1 2 3)' order by myInt desc\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"myId\") == 3);\n      assert(tuple.getLong(\"myInt\") == 20);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"myId\") == 2);\n      assert(tuple.getLong(\"myInt\") == 8);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"myId\") == 1);\n      assert(tuple.getLong(\"myInt\") == 7);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select id as myId, field_i as myInt, str_s as myString from collection1 where text='XXXX' AND id='(1 2 3)' order by field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"myId\") == 3);\n      assert(tuple.getLong(\"myInt\") == 20);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"myId\") == 2);\n      assert(tuple.getLong(\"myInt\") == 8);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"myId\") == 1);\n      assert(tuple.getLong(\"myInt\") == 7);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n\n    } finally {\n      delete();\n    }\n  }\n\n","sourceOld":"  private void testBasicSelect() throws Exception {\n    try {\n\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexDoc(sdoc(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"7\"));\n      indexDoc(sdoc(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"8\"));\n      indexDoc(sdoc(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\"));\n      indexDoc(sdoc(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"11\"));\n      indexDoc(sdoc(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\"));\n      indexDoc(sdoc(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"40\"));\n      indexDoc(sdoc(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\"));\n      indexDoc(sdoc(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\"));\n      commit();\n      Map params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select 'id', field_i, str_s from collection1 where 'text'='XXXX' order by field_i desc\");\n\n      SolrStream solrStream = new SolrStream(jetty.url, params);\n      List<Tuple> tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 8);\n\n      Tuple tuple = null;\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 8);\n      assert(tuple.getLong(\"field_i\") == 60);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"id\") == 7);\n      assert(tuple.getLong(\"field_i\") == 50);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"id\") == 6);\n      assert(tuple.getLong(\"field_i\") == 40);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(3);\n      assert(tuple.getLong(\"id\") == 5);\n      assert(tuple.getLong(\"field_i\") == 30);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(4);\n      assert(tuple.getLong(\"id\") == 3);\n      assert(tuple.getLong(\"field_i\") == 20);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      tuple = tuples.get(5);\n      assert(tuple.getLong(\"id\") == 4);\n      assert(tuple.getLong(\"field_i\") == 11);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(6);\n      assert(tuple.getLong(\"id\") == 2);\n      assert(tuple.getLong(\"field_i\") == 8);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(7);\n      assert(tuple.getLong(\"id\") == 1);\n      assert(tuple.getLong(\"field_i\") == 7);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select id, field_i, str_s from collection1 where text='XXXX' order by field_i desc limit 1\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 1);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 8);\n      assert(tuple.getLong(\"field_i\") == 60);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select id, field_i, str_s from collection1 where text='XXXX' AND id='(1 2 3)' order by field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 3);\n      assert(tuple.getLong(\"field_i\") == 20);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"id\") == 2);\n      assert(tuple.getLong(\"field_i\") == 8);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"id\") == 1);\n      assert(tuple.getLong(\"field_i\") == 7);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n    } finally {\n      delete();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6299ebaf4e18ea70d828fe29b3779aa345cd4b11","date":1454887041,"type":3,"author":"jbernste","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testBasicSelect().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testBasicSelect().mjava","sourceNew":"  private void testBasicSelect() throws Exception {\n    try {\n\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexDoc(sdoc(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"7\"));\n      indexDoc(sdoc(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"8\"));\n      indexDoc(sdoc(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\"));\n      indexDoc(sdoc(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"11\"));\n      indexDoc(sdoc(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\"));\n      indexDoc(sdoc(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"40\"));\n      indexDoc(sdoc(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\"));\n      indexDoc(sdoc(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\"));\n      commit();\n      Map params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select 'id', field_i, str_s from collection1 where 'text'='XXXX' order by field_i desc\");\n\n      SolrStream solrStream = new SolrStream(jetty.url, params);\n      List<Tuple> tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 8);\n\n      Tuple tuple = null;\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 8);\n      assert(tuple.getLong(\"field_i\") == 60);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"id\") == 7);\n      assert(tuple.getLong(\"field_i\") == 50);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"id\") == 6);\n      assert(tuple.getLong(\"field_i\") == 40);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(3);\n      assert(tuple.getLong(\"id\") == 5);\n      assert(tuple.getLong(\"field_i\") == 30);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(4);\n      assert(tuple.getLong(\"id\") == 3);\n      assert(tuple.getLong(\"field_i\") == 20);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      tuple = tuples.get(5);\n      assert(tuple.getLong(\"id\") == 4);\n      assert(tuple.getLong(\"field_i\") == 11);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(6);\n      assert(tuple.getLong(\"id\") == 2);\n      assert(tuple.getLong(\"field_i\") == 8);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(7);\n      assert(tuple.getLong(\"id\") == 1);\n      assert(tuple.getLong(\"field_i\") == 7);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n\n      //Test unlimited unsorted result. Should sort on _version_ desc\n      params.put(\"stmt\", \"select 'id', field_i, str_s from collection1 where 'text'='XXXX'\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 8);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 8);\n      assert(tuple.getLong(\"field_i\") == 60);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"id\") == 7);\n      assert(tuple.getLong(\"field_i\") == 50);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"id\") == 6);\n      assert(tuple.getLong(\"field_i\") == 40);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(3);\n      assert(tuple.getLong(\"id\") == 5);\n      assert(tuple.getLong(\"field_i\") == 30);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(4);\n      assert(tuple.getLong(\"id\") == 4);\n      assert(tuple.getLong(\"field_i\") == 11);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(5);\n      assert(tuple.getLong(\"id\") == 3);\n      assert(tuple.getLong(\"field_i\") == 20);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      tuple = tuples.get(6);\n      assert(tuple.getLong(\"id\") == 2);\n      assert(tuple.getLong(\"field_i\") == 8);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(7);\n      assert(tuple.getLong(\"id\") == 1);\n      assert(tuple.getLong(\"field_i\") == 7);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select id, field_i, str_s from collection1 where text='XXXX' order by field_i desc limit 1\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 1);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 8);\n      assert(tuple.getLong(\"field_i\") == 60);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select id, field_i, str_s from collection1 where text='XXXX' AND id='(1 2 3)' order by field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 3);\n      assert(tuple.getLong(\"field_i\") == 20);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"id\") == 2);\n      assert(tuple.getLong(\"field_i\") == 8);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"id\") == 1);\n      assert(tuple.getLong(\"field_i\") == 7);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select id as myId, field_i as myInt, str_s as myString from collection1 where text='XXXX' AND id='(1 2 3)' order by myInt desc\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"myId\") == 3);\n      assert(tuple.getLong(\"myInt\") == 20);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"myId\") == 2);\n      assert(tuple.getLong(\"myInt\") == 8);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"myId\") == 1);\n      assert(tuple.getLong(\"myInt\") == 7);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select id as myId, field_i as myInt, str_s as myString from collection1 where text='XXXX' AND id='(1 2 3)' order by field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"myId\") == 3);\n      assert(tuple.getLong(\"myInt\") == 20);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"myId\") == 2);\n      assert(tuple.getLong(\"myInt\") == 8);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"myId\") == 1);\n      assert(tuple.getLong(\"myInt\") == 7);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n\n    } finally {\n      delete();\n    }\n  }\n\n","sourceOld":"  private void testBasicSelect() throws Exception {\n    try {\n\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexDoc(sdoc(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"7\"));\n      indexDoc(sdoc(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"8\"));\n      indexDoc(sdoc(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\"));\n      indexDoc(sdoc(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"11\"));\n      indexDoc(sdoc(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\"));\n      indexDoc(sdoc(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"40\"));\n      indexDoc(sdoc(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\"));\n      indexDoc(sdoc(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\"));\n      commit();\n      Map params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select 'id', field_i, str_s from collection1 where 'text'='XXXX' order by field_i desc\");\n\n      SolrStream solrStream = new SolrStream(jetty.url, params);\n      List<Tuple> tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 8);\n\n      Tuple tuple = null;\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 8);\n      assert(tuple.getLong(\"field_i\") == 60);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"id\") == 7);\n      assert(tuple.getLong(\"field_i\") == 50);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"id\") == 6);\n      assert(tuple.getLong(\"field_i\") == 40);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(3);\n      assert(tuple.getLong(\"id\") == 5);\n      assert(tuple.getLong(\"field_i\") == 30);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(4);\n      assert(tuple.getLong(\"id\") == 3);\n      assert(tuple.getLong(\"field_i\") == 20);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      tuple = tuples.get(5);\n      assert(tuple.getLong(\"id\") == 4);\n      assert(tuple.getLong(\"field_i\") == 11);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(6);\n      assert(tuple.getLong(\"id\") == 2);\n      assert(tuple.getLong(\"field_i\") == 8);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(7);\n      assert(tuple.getLong(\"id\") == 1);\n      assert(tuple.getLong(\"field_i\") == 7);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select id, field_i, str_s from collection1 where text='XXXX' order by field_i desc limit 1\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 1);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 8);\n      assert(tuple.getLong(\"field_i\") == 60);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select id, field_i, str_s from collection1 where text='XXXX' AND id='(1 2 3)' order by field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 3);\n      assert(tuple.getLong(\"field_i\") == 20);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"id\") == 2);\n      assert(tuple.getLong(\"field_i\") == 8);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"id\") == 1);\n      assert(tuple.getLong(\"field_i\") == 7);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select id as myId, field_i as myInt, str_s as myString from collection1 where text='XXXX' AND id='(1 2 3)' order by myInt desc\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"myId\") == 3);\n      assert(tuple.getLong(\"myInt\") == 20);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"myId\") == 2);\n      assert(tuple.getLong(\"myInt\") == 8);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"myId\") == 1);\n      assert(tuple.getLong(\"myInt\") == 7);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select id as myId, field_i as myInt, str_s as myString from collection1 where text='XXXX' AND id='(1 2 3)' order by field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"myId\") == 3);\n      assert(tuple.getLong(\"myInt\") == 20);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"myId\") == 2);\n      assert(tuple.getLong(\"myInt\") == 8);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"myId\") == 1);\n      assert(tuple.getLong(\"myInt\") == 7);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n\n    } finally {\n      delete();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d984627825732e682759c22df7a3b171a80f3812","date":1461857653,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testBasicSelect().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testBasicSelect().mjava","sourceNew":"  private void testBasicSelect() throws Exception {\n    try {\n\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexDoc(sdoc(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"7\"));\n      indexDoc(sdoc(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"8\"));\n      indexDoc(sdoc(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\"));\n      indexDoc(sdoc(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"11\"));\n      indexDoc(sdoc(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\"));\n      indexDoc(sdoc(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"40\"));\n      indexDoc(sdoc(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\"));\n      indexDoc(sdoc(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\"));\n      commit();\n\n      Map params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select id, field_i, str_s from collection1 where text='XXXX' order by field_i desc\");\n\n      SolrStream solrStream = new SolrStream(jetty.url, params);\n      List<Tuple> tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 8);\n\n      Tuple tuple = null;\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 8);\n      assert(tuple.getLong(\"field_i\") == 60);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"id\") == 7);\n      assert(tuple.getLong(\"field_i\") == 50);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"id\") == 6);\n      assert(tuple.getLong(\"field_i\") == 40);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(3);\n      assert(tuple.getLong(\"id\") == 5);\n      assert(tuple.getLong(\"field_i\") == 30);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(4);\n      assert(tuple.getLong(\"id\") == 3);\n      assert(tuple.getLong(\"field_i\") == 20);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      tuple = tuples.get(5);\n      assert(tuple.getLong(\"id\") == 4);\n      assert(tuple.getLong(\"field_i\") == 11);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(6);\n      assert(tuple.getLong(\"id\") == 2);\n      assert(tuple.getLong(\"field_i\") == 8);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(7);\n      assert(tuple.getLong(\"id\") == 1);\n      assert(tuple.getLong(\"field_i\") == 7);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n\n      //Test unlimited unsorted result. Should sort on _version_ desc\n      params.put(\"stmt\", \"select id, field_i, str_s from collection1 where text='XXXX'\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 8);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 8);\n      assert(tuple.getLong(\"field_i\") == 60);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"id\") == 7);\n      assert(tuple.getLong(\"field_i\") == 50);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"id\") == 6);\n      assert(tuple.getLong(\"field_i\") == 40);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(3);\n      assert(tuple.getLong(\"id\") == 5);\n      assert(tuple.getLong(\"field_i\") == 30);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(4);\n      assert(tuple.getLong(\"id\") == 4);\n      assert(tuple.getLong(\"field_i\") == 11);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(5);\n      assert(tuple.getLong(\"id\") == 3);\n      assert(tuple.getLong(\"field_i\") == 20);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      tuple = tuples.get(6);\n      assert(tuple.getLong(\"id\") == 2);\n      assert(tuple.getLong(\"field_i\") == 8);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(7);\n      assert(tuple.getLong(\"id\") == 1);\n      assert(tuple.getLong(\"field_i\") == 7);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select id, field_i, str_s from collection1 where text='XXXX' order by field_i desc limit 1\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 1);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 8);\n      assert(tuple.getLong(\"field_i\") == 60);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select id, field_i, str_s from collection1 where text='XXXX' AND id='(1 2 3)' order by field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 3);\n      assert(tuple.getLong(\"field_i\") == 20);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"id\") == 2);\n      assert(tuple.getLong(\"field_i\") == 8);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"id\") == 1);\n      assert(tuple.getLong(\"field_i\") == 7);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select id as myId, field_i as myInt, str_s as myString from collection1 where text='XXXX' AND id='(1 2 3)' order by myInt desc\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"myId\") == 3);\n      assert(tuple.getLong(\"myInt\") == 20);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"myId\") == 2);\n      assert(tuple.getLong(\"myInt\") == 8);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"myId\") == 1);\n      assert(tuple.getLong(\"myInt\") == 7);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select id as myId, field_i as myInt, str_s as myString from collection1 where text='XXXX' AND id='(1 2 3)' order by field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"myId\") == 3);\n      assert(tuple.getLong(\"myInt\") == 20);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"myId\") == 2);\n      assert(tuple.getLong(\"myInt\") == 8);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"myId\") == 1);\n      assert(tuple.getLong(\"myInt\") == 7);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n    } finally {\n      delete();\n    }\n  }\n\n","sourceOld":"  private void testBasicSelect() throws Exception {\n    try {\n\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexDoc(sdoc(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"7\"));\n      indexDoc(sdoc(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"8\"));\n      indexDoc(sdoc(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\"));\n      indexDoc(sdoc(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"11\"));\n      indexDoc(sdoc(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\"));\n      indexDoc(sdoc(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"40\"));\n      indexDoc(sdoc(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\"));\n      indexDoc(sdoc(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\"));\n      commit();\n      Map params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select 'id', field_i, str_s from collection1 where 'text'='XXXX' order by field_i desc\");\n\n      SolrStream solrStream = new SolrStream(jetty.url, params);\n      List<Tuple> tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 8);\n\n      Tuple tuple = null;\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 8);\n      assert(tuple.getLong(\"field_i\") == 60);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"id\") == 7);\n      assert(tuple.getLong(\"field_i\") == 50);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"id\") == 6);\n      assert(tuple.getLong(\"field_i\") == 40);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(3);\n      assert(tuple.getLong(\"id\") == 5);\n      assert(tuple.getLong(\"field_i\") == 30);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(4);\n      assert(tuple.getLong(\"id\") == 3);\n      assert(tuple.getLong(\"field_i\") == 20);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      tuple = tuples.get(5);\n      assert(tuple.getLong(\"id\") == 4);\n      assert(tuple.getLong(\"field_i\") == 11);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(6);\n      assert(tuple.getLong(\"id\") == 2);\n      assert(tuple.getLong(\"field_i\") == 8);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(7);\n      assert(tuple.getLong(\"id\") == 1);\n      assert(tuple.getLong(\"field_i\") == 7);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n\n      //Test unlimited unsorted result. Should sort on _version_ desc\n      params.put(\"stmt\", \"select 'id', field_i, str_s from collection1 where 'text'='XXXX'\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 8);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 8);\n      assert(tuple.getLong(\"field_i\") == 60);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"id\") == 7);\n      assert(tuple.getLong(\"field_i\") == 50);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"id\") == 6);\n      assert(tuple.getLong(\"field_i\") == 40);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(3);\n      assert(tuple.getLong(\"id\") == 5);\n      assert(tuple.getLong(\"field_i\") == 30);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(4);\n      assert(tuple.getLong(\"id\") == 4);\n      assert(tuple.getLong(\"field_i\") == 11);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(5);\n      assert(tuple.getLong(\"id\") == 3);\n      assert(tuple.getLong(\"field_i\") == 20);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      tuple = tuples.get(6);\n      assert(tuple.getLong(\"id\") == 2);\n      assert(tuple.getLong(\"field_i\") == 8);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(7);\n      assert(tuple.getLong(\"id\") == 1);\n      assert(tuple.getLong(\"field_i\") == 7);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select id, field_i, str_s from collection1 where text='XXXX' order by field_i desc limit 1\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 1);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 8);\n      assert(tuple.getLong(\"field_i\") == 60);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select id, field_i, str_s from collection1 where text='XXXX' AND id='(1 2 3)' order by field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 3);\n      assert(tuple.getLong(\"field_i\") == 20);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"id\") == 2);\n      assert(tuple.getLong(\"field_i\") == 8);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"id\") == 1);\n      assert(tuple.getLong(\"field_i\") == 7);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select id as myId, field_i as myInt, str_s as myString from collection1 where text='XXXX' AND id='(1 2 3)' order by myInt desc\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"myId\") == 3);\n      assert(tuple.getLong(\"myInt\") == 20);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"myId\") == 2);\n      assert(tuple.getLong(\"myInt\") == 8);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"myId\") == 1);\n      assert(tuple.getLong(\"myInt\") == 7);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select id as myId, field_i as myInt, str_s as myString from collection1 where text='XXXX' AND id='(1 2 3)' order by field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"myId\") == 3);\n      assert(tuple.getLong(\"myInt\") == 20);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"myId\") == 2);\n      assert(tuple.getLong(\"myInt\") == 8);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"myId\") == 1);\n      assert(tuple.getLong(\"myInt\") == 7);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n\n    } finally {\n      delete();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b67f9cce921a1f94ec0a28c4eb85bcd887c8aa4","date":1461940050,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testBasicSelect().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testBasicSelect().mjava","sourceNew":"  private void testBasicSelect() throws Exception {\n    try {\n\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexDoc(sdoc(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"7\"));\n      indexDoc(sdoc(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"8\"));\n      indexDoc(sdoc(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\"));\n      indexDoc(sdoc(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"11\"));\n      indexDoc(sdoc(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\"));\n      indexDoc(sdoc(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"40\"));\n      indexDoc(sdoc(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\"));\n      indexDoc(sdoc(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\"));\n      commit();\n\n      Map params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select id, field_i, str_s from collection1 where text='XXXX' order by field_i desc\");\n\n      SolrStream solrStream = new SolrStream(jetty.url, params);\n      List<Tuple> tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 8);\n\n      Tuple tuple = null;\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 8);\n      assert(tuple.getLong(\"field_i\") == 60);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"id\") == 7);\n      assert(tuple.getLong(\"field_i\") == 50);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"id\") == 6);\n      assert(tuple.getLong(\"field_i\") == 40);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(3);\n      assert(tuple.getLong(\"id\") == 5);\n      assert(tuple.getLong(\"field_i\") == 30);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(4);\n      assert(tuple.getLong(\"id\") == 3);\n      assert(tuple.getLong(\"field_i\") == 20);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      tuple = tuples.get(5);\n      assert(tuple.getLong(\"id\") == 4);\n      assert(tuple.getLong(\"field_i\") == 11);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(6);\n      assert(tuple.getLong(\"id\") == 2);\n      assert(tuple.getLong(\"field_i\") == 8);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(7);\n      assert(tuple.getLong(\"id\") == 1);\n      assert(tuple.getLong(\"field_i\") == 7);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n\n      //Test unlimited unsorted result. Should sort on _version_ desc\n      params.put(\"stmt\", \"select id, field_i, str_s from collection1 where text='XXXX'\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 8);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 8);\n      assert(tuple.getLong(\"field_i\") == 60);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"id\") == 7);\n      assert(tuple.getLong(\"field_i\") == 50);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"id\") == 6);\n      assert(tuple.getLong(\"field_i\") == 40);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(3);\n      assert(tuple.getLong(\"id\") == 5);\n      assert(tuple.getLong(\"field_i\") == 30);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(4);\n      assert(tuple.getLong(\"id\") == 4);\n      assert(tuple.getLong(\"field_i\") == 11);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(5);\n      assert(tuple.getLong(\"id\") == 3);\n      assert(tuple.getLong(\"field_i\") == 20);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      tuple = tuples.get(6);\n      assert(tuple.getLong(\"id\") == 2);\n      assert(tuple.getLong(\"field_i\") == 8);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(7);\n      assert(tuple.getLong(\"id\") == 1);\n      assert(tuple.getLong(\"field_i\") == 7);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select id, field_i, str_s from collection1 where text='XXXX' order by field_i desc limit 1\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 1);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 8);\n      assert(tuple.getLong(\"field_i\") == 60);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select id, field_i, str_s from collection1 where text='XXXX' AND id='(1 2 3)' order by field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 3);\n      assert(tuple.getLong(\"field_i\") == 20);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"id\") == 2);\n      assert(tuple.getLong(\"field_i\") == 8);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"id\") == 1);\n      assert(tuple.getLong(\"field_i\") == 7);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select id as myId, field_i as myInt, str_s as myString from collection1 where text='XXXX' \" +\n          \"AND id='(1 2 3)' order by myInt desc\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"myId\") == 3);\n      assert(tuple.getLong(\"myInt\") == 20);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"myId\") == 2);\n      assert(tuple.getLong(\"myInt\") == 8);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"myId\") == 1);\n      assert(tuple.getLong(\"myInt\") == 7);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select id as myId, field_i as myInt, str_s as myString from collection1 where text='XXXX' \" +\n          \"AND id='(1 2 3)' order by field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"myId\") == 3);\n      assert(tuple.getLong(\"myInt\") == 20);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"myId\") == 2);\n      assert(tuple.getLong(\"myInt\") == 8);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"myId\") == 1);\n      assert(tuple.getLong(\"myInt\") == 7);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n    } finally {\n      delete();\n    }\n  }\n\n","sourceOld":"  private void testBasicSelect() throws Exception {\n    try {\n\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexDoc(sdoc(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"7\"));\n      indexDoc(sdoc(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"8\"));\n      indexDoc(sdoc(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\"));\n      indexDoc(sdoc(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"11\"));\n      indexDoc(sdoc(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\"));\n      indexDoc(sdoc(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"40\"));\n      indexDoc(sdoc(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\"));\n      indexDoc(sdoc(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\"));\n      commit();\n\n      Map params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select id, field_i, str_s from collection1 where text='XXXX' order by field_i desc\");\n\n      SolrStream solrStream = new SolrStream(jetty.url, params);\n      List<Tuple> tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 8);\n\n      Tuple tuple = null;\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 8);\n      assert(tuple.getLong(\"field_i\") == 60);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"id\") == 7);\n      assert(tuple.getLong(\"field_i\") == 50);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"id\") == 6);\n      assert(tuple.getLong(\"field_i\") == 40);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(3);\n      assert(tuple.getLong(\"id\") == 5);\n      assert(tuple.getLong(\"field_i\") == 30);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(4);\n      assert(tuple.getLong(\"id\") == 3);\n      assert(tuple.getLong(\"field_i\") == 20);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      tuple = tuples.get(5);\n      assert(tuple.getLong(\"id\") == 4);\n      assert(tuple.getLong(\"field_i\") == 11);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(6);\n      assert(tuple.getLong(\"id\") == 2);\n      assert(tuple.getLong(\"field_i\") == 8);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(7);\n      assert(tuple.getLong(\"id\") == 1);\n      assert(tuple.getLong(\"field_i\") == 7);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n\n      //Test unlimited unsorted result. Should sort on _version_ desc\n      params.put(\"stmt\", \"select id, field_i, str_s from collection1 where text='XXXX'\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 8);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 8);\n      assert(tuple.getLong(\"field_i\") == 60);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"id\") == 7);\n      assert(tuple.getLong(\"field_i\") == 50);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"id\") == 6);\n      assert(tuple.getLong(\"field_i\") == 40);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(3);\n      assert(tuple.getLong(\"id\") == 5);\n      assert(tuple.getLong(\"field_i\") == 30);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(4);\n      assert(tuple.getLong(\"id\") == 4);\n      assert(tuple.getLong(\"field_i\") == 11);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(5);\n      assert(tuple.getLong(\"id\") == 3);\n      assert(tuple.getLong(\"field_i\") == 20);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      tuple = tuples.get(6);\n      assert(tuple.getLong(\"id\") == 2);\n      assert(tuple.getLong(\"field_i\") == 8);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(7);\n      assert(tuple.getLong(\"id\") == 1);\n      assert(tuple.getLong(\"field_i\") == 7);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select id, field_i, str_s from collection1 where text='XXXX' order by field_i desc limit 1\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 1);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 8);\n      assert(tuple.getLong(\"field_i\") == 60);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select id, field_i, str_s from collection1 where text='XXXX' AND id='(1 2 3)' order by field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 3);\n      assert(tuple.getLong(\"field_i\") == 20);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"id\") == 2);\n      assert(tuple.getLong(\"field_i\") == 8);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"id\") == 1);\n      assert(tuple.getLong(\"field_i\") == 7);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select id as myId, field_i as myInt, str_s as myString from collection1 where text='XXXX' AND id='(1 2 3)' order by myInt desc\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"myId\") == 3);\n      assert(tuple.getLong(\"myInt\") == 20);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"myId\") == 2);\n      assert(tuple.getLong(\"myInt\") == 8);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"myId\") == 1);\n      assert(tuple.getLong(\"myInt\") == 7);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select id as myId, field_i as myInt, str_s as myString from collection1 where text='XXXX' AND id='(1 2 3)' order by field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"myId\") == 3);\n      assert(tuple.getLong(\"myInt\") == 20);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"myId\") == 2);\n      assert(tuple.getLong(\"myInt\") == 8);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"myId\") == 1);\n      assert(tuple.getLong(\"myInt\") == 7);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n    } finally {\n      delete();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"908656025e558a536b1b781cf8d02a84e7acb262","date":1461964320,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testBasicSelect().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testBasicSelect().mjava","sourceNew":"  private void testBasicSelect() throws Exception {\n    try {\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexDoc(sdoc(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"7\"));\n      indexDoc(sdoc(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"8\"));\n      indexDoc(sdoc(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\"));\n      indexDoc(sdoc(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"11\"));\n      indexDoc(sdoc(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\"));\n      indexDoc(sdoc(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"40\"));\n      indexDoc(sdoc(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\"));\n      indexDoc(sdoc(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\"));\n      commit();\n\n      Map params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select id, field_i, str_s from collection1 where text='XXXX' order by field_i desc\");\n\n      SolrStream solrStream = new SolrStream(jetty.url, params);\n      List<Tuple> tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 8);\n\n      Tuple tuple = null;\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 8);\n      assert(tuple.getLong(\"field_i\") == 60);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"id\") == 7);\n      assert(tuple.getLong(\"field_i\") == 50);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"id\") == 6);\n      assert(tuple.getLong(\"field_i\") == 40);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(3);\n      assert(tuple.getLong(\"id\") == 5);\n      assert(tuple.getLong(\"field_i\") == 30);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(4);\n      assert(tuple.getLong(\"id\") == 3);\n      assert(tuple.getLong(\"field_i\") == 20);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      tuple = tuples.get(5);\n      assert(tuple.getLong(\"id\") == 4);\n      assert(tuple.getLong(\"field_i\") == 11);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(6);\n      assert(tuple.getLong(\"id\") == 2);\n      assert(tuple.getLong(\"field_i\") == 8);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(7);\n      assert(tuple.getLong(\"id\") == 1);\n      assert(tuple.getLong(\"field_i\") == 7);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n\n      //Test unlimited unsorted result. Should sort on _version_ desc\n      params.put(\"stmt\", \"select id, field_i, str_s from collection1 where text='XXXX'\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 8);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 8);\n      assert(tuple.getLong(\"field_i\") == 60);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"id\") == 7);\n      assert(tuple.getLong(\"field_i\") == 50);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"id\") == 6);\n      assert(tuple.getLong(\"field_i\") == 40);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(3);\n      assert(tuple.getLong(\"id\") == 5);\n      assert(tuple.getLong(\"field_i\") == 30);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(4);\n      assert(tuple.getLong(\"id\") == 4);\n      assert(tuple.getLong(\"field_i\") == 11);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(5);\n      assert(tuple.getLong(\"id\") == 3);\n      assert(tuple.getLong(\"field_i\") == 20);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      tuple = tuples.get(6);\n      assert(tuple.getLong(\"id\") == 2);\n      assert(tuple.getLong(\"field_i\") == 8);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(7);\n      assert(tuple.getLong(\"id\") == 1);\n      assert(tuple.getLong(\"field_i\") == 7);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select id, field_i, str_s from collection1 where text='XXXX' order by field_i desc limit 1\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 1);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 8);\n      assert(tuple.getLong(\"field_i\") == 60);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select id, field_i, str_s from collection1 where text='XXXX' AND id='(1 2 3)' order by field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 3);\n      assert(tuple.getLong(\"field_i\") == 20);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"id\") == 2);\n      assert(tuple.getLong(\"field_i\") == 8);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"id\") == 1);\n      assert(tuple.getLong(\"field_i\") == 7);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select id as myId, field_i as myInt, str_s as myString from collection1 where text='XXXX' \" +\n          \"AND id='(1 2 3)' order by myInt desc\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"myId\") == 3);\n      assert(tuple.getLong(\"myInt\") == 20);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"myId\") == 2);\n      assert(tuple.getLong(\"myInt\") == 8);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"myId\") == 1);\n      assert(tuple.getLong(\"myInt\") == 7);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select id as myId, field_i as myInt, str_s as myString from collection1 where text='XXXX' \" +\n          \"AND id='(1 2 3)' order by field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"myId\") == 3);\n      assert(tuple.getLong(\"myInt\") == 20);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"myId\") == 2);\n      assert(tuple.getLong(\"myInt\") == 8);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"myId\") == 1);\n      assert(tuple.getLong(\"myInt\") == 7);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n    } finally {\n      delete();\n    }\n  }\n\n","sourceOld":"  private void testBasicSelect() throws Exception {\n    try {\n\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexDoc(sdoc(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"7\"));\n      indexDoc(sdoc(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"8\"));\n      indexDoc(sdoc(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\"));\n      indexDoc(sdoc(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"11\"));\n      indexDoc(sdoc(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\"));\n      indexDoc(sdoc(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"40\"));\n      indexDoc(sdoc(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\"));\n      indexDoc(sdoc(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\"));\n      commit();\n\n      Map params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select id, field_i, str_s from collection1 where text='XXXX' order by field_i desc\");\n\n      SolrStream solrStream = new SolrStream(jetty.url, params);\n      List<Tuple> tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 8);\n\n      Tuple tuple = null;\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 8);\n      assert(tuple.getLong(\"field_i\") == 60);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"id\") == 7);\n      assert(tuple.getLong(\"field_i\") == 50);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"id\") == 6);\n      assert(tuple.getLong(\"field_i\") == 40);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(3);\n      assert(tuple.getLong(\"id\") == 5);\n      assert(tuple.getLong(\"field_i\") == 30);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(4);\n      assert(tuple.getLong(\"id\") == 3);\n      assert(tuple.getLong(\"field_i\") == 20);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      tuple = tuples.get(5);\n      assert(tuple.getLong(\"id\") == 4);\n      assert(tuple.getLong(\"field_i\") == 11);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(6);\n      assert(tuple.getLong(\"id\") == 2);\n      assert(tuple.getLong(\"field_i\") == 8);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(7);\n      assert(tuple.getLong(\"id\") == 1);\n      assert(tuple.getLong(\"field_i\") == 7);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n\n      //Test unlimited unsorted result. Should sort on _version_ desc\n      params.put(\"stmt\", \"select id, field_i, str_s from collection1 where text='XXXX'\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 8);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 8);\n      assert(tuple.getLong(\"field_i\") == 60);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"id\") == 7);\n      assert(tuple.getLong(\"field_i\") == 50);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"id\") == 6);\n      assert(tuple.getLong(\"field_i\") == 40);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(3);\n      assert(tuple.getLong(\"id\") == 5);\n      assert(tuple.getLong(\"field_i\") == 30);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(4);\n      assert(tuple.getLong(\"id\") == 4);\n      assert(tuple.getLong(\"field_i\") == 11);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(5);\n      assert(tuple.getLong(\"id\") == 3);\n      assert(tuple.getLong(\"field_i\") == 20);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      tuple = tuples.get(6);\n      assert(tuple.getLong(\"id\") == 2);\n      assert(tuple.getLong(\"field_i\") == 8);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(7);\n      assert(tuple.getLong(\"id\") == 1);\n      assert(tuple.getLong(\"field_i\") == 7);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select id, field_i, str_s from collection1 where text='XXXX' order by field_i desc limit 1\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 1);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 8);\n      assert(tuple.getLong(\"field_i\") == 60);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select id, field_i, str_s from collection1 where text='XXXX' AND id='(1 2 3)' order by field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 3);\n      assert(tuple.getLong(\"field_i\") == 20);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"id\") == 2);\n      assert(tuple.getLong(\"field_i\") == 8);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"id\") == 1);\n      assert(tuple.getLong(\"field_i\") == 7);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select id as myId, field_i as myInt, str_s as myString from collection1 where text='XXXX' \" +\n          \"AND id='(1 2 3)' order by myInt desc\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"myId\") == 3);\n      assert(tuple.getLong(\"myInt\") == 20);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"myId\") == 2);\n      assert(tuple.getLong(\"myInt\") == 8);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"myId\") == 1);\n      assert(tuple.getLong(\"myInt\") == 7);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select id as myId, field_i as myInt, str_s as myString from collection1 where text='XXXX' \" +\n          \"AND id='(1 2 3)' order by field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"myId\") == 3);\n      assert(tuple.getLong(\"myInt\") == 20);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"myId\") == 2);\n      assert(tuple.getLong(\"myInt\") == 8);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"myId\") == 1);\n      assert(tuple.getLong(\"myInt\") == 7);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n    } finally {\n      delete();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9c235d2e63c37f49115f8f57af948338851f2437","date":1462295061,"type":3,"author":"jbernste","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testBasicSelect().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testBasicSelect().mjava","sourceNew":"  private void testBasicSelect() throws Exception {\n    try {\n\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexDoc(sdoc(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"7\"));\n      indexDoc(sdoc(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"8\"));\n      indexDoc(sdoc(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\"));\n      indexDoc(sdoc(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"11\"));\n      indexDoc(sdoc(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\"));\n      indexDoc(sdoc(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"40\"));\n      indexDoc(sdoc(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\"));\n      indexDoc(sdoc(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\"));\n      commit();\n      Map params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select 'id', field_i, str_s from collection1 where 'text'='XXXX' order by field_i desc\");\n\n      SolrStream solrStream = new SolrStream(jetty.url, params);\n      List<Tuple> tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 8);\n\n      Tuple tuple = null;\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 8);\n      assert(tuple.getLong(\"field_i\") == 60);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"id\") == 7);\n      assert(tuple.getLong(\"field_i\") == 50);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"id\") == 6);\n      assert(tuple.getLong(\"field_i\") == 40);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(3);\n      assert(tuple.getLong(\"id\") == 5);\n      assert(tuple.getLong(\"field_i\") == 30);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(4);\n      assert(tuple.getLong(\"id\") == 3);\n      assert(tuple.getLong(\"field_i\") == 20);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      tuple = tuples.get(5);\n      assert(tuple.getLong(\"id\") == 4);\n      assert(tuple.getLong(\"field_i\") == 11);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(6);\n      assert(tuple.getLong(\"id\") == 2);\n      assert(tuple.getLong(\"field_i\") == 8);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(7);\n      assert(tuple.getLong(\"id\") == 1);\n      assert(tuple.getLong(\"field_i\") == 7);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n\n      //Test unlimited unsorted result. Should sort on _version_ desc\n      params.put(\"stmt\", \"select 'id', field_i, str_s from collection1 where 'text'='XXXX'\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 8);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 8);\n      assert(tuple.getLong(\"field_i\") == 60);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"id\") == 7);\n      assert(tuple.getLong(\"field_i\") == 50);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"id\") == 6);\n      assert(tuple.getLong(\"field_i\") == 40);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(3);\n      assert(tuple.getLong(\"id\") == 5);\n      assert(tuple.getLong(\"field_i\") == 30);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(4);\n      assert(tuple.getLong(\"id\") == 4);\n      assert(tuple.getLong(\"field_i\") == 11);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(5);\n      assert(tuple.getLong(\"id\") == 3);\n      assert(tuple.getLong(\"field_i\") == 20);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      tuple = tuples.get(6);\n      assert(tuple.getLong(\"id\") == 2);\n      assert(tuple.getLong(\"field_i\") == 8);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(7);\n      assert(tuple.getLong(\"id\") == 1);\n      assert(tuple.getLong(\"field_i\") == 7);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select id, field_i, str_s from collection1 where text='XXXX' order by field_i desc limit 1\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 1);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 8);\n      assert(tuple.getLong(\"field_i\") == 60);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select id, field_i, str_s from collection1 where text='XXXX' AND id='(1 2 3)' order by field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 3);\n      assert(tuple.getLong(\"field_i\") == 20);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"id\") == 2);\n      assert(tuple.getLong(\"field_i\") == 8);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"id\") == 1);\n      assert(tuple.getLong(\"field_i\") == 7);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select id as myId, field_i as myInt, str_s as myString from collection1 where text='XXXX' AND id='(1 2 3)' order by myInt desc\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"myId\") == 3);\n      assert(tuple.getLong(\"myInt\") == 20);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"myId\") == 2);\n      assert(tuple.getLong(\"myInt\") == 8);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"myId\") == 1);\n      assert(tuple.getLong(\"myInt\") == 7);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select id as myId, field_i as myInt, str_s as myString from collection1 where text='XXXX' AND id='(1 2 3)' order by field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"myId\") == 3);\n      assert(tuple.getLong(\"myInt\") == 20);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"myId\") == 2);\n      assert(tuple.getLong(\"myInt\") == 8);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"myId\") == 1);\n      assert(tuple.getLong(\"myInt\") == 7);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      //Test after reload SOLR-9059//\n      Replica leader = getShardLeader(\"collection1\", \"shard1\", 30 /* timeout secs */);\n\n      // reload collection and wait to see the core report it has been reloaded\n      boolean wasReloaded = reloadCollection(leader, \"collection1\");\n      assertTrue(wasReloaded);\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select id as myId, field_i as myInt, str_s as myString from collection1 where text='XXXX' AND id='(1 2 3)' order by field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"myId\") == 3);\n      assert(tuple.getLong(\"myInt\") == 20);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"myId\") == 2);\n      assert(tuple.getLong(\"myInt\") == 8);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"myId\") == 1);\n      assert(tuple.getLong(\"myInt\") == 7);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n    } finally {\n      delete();\n    }\n  }\n\n","sourceOld":"  private void testBasicSelect() throws Exception {\n    try {\n\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexDoc(sdoc(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"7\"));\n      indexDoc(sdoc(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"8\"));\n      indexDoc(sdoc(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\"));\n      indexDoc(sdoc(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"11\"));\n      indexDoc(sdoc(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\"));\n      indexDoc(sdoc(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"40\"));\n      indexDoc(sdoc(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\"));\n      indexDoc(sdoc(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\"));\n      commit();\n      Map params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select 'id', field_i, str_s from collection1 where 'text'='XXXX' order by field_i desc\");\n\n      SolrStream solrStream = new SolrStream(jetty.url, params);\n      List<Tuple> tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 8);\n\n      Tuple tuple = null;\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 8);\n      assert(tuple.getLong(\"field_i\") == 60);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"id\") == 7);\n      assert(tuple.getLong(\"field_i\") == 50);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"id\") == 6);\n      assert(tuple.getLong(\"field_i\") == 40);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(3);\n      assert(tuple.getLong(\"id\") == 5);\n      assert(tuple.getLong(\"field_i\") == 30);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(4);\n      assert(tuple.getLong(\"id\") == 3);\n      assert(tuple.getLong(\"field_i\") == 20);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      tuple = tuples.get(5);\n      assert(tuple.getLong(\"id\") == 4);\n      assert(tuple.getLong(\"field_i\") == 11);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(6);\n      assert(tuple.getLong(\"id\") == 2);\n      assert(tuple.getLong(\"field_i\") == 8);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(7);\n      assert(tuple.getLong(\"id\") == 1);\n      assert(tuple.getLong(\"field_i\") == 7);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n\n      //Test unlimited unsorted result. Should sort on _version_ desc\n      params.put(\"stmt\", \"select 'id', field_i, str_s from collection1 where 'text'='XXXX'\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 8);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 8);\n      assert(tuple.getLong(\"field_i\") == 60);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"id\") == 7);\n      assert(tuple.getLong(\"field_i\") == 50);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"id\") == 6);\n      assert(tuple.getLong(\"field_i\") == 40);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(3);\n      assert(tuple.getLong(\"id\") == 5);\n      assert(tuple.getLong(\"field_i\") == 30);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(4);\n      assert(tuple.getLong(\"id\") == 4);\n      assert(tuple.getLong(\"field_i\") == 11);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(5);\n      assert(tuple.getLong(\"id\") == 3);\n      assert(tuple.getLong(\"field_i\") == 20);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      tuple = tuples.get(6);\n      assert(tuple.getLong(\"id\") == 2);\n      assert(tuple.getLong(\"field_i\") == 8);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(7);\n      assert(tuple.getLong(\"id\") == 1);\n      assert(tuple.getLong(\"field_i\") == 7);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select id, field_i, str_s from collection1 where text='XXXX' order by field_i desc limit 1\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 1);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 8);\n      assert(tuple.getLong(\"field_i\") == 60);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select id, field_i, str_s from collection1 where text='XXXX' AND id='(1 2 3)' order by field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 3);\n      assert(tuple.getLong(\"field_i\") == 20);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"id\") == 2);\n      assert(tuple.getLong(\"field_i\") == 8);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"id\") == 1);\n      assert(tuple.getLong(\"field_i\") == 7);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select id as myId, field_i as myInt, str_s as myString from collection1 where text='XXXX' AND id='(1 2 3)' order by myInt desc\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"myId\") == 3);\n      assert(tuple.getLong(\"myInt\") == 20);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"myId\") == 2);\n      assert(tuple.getLong(\"myInt\") == 8);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"myId\") == 1);\n      assert(tuple.getLong(\"myInt\") == 7);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select id as myId, field_i as myInt, str_s as myString from collection1 where text='XXXX' AND id='(1 2 3)' order by field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"myId\") == 3);\n      assert(tuple.getLong(\"myInt\") == 20);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"myId\") == 2);\n      assert(tuple.getLong(\"myInt\") == 8);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"myId\") == 1);\n      assert(tuple.getLong(\"myInt\") == 7);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n\n    } finally {\n      delete();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55b50463286869f584cf849d1587a0fcd54d1dfa","date":1462378517,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testBasicSelect().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testBasicSelect().mjava","sourceNew":"  private void testBasicSelect() throws Exception {\n    try {\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexDoc(sdoc(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"7\"));\n      indexDoc(sdoc(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"8\"));\n      indexDoc(sdoc(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\"));\n      indexDoc(sdoc(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"11\"));\n      indexDoc(sdoc(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\"));\n      indexDoc(sdoc(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"40\"));\n      indexDoc(sdoc(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\"));\n      indexDoc(sdoc(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\"));\n      commit();\n\n      Map params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select id, field_i, str_s from collection1 where text='XXXX' order by field_i desc\");\n\n      SolrStream solrStream = new SolrStream(jetty.url, params);\n      List<Tuple> tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 8);\n\n      Tuple tuple = null;\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 8);\n      assert(tuple.getLong(\"field_i\") == 60);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"id\") == 7);\n      assert(tuple.getLong(\"field_i\") == 50);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"id\") == 6);\n      assert(tuple.getLong(\"field_i\") == 40);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(3);\n      assert(tuple.getLong(\"id\") == 5);\n      assert(tuple.getLong(\"field_i\") == 30);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(4);\n      assert(tuple.getLong(\"id\") == 3);\n      assert(tuple.getLong(\"field_i\") == 20);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      tuple = tuples.get(5);\n      assert(tuple.getLong(\"id\") == 4);\n      assert(tuple.getLong(\"field_i\") == 11);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(6);\n      assert(tuple.getLong(\"id\") == 2);\n      assert(tuple.getLong(\"field_i\") == 8);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(7);\n      assert(tuple.getLong(\"id\") == 1);\n      assert(tuple.getLong(\"field_i\") == 7);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n\n      //Test unlimited unsorted result. Should sort on _version_ desc\n      params.put(\"stmt\", \"select id, field_i, str_s from collection1 where text='XXXX'\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 8);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 8);\n      assert(tuple.getLong(\"field_i\") == 60);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"id\") == 7);\n      assert(tuple.getLong(\"field_i\") == 50);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"id\") == 6);\n      assert(tuple.getLong(\"field_i\") == 40);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(3);\n      assert(tuple.getLong(\"id\") == 5);\n      assert(tuple.getLong(\"field_i\") == 30);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(4);\n      assert(tuple.getLong(\"id\") == 4);\n      assert(tuple.getLong(\"field_i\") == 11);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(5);\n      assert(tuple.getLong(\"id\") == 3);\n      assert(tuple.getLong(\"field_i\") == 20);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      tuple = tuples.get(6);\n      assert(tuple.getLong(\"id\") == 2);\n      assert(tuple.getLong(\"field_i\") == 8);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(7);\n      assert(tuple.getLong(\"id\") == 1);\n      assert(tuple.getLong(\"field_i\") == 7);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select id, field_i, str_s from collection1 where text='XXXX' order by field_i desc limit 1\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 1);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 8);\n      assert(tuple.getLong(\"field_i\") == 60);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select id, field_i, str_s from collection1 where text='XXXX' AND id='(1 2 3)' order by field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 3);\n      assert(tuple.getLong(\"field_i\") == 20);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"id\") == 2);\n      assert(tuple.getLong(\"field_i\") == 8);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"id\") == 1);\n      assert(tuple.getLong(\"field_i\") == 7);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select id as myId, field_i as myInt, str_s as myString from collection1 where text='XXXX' \" +\n          \"AND id='(1 2 3)' order by myInt desc\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"myId\") == 3);\n      assert(tuple.getLong(\"myInt\") == 20);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"myId\") == 2);\n      assert(tuple.getLong(\"myInt\") == 8);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"myId\") == 1);\n      assert(tuple.getLong(\"myInt\") == 7);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select id as myId, field_i as myInt, str_s as myString from collection1 where text='XXXX' \" +\n          \"AND id='(1 2 3)' order by field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"myId\") == 3);\n      assert(tuple.getLong(\"myInt\") == 20);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"myId\") == 2);\n      assert(tuple.getLong(\"myInt\") == 8);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"myId\") == 1);\n      assert(tuple.getLong(\"myInt\") == 7);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      //Test after reload SOLR-9059//\n      Replica leader = getShardLeader(\"collection1\", \"shard1\", 30 /* timeout secs */);\n\n      // reload collection and wait to see the core report it has been reloaded\n      boolean wasReloaded = reloadCollection(leader, \"collection1\");\n      assertTrue(wasReloaded);\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select id as myId, field_i as myInt, str_s as myString from collection1 where text='XXXX' AND id='(1 2 3)' order by field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"myId\") == 3);\n      assert(tuple.getLong(\"myInt\") == 20);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"myId\") == 2);\n      assert(tuple.getLong(\"myInt\") == 8);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"myId\") == 1);\n      assert(tuple.getLong(\"myInt\") == 7);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n    } finally {\n      delete();\n    }\n  }\n\n","sourceOld":"  private void testBasicSelect() throws Exception {\n    try {\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexDoc(sdoc(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"7\"));\n      indexDoc(sdoc(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"8\"));\n      indexDoc(sdoc(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\"));\n      indexDoc(sdoc(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"11\"));\n      indexDoc(sdoc(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\"));\n      indexDoc(sdoc(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"40\"));\n      indexDoc(sdoc(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\"));\n      indexDoc(sdoc(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\"));\n      commit();\n\n      Map params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select id, field_i, str_s from collection1 where text='XXXX' order by field_i desc\");\n\n      SolrStream solrStream = new SolrStream(jetty.url, params);\n      List<Tuple> tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 8);\n\n      Tuple tuple = null;\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 8);\n      assert(tuple.getLong(\"field_i\") == 60);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"id\") == 7);\n      assert(tuple.getLong(\"field_i\") == 50);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"id\") == 6);\n      assert(tuple.getLong(\"field_i\") == 40);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(3);\n      assert(tuple.getLong(\"id\") == 5);\n      assert(tuple.getLong(\"field_i\") == 30);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(4);\n      assert(tuple.getLong(\"id\") == 3);\n      assert(tuple.getLong(\"field_i\") == 20);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      tuple = tuples.get(5);\n      assert(tuple.getLong(\"id\") == 4);\n      assert(tuple.getLong(\"field_i\") == 11);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(6);\n      assert(tuple.getLong(\"id\") == 2);\n      assert(tuple.getLong(\"field_i\") == 8);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(7);\n      assert(tuple.getLong(\"id\") == 1);\n      assert(tuple.getLong(\"field_i\") == 7);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n\n      //Test unlimited unsorted result. Should sort on _version_ desc\n      params.put(\"stmt\", \"select id, field_i, str_s from collection1 where text='XXXX'\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 8);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 8);\n      assert(tuple.getLong(\"field_i\") == 60);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"id\") == 7);\n      assert(tuple.getLong(\"field_i\") == 50);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"id\") == 6);\n      assert(tuple.getLong(\"field_i\") == 40);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(3);\n      assert(tuple.getLong(\"id\") == 5);\n      assert(tuple.getLong(\"field_i\") == 30);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(4);\n      assert(tuple.getLong(\"id\") == 4);\n      assert(tuple.getLong(\"field_i\") == 11);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(5);\n      assert(tuple.getLong(\"id\") == 3);\n      assert(tuple.getLong(\"field_i\") == 20);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      tuple = tuples.get(6);\n      assert(tuple.getLong(\"id\") == 2);\n      assert(tuple.getLong(\"field_i\") == 8);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(7);\n      assert(tuple.getLong(\"id\") == 1);\n      assert(tuple.getLong(\"field_i\") == 7);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select id, field_i, str_s from collection1 where text='XXXX' order by field_i desc limit 1\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 1);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 8);\n      assert(tuple.getLong(\"field_i\") == 60);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select id, field_i, str_s from collection1 where text='XXXX' AND id='(1 2 3)' order by field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 3);\n      assert(tuple.getLong(\"field_i\") == 20);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"id\") == 2);\n      assert(tuple.getLong(\"field_i\") == 8);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"id\") == 1);\n      assert(tuple.getLong(\"field_i\") == 7);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select id as myId, field_i as myInt, str_s as myString from collection1 where text='XXXX' \" +\n          \"AND id='(1 2 3)' order by myInt desc\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"myId\") == 3);\n      assert(tuple.getLong(\"myInt\") == 20);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"myId\") == 2);\n      assert(tuple.getLong(\"myInt\") == 8);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"myId\") == 1);\n      assert(tuple.getLong(\"myInt\") == 7);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select id as myId, field_i as myInt, str_s as myString from collection1 where text='XXXX' \" +\n          \"AND id='(1 2 3)' order by field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"myId\") == 3);\n      assert(tuple.getLong(\"myInt\") == 20);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"myId\") == 2);\n      assert(tuple.getLong(\"myInt\") == 8);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"myId\") == 1);\n      assert(tuple.getLong(\"myInt\") == 7);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n    } finally {\n      delete();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"826d15444ddf61716dc768c229cd54b2c2ccce1c","date":1462822652,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testBasicSelect().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testBasicSelect().mjava","sourceNew":"  private void testBasicSelect() throws Exception {\n    try {\n\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexDoc(sdoc(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"7\"));\n      indexDoc(sdoc(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"8\"));\n      indexDoc(sdoc(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\"));\n      indexDoc(sdoc(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"11\"));\n      indexDoc(sdoc(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\"));\n      indexDoc(sdoc(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"40\"));\n      indexDoc(sdoc(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\"));\n      indexDoc(sdoc(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\"));\n      commit();\n      \n      SolrParams sParams = mapParams(CommonParams.QT, \"/sql\", \n          \"stmt\", \"select 'id', field_i, str_s from collection1 where 'text'='XXXX' order by field_i desc\");\n\n      SolrStream solrStream = new SolrStream(jetty.url, sParams);\n      List<Tuple> tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 8);\n\n      Tuple tuple = null;\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 8);\n      assert(tuple.getLong(\"field_i\") == 60);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"id\") == 7);\n      assert(tuple.getLong(\"field_i\") == 50);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"id\") == 6);\n      assert(tuple.getLong(\"field_i\") == 40);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(3);\n      assert(tuple.getLong(\"id\") == 5);\n      assert(tuple.getLong(\"field_i\") == 30);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(4);\n      assert(tuple.getLong(\"id\") == 3);\n      assert(tuple.getLong(\"field_i\") == 20);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      tuple = tuples.get(5);\n      assert(tuple.getLong(\"id\") == 4);\n      assert(tuple.getLong(\"field_i\") == 11);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(6);\n      assert(tuple.getLong(\"id\") == 2);\n      assert(tuple.getLong(\"field_i\") == 8);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(7);\n      assert(tuple.getLong(\"id\") == 1);\n      assert(tuple.getLong(\"field_i\") == 7);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      //Test unlimited unsorted result. Should sort on _version_ desc\n      sParams = mapParams(CommonParams.QT, \"/sql\", \"stmt\", \"select 'id', field_i, str_s from collection1 where 'text'='XXXX'\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 8);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 8);\n      assert(tuple.getLong(\"field_i\") == 60);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"id\") == 7);\n      assert(tuple.getLong(\"field_i\") == 50);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"id\") == 6);\n      assert(tuple.getLong(\"field_i\") == 40);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(3);\n      assert(tuple.getLong(\"id\") == 5);\n      assert(tuple.getLong(\"field_i\") == 30);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(4);\n      assert(tuple.getLong(\"id\") == 4);\n      assert(tuple.getLong(\"field_i\") == 11);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(5);\n      assert(tuple.getLong(\"id\") == 3);\n      assert(tuple.getLong(\"field_i\") == 20);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      tuple = tuples.get(6);\n      assert(tuple.getLong(\"id\") == 2);\n      assert(tuple.getLong(\"field_i\") == 8);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(7);\n      assert(tuple.getLong(\"id\") == 1);\n      assert(tuple.getLong(\"field_i\") == 7);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \n          \"stmt\", \"select id, field_i, str_s from collection1 where text='XXXX' order by field_i desc limit 1\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 1);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 8);\n      assert(tuple.getLong(\"field_i\") == 60);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \"stmt\", \"select id, field_i, str_s from collection1 where text='XXXX' AND id='(1 2 3)' order by field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 3);\n      assert(tuple.getLong(\"field_i\") == 20);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"id\") == 2);\n      assert(tuple.getLong(\"field_i\") == 8);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"id\") == 1);\n      assert(tuple.getLong(\"field_i\") == 7);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \n          \"stmt\", \"select id as myId, field_i as myInt, str_s as myString from collection1 where text='XXXX' AND id='(1 2 3)' order by myInt desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"myId\") == 3);\n      assert(tuple.getLong(\"myInt\") == 20);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"myId\") == 2);\n      assert(tuple.getLong(\"myInt\") == 8);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"myId\") == 1);\n      assert(tuple.getLong(\"myInt\") == 7);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select id as myId, field_i as myInt, str_s as myString from collection1 where text='XXXX' AND id='(1 2 3)' order by field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"myId\") == 3);\n      assert(tuple.getLong(\"myInt\") == 20);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"myId\") == 2);\n      assert(tuple.getLong(\"myInt\") == 8);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"myId\") == 1);\n      assert(tuple.getLong(\"myInt\") == 7);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      //Test after reload SOLR-9059//\n      Replica leader = getShardLeader(\"collection1\", \"shard1\", 30 /* timeout secs */);\n\n      // reload collection and wait to see the core report it has been reloaded\n      boolean wasReloaded = reloadCollection(leader, \"collection1\");\n      assertTrue(wasReloaded);\n\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select id as myId, field_i as myInt, str_s as myString from collection1 where text='XXXX' AND id='(1 2 3)' order by field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"myId\") == 3);\n      assert(tuple.getLong(\"myInt\") == 20);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"myId\") == 2);\n      assert(tuple.getLong(\"myInt\") == 8);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"myId\") == 1);\n      assert(tuple.getLong(\"myInt\") == 7);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n    } finally {\n      delete();\n    }\n  }\n\n","sourceOld":"  private void testBasicSelect() throws Exception {\n    try {\n\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexDoc(sdoc(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"7\"));\n      indexDoc(sdoc(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"8\"));\n      indexDoc(sdoc(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\"));\n      indexDoc(sdoc(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"11\"));\n      indexDoc(sdoc(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\"));\n      indexDoc(sdoc(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"40\"));\n      indexDoc(sdoc(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\"));\n      indexDoc(sdoc(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\"));\n      commit();\n      Map params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select 'id', field_i, str_s from collection1 where 'text'='XXXX' order by field_i desc\");\n\n      SolrStream solrStream = new SolrStream(jetty.url, params);\n      List<Tuple> tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 8);\n\n      Tuple tuple = null;\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 8);\n      assert(tuple.getLong(\"field_i\") == 60);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"id\") == 7);\n      assert(tuple.getLong(\"field_i\") == 50);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"id\") == 6);\n      assert(tuple.getLong(\"field_i\") == 40);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(3);\n      assert(tuple.getLong(\"id\") == 5);\n      assert(tuple.getLong(\"field_i\") == 30);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(4);\n      assert(tuple.getLong(\"id\") == 3);\n      assert(tuple.getLong(\"field_i\") == 20);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      tuple = tuples.get(5);\n      assert(tuple.getLong(\"id\") == 4);\n      assert(tuple.getLong(\"field_i\") == 11);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(6);\n      assert(tuple.getLong(\"id\") == 2);\n      assert(tuple.getLong(\"field_i\") == 8);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(7);\n      assert(tuple.getLong(\"id\") == 1);\n      assert(tuple.getLong(\"field_i\") == 7);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n\n      //Test unlimited unsorted result. Should sort on _version_ desc\n      params.put(\"stmt\", \"select 'id', field_i, str_s from collection1 where 'text'='XXXX'\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 8);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 8);\n      assert(tuple.getLong(\"field_i\") == 60);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"id\") == 7);\n      assert(tuple.getLong(\"field_i\") == 50);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"id\") == 6);\n      assert(tuple.getLong(\"field_i\") == 40);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(3);\n      assert(tuple.getLong(\"id\") == 5);\n      assert(tuple.getLong(\"field_i\") == 30);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(4);\n      assert(tuple.getLong(\"id\") == 4);\n      assert(tuple.getLong(\"field_i\") == 11);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(5);\n      assert(tuple.getLong(\"id\") == 3);\n      assert(tuple.getLong(\"field_i\") == 20);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      tuple = tuples.get(6);\n      assert(tuple.getLong(\"id\") == 2);\n      assert(tuple.getLong(\"field_i\") == 8);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(7);\n      assert(tuple.getLong(\"id\") == 1);\n      assert(tuple.getLong(\"field_i\") == 7);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select id, field_i, str_s from collection1 where text='XXXX' order by field_i desc limit 1\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 1);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 8);\n      assert(tuple.getLong(\"field_i\") == 60);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select id, field_i, str_s from collection1 where text='XXXX' AND id='(1 2 3)' order by field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 3);\n      assert(tuple.getLong(\"field_i\") == 20);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"id\") == 2);\n      assert(tuple.getLong(\"field_i\") == 8);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"id\") == 1);\n      assert(tuple.getLong(\"field_i\") == 7);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select id as myId, field_i as myInt, str_s as myString from collection1 where text='XXXX' AND id='(1 2 3)' order by myInt desc\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"myId\") == 3);\n      assert(tuple.getLong(\"myInt\") == 20);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"myId\") == 2);\n      assert(tuple.getLong(\"myInt\") == 8);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"myId\") == 1);\n      assert(tuple.getLong(\"myInt\") == 7);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select id as myId, field_i as myInt, str_s as myString from collection1 where text='XXXX' AND id='(1 2 3)' order by field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"myId\") == 3);\n      assert(tuple.getLong(\"myInt\") == 20);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"myId\") == 2);\n      assert(tuple.getLong(\"myInt\") == 8);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"myId\") == 1);\n      assert(tuple.getLong(\"myInt\") == 7);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      //Test after reload SOLR-9059//\n      Replica leader = getShardLeader(\"collection1\", \"shard1\", 30 /* timeout secs */);\n\n      // reload collection and wait to see the core report it has been reloaded\n      boolean wasReloaded = reloadCollection(leader, \"collection1\");\n      assertTrue(wasReloaded);\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select id as myId, field_i as myInt, str_s as myString from collection1 where text='XXXX' AND id='(1 2 3)' order by field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"myId\") == 3);\n      assert(tuple.getLong(\"myInt\") == 20);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"myId\") == 2);\n      assert(tuple.getLong(\"myInt\") == 8);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"myId\") == 1);\n      assert(tuple.getLong(\"myInt\") == 7);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n    } finally {\n      delete();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e66a459d38c1c4a2f97128433dab546f683a9fed","date":1462873476,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testBasicSelect().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testBasicSelect().mjava","sourceNew":"  private void testBasicSelect() throws Exception {\n    try {\n\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexDoc(sdoc(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"7\"));\n      indexDoc(sdoc(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"8\"));\n      indexDoc(sdoc(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\"));\n      indexDoc(sdoc(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"11\"));\n      indexDoc(sdoc(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\"));\n      indexDoc(sdoc(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"40\"));\n      indexDoc(sdoc(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\"));\n      indexDoc(sdoc(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\"));\n      commit();\n      \n      SolrParams sParams = mapParams(CommonParams.QT, \"/sql\", \n          \"stmt\", \"select 'id', field_i, str_s from collection1 where 'text'='XXXX' order by field_i desc\");\n\n      SolrStream solrStream = new SolrStream(jetty.url, sParams);\n      List<Tuple> tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 8);\n\n      Tuple tuple = null;\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 8);\n      assert(tuple.getLong(\"field_i\") == 60);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"id\") == 7);\n      assert(tuple.getLong(\"field_i\") == 50);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"id\") == 6);\n      assert(tuple.getLong(\"field_i\") == 40);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(3);\n      assert(tuple.getLong(\"id\") == 5);\n      assert(tuple.getLong(\"field_i\") == 30);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(4);\n      assert(tuple.getLong(\"id\") == 3);\n      assert(tuple.getLong(\"field_i\") == 20);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      tuple = tuples.get(5);\n      assert(tuple.getLong(\"id\") == 4);\n      assert(tuple.getLong(\"field_i\") == 11);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(6);\n      assert(tuple.getLong(\"id\") == 2);\n      assert(tuple.getLong(\"field_i\") == 8);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(7);\n      assert(tuple.getLong(\"id\") == 1);\n      assert(tuple.getLong(\"field_i\") == 7);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      //Test unlimited unsorted result. Should sort on _version_ desc\n      sParams = mapParams(CommonParams.QT, \"/sql\", \"stmt\", \"select 'id', field_i, str_s from collection1 where 'text'='XXXX'\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 8);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 8);\n      assert(tuple.getLong(\"field_i\") == 60);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"id\") == 7);\n      assert(tuple.getLong(\"field_i\") == 50);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"id\") == 6);\n      assert(tuple.getLong(\"field_i\") == 40);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(3);\n      assert(tuple.getLong(\"id\") == 5);\n      assert(tuple.getLong(\"field_i\") == 30);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(4);\n      assert(tuple.getLong(\"id\") == 4);\n      assert(tuple.getLong(\"field_i\") == 11);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(5);\n      assert(tuple.getLong(\"id\") == 3);\n      assert(tuple.getLong(\"field_i\") == 20);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      tuple = tuples.get(6);\n      assert(tuple.getLong(\"id\") == 2);\n      assert(tuple.getLong(\"field_i\") == 8);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(7);\n      assert(tuple.getLong(\"id\") == 1);\n      assert(tuple.getLong(\"field_i\") == 7);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \n          \"stmt\", \"select id, field_i, str_s from collection1 where text='XXXX' order by field_i desc limit 1\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 1);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 8);\n      assert(tuple.getLong(\"field_i\") == 60);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \"stmt\", \"select id, field_i, str_s from collection1 where text='XXXX' AND id='(1 2 3)' order by field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 3);\n      assert(tuple.getLong(\"field_i\") == 20);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"id\") == 2);\n      assert(tuple.getLong(\"field_i\") == 8);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"id\") == 1);\n      assert(tuple.getLong(\"field_i\") == 7);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \n          \"stmt\", \"select id as myId, field_i as myInt, str_s as myString from collection1 where text='XXXX' AND id='(1 2 3)' order by myInt desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"myId\") == 3);\n      assert(tuple.getLong(\"myInt\") == 20);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"myId\") == 2);\n      assert(tuple.getLong(\"myInt\") == 8);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"myId\") == 1);\n      assert(tuple.getLong(\"myInt\") == 7);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select id as myId, field_i as myInt, str_s as myString from collection1 where text='XXXX' AND id='(1 2 3)' order by field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"myId\") == 3);\n      assert(tuple.getLong(\"myInt\") == 20);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"myId\") == 2);\n      assert(tuple.getLong(\"myInt\") == 8);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"myId\") == 1);\n      assert(tuple.getLong(\"myInt\") == 7);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      //Test after reload SOLR-9059//\n      Replica leader = getShardLeader(\"collection1\", \"shard1\", 30 /* timeout secs */);\n\n      // reload collection and wait to see the core report it has been reloaded\n      boolean wasReloaded = reloadCollection(leader, \"collection1\");\n      assertTrue(wasReloaded);\n\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select id as myId, field_i as myInt, str_s as myString from collection1 where text='XXXX' AND id='(1 2 3)' order by field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"myId\") == 3);\n      assert(tuple.getLong(\"myInt\") == 20);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"myId\") == 2);\n      assert(tuple.getLong(\"myInt\") == 8);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"myId\") == 1);\n      assert(tuple.getLong(\"myInt\") == 7);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n    } finally {\n      delete();\n    }\n  }\n\n","sourceOld":"  private void testBasicSelect() throws Exception {\n    try {\n\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexDoc(sdoc(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"7\"));\n      indexDoc(sdoc(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"8\"));\n      indexDoc(sdoc(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\"));\n      indexDoc(sdoc(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"11\"));\n      indexDoc(sdoc(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\"));\n      indexDoc(sdoc(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"40\"));\n      indexDoc(sdoc(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\"));\n      indexDoc(sdoc(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\"));\n      commit();\n      Map params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select 'id', field_i, str_s from collection1 where 'text'='XXXX' order by field_i desc\");\n\n      SolrStream solrStream = new SolrStream(jetty.url, params);\n      List<Tuple> tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 8);\n\n      Tuple tuple = null;\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 8);\n      assert(tuple.getLong(\"field_i\") == 60);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"id\") == 7);\n      assert(tuple.getLong(\"field_i\") == 50);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"id\") == 6);\n      assert(tuple.getLong(\"field_i\") == 40);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(3);\n      assert(tuple.getLong(\"id\") == 5);\n      assert(tuple.getLong(\"field_i\") == 30);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(4);\n      assert(tuple.getLong(\"id\") == 3);\n      assert(tuple.getLong(\"field_i\") == 20);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      tuple = tuples.get(5);\n      assert(tuple.getLong(\"id\") == 4);\n      assert(tuple.getLong(\"field_i\") == 11);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(6);\n      assert(tuple.getLong(\"id\") == 2);\n      assert(tuple.getLong(\"field_i\") == 8);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(7);\n      assert(tuple.getLong(\"id\") == 1);\n      assert(tuple.getLong(\"field_i\") == 7);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n\n      //Test unlimited unsorted result. Should sort on _version_ desc\n      params.put(\"stmt\", \"select 'id', field_i, str_s from collection1 where 'text'='XXXX'\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 8);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 8);\n      assert(tuple.getLong(\"field_i\") == 60);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"id\") == 7);\n      assert(tuple.getLong(\"field_i\") == 50);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"id\") == 6);\n      assert(tuple.getLong(\"field_i\") == 40);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(3);\n      assert(tuple.getLong(\"id\") == 5);\n      assert(tuple.getLong(\"field_i\") == 30);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(4);\n      assert(tuple.getLong(\"id\") == 4);\n      assert(tuple.getLong(\"field_i\") == 11);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(5);\n      assert(tuple.getLong(\"id\") == 3);\n      assert(tuple.getLong(\"field_i\") == 20);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      tuple = tuples.get(6);\n      assert(tuple.getLong(\"id\") == 2);\n      assert(tuple.getLong(\"field_i\") == 8);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(7);\n      assert(tuple.getLong(\"id\") == 1);\n      assert(tuple.getLong(\"field_i\") == 7);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select id, field_i, str_s from collection1 where text='XXXX' order by field_i desc limit 1\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 1);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 8);\n      assert(tuple.getLong(\"field_i\") == 60);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select id, field_i, str_s from collection1 where text='XXXX' AND id='(1 2 3)' order by field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 3);\n      assert(tuple.getLong(\"field_i\") == 20);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"id\") == 2);\n      assert(tuple.getLong(\"field_i\") == 8);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"id\") == 1);\n      assert(tuple.getLong(\"field_i\") == 7);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select id as myId, field_i as myInt, str_s as myString from collection1 where text='XXXX' AND id='(1 2 3)' order by myInt desc\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"myId\") == 3);\n      assert(tuple.getLong(\"myInt\") == 20);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"myId\") == 2);\n      assert(tuple.getLong(\"myInt\") == 8);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"myId\") == 1);\n      assert(tuple.getLong(\"myInt\") == 7);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select id as myId, field_i as myInt, str_s as myString from collection1 where text='XXXX' AND id='(1 2 3)' order by field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"myId\") == 3);\n      assert(tuple.getLong(\"myInt\") == 20);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"myId\") == 2);\n      assert(tuple.getLong(\"myInt\") == 8);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"myId\") == 1);\n      assert(tuple.getLong(\"myInt\") == 7);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      //Test after reload SOLR-9059//\n      Replica leader = getShardLeader(\"collection1\", \"shard1\", 30 /* timeout secs */);\n\n      // reload collection and wait to see the core report it has been reloaded\n      boolean wasReloaded = reloadCollection(leader, \"collection1\");\n      assertTrue(wasReloaded);\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select id as myId, field_i as myInt, str_s as myString from collection1 where text='XXXX' AND id='(1 2 3)' order by field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"myId\") == 3);\n      assert(tuple.getLong(\"myInt\") == 20);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"myId\") == 2);\n      assert(tuple.getLong(\"myInt\") == 8);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"myId\") == 1);\n      assert(tuple.getLong(\"myInt\") == 7);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n    } finally {\n      delete();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testBasicSelect().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testBasicSelect().mjava","sourceNew":"  private void testBasicSelect() throws Exception {\n    try {\n\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexDoc(sdoc(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"7\"));\n      indexDoc(sdoc(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"8\"));\n      indexDoc(sdoc(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\"));\n      indexDoc(sdoc(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"11\"));\n      indexDoc(sdoc(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\"));\n      indexDoc(sdoc(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"40\"));\n      indexDoc(sdoc(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\"));\n      indexDoc(sdoc(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\"));\n      commit();\n      \n      SolrParams sParams = mapParams(CommonParams.QT, \"/sql\", \n          \"stmt\", \"select 'id', field_i, str_s from collection1 where 'text'='XXXX' order by field_i desc\");\n\n      SolrStream solrStream = new SolrStream(jetty.url, sParams);\n      List<Tuple> tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 8);\n\n      Tuple tuple = null;\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 8);\n      assert(tuple.getLong(\"field_i\") == 60);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"id\") == 7);\n      assert(tuple.getLong(\"field_i\") == 50);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"id\") == 6);\n      assert(tuple.getLong(\"field_i\") == 40);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(3);\n      assert(tuple.getLong(\"id\") == 5);\n      assert(tuple.getLong(\"field_i\") == 30);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(4);\n      assert(tuple.getLong(\"id\") == 3);\n      assert(tuple.getLong(\"field_i\") == 20);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      tuple = tuples.get(5);\n      assert(tuple.getLong(\"id\") == 4);\n      assert(tuple.getLong(\"field_i\") == 11);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(6);\n      assert(tuple.getLong(\"id\") == 2);\n      assert(tuple.getLong(\"field_i\") == 8);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(7);\n      assert(tuple.getLong(\"id\") == 1);\n      assert(tuple.getLong(\"field_i\") == 7);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      //Test unlimited unsorted result. Should sort on _version_ desc\n      sParams = mapParams(CommonParams.QT, \"/sql\", \"stmt\", \"select 'id', field_i, str_s from collection1 where 'text'='XXXX'\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 8);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 8);\n      assert(tuple.getLong(\"field_i\") == 60);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"id\") == 7);\n      assert(tuple.getLong(\"field_i\") == 50);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"id\") == 6);\n      assert(tuple.getLong(\"field_i\") == 40);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(3);\n      assert(tuple.getLong(\"id\") == 5);\n      assert(tuple.getLong(\"field_i\") == 30);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(4);\n      assert(tuple.getLong(\"id\") == 4);\n      assert(tuple.getLong(\"field_i\") == 11);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(5);\n      assert(tuple.getLong(\"id\") == 3);\n      assert(tuple.getLong(\"field_i\") == 20);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      tuple = tuples.get(6);\n      assert(tuple.getLong(\"id\") == 2);\n      assert(tuple.getLong(\"field_i\") == 8);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(7);\n      assert(tuple.getLong(\"id\") == 1);\n      assert(tuple.getLong(\"field_i\") == 7);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \n          \"stmt\", \"select id, field_i, str_s from collection1 where text='XXXX' order by field_i desc limit 1\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 1);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 8);\n      assert(tuple.getLong(\"field_i\") == 60);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \"stmt\", \"select id, field_i, str_s from collection1 where text='XXXX' AND id='(1 2 3)' order by field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 3);\n      assert(tuple.getLong(\"field_i\") == 20);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"id\") == 2);\n      assert(tuple.getLong(\"field_i\") == 8);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"id\") == 1);\n      assert(tuple.getLong(\"field_i\") == 7);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \n          \"stmt\", \"select id as myId, field_i as myInt, str_s as myString from collection1 where text='XXXX' AND id='(1 2 3)' order by myInt desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"myId\") == 3);\n      assert(tuple.getLong(\"myInt\") == 20);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"myId\") == 2);\n      assert(tuple.getLong(\"myInt\") == 8);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"myId\") == 1);\n      assert(tuple.getLong(\"myInt\") == 7);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select id as myId, field_i as myInt, str_s as myString from collection1 where text='XXXX' AND id='(1 2 3)' order by field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"myId\") == 3);\n      assert(tuple.getLong(\"myInt\") == 20);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"myId\") == 2);\n      assert(tuple.getLong(\"myInt\") == 8);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"myId\") == 1);\n      assert(tuple.getLong(\"myInt\") == 7);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      //Test after reload SOLR-9059//\n      Replica leader = getShardLeader(\"collection1\", \"shard1\", 30 /* timeout secs */);\n\n      // reload collection and wait to see the core report it has been reloaded\n      boolean wasReloaded = reloadCollection(leader, \"collection1\");\n      assertTrue(wasReloaded);\n\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select id as myId, field_i as myInt, str_s as myString from collection1 where text='XXXX' AND id='(1 2 3)' order by field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"myId\") == 3);\n      assert(tuple.getLong(\"myInt\") == 20);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"myId\") == 2);\n      assert(tuple.getLong(\"myInt\") == 8);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"myId\") == 1);\n      assert(tuple.getLong(\"myInt\") == 7);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n    } finally {\n      delete();\n    }\n  }\n\n","sourceOld":"  private void testBasicSelect() throws Exception {\n    try {\n\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexDoc(sdoc(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"7\"));\n      indexDoc(sdoc(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"8\"));\n      indexDoc(sdoc(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\"));\n      indexDoc(sdoc(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"11\"));\n      indexDoc(sdoc(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\"));\n      indexDoc(sdoc(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"40\"));\n      indexDoc(sdoc(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\"));\n      indexDoc(sdoc(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\"));\n      commit();\n      Map params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select 'id', field_i, str_s from collection1 where 'text'='XXXX' order by field_i desc\");\n\n      SolrStream solrStream = new SolrStream(jetty.url, params);\n      List<Tuple> tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 8);\n\n      Tuple tuple = null;\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 8);\n      assert(tuple.getLong(\"field_i\") == 60);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"id\") == 7);\n      assert(tuple.getLong(\"field_i\") == 50);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"id\") == 6);\n      assert(tuple.getLong(\"field_i\") == 40);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(3);\n      assert(tuple.getLong(\"id\") == 5);\n      assert(tuple.getLong(\"field_i\") == 30);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(4);\n      assert(tuple.getLong(\"id\") == 3);\n      assert(tuple.getLong(\"field_i\") == 20);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      tuple = tuples.get(5);\n      assert(tuple.getLong(\"id\") == 4);\n      assert(tuple.getLong(\"field_i\") == 11);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(6);\n      assert(tuple.getLong(\"id\") == 2);\n      assert(tuple.getLong(\"field_i\") == 8);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(7);\n      assert(tuple.getLong(\"id\") == 1);\n      assert(tuple.getLong(\"field_i\") == 7);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n\n      //Test unlimited unsorted result. Should sort on _version_ desc\n      params.put(\"stmt\", \"select 'id', field_i, str_s from collection1 where 'text'='XXXX'\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 8);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 8);\n      assert(tuple.getLong(\"field_i\") == 60);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"id\") == 7);\n      assert(tuple.getLong(\"field_i\") == 50);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"id\") == 6);\n      assert(tuple.getLong(\"field_i\") == 40);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(3);\n      assert(tuple.getLong(\"id\") == 5);\n      assert(tuple.getLong(\"field_i\") == 30);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(4);\n      assert(tuple.getLong(\"id\") == 4);\n      assert(tuple.getLong(\"field_i\") == 11);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(5);\n      assert(tuple.getLong(\"id\") == 3);\n      assert(tuple.getLong(\"field_i\") == 20);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      tuple = tuples.get(6);\n      assert(tuple.getLong(\"id\") == 2);\n      assert(tuple.getLong(\"field_i\") == 8);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(7);\n      assert(tuple.getLong(\"id\") == 1);\n      assert(tuple.getLong(\"field_i\") == 7);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select id, field_i, str_s from collection1 where text='XXXX' order by field_i desc limit 1\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 1);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 8);\n      assert(tuple.getLong(\"field_i\") == 60);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select id, field_i, str_s from collection1 where text='XXXX' AND id='(1 2 3)' order by field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 3);\n      assert(tuple.getLong(\"field_i\") == 20);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"id\") == 2);\n      assert(tuple.getLong(\"field_i\") == 8);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"id\") == 1);\n      assert(tuple.getLong(\"field_i\") == 7);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select id as myId, field_i as myInt, str_s as myString from collection1 where text='XXXX' AND id='(1 2 3)' order by myInt desc\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"myId\") == 3);\n      assert(tuple.getLong(\"myInt\") == 20);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"myId\") == 2);\n      assert(tuple.getLong(\"myInt\") == 8);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"myId\") == 1);\n      assert(tuple.getLong(\"myInt\") == 7);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select id as myId, field_i as myInt, str_s as myString from collection1 where text='XXXX' AND id='(1 2 3)' order by field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"myId\") == 3);\n      assert(tuple.getLong(\"myInt\") == 20);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"myId\") == 2);\n      assert(tuple.getLong(\"myInt\") == 8);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"myId\") == 1);\n      assert(tuple.getLong(\"myInt\") == 7);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      //Test after reload SOLR-9059//\n      Replica leader = getShardLeader(\"collection1\", \"shard1\", 30 /* timeout secs */);\n\n      // reload collection and wait to see the core report it has been reloaded\n      boolean wasReloaded = reloadCollection(leader, \"collection1\");\n      assertTrue(wasReloaded);\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select id as myId, field_i as myInt, str_s as myString from collection1 where text='XXXX' AND id='(1 2 3)' order by field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"myId\") == 3);\n      assert(tuple.getLong(\"myInt\") == 20);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"myId\") == 2);\n      assert(tuple.getLong(\"myInt\") == 8);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"myId\") == 1);\n      assert(tuple.getLong(\"myInt\") == 7);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n    } finally {\n      delete();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testBasicSelect().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testBasicSelect().mjava","sourceNew":"  private void testBasicSelect() throws Exception {\n    try {\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexDoc(sdoc(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"7\"));\n      indexDoc(sdoc(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"8\"));\n      indexDoc(sdoc(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\"));\n      indexDoc(sdoc(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"11\"));\n      indexDoc(sdoc(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\"));\n      indexDoc(sdoc(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"40\"));\n      indexDoc(sdoc(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\"));\n      indexDoc(sdoc(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\"));\n      commit();\n      \n      SolrParams sParams = mapParams(CommonParams.QT, \"/sql\", \n          \"stmt\", \"select id, field_i, str_s from collection1 where text='XXXX' order by field_i desc\");\n\n      SolrStream solrStream = new SolrStream(jetty.url, sParams);\n      List<Tuple> tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 8);\n\n      Tuple tuple = null;\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 8);\n      assert(tuple.getLong(\"field_i\") == 60);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"id\") == 7);\n      assert(tuple.getLong(\"field_i\") == 50);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"id\") == 6);\n      assert(tuple.getLong(\"field_i\") == 40);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(3);\n      assert(tuple.getLong(\"id\") == 5);\n      assert(tuple.getLong(\"field_i\") == 30);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(4);\n      assert(tuple.getLong(\"id\") == 3);\n      assert(tuple.getLong(\"field_i\") == 20);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      tuple = tuples.get(5);\n      assert(tuple.getLong(\"id\") == 4);\n      assert(tuple.getLong(\"field_i\") == 11);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(6);\n      assert(tuple.getLong(\"id\") == 2);\n      assert(tuple.getLong(\"field_i\") == 8);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(7);\n      assert(tuple.getLong(\"id\") == 1);\n      assert(tuple.getLong(\"field_i\") == 7);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      //Test unlimited unsorted result. Should sort on _version_ desc\n      sParams = mapParams(CommonParams.QT, \"/sql\", \"stmt\", \"select id, field_i, str_s from collection1 where text='XXXX'\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 8);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 8);\n      assert(tuple.getLong(\"field_i\") == 60);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"id\") == 7);\n      assert(tuple.getLong(\"field_i\") == 50);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"id\") == 6);\n      assert(tuple.getLong(\"field_i\") == 40);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(3);\n      assert(tuple.getLong(\"id\") == 5);\n      assert(tuple.getLong(\"field_i\") == 30);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(4);\n      assert(tuple.getLong(\"id\") == 4);\n      assert(tuple.getLong(\"field_i\") == 11);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(5);\n      assert(tuple.getLong(\"id\") == 3);\n      assert(tuple.getLong(\"field_i\") == 20);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      tuple = tuples.get(6);\n      assert(tuple.getLong(\"id\") == 2);\n      assert(tuple.getLong(\"field_i\") == 8);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(7);\n      assert(tuple.getLong(\"id\") == 1);\n      assert(tuple.getLong(\"field_i\") == 7);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \n          \"stmt\", \"select id, field_i, str_s from collection1 where text='XXXX' order by field_i desc limit 1\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 1);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 8);\n      assert(tuple.getLong(\"field_i\") == 60);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \"stmt\", \"select id, field_i, str_s from collection1 where text='XXXX' AND id='(1 2 3)' order by field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 3);\n      assert(tuple.getLong(\"field_i\") == 20);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"id\") == 2);\n      assert(tuple.getLong(\"field_i\") == 8);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"id\") == 1);\n      assert(tuple.getLong(\"field_i\") == 7);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \n          \"stmt\", \"select id as myId, field_i as myInt, str_s as myString from collection1 where text='XXXX' AND id='(1 2 3)' order by myInt desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"myId\") == 3);\n      assert(tuple.getLong(\"myInt\") == 20);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"myId\") == 2);\n      assert(tuple.getLong(\"myInt\") == 8);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"myId\") == 1);\n      assert(tuple.getLong(\"myInt\") == 7);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select id as myId, field_i as myInt, str_s as myString from collection1 where text='XXXX' AND id='(1 2 3)' order by field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"myId\") == 3);\n      assert(tuple.getLong(\"myInt\") == 20);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"myId\") == 2);\n      assert(tuple.getLong(\"myInt\") == 8);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"myId\") == 1);\n      assert(tuple.getLong(\"myInt\") == 7);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      //Test after reload SOLR-9059//\n      Replica leader = getShardLeader(\"collection1\", \"shard1\", 30 /* timeout secs */);\n\n      // reload collection and wait to see the core report it has been reloaded\n      boolean wasReloaded = reloadCollection(leader, \"collection1\");\n      assertTrue(wasReloaded);\n\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select id as myId, field_i as myInt, str_s as myString from collection1 where text='XXXX' AND id='(1 2 3)' order by field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"myId\") == 3);\n      assert(tuple.getLong(\"myInt\") == 20);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"myId\") == 2);\n      assert(tuple.getLong(\"myInt\") == 8);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"myId\") == 1);\n      assert(tuple.getLong(\"myInt\") == 7);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n    } finally {\n      delete();\n    }\n  }\n\n","sourceOld":"  private void testBasicSelect() throws Exception {\n    try {\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexDoc(sdoc(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"7\"));\n      indexDoc(sdoc(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"8\"));\n      indexDoc(sdoc(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\"));\n      indexDoc(sdoc(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"11\"));\n      indexDoc(sdoc(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\"));\n      indexDoc(sdoc(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"40\"));\n      indexDoc(sdoc(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\"));\n      indexDoc(sdoc(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\"));\n      commit();\n\n      Map params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select id, field_i, str_s from collection1 where text='XXXX' order by field_i desc\");\n\n      SolrStream solrStream = new SolrStream(jetty.url, params);\n      List<Tuple> tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 8);\n\n      Tuple tuple = null;\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 8);\n      assert(tuple.getLong(\"field_i\") == 60);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"id\") == 7);\n      assert(tuple.getLong(\"field_i\") == 50);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"id\") == 6);\n      assert(tuple.getLong(\"field_i\") == 40);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(3);\n      assert(tuple.getLong(\"id\") == 5);\n      assert(tuple.getLong(\"field_i\") == 30);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(4);\n      assert(tuple.getLong(\"id\") == 3);\n      assert(tuple.getLong(\"field_i\") == 20);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      tuple = tuples.get(5);\n      assert(tuple.getLong(\"id\") == 4);\n      assert(tuple.getLong(\"field_i\") == 11);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(6);\n      assert(tuple.getLong(\"id\") == 2);\n      assert(tuple.getLong(\"field_i\") == 8);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(7);\n      assert(tuple.getLong(\"id\") == 1);\n      assert(tuple.getLong(\"field_i\") == 7);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n\n      //Test unlimited unsorted result. Should sort on _version_ desc\n      params.put(\"stmt\", \"select id, field_i, str_s from collection1 where text='XXXX'\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 8);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 8);\n      assert(tuple.getLong(\"field_i\") == 60);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"id\") == 7);\n      assert(tuple.getLong(\"field_i\") == 50);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"id\") == 6);\n      assert(tuple.getLong(\"field_i\") == 40);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(3);\n      assert(tuple.getLong(\"id\") == 5);\n      assert(tuple.getLong(\"field_i\") == 30);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(4);\n      assert(tuple.getLong(\"id\") == 4);\n      assert(tuple.getLong(\"field_i\") == 11);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(5);\n      assert(tuple.getLong(\"id\") == 3);\n      assert(tuple.getLong(\"field_i\") == 20);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      tuple = tuples.get(6);\n      assert(tuple.getLong(\"id\") == 2);\n      assert(tuple.getLong(\"field_i\") == 8);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(7);\n      assert(tuple.getLong(\"id\") == 1);\n      assert(tuple.getLong(\"field_i\") == 7);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select id, field_i, str_s from collection1 where text='XXXX' order by field_i desc limit 1\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 1);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 8);\n      assert(tuple.getLong(\"field_i\") == 60);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select id, field_i, str_s from collection1 where text='XXXX' AND id='(1 2 3)' order by field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 3);\n      assert(tuple.getLong(\"field_i\") == 20);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"id\") == 2);\n      assert(tuple.getLong(\"field_i\") == 8);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"id\") == 1);\n      assert(tuple.getLong(\"field_i\") == 7);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select id as myId, field_i as myInt, str_s as myString from collection1 where text='XXXX' \" +\n          \"AND id='(1 2 3)' order by myInt desc\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"myId\") == 3);\n      assert(tuple.getLong(\"myInt\") == 20);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"myId\") == 2);\n      assert(tuple.getLong(\"myInt\") == 8);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"myId\") == 1);\n      assert(tuple.getLong(\"myInt\") == 7);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select id as myId, field_i as myInt, str_s as myString from collection1 where text='XXXX' \" +\n          \"AND id='(1 2 3)' order by field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"myId\") == 3);\n      assert(tuple.getLong(\"myInt\") == 20);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"myId\") == 2);\n      assert(tuple.getLong(\"myInt\") == 8);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"myId\") == 1);\n      assert(tuple.getLong(\"myInt\") == 7);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      //Test after reload SOLR-9059//\n      Replica leader = getShardLeader(\"collection1\", \"shard1\", 30 /* timeout secs */);\n\n      // reload collection and wait to see the core report it has been reloaded\n      boolean wasReloaded = reloadCollection(leader, \"collection1\");\n      assertTrue(wasReloaded);\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select id as myId, field_i as myInt, str_s as myString from collection1 where text='XXXX' AND id='(1 2 3)' order by field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"myId\") == 3);\n      assert(tuple.getLong(\"myInt\") == 20);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"myId\") == 2);\n      assert(tuple.getLong(\"myInt\") == 8);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"myId\") == 1);\n      assert(tuple.getLong(\"myInt\") == 7);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n    } finally {\n      delete();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"612da0a0a2d5f4409da55729b9833e799f905ac5","date":1479142562,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testBasicSelect().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testBasicSelect().mjava","sourceNew":"  private void testBasicSelect() throws Exception {\n    try {\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexDoc(sdoc(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"7\"));\n      indexDoc(sdoc(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"8\"));\n      indexDoc(sdoc(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\"));\n      indexDoc(sdoc(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"11\"));\n      indexDoc(sdoc(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\"));\n      indexDoc(sdoc(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"40\"));\n      indexDoc(sdoc(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\"));\n      indexDoc(sdoc(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\"));\n      commit();\n      \n      SolrParams sParams = mapParams(CommonParams.QT, \"/sql\", \n          \"stmt\", \"select id, field_i, str_s from collection1 where text='XXXX' order by field_i desc\");\n\n      SolrStream solrStream = new SolrStream(jetty.url, sParams);\n      List<Tuple> tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 8);\n\n      Tuple tuple;\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 8);\n      assert(tuple.getLong(\"field_i\") == 60);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"id\") == 7);\n      assert(tuple.getLong(\"field_i\") == 50);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"id\") == 6);\n      assert(tuple.getLong(\"field_i\") == 40);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(3);\n      assert(tuple.getLong(\"id\") == 5);\n      assert(tuple.getLong(\"field_i\") == 30);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(4);\n      assert(tuple.getLong(\"id\") == 3);\n      assert(tuple.getLong(\"field_i\") == 20);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      tuple = tuples.get(5);\n      assert(tuple.getLong(\"id\") == 4);\n      assert(tuple.getLong(\"field_i\") == 11);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(6);\n      assert(tuple.getLong(\"id\") == 2);\n      assert(tuple.getLong(\"field_i\") == 8);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(7);\n      assert(tuple.getLong(\"id\") == 1);\n      assert(tuple.getLong(\"field_i\") == 7);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      //Test unlimited unsorted result. Should sort on _version_ desc\n      sParams = mapParams(CommonParams.QT, \"/sql\", \"stmt\", \"select id, field_i, str_s from collection1 where text='XXXX'\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 8);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 8);\n      assert(tuple.getLong(\"field_i\") == 60);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"id\") == 7);\n      assert(tuple.getLong(\"field_i\") == 50);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"id\") == 6);\n      assert(tuple.getLong(\"field_i\") == 40);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(3);\n      assert(tuple.getLong(\"id\") == 5);\n      assert(tuple.getLong(\"field_i\") == 30);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(4);\n      assert(tuple.getLong(\"id\") == 4);\n      assert(tuple.getLong(\"field_i\") == 11);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(5);\n      assert(tuple.getLong(\"id\") == 3);\n      assert(tuple.getLong(\"field_i\") == 20);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      tuple = tuples.get(6);\n      assert(tuple.getLong(\"id\") == 2);\n      assert(tuple.getLong(\"field_i\") == 8);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(7);\n      assert(tuple.getLong(\"id\") == 1);\n      assert(tuple.getLong(\"field_i\") == 7);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \n          \"stmt\", \"select id, field_i, str_s from collection1 where text='XXXX' order by field_i desc limit 1\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 1);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 8);\n      assert(tuple.getLong(\"field_i\") == 60);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \"stmt\", \"select id, field_i, str_s from collection1 where text='XXXX' AND id='(1 2 3)' order by field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 3);\n      assert(tuple.getLong(\"field_i\") == 20);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"id\") == 2);\n      assert(tuple.getLong(\"field_i\") == 8);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"id\") == 1);\n      assert(tuple.getLong(\"field_i\") == 7);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \n          \"stmt\", \"select id as myId, field_i as myInt, str_s as myString from collection1 where text='XXXX' AND id='(1 2 3)' order by myInt desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"myId\") == 3);\n      assert(tuple.getLong(\"myInt\") == 20);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"myId\") == 2);\n      assert(tuple.getLong(\"myInt\") == 8);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"myId\") == 1);\n      assert(tuple.getLong(\"myInt\") == 7);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select id as myId, field_i as myInt, str_s as myString from collection1 where text='XXXX' AND id='(1 2 3)' order by field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"myId\") == 3);\n      assert(tuple.getLong(\"myInt\") == 20);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"myId\") == 2);\n      assert(tuple.getLong(\"myInt\") == 8);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"myId\") == 1);\n      assert(tuple.getLong(\"myInt\") == 7);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      //Test after reload SOLR-9059//\n      Replica leader = getShardLeader(\"collection1\", \"shard1\", 30 /* timeout secs */);\n\n      // reload collection and wait to see the core report it has been reloaded\n      boolean wasReloaded = reloadCollection(leader, \"collection1\");\n      assertTrue(wasReloaded);\n\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select id as myId, field_i as myInt, str_s as myString from collection1 where text='XXXX' AND id='(1 2 3)' order by field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"myId\") == 3);\n      assert(tuple.getLong(\"myInt\") == 20);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"myId\") == 2);\n      assert(tuple.getLong(\"myInt\") == 8);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"myId\") == 1);\n      assert(tuple.getLong(\"myInt\") == 7);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n    } finally {\n      delete();\n    }\n  }\n\n","sourceOld":"  private void testBasicSelect() throws Exception {\n    try {\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexDoc(sdoc(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"7\"));\n      indexDoc(sdoc(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"8\"));\n      indexDoc(sdoc(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\"));\n      indexDoc(sdoc(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"11\"));\n      indexDoc(sdoc(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\"));\n      indexDoc(sdoc(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"40\"));\n      indexDoc(sdoc(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\"));\n      indexDoc(sdoc(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\"));\n      commit();\n      \n      SolrParams sParams = mapParams(CommonParams.QT, \"/sql\", \n          \"stmt\", \"select id, field_i, str_s from collection1 where text='XXXX' order by field_i desc\");\n\n      SolrStream solrStream = new SolrStream(jetty.url, sParams);\n      List<Tuple> tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 8);\n\n      Tuple tuple = null;\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 8);\n      assert(tuple.getLong(\"field_i\") == 60);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"id\") == 7);\n      assert(tuple.getLong(\"field_i\") == 50);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"id\") == 6);\n      assert(tuple.getLong(\"field_i\") == 40);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(3);\n      assert(tuple.getLong(\"id\") == 5);\n      assert(tuple.getLong(\"field_i\") == 30);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(4);\n      assert(tuple.getLong(\"id\") == 3);\n      assert(tuple.getLong(\"field_i\") == 20);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      tuple = tuples.get(5);\n      assert(tuple.getLong(\"id\") == 4);\n      assert(tuple.getLong(\"field_i\") == 11);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(6);\n      assert(tuple.getLong(\"id\") == 2);\n      assert(tuple.getLong(\"field_i\") == 8);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(7);\n      assert(tuple.getLong(\"id\") == 1);\n      assert(tuple.getLong(\"field_i\") == 7);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      //Test unlimited unsorted result. Should sort on _version_ desc\n      sParams = mapParams(CommonParams.QT, \"/sql\", \"stmt\", \"select id, field_i, str_s from collection1 where text='XXXX'\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 8);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 8);\n      assert(tuple.getLong(\"field_i\") == 60);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"id\") == 7);\n      assert(tuple.getLong(\"field_i\") == 50);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"id\") == 6);\n      assert(tuple.getLong(\"field_i\") == 40);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(3);\n      assert(tuple.getLong(\"id\") == 5);\n      assert(tuple.getLong(\"field_i\") == 30);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(4);\n      assert(tuple.getLong(\"id\") == 4);\n      assert(tuple.getLong(\"field_i\") == 11);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(5);\n      assert(tuple.getLong(\"id\") == 3);\n      assert(tuple.getLong(\"field_i\") == 20);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      tuple = tuples.get(6);\n      assert(tuple.getLong(\"id\") == 2);\n      assert(tuple.getLong(\"field_i\") == 8);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(7);\n      assert(tuple.getLong(\"id\") == 1);\n      assert(tuple.getLong(\"field_i\") == 7);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \n          \"stmt\", \"select id, field_i, str_s from collection1 where text='XXXX' order by field_i desc limit 1\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 1);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 8);\n      assert(tuple.getLong(\"field_i\") == 60);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \"stmt\", \"select id, field_i, str_s from collection1 where text='XXXX' AND id='(1 2 3)' order by field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 3);\n      assert(tuple.getLong(\"field_i\") == 20);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"id\") == 2);\n      assert(tuple.getLong(\"field_i\") == 8);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"id\") == 1);\n      assert(tuple.getLong(\"field_i\") == 7);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \n          \"stmt\", \"select id as myId, field_i as myInt, str_s as myString from collection1 where text='XXXX' AND id='(1 2 3)' order by myInt desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"myId\") == 3);\n      assert(tuple.getLong(\"myInt\") == 20);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"myId\") == 2);\n      assert(tuple.getLong(\"myInt\") == 8);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"myId\") == 1);\n      assert(tuple.getLong(\"myInt\") == 7);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select id as myId, field_i as myInt, str_s as myString from collection1 where text='XXXX' AND id='(1 2 3)' order by field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"myId\") == 3);\n      assert(tuple.getLong(\"myInt\") == 20);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"myId\") == 2);\n      assert(tuple.getLong(\"myInt\") == 8);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"myId\") == 1);\n      assert(tuple.getLong(\"myInt\") == 7);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      //Test after reload SOLR-9059//\n      Replica leader = getShardLeader(\"collection1\", \"shard1\", 30 /* timeout secs */);\n\n      // reload collection and wait to see the core report it has been reloaded\n      boolean wasReloaded = reloadCollection(leader, \"collection1\");\n      assertTrue(wasReloaded);\n\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select id as myId, field_i as myInt, str_s as myString from collection1 where text='XXXX' AND id='(1 2 3)' order by field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"myId\") == 3);\n      assert(tuple.getLong(\"myInt\") == 20);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"myId\") == 2);\n      assert(tuple.getLong(\"myInt\") == 8);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"myId\") == 1);\n      assert(tuple.getLong(\"myInt\") == 7);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n    } finally {\n      delete();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"36b1ce25b5b465615c00f409ce694664abbe7bd2","date":1481836328,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testBasicSelect().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testBasicSelect().mjava","sourceNew":"  private void testBasicSelect() throws Exception {\n    try {\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexDoc(sdoc(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"7\"));\n      indexDoc(sdoc(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"8\"));\n      indexDoc(sdoc(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\"));\n      indexDoc(sdoc(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"11\"));\n      indexDoc(sdoc(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\"));\n      indexDoc(sdoc(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"40\"));\n      indexDoc(sdoc(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\"));\n      indexDoc(sdoc(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\"));\n      commit();\n\n\n      System.out.println(\"############# testBasicSelect() ############\");\n\n      SolrParams sParams = mapParams(CommonParams.QT, \"/sql\", \n          \"stmt\", \"select id, field_i, str_s from collection1 where (text='(XXXX)' OR text='XXXX') AND text='XXXX' order by field_i desc\");\n\n      SolrStream solrStream = new SolrStream(jetty.url, sParams);\n      List<Tuple> tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 8);\n\n      Tuple tuple;\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 8);\n      assert(tuple.getLong(\"field_i\") == 60);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"id\") == 7);\n      assert(tuple.getLong(\"field_i\") == 50);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"id\") == 6);\n      assert(tuple.getLong(\"field_i\") == 40);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(3);\n      assert(tuple.getLong(\"id\") == 5);\n      assert(tuple.getLong(\"field_i\") == 30);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(4);\n      assert(tuple.getLong(\"id\") == 3);\n      assert(tuple.getLong(\"field_i\") == 20);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      tuple = tuples.get(5);\n      assert(tuple.getLong(\"id\") == 4);\n      assert(tuple.getLong(\"field_i\") == 11);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(6);\n      assert(tuple.getLong(\"id\") == 2);\n      assert(tuple.getLong(\"field_i\") == 8);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(7);\n      assert(tuple.getLong(\"id\") == 1);\n      assert(tuple.getLong(\"field_i\") == 7);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      //Test unlimited unsorted result. Should sort on _version_ desc\n      sParams = mapParams(CommonParams.QT, \"/sql\", \"stmt\", \"select id, field_i, str_s from collection1 where text='XXXX'\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 8);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 8);\n      assert(tuple.getLong(\"field_i\") == 60);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"id\") == 7);\n      assert(tuple.getLong(\"field_i\") == 50);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"id\") == 6);\n      assert(tuple.getLong(\"field_i\") == 40);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(3);\n      assert(tuple.getLong(\"id\") == 5);\n      assert(tuple.getLong(\"field_i\") == 30);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(4);\n      assert(tuple.getLong(\"id\") == 4);\n      assert(tuple.getLong(\"field_i\") == 11);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(5);\n      assert(tuple.getLong(\"id\") == 3);\n      assert(tuple.getLong(\"field_i\") == 20);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      tuple = tuples.get(6);\n      assert(tuple.getLong(\"id\") == 2);\n      assert(tuple.getLong(\"field_i\") == 8);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(7);\n      assert(tuple.getLong(\"id\") == 1);\n      assert(tuple.getLong(\"field_i\") == 7);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \n          \"stmt\", \"select id, field_i, str_s from collection1 where text='XXXX' order by field_i desc limit 1\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 1);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 8);\n      assert(tuple.getLong(\"field_i\") == 60);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \"stmt\", \"select id, field_i, str_s from collection1 where text='XXXX' AND id='(1 2 3)' order by field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 3);\n      assert(tuple.getLong(\"field_i\") == 20);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"id\") == 2);\n      assert(tuple.getLong(\"field_i\") == 8);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"id\") == 1);\n      assert(tuple.getLong(\"field_i\") == 7);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \n          \"stmt\", \"select id as myId, field_i as myInt, str_s as myString from collection1 where text='XXXX' AND id='(1 2 3)' order by myInt desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"myId\") == 3);\n      assert(tuple.getLong(\"myInt\") == 20);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"myId\") == 2);\n      assert(tuple.getLong(\"myInt\") == 8);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"myId\") == 1);\n      assert(tuple.getLong(\"myInt\") == 7);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select id as myId, field_i as myInt, str_s as myString from collection1 where text='XXXX' AND id='(1 2 3)' order by field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"myId\") == 3);\n      assert(tuple.getLong(\"myInt\") == 20);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"myId\") == 2);\n      assert(tuple.getLong(\"myInt\") == 8);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"myId\") == 1);\n      assert(tuple.getLong(\"myInt\") == 7);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      //Test after reload SOLR-9059//\n      Replica leader = getShardLeader(\"collection1\", \"shard1\", 30 /* timeout secs */);\n\n      // reload collection and wait to see the core report it has been reloaded\n      boolean wasReloaded = reloadCollection(leader, \"collection1\");\n      assertTrue(wasReloaded);\n\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select id as myId, field_i as myInt, str_s as myString from collection1 where text='XXXX' AND id='(1 2 3)' order by field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"myId\") == 3);\n      assert(tuple.getLong(\"myInt\") == 20);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"myId\") == 2);\n      assert(tuple.getLong(\"myInt\") == 8);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"myId\") == 1);\n      assert(tuple.getLong(\"myInt\") == 7);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n    } finally {\n      delete();\n    }\n  }\n\n","sourceOld":"  private void testBasicSelect() throws Exception {\n    try {\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexDoc(sdoc(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"7\"));\n      indexDoc(sdoc(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"8\"));\n      indexDoc(sdoc(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\"));\n      indexDoc(sdoc(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"11\"));\n      indexDoc(sdoc(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\"));\n      indexDoc(sdoc(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"40\"));\n      indexDoc(sdoc(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\"));\n      indexDoc(sdoc(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\"));\n      commit();\n      \n      SolrParams sParams = mapParams(CommonParams.QT, \"/sql\", \n          \"stmt\", \"select id, field_i, str_s from collection1 where text='XXXX' order by field_i desc\");\n\n      SolrStream solrStream = new SolrStream(jetty.url, sParams);\n      List<Tuple> tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 8);\n\n      Tuple tuple;\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 8);\n      assert(tuple.getLong(\"field_i\") == 60);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"id\") == 7);\n      assert(tuple.getLong(\"field_i\") == 50);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"id\") == 6);\n      assert(tuple.getLong(\"field_i\") == 40);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(3);\n      assert(tuple.getLong(\"id\") == 5);\n      assert(tuple.getLong(\"field_i\") == 30);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(4);\n      assert(tuple.getLong(\"id\") == 3);\n      assert(tuple.getLong(\"field_i\") == 20);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      tuple = tuples.get(5);\n      assert(tuple.getLong(\"id\") == 4);\n      assert(tuple.getLong(\"field_i\") == 11);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(6);\n      assert(tuple.getLong(\"id\") == 2);\n      assert(tuple.getLong(\"field_i\") == 8);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(7);\n      assert(tuple.getLong(\"id\") == 1);\n      assert(tuple.getLong(\"field_i\") == 7);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      //Test unlimited unsorted result. Should sort on _version_ desc\n      sParams = mapParams(CommonParams.QT, \"/sql\", \"stmt\", \"select id, field_i, str_s from collection1 where text='XXXX'\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 8);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 8);\n      assert(tuple.getLong(\"field_i\") == 60);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"id\") == 7);\n      assert(tuple.getLong(\"field_i\") == 50);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"id\") == 6);\n      assert(tuple.getLong(\"field_i\") == 40);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(3);\n      assert(tuple.getLong(\"id\") == 5);\n      assert(tuple.getLong(\"field_i\") == 30);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(4);\n      assert(tuple.getLong(\"id\") == 4);\n      assert(tuple.getLong(\"field_i\") == 11);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(5);\n      assert(tuple.getLong(\"id\") == 3);\n      assert(tuple.getLong(\"field_i\") == 20);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      tuple = tuples.get(6);\n      assert(tuple.getLong(\"id\") == 2);\n      assert(tuple.getLong(\"field_i\") == 8);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(7);\n      assert(tuple.getLong(\"id\") == 1);\n      assert(tuple.getLong(\"field_i\") == 7);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \n          \"stmt\", \"select id, field_i, str_s from collection1 where text='XXXX' order by field_i desc limit 1\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 1);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 8);\n      assert(tuple.getLong(\"field_i\") == 60);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \"stmt\", \"select id, field_i, str_s from collection1 where text='XXXX' AND id='(1 2 3)' order by field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 3);\n      assert(tuple.getLong(\"field_i\") == 20);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"id\") == 2);\n      assert(tuple.getLong(\"field_i\") == 8);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"id\") == 1);\n      assert(tuple.getLong(\"field_i\") == 7);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \n          \"stmt\", \"select id as myId, field_i as myInt, str_s as myString from collection1 where text='XXXX' AND id='(1 2 3)' order by myInt desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"myId\") == 3);\n      assert(tuple.getLong(\"myInt\") == 20);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"myId\") == 2);\n      assert(tuple.getLong(\"myInt\") == 8);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"myId\") == 1);\n      assert(tuple.getLong(\"myInt\") == 7);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select id as myId, field_i as myInt, str_s as myString from collection1 where text='XXXX' AND id='(1 2 3)' order by field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"myId\") == 3);\n      assert(tuple.getLong(\"myInt\") == 20);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"myId\") == 2);\n      assert(tuple.getLong(\"myInt\") == 8);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"myId\") == 1);\n      assert(tuple.getLong(\"myInt\") == 7);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      //Test after reload SOLR-9059//\n      Replica leader = getShardLeader(\"collection1\", \"shard1\", 30 /* timeout secs */);\n\n      // reload collection and wait to see the core report it has been reloaded\n      boolean wasReloaded = reloadCollection(leader, \"collection1\");\n      assertTrue(wasReloaded);\n\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select id as myId, field_i as myInt, str_s as myString from collection1 where text='XXXX' AND id='(1 2 3)' order by field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"myId\") == 3);\n      assert(tuple.getLong(\"myInt\") == 20);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"myId\") == 2);\n      assert(tuple.getLong(\"myInt\") == 8);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"myId\") == 1);\n      assert(tuple.getLong(\"myInt\") == 7);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n    } finally {\n      delete();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f20deebda1cf327549c84cb60464135abd31c71","date":1487004368,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testBasicSelect().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testBasicSelect().mjava","sourceNew":"  private void testBasicSelect() throws Exception {\n    try {\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexDoc(sdoc(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"7\"));\n      indexDoc(sdoc(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"8\"));\n      indexDoc(sdoc(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\"));\n      indexDoc(sdoc(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"11\"));\n      indexDoc(sdoc(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\"));\n      indexDoc(sdoc(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"40\"));\n      indexDoc(sdoc(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\"));\n      indexDoc(sdoc(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\"));\n      commit();\n\n\n      System.out.println(\"############# testBasicSelect() ############\");\n\n      SolrParams sParams = mapParams(CommonParams.QT, \"/sql\", \n          \"stmt\", \"select id, field_i, str_s from collection1 where (text='(XXXX)' OR text='XXXX') AND text='XXXX' order by field_i desc\");\n\n      SolrStream solrStream = new SolrStream(jetty.url, sParams);\n      List<Tuple> tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 8);\n      Tuple tuple;\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 8);\n      assert(tuple.getLong(\"field_i\") == 60);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"id\") == 7);\n      assert(tuple.getLong(\"field_i\") == 50);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"id\") == 6);\n      assert(tuple.getLong(\"field_i\") == 40);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(3);\n      assert(tuple.getLong(\"id\") == 5);\n      assert(tuple.getLong(\"field_i\") == 30);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(4);\n      assert(tuple.getLong(\"id\") == 3);\n      assert(tuple.getLong(\"field_i\") == 20);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      tuple = tuples.get(5);\n      assert(tuple.getLong(\"id\") == 4);\n      assert(tuple.getLong(\"field_i\") == 11);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(6);\n      assert(tuple.getLong(\"id\") == 2);\n      assert(tuple.getLong(\"field_i\") == 8);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(7);\n      assert(tuple.getLong(\"id\") == 1);\n      assert(tuple.getLong(\"field_i\") == 7);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      //Test unlimited unsorted result. Should sort on _version_ desc\n      sParams = mapParams(CommonParams.QT, \"/sql\", \"stmt\", \"select id, field_i, str_s from collection1 where text='XXXX'\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 8);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 8);\n      assert(tuple.getLong(\"field_i\") == 60);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"id\") == 7);\n      assert(tuple.getLong(\"field_i\") == 50);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"id\") == 6);\n      assert(tuple.getLong(\"field_i\") == 40);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(3);\n      assert(tuple.getLong(\"id\") == 5);\n      assert(tuple.getLong(\"field_i\") == 30);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(4);\n      assert(tuple.getLong(\"id\") == 4);\n      assert(tuple.getLong(\"field_i\") == 11);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(5);\n      assert(tuple.getLong(\"id\") == 3);\n      assert(tuple.getLong(\"field_i\") == 20);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      tuple = tuples.get(6);\n      assert(tuple.getLong(\"id\") == 2);\n      assert(tuple.getLong(\"field_i\") == 8);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(7);\n      assert(tuple.getLong(\"id\") == 1);\n      assert(tuple.getLong(\"field_i\") == 7);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \n          \"stmt\", \"select id, field_i, str_s from collection1 where text='XXXX' order by field_i desc limit 1\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 1);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 8);\n      assert(tuple.getLong(\"field_i\") == 60);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \"stmt\", \"select id, field_i, str_s from collection1 where text='XXXX' AND id='(1 2 3)' order by field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 3);\n      assert(tuple.getLong(\"field_i\") == 20);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"id\") == 2);\n      assert(tuple.getLong(\"field_i\") == 8);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"id\") == 1);\n      assert(tuple.getLong(\"field_i\") == 7);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \n          \"stmt\", \"select id as myId, field_i as myInt, str_s as myString from collection1 where text='XXXX' AND id='(1 2 3)' order by myInt desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"myId\") == 3);\n      assert(tuple.getLong(\"myInt\") == 20);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"myId\") == 2);\n      assert(tuple.getLong(\"myInt\") == 8);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"myId\") == 1);\n      assert(tuple.getLong(\"myInt\") == 7);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select id as myId, field_i as myInt, str_s as myString from collection1 where text='XXXX' AND id='(1 2 3)' order by field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"myId\") == 3);\n      assert(tuple.getLong(\"myInt\") == 20);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"myId\") == 2);\n      assert(tuple.getLong(\"myInt\") == 8);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"myId\") == 1);\n      assert(tuple.getLong(\"myInt\") == 7);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      //Test after reload SOLR-9059//\n      Replica leader = getShardLeader(\"collection1\", \"shard1\", 30 /* timeout secs */);\n\n      // reload collection and wait to see the core report it has been reloaded\n      boolean wasReloaded = reloadCollection(leader, \"collection1\");\n      assertTrue(wasReloaded);\n\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select id as myId, field_i as myInt, str_s as myString from collection1 where text='XXXX' AND id='(1 2 3)' order by field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"myId\") == 3);\n      assert(tuple.getLong(\"myInt\") == 20);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"myId\") == 2);\n      assert(tuple.getLong(\"myInt\") == 8);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"myId\") == 1);\n      assert(tuple.getLong(\"myInt\") == 7);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n    } finally {\n      delete();\n    }\n  }\n\n","sourceOld":"  private void testBasicSelect() throws Exception {\n    try {\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexDoc(sdoc(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"7\"));\n      indexDoc(sdoc(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"8\"));\n      indexDoc(sdoc(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\"));\n      indexDoc(sdoc(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"11\"));\n      indexDoc(sdoc(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\"));\n      indexDoc(sdoc(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"40\"));\n      indexDoc(sdoc(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\"));\n      indexDoc(sdoc(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\"));\n      commit();\n\n\n      System.out.println(\"############# testBasicSelect() ############\");\n\n      SolrParams sParams = mapParams(CommonParams.QT, \"/sql\", \n          \"stmt\", \"select id, field_i, str_s from collection1 where (text='(XXXX)' OR text='XXXX') AND text='XXXX' order by field_i desc\");\n\n      SolrStream solrStream = new SolrStream(jetty.url, sParams);\n      List<Tuple> tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 8);\n\n      Tuple tuple;\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 8);\n      assert(tuple.getLong(\"field_i\") == 60);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"id\") == 7);\n      assert(tuple.getLong(\"field_i\") == 50);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"id\") == 6);\n      assert(tuple.getLong(\"field_i\") == 40);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(3);\n      assert(tuple.getLong(\"id\") == 5);\n      assert(tuple.getLong(\"field_i\") == 30);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(4);\n      assert(tuple.getLong(\"id\") == 3);\n      assert(tuple.getLong(\"field_i\") == 20);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      tuple = tuples.get(5);\n      assert(tuple.getLong(\"id\") == 4);\n      assert(tuple.getLong(\"field_i\") == 11);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(6);\n      assert(tuple.getLong(\"id\") == 2);\n      assert(tuple.getLong(\"field_i\") == 8);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(7);\n      assert(tuple.getLong(\"id\") == 1);\n      assert(tuple.getLong(\"field_i\") == 7);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      //Test unlimited unsorted result. Should sort on _version_ desc\n      sParams = mapParams(CommonParams.QT, \"/sql\", \"stmt\", \"select id, field_i, str_s from collection1 where text='XXXX'\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 8);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 8);\n      assert(tuple.getLong(\"field_i\") == 60);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"id\") == 7);\n      assert(tuple.getLong(\"field_i\") == 50);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"id\") == 6);\n      assert(tuple.getLong(\"field_i\") == 40);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(3);\n      assert(tuple.getLong(\"id\") == 5);\n      assert(tuple.getLong(\"field_i\") == 30);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(4);\n      assert(tuple.getLong(\"id\") == 4);\n      assert(tuple.getLong(\"field_i\") == 11);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(5);\n      assert(tuple.getLong(\"id\") == 3);\n      assert(tuple.getLong(\"field_i\") == 20);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      tuple = tuples.get(6);\n      assert(tuple.getLong(\"id\") == 2);\n      assert(tuple.getLong(\"field_i\") == 8);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(7);\n      assert(tuple.getLong(\"id\") == 1);\n      assert(tuple.getLong(\"field_i\") == 7);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \n          \"stmt\", \"select id, field_i, str_s from collection1 where text='XXXX' order by field_i desc limit 1\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 1);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 8);\n      assert(tuple.getLong(\"field_i\") == 60);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \"stmt\", \"select id, field_i, str_s from collection1 where text='XXXX' AND id='(1 2 3)' order by field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 3);\n      assert(tuple.getLong(\"field_i\") == 20);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"id\") == 2);\n      assert(tuple.getLong(\"field_i\") == 8);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"id\") == 1);\n      assert(tuple.getLong(\"field_i\") == 7);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \n          \"stmt\", \"select id as myId, field_i as myInt, str_s as myString from collection1 where text='XXXX' AND id='(1 2 3)' order by myInt desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"myId\") == 3);\n      assert(tuple.getLong(\"myInt\") == 20);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"myId\") == 2);\n      assert(tuple.getLong(\"myInt\") == 8);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"myId\") == 1);\n      assert(tuple.getLong(\"myInt\") == 7);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select id as myId, field_i as myInt, str_s as myString from collection1 where text='XXXX' AND id='(1 2 3)' order by field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"myId\") == 3);\n      assert(tuple.getLong(\"myInt\") == 20);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"myId\") == 2);\n      assert(tuple.getLong(\"myInt\") == 8);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"myId\") == 1);\n      assert(tuple.getLong(\"myInt\") == 7);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      //Test after reload SOLR-9059//\n      Replica leader = getShardLeader(\"collection1\", \"shard1\", 30 /* timeout secs */);\n\n      // reload collection and wait to see the core report it has been reloaded\n      boolean wasReloaded = reloadCollection(leader, \"collection1\");\n      assertTrue(wasReloaded);\n\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select id as myId, field_i as myInt, str_s as myString from collection1 where text='XXXX' AND id='(1 2 3)' order by field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"myId\") == 3);\n      assert(tuple.getLong(\"myInt\") == 20);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"myId\") == 2);\n      assert(tuple.getLong(\"myInt\") == 8);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"myId\") == 1);\n      assert(tuple.getLong(\"myInt\") == 7);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n    } finally {\n      delete();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"116fdd6b9e04e18a6547a5650bc0afd3fda020aa","date":1487184909,"type":3,"author":"Joel Bernstein","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testBasicSelect().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testBasicSelect().mjava","sourceNew":"  private void testBasicSelect() throws Exception {\n    try {\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexDoc(sdoc(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"7\"));\n      indexDoc(sdoc(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"8\"));\n      indexDoc(sdoc(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\"));\n      indexDoc(sdoc(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"11\"));\n      indexDoc(sdoc(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\"));\n      indexDoc(sdoc(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"40\"));\n      indexDoc(sdoc(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\"));\n      indexDoc(sdoc(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\"));\n      commit();\n\n\n      System.out.println(\"############# testBasicSelect() ############\");\n\n      SolrParams sParams = mapParams(CommonParams.QT, \"/sql\", \n          \"stmt\", \"select id, field_i, str_s from collection1 where (text='(XXXX)' OR text='XXXX') AND text='XXXX' order by field_i desc\");\n\n      SolrStream solrStream = new SolrStream(jetty.url, sParams);\n      List<Tuple> tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 8);\n      Tuple tuple;\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 8);\n      assert(tuple.getLong(\"field_i\") == 60);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"id\") == 7);\n      assert(tuple.getLong(\"field_i\") == 50);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"id\") == 6);\n      assert(tuple.getLong(\"field_i\") == 40);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(3);\n      assert(tuple.getLong(\"id\") == 5);\n      assert(tuple.getLong(\"field_i\") == 30);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(4);\n      assert(tuple.getLong(\"id\") == 3);\n      assert(tuple.getLong(\"field_i\") == 20);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      tuple = tuples.get(5);\n      assert(tuple.getLong(\"id\") == 4);\n      assert(tuple.getLong(\"field_i\") == 11);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(6);\n      assert(tuple.getLong(\"id\") == 2);\n      assert(tuple.getLong(\"field_i\") == 8);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(7);\n      assert(tuple.getLong(\"id\") == 1);\n      assert(tuple.getLong(\"field_i\") == 7);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      //Test unlimited unsorted result. Should sort on _version_ desc\n      sParams = mapParams(CommonParams.QT, \"/sql\", \"stmt\", \"select id, field_i, str_s from collection1 where text='XXXX'\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 8);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 8);\n      assert(tuple.getLong(\"field_i\") == 60);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"id\") == 7);\n      assert(tuple.getLong(\"field_i\") == 50);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"id\") == 6);\n      assert(tuple.getLong(\"field_i\") == 40);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(3);\n      assert(tuple.getLong(\"id\") == 5);\n      assert(tuple.getLong(\"field_i\") == 30);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(4);\n      assert(tuple.getLong(\"id\") == 4);\n      assert(tuple.getLong(\"field_i\") == 11);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(5);\n      assert(tuple.getLong(\"id\") == 3);\n      assert(tuple.getLong(\"field_i\") == 20);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      tuple = tuples.get(6);\n      assert(tuple.getLong(\"id\") == 2);\n      assert(tuple.getLong(\"field_i\") == 8);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(7);\n      assert(tuple.getLong(\"id\") == 1);\n      assert(tuple.getLong(\"field_i\") == 7);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \n          \"stmt\", \"select id, field_i, str_s from collection1 where text='XXXX' order by field_i desc limit 1\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 1);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 8);\n      assert(tuple.getLong(\"field_i\") == 60);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \"stmt\", \"select id, field_i, str_s from collection1 where text='XXXX' AND id='(1 2 3)' order by field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 3);\n      assert(tuple.getLong(\"field_i\") == 20);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"id\") == 2);\n      assert(tuple.getLong(\"field_i\") == 8);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"id\") == 1);\n      assert(tuple.getLong(\"field_i\") == 7);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \n          \"stmt\", \"select id as myId, field_i as myInt, str_s as myString from collection1 where text='XXXX' AND id='(1 2 3)' order by myInt desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"myId\") == 3);\n      assert(tuple.getLong(\"myInt\") == 20);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"myId\") == 2);\n      assert(tuple.getLong(\"myInt\") == 8);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"myId\") == 1);\n      assert(tuple.getLong(\"myInt\") == 7);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select id as myId, field_i as myInt, str_s as myString from collection1 where text='XXXX' AND id='(1 2 3)' order by field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"myId\") == 3);\n      assert(tuple.getLong(\"myInt\") == 20);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"myId\") == 2);\n      assert(tuple.getLong(\"myInt\") == 8);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"myId\") == 1);\n      assert(tuple.getLong(\"myInt\") == 7);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      //Test after reload SOLR-9059//\n      Replica leader = getShardLeader(\"collection1\", \"shard1\", 30 /* timeout secs */);\n\n      // reload collection and wait to see the core report it has been reloaded\n      boolean wasReloaded = reloadCollection(leader, \"collection1\");\n      assertTrue(wasReloaded);\n\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select id as myId, field_i as myInt, str_s as myString from collection1 where text='XXXX' AND id='(1 2 3)' order by field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"myId\") == 3);\n      assert(tuple.getLong(\"myInt\") == 20);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"myId\") == 2);\n      assert(tuple.getLong(\"myInt\") == 8);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"myId\") == 1);\n      assert(tuple.getLong(\"myInt\") == 7);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n    } finally {\n      delete();\n    }\n  }\n\n","sourceOld":"  private void testBasicSelect() throws Exception {\n    try {\n\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexDoc(sdoc(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"7\"));\n      indexDoc(sdoc(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"8\"));\n      indexDoc(sdoc(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\"));\n      indexDoc(sdoc(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"11\"));\n      indexDoc(sdoc(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\"));\n      indexDoc(sdoc(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"40\"));\n      indexDoc(sdoc(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\"));\n      indexDoc(sdoc(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\"));\n      commit();\n      \n      SolrParams sParams = mapParams(CommonParams.QT, \"/sql\", \n          \"stmt\", \"select 'id', field_i, str_s from collection1 where 'text'='XXXX' order by field_i desc\");\n\n      SolrStream solrStream = new SolrStream(jetty.url, sParams);\n      List<Tuple> tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 8);\n\n      Tuple tuple = null;\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 8);\n      assert(tuple.getLong(\"field_i\") == 60);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"id\") == 7);\n      assert(tuple.getLong(\"field_i\") == 50);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"id\") == 6);\n      assert(tuple.getLong(\"field_i\") == 40);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(3);\n      assert(tuple.getLong(\"id\") == 5);\n      assert(tuple.getLong(\"field_i\") == 30);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(4);\n      assert(tuple.getLong(\"id\") == 3);\n      assert(tuple.getLong(\"field_i\") == 20);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      tuple = tuples.get(5);\n      assert(tuple.getLong(\"id\") == 4);\n      assert(tuple.getLong(\"field_i\") == 11);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(6);\n      assert(tuple.getLong(\"id\") == 2);\n      assert(tuple.getLong(\"field_i\") == 8);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(7);\n      assert(tuple.getLong(\"id\") == 1);\n      assert(tuple.getLong(\"field_i\") == 7);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      //Test unlimited unsorted result. Should sort on _version_ desc\n      sParams = mapParams(CommonParams.QT, \"/sql\", \"stmt\", \"select 'id', field_i, str_s from collection1 where 'text'='XXXX'\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 8);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 8);\n      assert(tuple.getLong(\"field_i\") == 60);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"id\") == 7);\n      assert(tuple.getLong(\"field_i\") == 50);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"id\") == 6);\n      assert(tuple.getLong(\"field_i\") == 40);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(3);\n      assert(tuple.getLong(\"id\") == 5);\n      assert(tuple.getLong(\"field_i\") == 30);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(4);\n      assert(tuple.getLong(\"id\") == 4);\n      assert(tuple.getLong(\"field_i\") == 11);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(5);\n      assert(tuple.getLong(\"id\") == 3);\n      assert(tuple.getLong(\"field_i\") == 20);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      tuple = tuples.get(6);\n      assert(tuple.getLong(\"id\") == 2);\n      assert(tuple.getLong(\"field_i\") == 8);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(7);\n      assert(tuple.getLong(\"id\") == 1);\n      assert(tuple.getLong(\"field_i\") == 7);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \n          \"stmt\", \"select id, field_i, str_s from collection1 where text='XXXX' order by field_i desc limit 1\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 1);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 8);\n      assert(tuple.getLong(\"field_i\") == 60);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \"stmt\", \"select id, field_i, str_s from collection1 where text='XXXX' AND id='(1 2 3)' order by field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 3);\n      assert(tuple.getLong(\"field_i\") == 20);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"id\") == 2);\n      assert(tuple.getLong(\"field_i\") == 8);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"id\") == 1);\n      assert(tuple.getLong(\"field_i\") == 7);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \n          \"stmt\", \"select id as myId, field_i as myInt, str_s as myString from collection1 where text='XXXX' AND id='(1 2 3)' order by myInt desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"myId\") == 3);\n      assert(tuple.getLong(\"myInt\") == 20);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"myId\") == 2);\n      assert(tuple.getLong(\"myInt\") == 8);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"myId\") == 1);\n      assert(tuple.getLong(\"myInt\") == 7);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select id as myId, field_i as myInt, str_s as myString from collection1 where text='XXXX' AND id='(1 2 3)' order by field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"myId\") == 3);\n      assert(tuple.getLong(\"myInt\") == 20);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"myId\") == 2);\n      assert(tuple.getLong(\"myInt\") == 8);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"myId\") == 1);\n      assert(tuple.getLong(\"myInt\") == 7);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      //Test after reload SOLR-9059//\n      Replica leader = getShardLeader(\"collection1\", \"shard1\", 30 /* timeout secs */);\n\n      // reload collection and wait to see the core report it has been reloaded\n      boolean wasReloaded = reloadCollection(leader, \"collection1\");\n      assertTrue(wasReloaded);\n\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select id as myId, field_i as myInt, str_s as myString from collection1 where text='XXXX' AND id='(1 2 3)' order by field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"myId\") == 3);\n      assert(tuple.getLong(\"myInt\") == 20);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"myId\") == 2);\n      assert(tuple.getLong(\"myInt\") == 8);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"myId\") == 1);\n      assert(tuple.getLong(\"myInt\") == 7);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n    } finally {\n      delete();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4f1c9476bf735df68b562c769abe7bc56886c2f","date":1488676954,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testBasicSelect().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testBasicSelect().mjava","sourceNew":"  private void testBasicSelect() throws Exception {\n    try {\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexDoc(sdoc(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"7\"));\n      indexDoc(sdoc(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"8\"));\n      indexDoc(sdoc(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\"));\n      indexDoc(sdoc(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"11\"));\n      indexDoc(sdoc(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\"));\n      indexDoc(sdoc(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"40\"));\n      indexDoc(sdoc(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\"));\n      indexDoc(sdoc(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\"));\n      commit();\n\n\n      System.out.println(\"############# testBasicSelect() ############\");\n\n      SolrParams sParams = mapParams(CommonParams.QT, \"/sql\", \n          \"stmt\", \"select id, field_i, str_s from collection1 where (text='(XXXX)' OR text='XXXX') AND text='XXXX' order by field_i desc\");\n\n      SolrStream solrStream = new SolrStream(jetty.url, sParams);\n      List<Tuple> tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 8);\n      Tuple tuple;\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 8);\n      assert(tuple.getLong(\"field_i\") == 60);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"id\") == 7);\n      assert(tuple.getLong(\"field_i\") == 50);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"id\") == 6);\n      assert(tuple.getLong(\"field_i\") == 40);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(3);\n      assert(tuple.getLong(\"id\") == 5);\n      assert(tuple.getLong(\"field_i\") == 30);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(4);\n      assert(tuple.getLong(\"id\") == 3);\n      assert(tuple.getLong(\"field_i\") == 20);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      tuple = tuples.get(5);\n      assert(tuple.getLong(\"id\") == 4);\n      assert(tuple.getLong(\"field_i\") == 11);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(6);\n      assert(tuple.getLong(\"id\") == 2);\n      assert(tuple.getLong(\"field_i\") == 8);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(7);\n      assert(tuple.getLong(\"id\") == 1);\n      assert(tuple.getLong(\"field_i\") == 7);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      //Test unlimited unsorted result. Should sort on _version_ desc\n      sParams = mapParams(CommonParams.QT, \"/sql\", \"stmt\", \"select id, field_i, str_s from collection1 where text='XXXX'\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 8);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 8);\n      assert(tuple.getLong(\"field_i\") == 60);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"id\") == 7);\n      assert(tuple.getLong(\"field_i\") == 50);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"id\") == 6);\n      assert(tuple.getLong(\"field_i\") == 40);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(3);\n      assert(tuple.getLong(\"id\") == 5);\n      assert(tuple.getLong(\"field_i\") == 30);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(4);\n      assert(tuple.getLong(\"id\") == 4);\n      assert(tuple.getLong(\"field_i\") == 11);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(5);\n      assert(tuple.getLong(\"id\") == 3);\n      assert(tuple.getLong(\"field_i\") == 20);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      tuple = tuples.get(6);\n      assert(tuple.getLong(\"id\") == 2);\n      assert(tuple.getLong(\"field_i\") == 8);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(7);\n      assert(tuple.getLong(\"id\") == 1);\n      assert(tuple.getLong(\"field_i\") == 7);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \n          \"stmt\", \"select id, field_i, str_s from collection1 where text='XXXX' order by field_i desc limit 1\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 1);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 8);\n      assert(tuple.getLong(\"field_i\") == 60);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \"stmt\", \"select id, field_i, str_s from collection1 where text='XXXX' AND id='(1 2 3)' order by field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 3);\n      assert(tuple.getLong(\"field_i\") == 20);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"id\") == 2);\n      assert(tuple.getLong(\"field_i\") == 8);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"id\") == 1);\n      assert(tuple.getLong(\"field_i\") == 7);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \n          \"stmt\", \"select id as myId, field_i as myInt, str_s as myString from collection1 where text='XXXX' AND id='(1 2 3)' order by myInt desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"myId\") == 3);\n      assert(tuple.getLong(\"myInt\") == 20);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"myId\") == 2);\n      assert(tuple.getLong(\"myInt\") == 8);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"myId\") == 1);\n      assert(tuple.getLong(\"myInt\") == 7);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select id as myId, field_i as myInt, str_s as myString from collection1 where text='XXXX' AND id='(1 2 3)' order by field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"myId\") == 3);\n      assert(tuple.getLong(\"myInt\") == 20);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"myId\") == 2);\n      assert(tuple.getLong(\"myInt\") == 8);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"myId\") == 1);\n      assert(tuple.getLong(\"myInt\") == 7);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      //Test after reload SOLR-9059//\n      Replica leader = getShardLeader(\"collection1\", \"shard1\", 30 /* timeout secs */);\n\n      // reload collection and wait to see the core report it has been reloaded\n      boolean wasReloaded = reloadCollection(leader, \"collection1\");\n      assertTrue(wasReloaded);\n\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select id as myId, field_i as myInt, str_s as myString from collection1 where text='XXXX' AND id='(1 2 3)' order by field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"myId\") == 3);\n      assert(tuple.getLong(\"myInt\") == 20);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"myId\") == 2);\n      assert(tuple.getLong(\"myInt\") == 8);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"myId\") == 1);\n      assert(tuple.getLong(\"myInt\") == 7);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      // SOLR-8845 - Test to make sure that 1 = 0 works for things like Spark SQL\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select id, field_i, str_s from collection1 where 1 = 0\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assertEquals(0, tuples.size());\n    } finally {\n      delete();\n    }\n  }\n\n","sourceOld":"  private void testBasicSelect() throws Exception {\n    try {\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexDoc(sdoc(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"7\"));\n      indexDoc(sdoc(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"8\"));\n      indexDoc(sdoc(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\"));\n      indexDoc(sdoc(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"11\"));\n      indexDoc(sdoc(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\"));\n      indexDoc(sdoc(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"40\"));\n      indexDoc(sdoc(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\"));\n      indexDoc(sdoc(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\"));\n      commit();\n\n\n      System.out.println(\"############# testBasicSelect() ############\");\n\n      SolrParams sParams = mapParams(CommonParams.QT, \"/sql\", \n          \"stmt\", \"select id, field_i, str_s from collection1 where (text='(XXXX)' OR text='XXXX') AND text='XXXX' order by field_i desc\");\n\n      SolrStream solrStream = new SolrStream(jetty.url, sParams);\n      List<Tuple> tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 8);\n      Tuple tuple;\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 8);\n      assert(tuple.getLong(\"field_i\") == 60);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"id\") == 7);\n      assert(tuple.getLong(\"field_i\") == 50);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"id\") == 6);\n      assert(tuple.getLong(\"field_i\") == 40);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(3);\n      assert(tuple.getLong(\"id\") == 5);\n      assert(tuple.getLong(\"field_i\") == 30);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(4);\n      assert(tuple.getLong(\"id\") == 3);\n      assert(tuple.getLong(\"field_i\") == 20);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      tuple = tuples.get(5);\n      assert(tuple.getLong(\"id\") == 4);\n      assert(tuple.getLong(\"field_i\") == 11);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(6);\n      assert(tuple.getLong(\"id\") == 2);\n      assert(tuple.getLong(\"field_i\") == 8);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(7);\n      assert(tuple.getLong(\"id\") == 1);\n      assert(tuple.getLong(\"field_i\") == 7);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      //Test unlimited unsorted result. Should sort on _version_ desc\n      sParams = mapParams(CommonParams.QT, \"/sql\", \"stmt\", \"select id, field_i, str_s from collection1 where text='XXXX'\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 8);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 8);\n      assert(tuple.getLong(\"field_i\") == 60);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"id\") == 7);\n      assert(tuple.getLong(\"field_i\") == 50);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"id\") == 6);\n      assert(tuple.getLong(\"field_i\") == 40);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(3);\n      assert(tuple.getLong(\"id\") == 5);\n      assert(tuple.getLong(\"field_i\") == 30);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(4);\n      assert(tuple.getLong(\"id\") == 4);\n      assert(tuple.getLong(\"field_i\") == 11);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(5);\n      assert(tuple.getLong(\"id\") == 3);\n      assert(tuple.getLong(\"field_i\") == 20);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      tuple = tuples.get(6);\n      assert(tuple.getLong(\"id\") == 2);\n      assert(tuple.getLong(\"field_i\") == 8);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(7);\n      assert(tuple.getLong(\"id\") == 1);\n      assert(tuple.getLong(\"field_i\") == 7);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \n          \"stmt\", \"select id, field_i, str_s from collection1 where text='XXXX' order by field_i desc limit 1\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 1);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 8);\n      assert(tuple.getLong(\"field_i\") == 60);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \"stmt\", \"select id, field_i, str_s from collection1 where text='XXXX' AND id='(1 2 3)' order by field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 3);\n      assert(tuple.getLong(\"field_i\") == 20);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"id\") == 2);\n      assert(tuple.getLong(\"field_i\") == 8);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"id\") == 1);\n      assert(tuple.getLong(\"field_i\") == 7);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \n          \"stmt\", \"select id as myId, field_i as myInt, str_s as myString from collection1 where text='XXXX' AND id='(1 2 3)' order by myInt desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"myId\") == 3);\n      assert(tuple.getLong(\"myInt\") == 20);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"myId\") == 2);\n      assert(tuple.getLong(\"myInt\") == 8);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"myId\") == 1);\n      assert(tuple.getLong(\"myInt\") == 7);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select id as myId, field_i as myInt, str_s as myString from collection1 where text='XXXX' AND id='(1 2 3)' order by field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"myId\") == 3);\n      assert(tuple.getLong(\"myInt\") == 20);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"myId\") == 2);\n      assert(tuple.getLong(\"myInt\") == 8);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"myId\") == 1);\n      assert(tuple.getLong(\"myInt\") == 7);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      //Test after reload SOLR-9059//\n      Replica leader = getShardLeader(\"collection1\", \"shard1\", 30 /* timeout secs */);\n\n      // reload collection and wait to see the core report it has been reloaded\n      boolean wasReloaded = reloadCollection(leader, \"collection1\");\n      assertTrue(wasReloaded);\n\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select id as myId, field_i as myInt, str_s as myString from collection1 where text='XXXX' AND id='(1 2 3)' order by field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"myId\") == 3);\n      assert(tuple.getLong(\"myInt\") == 20);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"myId\") == 2);\n      assert(tuple.getLong(\"myInt\") == 8);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"myId\") == 1);\n      assert(tuple.getLong(\"myInt\") == 7);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n    } finally {\n      delete();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7dbb74d09c5d364f22c2b7dfe3b0ab2f587cec81","date":1489617105,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testBasicSelect().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testBasicSelect().mjava","sourceNew":"  private void testBasicSelect() throws Exception {\n    try {\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexDoc(sdoc(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"7\"));\n      indexDoc(sdoc(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"8\"));\n      indexDoc(sdoc(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\"));\n      indexDoc(sdoc(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"11\"));\n      indexDoc(sdoc(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\"));\n      indexDoc(sdoc(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"40\"));\n      indexDoc(sdoc(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\"));\n      indexDoc(sdoc(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\"));\n      commit();\n\n\n      System.out.println(\"############# testBasicSelect() ############\");\n\n      SolrParams sParams = mapParams(CommonParams.QT, \"/sql\", \n          \"stmt\", \"select id, field_i, str_s from collection1 where (text='(XXXX)' OR text='XXXX') AND text='XXXX' order by field_i desc\");\n\n      SolrStream solrStream = new SolrStream(jetty.url, sParams);\n      List<Tuple> tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 8);\n      Tuple tuple;\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 8);\n      assert(tuple.getLong(\"field_i\") == 60);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"id\") == 7);\n      assert(tuple.getLong(\"field_i\") == 50);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"id\") == 6);\n      assert(tuple.getLong(\"field_i\") == 40);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(3);\n      assert(tuple.getLong(\"id\") == 5);\n      assert(tuple.getLong(\"field_i\") == 30);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(4);\n      assert(tuple.getLong(\"id\") == 3);\n      assert(tuple.getLong(\"field_i\") == 20);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      tuple = tuples.get(5);\n      assert(tuple.getLong(\"id\") == 4);\n      assert(tuple.getLong(\"field_i\") == 11);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(6);\n      assert(tuple.getLong(\"id\") == 2);\n      assert(tuple.getLong(\"field_i\") == 8);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(7);\n      assert(tuple.getLong(\"id\") == 1);\n      assert(tuple.getLong(\"field_i\") == 7);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      //Assert field order\n      assertResponseContains(clients.get(0), sParams, \"{\\\"docs\\\":[{\\\"id\\\":8,\\\"field_i\\\":60,\\\"str_s\\\":\\\"c\\\"}\");\n\n      //Test unlimited unsorted result. Should sort on _version_ desc\n      sParams = mapParams(CommonParams.QT, \"/sql\", \"stmt\", \"select id, field_i, str_s from collection1 where text='XXXX'\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 8);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 8);\n      assert(tuple.getLong(\"field_i\") == 60);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"id\") == 7);\n      assert(tuple.getLong(\"field_i\") == 50);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"id\") == 6);\n      assert(tuple.getLong(\"field_i\") == 40);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(3);\n      assert(tuple.getLong(\"id\") == 5);\n      assert(tuple.getLong(\"field_i\") == 30);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(4);\n      assert(tuple.getLong(\"id\") == 4);\n      assert(tuple.getLong(\"field_i\") == 11);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(5);\n      assert(tuple.getLong(\"id\") == 3);\n      assert(tuple.getLong(\"field_i\") == 20);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      tuple = tuples.get(6);\n      assert(tuple.getLong(\"id\") == 2);\n      assert(tuple.getLong(\"field_i\") == 8);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(7);\n      assert(tuple.getLong(\"id\") == 1);\n      assert(tuple.getLong(\"field_i\") == 7);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \n          \"stmt\", \"select id, field_i, str_s from collection1 where text='XXXX' order by field_i desc limit 1\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 1);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 8);\n      assert(tuple.getLong(\"field_i\") == 60);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \"stmt\", \"select id, field_i, str_s from collection1 where text='XXXX' AND id='(1 2 3)' order by field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 3);\n      assert(tuple.getLong(\"field_i\") == 20);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"id\") == 2);\n      assert(tuple.getLong(\"field_i\") == 8);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"id\") == 1);\n      assert(tuple.getLong(\"field_i\") == 7);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \n          \"stmt\", \"select id as myId, field_i as myInt, str_s as myString from collection1 where text='XXXX' AND id='(1 2 3)' order by myInt desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"myId\") == 3);\n      assert(tuple.getLong(\"myInt\") == 20);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"myId\") == 2);\n      assert(tuple.getLong(\"myInt\") == 8);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"myId\") == 1);\n      assert(tuple.getLong(\"myInt\") == 7);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select id as myId, field_i as myInt, str_s as myString from collection1 where text='XXXX' AND id='(1 2 3)' order by field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"myId\") == 3);\n      assert(tuple.getLong(\"myInt\") == 20);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"myId\") == 2);\n      assert(tuple.getLong(\"myInt\") == 8);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"myId\") == 1);\n      assert(tuple.getLong(\"myInt\") == 7);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      //Test after reload SOLR-9059//\n      Replica leader = getShardLeader(\"collection1\", \"shard1\", 30 /* timeout secs */);\n\n      // reload collection and wait to see the core report it has been reloaded\n      boolean wasReloaded = reloadCollection(leader, \"collection1\");\n      assertTrue(wasReloaded);\n\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select id as myId, field_i as myInt, str_s as myString from collection1 where text='XXXX' AND id='(1 2 3)' order by field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"myId\") == 3);\n      assert(tuple.getLong(\"myInt\") == 20);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"myId\") == 2);\n      assert(tuple.getLong(\"myInt\") == 8);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"myId\") == 1);\n      assert(tuple.getLong(\"myInt\") == 7);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      // SOLR-8845 - Test to make sure that 1 = 0 works for things like Spark SQL\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select id, field_i, str_s from collection1 where 1 = 0\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assertEquals(0, tuples.size());\n    } finally {\n      delete();\n    }\n  }\n\n","sourceOld":"  private void testBasicSelect() throws Exception {\n    try {\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexDoc(sdoc(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"7\"));\n      indexDoc(sdoc(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"8\"));\n      indexDoc(sdoc(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\"));\n      indexDoc(sdoc(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"11\"));\n      indexDoc(sdoc(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\"));\n      indexDoc(sdoc(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"40\"));\n      indexDoc(sdoc(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\"));\n      indexDoc(sdoc(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\"));\n      commit();\n\n\n      System.out.println(\"############# testBasicSelect() ############\");\n\n      SolrParams sParams = mapParams(CommonParams.QT, \"/sql\", \n          \"stmt\", \"select id, field_i, str_s from collection1 where (text='(XXXX)' OR text='XXXX') AND text='XXXX' order by field_i desc\");\n\n      SolrStream solrStream = new SolrStream(jetty.url, sParams);\n      List<Tuple> tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 8);\n      Tuple tuple;\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 8);\n      assert(tuple.getLong(\"field_i\") == 60);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"id\") == 7);\n      assert(tuple.getLong(\"field_i\") == 50);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"id\") == 6);\n      assert(tuple.getLong(\"field_i\") == 40);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(3);\n      assert(tuple.getLong(\"id\") == 5);\n      assert(tuple.getLong(\"field_i\") == 30);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(4);\n      assert(tuple.getLong(\"id\") == 3);\n      assert(tuple.getLong(\"field_i\") == 20);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      tuple = tuples.get(5);\n      assert(tuple.getLong(\"id\") == 4);\n      assert(tuple.getLong(\"field_i\") == 11);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(6);\n      assert(tuple.getLong(\"id\") == 2);\n      assert(tuple.getLong(\"field_i\") == 8);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(7);\n      assert(tuple.getLong(\"id\") == 1);\n      assert(tuple.getLong(\"field_i\") == 7);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      //Test unlimited unsorted result. Should sort on _version_ desc\n      sParams = mapParams(CommonParams.QT, \"/sql\", \"stmt\", \"select id, field_i, str_s from collection1 where text='XXXX'\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 8);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 8);\n      assert(tuple.getLong(\"field_i\") == 60);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"id\") == 7);\n      assert(tuple.getLong(\"field_i\") == 50);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"id\") == 6);\n      assert(tuple.getLong(\"field_i\") == 40);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(3);\n      assert(tuple.getLong(\"id\") == 5);\n      assert(tuple.getLong(\"field_i\") == 30);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(4);\n      assert(tuple.getLong(\"id\") == 4);\n      assert(tuple.getLong(\"field_i\") == 11);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(5);\n      assert(tuple.getLong(\"id\") == 3);\n      assert(tuple.getLong(\"field_i\") == 20);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      tuple = tuples.get(6);\n      assert(tuple.getLong(\"id\") == 2);\n      assert(tuple.getLong(\"field_i\") == 8);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(7);\n      assert(tuple.getLong(\"id\") == 1);\n      assert(tuple.getLong(\"field_i\") == 7);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \n          \"stmt\", \"select id, field_i, str_s from collection1 where text='XXXX' order by field_i desc limit 1\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 1);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 8);\n      assert(tuple.getLong(\"field_i\") == 60);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \"stmt\", \"select id, field_i, str_s from collection1 where text='XXXX' AND id='(1 2 3)' order by field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 3);\n      assert(tuple.getLong(\"field_i\") == 20);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"id\") == 2);\n      assert(tuple.getLong(\"field_i\") == 8);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"id\") == 1);\n      assert(tuple.getLong(\"field_i\") == 7);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \n          \"stmt\", \"select id as myId, field_i as myInt, str_s as myString from collection1 where text='XXXX' AND id='(1 2 3)' order by myInt desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"myId\") == 3);\n      assert(tuple.getLong(\"myInt\") == 20);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"myId\") == 2);\n      assert(tuple.getLong(\"myInt\") == 8);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"myId\") == 1);\n      assert(tuple.getLong(\"myInt\") == 7);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select id as myId, field_i as myInt, str_s as myString from collection1 where text='XXXX' AND id='(1 2 3)' order by field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"myId\") == 3);\n      assert(tuple.getLong(\"myInt\") == 20);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"myId\") == 2);\n      assert(tuple.getLong(\"myInt\") == 8);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"myId\") == 1);\n      assert(tuple.getLong(\"myInt\") == 7);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      //Test after reload SOLR-9059//\n      Replica leader = getShardLeader(\"collection1\", \"shard1\", 30 /* timeout secs */);\n\n      // reload collection and wait to see the core report it has been reloaded\n      boolean wasReloaded = reloadCollection(leader, \"collection1\");\n      assertTrue(wasReloaded);\n\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select id as myId, field_i as myInt, str_s as myString from collection1 where text='XXXX' AND id='(1 2 3)' order by field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"myId\") == 3);\n      assert(tuple.getLong(\"myInt\") == 20);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"myId\") == 2);\n      assert(tuple.getLong(\"myInt\") == 8);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"myId\") == 1);\n      assert(tuple.getLong(\"myInt\") == 7);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      // SOLR-8845 - Test to make sure that 1 = 0 works for things like Spark SQL\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select id, field_i, str_s from collection1 where 1 = 0\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assertEquals(0, tuples.size());\n    } finally {\n      delete();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6106d879512729bf1e4840d612448c4180d110c8","date":1489651910,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testBasicSelect().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testBasicSelect().mjava","sourceNew":"  private void testBasicSelect() throws Exception {\n    try {\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexDoc(sdoc(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"7\"));\n      indexDoc(sdoc(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"8\"));\n      indexDoc(sdoc(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\"));\n      indexDoc(sdoc(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"11\"));\n      indexDoc(sdoc(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\"));\n      indexDoc(sdoc(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"40\"));\n      indexDoc(sdoc(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\"));\n      indexDoc(sdoc(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\"));\n      commit();\n\n\n      System.out.println(\"############# testBasicSelect() ############\");\n\n      SolrParams sParams = mapParams(CommonParams.QT, \"/sql\", \n          \"stmt\", \"select id, field_i, str_s from collection1 where (text='(XXXX)' OR text='XXXX') AND text='XXXX' order by field_i desc\");\n\n      SolrStream solrStream = new SolrStream(jetty.url, sParams);\n      List<Tuple> tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 8);\n      Tuple tuple;\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 8);\n      assert(tuple.getLong(\"field_i\") == 60);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"id\") == 7);\n      assert(tuple.getLong(\"field_i\") == 50);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"id\") == 6);\n      assert(tuple.getLong(\"field_i\") == 40);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(3);\n      assert(tuple.getLong(\"id\") == 5);\n      assert(tuple.getLong(\"field_i\") == 30);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(4);\n      assert(tuple.getLong(\"id\") == 3);\n      assert(tuple.getLong(\"field_i\") == 20);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      tuple = tuples.get(5);\n      assert(tuple.getLong(\"id\") == 4);\n      assert(tuple.getLong(\"field_i\") == 11);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(6);\n      assert(tuple.getLong(\"id\") == 2);\n      assert(tuple.getLong(\"field_i\") == 8);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(7);\n      assert(tuple.getLong(\"id\") == 1);\n      assert(tuple.getLong(\"field_i\") == 7);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      //Assert field order\n      assertResponseContains(clients.get(0), sParams, \"{\\\"docs\\\":[{\\\"id\\\":8,\\\"field_i\\\":60,\\\"str_s\\\":\\\"c\\\"}\");\n\n      //Test unlimited unsorted result. Should sort on _version_ desc\n      sParams = mapParams(CommonParams.QT, \"/sql\", \"stmt\", \"select id, field_i, str_s from collection1 where text='XXXX'\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 8);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 8);\n      assert(tuple.getLong(\"field_i\") == 60);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"id\") == 7);\n      assert(tuple.getLong(\"field_i\") == 50);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"id\") == 6);\n      assert(tuple.getLong(\"field_i\") == 40);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(3);\n      assert(tuple.getLong(\"id\") == 5);\n      assert(tuple.getLong(\"field_i\") == 30);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(4);\n      assert(tuple.getLong(\"id\") == 4);\n      assert(tuple.getLong(\"field_i\") == 11);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(5);\n      assert(tuple.getLong(\"id\") == 3);\n      assert(tuple.getLong(\"field_i\") == 20);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      tuple = tuples.get(6);\n      assert(tuple.getLong(\"id\") == 2);\n      assert(tuple.getLong(\"field_i\") == 8);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(7);\n      assert(tuple.getLong(\"id\") == 1);\n      assert(tuple.getLong(\"field_i\") == 7);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \n          \"stmt\", \"select id, field_i, str_s from collection1 where text='XXXX' order by field_i desc limit 1\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 1);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 8);\n      assert(tuple.getLong(\"field_i\") == 60);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \"stmt\", \"select id, field_i, str_s from collection1 where text='XXXX' AND id='(1 2 3)' order by field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 3);\n      assert(tuple.getLong(\"field_i\") == 20);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"id\") == 2);\n      assert(tuple.getLong(\"field_i\") == 8);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"id\") == 1);\n      assert(tuple.getLong(\"field_i\") == 7);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \n          \"stmt\", \"select id as myId, field_i as myInt, str_s as myString from collection1 where text='XXXX' AND id='(1 2 3)' order by myInt desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"myId\") == 3);\n      assert(tuple.getLong(\"myInt\") == 20);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"myId\") == 2);\n      assert(tuple.getLong(\"myInt\") == 8);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"myId\") == 1);\n      assert(tuple.getLong(\"myInt\") == 7);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select id as myId, field_i as myInt, str_s as myString from collection1 where text='XXXX' AND id='(1 2 3)' order by field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"myId\") == 3);\n      assert(tuple.getLong(\"myInt\") == 20);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"myId\") == 2);\n      assert(tuple.getLong(\"myInt\") == 8);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"myId\") == 1);\n      assert(tuple.getLong(\"myInt\") == 7);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      //Test after reload SOLR-9059//\n      Replica leader = getShardLeader(\"collection1\", \"shard1\", 30 /* timeout secs */);\n\n      // reload collection and wait to see the core report it has been reloaded\n      boolean wasReloaded = reloadCollection(leader, \"collection1\");\n      assertTrue(wasReloaded);\n\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select id as myId, field_i as myInt, str_s as myString from collection1 where text='XXXX' AND id='(1 2 3)' order by field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"myId\") == 3);\n      assert(tuple.getLong(\"myInt\") == 20);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"myId\") == 2);\n      assert(tuple.getLong(\"myInt\") == 8);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"myId\") == 1);\n      assert(tuple.getLong(\"myInt\") == 7);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      // SOLR-8845 - Test to make sure that 1 = 0 works for things like Spark SQL\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select id, field_i, str_s from collection1 where 1 = 0\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assertEquals(0, tuples.size());\n    } finally {\n      delete();\n    }\n  }\n\n","sourceOld":"  private void testBasicSelect() throws Exception {\n    try {\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexDoc(sdoc(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"7\"));\n      indexDoc(sdoc(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"8\"));\n      indexDoc(sdoc(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\"));\n      indexDoc(sdoc(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"11\"));\n      indexDoc(sdoc(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\"));\n      indexDoc(sdoc(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"40\"));\n      indexDoc(sdoc(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\"));\n      indexDoc(sdoc(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\"));\n      commit();\n\n\n      System.out.println(\"############# testBasicSelect() ############\");\n\n      SolrParams sParams = mapParams(CommonParams.QT, \"/sql\", \n          \"stmt\", \"select id, field_i, str_s from collection1 where (text='(XXXX)' OR text='XXXX') AND text='XXXX' order by field_i desc\");\n\n      SolrStream solrStream = new SolrStream(jetty.url, sParams);\n      List<Tuple> tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 8);\n      Tuple tuple;\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 8);\n      assert(tuple.getLong(\"field_i\") == 60);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"id\") == 7);\n      assert(tuple.getLong(\"field_i\") == 50);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"id\") == 6);\n      assert(tuple.getLong(\"field_i\") == 40);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(3);\n      assert(tuple.getLong(\"id\") == 5);\n      assert(tuple.getLong(\"field_i\") == 30);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(4);\n      assert(tuple.getLong(\"id\") == 3);\n      assert(tuple.getLong(\"field_i\") == 20);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      tuple = tuples.get(5);\n      assert(tuple.getLong(\"id\") == 4);\n      assert(tuple.getLong(\"field_i\") == 11);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(6);\n      assert(tuple.getLong(\"id\") == 2);\n      assert(tuple.getLong(\"field_i\") == 8);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(7);\n      assert(tuple.getLong(\"id\") == 1);\n      assert(tuple.getLong(\"field_i\") == 7);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      //Test unlimited unsorted result. Should sort on _version_ desc\n      sParams = mapParams(CommonParams.QT, \"/sql\", \"stmt\", \"select id, field_i, str_s from collection1 where text='XXXX'\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 8);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 8);\n      assert(tuple.getLong(\"field_i\") == 60);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"id\") == 7);\n      assert(tuple.getLong(\"field_i\") == 50);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"id\") == 6);\n      assert(tuple.getLong(\"field_i\") == 40);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(3);\n      assert(tuple.getLong(\"id\") == 5);\n      assert(tuple.getLong(\"field_i\") == 30);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(4);\n      assert(tuple.getLong(\"id\") == 4);\n      assert(tuple.getLong(\"field_i\") == 11);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(5);\n      assert(tuple.getLong(\"id\") == 3);\n      assert(tuple.getLong(\"field_i\") == 20);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      tuple = tuples.get(6);\n      assert(tuple.getLong(\"id\") == 2);\n      assert(tuple.getLong(\"field_i\") == 8);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(7);\n      assert(tuple.getLong(\"id\") == 1);\n      assert(tuple.getLong(\"field_i\") == 7);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \n          \"stmt\", \"select id, field_i, str_s from collection1 where text='XXXX' order by field_i desc limit 1\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 1);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 8);\n      assert(tuple.getLong(\"field_i\") == 60);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \"stmt\", \"select id, field_i, str_s from collection1 where text='XXXX' AND id='(1 2 3)' order by field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 3);\n      assert(tuple.getLong(\"field_i\") == 20);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"id\") == 2);\n      assert(tuple.getLong(\"field_i\") == 8);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"id\") == 1);\n      assert(tuple.getLong(\"field_i\") == 7);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \n          \"stmt\", \"select id as myId, field_i as myInt, str_s as myString from collection1 where text='XXXX' AND id='(1 2 3)' order by myInt desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"myId\") == 3);\n      assert(tuple.getLong(\"myInt\") == 20);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"myId\") == 2);\n      assert(tuple.getLong(\"myInt\") == 8);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"myId\") == 1);\n      assert(tuple.getLong(\"myInt\") == 7);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select id as myId, field_i as myInt, str_s as myString from collection1 where text='XXXX' AND id='(1 2 3)' order by field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"myId\") == 3);\n      assert(tuple.getLong(\"myInt\") == 20);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"myId\") == 2);\n      assert(tuple.getLong(\"myInt\") == 8);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"myId\") == 1);\n      assert(tuple.getLong(\"myInt\") == 7);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      //Test after reload SOLR-9059//\n      Replica leader = getShardLeader(\"collection1\", \"shard1\", 30 /* timeout secs */);\n\n      // reload collection and wait to see the core report it has been reloaded\n      boolean wasReloaded = reloadCollection(leader, \"collection1\");\n      assertTrue(wasReloaded);\n\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select id as myId, field_i as myInt, str_s as myString from collection1 where text='XXXX' AND id='(1 2 3)' order by field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"myId\") == 3);\n      assert(tuple.getLong(\"myInt\") == 20);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"myId\") == 2);\n      assert(tuple.getLong(\"myInt\") == 8);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"myId\") == 1);\n      assert(tuple.getLong(\"myInt\") == 7);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      // SOLR-8845 - Test to make sure that 1 = 0 works for things like Spark SQL\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select id, field_i, str_s from collection1 where 1 = 0\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assertEquals(0, tuples.size());\n    } finally {\n      delete();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab68488225b6a6c357dda72ed11dedca9914a192","date":1490013111,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testBasicSelect().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testBasicSelect().mjava","sourceNew":"  private void testBasicSelect() throws Exception {\n    try {\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexDoc(sdoc(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"7\"));\n      indexDoc(sdoc(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"8\"));\n      indexDoc(sdoc(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\"));\n      indexDoc(sdoc(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"11\"));\n      indexDoc(sdoc(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\"));\n      indexDoc(sdoc(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"40\"));\n      indexDoc(sdoc(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\"));\n      indexDoc(sdoc(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\"));\n      commit();\n\n\n      System.out.println(\"############# testBasicSelect() ############\");\n\n      SolrParams sParams = mapParams(CommonParams.QT, \"/sql\", \n          \"stmt\", \"select id, field_i, str_s from collection1 where (text='(XXXX)' OR text='XXXX') AND text='XXXX' order by field_i desc\");\n\n      SolrStream solrStream = new SolrStream(jetty.url, sParams);\n      List<Tuple> tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 8);\n      Tuple tuple;\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 8);\n      assert(tuple.getLong(\"field_i\") == 60);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"id\") == 7);\n      assert(tuple.getLong(\"field_i\") == 50);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"id\") == 6);\n      assert(tuple.getLong(\"field_i\") == 40);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(3);\n      assert(tuple.getLong(\"id\") == 5);\n      assert(tuple.getLong(\"field_i\") == 30);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(4);\n      assert(tuple.getLong(\"id\") == 3);\n      assert(tuple.getLong(\"field_i\") == 20);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      tuple = tuples.get(5);\n      assert(tuple.getLong(\"id\") == 4);\n      assert(tuple.getLong(\"field_i\") == 11);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(6);\n      assert(tuple.getLong(\"id\") == 2);\n      assert(tuple.getLong(\"field_i\") == 8);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(7);\n      assert(tuple.getLong(\"id\") == 1);\n      assert(tuple.getLong(\"field_i\") == 7);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      //Assert field order\n      assertResponseContains(clients.get(0), sParams, \"{\\\"docs\\\":[{\\\"id\\\":8,\\\"field_i\\\":60,\\\"str_s\\\":\\\"c\\\"}\");\n\n      //Test unlimited unsorted result. Should sort on _version_ desc\n      sParams = mapParams(CommonParams.QT, \"/sql\", \"stmt\", \"select id, field_i, str_s from collection1 where text='XXXX'\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 8);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 8);\n      assert(tuple.getLong(\"field_i\") == 60);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"id\") == 7);\n      assert(tuple.getLong(\"field_i\") == 50);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"id\") == 6);\n      assert(tuple.getLong(\"field_i\") == 40);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(3);\n      assert(tuple.getLong(\"id\") == 5);\n      assert(tuple.getLong(\"field_i\") == 30);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(4);\n      assert(tuple.getLong(\"id\") == 4);\n      assert(tuple.getLong(\"field_i\") == 11);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(5);\n      assert(tuple.getLong(\"id\") == 3);\n      assert(tuple.getLong(\"field_i\") == 20);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      tuple = tuples.get(6);\n      assert(tuple.getLong(\"id\") == 2);\n      assert(tuple.getLong(\"field_i\") == 8);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(7);\n      assert(tuple.getLong(\"id\") == 1);\n      assert(tuple.getLong(\"field_i\") == 7);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \n          \"stmt\", \"select id, field_i, str_s from collection1 where text='XXXX' order by field_i desc limit 1\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 1);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 8);\n      assert(tuple.getLong(\"field_i\") == 60);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \"stmt\", \"select id, field_i, str_s from collection1 where text='XXXX' AND id='(1 2 3)' order by field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 3);\n      assert(tuple.getLong(\"field_i\") == 20);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"id\") == 2);\n      assert(tuple.getLong(\"field_i\") == 8);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"id\") == 1);\n      assert(tuple.getLong(\"field_i\") == 7);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \n          \"stmt\", \"select id as myId, field_i as myInt, str_s as myString from collection1 where text='XXXX' AND id='(1 2 3)' order by myInt desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"myId\") == 3);\n      assert(tuple.getLong(\"myInt\") == 20);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"myId\") == 2);\n      assert(tuple.getLong(\"myInt\") == 8);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"myId\") == 1);\n      assert(tuple.getLong(\"myInt\") == 7);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select id as myId, field_i as myInt, str_s as myString from collection1 where text='XXXX' AND id='(1 2 3)' order by field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"myId\") == 3);\n      assert(tuple.getLong(\"myInt\") == 20);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"myId\") == 2);\n      assert(tuple.getLong(\"myInt\") == 8);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"myId\") == 1);\n      assert(tuple.getLong(\"myInt\") == 7);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      //Test after reload SOLR-9059//\n      Replica leader = getShardLeader(\"collection1\", \"shard1\", 30 /* timeout secs */);\n\n      // reload collection and wait to see the core report it has been reloaded\n      boolean wasReloaded = reloadCollection(leader, \"collection1\");\n      assertTrue(wasReloaded);\n\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select id as myId, field_i as myInt, str_s as myString from collection1 where text='XXXX' AND id='(1 2 3)' order by field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"myId\") == 3);\n      assert(tuple.getLong(\"myInt\") == 20);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"myId\") == 2);\n      assert(tuple.getLong(\"myInt\") == 8);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"myId\") == 1);\n      assert(tuple.getLong(\"myInt\") == 7);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      // SOLR-8845 - Test to make sure that 1 = 0 works for things like Spark SQL\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select id, field_i, str_s from collection1 where 1 = 0\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assertEquals(0, tuples.size());\n    } finally {\n      delete();\n    }\n  }\n\n","sourceOld":"  private void testBasicSelect() throws Exception {\n    try {\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexDoc(sdoc(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"7\"));\n      indexDoc(sdoc(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"8\"));\n      indexDoc(sdoc(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\"));\n      indexDoc(sdoc(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"11\"));\n      indexDoc(sdoc(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\"));\n      indexDoc(sdoc(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"40\"));\n      indexDoc(sdoc(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\"));\n      indexDoc(sdoc(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\"));\n      commit();\n\n\n      System.out.println(\"############# testBasicSelect() ############\");\n\n      SolrParams sParams = mapParams(CommonParams.QT, \"/sql\", \n          \"stmt\", \"select id, field_i, str_s from collection1 where (text='(XXXX)' OR text='XXXX') AND text='XXXX' order by field_i desc\");\n\n      SolrStream solrStream = new SolrStream(jetty.url, sParams);\n      List<Tuple> tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 8);\n      Tuple tuple;\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 8);\n      assert(tuple.getLong(\"field_i\") == 60);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"id\") == 7);\n      assert(tuple.getLong(\"field_i\") == 50);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"id\") == 6);\n      assert(tuple.getLong(\"field_i\") == 40);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(3);\n      assert(tuple.getLong(\"id\") == 5);\n      assert(tuple.getLong(\"field_i\") == 30);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(4);\n      assert(tuple.getLong(\"id\") == 3);\n      assert(tuple.getLong(\"field_i\") == 20);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      tuple = tuples.get(5);\n      assert(tuple.getLong(\"id\") == 4);\n      assert(tuple.getLong(\"field_i\") == 11);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(6);\n      assert(tuple.getLong(\"id\") == 2);\n      assert(tuple.getLong(\"field_i\") == 8);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(7);\n      assert(tuple.getLong(\"id\") == 1);\n      assert(tuple.getLong(\"field_i\") == 7);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      //Test unlimited unsorted result. Should sort on _version_ desc\n      sParams = mapParams(CommonParams.QT, \"/sql\", \"stmt\", \"select id, field_i, str_s from collection1 where text='XXXX'\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 8);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 8);\n      assert(tuple.getLong(\"field_i\") == 60);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"id\") == 7);\n      assert(tuple.getLong(\"field_i\") == 50);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"id\") == 6);\n      assert(tuple.getLong(\"field_i\") == 40);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(3);\n      assert(tuple.getLong(\"id\") == 5);\n      assert(tuple.getLong(\"field_i\") == 30);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(4);\n      assert(tuple.getLong(\"id\") == 4);\n      assert(tuple.getLong(\"field_i\") == 11);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(5);\n      assert(tuple.getLong(\"id\") == 3);\n      assert(tuple.getLong(\"field_i\") == 20);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      tuple = tuples.get(6);\n      assert(tuple.getLong(\"id\") == 2);\n      assert(tuple.getLong(\"field_i\") == 8);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(7);\n      assert(tuple.getLong(\"id\") == 1);\n      assert(tuple.getLong(\"field_i\") == 7);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \n          \"stmt\", \"select id, field_i, str_s from collection1 where text='XXXX' order by field_i desc limit 1\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 1);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 8);\n      assert(tuple.getLong(\"field_i\") == 60);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \"stmt\", \"select id, field_i, str_s from collection1 where text='XXXX' AND id='(1 2 3)' order by field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 3);\n      assert(tuple.getLong(\"field_i\") == 20);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"id\") == 2);\n      assert(tuple.getLong(\"field_i\") == 8);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"id\") == 1);\n      assert(tuple.getLong(\"field_i\") == 7);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \n          \"stmt\", \"select id as myId, field_i as myInt, str_s as myString from collection1 where text='XXXX' AND id='(1 2 3)' order by myInt desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"myId\") == 3);\n      assert(tuple.getLong(\"myInt\") == 20);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"myId\") == 2);\n      assert(tuple.getLong(\"myInt\") == 8);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"myId\") == 1);\n      assert(tuple.getLong(\"myInt\") == 7);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select id as myId, field_i as myInt, str_s as myString from collection1 where text='XXXX' AND id='(1 2 3)' order by field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"myId\") == 3);\n      assert(tuple.getLong(\"myInt\") == 20);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"myId\") == 2);\n      assert(tuple.getLong(\"myInt\") == 8);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"myId\") == 1);\n      assert(tuple.getLong(\"myInt\") == 7);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      //Test after reload SOLR-9059//\n      Replica leader = getShardLeader(\"collection1\", \"shard1\", 30 /* timeout secs */);\n\n      // reload collection and wait to see the core report it has been reloaded\n      boolean wasReloaded = reloadCollection(leader, \"collection1\");\n      assertTrue(wasReloaded);\n\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select id as myId, field_i as myInt, str_s as myString from collection1 where text='XXXX' AND id='(1 2 3)' order by field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"myId\") == 3);\n      assert(tuple.getLong(\"myInt\") == 20);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"myId\") == 2);\n      assert(tuple.getLong(\"myInt\") == 8);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"myId\") == 1);\n      assert(tuple.getLong(\"myInt\") == 7);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      // SOLR-8845 - Test to make sure that 1 = 0 works for things like Spark SQL\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select id, field_i, str_s from collection1 where 1 = 0\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assertEquals(0, tuples.size());\n    } finally {\n      delete();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a71f63026529f3c1f03cfdd664910873ab2369ae","date":1497543264,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testBasicSelect().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testBasicSelect().mjava","sourceNew":"  private void testBasicSelect() throws Exception {\n    try {\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexDoc(sdoc(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"7\"));\n      indexDoc(sdoc(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"8\"));\n      indexDoc(sdoc(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\"));\n      indexDoc(sdoc(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"11\"));\n      indexDoc(sdoc(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\"));\n      indexDoc(sdoc(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"40\"));\n      indexDoc(sdoc(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\"));\n      indexDoc(sdoc(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\"));\n      commit();\n\n\n      System.out.println(\"############# testBasicSelect() ############\");\n\n      SolrParams sParams = mapParams(CommonParams.QT, \"/sql\", \n          \"stmt\", \"select id, field_i, str_s from collection1 where (text='(XXXX)' OR text='XXXX') AND text='XXXX' order by field_i desc\");\n\n      SolrStream solrStream = new SolrStream(jetty.url, sParams);\n      List<Tuple> tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 8);\n      Tuple tuple;\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 8);\n      assert(tuple.getLong(\"field_i\") == 60);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"id\") == 7);\n      assert(tuple.getLong(\"field_i\") == 50);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"id\") == 6);\n      assert(tuple.getLong(\"field_i\") == 40);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(3);\n      assert(tuple.getLong(\"id\") == 5);\n      assert(tuple.getLong(\"field_i\") == 30);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(4);\n      assert(tuple.getLong(\"id\") == 3);\n      assert(tuple.getLong(\"field_i\") == 20);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      tuple = tuples.get(5);\n      assert(tuple.getLong(\"id\") == 4);\n      assert(tuple.getLong(\"field_i\") == 11);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(6);\n      assert(tuple.getLong(\"id\") == 2);\n      assert(tuple.getLong(\"field_i\") == 8);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(7);\n      assert(tuple.getLong(\"id\") == 1);\n      assert(tuple.getLong(\"field_i\") == 7);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      //Assert field order\n      assertResponseContains(clients.get(0), sParams, \"{\\\"docs\\\":[{\\\"id\\\":\\\"8\\\",\\\"field_i\\\":60,\\\"str_s\\\":\\\"c\\\"}\");\n\n      //Test unlimited unsorted result. Should sort on _version_ desc\n      sParams = mapParams(CommonParams.QT, \"/sql\", \"stmt\", \"select id, field_i, str_s from collection1 where text='XXXX'\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 8);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 8);\n      assert(tuple.getLong(\"field_i\") == 60);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"id\") == 7);\n      assert(tuple.getLong(\"field_i\") == 50);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"id\") == 6);\n      assert(tuple.getLong(\"field_i\") == 40);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(3);\n      assert(tuple.getLong(\"id\") == 5);\n      assert(tuple.getLong(\"field_i\") == 30);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(4);\n      assert(tuple.getLong(\"id\") == 4);\n      assert(tuple.getLong(\"field_i\") == 11);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(5);\n      assert(tuple.getLong(\"id\") == 3);\n      assert(tuple.getLong(\"field_i\") == 20);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      tuple = tuples.get(6);\n      assert(tuple.getLong(\"id\") == 2);\n      assert(tuple.getLong(\"field_i\") == 8);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(7);\n      assert(tuple.getLong(\"id\") == 1);\n      assert(tuple.getLong(\"field_i\") == 7);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \n          \"stmt\", \"select id, field_i, str_s from collection1 where text='XXXX' order by field_i desc limit 1\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 1);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 8);\n      assert(tuple.getLong(\"field_i\") == 60);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \"stmt\", \"select id, field_i, str_s from collection1 where text='XXXX' AND id='(1 2 3)' order by field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 3);\n      assert(tuple.getLong(\"field_i\") == 20);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"id\") == 2);\n      assert(tuple.getLong(\"field_i\") == 8);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"id\") == 1);\n      assert(tuple.getLong(\"field_i\") == 7);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \n          \"stmt\", \"select id as myId, field_i as myInt, str_s as myString from collection1 where text='XXXX' AND id='(1 2 3)' order by myInt desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"myId\") == 3);\n      assert(tuple.getLong(\"myInt\") == 20);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"myId\") == 2);\n      assert(tuple.getLong(\"myInt\") == 8);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"myId\") == 1);\n      assert(tuple.getLong(\"myInt\") == 7);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select id as myId, field_i as myInt, str_s as myString from collection1 where text='XXXX' AND id='(1 2 3)' order by field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"myId\") == 3);\n      assert(tuple.getLong(\"myInt\") == 20);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"myId\") == 2);\n      assert(tuple.getLong(\"myInt\") == 8);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"myId\") == 1);\n      assert(tuple.getLong(\"myInt\") == 7);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      //Test after reload SOLR-9059//\n      Replica leader = getShardLeader(\"collection1\", \"shard1\", 30 /* timeout secs */);\n\n      // reload collection and wait to see the core report it has been reloaded\n      boolean wasReloaded = reloadCollection(leader, \"collection1\");\n      assertTrue(wasReloaded);\n\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select id as myId, field_i as myInt, str_s as myString from collection1 where text='XXXX' AND id='(1 2 3)' order by field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"myId\") == 3);\n      assert(tuple.getLong(\"myInt\") == 20);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"myId\") == 2);\n      assert(tuple.getLong(\"myInt\") == 8);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"myId\") == 1);\n      assert(tuple.getLong(\"myInt\") == 7);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      // SOLR-8845 - Test to make sure that 1 = 0 works for things like Spark SQL\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select id, field_i, str_s from collection1 where 1 = 0\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assertEquals(0, tuples.size());\n    } finally {\n      delete();\n    }\n  }\n\n","sourceOld":"  private void testBasicSelect() throws Exception {\n    try {\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexDoc(sdoc(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"7\"));\n      indexDoc(sdoc(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"8\"));\n      indexDoc(sdoc(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\"));\n      indexDoc(sdoc(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"11\"));\n      indexDoc(sdoc(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\"));\n      indexDoc(sdoc(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"40\"));\n      indexDoc(sdoc(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\"));\n      indexDoc(sdoc(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\"));\n      commit();\n\n\n      System.out.println(\"############# testBasicSelect() ############\");\n\n      SolrParams sParams = mapParams(CommonParams.QT, \"/sql\", \n          \"stmt\", \"select id, field_i, str_s from collection1 where (text='(XXXX)' OR text='XXXX') AND text='XXXX' order by field_i desc\");\n\n      SolrStream solrStream = new SolrStream(jetty.url, sParams);\n      List<Tuple> tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 8);\n      Tuple tuple;\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 8);\n      assert(tuple.getLong(\"field_i\") == 60);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"id\") == 7);\n      assert(tuple.getLong(\"field_i\") == 50);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"id\") == 6);\n      assert(tuple.getLong(\"field_i\") == 40);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(3);\n      assert(tuple.getLong(\"id\") == 5);\n      assert(tuple.getLong(\"field_i\") == 30);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(4);\n      assert(tuple.getLong(\"id\") == 3);\n      assert(tuple.getLong(\"field_i\") == 20);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      tuple = tuples.get(5);\n      assert(tuple.getLong(\"id\") == 4);\n      assert(tuple.getLong(\"field_i\") == 11);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(6);\n      assert(tuple.getLong(\"id\") == 2);\n      assert(tuple.getLong(\"field_i\") == 8);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(7);\n      assert(tuple.getLong(\"id\") == 1);\n      assert(tuple.getLong(\"field_i\") == 7);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      //Assert field order\n      assertResponseContains(clients.get(0), sParams, \"{\\\"docs\\\":[{\\\"id\\\":8,\\\"field_i\\\":60,\\\"str_s\\\":\\\"c\\\"}\");\n\n      //Test unlimited unsorted result. Should sort on _version_ desc\n      sParams = mapParams(CommonParams.QT, \"/sql\", \"stmt\", \"select id, field_i, str_s from collection1 where text='XXXX'\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 8);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 8);\n      assert(tuple.getLong(\"field_i\") == 60);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"id\") == 7);\n      assert(tuple.getLong(\"field_i\") == 50);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"id\") == 6);\n      assert(tuple.getLong(\"field_i\") == 40);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(3);\n      assert(tuple.getLong(\"id\") == 5);\n      assert(tuple.getLong(\"field_i\") == 30);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(4);\n      assert(tuple.getLong(\"id\") == 4);\n      assert(tuple.getLong(\"field_i\") == 11);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(5);\n      assert(tuple.getLong(\"id\") == 3);\n      assert(tuple.getLong(\"field_i\") == 20);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      tuple = tuples.get(6);\n      assert(tuple.getLong(\"id\") == 2);\n      assert(tuple.getLong(\"field_i\") == 8);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(7);\n      assert(tuple.getLong(\"id\") == 1);\n      assert(tuple.getLong(\"field_i\") == 7);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \n          \"stmt\", \"select id, field_i, str_s from collection1 where text='XXXX' order by field_i desc limit 1\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 1);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 8);\n      assert(tuple.getLong(\"field_i\") == 60);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \"stmt\", \"select id, field_i, str_s from collection1 where text='XXXX' AND id='(1 2 3)' order by field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 3);\n      assert(tuple.getLong(\"field_i\") == 20);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"id\") == 2);\n      assert(tuple.getLong(\"field_i\") == 8);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"id\") == 1);\n      assert(tuple.getLong(\"field_i\") == 7);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \n          \"stmt\", \"select id as myId, field_i as myInt, str_s as myString from collection1 where text='XXXX' AND id='(1 2 3)' order by myInt desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"myId\") == 3);\n      assert(tuple.getLong(\"myInt\") == 20);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"myId\") == 2);\n      assert(tuple.getLong(\"myInt\") == 8);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"myId\") == 1);\n      assert(tuple.getLong(\"myInt\") == 7);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select id as myId, field_i as myInt, str_s as myString from collection1 where text='XXXX' AND id='(1 2 3)' order by field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"myId\") == 3);\n      assert(tuple.getLong(\"myInt\") == 20);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"myId\") == 2);\n      assert(tuple.getLong(\"myInt\") == 8);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"myId\") == 1);\n      assert(tuple.getLong(\"myInt\") == 7);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      //Test after reload SOLR-9059//\n      Replica leader = getShardLeader(\"collection1\", \"shard1\", 30 /* timeout secs */);\n\n      // reload collection and wait to see the core report it has been reloaded\n      boolean wasReloaded = reloadCollection(leader, \"collection1\");\n      assertTrue(wasReloaded);\n\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select id as myId, field_i as myInt, str_s as myString from collection1 where text='XXXX' AND id='(1 2 3)' order by field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"myId\") == 3);\n      assert(tuple.getLong(\"myInt\") == 20);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"myId\") == 2);\n      assert(tuple.getLong(\"myInt\") == 8);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"myId\") == 1);\n      assert(tuple.getLong(\"myInt\") == 7);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      // SOLR-8845 - Test to make sure that 1 = 0 works for things like Spark SQL\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select id, field_i, str_s from collection1 where 1 = 0\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assertEquals(0, tuples.size());\n    } finally {\n      delete();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testBasicSelect().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testBasicSelect().mjava","sourceNew":"  private void testBasicSelect() throws Exception {\n    try {\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexDoc(sdoc(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"7\"));\n      indexDoc(sdoc(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"8\"));\n      indexDoc(sdoc(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\"));\n      indexDoc(sdoc(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"11\"));\n      indexDoc(sdoc(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\"));\n      indexDoc(sdoc(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"40\"));\n      indexDoc(sdoc(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\"));\n      indexDoc(sdoc(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\"));\n      commit();\n\n\n      System.out.println(\"############# testBasicSelect() ############\");\n\n      SolrParams sParams = mapParams(CommonParams.QT, \"/sql\", \n          \"stmt\", \"select id, field_i, str_s from collection1 where (text='(XXXX)' OR text='XXXX') AND text='XXXX' order by field_i desc\");\n\n      SolrStream solrStream = new SolrStream(jetty.url, sParams);\n      List<Tuple> tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 8);\n      Tuple tuple;\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 8);\n      assert(tuple.getLong(\"field_i\") == 60);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"id\") == 7);\n      assert(tuple.getLong(\"field_i\") == 50);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"id\") == 6);\n      assert(tuple.getLong(\"field_i\") == 40);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(3);\n      assert(tuple.getLong(\"id\") == 5);\n      assert(tuple.getLong(\"field_i\") == 30);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(4);\n      assert(tuple.getLong(\"id\") == 3);\n      assert(tuple.getLong(\"field_i\") == 20);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      tuple = tuples.get(5);\n      assert(tuple.getLong(\"id\") == 4);\n      assert(tuple.getLong(\"field_i\") == 11);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(6);\n      assert(tuple.getLong(\"id\") == 2);\n      assert(tuple.getLong(\"field_i\") == 8);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(7);\n      assert(tuple.getLong(\"id\") == 1);\n      assert(tuple.getLong(\"field_i\") == 7);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      //Assert field order\n      assertResponseContains(clients.get(0), sParams, \"{\\\"docs\\\":[{\\\"id\\\":\\\"8\\\",\\\"field_i\\\":60,\\\"str_s\\\":\\\"c\\\"}\");\n\n      //Test unlimited unsorted result. Should sort on _version_ desc\n      sParams = mapParams(CommonParams.QT, \"/sql\", \"stmt\", \"select id, field_i, str_s from collection1 where text='XXXX'\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 8);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 8);\n      assert(tuple.getLong(\"field_i\") == 60);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"id\") == 7);\n      assert(tuple.getLong(\"field_i\") == 50);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"id\") == 6);\n      assert(tuple.getLong(\"field_i\") == 40);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(3);\n      assert(tuple.getLong(\"id\") == 5);\n      assert(tuple.getLong(\"field_i\") == 30);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(4);\n      assert(tuple.getLong(\"id\") == 4);\n      assert(tuple.getLong(\"field_i\") == 11);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(5);\n      assert(tuple.getLong(\"id\") == 3);\n      assert(tuple.getLong(\"field_i\") == 20);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      tuple = tuples.get(6);\n      assert(tuple.getLong(\"id\") == 2);\n      assert(tuple.getLong(\"field_i\") == 8);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(7);\n      assert(tuple.getLong(\"id\") == 1);\n      assert(tuple.getLong(\"field_i\") == 7);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \n          \"stmt\", \"select id, field_i, str_s from collection1 where text='XXXX' order by field_i desc limit 1\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 1);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 8);\n      assert(tuple.getLong(\"field_i\") == 60);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \"stmt\", \"select id, field_i, str_s from collection1 where text='XXXX' AND id='(1 2 3)' order by field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 3);\n      assert(tuple.getLong(\"field_i\") == 20);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"id\") == 2);\n      assert(tuple.getLong(\"field_i\") == 8);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"id\") == 1);\n      assert(tuple.getLong(\"field_i\") == 7);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \n          \"stmt\", \"select id as myId, field_i as myInt, str_s as myString from collection1 where text='XXXX' AND id='(1 2 3)' order by myInt desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"myId\") == 3);\n      assert(tuple.getLong(\"myInt\") == 20);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"myId\") == 2);\n      assert(tuple.getLong(\"myInt\") == 8);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"myId\") == 1);\n      assert(tuple.getLong(\"myInt\") == 7);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select id as myId, field_i as myInt, str_s as myString from collection1 where text='XXXX' AND id='(1 2 3)' order by field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"myId\") == 3);\n      assert(tuple.getLong(\"myInt\") == 20);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"myId\") == 2);\n      assert(tuple.getLong(\"myInt\") == 8);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"myId\") == 1);\n      assert(tuple.getLong(\"myInt\") == 7);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      //Test after reload SOLR-9059//\n      Replica leader = getShardLeader(\"collection1\", \"shard1\", 30 /* timeout secs */);\n\n      // reload collection and wait to see the core report it has been reloaded\n      boolean wasReloaded = reloadCollection(leader, \"collection1\");\n      assertTrue(wasReloaded);\n\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select id as myId, field_i as myInt, str_s as myString from collection1 where text='XXXX' AND id='(1 2 3)' order by field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"myId\") == 3);\n      assert(tuple.getLong(\"myInt\") == 20);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"myId\") == 2);\n      assert(tuple.getLong(\"myInt\") == 8);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"myId\") == 1);\n      assert(tuple.getLong(\"myInt\") == 7);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      // SOLR-8845 - Test to make sure that 1 = 0 works for things like Spark SQL\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select id, field_i, str_s from collection1 where 1 = 0\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assertEquals(0, tuples.size());\n    } finally {\n      delete();\n    }\n  }\n\n","sourceOld":"  private void testBasicSelect() throws Exception {\n    try {\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexDoc(sdoc(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"7\"));\n      indexDoc(sdoc(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"8\"));\n      indexDoc(sdoc(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\"));\n      indexDoc(sdoc(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"11\"));\n      indexDoc(sdoc(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\"));\n      indexDoc(sdoc(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"40\"));\n      indexDoc(sdoc(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\"));\n      indexDoc(sdoc(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\"));\n      commit();\n\n\n      System.out.println(\"############# testBasicSelect() ############\");\n\n      SolrParams sParams = mapParams(CommonParams.QT, \"/sql\", \n          \"stmt\", \"select id, field_i, str_s from collection1 where (text='(XXXX)' OR text='XXXX') AND text='XXXX' order by field_i desc\");\n\n      SolrStream solrStream = new SolrStream(jetty.url, sParams);\n      List<Tuple> tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 8);\n      Tuple tuple;\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 8);\n      assert(tuple.getLong(\"field_i\") == 60);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"id\") == 7);\n      assert(tuple.getLong(\"field_i\") == 50);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"id\") == 6);\n      assert(tuple.getLong(\"field_i\") == 40);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(3);\n      assert(tuple.getLong(\"id\") == 5);\n      assert(tuple.getLong(\"field_i\") == 30);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(4);\n      assert(tuple.getLong(\"id\") == 3);\n      assert(tuple.getLong(\"field_i\") == 20);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      tuple = tuples.get(5);\n      assert(tuple.getLong(\"id\") == 4);\n      assert(tuple.getLong(\"field_i\") == 11);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(6);\n      assert(tuple.getLong(\"id\") == 2);\n      assert(tuple.getLong(\"field_i\") == 8);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(7);\n      assert(tuple.getLong(\"id\") == 1);\n      assert(tuple.getLong(\"field_i\") == 7);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      //Assert field order\n      assertResponseContains(clients.get(0), sParams, \"{\\\"docs\\\":[{\\\"id\\\":8,\\\"field_i\\\":60,\\\"str_s\\\":\\\"c\\\"}\");\n\n      //Test unlimited unsorted result. Should sort on _version_ desc\n      sParams = mapParams(CommonParams.QT, \"/sql\", \"stmt\", \"select id, field_i, str_s from collection1 where text='XXXX'\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 8);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 8);\n      assert(tuple.getLong(\"field_i\") == 60);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"id\") == 7);\n      assert(tuple.getLong(\"field_i\") == 50);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"id\") == 6);\n      assert(tuple.getLong(\"field_i\") == 40);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(3);\n      assert(tuple.getLong(\"id\") == 5);\n      assert(tuple.getLong(\"field_i\") == 30);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(4);\n      assert(tuple.getLong(\"id\") == 4);\n      assert(tuple.getLong(\"field_i\") == 11);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(5);\n      assert(tuple.getLong(\"id\") == 3);\n      assert(tuple.getLong(\"field_i\") == 20);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      tuple = tuples.get(6);\n      assert(tuple.getLong(\"id\") == 2);\n      assert(tuple.getLong(\"field_i\") == 8);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(7);\n      assert(tuple.getLong(\"id\") == 1);\n      assert(tuple.getLong(\"field_i\") == 7);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \n          \"stmt\", \"select id, field_i, str_s from collection1 where text='XXXX' order by field_i desc limit 1\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 1);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 8);\n      assert(tuple.getLong(\"field_i\") == 60);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \"stmt\", \"select id, field_i, str_s from collection1 where text='XXXX' AND id='(1 2 3)' order by field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 3);\n      assert(tuple.getLong(\"field_i\") == 20);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"id\") == 2);\n      assert(tuple.getLong(\"field_i\") == 8);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"id\") == 1);\n      assert(tuple.getLong(\"field_i\") == 7);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \n          \"stmt\", \"select id as myId, field_i as myInt, str_s as myString from collection1 where text='XXXX' AND id='(1 2 3)' order by myInt desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"myId\") == 3);\n      assert(tuple.getLong(\"myInt\") == 20);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"myId\") == 2);\n      assert(tuple.getLong(\"myInt\") == 8);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"myId\") == 1);\n      assert(tuple.getLong(\"myInt\") == 7);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select id as myId, field_i as myInt, str_s as myString from collection1 where text='XXXX' AND id='(1 2 3)' order by field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"myId\") == 3);\n      assert(tuple.getLong(\"myInt\") == 20);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"myId\") == 2);\n      assert(tuple.getLong(\"myInt\") == 8);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"myId\") == 1);\n      assert(tuple.getLong(\"myInt\") == 7);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      //Test after reload SOLR-9059//\n      Replica leader = getShardLeader(\"collection1\", \"shard1\", 30 /* timeout secs */);\n\n      // reload collection and wait to see the core report it has been reloaded\n      boolean wasReloaded = reloadCollection(leader, \"collection1\");\n      assertTrue(wasReloaded);\n\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select id as myId, field_i as myInt, str_s as myString from collection1 where text='XXXX' AND id='(1 2 3)' order by field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"myId\") == 3);\n      assert(tuple.getLong(\"myInt\") == 20);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"myId\") == 2);\n      assert(tuple.getLong(\"myInt\") == 8);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"myId\") == 1);\n      assert(tuple.getLong(\"myInt\") == 7);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      // SOLR-8845 - Test to make sure that 1 = 0 works for things like Spark SQL\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select id, field_i, str_s from collection1 where 1 = 0\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assertEquals(0, tuples.size());\n    } finally {\n      delete();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testBasicSelect().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testBasicSelect().mjava","sourceNew":"  private void testBasicSelect() throws Exception {\n    try {\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexDoc(sdoc(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"7\"));\n      indexDoc(sdoc(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"8\"));\n      indexDoc(sdoc(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\"));\n      indexDoc(sdoc(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"11\"));\n      indexDoc(sdoc(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\"));\n      indexDoc(sdoc(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"40\"));\n      indexDoc(sdoc(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\"));\n      indexDoc(sdoc(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\"));\n      commit();\n\n\n      System.out.println(\"############# testBasicSelect() ############\");\n\n      SolrParams sParams = mapParams(CommonParams.QT, \"/sql\", \n          \"stmt\", \"select id, field_i, str_s from collection1 where (text='(XXXX)' OR text='XXXX') AND text='XXXX' order by field_i desc\");\n\n      SolrStream solrStream = new SolrStream(jetty.url, sParams);\n      List<Tuple> tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 8);\n      Tuple tuple;\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 8);\n      assert(tuple.getLong(\"field_i\") == 60);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"id\") == 7);\n      assert(tuple.getLong(\"field_i\") == 50);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"id\") == 6);\n      assert(tuple.getLong(\"field_i\") == 40);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(3);\n      assert(tuple.getLong(\"id\") == 5);\n      assert(tuple.getLong(\"field_i\") == 30);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(4);\n      assert(tuple.getLong(\"id\") == 3);\n      assert(tuple.getLong(\"field_i\") == 20);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      tuple = tuples.get(5);\n      assert(tuple.getLong(\"id\") == 4);\n      assert(tuple.getLong(\"field_i\") == 11);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(6);\n      assert(tuple.getLong(\"id\") == 2);\n      assert(tuple.getLong(\"field_i\") == 8);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(7);\n      assert(tuple.getLong(\"id\") == 1);\n      assert(tuple.getLong(\"field_i\") == 7);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      //Assert field order\n      assertResponseContains(clients.get(0), sParams, \"{\\\"docs\\\":[{\\\"id\\\":\\\"8\\\",\\\"field_i\\\":60,\\\"str_s\\\":\\\"c\\\"}\");\n\n      //Test unlimited unsorted result. Should sort on _version_ desc\n      sParams = mapParams(CommonParams.QT, \"/sql\", \"stmt\", \"select id, field_i, str_s from collection1 where text='XXXX'\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 8);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 8);\n      assert(tuple.getLong(\"field_i\") == 60);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"id\") == 7);\n      assert(tuple.getLong(\"field_i\") == 50);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"id\") == 6);\n      assert(tuple.getLong(\"field_i\") == 40);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(3);\n      assert(tuple.getLong(\"id\") == 5);\n      assert(tuple.getLong(\"field_i\") == 30);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(4);\n      assert(tuple.getLong(\"id\") == 4);\n      assert(tuple.getLong(\"field_i\") == 11);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(5);\n      assert(tuple.getLong(\"id\") == 3);\n      assert(tuple.getLong(\"field_i\") == 20);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      tuple = tuples.get(6);\n      assert(tuple.getLong(\"id\") == 2);\n      assert(tuple.getLong(\"field_i\") == 8);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(7);\n      assert(tuple.getLong(\"id\") == 1);\n      assert(tuple.getLong(\"field_i\") == 7);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \n          \"stmt\", \"select id, field_i, str_s from collection1 where text='XXXX' order by field_i desc limit 1\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 1);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 8);\n      assert(tuple.getLong(\"field_i\") == 60);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \"stmt\", \"select id, field_i, str_s from collection1 where text='XXXX' AND id='(1 2 3)' order by field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 3);\n      assert(tuple.getLong(\"field_i\") == 20);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"id\") == 2);\n      assert(tuple.getLong(\"field_i\") == 8);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"id\") == 1);\n      assert(tuple.getLong(\"field_i\") == 7);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \n          \"stmt\", \"select id as myId, field_i as myInt, str_s as myString from collection1 where text='XXXX' AND id='(1 2 3)' order by myInt desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"myId\") == 3);\n      assert(tuple.getLong(\"myInt\") == 20);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"myId\") == 2);\n      assert(tuple.getLong(\"myInt\") == 8);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"myId\") == 1);\n      assert(tuple.getLong(\"myInt\") == 7);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select id as myId, field_i as myInt, str_s as myString from collection1 where text='XXXX' AND id='(1 2 3)' order by field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"myId\") == 3);\n      assert(tuple.getLong(\"myInt\") == 20);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"myId\") == 2);\n      assert(tuple.getLong(\"myInt\") == 8);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"myId\") == 1);\n      assert(tuple.getLong(\"myInt\") == 7);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      //Test after reload SOLR-9059//\n      Replica leader = getShardLeader(\"collection1\", \"shard1\", 30 /* timeout secs */);\n\n      // reload collection and wait to see the core report it has been reloaded\n      boolean wasReloaded = reloadCollection(leader, \"collection1\");\n      assertTrue(wasReloaded);\n\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select id as myId, field_i as myInt, str_s as myString from collection1 where text='XXXX' AND id='(1 2 3)' order by field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"myId\") == 3);\n      assert(tuple.getLong(\"myInt\") == 20);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"myId\") == 2);\n      assert(tuple.getLong(\"myInt\") == 8);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"myId\") == 1);\n      assert(tuple.getLong(\"myInt\") == 7);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      // SOLR-8845 - Test to make sure that 1 = 0 works for things like Spark SQL\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select id, field_i, str_s from collection1 where 1 = 0\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assertEquals(0, tuples.size());\n    } finally {\n      delete();\n    }\n  }\n\n","sourceOld":"  private void testBasicSelect() throws Exception {\n    try {\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexDoc(sdoc(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"7\"));\n      indexDoc(sdoc(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"8\"));\n      indexDoc(sdoc(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\"));\n      indexDoc(sdoc(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"11\"));\n      indexDoc(sdoc(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\"));\n      indexDoc(sdoc(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"40\"));\n      indexDoc(sdoc(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\"));\n      indexDoc(sdoc(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\"));\n      commit();\n\n\n      System.out.println(\"############# testBasicSelect() ############\");\n\n      SolrParams sParams = mapParams(CommonParams.QT, \"/sql\", \n          \"stmt\", \"select id, field_i, str_s from collection1 where (text='(XXXX)' OR text='XXXX') AND text='XXXX' order by field_i desc\");\n\n      SolrStream solrStream = new SolrStream(jetty.url, sParams);\n      List<Tuple> tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 8);\n      Tuple tuple;\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 8);\n      assert(tuple.getLong(\"field_i\") == 60);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"id\") == 7);\n      assert(tuple.getLong(\"field_i\") == 50);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"id\") == 6);\n      assert(tuple.getLong(\"field_i\") == 40);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(3);\n      assert(tuple.getLong(\"id\") == 5);\n      assert(tuple.getLong(\"field_i\") == 30);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(4);\n      assert(tuple.getLong(\"id\") == 3);\n      assert(tuple.getLong(\"field_i\") == 20);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      tuple = tuples.get(5);\n      assert(tuple.getLong(\"id\") == 4);\n      assert(tuple.getLong(\"field_i\") == 11);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(6);\n      assert(tuple.getLong(\"id\") == 2);\n      assert(tuple.getLong(\"field_i\") == 8);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(7);\n      assert(tuple.getLong(\"id\") == 1);\n      assert(tuple.getLong(\"field_i\") == 7);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      //Assert field order\n      assertResponseContains(clients.get(0), sParams, \"{\\\"docs\\\":[{\\\"id\\\":8,\\\"field_i\\\":60,\\\"str_s\\\":\\\"c\\\"}\");\n\n      //Test unlimited unsorted result. Should sort on _version_ desc\n      sParams = mapParams(CommonParams.QT, \"/sql\", \"stmt\", \"select id, field_i, str_s from collection1 where text='XXXX'\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 8);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 8);\n      assert(tuple.getLong(\"field_i\") == 60);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"id\") == 7);\n      assert(tuple.getLong(\"field_i\") == 50);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"id\") == 6);\n      assert(tuple.getLong(\"field_i\") == 40);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(3);\n      assert(tuple.getLong(\"id\") == 5);\n      assert(tuple.getLong(\"field_i\") == 30);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(4);\n      assert(tuple.getLong(\"id\") == 4);\n      assert(tuple.getLong(\"field_i\") == 11);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(5);\n      assert(tuple.getLong(\"id\") == 3);\n      assert(tuple.getLong(\"field_i\") == 20);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      tuple = tuples.get(6);\n      assert(tuple.getLong(\"id\") == 2);\n      assert(tuple.getLong(\"field_i\") == 8);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(7);\n      assert(tuple.getLong(\"id\") == 1);\n      assert(tuple.getLong(\"field_i\") == 7);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \n          \"stmt\", \"select id, field_i, str_s from collection1 where text='XXXX' order by field_i desc limit 1\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 1);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 8);\n      assert(tuple.getLong(\"field_i\") == 60);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \"stmt\", \"select id, field_i, str_s from collection1 where text='XXXX' AND id='(1 2 3)' order by field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 3);\n      assert(tuple.getLong(\"field_i\") == 20);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"id\") == 2);\n      assert(tuple.getLong(\"field_i\") == 8);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"id\") == 1);\n      assert(tuple.getLong(\"field_i\") == 7);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \n          \"stmt\", \"select id as myId, field_i as myInt, str_s as myString from collection1 where text='XXXX' AND id='(1 2 3)' order by myInt desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"myId\") == 3);\n      assert(tuple.getLong(\"myInt\") == 20);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"myId\") == 2);\n      assert(tuple.getLong(\"myInt\") == 8);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"myId\") == 1);\n      assert(tuple.getLong(\"myInt\") == 7);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select id as myId, field_i as myInt, str_s as myString from collection1 where text='XXXX' AND id='(1 2 3)' order by field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"myId\") == 3);\n      assert(tuple.getLong(\"myInt\") == 20);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"myId\") == 2);\n      assert(tuple.getLong(\"myInt\") == 8);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"myId\") == 1);\n      assert(tuple.getLong(\"myInt\") == 7);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      //Test after reload SOLR-9059//\n      Replica leader = getShardLeader(\"collection1\", \"shard1\", 30 /* timeout secs */);\n\n      // reload collection and wait to see the core report it has been reloaded\n      boolean wasReloaded = reloadCollection(leader, \"collection1\");\n      assertTrue(wasReloaded);\n\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select id as myId, field_i as myInt, str_s as myString from collection1 where text='XXXX' AND id='(1 2 3)' order by field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"myId\") == 3);\n      assert(tuple.getLong(\"myInt\") == 20);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"myId\") == 2);\n      assert(tuple.getLong(\"myInt\") == 8);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"myId\") == 1);\n      assert(tuple.getLong(\"myInt\") == 7);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      // SOLR-8845 - Test to make sure that 1 = 0 works for things like Spark SQL\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select id, field_i, str_s from collection1 where 1 = 0\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assertEquals(0, tuples.size());\n    } finally {\n      delete();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c52eabf9563c6ddad6c19e4af424531007b0910c","date":1533859070,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testBasicSelect().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testBasicSelect().mjava","sourceNew":"  private void testBasicSelect() throws Exception {\n    try {\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexDoc(sdoc(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"7\", \"field_i_p\", \"7\",\n          \"field_f_p\", \"7.5\", \"field_d_p\", \"7.5\", \"field_l_p\", \"7\"));\n      indexDoc(sdoc(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"8\", \"field_i_p\", \"8\",\n          \"field_f_p\", \"8.5\", \"field_d_p\", \"8.5\",\"field_l_p\", \"8\" ));\n      indexDoc(sdoc(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\", \"field_i_p\", \"20\",\n          \"field_f_p\", \"20.5\", \"field_d_p\", \"20.5\", \"field_l_p\", \"20\"));\n      indexDoc(sdoc(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"11\", \"field_i_p\", \"11\",\n          \"field_f_p\", \"11.5\", \"field_d_p\", \"11.5\", \"field_l_p\", \"11\"));\n      indexDoc(sdoc(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\",\"field_i_p\", \"30\", \"\" +\n          \"field_f_p\", \"30.5\", \"field_d_p\", \"30.5\", \"field_l_p\", \"30\"));\n      indexDoc(sdoc(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"40\", \"field_i_p\", \"40\",\n          \"field_f_p\", \"40.5\", \"field_d_p\", \"40.5\", \"field_l_p\", \"40\"));\n      indexDoc(sdoc(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\", \"field_i_p\", \"50\",\n          \"field_f_p\", \"50.5\", \"field_d_p\", \"50.5\", \"field_l_p\", \"50\"));\n      indexDoc(sdoc(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\", \"field_i_p\", \"60\",\n          \"field_f_p\", \"60.5\", \"field_d_p\", \"60.5\", \"field_l_p\", \"60\"));\n      commit();\n\n\n      System.out.println(\"############# testBasicSelect() ############\");\n\n      SolrParams sParams = mapParams(CommonParams.QT, \"/sql\", \n          \"stmt\", \"select id, field_i, str_s, field_i_p, field_f_p, field_d_p, field_l_p from collection1 where (text='(XXXX)' OR text='XXXX') AND text='XXXX' order by field_i desc\");\n\n      SolrStream solrStream = new SolrStream(jetty.url, sParams);\n      List<Tuple> tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 8);\n      Tuple tuple;\n\n      tuple = tuples.get(0);\n      assertEquals(tuple.getLong(\"id\").longValue(),8);\n      assertEquals(tuple.getLong(\"field_i\").longValue(), 60);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assertEquals(tuple.getLong(\"field_i_p\").longValue(), 60L);\n      assertEquals(tuple.getDouble(\"field_f_p\"), 60.5, 0.0);\n      assertEquals(tuple.getDouble(\"field_d_p\"), 60.5, 0.0);\n      assertEquals(tuple.getLong(\"field_l_p\").longValue(), 60);\n\n\n\n\n      tuple = tuples.get(1);\n      assertEquals(tuple.getLong(\"id\").longValue(), 7);\n      assertEquals(tuple.getLong(\"field_i\").longValue(), 50);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assertEquals(tuple.getLong(\"field_i_p\").longValue(), 50);\n      assertEquals(tuple.getDouble(\"field_f_p\"), 50.5, 0.0);\n      assertEquals(tuple.getDouble(\"field_d_p\"), 50.5, 0.0);\n      assertEquals(tuple.getLong(\"field_l_p\").longValue(), 50);\n\n\n\n\n      tuple = tuples.get(2);\n      assertEquals(tuple.getLong(\"id\").longValue(),6);\n      assertEquals(tuple.getLong(\"field_i\").longValue(), 40);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assertEquals(tuple.getLong(\"field_i_p\").longValue(), 40);\n      assertEquals(tuple.getDouble(\"field_f_p\"), 40.5, 0.0);\n      assertEquals(tuple.getDouble(\"field_d_p\"), 40.5, 0.0);\n      assertEquals(tuple.getLong(\"field_l_p\").longValue(), 40);\n\n\n\n\n\n      tuple = tuples.get(3);\n      assertEquals(tuple.getLong(\"id\").longValue(), 5);\n      assertEquals(tuple.getLong(\"field_i\").longValue(), 30);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assertEquals(tuple.getLong(\"field_i_p\").longValue(), 30);\n      assertEquals(tuple.getDouble(\"field_f_p\"), 30.5, 0.0);\n      assertEquals(tuple.getDouble(\"field_d_p\"), 30.5, 0.0);\n      assertEquals(tuple.getLong(\"field_l_p\").longValue(), 30);\n\n\n\n\n      tuple = tuples.get(4);\n      assertEquals(tuple.getLong(\"id\").longValue(),3);\n      assertEquals(tuple.getLong(\"field_i\").longValue(), 20);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assertEquals(tuple.getLong(\"field_i_p\").longValue(), 20);\n      assertEquals(tuple.getDouble(\"field_f_p\"), 20.5, 0.0);\n      assertEquals(tuple.getDouble(\"field_d_p\"), 20.5, 0.0);\n      assertEquals(tuple.getLong(\"field_l_p\").longValue(), 20);\n\n\n\n\n      tuple = tuples.get(5);\n      assertEquals(tuple.getLong(\"id\").longValue(), 4);\n      assertEquals(tuple.getLong(\"field_i\").longValue(), 11);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assertEquals(tuple.getLong(\"field_i_p\").longValue(), 11);\n      assertEquals(tuple.getDouble(\"field_f_p\"), 11.5, 0.0);\n      assertEquals(tuple.getDouble(\"field_d_p\"), 11.5, 0.0);\n      assertEquals(tuple.getLong(\"field_l_p\").longValue(), 11);\n\n\n\n\n      tuple = tuples.get(6);\n      assertEquals(tuple.getLong(\"id\").longValue(), 2);\n      assertEquals(tuple.getLong(\"field_i\").longValue(), 8);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assertEquals(tuple.getLong(\"field_i_p\").longValue(), 8);\n      assertEquals(tuple.getDouble(\"field_f_p\"), 8.5, 0.0);\n      assertEquals(tuple.getDouble(\"field_d_p\"), 8.5, 0.0);\n      assertEquals(tuple.getLong(\"field_l_p\").longValue(), 8);\n\n\n\n\n      tuple = tuples.get(7);\n      assertEquals(tuple.getLong(\"id\").longValue(), 1);\n      assertEquals(tuple.getLong(\"field_i\").longValue(), 7);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assertEquals(tuple.getLong(\"field_i_p\").longValue(), 7);\n      assertEquals(tuple.getDouble(\"field_f_p\"), 7.5, 0.0);\n      assertEquals(tuple.getDouble(\"field_d_p\"), 7.5, 0.0);\n      assertEquals(tuple.getLong(\"field_l_p\").longValue(), 7);\n\n\n\n      //Assert field order\n      assertResponseContains(clients.get(0), sParams, \"{\\\"docs\\\":[{\\\"id\\\":\\\"8\\\",\\\"field_i\\\":60,\\\"str_s\\\":\\\"c\\\",\\\"field_i_p\\\":60,\\\"field_f_p\\\":60.5,\\\"field_d_p\\\":60.5,\\\"field_l_p\\\":60}\");\n\n      //Test unlimited unsorted result. Should sort on _version_ desc\n      sParams = mapParams(CommonParams.QT, \"/sql\", \"stmt\", \"select id, field_i, str_s from collection1 where text='XXXX'\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 8);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 8);\n      assert(tuple.getLong(\"field_i\") == 60);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"id\") == 7);\n      assert(tuple.getLong(\"field_i\") == 50);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"id\") == 6);\n      assert(tuple.getLong(\"field_i\") == 40);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(3);\n      assert(tuple.getLong(\"id\") == 5);\n      assert(tuple.getLong(\"field_i\") == 30);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(4);\n      assert(tuple.getLong(\"id\") == 4);\n      assert(tuple.getLong(\"field_i\") == 11);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(5);\n      assert(tuple.getLong(\"id\") == 3);\n      assert(tuple.getLong(\"field_i\") == 20);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      tuple = tuples.get(6);\n      assert(tuple.getLong(\"id\") == 2);\n      assert(tuple.getLong(\"field_i\") == 8);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(7);\n      assert(tuple.getLong(\"id\") == 1);\n      assert(tuple.getLong(\"field_i\") == 7);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \n          \"stmt\", \"select id, field_i, str_s from collection1 where text='XXXX' order by field_i desc limit 1\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 1);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 8);\n      assert(tuple.getLong(\"field_i\") == 60);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \"stmt\", \"select id, field_i, str_s from collection1 where text='XXXX' AND id='(1 2 3)' order by field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 3);\n      assert(tuple.getLong(\"field_i\") == 20);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"id\") == 2);\n      assert(tuple.getLong(\"field_i\") == 8);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"id\") == 1);\n      assert(tuple.getLong(\"field_i\") == 7);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \n          \"stmt\", \"select id as myId, field_i as myInt, str_s as myString from collection1 where text='XXXX' AND id='(1 2 3)' order by myInt desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"myId\") == 3);\n      assert(tuple.getLong(\"myInt\") == 20);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"myId\") == 2);\n      assert(tuple.getLong(\"myInt\") == 8);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"myId\") == 1);\n      assert(tuple.getLong(\"myInt\") == 7);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select id as myId, field_i as myInt, str_s as myString from collection1 where text='XXXX' AND id='(1 2 3)' order by field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"myId\") == 3);\n      assert(tuple.getLong(\"myInt\") == 20);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"myId\") == 2);\n      assert(tuple.getLong(\"myInt\") == 8);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"myId\") == 1);\n      assert(tuple.getLong(\"myInt\") == 7);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      //Test after reload SOLR-9059//\n      Replica leader = getShardLeader(\"collection1\", \"shard1\", 30 /* timeout secs */);\n\n      // reload collection and wait to see the core report it has been reloaded\n      boolean wasReloaded = reloadCollection(leader, \"collection1\");\n      assertTrue(wasReloaded);\n\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select id as myId, field_i as myInt, str_s as myString from collection1 where text='XXXX' AND id='(1 2 3)' order by field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"myId\") == 3);\n      assert(tuple.getLong(\"myInt\") == 20);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"myId\") == 2);\n      assert(tuple.getLong(\"myInt\") == 8);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"myId\") == 1);\n      assert(tuple.getLong(\"myInt\") == 7);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      // SOLR-8845 - Test to make sure that 1 = 0 works for things like Spark SQL\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select id, field_i, str_s from collection1 where 1 = 0\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assertEquals(0, tuples.size());\n    } finally {\n      delete();\n    }\n  }\n\n","sourceOld":"  private void testBasicSelect() throws Exception {\n    try {\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexDoc(sdoc(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"7\"));\n      indexDoc(sdoc(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"8\"));\n      indexDoc(sdoc(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\"));\n      indexDoc(sdoc(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"11\"));\n      indexDoc(sdoc(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\"));\n      indexDoc(sdoc(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"40\"));\n      indexDoc(sdoc(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\"));\n      indexDoc(sdoc(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\"));\n      commit();\n\n\n      System.out.println(\"############# testBasicSelect() ############\");\n\n      SolrParams sParams = mapParams(CommonParams.QT, \"/sql\", \n          \"stmt\", \"select id, field_i, str_s from collection1 where (text='(XXXX)' OR text='XXXX') AND text='XXXX' order by field_i desc\");\n\n      SolrStream solrStream = new SolrStream(jetty.url, sParams);\n      List<Tuple> tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 8);\n      Tuple tuple;\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 8);\n      assert(tuple.getLong(\"field_i\") == 60);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"id\") == 7);\n      assert(tuple.getLong(\"field_i\") == 50);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"id\") == 6);\n      assert(tuple.getLong(\"field_i\") == 40);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(3);\n      assert(tuple.getLong(\"id\") == 5);\n      assert(tuple.getLong(\"field_i\") == 30);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(4);\n      assert(tuple.getLong(\"id\") == 3);\n      assert(tuple.getLong(\"field_i\") == 20);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      tuple = tuples.get(5);\n      assert(tuple.getLong(\"id\") == 4);\n      assert(tuple.getLong(\"field_i\") == 11);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(6);\n      assert(tuple.getLong(\"id\") == 2);\n      assert(tuple.getLong(\"field_i\") == 8);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(7);\n      assert(tuple.getLong(\"id\") == 1);\n      assert(tuple.getLong(\"field_i\") == 7);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      //Assert field order\n      assertResponseContains(clients.get(0), sParams, \"{\\\"docs\\\":[{\\\"id\\\":\\\"8\\\",\\\"field_i\\\":60,\\\"str_s\\\":\\\"c\\\"}\");\n\n      //Test unlimited unsorted result. Should sort on _version_ desc\n      sParams = mapParams(CommonParams.QT, \"/sql\", \"stmt\", \"select id, field_i, str_s from collection1 where text='XXXX'\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 8);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 8);\n      assert(tuple.getLong(\"field_i\") == 60);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"id\") == 7);\n      assert(tuple.getLong(\"field_i\") == 50);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"id\") == 6);\n      assert(tuple.getLong(\"field_i\") == 40);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(3);\n      assert(tuple.getLong(\"id\") == 5);\n      assert(tuple.getLong(\"field_i\") == 30);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(4);\n      assert(tuple.getLong(\"id\") == 4);\n      assert(tuple.getLong(\"field_i\") == 11);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(5);\n      assert(tuple.getLong(\"id\") == 3);\n      assert(tuple.getLong(\"field_i\") == 20);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      tuple = tuples.get(6);\n      assert(tuple.getLong(\"id\") == 2);\n      assert(tuple.getLong(\"field_i\") == 8);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(7);\n      assert(tuple.getLong(\"id\") == 1);\n      assert(tuple.getLong(\"field_i\") == 7);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \n          \"stmt\", \"select id, field_i, str_s from collection1 where text='XXXX' order by field_i desc limit 1\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 1);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 8);\n      assert(tuple.getLong(\"field_i\") == 60);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \"stmt\", \"select id, field_i, str_s from collection1 where text='XXXX' AND id='(1 2 3)' order by field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 3);\n      assert(tuple.getLong(\"field_i\") == 20);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"id\") == 2);\n      assert(tuple.getLong(\"field_i\") == 8);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"id\") == 1);\n      assert(tuple.getLong(\"field_i\") == 7);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \n          \"stmt\", \"select id as myId, field_i as myInt, str_s as myString from collection1 where text='XXXX' AND id='(1 2 3)' order by myInt desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"myId\") == 3);\n      assert(tuple.getLong(\"myInt\") == 20);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"myId\") == 2);\n      assert(tuple.getLong(\"myInt\") == 8);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"myId\") == 1);\n      assert(tuple.getLong(\"myInt\") == 7);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select id as myId, field_i as myInt, str_s as myString from collection1 where text='XXXX' AND id='(1 2 3)' order by field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"myId\") == 3);\n      assert(tuple.getLong(\"myInt\") == 20);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"myId\") == 2);\n      assert(tuple.getLong(\"myInt\") == 8);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"myId\") == 1);\n      assert(tuple.getLong(\"myInt\") == 7);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      //Test after reload SOLR-9059//\n      Replica leader = getShardLeader(\"collection1\", \"shard1\", 30 /* timeout secs */);\n\n      // reload collection and wait to see the core report it has been reloaded\n      boolean wasReloaded = reloadCollection(leader, \"collection1\");\n      assertTrue(wasReloaded);\n\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select id as myId, field_i as myInt, str_s as myString from collection1 where text='XXXX' AND id='(1 2 3)' order by field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"myId\") == 3);\n      assert(tuple.getLong(\"myInt\") == 20);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"myId\") == 2);\n      assert(tuple.getLong(\"myInt\") == 8);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"myId\") == 1);\n      assert(tuple.getLong(\"myInt\") == 7);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      // SOLR-8845 - Test to make sure that 1 = 0 works for things like Spark SQL\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select id, field_i, str_s from collection1 where 1 = 0\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assertEquals(0, tuples.size());\n    } finally {\n      delete();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c58a62203315881cce5089ef67ffee6b8a988a75","date":1544601986,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testBasicSelect().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testBasicSelect().mjava","sourceNew":"  private void testBasicSelect() throws Exception {\n\n    CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n    del(\"*:*\");\n\n    commit();\n\n    indexDoc(sdoc(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"7\", \"field_i_p\", \"7\",\n        \"field_f_p\", \"7.5\", \"field_d_p\", \"7.5\", \"field_l_p\", \"7\"));\n    indexDoc(sdoc(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"8\", \"field_i_p\", \"8\",\n        \"field_f_p\", \"8.5\", \"field_d_p\", \"8.5\", \"field_l_p\", \"8\"));\n    indexDoc(sdoc(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\", \"field_i_p\", \"20\",\n        \"field_f_p\", \"20.5\", \"field_d_p\", \"20.5\", \"field_l_p\", \"20\"));\n    indexDoc(sdoc(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"11\", \"field_i_p\", \"11\",\n        \"field_f_p\", \"11.5\", \"field_d_p\", \"11.5\", \"field_l_p\", \"11\"));\n    indexDoc(sdoc(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\", \"field_i_p\", \"30\", \"\" +\n        \"field_f_p\", \"30.5\", \"field_d_p\", \"30.5\", \"field_l_p\", \"30\"));\n    indexDoc(sdoc(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"40\", \"field_i_p\", \"40\",\n        \"field_f_p\", \"40.5\", \"field_d_p\", \"40.5\", \"field_l_p\", \"40\"));\n    indexDoc(sdoc(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\", \"field_i_p\", \"50\",\n        \"field_f_p\", \"50.5\", \"field_d_p\", \"50.5\", \"field_l_p\", \"50\"));\n    indexDoc(sdoc(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\", \"field_i_p\", \"60\",\n        \"field_f_p\", \"60.5\", \"field_d_p\", \"60.5\", \"field_l_p\", \"60\"));\n    commit();\n\n    System.out.println(\"############# testBasicSelect() ############\");\n\n    SolrParams sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\",\n        \"select id, field_i, str_s, field_i_p, field_f_p, field_d_p, field_l_p from collection1 where (text='(XXXX)' OR text='XXXX') AND text='XXXX' order by field_i desc\");\n\n    SolrStream solrStream = new SolrStream(jetty.url, sParams);\n    List<Tuple> tuples = getTuples(solrStream);\n\n    assert (tuples.size() == 8);\n    Tuple tuple;\n\n    tuple = tuples.get(0);\n    assertEquals(tuple.getLong(\"id\").longValue(), 8);\n    assertEquals(tuple.getLong(\"field_i\").longValue(), 60);\n    assert (tuple.get(\"str_s\").equals(\"c\"));\n    assertEquals(tuple.getLong(\"field_i_p\").longValue(), 60L);\n    assertEquals(tuple.getDouble(\"field_f_p\"), 60.5, 0.0);\n    assertEquals(tuple.getDouble(\"field_d_p\"), 60.5, 0.0);\n    assertEquals(tuple.getLong(\"field_l_p\").longValue(), 60);\n\n    tuple = tuples.get(1);\n    assertEquals(tuple.getLong(\"id\").longValue(), 7);\n    assertEquals(tuple.getLong(\"field_i\").longValue(), 50);\n    assert (tuple.get(\"str_s\").equals(\"c\"));\n    assertEquals(tuple.getLong(\"field_i_p\").longValue(), 50);\n    assertEquals(tuple.getDouble(\"field_f_p\"), 50.5, 0.0);\n    assertEquals(tuple.getDouble(\"field_d_p\"), 50.5, 0.0);\n    assertEquals(tuple.getLong(\"field_l_p\").longValue(), 50);\n\n    tuple = tuples.get(2);\n    assertEquals(tuple.getLong(\"id\").longValue(), 6);\n    assertEquals(tuple.getLong(\"field_i\").longValue(), 40);\n    assert (tuple.get(\"str_s\").equals(\"c\"));\n    assertEquals(tuple.getLong(\"field_i_p\").longValue(), 40);\n    assertEquals(tuple.getDouble(\"field_f_p\"), 40.5, 0.0);\n    assertEquals(tuple.getDouble(\"field_d_p\"), 40.5, 0.0);\n    assertEquals(tuple.getLong(\"field_l_p\").longValue(), 40);\n\n    tuple = tuples.get(3);\n    assertEquals(tuple.getLong(\"id\").longValue(), 5);\n    assertEquals(tuple.getLong(\"field_i\").longValue(), 30);\n    assert (tuple.get(\"str_s\").equals(\"c\"));\n    assertEquals(tuple.getLong(\"field_i_p\").longValue(), 30);\n    assertEquals(tuple.getDouble(\"field_f_p\"), 30.5, 0.0);\n    assertEquals(tuple.getDouble(\"field_d_p\"), 30.5, 0.0);\n    assertEquals(tuple.getLong(\"field_l_p\").longValue(), 30);\n\n    tuple = tuples.get(4);\n    assertEquals(tuple.getLong(\"id\").longValue(), 3);\n    assertEquals(tuple.getLong(\"field_i\").longValue(), 20);\n    assert (tuple.get(\"str_s\").equals(\"a\"));\n    assertEquals(tuple.getLong(\"field_i_p\").longValue(), 20);\n    assertEquals(tuple.getDouble(\"field_f_p\"), 20.5, 0.0);\n    assertEquals(tuple.getDouble(\"field_d_p\"), 20.5, 0.0);\n    assertEquals(tuple.getLong(\"field_l_p\").longValue(), 20);\n\n    tuple = tuples.get(5);\n    assertEquals(tuple.getLong(\"id\").longValue(), 4);\n    assertEquals(tuple.getLong(\"field_i\").longValue(), 11);\n    assert (tuple.get(\"str_s\").equals(\"b\"));\n    assertEquals(tuple.getLong(\"field_i_p\").longValue(), 11);\n    assertEquals(tuple.getDouble(\"field_f_p\"), 11.5, 0.0);\n    assertEquals(tuple.getDouble(\"field_d_p\"), 11.5, 0.0);\n    assertEquals(tuple.getLong(\"field_l_p\").longValue(), 11);\n\n    tuple = tuples.get(6);\n    assertEquals(tuple.getLong(\"id\").longValue(), 2);\n    assertEquals(tuple.getLong(\"field_i\").longValue(), 8);\n    assert (tuple.get(\"str_s\").equals(\"b\"));\n    assertEquals(tuple.getLong(\"field_i_p\").longValue(), 8);\n    assertEquals(tuple.getDouble(\"field_f_p\"), 8.5, 0.0);\n    assertEquals(tuple.getDouble(\"field_d_p\"), 8.5, 0.0);\n    assertEquals(tuple.getLong(\"field_l_p\").longValue(), 8);\n\n    tuple = tuples.get(7);\n    assertEquals(tuple.getLong(\"id\").longValue(), 1);\n    assertEquals(tuple.getLong(\"field_i\").longValue(), 7);\n    assert (tuple.get(\"str_s\").equals(\"a\"));\n    assertEquals(tuple.getLong(\"field_i_p\").longValue(), 7);\n    assertEquals(tuple.getDouble(\"field_f_p\"), 7.5, 0.0);\n    assertEquals(tuple.getDouble(\"field_d_p\"), 7.5, 0.0);\n    assertEquals(tuple.getLong(\"field_l_p\").longValue(), 7);\n\n    // Assert field order\n    assertResponseContains(clients.get(0), sParams,\n        \"{\\\"docs\\\":[{\\\"id\\\":\\\"8\\\",\\\"field_i\\\":60,\\\"str_s\\\":\\\"c\\\",\\\"field_i_p\\\":60,\\\"field_f_p\\\":60.5,\\\"field_d_p\\\":60.5,\\\"field_l_p\\\":60}\");\n\n    // Test unlimited unsorted result. Should sort on _version_ desc\n    sParams = mapParams(CommonParams.QT, \"/sql\", \"stmt\",\n        \"select id, field_i, str_s from collection1 where text='XXXX'\");\n\n    solrStream = new SolrStream(jetty.url, sParams);\n    tuples = getTuples(solrStream);\n\n    assert (tuples.size() == 8);\n\n    tuple = tuples.get(0);\n    assert (tuple.getLong(\"id\") == 8);\n    assert (tuple.getLong(\"field_i\") == 60);\n    assert (tuple.get(\"str_s\").equals(\"c\"));\n\n    tuple = tuples.get(1);\n    assert (tuple.getLong(\"id\") == 7);\n    assert (tuple.getLong(\"field_i\") == 50);\n    assert (tuple.get(\"str_s\").equals(\"c\"));\n\n    tuple = tuples.get(2);\n    assert (tuple.getLong(\"id\") == 6);\n    assert (tuple.getLong(\"field_i\") == 40);\n    assert (tuple.get(\"str_s\").equals(\"c\"));\n\n    tuple = tuples.get(3);\n    assert (tuple.getLong(\"id\") == 5);\n    assert (tuple.getLong(\"field_i\") == 30);\n    assert (tuple.get(\"str_s\").equals(\"c\"));\n\n    tuple = tuples.get(4);\n    assert (tuple.getLong(\"id\") == 4);\n    assert (tuple.getLong(\"field_i\") == 11);\n    assert (tuple.get(\"str_s\").equals(\"b\"));\n\n    tuple = tuples.get(5);\n    assert (tuple.getLong(\"id\") == 3);\n    assert (tuple.getLong(\"field_i\") == 20);\n    assert (tuple.get(\"str_s\").equals(\"a\"));\n\n    tuple = tuples.get(6);\n    assert (tuple.getLong(\"id\") == 2);\n    assert (tuple.getLong(\"field_i\") == 8);\n    assert (tuple.get(\"str_s\").equals(\"b\"));\n\n    tuple = tuples.get(7);\n    assert (tuple.getLong(\"id\") == 1);\n    assert (tuple.getLong(\"field_i\") == 7);\n    assert (tuple.get(\"str_s\").equals(\"a\"));\n\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select id, field_i, str_s from collection1 where text='XXXX' order by field_i desc limit 1\");\n\n    solrStream = new SolrStream(jetty.url, sParams);\n    tuples = getTuples(solrStream);\n\n    assert (tuples.size() == 1);\n\n    tuple = tuples.get(0);\n    assert (tuple.getLong(\"id\") == 8);\n    assert (tuple.getLong(\"field_i\") == 60);\n    assert (tuple.get(\"str_s\").equals(\"c\"));\n\n    sParams = mapParams(CommonParams.QT, \"/sql\", \"stmt\",\n        \"select id, field_i, str_s from collection1 where text='XXXX' AND id='(1 2 3)' order by field_i desc\");\n\n    solrStream = new SolrStream(jetty.url, sParams);\n    tuples = getTuples(solrStream);\n\n    assert (tuples.size() == 3);\n\n    tuple = tuples.get(0);\n    assert (tuple.getLong(\"id\") == 3);\n    assert (tuple.getLong(\"field_i\") == 20);\n    assert (tuple.get(\"str_s\").equals(\"a\"));\n\n    tuple = tuples.get(1);\n    assert (tuple.getLong(\"id\") == 2);\n    assert (tuple.getLong(\"field_i\") == 8);\n    assert (tuple.get(\"str_s\").equals(\"b\"));\n\n    tuple = tuples.get(2);\n    assert (tuple.getLong(\"id\") == 1);\n    assert (tuple.getLong(\"field_i\") == 7);\n    assert (tuple.get(\"str_s\").equals(\"a\"));\n\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\",\n        \"select id as myId, field_i as myInt, str_s as myString from collection1 where text='XXXX' AND id='(1 2 3)' order by myInt desc\");\n\n    solrStream = new SolrStream(jetty.url, sParams);\n    tuples = getTuples(solrStream);\n\n    assert (tuples.size() == 3);\n\n    tuple = tuples.get(0);\n    assert (tuple.getLong(\"myId\") == 3);\n    assert (tuple.getLong(\"myInt\") == 20);\n    assert (tuple.get(\"myString\").equals(\"a\"));\n\n    tuple = tuples.get(1);\n    assert (tuple.getLong(\"myId\") == 2);\n    assert (tuple.getLong(\"myInt\") == 8);\n    assert (tuple.get(\"myString\").equals(\"b\"));\n\n    tuple = tuples.get(2);\n    assert (tuple.getLong(\"myId\") == 1);\n    assert (tuple.getLong(\"myInt\") == 7);\n    assert (tuple.get(\"myString\").equals(\"a\"));\n\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\",\n        \"select id as myId, field_i as myInt, str_s as myString from collection1 where text='XXXX' AND id='(1 2 3)' order by field_i desc\");\n\n    solrStream = new SolrStream(jetty.url, sParams);\n    tuples = getTuples(solrStream);\n\n    assert (tuples.size() == 3);\n\n    tuple = tuples.get(0);\n    assert (tuple.getLong(\"myId\") == 3);\n    assert (tuple.getLong(\"myInt\") == 20);\n    assert (tuple.get(\"myString\").equals(\"a\"));\n\n    tuple = tuples.get(1);\n    assert (tuple.getLong(\"myId\") == 2);\n    assert (tuple.getLong(\"myInt\") == 8);\n    assert (tuple.get(\"myString\").equals(\"b\"));\n\n    tuple = tuples.get(2);\n    assert (tuple.getLong(\"myId\") == 1);\n    assert (tuple.getLong(\"myInt\") == 7);\n    assert (tuple.get(\"myString\").equals(\"a\"));\n\n    // Test after reload SOLR-9059//\n    Replica leader = getShardLeader(\"collection1\", \"shard1\", 30 /* timeout secs */);\n\n    // reload collection and wait to see the core report it has been reloaded\n    boolean wasReloaded = reloadCollection(leader, \"collection1\");\n    assertTrue(wasReloaded);\n\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\",\n        \"select id as myId, field_i as myInt, str_s as myString from collection1 where text='XXXX' AND id='(1 2 3)' order by field_i desc\");\n\n    solrStream = new SolrStream(jetty.url, sParams);\n    tuples = getTuples(solrStream);\n\n    assert (tuples.size() == 3);\n\n    tuple = tuples.get(0);\n    assert (tuple.getLong(\"myId\") == 3);\n    assert (tuple.getLong(\"myInt\") == 20);\n    assert (tuple.get(\"myString\").equals(\"a\"));\n\n    tuple = tuples.get(1);\n    assert (tuple.getLong(\"myId\") == 2);\n    assert (tuple.getLong(\"myInt\") == 8);\n    assert (tuple.get(\"myString\").equals(\"b\"));\n\n    tuple = tuples.get(2);\n    assert (tuple.getLong(\"myId\") == 1);\n    assert (tuple.getLong(\"myInt\") == 7);\n    assert (tuple.get(\"myString\").equals(\"a\"));\n\n    // SOLR-8845 - Test to make sure that 1 = 0 works for things like Spark SQL\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select id, field_i, str_s from collection1 where 1 = 0\");\n\n    solrStream = new SolrStream(jetty.url, sParams);\n    tuples = getTuples(solrStream);\n\n    assertEquals(0, tuples.size());\n\n  }\n\n","sourceOld":"  private void testBasicSelect() throws Exception {\n    try {\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexDoc(sdoc(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"7\", \"field_i_p\", \"7\",\n          \"field_f_p\", \"7.5\", \"field_d_p\", \"7.5\", \"field_l_p\", \"7\"));\n      indexDoc(sdoc(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"8\", \"field_i_p\", \"8\",\n          \"field_f_p\", \"8.5\", \"field_d_p\", \"8.5\",\"field_l_p\", \"8\" ));\n      indexDoc(sdoc(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\", \"field_i_p\", \"20\",\n          \"field_f_p\", \"20.5\", \"field_d_p\", \"20.5\", \"field_l_p\", \"20\"));\n      indexDoc(sdoc(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"11\", \"field_i_p\", \"11\",\n          \"field_f_p\", \"11.5\", \"field_d_p\", \"11.5\", \"field_l_p\", \"11\"));\n      indexDoc(sdoc(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\",\"field_i_p\", \"30\", \"\" +\n          \"field_f_p\", \"30.5\", \"field_d_p\", \"30.5\", \"field_l_p\", \"30\"));\n      indexDoc(sdoc(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"40\", \"field_i_p\", \"40\",\n          \"field_f_p\", \"40.5\", \"field_d_p\", \"40.5\", \"field_l_p\", \"40\"));\n      indexDoc(sdoc(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\", \"field_i_p\", \"50\",\n          \"field_f_p\", \"50.5\", \"field_d_p\", \"50.5\", \"field_l_p\", \"50\"));\n      indexDoc(sdoc(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\", \"field_i_p\", \"60\",\n          \"field_f_p\", \"60.5\", \"field_d_p\", \"60.5\", \"field_l_p\", \"60\"));\n      commit();\n\n\n      System.out.println(\"############# testBasicSelect() ############\");\n\n      SolrParams sParams = mapParams(CommonParams.QT, \"/sql\", \n          \"stmt\", \"select id, field_i, str_s, field_i_p, field_f_p, field_d_p, field_l_p from collection1 where (text='(XXXX)' OR text='XXXX') AND text='XXXX' order by field_i desc\");\n\n      SolrStream solrStream = new SolrStream(jetty.url, sParams);\n      List<Tuple> tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 8);\n      Tuple tuple;\n\n      tuple = tuples.get(0);\n      assertEquals(tuple.getLong(\"id\").longValue(),8);\n      assertEquals(tuple.getLong(\"field_i\").longValue(), 60);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assertEquals(tuple.getLong(\"field_i_p\").longValue(), 60L);\n      assertEquals(tuple.getDouble(\"field_f_p\"), 60.5, 0.0);\n      assertEquals(tuple.getDouble(\"field_d_p\"), 60.5, 0.0);\n      assertEquals(tuple.getLong(\"field_l_p\").longValue(), 60);\n\n\n\n\n      tuple = tuples.get(1);\n      assertEquals(tuple.getLong(\"id\").longValue(), 7);\n      assertEquals(tuple.getLong(\"field_i\").longValue(), 50);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assertEquals(tuple.getLong(\"field_i_p\").longValue(), 50);\n      assertEquals(tuple.getDouble(\"field_f_p\"), 50.5, 0.0);\n      assertEquals(tuple.getDouble(\"field_d_p\"), 50.5, 0.0);\n      assertEquals(tuple.getLong(\"field_l_p\").longValue(), 50);\n\n\n\n\n      tuple = tuples.get(2);\n      assertEquals(tuple.getLong(\"id\").longValue(),6);\n      assertEquals(tuple.getLong(\"field_i\").longValue(), 40);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assertEquals(tuple.getLong(\"field_i_p\").longValue(), 40);\n      assertEquals(tuple.getDouble(\"field_f_p\"), 40.5, 0.0);\n      assertEquals(tuple.getDouble(\"field_d_p\"), 40.5, 0.0);\n      assertEquals(tuple.getLong(\"field_l_p\").longValue(), 40);\n\n\n\n\n\n      tuple = tuples.get(3);\n      assertEquals(tuple.getLong(\"id\").longValue(), 5);\n      assertEquals(tuple.getLong(\"field_i\").longValue(), 30);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assertEquals(tuple.getLong(\"field_i_p\").longValue(), 30);\n      assertEquals(tuple.getDouble(\"field_f_p\"), 30.5, 0.0);\n      assertEquals(tuple.getDouble(\"field_d_p\"), 30.5, 0.0);\n      assertEquals(tuple.getLong(\"field_l_p\").longValue(), 30);\n\n\n\n\n      tuple = tuples.get(4);\n      assertEquals(tuple.getLong(\"id\").longValue(),3);\n      assertEquals(tuple.getLong(\"field_i\").longValue(), 20);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assertEquals(tuple.getLong(\"field_i_p\").longValue(), 20);\n      assertEquals(tuple.getDouble(\"field_f_p\"), 20.5, 0.0);\n      assertEquals(tuple.getDouble(\"field_d_p\"), 20.5, 0.0);\n      assertEquals(tuple.getLong(\"field_l_p\").longValue(), 20);\n\n\n\n\n      tuple = tuples.get(5);\n      assertEquals(tuple.getLong(\"id\").longValue(), 4);\n      assertEquals(tuple.getLong(\"field_i\").longValue(), 11);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assertEquals(tuple.getLong(\"field_i_p\").longValue(), 11);\n      assertEquals(tuple.getDouble(\"field_f_p\"), 11.5, 0.0);\n      assertEquals(tuple.getDouble(\"field_d_p\"), 11.5, 0.0);\n      assertEquals(tuple.getLong(\"field_l_p\").longValue(), 11);\n\n\n\n\n      tuple = tuples.get(6);\n      assertEquals(tuple.getLong(\"id\").longValue(), 2);\n      assertEquals(tuple.getLong(\"field_i\").longValue(), 8);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assertEquals(tuple.getLong(\"field_i_p\").longValue(), 8);\n      assertEquals(tuple.getDouble(\"field_f_p\"), 8.5, 0.0);\n      assertEquals(tuple.getDouble(\"field_d_p\"), 8.5, 0.0);\n      assertEquals(tuple.getLong(\"field_l_p\").longValue(), 8);\n\n\n\n\n      tuple = tuples.get(7);\n      assertEquals(tuple.getLong(\"id\").longValue(), 1);\n      assertEquals(tuple.getLong(\"field_i\").longValue(), 7);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assertEquals(tuple.getLong(\"field_i_p\").longValue(), 7);\n      assertEquals(tuple.getDouble(\"field_f_p\"), 7.5, 0.0);\n      assertEquals(tuple.getDouble(\"field_d_p\"), 7.5, 0.0);\n      assertEquals(tuple.getLong(\"field_l_p\").longValue(), 7);\n\n\n\n      //Assert field order\n      assertResponseContains(clients.get(0), sParams, \"{\\\"docs\\\":[{\\\"id\\\":\\\"8\\\",\\\"field_i\\\":60,\\\"str_s\\\":\\\"c\\\",\\\"field_i_p\\\":60,\\\"field_f_p\\\":60.5,\\\"field_d_p\\\":60.5,\\\"field_l_p\\\":60}\");\n\n      //Test unlimited unsorted result. Should sort on _version_ desc\n      sParams = mapParams(CommonParams.QT, \"/sql\", \"stmt\", \"select id, field_i, str_s from collection1 where text='XXXX'\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 8);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 8);\n      assert(tuple.getLong(\"field_i\") == 60);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"id\") == 7);\n      assert(tuple.getLong(\"field_i\") == 50);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"id\") == 6);\n      assert(tuple.getLong(\"field_i\") == 40);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(3);\n      assert(tuple.getLong(\"id\") == 5);\n      assert(tuple.getLong(\"field_i\") == 30);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(4);\n      assert(tuple.getLong(\"id\") == 4);\n      assert(tuple.getLong(\"field_i\") == 11);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(5);\n      assert(tuple.getLong(\"id\") == 3);\n      assert(tuple.getLong(\"field_i\") == 20);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      tuple = tuples.get(6);\n      assert(tuple.getLong(\"id\") == 2);\n      assert(tuple.getLong(\"field_i\") == 8);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(7);\n      assert(tuple.getLong(\"id\") == 1);\n      assert(tuple.getLong(\"field_i\") == 7);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \n          \"stmt\", \"select id, field_i, str_s from collection1 where text='XXXX' order by field_i desc limit 1\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 1);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 8);\n      assert(tuple.getLong(\"field_i\") == 60);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \"stmt\", \"select id, field_i, str_s from collection1 where text='XXXX' AND id='(1 2 3)' order by field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 3);\n      assert(tuple.getLong(\"field_i\") == 20);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"id\") == 2);\n      assert(tuple.getLong(\"field_i\") == 8);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"id\") == 1);\n      assert(tuple.getLong(\"field_i\") == 7);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \n          \"stmt\", \"select id as myId, field_i as myInt, str_s as myString from collection1 where text='XXXX' AND id='(1 2 3)' order by myInt desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"myId\") == 3);\n      assert(tuple.getLong(\"myInt\") == 20);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"myId\") == 2);\n      assert(tuple.getLong(\"myInt\") == 8);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"myId\") == 1);\n      assert(tuple.getLong(\"myInt\") == 7);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select id as myId, field_i as myInt, str_s as myString from collection1 where text='XXXX' AND id='(1 2 3)' order by field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"myId\") == 3);\n      assert(tuple.getLong(\"myInt\") == 20);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"myId\") == 2);\n      assert(tuple.getLong(\"myInt\") == 8);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"myId\") == 1);\n      assert(tuple.getLong(\"myInt\") == 7);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      //Test after reload SOLR-9059//\n      Replica leader = getShardLeader(\"collection1\", \"shard1\", 30 /* timeout secs */);\n\n      // reload collection and wait to see the core report it has been reloaded\n      boolean wasReloaded = reloadCollection(leader, \"collection1\");\n      assertTrue(wasReloaded);\n\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select id as myId, field_i as myInt, str_s as myString from collection1 where text='XXXX' AND id='(1 2 3)' order by field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"myId\") == 3);\n      assert(tuple.getLong(\"myInt\") == 20);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"myId\") == 2);\n      assert(tuple.getLong(\"myInt\") == 8);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"myId\") == 1);\n      assert(tuple.getLong(\"myInt\") == 7);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n\n      // SOLR-8845 - Test to make sure that 1 = 0 works for things like Spark SQL\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select id, field_i, str_s from collection1 where 1 = 0\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assertEquals(0, tuples.size());\n    } finally {\n      delete();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"600937be95b5a041815220371fa7882e73031d56","date":1551734162,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testBasicSelect().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testBasicSelect().mjava","sourceNew":"  private void testBasicSelect() throws Exception {\n\n    del(\"*:*\");\n\n    commit();\n\n    indexDoc(sdoc(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"7\", \"field_i_p\", \"7\",\n        \"field_f_p\", \"7.5\", \"field_d_p\", \"7.5\", \"field_l_p\", \"7\"));\n    indexDoc(sdoc(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"8\", \"field_i_p\", \"8\",\n        \"field_f_p\", \"8.5\", \"field_d_p\", \"8.5\", \"field_l_p\", \"8\"));\n    indexDoc(sdoc(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\", \"field_i_p\", \"20\",\n        \"field_f_p\", \"20.5\", \"field_d_p\", \"20.5\", \"field_l_p\", \"20\"));\n    indexDoc(sdoc(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"11\", \"field_i_p\", \"11\",\n        \"field_f_p\", \"11.5\", \"field_d_p\", \"11.5\", \"field_l_p\", \"11\"));\n    indexDoc(sdoc(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\", \"field_i_p\", \"30\", \"\" +\n        \"field_f_p\", \"30.5\", \"field_d_p\", \"30.5\", \"field_l_p\", \"30\"));\n    indexDoc(sdoc(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"40\", \"field_i_p\", \"40\",\n        \"field_f_p\", \"40.5\", \"field_d_p\", \"40.5\", \"field_l_p\", \"40\"));\n    indexDoc(sdoc(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\", \"field_i_p\", \"50\",\n        \"field_f_p\", \"50.5\", \"field_d_p\", \"50.5\", \"field_l_p\", \"50\"));\n    indexDoc(sdoc(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\", \"field_i_p\", \"60\",\n        \"field_f_p\", \"60.5\", \"field_d_p\", \"60.5\", \"field_l_p\", \"60\"));\n    commit();\n\n    System.out.println(\"############# testBasicSelect() ############\");\n\n    SolrParams sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\",\n        \"select id, field_i, str_s, field_i_p, field_f_p, field_d_p, field_l_p from collection1 where (text='(XXXX)' OR text='XXXX') AND text='XXXX' order by field_i desc\");\n\n    List<Tuple> tuples = getTuples(sParams);\n\n    assert (tuples.size() == 8);\n    Tuple tuple;\n\n    tuple = tuples.get(0);\n    assertEquals(tuple.getLong(\"id\").longValue(), 8);\n    assertEquals(tuple.getLong(\"field_i\").longValue(), 60);\n    assert (tuple.get(\"str_s\").equals(\"c\"));\n    assertEquals(tuple.getLong(\"field_i_p\").longValue(), 60L);\n    assertEquals(tuple.getDouble(\"field_f_p\"), 60.5, 0.0);\n    assertEquals(tuple.getDouble(\"field_d_p\"), 60.5, 0.0);\n    assertEquals(tuple.getLong(\"field_l_p\").longValue(), 60);\n\n    tuple = tuples.get(1);\n    assertEquals(tuple.getLong(\"id\").longValue(), 7);\n    assertEquals(tuple.getLong(\"field_i\").longValue(), 50);\n    assert (tuple.get(\"str_s\").equals(\"c\"));\n    assertEquals(tuple.getLong(\"field_i_p\").longValue(), 50);\n    assertEquals(tuple.getDouble(\"field_f_p\"), 50.5, 0.0);\n    assertEquals(tuple.getDouble(\"field_d_p\"), 50.5, 0.0);\n    assertEquals(tuple.getLong(\"field_l_p\").longValue(), 50);\n\n    tuple = tuples.get(2);\n    assertEquals(tuple.getLong(\"id\").longValue(), 6);\n    assertEquals(tuple.getLong(\"field_i\").longValue(), 40);\n    assert (tuple.get(\"str_s\").equals(\"c\"));\n    assertEquals(tuple.getLong(\"field_i_p\").longValue(), 40);\n    assertEquals(tuple.getDouble(\"field_f_p\"), 40.5, 0.0);\n    assertEquals(tuple.getDouble(\"field_d_p\"), 40.5, 0.0);\n    assertEquals(tuple.getLong(\"field_l_p\").longValue(), 40);\n\n    tuple = tuples.get(3);\n    assertEquals(tuple.getLong(\"id\").longValue(), 5);\n    assertEquals(tuple.getLong(\"field_i\").longValue(), 30);\n    assert (tuple.get(\"str_s\").equals(\"c\"));\n    assertEquals(tuple.getLong(\"field_i_p\").longValue(), 30);\n    assertEquals(tuple.getDouble(\"field_f_p\"), 30.5, 0.0);\n    assertEquals(tuple.getDouble(\"field_d_p\"), 30.5, 0.0);\n    assertEquals(tuple.getLong(\"field_l_p\").longValue(), 30);\n\n    tuple = tuples.get(4);\n    assertEquals(tuple.getLong(\"id\").longValue(), 3);\n    assertEquals(tuple.getLong(\"field_i\").longValue(), 20);\n    assert (tuple.get(\"str_s\").equals(\"a\"));\n    assertEquals(tuple.getLong(\"field_i_p\").longValue(), 20);\n    assertEquals(tuple.getDouble(\"field_f_p\"), 20.5, 0.0);\n    assertEquals(tuple.getDouble(\"field_d_p\"), 20.5, 0.0);\n    assertEquals(tuple.getLong(\"field_l_p\").longValue(), 20);\n\n    tuple = tuples.get(5);\n    assertEquals(tuple.getLong(\"id\").longValue(), 4);\n    assertEquals(tuple.getLong(\"field_i\").longValue(), 11);\n    assert (tuple.get(\"str_s\").equals(\"b\"));\n    assertEquals(tuple.getLong(\"field_i_p\").longValue(), 11);\n    assertEquals(tuple.getDouble(\"field_f_p\"), 11.5, 0.0);\n    assertEquals(tuple.getDouble(\"field_d_p\"), 11.5, 0.0);\n    assertEquals(tuple.getLong(\"field_l_p\").longValue(), 11);\n\n    tuple = tuples.get(6);\n    assertEquals(tuple.getLong(\"id\").longValue(), 2);\n    assertEquals(tuple.getLong(\"field_i\").longValue(), 8);\n    assert (tuple.get(\"str_s\").equals(\"b\"));\n    assertEquals(tuple.getLong(\"field_i_p\").longValue(), 8);\n    assertEquals(tuple.getDouble(\"field_f_p\"), 8.5, 0.0);\n    assertEquals(tuple.getDouble(\"field_d_p\"), 8.5, 0.0);\n    assertEquals(tuple.getLong(\"field_l_p\").longValue(), 8);\n\n    tuple = tuples.get(7);\n    assertEquals(tuple.getLong(\"id\").longValue(), 1);\n    assertEquals(tuple.getLong(\"field_i\").longValue(), 7);\n    assert (tuple.get(\"str_s\").equals(\"a\"));\n    assertEquals(tuple.getLong(\"field_i_p\").longValue(), 7);\n    assertEquals(tuple.getDouble(\"field_f_p\"), 7.5, 0.0);\n    assertEquals(tuple.getDouble(\"field_d_p\"), 7.5, 0.0);\n    assertEquals(tuple.getLong(\"field_l_p\").longValue(), 7);\n\n    // Assert field order\n    assertResponseContains(clients.get(0), sParams,\n        \"{\\\"docs\\\":[{\\\"id\\\":\\\"8\\\",\\\"field_i\\\":60,\\\"str_s\\\":\\\"c\\\",\\\"field_i_p\\\":60,\\\"field_f_p\\\":60.5,\\\"field_d_p\\\":60.5,\\\"field_l_p\\\":60}\");\n\n    // Test unlimited unsorted result. Should sort on _version_ desc\n    sParams = mapParams(CommonParams.QT, \"/sql\", \"stmt\",\n        \"select id, field_i, str_s from collection1 where text='XXXX'\");\n\n    tuples = getTuples(sParams);\n\n    assert (tuples.size() == 8);\n\n    tuple = tuples.get(0);\n    assert (tuple.getLong(\"id\") == 8);\n    assert (tuple.getLong(\"field_i\") == 60);\n    assert (tuple.get(\"str_s\").equals(\"c\"));\n\n    tuple = tuples.get(1);\n    assert (tuple.getLong(\"id\") == 7);\n    assert (tuple.getLong(\"field_i\") == 50);\n    assert (tuple.get(\"str_s\").equals(\"c\"));\n\n    tuple = tuples.get(2);\n    assert (tuple.getLong(\"id\") == 6);\n    assert (tuple.getLong(\"field_i\") == 40);\n    assert (tuple.get(\"str_s\").equals(\"c\"));\n\n    tuple = tuples.get(3);\n    assert (tuple.getLong(\"id\") == 5);\n    assert (tuple.getLong(\"field_i\") == 30);\n    assert (tuple.get(\"str_s\").equals(\"c\"));\n\n    tuple = tuples.get(4);\n    assert (tuple.getLong(\"id\") == 4);\n    assert (tuple.getLong(\"field_i\") == 11);\n    assert (tuple.get(\"str_s\").equals(\"b\"));\n\n    tuple = tuples.get(5);\n    assert (tuple.getLong(\"id\") == 3);\n    assert (tuple.getLong(\"field_i\") == 20);\n    assert (tuple.get(\"str_s\").equals(\"a\"));\n\n    tuple = tuples.get(6);\n    assert (tuple.getLong(\"id\") == 2);\n    assert (tuple.getLong(\"field_i\") == 8);\n    assert (tuple.get(\"str_s\").equals(\"b\"));\n\n    tuple = tuples.get(7);\n    assert (tuple.getLong(\"id\") == 1);\n    assert (tuple.getLong(\"field_i\") == 7);\n    assert (tuple.get(\"str_s\").equals(\"a\"));\n\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select id, field_i, str_s from collection1 where text='XXXX' order by field_i desc limit 1\");\n\n    tuples = getTuples(sParams);\n\n    assert (tuples.size() == 1);\n\n    tuple = tuples.get(0);\n    assert (tuple.getLong(\"id\") == 8);\n    assert (tuple.getLong(\"field_i\") == 60);\n    assert (tuple.get(\"str_s\").equals(\"c\"));\n\n    sParams = mapParams(CommonParams.QT, \"/sql\", \"stmt\",\n        \"select id, field_i, str_s from collection1 where text='XXXX' AND id='(1 2 3)' order by field_i desc\");\n\n    tuples = getTuples(sParams);\n\n    assert (tuples.size() == 3);\n\n    tuple = tuples.get(0);\n    assert (tuple.getLong(\"id\") == 3);\n    assert (tuple.getLong(\"field_i\") == 20);\n    assert (tuple.get(\"str_s\").equals(\"a\"));\n\n    tuple = tuples.get(1);\n    assert (tuple.getLong(\"id\") == 2);\n    assert (tuple.getLong(\"field_i\") == 8);\n    assert (tuple.get(\"str_s\").equals(\"b\"));\n\n    tuple = tuples.get(2);\n    assert (tuple.getLong(\"id\") == 1);\n    assert (tuple.getLong(\"field_i\") == 7);\n    assert (tuple.get(\"str_s\").equals(\"a\"));\n\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\",\n        \"select id as myId, field_i as myInt, str_s as myString from collection1 where text='XXXX' AND id='(1 2 3)' order by myInt desc\");\n\n    tuples = getTuples(sParams);\n\n    assert (tuples.size() == 3);\n\n    tuple = tuples.get(0);\n    assert (tuple.getLong(\"myId\") == 3);\n    assert (tuple.getLong(\"myInt\") == 20);\n    assert (tuple.get(\"myString\").equals(\"a\"));\n\n    tuple = tuples.get(1);\n    assert (tuple.getLong(\"myId\") == 2);\n    assert (tuple.getLong(\"myInt\") == 8);\n    assert (tuple.get(\"myString\").equals(\"b\"));\n\n    tuple = tuples.get(2);\n    assert (tuple.getLong(\"myId\") == 1);\n    assert (tuple.getLong(\"myInt\") == 7);\n    assert (tuple.get(\"myString\").equals(\"a\"));\n\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\",\n        \"select id as myId, field_i as myInt, str_s as myString from collection1 where text='XXXX' AND id='(1 2 3)' order by field_i desc\");\n\n    tuples = getTuples(sParams);\n\n    assert (tuples.size() == 3);\n\n    tuple = tuples.get(0);\n    assert (tuple.getLong(\"myId\") == 3);\n    assert (tuple.getLong(\"myInt\") == 20);\n    assert (tuple.get(\"myString\").equals(\"a\"));\n\n    tuple = tuples.get(1);\n    assert (tuple.getLong(\"myId\") == 2);\n    assert (tuple.getLong(\"myInt\") == 8);\n    assert (tuple.get(\"myString\").equals(\"b\"));\n\n    tuple = tuples.get(2);\n    assert (tuple.getLong(\"myId\") == 1);\n    assert (tuple.getLong(\"myInt\") == 7);\n    assert (tuple.get(\"myString\").equals(\"a\"));\n\n    // Test after reload SOLR-9059//\n    Replica leader = getShardLeader(\"collection1\", \"shard1\", 30 /* timeout secs */);\n\n    // reload collection and wait to see the core report it has been reloaded\n    boolean wasReloaded = reloadCollection(leader, \"collection1\");\n    assertTrue(wasReloaded);\n\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\",\n        \"select id as myId, field_i as myInt, str_s as myString from collection1 where text='XXXX' AND id='(1 2 3)' order by field_i desc\");\n\n    tuples = getTuples(sParams);\n\n    assert (tuples.size() == 3);\n\n    tuple = tuples.get(0);\n    assert (tuple.getLong(\"myId\") == 3);\n    assert (tuple.getLong(\"myInt\") == 20);\n    assert (tuple.get(\"myString\").equals(\"a\"));\n\n    tuple = tuples.get(1);\n    assert (tuple.getLong(\"myId\") == 2);\n    assert (tuple.getLong(\"myInt\") == 8);\n    assert (tuple.get(\"myString\").equals(\"b\"));\n\n    tuple = tuples.get(2);\n    assert (tuple.getLong(\"myId\") == 1);\n    assert (tuple.getLong(\"myInt\") == 7);\n    assert (tuple.get(\"myString\").equals(\"a\"));\n\n    // SOLR-8845 - Test to make sure that 1 = 0 works for things like Spark SQL\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select id, field_i, str_s from collection1 where 1 = 0\");\n\n    tuples = getTuples(sParams);\n\n    assertEquals(0, tuples.size());\n\n  }\n\n","sourceOld":"  private void testBasicSelect() throws Exception {\n\n    CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n    del(\"*:*\");\n\n    commit();\n\n    indexDoc(sdoc(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"7\", \"field_i_p\", \"7\",\n        \"field_f_p\", \"7.5\", \"field_d_p\", \"7.5\", \"field_l_p\", \"7\"));\n    indexDoc(sdoc(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"8\", \"field_i_p\", \"8\",\n        \"field_f_p\", \"8.5\", \"field_d_p\", \"8.5\", \"field_l_p\", \"8\"));\n    indexDoc(sdoc(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\", \"field_i_p\", \"20\",\n        \"field_f_p\", \"20.5\", \"field_d_p\", \"20.5\", \"field_l_p\", \"20\"));\n    indexDoc(sdoc(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"11\", \"field_i_p\", \"11\",\n        \"field_f_p\", \"11.5\", \"field_d_p\", \"11.5\", \"field_l_p\", \"11\"));\n    indexDoc(sdoc(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\", \"field_i_p\", \"30\", \"\" +\n        \"field_f_p\", \"30.5\", \"field_d_p\", \"30.5\", \"field_l_p\", \"30\"));\n    indexDoc(sdoc(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"40\", \"field_i_p\", \"40\",\n        \"field_f_p\", \"40.5\", \"field_d_p\", \"40.5\", \"field_l_p\", \"40\"));\n    indexDoc(sdoc(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\", \"field_i_p\", \"50\",\n        \"field_f_p\", \"50.5\", \"field_d_p\", \"50.5\", \"field_l_p\", \"50\"));\n    indexDoc(sdoc(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\", \"field_i_p\", \"60\",\n        \"field_f_p\", \"60.5\", \"field_d_p\", \"60.5\", \"field_l_p\", \"60\"));\n    commit();\n\n    System.out.println(\"############# testBasicSelect() ############\");\n\n    SolrParams sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\",\n        \"select id, field_i, str_s, field_i_p, field_f_p, field_d_p, field_l_p from collection1 where (text='(XXXX)' OR text='XXXX') AND text='XXXX' order by field_i desc\");\n\n    SolrStream solrStream = new SolrStream(jetty.url, sParams);\n    List<Tuple> tuples = getTuples(solrStream);\n\n    assert (tuples.size() == 8);\n    Tuple tuple;\n\n    tuple = tuples.get(0);\n    assertEquals(tuple.getLong(\"id\").longValue(), 8);\n    assertEquals(tuple.getLong(\"field_i\").longValue(), 60);\n    assert (tuple.get(\"str_s\").equals(\"c\"));\n    assertEquals(tuple.getLong(\"field_i_p\").longValue(), 60L);\n    assertEquals(tuple.getDouble(\"field_f_p\"), 60.5, 0.0);\n    assertEquals(tuple.getDouble(\"field_d_p\"), 60.5, 0.0);\n    assertEquals(tuple.getLong(\"field_l_p\").longValue(), 60);\n\n    tuple = tuples.get(1);\n    assertEquals(tuple.getLong(\"id\").longValue(), 7);\n    assertEquals(tuple.getLong(\"field_i\").longValue(), 50);\n    assert (tuple.get(\"str_s\").equals(\"c\"));\n    assertEquals(tuple.getLong(\"field_i_p\").longValue(), 50);\n    assertEquals(tuple.getDouble(\"field_f_p\"), 50.5, 0.0);\n    assertEquals(tuple.getDouble(\"field_d_p\"), 50.5, 0.0);\n    assertEquals(tuple.getLong(\"field_l_p\").longValue(), 50);\n\n    tuple = tuples.get(2);\n    assertEquals(tuple.getLong(\"id\").longValue(), 6);\n    assertEquals(tuple.getLong(\"field_i\").longValue(), 40);\n    assert (tuple.get(\"str_s\").equals(\"c\"));\n    assertEquals(tuple.getLong(\"field_i_p\").longValue(), 40);\n    assertEquals(tuple.getDouble(\"field_f_p\"), 40.5, 0.0);\n    assertEquals(tuple.getDouble(\"field_d_p\"), 40.5, 0.0);\n    assertEquals(tuple.getLong(\"field_l_p\").longValue(), 40);\n\n    tuple = tuples.get(3);\n    assertEquals(tuple.getLong(\"id\").longValue(), 5);\n    assertEquals(tuple.getLong(\"field_i\").longValue(), 30);\n    assert (tuple.get(\"str_s\").equals(\"c\"));\n    assertEquals(tuple.getLong(\"field_i_p\").longValue(), 30);\n    assertEquals(tuple.getDouble(\"field_f_p\"), 30.5, 0.0);\n    assertEquals(tuple.getDouble(\"field_d_p\"), 30.5, 0.0);\n    assertEquals(tuple.getLong(\"field_l_p\").longValue(), 30);\n\n    tuple = tuples.get(4);\n    assertEquals(tuple.getLong(\"id\").longValue(), 3);\n    assertEquals(tuple.getLong(\"field_i\").longValue(), 20);\n    assert (tuple.get(\"str_s\").equals(\"a\"));\n    assertEquals(tuple.getLong(\"field_i_p\").longValue(), 20);\n    assertEquals(tuple.getDouble(\"field_f_p\"), 20.5, 0.0);\n    assertEquals(tuple.getDouble(\"field_d_p\"), 20.5, 0.0);\n    assertEquals(tuple.getLong(\"field_l_p\").longValue(), 20);\n\n    tuple = tuples.get(5);\n    assertEquals(tuple.getLong(\"id\").longValue(), 4);\n    assertEquals(tuple.getLong(\"field_i\").longValue(), 11);\n    assert (tuple.get(\"str_s\").equals(\"b\"));\n    assertEquals(tuple.getLong(\"field_i_p\").longValue(), 11);\n    assertEquals(tuple.getDouble(\"field_f_p\"), 11.5, 0.0);\n    assertEquals(tuple.getDouble(\"field_d_p\"), 11.5, 0.0);\n    assertEquals(tuple.getLong(\"field_l_p\").longValue(), 11);\n\n    tuple = tuples.get(6);\n    assertEquals(tuple.getLong(\"id\").longValue(), 2);\n    assertEquals(tuple.getLong(\"field_i\").longValue(), 8);\n    assert (tuple.get(\"str_s\").equals(\"b\"));\n    assertEquals(tuple.getLong(\"field_i_p\").longValue(), 8);\n    assertEquals(tuple.getDouble(\"field_f_p\"), 8.5, 0.0);\n    assertEquals(tuple.getDouble(\"field_d_p\"), 8.5, 0.0);\n    assertEquals(tuple.getLong(\"field_l_p\").longValue(), 8);\n\n    tuple = tuples.get(7);\n    assertEquals(tuple.getLong(\"id\").longValue(), 1);\n    assertEquals(tuple.getLong(\"field_i\").longValue(), 7);\n    assert (tuple.get(\"str_s\").equals(\"a\"));\n    assertEquals(tuple.getLong(\"field_i_p\").longValue(), 7);\n    assertEquals(tuple.getDouble(\"field_f_p\"), 7.5, 0.0);\n    assertEquals(tuple.getDouble(\"field_d_p\"), 7.5, 0.0);\n    assertEquals(tuple.getLong(\"field_l_p\").longValue(), 7);\n\n    // Assert field order\n    assertResponseContains(clients.get(0), sParams,\n        \"{\\\"docs\\\":[{\\\"id\\\":\\\"8\\\",\\\"field_i\\\":60,\\\"str_s\\\":\\\"c\\\",\\\"field_i_p\\\":60,\\\"field_f_p\\\":60.5,\\\"field_d_p\\\":60.5,\\\"field_l_p\\\":60}\");\n\n    // Test unlimited unsorted result. Should sort on _version_ desc\n    sParams = mapParams(CommonParams.QT, \"/sql\", \"stmt\",\n        \"select id, field_i, str_s from collection1 where text='XXXX'\");\n\n    solrStream = new SolrStream(jetty.url, sParams);\n    tuples = getTuples(solrStream);\n\n    assert (tuples.size() == 8);\n\n    tuple = tuples.get(0);\n    assert (tuple.getLong(\"id\") == 8);\n    assert (tuple.getLong(\"field_i\") == 60);\n    assert (tuple.get(\"str_s\").equals(\"c\"));\n\n    tuple = tuples.get(1);\n    assert (tuple.getLong(\"id\") == 7);\n    assert (tuple.getLong(\"field_i\") == 50);\n    assert (tuple.get(\"str_s\").equals(\"c\"));\n\n    tuple = tuples.get(2);\n    assert (tuple.getLong(\"id\") == 6);\n    assert (tuple.getLong(\"field_i\") == 40);\n    assert (tuple.get(\"str_s\").equals(\"c\"));\n\n    tuple = tuples.get(3);\n    assert (tuple.getLong(\"id\") == 5);\n    assert (tuple.getLong(\"field_i\") == 30);\n    assert (tuple.get(\"str_s\").equals(\"c\"));\n\n    tuple = tuples.get(4);\n    assert (tuple.getLong(\"id\") == 4);\n    assert (tuple.getLong(\"field_i\") == 11);\n    assert (tuple.get(\"str_s\").equals(\"b\"));\n\n    tuple = tuples.get(5);\n    assert (tuple.getLong(\"id\") == 3);\n    assert (tuple.getLong(\"field_i\") == 20);\n    assert (tuple.get(\"str_s\").equals(\"a\"));\n\n    tuple = tuples.get(6);\n    assert (tuple.getLong(\"id\") == 2);\n    assert (tuple.getLong(\"field_i\") == 8);\n    assert (tuple.get(\"str_s\").equals(\"b\"));\n\n    tuple = tuples.get(7);\n    assert (tuple.getLong(\"id\") == 1);\n    assert (tuple.getLong(\"field_i\") == 7);\n    assert (tuple.get(\"str_s\").equals(\"a\"));\n\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select id, field_i, str_s from collection1 where text='XXXX' order by field_i desc limit 1\");\n\n    solrStream = new SolrStream(jetty.url, sParams);\n    tuples = getTuples(solrStream);\n\n    assert (tuples.size() == 1);\n\n    tuple = tuples.get(0);\n    assert (tuple.getLong(\"id\") == 8);\n    assert (tuple.getLong(\"field_i\") == 60);\n    assert (tuple.get(\"str_s\").equals(\"c\"));\n\n    sParams = mapParams(CommonParams.QT, \"/sql\", \"stmt\",\n        \"select id, field_i, str_s from collection1 where text='XXXX' AND id='(1 2 3)' order by field_i desc\");\n\n    solrStream = new SolrStream(jetty.url, sParams);\n    tuples = getTuples(solrStream);\n\n    assert (tuples.size() == 3);\n\n    tuple = tuples.get(0);\n    assert (tuple.getLong(\"id\") == 3);\n    assert (tuple.getLong(\"field_i\") == 20);\n    assert (tuple.get(\"str_s\").equals(\"a\"));\n\n    tuple = tuples.get(1);\n    assert (tuple.getLong(\"id\") == 2);\n    assert (tuple.getLong(\"field_i\") == 8);\n    assert (tuple.get(\"str_s\").equals(\"b\"));\n\n    tuple = tuples.get(2);\n    assert (tuple.getLong(\"id\") == 1);\n    assert (tuple.getLong(\"field_i\") == 7);\n    assert (tuple.get(\"str_s\").equals(\"a\"));\n\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\",\n        \"select id as myId, field_i as myInt, str_s as myString from collection1 where text='XXXX' AND id='(1 2 3)' order by myInt desc\");\n\n    solrStream = new SolrStream(jetty.url, sParams);\n    tuples = getTuples(solrStream);\n\n    assert (tuples.size() == 3);\n\n    tuple = tuples.get(0);\n    assert (tuple.getLong(\"myId\") == 3);\n    assert (tuple.getLong(\"myInt\") == 20);\n    assert (tuple.get(\"myString\").equals(\"a\"));\n\n    tuple = tuples.get(1);\n    assert (tuple.getLong(\"myId\") == 2);\n    assert (tuple.getLong(\"myInt\") == 8);\n    assert (tuple.get(\"myString\").equals(\"b\"));\n\n    tuple = tuples.get(2);\n    assert (tuple.getLong(\"myId\") == 1);\n    assert (tuple.getLong(\"myInt\") == 7);\n    assert (tuple.get(\"myString\").equals(\"a\"));\n\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\",\n        \"select id as myId, field_i as myInt, str_s as myString from collection1 where text='XXXX' AND id='(1 2 3)' order by field_i desc\");\n\n    solrStream = new SolrStream(jetty.url, sParams);\n    tuples = getTuples(solrStream);\n\n    assert (tuples.size() == 3);\n\n    tuple = tuples.get(0);\n    assert (tuple.getLong(\"myId\") == 3);\n    assert (tuple.getLong(\"myInt\") == 20);\n    assert (tuple.get(\"myString\").equals(\"a\"));\n\n    tuple = tuples.get(1);\n    assert (tuple.getLong(\"myId\") == 2);\n    assert (tuple.getLong(\"myInt\") == 8);\n    assert (tuple.get(\"myString\").equals(\"b\"));\n\n    tuple = tuples.get(2);\n    assert (tuple.getLong(\"myId\") == 1);\n    assert (tuple.getLong(\"myInt\") == 7);\n    assert (tuple.get(\"myString\").equals(\"a\"));\n\n    // Test after reload SOLR-9059//\n    Replica leader = getShardLeader(\"collection1\", \"shard1\", 30 /* timeout secs */);\n\n    // reload collection and wait to see the core report it has been reloaded\n    boolean wasReloaded = reloadCollection(leader, \"collection1\");\n    assertTrue(wasReloaded);\n\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\",\n        \"select id as myId, field_i as myInt, str_s as myString from collection1 where text='XXXX' AND id='(1 2 3)' order by field_i desc\");\n\n    solrStream = new SolrStream(jetty.url, sParams);\n    tuples = getTuples(solrStream);\n\n    assert (tuples.size() == 3);\n\n    tuple = tuples.get(0);\n    assert (tuple.getLong(\"myId\") == 3);\n    assert (tuple.getLong(\"myInt\") == 20);\n    assert (tuple.get(\"myString\").equals(\"a\"));\n\n    tuple = tuples.get(1);\n    assert (tuple.getLong(\"myId\") == 2);\n    assert (tuple.getLong(\"myInt\") == 8);\n    assert (tuple.get(\"myString\").equals(\"b\"));\n\n    tuple = tuples.get(2);\n    assert (tuple.getLong(\"myId\") == 1);\n    assert (tuple.getLong(\"myInt\") == 7);\n    assert (tuple.get(\"myString\").equals(\"a\"));\n\n    // SOLR-8845 - Test to make sure that 1 = 0 works for things like Spark SQL\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select id, field_i, str_s from collection1 where 1 = 0\");\n\n    solrStream = new SolrStream(jetty.url, sParams);\n    tuples = getTuples(solrStream);\n\n    assertEquals(0, tuples.size());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"22191e72f6c40dec88c9b94f9bb55c7527772a47","date":1553715407,"type":5,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler2[TestSQLHandler]#testBasicSelect().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testBasicSelect().mjava","sourceNew":"  @Test\n  public void testBasicSelect() throws Exception {\n\n\n    new UpdateRequest()\n        .add(\"id\", \"1\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"7\", \"field_f\", \"7.5\", \"field_d\", \"7.5\", \"field_l\", \"7\")\n        .add(\"id\", \"2\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"8\", \"field_f\", \"8.5\", \"field_d\", \"8.5\", \"field_l\", \"8\")\n        .add(\"id\", \"3\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\", \"field_f\", \"20.5\", \"field_d\", \"20.5\", \"field_l\", \"20\")\n        .add(\"id\", \"4\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"11\", \"field_f\", \"11.5\", \"field_d\", \"11.5\", \"field_l\", \"11\")\n        .add(\"id\", \"5\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\", \"field_f\", \"30.5\", \"field_d\", \"30.5\", \"field_l\", \"30\")\n        .add(\"id\", \"6\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"40\", \"field_f\", \"40.5\", \"field_d\", \"40.5\", \"field_l\", \"40\")\n        .add(\"id\", \"7\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\", \"field_f\", \"50.5\", \"field_d\", \"50.5\", \"field_l\", \"50\")\n        .add(\"id\", \"8\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\", \"field_f\", \"60.5\", \"field_d\", \"60.5\", \"field_l\", \"60\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    SolrParams sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\",\n        \"select id, field_i, str_s, field_f, field_d, field_l from collection1 where (text_t='(XXXX)' OR text_t='XXXX') AND text_t='XXXX' order by field_i desc\");\n\n    String baseUrl = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    List<Tuple> tuples = getTuples(sParams, baseUrl);\n\n    assert (tuples.size() == 8);\n    Tuple tuple;\n\n    tuple = tuples.get(0);\n    assertEquals(tuple.getLong(\"id\").longValue(), 8);\n    assertEquals(tuple.getLong(\"field_i\").longValue(), 60);\n    assert (tuple.get(\"str_s\").equals(\"c\"));\n    assertEquals(tuple.getLong(\"field_i\").longValue(), 60L);\n    assertEquals(tuple.getDouble(\"field_f\"), 60.5, 0.0);\n    assertEquals(tuple.getDouble(\"field_d\"), 60.5, 0.0);\n    assertEquals(tuple.getLong(\"field_l\").longValue(), 60);\n\n    tuple = tuples.get(1);\n    assertEquals(tuple.getLong(\"id\").longValue(), 7);\n    assertEquals(tuple.getLong(\"field_i\").longValue(), 50);\n    assert (tuple.get(\"str_s\").equals(\"c\"));\n    assertEquals(tuple.getLong(\"field_i\").longValue(), 50);\n    assertEquals(tuple.getDouble(\"field_f\"), 50.5, 0.0);\n    assertEquals(tuple.getDouble(\"field_d\"), 50.5, 0.0);\n    assertEquals(tuple.getLong(\"field_l\").longValue(), 50);\n\n    tuple = tuples.get(2);\n    assertEquals(tuple.getLong(\"id\").longValue(), 6);\n    assertEquals(tuple.getLong(\"field_i\").longValue(), 40);\n    assert (tuple.get(\"str_s\").equals(\"c\"));\n    assertEquals(tuple.getLong(\"field_i\").longValue(), 40);\n    assertEquals(tuple.getDouble(\"field_f\"), 40.5, 0.0);\n    assertEquals(tuple.getDouble(\"field_d\"), 40.5, 0.0);\n    assertEquals(tuple.getLong(\"field_l\").longValue(), 40);\n\n    tuple = tuples.get(3);\n    assertEquals(tuple.getLong(\"id\").longValue(), 5);\n    assertEquals(tuple.getLong(\"field_i\").longValue(), 30);\n    assert (tuple.get(\"str_s\").equals(\"c\"));\n    assertEquals(tuple.getLong(\"field_i\").longValue(), 30);\n    assertEquals(tuple.getDouble(\"field_f\"), 30.5, 0.0);\n    assertEquals(tuple.getDouble(\"field_d\"), 30.5, 0.0);\n    assertEquals(tuple.getLong(\"field_l\").longValue(), 30);\n\n    tuple = tuples.get(4);\n    assertEquals(tuple.getLong(\"id\").longValue(), 3);\n    assertEquals(tuple.getLong(\"field_i\").longValue(), 20);\n    assert (tuple.get(\"str_s\").equals(\"a\"));\n    assertEquals(tuple.getLong(\"field_i\").longValue(), 20);\n    assertEquals(tuple.getDouble(\"field_f\"), 20.5, 0.0);\n    assertEquals(tuple.getDouble(\"field_d\"), 20.5, 0.0);\n    assertEquals(tuple.getLong(\"field_l\").longValue(), 20);\n\n    tuple = tuples.get(5);\n    assertEquals(tuple.getLong(\"id\").longValue(), 4);\n    assertEquals(tuple.getLong(\"field_i\").longValue(), 11);\n    assert (tuple.get(\"str_s\").equals(\"b\"));\n    assertEquals(tuple.getLong(\"field_i\").longValue(), 11);\n    assertEquals(tuple.getDouble(\"field_f\"), 11.5, 0.0);\n    assertEquals(tuple.getDouble(\"field_d\"), 11.5, 0.0);\n    assertEquals(tuple.getLong(\"field_l\").longValue(), 11);\n\n    tuple = tuples.get(6);\n    assertEquals(tuple.getLong(\"id\").longValue(), 2);\n    assertEquals(tuple.getLong(\"field_i\").longValue(), 8);\n    assert (tuple.get(\"str_s\").equals(\"b\"));\n    assertEquals(tuple.getLong(\"field_i\").longValue(), 8);\n    assertEquals(tuple.getDouble(\"field_f\"), 8.5, 0.0);\n    assertEquals(tuple.getDouble(\"field_d\"), 8.5, 0.0);\n    assertEquals(tuple.getLong(\"field_l\").longValue(), 8);\n\n    tuple = tuples.get(7);\n    assertEquals(tuple.getLong(\"id\").longValue(), 1);\n    assertEquals(tuple.getLong(\"field_i\").longValue(), 7);\n    assert (tuple.get(\"str_s\").equals(\"a\"));\n    assertEquals(tuple.getLong(\"field_i\").longValue(), 7);\n    assertEquals(tuple.getDouble(\"field_f\"), 7.5, 0.0);\n    assertEquals(tuple.getDouble(\"field_d\"), 7.5, 0.0);\n    assertEquals(tuple.getLong(\"field_l\").longValue(), 7);\n\n    // Assert field order\n    //assertResponseContains(clients.get(0), sParams, \"{\\\"docs\\\":[{\\\"id\\\":\\\"8\\\",\\\"field_i\\\":60,\\\"str_s\\\":\\\"c\\\",\\\"field_i\\\":60,\\\"field_f\\\":60.5,\\\"field_d\\\":60.5,\\\"field_l\\\":60}\");\n\n\n    sParams = mapParams(CommonParams.QT, \"/sql\", \"stmt\",\n        \"select id, field_i, str_s from collection1 where text_t='XXXX' order by id desc\");\n\n    tuples = getTuples(sParams, baseUrl);\n\n    assert (tuples.size() == 8);\n\n    tuple = tuples.get(0);\n    assert (tuple.getLong(\"id\") == 8);\n    assert (tuple.getLong(\"field_i\") == 60);\n    assert (tuple.get(\"str_s\").equals(\"c\"));\n\n    tuple = tuples.get(1);\n    assert (tuple.getLong(\"id\") == 7);\n    assert (tuple.getLong(\"field_i\") == 50);\n    assert (tuple.get(\"str_s\").equals(\"c\"));\n\n    tuple = tuples.get(2);\n    assert (tuple.getLong(\"id\") == 6);\n    assert (tuple.getLong(\"field_i\") == 40);\n    assert (tuple.get(\"str_s\").equals(\"c\"));\n\n    tuple = tuples.get(3);\n    assert (tuple.getLong(\"id\") == 5);\n    assert (tuple.getLong(\"field_i\") == 30);\n    assert (tuple.get(\"str_s\").equals(\"c\"));\n\n    tuple = tuples.get(4);\n    assert (tuple.getLong(\"id\") == 4);\n    assert (tuple.getLong(\"field_i\") == 11);\n    assert (tuple.get(\"str_s\").equals(\"b\"));\n\n    tuple = tuples.get(5);\n    assert (tuple.getLong(\"id\") == 3);\n    assert (tuple.getLong(\"field_i\") == 20);\n    assert (tuple.get(\"str_s\").equals(\"a\"));\n\n    tuple = tuples.get(6);\n    assert (tuple.getLong(\"id\") == 2);\n    assert (tuple.getLong(\"field_i\") == 8);\n    assert (tuple.get(\"str_s\").equals(\"b\"));\n\n    tuple = tuples.get(7);\n    assert (tuple.getLong(\"id\") == 1);\n    assert (tuple.getLong(\"field_i\") == 7);\n    assert (tuple.get(\"str_s\").equals(\"a\"));\n\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select id, field_i, str_s from collection1 where text_t='XXXX' order by field_i desc limit 1\");\n\n    tuples = getTuples(sParams, baseUrl);\n\n    assert (tuples.size() == 1);\n\n    tuple = tuples.get(0);\n    assert (tuple.getLong(\"id\") == 8);\n    assert (tuple.getLong(\"field_i\") == 60);\n    assert (tuple.get(\"str_s\").equals(\"c\"));\n\n    sParams = mapParams(CommonParams.QT, \"/sql\", \"stmt\",\n        \"select id, field_i, str_s from collection1 where text_t='XXXX' AND id='(1 2 3)' order by field_i desc\");\n\n    tuples = getTuples(sParams, baseUrl);\n\n    assert (tuples.size() == 3);\n\n    tuple = tuples.get(0);\n    assert (tuple.getLong(\"id\") == 3);\n    assert (tuple.getLong(\"field_i\") == 20);\n    assert (tuple.get(\"str_s\").equals(\"a\"));\n\n    tuple = tuples.get(1);\n    assert (tuple.getLong(\"id\") == 2);\n    assert (tuple.getLong(\"field_i\") == 8);\n    assert (tuple.get(\"str_s\").equals(\"b\"));\n\n    tuple = tuples.get(2);\n    assert (tuple.getLong(\"id\") == 1);\n    assert (tuple.getLong(\"field_i\") == 7);\n    assert (tuple.get(\"str_s\").equals(\"a\"));\n\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\",\n        \"select id as myId, field_i as myInt, str_s as myString from collection1 where text_t='XXXX' AND id='(1 2 3)' order by myInt desc\");\n\n    tuples = getTuples(sParams, baseUrl);\n\n    assert (tuples.size() == 3);\n\n    tuple = tuples.get(0);\n    assert (tuple.getLong(\"myId\") == 3);\n    assert (tuple.getLong(\"myInt\") == 20);\n    assert (tuple.get(\"myString\").equals(\"a\"));\n\n    tuple = tuples.get(1);\n    assert (tuple.getLong(\"myId\") == 2);\n    assert (tuple.getLong(\"myInt\") == 8);\n    assert (tuple.get(\"myString\").equals(\"b\"));\n\n    tuple = tuples.get(2);\n    assert (tuple.getLong(\"myId\") == 1);\n    assert (tuple.getLong(\"myInt\") == 7);\n    assert (tuple.get(\"myString\").equals(\"a\"));\n\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\",\n        \"select id as myId, field_i as myInt, str_s as myString from collection1 where text_t='XXXX' AND id='(1 2 3)' order by field_i desc\");\n\n    tuples = getTuples(sParams, baseUrl);\n\n    assert (tuples.size() == 3);\n\n    tuple = tuples.get(0);\n    assert (tuple.getLong(\"myId\") == 3);\n    assert (tuple.getLong(\"myInt\") == 20);\n    assert (tuple.get(\"myString\").equals(\"a\"));\n\n    tuple = tuples.get(1);\n    assert (tuple.getLong(\"myId\") == 2);\n    assert (tuple.getLong(\"myInt\") == 8);\n    assert (tuple.get(\"myString\").equals(\"b\"));\n\n    tuple = tuples.get(2);\n    assert (tuple.getLong(\"myId\") == 1);\n    assert (tuple.getLong(\"myInt\") == 7);\n    assert (tuple.get(\"myString\").equals(\"a\"));\n\n    // SOLR-8845 - Test to make sure that 1 = 0 works for things like Spark SQL\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select id, field_i, str_s from collection1 where 1 = 0\");\n\n    tuples = getTuples(sParams, baseUrl);\n\n    assertEquals(0, tuples.size());\n\n  }\n\n","sourceOld":"  private void testBasicSelect() throws Exception {\n\n    del(\"*:*\");\n\n    commit();\n\n    indexDoc(sdoc(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"7\", \"field_i_p\", \"7\",\n        \"field_f_p\", \"7.5\", \"field_d_p\", \"7.5\", \"field_l_p\", \"7\"));\n    indexDoc(sdoc(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"8\", \"field_i_p\", \"8\",\n        \"field_f_p\", \"8.5\", \"field_d_p\", \"8.5\", \"field_l_p\", \"8\"));\n    indexDoc(sdoc(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\", \"field_i_p\", \"20\",\n        \"field_f_p\", \"20.5\", \"field_d_p\", \"20.5\", \"field_l_p\", \"20\"));\n    indexDoc(sdoc(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"11\", \"field_i_p\", \"11\",\n        \"field_f_p\", \"11.5\", \"field_d_p\", \"11.5\", \"field_l_p\", \"11\"));\n    indexDoc(sdoc(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\", \"field_i_p\", \"30\", \"\" +\n        \"field_f_p\", \"30.5\", \"field_d_p\", \"30.5\", \"field_l_p\", \"30\"));\n    indexDoc(sdoc(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"40\", \"field_i_p\", \"40\",\n        \"field_f_p\", \"40.5\", \"field_d_p\", \"40.5\", \"field_l_p\", \"40\"));\n    indexDoc(sdoc(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\", \"field_i_p\", \"50\",\n        \"field_f_p\", \"50.5\", \"field_d_p\", \"50.5\", \"field_l_p\", \"50\"));\n    indexDoc(sdoc(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\", \"field_i_p\", \"60\",\n        \"field_f_p\", \"60.5\", \"field_d_p\", \"60.5\", \"field_l_p\", \"60\"));\n    commit();\n\n    System.out.println(\"############# testBasicSelect() ############\");\n\n    SolrParams sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\",\n        \"select id, field_i, str_s, field_i_p, field_f_p, field_d_p, field_l_p from collection1 where (text='(XXXX)' OR text='XXXX') AND text='XXXX' order by field_i desc\");\n\n    List<Tuple> tuples = getTuples(sParams);\n\n    assert (tuples.size() == 8);\n    Tuple tuple;\n\n    tuple = tuples.get(0);\n    assertEquals(tuple.getLong(\"id\").longValue(), 8);\n    assertEquals(tuple.getLong(\"field_i\").longValue(), 60);\n    assert (tuple.get(\"str_s\").equals(\"c\"));\n    assertEquals(tuple.getLong(\"field_i_p\").longValue(), 60L);\n    assertEquals(tuple.getDouble(\"field_f_p\"), 60.5, 0.0);\n    assertEquals(tuple.getDouble(\"field_d_p\"), 60.5, 0.0);\n    assertEquals(tuple.getLong(\"field_l_p\").longValue(), 60);\n\n    tuple = tuples.get(1);\n    assertEquals(tuple.getLong(\"id\").longValue(), 7);\n    assertEquals(tuple.getLong(\"field_i\").longValue(), 50);\n    assert (tuple.get(\"str_s\").equals(\"c\"));\n    assertEquals(tuple.getLong(\"field_i_p\").longValue(), 50);\n    assertEquals(tuple.getDouble(\"field_f_p\"), 50.5, 0.0);\n    assertEquals(tuple.getDouble(\"field_d_p\"), 50.5, 0.0);\n    assertEquals(tuple.getLong(\"field_l_p\").longValue(), 50);\n\n    tuple = tuples.get(2);\n    assertEquals(tuple.getLong(\"id\").longValue(), 6);\n    assertEquals(tuple.getLong(\"field_i\").longValue(), 40);\n    assert (tuple.get(\"str_s\").equals(\"c\"));\n    assertEquals(tuple.getLong(\"field_i_p\").longValue(), 40);\n    assertEquals(tuple.getDouble(\"field_f_p\"), 40.5, 0.0);\n    assertEquals(tuple.getDouble(\"field_d_p\"), 40.5, 0.0);\n    assertEquals(tuple.getLong(\"field_l_p\").longValue(), 40);\n\n    tuple = tuples.get(3);\n    assertEquals(tuple.getLong(\"id\").longValue(), 5);\n    assertEquals(tuple.getLong(\"field_i\").longValue(), 30);\n    assert (tuple.get(\"str_s\").equals(\"c\"));\n    assertEquals(tuple.getLong(\"field_i_p\").longValue(), 30);\n    assertEquals(tuple.getDouble(\"field_f_p\"), 30.5, 0.0);\n    assertEquals(tuple.getDouble(\"field_d_p\"), 30.5, 0.0);\n    assertEquals(tuple.getLong(\"field_l_p\").longValue(), 30);\n\n    tuple = tuples.get(4);\n    assertEquals(tuple.getLong(\"id\").longValue(), 3);\n    assertEquals(tuple.getLong(\"field_i\").longValue(), 20);\n    assert (tuple.get(\"str_s\").equals(\"a\"));\n    assertEquals(tuple.getLong(\"field_i_p\").longValue(), 20);\n    assertEquals(tuple.getDouble(\"field_f_p\"), 20.5, 0.0);\n    assertEquals(tuple.getDouble(\"field_d_p\"), 20.5, 0.0);\n    assertEquals(tuple.getLong(\"field_l_p\").longValue(), 20);\n\n    tuple = tuples.get(5);\n    assertEquals(tuple.getLong(\"id\").longValue(), 4);\n    assertEquals(tuple.getLong(\"field_i\").longValue(), 11);\n    assert (tuple.get(\"str_s\").equals(\"b\"));\n    assertEquals(tuple.getLong(\"field_i_p\").longValue(), 11);\n    assertEquals(tuple.getDouble(\"field_f_p\"), 11.5, 0.0);\n    assertEquals(tuple.getDouble(\"field_d_p\"), 11.5, 0.0);\n    assertEquals(tuple.getLong(\"field_l_p\").longValue(), 11);\n\n    tuple = tuples.get(6);\n    assertEquals(tuple.getLong(\"id\").longValue(), 2);\n    assertEquals(tuple.getLong(\"field_i\").longValue(), 8);\n    assert (tuple.get(\"str_s\").equals(\"b\"));\n    assertEquals(tuple.getLong(\"field_i_p\").longValue(), 8);\n    assertEquals(tuple.getDouble(\"field_f_p\"), 8.5, 0.0);\n    assertEquals(tuple.getDouble(\"field_d_p\"), 8.5, 0.0);\n    assertEquals(tuple.getLong(\"field_l_p\").longValue(), 8);\n\n    tuple = tuples.get(7);\n    assertEquals(tuple.getLong(\"id\").longValue(), 1);\n    assertEquals(tuple.getLong(\"field_i\").longValue(), 7);\n    assert (tuple.get(\"str_s\").equals(\"a\"));\n    assertEquals(tuple.getLong(\"field_i_p\").longValue(), 7);\n    assertEquals(tuple.getDouble(\"field_f_p\"), 7.5, 0.0);\n    assertEquals(tuple.getDouble(\"field_d_p\"), 7.5, 0.0);\n    assertEquals(tuple.getLong(\"field_l_p\").longValue(), 7);\n\n    // Assert field order\n    assertResponseContains(clients.get(0), sParams,\n        \"{\\\"docs\\\":[{\\\"id\\\":\\\"8\\\",\\\"field_i\\\":60,\\\"str_s\\\":\\\"c\\\",\\\"field_i_p\\\":60,\\\"field_f_p\\\":60.5,\\\"field_d_p\\\":60.5,\\\"field_l_p\\\":60}\");\n\n    // Test unlimited unsorted result. Should sort on _version_ desc\n    sParams = mapParams(CommonParams.QT, \"/sql\", \"stmt\",\n        \"select id, field_i, str_s from collection1 where text='XXXX'\");\n\n    tuples = getTuples(sParams);\n\n    assert (tuples.size() == 8);\n\n    tuple = tuples.get(0);\n    assert (tuple.getLong(\"id\") == 8);\n    assert (tuple.getLong(\"field_i\") == 60);\n    assert (tuple.get(\"str_s\").equals(\"c\"));\n\n    tuple = tuples.get(1);\n    assert (tuple.getLong(\"id\") == 7);\n    assert (tuple.getLong(\"field_i\") == 50);\n    assert (tuple.get(\"str_s\").equals(\"c\"));\n\n    tuple = tuples.get(2);\n    assert (tuple.getLong(\"id\") == 6);\n    assert (tuple.getLong(\"field_i\") == 40);\n    assert (tuple.get(\"str_s\").equals(\"c\"));\n\n    tuple = tuples.get(3);\n    assert (tuple.getLong(\"id\") == 5);\n    assert (tuple.getLong(\"field_i\") == 30);\n    assert (tuple.get(\"str_s\").equals(\"c\"));\n\n    tuple = tuples.get(4);\n    assert (tuple.getLong(\"id\") == 4);\n    assert (tuple.getLong(\"field_i\") == 11);\n    assert (tuple.get(\"str_s\").equals(\"b\"));\n\n    tuple = tuples.get(5);\n    assert (tuple.getLong(\"id\") == 3);\n    assert (tuple.getLong(\"field_i\") == 20);\n    assert (tuple.get(\"str_s\").equals(\"a\"));\n\n    tuple = tuples.get(6);\n    assert (tuple.getLong(\"id\") == 2);\n    assert (tuple.getLong(\"field_i\") == 8);\n    assert (tuple.get(\"str_s\").equals(\"b\"));\n\n    tuple = tuples.get(7);\n    assert (tuple.getLong(\"id\") == 1);\n    assert (tuple.getLong(\"field_i\") == 7);\n    assert (tuple.get(\"str_s\").equals(\"a\"));\n\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select id, field_i, str_s from collection1 where text='XXXX' order by field_i desc limit 1\");\n\n    tuples = getTuples(sParams);\n\n    assert (tuples.size() == 1);\n\n    tuple = tuples.get(0);\n    assert (tuple.getLong(\"id\") == 8);\n    assert (tuple.getLong(\"field_i\") == 60);\n    assert (tuple.get(\"str_s\").equals(\"c\"));\n\n    sParams = mapParams(CommonParams.QT, \"/sql\", \"stmt\",\n        \"select id, field_i, str_s from collection1 where text='XXXX' AND id='(1 2 3)' order by field_i desc\");\n\n    tuples = getTuples(sParams);\n\n    assert (tuples.size() == 3);\n\n    tuple = tuples.get(0);\n    assert (tuple.getLong(\"id\") == 3);\n    assert (tuple.getLong(\"field_i\") == 20);\n    assert (tuple.get(\"str_s\").equals(\"a\"));\n\n    tuple = tuples.get(1);\n    assert (tuple.getLong(\"id\") == 2);\n    assert (tuple.getLong(\"field_i\") == 8);\n    assert (tuple.get(\"str_s\").equals(\"b\"));\n\n    tuple = tuples.get(2);\n    assert (tuple.getLong(\"id\") == 1);\n    assert (tuple.getLong(\"field_i\") == 7);\n    assert (tuple.get(\"str_s\").equals(\"a\"));\n\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\",\n        \"select id as myId, field_i as myInt, str_s as myString from collection1 where text='XXXX' AND id='(1 2 3)' order by myInt desc\");\n\n    tuples = getTuples(sParams);\n\n    assert (tuples.size() == 3);\n\n    tuple = tuples.get(0);\n    assert (tuple.getLong(\"myId\") == 3);\n    assert (tuple.getLong(\"myInt\") == 20);\n    assert (tuple.get(\"myString\").equals(\"a\"));\n\n    tuple = tuples.get(1);\n    assert (tuple.getLong(\"myId\") == 2);\n    assert (tuple.getLong(\"myInt\") == 8);\n    assert (tuple.get(\"myString\").equals(\"b\"));\n\n    tuple = tuples.get(2);\n    assert (tuple.getLong(\"myId\") == 1);\n    assert (tuple.getLong(\"myInt\") == 7);\n    assert (tuple.get(\"myString\").equals(\"a\"));\n\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\",\n        \"select id as myId, field_i as myInt, str_s as myString from collection1 where text='XXXX' AND id='(1 2 3)' order by field_i desc\");\n\n    tuples = getTuples(sParams);\n\n    assert (tuples.size() == 3);\n\n    tuple = tuples.get(0);\n    assert (tuple.getLong(\"myId\") == 3);\n    assert (tuple.getLong(\"myInt\") == 20);\n    assert (tuple.get(\"myString\").equals(\"a\"));\n\n    tuple = tuples.get(1);\n    assert (tuple.getLong(\"myId\") == 2);\n    assert (tuple.getLong(\"myInt\") == 8);\n    assert (tuple.get(\"myString\").equals(\"b\"));\n\n    tuple = tuples.get(2);\n    assert (tuple.getLong(\"myId\") == 1);\n    assert (tuple.getLong(\"myInt\") == 7);\n    assert (tuple.get(\"myString\").equals(\"a\"));\n\n    // Test after reload SOLR-9059//\n    Replica leader = getShardLeader(\"collection1\", \"shard1\", 30 /* timeout secs */);\n\n    // reload collection and wait to see the core report it has been reloaded\n    boolean wasReloaded = reloadCollection(leader, \"collection1\");\n    assertTrue(wasReloaded);\n\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\",\n        \"select id as myId, field_i as myInt, str_s as myString from collection1 where text='XXXX' AND id='(1 2 3)' order by field_i desc\");\n\n    tuples = getTuples(sParams);\n\n    assert (tuples.size() == 3);\n\n    tuple = tuples.get(0);\n    assert (tuple.getLong(\"myId\") == 3);\n    assert (tuple.getLong(\"myInt\") == 20);\n    assert (tuple.get(\"myString\").equals(\"a\"));\n\n    tuple = tuples.get(1);\n    assert (tuple.getLong(\"myId\") == 2);\n    assert (tuple.getLong(\"myInt\") == 8);\n    assert (tuple.get(\"myString\").equals(\"b\"));\n\n    tuple = tuples.get(2);\n    assert (tuple.getLong(\"myId\") == 1);\n    assert (tuple.getLong(\"myInt\") == 7);\n    assert (tuple.get(\"myString\").equals(\"a\"));\n\n    // SOLR-8845 - Test to make sure that 1 = 0 works for things like Spark SQL\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select id, field_i, str_s from collection1 where 1 = 0\");\n\n    tuples = getTuples(sParams);\n\n    assertEquals(0, tuples.size());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"94e31112925a65b1d36f9064772080e25b5ef373","date":1553715407,"type":1,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testBasicSelect().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler2[TestSQLHandler]#testBasicSelect().mjava","sourceNew":"  @Test\n  public void testBasicSelect() throws Exception {\n\n\n    new UpdateRequest()\n        .add(\"id\", \"1\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"7\", \"field_f\", \"7.5\", \"field_d\", \"7.5\", \"field_l\", \"7\")\n        .add(\"id\", \"2\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"8\", \"field_f\", \"8.5\", \"field_d\", \"8.5\", \"field_l\", \"8\")\n        .add(\"id\", \"3\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\", \"field_f\", \"20.5\", \"field_d\", \"20.5\", \"field_l\", \"20\")\n        .add(\"id\", \"4\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"11\", \"field_f\", \"11.5\", \"field_d\", \"11.5\", \"field_l\", \"11\")\n        .add(\"id\", \"5\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\", \"field_f\", \"30.5\", \"field_d\", \"30.5\", \"field_l\", \"30\")\n        .add(\"id\", \"6\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"40\", \"field_f\", \"40.5\", \"field_d\", \"40.5\", \"field_l\", \"40\")\n        .add(\"id\", \"7\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\", \"field_f\", \"50.5\", \"field_d\", \"50.5\", \"field_l\", \"50\")\n        .add(\"id\", \"8\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\", \"field_f\", \"60.5\", \"field_d\", \"60.5\", \"field_l\", \"60\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    SolrParams sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\",\n        \"select id, field_i, str_s, field_f, field_d, field_l from collection1 where (text_t='(XXXX)' OR text_t='XXXX') AND text_t='XXXX' order by field_i desc\");\n\n    String baseUrl = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    List<Tuple> tuples = getTuples(sParams, baseUrl);\n\n    assert (tuples.size() == 8);\n    Tuple tuple;\n\n    tuple = tuples.get(0);\n    assertEquals(tuple.getLong(\"id\").longValue(), 8);\n    assertEquals(tuple.getLong(\"field_i\").longValue(), 60);\n    assert (tuple.get(\"str_s\").equals(\"c\"));\n    assertEquals(tuple.getLong(\"field_i\").longValue(), 60L);\n    assertEquals(tuple.getDouble(\"field_f\"), 60.5, 0.0);\n    assertEquals(tuple.getDouble(\"field_d\"), 60.5, 0.0);\n    assertEquals(tuple.getLong(\"field_l\").longValue(), 60);\n\n    tuple = tuples.get(1);\n    assertEquals(tuple.getLong(\"id\").longValue(), 7);\n    assertEquals(tuple.getLong(\"field_i\").longValue(), 50);\n    assert (tuple.get(\"str_s\").equals(\"c\"));\n    assertEquals(tuple.getLong(\"field_i\").longValue(), 50);\n    assertEquals(tuple.getDouble(\"field_f\"), 50.5, 0.0);\n    assertEquals(tuple.getDouble(\"field_d\"), 50.5, 0.0);\n    assertEquals(tuple.getLong(\"field_l\").longValue(), 50);\n\n    tuple = tuples.get(2);\n    assertEquals(tuple.getLong(\"id\").longValue(), 6);\n    assertEquals(tuple.getLong(\"field_i\").longValue(), 40);\n    assert (tuple.get(\"str_s\").equals(\"c\"));\n    assertEquals(tuple.getLong(\"field_i\").longValue(), 40);\n    assertEquals(tuple.getDouble(\"field_f\"), 40.5, 0.0);\n    assertEquals(tuple.getDouble(\"field_d\"), 40.5, 0.0);\n    assertEquals(tuple.getLong(\"field_l\").longValue(), 40);\n\n    tuple = tuples.get(3);\n    assertEquals(tuple.getLong(\"id\").longValue(), 5);\n    assertEquals(tuple.getLong(\"field_i\").longValue(), 30);\n    assert (tuple.get(\"str_s\").equals(\"c\"));\n    assertEquals(tuple.getLong(\"field_i\").longValue(), 30);\n    assertEquals(tuple.getDouble(\"field_f\"), 30.5, 0.0);\n    assertEquals(tuple.getDouble(\"field_d\"), 30.5, 0.0);\n    assertEquals(tuple.getLong(\"field_l\").longValue(), 30);\n\n    tuple = tuples.get(4);\n    assertEquals(tuple.getLong(\"id\").longValue(), 3);\n    assertEquals(tuple.getLong(\"field_i\").longValue(), 20);\n    assert (tuple.get(\"str_s\").equals(\"a\"));\n    assertEquals(tuple.getLong(\"field_i\").longValue(), 20);\n    assertEquals(tuple.getDouble(\"field_f\"), 20.5, 0.0);\n    assertEquals(tuple.getDouble(\"field_d\"), 20.5, 0.0);\n    assertEquals(tuple.getLong(\"field_l\").longValue(), 20);\n\n    tuple = tuples.get(5);\n    assertEquals(tuple.getLong(\"id\").longValue(), 4);\n    assertEquals(tuple.getLong(\"field_i\").longValue(), 11);\n    assert (tuple.get(\"str_s\").equals(\"b\"));\n    assertEquals(tuple.getLong(\"field_i\").longValue(), 11);\n    assertEquals(tuple.getDouble(\"field_f\"), 11.5, 0.0);\n    assertEquals(tuple.getDouble(\"field_d\"), 11.5, 0.0);\n    assertEquals(tuple.getLong(\"field_l\").longValue(), 11);\n\n    tuple = tuples.get(6);\n    assertEquals(tuple.getLong(\"id\").longValue(), 2);\n    assertEquals(tuple.getLong(\"field_i\").longValue(), 8);\n    assert (tuple.get(\"str_s\").equals(\"b\"));\n    assertEquals(tuple.getLong(\"field_i\").longValue(), 8);\n    assertEquals(tuple.getDouble(\"field_f\"), 8.5, 0.0);\n    assertEquals(tuple.getDouble(\"field_d\"), 8.5, 0.0);\n    assertEquals(tuple.getLong(\"field_l\").longValue(), 8);\n\n    tuple = tuples.get(7);\n    assertEquals(tuple.getLong(\"id\").longValue(), 1);\n    assertEquals(tuple.getLong(\"field_i\").longValue(), 7);\n    assert (tuple.get(\"str_s\").equals(\"a\"));\n    assertEquals(tuple.getLong(\"field_i\").longValue(), 7);\n    assertEquals(tuple.getDouble(\"field_f\"), 7.5, 0.0);\n    assertEquals(tuple.getDouble(\"field_d\"), 7.5, 0.0);\n    assertEquals(tuple.getLong(\"field_l\").longValue(), 7);\n\n    // Assert field order\n    //assertResponseContains(clients.get(0), sParams, \"{\\\"docs\\\":[{\\\"id\\\":\\\"8\\\",\\\"field_i\\\":60,\\\"str_s\\\":\\\"c\\\",\\\"field_i\\\":60,\\\"field_f\\\":60.5,\\\"field_d\\\":60.5,\\\"field_l\\\":60}\");\n\n\n    sParams = mapParams(CommonParams.QT, \"/sql\", \"stmt\",\n        \"select id, field_i, str_s from collection1 where text_t='XXXX' order by id desc\");\n\n    tuples = getTuples(sParams, baseUrl);\n\n    assert (tuples.size() == 8);\n\n    tuple = tuples.get(0);\n    assert (tuple.getLong(\"id\") == 8);\n    assert (tuple.getLong(\"field_i\") == 60);\n    assert (tuple.get(\"str_s\").equals(\"c\"));\n\n    tuple = tuples.get(1);\n    assert (tuple.getLong(\"id\") == 7);\n    assert (tuple.getLong(\"field_i\") == 50);\n    assert (tuple.get(\"str_s\").equals(\"c\"));\n\n    tuple = tuples.get(2);\n    assert (tuple.getLong(\"id\") == 6);\n    assert (tuple.getLong(\"field_i\") == 40);\n    assert (tuple.get(\"str_s\").equals(\"c\"));\n\n    tuple = tuples.get(3);\n    assert (tuple.getLong(\"id\") == 5);\n    assert (tuple.getLong(\"field_i\") == 30);\n    assert (tuple.get(\"str_s\").equals(\"c\"));\n\n    tuple = tuples.get(4);\n    assert (tuple.getLong(\"id\") == 4);\n    assert (tuple.getLong(\"field_i\") == 11);\n    assert (tuple.get(\"str_s\").equals(\"b\"));\n\n    tuple = tuples.get(5);\n    assert (tuple.getLong(\"id\") == 3);\n    assert (tuple.getLong(\"field_i\") == 20);\n    assert (tuple.get(\"str_s\").equals(\"a\"));\n\n    tuple = tuples.get(6);\n    assert (tuple.getLong(\"id\") == 2);\n    assert (tuple.getLong(\"field_i\") == 8);\n    assert (tuple.get(\"str_s\").equals(\"b\"));\n\n    tuple = tuples.get(7);\n    assert (tuple.getLong(\"id\") == 1);\n    assert (tuple.getLong(\"field_i\") == 7);\n    assert (tuple.get(\"str_s\").equals(\"a\"));\n\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select id, field_i, str_s from collection1 where text_t='XXXX' order by field_i desc limit 1\");\n\n    tuples = getTuples(sParams, baseUrl);\n\n    assert (tuples.size() == 1);\n\n    tuple = tuples.get(0);\n    assert (tuple.getLong(\"id\") == 8);\n    assert (tuple.getLong(\"field_i\") == 60);\n    assert (tuple.get(\"str_s\").equals(\"c\"));\n\n    sParams = mapParams(CommonParams.QT, \"/sql\", \"stmt\",\n        \"select id, field_i, str_s from collection1 where text_t='XXXX' AND id='(1 2 3)' order by field_i desc\");\n\n    tuples = getTuples(sParams, baseUrl);\n\n    assert (tuples.size() == 3);\n\n    tuple = tuples.get(0);\n    assert (tuple.getLong(\"id\") == 3);\n    assert (tuple.getLong(\"field_i\") == 20);\n    assert (tuple.get(\"str_s\").equals(\"a\"));\n\n    tuple = tuples.get(1);\n    assert (tuple.getLong(\"id\") == 2);\n    assert (tuple.getLong(\"field_i\") == 8);\n    assert (tuple.get(\"str_s\").equals(\"b\"));\n\n    tuple = tuples.get(2);\n    assert (tuple.getLong(\"id\") == 1);\n    assert (tuple.getLong(\"field_i\") == 7);\n    assert (tuple.get(\"str_s\").equals(\"a\"));\n\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\",\n        \"select id as myId, field_i as myInt, str_s as myString from collection1 where text_t='XXXX' AND id='(1 2 3)' order by myInt desc\");\n\n    tuples = getTuples(sParams, baseUrl);\n\n    assert (tuples.size() == 3);\n\n    tuple = tuples.get(0);\n    assert (tuple.getLong(\"myId\") == 3);\n    assert (tuple.getLong(\"myInt\") == 20);\n    assert (tuple.get(\"myString\").equals(\"a\"));\n\n    tuple = tuples.get(1);\n    assert (tuple.getLong(\"myId\") == 2);\n    assert (tuple.getLong(\"myInt\") == 8);\n    assert (tuple.get(\"myString\").equals(\"b\"));\n\n    tuple = tuples.get(2);\n    assert (tuple.getLong(\"myId\") == 1);\n    assert (tuple.getLong(\"myInt\") == 7);\n    assert (tuple.get(\"myString\").equals(\"a\"));\n\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\",\n        \"select id as myId, field_i as myInt, str_s as myString from collection1 where text_t='XXXX' AND id='(1 2 3)' order by field_i desc\");\n\n    tuples = getTuples(sParams, baseUrl);\n\n    assert (tuples.size() == 3);\n\n    tuple = tuples.get(0);\n    assert (tuple.getLong(\"myId\") == 3);\n    assert (tuple.getLong(\"myInt\") == 20);\n    assert (tuple.get(\"myString\").equals(\"a\"));\n\n    tuple = tuples.get(1);\n    assert (tuple.getLong(\"myId\") == 2);\n    assert (tuple.getLong(\"myInt\") == 8);\n    assert (tuple.get(\"myString\").equals(\"b\"));\n\n    tuple = tuples.get(2);\n    assert (tuple.getLong(\"myId\") == 1);\n    assert (tuple.getLong(\"myInt\") == 7);\n    assert (tuple.get(\"myString\").equals(\"a\"));\n\n    // SOLR-8845 - Test to make sure that 1 = 0 works for things like Spark SQL\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select id, field_i, str_s from collection1 where 1 = 0\");\n\n    tuples = getTuples(sParams, baseUrl);\n\n    assertEquals(0, tuples.size());\n\n  }\n\n","sourceOld":"  @Test\n  public void testBasicSelect() throws Exception {\n\n\n    new UpdateRequest()\n        .add(\"id\", \"1\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"7\", \"field_f\", \"7.5\", \"field_d\", \"7.5\", \"field_l\", \"7\")\n        .add(\"id\", \"2\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"8\", \"field_f\", \"8.5\", \"field_d\", \"8.5\", \"field_l\", \"8\")\n        .add(\"id\", \"3\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\", \"field_f\", \"20.5\", \"field_d\", \"20.5\", \"field_l\", \"20\")\n        .add(\"id\", \"4\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"11\", \"field_f\", \"11.5\", \"field_d\", \"11.5\", \"field_l\", \"11\")\n        .add(\"id\", \"5\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\", \"field_f\", \"30.5\", \"field_d\", \"30.5\", \"field_l\", \"30\")\n        .add(\"id\", \"6\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"40\", \"field_f\", \"40.5\", \"field_d\", \"40.5\", \"field_l\", \"40\")\n        .add(\"id\", \"7\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\", \"field_f\", \"50.5\", \"field_d\", \"50.5\", \"field_l\", \"50\")\n        .add(\"id\", \"8\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\", \"field_f\", \"60.5\", \"field_d\", \"60.5\", \"field_l\", \"60\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    SolrParams sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\",\n        \"select id, field_i, str_s, field_f, field_d, field_l from collection1 where (text_t='(XXXX)' OR text_t='XXXX') AND text_t='XXXX' order by field_i desc\");\n\n    String baseUrl = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    List<Tuple> tuples = getTuples(sParams, baseUrl);\n\n    assert (tuples.size() == 8);\n    Tuple tuple;\n\n    tuple = tuples.get(0);\n    assertEquals(tuple.getLong(\"id\").longValue(), 8);\n    assertEquals(tuple.getLong(\"field_i\").longValue(), 60);\n    assert (tuple.get(\"str_s\").equals(\"c\"));\n    assertEquals(tuple.getLong(\"field_i\").longValue(), 60L);\n    assertEquals(tuple.getDouble(\"field_f\"), 60.5, 0.0);\n    assertEquals(tuple.getDouble(\"field_d\"), 60.5, 0.0);\n    assertEquals(tuple.getLong(\"field_l\").longValue(), 60);\n\n    tuple = tuples.get(1);\n    assertEquals(tuple.getLong(\"id\").longValue(), 7);\n    assertEquals(tuple.getLong(\"field_i\").longValue(), 50);\n    assert (tuple.get(\"str_s\").equals(\"c\"));\n    assertEquals(tuple.getLong(\"field_i\").longValue(), 50);\n    assertEquals(tuple.getDouble(\"field_f\"), 50.5, 0.0);\n    assertEquals(tuple.getDouble(\"field_d\"), 50.5, 0.0);\n    assertEquals(tuple.getLong(\"field_l\").longValue(), 50);\n\n    tuple = tuples.get(2);\n    assertEquals(tuple.getLong(\"id\").longValue(), 6);\n    assertEquals(tuple.getLong(\"field_i\").longValue(), 40);\n    assert (tuple.get(\"str_s\").equals(\"c\"));\n    assertEquals(tuple.getLong(\"field_i\").longValue(), 40);\n    assertEquals(tuple.getDouble(\"field_f\"), 40.5, 0.0);\n    assertEquals(tuple.getDouble(\"field_d\"), 40.5, 0.0);\n    assertEquals(tuple.getLong(\"field_l\").longValue(), 40);\n\n    tuple = tuples.get(3);\n    assertEquals(tuple.getLong(\"id\").longValue(), 5);\n    assertEquals(tuple.getLong(\"field_i\").longValue(), 30);\n    assert (tuple.get(\"str_s\").equals(\"c\"));\n    assertEquals(tuple.getLong(\"field_i\").longValue(), 30);\n    assertEquals(tuple.getDouble(\"field_f\"), 30.5, 0.0);\n    assertEquals(tuple.getDouble(\"field_d\"), 30.5, 0.0);\n    assertEquals(tuple.getLong(\"field_l\").longValue(), 30);\n\n    tuple = tuples.get(4);\n    assertEquals(tuple.getLong(\"id\").longValue(), 3);\n    assertEquals(tuple.getLong(\"field_i\").longValue(), 20);\n    assert (tuple.get(\"str_s\").equals(\"a\"));\n    assertEquals(tuple.getLong(\"field_i\").longValue(), 20);\n    assertEquals(tuple.getDouble(\"field_f\"), 20.5, 0.0);\n    assertEquals(tuple.getDouble(\"field_d\"), 20.5, 0.0);\n    assertEquals(tuple.getLong(\"field_l\").longValue(), 20);\n\n    tuple = tuples.get(5);\n    assertEquals(tuple.getLong(\"id\").longValue(), 4);\n    assertEquals(tuple.getLong(\"field_i\").longValue(), 11);\n    assert (tuple.get(\"str_s\").equals(\"b\"));\n    assertEquals(tuple.getLong(\"field_i\").longValue(), 11);\n    assertEquals(tuple.getDouble(\"field_f\"), 11.5, 0.0);\n    assertEquals(tuple.getDouble(\"field_d\"), 11.5, 0.0);\n    assertEquals(tuple.getLong(\"field_l\").longValue(), 11);\n\n    tuple = tuples.get(6);\n    assertEquals(tuple.getLong(\"id\").longValue(), 2);\n    assertEquals(tuple.getLong(\"field_i\").longValue(), 8);\n    assert (tuple.get(\"str_s\").equals(\"b\"));\n    assertEquals(tuple.getLong(\"field_i\").longValue(), 8);\n    assertEquals(tuple.getDouble(\"field_f\"), 8.5, 0.0);\n    assertEquals(tuple.getDouble(\"field_d\"), 8.5, 0.0);\n    assertEquals(tuple.getLong(\"field_l\").longValue(), 8);\n\n    tuple = tuples.get(7);\n    assertEquals(tuple.getLong(\"id\").longValue(), 1);\n    assertEquals(tuple.getLong(\"field_i\").longValue(), 7);\n    assert (tuple.get(\"str_s\").equals(\"a\"));\n    assertEquals(tuple.getLong(\"field_i\").longValue(), 7);\n    assertEquals(tuple.getDouble(\"field_f\"), 7.5, 0.0);\n    assertEquals(tuple.getDouble(\"field_d\"), 7.5, 0.0);\n    assertEquals(tuple.getLong(\"field_l\").longValue(), 7);\n\n    // Assert field order\n    //assertResponseContains(clients.get(0), sParams, \"{\\\"docs\\\":[{\\\"id\\\":\\\"8\\\",\\\"field_i\\\":60,\\\"str_s\\\":\\\"c\\\",\\\"field_i\\\":60,\\\"field_f\\\":60.5,\\\"field_d\\\":60.5,\\\"field_l\\\":60}\");\n\n\n    sParams = mapParams(CommonParams.QT, \"/sql\", \"stmt\",\n        \"select id, field_i, str_s from collection1 where text_t='XXXX' order by id desc\");\n\n    tuples = getTuples(sParams, baseUrl);\n\n    assert (tuples.size() == 8);\n\n    tuple = tuples.get(0);\n    assert (tuple.getLong(\"id\") == 8);\n    assert (tuple.getLong(\"field_i\") == 60);\n    assert (tuple.get(\"str_s\").equals(\"c\"));\n\n    tuple = tuples.get(1);\n    assert (tuple.getLong(\"id\") == 7);\n    assert (tuple.getLong(\"field_i\") == 50);\n    assert (tuple.get(\"str_s\").equals(\"c\"));\n\n    tuple = tuples.get(2);\n    assert (tuple.getLong(\"id\") == 6);\n    assert (tuple.getLong(\"field_i\") == 40);\n    assert (tuple.get(\"str_s\").equals(\"c\"));\n\n    tuple = tuples.get(3);\n    assert (tuple.getLong(\"id\") == 5);\n    assert (tuple.getLong(\"field_i\") == 30);\n    assert (tuple.get(\"str_s\").equals(\"c\"));\n\n    tuple = tuples.get(4);\n    assert (tuple.getLong(\"id\") == 4);\n    assert (tuple.getLong(\"field_i\") == 11);\n    assert (tuple.get(\"str_s\").equals(\"b\"));\n\n    tuple = tuples.get(5);\n    assert (tuple.getLong(\"id\") == 3);\n    assert (tuple.getLong(\"field_i\") == 20);\n    assert (tuple.get(\"str_s\").equals(\"a\"));\n\n    tuple = tuples.get(6);\n    assert (tuple.getLong(\"id\") == 2);\n    assert (tuple.getLong(\"field_i\") == 8);\n    assert (tuple.get(\"str_s\").equals(\"b\"));\n\n    tuple = tuples.get(7);\n    assert (tuple.getLong(\"id\") == 1);\n    assert (tuple.getLong(\"field_i\") == 7);\n    assert (tuple.get(\"str_s\").equals(\"a\"));\n\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select id, field_i, str_s from collection1 where text_t='XXXX' order by field_i desc limit 1\");\n\n    tuples = getTuples(sParams, baseUrl);\n\n    assert (tuples.size() == 1);\n\n    tuple = tuples.get(0);\n    assert (tuple.getLong(\"id\") == 8);\n    assert (tuple.getLong(\"field_i\") == 60);\n    assert (tuple.get(\"str_s\").equals(\"c\"));\n\n    sParams = mapParams(CommonParams.QT, \"/sql\", \"stmt\",\n        \"select id, field_i, str_s from collection1 where text_t='XXXX' AND id='(1 2 3)' order by field_i desc\");\n\n    tuples = getTuples(sParams, baseUrl);\n\n    assert (tuples.size() == 3);\n\n    tuple = tuples.get(0);\n    assert (tuple.getLong(\"id\") == 3);\n    assert (tuple.getLong(\"field_i\") == 20);\n    assert (tuple.get(\"str_s\").equals(\"a\"));\n\n    tuple = tuples.get(1);\n    assert (tuple.getLong(\"id\") == 2);\n    assert (tuple.getLong(\"field_i\") == 8);\n    assert (tuple.get(\"str_s\").equals(\"b\"));\n\n    tuple = tuples.get(2);\n    assert (tuple.getLong(\"id\") == 1);\n    assert (tuple.getLong(\"field_i\") == 7);\n    assert (tuple.get(\"str_s\").equals(\"a\"));\n\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\",\n        \"select id as myId, field_i as myInt, str_s as myString from collection1 where text_t='XXXX' AND id='(1 2 3)' order by myInt desc\");\n\n    tuples = getTuples(sParams, baseUrl);\n\n    assert (tuples.size() == 3);\n\n    tuple = tuples.get(0);\n    assert (tuple.getLong(\"myId\") == 3);\n    assert (tuple.getLong(\"myInt\") == 20);\n    assert (tuple.get(\"myString\").equals(\"a\"));\n\n    tuple = tuples.get(1);\n    assert (tuple.getLong(\"myId\") == 2);\n    assert (tuple.getLong(\"myInt\") == 8);\n    assert (tuple.get(\"myString\").equals(\"b\"));\n\n    tuple = tuples.get(2);\n    assert (tuple.getLong(\"myId\") == 1);\n    assert (tuple.getLong(\"myInt\") == 7);\n    assert (tuple.get(\"myString\").equals(\"a\"));\n\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\",\n        \"select id as myId, field_i as myInt, str_s as myString from collection1 where text_t='XXXX' AND id='(1 2 3)' order by field_i desc\");\n\n    tuples = getTuples(sParams, baseUrl);\n\n    assert (tuples.size() == 3);\n\n    tuple = tuples.get(0);\n    assert (tuple.getLong(\"myId\") == 3);\n    assert (tuple.getLong(\"myInt\") == 20);\n    assert (tuple.get(\"myString\").equals(\"a\"));\n\n    tuple = tuples.get(1);\n    assert (tuple.getLong(\"myId\") == 2);\n    assert (tuple.getLong(\"myInt\") == 8);\n    assert (tuple.get(\"myString\").equals(\"b\"));\n\n    tuple = tuples.get(2);\n    assert (tuple.getLong(\"myId\") == 1);\n    assert (tuple.getLong(\"myInt\") == 7);\n    assert (tuple.get(\"myString\").equals(\"a\"));\n\n    // SOLR-8845 - Test to make sure that 1 = 0 works for things like Spark SQL\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select id, field_i, str_s from collection1 where 1 = 0\");\n\n    tuples = getTuples(sParams, baseUrl);\n\n    assertEquals(0, tuples.size());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9c235d2e63c37f49115f8f57af948338851f2437":["6299ebaf4e18ea70d828fe29b3779aa345cd4b11"],"36b1ce25b5b465615c00f409ce694664abbe7bd2":["612da0a0a2d5f4409da55729b9833e799f905ac5"],"5f90f992f4e4fdedb0fe0cc2fe3925df71a5b9f7":["3ec71d4701edbd96cfea97384101d13611393552"],"a71f63026529f3c1f03cfdd664910873ab2369ae":["7dbb74d09c5d364f22c2b7dfe3b0ab2f587cec81"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["9c235d2e63c37f49115f8f57af948338851f2437","826d15444ddf61716dc768c229cd54b2c2ccce1c"],"55b50463286869f584cf849d1587a0fcd54d1dfa":["908656025e558a536b1b781cf8d02a84e7acb262","9c235d2e63c37f49115f8f57af948338851f2437"],"3ec71d4701edbd96cfea97384101d13611393552":["36479872320bb00635cb97ca6757614c88562e1b"],"36479872320bb00635cb97ca6757614c88562e1b":["8da9a71da64ce12a97dcfcdd912893aeb1fa2981"],"908656025e558a536b1b781cf8d02a84e7acb262":["7b67f9cce921a1f94ec0a28c4eb85bcd887c8aa4"],"7b67f9cce921a1f94ec0a28c4eb85bcd887c8aa4":["d984627825732e682759c22df7a3b171a80f3812"],"116fdd6b9e04e18a6547a5650bc0afd3fda020aa":["d470c8182e92b264680e34081b75e70a9f2b3c89","3f20deebda1cf327549c84cb60464135abd31c71"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3f20deebda1cf327549c84cb60464135abd31c71":["36b1ce25b5b465615c00f409ce694664abbe7bd2"],"e66a459d38c1c4a2f97128433dab546f683a9fed":["9c235d2e63c37f49115f8f57af948338851f2437","826d15444ddf61716dc768c229cd54b2c2ccce1c"],"ab68488225b6a6c357dda72ed11dedca9914a192":["d4f1c9476bf735df68b562c769abe7bc56886c2f","6106d879512729bf1e4840d612448c4180d110c8"],"94e31112925a65b1d36f9064772080e25b5ef373":["22191e72f6c40dec88c9b94f9bb55c7527772a47"],"22191e72f6c40dec88c9b94f9bb55c7527772a47":["600937be95b5a041815220371fa7882e73031d56"],"612da0a0a2d5f4409da55729b9833e799f905ac5":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"7b2c4e17100e207bc842e56d016b9f91f411304e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6299ebaf4e18ea70d828fe29b3779aa345cd4b11":["5f90f992f4e4fdedb0fe0cc2fe3925df71a5b9f7"],"826d15444ddf61716dc768c229cd54b2c2ccce1c":["9c235d2e63c37f49115f8f57af948338851f2437"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["55b50463286869f584cf849d1587a0fcd54d1dfa","d470c8182e92b264680e34081b75e70a9f2b3c89"],"28288370235ed02234a64753cdbf0c6ec096304a":["7dbb74d09c5d364f22c2b7dfe3b0ab2f587cec81","a71f63026529f3c1f03cfdd664910873ab2369ae"],"6106d879512729bf1e4840d612448c4180d110c8":["d4f1c9476bf735df68b562c769abe7bc56886c2f"],"c52eabf9563c6ddad6c19e4af424531007b0910c":["28288370235ed02234a64753cdbf0c6ec096304a"],"600937be95b5a041815220371fa7882e73031d56":["c58a62203315881cce5089ef67ffee6b8a988a75"],"d984627825732e682759c22df7a3b171a80f3812":["6299ebaf4e18ea70d828fe29b3779aa345cd4b11"],"c58a62203315881cce5089ef67ffee6b8a988a75":["c52eabf9563c6ddad6c19e4af424531007b0910c"],"d4f1c9476bf735df68b562c769abe7bc56886c2f":["116fdd6b9e04e18a6547a5650bc0afd3fda020aa"],"7dbb74d09c5d364f22c2b7dfe3b0ab2f587cec81":["d4f1c9476bf735df68b562c769abe7bc56886c2f"],"8da9a71da64ce12a97dcfcdd912893aeb1fa2981":["7b2c4e17100e207bc842e56d016b9f91f411304e"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["ab68488225b6a6c357dda72ed11dedca9914a192","a71f63026529f3c1f03cfdd664910873ab2369ae"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["94e31112925a65b1d36f9064772080e25b5ef373"]},"commit2Childs":{"9c235d2e63c37f49115f8f57af948338851f2437":["d470c8182e92b264680e34081b75e70a9f2b3c89","55b50463286869f584cf849d1587a0fcd54d1dfa","e66a459d38c1c4a2f97128433dab546f683a9fed","826d15444ddf61716dc768c229cd54b2c2ccce1c"],"36b1ce25b5b465615c00f409ce694664abbe7bd2":["3f20deebda1cf327549c84cb60464135abd31c71"],"5f90f992f4e4fdedb0fe0cc2fe3925df71a5b9f7":["6299ebaf4e18ea70d828fe29b3779aa345cd4b11"],"a71f63026529f3c1f03cfdd664910873ab2369ae":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["116fdd6b9e04e18a6547a5650bc0afd3fda020aa","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"55b50463286869f584cf849d1587a0fcd54d1dfa":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"3ec71d4701edbd96cfea97384101d13611393552":["5f90f992f4e4fdedb0fe0cc2fe3925df71a5b9f7"],"908656025e558a536b1b781cf8d02a84e7acb262":["55b50463286869f584cf849d1587a0fcd54d1dfa"],"36479872320bb00635cb97ca6757614c88562e1b":["3ec71d4701edbd96cfea97384101d13611393552"],"7b67f9cce921a1f94ec0a28c4eb85bcd887c8aa4":["908656025e558a536b1b781cf8d02a84e7acb262"],"116fdd6b9e04e18a6547a5650bc0afd3fda020aa":["d4f1c9476bf735df68b562c769abe7bc56886c2f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7b2c4e17100e207bc842e56d016b9f91f411304e"],"3f20deebda1cf327549c84cb60464135abd31c71":["116fdd6b9e04e18a6547a5650bc0afd3fda020aa"],"e66a459d38c1c4a2f97128433dab546f683a9fed":[],"ab68488225b6a6c357dda72ed11dedca9914a192":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"94e31112925a65b1d36f9064772080e25b5ef373":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"22191e72f6c40dec88c9b94f9bb55c7527772a47":["94e31112925a65b1d36f9064772080e25b5ef373"],"612da0a0a2d5f4409da55729b9833e799f905ac5":["36b1ce25b5b465615c00f409ce694664abbe7bd2"],"7b2c4e17100e207bc842e56d016b9f91f411304e":["8da9a71da64ce12a97dcfcdd912893aeb1fa2981"],"6299ebaf4e18ea70d828fe29b3779aa345cd4b11":["9c235d2e63c37f49115f8f57af948338851f2437","d984627825732e682759c22df7a3b171a80f3812"],"826d15444ddf61716dc768c229cd54b2c2ccce1c":["d470c8182e92b264680e34081b75e70a9f2b3c89","e66a459d38c1c4a2f97128433dab546f683a9fed"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["612da0a0a2d5f4409da55729b9833e799f905ac5"],"28288370235ed02234a64753cdbf0c6ec096304a":["c52eabf9563c6ddad6c19e4af424531007b0910c"],"6106d879512729bf1e4840d612448c4180d110c8":["ab68488225b6a6c357dda72ed11dedca9914a192"],"c52eabf9563c6ddad6c19e4af424531007b0910c":["c58a62203315881cce5089ef67ffee6b8a988a75"],"d984627825732e682759c22df7a3b171a80f3812":["7b67f9cce921a1f94ec0a28c4eb85bcd887c8aa4"],"600937be95b5a041815220371fa7882e73031d56":["22191e72f6c40dec88c9b94f9bb55c7527772a47"],"d4f1c9476bf735df68b562c769abe7bc56886c2f":["ab68488225b6a6c357dda72ed11dedca9914a192","6106d879512729bf1e4840d612448c4180d110c8","7dbb74d09c5d364f22c2b7dfe3b0ab2f587cec81"],"c58a62203315881cce5089ef67ffee6b8a988a75":["600937be95b5a041815220371fa7882e73031d56"],"7dbb74d09c5d364f22c2b7dfe3b0ab2f587cec81":["a71f63026529f3c1f03cfdd664910873ab2369ae","28288370235ed02234a64753cdbf0c6ec096304a"],"8da9a71da64ce12a97dcfcdd912893aeb1fa2981":["36479872320bb00635cb97ca6757614c88562e1b"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e66a459d38c1c4a2f97128433dab546f683a9fed","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}