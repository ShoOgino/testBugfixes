{"path":"lucene/core/src/java/org/apache/lucene/document/SortedNumericDocValuesRangeQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","commits":[{"id":"9fc47cb7b4346802411bb432f501ed0673d7119e","date":1512640179,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/SortedNumericDocValuesRangeQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/SortedNumericDocValuesRangeQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n    return new ConstantScoreWeight(this, boost) {\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return DocValues.isCacheable(ctx, field);\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        SortedNumericDocValues values = getValues(context.reader(), field);\n        if (values == null) {\n          return null;\n        }\n        final NumericDocValues singleton = DocValues.unwrapSingleton(values);\n        final TwoPhaseIterator iterator;\n        if (singleton != null) {\n          iterator = new TwoPhaseIterator(singleton) {\n            @Override\n            public boolean matches() throws IOException {\n              final long value = singleton.longValue();\n              return value >= lowerValue && value <= upperValue;\n            }\n\n            @Override\n            public float matchCost() {\n              return 2; // 2 comparisons\n            }\n          };\n        } else {\n          iterator = new TwoPhaseIterator(values) {\n            @Override\n            public boolean matches() throws IOException {\n              for (int i = 0, count = values.docValueCount(); i < count; ++i) {\n                final long value = values.nextValue();\n                if (value < lowerValue) {\n                  continue;\n                }\n                // Values are sorted, so the first value that is >= lowerValue is our best candidate\n                return value <= upperValue;\n              }\n              return false; // all values were < lowerValue\n            }\n\n            @Override\n            public float matchCost() {\n              return 2; // 2 comparisons\n            }\n          };\n        }\n        return new ConstantScoreScorer(this, score(), iterator);\n      }\n\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    return new ConstantScoreWeight(this, boost) {\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return DocValues.isCacheable(ctx, field);\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        SortedNumericDocValues values = getValues(context.reader(), field);\n        if (values == null) {\n          return null;\n        }\n        final NumericDocValues singleton = DocValues.unwrapSingleton(values);\n        final TwoPhaseIterator iterator;\n        if (singleton != null) {\n          iterator = new TwoPhaseIterator(singleton) {\n            @Override\n            public boolean matches() throws IOException {\n              final long value = singleton.longValue();\n              return value >= lowerValue && value <= upperValue;\n            }\n\n            @Override\n            public float matchCost() {\n              return 2; // 2 comparisons\n            }\n          };\n        } else {\n          iterator = new TwoPhaseIterator(values) {\n            @Override\n            public boolean matches() throws IOException {\n              for (int i = 0, count = values.docValueCount(); i < count; ++i) {\n                final long value = values.nextValue();\n                if (value < lowerValue) {\n                  continue;\n                }\n                // Values are sorted, so the first value that is >= lowerValue is our best candidate\n                return value <= upperValue;\n              }\n              return false; // all values were < lowerValue\n            }\n\n            @Override\n            public float matchCost() {\n              return 2; // 2 comparisons\n            }\n          };\n        }\n        return new ConstantScoreScorer(this, score(), iterator);\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"417142ff08fda9cf0b72d5133e63097a166c6458","date":1512729693,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/document/SortedNumericDocValuesRangeQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/SortedNumericDocValuesRangeQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n    return new ConstantScoreWeight(this, boost) {\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return DocValues.isCacheable(ctx, field);\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        SortedNumericDocValues values = getValues(context.reader(), field);\n        if (values == null) {\n          return null;\n        }\n        final NumericDocValues singleton = DocValues.unwrapSingleton(values);\n        final TwoPhaseIterator iterator;\n        if (singleton != null) {\n          iterator = new TwoPhaseIterator(singleton) {\n            @Override\n            public boolean matches() throws IOException {\n              final long value = singleton.longValue();\n              return value >= lowerValue && value <= upperValue;\n            }\n\n            @Override\n            public float matchCost() {\n              return 2; // 2 comparisons\n            }\n          };\n        } else {\n          iterator = new TwoPhaseIterator(values) {\n            @Override\n            public boolean matches() throws IOException {\n              for (int i = 0, count = values.docValueCount(); i < count; ++i) {\n                final long value = values.nextValue();\n                if (value < lowerValue) {\n                  continue;\n                }\n                // Values are sorted, so the first value that is >= lowerValue is our best candidate\n                return value <= upperValue;\n              }\n              return false; // all values were < lowerValue\n            }\n\n            @Override\n            public float matchCost() {\n              return 2; // 2 comparisons\n            }\n          };\n        }\n        return new ConstantScoreScorer(this, score(), iterator);\n      }\n\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    return new ConstantScoreWeight(this, boost) {\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return DocValues.isCacheable(ctx, field);\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        SortedNumericDocValues values = getValues(context.reader(), field);\n        if (values == null) {\n          return null;\n        }\n        final NumericDocValues singleton = DocValues.unwrapSingleton(values);\n        final TwoPhaseIterator iterator;\n        if (singleton != null) {\n          iterator = new TwoPhaseIterator(singleton) {\n            @Override\n            public boolean matches() throws IOException {\n              final long value = singleton.longValue();\n              return value >= lowerValue && value <= upperValue;\n            }\n\n            @Override\n            public float matchCost() {\n              return 2; // 2 comparisons\n            }\n          };\n        } else {\n          iterator = new TwoPhaseIterator(values) {\n            @Override\n            public boolean matches() throws IOException {\n              for (int i = 0, count = values.docValueCount(); i < count; ++i) {\n                final long value = values.nextValue();\n                if (value < lowerValue) {\n                  continue;\n                }\n                // Values are sorted, so the first value that is >= lowerValue is our best candidate\n                return value <= upperValue;\n              }\n              return false; // all values were < lowerValue\n            }\n\n            @Override\n            public float matchCost() {\n              return 2; // 2 comparisons\n            }\n          };\n        }\n        return new ConstantScoreScorer(this, score(), iterator);\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9c226b0eeb8b028f572020f459851a663a2c064e","date":1542377651,"type":3,"author":"Christophe Bismuth","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/SortedNumericDocValuesRangeQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/SortedNumericDocValuesRangeQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n    return new ConstantScoreWeight(this, boost) {\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return DocValues.isCacheable(ctx, field);\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        SortedNumericDocValues values = getValues(context.reader(), field);\n        if (values == null) {\n          return null;\n        }\n        final NumericDocValues singleton = DocValues.unwrapSingleton(values);\n        final TwoPhaseIterator iterator;\n        if (singleton != null) {\n          iterator = new TwoPhaseIterator(singleton) {\n            @Override\n            public boolean matches() throws IOException {\n              final long value = singleton.longValue();\n              return value >= lowerValue && value <= upperValue;\n            }\n\n            @Override\n            public float matchCost() {\n              return 2; // 2 comparisons\n            }\n          };\n        } else {\n          iterator = new TwoPhaseIterator(values) {\n            @Override\n            public boolean matches() throws IOException {\n              for (int i = 0, count = values.docValueCount(); i < count; ++i) {\n                final long value = values.nextValue();\n                if (value < lowerValue) {\n                  continue;\n                }\n                // Values are sorted, so the first value that is >= lowerValue is our best candidate\n                return value <= upperValue;\n              }\n              return false; // all values were < lowerValue\n            }\n\n            @Override\n            public float matchCost() {\n              return 2; // 2 comparisons\n            }\n          };\n        }\n        return new ConstantScoreScorer(this, score(), scoreMode, iterator);\n      }\n\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n    return new ConstantScoreWeight(this, boost) {\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return DocValues.isCacheable(ctx, field);\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        SortedNumericDocValues values = getValues(context.reader(), field);\n        if (values == null) {\n          return null;\n        }\n        final NumericDocValues singleton = DocValues.unwrapSingleton(values);\n        final TwoPhaseIterator iterator;\n        if (singleton != null) {\n          iterator = new TwoPhaseIterator(singleton) {\n            @Override\n            public boolean matches() throws IOException {\n              final long value = singleton.longValue();\n              return value >= lowerValue && value <= upperValue;\n            }\n\n            @Override\n            public float matchCost() {\n              return 2; // 2 comparisons\n            }\n          };\n        } else {\n          iterator = new TwoPhaseIterator(values) {\n            @Override\n            public boolean matches() throws IOException {\n              for (int i = 0, count = values.docValueCount(); i < count; ++i) {\n                final long value = values.nextValue();\n                if (value < lowerValue) {\n                  continue;\n                }\n                // Values are sorted, so the first value that is >= lowerValue is our best candidate\n                return value <= upperValue;\n              }\n              return false; // all values were < lowerValue\n            }\n\n            @Override\n            public float matchCost() {\n              return 2; // 2 comparisons\n            }\n          };\n        }\n        return new ConstantScoreScorer(this, score(), iterator);\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9fc47cb7b4346802411bb432f501ed0673d7119e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9c226b0eeb8b028f572020f459851a663a2c064e":["417142ff08fda9cf0b72d5133e63097a166c6458"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9c226b0eeb8b028f572020f459851a663a2c064e"],"417142ff08fda9cf0b72d5133e63097a166c6458":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9fc47cb7b4346802411bb432f501ed0673d7119e"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9fc47cb7b4346802411bb432f501ed0673d7119e","417142ff08fda9cf0b72d5133e63097a166c6458"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["417142ff08fda9cf0b72d5133e63097a166c6458"],"9c226b0eeb8b028f572020f459851a663a2c064e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"417142ff08fda9cf0b72d5133e63097a166c6458":["9c226b0eeb8b028f572020f459851a663a2c064e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}