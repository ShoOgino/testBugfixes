{"path":"solr/core/src/java/org/apache/solr/core/JarRepository#getJarIncRef(String).mjava","commits":[{"id":"b96ad5eead3ef9b09cee72d7b54b8bfc369859bd","date":1419078070,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/JarRepository#getJarIncRef(String).mjava","pathOld":"/dev/null","sourceNew":"  /**Returns the contents of a jar and increments a reference count. Please return the same\n   * object to decerease the refcount\n   * @param key it is a combination of blobname and version like blobName/version\n   * @return The reference of a jar\n   */\n  public JarContentRef getJarIncRef(String key) throws IOException {\n    JarContent jar = jars.get(key);\n    if(jar ==null){\n      if(this.coreContainer.isZooKeeperAware()){\n        ClusterState cs = this.coreContainer.getZkController().getZkStateReader().getClusterState();\n        DocCollection coll = cs.getCollectionOrNull(CollectionsHandler.SYSTEM_COLL);\n        if(coll == null) throw new SolrException(SERVICE_UNAVAILABLE,\n            \".system collection not available\");\n        Slice slice = coll.getActiveSlices().iterator().next();\n        if(slice == null) throw new SolrException(SERVICE_UNAVAILABLE,\n            \".no active slices for .system collection\");\n        Replica replica = slice.getReplicas().iterator().next();\n        if(replica == null) throw new SolrException(SERVICE_UNAVAILABLE,\n            \".no active replica available for .system collection\");\n        String url = replica.getStr(BASE_URL_PROP) + \"/.system/blob/\"+ key+\"?wt=filestream\";\n\n        HttpClient httpClient = coreContainer.getUpdateShardHandler().getHttpClient();\n        HttpGet httpGet = new HttpGet(url);\n        ByteBuffer b;\n        try {\n          HttpResponse entity =  httpClient.execute(httpGet);\n          int statusCode = entity.getStatusLine().getStatusCode();\n          if(statusCode != 200){\n            throw new SolrException(SolrException.ErrorCode.NOT_FOUND,\"no such blob or version available: \"+ key);\n          }\n          b = SimplePostTool.inputStreamToByteArray(entity.getEntity().getContent());\n        } finally {\n          httpGet.releaseConnection();\n        }\n        jars.put(key,jar = new JarContent(key,b));\n      } else {\n\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\"Jar loading is not supported in non-cloud mode\");\n        //todo\n\n      }\n\n    }\n\n    JarContentRef ref = new JarContentRef(jar);\n    synchronized (jar.references) {\n      jar.references.add(ref);\n    }\n    return ref;\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7eea62cd13a5ddc4fb9abea3b3820ff3128cb26","date":1419094190,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/JarRepository#getJarIncRef(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/JarRepository#getJarIncRef(String).mjava","sourceNew":"  /**\n   * Returns the contents of a jar and increments a reference count. Please return the same object to decerease the refcount\n   * \n   * @param key\n   *          it is a combination of blobname and version like blobName/version\n   * @return The reference of a jar\n   */\n  public JarContentRef getJarIncRef(String key) throws IOException {\n    JarContent jar = jars.get(key);\n    if (jar == null) {\n      if (this.coreContainer.isZooKeeperAware()) {\n        ClusterState cs = this.coreContainer.getZkController().getZkStateReader().getClusterState();\n        DocCollection coll = cs.getCollectionOrNull(CollectionsHandler.SYSTEM_COLL);\n        if (coll == null) throw new SolrException(SERVICE_UNAVAILABLE, \".system collection not available\");\n        Slice slice = coll.getActiveSlices().iterator().next();\n        if (slice == null) throw new SolrException(SERVICE_UNAVAILABLE, \".no active slices for .system collection\");\n        Replica replica = slice.getReplicas().iterator().next();\n        if (replica == null) throw new SolrException(SERVICE_UNAVAILABLE, \".no active replica available for .system collection\");\n        String url = replica.getStr(BASE_URL_PROP) + \"/.system/blob/\" + key + \"?wt=filestream\";\n        \n        HttpClient httpClient = coreContainer.getUpdateShardHandler().getHttpClient();\n        HttpGet httpGet = new HttpGet(url);\n        ByteBuffer b;\n        try {\n          HttpResponse entity = httpClient.execute(httpGet);\n          int statusCode = entity.getStatusLine().getStatusCode();\n          if (statusCode != 200) {\n            throw new SolrException(SolrException.ErrorCode.NOT_FOUND, \"no such blob or version available: \" + key);\n          }\n          b = SimplePostTool.inputStreamToByteArray(entity.getEntity().getContent());\n        } finally {\n          httpGet.releaseConnection();\n        }\n        jars.put(key, jar = new JarContent(key, b));\n      } else {\n        \n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Jar loading is not supported in non-cloud mode\");\n        // todo\n        \n      }\n      \n    }\n    \n    JarContentRef ref = new JarContentRef(jar);\n    synchronized (jar.references) {\n      jar.references.add(ref);\n    }\n    return ref;\n    \n  }\n\n","sourceOld":"  /**Returns the contents of a jar and increments a reference count. Please return the same\n   * object to decerease the refcount\n   * @param key it is a combination of blobname and version like blobName/version\n   * @return The reference of a jar\n   */\n  public JarContentRef getJarIncRef(String key) throws IOException {\n    JarContent jar = jars.get(key);\n    if(jar ==null){\n      if(this.coreContainer.isZooKeeperAware()){\n        ClusterState cs = this.coreContainer.getZkController().getZkStateReader().getClusterState();\n        DocCollection coll = cs.getCollectionOrNull(CollectionsHandler.SYSTEM_COLL);\n        if(coll == null) throw new SolrException(SERVICE_UNAVAILABLE,\n            \".system collection not available\");\n        Slice slice = coll.getActiveSlices().iterator().next();\n        if(slice == null) throw new SolrException(SERVICE_UNAVAILABLE,\n            \".no active slices for .system collection\");\n        Replica replica = slice.getReplicas().iterator().next();\n        if(replica == null) throw new SolrException(SERVICE_UNAVAILABLE,\n            \".no active replica available for .system collection\");\n        String url = replica.getStr(BASE_URL_PROP) + \"/.system/blob/\"+ key+\"?wt=filestream\";\n\n        HttpClient httpClient = coreContainer.getUpdateShardHandler().getHttpClient();\n        HttpGet httpGet = new HttpGet(url);\n        ByteBuffer b;\n        try {\n          HttpResponse entity =  httpClient.execute(httpGet);\n          int statusCode = entity.getStatusLine().getStatusCode();\n          if(statusCode != 200){\n            throw new SolrException(SolrException.ErrorCode.NOT_FOUND,\"no such blob or version available: \"+ key);\n          }\n          b = SimplePostTool.inputStreamToByteArray(entity.getEntity().getContent());\n        } finally {\n          httpGet.releaseConnection();\n        }\n        jars.put(key,jar = new JarContent(key,b));\n      } else {\n\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\"Jar loading is not supported in non-cloud mode\");\n        //todo\n\n      }\n\n    }\n\n    JarContentRef ref = new JarContentRef(jar);\n    synchronized (jar.references) {\n      jar.references.add(ref);\n    }\n    return ref;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"432e578be72da02cfde62dcc7fb4fa8620bc85fd","date":1420557072,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/JarRepository#getJarIncRef(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/JarRepository#getJarIncRef(String).mjava","sourceNew":"  /**\n   * Returns the contents of a jar and increments a reference count. Please return the same object to decerease the refcount\n   * \n   * @param key\n   *          it is a combination of blobname and version like blobName/version\n   * @return The reference of a jar\n   */\n  public JarContentRef getJarIncRef(String key) throws IOException {\n    JarContent jar = jars.get(key);\n    if (jar == null) {\n      if (this.coreContainer.isZooKeeperAware()) {\n        ClusterState cs = this.coreContainer.getZkController().getZkStateReader().getClusterState();\n        DocCollection coll = cs.getCollectionOrNull(CollectionsHandler.SYSTEM_COLL);\n        if (coll == null) throw new SolrException(SERVICE_UNAVAILABLE, \".system collection not available\");\n        ArrayList<Slice> slices = new ArrayList<>(coll.getActiveSlices());\n        if (slices.isEmpty()) throw new SolrException(SERVICE_UNAVAILABLE, \".no active slices for .system collection\");\n        Collections.shuffle(slices); //do load balancing\n        Slice slice = slices.get(0) ;\n        Replica replica = slice.getReplicas().iterator().next();\n        if (replica == null) throw new SolrException(SERVICE_UNAVAILABLE, \".no active replica available for .system collection\");\n        String url = replica.getStr(BASE_URL_PROP) + \"/.system/blob/\" + key + \"?wt=filestream\";\n        \n        HttpClient httpClient = coreContainer.getUpdateShardHandler().getHttpClient();\n        HttpGet httpGet = new HttpGet(url);\n        ByteBuffer b;\n        try {\n          HttpResponse entity = httpClient.execute(httpGet);\n          int statusCode = entity.getStatusLine().getStatusCode();\n          if (statusCode != 200) {\n            throw new SolrException(SolrException.ErrorCode.NOT_FOUND, \"no such blob or version available: \" + key);\n          }\n          b = SimplePostTool.inputStreamToByteArray(entity.getEntity().getContent());\n        } finally {\n          httpGet.releaseConnection();\n        }\n        jars.put(key, jar = new JarContent(key, b));\n      } else {\n        \n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Jar loading is not supported in non-cloud mode\");\n        // todo\n        \n      }\n      \n    }\n    \n    JarContentRef ref = new JarContentRef(jar);\n    synchronized (jar.references) {\n      jar.references.add(ref);\n    }\n    return ref;\n    \n  }\n\n","sourceOld":"  /**\n   * Returns the contents of a jar and increments a reference count. Please return the same object to decerease the refcount\n   * \n   * @param key\n   *          it is a combination of blobname and version like blobName/version\n   * @return The reference of a jar\n   */\n  public JarContentRef getJarIncRef(String key) throws IOException {\n    JarContent jar = jars.get(key);\n    if (jar == null) {\n      if (this.coreContainer.isZooKeeperAware()) {\n        ClusterState cs = this.coreContainer.getZkController().getZkStateReader().getClusterState();\n        DocCollection coll = cs.getCollectionOrNull(CollectionsHandler.SYSTEM_COLL);\n        if (coll == null) throw new SolrException(SERVICE_UNAVAILABLE, \".system collection not available\");\n        Slice slice = coll.getActiveSlices().iterator().next();\n        if (slice == null) throw new SolrException(SERVICE_UNAVAILABLE, \".no active slices for .system collection\");\n        Replica replica = slice.getReplicas().iterator().next();\n        if (replica == null) throw new SolrException(SERVICE_UNAVAILABLE, \".no active replica available for .system collection\");\n        String url = replica.getStr(BASE_URL_PROP) + \"/.system/blob/\" + key + \"?wt=filestream\";\n        \n        HttpClient httpClient = coreContainer.getUpdateShardHandler().getHttpClient();\n        HttpGet httpGet = new HttpGet(url);\n        ByteBuffer b;\n        try {\n          HttpResponse entity = httpClient.execute(httpGet);\n          int statusCode = entity.getStatusLine().getStatusCode();\n          if (statusCode != 200) {\n            throw new SolrException(SolrException.ErrorCode.NOT_FOUND, \"no such blob or version available: \" + key);\n          }\n          b = SimplePostTool.inputStreamToByteArray(entity.getEntity().getContent());\n        } finally {\n          httpGet.releaseConnection();\n        }\n        jars.put(key, jar = new JarContent(key, b));\n      } else {\n        \n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Jar loading is not supported in non-cloud mode\");\n        // todo\n        \n      }\n      \n    }\n    \n    JarContentRef ref = new JarContentRef(jar);\n    synchronized (jar.references) {\n      jar.references.add(ref);\n    }\n    return ref;\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"46c1b92e1e07319500377849ef6955a15cf1282e","date":1420564635,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/JarRepository#getJarIncRef(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/JarRepository#getJarIncRef(String).mjava","sourceNew":"  /**\n   * Returns the contents of a jar and increments a reference count. Please return the same object to decerease the refcount\n   * \n   * @param key\n   *          it is a combination of blobname and version like blobName/version\n   * @return The reference of a jar\n   */\n  public JarContentRef getJarIncRef(String key) throws IOException {\n    JarContent jar = jars.get(key);\n    if (jar == null) {\n      if (this.coreContainer.isZooKeeperAware()) {\n        ClusterState cs = this.coreContainer.getZkController().getZkStateReader().getClusterState();\n        DocCollection coll = cs.getCollectionOrNull(CollectionsHandler.SYSTEM_COLL);\n        if (coll == null) throw new SolrException(SERVICE_UNAVAILABLE, \".system collection not available\");\n        ArrayList<Slice> slices = new ArrayList<>(coll.getActiveSlices());\n        if (slices.isEmpty()) throw new SolrException(SERVICE_UNAVAILABLE, \".no active slices for .system collection\");\n        Collections.shuffle(slices, RANDOM); //do load balancing\n        Slice slice = slices.get(0) ;\n        Replica replica = slice.getReplicas().iterator().next();\n        if (replica == null) throw new SolrException(SERVICE_UNAVAILABLE, \".no active replica available for .system collection\");\n        String url = replica.getStr(BASE_URL_PROP) + \"/.system/blob/\" + key + \"?wt=filestream\";\n        \n        HttpClient httpClient = coreContainer.getUpdateShardHandler().getHttpClient();\n        HttpGet httpGet = new HttpGet(url);\n        ByteBuffer b;\n        try {\n          HttpResponse entity = httpClient.execute(httpGet);\n          int statusCode = entity.getStatusLine().getStatusCode();\n          if (statusCode != 200) {\n            throw new SolrException(SolrException.ErrorCode.NOT_FOUND, \"no such blob or version available: \" + key);\n          }\n          b = SimplePostTool.inputStreamToByteArray(entity.getEntity().getContent());\n        } finally {\n          httpGet.releaseConnection();\n        }\n        jars.put(key, jar = new JarContent(key, b));\n      } else {\n        \n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Jar loading is not supported in non-cloud mode\");\n        // todo\n        \n      }\n      \n    }\n    \n    JarContentRef ref = new JarContentRef(jar);\n    synchronized (jar.references) {\n      jar.references.add(ref);\n    }\n    return ref;\n    \n  }\n\n","sourceOld":"  /**\n   * Returns the contents of a jar and increments a reference count. Please return the same object to decerease the refcount\n   * \n   * @param key\n   *          it is a combination of blobname and version like blobName/version\n   * @return The reference of a jar\n   */\n  public JarContentRef getJarIncRef(String key) throws IOException {\n    JarContent jar = jars.get(key);\n    if (jar == null) {\n      if (this.coreContainer.isZooKeeperAware()) {\n        ClusterState cs = this.coreContainer.getZkController().getZkStateReader().getClusterState();\n        DocCollection coll = cs.getCollectionOrNull(CollectionsHandler.SYSTEM_COLL);\n        if (coll == null) throw new SolrException(SERVICE_UNAVAILABLE, \".system collection not available\");\n        ArrayList<Slice> slices = new ArrayList<>(coll.getActiveSlices());\n        if (slices.isEmpty()) throw new SolrException(SERVICE_UNAVAILABLE, \".no active slices for .system collection\");\n        Collections.shuffle(slices); //do load balancing\n        Slice slice = slices.get(0) ;\n        Replica replica = slice.getReplicas().iterator().next();\n        if (replica == null) throw new SolrException(SERVICE_UNAVAILABLE, \".no active replica available for .system collection\");\n        String url = replica.getStr(BASE_URL_PROP) + \"/.system/blob/\" + key + \"?wt=filestream\";\n        \n        HttpClient httpClient = coreContainer.getUpdateShardHandler().getHttpClient();\n        HttpGet httpGet = new HttpGet(url);\n        ByteBuffer b;\n        try {\n          HttpResponse entity = httpClient.execute(httpGet);\n          int statusCode = entity.getStatusLine().getStatusCode();\n          if (statusCode != 200) {\n            throw new SolrException(SolrException.ErrorCode.NOT_FOUND, \"no such blob or version available: \" + key);\n          }\n          b = SimplePostTool.inputStreamToByteArray(entity.getEntity().getContent());\n        } finally {\n          httpGet.releaseConnection();\n        }\n        jars.put(key, jar = new JarContent(key, b));\n      } else {\n        \n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Jar loading is not supported in non-cloud mode\");\n        // todo\n        \n      }\n      \n    }\n    \n    JarContentRef ref = new JarContentRef(jar);\n    synchronized (jar.references) {\n      jar.references.add(ref);\n    }\n    return ref;\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2330174b38007b9942205a2679db9ddffe35af89","date":1423653924,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/JarRepository#getJarIncRef(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/JarRepository#getJarIncRef(String).mjava","sourceNew":"  /**\n   * Returns the contents of a jar and increments a reference count. Please return the same object to decerease the refcount\n   *\n   * @param key it is a combination of blobname and version like blobName/version\n   * @return The reference of a jar\n   */\n  public JarContentRef getJarIncRef(String key) throws IOException {\n    JarContent jar = jars.get(key);\n    if (jar == null) {\n      if (this.coreContainer.isZooKeeperAware()) {\n        ClusterState cs = this.coreContainer.getZkController().getZkStateReader().getClusterState();\n        DocCollection coll = cs.getCollectionOrNull(CollectionsHandler.SYSTEM_COLL);\n        if (coll == null) throw new SolrException(SERVICE_UNAVAILABLE, \".system collection not available\");\n        ArrayList<Slice> slices = new ArrayList<>(coll.getActiveSlices());\n        if (slices.isEmpty()) throw new SolrException(SERVICE_UNAVAILABLE, \".no active slices for .system collection\");\n        Collections.shuffle(slices, RANDOM); //do load balancing\n        Slice slice = slices.get(0);\n        Replica replica = slice.getReplicas().iterator().next();\n        if (replica == null)\n          throw new SolrException(SERVICE_UNAVAILABLE, \".no active replica available for .system collection\");\n        String url = replica.getStr(BASE_URL_PROP) + \"/.system/blob/\" + key + \"?wt=filestream\";\n\n        HttpClient httpClient = coreContainer.getUpdateShardHandler().getHttpClient();\n        HttpGet httpGet = new HttpGet(url);\n        ByteBuffer b;\n        try {\n          HttpResponse entity = httpClient.execute(httpGet);\n          int statusCode = entity.getStatusLine().getStatusCode();\n          if (statusCode != 200) {\n            throw new SolrException(SolrException.ErrorCode.NOT_FOUND, \"no such blob or version available: \" + key);\n          }\n          b = SimplePostTool.inputStreamToByteArray(entity.getEntity().getContent());\n        } finally {\n          httpGet.releaseConnection();\n        }\n        jars.put(key, jar = new JarContent(key, b));\n      } else {\n\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Jar loading is not supported in non-cloud mode\");\n        // todo\n\n      }\n\n    }\n\n    JarContentRef ref = new JarContentRef(jar);\n    synchronized (jar.references) {\n      jar.references.add(ref);\n    }\n    return ref;\n\n  }\n\n","sourceOld":"  /**\n   * Returns the contents of a jar and increments a reference count. Please return the same object to decerease the refcount\n   * \n   * @param key\n   *          it is a combination of blobname and version like blobName/version\n   * @return The reference of a jar\n   */\n  public JarContentRef getJarIncRef(String key) throws IOException {\n    JarContent jar = jars.get(key);\n    if (jar == null) {\n      if (this.coreContainer.isZooKeeperAware()) {\n        ClusterState cs = this.coreContainer.getZkController().getZkStateReader().getClusterState();\n        DocCollection coll = cs.getCollectionOrNull(CollectionsHandler.SYSTEM_COLL);\n        if (coll == null) throw new SolrException(SERVICE_UNAVAILABLE, \".system collection not available\");\n        ArrayList<Slice> slices = new ArrayList<>(coll.getActiveSlices());\n        if (slices.isEmpty()) throw new SolrException(SERVICE_UNAVAILABLE, \".no active slices for .system collection\");\n        Collections.shuffle(slices, RANDOM); //do load balancing\n        Slice slice = slices.get(0) ;\n        Replica replica = slice.getReplicas().iterator().next();\n        if (replica == null) throw new SolrException(SERVICE_UNAVAILABLE, \".no active replica available for .system collection\");\n        String url = replica.getStr(BASE_URL_PROP) + \"/.system/blob/\" + key + \"?wt=filestream\";\n        \n        HttpClient httpClient = coreContainer.getUpdateShardHandler().getHttpClient();\n        HttpGet httpGet = new HttpGet(url);\n        ByteBuffer b;\n        try {\n          HttpResponse entity = httpClient.execute(httpGet);\n          int statusCode = entity.getStatusLine().getStatusCode();\n          if (statusCode != 200) {\n            throw new SolrException(SolrException.ErrorCode.NOT_FOUND, \"no such blob or version available: \" + key);\n          }\n          b = SimplePostTool.inputStreamToByteArray(entity.getEntity().getContent());\n        } finally {\n          httpGet.releaseConnection();\n        }\n        jars.put(key, jar = new JarContent(key, b));\n      } else {\n        \n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Jar loading is not supported in non-cloud mode\");\n        // todo\n        \n      }\n      \n    }\n    \n    JarContentRef ref = new JarContentRef(jar);\n    synchronized (jar.references) {\n      jar.references.add(ref);\n    }\n    return ref;\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"63e47b9375302c261334d5181cae6d68d08ed1a3","date":1423988473,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/JarRepository#getJarIncRef(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/JarRepository#getJarIncRef(String).mjava","sourceNew":"  /**\n   * Returns the contents of a jar and increments a reference count. Please return the same object to decerease the refcount\n   *\n   * @param key it is a combination of blobname and version like blobName/version\n   * @return The reference of a jar\n   */\n  public JarContentRef getJarIncRef(String key) throws IOException {\n    JarContent jar = jars.get(key);\n    if (jar == null) {\n      if (this.coreContainer.isZooKeeperAware()) {\n        ZkStateReader zkStateReader = this.coreContainer.getZkController().getZkStateReader();\n        ClusterState cs = zkStateReader.getClusterState();\n        DocCollection coll = cs.getCollectionOrNull(CollectionsHandler.SYSTEM_COLL);\n        if (coll == null) throw new SolrException(SERVICE_UNAVAILABLE, \".system collection not available\");\n        ArrayList<Slice> slices = new ArrayList<>(coll.getActiveSlices());\n        if (slices.isEmpty()) throw new SolrException(SERVICE_UNAVAILABLE, \"No active slices for .system collection\");\n        Collections.shuffle(slices, RANDOM); //do load balancing\n\n        Replica replica = null;\n        for (Slice slice : slices)  {\n          List<Replica> replicas = new ArrayList<>(slice.getReplicasMap().values());\n          Collections.shuffle(replicas, RANDOM);\n          for (Replica r : replicas) {\n            if (ZkStateReader.ACTIVE.equals(r.getStr(ZkStateReader.STATE_PROP))) {\n              replica = r;\n              break;\n            }\n          }\n        }\n        if (replica == null) {\n          throw new SolrException(SERVICE_UNAVAILABLE, \".no active replica available for .system collection\");\n        }\n        String url = replica.getStr(BASE_URL_PROP) + \"/.system/blob/\" + key + \"?wt=filestream\";\n\n        HttpClient httpClient = coreContainer.getUpdateShardHandler().getHttpClient();\n        HttpGet httpGet = new HttpGet(url);\n        ByteBuffer b;\n        try {\n          HttpResponse entity = httpClient.execute(httpGet);\n          int statusCode = entity.getStatusLine().getStatusCode();\n          if (statusCode != 200) {\n            throw new SolrException(SolrException.ErrorCode.NOT_FOUND, \"no such blob or version available: \" + key);\n          }\n          b = SimplePostTool.inputStreamToByteArray(entity.getEntity().getContent());\n        } finally {\n          httpGet.releaseConnection();\n        }\n        jars.put(key, jar = new JarContent(key, b));\n      } else {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Jar loading is not supported in non-cloud mode\");\n        // todo\n      }\n\n    }\n\n    JarContentRef ref = new JarContentRef(jar);\n    synchronized (jar.references) {\n      jar.references.add(ref);\n    }\n    return ref;\n\n  }\n\n","sourceOld":"  /**\n   * Returns the contents of a jar and increments a reference count. Please return the same object to decerease the refcount\n   *\n   * @param key it is a combination of blobname and version like blobName/version\n   * @return The reference of a jar\n   */\n  public JarContentRef getJarIncRef(String key) throws IOException {\n    JarContent jar = jars.get(key);\n    if (jar == null) {\n      if (this.coreContainer.isZooKeeperAware()) {\n        ClusterState cs = this.coreContainer.getZkController().getZkStateReader().getClusterState();\n        DocCollection coll = cs.getCollectionOrNull(CollectionsHandler.SYSTEM_COLL);\n        if (coll == null) throw new SolrException(SERVICE_UNAVAILABLE, \".system collection not available\");\n        ArrayList<Slice> slices = new ArrayList<>(coll.getActiveSlices());\n        if (slices.isEmpty()) throw new SolrException(SERVICE_UNAVAILABLE, \".no active slices for .system collection\");\n        Collections.shuffle(slices, RANDOM); //do load balancing\n        Slice slice = slices.get(0);\n        Replica replica = slice.getReplicas().iterator().next();\n        if (replica == null)\n          throw new SolrException(SERVICE_UNAVAILABLE, \".no active replica available for .system collection\");\n        String url = replica.getStr(BASE_URL_PROP) + \"/.system/blob/\" + key + \"?wt=filestream\";\n\n        HttpClient httpClient = coreContainer.getUpdateShardHandler().getHttpClient();\n        HttpGet httpGet = new HttpGet(url);\n        ByteBuffer b;\n        try {\n          HttpResponse entity = httpClient.execute(httpGet);\n          int statusCode = entity.getStatusLine().getStatusCode();\n          if (statusCode != 200) {\n            throw new SolrException(SolrException.ErrorCode.NOT_FOUND, \"no such blob or version available: \" + key);\n          }\n          b = SimplePostTool.inputStreamToByteArray(entity.getEntity().getContent());\n        } finally {\n          httpGet.releaseConnection();\n        }\n        jars.put(key, jar = new JarContent(key, b));\n      } else {\n\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Jar loading is not supported in non-cloud mode\");\n        // todo\n\n      }\n\n    }\n\n    JarContentRef ref = new JarContentRef(jar);\n    synchronized (jar.references) {\n      jar.references.add(ref);\n    }\n    return ref;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9aea0485ecacb6734c17da2d02569816c23a69c1","date":1425707735,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/JarRepository#getJarIncRef(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/JarRepository#getJarIncRef(String).mjava","sourceNew":"  /**\n   * Returns the contents of a jar and increments a reference count. Please return the same object to decrease the refcount\n   *\n   * @param key it is a combination of blobname and version like blobName/version\n   * @return The reference of a jar\n   */\n  public JarContentRef getJarIncRef(String key) {\n    JarContent jar = jars.get(key);\n    if (jar == null) {\n      if (this.coreContainer.isZooKeeperAware()) {\n        Replica replica = getSystemCollReplica();\n        String url = replica.getStr(BASE_URL_PROP) + \"/.system/blob/\" + key + \"?wt=filestream\";\n\n        HttpClient httpClient = coreContainer.getUpdateShardHandler().getHttpClient();\n        HttpGet httpGet = new HttpGet(url);\n        ByteBuffer b;\n        try {\n          HttpResponse entity = httpClient.execute(httpGet);\n          int statusCode = entity.getStatusLine().getStatusCode();\n          if (statusCode != 200) {\n            throw new SolrException(SolrException.ErrorCode.NOT_FOUND, \"no such blob or version available: \" + key);\n          }\n          b = SimplePostTool.inputStreamToByteArray(entity.getEntity().getContent());\n        } catch (Exception e) {\n          if (e instanceof SolrException) {\n            throw (SolrException) e;\n          } else {\n            throw new SolrException(SolrException.ErrorCode.NOT_FOUND, \"could not load : \" + key, e);\n          }\n        } finally {\n          httpGet.releaseConnection();\n        }\n        jars.put(key, jar = new JarContent(key, b));\n      } else {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Jar loading is not supported in non-cloud mode\");\n        // todo\n      }\n\n    }\n\n    JarContentRef ref = new JarContentRef(jar);\n    synchronized (jar.references) {\n      jar.references.add(ref);\n    }\n    return ref;\n\n  }\n\n","sourceOld":"  /**\n   * Returns the contents of a jar and increments a reference count. Please return the same object to decerease the refcount\n   *\n   * @param key it is a combination of blobname and version like blobName/version\n   * @return The reference of a jar\n   */\n  public JarContentRef getJarIncRef(String key) throws IOException {\n    JarContent jar = jars.get(key);\n    if (jar == null) {\n      if (this.coreContainer.isZooKeeperAware()) {\n        ZkStateReader zkStateReader = this.coreContainer.getZkController().getZkStateReader();\n        ClusterState cs = zkStateReader.getClusterState();\n        DocCollection coll = cs.getCollectionOrNull(CollectionsHandler.SYSTEM_COLL);\n        if (coll == null) throw new SolrException(SERVICE_UNAVAILABLE, \".system collection not available\");\n        ArrayList<Slice> slices = new ArrayList<>(coll.getActiveSlices());\n        if (slices.isEmpty()) throw new SolrException(SERVICE_UNAVAILABLE, \"No active slices for .system collection\");\n        Collections.shuffle(slices, RANDOM); //do load balancing\n\n        Replica replica = null;\n        for (Slice slice : slices)  {\n          List<Replica> replicas = new ArrayList<>(slice.getReplicasMap().values());\n          Collections.shuffle(replicas, RANDOM);\n          for (Replica r : replicas) {\n            if (ZkStateReader.ACTIVE.equals(r.getStr(ZkStateReader.STATE_PROP))) {\n              replica = r;\n              break;\n            }\n          }\n        }\n        if (replica == null) {\n          throw new SolrException(SERVICE_UNAVAILABLE, \".no active replica available for .system collection\");\n        }\n        String url = replica.getStr(BASE_URL_PROP) + \"/.system/blob/\" + key + \"?wt=filestream\";\n\n        HttpClient httpClient = coreContainer.getUpdateShardHandler().getHttpClient();\n        HttpGet httpGet = new HttpGet(url);\n        ByteBuffer b;\n        try {\n          HttpResponse entity = httpClient.execute(httpGet);\n          int statusCode = entity.getStatusLine().getStatusCode();\n          if (statusCode != 200) {\n            throw new SolrException(SolrException.ErrorCode.NOT_FOUND, \"no such blob or version available: \" + key);\n          }\n          b = SimplePostTool.inputStreamToByteArray(entity.getEntity().getContent());\n        } finally {\n          httpGet.releaseConnection();\n        }\n        jars.put(key, jar = new JarContent(key, b));\n      } else {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Jar loading is not supported in non-cloud mode\");\n        // todo\n      }\n\n    }\n\n    JarContentRef ref = new JarContentRef(jar);\n    synchronized (jar.references) {\n      jar.references.add(ref);\n    }\n    return ref;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/JarRepository#getJarIncRef(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/JarRepository#getJarIncRef(String).mjava","sourceNew":"  /**\n   * Returns the contents of a jar and increments a reference count. Please return the same object to decrease the refcount\n   *\n   * @param key it is a combination of blobname and version like blobName/version\n   * @return The reference of a jar\n   */\n  public JarContentRef getJarIncRef(String key) {\n    JarContent jar = jars.get(key);\n    if (jar == null) {\n      if (this.coreContainer.isZooKeeperAware()) {\n        Replica replica = getSystemCollReplica();\n        String url = replica.getStr(BASE_URL_PROP) + \"/.system/blob/\" + key + \"?wt=filestream\";\n\n        HttpClient httpClient = coreContainer.getUpdateShardHandler().getHttpClient();\n        HttpGet httpGet = new HttpGet(url);\n        ByteBuffer b;\n        try {\n          HttpResponse entity = httpClient.execute(httpGet);\n          int statusCode = entity.getStatusLine().getStatusCode();\n          if (statusCode != 200) {\n            throw new SolrException(SolrException.ErrorCode.NOT_FOUND, \"no such blob or version available: \" + key);\n          }\n          b = SimplePostTool.inputStreamToByteArray(entity.getEntity().getContent());\n        } catch (Exception e) {\n          if (e instanceof SolrException) {\n            throw (SolrException) e;\n          } else {\n            throw new SolrException(SolrException.ErrorCode.NOT_FOUND, \"could not load : \" + key, e);\n          }\n        } finally {\n          httpGet.releaseConnection();\n        }\n        jars.put(key, jar = new JarContent(key, b));\n      } else {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Jar loading is not supported in non-cloud mode\");\n        // todo\n      }\n\n    }\n\n    JarContentRef ref = new JarContentRef(jar);\n    synchronized (jar.references) {\n      jar.references.add(ref);\n    }\n    return ref;\n\n  }\n\n","sourceOld":"  /**\n   * Returns the contents of a jar and increments a reference count. Please return the same object to decerease the refcount\n   *\n   * @param key it is a combination of blobname and version like blobName/version\n   * @return The reference of a jar\n   */\n  public JarContentRef getJarIncRef(String key) throws IOException {\n    JarContent jar = jars.get(key);\n    if (jar == null) {\n      if (this.coreContainer.isZooKeeperAware()) {\n        ZkStateReader zkStateReader = this.coreContainer.getZkController().getZkStateReader();\n        ClusterState cs = zkStateReader.getClusterState();\n        DocCollection coll = cs.getCollectionOrNull(CollectionsHandler.SYSTEM_COLL);\n        if (coll == null) throw new SolrException(SERVICE_UNAVAILABLE, \".system collection not available\");\n        ArrayList<Slice> slices = new ArrayList<>(coll.getActiveSlices());\n        if (slices.isEmpty()) throw new SolrException(SERVICE_UNAVAILABLE, \"No active slices for .system collection\");\n        Collections.shuffle(slices, RANDOM); //do load balancing\n\n        Replica replica = null;\n        for (Slice slice : slices)  {\n          List<Replica> replicas = new ArrayList<>(slice.getReplicasMap().values());\n          Collections.shuffle(replicas, RANDOM);\n          for (Replica r : replicas) {\n            if (ZkStateReader.ACTIVE.equals(r.getStr(ZkStateReader.STATE_PROP))) {\n              replica = r;\n              break;\n            }\n          }\n        }\n        if (replica == null) {\n          throw new SolrException(SERVICE_UNAVAILABLE, \".no active replica available for .system collection\");\n        }\n        String url = replica.getStr(BASE_URL_PROP) + \"/.system/blob/\" + key + \"?wt=filestream\";\n\n        HttpClient httpClient = coreContainer.getUpdateShardHandler().getHttpClient();\n        HttpGet httpGet = new HttpGet(url);\n        ByteBuffer b;\n        try {\n          HttpResponse entity = httpClient.execute(httpGet);\n          int statusCode = entity.getStatusLine().getStatusCode();\n          if (statusCode != 200) {\n            throw new SolrException(SolrException.ErrorCode.NOT_FOUND, \"no such blob or version available: \" + key);\n          }\n          b = SimplePostTool.inputStreamToByteArray(entity.getEntity().getContent());\n        } finally {\n          httpGet.releaseConnection();\n        }\n        jars.put(key, jar = new JarContent(key, b));\n      } else {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Jar loading is not supported in non-cloud mode\");\n        // todo\n      }\n\n    }\n\n    JarContentRef ref = new JarContentRef(jar);\n    synchronized (jar.references) {\n      jar.references.add(ref);\n    }\n    return ref;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f46a888512a86ee1f37a7682bac9b2f4b38bb5a","date":1456224289,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/BlobRepository#getBlobIncRef(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/JarRepository#getJarIncRef(String).mjava","sourceNew":"  /**\n   * Returns the contents of a jar and increments a reference count. Please return the same object to decrease the refcount\n   *\n   * @param key it is a combination of blobname and version like blobName/version\n   * @return The reference of a jar\n   */\n  public BlobContentRef getBlobIncRef(String key) {\n    BlobContent aBlob = blobs.get(key);\n    if (aBlob == null) {\n      if (this.coreContainer.isZooKeeperAware()) {\n        Replica replica = getSystemCollReplica();\n        String url = replica.getStr(BASE_URL_PROP) + \"/.system/blob/\" + key + \"?wt=filestream\";\n\n        HttpClient httpClient = coreContainer.getUpdateShardHandler().getHttpClient();\n        HttpGet httpGet = new HttpGet(url);\n        ByteBuffer b;\n        try {\n          HttpResponse entity = httpClient.execute(httpGet);\n          int statusCode = entity.getStatusLine().getStatusCode();\n          if (statusCode != 200) {\n            throw new SolrException(SolrException.ErrorCode.NOT_FOUND, \"no such blob or version available: \" + key);\n          }\n          b = SimplePostTool.inputStreamToByteArray(entity.getEntity().getContent());\n        } catch (Exception e) {\n          if (e instanceof SolrException) {\n            throw (SolrException) e;\n          } else {\n            throw new SolrException(SolrException.ErrorCode.NOT_FOUND, \"could not load : \" + key, e);\n          }\n        } finally {\n          httpGet.releaseConnection();\n        }\n        blobs.put(key, aBlob = new BlobContent(key, b));\n      } else {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Jar loading is not supported in non-cloud mode\");\n        // todo\n      }\n\n    }\n\n    BlobContentRef ref = new BlobContentRef(aBlob);\n    synchronized (aBlob.references) {\n      aBlob.references.add(ref);\n    }\n    return ref;\n\n  }\n\n","sourceOld":"  /**\n   * Returns the contents of a jar and increments a reference count. Please return the same object to decrease the refcount\n   *\n   * @param key it is a combination of blobname and version like blobName/version\n   * @return The reference of a jar\n   */\n  public JarContentRef getJarIncRef(String key) {\n    JarContent jar = jars.get(key);\n    if (jar == null) {\n      if (this.coreContainer.isZooKeeperAware()) {\n        Replica replica = getSystemCollReplica();\n        String url = replica.getStr(BASE_URL_PROP) + \"/.system/blob/\" + key + \"?wt=filestream\";\n\n        HttpClient httpClient = coreContainer.getUpdateShardHandler().getHttpClient();\n        HttpGet httpGet = new HttpGet(url);\n        ByteBuffer b;\n        try {\n          HttpResponse entity = httpClient.execute(httpGet);\n          int statusCode = entity.getStatusLine().getStatusCode();\n          if (statusCode != 200) {\n            throw new SolrException(SolrException.ErrorCode.NOT_FOUND, \"no such blob or version available: \" + key);\n          }\n          b = SimplePostTool.inputStreamToByteArray(entity.getEntity().getContent());\n        } catch (Exception e) {\n          if (e instanceof SolrException) {\n            throw (SolrException) e;\n          } else {\n            throw new SolrException(SolrException.ErrorCode.NOT_FOUND, \"could not load : \" + key, e);\n          }\n        } finally {\n          httpGet.releaseConnection();\n        }\n        jars.put(key, jar = new JarContent(key, b));\n      } else {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Jar loading is not supported in non-cloud mode\");\n        // todo\n      }\n\n    }\n\n    JarContentRef ref = new JarContentRef(jar);\n    synchronized (jar.references) {\n      jar.references.add(ref);\n    }\n    return ref;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5296efc4b319f5647b606629c093a94b23692c6","date":1456267155,"type":5,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/BlobRepository#getBlobIncRef(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/JarRepository#getJarIncRef(String).mjava","sourceNew":"  /**\n   * Returns the contents of a jar and increments a reference count. Please return the same object to decrease the refcount\n   *\n   * @param key it is a combination of blobname and version like blobName/version\n   * @return The reference of a jar\n   */\n  public BlobContentRef getBlobIncRef(String key) {\n    BlobContent aBlob = blobs.get(key);\n    if (aBlob == null) {\n      if (this.coreContainer.isZooKeeperAware()) {\n        Replica replica = getSystemCollReplica();\n        String url = replica.getStr(BASE_URL_PROP) + \"/.system/blob/\" + key + \"?wt=filestream\";\n\n        HttpClient httpClient = coreContainer.getUpdateShardHandler().getHttpClient();\n        HttpGet httpGet = new HttpGet(url);\n        ByteBuffer b;\n        try {\n          HttpResponse entity = httpClient.execute(httpGet);\n          int statusCode = entity.getStatusLine().getStatusCode();\n          if (statusCode != 200) {\n            throw new SolrException(SolrException.ErrorCode.NOT_FOUND, \"no such blob or version available: \" + key);\n          }\n          b = SimplePostTool.inputStreamToByteArray(entity.getEntity().getContent());\n        } catch (Exception e) {\n          if (e instanceof SolrException) {\n            throw (SolrException) e;\n          } else {\n            throw new SolrException(SolrException.ErrorCode.NOT_FOUND, \"could not load : \" + key, e);\n          }\n        } finally {\n          httpGet.releaseConnection();\n        }\n        blobs.put(key, aBlob = new BlobContent(key, b));\n      } else {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Jar loading is not supported in non-cloud mode\");\n        // todo\n      }\n\n    }\n\n    BlobContentRef ref = new BlobContentRef(aBlob);\n    synchronized (aBlob.references) {\n      aBlob.references.add(ref);\n    }\n    return ref;\n\n  }\n\n","sourceOld":"  /**\n   * Returns the contents of a jar and increments a reference count. Please return the same object to decrease the refcount\n   *\n   * @param key it is a combination of blobname and version like blobName/version\n   * @return The reference of a jar\n   */\n  public JarContentRef getJarIncRef(String key) {\n    JarContent jar = jars.get(key);\n    if (jar == null) {\n      if (this.coreContainer.isZooKeeperAware()) {\n        Replica replica = getSystemCollReplica();\n        String url = replica.getStr(BASE_URL_PROP) + \"/.system/blob/\" + key + \"?wt=filestream\";\n\n        HttpClient httpClient = coreContainer.getUpdateShardHandler().getHttpClient();\n        HttpGet httpGet = new HttpGet(url);\n        ByteBuffer b;\n        try {\n          HttpResponse entity = httpClient.execute(httpGet);\n          int statusCode = entity.getStatusLine().getStatusCode();\n          if (statusCode != 200) {\n            throw new SolrException(SolrException.ErrorCode.NOT_FOUND, \"no such blob or version available: \" + key);\n          }\n          b = SimplePostTool.inputStreamToByteArray(entity.getEntity().getContent());\n        } catch (Exception e) {\n          if (e instanceof SolrException) {\n            throw (SolrException) e;\n          } else {\n            throw new SolrException(SolrException.ErrorCode.NOT_FOUND, \"could not load : \" + key, e);\n          }\n        } finally {\n          httpGet.releaseConnection();\n        }\n        jars.put(key, jar = new JarContent(key, b));\n      } else {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Jar loading is not supported in non-cloud mode\");\n        // todo\n      }\n\n    }\n\n    JarContentRef ref = new JarContentRef(jar);\n    synchronized (jar.references) {\n      jar.references.add(ref);\n    }\n    return ref;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0f46a888512a86ee1f37a7682bac9b2f4b38bb5a":["9aea0485ecacb6734c17da2d02569816c23a69c1"],"46c1b92e1e07319500377849ef6955a15cf1282e":["432e578be72da02cfde62dcc7fb4fa8620bc85fd"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["63e47b9375302c261334d5181cae6d68d08ed1a3","9aea0485ecacb6734c17da2d02569816c23a69c1"],"2330174b38007b9942205a2679db9ddffe35af89":["46c1b92e1e07319500377849ef6955a15cf1282e"],"b96ad5eead3ef9b09cee72d7b54b8bfc369859bd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"432e578be72da02cfde62dcc7fb4fa8620bc85fd":["b7eea62cd13a5ddc4fb9abea3b3820ff3128cb26"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a5296efc4b319f5647b606629c093a94b23692c6":["9aea0485ecacb6734c17da2d02569816c23a69c1","0f46a888512a86ee1f37a7682bac9b2f4b38bb5a"],"9aea0485ecacb6734c17da2d02569816c23a69c1":["63e47b9375302c261334d5181cae6d68d08ed1a3"],"b7eea62cd13a5ddc4fb9abea3b3820ff3128cb26":["b96ad5eead3ef9b09cee72d7b54b8bfc369859bd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f46a888512a86ee1f37a7682bac9b2f4b38bb5a"],"63e47b9375302c261334d5181cae6d68d08ed1a3":["2330174b38007b9942205a2679db9ddffe35af89"]},"commit2Childs":{"0f46a888512a86ee1f37a7682bac9b2f4b38bb5a":["a5296efc4b319f5647b606629c093a94b23692c6","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"46c1b92e1e07319500377849ef6955a15cf1282e":["2330174b38007b9942205a2679db9ddffe35af89"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"2330174b38007b9942205a2679db9ddffe35af89":["63e47b9375302c261334d5181cae6d68d08ed1a3"],"b96ad5eead3ef9b09cee72d7b54b8bfc369859bd":["b7eea62cd13a5ddc4fb9abea3b3820ff3128cb26"],"432e578be72da02cfde62dcc7fb4fa8620bc85fd":["46c1b92e1e07319500377849ef6955a15cf1282e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b96ad5eead3ef9b09cee72d7b54b8bfc369859bd"],"a5296efc4b319f5647b606629c093a94b23692c6":[],"9aea0485ecacb6734c17da2d02569816c23a69c1":["0f46a888512a86ee1f37a7682bac9b2f4b38bb5a","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","a5296efc4b319f5647b606629c093a94b23692c6"],"b7eea62cd13a5ddc4fb9abea3b3820ff3128cb26":["432e578be72da02cfde62dcc7fb4fa8620bc85fd"],"63e47b9375302c261334d5181cae6d68d08ed1a3":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","9aea0485ecacb6734c17da2d02569816c23a69c1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","a5296efc4b319f5647b606629c093a94b23692c6","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}