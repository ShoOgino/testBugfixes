{"path":"lucene/core/src/java/org/apache/lucene/search/FilteredQuery.FilterStrategy#filteredScorer(LeafReaderContext,Weight,DocIdSet).mjava","commits":[{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":0,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FilteredQuery.FilterStrategy#filteredScorer(LeafReaderContext,Weight,DocIdSet).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Returns a filtered {@link Scorer} based on this strategy.\n     * \n     * @param context\n     *          the {@link org.apache.lucene.index.LeafReaderContext} for which to return the {@link Scorer}.\n     * @param weight the {@link FilteredQuery} {@link Weight} to create the filtered scorer.\n     * @param docIdSet the filter {@link DocIdSet} to apply\n     * @return a filtered scorer\n     * \n     * @throws IOException if an {@link IOException} occurs\n     */\n    public abstract Scorer filteredScorer(LeafReaderContext context,\n        Weight weight, DocIdSet docIdSet) throws IOException;\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"781239fc84d36be12b84e4d3e2618f5f07a182e3","date":1423139668,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FilteredQuery.FilterStrategy#filteredScorer(LeafReaderContext,Weight,DocIdSet,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FilteredQuery.FilterStrategy#filteredScorer(LeafReaderContext,Weight,DocIdSet).mjava","sourceNew":"    /**\n     * Returns a filtered {@link Scorer} based on this strategy.\n     * \n     * @param context\n     *          the {@link org.apache.lucene.index.LeafReaderContext} for which to return the {@link Scorer}.\n     * @param weight the {@link FilteredQuery} {@link Weight} to create the filtered scorer.\n     * @param docIdSet the filter {@link DocIdSet} to apply\n     * @return a filtered scorer\n     * \n     * @throws IOException if an {@link IOException} occurs\n     */\n    public abstract Scorer filteredScorer(LeafReaderContext context,\n        Weight weight, DocIdSet docIdSet, boolean needsScores) throws IOException;\n\n","sourceOld":"    /**\n     * Returns a filtered {@link Scorer} based on this strategy.\n     * \n     * @param context\n     *          the {@link org.apache.lucene.index.LeafReaderContext} for which to return the {@link Scorer}.\n     * @param weight the {@link FilteredQuery} {@link Weight} to create the filtered scorer.\n     * @param docIdSet the filter {@link DocIdSet} to apply\n     * @return a filtered scorer\n     * \n     * @throws IOException if an {@link IOException} occurs\n     */\n    public abstract Scorer filteredScorer(LeafReaderContext context,\n        Weight weight, DocIdSet docIdSet) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb17639909a369c1e64866842e5c213440acc17e","date":1423238093,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FilteredQuery.FilterStrategy#filteredScorer(LeafReaderContext,Weight,DocIdSet).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FilteredQuery.FilterStrategy#filteredScorer(LeafReaderContext,Weight,DocIdSet,boolean).mjava","sourceNew":"    /**\n     * Returns a filtered {@link Scorer} based on this strategy.\n     * \n     * @param context\n     *          the {@link org.apache.lucene.index.LeafReaderContext} for which to return the {@link Scorer}.\n     * @param weight the {@link FilteredQuery} {@link Weight} to create the filtered scorer.\n     * @param docIdSet the filter {@link DocIdSet} to apply\n     * @return a filtered scorer\n     * \n     * @throws IOException if an {@link IOException} occurs\n     */\n    public abstract Scorer filteredScorer(LeafReaderContext context,\n        Weight weight, DocIdSet docIdSet) throws IOException;\n\n","sourceOld":"    /**\n     * Returns a filtered {@link Scorer} based on this strategy.\n     * \n     * @param context\n     *          the {@link org.apache.lucene.index.LeafReaderContext} for which to return the {@link Scorer}.\n     * @param weight the {@link FilteredQuery} {@link Weight} to create the filtered scorer.\n     * @param docIdSet the filter {@link DocIdSet} to apply\n     * @return a filtered scorer\n     * \n     * @throws IOException if an {@link IOException} occurs\n     */\n    public abstract Scorer filteredScorer(LeafReaderContext context,\n        Weight weight, DocIdSet docIdSet, boolean needsScores) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1db68e96dd908fcd79ef809095822736aa601d08","date":1434630596,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/FilteredQuery.FilterStrategy#filteredScorer(LeafReaderContext,Weight,DocIdSet).mjava","sourceNew":null,"sourceOld":"    /**\n     * Returns a filtered {@link Scorer} based on this strategy.\n     * \n     * @param context\n     *          the {@link org.apache.lucene.index.LeafReaderContext} for which to return the {@link Scorer}.\n     * @param weight the {@link FilteredQuery} {@link Weight} to create the filtered scorer.\n     * @param docIdSet the filter {@link DocIdSet} to apply\n     * @return a filtered scorer\n     * \n     * @throws IOException if an {@link IOException} occurs\n     */\n    public abstract Scorer filteredScorer(LeafReaderContext context,\n        Weight weight, DocIdSet docIdSet) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fb17639909a369c1e64866842e5c213440acc17e":["781239fc84d36be12b84e4d3e2618f5f07a182e3"],"1db68e96dd908fcd79ef809095822736aa601d08":["fb17639909a369c1e64866842e5c213440acc17e"],"781239fc84d36be12b84e4d3e2618f5f07a182e3":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1db68e96dd908fcd79ef809095822736aa601d08"]},"commit2Childs":{"fb17639909a369c1e64866842e5c213440acc17e":["1db68e96dd908fcd79ef809095822736aa601d08"],"1db68e96dd908fcd79ef809095822736aa601d08":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"781239fc84d36be12b84e4d3e2618f5f07a182e3":["fb17639909a369c1e64866842e5c213440acc17e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["781239fc84d36be12b84e4d3e2618f5f07a182e3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}