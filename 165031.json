{"path":"lucene/core/src/java/org/apache/lucene/search/ConjunctionTermScorer#doNext(int).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ConjunctionTermScorer#doNext(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/ConjunctionTermScorer#doNext(int).mjava","sourceNew":"  private int doNext(int doc) throws IOException {\n    do {\n      if (lead.doc == DocsEnum.NO_MORE_DOCS) {\n        return NO_MORE_DOCS;\n      }\n      advanceHead: do {\n        for (int i = 1; i < docsAndFreqs.length; i++) {\n          if (docsAndFreqs[i].doc < doc) {\n            docsAndFreqs[i].doc = docsAndFreqs[i].docs.advance(doc);\n          }\n          if (docsAndFreqs[i].doc > doc) {\n            // DocsEnum beyond the current doc - break and advance lead\n            break advanceHead;\n          }\n        }\n        // success - all DocsEnums are on the same doc\n        return doc;\n      } while (true);\n      // advance head for next iteration\n      doc = lead.doc = lead.docs.nextDoc();  \n    } while (true);\n  }\n\n","sourceOld":"  private int doNext(int doc) throws IOException {\n    do {\n      if (lead.doc == DocsEnum.NO_MORE_DOCS) {\n        return NO_MORE_DOCS;\n      }\n      advanceHead: do {\n        for (int i = 1; i < docsAndFreqs.length; i++) {\n          if (docsAndFreqs[i].doc < doc) {\n            docsAndFreqs[i].doc = docsAndFreqs[i].docs.advance(doc);\n          }\n          if (docsAndFreqs[i].doc > doc) {\n            // DocsEnum beyond the current doc - break and advance lead\n            break advanceHead;\n          }\n        }\n        // success - all DocsEnums are on the same doc\n        return doc;\n      } while (true);\n      // advance head for next iteration\n      doc = lead.doc = lead.docs.nextDoc();  \n    } while (true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f08557cdb6c60ac7b88a9342c983a20cd236e74f","date":1330954480,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ConjunctionTermScorer#doNext(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/ConjunctionTermScorer#doNext(int).mjava","sourceNew":"  private int doNext(int doc) throws IOException {\n    do {\n      if (lead.doc == DocIdSetIterator.NO_MORE_DOCS) {\n        return NO_MORE_DOCS;\n      }\n      advanceHead: do {\n        for (int i = 1; i < docsAndFreqs.length; i++) {\n          if (docsAndFreqs[i].doc < doc) {\n            docsAndFreqs[i].doc = docsAndFreqs[i].docs.advance(doc);\n          }\n          if (docsAndFreqs[i].doc > doc) {\n            // DocsEnum beyond the current doc - break and advance lead\n            break advanceHead;\n          }\n        }\n        // success - all DocsEnums are on the same doc\n        return doc;\n      } while (true);\n      // advance head for next iteration\n      doc = lead.doc = lead.docs.nextDoc();  \n    } while (true);\n  }\n\n","sourceOld":"  private int doNext(int doc) throws IOException {\n    do {\n      if (lead.doc == DocsEnum.NO_MORE_DOCS) {\n        return NO_MORE_DOCS;\n      }\n      advanceHead: do {\n        for (int i = 1; i < docsAndFreqs.length; i++) {\n          if (docsAndFreqs[i].doc < doc) {\n            docsAndFreqs[i].doc = docsAndFreqs[i].docs.advance(doc);\n          }\n          if (docsAndFreqs[i].doc > doc) {\n            // DocsEnum beyond the current doc - break and advance lead\n            break advanceHead;\n          }\n        }\n        // success - all DocsEnums are on the same doc\n        return doc;\n      } while (true);\n      // advance head for next iteration\n      doc = lead.doc = lead.docs.nextDoc();  \n    } while (true);\n  }\n\n","bugFix":null,"bugIntro":["ad53827f5ab12289afd304fbeb30bf6e13c7c0d6"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ConjunctionTermScorer#doNext(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/ConjunctionTermScorer#doNext(int).mjava","sourceNew":"  private int doNext(int doc) throws IOException {\n    do {\n      if (lead.doc == DocIdSetIterator.NO_MORE_DOCS) {\n        return NO_MORE_DOCS;\n      }\n      advanceHead: do {\n        for (int i = 1; i < docsAndFreqs.length; i++) {\n          if (docsAndFreqs[i].doc < doc) {\n            docsAndFreqs[i].doc = docsAndFreqs[i].docs.advance(doc);\n          }\n          if (docsAndFreqs[i].doc > doc) {\n            // DocsEnum beyond the current doc - break and advance lead\n            break advanceHead;\n          }\n        }\n        // success - all DocsEnums are on the same doc\n        return doc;\n      } while (true);\n      // advance head for next iteration\n      doc = lead.doc = lead.docs.nextDoc();  \n    } while (true);\n  }\n\n","sourceOld":"  private int doNext(int doc) throws IOException {\n    do {\n      if (lead.doc == DocsEnum.NO_MORE_DOCS) {\n        return NO_MORE_DOCS;\n      }\n      advanceHead: do {\n        for (int i = 1; i < docsAndFreqs.length; i++) {\n          if (docsAndFreqs[i].doc < doc) {\n            docsAndFreqs[i].doc = docsAndFreqs[i].docs.advance(doc);\n          }\n          if (docsAndFreqs[i].doc > doc) {\n            // DocsEnum beyond the current doc - break and advance lead\n            break advanceHead;\n          }\n        }\n        // success - all DocsEnums are on the same doc\n        return doc;\n      } while (true);\n      // advance head for next iteration\n      doc = lead.doc = lead.docs.nextDoc();  \n    } while (true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad53827f5ab12289afd304fbeb30bf6e13c7c0d6","date":1361553682,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ConjunctionTermScorer#doNext(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/ConjunctionTermScorer#doNext(int).mjava","sourceNew":"  private int doNext(int doc) throws IOException {\n    for(;;) {\n      // doc may already be NO_MORE_DOCS here, but we don't check explicitly\n      // since all scorers should advance to NO_MORE_DOCS, match, then\n      // return that value.\n      advanceHead: for(;;) {\n        for (int i = 1; i < docsAndFreqs.length; i++) {\n          // invariant: docsAndFreqs[i].doc <= doc at this point.\n\n          // docsAndFreqs[i].doc may already be equal to doc if we \"broke advanceHead\"\n          // on the previous iteration and the advance on the lead scorer exactly matched.\n          if (docsAndFreqs[i].doc < doc) {\n            docsAndFreqs[i].doc = docsAndFreqs[i].docs.advance(doc);\n\n            if (docsAndFreqs[i].doc > doc) {\n              // DocsEnum beyond the current doc - break and advance lead to the new highest doc.\n              doc = docsAndFreqs[i].doc;\n              break advanceHead;\n            }\n          }\n        }\n        // success - all DocsEnums are on the same doc\n        return doc;\n      }\n      // advance head for next iteration\n      doc = lead.doc = lead.docs.advance(doc);\n    }\n  }\n\n","sourceOld":"  private int doNext(int doc) throws IOException {\n    do {\n      if (lead.doc == DocIdSetIterator.NO_MORE_DOCS) {\n        return NO_MORE_DOCS;\n      }\n      advanceHead: do {\n        for (int i = 1; i < docsAndFreqs.length; i++) {\n          if (docsAndFreqs[i].doc < doc) {\n            docsAndFreqs[i].doc = docsAndFreqs[i].docs.advance(doc);\n          }\n          if (docsAndFreqs[i].doc > doc) {\n            // DocsEnum beyond the current doc - break and advance lead\n            break advanceHead;\n          }\n        }\n        // success - all DocsEnums are on the same doc\n        return doc;\n      } while (true);\n      // advance head for next iteration\n      doc = lead.doc = lead.docs.nextDoc();  \n    } while (true);\n  }\n\n","bugFix":["f08557cdb6c60ac7b88a9342c983a20cd236e74f","ee1513e4ee2237693ff50a460d78dff5246c3d34"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b9f056598bc578796f7c2eaa4b2bb8eaab5c23a","date":1363294103,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ConjunctionScorer#doNext(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/ConjunctionTermScorer#doNext(int).mjava","sourceNew":"  private int doNext(int doc) throws IOException {\n    for(;;) {\n      // doc may already be NO_MORE_DOCS here, but we don't check explicitly\n      // since all scorers should advance to NO_MORE_DOCS, match, then\n      // return that value.\n      advanceHead: for(;;) {\n        for (int i = 1; i < docsAndFreqs.length; i++) {\n          // invariant: docsAndFreqs[i].doc <= doc at this point.\n\n          // docsAndFreqs[i].doc may already be equal to doc if we \"broke advanceHead\"\n          // on the previous iteration and the advance on the lead scorer exactly matched.\n          if (docsAndFreqs[i].doc < doc) {\n            docsAndFreqs[i].doc = docsAndFreqs[i].scorer.advance(doc);\n\n            if (docsAndFreqs[i].doc > doc) {\n              // DocsEnum beyond the current doc - break and advance lead to the new highest doc.\n              doc = docsAndFreqs[i].doc;\n              break advanceHead;\n            }\n          }\n        }\n        // success - all DocsEnums are on the same doc\n        return doc;\n      }\n      // advance head for next iteration\n      doc = lead.doc = lead.scorer.advance(doc);\n    }\n  }\n\n","sourceOld":"  private int doNext(int doc) throws IOException {\n    for(;;) {\n      // doc may already be NO_MORE_DOCS here, but we don't check explicitly\n      // since all scorers should advance to NO_MORE_DOCS, match, then\n      // return that value.\n      advanceHead: for(;;) {\n        for (int i = 1; i < docsAndFreqs.length; i++) {\n          // invariant: docsAndFreqs[i].doc <= doc at this point.\n\n          // docsAndFreqs[i].doc may already be equal to doc if we \"broke advanceHead\"\n          // on the previous iteration and the advance on the lead scorer exactly matched.\n          if (docsAndFreqs[i].doc < doc) {\n            docsAndFreqs[i].doc = docsAndFreqs[i].docs.advance(doc);\n\n            if (docsAndFreqs[i].doc > doc) {\n              // DocsEnum beyond the current doc - break and advance lead to the new highest doc.\n              doc = docsAndFreqs[i].doc;\n              break advanceHead;\n            }\n          }\n        }\n        // success - all DocsEnums are on the same doc\n        return doc;\n      }\n      // advance head for next iteration\n      doc = lead.doc = lead.docs.advance(doc);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ad53827f5ab12289afd304fbeb30bf6e13c7c0d6":["f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"f08557cdb6c60ac7b88a9342c983a20cd236e74f":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7b9f056598bc578796f7c2eaa4b2bb8eaab5c23a":["ad53827f5ab12289afd304fbeb30bf6e13c7c0d6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7b9f056598bc578796f7c2eaa4b2bb8eaab5c23a"]},"commit2Childs":{"ad53827f5ab12289afd304fbeb30bf6e13c7c0d6":["7b9f056598bc578796f7c2eaa4b2bb8eaab5c23a"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"f08557cdb6c60ac7b88a9342c983a20cd236e74f":["ad53827f5ab12289afd304fbeb30bf6e13c7c0d6","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"7b9f056598bc578796f7c2eaa4b2bb8eaab5c23a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}