{"path":"lucene/analysis/common/src/java/org/apache/lucene/analysis/en/KStemmer#ionEndings().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/en/KStemmer#ionEndings().mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/en/KStemmer#ionEndings().mjava","sourceNew":"  /* handle some derivational endings */\n  /*\n   * this routine deals with -ion, -ition, -ation, -ization, and -ication. The\n   * -ization ending is always converted to -ize\n   */\n  private void ionEndings() {\n    int old_k = k;\n    if (!endsIn('i', 'o', 'n')) {\n      return;\n    }\n    \n    if (endsIn(ization)) { /*\n                            * the -ize ending is very productive, so simply\n                            * accept it as the root\n                            */\n      word.setLength(j + 3);\n      word.unsafeWrite('e');\n      k = j + 3;\n      lookup();\n      return;\n    }\n    \n    if (endsIn(ition)) {\n      word.setLength(j + 1);\n      word.unsafeWrite('e');\n      k = j + 1;\n      if (lookup()) /*\n                     * remove -ition and add `e', and check against the\n                     * dictionary\n                     */\n      return; /* (e.g., definition->define, opposition->oppose) */\n      \n      /* restore original values */\n      word.setLength(j + 1);\n      word.append(\"ition\");\n      k = old_k;\n      // nolookup()\n    } else if (endsIn(ation)) {\n      word.setLength(j + 3);\n      word.unsafeWrite('e');\n      k = j + 3;\n      if (lookup()) /* remove -ion and add `e', and check against the dictionary */\n      return; /* (elmination -> eliminate) */\n      \n      word.setLength(j + 1);\n      word.unsafeWrite('e'); /*\n                              * remove -ation and add `e', and check against the\n                              * dictionary\n                              */\n      k = j + 1;\n      if (lookup()) return;\n      \n      word.setLength(j + 1);/*\n                             * just remove -ation (resignation->resign) and\n                             * check dictionary\n                             */\n      k = j;\n      if (lookup()) return;\n      \n      /* restore original values */\n      word.setLength(j + 1);\n      word.append(\"ation\");\n      k = old_k;\n      // nolookup()\n      \n    }\n    \n    /*\n     * test -ication after -ation is attempted (e.g., `complication->complicate'\n     * rather than `complication->comply')\n     */\n\n    if (endsIn(ication)) {\n      word.setLength(j + 1);\n      word.unsafeWrite('y');\n      k = j + 1;\n      if (lookup()) /*\n                     * remove -ication and add `y', and check against the\n                     * dictionary\n                     */\n      return; /* (e.g., amplification -> amplify) */\n      \n      /* restore original values */\n      word.setLength(j + 1);\n      word.append(\"ication\");\n      k = old_k;\n      // nolookup()\n    }\n    \n    // if (endsIn(ion)) {\n    if (true) { // we checked for this earlier... just need to set \"j\"\n      j = k - 3; // YCS\n      \n      word.setLength(j + 1);\n      word.unsafeWrite('e');\n      k = j + 1;\n      if (lookup()) /* remove -ion and add `e', and check against the dictionary */\n      return;\n      \n      word.setLength(j + 1);\n      k = j;\n      if (lookup()) /* remove -ion, and if it's found, treat that as the root */\n      return;\n      \n      /* restore original values */\n      word.setLength(j + 1);\n      word.append(\"ion\");\n      k = old_k;\n      // nolookup()\n    }\n    \n    // nolookup(); all of the other paths restored original values\n    return;\n  }\n\n","sourceOld":"  /* handle some derivational endings */\n  /*\n   * this routine deals with -ion, -ition, -ation, -ization, and -ication. The\n   * -ization ending is always converted to -ize\n   */\n  private void ionEndings() {\n    int old_k = k;\n    if (!endsIn('i', 'o', 'n')) {\n      return;\n    }\n    \n    if (endsIn(ization)) { /*\n                            * the -ize ending is very productive, so simply\n                            * accept it as the root\n                            */\n      word.setLength(j + 3);\n      word.unsafeWrite('e');\n      k = j + 3;\n      lookup();\n      return;\n    }\n    \n    if (endsIn(ition)) {\n      word.setLength(j + 1);\n      word.unsafeWrite('e');\n      k = j + 1;\n      if (lookup()) /*\n                     * remove -ition and add `e', and check against the\n                     * dictionary\n                     */\n      return; /* (e.g., definition->define, opposition->oppose) */\n      \n      /* restore original values */\n      word.setLength(j + 1);\n      word.append(\"ition\");\n      k = old_k;\n      // nolookup()\n    } else if (endsIn(ation)) {\n      word.setLength(j + 3);\n      word.unsafeWrite('e');\n      k = j + 3;\n      if (lookup()) /* remove -ion and add `e', and check against the dictionary */\n      return; /* (elmination -> eliminate) */\n      \n      word.setLength(j + 1);\n      word.unsafeWrite('e'); /*\n                              * remove -ation and add `e', and check against the\n                              * dictionary\n                              */\n      k = j + 1;\n      if (lookup()) return;\n      \n      word.setLength(j + 1);/*\n                             * just remove -ation (resignation->resign) and\n                             * check dictionary\n                             */\n      k = j;\n      if (lookup()) return;\n      \n      /* restore original values */\n      word.setLength(j + 1);\n      word.append(\"ation\");\n      k = old_k;\n      // nolookup()\n      \n    }\n    \n    /*\n     * test -ication after -ation is attempted (e.g., `complication->complicate'\n     * rather than `complication->comply')\n     */\n\n    if (endsIn(ication)) {\n      word.setLength(j + 1);\n      word.unsafeWrite('y');\n      k = j + 1;\n      if (lookup()) /*\n                     * remove -ication and add `y', and check against the\n                     * dictionary\n                     */\n      return; /* (e.g., amplification -> amplify) */\n      \n      /* restore original values */\n      word.setLength(j + 1);\n      word.append(\"ication\");\n      k = old_k;\n      // nolookup()\n    }\n    \n    // if (endsIn(ion)) {\n    if (true) { // we checked for this earlier... just need to set \"j\"\n      j = k - 3; // YCS\n      \n      word.setLength(j + 1);\n      word.unsafeWrite('e');\n      k = j + 1;\n      if (lookup()) /* remove -ion and add `e', and check against the dictionary */\n      return;\n      \n      word.setLength(j + 1);\n      k = j;\n      if (lookup()) /* remove -ion, and if it's found, treat that as the root */\n      return;\n      \n      /* restore original values */\n      word.setLength(j + 1);\n      word.append(\"ion\");\n      k = old_k;\n      // nolookup()\n    }\n    \n    // nolookup(); all of the other paths restored original values\n    return;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}