{"path":"lucene/suggest/src/java/org/apache/lucene/search/suggest/Sort.BufferSize#automatic().mjava","commits":[{"id":"847d1294c8ff2f0172af20892ef98a1c6a952e09","date":1359503775,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/Sort.BufferSize#automatic().mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/Sort.BufferSize#automatic().mjava","sourceNew":"    /** \n     * Approximately half of the currently available free heap, but no less\n     * than {@link #ABSOLUTE_MIN_SORT_BUFFER_SIZE}. However if current heap allocation \n     * is insufficient or if there is a large portion of unallocated heap-space available \n     * for sorting consult with max allowed heap size. \n     */\n    public static BufferSize automatic() {\n      Runtime rt = Runtime.getRuntime();\n      \n      // take sizes in \"conservative\" order\n      final long max = rt.maxMemory(); // max allocated\n      final long total = rt.totalMemory(); // currently allocated\n      final long free = rt.freeMemory(); // unused portion of currently allocated\n      final long totalAvailableBytes = max - total + free;\n      \n      // by free mem (attempting to not grow the heap for this)\n      long sortBufferByteSize = free/2;\n      final long minBufferSizeBytes = MIN_BUFFER_SIZE_MB*MB;\n      if (sortBufferByteSize <  minBufferSizeBytes\n          || totalAvailableBytes > 10 * minBufferSizeBytes) { // lets see if we need/should to grow the heap \n        if (totalAvailableBytes/2 > minBufferSizeBytes){ // there is enough mem for a reasonable buffer\n          sortBufferByteSize = totalAvailableBytes/2; // grow the heap\n        } else {\n          //heap seems smallish lets be conservative fall back to the free/2 \n          sortBufferByteSize = Math.max(ABSOLUTE_MIN_SORT_BUFFER_SIZE, sortBufferByteSize);\n        }\n      }\n      return new BufferSize(Math.min((long)Integer.MAX_VALUE, sortBufferByteSize));\n    }\n\n","sourceOld":"    /** \n     * Approximately half of the currently available free heap, but no less\n     * than {@link #ABSOLUTE_MIN_SORT_BUFFER_SIZE}. However if current heap allocation \n     * is insufficient or if there is a large portion of unallocated heap-space available \n     * for sorting consult with max allowed heap size. \n     */\n    public static BufferSize automatic() {\n      Runtime rt = Runtime.getRuntime();\n      \n      // take sizes in \"conservative\" order\n      final long max = rt.maxMemory(); // max allocated\n      final long total = rt.totalMemory(); // currently allocated\n      final long free = rt.freeMemory(); // unused portion of currently allocated\n      final long totalAvailableBytes = max - total + free;\n      \n      // by free mem (attempting to not grow the heap for this)\n      long sortBufferByteSize = free/2;\n      final long minBufferSizeBytes = MIN_BUFFER_SIZE_MB*MB;\n      if (sortBufferByteSize <  minBufferSizeBytes\n          || totalAvailableBytes > 10 * minBufferSizeBytes) { // lets see if we need/should to grow the heap \n        if (totalAvailableBytes/2 > minBufferSizeBytes){ // there is enough mem for a reasonable buffer\n          sortBufferByteSize = totalAvailableBytes/2; // grow the heap\n        } else {\n          //heap seems smallish lets be conservative fall back to the free/2 \n          sortBufferByteSize = Math.max(ABSOLUTE_MIN_SORT_BUFFER_SIZE, sortBufferByteSize);\n        }\n      }\n      return new BufferSize(Math.min((long)Integer.MAX_VALUE, sortBufferByteSize));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/Sort.BufferSize#automatic().mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/Sort.BufferSize#automatic().mjava","sourceNew":"    /** \n     * Approximately half of the currently available free heap, but no less\n     * than {@link #ABSOLUTE_MIN_SORT_BUFFER_SIZE}. However if current heap allocation \n     * is insufficient or if there is a large portion of unallocated heap-space available \n     * for sorting consult with max allowed heap size. \n     */\n    public static BufferSize automatic() {\n      Runtime rt = Runtime.getRuntime();\n      \n      // take sizes in \"conservative\" order\n      final long max = rt.maxMemory(); // max allocated\n      final long total = rt.totalMemory(); // currently allocated\n      final long free = rt.freeMemory(); // unused portion of currently allocated\n      final long totalAvailableBytes = max - total + free;\n      \n      // by free mem (attempting to not grow the heap for this)\n      long sortBufferByteSize = free/2;\n      final long minBufferSizeBytes = MIN_BUFFER_SIZE_MB*MB;\n      if (sortBufferByteSize <  minBufferSizeBytes\n          || totalAvailableBytes > 10 * minBufferSizeBytes) { // lets see if we need/should to grow the heap \n        if (totalAvailableBytes/2 > minBufferSizeBytes){ // there is enough mem for a reasonable buffer\n          sortBufferByteSize = totalAvailableBytes/2; // grow the heap\n        } else {\n          //heap seems smallish lets be conservative fall back to the free/2 \n          sortBufferByteSize = Math.max(ABSOLUTE_MIN_SORT_BUFFER_SIZE, sortBufferByteSize);\n        }\n      }\n      return new BufferSize(Math.min((long)Integer.MAX_VALUE, sortBufferByteSize));\n    }\n\n","sourceOld":"    /** \n     * Approximately half of the currently available free heap, but no less\n     * than {@link #ABSOLUTE_MIN_SORT_BUFFER_SIZE}. However if current heap allocation \n     * is insufficient or if there is a large portion of unallocated heap-space available \n     * for sorting consult with max allowed heap size. \n     */\n    public static BufferSize automatic() {\n      Runtime rt = Runtime.getRuntime();\n      \n      // take sizes in \"conservative\" order\n      final long max = rt.maxMemory(); // max allocated\n      final long total = rt.totalMemory(); // currently allocated\n      final long free = rt.freeMemory(); // unused portion of currently allocated\n      final long totalAvailableBytes = max - total + free;\n      \n      // by free mem (attempting to not grow the heap for this)\n      long sortBufferByteSize = free/2;\n      final long minBufferSizeBytes = MIN_BUFFER_SIZE_MB*MB;\n      if (sortBufferByteSize <  minBufferSizeBytes\n          || totalAvailableBytes > 10 * minBufferSizeBytes) { // lets see if we need/should to grow the heap \n        if (totalAvailableBytes/2 > minBufferSizeBytes){ // there is enough mem for a reasonable buffer\n          sortBufferByteSize = totalAvailableBytes/2; // grow the heap\n        } else {\n          //heap seems smallish lets be conservative fall back to the free/2 \n          sortBufferByteSize = Math.max(ABSOLUTE_MIN_SORT_BUFFER_SIZE, sortBufferByteSize);\n        }\n      }\n      return new BufferSize(Math.min((long)Integer.MAX_VALUE, sortBufferByteSize));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"36f5a8c57e16c0f801006a52f87c75378427852e","date":1393256707,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/OfflineSorter.BufferSize#automatic().mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/Sort.BufferSize#automatic().mjava","sourceNew":"    /** \n     * Approximately half of the currently available free heap, but no less\n     * than {@link #ABSOLUTE_MIN_SORT_BUFFER_SIZE}. However if current heap allocation \n     * is insufficient or if there is a large portion of unallocated heap-space available \n     * for sorting consult with max allowed heap size. \n     */\n    public static BufferSize automatic() {\n      Runtime rt = Runtime.getRuntime();\n      \n      // take sizes in \"conservative\" order\n      final long max = rt.maxMemory(); // max allocated\n      final long total = rt.totalMemory(); // currently allocated\n      final long free = rt.freeMemory(); // unused portion of currently allocated\n      final long totalAvailableBytes = max - total + free;\n      \n      // by free mem (attempting to not grow the heap for this)\n      long sortBufferByteSize = free/2;\n      final long minBufferSizeBytes = MIN_BUFFER_SIZE_MB*MB;\n      if (sortBufferByteSize <  minBufferSizeBytes\n          || totalAvailableBytes > 10 * minBufferSizeBytes) { // lets see if we need/should to grow the heap \n        if (totalAvailableBytes/2 > minBufferSizeBytes){ // there is enough mem for a reasonable buffer\n          sortBufferByteSize = totalAvailableBytes/2; // grow the heap\n        } else {\n          //heap seems smallish lets be conservative fall back to the free/2 \n          sortBufferByteSize = Math.max(ABSOLUTE_MIN_SORT_BUFFER_SIZE, sortBufferByteSize);\n        }\n      }\n      return new BufferSize(Math.min((long)Integer.MAX_VALUE, sortBufferByteSize));\n    }\n\n","sourceOld":"    /** \n     * Approximately half of the currently available free heap, but no less\n     * than {@link #ABSOLUTE_MIN_SORT_BUFFER_SIZE}. However if current heap allocation \n     * is insufficient or if there is a large portion of unallocated heap-space available \n     * for sorting consult with max allowed heap size. \n     */\n    public static BufferSize automatic() {\n      Runtime rt = Runtime.getRuntime();\n      \n      // take sizes in \"conservative\" order\n      final long max = rt.maxMemory(); // max allocated\n      final long total = rt.totalMemory(); // currently allocated\n      final long free = rt.freeMemory(); // unused portion of currently allocated\n      final long totalAvailableBytes = max - total + free;\n      \n      // by free mem (attempting to not grow the heap for this)\n      long sortBufferByteSize = free/2;\n      final long minBufferSizeBytes = MIN_BUFFER_SIZE_MB*MB;\n      if (sortBufferByteSize <  minBufferSizeBytes\n          || totalAvailableBytes > 10 * minBufferSizeBytes) { // lets see if we need/should to grow the heap \n        if (totalAvailableBytes/2 > minBufferSizeBytes){ // there is enough mem for a reasonable buffer\n          sortBufferByteSize = totalAvailableBytes/2; // grow the heap\n        } else {\n          //heap seems smallish lets be conservative fall back to the free/2 \n          sortBufferByteSize = Math.max(ABSOLUTE_MIN_SORT_BUFFER_SIZE, sortBufferByteSize);\n        }\n      }\n      return new BufferSize(Math.min((long)Integer.MAX_VALUE, sortBufferByteSize));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba791bce8103c79e38f957e9c5a53a75871bd918","date":1393539206,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/OfflineSorter.BufferSize#automatic().mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/Sort.BufferSize#automatic().mjava","sourceNew":"    /** \n     * Approximately half of the currently available free heap, but no less\n     * than {@link #ABSOLUTE_MIN_SORT_BUFFER_SIZE}. However if current heap allocation \n     * is insufficient or if there is a large portion of unallocated heap-space available \n     * for sorting consult with max allowed heap size. \n     */\n    public static BufferSize automatic() {\n      Runtime rt = Runtime.getRuntime();\n      \n      // take sizes in \"conservative\" order\n      final long max = rt.maxMemory(); // max allocated\n      final long total = rt.totalMemory(); // currently allocated\n      final long free = rt.freeMemory(); // unused portion of currently allocated\n      final long totalAvailableBytes = max - total + free;\n      \n      // by free mem (attempting to not grow the heap for this)\n      long sortBufferByteSize = free/2;\n      final long minBufferSizeBytes = MIN_BUFFER_SIZE_MB*MB;\n      if (sortBufferByteSize <  minBufferSizeBytes\n          || totalAvailableBytes > 10 * minBufferSizeBytes) { // lets see if we need/should to grow the heap \n        if (totalAvailableBytes/2 > minBufferSizeBytes){ // there is enough mem for a reasonable buffer\n          sortBufferByteSize = totalAvailableBytes/2; // grow the heap\n        } else {\n          //heap seems smallish lets be conservative fall back to the free/2 \n          sortBufferByteSize = Math.max(ABSOLUTE_MIN_SORT_BUFFER_SIZE, sortBufferByteSize);\n        }\n      }\n      return new BufferSize(Math.min((long)Integer.MAX_VALUE, sortBufferByteSize));\n    }\n\n","sourceOld":"    /** \n     * Approximately half of the currently available free heap, but no less\n     * than {@link #ABSOLUTE_MIN_SORT_BUFFER_SIZE}. However if current heap allocation \n     * is insufficient or if there is a large portion of unallocated heap-space available \n     * for sorting consult with max allowed heap size. \n     */\n    public static BufferSize automatic() {\n      Runtime rt = Runtime.getRuntime();\n      \n      // take sizes in \"conservative\" order\n      final long max = rt.maxMemory(); // max allocated\n      final long total = rt.totalMemory(); // currently allocated\n      final long free = rt.freeMemory(); // unused portion of currently allocated\n      final long totalAvailableBytes = max - total + free;\n      \n      // by free mem (attempting to not grow the heap for this)\n      long sortBufferByteSize = free/2;\n      final long minBufferSizeBytes = MIN_BUFFER_SIZE_MB*MB;\n      if (sortBufferByteSize <  minBufferSizeBytes\n          || totalAvailableBytes > 10 * minBufferSizeBytes) { // lets see if we need/should to grow the heap \n        if (totalAvailableBytes/2 > minBufferSizeBytes){ // there is enough mem for a reasonable buffer\n          sortBufferByteSize = totalAvailableBytes/2; // grow the heap\n        } else {\n          //heap seems smallish lets be conservative fall back to the free/2 \n          sortBufferByteSize = Math.max(ABSOLUTE_MIN_SORT_BUFFER_SIZE, sortBufferByteSize);\n        }\n      }\n      return new BufferSize(Math.min((long)Integer.MAX_VALUE, sortBufferByteSize));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d4d69c535930b5cce125cff868d40f6373dc27d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","847d1294c8ff2f0172af20892ef98a1c6a952e09"],"ba791bce8103c79e38f957e9c5a53a75871bd918":["d4d69c535930b5cce125cff868d40f6373dc27d4","36f5a8c57e16c0f801006a52f87c75378427852e"],"36f5a8c57e16c0f801006a52f87c75378427852e":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"847d1294c8ff2f0172af20892ef98a1c6a952e09":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ba791bce8103c79e38f957e9c5a53a75871bd918"]},"commit2Childs":{"d4d69c535930b5cce125cff868d40f6373dc27d4":["ba791bce8103c79e38f957e9c5a53a75871bd918","36f5a8c57e16c0f801006a52f87c75378427852e"],"ba791bce8103c79e38f957e9c5a53a75871bd918":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"36f5a8c57e16c0f801006a52f87c75378427852e":["ba791bce8103c79e38f957e9c5a53a75871bd918"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d4d69c535930b5cce125cff868d40f6373dc27d4","847d1294c8ff2f0172af20892ef98a1c6a952e09"],"847d1294c8ff2f0172af20892ef98a1c6a952e09":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}