{"path":"src/java/org/apache/lucene/search/DisjunctionMaxQuery.DisjunctionMaxWeight#normalize(float).mjava","commits":[{"id":"f58d67a8f4d66d0872915c9bb14606874988efc3","date":1132166857,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/DisjunctionMaxQuery.DisjunctionMaxWeight#normalize(float).mjava","pathOld":"/dev/null","sourceNew":"    /* Apply the computed normalization factor to our subqueries */\r\n    public void normalize(float norm) {\r\n      norm *= getBoost();  // Incorporate our boost\r\n      for (int i = 0 ; i < weights.size(); i++)\r\n        ((Weight) weights.get(i)).normalize(norm);\r\n    }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2123bddbd65dea198cac380540636ce43a880403","date":1211269254,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/DisjunctionMaxQuery.DisjunctionMaxWeight#normalize(float).mjava","pathOld":"src/java/org/apache/lucene/search/DisjunctionMaxQuery.DisjunctionMaxWeight#normalize(float).mjava","sourceNew":"    /* Apply the computed normalization factor to our subqueries */\n    public void normalize(float norm) {\n      norm *= getBoost();  // Incorporate our boost\n      for (int i = 0 ; i < weights.size(); i++)\n        ((Weight) weights.get(i)).normalize(norm);\n    }\n\n","sourceOld":"    /* Apply the computed normalization factor to our subqueries */\r\n    public void normalize(float norm) {\r\n      norm *= getBoost();  // Incorporate our boost\r\n      for (int i = 0 ; i < weights.size(); i++)\r\n        ((Weight) weights.get(i)).normalize(norm);\r\n    }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"052fac7830290bd38a04cddee1a121ee07656b56","date":1245780702,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/DisjunctionMaxQuery.DisjunctionMaxWeight#normalize(float).mjava","pathOld":"src/java/org/apache/lucene/search/DisjunctionMaxQuery.DisjunctionMaxWeight#normalize(float).mjava","sourceNew":"    /* Apply the computed normalization factor to our subqueries */\n    public void normalize(float norm) {\n      norm *= getBoost();  // Incorporate our boost\n      for (Iterator iter = weights.iterator(); iter.hasNext();) {\n        ((QueryWeight) iter.next()).normalize(norm);\n      }\n    }\n\n","sourceOld":"    /* Apply the computed normalization factor to our subqueries */\n    public void normalize(float norm) {\n      norm *= getBoost();  // Incorporate our boost\n      for (int i = 0 ; i < weights.size(); i++)\n        ((Weight) weights.get(i)).normalize(norm);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe941135bdfc28c81e20b4d21422f8726af34925","date":1250040150,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/DisjunctionMaxQuery.DisjunctionMaxWeight#normalize(float).mjava","pathOld":"src/java/org/apache/lucene/search/DisjunctionMaxQuery.DisjunctionMaxWeight#normalize(float).mjava","sourceNew":"    /* Apply the computed normalization factor to our subqueries */\n    public void normalize(float norm) {\n      norm *= getBoost();  // Incorporate our boost\n      for (Iterator iter = weights.iterator(); iter.hasNext();) {\n        ((Weight) iter.next()).normalize(norm);\n      }\n    }\n\n","sourceOld":"    /* Apply the computed normalization factor to our subqueries */\n    public void normalize(float norm) {\n      norm *= getBoost();  // Incorporate our boost\n      for (Iterator iter = weights.iterator(); iter.hasNext();) {\n        ((QueryWeight) iter.next()).normalize(norm);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e0d3ac29cb12b76130b702427d6bcd355e68d126","date":1255699234,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/DisjunctionMaxQuery.DisjunctionMaxWeight#normalize(float).mjava","pathOld":"src/java/org/apache/lucene/search/DisjunctionMaxQuery.DisjunctionMaxWeight#normalize(float).mjava","sourceNew":"    /* Apply the computed normalization factor to our subqueries */\n    @Override\n    public void normalize(float norm) {\n      norm *= getBoost();  // Incorporate our boost\n      for (Iterator<Weight> iter = weights.iterator(); iter.hasNext();) {\n        ((Weight) iter.next()).normalize(norm);\n      }\n    }\n\n","sourceOld":"    /* Apply the computed normalization factor to our subqueries */\n    public void normalize(float norm) {\n      norm *= getBoost();  // Incorporate our boost\n      for (Iterator iter = weights.iterator(); iter.hasNext();) {\n        ((Weight) iter.next()).normalize(norm);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"df43e6d101500e53fc5fffcae05a916e1fece0cf","date":1255710619,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/DisjunctionMaxQuery.DisjunctionMaxWeight#normalize(float).mjava","pathOld":"src/java/org/apache/lucene/search/DisjunctionMaxQuery.DisjunctionMaxWeight#normalize(float).mjava","sourceNew":"    /* Apply the computed normalization factor to our subqueries */\n    @Override\n    public void normalize(float norm) {\n      norm *= getBoost();  // Incorporate our boost\n      for (Weight wt : weights) {\n        wt.normalize(norm);\n      }\n    }\n\n","sourceOld":"    /* Apply the computed normalization factor to our subqueries */\n    @Override\n    public void normalize(float norm) {\n      norm *= getBoost();  // Incorporate our boost\n      for (Iterator<Weight> iter = weights.iterator(); iter.hasNext();) {\n        ((Weight) iter.next()).normalize(norm);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/DisjunctionMaxQuery.DisjunctionMaxWeight#normalize(float).mjava","pathOld":"src/java/org/apache/lucene/search/DisjunctionMaxQuery.DisjunctionMaxWeight#normalize(float).mjava","sourceNew":"    /* Apply the computed normalization factor to our subqueries */\n    @Override\n    public void normalize(float norm) {\n      norm *= getBoost();  // Incorporate our boost\n      for (Weight wt : weights) {\n        wt.normalize(norm);\n      }\n    }\n\n","sourceOld":"    /* Apply the computed normalization factor to our subqueries */\n    @Override\n    public void normalize(float norm) {\n      norm *= getBoost();  // Incorporate our boost\n      for (Weight wt : weights) {\n        wt.normalize(norm);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f58d67a8f4d66d0872915c9bb14606874988efc3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e0d3ac29cb12b76130b702427d6bcd355e68d126":["fe941135bdfc28c81e20b4d21422f8726af34925"],"df43e6d101500e53fc5fffcae05a916e1fece0cf":["e0d3ac29cb12b76130b702427d6bcd355e68d126"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2123bddbd65dea198cac380540636ce43a880403":["f58d67a8f4d66d0872915c9bb14606874988efc3"],"fe941135bdfc28c81e20b4d21422f8726af34925":["052fac7830290bd38a04cddee1a121ee07656b56"],"052fac7830290bd38a04cddee1a121ee07656b56":["2123bddbd65dea198cac380540636ce43a880403"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["df43e6d101500e53fc5fffcae05a916e1fece0cf"]},"commit2Childs":{"f58d67a8f4d66d0872915c9bb14606874988efc3":["2123bddbd65dea198cac380540636ce43a880403"],"e0d3ac29cb12b76130b702427d6bcd355e68d126":["df43e6d101500e53fc5fffcae05a916e1fece0cf"],"df43e6d101500e53fc5fffcae05a916e1fece0cf":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f58d67a8f4d66d0872915c9bb14606874988efc3"],"2123bddbd65dea198cac380540636ce43a880403":["052fac7830290bd38a04cddee1a121ee07656b56"],"fe941135bdfc28c81e20b4d21422f8726af34925":["e0d3ac29cb12b76130b702427d6bcd355e68d126"],"052fac7830290bd38a04cddee1a121ee07656b56":["fe941135bdfc28c81e20b4d21422f8726af34925"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}