{"path":"lucene/contrib/misc/src/test/org/apache/lucene/index/TestContribIndexReader#testBinaryFields().mjava","commits":[{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/contrib/misc/src/test/org/apache/lucene/index/TestContribIndexReader#testBinaryFields().mjava","pathOld":"/dev/null","sourceNew":"  public void testBinaryFields() throws IOException {\n    Directory dir = newDirectory();\n    byte[] bin = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};\n        \n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n        \n    for (int i = 0; i < 10; i++) {\n      addDoc(writer, \"document number \" + (i + 1));\n      addDocumentWithFields(writer);\n      addDocumentWithDifferentFields(writer);\n      addDocumentWithTermVectorFields(writer);\n    }\n    writer.close();\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND).setMergePolicy(newLogMergePolicy()));\n    Document doc = new Document();\n    doc.add(new BinaryField(\"bin1\", bin));\n    doc.add(new TextField(\"junk\", \"junk text\"));\n    writer.addDocument(doc);\n    writer.close();\n    IndexReader reader = IndexReader.open(dir, false);\n    Document doc2 = reader.document(reader.maxDoc() - 1);\n    IndexableField[] fields = doc2.getFields(\"bin1\");\n    assertNotNull(fields);\n    assertEquals(1, fields.length);\n    Field b1 = (Field) fields[0];\n    assertTrue(b1.isBinary());\n    BytesRef bytesRef = b1.binaryValue();\n    assertEquals(bin.length, bytesRef.length);\n    for (int i = 0; i < bin.length; i++) {\n      assertEquals(bin[i], bytesRef.bytes[i + bytesRef.offset]);\n    }\n    Set<String> lazyFields = new HashSet<String>();\n    lazyFields.add(\"bin1\");\n    FieldSelector sel = new SetBasedFieldSelector(new HashSet<String>(), lazyFields);\n    doc2 = getDocument(reader, reader.maxDoc() - 1, sel);\n    fields = doc2.getFields(\"bin1\");\n    assertNotNull(fields);\n    assertEquals(1, fields.length);\n    IndexableField fb1 = fields[0];\n    assertTrue(fb1.binaryValue()!=null);\n    bytesRef = fb1.binaryValue();\n    assertEquals(bin.length, bytesRef.bytes.length);\n    assertEquals(bin.length, bytesRef.length);\n    for (int i = 0; i < bin.length; i++) {\n      assertEquals(bin[i], bytesRef.bytes[i + bytesRef.offset]);\n    }\n    reader.close();\n    // force optimize\n\n\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND).setMergePolicy(newLogMergePolicy()));\n    writer.optimize();\n    writer.close();\n    reader = IndexReader.open(dir, false);\n    doc2 = reader.document(reader.maxDoc() - 1);\n    fields = doc2.getFields(\"bin1\");\n    assertNotNull(fields);\n    assertEquals(1, fields.length);\n    b1 = (Field) fields[0];\n    assertTrue(b1.isBinary());\n    bytesRef = b1.binaryValue();\n    assertEquals(bin.length, bytesRef.length);\n    for (int i = 0; i < bin.length; i++) {\n      assertEquals(bin[i], bytesRef.bytes[i + bytesRef.offset]);\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06584e6e98d592b34e1329b384182f368d2025e8","date":1320850353,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/contrib/misc/src/test/org/apache/lucene/index/TestContribIndexReader#testBinaryFields().mjava","sourceNew":null,"sourceOld":"  public void testBinaryFields() throws IOException {\n    Directory dir = newDirectory();\n    byte[] bin = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};\n        \n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n        \n    for (int i = 0; i < 10; i++) {\n      addDoc(writer, \"document number \" + (i + 1));\n      addDocumentWithFields(writer);\n      addDocumentWithDifferentFields(writer);\n      addDocumentWithTermVectorFields(writer);\n    }\n    writer.close();\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND).setMergePolicy(newLogMergePolicy()));\n    Document doc = new Document();\n    doc.add(new BinaryField(\"bin1\", bin));\n    doc.add(new TextField(\"junk\", \"junk text\"));\n    writer.addDocument(doc);\n    writer.close();\n    IndexReader reader = IndexReader.open(dir, false);\n    Document doc2 = reader.document(reader.maxDoc() - 1);\n    IndexableField[] fields = doc2.getFields(\"bin1\");\n    assertNotNull(fields);\n    assertEquals(1, fields.length);\n    Field b1 = (Field) fields[0];\n    assertTrue(b1.isBinary());\n    BytesRef bytesRef = b1.binaryValue();\n    assertEquals(bin.length, bytesRef.length);\n    for (int i = 0; i < bin.length; i++) {\n      assertEquals(bin[i], bytesRef.bytes[i + bytesRef.offset]);\n    }\n    Set<String> lazyFields = new HashSet<String>();\n    lazyFields.add(\"bin1\");\n    FieldSelector sel = new SetBasedFieldSelector(new HashSet<String>(), lazyFields);\n    doc2 = getDocument(reader, reader.maxDoc() - 1, sel);\n    fields = doc2.getFields(\"bin1\");\n    assertNotNull(fields);\n    assertEquals(1, fields.length);\n    IndexableField fb1 = fields[0];\n    assertTrue(fb1.binaryValue()!=null);\n    bytesRef = fb1.binaryValue();\n    assertEquals(bin.length, bytesRef.bytes.length);\n    assertEquals(bin.length, bytesRef.length);\n    for (int i = 0; i < bin.length; i++) {\n      assertEquals(bin[i], bytesRef.bytes[i + bytesRef.offset]);\n    }\n    reader.close();\n    // force optimize\n\n\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND).setMergePolicy(newLogMergePolicy()));\n    writer.optimize();\n    writer.close();\n    reader = IndexReader.open(dir, false);\n    doc2 = reader.document(reader.maxDoc() - 1);\n    fields = doc2.getFields(\"bin1\");\n    assertNotNull(fields);\n    assertEquals(1, fields.length);\n    b1 = (Field) fields[0];\n    assertTrue(b1.isBinary());\n    bytesRef = b1.binaryValue();\n    assertEquals(bin.length, bytesRef.length);\n    for (int i = 0; i < bin.length; i++) {\n      assertEquals(bin[i], bytesRef.bytes[i + bytesRef.offset]);\n    }\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"06584e6e98d592b34e1329b384182f368d2025e8":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["06584e6e98d592b34e1329b384182f368d2025e8"]},"commit2Childs":{"06584e6e98d592b34e1329b384182f368d2025e8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["06584e6e98d592b34e1329b384182f368d2025e8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}