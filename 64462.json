{"path":"lucene/core/src/java/org/apache/lucene/util/fst/BitTableUtil#countBits(int,FST.BytesReader).mjava","commits":[{"id":"06086b5bd0f0d57858f0675becc58edf1f6b7c11","date":1586421397,"type":0,"author":"Bruno Roustant","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/BitTableUtil#countBits(int,FST.BytesReader).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Counts all bits set in the bit-table.\n   *\n   * @param bitTableBytes The number of bytes in the bit-table.\n   * @param reader        The {@link FST.BytesReader} to read. It must be positioned at the beginning of the bit-table.\n   */\n  static int countBits(int bitTableBytes, FST.BytesReader reader) throws IOException {\n    assert bitTableBytes >= 0 : \"bitTableBytes=\" + bitTableBytes;\n    int bitCount = 0;\n    for (int i = bitTableBytes >> 3; i > 0; i--) {\n      // Count the bits set for all plain longs.\n      bitCount += Long.bitCount(read8Bytes(reader));\n    }\n    int numRemainingBytes;\n    if ((numRemainingBytes = bitTableBytes & (Long.BYTES - 1)) != 0) {\n      bitCount += Long.bitCount(readUpTo8Bytes(numRemainingBytes, reader));\n    }\n    return bitCount;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b4028f65e476b6d429265cd35d71dc37de33a161","date":1586777845,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/BitTableUtil#countBits(int,FST.BytesReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/BitTableUtil#countBits(int,FST.BytesReader).mjava","sourceNew":"  /**\n   * Counts all bits set in the bit-table.\n   *\n   * @param bitTableBytes The number of bytes in the bit-table.\n   * @param reader        The {@link FST.BytesReader} to read. It must be positioned at the beginning of the bit-table.\n   */\n  static int countBits(int bitTableBytes, FST.BytesReader reader) throws IOException {\n    assert bitTableBytes >= 0 : \"bitTableBytes=\" + bitTableBytes;\n    int bitCount = 0;\n    for (int i = bitTableBytes >> 3; i > 0; i--) {\n      // Count the bits set for all plain longs.\n      bitCount += bitCount8Bytes(reader);\n    }\n    int numRemainingBytes;\n    if ((numRemainingBytes = bitTableBytes & (Long.BYTES - 1)) != 0) {\n      bitCount += Long.bitCount(readUpTo8Bytes(numRemainingBytes, reader));\n    }\n    return bitCount;\n  }\n\n","sourceOld":"  /**\n   * Counts all bits set in the bit-table.\n   *\n   * @param bitTableBytes The number of bytes in the bit-table.\n   * @param reader        The {@link FST.BytesReader} to read. It must be positioned at the beginning of the bit-table.\n   */\n  static int countBits(int bitTableBytes, FST.BytesReader reader) throws IOException {\n    assert bitTableBytes >= 0 : \"bitTableBytes=\" + bitTableBytes;\n    int bitCount = 0;\n    for (int i = bitTableBytes >> 3; i > 0; i--) {\n      // Count the bits set for all plain longs.\n      bitCount += Long.bitCount(read8Bytes(reader));\n    }\n    int numRemainingBytes;\n    if ((numRemainingBytes = bitTableBytes & (Long.BYTES - 1)) != 0) {\n      bitCount += Long.bitCount(readUpTo8Bytes(numRemainingBytes, reader));\n    }\n    return bitCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b4028f65e476b6d429265cd35d71dc37de33a161":["06086b5bd0f0d57858f0675becc58edf1f6b7c11"],"06086b5bd0f0d57858f0675becc58edf1f6b7c11":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b4028f65e476b6d429265cd35d71dc37de33a161"]},"commit2Childs":{"b4028f65e476b6d429265cd35d71dc37de33a161":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"06086b5bd0f0d57858f0675becc58edf1f6b7c11":["b4028f65e476b6d429265cd35d71dc37de33a161"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["06086b5bd0f0d57858f0675becc58edf1f6b7c11"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}