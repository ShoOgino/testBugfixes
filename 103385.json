{"path":"backwards/src/java/org/apache/lucene/document/Field#Field(String,boolean,String,Store,Index,TermVector).mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/java/org/apache/lucene/document/Field#Field(String,boolean,String,Store,Index,TermVector).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Create a field by specifying its name, value and how it will\n   * be saved in the index.\n   * \n   * @param name The name of the field\n   * @param internName Whether to .intern() name or not\n   * @param value The string to process\n   * @param store Whether <code>value</code> should be stored in the index\n   * @param index Whether the field should be indexed, and if so, if it should\n   *  be tokenized before indexing \n   * @param termVector Whether term vector should be stored\n   * @throws NullPointerException if name or value is <code>null</code>\n   * @throws IllegalArgumentException in any of the following situations:\n   * <ul> \n   *  <li>the field is neither stored nor indexed</li> \n   *  <li>the field is not indexed but termVector is <code>TermVector.YES</code></li>\n   * </ul> \n   */ \n  public Field(String name, boolean internName, String value, Store store, Index index, TermVector termVector) {\n    if (name == null)\n      throw new NullPointerException(\"name cannot be null\");\n    if (value == null)\n      throw new NullPointerException(\"value cannot be null\");\n    if (name.length() == 0 && value.length() == 0)\n      throw new IllegalArgumentException(\"name and value cannot both be empty\");\n    if (index == Index.NO && store == Store.NO)\n      throw new IllegalArgumentException(\"it doesn't make sense to have a field that \"\n         + \"is neither indexed nor stored\");\n    if (index == Index.NO && termVector != TermVector.NO)\n      throw new IllegalArgumentException(\"cannot store term vector information \"\n         + \"for a field that is not indexed\");\n          \n    if (internName) // field names are optionally interned\n      name = StringHelper.intern(name);\n    \n    this.name = name; \n    \n    this.fieldsData = value;\n\n    this.isStored = store.isStored();\n   \n    this.isIndexed = index.isIndexed();\n    this.isTokenized = index.isAnalyzed();\n    this.omitNorms = index.omitNorms();\n    if (index == Index.NO) {\n      this.omitTermFreqAndPositions = false;\n    }    \n\n    this.isBinary = false;\n\n    setStoreTermVector(termVector);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/document/Field#Field(String,boolean,String,Store,Index,TermVector).mjava","pathOld":"backwards/src/java/org/apache/lucene/document/Field#Field(String,boolean,String,Store,Index,TermVector).mjava","sourceNew":"  /**\n   * Create a field by specifying its name, value and how it will\n   * be saved in the index.\n   * \n   * @param name The name of the field\n   * @param internName Whether to .intern() name or not\n   * @param value The string to process\n   * @param store Whether <code>value</code> should be stored in the index\n   * @param index Whether the field should be indexed, and if so, if it should\n   *  be tokenized before indexing \n   * @param termVector Whether term vector should be stored\n   * @throws NullPointerException if name or value is <code>null</code>\n   * @throws IllegalArgumentException in any of the following situations:\n   * <ul> \n   *  <li>the field is neither stored nor indexed</li> \n   *  <li>the field is not indexed but termVector is <code>TermVector.YES</code></li>\n   * </ul> \n   */ \n  public Field(String name, boolean internName, String value, Store store, Index index, TermVector termVector) {\n    if (name == null)\n      throw new NullPointerException(\"name cannot be null\");\n    if (value == null)\n      throw new NullPointerException(\"value cannot be null\");\n    if (name.length() == 0 && value.length() == 0)\n      throw new IllegalArgumentException(\"name and value cannot both be empty\");\n    if (index == Index.NO && store == Store.NO)\n      throw new IllegalArgumentException(\"it doesn't make sense to have a field that \"\n         + \"is neither indexed nor stored\");\n    if (index == Index.NO && termVector != TermVector.NO)\n      throw new IllegalArgumentException(\"cannot store term vector information \"\n         + \"for a field that is not indexed\");\n          \n    if (internName) // field names are optionally interned\n      name = StringHelper.intern(name);\n    \n    this.name = name; \n    \n    this.fieldsData = value;\n\n    this.isStored = store.isStored();\n   \n    this.isIndexed = index.isIndexed();\n    this.isTokenized = index.isAnalyzed();\n    this.omitNorms = index.omitNorms();\n    if (index == Index.NO) {\n      this.omitTermFreqAndPositions = false;\n    }    \n\n    this.isBinary = false;\n\n    setStoreTermVector(termVector);\n  }\n\n","sourceOld":"  /**\n   * Create a field by specifying its name, value and how it will\n   * be saved in the index.\n   * \n   * @param name The name of the field\n   * @param internName Whether to .intern() name or not\n   * @param value The string to process\n   * @param store Whether <code>value</code> should be stored in the index\n   * @param index Whether the field should be indexed, and if so, if it should\n   *  be tokenized before indexing \n   * @param termVector Whether term vector should be stored\n   * @throws NullPointerException if name or value is <code>null</code>\n   * @throws IllegalArgumentException in any of the following situations:\n   * <ul> \n   *  <li>the field is neither stored nor indexed</li> \n   *  <li>the field is not indexed but termVector is <code>TermVector.YES</code></li>\n   * </ul> \n   */ \n  public Field(String name, boolean internName, String value, Store store, Index index, TermVector termVector) {\n    if (name == null)\n      throw new NullPointerException(\"name cannot be null\");\n    if (value == null)\n      throw new NullPointerException(\"value cannot be null\");\n    if (name.length() == 0 && value.length() == 0)\n      throw new IllegalArgumentException(\"name and value cannot both be empty\");\n    if (index == Index.NO && store == Store.NO)\n      throw new IllegalArgumentException(\"it doesn't make sense to have a field that \"\n         + \"is neither indexed nor stored\");\n    if (index == Index.NO && termVector != TermVector.NO)\n      throw new IllegalArgumentException(\"cannot store term vector information \"\n         + \"for a field that is not indexed\");\n          \n    if (internName) // field names are optionally interned\n      name = StringHelper.intern(name);\n    \n    this.name = name; \n    \n    this.fieldsData = value;\n\n    this.isStored = store.isStored();\n   \n    this.isIndexed = index.isIndexed();\n    this.isTokenized = index.isAnalyzed();\n    this.omitNorms = index.omitNorms();\n    if (index == Index.NO) {\n      this.omitTermFreqAndPositions = false;\n    }    \n\n    this.isBinary = false;\n\n    setStoreTermVector(termVector);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":6,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/document/Field#Field(String,boolean,String,Store,Index,TermVector).mjava","pathOld":"backwards/src/java/org/apache/lucene/document/Field#Field(String,boolean,String,Store,Index,TermVector).mjava","sourceNew":"  /**\n   * Create a field by specifying its name, value and how it will\n   * be saved in the index.\n   * \n   * @param name The name of the field\n   * @param internName Whether to .intern() name or not\n   * @param value The string to process\n   * @param store Whether <code>value</code> should be stored in the index\n   * @param index Whether the field should be indexed, and if so, if it should\n   *  be tokenized before indexing \n   * @param termVector Whether term vector should be stored\n   * @throws NullPointerException if name or value is <code>null</code>\n   * @throws IllegalArgumentException in any of the following situations:\n   * <ul> \n   *  <li>the field is neither stored nor indexed</li> \n   *  <li>the field is not indexed but termVector is <code>TermVector.YES</code></li>\n   * </ul> \n   */ \n  public Field(String name, boolean internName, String value, Store store, Index index, TermVector termVector) {\n    if (name == null)\n      throw new NullPointerException(\"name cannot be null\");\n    if (value == null)\n      throw new NullPointerException(\"value cannot be null\");\n    if (name.length() == 0 && value.length() == 0)\n      throw new IllegalArgumentException(\"name and value cannot both be empty\");\n    if (index == Index.NO && store == Store.NO)\n      throw new IllegalArgumentException(\"it doesn't make sense to have a field that \"\n         + \"is neither indexed nor stored\");\n    if (index == Index.NO && termVector != TermVector.NO)\n      throw new IllegalArgumentException(\"cannot store term vector information \"\n         + \"for a field that is not indexed\");\n          \n    if (internName) // field names are optionally interned\n      name = StringHelper.intern(name);\n    \n    this.name = name; \n    \n    this.fieldsData = value;\n\n    this.isStored = store.isStored();\n   \n    this.isIndexed = index.isIndexed();\n    this.isTokenized = index.isAnalyzed();\n    this.omitNorms = index.omitNorms();\n    if (index == Index.NO) {\n      this.omitTermFreqAndPositions = false;\n    }    \n\n    this.isBinary = false;\n\n    setStoreTermVector(termVector);\n  }\n\n","sourceOld":"  /**\n   * Create a field by specifying its name, value and how it will\n   * be saved in the index.\n   * \n   * @param name The name of the field\n   * @param internName Whether to .intern() name or not\n   * @param value The string to process\n   * @param store Whether <code>value</code> should be stored in the index\n   * @param index Whether the field should be indexed, and if so, if it should\n   *  be tokenized before indexing \n   * @param termVector Whether term vector should be stored\n   * @throws NullPointerException if name or value is <code>null</code>\n   * @throws IllegalArgumentException in any of the following situations:\n   * <ul> \n   *  <li>the field is neither stored nor indexed</li> \n   *  <li>the field is not indexed but termVector is <code>TermVector.YES</code></li>\n   * </ul> \n   */ \n  public Field(String name, boolean internName, String value, Store store, Index index, TermVector termVector) {\n    if (name == null)\n      throw new NullPointerException(\"name cannot be null\");\n    if (value == null)\n      throw new NullPointerException(\"value cannot be null\");\n    if (name.length() == 0 && value.length() == 0)\n      throw new IllegalArgumentException(\"name and value cannot both be empty\");\n    if (index == Index.NO && store == Store.NO)\n      throw new IllegalArgumentException(\"it doesn't make sense to have a field that \"\n         + \"is neither indexed nor stored\");\n    if (index == Index.NO && termVector != TermVector.NO)\n      throw new IllegalArgumentException(\"cannot store term vector information \"\n         + \"for a field that is not indexed\");\n          \n    if (internName) // field names are optionally interned\n      name = StringHelper.intern(name);\n    \n    this.name = name; \n    \n    this.fieldsData = value;\n\n    this.isStored = store.isStored();\n   \n    this.isIndexed = index.isIndexed();\n    this.isTokenized = index.isAnalyzed();\n    this.omitNorms = index.omitNorms();\n    if (index == Index.NO) {\n      this.omitTermFreqAndPositions = false;\n    }    \n\n    this.isBinary = false;\n\n    setStoreTermVector(termVector);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}