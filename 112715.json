{"path":"lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/SlowFuzzyQuery#SlowFuzzyQuery(Term,float,int,int).mjava","commits":[{"id":"d374631bb6f5665bd5907a6186a9bb283a315f7d","date":1336345692,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/SlowFuzzyQuery#SlowFuzzyQuery(Term,float,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FuzzyQuery#FuzzyQuery(Term,float,int,int).mjava","sourceNew":"  /**\n   * Create a new SlowFuzzyQuery that will match terms with a similarity \n   * of at least <code>minimumSimilarity</code> to <code>term</code>.\n   * If a <code>prefixLength</code> &gt; 0 is specified, a common prefix\n   * of that length is also required.\n   * \n   * @param term the term to search for\n   * @param minimumSimilarity a value between 0 and 1 to set the required similarity\n   *  between the query term and the matching terms. For example, for a\n   *  <code>minimumSimilarity</code> of <code>0.5</code> a term of the same length\n   *  as the query term is considered similar to the query term if the edit distance\n   *  between both terms is less than <code>length(term)*0.5</code>\n   *  <p>\n   *  Alternatively, if <code>minimumSimilarity</code> is >= 1f, it is interpreted \n   *  as a pure Levenshtein edit distance. For example, a value of <code>2f</code>\n   *  will match all terms within an edit distance of <code>2</code> from the \n   *  query term. Edit distances specified in this way may not be fractional.\n   *  \n   * @param prefixLength length of common (non-fuzzy) prefix\n   * @param maxExpansions the maximum number of terms to match. If this number is\n   *  greater than {@link BooleanQuery#getMaxClauseCount} when the query is rewritten, \n   *  then the maxClauseCount will be used instead.\n   * @throws IllegalArgumentException if minimumSimilarity is &gt;= 1 or &lt; 0\n   * or if prefixLength &lt; 0\n   */\n  public SlowFuzzyQuery(Term term, float minimumSimilarity, int prefixLength,\n      int maxExpansions) {\n    super(term.field());\n    this.term = term;\n    \n    if (minimumSimilarity >= 1.0f && minimumSimilarity != (int)minimumSimilarity)\n      throw new IllegalArgumentException(\"fractional edit distances are not allowed\");\n    if (minimumSimilarity < 0.0f)\n      throw new IllegalArgumentException(\"minimumSimilarity < 0\");\n    if (prefixLength < 0)\n      throw new IllegalArgumentException(\"prefixLength < 0\");\n    if (maxExpansions < 0)\n      throw new IllegalArgumentException(\"maxExpansions < 0\");\n    \n    setRewriteMethod(new MultiTermQuery.TopTermsScoringBooleanQueryRewrite(maxExpansions));\n    \n    String text = term.text();\n    int len = text.codePointCount(0, text.length());\n    if (len > 0 && (minimumSimilarity >= 1f || len > 1.0f / (1.0f - minimumSimilarity))) {\n      this.termLongEnough = true;\n    }\n    \n    this.minimumSimilarity = minimumSimilarity;\n    this.prefixLength = prefixLength;\n  }\n\n","sourceOld":"  /**\n   * Create a new FuzzyQuery that will match terms with a similarity \n   * of at least <code>minimumSimilarity</code> to <code>term</code>.\n   * If a <code>prefixLength</code> &gt; 0 is specified, a common prefix\n   * of that length is also required.\n   * \n   * @param term the term to search for\n   * @param minimumSimilarity a value between 0 and 1 to set the required similarity\n   *  between the query term and the matching terms. For example, for a\n   *  <code>minimumSimilarity</code> of <code>0.5</code> a term of the same length\n   *  as the query term is considered similar to the query term if the edit distance\n   *  between both terms is less than <code>length(term)*0.5</code>\n   *  <p>\n   *  Alternatively, if <code>minimumSimilarity</code> is >= 1f, it is interpreted \n   *  as a pure Levenshtein edit distance. For example, a value of <code>2f</code>\n   *  will match all terms within an edit distance of <code>2</code> from the \n   *  query term. Edit distances specified in this way may not be fractional.\n   *  \n   * @param prefixLength length of common (non-fuzzy) prefix\n   * @param maxExpansions the maximum number of terms to match. If this number is\n   *  greater than {@link BooleanQuery#getMaxClauseCount} when the query is rewritten, \n   *  then the maxClauseCount will be used instead.\n   * @throws IllegalArgumentException if minimumSimilarity is &gt;= 1 or &lt; 0\n   * or if prefixLength &lt; 0\n   */\n  public FuzzyQuery(Term term, float minimumSimilarity, int prefixLength,\n      int maxExpansions) {\n    super(term.field());\n    this.term = term;\n    \n    if (minimumSimilarity >= 1.0f && minimumSimilarity != (int)minimumSimilarity)\n      throw new IllegalArgumentException(\"fractional edit distances are not allowed\");\n    if (minimumSimilarity < 0.0f)\n      throw new IllegalArgumentException(\"minimumSimilarity < 0\");\n    if (prefixLength < 0)\n      throw new IllegalArgumentException(\"prefixLength < 0\");\n    if (maxExpansions < 0)\n      throw new IllegalArgumentException(\"maxExpansions < 0\");\n    \n    setRewriteMethod(new MultiTermQuery.TopTermsScoringBooleanQueryRewrite(maxExpansions));\n    \n    String text = term.text();\n    int len = text.codePointCount(0, text.length());\n    if (len > 0 && (minimumSimilarity >= 1f || len > 1.0f / (1.0f - minimumSimilarity))) {\n      this.termLongEnough = true;\n    }\n    \n    this.minimumSimilarity = minimumSimilarity;\n    this.prefixLength = prefixLength;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b1eb427f2c6beed80d1724555fc1db003ccf3030","date":1417137397,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/SlowFuzzyQuery#SlowFuzzyQuery(Term,float,int,int).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/SlowFuzzyQuery#SlowFuzzyQuery(Term,float,int,int).mjava","sourceNew":"  /**\n   * Create a new SlowFuzzyQuery that will match terms with a similarity \n   * of at least <code>minimumSimilarity</code> to <code>term</code>.\n   * If a <code>prefixLength</code> &gt; 0 is specified, a common prefix\n   * of that length is also required.\n   * \n   * @param term the term to search for\n   * @param minimumSimilarity a value between 0 and 1 to set the required similarity\n   *  between the query term and the matching terms. For example, for a\n   *  <code>minimumSimilarity</code> of <code>0.5</code> a term of the same length\n   *  as the query term is considered similar to the query term if the edit distance\n   *  between both terms is less than <code>length(term)*0.5</code>\n   *  <p>\n   *  Alternatively, if <code>minimumSimilarity</code> is &gt;= 1f, it is interpreted \n   *  as a pure Levenshtein edit distance. For example, a value of <code>2f</code>\n   *  will match all terms within an edit distance of <code>2</code> from the \n   *  query term. Edit distances specified in this way may not be fractional.\n   *  \n   * @param prefixLength length of common (non-fuzzy) prefix\n   * @param maxExpansions the maximum number of terms to match. If this number is\n   *  greater than {@link BooleanQuery#getMaxClauseCount} when the query is rewritten, \n   *  then the maxClauseCount will be used instead.\n   * @throws IllegalArgumentException if minimumSimilarity is &gt;= 1 or &lt; 0\n   * or if prefixLength &lt; 0\n   */\n  public SlowFuzzyQuery(Term term, float minimumSimilarity, int prefixLength,\n      int maxExpansions) {\n    super(term.field());\n    this.term = term;\n    \n    if (minimumSimilarity >= 1.0f && minimumSimilarity != (int)minimumSimilarity)\n      throw new IllegalArgumentException(\"fractional edit distances are not allowed\");\n    if (minimumSimilarity < 0.0f)\n      throw new IllegalArgumentException(\"minimumSimilarity < 0\");\n    if (prefixLength < 0)\n      throw new IllegalArgumentException(\"prefixLength < 0\");\n    if (maxExpansions < 0)\n      throw new IllegalArgumentException(\"maxExpansions < 0\");\n    \n    setRewriteMethod(new MultiTermQuery.TopTermsScoringBooleanQueryRewrite(maxExpansions));\n    \n    String text = term.text();\n    int len = text.codePointCount(0, text.length());\n    if (len > 0 && (minimumSimilarity >= 1f || len > 1.0f / (1.0f - minimumSimilarity))) {\n      this.termLongEnough = true;\n    }\n    \n    this.minimumSimilarity = minimumSimilarity;\n    this.prefixLength = prefixLength;\n  }\n\n","sourceOld":"  /**\n   * Create a new SlowFuzzyQuery that will match terms with a similarity \n   * of at least <code>minimumSimilarity</code> to <code>term</code>.\n   * If a <code>prefixLength</code> &gt; 0 is specified, a common prefix\n   * of that length is also required.\n   * \n   * @param term the term to search for\n   * @param minimumSimilarity a value between 0 and 1 to set the required similarity\n   *  between the query term and the matching terms. For example, for a\n   *  <code>minimumSimilarity</code> of <code>0.5</code> a term of the same length\n   *  as the query term is considered similar to the query term if the edit distance\n   *  between both terms is less than <code>length(term)*0.5</code>\n   *  <p>\n   *  Alternatively, if <code>minimumSimilarity</code> is >= 1f, it is interpreted \n   *  as a pure Levenshtein edit distance. For example, a value of <code>2f</code>\n   *  will match all terms within an edit distance of <code>2</code> from the \n   *  query term. Edit distances specified in this way may not be fractional.\n   *  \n   * @param prefixLength length of common (non-fuzzy) prefix\n   * @param maxExpansions the maximum number of terms to match. If this number is\n   *  greater than {@link BooleanQuery#getMaxClauseCount} when the query is rewritten, \n   *  then the maxClauseCount will be used instead.\n   * @throws IllegalArgumentException if minimumSimilarity is &gt;= 1 or &lt; 0\n   * or if prefixLength &lt; 0\n   */\n  public SlowFuzzyQuery(Term term, float minimumSimilarity, int prefixLength,\n      int maxExpansions) {\n    super(term.field());\n    this.term = term;\n    \n    if (minimumSimilarity >= 1.0f && minimumSimilarity != (int)minimumSimilarity)\n      throw new IllegalArgumentException(\"fractional edit distances are not allowed\");\n    if (minimumSimilarity < 0.0f)\n      throw new IllegalArgumentException(\"minimumSimilarity < 0\");\n    if (prefixLength < 0)\n      throw new IllegalArgumentException(\"prefixLength < 0\");\n    if (maxExpansions < 0)\n      throw new IllegalArgumentException(\"maxExpansions < 0\");\n    \n    setRewriteMethod(new MultiTermQuery.TopTermsScoringBooleanQueryRewrite(maxExpansions));\n    \n    String text = term.text();\n    int len = text.codePointCount(0, text.length());\n    if (len > 0 && (minimumSimilarity >= 1f || len > 1.0f / (1.0f - minimumSimilarity))) {\n      this.termLongEnough = true;\n    }\n    \n    this.minimumSimilarity = minimumSimilarity;\n    this.prefixLength = prefixLength;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b9c5c0e8e826d8fd169840564bcf8606cf81d15b","date":1473715404,"type":4,"author":"Mike McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/SlowFuzzyQuery#SlowFuzzyQuery(Term,float,int,int).mjava","sourceNew":null,"sourceOld":"  /**\n   * Create a new SlowFuzzyQuery that will match terms with a similarity \n   * of at least <code>minimumSimilarity</code> to <code>term</code>.\n   * If a <code>prefixLength</code> &gt; 0 is specified, a common prefix\n   * of that length is also required.\n   * \n   * @param term the term to search for\n   * @param minimumSimilarity a value between 0 and 1 to set the required similarity\n   *  between the query term and the matching terms. For example, for a\n   *  <code>minimumSimilarity</code> of <code>0.5</code> a term of the same length\n   *  as the query term is considered similar to the query term if the edit distance\n   *  between both terms is less than <code>length(term)*0.5</code>\n   *  <p>\n   *  Alternatively, if <code>minimumSimilarity</code> is &gt;= 1f, it is interpreted \n   *  as a pure Levenshtein edit distance. For example, a value of <code>2f</code>\n   *  will match all terms within an edit distance of <code>2</code> from the \n   *  query term. Edit distances specified in this way may not be fractional.\n   *  \n   * @param prefixLength length of common (non-fuzzy) prefix\n   * @param maxExpansions the maximum number of terms to match. If this number is\n   *  greater than {@link BooleanQuery#getMaxClauseCount} when the query is rewritten, \n   *  then the maxClauseCount will be used instead.\n   * @throws IllegalArgumentException if minimumSimilarity is &gt;= 1 or &lt; 0\n   * or if prefixLength &lt; 0\n   */\n  public SlowFuzzyQuery(Term term, float minimumSimilarity, int prefixLength,\n      int maxExpansions) {\n    super(term.field());\n    this.term = term;\n    \n    if (minimumSimilarity >= 1.0f && minimumSimilarity != (int)minimumSimilarity)\n      throw new IllegalArgumentException(\"fractional edit distances are not allowed\");\n    if (minimumSimilarity < 0.0f)\n      throw new IllegalArgumentException(\"minimumSimilarity < 0\");\n    if (prefixLength < 0)\n      throw new IllegalArgumentException(\"prefixLength < 0\");\n    if (maxExpansions < 0)\n      throw new IllegalArgumentException(\"maxExpansions < 0\");\n    \n    setRewriteMethod(new MultiTermQuery.TopTermsScoringBooleanQueryRewrite(maxExpansions));\n    \n    String text = term.text();\n    int len = text.codePointCount(0, text.length());\n    if (len > 0 && (minimumSimilarity >= 1f || len > 1.0f / (1.0f - minimumSimilarity))) {\n      this.termLongEnough = true;\n    }\n    \n    this.minimumSimilarity = minimumSimilarity;\n    this.prefixLength = prefixLength;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89424def13674ea17829b41c5883c54ecc31a132","date":1473767373,"type":4,"author":"Noble Paul","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/SlowFuzzyQuery#SlowFuzzyQuery(Term,float,int,int).mjava","sourceNew":null,"sourceOld":"  /**\n   * Create a new SlowFuzzyQuery that will match terms with a similarity \n   * of at least <code>minimumSimilarity</code> to <code>term</code>.\n   * If a <code>prefixLength</code> &gt; 0 is specified, a common prefix\n   * of that length is also required.\n   * \n   * @param term the term to search for\n   * @param minimumSimilarity a value between 0 and 1 to set the required similarity\n   *  between the query term and the matching terms. For example, for a\n   *  <code>minimumSimilarity</code> of <code>0.5</code> a term of the same length\n   *  as the query term is considered similar to the query term if the edit distance\n   *  between both terms is less than <code>length(term)*0.5</code>\n   *  <p>\n   *  Alternatively, if <code>minimumSimilarity</code> is &gt;= 1f, it is interpreted \n   *  as a pure Levenshtein edit distance. For example, a value of <code>2f</code>\n   *  will match all terms within an edit distance of <code>2</code> from the \n   *  query term. Edit distances specified in this way may not be fractional.\n   *  \n   * @param prefixLength length of common (non-fuzzy) prefix\n   * @param maxExpansions the maximum number of terms to match. If this number is\n   *  greater than {@link BooleanQuery#getMaxClauseCount} when the query is rewritten, \n   *  then the maxClauseCount will be used instead.\n   * @throws IllegalArgumentException if minimumSimilarity is &gt;= 1 or &lt; 0\n   * or if prefixLength &lt; 0\n   */\n  public SlowFuzzyQuery(Term term, float minimumSimilarity, int prefixLength,\n      int maxExpansions) {\n    super(term.field());\n    this.term = term;\n    \n    if (minimumSimilarity >= 1.0f && minimumSimilarity != (int)minimumSimilarity)\n      throw new IllegalArgumentException(\"fractional edit distances are not allowed\");\n    if (minimumSimilarity < 0.0f)\n      throw new IllegalArgumentException(\"minimumSimilarity < 0\");\n    if (prefixLength < 0)\n      throw new IllegalArgumentException(\"prefixLength < 0\");\n    if (maxExpansions < 0)\n      throw new IllegalArgumentException(\"maxExpansions < 0\");\n    \n    setRewriteMethod(new MultiTermQuery.TopTermsScoringBooleanQueryRewrite(maxExpansions));\n    \n    String text = term.text();\n    int len = text.codePointCount(0, text.length());\n    if (len > 0 && (minimumSimilarity >= 1f || len > 1.0f / (1.0f - minimumSimilarity))) {\n      this.termLongEnough = true;\n    }\n    \n    this.minimumSimilarity = minimumSimilarity;\n    this.prefixLength = prefixLength;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/SlowFuzzyQuery#SlowFuzzyQuery(Term,float,int,int).mjava","sourceNew":null,"sourceOld":"  /**\n   * Create a new SlowFuzzyQuery that will match terms with a similarity \n   * of at least <code>minimumSimilarity</code> to <code>term</code>.\n   * If a <code>prefixLength</code> &gt; 0 is specified, a common prefix\n   * of that length is also required.\n   * \n   * @param term the term to search for\n   * @param minimumSimilarity a value between 0 and 1 to set the required similarity\n   *  between the query term and the matching terms. For example, for a\n   *  <code>minimumSimilarity</code> of <code>0.5</code> a term of the same length\n   *  as the query term is considered similar to the query term if the edit distance\n   *  between both terms is less than <code>length(term)*0.5</code>\n   *  <p>\n   *  Alternatively, if <code>minimumSimilarity</code> is &gt;= 1f, it is interpreted \n   *  as a pure Levenshtein edit distance. For example, a value of <code>2f</code>\n   *  will match all terms within an edit distance of <code>2</code> from the \n   *  query term. Edit distances specified in this way may not be fractional.\n   *  \n   * @param prefixLength length of common (non-fuzzy) prefix\n   * @param maxExpansions the maximum number of terms to match. If this number is\n   *  greater than {@link BooleanQuery#getMaxClauseCount} when the query is rewritten, \n   *  then the maxClauseCount will be used instead.\n   * @throws IllegalArgumentException if minimumSimilarity is &gt;= 1 or &lt; 0\n   * or if prefixLength &lt; 0\n   */\n  public SlowFuzzyQuery(Term term, float minimumSimilarity, int prefixLength,\n      int maxExpansions) {\n    super(term.field());\n    this.term = term;\n    \n    if (minimumSimilarity >= 1.0f && minimumSimilarity != (int)minimumSimilarity)\n      throw new IllegalArgumentException(\"fractional edit distances are not allowed\");\n    if (minimumSimilarity < 0.0f)\n      throw new IllegalArgumentException(\"minimumSimilarity < 0\");\n    if (prefixLength < 0)\n      throw new IllegalArgumentException(\"prefixLength < 0\");\n    if (maxExpansions < 0)\n      throw new IllegalArgumentException(\"maxExpansions < 0\");\n    \n    setRewriteMethod(new MultiTermQuery.TopTermsScoringBooleanQueryRewrite(maxExpansions));\n    \n    String text = term.text();\n    int len = text.codePointCount(0, text.length());\n    if (len > 0 && (minimumSimilarity >= 1f || len > 1.0f / (1.0f - minimumSimilarity))) {\n      this.termLongEnough = true;\n    }\n    \n    this.minimumSimilarity = minimumSimilarity;\n    this.prefixLength = prefixLength;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/SlowFuzzyQuery#SlowFuzzyQuery(Term,float,int,int).mjava","sourceNew":null,"sourceOld":"  /**\n   * Create a new SlowFuzzyQuery that will match terms with a similarity \n   * of at least <code>minimumSimilarity</code> to <code>term</code>.\n   * If a <code>prefixLength</code> &gt; 0 is specified, a common prefix\n   * of that length is also required.\n   * \n   * @param term the term to search for\n   * @param minimumSimilarity a value between 0 and 1 to set the required similarity\n   *  between the query term and the matching terms. For example, for a\n   *  <code>minimumSimilarity</code> of <code>0.5</code> a term of the same length\n   *  as the query term is considered similar to the query term if the edit distance\n   *  between both terms is less than <code>length(term)*0.5</code>\n   *  <p>\n   *  Alternatively, if <code>minimumSimilarity</code> is &gt;= 1f, it is interpreted \n   *  as a pure Levenshtein edit distance. For example, a value of <code>2f</code>\n   *  will match all terms within an edit distance of <code>2</code> from the \n   *  query term. Edit distances specified in this way may not be fractional.\n   *  \n   * @param prefixLength length of common (non-fuzzy) prefix\n   * @param maxExpansions the maximum number of terms to match. If this number is\n   *  greater than {@link BooleanQuery#getMaxClauseCount} when the query is rewritten, \n   *  then the maxClauseCount will be used instead.\n   * @throws IllegalArgumentException if minimumSimilarity is &gt;= 1 or &lt; 0\n   * or if prefixLength &lt; 0\n   */\n  public SlowFuzzyQuery(Term term, float minimumSimilarity, int prefixLength,\n      int maxExpansions) {\n    super(term.field());\n    this.term = term;\n    \n    if (minimumSimilarity >= 1.0f && minimumSimilarity != (int)minimumSimilarity)\n      throw new IllegalArgumentException(\"fractional edit distances are not allowed\");\n    if (minimumSimilarity < 0.0f)\n      throw new IllegalArgumentException(\"minimumSimilarity < 0\");\n    if (prefixLength < 0)\n      throw new IllegalArgumentException(\"prefixLength < 0\");\n    if (maxExpansions < 0)\n      throw new IllegalArgumentException(\"maxExpansions < 0\");\n    \n    setRewriteMethod(new MultiTermQuery.TopTermsScoringBooleanQueryRewrite(maxExpansions));\n    \n    String text = term.text();\n    int len = text.codePointCount(0, text.length());\n    if (len > 0 && (minimumSimilarity >= 1f || len > 1.0f / (1.0f - minimumSimilarity))) {\n      this.termLongEnough = true;\n    }\n    \n    this.minimumSimilarity = minimumSimilarity;\n    this.prefixLength = prefixLength;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b1eb427f2c6beed80d1724555fc1db003ccf3030":["d374631bb6f5665bd5907a6186a9bb283a315f7d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["b1eb427f2c6beed80d1724555fc1db003ccf3030","89424def13674ea17829b41c5883c54ecc31a132"],"d374631bb6f5665bd5907a6186a9bb283a315f7d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b9c5c0e8e826d8fd169840564bcf8606cf81d15b":["b1eb427f2c6beed80d1724555fc1db003ccf3030"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["b1eb427f2c6beed80d1724555fc1db003ccf3030","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"89424def13674ea17829b41c5883c54ecc31a132":["b1eb427f2c6beed80d1724555fc1db003ccf3030","b9c5c0e8e826d8fd169840564bcf8606cf81d15b"]},"commit2Childs":{"b1eb427f2c6beed80d1724555fc1db003ccf3030":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","b9c5c0e8e826d8fd169840564bcf8606cf81d15b","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","89424def13674ea17829b41c5883c54ecc31a132"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d374631bb6f5665bd5907a6186a9bb283a315f7d"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d374631bb6f5665bd5907a6186a9bb283a315f7d":["b1eb427f2c6beed80d1724555fc1db003ccf3030"],"b9c5c0e8e826d8fd169840564bcf8606cf81d15b":["89424def13674ea17829b41c5883c54ecc31a132"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"89424def13674ea17829b41c5883c54ecc31a132":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}