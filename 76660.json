{"path":"lucene/core/src/java/org/apache/lucene/index/ReadersAndUpdates#addDVUpdate(DocValuesFieldUpdates).mjava","commits":[{"id":"f4363cd33f6eff7fb4753574a441e2d18c1022a4","date":1498067235,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/ReadersAndUpdates#addDVUpdate(DocValuesFieldUpdates).mjava","pathOld":"/dev/null","sourceNew":"  /** Adds a new resolved (meaning it maps docIDs to new values) doc values packet.  We buffer these in RAM and write to disk when too much\n   *  RAM is used or when a merge needs to kick off, or a commit/refresh. */\n  public synchronized void addDVUpdate(DocValuesFieldUpdates update) {\n    if (update.getFinished() == false) {\n      throw new IllegalArgumentException(\"call finish first\");\n    }\n    List<DocValuesFieldUpdates> fieldUpdates = pendingDVUpdates.get(update.field);\n    if (fieldUpdates == null) {\n      fieldUpdates = new ArrayList<>();\n      pendingDVUpdates.put(update.field, fieldUpdates);\n    }\n\n    assert assertNoDupGen(fieldUpdates, update);\n\n    ramBytesUsed.addAndGet(update.ramBytesUsed());\n\n    fieldUpdates.add(update);\n\n    if (isMerging) {\n      fieldUpdates = mergingDVUpdates.get(update.field);\n      if (fieldUpdates == null) {\n        fieldUpdates = new ArrayList<>();\n        mergingDVUpdates.put(update.field, fieldUpdates);\n      }\n      fieldUpdates.add(update);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/ReadersAndUpdates#addDVUpdate(DocValuesFieldUpdates).mjava","pathOld":"/dev/null","sourceNew":"  /** Adds a new resolved (meaning it maps docIDs to new values) doc values packet.  We buffer these in RAM and write to disk when too much\n   *  RAM is used or when a merge needs to kick off, or a commit/refresh. */\n  public synchronized void addDVUpdate(DocValuesFieldUpdates update) {\n    if (update.getFinished() == false) {\n      throw new IllegalArgumentException(\"call finish first\");\n    }\n    List<DocValuesFieldUpdates> fieldUpdates = pendingDVUpdates.get(update.field);\n    if (fieldUpdates == null) {\n      fieldUpdates = new ArrayList<>();\n      pendingDVUpdates.put(update.field, fieldUpdates);\n    }\n\n    assert assertNoDupGen(fieldUpdates, update);\n\n    ramBytesUsed.addAndGet(update.ramBytesUsed());\n\n    fieldUpdates.add(update);\n\n    if (isMerging) {\n      fieldUpdates = mergingDVUpdates.get(update.field);\n      if (fieldUpdates == null) {\n        fieldUpdates = new ArrayList<>();\n        mergingDVUpdates.put(update.field, fieldUpdates);\n      }\n      fieldUpdates.add(update);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/ReadersAndUpdates#addDVUpdate(DocValuesFieldUpdates).mjava","pathOld":"/dev/null","sourceNew":"  /** Adds a new resolved (meaning it maps docIDs to new values) doc values packet.  We buffer these in RAM and write to disk when too much\n   *  RAM is used or when a merge needs to kick off, or a commit/refresh. */\n  public synchronized void addDVUpdate(DocValuesFieldUpdates update) {\n    if (update.getFinished() == false) {\n      throw new IllegalArgumentException(\"call finish first\");\n    }\n    List<DocValuesFieldUpdates> fieldUpdates = pendingDVUpdates.get(update.field);\n    if (fieldUpdates == null) {\n      fieldUpdates = new ArrayList<>();\n      pendingDVUpdates.put(update.field, fieldUpdates);\n    }\n\n    assert assertNoDupGen(fieldUpdates, update);\n\n    ramBytesUsed.addAndGet(update.ramBytesUsed());\n\n    fieldUpdates.add(update);\n\n    if (isMerging) {\n      fieldUpdates = mergingDVUpdates.get(update.field);\n      if (fieldUpdates == null) {\n        fieldUpdates = new ArrayList<>();\n        mergingDVUpdates.put(update.field, fieldUpdates);\n      }\n      fieldUpdates.add(update);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"36d13f271b6649357e07f71f7e46559479f69b5b","date":1523888226,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/ReadersAndUpdates#addDVUpdate(DocValuesFieldUpdates).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/ReadersAndUpdates#addDVUpdate(DocValuesFieldUpdates).mjava","sourceNew":"  /** Adds a new resolved (meaning it maps docIDs to new values) doc values packet.  We buffer these in RAM and write to disk when too much\n   *  RAM is used or when a merge needs to kick off, or a commit/refresh. */\n  public synchronized void addDVUpdate(DocValuesFieldUpdates update) throws IOException {\n    if (update.getFinished() == false) {\n      throw new IllegalArgumentException(\"call finish first\");\n    }\n    List<DocValuesFieldUpdates> fieldUpdates = pendingDVUpdates.get(update.field);\n    if (fieldUpdates == null) {\n      fieldUpdates = new ArrayList<>();\n      pendingDVUpdates.put(update.field, fieldUpdates);\n    }\n\n    assert assertNoDupGen(fieldUpdates, update);\n\n    ramBytesUsed.addAndGet(update.ramBytesUsed());\n\n    fieldUpdates.add(update);\n\n    if (isMerging) {\n      fieldUpdates = mergingDVUpdates.get(update.field);\n      if (fieldUpdates == null) {\n        fieldUpdates = new ArrayList<>();\n        mergingDVUpdates.put(update.field, fieldUpdates);\n      }\n      fieldUpdates.add(update);\n    }\n    pendingDeletes.onDocValuesUpdate(update.field, update.iterator());\n  }\n\n","sourceOld":"  /** Adds a new resolved (meaning it maps docIDs to new values) doc values packet.  We buffer these in RAM and write to disk when too much\n   *  RAM is used or when a merge needs to kick off, or a commit/refresh. */\n  public synchronized void addDVUpdate(DocValuesFieldUpdates update) {\n    if (update.getFinished() == false) {\n      throw new IllegalArgumentException(\"call finish first\");\n    }\n    List<DocValuesFieldUpdates> fieldUpdates = pendingDVUpdates.get(update.field);\n    if (fieldUpdates == null) {\n      fieldUpdates = new ArrayList<>();\n      pendingDVUpdates.put(update.field, fieldUpdates);\n    }\n\n    assert assertNoDupGen(fieldUpdates, update);\n\n    ramBytesUsed.addAndGet(update.ramBytesUsed());\n\n    fieldUpdates.add(update);\n\n    if (isMerging) {\n      fieldUpdates = mergingDVUpdates.get(update.field);\n      if (fieldUpdates == null) {\n        fieldUpdates = new ArrayList<>();\n        mergingDVUpdates.put(update.field, fieldUpdates);\n      }\n      fieldUpdates.add(update);\n    }\n  }\n\n","bugFix":null,"bugIntro":["f372764a5bd3ebacde5b99ee3303153eb5ec0d2f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7e129bd6cb34a236558a49edf108a49d5c15e0e1","date":1525081316,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/ReadersAndUpdates#addDVUpdate(DocValuesFieldUpdates).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/ReadersAndUpdates#addDVUpdate(DocValuesFieldUpdates).mjava","sourceNew":"  /** Adds a new resolved (meaning it maps docIDs to new values) doc values packet.  We buffer these in RAM and write to disk when too much\n   *  RAM is used or when a merge needs to kick off, or a commit/refresh. */\n  public synchronized void addDVUpdate(DocValuesFieldUpdates update) throws IOException {\n    if (update.getFinished() == false) {\n      throw new IllegalArgumentException(\"call finish first\");\n    }\n    List<DocValuesFieldUpdates> fieldUpdates = pendingDVUpdates.computeIfAbsent(update.field, key -> new ArrayList<>());\n    assert assertNoDupGen(fieldUpdates, update);\n\n    ramBytesUsed.addAndGet(update.ramBytesUsed());\n\n    fieldUpdates.add(update);\n\n    if (isMerging) {\n      fieldUpdates = mergingDVUpdates.get(update.field);\n      if (fieldUpdates == null) {\n        fieldUpdates = new ArrayList<>();\n        mergingDVUpdates.put(update.field, fieldUpdates);\n      }\n      fieldUpdates.add(update);\n    }\n    pendingDeletes.onDocValuesUpdate(update.field, update.iterator());\n  }\n\n","sourceOld":"  /** Adds a new resolved (meaning it maps docIDs to new values) doc values packet.  We buffer these in RAM and write to disk when too much\n   *  RAM is used or when a merge needs to kick off, or a commit/refresh. */\n  public synchronized void addDVUpdate(DocValuesFieldUpdates update) throws IOException {\n    if (update.getFinished() == false) {\n      throw new IllegalArgumentException(\"call finish first\");\n    }\n    List<DocValuesFieldUpdates> fieldUpdates = pendingDVUpdates.get(update.field);\n    if (fieldUpdates == null) {\n      fieldUpdates = new ArrayList<>();\n      pendingDVUpdates.put(update.field, fieldUpdates);\n    }\n\n    assert assertNoDupGen(fieldUpdates, update);\n\n    ramBytesUsed.addAndGet(update.ramBytesUsed());\n\n    fieldUpdates.add(update);\n\n    if (isMerging) {\n      fieldUpdates = mergingDVUpdates.get(update.field);\n      if (fieldUpdates == null) {\n        fieldUpdates = new ArrayList<>();\n        mergingDVUpdates.put(update.field, fieldUpdates);\n      }\n      fieldUpdates.add(update);\n    }\n    pendingDeletes.onDocValuesUpdate(update.field, update.iterator());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f42883db49d143abc1a0f176ba47e3388dafb608","date":1525083166,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/ReadersAndUpdates#addDVUpdate(DocValuesFieldUpdates).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/ReadersAndUpdates#addDVUpdate(DocValuesFieldUpdates).mjava","sourceNew":"  /** Adds a new resolved (meaning it maps docIDs to new values) doc values packet.  We buffer these in RAM and write to disk when too much\n   *  RAM is used or when a merge needs to kick off, or a commit/refresh. */\n  public synchronized void addDVUpdate(DocValuesFieldUpdates update) throws IOException {\n    if (update.getFinished() == false) {\n      throw new IllegalArgumentException(\"call finish first\");\n    }\n    List<DocValuesFieldUpdates> fieldUpdates = pendingDVUpdates.computeIfAbsent(update.field, key -> new ArrayList<>());\n    assert assertNoDupGen(fieldUpdates, update);\n\n    ramBytesUsed.addAndGet(update.ramBytesUsed());\n\n    fieldUpdates.add(update);\n\n    if (isMerging) {\n      fieldUpdates = mergingDVUpdates.get(update.field);\n      if (fieldUpdates == null) {\n        fieldUpdates = new ArrayList<>();\n        mergingDVUpdates.put(update.field, fieldUpdates);\n      }\n      fieldUpdates.add(update);\n    }\n    pendingDeletes.onDocValuesUpdate(update.field, update.iterator());\n  }\n\n","sourceOld":"  /** Adds a new resolved (meaning it maps docIDs to new values) doc values packet.  We buffer these in RAM and write to disk when too much\n   *  RAM is used or when a merge needs to kick off, or a commit/refresh. */\n  public synchronized void addDVUpdate(DocValuesFieldUpdates update) throws IOException {\n    if (update.getFinished() == false) {\n      throw new IllegalArgumentException(\"call finish first\");\n    }\n    List<DocValuesFieldUpdates> fieldUpdates = pendingDVUpdates.get(update.field);\n    if (fieldUpdates == null) {\n      fieldUpdates = new ArrayList<>();\n      pendingDVUpdates.put(update.field, fieldUpdates);\n    }\n\n    assert assertNoDupGen(fieldUpdates, update);\n\n    ramBytesUsed.addAndGet(update.ramBytesUsed());\n\n    fieldUpdates.add(update);\n\n    if (isMerging) {\n      fieldUpdates = mergingDVUpdates.get(update.field);\n      if (fieldUpdates == null) {\n        fieldUpdates = new ArrayList<>();\n        mergingDVUpdates.put(update.field, fieldUpdates);\n      }\n      fieldUpdates.add(update);\n    }\n    pendingDeletes.onDocValuesUpdate(update.field, update.iterator());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f372764a5bd3ebacde5b99ee3303153eb5ec0d2f","date":1525347515,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/ReadersAndUpdates#addDVUpdate(DocValuesFieldUpdates).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/ReadersAndUpdates#addDVUpdate(DocValuesFieldUpdates).mjava","sourceNew":"  /** Adds a new resolved (meaning it maps docIDs to new values) doc values packet.  We buffer these in RAM and write to disk when too much\n   *  RAM is used or when a merge needs to kick off, or a commit/refresh. */\n  public synchronized void addDVUpdate(DocValuesFieldUpdates update) throws IOException {\n    if (update.getFinished() == false) {\n      throw new IllegalArgumentException(\"call finish first\");\n    }\n    List<DocValuesFieldUpdates> fieldUpdates = pendingDVUpdates.computeIfAbsent(update.field, key -> new ArrayList<>());\n    assert assertNoDupGen(fieldUpdates, update);\n\n    ramBytesUsed.addAndGet(update.ramBytesUsed());\n\n    fieldUpdates.add(update);\n\n    if (isMerging) {\n      fieldUpdates = mergingDVUpdates.get(update.field);\n      if (fieldUpdates == null) {\n        fieldUpdates = new ArrayList<>();\n        mergingDVUpdates.put(update.field, fieldUpdates);\n      }\n      fieldUpdates.add(update);\n    }\n  }\n\n","sourceOld":"  /** Adds a new resolved (meaning it maps docIDs to new values) doc values packet.  We buffer these in RAM and write to disk when too much\n   *  RAM is used or when a merge needs to kick off, or a commit/refresh. */\n  public synchronized void addDVUpdate(DocValuesFieldUpdates update) throws IOException {\n    if (update.getFinished() == false) {\n      throw new IllegalArgumentException(\"call finish first\");\n    }\n    List<DocValuesFieldUpdates> fieldUpdates = pendingDVUpdates.computeIfAbsent(update.field, key -> new ArrayList<>());\n    assert assertNoDupGen(fieldUpdates, update);\n\n    ramBytesUsed.addAndGet(update.ramBytesUsed());\n\n    fieldUpdates.add(update);\n\n    if (isMerging) {\n      fieldUpdates = mergingDVUpdates.get(update.field);\n      if (fieldUpdates == null) {\n        fieldUpdates = new ArrayList<>();\n        mergingDVUpdates.put(update.field, fieldUpdates);\n      }\n      fieldUpdates.add(update);\n    }\n    pendingDeletes.onDocValuesUpdate(update.field, update.iterator());\n  }\n\n","bugFix":["36d13f271b6649357e07f71f7e46559479f69b5b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f372764a5bd3ebacde5b99ee3303153eb5ec0d2f":["f42883db49d143abc1a0f176ba47e3388dafb608"],"f4363cd33f6eff7fb4753574a441e2d18c1022a4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7e129bd6cb34a236558a49edf108a49d5c15e0e1":["36d13f271b6649357e07f71f7e46559479f69b5b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"36d13f271b6649357e07f71f7e46559479f69b5b":["28288370235ed02234a64753cdbf0c6ec096304a"],"f42883db49d143abc1a0f176ba47e3388dafb608":["36d13f271b6649357e07f71f7e46559479f69b5b","7e129bd6cb34a236558a49edf108a49d5c15e0e1"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f4363cd33f6eff7fb4753574a441e2d18c1022a4"],"28288370235ed02234a64753cdbf0c6ec096304a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f4363cd33f6eff7fb4753574a441e2d18c1022a4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f372764a5bd3ebacde5b99ee3303153eb5ec0d2f"]},"commit2Childs":{"f372764a5bd3ebacde5b99ee3303153eb5ec0d2f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f4363cd33f6eff7fb4753574a441e2d18c1022a4":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"7e129bd6cb34a236558a49edf108a49d5c15e0e1":["f42883db49d143abc1a0f176ba47e3388dafb608"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f4363cd33f6eff7fb4753574a441e2d18c1022a4","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"36d13f271b6649357e07f71f7e46559479f69b5b":["7e129bd6cb34a236558a49edf108a49d5c15e0e1","f42883db49d143abc1a0f176ba47e3388dafb608"],"f42883db49d143abc1a0f176ba47e3388dafb608":["f372764a5bd3ebacde5b99ee3303153eb5ec0d2f"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":[],"28288370235ed02234a64753cdbf0c6ec096304a":["36d13f271b6649357e07f71f7e46559479f69b5b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}