{"path":"solr/core/src/java/org/apache/solr/rest/RestManager.ManagedEndpoint#doDelete().mjava","commits":[{"id":"89fd5bce15c8e0ca1b10c9988cff9fdcc88c152b","date":1601832109,"type":1,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/rest/RestManager.ManagedEndpoint#doDelete().mjava","pathOld":"solr/core/src/java/org/apache/solr/rest/RestManager.ManagedEndpoint#delete().mjava","sourceNew":"    protected void doDelete() {\n      // only delegate delete child resources to the ManagedResource\n      // as deleting the actual resource is best handled by the\n      // RestManager\n      if (childId != null) {        \n        try {\n          managedResource.doDeleteChild(this, childId);\n        } catch (Exception e) {\n          getSolrResponse().setException(e);        \n        }\n      } else {\n        try {\n          restManager.deleteManagedResource(managedResource);\n        } catch (Exception e) {\n          getSolrResponse().setException(e);        \n        }\n      }\n      handlePostExecution(log);\n    }\n\n","sourceOld":"    @Override\n    public Representation delete() {\n      // only delegate delete child resources to the ManagedResource\n      // as deleting the actual resource is best handled by the\n      // RestManager\n      if (childId != null) {        \n        try {\n          managedResource.doDeleteChild(this, childId);\n        } catch (Exception e) {\n          getSolrResponse().setException(e);        \n        }\n      } else {\n        try {\n          RestManager restManager = \n              RestManager.getRestManager(SolrRequestInfo.getRequestInfo());\n          restManager.deleteManagedResource(managedResource);\n        } catch (Exception e) {\n          getSolrResponse().setException(e);        \n        }\n      }\n      handlePostExecution(log);\n      return new SolrOutputRepresentation();    \n    }    \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"89fd5bce15c8e0ca1b10c9988cff9fdcc88c152b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["89fd5bce15c8e0ca1b10c9988cff9fdcc88c152b"]},"commit2Childs":{"89fd5bce15c8e0ca1b10c9988cff9fdcc88c152b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["89fd5bce15c8e0ca1b10c9988cff9fdcc88c152b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}