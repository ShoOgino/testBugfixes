{"path":"src/java/org/apache/lucene/search/Sort#hashCode().mjava","commits":[{"id":"f0222e7dc83a5ca35b7c946760f853b5c6474ea9","date":1228750096,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/Sort#hashCode().mjava","pathOld":"/dev/null","sourceNew":"  /** Returns a hash code value for this object. */\n  public int hashCode() {\n    // TODO in Java 1.5: switch to Arrays.hashCode().  The \n    // Java 1.4 workaround below calculates the same hashCode\n    // as Java 1.5's new Arrays.hashCode()\n    return 0x45aaf665 + Arrays.asList(fields).hashCode();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"feaf086f278a8afe69ae5147d0ef315af741d297","date":1256688442,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/Sort#hashCode().mjava","pathOld":"src/java/org/apache/lucene/search/Sort#hashCode().mjava","sourceNew":"  /** Returns a hash code value for this object. */\n  public int hashCode() {\n    return 0x45aaf665 + Arrays.hashCode(fields);\n  }\n\n","sourceOld":"  /** Returns a hash code value for this object. */\n  public int hashCode() {\n    // TODO in Java 1.5: switch to Arrays.hashCode().  The \n    // Java 1.4 workaround below calculates the same hashCode\n    // as Java 1.5's new Arrays.hashCode()\n    return 0x45aaf665 + Arrays.asList(fields).hashCode();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a9e385641d717e641408d8fbbc62be8fc766357","date":1256746606,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/Sort#hashCode().mjava","pathOld":"src/java/org/apache/lucene/search/Sort#hashCode().mjava","sourceNew":"  /** Returns a hash code value for this object. */\n  @Override\n  public int hashCode() {\n    return 0x45aaf665 + Arrays.hashCode(fields);\n  }\n\n","sourceOld":"  /** Returns a hash code value for this object. */\n  public int hashCode() {\n    return 0x45aaf665 + Arrays.hashCode(fields);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/Sort#hashCode().mjava","pathOld":"src/java/org/apache/lucene/search/Sort#hashCode().mjava","sourceNew":"  /** Returns a hash code value for this object. */\n  @Override\n  public int hashCode() {\n    return 0x45aaf665 + Arrays.hashCode(fields);\n  }\n\n","sourceOld":"  /** Returns a hash code value for this object. */\n  @Override\n  public int hashCode() {\n    return 0x45aaf665 + Arrays.hashCode(fields);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f0222e7dc83a5ca35b7c946760f853b5c6474ea9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8a9e385641d717e641408d8fbbc62be8fc766357":["feaf086f278a8afe69ae5147d0ef315af741d297"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"feaf086f278a8afe69ae5147d0ef315af741d297":["f0222e7dc83a5ca35b7c946760f853b5c6474ea9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["8a9e385641d717e641408d8fbbc62be8fc766357"]},"commit2Childs":{"f0222e7dc83a5ca35b7c946760f853b5c6474ea9":["feaf086f278a8afe69ae5147d0ef315af741d297"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f0222e7dc83a5ca35b7c946760f853b5c6474ea9"],"8a9e385641d717e641408d8fbbc62be8fc766357":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"feaf086f278a8afe69ae5147d0ef315af741d297":["8a9e385641d717e641408d8fbbc62be8fc766357"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}