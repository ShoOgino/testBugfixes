{"path":"solr/core/src/test/org/apache/solr/update/processor/UUIDUpdateProcessorFallbackTest#testFallbackToUnique().mjava","commits":[{"id":"f904d036d49909c2dc5dc9e0e1c3ae8c71c9ad18","date":1406652386,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/UUIDUpdateProcessorFallbackTest#testFallbackToUnique().mjava","pathOld":"/dev/null","sourceNew":"  public void testFallbackToUnique() throws Exception {\n    Date now = new Date();\n\n    // get all defaults\n    SolrInputDocument d = processAdd(\"default-values-fallback-to-unique\",\n                   doc(f(\"name\", \"Existing\", \"Values\")));\n\n    assertNotNull(d);\n\n    assertNotNull(d.getFieldValue(\"id\"));\n    assertNotNull(UUID.fromString(d.getFieldValue(\"id\").toString()));\n\n    // get all defaults\n    d = processAdd(\"default-values-fallback-to-unique-automatically\",\n        doc(f(\"name\", \"Existing\", \"Values\")));\n\n    assertNotNull(d);\n\n    assertNotNull(d.getFieldValue(\"id\"));\n    assertNotNull(UUID.fromString(d.getFieldValue(\"id\").toString()));\n\n    // defaults already specified\n    d = processAdd(\"default-values-fallback-to-unique\",\n                   doc(f(\"timestamp\", now),\n                       f(\"id\", \"550e8400-e29b-41d4-a716-446655440000\"),\n                       f(\"processor_default_s\", \"I HAVE A VALUE\"),\n                       f(\"processor_default_i\", 12345),\n                       f(\"name\", \"Existing\", \"Values\")));\n\n    assertNotNull(d);\n\n    assertEquals(\"550e8400-e29b-41d4-a716-446655440000\",\n                 d.getFieldValue(\"id\"));\n\n    // defaults already specified\n    d = processAdd(\"default-values-fallback-to-unique-automatically\",\n        doc(f(\"timestamp\", now),\n            f(\"id\", \"550e8400-e29b-41d4-a716-446655440000\"),\n            f(\"processor_default_s\", \"I HAVE A VALUE\"),\n            f(\"processor_default_i\", 121),\n            f(\"name\", \"Existing\", \"Values\")));\n\n    assertNotNull(d);\n\n    assertEquals(\"550e8400-e29b-41d4-a716-446655440000\",\n        d.getFieldValue(\"id\"));\n    assertEquals(121, d.getFieldValue(\"processor_default_i\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"701a87b43e511b5f16b96d82d67bfa1409240b27","date":1501141027,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/UUIDUpdateProcessorFallbackTest#testFallbackToUnique().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/UUIDUpdateProcessorFallbackTest#testFallbackToUnique().mjava","sourceNew":"  public void testFallbackToUnique() throws Exception {\n\n    // get all defaults\n    SolrInputDocument d = processAdd(\"default-values-fallback-to-unique\",\n        doc(f(\"name\", \"Existing\", \"Values\")));\n\n    assertNotNull(d);\n\n    assertNotNull(d.getFieldValue(\"id\"));\n    assertNotNull(UUID.fromString(d.getFieldValue(\"id\").toString()));\n\n    // get all defaults\n    d = processAdd(\"default-values-fallback-to-unique-automatically\",\n        doc(f(\"name\", \"Existing\", \"Values\")));\n\n    assertNotNull(d);\n\n    assertNotNull(d.getFieldValue(\"id\"));\n    assertNotNull(UUID.fromString(d.getFieldValue(\"id\").toString()));\n\n    // defaults already specified\n    d = processAdd(\"default-values-fallback-to-unique\",\n        doc(f(\"timestamp\", now),\n            f(\"id\", \"550e8400-e29b-41d4-a716-446655440000\"),\n            f(\"processor_default_s\", \"I HAVE A VALUE\"),\n            f(\"processor_default_i\", 12345),\n            f(\"name\", \"Existing\", \"Values\")));\n\n    assertNotNull(d);\n\n    assertEquals(\"550e8400-e29b-41d4-a716-446655440000\",\n        d.getFieldValue(\"id\"));\n\n    // defaults already specified //both config and request param not passed.\n    d = processAdd(\"default-values-fallback-to-unique-automatically\",\n        doc(f(\"timestamp\", now),\n            f(\"id\", \"550e8400-e29b-41d4-a716-446655440000\"),\n            f(\"processor_default_s\", \"I HAVE A VALUE\"),\n            f(\"processor_default_i\", 121),\n            f(\"name\", \"Existing\", \"Values\")));\n\n    assertNotNull(d);\n\n    assertEquals(\"550e8400-e29b-41d4-a716-446655440000\",\n        d.getFieldValue(\"id\"));\n    assertEquals(121, d.getFieldValue(\"processor_default_i\"));\n  }\n\n","sourceOld":"  public void testFallbackToUnique() throws Exception {\n    Date now = new Date();\n\n    // get all defaults\n    SolrInputDocument d = processAdd(\"default-values-fallback-to-unique\",\n                   doc(f(\"name\", \"Existing\", \"Values\")));\n\n    assertNotNull(d);\n\n    assertNotNull(d.getFieldValue(\"id\"));\n    assertNotNull(UUID.fromString(d.getFieldValue(\"id\").toString()));\n\n    // get all defaults\n    d = processAdd(\"default-values-fallback-to-unique-automatically\",\n        doc(f(\"name\", \"Existing\", \"Values\")));\n\n    assertNotNull(d);\n\n    assertNotNull(d.getFieldValue(\"id\"));\n    assertNotNull(UUID.fromString(d.getFieldValue(\"id\").toString()));\n\n    // defaults already specified\n    d = processAdd(\"default-values-fallback-to-unique\",\n                   doc(f(\"timestamp\", now),\n                       f(\"id\", \"550e8400-e29b-41d4-a716-446655440000\"),\n                       f(\"processor_default_s\", \"I HAVE A VALUE\"),\n                       f(\"processor_default_i\", 12345),\n                       f(\"name\", \"Existing\", \"Values\")));\n\n    assertNotNull(d);\n\n    assertEquals(\"550e8400-e29b-41d4-a716-446655440000\",\n                 d.getFieldValue(\"id\"));\n\n    // defaults already specified\n    d = processAdd(\"default-values-fallback-to-unique-automatically\",\n        doc(f(\"timestamp\", now),\n            f(\"id\", \"550e8400-e29b-41d4-a716-446655440000\"),\n            f(\"processor_default_s\", \"I HAVE A VALUE\"),\n            f(\"processor_default_i\", 121),\n            f(\"name\", \"Existing\", \"Values\")));\n\n    assertNotNull(d);\n\n    assertEquals(\"550e8400-e29b-41d4-a716-446655440000\",\n        d.getFieldValue(\"id\"));\n    assertEquals(121, d.getFieldValue(\"processor_default_i\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","date":1502192746,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/UUIDUpdateProcessorFallbackTest#testFallbackToUnique().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/UUIDUpdateProcessorFallbackTest#testFallbackToUnique().mjava","sourceNew":"  public void testFallbackToUnique() throws Exception {\n\n    // get all defaults\n    SolrInputDocument d = processAdd(\"default-values-fallback-to-unique\",\n        doc(f(\"name\", \"Existing\", \"Values\")));\n\n    assertNotNull(d);\n\n    assertNotNull(d.getFieldValue(\"id\"));\n    assertNotNull(UUID.fromString(d.getFieldValue(\"id\").toString()));\n\n    // get all defaults\n    d = processAdd(\"default-values-fallback-to-unique-automatically\",\n        doc(f(\"name\", \"Existing\", \"Values\")));\n\n    assertNotNull(d);\n\n    assertNotNull(d.getFieldValue(\"id\"));\n    assertNotNull(UUID.fromString(d.getFieldValue(\"id\").toString()));\n\n    // defaults already specified\n    d = processAdd(\"default-values-fallback-to-unique\",\n        doc(f(\"timestamp\", now),\n            f(\"id\", \"550e8400-e29b-41d4-a716-446655440000\"),\n            f(\"processor_default_s\", \"I HAVE A VALUE\"),\n            f(\"processor_default_i\", 12345),\n            f(\"name\", \"Existing\", \"Values\")));\n\n    assertNotNull(d);\n\n    assertEquals(\"550e8400-e29b-41d4-a716-446655440000\",\n        d.getFieldValue(\"id\"));\n\n    // defaults already specified //both config and request param not passed.\n    d = processAdd(\"default-values-fallback-to-unique-automatically\",\n        doc(f(\"timestamp\", now),\n            f(\"id\", \"550e8400-e29b-41d4-a716-446655440000\"),\n            f(\"processor_default_s\", \"I HAVE A VALUE\"),\n            f(\"processor_default_i\", 121),\n            f(\"name\", \"Existing\", \"Values\")));\n\n    assertNotNull(d);\n\n    assertEquals(\"550e8400-e29b-41d4-a716-446655440000\",\n        d.getFieldValue(\"id\"));\n    assertEquals(121, d.getFieldValue(\"processor_default_i\"));\n  }\n\n","sourceOld":"  public void testFallbackToUnique() throws Exception {\n    Date now = new Date();\n\n    // get all defaults\n    SolrInputDocument d = processAdd(\"default-values-fallback-to-unique\",\n                   doc(f(\"name\", \"Existing\", \"Values\")));\n\n    assertNotNull(d);\n\n    assertNotNull(d.getFieldValue(\"id\"));\n    assertNotNull(UUID.fromString(d.getFieldValue(\"id\").toString()));\n\n    // get all defaults\n    d = processAdd(\"default-values-fallback-to-unique-automatically\",\n        doc(f(\"name\", \"Existing\", \"Values\")));\n\n    assertNotNull(d);\n\n    assertNotNull(d.getFieldValue(\"id\"));\n    assertNotNull(UUID.fromString(d.getFieldValue(\"id\").toString()));\n\n    // defaults already specified\n    d = processAdd(\"default-values-fallback-to-unique\",\n                   doc(f(\"timestamp\", now),\n                       f(\"id\", \"550e8400-e29b-41d4-a716-446655440000\"),\n                       f(\"processor_default_s\", \"I HAVE A VALUE\"),\n                       f(\"processor_default_i\", 12345),\n                       f(\"name\", \"Existing\", \"Values\")));\n\n    assertNotNull(d);\n\n    assertEquals(\"550e8400-e29b-41d4-a716-446655440000\",\n                 d.getFieldValue(\"id\"));\n\n    // defaults already specified\n    d = processAdd(\"default-values-fallback-to-unique-automatically\",\n        doc(f(\"timestamp\", now),\n            f(\"id\", \"550e8400-e29b-41d4-a716-446655440000\"),\n            f(\"processor_default_s\", \"I HAVE A VALUE\"),\n            f(\"processor_default_i\", 121),\n            f(\"name\", \"Existing\", \"Values\")));\n\n    assertNotNull(d);\n\n    assertEquals(\"550e8400-e29b-41d4-a716-446655440000\",\n        d.getFieldValue(\"id\"));\n    assertEquals(121, d.getFieldValue(\"processor_default_i\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":["f904d036d49909c2dc5dc9e0e1c3ae8c71c9ad18","701a87b43e511b5f16b96d82d67bfa1409240b27"],"f904d036d49909c2dc5dc9e0e1c3ae8c71c9ad18":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"701a87b43e511b5f16b96d82d67bfa1409240b27":["f904d036d49909c2dc5dc9e0e1c3ae8c71c9ad18"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["701a87b43e511b5f16b96d82d67bfa1409240b27"]},"commit2Childs":{"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":[],"f904d036d49909c2dc5dc9e0e1c3ae8c71c9ad18":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","701a87b43e511b5f16b96d82d67bfa1409240b27"],"701a87b43e511b5f16b96d82d67bfa1409240b27":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f904d036d49909c2dc5dc9e0e1c3ae8c71c9ad18"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}