{"path":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#fetchZkChildren(Watcher).mjava","commits":[{"id":"2a282020d6c9a4ea32a359539e283e4771a2fda8","date":1440047542,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#fetchZkChildren(Watcher).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Return the current set of children from ZK; does not change internal state.\n   */\n  TreeSet<String> fetchZkChildren(Watcher watcher) throws InterruptedException, KeeperException {\n    while (true) {\n      try {\n        TreeSet<String> orderedChildren = new TreeSet<>();\n\n        List<String> childNames = zookeeper.getChildren(dir, watcher, true);\n        stats.setQueueLength(childNames.size());\n        for (String childName : childNames) {\n          // Check format\n          if (!childName.regionMatches(0, PREFIX, 0, PREFIX.length())) {\n            LOG.debug(\"Found child node with improper name: \" + childName);\n            continue;\n          }\n          orderedChildren.add(childName);\n        }\n        return orderedChildren;\n      } catch (KeeperException.NoNodeException e) {\n        zookeeper.create(dir, new byte[0], CreateMode.PERSISTENT, true);\n        // go back to the loop and try again\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["c4240d54e1e9886aff46e198b55314039ba37397","c4240d54e1e9886aff46e198b55314039ba37397"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c4240d54e1e9886aff46e198b55314039ba37397","date":1455910430,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#fetchZkChildren(Watcher).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#fetchZkChildren(Watcher).mjava","sourceNew":"  /**\n   * Return the current set of children from ZK; does not change internal state.\n   */\n  TreeSet<String> fetchZkChildren(Watcher watcher) throws InterruptedException, KeeperException {\n    while (true) {\n      try {\n        TreeSet<String> orderedChildren = new TreeSet<>();\n\n        List<String> childNames = zookeeper.getChildren(dir, watcher, true);\n        stats.setQueueLength(childNames.size());\n        for (String childName : childNames) {\n          // Check format\n          if (!childName.regionMatches(0, PREFIX, 0, PREFIX.length())) {\n            LOG.debug(\"Found child node with improper name: \" + childName);\n            continue;\n          }\n          orderedChildren.add(childName);\n        }\n        return orderedChildren;\n      } catch (KeeperException.NoNodeException e) {\n        zookeeper.makePath(dir, false, true);\n        // go back to the loop and try again\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Return the current set of children from ZK; does not change internal state.\n   */\n  TreeSet<String> fetchZkChildren(Watcher watcher) throws InterruptedException, KeeperException {\n    while (true) {\n      try {\n        TreeSet<String> orderedChildren = new TreeSet<>();\n\n        List<String> childNames = zookeeper.getChildren(dir, watcher, true);\n        stats.setQueueLength(childNames.size());\n        for (String childName : childNames) {\n          // Check format\n          if (!childName.regionMatches(0, PREFIX, 0, PREFIX.length())) {\n            LOG.debug(\"Found child node with improper name: \" + childName);\n            continue;\n          }\n          orderedChildren.add(childName);\n        }\n        return orderedChildren;\n      } catch (KeeperException.NoNodeException e) {\n        zookeeper.create(dir, new byte[0], CreateMode.PERSISTENT, true);\n        // go back to the loop and try again\n      }\n    }\n  }\n\n","bugFix":["2a282020d6c9a4ea32a359539e283e4771a2fda8"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac","date":1503580177,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkDistributedQueue#fetchZkChildren(Watcher).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#fetchZkChildren(Watcher).mjava","sourceNew":"  /**\n   * Return the current set of children from ZK; does not change internal state.\n   */\n  TreeSet<String> fetchZkChildren(Watcher watcher) throws InterruptedException, KeeperException {\n    while (true) {\n      try {\n        TreeSet<String> orderedChildren = new TreeSet<>();\n\n        List<String> childNames = zookeeper.getChildren(dir, watcher, true);\n        stats.setQueueLength(childNames.size());\n        for (String childName : childNames) {\n          // Check format\n          if (!childName.regionMatches(0, PREFIX, 0, PREFIX.length())) {\n            LOG.debug(\"Found child node with improper name: \" + childName);\n            continue;\n          }\n          orderedChildren.add(childName);\n        }\n        return orderedChildren;\n      } catch (KeeperException.NoNodeException e) {\n        zookeeper.makePath(dir, false, true);\n        // go back to the loop and try again\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Return the current set of children from ZK; does not change internal state.\n   */\n  TreeSet<String> fetchZkChildren(Watcher watcher) throws InterruptedException, KeeperException {\n    while (true) {\n      try {\n        TreeSet<String> orderedChildren = new TreeSet<>();\n\n        List<String> childNames = zookeeper.getChildren(dir, watcher, true);\n        stats.setQueueLength(childNames.size());\n        for (String childName : childNames) {\n          // Check format\n          if (!childName.regionMatches(0, PREFIX, 0, PREFIX.length())) {\n            LOG.debug(\"Found child node with improper name: \" + childName);\n            continue;\n          }\n          orderedChildren.add(childName);\n        }\n        return orderedChildren;\n      } catch (KeeperException.NoNodeException e) {\n        zookeeper.makePath(dir, false, true);\n        // go back to the loop and try again\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b869898f50ca80263bac2e3ae0949f7700e5c977","date":1503580229,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#fetchZkChildren(Watcher).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkDistributedQueue#fetchZkChildren(Watcher).mjava","sourceNew":"  /**\n   * Return the current set of children from ZK; does not change internal state.\n   */\n  TreeSet<String> fetchZkChildren(Watcher watcher) throws InterruptedException, KeeperException {\n    while (true) {\n      try {\n        TreeSet<String> orderedChildren = new TreeSet<>();\n\n        List<String> childNames = zookeeper.getChildren(dir, watcher, true);\n        stats.setQueueLength(childNames.size());\n        for (String childName : childNames) {\n          // Check format\n          if (!childName.regionMatches(0, PREFIX, 0, PREFIX.length())) {\n            LOG.debug(\"Found child node with improper name: \" + childName);\n            continue;\n          }\n          orderedChildren.add(childName);\n        }\n        return orderedChildren;\n      } catch (KeeperException.NoNodeException e) {\n        zookeeper.makePath(dir, false, true);\n        // go back to the loop and try again\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Return the current set of children from ZK; does not change internal state.\n   */\n  TreeSet<String> fetchZkChildren(Watcher watcher) throws InterruptedException, KeeperException {\n    while (true) {\n      try {\n        TreeSet<String> orderedChildren = new TreeSet<>();\n\n        List<String> childNames = zookeeper.getChildren(dir, watcher, true);\n        stats.setQueueLength(childNames.size());\n        for (String childName : childNames) {\n          // Check format\n          if (!childName.regionMatches(0, PREFIX, 0, PREFIX.length())) {\n            LOG.debug(\"Found child node with improper name: \" + childName);\n            continue;\n          }\n          orderedChildren.add(childName);\n        }\n        return orderedChildren;\n      } catch (KeeperException.NoNodeException e) {\n        zookeeper.makePath(dir, false, true);\n        // go back to the loop and try again\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89c102d671c256ef8dd67b3ecb3ab96fe7a8006e","date":1505888025,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkDistributedQueue#fetchZkChildren(Watcher).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#fetchZkChildren(Watcher).mjava","sourceNew":"  /**\n   * Return the current set of children from ZK; does not change internal state.\n   */\n  TreeSet<String> fetchZkChildren(Watcher watcher) throws InterruptedException, KeeperException {\n    while (true) {\n      try {\n        TreeSet<String> orderedChildren = new TreeSet<>();\n\n        List<String> childNames = zookeeper.getChildren(dir, watcher, true);\n        stats.setQueueLength(childNames.size());\n        for (String childName : childNames) {\n          // Check format\n          if (!childName.regionMatches(0, PREFIX, 0, PREFIX.length())) {\n            LOG.debug(\"Found child node with improper name: \" + childName);\n            continue;\n          }\n          orderedChildren.add(childName);\n        }\n        return orderedChildren;\n      } catch (KeeperException.NoNodeException e) {\n        zookeeper.makePath(dir, false, true);\n        // go back to the loop and try again\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Return the current set of children from ZK; does not change internal state.\n   */\n  TreeSet<String> fetchZkChildren(Watcher watcher) throws InterruptedException, KeeperException {\n    while (true) {\n      try {\n        TreeSet<String> orderedChildren = new TreeSet<>();\n\n        List<String> childNames = zookeeper.getChildren(dir, watcher, true);\n        stats.setQueueLength(childNames.size());\n        for (String childName : childNames) {\n          // Check format\n          if (!childName.regionMatches(0, PREFIX, 0, PREFIX.length())) {\n            LOG.debug(\"Found child node with improper name: \" + childName);\n            continue;\n          }\n          orderedChildren.add(childName);\n        }\n        return orderedChildren;\n      } catch (KeeperException.NoNodeException e) {\n        zookeeper.makePath(dir, false, true);\n        // go back to the loop and try again\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6240b74b884c5587f2a4062dd27d6c32bf228889","date":1507037235,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkDistributedQueue#fetchZkChildren(Watcher).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#fetchZkChildren(Watcher).mjava","sourceNew":"  /**\n   * Return the current set of children from ZK; does not change internal state.\n   */\n  TreeSet<String> fetchZkChildren(Watcher watcher) throws InterruptedException, KeeperException {\n    while (true) {\n      try {\n        TreeSet<String> orderedChildren = new TreeSet<>();\n\n        List<String> childNames = zookeeper.getChildren(dir, watcher, true);\n        stats.setQueueLength(childNames.size());\n        for (String childName : childNames) {\n          // Check format\n          if (!childName.regionMatches(0, PREFIX, 0, PREFIX.length())) {\n            LOG.debug(\"Found child node with improper name: \" + childName);\n            continue;\n          }\n          orderedChildren.add(childName);\n        }\n        return orderedChildren;\n      } catch (KeeperException.NoNodeException e) {\n        zookeeper.makePath(dir, false, true);\n        // go back to the loop and try again\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Return the current set of children from ZK; does not change internal state.\n   */\n  TreeSet<String> fetchZkChildren(Watcher watcher) throws InterruptedException, KeeperException {\n    while (true) {\n      try {\n        TreeSet<String> orderedChildren = new TreeSet<>();\n\n        List<String> childNames = zookeeper.getChildren(dir, watcher, true);\n        stats.setQueueLength(childNames.size());\n        for (String childName : childNames) {\n          // Check format\n          if (!childName.regionMatches(0, PREFIX, 0, PREFIX.length())) {\n            LOG.debug(\"Found child node with improper name: \" + childName);\n            continue;\n          }\n          orderedChildren.add(childName);\n        }\n        return orderedChildren;\n      } catch (KeeperException.NoNodeException e) {\n        zookeeper.makePath(dir, false, true);\n        // go back to the loop and try again\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c4240d54e1e9886aff46e198b55314039ba37397":["2a282020d6c9a4ea32a359539e283e4771a2fda8"],"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac":["c4240d54e1e9886aff46e198b55314039ba37397"],"6240b74b884c5587f2a4062dd27d6c32bf228889":["b869898f50ca80263bac2e3ae0949f7700e5c977","89c102d671c256ef8dd67b3ecb3ab96fe7a8006e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"89c102d671c256ef8dd67b3ecb3ab96fe7a8006e":["c4240d54e1e9886aff46e198b55314039ba37397"],"b869898f50ca80263bac2e3ae0949f7700e5c977":["c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac"],"2a282020d6c9a4ea32a359539e283e4771a2fda8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["89c102d671c256ef8dd67b3ecb3ab96fe7a8006e"]},"commit2Childs":{"c4240d54e1e9886aff46e198b55314039ba37397":["c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac","89c102d671c256ef8dd67b3ecb3ab96fe7a8006e"],"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac":["b869898f50ca80263bac2e3ae0949f7700e5c977"],"6240b74b884c5587f2a4062dd27d6c32bf228889":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2a282020d6c9a4ea32a359539e283e4771a2fda8"],"b869898f50ca80263bac2e3ae0949f7700e5c977":["6240b74b884c5587f2a4062dd27d6c32bf228889"],"89c102d671c256ef8dd67b3ecb3ab96fe7a8006e":["6240b74b884c5587f2a4062dd27d6c32bf228889","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2a282020d6c9a4ea32a359539e283e4771a2fda8":["c4240d54e1e9886aff46e198b55314039ba37397"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["6240b74b884c5587f2a4062dd27d6c32bf228889","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}