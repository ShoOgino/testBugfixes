{"path":"lucene/sandbox/src/test/org/apache/lucene/sandbox/postingshighlight/TestPostingsHighlighterRanking#checkQuery(IndexSearcher,Query,int,int).mjava","commits":[{"id":"43ff047e697f5b71d06c7eec1406226951c59b80","date":1356561472,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/sandbox/postingshighlight/TestPostingsHighlighterRanking#checkQuery(IndexSearcher,Query,int,int).mjava","pathOld":"/dev/null","sourceNew":"  private void checkQuery(IndexSearcher is, Query query, int doc, int maxTopN) throws IOException {\n    for (int n = 1; n < maxTopN; n++) {\n      FakePassageFormatter f1 = new FakePassageFormatter();\n      PostingsHighlighter p1 = new PostingsHighlighter(\"body\", \n                                                       Integer.MAX_VALUE-1, \n                                                       BreakIterator.getSentenceInstance(Locale.ROOT), \n                                                       new PassageScorer(),\n                                                       f1);\n      FakePassageFormatter f2 = new FakePassageFormatter();\n      PostingsHighlighter p2 = new PostingsHighlighter(\"body\", \n                                                       Integer.MAX_VALUE-1, \n                                                       BreakIterator.getSentenceInstance(Locale.ROOT), \n                                                       new PassageScorer(),\n                                                       f2);\n      BooleanQuery bq = new BooleanQuery(false);\n      bq.add(query, BooleanClause.Occur.MUST);\n      bq.add(new TermQuery(new Term(\"id\", Integer.toString(doc))), BooleanClause.Occur.MUST);\n      TopDocs td = is.search(bq, 1);\n      p1.highlight(bq, is, td, n);\n      p2.highlight(bq, is, td, n+1);\n      assertTrue(f2.seen.containsAll(f1.seen));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8bb94551de83b33535d086e8d4222fa6d0c4cfc0","date":1357181547,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/sandbox/postingshighlight/TestPostingsHighlighterRanking#checkQuery(IndexSearcher,Query,int,int).mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/sandbox/postingshighlight/TestPostingsHighlighterRanking#checkQuery(IndexSearcher,Query,int,int).mjava","sourceNew":"  private void checkQuery(IndexSearcher is, Query query, int doc, int maxTopN) throws IOException {\n    for (int n = 1; n < maxTopN; n++) {\n      FakePassageFormatter f1 = new FakePassageFormatter();\n      PostingsHighlighter p1 = new PostingsHighlighter(Integer.MAX_VALUE-1, \n                                                       BreakIterator.getSentenceInstance(Locale.ROOT), \n                                                       new PassageScorer(),\n                                                       f1);\n      FakePassageFormatter f2 = new FakePassageFormatter();\n      PostingsHighlighter p2 = new PostingsHighlighter(Integer.MAX_VALUE-1, \n                                                       BreakIterator.getSentenceInstance(Locale.ROOT), \n                                                       new PassageScorer(),\n                                                       f2);\n      BooleanQuery bq = new BooleanQuery(false);\n      bq.add(query, BooleanClause.Occur.MUST);\n      bq.add(new TermQuery(new Term(\"id\", Integer.toString(doc))), BooleanClause.Occur.MUST);\n      TopDocs td = is.search(bq, 1);\n      p1.highlight(\"body\", bq, is, td, n);\n      p2.highlight(\"body\", bq, is, td, n+1);\n      assertTrue(f2.seen.containsAll(f1.seen));\n    }\n  }\n\n","sourceOld":"  private void checkQuery(IndexSearcher is, Query query, int doc, int maxTopN) throws IOException {\n    for (int n = 1; n < maxTopN; n++) {\n      FakePassageFormatter f1 = new FakePassageFormatter();\n      PostingsHighlighter p1 = new PostingsHighlighter(\"body\", \n                                                       Integer.MAX_VALUE-1, \n                                                       BreakIterator.getSentenceInstance(Locale.ROOT), \n                                                       new PassageScorer(),\n                                                       f1);\n      FakePassageFormatter f2 = new FakePassageFormatter();\n      PostingsHighlighter p2 = new PostingsHighlighter(\"body\", \n                                                       Integer.MAX_VALUE-1, \n                                                       BreakIterator.getSentenceInstance(Locale.ROOT), \n                                                       new PassageScorer(),\n                                                       f2);\n      BooleanQuery bq = new BooleanQuery(false);\n      bq.add(query, BooleanClause.Occur.MUST);\n      bq.add(new TermQuery(new Term(\"id\", Integer.toString(doc))), BooleanClause.Occur.MUST);\n      TopDocs td = is.search(bq, 1);\n      p1.highlight(bq, is, td, n);\n      p2.highlight(bq, is, td, n+1);\n      assertTrue(f2.seen.containsAll(f1.seen));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b3d16cba9355e2e97962eb1c441bbd0b6735c15","date":1357426290,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/postingshighlight/TestPostingsHighlighterRanking#checkQuery(IndexSearcher,Query,int,int).mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/sandbox/postingshighlight/TestPostingsHighlighterRanking#checkQuery(IndexSearcher,Query,int,int).mjava","sourceNew":"  private void checkQuery(IndexSearcher is, Query query, int doc, int maxTopN) throws IOException {\n    for (int n = 1; n < maxTopN; n++) {\n      FakePassageFormatter f1 = new FakePassageFormatter();\n      PostingsHighlighter p1 = new PostingsHighlighter(Integer.MAX_VALUE-1, \n                                                       BreakIterator.getSentenceInstance(Locale.ROOT), \n                                                       new PassageScorer(),\n                                                       f1);\n      FakePassageFormatter f2 = new FakePassageFormatter();\n      PostingsHighlighter p2 = new PostingsHighlighter(Integer.MAX_VALUE-1, \n                                                       BreakIterator.getSentenceInstance(Locale.ROOT), \n                                                       new PassageScorer(),\n                                                       f2);\n      BooleanQuery bq = new BooleanQuery(false);\n      bq.add(query, BooleanClause.Occur.MUST);\n      bq.add(new TermQuery(new Term(\"id\", Integer.toString(doc))), BooleanClause.Occur.MUST);\n      TopDocs td = is.search(bq, 1);\n      p1.highlight(\"body\", bq, is, td, n);\n      p2.highlight(\"body\", bq, is, td, n+1);\n      assertTrue(f2.seen.containsAll(f1.seen));\n    }\n  }\n\n","sourceOld":"  private void checkQuery(IndexSearcher is, Query query, int doc, int maxTopN) throws IOException {\n    for (int n = 1; n < maxTopN; n++) {\n      FakePassageFormatter f1 = new FakePassageFormatter();\n      PostingsHighlighter p1 = new PostingsHighlighter(Integer.MAX_VALUE-1, \n                                                       BreakIterator.getSentenceInstance(Locale.ROOT), \n                                                       new PassageScorer(),\n                                                       f1);\n      FakePassageFormatter f2 = new FakePassageFormatter();\n      PostingsHighlighter p2 = new PostingsHighlighter(Integer.MAX_VALUE-1, \n                                                       BreakIterator.getSentenceInstance(Locale.ROOT), \n                                                       new PassageScorer(),\n                                                       f2);\n      BooleanQuery bq = new BooleanQuery(false);\n      bq.add(query, BooleanClause.Occur.MUST);\n      bq.add(new TermQuery(new Term(\"id\", Integer.toString(doc))), BooleanClause.Occur.MUST);\n      TopDocs td = is.search(bq, 1);\n      p1.highlight(\"body\", bq, is, td, n);\n      p2.highlight(\"body\", bq, is, td, n+1);\n      assertTrue(f2.seen.containsAll(f1.seen));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4b3d16cba9355e2e97962eb1c441bbd0b6735c15":["8bb94551de83b33535d086e8d4222fa6d0c4cfc0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8bb94551de83b33535d086e8d4222fa6d0c4cfc0":["43ff047e697f5b71d06c7eec1406226951c59b80"],"43ff047e697f5b71d06c7eec1406226951c59b80":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4b3d16cba9355e2e97962eb1c441bbd0b6735c15"]},"commit2Childs":{"4b3d16cba9355e2e97962eb1c441bbd0b6735c15":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["43ff047e697f5b71d06c7eec1406226951c59b80"],"8bb94551de83b33535d086e8d4222fa6d0c4cfc0":["4b3d16cba9355e2e97962eb1c441bbd0b6735c15"],"43ff047e697f5b71d06c7eec1406226951c59b80":["8bb94551de83b33535d086e8d4222fa6d0c4cfc0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}