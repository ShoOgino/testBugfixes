{"path":"solr/contrib/clustering/src/test/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngineTest#checkEngine(CarrotClusteringEngine,int,int,Query,SolrParams).mjava","commits":[{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/clustering/src/test/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngineTest#checkEngine(CarrotClusteringEngine,int,int,Query,SolrParams).mjava","pathOld":"solr/contrib/clustering/src/test/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngineTest#checkEngine(CarrotClusteringEngine,int,int,Query,SolrParams).mjava","sourceNew":"  private List<NamedList<Object>> checkEngine(CarrotClusteringEngine engine, int expectedNumDocs,\n                           int expectedNumClusters, Query query, SolrParams clusteringParams) throws IOException {\n    // Get all documents to cluster\n    RefCounted<SolrIndexSearcher> ref = h.getCore().getSearcher();\n\n    DocList docList;\n    try {\n      SolrIndexSearcher searcher = ref.get();\n      docList = searcher.getDocList(query, (Query) null, new Sort(), 0,\n              numberOfDocs);\n      assertEquals(\"docList size\", expectedNumDocs, docList.matches());\n\n      ModifiableSolrParams solrParams = new ModifiableSolrParams();\n      solrParams.add(CarrotParams.PRODUCE_SUMMARY, \"true\");\n      solrParams.add(clusteringParams);\n\n      // Perform clustering\n      LocalSolrQueryRequest req = new LocalSolrQueryRequest(h.getCore(), solrParams);\n      Map<SolrDocument,Integer> docIds = new HashMap<SolrDocument, Integer>(docList.size());\n      SolrDocumentList solrDocList = SolrPluginUtils.docListToSolrDocumentList( docList, searcher, engine.getFieldsToLoad(req), docIds );\n\n      @SuppressWarnings(\"unchecked\")\n\t\t\tList<NamedList<Object>> results = (List<NamedList<Object>>) engine.cluster(query, solrDocList, docIds, req);\n      req.close();\n      assertEquals(\"number of clusters: \" + results, expectedNumClusters, results.size());\n      checkClusters(results, false);\n      return results;\n    } finally {\n      ref.decref();\n    }\n  }\n\n","sourceOld":"  private List<NamedList<Object>> checkEngine(CarrotClusteringEngine engine, int expectedNumDocs,\n                           int expectedNumClusters, Query query, SolrParams clusteringParams) throws IOException {\n    // Get all documents to cluster\n    RefCounted<SolrIndexSearcher> ref = h.getCore().getSearcher();\n\n    DocList docList;\n    try {\n      SolrIndexSearcher searcher = ref.get();\n      docList = searcher.getDocList(query, (Query) null, new Sort(), 0,\n              numberOfDocs);\n      assertEquals(\"docList size\", expectedNumDocs, docList.matches());\n\n      ModifiableSolrParams solrParams = new ModifiableSolrParams();\n      solrParams.add(CarrotParams.PRODUCE_SUMMARY, \"true\");\n      solrParams.add(clusteringParams);\n\n      // Perform clustering\n      LocalSolrQueryRequest req = new LocalSolrQueryRequest(h.getCore(), solrParams);\n      Map<SolrDocument,Integer> docIds = new HashMap<SolrDocument, Integer>(docList.size());\n      SolrDocumentList solrDocList = SolrPluginUtils.docListToSolrDocumentList( docList, searcher, engine.getFieldsToLoad(req), docIds );\n\n      @SuppressWarnings(\"unchecked\")\n\t\t\tList<NamedList<Object>> results = (List<NamedList<Object>>) engine.cluster(query, solrDocList, docIds, req);\n      req.close();\n      assertEquals(\"number of clusters: \" + results, expectedNumClusters, results.size());\n      checkClusters(results, false);\n      return results;\n    } finally {\n      ref.decref();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/clustering/src/test/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngineTest#checkEngine(CarrotClusteringEngine,int,int,Query,SolrParams).mjava","pathOld":"solr/contrib/clustering/src/test/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngineTest#checkEngine(CarrotClusteringEngine,int,int,Query,SolrParams).mjava","sourceNew":"  private List<NamedList<Object>> checkEngine(CarrotClusteringEngine engine, int expectedNumDocs,\n                           int expectedNumClusters, Query query, SolrParams clusteringParams) throws IOException {\n    // Get all documents to cluster\n    RefCounted<SolrIndexSearcher> ref = h.getCore().getSearcher();\n\n    DocList docList;\n    try {\n      SolrIndexSearcher searcher = ref.get();\n      docList = searcher.getDocList(query, (Query) null, new Sort(), 0,\n              numberOfDocs);\n      assertEquals(\"docList size\", expectedNumDocs, docList.matches());\n\n      ModifiableSolrParams solrParams = new ModifiableSolrParams();\n      solrParams.add(CarrotParams.PRODUCE_SUMMARY, \"true\");\n      solrParams.add(clusteringParams);\n\n      // Perform clustering\n      LocalSolrQueryRequest req = new LocalSolrQueryRequest(h.getCore(), solrParams);\n      Map<SolrDocument,Integer> docIds = new HashMap<SolrDocument, Integer>(docList.size());\n      SolrDocumentList solrDocList = SolrPluginUtils.docListToSolrDocumentList( docList, searcher, engine.getFieldsToLoad(req), docIds );\n\n      @SuppressWarnings(\"unchecked\")\n\t\t\tList<NamedList<Object>> results = (List<NamedList<Object>>) engine.cluster(query, solrDocList, docIds, req);\n      req.close();\n      assertEquals(\"number of clusters: \" + results, expectedNumClusters, results.size());\n      checkClusters(results, false);\n      return results;\n    } finally {\n      ref.decref();\n    }\n  }\n\n","sourceOld":"  private List<NamedList<Object>> checkEngine(CarrotClusteringEngine engine, int expectedNumDocs,\n                           int expectedNumClusters, Query query, SolrParams clusteringParams) throws IOException {\n    // Get all documents to cluster\n    RefCounted<SolrIndexSearcher> ref = h.getCore().getSearcher();\n\n    DocList docList;\n    try {\n      SolrIndexSearcher searcher = ref.get();\n      docList = searcher.getDocList(query, (Query) null, new Sort(), 0,\n              numberOfDocs);\n      assertEquals(\"docList size\", expectedNumDocs, docList.matches());\n\n      ModifiableSolrParams solrParams = new ModifiableSolrParams();\n      solrParams.add(CarrotParams.PRODUCE_SUMMARY, \"true\");\n      solrParams.add(clusteringParams);\n\n      // Perform clustering\n      LocalSolrQueryRequest req = new LocalSolrQueryRequest(h.getCore(), solrParams);\n      Map<SolrDocument,Integer> docIds = new HashMap<SolrDocument, Integer>(docList.size());\n      SolrDocumentList solrDocList = SolrPluginUtils.docListToSolrDocumentList( docList, searcher, engine.getFieldsToLoad(req), docIds );\n\n      @SuppressWarnings(\"unchecked\")\n\t\t\tList<NamedList<Object>> results = (List<NamedList<Object>>) engine.cluster(query, solrDocList, docIds, req);\n      req.close();\n      assertEquals(\"number of clusters: \" + results, expectedNumClusters, results.size());\n      checkClusters(results, false);\n      return results;\n    } finally {\n      ref.decref();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c5b0f07c6835b1a381980a03c88fbb4e41c4532","date":1312362519,"type":3,"author":"Stanisław Osiński","isMerge":false,"pathNew":"solr/contrib/clustering/src/test/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngineTest#checkEngine(CarrotClusteringEngine,int,int,Query,SolrParams).mjava","pathOld":"solr/contrib/clustering/src/test/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngineTest#checkEngine(CarrotClusteringEngine,int,int,Query,SolrParams).mjava","sourceNew":"  private List<NamedList<Object>> checkEngine(CarrotClusteringEngine engine, int expectedNumDocs,\n                           int expectedNumClusters, Query query, SolrParams clusteringParams) throws IOException {\n    // Get all documents to cluster\n    RefCounted<SolrIndexSearcher> ref = h.getCore().getSearcher();\n\n    DocList docList;\n    try {\n      SolrIndexSearcher searcher = ref.get();\n      docList = searcher.getDocList(query, (Query) null, new Sort(), 0,\n              numberOfDocs);\n      assertEquals(\"docList size\", expectedNumDocs, docList.matches());\n\n      ModifiableSolrParams solrParams = new ModifiableSolrParams();\n      solrParams.add(clusteringParams);\n\n      // Perform clustering\n      LocalSolrQueryRequest req = new LocalSolrQueryRequest(h.getCore(), solrParams);\n      Map<SolrDocument,Integer> docIds = new HashMap<SolrDocument, Integer>(docList.size());\n      SolrDocumentList solrDocList = SolrPluginUtils.docListToSolrDocumentList( docList, searcher, engine.getFieldsToLoad(req), docIds );\n\n      @SuppressWarnings(\"unchecked\")\n\t\t\tList<NamedList<Object>> results = (List<NamedList<Object>>) engine.cluster(query, solrDocList, docIds, req);\n      req.close();\n      assertEquals(\"number of clusters: \" + results, expectedNumClusters, results.size());\n      checkClusters(results, false);\n      return results;\n    } finally {\n      ref.decref();\n    }\n  }\n\n","sourceOld":"  private List<NamedList<Object>> checkEngine(CarrotClusteringEngine engine, int expectedNumDocs,\n                           int expectedNumClusters, Query query, SolrParams clusteringParams) throws IOException {\n    // Get all documents to cluster\n    RefCounted<SolrIndexSearcher> ref = h.getCore().getSearcher();\n\n    DocList docList;\n    try {\n      SolrIndexSearcher searcher = ref.get();\n      docList = searcher.getDocList(query, (Query) null, new Sort(), 0,\n              numberOfDocs);\n      assertEquals(\"docList size\", expectedNumDocs, docList.matches());\n\n      ModifiableSolrParams solrParams = new ModifiableSolrParams();\n      solrParams.add(CarrotParams.PRODUCE_SUMMARY, \"true\");\n      solrParams.add(clusteringParams);\n\n      // Perform clustering\n      LocalSolrQueryRequest req = new LocalSolrQueryRequest(h.getCore(), solrParams);\n      Map<SolrDocument,Integer> docIds = new HashMap<SolrDocument, Integer>(docList.size());\n      SolrDocumentList solrDocList = SolrPluginUtils.docListToSolrDocumentList( docList, searcher, engine.getFieldsToLoad(req), docIds );\n\n      @SuppressWarnings(\"unchecked\")\n\t\t\tList<NamedList<Object>> results = (List<NamedList<Object>>) engine.cluster(query, solrDocList, docIds, req);\n      req.close();\n      assertEquals(\"number of clusters: \" + results, expectedNumClusters, results.size());\n      checkClusters(results, false);\n      return results;\n    } finally {\n      ref.decref();\n    }\n  }\n\n","bugFix":["a5684446f7742dfb07c42296decc5e4d6515a0fe"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ef9e7ba08c124ce913ef60415c21ae1ca833d211","date":1323446079,"type":3,"author":"Stanisław Osiński","isMerge":false,"pathNew":"solr/contrib/clustering/src/test/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngineTest#checkEngine(CarrotClusteringEngine,int,int,Query,SolrParams).mjava","pathOld":"solr/contrib/clustering/src/test/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngineTest#checkEngine(CarrotClusteringEngine,int,int,Query,SolrParams).mjava","sourceNew":"  private List<NamedList<Object>> checkEngine(CarrotClusteringEngine engine, int expectedNumDocs,\n                           int expectedNumClusters, Query query, SolrParams clusteringParams) throws IOException {\n    // Get all documents to cluster\n    RefCounted<SolrIndexSearcher> ref = h.getCore().getSearcher();\n\n    DocList docList;\n    try {\n      SolrIndexSearcher searcher = ref.get();\n      docList = searcher.getDocList(query, (Query) null, new Sort(), 0,\n              numberOfDocs);\n      assertEquals(\"docList size\", expectedNumDocs, docList.matches());\n\n      ModifiableSolrParams solrParams = new ModifiableSolrParams();\n      solrParams.add(clusteringParams);\n\n      // Perform clustering\n      LocalSolrQueryRequest req = new LocalSolrQueryRequest(h.getCore(), solrParams);\n      Map<SolrDocument,Integer> docIds = new HashMap<SolrDocument, Integer>(docList.size());\n      SolrDocumentList solrDocList = SolrPluginUtils.docListToSolrDocumentList( docList, searcher, engine.getFieldsToLoad(req), docIds );\n\n      @SuppressWarnings(\"unchecked\")\n      List<NamedList<Object>> results = (List<NamedList<Object>>) engine.cluster(query, solrDocList, docIds, req);\n      req.close();\n      assertEquals(\"number of clusters: \" + results, expectedNumClusters, results.size());\n      checkClusters(results, false);\n      return results;\n    } finally {\n      ref.decref();\n    }\n  }\n\n","sourceOld":"  private List<NamedList<Object>> checkEngine(CarrotClusteringEngine engine, int expectedNumDocs,\n                           int expectedNumClusters, Query query, SolrParams clusteringParams) throws IOException {\n    // Get all documents to cluster\n    RefCounted<SolrIndexSearcher> ref = h.getCore().getSearcher();\n\n    DocList docList;\n    try {\n      SolrIndexSearcher searcher = ref.get();\n      docList = searcher.getDocList(query, (Query) null, new Sort(), 0,\n              numberOfDocs);\n      assertEquals(\"docList size\", expectedNumDocs, docList.matches());\n\n      ModifiableSolrParams solrParams = new ModifiableSolrParams();\n      solrParams.add(clusteringParams);\n\n      // Perform clustering\n      LocalSolrQueryRequest req = new LocalSolrQueryRequest(h.getCore(), solrParams);\n      Map<SolrDocument,Integer> docIds = new HashMap<SolrDocument, Integer>(docList.size());\n      SolrDocumentList solrDocList = SolrPluginUtils.docListToSolrDocumentList( docList, searcher, engine.getFieldsToLoad(req), docIds );\n\n      @SuppressWarnings(\"unchecked\")\n\t\t\tList<NamedList<Object>> results = (List<NamedList<Object>>) engine.cluster(query, solrDocList, docIds, req);\n      req.close();\n      assertEquals(\"number of clusters: \" + results, expectedNumClusters, results.size());\n      checkClusters(results, false);\n      return results;\n    } finally {\n      ref.decref();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff99371bc1f34bf1a2ccdb754940ee5fe5cc2565","date":1323540308,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/contrib/clustering/src/test/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngineTest#checkEngine(CarrotClusteringEngine,int,int,Query,SolrParams).mjava","pathOld":"solr/contrib/clustering/src/test/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngineTest#checkEngine(CarrotClusteringEngine,int,int,Query,SolrParams).mjava","sourceNew":"  private List<NamedList<Object>> checkEngine(CarrotClusteringEngine engine, int expectedNumDocs,\n                           int expectedNumClusters, Query query, SolrParams clusteringParams) throws IOException {\n    // Get all documents to cluster\n    RefCounted<SolrIndexSearcher> ref = h.getCore().getSearcher();\n\n    DocList docList;\n    try {\n      SolrIndexSearcher searcher = ref.get();\n      docList = searcher.getDocList(query, (Query) null, new Sort(), 0,\n              numberOfDocs);\n      assertEquals(\"docList size\", expectedNumDocs, docList.matches());\n\n      ModifiableSolrParams solrParams = new ModifiableSolrParams();\n      solrParams.add(clusteringParams);\n\n      // Perform clustering\n      LocalSolrQueryRequest req = new LocalSolrQueryRequest(h.getCore(), solrParams);\n      Map<SolrDocument,Integer> docIds = new HashMap<SolrDocument, Integer>(docList.size());\n      SolrDocumentList solrDocList = SolrPluginUtils.docListToSolrDocumentList( docList, searcher, engine.getFieldsToLoad(req), docIds );\n\n      @SuppressWarnings(\"unchecked\")\n      List<NamedList<Object>> results = (List<NamedList<Object>>) engine.cluster(query, solrDocList, docIds, req);\n      req.close();\n      assertEquals(\"number of clusters: \" + results, expectedNumClusters, results.size());\n      checkClusters(results, false);\n      return results;\n    } finally {\n      ref.decref();\n    }\n  }\n\n","sourceOld":"  private List<NamedList<Object>> checkEngine(CarrotClusteringEngine engine, int expectedNumDocs,\n                           int expectedNumClusters, Query query, SolrParams clusteringParams) throws IOException {\n    // Get all documents to cluster\n    RefCounted<SolrIndexSearcher> ref = h.getCore().getSearcher();\n\n    DocList docList;\n    try {\n      SolrIndexSearcher searcher = ref.get();\n      docList = searcher.getDocList(query, (Query) null, new Sort(), 0,\n              numberOfDocs);\n      assertEquals(\"docList size\", expectedNumDocs, docList.matches());\n\n      ModifiableSolrParams solrParams = new ModifiableSolrParams();\n      solrParams.add(clusteringParams);\n\n      // Perform clustering\n      LocalSolrQueryRequest req = new LocalSolrQueryRequest(h.getCore(), solrParams);\n      Map<SolrDocument,Integer> docIds = new HashMap<SolrDocument, Integer>(docList.size());\n      SolrDocumentList solrDocList = SolrPluginUtils.docListToSolrDocumentList( docList, searcher, engine.getFieldsToLoad(req), docIds );\n\n      @SuppressWarnings(\"unchecked\")\n\t\t\tList<NamedList<Object>> results = (List<NamedList<Object>>) engine.cluster(query, solrDocList, docIds, req);\n      req.close();\n      assertEquals(\"number of clusters: \" + results, expectedNumClusters, results.size());\n      checkClusters(results, false);\n      return results;\n    } finally {\n      ref.decref();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/contrib/clustering/src/test/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngineTest#checkEngine(CarrotClusteringEngine,int,int,Query,SolrParams).mjava","pathOld":"solr/contrib/clustering/src/test/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngineTest#checkEngine(CarrotClusteringEngine,int,int,Query,SolrParams).mjava","sourceNew":"  private List<NamedList<Object>> checkEngine(CarrotClusteringEngine engine, int expectedNumDocs,\n                           int expectedNumClusters, Query query, SolrParams clusteringParams) throws IOException {\n    // Get all documents to cluster\n    RefCounted<SolrIndexSearcher> ref = h.getCore().getSearcher();\n\n    DocList docList;\n    try {\n      SolrIndexSearcher searcher = ref.get();\n      docList = searcher.getDocList(query, (Query) null, new Sort(), 0,\n              numberOfDocs);\n      assertEquals(\"docList size\", expectedNumDocs, docList.matches());\n\n      ModifiableSolrParams solrParams = new ModifiableSolrParams();\n      solrParams.add(clusteringParams);\n\n      // Perform clustering\n      LocalSolrQueryRequest req = new LocalSolrQueryRequest(h.getCore(), solrParams);\n      Map<SolrDocument,Integer> docIds = new HashMap<>(docList.size());\n      SolrDocumentList solrDocList = SolrPluginUtils.docListToSolrDocumentList( docList, searcher, engine.getFieldsToLoad(req), docIds );\n\n      @SuppressWarnings(\"unchecked\")\n      List<NamedList<Object>> results = (List<NamedList<Object>>) engine.cluster(query, solrDocList, docIds, req);\n      req.close();\n      assertEquals(\"number of clusters: \" + results, expectedNumClusters, results.size());\n      checkClusters(results, false);\n      return results;\n    } finally {\n      ref.decref();\n    }\n  }\n\n","sourceOld":"  private List<NamedList<Object>> checkEngine(CarrotClusteringEngine engine, int expectedNumDocs,\n                           int expectedNumClusters, Query query, SolrParams clusteringParams) throws IOException {\n    // Get all documents to cluster\n    RefCounted<SolrIndexSearcher> ref = h.getCore().getSearcher();\n\n    DocList docList;\n    try {\n      SolrIndexSearcher searcher = ref.get();\n      docList = searcher.getDocList(query, (Query) null, new Sort(), 0,\n              numberOfDocs);\n      assertEquals(\"docList size\", expectedNumDocs, docList.matches());\n\n      ModifiableSolrParams solrParams = new ModifiableSolrParams();\n      solrParams.add(clusteringParams);\n\n      // Perform clustering\n      LocalSolrQueryRequest req = new LocalSolrQueryRequest(h.getCore(), solrParams);\n      Map<SolrDocument,Integer> docIds = new HashMap<SolrDocument, Integer>(docList.size());\n      SolrDocumentList solrDocList = SolrPluginUtils.docListToSolrDocumentList( docList, searcher, engine.getFieldsToLoad(req), docIds );\n\n      @SuppressWarnings(\"unchecked\")\n      List<NamedList<Object>> results = (List<NamedList<Object>>) engine.cluster(query, solrDocList, docIds, req);\n      req.close();\n      assertEquals(\"number of clusters: \" + results, expectedNumClusters, results.size());\n      checkClusters(results, false);\n      return results;\n    } finally {\n      ref.decref();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"63a9344cff6a72bc4c1ef080c69e10ad0635b811","date":1490410892,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/contrib/clustering/src/test/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngineTest#checkEngine(CarrotClusteringEngine,int,int,Query,SolrParams).mjava","pathOld":"solr/contrib/clustering/src/test/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngineTest#checkEngine(CarrotClusteringEngine,int,int,Query,SolrParams).mjava","sourceNew":"  private List<NamedList<Object>> checkEngine(CarrotClusteringEngine engine, int expectedNumDocs,\n                           int expectedNumClusters, Query query, SolrParams clusteringParams) throws IOException {\n    // Get all documents to cluster\n    RefCounted<SolrIndexSearcher> ref = h.getCore().getSearcher();\n\n    DocList docList;\n    try {\n      SolrIndexSearcher searcher = ref.get();\n      docList = searcher.getDocList(query, (Query) null, new Sort(), 0,\n              numberOfDocs);\n      assertEquals(\"docList size\", expectedNumDocs, docList.matches());\n\n      ModifiableSolrParams solrParams = new ModifiableSolrParams();\n      solrParams.add(clusteringParams);\n\n      // Perform clustering\n      LocalSolrQueryRequest req = new LocalSolrQueryRequest(h.getCore(), solrParams);\n      Map<SolrDocument,Integer> docIds = new HashMap<>(docList.size());\n      SolrDocumentList solrDocList = ClusteringComponent.docListToSolrDocumentList( docList, searcher, engine.getFieldsToLoad(req), docIds );\n\n      @SuppressWarnings(\"unchecked\")\n      List<NamedList<Object>> results = (List<NamedList<Object>>) engine.cluster(query, solrDocList, docIds, req);\n      req.close();\n      assertEquals(\"number of clusters: \" + results, expectedNumClusters, results.size());\n      checkClusters(results, false);\n      return results;\n    } finally {\n      ref.decref();\n    }\n  }\n\n","sourceOld":"  private List<NamedList<Object>> checkEngine(CarrotClusteringEngine engine, int expectedNumDocs,\n                           int expectedNumClusters, Query query, SolrParams clusteringParams) throws IOException {\n    // Get all documents to cluster\n    RefCounted<SolrIndexSearcher> ref = h.getCore().getSearcher();\n\n    DocList docList;\n    try {\n      SolrIndexSearcher searcher = ref.get();\n      docList = searcher.getDocList(query, (Query) null, new Sort(), 0,\n              numberOfDocs);\n      assertEquals(\"docList size\", expectedNumDocs, docList.matches());\n\n      ModifiableSolrParams solrParams = new ModifiableSolrParams();\n      solrParams.add(clusteringParams);\n\n      // Perform clustering\n      LocalSolrQueryRequest req = new LocalSolrQueryRequest(h.getCore(), solrParams);\n      Map<SolrDocument,Integer> docIds = new HashMap<>(docList.size());\n      SolrDocumentList solrDocList = SolrPluginUtils.docListToSolrDocumentList( docList, searcher, engine.getFieldsToLoad(req), docIds );\n\n      @SuppressWarnings(\"unchecked\")\n      List<NamedList<Object>> results = (List<NamedList<Object>>) engine.cluster(query, solrDocList, docIds, req);\n      req.close();\n      assertEquals(\"number of clusters: \" + results, expectedNumClusters, results.size());\n      checkClusters(results, false);\n      return results;\n    } finally {\n      ref.decref();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"de548de3ce5405595899f548152d4b93ac9eb9cc","date":1490594650,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/contrib/clustering/src/test/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngineTest#checkEngine(CarrotClusteringEngine,int,int,Query,SolrParams).mjava","pathOld":"solr/contrib/clustering/src/test/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngineTest#checkEngine(CarrotClusteringEngine,int,int,Query,SolrParams).mjava","sourceNew":"  private List<NamedList<Object>> checkEngine(CarrotClusteringEngine engine, int expectedNumDocs,\n                           int expectedNumClusters, Query query, SolrParams clusteringParams) throws IOException {\n    // Get all documents to cluster\n    RefCounted<SolrIndexSearcher> ref = h.getCore().getSearcher();\n\n    DocList docList;\n    try {\n      SolrIndexSearcher searcher = ref.get();\n      docList = searcher.getDocList(query, (Query) null, new Sort(), 0,\n              numberOfDocs);\n      assertEquals(\"docList size\", expectedNumDocs, docList.matches());\n\n      ModifiableSolrParams solrParams = new ModifiableSolrParams();\n      solrParams.add(clusteringParams);\n\n      // Perform clustering\n      LocalSolrQueryRequest req = new LocalSolrQueryRequest(h.getCore(), solrParams);\n      Map<SolrDocument,Integer> docIds = new HashMap<>(docList.size());\n      SolrDocumentList solrDocList = ClusteringComponent.docListToSolrDocumentList( docList, searcher, engine.getFieldsToLoad(req), docIds );\n\n      @SuppressWarnings(\"unchecked\")\n      List<NamedList<Object>> results = (List<NamedList<Object>>) engine.cluster(query, solrDocList, docIds, req);\n      req.close();\n      assertEquals(\"number of clusters: \" + results, expectedNumClusters, results.size());\n      checkClusters(results, false);\n      return results;\n    } finally {\n      ref.decref();\n    }\n  }\n\n","sourceOld":"  private List<NamedList<Object>> checkEngine(CarrotClusteringEngine engine, int expectedNumDocs,\n                           int expectedNumClusters, Query query, SolrParams clusteringParams) throws IOException {\n    // Get all documents to cluster\n    RefCounted<SolrIndexSearcher> ref = h.getCore().getSearcher();\n\n    DocList docList;\n    try {\n      SolrIndexSearcher searcher = ref.get();\n      docList = searcher.getDocList(query, (Query) null, new Sort(), 0,\n              numberOfDocs);\n      assertEquals(\"docList size\", expectedNumDocs, docList.matches());\n\n      ModifiableSolrParams solrParams = new ModifiableSolrParams();\n      solrParams.add(clusteringParams);\n\n      // Perform clustering\n      LocalSolrQueryRequest req = new LocalSolrQueryRequest(h.getCore(), solrParams);\n      Map<SolrDocument,Integer> docIds = new HashMap<>(docList.size());\n      SolrDocumentList solrDocList = SolrPluginUtils.docListToSolrDocumentList( docList, searcher, engine.getFieldsToLoad(req), docIds );\n\n      @SuppressWarnings(\"unchecked\")\n      List<NamedList<Object>> results = (List<NamedList<Object>>) engine.cluster(query, solrDocList, docIds, req);\n      req.close();\n      assertEquals(\"number of clusters: \" + results, expectedNumClusters, results.size());\n      checkClusters(results, false);\n      return results;\n    } finally {\n      ref.decref();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ab833f2b623042c834458d4cbcad05073a93793","date":1527625631,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/contrib/clustering/src/test/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngineTest#checkEngine(CarrotClusteringEngine,int,int,Query,SolrParams).mjava","pathOld":"solr/contrib/clustering/src/test/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngineTest#checkEngine(CarrotClusteringEngine,int,int,Query,SolrParams).mjava","sourceNew":"  private List<NamedList<Object>> checkEngine(CarrotClusteringEngine engine, int expectedNumDocs,\n                           int expectedNumClusters, Query query, SolrParams clusteringParams) throws IOException {\n    // Get all documents to cluster\n    return h.getCore().withSearcher(searcher -> {\n      DocList docList = searcher.getDocList(query, (Query) null, new Sort(), 0,\n          numberOfDocs);\n      assertEquals(\"docList size\", expectedNumDocs, docList.matches());\n\n      ModifiableSolrParams solrParams = new ModifiableSolrParams();\n      solrParams.add(clusteringParams);\n\n      // Perform clustering\n      LocalSolrQueryRequest req = new LocalSolrQueryRequest(h.getCore(), solrParams);\n      Map<SolrDocument,Integer> docIds = new HashMap<>(docList.size());\n      SolrDocumentList solrDocList = ClusteringComponent.docListToSolrDocumentList( docList, searcher, engine.getFieldsToLoad(req), docIds );\n\n      @SuppressWarnings(\"unchecked\")\n      List<NamedList<Object>> results = (List<NamedList<Object>>) engine.cluster(query, solrDocList, docIds, req);\n      req.close();\n      assertEquals(\"number of clusters: \" + results, expectedNumClusters, results.size());\n      checkClusters(results, false);\n      return results;\n    });\n  }\n\n","sourceOld":"  private List<NamedList<Object>> checkEngine(CarrotClusteringEngine engine, int expectedNumDocs,\n                           int expectedNumClusters, Query query, SolrParams clusteringParams) throws IOException {\n    // Get all documents to cluster\n    RefCounted<SolrIndexSearcher> ref = h.getCore().getSearcher();\n\n    DocList docList;\n    try {\n      SolrIndexSearcher searcher = ref.get();\n      docList = searcher.getDocList(query, (Query) null, new Sort(), 0,\n              numberOfDocs);\n      assertEquals(\"docList size\", expectedNumDocs, docList.matches());\n\n      ModifiableSolrParams solrParams = new ModifiableSolrParams();\n      solrParams.add(clusteringParams);\n\n      // Perform clustering\n      LocalSolrQueryRequest req = new LocalSolrQueryRequest(h.getCore(), solrParams);\n      Map<SolrDocument,Integer> docIds = new HashMap<>(docList.size());\n      SolrDocumentList solrDocList = ClusteringComponent.docListToSolrDocumentList( docList, searcher, engine.getFieldsToLoad(req), docIds );\n\n      @SuppressWarnings(\"unchecked\")\n      List<NamedList<Object>> results = (List<NamedList<Object>>) engine.cluster(query, solrDocList, docIds, req);\n      req.close();\n      assertEquals(\"number of clusters: \" + results, expectedNumClusters, results.size());\n      checkClusters(results, false);\n      return results;\n    } finally {\n      ref.decref();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2138c838f1c8052d94d61eb1e205dce7fa6932ef","date":1527642223,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/contrib/clustering/src/test/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngineTest#checkEngine(CarrotClusteringEngine,int,int,Query,SolrParams).mjava","pathOld":"solr/contrib/clustering/src/test/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngineTest#checkEngine(CarrotClusteringEngine,int,int,Query,SolrParams).mjava","sourceNew":"  private List<NamedList<Object>> checkEngine(CarrotClusteringEngine engine, int expectedNumDocs,\n                           int expectedNumClusters, Query query, SolrParams clusteringParams) throws IOException {\n    // Get all documents to cluster\n    return h.getCore().withSearcher(searcher -> {\n      DocList docList = searcher.getDocList(query, (Query) null, new Sort(), 0,\n          numberOfDocs);\n      assertEquals(\"docList size\", expectedNumDocs, docList.matches());\n\n      ModifiableSolrParams solrParams = new ModifiableSolrParams();\n      solrParams.add(clusteringParams);\n\n      // Perform clustering\n      LocalSolrQueryRequest req = new LocalSolrQueryRequest(h.getCore(), solrParams);\n      Map<SolrDocument,Integer> docIds = new HashMap<>(docList.size());\n      SolrDocumentList solrDocList = ClusteringComponent.docListToSolrDocumentList( docList, searcher, engine.getFieldsToLoad(req), docIds );\n\n      @SuppressWarnings(\"unchecked\")\n      List<NamedList<Object>> results = (List<NamedList<Object>>) engine.cluster(query, solrDocList, docIds, req);\n      req.close();\n      assertEquals(\"number of clusters: \" + results, expectedNumClusters, results.size());\n      checkClusters(results, false);\n      return results;\n    });\n  }\n\n","sourceOld":"  private List<NamedList<Object>> checkEngine(CarrotClusteringEngine engine, int expectedNumDocs,\n                           int expectedNumClusters, Query query, SolrParams clusteringParams) throws IOException {\n    // Get all documents to cluster\n    RefCounted<SolrIndexSearcher> ref = h.getCore().getSearcher();\n\n    DocList docList;\n    try {\n      SolrIndexSearcher searcher = ref.get();\n      docList = searcher.getDocList(query, (Query) null, new Sort(), 0,\n              numberOfDocs);\n      assertEquals(\"docList size\", expectedNumDocs, docList.matches());\n\n      ModifiableSolrParams solrParams = new ModifiableSolrParams();\n      solrParams.add(clusteringParams);\n\n      // Perform clustering\n      LocalSolrQueryRequest req = new LocalSolrQueryRequest(h.getCore(), solrParams);\n      Map<SolrDocument,Integer> docIds = new HashMap<>(docList.size());\n      SolrDocumentList solrDocList = ClusteringComponent.docListToSolrDocumentList( docList, searcher, engine.getFieldsToLoad(req), docIds );\n\n      @SuppressWarnings(\"unchecked\")\n      List<NamedList<Object>> results = (List<NamedList<Object>>) engine.cluster(query, solrDocList, docIds, req);\n      req.close();\n      assertEquals(\"number of clusters: \" + results, expectedNumClusters, results.size());\n      checkClusters(results, false);\n      return results;\n    } finally {\n      ref.decref();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["ef9e7ba08c124ce913ef60415c21ae1ca833d211"],"5c5b0f07c6835b1a381980a03c88fbb4e41c4532":["c26f00b574427b55127e869b935845554afde1fa"],"de548de3ce5405595899f548152d4b93ac9eb9cc":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"63a9344cff6a72bc4c1ef080c69e10ad0635b811":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ff99371bc1f34bf1a2ccdb754940ee5fe5cc2565":["5c5b0f07c6835b1a381980a03c88fbb4e41c4532","ef9e7ba08c124ce913ef60415c21ae1ca833d211"],"ef9e7ba08c124ce913ef60415c21ae1ca833d211":["5c5b0f07c6835b1a381980a03c88fbb4e41c4532"],"4ab833f2b623042c834458d4cbcad05073a93793":["63a9344cff6a72bc4c1ef080c69e10ad0635b811"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2138c838f1c8052d94d61eb1e205dce7fa6932ef"],"2138c838f1c8052d94d61eb1e205dce7fa6932ef":["63a9344cff6a72bc4c1ef080c69e10ad0635b811","4ab833f2b623042c834458d4cbcad05073a93793"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["de548de3ce5405595899f548152d4b93ac9eb9cc","63a9344cff6a72bc4c1ef080c69e10ad0635b811"],"5c5b0f07c6835b1a381980a03c88fbb4e41c4532":["ff99371bc1f34bf1a2ccdb754940ee5fe5cc2565","ef9e7ba08c124ce913ef60415c21ae1ca833d211"],"de548de3ce5405595899f548152d4b93ac9eb9cc":[],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["5c5b0f07c6835b1a381980a03c88fbb4e41c4532"],"63a9344cff6a72bc4c1ef080c69e10ad0635b811":["4ab833f2b623042c834458d4cbcad05073a93793","2138c838f1c8052d94d61eb1e205dce7fa6932ef"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","c26f00b574427b55127e869b935845554afde1fa"],"ff99371bc1f34bf1a2ccdb754940ee5fe5cc2565":[],"ef9e7ba08c124ce913ef60415c21ae1ca833d211":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","ff99371bc1f34bf1a2ccdb754940ee5fe5cc2565"],"4ab833f2b623042c834458d4cbcad05073a93793":["2138c838f1c8052d94d61eb1e205dce7fa6932ef"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2138c838f1c8052d94d61eb1e205dce7fa6932ef":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["de548de3ce5405595899f548152d4b93ac9eb9cc","ff99371bc1f34bf1a2ccdb754940ee5fe5cc2565","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}