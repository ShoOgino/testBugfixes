{"path":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createCores(HttpSolrClient,ThreadPoolExecutor,String,int,int).mjava","commits":[{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createCores(HttpSolrClient,ThreadPoolExecutor,String,int,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createCores(HttpSolrServer,ThreadPoolExecutor,String,int,int).mjava","sourceNew":"  protected void createCores(final HttpSolrClient client,\n      ThreadPoolExecutor executor, final String collection, final int numShards, int cnt) {\n    for (int i = 0; i < cnt; i++) {\n      final int freezeI = i;\n      executor.execute(new Runnable() {\n        \n        @Override\n        public void run() {\n          Create createCmd = new Create();\n          createCmd.setCoreName(collection + freezeI);\n          createCmd.setCollection(collection);\n\n          createCmd.setNumShards(numShards);\n          try {\n            String core3dataDir = createTempDir(collection).toFile().getAbsolutePath();\n            createCmd.setDataDir(getDataDir(core3dataDir));\n\n            client.request(createCmd);\n          } catch (SolrServerException e) {\n            throw new RuntimeException(e);\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          }\n        }\n        \n      });\n    }\n  }\n\n","sourceOld":"  protected void createCores(final HttpSolrServer server,\n      ThreadPoolExecutor executor, final String collection, final int numShards, int cnt) {\n    for (int i = 0; i < cnt; i++) {\n      final int freezeI = i;\n      executor.execute(new Runnable() {\n        \n        @Override\n        public void run() {\n          Create createCmd = new Create();\n          createCmd.setCoreName(collection + freezeI);\n          createCmd.setCollection(collection);\n\n          createCmd.setNumShards(numShards);\n          try {\n            String core3dataDir = createTempDir(collection).toFile().getAbsolutePath();\n            createCmd.setDataDir(getDataDir(core3dataDir));\n\n            server.request(createCmd);\n          } catch (SolrServerException e) {\n            throw new RuntimeException(e);\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          }\n        }\n        \n      });\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c6e1dc1bb4254226c8d7151b596cc1be40671751","date":1421876355,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createCores(HttpSolrClient,ThreadPoolExecutor,String,int,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createCores(HttpSolrClient,ThreadPoolExecutor,String,int,int).mjava","sourceNew":"  protected void createCores(final HttpSolrClient client,\n      ThreadPoolExecutor executor, final String collection, final int numShards, int cnt) {\n    for (int i = 0; i < cnt; i++) {\n      final int freezeI = i;\n      executor.execute(new Runnable() {\n        \n        @Override\n        public void run() {\n          Create createCmd = new Create();\n          createCmd.setCoreName(collection + freezeI);\n          createCmd.setCollection(collection);\n\n          createCmd.setNumShards(numShards);\n          try {\n            String core3dataDir = createTempDir(collection).toFile().getAbsolutePath();\n            createCmd.setDataDir(getDataDir(core3dataDir));\n\n            client.request(createCmd);\n          } catch (SolrServerException | IOException e) {\n            throw new RuntimeException(e);\n          }\n        }\n        \n      });\n    }\n  }\n\n","sourceOld":"  protected void createCores(final HttpSolrClient client,\n      ThreadPoolExecutor executor, final String collection, final int numShards, int cnt) {\n    for (int i = 0; i < cnt; i++) {\n      final int freezeI = i;\n      executor.execute(new Runnable() {\n        \n        @Override\n        public void run() {\n          Create createCmd = new Create();\n          createCmd.setCoreName(collection + freezeI);\n          createCmd.setCollection(collection);\n\n          createCmd.setNumShards(numShards);\n          try {\n            String core3dataDir = createTempDir(collection).toFile().getAbsolutePath();\n            createCmd.setDataDir(getDataDir(core3dataDir));\n\n            client.request(createCmd);\n          } catch (SolrServerException e) {\n            throw new RuntimeException(e);\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          }\n        }\n        \n      });\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a0c04b71951333291abc7f317109a6a5957bd28","date":1457097827,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createCores(HttpSolrClient,ThreadPoolExecutor,String,int,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createCores(HttpSolrClient,ThreadPoolExecutor,String,int,int).mjava","sourceNew":"  protected void createCores(final HttpSolrClient client,\n      ThreadPoolExecutor executor, final String collection, final int numShards, int cnt) {\n    for (int i = 0; i < cnt; i++) {\n      final int freezeI = i;\n      executor.execute(() -> {\n        Create createCmd = new Create();\n        createCmd.setCoreName(collection + freezeI);\n        createCmd.setCollection(collection);\n\n        createCmd.setNumShards(numShards);\n        try {\n          String core3dataDir = createTempDir(collection).toFile().getAbsolutePath();\n          createCmd.setDataDir(getDataDir(core3dataDir));\n\n          client.request(createCmd);\n        } catch (SolrServerException | IOException e) {\n          throw new RuntimeException(e);\n        }\n      });\n    }\n  }\n\n","sourceOld":"  protected void createCores(final HttpSolrClient client,\n      ThreadPoolExecutor executor, final String collection, final int numShards, int cnt) {\n    for (int i = 0; i < cnt; i++) {\n      final int freezeI = i;\n      executor.execute(new Runnable() {\n        \n        @Override\n        public void run() {\n          Create createCmd = new Create();\n          createCmd.setCoreName(collection + freezeI);\n          createCmd.setCollection(collection);\n\n          createCmd.setNumShards(numShards);\n          try {\n            String core3dataDir = createTempDir(collection).toFile().getAbsolutePath();\n            createCmd.setDataDir(getDataDir(core3dataDir));\n\n            client.request(createCmd);\n          } catch (SolrServerException | IOException e) {\n            throw new RuntimeException(e);\n          }\n        }\n        \n      });\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9b4296bd51ca61b482138791478afdd0f7d3a3d","date":1498058739,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createCores(HttpSolrClient,ThreadPoolExecutor,String,int,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createCores(HttpSolrClient,ThreadPoolExecutor,String,int,int).mjava","sourceNew":"  protected void createCores(final HttpSolrClient client,\n      ThreadPoolExecutor executor, final String collection, final int numShards, int cnt) {\n    try {\n      assertEquals(0, CollectionAdminRequest.createCollection(collection, numShards, 1)\n          .setCreateNodeSet(\"\")\n          .process(client).getStatus());\n    } catch (SolrServerException | IOException e) {\n      throw new RuntimeException(e);\n    }\n    String nodeName = null;\n    for (JettySolrRunner jetty : jettys) {\n      if (client.getBaseURL().startsWith(jetty.getBaseUrl().toString())) {\n        nodeName = jetty.getNodeName();\n      }\n    }\n    for (int i = 0; i < cnt; i++) {\n      final int freezeI = i;\n      final String freezeNodename = nodeName;\n      executor.execute(() -> {\n        try {\n          assertTrue(CollectionAdminRequest.addReplicaToShard(collection, \"shard\"+((freezeI%numShards)+1))\n              .setCoreName(collection + freezeI)\n              .setNode(freezeNodename).process(client).isSuccess());\n        } catch (SolrServerException | IOException e) {\n          throw new RuntimeException(e);\n        }\n      });\n    }\n  }\n\n","sourceOld":"  protected void createCores(final HttpSolrClient client,\n      ThreadPoolExecutor executor, final String collection, final int numShards, int cnt) {\n    for (int i = 0; i < cnt; i++) {\n      final int freezeI = i;\n      executor.execute(() -> {\n        Create createCmd = new Create();\n        createCmd.setCoreName(collection + freezeI);\n        createCmd.setCollection(collection);\n\n        createCmd.setNumShards(numShards);\n        try {\n          String core3dataDir = createTempDir(collection).toFile().getAbsolutePath();\n          createCmd.setDataDir(getDataDir(core3dataDir));\n\n          client.request(createCmd);\n        } catch (SolrServerException | IOException e) {\n          throw new RuntimeException(e);\n        }\n      });\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c3d9a2e4ec5db2bc6cc023d9a1fd387ceb5b69b5","date":1498283633,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createCores(HttpSolrClient,ThreadPoolExecutor,String,int,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createCores(HttpSolrClient,ThreadPoolExecutor,String,int,int).mjava","sourceNew":"  protected void createCores(final HttpSolrClient client,\n      ThreadPoolExecutor executor, final String collection, final int numShards, int cnt) {\n    try {\n      assertEquals(0, CollectionAdminRequest.createCollection(collection, numShards, 1)\n          .setCreateNodeSet(\"\")\n          .process(client).getStatus());\n    } catch (SolrServerException | IOException e) {\n      throw new RuntimeException(e);\n    }\n    String nodeName = null;\n    for (JettySolrRunner jetty : jettys) {\n      if (client.getBaseURL().contains(\":\"+jetty.getLocalPort())) {\n        nodeName = jetty.getNodeName();\n        break;\n      }\n    }\n    assertNotNull(nodeName);\n    for (int i = 0; i < cnt; i++) {\n      final int freezeI = i;\n      final String freezeNodename = nodeName;\n      executor.execute(() -> {\n        try {\n          assertTrue(CollectionAdminRequest.addReplicaToShard(collection, \"shard\"+((freezeI%numShards)+1))\n              .setCoreName(collection + freezeI)\n              .setNode(freezeNodename).process(client).isSuccess());\n        } catch (SolrServerException | IOException e) {\n          throw new RuntimeException(e);\n        }\n      });\n    }\n  }\n\n","sourceOld":"  protected void createCores(final HttpSolrClient client,\n      ThreadPoolExecutor executor, final String collection, final int numShards, int cnt) {\n    try {\n      assertEquals(0, CollectionAdminRequest.createCollection(collection, numShards, 1)\n          .setCreateNodeSet(\"\")\n          .process(client).getStatus());\n    } catch (SolrServerException | IOException e) {\n      throw new RuntimeException(e);\n    }\n    String nodeName = null;\n    for (JettySolrRunner jetty : jettys) {\n      if (client.getBaseURL().startsWith(jetty.getBaseUrl().toString())) {\n        nodeName = jetty.getNodeName();\n      }\n    }\n    for (int i = 0; i < cnt; i++) {\n      final int freezeI = i;\n      final String freezeNodename = nodeName;\n      executor.execute(() -> {\n        try {\n          assertTrue(CollectionAdminRequest.addReplicaToShard(collection, \"shard\"+((freezeI%numShards)+1))\n              .setCoreName(collection + freezeI)\n              .setNode(freezeNodename).process(client).isSuccess());\n        } catch (SolrServerException | IOException e) {\n          throw new RuntimeException(e);\n        }\n      });\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createCores(HttpSolrClient,ThreadPoolExecutor,String,int,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createCores(HttpSolrClient,ThreadPoolExecutor,String,int,int).mjava","sourceNew":"  protected void createCores(final HttpSolrClient client,\n      ThreadPoolExecutor executor, final String collection, final int numShards, int cnt) {\n    try {\n      assertEquals(0, CollectionAdminRequest.createCollection(collection, numShards, 1)\n          .setCreateNodeSet(\"\")\n          .process(client).getStatus());\n    } catch (SolrServerException | IOException e) {\n      throw new RuntimeException(e);\n    }\n    String nodeName = null;\n    for (JettySolrRunner jetty : jettys) {\n      if (client.getBaseURL().contains(\":\"+jetty.getLocalPort())) {\n        nodeName = jetty.getNodeName();\n        break;\n      }\n    }\n    assertNotNull(nodeName);\n    for (int i = 0; i < cnt; i++) {\n      final int freezeI = i;\n      final String freezeNodename = nodeName;\n      executor.execute(() -> {\n        try {\n          assertTrue(CollectionAdminRequest.addReplicaToShard(collection, \"shard\"+((freezeI%numShards)+1))\n              .setCoreName(collection + freezeI)\n              .setNode(freezeNodename).process(client).isSuccess());\n        } catch (SolrServerException | IOException e) {\n          throw new RuntimeException(e);\n        }\n      });\n    }\n  }\n\n","sourceOld":"  protected void createCores(final HttpSolrClient client,\n      ThreadPoolExecutor executor, final String collection, final int numShards, int cnt) {\n    for (int i = 0; i < cnt; i++) {\n      final int freezeI = i;\n      executor.execute(() -> {\n        Create createCmd = new Create();\n        createCmd.setCoreName(collection + freezeI);\n        createCmd.setCollection(collection);\n\n        createCmd.setNumShards(numShards);\n        try {\n          String core3dataDir = createTempDir(collection).toFile().getAbsolutePath();\n          createCmd.setDataDir(getDataDir(core3dataDir));\n\n          client.request(createCmd);\n        } catch (SolrServerException | IOException e) {\n          throw new RuntimeException(e);\n        }\n      });\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"197bbedf08450ade98a11f4a0001448059666bec","date":1498534625,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createCores(HttpSolrClient,ThreadPoolExecutor,String,int,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createCores(HttpSolrClient,ThreadPoolExecutor,String,int,int).mjava","sourceNew":"  protected void createCores(final HttpSolrClient client,\n      ThreadPoolExecutor executor, final String collection, final int numShards, int cnt) {\n    try {\n      assertEquals(0, CollectionAdminRequest.createCollection(collection, \"conf1\", numShards, 1)\n          .setCreateNodeSet(\"\")\n          .process(client).getStatus());\n    } catch (SolrServerException | IOException e) {\n      throw new RuntimeException(e);\n    }\n    String nodeName = null;\n    for (JettySolrRunner jetty : jettys) {\n      if (client.getBaseURL().contains(\":\"+jetty.getLocalPort())) {\n        nodeName = jetty.getNodeName();\n        break;\n      }\n    }\n    assertNotNull(nodeName);\n    for (int i = 0; i < cnt; i++) {\n      final int freezeI = i;\n      final String freezeNodename = nodeName;\n      executor.execute(() -> {\n        try {\n          assertTrue(CollectionAdminRequest.addReplicaToShard(collection, \"shard\"+((freezeI%numShards)+1))\n              .setCoreName(collection + freezeI)\n              .setNode(freezeNodename).process(client).isSuccess());\n        } catch (SolrServerException | IOException e) {\n          throw new RuntimeException(e);\n        }\n      });\n    }\n  }\n\n","sourceOld":"  protected void createCores(final HttpSolrClient client,\n      ThreadPoolExecutor executor, final String collection, final int numShards, int cnt) {\n    try {\n      assertEquals(0, CollectionAdminRequest.createCollection(collection, numShards, 1)\n          .setCreateNodeSet(\"\")\n          .process(client).getStatus());\n    } catch (SolrServerException | IOException e) {\n      throw new RuntimeException(e);\n    }\n    String nodeName = null;\n    for (JettySolrRunner jetty : jettys) {\n      if (client.getBaseURL().contains(\":\"+jetty.getLocalPort())) {\n        nodeName = jetty.getNodeName();\n        break;\n      }\n    }\n    assertNotNull(nodeName);\n    for (int i = 0; i < cnt; i++) {\n      final int freezeI = i;\n      final String freezeNodename = nodeName;\n      executor.execute(() -> {\n        try {\n          assertTrue(CollectionAdminRequest.addReplicaToShard(collection, \"shard\"+((freezeI%numShards)+1))\n              .setCoreName(collection + freezeI)\n              .setNode(freezeNodename).process(client).isSuccess());\n        } catch (SolrServerException | IOException e) {\n          throw new RuntimeException(e);\n        }\n      });\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4","date":1498540685,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createCores(HttpSolrClient,ThreadPoolExecutor,String,int,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createCores(HttpSolrClient,ThreadPoolExecutor,String,int,int).mjava","sourceNew":"  protected void createCores(final HttpSolrClient client,\n      ThreadPoolExecutor executor, final String collection, final int numShards, int cnt) {\n    try {\n      assertEquals(0, CollectionAdminRequest.createCollection(collection, \"conf1\", numShards, 1)\n          .setCreateNodeSet(\"\")\n          .process(client).getStatus());\n    } catch (SolrServerException | IOException e) {\n      throw new RuntimeException(e);\n    }\n    String nodeName = null;\n    for (JettySolrRunner jetty : jettys) {\n      if (client.getBaseURL().contains(\":\"+jetty.getLocalPort())) {\n        nodeName = jetty.getNodeName();\n        break;\n      }\n    }\n    assertNotNull(nodeName);\n    for (int i = 0; i < cnt; i++) {\n      final int freezeI = i;\n      final String freezeNodename = nodeName;\n      executor.execute(() -> {\n        try {\n          assertTrue(CollectionAdminRequest.addReplicaToShard(collection, \"shard\"+((freezeI%numShards)+1))\n              .setCoreName(collection + freezeI)\n              .setNode(freezeNodename).process(client).isSuccess());\n        } catch (SolrServerException | IOException e) {\n          throw new RuntimeException(e);\n        }\n      });\n    }\n  }\n\n","sourceOld":"  protected void createCores(final HttpSolrClient client,\n      ThreadPoolExecutor executor, final String collection, final int numShards, int cnt) {\n    try {\n      assertEquals(0, CollectionAdminRequest.createCollection(collection, numShards, 1)\n          .setCreateNodeSet(\"\")\n          .process(client).getStatus());\n    } catch (SolrServerException | IOException e) {\n      throw new RuntimeException(e);\n    }\n    String nodeName = null;\n    for (JettySolrRunner jetty : jettys) {\n      if (client.getBaseURL().contains(\":\"+jetty.getLocalPort())) {\n        nodeName = jetty.getNodeName();\n        break;\n      }\n    }\n    assertNotNull(nodeName);\n    for (int i = 0; i < cnt; i++) {\n      final int freezeI = i;\n      final String freezeNodename = nodeName;\n      executor.execute(() -> {\n        try {\n          assertTrue(CollectionAdminRequest.addReplicaToShard(collection, \"shard\"+((freezeI%numShards)+1))\n              .setCoreName(collection + freezeI)\n              .setNode(freezeNodename).process(client).isSuccess());\n        } catch (SolrServerException | IOException e) {\n          throw new RuntimeException(e);\n        }\n      });\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7871f9c286dce2a9370bcf517a3e7d12e3bd9602","date":1498708934,"type":5,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createCollectionInOneInstance(SolrClient,String,ThreadPoolExecutor,String,int,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createCores(HttpSolrClient,ThreadPoolExecutor,String,int,int).mjava","sourceNew":"  /**\n   * Create a collection in single node\n   */\n  protected void createCollectionInOneInstance(final SolrClient client, String nodeName,\n                                               ThreadPoolExecutor executor, final String collection,\n                                               final int numShards, int numReplicas) {\n    assertNotNull(nodeName);\n    try {\n      assertEquals(0, CollectionAdminRequest.createCollection(collection, \"conf1\", numShards, 1)\n          .setCreateNodeSet(\"\")\n          .process(client).getStatus());\n    } catch (SolrServerException | IOException e) {\n      throw new RuntimeException(e);\n    }\n    for (int i = 0; i < numReplicas; i++) {\n      final int freezeI = i;\n      executor.execute(() -> {\n        try {\n          assertTrue(CollectionAdminRequest.addReplicaToShard(collection, \"shard\"+((freezeI%numShards)+1))\n              .setCoreName(collection + freezeI)\n              .setNode(nodeName).process(client).isSuccess());\n        } catch (SolrServerException | IOException e) {\n          throw new RuntimeException(e);\n        }\n      });\n    }\n  }\n\n","sourceOld":"  protected void createCores(final HttpSolrClient client,\n      ThreadPoolExecutor executor, final String collection, final int numShards, int cnt) {\n    try {\n      assertEquals(0, CollectionAdminRequest.createCollection(collection, \"conf1\", numShards, 1)\n          .setCreateNodeSet(\"\")\n          .process(client).getStatus());\n    } catch (SolrServerException | IOException e) {\n      throw new RuntimeException(e);\n    }\n    String nodeName = null;\n    for (JettySolrRunner jetty : jettys) {\n      if (client.getBaseURL().contains(\":\"+jetty.getLocalPort())) {\n        nodeName = jetty.getNodeName();\n        break;\n      }\n    }\n    assertNotNull(nodeName);\n    for (int i = 0; i < cnt; i++) {\n      final int freezeI = i;\n      final String freezeNodename = nodeName;\n      executor.execute(() -> {\n        try {\n          assertTrue(CollectionAdminRequest.addReplicaToShard(collection, \"shard\"+((freezeI%numShards)+1))\n              .setCoreName(collection + freezeI)\n              .setNode(freezeNodename).process(client).isSuccess());\n        } catch (SolrServerException | IOException e) {\n          throw new RuntimeException(e);\n        }\n      });\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createCores(HttpSolrClient,ThreadPoolExecutor,String,int,int).mjava","sourceNew":null,"sourceOld":"  protected void createCores(final HttpSolrClient client,\n      ThreadPoolExecutor executor, final String collection, final int numShards, int cnt) {\n    for (int i = 0; i < cnt; i++) {\n      final int freezeI = i;\n      executor.execute(() -> {\n        Create createCmd = new Create();\n        createCmd.setCoreName(collection + freezeI);\n        createCmd.setCollection(collection);\n\n        createCmd.setNumShards(numShards);\n        try {\n          String core3dataDir = createTempDir(collection).toFile().getAbsolutePath();\n          createCmd.setDataDir(getDataDir(core3dataDir));\n\n          client.request(createCmd);\n        } catch (SolrServerException | IOException e) {\n          throw new RuntimeException(e);\n        }\n      });\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30c8e5574b55d57947e989443dfde611646530ee","date":1499131153,"type":4,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createCores(HttpSolrClient,ThreadPoolExecutor,String,int,int).mjava","sourceNew":null,"sourceOld":"  protected void createCores(final HttpSolrClient client,\n      ThreadPoolExecutor executor, final String collection, final int numShards, int cnt) {\n    try {\n      assertEquals(0, CollectionAdminRequest.createCollection(collection, \"conf1\", numShards, 1)\n          .setCreateNodeSet(\"\")\n          .process(client).getStatus());\n    } catch (SolrServerException | IOException e) {\n      throw new RuntimeException(e);\n    }\n    String nodeName = null;\n    for (JettySolrRunner jetty : jettys) {\n      if (client.getBaseURL().contains(\":\"+jetty.getLocalPort())) {\n        nodeName = jetty.getNodeName();\n        break;\n      }\n    }\n    assertNotNull(nodeName);\n    for (int i = 0; i < cnt; i++) {\n      final int freezeI = i;\n      final String freezeNodename = nodeName;\n      executor.execute(() -> {\n        try {\n          assertTrue(CollectionAdminRequest.addReplicaToShard(collection, \"shard\"+((freezeI%numShards)+1))\n              .setCoreName(collection + freezeI)\n              .setNode(freezeNodename).process(client).isSuccess());\n        } catch (SolrServerException | IOException e) {\n          throw new RuntimeException(e);\n        }\n      });\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c6e1dc1bb4254226c8d7151b596cc1be40671751":["bafca15d8e408346a67f4282ad1143b88023893b"],"197bbedf08450ade98a11f4a0001448059666bec":["c3d9a2e4ec5db2bc6cc023d9a1fd387ceb5b69b5"],"c3d9a2e4ec5db2bc6cc023d9a1fd387ceb5b69b5":["a9b4296bd51ca61b482138791478afdd0f7d3a3d"],"a9b4296bd51ca61b482138791478afdd0f7d3a3d":["3a0c04b71951333291abc7f317109a6a5957bd28"],"7871f9c286dce2a9370bcf517a3e7d12e3bd9602":["197bbedf08450ade98a11f4a0001448059666bec"],"30c8e5574b55d57947e989443dfde611646530ee":["fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4","28288370235ed02234a64753cdbf0c6ec096304a"],"bafca15d8e408346a67f4282ad1143b88023893b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["3a0c04b71951333291abc7f317109a6a5957bd28","c3d9a2e4ec5db2bc6cc023d9a1fd387ceb5b69b5"],"3a0c04b71951333291abc7f317109a6a5957bd28":["c6e1dc1bb4254226c8d7151b596cc1be40671751"],"28288370235ed02234a64753cdbf0c6ec096304a":["3a0c04b71951333291abc7f317109a6a5957bd28","7871f9c286dce2a9370bcf517a3e7d12e3bd9602"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","197bbedf08450ade98a11f4a0001448059666bec"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"c6e1dc1bb4254226c8d7151b596cc1be40671751":["3a0c04b71951333291abc7f317109a6a5957bd28"],"197bbedf08450ade98a11f4a0001448059666bec":["7871f9c286dce2a9370bcf517a3e7d12e3bd9602","fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4"],"c3d9a2e4ec5db2bc6cc023d9a1fd387ceb5b69b5":["197bbedf08450ade98a11f4a0001448059666bec","b7dfa64bc2074fb87d0ca70095a644c1ead107e1"],"a9b4296bd51ca61b482138791478afdd0f7d3a3d":["c3d9a2e4ec5db2bc6cc023d9a1fd387ceb5b69b5"],"7871f9c286dce2a9370bcf517a3e7d12e3bd9602":["28288370235ed02234a64753cdbf0c6ec096304a"],"30c8e5574b55d57947e989443dfde611646530ee":[],"bafca15d8e408346a67f4282ad1143b88023893b":["c6e1dc1bb4254226c8d7151b596cc1be40671751"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4"],"3a0c04b71951333291abc7f317109a6a5957bd28":["a9b4296bd51ca61b482138791478afdd0f7d3a3d","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"28288370235ed02234a64753cdbf0c6ec096304a":["30c8e5574b55d57947e989443dfde611646530ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bafca15d8e408346a67f4282ad1143b88023893b"],"fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4":["30c8e5574b55d57947e989443dfde611646530ee"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["30c8e5574b55d57947e989443dfde611646530ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}