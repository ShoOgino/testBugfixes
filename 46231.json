{"path":"lucene/src/java/org/apache/lucene/search/payloads/PayloadNearQuery#clone().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/payloads/PayloadNearQuery#clone().mjava","pathOld":"src/java/org/apache/lucene/search/payloads/PayloadNearQuery#clone().mjava","sourceNew":"  @Override\n  public Object clone() {\n    int sz = clauses.size();\n    SpanQuery[] newClauses = new SpanQuery[sz];\n\n    for (int i = 0; i < sz; i++) {\n      newClauses[i] = (SpanQuery) clauses.get(i).clone();\n    }\n    PayloadNearQuery boostingNearQuery = new PayloadNearQuery(newClauses, slop,\n        inOrder);\n    boostingNearQuery.setBoost(getBoost());\n    return boostingNearQuery;\n  }\n\n","sourceOld":"  @Override\n  public Object clone() {\n    int sz = clauses.size();\n    SpanQuery[] newClauses = new SpanQuery[sz];\n\n    for (int i = 0; i < sz; i++) {\n      newClauses[i] = (SpanQuery) clauses.get(i).clone();\n    }\n    PayloadNearQuery boostingNearQuery = new PayloadNearQuery(newClauses, slop,\n        inOrder);\n    boostingNearQuery.setBoost(getBoost());\n    return boostingNearQuery;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"63962b8b453f75ca481172689753cdb3ca868d4c","date":1283201927,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/payloads/PayloadNearQuery#clone().mjava","pathOld":"lucene/src/java/org/apache/lucene/search/payloads/PayloadNearQuery#clone().mjava","sourceNew":"  @Override\n  public Object clone() {\n    int sz = clauses.size();\n    SpanQuery[] newClauses = new SpanQuery[sz];\n\n    for (int i = 0; i < sz; i++) {\n      newClauses[i] = (SpanQuery) clauses.get(i).clone();\n    }\n    PayloadNearQuery boostingNearQuery = new PayloadNearQuery(newClauses, slop,\n        inOrder, function);\n    boostingNearQuery.setBoost(getBoost());\n    return boostingNearQuery;\n  }\n\n","sourceOld":"  @Override\n  public Object clone() {\n    int sz = clauses.size();\n    SpanQuery[] newClauses = new SpanQuery[sz];\n\n    for (int i = 0; i < sz; i++) {\n      newClauses[i] = (SpanQuery) clauses.get(i).clone();\n    }\n    PayloadNearQuery boostingNearQuery = new PayloadNearQuery(newClauses, slop,\n        inOrder);\n    boostingNearQuery.setBoost(getBoost());\n    return boostingNearQuery;\n  }\n\n","bugFix":["fa4f1b5e611afe6cb170951e0a9202ff95dc9156"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/payloads/PayloadNearQuery#clone().mjava","pathOld":"lucene/src/java/org/apache/lucene/search/payloads/PayloadNearQuery#clone().mjava","sourceNew":"  @Override\n  public Object clone() {\n    int sz = clauses.size();\n    SpanQuery[] newClauses = new SpanQuery[sz];\n\n    for (int i = 0; i < sz; i++) {\n      newClauses[i] = (SpanQuery) clauses.get(i).clone();\n    }\n    PayloadNearQuery boostingNearQuery = new PayloadNearQuery(newClauses, slop,\n        inOrder, function);\n    boostingNearQuery.setBoost(getBoost());\n    return boostingNearQuery;\n  }\n\n","sourceOld":"  @Override\n  public Object clone() {\n    int sz = clauses.size();\n    SpanQuery[] newClauses = new SpanQuery[sz];\n\n    for (int i = 0; i < sz; i++) {\n      newClauses[i] = (SpanQuery) clauses.get(i).clone();\n    }\n    PayloadNearQuery boostingNearQuery = new PayloadNearQuery(newClauses, slop,\n        inOrder);\n    boostingNearQuery.setBoost(getBoost());\n    return boostingNearQuery;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/payloads/PayloadNearQuery#clone().mjava","pathOld":"lucene/src/java/org/apache/lucene/search/payloads/PayloadNearQuery#clone().mjava","sourceNew":"  @Override\n  public Object clone() {\n    int sz = clauses.size();\n    SpanQuery[] newClauses = new SpanQuery[sz];\n\n    for (int i = 0; i < sz; i++) {\n      newClauses[i] = (SpanQuery) clauses.get(i).clone();\n    }\n    PayloadNearQuery boostingNearQuery = new PayloadNearQuery(newClauses, slop,\n        inOrder, function);\n    boostingNearQuery.setBoost(getBoost());\n    return boostingNearQuery;\n  }\n\n","sourceOld":"  @Override\n  public Object clone() {\n    int sz = clauses.size();\n    SpanQuery[] newClauses = new SpanQuery[sz];\n\n    for (int i = 0; i < sz; i++) {\n      newClauses[i] = (SpanQuery) clauses.get(i).clone();\n    }\n    PayloadNearQuery boostingNearQuery = new PayloadNearQuery(newClauses, slop,\n        inOrder, function);\n    boostingNearQuery.setBoost(getBoost());\n    return boostingNearQuery;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["63962b8b453f75ca481172689753cdb3ca868d4c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"63962b8b453f75ca481172689753cdb3ca868d4c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["9454a6510e2db155fb01faa5c049b06ece95fab9","63962b8b453f75ca481172689753cdb3ca868d4c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"63962b8b453f75ca481172689753cdb3ca868d4c":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["63962b8b453f75ca481172689753cdb3ca868d4c","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}