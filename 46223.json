{"path":"src/java/org/apache/solr/util/SuggestMissingFactories#main(String[]).mjava","commits":[{"id":"ff7c5f059d5a1dc549d20043d719ec940ef90bda","date":1194565212,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/solr/util/SuggestMissingFactories#main(String[]).mjava","pathOld":"/dev/null","sourceNew":"    public static void main(String[] args) throws ClassNotFoundException, IOException, NoSuchMethodException {\n\n        final File[] files = new File[args.length];\n        for (int i = 0; i < args.length; i++) {\n            files[i] = new File(args[i]);\n        }\n        final FindClasses finder = new FindClasses(files);\n        final ClassLoader cl = finder.getClassLoader();\n\n        final Class TOKENSTREAM\n            = cl.loadClass(\"org.apache.lucene.analysis.TokenStream\");\n        final Class TOKENIZER\n            = cl.loadClass(\"org.apache.lucene.analysis.Tokenizer\");\n        final Class TOKENFILTER\n            = cl.loadClass(\"org.apache.lucene.analysis.TokenFilter\");\n        final Class TOKENIZERFACTORY\n            = cl.loadClass(\"org.apache.solr.analysis.TokenizerFactory\");\n        final Class TOKENFILTERFACTORY\n            = cl.loadClass(\"org.apache.solr.analysis.TokenFilterFactory\");\n        \n        \n        final HashSet<Class> result\n            = new HashSet<Class>(finder.findExtends(TOKENIZER));\n        result.addAll(finder.findExtends(TOKENFILTER));\n        \n        result.removeAll(finder.findMethodReturns\n                         (finder.findExtends(TOKENIZERFACTORY),\n                          \"create\",\n                          Reader.class).values());\n        result.removeAll(finder.findMethodReturns\n                         (finder.findExtends(TOKENFILTERFACTORY),\n                          \"create\",\n                          TOKENSTREAM).values());\n        \n        for (final Class c : result) {\n            System.out.println(c.getName());\n        }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/util/SuggestMissingFactories#main(String[]).mjava","pathOld":"src/java/org/apache/solr/util/SuggestMissingFactories#main(String[]).mjava","sourceNew":"    public static void main(String[] args) throws ClassNotFoundException, IOException, NoSuchMethodException {\n\n        final File[] files = new File[args.length];\n        for (int i = 0; i < args.length; i++) {\n            files[i] = new File(args[i]);\n        }\n        final FindClasses finder = new FindClasses(files);\n        final ClassLoader cl = finder.getClassLoader();\n\n        final Class TOKENSTREAM\n            = cl.loadClass(\"org.apache.lucene.analysis.TokenStream\");\n        final Class TOKENIZER\n            = cl.loadClass(\"org.apache.lucene.analysis.Tokenizer\");\n        final Class TOKENFILTER\n            = cl.loadClass(\"org.apache.lucene.analysis.TokenFilter\");\n        final Class TOKENIZERFACTORY\n            = cl.loadClass(\"org.apache.solr.analysis.TokenizerFactory\");\n        final Class TOKENFILTERFACTORY\n            = cl.loadClass(\"org.apache.solr.analysis.TokenFilterFactory\");\n        \n        \n        final HashSet<Class> result\n            = new HashSet<Class>(finder.findExtends(TOKENIZER));\n        result.addAll(finder.findExtends(TOKENFILTER));\n        \n        result.removeAll(finder.findMethodReturns\n                         (finder.findExtends(TOKENIZERFACTORY),\n                          \"create\",\n                          Reader.class).values());\n        result.removeAll(finder.findMethodReturns\n                         (finder.findExtends(TOKENFILTERFACTORY),\n                          \"create\",\n                          TOKENSTREAM).values());\n        \n        for (final Class c : result) {\n            System.out.println(c.getName());\n        }\n    }\n\n","sourceOld":"    public static void main(String[] args) throws ClassNotFoundException, IOException, NoSuchMethodException {\n\n        final File[] files = new File[args.length];\n        for (int i = 0; i < args.length; i++) {\n            files[i] = new File(args[i]);\n        }\n        final FindClasses finder = new FindClasses(files);\n        final ClassLoader cl = finder.getClassLoader();\n\n        final Class TOKENSTREAM\n            = cl.loadClass(\"org.apache.lucene.analysis.TokenStream\");\n        final Class TOKENIZER\n            = cl.loadClass(\"org.apache.lucene.analysis.Tokenizer\");\n        final Class TOKENFILTER\n            = cl.loadClass(\"org.apache.lucene.analysis.TokenFilter\");\n        final Class TOKENIZERFACTORY\n            = cl.loadClass(\"org.apache.solr.analysis.TokenizerFactory\");\n        final Class TOKENFILTERFACTORY\n            = cl.loadClass(\"org.apache.solr.analysis.TokenFilterFactory\");\n        \n        \n        final HashSet<Class> result\n            = new HashSet<Class>(finder.findExtends(TOKENIZER));\n        result.addAll(finder.findExtends(TOKENFILTER));\n        \n        result.removeAll(finder.findMethodReturns\n                         (finder.findExtends(TOKENIZERFACTORY),\n                          \"create\",\n                          Reader.class).values());\n        result.removeAll(finder.findMethodReturns\n                         (finder.findExtends(TOKENFILTERFACTORY),\n                          \"create\",\n                          TOKENSTREAM).values());\n        \n        for (final Class c : result) {\n            System.out.println(c.getName());\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ff7c5f059d5a1dc549d20043d719ec940ef90bda":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["ff7c5f059d5a1dc549d20043d719ec940ef90bda"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ff7c5f059d5a1dc549d20043d719ec940ef90bda":["ad94625fb8d088209f46650c8097196fec67f00c"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ff7c5f059d5a1dc549d20043d719ec940ef90bda"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}