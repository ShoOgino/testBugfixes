{"path":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/ContentSource#getInputStream(File).mjava","commits":[{"id":"ecc11368dc265bfdad90214f8bf5da99016ab1e2","date":1294144090,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/ContentSource#getInputStream(File).mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/ContentSource#getInputStream(File).mjava","sourceNew":"  /**\n   * Returns an {@link InputStream} over the requested file. This method\n   * attempts to identify the appropriate {@link InputStream} instance to return\n   * based on the file name (e.g., if it ends with .bz2 or .bzip, return a\n   * 'bzip' {@link InputStream}).\n   */\n  protected InputStream getInputStream(File file) throws IOException {\n    // First, create a FileInputStream, as this will be required by all types.\n    // Wrap with BufferedInputStream for better performance\n    InputStream is = new BufferedInputStream(new FileInputStream(file), BUFFER_SIZE);\n    \n    String fileName = file.getName();\n    int idx = fileName.lastIndexOf('.');\n    int type = OTHER;\n    if (idx != -1) {\n      Integer typeInt = extensionToType.get(fileName.substring(idx));\n      if (typeInt != null) {\n        type = typeInt.intValue();\n      }\n    }\n    switch (type) {\n      case BZIP:\n        try {\n          // According to BZip2CompressorInputStream's code, it reads the first \n          // two file header chars ('B' and 'Z'). It is important to wrap the\n          // underlying input stream with a buffered one since\n          // Bzip2CompressorInputStream uses the read() method exclusively.\n          is = csFactory.createCompressorInputStream(\"bzip2\", is);\n        } catch (CompressorException e) {\n          IOException ioe = new IOException(e.getMessage());\n          ioe.initCause(e);\n          throw ioe;\n        }\n        break;\n      default: // Do nothing, stay with FileInputStream\n    }\n    \n    return is;\n  }\n\n","sourceOld":"  /**\n   * Returns an {@link InputStream} over the requested file. This method\n   * attempts to identify the appropriate {@link InputStream} instance to return\n   * based on the file name (e.g., if it ends with .bz2 or .bzip, return a\n   * 'bzip' {@link InputStream}).\n   */\n  protected InputStream getInputStream(File file) throws IOException {\n    // First, create a FileInputStream, as this will be required by all types.\n    // Wrap with BufferedInputStream for better performance\n    InputStream is = new BufferedInputStream(new FileInputStream(file), BUFFER_SIZE);\n    \n    String fileName = file.getName();\n    int idx = fileName.lastIndexOf('.');\n    int type = OTHER;\n    if (idx != -1) {\n      Integer typeInt = extensionToType.get(fileName.substring(idx));\n      if (typeInt != null) {\n        type = typeInt.intValue();\n      }\n    }\n    switch (type) {\n      case BZIP:\n        try {\n          // According to BZip2CompressorInputStream's code, it reads the first \n          // two file header chars ('B' and 'Z'). It is important to wrap the\n          // underlying input stream with a buffered one since\n          // Bzip2CompressorInputStream uses the read() method exclusively.\n          is = csFactory.createCompressorInputStream(\"bzip2\", is);\n        } catch (CompressorException e) {\n          IOException ioe = new IOException(e.getMessage());\n          ioe.initCause(e);\n          throw ioe;\n        }\n        break;\n      default: // Do nothing, stay with FileInputStream\n    }\n    \n    return is;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/ContentSource#getInputStream(File).mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/ContentSource#getInputStream(File).mjava","sourceNew":"  /**\n   * Returns an {@link InputStream} over the requested file. This method\n   * attempts to identify the appropriate {@link InputStream} instance to return\n   * based on the file name (e.g., if it ends with .bz2 or .bzip, return a\n   * 'bzip' {@link InputStream}).\n   */\n  protected InputStream getInputStream(File file) throws IOException {\n    // First, create a FileInputStream, as this will be required by all types.\n    // Wrap with BufferedInputStream for better performance\n    InputStream is = new BufferedInputStream(new FileInputStream(file), BUFFER_SIZE);\n    \n    String fileName = file.getName();\n    int idx = fileName.lastIndexOf('.');\n    int type = OTHER;\n    if (idx != -1) {\n      Integer typeInt = extensionToType.get(fileName.substring(idx));\n      if (typeInt != null) {\n        type = typeInt.intValue();\n      }\n    }\n    switch (type) {\n      case BZIP:\n        try {\n          // According to BZip2CompressorInputStream's code, it reads the first \n          // two file header chars ('B' and 'Z'). It is important to wrap the\n          // underlying input stream with a buffered one since\n          // Bzip2CompressorInputStream uses the read() method exclusively.\n          is = csFactory.createCompressorInputStream(\"bzip2\", is);\n        } catch (CompressorException e) {\n          IOException ioe = new IOException(e.getMessage());\n          ioe.initCause(e);\n          throw ioe;\n        }\n        break;\n      default: // Do nothing, stay with FileInputStream\n    }\n    \n    return is;\n  }\n\n","sourceOld":"  /**\n   * Returns an {@link InputStream} over the requested file. This method\n   * attempts to identify the appropriate {@link InputStream} instance to return\n   * based on the file name (e.g., if it ends with .bz2 or .bzip, return a\n   * 'bzip' {@link InputStream}).\n   */\n  protected InputStream getInputStream(File file) throws IOException {\n    // First, create a FileInputStream, as this will be required by all types.\n    // Wrap with BufferedInputStream for better performance\n    InputStream is = new BufferedInputStream(new FileInputStream(file), BUFFER_SIZE);\n    \n    String fileName = file.getName();\n    int idx = fileName.lastIndexOf('.');\n    int type = OTHER;\n    if (idx != -1) {\n      Integer typeInt = extensionToType.get(fileName.substring(idx));\n      if (typeInt != null) {\n        type = typeInt.intValue();\n      }\n    }\n    switch (type) {\n      case BZIP:\n        try {\n          // According to BZip2CompressorInputStream's code, it reads the first \n          // two file header chars ('B' and 'Z'). It is important to wrap the\n          // underlying input stream with a buffered one since\n          // Bzip2CompressorInputStream uses the read() method exclusively.\n          is = csFactory.createCompressorInputStream(\"bzip2\", is);\n        } catch (CompressorException e) {\n          IOException ioe = new IOException(e.getMessage());\n          ioe.initCause(e);\n          throw ioe;\n        }\n        break;\n      default: // Do nothing, stay with FileInputStream\n    }\n    \n    return is;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":1,"author":"Michael Busch","isMerge":true,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/ContentSource#getInputStream(File).mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/ContentSource#getInputStream(File).mjava","sourceNew":"  /**\n   * Returns an {@link InputStream} over the requested file. This method\n   * attempts to identify the appropriate {@link InputStream} instance to return\n   * based on the file name (e.g., if it ends with .bz2 or .bzip, return a\n   * 'bzip' {@link InputStream}).\n   */\n  protected InputStream getInputStream(File file) throws IOException {\n    // First, create a FileInputStream, as this will be required by all types.\n    // Wrap with BufferedInputStream for better performance\n    InputStream is = new BufferedInputStream(new FileInputStream(file), BUFFER_SIZE);\n    \n    String fileName = file.getName();\n    int idx = fileName.lastIndexOf('.');\n    int type = OTHER;\n    if (idx != -1) {\n      Integer typeInt = extensionToType.get(fileName.substring(idx));\n      if (typeInt != null) {\n        type = typeInt.intValue();\n      }\n    }\n    switch (type) {\n      case BZIP:\n        try {\n          // According to BZip2CompressorInputStream's code, it reads the first \n          // two file header chars ('B' and 'Z'). It is important to wrap the\n          // underlying input stream with a buffered one since\n          // Bzip2CompressorInputStream uses the read() method exclusively.\n          is = csFactory.createCompressorInputStream(\"bzip2\", is);\n        } catch (CompressorException e) {\n          IOException ioe = new IOException(e.getMessage());\n          ioe.initCause(e);\n          throw ioe;\n        }\n        break;\n      default: // Do nothing, stay with FileInputStream\n    }\n    \n    return is;\n  }\n\n","sourceOld":"  /**\n   * Returns an {@link InputStream} over the requested file. This method\n   * attempts to identify the appropriate {@link InputStream} instance to return\n   * based on the file name (e.g., if it ends with .bz2 or .bzip, return a\n   * 'bzip' {@link InputStream}).\n   */\n  protected InputStream getInputStream(File file) throws IOException {\n    // First, create a FileInputStream, as this will be required by all types.\n    // Wrap with BufferedInputStream for better performance\n    InputStream is = new BufferedInputStream(new FileInputStream(file), BUFFER_SIZE);\n    \n    String fileName = file.getName();\n    int idx = fileName.lastIndexOf('.');\n    int type = OTHER;\n    if (idx != -1) {\n      Integer typeInt = extensionToType.get(fileName.substring(idx));\n      if (typeInt != null) {\n        type = typeInt.intValue();\n      }\n    }\n    switch (type) {\n      case BZIP:\n        try {\n          // According to BZip2CompressorInputStream's code, it reads the first \n          // two file header chars ('B' and 'Z'). It is important to wrap the\n          // underlying input stream with a buffered one since\n          // Bzip2CompressorInputStream uses the read() method exclusively.\n          is = csFactory.createCompressorInputStream(\"bzip2\", is);\n        } catch (CompressorException e) {\n          IOException ioe = new IOException(e.getMessage());\n          ioe.initCause(e);\n          throw ioe;\n        }\n        break;\n      default: // Do nothing, stay with FileInputStream\n    }\n    \n    return is;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cdad2c6b6234338031bcc1f24c001a5ad66f714","date":1296866109,"type":3,"author":"Doron Cohen","isMerge":false,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/ContentSource#getInputStream(File).mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/ContentSource#getInputStream(File).mjava","sourceNew":"  /**\n   * Returns an {@link InputStream} over the requested file. This method\n   * attempts to identify the appropriate {@link InputStream} instance to return\n   * based on the file name (e.g., if it ends with .bz2 or .bzip, return a\n   * 'bzip' {@link InputStream}).\n   */\n  protected InputStream getInputStream(File file) throws IOException {\n    // First, create a FileInputStream, as this will be required by all types.\n    // Wrap with BufferedInputStream for better performance\n    InputStream is = new BufferedInputStream(new FileInputStream(file), BUFFER_SIZE);\n    \n    String fileName = file.getName();\n    int idx = fileName.lastIndexOf('.');\n    int type = OTHER;\n    if (idx != -1) {\n      Integer typeInt = extensionToType.get(fileName.substring(idx));\n      if (typeInt != null) {\n        type = typeInt.intValue();\n      }\n    }\n    \n    try {\n      switch (type) {\n        case BZIP:\n          // According to BZip2CompressorInputStream's code, it reads the first \n          // two file header chars ('B' and 'Z'). It is important to wrap the\n          // underlying input stream with a buffered one since\n          // Bzip2CompressorInputStream uses the read() method exclusively.\n          is = csFactory.createCompressorInputStream(\"bzip2\", is);\n          break;\n        case GZIP:\n          is = csFactory.createCompressorInputStream(\"gz\", is);\n          break;\n        default: // Do nothing, stay with FileInputStream\n      }\n    } catch (CompressorException e) {\n      IOException ioe = new IOException(e.getMessage());\n      ioe.initCause(e);\n      throw ioe;\n    }\n    \n    return is;\n  }\n\n","sourceOld":"  /**\n   * Returns an {@link InputStream} over the requested file. This method\n   * attempts to identify the appropriate {@link InputStream} instance to return\n   * based on the file name (e.g., if it ends with .bz2 or .bzip, return a\n   * 'bzip' {@link InputStream}).\n   */\n  protected InputStream getInputStream(File file) throws IOException {\n    // First, create a FileInputStream, as this will be required by all types.\n    // Wrap with BufferedInputStream for better performance\n    InputStream is = new BufferedInputStream(new FileInputStream(file), BUFFER_SIZE);\n    \n    String fileName = file.getName();\n    int idx = fileName.lastIndexOf('.');\n    int type = OTHER;\n    if (idx != -1) {\n      Integer typeInt = extensionToType.get(fileName.substring(idx));\n      if (typeInt != null) {\n        type = typeInt.intValue();\n      }\n    }\n    switch (type) {\n      case BZIP:\n        try {\n          // According to BZip2CompressorInputStream's code, it reads the first \n          // two file header chars ('B' and 'Z'). It is important to wrap the\n          // underlying input stream with a buffered one since\n          // Bzip2CompressorInputStream uses the read() method exclusively.\n          is = csFactory.createCompressorInputStream(\"bzip2\", is);\n        } catch (CompressorException e) {\n          IOException ioe = new IOException(e.getMessage());\n          ioe.initCause(e);\n          throw ioe;\n        }\n        break;\n      default: // Do nothing, stay with FileInputStream\n    }\n    \n    return is;\n  }\n\n","bugFix":null,"bugIntro":["0a728e6e6c222914ca604e0d6d00c793f1460afe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/ContentSource#getInputStream(File).mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/ContentSource#getInputStream(File).mjava","sourceNew":"  /**\n   * Returns an {@link InputStream} over the requested file. This method\n   * attempts to identify the appropriate {@link InputStream} instance to return\n   * based on the file name (e.g., if it ends with .bz2 or .bzip, return a\n   * 'bzip' {@link InputStream}).\n   */\n  protected InputStream getInputStream(File file) throws IOException {\n    // First, create a FileInputStream, as this will be required by all types.\n    // Wrap with BufferedInputStream for better performance\n    InputStream is = new BufferedInputStream(new FileInputStream(file), BUFFER_SIZE);\n    \n    String fileName = file.getName();\n    int idx = fileName.lastIndexOf('.');\n    int type = OTHER;\n    if (idx != -1) {\n      Integer typeInt = extensionToType.get(fileName.substring(idx));\n      if (typeInt != null) {\n        type = typeInt.intValue();\n      }\n    }\n    \n    try {\n      switch (type) {\n        case BZIP:\n          // According to BZip2CompressorInputStream's code, it reads the first \n          // two file header chars ('B' and 'Z'). It is important to wrap the\n          // underlying input stream with a buffered one since\n          // Bzip2CompressorInputStream uses the read() method exclusively.\n          is = csFactory.createCompressorInputStream(\"bzip2\", is);\n          break;\n        case GZIP:\n          is = csFactory.createCompressorInputStream(\"gz\", is);\n          break;\n        default: // Do nothing, stay with FileInputStream\n      }\n    } catch (CompressorException e) {\n      IOException ioe = new IOException(e.getMessage());\n      ioe.initCause(e);\n      throw ioe;\n    }\n    \n    return is;\n  }\n\n","sourceOld":"  /**\n   * Returns an {@link InputStream} over the requested file. This method\n   * attempts to identify the appropriate {@link InputStream} instance to return\n   * based on the file name (e.g., if it ends with .bz2 or .bzip, return a\n   * 'bzip' {@link InputStream}).\n   */\n  protected InputStream getInputStream(File file) throws IOException {\n    // First, create a FileInputStream, as this will be required by all types.\n    // Wrap with BufferedInputStream for better performance\n    InputStream is = new BufferedInputStream(new FileInputStream(file), BUFFER_SIZE);\n    \n    String fileName = file.getName();\n    int idx = fileName.lastIndexOf('.');\n    int type = OTHER;\n    if (idx != -1) {\n      Integer typeInt = extensionToType.get(fileName.substring(idx));\n      if (typeInt != null) {\n        type = typeInt.intValue();\n      }\n    }\n    switch (type) {\n      case BZIP:\n        try {\n          // According to BZip2CompressorInputStream's code, it reads the first \n          // two file header chars ('B' and 'Z'). It is important to wrap the\n          // underlying input stream with a buffered one since\n          // Bzip2CompressorInputStream uses the read() method exclusively.\n          is = csFactory.createCompressorInputStream(\"bzip2\", is);\n        } catch (CompressorException e) {\n          IOException ioe = new IOException(e.getMessage());\n          ioe.initCause(e);\n          throw ioe;\n        }\n        break;\n      default: // Do nothing, stay with FileInputStream\n    }\n    \n    return is;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/ContentSource#getInputStream(File).mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/ContentSource#getInputStream(File).mjava","sourceNew":"  /**\n   * Returns an {@link InputStream} over the requested file. This method\n   * attempts to identify the appropriate {@link InputStream} instance to return\n   * based on the file name (e.g., if it ends with .bz2 or .bzip, return a\n   * 'bzip' {@link InputStream}).\n   */\n  protected InputStream getInputStream(File file) throws IOException {\n    // First, create a FileInputStream, as this will be required by all types.\n    // Wrap with BufferedInputStream for better performance\n    InputStream is = new BufferedInputStream(new FileInputStream(file), BUFFER_SIZE);\n    \n    String fileName = file.getName();\n    int idx = fileName.lastIndexOf('.');\n    int type = OTHER;\n    if (idx != -1) {\n      Integer typeInt = extensionToType.get(fileName.substring(idx));\n      if (typeInt != null) {\n        type = typeInt.intValue();\n      }\n    }\n    \n    try {\n      switch (type) {\n        case BZIP:\n          // According to BZip2CompressorInputStream's code, it reads the first \n          // two file header chars ('B' and 'Z'). It is important to wrap the\n          // underlying input stream with a buffered one since\n          // Bzip2CompressorInputStream uses the read() method exclusively.\n          is = csFactory.createCompressorInputStream(\"bzip2\", is);\n          break;\n        case GZIP:\n          is = csFactory.createCompressorInputStream(\"gz\", is);\n          break;\n        default: // Do nothing, stay with FileInputStream\n      }\n    } catch (CompressorException e) {\n      IOException ioe = new IOException(e.getMessage());\n      ioe.initCause(e);\n      throw ioe;\n    }\n    \n    return is;\n  }\n\n","sourceOld":"  /**\n   * Returns an {@link InputStream} over the requested file. This method\n   * attempts to identify the appropriate {@link InputStream} instance to return\n   * based on the file name (e.g., if it ends with .bz2 or .bzip, return a\n   * 'bzip' {@link InputStream}).\n   */\n  protected InputStream getInputStream(File file) throws IOException {\n    // First, create a FileInputStream, as this will be required by all types.\n    // Wrap with BufferedInputStream for better performance\n    InputStream is = new BufferedInputStream(new FileInputStream(file), BUFFER_SIZE);\n    \n    String fileName = file.getName();\n    int idx = fileName.lastIndexOf('.');\n    int type = OTHER;\n    if (idx != -1) {\n      Integer typeInt = extensionToType.get(fileName.substring(idx));\n      if (typeInt != null) {\n        type = typeInt.intValue();\n      }\n    }\n    switch (type) {\n      case BZIP:\n        try {\n          // According to BZip2CompressorInputStream's code, it reads the first \n          // two file header chars ('B' and 'Z'). It is important to wrap the\n          // underlying input stream with a buffered one since\n          // Bzip2CompressorInputStream uses the read() method exclusively.\n          is = csFactory.createCompressorInputStream(\"bzip2\", is);\n        } catch (CompressorException e) {\n          IOException ioe = new IOException(e.getMessage());\n          ioe.initCause(e);\n          throw ioe;\n        }\n        break;\n      default: // Do nothing, stay with FileInputStream\n    }\n    \n    return is;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0a728e6e6c222914ca604e0d6d00c793f1460afe","date":1300806509,"type":3,"author":"Doron Cohen","isMerge":false,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/ContentSource#getInputStream(File).mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/ContentSource#getInputStream(File).mjava","sourceNew":"  /**\n   * Returns an {@link InputStream} over the requested file. This method\n   * attempts to identify the appropriate {@link InputStream} instance to return\n   * based on the file name (e.g., if it ends with .bz2 or .bzip, return a\n   * 'bzip' {@link InputStream}).\n   */\n  protected InputStream getInputStream(File file) throws IOException {\n    // First, create a FileInputStream, as this will be required by all types.\n    // Wrap with BufferedInputStream for better performance\n    InputStream is = new BufferedInputStream(new FileInputStream(file), BUFFER_SIZE);\n    \n    String fileName = file.getName();\n    int idx = fileName.lastIndexOf('.');\n    String type = null;\n    if (idx != -1) {\n      type = extensionToType.get(fileName.substring(idx));\n    }\n    \n    try {\n      if (type!=null) { // bzip or gzip\n        return csFactory.createCompressorInputStream(type, is);\n      } \n    } catch (CompressorException e) {\n      IOException ioe = new IOException(e.getMessage());\n      ioe.initCause(e);\n      throw ioe;\n    }\n    \n    return is;\n  }\n\n","sourceOld":"  /**\n   * Returns an {@link InputStream} over the requested file. This method\n   * attempts to identify the appropriate {@link InputStream} instance to return\n   * based on the file name (e.g., if it ends with .bz2 or .bzip, return a\n   * 'bzip' {@link InputStream}).\n   */\n  protected InputStream getInputStream(File file) throws IOException {\n    // First, create a FileInputStream, as this will be required by all types.\n    // Wrap with BufferedInputStream for better performance\n    InputStream is = new BufferedInputStream(new FileInputStream(file), BUFFER_SIZE);\n    \n    String fileName = file.getName();\n    int idx = fileName.lastIndexOf('.');\n    int type = OTHER;\n    if (idx != -1) {\n      Integer typeInt = extensionToType.get(fileName.substring(idx));\n      if (typeInt != null) {\n        type = typeInt.intValue();\n      }\n    }\n    \n    try {\n      switch (type) {\n        case BZIP:\n          // According to BZip2CompressorInputStream's code, it reads the first \n          // two file header chars ('B' and 'Z'). It is important to wrap the\n          // underlying input stream with a buffered one since\n          // Bzip2CompressorInputStream uses the read() method exclusively.\n          is = csFactory.createCompressorInputStream(\"bzip2\", is);\n          break;\n        case GZIP:\n          is = csFactory.createCompressorInputStream(\"gz\", is);\n          break;\n        default: // Do nothing, stay with FileInputStream\n      }\n    } catch (CompressorException e) {\n      IOException ioe = new IOException(e.getMessage());\n      ioe.initCause(e);\n      throw ioe;\n    }\n    \n    return is;\n  }\n\n","bugFix":["6944b9fa6d8ef96b83ae2d3a4332d03b3857355b","ffdf794cee8d43eb612df752c592cef2dc3e75ae","3cdad2c6b6234338031bcc1f24c001a5ad66f714"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e13cbdcbf4f1d6970554a8496fbb1d9a92f23c3c","date":1300880334,"type":3,"author":"Doron Cohen","isMerge":false,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/ContentSource#getInputStream(File).mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/ContentSource#getInputStream(File).mjava","sourceNew":"  /**\n   * Returns an {@link InputStream} over the requested file. This method\n   * attempts to identify the appropriate {@link InputStream} instance to return\n   * based on the file name (e.g., if it ends with .bz2 or .bzip, return a\n   * 'bzip' {@link InputStream}).\n   */\n  protected InputStream getInputStream(File file) throws IOException {\n    // First, create a FileInputStream, as this will be required by all types.\n    // Wrap with BufferedInputStream for better performance\n    InputStream is = new BufferedInputStream(new FileInputStream(file), BUFFER_SIZE);\n    \n    String fileName = file.getName();\n    int idx = fileName.lastIndexOf('.');\n    String type = null;\n    if (idx != -1) {\n      type = extensionToType.get(fileName.substring(idx).toLowerCase(Locale.ENGLISH));\n    }\n    \n    if (type!=null) { // bzip or gzip\n    \ttry {\n    \t\treturn closableCompressorInputStream(type,is);\n    \t} catch (CompressorException e) {\n    \t\tIOException ioe = new IOException(e.getMessage());\n    \t\tioe.initCause(e);\n    \t\tthrow ioe;\n    \t}\n    } \n    \n    return is;\n  }\n\n","sourceOld":"  /**\n   * Returns an {@link InputStream} over the requested file. This method\n   * attempts to identify the appropriate {@link InputStream} instance to return\n   * based on the file name (e.g., if it ends with .bz2 or .bzip, return a\n   * 'bzip' {@link InputStream}).\n   */\n  protected InputStream getInputStream(File file) throws IOException {\n    // First, create a FileInputStream, as this will be required by all types.\n    // Wrap with BufferedInputStream for better performance\n    InputStream is = new BufferedInputStream(new FileInputStream(file), BUFFER_SIZE);\n    \n    String fileName = file.getName();\n    int idx = fileName.lastIndexOf('.');\n    String type = null;\n    if (idx != -1) {\n      type = extensionToType.get(fileName.substring(idx));\n    }\n    \n    try {\n      if (type!=null) { // bzip or gzip\n        return csFactory.createCompressorInputStream(type, is);\n      } \n    } catch (CompressorException e) {\n      IOException ioe = new IOException(e.getMessage());\n      ioe.initCause(e);\n      throw ioe;\n    }\n    \n    return is;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6e2944372726ed00fc05229687367002194c6c81","date":1300969333,"type":5,"author":"Doron Cohen","isMerge":false,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/StreamUtils#inputStream(File).mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/ContentSource#getInputStream(File).mjava","sourceNew":"  /**\n   * Returns an {@link InputStream} over the requested file. This method\n   * attempts to identify the appropriate {@link InputStream} instance to return\n   * based on the file name (e.g., if it ends with .bz2 or .bzip, return a\n   * 'bzip' {@link InputStream}).\n   */\n  public static InputStream inputStream(File file) throws IOException {\n    // First, create a FileInputStream, as this will be required by all types.\n    // Wrap with BufferedInputStream for better performance\n    InputStream in = new BufferedInputStream(new FileInputStream(file), BUFFER_SIZE);\n    return fileType(file).inputStream(in);\n  }\n\n","sourceOld":"  /**\n   * Returns an {@link InputStream} over the requested file. This method\n   * attempts to identify the appropriate {@link InputStream} instance to return\n   * based on the file name (e.g., if it ends with .bz2 or .bzip, return a\n   * 'bzip' {@link InputStream}).\n   */\n  protected InputStream getInputStream(File file) throws IOException {\n    // First, create a FileInputStream, as this will be required by all types.\n    // Wrap with BufferedInputStream for better performance\n    InputStream is = new BufferedInputStream(new FileInputStream(file), BUFFER_SIZE);\n    \n    String fileName = file.getName();\n    int idx = fileName.lastIndexOf('.');\n    String type = null;\n    if (idx != -1) {\n      type = extensionToType.get(fileName.substring(idx).toLowerCase(Locale.ENGLISH));\n    }\n    \n    if (type!=null) { // bzip or gzip\n    \ttry {\n    \t\treturn closableCompressorInputStream(type,is);\n    \t} catch (CompressorException e) {\n    \t\tIOException ioe = new IOException(e.getMessage());\n    \t\tioe.initCause(e);\n    \t\tthrow ioe;\n    \t}\n    } \n    \n    return is;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/ContentSource#getInputStream(File).mjava","sourceNew":null,"sourceOld":"  /**\n   * Returns an {@link InputStream} over the requested file. This method\n   * attempts to identify the appropriate {@link InputStream} instance to return\n   * based on the file name (e.g., if it ends with .bz2 or .bzip, return a\n   * 'bzip' {@link InputStream}).\n   */\n  protected InputStream getInputStream(File file) throws IOException {\n    // First, create a FileInputStream, as this will be required by all types.\n    // Wrap with BufferedInputStream for better performance\n    InputStream is = new BufferedInputStream(new FileInputStream(file), BUFFER_SIZE);\n    \n    String fileName = file.getName();\n    int idx = fileName.lastIndexOf('.');\n    int type = OTHER;\n    if (idx != -1) {\n      Integer typeInt = extensionToType.get(fileName.substring(idx));\n      if (typeInt != null) {\n        type = typeInt.intValue();\n      }\n    }\n    \n    try {\n      switch (type) {\n        case BZIP:\n          // According to BZip2CompressorInputStream's code, it reads the first \n          // two file header chars ('B' and 'Z'). It is important to wrap the\n          // underlying input stream with a buffered one since\n          // Bzip2CompressorInputStream uses the read() method exclusively.\n          is = csFactory.createCompressorInputStream(\"bzip2\", is);\n          break;\n        case GZIP:\n          is = csFactory.createCompressorInputStream(\"gz\", is);\n          break;\n        default: // Do nothing, stay with FileInputStream\n      }\n    } catch (CompressorException e) {\n      IOException ioe = new IOException(e.getMessage());\n      ioe.initCause(e);\n      throw ioe;\n    }\n    \n    return is;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/ContentSource#getInputStream(File).mjava","sourceNew":null,"sourceOld":"  /**\n   * Returns an {@link InputStream} over the requested file. This method\n   * attempts to identify the appropriate {@link InputStream} instance to return\n   * based on the file name (e.g., if it ends with .bz2 or .bzip, return a\n   * 'bzip' {@link InputStream}).\n   */\n  protected InputStream getInputStream(File file) throws IOException {\n    // First, create a FileInputStream, as this will be required by all types.\n    // Wrap with BufferedInputStream for better performance\n    InputStream is = new BufferedInputStream(new FileInputStream(file), BUFFER_SIZE);\n    \n    String fileName = file.getName();\n    int idx = fileName.lastIndexOf('.');\n    int type = OTHER;\n    if (idx != -1) {\n      Integer typeInt = extensionToType.get(fileName.substring(idx));\n      if (typeInt != null) {\n        type = typeInt.intValue();\n      }\n    }\n    \n    try {\n      switch (type) {\n        case BZIP:\n          // According to BZip2CompressorInputStream's code, it reads the first \n          // two file header chars ('B' and 'Z'). It is important to wrap the\n          // underlying input stream with a buffered one since\n          // Bzip2CompressorInputStream uses the read() method exclusively.\n          is = csFactory.createCompressorInputStream(\"bzip2\", is);\n          break;\n        case GZIP:\n          is = csFactory.createCompressorInputStream(\"gz\", is);\n          break;\n        default: // Do nothing, stay with FileInputStream\n      }\n    } catch (CompressorException e) {\n      IOException ioe = new IOException(e.getMessage());\n      ioe.initCause(e);\n      throw ioe;\n    }\n    \n    return is;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"e13cbdcbf4f1d6970554a8496fbb1d9a92f23c3c":["0a728e6e6c222914ca604e0d6d00c793f1460afe"],"3cdad2c6b6234338031bcc1f24c001a5ad66f714":["ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"0a728e6e6c222914ca604e0d6d00c793f1460afe":["3cdad2c6b6234338031bcc1f24c001a5ad66f714"],"ecc11368dc265bfdad90214f8bf5da99016ab1e2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["bde51b089eb7f86171eb3406e38a274743f9b7ac","6e2944372726ed00fc05229687367002194c6c81"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["29ef99d61cda9641b6250bf9567329a6e65f901d","6e2944372726ed00fc05229687367002194c6c81"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["70ad682703b8585f5d0a637efec044d57ec05efb","3cdad2c6b6234338031bcc1f24c001a5ad66f714"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"868da859b43505d9d2a023bfeae6dd0c795f5295":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["868da859b43505d9d2a023bfeae6dd0c795f5295","3cdad2c6b6234338031bcc1f24c001a5ad66f714"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6e2944372726ed00fc05229687367002194c6c81"],"6e2944372726ed00fc05229687367002194c6c81":["e13cbdcbf4f1d6970554a8496fbb1d9a92f23c3c"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"e13cbdcbf4f1d6970554a8496fbb1d9a92f23c3c":["6e2944372726ed00fc05229687367002194c6c81"],"3cdad2c6b6234338031bcc1f24c001a5ad66f714":["0a728e6e6c222914ca604e0d6d00c793f1460afe","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"0a728e6e6c222914ca604e0d6d00c793f1460afe":["e13cbdcbf4f1d6970554a8496fbb1d9a92f23c3c"],"ecc11368dc265bfdad90214f8bf5da99016ab1e2":["70ad682703b8585f5d0a637efec044d57ec05efb","3cdad2c6b6234338031bcc1f24c001a5ad66f714","868da859b43505d9d2a023bfeae6dd0c795f5295"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":[],"d619839baa8ce5503e496b94a9e42ad6f079293f":[],"29ef99d61cda9641b6250bf9567329a6e65f901d":["d619839baa8ce5503e496b94a9e42ad6f079293f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["70ad682703b8585f5d0a637efec044d57ec05efb","ecc11368dc265bfdad90214f8bf5da99016ab1e2","868da859b43505d9d2a023bfeae6dd0c795f5295"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df"],"6e2944372726ed00fc05229687367002194c6c81":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}