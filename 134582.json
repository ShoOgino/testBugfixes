{"path":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#dropDeletedSegment(SegmentCommitInfo).mjava","commits":[{"id":"f4363cd33f6eff7fb4753574a441e2d18c1022a4","date":1498067235,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#dropDeletedSegment(SegmentCommitInfo).mjava","pathOld":"/dev/null","sourceNew":"  /** Drops a segment that has 100% deleted documents. */\n  synchronized void dropDeletedSegment(SegmentCommitInfo info) throws IOException {\n    // If a merge has already registered for this\n    // segment, we leave it in the readerPool; the\n    // merge will skip merging it and will then drop\n    // it once it's done:\n    if (mergingSegments.contains(info) == false) {\n      segmentInfos.remove(info);\n      pendingNumDocs.addAndGet(-info.info.maxDoc());\n      readerPool.drop(info);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["fdc3f2b9a4e1c1aacfa53b304c4e42c13a1677ef"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#dropDeletedSegment(SegmentCommitInfo).mjava","pathOld":"/dev/null","sourceNew":"  /** Drops a segment that has 100% deleted documents. */\n  synchronized void dropDeletedSegment(SegmentCommitInfo info) throws IOException {\n    // If a merge has already registered for this\n    // segment, we leave it in the readerPool; the\n    // merge will skip merging it and will then drop\n    // it once it's done:\n    if (mergingSegments.contains(info) == false) {\n      segmentInfos.remove(info);\n      pendingNumDocs.addAndGet(-info.info.maxDoc());\n      readerPool.drop(info);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#dropDeletedSegment(SegmentCommitInfo).mjava","pathOld":"/dev/null","sourceNew":"  /** Drops a segment that has 100% deleted documents. */\n  synchronized void dropDeletedSegment(SegmentCommitInfo info) throws IOException {\n    // If a merge has already registered for this\n    // segment, we leave it in the readerPool; the\n    // merge will skip merging it and will then drop\n    // it once it's done:\n    if (mergingSegments.contains(info) == false) {\n      segmentInfos.remove(info);\n      pendingNumDocs.addAndGet(-info.info.maxDoc());\n      readerPool.drop(info);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fdc3f2b9a4e1c1aacfa53b304c4e42c13a1677ef","date":1512420564,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#dropDeletedSegment(SegmentCommitInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#dropDeletedSegment(SegmentCommitInfo).mjava","sourceNew":"  /** Drops a segment that has 100% deleted documents. */\n  synchronized void dropDeletedSegment(SegmentCommitInfo info) throws IOException {\n    // If a merge has already registered for this\n    // segment, we leave it in the readerPool; the\n    // merge will skip merging it and will then drop\n    // it once it's done:\n    if (mergingSegments.contains(info) == false) {\n      // it's possible that we invoke this method more than once for the same SCI\n      // we must only remove the docs once!\n      boolean dropPendingDocs = segmentInfos.remove(info);\n      try {\n        // this is sneaky - we might hit an exception while dropping a reader but then we have already\n        // removed the segment for the segmentInfo and we lost the pendingDocs update due to that.\n        // therefore we execute the adjustPendingNumDocs in a finally block to account for that.\n        dropPendingDocs |= readerPool.drop(info);\n      } finally {\n        if (dropPendingDocs) {\n          adjustPendingNumDocs(-info.info.maxDoc());\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /** Drops a segment that has 100% deleted documents. */\n  synchronized void dropDeletedSegment(SegmentCommitInfo info) throws IOException {\n    // If a merge has already registered for this\n    // segment, we leave it in the readerPool; the\n    // merge will skip merging it and will then drop\n    // it once it's done:\n    if (mergingSegments.contains(info) == false) {\n      segmentInfos.remove(info);\n      pendingNumDocs.addAndGet(-info.info.maxDoc());\n      readerPool.drop(info);\n    }\n  }\n\n","bugFix":["f4363cd33f6eff7fb4753574a441e2d18c1022a4"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9f21f1920c232db2352489eed260fe5c1f39e5a0","date":1587748041,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#dropDeletedSegment(SegmentCommitInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#dropDeletedSegment(SegmentCommitInfo).mjava","sourceNew":"  /** Drops a segment that has 100% deleted documents. */\n  private synchronized void dropDeletedSegment(SegmentCommitInfo info) throws IOException {\n    // If a merge has already registered for this\n    // segment, we leave it in the readerPool; the\n    // merge will skip merging it and will then drop\n    // it once it's done:\n    if (mergingSegments.contains(info) == false) {\n      // it's possible that we invoke this method more than once for the same SCI\n      // we must only remove the docs once!\n      boolean dropPendingDocs = segmentInfos.remove(info);\n      try {\n        // this is sneaky - we might hit an exception while dropping a reader but then we have already\n        // removed the segment for the segmentInfo and we lost the pendingDocs update due to that.\n        // therefore we execute the adjustPendingNumDocs in a finally block to account for that.\n        dropPendingDocs |= readerPool.drop(info);\n      } finally {\n        if (dropPendingDocs) {\n          adjustPendingNumDocs(-info.info.maxDoc());\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /** Drops a segment that has 100% deleted documents. */\n  synchronized void dropDeletedSegment(SegmentCommitInfo info) throws IOException {\n    // If a merge has already registered for this\n    // segment, we leave it in the readerPool; the\n    // merge will skip merging it and will then drop\n    // it once it's done:\n    if (mergingSegments.contains(info) == false) {\n      // it's possible that we invoke this method more than once for the same SCI\n      // we must only remove the docs once!\n      boolean dropPendingDocs = segmentInfos.remove(info);\n      try {\n        // this is sneaky - we might hit an exception while dropping a reader but then we have already\n        // removed the segment for the segmentInfo and we lost the pendingDocs update due to that.\n        // therefore we execute the adjustPendingNumDocs in a finally block to account for that.\n        dropPendingDocs |= readerPool.drop(info);\n      } finally {\n        if (dropPendingDocs) {\n          adjustPendingNumDocs(-info.info.maxDoc());\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9f21f1920c232db2352489eed260fe5c1f39e5a0":["fdc3f2b9a4e1c1aacfa53b304c4e42c13a1677ef"],"f4363cd33f6eff7fb4753574a441e2d18c1022a4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fdc3f2b9a4e1c1aacfa53b304c4e42c13a1677ef":["28288370235ed02234a64753cdbf0c6ec096304a"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f4363cd33f6eff7fb4753574a441e2d18c1022a4"],"28288370235ed02234a64753cdbf0c6ec096304a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f4363cd33f6eff7fb4753574a441e2d18c1022a4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9f21f1920c232db2352489eed260fe5c1f39e5a0"]},"commit2Childs":{"9f21f1920c232db2352489eed260fe5c1f39e5a0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f4363cd33f6eff7fb4753574a441e2d18c1022a4":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f4363cd33f6eff7fb4753574a441e2d18c1022a4","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"fdc3f2b9a4e1c1aacfa53b304c4e42c13a1677ef":["9f21f1920c232db2352489eed260fe5c1f39e5a0"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":[],"28288370235ed02234a64753cdbf0c6ec096304a":["fdc3f2b9a4e1c1aacfa53b304c4e42c13a1677ef"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}