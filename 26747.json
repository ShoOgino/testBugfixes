{"path":"modules/facet/src/test/org/apache/lucene/facet/search/TestTopKInEachNodeResultHandler#testSimple().mjava","commits":[{"id":"89f15687f60bd49cd3d9de427e85c17fd9397d61","date":1309381327,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"modules/facet/src/test/org/apache/lucene/facet/search/TestTopKInEachNodeResultHandler#testSimple().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testSimple() throws Exception {\n\n    int[] partitionSizes = new int[] { \n        2,3,4, 5, 6, 7, 10, 1000,\n        Integer.MAX_VALUE };\n\n    for (int partitionSize : partitionSizes) {\n      Directory iDir = new RAMDirectory();\n      Directory tDir = new RAMDirectory();\n\n      if (VERBOSE) {\n        System.out.println(\"Partition Size: \" + partitionSize);\n      }\n      \n      final int pSize = partitionSize;\n      DefaultFacetIndexingParams iParams = new DefaultFacetIndexingParams() {\n        @Override\n        protected int fixedPartitionSize() {\n          return pSize;\n        }\n      };\n\n      IndexWriter iw = new IndexWriter(iDir,\n          new IndexWriterConfig(TEST_VERSION_CURRENT,\n              new StandardAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.CREATE));\n      TaxonomyWriter tw = new LuceneTaxonomyWriter(tDir);\n      prvt_add(iParams, iw, tw, \"a\", \"b\");\n      prvt_add(iParams, iw, tw, \"a\", \"b\", \"1\");\n      prvt_add(iParams, iw, tw, \"a\", \"b\", \"1\");\n      prvt_add(iParams, iw, tw, \"a\", \"b\", \"2\");\n      prvt_add(iParams, iw, tw, \"a\", \"b\", \"2\");\n      prvt_add(iParams, iw, tw, \"a\", \"b\", \"2\");\n      prvt_add(iParams, iw, tw, \"a\", \"b\", \"3\");\n      prvt_add(iParams, iw, tw, \"a\", \"b\", \"4\");\n      prvt_add(iParams, iw, tw, \"a\", \"c\");\n      prvt_add(iParams, iw, tw, \"a\", \"c\");\n      prvt_add(iParams, iw, tw, \"a\", \"c\");\n      prvt_add(iParams, iw, tw, \"a\", \"c\");\n      prvt_add(iParams, iw, tw, \"a\", \"c\");\n      prvt_add(iParams, iw, tw, \"a\", \"c\", \"1\");\n      prvt_add(iParams, iw, tw, \"a\", \"d\");\n      prvt_add(iParams, iw, tw, \"a\", \"e\");\n\n      iw.commit();\n      iw.close();\n      tw.commit();\n      tw.close();\n\n      IndexSearcher is = new IndexSearcher(iDir);\n      LuceneTaxonomyReader tr = new LuceneTaxonomyReader(tDir);\n\n      // Get all of the documents and run the query, then do different\n      // facet counts and compare to control\n      Query q = new TermQuery(new Term(\"content\", \"alpha\"));\n      ScoredDocIdCollector scoredDoc = ScoredDocIdCollector.create(is.maxDoc(), true);\n\n      // Collector collector = new MultiCollector(scoredDoc);\n      is.search(q, scoredDoc);\n\n      CountFacetRequest cfra23 = new CountFacetRequest(\n          new CategoryPath(\"a\"), 2);\n      cfra23.setDepth(3);\n      cfra23.setResultMode(ResultMode.PER_NODE_IN_TREE);\n\n      CountFacetRequest cfra22 = new CountFacetRequest(\n          new CategoryPath(\"a\"), 2);\n      cfra22.setDepth(2);\n      cfra22.setResultMode(ResultMode.PER_NODE_IN_TREE);\n\n      CountFacetRequest cfra21 = new CountFacetRequest(\n          new CategoryPath(\"a\"), 2);\n      cfra21.setDepth(1);\n      cfra21.setResultMode(ResultMode.PER_NODE_IN_TREE);\n\n      CountFacetRequest cfrb22 = new CountFacetRequest(\n          new CategoryPath(\"a\", \"b\"), 2);\n      cfrb22.setDepth(2);\n      cfrb22.setResultMode(ResultMode.PER_NODE_IN_TREE);\n\n      CountFacetRequest cfrb23 = new CountFacetRequest(\n          new CategoryPath(\"a\", \"b\"), 2);\n      cfrb23.setDepth(3);\n      cfrb23.setResultMode(ResultMode.PER_NODE_IN_TREE);\n\n      CountFacetRequest cfrb21 = new CountFacetRequest(\n          new CategoryPath(\"a\", \"b\"), 2);\n      cfrb21.setDepth(1);\n      cfrb21.setResultMode(ResultMode.PER_NODE_IN_TREE);\n\n      CountFacetRequest doctor = new CountFacetRequest(\n          new CategoryPath(\"Doctor\"), 2);\n      doctor.setDepth(1);\n      doctor.setResultMode(ResultMode.PER_NODE_IN_TREE);\n\n      CountFacetRequest cfrb20 = new CountFacetRequest(\n          new CategoryPath(\"a\", \"b\"), 2);\n      cfrb20.setDepth(0);\n      cfrb20.setResultMode(ResultMode.PER_NODE_IN_TREE);\n\n      FacetSearchParams facetSearchParams = new FacetSearchParams(iParams);\n      facetSearchParams.addFacetRequest(cfra23);\n      facetSearchParams.addFacetRequest(cfra22);\n      facetSearchParams.addFacetRequest(cfra21);\n      facetSearchParams.addFacetRequest(cfrb23);\n      facetSearchParams.addFacetRequest(cfrb22);\n      facetSearchParams.addFacetRequest(cfrb21);\n      facetSearchParams.addFacetRequest(doctor);\n      facetSearchParams.addFacetRequest(cfrb20);\n      \n      IntArrayAllocator iaa = new IntArrayAllocator(PartitionsUtils.partitionSize(facetSearchParams,tr), 1);\n      FloatArrayAllocator faa = new FloatArrayAllocator(PartitionsUtils.partitionSize(facetSearchParams,tr), 1);\n      FacetsAccumulator fctExtrctr = new StandardFacetsAccumulator(facetSearchParams, is.getIndexReader(), tr, iaa, faa);\n      fctExtrctr.setComplementThreshold(FacetsAccumulator.DISABLE_COMPLEMENT);\n      long start = System.currentTimeMillis();\n\n      List<FacetResult> facetResults = fctExtrctr.accumulate(scoredDoc.getScoredDocIDs());\n\n      long end = System.currentTimeMillis();\n      if (VERBOSE) {\n        System.out.println(\"Time: \" + (end - start));\n      }\n      \n      FacetResult fr = facetResults.get(0); // a, depth=3, K=2\n      boolean hasDoctor = \"Doctor\".equals(fr.getFacetRequest().getCategoryPath().getComponent(0));\n      assertEquals(9, fr.getNumValidDescendants());\n      FacetResultNode parentRes = fr.getFacetResultNode();\n      assertEquals(16.0, parentRes.getValue(), Double.MIN_VALUE);\n      assertEquals(2.0, parentRes.getResidue(), Double.MIN_VALUE);\n      assertEquals(2, parentRes.getNumSubResults());\n      // two nodes sorted by descending values: a/b with 8  and a/c with 6\n      // a/b has residue 2 and two children a/b/2 with value 3, and a/b/1 with value 2. \n      // a/c has residue 0, and one child a/c/1 with value 1.\n      double [] expectedValues0 = { 8.0, 2.0, 3.0, 0.0, 2.0, 0.0, 6.0, 0.0, 1.0, 0.0 };\n      int i = 0;\n      for (FacetResultNode node : parentRes.getSubResults()) {\n        assertEquals(expectedValues0[i++], node.getValue(), Double.MIN_VALUE);\n        assertEquals(expectedValues0[i++], node.getResidue(), Double.MIN_VALUE);\n        for (FacetResultNode node2 : node.getSubResults()) {\n          assertEquals(expectedValues0[i++], node2.getValue(), Double.MIN_VALUE);\n          assertEquals(expectedValues0[i++], node2.getResidue(), Double.MIN_VALUE);\n        }\n      }\n\n      // now just change the value of the first child of the root to 5, and then rearrange\n      // expected are: first a/c of value 6 and residue 0, and one child a/c/1 with value 1\n      // then a/b with value 5 and residue 2, and both children: a/b/2 with value 3, and a/b/1 with value 2.\n      for (FacetResultNode node : parentRes.getSubResults()) {\n        node.setValue(5.0);\n        break;\n      }\n      // now rearrange\n      double [] expectedValues00 = { 6.0, 0.0, 1.0, 0.0, 5.0, 2.0, 3.0, 0.0, 2.0, 0.0 };\n      fr = cfra23.createFacetResultsHandler(tr).rearrangeFacetResult(fr);\n      i = 0;\n      for (FacetResultNode node : parentRes.getSubResults()) {\n        assertEquals(expectedValues00[i++], node.getValue(), Double.MIN_VALUE);\n        assertEquals(expectedValues00[i++], node.getResidue(), Double.MIN_VALUE);\n        for (FacetResultNode node2 : node.getSubResults()) {\n          assertEquals(expectedValues00[i++], node2.getValue(), Double.MIN_VALUE);\n          assertEquals(expectedValues00[i++], node2.getResidue(), Double.MIN_VALUE);\n        }\n      }\n\n      fr = facetResults.get(1); // a, depth=2, K=2. same result as before\n      hasDoctor |= \"Doctor\".equals(fr.getFacetRequest().getCategoryPath().getComponent(0));\n      assertEquals(9, fr.getNumValidDescendants());\n      parentRes = fr.getFacetResultNode();\n      assertEquals(16.0, parentRes.getValue(), Double.MIN_VALUE);\n      assertEquals(2.0, parentRes.getResidue(), Double.MIN_VALUE);\n      assertEquals(2, parentRes.getNumSubResults());\n      // two nodes sorted by descending values: a/b with 8  and a/c with 6\n      // a/b has residue 2 and two children a/b/2 with value 3, and a/b/1 with value 2. \n      // a/c has residue 0, and one child a/c/1 with value 1.\n      i = 0;\n      for (FacetResultNode node : parentRes.getSubResults()) {\n        assertEquals(expectedValues0[i++], node.getValue(), Double.MIN_VALUE);\n        assertEquals(expectedValues0[i++], node.getResidue(), Double.MIN_VALUE);\n        for (FacetResultNode node2 : node.getSubResults()) {\n          assertEquals(expectedValues0[i++], node2.getValue(), Double.MIN_VALUE);\n          assertEquals(expectedValues0[i++], node2.getResidue(), Double.MIN_VALUE);\n        }\n      }\n\n      fr = facetResults.get(2); // a, depth=1, K=2\n      hasDoctor |= \"Doctor\".equals(fr.getFacetRequest().getCategoryPath().getComponent(0));\n      assertEquals(4, fr.getNumValidDescendants(), 4);\n      parentRes = fr.getFacetResultNode();\n      assertEquals(16.0, parentRes.getValue(), Double.MIN_VALUE);\n      assertEquals(2.0, parentRes.getResidue(), Double.MIN_VALUE);\n      assertEquals(2, parentRes.getNumSubResults());\n      // two nodes sorted by descending values: \n      // a/b with value 8 and residue 0 (because no children considered),  \n      //  and a/c with value 6 and residue 0 (because no children considered)\n      double [] expectedValues2 = { 8.0, 0.0, 6.0, 0.0 };\n      i = 0;\n      for (FacetResultNode node : parentRes.getSubResults()) {\n        assertEquals(expectedValues2[i++], node.getValue(), Double.MIN_VALUE);\n        assertEquals(expectedValues2[i++], node.getResidue(), Double.MIN_VALUE);\n        assertEquals(node.getNumSubResults(), 0);\n      }\n      \n      fr = facetResults.get(3); // a/b, depth=3, K=2\n      hasDoctor |= \"Doctor\".equals(fr.getFacetRequest().getCategoryPath().getComponent(0));\n      assertEquals(4, fr.getNumValidDescendants());\n      parentRes = fr.getFacetResultNode();\n      assertEquals(8.0, parentRes.getValue(), Double.MIN_VALUE);\n      assertEquals(2.0, parentRes.getResidue(), Double.MIN_VALUE);\n      assertEquals(2, parentRes.getNumSubResults());\n      double [] expectedValues3 = { 3.0, 2.0 };\n      i = 0;\n      for (FacetResultNode node : parentRes.getSubResults()) {\n        assertEquals(expectedValues3[i++], node.getValue(), Double.MIN_VALUE);\n        assertEquals(0.0, node.getResidue(), Double.MIN_VALUE);\n        assertEquals(0, node.getNumSubResults());\n      }\n\n      fr = facetResults.get(4); // a/b, depth=2, K=2\n      hasDoctor |= \"Doctor\".equals(fr.getFacetRequest().getCategoryPath().getComponent(0));\n      assertEquals(4, fr.getNumValidDescendants());\n      parentRes = fr.getFacetResultNode();\n      assertEquals(8.0, parentRes.getValue(), Double.MIN_VALUE);\n      assertEquals(2.0, parentRes.getResidue(), Double.MIN_VALUE);\n      assertEquals(2, parentRes.getNumSubResults());\n      i = 0;\n      for (FacetResultNode node : parentRes.getSubResults()) {\n        assertEquals(expectedValues3[i++], node.getValue(), Double.MIN_VALUE);\n        assertEquals(0.0, node.getResidue(), Double.MIN_VALUE);\n        assertEquals(0, node.getNumSubResults());\n      }\n\n      fr = facetResults.get(5); // a/b, depth=1, K=2\n      hasDoctor |= \"Doctor\".equals(fr.getFacetRequest().getCategoryPath().getComponent(0));\n      assertEquals(4, fr.getNumValidDescendants());\n      parentRes = fr.getFacetResultNode();\n      assertEquals(8.0, parentRes.getValue(), Double.MIN_VALUE);\n      assertEquals(2.0, parentRes.getResidue(), Double.MIN_VALUE);\n      assertEquals(2, parentRes.getNumSubResults());\n      i = 0;\n      for (FacetResultNode node : parentRes.getSubResults()) {\n        assertEquals(expectedValues3[i++], node.getValue(), Double.MIN_VALUE);\n        assertEquals(0.0, node.getResidue(), Double.MIN_VALUE);\n        assertEquals(0, node.getNumSubResults());\n      }\n      \n      fr = facetResults.get(6); // a/b, depth=0, K=2\n      hasDoctor |= \"Doctor\".equals(fr.getFacetRequest().getCategoryPath().getComponent(0));\n      assertEquals(0, fr.getNumValidDescendants()); // 0 descendants but rootnode\n      parentRes = fr.getFacetResultNode();\n      assertEquals(8.0, parentRes.getValue(), Double.MIN_VALUE);\n      assertEquals(0.0, parentRes.getResidue(), Double.MIN_VALUE);\n      assertEquals(0, parentRes.getNumSubResults());\n      hasDoctor |= \"Doctor\".equals(fr.getFacetRequest().getCategoryPath().getComponent(0));\n\n      // doctor, depth=1, K=2\n      assertFalse(\"Shouldn't have found anything for a FacetRequest \" +\n          \"of a facet that doesn't exist in the index.\", hasDoctor);\n      assertEquals(\"Shouldn't have found more than seven request.\", 7, facetResults.size());\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a4df66e06e0c3b520d7d5941e1c043076f06f17","date":1309454196,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/facet/src/test/org/apache/lucene/facet/search/TestTopKInEachNodeResultHandler#testSimple().mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/search/TestTopKInEachNodeResultHandler#testSimple().mjava","sourceNew":"  @Test\n  public void testSimple() throws Exception {\n\n    int[] partitionSizes = new int[] { \n        2,3,4, 5, 6, 7, 10, 1000,\n        Integer.MAX_VALUE };\n\n    for (int partitionSize : partitionSizes) {\n      Directory iDir = newDirectory();\n      Directory tDir = newDirectory();\n\n      if (VERBOSE) {\n        System.out.println(\"Partition Size: \" + partitionSize);\n      }\n      \n      final int pSize = partitionSize;\n      DefaultFacetIndexingParams iParams = new DefaultFacetIndexingParams() {\n        @Override\n        protected int fixedPartitionSize() {\n          return pSize;\n        }\n      };\n\n      RandomIndexWriter iw = new RandomIndexWriter(random, iDir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT,\n              new MockAnalyzer(random)).setOpenMode(OpenMode.CREATE));\n      TaxonomyWriter tw = new LuceneTaxonomyWriter(tDir);\n      prvt_add(iParams, iw, tw, \"a\", \"b\");\n      prvt_add(iParams, iw, tw, \"a\", \"b\", \"1\");\n      prvt_add(iParams, iw, tw, \"a\", \"b\", \"1\");\n      prvt_add(iParams, iw, tw, \"a\", \"b\", \"2\");\n      prvt_add(iParams, iw, tw, \"a\", \"b\", \"2\");\n      prvt_add(iParams, iw, tw, \"a\", \"b\", \"2\");\n      prvt_add(iParams, iw, tw, \"a\", \"b\", \"3\");\n      prvt_add(iParams, iw, tw, \"a\", \"b\", \"4\");\n      prvt_add(iParams, iw, tw, \"a\", \"c\");\n      prvt_add(iParams, iw, tw, \"a\", \"c\");\n      prvt_add(iParams, iw, tw, \"a\", \"c\");\n      prvt_add(iParams, iw, tw, \"a\", \"c\");\n      prvt_add(iParams, iw, tw, \"a\", \"c\");\n      prvt_add(iParams, iw, tw, \"a\", \"c\", \"1\");\n      prvt_add(iParams, iw, tw, \"a\", \"d\");\n      prvt_add(iParams, iw, tw, \"a\", \"e\");\n\n      IndexReader ir = iw.getReader();\n      iw.close();\n      tw.commit();\n      tw.close();\n\n      IndexSearcher is = newSearcher(ir);\n      LuceneTaxonomyReader tr = new LuceneTaxonomyReader(tDir);\n\n      // Get all of the documents and run the query, then do different\n      // facet counts and compare to control\n      Query q = new TermQuery(new Term(\"content\", \"alpha\"));\n      ScoredDocIdCollector scoredDoc = ScoredDocIdCollector.create(is.maxDoc(), true);\n\n      // Collector collector = new MultiCollector(scoredDoc);\n      is.search(q, scoredDoc);\n\n      CountFacetRequest cfra23 = new CountFacetRequest(\n          new CategoryPath(\"a\"), 2);\n      cfra23.setDepth(3);\n      cfra23.setResultMode(ResultMode.PER_NODE_IN_TREE);\n\n      CountFacetRequest cfra22 = new CountFacetRequest(\n          new CategoryPath(\"a\"), 2);\n      cfra22.setDepth(2);\n      cfra22.setResultMode(ResultMode.PER_NODE_IN_TREE);\n\n      CountFacetRequest cfra21 = new CountFacetRequest(\n          new CategoryPath(\"a\"), 2);\n      cfra21.setDepth(1);\n      cfra21.setResultMode(ResultMode.PER_NODE_IN_TREE);\n\n      CountFacetRequest cfrb22 = new CountFacetRequest(\n          new CategoryPath(\"a\", \"b\"), 2);\n      cfrb22.setDepth(2);\n      cfrb22.setResultMode(ResultMode.PER_NODE_IN_TREE);\n\n      CountFacetRequest cfrb23 = new CountFacetRequest(\n          new CategoryPath(\"a\", \"b\"), 2);\n      cfrb23.setDepth(3);\n      cfrb23.setResultMode(ResultMode.PER_NODE_IN_TREE);\n\n      CountFacetRequest cfrb21 = new CountFacetRequest(\n          new CategoryPath(\"a\", \"b\"), 2);\n      cfrb21.setDepth(1);\n      cfrb21.setResultMode(ResultMode.PER_NODE_IN_TREE);\n\n      CountFacetRequest doctor = new CountFacetRequest(\n          new CategoryPath(\"Doctor\"), 2);\n      doctor.setDepth(1);\n      doctor.setResultMode(ResultMode.PER_NODE_IN_TREE);\n\n      CountFacetRequest cfrb20 = new CountFacetRequest(\n          new CategoryPath(\"a\", \"b\"), 2);\n      cfrb20.setDepth(0);\n      cfrb20.setResultMode(ResultMode.PER_NODE_IN_TREE);\n\n      FacetSearchParams facetSearchParams = new FacetSearchParams(iParams);\n      facetSearchParams.addFacetRequest(cfra23);\n      facetSearchParams.addFacetRequest(cfra22);\n      facetSearchParams.addFacetRequest(cfra21);\n      facetSearchParams.addFacetRequest(cfrb23);\n      facetSearchParams.addFacetRequest(cfrb22);\n      facetSearchParams.addFacetRequest(cfrb21);\n      facetSearchParams.addFacetRequest(doctor);\n      facetSearchParams.addFacetRequest(cfrb20);\n      \n      IntArrayAllocator iaa = new IntArrayAllocator(PartitionsUtils.partitionSize(facetSearchParams,tr), 1);\n      FloatArrayAllocator faa = new FloatArrayAllocator(PartitionsUtils.partitionSize(facetSearchParams,tr), 1);\n      FacetsAccumulator fctExtrctr = new StandardFacetsAccumulator(facetSearchParams, is.getIndexReader(), tr, iaa, faa);\n      fctExtrctr.setComplementThreshold(FacetsAccumulator.DISABLE_COMPLEMENT);\n      long start = System.currentTimeMillis();\n\n      List<FacetResult> facetResults = fctExtrctr.accumulate(scoredDoc.getScoredDocIDs());\n\n      long end = System.currentTimeMillis();\n      if (VERBOSE) {\n        System.out.println(\"Time: \" + (end - start));\n      }\n      \n      FacetResult fr = facetResults.get(0); // a, depth=3, K=2\n      boolean hasDoctor = \"Doctor\".equals(fr.getFacetRequest().getCategoryPath().getComponent(0));\n      assertEquals(9, fr.getNumValidDescendants());\n      FacetResultNode parentRes = fr.getFacetResultNode();\n      assertEquals(16.0, parentRes.getValue(), Double.MIN_VALUE);\n      assertEquals(2.0, parentRes.getResidue(), Double.MIN_VALUE);\n      assertEquals(2, parentRes.getNumSubResults());\n      // two nodes sorted by descending values: a/b with 8  and a/c with 6\n      // a/b has residue 2 and two children a/b/2 with value 3, and a/b/1 with value 2. \n      // a/c has residue 0, and one child a/c/1 with value 1.\n      double [] expectedValues0 = { 8.0, 2.0, 3.0, 0.0, 2.0, 0.0, 6.0, 0.0, 1.0, 0.0 };\n      int i = 0;\n      for (FacetResultNode node : parentRes.getSubResults()) {\n        assertEquals(expectedValues0[i++], node.getValue(), Double.MIN_VALUE);\n        assertEquals(expectedValues0[i++], node.getResidue(), Double.MIN_VALUE);\n        for (FacetResultNode node2 : node.getSubResults()) {\n          assertEquals(expectedValues0[i++], node2.getValue(), Double.MIN_VALUE);\n          assertEquals(expectedValues0[i++], node2.getResidue(), Double.MIN_VALUE);\n        }\n      }\n\n      // now just change the value of the first child of the root to 5, and then rearrange\n      // expected are: first a/c of value 6 and residue 0, and one child a/c/1 with value 1\n      // then a/b with value 5 and residue 2, and both children: a/b/2 with value 3, and a/b/1 with value 2.\n      for (FacetResultNode node : parentRes.getSubResults()) {\n        node.setValue(5.0);\n        break;\n      }\n      // now rearrange\n      double [] expectedValues00 = { 6.0, 0.0, 1.0, 0.0, 5.0, 2.0, 3.0, 0.0, 2.0, 0.0 };\n      fr = cfra23.createFacetResultsHandler(tr).rearrangeFacetResult(fr);\n      i = 0;\n      for (FacetResultNode node : parentRes.getSubResults()) {\n        assertEquals(expectedValues00[i++], node.getValue(), Double.MIN_VALUE);\n        assertEquals(expectedValues00[i++], node.getResidue(), Double.MIN_VALUE);\n        for (FacetResultNode node2 : node.getSubResults()) {\n          assertEquals(expectedValues00[i++], node2.getValue(), Double.MIN_VALUE);\n          assertEquals(expectedValues00[i++], node2.getResidue(), Double.MIN_VALUE);\n        }\n      }\n\n      fr = facetResults.get(1); // a, depth=2, K=2. same result as before\n      hasDoctor |= \"Doctor\".equals(fr.getFacetRequest().getCategoryPath().getComponent(0));\n      assertEquals(9, fr.getNumValidDescendants());\n      parentRes = fr.getFacetResultNode();\n      assertEquals(16.0, parentRes.getValue(), Double.MIN_VALUE);\n      assertEquals(2.0, parentRes.getResidue(), Double.MIN_VALUE);\n      assertEquals(2, parentRes.getNumSubResults());\n      // two nodes sorted by descending values: a/b with 8  and a/c with 6\n      // a/b has residue 2 and two children a/b/2 with value 3, and a/b/1 with value 2. \n      // a/c has residue 0, and one child a/c/1 with value 1.\n      i = 0;\n      for (FacetResultNode node : parentRes.getSubResults()) {\n        assertEquals(expectedValues0[i++], node.getValue(), Double.MIN_VALUE);\n        assertEquals(expectedValues0[i++], node.getResidue(), Double.MIN_VALUE);\n        for (FacetResultNode node2 : node.getSubResults()) {\n          assertEquals(expectedValues0[i++], node2.getValue(), Double.MIN_VALUE);\n          assertEquals(expectedValues0[i++], node2.getResidue(), Double.MIN_VALUE);\n        }\n      }\n\n      fr = facetResults.get(2); // a, depth=1, K=2\n      hasDoctor |= \"Doctor\".equals(fr.getFacetRequest().getCategoryPath().getComponent(0));\n      assertEquals(4, fr.getNumValidDescendants(), 4);\n      parentRes = fr.getFacetResultNode();\n      assertEquals(16.0, parentRes.getValue(), Double.MIN_VALUE);\n      assertEquals(2.0, parentRes.getResidue(), Double.MIN_VALUE);\n      assertEquals(2, parentRes.getNumSubResults());\n      // two nodes sorted by descending values: \n      // a/b with value 8 and residue 0 (because no children considered),  \n      //  and a/c with value 6 and residue 0 (because no children considered)\n      double [] expectedValues2 = { 8.0, 0.0, 6.0, 0.0 };\n      i = 0;\n      for (FacetResultNode node : parentRes.getSubResults()) {\n        assertEquals(expectedValues2[i++], node.getValue(), Double.MIN_VALUE);\n        assertEquals(expectedValues2[i++], node.getResidue(), Double.MIN_VALUE);\n        assertEquals(node.getNumSubResults(), 0);\n      }\n      \n      fr = facetResults.get(3); // a/b, depth=3, K=2\n      hasDoctor |= \"Doctor\".equals(fr.getFacetRequest().getCategoryPath().getComponent(0));\n      assertEquals(4, fr.getNumValidDescendants());\n      parentRes = fr.getFacetResultNode();\n      assertEquals(8.0, parentRes.getValue(), Double.MIN_VALUE);\n      assertEquals(2.0, parentRes.getResidue(), Double.MIN_VALUE);\n      assertEquals(2, parentRes.getNumSubResults());\n      double [] expectedValues3 = { 3.0, 2.0 };\n      i = 0;\n      for (FacetResultNode node : parentRes.getSubResults()) {\n        assertEquals(expectedValues3[i++], node.getValue(), Double.MIN_VALUE);\n        assertEquals(0.0, node.getResidue(), Double.MIN_VALUE);\n        assertEquals(0, node.getNumSubResults());\n      }\n\n      fr = facetResults.get(4); // a/b, depth=2, K=2\n      hasDoctor |= \"Doctor\".equals(fr.getFacetRequest().getCategoryPath().getComponent(0));\n      assertEquals(4, fr.getNumValidDescendants());\n      parentRes = fr.getFacetResultNode();\n      assertEquals(8.0, parentRes.getValue(), Double.MIN_VALUE);\n      assertEquals(2.0, parentRes.getResidue(), Double.MIN_VALUE);\n      assertEquals(2, parentRes.getNumSubResults());\n      i = 0;\n      for (FacetResultNode node : parentRes.getSubResults()) {\n        assertEquals(expectedValues3[i++], node.getValue(), Double.MIN_VALUE);\n        assertEquals(0.0, node.getResidue(), Double.MIN_VALUE);\n        assertEquals(0, node.getNumSubResults());\n      }\n\n      fr = facetResults.get(5); // a/b, depth=1, K=2\n      hasDoctor |= \"Doctor\".equals(fr.getFacetRequest().getCategoryPath().getComponent(0));\n      assertEquals(4, fr.getNumValidDescendants());\n      parentRes = fr.getFacetResultNode();\n      assertEquals(8.0, parentRes.getValue(), Double.MIN_VALUE);\n      assertEquals(2.0, parentRes.getResidue(), Double.MIN_VALUE);\n      assertEquals(2, parentRes.getNumSubResults());\n      i = 0;\n      for (FacetResultNode node : parentRes.getSubResults()) {\n        assertEquals(expectedValues3[i++], node.getValue(), Double.MIN_VALUE);\n        assertEquals(0.0, node.getResidue(), Double.MIN_VALUE);\n        assertEquals(0, node.getNumSubResults());\n      }\n      \n      fr = facetResults.get(6); // a/b, depth=0, K=2\n      hasDoctor |= \"Doctor\".equals(fr.getFacetRequest().getCategoryPath().getComponent(0));\n      assertEquals(0, fr.getNumValidDescendants()); // 0 descendants but rootnode\n      parentRes = fr.getFacetResultNode();\n      assertEquals(8.0, parentRes.getValue(), Double.MIN_VALUE);\n      assertEquals(0.0, parentRes.getResidue(), Double.MIN_VALUE);\n      assertEquals(0, parentRes.getNumSubResults());\n      hasDoctor |= \"Doctor\".equals(fr.getFacetRequest().getCategoryPath().getComponent(0));\n\n      // doctor, depth=1, K=2\n      assertFalse(\"Shouldn't have found anything for a FacetRequest \" +\n          \"of a facet that doesn't exist in the index.\", hasDoctor);\n      assertEquals(\"Shouldn't have found more than seven request.\", 7, facetResults.size());\n      ir.close();\n      tr.close();\n      iDir.close();\n      tDir.close();\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testSimple() throws Exception {\n\n    int[] partitionSizes = new int[] { \n        2,3,4, 5, 6, 7, 10, 1000,\n        Integer.MAX_VALUE };\n\n    for (int partitionSize : partitionSizes) {\n      Directory iDir = new RAMDirectory();\n      Directory tDir = new RAMDirectory();\n\n      if (VERBOSE) {\n        System.out.println(\"Partition Size: \" + partitionSize);\n      }\n      \n      final int pSize = partitionSize;\n      DefaultFacetIndexingParams iParams = new DefaultFacetIndexingParams() {\n        @Override\n        protected int fixedPartitionSize() {\n          return pSize;\n        }\n      };\n\n      IndexWriter iw = new IndexWriter(iDir,\n          new IndexWriterConfig(TEST_VERSION_CURRENT,\n              new StandardAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.CREATE));\n      TaxonomyWriter tw = new LuceneTaxonomyWriter(tDir);\n      prvt_add(iParams, iw, tw, \"a\", \"b\");\n      prvt_add(iParams, iw, tw, \"a\", \"b\", \"1\");\n      prvt_add(iParams, iw, tw, \"a\", \"b\", \"1\");\n      prvt_add(iParams, iw, tw, \"a\", \"b\", \"2\");\n      prvt_add(iParams, iw, tw, \"a\", \"b\", \"2\");\n      prvt_add(iParams, iw, tw, \"a\", \"b\", \"2\");\n      prvt_add(iParams, iw, tw, \"a\", \"b\", \"3\");\n      prvt_add(iParams, iw, tw, \"a\", \"b\", \"4\");\n      prvt_add(iParams, iw, tw, \"a\", \"c\");\n      prvt_add(iParams, iw, tw, \"a\", \"c\");\n      prvt_add(iParams, iw, tw, \"a\", \"c\");\n      prvt_add(iParams, iw, tw, \"a\", \"c\");\n      prvt_add(iParams, iw, tw, \"a\", \"c\");\n      prvt_add(iParams, iw, tw, \"a\", \"c\", \"1\");\n      prvt_add(iParams, iw, tw, \"a\", \"d\");\n      prvt_add(iParams, iw, tw, \"a\", \"e\");\n\n      iw.commit();\n      iw.close();\n      tw.commit();\n      tw.close();\n\n      IndexSearcher is = new IndexSearcher(iDir);\n      LuceneTaxonomyReader tr = new LuceneTaxonomyReader(tDir);\n\n      // Get all of the documents and run the query, then do different\n      // facet counts and compare to control\n      Query q = new TermQuery(new Term(\"content\", \"alpha\"));\n      ScoredDocIdCollector scoredDoc = ScoredDocIdCollector.create(is.maxDoc(), true);\n\n      // Collector collector = new MultiCollector(scoredDoc);\n      is.search(q, scoredDoc);\n\n      CountFacetRequest cfra23 = new CountFacetRequest(\n          new CategoryPath(\"a\"), 2);\n      cfra23.setDepth(3);\n      cfra23.setResultMode(ResultMode.PER_NODE_IN_TREE);\n\n      CountFacetRequest cfra22 = new CountFacetRequest(\n          new CategoryPath(\"a\"), 2);\n      cfra22.setDepth(2);\n      cfra22.setResultMode(ResultMode.PER_NODE_IN_TREE);\n\n      CountFacetRequest cfra21 = new CountFacetRequest(\n          new CategoryPath(\"a\"), 2);\n      cfra21.setDepth(1);\n      cfra21.setResultMode(ResultMode.PER_NODE_IN_TREE);\n\n      CountFacetRequest cfrb22 = new CountFacetRequest(\n          new CategoryPath(\"a\", \"b\"), 2);\n      cfrb22.setDepth(2);\n      cfrb22.setResultMode(ResultMode.PER_NODE_IN_TREE);\n\n      CountFacetRequest cfrb23 = new CountFacetRequest(\n          new CategoryPath(\"a\", \"b\"), 2);\n      cfrb23.setDepth(3);\n      cfrb23.setResultMode(ResultMode.PER_NODE_IN_TREE);\n\n      CountFacetRequest cfrb21 = new CountFacetRequest(\n          new CategoryPath(\"a\", \"b\"), 2);\n      cfrb21.setDepth(1);\n      cfrb21.setResultMode(ResultMode.PER_NODE_IN_TREE);\n\n      CountFacetRequest doctor = new CountFacetRequest(\n          new CategoryPath(\"Doctor\"), 2);\n      doctor.setDepth(1);\n      doctor.setResultMode(ResultMode.PER_NODE_IN_TREE);\n\n      CountFacetRequest cfrb20 = new CountFacetRequest(\n          new CategoryPath(\"a\", \"b\"), 2);\n      cfrb20.setDepth(0);\n      cfrb20.setResultMode(ResultMode.PER_NODE_IN_TREE);\n\n      FacetSearchParams facetSearchParams = new FacetSearchParams(iParams);\n      facetSearchParams.addFacetRequest(cfra23);\n      facetSearchParams.addFacetRequest(cfra22);\n      facetSearchParams.addFacetRequest(cfra21);\n      facetSearchParams.addFacetRequest(cfrb23);\n      facetSearchParams.addFacetRequest(cfrb22);\n      facetSearchParams.addFacetRequest(cfrb21);\n      facetSearchParams.addFacetRequest(doctor);\n      facetSearchParams.addFacetRequest(cfrb20);\n      \n      IntArrayAllocator iaa = new IntArrayAllocator(PartitionsUtils.partitionSize(facetSearchParams,tr), 1);\n      FloatArrayAllocator faa = new FloatArrayAllocator(PartitionsUtils.partitionSize(facetSearchParams,tr), 1);\n      FacetsAccumulator fctExtrctr = new StandardFacetsAccumulator(facetSearchParams, is.getIndexReader(), tr, iaa, faa);\n      fctExtrctr.setComplementThreshold(FacetsAccumulator.DISABLE_COMPLEMENT);\n      long start = System.currentTimeMillis();\n\n      List<FacetResult> facetResults = fctExtrctr.accumulate(scoredDoc.getScoredDocIDs());\n\n      long end = System.currentTimeMillis();\n      if (VERBOSE) {\n        System.out.println(\"Time: \" + (end - start));\n      }\n      \n      FacetResult fr = facetResults.get(0); // a, depth=3, K=2\n      boolean hasDoctor = \"Doctor\".equals(fr.getFacetRequest().getCategoryPath().getComponent(0));\n      assertEquals(9, fr.getNumValidDescendants());\n      FacetResultNode parentRes = fr.getFacetResultNode();\n      assertEquals(16.0, parentRes.getValue(), Double.MIN_VALUE);\n      assertEquals(2.0, parentRes.getResidue(), Double.MIN_VALUE);\n      assertEquals(2, parentRes.getNumSubResults());\n      // two nodes sorted by descending values: a/b with 8  and a/c with 6\n      // a/b has residue 2 and two children a/b/2 with value 3, and a/b/1 with value 2. \n      // a/c has residue 0, and one child a/c/1 with value 1.\n      double [] expectedValues0 = { 8.0, 2.0, 3.0, 0.0, 2.0, 0.0, 6.0, 0.0, 1.0, 0.0 };\n      int i = 0;\n      for (FacetResultNode node : parentRes.getSubResults()) {\n        assertEquals(expectedValues0[i++], node.getValue(), Double.MIN_VALUE);\n        assertEquals(expectedValues0[i++], node.getResidue(), Double.MIN_VALUE);\n        for (FacetResultNode node2 : node.getSubResults()) {\n          assertEquals(expectedValues0[i++], node2.getValue(), Double.MIN_VALUE);\n          assertEquals(expectedValues0[i++], node2.getResidue(), Double.MIN_VALUE);\n        }\n      }\n\n      // now just change the value of the first child of the root to 5, and then rearrange\n      // expected are: first a/c of value 6 and residue 0, and one child a/c/1 with value 1\n      // then a/b with value 5 and residue 2, and both children: a/b/2 with value 3, and a/b/1 with value 2.\n      for (FacetResultNode node : parentRes.getSubResults()) {\n        node.setValue(5.0);\n        break;\n      }\n      // now rearrange\n      double [] expectedValues00 = { 6.0, 0.0, 1.0, 0.0, 5.0, 2.0, 3.0, 0.0, 2.0, 0.0 };\n      fr = cfra23.createFacetResultsHandler(tr).rearrangeFacetResult(fr);\n      i = 0;\n      for (FacetResultNode node : parentRes.getSubResults()) {\n        assertEquals(expectedValues00[i++], node.getValue(), Double.MIN_VALUE);\n        assertEquals(expectedValues00[i++], node.getResidue(), Double.MIN_VALUE);\n        for (FacetResultNode node2 : node.getSubResults()) {\n          assertEquals(expectedValues00[i++], node2.getValue(), Double.MIN_VALUE);\n          assertEquals(expectedValues00[i++], node2.getResidue(), Double.MIN_VALUE);\n        }\n      }\n\n      fr = facetResults.get(1); // a, depth=2, K=2. same result as before\n      hasDoctor |= \"Doctor\".equals(fr.getFacetRequest().getCategoryPath().getComponent(0));\n      assertEquals(9, fr.getNumValidDescendants());\n      parentRes = fr.getFacetResultNode();\n      assertEquals(16.0, parentRes.getValue(), Double.MIN_VALUE);\n      assertEquals(2.0, parentRes.getResidue(), Double.MIN_VALUE);\n      assertEquals(2, parentRes.getNumSubResults());\n      // two nodes sorted by descending values: a/b with 8  and a/c with 6\n      // a/b has residue 2 and two children a/b/2 with value 3, and a/b/1 with value 2. \n      // a/c has residue 0, and one child a/c/1 with value 1.\n      i = 0;\n      for (FacetResultNode node : parentRes.getSubResults()) {\n        assertEquals(expectedValues0[i++], node.getValue(), Double.MIN_VALUE);\n        assertEquals(expectedValues0[i++], node.getResidue(), Double.MIN_VALUE);\n        for (FacetResultNode node2 : node.getSubResults()) {\n          assertEquals(expectedValues0[i++], node2.getValue(), Double.MIN_VALUE);\n          assertEquals(expectedValues0[i++], node2.getResidue(), Double.MIN_VALUE);\n        }\n      }\n\n      fr = facetResults.get(2); // a, depth=1, K=2\n      hasDoctor |= \"Doctor\".equals(fr.getFacetRequest().getCategoryPath().getComponent(0));\n      assertEquals(4, fr.getNumValidDescendants(), 4);\n      parentRes = fr.getFacetResultNode();\n      assertEquals(16.0, parentRes.getValue(), Double.MIN_VALUE);\n      assertEquals(2.0, parentRes.getResidue(), Double.MIN_VALUE);\n      assertEquals(2, parentRes.getNumSubResults());\n      // two nodes sorted by descending values: \n      // a/b with value 8 and residue 0 (because no children considered),  \n      //  and a/c with value 6 and residue 0 (because no children considered)\n      double [] expectedValues2 = { 8.0, 0.0, 6.0, 0.0 };\n      i = 0;\n      for (FacetResultNode node : parentRes.getSubResults()) {\n        assertEquals(expectedValues2[i++], node.getValue(), Double.MIN_VALUE);\n        assertEquals(expectedValues2[i++], node.getResidue(), Double.MIN_VALUE);\n        assertEquals(node.getNumSubResults(), 0);\n      }\n      \n      fr = facetResults.get(3); // a/b, depth=3, K=2\n      hasDoctor |= \"Doctor\".equals(fr.getFacetRequest().getCategoryPath().getComponent(0));\n      assertEquals(4, fr.getNumValidDescendants());\n      parentRes = fr.getFacetResultNode();\n      assertEquals(8.0, parentRes.getValue(), Double.MIN_VALUE);\n      assertEquals(2.0, parentRes.getResidue(), Double.MIN_VALUE);\n      assertEquals(2, parentRes.getNumSubResults());\n      double [] expectedValues3 = { 3.0, 2.0 };\n      i = 0;\n      for (FacetResultNode node : parentRes.getSubResults()) {\n        assertEquals(expectedValues3[i++], node.getValue(), Double.MIN_VALUE);\n        assertEquals(0.0, node.getResidue(), Double.MIN_VALUE);\n        assertEquals(0, node.getNumSubResults());\n      }\n\n      fr = facetResults.get(4); // a/b, depth=2, K=2\n      hasDoctor |= \"Doctor\".equals(fr.getFacetRequest().getCategoryPath().getComponent(0));\n      assertEquals(4, fr.getNumValidDescendants());\n      parentRes = fr.getFacetResultNode();\n      assertEquals(8.0, parentRes.getValue(), Double.MIN_VALUE);\n      assertEquals(2.0, parentRes.getResidue(), Double.MIN_VALUE);\n      assertEquals(2, parentRes.getNumSubResults());\n      i = 0;\n      for (FacetResultNode node : parentRes.getSubResults()) {\n        assertEquals(expectedValues3[i++], node.getValue(), Double.MIN_VALUE);\n        assertEquals(0.0, node.getResidue(), Double.MIN_VALUE);\n        assertEquals(0, node.getNumSubResults());\n      }\n\n      fr = facetResults.get(5); // a/b, depth=1, K=2\n      hasDoctor |= \"Doctor\".equals(fr.getFacetRequest().getCategoryPath().getComponent(0));\n      assertEquals(4, fr.getNumValidDescendants());\n      parentRes = fr.getFacetResultNode();\n      assertEquals(8.0, parentRes.getValue(), Double.MIN_VALUE);\n      assertEquals(2.0, parentRes.getResidue(), Double.MIN_VALUE);\n      assertEquals(2, parentRes.getNumSubResults());\n      i = 0;\n      for (FacetResultNode node : parentRes.getSubResults()) {\n        assertEquals(expectedValues3[i++], node.getValue(), Double.MIN_VALUE);\n        assertEquals(0.0, node.getResidue(), Double.MIN_VALUE);\n        assertEquals(0, node.getNumSubResults());\n      }\n      \n      fr = facetResults.get(6); // a/b, depth=0, K=2\n      hasDoctor |= \"Doctor\".equals(fr.getFacetRequest().getCategoryPath().getComponent(0));\n      assertEquals(0, fr.getNumValidDescendants()); // 0 descendants but rootnode\n      parentRes = fr.getFacetResultNode();\n      assertEquals(8.0, parentRes.getValue(), Double.MIN_VALUE);\n      assertEquals(0.0, parentRes.getResidue(), Double.MIN_VALUE);\n      assertEquals(0, parentRes.getNumSubResults());\n      hasDoctor |= \"Doctor\".equals(fr.getFacetRequest().getCategoryPath().getComponent(0));\n\n      // doctor, depth=1, K=2\n      assertFalse(\"Shouldn't have found anything for a FacetRequest \" +\n          \"of a facet that doesn't exist in the index.\", hasDoctor);\n      assertEquals(\"Shouldn't have found more than seven request.\", 7, facetResults.size());\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/facet/src/test/org/apache/lucene/facet/search/TestTopKInEachNodeResultHandler#testSimple().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testSimple() throws Exception {\n\n    int[] partitionSizes = new int[] { \n        2,3,4, 5, 6, 7, 10, 1000,\n        Integer.MAX_VALUE };\n\n    for (int partitionSize : partitionSizes) {\n      Directory iDir = newDirectory();\n      Directory tDir = newDirectory();\n\n      if (VERBOSE) {\n        System.out.println(\"Partition Size: \" + partitionSize);\n      }\n      \n      final int pSize = partitionSize;\n      DefaultFacetIndexingParams iParams = new DefaultFacetIndexingParams() {\n        @Override\n        protected int fixedPartitionSize() {\n          return pSize;\n        }\n      };\n\n      RandomIndexWriter iw = new RandomIndexWriter(random, iDir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT,\n              new MockAnalyzer(random)).setOpenMode(OpenMode.CREATE));\n      TaxonomyWriter tw = new LuceneTaxonomyWriter(tDir);\n      prvt_add(iParams, iw, tw, \"a\", \"b\");\n      prvt_add(iParams, iw, tw, \"a\", \"b\", \"1\");\n      prvt_add(iParams, iw, tw, \"a\", \"b\", \"1\");\n      prvt_add(iParams, iw, tw, \"a\", \"b\", \"2\");\n      prvt_add(iParams, iw, tw, \"a\", \"b\", \"2\");\n      prvt_add(iParams, iw, tw, \"a\", \"b\", \"2\");\n      prvt_add(iParams, iw, tw, \"a\", \"b\", \"3\");\n      prvt_add(iParams, iw, tw, \"a\", \"b\", \"4\");\n      prvt_add(iParams, iw, tw, \"a\", \"c\");\n      prvt_add(iParams, iw, tw, \"a\", \"c\");\n      prvt_add(iParams, iw, tw, \"a\", \"c\");\n      prvt_add(iParams, iw, tw, \"a\", \"c\");\n      prvt_add(iParams, iw, tw, \"a\", \"c\");\n      prvt_add(iParams, iw, tw, \"a\", \"c\", \"1\");\n      prvt_add(iParams, iw, tw, \"a\", \"d\");\n      prvt_add(iParams, iw, tw, \"a\", \"e\");\n\n      IndexReader ir = iw.getReader();\n      iw.close();\n      tw.commit();\n      tw.close();\n\n      IndexSearcher is = newSearcher(ir);\n      LuceneTaxonomyReader tr = new LuceneTaxonomyReader(tDir);\n\n      // Get all of the documents and run the query, then do different\n      // facet counts and compare to control\n      Query q = new TermQuery(new Term(\"content\", \"alpha\"));\n      ScoredDocIdCollector scoredDoc = ScoredDocIdCollector.create(is.maxDoc(), true);\n\n      // Collector collector = new MultiCollector(scoredDoc);\n      is.search(q, scoredDoc);\n\n      CountFacetRequest cfra23 = new CountFacetRequest(\n          new CategoryPath(\"a\"), 2);\n      cfra23.setDepth(3);\n      cfra23.setResultMode(ResultMode.PER_NODE_IN_TREE);\n\n      CountFacetRequest cfra22 = new CountFacetRequest(\n          new CategoryPath(\"a\"), 2);\n      cfra22.setDepth(2);\n      cfra22.setResultMode(ResultMode.PER_NODE_IN_TREE);\n\n      CountFacetRequest cfra21 = new CountFacetRequest(\n          new CategoryPath(\"a\"), 2);\n      cfra21.setDepth(1);\n      cfra21.setResultMode(ResultMode.PER_NODE_IN_TREE);\n\n      CountFacetRequest cfrb22 = new CountFacetRequest(\n          new CategoryPath(\"a\", \"b\"), 2);\n      cfrb22.setDepth(2);\n      cfrb22.setResultMode(ResultMode.PER_NODE_IN_TREE);\n\n      CountFacetRequest cfrb23 = new CountFacetRequest(\n          new CategoryPath(\"a\", \"b\"), 2);\n      cfrb23.setDepth(3);\n      cfrb23.setResultMode(ResultMode.PER_NODE_IN_TREE);\n\n      CountFacetRequest cfrb21 = new CountFacetRequest(\n          new CategoryPath(\"a\", \"b\"), 2);\n      cfrb21.setDepth(1);\n      cfrb21.setResultMode(ResultMode.PER_NODE_IN_TREE);\n\n      CountFacetRequest doctor = new CountFacetRequest(\n          new CategoryPath(\"Doctor\"), 2);\n      doctor.setDepth(1);\n      doctor.setResultMode(ResultMode.PER_NODE_IN_TREE);\n\n      CountFacetRequest cfrb20 = new CountFacetRequest(\n          new CategoryPath(\"a\", \"b\"), 2);\n      cfrb20.setDepth(0);\n      cfrb20.setResultMode(ResultMode.PER_NODE_IN_TREE);\n\n      FacetSearchParams facetSearchParams = new FacetSearchParams(iParams);\n      facetSearchParams.addFacetRequest(cfra23);\n      facetSearchParams.addFacetRequest(cfra22);\n      facetSearchParams.addFacetRequest(cfra21);\n      facetSearchParams.addFacetRequest(cfrb23);\n      facetSearchParams.addFacetRequest(cfrb22);\n      facetSearchParams.addFacetRequest(cfrb21);\n      facetSearchParams.addFacetRequest(doctor);\n      facetSearchParams.addFacetRequest(cfrb20);\n      \n      IntArrayAllocator iaa = new IntArrayAllocator(PartitionsUtils.partitionSize(facetSearchParams,tr), 1);\n      FloatArrayAllocator faa = new FloatArrayAllocator(PartitionsUtils.partitionSize(facetSearchParams,tr), 1);\n      FacetsAccumulator fctExtrctr = new StandardFacetsAccumulator(facetSearchParams, is.getIndexReader(), tr, iaa, faa);\n      fctExtrctr.setComplementThreshold(FacetsAccumulator.DISABLE_COMPLEMENT);\n      long start = System.currentTimeMillis();\n\n      List<FacetResult> facetResults = fctExtrctr.accumulate(scoredDoc.getScoredDocIDs());\n\n      long end = System.currentTimeMillis();\n      if (VERBOSE) {\n        System.out.println(\"Time: \" + (end - start));\n      }\n      \n      FacetResult fr = facetResults.get(0); // a, depth=3, K=2\n      boolean hasDoctor = \"Doctor\".equals(fr.getFacetRequest().getCategoryPath().getComponent(0));\n      assertEquals(9, fr.getNumValidDescendants());\n      FacetResultNode parentRes = fr.getFacetResultNode();\n      assertEquals(16.0, parentRes.getValue(), Double.MIN_VALUE);\n      assertEquals(2.0, parentRes.getResidue(), Double.MIN_VALUE);\n      assertEquals(2, parentRes.getNumSubResults());\n      // two nodes sorted by descending values: a/b with 8  and a/c with 6\n      // a/b has residue 2 and two children a/b/2 with value 3, and a/b/1 with value 2. \n      // a/c has residue 0, and one child a/c/1 with value 1.\n      double [] expectedValues0 = { 8.0, 2.0, 3.0, 0.0, 2.0, 0.0, 6.0, 0.0, 1.0, 0.0 };\n      int i = 0;\n      for (FacetResultNode node : parentRes.getSubResults()) {\n        assertEquals(expectedValues0[i++], node.getValue(), Double.MIN_VALUE);\n        assertEquals(expectedValues0[i++], node.getResidue(), Double.MIN_VALUE);\n        for (FacetResultNode node2 : node.getSubResults()) {\n          assertEquals(expectedValues0[i++], node2.getValue(), Double.MIN_VALUE);\n          assertEquals(expectedValues0[i++], node2.getResidue(), Double.MIN_VALUE);\n        }\n      }\n\n      // now just change the value of the first child of the root to 5, and then rearrange\n      // expected are: first a/c of value 6 and residue 0, and one child a/c/1 with value 1\n      // then a/b with value 5 and residue 2, and both children: a/b/2 with value 3, and a/b/1 with value 2.\n      for (FacetResultNode node : parentRes.getSubResults()) {\n        node.setValue(5.0);\n        break;\n      }\n      // now rearrange\n      double [] expectedValues00 = { 6.0, 0.0, 1.0, 0.0, 5.0, 2.0, 3.0, 0.0, 2.0, 0.0 };\n      fr = cfra23.createFacetResultsHandler(tr).rearrangeFacetResult(fr);\n      i = 0;\n      for (FacetResultNode node : parentRes.getSubResults()) {\n        assertEquals(expectedValues00[i++], node.getValue(), Double.MIN_VALUE);\n        assertEquals(expectedValues00[i++], node.getResidue(), Double.MIN_VALUE);\n        for (FacetResultNode node2 : node.getSubResults()) {\n          assertEquals(expectedValues00[i++], node2.getValue(), Double.MIN_VALUE);\n          assertEquals(expectedValues00[i++], node2.getResidue(), Double.MIN_VALUE);\n        }\n      }\n\n      fr = facetResults.get(1); // a, depth=2, K=2. same result as before\n      hasDoctor |= \"Doctor\".equals(fr.getFacetRequest().getCategoryPath().getComponent(0));\n      assertEquals(9, fr.getNumValidDescendants());\n      parentRes = fr.getFacetResultNode();\n      assertEquals(16.0, parentRes.getValue(), Double.MIN_VALUE);\n      assertEquals(2.0, parentRes.getResidue(), Double.MIN_VALUE);\n      assertEquals(2, parentRes.getNumSubResults());\n      // two nodes sorted by descending values: a/b with 8  and a/c with 6\n      // a/b has residue 2 and two children a/b/2 with value 3, and a/b/1 with value 2. \n      // a/c has residue 0, and one child a/c/1 with value 1.\n      i = 0;\n      for (FacetResultNode node : parentRes.getSubResults()) {\n        assertEquals(expectedValues0[i++], node.getValue(), Double.MIN_VALUE);\n        assertEquals(expectedValues0[i++], node.getResidue(), Double.MIN_VALUE);\n        for (FacetResultNode node2 : node.getSubResults()) {\n          assertEquals(expectedValues0[i++], node2.getValue(), Double.MIN_VALUE);\n          assertEquals(expectedValues0[i++], node2.getResidue(), Double.MIN_VALUE);\n        }\n      }\n\n      fr = facetResults.get(2); // a, depth=1, K=2\n      hasDoctor |= \"Doctor\".equals(fr.getFacetRequest().getCategoryPath().getComponent(0));\n      assertEquals(4, fr.getNumValidDescendants(), 4);\n      parentRes = fr.getFacetResultNode();\n      assertEquals(16.0, parentRes.getValue(), Double.MIN_VALUE);\n      assertEquals(2.0, parentRes.getResidue(), Double.MIN_VALUE);\n      assertEquals(2, parentRes.getNumSubResults());\n      // two nodes sorted by descending values: \n      // a/b with value 8 and residue 0 (because no children considered),  \n      //  and a/c with value 6 and residue 0 (because no children considered)\n      double [] expectedValues2 = { 8.0, 0.0, 6.0, 0.0 };\n      i = 0;\n      for (FacetResultNode node : parentRes.getSubResults()) {\n        assertEquals(expectedValues2[i++], node.getValue(), Double.MIN_VALUE);\n        assertEquals(expectedValues2[i++], node.getResidue(), Double.MIN_VALUE);\n        assertEquals(node.getNumSubResults(), 0);\n      }\n      \n      fr = facetResults.get(3); // a/b, depth=3, K=2\n      hasDoctor |= \"Doctor\".equals(fr.getFacetRequest().getCategoryPath().getComponent(0));\n      assertEquals(4, fr.getNumValidDescendants());\n      parentRes = fr.getFacetResultNode();\n      assertEquals(8.0, parentRes.getValue(), Double.MIN_VALUE);\n      assertEquals(2.0, parentRes.getResidue(), Double.MIN_VALUE);\n      assertEquals(2, parentRes.getNumSubResults());\n      double [] expectedValues3 = { 3.0, 2.0 };\n      i = 0;\n      for (FacetResultNode node : parentRes.getSubResults()) {\n        assertEquals(expectedValues3[i++], node.getValue(), Double.MIN_VALUE);\n        assertEquals(0.0, node.getResidue(), Double.MIN_VALUE);\n        assertEquals(0, node.getNumSubResults());\n      }\n\n      fr = facetResults.get(4); // a/b, depth=2, K=2\n      hasDoctor |= \"Doctor\".equals(fr.getFacetRequest().getCategoryPath().getComponent(0));\n      assertEquals(4, fr.getNumValidDescendants());\n      parentRes = fr.getFacetResultNode();\n      assertEquals(8.0, parentRes.getValue(), Double.MIN_VALUE);\n      assertEquals(2.0, parentRes.getResidue(), Double.MIN_VALUE);\n      assertEquals(2, parentRes.getNumSubResults());\n      i = 0;\n      for (FacetResultNode node : parentRes.getSubResults()) {\n        assertEquals(expectedValues3[i++], node.getValue(), Double.MIN_VALUE);\n        assertEquals(0.0, node.getResidue(), Double.MIN_VALUE);\n        assertEquals(0, node.getNumSubResults());\n      }\n\n      fr = facetResults.get(5); // a/b, depth=1, K=2\n      hasDoctor |= \"Doctor\".equals(fr.getFacetRequest().getCategoryPath().getComponent(0));\n      assertEquals(4, fr.getNumValidDescendants());\n      parentRes = fr.getFacetResultNode();\n      assertEquals(8.0, parentRes.getValue(), Double.MIN_VALUE);\n      assertEquals(2.0, parentRes.getResidue(), Double.MIN_VALUE);\n      assertEquals(2, parentRes.getNumSubResults());\n      i = 0;\n      for (FacetResultNode node : parentRes.getSubResults()) {\n        assertEquals(expectedValues3[i++], node.getValue(), Double.MIN_VALUE);\n        assertEquals(0.0, node.getResidue(), Double.MIN_VALUE);\n        assertEquals(0, node.getNumSubResults());\n      }\n      \n      fr = facetResults.get(6); // a/b, depth=0, K=2\n      hasDoctor |= \"Doctor\".equals(fr.getFacetRequest().getCategoryPath().getComponent(0));\n      assertEquals(0, fr.getNumValidDescendants()); // 0 descendants but rootnode\n      parentRes = fr.getFacetResultNode();\n      assertEquals(8.0, parentRes.getValue(), Double.MIN_VALUE);\n      assertEquals(0.0, parentRes.getResidue(), Double.MIN_VALUE);\n      assertEquals(0, parentRes.getNumSubResults());\n      hasDoctor |= \"Doctor\".equals(fr.getFacetRequest().getCategoryPath().getComponent(0));\n\n      // doctor, depth=1, K=2\n      assertFalse(\"Shouldn't have found anything for a FacetRequest \" +\n          \"of a facet that doesn't exist in the index.\", hasDoctor);\n      assertEquals(\"Shouldn't have found more than seven request.\", 7, facetResults.size());\n      ir.close();\n      tr.close();\n      iDir.close();\n      tDir.close();\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/facet/src/test/org/apache/lucene/facet/search/TestTopKInEachNodeResultHandler#testSimple().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testSimple() throws Exception {\n\n    int[] partitionSizes = new int[] { \n        2,3,4, 5, 6, 7, 10, 1000,\n        Integer.MAX_VALUE };\n\n    for (int partitionSize : partitionSizes) {\n      Directory iDir = newDirectory();\n      Directory tDir = newDirectory();\n\n      if (VERBOSE) {\n        System.out.println(\"Partition Size: \" + partitionSize);\n      }\n      \n      final int pSize = partitionSize;\n      DefaultFacetIndexingParams iParams = new DefaultFacetIndexingParams() {\n        @Override\n        protected int fixedPartitionSize() {\n          return pSize;\n        }\n      };\n\n      RandomIndexWriter iw = new RandomIndexWriter(random, iDir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT,\n              new MockAnalyzer(random)).setOpenMode(OpenMode.CREATE));\n      TaxonomyWriter tw = new LuceneTaxonomyWriter(tDir);\n      prvt_add(iParams, iw, tw, \"a\", \"b\");\n      prvt_add(iParams, iw, tw, \"a\", \"b\", \"1\");\n      prvt_add(iParams, iw, tw, \"a\", \"b\", \"1\");\n      prvt_add(iParams, iw, tw, \"a\", \"b\", \"2\");\n      prvt_add(iParams, iw, tw, \"a\", \"b\", \"2\");\n      prvt_add(iParams, iw, tw, \"a\", \"b\", \"2\");\n      prvt_add(iParams, iw, tw, \"a\", \"b\", \"3\");\n      prvt_add(iParams, iw, tw, \"a\", \"b\", \"4\");\n      prvt_add(iParams, iw, tw, \"a\", \"c\");\n      prvt_add(iParams, iw, tw, \"a\", \"c\");\n      prvt_add(iParams, iw, tw, \"a\", \"c\");\n      prvt_add(iParams, iw, tw, \"a\", \"c\");\n      prvt_add(iParams, iw, tw, \"a\", \"c\");\n      prvt_add(iParams, iw, tw, \"a\", \"c\", \"1\");\n      prvt_add(iParams, iw, tw, \"a\", \"d\");\n      prvt_add(iParams, iw, tw, \"a\", \"e\");\n\n      IndexReader ir = iw.getReader();\n      iw.close();\n      tw.commit();\n      tw.close();\n\n      IndexSearcher is = newSearcher(ir);\n      LuceneTaxonomyReader tr = new LuceneTaxonomyReader(tDir);\n\n      // Get all of the documents and run the query, then do different\n      // facet counts and compare to control\n      Query q = new TermQuery(new Term(\"content\", \"alpha\"));\n      ScoredDocIdCollector scoredDoc = ScoredDocIdCollector.create(is.maxDoc(), true);\n\n      // Collector collector = new MultiCollector(scoredDoc);\n      is.search(q, scoredDoc);\n\n      CountFacetRequest cfra23 = new CountFacetRequest(\n          new CategoryPath(\"a\"), 2);\n      cfra23.setDepth(3);\n      cfra23.setResultMode(ResultMode.PER_NODE_IN_TREE);\n\n      CountFacetRequest cfra22 = new CountFacetRequest(\n          new CategoryPath(\"a\"), 2);\n      cfra22.setDepth(2);\n      cfra22.setResultMode(ResultMode.PER_NODE_IN_TREE);\n\n      CountFacetRequest cfra21 = new CountFacetRequest(\n          new CategoryPath(\"a\"), 2);\n      cfra21.setDepth(1);\n      cfra21.setResultMode(ResultMode.PER_NODE_IN_TREE);\n\n      CountFacetRequest cfrb22 = new CountFacetRequest(\n          new CategoryPath(\"a\", \"b\"), 2);\n      cfrb22.setDepth(2);\n      cfrb22.setResultMode(ResultMode.PER_NODE_IN_TREE);\n\n      CountFacetRequest cfrb23 = new CountFacetRequest(\n          new CategoryPath(\"a\", \"b\"), 2);\n      cfrb23.setDepth(3);\n      cfrb23.setResultMode(ResultMode.PER_NODE_IN_TREE);\n\n      CountFacetRequest cfrb21 = new CountFacetRequest(\n          new CategoryPath(\"a\", \"b\"), 2);\n      cfrb21.setDepth(1);\n      cfrb21.setResultMode(ResultMode.PER_NODE_IN_TREE);\n\n      CountFacetRequest doctor = new CountFacetRequest(\n          new CategoryPath(\"Doctor\"), 2);\n      doctor.setDepth(1);\n      doctor.setResultMode(ResultMode.PER_NODE_IN_TREE);\n\n      CountFacetRequest cfrb20 = new CountFacetRequest(\n          new CategoryPath(\"a\", \"b\"), 2);\n      cfrb20.setDepth(0);\n      cfrb20.setResultMode(ResultMode.PER_NODE_IN_TREE);\n\n      FacetSearchParams facetSearchParams = new FacetSearchParams(iParams);\n      facetSearchParams.addFacetRequest(cfra23);\n      facetSearchParams.addFacetRequest(cfra22);\n      facetSearchParams.addFacetRequest(cfra21);\n      facetSearchParams.addFacetRequest(cfrb23);\n      facetSearchParams.addFacetRequest(cfrb22);\n      facetSearchParams.addFacetRequest(cfrb21);\n      facetSearchParams.addFacetRequest(doctor);\n      facetSearchParams.addFacetRequest(cfrb20);\n      \n      IntArrayAllocator iaa = new IntArrayAllocator(PartitionsUtils.partitionSize(facetSearchParams,tr), 1);\n      FloatArrayAllocator faa = new FloatArrayAllocator(PartitionsUtils.partitionSize(facetSearchParams,tr), 1);\n      FacetsAccumulator fctExtrctr = new StandardFacetsAccumulator(facetSearchParams, is.getIndexReader(), tr, iaa, faa);\n      fctExtrctr.setComplementThreshold(FacetsAccumulator.DISABLE_COMPLEMENT);\n      long start = System.currentTimeMillis();\n\n      List<FacetResult> facetResults = fctExtrctr.accumulate(scoredDoc.getScoredDocIDs());\n\n      long end = System.currentTimeMillis();\n      if (VERBOSE) {\n        System.out.println(\"Time: \" + (end - start));\n      }\n      \n      FacetResult fr = facetResults.get(0); // a, depth=3, K=2\n      boolean hasDoctor = \"Doctor\".equals(fr.getFacetRequest().getCategoryPath().getComponent(0));\n      assertEquals(9, fr.getNumValidDescendants());\n      FacetResultNode parentRes = fr.getFacetResultNode();\n      assertEquals(16.0, parentRes.getValue(), Double.MIN_VALUE);\n      assertEquals(2.0, parentRes.getResidue(), Double.MIN_VALUE);\n      assertEquals(2, parentRes.getNumSubResults());\n      // two nodes sorted by descending values: a/b with 8  and a/c with 6\n      // a/b has residue 2 and two children a/b/2 with value 3, and a/b/1 with value 2. \n      // a/c has residue 0, and one child a/c/1 with value 1.\n      double [] expectedValues0 = { 8.0, 2.0, 3.0, 0.0, 2.0, 0.0, 6.0, 0.0, 1.0, 0.0 };\n      int i = 0;\n      for (FacetResultNode node : parentRes.getSubResults()) {\n        assertEquals(expectedValues0[i++], node.getValue(), Double.MIN_VALUE);\n        assertEquals(expectedValues0[i++], node.getResidue(), Double.MIN_VALUE);\n        for (FacetResultNode node2 : node.getSubResults()) {\n          assertEquals(expectedValues0[i++], node2.getValue(), Double.MIN_VALUE);\n          assertEquals(expectedValues0[i++], node2.getResidue(), Double.MIN_VALUE);\n        }\n      }\n\n      // now just change the value of the first child of the root to 5, and then rearrange\n      // expected are: first a/c of value 6 and residue 0, and one child a/c/1 with value 1\n      // then a/b with value 5 and residue 2, and both children: a/b/2 with value 3, and a/b/1 with value 2.\n      for (FacetResultNode node : parentRes.getSubResults()) {\n        node.setValue(5.0);\n        break;\n      }\n      // now rearrange\n      double [] expectedValues00 = { 6.0, 0.0, 1.0, 0.0, 5.0, 2.0, 3.0, 0.0, 2.0, 0.0 };\n      fr = cfra23.createFacetResultsHandler(tr).rearrangeFacetResult(fr);\n      i = 0;\n      for (FacetResultNode node : parentRes.getSubResults()) {\n        assertEquals(expectedValues00[i++], node.getValue(), Double.MIN_VALUE);\n        assertEquals(expectedValues00[i++], node.getResidue(), Double.MIN_VALUE);\n        for (FacetResultNode node2 : node.getSubResults()) {\n          assertEquals(expectedValues00[i++], node2.getValue(), Double.MIN_VALUE);\n          assertEquals(expectedValues00[i++], node2.getResidue(), Double.MIN_VALUE);\n        }\n      }\n\n      fr = facetResults.get(1); // a, depth=2, K=2. same result as before\n      hasDoctor |= \"Doctor\".equals(fr.getFacetRequest().getCategoryPath().getComponent(0));\n      assertEquals(9, fr.getNumValidDescendants());\n      parentRes = fr.getFacetResultNode();\n      assertEquals(16.0, parentRes.getValue(), Double.MIN_VALUE);\n      assertEquals(2.0, parentRes.getResidue(), Double.MIN_VALUE);\n      assertEquals(2, parentRes.getNumSubResults());\n      // two nodes sorted by descending values: a/b with 8  and a/c with 6\n      // a/b has residue 2 and two children a/b/2 with value 3, and a/b/1 with value 2. \n      // a/c has residue 0, and one child a/c/1 with value 1.\n      i = 0;\n      for (FacetResultNode node : parentRes.getSubResults()) {\n        assertEquals(expectedValues0[i++], node.getValue(), Double.MIN_VALUE);\n        assertEquals(expectedValues0[i++], node.getResidue(), Double.MIN_VALUE);\n        for (FacetResultNode node2 : node.getSubResults()) {\n          assertEquals(expectedValues0[i++], node2.getValue(), Double.MIN_VALUE);\n          assertEquals(expectedValues0[i++], node2.getResidue(), Double.MIN_VALUE);\n        }\n      }\n\n      fr = facetResults.get(2); // a, depth=1, K=2\n      hasDoctor |= \"Doctor\".equals(fr.getFacetRequest().getCategoryPath().getComponent(0));\n      assertEquals(4, fr.getNumValidDescendants(), 4);\n      parentRes = fr.getFacetResultNode();\n      assertEquals(16.0, parentRes.getValue(), Double.MIN_VALUE);\n      assertEquals(2.0, parentRes.getResidue(), Double.MIN_VALUE);\n      assertEquals(2, parentRes.getNumSubResults());\n      // two nodes sorted by descending values: \n      // a/b with value 8 and residue 0 (because no children considered),  \n      //  and a/c with value 6 and residue 0 (because no children considered)\n      double [] expectedValues2 = { 8.0, 0.0, 6.0, 0.0 };\n      i = 0;\n      for (FacetResultNode node : parentRes.getSubResults()) {\n        assertEquals(expectedValues2[i++], node.getValue(), Double.MIN_VALUE);\n        assertEquals(expectedValues2[i++], node.getResidue(), Double.MIN_VALUE);\n        assertEquals(node.getNumSubResults(), 0);\n      }\n      \n      fr = facetResults.get(3); // a/b, depth=3, K=2\n      hasDoctor |= \"Doctor\".equals(fr.getFacetRequest().getCategoryPath().getComponent(0));\n      assertEquals(4, fr.getNumValidDescendants());\n      parentRes = fr.getFacetResultNode();\n      assertEquals(8.0, parentRes.getValue(), Double.MIN_VALUE);\n      assertEquals(2.0, parentRes.getResidue(), Double.MIN_VALUE);\n      assertEquals(2, parentRes.getNumSubResults());\n      double [] expectedValues3 = { 3.0, 2.0 };\n      i = 0;\n      for (FacetResultNode node : parentRes.getSubResults()) {\n        assertEquals(expectedValues3[i++], node.getValue(), Double.MIN_VALUE);\n        assertEquals(0.0, node.getResidue(), Double.MIN_VALUE);\n        assertEquals(0, node.getNumSubResults());\n      }\n\n      fr = facetResults.get(4); // a/b, depth=2, K=2\n      hasDoctor |= \"Doctor\".equals(fr.getFacetRequest().getCategoryPath().getComponent(0));\n      assertEquals(4, fr.getNumValidDescendants());\n      parentRes = fr.getFacetResultNode();\n      assertEquals(8.0, parentRes.getValue(), Double.MIN_VALUE);\n      assertEquals(2.0, parentRes.getResidue(), Double.MIN_VALUE);\n      assertEquals(2, parentRes.getNumSubResults());\n      i = 0;\n      for (FacetResultNode node : parentRes.getSubResults()) {\n        assertEquals(expectedValues3[i++], node.getValue(), Double.MIN_VALUE);\n        assertEquals(0.0, node.getResidue(), Double.MIN_VALUE);\n        assertEquals(0, node.getNumSubResults());\n      }\n\n      fr = facetResults.get(5); // a/b, depth=1, K=2\n      hasDoctor |= \"Doctor\".equals(fr.getFacetRequest().getCategoryPath().getComponent(0));\n      assertEquals(4, fr.getNumValidDescendants());\n      parentRes = fr.getFacetResultNode();\n      assertEquals(8.0, parentRes.getValue(), Double.MIN_VALUE);\n      assertEquals(2.0, parentRes.getResidue(), Double.MIN_VALUE);\n      assertEquals(2, parentRes.getNumSubResults());\n      i = 0;\n      for (FacetResultNode node : parentRes.getSubResults()) {\n        assertEquals(expectedValues3[i++], node.getValue(), Double.MIN_VALUE);\n        assertEquals(0.0, node.getResidue(), Double.MIN_VALUE);\n        assertEquals(0, node.getNumSubResults());\n      }\n      \n      fr = facetResults.get(6); // a/b, depth=0, K=2\n      hasDoctor |= \"Doctor\".equals(fr.getFacetRequest().getCategoryPath().getComponent(0));\n      assertEquals(0, fr.getNumValidDescendants()); // 0 descendants but rootnode\n      parentRes = fr.getFacetResultNode();\n      assertEquals(8.0, parentRes.getValue(), Double.MIN_VALUE);\n      assertEquals(0.0, parentRes.getResidue(), Double.MIN_VALUE);\n      assertEquals(0, parentRes.getNumSubResults());\n      hasDoctor |= \"Doctor\".equals(fr.getFacetRequest().getCategoryPath().getComponent(0));\n\n      // doctor, depth=1, K=2\n      assertFalse(\"Shouldn't have found anything for a FacetRequest \" +\n          \"of a facet that doesn't exist in the index.\", hasDoctor);\n      assertEquals(\"Shouldn't have found more than seven request.\", 7, facetResults.size());\n      ir.close();\n      tr.close();\n      iDir.close();\n      tDir.close();\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ea469eab8fd0f3032f4fcde1c644a721e8309d3b","date":1320301582,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"modules/facet/src/test/org/apache/lucene/facet/search/TestTopKInEachNodeResultHandler#testSimple().mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/search/TestTopKInEachNodeResultHandler#testSimple().mjava","sourceNew":"  @Test\n  public void testSimple() throws Exception {\n\n    int[] partitionSizes = new int[] { \n        2,3,4, 5, 6, 7, 10, 1000,\n        Integer.MAX_VALUE };\n\n    for (int partitionSize : partitionSizes) {\n      Directory iDir = newDirectory();\n      Directory tDir = newDirectory();\n\n      if (VERBOSE) {\n        System.out.println(\"Partition Size: \" + partitionSize);\n      }\n      \n      final int pSize = partitionSize;\n      DefaultFacetIndexingParams iParams = new DefaultFacetIndexingParams() {\n        @Override\n        protected int fixedPartitionSize() {\n          return pSize;\n        }\n      };\n\n      RandomIndexWriter iw = new RandomIndexWriter(random, iDir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT,\n              new MockAnalyzer(random)).setOpenMode(OpenMode.CREATE));\n      TaxonomyWriter tw = new DirectoryTaxonomyWriter(tDir);\n      prvt_add(iParams, iw, tw, \"a\", \"b\");\n      prvt_add(iParams, iw, tw, \"a\", \"b\", \"1\");\n      prvt_add(iParams, iw, tw, \"a\", \"b\", \"1\");\n      prvt_add(iParams, iw, tw, \"a\", \"b\", \"2\");\n      prvt_add(iParams, iw, tw, \"a\", \"b\", \"2\");\n      prvt_add(iParams, iw, tw, \"a\", \"b\", \"2\");\n      prvt_add(iParams, iw, tw, \"a\", \"b\", \"3\");\n      prvt_add(iParams, iw, tw, \"a\", \"b\", \"4\");\n      prvt_add(iParams, iw, tw, \"a\", \"c\");\n      prvt_add(iParams, iw, tw, \"a\", \"c\");\n      prvt_add(iParams, iw, tw, \"a\", \"c\");\n      prvt_add(iParams, iw, tw, \"a\", \"c\");\n      prvt_add(iParams, iw, tw, \"a\", \"c\");\n      prvt_add(iParams, iw, tw, \"a\", \"c\", \"1\");\n      prvt_add(iParams, iw, tw, \"a\", \"d\");\n      prvt_add(iParams, iw, tw, \"a\", \"e\");\n\n      IndexReader ir = iw.getReader();\n      iw.close();\n      tw.commit();\n      tw.close();\n\n      IndexSearcher is = newSearcher(ir);\n      DirectoryTaxonomyReader tr = new DirectoryTaxonomyReader(tDir);\n\n      // Get all of the documents and run the query, then do different\n      // facet counts and compare to control\n      Query q = new TermQuery(new Term(\"content\", \"alpha\"));\n      ScoredDocIdCollector scoredDoc = ScoredDocIdCollector.create(is.maxDoc(), true);\n\n      // Collector collector = new MultiCollector(scoredDoc);\n      is.search(q, scoredDoc);\n\n      CountFacetRequest cfra23 = new CountFacetRequest(\n          new CategoryPath(\"a\"), 2);\n      cfra23.setDepth(3);\n      cfra23.setResultMode(ResultMode.PER_NODE_IN_TREE);\n\n      CountFacetRequest cfra22 = new CountFacetRequest(\n          new CategoryPath(\"a\"), 2);\n      cfra22.setDepth(2);\n      cfra22.setResultMode(ResultMode.PER_NODE_IN_TREE);\n\n      CountFacetRequest cfra21 = new CountFacetRequest(\n          new CategoryPath(\"a\"), 2);\n      cfra21.setDepth(1);\n      cfra21.setResultMode(ResultMode.PER_NODE_IN_TREE);\n\n      CountFacetRequest cfrb22 = new CountFacetRequest(\n          new CategoryPath(\"a\", \"b\"), 2);\n      cfrb22.setDepth(2);\n      cfrb22.setResultMode(ResultMode.PER_NODE_IN_TREE);\n\n      CountFacetRequest cfrb23 = new CountFacetRequest(\n          new CategoryPath(\"a\", \"b\"), 2);\n      cfrb23.setDepth(3);\n      cfrb23.setResultMode(ResultMode.PER_NODE_IN_TREE);\n\n      CountFacetRequest cfrb21 = new CountFacetRequest(\n          new CategoryPath(\"a\", \"b\"), 2);\n      cfrb21.setDepth(1);\n      cfrb21.setResultMode(ResultMode.PER_NODE_IN_TREE);\n\n      CountFacetRequest doctor = new CountFacetRequest(\n          new CategoryPath(\"Doctor\"), 2);\n      doctor.setDepth(1);\n      doctor.setResultMode(ResultMode.PER_NODE_IN_TREE);\n\n      CountFacetRequest cfrb20 = new CountFacetRequest(\n          new CategoryPath(\"a\", \"b\"), 2);\n      cfrb20.setDepth(0);\n      cfrb20.setResultMode(ResultMode.PER_NODE_IN_TREE);\n\n      FacetSearchParams facetSearchParams = new FacetSearchParams(iParams);\n      facetSearchParams.addFacetRequest(cfra23);\n      facetSearchParams.addFacetRequest(cfra22);\n      facetSearchParams.addFacetRequest(cfra21);\n      facetSearchParams.addFacetRequest(cfrb23);\n      facetSearchParams.addFacetRequest(cfrb22);\n      facetSearchParams.addFacetRequest(cfrb21);\n      facetSearchParams.addFacetRequest(doctor);\n      facetSearchParams.addFacetRequest(cfrb20);\n      \n      IntArrayAllocator iaa = new IntArrayAllocator(PartitionsUtils.partitionSize(facetSearchParams,tr), 1);\n      FloatArrayAllocator faa = new FloatArrayAllocator(PartitionsUtils.partitionSize(facetSearchParams,tr), 1);\n      FacetsAccumulator fctExtrctr = new StandardFacetsAccumulator(facetSearchParams, is.getIndexReader(), tr, iaa, faa);\n      fctExtrctr.setComplementThreshold(FacetsAccumulator.DISABLE_COMPLEMENT);\n      long start = System.currentTimeMillis();\n\n      List<FacetResult> facetResults = fctExtrctr.accumulate(scoredDoc.getScoredDocIDs());\n\n      long end = System.currentTimeMillis();\n      if (VERBOSE) {\n        System.out.println(\"Time: \" + (end - start));\n      }\n      \n      FacetResult fr = facetResults.get(0); // a, depth=3, K=2\n      boolean hasDoctor = \"Doctor\".equals(fr.getFacetRequest().getCategoryPath().getComponent(0));\n      assertEquals(9, fr.getNumValidDescendants());\n      FacetResultNode parentRes = fr.getFacetResultNode();\n      assertEquals(16.0, parentRes.getValue(), Double.MIN_VALUE);\n      assertEquals(2.0, parentRes.getResidue(), Double.MIN_VALUE);\n      assertEquals(2, parentRes.getNumSubResults());\n      // two nodes sorted by descending values: a/b with 8  and a/c with 6\n      // a/b has residue 2 and two children a/b/2 with value 3, and a/b/1 with value 2. \n      // a/c has residue 0, and one child a/c/1 with value 1.\n      double [] expectedValues0 = { 8.0, 2.0, 3.0, 0.0, 2.0, 0.0, 6.0, 0.0, 1.0, 0.0 };\n      int i = 0;\n      for (FacetResultNode node : parentRes.getSubResults()) {\n        assertEquals(expectedValues0[i++], node.getValue(), Double.MIN_VALUE);\n        assertEquals(expectedValues0[i++], node.getResidue(), Double.MIN_VALUE);\n        for (FacetResultNode node2 : node.getSubResults()) {\n          assertEquals(expectedValues0[i++], node2.getValue(), Double.MIN_VALUE);\n          assertEquals(expectedValues0[i++], node2.getResidue(), Double.MIN_VALUE);\n        }\n      }\n\n      // now just change the value of the first child of the root to 5, and then rearrange\n      // expected are: first a/c of value 6 and residue 0, and one child a/c/1 with value 1\n      // then a/b with value 5 and residue 2, and both children: a/b/2 with value 3, and a/b/1 with value 2.\n      for (FacetResultNode node : parentRes.getSubResults()) {\n        node.setValue(5.0);\n        break;\n      }\n      // now rearrange\n      double [] expectedValues00 = { 6.0, 0.0, 1.0, 0.0, 5.0, 2.0, 3.0, 0.0, 2.0, 0.0 };\n      fr = cfra23.createFacetResultsHandler(tr).rearrangeFacetResult(fr);\n      i = 0;\n      for (FacetResultNode node : parentRes.getSubResults()) {\n        assertEquals(expectedValues00[i++], node.getValue(), Double.MIN_VALUE);\n        assertEquals(expectedValues00[i++], node.getResidue(), Double.MIN_VALUE);\n        for (FacetResultNode node2 : node.getSubResults()) {\n          assertEquals(expectedValues00[i++], node2.getValue(), Double.MIN_VALUE);\n          assertEquals(expectedValues00[i++], node2.getResidue(), Double.MIN_VALUE);\n        }\n      }\n\n      fr = facetResults.get(1); // a, depth=2, K=2. same result as before\n      hasDoctor |= \"Doctor\".equals(fr.getFacetRequest().getCategoryPath().getComponent(0));\n      assertEquals(9, fr.getNumValidDescendants());\n      parentRes = fr.getFacetResultNode();\n      assertEquals(16.0, parentRes.getValue(), Double.MIN_VALUE);\n      assertEquals(2.0, parentRes.getResidue(), Double.MIN_VALUE);\n      assertEquals(2, parentRes.getNumSubResults());\n      // two nodes sorted by descending values: a/b with 8  and a/c with 6\n      // a/b has residue 2 and two children a/b/2 with value 3, and a/b/1 with value 2. \n      // a/c has residue 0, and one child a/c/1 with value 1.\n      i = 0;\n      for (FacetResultNode node : parentRes.getSubResults()) {\n        assertEquals(expectedValues0[i++], node.getValue(), Double.MIN_VALUE);\n        assertEquals(expectedValues0[i++], node.getResidue(), Double.MIN_VALUE);\n        for (FacetResultNode node2 : node.getSubResults()) {\n          assertEquals(expectedValues0[i++], node2.getValue(), Double.MIN_VALUE);\n          assertEquals(expectedValues0[i++], node2.getResidue(), Double.MIN_VALUE);\n        }\n      }\n\n      fr = facetResults.get(2); // a, depth=1, K=2\n      hasDoctor |= \"Doctor\".equals(fr.getFacetRequest().getCategoryPath().getComponent(0));\n      assertEquals(4, fr.getNumValidDescendants(), 4);\n      parentRes = fr.getFacetResultNode();\n      assertEquals(16.0, parentRes.getValue(), Double.MIN_VALUE);\n      assertEquals(2.0, parentRes.getResidue(), Double.MIN_VALUE);\n      assertEquals(2, parentRes.getNumSubResults());\n      // two nodes sorted by descending values: \n      // a/b with value 8 and residue 0 (because no children considered),  \n      //  and a/c with value 6 and residue 0 (because no children considered)\n      double [] expectedValues2 = { 8.0, 0.0, 6.0, 0.0 };\n      i = 0;\n      for (FacetResultNode node : parentRes.getSubResults()) {\n        assertEquals(expectedValues2[i++], node.getValue(), Double.MIN_VALUE);\n        assertEquals(expectedValues2[i++], node.getResidue(), Double.MIN_VALUE);\n        assertEquals(node.getNumSubResults(), 0);\n      }\n      \n      fr = facetResults.get(3); // a/b, depth=3, K=2\n      hasDoctor |= \"Doctor\".equals(fr.getFacetRequest().getCategoryPath().getComponent(0));\n      assertEquals(4, fr.getNumValidDescendants());\n      parentRes = fr.getFacetResultNode();\n      assertEquals(8.0, parentRes.getValue(), Double.MIN_VALUE);\n      assertEquals(2.0, parentRes.getResidue(), Double.MIN_VALUE);\n      assertEquals(2, parentRes.getNumSubResults());\n      double [] expectedValues3 = { 3.0, 2.0 };\n      i = 0;\n      for (FacetResultNode node : parentRes.getSubResults()) {\n        assertEquals(expectedValues3[i++], node.getValue(), Double.MIN_VALUE);\n        assertEquals(0.0, node.getResidue(), Double.MIN_VALUE);\n        assertEquals(0, node.getNumSubResults());\n      }\n\n      fr = facetResults.get(4); // a/b, depth=2, K=2\n      hasDoctor |= \"Doctor\".equals(fr.getFacetRequest().getCategoryPath().getComponent(0));\n      assertEquals(4, fr.getNumValidDescendants());\n      parentRes = fr.getFacetResultNode();\n      assertEquals(8.0, parentRes.getValue(), Double.MIN_VALUE);\n      assertEquals(2.0, parentRes.getResidue(), Double.MIN_VALUE);\n      assertEquals(2, parentRes.getNumSubResults());\n      i = 0;\n      for (FacetResultNode node : parentRes.getSubResults()) {\n        assertEquals(expectedValues3[i++], node.getValue(), Double.MIN_VALUE);\n        assertEquals(0.0, node.getResidue(), Double.MIN_VALUE);\n        assertEquals(0, node.getNumSubResults());\n      }\n\n      fr = facetResults.get(5); // a/b, depth=1, K=2\n      hasDoctor |= \"Doctor\".equals(fr.getFacetRequest().getCategoryPath().getComponent(0));\n      assertEquals(4, fr.getNumValidDescendants());\n      parentRes = fr.getFacetResultNode();\n      assertEquals(8.0, parentRes.getValue(), Double.MIN_VALUE);\n      assertEquals(2.0, parentRes.getResidue(), Double.MIN_VALUE);\n      assertEquals(2, parentRes.getNumSubResults());\n      i = 0;\n      for (FacetResultNode node : parentRes.getSubResults()) {\n        assertEquals(expectedValues3[i++], node.getValue(), Double.MIN_VALUE);\n        assertEquals(0.0, node.getResidue(), Double.MIN_VALUE);\n        assertEquals(0, node.getNumSubResults());\n      }\n      \n      fr = facetResults.get(6); // a/b, depth=0, K=2\n      hasDoctor |= \"Doctor\".equals(fr.getFacetRequest().getCategoryPath().getComponent(0));\n      assertEquals(0, fr.getNumValidDescendants()); // 0 descendants but rootnode\n      parentRes = fr.getFacetResultNode();\n      assertEquals(8.0, parentRes.getValue(), Double.MIN_VALUE);\n      assertEquals(0.0, parentRes.getResidue(), Double.MIN_VALUE);\n      assertEquals(0, parentRes.getNumSubResults());\n      hasDoctor |= \"Doctor\".equals(fr.getFacetRequest().getCategoryPath().getComponent(0));\n\n      // doctor, depth=1, K=2\n      assertFalse(\"Shouldn't have found anything for a FacetRequest \" +\n          \"of a facet that doesn't exist in the index.\", hasDoctor);\n      assertEquals(\"Shouldn't have found more than seven request.\", 7, facetResults.size());\n      ir.close();\n      tr.close();\n      iDir.close();\n      tDir.close();\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testSimple() throws Exception {\n\n    int[] partitionSizes = new int[] { \n        2,3,4, 5, 6, 7, 10, 1000,\n        Integer.MAX_VALUE };\n\n    for (int partitionSize : partitionSizes) {\n      Directory iDir = newDirectory();\n      Directory tDir = newDirectory();\n\n      if (VERBOSE) {\n        System.out.println(\"Partition Size: \" + partitionSize);\n      }\n      \n      final int pSize = partitionSize;\n      DefaultFacetIndexingParams iParams = new DefaultFacetIndexingParams() {\n        @Override\n        protected int fixedPartitionSize() {\n          return pSize;\n        }\n      };\n\n      RandomIndexWriter iw = new RandomIndexWriter(random, iDir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT,\n              new MockAnalyzer(random)).setOpenMode(OpenMode.CREATE));\n      TaxonomyWriter tw = new LuceneTaxonomyWriter(tDir);\n      prvt_add(iParams, iw, tw, \"a\", \"b\");\n      prvt_add(iParams, iw, tw, \"a\", \"b\", \"1\");\n      prvt_add(iParams, iw, tw, \"a\", \"b\", \"1\");\n      prvt_add(iParams, iw, tw, \"a\", \"b\", \"2\");\n      prvt_add(iParams, iw, tw, \"a\", \"b\", \"2\");\n      prvt_add(iParams, iw, tw, \"a\", \"b\", \"2\");\n      prvt_add(iParams, iw, tw, \"a\", \"b\", \"3\");\n      prvt_add(iParams, iw, tw, \"a\", \"b\", \"4\");\n      prvt_add(iParams, iw, tw, \"a\", \"c\");\n      prvt_add(iParams, iw, tw, \"a\", \"c\");\n      prvt_add(iParams, iw, tw, \"a\", \"c\");\n      prvt_add(iParams, iw, tw, \"a\", \"c\");\n      prvt_add(iParams, iw, tw, \"a\", \"c\");\n      prvt_add(iParams, iw, tw, \"a\", \"c\", \"1\");\n      prvt_add(iParams, iw, tw, \"a\", \"d\");\n      prvt_add(iParams, iw, tw, \"a\", \"e\");\n\n      IndexReader ir = iw.getReader();\n      iw.close();\n      tw.commit();\n      tw.close();\n\n      IndexSearcher is = newSearcher(ir);\n      LuceneTaxonomyReader tr = new LuceneTaxonomyReader(tDir);\n\n      // Get all of the documents and run the query, then do different\n      // facet counts and compare to control\n      Query q = new TermQuery(new Term(\"content\", \"alpha\"));\n      ScoredDocIdCollector scoredDoc = ScoredDocIdCollector.create(is.maxDoc(), true);\n\n      // Collector collector = new MultiCollector(scoredDoc);\n      is.search(q, scoredDoc);\n\n      CountFacetRequest cfra23 = new CountFacetRequest(\n          new CategoryPath(\"a\"), 2);\n      cfra23.setDepth(3);\n      cfra23.setResultMode(ResultMode.PER_NODE_IN_TREE);\n\n      CountFacetRequest cfra22 = new CountFacetRequest(\n          new CategoryPath(\"a\"), 2);\n      cfra22.setDepth(2);\n      cfra22.setResultMode(ResultMode.PER_NODE_IN_TREE);\n\n      CountFacetRequest cfra21 = new CountFacetRequest(\n          new CategoryPath(\"a\"), 2);\n      cfra21.setDepth(1);\n      cfra21.setResultMode(ResultMode.PER_NODE_IN_TREE);\n\n      CountFacetRequest cfrb22 = new CountFacetRequest(\n          new CategoryPath(\"a\", \"b\"), 2);\n      cfrb22.setDepth(2);\n      cfrb22.setResultMode(ResultMode.PER_NODE_IN_TREE);\n\n      CountFacetRequest cfrb23 = new CountFacetRequest(\n          new CategoryPath(\"a\", \"b\"), 2);\n      cfrb23.setDepth(3);\n      cfrb23.setResultMode(ResultMode.PER_NODE_IN_TREE);\n\n      CountFacetRequest cfrb21 = new CountFacetRequest(\n          new CategoryPath(\"a\", \"b\"), 2);\n      cfrb21.setDepth(1);\n      cfrb21.setResultMode(ResultMode.PER_NODE_IN_TREE);\n\n      CountFacetRequest doctor = new CountFacetRequest(\n          new CategoryPath(\"Doctor\"), 2);\n      doctor.setDepth(1);\n      doctor.setResultMode(ResultMode.PER_NODE_IN_TREE);\n\n      CountFacetRequest cfrb20 = new CountFacetRequest(\n          new CategoryPath(\"a\", \"b\"), 2);\n      cfrb20.setDepth(0);\n      cfrb20.setResultMode(ResultMode.PER_NODE_IN_TREE);\n\n      FacetSearchParams facetSearchParams = new FacetSearchParams(iParams);\n      facetSearchParams.addFacetRequest(cfra23);\n      facetSearchParams.addFacetRequest(cfra22);\n      facetSearchParams.addFacetRequest(cfra21);\n      facetSearchParams.addFacetRequest(cfrb23);\n      facetSearchParams.addFacetRequest(cfrb22);\n      facetSearchParams.addFacetRequest(cfrb21);\n      facetSearchParams.addFacetRequest(doctor);\n      facetSearchParams.addFacetRequest(cfrb20);\n      \n      IntArrayAllocator iaa = new IntArrayAllocator(PartitionsUtils.partitionSize(facetSearchParams,tr), 1);\n      FloatArrayAllocator faa = new FloatArrayAllocator(PartitionsUtils.partitionSize(facetSearchParams,tr), 1);\n      FacetsAccumulator fctExtrctr = new StandardFacetsAccumulator(facetSearchParams, is.getIndexReader(), tr, iaa, faa);\n      fctExtrctr.setComplementThreshold(FacetsAccumulator.DISABLE_COMPLEMENT);\n      long start = System.currentTimeMillis();\n\n      List<FacetResult> facetResults = fctExtrctr.accumulate(scoredDoc.getScoredDocIDs());\n\n      long end = System.currentTimeMillis();\n      if (VERBOSE) {\n        System.out.println(\"Time: \" + (end - start));\n      }\n      \n      FacetResult fr = facetResults.get(0); // a, depth=3, K=2\n      boolean hasDoctor = \"Doctor\".equals(fr.getFacetRequest().getCategoryPath().getComponent(0));\n      assertEquals(9, fr.getNumValidDescendants());\n      FacetResultNode parentRes = fr.getFacetResultNode();\n      assertEquals(16.0, parentRes.getValue(), Double.MIN_VALUE);\n      assertEquals(2.0, parentRes.getResidue(), Double.MIN_VALUE);\n      assertEquals(2, parentRes.getNumSubResults());\n      // two nodes sorted by descending values: a/b with 8  and a/c with 6\n      // a/b has residue 2 and two children a/b/2 with value 3, and a/b/1 with value 2. \n      // a/c has residue 0, and one child a/c/1 with value 1.\n      double [] expectedValues0 = { 8.0, 2.0, 3.0, 0.0, 2.0, 0.0, 6.0, 0.0, 1.0, 0.0 };\n      int i = 0;\n      for (FacetResultNode node : parentRes.getSubResults()) {\n        assertEquals(expectedValues0[i++], node.getValue(), Double.MIN_VALUE);\n        assertEquals(expectedValues0[i++], node.getResidue(), Double.MIN_VALUE);\n        for (FacetResultNode node2 : node.getSubResults()) {\n          assertEquals(expectedValues0[i++], node2.getValue(), Double.MIN_VALUE);\n          assertEquals(expectedValues0[i++], node2.getResidue(), Double.MIN_VALUE);\n        }\n      }\n\n      // now just change the value of the first child of the root to 5, and then rearrange\n      // expected are: first a/c of value 6 and residue 0, and one child a/c/1 with value 1\n      // then a/b with value 5 and residue 2, and both children: a/b/2 with value 3, and a/b/1 with value 2.\n      for (FacetResultNode node : parentRes.getSubResults()) {\n        node.setValue(5.0);\n        break;\n      }\n      // now rearrange\n      double [] expectedValues00 = { 6.0, 0.0, 1.0, 0.0, 5.0, 2.0, 3.0, 0.0, 2.0, 0.0 };\n      fr = cfra23.createFacetResultsHandler(tr).rearrangeFacetResult(fr);\n      i = 0;\n      for (FacetResultNode node : parentRes.getSubResults()) {\n        assertEquals(expectedValues00[i++], node.getValue(), Double.MIN_VALUE);\n        assertEquals(expectedValues00[i++], node.getResidue(), Double.MIN_VALUE);\n        for (FacetResultNode node2 : node.getSubResults()) {\n          assertEquals(expectedValues00[i++], node2.getValue(), Double.MIN_VALUE);\n          assertEquals(expectedValues00[i++], node2.getResidue(), Double.MIN_VALUE);\n        }\n      }\n\n      fr = facetResults.get(1); // a, depth=2, K=2. same result as before\n      hasDoctor |= \"Doctor\".equals(fr.getFacetRequest().getCategoryPath().getComponent(0));\n      assertEquals(9, fr.getNumValidDescendants());\n      parentRes = fr.getFacetResultNode();\n      assertEquals(16.0, parentRes.getValue(), Double.MIN_VALUE);\n      assertEquals(2.0, parentRes.getResidue(), Double.MIN_VALUE);\n      assertEquals(2, parentRes.getNumSubResults());\n      // two nodes sorted by descending values: a/b with 8  and a/c with 6\n      // a/b has residue 2 and two children a/b/2 with value 3, and a/b/1 with value 2. \n      // a/c has residue 0, and one child a/c/1 with value 1.\n      i = 0;\n      for (FacetResultNode node : parentRes.getSubResults()) {\n        assertEquals(expectedValues0[i++], node.getValue(), Double.MIN_VALUE);\n        assertEquals(expectedValues0[i++], node.getResidue(), Double.MIN_VALUE);\n        for (FacetResultNode node2 : node.getSubResults()) {\n          assertEquals(expectedValues0[i++], node2.getValue(), Double.MIN_VALUE);\n          assertEquals(expectedValues0[i++], node2.getResidue(), Double.MIN_VALUE);\n        }\n      }\n\n      fr = facetResults.get(2); // a, depth=1, K=2\n      hasDoctor |= \"Doctor\".equals(fr.getFacetRequest().getCategoryPath().getComponent(0));\n      assertEquals(4, fr.getNumValidDescendants(), 4);\n      parentRes = fr.getFacetResultNode();\n      assertEquals(16.0, parentRes.getValue(), Double.MIN_VALUE);\n      assertEquals(2.0, parentRes.getResidue(), Double.MIN_VALUE);\n      assertEquals(2, parentRes.getNumSubResults());\n      // two nodes sorted by descending values: \n      // a/b with value 8 and residue 0 (because no children considered),  \n      //  and a/c with value 6 and residue 0 (because no children considered)\n      double [] expectedValues2 = { 8.0, 0.0, 6.0, 0.0 };\n      i = 0;\n      for (FacetResultNode node : parentRes.getSubResults()) {\n        assertEquals(expectedValues2[i++], node.getValue(), Double.MIN_VALUE);\n        assertEquals(expectedValues2[i++], node.getResidue(), Double.MIN_VALUE);\n        assertEquals(node.getNumSubResults(), 0);\n      }\n      \n      fr = facetResults.get(3); // a/b, depth=3, K=2\n      hasDoctor |= \"Doctor\".equals(fr.getFacetRequest().getCategoryPath().getComponent(0));\n      assertEquals(4, fr.getNumValidDescendants());\n      parentRes = fr.getFacetResultNode();\n      assertEquals(8.0, parentRes.getValue(), Double.MIN_VALUE);\n      assertEquals(2.0, parentRes.getResidue(), Double.MIN_VALUE);\n      assertEquals(2, parentRes.getNumSubResults());\n      double [] expectedValues3 = { 3.0, 2.0 };\n      i = 0;\n      for (FacetResultNode node : parentRes.getSubResults()) {\n        assertEquals(expectedValues3[i++], node.getValue(), Double.MIN_VALUE);\n        assertEquals(0.0, node.getResidue(), Double.MIN_VALUE);\n        assertEquals(0, node.getNumSubResults());\n      }\n\n      fr = facetResults.get(4); // a/b, depth=2, K=2\n      hasDoctor |= \"Doctor\".equals(fr.getFacetRequest().getCategoryPath().getComponent(0));\n      assertEquals(4, fr.getNumValidDescendants());\n      parentRes = fr.getFacetResultNode();\n      assertEquals(8.0, parentRes.getValue(), Double.MIN_VALUE);\n      assertEquals(2.0, parentRes.getResidue(), Double.MIN_VALUE);\n      assertEquals(2, parentRes.getNumSubResults());\n      i = 0;\n      for (FacetResultNode node : parentRes.getSubResults()) {\n        assertEquals(expectedValues3[i++], node.getValue(), Double.MIN_VALUE);\n        assertEquals(0.0, node.getResidue(), Double.MIN_VALUE);\n        assertEquals(0, node.getNumSubResults());\n      }\n\n      fr = facetResults.get(5); // a/b, depth=1, K=2\n      hasDoctor |= \"Doctor\".equals(fr.getFacetRequest().getCategoryPath().getComponent(0));\n      assertEquals(4, fr.getNumValidDescendants());\n      parentRes = fr.getFacetResultNode();\n      assertEquals(8.0, parentRes.getValue(), Double.MIN_VALUE);\n      assertEquals(2.0, parentRes.getResidue(), Double.MIN_VALUE);\n      assertEquals(2, parentRes.getNumSubResults());\n      i = 0;\n      for (FacetResultNode node : parentRes.getSubResults()) {\n        assertEquals(expectedValues3[i++], node.getValue(), Double.MIN_VALUE);\n        assertEquals(0.0, node.getResidue(), Double.MIN_VALUE);\n        assertEquals(0, node.getNumSubResults());\n      }\n      \n      fr = facetResults.get(6); // a/b, depth=0, K=2\n      hasDoctor |= \"Doctor\".equals(fr.getFacetRequest().getCategoryPath().getComponent(0));\n      assertEquals(0, fr.getNumValidDescendants()); // 0 descendants but rootnode\n      parentRes = fr.getFacetResultNode();\n      assertEquals(8.0, parentRes.getValue(), Double.MIN_VALUE);\n      assertEquals(0.0, parentRes.getResidue(), Double.MIN_VALUE);\n      assertEquals(0, parentRes.getNumSubResults());\n      hasDoctor |= \"Doctor\".equals(fr.getFacetRequest().getCategoryPath().getComponent(0));\n\n      // doctor, depth=1, K=2\n      assertFalse(\"Shouldn't have found anything for a FacetRequest \" +\n          \"of a facet that doesn't exist in the index.\", hasDoctor);\n      assertEquals(\"Shouldn't have found more than seven request.\", 7, facetResults.size());\n      ir.close();\n      tr.close();\n      iDir.close();\n      tDir.close();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4c236b7b2d1cb61683f5ba02d09249fdb42a7fd","date":1320399315,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/facet/src/test/org/apache/lucene/facet/search/TestTopKInEachNodeResultHandler#testSimple().mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/search/TestTopKInEachNodeResultHandler#testSimple().mjava","sourceNew":"  @Test\n  public void testSimple() throws Exception {\n\n    int[] partitionSizes = new int[] { \n        2,3,4, 5, 6, 7, 10, 1000,\n        Integer.MAX_VALUE };\n\n    for (int partitionSize : partitionSizes) {\n      Directory iDir = newDirectory();\n      Directory tDir = newDirectory();\n\n      if (VERBOSE) {\n        System.out.println(\"Partition Size: \" + partitionSize);\n      }\n      \n      final int pSize = partitionSize;\n      DefaultFacetIndexingParams iParams = new DefaultFacetIndexingParams() {\n        @Override\n        protected int fixedPartitionSize() {\n          return pSize;\n        }\n      };\n\n      RandomIndexWriter iw = new RandomIndexWriter(random, iDir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT,\n              new MockAnalyzer(random)).setOpenMode(OpenMode.CREATE));\n      TaxonomyWriter tw = new DirectoryTaxonomyWriter(tDir);\n      prvt_add(iParams, iw, tw, \"a\", \"b\");\n      prvt_add(iParams, iw, tw, \"a\", \"b\", \"1\");\n      prvt_add(iParams, iw, tw, \"a\", \"b\", \"1\");\n      prvt_add(iParams, iw, tw, \"a\", \"b\", \"2\");\n      prvt_add(iParams, iw, tw, \"a\", \"b\", \"2\");\n      prvt_add(iParams, iw, tw, \"a\", \"b\", \"2\");\n      prvt_add(iParams, iw, tw, \"a\", \"b\", \"3\");\n      prvt_add(iParams, iw, tw, \"a\", \"b\", \"4\");\n      prvt_add(iParams, iw, tw, \"a\", \"c\");\n      prvt_add(iParams, iw, tw, \"a\", \"c\");\n      prvt_add(iParams, iw, tw, \"a\", \"c\");\n      prvt_add(iParams, iw, tw, \"a\", \"c\");\n      prvt_add(iParams, iw, tw, \"a\", \"c\");\n      prvt_add(iParams, iw, tw, \"a\", \"c\", \"1\");\n      prvt_add(iParams, iw, tw, \"a\", \"d\");\n      prvt_add(iParams, iw, tw, \"a\", \"e\");\n\n      IndexReader ir = iw.getReader();\n      iw.close();\n      tw.commit();\n      tw.close();\n\n      IndexSearcher is = newSearcher(ir);\n      DirectoryTaxonomyReader tr = new DirectoryTaxonomyReader(tDir);\n\n      // Get all of the documents and run the query, then do different\n      // facet counts and compare to control\n      Query q = new TermQuery(new Term(\"content\", \"alpha\"));\n      ScoredDocIdCollector scoredDoc = ScoredDocIdCollector.create(ir.maxDoc(), true);\n\n      // Collector collector = new MultiCollector(scoredDoc);\n      is.search(q, scoredDoc);\n\n      CountFacetRequest cfra23 = new CountFacetRequest(\n          new CategoryPath(\"a\"), 2);\n      cfra23.setDepth(3);\n      cfra23.setResultMode(ResultMode.PER_NODE_IN_TREE);\n\n      CountFacetRequest cfra22 = new CountFacetRequest(\n          new CategoryPath(\"a\"), 2);\n      cfra22.setDepth(2);\n      cfra22.setResultMode(ResultMode.PER_NODE_IN_TREE);\n\n      CountFacetRequest cfra21 = new CountFacetRequest(\n          new CategoryPath(\"a\"), 2);\n      cfra21.setDepth(1);\n      cfra21.setResultMode(ResultMode.PER_NODE_IN_TREE);\n\n      CountFacetRequest cfrb22 = new CountFacetRequest(\n          new CategoryPath(\"a\", \"b\"), 2);\n      cfrb22.setDepth(2);\n      cfrb22.setResultMode(ResultMode.PER_NODE_IN_TREE);\n\n      CountFacetRequest cfrb23 = new CountFacetRequest(\n          new CategoryPath(\"a\", \"b\"), 2);\n      cfrb23.setDepth(3);\n      cfrb23.setResultMode(ResultMode.PER_NODE_IN_TREE);\n\n      CountFacetRequest cfrb21 = new CountFacetRequest(\n          new CategoryPath(\"a\", \"b\"), 2);\n      cfrb21.setDepth(1);\n      cfrb21.setResultMode(ResultMode.PER_NODE_IN_TREE);\n\n      CountFacetRequest doctor = new CountFacetRequest(\n          new CategoryPath(\"Doctor\"), 2);\n      doctor.setDepth(1);\n      doctor.setResultMode(ResultMode.PER_NODE_IN_TREE);\n\n      CountFacetRequest cfrb20 = new CountFacetRequest(\n          new CategoryPath(\"a\", \"b\"), 2);\n      cfrb20.setDepth(0);\n      cfrb20.setResultMode(ResultMode.PER_NODE_IN_TREE);\n\n      FacetSearchParams facetSearchParams = new FacetSearchParams(iParams);\n      facetSearchParams.addFacetRequest(cfra23);\n      facetSearchParams.addFacetRequest(cfra22);\n      facetSearchParams.addFacetRequest(cfra21);\n      facetSearchParams.addFacetRequest(cfrb23);\n      facetSearchParams.addFacetRequest(cfrb22);\n      facetSearchParams.addFacetRequest(cfrb21);\n      facetSearchParams.addFacetRequest(doctor);\n      facetSearchParams.addFacetRequest(cfrb20);\n      \n      IntArrayAllocator iaa = new IntArrayAllocator(PartitionsUtils.partitionSize(facetSearchParams,tr), 1);\n      FloatArrayAllocator faa = new FloatArrayAllocator(PartitionsUtils.partitionSize(facetSearchParams,tr), 1);\n      FacetsAccumulator fctExtrctr = new StandardFacetsAccumulator(facetSearchParams, is.getIndexReader(), tr, iaa, faa);\n      fctExtrctr.setComplementThreshold(FacetsAccumulator.DISABLE_COMPLEMENT);\n      long start = System.currentTimeMillis();\n\n      List<FacetResult> facetResults = fctExtrctr.accumulate(scoredDoc.getScoredDocIDs());\n\n      long end = System.currentTimeMillis();\n      if (VERBOSE) {\n        System.out.println(\"Time: \" + (end - start));\n      }\n      \n      FacetResult fr = facetResults.get(0); // a, depth=3, K=2\n      boolean hasDoctor = \"Doctor\".equals(fr.getFacetRequest().getCategoryPath().getComponent(0));\n      assertEquals(9, fr.getNumValidDescendants());\n      FacetResultNode parentRes = fr.getFacetResultNode();\n      assertEquals(16.0, parentRes.getValue(), Double.MIN_VALUE);\n      assertEquals(2.0, parentRes.getResidue(), Double.MIN_VALUE);\n      assertEquals(2, parentRes.getNumSubResults());\n      // two nodes sorted by descending values: a/b with 8  and a/c with 6\n      // a/b has residue 2 and two children a/b/2 with value 3, and a/b/1 with value 2. \n      // a/c has residue 0, and one child a/c/1 with value 1.\n      double [] expectedValues0 = { 8.0, 2.0, 3.0, 0.0, 2.0, 0.0, 6.0, 0.0, 1.0, 0.0 };\n      int i = 0;\n      for (FacetResultNode node : parentRes.getSubResults()) {\n        assertEquals(expectedValues0[i++], node.getValue(), Double.MIN_VALUE);\n        assertEquals(expectedValues0[i++], node.getResidue(), Double.MIN_VALUE);\n        for (FacetResultNode node2 : node.getSubResults()) {\n          assertEquals(expectedValues0[i++], node2.getValue(), Double.MIN_VALUE);\n          assertEquals(expectedValues0[i++], node2.getResidue(), Double.MIN_VALUE);\n        }\n      }\n\n      // now just change the value of the first child of the root to 5, and then rearrange\n      // expected are: first a/c of value 6 and residue 0, and one child a/c/1 with value 1\n      // then a/b with value 5 and residue 2, and both children: a/b/2 with value 3, and a/b/1 with value 2.\n      for (FacetResultNode node : parentRes.getSubResults()) {\n        node.setValue(5.0);\n        break;\n      }\n      // now rearrange\n      double [] expectedValues00 = { 6.0, 0.0, 1.0, 0.0, 5.0, 2.0, 3.0, 0.0, 2.0, 0.0 };\n      fr = cfra23.createFacetResultsHandler(tr).rearrangeFacetResult(fr);\n      i = 0;\n      for (FacetResultNode node : parentRes.getSubResults()) {\n        assertEquals(expectedValues00[i++], node.getValue(), Double.MIN_VALUE);\n        assertEquals(expectedValues00[i++], node.getResidue(), Double.MIN_VALUE);\n        for (FacetResultNode node2 : node.getSubResults()) {\n          assertEquals(expectedValues00[i++], node2.getValue(), Double.MIN_VALUE);\n          assertEquals(expectedValues00[i++], node2.getResidue(), Double.MIN_VALUE);\n        }\n      }\n\n      fr = facetResults.get(1); // a, depth=2, K=2. same result as before\n      hasDoctor |= \"Doctor\".equals(fr.getFacetRequest().getCategoryPath().getComponent(0));\n      assertEquals(9, fr.getNumValidDescendants());\n      parentRes = fr.getFacetResultNode();\n      assertEquals(16.0, parentRes.getValue(), Double.MIN_VALUE);\n      assertEquals(2.0, parentRes.getResidue(), Double.MIN_VALUE);\n      assertEquals(2, parentRes.getNumSubResults());\n      // two nodes sorted by descending values: a/b with 8  and a/c with 6\n      // a/b has residue 2 and two children a/b/2 with value 3, and a/b/1 with value 2. \n      // a/c has residue 0, and one child a/c/1 with value 1.\n      i = 0;\n      for (FacetResultNode node : parentRes.getSubResults()) {\n        assertEquals(expectedValues0[i++], node.getValue(), Double.MIN_VALUE);\n        assertEquals(expectedValues0[i++], node.getResidue(), Double.MIN_VALUE);\n        for (FacetResultNode node2 : node.getSubResults()) {\n          assertEquals(expectedValues0[i++], node2.getValue(), Double.MIN_VALUE);\n          assertEquals(expectedValues0[i++], node2.getResidue(), Double.MIN_VALUE);\n        }\n      }\n\n      fr = facetResults.get(2); // a, depth=1, K=2\n      hasDoctor |= \"Doctor\".equals(fr.getFacetRequest().getCategoryPath().getComponent(0));\n      assertEquals(4, fr.getNumValidDescendants(), 4);\n      parentRes = fr.getFacetResultNode();\n      assertEquals(16.0, parentRes.getValue(), Double.MIN_VALUE);\n      assertEquals(2.0, parentRes.getResidue(), Double.MIN_VALUE);\n      assertEquals(2, parentRes.getNumSubResults());\n      // two nodes sorted by descending values: \n      // a/b with value 8 and residue 0 (because no children considered),  \n      //  and a/c with value 6 and residue 0 (because no children considered)\n      double [] expectedValues2 = { 8.0, 0.0, 6.0, 0.0 };\n      i = 0;\n      for (FacetResultNode node : parentRes.getSubResults()) {\n        assertEquals(expectedValues2[i++], node.getValue(), Double.MIN_VALUE);\n        assertEquals(expectedValues2[i++], node.getResidue(), Double.MIN_VALUE);\n        assertEquals(node.getNumSubResults(), 0);\n      }\n      \n      fr = facetResults.get(3); // a/b, depth=3, K=2\n      hasDoctor |= \"Doctor\".equals(fr.getFacetRequest().getCategoryPath().getComponent(0));\n      assertEquals(4, fr.getNumValidDescendants());\n      parentRes = fr.getFacetResultNode();\n      assertEquals(8.0, parentRes.getValue(), Double.MIN_VALUE);\n      assertEquals(2.0, parentRes.getResidue(), Double.MIN_VALUE);\n      assertEquals(2, parentRes.getNumSubResults());\n      double [] expectedValues3 = { 3.0, 2.0 };\n      i = 0;\n      for (FacetResultNode node : parentRes.getSubResults()) {\n        assertEquals(expectedValues3[i++], node.getValue(), Double.MIN_VALUE);\n        assertEquals(0.0, node.getResidue(), Double.MIN_VALUE);\n        assertEquals(0, node.getNumSubResults());\n      }\n\n      fr = facetResults.get(4); // a/b, depth=2, K=2\n      hasDoctor |= \"Doctor\".equals(fr.getFacetRequest().getCategoryPath().getComponent(0));\n      assertEquals(4, fr.getNumValidDescendants());\n      parentRes = fr.getFacetResultNode();\n      assertEquals(8.0, parentRes.getValue(), Double.MIN_VALUE);\n      assertEquals(2.0, parentRes.getResidue(), Double.MIN_VALUE);\n      assertEquals(2, parentRes.getNumSubResults());\n      i = 0;\n      for (FacetResultNode node : parentRes.getSubResults()) {\n        assertEquals(expectedValues3[i++], node.getValue(), Double.MIN_VALUE);\n        assertEquals(0.0, node.getResidue(), Double.MIN_VALUE);\n        assertEquals(0, node.getNumSubResults());\n      }\n\n      fr = facetResults.get(5); // a/b, depth=1, K=2\n      hasDoctor |= \"Doctor\".equals(fr.getFacetRequest().getCategoryPath().getComponent(0));\n      assertEquals(4, fr.getNumValidDescendants());\n      parentRes = fr.getFacetResultNode();\n      assertEquals(8.0, parentRes.getValue(), Double.MIN_VALUE);\n      assertEquals(2.0, parentRes.getResidue(), Double.MIN_VALUE);\n      assertEquals(2, parentRes.getNumSubResults());\n      i = 0;\n      for (FacetResultNode node : parentRes.getSubResults()) {\n        assertEquals(expectedValues3[i++], node.getValue(), Double.MIN_VALUE);\n        assertEquals(0.0, node.getResidue(), Double.MIN_VALUE);\n        assertEquals(0, node.getNumSubResults());\n      }\n      \n      fr = facetResults.get(6); // a/b, depth=0, K=2\n      hasDoctor |= \"Doctor\".equals(fr.getFacetRequest().getCategoryPath().getComponent(0));\n      assertEquals(0, fr.getNumValidDescendants()); // 0 descendants but rootnode\n      parentRes = fr.getFacetResultNode();\n      assertEquals(8.0, parentRes.getValue(), Double.MIN_VALUE);\n      assertEquals(0.0, parentRes.getResidue(), Double.MIN_VALUE);\n      assertEquals(0, parentRes.getNumSubResults());\n      hasDoctor |= \"Doctor\".equals(fr.getFacetRequest().getCategoryPath().getComponent(0));\n\n      // doctor, depth=1, K=2\n      assertFalse(\"Shouldn't have found anything for a FacetRequest \" +\n          \"of a facet that doesn't exist in the index.\", hasDoctor);\n      assertEquals(\"Shouldn't have found more than seven request.\", 7, facetResults.size());\n      ir.close();\n      tr.close();\n      iDir.close();\n      tDir.close();\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testSimple() throws Exception {\n\n    int[] partitionSizes = new int[] { \n        2,3,4, 5, 6, 7, 10, 1000,\n        Integer.MAX_VALUE };\n\n    for (int partitionSize : partitionSizes) {\n      Directory iDir = newDirectory();\n      Directory tDir = newDirectory();\n\n      if (VERBOSE) {\n        System.out.println(\"Partition Size: \" + partitionSize);\n      }\n      \n      final int pSize = partitionSize;\n      DefaultFacetIndexingParams iParams = new DefaultFacetIndexingParams() {\n        @Override\n        protected int fixedPartitionSize() {\n          return pSize;\n        }\n      };\n\n      RandomIndexWriter iw = new RandomIndexWriter(random, iDir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT,\n              new MockAnalyzer(random)).setOpenMode(OpenMode.CREATE));\n      TaxonomyWriter tw = new DirectoryTaxonomyWriter(tDir);\n      prvt_add(iParams, iw, tw, \"a\", \"b\");\n      prvt_add(iParams, iw, tw, \"a\", \"b\", \"1\");\n      prvt_add(iParams, iw, tw, \"a\", \"b\", \"1\");\n      prvt_add(iParams, iw, tw, \"a\", \"b\", \"2\");\n      prvt_add(iParams, iw, tw, \"a\", \"b\", \"2\");\n      prvt_add(iParams, iw, tw, \"a\", \"b\", \"2\");\n      prvt_add(iParams, iw, tw, \"a\", \"b\", \"3\");\n      prvt_add(iParams, iw, tw, \"a\", \"b\", \"4\");\n      prvt_add(iParams, iw, tw, \"a\", \"c\");\n      prvt_add(iParams, iw, tw, \"a\", \"c\");\n      prvt_add(iParams, iw, tw, \"a\", \"c\");\n      prvt_add(iParams, iw, tw, \"a\", \"c\");\n      prvt_add(iParams, iw, tw, \"a\", \"c\");\n      prvt_add(iParams, iw, tw, \"a\", \"c\", \"1\");\n      prvt_add(iParams, iw, tw, \"a\", \"d\");\n      prvt_add(iParams, iw, tw, \"a\", \"e\");\n\n      IndexReader ir = iw.getReader();\n      iw.close();\n      tw.commit();\n      tw.close();\n\n      IndexSearcher is = newSearcher(ir);\n      DirectoryTaxonomyReader tr = new DirectoryTaxonomyReader(tDir);\n\n      // Get all of the documents and run the query, then do different\n      // facet counts and compare to control\n      Query q = new TermQuery(new Term(\"content\", \"alpha\"));\n      ScoredDocIdCollector scoredDoc = ScoredDocIdCollector.create(is.maxDoc(), true);\n\n      // Collector collector = new MultiCollector(scoredDoc);\n      is.search(q, scoredDoc);\n\n      CountFacetRequest cfra23 = new CountFacetRequest(\n          new CategoryPath(\"a\"), 2);\n      cfra23.setDepth(3);\n      cfra23.setResultMode(ResultMode.PER_NODE_IN_TREE);\n\n      CountFacetRequest cfra22 = new CountFacetRequest(\n          new CategoryPath(\"a\"), 2);\n      cfra22.setDepth(2);\n      cfra22.setResultMode(ResultMode.PER_NODE_IN_TREE);\n\n      CountFacetRequest cfra21 = new CountFacetRequest(\n          new CategoryPath(\"a\"), 2);\n      cfra21.setDepth(1);\n      cfra21.setResultMode(ResultMode.PER_NODE_IN_TREE);\n\n      CountFacetRequest cfrb22 = new CountFacetRequest(\n          new CategoryPath(\"a\", \"b\"), 2);\n      cfrb22.setDepth(2);\n      cfrb22.setResultMode(ResultMode.PER_NODE_IN_TREE);\n\n      CountFacetRequest cfrb23 = new CountFacetRequest(\n          new CategoryPath(\"a\", \"b\"), 2);\n      cfrb23.setDepth(3);\n      cfrb23.setResultMode(ResultMode.PER_NODE_IN_TREE);\n\n      CountFacetRequest cfrb21 = new CountFacetRequest(\n          new CategoryPath(\"a\", \"b\"), 2);\n      cfrb21.setDepth(1);\n      cfrb21.setResultMode(ResultMode.PER_NODE_IN_TREE);\n\n      CountFacetRequest doctor = new CountFacetRequest(\n          new CategoryPath(\"Doctor\"), 2);\n      doctor.setDepth(1);\n      doctor.setResultMode(ResultMode.PER_NODE_IN_TREE);\n\n      CountFacetRequest cfrb20 = new CountFacetRequest(\n          new CategoryPath(\"a\", \"b\"), 2);\n      cfrb20.setDepth(0);\n      cfrb20.setResultMode(ResultMode.PER_NODE_IN_TREE);\n\n      FacetSearchParams facetSearchParams = new FacetSearchParams(iParams);\n      facetSearchParams.addFacetRequest(cfra23);\n      facetSearchParams.addFacetRequest(cfra22);\n      facetSearchParams.addFacetRequest(cfra21);\n      facetSearchParams.addFacetRequest(cfrb23);\n      facetSearchParams.addFacetRequest(cfrb22);\n      facetSearchParams.addFacetRequest(cfrb21);\n      facetSearchParams.addFacetRequest(doctor);\n      facetSearchParams.addFacetRequest(cfrb20);\n      \n      IntArrayAllocator iaa = new IntArrayAllocator(PartitionsUtils.partitionSize(facetSearchParams,tr), 1);\n      FloatArrayAllocator faa = new FloatArrayAllocator(PartitionsUtils.partitionSize(facetSearchParams,tr), 1);\n      FacetsAccumulator fctExtrctr = new StandardFacetsAccumulator(facetSearchParams, is.getIndexReader(), tr, iaa, faa);\n      fctExtrctr.setComplementThreshold(FacetsAccumulator.DISABLE_COMPLEMENT);\n      long start = System.currentTimeMillis();\n\n      List<FacetResult> facetResults = fctExtrctr.accumulate(scoredDoc.getScoredDocIDs());\n\n      long end = System.currentTimeMillis();\n      if (VERBOSE) {\n        System.out.println(\"Time: \" + (end - start));\n      }\n      \n      FacetResult fr = facetResults.get(0); // a, depth=3, K=2\n      boolean hasDoctor = \"Doctor\".equals(fr.getFacetRequest().getCategoryPath().getComponent(0));\n      assertEquals(9, fr.getNumValidDescendants());\n      FacetResultNode parentRes = fr.getFacetResultNode();\n      assertEquals(16.0, parentRes.getValue(), Double.MIN_VALUE);\n      assertEquals(2.0, parentRes.getResidue(), Double.MIN_VALUE);\n      assertEquals(2, parentRes.getNumSubResults());\n      // two nodes sorted by descending values: a/b with 8  and a/c with 6\n      // a/b has residue 2 and two children a/b/2 with value 3, and a/b/1 with value 2. \n      // a/c has residue 0, and one child a/c/1 with value 1.\n      double [] expectedValues0 = { 8.0, 2.0, 3.0, 0.0, 2.0, 0.0, 6.0, 0.0, 1.0, 0.0 };\n      int i = 0;\n      for (FacetResultNode node : parentRes.getSubResults()) {\n        assertEquals(expectedValues0[i++], node.getValue(), Double.MIN_VALUE);\n        assertEquals(expectedValues0[i++], node.getResidue(), Double.MIN_VALUE);\n        for (FacetResultNode node2 : node.getSubResults()) {\n          assertEquals(expectedValues0[i++], node2.getValue(), Double.MIN_VALUE);\n          assertEquals(expectedValues0[i++], node2.getResidue(), Double.MIN_VALUE);\n        }\n      }\n\n      // now just change the value of the first child of the root to 5, and then rearrange\n      // expected are: first a/c of value 6 and residue 0, and one child a/c/1 with value 1\n      // then a/b with value 5 and residue 2, and both children: a/b/2 with value 3, and a/b/1 with value 2.\n      for (FacetResultNode node : parentRes.getSubResults()) {\n        node.setValue(5.0);\n        break;\n      }\n      // now rearrange\n      double [] expectedValues00 = { 6.0, 0.0, 1.0, 0.0, 5.0, 2.0, 3.0, 0.0, 2.0, 0.0 };\n      fr = cfra23.createFacetResultsHandler(tr).rearrangeFacetResult(fr);\n      i = 0;\n      for (FacetResultNode node : parentRes.getSubResults()) {\n        assertEquals(expectedValues00[i++], node.getValue(), Double.MIN_VALUE);\n        assertEquals(expectedValues00[i++], node.getResidue(), Double.MIN_VALUE);\n        for (FacetResultNode node2 : node.getSubResults()) {\n          assertEquals(expectedValues00[i++], node2.getValue(), Double.MIN_VALUE);\n          assertEquals(expectedValues00[i++], node2.getResidue(), Double.MIN_VALUE);\n        }\n      }\n\n      fr = facetResults.get(1); // a, depth=2, K=2. same result as before\n      hasDoctor |= \"Doctor\".equals(fr.getFacetRequest().getCategoryPath().getComponent(0));\n      assertEquals(9, fr.getNumValidDescendants());\n      parentRes = fr.getFacetResultNode();\n      assertEquals(16.0, parentRes.getValue(), Double.MIN_VALUE);\n      assertEquals(2.0, parentRes.getResidue(), Double.MIN_VALUE);\n      assertEquals(2, parentRes.getNumSubResults());\n      // two nodes sorted by descending values: a/b with 8  and a/c with 6\n      // a/b has residue 2 and two children a/b/2 with value 3, and a/b/1 with value 2. \n      // a/c has residue 0, and one child a/c/1 with value 1.\n      i = 0;\n      for (FacetResultNode node : parentRes.getSubResults()) {\n        assertEquals(expectedValues0[i++], node.getValue(), Double.MIN_VALUE);\n        assertEquals(expectedValues0[i++], node.getResidue(), Double.MIN_VALUE);\n        for (FacetResultNode node2 : node.getSubResults()) {\n          assertEquals(expectedValues0[i++], node2.getValue(), Double.MIN_VALUE);\n          assertEquals(expectedValues0[i++], node2.getResidue(), Double.MIN_VALUE);\n        }\n      }\n\n      fr = facetResults.get(2); // a, depth=1, K=2\n      hasDoctor |= \"Doctor\".equals(fr.getFacetRequest().getCategoryPath().getComponent(0));\n      assertEquals(4, fr.getNumValidDescendants(), 4);\n      parentRes = fr.getFacetResultNode();\n      assertEquals(16.0, parentRes.getValue(), Double.MIN_VALUE);\n      assertEquals(2.0, parentRes.getResidue(), Double.MIN_VALUE);\n      assertEquals(2, parentRes.getNumSubResults());\n      // two nodes sorted by descending values: \n      // a/b with value 8 and residue 0 (because no children considered),  \n      //  and a/c with value 6 and residue 0 (because no children considered)\n      double [] expectedValues2 = { 8.0, 0.0, 6.0, 0.0 };\n      i = 0;\n      for (FacetResultNode node : parentRes.getSubResults()) {\n        assertEquals(expectedValues2[i++], node.getValue(), Double.MIN_VALUE);\n        assertEquals(expectedValues2[i++], node.getResidue(), Double.MIN_VALUE);\n        assertEquals(node.getNumSubResults(), 0);\n      }\n      \n      fr = facetResults.get(3); // a/b, depth=3, K=2\n      hasDoctor |= \"Doctor\".equals(fr.getFacetRequest().getCategoryPath().getComponent(0));\n      assertEquals(4, fr.getNumValidDescendants());\n      parentRes = fr.getFacetResultNode();\n      assertEquals(8.0, parentRes.getValue(), Double.MIN_VALUE);\n      assertEquals(2.0, parentRes.getResidue(), Double.MIN_VALUE);\n      assertEquals(2, parentRes.getNumSubResults());\n      double [] expectedValues3 = { 3.0, 2.0 };\n      i = 0;\n      for (FacetResultNode node : parentRes.getSubResults()) {\n        assertEquals(expectedValues3[i++], node.getValue(), Double.MIN_VALUE);\n        assertEquals(0.0, node.getResidue(), Double.MIN_VALUE);\n        assertEquals(0, node.getNumSubResults());\n      }\n\n      fr = facetResults.get(4); // a/b, depth=2, K=2\n      hasDoctor |= \"Doctor\".equals(fr.getFacetRequest().getCategoryPath().getComponent(0));\n      assertEquals(4, fr.getNumValidDescendants());\n      parentRes = fr.getFacetResultNode();\n      assertEquals(8.0, parentRes.getValue(), Double.MIN_VALUE);\n      assertEquals(2.0, parentRes.getResidue(), Double.MIN_VALUE);\n      assertEquals(2, parentRes.getNumSubResults());\n      i = 0;\n      for (FacetResultNode node : parentRes.getSubResults()) {\n        assertEquals(expectedValues3[i++], node.getValue(), Double.MIN_VALUE);\n        assertEquals(0.0, node.getResidue(), Double.MIN_VALUE);\n        assertEquals(0, node.getNumSubResults());\n      }\n\n      fr = facetResults.get(5); // a/b, depth=1, K=2\n      hasDoctor |= \"Doctor\".equals(fr.getFacetRequest().getCategoryPath().getComponent(0));\n      assertEquals(4, fr.getNumValidDescendants());\n      parentRes = fr.getFacetResultNode();\n      assertEquals(8.0, parentRes.getValue(), Double.MIN_VALUE);\n      assertEquals(2.0, parentRes.getResidue(), Double.MIN_VALUE);\n      assertEquals(2, parentRes.getNumSubResults());\n      i = 0;\n      for (FacetResultNode node : parentRes.getSubResults()) {\n        assertEquals(expectedValues3[i++], node.getValue(), Double.MIN_VALUE);\n        assertEquals(0.0, node.getResidue(), Double.MIN_VALUE);\n        assertEquals(0, node.getNumSubResults());\n      }\n      \n      fr = facetResults.get(6); // a/b, depth=0, K=2\n      hasDoctor |= \"Doctor\".equals(fr.getFacetRequest().getCategoryPath().getComponent(0));\n      assertEquals(0, fr.getNumValidDescendants()); // 0 descendants but rootnode\n      parentRes = fr.getFacetResultNode();\n      assertEquals(8.0, parentRes.getValue(), Double.MIN_VALUE);\n      assertEquals(0.0, parentRes.getResidue(), Double.MIN_VALUE);\n      assertEquals(0, parentRes.getNumSubResults());\n      hasDoctor |= \"Doctor\".equals(fr.getFacetRequest().getCategoryPath().getComponent(0));\n\n      // doctor, depth=1, K=2\n      assertFalse(\"Shouldn't have found anything for a FacetRequest \" +\n          \"of a facet that doesn't exist in the index.\", hasDoctor);\n      assertEquals(\"Shouldn't have found more than seven request.\", 7, facetResults.size());\n      ir.close();\n      tr.close();\n      iDir.close();\n      tDir.close();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"modules/facet/src/test/org/apache/lucene/facet/search/TestTopKInEachNodeResultHandler#testSimple().mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/search/TestTopKInEachNodeResultHandler#testSimple().mjava","sourceNew":"  @Test\n  public void testSimple() throws Exception {\n\n    int[] partitionSizes = new int[] { \n        2,3,4, 5, 6, 7, 10, 1000,\n        Integer.MAX_VALUE };\n\n    for (int partitionSize : partitionSizes) {\n      Directory iDir = newDirectory();\n      Directory tDir = newDirectory();\n\n      if (VERBOSE) {\n        System.out.println(\"Partition Size: \" + partitionSize);\n      }\n      \n      final int pSize = partitionSize;\n      DefaultFacetIndexingParams iParams = new DefaultFacetIndexingParams() {\n        @Override\n        protected int fixedPartitionSize() {\n          return pSize;\n        }\n      };\n\n      RandomIndexWriter iw = new RandomIndexWriter(random(), iDir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT,\n              new MockAnalyzer(random())).setOpenMode(OpenMode.CREATE));\n      TaxonomyWriter tw = new DirectoryTaxonomyWriter(tDir);\n      prvt_add(iParams, iw, tw, \"a\", \"b\");\n      prvt_add(iParams, iw, tw, \"a\", \"b\", \"1\");\n      prvt_add(iParams, iw, tw, \"a\", \"b\", \"1\");\n      prvt_add(iParams, iw, tw, \"a\", \"b\", \"2\");\n      prvt_add(iParams, iw, tw, \"a\", \"b\", \"2\");\n      prvt_add(iParams, iw, tw, \"a\", \"b\", \"2\");\n      prvt_add(iParams, iw, tw, \"a\", \"b\", \"3\");\n      prvt_add(iParams, iw, tw, \"a\", \"b\", \"4\");\n      prvt_add(iParams, iw, tw, \"a\", \"c\");\n      prvt_add(iParams, iw, tw, \"a\", \"c\");\n      prvt_add(iParams, iw, tw, \"a\", \"c\");\n      prvt_add(iParams, iw, tw, \"a\", \"c\");\n      prvt_add(iParams, iw, tw, \"a\", \"c\");\n      prvt_add(iParams, iw, tw, \"a\", \"c\", \"1\");\n      prvt_add(iParams, iw, tw, \"a\", \"d\");\n      prvt_add(iParams, iw, tw, \"a\", \"e\");\n\n      IndexReader ir = iw.getReader();\n      iw.close();\n      tw.commit();\n      tw.close();\n\n      IndexSearcher is = newSearcher(ir);\n      DirectoryTaxonomyReader tr = new DirectoryTaxonomyReader(tDir);\n\n      // Get all of the documents and run the query, then do different\n      // facet counts and compare to control\n      Query q = new TermQuery(new Term(\"content\", \"alpha\"));\n      ScoredDocIdCollector scoredDoc = ScoredDocIdCollector.create(ir.maxDoc(), true);\n\n      // Collector collector = new MultiCollector(scoredDoc);\n      is.search(q, scoredDoc);\n\n      CountFacetRequest cfra23 = new CountFacetRequest(\n          new CategoryPath(\"a\"), 2);\n      cfra23.setDepth(3);\n      cfra23.setResultMode(ResultMode.PER_NODE_IN_TREE);\n\n      CountFacetRequest cfra22 = new CountFacetRequest(\n          new CategoryPath(\"a\"), 2);\n      cfra22.setDepth(2);\n      cfra22.setResultMode(ResultMode.PER_NODE_IN_TREE);\n\n      CountFacetRequest cfra21 = new CountFacetRequest(\n          new CategoryPath(\"a\"), 2);\n      cfra21.setDepth(1);\n      cfra21.setResultMode(ResultMode.PER_NODE_IN_TREE);\n\n      CountFacetRequest cfrb22 = new CountFacetRequest(\n          new CategoryPath(\"a\", \"b\"), 2);\n      cfrb22.setDepth(2);\n      cfrb22.setResultMode(ResultMode.PER_NODE_IN_TREE);\n\n      CountFacetRequest cfrb23 = new CountFacetRequest(\n          new CategoryPath(\"a\", \"b\"), 2);\n      cfrb23.setDepth(3);\n      cfrb23.setResultMode(ResultMode.PER_NODE_IN_TREE);\n\n      CountFacetRequest cfrb21 = new CountFacetRequest(\n          new CategoryPath(\"a\", \"b\"), 2);\n      cfrb21.setDepth(1);\n      cfrb21.setResultMode(ResultMode.PER_NODE_IN_TREE);\n\n      CountFacetRequest doctor = new CountFacetRequest(\n          new CategoryPath(\"Doctor\"), 2);\n      doctor.setDepth(1);\n      doctor.setResultMode(ResultMode.PER_NODE_IN_TREE);\n\n      CountFacetRequest cfrb20 = new CountFacetRequest(\n          new CategoryPath(\"a\", \"b\"), 2);\n      cfrb20.setDepth(0);\n      cfrb20.setResultMode(ResultMode.PER_NODE_IN_TREE);\n\n      FacetSearchParams facetSearchParams = new FacetSearchParams(iParams);\n      facetSearchParams.addFacetRequest(cfra23);\n      facetSearchParams.addFacetRequest(cfra22);\n      facetSearchParams.addFacetRequest(cfra21);\n      facetSearchParams.addFacetRequest(cfrb23);\n      facetSearchParams.addFacetRequest(cfrb22);\n      facetSearchParams.addFacetRequest(cfrb21);\n      facetSearchParams.addFacetRequest(doctor);\n      facetSearchParams.addFacetRequest(cfrb20);\n      \n      IntArrayAllocator iaa = new IntArrayAllocator(PartitionsUtils.partitionSize(facetSearchParams,tr), 1);\n      FloatArrayAllocator faa = new FloatArrayAllocator(PartitionsUtils.partitionSize(facetSearchParams,tr), 1);\n      FacetsAccumulator fctExtrctr = new StandardFacetsAccumulator(facetSearchParams, is.getIndexReader(), tr, iaa, faa);\n      fctExtrctr.setComplementThreshold(FacetsAccumulator.DISABLE_COMPLEMENT);\n      long start = System.currentTimeMillis();\n\n      List<FacetResult> facetResults = fctExtrctr.accumulate(scoredDoc.getScoredDocIDs());\n\n      long end = System.currentTimeMillis();\n      if (VERBOSE) {\n        System.out.println(\"Time: \" + (end - start));\n      }\n      \n      FacetResult fr = facetResults.get(0); // a, depth=3, K=2\n      boolean hasDoctor = \"Doctor\".equals(fr.getFacetRequest().getCategoryPath().getComponent(0));\n      assertEquals(9, fr.getNumValidDescendants());\n      FacetResultNode parentRes = fr.getFacetResultNode();\n      assertEquals(16.0, parentRes.getValue(), Double.MIN_VALUE);\n      assertEquals(2.0, parentRes.getResidue(), Double.MIN_VALUE);\n      assertEquals(2, parentRes.getNumSubResults());\n      // two nodes sorted by descending values: a/b with 8  and a/c with 6\n      // a/b has residue 2 and two children a/b/2 with value 3, and a/b/1 with value 2. \n      // a/c has residue 0, and one child a/c/1 with value 1.\n      double [] expectedValues0 = { 8.0, 2.0, 3.0, 0.0, 2.0, 0.0, 6.0, 0.0, 1.0, 0.0 };\n      int i = 0;\n      for (FacetResultNode node : parentRes.getSubResults()) {\n        assertEquals(expectedValues0[i++], node.getValue(), Double.MIN_VALUE);\n        assertEquals(expectedValues0[i++], node.getResidue(), Double.MIN_VALUE);\n        for (FacetResultNode node2 : node.getSubResults()) {\n          assertEquals(expectedValues0[i++], node2.getValue(), Double.MIN_VALUE);\n          assertEquals(expectedValues0[i++], node2.getResidue(), Double.MIN_VALUE);\n        }\n      }\n\n      // now just change the value of the first child of the root to 5, and then rearrange\n      // expected are: first a/c of value 6 and residue 0, and one child a/c/1 with value 1\n      // then a/b with value 5 and residue 2, and both children: a/b/2 with value 3, and a/b/1 with value 2.\n      for (FacetResultNode node : parentRes.getSubResults()) {\n        node.setValue(5.0);\n        break;\n      }\n      // now rearrange\n      double [] expectedValues00 = { 6.0, 0.0, 1.0, 0.0, 5.0, 2.0, 3.0, 0.0, 2.0, 0.0 };\n      fr = cfra23.createFacetResultsHandler(tr).rearrangeFacetResult(fr);\n      i = 0;\n      for (FacetResultNode node : parentRes.getSubResults()) {\n        assertEquals(expectedValues00[i++], node.getValue(), Double.MIN_VALUE);\n        assertEquals(expectedValues00[i++], node.getResidue(), Double.MIN_VALUE);\n        for (FacetResultNode node2 : node.getSubResults()) {\n          assertEquals(expectedValues00[i++], node2.getValue(), Double.MIN_VALUE);\n          assertEquals(expectedValues00[i++], node2.getResidue(), Double.MIN_VALUE);\n        }\n      }\n\n      fr = facetResults.get(1); // a, depth=2, K=2. same result as before\n      hasDoctor |= \"Doctor\".equals(fr.getFacetRequest().getCategoryPath().getComponent(0));\n      assertEquals(9, fr.getNumValidDescendants());\n      parentRes = fr.getFacetResultNode();\n      assertEquals(16.0, parentRes.getValue(), Double.MIN_VALUE);\n      assertEquals(2.0, parentRes.getResidue(), Double.MIN_VALUE);\n      assertEquals(2, parentRes.getNumSubResults());\n      // two nodes sorted by descending values: a/b with 8  and a/c with 6\n      // a/b has residue 2 and two children a/b/2 with value 3, and a/b/1 with value 2. \n      // a/c has residue 0, and one child a/c/1 with value 1.\n      i = 0;\n      for (FacetResultNode node : parentRes.getSubResults()) {\n        assertEquals(expectedValues0[i++], node.getValue(), Double.MIN_VALUE);\n        assertEquals(expectedValues0[i++], node.getResidue(), Double.MIN_VALUE);\n        for (FacetResultNode node2 : node.getSubResults()) {\n          assertEquals(expectedValues0[i++], node2.getValue(), Double.MIN_VALUE);\n          assertEquals(expectedValues0[i++], node2.getResidue(), Double.MIN_VALUE);\n        }\n      }\n\n      fr = facetResults.get(2); // a, depth=1, K=2\n      hasDoctor |= \"Doctor\".equals(fr.getFacetRequest().getCategoryPath().getComponent(0));\n      assertEquals(4, fr.getNumValidDescendants(), 4);\n      parentRes = fr.getFacetResultNode();\n      assertEquals(16.0, parentRes.getValue(), Double.MIN_VALUE);\n      assertEquals(2.0, parentRes.getResidue(), Double.MIN_VALUE);\n      assertEquals(2, parentRes.getNumSubResults());\n      // two nodes sorted by descending values: \n      // a/b with value 8 and residue 0 (because no children considered),  \n      //  and a/c with value 6 and residue 0 (because no children considered)\n      double [] expectedValues2 = { 8.0, 0.0, 6.0, 0.0 };\n      i = 0;\n      for (FacetResultNode node : parentRes.getSubResults()) {\n        assertEquals(expectedValues2[i++], node.getValue(), Double.MIN_VALUE);\n        assertEquals(expectedValues2[i++], node.getResidue(), Double.MIN_VALUE);\n        assertEquals(node.getNumSubResults(), 0);\n      }\n      \n      fr = facetResults.get(3); // a/b, depth=3, K=2\n      hasDoctor |= \"Doctor\".equals(fr.getFacetRequest().getCategoryPath().getComponent(0));\n      assertEquals(4, fr.getNumValidDescendants());\n      parentRes = fr.getFacetResultNode();\n      assertEquals(8.0, parentRes.getValue(), Double.MIN_VALUE);\n      assertEquals(2.0, parentRes.getResidue(), Double.MIN_VALUE);\n      assertEquals(2, parentRes.getNumSubResults());\n      double [] expectedValues3 = { 3.0, 2.0 };\n      i = 0;\n      for (FacetResultNode node : parentRes.getSubResults()) {\n        assertEquals(expectedValues3[i++], node.getValue(), Double.MIN_VALUE);\n        assertEquals(0.0, node.getResidue(), Double.MIN_VALUE);\n        assertEquals(0, node.getNumSubResults());\n      }\n\n      fr = facetResults.get(4); // a/b, depth=2, K=2\n      hasDoctor |= \"Doctor\".equals(fr.getFacetRequest().getCategoryPath().getComponent(0));\n      assertEquals(4, fr.getNumValidDescendants());\n      parentRes = fr.getFacetResultNode();\n      assertEquals(8.0, parentRes.getValue(), Double.MIN_VALUE);\n      assertEquals(2.0, parentRes.getResidue(), Double.MIN_VALUE);\n      assertEquals(2, parentRes.getNumSubResults());\n      i = 0;\n      for (FacetResultNode node : parentRes.getSubResults()) {\n        assertEquals(expectedValues3[i++], node.getValue(), Double.MIN_VALUE);\n        assertEquals(0.0, node.getResidue(), Double.MIN_VALUE);\n        assertEquals(0, node.getNumSubResults());\n      }\n\n      fr = facetResults.get(5); // a/b, depth=1, K=2\n      hasDoctor |= \"Doctor\".equals(fr.getFacetRequest().getCategoryPath().getComponent(0));\n      assertEquals(4, fr.getNumValidDescendants());\n      parentRes = fr.getFacetResultNode();\n      assertEquals(8.0, parentRes.getValue(), Double.MIN_VALUE);\n      assertEquals(2.0, parentRes.getResidue(), Double.MIN_VALUE);\n      assertEquals(2, parentRes.getNumSubResults());\n      i = 0;\n      for (FacetResultNode node : parentRes.getSubResults()) {\n        assertEquals(expectedValues3[i++], node.getValue(), Double.MIN_VALUE);\n        assertEquals(0.0, node.getResidue(), Double.MIN_VALUE);\n        assertEquals(0, node.getNumSubResults());\n      }\n      \n      fr = facetResults.get(6); // a/b, depth=0, K=2\n      hasDoctor |= \"Doctor\".equals(fr.getFacetRequest().getCategoryPath().getComponent(0));\n      assertEquals(0, fr.getNumValidDescendants()); // 0 descendants but rootnode\n      parentRes = fr.getFacetResultNode();\n      assertEquals(8.0, parentRes.getValue(), Double.MIN_VALUE);\n      assertEquals(0.0, parentRes.getResidue(), Double.MIN_VALUE);\n      assertEquals(0, parentRes.getNumSubResults());\n      hasDoctor |= \"Doctor\".equals(fr.getFacetRequest().getCategoryPath().getComponent(0));\n\n      // doctor, depth=1, K=2\n      assertFalse(\"Shouldn't have found anything for a FacetRequest \" +\n          \"of a facet that doesn't exist in the index.\", hasDoctor);\n      assertEquals(\"Shouldn't have found more than seven request.\", 7, facetResults.size());\n      ir.close();\n      tr.close();\n      iDir.close();\n      tDir.close();\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testSimple() throws Exception {\n\n    int[] partitionSizes = new int[] { \n        2,3,4, 5, 6, 7, 10, 1000,\n        Integer.MAX_VALUE };\n\n    for (int partitionSize : partitionSizes) {\n      Directory iDir = newDirectory();\n      Directory tDir = newDirectory();\n\n      if (VERBOSE) {\n        System.out.println(\"Partition Size: \" + partitionSize);\n      }\n      \n      final int pSize = partitionSize;\n      DefaultFacetIndexingParams iParams = new DefaultFacetIndexingParams() {\n        @Override\n        protected int fixedPartitionSize() {\n          return pSize;\n        }\n      };\n\n      RandomIndexWriter iw = new RandomIndexWriter(random, iDir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT,\n              new MockAnalyzer(random)).setOpenMode(OpenMode.CREATE));\n      TaxonomyWriter tw = new DirectoryTaxonomyWriter(tDir);\n      prvt_add(iParams, iw, tw, \"a\", \"b\");\n      prvt_add(iParams, iw, tw, \"a\", \"b\", \"1\");\n      prvt_add(iParams, iw, tw, \"a\", \"b\", \"1\");\n      prvt_add(iParams, iw, tw, \"a\", \"b\", \"2\");\n      prvt_add(iParams, iw, tw, \"a\", \"b\", \"2\");\n      prvt_add(iParams, iw, tw, \"a\", \"b\", \"2\");\n      prvt_add(iParams, iw, tw, \"a\", \"b\", \"3\");\n      prvt_add(iParams, iw, tw, \"a\", \"b\", \"4\");\n      prvt_add(iParams, iw, tw, \"a\", \"c\");\n      prvt_add(iParams, iw, tw, \"a\", \"c\");\n      prvt_add(iParams, iw, tw, \"a\", \"c\");\n      prvt_add(iParams, iw, tw, \"a\", \"c\");\n      prvt_add(iParams, iw, tw, \"a\", \"c\");\n      prvt_add(iParams, iw, tw, \"a\", \"c\", \"1\");\n      prvt_add(iParams, iw, tw, \"a\", \"d\");\n      prvt_add(iParams, iw, tw, \"a\", \"e\");\n\n      IndexReader ir = iw.getReader();\n      iw.close();\n      tw.commit();\n      tw.close();\n\n      IndexSearcher is = newSearcher(ir);\n      DirectoryTaxonomyReader tr = new DirectoryTaxonomyReader(tDir);\n\n      // Get all of the documents and run the query, then do different\n      // facet counts and compare to control\n      Query q = new TermQuery(new Term(\"content\", \"alpha\"));\n      ScoredDocIdCollector scoredDoc = ScoredDocIdCollector.create(ir.maxDoc(), true);\n\n      // Collector collector = new MultiCollector(scoredDoc);\n      is.search(q, scoredDoc);\n\n      CountFacetRequest cfra23 = new CountFacetRequest(\n          new CategoryPath(\"a\"), 2);\n      cfra23.setDepth(3);\n      cfra23.setResultMode(ResultMode.PER_NODE_IN_TREE);\n\n      CountFacetRequest cfra22 = new CountFacetRequest(\n          new CategoryPath(\"a\"), 2);\n      cfra22.setDepth(2);\n      cfra22.setResultMode(ResultMode.PER_NODE_IN_TREE);\n\n      CountFacetRequest cfra21 = new CountFacetRequest(\n          new CategoryPath(\"a\"), 2);\n      cfra21.setDepth(1);\n      cfra21.setResultMode(ResultMode.PER_NODE_IN_TREE);\n\n      CountFacetRequest cfrb22 = new CountFacetRequest(\n          new CategoryPath(\"a\", \"b\"), 2);\n      cfrb22.setDepth(2);\n      cfrb22.setResultMode(ResultMode.PER_NODE_IN_TREE);\n\n      CountFacetRequest cfrb23 = new CountFacetRequest(\n          new CategoryPath(\"a\", \"b\"), 2);\n      cfrb23.setDepth(3);\n      cfrb23.setResultMode(ResultMode.PER_NODE_IN_TREE);\n\n      CountFacetRequest cfrb21 = new CountFacetRequest(\n          new CategoryPath(\"a\", \"b\"), 2);\n      cfrb21.setDepth(1);\n      cfrb21.setResultMode(ResultMode.PER_NODE_IN_TREE);\n\n      CountFacetRequest doctor = new CountFacetRequest(\n          new CategoryPath(\"Doctor\"), 2);\n      doctor.setDepth(1);\n      doctor.setResultMode(ResultMode.PER_NODE_IN_TREE);\n\n      CountFacetRequest cfrb20 = new CountFacetRequest(\n          new CategoryPath(\"a\", \"b\"), 2);\n      cfrb20.setDepth(0);\n      cfrb20.setResultMode(ResultMode.PER_NODE_IN_TREE);\n\n      FacetSearchParams facetSearchParams = new FacetSearchParams(iParams);\n      facetSearchParams.addFacetRequest(cfra23);\n      facetSearchParams.addFacetRequest(cfra22);\n      facetSearchParams.addFacetRequest(cfra21);\n      facetSearchParams.addFacetRequest(cfrb23);\n      facetSearchParams.addFacetRequest(cfrb22);\n      facetSearchParams.addFacetRequest(cfrb21);\n      facetSearchParams.addFacetRequest(doctor);\n      facetSearchParams.addFacetRequest(cfrb20);\n      \n      IntArrayAllocator iaa = new IntArrayAllocator(PartitionsUtils.partitionSize(facetSearchParams,tr), 1);\n      FloatArrayAllocator faa = new FloatArrayAllocator(PartitionsUtils.partitionSize(facetSearchParams,tr), 1);\n      FacetsAccumulator fctExtrctr = new StandardFacetsAccumulator(facetSearchParams, is.getIndexReader(), tr, iaa, faa);\n      fctExtrctr.setComplementThreshold(FacetsAccumulator.DISABLE_COMPLEMENT);\n      long start = System.currentTimeMillis();\n\n      List<FacetResult> facetResults = fctExtrctr.accumulate(scoredDoc.getScoredDocIDs());\n\n      long end = System.currentTimeMillis();\n      if (VERBOSE) {\n        System.out.println(\"Time: \" + (end - start));\n      }\n      \n      FacetResult fr = facetResults.get(0); // a, depth=3, K=2\n      boolean hasDoctor = \"Doctor\".equals(fr.getFacetRequest().getCategoryPath().getComponent(0));\n      assertEquals(9, fr.getNumValidDescendants());\n      FacetResultNode parentRes = fr.getFacetResultNode();\n      assertEquals(16.0, parentRes.getValue(), Double.MIN_VALUE);\n      assertEquals(2.0, parentRes.getResidue(), Double.MIN_VALUE);\n      assertEquals(2, parentRes.getNumSubResults());\n      // two nodes sorted by descending values: a/b with 8  and a/c with 6\n      // a/b has residue 2 and two children a/b/2 with value 3, and a/b/1 with value 2. \n      // a/c has residue 0, and one child a/c/1 with value 1.\n      double [] expectedValues0 = { 8.0, 2.0, 3.0, 0.0, 2.0, 0.0, 6.0, 0.0, 1.0, 0.0 };\n      int i = 0;\n      for (FacetResultNode node : parentRes.getSubResults()) {\n        assertEquals(expectedValues0[i++], node.getValue(), Double.MIN_VALUE);\n        assertEquals(expectedValues0[i++], node.getResidue(), Double.MIN_VALUE);\n        for (FacetResultNode node2 : node.getSubResults()) {\n          assertEquals(expectedValues0[i++], node2.getValue(), Double.MIN_VALUE);\n          assertEquals(expectedValues0[i++], node2.getResidue(), Double.MIN_VALUE);\n        }\n      }\n\n      // now just change the value of the first child of the root to 5, and then rearrange\n      // expected are: first a/c of value 6 and residue 0, and one child a/c/1 with value 1\n      // then a/b with value 5 and residue 2, and both children: a/b/2 with value 3, and a/b/1 with value 2.\n      for (FacetResultNode node : parentRes.getSubResults()) {\n        node.setValue(5.0);\n        break;\n      }\n      // now rearrange\n      double [] expectedValues00 = { 6.0, 0.0, 1.0, 0.0, 5.0, 2.0, 3.0, 0.0, 2.0, 0.0 };\n      fr = cfra23.createFacetResultsHandler(tr).rearrangeFacetResult(fr);\n      i = 0;\n      for (FacetResultNode node : parentRes.getSubResults()) {\n        assertEquals(expectedValues00[i++], node.getValue(), Double.MIN_VALUE);\n        assertEquals(expectedValues00[i++], node.getResidue(), Double.MIN_VALUE);\n        for (FacetResultNode node2 : node.getSubResults()) {\n          assertEquals(expectedValues00[i++], node2.getValue(), Double.MIN_VALUE);\n          assertEquals(expectedValues00[i++], node2.getResidue(), Double.MIN_VALUE);\n        }\n      }\n\n      fr = facetResults.get(1); // a, depth=2, K=2. same result as before\n      hasDoctor |= \"Doctor\".equals(fr.getFacetRequest().getCategoryPath().getComponent(0));\n      assertEquals(9, fr.getNumValidDescendants());\n      parentRes = fr.getFacetResultNode();\n      assertEquals(16.0, parentRes.getValue(), Double.MIN_VALUE);\n      assertEquals(2.0, parentRes.getResidue(), Double.MIN_VALUE);\n      assertEquals(2, parentRes.getNumSubResults());\n      // two nodes sorted by descending values: a/b with 8  and a/c with 6\n      // a/b has residue 2 and two children a/b/2 with value 3, and a/b/1 with value 2. \n      // a/c has residue 0, and one child a/c/1 with value 1.\n      i = 0;\n      for (FacetResultNode node : parentRes.getSubResults()) {\n        assertEquals(expectedValues0[i++], node.getValue(), Double.MIN_VALUE);\n        assertEquals(expectedValues0[i++], node.getResidue(), Double.MIN_VALUE);\n        for (FacetResultNode node2 : node.getSubResults()) {\n          assertEquals(expectedValues0[i++], node2.getValue(), Double.MIN_VALUE);\n          assertEquals(expectedValues0[i++], node2.getResidue(), Double.MIN_VALUE);\n        }\n      }\n\n      fr = facetResults.get(2); // a, depth=1, K=2\n      hasDoctor |= \"Doctor\".equals(fr.getFacetRequest().getCategoryPath().getComponent(0));\n      assertEquals(4, fr.getNumValidDescendants(), 4);\n      parentRes = fr.getFacetResultNode();\n      assertEquals(16.0, parentRes.getValue(), Double.MIN_VALUE);\n      assertEquals(2.0, parentRes.getResidue(), Double.MIN_VALUE);\n      assertEquals(2, parentRes.getNumSubResults());\n      // two nodes sorted by descending values: \n      // a/b with value 8 and residue 0 (because no children considered),  \n      //  and a/c with value 6 and residue 0 (because no children considered)\n      double [] expectedValues2 = { 8.0, 0.0, 6.0, 0.0 };\n      i = 0;\n      for (FacetResultNode node : parentRes.getSubResults()) {\n        assertEquals(expectedValues2[i++], node.getValue(), Double.MIN_VALUE);\n        assertEquals(expectedValues2[i++], node.getResidue(), Double.MIN_VALUE);\n        assertEquals(node.getNumSubResults(), 0);\n      }\n      \n      fr = facetResults.get(3); // a/b, depth=3, K=2\n      hasDoctor |= \"Doctor\".equals(fr.getFacetRequest().getCategoryPath().getComponent(0));\n      assertEquals(4, fr.getNumValidDescendants());\n      parentRes = fr.getFacetResultNode();\n      assertEquals(8.0, parentRes.getValue(), Double.MIN_VALUE);\n      assertEquals(2.0, parentRes.getResidue(), Double.MIN_VALUE);\n      assertEquals(2, parentRes.getNumSubResults());\n      double [] expectedValues3 = { 3.0, 2.0 };\n      i = 0;\n      for (FacetResultNode node : parentRes.getSubResults()) {\n        assertEquals(expectedValues3[i++], node.getValue(), Double.MIN_VALUE);\n        assertEquals(0.0, node.getResidue(), Double.MIN_VALUE);\n        assertEquals(0, node.getNumSubResults());\n      }\n\n      fr = facetResults.get(4); // a/b, depth=2, K=2\n      hasDoctor |= \"Doctor\".equals(fr.getFacetRequest().getCategoryPath().getComponent(0));\n      assertEquals(4, fr.getNumValidDescendants());\n      parentRes = fr.getFacetResultNode();\n      assertEquals(8.0, parentRes.getValue(), Double.MIN_VALUE);\n      assertEquals(2.0, parentRes.getResidue(), Double.MIN_VALUE);\n      assertEquals(2, parentRes.getNumSubResults());\n      i = 0;\n      for (FacetResultNode node : parentRes.getSubResults()) {\n        assertEquals(expectedValues3[i++], node.getValue(), Double.MIN_VALUE);\n        assertEquals(0.0, node.getResidue(), Double.MIN_VALUE);\n        assertEquals(0, node.getNumSubResults());\n      }\n\n      fr = facetResults.get(5); // a/b, depth=1, K=2\n      hasDoctor |= \"Doctor\".equals(fr.getFacetRequest().getCategoryPath().getComponent(0));\n      assertEquals(4, fr.getNumValidDescendants());\n      parentRes = fr.getFacetResultNode();\n      assertEquals(8.0, parentRes.getValue(), Double.MIN_VALUE);\n      assertEquals(2.0, parentRes.getResidue(), Double.MIN_VALUE);\n      assertEquals(2, parentRes.getNumSubResults());\n      i = 0;\n      for (FacetResultNode node : parentRes.getSubResults()) {\n        assertEquals(expectedValues3[i++], node.getValue(), Double.MIN_VALUE);\n        assertEquals(0.0, node.getResidue(), Double.MIN_VALUE);\n        assertEquals(0, node.getNumSubResults());\n      }\n      \n      fr = facetResults.get(6); // a/b, depth=0, K=2\n      hasDoctor |= \"Doctor\".equals(fr.getFacetRequest().getCategoryPath().getComponent(0));\n      assertEquals(0, fr.getNumValidDescendants()); // 0 descendants but rootnode\n      parentRes = fr.getFacetResultNode();\n      assertEquals(8.0, parentRes.getValue(), Double.MIN_VALUE);\n      assertEquals(0.0, parentRes.getResidue(), Double.MIN_VALUE);\n      assertEquals(0, parentRes.getNumSubResults());\n      hasDoctor |= \"Doctor\".equals(fr.getFacetRequest().getCategoryPath().getComponent(0));\n\n      // doctor, depth=1, K=2\n      assertFalse(\"Shouldn't have found anything for a FacetRequest \" +\n          \"of a facet that doesn't exist in the index.\", hasDoctor);\n      assertEquals(\"Shouldn't have found more than seven request.\", 7, facetResults.size());\n      ir.close();\n      tr.close();\n      iDir.close();\n      tDir.close();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestTopKInEachNodeResultHandler#testSimple().mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/search/TestTopKInEachNodeResultHandler#testSimple().mjava","sourceNew":"  @Test\n  public void testSimple() throws Exception {\n\n    int[] partitionSizes = new int[] { \n        2,3,4, 5, 6, 7, 10, 1000,\n        Integer.MAX_VALUE };\n\n    for (int partitionSize : partitionSizes) {\n      Directory iDir = newDirectory();\n      Directory tDir = newDirectory();\n\n      if (VERBOSE) {\n        System.out.println(\"Partition Size: \" + partitionSize);\n      }\n      \n      final int pSize = partitionSize;\n      DefaultFacetIndexingParams iParams = new DefaultFacetIndexingParams() {\n        @Override\n        protected int fixedPartitionSize() {\n          return pSize;\n        }\n      };\n\n      RandomIndexWriter iw = new RandomIndexWriter(random(), iDir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT,\n              new MockAnalyzer(random())).setOpenMode(OpenMode.CREATE));\n      TaxonomyWriter tw = new DirectoryTaxonomyWriter(tDir);\n      prvt_add(iParams, iw, tw, \"a\", \"b\");\n      prvt_add(iParams, iw, tw, \"a\", \"b\", \"1\");\n      prvt_add(iParams, iw, tw, \"a\", \"b\", \"1\");\n      prvt_add(iParams, iw, tw, \"a\", \"b\", \"2\");\n      prvt_add(iParams, iw, tw, \"a\", \"b\", \"2\");\n      prvt_add(iParams, iw, tw, \"a\", \"b\", \"2\");\n      prvt_add(iParams, iw, tw, \"a\", \"b\", \"3\");\n      prvt_add(iParams, iw, tw, \"a\", \"b\", \"4\");\n      prvt_add(iParams, iw, tw, \"a\", \"c\");\n      prvt_add(iParams, iw, tw, \"a\", \"c\");\n      prvt_add(iParams, iw, tw, \"a\", \"c\");\n      prvt_add(iParams, iw, tw, \"a\", \"c\");\n      prvt_add(iParams, iw, tw, \"a\", \"c\");\n      prvt_add(iParams, iw, tw, \"a\", \"c\", \"1\");\n      prvt_add(iParams, iw, tw, \"a\", \"d\");\n      prvt_add(iParams, iw, tw, \"a\", \"e\");\n\n      IndexReader ir = iw.getReader();\n      iw.close();\n      tw.commit();\n      tw.close();\n\n      IndexSearcher is = newSearcher(ir);\n      DirectoryTaxonomyReader tr = new DirectoryTaxonomyReader(tDir);\n\n      // Get all of the documents and run the query, then do different\n      // facet counts and compare to control\n      Query q = new TermQuery(new Term(\"content\", \"alpha\"));\n      ScoredDocIdCollector scoredDoc = ScoredDocIdCollector.create(ir.maxDoc(), true);\n\n      // Collector collector = new MultiCollector(scoredDoc);\n      is.search(q, scoredDoc);\n\n      CountFacetRequest cfra23 = new CountFacetRequest(\n          new CategoryPath(\"a\"), 2);\n      cfra23.setDepth(3);\n      cfra23.setResultMode(ResultMode.PER_NODE_IN_TREE);\n\n      CountFacetRequest cfra22 = new CountFacetRequest(\n          new CategoryPath(\"a\"), 2);\n      cfra22.setDepth(2);\n      cfra22.setResultMode(ResultMode.PER_NODE_IN_TREE);\n\n      CountFacetRequest cfra21 = new CountFacetRequest(\n          new CategoryPath(\"a\"), 2);\n      cfra21.setDepth(1);\n      cfra21.setResultMode(ResultMode.PER_NODE_IN_TREE);\n\n      CountFacetRequest cfrb22 = new CountFacetRequest(\n          new CategoryPath(\"a\", \"b\"), 2);\n      cfrb22.setDepth(2);\n      cfrb22.setResultMode(ResultMode.PER_NODE_IN_TREE);\n\n      CountFacetRequest cfrb23 = new CountFacetRequest(\n          new CategoryPath(\"a\", \"b\"), 2);\n      cfrb23.setDepth(3);\n      cfrb23.setResultMode(ResultMode.PER_NODE_IN_TREE);\n\n      CountFacetRequest cfrb21 = new CountFacetRequest(\n          new CategoryPath(\"a\", \"b\"), 2);\n      cfrb21.setDepth(1);\n      cfrb21.setResultMode(ResultMode.PER_NODE_IN_TREE);\n\n      CountFacetRequest doctor = new CountFacetRequest(\n          new CategoryPath(\"Doctor\"), 2);\n      doctor.setDepth(1);\n      doctor.setResultMode(ResultMode.PER_NODE_IN_TREE);\n\n      CountFacetRequest cfrb20 = new CountFacetRequest(\n          new CategoryPath(\"a\", \"b\"), 2);\n      cfrb20.setDepth(0);\n      cfrb20.setResultMode(ResultMode.PER_NODE_IN_TREE);\n\n      FacetSearchParams facetSearchParams = new FacetSearchParams(iParams);\n      facetSearchParams.addFacetRequest(cfra23);\n      facetSearchParams.addFacetRequest(cfra22);\n      facetSearchParams.addFacetRequest(cfra21);\n      facetSearchParams.addFacetRequest(cfrb23);\n      facetSearchParams.addFacetRequest(cfrb22);\n      facetSearchParams.addFacetRequest(cfrb21);\n      facetSearchParams.addFacetRequest(doctor);\n      facetSearchParams.addFacetRequest(cfrb20);\n      \n      IntArrayAllocator iaa = new IntArrayAllocator(PartitionsUtils.partitionSize(facetSearchParams,tr), 1);\n      FloatArrayAllocator faa = new FloatArrayAllocator(PartitionsUtils.partitionSize(facetSearchParams,tr), 1);\n      FacetsAccumulator fctExtrctr = new StandardFacetsAccumulator(facetSearchParams, is.getIndexReader(), tr, iaa, faa);\n      fctExtrctr.setComplementThreshold(FacetsAccumulator.DISABLE_COMPLEMENT);\n      long start = System.currentTimeMillis();\n\n      List<FacetResult> facetResults = fctExtrctr.accumulate(scoredDoc.getScoredDocIDs());\n\n      long end = System.currentTimeMillis();\n      if (VERBOSE) {\n        System.out.println(\"Time: \" + (end - start));\n      }\n      \n      FacetResult fr = facetResults.get(0); // a, depth=3, K=2\n      boolean hasDoctor = \"Doctor\".equals(fr.getFacetRequest().getCategoryPath().getComponent(0));\n      assertEquals(9, fr.getNumValidDescendants());\n      FacetResultNode parentRes = fr.getFacetResultNode();\n      assertEquals(16.0, parentRes.getValue(), Double.MIN_VALUE);\n      assertEquals(2.0, parentRes.getResidue(), Double.MIN_VALUE);\n      assertEquals(2, parentRes.getNumSubResults());\n      // two nodes sorted by descending values: a/b with 8  and a/c with 6\n      // a/b has residue 2 and two children a/b/2 with value 3, and a/b/1 with value 2. \n      // a/c has residue 0, and one child a/c/1 with value 1.\n      double [] expectedValues0 = { 8.0, 2.0, 3.0, 0.0, 2.0, 0.0, 6.0, 0.0, 1.0, 0.0 };\n      int i = 0;\n      for (FacetResultNode node : parentRes.getSubResults()) {\n        assertEquals(expectedValues0[i++], node.getValue(), Double.MIN_VALUE);\n        assertEquals(expectedValues0[i++], node.getResidue(), Double.MIN_VALUE);\n        for (FacetResultNode node2 : node.getSubResults()) {\n          assertEquals(expectedValues0[i++], node2.getValue(), Double.MIN_VALUE);\n          assertEquals(expectedValues0[i++], node2.getResidue(), Double.MIN_VALUE);\n        }\n      }\n\n      // now just change the value of the first child of the root to 5, and then rearrange\n      // expected are: first a/c of value 6 and residue 0, and one child a/c/1 with value 1\n      // then a/b with value 5 and residue 2, and both children: a/b/2 with value 3, and a/b/1 with value 2.\n      for (FacetResultNode node : parentRes.getSubResults()) {\n        node.setValue(5.0);\n        break;\n      }\n      // now rearrange\n      double [] expectedValues00 = { 6.0, 0.0, 1.0, 0.0, 5.0, 2.0, 3.0, 0.0, 2.0, 0.0 };\n      fr = cfra23.createFacetResultsHandler(tr).rearrangeFacetResult(fr);\n      i = 0;\n      for (FacetResultNode node : parentRes.getSubResults()) {\n        assertEquals(expectedValues00[i++], node.getValue(), Double.MIN_VALUE);\n        assertEquals(expectedValues00[i++], node.getResidue(), Double.MIN_VALUE);\n        for (FacetResultNode node2 : node.getSubResults()) {\n          assertEquals(expectedValues00[i++], node2.getValue(), Double.MIN_VALUE);\n          assertEquals(expectedValues00[i++], node2.getResidue(), Double.MIN_VALUE);\n        }\n      }\n\n      fr = facetResults.get(1); // a, depth=2, K=2. same result as before\n      hasDoctor |= \"Doctor\".equals(fr.getFacetRequest().getCategoryPath().getComponent(0));\n      assertEquals(9, fr.getNumValidDescendants());\n      parentRes = fr.getFacetResultNode();\n      assertEquals(16.0, parentRes.getValue(), Double.MIN_VALUE);\n      assertEquals(2.0, parentRes.getResidue(), Double.MIN_VALUE);\n      assertEquals(2, parentRes.getNumSubResults());\n      // two nodes sorted by descending values: a/b with 8  and a/c with 6\n      // a/b has residue 2 and two children a/b/2 with value 3, and a/b/1 with value 2. \n      // a/c has residue 0, and one child a/c/1 with value 1.\n      i = 0;\n      for (FacetResultNode node : parentRes.getSubResults()) {\n        assertEquals(expectedValues0[i++], node.getValue(), Double.MIN_VALUE);\n        assertEquals(expectedValues0[i++], node.getResidue(), Double.MIN_VALUE);\n        for (FacetResultNode node2 : node.getSubResults()) {\n          assertEquals(expectedValues0[i++], node2.getValue(), Double.MIN_VALUE);\n          assertEquals(expectedValues0[i++], node2.getResidue(), Double.MIN_VALUE);\n        }\n      }\n\n      fr = facetResults.get(2); // a, depth=1, K=2\n      hasDoctor |= \"Doctor\".equals(fr.getFacetRequest().getCategoryPath().getComponent(0));\n      assertEquals(4, fr.getNumValidDescendants(), 4);\n      parentRes = fr.getFacetResultNode();\n      assertEquals(16.0, parentRes.getValue(), Double.MIN_VALUE);\n      assertEquals(2.0, parentRes.getResidue(), Double.MIN_VALUE);\n      assertEquals(2, parentRes.getNumSubResults());\n      // two nodes sorted by descending values: \n      // a/b with value 8 and residue 0 (because no children considered),  \n      //  and a/c with value 6 and residue 0 (because no children considered)\n      double [] expectedValues2 = { 8.0, 0.0, 6.0, 0.0 };\n      i = 0;\n      for (FacetResultNode node : parentRes.getSubResults()) {\n        assertEquals(expectedValues2[i++], node.getValue(), Double.MIN_VALUE);\n        assertEquals(expectedValues2[i++], node.getResidue(), Double.MIN_VALUE);\n        assertEquals(node.getNumSubResults(), 0);\n      }\n      \n      fr = facetResults.get(3); // a/b, depth=3, K=2\n      hasDoctor |= \"Doctor\".equals(fr.getFacetRequest().getCategoryPath().getComponent(0));\n      assertEquals(4, fr.getNumValidDescendants());\n      parentRes = fr.getFacetResultNode();\n      assertEquals(8.0, parentRes.getValue(), Double.MIN_VALUE);\n      assertEquals(2.0, parentRes.getResidue(), Double.MIN_VALUE);\n      assertEquals(2, parentRes.getNumSubResults());\n      double [] expectedValues3 = { 3.0, 2.0 };\n      i = 0;\n      for (FacetResultNode node : parentRes.getSubResults()) {\n        assertEquals(expectedValues3[i++], node.getValue(), Double.MIN_VALUE);\n        assertEquals(0.0, node.getResidue(), Double.MIN_VALUE);\n        assertEquals(0, node.getNumSubResults());\n      }\n\n      fr = facetResults.get(4); // a/b, depth=2, K=2\n      hasDoctor |= \"Doctor\".equals(fr.getFacetRequest().getCategoryPath().getComponent(0));\n      assertEquals(4, fr.getNumValidDescendants());\n      parentRes = fr.getFacetResultNode();\n      assertEquals(8.0, parentRes.getValue(), Double.MIN_VALUE);\n      assertEquals(2.0, parentRes.getResidue(), Double.MIN_VALUE);\n      assertEquals(2, parentRes.getNumSubResults());\n      i = 0;\n      for (FacetResultNode node : parentRes.getSubResults()) {\n        assertEquals(expectedValues3[i++], node.getValue(), Double.MIN_VALUE);\n        assertEquals(0.0, node.getResidue(), Double.MIN_VALUE);\n        assertEquals(0, node.getNumSubResults());\n      }\n\n      fr = facetResults.get(5); // a/b, depth=1, K=2\n      hasDoctor |= \"Doctor\".equals(fr.getFacetRequest().getCategoryPath().getComponent(0));\n      assertEquals(4, fr.getNumValidDescendants());\n      parentRes = fr.getFacetResultNode();\n      assertEquals(8.0, parentRes.getValue(), Double.MIN_VALUE);\n      assertEquals(2.0, parentRes.getResidue(), Double.MIN_VALUE);\n      assertEquals(2, parentRes.getNumSubResults());\n      i = 0;\n      for (FacetResultNode node : parentRes.getSubResults()) {\n        assertEquals(expectedValues3[i++], node.getValue(), Double.MIN_VALUE);\n        assertEquals(0.0, node.getResidue(), Double.MIN_VALUE);\n        assertEquals(0, node.getNumSubResults());\n      }\n      \n      fr = facetResults.get(6); // a/b, depth=0, K=2\n      hasDoctor |= \"Doctor\".equals(fr.getFacetRequest().getCategoryPath().getComponent(0));\n      assertEquals(0, fr.getNumValidDescendants()); // 0 descendants but rootnode\n      parentRes = fr.getFacetResultNode();\n      assertEquals(8.0, parentRes.getValue(), Double.MIN_VALUE);\n      assertEquals(0.0, parentRes.getResidue(), Double.MIN_VALUE);\n      assertEquals(0, parentRes.getNumSubResults());\n      hasDoctor |= \"Doctor\".equals(fr.getFacetRequest().getCategoryPath().getComponent(0));\n\n      // doctor, depth=1, K=2\n      assertFalse(\"Shouldn't have found anything for a FacetRequest \" +\n          \"of a facet that doesn't exist in the index.\", hasDoctor);\n      assertEquals(\"Shouldn't have found more than seven request.\", 7, facetResults.size());\n      ir.close();\n      tr.close();\n      iDir.close();\n      tDir.close();\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testSimple() throws Exception {\n\n    int[] partitionSizes = new int[] { \n        2,3,4, 5, 6, 7, 10, 1000,\n        Integer.MAX_VALUE };\n\n    for (int partitionSize : partitionSizes) {\n      Directory iDir = newDirectory();\n      Directory tDir = newDirectory();\n\n      if (VERBOSE) {\n        System.out.println(\"Partition Size: \" + partitionSize);\n      }\n      \n      final int pSize = partitionSize;\n      DefaultFacetIndexingParams iParams = new DefaultFacetIndexingParams() {\n        @Override\n        protected int fixedPartitionSize() {\n          return pSize;\n        }\n      };\n\n      RandomIndexWriter iw = new RandomIndexWriter(random(), iDir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT,\n              new MockAnalyzer(random())).setOpenMode(OpenMode.CREATE));\n      TaxonomyWriter tw = new DirectoryTaxonomyWriter(tDir);\n      prvt_add(iParams, iw, tw, \"a\", \"b\");\n      prvt_add(iParams, iw, tw, \"a\", \"b\", \"1\");\n      prvt_add(iParams, iw, tw, \"a\", \"b\", \"1\");\n      prvt_add(iParams, iw, tw, \"a\", \"b\", \"2\");\n      prvt_add(iParams, iw, tw, \"a\", \"b\", \"2\");\n      prvt_add(iParams, iw, tw, \"a\", \"b\", \"2\");\n      prvt_add(iParams, iw, tw, \"a\", \"b\", \"3\");\n      prvt_add(iParams, iw, tw, \"a\", \"b\", \"4\");\n      prvt_add(iParams, iw, tw, \"a\", \"c\");\n      prvt_add(iParams, iw, tw, \"a\", \"c\");\n      prvt_add(iParams, iw, tw, \"a\", \"c\");\n      prvt_add(iParams, iw, tw, \"a\", \"c\");\n      prvt_add(iParams, iw, tw, \"a\", \"c\");\n      prvt_add(iParams, iw, tw, \"a\", \"c\", \"1\");\n      prvt_add(iParams, iw, tw, \"a\", \"d\");\n      prvt_add(iParams, iw, tw, \"a\", \"e\");\n\n      IndexReader ir = iw.getReader();\n      iw.close();\n      tw.commit();\n      tw.close();\n\n      IndexSearcher is = newSearcher(ir);\n      DirectoryTaxonomyReader tr = new DirectoryTaxonomyReader(tDir);\n\n      // Get all of the documents and run the query, then do different\n      // facet counts and compare to control\n      Query q = new TermQuery(new Term(\"content\", \"alpha\"));\n      ScoredDocIdCollector scoredDoc = ScoredDocIdCollector.create(ir.maxDoc(), true);\n\n      // Collector collector = new MultiCollector(scoredDoc);\n      is.search(q, scoredDoc);\n\n      CountFacetRequest cfra23 = new CountFacetRequest(\n          new CategoryPath(\"a\"), 2);\n      cfra23.setDepth(3);\n      cfra23.setResultMode(ResultMode.PER_NODE_IN_TREE);\n\n      CountFacetRequest cfra22 = new CountFacetRequest(\n          new CategoryPath(\"a\"), 2);\n      cfra22.setDepth(2);\n      cfra22.setResultMode(ResultMode.PER_NODE_IN_TREE);\n\n      CountFacetRequest cfra21 = new CountFacetRequest(\n          new CategoryPath(\"a\"), 2);\n      cfra21.setDepth(1);\n      cfra21.setResultMode(ResultMode.PER_NODE_IN_TREE);\n\n      CountFacetRequest cfrb22 = new CountFacetRequest(\n          new CategoryPath(\"a\", \"b\"), 2);\n      cfrb22.setDepth(2);\n      cfrb22.setResultMode(ResultMode.PER_NODE_IN_TREE);\n\n      CountFacetRequest cfrb23 = new CountFacetRequest(\n          new CategoryPath(\"a\", \"b\"), 2);\n      cfrb23.setDepth(3);\n      cfrb23.setResultMode(ResultMode.PER_NODE_IN_TREE);\n\n      CountFacetRequest cfrb21 = new CountFacetRequest(\n          new CategoryPath(\"a\", \"b\"), 2);\n      cfrb21.setDepth(1);\n      cfrb21.setResultMode(ResultMode.PER_NODE_IN_TREE);\n\n      CountFacetRequest doctor = new CountFacetRequest(\n          new CategoryPath(\"Doctor\"), 2);\n      doctor.setDepth(1);\n      doctor.setResultMode(ResultMode.PER_NODE_IN_TREE);\n\n      CountFacetRequest cfrb20 = new CountFacetRequest(\n          new CategoryPath(\"a\", \"b\"), 2);\n      cfrb20.setDepth(0);\n      cfrb20.setResultMode(ResultMode.PER_NODE_IN_TREE);\n\n      FacetSearchParams facetSearchParams = new FacetSearchParams(iParams);\n      facetSearchParams.addFacetRequest(cfra23);\n      facetSearchParams.addFacetRequest(cfra22);\n      facetSearchParams.addFacetRequest(cfra21);\n      facetSearchParams.addFacetRequest(cfrb23);\n      facetSearchParams.addFacetRequest(cfrb22);\n      facetSearchParams.addFacetRequest(cfrb21);\n      facetSearchParams.addFacetRequest(doctor);\n      facetSearchParams.addFacetRequest(cfrb20);\n      \n      IntArrayAllocator iaa = new IntArrayAllocator(PartitionsUtils.partitionSize(facetSearchParams,tr), 1);\n      FloatArrayAllocator faa = new FloatArrayAllocator(PartitionsUtils.partitionSize(facetSearchParams,tr), 1);\n      FacetsAccumulator fctExtrctr = new StandardFacetsAccumulator(facetSearchParams, is.getIndexReader(), tr, iaa, faa);\n      fctExtrctr.setComplementThreshold(FacetsAccumulator.DISABLE_COMPLEMENT);\n      long start = System.currentTimeMillis();\n\n      List<FacetResult> facetResults = fctExtrctr.accumulate(scoredDoc.getScoredDocIDs());\n\n      long end = System.currentTimeMillis();\n      if (VERBOSE) {\n        System.out.println(\"Time: \" + (end - start));\n      }\n      \n      FacetResult fr = facetResults.get(0); // a, depth=3, K=2\n      boolean hasDoctor = \"Doctor\".equals(fr.getFacetRequest().getCategoryPath().getComponent(0));\n      assertEquals(9, fr.getNumValidDescendants());\n      FacetResultNode parentRes = fr.getFacetResultNode();\n      assertEquals(16.0, parentRes.getValue(), Double.MIN_VALUE);\n      assertEquals(2.0, parentRes.getResidue(), Double.MIN_VALUE);\n      assertEquals(2, parentRes.getNumSubResults());\n      // two nodes sorted by descending values: a/b with 8  and a/c with 6\n      // a/b has residue 2 and two children a/b/2 with value 3, and a/b/1 with value 2. \n      // a/c has residue 0, and one child a/c/1 with value 1.\n      double [] expectedValues0 = { 8.0, 2.0, 3.0, 0.0, 2.0, 0.0, 6.0, 0.0, 1.0, 0.0 };\n      int i = 0;\n      for (FacetResultNode node : parentRes.getSubResults()) {\n        assertEquals(expectedValues0[i++], node.getValue(), Double.MIN_VALUE);\n        assertEquals(expectedValues0[i++], node.getResidue(), Double.MIN_VALUE);\n        for (FacetResultNode node2 : node.getSubResults()) {\n          assertEquals(expectedValues0[i++], node2.getValue(), Double.MIN_VALUE);\n          assertEquals(expectedValues0[i++], node2.getResidue(), Double.MIN_VALUE);\n        }\n      }\n\n      // now just change the value of the first child of the root to 5, and then rearrange\n      // expected are: first a/c of value 6 and residue 0, and one child a/c/1 with value 1\n      // then a/b with value 5 and residue 2, and both children: a/b/2 with value 3, and a/b/1 with value 2.\n      for (FacetResultNode node : parentRes.getSubResults()) {\n        node.setValue(5.0);\n        break;\n      }\n      // now rearrange\n      double [] expectedValues00 = { 6.0, 0.0, 1.0, 0.0, 5.0, 2.0, 3.0, 0.0, 2.0, 0.0 };\n      fr = cfra23.createFacetResultsHandler(tr).rearrangeFacetResult(fr);\n      i = 0;\n      for (FacetResultNode node : parentRes.getSubResults()) {\n        assertEquals(expectedValues00[i++], node.getValue(), Double.MIN_VALUE);\n        assertEquals(expectedValues00[i++], node.getResidue(), Double.MIN_VALUE);\n        for (FacetResultNode node2 : node.getSubResults()) {\n          assertEquals(expectedValues00[i++], node2.getValue(), Double.MIN_VALUE);\n          assertEquals(expectedValues00[i++], node2.getResidue(), Double.MIN_VALUE);\n        }\n      }\n\n      fr = facetResults.get(1); // a, depth=2, K=2. same result as before\n      hasDoctor |= \"Doctor\".equals(fr.getFacetRequest().getCategoryPath().getComponent(0));\n      assertEquals(9, fr.getNumValidDescendants());\n      parentRes = fr.getFacetResultNode();\n      assertEquals(16.0, parentRes.getValue(), Double.MIN_VALUE);\n      assertEquals(2.0, parentRes.getResidue(), Double.MIN_VALUE);\n      assertEquals(2, parentRes.getNumSubResults());\n      // two nodes sorted by descending values: a/b with 8  and a/c with 6\n      // a/b has residue 2 and two children a/b/2 with value 3, and a/b/1 with value 2. \n      // a/c has residue 0, and one child a/c/1 with value 1.\n      i = 0;\n      for (FacetResultNode node : parentRes.getSubResults()) {\n        assertEquals(expectedValues0[i++], node.getValue(), Double.MIN_VALUE);\n        assertEquals(expectedValues0[i++], node.getResidue(), Double.MIN_VALUE);\n        for (FacetResultNode node2 : node.getSubResults()) {\n          assertEquals(expectedValues0[i++], node2.getValue(), Double.MIN_VALUE);\n          assertEquals(expectedValues0[i++], node2.getResidue(), Double.MIN_VALUE);\n        }\n      }\n\n      fr = facetResults.get(2); // a, depth=1, K=2\n      hasDoctor |= \"Doctor\".equals(fr.getFacetRequest().getCategoryPath().getComponent(0));\n      assertEquals(4, fr.getNumValidDescendants(), 4);\n      parentRes = fr.getFacetResultNode();\n      assertEquals(16.0, parentRes.getValue(), Double.MIN_VALUE);\n      assertEquals(2.0, parentRes.getResidue(), Double.MIN_VALUE);\n      assertEquals(2, parentRes.getNumSubResults());\n      // two nodes sorted by descending values: \n      // a/b with value 8 and residue 0 (because no children considered),  \n      //  and a/c with value 6 and residue 0 (because no children considered)\n      double [] expectedValues2 = { 8.0, 0.0, 6.0, 0.0 };\n      i = 0;\n      for (FacetResultNode node : parentRes.getSubResults()) {\n        assertEquals(expectedValues2[i++], node.getValue(), Double.MIN_VALUE);\n        assertEquals(expectedValues2[i++], node.getResidue(), Double.MIN_VALUE);\n        assertEquals(node.getNumSubResults(), 0);\n      }\n      \n      fr = facetResults.get(3); // a/b, depth=3, K=2\n      hasDoctor |= \"Doctor\".equals(fr.getFacetRequest().getCategoryPath().getComponent(0));\n      assertEquals(4, fr.getNumValidDescendants());\n      parentRes = fr.getFacetResultNode();\n      assertEquals(8.0, parentRes.getValue(), Double.MIN_VALUE);\n      assertEquals(2.0, parentRes.getResidue(), Double.MIN_VALUE);\n      assertEquals(2, parentRes.getNumSubResults());\n      double [] expectedValues3 = { 3.0, 2.0 };\n      i = 0;\n      for (FacetResultNode node : parentRes.getSubResults()) {\n        assertEquals(expectedValues3[i++], node.getValue(), Double.MIN_VALUE);\n        assertEquals(0.0, node.getResidue(), Double.MIN_VALUE);\n        assertEquals(0, node.getNumSubResults());\n      }\n\n      fr = facetResults.get(4); // a/b, depth=2, K=2\n      hasDoctor |= \"Doctor\".equals(fr.getFacetRequest().getCategoryPath().getComponent(0));\n      assertEquals(4, fr.getNumValidDescendants());\n      parentRes = fr.getFacetResultNode();\n      assertEquals(8.0, parentRes.getValue(), Double.MIN_VALUE);\n      assertEquals(2.0, parentRes.getResidue(), Double.MIN_VALUE);\n      assertEquals(2, parentRes.getNumSubResults());\n      i = 0;\n      for (FacetResultNode node : parentRes.getSubResults()) {\n        assertEquals(expectedValues3[i++], node.getValue(), Double.MIN_VALUE);\n        assertEquals(0.0, node.getResidue(), Double.MIN_VALUE);\n        assertEquals(0, node.getNumSubResults());\n      }\n\n      fr = facetResults.get(5); // a/b, depth=1, K=2\n      hasDoctor |= \"Doctor\".equals(fr.getFacetRequest().getCategoryPath().getComponent(0));\n      assertEquals(4, fr.getNumValidDescendants());\n      parentRes = fr.getFacetResultNode();\n      assertEquals(8.0, parentRes.getValue(), Double.MIN_VALUE);\n      assertEquals(2.0, parentRes.getResidue(), Double.MIN_VALUE);\n      assertEquals(2, parentRes.getNumSubResults());\n      i = 0;\n      for (FacetResultNode node : parentRes.getSubResults()) {\n        assertEquals(expectedValues3[i++], node.getValue(), Double.MIN_VALUE);\n        assertEquals(0.0, node.getResidue(), Double.MIN_VALUE);\n        assertEquals(0, node.getNumSubResults());\n      }\n      \n      fr = facetResults.get(6); // a/b, depth=0, K=2\n      hasDoctor |= \"Doctor\".equals(fr.getFacetRequest().getCategoryPath().getComponent(0));\n      assertEquals(0, fr.getNumValidDescendants()); // 0 descendants but rootnode\n      parentRes = fr.getFacetResultNode();\n      assertEquals(8.0, parentRes.getValue(), Double.MIN_VALUE);\n      assertEquals(0.0, parentRes.getResidue(), Double.MIN_VALUE);\n      assertEquals(0, parentRes.getNumSubResults());\n      hasDoctor |= \"Doctor\".equals(fr.getFacetRequest().getCategoryPath().getComponent(0));\n\n      // doctor, depth=1, K=2\n      assertFalse(\"Shouldn't have found anything for a FacetRequest \" +\n          \"of a facet that doesn't exist in the index.\", hasDoctor);\n      assertEquals(\"Shouldn't have found more than seven request.\", 7, facetResults.size());\n      ir.close();\n      tr.close();\n      iDir.close();\n      tDir.close();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"ea469eab8fd0f3032f4fcde1c644a721e8309d3b":["7a4df66e06e0c3b520d7d5941e1c043076f06f17"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["f4c236b7b2d1cb61683f5ba02d09249fdb42a7fd"],"7a4df66e06e0c3b520d7d5941e1c043076f06f17":["89f15687f60bd49cd3d9de427e85c17fd9397d61"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7a4df66e06e0c3b520d7d5941e1c043076f06f17"],"f4c236b7b2d1cb61683f5ba02d09249fdb42a7fd":["ea469eab8fd0f3032f4fcde1c644a721e8309d3b"],"89f15687f60bd49cd3d9de427e85c17fd9397d61":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7a4df66e06e0c3b520d7d5941e1c043076f06f17"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ea469eab8fd0f3032f4fcde1c644a721e8309d3b":["f4c236b7b2d1cb61683f5ba02d09249fdb42a7fd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d083e83f225b11e5fdd900e83d26ddb385b6955c","89f15687f60bd49cd3d9de427e85c17fd9397d61","817d8435e9135b756f08ce6710ab0baac51bdf88"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"7a4df66e06e0c3b520d7d5941e1c043076f06f17":["ea469eab8fd0f3032f4fcde1c644a721e8309d3b","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"f4c236b7b2d1cb61683f5ba02d09249fdb42a7fd":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"89f15687f60bd49cd3d9de427e85c17fd9397d61":["7a4df66e06e0c3b520d7d5941e1c043076f06f17"],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}