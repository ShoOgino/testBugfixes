{"path":"lucene/backwards/src/test/org/apache/lucene/index/TestDoc#merge(SegmentInfo,SegmentInfo,String,boolean).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/index/TestDoc#merge(SegmentInfo,SegmentInfo,String,boolean).mjava","pathOld":"backwards/src/test/org/apache/lucene/index/TestDoc#merge(SegmentInfo,SegmentInfo,String,boolean).mjava","sourceNew":"   private SegmentInfo merge(SegmentInfo si1, SegmentInfo si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      SegmentReader r1 = SegmentReader.get(true, si1, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n      SegmentReader r2 = SegmentReader.get(true, si2, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n\n      SegmentMerger merger = new SegmentMerger(si1.dir, merged);\n\n      merger.add(r1);\n      merger.add(r2);\n      merger.merge();\n      merger.closeReaders();\n      \n      if (useCompoundFile) {\n        List filesToDelete = merger.createCompoundFile(merged + \".cfs\");\n        for (Iterator iter = filesToDelete.iterator(); iter.hasNext();)\n          si1.dir.deleteFile((String) iter.next());\n      }\n\n      return new SegmentInfo(merged, si1.docCount + si2.docCount, si1.dir, useCompoundFile, true);\n   }\n\n","sourceOld":"   private SegmentInfo merge(SegmentInfo si1, SegmentInfo si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      SegmentReader r1 = SegmentReader.get(true, si1, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n      SegmentReader r2 = SegmentReader.get(true, si2, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n\n      SegmentMerger merger = new SegmentMerger(si1.dir, merged);\n\n      merger.add(r1);\n      merger.add(r2);\n      merger.merge();\n      merger.closeReaders();\n      \n      if (useCompoundFile) {\n        List filesToDelete = merger.createCompoundFile(merged + \".cfs\");\n        for (Iterator iter = filesToDelete.iterator(); iter.hasNext();)\n          si1.dir.deleteFile((String) iter.next());\n      }\n\n      return new SegmentInfo(merged, si1.docCount + si2.docCount, si1.dir, useCompoundFile, true);\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/index/TestDoc#merge(SegmentInfo,SegmentInfo,String,boolean).mjava","pathOld":"lucene/backwards/src/test/org/apache/lucene/index/TestDoc#merge(SegmentInfo,SegmentInfo,String,boolean).mjava","sourceNew":"   private SegmentInfo merge(SegmentInfo si1, SegmentInfo si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      SegmentReader r1 = SegmentReader.get(true, si1, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n      SegmentReader r2 = SegmentReader.get(true, si2, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n\n      SegmentMerger merger = new SegmentMerger(si1.dir, IndexWriter.DEFAULT_TERM_INDEX_INTERVAL, merged, null, CodecProvider.getDefault());\n\n      merger.add(r1);\n      merger.add(r2);\n      merger.merge();\n      merger.closeReaders();\n      \n      final SegmentInfo info = new SegmentInfo(merged, si1.docCount + si2.docCount, si1.dir,\n                                               useCompoundFile, true, -1, null, false, merger.hasProx(),\n                                               merger.getCodec());\n      \n      if (useCompoundFile) {\n        List filesToDelete = merger.createCompoundFile(merged + \".cfs\", info);\n        for (Iterator iter = filesToDelete.iterator(); iter.hasNext();)\n          si1.dir.deleteFile((String) iter.next());\n      }\n\n      return info;\n   }\n\n","sourceOld":"   private SegmentInfo merge(SegmentInfo si1, SegmentInfo si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      SegmentReader r1 = SegmentReader.get(true, si1, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n      SegmentReader r2 = SegmentReader.get(true, si2, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n\n      SegmentMerger merger = new SegmentMerger(si1.dir, merged);\n\n      merger.add(r1);\n      merger.add(r2);\n      merger.merge();\n      merger.closeReaders();\n      \n      if (useCompoundFile) {\n        List filesToDelete = merger.createCompoundFile(merged + \".cfs\");\n        for (Iterator iter = filesToDelete.iterator(); iter.hasNext();)\n          si1.dir.deleteFile((String) iter.next());\n      }\n\n      return new SegmentInfo(merged, si1.docCount + si2.docCount, si1.dir, useCompoundFile, true);\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/test/org/apache/lucene/index/TestDoc#merge(SegmentInfo,SegmentInfo,String,boolean).mjava","sourceNew":null,"sourceOld":"   private SegmentInfo merge(SegmentInfo si1, SegmentInfo si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      SegmentReader r1 = SegmentReader.get(true, si1, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n      SegmentReader r2 = SegmentReader.get(true, si2, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n\n      SegmentMerger merger = new SegmentMerger(si1.dir, IndexWriter.DEFAULT_TERM_INDEX_INTERVAL, merged, null, CodecProvider.getDefault());\n\n      merger.add(r1);\n      merger.add(r2);\n      merger.merge();\n      merger.closeReaders();\n      \n      final SegmentInfo info = new SegmentInfo(merged, si1.docCount + si2.docCount, si1.dir,\n                                               useCompoundFile, true, -1, null, false, merger.hasProx(),\n                                               merger.getCodec());\n      \n      if (useCompoundFile) {\n        List filesToDelete = merger.createCompoundFile(merged + \".cfs\", info);\n        for (Iterator iter = filesToDelete.iterator(); iter.hasNext();)\n          si1.dir.deleteFile((String) iter.next());\n      }\n\n      return info;\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}