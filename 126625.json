{"path":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsReader.ChunkIterator#ChunkIterator(int).mjava","commits":[{"id":"ba718737348b631d49101cf505322f868a130196","date":1397033548,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsReader.ChunkIterator#ChunkIterator(int).mjava","pathOld":"/dev/null","sourceNew":"    private ChunkIterator(int startDocId) throws IOException {\n      this.docBase = -1;\n      bytes = new BytesRef();\n      spare = new BytesRef();\n      numStoredFields = new int[1];\n      lengths = new int[1];\n\n      IndexInput in = CompressingStoredFieldsReader.this.fieldsStream;\n      in.seek(0);\n      fieldsStream = new BufferedChecksumIndexInput(in) {\n\n        final byte[] skipBuffer = new byte[256];\n\n        @Override\n        public void seek(long target) throws IOException {\n          final long skip = target - getFilePointer();\n          if (skip < 0) {\n            throw new IllegalStateException(\"Seeking backward on merge: \" + skip);\n          }\n          for (long skipped = 0; skipped < skip; ) {\n            final int step = (int) Math.min(skipBuffer.length, skip - skipped);\n            readBytes(skipBuffer, 0, step);\n            skipped += step;\n          }\n        }\n\n      };\n      fieldsStream.seek(indexReader.getStartPointer(startDocId));\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["c7bda8b8b6640dd6438d931c8f9432366011a094"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c7bda8b8b6640dd6438d931c8f9432366011a094","date":1397113958,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsReader.ChunkIterator#ChunkIterator(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsReader.ChunkIterator#ChunkIterator(int).mjava","sourceNew":"    private ChunkIterator(int startDocId) throws IOException {\n      this.docBase = -1;\n      bytes = new BytesRef();\n      spare = new BytesRef();\n      numStoredFields = new int[1];\n      lengths = new int[1];\n\n      IndexInput in = CompressingStoredFieldsReader.this.fieldsStream;\n      in.seek(0);\n      fieldsStream = new BufferedChecksumIndexInput(in);\n      fieldsStream.seek(indexReader.getStartPointer(startDocId));\n    }\n\n","sourceOld":"    private ChunkIterator(int startDocId) throws IOException {\n      this.docBase = -1;\n      bytes = new BytesRef();\n      spare = new BytesRef();\n      numStoredFields = new int[1];\n      lengths = new int[1];\n\n      IndexInput in = CompressingStoredFieldsReader.this.fieldsStream;\n      in.seek(0);\n      fieldsStream = new BufferedChecksumIndexInput(in) {\n\n        final byte[] skipBuffer = new byte[256];\n\n        @Override\n        public void seek(long target) throws IOException {\n          final long skip = target - getFilePointer();\n          if (skip < 0) {\n            throw new IllegalStateException(\"Seeking backward on merge: \" + skip);\n          }\n          for (long skipped = 0; skipped < skip; ) {\n            final int step = (int) Math.min(skipBuffer.length, skip - skipped);\n            readBytes(skipBuffer, 0, step);\n            skipped += step;\n          }\n        }\n\n      };\n      fieldsStream.seek(indexReader.getStartPointer(startDocId));\n    }\n\n","bugFix":["ba718737348b631d49101cf505322f868a130196"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f09f483a0844bb9dc34fb10380cb053aa96219b","date":1418894001,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsReader.ChunkIterator#ChunkIterator(int).mjava","sourceNew":null,"sourceOld":"    private ChunkIterator(int startDocId) throws IOException {\n      this.docBase = -1;\n      bytes = new BytesRef();\n      spare = new BytesRef();\n      numStoredFields = new int[1];\n      lengths = new int[1];\n\n      IndexInput in = CompressingStoredFieldsReader.this.fieldsStream;\n      in.seek(0);\n      fieldsStream = new BufferedChecksumIndexInput(in);\n      fieldsStream.seek(indexReader.getStartPointer(startDocId));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7bda8b8b6640dd6438d931c8f9432366011a094":["ba718737348b631d49101cf505322f868a130196"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1f09f483a0844bb9dc34fb10380cb053aa96219b":["c7bda8b8b6640dd6438d931c8f9432366011a094"],"ba718737348b631d49101cf505322f868a130196":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1f09f483a0844bb9dc34fb10380cb053aa96219b"]},"commit2Childs":{"c7bda8b8b6640dd6438d931c8f9432366011a094":["1f09f483a0844bb9dc34fb10380cb053aa96219b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ba718737348b631d49101cf505322f868a130196"],"1f09f483a0844bb9dc34fb10380cb053aa96219b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ba718737348b631d49101cf505322f868a130196":["c7bda8b8b6640dd6438d931c8f9432366011a094"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}