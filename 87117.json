{"path":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/NumberRangePrefixTreeStrategy#calcFacets(IndexReaderContext,Filter,Shape,int).mjava","commits":[{"id":"43b6a8da533f89c8953c7b71eb457b77990e2ec1","date":1423847973,"type":1,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/NumberRangePrefixTreeStrategy#calcFacets(IndexReaderContext,Filter,Shape,int).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/NumberRangePrefixTreeStrategy#calcFacets(IndexReaderContext,Filter,Shape,int).mjava","sourceNew":"  /**\n   * Calculates facets (aggregated counts) given a range shape (start-end span) and a level, which specifies the detail.\n   * To get the level of an existing shape, say a Calendar, call\n   * {@link org.apache.lucene.spatial.prefix.tree.NumberRangePrefixTree#toUnitShape(Object)} then call\n   * {@link org.apache.lucene.spatial.prefix.tree.NumberRangePrefixTree.UnitNRShape#getLevel()}.\n   * Facet computation is implemented by navigating the underlying indexed terms efficiently.\n   */\n  public Facets calcFacets(IndexReaderContext context, Filter filter, Shape facetRange, final int level)\n      throws IOException {\n    final Facets facets = new Facets(level);\n    PrefixTreeFacetCounter.compute(this, context, filter, facetRange, level,\n        new PrefixTreeFacetCounter.FacetVisitor() {\n          Facets.FacetParentVal parentFacet;\n          UnitNRShape parentShape;\n\n          @Override\n          public void visit(Cell cell, int count) {\n            if (cell.getLevel() < level - 1) {//some ancestor of parent facet level, direct or distant\n              parentFacet = null;//reset\n              parentShape = null;//reset\n              facets.topLeaves += count;\n            } else if (cell.getLevel() == level - 1) {//parent\n              //set up FacetParentVal\n              setupParent((UnitNRShape) cell.getShape());\n              parentFacet.parentLeaves += count;\n            } else {//at facet level\n              UnitNRShape unitShape = (UnitNRShape) cell.getShape();\n              UnitNRShape unitShapeParent = unitShape.getShapeAtLevel(unitShape.getLevel() - 1);\n              if (parentFacet == null || !parentShape.equals(unitShapeParent)) {\n                setupParent(unitShapeParent);\n              }\n              //lazy init childCounts\n              if (parentFacet.childCounts == null) {\n                parentFacet.childCounts = new int[parentFacet.childCountsLen];\n              }\n              parentFacet.childCounts[unitShape.getValAtLevel(cell.getLevel())] += count;\n            }\n          }\n\n          private void setupParent(UnitNRShape unitShape) {\n            parentShape = unitShape.clone();\n            //Look for existing parentFacet (from previous segment), or create anew if needed\n            parentFacet = facets.parents.get(parentShape);\n            if (parentFacet == null) {//didn't find one; make a new one\n              parentFacet = new Facets.FacetParentVal();\n              parentFacet.childCountsLen = getGrid().getNumSubCells(parentShape);\n              facets.parents.put(parentShape, parentFacet);\n            }\n          }\n        });\n    return facets;\n  }\n\n","sourceOld":"  /**\n   * Calculates facets (aggregated counts) given a range shape (start-end span) and a level, which specifies the detail.\n   * To get the level of an existing shape, say a Calendar, call\n   * {@link org.apache.lucene.spatial.prefix.tree.NumberRangePrefixTree#toUnitShape(Object)} then call\n   * {@link org.apache.lucene.spatial.prefix.tree.NumberRangePrefixTree.UnitNRShape#getLevel()}.\n   * Facet computation is implemented by navigating the underlying indexed terms efficiently.\n   */\n  public Facets calcFacets(IndexReaderContext context, Filter filter, Shape facetRange, final int level)\n      throws IOException {\n    final Facets facets = new Facets(level);\n    PrefixTreeFacetCounter.compute(this, context, filter, facetRange, level,\n        new PrefixTreeFacetCounter.FacetVisitor() {\n          Facets.FacetParentVal parentFacet;\n          UnitNRShape parentShape;\n\n          @Override\n          public void visit(Cell cell, int count) {\n            if (cell.getLevel() < level - 1) {//some ancestor of parent facet level, direct or distant\n              parentFacet = null;//reset\n              parentShape = null;//reset\n              facets.topLeaves += count;\n            } else if (cell.getLevel() == level - 1) {//parent\n              //set up FacetParentVal\n              setupParent((UnitNRShape) cell.getShape());\n              parentFacet.parentLeaves += count;\n            } else {//at facet level\n              UnitNRShape unitShape = (UnitNRShape) cell.getShape();\n              UnitNRShape unitShapeParent = unitShape.getShapeAtLevel(unitShape.getLevel() - 1);\n              if (parentFacet == null || !parentShape.equals(unitShapeParent)) {\n                setupParent(unitShapeParent);\n              }\n              //lazy init childCounts\n              if (parentFacet.childCounts == null) {\n                parentFacet.childCounts = new int[parentFacet.childCountsLen];\n              }\n              parentFacet.childCounts[unitShape.getValAtLevel(cell.getLevel())] += count;\n            }\n          }\n\n          private void setupParent(UnitNRShape unitShape) {\n            parentShape = unitShape.clone();\n            //Look for existing parentFacet (from previous segment), or create anew if needed\n            parentFacet = facets.parents.get(parentShape);\n            if (parentFacet == null) {//didn't find one; make a new one\n              parentFacet = new Facets.FacetParentVal();\n              parentFacet.childCountsLen = getGrid().getNumSubCells(parentShape);\n              facets.parents.put(parentShape, parentFacet);\n            }\n          }\n        });\n    return facets;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"672b198fc3dce868916c727917cae58c2906763d","date":1443669960,"type":5,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/NumberRangePrefixTreeStrategy#calcFacets(IndexReaderContext,Bits,Shape,int).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/NumberRangePrefixTreeStrategy#calcFacets(IndexReaderContext,Filter,Shape,int).mjava","sourceNew":"  /**\n   * Calculates facets (aggregated counts) given a range shape (start-end span) and a level, which specifies the detail.\n   * To get the level of an existing shape, say a Calendar, call\n   * {@link org.apache.lucene.spatial.prefix.tree.NumberRangePrefixTree#toUnitShape(Object)} then call\n   * {@link org.apache.lucene.spatial.prefix.tree.NumberRangePrefixTree.UnitNRShape#getLevel()}.\n   * Facet computation is implemented by navigating the underlying indexed terms efficiently.\n   */\n  public Facets calcFacets(IndexReaderContext context, Bits topAcceptDocs, Shape facetRange, final int level)\n      throws IOException {\n    final Facets facets = new Facets(level);\n    PrefixTreeFacetCounter.compute(this, context, topAcceptDocs, facetRange, level,\n        new PrefixTreeFacetCounter.FacetVisitor() {\n          Facets.FacetParentVal parentFacet;\n          UnitNRShape parentShape;\n\n          @Override\n          public void visit(Cell cell, int count) {\n            if (cell.getLevel() < level - 1) {//some ancestor of parent facet level, direct or distant\n              parentFacet = null;//reset\n              parentShape = null;//reset\n              facets.topLeaves += count;\n            } else if (cell.getLevel() == level - 1) {//parent\n              //set up FacetParentVal\n              setupParent((UnitNRShape) cell.getShape());\n              parentFacet.parentLeaves += count;\n            } else {//at facet level\n              UnitNRShape unitShape = (UnitNRShape) cell.getShape();\n              UnitNRShape unitShapeParent = unitShape.getShapeAtLevel(unitShape.getLevel() - 1);\n              if (parentFacet == null || !parentShape.equals(unitShapeParent)) {\n                setupParent(unitShapeParent);\n              }\n              //lazy init childCounts\n              if (parentFacet.childCounts == null) {\n                parentFacet.childCounts = new int[parentFacet.childCountsLen];\n              }\n              parentFacet.childCounts[unitShape.getValAtLevel(cell.getLevel())] += count;\n            }\n          }\n\n          private void setupParent(UnitNRShape unitShape) {\n            parentShape = unitShape.clone();\n            //Look for existing parentFacet (from previous segment), or create anew if needed\n            parentFacet = facets.parents.get(parentShape);\n            if (parentFacet == null) {//didn't find one; make a new one\n              parentFacet = new Facets.FacetParentVal();\n              parentFacet.childCountsLen = getGrid().getNumSubCells(parentShape);\n              facets.parents.put(parentShape, parentFacet);\n            }\n          }\n        });\n    return facets;\n  }\n\n","sourceOld":"  /**\n   * Calculates facets (aggregated counts) given a range shape (start-end span) and a level, which specifies the detail.\n   * To get the level of an existing shape, say a Calendar, call\n   * {@link org.apache.lucene.spatial.prefix.tree.NumberRangePrefixTree#toUnitShape(Object)} then call\n   * {@link org.apache.lucene.spatial.prefix.tree.NumberRangePrefixTree.UnitNRShape#getLevel()}.\n   * Facet computation is implemented by navigating the underlying indexed terms efficiently.\n   */\n  public Facets calcFacets(IndexReaderContext context, Filter filter, Shape facetRange, final int level)\n      throws IOException {\n    final Facets facets = new Facets(level);\n    PrefixTreeFacetCounter.compute(this, context, filter, facetRange, level,\n        new PrefixTreeFacetCounter.FacetVisitor() {\n          Facets.FacetParentVal parentFacet;\n          UnitNRShape parentShape;\n\n          @Override\n          public void visit(Cell cell, int count) {\n            if (cell.getLevel() < level - 1) {//some ancestor of parent facet level, direct or distant\n              parentFacet = null;//reset\n              parentShape = null;//reset\n              facets.topLeaves += count;\n            } else if (cell.getLevel() == level - 1) {//parent\n              //set up FacetParentVal\n              setupParent((UnitNRShape) cell.getShape());\n              parentFacet.parentLeaves += count;\n            } else {//at facet level\n              UnitNRShape unitShape = (UnitNRShape) cell.getShape();\n              UnitNRShape unitShapeParent = unitShape.getShapeAtLevel(unitShape.getLevel() - 1);\n              if (parentFacet == null || !parentShape.equals(unitShapeParent)) {\n                setupParent(unitShapeParent);\n              }\n              //lazy init childCounts\n              if (parentFacet.childCounts == null) {\n                parentFacet.childCounts = new int[parentFacet.childCountsLen];\n              }\n              parentFacet.childCounts[unitShape.getValAtLevel(cell.getLevel())] += count;\n            }\n          }\n\n          private void setupParent(UnitNRShape unitShape) {\n            parentShape = unitShape.clone();\n            //Look for existing parentFacet (from previous segment), or create anew if needed\n            parentFacet = facets.parents.get(parentShape);\n            if (parentFacet == null) {//didn't find one; make a new one\n              parentFacet = new Facets.FacetParentVal();\n              parentFacet.childCountsLen = getGrid().getNumSubCells(parentShape);\n              facets.parents.put(parentShape, parentFacet);\n            }\n          }\n        });\n    return facets;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"43b6a8da533f89c8953c7b71eb457b77990e2ec1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"672b198fc3dce868916c727917cae58c2906763d":["43b6a8da533f89c8953c7b71eb457b77990e2ec1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["672b198fc3dce868916c727917cae58c2906763d"]},"commit2Childs":{"43b6a8da533f89c8953c7b71eb457b77990e2ec1":["672b198fc3dce868916c727917cae58c2906763d"],"672b198fc3dce868916c727917cae58c2906763d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["43b6a8da533f89c8953c7b71eb457b77990e2ec1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}