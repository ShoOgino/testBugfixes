{"path":"src/java/org/apache/solr/handler/SnapPuller#copyIndexFiles(File,File).mjava","commits":[{"id":"f4ead54bbd0d8cf4a0b5f025fbad65581b8cd349","date":1224582283,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/SnapPuller#copyIndexFiles(File,File).mjava","pathOld":"/dev/null","sourceNew":"  private boolean copyIndexFiles(File snapDir, File indexDir) {\n    String segmentsFile = null;\n    List<String> copiedfiles = new ArrayList<String>();\n    for (Map<String, Object> f : filesDownloaded) {\n      String fname = (String) f.get(NAME);\n      if (fname.startsWith(\"segments_\")) {\n        //The segments file must be copied in the end\n        //Otherwise , if the copy fails index ends up corrupted\n        segmentsFile = fname;\n        continue;\n      }\n      if (!copyAFile(snapDir, indexDir, fname, copiedfiles)) return false;\n      copiedfiles.add(fname);\n    }\n    if (segmentsFile != null) {\n      if (!copyAFile(snapDir, indexDir, segmentsFile, copiedfiles)) return false;\n    }\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6c89a4aebdbd208d5517a488e7dd7c1d164c3bc9","date":1225202752,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/SnapPuller#copyIndexFiles(File,File).mjava","pathOld":"src/java/org/apache/solr/handler/SnapPuller#copyIndexFiles(File,File).mjava","sourceNew":"  /**Copy all index files from the temp index dir to the actual index\n   */\n\n  private boolean copyIndexFiles(File snapDir, File indexDir) {\n    String segmentsFile = null;\n    List<String> copiedfiles = new ArrayList<String>();\n    for (Map<String, Object> f : filesDownloaded) {\n      String fname = (String) f.get(NAME);\n      // the segments file must be copied last\n      // or else if there is a failure in between the\n      // index will be corrupted\n      if (fname.startsWith(\"segments_\")) {\n        //The segments file must be copied in the end\n        //Otherwise , if the copy fails index ends up corrupted\n        segmentsFile = fname;\n        continue;\n      }\n      if (!copyAFile(snapDir, indexDir, fname, copiedfiles)) return false;\n      copiedfiles.add(fname);\n    }\n    //copy the segments file last\n    if (segmentsFile != null) {\n      if (!copyAFile(snapDir, indexDir, segmentsFile, copiedfiles)) return false;\n    }\n    return true;\n  }\n\n","sourceOld":"  private boolean copyIndexFiles(File snapDir, File indexDir) {\n    String segmentsFile = null;\n    List<String> copiedfiles = new ArrayList<String>();\n    for (Map<String, Object> f : filesDownloaded) {\n      String fname = (String) f.get(NAME);\n      if (fname.startsWith(\"segments_\")) {\n        //The segments file must be copied in the end\n        //Otherwise , if the copy fails index ends up corrupted\n        segmentsFile = fname;\n        continue;\n      }\n      if (!copyAFile(snapDir, indexDir, fname, copiedfiles)) return false;\n      copiedfiles.add(fname);\n    }\n    if (segmentsFile != null) {\n      if (!copyAFile(snapDir, indexDir, segmentsFile, copiedfiles)) return false;\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8620c64e323e74078214cf931e505179d14c888e","date":1225270494,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/SnapPuller#copyIndexFiles(File,File).mjava","pathOld":"src/java/org/apache/solr/handler/SnapPuller#copyIndexFiles(File,File).mjava","sourceNew":"  /**\n   * Copy all index files from the temp index dir to the actual index.\n   * The segments_N file is copied last.\n   */\n  private boolean copyIndexFiles(File snapDir, File indexDir) {\n    String segmentsFile = null;\n    List<String> copiedfiles = new ArrayList<String>();\n    for (Map<String, Object> f : filesDownloaded) {\n      String fname = (String) f.get(NAME);\n      // the segments file must be copied last\n      // or else if there is a failure in between the\n      // index will be corrupted\n      if (fname.startsWith(\"segments_\")) {\n        //The segments file must be copied in the end\n        //Otherwise , if the copy fails index ends up corrupted\n        segmentsFile = fname;\n        continue;\n      }\n      if (!copyAFile(snapDir, indexDir, fname, copiedfiles)) return false;\n      copiedfiles.add(fname);\n    }\n    //copy the segments file last\n    if (segmentsFile != null) {\n      if (!copyAFile(snapDir, indexDir, segmentsFile, copiedfiles)) return false;\n    }\n    return true;\n  }\n\n","sourceOld":"  /**Copy all index files from the temp index dir to the actual index\n   */\n\n  private boolean copyIndexFiles(File snapDir, File indexDir) {\n    String segmentsFile = null;\n    List<String> copiedfiles = new ArrayList<String>();\n    for (Map<String, Object> f : filesDownloaded) {\n      String fname = (String) f.get(NAME);\n      // the segments file must be copied last\n      // or else if there is a failure in between the\n      // index will be corrupted\n      if (fname.startsWith(\"segments_\")) {\n        //The segments file must be copied in the end\n        //Otherwise , if the copy fails index ends up corrupted\n        segmentsFile = fname;\n        continue;\n      }\n      if (!copyAFile(snapDir, indexDir, fname, copiedfiles)) return false;\n      copiedfiles.add(fname);\n    }\n    //copy the segments file last\n    if (segmentsFile != null) {\n      if (!copyAFile(snapDir, indexDir, segmentsFile, copiedfiles)) return false;\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9be231d18ef58129524215a1d30331523320b744","date":1229505566,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/SnapPuller#copyIndexFiles(File,File).mjava","pathOld":"src/java/org/apache/solr/handler/SnapPuller#copyIndexFiles(File,File).mjava","sourceNew":"  /**\n   * Copy all index files from the temp index dir to the actual index. The segments_N file is copied last.\n   */\n  private boolean copyIndexFiles(File snapDir, File indexDir) {\n    String segmentsFile = null;\n    List<String> copiedfiles = new ArrayList<String>();\n    for (Map<String, Object> f : filesDownloaded) {\n      String fname = (String) f.get(NAME);\n      // the segments file must be copied last\n      // or else if there is a failure in between the\n      // index will be corrupted\n      if (fname.startsWith(\"segments_\")) {\n        //The segments file must be copied in the end\n        //Otherwise , if the copy fails index ends up corrupted\n        segmentsFile = fname;\n        continue;\n      }\n      if (!copyAFile(snapDir, indexDir, fname, copiedfiles)) return false;\n      copiedfiles.add(fname);\n    }\n    //copy the segments file last\n    if (segmentsFile != null) {\n      if (!copyAFile(snapDir, indexDir, segmentsFile, copiedfiles)) return false;\n    }\n    return true;\n  }\n\n","sourceOld":"  /**\n   * Copy all index files from the temp index dir to the actual index.\n   * The segments_N file is copied last.\n   */\n  private boolean copyIndexFiles(File snapDir, File indexDir) {\n    String segmentsFile = null;\n    List<String> copiedfiles = new ArrayList<String>();\n    for (Map<String, Object> f : filesDownloaded) {\n      String fname = (String) f.get(NAME);\n      // the segments file must be copied last\n      // or else if there is a failure in between the\n      // index will be corrupted\n      if (fname.startsWith(\"segments_\")) {\n        //The segments file must be copied in the end\n        //Otherwise , if the copy fails index ends up corrupted\n        segmentsFile = fname;\n        continue;\n      }\n      if (!copyAFile(snapDir, indexDir, fname, copiedfiles)) return false;\n      copiedfiles.add(fname);\n    }\n    //copy the segments file last\n    if (segmentsFile != null) {\n      if (!copyAFile(snapDir, indexDir, segmentsFile, copiedfiles)) return false;\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"966b6744500bb2953baa42383dbd59ff490dc216","date":1237739626,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/SnapPuller#copyIndexFiles(File,File).mjava","pathOld":"src/java/org/apache/solr/handler/SnapPuller#copyIndexFiles(File,File).mjava","sourceNew":"  /**\n   * Copy all index files from the temp index dir to the actual index. The segments_N file is copied last.\n   */\n  private boolean copyIndexFiles(File snapDir, File indexDir) throws IOException {\n    String segmentsFile = null;\n    List<String> copiedfiles = new ArrayList<String>();\n    for (Map<String, Object> f : filesDownloaded) {\n      String fname = (String) f.get(NAME);\n      // the segments file must be copied last\n      // or else if there is a failure in between the\n      // index will be corrupted\n      if (fname.startsWith(\"segments_\")) {\n        //The segments file must be copied in the end\n        //Otherwise , if the copy fails index ends up corrupted\n        segmentsFile = fname;\n        continue;\n      }\n      if (!copyAFile(snapDir, indexDir, fname, copiedfiles)) return false;\n      FileUtils.sync(new File(indexDir, fname));\n      copiedfiles.add(fname);\n    }\n    //copy the segments file last\n    if (segmentsFile != null) {\n      if (!copyAFile(snapDir, indexDir, segmentsFile, copiedfiles)) return false;\n      FileUtils.sync(new File(indexDir, segmentsFile));\n    }\n    return true;\n  }\n\n","sourceOld":"  /**\n   * Copy all index files from the temp index dir to the actual index. The segments_N file is copied last.\n   */\n  private boolean copyIndexFiles(File snapDir, File indexDir) {\n    String segmentsFile = null;\n    List<String> copiedfiles = new ArrayList<String>();\n    for (Map<String, Object> f : filesDownloaded) {\n      String fname = (String) f.get(NAME);\n      // the segments file must be copied last\n      // or else if there is a failure in between the\n      // index will be corrupted\n      if (fname.startsWith(\"segments_\")) {\n        //The segments file must be copied in the end\n        //Otherwise , if the copy fails index ends up corrupted\n        segmentsFile = fname;\n        continue;\n      }\n      if (!copyAFile(snapDir, indexDir, fname, copiedfiles)) return false;\n      copiedfiles.add(fname);\n    }\n    //copy the segments file last\n    if (segmentsFile != null) {\n      if (!copyAFile(snapDir, indexDir, segmentsFile, copiedfiles)) return false;\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aab56102a66ad6123bbc7a10ec65d998b5e6117a","date":1238749717,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/SnapPuller#copyIndexFiles(File,File).mjava","pathOld":"src/java/org/apache/solr/handler/SnapPuller#copyIndexFiles(File,File).mjava","sourceNew":"  /**\n   * Copy all index files from the temp index dir to the actual index. The segments_N file is copied last.\n   */\n  private boolean copyIndexFiles(File snapDir, File indexDir) throws IOException {\n    String segmentsFile = null;\n    List<String> copiedfiles = new ArrayList<String>();\n    for (Map<String, Object> f : filesDownloaded) {\n      String fname = (String) f.get(NAME);\n      // the segments file must be copied last\n      // or else if there is a failure in between the\n      // index will be corrupted\n      if (fname.startsWith(\"segments_\")) {\n        //The segments file must be copied in the end\n        //Otherwise , if the copy fails index ends up corrupted\n        segmentsFile = fname;\n        continue;\n      }\n      if (!copyAFile(snapDir, indexDir, fname, copiedfiles)) return false;\n      copiedfiles.add(fname);\n    }\n    //copy the segments file last\n    if (segmentsFile != null) {\n      if (!copyAFile(snapDir, indexDir, segmentsFile, copiedfiles)) return false;\n    }\n    return true;\n  }\n\n","sourceOld":"  /**\n   * Copy all index files from the temp index dir to the actual index. The segments_N file is copied last.\n   */\n  private boolean copyIndexFiles(File snapDir, File indexDir) throws IOException {\n    String segmentsFile = null;\n    List<String> copiedfiles = new ArrayList<String>();\n    for (Map<String, Object> f : filesDownloaded) {\n      String fname = (String) f.get(NAME);\n      // the segments file must be copied last\n      // or else if there is a failure in between the\n      // index will be corrupted\n      if (fname.startsWith(\"segments_\")) {\n        //The segments file must be copied in the end\n        //Otherwise , if the copy fails index ends up corrupted\n        segmentsFile = fname;\n        continue;\n      }\n      if (!copyAFile(snapDir, indexDir, fname, copiedfiles)) return false;\n      FileUtils.sync(new File(indexDir, fname));\n      copiedfiles.add(fname);\n    }\n    //copy the segments file last\n    if (segmentsFile != null) {\n      if (!copyAFile(snapDir, indexDir, segmentsFile, copiedfiles)) return false;\n      FileUtils.sync(new File(indexDir, segmentsFile));\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7e0049b151d932b18c3acc1ef8366262ae9809d","date":1247648156,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/SnapPuller#copyIndexFiles(File,File).mjava","pathOld":"src/java/org/apache/solr/handler/SnapPuller#copyIndexFiles(File,File).mjava","sourceNew":"  /**\n   * Copy all index files from the temp index dir to the actual index. The segments_N file is copied last.\n   */\n  private boolean copyIndexFiles(File tmpIdxDir, File indexDir) throws IOException {\n    String segmentsFile = null;\n    List<String> copiedfiles = new ArrayList<String>();\n    for (Map<String, Object> f : filesDownloaded) {\n      String fname = (String) f.get(NAME);\n      // the segments file must be copied last\n      // or else if there is a failure in between the\n      // index will be corrupted\n      if (fname.startsWith(\"segments_\")) {\n        //The segments file must be copied in the end\n        //Otherwise , if the copy fails index ends up corrupted\n        segmentsFile = fname;\n        continue;\n      }\n      if (!copyAFile(tmpIdxDir, indexDir, fname, copiedfiles)) return false;\n      copiedfiles.add(fname);\n    }\n    //copy the segments file last\n    if (segmentsFile != null) {\n      if (!copyAFile(tmpIdxDir, indexDir, segmentsFile, copiedfiles)) return false;\n    }\n    return true;\n  }\n\n","sourceOld":"  /**\n   * Copy all index files from the temp index dir to the actual index. The segments_N file is copied last.\n   */\n  private boolean copyIndexFiles(File snapDir, File indexDir) throws IOException {\n    String segmentsFile = null;\n    List<String> copiedfiles = new ArrayList<String>();\n    for (Map<String, Object> f : filesDownloaded) {\n      String fname = (String) f.get(NAME);\n      // the segments file must be copied last\n      // or else if there is a failure in between the\n      // index will be corrupted\n      if (fname.startsWith(\"segments_\")) {\n        //The segments file must be copied in the end\n        //Otherwise , if the copy fails index ends up corrupted\n        segmentsFile = fname;\n        continue;\n      }\n      if (!copyAFile(snapDir, indexDir, fname, copiedfiles)) return false;\n      copiedfiles.add(fname);\n    }\n    //copy the segments file last\n    if (segmentsFile != null) {\n      if (!copyAFile(snapDir, indexDir, segmentsFile, copiedfiles)) return false;\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":["4d3e8520fd031bab31fd0e4d480e55958bc45efe","4d3e8520fd031bab31fd0e4d480e55958bc45efe","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/SnapPuller#copyIndexFiles(File,File).mjava","pathOld":"src/java/org/apache/solr/handler/SnapPuller#copyIndexFiles(File,File).mjava","sourceNew":"  /**\n   * Copy all index files from the temp index dir to the actual index. The segments_N file is copied last.\n   */\n  private boolean copyIndexFiles(File tmpIdxDir, File indexDir) throws IOException {\n    String segmentsFile = null;\n    List<String> copiedfiles = new ArrayList<String>();\n    for (Map<String, Object> f : filesDownloaded) {\n      String fname = (String) f.get(NAME);\n      // the segments file must be copied last\n      // or else if there is a failure in between the\n      // index will be corrupted\n      if (fname.startsWith(\"segments_\")) {\n        //The segments file must be copied in the end\n        //Otherwise , if the copy fails index ends up corrupted\n        segmentsFile = fname;\n        continue;\n      }\n      if (!copyAFile(tmpIdxDir, indexDir, fname, copiedfiles)) return false;\n      copiedfiles.add(fname);\n    }\n    //copy the segments file last\n    if (segmentsFile != null) {\n      if (!copyAFile(tmpIdxDir, indexDir, segmentsFile, copiedfiles)) return false;\n    }\n    return true;\n  }\n\n","sourceOld":"  /**\n   * Copy all index files from the temp index dir to the actual index. The segments_N file is copied last.\n   */\n  private boolean copyIndexFiles(File tmpIdxDir, File indexDir) throws IOException {\n    String segmentsFile = null;\n    List<String> copiedfiles = new ArrayList<String>();\n    for (Map<String, Object> f : filesDownloaded) {\n      String fname = (String) f.get(NAME);\n      // the segments file must be copied last\n      // or else if there is a failure in between the\n      // index will be corrupted\n      if (fname.startsWith(\"segments_\")) {\n        //The segments file must be copied in the end\n        //Otherwise , if the copy fails index ends up corrupted\n        segmentsFile = fname;\n        continue;\n      }\n      if (!copyAFile(tmpIdxDir, indexDir, fname, copiedfiles)) return false;\n      copiedfiles.add(fname);\n    }\n    //copy the segments file last\n    if (segmentsFile != null) {\n      if (!copyAFile(tmpIdxDir, indexDir, segmentsFile, copiedfiles)) return false;\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"f4ead54bbd0d8cf4a0b5f025fbad65581b8cd349":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"9be231d18ef58129524215a1d30331523320b744":["8620c64e323e74078214cf931e505179d14c888e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"aab56102a66ad6123bbc7a10ec65d998b5e6117a":["966b6744500bb2953baa42383dbd59ff490dc216"],"8620c64e323e74078214cf931e505179d14c888e":["6c89a4aebdbd208d5517a488e7dd7c1d164c3bc9"],"c7e0049b151d932b18c3acc1ef8366262ae9809d":["aab56102a66ad6123bbc7a10ec65d998b5e6117a"],"ad94625fb8d088209f46650c8097196fec67f00c":["c7e0049b151d932b18c3acc1ef8366262ae9809d"],"6c89a4aebdbd208d5517a488e7dd7c1d164c3bc9":["f4ead54bbd0d8cf4a0b5f025fbad65581b8cd349"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"966b6744500bb2953baa42383dbd59ff490dc216":["9be231d18ef58129524215a1d30331523320b744"]},"commit2Childs":{"f4ead54bbd0d8cf4a0b5f025fbad65581b8cd349":["6c89a4aebdbd208d5517a488e7dd7c1d164c3bc9"],"9be231d18ef58129524215a1d30331523320b744":["966b6744500bb2953baa42383dbd59ff490dc216"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["f4ead54bbd0d8cf4a0b5f025fbad65581b8cd349"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8620c64e323e74078214cf931e505179d14c888e":["9be231d18ef58129524215a1d30331523320b744"],"aab56102a66ad6123bbc7a10ec65d998b5e6117a":["c7e0049b151d932b18c3acc1ef8366262ae9809d"],"c7e0049b151d932b18c3acc1ef8366262ae9809d":["ad94625fb8d088209f46650c8097196fec67f00c"],"6c89a4aebdbd208d5517a488e7dd7c1d164c3bc9":["8620c64e323e74078214cf931e505179d14c888e"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"966b6744500bb2953baa42383dbd59ff490dc216":["aab56102a66ad6123bbc7a10ec65d998b5e6117a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}