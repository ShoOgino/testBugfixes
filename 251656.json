{"path":"solr/core/src/java/org/apache/solr/update/processor/DistributedZkUpdateProcessor#setupRequestForDBQ().mjava","commits":[{"id":"9d70e774cb25c8a8d2c3e5e84200f235f9168d87","date":1553016391,"type":1,"author":"Bar Rotstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DistributedZkUpdateProcessor#setupRequestForDBQ().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#setupRequestForDBQ().mjava","sourceNew":"  // used for deleteByQuery to get the list of nodes this leader should forward to\n  private List<SolrCmdDistributor.Node> setupRequestForDBQ() {\n    List<SolrCmdDistributor.Node> nodes = null;\n    String shardId = cloudDesc.getShardId();\n\n    try {\n      Replica leaderReplica = zkController.getZkStateReader().getLeaderRetry(collection, shardId);\n      isLeader = leaderReplica.getName().equals(cloudDesc.getCoreNodeName());\n\n      // TODO: what if we are no longer the leader?\n\n      forwardToLeader = false;\n      List<ZkCoreNodeProps> replicaProps = zkController.getZkStateReader()\n          .getReplicaProps(collection, shardId, leaderReplica.getName(), null, Replica.State.DOWN, EnumSet.of(Replica.Type.NRT, Replica.Type.TLOG));\n      if (replicaProps != null) {\n        nodes = new ArrayList<>(replicaProps.size());\n        for (ZkCoreNodeProps props : replicaProps) {\n          nodes.add(new SolrCmdDistributor.StdNode(props, collection, shardId));\n        }\n      }\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n\n    return nodes;\n  }\n\n","sourceOld":"  // used for deleteByQuery to get the list of nodes this leader should forward to\n  private List<Node> setupRequestForDBQ() {\n    List<Node> nodes = null;\n    String shardId = cloudDesc.getShardId();\n\n    try {\n      Replica leaderReplica = zkController.getZkStateReader().getLeaderRetry(collection, shardId);\n      isLeader = leaderReplica.getName().equals(cloudDesc.getCoreNodeName());\n\n      // TODO: what if we are no longer the leader?\n\n      forwardToLeader = false;\n      List<ZkCoreNodeProps> replicaProps = zkController.getZkStateReader()\n          .getReplicaProps(collection, shardId, leaderReplica.getName(), null, Replica.State.DOWN, EnumSet.of(Replica.Type.NRT, Replica.Type.TLOG));\n      if (replicaProps != null) {\n        nodes = new ArrayList<>(replicaProps.size());\n        for (ZkCoreNodeProps props : replicaProps) {\n          nodes.add(new StdNode(props, collection, shardId));\n        }\n      }\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n\n    return nodes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9d70e774cb25c8a8d2c3e5e84200f235f9168d87":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9d70e774cb25c8a8d2c3e5e84200f235f9168d87"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9d70e774cb25c8a8d2c3e5e84200f235f9168d87"],"9d70e774cb25c8a8d2c3e5e84200f235f9168d87":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}