{"path":"solr/core/src/java/org/apache/solr/rest/schema/FieldTypeResource#buildFieldTypeFromJson(ManagedIndexSchema,String,Map[String,Object]).mjava","commits":[{"id":"bdf16ebe435fc9daea90a73b8683ff001c6d3523","date":1409931231,"type":0,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/rest/schema/FieldTypeResource#buildFieldTypeFromJson(ManagedIndexSchema,String,Map[String,Object]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Builds a FieldType definition from a JSON object.\n   */\n  @SuppressWarnings(\"unchecked\")\n  static FieldType buildFieldTypeFromJson(ManagedIndexSchema oldSchema, String fieldTypeName, Map<String,Object> fieldTypeJson) {\n    if (1 == fieldTypeJson.size() && fieldTypeJson.containsKey(IndexSchema.FIELD_TYPE)) {\n      fieldTypeJson = (Map<String, Object>)fieldTypeJson.get(IndexSchema.FIELD_TYPE);\n    }\n\n    String bodyTypeName = (String) fieldTypeJson.get(IndexSchema.NAME);\n    if (bodyTypeName == null) {\n      // must provide the name in the JSON for converting to the XML format needed\n      // to create FieldType objects using the FieldTypePluginLoader\n      fieldTypeJson.put(IndexSchema.NAME, fieldTypeName);\n    } else {\n      // if they provide it in the JSON, then it must match the value from the path\n      if (!fieldTypeName.equals(bodyTypeName)) {\n        String message = \"Field type name in the request body '\" + bodyTypeName\n            + \"' doesn't match field type name in the request URL '\" + fieldTypeName + \"'\";\n        log.error(message);\n        throw new SolrException(ErrorCode.BAD_REQUEST, message);\n      }\n    }\n\n    String className = (String)fieldTypeJson.get(FieldType.CLASS_NAME);\n    if (className == null) {\n      String message = \"Missing required '\" + FieldType.CLASS_NAME + \"' property!\";\n      log.error(message);\n      throw new SolrException(ErrorCode.BAD_REQUEST, message);\n    }\n\n    return oldSchema.newFieldType(fieldTypeName, className, fieldTypeJson);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f494bc636a1302995e4930fdccd371eeda452f87","date":1457370876,"type":4,"author":"Noble Paul","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/rest/schema/FieldTypeResource#buildFieldTypeFromJson(ManagedIndexSchema,String,Map[String,Object]).mjava","sourceNew":null,"sourceOld":"  /**\n   * Builds a FieldType definition from a JSON object.\n   */\n  @SuppressWarnings(\"unchecked\")\n  static FieldType buildFieldTypeFromJson(ManagedIndexSchema oldSchema, String fieldTypeName, Map<String,Object> fieldTypeJson) {\n    if (1 == fieldTypeJson.size() && fieldTypeJson.containsKey(IndexSchema.FIELD_TYPE)) {\n      fieldTypeJson = (Map<String, Object>)fieldTypeJson.get(IndexSchema.FIELD_TYPE);\n    }\n\n    String bodyTypeName = (String) fieldTypeJson.get(IndexSchema.NAME);\n    if (bodyTypeName == null) {\n      // must provide the name in the JSON for converting to the XML format needed\n      // to create FieldType objects using the FieldTypePluginLoader\n      fieldTypeJson.put(IndexSchema.NAME, fieldTypeName);\n    } else {\n      // if they provide it in the JSON, then it must match the value from the path\n      if (!fieldTypeName.equals(bodyTypeName)) {\n        String message = \"Field type name in the request body '\" + bodyTypeName\n            + \"' doesn't match field type name in the request URL '\" + fieldTypeName + \"'\";\n        log.error(message);\n        throw new SolrException(ErrorCode.BAD_REQUEST, message);\n      }\n    }\n\n    String className = (String)fieldTypeJson.get(FieldType.CLASS_NAME);\n    if (className == null) {\n      String message = \"Missing required '\" + FieldType.CLASS_NAME + \"' property!\";\n      log.error(message);\n      throw new SolrException(ErrorCode.BAD_REQUEST, message);\n    }\n\n    return oldSchema.newFieldType(fieldTypeName, className, fieldTypeJson);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f494bc636a1302995e4930fdccd371eeda452f87":["bdf16ebe435fc9daea90a73b8683ff001c6d3523"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f494bc636a1302995e4930fdccd371eeda452f87"],"bdf16ebe435fc9daea90a73b8683ff001c6d3523":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"f494bc636a1302995e4930fdccd371eeda452f87":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bdf16ebe435fc9daea90a73b8683ff001c6d3523"],"bdf16ebe435fc9daea90a73b8683ff001c6d3523":["f494bc636a1302995e4930fdccd371eeda452f87"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}