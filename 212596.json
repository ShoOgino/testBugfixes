{"path":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#openReader().mjava","commits":[{"id":"ea469eab8fd0f3032f4fcde1c644a721e8309d3b","date":1320301582,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#openReader().mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/lucene/LuceneTaxonomyWriter#openReader().mjava","sourceNew":"  // Currently overridden by a unit test that verifies that every index we open\n  // is close()ed.\n  /**\n   * Open an {@link IndexReader} from the {@link #indexWriter} member, by\n   * calling {@link IndexWriter#getReader()}. Extending classes can override\n   * this method to return their own {@link IndexReader}.\n   */\n  protected IndexReader openReader() throws IOException {\n    return IndexReader.open(indexWriter, true); \n  }\n\n","sourceOld":"  // Currently overridden by a unit test that verifies that every index we open\n  // is close()ed.\n  /**\n   * Open an {@link IndexReader} from the {@link #indexWriter} member, by\n   * calling {@link IndexWriter#getReader()}. Extending classes can override\n   * this method to return their own {@link IndexReader}.\n   */\n  protected IndexReader openReader() throws IOException {\n    return IndexReader.open(indexWriter, true); \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9faeb5fb9565674fd02b39d8fc365311961f1938","date":1322463944,"type":3,"author":"Doron Cohen","isMerge":false,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#openReader().mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#openReader().mjava","sourceNew":"  // Currently overridden by a unit test that verifies that every index we open is close()ed.\n  /**\n   * Open an {@link IndexReader} from the internal {@link IndexWriter}, by\n   * calling {@link IndexReader#open(IndexWriter, boolean)}. Extending classes can override\n   * this method to return their own {@link IndexReader}.\n   */\n  protected IndexReader openReader() throws IOException {\n    return IndexReader.open(indexWriter, true); \n  }\n\n","sourceOld":"  // Currently overridden by a unit test that verifies that every index we open\n  // is close()ed.\n  /**\n   * Open an {@link IndexReader} from the {@link #indexWriter} member, by\n   * calling {@link IndexWriter#getReader()}. Extending classes can override\n   * this method to return their own {@link IndexReader}.\n   */\n  protected IndexReader openReader() throws IOException {\n    return IndexReader.open(indexWriter, true); \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"20b26030b0883b7f045e3350bb97bee7146f1efd","date":1327854897,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#openReader().mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#openReader().mjava","sourceNew":"  // Currently overridden by a unit test that verifies that every index we open is close()ed.\n  /**\n   * Open an {@link IndexReader} from the internal {@link IndexWriter}, by\n   * calling {@link IndexReader#open(IndexWriter, boolean)}. Extending classes can override\n   * this method to return their own {@link IndexReader}.\n   */\n  protected DirectoryReader openReader() throws IOException {\n    return IndexReader.open(indexWriter, true); \n  }\n\n","sourceOld":"  // Currently overridden by a unit test that verifies that every index we open is close()ed.\n  /**\n   * Open an {@link IndexReader} from the internal {@link IndexWriter}, by\n   * calling {@link IndexReader#open(IndexWriter, boolean)}. Extending classes can override\n   * this method to return their own {@link IndexReader}.\n   */\n  protected IndexReader openReader() throws IOException {\n    return IndexReader.open(indexWriter, true); \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"04ecceea775208973388bb5bcc129d661ca1f9b6","date":1327925961,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#openReader().mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#openReader().mjava","sourceNew":"  // Currently overridden by a unit test that verifies that every index we open is close()ed.\n  /**\n   * Open an {@link IndexReader} from the internal {@link IndexWriter}, by\n   * calling {@link IndexReader#open(IndexWriter, boolean)}. Extending classes can override\n   * this method to return their own {@link IndexReader}.\n   */\n  protected DirectoryReader openReader() throws IOException {\n    return DirectoryReader.open(indexWriter, true); \n  }\n\n","sourceOld":"  // Currently overridden by a unit test that verifies that every index we open is close()ed.\n  /**\n   * Open an {@link IndexReader} from the internal {@link IndexWriter}, by\n   * calling {@link IndexReader#open(IndexWriter, boolean)}. Extending classes can override\n   * this method to return their own {@link IndexReader}.\n   */\n  protected DirectoryReader openReader() throws IOException {\n    return IndexReader.open(indexWriter, true); \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#openReader().mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#openReader().mjava","sourceNew":"  // Currently overridden by a unit test that verifies that every index we open is close()ed.\n  /**\n   * Open an {@link IndexReader} from the internal {@link IndexWriter}, by\n   * calling {@link IndexReader#open(IndexWriter, boolean)}. Extending classes can override\n   * this method to return their own {@link IndexReader}.\n   */\n  protected DirectoryReader openReader() throws IOException {\n    return DirectoryReader.open(indexWriter, true); \n  }\n\n","sourceOld":"  // Currently overridden by a unit test that verifies that every index we open is close()ed.\n  /**\n   * Open an {@link IndexReader} from the internal {@link IndexWriter}, by\n   * calling {@link IndexReader#open(IndexWriter, boolean)}. Extending classes can override\n   * this method to return their own {@link IndexReader}.\n   */\n  protected IndexReader openReader() throws IOException {\n    return IndexReader.open(indexWriter, true); \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#openReader().mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#openReader().mjava","sourceNew":"  // Currently overridden by a unit test that verifies that every index we open is close()ed.\n  /**\n   * Open an {@link IndexReader} from the internal {@link IndexWriter}, by\n   * calling {@link IndexReader#open(IndexWriter, boolean)}. Extending classes can override\n   * this method to return their own {@link IndexReader}.\n   */\n  protected DirectoryReader openReader() throws IOException {\n    return DirectoryReader.open(indexWriter, true); \n  }\n\n","sourceOld":"  // Currently overridden by a unit test that verifies that every index we open is close()ed.\n  /**\n   * Open an {@link IndexReader} from the internal {@link IndexWriter}, by\n   * calling {@link IndexReader#open(IndexWriter, boolean)}. Extending classes can override\n   * this method to return their own {@link IndexReader}.\n   */\n  protected DirectoryReader openReader() throws IOException {\n    return DirectoryReader.open(indexWriter, true); \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"ea469eab8fd0f3032f4fcde1c644a721e8309d3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"20b26030b0883b7f045e3350bb97bee7146f1efd":["9faeb5fb9565674fd02b39d8fc365311961f1938"],"9faeb5fb9565674fd02b39d8fc365311961f1938":["ea469eab8fd0f3032f4fcde1c644a721e8309d3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"04ecceea775208973388bb5bcc129d661ca1f9b6":["20b26030b0883b7f045e3350bb97bee7146f1efd"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["9faeb5fb9565674fd02b39d8fc365311961f1938","04ecceea775208973388bb5bcc129d661ca1f9b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ea469eab8fd0f3032f4fcde1c644a721e8309d3b":["9faeb5fb9565674fd02b39d8fc365311961f1938"],"20b26030b0883b7f045e3350bb97bee7146f1efd":["04ecceea775208973388bb5bcc129d661ca1f9b6"],"9faeb5fb9565674fd02b39d8fc365311961f1938":["20b26030b0883b7f045e3350bb97bee7146f1efd","5cab9a86bd67202d20b6adc463008c8e982b070a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ea469eab8fd0f3032f4fcde1c644a721e8309d3b"],"04ecceea775208973388bb5bcc129d661ca1f9b6":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}