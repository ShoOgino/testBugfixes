{"path":"lucene/src/java/org/apache/lucene/index/SegmentReader.CoreReaders#decRef().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader.CoreReaders#decRef().mjava","pathOld":"src/java/org/apache/lucene/index/SegmentReader.CoreReaders#decRef().mjava","sourceNew":"    synchronized void decRef() throws IOException {\n\n      if (ref.decrementAndGet() == 0) {\n\n        // close everything, nothing is shared anymore with other readers\n        if (tis != null) {\n          tis.close();\n          // null so if an app hangs on to us we still free most ram\n          tis = null;\n        }\n        \n        if (tisNoIndex != null) {\n          tisNoIndex.close();\n        }\n        \n        if (freqStream != null) {\n          freqStream.close();\n        }\n\n        if (proxStream != null) {\n          proxStream.close();\n        }\n\n        if (termVectorsReaderOrig != null) {\n          termVectorsReaderOrig.close();\n        }\n  \n        if (fieldsReaderOrig != null) {\n          fieldsReaderOrig.close();\n        }\n  \n        if (cfsReader != null) {\n          cfsReader.close();\n        }\n  \n        if (storeCFSReader != null) {\n          storeCFSReader.close();\n        }\n\n        // Force FieldCache to evict our entries at this\n        // point.  If the exception occurred while\n        // initializing the core readers, then\n        // origInstance will be null, and we don't want\n        // to call FieldCache.purge (it leads to NPE):\n        if (origInstance != null) {\n          FieldCache.DEFAULT.purge(origInstance);\n        }\n      }\n    }\n\n","sourceOld":"    synchronized void decRef() throws IOException {\n\n      if (ref.decrementAndGet() == 0) {\n\n        // close everything, nothing is shared anymore with other readers\n        if (tis != null) {\n          tis.close();\n          // null so if an app hangs on to us we still free most ram\n          tis = null;\n        }\n        \n        if (tisNoIndex != null) {\n          tisNoIndex.close();\n        }\n        \n        if (freqStream != null) {\n          freqStream.close();\n        }\n\n        if (proxStream != null) {\n          proxStream.close();\n        }\n\n        if (termVectorsReaderOrig != null) {\n          termVectorsReaderOrig.close();\n        }\n  \n        if (fieldsReaderOrig != null) {\n          fieldsReaderOrig.close();\n        }\n  \n        if (cfsReader != null) {\n          cfsReader.close();\n        }\n  \n        if (storeCFSReader != null) {\n          storeCFSReader.close();\n        }\n\n        // Force FieldCache to evict our entries at this\n        // point.  If the exception occurred while\n        // initializing the core readers, then\n        // origInstance will be null, and we don't want\n        // to call FieldCache.purge (it leads to NPE):\n        if (origInstance != null) {\n          FieldCache.DEFAULT.purge(origInstance);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader.CoreReaders#decRef().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader.CoreReaders#decRef().mjava","sourceNew":"    synchronized void decRef() throws IOException {\n\n      if (ref.decrementAndGet() == 0) {\n\n        if (fields != null) {\n          fields.close();\n        }\n\n        if (termVectorsReaderOrig != null) {\n          termVectorsReaderOrig.close();\n        }\n  \n        if (fieldsReaderOrig != null) {\n          fieldsReaderOrig.close();\n        }\n  \n        if (cfsReader != null) {\n          cfsReader.close();\n        }\n  \n        if (storeCFSReader != null) {\n          storeCFSReader.close();\n        }\n\n        // Force FieldCache to evict our entries at this\n        // point.  If the exception occurred while\n        // initializing the core readers, then\n        // origInstance will be null, and we don't want\n        // to call FieldCache.purge (it leads to NPE):\n        if (origInstance != null) {\n          FieldCache.DEFAULT.purge(origInstance);\n        }\n      }\n    }\n\n","sourceOld":"    synchronized void decRef() throws IOException {\n\n      if (ref.decrementAndGet() == 0) {\n\n        // close everything, nothing is shared anymore with other readers\n        if (tis != null) {\n          tis.close();\n          // null so if an app hangs on to us we still free most ram\n          tis = null;\n        }\n        \n        if (tisNoIndex != null) {\n          tisNoIndex.close();\n        }\n        \n        if (freqStream != null) {\n          freqStream.close();\n        }\n\n        if (proxStream != null) {\n          proxStream.close();\n        }\n\n        if (termVectorsReaderOrig != null) {\n          termVectorsReaderOrig.close();\n        }\n  \n        if (fieldsReaderOrig != null) {\n          fieldsReaderOrig.close();\n        }\n  \n        if (cfsReader != null) {\n          cfsReader.close();\n        }\n  \n        if (storeCFSReader != null) {\n          storeCFSReader.close();\n        }\n\n        // Force FieldCache to evict our entries at this\n        // point.  If the exception occurred while\n        // initializing the core readers, then\n        // origInstance will be null, and we don't want\n        // to call FieldCache.purge (it leads to NPE):\n        if (origInstance != null) {\n          FieldCache.DEFAULT.purge(origInstance);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"01f60198ece724a6e96cd0b45f289cf42ff83d4f","date":1286864103,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader.CoreReaders#decRef().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader.CoreReaders#decRef().mjava","sourceNew":"    synchronized void decRef() throws IOException {\n      if (ref.decrementAndGet() == 0) {\n        if (fields != null) {\n          fields.close();\n        }\n\n        if (termVectorsReaderOrig != null) {\n          termVectorsReaderOrig.close();\n        }\n  \n        if (fieldsReaderOrig != null) {\n          fieldsReaderOrig.close();\n        }\n  \n        if (cfsReader != null) {\n          cfsReader.close();\n        }\n  \n        if (storeCFSReader != null) {\n          storeCFSReader.close();\n        }\n\n        // Force FieldCache to evict our entries at this\n        // point.  If the exception occurred while\n        // initializing the core readers, then\n        // origInstance will be null, and we don't want\n        // to call FieldCache.purge (it leads to NPE):\n        if (origInstance != null) {\n          FieldCache.DEFAULT.purge(origInstance);\n        }\n        closeIndexValuesReaders();\n      }\n    }\n\n","sourceOld":"    synchronized void decRef() throws IOException {\n\n      if (ref.decrementAndGet() == 0) {\n\n        if (fields != null) {\n          fields.close();\n        }\n\n        if (termVectorsReaderOrig != null) {\n          termVectorsReaderOrig.close();\n        }\n  \n        if (fieldsReaderOrig != null) {\n          fieldsReaderOrig.close();\n        }\n  \n        if (cfsReader != null) {\n          cfsReader.close();\n        }\n  \n        if (storeCFSReader != null) {\n          storeCFSReader.close();\n        }\n\n        // Force FieldCache to evict our entries at this\n        // point.  If the exception occurred while\n        // initializing the core readers, then\n        // origInstance will be null, and we don't want\n        // to call FieldCache.purge (it leads to NPE):\n        if (origInstance != null) {\n          FieldCache.DEFAULT.purge(origInstance);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e28c49f1fb6215a550fdadcf3805aa629b63ec0","date":1288081775,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader.CoreReaders#decRef().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader.CoreReaders#decRef().mjava","sourceNew":"    synchronized void decRef() throws IOException {\n      if (ref.decrementAndGet() == 0) {\n        if (fields != null) {\n          fields.close();\n        }\n\n        if (termVectorsReaderOrig != null) {\n          termVectorsReaderOrig.close();\n        }\n  \n        if (fieldsReaderOrig != null) {\n          fieldsReaderOrig.close();\n        }\n  \n        if (cfsReader != null) {\n          cfsReader.close();\n        }\n  \n        if (storeCFSReader != null) {\n          storeCFSReader.close();\n        }\n\n        // Force FieldCache to evict our entries at this\n        // point.  If the exception occurred while\n        // initializing the core readers, then\n        // origInstance will be null, and we don't want\n        // to call FieldCache.purge (it leads to NPE):\n        if (origInstance != null) {\n          FieldCache.DEFAULT.purge(origInstance);\n        }\n      }\n    }\n\n","sourceOld":"    synchronized void decRef() throws IOException {\n      if (ref.decrementAndGet() == 0) {\n        if (fields != null) {\n          fields.close();\n        }\n\n        if (termVectorsReaderOrig != null) {\n          termVectorsReaderOrig.close();\n        }\n  \n        if (fieldsReaderOrig != null) {\n          fieldsReaderOrig.close();\n        }\n  \n        if (cfsReader != null) {\n          cfsReader.close();\n        }\n  \n        if (storeCFSReader != null) {\n          storeCFSReader.close();\n        }\n\n        // Force FieldCache to evict our entries at this\n        // point.  If the exception occurred while\n        // initializing the core readers, then\n        // origInstance will be null, and we don't want\n        // to call FieldCache.purge (it leads to NPE):\n        if (origInstance != null) {\n          FieldCache.DEFAULT.purge(origInstance);\n        }\n        closeIndexValuesReaders();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cdd3a20c3f7b8db3ed0313a58cb6304f9b5bc340","date":1295995357,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader.CoreReaders#decRef().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader.CoreReaders#decRef().mjava","sourceNew":"    synchronized void decRef() throws IOException {\n\n      if (ref.decrementAndGet() == 0) {\n\n        if (fields != null) {\n          fields.close();\n        }\n\n        if (termVectorsReaderOrig != null) {\n          termVectorsReaderOrig.close();\n        }\n  \n        if (fieldsReaderOrig != null) {\n          fieldsReaderOrig.close();\n        }\n  \n        if (cfsReader != null) {\n          cfsReader.close();\n        }\n  \n        if (storeCFSReader != null) {\n          storeCFSReader.close();\n        }\n\n        // Now, notify any ReaderFinished listeners:\n        if (origInstance != null) {\n          origInstance.notifyReaderFinishedListeners();\n        }\n      }\n    }\n\n","sourceOld":"    synchronized void decRef() throws IOException {\n\n      if (ref.decrementAndGet() == 0) {\n\n        if (fields != null) {\n          fields.close();\n        }\n\n        if (termVectorsReaderOrig != null) {\n          termVectorsReaderOrig.close();\n        }\n  \n        if (fieldsReaderOrig != null) {\n          fieldsReaderOrig.close();\n        }\n  \n        if (cfsReader != null) {\n          cfsReader.close();\n        }\n  \n        if (storeCFSReader != null) {\n          storeCFSReader.close();\n        }\n\n        // Force FieldCache to evict our entries at this\n        // point.  If the exception occurred while\n        // initializing the core readers, then\n        // origInstance will be null, and we don't want\n        // to call FieldCache.purge (it leads to NPE):\n        if (origInstance != null) {\n          FieldCache.DEFAULT.purge(origInstance);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader.CoreReaders#decRef().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader.CoreReaders#decRef().mjava","sourceNew":"    synchronized void decRef() throws IOException {\n      if (ref.decrementAndGet() == 0) {\n        if (fields != null) {\n          fields.close();\n        }\n\n        if (termVectorsReaderOrig != null) {\n          termVectorsReaderOrig.close();\n        }\n  \n        if (fieldsReaderOrig != null) {\n          fieldsReaderOrig.close();\n        }\n  \n        if (cfsReader != null) {\n          cfsReader.close();\n        }\n  \n        if (storeCFSReader != null) {\n          storeCFSReader.close();\n        }\n\n        // Now, notify any ReaderFinished listeners:\n        if (origInstance != null) {\n          origInstance.notifyReaderFinishedListeners();\n        }\n      }\n    }\n\n","sourceOld":"    synchronized void decRef() throws IOException {\n      if (ref.decrementAndGet() == 0) {\n        if (fields != null) {\n          fields.close();\n        }\n\n        if (termVectorsReaderOrig != null) {\n          termVectorsReaderOrig.close();\n        }\n  \n        if (fieldsReaderOrig != null) {\n          fieldsReaderOrig.close();\n        }\n  \n        if (cfsReader != null) {\n          cfsReader.close();\n        }\n  \n        if (storeCFSReader != null) {\n          storeCFSReader.close();\n        }\n\n        // Force FieldCache to evict our entries at this\n        // point.  If the exception occurred while\n        // initializing the core readers, then\n        // origInstance will be null, and we don't want\n        // to call FieldCache.purge (it leads to NPE):\n        if (origInstance != null) {\n          FieldCache.DEFAULT.purge(origInstance);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader.CoreReaders#decRef().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader.CoreReaders#decRef().mjava","sourceNew":"    synchronized void decRef() throws IOException {\n\n      if (ref.decrementAndGet() == 0) {\n\n        if (fields != null) {\n          fields.close();\n        }\n\n        if (termVectorsReaderOrig != null) {\n          termVectorsReaderOrig.close();\n        }\n  \n        if (fieldsReaderOrig != null) {\n          fieldsReaderOrig.close();\n        }\n  \n        if (cfsReader != null) {\n          cfsReader.close();\n        }\n  \n        if (storeCFSReader != null) {\n          storeCFSReader.close();\n        }\n\n        // Now, notify any ReaderFinished listeners:\n        if (origInstance != null) {\n          origInstance.notifyReaderFinishedListeners();\n        }\n      }\n    }\n\n","sourceOld":"    synchronized void decRef() throws IOException {\n\n      if (ref.decrementAndGet() == 0) {\n\n        if (fields != null) {\n          fields.close();\n        }\n\n        if (termVectorsReaderOrig != null) {\n          termVectorsReaderOrig.close();\n        }\n  \n        if (fieldsReaderOrig != null) {\n          fieldsReaderOrig.close();\n        }\n  \n        if (cfsReader != null) {\n          cfsReader.close();\n        }\n  \n        if (storeCFSReader != null) {\n          storeCFSReader.close();\n        }\n\n        // Force FieldCache to evict our entries at this\n        // point.  If the exception occurred while\n        // initializing the core readers, then\n        // origInstance will be null, and we don't want\n        // to call FieldCache.purge (it leads to NPE):\n        if (origInstance != null) {\n          FieldCache.DEFAULT.purge(origInstance);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader.CoreReaders#decRef().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader.CoreReaders#decRef().mjava","sourceNew":"    synchronized void decRef() throws IOException {\n      if (ref.decrementAndGet() == 0) {\n        if (fields != null) {\n          fields.close();\n        }\n        \n        if (perDocProducer != null) {\n          perDocProducer.close();\n        }\n\n        if (termVectorsReaderOrig != null) {\n          termVectorsReaderOrig.close();\n        }\n  \n        if (fieldsReaderOrig != null) {\n          fieldsReaderOrig.close();\n        }\n  \n        if (cfsReader != null) {\n          cfsReader.close();\n        }\n  \n        if (storeCFSReader != null) {\n          storeCFSReader.close();\n        }\n\n        // Now, notify any ReaderFinished listeners:\n        if (origInstance != null) {\n          origInstance.notifyReaderFinishedListeners();\n        }\n      }\n    }\n\n","sourceOld":"    synchronized void decRef() throws IOException {\n      if (ref.decrementAndGet() == 0) {\n        if (fields != null) {\n          fields.close();\n        }\n\n        if (termVectorsReaderOrig != null) {\n          termVectorsReaderOrig.close();\n        }\n  \n        if (fieldsReaderOrig != null) {\n          fieldsReaderOrig.close();\n        }\n  \n        if (cfsReader != null) {\n          cfsReader.close();\n        }\n  \n        if (storeCFSReader != null) {\n          storeCFSReader.close();\n        }\n\n        // Now, notify any ReaderFinished listeners:\n        if (origInstance != null) {\n          origInstance.notifyReaderFinishedListeners();\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe19cbe25754c715a0232f453039383119fc122c","date":1306110991,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader.CoreReaders#decRef().mjava","sourceNew":null,"sourceOld":"    synchronized void decRef() throws IOException {\n\n      if (ref.decrementAndGet() == 0) {\n\n        if (fields != null) {\n          fields.close();\n        }\n\n        if (termVectorsReaderOrig != null) {\n          termVectorsReaderOrig.close();\n        }\n  \n        if (fieldsReaderOrig != null) {\n          fieldsReaderOrig.close();\n        }\n  \n        if (cfsReader != null) {\n          cfsReader.close();\n        }\n  \n        if (storeCFSReader != null) {\n          storeCFSReader.close();\n        }\n\n        // Now, notify any ReaderFinished listeners:\n        if (origInstance != null) {\n          origInstance.notifyReaderFinishedListeners();\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae132b768aece5bf21cda14e2f17fba66eb6f7d6","date":1306128032,"type":4,"author":"Steven Rowe","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader.CoreReaders#decRef().mjava","sourceNew":null,"sourceOld":"    synchronized void decRef() throws IOException {\n\n      if (ref.decrementAndGet() == 0) {\n\n        if (fields != null) {\n          fields.close();\n        }\n\n        if (termVectorsReaderOrig != null) {\n          termVectorsReaderOrig.close();\n        }\n  \n        if (fieldsReaderOrig != null) {\n          fieldsReaderOrig.close();\n        }\n  \n        if (cfsReader != null) {\n          cfsReader.close();\n        }\n  \n        if (storeCFSReader != null) {\n          storeCFSReader.close();\n        }\n\n        // Now, notify any ReaderFinished listeners:\n        if (origInstance != null) {\n          origInstance.notifyReaderFinishedListeners();\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c698c0cb88bac4bcd36a1b1001a0c6a2163ea2a","date":1306150983,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader.CoreReaders#decRef().mjava","sourceNew":null,"sourceOld":"    synchronized void decRef() throws IOException {\n      if (ref.decrementAndGet() == 0) {\n        if (fields != null) {\n          fields.close();\n        }\n        \n        if (perDocProducer != null) {\n          perDocProducer.close();\n        }\n\n        if (termVectorsReaderOrig != null) {\n          termVectorsReaderOrig.close();\n        }\n  \n        if (fieldsReaderOrig != null) {\n          fieldsReaderOrig.close();\n        }\n  \n        if (cfsReader != null) {\n          cfsReader.close();\n        }\n  \n        if (storeCFSReader != null) {\n          storeCFSReader.close();\n        }\n\n        // Now, notify any ReaderFinished listeners:\n        if (origInstance != null) {\n          origInstance.notifyReaderFinishedListeners();\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ae132b768aece5bf21cda14e2f17fba66eb6f7d6":["cdd3a20c3f7b8db3ed0313a58cb6304f9b5bc340","fe19cbe25754c715a0232f453039383119fc122c"],"5c698c0cb88bac4bcd36a1b1001a0c6a2163ea2a":["135621f3a0670a9394eb563224a3b76cc4dddc0f","fe19cbe25754c715a0232f453039383119fc122c"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["29ef99d61cda9641b6250bf9567329a6e65f901d","cdd3a20c3f7b8db3ed0313a58cb6304f9b5bc340"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"01f60198ece724a6e96cd0b45f289cf42ff83d4f":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"cdd3a20c3f7b8db3ed0313a58cb6304f9b5bc340":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["0e28c49f1fb6215a550fdadcf3805aa629b63ec0","cdd3a20c3f7b8db3ed0313a58cb6304f9b5bc340"],"fe19cbe25754c715a0232f453039383119fc122c":["cdd3a20c3f7b8db3ed0313a58cb6304f9b5bc340"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0e28c49f1fb6215a550fdadcf3805aa629b63ec0":["01f60198ece724a6e96cd0b45f289cf42ff83d4f"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","cdd3a20c3f7b8db3ed0313a58cb6304f9b5bc340"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fe19cbe25754c715a0232f453039383119fc122c"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"ae132b768aece5bf21cda14e2f17fba66eb6f7d6":[],"5c698c0cb88bac4bcd36a1b1001a0c6a2163ea2a":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["5c698c0cb88bac4bcd36a1b1001a0c6a2163ea2a"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["01f60198ece724a6e96cd0b45f289cf42ff83d4f","cdd3a20c3f7b8db3ed0313a58cb6304f9b5bc340","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"01f60198ece724a6e96cd0b45f289cf42ff83d4f":["0e28c49f1fb6215a550fdadcf3805aa629b63ec0"],"cdd3a20c3f7b8db3ed0313a58cb6304f9b5bc340":["ae132b768aece5bf21cda14e2f17fba66eb6f7d6","135621f3a0670a9394eb563224a3b76cc4dddc0f","29ef99d61cda9641b6250bf9567329a6e65f901d","fe19cbe25754c715a0232f453039383119fc122c","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"fe19cbe25754c715a0232f453039383119fc122c":["ae132b768aece5bf21cda14e2f17fba66eb6f7d6","5c698c0cb88bac4bcd36a1b1001a0c6a2163ea2a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"0e28c49f1fb6215a550fdadcf3805aa629b63ec0":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ae132b768aece5bf21cda14e2f17fba66eb6f7d6","5c698c0cb88bac4bcd36a1b1001a0c6a2163ea2a","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}