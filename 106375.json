{"path":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/cz/CzechAnalyzer#loadStopWords(InputStream,String).mjava","commits":[{"id":"dd745d580729e528151b58aeda87ef82f1b95c9b","date":1248369082,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/cz/CzechAnalyzer#loadStopWords(InputStream,String).mjava","pathOld":"contrib/analyzers/src/java/org/apache/lucene/analysis/cz/CzechAnalyzer#loadStopWords(InputStream,String).mjava","sourceNew":"    /**\n     * Loads stopwords hash from resource stream (file, database...).\n     * @param   wordfile    File containing the wordlist\n     * @param   encoding    Encoding used (win-1250, iso-8859-2, ...), null for default system encoding\n     */\n    public void loadStopWords( InputStream wordfile, String encoding ) {\n        if ( wordfile == null ) {\n            stoptable = new HashSet();\n            return;\n        }\n        try {\n            // clear any previous table (if present)\n            stoptable = new HashSet();\n\n            InputStreamReader isr;\n            if (encoding == null)\n                isr = new InputStreamReader(wordfile);\n            else\n                isr = new InputStreamReader(wordfile, encoding);\n\n            LineNumberReader lnr = new LineNumberReader(isr);\n            String word;\n            while ( ( word = lnr.readLine() ) != null ) {\n                stoptable.add(word);\n            }\n\n        } catch ( IOException e ) {\n            stoptable = null;\n        }\n    }\n\n","sourceOld":"    /**\n     * Loads stopwords hash from resource stream (file, database...).\n     * @param   wordfile    File containing the wordlist\n     * @param   encoding    Encoding used (win-1250, iso-8859-2, ...), null for default system encoding\n     */\n    public void loadStopWords( InputStream wordfile, String encoding ) {\n        if ( wordfile == null ) {\n            stoptable = new HashSet();\n            return;\n        }\n        try {\n            // clear any previous table (if present)\n            stoptable = new HashSet();\n\n            InputStreamReader isr;\n            if (encoding == null)\n                isr = new InputStreamReader(wordfile);\n            else\n                isr = new InputStreamReader(wordfile, encoding);\n\n            LineNumberReader lnr = new LineNumberReader(isr);\n            String word;\n            while ( ( word = lnr.readLine() ) != null ) {\n                stoptable.add(word);\n            }\n\n        } catch ( IOException e ) {\n            stoptable = null;\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d162e44966cfe4ab497a76295986daa4665ffc9","date":1250682991,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/cz/CzechAnalyzer#loadStopWords(InputStream,String).mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/cz/CzechAnalyzer#loadStopWords(InputStream,String).mjava","sourceNew":"    /**\n     * Loads stopwords hash from resource stream (file, database...).\n     * @param   wordfile    File containing the wordlist\n     * @param   encoding    Encoding used (win-1250, iso-8859-2, ...), null for default system encoding\n     */\n    public void loadStopWords( InputStream wordfile, String encoding ) {\n        setPreviousTokenStream(null); // force a new stopfilter to be created\n        if ( wordfile == null ) {\n            stoptable = new HashSet();\n            return;\n        }\n        try {\n            // clear any previous table (if present)\n            stoptable = new HashSet();\n\n            InputStreamReader isr;\n            if (encoding == null)\n                isr = new InputStreamReader(wordfile);\n            else\n                isr = new InputStreamReader(wordfile, encoding);\n\n            LineNumberReader lnr = new LineNumberReader(isr);\n            String word;\n            while ( ( word = lnr.readLine() ) != null ) {\n                stoptable.add(word);\n            }\n\n        } catch ( IOException e ) {\n          // clear any previous table (if present)\n          // TODO: throw IOException\n          stoptable = new HashSet();\n        }\n    }\n\n","sourceOld":"    /**\n     * Loads stopwords hash from resource stream (file, database...).\n     * @param   wordfile    File containing the wordlist\n     * @param   encoding    Encoding used (win-1250, iso-8859-2, ...), null for default system encoding\n     */\n    public void loadStopWords( InputStream wordfile, String encoding ) {\n        if ( wordfile == null ) {\n            stoptable = new HashSet();\n            return;\n        }\n        try {\n            // clear any previous table (if present)\n            stoptable = new HashSet();\n\n            InputStreamReader isr;\n            if (encoding == null)\n                isr = new InputStreamReader(wordfile);\n            else\n                isr = new InputStreamReader(wordfile, encoding);\n\n            LineNumberReader lnr = new LineNumberReader(isr);\n            String word;\n            while ( ( word = lnr.readLine() ) != null ) {\n                stoptable.add(word);\n            }\n\n        } catch ( IOException e ) {\n            stoptable = null;\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9","date":1256127131,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/cz/CzechAnalyzer#loadStopWords(InputStream,String).mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/cz/CzechAnalyzer#loadStopWords(InputStream,String).mjava","sourceNew":"    /**\n     * Loads stopwords hash from resource stream (file, database...).\n     * @param   wordfile    File containing the wordlist\n     * @param   encoding    Encoding used (win-1250, iso-8859-2, ...), null for default system encoding\n     */\n    public void loadStopWords( InputStream wordfile, String encoding ) {\n        setPreviousTokenStream(null); // force a new stopfilter to be created\n        if ( wordfile == null ) {\n            stoptable = new HashSet();\n            return;\n        }\n        try {\n            // clear any previous table (if present)\n            stoptable = Collections.emptySet();\n\n            InputStreamReader isr;\n            if (encoding == null)\n                isr = new InputStreamReader(wordfile);\n            else\n                isr = new InputStreamReader(wordfile, encoding);\n\n            stoptable = WordlistLoader.getWordSet(isr);\n        } catch ( IOException e ) {\n          // clear any previous table (if present)\n          // TODO: throw IOException\n          stoptable = Collections.emptySet();\n        }\n    }\n\n","sourceOld":"    /**\n     * Loads stopwords hash from resource stream (file, database...).\n     * @param   wordfile    File containing the wordlist\n     * @param   encoding    Encoding used (win-1250, iso-8859-2, ...), null for default system encoding\n     */\n    public void loadStopWords( InputStream wordfile, String encoding ) {\n        setPreviousTokenStream(null); // force a new stopfilter to be created\n        if ( wordfile == null ) {\n            stoptable = new HashSet();\n            return;\n        }\n        try {\n            // clear any previous table (if present)\n            stoptable = new HashSet();\n\n            InputStreamReader isr;\n            if (encoding == null)\n                isr = new InputStreamReader(wordfile);\n            else\n                isr = new InputStreamReader(wordfile, encoding);\n\n            LineNumberReader lnr = new LineNumberReader(isr);\n            String word;\n            while ( ( word = lnr.readLine() ) != null ) {\n                stoptable.add(word);\n            }\n\n        } catch ( IOException e ) {\n          // clear any previous table (if present)\n          // TODO: throw IOException\n          stoptable = new HashSet();\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7fd9c6f9b5329d587a12a56f2b6d96b2f9b02fbe","date":1258372117,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/cz/CzechAnalyzer#loadStopWords(InputStream,String).mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/cz/CzechAnalyzer#loadStopWords(InputStream,String).mjava","sourceNew":"    /**\n     * Loads stopwords hash from resource stream (file, database...).\n     * @param   wordfile    File containing the wordlist\n     * @param   encoding    Encoding used (win-1250, iso-8859-2, ...), null for default system encoding\n     * @deprecated use {@link WordlistLoader#getWordSet(Reader, String) }\n     *             and {@link #CzechAnalyzer(Version, Set)} instead\n     */\n    public void loadStopWords( InputStream wordfile, String encoding ) {\n        setPreviousTokenStream(null); // force a new stopfilter to be created\n        if ( wordfile == null ) {\n            stoptable = Collections.emptySet();\n            return;\n        }\n        try {\n            // clear any previous table (if present)\n            stoptable = Collections.emptySet();\n\n            InputStreamReader isr;\n            if (encoding == null)\n                isr = new InputStreamReader(wordfile);\n            else\n                isr = new InputStreamReader(wordfile, encoding);\n\n            stoptable = WordlistLoader.getWordSet(isr);\n        } catch ( IOException e ) {\n          // clear any previous table (if present)\n          // TODO: throw IOException\n          stoptable = Collections.emptySet();\n        }\n    }\n\n","sourceOld":"    /**\n     * Loads stopwords hash from resource stream (file, database...).\n     * @param   wordfile    File containing the wordlist\n     * @param   encoding    Encoding used (win-1250, iso-8859-2, ...), null for default system encoding\n     */\n    public void loadStopWords( InputStream wordfile, String encoding ) {\n        setPreviousTokenStream(null); // force a new stopfilter to be created\n        if ( wordfile == null ) {\n            stoptable = new HashSet();\n            return;\n        }\n        try {\n            // clear any previous table (if present)\n            stoptable = Collections.emptySet();\n\n            InputStreamReader isr;\n            if (encoding == null)\n                isr = new InputStreamReader(wordfile);\n            else\n                isr = new InputStreamReader(wordfile, encoding);\n\n            stoptable = WordlistLoader.getWordSet(isr);\n        } catch ( IOException e ) {\n          // clear any previous table (if present)\n          // TODO: throw IOException\n          stoptable = Collections.emptySet();\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ddc5fbfd4c64963aba52713a4496522540294d69","date":1262508497,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/cz/CzechAnalyzer#loadStopWords(InputStream,String).mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/cz/CzechAnalyzer#loadStopWords(InputStream,String).mjava","sourceNew":"    /**\n     * Loads stopwords hash from resource stream (file, database...).\n     * @param   wordfile    File containing the wordlist\n     * @param   encoding    Encoding used (win-1250, iso-8859-2, ...), null for default system encoding\n     * @deprecated use {@link WordlistLoader#getWordSet(Reader, String) }\n     *             and {@link #CzechAnalyzer(Version, Set)} instead\n     */\n    // TODO extend StopwordAnalyzerBase once this method is gone!\n    public void loadStopWords( InputStream wordfile, String encoding ) {\n        setPreviousTokenStream(null); // force a new stopfilter to be created\n        if ( wordfile == null ) {\n            stoptable = Collections.emptySet();\n            return;\n        }\n        try {\n            // clear any previous table (if present)\n            stoptable = Collections.emptySet();\n\n            InputStreamReader isr;\n            if (encoding == null)\n                isr = new InputStreamReader(wordfile);\n            else\n                isr = new InputStreamReader(wordfile, encoding);\n\n            stoptable = WordlistLoader.getWordSet(isr);\n        } catch ( IOException e ) {\n          // clear any previous table (if present)\n          // TODO: throw IOException\n          stoptable = Collections.emptySet();\n        }\n    }\n\n","sourceOld":"    /**\n     * Loads stopwords hash from resource stream (file, database...).\n     * @param   wordfile    File containing the wordlist\n     * @param   encoding    Encoding used (win-1250, iso-8859-2, ...), null for default system encoding\n     * @deprecated use {@link WordlistLoader#getWordSet(Reader, String) }\n     *             and {@link #CzechAnalyzer(Version, Set)} instead\n     */\n    public void loadStopWords( InputStream wordfile, String encoding ) {\n        setPreviousTokenStream(null); // force a new stopfilter to be created\n        if ( wordfile == null ) {\n            stoptable = Collections.emptySet();\n            return;\n        }\n        try {\n            // clear any previous table (if present)\n            stoptable = Collections.emptySet();\n\n            InputStreamReader isr;\n            if (encoding == null)\n                isr = new InputStreamReader(wordfile);\n            else\n                isr = new InputStreamReader(wordfile, encoding);\n\n            stoptable = WordlistLoader.getWordSet(isr);\n        } catch ( IOException e ) {\n          // clear any previous table (if present)\n          // TODO: throw IOException\n          stoptable = Collections.emptySet();\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5384d626ad24f6a1d56141ba6b0b144d1b2eafc5","date":1262514702,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/cz/CzechAnalyzer#loadStopWords(InputStream,String).mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/cz/CzechAnalyzer#loadStopWords(InputStream,String).mjava","sourceNew":"    /**\n     * Loads stopwords hash from resource stream (file, database...).\n     * @param   wordfile    File containing the wordlist\n     * @param   encoding    Encoding used (win-1250, iso-8859-2, ...), null for default system encoding\n     * @deprecated use {@link WordlistLoader#getWordSet(Reader, String) }\n     *             and {@link #CzechAnalyzer(Version, Set)} instead\n     */\n    // TODO extend StopwordAnalyzerBase once this method is gone!\n    @Deprecated\n    public void loadStopWords( InputStream wordfile, String encoding ) {\n        setPreviousTokenStream(null); // force a new stopfilter to be created\n        if ( wordfile == null ) {\n            stoptable = Collections.emptySet();\n            return;\n        }\n        try {\n            // clear any previous table (if present)\n            stoptable = Collections.emptySet();\n\n            InputStreamReader isr;\n            if (encoding == null)\n                isr = new InputStreamReader(wordfile);\n            else\n                isr = new InputStreamReader(wordfile, encoding);\n\n            stoptable = WordlistLoader.getWordSet(isr);\n        } catch ( IOException e ) {\n          // clear any previous table (if present)\n          // TODO: throw IOException\n          stoptable = Collections.emptySet();\n        }\n    }\n\n","sourceOld":"    /**\n     * Loads stopwords hash from resource stream (file, database...).\n     * @param   wordfile    File containing the wordlist\n     * @param   encoding    Encoding used (win-1250, iso-8859-2, ...), null for default system encoding\n     * @deprecated use {@link WordlistLoader#getWordSet(Reader, String) }\n     *             and {@link #CzechAnalyzer(Version, Set)} instead\n     */\n    // TODO extend StopwordAnalyzerBase once this method is gone!\n    public void loadStopWords( InputStream wordfile, String encoding ) {\n        setPreviousTokenStream(null); // force a new stopfilter to be created\n        if ( wordfile == null ) {\n            stoptable = Collections.emptySet();\n            return;\n        }\n        try {\n            // clear any previous table (if present)\n            stoptable = Collections.emptySet();\n\n            InputStreamReader isr;\n            if (encoding == null)\n                isr = new InputStreamReader(wordfile);\n            else\n                isr = new InputStreamReader(wordfile, encoding);\n\n            stoptable = WordlistLoader.getWordSet(isr);\n        } catch ( IOException e ) {\n          // clear any previous table (if present)\n          // TODO: throw IOException\n          stoptable = Collections.emptySet();\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/cz/CzechAnalyzer#loadStopWords(InputStream,String).mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/cz/CzechAnalyzer#loadStopWords(InputStream,String).mjava","sourceNew":"    /**\n     * Loads stopwords hash from resource stream (file, database...).\n     * @param   wordfile    File containing the wordlist\n     * @param   encoding    Encoding used (win-1250, iso-8859-2, ...), null for default system encoding\n     * @deprecated use {@link WordlistLoader#getWordSet(Reader, String) }\n     *             and {@link #CzechAnalyzer(Version, Set)} instead\n     */\n    // TODO extend StopwordAnalyzerBase once this method is gone!\n    @Deprecated\n    public void loadStopWords( InputStream wordfile, String encoding ) {\n        setPreviousTokenStream(null); // force a new stopfilter to be created\n        if ( wordfile == null ) {\n            stoptable = Collections.emptySet();\n            return;\n        }\n        try {\n            // clear any previous table (if present)\n            stoptable = Collections.emptySet();\n\n            InputStreamReader isr;\n            if (encoding == null)\n                isr = new InputStreamReader(wordfile);\n            else\n                isr = new InputStreamReader(wordfile, encoding);\n\n            stoptable = WordlistLoader.getWordSet(isr);\n        } catch ( IOException e ) {\n          // clear any previous table (if present)\n          // TODO: throw IOException\n          stoptable = Collections.emptySet();\n        }\n    }\n\n","sourceOld":"    /**\n     * Loads stopwords hash from resource stream (file, database...).\n     * @param   wordfile    File containing the wordlist\n     * @param   encoding    Encoding used (win-1250, iso-8859-2, ...), null for default system encoding\n     * @deprecated use {@link WordlistLoader#getWordSet(Reader, String) }\n     *             and {@link #CzechAnalyzer(Version, Set)} instead\n     */\n    // TODO extend StopwordAnalyzerBase once this method is gone!\n    @Deprecated\n    public void loadStopWords( InputStream wordfile, String encoding ) {\n        setPreviousTokenStream(null); // force a new stopfilter to be created\n        if ( wordfile == null ) {\n            stoptable = Collections.emptySet();\n            return;\n        }\n        try {\n            // clear any previous table (if present)\n            stoptable = Collections.emptySet();\n\n            InputStreamReader isr;\n            if (encoding == null)\n                isr = new InputStreamReader(wordfile);\n            else\n                isr = new InputStreamReader(wordfile, encoding);\n\n            stoptable = WordlistLoader.getWordSet(isr);\n        } catch ( IOException e ) {\n          // clear any previous table (if present)\n          // TODO: throw IOException\n          stoptable = Collections.emptySet();\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5384d626ad24f6a1d56141ba6b0b144d1b2eafc5":["ddc5fbfd4c64963aba52713a4496522540294d69"],"4d162e44966cfe4ab497a76295986daa4665ffc9":["dd745d580729e528151b58aeda87ef82f1b95c9b"],"dd745d580729e528151b58aeda87ef82f1b95c9b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9":["4d162e44966cfe4ab497a76295986daa4665ffc9"],"ddc5fbfd4c64963aba52713a4496522540294d69":["7fd9c6f9b5329d587a12a56f2b6d96b2f9b02fbe"],"7fd9c6f9b5329d587a12a56f2b6d96b2f9b02fbe":["4b41b991de69ba7b72d5e90cfcee25699a1a7fc9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["5384d626ad24f6a1d56141ba6b0b144d1b2eafc5"]},"commit2Childs":{"5384d626ad24f6a1d56141ba6b0b144d1b2eafc5":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"4d162e44966cfe4ab497a76295986daa4665ffc9":["4b41b991de69ba7b72d5e90cfcee25699a1a7fc9"],"dd745d580729e528151b58aeda87ef82f1b95c9b":["4d162e44966cfe4ab497a76295986daa4665ffc9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["dd745d580729e528151b58aeda87ef82f1b95c9b"],"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9":["7fd9c6f9b5329d587a12a56f2b6d96b2f9b02fbe"],"ddc5fbfd4c64963aba52713a4496522540294d69":["5384d626ad24f6a1d56141ba6b0b144d1b2eafc5"],"7fd9c6f9b5329d587a12a56f2b6d96b2f9b02fbe":["ddc5fbfd4c64963aba52713a4496522540294d69"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}