{"path":"lucene/src/test/org/apache/lucene/index/TestIndexWriterUnicode#fillUnicode(char[],char[],int,int).mjava","commits":[{"id":"ff6fd241dc6610f7f81b62e3ba4cedf105939623","date":1307331653,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterUnicode#fillUnicode(char[],char[],int,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#fillUnicode(char[],char[],int,int).mjava","sourceNew":"  private boolean fillUnicode(char[] buffer, char[] expected, int offset, int count) {\n    final int len = offset + count;\n    boolean hasIllegal = false;\n\n    if (offset > 0 && buffer[offset] >= 0xdc00 && buffer[offset] < 0xe000)\n      // Don't start in the middle of a valid surrogate pair\n      offset--;\n\n    for(int i=offset;i<len;i++) {\n      int t = nextInt(6);\n      if (0 == t && i < len-1) {\n        // Make a surrogate pair\n        // High surrogate\n        expected[i] = buffer[i++] = (char) nextInt(0xd800, 0xdc00);\n        // Low surrogate\n        expected[i] = buffer[i] = (char) nextInt(0xdc00, 0xe000);\n      } else if (t <= 1)\n        expected[i] = buffer[i] = (char) nextInt(0x80);\n      else if (2 == t)\n        expected[i] = buffer[i] = (char) nextInt(0x80, 0x800);\n      else if (3 == t)\n        expected[i] = buffer[i] = (char) nextInt(0x800, 0xd800);\n      else if (4 == t)\n        expected[i] = buffer[i] = (char) nextInt(0xe000, 0xffff);\n      else if (5 == t && i < len-1) {\n        // Illegal unpaired surrogate\n        if (nextInt(10) == 7) {\n          if (random.nextBoolean())\n            buffer[i] = (char) nextInt(0xd800, 0xdc00);\n          else\n            buffer[i] = (char) nextInt(0xdc00, 0xe000);\n          expected[i++] = 0xfffd;\n          expected[i] = buffer[i] = (char) nextInt(0x800, 0xd800);\n          hasIllegal = true;\n        } else\n          expected[i] = buffer[i] = (char) nextInt(0x800, 0xd800);\n      } else {\n        expected[i] = buffer[i] = ' ';\n      }\n    }\n\n    return hasIllegal;\n  }\n\n","sourceOld":"  private boolean fillUnicode(char[] buffer, char[] expected, int offset, int count) {\n    final int len = offset + count;\n    boolean hasIllegal = false;\n\n    if (offset > 0 && buffer[offset] >= 0xdc00 && buffer[offset] < 0xe000)\n      // Don't start in the middle of a valid surrogate pair\n      offset--;\n\n    for(int i=offset;i<len;i++) {\n      int t = nextInt(6);\n      if (0 == t && i < len-1) {\n        // Make a surrogate pair\n        // High surrogate\n        expected[i] = buffer[i++] = (char) nextInt(0xd800, 0xdc00);\n        // Low surrogate\n        expected[i] = buffer[i] = (char) nextInt(0xdc00, 0xe000);\n      } else if (t <= 1)\n        expected[i] = buffer[i] = (char) nextInt(0x80);\n      else if (2 == t)\n        expected[i] = buffer[i] = (char) nextInt(0x80, 0x800);\n      else if (3 == t)\n        expected[i] = buffer[i] = (char) nextInt(0x800, 0xd800);\n      else if (4 == t)\n        expected[i] = buffer[i] = (char) nextInt(0xe000, 0xffff);\n      else if (5 == t && i < len-1) {\n        // Illegal unpaired surrogate\n        if (nextInt(10) == 7) {\n          if (random.nextBoolean())\n            buffer[i] = (char) nextInt(0xd800, 0xdc00);\n          else\n            buffer[i] = (char) nextInt(0xdc00, 0xe000);\n          expected[i++] = 0xfffd;\n          expected[i] = buffer[i] = (char) nextInt(0x800, 0xd800);\n          hasIllegal = true;\n        } else\n          expected[i] = buffer[i] = (char) nextInt(0x800, 0xd800);\n      } else {\n        expected[i] = buffer[i] = ' ';\n      }\n    }\n\n    return hasIllegal;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"79c2cb24929f2649a8875fb629086171f914d5ce","date":1307332717,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterUnicode#fillUnicode(char[],char[],int,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#fillUnicode(char[],char[],int,int).mjava","sourceNew":"  private boolean fillUnicode(char[] buffer, char[] expected, int offset, int count) {\n    final int len = offset + count;\n    boolean hasIllegal = false;\n\n    if (offset > 0 && buffer[offset] >= 0xdc00 && buffer[offset] < 0xe000)\n      // Don't start in the middle of a valid surrogate pair\n      offset--;\n\n    for(int i=offset;i<len;i++) {\n      int t = nextInt(6);\n      if (0 == t && i < len-1) {\n        // Make a surrogate pair\n        // High surrogate\n        expected[i] = buffer[i++] = (char) nextInt(0xd800, 0xdc00);\n        // Low surrogate\n        expected[i] = buffer[i] = (char) nextInt(0xdc00, 0xe000);\n      } else if (t <= 1)\n        expected[i] = buffer[i] = (char) nextInt(0x80);\n      else if (2 == t)\n        expected[i] = buffer[i] = (char) nextInt(0x80, 0x800);\n      else if (3 == t)\n        expected[i] = buffer[i] = (char) nextInt(0x800, 0xd800);\n      else if (4 == t)\n        expected[i] = buffer[i] = (char) nextInt(0xe000, 0xffff);\n      else if (5 == t && i < len-1) {\n        // Illegal unpaired surrogate\n        if (nextInt(10) == 7) {\n          if (random.nextBoolean())\n            buffer[i] = (char) nextInt(0xd800, 0xdc00);\n          else\n            buffer[i] = (char) nextInt(0xdc00, 0xe000);\n          expected[i++] = 0xfffd;\n          expected[i] = buffer[i] = (char) nextInt(0x800, 0xd800);\n          hasIllegal = true;\n        } else\n          expected[i] = buffer[i] = (char) nextInt(0x800, 0xd800);\n      } else {\n        expected[i] = buffer[i] = ' ';\n      }\n    }\n\n    return hasIllegal;\n  }\n\n","sourceOld":"  private boolean fillUnicode(char[] buffer, char[] expected, int offset, int count) {\n    final int len = offset + count;\n    boolean hasIllegal = false;\n\n    if (offset > 0 && buffer[offset] >= 0xdc00 && buffer[offset] < 0xe000)\n      // Don't start in the middle of a valid surrogate pair\n      offset--;\n\n    for(int i=offset;i<len;i++) {\n      int t = nextInt(6);\n      if (0 == t && i < len-1) {\n        // Make a surrogate pair\n        // High surrogate\n        expected[i] = buffer[i++] = (char) nextInt(0xd800, 0xdc00);\n        // Low surrogate\n        expected[i] = buffer[i] = (char) nextInt(0xdc00, 0xe000);\n      } else if (t <= 1)\n        expected[i] = buffer[i] = (char) nextInt(0x80);\n      else if (2 == t)\n        expected[i] = buffer[i] = (char) nextInt(0x80, 0x800);\n      else if (3 == t)\n        expected[i] = buffer[i] = (char) nextInt(0x800, 0xd800);\n      else if (4 == t)\n        expected[i] = buffer[i] = (char) nextInt(0xe000, 0xffff);\n      else if (5 == t && i < len-1) {\n        // Illegal unpaired surrogate\n        if (nextInt(10) == 7) {\n          if (random.nextBoolean())\n            buffer[i] = (char) nextInt(0xd800, 0xdc00);\n          else\n            buffer[i] = (char) nextInt(0xdc00, 0xe000);\n          expected[i++] = 0xfffd;\n          expected[i] = buffer[i] = (char) nextInt(0x800, 0xd800);\n          hasIllegal = true;\n        } else\n          expected[i] = buffer[i] = (char) nextInt(0x800, 0xd800);\n      } else {\n        expected[i] = buffer[i] = ' ';\n      }\n    }\n\n    return hasIllegal;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"77cf4379b2824f6ea34b091c495d6e95c38ff9e2","date":1307610475,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterUnicode#fillUnicode(char[],char[],int,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#fillUnicode(char[],char[],int,int).mjava","sourceNew":"  private boolean fillUnicode(char[] buffer, char[] expected, int offset, int count) {\n    final int len = offset + count;\n    boolean hasIllegal = false;\n\n    if (offset > 0 && buffer[offset] >= 0xdc00 && buffer[offset] < 0xe000)\n      // Don't start in the middle of a valid surrogate pair\n      offset--;\n\n    for(int i=offset;i<len;i++) {\n      int t = nextInt(6);\n      if (0 == t && i < len-1) {\n        // Make a surrogate pair\n        // High surrogate\n        expected[i] = buffer[i++] = (char) nextInt(0xd800, 0xdc00);\n        // Low surrogate\n        expected[i] = buffer[i] = (char) nextInt(0xdc00, 0xe000);\n      } else if (t <= 1)\n        expected[i] = buffer[i] = (char) nextInt(0x80);\n      else if (2 == t)\n        expected[i] = buffer[i] = (char) nextInt(0x80, 0x800);\n      else if (3 == t)\n        expected[i] = buffer[i] = (char) nextInt(0x800, 0xd800);\n      else if (4 == t)\n        expected[i] = buffer[i] = (char) nextInt(0xe000, 0xffff);\n      else if (5 == t && i < len-1) {\n        // Illegal unpaired surrogate\n        if (nextInt(10) == 7) {\n          if (random.nextBoolean())\n            buffer[i] = (char) nextInt(0xd800, 0xdc00);\n          else\n            buffer[i] = (char) nextInt(0xdc00, 0xe000);\n          expected[i++] = 0xfffd;\n          expected[i] = buffer[i] = (char) nextInt(0x800, 0xd800);\n          hasIllegal = true;\n        } else\n          expected[i] = buffer[i] = (char) nextInt(0x800, 0xd800);\n      } else {\n        expected[i] = buffer[i] = ' ';\n      }\n    }\n\n    return hasIllegal;\n  }\n\n","sourceOld":"  private boolean fillUnicode(char[] buffer, char[] expected, int offset, int count) {\n    final int len = offset + count;\n    boolean hasIllegal = false;\n\n    if (offset > 0 && buffer[offset] >= 0xdc00 && buffer[offset] < 0xe000)\n      // Don't start in the middle of a valid surrogate pair\n      offset--;\n\n    for(int i=offset;i<len;i++) {\n      int t = nextInt(6);\n      if (0 == t && i < len-1) {\n        // Make a surrogate pair\n        // High surrogate\n        expected[i] = buffer[i++] = (char) nextInt(0xd800, 0xdc00);\n        // Low surrogate\n        expected[i] = buffer[i] = (char) nextInt(0xdc00, 0xe000);\n      } else if (t <= 1)\n        expected[i] = buffer[i] = (char) nextInt(0x80);\n      else if (2 == t)\n        expected[i] = buffer[i] = (char) nextInt(0x80, 0x800);\n      else if (3 == t)\n        expected[i] = buffer[i] = (char) nextInt(0x800, 0xd800);\n      else if (4 == t)\n        expected[i] = buffer[i] = (char) nextInt(0xe000, 0xffff);\n      else if (5 == t && i < len-1) {\n        // Illegal unpaired surrogate\n        if (nextInt(10) == 7) {\n          if (random.nextBoolean())\n            buffer[i] = (char) nextInt(0xd800, 0xdc00);\n          else\n            buffer[i] = (char) nextInt(0xdc00, 0xe000);\n          expected[i++] = 0xfffd;\n          expected[i] = buffer[i] = (char) nextInt(0x800, 0xd800);\n          hasIllegal = true;\n        } else\n          expected[i] = buffer[i] = (char) nextInt(0x800, 0xd800);\n      } else {\n        expected[i] = buffer[i] = ' ';\n      }\n    }\n\n    return hasIllegal;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterUnicode#fillUnicode(char[],char[],int,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterUnicode#fillUnicode(char[],char[],int,int).mjava","sourceNew":"  private boolean fillUnicode(char[] buffer, char[] expected, int offset, int count) {\n    final int len = offset + count;\n    boolean hasIllegal = false;\n\n    if (offset > 0 && buffer[offset] >= 0xdc00 && buffer[offset] < 0xe000)\n      // Don't start in the middle of a valid surrogate pair\n      offset--;\n\n    for(int i=offset;i<len;i++) {\n      int t = nextInt(6);\n      if (0 == t && i < len-1) {\n        // Make a surrogate pair\n        // High surrogate\n        expected[i] = buffer[i++] = (char) nextInt(0xd800, 0xdc00);\n        // Low surrogate\n        expected[i] = buffer[i] = (char) nextInt(0xdc00, 0xe000);\n      } else if (t <= 1)\n        expected[i] = buffer[i] = (char) nextInt(0x80);\n      else if (2 == t)\n        expected[i] = buffer[i] = (char) nextInt(0x80, 0x800);\n      else if (3 == t)\n        expected[i] = buffer[i] = (char) nextInt(0x800, 0xd800);\n      else if (4 == t)\n        expected[i] = buffer[i] = (char) nextInt(0xe000, 0xffff);\n      else if (5 == t && i < len-1) {\n        // Illegal unpaired surrogate\n        if (nextInt(10) == 7) {\n          if (random.nextBoolean())\n            buffer[i] = (char) nextInt(0xd800, 0xdc00);\n          else\n            buffer[i] = (char) nextInt(0xdc00, 0xe000);\n          expected[i++] = 0xfffd;\n          expected[i] = buffer[i] = (char) nextInt(0x800, 0xd800);\n          hasIllegal = true;\n        } else\n          expected[i] = buffer[i] = (char) nextInt(0x800, 0xd800);\n      } else {\n        expected[i] = buffer[i] = ' ';\n      }\n    }\n\n    return hasIllegal;\n  }\n\n","sourceOld":"  private boolean fillUnicode(char[] buffer, char[] expected, int offset, int count) {\n    final int len = offset + count;\n    boolean hasIllegal = false;\n\n    if (offset > 0 && buffer[offset] >= 0xdc00 && buffer[offset] < 0xe000)\n      // Don't start in the middle of a valid surrogate pair\n      offset--;\n\n    for(int i=offset;i<len;i++) {\n      int t = nextInt(6);\n      if (0 == t && i < len-1) {\n        // Make a surrogate pair\n        // High surrogate\n        expected[i] = buffer[i++] = (char) nextInt(0xd800, 0xdc00);\n        // Low surrogate\n        expected[i] = buffer[i] = (char) nextInt(0xdc00, 0xe000);\n      } else if (t <= 1)\n        expected[i] = buffer[i] = (char) nextInt(0x80);\n      else if (2 == t)\n        expected[i] = buffer[i] = (char) nextInt(0x80, 0x800);\n      else if (3 == t)\n        expected[i] = buffer[i] = (char) nextInt(0x800, 0xd800);\n      else if (4 == t)\n        expected[i] = buffer[i] = (char) nextInt(0xe000, 0xffff);\n      else if (5 == t && i < len-1) {\n        // Illegal unpaired surrogate\n        if (nextInt(10) == 7) {\n          if (random.nextBoolean())\n            buffer[i] = (char) nextInt(0xd800, 0xdc00);\n          else\n            buffer[i] = (char) nextInt(0xdc00, 0xe000);\n          expected[i++] = 0xfffd;\n          expected[i] = buffer[i] = (char) nextInt(0x800, 0xd800);\n          hasIllegal = true;\n        } else\n          expected[i] = buffer[i] = (char) nextInt(0x800, 0xd800);\n      } else {\n        expected[i] = buffer[i] = ' ';\n      }\n    }\n\n    return hasIllegal;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ff6fd241dc6610f7f81b62e3ba4cedf105939623":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"79c2cb24929f2649a8875fb629086171f914d5ce":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ff6fd241dc6610f7f81b62e3ba4cedf105939623"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["ff6fd241dc6610f7f81b62e3ba4cedf105939623"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ff6fd241dc6610f7f81b62e3ba4cedf105939623"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"ff6fd241dc6610f7f81b62e3ba4cedf105939623":["79c2cb24929f2649a8875fb629086171f914d5ce","3a119bbc8703c10faa329ec201c654b3a35a1e3e","77cf4379b2824f6ea34b091c495d6e95c38ff9e2"],"79c2cb24929f2649a8875fb629086171f914d5ce":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ff6fd241dc6610f7f81b62e3ba4cedf105939623","79c2cb24929f2649a8875fb629086171f914d5ce","77cf4379b2824f6ea34b091c495d6e95c38ff9e2"],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["79c2cb24929f2649a8875fb629086171f914d5ce","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}