{"path":"lucene/backwards/src/java/org/apache/lucene/index/ConcurrentMergeScheduler#merge(IndexWriter).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/index/ConcurrentMergeScheduler#merge(IndexWriter).mjava","pathOld":"backwards/src/java/org/apache/lucene/index/ConcurrentMergeScheduler#merge(IndexWriter).mjava","sourceNew":"  @Override\n  public void merge(IndexWriter writer)\n    throws CorruptIndexException, IOException {\n\n    assert !Thread.holdsLock(writer);\n\n    this.writer = writer;\n\n    initMergeThreadPriority();\n\n    dir = writer.getDirectory();\n\n    // First, quickly run through the newly proposed merges\n    // and add any orthogonal merges (ie a merge not\n    // involving segments already pending to be merged) to\n    // the queue.  If we are way behind on merging, many of\n    // these newly proposed merges will likely already be\n    // registered.\n\n    if (verbose()) {\n      message(\"now merge\");\n      message(\"  index: \" + writer.segString());\n    }\n    \n    // Iterate, pulling from the IndexWriter's queue of\n    // pending merges, until it's empty:\n    while(true) {\n\n      // TODO: we could be careful about which merges to do in\n      // the BG (eg maybe the \"biggest\" ones) vs FG, which\n      // merges to do first (the easiest ones?), etc.\n\n      MergePolicy.OneMerge merge = writer.getNextMerge();\n      if (merge == null) {\n        if (verbose())\n          message(\"  no more merges pending; now return\");\n        return;\n      }\n\n      // We do this w/ the primary thread to keep\n      // deterministic assignment of segment names\n      writer.mergeInit(merge);\n\n      boolean success = false;\n      try {\n        synchronized(this) {\n          final MergeThread merger;\n          while (mergeThreadCount() >= maxThreadCount) {\n            if (verbose())\n              message(\"    too many merge threads running; stalling...\");\n            try {\n              wait();\n            } catch (InterruptedException ie) {\n              throw new ThreadInterruptedException(ie);\n            }\n          }\n\n          if (verbose())\n            message(\"  consider merge \" + merge.segString(dir));\n      \n          assert mergeThreadCount() < maxThreadCount;\n\n          // OK to spawn a new merge thread to handle this\n          // merge:\n          merger = getMergeThread(writer, merge);\n          mergeThreads.add(merger);\n          if (verbose())\n            message(\"    launch new thread [\" + merger.getName() + \"]\");\n\n          merger.start();\n          success = true;\n        }\n      } finally {\n        if (!success) {\n          writer.mergeFinish(merge);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void merge(IndexWriter writer)\n    throws CorruptIndexException, IOException {\n\n    assert !Thread.holdsLock(writer);\n\n    this.writer = writer;\n\n    initMergeThreadPriority();\n\n    dir = writer.getDirectory();\n\n    // First, quickly run through the newly proposed merges\n    // and add any orthogonal merges (ie a merge not\n    // involving segments already pending to be merged) to\n    // the queue.  If we are way behind on merging, many of\n    // these newly proposed merges will likely already be\n    // registered.\n\n    if (verbose()) {\n      message(\"now merge\");\n      message(\"  index: \" + writer.segString());\n    }\n    \n    // Iterate, pulling from the IndexWriter's queue of\n    // pending merges, until it's empty:\n    while(true) {\n\n      // TODO: we could be careful about which merges to do in\n      // the BG (eg maybe the \"biggest\" ones) vs FG, which\n      // merges to do first (the easiest ones?), etc.\n\n      MergePolicy.OneMerge merge = writer.getNextMerge();\n      if (merge == null) {\n        if (verbose())\n          message(\"  no more merges pending; now return\");\n        return;\n      }\n\n      // We do this w/ the primary thread to keep\n      // deterministic assignment of segment names\n      writer.mergeInit(merge);\n\n      boolean success = false;\n      try {\n        synchronized(this) {\n          final MergeThread merger;\n          while (mergeThreadCount() >= maxThreadCount) {\n            if (verbose())\n              message(\"    too many merge threads running; stalling...\");\n            try {\n              wait();\n            } catch (InterruptedException ie) {\n              throw new ThreadInterruptedException(ie);\n            }\n          }\n\n          if (verbose())\n            message(\"  consider merge \" + merge.segString(dir));\n      \n          assert mergeThreadCount() < maxThreadCount;\n\n          // OK to spawn a new merge thread to handle this\n          // merge:\n          merger = getMergeThread(writer, merge);\n          mergeThreads.add(merger);\n          if (verbose())\n            message(\"    launch new thread [\" + merger.getName() + \"]\");\n\n          merger.start();\n          success = true;\n        }\n      } finally {\n        if (!success) {\n          writer.mergeFinish(merge);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/java/org/apache/lucene/index/ConcurrentMergeScheduler#merge(IndexWriter).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void merge(IndexWriter writer)\n    throws CorruptIndexException, IOException {\n\n    assert !Thread.holdsLock(writer);\n\n    this.writer = writer;\n\n    initMergeThreadPriority();\n\n    dir = writer.getDirectory();\n\n    // First, quickly run through the newly proposed merges\n    // and add any orthogonal merges (ie a merge not\n    // involving segments already pending to be merged) to\n    // the queue.  If we are way behind on merging, many of\n    // these newly proposed merges will likely already be\n    // registered.\n\n    if (verbose()) {\n      message(\"now merge\");\n      message(\"  index: \" + writer.segString());\n    }\n    \n    // Iterate, pulling from the IndexWriter's queue of\n    // pending merges, until it's empty:\n    while(true) {\n\n      // TODO: we could be careful about which merges to do in\n      // the BG (eg maybe the \"biggest\" ones) vs FG, which\n      // merges to do first (the easiest ones?), etc.\n\n      MergePolicy.OneMerge merge = writer.getNextMerge();\n      if (merge == null) {\n        if (verbose())\n          message(\"  no more merges pending; now return\");\n        return;\n      }\n\n      // We do this w/ the primary thread to keep\n      // deterministic assignment of segment names\n      writer.mergeInit(merge);\n\n      boolean success = false;\n      try {\n        synchronized(this) {\n          final MergeThread merger;\n          while (mergeThreadCount() >= maxThreadCount) {\n            if (verbose())\n              message(\"    too many merge threads running; stalling...\");\n            try {\n              wait();\n            } catch (InterruptedException ie) {\n              throw new ThreadInterruptedException(ie);\n            }\n          }\n\n          if (verbose())\n            message(\"  consider merge \" + merge.segString(dir));\n      \n          assert mergeThreadCount() < maxThreadCount;\n\n          // OK to spawn a new merge thread to handle this\n          // merge:\n          merger = getMergeThread(writer, merge);\n          mergeThreads.add(merger);\n          if (verbose())\n            message(\"    launch new thread [\" + merger.getName() + \"]\");\n\n          merger.start();\n          success = true;\n        }\n      } finally {\n        if (!success) {\n          writer.mergeFinish(merge);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}