{"path":"lucene/facet/src/test/org/apache/lucene/facet/search/TestSearcherTaxonomyManager#test().mjava","commits":[{"id":"77925d097d69ba9a9806554c5afe4779fafa142d","date":1365611122,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestSearcherTaxonomyManager#test().mjava","pathOld":"/dev/null","sourceNew":"  public void test() throws Exception {\n    Directory dir = newDirectory();\n    Directory taxoDir = newDirectory();\n    final IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    final DirectoryTaxonomyWriter tw = new DirectoryTaxonomyWriter(taxoDir);\n    final FacetFields facetFields = new FacetFields(tw);\n    final AtomicBoolean stop = new AtomicBoolean();\n\n    Thread indexer = new Thread() {\n        @Override\n        public void run() {\n          Set<String> seen = new HashSet<String>();\n          List<String> paths = new ArrayList<String>();\n          while (!stop.get()) {\n            Document doc = new Document();\n            List<CategoryPath> docPaths = new ArrayList<CategoryPath>();\n            int numPaths = _TestUtil.nextInt(random(), 1, 5);\n            for(int i=0;i<numPaths;i++) {\n              String path;\n              if (!paths.isEmpty() && random().nextInt(5) != 4) {\n                // Use previous path\n                path = paths.get(random().nextInt(paths.size()));\n              } else {\n                // Create new path\n                path = null;\n                while (true) {\n                  path = _TestUtil.randomRealisticUnicodeString(random());\n                  if (path.length() != 0 && !seen.contains(path) && path.indexOf(FacetIndexingParams.DEFAULT_FACET_DELIM_CHAR) == -1) {\n                    seen.add(path);\n                    paths.add(path);\n                    break;\n                  }\n                }\n              }\n              docPaths.add(new CategoryPath(\"field\", path));\n            }\n            try {\n              facetFields.addFields(doc, docPaths);\n              w.addDocument(doc);\n            } catch (IOException ioe) {\n              throw new RuntimeException(ioe);\n            }\n          }\n        }\n      };\n\n    final SearcherTaxonomyManager mgr = new SearcherTaxonomyManager(w, true, null, tw);\n\n    Thread reopener = new Thread() {\n        @Override\n        public void run() {\n          while(!stop.get()) {\n            try {\n              // Sleep for up to 20 msec:\n              Thread.sleep(random().nextInt(20));\n\n              if (VERBOSE) {\n                System.out.println(\"TEST: reopen\");\n              }\n\n              mgr.maybeRefresh();\n\n              if (VERBOSE) {\n                System.out.println(\"TEST: reopen done\");\n              }\n            } catch (Exception ioe) {\n              throw new RuntimeException(ioe);\n            }\n          }\n        }\n      };\n    reopener.start();\n\n    float runTimeSec = TEST_NIGHTLY ? 10.0f : 2.0f;\n\n    long stopTime = System.currentTimeMillis() + (int) (runTimeSec*1000);\n\n    indexer.start();\n\n    try {\n      while (System.currentTimeMillis() < stopTime) {\n        SearcherAndTaxonomy pair = mgr.acquire();\n        try {\n          //System.out.println(\"search maxOrd=\" + pair.taxonomyReader.getSize());\n          int topN;\n          if (random().nextBoolean()) {\n            topN = _TestUtil.nextInt(random(), 1, 20);\n          } else {\n            topN = Integer.MAX_VALUE;\n          }\n          FacetSearchParams fsp = new FacetSearchParams(new CountFacetRequest(new CategoryPath(\"field\"), topN));\n          FacetsCollector fc = FacetsCollector.create(fsp, pair.searcher.getIndexReader(), pair.taxonomyReader);\n          pair.searcher.search(new MatchAllDocsQuery(), fc);\n          List<FacetResult> results = fc.getFacetResults();\n          FacetResult fr = results.get(0);\n          FacetResultNode root = results.get(0).getFacetResultNode();\n          assertTrue(root.ordinal != 0);\n\n          if (pair.searcher.getIndexReader().numDocs() > 0) { \n            assertTrue(fr.getNumValidDescendants() > 0);\n            assertFalse(root.subResults.isEmpty());\n          }\n          //if (VERBOSE) {\n          //System.out.println(\"TEST: facets=\" + FacetTestUtils.toSimpleString(results.get(0)));\n          //}\n        } finally {\n          mgr.release(pair);\n        }\n      }\n    } finally {\n      stop.set(true);\n      indexer.join();\n      reopener.join();\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: now stop\");\n    }\n\n    IOUtils.close(mgr, tw, w, taxoDir, dir);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a40e027408f3521b64699d5fcf3e43005dc5f402","date":1365618435,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestSearcherTaxonomyManager#test().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestSearcherTaxonomyManager#test().mjava","sourceNew":"  public void test() throws Exception {\n    Directory dir = newDirectory();\n    Directory taxoDir = newDirectory();\n    final IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    final DirectoryTaxonomyWriter tw = new DirectoryTaxonomyWriter(taxoDir);\n    final FacetFields facetFields = new FacetFields(tw);\n    final AtomicBoolean stop = new AtomicBoolean();\n\n    // How many unique facets to index before stopping:\n    final int ordLimit = TEST_NIGHTLY ? 100000 : 6000;\n\n    Thread indexer = new Thread() {\n        @Override\n        public void run() {\n          Set<String> seen = new HashSet<String>();\n          List<String> paths = new ArrayList<String>();\n          while (true) {\n            Document doc = new Document();\n            List<CategoryPath> docPaths = new ArrayList<CategoryPath>();\n            int numPaths = _TestUtil.nextInt(random(), 1, 5);\n            for(int i=0;i<numPaths;i++) {\n              String path;\n              if (!paths.isEmpty() && random().nextInt(5) != 4) {\n                // Use previous path\n                path = paths.get(random().nextInt(paths.size()));\n              } else {\n                // Create new path\n                path = null;\n                while (true) {\n                  path = _TestUtil.randomRealisticUnicodeString(random());\n                  if (path.length() != 0 && !seen.contains(path) && path.indexOf(FacetIndexingParams.DEFAULT_FACET_DELIM_CHAR) == -1) {\n                    seen.add(path);\n                    paths.add(path);\n                    break;\n                  }\n                }\n              }\n              docPaths.add(new CategoryPath(\"field\", path));\n            }\n            try {\n              facetFields.addFields(doc, docPaths);\n              w.addDocument(doc);\n            } catch (IOException ioe) {\n              throw new RuntimeException(ioe);\n            }\n\n            if (tw.getSize() >= ordLimit) {\n              stop.set(true);\n              break;\n            }\n          }\n        }\n      };\n\n    final SearcherTaxonomyManager mgr = new SearcherTaxonomyManager(w, true, null, tw);\n\n    Thread reopener = new Thread() {\n        @Override\n        public void run() {\n          while(!stop.get()) {\n            try {\n              // Sleep for up to 20 msec:\n              Thread.sleep(random().nextInt(20));\n\n              if (VERBOSE) {\n                System.out.println(\"TEST: reopen\");\n              }\n\n              mgr.maybeRefresh();\n\n              if (VERBOSE) {\n                System.out.println(\"TEST: reopen done\");\n              }\n            } catch (Exception ioe) {\n              throw new RuntimeException(ioe);\n            }\n          }\n        }\n      };\n    reopener.start();\n\n    indexer.start();\n\n    try {\n      while (!stop.get()) {\n        SearcherAndTaxonomy pair = mgr.acquire();\n        try {\n          //System.out.println(\"search maxOrd=\" + pair.taxonomyReader.getSize());\n          int topN = _TestUtil.nextInt(random(), 1, 20);\n          CountFacetRequest cfr = new CountFacetRequest(new CategoryPath(\"field\"), topN);\n          FacetSearchParams fsp = new FacetSearchParams(cfr);\n          FacetsCollector fc = FacetsCollector.create(fsp, pair.searcher.getIndexReader(), pair.taxonomyReader);\n          pair.searcher.search(new MatchAllDocsQuery(), fc);\n          List<FacetResult> results = fc.getFacetResults();\n          FacetResult fr = results.get(0);\n          FacetResultNode root = results.get(0).getFacetResultNode();\n          assertTrue(root.ordinal != 0);\n\n          if (pair.searcher.getIndexReader().numDocs() > 0) { \n            //System.out.println(pair.taxonomyReader.getSize());\n            assertTrue(fr.getNumValidDescendants() > 0);\n            assertFalse(root.subResults.isEmpty());\n          }\n\n          //if (VERBOSE) {\n          //System.out.println(\"TEST: facets=\" + FacetTestUtils.toSimpleString(results.get(0)));\n          //}\n        } finally {\n          mgr.release(pair);\n        }\n      }\n    } finally {\n      indexer.join();\n      reopener.join();\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: now stop\");\n    }\n\n    IOUtils.close(mgr, tw, w, taxoDir, dir);\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    Directory dir = newDirectory();\n    Directory taxoDir = newDirectory();\n    final IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    final DirectoryTaxonomyWriter tw = new DirectoryTaxonomyWriter(taxoDir);\n    final FacetFields facetFields = new FacetFields(tw);\n    final AtomicBoolean stop = new AtomicBoolean();\n\n    Thread indexer = new Thread() {\n        @Override\n        public void run() {\n          Set<String> seen = new HashSet<String>();\n          List<String> paths = new ArrayList<String>();\n          while (!stop.get()) {\n            Document doc = new Document();\n            List<CategoryPath> docPaths = new ArrayList<CategoryPath>();\n            int numPaths = _TestUtil.nextInt(random(), 1, 5);\n            for(int i=0;i<numPaths;i++) {\n              String path;\n              if (!paths.isEmpty() && random().nextInt(5) != 4) {\n                // Use previous path\n                path = paths.get(random().nextInt(paths.size()));\n              } else {\n                // Create new path\n                path = null;\n                while (true) {\n                  path = _TestUtil.randomRealisticUnicodeString(random());\n                  if (path.length() != 0 && !seen.contains(path) && path.indexOf(FacetIndexingParams.DEFAULT_FACET_DELIM_CHAR) == -1) {\n                    seen.add(path);\n                    paths.add(path);\n                    break;\n                  }\n                }\n              }\n              docPaths.add(new CategoryPath(\"field\", path));\n            }\n            try {\n              facetFields.addFields(doc, docPaths);\n              w.addDocument(doc);\n            } catch (IOException ioe) {\n              throw new RuntimeException(ioe);\n            }\n          }\n        }\n      };\n\n    final SearcherTaxonomyManager mgr = new SearcherTaxonomyManager(w, true, null, tw);\n\n    Thread reopener = new Thread() {\n        @Override\n        public void run() {\n          while(!stop.get()) {\n            try {\n              // Sleep for up to 20 msec:\n              Thread.sleep(random().nextInt(20));\n\n              if (VERBOSE) {\n                System.out.println(\"TEST: reopen\");\n              }\n\n              mgr.maybeRefresh();\n\n              if (VERBOSE) {\n                System.out.println(\"TEST: reopen done\");\n              }\n            } catch (Exception ioe) {\n              throw new RuntimeException(ioe);\n            }\n          }\n        }\n      };\n    reopener.start();\n\n    float runTimeSec = TEST_NIGHTLY ? 10.0f : 2.0f;\n\n    long stopTime = System.currentTimeMillis() + (int) (runTimeSec*1000);\n\n    indexer.start();\n\n    try {\n      while (System.currentTimeMillis() < stopTime) {\n        SearcherAndTaxonomy pair = mgr.acquire();\n        try {\n          //System.out.println(\"search maxOrd=\" + pair.taxonomyReader.getSize());\n          int topN;\n          if (random().nextBoolean()) {\n            topN = _TestUtil.nextInt(random(), 1, 20);\n          } else {\n            topN = Integer.MAX_VALUE;\n          }\n          FacetSearchParams fsp = new FacetSearchParams(new CountFacetRequest(new CategoryPath(\"field\"), topN));\n          FacetsCollector fc = FacetsCollector.create(fsp, pair.searcher.getIndexReader(), pair.taxonomyReader);\n          pair.searcher.search(new MatchAllDocsQuery(), fc);\n          List<FacetResult> results = fc.getFacetResults();\n          FacetResult fr = results.get(0);\n          FacetResultNode root = results.get(0).getFacetResultNode();\n          assertTrue(root.ordinal != 0);\n\n          if (pair.searcher.getIndexReader().numDocs() > 0) { \n            assertTrue(fr.getNumValidDescendants() > 0);\n            assertFalse(root.subResults.isEmpty());\n          }\n          //if (VERBOSE) {\n          //System.out.println(\"TEST: facets=\" + FacetTestUtils.toSimpleString(results.get(0)));\n          //}\n        } finally {\n          mgr.release(pair);\n        }\n      }\n    } finally {\n      stop.set(true);\n      indexer.join();\n      reopener.join();\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: now stop\");\n    }\n\n    IOUtils.close(mgr, tw, w, taxoDir, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"022bc1461f171336980605053efb4614e6ae851c","date":1365632286,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestSearcherTaxonomyManager#test().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestSearcherTaxonomyManager#test().mjava","sourceNew":"  public void test() throws Exception {\n    Directory dir = newDirectory();\n    Directory taxoDir = newDirectory();\n    final IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    final DirectoryTaxonomyWriter tw = new DirectoryTaxonomyWriter(taxoDir);\n    final FacetFields facetFields = new FacetFields(tw);\n    final AtomicBoolean stop = new AtomicBoolean();\n\n    // How many unique facets to index before stopping:\n    final int ordLimit = TEST_NIGHTLY ? 100000 : 6000;\n\n    Thread indexer = new Thread() {\n        @Override\n        public void run() {\n          try {\n            Set<String> seen = new HashSet<String>();\n            List<String> paths = new ArrayList<String>();\n            while (true) {\n              Document doc = new Document();\n              List<CategoryPath> docPaths = new ArrayList<CategoryPath>();\n              int numPaths = _TestUtil.nextInt(random(), 1, 5);\n              for(int i=0;i<numPaths;i++) {\n                String path;\n                if (!paths.isEmpty() && random().nextInt(5) != 4) {\n                  // Use previous path\n                  path = paths.get(random().nextInt(paths.size()));\n                } else {\n                  // Create new path\n                  path = null;\n                  while (true) {\n                    path = _TestUtil.randomRealisticUnicodeString(random());\n                    if (path.length() != 0 && !seen.contains(path) && path.indexOf(FacetIndexingParams.DEFAULT_FACET_DELIM_CHAR) == -1) {\n                      seen.add(path);\n                      paths.add(path);\n                      break;\n                    }\n                  }\n                }\n                docPaths.add(new CategoryPath(\"field\", path));\n              }\n              try {\n                facetFields.addFields(doc, docPaths);\n                w.addDocument(doc);\n              } catch (IOException ioe) {\n                throw new RuntimeException(ioe);\n              }\n\n              if (tw.getSize() >= ordLimit) {\n                break;\n              }\n            }\n          } finally {\n            stop.set(true);\n          }\n        }\n      };\n\n    final SearcherTaxonomyManager mgr = new SearcherTaxonomyManager(w, true, null, tw);\n\n    Thread reopener = new Thread() {\n        @Override\n        public void run() {\n          while(!stop.get()) {\n            try {\n              // Sleep for up to 20 msec:\n              Thread.sleep(random().nextInt(20));\n\n              if (VERBOSE) {\n                System.out.println(\"TEST: reopen\");\n              }\n\n              mgr.maybeRefresh();\n\n              if (VERBOSE) {\n                System.out.println(\"TEST: reopen done\");\n              }\n            } catch (Exception ioe) {\n              throw new RuntimeException(ioe);\n            }\n          }\n        }\n      };\n    reopener.start();\n\n    indexer.start();\n\n    try {\n      while (!stop.get()) {\n        SearcherAndTaxonomy pair = mgr.acquire();\n        try {\n          //System.out.println(\"search maxOrd=\" + pair.taxonomyReader.getSize());\n          int topN = _TestUtil.nextInt(random(), 1, 20);\n          CountFacetRequest cfr = new CountFacetRequest(new CategoryPath(\"field\"), topN);\n          FacetSearchParams fsp = new FacetSearchParams(cfr);\n          FacetsCollector fc = FacetsCollector.create(fsp, pair.searcher.getIndexReader(), pair.taxonomyReader);\n          pair.searcher.search(new MatchAllDocsQuery(), fc);\n          List<FacetResult> results = fc.getFacetResults();\n          FacetResult fr = results.get(0);\n          FacetResultNode root = results.get(0).getFacetResultNode();\n          assertTrue(root.ordinal != 0);\n\n          if (pair.searcher.getIndexReader().numDocs() > 0) { \n            //System.out.println(pair.taxonomyReader.getSize());\n            assertTrue(fr.getNumValidDescendants() > 0);\n            assertFalse(root.subResults.isEmpty());\n          }\n\n          //if (VERBOSE) {\n          //System.out.println(\"TEST: facets=\" + FacetTestUtils.toSimpleString(results.get(0)));\n          //}\n        } finally {\n          mgr.release(pair);\n        }\n      }\n    } finally {\n      indexer.join();\n      reopener.join();\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: now stop\");\n    }\n\n    IOUtils.close(mgr, tw, w, taxoDir, dir);\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    Directory dir = newDirectory();\n    Directory taxoDir = newDirectory();\n    final IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    final DirectoryTaxonomyWriter tw = new DirectoryTaxonomyWriter(taxoDir);\n    final FacetFields facetFields = new FacetFields(tw);\n    final AtomicBoolean stop = new AtomicBoolean();\n\n    // How many unique facets to index before stopping:\n    final int ordLimit = TEST_NIGHTLY ? 100000 : 6000;\n\n    Thread indexer = new Thread() {\n        @Override\n        public void run() {\n          Set<String> seen = new HashSet<String>();\n          List<String> paths = new ArrayList<String>();\n          while (true) {\n            Document doc = new Document();\n            List<CategoryPath> docPaths = new ArrayList<CategoryPath>();\n            int numPaths = _TestUtil.nextInt(random(), 1, 5);\n            for(int i=0;i<numPaths;i++) {\n              String path;\n              if (!paths.isEmpty() && random().nextInt(5) != 4) {\n                // Use previous path\n                path = paths.get(random().nextInt(paths.size()));\n              } else {\n                // Create new path\n                path = null;\n                while (true) {\n                  path = _TestUtil.randomRealisticUnicodeString(random());\n                  if (path.length() != 0 && !seen.contains(path) && path.indexOf(FacetIndexingParams.DEFAULT_FACET_DELIM_CHAR) == -1) {\n                    seen.add(path);\n                    paths.add(path);\n                    break;\n                  }\n                }\n              }\n              docPaths.add(new CategoryPath(\"field\", path));\n            }\n            try {\n              facetFields.addFields(doc, docPaths);\n              w.addDocument(doc);\n            } catch (IOException ioe) {\n              throw new RuntimeException(ioe);\n            }\n\n            if (tw.getSize() >= ordLimit) {\n              stop.set(true);\n              break;\n            }\n          }\n        }\n      };\n\n    final SearcherTaxonomyManager mgr = new SearcherTaxonomyManager(w, true, null, tw);\n\n    Thread reopener = new Thread() {\n        @Override\n        public void run() {\n          while(!stop.get()) {\n            try {\n              // Sleep for up to 20 msec:\n              Thread.sleep(random().nextInt(20));\n\n              if (VERBOSE) {\n                System.out.println(\"TEST: reopen\");\n              }\n\n              mgr.maybeRefresh();\n\n              if (VERBOSE) {\n                System.out.println(\"TEST: reopen done\");\n              }\n            } catch (Exception ioe) {\n              throw new RuntimeException(ioe);\n            }\n          }\n        }\n      };\n    reopener.start();\n\n    indexer.start();\n\n    try {\n      while (!stop.get()) {\n        SearcherAndTaxonomy pair = mgr.acquire();\n        try {\n          //System.out.println(\"search maxOrd=\" + pair.taxonomyReader.getSize());\n          int topN = _TestUtil.nextInt(random(), 1, 20);\n          CountFacetRequest cfr = new CountFacetRequest(new CategoryPath(\"field\"), topN);\n          FacetSearchParams fsp = new FacetSearchParams(cfr);\n          FacetsCollector fc = FacetsCollector.create(fsp, pair.searcher.getIndexReader(), pair.taxonomyReader);\n          pair.searcher.search(new MatchAllDocsQuery(), fc);\n          List<FacetResult> results = fc.getFacetResults();\n          FacetResult fr = results.get(0);\n          FacetResultNode root = results.get(0).getFacetResultNode();\n          assertTrue(root.ordinal != 0);\n\n          if (pair.searcher.getIndexReader().numDocs() > 0) { \n            //System.out.println(pair.taxonomyReader.getSize());\n            assertTrue(fr.getNumValidDescendants() > 0);\n            assertFalse(root.subResults.isEmpty());\n          }\n\n          //if (VERBOSE) {\n          //System.out.println(\"TEST: facets=\" + FacetTestUtils.toSimpleString(results.get(0)));\n          //}\n        } finally {\n          mgr.release(pair);\n        }\n      }\n    } finally {\n      indexer.join();\n      reopener.join();\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: now stop\");\n    }\n\n    IOUtils.close(mgr, tw, w, taxoDir, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c190847801a50f4dd20fd639bdc29b54ea3b288b","date":1384461522,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestSearcherTaxonomyManager#test().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestSearcherTaxonomyManager#test().mjava","sourceNew":"  public void test() throws Exception {\n    Directory dir = newDirectory();\n    Directory taxoDir = newDirectory();\n    final IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    final DirectoryTaxonomyWriter tw = new DirectoryTaxonomyWriter(taxoDir);\n    final FacetFields facetFields = new FacetFields(tw);\n    final AtomicBoolean stop = new AtomicBoolean();\n\n    // How many unique facets to index before stopping:\n    final int ordLimit = TEST_NIGHTLY ? 100000 : 6000;\n\n    Thread indexer = new Thread() {\n        @Override\n        public void run() {\n          try {\n            Set<String> seen = new HashSet<String>();\n            List<String> paths = new ArrayList<String>();\n            while (true) {\n              Document doc = new Document();\n              List<FacetLabel> docPaths = new ArrayList<FacetLabel>();\n              int numPaths = _TestUtil.nextInt(random(), 1, 5);\n              for(int i=0;i<numPaths;i++) {\n                String path;\n                if (!paths.isEmpty() && random().nextInt(5) != 4) {\n                  // Use previous path\n                  path = paths.get(random().nextInt(paths.size()));\n                } else {\n                  // Create new path\n                  path = null;\n                  while (true) {\n                    path = _TestUtil.randomRealisticUnicodeString(random());\n                    if (path.length() != 0 && !seen.contains(path) && path.indexOf(FacetIndexingParams.DEFAULT_FACET_DELIM_CHAR) == -1) {\n                      seen.add(path);\n                      paths.add(path);\n                      break;\n                    }\n                  }\n                }\n                docPaths.add(new FacetLabel(\"field\", path));\n              }\n              try {\n                facetFields.addFields(doc, docPaths);\n                w.addDocument(doc);\n              } catch (IOException ioe) {\n                throw new RuntimeException(ioe);\n              }\n\n              if (tw.getSize() >= ordLimit) {\n                break;\n              }\n            }\n          } finally {\n            stop.set(true);\n          }\n        }\n      };\n\n    final SearcherTaxonomyManager mgr = new SearcherTaxonomyManager(w, true, null, tw);\n\n    Thread reopener = new Thread() {\n        @Override\n        public void run() {\n          while(!stop.get()) {\n            try {\n              // Sleep for up to 20 msec:\n              Thread.sleep(random().nextInt(20));\n\n              if (VERBOSE) {\n                System.out.println(\"TEST: reopen\");\n              }\n\n              mgr.maybeRefresh();\n\n              if (VERBOSE) {\n                System.out.println(\"TEST: reopen done\");\n              }\n            } catch (Exception ioe) {\n              throw new RuntimeException(ioe);\n            }\n          }\n        }\n      };\n    reopener.start();\n\n    indexer.start();\n\n    try {\n      while (!stop.get()) {\n        SearcherAndTaxonomy pair = mgr.acquire();\n        try {\n          //System.out.println(\"search maxOrd=\" + pair.taxonomyReader.getSize());\n          int topN = _TestUtil.nextInt(random(), 1, 20);\n          CountFacetRequest cfr = new CountFacetRequest(new FacetLabel(\"field\"), topN);\n          FacetSearchParams fsp = new FacetSearchParams(cfr);\n          FacetsCollector fc = FacetsCollector.create(fsp, pair.searcher.getIndexReader(), pair.taxonomyReader);\n          pair.searcher.search(new MatchAllDocsQuery(), fc);\n          List<FacetResult> results = fc.getFacetResults();\n          FacetResult fr = results.get(0);\n          FacetResultNode root = results.get(0).getFacetResultNode();\n          assertTrue(root.ordinal != 0);\n\n          if (pair.searcher.getIndexReader().numDocs() > 0) { \n            //System.out.println(pair.taxonomyReader.getSize());\n            assertTrue(fr.getNumValidDescendants() > 0);\n            assertFalse(root.subResults.isEmpty());\n          }\n\n          //if (VERBOSE) {\n          //System.out.println(\"TEST: facets=\" + FacetTestUtils.toSimpleString(results.get(0)));\n          //}\n        } finally {\n          mgr.release(pair);\n        }\n      }\n    } finally {\n      indexer.join();\n      reopener.join();\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: now stop\");\n    }\n\n    IOUtils.close(mgr, tw, w, taxoDir, dir);\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    Directory dir = newDirectory();\n    Directory taxoDir = newDirectory();\n    final IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    final DirectoryTaxonomyWriter tw = new DirectoryTaxonomyWriter(taxoDir);\n    final FacetFields facetFields = new FacetFields(tw);\n    final AtomicBoolean stop = new AtomicBoolean();\n\n    // How many unique facets to index before stopping:\n    final int ordLimit = TEST_NIGHTLY ? 100000 : 6000;\n\n    Thread indexer = new Thread() {\n        @Override\n        public void run() {\n          try {\n            Set<String> seen = new HashSet<String>();\n            List<String> paths = new ArrayList<String>();\n            while (true) {\n              Document doc = new Document();\n              List<CategoryPath> docPaths = new ArrayList<CategoryPath>();\n              int numPaths = _TestUtil.nextInt(random(), 1, 5);\n              for(int i=0;i<numPaths;i++) {\n                String path;\n                if (!paths.isEmpty() && random().nextInt(5) != 4) {\n                  // Use previous path\n                  path = paths.get(random().nextInt(paths.size()));\n                } else {\n                  // Create new path\n                  path = null;\n                  while (true) {\n                    path = _TestUtil.randomRealisticUnicodeString(random());\n                    if (path.length() != 0 && !seen.contains(path) && path.indexOf(FacetIndexingParams.DEFAULT_FACET_DELIM_CHAR) == -1) {\n                      seen.add(path);\n                      paths.add(path);\n                      break;\n                    }\n                  }\n                }\n                docPaths.add(new CategoryPath(\"field\", path));\n              }\n              try {\n                facetFields.addFields(doc, docPaths);\n                w.addDocument(doc);\n              } catch (IOException ioe) {\n                throw new RuntimeException(ioe);\n              }\n\n              if (tw.getSize() >= ordLimit) {\n                break;\n              }\n            }\n          } finally {\n            stop.set(true);\n          }\n        }\n      };\n\n    final SearcherTaxonomyManager mgr = new SearcherTaxonomyManager(w, true, null, tw);\n\n    Thread reopener = new Thread() {\n        @Override\n        public void run() {\n          while(!stop.get()) {\n            try {\n              // Sleep for up to 20 msec:\n              Thread.sleep(random().nextInt(20));\n\n              if (VERBOSE) {\n                System.out.println(\"TEST: reopen\");\n              }\n\n              mgr.maybeRefresh();\n\n              if (VERBOSE) {\n                System.out.println(\"TEST: reopen done\");\n              }\n            } catch (Exception ioe) {\n              throw new RuntimeException(ioe);\n            }\n          }\n        }\n      };\n    reopener.start();\n\n    indexer.start();\n\n    try {\n      while (!stop.get()) {\n        SearcherAndTaxonomy pair = mgr.acquire();\n        try {\n          //System.out.println(\"search maxOrd=\" + pair.taxonomyReader.getSize());\n          int topN = _TestUtil.nextInt(random(), 1, 20);\n          CountFacetRequest cfr = new CountFacetRequest(new CategoryPath(\"field\"), topN);\n          FacetSearchParams fsp = new FacetSearchParams(cfr);\n          FacetsCollector fc = FacetsCollector.create(fsp, pair.searcher.getIndexReader(), pair.taxonomyReader);\n          pair.searcher.search(new MatchAllDocsQuery(), fc);\n          List<FacetResult> results = fc.getFacetResults();\n          FacetResult fr = results.get(0);\n          FacetResultNode root = results.get(0).getFacetResultNode();\n          assertTrue(root.ordinal != 0);\n\n          if (pair.searcher.getIndexReader().numDocs() > 0) { \n            //System.out.println(pair.taxonomyReader.getSize());\n            assertTrue(fr.getNumValidDescendants() > 0);\n            assertFalse(root.subResults.isEmpty());\n          }\n\n          //if (VERBOSE) {\n          //System.out.println(\"TEST: facets=\" + FacetTestUtils.toSimpleString(results.get(0)));\n          //}\n        } finally {\n          mgr.release(pair);\n        }\n      }\n    } finally {\n      indexer.join();\n      reopener.join();\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: now stop\");\n    }\n\n    IOUtils.close(mgr, tw, w, taxoDir, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ca39562b2d7687143fdb601d5de1b8f7b778f1db","date":1385299806,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/simple/TestSearcherTaxonomyManager#test().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestSearcherTaxonomyManager#test().mjava","sourceNew":"  public void test() throws Exception {\n    Directory dir = newDirectory();\n    Directory taxoDir = newDirectory();\n    final IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    final DirectoryTaxonomyWriter tw = new DirectoryTaxonomyWriter(taxoDir);\n    final FacetsConfig config = new FacetsConfig(tw);\n    config.setMultiValued(\"field\", true);\n    final AtomicBoolean stop = new AtomicBoolean();\n\n    // How many unique facets to index before stopping:\n    final int ordLimit = TEST_NIGHTLY ? 100000 : 6000;\n\n    Thread indexer = new Thread() {\n        @Override\n        public void run() {\n          try {\n            Set<String> seen = new HashSet<String>();\n            List<String> paths = new ArrayList<String>();\n            while (true) {\n              Document doc = new Document();\n              List<FacetLabel> docPaths = new ArrayList<FacetLabel>();\n              int numPaths = _TestUtil.nextInt(random(), 1, 5);\n              for(int i=0;i<numPaths;i++) {\n                String path;\n                if (!paths.isEmpty() && random().nextInt(5) != 4) {\n                  // Use previous path\n                  path = paths.get(random().nextInt(paths.size()));\n                } else {\n                  // Create new path\n                  path = null;\n                  while (true) {\n                    path = _TestUtil.randomRealisticUnicodeString(random());\n                    if (path.length() != 0 && !seen.contains(path) && path.indexOf(FacetIndexingParams.DEFAULT_FACET_DELIM_CHAR) == -1) {\n                      seen.add(path);\n                      paths.add(path);\n                      break;\n                    }\n                  }\n                }\n                doc.add(new FacetField(\"field\", path));\n              }\n              try {\n                w.addDocument(config.build(doc));\n              } catch (IOException ioe) {\n                throw new RuntimeException(ioe);\n              }\n\n              if (tw.getSize() >= ordLimit) {\n                break;\n              }\n            }\n          } finally {\n            stop.set(true);\n          }\n        }\n      };\n\n    final SearcherTaxonomyManager mgr = new SearcherTaxonomyManager(w, true, null, tw);\n\n    Thread reopener = new Thread() {\n        @Override\n        public void run() {\n          while(!stop.get()) {\n            try {\n              // Sleep for up to 20 msec:\n              Thread.sleep(random().nextInt(20));\n\n              if (VERBOSE) {\n                System.out.println(\"TEST: reopen\");\n              }\n\n              mgr.maybeRefresh();\n\n              if (VERBOSE) {\n                System.out.println(\"TEST: reopen done\");\n              }\n            } catch (Exception ioe) {\n              throw new RuntimeException(ioe);\n            }\n          }\n        }\n      };\n    reopener.start();\n\n    indexer.start();\n\n    try {\n      while (!stop.get()) {\n        SearcherAndTaxonomy pair = mgr.acquire();\n        try {\n          //System.out.println(\"search maxOrd=\" + pair.taxonomyReader.getSize());\n          int topN = _TestUtil.nextInt(random(), 1, 20);\n          \n          SimpleFacetsCollector sfc = new SimpleFacetsCollector();\n          pair.searcher.search(new MatchAllDocsQuery(), sfc);\n          Facets facets = getTaxonomyFacetCounts(pair.taxonomyReader, config, sfc);\n          SimpleFacetResult result = facets.getTopChildren(10, \"field\");\n          if (pair.searcher.getIndexReader().numDocs() > 0) { \n            //System.out.println(pair.taxonomyReader.getSize());\n            assertTrue(result.childCount > 0);\n            assertTrue(result.labelValues.length > 0);\n          }\n\n          //if (VERBOSE) {\n          //System.out.println(\"TEST: facets=\" + FacetTestUtils.toSimpleString(results.get(0)));\n          //}\n        } finally {\n          mgr.release(pair);\n        }\n      }\n    } finally {\n      indexer.join();\n      reopener.join();\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: now stop\");\n    }\n\n    IOUtils.close(mgr, tw, w, taxoDir, dir);\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    Directory dir = newDirectory();\n    Directory taxoDir = newDirectory();\n    final IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    final DirectoryTaxonomyWriter tw = new DirectoryTaxonomyWriter(taxoDir);\n    final FacetFields facetFields = new FacetFields(tw);\n    final AtomicBoolean stop = new AtomicBoolean();\n\n    // How many unique facets to index before stopping:\n    final int ordLimit = TEST_NIGHTLY ? 100000 : 6000;\n\n    Thread indexer = new Thread() {\n        @Override\n        public void run() {\n          try {\n            Set<String> seen = new HashSet<String>();\n            List<String> paths = new ArrayList<String>();\n            while (true) {\n              Document doc = new Document();\n              List<FacetLabel> docPaths = new ArrayList<FacetLabel>();\n              int numPaths = _TestUtil.nextInt(random(), 1, 5);\n              for(int i=0;i<numPaths;i++) {\n                String path;\n                if (!paths.isEmpty() && random().nextInt(5) != 4) {\n                  // Use previous path\n                  path = paths.get(random().nextInt(paths.size()));\n                } else {\n                  // Create new path\n                  path = null;\n                  while (true) {\n                    path = _TestUtil.randomRealisticUnicodeString(random());\n                    if (path.length() != 0 && !seen.contains(path) && path.indexOf(FacetIndexingParams.DEFAULT_FACET_DELIM_CHAR) == -1) {\n                      seen.add(path);\n                      paths.add(path);\n                      break;\n                    }\n                  }\n                }\n                docPaths.add(new FacetLabel(\"field\", path));\n              }\n              try {\n                facetFields.addFields(doc, docPaths);\n                w.addDocument(doc);\n              } catch (IOException ioe) {\n                throw new RuntimeException(ioe);\n              }\n\n              if (tw.getSize() >= ordLimit) {\n                break;\n              }\n            }\n          } finally {\n            stop.set(true);\n          }\n        }\n      };\n\n    final SearcherTaxonomyManager mgr = new SearcherTaxonomyManager(w, true, null, tw);\n\n    Thread reopener = new Thread() {\n        @Override\n        public void run() {\n          while(!stop.get()) {\n            try {\n              // Sleep for up to 20 msec:\n              Thread.sleep(random().nextInt(20));\n\n              if (VERBOSE) {\n                System.out.println(\"TEST: reopen\");\n              }\n\n              mgr.maybeRefresh();\n\n              if (VERBOSE) {\n                System.out.println(\"TEST: reopen done\");\n              }\n            } catch (Exception ioe) {\n              throw new RuntimeException(ioe);\n            }\n          }\n        }\n      };\n    reopener.start();\n\n    indexer.start();\n\n    try {\n      while (!stop.get()) {\n        SearcherAndTaxonomy pair = mgr.acquire();\n        try {\n          //System.out.println(\"search maxOrd=\" + pair.taxonomyReader.getSize());\n          int topN = _TestUtil.nextInt(random(), 1, 20);\n          CountFacetRequest cfr = new CountFacetRequest(new FacetLabel(\"field\"), topN);\n          FacetSearchParams fsp = new FacetSearchParams(cfr);\n          FacetsCollector fc = FacetsCollector.create(fsp, pair.searcher.getIndexReader(), pair.taxonomyReader);\n          pair.searcher.search(new MatchAllDocsQuery(), fc);\n          List<FacetResult> results = fc.getFacetResults();\n          FacetResult fr = results.get(0);\n          FacetResultNode root = results.get(0).getFacetResultNode();\n          assertTrue(root.ordinal != 0);\n\n          if (pair.searcher.getIndexReader().numDocs() > 0) { \n            //System.out.println(pair.taxonomyReader.getSize());\n            assertTrue(fr.getNumValidDescendants() > 0);\n            assertFalse(root.subResults.isEmpty());\n          }\n\n          //if (VERBOSE) {\n          //System.out.println(\"TEST: facets=\" + FacetTestUtils.toSimpleString(results.get(0)));\n          //}\n        } finally {\n          mgr.release(pair);\n        }\n      }\n    } finally {\n      indexer.join();\n      reopener.join();\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: now stop\");\n    }\n\n    IOUtils.close(mgr, tw, w, taxoDir, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestSearcherTaxonomyManager#test().mjava","sourceNew":null,"sourceOld":"  public void test() throws Exception {\n    Directory dir = newDirectory();\n    Directory taxoDir = newDirectory();\n    final IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    final DirectoryTaxonomyWriter tw = new DirectoryTaxonomyWriter(taxoDir);\n    final FacetFields facetFields = new FacetFields(tw);\n    final AtomicBoolean stop = new AtomicBoolean();\n\n    // How many unique facets to index before stopping:\n    final int ordLimit = TEST_NIGHTLY ? 100000 : 6000;\n\n    Thread indexer = new Thread() {\n        @Override\n        public void run() {\n          try {\n            Set<String> seen = new HashSet<String>();\n            List<String> paths = new ArrayList<String>();\n            while (true) {\n              Document doc = new Document();\n              List<CategoryPath> docPaths = new ArrayList<CategoryPath>();\n              int numPaths = _TestUtil.nextInt(random(), 1, 5);\n              for(int i=0;i<numPaths;i++) {\n                String path;\n                if (!paths.isEmpty() && random().nextInt(5) != 4) {\n                  // Use previous path\n                  path = paths.get(random().nextInt(paths.size()));\n                } else {\n                  // Create new path\n                  path = null;\n                  while (true) {\n                    path = _TestUtil.randomRealisticUnicodeString(random());\n                    if (path.length() != 0 && !seen.contains(path) && path.indexOf(FacetIndexingParams.DEFAULT_FACET_DELIM_CHAR) == -1) {\n                      seen.add(path);\n                      paths.add(path);\n                      break;\n                    }\n                  }\n                }\n                docPaths.add(new CategoryPath(\"field\", path));\n              }\n              try {\n                facetFields.addFields(doc, docPaths);\n                w.addDocument(doc);\n              } catch (IOException ioe) {\n                throw new RuntimeException(ioe);\n              }\n\n              if (tw.getSize() >= ordLimit) {\n                break;\n              }\n            }\n          } finally {\n            stop.set(true);\n          }\n        }\n      };\n\n    final SearcherTaxonomyManager mgr = new SearcherTaxonomyManager(w, true, null, tw);\n\n    Thread reopener = new Thread() {\n        @Override\n        public void run() {\n          while(!stop.get()) {\n            try {\n              // Sleep for up to 20 msec:\n              Thread.sleep(random().nextInt(20));\n\n              if (VERBOSE) {\n                System.out.println(\"TEST: reopen\");\n              }\n\n              mgr.maybeRefresh();\n\n              if (VERBOSE) {\n                System.out.println(\"TEST: reopen done\");\n              }\n            } catch (Exception ioe) {\n              throw new RuntimeException(ioe);\n            }\n          }\n        }\n      };\n    reopener.start();\n\n    indexer.start();\n\n    try {\n      while (!stop.get()) {\n        SearcherAndTaxonomy pair = mgr.acquire();\n        try {\n          //System.out.println(\"search maxOrd=\" + pair.taxonomyReader.getSize());\n          int topN = _TestUtil.nextInt(random(), 1, 20);\n          CountFacetRequest cfr = new CountFacetRequest(new CategoryPath(\"field\"), topN);\n          FacetSearchParams fsp = new FacetSearchParams(cfr);\n          FacetsCollector fc = FacetsCollector.create(fsp, pair.searcher.getIndexReader(), pair.taxonomyReader);\n          pair.searcher.search(new MatchAllDocsQuery(), fc);\n          List<FacetResult> results = fc.getFacetResults();\n          FacetResult fr = results.get(0);\n          FacetResultNode root = results.get(0).getFacetResultNode();\n          assertTrue(root.ordinal != 0);\n\n          if (pair.searcher.getIndexReader().numDocs() > 0) { \n            //System.out.println(pair.taxonomyReader.getSize());\n            assertTrue(fr.getNumValidDescendants() > 0);\n            assertFalse(root.subResults.isEmpty());\n          }\n\n          //if (VERBOSE) {\n          //System.out.println(\"TEST: facets=\" + FacetTestUtils.toSimpleString(results.get(0)));\n          //}\n        } finally {\n          mgr.release(pair);\n        }\n      }\n    } finally {\n      indexer.join();\n      reopener.join();\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: now stop\");\n    }\n\n    IOUtils.close(mgr, tw, w, taxoDir, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"77925d097d69ba9a9806554c5afe4779fafa142d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"022bc1461f171336980605053efb4614e6ae851c":["a40e027408f3521b64699d5fcf3e43005dc5f402"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a40e027408f3521b64699d5fcf3e43005dc5f402":["77925d097d69ba9a9806554c5afe4779fafa142d"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["022bc1461f171336980605053efb4614e6ae851c","ca39562b2d7687143fdb601d5de1b8f7b778f1db"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"ca39562b2d7687143fdb601d5de1b8f7b778f1db":["c190847801a50f4dd20fd639bdc29b54ea3b288b"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["022bc1461f171336980605053efb4614e6ae851c"]},"commit2Childs":{"77925d097d69ba9a9806554c5afe4779fafa142d":["a40e027408f3521b64699d5fcf3e43005dc5f402"],"022bc1461f171336980605053efb4614e6ae851c":["3cc728b07df73b197e6d940d27f9b08b63918f13","c190847801a50f4dd20fd639bdc29b54ea3b288b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["77925d097d69ba9a9806554c5afe4779fafa142d"],"a40e027408f3521b64699d5fcf3e43005dc5f402":["022bc1461f171336980605053efb4614e6ae851c"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ca39562b2d7687143fdb601d5de1b8f7b778f1db":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["ca39562b2d7687143fdb601d5de1b8f7b778f1db"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}