{"path":"modules/analysis/common/src/java/org/apache/lucene/analysis/charfilter/HTMLStripCharFilter#readComment(boolean).mjava","commits":[{"id":"0f080986da691a3bba7b757f43ab72cdc82b57ce","date":1273069619,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/charfilter/HTMLStripCharFilter#readComment(boolean).mjava","pathOld":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/charfilter/HTMLStripCharFilter#readComment(boolean).mjava","sourceNew":"  // tries to read comments the way browsers do, not\n  // strictly by the standards.\n  //\n  // GRRRR.  it turns out that in the wild, a <script> can have a HTML comment\n  // that contains a script that contains a quoted comment.\n  // <script><!-- document.write(\"<!--embedded comment-->\") --></script>\n  //\n  private int readComment(boolean inScript) throws IOException {\n    // at this point \"<!\" has  been read\n    int ch = next();\n      if (ch!='-') {\n      // not a comment\n      push(ch);\n      return MISMATCH;\n    }\n\n    ch = next();\n      if (ch!='-') {\n      // not a comment\n      push(ch);\n      push('-');\n      return MISMATCH;\n    }\n    /*two extra calls to next() here, so make sure we don't read past our mark*/\n    while ((numRead - lastMark) < safeReadAheadLimit -3 ) {\n      ch = next();\n      if (ch<0) return MISMATCH;\n      if (ch=='-') {\n        ch = next();\n        if (ch<0) return MISMATCH;\n        if (ch!='-') {\n          push(ch);\n          continue;\n        }\n\n        ch = next();\n        if (ch<0) return MISMATCH;\n        if (ch!='>') {\n          push(ch);\n          push('-');\n          continue;\n        }\n\n        return MATCH;\n      } else if ((ch=='\\'' || ch=='\"') && inScript) {\n        push(ch);\n        int ret=readScriptString();\n        // if this wasn't a string, there's not much we can do\n        // at this point without having a stack of stream states in\n        // order to \"undo\" just the latest.\n      } else if (ch=='<') {\n        eatSSI();\n      }\n\n    }\n    return MISMATCH;\n\n  }\n\n","sourceOld":"  // tries to read comments the way browsers do, not\n  // strictly by the standards.\n  //\n  // GRRRR.  it turns out that in the wild, a <script> can have a HTML comment\n  // that contains a script that contains a quoted comment.\n  // <script><!-- document.write(\"<!--embedded comment-->\") --></script>\n  //\n  private int readComment(boolean inScript) throws IOException {\n    // at this point \"<!\" has  been read\n    int ch = next();\n      if (ch!='-') {\n      // not a comment\n      push(ch);\n      return MISMATCH;\n    }\n\n    ch = next();\n      if (ch!='-') {\n      // not a comment\n      push(ch);\n      push('-');\n      return MISMATCH;\n    }\n    /*two extra calls to next() here, so make sure we don't read past our mark*/\n    while ((numRead - lastMark) < safeReadAheadLimit -3 ) {\n      ch = next();\n      if (ch<0) return MISMATCH;\n      if (ch=='-') {\n        ch = next();\n        if (ch<0) return MISMATCH;\n        if (ch!='-') {\n          push(ch);\n          continue;\n        }\n\n        ch = next();\n        if (ch<0) return MISMATCH;\n        if (ch!='>') {\n          push(ch);\n          push('-');\n          continue;\n        }\n\n        return MATCH;\n      } else if ((ch=='\\'' || ch=='\"') && inScript) {\n        push(ch);\n        int ret=readScriptString();\n        // if this wasn't a string, there's not much we can do\n        // at this point without having a stack of stream states in\n        // order to \"undo\" just the latest.\n      } else if (ch=='<') {\n        eatSSI();\n      }\n\n    }\n    return MISMATCH;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3a908bacd530957eaa6d2dfebdd534afd9ac60e","date":1327209646,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/analysis/LegacyHTMLStripCharFilter#readComment(boolean).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/charfilter/HTMLStripCharFilter#readComment(boolean).mjava","sourceNew":"  // tries to read comments the way browsers do, not\n  // strictly by the standards.\n  //\n  // GRRRR.  it turns out that in the wild, a <script> can have a HTML comment\n  // that contains a script that contains a quoted comment.\n  // <script><!-- document.write(\"<!--embedded comment-->\") --></script>\n  //\n  private int readComment(boolean inScript) throws IOException {\n    // at this point \"<!\" has  been read\n    int ch = next();\n      if (ch!='-') {\n      // not a comment\n      push(ch);\n      return MISMATCH;\n    }\n\n    ch = next();\n      if (ch!='-') {\n      // not a comment\n      push(ch);\n      push('-');\n      return MISMATCH;\n    }\n    /*two extra calls to next() here, so make sure we don't read past our mark*/\n    while ((numRead - lastMark) < safeReadAheadLimit -3 ) {\n      ch = next();\n      if (ch<0) return MISMATCH;\n      if (ch=='-') {\n        ch = next();\n        if (ch<0) return MISMATCH;\n        if (ch!='-') {\n          push(ch);\n          continue;\n        }\n\n        ch = next();\n        if (ch<0) return MISMATCH;\n        if (ch!='>') {\n          push(ch);\n          push('-');\n          continue;\n        }\n\n        return MATCH;\n      } else if ((ch=='\\'' || ch=='\"') && inScript) {\n        push(ch);\n        int ret=readScriptString();\n        // if this wasn't a string, there's not much we can do\n        // at this point without having a stack of stream states in\n        // order to \"undo\" just the latest.\n      } else if (ch=='<') {\n        eatSSI();\n      }\n\n    }\n    return MISMATCH;\n\n  }\n\n","sourceOld":"  // tries to read comments the way browsers do, not\n  // strictly by the standards.\n  //\n  // GRRRR.  it turns out that in the wild, a <script> can have a HTML comment\n  // that contains a script that contains a quoted comment.\n  // <script><!-- document.write(\"<!--embedded comment-->\") --></script>\n  //\n  private int readComment(boolean inScript) throws IOException {\n    // at this point \"<!\" has  been read\n    int ch = next();\n      if (ch!='-') {\n      // not a comment\n      push(ch);\n      return MISMATCH;\n    }\n\n    ch = next();\n      if (ch!='-') {\n      // not a comment\n      push(ch);\n      push('-');\n      return MISMATCH;\n    }\n    /*two extra calls to next() here, so make sure we don't read past our mark*/\n    while ((numRead - lastMark) < safeReadAheadLimit -3 ) {\n      ch = next();\n      if (ch<0) return MISMATCH;\n      if (ch=='-') {\n        ch = next();\n        if (ch<0) return MISMATCH;\n        if (ch!='-') {\n          push(ch);\n          continue;\n        }\n\n        ch = next();\n        if (ch<0) return MISMATCH;\n        if (ch!='>') {\n          push(ch);\n          push('-');\n          continue;\n        }\n\n        return MATCH;\n      } else if ((ch=='\\'' || ch=='\"') && inScript) {\n        push(ch);\n        int ret=readScriptString();\n        // if this wasn't a string, there's not much we can do\n        // at this point without having a stack of stream states in\n        // order to \"undo\" just the latest.\n      } else if (ch=='<') {\n        eatSSI();\n      }\n\n    }\n    return MISMATCH;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"579dc30b5d3235c34cda518b2b6018d71a61879c","date":1327235122,"type":5,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/analysis/LegacyHTMLStripCharFilter#readComment(boolean).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/charfilter/HTMLStripCharFilter#readComment(boolean).mjava","sourceNew":"  // tries to read comments the way browsers do, not\n  // strictly by the standards.\n  //\n  // GRRRR.  it turns out that in the wild, a <script> can have a HTML comment\n  // that contains a script that contains a quoted comment.\n  // <script><!-- document.write(\"<!--embedded comment-->\") --></script>\n  //\n  private int readComment(boolean inScript) throws IOException {\n    // at this point \"<!\" has  been read\n    int ch = next();\n      if (ch!='-') {\n      // not a comment\n      push(ch);\n      return MISMATCH;\n    }\n\n    ch = next();\n      if (ch!='-') {\n      // not a comment\n      push(ch);\n      push('-');\n      return MISMATCH;\n    }\n    /*two extra calls to next() here, so make sure we don't read past our mark*/\n    while ((numRead - lastMark) < safeReadAheadLimit -3 ) {\n      ch = next();\n      if (ch<0) return MISMATCH;\n      if (ch=='-') {\n        ch = next();\n        if (ch<0) return MISMATCH;\n        if (ch!='-') {\n          push(ch);\n          continue;\n        }\n\n        ch = next();\n        if (ch<0) return MISMATCH;\n        if (ch!='>') {\n          push(ch);\n          push('-');\n          continue;\n        }\n\n        return MATCH;\n      } else if ((ch=='\\'' || ch=='\"') && inScript) {\n        push(ch);\n        int ret=readScriptString();\n        // if this wasn't a string, there's not much we can do\n        // at this point without having a stack of stream states in\n        // order to \"undo\" just the latest.\n      } else if (ch=='<') {\n        eatSSI();\n      }\n\n    }\n    return MISMATCH;\n\n  }\n\n","sourceOld":"  // tries to read comments the way browsers do, not\n  // strictly by the standards.\n  //\n  // GRRRR.  it turns out that in the wild, a <script> can have a HTML comment\n  // that contains a script that contains a quoted comment.\n  // <script><!-- document.write(\"<!--embedded comment-->\") --></script>\n  //\n  private int readComment(boolean inScript) throws IOException {\n    // at this point \"<!\" has  been read\n    int ch = next();\n      if (ch!='-') {\n      // not a comment\n      push(ch);\n      return MISMATCH;\n    }\n\n    ch = next();\n      if (ch!='-') {\n      // not a comment\n      push(ch);\n      push('-');\n      return MISMATCH;\n    }\n    /*two extra calls to next() here, so make sure we don't read past our mark*/\n    while ((numRead - lastMark) < safeReadAheadLimit -3 ) {\n      ch = next();\n      if (ch<0) return MISMATCH;\n      if (ch=='-') {\n        ch = next();\n        if (ch<0) return MISMATCH;\n        if (ch!='-') {\n          push(ch);\n          continue;\n        }\n\n        ch = next();\n        if (ch<0) return MISMATCH;\n        if (ch!='>') {\n          push(ch);\n          push('-');\n          continue;\n        }\n\n        return MATCH;\n      } else if ((ch=='\\'' || ch=='\"') && inScript) {\n        push(ch);\n        int ret=readScriptString();\n        // if this wasn't a string, there's not much we can do\n        // at this point without having a stack of stream states in\n        // order to \"undo\" just the latest.\n      } else if (ch=='<') {\n        eatSSI();\n      }\n\n    }\n    return MISMATCH;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/analysis/LegacyHTMLStripCharFilter#readComment(boolean).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/charfilter/HTMLStripCharFilter#readComment(boolean).mjava","sourceNew":"  // tries to read comments the way browsers do, not\n  // strictly by the standards.\n  //\n  // GRRRR.  it turns out that in the wild, a <script> can have a HTML comment\n  // that contains a script that contains a quoted comment.\n  // <script><!-- document.write(\"<!--embedded comment-->\") --></script>\n  //\n  private int readComment(boolean inScript) throws IOException {\n    // at this point \"<!\" has  been read\n    int ch = next();\n      if (ch!='-') {\n      // not a comment\n      push(ch);\n      return MISMATCH;\n    }\n\n    ch = next();\n      if (ch!='-') {\n      // not a comment\n      push(ch);\n      push('-');\n      return MISMATCH;\n    }\n    /*two extra calls to next() here, so make sure we don't read past our mark*/\n    while ((numRead - lastMark) < safeReadAheadLimit -3 ) {\n      ch = next();\n      if (ch<0) return MISMATCH;\n      if (ch=='-') {\n        ch = next();\n        if (ch<0) return MISMATCH;\n        if (ch!='-') {\n          push(ch);\n          continue;\n        }\n\n        ch = next();\n        if (ch<0) return MISMATCH;\n        if (ch!='>') {\n          push(ch);\n          push('-');\n          continue;\n        }\n\n        return MATCH;\n      } else if ((ch=='\\'' || ch=='\"') && inScript) {\n        push(ch);\n        int ret=readScriptString();\n        // if this wasn't a string, there's not much we can do\n        // at this point without having a stack of stream states in\n        // order to \"undo\" just the latest.\n      } else if (ch=='<') {\n        eatSSI();\n      }\n\n    }\n    return MISMATCH;\n\n  }\n\n","sourceOld":"  // tries to read comments the way browsers do, not\n  // strictly by the standards.\n  //\n  // GRRRR.  it turns out that in the wild, a <script> can have a HTML comment\n  // that contains a script that contains a quoted comment.\n  // <script><!-- document.write(\"<!--embedded comment-->\") --></script>\n  //\n  private int readComment(boolean inScript) throws IOException {\n    // at this point \"<!\" has  been read\n    int ch = next();\n      if (ch!='-') {\n      // not a comment\n      push(ch);\n      return MISMATCH;\n    }\n\n    ch = next();\n      if (ch!='-') {\n      // not a comment\n      push(ch);\n      push('-');\n      return MISMATCH;\n    }\n    /*two extra calls to next() here, so make sure we don't read past our mark*/\n    while ((numRead - lastMark) < safeReadAheadLimit -3 ) {\n      ch = next();\n      if (ch<0) return MISMATCH;\n      if (ch=='-') {\n        ch = next();\n        if (ch<0) return MISMATCH;\n        if (ch!='-') {\n          push(ch);\n          continue;\n        }\n\n        ch = next();\n        if (ch<0) return MISMATCH;\n        if (ch!='>') {\n          push(ch);\n          push('-');\n          continue;\n        }\n\n        return MATCH;\n      } else if ((ch=='\\'' || ch=='\"') && inScript) {\n        push(ch);\n        int ret=readScriptString();\n        // if this wasn't a string, there's not much we can do\n        // at this point without having a stack of stream states in\n        // order to \"undo\" just the latest.\n      } else if (ch=='<') {\n        eatSSI();\n      }\n\n    }\n    return MISMATCH;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["0f080986da691a3bba7b757f43ab72cdc82b57ce","e3a908bacd530957eaa6d2dfebdd534afd9ac60e"],"e3a908bacd530957eaa6d2dfebdd534afd9ac60e":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"579dc30b5d3235c34cda518b2b6018d71a61879c":["0f080986da691a3bba7b757f43ab72cdc82b57ce","e3a908bacd530957eaa6d2dfebdd534afd9ac60e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e3a908bacd530957eaa6d2dfebdd534afd9ac60e"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"e3a908bacd530957eaa6d2dfebdd534afd9ac60e":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","579dc30b5d3235c34cda518b2b6018d71a61879c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","e3a908bacd530957eaa6d2dfebdd534afd9ac60e","579dc30b5d3235c34cda518b2b6018d71a61879c"],"579dc30b5d3235c34cda518b2b6018d71a61879c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","579dc30b5d3235c34cda518b2b6018d71a61879c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}