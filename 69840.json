{"path":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simDeleteShard(ZkNodeProps,NamedList).mjava","commits":[{"id":"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5","date":1556572478,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simDeleteShard(ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simDeleteShard(ZkNodeProps,NamedList).mjava","sourceNew":"  /**\n   * Delete a shard. This uses a similar algorithm as {@link org.apache.solr.cloud.api.collections.DeleteShardCmd}\n   * @param message operation details\n   * @param results operation results\n   */\n  public void simDeleteShard(ZkNodeProps message, NamedList results) throws Exception {\n    ensureNotClosed();\n    if (message.getStr(CommonAdminParams.ASYNC) != null) {\n      results.add(CoreAdminParams.REQUESTID, message.getStr(CommonAdminParams.ASYNC));\n    }\n    String collectionName = message.getStr(COLLECTION_PROP);\n    String sliceName = message.getStr(SHARD_ID_PROP);\n    ClusterState clusterState = getClusterState();\n    DocCollection collection = clusterState.getCollection(collectionName);\n    if (collection == null) {\n      throw new Exception(\"Collection \" + collectionName + \" doesn't exist\");\n    }\n    Slice slice = collection.getSlice(sliceName);\n    if (slice == null) {\n      throw new Exception(\" Collection \" + collectionName + \" slice \" + sliceName + \" doesn't exist.\");\n    }\n\n    opDelay(collectionName, CollectionParams.CollectionAction.DELETESHARD.name());\n\n    lock.lockInterruptibly();\n    try {\n      sliceProperties.computeIfAbsent(collectionName, c -> new ConcurrentHashMap<>()).remove(sliceName);\n      colShardReplicaMap.computeIfAbsent(collectionName, c -> new ConcurrentHashMap<>()).remove(sliceName);\n      nodeReplicaMap.forEach((n, replicas) -> {\n          synchronized (replicas) {\n            Iterator<ReplicaInfo> it = replicas.iterator();\n            while (it.hasNext()) {\n              ReplicaInfo ri = it.next();\n              if (ri.getCollection().equals(collectionName) && ri.getShard().equals(sliceName)) {\n                it.remove();\n              }\n            }\n          }\n        });\n      collectionsStatesRef.set(null);\n      results.add(\"success\", \"\");\n    } catch (Exception e) {\n      results.add(\"failure\", e.toString());\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","sourceOld":"  /**\n   * Delete a shard. This uses a similar algorithm as {@link org.apache.solr.cloud.api.collections.DeleteShardCmd}\n   * @param message operation details\n   * @param results operation results\n   */\n  public void simDeleteShard(ZkNodeProps message, NamedList results) throws Exception {\n    ensureNotClosed();\n    if (message.getStr(CommonAdminParams.ASYNC) != null) {\n      results.add(CoreAdminParams.REQUESTID, message.getStr(CommonAdminParams.ASYNC));\n    }\n    String collectionName = message.getStr(COLLECTION_PROP);\n    String sliceName = message.getStr(SHARD_ID_PROP);\n    ClusterState clusterState = getClusterState();\n    DocCollection collection = clusterState.getCollection(collectionName);\n    if (collection == null) {\n      throw new Exception(\"Collection \" + collectionName + \" doesn't exist\");\n    }\n    Slice slice = collection.getSlice(sliceName);\n    if (slice == null) {\n      throw new Exception(\" Collection \" + collectionName + \" slice \" + sliceName + \" doesn't exist.\");\n    }\n\n    opDelay(collectionName, CollectionParams.CollectionAction.DELETESHARD.name());\n\n    lock.lockInterruptibly();\n    try {\n      sliceProperties.computeIfAbsent(collectionName, c -> new ConcurrentHashMap<>()).remove(sliceName);\n      colShardReplicaMap.computeIfAbsent(collectionName, c -> new ConcurrentHashMap<>()).remove(sliceName);\n      nodeReplicaMap.forEach((n, replicas) -> {\n          synchronized (replicas) {\n            Iterator<ReplicaInfo> it = replicas.iterator();\n            while (it.hasNext()) {\n              ReplicaInfo ri = it.next();\n              if (ri.getCollection().equals(collectionName) && ri.getShard().equals(sliceName)) {\n                it.remove();\n              }\n            }\n          }\n        });\n      collectionsStatesRef.set(null);\n      results.add(\"success\", \"\");\n    } catch (Exception e) {\n      results.add(\"failure\", e.toString());\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eb7a329be123e1f46f9d78d74f6d23f33ec81b0a","date":1589907167,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simDeleteShard(ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simDeleteShard(ZkNodeProps,NamedList).mjava","sourceNew":"  /**\n   * Delete a shard. This uses a similar algorithm as {@link org.apache.solr.cloud.api.collections.DeleteShardCmd}\n   * @param message operation details\n   * @param results operation results\n   */\n  public void simDeleteShard(ZkNodeProps message, NamedList results) throws Exception {\n    ensureNotClosed();\n    if (message.getStr(CommonAdminParams.ASYNC) != null) {\n      results.add(CoreAdminParams.REQUESTID, message.getStr(CommonAdminParams.ASYNC));\n    }\n    String collectionName = message.getStr(COLLECTION_PROP);\n    String sliceName = message.getStr(SHARD_ID_PROP);\n    ClusterState clusterState = getClusterState();\n    DocCollection collection = clusterState.getCollection(collectionName);\n    if (collection == null) {\n      throw new Exception(\"Collection \" + collectionName + \" doesn't exist\");\n    }\n    Slice slice = collection.getSlice(sliceName);\n    if (slice == null) {\n      throw new Exception(\" Collection \" + collectionName + \" slice \" + sliceName + \" doesn't exist.\");\n    }\n\n    opDelay(collectionName, CollectionParams.CollectionAction.DELETESHARD.name());\n\n    lock.lockInterruptibly();\n    try {\n      sliceProperties.computeIfAbsent(collectionName, c -> new ConcurrentHashMap<>()).remove(sliceName);\n      colShardReplicaMap.computeIfAbsent(collectionName, c -> new ConcurrentHashMap<>()).remove(sliceName);\n      nodeReplicaMap.forEach((n, replicas) -> {\n          synchronized (replicas) {\n            Iterator<ReplicaInfo> it = replicas.iterator();\n            while (it.hasNext()) {\n              ReplicaInfo ri = it.next();\n              if (ri.getCollection().equals(collectionName) && ri.getShard().equals(sliceName)) {\n                it.remove();\n              }\n            }\n          }\n        });\n      collectionsStatesRef.get(collectionName).invalidate();\n      results.add(\"success\", \"\");\n    } catch (Exception e) {\n      results.add(\"failure\", e.toString());\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","sourceOld":"  /**\n   * Delete a shard. This uses a similar algorithm as {@link org.apache.solr.cloud.api.collections.DeleteShardCmd}\n   * @param message operation details\n   * @param results operation results\n   */\n  public void simDeleteShard(ZkNodeProps message, NamedList results) throws Exception {\n    ensureNotClosed();\n    if (message.getStr(CommonAdminParams.ASYNC) != null) {\n      results.add(CoreAdminParams.REQUESTID, message.getStr(CommonAdminParams.ASYNC));\n    }\n    String collectionName = message.getStr(COLLECTION_PROP);\n    String sliceName = message.getStr(SHARD_ID_PROP);\n    ClusterState clusterState = getClusterState();\n    DocCollection collection = clusterState.getCollection(collectionName);\n    if (collection == null) {\n      throw new Exception(\"Collection \" + collectionName + \" doesn't exist\");\n    }\n    Slice slice = collection.getSlice(sliceName);\n    if (slice == null) {\n      throw new Exception(\" Collection \" + collectionName + \" slice \" + sliceName + \" doesn't exist.\");\n    }\n\n    opDelay(collectionName, CollectionParams.CollectionAction.DELETESHARD.name());\n\n    lock.lockInterruptibly();\n    try {\n      sliceProperties.computeIfAbsent(collectionName, c -> new ConcurrentHashMap<>()).remove(sliceName);\n      colShardReplicaMap.computeIfAbsent(collectionName, c -> new ConcurrentHashMap<>()).remove(sliceName);\n      nodeReplicaMap.forEach((n, replicas) -> {\n          synchronized (replicas) {\n            Iterator<ReplicaInfo> it = replicas.iterator();\n            while (it.hasNext()) {\n              ReplicaInfo ri = it.next();\n              if (ri.getCollection().equals(collectionName) && ri.getShard().equals(sliceName)) {\n                it.remove();\n              }\n            }\n          }\n        });\n      collectionsStatesRef.set(null);\n      results.add(\"success\", \"\");\n    } catch (Exception e) {\n      results.add(\"failure\", e.toString());\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"daa0f21a44e235a2299ea1fa913898b182dd7cce","date":1590952026,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simDeleteShard(ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simDeleteShard(ZkNodeProps,NamedList).mjava","sourceNew":"  /**\n   * Delete a shard. This uses a similar algorithm as {@link org.apache.solr.cloud.api.collections.DeleteShardCmd}\n   * @param message operation details\n   * @param results operation results\n   */\n  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  public void simDeleteShard(ZkNodeProps message, NamedList results) throws Exception {\n    ensureNotClosed();\n    if (message.getStr(CommonAdminParams.ASYNC) != null) {\n      results.add(CoreAdminParams.REQUESTID, message.getStr(CommonAdminParams.ASYNC));\n    }\n    String collectionName = message.getStr(COLLECTION_PROP);\n    String sliceName = message.getStr(SHARD_ID_PROP);\n    ClusterState clusterState = getClusterState();\n    DocCollection collection = clusterState.getCollection(collectionName);\n    if (collection == null) {\n      throw new Exception(\"Collection \" + collectionName + \" doesn't exist\");\n    }\n    Slice slice = collection.getSlice(sliceName);\n    if (slice == null) {\n      throw new Exception(\" Collection \" + collectionName + \" slice \" + sliceName + \" doesn't exist.\");\n    }\n\n    opDelay(collectionName, CollectionParams.CollectionAction.DELETESHARD.name());\n\n    lock.lockInterruptibly();\n    try {\n      sliceProperties.computeIfAbsent(collectionName, c -> new ConcurrentHashMap<>()).remove(sliceName);\n      colShardReplicaMap.computeIfAbsent(collectionName, c -> new ConcurrentHashMap<>()).remove(sliceName);\n      nodeReplicaMap.forEach((n, replicas) -> {\n          synchronized (replicas) {\n            Iterator<ReplicaInfo> it = replicas.iterator();\n            while (it.hasNext()) {\n              ReplicaInfo ri = it.next();\n              if (ri.getCollection().equals(collectionName) && ri.getShard().equals(sliceName)) {\n                it.remove();\n              }\n            }\n          }\n        });\n      collectionsStatesRef.get(collectionName).invalidate();\n      results.add(\"success\", \"\");\n    } catch (Exception e) {\n      results.add(\"failure\", e.toString());\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","sourceOld":"  /**\n   * Delete a shard. This uses a similar algorithm as {@link org.apache.solr.cloud.api.collections.DeleteShardCmd}\n   * @param message operation details\n   * @param results operation results\n   */\n  public void simDeleteShard(ZkNodeProps message, NamedList results) throws Exception {\n    ensureNotClosed();\n    if (message.getStr(CommonAdminParams.ASYNC) != null) {\n      results.add(CoreAdminParams.REQUESTID, message.getStr(CommonAdminParams.ASYNC));\n    }\n    String collectionName = message.getStr(COLLECTION_PROP);\n    String sliceName = message.getStr(SHARD_ID_PROP);\n    ClusterState clusterState = getClusterState();\n    DocCollection collection = clusterState.getCollection(collectionName);\n    if (collection == null) {\n      throw new Exception(\"Collection \" + collectionName + \" doesn't exist\");\n    }\n    Slice slice = collection.getSlice(sliceName);\n    if (slice == null) {\n      throw new Exception(\" Collection \" + collectionName + \" slice \" + sliceName + \" doesn't exist.\");\n    }\n\n    opDelay(collectionName, CollectionParams.CollectionAction.DELETESHARD.name());\n\n    lock.lockInterruptibly();\n    try {\n      sliceProperties.computeIfAbsent(collectionName, c -> new ConcurrentHashMap<>()).remove(sliceName);\n      colShardReplicaMap.computeIfAbsent(collectionName, c -> new ConcurrentHashMap<>()).remove(sliceName);\n      nodeReplicaMap.forEach((n, replicas) -> {\n          synchronized (replicas) {\n            Iterator<ReplicaInfo> it = replicas.iterator();\n            while (it.hasNext()) {\n              ReplicaInfo ri = it.next();\n              if (ri.getCollection().equals(collectionName) && ri.getShard().equals(sliceName)) {\n                it.remove();\n              }\n            }\n          }\n        });\n      collectionsStatesRef.get(collectionName).invalidate();\n      results.add(\"success\", \"\");\n    } catch (Exception e) {\n      results.add(\"failure\", e.toString());\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd","date":1594731683,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simDeleteShard(ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simDeleteShard(ZkNodeProps,NamedList).mjava","sourceNew":"  /**\n   * Delete a shard. This uses a similar algorithm as {@link org.apache.solr.cloud.api.collections.DeleteShardCmd}\n   * @param message operation details\n   * @param results operation results\n   */\n  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  public void simDeleteShard(ZkNodeProps message, NamedList results) throws Exception {\n    ensureNotClosed();\n    if (message.getStr(CommonAdminParams.ASYNC) != null) {\n      results.add(CoreAdminParams.REQUESTID, message.getStr(CommonAdminParams.ASYNC));\n    }\n    String collectionName = message.getStr(COLLECTION_PROP);\n    String sliceName = message.getStr(SHARD_ID_PROP);\n    ClusterState clusterState = getClusterState();\n    DocCollection collection = clusterState.getCollection(collectionName);\n    if (collection == null) {\n      throw new Exception(\"Collection \" + collectionName + \" doesn't exist\");\n    }\n    Slice slice = collection.getSlice(sliceName);\n    if (slice == null) {\n      throw new Exception(\" Collection \" + collectionName + \" slice \" + sliceName + \" doesn't exist.\");\n    }\n\n    opDelay(collectionName, CollectionParams.CollectionAction.DELETESHARD.name());\n\n    lock.lockInterruptibly();\n    try {\n      sliceProperties.computeIfAbsent(collectionName, c -> new ConcurrentHashMap<>()).remove(sliceName);\n      colShardReplicaMap.computeIfAbsent(collectionName, c -> new ConcurrentHashMap<>()).remove(sliceName);\n      nodeReplicaMap.forEach((n, replicas) -> {\n          synchronized (replicas) {\n            Iterator<Replica> it = replicas.iterator();\n            while (it.hasNext()) {\n              Replica ri = it.next();\n              if (ri.getCollection().equals(collectionName) && ri.getShard().equals(sliceName)) {\n                it.remove();\n              }\n            }\n          }\n        });\n      collectionsStatesRef.get(collectionName).invalidate();\n      results.add(\"success\", \"\");\n    } catch (Exception e) {\n      results.add(\"failure\", e.toString());\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","sourceOld":"  /**\n   * Delete a shard. This uses a similar algorithm as {@link org.apache.solr.cloud.api.collections.DeleteShardCmd}\n   * @param message operation details\n   * @param results operation results\n   */\n  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  public void simDeleteShard(ZkNodeProps message, NamedList results) throws Exception {\n    ensureNotClosed();\n    if (message.getStr(CommonAdminParams.ASYNC) != null) {\n      results.add(CoreAdminParams.REQUESTID, message.getStr(CommonAdminParams.ASYNC));\n    }\n    String collectionName = message.getStr(COLLECTION_PROP);\n    String sliceName = message.getStr(SHARD_ID_PROP);\n    ClusterState clusterState = getClusterState();\n    DocCollection collection = clusterState.getCollection(collectionName);\n    if (collection == null) {\n      throw new Exception(\"Collection \" + collectionName + \" doesn't exist\");\n    }\n    Slice slice = collection.getSlice(sliceName);\n    if (slice == null) {\n      throw new Exception(\" Collection \" + collectionName + \" slice \" + sliceName + \" doesn't exist.\");\n    }\n\n    opDelay(collectionName, CollectionParams.CollectionAction.DELETESHARD.name());\n\n    lock.lockInterruptibly();\n    try {\n      sliceProperties.computeIfAbsent(collectionName, c -> new ConcurrentHashMap<>()).remove(sliceName);\n      colShardReplicaMap.computeIfAbsent(collectionName, c -> new ConcurrentHashMap<>()).remove(sliceName);\n      nodeReplicaMap.forEach((n, replicas) -> {\n          synchronized (replicas) {\n            Iterator<ReplicaInfo> it = replicas.iterator();\n            while (it.hasNext()) {\n              ReplicaInfo ri = it.next();\n              if (ri.getCollection().equals(collectionName) && ri.getShard().equals(sliceName)) {\n                it.remove();\n              }\n            }\n          }\n        });\n      collectionsStatesRef.get(collectionName).invalidate();\n      results.add(\"success\", \"\");\n    } catch (Exception e) {\n      results.add(\"failure\", e.toString());\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simDeleteShard(ZkNodeProps,NamedList).mjava","sourceNew":null,"sourceOld":"  /**\n   * Delete a shard. This uses a similar algorithm as {@link org.apache.solr.cloud.api.collections.DeleteShardCmd}\n   * @param message operation details\n   * @param results operation results\n   */\n  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  public void simDeleteShard(ZkNodeProps message, NamedList results) throws Exception {\n    ensureNotClosed();\n    if (message.getStr(CommonAdminParams.ASYNC) != null) {\n      results.add(CoreAdminParams.REQUESTID, message.getStr(CommonAdminParams.ASYNC));\n    }\n    String collectionName = message.getStr(COLLECTION_PROP);\n    String sliceName = message.getStr(SHARD_ID_PROP);\n    ClusterState clusterState = getClusterState();\n    DocCollection collection = clusterState.getCollection(collectionName);\n    if (collection == null) {\n      throw new Exception(\"Collection \" + collectionName + \" doesn't exist\");\n    }\n    Slice slice = collection.getSlice(sliceName);\n    if (slice == null) {\n      throw new Exception(\" Collection \" + collectionName + \" slice \" + sliceName + \" doesn't exist.\");\n    }\n\n    opDelay(collectionName, CollectionParams.CollectionAction.DELETESHARD.name());\n\n    lock.lockInterruptibly();\n    try {\n      sliceProperties.computeIfAbsent(collectionName, c -> new ConcurrentHashMap<>()).remove(sliceName);\n      colShardReplicaMap.computeIfAbsent(collectionName, c -> new ConcurrentHashMap<>()).remove(sliceName);\n      nodeReplicaMap.forEach((n, replicas) -> {\n          synchronized (replicas) {\n            Iterator<Replica> it = replicas.iterator();\n            while (it.hasNext()) {\n              Replica ri = it.next();\n              if (ri.getCollection().equals(collectionName) && ri.getShard().equals(sliceName)) {\n                it.remove();\n              }\n            }\n          }\n        });\n      collectionsStatesRef.get(collectionName).invalidate();\n      results.add(\"success\", \"\");\n    } catch (Exception e) {\n      results.add(\"failure\", e.toString());\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd":["daa0f21a44e235a2299ea1fa913898b182dd7cce"],"3f504512a03d978990cbff30db0522b354e846db":["7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd"],"daa0f21a44e235a2299ea1fa913898b182dd7cce":["eb7a329be123e1f46f9d78d74f6d23f33ec81b0a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"eb7a329be123e1f46f9d78d74f6d23f33ec81b0a":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd":["3f504512a03d978990cbff30db0522b354e846db"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"daa0f21a44e235a2299ea1fa913898b182dd7cce":["7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"],"eb7a329be123e1f46f9d78d74f6d23f33ec81b0a":["daa0f21a44e235a2299ea1fa913898b182dd7cce"],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["eb7a329be123e1f46f9d78d74f6d23f33ec81b0a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}