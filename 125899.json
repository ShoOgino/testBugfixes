{"path":"solr/core/src/test/org/apache/solr/schema/PolyFieldTest#testSearching().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/PolyFieldTest#testSearching().mjava","pathOld":"solr/src/test/org/apache/solr/schema/PolyFieldTest#testSearching().mjava","sourceNew":"  @Test\n  public void testSearching() throws Exception {\n    for (int i = 0; i < 50; i++) {\n      assertU(adoc(\"id\", \"\" + i, \"home\", i + \",\" + (i * 100), \"homed\", (i * 1000) + \",\" + (i * 10000)));\n    }\n    assertU(commit());\n\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"*:*\"), \"//*[@numFound='50']\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"home:1,100\"),\n            \"//*[@numFound='1']\",\n            \"//str[@name='home'][.='1,100']\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"homed:1000,10000\"),\n            \"//*[@numFound='1']\",\n            \"//str[@name='homed'][.='1000,10000']\");\n    assertQ(req(\"fl\", \"*,score\", \"q\",\n            \"{!func}sqedist(home, vector(0, 0))\"),\n            \"\\\"//*[@numFound='50']\\\"\");\n    assertQ(req(\"fl\", \"*,score\", \"q\",\n            \"{!func}dist(2, home, vector(0, 0))\"),\n            \"\\\"//*[@numFound='50']\\\"\");\n\n    assertQ(req(\"fl\", \"*,score\", \"q\",\n            \"home:[10,10000 TO 30,30000]\"),\n            \"\\\"//*[@numFound='3']\\\"\");\n    assertQ(req(\"fl\", \"*,score\", \"q\",\n            \"homed:[1,1000 TO 2000,35000]\"),\n            \"\\\"//*[@numFound='2']\\\"\");\n    //bad\n\n    ignoreException(\"dimension\");\n    assertQEx(\"Query should throw an exception due to incorrect dimensions\", req(\"fl\", \"*,score\", \"q\",\n            \"homed:[1 TO 2000]\"), SolrException.ErrorCode.BAD_REQUEST);\n    resetExceptionIgnores();\n    clearIndex();\n  }\n\n","sourceOld":"  @Test\n  public void testSearching() throws Exception {\n    for (int i = 0; i < 50; i++) {\n      assertU(adoc(\"id\", \"\" + i, \"home\", i + \",\" + (i * 100), \"homed\", (i * 1000) + \",\" + (i * 10000)));\n    }\n    assertU(commit());\n\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"*:*\"), \"//*[@numFound='50']\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"home:1,100\"),\n            \"//*[@numFound='1']\",\n            \"//str[@name='home'][.='1,100']\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"homed:1000,10000\"),\n            \"//*[@numFound='1']\",\n            \"//str[@name='homed'][.='1000,10000']\");\n    assertQ(req(\"fl\", \"*,score\", \"q\",\n            \"{!func}sqedist(home, vector(0, 0))\"),\n            \"\\\"//*[@numFound='50']\\\"\");\n    assertQ(req(\"fl\", \"*,score\", \"q\",\n            \"{!func}dist(2, home, vector(0, 0))\"),\n            \"\\\"//*[@numFound='50']\\\"\");\n\n    assertQ(req(\"fl\", \"*,score\", \"q\",\n            \"home:[10,10000 TO 30,30000]\"),\n            \"\\\"//*[@numFound='3']\\\"\");\n    assertQ(req(\"fl\", \"*,score\", \"q\",\n            \"homed:[1,1000 TO 2000,35000]\"),\n            \"\\\"//*[@numFound='2']\\\"\");\n    //bad\n\n    ignoreException(\"dimension\");\n    assertQEx(\"Query should throw an exception due to incorrect dimensions\", req(\"fl\", \"*,score\", \"q\",\n            \"homed:[1 TO 2000]\"), SolrException.ErrorCode.BAD_REQUEST);\n    resetExceptionIgnores();\n    clearIndex();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/PolyFieldTest#testSearching().mjava","pathOld":"solr/src/test/org/apache/solr/schema/PolyFieldTest#testSearching().mjava","sourceNew":"  @Test\n  public void testSearching() throws Exception {\n    for (int i = 0; i < 50; i++) {\n      assertU(adoc(\"id\", \"\" + i, \"home\", i + \",\" + (i * 100), \"homed\", (i * 1000) + \",\" + (i * 10000)));\n    }\n    assertU(commit());\n\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"*:*\"), \"//*[@numFound='50']\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"home:1,100\"),\n            \"//*[@numFound='1']\",\n            \"//str[@name='home'][.='1,100']\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"homed:1000,10000\"),\n            \"//*[@numFound='1']\",\n            \"//str[@name='homed'][.='1000,10000']\");\n    assertQ(req(\"fl\", \"*,score\", \"q\",\n            \"{!func}sqedist(home, vector(0, 0))\"),\n            \"\\\"//*[@numFound='50']\\\"\");\n    assertQ(req(\"fl\", \"*,score\", \"q\",\n            \"{!func}dist(2, home, vector(0, 0))\"),\n            \"\\\"//*[@numFound='50']\\\"\");\n\n    assertQ(req(\"fl\", \"*,score\", \"q\",\n            \"home:[10,10000 TO 30,30000]\"),\n            \"\\\"//*[@numFound='3']\\\"\");\n    assertQ(req(\"fl\", \"*,score\", \"q\",\n            \"homed:[1,1000 TO 2000,35000]\"),\n            \"\\\"//*[@numFound='2']\\\"\");\n    //bad\n\n    ignoreException(\"dimension\");\n    assertQEx(\"Query should throw an exception due to incorrect dimensions\", req(\"fl\", \"*,score\", \"q\",\n            \"homed:[1 TO 2000]\"), SolrException.ErrorCode.BAD_REQUEST);\n    resetExceptionIgnores();\n    clearIndex();\n  }\n\n","sourceOld":"  @Test\n  public void testSearching() throws Exception {\n    for (int i = 0; i < 50; i++) {\n      assertU(adoc(\"id\", \"\" + i, \"home\", i + \",\" + (i * 100), \"homed\", (i * 1000) + \",\" + (i * 10000)));\n    }\n    assertU(commit());\n\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"*:*\"), \"//*[@numFound='50']\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"home:1,100\"),\n            \"//*[@numFound='1']\",\n            \"//str[@name='home'][.='1,100']\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"homed:1000,10000\"),\n            \"//*[@numFound='1']\",\n            \"//str[@name='homed'][.='1000,10000']\");\n    assertQ(req(\"fl\", \"*,score\", \"q\",\n            \"{!func}sqedist(home, vector(0, 0))\"),\n            \"\\\"//*[@numFound='50']\\\"\");\n    assertQ(req(\"fl\", \"*,score\", \"q\",\n            \"{!func}dist(2, home, vector(0, 0))\"),\n            \"\\\"//*[@numFound='50']\\\"\");\n\n    assertQ(req(\"fl\", \"*,score\", \"q\",\n            \"home:[10,10000 TO 30,30000]\"),\n            \"\\\"//*[@numFound='3']\\\"\");\n    assertQ(req(\"fl\", \"*,score\", \"q\",\n            \"homed:[1,1000 TO 2000,35000]\"),\n            \"\\\"//*[@numFound='2']\\\"\");\n    //bad\n\n    ignoreException(\"dimension\");\n    assertQEx(\"Query should throw an exception due to incorrect dimensions\", req(\"fl\", \"*,score\", \"q\",\n            \"homed:[1 TO 2000]\"), SolrException.ErrorCode.BAD_REQUEST);\n    resetExceptionIgnores();\n    clearIndex();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/PolyFieldTest#testSearching().mjava","pathOld":"solr/src/test/org/apache/solr/schema/PolyFieldTest#testSearching().mjava","sourceNew":"  @Test\n  public void testSearching() throws Exception {\n    for (int i = 0; i < 50; i++) {\n      assertU(adoc(\"id\", \"\" + i, \"home\", i + \",\" + (i * 100), \"homed\", (i * 1000) + \",\" + (i * 10000)));\n    }\n    assertU(commit());\n\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"*:*\"), \"//*[@numFound='50']\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"home:1,100\"),\n            \"//*[@numFound='1']\",\n            \"//str[@name='home'][.='1,100']\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"homed:1000,10000\"),\n            \"//*[@numFound='1']\",\n            \"//str[@name='homed'][.='1000,10000']\");\n    assertQ(req(\"fl\", \"*,score\", \"q\",\n            \"{!func}sqedist(home, vector(0, 0))\"),\n            \"\\\"//*[@numFound='50']\\\"\");\n    assertQ(req(\"fl\", \"*,score\", \"q\",\n            \"{!func}dist(2, home, vector(0, 0))\"),\n            \"\\\"//*[@numFound='50']\\\"\");\n\n    assertQ(req(\"fl\", \"*,score\", \"q\",\n            \"home:[10,10000 TO 30,30000]\"),\n            \"\\\"//*[@numFound='3']\\\"\");\n    assertQ(req(\"fl\", \"*,score\", \"q\",\n            \"homed:[1,1000 TO 2000,35000]\"),\n            \"\\\"//*[@numFound='2']\\\"\");\n    //bad\n\n    ignoreException(\"dimension\");\n    assertQEx(\"Query should throw an exception due to incorrect dimensions\", req(\"fl\", \"*,score\", \"q\",\n            \"homed:[1 TO 2000]\"), SolrException.ErrorCode.BAD_REQUEST);\n    resetExceptionIgnores();\n    clearIndex();\n  }\n\n","sourceOld":"  @Test\n  public void testSearching() throws Exception {\n    for (int i = 0; i < 50; i++) {\n      assertU(adoc(\"id\", \"\" + i, \"home\", i + \",\" + (i * 100), \"homed\", (i * 1000) + \",\" + (i * 10000)));\n    }\n    assertU(commit());\n\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"*:*\"), \"//*[@numFound='50']\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"home:1,100\"),\n            \"//*[@numFound='1']\",\n            \"//str[@name='home'][.='1,100']\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"homed:1000,10000\"),\n            \"//*[@numFound='1']\",\n            \"//str[@name='homed'][.='1000,10000']\");\n    assertQ(req(\"fl\", \"*,score\", \"q\",\n            \"{!func}sqedist(home, vector(0, 0))\"),\n            \"\\\"//*[@numFound='50']\\\"\");\n    assertQ(req(\"fl\", \"*,score\", \"q\",\n            \"{!func}dist(2, home, vector(0, 0))\"),\n            \"\\\"//*[@numFound='50']\\\"\");\n\n    assertQ(req(\"fl\", \"*,score\", \"q\",\n            \"home:[10,10000 TO 30,30000]\"),\n            \"\\\"//*[@numFound='3']\\\"\");\n    assertQ(req(\"fl\", \"*,score\", \"q\",\n            \"homed:[1,1000 TO 2000,35000]\"),\n            \"\\\"//*[@numFound='2']\\\"\");\n    //bad\n\n    ignoreException(\"dimension\");\n    assertQEx(\"Query should throw an exception due to incorrect dimensions\", req(\"fl\", \"*,score\", \"q\",\n            \"homed:[1 TO 2000]\"), SolrException.ErrorCode.BAD_REQUEST);\n    resetExceptionIgnores();\n    clearIndex();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}