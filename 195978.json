{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsFormat#Lucene41PostingsFormat(int,int).mjava","commits":[{"id":"cf8086c7e11dc41303ef1b8050bd355ddfaee76d","date":1350007219,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsFormat#Lucene41PostingsFormat(int,int).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/block/BlockPostingsFormat#BlockPostingsFormat(int,int).mjava","sourceNew":"  public Lucene41PostingsFormat(int minTermBlockSize, int maxTermBlockSize) {\n    super(\"Lucene41\");\n    this.minTermBlockSize = minTermBlockSize;\n    assert minTermBlockSize > 1;\n    this.maxTermBlockSize = maxTermBlockSize;\n    assert minTermBlockSize <= maxTermBlockSize;\n  }\n\n","sourceOld":"  public BlockPostingsFormat(int minTermBlockSize, int maxTermBlockSize) {\n    super(\"Block\");\n    this.minTermBlockSize = minTermBlockSize;\n    assert minTermBlockSize > 1;\n    this.maxTermBlockSize = maxTermBlockSize;\n    assert minTermBlockSize <= maxTermBlockSize;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6616b1fd222bb5a60f7f7856ace312252bc97890","date":1350142044,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsFormat#Lucene41PostingsFormat(int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsFormat#Lucene41PostingsFormat(int,int).mjava","sourceNew":"  /** Creates {@code Lucene41PostingsFormat} with custom\n   *  values for {@code minBlockSize} and {@code\n   *  maxBlockSize} passed to block terms dictionary.\n   *  @see BlockTreeTermsWriter#BlockTreeTermsWriter(SegmentWriteState,PostingsWriterBase,int,int) */\n  public Lucene41PostingsFormat(int minTermBlockSize, int maxTermBlockSize) {\n    super(\"Lucene41\");\n    this.minTermBlockSize = minTermBlockSize;\n    assert minTermBlockSize > 1;\n    this.maxTermBlockSize = maxTermBlockSize;\n    assert minTermBlockSize <= maxTermBlockSize;\n  }\n\n","sourceOld":"  public Lucene41PostingsFormat(int minTermBlockSize, int maxTermBlockSize) {\n    super(\"Lucene41\");\n    this.minTermBlockSize = minTermBlockSize;\n    assert minTermBlockSize > 1;\n    this.maxTermBlockSize = maxTermBlockSize;\n    assert minTermBlockSize <= maxTermBlockSize;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7492bcb52be51e55d596134b95b2e53cc4ffb91","date":1350223278,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsFormat#Lucene41PostingsFormat(int,int).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/block/BlockPostingsFormat#BlockPostingsFormat(int,int).mjava","sourceNew":"  /** Creates {@code Lucene41PostingsFormat} with custom\n   *  values for {@code minBlockSize} and {@code\n   *  maxBlockSize} passed to block terms dictionary.\n   *  @see BlockTreeTermsWriter#BlockTreeTermsWriter(SegmentWriteState,PostingsWriterBase,int,int) */\n  public Lucene41PostingsFormat(int minTermBlockSize, int maxTermBlockSize) {\n    super(\"Lucene41\");\n    this.minTermBlockSize = minTermBlockSize;\n    assert minTermBlockSize > 1;\n    this.maxTermBlockSize = maxTermBlockSize;\n    assert minTermBlockSize <= maxTermBlockSize;\n  }\n\n","sourceOld":"  public BlockPostingsFormat(int minTermBlockSize, int maxTermBlockSize) {\n    super(\"Block\");\n    this.minTermBlockSize = minTermBlockSize;\n    assert minTermBlockSize > 1;\n    this.maxTermBlockSize = maxTermBlockSize;\n    assert minTermBlockSize <= maxTermBlockSize;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db4fdbf3d262768eabc027cd8321edca0cd11fa8","date":1350574784,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsFormat#Lucene41PostingsFormat(int,int).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/block/BlockPostingsFormat#BlockPostingsFormat(int,int).mjava","sourceNew":"  /** Creates {@code Lucene41PostingsFormat} with custom\n   *  values for {@code minBlockSize} and {@code\n   *  maxBlockSize} passed to block terms dictionary.\n   *  @see BlockTreeTermsWriter#BlockTreeTermsWriter(SegmentWriteState,PostingsWriterBase,int,int) */\n  public Lucene41PostingsFormat(int minTermBlockSize, int maxTermBlockSize) {\n    super(\"Lucene41\");\n    this.minTermBlockSize = minTermBlockSize;\n    assert minTermBlockSize > 1;\n    this.maxTermBlockSize = maxTermBlockSize;\n    assert minTermBlockSize <= maxTermBlockSize;\n  }\n\n","sourceOld":"  public BlockPostingsFormat(int minTermBlockSize, int maxTermBlockSize) {\n    super(\"Block\");\n    this.minTermBlockSize = minTermBlockSize;\n    assert minTermBlockSize > 1;\n    this.maxTermBlockSize = maxTermBlockSize;\n    assert minTermBlockSize <= maxTermBlockSize;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"99eb4a732d1a908f4636ace52928876136bf1896","date":1413829552,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsFormat#Lucene50PostingsFormat(int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsFormat#Lucene41PostingsFormat(int,int).mjava","sourceNew":"  /** Creates {@code Lucene50PostingsFormat} with custom\n   *  values for {@code minBlockSize} and {@code\n   *  maxBlockSize} passed to block terms dictionary.\n   *  @see BlockTreeTermsWriter#BlockTreeTermsWriter(SegmentWriteState,PostingsWriterBase,int,int) */\n  public Lucene50PostingsFormat(int minTermBlockSize, int maxTermBlockSize) {\n    super(\"Lucene50\");\n    this.minTermBlockSize = minTermBlockSize;\n    assert minTermBlockSize > 1;\n    this.maxTermBlockSize = maxTermBlockSize;\n    assert minTermBlockSize <= maxTermBlockSize;\n  }\n\n","sourceOld":"  /** Creates {@code Lucene41PostingsFormat} with custom\n   *  values for {@code minBlockSize} and {@code\n   *  maxBlockSize} passed to block terms dictionary.\n   *  @see BlockTreeTermsWriter#BlockTreeTermsWriter(SegmentWriteState,PostingsWriterBase,int,int) */\n  public Lucene41PostingsFormat(int minTermBlockSize, int maxTermBlockSize) {\n    super(\"Lucene41\");\n    this.minTermBlockSize = minTermBlockSize;\n    assert minTermBlockSize > 1;\n    this.maxTermBlockSize = maxTermBlockSize;\n    assert minTermBlockSize <= maxTermBlockSize;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db68c63cbfaa8698b9c4475f75ed2b9c9696d238","date":1414118621,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsFormat#Lucene50PostingsFormat(int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsFormat#Lucene41PostingsFormat(int,int).mjava","sourceNew":"  /** Creates {@code Lucene50PostingsFormat} with custom\n   *  values for {@code minBlockSize} and {@code\n   *  maxBlockSize} passed to block terms dictionary.\n   *  @see BlockTreeTermsWriter#BlockTreeTermsWriter(SegmentWriteState,PostingsWriterBase,int,int) */\n  public Lucene50PostingsFormat(int minTermBlockSize, int maxTermBlockSize) {\n    super(\"Lucene50\");\n    this.minTermBlockSize = minTermBlockSize;\n    assert minTermBlockSize > 1;\n    this.maxTermBlockSize = maxTermBlockSize;\n    assert minTermBlockSize <= maxTermBlockSize;\n  }\n\n","sourceOld":"  /** Creates {@code Lucene41PostingsFormat} with custom\n   *  values for {@code minBlockSize} and {@code\n   *  maxBlockSize} passed to block terms dictionary.\n   *  @see BlockTreeTermsWriter#BlockTreeTermsWriter(SegmentWriteState,PostingsWriterBase,int,int) */\n  public Lucene41PostingsFormat(int minTermBlockSize, int maxTermBlockSize) {\n    super(\"Lucene41\");\n    this.minTermBlockSize = minTermBlockSize;\n    assert minTermBlockSize > 1;\n    this.maxTermBlockSize = maxTermBlockSize;\n    assert minTermBlockSize <= maxTermBlockSize;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6616b1fd222bb5a60f7f7856ace312252bc97890":["cf8086c7e11dc41303ef1b8050bd355ddfaee76d"],"c7492bcb52be51e55d596134b95b2e53cc4ffb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6616b1fd222bb5a60f7f7856ace312252bc97890"],"99eb4a732d1a908f4636ace52928876136bf1896":["c7492bcb52be51e55d596134b95b2e53cc4ffb91"],"cf8086c7e11dc41303ef1b8050bd355ddfaee76d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"db4fdbf3d262768eabc027cd8321edca0cd11fa8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c7492bcb52be51e55d596134b95b2e53cc4ffb91"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["c7492bcb52be51e55d596134b95b2e53cc4ffb91","99eb4a732d1a908f4636ace52928876136bf1896"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"]},"commit2Childs":{"6616b1fd222bb5a60f7f7856ace312252bc97890":["c7492bcb52be51e55d596134b95b2e53cc4ffb91"],"c7492bcb52be51e55d596134b95b2e53cc4ffb91":["99eb4a732d1a908f4636ace52928876136bf1896","db4fdbf3d262768eabc027cd8321edca0cd11fa8","db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"99eb4a732d1a908f4636ace52928876136bf1896":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"cf8086c7e11dc41303ef1b8050bd355ddfaee76d":["6616b1fd222bb5a60f7f7856ace312252bc97890"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c7492bcb52be51e55d596134b95b2e53cc4ffb91","cf8086c7e11dc41303ef1b8050bd355ddfaee76d","db4fdbf3d262768eabc027cd8321edca0cd11fa8"],"db4fdbf3d262768eabc027cd8321edca0cd11fa8":[],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["db4fdbf3d262768eabc027cd8321edca0cd11fa8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}