{"path":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.StateWatcher#process(WatchedEvent).mjava","commits":[{"id":"1072b8e47b50f1c4fb039e1f54a736f381d6f809","date":1438956441,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.StateWatcher#process(WatchedEvent).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void process(WatchedEvent event) {\n      if (!interestingCollections.contains(coll)) {\n        // This collection is no longer interesting, stop watching.\n        log.info(\"Uninteresting collection {}\", coll);\n        return;\n      }\n\n      // session events are not change events,\n      // and do not remove the watcher\n      if (EventType.None.equals(event.getType())) {\n        return;\n      }\n\n      log.info(\"A cluster state change: {} for collection {} has occurred - updating... (live nodes size: {})\",\n              (event), coll, ZkStateReader.this.clusterState == null ? 0\n                      : ZkStateReader.this.clusterState.getLiveNodes().size());\n\n      refreshAndWatch(true);\n      synchronized (getUpdateLock()) {\n        constructState();\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7477015ee104ad8144fba06b9b0a8ea93aea50f8","date":1450790907,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.StateWatcher#process(WatchedEvent).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.StateWatcher#process(WatchedEvent).mjava","sourceNew":"    @Override\n    public void process(WatchedEvent event) {\n      if (!interestingCollections.contains(coll)) {\n        // This collection is no longer interesting, stop watching.\n        LOG.info(\"Uninteresting collection [{}]\", coll);\n        return;\n      }\n\n      // session events are not change events,\n      // and do not remove the watcher\n      if (EventType.None.equals(event.getType())) {\n        return;\n      }\n\n      int liveNodesSize = ZkStateReader.this.clusterState == null ? 0\n          : ZkStateReader.this.clusterState.getLiveNodes().size();\n      LOG.info(\"A cluster state change: [{}] for collection [{}] has occurred - updating... (live nodes size: [{}])\",\n              event, coll, liveNodesSize);\n\n      refreshAndWatch(true);\n      synchronized (getUpdateLock()) {\n        constructState();\n      }\n    }\n\n","sourceOld":"    @Override\n    public void process(WatchedEvent event) {\n      if (!interestingCollections.contains(coll)) {\n        // This collection is no longer interesting, stop watching.\n        log.info(\"Uninteresting collection {}\", coll);\n        return;\n      }\n\n      // session events are not change events,\n      // and do not remove the watcher\n      if (EventType.None.equals(event.getType())) {\n        return;\n      }\n\n      log.info(\"A cluster state change: {} for collection {} has occurred - updating... (live nodes size: {})\",\n              (event), coll, ZkStateReader.this.clusterState == null ? 0\n                      : ZkStateReader.this.clusterState.getLiveNodes().size());\n\n      refreshAndWatch(true);\n      synchronized (getUpdateLock()) {\n        constructState();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f616abd7d3345b373ca3f5a49a3351a7a18eb741","date":1455910613,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.StateWatcher#process(WatchedEvent).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.StateWatcher#process(WatchedEvent).mjava","sourceNew":"    @Override\n    public void process(WatchedEvent event) {\n      // session events are not change events, and do not remove the watcher\n      if (EventType.None.equals(event.getType())) {\n        return;\n      }\n\n      if (!interestingCollections.contains(coll)) {\n        // This collection is no longer interesting, stop watching.\n        LOG.info(\"Uninteresting collection {}\", coll);\n        return;\n      }\n\n      int liveNodesSize = ZkStateReader.this.clusterState == null ? 0\n          : ZkStateReader.this.clusterState.getLiveNodes().size();\n      LOG.info(\"A cluster state change: [{}] for collection [{}] has occurred - updating... (live nodes size: [{}])\",\n              event, coll, liveNodesSize);\n\n      refreshAndWatch(true);\n      synchronized (getUpdateLock()) {\n        constructState();\n      }\n    }\n\n","sourceOld":"    @Override\n    public void process(WatchedEvent event) {\n      if (!interestingCollections.contains(coll)) {\n        // This collection is no longer interesting, stop watching.\n        LOG.info(\"Uninteresting collection [{}]\", coll);\n        return;\n      }\n\n      // session events are not change events,\n      // and do not remove the watcher\n      if (EventType.None.equals(event.getType())) {\n        return;\n      }\n\n      int liveNodesSize = ZkStateReader.this.clusterState == null ? 0\n          : ZkStateReader.this.clusterState.getLiveNodes().size();\n      LOG.info(\"A cluster state change: [{}] for collection [{}] has occurred - updating... (live nodes size: [{}])\",\n              event, coll, liveNodesSize);\n\n      refreshAndWatch(true);\n      synchronized (getUpdateLock()) {\n        constructState();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5b4df85b7268ca40452d6c01343d8eb00ed1f70a","date":1463171656,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.StateWatcher#process(WatchedEvent).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.StateWatcher#process(WatchedEvent).mjava","sourceNew":"    @Override\n    public void process(WatchedEvent event) {\n      // session events are not change events, and do not remove the watcher\n      if (EventType.None.equals(event.getType())) {\n        return;\n      }\n\n      if (!collectionWatches.containsKey(coll)) {\n        // This collection is no longer interesting, stop watching.\n        LOG.info(\"Uninteresting collection {}\", coll);\n        return;\n      }\n\n      int liveNodesSize = ZkStateReader.this.clusterState == null ? 0\n          : ZkStateReader.this.clusterState.getLiveNodes().size();\n      LOG.info(\"A cluster state change: [{}] for collection [{}] has occurred - updating... (live nodes size: [{}])\",\n              event, coll, liveNodesSize);\n\n      refreshAndWatch();\n      synchronized (getUpdateLock()) {\n        constructState();\n      }\n\n    }\n\n","sourceOld":"    @Override\n    public void process(WatchedEvent event) {\n      // session events are not change events, and do not remove the watcher\n      if (EventType.None.equals(event.getType())) {\n        return;\n      }\n\n      if (!interestingCollections.contains(coll)) {\n        // This collection is no longer interesting, stop watching.\n        LOG.info(\"Uninteresting collection {}\", coll);\n        return;\n      }\n\n      int liveNodesSize = ZkStateReader.this.clusterState == null ? 0\n          : ZkStateReader.this.clusterState.getLiveNodes().size();\n      LOG.info(\"A cluster state change: [{}] for collection [{}] has occurred - updating... (live nodes size: [{}])\",\n              event, coll, liveNodesSize);\n\n      refreshAndWatch(true);\n      synchronized (getUpdateLock()) {\n        constructState();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ad30c6a479e764150a3316e57263319775f1df2","date":1463395403,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.StateWatcher#process(WatchedEvent).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.StateWatcher#process(WatchedEvent).mjava","sourceNew":"    @Override\n    public void process(WatchedEvent event) {\n      // session events are not change events, and do not remove the watcher\n      if (EventType.None.equals(event.getType())) {\n        return;\n      }\n\n      if (!collectionWatches.containsKey(coll)) {\n        // This collection is no longer interesting, stop watching.\n        LOG.info(\"Uninteresting collection {}\", coll);\n        return;\n      }\n\n      int liveNodesSize = ZkStateReader.this.clusterState == null ? 0\n          : ZkStateReader.this.clusterState.getLiveNodes().size();\n      LOG.info(\"A cluster state change: [{}] for collection [{}] has occurred - updating... (live nodes size: [{}])\",\n              event, coll, liveNodesSize);\n\n      refreshAndWatch();\n      synchronized (getUpdateLock()) {\n        constructState();\n      }\n\n    }\n\n","sourceOld":"    @Override\n    public void process(WatchedEvent event) {\n      // session events are not change events, and do not remove the watcher\n      if (EventType.None.equals(event.getType())) {\n        return;\n      }\n\n      if (!interestingCollections.contains(coll)) {\n        // This collection is no longer interesting, stop watching.\n        LOG.info(\"Uninteresting collection {}\", coll);\n        return;\n      }\n\n      int liveNodesSize = ZkStateReader.this.clusterState == null ? 0\n          : ZkStateReader.this.clusterState.getLiveNodes().size();\n      LOG.info(\"A cluster state change: [{}] for collection [{}] has occurred - updating... (live nodes size: [{}])\",\n              event, coll, liveNodesSize);\n\n      refreshAndWatch(true);\n      synchronized (getUpdateLock()) {\n        constructState();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.StateWatcher#process(WatchedEvent).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.StateWatcher#process(WatchedEvent).mjava","sourceNew":"    @Override\n    public void process(WatchedEvent event) {\n      // session events are not change events, and do not remove the watcher\n      if (EventType.None.equals(event.getType())) {\n        return;\n      }\n\n      if (!collectionWatches.containsKey(coll)) {\n        // This collection is no longer interesting, stop watching.\n        LOG.info(\"Uninteresting collection {}\", coll);\n        return;\n      }\n\n      int liveNodesSize = ZkStateReader.this.clusterState == null ? 0\n          : ZkStateReader.this.clusterState.getLiveNodes().size();\n      LOG.info(\"A cluster state change: [{}] for collection [{}] has occurred - updating... (live nodes size: [{}])\",\n              event, coll, liveNodesSize);\n\n      refreshAndWatch();\n      synchronized (getUpdateLock()) {\n        constructState();\n      }\n\n    }\n\n","sourceOld":"    @Override\n    public void process(WatchedEvent event) {\n      // session events are not change events, and do not remove the watcher\n      if (EventType.None.equals(event.getType())) {\n        return;\n      }\n\n      if (!interestingCollections.contains(coll)) {\n        // This collection is no longer interesting, stop watching.\n        LOG.info(\"Uninteresting collection {}\", coll);\n        return;\n      }\n\n      int liveNodesSize = ZkStateReader.this.clusterState == null ? 0\n          : ZkStateReader.this.clusterState.getLiveNodes().size();\n      LOG.info(\"A cluster state change: [{}] for collection [{}] has occurred - updating... (live nodes size: [{}])\",\n              event, coll, liveNodesSize);\n\n      refreshAndWatch(true);\n      synchronized (getUpdateLock()) {\n        constructState();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5a3dacb5a7d745cb12121c3b36d19d28dfd8a2f","date":1467384467,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.StateWatcher#process(WatchedEvent).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.StateWatcher#process(WatchedEvent).mjava","sourceNew":"    @Override\n    public void process(WatchedEvent event) {\n      // session events are not change events, and do not remove the watcher\n      if (EventType.None.equals(event.getType())) {\n        return;\n      }\n\n      if (!collectionWatches.containsKey(coll)) {\n        // This collection is no longer interesting, stop watching.\n        LOG.info(\"Uninteresting collection {}\", coll);\n        return;\n      }\n\n      Set<String> liveNodes = ZkStateReader.this.liveNodes;\n      LOG.info(\"A cluster state change: [{}] for collection [{}] has occurred - updating... (live nodes size: [{}])\",\n              event, coll, liveNodes.size());\n\n      refreshAndWatch();\n\n    }\n\n","sourceOld":"    @Override\n    public void process(WatchedEvent event) {\n      // session events are not change events, and do not remove the watcher\n      if (EventType.None.equals(event.getType())) {\n        return;\n      }\n\n      if (!collectionWatches.containsKey(coll)) {\n        // This collection is no longer interesting, stop watching.\n        LOG.info(\"Uninteresting collection {}\", coll);\n        return;\n      }\n\n      int liveNodesSize = ZkStateReader.this.clusterState == null ? 0\n          : ZkStateReader.this.clusterState.getLiveNodes().size();\n      LOG.info(\"A cluster state change: [{}] for collection [{}] has occurred - updating... (live nodes size: [{}])\",\n              event, coll, liveNodesSize);\n\n      refreshAndWatch();\n      synchronized (getUpdateLock()) {\n        constructState();\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962cd4f5e313777f35da8f521265323e84184929","date":1474533758,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.StateWatcher#process(WatchedEvent).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.StateWatcher#process(WatchedEvent).mjava","sourceNew":"    @Override\n    public void process(WatchedEvent event) {\n      // session events are not change events, and do not remove the watcher\n      if (EventType.None.equals(event.getType())) {\n        return;\n      }\n\n      if (!collectionWatches.containsKey(coll)) {\n        // This collection is no longer interesting, stop watching.\n        LOG.debug(\"Uninteresting collection {}\", coll);\n        return;\n      }\n\n      Set<String> liveNodes = ZkStateReader.this.liveNodes;\n      LOG.info(\"A cluster state change: [{}] for collection [{}] has occurred - updating... (live nodes size: [{}])\",\n              event, coll, liveNodes.size());\n\n      refreshAndWatch();\n\n    }\n\n","sourceOld":"    @Override\n    public void process(WatchedEvent event) {\n      // session events are not change events, and do not remove the watcher\n      if (EventType.None.equals(event.getType())) {\n        return;\n      }\n\n      if (!collectionWatches.containsKey(coll)) {\n        // This collection is no longer interesting, stop watching.\n        LOG.info(\"Uninteresting collection {}\", coll);\n        return;\n      }\n\n      Set<String> liveNodes = ZkStateReader.this.liveNodes;\n      LOG.info(\"A cluster state change: [{}] for collection [{}] has occurred - updating... (live nodes size: [{}])\",\n              event, coll, liveNodes.size());\n\n      refreshAndWatch();\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.StateWatcher#process(WatchedEvent).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.StateWatcher#process(WatchedEvent).mjava","sourceNew":"    @Override\n    public void process(WatchedEvent event) {\n      // session events are not change events, and do not remove the watcher\n      if (EventType.None.equals(event.getType())) {\n        return;\n      }\n\n      if (!collectionWatches.containsKey(coll)) {\n        // This collection is no longer interesting, stop watching.\n        LOG.debug(\"Uninteresting collection {}\", coll);\n        return;\n      }\n\n      Set<String> liveNodes = ZkStateReader.this.liveNodes;\n      LOG.info(\"A cluster state change: [{}] for collection [{}] has occurred - updating... (live nodes size: [{}])\",\n              event, coll, liveNodes.size());\n\n      refreshAndWatch();\n\n    }\n\n","sourceOld":"    @Override\n    public void process(WatchedEvent event) {\n      // session events are not change events, and do not remove the watcher\n      if (EventType.None.equals(event.getType())) {\n        return;\n      }\n\n      if (!collectionWatches.containsKey(coll)) {\n        // This collection is no longer interesting, stop watching.\n        LOG.info(\"Uninteresting collection {}\", coll);\n        return;\n      }\n\n      Set<String> liveNodes = ZkStateReader.this.liveNodes;\n      LOG.info(\"A cluster state change: [{}] for collection [{}] has occurred - updating... (live nodes size: [{}])\",\n              event, coll, liveNodes.size());\n\n      refreshAndWatch();\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.StateWatcher#process(WatchedEvent).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.StateWatcher#process(WatchedEvent).mjava","sourceNew":"    @Override\n    public void process(WatchedEvent event) {\n      // session events are not change events, and do not remove the watcher\n      if (EventType.None.equals(event.getType())) {\n        return;\n      }\n\n      if (!collectionWatches.containsKey(coll)) {\n        // This collection is no longer interesting, stop watching.\n        LOG.debug(\"Uninteresting collection {}\", coll);\n        return;\n      }\n\n      Set<String> liveNodes = ZkStateReader.this.liveNodes;\n      LOG.info(\"A cluster state change: [{}] for collection [{}] has occurred - updating... (live nodes size: [{}])\",\n              event, coll, liveNodes.size());\n\n      refreshAndWatch();\n\n    }\n\n","sourceOld":"    @Override\n    public void process(WatchedEvent event) {\n      // session events are not change events, and do not remove the watcher\n      if (EventType.None.equals(event.getType())) {\n        return;\n      }\n\n      if (!interestingCollections.contains(coll)) {\n        // This collection is no longer interesting, stop watching.\n        LOG.info(\"Uninteresting collection {}\", coll);\n        return;\n      }\n\n      int liveNodesSize = ZkStateReader.this.clusterState == null ? 0\n          : ZkStateReader.this.clusterState.getLiveNodes().size();\n      LOG.info(\"A cluster state change: [{}] for collection [{}] has occurred - updating... (live nodes size: [{}])\",\n              event, coll, liveNodesSize);\n\n      refreshAndWatch(true);\n      synchronized (getUpdateLock()) {\n        constructState();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd","date":1534976797,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.StateWatcher#process(WatchedEvent).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.StateWatcher#process(WatchedEvent).mjava","sourceNew":"    @Override\n    public void process(WatchedEvent event) {\n      // session events are not change events, and do not remove the watcher\n      if (EventType.None.equals(event.getType())) {\n        return;\n      }\n\n      if (!collectionWatches.containsKey(coll)) {\n        // This collection is no longer interesting, stop watching.\n        log.debug(\"Uninteresting collection {}\", coll);\n        return;\n      }\n\n      Set<String> liveNodes = ZkStateReader.this.liveNodes;\n      log.info(\"A cluster state change: [{}] for collection [{}] has occurred - updating... (live nodes size: [{}])\",\n              event, coll, liveNodes.size());\n\n      refreshAndWatch();\n\n    }\n\n","sourceOld":"    @Override\n    public void process(WatchedEvent event) {\n      // session events are not change events, and do not remove the watcher\n      if (EventType.None.equals(event.getType())) {\n        return;\n      }\n\n      if (!collectionWatches.containsKey(coll)) {\n        // This collection is no longer interesting, stop watching.\n        LOG.debug(\"Uninteresting collection {}\", coll);\n        return;\n      }\n\n      Set<String> liveNodes = ZkStateReader.this.liveNodes;\n      LOG.info(\"A cluster state change: [{}] for collection [{}] has occurred - updating... (live nodes size: [{}])\",\n              event, coll, liveNodes.size());\n\n      refreshAndWatch();\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2668c99990e4c94a78bac005aa682b7c5986d23a","date":1561446137,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.StateWatcher#process(WatchedEvent).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.StateWatcher#process(WatchedEvent).mjava","sourceNew":"    @Override\n    public void process(WatchedEvent event) {\n      // session events are not change events, and do not remove the watcher\n      if (EventType.None.equals(event.getType())) {\n        return;\n      }\n\n      if (!collectionWatches.containsKey(coll)) {\n        // This collection is no longer interesting, stop watching.\n        log.debug(\"Uninteresting collection {}\", coll);\n        return;\n      }\n\n      Set<String> liveNodes = ZkStateReader.this.liveNodes;\n      log.info(\"A cluster state change: [{}] for collection [{}] has occurred - updating... (live nodes size: [{}])\",\n          event, coll, liveNodes.size());\n\n      refreshAndWatch();\n\n    }\n\n","sourceOld":"    @Override\n    public void process(WatchedEvent event) {\n      // session events are not change events, and do not remove the watcher\n      if (EventType.None.equals(event.getType())) {\n        return;\n      }\n\n      if (!collectionWatches.containsKey(coll)) {\n        // This collection is no longer interesting, stop watching.\n        log.debug(\"Uninteresting collection {}\", coll);\n        return;\n      }\n\n      Set<String> liveNodes = ZkStateReader.this.liveNodes;\n      log.info(\"A cluster state change: [{}] for collection [{}] has occurred - updating... (live nodes size: [{}])\",\n              event, coll, liveNodes.size());\n\n      refreshAndWatch();\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6dc613ed6f75d1988140301ee8de8fdb056fa337","date":1588034757,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.StateWatcher#process(WatchedEvent).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.StateWatcher#process(WatchedEvent).mjava","sourceNew":"    @Override\n    public void process(WatchedEvent event) {\n      // session events are not change events, and do not remove the watcher\n      if (EventType.None.equals(event.getType())) {\n        return;\n      }\n\n      if (!collectionWatches.containsKey(coll)) {\n        // This collection is no longer interesting, stop watching.\n        log.debug(\"Uninteresting collection {}\", coll);\n        return;\n      }\n\n      Set<String> liveNodes = ZkStateReader.this.liveNodes;\n      if (log.isInfoEnabled()) {\n        log.info(\"A cluster state change: [{}] for collection [{}] has occurred - updating... (live nodes size: [{}])\",\n            event, coll, liveNodes.size());\n      }\n\n      refreshAndWatch();\n\n    }\n\n","sourceOld":"    @Override\n    public void process(WatchedEvent event) {\n      // session events are not change events, and do not remove the watcher\n      if (EventType.None.equals(event.getType())) {\n        return;\n      }\n\n      if (!collectionWatches.containsKey(coll)) {\n        // This collection is no longer interesting, stop watching.\n        log.debug(\"Uninteresting collection {}\", coll);\n        return;\n      }\n\n      Set<String> liveNodes = ZkStateReader.this.liveNodes;\n      log.info(\"A cluster state change: [{}] for collection [{}] has occurred - updating... (live nodes size: [{}])\",\n          event, coll, liveNodes.size());\n\n      refreshAndWatch();\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"962cd4f5e313777f35da8f521265323e84184929":["b5a3dacb5a7d745cb12121c3b36d19d28dfd8a2f"],"6dc613ed6f75d1988140301ee8de8fdb056fa337":["2668c99990e4c94a78bac005aa682b7c5986d23a"],"f616abd7d3345b373ca3f5a49a3351a7a18eb741":["7477015ee104ad8144fba06b9b0a8ea93aea50f8"],"0ad30c6a479e764150a3316e57263319775f1df2":["f616abd7d3345b373ca3f5a49a3351a7a18eb741","5b4df85b7268ca40452d6c01343d8eb00ed1f70a"],"b5a3dacb5a7d745cb12121c3b36d19d28dfd8a2f":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["f616abd7d3345b373ca3f5a49a3351a7a18eb741","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"1072b8e47b50f1c4fb039e1f54a736f381d6f809":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["f616abd7d3345b373ca3f5a49a3351a7a18eb741","0ad30c6a479e764150a3316e57263319775f1df2"],"2668c99990e4c94a78bac005aa682b7c5986d23a":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["b5a3dacb5a7d745cb12121c3b36d19d28dfd8a2f","962cd4f5e313777f35da8f521265323e84184929"],"7477015ee104ad8144fba06b9b0a8ea93aea50f8":["1072b8e47b50f1c4fb039e1f54a736f381d6f809"],"5b4df85b7268ca40452d6c01343d8eb00ed1f70a":["f616abd7d3345b373ca3f5a49a3351a7a18eb741"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6dc613ed6f75d1988140301ee8de8fdb056fa337"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"]},"commit2Childs":{"962cd4f5e313777f35da8f521265323e84184929":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"6dc613ed6f75d1988140301ee8de8fdb056fa337":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f616abd7d3345b373ca3f5a49a3351a7a18eb741":["0ad30c6a479e764150a3316e57263319775f1df2","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89","5b4df85b7268ca40452d6c01343d8eb00ed1f70a"],"0ad30c6a479e764150a3316e57263319775f1df2":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"b5a3dacb5a7d745cb12121c3b36d19d28dfd8a2f":["962cd4f5e313777f35da8f521265323e84184929","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["b5a3dacb5a7d745cb12121c3b36d19d28dfd8a2f"],"1072b8e47b50f1c4fb039e1f54a736f381d6f809":["7477015ee104ad8144fba06b9b0a8ea93aea50f8"],"2668c99990e4c94a78bac005aa682b7c5986d23a":["6dc613ed6f75d1988140301ee8de8fdb056fa337"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1072b8e47b50f1c4fb039e1f54a736f381d6f809"],"7477015ee104ad8144fba06b9b0a8ea93aea50f8":["f616abd7d3345b373ca3f5a49a3351a7a18eb741"],"5b4df85b7268ca40452d6c01343d8eb00ed1f70a":["0ad30c6a479e764150a3316e57263319775f1df2"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["2668c99990e4c94a78bac005aa682b7c5986d23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}