{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/ConcurrentUpdateSolrClientTest#testConcurrentCollectionUpdate().mjava","commits":[{"id":"7065efda8f35a7182b1ead959371c47f3615eaac","date":1460559321,"type":0,"author":"markrmiller","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/ConcurrentUpdateSolrClientTest#testConcurrentCollectionUpdate().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testConcurrentCollectionUpdate() throws Exception {\n\n    int cussThreadCount = 2;\n    int cussQueueSize = 100;\n    int numDocs = 100;\n    int numRunnables = 5;\n    int expected = numDocs * numRunnables;\n\n    try (ConcurrentUpdateSolrClient concurrentClient = new ConcurrentUpdateSolrClient(jetty.getBaseUrl().toString(), cussQueueSize, cussThreadCount)) {\n      concurrentClient.setPollQueueTime(0);\n\n      // ensure it doesn't block where there's nothing to do yet\n      concurrentClient.blockUntilFinished();\n\n      // Delete all existing documents.\n      concurrentClient.deleteByQuery(\"collection1\", \"*:*\");\n\n      int poolSize = 5;\n      ExecutorService threadPool = ExecutorUtil.newMDCAwareFixedThreadPool(poolSize, new SolrjNamedThreadFactory(\"testCUSS\"));\n\n      for (int r=0; r < numRunnables; r++)\n        threadPool.execute(new SendDocsRunnable(String.valueOf(r), numDocs, concurrentClient, \"collection1\"));\n\n      // ensure all docs are sent\n      threadPool.awaitTermination(5, TimeUnit.SECONDS);\n      threadPool.shutdown();\n\n      concurrentClient.commit(\"collection1\");\n\n      assertEquals(expected, concurrentClient.query(\"collection1\", new SolrQuery(\"*:*\")).getResults().getNumFound());\n\n      // wait until all requests are processed by CUSS \n      concurrentClient.blockUntilFinished();\n      concurrentClient.shutdownNow();\n    }\n\n    try (ConcurrentUpdateSolrClient concurrentClient = new ConcurrentUpdateSolrClient(jetty.getBaseUrl().toString() + \"/collection1\", cussQueueSize, cussThreadCount)) {\n      assertEquals(expected, concurrentClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound());\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ea9249ab9a9f76eb4132ceb4631d15315721f6a","date":1460578553,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/ConcurrentUpdateSolrClientTest#testConcurrentCollectionUpdate().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testConcurrentCollectionUpdate() throws Exception {\n\n    int cussThreadCount = 2;\n    int cussQueueSize = 100;\n    int numDocs = 100;\n    int numRunnables = 5;\n    int expected = numDocs * numRunnables;\n\n    try (ConcurrentUpdateSolrClient concurrentClient = new ConcurrentUpdateSolrClient(jetty.getBaseUrl().toString(), cussQueueSize, cussThreadCount)) {\n      concurrentClient.setPollQueueTime(0);\n\n      // ensure it doesn't block where there's nothing to do yet\n      concurrentClient.blockUntilFinished();\n\n      // Delete all existing documents.\n      concurrentClient.deleteByQuery(\"collection1\", \"*:*\");\n\n      int poolSize = 5;\n      ExecutorService threadPool = ExecutorUtil.newMDCAwareFixedThreadPool(poolSize, new SolrjNamedThreadFactory(\"testCUSS\"));\n\n      for (int r=0; r < numRunnables; r++)\n        threadPool.execute(new SendDocsRunnable(String.valueOf(r), numDocs, concurrentClient, \"collection1\"));\n\n      // ensure all docs are sent\n      threadPool.awaitTermination(5, TimeUnit.SECONDS);\n      threadPool.shutdown();\n\n      concurrentClient.commit(\"collection1\");\n\n      assertEquals(expected, concurrentClient.query(\"collection1\", new SolrQuery(\"*:*\")).getResults().getNumFound());\n\n      // wait until all requests are processed by CUSS \n      concurrentClient.blockUntilFinished();\n      concurrentClient.shutdownNow();\n    }\n\n    try (ConcurrentUpdateSolrClient concurrentClient = new ConcurrentUpdateSolrClient(jetty.getBaseUrl().toString() + \"/collection1\", cussQueueSize, cussThreadCount)) {\n      assertEquals(expected, concurrentClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound());\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"63a1978c6710c767fa084741e3d6424840003a62","date":1495850671,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/ConcurrentUpdateSolrClientTest#testConcurrentCollectionUpdate().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/ConcurrentUpdateSolrClientTest#testConcurrentCollectionUpdate().mjava","sourceNew":"  @Test\n  public void testConcurrentCollectionUpdate() throws Exception {\n\n    int cussThreadCount = 2;\n    int cussQueueSize = 100;\n    int numDocs = 100;\n    int numRunnables = 5;\n    int expected = numDocs * numRunnables;\n\n    try (ConcurrentUpdateSolrClient concurrentClient\n         = (new ConcurrentUpdateSolrClient.Builder(jetty.getBaseUrl().toString()))\n         .withQueueSize(cussQueueSize)\n         .withThreadCount(cussThreadCount).build()) {\n      concurrentClient.setPollQueueTime(0);\n\n      // ensure it doesn't block where there's nothing to do yet\n      concurrentClient.blockUntilFinished();\n\n      // Delete all existing documents.\n      concurrentClient.deleteByQuery(\"collection1\", \"*:*\");\n\n      int poolSize = 5;\n      ExecutorService threadPool = ExecutorUtil.newMDCAwareFixedThreadPool(poolSize, new SolrjNamedThreadFactory(\"testCUSS\"));\n\n      for (int r=0; r < numRunnables; r++)\n        threadPool.execute(new SendDocsRunnable(String.valueOf(r), numDocs, concurrentClient, \"collection1\"));\n\n      // ensure all docs are sent\n      threadPool.awaitTermination(5, TimeUnit.SECONDS);\n      threadPool.shutdown();\n\n      concurrentClient.commit(\"collection1\");\n\n      assertEquals(expected, concurrentClient.query(\"collection1\", new SolrQuery(\"*:*\")).getResults().getNumFound());\n\n      // wait until all requests are processed by CUSS \n      concurrentClient.blockUntilFinished();\n      concurrentClient.shutdownNow();\n    }\n\n    try (ConcurrentUpdateSolrClient concurrentClient\n         = (new ConcurrentUpdateSolrClient.Builder(jetty.getBaseUrl().toString() + \"/collection1\"))\n         .withQueueSize(cussQueueSize)\n         .withThreadCount(cussThreadCount).build()) {\n\n      assertEquals(expected, concurrentClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound());\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testConcurrentCollectionUpdate() throws Exception {\n\n    int cussThreadCount = 2;\n    int cussQueueSize = 100;\n    int numDocs = 100;\n    int numRunnables = 5;\n    int expected = numDocs * numRunnables;\n\n    try (ConcurrentUpdateSolrClient concurrentClient = new ConcurrentUpdateSolrClient(jetty.getBaseUrl().toString(), cussQueueSize, cussThreadCount)) {\n      concurrentClient.setPollQueueTime(0);\n\n      // ensure it doesn't block where there's nothing to do yet\n      concurrentClient.blockUntilFinished();\n\n      // Delete all existing documents.\n      concurrentClient.deleteByQuery(\"collection1\", \"*:*\");\n\n      int poolSize = 5;\n      ExecutorService threadPool = ExecutorUtil.newMDCAwareFixedThreadPool(poolSize, new SolrjNamedThreadFactory(\"testCUSS\"));\n\n      for (int r=0; r < numRunnables; r++)\n        threadPool.execute(new SendDocsRunnable(String.valueOf(r), numDocs, concurrentClient, \"collection1\"));\n\n      // ensure all docs are sent\n      threadPool.awaitTermination(5, TimeUnit.SECONDS);\n      threadPool.shutdown();\n\n      concurrentClient.commit(\"collection1\");\n\n      assertEquals(expected, concurrentClient.query(\"collection1\", new SolrQuery(\"*:*\")).getResults().getNumFound());\n\n      // wait until all requests are processed by CUSS \n      concurrentClient.blockUntilFinished();\n      concurrentClient.shutdownNow();\n    }\n\n    try (ConcurrentUpdateSolrClient concurrentClient = new ConcurrentUpdateSolrClient(jetty.getBaseUrl().toString() + \"/collection1\", cussQueueSize, cussThreadCount)) {\n      assertEquals(expected, concurrentClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound());\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1f5728f32a4a256b36cfabd7a2636452f599bb9","date":1496231774,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/ConcurrentUpdateSolrClientTest#testConcurrentCollectionUpdate().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/ConcurrentUpdateSolrClientTest#testConcurrentCollectionUpdate().mjava","sourceNew":"  @Test\n  public void testConcurrentCollectionUpdate() throws Exception {\n\n    int cussThreadCount = 2;\n    int cussQueueSize = 100;\n    int numDocs = 100;\n    int numRunnables = 5;\n    int expected = numDocs * numRunnables;\n\n    try (ConcurrentUpdateSolrClient concurrentClient\n         = (new ConcurrentUpdateSolrClient.Builder(jetty.getBaseUrl().toString()))\n         .withQueueSize(cussQueueSize)\n         .withThreadCount(cussThreadCount).build()) {\n      concurrentClient.setPollQueueTime(0);\n\n      // ensure it doesn't block where there's nothing to do yet\n      concurrentClient.blockUntilFinished();\n\n      // Delete all existing documents.\n      concurrentClient.deleteByQuery(\"collection1\", \"*:*\");\n\n      int poolSize = 5;\n      ExecutorService threadPool = ExecutorUtil.newMDCAwareFixedThreadPool(poolSize, new SolrjNamedThreadFactory(\"testCUSS\"));\n\n      for (int r=0; r < numRunnables; r++)\n        threadPool.execute(new SendDocsRunnable(String.valueOf(r), numDocs, concurrentClient, \"collection1\"));\n\n      // ensure all docs are sent\n      threadPool.awaitTermination(5, TimeUnit.SECONDS);\n      threadPool.shutdown();\n\n      concurrentClient.commit(\"collection1\");\n\n      assertEquals(expected, concurrentClient.query(\"collection1\", new SolrQuery(\"*:*\")).getResults().getNumFound());\n\n      // wait until all requests are processed by CUSS \n      concurrentClient.blockUntilFinished();\n      concurrentClient.shutdownNow();\n    }\n\n    try (ConcurrentUpdateSolrClient concurrentClient\n         = (new ConcurrentUpdateSolrClient.Builder(jetty.getBaseUrl().toString() + \"/collection1\"))\n         .withQueueSize(cussQueueSize)\n         .withThreadCount(cussThreadCount).build()) {\n\n      assertEquals(expected, concurrentClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound());\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testConcurrentCollectionUpdate() throws Exception {\n\n    int cussThreadCount = 2;\n    int cussQueueSize = 100;\n    int numDocs = 100;\n    int numRunnables = 5;\n    int expected = numDocs * numRunnables;\n\n    try (ConcurrentUpdateSolrClient concurrentClient = new ConcurrentUpdateSolrClient(jetty.getBaseUrl().toString(), cussQueueSize, cussThreadCount)) {\n      concurrentClient.setPollQueueTime(0);\n\n      // ensure it doesn't block where there's nothing to do yet\n      concurrentClient.blockUntilFinished();\n\n      // Delete all existing documents.\n      concurrentClient.deleteByQuery(\"collection1\", \"*:*\");\n\n      int poolSize = 5;\n      ExecutorService threadPool = ExecutorUtil.newMDCAwareFixedThreadPool(poolSize, new SolrjNamedThreadFactory(\"testCUSS\"));\n\n      for (int r=0; r < numRunnables; r++)\n        threadPool.execute(new SendDocsRunnable(String.valueOf(r), numDocs, concurrentClient, \"collection1\"));\n\n      // ensure all docs are sent\n      threadPool.awaitTermination(5, TimeUnit.SECONDS);\n      threadPool.shutdown();\n\n      concurrentClient.commit(\"collection1\");\n\n      assertEquals(expected, concurrentClient.query(\"collection1\", new SolrQuery(\"*:*\")).getResults().getNumFound());\n\n      // wait until all requests are processed by CUSS \n      concurrentClient.blockUntilFinished();\n      concurrentClient.shutdownNow();\n    }\n\n    try (ConcurrentUpdateSolrClient concurrentClient = new ConcurrentUpdateSolrClient(jetty.getBaseUrl().toString() + \"/collection1\", cussQueueSize, cussThreadCount)) {\n      assertEquals(expected, concurrentClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound());\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/ConcurrentUpdateSolrClientTest#testConcurrentCollectionUpdate().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/ConcurrentUpdateSolrClientTest#testConcurrentCollectionUpdate().mjava","sourceNew":"  @Test\n  public void testConcurrentCollectionUpdate() throws Exception {\n\n    int cussThreadCount = 2;\n    int cussQueueSize = 100;\n    int numDocs = 100;\n    int numRunnables = 5;\n    int expected = numDocs * numRunnables;\n\n    try (ConcurrentUpdateSolrClient concurrentClient\n         = (new ConcurrentUpdateSolrClient.Builder(jetty.getBaseUrl().toString()))\n         .withQueueSize(cussQueueSize)\n         .withThreadCount(cussThreadCount).build()) {\n      concurrentClient.setPollQueueTime(0);\n\n      // ensure it doesn't block where there's nothing to do yet\n      concurrentClient.blockUntilFinished();\n\n      // Delete all existing documents.\n      concurrentClient.deleteByQuery(\"collection1\", \"*:*\");\n\n      int poolSize = 5;\n      ExecutorService threadPool = ExecutorUtil.newMDCAwareFixedThreadPool(poolSize, new SolrjNamedThreadFactory(\"testCUSS\"));\n\n      for (int r=0; r < numRunnables; r++)\n        threadPool.execute(new SendDocsRunnable(String.valueOf(r), numDocs, concurrentClient, \"collection1\"));\n\n      // ensure all docs are sent\n      threadPool.awaitTermination(5, TimeUnit.SECONDS);\n      threadPool.shutdown();\n\n      concurrentClient.commit(\"collection1\");\n\n      assertEquals(expected, concurrentClient.query(\"collection1\", new SolrQuery(\"*:*\")).getResults().getNumFound());\n\n      // wait until all requests are processed by CUSS \n      concurrentClient.blockUntilFinished();\n      concurrentClient.shutdownNow();\n    }\n\n    try (ConcurrentUpdateSolrClient concurrentClient\n         = (new ConcurrentUpdateSolrClient.Builder(jetty.getBaseUrl().toString() + \"/collection1\"))\n         .withQueueSize(cussQueueSize)\n         .withThreadCount(cussThreadCount).build()) {\n\n      assertEquals(expected, concurrentClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound());\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testConcurrentCollectionUpdate() throws Exception {\n\n    int cussThreadCount = 2;\n    int cussQueueSize = 100;\n    int numDocs = 100;\n    int numRunnables = 5;\n    int expected = numDocs * numRunnables;\n\n    try (ConcurrentUpdateSolrClient concurrentClient = new ConcurrentUpdateSolrClient(jetty.getBaseUrl().toString(), cussQueueSize, cussThreadCount)) {\n      concurrentClient.setPollQueueTime(0);\n\n      // ensure it doesn't block where there's nothing to do yet\n      concurrentClient.blockUntilFinished();\n\n      // Delete all existing documents.\n      concurrentClient.deleteByQuery(\"collection1\", \"*:*\");\n\n      int poolSize = 5;\n      ExecutorService threadPool = ExecutorUtil.newMDCAwareFixedThreadPool(poolSize, new SolrjNamedThreadFactory(\"testCUSS\"));\n\n      for (int r=0; r < numRunnables; r++)\n        threadPool.execute(new SendDocsRunnable(String.valueOf(r), numDocs, concurrentClient, \"collection1\"));\n\n      // ensure all docs are sent\n      threadPool.awaitTermination(5, TimeUnit.SECONDS);\n      threadPool.shutdown();\n\n      concurrentClient.commit(\"collection1\");\n\n      assertEquals(expected, concurrentClient.query(\"collection1\", new SolrQuery(\"*:*\")).getResults().getNumFound());\n\n      // wait until all requests are processed by CUSS \n      concurrentClient.blockUntilFinished();\n      concurrentClient.shutdownNow();\n    }\n\n    try (ConcurrentUpdateSolrClient concurrentClient = new ConcurrentUpdateSolrClient(jetty.getBaseUrl().toString() + \"/collection1\", cussQueueSize, cussThreadCount)) {\n      assertEquals(expected, concurrentClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound());\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb03700c9690d16b15fb4f56f6ec36b128fd894e","date":1586745995,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/ConcurrentUpdateSolrClientTest#testConcurrentCollectionUpdate().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/ConcurrentUpdateSolrClientTest#testConcurrentCollectionUpdate().mjava","sourceNew":"  @Test\n  public void testConcurrentCollectionUpdate() throws Exception {\n\n    int cussThreadCount = 2;\n    int cussQueueSize = 100;\n    int numDocs = 100;\n    int numRunnables = 5;\n    int expected = numDocs * numRunnables;\n\n    try (ConcurrentUpdateSolrClient concurrentClient\n         = (new ConcurrentUpdateSolrClient.Builder(jetty.getBaseUrl().toString()))\n         .withQueueSize(cussQueueSize)\n         .withThreadCount(cussThreadCount).build()) {\n      concurrentClient.setPollQueueTime(0);\n\n      // ensure it doesn't block where there's nothing to do yet\n      concurrentClient.blockUntilFinished();\n\n      // Delete all existing documents.\n      concurrentClient.deleteByQuery(\"collection1\", \"*:*\");\n\n      int poolSize = 5;\n      ExecutorService threadPool = ExecutorUtil.newMDCAwareFixedThreadPool(poolSize, new SolrNamedThreadFactory(\"testCUSS\"));\n\n      for (int r=0; r < numRunnables; r++)\n        threadPool.execute(new SendDocsRunnable(String.valueOf(r), numDocs, concurrentClient, \"collection1\"));\n\n      // ensure all docs are sent\n      threadPool.awaitTermination(5, TimeUnit.SECONDS);\n      threadPool.shutdown();\n\n      concurrentClient.commit(\"collection1\");\n\n      assertEquals(expected, concurrentClient.query(\"collection1\", new SolrQuery(\"*:*\")).getResults().getNumFound());\n\n      // wait until all requests are processed by CUSS \n      concurrentClient.blockUntilFinished();\n      concurrentClient.shutdownNow();\n    }\n\n    try (ConcurrentUpdateSolrClient concurrentClient\n         = (new ConcurrentUpdateSolrClient.Builder(jetty.getBaseUrl().toString() + \"/collection1\"))\n         .withQueueSize(cussQueueSize)\n         .withThreadCount(cussThreadCount).build()) {\n\n      assertEquals(expected, concurrentClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound());\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testConcurrentCollectionUpdate() throws Exception {\n\n    int cussThreadCount = 2;\n    int cussQueueSize = 100;\n    int numDocs = 100;\n    int numRunnables = 5;\n    int expected = numDocs * numRunnables;\n\n    try (ConcurrentUpdateSolrClient concurrentClient\n         = (new ConcurrentUpdateSolrClient.Builder(jetty.getBaseUrl().toString()))\n         .withQueueSize(cussQueueSize)\n         .withThreadCount(cussThreadCount).build()) {\n      concurrentClient.setPollQueueTime(0);\n\n      // ensure it doesn't block where there's nothing to do yet\n      concurrentClient.blockUntilFinished();\n\n      // Delete all existing documents.\n      concurrentClient.deleteByQuery(\"collection1\", \"*:*\");\n\n      int poolSize = 5;\n      ExecutorService threadPool = ExecutorUtil.newMDCAwareFixedThreadPool(poolSize, new SolrjNamedThreadFactory(\"testCUSS\"));\n\n      for (int r=0; r < numRunnables; r++)\n        threadPool.execute(new SendDocsRunnable(String.valueOf(r), numDocs, concurrentClient, \"collection1\"));\n\n      // ensure all docs are sent\n      threadPool.awaitTermination(5, TimeUnit.SECONDS);\n      threadPool.shutdown();\n\n      concurrentClient.commit(\"collection1\");\n\n      assertEquals(expected, concurrentClient.query(\"collection1\", new SolrQuery(\"*:*\")).getResults().getNumFound());\n\n      // wait until all requests are processed by CUSS \n      concurrentClient.blockUntilFinished();\n      concurrentClient.shutdownNow();\n    }\n\n    try (ConcurrentUpdateSolrClient concurrentClient\n         = (new ConcurrentUpdateSolrClient.Builder(jetty.getBaseUrl().toString() + \"/collection1\"))\n         .withQueueSize(cussQueueSize)\n         .withThreadCount(cussThreadCount).build()) {\n\n      assertEquals(expected, concurrentClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound());\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["9ea9249ab9a9f76eb4132ceb4631d15315721f6a","63a1978c6710c767fa084741e3d6424840003a62"],"9ea9249ab9a9f76eb4132ceb4631d15315721f6a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7065efda8f35a7182b1ead959371c47f3615eaac"],"63a1978c6710c767fa084741e3d6424840003a62":["9ea9249ab9a9f76eb4132ceb4631d15315721f6a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7065efda8f35a7182b1ead959371c47f3615eaac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fb03700c9690d16b15fb4f56f6ec36b128fd894e":["d1f5728f32a4a256b36cfabd7a2636452f599bb9"],"d1f5728f32a4a256b36cfabd7a2636452f599bb9":["9ea9249ab9a9f76eb4132ceb4631d15315721f6a","63a1978c6710c767fa084741e3d6424840003a62"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fb03700c9690d16b15fb4f56f6ec36b128fd894e"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"9ea9249ab9a9f76eb4132ceb4631d15315721f6a":["e9017cf144952056066919f1ebc7897ff9bd71b1","63a1978c6710c767fa084741e3d6424840003a62","d1f5728f32a4a256b36cfabd7a2636452f599bb9"],"63a1978c6710c767fa084741e3d6424840003a62":["e9017cf144952056066919f1ebc7897ff9bd71b1","d1f5728f32a4a256b36cfabd7a2636452f599bb9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9ea9249ab9a9f76eb4132ceb4631d15315721f6a","7065efda8f35a7182b1ead959371c47f3615eaac"],"7065efda8f35a7182b1ead959371c47f3615eaac":["9ea9249ab9a9f76eb4132ceb4631d15315721f6a"],"fb03700c9690d16b15fb4f56f6ec36b128fd894e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d1f5728f32a4a256b36cfabd7a2636452f599bb9":["fb03700c9690d16b15fb4f56f6ec36b128fd894e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}