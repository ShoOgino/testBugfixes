{"path":"lucene/core/src/java/org/apache/lucene/util/fst/Builder#finish().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/Builder#finish().mjava","pathOld":"lucene/src/java/org/apache/lucene/util/fst/Builder#finish().mjava","sourceNew":"  /** Returns final FST.  NOTE: this will return null if\n   *  nothing is accepted by the FST. */\n  public FST<T> finish() throws IOException {\n\n    final UnCompiledNode<T> root = frontier[0];\n\n    // minimize nodes in the last word's suffix\n    freezeTail(0);\n    if (root.inputCount < minSuffixCount1 || root.inputCount < minSuffixCount2 || root.numArcs == 0) {\n      if (fst.emptyOutput == null) {\n        return null;\n      } else if (minSuffixCount1 > 0 || minSuffixCount2 > 0) {\n        // empty string got pruned\n        return null;\n      }\n    } else {\n      if (minSuffixCount2 != 0) {\n        compileAllTargets(root, lastInput.length);\n      }\n    }\n    //if (DEBUG) System.out.println(\"  builder.finish root.isFinal=\" + root.isFinal + \" root.output=\" + root.output);\n    fst.finish(compileNode(root, lastInput.length).node);\n\n    return fst;\n  }\n\n","sourceOld":"  /** Returns final FST.  NOTE: this will return null if\n   *  nothing is accepted by the FST. */\n  public FST<T> finish() throws IOException {\n\n    final UnCompiledNode<T> root = frontier[0];\n\n    // minimize nodes in the last word's suffix\n    freezeTail(0);\n    if (root.inputCount < minSuffixCount1 || root.inputCount < minSuffixCount2 || root.numArcs == 0) {\n      if (fst.emptyOutput == null) {\n        return null;\n      } else if (minSuffixCount1 > 0 || minSuffixCount2 > 0) {\n        // empty string got pruned\n        return null;\n      }\n    } else {\n      if (minSuffixCount2 != 0) {\n        compileAllTargets(root, lastInput.length);\n      }\n    }\n    //if (DEBUG) System.out.println(\"  builder.finish root.isFinal=\" + root.isFinal + \" root.output=\" + root.output);\n    fst.finish(compileNode(root, lastInput.length).node);\n\n    return fst;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"49f4d9c4e29f2345e789073801e7945431a23ca3","date":1355344131,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/Builder#finish().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/Builder#finish().mjava","sourceNew":"  /** Returns final FST.  NOTE: this will return null if\n   *  nothing is accepted by the FST. */\n  public FST<T> finish() throws IOException {\n\n    final UnCompiledNode<T> root = frontier[0];\n\n    // minimize nodes in the last word's suffix\n    freezeTail(0);\n    if (root.inputCount < minSuffixCount1 || root.inputCount < minSuffixCount2 || root.numArcs == 0) {\n      if (fst.emptyOutput == null) {\n        return null;\n      } else if (minSuffixCount1 > 0 || minSuffixCount2 > 0) {\n        // empty string got pruned\n        return null;\n      }\n    } else {\n      if (minSuffixCount2 != 0) {\n        compileAllTargets(root, lastInput.length);\n      }\n    }\n    //if (DEBUG) System.out.println(\"  builder.finish root.isFinal=\" + root.isFinal + \" root.output=\" + root.output);\n    fst.finish(compileNode(root, lastInput.length).node);\n\n    if (doPackFST) {\n      return fst.pack(3, Math.max(10, fst.getNodeCount()/4), acceptableOverheadRatio);\n    } else {\n      return fst;\n    }\n  }\n\n","sourceOld":"  /** Returns final FST.  NOTE: this will return null if\n   *  nothing is accepted by the FST. */\n  public FST<T> finish() throws IOException {\n\n    final UnCompiledNode<T> root = frontier[0];\n\n    // minimize nodes in the last word's suffix\n    freezeTail(0);\n    if (root.inputCount < minSuffixCount1 || root.inputCount < minSuffixCount2 || root.numArcs == 0) {\n      if (fst.emptyOutput == null) {\n        return null;\n      } else if (minSuffixCount1 > 0 || minSuffixCount2 > 0) {\n        // empty string got pruned\n        return null;\n      }\n    } else {\n      if (minSuffixCount2 != 0) {\n        compileAllTargets(root, lastInput.length);\n      }\n    }\n    //if (DEBUG) System.out.println(\"  builder.finish root.isFinal=\" + root.isFinal + \" root.output=\" + root.output);\n    fst.finish(compileNode(root, lastInput.length).node);\n\n    return fst;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/Builder#finish().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/Builder#finish().mjava","sourceNew":"  /** Returns final FST.  NOTE: this will return null if\n   *  nothing is accepted by the FST. */\n  public FST<T> finish() throws IOException {\n\n    final UnCompiledNode<T> root = frontier[0];\n\n    // minimize nodes in the last word's suffix\n    freezeTail(0);\n    if (root.inputCount < minSuffixCount1 || root.inputCount < minSuffixCount2 || root.numArcs == 0) {\n      if (fst.emptyOutput == null) {\n        return null;\n      } else if (minSuffixCount1 > 0 || minSuffixCount2 > 0) {\n        // empty string got pruned\n        return null;\n      }\n    } else {\n      if (minSuffixCount2 != 0) {\n        compileAllTargets(root, lastInput.length);\n      }\n    }\n    //if (DEBUG) System.out.println(\"  builder.finish root.isFinal=\" + root.isFinal + \" root.output=\" + root.output);\n    fst.finish(compileNode(root, lastInput.length).node);\n\n    if (doPackFST) {\n      return fst.pack(3, Math.max(10, fst.getNodeCount()/4), acceptableOverheadRatio);\n    } else {\n      return fst;\n    }\n  }\n\n","sourceOld":"  /** Returns final FST.  NOTE: this will return null if\n   *  nothing is accepted by the FST. */\n  public FST<T> finish() throws IOException {\n\n    final UnCompiledNode<T> root = frontier[0];\n\n    // minimize nodes in the last word's suffix\n    freezeTail(0);\n    if (root.inputCount < minSuffixCount1 || root.inputCount < minSuffixCount2 || root.numArcs == 0) {\n      if (fst.emptyOutput == null) {\n        return null;\n      } else if (minSuffixCount1 > 0 || minSuffixCount2 > 0) {\n        // empty string got pruned\n        return null;\n      }\n    } else {\n      if (minSuffixCount2 != 0) {\n        compileAllTargets(root, lastInput.length);\n      }\n    }\n    //if (DEBUG) System.out.println(\"  builder.finish root.isFinal=\" + root.isFinal + \" root.output=\" + root.output);\n    fst.finish(compileNode(root, lastInput.length).node);\n\n    return fst;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3c397b1515e745d8b12d70edfc0e17cb7eac7f0","date":1358188277,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/Builder#finish().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/Builder#finish().mjava","sourceNew":"  /** Returns final FST.  NOTE: this will return null if\n   *  nothing is accepted by the FST. */\n  public FST<T> finish() throws IOException {\n\n    final UnCompiledNode<T> root = frontier[0];\n\n    // minimize nodes in the last word's suffix\n    freezeTail(0);\n    if (root.inputCount < minSuffixCount1 || root.inputCount < minSuffixCount2 || root.numArcs == 0) {\n      if (fst.emptyOutput == null) {\n        return null;\n      } else if (minSuffixCount1 > 0 || minSuffixCount2 > 0) {\n        // empty string got pruned\n        return null;\n      }\n    } else {\n      if (minSuffixCount2 != 0) {\n        compileAllTargets(root, lastInput.length);\n      }\n    }\n    //if (DEBUG) System.out.println(\"  builder.finish root.isFinal=\" + root.isFinal + \" root.output=\" + root.output);\n    fst.finish(compileNode(root, lastInput.length).node);\n\n    if (doPackFST) {\n      return fst.pack(3, Math.max(10, (int) (fst.getNodeCount()/4)), acceptableOverheadRatio);\n    } else {\n      return fst;\n    }\n  }\n\n","sourceOld":"  /** Returns final FST.  NOTE: this will return null if\n   *  nothing is accepted by the FST. */\n  public FST<T> finish() throws IOException {\n\n    final UnCompiledNode<T> root = frontier[0];\n\n    // minimize nodes in the last word's suffix\n    freezeTail(0);\n    if (root.inputCount < minSuffixCount1 || root.inputCount < minSuffixCount2 || root.numArcs == 0) {\n      if (fst.emptyOutput == null) {\n        return null;\n      } else if (minSuffixCount1 > 0 || minSuffixCount2 > 0) {\n        // empty string got pruned\n        return null;\n      }\n    } else {\n      if (minSuffixCount2 != 0) {\n        compileAllTargets(root, lastInput.length);\n      }\n    }\n    //if (DEBUG) System.out.println(\"  builder.finish root.isFinal=\" + root.isFinal + \" root.output=\" + root.output);\n    fst.finish(compileNode(root, lastInput.length).node);\n\n    if (doPackFST) {\n      return fst.pack(3, Math.max(10, fst.getNodeCount()/4), acceptableOverheadRatio);\n    } else {\n      return fst;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8917bfede3b4ca30f4305c1e391e9218959cd723","date":1358189662,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/Builder#finish().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/Builder#finish().mjava","sourceNew":"  /** Returns final FST.  NOTE: this will return null if\n   *  nothing is accepted by the FST. */\n  public FST<T> finish() throws IOException {\n\n    final UnCompiledNode<T> root = frontier[0];\n\n    // minimize nodes in the last word's suffix\n    freezeTail(0);\n    if (root.inputCount < minSuffixCount1 || root.inputCount < minSuffixCount2 || root.numArcs == 0) {\n      if (fst.emptyOutput == null) {\n        return null;\n      } else if (minSuffixCount1 > 0 || minSuffixCount2 > 0) {\n        // empty string got pruned\n        return null;\n      }\n    } else {\n      if (minSuffixCount2 != 0) {\n        compileAllTargets(root, lastInput.length);\n      }\n    }\n    //if (DEBUG) System.out.println(\"  builder.finish root.isFinal=\" + root.isFinal + \" root.output=\" + root.output);\n    fst.finish(compileNode(root, lastInput.length).node);\n\n    if (doPackFST) {\n      return fst.pack(3, Math.max(10, (int) (fst.getNodeCount()/4)), acceptableOverheadRatio);\n    } else {\n      return fst;\n    }\n  }\n\n","sourceOld":"  /** Returns final FST.  NOTE: this will return null if\n   *  nothing is accepted by the FST. */\n  public FST<T> finish() throws IOException {\n\n    final UnCompiledNode<T> root = frontier[0];\n\n    // minimize nodes in the last word's suffix\n    freezeTail(0);\n    if (root.inputCount < minSuffixCount1 || root.inputCount < minSuffixCount2 || root.numArcs == 0) {\n      if (fst.emptyOutput == null) {\n        return null;\n      } else if (minSuffixCount1 > 0 || minSuffixCount2 > 0) {\n        // empty string got pruned\n        return null;\n      }\n    } else {\n      if (minSuffixCount2 != 0) {\n        compileAllTargets(root, lastInput.length);\n      }\n    }\n    //if (DEBUG) System.out.println(\"  builder.finish root.isFinal=\" + root.isFinal + \" root.output=\" + root.output);\n    fst.finish(compileNode(root, lastInput.length).node);\n\n    if (doPackFST) {\n      return fst.pack(3, Math.max(10, fst.getNodeCount()/4), acceptableOverheadRatio);\n    } else {\n      return fst;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","date":1407854805,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/Builder#finish().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/Builder#finish().mjava","sourceNew":"  /** Returns final FST.  NOTE: this will return null if\n   *  nothing is accepted by the FST. */\n  public FST<T> finish() throws IOException {\n\n    final UnCompiledNode<T> root = frontier[0];\n\n    // minimize nodes in the last word's suffix\n    freezeTail(0);\n    if (root.inputCount < minSuffixCount1 || root.inputCount < minSuffixCount2 || root.numArcs == 0) {\n      if (fst.emptyOutput == null) {\n        return null;\n      } else if (minSuffixCount1 > 0 || minSuffixCount2 > 0) {\n        // empty string got pruned\n        return null;\n      }\n    } else {\n      if (minSuffixCount2 != 0) {\n        compileAllTargets(root, lastInput.length());\n      }\n    }\n    //if (DEBUG) System.out.println(\"  builder.finish root.isFinal=\" + root.isFinal + \" root.output=\" + root.output);\n    fst.finish(compileNode(root, lastInput.length()).node);\n\n    if (doPackFST) {\n      return fst.pack(3, Math.max(10, (int) (fst.getNodeCount()/4)), acceptableOverheadRatio);\n    } else {\n      return fst;\n    }\n  }\n\n","sourceOld":"  /** Returns final FST.  NOTE: this will return null if\n   *  nothing is accepted by the FST. */\n  public FST<T> finish() throws IOException {\n\n    final UnCompiledNode<T> root = frontier[0];\n\n    // minimize nodes in the last word's suffix\n    freezeTail(0);\n    if (root.inputCount < minSuffixCount1 || root.inputCount < minSuffixCount2 || root.numArcs == 0) {\n      if (fst.emptyOutput == null) {\n        return null;\n      } else if (minSuffixCount1 > 0 || minSuffixCount2 > 0) {\n        // empty string got pruned\n        return null;\n      }\n    } else {\n      if (minSuffixCount2 != 0) {\n        compileAllTargets(root, lastInput.length);\n      }\n    }\n    //if (DEBUG) System.out.println(\"  builder.finish root.isFinal=\" + root.isFinal + \" root.output=\" + root.output);\n    fst.finish(compileNode(root, lastInput.length).node);\n\n    if (doPackFST) {\n      return fst.pack(3, Math.max(10, (int) (fst.getNodeCount()/4)), acceptableOverheadRatio);\n    } else {\n      return fst;\n    }\n  }\n\n","bugFix":["60ba444201d2570214b6fcf1d15600dc1a01f548","b3be20ca1091c0b7cdb2308b9023606a5e451cec"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1abb939fb41b2fe4f89fd518f3da288c0213341d","date":1435657417,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/Builder#finish().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/Builder#finish().mjava","sourceNew":"  /** Returns final FST.  NOTE: this will return null if\n   *  nothing is accepted by the FST. */\n  public FST<T> finish() throws IOException {\n\n    final UnCompiledNode<T> root = frontier[0];\n\n    // minimize nodes in the last word's suffix\n    freezeTail(0);\n    if (root.inputCount < minSuffixCount1 || root.inputCount < minSuffixCount2 || root.numArcs == 0) {\n      if (fst.emptyOutput == null) {\n        return null;\n      } else if (minSuffixCount1 > 0 || minSuffixCount2 > 0) {\n        // empty string got pruned\n        return null;\n      }\n    } else {\n      if (minSuffixCount2 != 0) {\n        compileAllTargets(root, lastInput.length());\n      }\n    }\n    //if (DEBUG) System.out.println(\"  builder.finish root.isFinal=\" + root.isFinal + \" root.output=\" + root.output);\n    fst.finish(compileNode(root, lastInput.length()).node);\n\n    if (doPackFST) {\n      return fst.pack(this, 3, Math.max(10, (int) (getNodeCount()/4)), acceptableOverheadRatio);\n    } else {\n      return fst;\n    }\n  }\n\n","sourceOld":"  /** Returns final FST.  NOTE: this will return null if\n   *  nothing is accepted by the FST. */\n  public FST<T> finish() throws IOException {\n\n    final UnCompiledNode<T> root = frontier[0];\n\n    // minimize nodes in the last word's suffix\n    freezeTail(0);\n    if (root.inputCount < minSuffixCount1 || root.inputCount < minSuffixCount2 || root.numArcs == 0) {\n      if (fst.emptyOutput == null) {\n        return null;\n      } else if (minSuffixCount1 > 0 || minSuffixCount2 > 0) {\n        // empty string got pruned\n        return null;\n      }\n    } else {\n      if (minSuffixCount2 != 0) {\n        compileAllTargets(root, lastInput.length());\n      }\n    }\n    //if (DEBUG) System.out.println(\"  builder.finish root.isFinal=\" + root.isFinal + \" root.output=\" + root.output);\n    fst.finish(compileNode(root, lastInput.length()).node);\n\n    if (doPackFST) {\n      return fst.pack(3, Math.max(10, (int) (fst.getNodeCount()/4)), acceptableOverheadRatio);\n    } else {\n      return fst;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6244579a467d5f2673ac98265d74bddbea1a8114","date":1478786509,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/Builder#finish().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/Builder#finish().mjava","sourceNew":"  /** Returns final FST.  NOTE: this will return null if\n   *  nothing is accepted by the FST. */\n  public FST<T> finish() throws IOException {\n\n    final UnCompiledNode<T> root = frontier[0];\n\n    // minimize nodes in the last word's suffix\n    freezeTail(0);\n    if (root.inputCount < minSuffixCount1 || root.inputCount < minSuffixCount2 || root.numArcs == 0) {\n      if (fst.emptyOutput == null) {\n        return null;\n      } else if (minSuffixCount1 > 0 || minSuffixCount2 > 0) {\n        // empty string got pruned\n        return null;\n      }\n    } else {\n      if (minSuffixCount2 != 0) {\n        compileAllTargets(root, lastInput.length());\n      }\n    }\n    //if (DEBUG) System.out.println(\"  builder.finish root.isFinal=\" + root.isFinal + \" root.output=\" + root.output);\n    fst.finish(compileNode(root, lastInput.length()).node);\n\n    return fst;\n  }\n\n","sourceOld":"  /** Returns final FST.  NOTE: this will return null if\n   *  nothing is accepted by the FST. */\n  public FST<T> finish() throws IOException {\n\n    final UnCompiledNode<T> root = frontier[0];\n\n    // minimize nodes in the last word's suffix\n    freezeTail(0);\n    if (root.inputCount < minSuffixCount1 || root.inputCount < minSuffixCount2 || root.numArcs == 0) {\n      if (fst.emptyOutput == null) {\n        return null;\n      } else if (minSuffixCount1 > 0 || minSuffixCount2 > 0) {\n        // empty string got pruned\n        return null;\n      }\n    } else {\n      if (minSuffixCount2 != 0) {\n        compileAllTargets(root, lastInput.length());\n      }\n    }\n    //if (DEBUG) System.out.println(\"  builder.finish root.isFinal=\" + root.isFinal + \" root.output=\" + root.output);\n    fst.finish(compileNode(root, lastInput.length()).node);\n\n    if (doPackFST) {\n      return fst.pack(this, 3, Math.max(10, (int) (getNodeCount()/4)), acceptableOverheadRatio);\n    } else {\n      return fst;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"199dfa410f1fdbfd3294106b04096cce5ed34b21","date":1478812506,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/Builder#finish().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/Builder#finish().mjava","sourceNew":"  /** Returns final FST.  NOTE: this will return null if\n   *  nothing is accepted by the FST. */\n  public FST<T> finish() throws IOException {\n\n    final UnCompiledNode<T> root = frontier[0];\n\n    // minimize nodes in the last word's suffix\n    freezeTail(0);\n    if (root.inputCount < minSuffixCount1 || root.inputCount < minSuffixCount2 || root.numArcs == 0) {\n      if (fst.emptyOutput == null) {\n        return null;\n      } else if (minSuffixCount1 > 0 || minSuffixCount2 > 0) {\n        // empty string got pruned\n        return null;\n      }\n    } else {\n      if (minSuffixCount2 != 0) {\n        compileAllTargets(root, lastInput.length());\n      }\n    }\n    //if (DEBUG) System.out.println(\"  builder.finish root.isFinal=\" + root.isFinal + \" root.output=\" + root.output);\n    fst.finish(compileNode(root, lastInput.length()).node);\n\n    return fst;\n  }\n\n","sourceOld":"  /** Returns final FST.  NOTE: this will return null if\n   *  nothing is accepted by the FST. */\n  public FST<T> finish() throws IOException {\n\n    final UnCompiledNode<T> root = frontier[0];\n\n    // minimize nodes in the last word's suffix\n    freezeTail(0);\n    if (root.inputCount < minSuffixCount1 || root.inputCount < minSuffixCount2 || root.numArcs == 0) {\n      if (fst.emptyOutput == null) {\n        return null;\n      } else if (minSuffixCount1 > 0 || minSuffixCount2 > 0) {\n        // empty string got pruned\n        return null;\n      }\n    } else {\n      if (minSuffixCount2 != 0) {\n        compileAllTargets(root, lastInput.length());\n      }\n    }\n    //if (DEBUG) System.out.println(\"  builder.finish root.isFinal=\" + root.isFinal + \" root.output=\" + root.output);\n    fst.finish(compileNode(root, lastInput.length()).node);\n\n    if (doPackFST) {\n      return fst.pack(this, 3, Math.max(10, (int) (getNodeCount()/4)), acceptableOverheadRatio);\n    } else {\n      return fst;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f5661e6a04d3172e262ad741b717924f2f1b6a5","date":1576244274,"type":5,"author":"Bruno Roustant","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FSTCompiler#compile().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/Builder#finish().mjava","sourceNew":"  /** Returns final FST.  NOTE: this will return null if\n   *  nothing is accepted by the FST. */\n  public FST<T> compile() throws IOException {\n\n    final UnCompiledNode<T> root = frontier[0];\n\n    // minimize nodes in the last word's suffix\n    freezeTail(0);\n    if (root.inputCount < minSuffixCount1 || root.inputCount < minSuffixCount2 || root.numArcs == 0) {\n      if (fst.emptyOutput == null) {\n        return null;\n      } else if (minSuffixCount1 > 0 || minSuffixCount2 > 0) {\n        // empty string got pruned\n        return null;\n      }\n    } else {\n      if (minSuffixCount2 != 0) {\n        compileAllTargets(root, lastInput.length());\n      }\n    }\n    //if (DEBUG) System.out.println(\"  builder.finish root.isFinal=\" + root.isFinal + \" root.output=\" + root.output);\n    fst.finish(compileNode(root, lastInput.length()).node);\n\n    return fst;\n  }\n\n","sourceOld":"  /** Returns final FST.  NOTE: this will return null if\n   *  nothing is accepted by the FST. */\n  public FST<T> finish() throws IOException {\n\n    final UnCompiledNode<T> root = frontier[0];\n\n    // minimize nodes in the last word's suffix\n    freezeTail(0);\n    if (root.inputCount < minSuffixCount1 || root.inputCount < minSuffixCount2 || root.numArcs == 0) {\n      if (fst.emptyOutput == null) {\n        return null;\n      } else if (minSuffixCount1 > 0 || minSuffixCount2 > 0) {\n        // empty string got pruned\n        return null;\n      }\n    } else {\n      if (minSuffixCount2 != 0) {\n        compileAllTargets(root, lastInput.length());\n      }\n    }\n    //if (DEBUG) System.out.println(\"  builder.finish root.isFinal=\" + root.isFinal + \" root.output=\" + root.output);\n    fst.finish(compileNode(root, lastInput.length()).node);\n\n    return fst;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c5db9bff3aeb942c848a2ab8fa4b8b0737377deb","date":1576247714,"type":5,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FSTCompiler#compile().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/Builder#finish().mjava","sourceNew":"  /** Returns final FST.  NOTE: this will return null if\n   *  nothing is accepted by the FST. */\n  public FST<T> compile() throws IOException {\n\n    final UnCompiledNode<T> root = frontier[0];\n\n    // minimize nodes in the last word's suffix\n    freezeTail(0);\n    if (root.inputCount < minSuffixCount1 || root.inputCount < minSuffixCount2 || root.numArcs == 0) {\n      if (fst.emptyOutput == null) {\n        return null;\n      } else if (minSuffixCount1 > 0 || minSuffixCount2 > 0) {\n        // empty string got pruned\n        return null;\n      }\n    } else {\n      if (minSuffixCount2 != 0) {\n        compileAllTargets(root, lastInput.length());\n      }\n    }\n    //if (DEBUG) System.out.println(\"  builder.finish root.isFinal=\" + root.isFinal + \" root.output=\" + root.output);\n    fst.finish(compileNode(root, lastInput.length()).node);\n\n    return fst;\n  }\n\n","sourceOld":"  /** Returns final FST.  NOTE: this will return null if\n   *  nothing is accepted by the FST. */\n  public FST<T> finish() throws IOException {\n\n    final UnCompiledNode<T> root = frontier[0];\n\n    // minimize nodes in the last word's suffix\n    freezeTail(0);\n    if (root.inputCount < minSuffixCount1 || root.inputCount < minSuffixCount2 || root.numArcs == 0) {\n      if (fst.emptyOutput == null) {\n        return null;\n      } else if (minSuffixCount1 > 0 || minSuffixCount2 > 0) {\n        // empty string got pruned\n        return null;\n      }\n    } else {\n      if (minSuffixCount2 != 0) {\n        compileAllTargets(root, lastInput.length());\n      }\n    }\n    //if (DEBUG) System.out.println(\"  builder.finish root.isFinal=\" + root.isFinal + \" root.output=\" + root.output);\n    fst.finish(compileNode(root, lastInput.length()).node);\n\n    return fst;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1abb939fb41b2fe4f89fd518f3da288c0213341d":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","49f4d9c4e29f2345e789073801e7945431a23ca3"],"d3c397b1515e745d8b12d70edfc0e17cb7eac7f0":["49f4d9c4e29f2345e789073801e7945431a23ca3"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8917bfede3b4ca30f4305c1e391e9218959cd723":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","d3c397b1515e745d8b12d70edfc0e17cb7eac7f0"],"6244579a467d5f2673ac98265d74bddbea1a8114":["1abb939fb41b2fe4f89fd518f3da288c0213341d"],"199dfa410f1fdbfd3294106b04096cce5ed34b21":["1abb939fb41b2fe4f89fd518f3da288c0213341d","6244579a467d5f2673ac98265d74bddbea1a8114"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["d3c397b1515e745d8b12d70edfc0e17cb7eac7f0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c5db9bff3aeb942c848a2ab8fa4b8b0737377deb":["6244579a467d5f2673ac98265d74bddbea1a8114","0f5661e6a04d3172e262ad741b717924f2f1b6a5"],"0f5661e6a04d3172e262ad741b717924f2f1b6a5":["6244579a467d5f2673ac98265d74bddbea1a8114"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f5661e6a04d3172e262ad741b717924f2f1b6a5"],"49f4d9c4e29f2345e789073801e7945431a23ca3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"1abb939fb41b2fe4f89fd518f3da288c0213341d":["6244579a467d5f2673ac98265d74bddbea1a8114","199dfa410f1fdbfd3294106b04096cce5ed34b21"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["8917bfede3b4ca30f4305c1e391e9218959cd723"],"d3c397b1515e745d8b12d70edfc0e17cb7eac7f0":["8917bfede3b4ca30f4305c1e391e9218959cd723","7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","49f4d9c4e29f2345e789073801e7945431a23ca3"],"8917bfede3b4ca30f4305c1e391e9218959cd723":[],"6244579a467d5f2673ac98265d74bddbea1a8114":["199dfa410f1fdbfd3294106b04096cce5ed34b21","c5db9bff3aeb942c848a2ab8fa4b8b0737377deb","0f5661e6a04d3172e262ad741b717924f2f1b6a5"],"199dfa410f1fdbfd3294106b04096cce5ed34b21":[],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["1abb939fb41b2fe4f89fd518f3da288c0213341d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"c5db9bff3aeb942c848a2ab8fa4b8b0737377deb":[],"0f5661e6a04d3172e262ad741b717924f2f1b6a5":["c5db9bff3aeb942c848a2ab8fa4b8b0737377deb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"49f4d9c4e29f2345e789073801e7945431a23ca3":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","d3c397b1515e745d8b12d70edfc0e17cb7eac7f0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8917bfede3b4ca30f4305c1e391e9218959cd723","199dfa410f1fdbfd3294106b04096cce5ed34b21","c5db9bff3aeb942c848a2ab8fa4b8b0737377deb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}