{"path":"lucene/src/java/org/apache/lucene/search/FuzzyQuery#FuzzyQuery(Term,float,int,int).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/FuzzyQuery#FuzzyQuery(Term,float,int,int).mjava","pathOld":"src/java/org/apache/lucene/search/FuzzyQuery#FuzzyQuery(Term,float,int,int).mjava","sourceNew":"  /**\n   * Create a new FuzzyQuery that will match terms with a similarity \n   * of at least <code>minimumSimilarity</code> to <code>term</code>.\n   * If a <code>prefixLength</code> &gt; 0 is specified, a common prefix\n   * of that length is also required.\n   * \n   * @param term the term to search for\n   * @param minimumSimilarity a value between 0 and 1 to set the required similarity\n   *  between the query term and the matching terms. For example, for a\n   *  <code>minimumSimilarity</code> of <code>0.5</code> a term of the same length\n   *  as the query term is considered similar to the query term if the edit distance\n   *  between both terms is less than <code>length(term)*0.5</code>\n   * @param prefixLength length of common (non-fuzzy) prefix\n   * @param maxExpansions the maximum number of terms to match. If this number is\n   *  greater than {@link BooleanQuery#getMaxClauseCount} when the query is rewritten, \n   *  then the maxClauseCount will be used instead.\n   * @throws IllegalArgumentException if minimumSimilarity is &gt;= 1 or &lt; 0\n   * or if prefixLength &lt; 0\n   */\n  public FuzzyQuery(Term term, float minimumSimilarity, int prefixLength,\n      int maxExpansions) {\n    this.term = term;\n    \n    if (minimumSimilarity >= 1.0f)\n      throw new IllegalArgumentException(\"minimumSimilarity >= 1\");\n    else if (minimumSimilarity < 0.0f)\n      throw new IllegalArgumentException(\"minimumSimilarity < 0\");\n    if (prefixLength < 0)\n      throw new IllegalArgumentException(\"prefixLength < 0\");\n    if (maxExpansions < 0)\n      throw new IllegalArgumentException(\"maxExpansions < 0\");\n    \n    setRewriteMethod(new MultiTermQuery.TopTermsScoringBooleanQueryRewrite(maxExpansions));\n    \n    if (term.text().length() > 1.0f / (1.0f - minimumSimilarity)) {\n      this.termLongEnough = true;\n    }\n    \n    this.minimumSimilarity = minimumSimilarity;\n    this.prefixLength = prefixLength;\n  }\n\n","sourceOld":"  /**\n   * Create a new FuzzyQuery that will match terms with a similarity \n   * of at least <code>minimumSimilarity</code> to <code>term</code>.\n   * If a <code>prefixLength</code> &gt; 0 is specified, a common prefix\n   * of that length is also required.\n   * \n   * @param term the term to search for\n   * @param minimumSimilarity a value between 0 and 1 to set the required similarity\n   *  between the query term and the matching terms. For example, for a\n   *  <code>minimumSimilarity</code> of <code>0.5</code> a term of the same length\n   *  as the query term is considered similar to the query term if the edit distance\n   *  between both terms is less than <code>length(term)*0.5</code>\n   * @param prefixLength length of common (non-fuzzy) prefix\n   * @param maxExpansions the maximum number of terms to match. If this number is\n   *  greater than {@link BooleanQuery#getMaxClauseCount} when the query is rewritten, \n   *  then the maxClauseCount will be used instead.\n   * @throws IllegalArgumentException if minimumSimilarity is &gt;= 1 or &lt; 0\n   * or if prefixLength &lt; 0\n   */\n  public FuzzyQuery(Term term, float minimumSimilarity, int prefixLength,\n      int maxExpansions) {\n    this.term = term;\n    \n    if (minimumSimilarity >= 1.0f)\n      throw new IllegalArgumentException(\"minimumSimilarity >= 1\");\n    else if (minimumSimilarity < 0.0f)\n      throw new IllegalArgumentException(\"minimumSimilarity < 0\");\n    if (prefixLength < 0)\n      throw new IllegalArgumentException(\"prefixLength < 0\");\n    if (maxExpansions < 0)\n      throw new IllegalArgumentException(\"maxExpansions < 0\");\n    \n    setRewriteMethod(new MultiTermQuery.TopTermsScoringBooleanQueryRewrite(maxExpansions));\n    \n    if (term.text().length() > 1.0f / (1.0f - minimumSimilarity)) {\n      this.termLongEnough = true;\n    }\n    \n    this.minimumSimilarity = minimumSimilarity;\n    this.prefixLength = prefixLength;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/FuzzyQuery#FuzzyQuery(Term,float,int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FuzzyQuery#FuzzyQuery(Term,float,int,int).mjava","sourceNew":"  /**\n   * Create a new FuzzyQuery that will match terms with a similarity \n   * of at least <code>minimumSimilarity</code> to <code>term</code>.\n   * If a <code>prefixLength</code> &gt; 0 is specified, a common prefix\n   * of that length is also required.\n   * \n   * @param term the term to search for\n   * @param minimumSimilarity a value between 0 and 1 to set the required similarity\n   *  between the query term and the matching terms. For example, for a\n   *  <code>minimumSimilarity</code> of <code>0.5</code> a term of the same length\n   *  as the query term is considered similar to the query term if the edit distance\n   *  between both terms is less than <code>length(term)*0.5</code>\n   * @param prefixLength length of common (non-fuzzy) prefix\n   * @param maxExpansions the maximum number of terms to match. If this number is\n   *  greater than {@link BooleanQuery#getMaxClauseCount} when the query is rewritten, \n   *  then the maxClauseCount will be used instead.\n   * @throws IllegalArgumentException if minimumSimilarity is &gt;= 1 or &lt; 0\n   * or if prefixLength &lt; 0\n   */\n  public FuzzyQuery(Term term, float minimumSimilarity, int prefixLength,\n      int maxExpansions) {\n    super(term.field());\n    this.term = term;\n    \n    if (minimumSimilarity >= 1.0f)\n      throw new IllegalArgumentException(\"minimumSimilarity >= 1\");\n    else if (minimumSimilarity < 0.0f)\n      throw new IllegalArgumentException(\"minimumSimilarity < 0\");\n    if (prefixLength < 0)\n      throw new IllegalArgumentException(\"prefixLength < 0\");\n    if (maxExpansions < 0)\n      throw new IllegalArgumentException(\"maxExpansions < 0\");\n    \n    setRewriteMethod(new MultiTermQuery.TopTermsScoringBooleanQueryRewrite(maxExpansions));\n    \n    if (term.text().length() > 1.0f / (1.0f - minimumSimilarity)) {\n      this.termLongEnough = true;\n    }\n    \n    this.minimumSimilarity = minimumSimilarity;\n    this.prefixLength = prefixLength;\n  }\n\n","sourceOld":"  /**\n   * Create a new FuzzyQuery that will match terms with a similarity \n   * of at least <code>minimumSimilarity</code> to <code>term</code>.\n   * If a <code>prefixLength</code> &gt; 0 is specified, a common prefix\n   * of that length is also required.\n   * \n   * @param term the term to search for\n   * @param minimumSimilarity a value between 0 and 1 to set the required similarity\n   *  between the query term and the matching terms. For example, for a\n   *  <code>minimumSimilarity</code> of <code>0.5</code> a term of the same length\n   *  as the query term is considered similar to the query term if the edit distance\n   *  between both terms is less than <code>length(term)*0.5</code>\n   * @param prefixLength length of common (non-fuzzy) prefix\n   * @param maxExpansions the maximum number of terms to match. If this number is\n   *  greater than {@link BooleanQuery#getMaxClauseCount} when the query is rewritten, \n   *  then the maxClauseCount will be used instead.\n   * @throws IllegalArgumentException if minimumSimilarity is &gt;= 1 or &lt; 0\n   * or if prefixLength &lt; 0\n   */\n  public FuzzyQuery(Term term, float minimumSimilarity, int prefixLength,\n      int maxExpansions) {\n    this.term = term;\n    \n    if (minimumSimilarity >= 1.0f)\n      throw new IllegalArgumentException(\"minimumSimilarity >= 1\");\n    else if (minimumSimilarity < 0.0f)\n      throw new IllegalArgumentException(\"minimumSimilarity < 0\");\n    if (prefixLength < 0)\n      throw new IllegalArgumentException(\"prefixLength < 0\");\n    if (maxExpansions < 0)\n      throw new IllegalArgumentException(\"maxExpansions < 0\");\n    \n    setRewriteMethod(new MultiTermQuery.TopTermsScoringBooleanQueryRewrite(maxExpansions));\n    \n    if (term.text().length() > 1.0f / (1.0f - minimumSimilarity)) {\n      this.termLongEnough = true;\n    }\n    \n    this.minimumSimilarity = minimumSimilarity;\n    this.prefixLength = prefixLength;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5acb0ee59cc50caf85402e92d148fdb2af61bc19","date":1272929037,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/FuzzyQuery#FuzzyQuery(Term,float,int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FuzzyQuery#FuzzyQuery(Term,float,int,int).mjava","sourceNew":"  /**\n   * Create a new FuzzyQuery that will match terms with a similarity \n   * of at least <code>minimumSimilarity</code> to <code>term</code>.\n   * If a <code>prefixLength</code> &gt; 0 is specified, a common prefix\n   * of that length is also required.\n   * \n   * @param term the term to search for\n   * @param minimumSimilarity a value between 0 and 1 to set the required similarity\n   *  between the query term and the matching terms. For example, for a\n   *  <code>minimumSimilarity</code> of <code>0.5</code> a term of the same length\n   *  as the query term is considered similar to the query term if the edit distance\n   *  between both terms is less than <code>length(term)*0.5</code>\n   * @param prefixLength length of common (non-fuzzy) prefix\n   * @param maxExpansions the maximum number of terms to match. If this number is\n   *  greater than {@link BooleanQuery#getMaxClauseCount} when the query is rewritten, \n   *  then the maxClauseCount will be used instead.\n   * @throws IllegalArgumentException if minimumSimilarity is &gt;= 1 or &lt; 0\n   * or if prefixLength &lt; 0\n   */\n  public FuzzyQuery(Term term, float minimumSimilarity, int prefixLength,\n      int maxExpansions) {\n    super(term.field());\n    this.term = term;\n    \n    if (minimumSimilarity >= 1.0f)\n      throw new IllegalArgumentException(\"minimumSimilarity >= 1\");\n    else if (minimumSimilarity < 0.0f)\n      throw new IllegalArgumentException(\"minimumSimilarity < 0\");\n    if (prefixLength < 0)\n      throw new IllegalArgumentException(\"prefixLength < 0\");\n    if (maxExpansions < 0)\n      throw new IllegalArgumentException(\"maxExpansions < 0\");\n    \n    setRewriteMethod(new MultiTermQuery.TopTermsScoringBooleanQueryRewrite(maxExpansions));\n    \n    String text = term.text();\n    if (text.codePointCount(0, text.length()) > 1.0f / (1.0f - minimumSimilarity)) {\n      this.termLongEnough = true;\n    }\n    \n    this.minimumSimilarity = minimumSimilarity;\n    this.prefixLength = prefixLength;\n  }\n\n","sourceOld":"  /**\n   * Create a new FuzzyQuery that will match terms with a similarity \n   * of at least <code>minimumSimilarity</code> to <code>term</code>.\n   * If a <code>prefixLength</code> &gt; 0 is specified, a common prefix\n   * of that length is also required.\n   * \n   * @param term the term to search for\n   * @param minimumSimilarity a value between 0 and 1 to set the required similarity\n   *  between the query term and the matching terms. For example, for a\n   *  <code>minimumSimilarity</code> of <code>0.5</code> a term of the same length\n   *  as the query term is considered similar to the query term if the edit distance\n   *  between both terms is less than <code>length(term)*0.5</code>\n   * @param prefixLength length of common (non-fuzzy) prefix\n   * @param maxExpansions the maximum number of terms to match. If this number is\n   *  greater than {@link BooleanQuery#getMaxClauseCount} when the query is rewritten, \n   *  then the maxClauseCount will be used instead.\n   * @throws IllegalArgumentException if minimumSimilarity is &gt;= 1 or &lt; 0\n   * or if prefixLength &lt; 0\n   */\n  public FuzzyQuery(Term term, float minimumSimilarity, int prefixLength,\n      int maxExpansions) {\n    super(term.field());\n    this.term = term;\n    \n    if (minimumSimilarity >= 1.0f)\n      throw new IllegalArgumentException(\"minimumSimilarity >= 1\");\n    else if (minimumSimilarity < 0.0f)\n      throw new IllegalArgumentException(\"minimumSimilarity < 0\");\n    if (prefixLength < 0)\n      throw new IllegalArgumentException(\"prefixLength < 0\");\n    if (maxExpansions < 0)\n      throw new IllegalArgumentException(\"maxExpansions < 0\");\n    \n    setRewriteMethod(new MultiTermQuery.TopTermsScoringBooleanQueryRewrite(maxExpansions));\n    \n    if (term.text().length() > 1.0f / (1.0f - minimumSimilarity)) {\n      this.termLongEnough = true;\n    }\n    \n    this.minimumSimilarity = minimumSimilarity;\n    this.prefixLength = prefixLength;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a4d59223802237d352245759cf541e315aab20a","date":1285686672,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/FuzzyQuery#FuzzyQuery(Term,float,int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FuzzyQuery#FuzzyQuery(Term,float,int,int).mjava","sourceNew":"  /**\n   * Create a new FuzzyQuery that will match terms with a similarity \n   * of at least <code>minimumSimilarity</code> to <code>term</code>.\n   * If a <code>prefixLength</code> &gt; 0 is specified, a common prefix\n   * of that length is also required.\n   * \n   * @param term the term to search for\n   * @param minimumSimilarity a value between 0 and 1 to set the required similarity\n   *  between the query term and the matching terms. For example, for a\n   *  <code>minimumSimilarity</code> of <code>0.5</code> a term of the same length\n   *  as the query term is considered similar to the query term if the edit distance\n   *  between both terms is less than <code>length(term)*0.5</code>\n   *  <p>\n   *  Alternatively, if <code>minimumSimilarity</code> is >= 1f, it is interpreted \n   *  as a pure Levenshtein edit distance. For example, a value of <code>2f</code>\n   *  will match all terms within an edit distance of <code>2</code> from the \n   *  query term. Edit distances specified in this way may not be fractional.\n   *  \n   * @param prefixLength length of common (non-fuzzy) prefix\n   * @param maxExpansions the maximum number of terms to match. If this number is\n   *  greater than {@link BooleanQuery#getMaxClauseCount} when the query is rewritten, \n   *  then the maxClauseCount will be used instead.\n   * @throws IllegalArgumentException if minimumSimilarity is &gt;= 1 or &lt; 0\n   * or if prefixLength &lt; 0\n   */\n  public FuzzyQuery(Term term, float minimumSimilarity, int prefixLength,\n      int maxExpansions) {\n    super(term.field());\n    this.term = term;\n    \n    if (minimumSimilarity >= 1.0f && minimumSimilarity != (int)minimumSimilarity)\n      throw new IllegalArgumentException(\"fractional edit distances are not allowed\");\n    if (minimumSimilarity < 0.0f)\n      throw new IllegalArgumentException(\"minimumSimilarity < 0\");\n    if (prefixLength < 0)\n      throw new IllegalArgumentException(\"prefixLength < 0\");\n    if (maxExpansions < 0)\n      throw new IllegalArgumentException(\"maxExpansions < 0\");\n    \n    setRewriteMethod(new MultiTermQuery.TopTermsScoringBooleanQueryRewrite(maxExpansions));\n    \n    String text = term.text();\n    int len = text.codePointCount(0, text.length());\n    if (len > 0 && (minimumSimilarity >= 1f || len > 1.0f / (1.0f - minimumSimilarity))) {\n      this.termLongEnough = true;\n    }\n    \n    this.minimumSimilarity = minimumSimilarity;\n    this.prefixLength = prefixLength;\n  }\n\n","sourceOld":"  /**\n   * Create a new FuzzyQuery that will match terms with a similarity \n   * of at least <code>minimumSimilarity</code> to <code>term</code>.\n   * If a <code>prefixLength</code> &gt; 0 is specified, a common prefix\n   * of that length is also required.\n   * \n   * @param term the term to search for\n   * @param minimumSimilarity a value between 0 and 1 to set the required similarity\n   *  between the query term and the matching terms. For example, for a\n   *  <code>minimumSimilarity</code> of <code>0.5</code> a term of the same length\n   *  as the query term is considered similar to the query term if the edit distance\n   *  between both terms is less than <code>length(term)*0.5</code>\n   * @param prefixLength length of common (non-fuzzy) prefix\n   * @param maxExpansions the maximum number of terms to match. If this number is\n   *  greater than {@link BooleanQuery#getMaxClauseCount} when the query is rewritten, \n   *  then the maxClauseCount will be used instead.\n   * @throws IllegalArgumentException if minimumSimilarity is &gt;= 1 or &lt; 0\n   * or if prefixLength &lt; 0\n   */\n  public FuzzyQuery(Term term, float minimumSimilarity, int prefixLength,\n      int maxExpansions) {\n    super(term.field());\n    this.term = term;\n    \n    if (minimumSimilarity >= 1.0f)\n      throw new IllegalArgumentException(\"minimumSimilarity >= 1\");\n    else if (minimumSimilarity < 0.0f)\n      throw new IllegalArgumentException(\"minimumSimilarity < 0\");\n    if (prefixLength < 0)\n      throw new IllegalArgumentException(\"prefixLength < 0\");\n    if (maxExpansions < 0)\n      throw new IllegalArgumentException(\"maxExpansions < 0\");\n    \n    setRewriteMethod(new MultiTermQuery.TopTermsScoringBooleanQueryRewrite(maxExpansions));\n    \n    String text = term.text();\n    if (text.codePointCount(0, text.length()) > 1.0f / (1.0f - minimumSimilarity)) {\n      this.termLongEnough = true;\n    }\n    \n    this.minimumSimilarity = minimumSimilarity;\n    this.prefixLength = prefixLength;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/FuzzyQuery#FuzzyQuery(Term,float,int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FuzzyQuery#FuzzyQuery(Term,float,int,int).mjava","sourceNew":"  /**\n   * Create a new FuzzyQuery that will match terms with a similarity \n   * of at least <code>minimumSimilarity</code> to <code>term</code>.\n   * If a <code>prefixLength</code> &gt; 0 is specified, a common prefix\n   * of that length is also required.\n   * \n   * @param term the term to search for\n   * @param minimumSimilarity a value between 0 and 1 to set the required similarity\n   *  between the query term and the matching terms. For example, for a\n   *  <code>minimumSimilarity</code> of <code>0.5</code> a term of the same length\n   *  as the query term is considered similar to the query term if the edit distance\n   *  between both terms is less than <code>length(term)*0.5</code>\n   *  <p>\n   *  Alternatively, if <code>minimumSimilarity</code> is >= 1f, it is interpreted \n   *  as a pure Levenshtein edit distance. For example, a value of <code>2f</code>\n   *  will match all terms within an edit distance of <code>2</code> from the \n   *  query term. Edit distances specified in this way may not be fractional.\n   *  \n   * @param prefixLength length of common (non-fuzzy) prefix\n   * @param maxExpansions the maximum number of terms to match. If this number is\n   *  greater than {@link BooleanQuery#getMaxClauseCount} when the query is rewritten, \n   *  then the maxClauseCount will be used instead.\n   * @throws IllegalArgumentException if minimumSimilarity is &gt;= 1 or &lt; 0\n   * or if prefixLength &lt; 0\n   */\n  public FuzzyQuery(Term term, float minimumSimilarity, int prefixLength,\n      int maxExpansions) {\n    super(term.field());\n    this.term = term;\n    \n    if (minimumSimilarity >= 1.0f && minimumSimilarity != (int)minimumSimilarity)\n      throw new IllegalArgumentException(\"fractional edit distances are not allowed\");\n    if (minimumSimilarity < 0.0f)\n      throw new IllegalArgumentException(\"minimumSimilarity < 0\");\n    if (prefixLength < 0)\n      throw new IllegalArgumentException(\"prefixLength < 0\");\n    if (maxExpansions < 0)\n      throw new IllegalArgumentException(\"maxExpansions < 0\");\n    \n    setRewriteMethod(new MultiTermQuery.TopTermsScoringBooleanQueryRewrite(maxExpansions));\n    \n    String text = term.text();\n    int len = text.codePointCount(0, text.length());\n    if (len > 0 && (minimumSimilarity >= 1f || len > 1.0f / (1.0f - minimumSimilarity))) {\n      this.termLongEnough = true;\n    }\n    \n    this.minimumSimilarity = minimumSimilarity;\n    this.prefixLength = prefixLength;\n  }\n\n","sourceOld":"  /**\n   * Create a new FuzzyQuery that will match terms with a similarity \n   * of at least <code>minimumSimilarity</code> to <code>term</code>.\n   * If a <code>prefixLength</code> &gt; 0 is specified, a common prefix\n   * of that length is also required.\n   * \n   * @param term the term to search for\n   * @param minimumSimilarity a value between 0 and 1 to set the required similarity\n   *  between the query term and the matching terms. For example, for a\n   *  <code>minimumSimilarity</code> of <code>0.5</code> a term of the same length\n   *  as the query term is considered similar to the query term if the edit distance\n   *  between both terms is less than <code>length(term)*0.5</code>\n   * @param prefixLength length of common (non-fuzzy) prefix\n   * @param maxExpansions the maximum number of terms to match. If this number is\n   *  greater than {@link BooleanQuery#getMaxClauseCount} when the query is rewritten, \n   *  then the maxClauseCount will be used instead.\n   * @throws IllegalArgumentException if minimumSimilarity is &gt;= 1 or &lt; 0\n   * or if prefixLength &lt; 0\n   */\n  public FuzzyQuery(Term term, float minimumSimilarity, int prefixLength,\n      int maxExpansions) {\n    super(term.field());\n    this.term = term;\n    \n    if (minimumSimilarity >= 1.0f)\n      throw new IllegalArgumentException(\"minimumSimilarity >= 1\");\n    else if (minimumSimilarity < 0.0f)\n      throw new IllegalArgumentException(\"minimumSimilarity < 0\");\n    if (prefixLength < 0)\n      throw new IllegalArgumentException(\"prefixLength < 0\");\n    if (maxExpansions < 0)\n      throw new IllegalArgumentException(\"maxExpansions < 0\");\n    \n    setRewriteMethod(new MultiTermQuery.TopTermsScoringBooleanQueryRewrite(maxExpansions));\n    \n    String text = term.text();\n    if (text.codePointCount(0, text.length()) > 1.0f / (1.0f - minimumSimilarity)) {\n      this.termLongEnough = true;\n    }\n    \n    this.minimumSimilarity = minimumSimilarity;\n    this.prefixLength = prefixLength;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FuzzyQuery#FuzzyQuery(Term,float,int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FuzzyQuery#FuzzyQuery(Term,float,int,int).mjava","sourceNew":"  /**\n   * Create a new FuzzyQuery that will match terms with a similarity \n   * of at least <code>minimumSimilarity</code> to <code>term</code>.\n   * If a <code>prefixLength</code> &gt; 0 is specified, a common prefix\n   * of that length is also required.\n   * \n   * @param term the term to search for\n   * @param minimumSimilarity a value between 0 and 1 to set the required similarity\n   *  between the query term and the matching terms. For example, for a\n   *  <code>minimumSimilarity</code> of <code>0.5</code> a term of the same length\n   *  as the query term is considered similar to the query term if the edit distance\n   *  between both terms is less than <code>length(term)*0.5</code>\n   *  <p>\n   *  Alternatively, if <code>minimumSimilarity</code> is >= 1f, it is interpreted \n   *  as a pure Levenshtein edit distance. For example, a value of <code>2f</code>\n   *  will match all terms within an edit distance of <code>2</code> from the \n   *  query term. Edit distances specified in this way may not be fractional.\n   *  \n   * @param prefixLength length of common (non-fuzzy) prefix\n   * @param maxExpansions the maximum number of terms to match. If this number is\n   *  greater than {@link BooleanQuery#getMaxClauseCount} when the query is rewritten, \n   *  then the maxClauseCount will be used instead.\n   * @throws IllegalArgumentException if minimumSimilarity is &gt;= 1 or &lt; 0\n   * or if prefixLength &lt; 0\n   */\n  public FuzzyQuery(Term term, float minimumSimilarity, int prefixLength,\n      int maxExpansions) {\n    super(term.field());\n    this.term = term;\n    \n    if (minimumSimilarity >= 1.0f && minimumSimilarity != (int)minimumSimilarity)\n      throw new IllegalArgumentException(\"fractional edit distances are not allowed\");\n    if (minimumSimilarity < 0.0f)\n      throw new IllegalArgumentException(\"minimumSimilarity < 0\");\n    if (prefixLength < 0)\n      throw new IllegalArgumentException(\"prefixLength < 0\");\n    if (maxExpansions < 0)\n      throw new IllegalArgumentException(\"maxExpansions < 0\");\n    \n    setRewriteMethod(new MultiTermQuery.TopTermsScoringBooleanQueryRewrite(maxExpansions));\n    \n    String text = term.text();\n    int len = text.codePointCount(0, text.length());\n    if (len > 0 && (minimumSimilarity >= 1f || len > 1.0f / (1.0f - minimumSimilarity))) {\n      this.termLongEnough = true;\n    }\n    \n    this.minimumSimilarity = minimumSimilarity;\n    this.prefixLength = prefixLength;\n  }\n\n","sourceOld":"  /**\n   * Create a new FuzzyQuery that will match terms with a similarity \n   * of at least <code>minimumSimilarity</code> to <code>term</code>.\n   * If a <code>prefixLength</code> &gt; 0 is specified, a common prefix\n   * of that length is also required.\n   * \n   * @param term the term to search for\n   * @param minimumSimilarity a value between 0 and 1 to set the required similarity\n   *  between the query term and the matching terms. For example, for a\n   *  <code>minimumSimilarity</code> of <code>0.5</code> a term of the same length\n   *  as the query term is considered similar to the query term if the edit distance\n   *  between both terms is less than <code>length(term)*0.5</code>\n   *  <p>\n   *  Alternatively, if <code>minimumSimilarity</code> is >= 1f, it is interpreted \n   *  as a pure Levenshtein edit distance. For example, a value of <code>2f</code>\n   *  will match all terms within an edit distance of <code>2</code> from the \n   *  query term. Edit distances specified in this way may not be fractional.\n   *  \n   * @param prefixLength length of common (non-fuzzy) prefix\n   * @param maxExpansions the maximum number of terms to match. If this number is\n   *  greater than {@link BooleanQuery#getMaxClauseCount} when the query is rewritten, \n   *  then the maxClauseCount will be used instead.\n   * @throws IllegalArgumentException if minimumSimilarity is &gt;= 1 or &lt; 0\n   * or if prefixLength &lt; 0\n   */\n  public FuzzyQuery(Term term, float minimumSimilarity, int prefixLength,\n      int maxExpansions) {\n    super(term.field());\n    this.term = term;\n    \n    if (minimumSimilarity >= 1.0f && minimumSimilarity != (int)minimumSimilarity)\n      throw new IllegalArgumentException(\"fractional edit distances are not allowed\");\n    if (minimumSimilarity < 0.0f)\n      throw new IllegalArgumentException(\"minimumSimilarity < 0\");\n    if (prefixLength < 0)\n      throw new IllegalArgumentException(\"prefixLength < 0\");\n    if (maxExpansions < 0)\n      throw new IllegalArgumentException(\"maxExpansions < 0\");\n    \n    setRewriteMethod(new MultiTermQuery.TopTermsScoringBooleanQueryRewrite(maxExpansions));\n    \n    String text = term.text();\n    int len = text.codePointCount(0, text.length());\n    if (len > 0 && (minimumSimilarity >= 1f || len > 1.0f / (1.0f - minimumSimilarity))) {\n      this.termLongEnough = true;\n    }\n    \n    this.minimumSimilarity = minimumSimilarity;\n    this.prefixLength = prefixLength;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["3a4d59223802237d352245759cf541e315aab20a"],"5acb0ee59cc50caf85402e92d148fdb2af61bc19":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"3a4d59223802237d352245759cf541e315aab20a":["5acb0ee59cc50caf85402e92d148fdb2af61bc19"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["5acb0ee59cc50caf85402e92d148fdb2af61bc19","3a4d59223802237d352245759cf541e315aab20a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5acb0ee59cc50caf85402e92d148fdb2af61bc19":["3a4d59223802237d352245759cf541e315aab20a","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["5acb0ee59cc50caf85402e92d148fdb2af61bc19"],"3a4d59223802237d352245759cf541e315aab20a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}