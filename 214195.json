{"path":"src/java/org/apache/lucene/index/IndexReader#setNorm(int,String,float).mjava","commits":[{"id":"53df68381fe22c8eaf758533d0d5e1db43b925ac","date":1071529482,"type":0,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#setNorm(int,String,float).mjava","pathOld":"/dev/null","sourceNew":"  /** Expert: Resets the normalization factor for the named field of the named\n   * document.\n   *\n   * @see #norms(String)\n   * @see Similarity#decodeNorm(byte)\n   */\n  public void setNorm(int doc, String field, float value)\n    throws IOException {\n    setNorm(doc, field, Similarity.encodeNorm(value));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"770281b8a8459cafcdd2354b6a06078fea2d83c9","date":1077308096,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#setNorm(int,String,float).mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#setNorm(int,String,float).mjava","sourceNew":"  /** Expert: Resets the normalization factor for the named field of the named\n   * document.\n   *\n   * @see #norms(String)\n   * @see Similarity#decodeNorm(byte)\n   */\n  public void setNorm(int doc, String field, float value)\n          throws IOException {\n    setNorm(doc, field, Similarity.encodeNorm(value));\n  }\n\n","sourceOld":"  /** Expert: Resets the normalization factor for the named field of the named\n   * document.\n   *\n   * @see #norms(String)\n   * @see Similarity#decodeNorm(byte)\n   */\n  public void setNorm(int doc, String field, float value)\n    throws IOException {\n    setNorm(doc, field, Similarity.encodeNorm(value));\n  }\n\n","bugFix":null,"bugIntro":["1b54a9bc667895a2095a886184bf69a3179e63df"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1b54a9bc667895a2095a886184bf69a3179e63df","date":1172088096,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#setNorm(int,String,float).mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#setNorm(int,String,float).mjava","sourceNew":"  /** Expert: Resets the normalization factor for the named field of the named\n   * document.\n   *\n   * @see #norms(String)\n   * @see Similarity#decodeNorm(byte)\n   * \n   * @throws StaleReaderException if the index has changed\n   *  since this reader was opened\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if this reader was closed already\n   *  or there is a low-level IO error\n   */\n  public void setNorm(int doc, String field, float value)\n          throws StaleReaderException, CorruptIndexException, LockObtainFailedException, IOException {\n    setNorm(doc, field, Similarity.encodeNorm(value));\n  }\n\n","sourceOld":"  /** Expert: Resets the normalization factor for the named field of the named\n   * document.\n   *\n   * @see #norms(String)\n   * @see Similarity#decodeNorm(byte)\n   */\n  public void setNorm(int doc, String field, float value)\n          throws IOException {\n    setNorm(doc, field, Similarity.encodeNorm(value));\n  }\n\n","bugFix":["770281b8a8459cafcdd2354b6a06078fea2d83c9"],"bugIntro":["328c1568e471f0c6eaa49ec00334ca59e573710f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"328c1568e471f0c6eaa49ec00334ca59e573710f","date":1173897963,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#setNorm(int,String,float).mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#setNorm(int,String,float).mjava","sourceNew":"  /** Expert: Resets the normalization factor for the named field of the named\n   * document.\n   *\n   * @see #norms(String)\n   * @see Similarity#decodeNorm(byte)\n   * \n   * @throws StaleReaderException if the index has changed\n   *  since this reader was opened\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if there is a low-level IO error\n   */\n  public void setNorm(int doc, String field, float value)\n          throws StaleReaderException, CorruptIndexException, LockObtainFailedException, IOException {\n    ensureOpen();\n    setNorm(doc, field, Similarity.encodeNorm(value));\n  }\n\n","sourceOld":"  /** Expert: Resets the normalization factor for the named field of the named\n   * document.\n   *\n   * @see #norms(String)\n   * @see Similarity#decodeNorm(byte)\n   * \n   * @throws StaleReaderException if the index has changed\n   *  since this reader was opened\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if this reader was closed already\n   *  or there is a low-level IO error\n   */\n  public void setNorm(int doc, String field, float value)\n          throws StaleReaderException, CorruptIndexException, LockObtainFailedException, IOException {\n    setNorm(doc, field, Similarity.encodeNorm(value));\n  }\n\n","bugFix":["1b54a9bc667895a2095a886184bf69a3179e63df"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0eb5b0b5b98c777dad412afbfb347d2c0889327","date":1259094367,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#setNorm(int,String,float).mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#setNorm(int,String,float).mjava","sourceNew":"  /** Expert: Resets the normalization factor for the named field of the named\n   * document.\n   *\n   * @see #norms(String)\n   * @see Similarity#decodeNormValue(byte)\n   * \n   * @throws StaleReaderException if the index has changed\n   *  since this reader was opened\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if there is a low-level IO error\n   */\n  public void setNorm(int doc, String field, float value)\n          throws StaleReaderException, CorruptIndexException, LockObtainFailedException, IOException {\n    ensureOpen();\n    setNorm(doc, field, Similarity.getDefault().encodeNormValue(value));\n  }\n\n","sourceOld":"  /** Expert: Resets the normalization factor for the named field of the named\n   * document.\n   *\n   * @see #norms(String)\n   * @see Similarity#decodeNorm(byte)\n   * \n   * @throws StaleReaderException if the index has changed\n   *  since this reader was opened\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if there is a low-level IO error\n   */\n  public void setNorm(int doc, String field, float value)\n          throws StaleReaderException, CorruptIndexException, LockObtainFailedException, IOException {\n    ensureOpen();\n    setNorm(doc, field, Similarity.encodeNorm(value));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#setNorm(int,String,float).mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#setNorm(int,String,float).mjava","sourceNew":"  /** Expert: Resets the normalization factor for the named field of the named\n   * document.\n   *\n   * @see #norms(String)\n   * @see Similarity#decodeNormValue(byte)\n   * \n   * @throws StaleReaderException if the index has changed\n   *  since this reader was opened\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if there is a low-level IO error\n   */\n  public void setNorm(int doc, String field, float value)\n          throws StaleReaderException, CorruptIndexException, LockObtainFailedException, IOException {\n    ensureOpen();\n    setNorm(doc, field, Similarity.getDefault().encodeNormValue(value));\n  }\n\n","sourceOld":"  /** Expert: Resets the normalization factor for the named field of the named\n   * document.\n   *\n   * @see #norms(String)\n   * @see Similarity#decodeNormValue(byte)\n   * \n   * @throws StaleReaderException if the index has changed\n   *  since this reader was opened\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if there is a low-level IO error\n   */\n  public void setNorm(int doc, String field, float value)\n          throws StaleReaderException, CorruptIndexException, LockObtainFailedException, IOException {\n    ensureOpen();\n    setNorm(doc, field, Similarity.getDefault().encodeNormValue(value));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"770281b8a8459cafcdd2354b6a06078fea2d83c9":["53df68381fe22c8eaf758533d0d5e1db43b925ac"],"328c1568e471f0c6eaa49ec00334ca59e573710f":["1b54a9bc667895a2095a886184bf69a3179e63df"],"1b54a9bc667895a2095a886184bf69a3179e63df":["770281b8a8459cafcdd2354b6a06078fea2d83c9"],"53df68381fe22c8eaf758533d0d5e1db43b925ac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b0eb5b0b5b98c777dad412afbfb347d2c0889327":["328c1568e471f0c6eaa49ec00334ca59e573710f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["b0eb5b0b5b98c777dad412afbfb347d2c0889327"]},"commit2Childs":{"770281b8a8459cafcdd2354b6a06078fea2d83c9":["1b54a9bc667895a2095a886184bf69a3179e63df"],"328c1568e471f0c6eaa49ec00334ca59e573710f":["b0eb5b0b5b98c777dad412afbfb347d2c0889327"],"1b54a9bc667895a2095a886184bf69a3179e63df":["328c1568e471f0c6eaa49ec00334ca59e573710f"],"53df68381fe22c8eaf758533d0d5e1db43b925ac":["770281b8a8459cafcdd2354b6a06078fea2d83c9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["53df68381fe22c8eaf758533d0d5e1db43b925ac"],"b0eb5b0b5b98c777dad412afbfb347d2c0889327":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}