{"path":"lucene/analysis/nori/src/java/org/apache/lucene/analysis/ko/dict/ConnectionCosts#ConnectionCosts().mjava","commits":[{"id":"8493925b2e70246f0961df584c01a8c2e61ee52f","date":1523611602,"type":0,"author":"Jim Ferenczi","isMerge":false,"pathNew":"lucene/analysis/nori/src/java/org/apache/lucene/analysis/ko/dict/ConnectionCosts#ConnectionCosts().mjava","pathOld":"/dev/null","sourceNew":"  private ConnectionCosts() throws IOException {\n    InputStream is = null;\n    ByteBuffer buffer = null;\n    boolean success = false;\n    try {\n      is = BinaryDictionary.getClassResource(getClass(), FILENAME_SUFFIX);\n      is = new BufferedInputStream(is);\n      final DataInput in = new InputStreamDataInput(is);\n      CodecUtil.checkHeader(in, HEADER, VERSION, VERSION);\n      this.forwardSize = in.readVInt();\n      int backwardSize = in.readVInt();\n      int size = forwardSize * backwardSize;\n\n      // copy the matrix into a direct byte buffer\n      final ByteBuffer tmpBuffer = ByteBuffer.allocateDirect(size*2);\n      int accum = 0;\n      for (int j = 0; j < backwardSize; j++) {\n        for (int i = 0; i < forwardSize; i++) {\n          accum += in.readZInt();\n          tmpBuffer.putShort((short) accum);\n        }\n      }\n      buffer = tmpBuffer.asReadOnlyBuffer();\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(is);\n      } else {\n        IOUtils.closeWhileHandlingException(is);\n      }\n    }\n    this.buffer = buffer;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c6453827f947004a68ad9db7418781e9df2f660","date":1523626811,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/analysis/nori/src/java/org/apache/lucene/analysis/ko/dict/ConnectionCosts#ConnectionCosts().mjava","pathOld":"/dev/null","sourceNew":"  private ConnectionCosts() throws IOException {\n    InputStream is = null;\n    ByteBuffer buffer = null;\n    boolean success = false;\n    try {\n      is = BinaryDictionary.getClassResource(getClass(), FILENAME_SUFFIX);\n      is = new BufferedInputStream(is);\n      final DataInput in = new InputStreamDataInput(is);\n      CodecUtil.checkHeader(in, HEADER, VERSION, VERSION);\n      this.forwardSize = in.readVInt();\n      int backwardSize = in.readVInt();\n      int size = forwardSize * backwardSize;\n\n      // copy the matrix into a direct byte buffer\n      final ByteBuffer tmpBuffer = ByteBuffer.allocateDirect(size*2);\n      int accum = 0;\n      for (int j = 0; j < backwardSize; j++) {\n        for (int i = 0; i < forwardSize; i++) {\n          accum += in.readZInt();\n          tmpBuffer.putShort((short) accum);\n        }\n      }\n      buffer = tmpBuffer.asReadOnlyBuffer();\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(is);\n      } else {\n        IOUtils.closeWhileHandlingException(is);\n      }\n    }\n    this.buffer = buffer;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac9f7831922bb899baba6064894c8ebb795cdee2","date":1566842943,"type":3,"author":"Namgyu Kim","isMerge":false,"pathNew":"lucene/analysis/nori/src/java/org/apache/lucene/analysis/ko/dict/ConnectionCosts#ConnectionCosts().mjava","pathOld":"lucene/analysis/nori/src/java/org/apache/lucene/analysis/ko/dict/ConnectionCosts#ConnectionCosts().mjava","sourceNew":"  private ConnectionCosts() throws IOException {\n    InputStream is = null;\n    ByteBuffer buffer;\n    boolean success = false;\n    try {\n      is = BinaryDictionary.getClassResource(getClass(), FILENAME_SUFFIX);\n      is = new BufferedInputStream(is);\n      final DataInput in = new InputStreamDataInput(is);\n      CodecUtil.checkHeader(in, HEADER, VERSION, VERSION);\n      this.forwardSize = in.readVInt();\n      int backwardSize = in.readVInt();\n      int size = forwardSize * backwardSize;\n\n      // copy the matrix into a direct byte buffer\n      final ByteBuffer tmpBuffer = ByteBuffer.allocateDirect(size*2);\n      int accum = 0;\n      for (int j = 0; j < backwardSize; j++) {\n        for (int i = 0; i < forwardSize; i++) {\n          accum += in.readZInt();\n          tmpBuffer.putShort((short) accum);\n        }\n      }\n      buffer = tmpBuffer.asReadOnlyBuffer();\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(is);\n      } else {\n        IOUtils.closeWhileHandlingException(is);\n      }\n    }\n    this.buffer = buffer;\n  }\n\n","sourceOld":"  private ConnectionCosts() throws IOException {\n    InputStream is = null;\n    ByteBuffer buffer = null;\n    boolean success = false;\n    try {\n      is = BinaryDictionary.getClassResource(getClass(), FILENAME_SUFFIX);\n      is = new BufferedInputStream(is);\n      final DataInput in = new InputStreamDataInput(is);\n      CodecUtil.checkHeader(in, HEADER, VERSION, VERSION);\n      this.forwardSize = in.readVInt();\n      int backwardSize = in.readVInt();\n      int size = forwardSize * backwardSize;\n\n      // copy the matrix into a direct byte buffer\n      final ByteBuffer tmpBuffer = ByteBuffer.allocateDirect(size*2);\n      int accum = 0;\n      for (int j = 0; j < backwardSize; j++) {\n        for (int i = 0; i < forwardSize; i++) {\n          accum += in.readZInt();\n          tmpBuffer.putShort((short) accum);\n        }\n      }\n      buffer = tmpBuffer.asReadOnlyBuffer();\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(is);\n      } else {\n        IOUtils.closeWhileHandlingException(is);\n      }\n    }\n    this.buffer = buffer;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dc0cab5c9c89e5632387d6c500fc935f0851403b","date":1583169104,"type":3,"author":"Namgyu Kim","isMerge":false,"pathNew":"lucene/analysis/nori/src/java/org/apache/lucene/analysis/ko/dict/ConnectionCosts#ConnectionCosts().mjava","pathOld":"lucene/analysis/nori/src/java/org/apache/lucene/analysis/ko/dict/ConnectionCosts#ConnectionCosts().mjava","sourceNew":"  private ConnectionCosts() throws IOException {\n    this(BinaryDictionary.ResourceScheme.CLASSPATH, ConnectionCosts.class.getName());\n  }\n\n","sourceOld":"  private ConnectionCosts() throws IOException {\n    InputStream is = null;\n    ByteBuffer buffer;\n    boolean success = false;\n    try {\n      is = BinaryDictionary.getClassResource(getClass(), FILENAME_SUFFIX);\n      is = new BufferedInputStream(is);\n      final DataInput in = new InputStreamDataInput(is);\n      CodecUtil.checkHeader(in, HEADER, VERSION, VERSION);\n      this.forwardSize = in.readVInt();\n      int backwardSize = in.readVInt();\n      int size = forwardSize * backwardSize;\n\n      // copy the matrix into a direct byte buffer\n      final ByteBuffer tmpBuffer = ByteBuffer.allocateDirect(size*2);\n      int accum = 0;\n      for (int j = 0; j < backwardSize; j++) {\n        for (int i = 0; i < forwardSize; i++) {\n          accum += in.readZInt();\n          tmpBuffer.putShort((short) accum);\n        }\n      }\n      buffer = tmpBuffer.asReadOnlyBuffer();\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(is);\n      } else {\n        IOUtils.closeWhileHandlingException(is);\n      }\n    }\n    this.buffer = buffer;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8493925b2e70246f0961df584c01a8c2e61ee52f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"dc0cab5c9c89e5632387d6c500fc935f0851403b":["ac9f7831922bb899baba6064894c8ebb795cdee2"],"ac9f7831922bb899baba6064894c8ebb795cdee2":["5c6453827f947004a68ad9db7418781e9df2f660"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["dc0cab5c9c89e5632387d6c500fc935f0851403b"],"5c6453827f947004a68ad9db7418781e9df2f660":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8493925b2e70246f0961df584c01a8c2e61ee52f"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8493925b2e70246f0961df584c01a8c2e61ee52f","5c6453827f947004a68ad9db7418781e9df2f660"],"8493925b2e70246f0961df584c01a8c2e61ee52f":["5c6453827f947004a68ad9db7418781e9df2f660"],"dc0cab5c9c89e5632387d6c500fc935f0851403b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ac9f7831922bb899baba6064894c8ebb795cdee2":["dc0cab5c9c89e5632387d6c500fc935f0851403b"],"5c6453827f947004a68ad9db7418781e9df2f660":["ac9f7831922bb899baba6064894c8ebb795cdee2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}