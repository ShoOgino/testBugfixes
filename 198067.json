{"path":"src/test/org/apache/lucene/search/TestNumericRangeQuery32#testRandomTrieAndClassicRangeQuery(int).mjava","commits":[{"id":"53b6c192847de8643a5da505cc433cbf8476a175","date":1245413392,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestNumericRangeQuery32#testRandomTrieAndClassicRangeQuery(int).mjava","pathOld":"/dev/null","sourceNew":"  private void testRandomTrieAndClassicRangeQuery(int precisionStep) throws Exception {\n    final Random rnd=newRandom();\n    String field=\"field\"+precisionStep;\n    int termCountT=0,termCountC=0;\n    for (int i=0; i<50; i++) {\n      int lower=(int)(rnd.nextDouble()*noDocs*distance)+startOffset;\n      int upper=(int)(rnd.nextDouble()*noDocs*distance)+startOffset;\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      // test inclusive range\n      NumericRangeQuery tq=NumericRangeQuery.newIntRange(field, precisionStep, new Integer(lower), new Integer(upper), true, true);\n      RangeQuery cq=new RangeQuery(field, NumericUtils.intToPrefixCoded(lower), NumericUtils.intToPrefixCoded(upper), true, true);\n      cq.setConstantScoreRewrite(true);\n      TopDocs tTopDocs = searcher.search(tq, 1);\n      TopDocs cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and RangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\n      termCountT += tq.getTotalNumberOfTerms();\n      termCountC += cq.getTotalNumberOfTerms();\n      // test exclusive range\n      tq=NumericRangeQuery.newIntRange(field, precisionStep, new Integer(lower), new Integer(upper), false, false);\n      cq=new RangeQuery(field, NumericUtils.intToPrefixCoded(lower), NumericUtils.intToPrefixCoded(upper), false, false);\n      cq.setConstantScoreRewrite(true);\n      tTopDocs = searcher.search(tq, 1);\n      cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and RangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\n      termCountT += tq.getTotalNumberOfTerms();\n      termCountC += cq.getTotalNumberOfTerms();\n      // test left exclusive range\n      tq=NumericRangeQuery.newIntRange(field, precisionStep, new Integer(lower), new Integer(upper), false, true);\n      cq=new RangeQuery(field, NumericUtils.intToPrefixCoded(lower), NumericUtils.intToPrefixCoded(upper), false, true);\n      cq.setConstantScoreRewrite(true);\n      tTopDocs = searcher.search(tq, 1);\n      cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and RangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\n      termCountT += tq.getTotalNumberOfTerms();\n      termCountC += cq.getTotalNumberOfTerms();\n      // test right exclusive range\n      tq=NumericRangeQuery.newIntRange(field, precisionStep, new Integer(lower), new Integer(upper), true, false);\n      cq=new RangeQuery(field, NumericUtils.intToPrefixCoded(lower), NumericUtils.intToPrefixCoded(upper), true, false);\n      cq.setConstantScoreRewrite(true);\n      tTopDocs = searcher.search(tq, 1);\n      cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and RangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\n      termCountT += tq.getTotalNumberOfTerms();\n      termCountC += cq.getTotalNumberOfTerms();\n    }\n    System.out.println(\"Average number of terms during random search on '\" + field + \"':\");\n    System.out.println(\" Trie query: \" + (((double)termCountT)/(50*4)));\n    System.out.println(\" Classical query: \" + (((double)termCountC)/(50*4)));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f612096ab5275c4821d05f126bf45a89f4782b8","date":1246738452,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestNumericRangeQuery32#testRandomTrieAndClassicRangeQuery(int).mjava","pathOld":"src/test/org/apache/lucene/search/TestNumericRangeQuery32#testRandomTrieAndClassicRangeQuery(int).mjava","sourceNew":"  private void testRandomTrieAndClassicRangeQuery(int precisionStep) throws Exception {\n    final Random rnd=newRandom();\n    String field=\"field\"+precisionStep;\n    int termCountT=0,termCountC=0;\n    for (int i=0; i<50; i++) {\n      int lower=(int)(rnd.nextDouble()*noDocs*distance)+startOffset;\n      int upper=(int)(rnd.nextDouble()*noDocs*distance)+startOffset;\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      // test inclusive range\n      NumericRangeQuery tq=NumericRangeQuery.newIntRange(field, precisionStep, new Integer(lower), new Integer(upper), true, true);\n      TermRangeQuery cq=new TermRangeQuery(field, NumericUtils.intToPrefixCoded(lower), NumericUtils.intToPrefixCoded(upper), true, true);\n      cq.setConstantScoreRewrite(true);\n      TopDocs tTopDocs = searcher.search(tq, 1);\n      TopDocs cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\n      termCountT += tq.getTotalNumberOfTerms();\n      termCountC += cq.getTotalNumberOfTerms();\n      // test exclusive range\n      tq=NumericRangeQuery.newIntRange(field, precisionStep, new Integer(lower), new Integer(upper), false, false);\n      cq=new TermRangeQuery(field, NumericUtils.intToPrefixCoded(lower), NumericUtils.intToPrefixCoded(upper), false, false);\n      cq.setConstantScoreRewrite(true);\n      tTopDocs = searcher.search(tq, 1);\n      cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\n      termCountT += tq.getTotalNumberOfTerms();\n      termCountC += cq.getTotalNumberOfTerms();\n      // test left exclusive range\n      tq=NumericRangeQuery.newIntRange(field, precisionStep, new Integer(lower), new Integer(upper), false, true);\n      cq=new TermRangeQuery(field, NumericUtils.intToPrefixCoded(lower), NumericUtils.intToPrefixCoded(upper), false, true);\n      cq.setConstantScoreRewrite(true);\n      tTopDocs = searcher.search(tq, 1);\n      cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\n      termCountT += tq.getTotalNumberOfTerms();\n      termCountC += cq.getTotalNumberOfTerms();\n      // test right exclusive range\n      tq=NumericRangeQuery.newIntRange(field, precisionStep, new Integer(lower), new Integer(upper), true, false);\n      cq=new TermRangeQuery(field, NumericUtils.intToPrefixCoded(lower), NumericUtils.intToPrefixCoded(upper), true, false);\n      cq.setConstantScoreRewrite(true);\n      tTopDocs = searcher.search(tq, 1);\n      cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\n      termCountT += tq.getTotalNumberOfTerms();\n      termCountC += cq.getTotalNumberOfTerms();\n    }\n    System.out.println(\"Average number of terms during random search on '\" + field + \"':\");\n    System.out.println(\" Trie query: \" + (((double)termCountT)/(50*4)));\n    System.out.println(\" Classical query: \" + (((double)termCountC)/(50*4)));\n  }\n\n","sourceOld":"  private void testRandomTrieAndClassicRangeQuery(int precisionStep) throws Exception {\n    final Random rnd=newRandom();\n    String field=\"field\"+precisionStep;\n    int termCountT=0,termCountC=0;\n    for (int i=0; i<50; i++) {\n      int lower=(int)(rnd.nextDouble()*noDocs*distance)+startOffset;\n      int upper=(int)(rnd.nextDouble()*noDocs*distance)+startOffset;\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      // test inclusive range\n      NumericRangeQuery tq=NumericRangeQuery.newIntRange(field, precisionStep, new Integer(lower), new Integer(upper), true, true);\n      RangeQuery cq=new RangeQuery(field, NumericUtils.intToPrefixCoded(lower), NumericUtils.intToPrefixCoded(upper), true, true);\n      cq.setConstantScoreRewrite(true);\n      TopDocs tTopDocs = searcher.search(tq, 1);\n      TopDocs cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and RangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\n      termCountT += tq.getTotalNumberOfTerms();\n      termCountC += cq.getTotalNumberOfTerms();\n      // test exclusive range\n      tq=NumericRangeQuery.newIntRange(field, precisionStep, new Integer(lower), new Integer(upper), false, false);\n      cq=new RangeQuery(field, NumericUtils.intToPrefixCoded(lower), NumericUtils.intToPrefixCoded(upper), false, false);\n      cq.setConstantScoreRewrite(true);\n      tTopDocs = searcher.search(tq, 1);\n      cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and RangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\n      termCountT += tq.getTotalNumberOfTerms();\n      termCountC += cq.getTotalNumberOfTerms();\n      // test left exclusive range\n      tq=NumericRangeQuery.newIntRange(field, precisionStep, new Integer(lower), new Integer(upper), false, true);\n      cq=new RangeQuery(field, NumericUtils.intToPrefixCoded(lower), NumericUtils.intToPrefixCoded(upper), false, true);\n      cq.setConstantScoreRewrite(true);\n      tTopDocs = searcher.search(tq, 1);\n      cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and RangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\n      termCountT += tq.getTotalNumberOfTerms();\n      termCountC += cq.getTotalNumberOfTerms();\n      // test right exclusive range\n      tq=NumericRangeQuery.newIntRange(field, precisionStep, new Integer(lower), new Integer(upper), true, false);\n      cq=new RangeQuery(field, NumericUtils.intToPrefixCoded(lower), NumericUtils.intToPrefixCoded(upper), true, false);\n      cq.setConstantScoreRewrite(true);\n      tTopDocs = searcher.search(tq, 1);\n      cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and RangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\n      termCountT += tq.getTotalNumberOfTerms();\n      termCountC += cq.getTotalNumberOfTerms();\n    }\n    System.out.println(\"Average number of terms during random search on '\" + field + \"':\");\n    System.out.println(\" Trie query: \" + (((double)termCountT)/(50*4)));\n    System.out.println(\" Classical query: \" + (((double)termCountC)/(50*4)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6d9efd94ce1ae8bbba50cd7e7f8c56f5552ba426","date":1247563064,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestNumericRangeQuery32#testRandomTrieAndClassicRangeQuery(int).mjava","pathOld":"src/test/org/apache/lucene/search/TestNumericRangeQuery32#testRandomTrieAndClassicRangeQuery(int).mjava","sourceNew":"  private void testRandomTrieAndClassicRangeQuery(int precisionStep) throws Exception {\n    final Random rnd=newRandom();\n    String field=\"field\"+precisionStep;\n    int termCountT=0,termCountC=0;\n    for (int i=0; i<50; i++) {\n      int lower=(int)(rnd.nextDouble()*noDocs*distance)+startOffset;\n      int upper=(int)(rnd.nextDouble()*noDocs*distance)+startOffset;\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      // test inclusive range\n      NumericRangeQuery tq=NumericRangeQuery.newIntRange(field, precisionStep, new Integer(lower), new Integer(upper), true, true);\n      TermRangeQuery cq=new TermRangeQuery(field, NumericUtils.intToPrefixCoded(lower), NumericUtils.intToPrefixCoded(upper), true, true);\n      cq.setConstantScoreRewrite(true);\n      TopDocs tTopDocs = searcher.search(tq, 1);\n      TopDocs cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\n      termCountT += tq.getTotalNumberOfTerms();\n      termCountC += cq.getTotalNumberOfTerms();\n      // test exclusive range\n      tq=NumericRangeQuery.newIntRange(field, precisionStep, new Integer(lower), new Integer(upper), false, false);\n      cq=new TermRangeQuery(field, NumericUtils.intToPrefixCoded(lower), NumericUtils.intToPrefixCoded(upper), false, false);\n      cq.setConstantScoreRewrite(true);\n      tTopDocs = searcher.search(tq, 1);\n      cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\n      termCountT += tq.getTotalNumberOfTerms();\n      termCountC += cq.getTotalNumberOfTerms();\n      // test left exclusive range\n      tq=NumericRangeQuery.newIntRange(field, precisionStep, new Integer(lower), new Integer(upper), false, true);\n      cq=new TermRangeQuery(field, NumericUtils.intToPrefixCoded(lower), NumericUtils.intToPrefixCoded(upper), false, true);\n      cq.setConstantScoreRewrite(true);\n      tTopDocs = searcher.search(tq, 1);\n      cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\n      termCountT += tq.getTotalNumberOfTerms();\n      termCountC += cq.getTotalNumberOfTerms();\n      // test right exclusive range\n      tq=NumericRangeQuery.newIntRange(field, precisionStep, new Integer(lower), new Integer(upper), true, false);\n      cq=new TermRangeQuery(field, NumericUtils.intToPrefixCoded(lower), NumericUtils.intToPrefixCoded(upper), true, false);\n      cq.setConstantScoreRewrite(true);\n      tTopDocs = searcher.search(tq, 1);\n      cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\n      termCountT += tq.getTotalNumberOfTerms();\n      termCountC += cq.getTotalNumberOfTerms();\n    }\n    if (precisionStep == Integer.MAX_VALUE) {\n      assertEquals(\"Total number of terms should be equal for unlimited precStep\", termCountT, termCountC);\n    } else {\n      System.out.println(\"Average number of terms during random search on '\" + field + \"':\");\n      System.out.println(\" Trie query: \" + (((double)termCountT)/(50*4)));\n      System.out.println(\" Classical query: \" + (((double)termCountC)/(50*4)));\n    }\n  }\n\n","sourceOld":"  private void testRandomTrieAndClassicRangeQuery(int precisionStep) throws Exception {\n    final Random rnd=newRandom();\n    String field=\"field\"+precisionStep;\n    int termCountT=0,termCountC=0;\n    for (int i=0; i<50; i++) {\n      int lower=(int)(rnd.nextDouble()*noDocs*distance)+startOffset;\n      int upper=(int)(rnd.nextDouble()*noDocs*distance)+startOffset;\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      // test inclusive range\n      NumericRangeQuery tq=NumericRangeQuery.newIntRange(field, precisionStep, new Integer(lower), new Integer(upper), true, true);\n      TermRangeQuery cq=new TermRangeQuery(field, NumericUtils.intToPrefixCoded(lower), NumericUtils.intToPrefixCoded(upper), true, true);\n      cq.setConstantScoreRewrite(true);\n      TopDocs tTopDocs = searcher.search(tq, 1);\n      TopDocs cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\n      termCountT += tq.getTotalNumberOfTerms();\n      termCountC += cq.getTotalNumberOfTerms();\n      // test exclusive range\n      tq=NumericRangeQuery.newIntRange(field, precisionStep, new Integer(lower), new Integer(upper), false, false);\n      cq=new TermRangeQuery(field, NumericUtils.intToPrefixCoded(lower), NumericUtils.intToPrefixCoded(upper), false, false);\n      cq.setConstantScoreRewrite(true);\n      tTopDocs = searcher.search(tq, 1);\n      cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\n      termCountT += tq.getTotalNumberOfTerms();\n      termCountC += cq.getTotalNumberOfTerms();\n      // test left exclusive range\n      tq=NumericRangeQuery.newIntRange(field, precisionStep, new Integer(lower), new Integer(upper), false, true);\n      cq=new TermRangeQuery(field, NumericUtils.intToPrefixCoded(lower), NumericUtils.intToPrefixCoded(upper), false, true);\n      cq.setConstantScoreRewrite(true);\n      tTopDocs = searcher.search(tq, 1);\n      cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\n      termCountT += tq.getTotalNumberOfTerms();\n      termCountC += cq.getTotalNumberOfTerms();\n      // test right exclusive range\n      tq=NumericRangeQuery.newIntRange(field, precisionStep, new Integer(lower), new Integer(upper), true, false);\n      cq=new TermRangeQuery(field, NumericUtils.intToPrefixCoded(lower), NumericUtils.intToPrefixCoded(upper), true, false);\n      cq.setConstantScoreRewrite(true);\n      tTopDocs = searcher.search(tq, 1);\n      cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\n      termCountT += tq.getTotalNumberOfTerms();\n      termCountC += cq.getTotalNumberOfTerms();\n    }\n    System.out.println(\"Average number of terms during random search on '\" + field + \"':\");\n    System.out.println(\" Trie query: \" + (((double)termCountT)/(50*4)));\n    System.out.println(\" Classical query: \" + (((double)termCountC)/(50*4)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b20609f6fb2cd074bd08115b0c3280b9646af7c","date":1248480213,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestNumericRangeQuery32#testRandomTrieAndClassicRangeQuery(int).mjava","pathOld":"src/test/org/apache/lucene/search/TestNumericRangeQuery32#testRandomTrieAndClassicRangeQuery(int).mjava","sourceNew":"  private void testRandomTrieAndClassicRangeQuery(int precisionStep) throws Exception {\n    final Random rnd=newRandom();\n    String field=\"field\"+precisionStep;\n    int termCountT=0,termCountC=0;\n    for (int i=0; i<50; i++) {\n      int lower=(int)(rnd.nextDouble()*noDocs*distance)+startOffset;\n      int upper=(int)(rnd.nextDouble()*noDocs*distance)+startOffset;\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      // test inclusive range\n      NumericRangeQuery tq=NumericRangeQuery.newIntRange(field, precisionStep, new Integer(lower), new Integer(upper), true, true);\n      TermRangeQuery cq=new TermRangeQuery(field, NumericUtils.intToPrefixCoded(lower), NumericUtils.intToPrefixCoded(upper), true, true);\n      cq.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);\n      TopDocs tTopDocs = searcher.search(tq, 1);\n      TopDocs cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\n      termCountT += tq.getTotalNumberOfTerms();\n      termCountC += cq.getTotalNumberOfTerms();\n      // test exclusive range\n      tq=NumericRangeQuery.newIntRange(field, precisionStep, new Integer(lower), new Integer(upper), false, false);\n      cq=new TermRangeQuery(field, NumericUtils.intToPrefixCoded(lower), NumericUtils.intToPrefixCoded(upper), false, false);\n      cq.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);\n      tTopDocs = searcher.search(tq, 1);\n      cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\n      termCountT += tq.getTotalNumberOfTerms();\n      termCountC += cq.getTotalNumberOfTerms();\n      // test left exclusive range\n      tq=NumericRangeQuery.newIntRange(field, precisionStep, new Integer(lower), new Integer(upper), false, true);\n      cq=new TermRangeQuery(field, NumericUtils.intToPrefixCoded(lower), NumericUtils.intToPrefixCoded(upper), false, true);\n      cq.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);\n      tTopDocs = searcher.search(tq, 1);\n      cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\n      termCountT += tq.getTotalNumberOfTerms();\n      termCountC += cq.getTotalNumberOfTerms();\n      // test right exclusive range\n      tq=NumericRangeQuery.newIntRange(field, precisionStep, new Integer(lower), new Integer(upper), true, false);\n      cq=new TermRangeQuery(field, NumericUtils.intToPrefixCoded(lower), NumericUtils.intToPrefixCoded(upper), true, false);\n      cq.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);\n      tTopDocs = searcher.search(tq, 1);\n      cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\n      termCountT += tq.getTotalNumberOfTerms();\n      termCountC += cq.getTotalNumberOfTerms();\n    }\n    if (precisionStep == Integer.MAX_VALUE) {\n      assertEquals(\"Total number of terms should be equal for unlimited precStep\", termCountT, termCountC);\n    } else {\n      System.out.println(\"Average number of terms during random search on '\" + field + \"':\");\n      System.out.println(\" Trie query: \" + (((double)termCountT)/(50*4)));\n      System.out.println(\" Classical query: \" + (((double)termCountC)/(50*4)));\n    }\n  }\n\n","sourceOld":"  private void testRandomTrieAndClassicRangeQuery(int precisionStep) throws Exception {\n    final Random rnd=newRandom();\n    String field=\"field\"+precisionStep;\n    int termCountT=0,termCountC=0;\n    for (int i=0; i<50; i++) {\n      int lower=(int)(rnd.nextDouble()*noDocs*distance)+startOffset;\n      int upper=(int)(rnd.nextDouble()*noDocs*distance)+startOffset;\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      // test inclusive range\n      NumericRangeQuery tq=NumericRangeQuery.newIntRange(field, precisionStep, new Integer(lower), new Integer(upper), true, true);\n      TermRangeQuery cq=new TermRangeQuery(field, NumericUtils.intToPrefixCoded(lower), NumericUtils.intToPrefixCoded(upper), true, true);\n      cq.setConstantScoreRewrite(true);\n      TopDocs tTopDocs = searcher.search(tq, 1);\n      TopDocs cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\n      termCountT += tq.getTotalNumberOfTerms();\n      termCountC += cq.getTotalNumberOfTerms();\n      // test exclusive range\n      tq=NumericRangeQuery.newIntRange(field, precisionStep, new Integer(lower), new Integer(upper), false, false);\n      cq=new TermRangeQuery(field, NumericUtils.intToPrefixCoded(lower), NumericUtils.intToPrefixCoded(upper), false, false);\n      cq.setConstantScoreRewrite(true);\n      tTopDocs = searcher.search(tq, 1);\n      cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\n      termCountT += tq.getTotalNumberOfTerms();\n      termCountC += cq.getTotalNumberOfTerms();\n      // test left exclusive range\n      tq=NumericRangeQuery.newIntRange(field, precisionStep, new Integer(lower), new Integer(upper), false, true);\n      cq=new TermRangeQuery(field, NumericUtils.intToPrefixCoded(lower), NumericUtils.intToPrefixCoded(upper), false, true);\n      cq.setConstantScoreRewrite(true);\n      tTopDocs = searcher.search(tq, 1);\n      cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\n      termCountT += tq.getTotalNumberOfTerms();\n      termCountC += cq.getTotalNumberOfTerms();\n      // test right exclusive range\n      tq=NumericRangeQuery.newIntRange(field, precisionStep, new Integer(lower), new Integer(upper), true, false);\n      cq=new TermRangeQuery(field, NumericUtils.intToPrefixCoded(lower), NumericUtils.intToPrefixCoded(upper), true, false);\n      cq.setConstantScoreRewrite(true);\n      tTopDocs = searcher.search(tq, 1);\n      cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\n      termCountT += tq.getTotalNumberOfTerms();\n      termCountC += cq.getTotalNumberOfTerms();\n    }\n    if (precisionStep == Integer.MAX_VALUE) {\n      assertEquals(\"Total number of terms should be equal for unlimited precStep\", termCountT, termCountC);\n    } else {\n      System.out.println(\"Average number of terms during random search on '\" + field + \"':\");\n      System.out.println(\" Trie query: \" + (((double)termCountT)/(50*4)));\n      System.out.println(\" Classical query: \" + (((double)termCountC)/(50*4)));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f72737a1e9086dec7c0a535a50ad665043ac21d5","date":1248519270,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestNumericRangeQuery32#testRandomTrieAndClassicRangeQuery(int).mjava","pathOld":"src/test/org/apache/lucene/search/TestNumericRangeQuery32#testRandomTrieAndClassicRangeQuery(int).mjava","sourceNew":"  private void testRandomTrieAndClassicRangeQuery(int precisionStep) throws Exception {\n    final Random rnd=newRandom();\n    String field=\"field\"+precisionStep;\n    int termCountT=0,termCountC=0;\n    for (int i=0; i<50; i++) {\n      int lower=(int)(rnd.nextDouble()*noDocs*distance)+startOffset;\n      int upper=(int)(rnd.nextDouble()*noDocs*distance)+startOffset;\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      // test inclusive range\n      NumericRangeQuery tq=NumericRangeQuery.newIntRange(field, precisionStep, new Integer(lower), new Integer(upper), true, true);\n      TermRangeQuery cq=new TermRangeQuery(field, NumericUtils.intToPrefixCoded(lower), NumericUtils.intToPrefixCoded(upper), true, true);\n      TopDocs tTopDocs = searcher.search(tq, 1);\n      TopDocs cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\n      termCountT += tq.getTotalNumberOfTerms();\n      termCountC += cq.getTotalNumberOfTerms();\n      // test exclusive range\n      tq=NumericRangeQuery.newIntRange(field, precisionStep, new Integer(lower), new Integer(upper), false, false);\n      cq=new TermRangeQuery(field, NumericUtils.intToPrefixCoded(lower), NumericUtils.intToPrefixCoded(upper), false, false);\n      tTopDocs = searcher.search(tq, 1);\n      cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\n      termCountT += tq.getTotalNumberOfTerms();\n      termCountC += cq.getTotalNumberOfTerms();\n      // test left exclusive range\n      tq=NumericRangeQuery.newIntRange(field, precisionStep, new Integer(lower), new Integer(upper), false, true);\n      cq=new TermRangeQuery(field, NumericUtils.intToPrefixCoded(lower), NumericUtils.intToPrefixCoded(upper), false, true);\n      tTopDocs = searcher.search(tq, 1);\n      cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\n      termCountT += tq.getTotalNumberOfTerms();\n      termCountC += cq.getTotalNumberOfTerms();\n      // test right exclusive range\n      tq=NumericRangeQuery.newIntRange(field, precisionStep, new Integer(lower), new Integer(upper), true, false);\n      cq=new TermRangeQuery(field, NumericUtils.intToPrefixCoded(lower), NumericUtils.intToPrefixCoded(upper), true, false);\n      tTopDocs = searcher.search(tq, 1);\n      cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\n      termCountT += tq.getTotalNumberOfTerms();\n      termCountC += cq.getTotalNumberOfTerms();\n    }\n    if (precisionStep == Integer.MAX_VALUE) {\n      assertEquals(\"Total number of terms should be equal for unlimited precStep\", termCountT, termCountC);\n    } else {\n      System.out.println(\"Average number of terms during random search on '\" + field + \"':\");\n      System.out.println(\" Trie query: \" + (((double)termCountT)/(50*4)));\n      System.out.println(\" Classical query: \" + (((double)termCountC)/(50*4)));\n    }\n  }\n\n","sourceOld":"  private void testRandomTrieAndClassicRangeQuery(int precisionStep) throws Exception {\n    final Random rnd=newRandom();\n    String field=\"field\"+precisionStep;\n    int termCountT=0,termCountC=0;\n    for (int i=0; i<50; i++) {\n      int lower=(int)(rnd.nextDouble()*noDocs*distance)+startOffset;\n      int upper=(int)(rnd.nextDouble()*noDocs*distance)+startOffset;\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      // test inclusive range\n      NumericRangeQuery tq=NumericRangeQuery.newIntRange(field, precisionStep, new Integer(lower), new Integer(upper), true, true);\n      TermRangeQuery cq=new TermRangeQuery(field, NumericUtils.intToPrefixCoded(lower), NumericUtils.intToPrefixCoded(upper), true, true);\n      cq.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);\n      TopDocs tTopDocs = searcher.search(tq, 1);\n      TopDocs cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\n      termCountT += tq.getTotalNumberOfTerms();\n      termCountC += cq.getTotalNumberOfTerms();\n      // test exclusive range\n      tq=NumericRangeQuery.newIntRange(field, precisionStep, new Integer(lower), new Integer(upper), false, false);\n      cq=new TermRangeQuery(field, NumericUtils.intToPrefixCoded(lower), NumericUtils.intToPrefixCoded(upper), false, false);\n      cq.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);\n      tTopDocs = searcher.search(tq, 1);\n      cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\n      termCountT += tq.getTotalNumberOfTerms();\n      termCountC += cq.getTotalNumberOfTerms();\n      // test left exclusive range\n      tq=NumericRangeQuery.newIntRange(field, precisionStep, new Integer(lower), new Integer(upper), false, true);\n      cq=new TermRangeQuery(field, NumericUtils.intToPrefixCoded(lower), NumericUtils.intToPrefixCoded(upper), false, true);\n      cq.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);\n      tTopDocs = searcher.search(tq, 1);\n      cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\n      termCountT += tq.getTotalNumberOfTerms();\n      termCountC += cq.getTotalNumberOfTerms();\n      // test right exclusive range\n      tq=NumericRangeQuery.newIntRange(field, precisionStep, new Integer(lower), new Integer(upper), true, false);\n      cq=new TermRangeQuery(field, NumericUtils.intToPrefixCoded(lower), NumericUtils.intToPrefixCoded(upper), true, false);\n      cq.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);\n      tTopDocs = searcher.search(tq, 1);\n      cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\n      termCountT += tq.getTotalNumberOfTerms();\n      termCountC += cq.getTotalNumberOfTerms();\n    }\n    if (precisionStep == Integer.MAX_VALUE) {\n      assertEquals(\"Total number of terms should be equal for unlimited precStep\", termCountT, termCountC);\n    } else {\n      System.out.println(\"Average number of terms during random search on '\" + field + \"':\");\n      System.out.println(\" Trie query: \" + (((double)termCountT)/(50*4)));\n      System.out.println(\" Classical query: \" + (((double)termCountC)/(50*4)));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70a9e462a51fd525218b83cdc33329f5ee00ca20","date":1254431499,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestNumericRangeQuery32#testRandomTrieAndClassicRangeQuery(int).mjava","pathOld":"src/test/org/apache/lucene/search/TestNumericRangeQuery32#testRandomTrieAndClassicRangeQuery(int).mjava","sourceNew":"  private void testRandomTrieAndClassicRangeQuery(int precisionStep) throws Exception {\n    final Random rnd=newRandom();\n    String field=\"field\"+precisionStep;\n    int termCountT=0,termCountC=0;\n    for (int i=0; i<50; i++) {\n      int lower=(int)(rnd.nextDouble()*noDocs*distance)+startOffset;\n      int upper=(int)(rnd.nextDouble()*noDocs*distance)+startOffset;\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      // test inclusive range\n      NumericRangeQuery<Integer> tq=NumericRangeQuery.newIntRange(field, precisionStep, lower, upper, true, true);\n      TermRangeQuery cq=new TermRangeQuery(field, NumericUtils.intToPrefixCoded(lower), NumericUtils.intToPrefixCoded(upper), true, true);\n      TopDocs tTopDocs = searcher.search(tq, 1);\n      TopDocs cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\n      termCountT += tq.getTotalNumberOfTerms();\n      termCountC += cq.getTotalNumberOfTerms();\n      // test exclusive range\n      tq=NumericRangeQuery.newIntRange(field, precisionStep, lower, upper, false, false);\n      cq=new TermRangeQuery(field, NumericUtils.intToPrefixCoded(lower), NumericUtils.intToPrefixCoded(upper), false, false);\n      tTopDocs = searcher.search(tq, 1);\n      cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\n      termCountT += tq.getTotalNumberOfTerms();\n      termCountC += cq.getTotalNumberOfTerms();\n      // test left exclusive range\n      tq=NumericRangeQuery.newIntRange(field, precisionStep, lower, upper, false, true);\n      cq=new TermRangeQuery(field, NumericUtils.intToPrefixCoded(lower), NumericUtils.intToPrefixCoded(upper), false, true);\n      tTopDocs = searcher.search(tq, 1);\n      cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\n      termCountT += tq.getTotalNumberOfTerms();\n      termCountC += cq.getTotalNumberOfTerms();\n      // test right exclusive range\n      tq=NumericRangeQuery.newIntRange(field, precisionStep, lower, upper, true, false);\n      cq=new TermRangeQuery(field, NumericUtils.intToPrefixCoded(lower), NumericUtils.intToPrefixCoded(upper), true, false);\n      tTopDocs = searcher.search(tq, 1);\n      cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\n      termCountT += tq.getTotalNumberOfTerms();\n      termCountC += cq.getTotalNumberOfTerms();\n    }\n    if (precisionStep == Integer.MAX_VALUE) {\n      assertEquals(\"Total number of terms should be equal for unlimited precStep\", termCountT, termCountC);\n    } else {\n      System.out.println(\"Average number of terms during random search on '\" + field + \"':\");\n      System.out.println(\" Trie query: \" + (((double)termCountT)/(50*4)));\n      System.out.println(\" Classical query: \" + (((double)termCountC)/(50*4)));\n    }\n  }\n\n","sourceOld":"  private void testRandomTrieAndClassicRangeQuery(int precisionStep) throws Exception {\n    final Random rnd=newRandom();\n    String field=\"field\"+precisionStep;\n    int termCountT=0,termCountC=0;\n    for (int i=0; i<50; i++) {\n      int lower=(int)(rnd.nextDouble()*noDocs*distance)+startOffset;\n      int upper=(int)(rnd.nextDouble()*noDocs*distance)+startOffset;\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      // test inclusive range\n      NumericRangeQuery tq=NumericRangeQuery.newIntRange(field, precisionStep, new Integer(lower), new Integer(upper), true, true);\n      TermRangeQuery cq=new TermRangeQuery(field, NumericUtils.intToPrefixCoded(lower), NumericUtils.intToPrefixCoded(upper), true, true);\n      TopDocs tTopDocs = searcher.search(tq, 1);\n      TopDocs cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\n      termCountT += tq.getTotalNumberOfTerms();\n      termCountC += cq.getTotalNumberOfTerms();\n      // test exclusive range\n      tq=NumericRangeQuery.newIntRange(field, precisionStep, new Integer(lower), new Integer(upper), false, false);\n      cq=new TermRangeQuery(field, NumericUtils.intToPrefixCoded(lower), NumericUtils.intToPrefixCoded(upper), false, false);\n      tTopDocs = searcher.search(tq, 1);\n      cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\n      termCountT += tq.getTotalNumberOfTerms();\n      termCountC += cq.getTotalNumberOfTerms();\n      // test left exclusive range\n      tq=NumericRangeQuery.newIntRange(field, precisionStep, new Integer(lower), new Integer(upper), false, true);\n      cq=new TermRangeQuery(field, NumericUtils.intToPrefixCoded(lower), NumericUtils.intToPrefixCoded(upper), false, true);\n      tTopDocs = searcher.search(tq, 1);\n      cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\n      termCountT += tq.getTotalNumberOfTerms();\n      termCountC += cq.getTotalNumberOfTerms();\n      // test right exclusive range\n      tq=NumericRangeQuery.newIntRange(field, precisionStep, new Integer(lower), new Integer(upper), true, false);\n      cq=new TermRangeQuery(field, NumericUtils.intToPrefixCoded(lower), NumericUtils.intToPrefixCoded(upper), true, false);\n      tTopDocs = searcher.search(tq, 1);\n      cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\n      termCountT += tq.getTotalNumberOfTerms();\n      termCountC += cq.getTotalNumberOfTerms();\n    }\n    if (precisionStep == Integer.MAX_VALUE) {\n      assertEquals(\"Total number of terms should be equal for unlimited precStep\", termCountT, termCountC);\n    } else {\n      System.out.println(\"Average number of terms during random search on '\" + field + \"':\");\n      System.out.println(\" Trie query: \" + (((double)termCountT)/(50*4)));\n      System.out.println(\" Classical query: \" + (((double)termCountC)/(50*4)));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90cb6b3f4e5652555b614adc90204287fbebd27c","date":1259494272,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestNumericRangeQuery32#testRandomTrieAndClassicRangeQuery(int).mjava","pathOld":"src/test/org/apache/lucene/search/TestNumericRangeQuery32#testRandomTrieAndClassicRangeQuery(int).mjava","sourceNew":"  private void testRandomTrieAndClassicRangeQuery(int precisionStep) throws Exception {\n    final Random rnd=newRandom();\n    String field=\"field\"+precisionStep;\n    int termCountT=0,termCountC=0;\n    for (int i=0; i<10; i++) {\n      int lower=(int)(rnd.nextDouble()*noDocs*distance)+startOffset;\n      int upper=(int)(rnd.nextDouble()*noDocs*distance)+startOffset;\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      // test inclusive range\n      NumericRangeQuery<Integer> tq=NumericRangeQuery.newIntRange(field, precisionStep, lower, upper, true, true);\n      TermRangeQuery cq=new TermRangeQuery(field, NumericUtils.intToPrefixCoded(lower), NumericUtils.intToPrefixCoded(upper), true, true);\n      TopDocs tTopDocs = searcher.search(tq, 1);\n      TopDocs cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\n      termCountT += tq.getTotalNumberOfTerms();\n      termCountC += cq.getTotalNumberOfTerms();\n      // test exclusive range\n      tq=NumericRangeQuery.newIntRange(field, precisionStep, lower, upper, false, false);\n      cq=new TermRangeQuery(field, NumericUtils.intToPrefixCoded(lower), NumericUtils.intToPrefixCoded(upper), false, false);\n      tTopDocs = searcher.search(tq, 1);\n      cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\n      termCountT += tq.getTotalNumberOfTerms();\n      termCountC += cq.getTotalNumberOfTerms();\n      // test left exclusive range\n      tq=NumericRangeQuery.newIntRange(field, precisionStep, lower, upper, false, true);\n      cq=new TermRangeQuery(field, NumericUtils.intToPrefixCoded(lower), NumericUtils.intToPrefixCoded(upper), false, true);\n      tTopDocs = searcher.search(tq, 1);\n      cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\n      termCountT += tq.getTotalNumberOfTerms();\n      termCountC += cq.getTotalNumberOfTerms();\n      // test right exclusive range\n      tq=NumericRangeQuery.newIntRange(field, precisionStep, lower, upper, true, false);\n      cq=new TermRangeQuery(field, NumericUtils.intToPrefixCoded(lower), NumericUtils.intToPrefixCoded(upper), true, false);\n      tTopDocs = searcher.search(tq, 1);\n      cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\n      termCountT += tq.getTotalNumberOfTerms();\n      termCountC += cq.getTotalNumberOfTerms();\n    }\n    if (precisionStep == Integer.MAX_VALUE) {\n      assertEquals(\"Total number of terms should be equal for unlimited precStep\", termCountT, termCountC);\n    } else {\n      System.out.println(\"Average number of terms during random search on '\" + field + \"':\");\n      System.out.println(\" Trie query: \" + (((double)termCountT)/(10*4)));\n      System.out.println(\" Classical query: \" + (((double)termCountC)/(10*4)));\n    }\n  }\n\n","sourceOld":"  private void testRandomTrieAndClassicRangeQuery(int precisionStep) throws Exception {\n    final Random rnd=newRandom();\n    String field=\"field\"+precisionStep;\n    int termCountT=0,termCountC=0;\n    for (int i=0; i<50; i++) {\n      int lower=(int)(rnd.nextDouble()*noDocs*distance)+startOffset;\n      int upper=(int)(rnd.nextDouble()*noDocs*distance)+startOffset;\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      // test inclusive range\n      NumericRangeQuery<Integer> tq=NumericRangeQuery.newIntRange(field, precisionStep, lower, upper, true, true);\n      TermRangeQuery cq=new TermRangeQuery(field, NumericUtils.intToPrefixCoded(lower), NumericUtils.intToPrefixCoded(upper), true, true);\n      TopDocs tTopDocs = searcher.search(tq, 1);\n      TopDocs cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\n      termCountT += tq.getTotalNumberOfTerms();\n      termCountC += cq.getTotalNumberOfTerms();\n      // test exclusive range\n      tq=NumericRangeQuery.newIntRange(field, precisionStep, lower, upper, false, false);\n      cq=new TermRangeQuery(field, NumericUtils.intToPrefixCoded(lower), NumericUtils.intToPrefixCoded(upper), false, false);\n      tTopDocs = searcher.search(tq, 1);\n      cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\n      termCountT += tq.getTotalNumberOfTerms();\n      termCountC += cq.getTotalNumberOfTerms();\n      // test left exclusive range\n      tq=NumericRangeQuery.newIntRange(field, precisionStep, lower, upper, false, true);\n      cq=new TermRangeQuery(field, NumericUtils.intToPrefixCoded(lower), NumericUtils.intToPrefixCoded(upper), false, true);\n      tTopDocs = searcher.search(tq, 1);\n      cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\n      termCountT += tq.getTotalNumberOfTerms();\n      termCountC += cq.getTotalNumberOfTerms();\n      // test right exclusive range\n      tq=NumericRangeQuery.newIntRange(field, precisionStep, lower, upper, true, false);\n      cq=new TermRangeQuery(field, NumericUtils.intToPrefixCoded(lower), NumericUtils.intToPrefixCoded(upper), true, false);\n      tTopDocs = searcher.search(tq, 1);\n      cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\n      termCountT += tq.getTotalNumberOfTerms();\n      termCountC += cq.getTotalNumberOfTerms();\n    }\n    if (precisionStep == Integer.MAX_VALUE) {\n      assertEquals(\"Total number of terms should be equal for unlimited precStep\", termCountT, termCountC);\n    } else {\n      System.out.println(\"Average number of terms during random search on '\" + field + \"':\");\n      System.out.println(\" Trie query: \" + (((double)termCountT)/(50*4)));\n      System.out.println(\" Classical query: \" + (((double)termCountC)/(50*4)));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c888ee2e3322649a888c466fae1c470524642e0a","date":1268478628,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestNumericRangeQuery32#testRandomTrieAndClassicRangeQuery(int).mjava","pathOld":"src/test/org/apache/lucene/search/TestNumericRangeQuery32#testRandomTrieAndClassicRangeQuery(int).mjava","sourceNew":"  private void testRandomTrieAndClassicRangeQuery(int precisionStep) throws Exception {\n    final Random rnd=newRandom();\n    String field=\"field\"+precisionStep;\n    int termCountT=0,termCountC=0;\n    for (int i=0; i<10; i++) {\n      int lower=(int)(rnd.nextDouble()*noDocs*distance)+startOffset;\n      int upper=(int)(rnd.nextDouble()*noDocs*distance)+startOffset;\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      // test inclusive range\n      NumericRangeQuery<Integer> tq=NumericRangeQuery.newIntRange(field, precisionStep, lower, upper, true, true);\n      TermRangeQuery cq=new TermRangeQuery(field, NumericUtils.intToPrefixCoded(lower), NumericUtils.intToPrefixCoded(upper), true, true);\n      TopDocs tTopDocs = searcher.search(tq, 1);\n      TopDocs cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\n      termCountT += tq.getTotalNumberOfTerms();\n      termCountC += cq.getTotalNumberOfTerms();\n      // test exclusive range\n      tq=NumericRangeQuery.newIntRange(field, precisionStep, lower, upper, false, false);\n      cq=new TermRangeQuery(field, NumericUtils.intToPrefixCoded(lower), NumericUtils.intToPrefixCoded(upper), false, false);\n      tTopDocs = searcher.search(tq, 1);\n      cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\n      termCountT += tq.getTotalNumberOfTerms();\n      termCountC += cq.getTotalNumberOfTerms();\n      // test left exclusive range\n      tq=NumericRangeQuery.newIntRange(field, precisionStep, lower, upper, false, true);\n      cq=new TermRangeQuery(field, NumericUtils.intToPrefixCoded(lower), NumericUtils.intToPrefixCoded(upper), false, true);\n      tTopDocs = searcher.search(tq, 1);\n      cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\n      termCountT += tq.getTotalNumberOfTerms();\n      termCountC += cq.getTotalNumberOfTerms();\n      // test right exclusive range\n      tq=NumericRangeQuery.newIntRange(field, precisionStep, lower, upper, true, false);\n      cq=new TermRangeQuery(field, NumericUtils.intToPrefixCoded(lower), NumericUtils.intToPrefixCoded(upper), true, false);\n      tTopDocs = searcher.search(tq, 1);\n      cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\n      termCountT += tq.getTotalNumberOfTerms();\n      termCountC += cq.getTotalNumberOfTerms();\n    }\n    if (precisionStep == Integer.MAX_VALUE) {\n      assertEquals(\"Total number of terms should be equal for unlimited precStep\", termCountT, termCountC);\n    } else if (VERBOSE) {\n      System.out.println(\"Average number of terms during random search on '\" + field + \"':\");\n      System.out.println(\" Trie query: \" + (((double)termCountT)/(10*4)));\n      System.out.println(\" Classical query: \" + (((double)termCountC)/(10*4)));\n    }\n  }\n\n","sourceOld":"  private void testRandomTrieAndClassicRangeQuery(int precisionStep) throws Exception {\n    final Random rnd=newRandom();\n    String field=\"field\"+precisionStep;\n    int termCountT=0,termCountC=0;\n    for (int i=0; i<10; i++) {\n      int lower=(int)(rnd.nextDouble()*noDocs*distance)+startOffset;\n      int upper=(int)(rnd.nextDouble()*noDocs*distance)+startOffset;\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      // test inclusive range\n      NumericRangeQuery<Integer> tq=NumericRangeQuery.newIntRange(field, precisionStep, lower, upper, true, true);\n      TermRangeQuery cq=new TermRangeQuery(field, NumericUtils.intToPrefixCoded(lower), NumericUtils.intToPrefixCoded(upper), true, true);\n      TopDocs tTopDocs = searcher.search(tq, 1);\n      TopDocs cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\n      termCountT += tq.getTotalNumberOfTerms();\n      termCountC += cq.getTotalNumberOfTerms();\n      // test exclusive range\n      tq=NumericRangeQuery.newIntRange(field, precisionStep, lower, upper, false, false);\n      cq=new TermRangeQuery(field, NumericUtils.intToPrefixCoded(lower), NumericUtils.intToPrefixCoded(upper), false, false);\n      tTopDocs = searcher.search(tq, 1);\n      cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\n      termCountT += tq.getTotalNumberOfTerms();\n      termCountC += cq.getTotalNumberOfTerms();\n      // test left exclusive range\n      tq=NumericRangeQuery.newIntRange(field, precisionStep, lower, upper, false, true);\n      cq=new TermRangeQuery(field, NumericUtils.intToPrefixCoded(lower), NumericUtils.intToPrefixCoded(upper), false, true);\n      tTopDocs = searcher.search(tq, 1);\n      cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\n      termCountT += tq.getTotalNumberOfTerms();\n      termCountC += cq.getTotalNumberOfTerms();\n      // test right exclusive range\n      tq=NumericRangeQuery.newIntRange(field, precisionStep, lower, upper, true, false);\n      cq=new TermRangeQuery(field, NumericUtils.intToPrefixCoded(lower), NumericUtils.intToPrefixCoded(upper), true, false);\n      tTopDocs = searcher.search(tq, 1);\n      cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\n      termCountT += tq.getTotalNumberOfTerms();\n      termCountC += cq.getTotalNumberOfTerms();\n    }\n    if (precisionStep == Integer.MAX_VALUE) {\n      assertEquals(\"Total number of terms should be equal for unlimited precStep\", termCountT, termCountC);\n    } else {\n      System.out.println(\"Average number of terms during random search on '\" + field + \"':\");\n      System.out.println(\" Trie query: \" + (((double)termCountT)/(10*4)));\n      System.out.println(\" Classical query: \" + (((double)termCountC)/(10*4)));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery32#testRandomTrieAndClassicRangeQuery(int).mjava","pathOld":"src/test/org/apache/lucene/search/TestNumericRangeQuery32#testRandomTrieAndClassicRangeQuery(int).mjava","sourceNew":"  private void testRandomTrieAndClassicRangeQuery(int precisionStep) throws Exception {\n    final Random rnd=newRandom();\n    String field=\"field\"+precisionStep;\n    int termCountT=0,termCountC=0;\n    for (int i=0; i<10; i++) {\n      int lower=(int)(rnd.nextDouble()*noDocs*distance)+startOffset;\n      int upper=(int)(rnd.nextDouble()*noDocs*distance)+startOffset;\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      // test inclusive range\n      NumericRangeQuery<Integer> tq=NumericRangeQuery.newIntRange(field, precisionStep, lower, upper, true, true);\n      TermRangeQuery cq=new TermRangeQuery(field, NumericUtils.intToPrefixCoded(lower), NumericUtils.intToPrefixCoded(upper), true, true);\n      TopDocs tTopDocs = searcher.search(tq, 1);\n      TopDocs cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\n      termCountT += tq.getTotalNumberOfTerms();\n      termCountC += cq.getTotalNumberOfTerms();\n      // test exclusive range\n      tq=NumericRangeQuery.newIntRange(field, precisionStep, lower, upper, false, false);\n      cq=new TermRangeQuery(field, NumericUtils.intToPrefixCoded(lower), NumericUtils.intToPrefixCoded(upper), false, false);\n      tTopDocs = searcher.search(tq, 1);\n      cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\n      termCountT += tq.getTotalNumberOfTerms();\n      termCountC += cq.getTotalNumberOfTerms();\n      // test left exclusive range\n      tq=NumericRangeQuery.newIntRange(field, precisionStep, lower, upper, false, true);\n      cq=new TermRangeQuery(field, NumericUtils.intToPrefixCoded(lower), NumericUtils.intToPrefixCoded(upper), false, true);\n      tTopDocs = searcher.search(tq, 1);\n      cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\n      termCountT += tq.getTotalNumberOfTerms();\n      termCountC += cq.getTotalNumberOfTerms();\n      // test right exclusive range\n      tq=NumericRangeQuery.newIntRange(field, precisionStep, lower, upper, true, false);\n      cq=new TermRangeQuery(field, NumericUtils.intToPrefixCoded(lower), NumericUtils.intToPrefixCoded(upper), true, false);\n      tTopDocs = searcher.search(tq, 1);\n      cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\n      termCountT += tq.getTotalNumberOfTerms();\n      termCountC += cq.getTotalNumberOfTerms();\n    }\n    if (precisionStep == Integer.MAX_VALUE) {\n      assertEquals(\"Total number of terms should be equal for unlimited precStep\", termCountT, termCountC);\n    } else if (VERBOSE) {\n      System.out.println(\"Average number of terms during random search on '\" + field + \"':\");\n      System.out.println(\" Trie query: \" + (((double)termCountT)/(10*4)));\n      System.out.println(\" Classical query: \" + (((double)termCountC)/(10*4)));\n    }\n  }\n\n","sourceOld":"  private void testRandomTrieAndClassicRangeQuery(int precisionStep) throws Exception {\n    final Random rnd=newRandom();\n    String field=\"field\"+precisionStep;\n    int termCountT=0,termCountC=0;\n    for (int i=0; i<10; i++) {\n      int lower=(int)(rnd.nextDouble()*noDocs*distance)+startOffset;\n      int upper=(int)(rnd.nextDouble()*noDocs*distance)+startOffset;\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      // test inclusive range\n      NumericRangeQuery<Integer> tq=NumericRangeQuery.newIntRange(field, precisionStep, lower, upper, true, true);\n      TermRangeQuery cq=new TermRangeQuery(field, NumericUtils.intToPrefixCoded(lower), NumericUtils.intToPrefixCoded(upper), true, true);\n      TopDocs tTopDocs = searcher.search(tq, 1);\n      TopDocs cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\n      termCountT += tq.getTotalNumberOfTerms();\n      termCountC += cq.getTotalNumberOfTerms();\n      // test exclusive range\n      tq=NumericRangeQuery.newIntRange(field, precisionStep, lower, upper, false, false);\n      cq=new TermRangeQuery(field, NumericUtils.intToPrefixCoded(lower), NumericUtils.intToPrefixCoded(upper), false, false);\n      tTopDocs = searcher.search(tq, 1);\n      cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\n      termCountT += tq.getTotalNumberOfTerms();\n      termCountC += cq.getTotalNumberOfTerms();\n      // test left exclusive range\n      tq=NumericRangeQuery.newIntRange(field, precisionStep, lower, upper, false, true);\n      cq=new TermRangeQuery(field, NumericUtils.intToPrefixCoded(lower), NumericUtils.intToPrefixCoded(upper), false, true);\n      tTopDocs = searcher.search(tq, 1);\n      cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\n      termCountT += tq.getTotalNumberOfTerms();\n      termCountC += cq.getTotalNumberOfTerms();\n      // test right exclusive range\n      tq=NumericRangeQuery.newIntRange(field, precisionStep, lower, upper, true, false);\n      cq=new TermRangeQuery(field, NumericUtils.intToPrefixCoded(lower), NumericUtils.intToPrefixCoded(upper), true, false);\n      tTopDocs = searcher.search(tq, 1);\n      cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\n      termCountT += tq.getTotalNumberOfTerms();\n      termCountC += cq.getTotalNumberOfTerms();\n    }\n    if (precisionStep == Integer.MAX_VALUE) {\n      assertEquals(\"Total number of terms should be equal for unlimited precStep\", termCountT, termCountC);\n    } else if (VERBOSE) {\n      System.out.println(\"Average number of terms during random search on '\" + field + \"':\");\n      System.out.println(\" Trie query: \" + (((double)termCountT)/(10*4)));\n      System.out.println(\" Classical query: \" + (((double)termCountC)/(10*4)));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c888ee2e3322649a888c466fae1c470524642e0a":["90cb6b3f4e5652555b614adc90204287fbebd27c"],"90cb6b3f4e5652555b614adc90204287fbebd27c":["70a9e462a51fd525218b83cdc33329f5ee00ca20"],"f72737a1e9086dec7c0a535a50ad665043ac21d5":["8b20609f6fb2cd074bd08115b0c3280b9646af7c"],"0f612096ab5275c4821d05f126bf45a89f4782b8":["53b6c192847de8643a5da505cc433cbf8476a175"],"6d9efd94ce1ae8bbba50cd7e7f8c56f5552ba426":["0f612096ab5275c4821d05f126bf45a89f4782b8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"70a9e462a51fd525218b83cdc33329f5ee00ca20":["f72737a1e9086dec7c0a535a50ad665043ac21d5"],"53b6c192847de8643a5da505cc433cbf8476a175":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8b20609f6fb2cd074bd08115b0c3280b9646af7c":["6d9efd94ce1ae8bbba50cd7e7f8c56f5552ba426"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["c888ee2e3322649a888c466fae1c470524642e0a"]},"commit2Childs":{"c888ee2e3322649a888c466fae1c470524642e0a":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"90cb6b3f4e5652555b614adc90204287fbebd27c":["c888ee2e3322649a888c466fae1c470524642e0a"],"f72737a1e9086dec7c0a535a50ad665043ac21d5":["70a9e462a51fd525218b83cdc33329f5ee00ca20"],"0f612096ab5275c4821d05f126bf45a89f4782b8":["6d9efd94ce1ae8bbba50cd7e7f8c56f5552ba426"],"6d9efd94ce1ae8bbba50cd7e7f8c56f5552ba426":["8b20609f6fb2cd074bd08115b0c3280b9646af7c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["53b6c192847de8643a5da505cc433cbf8476a175"],"70a9e462a51fd525218b83cdc33329f5ee00ca20":["90cb6b3f4e5652555b614adc90204287fbebd27c"],"53b6c192847de8643a5da505cc433cbf8476a175":["0f612096ab5275c4821d05f126bf45a89f4782b8"],"8b20609f6fb2cd074bd08115b0c3280b9646af7c":["f72737a1e9086dec7c0a535a50ad665043ac21d5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}