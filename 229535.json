{"path":"lucene/core/src/test/org/apache/lucene/analysis/tokenattributes/TestSimpleAttributeImpl#testAttributes().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/analysis/tokenattributes/TestSimpleAttributeImpl#testAttributes().mjava","pathOld":"lucene/src/test/org/apache/lucene/analysis/tokenattributes/TestSimpleAttributeImpl#testAttributes().mjava","sourceNew":"  // this checks using reflection API if the defaults are correct\n  public void testAttributes() {\n    _TestUtil.assertAttributeReflection(new PositionIncrementAttributeImpl(),\n      Collections.singletonMap(PositionIncrementAttribute.class.getName()+\"#positionIncrement\", 1));\n    _TestUtil.assertAttributeReflection(new FlagsAttributeImpl(),\n      Collections.singletonMap(FlagsAttribute.class.getName()+\"#flags\", 0));\n    _TestUtil.assertAttributeReflection(new TypeAttributeImpl(),\n      Collections.singletonMap(TypeAttribute.class.getName()+\"#type\", TypeAttribute.DEFAULT_TYPE));\n    _TestUtil.assertAttributeReflection(new PayloadAttributeImpl(),\n      Collections.singletonMap(PayloadAttribute.class.getName()+\"#payload\", null));\n    _TestUtil.assertAttributeReflection(new KeywordAttributeImpl(),\n      Collections.singletonMap(KeywordAttribute.class.getName()+\"#keyword\", false));\n    _TestUtil.assertAttributeReflection(new OffsetAttributeImpl(), new HashMap<String,Object>() {{\n      put(OffsetAttribute.class.getName()+\"#startOffset\", 0);\n      put(OffsetAttribute.class.getName()+\"#endOffset\", 0);\n    }});\n  }\n\n","sourceOld":"  // this checks using reflection API if the defaults are correct\n  public void testAttributes() {\n    _TestUtil.assertAttributeReflection(new PositionIncrementAttributeImpl(),\n      Collections.singletonMap(PositionIncrementAttribute.class.getName()+\"#positionIncrement\", 1));\n    _TestUtil.assertAttributeReflection(new FlagsAttributeImpl(),\n      Collections.singletonMap(FlagsAttribute.class.getName()+\"#flags\", 0));\n    _TestUtil.assertAttributeReflection(new TypeAttributeImpl(),\n      Collections.singletonMap(TypeAttribute.class.getName()+\"#type\", TypeAttribute.DEFAULT_TYPE));\n    _TestUtil.assertAttributeReflection(new PayloadAttributeImpl(),\n      Collections.singletonMap(PayloadAttribute.class.getName()+\"#payload\", null));\n    _TestUtil.assertAttributeReflection(new KeywordAttributeImpl(),\n      Collections.singletonMap(KeywordAttribute.class.getName()+\"#keyword\", false));\n    _TestUtil.assertAttributeReflection(new OffsetAttributeImpl(), new HashMap<String,Object>() {{\n      put(OffsetAttribute.class.getName()+\"#startOffset\", 0);\n      put(OffsetAttribute.class.getName()+\"#endOffset\", 0);\n    }});\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0984ad47974c2d5d354519ddb2aa8358973a6271","date":1330868053,"type":3,"author":"Christian Moen","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/analysis/tokenattributes/TestSimpleAttributeImpl#testAttributes().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/analysis/tokenattributes/TestSimpleAttributeImpl#testAttributes().mjava","sourceNew":"  // this checks using reflection API if the defaults are correct\n  public void testAttributes() {\n    _TestUtil.assertAttributeReflection(new PositionIncrementAttributeImpl(),\n      Collections.singletonMap(PositionIncrementAttribute.class.getName()+\"#positionIncrement\", 1));\n    _TestUtil.assertAttributeReflection(new PositionLengthAttributeImpl(),\n      Collections.singletonMap(PositionLengthAttribute.class.getName()+\"#positionLength\", 1));\n    _TestUtil.assertAttributeReflection(new FlagsAttributeImpl(),\n      Collections.singletonMap(FlagsAttribute.class.getName()+\"#flags\", 0));\n    _TestUtil.assertAttributeReflection(new TypeAttributeImpl(),\n      Collections.singletonMap(TypeAttribute.class.getName()+\"#type\", TypeAttribute.DEFAULT_TYPE));\n    _TestUtil.assertAttributeReflection(new PayloadAttributeImpl(),\n      Collections.singletonMap(PayloadAttribute.class.getName()+\"#payload\", null));\n    _TestUtil.assertAttributeReflection(new KeywordAttributeImpl(),\n      Collections.singletonMap(KeywordAttribute.class.getName()+\"#keyword\", false));\n    _TestUtil.assertAttributeReflection(new OffsetAttributeImpl(), new HashMap<String,Object>() {{\n      put(OffsetAttribute.class.getName()+\"#startOffset\", 0);\n      put(OffsetAttribute.class.getName()+\"#endOffset\", 0);\n    }});\n  }\n\n","sourceOld":"  // this checks using reflection API if the defaults are correct\n  public void testAttributes() {\n    _TestUtil.assertAttributeReflection(new PositionIncrementAttributeImpl(),\n      Collections.singletonMap(PositionIncrementAttribute.class.getName()+\"#positionIncrement\", 1));\n    _TestUtil.assertAttributeReflection(new FlagsAttributeImpl(),\n      Collections.singletonMap(FlagsAttribute.class.getName()+\"#flags\", 0));\n    _TestUtil.assertAttributeReflection(new TypeAttributeImpl(),\n      Collections.singletonMap(TypeAttribute.class.getName()+\"#type\", TypeAttribute.DEFAULT_TYPE));\n    _TestUtil.assertAttributeReflection(new PayloadAttributeImpl(),\n      Collections.singletonMap(PayloadAttribute.class.getName()+\"#payload\", null));\n    _TestUtil.assertAttributeReflection(new KeywordAttributeImpl(),\n      Collections.singletonMap(KeywordAttribute.class.getName()+\"#keyword\", false));\n    _TestUtil.assertAttributeReflection(new OffsetAttributeImpl(), new HashMap<String,Object>() {{\n      put(OffsetAttribute.class.getName()+\"#startOffset\", 0);\n      put(OffsetAttribute.class.getName()+\"#endOffset\", 0);\n    }});\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/analysis/tokenattributes/TestSimpleAttributeImpl#testAttributes().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/analysis/tokenattributes/TestSimpleAttributeImpl#testAttributes().mjava","sourceNew":"  // this checks using reflection API if the defaults are correct\n  public void testAttributes() {\n    _TestUtil.assertAttributeReflection(new PositionIncrementAttributeImpl(),\n      Collections.singletonMap(PositionIncrementAttribute.class.getName()+\"#positionIncrement\", 1));\n    _TestUtil.assertAttributeReflection(new PositionLengthAttributeImpl(),\n      Collections.singletonMap(PositionLengthAttribute.class.getName()+\"#positionLength\", 1));\n    _TestUtil.assertAttributeReflection(new FlagsAttributeImpl(),\n      Collections.singletonMap(FlagsAttribute.class.getName()+\"#flags\", 0));\n    _TestUtil.assertAttributeReflection(new TypeAttributeImpl(),\n      Collections.singletonMap(TypeAttribute.class.getName()+\"#type\", TypeAttribute.DEFAULT_TYPE));\n    _TestUtil.assertAttributeReflection(new PayloadAttributeImpl(),\n      Collections.singletonMap(PayloadAttribute.class.getName()+\"#payload\", null));\n    _TestUtil.assertAttributeReflection(new KeywordAttributeImpl(),\n      Collections.singletonMap(KeywordAttribute.class.getName()+\"#keyword\", false));\n    _TestUtil.assertAttributeReflection(new OffsetAttributeImpl(), new HashMap<String,Object>() {{\n      put(OffsetAttribute.class.getName()+\"#startOffset\", 0);\n      put(OffsetAttribute.class.getName()+\"#endOffset\", 0);\n    }});\n  }\n\n","sourceOld":"  // this checks using reflection API if the defaults are correct\n  public void testAttributes() {\n    _TestUtil.assertAttributeReflection(new PositionIncrementAttributeImpl(),\n      Collections.singletonMap(PositionIncrementAttribute.class.getName()+\"#positionIncrement\", 1));\n    _TestUtil.assertAttributeReflection(new FlagsAttributeImpl(),\n      Collections.singletonMap(FlagsAttribute.class.getName()+\"#flags\", 0));\n    _TestUtil.assertAttributeReflection(new TypeAttributeImpl(),\n      Collections.singletonMap(TypeAttribute.class.getName()+\"#type\", TypeAttribute.DEFAULT_TYPE));\n    _TestUtil.assertAttributeReflection(new PayloadAttributeImpl(),\n      Collections.singletonMap(PayloadAttribute.class.getName()+\"#payload\", null));\n    _TestUtil.assertAttributeReflection(new KeywordAttributeImpl(),\n      Collections.singletonMap(KeywordAttribute.class.getName()+\"#keyword\", false));\n    _TestUtil.assertAttributeReflection(new OffsetAttributeImpl(), new HashMap<String,Object>() {{\n      put(OffsetAttribute.class.getName()+\"#startOffset\", 0);\n      put(OffsetAttribute.class.getName()+\"#endOffset\", 0);\n    }});\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/analysis/tokenattributes/TestSimpleAttributeImpl#testAttributes().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/analysis/tokenattributes/TestSimpleAttributeImpl#testAttributes().mjava","sourceNew":"  // this checks using reflection API if the defaults are correct\n  public void testAttributes() {\n    TestUtil.assertAttributeReflection(new PositionIncrementAttributeImpl(),\n        Collections.singletonMap(PositionIncrementAttribute.class.getName() + \"#positionIncrement\", 1));\n    TestUtil.assertAttributeReflection(new PositionLengthAttributeImpl(),\n        Collections.singletonMap(PositionLengthAttribute.class.getName() + \"#positionLength\", 1));\n    TestUtil.assertAttributeReflection(new FlagsAttributeImpl(),\n        Collections.singletonMap(FlagsAttribute.class.getName() + \"#flags\", 0));\n    TestUtil.assertAttributeReflection(new TypeAttributeImpl(),\n        Collections.singletonMap(TypeAttribute.class.getName() + \"#type\", TypeAttribute.DEFAULT_TYPE));\n    TestUtil.assertAttributeReflection(new PayloadAttributeImpl(),\n        Collections.singletonMap(PayloadAttribute.class.getName() + \"#payload\", null));\n    TestUtil.assertAttributeReflection(new KeywordAttributeImpl(),\n        Collections.singletonMap(KeywordAttribute.class.getName() + \"#keyword\", false));\n    TestUtil.assertAttributeReflection(new OffsetAttributeImpl(), new HashMap<String, Object>() {{\n      put(OffsetAttribute.class.getName() + \"#startOffset\", 0);\n      put(OffsetAttribute.class.getName() + \"#endOffset\", 0);\n    }});\n  }\n\n","sourceOld":"  // this checks using reflection API if the defaults are correct\n  public void testAttributes() {\n    _TestUtil.assertAttributeReflection(new PositionIncrementAttributeImpl(),\n      Collections.singletonMap(PositionIncrementAttribute.class.getName()+\"#positionIncrement\", 1));\n    _TestUtil.assertAttributeReflection(new PositionLengthAttributeImpl(),\n      Collections.singletonMap(PositionLengthAttribute.class.getName()+\"#positionLength\", 1));\n    _TestUtil.assertAttributeReflection(new FlagsAttributeImpl(),\n      Collections.singletonMap(FlagsAttribute.class.getName()+\"#flags\", 0));\n    _TestUtil.assertAttributeReflection(new TypeAttributeImpl(),\n      Collections.singletonMap(TypeAttribute.class.getName()+\"#type\", TypeAttribute.DEFAULT_TYPE));\n    _TestUtil.assertAttributeReflection(new PayloadAttributeImpl(),\n      Collections.singletonMap(PayloadAttribute.class.getName()+\"#payload\", null));\n    _TestUtil.assertAttributeReflection(new KeywordAttributeImpl(),\n      Collections.singletonMap(KeywordAttribute.class.getName()+\"#keyword\", false));\n    _TestUtil.assertAttributeReflection(new OffsetAttributeImpl(), new HashMap<String,Object>() {{\n      put(OffsetAttribute.class.getName()+\"#startOffset\", 0);\n      put(OffsetAttribute.class.getName()+\"#endOffset\", 0);\n    }});\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","0984ad47974c2d5d354519ddb2aa8358973a6271"],"0984ad47974c2d5d354519ddb2aa8358973a6271":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"6613659748fe4411a7dcf85266e55db1f95f7315":["0984ad47974c2d5d354519ddb2aa8358973a6271"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6613659748fe4411a7dcf85266e55db1f95f7315"]},"commit2Childs":{"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"0984ad47974c2d5d354519ddb2aa8358973a6271":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","6613659748fe4411a7dcf85266e55db1f95f7315"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","0984ad47974c2d5d354519ddb2aa8358973a6271"],"6613659748fe4411a7dcf85266e55db1f95f7315":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}