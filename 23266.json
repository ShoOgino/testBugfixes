{"path":"src/java/org/apache/lucene/search/ConstantScoreQuery.ConstantWeight#explain(IndexReader,int).mjava","commits":[{"id":"c5f8e44d5e9627993851287f67e8360a36cb302a","date":1132032532,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/ConstantScoreQuery.ConstantWeight#explain(IndexReader,int).mjava","pathOld":"/dev/null","sourceNew":"    public Explanation explain(IndexReader reader, int doc) throws IOException {\r\n\r\n      ConstantScorer cs = (ConstantScorer)scorer(reader);\r\n      boolean exists = cs.bits.get(doc);\r\n\r\n      Explanation result = new Explanation();\r\n\r\n      if (exists) {\r\n        result.setDescription(\"ConstantScoreQuery(\" + filter\r\n        + \"), product of:\");\r\n        result.setValue(queryWeight);\r\n        result.addDetail(new Explanation(getBoost(), \"boost\"));\r\n        result.addDetail(new Explanation(queryNorm,\"queryNorm\"));\r\n      } else {\r\n        result.setDescription(\"ConstantScoreQuery(\" + filter\r\n        + \") doesn't match id \" + doc);\r\n        result.setValue(0);\r\n      }\r\n      return result;\r\n    }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":["6616a9b902d52a1d7831e2ad621d234ef3b540e6","6616a9b902d52a1d7831e2ad621d234ef3b540e6"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6616a9b902d52a1d7831e2ad621d234ef3b540e6","date":1141872133,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/ConstantScoreQuery.ConstantWeight#explain(IndexReader,int).mjava","pathOld":"src/java/org/apache/lucene/search/ConstantScoreQuery.ConstantWeight#explain(IndexReader,int).mjava","sourceNew":"    public Explanation explain(IndexReader reader, int doc) throws IOException {\n\n      ConstantScorer cs = (ConstantScorer)scorer(reader);\n      boolean exists = cs.bits.get(doc);\n\n      Explanation result = new Explanation();\n\n      if (exists) {\n        result.setDescription(\"ConstantScoreQuery(\" + filter\n        + \"), product of:\");\n        result.setValue(queryWeight);\n        result.addDetail(new Explanation(getBoost(), \"boost\"));\n        result.addDetail(new Explanation(queryNorm,\"queryNorm\"));\n      } else {\n        result.setDescription(\"ConstantScoreQuery(\" + filter\n        + \") doesn't match id \" + doc);\n        result.setValue(0);\n      }\n      return result;\n    }\n\n","sourceOld":"    public Explanation explain(IndexReader reader, int doc) throws IOException {\r\n\r\n      ConstantScorer cs = (ConstantScorer)scorer(reader);\r\n      boolean exists = cs.bits.get(doc);\r\n\r\n      Explanation result = new Explanation();\r\n\r\n      if (exists) {\r\n        result.setDescription(\"ConstantScoreQuery(\" + filter\r\n        + \"), product of:\");\r\n        result.setValue(queryWeight);\r\n        result.addDetail(new Explanation(getBoost(), \"boost\"));\r\n        result.addDetail(new Explanation(queryNorm,\"queryNorm\"));\r\n      } else {\r\n        result.setDescription(\"ConstantScoreQuery(\" + filter\r\n        + \") doesn't match id \" + doc);\r\n        result.setValue(0);\r\n      }\r\n      return result;\r\n    }\r\n\n","bugFix":["c5f8e44d5e9627993851287f67e8360a36cb302a"],"bugIntro":["f4e4ac061c7cb668bd0651cb565ebbad1157cadc","f4e4ac061c7cb668bd0651cb565ebbad1157cadc"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f4e4ac061c7cb668bd0651cb565ebbad1157cadc","date":1151347127,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/ConstantScoreQuery.ConstantWeight#explain(IndexReader,int).mjava","pathOld":"src/java/org/apache/lucene/search/ConstantScoreQuery.ConstantWeight#explain(IndexReader,int).mjava","sourceNew":"    public Explanation explain(IndexReader reader, int doc) throws IOException {\n\n      ConstantScorer cs = (ConstantScorer)scorer(reader);\n      boolean exists = cs.bits.get(doc);\n\n      ComplexExplanation result = new ComplexExplanation();\n\n      if (exists) {\n        result.setDescription(\"ConstantScoreQuery(\" + filter\n        + \"), product of:\");\n        result.setValue(queryWeight);\n        result.setMatch(Boolean.TRUE);\n        result.addDetail(new Explanation(getBoost(), \"boost\"));\n        result.addDetail(new Explanation(queryNorm,\"queryNorm\"));\n      } else {\n        result.setDescription(\"ConstantScoreQuery(\" + filter\n        + \") doesn't match id \" + doc);\n        result.setValue(0);\n        result.setMatch(Boolean.FALSE);\n      }\n      return result;\n    }\n\n","sourceOld":"    public Explanation explain(IndexReader reader, int doc) throws IOException {\n\n      ConstantScorer cs = (ConstantScorer)scorer(reader);\n      boolean exists = cs.bits.get(doc);\n\n      Explanation result = new Explanation();\n\n      if (exists) {\n        result.setDescription(\"ConstantScoreQuery(\" + filter\n        + \"), product of:\");\n        result.setValue(queryWeight);\n        result.addDetail(new Explanation(getBoost(), \"boost\"));\n        result.addDetail(new Explanation(queryNorm,\"queryNorm\"));\n      } else {\n        result.setDescription(\"ConstantScoreQuery(\" + filter\n        + \") doesn't match id \" + doc);\n        result.setValue(0);\n      }\n      return result;\n    }\n\n","bugFix":["6616a9b902d52a1d7831e2ad621d234ef3b540e6"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"52ce7e961a8217faac8128e3c8fe67819eefdde9","date":1201979043,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/ConstantScoreQuery.ConstantWeight#explain(IndexReader,int).mjava","pathOld":"src/java/org/apache/lucene/search/ConstantScoreQuery.ConstantWeight#explain(IndexReader,int).mjava","sourceNew":"    public Explanation explain(IndexReader reader, int doc) throws IOException {\n\n      ConstantScorer cs = (ConstantScorer)scorer(reader);\n      boolean exists = cs.docIdSetIterator.skipTo(doc) && (cs.docIdSetIterator.doc() == doc);\n\n      ComplexExplanation result = new ComplexExplanation();\n\n      if (exists) {\n        result.setDescription(\"ConstantScoreQuery(\" + filter\n        + \"), product of:\");\n        result.setValue(queryWeight);\n        result.setMatch(Boolean.TRUE);\n        result.addDetail(new Explanation(getBoost(), \"boost\"));\n        result.addDetail(new Explanation(queryNorm,\"queryNorm\"));\n      } else {\n        result.setDescription(\"ConstantScoreQuery(\" + filter\n        + \") doesn't match id \" + doc);\n        result.setValue(0);\n        result.setMatch(Boolean.FALSE);\n      }\n      return result;\n    }\n\n","sourceOld":"    public Explanation explain(IndexReader reader, int doc) throws IOException {\n\n      ConstantScorer cs = (ConstantScorer)scorer(reader);\n      boolean exists = cs.bits.get(doc);\n\n      ComplexExplanation result = new ComplexExplanation();\n\n      if (exists) {\n        result.setDescription(\"ConstantScoreQuery(\" + filter\n        + \"), product of:\");\n        result.setValue(queryWeight);\n        result.setMatch(Boolean.TRUE);\n        result.addDetail(new Explanation(getBoost(), \"boost\"));\n        result.addDetail(new Explanation(queryNorm,\"queryNorm\"));\n      } else {\n        result.setDescription(\"ConstantScoreQuery(\" + filter\n        + \") doesn't match id \" + doc);\n        result.setValue(0);\n        result.setMatch(Boolean.FALSE);\n      }\n      return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30a558487f2298c2c19ceca9103c1b6865d64708","date":1244393921,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/ConstantScoreQuery.ConstantWeight#explain(IndexReader,int).mjava","pathOld":"src/java/org/apache/lucene/search/ConstantScoreQuery.ConstantWeight#explain(IndexReader,int).mjava","sourceNew":"    public Explanation explain(IndexReader reader, int doc) throws IOException {\n\n      ConstantScorer cs = (ConstantScorer)scorer(reader);\n      boolean exists = cs.docIdSetIterator.advance(doc) == doc;\n\n      ComplexExplanation result = new ComplexExplanation();\n\n      if (exists) {\n        result.setDescription(\"ConstantScoreQuery(\" + filter\n        + \"), product of:\");\n        result.setValue(queryWeight);\n        result.setMatch(Boolean.TRUE);\n        result.addDetail(new Explanation(getBoost(), \"boost\"));\n        result.addDetail(new Explanation(queryNorm,\"queryNorm\"));\n      } else {\n        result.setDescription(\"ConstantScoreQuery(\" + filter\n        + \") doesn't match id \" + doc);\n        result.setValue(0);\n        result.setMatch(Boolean.FALSE);\n      }\n      return result;\n    }\n\n","sourceOld":"    public Explanation explain(IndexReader reader, int doc) throws IOException {\n\n      ConstantScorer cs = (ConstantScorer)scorer(reader);\n      boolean exists = cs.docIdSetIterator.skipTo(doc) && (cs.docIdSetIterator.doc() == doc);\n\n      ComplexExplanation result = new ComplexExplanation();\n\n      if (exists) {\n        result.setDescription(\"ConstantScoreQuery(\" + filter\n        + \"), product of:\");\n        result.setValue(queryWeight);\n        result.setMatch(Boolean.TRUE);\n        result.addDetail(new Explanation(getBoost(), \"boost\"));\n        result.addDetail(new Explanation(queryNorm,\"queryNorm\"));\n      } else {\n        result.setDescription(\"ConstantScoreQuery(\" + filter\n        + \") doesn't match id \" + doc);\n        result.setValue(0);\n        result.setMatch(Boolean.FALSE);\n      }\n      return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"052fac7830290bd38a04cddee1a121ee07656b56","date":1245780702,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/ConstantScoreQuery.ConstantWeight#explain(IndexReader,int).mjava","pathOld":"src/java/org/apache/lucene/search/ConstantScoreQuery.ConstantWeight#explain(IndexReader,int).mjava","sourceNew":"    public Explanation explain(IndexReader reader, int doc) throws IOException {\n\n      ConstantScorer cs = (ConstantScorer) scorer(reader, true, false);\n      boolean exists = cs.docIdSetIterator.advance(doc) == doc;\n\n      ComplexExplanation result = new ComplexExplanation();\n\n      if (exists) {\n        result.setDescription(\"ConstantScoreQuery(\" + filter\n        + \"), product of:\");\n        result.setValue(queryWeight);\n        result.setMatch(Boolean.TRUE);\n        result.addDetail(new Explanation(getBoost(), \"boost\"));\n        result.addDetail(new Explanation(queryNorm,\"queryNorm\"));\n      } else {\n        result.setDescription(\"ConstantScoreQuery(\" + filter\n        + \") doesn't match id \" + doc);\n        result.setValue(0);\n        result.setMatch(Boolean.FALSE);\n      }\n      return result;\n    }\n\n","sourceOld":"    public Explanation explain(IndexReader reader, int doc) throws IOException {\n\n      ConstantScorer cs = (ConstantScorer)scorer(reader);\n      boolean exists = cs.docIdSetIterator.advance(doc) == doc;\n\n      ComplexExplanation result = new ComplexExplanation();\n\n      if (exists) {\n        result.setDescription(\"ConstantScoreQuery(\" + filter\n        + \"), product of:\");\n        result.setValue(queryWeight);\n        result.setMatch(Boolean.TRUE);\n        result.addDetail(new Explanation(getBoost(), \"boost\"));\n        result.addDetail(new Explanation(queryNorm,\"queryNorm\"));\n      } else {\n        result.setDescription(\"ConstantScoreQuery(\" + filter\n        + \") doesn't match id \" + doc);\n        result.setValue(0);\n        result.setMatch(Boolean.FALSE);\n      }\n      return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe941135bdfc28c81e20b4d21422f8726af34925","date":1250040150,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/ConstantScoreQuery.ConstantWeight#explain(Searcher,IndexReader,int).mjava","pathOld":"src/java/org/apache/lucene/search/ConstantScoreQuery.ConstantWeight#explain(IndexReader,int).mjava","sourceNew":"    public Explanation explain(Searcher searcher, IndexReader reader, int doc) throws IOException {\n      \n      ConstantScorer cs = new ConstantScorer(similarity, reader, this);\n      boolean exists = cs.docIdSetIterator.advance(doc) == doc;\n\n      ComplexExplanation result = new ComplexExplanation();\n\n      if (exists) {\n        result.setDescription(\"ConstantScoreQuery(\" + filter\n        + \"), product of:\");\n        result.setValue(queryWeight);\n        result.setMatch(Boolean.TRUE);\n        result.addDetail(new Explanation(getBoost(), \"boost\"));\n        result.addDetail(new Explanation(queryNorm,\"queryNorm\"));\n      } else {\n        result.setDescription(\"ConstantScoreQuery(\" + filter\n        + \") doesn't match id \" + doc);\n        result.setValue(0);\n        result.setMatch(Boolean.FALSE);\n      }\n      return result;\n    }\n\n","sourceOld":"    public Explanation explain(IndexReader reader, int doc) throws IOException {\n\n      ConstantScorer cs = (ConstantScorer) scorer(reader, true, false);\n      boolean exists = cs.docIdSetIterator.advance(doc) == doc;\n\n      ComplexExplanation result = new ComplexExplanation();\n\n      if (exists) {\n        result.setDescription(\"ConstantScoreQuery(\" + filter\n        + \"), product of:\");\n        result.setValue(queryWeight);\n        result.setMatch(Boolean.TRUE);\n        result.addDetail(new Explanation(getBoost(), \"boost\"));\n        result.addDetail(new Explanation(queryNorm,\"queryNorm\"));\n      } else {\n        result.setDescription(\"ConstantScoreQuery(\" + filter\n        + \") doesn't match id \" + doc);\n        result.setValue(0);\n        result.setMatch(Boolean.FALSE);\n      }\n      return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"231941d2cb96b9752e839c311391096d90470db8","date":1251116803,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/ConstantScoreQuery.ConstantWeight#explain(IndexReader,int).mjava","pathOld":"src/java/org/apache/lucene/search/ConstantScoreQuery.ConstantWeight#explain(Searcher,IndexReader,int).mjava","sourceNew":"    public Explanation explain(IndexReader reader, int doc) throws IOException {\n      \n      ConstantScorer cs = new ConstantScorer(similarity, reader, this);\n      boolean exists = cs.docIdSetIterator.advance(doc) == doc;\n\n      ComplexExplanation result = new ComplexExplanation();\n\n      if (exists) {\n        result.setDescription(\"ConstantScoreQuery(\" + filter\n        + \"), product of:\");\n        result.setValue(queryWeight);\n        result.setMatch(Boolean.TRUE);\n        result.addDetail(new Explanation(getBoost(), \"boost\"));\n        result.addDetail(new Explanation(queryNorm,\"queryNorm\"));\n      } else {\n        result.setDescription(\"ConstantScoreQuery(\" + filter\n        + \") doesn't match id \" + doc);\n        result.setValue(0);\n        result.setMatch(Boolean.FALSE);\n      }\n      return result;\n    }\n\n","sourceOld":"    public Explanation explain(Searcher searcher, IndexReader reader, int doc) throws IOException {\n      \n      ConstantScorer cs = new ConstantScorer(similarity, reader, this);\n      boolean exists = cs.docIdSetIterator.advance(doc) == doc;\n\n      ComplexExplanation result = new ComplexExplanation();\n\n      if (exists) {\n        result.setDescription(\"ConstantScoreQuery(\" + filter\n        + \"), product of:\");\n        result.setValue(queryWeight);\n        result.setMatch(Boolean.TRUE);\n        result.addDetail(new Explanation(getBoost(), \"boost\"));\n        result.addDetail(new Explanation(queryNorm,\"queryNorm\"));\n      } else {\n        result.setDescription(\"ConstantScoreQuery(\" + filter\n        + \") doesn't match id \" + doc);\n        result.setValue(0);\n        result.setMatch(Boolean.FALSE);\n      }\n      return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"486cfd5a3f7481938475c113415d896f7a74a4a9","date":1256682581,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/ConstantScoreQuery.ConstantWeight#explain(IndexReader,int).mjava","pathOld":"src/java/org/apache/lucene/search/ConstantScoreQuery.ConstantWeight#explain(IndexReader,int).mjava","sourceNew":"    @Override\n    public Explanation explain(IndexReader reader, int doc) throws IOException {\n      \n      ConstantScorer cs = new ConstantScorer(similarity, reader, this);\n      boolean exists = cs.docIdSetIterator.advance(doc) == doc;\n\n      ComplexExplanation result = new ComplexExplanation();\n\n      if (exists) {\n        result.setDescription(\"ConstantScoreQuery(\" + filter\n        + \"), product of:\");\n        result.setValue(queryWeight);\n        result.setMatch(Boolean.TRUE);\n        result.addDetail(new Explanation(getBoost(), \"boost\"));\n        result.addDetail(new Explanation(queryNorm,\"queryNorm\"));\n      } else {\n        result.setDescription(\"ConstantScoreQuery(\" + filter\n        + \") doesn't match id \" + doc);\n        result.setValue(0);\n        result.setMatch(Boolean.FALSE);\n      }\n      return result;\n    }\n\n","sourceOld":"    public Explanation explain(IndexReader reader, int doc) throws IOException {\n      \n      ConstantScorer cs = new ConstantScorer(similarity, reader, this);\n      boolean exists = cs.docIdSetIterator.advance(doc) == doc;\n\n      ComplexExplanation result = new ComplexExplanation();\n\n      if (exists) {\n        result.setDescription(\"ConstantScoreQuery(\" + filter\n        + \"), product of:\");\n        result.setValue(queryWeight);\n        result.setMatch(Boolean.TRUE);\n        result.addDetail(new Explanation(getBoost(), \"boost\"));\n        result.addDetail(new Explanation(queryNorm,\"queryNorm\"));\n      } else {\n        result.setDescription(\"ConstantScoreQuery(\" + filter\n        + \") doesn't match id \" + doc);\n        result.setValue(0);\n        result.setMatch(Boolean.FALSE);\n      }\n      return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/ConstantScoreQuery.ConstantWeight#explain(IndexReader,int).mjava","pathOld":"src/java/org/apache/lucene/search/ConstantScoreQuery.ConstantWeight#explain(IndexReader,int).mjava","sourceNew":"    @Override\n    public Explanation explain(IndexReader reader, int doc) throws IOException {\n      \n      ConstantScorer cs = new ConstantScorer(similarity, reader, this);\n      boolean exists = cs.docIdSetIterator.advance(doc) == doc;\n\n      ComplexExplanation result = new ComplexExplanation();\n\n      if (exists) {\n        result.setDescription(\"ConstantScoreQuery(\" + filter\n        + \"), product of:\");\n        result.setValue(queryWeight);\n        result.setMatch(Boolean.TRUE);\n        result.addDetail(new Explanation(getBoost(), \"boost\"));\n        result.addDetail(new Explanation(queryNorm,\"queryNorm\"));\n      } else {\n        result.setDescription(\"ConstantScoreQuery(\" + filter\n        + \") doesn't match id \" + doc);\n        result.setValue(0);\n        result.setMatch(Boolean.FALSE);\n      }\n      return result;\n    }\n\n","sourceOld":"    @Override\n    public Explanation explain(IndexReader reader, int doc) throws IOException {\n      \n      ConstantScorer cs = new ConstantScorer(similarity, reader, this);\n      boolean exists = cs.docIdSetIterator.advance(doc) == doc;\n\n      ComplexExplanation result = new ComplexExplanation();\n\n      if (exists) {\n        result.setDescription(\"ConstantScoreQuery(\" + filter\n        + \"), product of:\");\n        result.setValue(queryWeight);\n        result.setMatch(Boolean.TRUE);\n        result.addDetail(new Explanation(getBoost(), \"boost\"));\n        result.addDetail(new Explanation(queryNorm,\"queryNorm\"));\n      } else {\n        result.setDescription(\"ConstantScoreQuery(\" + filter\n        + \") doesn't match id \" + doc);\n        result.setValue(0);\n        result.setMatch(Boolean.FALSE);\n      }\n      return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"486cfd5a3f7481938475c113415d896f7a74a4a9":["231941d2cb96b9752e839c311391096d90470db8"],"30a558487f2298c2c19ceca9103c1b6865d64708":["52ce7e961a8217faac8128e3c8fe67819eefdde9"],"6616a9b902d52a1d7831e2ad621d234ef3b540e6":["c5f8e44d5e9627993851287f67e8360a36cb302a"],"c5f8e44d5e9627993851287f67e8360a36cb302a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f4e4ac061c7cb668bd0651cb565ebbad1157cadc":["6616a9b902d52a1d7831e2ad621d234ef3b540e6"],"231941d2cb96b9752e839c311391096d90470db8":["fe941135bdfc28c81e20b4d21422f8726af34925"],"52ce7e961a8217faac8128e3c8fe67819eefdde9":["f4e4ac061c7cb668bd0651cb565ebbad1157cadc"],"fe941135bdfc28c81e20b4d21422f8726af34925":["052fac7830290bd38a04cddee1a121ee07656b56"],"052fac7830290bd38a04cddee1a121ee07656b56":["30a558487f2298c2c19ceca9103c1b6865d64708"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["486cfd5a3f7481938475c113415d896f7a74a4a9"]},"commit2Childs":{"486cfd5a3f7481938475c113415d896f7a74a4a9":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"30a558487f2298c2c19ceca9103c1b6865d64708":["052fac7830290bd38a04cddee1a121ee07656b56"],"6616a9b902d52a1d7831e2ad621d234ef3b540e6":["f4e4ac061c7cb668bd0651cb565ebbad1157cadc"],"c5f8e44d5e9627993851287f67e8360a36cb302a":["6616a9b902d52a1d7831e2ad621d234ef3b540e6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c5f8e44d5e9627993851287f67e8360a36cb302a"],"f4e4ac061c7cb668bd0651cb565ebbad1157cadc":["52ce7e961a8217faac8128e3c8fe67819eefdde9"],"231941d2cb96b9752e839c311391096d90470db8":["486cfd5a3f7481938475c113415d896f7a74a4a9"],"52ce7e961a8217faac8128e3c8fe67819eefdde9":["30a558487f2298c2c19ceca9103c1b6865d64708"],"fe941135bdfc28c81e20b4d21422f8726af34925":["231941d2cb96b9752e839c311391096d90470db8"],"052fac7830290bd38a04cddee1a121ee07656b56":["fe941135bdfc28c81e20b4d21422f8726af34925"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}