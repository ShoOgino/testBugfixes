{"path":"lucene/src/test/org/apache/lucene/index/TestTermVectorsWriter#testTermVectorCorruption().mjava","commits":[{"id":"8797b4584f9c10520b8f985903790413b682f776","date":1288950293,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestTermVectorsWriter#testTermVectorCorruption().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testTermVectorCorruption().mjava","sourceNew":"  // LUCENE-1168\n  public void testTermVectorCorruption() throws IOException {\n\n    Directory dir = newDirectory();\n    for(int iter=0;iter<2;iter++) {\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer())\n          .setMaxBufferedDocs(2).setRAMBufferSizeMB(\n              IndexWriterConfig.DISABLE_AUTO_FLUSH).setMergeScheduler(\n              new SerialMergeScheduler()).setMergePolicy(\n              new LogDocMergePolicy()));\n\n      Document document = new Document();\n\n      Field storedField = newField(\"stored\", \"stored\", Field.Store.YES,\n                                    Field.Index.NO);\n      document.add(storedField);\n      writer.addDocument(document);\n      writer.addDocument(document);\n\n      document = new Document();\n      document.add(storedField);\n      Field termVectorField = newField(\"termVector\", \"termVector\",\n                                        Field.Store.NO, Field.Index.NOT_ANALYZED,\n                                        Field.TermVector.WITH_POSITIONS_OFFSETS);\n\n      document.add(termVectorField);\n      writer.addDocument(document);\n      writer.optimize();\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      for(int i=0;i<reader.numDocs();i++) {\n        reader.document(i);\n        reader.getTermFreqVectors(i);\n      }\n      reader.close();\n\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT,\n          new MockAnalyzer()).setMaxBufferedDocs(2)\n          .setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n          .setMergeScheduler(new SerialMergeScheduler()).setMergePolicy(\n              new LogDocMergePolicy()));\n\n      Directory[] indexDirs = {new MockDirectoryWrapper(new RAMDirectory(dir))};\n      writer.addIndexes(indexDirs);\n      writer.optimize();\n      writer.close();\n    }\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1168\n  public void testTermVectorCorruption() throws IOException {\n\n    Directory dir = newDirectory();\n    for(int iter=0;iter<2;iter++) {\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer())\n          .setMaxBufferedDocs(2).setRAMBufferSizeMB(\n              IndexWriterConfig.DISABLE_AUTO_FLUSH).setMergeScheduler(\n              new SerialMergeScheduler()).setMergePolicy(\n              new LogDocMergePolicy()));\n\n      Document document = new Document();\n\n      Field storedField = newField(\"stored\", \"stored\", Field.Store.YES,\n                                    Field.Index.NO);\n      document.add(storedField);\n      writer.addDocument(document);\n      writer.addDocument(document);\n\n      document = new Document();\n      document.add(storedField);\n      Field termVectorField = newField(\"termVector\", \"termVector\",\n                                        Field.Store.NO, Field.Index.NOT_ANALYZED,\n                                        Field.TermVector.WITH_POSITIONS_OFFSETS);\n\n      document.add(termVectorField);\n      writer.addDocument(document);\n      writer.optimize();\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      for(int i=0;i<reader.numDocs();i++) {\n        reader.document(i);\n        reader.getTermFreqVectors(i);\n      }\n      reader.close();\n\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT,\n          new MockAnalyzer()).setMaxBufferedDocs(2)\n          .setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n          .setMergeScheduler(new SerialMergeScheduler()).setMergePolicy(\n              new LogDocMergePolicy()));\n\n      Directory[] indexDirs = {new MockDirectoryWrapper(new RAMDirectory(dir))};\n      writer.addIndexes(indexDirs);\n      writer.optimize();\n      writer.close();\n    }\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85a883878c0af761245ab048babc63d099f835f3","date":1289553330,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestTermVectorsWriter#testTermVectorCorruption().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testTermVectorCorruption().mjava","sourceNew":"  // LUCENE-1168\n  public void testTermVectorCorruption() throws IOException {\n\n    Directory dir = newDirectory();\n    for(int iter=0;iter<2;iter++) {\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer())\n          .setMaxBufferedDocs(2).setRAMBufferSizeMB(\n              IndexWriterConfig.DISABLE_AUTO_FLUSH).setMergeScheduler(\n              new SerialMergeScheduler()).setMergePolicy(\n              new LogDocMergePolicy()));\n\n      Document document = new Document();\n\n      Field storedField = newField(\"stored\", \"stored\", Field.Store.YES,\n                                    Field.Index.NO);\n      document.add(storedField);\n      writer.addDocument(document);\n      writer.addDocument(document);\n\n      document = new Document();\n      document.add(storedField);\n      Field termVectorField = newField(\"termVector\", \"termVector\",\n                                        Field.Store.NO, Field.Index.NOT_ANALYZED,\n                                        Field.TermVector.WITH_POSITIONS_OFFSETS);\n\n      document.add(termVectorField);\n      writer.addDocument(document);\n      writer.optimize();\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      for(int i=0;i<reader.numDocs();i++) {\n        reader.document(i);\n        reader.getTermFreqVectors(i);\n      }\n      reader.close();\n\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT,\n          new MockAnalyzer()).setMaxBufferedDocs(2)\n          .setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n          .setMergeScheduler(new SerialMergeScheduler()).setMergePolicy(\n              new LogDocMergePolicy()));\n\n      Directory[] indexDirs = {new MockDirectoryWrapper(new RAMDirectory(dir))};\n      writer.addIndexes(indexDirs);\n      writer.optimize();\n      writer.close();\n    }\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1168\n  public void testTermVectorCorruption() throws IOException {\n\n    Directory dir = newDirectory();\n    for(int iter=0;iter<2;iter++) {\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer())\n          .setMaxBufferedDocs(2).setRAMBufferSizeMB(\n              IndexWriterConfig.DISABLE_AUTO_FLUSH).setMergeScheduler(\n              new SerialMergeScheduler()).setMergePolicy(\n              new LogDocMergePolicy()));\n\n      Document document = new Document();\n\n      Field storedField = newField(\"stored\", \"stored\", Field.Store.YES,\n                                    Field.Index.NO);\n      document.add(storedField);\n      writer.addDocument(document);\n      writer.addDocument(document);\n\n      document = new Document();\n      document.add(storedField);\n      Field termVectorField = newField(\"termVector\", \"termVector\",\n                                        Field.Store.NO, Field.Index.NOT_ANALYZED,\n                                        Field.TermVector.WITH_POSITIONS_OFFSETS);\n\n      document.add(termVectorField);\n      writer.addDocument(document);\n      writer.optimize();\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      for(int i=0;i<reader.numDocs();i++) {\n        reader.document(i);\n        reader.getTermFreqVectors(i);\n      }\n      reader.close();\n\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT,\n          new MockAnalyzer()).setMaxBufferedDocs(2)\n          .setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n          .setMergeScheduler(new SerialMergeScheduler()).setMergePolicy(\n              new LogDocMergePolicy()));\n\n      Directory[] indexDirs = {new MockDirectoryWrapper(new RAMDirectory(dir))};\n      writer.addIndexes(indexDirs);\n      writer.optimize();\n      writer.close();\n    }\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"53a31399f2471493d67b19a95c028a74e0113b6a","date":1289817072,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestTermVectorsWriter#testTermVectorCorruption().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestTermVectorsWriter#testTermVectorCorruption().mjava","sourceNew":"  // LUCENE-1168\n  public void testTermVectorCorruption() throws IOException {\n\n    Directory dir = newDirectory();\n    for(int iter=0;iter<2;iter++) {\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer())\n          .setMaxBufferedDocs(2).setRAMBufferSizeMB(\n              IndexWriterConfig.DISABLE_AUTO_FLUSH).setMergeScheduler(\n              new SerialMergeScheduler()).setMergePolicy(\n              new LogDocMergePolicy()));\n\n      Document document = new Document();\n\n      Field storedField = newField(\"stored\", \"stored\", Field.Store.YES,\n                                    Field.Index.NO);\n      document.add(storedField);\n      writer.addDocument(document);\n      writer.addDocument(document);\n\n      document = new Document();\n      document.add(storedField);\n      Field termVectorField = newField(\"termVector\", \"termVector\",\n                                        Field.Store.NO, Field.Index.NOT_ANALYZED,\n                                        Field.TermVector.WITH_POSITIONS_OFFSETS);\n\n      document.add(termVectorField);\n      writer.addDocument(document);\n      writer.optimize();\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      for(int i=0;i<reader.numDocs();i++) {\n        reader.document(i);\n        reader.getTermFreqVectors(i);\n      }\n      reader.close();\n\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT,\n          new MockAnalyzer()).setMaxBufferedDocs(2)\n          .setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n          .setMergeScheduler(new SerialMergeScheduler()).setMergePolicy(\n              new LogDocMergePolicy()));\n\n      Directory[] indexDirs = {new MockDirectoryWrapper(random, new RAMDirectory(dir))};\n      writer.addIndexes(indexDirs);\n      writer.optimize();\n      writer.close();\n    }\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1168\n  public void testTermVectorCorruption() throws IOException {\n\n    Directory dir = newDirectory();\n    for(int iter=0;iter<2;iter++) {\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer())\n          .setMaxBufferedDocs(2).setRAMBufferSizeMB(\n              IndexWriterConfig.DISABLE_AUTO_FLUSH).setMergeScheduler(\n              new SerialMergeScheduler()).setMergePolicy(\n              new LogDocMergePolicy()));\n\n      Document document = new Document();\n\n      Field storedField = newField(\"stored\", \"stored\", Field.Store.YES,\n                                    Field.Index.NO);\n      document.add(storedField);\n      writer.addDocument(document);\n      writer.addDocument(document);\n\n      document = new Document();\n      document.add(storedField);\n      Field termVectorField = newField(\"termVector\", \"termVector\",\n                                        Field.Store.NO, Field.Index.NOT_ANALYZED,\n                                        Field.TermVector.WITH_POSITIONS_OFFSETS);\n\n      document.add(termVectorField);\n      writer.addDocument(document);\n      writer.optimize();\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      for(int i=0;i<reader.numDocs();i++) {\n        reader.document(i);\n        reader.getTermFreqVectors(i);\n      }\n      reader.close();\n\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT,\n          new MockAnalyzer()).setMaxBufferedDocs(2)\n          .setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n          .setMergeScheduler(new SerialMergeScheduler()).setMergePolicy(\n              new LogDocMergePolicy()));\n\n      Directory[] indexDirs = {new MockDirectoryWrapper(new RAMDirectory(dir))};\n      writer.addIndexes(indexDirs);\n      writer.optimize();\n      writer.close();\n    }\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ab1f5591dc05f1f2b5407d809c9699f75554a32","date":1290008586,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestTermVectorsWriter#testTermVectorCorruption().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestTermVectorsWriter#testTermVectorCorruption().mjava","sourceNew":"  // LUCENE-1168\n  public void testTermVectorCorruption() throws IOException {\n\n    Directory dir = newDirectory();\n    for(int iter=0;iter<2;iter++) {\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer())\n          .setMaxBufferedDocs(2).setRAMBufferSizeMB(\n              IndexWriterConfig.DISABLE_AUTO_FLUSH).setMergeScheduler(\n              new SerialMergeScheduler()).setMergePolicy(\n              new LogDocMergePolicy()));\n\n      Document document = new Document();\n\n      Field storedField = newField(\"stored\", \"stored\", Field.Store.YES,\n                                    Field.Index.NO);\n      document.add(storedField);\n      writer.addDocument(document);\n      writer.addDocument(document);\n\n      document = new Document();\n      document.add(storedField);\n      Field termVectorField = newField(\"termVector\", \"termVector\",\n                                        Field.Store.NO, Field.Index.NOT_ANALYZED,\n                                        Field.TermVector.WITH_POSITIONS_OFFSETS);\n\n      document.add(termVectorField);\n      writer.addDocument(document);\n      writer.optimize();\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      for(int i=0;i<reader.numDocs();i++) {\n        reader.document(i);\n        reader.getTermFreqVectors(i);\n      }\n      reader.close();\n\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT,\n          new MockAnalyzer()).setMaxBufferedDocs(2)\n          .setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n          .setMergeScheduler(new SerialMergeScheduler()).setMergePolicy(\n              new LogDocMergePolicy()));\n\n      Directory[] indexDirs = {new MockDirectoryWrapper(random, new RAMDirectory(dir))};\n      writer.addIndexes(indexDirs);\n      writer.optimize();\n      writer.close();\n    }\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1168\n  public void testTermVectorCorruption() throws IOException {\n\n    Directory dir = newDirectory();\n    for(int iter=0;iter<2;iter++) {\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer())\n          .setMaxBufferedDocs(2).setRAMBufferSizeMB(\n              IndexWriterConfig.DISABLE_AUTO_FLUSH).setMergeScheduler(\n              new SerialMergeScheduler()).setMergePolicy(\n              new LogDocMergePolicy()));\n\n      Document document = new Document();\n\n      Field storedField = newField(\"stored\", \"stored\", Field.Store.YES,\n                                    Field.Index.NO);\n      document.add(storedField);\n      writer.addDocument(document);\n      writer.addDocument(document);\n\n      document = new Document();\n      document.add(storedField);\n      Field termVectorField = newField(\"termVector\", \"termVector\",\n                                        Field.Store.NO, Field.Index.NOT_ANALYZED,\n                                        Field.TermVector.WITH_POSITIONS_OFFSETS);\n\n      document.add(termVectorField);\n      writer.addDocument(document);\n      writer.optimize();\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      for(int i=0;i<reader.numDocs();i++) {\n        reader.document(i);\n        reader.getTermFreqVectors(i);\n      }\n      reader.close();\n\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT,\n          new MockAnalyzer()).setMaxBufferedDocs(2)\n          .setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n          .setMergeScheduler(new SerialMergeScheduler()).setMergePolicy(\n              new LogDocMergePolicy()));\n\n      Directory[] indexDirs = {new MockDirectoryWrapper(new RAMDirectory(dir))};\n      writer.addIndexes(indexDirs);\n      writer.optimize();\n      writer.close();\n    }\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestTermVectorsWriter#testTermVectorCorruption().mjava","pathOld":"/dev/null","sourceNew":"  // LUCENE-1168\n  public void testTermVectorCorruption() throws IOException {\n\n    Directory dir = newDirectory();\n    for(int iter=0;iter<2;iter++) {\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer())\n          .setMaxBufferedDocs(2).setRAMBufferSizeMB(\n              IndexWriterConfig.DISABLE_AUTO_FLUSH).setMergeScheduler(\n              new SerialMergeScheduler()).setMergePolicy(\n              new LogDocMergePolicy()));\n\n      Document document = new Document();\n\n      Field storedField = newField(\"stored\", \"stored\", Field.Store.YES,\n                                    Field.Index.NO);\n      document.add(storedField);\n      writer.addDocument(document);\n      writer.addDocument(document);\n\n      document = new Document();\n      document.add(storedField);\n      Field termVectorField = newField(\"termVector\", \"termVector\",\n                                        Field.Store.NO, Field.Index.NOT_ANALYZED,\n                                        Field.TermVector.WITH_POSITIONS_OFFSETS);\n\n      document.add(termVectorField);\n      writer.addDocument(document);\n      writer.optimize();\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      for(int i=0;i<reader.numDocs();i++) {\n        reader.document(i);\n        reader.getTermFreqVectors(i);\n      }\n      reader.close();\n\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT,\n          new MockAnalyzer()).setMaxBufferedDocs(2)\n          .setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n          .setMergeScheduler(new SerialMergeScheduler()).setMergePolicy(\n              new LogDocMergePolicy()));\n\n      Directory[] indexDirs = {new MockDirectoryWrapper(random, new RAMDirectory(dir))};\n      writer.addIndexes(indexDirs);\n      writer.optimize();\n      writer.close();\n    }\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestTermVectorsWriter#testTermVectorCorruption().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestTermVectorsWriter#testTermVectorCorruption().mjava","sourceNew":"  // LUCENE-1168\n  public void testTermVectorCorruption() throws IOException {\n\n    Directory dir = newDirectory();\n    for(int iter=0;iter<2;iter++) {\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random))\n          .setMaxBufferedDocs(2).setRAMBufferSizeMB(\n              IndexWriterConfig.DISABLE_AUTO_FLUSH).setMergeScheduler(\n              new SerialMergeScheduler()).setMergePolicy(\n              new LogDocMergePolicy()));\n\n      Document document = new Document();\n\n      Field storedField = newField(\"stored\", \"stored\", Field.Store.YES,\n                                    Field.Index.NO);\n      document.add(storedField);\n      writer.addDocument(document);\n      writer.addDocument(document);\n\n      document = new Document();\n      document.add(storedField);\n      Field termVectorField = newField(\"termVector\", \"termVector\",\n                                        Field.Store.NO, Field.Index.NOT_ANALYZED,\n                                        Field.TermVector.WITH_POSITIONS_OFFSETS);\n\n      document.add(termVectorField);\n      writer.addDocument(document);\n      writer.optimize();\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      for(int i=0;i<reader.numDocs();i++) {\n        reader.document(i);\n        reader.getTermFreqVectors(i);\n      }\n      reader.close();\n\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT,\n          new MockAnalyzer(random)).setMaxBufferedDocs(2)\n          .setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n          .setMergeScheduler(new SerialMergeScheduler()).setMergePolicy(\n              new LogDocMergePolicy()));\n\n      Directory[] indexDirs = {new MockDirectoryWrapper(random, new RAMDirectory(dir))};\n      writer.addIndexes(indexDirs);\n      writer.optimize();\n      writer.close();\n    }\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1168\n  public void testTermVectorCorruption() throws IOException {\n\n    Directory dir = newDirectory();\n    for(int iter=0;iter<2;iter++) {\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer())\n          .setMaxBufferedDocs(2).setRAMBufferSizeMB(\n              IndexWriterConfig.DISABLE_AUTO_FLUSH).setMergeScheduler(\n              new SerialMergeScheduler()).setMergePolicy(\n              new LogDocMergePolicy()));\n\n      Document document = new Document();\n\n      Field storedField = newField(\"stored\", \"stored\", Field.Store.YES,\n                                    Field.Index.NO);\n      document.add(storedField);\n      writer.addDocument(document);\n      writer.addDocument(document);\n\n      document = new Document();\n      document.add(storedField);\n      Field termVectorField = newField(\"termVector\", \"termVector\",\n                                        Field.Store.NO, Field.Index.NOT_ANALYZED,\n                                        Field.TermVector.WITH_POSITIONS_OFFSETS);\n\n      document.add(termVectorField);\n      writer.addDocument(document);\n      writer.optimize();\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      for(int i=0;i<reader.numDocs();i++) {\n        reader.document(i);\n        reader.getTermFreqVectors(i);\n      }\n      reader.close();\n\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT,\n          new MockAnalyzer()).setMaxBufferedDocs(2)\n          .setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n          .setMergeScheduler(new SerialMergeScheduler()).setMergePolicy(\n              new LogDocMergePolicy()));\n\n      Directory[] indexDirs = {new MockDirectoryWrapper(random, new RAMDirectory(dir))};\n      writer.addIndexes(indexDirs);\n      writer.optimize();\n      writer.close();\n    }\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestTermVectorsWriter#testTermVectorCorruption().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestTermVectorsWriter#testTermVectorCorruption().mjava","sourceNew":"  // LUCENE-1168\n  public void testTermVectorCorruption() throws IOException {\n\n    Directory dir = newDirectory();\n    for(int iter=0;iter<2;iter++) {\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random))\n          .setMaxBufferedDocs(2).setRAMBufferSizeMB(\n              IndexWriterConfig.DISABLE_AUTO_FLUSH).setMergeScheduler(\n              new SerialMergeScheduler()).setMergePolicy(\n              new LogDocMergePolicy()));\n\n      Document document = new Document();\n\n      Field storedField = newField(\"stored\", \"stored\", Field.Store.YES,\n                                    Field.Index.NO);\n      document.add(storedField);\n      writer.addDocument(document);\n      writer.addDocument(document);\n\n      document = new Document();\n      document.add(storedField);\n      Field termVectorField = newField(\"termVector\", \"termVector\",\n                                        Field.Store.NO, Field.Index.NOT_ANALYZED,\n                                        Field.TermVector.WITH_POSITIONS_OFFSETS);\n\n      document.add(termVectorField);\n      writer.addDocument(document);\n      writer.optimize();\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      for(int i=0;i<reader.numDocs();i++) {\n        reader.document(i);\n        reader.getTermFreqVectors(i);\n      }\n      reader.close();\n\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT,\n          new MockAnalyzer(random)).setMaxBufferedDocs(2)\n          .setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n          .setMergeScheduler(new SerialMergeScheduler()).setMergePolicy(\n              new LogDocMergePolicy()));\n\n      Directory[] indexDirs = {new MockDirectoryWrapper(random, new RAMDirectory(dir))};\n      writer.addIndexes(indexDirs);\n      writer.optimize();\n      writer.close();\n    }\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1168\n  public void testTermVectorCorruption() throws IOException {\n\n    Directory dir = newDirectory();\n    for(int iter=0;iter<2;iter++) {\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer())\n          .setMaxBufferedDocs(2).setRAMBufferSizeMB(\n              IndexWriterConfig.DISABLE_AUTO_FLUSH).setMergeScheduler(\n              new SerialMergeScheduler()).setMergePolicy(\n              new LogDocMergePolicy()));\n\n      Document document = new Document();\n\n      Field storedField = newField(\"stored\", \"stored\", Field.Store.YES,\n                                    Field.Index.NO);\n      document.add(storedField);\n      writer.addDocument(document);\n      writer.addDocument(document);\n\n      document = new Document();\n      document.add(storedField);\n      Field termVectorField = newField(\"termVector\", \"termVector\",\n                                        Field.Store.NO, Field.Index.NOT_ANALYZED,\n                                        Field.TermVector.WITH_POSITIONS_OFFSETS);\n\n      document.add(termVectorField);\n      writer.addDocument(document);\n      writer.optimize();\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      for(int i=0;i<reader.numDocs();i++) {\n        reader.document(i);\n        reader.getTermFreqVectors(i);\n      }\n      reader.close();\n\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT,\n          new MockAnalyzer()).setMaxBufferedDocs(2)\n          .setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n          .setMergeScheduler(new SerialMergeScheduler()).setMergePolicy(\n              new LogDocMergePolicy()));\n\n      Directory[] indexDirs = {new MockDirectoryWrapper(random, new RAMDirectory(dir))};\n      writer.addIndexes(indexDirs);\n      writer.optimize();\n      writer.close();\n    }\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestTermVectorsWriter#testTermVectorCorruption().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestTermVectorsWriter#testTermVectorCorruption().mjava","sourceNew":"  // LUCENE-1168\n  public void testTermVectorCorruption() throws IOException {\n\n    Directory dir = newDirectory();\n    for(int iter=0;iter<2;iter++) {\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random))\n          .setMaxBufferedDocs(2).setRAMBufferSizeMB(\n              IndexWriterConfig.DISABLE_AUTO_FLUSH).setMergeScheduler(\n              new SerialMergeScheduler()).setMergePolicy(\n              new LogDocMergePolicy()));\n\n      Document document = new Document();\n\n      Field storedField = newField(\"stored\", \"stored\", Field.Store.YES,\n                                    Field.Index.NO);\n      document.add(storedField);\n      writer.addDocument(document);\n      writer.addDocument(document);\n\n      document = new Document();\n      document.add(storedField);\n      Field termVectorField = newField(\"termVector\", \"termVector\",\n                                        Field.Store.NO, Field.Index.NOT_ANALYZED,\n                                        Field.TermVector.WITH_POSITIONS_OFFSETS);\n\n      document.add(termVectorField);\n      writer.addDocument(document);\n      writer.optimize();\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      for(int i=0;i<reader.numDocs();i++) {\n        reader.document(i);\n        reader.getTermFreqVectors(i);\n      }\n      reader.close();\n\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT,\n          new MockAnalyzer(random)).setMaxBufferedDocs(2)\n          .setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n          .setMergeScheduler(new SerialMergeScheduler()).setMergePolicy(\n              new LogDocMergePolicy()));\n\n      Directory[] indexDirs = {new MockDirectoryWrapper(random, new RAMDirectory(dir))};\n      writer.addIndexes(indexDirs);\n      writer.optimize();\n      writer.close();\n    }\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1168\n  public void testTermVectorCorruption() throws IOException {\n\n    Directory dir = newDirectory();\n    for(int iter=0;iter<2;iter++) {\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer())\n          .setMaxBufferedDocs(2).setRAMBufferSizeMB(\n              IndexWriterConfig.DISABLE_AUTO_FLUSH).setMergeScheduler(\n              new SerialMergeScheduler()).setMergePolicy(\n              new LogDocMergePolicy()));\n\n      Document document = new Document();\n\n      Field storedField = newField(\"stored\", \"stored\", Field.Store.YES,\n                                    Field.Index.NO);\n      document.add(storedField);\n      writer.addDocument(document);\n      writer.addDocument(document);\n\n      document = new Document();\n      document.add(storedField);\n      Field termVectorField = newField(\"termVector\", \"termVector\",\n                                        Field.Store.NO, Field.Index.NOT_ANALYZED,\n                                        Field.TermVector.WITH_POSITIONS_OFFSETS);\n\n      document.add(termVectorField);\n      writer.addDocument(document);\n      writer.optimize();\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      for(int i=0;i<reader.numDocs();i++) {\n        reader.document(i);\n        reader.getTermFreqVectors(i);\n      }\n      reader.close();\n\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT,\n          new MockAnalyzer()).setMaxBufferedDocs(2)\n          .setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n          .setMergeScheduler(new SerialMergeScheduler()).setMergePolicy(\n              new LogDocMergePolicy()));\n\n      Directory[] indexDirs = {new MockDirectoryWrapper(random, new RAMDirectory(dir))};\n      writer.addIndexes(indexDirs);\n      writer.optimize();\n      writer.close();\n    }\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestTermVectorsWriter#testTermVectorCorruption().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestTermVectorsWriter#testTermVectorCorruption().mjava","sourceNew":"  // LUCENE-1168\n  public void testTermVectorCorruption() throws IOException {\n\n    Directory dir = newDirectory();\n    for(int iter=0;iter<2;iter++) {\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random))\n          .setMaxBufferedDocs(2).setRAMBufferSizeMB(\n              IndexWriterConfig.DISABLE_AUTO_FLUSH).setMergeScheduler(\n              new SerialMergeScheduler()).setMergePolicy(\n              new LogDocMergePolicy()));\n\n      Document document = new Document();\n\n      Field storedField = newField(\"stored\", \"stored\", Field.Store.YES,\n                                    Field.Index.NO);\n      document.add(storedField);\n      writer.addDocument(document);\n      writer.addDocument(document);\n\n      document = new Document();\n      document.add(storedField);\n      Field termVectorField = newField(\"termVector\", \"termVector\",\n                                        Field.Store.NO, Field.Index.NOT_ANALYZED,\n                                        Field.TermVector.WITH_POSITIONS_OFFSETS);\n\n      document.add(termVectorField);\n      writer.addDocument(document);\n      writer.optimize();\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      for(int i=0;i<reader.numDocs();i++) {\n        reader.document(i);\n        reader.getTermFreqVectors(i);\n      }\n      reader.close();\n\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT,\n          new MockAnalyzer(random)).setMaxBufferedDocs(2)\n          .setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n          .setMergeScheduler(new SerialMergeScheduler()).setMergePolicy(\n              new LogDocMergePolicy()));\n\n      Directory[] indexDirs = {new MockDirectoryWrapper(random, new RAMDirectory(dir))};\n      writer.addIndexes(indexDirs);\n      writer.optimize();\n      writer.close();\n    }\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1168\n  public void testTermVectorCorruption() throws IOException {\n\n    Directory dir = newDirectory();\n    for(int iter=0;iter<2;iter++) {\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer())\n          .setMaxBufferedDocs(2).setRAMBufferSizeMB(\n              IndexWriterConfig.DISABLE_AUTO_FLUSH).setMergeScheduler(\n              new SerialMergeScheduler()).setMergePolicy(\n              new LogDocMergePolicy()));\n\n      Document document = new Document();\n\n      Field storedField = newField(\"stored\", \"stored\", Field.Store.YES,\n                                    Field.Index.NO);\n      document.add(storedField);\n      writer.addDocument(document);\n      writer.addDocument(document);\n\n      document = new Document();\n      document.add(storedField);\n      Field termVectorField = newField(\"termVector\", \"termVector\",\n                                        Field.Store.NO, Field.Index.NOT_ANALYZED,\n                                        Field.TermVector.WITH_POSITIONS_OFFSETS);\n\n      document.add(termVectorField);\n      writer.addDocument(document);\n      writer.optimize();\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      for(int i=0;i<reader.numDocs();i++) {\n        reader.document(i);\n        reader.getTermFreqVectors(i);\n      }\n      reader.close();\n\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT,\n          new MockAnalyzer()).setMaxBufferedDocs(2)\n          .setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n          .setMergeScheduler(new SerialMergeScheduler()).setMergePolicy(\n              new LogDocMergePolicy()));\n\n      Directory[] indexDirs = {new MockDirectoryWrapper(random, new RAMDirectory(dir))};\n      writer.addIndexes(indexDirs);\n      writer.optimize();\n      writer.close();\n    }\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"639c36565ce03aed5b0fce7c9e4448e53a1f7efd","date":1308580104,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestTermVectorsWriter#testTermVectorCorruption().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestTermVectorsWriter#testTermVectorCorruption().mjava","sourceNew":"  // LUCENE-1168\n  public void testTermVectorCorruption() throws IOException {\n\n    Directory dir = newDirectory();\n    for(int iter=0;iter<2;iter++) {\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random))\n          .setMaxBufferedDocs(2).setRAMBufferSizeMB(\n              IndexWriterConfig.DISABLE_AUTO_FLUSH).setMergeScheduler(\n              new SerialMergeScheduler()).setMergePolicy(\n              new LogDocMergePolicy()));\n\n      Document document = new Document();\n\n      Field storedField = newField(\"stored\", \"stored\", Field.Store.YES,\n                                    Field.Index.NO);\n      document.add(storedField);\n      writer.addDocument(document);\n      writer.addDocument(document);\n\n      document = new Document();\n      document.add(storedField);\n      Field termVectorField = newField(\"termVector\", \"termVector\",\n                                        Field.Store.NO, Field.Index.NOT_ANALYZED,\n                                        Field.TermVector.WITH_POSITIONS_OFFSETS);\n\n      document.add(termVectorField);\n      writer.addDocument(document);\n      writer.optimize();\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      for(int i=0;i<reader.numDocs();i++) {\n        reader.document(i);\n        reader.getTermFreqVectors(i);\n      }\n      reader.close();\n\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT,\n          new MockAnalyzer(random)).setMaxBufferedDocs(2)\n          .setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n          .setMergeScheduler(new SerialMergeScheduler()).setMergePolicy(\n              new LogDocMergePolicy()));\n\n      Directory[] indexDirs = {new MockDirectoryWrapper(random, new RAMDirectory(dir, IOContext.DEFAULT))};\n      writer.addIndexes(indexDirs);\n      writer.optimize();\n      writer.close();\n    }\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1168\n  public void testTermVectorCorruption() throws IOException {\n\n    Directory dir = newDirectory();\n    for(int iter=0;iter<2;iter++) {\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random))\n          .setMaxBufferedDocs(2).setRAMBufferSizeMB(\n              IndexWriterConfig.DISABLE_AUTO_FLUSH).setMergeScheduler(\n              new SerialMergeScheduler()).setMergePolicy(\n              new LogDocMergePolicy()));\n\n      Document document = new Document();\n\n      Field storedField = newField(\"stored\", \"stored\", Field.Store.YES,\n                                    Field.Index.NO);\n      document.add(storedField);\n      writer.addDocument(document);\n      writer.addDocument(document);\n\n      document = new Document();\n      document.add(storedField);\n      Field termVectorField = newField(\"termVector\", \"termVector\",\n                                        Field.Store.NO, Field.Index.NOT_ANALYZED,\n                                        Field.TermVector.WITH_POSITIONS_OFFSETS);\n\n      document.add(termVectorField);\n      writer.addDocument(document);\n      writer.optimize();\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      for(int i=0;i<reader.numDocs();i++) {\n        reader.document(i);\n        reader.getTermFreqVectors(i);\n      }\n      reader.close();\n\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT,\n          new MockAnalyzer(random)).setMaxBufferedDocs(2)\n          .setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n          .setMergeScheduler(new SerialMergeScheduler()).setMergePolicy(\n              new LogDocMergePolicy()));\n\n      Directory[] indexDirs = {new MockDirectoryWrapper(random, new RAMDirectory(dir))};\n      writer.addIndexes(indexDirs);\n      writer.optimize();\n      writer.close();\n    }\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6f9be74ca7baaef11857ad002cad40419979516","date":1309449808,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestTermVectorsWriter#testTermVectorCorruption().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestTermVectorsWriter#testTermVectorCorruption().mjava","sourceNew":"  // LUCENE-1168\n  public void testTermVectorCorruption() throws IOException {\n\n    Directory dir = newDirectory();\n    for(int iter=0;iter<2;iter++) {\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random))\n          .setMaxBufferedDocs(2).setRAMBufferSizeMB(\n              IndexWriterConfig.DISABLE_AUTO_FLUSH).setMergeScheduler(\n              new SerialMergeScheduler()).setMergePolicy(\n              new LogDocMergePolicy()));\n\n      Document document = new Document();\n\n      Field storedField = newField(\"stored\", \"stored\", Field.Store.YES,\n                                    Field.Index.NO);\n      document.add(storedField);\n      writer.addDocument(document);\n      writer.addDocument(document);\n\n      document = new Document();\n      document.add(storedField);\n      Field termVectorField = newField(\"termVector\", \"termVector\",\n                                        Field.Store.NO, Field.Index.NOT_ANALYZED,\n                                        Field.TermVector.WITH_POSITIONS_OFFSETS);\n\n      document.add(termVectorField);\n      writer.addDocument(document);\n      writer.optimize();\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      for(int i=0;i<reader.numDocs();i++) {\n        reader.document(i);\n        reader.getTermFreqVectors(i);\n      }\n      reader.close();\n\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT,\n          new MockAnalyzer(random)).setMaxBufferedDocs(2)\n          .setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n          .setMergeScheduler(new SerialMergeScheduler()).setMergePolicy(\n              new LogDocMergePolicy()));\n\n      Directory[] indexDirs = {new MockDirectoryWrapper(random, new RAMDirectory(dir, newIOContext(random)))};\n      writer.addIndexes(indexDirs);\n      writer.optimize();\n      writer.close();\n    }\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1168\n  public void testTermVectorCorruption() throws IOException {\n\n    Directory dir = newDirectory();\n    for(int iter=0;iter<2;iter++) {\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random))\n          .setMaxBufferedDocs(2).setRAMBufferSizeMB(\n              IndexWriterConfig.DISABLE_AUTO_FLUSH).setMergeScheduler(\n              new SerialMergeScheduler()).setMergePolicy(\n              new LogDocMergePolicy()));\n\n      Document document = new Document();\n\n      Field storedField = newField(\"stored\", \"stored\", Field.Store.YES,\n                                    Field.Index.NO);\n      document.add(storedField);\n      writer.addDocument(document);\n      writer.addDocument(document);\n\n      document = new Document();\n      document.add(storedField);\n      Field termVectorField = newField(\"termVector\", \"termVector\",\n                                        Field.Store.NO, Field.Index.NOT_ANALYZED,\n                                        Field.TermVector.WITH_POSITIONS_OFFSETS);\n\n      document.add(termVectorField);\n      writer.addDocument(document);\n      writer.optimize();\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      for(int i=0;i<reader.numDocs();i++) {\n        reader.document(i);\n        reader.getTermFreqVectors(i);\n      }\n      reader.close();\n\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT,\n          new MockAnalyzer(random)).setMaxBufferedDocs(2)\n          .setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n          .setMergeScheduler(new SerialMergeScheduler()).setMergePolicy(\n              new LogDocMergePolicy()));\n\n      Directory[] indexDirs = {new MockDirectoryWrapper(random, new RAMDirectory(dir, IOContext.DEFAULT))};\n      writer.addIndexes(indexDirs);\n      writer.optimize();\n      writer.close();\n    }\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ddc4c914be86e34b54f70023f45a60fa7f04e929","date":1310115160,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestTermVectorsWriter#testTermVectorCorruption().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestTermVectorsWriter#testTermVectorCorruption().mjava","sourceNew":"  // LUCENE-1168\n  public void testTermVectorCorruption() throws IOException {\n\n    Directory dir = newDirectory();\n    for(int iter=0;iter<2;iter++) {\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random))\n          .setMaxBufferedDocs(2).setRAMBufferSizeMB(\n              IndexWriterConfig.DISABLE_AUTO_FLUSH).setMergeScheduler(\n              new SerialMergeScheduler()).setMergePolicy(\n              new LogDocMergePolicy()));\n\n      Document document = new Document();\n\n      Field storedField = newField(\"stored\", \"stored\", Field.Store.YES,\n                                    Field.Index.NO);\n      document.add(storedField);\n      writer.addDocument(document);\n      writer.addDocument(document);\n\n      document = new Document();\n      document.add(storedField);\n      Field termVectorField = newField(\"termVector\", \"termVector\",\n                                        Field.Store.NO, Field.Index.NOT_ANALYZED,\n                                        Field.TermVector.WITH_POSITIONS_OFFSETS);\n\n      document.add(termVectorField);\n      writer.addDocument(document);\n      writer.optimize();\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      for(int i=0;i<reader.numDocs();i++) {\n        reader.document(i);\n        reader.getTermFreqVectors(i);\n      }\n      reader.close();\n\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT,\n          new MockAnalyzer(random)).setMaxBufferedDocs(2)\n          .setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n          .setMergeScheduler(new SerialMergeScheduler()).setMergePolicy(\n              new LogDocMergePolicy()));\n\n      Directory[] indexDirs = {new MockDirectoryWrapper(random, new RAMDirectory(dir, newIOContext(random)))};\n      writer.addIndexes(indexDirs);\n      writer.optimize();\n      writer.close();\n    }\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1168\n  public void testTermVectorCorruption() throws IOException {\n\n    Directory dir = newDirectory();\n    for(int iter=0;iter<2;iter++) {\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random))\n          .setMaxBufferedDocs(2).setRAMBufferSizeMB(\n              IndexWriterConfig.DISABLE_AUTO_FLUSH).setMergeScheduler(\n              new SerialMergeScheduler()).setMergePolicy(\n              new LogDocMergePolicy()));\n\n      Document document = new Document();\n\n      Field storedField = newField(\"stored\", \"stored\", Field.Store.YES,\n                                    Field.Index.NO);\n      document.add(storedField);\n      writer.addDocument(document);\n      writer.addDocument(document);\n\n      document = new Document();\n      document.add(storedField);\n      Field termVectorField = newField(\"termVector\", \"termVector\",\n                                        Field.Store.NO, Field.Index.NOT_ANALYZED,\n                                        Field.TermVector.WITH_POSITIONS_OFFSETS);\n\n      document.add(termVectorField);\n      writer.addDocument(document);\n      writer.optimize();\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      for(int i=0;i<reader.numDocs();i++) {\n        reader.document(i);\n        reader.getTermFreqVectors(i);\n      }\n      reader.close();\n\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT,\n          new MockAnalyzer(random)).setMaxBufferedDocs(2)\n          .setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n          .setMergeScheduler(new SerialMergeScheduler()).setMergePolicy(\n              new LogDocMergePolicy()));\n\n      Directory[] indexDirs = {new MockDirectoryWrapper(random, new RAMDirectory(dir))};\n      writer.addIndexes(indexDirs);\n      writer.optimize();\n      writer.close();\n    }\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5d004d0e0b3f65bb40da76d476d659d7888270e8","date":1310158940,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestTermVectorsWriter#testTermVectorCorruption().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestTermVectorsWriter#testTermVectorCorruption().mjava","sourceNew":"  // LUCENE-1168\n  public void testTermVectorCorruption() throws IOException {\n\n    Directory dir = newDirectory();\n    for(int iter=0;iter<2;iter++) {\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random))\n          .setMaxBufferedDocs(2).setRAMBufferSizeMB(\n              IndexWriterConfig.DISABLE_AUTO_FLUSH).setMergeScheduler(\n              new SerialMergeScheduler()).setMergePolicy(\n              new LogDocMergePolicy()));\n\n      Document document = new Document();\n\n      Field storedField = newField(\"stored\", \"stored\", Field.Store.YES,\n                                    Field.Index.NO);\n      document.add(storedField);\n      writer.addDocument(document);\n      writer.addDocument(document);\n\n      document = new Document();\n      document.add(storedField);\n      Field termVectorField = newField(\"termVector\", \"termVector\",\n                                        Field.Store.NO, Field.Index.NOT_ANALYZED,\n                                        Field.TermVector.WITH_POSITIONS_OFFSETS);\n\n      document.add(termVectorField);\n      writer.addDocument(document);\n      writer.optimize();\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      for(int i=0;i<reader.numDocs();i++) {\n        reader.document(i);\n        reader.getTermFreqVectors(i);\n      }\n      reader.close();\n\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT,\n          new MockAnalyzer(random)).setMaxBufferedDocs(2)\n          .setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n          .setMergeScheduler(new SerialMergeScheduler()).setMergePolicy(\n              new LogDocMergePolicy()));\n\n      Directory[] indexDirs = {new MockDirectoryWrapper(random, new RAMDirectory(dir, newIOContext(random)))};\n      writer.addIndexes(indexDirs);\n      writer.optimize();\n      writer.close();\n    }\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1168\n  public void testTermVectorCorruption() throws IOException {\n\n    Directory dir = newDirectory();\n    for(int iter=0;iter<2;iter++) {\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random))\n          .setMaxBufferedDocs(2).setRAMBufferSizeMB(\n              IndexWriterConfig.DISABLE_AUTO_FLUSH).setMergeScheduler(\n              new SerialMergeScheduler()).setMergePolicy(\n              new LogDocMergePolicy()));\n\n      Document document = new Document();\n\n      Field storedField = newField(\"stored\", \"stored\", Field.Store.YES,\n                                    Field.Index.NO);\n      document.add(storedField);\n      writer.addDocument(document);\n      writer.addDocument(document);\n\n      document = new Document();\n      document.add(storedField);\n      Field termVectorField = newField(\"termVector\", \"termVector\",\n                                        Field.Store.NO, Field.Index.NOT_ANALYZED,\n                                        Field.TermVector.WITH_POSITIONS_OFFSETS);\n\n      document.add(termVectorField);\n      writer.addDocument(document);\n      writer.optimize();\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      for(int i=0;i<reader.numDocs();i++) {\n        reader.document(i);\n        reader.getTermFreqVectors(i);\n      }\n      reader.close();\n\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT,\n          new MockAnalyzer(random)).setMaxBufferedDocs(2)\n          .setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n          .setMergeScheduler(new SerialMergeScheduler()).setMergePolicy(\n              new LogDocMergePolicy()));\n\n      Directory[] indexDirs = {new MockDirectoryWrapper(random, new RAMDirectory(dir))};\n      writer.addIndexes(indexDirs);\n      writer.optimize();\n      writer.close();\n    }\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestTermVectorsWriter#testTermVectorCorruption().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestTermVectorsWriter#testTermVectorCorruption().mjava","sourceNew":"  // LUCENE-1168\n  public void testTermVectorCorruption() throws IOException {\n\n    Directory dir = newDirectory();\n    for(int iter=0;iter<2;iter++) {\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random))\n          .setMaxBufferedDocs(2).setRAMBufferSizeMB(\n              IndexWriterConfig.DISABLE_AUTO_FLUSH).setMergeScheduler(\n              new SerialMergeScheduler()).setMergePolicy(\n              new LogDocMergePolicy()));\n\n      Document document = new Document();\n      FieldType customType = new FieldType();\n      customType.setStored(true);\n\n      Field storedField = newField(\"stored\", \"stored\", customType);\n      document.add(storedField);\n      writer.addDocument(document);\n      writer.addDocument(document);\n\n      document = new Document();\n      document.add(storedField);\n      FieldType customType2 = new FieldType(StringField.TYPE_UNSTORED);\n      customType2.setStoreTermVectors(true);\n      customType2.setStoreTermVectorPositions(true);\n      customType2.setStoreTermVectorOffsets(true);\n      Field termVectorField = newField(\"termVector\", \"termVector\", customType2);\n\n      document.add(termVectorField);\n      writer.addDocument(document);\n      writer.optimize();\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      for(int i=0;i<reader.numDocs();i++) {\n        reader.document(i);\n        reader.getTermFreqVectors(i);\n      }\n      reader.close();\n\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT,\n          new MockAnalyzer(random)).setMaxBufferedDocs(2)\n          .setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n          .setMergeScheduler(new SerialMergeScheduler()).setMergePolicy(\n              new LogDocMergePolicy()));\n\n      Directory[] indexDirs = {new MockDirectoryWrapper(random, new RAMDirectory(dir, newIOContext(random)))};\n      writer.addIndexes(indexDirs);\n      writer.optimize();\n      writer.close();\n    }\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1168\n  public void testTermVectorCorruption() throws IOException {\n\n    Directory dir = newDirectory();\n    for(int iter=0;iter<2;iter++) {\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random))\n          .setMaxBufferedDocs(2).setRAMBufferSizeMB(\n              IndexWriterConfig.DISABLE_AUTO_FLUSH).setMergeScheduler(\n              new SerialMergeScheduler()).setMergePolicy(\n              new LogDocMergePolicy()));\n\n      Document document = new Document();\n\n      Field storedField = newField(\"stored\", \"stored\", Field.Store.YES,\n                                    Field.Index.NO);\n      document.add(storedField);\n      writer.addDocument(document);\n      writer.addDocument(document);\n\n      document = new Document();\n      document.add(storedField);\n      Field termVectorField = newField(\"termVector\", \"termVector\",\n                                        Field.Store.NO, Field.Index.NOT_ANALYZED,\n                                        Field.TermVector.WITH_POSITIONS_OFFSETS);\n\n      document.add(termVectorField);\n      writer.addDocument(document);\n      writer.optimize();\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      for(int i=0;i<reader.numDocs();i++) {\n        reader.document(i);\n        reader.getTermFreqVectors(i);\n      }\n      reader.close();\n\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT,\n          new MockAnalyzer(random)).setMaxBufferedDocs(2)\n          .setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n          .setMergeScheduler(new SerialMergeScheduler()).setMergePolicy(\n              new LogDocMergePolicy()));\n\n      Directory[] indexDirs = {new MockDirectoryWrapper(random, new RAMDirectory(dir, newIOContext(random)))};\n      writer.addIndexes(indexDirs);\n      writer.optimize();\n      writer.close();\n    }\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d14e8d18c0e3970c20354dbeeb49da11bd587fbd","date":1321041051,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestTermVectorsWriter#testTermVectorCorruption().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestTermVectorsWriter#testTermVectorCorruption().mjava","sourceNew":"  // LUCENE-1168\n  public void testTermVectorCorruption() throws IOException {\n\n    Directory dir = newDirectory();\n    for(int iter=0;iter<2;iter++) {\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random))\n          .setMaxBufferedDocs(2).setRAMBufferSizeMB(\n              IndexWriterConfig.DISABLE_AUTO_FLUSH).setMergeScheduler(\n              new SerialMergeScheduler()).setMergePolicy(\n              new LogDocMergePolicy()));\n\n      Document document = new Document();\n      FieldType customType = new FieldType();\n      customType.setStored(true);\n\n      Field storedField = newField(\"stored\", \"stored\", customType);\n      document.add(storedField);\n      writer.addDocument(document);\n      writer.addDocument(document);\n\n      document = new Document();\n      document.add(storedField);\n      FieldType customType2 = new FieldType(StringField.TYPE_UNSTORED);\n      customType2.setStoreTermVectors(true);\n      customType2.setStoreTermVectorPositions(true);\n      customType2.setStoreTermVectorOffsets(true);\n      Field termVectorField = newField(\"termVector\", \"termVector\", customType2);\n\n      document.add(termVectorField);\n      writer.addDocument(document);\n      writer.forceMerge(1);\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      for(int i=0;i<reader.numDocs();i++) {\n        reader.document(i);\n        reader.getTermFreqVectors(i);\n      }\n      reader.close();\n\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT,\n          new MockAnalyzer(random)).setMaxBufferedDocs(2)\n          .setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n          .setMergeScheduler(new SerialMergeScheduler()).setMergePolicy(\n              new LogDocMergePolicy()));\n\n      Directory[] indexDirs = {new MockDirectoryWrapper(random, new RAMDirectory(dir, newIOContext(random)))};\n      writer.addIndexes(indexDirs);\n      writer.forceMerge(1);\n      writer.close();\n    }\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1168\n  public void testTermVectorCorruption() throws IOException {\n\n    Directory dir = newDirectory();\n    for(int iter=0;iter<2;iter++) {\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random))\n          .setMaxBufferedDocs(2).setRAMBufferSizeMB(\n              IndexWriterConfig.DISABLE_AUTO_FLUSH).setMergeScheduler(\n              new SerialMergeScheduler()).setMergePolicy(\n              new LogDocMergePolicy()));\n\n      Document document = new Document();\n      FieldType customType = new FieldType();\n      customType.setStored(true);\n\n      Field storedField = newField(\"stored\", \"stored\", customType);\n      document.add(storedField);\n      writer.addDocument(document);\n      writer.addDocument(document);\n\n      document = new Document();\n      document.add(storedField);\n      FieldType customType2 = new FieldType(StringField.TYPE_UNSTORED);\n      customType2.setStoreTermVectors(true);\n      customType2.setStoreTermVectorPositions(true);\n      customType2.setStoreTermVectorOffsets(true);\n      Field termVectorField = newField(\"termVector\", \"termVector\", customType2);\n\n      document.add(termVectorField);\n      writer.addDocument(document);\n      writer.optimize();\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      for(int i=0;i<reader.numDocs();i++) {\n        reader.document(i);\n        reader.getTermFreqVectors(i);\n      }\n      reader.close();\n\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT,\n          new MockAnalyzer(random)).setMaxBufferedDocs(2)\n          .setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n          .setMergeScheduler(new SerialMergeScheduler()).setMergePolicy(\n              new LogDocMergePolicy()));\n\n      Directory[] indexDirs = {new MockDirectoryWrapper(random, new RAMDirectory(dir, newIOContext(random)))};\n      writer.addIndexes(indexDirs);\n      writer.optimize();\n      writer.close();\n    }\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3cc749c053615f5871f3b95715fe292f34e70a53","date":1321470575,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestTermVectorsWriter#testTermVectorCorruption().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestTermVectorsWriter#testTermVectorCorruption().mjava","sourceNew":"  // LUCENE-1168\n  public void testTermVectorCorruption() throws IOException {\n\n    Directory dir = newDirectory();\n    for(int iter=0;iter<2;iter++) {\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random))\n          .setMaxBufferedDocs(2).setRAMBufferSizeMB(\n              IndexWriterConfig.DISABLE_AUTO_FLUSH).setMergeScheduler(\n              new SerialMergeScheduler()).setMergePolicy(\n              new LogDocMergePolicy()));\n\n      Document document = new Document();\n      FieldType customType = new FieldType();\n      customType.setStored(true);\n\n      Field storedField = newField(\"stored\", \"stored\", customType);\n      document.add(storedField);\n      writer.addDocument(document);\n      writer.addDocument(document);\n\n      document = new Document();\n      document.add(storedField);\n      FieldType customType2 = new FieldType(StringField.TYPE_UNSTORED);\n      customType2.setStoreTermVectors(true);\n      customType2.setStoreTermVectorPositions(true);\n      customType2.setStoreTermVectorOffsets(true);\n      Field termVectorField = newField(\"termVector\", \"termVector\", customType2);\n\n      document.add(termVectorField);\n      writer.addDocument(document);\n      writer.forceMerge(1);\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      for(int i=0;i<reader.numDocs();i++) {\n        reader.document(i);\n        reader.getTermVectors(i);\n      }\n      reader.close();\n\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT,\n          new MockAnalyzer(random)).setMaxBufferedDocs(2)\n          .setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n          .setMergeScheduler(new SerialMergeScheduler()).setMergePolicy(\n              new LogDocMergePolicy()));\n\n      Directory[] indexDirs = {new MockDirectoryWrapper(random, new RAMDirectory(dir, newIOContext(random)))};\n      writer.addIndexes(indexDirs);\n      writer.forceMerge(1);\n      writer.close();\n    }\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1168\n  public void testTermVectorCorruption() throws IOException {\n\n    Directory dir = newDirectory();\n    for(int iter=0;iter<2;iter++) {\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random))\n          .setMaxBufferedDocs(2).setRAMBufferSizeMB(\n              IndexWriterConfig.DISABLE_AUTO_FLUSH).setMergeScheduler(\n              new SerialMergeScheduler()).setMergePolicy(\n              new LogDocMergePolicy()));\n\n      Document document = new Document();\n      FieldType customType = new FieldType();\n      customType.setStored(true);\n\n      Field storedField = newField(\"stored\", \"stored\", customType);\n      document.add(storedField);\n      writer.addDocument(document);\n      writer.addDocument(document);\n\n      document = new Document();\n      document.add(storedField);\n      FieldType customType2 = new FieldType(StringField.TYPE_UNSTORED);\n      customType2.setStoreTermVectors(true);\n      customType2.setStoreTermVectorPositions(true);\n      customType2.setStoreTermVectorOffsets(true);\n      Field termVectorField = newField(\"termVector\", \"termVector\", customType2);\n\n      document.add(termVectorField);\n      writer.addDocument(document);\n      writer.forceMerge(1);\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      for(int i=0;i<reader.numDocs();i++) {\n        reader.document(i);\n        reader.getTermFreqVectors(i);\n      }\n      reader.close();\n\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT,\n          new MockAnalyzer(random)).setMaxBufferedDocs(2)\n          .setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n          .setMergeScheduler(new SerialMergeScheduler()).setMergePolicy(\n              new LogDocMergePolicy()));\n\n      Directory[] indexDirs = {new MockDirectoryWrapper(random, new RAMDirectory(dir, newIOContext(random)))};\n      writer.addIndexes(indexDirs);\n      writer.forceMerge(1);\n      writer.close();\n    }\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1c5b026d03cbbb03ca4c0b97d14e9839682281dc","date":1323049298,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestTermVectorsWriter#testTermVectorCorruption().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestTermVectorsWriter#testTermVectorCorruption().mjava","sourceNew":"  // LUCENE-1168\n  public void testTermVectorCorruption() throws IOException {\n\n    Directory dir = newDirectory();\n    for(int iter=0;iter<2;iter++) {\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random))\n          .setMaxBufferedDocs(2).setRAMBufferSizeMB(\n              IndexWriterConfig.DISABLE_AUTO_FLUSH).setMergeScheduler(\n              new SerialMergeScheduler()).setMergePolicy(\n              new LogDocMergePolicy()));\n\n      Document document = new Document();\n      FieldType customType = new FieldType();\n      customType.setStored(true);\n\n      Field storedField = newField(\"stored\", \"stored\", customType);\n      document.add(storedField);\n      writer.addDocument(document);\n      writer.addDocument(document);\n\n      document = new Document();\n      document.add(storedField);\n      FieldType customType2 = new FieldType(StringField.TYPE_UNSTORED);\n      customType2.setStoreTermVectors(true);\n      customType2.setStoreTermVectorPositions(true);\n      customType2.setStoreTermVectorOffsets(true);\n      Field termVectorField = newField(\"termVector\", \"termVector\", customType2);\n\n      document.add(termVectorField);\n      writer.addDocument(document);\n      writer.forceMerge(1);\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir);\n      for(int i=0;i<reader.numDocs();i++) {\n        reader.document(i);\n        reader.getTermVectors(i);\n      }\n      reader.close();\n\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT,\n          new MockAnalyzer(random)).setMaxBufferedDocs(2)\n          .setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n          .setMergeScheduler(new SerialMergeScheduler()).setMergePolicy(\n              new LogDocMergePolicy()));\n\n      Directory[] indexDirs = {new MockDirectoryWrapper(random, new RAMDirectory(dir, newIOContext(random)))};\n      writer.addIndexes(indexDirs);\n      writer.forceMerge(1);\n      writer.close();\n    }\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1168\n  public void testTermVectorCorruption() throws IOException {\n\n    Directory dir = newDirectory();\n    for(int iter=0;iter<2;iter++) {\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random))\n          .setMaxBufferedDocs(2).setRAMBufferSizeMB(\n              IndexWriterConfig.DISABLE_AUTO_FLUSH).setMergeScheduler(\n              new SerialMergeScheduler()).setMergePolicy(\n              new LogDocMergePolicy()));\n\n      Document document = new Document();\n      FieldType customType = new FieldType();\n      customType.setStored(true);\n\n      Field storedField = newField(\"stored\", \"stored\", customType);\n      document.add(storedField);\n      writer.addDocument(document);\n      writer.addDocument(document);\n\n      document = new Document();\n      document.add(storedField);\n      FieldType customType2 = new FieldType(StringField.TYPE_UNSTORED);\n      customType2.setStoreTermVectors(true);\n      customType2.setStoreTermVectorPositions(true);\n      customType2.setStoreTermVectorOffsets(true);\n      Field termVectorField = newField(\"termVector\", \"termVector\", customType2);\n\n      document.add(termVectorField);\n      writer.addDocument(document);\n      writer.forceMerge(1);\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      for(int i=0;i<reader.numDocs();i++) {\n        reader.document(i);\n        reader.getTermVectors(i);\n      }\n      reader.close();\n\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT,\n          new MockAnalyzer(random)).setMaxBufferedDocs(2)\n          .setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n          .setMergeScheduler(new SerialMergeScheduler()).setMergePolicy(\n              new LogDocMergePolicy()));\n\n      Directory[] indexDirs = {new MockDirectoryWrapper(random, new RAMDirectory(dir, newIOContext(random)))};\n      writer.addIndexes(indexDirs);\n      writer.forceMerge(1);\n      writer.close();\n    }\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestTermVectorsWriter#testTermVectorCorruption().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestTermVectorsWriter#testTermVectorCorruption().mjava","sourceNew":"  // LUCENE-1168\n  public void testTermVectorCorruption() throws IOException {\n\n    Directory dir = newDirectory();\n    for(int iter=0;iter<2;iter++) {\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random))\n          .setMaxBufferedDocs(2).setRAMBufferSizeMB(\n              IndexWriterConfig.DISABLE_AUTO_FLUSH).setMergeScheduler(\n              new SerialMergeScheduler()).setMergePolicy(\n              new LogDocMergePolicy()));\n\n      Document document = new Document();\n      FieldType customType = new FieldType();\n      customType.setStored(true);\n\n      Field storedField = newField(\"stored\", \"stored\", customType);\n      document.add(storedField);\n      writer.addDocument(document);\n      writer.addDocument(document);\n\n      document = new Document();\n      document.add(storedField);\n      FieldType customType2 = new FieldType(StringField.TYPE_UNSTORED);\n      customType2.setStoreTermVectors(true);\n      customType2.setStoreTermVectorPositions(true);\n      customType2.setStoreTermVectorOffsets(true);\n      Field termVectorField = newField(\"termVector\", \"termVector\", customType2);\n\n      document.add(termVectorField);\n      writer.addDocument(document);\n      writer.forceMerge(1);\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir);\n      for(int i=0;i<reader.numDocs();i++) {\n        reader.document(i);\n        reader.getTermVectors(i);\n      }\n      reader.close();\n\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT,\n          new MockAnalyzer(random)).setMaxBufferedDocs(2)\n          .setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n          .setMergeScheduler(new SerialMergeScheduler()).setMergePolicy(\n              new LogDocMergePolicy()));\n\n      Directory[] indexDirs = {new MockDirectoryWrapper(random, new RAMDirectory(dir, newIOContext(random)))};\n      writer.addIndexes(indexDirs);\n      writer.forceMerge(1);\n      writer.close();\n    }\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1168\n  public void testTermVectorCorruption() throws IOException {\n\n    Directory dir = newDirectory();\n    for(int iter=0;iter<2;iter++) {\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random))\n          .setMaxBufferedDocs(2).setRAMBufferSizeMB(\n              IndexWriterConfig.DISABLE_AUTO_FLUSH).setMergeScheduler(\n              new SerialMergeScheduler()).setMergePolicy(\n              new LogDocMergePolicy()));\n\n      Document document = new Document();\n      FieldType customType = new FieldType();\n      customType.setStored(true);\n\n      Field storedField = newField(\"stored\", \"stored\", customType);\n      document.add(storedField);\n      writer.addDocument(document);\n      writer.addDocument(document);\n\n      document = new Document();\n      document.add(storedField);\n      FieldType customType2 = new FieldType(StringField.TYPE_UNSTORED);\n      customType2.setStoreTermVectors(true);\n      customType2.setStoreTermVectorPositions(true);\n      customType2.setStoreTermVectorOffsets(true);\n      Field termVectorField = newField(\"termVector\", \"termVector\", customType2);\n\n      document.add(termVectorField);\n      writer.addDocument(document);\n      writer.forceMerge(1);\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      for(int i=0;i<reader.numDocs();i++) {\n        reader.document(i);\n        reader.getTermVectors(i);\n      }\n      reader.close();\n\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT,\n          new MockAnalyzer(random)).setMaxBufferedDocs(2)\n          .setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n          .setMergeScheduler(new SerialMergeScheduler()).setMergePolicy(\n              new LogDocMergePolicy()));\n\n      Directory[] indexDirs = {new MockDirectoryWrapper(random, new RAMDirectory(dir, newIOContext(random)))};\n      writer.addIndexes(indexDirs);\n      writer.forceMerge(1);\n      writer.close();\n    }\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestTermVectorsWriter#testTermVectorCorruption().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestTermVectorsWriter#testTermVectorCorruption().mjava","sourceNew":"  // LUCENE-1168\n  public void testTermVectorCorruption() throws IOException {\n\n    Directory dir = newDirectory();\n    for(int iter=0;iter<2;iter++) {\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random))\n          .setMaxBufferedDocs(2).setRAMBufferSizeMB(\n              IndexWriterConfig.DISABLE_AUTO_FLUSH).setMergeScheduler(\n              new SerialMergeScheduler()).setMergePolicy(\n              new LogDocMergePolicy()));\n\n      Document document = new Document();\n      FieldType customType = new FieldType();\n      customType.setStored(true);\n\n      Field storedField = newField(\"stored\", \"stored\", customType);\n      document.add(storedField);\n      writer.addDocument(document);\n      writer.addDocument(document);\n\n      document = new Document();\n      document.add(storedField);\n      FieldType customType2 = new FieldType(StringField.TYPE_UNSTORED);\n      customType2.setStoreTermVectors(true);\n      customType2.setStoreTermVectorPositions(true);\n      customType2.setStoreTermVectorOffsets(true);\n      Field termVectorField = newField(\"termVector\", \"termVector\", customType2);\n\n      document.add(termVectorField);\n      writer.addDocument(document);\n      writer.forceMerge(1);\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir);\n      for(int i=0;i<reader.numDocs();i++) {\n        reader.document(i);\n        reader.getTermVectors(i);\n      }\n      reader.close();\n\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT,\n          new MockAnalyzer(random)).setMaxBufferedDocs(2)\n          .setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n          .setMergeScheduler(new SerialMergeScheduler()).setMergePolicy(\n              new LogDocMergePolicy()));\n\n      Directory[] indexDirs = {new MockDirectoryWrapper(random, new RAMDirectory(dir, newIOContext(random)))};\n      writer.addIndexes(indexDirs);\n      writer.forceMerge(1);\n      writer.close();\n    }\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1168\n  public void testTermVectorCorruption() throws IOException {\n\n    Directory dir = newDirectory();\n    for(int iter=0;iter<2;iter++) {\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random))\n          .setMaxBufferedDocs(2).setRAMBufferSizeMB(\n              IndexWriterConfig.DISABLE_AUTO_FLUSH).setMergeScheduler(\n              new SerialMergeScheduler()).setMergePolicy(\n              new LogDocMergePolicy()));\n\n      Document document = new Document();\n      FieldType customType = new FieldType();\n      customType.setStored(true);\n\n      Field storedField = newField(\"stored\", \"stored\", customType);\n      document.add(storedField);\n      writer.addDocument(document);\n      writer.addDocument(document);\n\n      document = new Document();\n      document.add(storedField);\n      FieldType customType2 = new FieldType(StringField.TYPE_UNSTORED);\n      customType2.setStoreTermVectors(true);\n      customType2.setStoreTermVectorPositions(true);\n      customType2.setStoreTermVectorOffsets(true);\n      Field termVectorField = newField(\"termVector\", \"termVector\", customType2);\n\n      document.add(termVectorField);\n      writer.addDocument(document);\n      writer.forceMerge(1);\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      for(int i=0;i<reader.numDocs();i++) {\n        reader.document(i);\n        reader.getTermVectors(i);\n      }\n      reader.close();\n\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT,\n          new MockAnalyzer(random)).setMaxBufferedDocs(2)\n          .setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n          .setMergeScheduler(new SerialMergeScheduler()).setMergePolicy(\n              new LogDocMergePolicy()));\n\n      Directory[] indexDirs = {new MockDirectoryWrapper(random, new RAMDirectory(dir, newIOContext(random)))};\n      writer.addIndexes(indexDirs);\n      writer.forceMerge(1);\n      writer.close();\n    }\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermVectorsWriter#testTermVectorCorruption().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestTermVectorsWriter#testTermVectorCorruption().mjava","sourceNew":"  // LUCENE-1168\n  public void testTermVectorCorruption() throws IOException {\n\n    Directory dir = newDirectory();\n    for(int iter=0;iter<2;iter++) {\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random))\n          .setMaxBufferedDocs(2).setRAMBufferSizeMB(\n              IndexWriterConfig.DISABLE_AUTO_FLUSH).setMergeScheduler(\n              new SerialMergeScheduler()).setMergePolicy(\n              new LogDocMergePolicy()));\n\n      Document document = new Document();\n      FieldType customType = new FieldType();\n      customType.setStored(true);\n\n      Field storedField = newField(\"stored\", \"stored\", customType);\n      document.add(storedField);\n      writer.addDocument(document);\n      writer.addDocument(document);\n\n      document = new Document();\n      document.add(storedField);\n      FieldType customType2 = new FieldType(StringField.TYPE_UNSTORED);\n      customType2.setStoreTermVectors(true);\n      customType2.setStoreTermVectorPositions(true);\n      customType2.setStoreTermVectorOffsets(true);\n      Field termVectorField = newField(\"termVector\", \"termVector\", customType2);\n\n      document.add(termVectorField);\n      writer.addDocument(document);\n      writer.forceMerge(1);\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir);\n      for(int i=0;i<reader.numDocs();i++) {\n        reader.document(i);\n        reader.getTermVectors(i);\n      }\n      reader.close();\n\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT,\n          new MockAnalyzer(random)).setMaxBufferedDocs(2)\n          .setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n          .setMergeScheduler(new SerialMergeScheduler()).setMergePolicy(\n              new LogDocMergePolicy()));\n\n      Directory[] indexDirs = {new MockDirectoryWrapper(random, new RAMDirectory(dir, newIOContext(random)))};\n      writer.addIndexes(indexDirs);\n      writer.forceMerge(1);\n      writer.close();\n    }\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1168\n  public void testTermVectorCorruption() throws IOException {\n\n    Directory dir = newDirectory();\n    for(int iter=0;iter<2;iter++) {\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random))\n          .setMaxBufferedDocs(2).setRAMBufferSizeMB(\n              IndexWriterConfig.DISABLE_AUTO_FLUSH).setMergeScheduler(\n              new SerialMergeScheduler()).setMergePolicy(\n              new LogDocMergePolicy()));\n\n      Document document = new Document();\n      FieldType customType = new FieldType();\n      customType.setStored(true);\n\n      Field storedField = newField(\"stored\", \"stored\", customType);\n      document.add(storedField);\n      writer.addDocument(document);\n      writer.addDocument(document);\n\n      document = new Document();\n      document.add(storedField);\n      FieldType customType2 = new FieldType(StringField.TYPE_UNSTORED);\n      customType2.setStoreTermVectors(true);\n      customType2.setStoreTermVectorPositions(true);\n      customType2.setStoreTermVectorOffsets(true);\n      Field termVectorField = newField(\"termVector\", \"termVector\", customType2);\n\n      document.add(termVectorField);\n      writer.addDocument(document);\n      writer.forceMerge(1);\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir);\n      for(int i=0;i<reader.numDocs();i++) {\n        reader.document(i);\n        reader.getTermVectors(i);\n      }\n      reader.close();\n\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT,\n          new MockAnalyzer(random)).setMaxBufferedDocs(2)\n          .setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n          .setMergeScheduler(new SerialMergeScheduler()).setMergePolicy(\n              new LogDocMergePolicy()));\n\n      Directory[] indexDirs = {new MockDirectoryWrapper(random, new RAMDirectory(dir, newIOContext(random)))};\n      writer.addIndexes(indexDirs);\n      writer.forceMerge(1);\n      writer.close();\n    }\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"9ab1f5591dc05f1f2b5407d809c9699f75554a32":["85a883878c0af761245ab048babc63d099f835f3","53a31399f2471493d67b19a95c028a74e0113b6a"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["3cc749c053615f5871f3b95715fe292f34e70a53","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"85a883878c0af761245ab048babc63d099f835f3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8797b4584f9c10520b8f985903790413b682f776"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"3cc749c053615f5871f3b95715fe292f34e70a53":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"639c36565ce03aed5b0fce7c9e4448e53a1f7efd":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"1c5b026d03cbbb03ca4c0b97d14e9839682281dc":["3cc749c053615f5871f3b95715fe292f34e70a53"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"962d04139994fce5193143ef35615499a9a96d78":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","53a31399f2471493d67b19a95c028a74e0113b6a"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["53a31399f2471493d67b19a95c028a74e0113b6a"],"53a31399f2471493d67b19a95c028a74e0113b6a":["8797b4584f9c10520b8f985903790413b682f776"],"8797b4584f9c10520b8f985903790413b682f776":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a3776dccca01c11e7046323cfad46a3b4a471233":["53a31399f2471493d67b19a95c028a74e0113b6a","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b6f9be74ca7baaef11857ad002cad40419979516":["639c36565ce03aed5b0fce7c9e4448e53a1f7efd"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["3cc749c053615f5871f3b95715fe292f34e70a53","1c5b026d03cbbb03ca4c0b97d14e9839682281dc"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":["a3776dccca01c11e7046323cfad46a3b4a471233","ddc4c914be86e34b54f70023f45a60fa7f04e929"],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["f2c5f0cb44df114db4228c8f77861714b5cabaea","b6f9be74ca7baaef11857ad002cad40419979516"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"9ab1f5591dc05f1f2b5407d809c9699f75554a32":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"85a883878c0af761245ab048babc63d099f835f3":["9ab1f5591dc05f1f2b5407d809c9699f75554a32"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"3cc749c053615f5871f3b95715fe292f34e70a53":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","1c5b026d03cbbb03ca4c0b97d14e9839682281dc","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"639c36565ce03aed5b0fce7c9e4448e53a1f7efd":["b6f9be74ca7baaef11857ad002cad40419979516"],"1c5b026d03cbbb03ca4c0b97d14e9839682281dc":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["3cc749c053615f5871f3b95715fe292f34e70a53"],"962d04139994fce5193143ef35615499a9a96d78":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["962d04139994fce5193143ef35615499a9a96d78"],"53a31399f2471493d67b19a95c028a74e0113b6a":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f2c5f0cb44df114db4228c8f77861714b5cabaea","a3776dccca01c11e7046323cfad46a3b4a471233"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["135621f3a0670a9394eb563224a3b76cc4dddc0f","639c36565ce03aed5b0fce7c9e4448e53a1f7efd","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233","ddc4c914be86e34b54f70023f45a60fa7f04e929"],"8797b4584f9c10520b8f985903790413b682f776":["85a883878c0af761245ab048babc63d099f835f3","53a31399f2471493d67b19a95c028a74e0113b6a"],"a3776dccca01c11e7046323cfad46a3b4a471233":["5d004d0e0b3f65bb40da76d476d659d7888270e8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["85a883878c0af761245ab048babc63d099f835f3","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","8797b4584f9c10520b8f985903790413b682f776"],"b6f9be74ca7baaef11857ad002cad40419979516":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":[],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["5d004d0e0b3f65bb40da76d476d659d7888270e8","1509f151d7692d84fae414b2b799ac06ba60fcb4"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","5d004d0e0b3f65bb40da76d476d659d7888270e8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}