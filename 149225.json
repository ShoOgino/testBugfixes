{"path":"modules/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestMultiAnalyzerQPHelper#testMultiAnalyzer().mjava","commits":[{"id":"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1","date":1310612214,"type":1,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestMultiAnalyzerQPHelper#testMultiAnalyzer().mjava","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiAnalyzerQPHelper#testMultiAnalyzer().mjava","sourceNew":"  public void testMultiAnalyzer() throws QueryNodeException {\n\n    StandardQueryParser qp = new StandardQueryParser();\n    qp.setAnalyzer(new MultiAnalyzer());\n\n    // trivial, no multiple tokens:\n    assertEquals(\"foo\", qp.parse(\"foo\", \"\").toString());\n    assertEquals(\"foo\", qp.parse(\"\\\"foo\\\"\", \"\").toString());\n    assertEquals(\"foo foobar\", qp.parse(\"foo foobar\", \"\").toString());\n    assertEquals(\"\\\"foo foobar\\\"\", qp.parse(\"\\\"foo foobar\\\"\", \"\").toString());\n    assertEquals(\"\\\"foo foobar blah\\\"\", qp.parse(\"\\\"foo foobar blah\\\"\", \"\")\n        .toString());\n\n    // two tokens at the same position:\n    assertEquals(\"(multi multi2) foo\", qp.parse(\"multi foo\", \"\").toString());\n    assertEquals(\"foo (multi multi2)\", qp.parse(\"foo multi\", \"\").toString());\n    assertEquals(\"(multi multi2) (multi multi2)\", qp.parse(\"multi multi\", \"\")\n        .toString());\n    assertEquals(\"+(foo (multi multi2)) +(bar (multi multi2))\", qp.parse(\n        \"+(foo multi) +(bar multi)\", \"\").toString());\n    assertEquals(\"+(foo (multi multi2)) field:\\\"bar (multi multi2)\\\"\", qp\n        .parse(\"+(foo multi) field:\\\"bar multi\\\"\", \"\").toString());\n\n    // phrases:\n    assertEquals(\"\\\"(multi multi2) foo\\\"\", qp.parse(\"\\\"multi foo\\\"\", \"\")\n        .toString());\n    assertEquals(\"\\\"foo (multi multi2)\\\"\", qp.parse(\"\\\"foo multi\\\"\", \"\")\n        .toString());\n    assertEquals(\"\\\"foo (multi multi2) foobar (multi multi2)\\\"\", qp.parse(\n        \"\\\"foo multi foobar multi\\\"\", \"\").toString());\n\n    // fields:\n    assertEquals(\"(field:multi field:multi2) field:foo\", qp.parse(\n        \"field:multi field:foo\", \"\").toString());\n    assertEquals(\"field:\\\"(multi multi2) foo\\\"\", qp.parse(\n        \"field:\\\"multi foo\\\"\", \"\").toString());\n\n    // three tokens at one position:\n    assertEquals(\"triplemulti multi3 multi2\", qp.parse(\"triplemulti\", \"\")\n        .toString());\n    assertEquals(\"foo (triplemulti multi3 multi2) foobar\", qp.parse(\n        \"foo triplemulti foobar\", \"\").toString());\n\n    // phrase with non-default slop:\n    assertEquals(\"\\\"(multi multi2) foo\\\"~10\", qp.parse(\"\\\"multi foo\\\"~10\", \"\")\n        .toString());\n\n    // phrase with non-default boost:\n    assertEquals(\"\\\"(multi multi2) foo\\\"^2.0\", qp.parse(\"\\\"multi foo\\\"^2\", \"\")\n        .toString());\n\n    // phrase after changing default slop\n    qp.setDefaultPhraseSlop(99);\n    assertEquals(\"\\\"(multi multi2) foo\\\"~99 bar\", qp.parse(\"\\\"multi foo\\\" bar\",\n        \"\").toString());\n    assertEquals(\"\\\"(multi multi2) foo\\\"~99 \\\"foo bar\\\"~2\", qp.parse(\n        \"\\\"multi foo\\\" \\\"foo bar\\\"~2\", \"\").toString());\n    qp.setDefaultPhraseSlop(0);\n\n    // non-default operator:\n    qp.setDefaultOperator(StandardQueryConfigHandler.Operator.AND);\n    assertEquals(\"+(multi multi2) +foo\", qp.parse(\"multi foo\", \"\").toString());\n\n  }\n\n","sourceOld":"  public void testMultiAnalyzer() throws QueryNodeException {\n\n    StandardQueryParser qp = new StandardQueryParser();\n    qp.setAnalyzer(new MultiAnalyzer());\n\n    // trivial, no multiple tokens:\n    assertEquals(\"foo\", qp.parse(\"foo\", \"\").toString());\n    assertEquals(\"foo\", qp.parse(\"\\\"foo\\\"\", \"\").toString());\n    assertEquals(\"foo foobar\", qp.parse(\"foo foobar\", \"\").toString());\n    assertEquals(\"\\\"foo foobar\\\"\", qp.parse(\"\\\"foo foobar\\\"\", \"\").toString());\n    assertEquals(\"\\\"foo foobar blah\\\"\", qp.parse(\"\\\"foo foobar blah\\\"\", \"\")\n        .toString());\n\n    // two tokens at the same position:\n    assertEquals(\"(multi multi2) foo\", qp.parse(\"multi foo\", \"\").toString());\n    assertEquals(\"foo (multi multi2)\", qp.parse(\"foo multi\", \"\").toString());\n    assertEquals(\"(multi multi2) (multi multi2)\", qp.parse(\"multi multi\", \"\")\n        .toString());\n    assertEquals(\"+(foo (multi multi2)) +(bar (multi multi2))\", qp.parse(\n        \"+(foo multi) +(bar multi)\", \"\").toString());\n    assertEquals(\"+(foo (multi multi2)) field:\\\"bar (multi multi2)\\\"\", qp\n        .parse(\"+(foo multi) field:\\\"bar multi\\\"\", \"\").toString());\n\n    // phrases:\n    assertEquals(\"\\\"(multi multi2) foo\\\"\", qp.parse(\"\\\"multi foo\\\"\", \"\")\n        .toString());\n    assertEquals(\"\\\"foo (multi multi2)\\\"\", qp.parse(\"\\\"foo multi\\\"\", \"\")\n        .toString());\n    assertEquals(\"\\\"foo (multi multi2) foobar (multi multi2)\\\"\", qp.parse(\n        \"\\\"foo multi foobar multi\\\"\", \"\").toString());\n\n    // fields:\n    assertEquals(\"(field:multi field:multi2) field:foo\", qp.parse(\n        \"field:multi field:foo\", \"\").toString());\n    assertEquals(\"field:\\\"(multi multi2) foo\\\"\", qp.parse(\n        \"field:\\\"multi foo\\\"\", \"\").toString());\n\n    // three tokens at one position:\n    assertEquals(\"triplemulti multi3 multi2\", qp.parse(\"triplemulti\", \"\")\n        .toString());\n    assertEquals(\"foo (triplemulti multi3 multi2) foobar\", qp.parse(\n        \"foo triplemulti foobar\", \"\").toString());\n\n    // phrase with non-default slop:\n    assertEquals(\"\\\"(multi multi2) foo\\\"~10\", qp.parse(\"\\\"multi foo\\\"~10\", \"\")\n        .toString());\n\n    // phrase with non-default boost:\n    assertEquals(\"\\\"(multi multi2) foo\\\"^2.0\", qp.parse(\"\\\"multi foo\\\"^2\", \"\")\n        .toString());\n\n    // phrase after changing default slop\n    qp.setDefaultPhraseSlop(99);\n    assertEquals(\"\\\"(multi multi2) foo\\\"~99 bar\", qp.parse(\"\\\"multi foo\\\" bar\",\n        \"\").toString());\n    assertEquals(\"\\\"(multi multi2) foo\\\"~99 \\\"foo bar\\\"~2\", qp.parse(\n        \"\\\"multi foo\\\" \\\"foo bar\\\"~2\", \"\").toString());\n    qp.setDefaultPhraseSlop(0);\n\n    // non-default operator:\n    qp.setDefaultOperator(StandardQueryConfigHandler.Operator.AND);\n    assertEquals(\"+(multi multi2) +foo\", qp.parse(\"multi foo\", \"\").toString());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestMultiAnalyzerQPHelper#testMultiAnalyzer().mjava","pathOld":"modules/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestMultiAnalyzerQPHelper#testMultiAnalyzer().mjava","sourceNew":"  public void testMultiAnalyzer() throws QueryNodeException {\n\n    StandardQueryParser qp = new StandardQueryParser();\n    qp.setAnalyzer(new MultiAnalyzer());\n\n    // trivial, no multiple tokens:\n    assertEquals(\"foo\", qp.parse(\"foo\", \"\").toString());\n    assertEquals(\"foo\", qp.parse(\"\\\"foo\\\"\", \"\").toString());\n    assertEquals(\"foo foobar\", qp.parse(\"foo foobar\", \"\").toString());\n    assertEquals(\"\\\"foo foobar\\\"\", qp.parse(\"\\\"foo foobar\\\"\", \"\").toString());\n    assertEquals(\"\\\"foo foobar blah\\\"\", qp.parse(\"\\\"foo foobar blah\\\"\", \"\")\n        .toString());\n\n    // two tokens at the same position:\n    assertEquals(\"(multi multi2) foo\", qp.parse(\"multi foo\", \"\").toString());\n    assertEquals(\"foo (multi multi2)\", qp.parse(\"foo multi\", \"\").toString());\n    assertEquals(\"(multi multi2) (multi multi2)\", qp.parse(\"multi multi\", \"\")\n        .toString());\n    assertEquals(\"+(foo (multi multi2)) +(bar (multi multi2))\", qp.parse(\n        \"+(foo multi) +(bar multi)\", \"\").toString());\n    assertEquals(\"+(foo (multi multi2)) field:\\\"bar (multi multi2)\\\"\", qp\n        .parse(\"+(foo multi) field:\\\"bar multi\\\"\", \"\").toString());\n\n    // phrases:\n    assertEquals(\"\\\"(multi multi2) foo\\\"\", qp.parse(\"\\\"multi foo\\\"\", \"\")\n        .toString());\n    assertEquals(\"\\\"foo (multi multi2)\\\"\", qp.parse(\"\\\"foo multi\\\"\", \"\")\n        .toString());\n    assertEquals(\"\\\"foo (multi multi2) foobar (multi multi2)\\\"\", qp.parse(\n        \"\\\"foo multi foobar multi\\\"\", \"\").toString());\n\n    // fields:\n    assertEquals(\"(field:multi field:multi2) field:foo\", qp.parse(\n        \"field:multi field:foo\", \"\").toString());\n    assertEquals(\"field:\\\"(multi multi2) foo\\\"\", qp.parse(\n        \"field:\\\"multi foo\\\"\", \"\").toString());\n\n    // three tokens at one position:\n    assertEquals(\"triplemulti multi3 multi2\", qp.parse(\"triplemulti\", \"\")\n        .toString());\n    assertEquals(\"foo (triplemulti multi3 multi2) foobar\", qp.parse(\n        \"foo triplemulti foobar\", \"\").toString());\n\n    // phrase with non-default slop:\n    assertEquals(\"\\\"(multi multi2) foo\\\"~10\", qp.parse(\"\\\"multi foo\\\"~10\", \"\")\n        .toString());\n\n    // phrase with non-default boost:\n    assertEquals(\"\\\"(multi multi2) foo\\\"^2.0\", qp.parse(\"\\\"multi foo\\\"^2\", \"\")\n        .toString());\n\n    // phrase after changing default slop\n    qp.setDefaultPhraseSlop(99);\n    assertEquals(\"\\\"(multi multi2) foo\\\"~99 bar\", qp.parse(\"\\\"multi foo\\\" bar\",\n        \"\").toString());\n    assertEquals(\"\\\"(multi multi2) foo\\\"~99 \\\"foo bar\\\"~2\", qp.parse(\n        \"\\\"multi foo\\\" \\\"foo bar\\\"~2\", \"\").toString());\n    qp.setDefaultPhraseSlop(0);\n\n    // non-default operator:\n    qp.setDefaultOperator(StandardQueryConfigHandler.Operator.AND);\n    assertEquals(\"+(multi multi2) +foo\", qp.parse(\"multi foo\", \"\").toString());\n\n  }\n\n","sourceOld":"  public void testMultiAnalyzer() throws QueryNodeException {\n\n    StandardQueryParser qp = new StandardQueryParser();\n    qp.setAnalyzer(new MultiAnalyzer());\n\n    // trivial, no multiple tokens:\n    assertEquals(\"foo\", qp.parse(\"foo\", \"\").toString());\n    assertEquals(\"foo\", qp.parse(\"\\\"foo\\\"\", \"\").toString());\n    assertEquals(\"foo foobar\", qp.parse(\"foo foobar\", \"\").toString());\n    assertEquals(\"\\\"foo foobar\\\"\", qp.parse(\"\\\"foo foobar\\\"\", \"\").toString());\n    assertEquals(\"\\\"foo foobar blah\\\"\", qp.parse(\"\\\"foo foobar blah\\\"\", \"\")\n        .toString());\n\n    // two tokens at the same position:\n    assertEquals(\"(multi multi2) foo\", qp.parse(\"multi foo\", \"\").toString());\n    assertEquals(\"foo (multi multi2)\", qp.parse(\"foo multi\", \"\").toString());\n    assertEquals(\"(multi multi2) (multi multi2)\", qp.parse(\"multi multi\", \"\")\n        .toString());\n    assertEquals(\"+(foo (multi multi2)) +(bar (multi multi2))\", qp.parse(\n        \"+(foo multi) +(bar multi)\", \"\").toString());\n    assertEquals(\"+(foo (multi multi2)) field:\\\"bar (multi multi2)\\\"\", qp\n        .parse(\"+(foo multi) field:\\\"bar multi\\\"\", \"\").toString());\n\n    // phrases:\n    assertEquals(\"\\\"(multi multi2) foo\\\"\", qp.parse(\"\\\"multi foo\\\"\", \"\")\n        .toString());\n    assertEquals(\"\\\"foo (multi multi2)\\\"\", qp.parse(\"\\\"foo multi\\\"\", \"\")\n        .toString());\n    assertEquals(\"\\\"foo (multi multi2) foobar (multi multi2)\\\"\", qp.parse(\n        \"\\\"foo multi foobar multi\\\"\", \"\").toString());\n\n    // fields:\n    assertEquals(\"(field:multi field:multi2) field:foo\", qp.parse(\n        \"field:multi field:foo\", \"\").toString());\n    assertEquals(\"field:\\\"(multi multi2) foo\\\"\", qp.parse(\n        \"field:\\\"multi foo\\\"\", \"\").toString());\n\n    // three tokens at one position:\n    assertEquals(\"triplemulti multi3 multi2\", qp.parse(\"triplemulti\", \"\")\n        .toString());\n    assertEquals(\"foo (triplemulti multi3 multi2) foobar\", qp.parse(\n        \"foo triplemulti foobar\", \"\").toString());\n\n    // phrase with non-default slop:\n    assertEquals(\"\\\"(multi multi2) foo\\\"~10\", qp.parse(\"\\\"multi foo\\\"~10\", \"\")\n        .toString());\n\n    // phrase with non-default boost:\n    assertEquals(\"\\\"(multi multi2) foo\\\"^2.0\", qp.parse(\"\\\"multi foo\\\"^2\", \"\")\n        .toString());\n\n    // phrase after changing default slop\n    qp.setDefaultPhraseSlop(99);\n    assertEquals(\"\\\"(multi multi2) foo\\\"~99 bar\", qp.parse(\"\\\"multi foo\\\" bar\",\n        \"\").toString());\n    assertEquals(\"\\\"(multi multi2) foo\\\"~99 \\\"foo bar\\\"~2\", qp.parse(\n        \"\\\"multi foo\\\" \\\"foo bar\\\"~2\", \"\").toString());\n    qp.setDefaultPhraseSlop(0);\n\n    // non-default operator:\n    qp.setDefaultOperator(StandardQueryConfigHandler.Operator.AND);\n    assertEquals(\"+(multi multi2) +foo\", qp.parse(\"multi foo\", \"\").toString());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}