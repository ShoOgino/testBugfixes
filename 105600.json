{"path":"lucene/misc/src/java/org/apache/lucene/index/SlowCompositeReaderWrapper#getSortedDocValues(String).mjava","commits":[{"id":"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1","date":1457644139,"type":1,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/index/SlowCompositeReaderWrapper#getSortedDocValues(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SlowCompositeReaderWrapper#getSortedDocValues(String).mjava","sourceNew":"  @Override\n  public SortedDocValues getSortedDocValues(String field) throws IOException {\n    ensureOpen();\n    OrdinalMap map = null;\n    synchronized (cachedOrdMaps) {\n      map = cachedOrdMaps.get(field);\n      if (map == null) {\n        // uncached, or not a multi dv\n        SortedDocValues dv = MultiDocValues.getSortedValues(in, field);\n        if (dv instanceof MultiSortedDocValues) {\n          map = ((MultiSortedDocValues)dv).mapping;\n          if (map.owner == getCoreCacheKey() && merging == false) {\n            cachedOrdMaps.put(field, map);\n          }\n        }\n        return dv;\n      }\n    }\n    int size = in.leaves().size();\n    final SortedDocValues[] values = new SortedDocValues[size];\n    final int[] starts = new int[size+1];\n    for (int i = 0; i < size; i++) {\n      LeafReaderContext context = in.leaves().get(i);\n      final LeafReader reader = context.reader();\n      final FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n      if (fieldInfo != null && fieldInfo.getDocValuesType() != DocValuesType.SORTED) {\n        return null;\n      }\n      SortedDocValues v = reader.getSortedDocValues(field);\n      if (v == null) {\n        v = DocValues.emptySorted();\n      }\n      values[i] = v;\n      starts[i] = context.docBase;\n    }\n    starts[size] = maxDoc();\n    return new MultiSortedDocValues(values, starts, map);\n  }\n\n","sourceOld":"  @Override\n  public SortedDocValues getSortedDocValues(String field) throws IOException {\n    ensureOpen();\n    OrdinalMap map = null;\n    synchronized (cachedOrdMaps) {\n      map = cachedOrdMaps.get(field);\n      if (map == null) {\n        // uncached, or not a multi dv\n        SortedDocValues dv = MultiDocValues.getSortedValues(in, field);\n        if (dv instanceof MultiSortedDocValues) {\n          map = ((MultiSortedDocValues)dv).mapping;\n          if (map.owner == getCoreCacheKey() && merging == false) {\n            cachedOrdMaps.put(field, map);\n          }\n        }\n        return dv;\n      }\n    }\n    int size = in.leaves().size();\n    final SortedDocValues[] values = new SortedDocValues[size];\n    final int[] starts = new int[size+1];\n    for (int i = 0; i < size; i++) {\n      LeafReaderContext context = in.leaves().get(i);\n      final LeafReader reader = context.reader();\n      final FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n      if (fieldInfo != null && fieldInfo.getDocValuesType() != DocValuesType.SORTED) {\n        return null;\n      }\n      SortedDocValues v = reader.getSortedDocValues(field);\n      if (v == null) {\n        v = DocValues.emptySorted();\n      }\n      values[i] = v;\n      starts[i] = context.docBase;\n    }\n    starts[size] = maxDoc();\n    return new MultiSortedDocValues(values, starts, map);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a076c3c721f685b7559308fdc2cd72d91bba67e5","date":1464168992,"type":5,"author":"Mike McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/index/SlowCompositeReaderWrapper#getSortedDocValues(String).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/index/SlowCompositeReaderWrapper#getSortedDocValues(String).mjava","sourceNew":"  @Override\n  public SortedDocValues getSortedDocValues(String field) throws IOException {\n    ensureOpen();\n    OrdinalMap map = null;\n    synchronized (cachedOrdMaps) {\n      map = cachedOrdMaps.get(field);\n      if (map == null) {\n        // uncached, or not a multi dv\n        SortedDocValues dv = MultiDocValues.getSortedValues(in, field);\n        if (dv instanceof MultiSortedDocValues) {\n          map = ((MultiSortedDocValues)dv).mapping;\n          if (map.owner == getCoreCacheKey() && merging == false) {\n            cachedOrdMaps.put(field, map);\n          }\n        }\n        return dv;\n      }\n    }\n    int size = in.leaves().size();\n    final SortedDocValues[] values = new SortedDocValues[size];\n    final int[] starts = new int[size+1];\n    for (int i = 0; i < size; i++) {\n      LeafReaderContext context = in.leaves().get(i);\n      final LeafReader reader = context.reader();\n      final FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n      if (fieldInfo != null && fieldInfo.getDocValuesType() != DocValuesType.SORTED) {\n        return null;\n      }\n      SortedDocValues v = reader.getSortedDocValues(field);\n      if (v == null) {\n        v = DocValues.emptySorted();\n      }\n      values[i] = v;\n      starts[i] = context.docBase;\n    }\n    starts[size] = maxDoc();\n    return new MultiSortedDocValues(values, starts, map);\n  }\n\n","sourceOld":"  @Override\n  public SortedDocValues getSortedDocValues(String field) throws IOException {\n    ensureOpen();\n    OrdinalMap map = null;\n    synchronized (cachedOrdMaps) {\n      map = cachedOrdMaps.get(field);\n      if (map == null) {\n        // uncached, or not a multi dv\n        SortedDocValues dv = MultiDocValues.getSortedValues(in, field);\n        if (dv instanceof MultiSortedDocValues) {\n          map = ((MultiSortedDocValues)dv).mapping;\n          if (map.owner == getCoreCacheKey() && merging == false) {\n            cachedOrdMaps.put(field, map);\n          }\n        }\n        return dv;\n      }\n    }\n    int size = in.leaves().size();\n    final SortedDocValues[] values = new SortedDocValues[size];\n    final int[] starts = new int[size+1];\n    for (int i = 0; i < size; i++) {\n      LeafReaderContext context = in.leaves().get(i);\n      final LeafReader reader = context.reader();\n      final FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n      if (fieldInfo != null && fieldInfo.getDocValuesType() != DocValuesType.SORTED) {\n        return null;\n      }\n      SortedDocValues v = reader.getSortedDocValues(field);\n      if (v == null) {\n        v = DocValues.emptySorted();\n      }\n      values[i] = v;\n      starts[i] = context.docBase;\n    }\n    starts[size] = maxDoc();\n    return new MultiSortedDocValues(values, starts, map);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e121d43b5a10f2df530f406f935102656e9c4e8","date":1464198131,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/index/SlowCompositeReaderWrapper#getSortedDocValues(String).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/index/SlowCompositeReaderWrapper#getSortedDocValues(String).mjava","sourceNew":"  @Override\n  public SortedDocValues getSortedDocValues(String field) throws IOException {\n    ensureOpen();\n    OrdinalMap map = null;\n    synchronized (cachedOrdMaps) {\n      map = cachedOrdMaps.get(field);\n      if (map == null) {\n        // uncached, or not a multi dv\n        SortedDocValues dv = MultiDocValues.getSortedValues(in, field);\n        if (dv instanceof MultiSortedDocValues) {\n          map = ((MultiSortedDocValues)dv).mapping;\n          if (map.owner == getCoreCacheKey() && merging == false) {\n            cachedOrdMaps.put(field, map);\n          }\n        }\n        return dv;\n      }\n    }\n    int size = in.leaves().size();\n    final SortedDocValues[] values = new SortedDocValues[size];\n    final int[] starts = new int[size+1];\n    for (int i = 0; i < size; i++) {\n      LeafReaderContext context = in.leaves().get(i);\n      final LeafReader reader = context.reader();\n      final FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n      if (fieldInfo != null && fieldInfo.getDocValuesType() != DocValuesType.SORTED) {\n        return null;\n      }\n      SortedDocValues v = reader.getSortedDocValues(field);\n      if (v == null) {\n        v = DocValues.emptySorted();\n      }\n      values[i] = v;\n      starts[i] = context.docBase;\n    }\n    starts[size] = maxDoc();\n    return new MultiSortedDocValues(values, starts, map);\n  }\n\n","sourceOld":"  @Override\n  public SortedDocValues getSortedDocValues(String field) throws IOException {\n    ensureOpen();\n    OrdinalMap map = null;\n    synchronized (cachedOrdMaps) {\n      map = cachedOrdMaps.get(field);\n      if (map == null) {\n        // uncached, or not a multi dv\n        SortedDocValues dv = MultiDocValues.getSortedValues(in, field);\n        if (dv instanceof MultiSortedDocValues) {\n          map = ((MultiSortedDocValues)dv).mapping;\n          if (map.owner == getCoreCacheKey() && merging == false) {\n            cachedOrdMaps.put(field, map);\n          }\n        }\n        return dv;\n      }\n    }\n    int size = in.leaves().size();\n    final SortedDocValues[] values = new SortedDocValues[size];\n    final int[] starts = new int[size+1];\n    for (int i = 0; i < size; i++) {\n      LeafReaderContext context = in.leaves().get(i);\n      final LeafReader reader = context.reader();\n      final FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n      if (fieldInfo != null && fieldInfo.getDocValuesType() != DocValuesType.SORTED) {\n        return null;\n      }\n      SortedDocValues v = reader.getSortedDocValues(field);\n      if (v == null) {\n        v = DocValues.emptySorted();\n      }\n      values[i] = v;\n      starts[i] = context.docBase;\n    }\n    starts[size] = maxDoc();\n    return new MultiSortedDocValues(values, starts, map);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83870855d82aba6819217abeff5a40779dbb28b4","date":1464291012,"type":5,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/index/SlowCompositeReaderWrapper#getSortedDocValues(String).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/index/SlowCompositeReaderWrapper#getSortedDocValues(String).mjava","sourceNew":"  @Override\n  public SortedDocValues getSortedDocValues(String field) throws IOException {\n    ensureOpen();\n    OrdinalMap map = null;\n    synchronized (cachedOrdMaps) {\n      map = cachedOrdMaps.get(field);\n      if (map == null) {\n        // uncached, or not a multi dv\n        SortedDocValues dv = MultiDocValues.getSortedValues(in, field);\n        if (dv instanceof MultiSortedDocValues) {\n          map = ((MultiSortedDocValues)dv).mapping;\n          if (map.owner == getCoreCacheKey() && merging == false) {\n            cachedOrdMaps.put(field, map);\n          }\n        }\n        return dv;\n      }\n    }\n    int size = in.leaves().size();\n    final SortedDocValues[] values = new SortedDocValues[size];\n    final int[] starts = new int[size+1];\n    for (int i = 0; i < size; i++) {\n      LeafReaderContext context = in.leaves().get(i);\n      final LeafReader reader = context.reader();\n      final FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n      if (fieldInfo != null && fieldInfo.getDocValuesType() != DocValuesType.SORTED) {\n        return null;\n      }\n      SortedDocValues v = reader.getSortedDocValues(field);\n      if (v == null) {\n        v = DocValues.emptySorted();\n      }\n      values[i] = v;\n      starts[i] = context.docBase;\n    }\n    starts[size] = maxDoc();\n    return new MultiSortedDocValues(values, starts, map);\n  }\n\n","sourceOld":"  @Override\n  public SortedDocValues getSortedDocValues(String field) throws IOException {\n    ensureOpen();\n    OrdinalMap map = null;\n    synchronized (cachedOrdMaps) {\n      map = cachedOrdMaps.get(field);\n      if (map == null) {\n        // uncached, or not a multi dv\n        SortedDocValues dv = MultiDocValues.getSortedValues(in, field);\n        if (dv instanceof MultiSortedDocValues) {\n          map = ((MultiSortedDocValues)dv).mapping;\n          if (map.owner == getCoreCacheKey() && merging == false) {\n            cachedOrdMaps.put(field, map);\n          }\n        }\n        return dv;\n      }\n    }\n    int size = in.leaves().size();\n    final SortedDocValues[] values = new SortedDocValues[size];\n    final int[] starts = new int[size+1];\n    for (int i = 0; i < size; i++) {\n      LeafReaderContext context = in.leaves().get(i);\n      final LeafReader reader = context.reader();\n      final FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n      if (fieldInfo != null && fieldInfo.getDocValuesType() != DocValuesType.SORTED) {\n        return null;\n      }\n      SortedDocValues v = reader.getSortedDocValues(field);\n      if (v == null) {\n        v = DocValues.emptySorted();\n      }\n      values[i] = v;\n      starts[i] = context.docBase;\n    }\n    starts[size] = maxDoc();\n    return new MultiSortedDocValues(values, starts, map);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/misc/src/java/org/apache/lucene/index/SlowCompositeReaderWrapper#getSortedDocValues(String).mjava","sourceNew":null,"sourceOld":"  @Override\n  public SortedDocValues getSortedDocValues(String field) throws IOException {\n    ensureOpen();\n    OrdinalMap map = null;\n    synchronized (cachedOrdMaps) {\n      map = cachedOrdMaps.get(field);\n      if (map == null) {\n        // uncached, or not a multi dv\n        SortedDocValues dv = MultiDocValues.getSortedValues(in, field);\n        if (dv instanceof MultiSortedDocValues) {\n          map = ((MultiSortedDocValues)dv).mapping;\n          if (map.owner == getCoreCacheKey() && merging == false) {\n            cachedOrdMaps.put(field, map);\n          }\n        }\n        return dv;\n      }\n    }\n    int size = in.leaves().size();\n    final SortedDocValues[] values = new SortedDocValues[size];\n    final int[] starts = new int[size+1];\n    for (int i = 0; i < size; i++) {\n      LeafReaderContext context = in.leaves().get(i);\n      final LeafReader reader = context.reader();\n      final FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n      if (fieldInfo != null && fieldInfo.getDocValuesType() != DocValuesType.SORTED) {\n        return null;\n      }\n      SortedDocValues v = reader.getSortedDocValues(field);\n      if (v == null) {\n        v = DocValues.emptySorted();\n      }\n      values[i] = v;\n      starts[i] = context.docBase;\n    }\n    starts[size] = maxDoc();\n    return new MultiSortedDocValues(values, starts, map);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a076c3c721f685b7559308fdc2cd72d91bba67e5":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"0e121d43b5a10f2df530f406f935102656e9c4e8":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1","a076c3c721f685b7559308fdc2cd72d91bba67e5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"83870855d82aba6819217abeff5a40779dbb28b4":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1","0e121d43b5a10f2df530f406f935102656e9c4e8"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1","0e121d43b5a10f2df530f406f935102656e9c4e8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0e121d43b5a10f2df530f406f935102656e9c4e8"]},"commit2Childs":{"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1":["a076c3c721f685b7559308fdc2cd72d91bba67e5","0e121d43b5a10f2df530f406f935102656e9c4e8","83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a076c3c721f685b7559308fdc2cd72d91bba67e5":["0e121d43b5a10f2df530f406f935102656e9c4e8"],"0e121d43b5a10f2df530f406f935102656e9c4e8":["83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"83870855d82aba6819217abeff5a40779dbb28b4":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}