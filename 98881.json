{"path":"lucene/analysis/nori/src/java/org/apache/lucene/analysis/ko/GraphvizFormatter#formatNodes(KoreanTokenizer,WrappedPositionArray,int,Position,char[]).mjava","commits":[{"id":"8493925b2e70246f0961df584c01a8c2e61ee52f","date":1523611602,"type":0,"author":"Jim Ferenczi","isMerge":false,"pathNew":"lucene/analysis/nori/src/java/org/apache/lucene/analysis/ko/GraphvizFormatter#formatNodes(KoreanTokenizer,WrappedPositionArray,int,Position,char[]).mjava","pathOld":"/dev/null","sourceNew":"  private String formatNodes(KoreanTokenizer tok, WrappedPositionArray positions, int startPos, Position endPosData, char[] fragment) {\n\n    StringBuilder sb = new StringBuilder();\n    // Output nodes\n    for (int pos = startPos+1; pos <= endPosData.pos; pos++) {\n      final Position posData = positions.get(pos);\n      for(int idx=0;idx<posData.count;idx++) {\n        sb.append(\"  \");\n        sb.append(getNodeID(pos, idx));\n        sb.append(\" [label=\\\"\");\n        sb.append(pos);\n        sb.append(\": \");\n        sb.append(posData.lastRightID[idx]);\n        sb.append(\"\\\"]\\n\");\n      }\n    }\n\n    // Output arcs\n    for (int pos = endPosData.pos; pos > startPos; pos--) {\n      final Position posData = positions.get(pos);\n      for(int idx=0;idx<posData.count;idx++) {\n        final Position backPosData = positions.get(posData.backPos[idx]);\n        final String toNodeID = getNodeID(pos, idx);\n        final String fromNodeID = getNodeID(posData.backPos[idx], posData.backIndex[idx]);\n\n        sb.append(\"  \");\n        sb.append(fromNodeID);\n        sb.append(\" -> \");\n        sb.append(toNodeID);\n\n        final String attrs;\n        if (toNodeID.equals(bestPathMap.get(fromNodeID))) {\n          // This arc is on best path\n          attrs = \" color=\\\"#40e050\\\" fontcolor=\\\"#40a050\\\" penwidth=3 fontsize=20\";\n        } else {\n          attrs = \"\";\n        }\n\n        final Dictionary dict = tok.getDict(posData.backType[idx]);\n        final int wordCost = dict.getWordCost(posData.backID[idx]);\n        final int bgCost = costs.get(backPosData.lastRightID[posData.backIndex[idx]],\n                                     dict.getLeftId(posData.backID[idx]));\n\n        final String surfaceForm = new String(fragment,\n                                              posData.backPos[idx] - startPos,\n                                              pos - posData.backPos[idx]);\n        \n        sb.append(\" [label=\\\"\");\n        sb.append(surfaceForm);\n        sb.append(' ');\n        sb.append(wordCost);\n        if (bgCost >= 0) {\n          sb.append('+');\n        }\n        sb.append(bgCost);\n        sb.append(\"\\\"\");\n        sb.append(attrs);\n        sb.append(\"]\\n\");\n      }\n    }\n    return sb.toString();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c6453827f947004a68ad9db7418781e9df2f660","date":1523626811,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/analysis/nori/src/java/org/apache/lucene/analysis/ko/GraphvizFormatter#formatNodes(KoreanTokenizer,WrappedPositionArray,int,Position,char[]).mjava","pathOld":"/dev/null","sourceNew":"  private String formatNodes(KoreanTokenizer tok, WrappedPositionArray positions, int startPos, Position endPosData, char[] fragment) {\n\n    StringBuilder sb = new StringBuilder();\n    // Output nodes\n    for (int pos = startPos+1; pos <= endPosData.pos; pos++) {\n      final Position posData = positions.get(pos);\n      for(int idx=0;idx<posData.count;idx++) {\n        sb.append(\"  \");\n        sb.append(getNodeID(pos, idx));\n        sb.append(\" [label=\\\"\");\n        sb.append(pos);\n        sb.append(\": \");\n        sb.append(posData.lastRightID[idx]);\n        sb.append(\"\\\"]\\n\");\n      }\n    }\n\n    // Output arcs\n    for (int pos = endPosData.pos; pos > startPos; pos--) {\n      final Position posData = positions.get(pos);\n      for(int idx=0;idx<posData.count;idx++) {\n        final Position backPosData = positions.get(posData.backPos[idx]);\n        final String toNodeID = getNodeID(pos, idx);\n        final String fromNodeID = getNodeID(posData.backPos[idx], posData.backIndex[idx]);\n\n        sb.append(\"  \");\n        sb.append(fromNodeID);\n        sb.append(\" -> \");\n        sb.append(toNodeID);\n\n        final String attrs;\n        if (toNodeID.equals(bestPathMap.get(fromNodeID))) {\n          // This arc is on best path\n          attrs = \" color=\\\"#40e050\\\" fontcolor=\\\"#40a050\\\" penwidth=3 fontsize=20\";\n        } else {\n          attrs = \"\";\n        }\n\n        final Dictionary dict = tok.getDict(posData.backType[idx]);\n        final int wordCost = dict.getWordCost(posData.backID[idx]);\n        final int bgCost = costs.get(backPosData.lastRightID[posData.backIndex[idx]],\n                                     dict.getLeftId(posData.backID[idx]));\n\n        final String surfaceForm = new String(fragment,\n                                              posData.backPos[idx] - startPos,\n                                              pos - posData.backPos[idx]);\n        \n        sb.append(\" [label=\\\"\");\n        sb.append(surfaceForm);\n        sb.append(' ');\n        sb.append(wordCost);\n        if (bgCost >= 0) {\n          sb.append('+');\n        }\n        sb.append(bgCost);\n        sb.append(\"\\\"\");\n        sb.append(attrs);\n        sb.append(\"]\\n\");\n      }\n    }\n    return sb.toString();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8493925b2e70246f0961df584c01a8c2e61ee52f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5c6453827f947004a68ad9db7418781e9df2f660"],"5c6453827f947004a68ad9db7418781e9df2f660":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8493925b2e70246f0961df584c01a8c2e61ee52f"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8493925b2e70246f0961df584c01a8c2e61ee52f","5c6453827f947004a68ad9db7418781e9df2f660"],"8493925b2e70246f0961df584c01a8c2e61ee52f":["5c6453827f947004a68ad9db7418781e9df2f660"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"5c6453827f947004a68ad9db7418781e9df2f660":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}