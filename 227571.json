{"path":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/EnwikiContentSource.Parser#run().mjava","commits":[{"id":"ecc11368dc265bfdad90214f8bf5da99016ab1e2","date":1294144090,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/EnwikiContentSource.Parser#run().mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/EnwikiContentSource.Parser#run().mjava","sourceNew":"    public void run() {\n\n      try {\n        XMLReader reader = XMLReaderFactory.createXMLReader();\n        reader.setContentHandler(this);\n        reader.setErrorHandler(this);\n        while(true){\n          final InputStream localFileIS = is;\n          try {\n            reader.parse(new InputSource(localFileIS));\n          } catch (IOException ioe) {\n            synchronized(EnwikiContentSource.this) {\n              if (localFileIS != is) {\n                // fileIS was closed on us, so, just fall\n                // through\n              } else\n                // Exception is real\n                throw ioe;\n            }\n          }\n          synchronized(this) {\n            if (!forever) {\n              nmde = new NoMoreDataException();\n              notify();\n              return;\n            } else if (localFileIS == is) {\n              // If file is not already re-opened then re-open it now\n              is = getInputStream(file);\n            }\n          }\n        }\n      } catch (SAXException sae) {\n        throw new RuntimeException(sae);\n      } catch (IOException ioe) {\n        throw new RuntimeException(ioe);\n      } finally {\n        synchronized(this) {\n          threadDone = true;\n          notify();\n        }\n      }\n    }\n\n","sourceOld":"    public void run() {\n\n      try {\n        XMLReader reader = XMLReaderFactory.createXMLReader();\n        reader.setContentHandler(this);\n        reader.setErrorHandler(this);\n        while(true){\n          final InputStream localFileIS = is;\n          try {\n            reader.parse(new InputSource(localFileIS));\n          } catch (IOException ioe) {\n            synchronized(EnwikiContentSource.this) {\n              if (localFileIS != is) {\n                // fileIS was closed on us, so, just fall\n                // through\n              } else\n                // Exception is real\n                throw ioe;\n            }\n          }\n          synchronized(this) {\n            if (!forever) {\n              nmde = new NoMoreDataException();\n              notify();\n              return;\n            } else if (localFileIS == is) {\n              // If file is not already re-opened then re-open it now\n              is = getInputStream(file);\n            }\n          }\n        }\n      } catch (SAXException sae) {\n        throw new RuntimeException(sae);\n      } catch (IOException ioe) {\n        throw new RuntimeException(ioe);\n      } finally {\n        synchronized(this) {\n          threadDone = true;\n          notify();\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/EnwikiContentSource.Parser#run().mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/EnwikiContentSource.Parser#run().mjava","sourceNew":"    public void run() {\n\n      try {\n        XMLReader reader = XMLReaderFactory.createXMLReader();\n        reader.setContentHandler(this);\n        reader.setErrorHandler(this);\n        while(true){\n          final InputStream localFileIS = is;\n          try {\n            reader.parse(new InputSource(localFileIS));\n          } catch (IOException ioe) {\n            synchronized(EnwikiContentSource.this) {\n              if (localFileIS != is) {\n                // fileIS was closed on us, so, just fall\n                // through\n              } else\n                // Exception is real\n                throw ioe;\n            }\n          }\n          synchronized(this) {\n            if (!forever) {\n              nmde = new NoMoreDataException();\n              notify();\n              return;\n            } else if (localFileIS == is) {\n              // If file is not already re-opened then re-open it now\n              is = getInputStream(file);\n            }\n          }\n        }\n      } catch (SAXException sae) {\n        throw new RuntimeException(sae);\n      } catch (IOException ioe) {\n        throw new RuntimeException(ioe);\n      } finally {\n        synchronized(this) {\n          threadDone = true;\n          notify();\n        }\n      }\n    }\n\n","sourceOld":"    public void run() {\n\n      try {\n        XMLReader reader = XMLReaderFactory.createXMLReader();\n        reader.setContentHandler(this);\n        reader.setErrorHandler(this);\n        while(true){\n          final InputStream localFileIS = is;\n          try {\n            reader.parse(new InputSource(localFileIS));\n          } catch (IOException ioe) {\n            synchronized(EnwikiContentSource.this) {\n              if (localFileIS != is) {\n                // fileIS was closed on us, so, just fall\n                // through\n              } else\n                // Exception is real\n                throw ioe;\n            }\n          }\n          synchronized(this) {\n            if (!forever) {\n              nmde = new NoMoreDataException();\n              notify();\n              return;\n            } else if (localFileIS == is) {\n              // If file is not already re-opened then re-open it now\n              is = getInputStream(file);\n            }\n          }\n        }\n      } catch (SAXException sae) {\n        throw new RuntimeException(sae);\n      } catch (IOException ioe) {\n        throw new RuntimeException(ioe);\n      } finally {\n        synchronized(this) {\n          threadDone = true;\n          notify();\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":1,"author":"Michael Busch","isMerge":true,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/EnwikiContentSource.Parser#run().mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/EnwikiContentSource.Parser#run().mjava","sourceNew":"    public void run() {\n\n      try {\n        XMLReader reader = XMLReaderFactory.createXMLReader();\n        reader.setContentHandler(this);\n        reader.setErrorHandler(this);\n        while(true){\n          final InputStream localFileIS = is;\n          try {\n            reader.parse(new InputSource(localFileIS));\n          } catch (IOException ioe) {\n            synchronized(EnwikiContentSource.this) {\n              if (localFileIS != is) {\n                // fileIS was closed on us, so, just fall\n                // through\n              } else\n                // Exception is real\n                throw ioe;\n            }\n          }\n          synchronized(this) {\n            if (!forever) {\n              nmde = new NoMoreDataException();\n              notify();\n              return;\n            } else if (localFileIS == is) {\n              // If file is not already re-opened then re-open it now\n              is = getInputStream(file);\n            }\n          }\n        }\n      } catch (SAXException sae) {\n        throw new RuntimeException(sae);\n      } catch (IOException ioe) {\n        throw new RuntimeException(ioe);\n      } finally {\n        synchronized(this) {\n          threadDone = true;\n          notify();\n        }\n      }\n    }\n\n","sourceOld":"    public void run() {\n\n      try {\n        XMLReader reader = XMLReaderFactory.createXMLReader();\n        reader.setContentHandler(this);\n        reader.setErrorHandler(this);\n        while(true){\n          final InputStream localFileIS = is;\n          try {\n            reader.parse(new InputSource(localFileIS));\n          } catch (IOException ioe) {\n            synchronized(EnwikiContentSource.this) {\n              if (localFileIS != is) {\n                // fileIS was closed on us, so, just fall\n                // through\n              } else\n                // Exception is real\n                throw ioe;\n            }\n          }\n          synchronized(this) {\n            if (!forever) {\n              nmde = new NoMoreDataException();\n              notify();\n              return;\n            } else if (localFileIS == is) {\n              // If file is not already re-opened then re-open it now\n              is = getInputStream(file);\n            }\n          }\n        }\n      } catch (SAXException sae) {\n        throw new RuntimeException(sae);\n      } catch (IOException ioe) {\n        throw new RuntimeException(ioe);\n      } finally {\n        synchronized(this) {\n          threadDone = true;\n          notify();\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6e2944372726ed00fc05229687367002194c6c81","date":1300969333,"type":3,"author":"Doron Cohen","isMerge":false,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/EnwikiContentSource.Parser#run().mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/EnwikiContentSource.Parser#run().mjava","sourceNew":"    public void run() {\n\n      try {\n        XMLReader reader = XMLReaderFactory.createXMLReader();\n        reader.setContentHandler(this);\n        reader.setErrorHandler(this);\n        while(true){\n          final InputStream localFileIS = is;\n          try {\n            reader.parse(new InputSource(localFileIS));\n          } catch (IOException ioe) {\n            synchronized(EnwikiContentSource.this) {\n              if (localFileIS != is) {\n                // fileIS was closed on us, so, just fall\n                // through\n              } else\n                // Exception is real\n                throw ioe;\n            }\n          }\n          synchronized(this) {\n            if (!forever) {\n              nmde = new NoMoreDataException();\n              notify();\n              return;\n            } else if (localFileIS == is) {\n              // If file is not already re-opened then re-open it now\n              is = StreamUtils.inputStream(file);\n            }\n          }\n        }\n      } catch (SAXException sae) {\n        throw new RuntimeException(sae);\n      } catch (IOException ioe) {\n        throw new RuntimeException(ioe);\n      } finally {\n        synchronized(this) {\n          threadDone = true;\n          notify();\n        }\n      }\n    }\n\n","sourceOld":"    public void run() {\n\n      try {\n        XMLReader reader = XMLReaderFactory.createXMLReader();\n        reader.setContentHandler(this);\n        reader.setErrorHandler(this);\n        while(true){\n          final InputStream localFileIS = is;\n          try {\n            reader.parse(new InputSource(localFileIS));\n          } catch (IOException ioe) {\n            synchronized(EnwikiContentSource.this) {\n              if (localFileIS != is) {\n                // fileIS was closed on us, so, just fall\n                // through\n              } else\n                // Exception is real\n                throw ioe;\n            }\n          }\n          synchronized(this) {\n            if (!forever) {\n              nmde = new NoMoreDataException();\n              notify();\n              return;\n            } else if (localFileIS == is) {\n              // If file is not already re-opened then re-open it now\n              is = getInputStream(file);\n            }\n          }\n        }\n      } catch (SAXException sae) {\n        throw new RuntimeException(sae);\n      } catch (IOException ioe) {\n        throw new RuntimeException(ioe);\n      } finally {\n        synchronized(this) {\n          threadDone = true;\n          notify();\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/EnwikiContentSource.Parser#run().mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/EnwikiContentSource.Parser#run().mjava","sourceNew":"    public void run() {\n\n      try {\n        XMLReader reader = XMLReaderFactory.createXMLReader();\n        reader.setContentHandler(this);\n        reader.setErrorHandler(this);\n        while(true){\n          final InputStream localFileIS = is;\n          try {\n            reader.parse(new InputSource(localFileIS));\n          } catch (IOException ioe) {\n            synchronized(EnwikiContentSource.this) {\n              if (localFileIS != is) {\n                // fileIS was closed on us, so, just fall\n                // through\n              } else\n                // Exception is real\n                throw ioe;\n            }\n          }\n          synchronized(this) {\n            if (!forever) {\n              nmde = new NoMoreDataException();\n              notify();\n              return;\n            } else if (localFileIS == is) {\n              // If file is not already re-opened then re-open it now\n              is = StreamUtils.inputStream(file);\n            }\n          }\n        }\n      } catch (SAXException sae) {\n        throw new RuntimeException(sae);\n      } catch (IOException ioe) {\n        throw new RuntimeException(ioe);\n      } finally {\n        synchronized(this) {\n          threadDone = true;\n          notify();\n        }\n      }\n    }\n\n","sourceOld":"    public void run() {\n\n      try {\n        XMLReader reader = XMLReaderFactory.createXMLReader();\n        reader.setContentHandler(this);\n        reader.setErrorHandler(this);\n        while(true){\n          final InputStream localFileIS = is;\n          try {\n            reader.parse(new InputSource(localFileIS));\n          } catch (IOException ioe) {\n            synchronized(EnwikiContentSource.this) {\n              if (localFileIS != is) {\n                // fileIS was closed on us, so, just fall\n                // through\n              } else\n                // Exception is real\n                throw ioe;\n            }\n          }\n          synchronized(this) {\n            if (!forever) {\n              nmde = new NoMoreDataException();\n              notify();\n              return;\n            } else if (localFileIS == is) {\n              // If file is not already re-opened then re-open it now\n              is = getInputStream(file);\n            }\n          }\n        }\n      } catch (SAXException sae) {\n        throw new RuntimeException(sae);\n      } catch (IOException ioe) {\n        throw new RuntimeException(ioe);\n      } finally {\n        synchronized(this) {\n          threadDone = true;\n          notify();\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/EnwikiContentSource.Parser#run().mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/EnwikiContentSource.Parser#run().mjava","sourceNew":"    public void run() {\n\n      try {\n        XMLReader reader = XMLReaderFactory.createXMLReader();\n        reader.setContentHandler(this);\n        reader.setErrorHandler(this);\n        while(true){\n          final InputStream localFileIS = is;\n          try {\n            reader.parse(new InputSource(localFileIS));\n          } catch (IOException ioe) {\n            synchronized(EnwikiContentSource.this) {\n              if (localFileIS != is) {\n                // fileIS was closed on us, so, just fall\n                // through\n              } else\n                // Exception is real\n                throw ioe;\n            }\n          }\n          synchronized(this) {\n            if (!forever) {\n              nmde = new NoMoreDataException();\n              notify();\n              return;\n            } else if (localFileIS == is) {\n              // If file is not already re-opened then re-open it now\n              is = StreamUtils.inputStream(file);\n            }\n          }\n        }\n      } catch (SAXException sae) {\n        throw new RuntimeException(sae);\n      } catch (IOException ioe) {\n        throw new RuntimeException(ioe);\n      } finally {\n        synchronized(this) {\n          threadDone = true;\n          notify();\n        }\n      }\n    }\n\n","sourceOld":"    public void run() {\n\n      try {\n        XMLReader reader = XMLReaderFactory.createXMLReader();\n        reader.setContentHandler(this);\n        reader.setErrorHandler(this);\n        while(true){\n          final InputStream localFileIS = is;\n          try {\n            reader.parse(new InputSource(localFileIS));\n          } catch (IOException ioe) {\n            synchronized(EnwikiContentSource.this) {\n              if (localFileIS != is) {\n                // fileIS was closed on us, so, just fall\n                // through\n              } else\n                // Exception is real\n                throw ioe;\n            }\n          }\n          synchronized(this) {\n            if (!forever) {\n              nmde = new NoMoreDataException();\n              notify();\n              return;\n            } else if (localFileIS == is) {\n              // If file is not already re-opened then re-open it now\n              is = getInputStream(file);\n            }\n          }\n        }\n      } catch (SAXException sae) {\n        throw new RuntimeException(sae);\n      } catch (IOException ioe) {\n        throw new RuntimeException(ioe);\n      } finally {\n        synchronized(this) {\n          threadDone = true;\n          notify();\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f93331d04c1dd0de8f5cda92c0a4e92314284e49","date":1333058655,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/EnwikiContentSource.Parser#run().mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/EnwikiContentSource.Parser#run().mjava","sourceNew":"    public void run() {\n\n      try {\n        XMLReader reader = XMLReaderFactory.createXMLReader();\n        reader.setContentHandler(this);\n        reader.setErrorHandler(this);\n        while(true){\n          final InputStream localFileIS = is;\n          try {\n            // To work around a bug in XERCES (XERCESJ-1257), we assume the XML is always UTF8, so we simply provide reader.\n            CharsetDecoder decoder = IOUtils.CHARSET_UTF_8.newDecoder()\n                .onMalformedInput(CodingErrorAction.REPORT)\n                .onUnmappableCharacter(CodingErrorAction.REPORT);\n            reader.parse(new InputSource(new BufferedReader(new InputStreamReader(localFileIS, decoder))));\n          } catch (IOException ioe) {\n            synchronized(EnwikiContentSource.this) {\n              if (localFileIS != is) {\n                // fileIS was closed on us, so, just fall\n                // through\n              } else\n                // Exception is real\n                throw ioe;\n            }\n          }\n          synchronized(this) {\n            if (!forever) {\n              nmde = new NoMoreDataException();\n              notify();\n              return;\n            } else if (localFileIS == is) {\n              // If file is not already re-opened then re-open it now\n              is = StreamUtils.inputStream(file);\n            }\n          }\n        }\n      } catch (SAXException sae) {\n        throw new RuntimeException(sae);\n      } catch (IOException ioe) {\n        throw new RuntimeException(ioe);\n      } finally {\n        synchronized(this) {\n          threadDone = true;\n          notify();\n        }\n      }\n    }\n\n","sourceOld":"    public void run() {\n\n      try {\n        XMLReader reader = XMLReaderFactory.createXMLReader();\n        reader.setContentHandler(this);\n        reader.setErrorHandler(this);\n        while(true){\n          final InputStream localFileIS = is;\n          try {\n            reader.parse(new InputSource(localFileIS));\n          } catch (IOException ioe) {\n            synchronized(EnwikiContentSource.this) {\n              if (localFileIS != is) {\n                // fileIS was closed on us, so, just fall\n                // through\n              } else\n                // Exception is real\n                throw ioe;\n            }\n          }\n          synchronized(this) {\n            if (!forever) {\n              nmde = new NoMoreDataException();\n              notify();\n              return;\n            } else if (localFileIS == is) {\n              // If file is not already re-opened then re-open it now\n              is = StreamUtils.inputStream(file);\n            }\n          }\n        }\n      } catch (SAXException sae) {\n        throw new RuntimeException(sae);\n      } catch (IOException ioe) {\n        throw new RuntimeException(ioe);\n      } finally {\n        synchronized(this) {\n          threadDone = true;\n          notify();\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/EnwikiContentSource.Parser#run().mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/EnwikiContentSource.Parser#run().mjava","sourceNew":"    public void run() {\n\n      try {\n        XMLReader reader = XMLReaderFactory.createXMLReader();\n        reader.setContentHandler(this);\n        reader.setErrorHandler(this);\n        while(true){\n          final InputStream localFileIS = is;\n          try {\n            // To work around a bug in XERCES (XERCESJ-1257), we assume the XML is always UTF8, so we simply provide reader.\n            CharsetDecoder decoder = IOUtils.CHARSET_UTF_8.newDecoder()\n                .onMalformedInput(CodingErrorAction.REPORT)\n                .onUnmappableCharacter(CodingErrorAction.REPORT);\n            reader.parse(new InputSource(new BufferedReader(new InputStreamReader(localFileIS, decoder))));\n          } catch (IOException ioe) {\n            synchronized(EnwikiContentSource.this) {\n              if (localFileIS != is) {\n                // fileIS was closed on us, so, just fall\n                // through\n              } else\n                // Exception is real\n                throw ioe;\n            }\n          }\n          synchronized(this) {\n            if (!forever) {\n              nmde = new NoMoreDataException();\n              notify();\n              return;\n            } else if (localFileIS == is) {\n              // If file is not already re-opened then re-open it now\n              is = StreamUtils.inputStream(file);\n            }\n          }\n        }\n      } catch (SAXException sae) {\n        throw new RuntimeException(sae);\n      } catch (IOException ioe) {\n        throw new RuntimeException(ioe);\n      } finally {\n        synchronized(this) {\n          threadDone = true;\n          notify();\n        }\n      }\n    }\n\n","sourceOld":"    public void run() {\n\n      try {\n        XMLReader reader = XMLReaderFactory.createXMLReader();\n        reader.setContentHandler(this);\n        reader.setErrorHandler(this);\n        while(true){\n          final InputStream localFileIS = is;\n          try {\n            // To work around a bug in XERCES (XERCESJ-1257), we assume the XML is always UTF8, so we simply provide reader.\n            CharsetDecoder decoder = IOUtils.CHARSET_UTF_8.newDecoder()\n                .onMalformedInput(CodingErrorAction.REPORT)\n                .onUnmappableCharacter(CodingErrorAction.REPORT);\n            reader.parse(new InputSource(new BufferedReader(new InputStreamReader(localFileIS, decoder))));\n          } catch (IOException ioe) {\n            synchronized(EnwikiContentSource.this) {\n              if (localFileIS != is) {\n                // fileIS was closed on us, so, just fall\n                // through\n              } else\n                // Exception is real\n                throw ioe;\n            }\n          }\n          synchronized(this) {\n            if (!forever) {\n              nmde = new NoMoreDataException();\n              notify();\n              return;\n            } else if (localFileIS == is) {\n              // If file is not already re-opened then re-open it now\n              is = StreamUtils.inputStream(file);\n            }\n          }\n        }\n      } catch (SAXException sae) {\n        throw new RuntimeException(sae);\n      } catch (IOException ioe) {\n        throw new RuntimeException(ioe);\n      } finally {\n        synchronized(this) {\n          threadDone = true;\n          notify();\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["f93331d04c1dd0de8f5cda92c0a4e92314284e49"],"ecc11368dc265bfdad90214f8bf5da99016ab1e2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["868da859b43505d9d2a023bfeae6dd0c795f5295","6e2944372726ed00fc05229687367002194c6c81"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["70ad682703b8585f5d0a637efec044d57ec05efb","6e2944372726ed00fc05229687367002194c6c81"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f93331d04c1dd0de8f5cda92c0a4e92314284e49":["6e2944372726ed00fc05229687367002194c6c81"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"6e2944372726ed00fc05229687367002194c6c81":["ecc11368dc265bfdad90214f8bf5da99016ab1e2"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":["d619839baa8ce5503e496b94a9e42ad6f079293f"],"ecc11368dc265bfdad90214f8bf5da99016ab1e2":["70ad682703b8585f5d0a637efec044d57ec05efb","868da859b43505d9d2a023bfeae6dd0c795f5295","6e2944372726ed00fc05229687367002194c6c81"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":[],"d619839baa8ce5503e496b94a9e42ad6f079293f":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["70ad682703b8585f5d0a637efec044d57ec05efb","ecc11368dc265bfdad90214f8bf5da99016ab1e2","868da859b43505d9d2a023bfeae6dd0c795f5295"],"f93331d04c1dd0de8f5cda92c0a4e92314284e49":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df"],"6e2944372726ed00fc05229687367002194c6c81":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","f93331d04c1dd0de8f5cda92c0a4e92314284e49"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}