{"path":"solr/core/src/test/org/apache/solr/util/TestExportTool#testBasic().mjava","commits":[{"id":"b26d91db0d1d754936add788fa3a21acaadc9685","date":1565418863,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/TestExportTool#testBasic().mjava","pathOld":"/dev/null","sourceNew":"  public void testBasic() throws Exception {\n    String COLLECTION_NAME = \"globalLoaderColl\";\n    MiniSolrCloudCluster cluster = configureCluster(4)\n        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n        .configure();\n\n    try {\n      CollectionAdminRequest\n          .createCollection(COLLECTION_NAME, \"conf\", 2, 1)\n          .setMaxShardsPerNode(100)\n          .process(cluster.getSolrClient());\n      cluster.waitForActiveCollection(COLLECTION_NAME, 2, 2);\n\n      String tmpFileLoc = new File(cluster.getBaseDir().toFile().getAbsolutePath() +\n          File.separator).getPath();\n\n      UpdateRequest ur = new UpdateRequest();\n      ur.setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true);\n      int docCount = 1000;\n\n      for (int i = 0; i < docCount; i++) {\n        ur.add(\"id\", String.valueOf(i), \"desc_s\", TestUtil.randomSimpleString(random(), 10, 50));\n      }\n      cluster.getSolrClient().request(ur, COLLECTION_NAME);\n\n      QueryResponse qr = cluster.getSolrClient().query(COLLECTION_NAME, new SolrQuery(\"*:*\").setRows(0));\n      assertEquals(docCount, qr.getResults().getNumFound());\n\n      String url = cluster.getRandomJetty(random()).getBaseUrl() + \"/\" + COLLECTION_NAME;\n\n\n      ExportTool.Info info = new ExportTool.Info(url);\n\n      String absolutePath = tmpFileLoc + COLLECTION_NAME + random().nextInt(100000) + \".json\";\n      info.setOutFormat(absolutePath, \"jsonl\");\n      info.setLimit(\"200\");\n      info.exportDocsWithCursorMark();\n\n      assertTrue(info.docsWritten >= 200);\n      JsonRecordReader jsonReader = JsonRecordReader.getInst(\"/\", Arrays.asList(\"$FQN:/**\"));\n      Reader rdr = new FileReader(absolutePath);\n      try {\n        int[] count = new int[]{0};\n        jsonReader.streamRecords(rdr, (record, path) -> count[0]++);\n        assertTrue(count[0] >= 200);\n      } finally {\n        rdr.close();\n      }\n\n\n      info = new ExportTool.Info(url);\n      absolutePath = tmpFileLoc + COLLECTION_NAME + random().nextInt(100000) + \".json\";\n      info.setOutFormat(absolutePath, \"jsonl\");\n      info.setLimit(\"-1\");\n      info.exportDocsWithCursorMark();\n\n      assertTrue(info.docsWritten >= 1000);\n      jsonReader = JsonRecordReader.getInst(\"/\", Arrays.asList(\"$FQN:/**\"));\n      rdr = new FileReader(absolutePath);\n      try {\n        int[] count = new int[]{0};\n        jsonReader.streamRecords(rdr, (record, path) -> count[0]++);\n        assertTrue(count[0] >= 1000);\n      } finally {\n        rdr.close();\n      }\n\n\n      info = new ExportTool.Info(url);\n      absolutePath = tmpFileLoc + COLLECTION_NAME + random().nextInt(100000) + \".javabin\";\n      info.setOutFormat(absolutePath, \"javabin\");\n      info.setLimit(\"200\");\n      info.exportDocsWithCursorMark();\n      assertTrue(info.docsWritten >= 200);\n\n      FileInputStream fis = new FileInputStream(absolutePath);\n      try {\n        int[] count = new int[]{0};\n        FastInputStream in = FastInputStream.wrap(fis);\n        new JavaBinUpdateRequestCodec()\n            .unmarshal(in, (document, req, commitWithin, override) -> count[0]++);\n        assertTrue(count[0] >= 200);\n      } finally {\n        fis.close();\n      }\n\n      info = new ExportTool.Info(url);\n      absolutePath = tmpFileLoc + COLLECTION_NAME + random().nextInt(100000) + \".javabin\";\n      info.setOutFormat(absolutePath, \"javabin\");\n      info.setLimit(\"-1\");\n      info.exportDocsWithCursorMark();\n      assertTrue(info.docsWritten >= 1000);\n\n      fis = new FileInputStream(absolutePath);\n      try {\n        int[] count = new int[]{0};\n        FastInputStream in = FastInputStream.wrap(fis);\n        new JavaBinUpdateRequestCodec()\n            .unmarshal(in, (document, req, commitWithin, override) -> count[0]++);\n        assertTrue(count[0] >= 1000);\n      } finally {\n        fis.close();\n      }\n\n    } finally {\n      cluster.shutdown();\n\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["b373db031e25f03ad6783efcfb77809dcd963565"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7d383e3d651e589111e224f1cde89017eedb32ad","date":1565421677,"type":3,"author":"noble","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/TestExportTool#testBasic().mjava","pathOld":"solr/core/src/test/org/apache/solr/util/TestExportTool#testBasic().mjava","sourceNew":"  public void testBasic() throws Exception {\n    String COLLECTION_NAME = \"globalLoaderColl\";\n    MiniSolrCloudCluster cluster = configureCluster(4)\n        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n        .configure();\n\n    try {\n      CollectionAdminRequest\n          .createCollection(COLLECTION_NAME, \"conf\", 2, 1)\n          .setMaxShardsPerNode(100)\n          .process(cluster.getSolrClient());\n      cluster.waitForActiveCollection(COLLECTION_NAME, 2, 2);\n\n      String tmpFileLoc = new File(cluster.getBaseDir().toFile().getAbsolutePath() +\n          File.separator).getPath();\n\n      UpdateRequest ur = new UpdateRequest();\n      ur.setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true);\n      int docCount = 1000;\n\n      for (int i = 0; i < docCount; i++) {\n        ur.add(\"id\", String.valueOf(i), \"desc_s\", TestUtil.randomSimpleString(random(), 10, 50));\n      }\n      cluster.getSolrClient().request(ur, COLLECTION_NAME);\n\n      QueryResponse qr = cluster.getSolrClient().query(COLLECTION_NAME, new SolrQuery(\"*:*\").setRows(0));\n      assertEquals(docCount, qr.getResults().getNumFound());\n\n      String url = cluster.getRandomJetty(random()).getBaseUrl() + \"/\" + COLLECTION_NAME;\n\n\n      ExportTool.Info info = new ExportTool.Info(url);\n\n      String absolutePath = tmpFileLoc + COLLECTION_NAME + random().nextInt(100000) + \".json\";\n      info.setOutFormat(absolutePath, \"jsonl\");\n      info.setLimit(\"200\");\n      info.exportDocsWithCursorMark();\n\n      assertTrue(info.docsWritten >= 200);\n      JsonRecordReader jsonReader = JsonRecordReader.getInst(\"/\", Arrays.asList(\"$FQN:/**\"));\n      Reader rdr = new InputStreamReader(new FileInputStream( absolutePath), StandardCharsets.UTF_8);\n      try {\n        int[] count = new int[]{0};\n        jsonReader.streamRecords(rdr, (record, path) -> count[0]++);\n        assertTrue(count[0] >= 200);\n      } finally {\n        rdr.close();\n      }\n\n\n      info = new ExportTool.Info(url);\n      absolutePath = tmpFileLoc + COLLECTION_NAME + random().nextInt(100000) + \".json\";\n      info.setOutFormat(absolutePath, \"jsonl\");\n      info.setLimit(\"-1\");\n      info.exportDocsWithCursorMark();\n\n      assertTrue(info.docsWritten >= 1000);\n      jsonReader = JsonRecordReader.getInst(\"/\", Arrays.asList(\"$FQN:/**\"));\n      rdr = new InputStreamReader(new FileInputStream( absolutePath), StandardCharsets.UTF_8);\n      try {\n        int[] count = new int[]{0};\n        jsonReader.streamRecords(rdr, (record, path) -> count[0]++);\n        assertTrue(count[0] >= 1000);\n      } finally {\n        rdr.close();\n      }\n\n\n      info = new ExportTool.Info(url);\n      absolutePath = tmpFileLoc + COLLECTION_NAME + random().nextInt(100000) + \".javabin\";\n      info.setOutFormat(absolutePath, \"javabin\");\n      info.setLimit(\"200\");\n      info.exportDocsWithCursorMark();\n      assertTrue(info.docsWritten >= 200);\n\n      FileInputStream fis = new FileInputStream(absolutePath);\n      try {\n        int[] count = new int[]{0};\n        FastInputStream in = FastInputStream.wrap(fis);\n        new JavaBinUpdateRequestCodec()\n            .unmarshal(in, (document, req, commitWithin, override) -> count[0]++);\n        assertTrue(count[0] >= 200);\n      } finally {\n        fis.close();\n      }\n\n      info = new ExportTool.Info(url);\n      absolutePath = tmpFileLoc + COLLECTION_NAME + random().nextInt(100000) + \".javabin\";\n      info.setOutFormat(absolutePath, \"javabin\");\n      info.setLimit(\"-1\");\n      info.exportDocsWithCursorMark();\n      assertTrue(info.docsWritten >= 1000);\n\n      fis = new FileInputStream(absolutePath);\n      try {\n        int[] count = new int[]{0};\n        FastInputStream in = FastInputStream.wrap(fis);\n        new JavaBinUpdateRequestCodec()\n            .unmarshal(in, (document, req, commitWithin, override) -> count[0]++);\n        assertTrue(count[0] >= 1000);\n      } finally {\n        fis.close();\n      }\n\n    } finally {\n      cluster.shutdown();\n\n    }\n  }\n\n","sourceOld":"  public void testBasic() throws Exception {\n    String COLLECTION_NAME = \"globalLoaderColl\";\n    MiniSolrCloudCluster cluster = configureCluster(4)\n        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n        .configure();\n\n    try {\n      CollectionAdminRequest\n          .createCollection(COLLECTION_NAME, \"conf\", 2, 1)\n          .setMaxShardsPerNode(100)\n          .process(cluster.getSolrClient());\n      cluster.waitForActiveCollection(COLLECTION_NAME, 2, 2);\n\n      String tmpFileLoc = new File(cluster.getBaseDir().toFile().getAbsolutePath() +\n          File.separator).getPath();\n\n      UpdateRequest ur = new UpdateRequest();\n      ur.setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true);\n      int docCount = 1000;\n\n      for (int i = 0; i < docCount; i++) {\n        ur.add(\"id\", String.valueOf(i), \"desc_s\", TestUtil.randomSimpleString(random(), 10, 50));\n      }\n      cluster.getSolrClient().request(ur, COLLECTION_NAME);\n\n      QueryResponse qr = cluster.getSolrClient().query(COLLECTION_NAME, new SolrQuery(\"*:*\").setRows(0));\n      assertEquals(docCount, qr.getResults().getNumFound());\n\n      String url = cluster.getRandomJetty(random()).getBaseUrl() + \"/\" + COLLECTION_NAME;\n\n\n      ExportTool.Info info = new ExportTool.Info(url);\n\n      String absolutePath = tmpFileLoc + COLLECTION_NAME + random().nextInt(100000) + \".json\";\n      info.setOutFormat(absolutePath, \"jsonl\");\n      info.setLimit(\"200\");\n      info.exportDocsWithCursorMark();\n\n      assertTrue(info.docsWritten >= 200);\n      JsonRecordReader jsonReader = JsonRecordReader.getInst(\"/\", Arrays.asList(\"$FQN:/**\"));\n      Reader rdr = new FileReader(absolutePath);\n      try {\n        int[] count = new int[]{0};\n        jsonReader.streamRecords(rdr, (record, path) -> count[0]++);\n        assertTrue(count[0] >= 200);\n      } finally {\n        rdr.close();\n      }\n\n\n      info = new ExportTool.Info(url);\n      absolutePath = tmpFileLoc + COLLECTION_NAME + random().nextInt(100000) + \".json\";\n      info.setOutFormat(absolutePath, \"jsonl\");\n      info.setLimit(\"-1\");\n      info.exportDocsWithCursorMark();\n\n      assertTrue(info.docsWritten >= 1000);\n      jsonReader = JsonRecordReader.getInst(\"/\", Arrays.asList(\"$FQN:/**\"));\n      rdr = new FileReader(absolutePath);\n      try {\n        int[] count = new int[]{0};\n        jsonReader.streamRecords(rdr, (record, path) -> count[0]++);\n        assertTrue(count[0] >= 1000);\n      } finally {\n        rdr.close();\n      }\n\n\n      info = new ExportTool.Info(url);\n      absolutePath = tmpFileLoc + COLLECTION_NAME + random().nextInt(100000) + \".javabin\";\n      info.setOutFormat(absolutePath, \"javabin\");\n      info.setLimit(\"200\");\n      info.exportDocsWithCursorMark();\n      assertTrue(info.docsWritten >= 200);\n\n      FileInputStream fis = new FileInputStream(absolutePath);\n      try {\n        int[] count = new int[]{0};\n        FastInputStream in = FastInputStream.wrap(fis);\n        new JavaBinUpdateRequestCodec()\n            .unmarshal(in, (document, req, commitWithin, override) -> count[0]++);\n        assertTrue(count[0] >= 200);\n      } finally {\n        fis.close();\n      }\n\n      info = new ExportTool.Info(url);\n      absolutePath = tmpFileLoc + COLLECTION_NAME + random().nextInt(100000) + \".javabin\";\n      info.setOutFormat(absolutePath, \"javabin\");\n      info.setLimit(\"-1\");\n      info.exportDocsWithCursorMark();\n      assertTrue(info.docsWritten >= 1000);\n\n      fis = new FileInputStream(absolutePath);\n      try {\n        int[] count = new int[]{0};\n        FastInputStream in = FastInputStream.wrap(fis);\n        new JavaBinUpdateRequestCodec()\n            .unmarshal(in, (document, req, commitWithin, override) -> count[0]++);\n        assertTrue(count[0] >= 1000);\n      } finally {\n        fis.close();\n      }\n\n    } finally {\n      cluster.shutdown();\n\n    }\n  }\n\n","bugFix":null,"bugIntro":["b373db031e25f03ad6783efcfb77809dcd963565"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b373db031e25f03ad6783efcfb77809dcd963565","date":1565686445,"type":3,"author":"noble","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/TestExportTool#testBasic().mjava","pathOld":"solr/core/src/test/org/apache/solr/util/TestExportTool#testBasic().mjava","sourceNew":"  public void testBasic() throws Exception {\n    String COLLECTION_NAME = \"globalLoaderColl\";\n    MiniSolrCloudCluster cluster = configureCluster(4)\n        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n        .configure();\n\n    try {\n      CollectionAdminRequest\n          .createCollection(COLLECTION_NAME, \"conf\", 2, 1)\n          .setMaxShardsPerNode(100)\n          .process(cluster.getSolrClient());\n      cluster.waitForActiveCollection(COLLECTION_NAME, 2, 2);\n\n      String tmpFileLoc = new File(cluster.getBaseDir().toFile().getAbsolutePath() +\n          File.separator).getPath();\n\n      UpdateRequest ur = new UpdateRequest();\n      ur.setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true);\n      int docCount = 1000;\n\n      for (int i = 0; i < docCount; i++) {\n        ur.add(\"id\", String.valueOf(i), \"desc_s\", TestUtil.randomSimpleString(random(), 10, 50));\n      }\n      cluster.getSolrClient().request(ur, COLLECTION_NAME);\n\n      QueryResponse qr = cluster.getSolrClient().query(COLLECTION_NAME, new SolrQuery(\"*:*\").setRows(0));\n      assertEquals(docCount, qr.getResults().getNumFound());\n\n      String url = cluster.getRandomJetty(random()).getBaseUrl() + \"/\" + COLLECTION_NAME;\n\n\n      ExportTool.Info info = new ExportTool.MultiThreadedRunner(url);\n      String absolutePath = tmpFileLoc + COLLECTION_NAME + random().nextInt(100000) + \".json\";\n      info.setOutFormat(absolutePath, \"jsonl\");\n      info.setLimit(\"200\");\n      info.fields = \"id,desc_s\";\n      info.exportDocs();\n\n      assertJsonDocsCount(info, 200);\n\n      info = new ExportTool.MultiThreadedRunner(url);\n      absolutePath = tmpFileLoc + COLLECTION_NAME + random().nextInt(100000) + \".json\";\n      info.setOutFormat(absolutePath, \"jsonl\");\n      info.setLimit(\"-1\");\n      info.fields = \"id,desc_s\";\n      info.exportDocs();\n\n      assertJsonDocsCount(info, 1000);\n\n      info = new ExportTool.MultiThreadedRunner(url);\n      absolutePath = tmpFileLoc + COLLECTION_NAME + random().nextInt(100000) + \".javabin\";\n      info.setOutFormat(absolutePath, \"javabin\");\n      info.setLimit(\"200\");\n      info.fields = \"id,desc_s\";\n      info.exportDocs();\n\n      assertJavabinDocsCount(info, 200);\n\n      info = new ExportTool.MultiThreadedRunner(url);\n      absolutePath = tmpFileLoc + COLLECTION_NAME + random().nextInt(100000) + \".javabin\";\n      info.setOutFormat(absolutePath, \"javabin\");\n      info.setLimit(\"-1\");\n      info.fields = \"id,desc_s\";\n      info.exportDocs();\n      assertJavabinDocsCount(info, 1000);\n\n    } finally {\n      cluster.shutdown();\n\n    }\n  }\n\n","sourceOld":"  public void testBasic() throws Exception {\n    String COLLECTION_NAME = \"globalLoaderColl\";\n    MiniSolrCloudCluster cluster = configureCluster(4)\n        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n        .configure();\n\n    try {\n      CollectionAdminRequest\n          .createCollection(COLLECTION_NAME, \"conf\", 2, 1)\n          .setMaxShardsPerNode(100)\n          .process(cluster.getSolrClient());\n      cluster.waitForActiveCollection(COLLECTION_NAME, 2, 2);\n\n      String tmpFileLoc = new File(cluster.getBaseDir().toFile().getAbsolutePath() +\n          File.separator).getPath();\n\n      UpdateRequest ur = new UpdateRequest();\n      ur.setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true);\n      int docCount = 1000;\n\n      for (int i = 0; i < docCount; i++) {\n        ur.add(\"id\", String.valueOf(i), \"desc_s\", TestUtil.randomSimpleString(random(), 10, 50));\n      }\n      cluster.getSolrClient().request(ur, COLLECTION_NAME);\n\n      QueryResponse qr = cluster.getSolrClient().query(COLLECTION_NAME, new SolrQuery(\"*:*\").setRows(0));\n      assertEquals(docCount, qr.getResults().getNumFound());\n\n      String url = cluster.getRandomJetty(random()).getBaseUrl() + \"/\" + COLLECTION_NAME;\n\n\n      ExportTool.Info info = new ExportTool.Info(url);\n\n      String absolutePath = tmpFileLoc + COLLECTION_NAME + random().nextInt(100000) + \".json\";\n      info.setOutFormat(absolutePath, \"jsonl\");\n      info.setLimit(\"200\");\n      info.exportDocsWithCursorMark();\n\n      assertTrue(info.docsWritten >= 200);\n      JsonRecordReader jsonReader = JsonRecordReader.getInst(\"/\", Arrays.asList(\"$FQN:/**\"));\n      Reader rdr = new InputStreamReader(new FileInputStream( absolutePath), StandardCharsets.UTF_8);\n      try {\n        int[] count = new int[]{0};\n        jsonReader.streamRecords(rdr, (record, path) -> count[0]++);\n        assertTrue(count[0] >= 200);\n      } finally {\n        rdr.close();\n      }\n\n\n      info = new ExportTool.Info(url);\n      absolutePath = tmpFileLoc + COLLECTION_NAME + random().nextInt(100000) + \".json\";\n      info.setOutFormat(absolutePath, \"jsonl\");\n      info.setLimit(\"-1\");\n      info.exportDocsWithCursorMark();\n\n      assertTrue(info.docsWritten >= 1000);\n      jsonReader = JsonRecordReader.getInst(\"/\", Arrays.asList(\"$FQN:/**\"));\n      rdr = new InputStreamReader(new FileInputStream( absolutePath), StandardCharsets.UTF_8);\n      try {\n        int[] count = new int[]{0};\n        jsonReader.streamRecords(rdr, (record, path) -> count[0]++);\n        assertTrue(count[0] >= 1000);\n      } finally {\n        rdr.close();\n      }\n\n\n      info = new ExportTool.Info(url);\n      absolutePath = tmpFileLoc + COLLECTION_NAME + random().nextInt(100000) + \".javabin\";\n      info.setOutFormat(absolutePath, \"javabin\");\n      info.setLimit(\"200\");\n      info.exportDocsWithCursorMark();\n      assertTrue(info.docsWritten >= 200);\n\n      FileInputStream fis = new FileInputStream(absolutePath);\n      try {\n        int[] count = new int[]{0};\n        FastInputStream in = FastInputStream.wrap(fis);\n        new JavaBinUpdateRequestCodec()\n            .unmarshal(in, (document, req, commitWithin, override) -> count[0]++);\n        assertTrue(count[0] >= 200);\n      } finally {\n        fis.close();\n      }\n\n      info = new ExportTool.Info(url);\n      absolutePath = tmpFileLoc + COLLECTION_NAME + random().nextInt(100000) + \".javabin\";\n      info.setOutFormat(absolutePath, \"javabin\");\n      info.setLimit(\"-1\");\n      info.exportDocsWithCursorMark();\n      assertTrue(info.docsWritten >= 1000);\n\n      fis = new FileInputStream(absolutePath);\n      try {\n        int[] count = new int[]{0};\n        FastInputStream in = FastInputStream.wrap(fis);\n        new JavaBinUpdateRequestCodec()\n            .unmarshal(in, (document, req, commitWithin, override) -> count[0]++);\n        assertTrue(count[0] >= 1000);\n      } finally {\n        fis.close();\n      }\n\n    } finally {\n      cluster.shutdown();\n\n    }\n  }\n\n","bugFix":["b26d91db0d1d754936add788fa3a21acaadc9685","7d383e3d651e589111e224f1cde89017eedb32ad"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c44cc06c26e456fe9c215072b79fce30babe3975","date":1570365040,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/TestExportTool#testBasic().mjava","pathOld":"solr/core/src/test/org/apache/solr/util/TestExportTool#testBasic().mjava","sourceNew":"  public void testBasic() throws Exception {\n    String COLLECTION_NAME = \"globalLoaderColl\";\n    configureCluster(4)\n        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n        .configure();\n\n    try {\n      CollectionAdminRequest\n          .createCollection(COLLECTION_NAME, \"conf\", 2, 1)\n          .setMaxShardsPerNode(100)\n          .process(cluster.getSolrClient());\n      cluster.waitForActiveCollection(COLLECTION_NAME, 2, 2);\n\n      String tmpFileLoc = new File(cluster.getBaseDir().toFile().getAbsolutePath() +\n          File.separator).getPath();\n\n      UpdateRequest ur = new UpdateRequest();\n      ur.setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true);\n      int docCount = 1000;\n\n      for (int i = 0; i < docCount; i++) {\n        ur.add(\"id\", String.valueOf(i), \"desc_s\", TestUtil.randomSimpleString(random(), 10, 50));\n      }\n      cluster.getSolrClient().request(ur, COLLECTION_NAME);\n\n      QueryResponse qr = cluster.getSolrClient().query(COLLECTION_NAME, new SolrQuery(\"*:*\").setRows(0));\n      assertEquals(docCount, qr.getResults().getNumFound());\n\n      String url = cluster.getRandomJetty(random()).getBaseUrl() + \"/\" + COLLECTION_NAME;\n\n\n      ExportTool.Info info = new ExportTool.MultiThreadedRunner(url);\n      String absolutePath = tmpFileLoc + COLLECTION_NAME + random().nextInt(100000) + \".json\";\n      info.setOutFormat(absolutePath, \"jsonl\");\n      info.setLimit(\"200\");\n      info.fields = \"id,desc_s\";\n      info.exportDocs();\n\n      assertJsonDocsCount(info, 200);\n\n      info = new ExportTool.MultiThreadedRunner(url);\n      absolutePath = tmpFileLoc + COLLECTION_NAME + random().nextInt(100000) + \".json\";\n      info.setOutFormat(absolutePath, \"jsonl\");\n      info.setLimit(\"-1\");\n      info.fields = \"id,desc_s\";\n      info.exportDocs();\n\n      assertJsonDocsCount(info, 1000);\n\n      info = new ExportTool.MultiThreadedRunner(url);\n      absolutePath = tmpFileLoc + COLLECTION_NAME + random().nextInt(100000) + \".javabin\";\n      info.setOutFormat(absolutePath, \"javabin\");\n      info.setLimit(\"200\");\n      info.fields = \"id,desc_s\";\n      info.exportDocs();\n\n      assertJavabinDocsCount(info, 200);\n\n      info = new ExportTool.MultiThreadedRunner(url);\n      absolutePath = tmpFileLoc + COLLECTION_NAME + random().nextInt(100000) + \".javabin\";\n      info.setOutFormat(absolutePath, \"javabin\");\n      info.setLimit(\"-1\");\n      info.fields = \"id,desc_s\";\n      info.exportDocs();\n      assertJavabinDocsCount(info, 1000);\n\n    } finally {\n      cluster.shutdown();\n\n    }\n  }\n\n","sourceOld":"  public void testBasic() throws Exception {\n    String COLLECTION_NAME = \"globalLoaderColl\";\n    MiniSolrCloudCluster cluster = configureCluster(4)\n        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n        .configure();\n\n    try {\n      CollectionAdminRequest\n          .createCollection(COLLECTION_NAME, \"conf\", 2, 1)\n          .setMaxShardsPerNode(100)\n          .process(cluster.getSolrClient());\n      cluster.waitForActiveCollection(COLLECTION_NAME, 2, 2);\n\n      String tmpFileLoc = new File(cluster.getBaseDir().toFile().getAbsolutePath() +\n          File.separator).getPath();\n\n      UpdateRequest ur = new UpdateRequest();\n      ur.setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true);\n      int docCount = 1000;\n\n      for (int i = 0; i < docCount; i++) {\n        ur.add(\"id\", String.valueOf(i), \"desc_s\", TestUtil.randomSimpleString(random(), 10, 50));\n      }\n      cluster.getSolrClient().request(ur, COLLECTION_NAME);\n\n      QueryResponse qr = cluster.getSolrClient().query(COLLECTION_NAME, new SolrQuery(\"*:*\").setRows(0));\n      assertEquals(docCount, qr.getResults().getNumFound());\n\n      String url = cluster.getRandomJetty(random()).getBaseUrl() + \"/\" + COLLECTION_NAME;\n\n\n      ExportTool.Info info = new ExportTool.MultiThreadedRunner(url);\n      String absolutePath = tmpFileLoc + COLLECTION_NAME + random().nextInt(100000) + \".json\";\n      info.setOutFormat(absolutePath, \"jsonl\");\n      info.setLimit(\"200\");\n      info.fields = \"id,desc_s\";\n      info.exportDocs();\n\n      assertJsonDocsCount(info, 200);\n\n      info = new ExportTool.MultiThreadedRunner(url);\n      absolutePath = tmpFileLoc + COLLECTION_NAME + random().nextInt(100000) + \".json\";\n      info.setOutFormat(absolutePath, \"jsonl\");\n      info.setLimit(\"-1\");\n      info.fields = \"id,desc_s\";\n      info.exportDocs();\n\n      assertJsonDocsCount(info, 1000);\n\n      info = new ExportTool.MultiThreadedRunner(url);\n      absolutePath = tmpFileLoc + COLLECTION_NAME + random().nextInt(100000) + \".javabin\";\n      info.setOutFormat(absolutePath, \"javabin\");\n      info.setLimit(\"200\");\n      info.fields = \"id,desc_s\";\n      info.exportDocs();\n\n      assertJavabinDocsCount(info, 200);\n\n      info = new ExportTool.MultiThreadedRunner(url);\n      absolutePath = tmpFileLoc + COLLECTION_NAME + random().nextInt(100000) + \".javabin\";\n      info.setOutFormat(absolutePath, \"javabin\");\n      info.setLimit(\"-1\");\n      info.fields = \"id,desc_s\";\n      info.exportDocs();\n      assertJavabinDocsCount(info, 1000);\n\n    } finally {\n      cluster.shutdown();\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":3,"author":"jimczi","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/util/TestExportTool#testBasic().mjava","pathOld":"solr/core/src/test/org/apache/solr/util/TestExportTool#testBasic().mjava","sourceNew":"  public void testBasic() throws Exception {\n    String COLLECTION_NAME = \"globalLoaderColl\";\n    configureCluster(4)\n        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n        .configure();\n\n    try {\n      CollectionAdminRequest\n          .createCollection(COLLECTION_NAME, \"conf\", 2, 1)\n          .setMaxShardsPerNode(100)\n          .process(cluster.getSolrClient());\n      cluster.waitForActiveCollection(COLLECTION_NAME, 2, 2);\n\n      String tmpFileLoc = new File(cluster.getBaseDir().toFile().getAbsolutePath() +\n          File.separator).getPath();\n\n      UpdateRequest ur = new UpdateRequest();\n      ur.setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true);\n      int docCount = 1000;\n\n      for (int i = 0; i < docCount; i++) {\n        ur.add(\"id\", String.valueOf(i), \"desc_s\", TestUtil.randomSimpleString(random(), 10, 50));\n      }\n      cluster.getSolrClient().request(ur, COLLECTION_NAME);\n\n      QueryResponse qr = cluster.getSolrClient().query(COLLECTION_NAME, new SolrQuery(\"*:*\").setRows(0));\n      assertEquals(docCount, qr.getResults().getNumFound());\n\n      String url = cluster.getRandomJetty(random()).getBaseUrl() + \"/\" + COLLECTION_NAME;\n\n\n      ExportTool.Info info = new ExportTool.MultiThreadedRunner(url);\n      String absolutePath = tmpFileLoc + COLLECTION_NAME + random().nextInt(100000) + \".json\";\n      info.setOutFormat(absolutePath, \"jsonl\");\n      info.setLimit(\"200\");\n      info.fields = \"id,desc_s\";\n      info.exportDocs();\n\n      assertJsonDocsCount(info, 200);\n\n      info = new ExportTool.MultiThreadedRunner(url);\n      absolutePath = tmpFileLoc + COLLECTION_NAME + random().nextInt(100000) + \".json\";\n      info.setOutFormat(absolutePath, \"jsonl\");\n      info.setLimit(\"-1\");\n      info.fields = \"id,desc_s\";\n      info.exportDocs();\n\n      assertJsonDocsCount(info, 1000);\n\n      info = new ExportTool.MultiThreadedRunner(url);\n      absolutePath = tmpFileLoc + COLLECTION_NAME + random().nextInt(100000) + \".javabin\";\n      info.setOutFormat(absolutePath, \"javabin\");\n      info.setLimit(\"200\");\n      info.fields = \"id,desc_s\";\n      info.exportDocs();\n\n      assertJavabinDocsCount(info, 200);\n\n      info = new ExportTool.MultiThreadedRunner(url);\n      absolutePath = tmpFileLoc + COLLECTION_NAME + random().nextInt(100000) + \".javabin\";\n      info.setOutFormat(absolutePath, \"javabin\");\n      info.setLimit(\"-1\");\n      info.fields = \"id,desc_s\";\n      info.exportDocs();\n      assertJavabinDocsCount(info, 1000);\n\n    } finally {\n      cluster.shutdown();\n\n    }\n  }\n\n","sourceOld":"  public void testBasic() throws Exception {\n    String COLLECTION_NAME = \"globalLoaderColl\";\n    MiniSolrCloudCluster cluster = configureCluster(4)\n        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n        .configure();\n\n    try {\n      CollectionAdminRequest\n          .createCollection(COLLECTION_NAME, \"conf\", 2, 1)\n          .setMaxShardsPerNode(100)\n          .process(cluster.getSolrClient());\n      cluster.waitForActiveCollection(COLLECTION_NAME, 2, 2);\n\n      String tmpFileLoc = new File(cluster.getBaseDir().toFile().getAbsolutePath() +\n          File.separator).getPath();\n\n      UpdateRequest ur = new UpdateRequest();\n      ur.setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true);\n      int docCount = 1000;\n\n      for (int i = 0; i < docCount; i++) {\n        ur.add(\"id\", String.valueOf(i), \"desc_s\", TestUtil.randomSimpleString(random(), 10, 50));\n      }\n      cluster.getSolrClient().request(ur, COLLECTION_NAME);\n\n      QueryResponse qr = cluster.getSolrClient().query(COLLECTION_NAME, new SolrQuery(\"*:*\").setRows(0));\n      assertEquals(docCount, qr.getResults().getNumFound());\n\n      String url = cluster.getRandomJetty(random()).getBaseUrl() + \"/\" + COLLECTION_NAME;\n\n\n      ExportTool.Info info = new ExportTool.MultiThreadedRunner(url);\n      String absolutePath = tmpFileLoc + COLLECTION_NAME + random().nextInt(100000) + \".json\";\n      info.setOutFormat(absolutePath, \"jsonl\");\n      info.setLimit(\"200\");\n      info.fields = \"id,desc_s\";\n      info.exportDocs();\n\n      assertJsonDocsCount(info, 200);\n\n      info = new ExportTool.MultiThreadedRunner(url);\n      absolutePath = tmpFileLoc + COLLECTION_NAME + random().nextInt(100000) + \".json\";\n      info.setOutFormat(absolutePath, \"jsonl\");\n      info.setLimit(\"-1\");\n      info.fields = \"id,desc_s\";\n      info.exportDocs();\n\n      assertJsonDocsCount(info, 1000);\n\n      info = new ExportTool.MultiThreadedRunner(url);\n      absolutePath = tmpFileLoc + COLLECTION_NAME + random().nextInt(100000) + \".javabin\";\n      info.setOutFormat(absolutePath, \"javabin\");\n      info.setLimit(\"200\");\n      info.fields = \"id,desc_s\";\n      info.exportDocs();\n\n      assertJavabinDocsCount(info, 200);\n\n      info = new ExportTool.MultiThreadedRunner(url);\n      absolutePath = tmpFileLoc + COLLECTION_NAME + random().nextInt(100000) + \".javabin\";\n      info.setOutFormat(absolutePath, \"javabin\");\n      info.setLimit(\"-1\");\n      info.fields = \"id,desc_s\";\n      info.exportDocs();\n      assertJavabinDocsCount(info, 1000);\n\n    } finally {\n      cluster.shutdown();\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b3fba3dcc5d2c31b4652c425cc1cbada9dff4a51","date":1582784911,"type":3,"author":"noble","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/TestExportTool#testBasic().mjava","pathOld":"solr/core/src/test/org/apache/solr/util/TestExportTool#testBasic().mjava","sourceNew":"  public void testBasic() throws Exception {\n    String COLLECTION_NAME = \"globalLoaderColl\";\n    configureCluster(4)\n        .addConfig(\"conf\", configset(\"cloud-dynamic\"))\n        .configure();\n\n    try {\n      CollectionAdminRequest\n          .createCollection(COLLECTION_NAME, \"conf\", 2, 1)\n          .setMaxShardsPerNode(100)\n          .process(cluster.getSolrClient());\n      cluster.waitForActiveCollection(COLLECTION_NAME, 2, 2);\n\n      String tmpFileLoc = new File(cluster.getBaseDir().toFile().getAbsolutePath() +\n          File.separator).getPath();\n\n      UpdateRequest ur = new UpdateRequest();\n      ur.setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true);\n      int docCount = 1000;\n\n      for (int i = 0; i < docCount; i++) {\n        ur.add(\"id\", String.valueOf(i),\n            \"desc_s\", TestUtil.randomSimpleString(random(), 10, 50) ,\n            \"a_dt\", \"2019-09-30T05:58:03Z\");\n      }\n      cluster.getSolrClient().request(ur, COLLECTION_NAME);\n\n      QueryResponse qr = cluster.getSolrClient().query(COLLECTION_NAME, new SolrQuery(\"*:*\").setRows(0));\n      assertEquals(docCount, qr.getResults().getNumFound());\n\n      String url = cluster.getRandomJetty(random()).getBaseUrl() + \"/\" + COLLECTION_NAME;\n\n\n      ExportTool.Info info = new ExportTool.MultiThreadedRunner(url);\n      String absolutePath = tmpFileLoc + COLLECTION_NAME + random().nextInt(100000) + \".json\";\n      info.setOutFormat(absolutePath, \"jsonl\");\n      info.setLimit(\"200\");\n      info.fields = \"id,desc_s,a_dt\";\n      info.exportDocs();\n\n      assertJsonDocsCount(info, 200, record -> \"2019-09-30T05:58:03Z\".equals(record.get(\"a_dt\")));\n\n      info = new ExportTool.MultiThreadedRunner(url);\n      absolutePath = tmpFileLoc + COLLECTION_NAME + random().nextInt(100000) + \".json\";\n      info.setOutFormat(absolutePath, \"jsonl\");\n      info.setLimit(\"-1\");\n      info.fields = \"id,desc_s\";\n      info.exportDocs();\n\n      assertJsonDocsCount(info, 1000,null);\n\n      info = new ExportTool.MultiThreadedRunner(url);\n      absolutePath = tmpFileLoc + COLLECTION_NAME + random().nextInt(100000) + \".javabin\";\n      info.setOutFormat(absolutePath, \"javabin\");\n      info.setLimit(\"200\");\n      info.fields = \"id,desc_s\";\n      info.exportDocs();\n\n      assertJavabinDocsCount(info, 200);\n\n      info = new ExportTool.MultiThreadedRunner(url);\n      absolutePath = tmpFileLoc + COLLECTION_NAME + random().nextInt(100000) + \".javabin\";\n      info.setOutFormat(absolutePath, \"javabin\");\n      info.setLimit(\"-1\");\n      info.fields = \"id,desc_s\";\n      info.exportDocs();\n      assertJavabinDocsCount(info, 1000);\n\n    } finally {\n      cluster.shutdown();\n\n    }\n  }\n\n","sourceOld":"  public void testBasic() throws Exception {\n    String COLLECTION_NAME = \"globalLoaderColl\";\n    configureCluster(4)\n        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n        .configure();\n\n    try {\n      CollectionAdminRequest\n          .createCollection(COLLECTION_NAME, \"conf\", 2, 1)\n          .setMaxShardsPerNode(100)\n          .process(cluster.getSolrClient());\n      cluster.waitForActiveCollection(COLLECTION_NAME, 2, 2);\n\n      String tmpFileLoc = new File(cluster.getBaseDir().toFile().getAbsolutePath() +\n          File.separator).getPath();\n\n      UpdateRequest ur = new UpdateRequest();\n      ur.setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true);\n      int docCount = 1000;\n\n      for (int i = 0; i < docCount; i++) {\n        ur.add(\"id\", String.valueOf(i), \"desc_s\", TestUtil.randomSimpleString(random(), 10, 50));\n      }\n      cluster.getSolrClient().request(ur, COLLECTION_NAME);\n\n      QueryResponse qr = cluster.getSolrClient().query(COLLECTION_NAME, new SolrQuery(\"*:*\").setRows(0));\n      assertEquals(docCount, qr.getResults().getNumFound());\n\n      String url = cluster.getRandomJetty(random()).getBaseUrl() + \"/\" + COLLECTION_NAME;\n\n\n      ExportTool.Info info = new ExportTool.MultiThreadedRunner(url);\n      String absolutePath = tmpFileLoc + COLLECTION_NAME + random().nextInt(100000) + \".json\";\n      info.setOutFormat(absolutePath, \"jsonl\");\n      info.setLimit(\"200\");\n      info.fields = \"id,desc_s\";\n      info.exportDocs();\n\n      assertJsonDocsCount(info, 200);\n\n      info = new ExportTool.MultiThreadedRunner(url);\n      absolutePath = tmpFileLoc + COLLECTION_NAME + random().nextInt(100000) + \".json\";\n      info.setOutFormat(absolutePath, \"jsonl\");\n      info.setLimit(\"-1\");\n      info.fields = \"id,desc_s\";\n      info.exportDocs();\n\n      assertJsonDocsCount(info, 1000);\n\n      info = new ExportTool.MultiThreadedRunner(url);\n      absolutePath = tmpFileLoc + COLLECTION_NAME + random().nextInt(100000) + \".javabin\";\n      info.setOutFormat(absolutePath, \"javabin\");\n      info.setLimit(\"200\");\n      info.fields = \"id,desc_s\";\n      info.exportDocs();\n\n      assertJavabinDocsCount(info, 200);\n\n      info = new ExportTool.MultiThreadedRunner(url);\n      absolutePath = tmpFileLoc + COLLECTION_NAME + random().nextInt(100000) + \".javabin\";\n      info.setOutFormat(absolutePath, \"javabin\");\n      info.setLimit(\"-1\");\n      info.fields = \"id,desc_s\";\n      info.exportDocs();\n      assertJavabinDocsCount(info, 1000);\n\n    } finally {\n      cluster.shutdown();\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e","date":1594223844,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/TestExportTool#testBasic().mjava","pathOld":"solr/core/src/test/org/apache/solr/util/TestExportTool#testBasic().mjava","sourceNew":"  public void testBasic() throws Exception {\n    String COLLECTION_NAME = \"globalLoaderColl\";\n    configureCluster(4)\n        .addConfig(\"conf\", configset(\"cloud-dynamic\"))\n        .configure();\n\n    try {\n      CollectionAdminRequest\n          .createCollection(COLLECTION_NAME, \"conf\", 2, 1)\n          .process(cluster.getSolrClient());\n      cluster.waitForActiveCollection(COLLECTION_NAME, 2, 2);\n\n      String tmpFileLoc = new File(cluster.getBaseDir().toFile().getAbsolutePath() +\n          File.separator).getPath();\n\n      UpdateRequest ur = new UpdateRequest();\n      ur.setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true);\n      int docCount = 1000;\n\n      for (int i = 0; i < docCount; i++) {\n        ur.add(\"id\", String.valueOf(i),\n            \"desc_s\", TestUtil.randomSimpleString(random(), 10, 50) ,\n            \"a_dt\", \"2019-09-30T05:58:03Z\");\n      }\n      cluster.getSolrClient().request(ur, COLLECTION_NAME);\n\n      QueryResponse qr = cluster.getSolrClient().query(COLLECTION_NAME, new SolrQuery(\"*:*\").setRows(0));\n      assertEquals(docCount, qr.getResults().getNumFound());\n\n      String url = cluster.getRandomJetty(random()).getBaseUrl() + \"/\" + COLLECTION_NAME;\n\n\n      ExportTool.Info info = new ExportTool.MultiThreadedRunner(url);\n      String absolutePath = tmpFileLoc + COLLECTION_NAME + random().nextInt(100000) + \".json\";\n      info.setOutFormat(absolutePath, \"jsonl\");\n      info.setLimit(\"200\");\n      info.fields = \"id,desc_s,a_dt\";\n      info.exportDocs();\n\n      assertJsonDocsCount(info, 200, record -> \"2019-09-30T05:58:03Z\".equals(record.get(\"a_dt\")));\n\n      info = new ExportTool.MultiThreadedRunner(url);\n      absolutePath = tmpFileLoc + COLLECTION_NAME + random().nextInt(100000) + \".json\";\n      info.setOutFormat(absolutePath, \"jsonl\");\n      info.setLimit(\"-1\");\n      info.fields = \"id,desc_s\";\n      info.exportDocs();\n\n      assertJsonDocsCount(info, 1000,null);\n\n      info = new ExportTool.MultiThreadedRunner(url);\n      absolutePath = tmpFileLoc + COLLECTION_NAME + random().nextInt(100000) + \".javabin\";\n      info.setOutFormat(absolutePath, \"javabin\");\n      info.setLimit(\"200\");\n      info.fields = \"id,desc_s\";\n      info.exportDocs();\n\n      assertJavabinDocsCount(info, 200);\n\n      info = new ExportTool.MultiThreadedRunner(url);\n      absolutePath = tmpFileLoc + COLLECTION_NAME + random().nextInt(100000) + \".javabin\";\n      info.setOutFormat(absolutePath, \"javabin\");\n      info.setLimit(\"-1\");\n      info.fields = \"id,desc_s\";\n      info.exportDocs();\n      assertJavabinDocsCount(info, 1000);\n\n    } finally {\n      cluster.shutdown();\n\n    }\n  }\n\n","sourceOld":"  public void testBasic() throws Exception {\n    String COLLECTION_NAME = \"globalLoaderColl\";\n    configureCluster(4)\n        .addConfig(\"conf\", configset(\"cloud-dynamic\"))\n        .configure();\n\n    try {\n      CollectionAdminRequest\n          .createCollection(COLLECTION_NAME, \"conf\", 2, 1)\n          .setMaxShardsPerNode(100)\n          .process(cluster.getSolrClient());\n      cluster.waitForActiveCollection(COLLECTION_NAME, 2, 2);\n\n      String tmpFileLoc = new File(cluster.getBaseDir().toFile().getAbsolutePath() +\n          File.separator).getPath();\n\n      UpdateRequest ur = new UpdateRequest();\n      ur.setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true);\n      int docCount = 1000;\n\n      for (int i = 0; i < docCount; i++) {\n        ur.add(\"id\", String.valueOf(i),\n            \"desc_s\", TestUtil.randomSimpleString(random(), 10, 50) ,\n            \"a_dt\", \"2019-09-30T05:58:03Z\");\n      }\n      cluster.getSolrClient().request(ur, COLLECTION_NAME);\n\n      QueryResponse qr = cluster.getSolrClient().query(COLLECTION_NAME, new SolrQuery(\"*:*\").setRows(0));\n      assertEquals(docCount, qr.getResults().getNumFound());\n\n      String url = cluster.getRandomJetty(random()).getBaseUrl() + \"/\" + COLLECTION_NAME;\n\n\n      ExportTool.Info info = new ExportTool.MultiThreadedRunner(url);\n      String absolutePath = tmpFileLoc + COLLECTION_NAME + random().nextInt(100000) + \".json\";\n      info.setOutFormat(absolutePath, \"jsonl\");\n      info.setLimit(\"200\");\n      info.fields = \"id,desc_s,a_dt\";\n      info.exportDocs();\n\n      assertJsonDocsCount(info, 200, record -> \"2019-09-30T05:58:03Z\".equals(record.get(\"a_dt\")));\n\n      info = new ExportTool.MultiThreadedRunner(url);\n      absolutePath = tmpFileLoc + COLLECTION_NAME + random().nextInt(100000) + \".json\";\n      info.setOutFormat(absolutePath, \"jsonl\");\n      info.setLimit(\"-1\");\n      info.fields = \"id,desc_s\";\n      info.exportDocs();\n\n      assertJsonDocsCount(info, 1000,null);\n\n      info = new ExportTool.MultiThreadedRunner(url);\n      absolutePath = tmpFileLoc + COLLECTION_NAME + random().nextInt(100000) + \".javabin\";\n      info.setOutFormat(absolutePath, \"javabin\");\n      info.setLimit(\"200\");\n      info.fields = \"id,desc_s\";\n      info.exportDocs();\n\n      assertJavabinDocsCount(info, 200);\n\n      info = new ExportTool.MultiThreadedRunner(url);\n      absolutePath = tmpFileLoc + COLLECTION_NAME + random().nextInt(100000) + \".javabin\";\n      info.setOutFormat(absolutePath, \"javabin\");\n      info.setLimit(\"-1\");\n      info.fields = \"id,desc_s\";\n      info.exportDocs();\n      assertJavabinDocsCount(info, 1000);\n\n    } finally {\n      cluster.shutdown();\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b373db031e25f03ad6783efcfb77809dcd963565":["7d383e3d651e589111e224f1cde89017eedb32ad"],"b3fba3dcc5d2c31b4652c425cc1cbada9dff4a51":["c44cc06c26e456fe9c215072b79fce30babe3975"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7d383e3d651e589111e224f1cde89017eedb32ad":["b26d91db0d1d754936add788fa3a21acaadc9685"],"c44cc06c26e456fe9c215072b79fce30babe3975":["b373db031e25f03ad6783efcfb77809dcd963565"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["b3fba3dcc5d2c31b4652c425cc1cbada9dff4a51"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"],"b26d91db0d1d754936add788fa3a21acaadc9685":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b0b597c65628ca9e73913a07e81691f8229bae35":["b373db031e25f03ad6783efcfb77809dcd963565","c44cc06c26e456fe9c215072b79fce30babe3975"]},"commit2Childs":{"b373db031e25f03ad6783efcfb77809dcd963565":["c44cc06c26e456fe9c215072b79fce30babe3975","b0b597c65628ca9e73913a07e81691f8229bae35"],"b3fba3dcc5d2c31b4652c425cc1cbada9dff4a51":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b26d91db0d1d754936add788fa3a21acaadc9685"],"7d383e3d651e589111e224f1cde89017eedb32ad":["b373db031e25f03ad6783efcfb77809dcd963565"],"c44cc06c26e456fe9c215072b79fce30babe3975":["b3fba3dcc5d2c31b4652c425cc1cbada9dff4a51","b0b597c65628ca9e73913a07e81691f8229bae35"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b26d91db0d1d754936add788fa3a21acaadc9685":["7d383e3d651e589111e224f1cde89017eedb32ad"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}