{"path":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher.SearcherCallableWithSort#call().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher.SearcherCallableWithSort#call().mjava","pathOld":"lucene/src/java/org/apache/lucene/search/IndexSearcher.SearcherCallableWithSort#call().mjava","sourceNew":"    public TopFieldDocs call() throws IOException {\n      assert slice.leaves.length == 1;\n      final TopFieldDocs docs = searcher.search (slice.leaves, weight, nDocs, sort, true);\n      lock.lock();\n      try {\n        final int base = slice.leaves[0].docBase;\n        hq.setNextReader(slice.leaves[0]);\n        hq.setScorer(fakeScorer);\n        for(ScoreDoc scoreDoc : docs.scoreDocs) {\n          fakeScorer.doc = scoreDoc.doc - base;\n          fakeScorer.score = scoreDoc.score;\n          hq.collect(scoreDoc.doc-base);\n        }\n      } finally {\n        lock.unlock();\n      }\n      return docs;\n    }\n\n","sourceOld":"    public TopFieldDocs call() throws IOException {\n      assert slice.leaves.length == 1;\n      final TopFieldDocs docs = searcher.search (slice.leaves, weight, nDocs, sort, true);\n      lock.lock();\n      try {\n        final int base = slice.leaves[0].docBase;\n        hq.setNextReader(slice.leaves[0]);\n        hq.setScorer(fakeScorer);\n        for(ScoreDoc scoreDoc : docs.scoreDocs) {\n          fakeScorer.doc = scoreDoc.doc - base;\n          fakeScorer.score = scoreDoc.score;\n          hq.collect(scoreDoc.doc-base);\n        }\n      } finally {\n        lock.unlock();\n      }\n      return docs;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb02351ae2b114dd41585916d1e35fb2cff98fb0","date":1337171337,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher.SearcherCallableWithSort#call().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher.SearcherCallableWithSort#call().mjava","sourceNew":"    public TopFieldDocs call() throws IOException {\n      assert slice.leaves.length == 1;\n      final TopFieldDocs docs = searcher.search(slice.leaves, weight, after, nDocs, sort, true, doDocScores, doMaxScore);\n      lock.lock();\n      try {\n        final int base = slice.leaves[0].docBase;\n        hq.setNextReader(slice.leaves[0]);\n        hq.setScorer(fakeScorer);\n        for(ScoreDoc scoreDoc : docs.scoreDocs) {\n          fakeScorer.doc = scoreDoc.doc - base;\n          fakeScorer.score = scoreDoc.score;\n          hq.collect(scoreDoc.doc-base);\n        }\n\n        // Carry over maxScore from sub:\n        if (doMaxScore && docs.getMaxScore() > hq.maxScore) {\n          hq.maxScore = docs.getMaxScore();\n        }\n      } finally {\n        lock.unlock();\n      }\n      return docs;\n    }\n\n","sourceOld":"    public TopFieldDocs call() throws IOException {\n      assert slice.leaves.length == 1;\n      final TopFieldDocs docs = searcher.search (slice.leaves, weight, nDocs, sort, true);\n      lock.lock();\n      try {\n        final int base = slice.leaves[0].docBase;\n        hq.setNextReader(slice.leaves[0]);\n        hq.setScorer(fakeScorer);\n        for(ScoreDoc scoreDoc : docs.scoreDocs) {\n          fakeScorer.doc = scoreDoc.doc - base;\n          fakeScorer.score = scoreDoc.score;\n          hq.collect(scoreDoc.doc-base);\n        }\n      } finally {\n        lock.unlock();\n      }\n      return docs;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ef0d8a69209261514c5739c770bba706c2308450","date":1337607597,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher.SearcherCallableWithSort#call().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher.SearcherCallableWithSort#call().mjava","sourceNew":"    public TopFieldDocs call() throws IOException {\n      assert slice.leaves.length == 1;\n      final TopFieldDocs docs = searcher.search(slice.leaves, weight, after, nDocs, sort, true, doDocScores, doMaxScore);\n      lock.lock();\n      try {\n        final int base = slice.leaves[0].docBase;\n        hq.setNextReader(slice.leaves[0]);\n        hq.setScorer(fakeScorer);\n        for(ScoreDoc scoreDoc : docs.scoreDocs) {\n          fakeScorer.doc = scoreDoc.doc - base;\n          fakeScorer.score = scoreDoc.score;\n          hq.collect(scoreDoc.doc-base);\n        }\n\n        // Carry over maxScore from sub:\n        if (doMaxScore && docs.getMaxScore() > hq.maxScore) {\n          hq.maxScore = docs.getMaxScore();\n        }\n      } finally {\n        lock.unlock();\n      }\n      return docs;\n    }\n\n","sourceOld":"    public TopFieldDocs call() throws IOException {\n      assert slice.leaves.length == 1;\n      final TopFieldDocs docs = searcher.search (slice.leaves, weight, nDocs, sort, true);\n      lock.lock();\n      try {\n        final int base = slice.leaves[0].docBase;\n        hq.setNextReader(slice.leaves[0]);\n        hq.setScorer(fakeScorer);\n        for(ScoreDoc scoreDoc : docs.scoreDocs) {\n          fakeScorer.doc = scoreDoc.doc - base;\n          fakeScorer.score = scoreDoc.score;\n          hq.collect(scoreDoc.doc-base);\n        }\n      } finally {\n        lock.unlock();\n      }\n      return docs;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c","date":1340090669,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher.SearcherCallableWithSort#call().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher.SearcherCallableWithSort#call().mjava","sourceNew":"    public TopFieldDocs call() throws IOException {\n      assert slice.leaves.length == 1;\n      final TopFieldDocs docs = searcher.search(Arrays.asList(slice.leaves),\n          weight, after, nDocs, sort, true, doDocScores, doMaxScore);\n      lock.lock();\n      try {\n        final AtomicReaderContext ctx = slice.leaves[0];\n        final int base = ctx.docBase;\n        hq.setNextReader(ctx);\n        hq.setScorer(fakeScorer);\n        for(ScoreDoc scoreDoc : docs.scoreDocs) {\n          fakeScorer.doc = scoreDoc.doc - base;\n          fakeScorer.score = scoreDoc.score;\n          hq.collect(scoreDoc.doc-base);\n        }\n\n        // Carry over maxScore from sub:\n        if (doMaxScore && docs.getMaxScore() > hq.maxScore) {\n          hq.maxScore = docs.getMaxScore();\n        }\n      } finally {\n        lock.unlock();\n      }\n      return docs;\n    }\n\n","sourceOld":"    public TopFieldDocs call() throws IOException {\n      assert slice.leaves.length == 1;\n      final TopFieldDocs docs = searcher.search(slice.leaves, weight, after, nDocs, sort, true, doDocScores, doMaxScore);\n      lock.lock();\n      try {\n        final int base = slice.leaves[0].docBase;\n        hq.setNextReader(slice.leaves[0]);\n        hq.setScorer(fakeScorer);\n        for(ScoreDoc scoreDoc : docs.scoreDocs) {\n          fakeScorer.doc = scoreDoc.doc - base;\n          fakeScorer.score = scoreDoc.score;\n          hq.collect(scoreDoc.doc-base);\n        }\n\n        // Carry over maxScore from sub:\n        if (doMaxScore && docs.getMaxScore() > hq.maxScore) {\n          hq.maxScore = docs.getMaxScore();\n        }\n      } finally {\n        lock.unlock();\n      }\n      return docs;\n    }\n\n","bugFix":null,"bugIntro":["1c48d77b092518bb5fe34187680876685b8b9aed"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher.SearcherCallableWithSort#call().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher.SearcherCallableWithSort#call().mjava","sourceNew":"    @Override\n    public TopFieldDocs call() throws IOException {\n      assert slice.leaves.length == 1;\n      final TopFieldDocs docs = searcher.search(Arrays.asList(slice.leaves),\n          weight, after, nDocs, sort, true, doDocScores, doMaxScore);\n      lock.lock();\n      try {\n        final AtomicReaderContext ctx = slice.leaves[0];\n        final int base = ctx.docBase;\n        hq.setNextReader(ctx);\n        hq.setScorer(fakeScorer);\n        for(ScoreDoc scoreDoc : docs.scoreDocs) {\n          fakeScorer.doc = scoreDoc.doc - base;\n          fakeScorer.score = scoreDoc.score;\n          hq.collect(scoreDoc.doc-base);\n        }\n\n        // Carry over maxScore from sub:\n        if (doMaxScore && docs.getMaxScore() > hq.maxScore) {\n          hq.maxScore = docs.getMaxScore();\n        }\n      } finally {\n        lock.unlock();\n      }\n      return docs;\n    }\n\n","sourceOld":"    public TopFieldDocs call() throws IOException {\n      assert slice.leaves.length == 1;\n      final TopFieldDocs docs = searcher.search(Arrays.asList(slice.leaves),\n          weight, after, nDocs, sort, true, doDocScores, doMaxScore);\n      lock.lock();\n      try {\n        final AtomicReaderContext ctx = slice.leaves[0];\n        final int base = ctx.docBase;\n        hq.setNextReader(ctx);\n        hq.setScorer(fakeScorer);\n        for(ScoreDoc scoreDoc : docs.scoreDocs) {\n          fakeScorer.doc = scoreDoc.doc - base;\n          fakeScorer.score = scoreDoc.score;\n          hq.collect(scoreDoc.doc-base);\n        }\n\n        // Carry over maxScore from sub:\n        if (doMaxScore && docs.getMaxScore() > hq.maxScore) {\n          hq.maxScore = docs.getMaxScore();\n        }\n      } finally {\n        lock.unlock();\n      }\n      return docs;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher.SearcherCallableWithSort#call().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher.SearcherCallableWithSort#call().mjava","sourceNew":"    @Override\n    public TopFieldDocs call() throws IOException {\n      assert slice.leaves.length == 1;\n      final TopFieldDocs docs = searcher.search(Arrays.asList(slice.leaves),\n          weight, after, nDocs, sort, true, doDocScores, doMaxScore);\n      lock.lock();\n      try {\n        final AtomicReaderContext ctx = slice.leaves[0];\n        final int base = ctx.docBase;\n        hq.setNextReader(ctx);\n        hq.setScorer(fakeScorer);\n        for(ScoreDoc scoreDoc : docs.scoreDocs) {\n          fakeScorer.doc = scoreDoc.doc - base;\n          fakeScorer.score = scoreDoc.score;\n          hq.collect(scoreDoc.doc-base);\n        }\n\n        // Carry over maxScore from sub:\n        if (doMaxScore && docs.getMaxScore() > hq.maxScore) {\n          hq.maxScore = docs.getMaxScore();\n        }\n      } finally {\n        lock.unlock();\n      }\n      return docs;\n    }\n\n","sourceOld":"    public TopFieldDocs call() throws IOException {\n      assert slice.leaves.length == 1;\n      final TopFieldDocs docs = searcher.search(Arrays.asList(slice.leaves),\n          weight, after, nDocs, sort, true, doDocScores, doMaxScore);\n      lock.lock();\n      try {\n        final AtomicReaderContext ctx = slice.leaves[0];\n        final int base = ctx.docBase;\n        hq.setNextReader(ctx);\n        hq.setScorer(fakeScorer);\n        for(ScoreDoc scoreDoc : docs.scoreDocs) {\n          fakeScorer.doc = scoreDoc.doc - base;\n          fakeScorer.score = scoreDoc.score;\n          hq.collect(scoreDoc.doc-base);\n        }\n\n        // Carry over maxScore from sub:\n        if (doMaxScore && docs.getMaxScore() > hq.maxScore) {\n          hq.maxScore = docs.getMaxScore();\n        }\n      } finally {\n        lock.unlock();\n      }\n      return docs;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1c48d77b092518bb5fe34187680876685b8b9aed","date":1365629412,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher.SearcherCallableWithSort#call().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher.SearcherCallableWithSort#call().mjava","sourceNew":"    @Override\n    public TopFieldDocs call() throws IOException {\n      assert slice.leaves.length == 1;\n      final TopFieldDocs docs = searcher.search(Arrays.asList(slice.leaves),\n          weight, after, nDocs, sort, true, doDocScores || sort.needsScores(), doMaxScore);\n      lock.lock();\n      try {\n        final AtomicReaderContext ctx = slice.leaves[0];\n        final int base = ctx.docBase;\n        hq.setNextReader(ctx);\n        hq.setScorer(fakeScorer);\n        for(ScoreDoc scoreDoc : docs.scoreDocs) {\n          fakeScorer.doc = scoreDoc.doc - base;\n          fakeScorer.score = scoreDoc.score;\n          hq.collect(scoreDoc.doc-base);\n        }\n\n        // Carry over maxScore from sub:\n        if (doMaxScore && docs.getMaxScore() > hq.maxScore) {\n          hq.maxScore = docs.getMaxScore();\n        }\n      } finally {\n        lock.unlock();\n      }\n      return docs;\n    }\n\n","sourceOld":"    @Override\n    public TopFieldDocs call() throws IOException {\n      assert slice.leaves.length == 1;\n      final TopFieldDocs docs = searcher.search(Arrays.asList(slice.leaves),\n          weight, after, nDocs, sort, true, doDocScores, doMaxScore);\n      lock.lock();\n      try {\n        final AtomicReaderContext ctx = slice.leaves[0];\n        final int base = ctx.docBase;\n        hq.setNextReader(ctx);\n        hq.setScorer(fakeScorer);\n        for(ScoreDoc scoreDoc : docs.scoreDocs) {\n          fakeScorer.doc = scoreDoc.doc - base;\n          fakeScorer.score = scoreDoc.score;\n          hq.collect(scoreDoc.doc-base);\n        }\n\n        // Carry over maxScore from sub:\n        if (doMaxScore && docs.getMaxScore() > hq.maxScore) {\n          hq.maxScore = docs.getMaxScore();\n        }\n      } finally {\n        lock.unlock();\n      }\n      return docs;\n    }\n\n","bugFix":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae73da626f97850c922c42736f808d0378e165f0","date":1396625460,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher.SearcherCallableWithSort#call().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher.SearcherCallableWithSort#call().mjava","sourceNew":"    @Override\n    public TopFieldDocs call() throws IOException {\n      assert slice.leaves.length == 1;\n      final TopFieldDocs docs = searcher.search(Arrays.asList(slice.leaves),\n          weight, after, nDocs, sort, true, doDocScores || sort.needsScores(), doMaxScore);\n      lock.lock();\n      try {\n        final AtomicReaderContext ctx = slice.leaves[0];\n        final int base = ctx.docBase;\n        final LeafCollector collector = hq.getLeafCollector(ctx);\n        collector.setScorer(fakeScorer);\n        for(ScoreDoc scoreDoc : docs.scoreDocs) {\n          fakeScorer.doc = scoreDoc.doc - base;\n          fakeScorer.score = scoreDoc.score;\n          collector.collect(scoreDoc.doc-base);\n        }\n\n        // Carry over maxScore from sub:\n        if (doMaxScore && docs.getMaxScore() > hq.maxScore) {\n          hq.maxScore = docs.getMaxScore();\n        }\n      } finally {\n        lock.unlock();\n      }\n      return docs;\n    }\n\n","sourceOld":"    @Override\n    public TopFieldDocs call() throws IOException {\n      assert slice.leaves.length == 1;\n      final TopFieldDocs docs = searcher.search(Arrays.asList(slice.leaves),\n          weight, after, nDocs, sort, true, doDocScores || sort.needsScores(), doMaxScore);\n      lock.lock();\n      try {\n        final AtomicReaderContext ctx = slice.leaves[0];\n        final int base = ctx.docBase;\n        hq.setNextReader(ctx);\n        hq.setScorer(fakeScorer);\n        for(ScoreDoc scoreDoc : docs.scoreDocs) {\n          fakeScorer.doc = scoreDoc.doc - base;\n          fakeScorer.score = scoreDoc.score;\n          hq.collect(scoreDoc.doc-base);\n        }\n\n        // Carry over maxScore from sub:\n        if (doMaxScore && docs.getMaxScore() > hq.maxScore) {\n          hq.maxScore = docs.getMaxScore();\n        }\n      } finally {\n        lock.unlock();\n      }\n      return docs;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15e323346eac5e4685c0a9f2df85eb96b4239bbb","date":1396688577,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher.SearcherCallableWithSort#call().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher.SearcherCallableWithSort#call().mjava","sourceNew":"    @Override\n    public TopFieldDocs call() throws IOException {\n      assert slice.leaves.length == 1;\n      final TopFieldDocs docs = searcher.search(Arrays.asList(slice.leaves),\n          weight, after, nDocs, sort, true, doDocScores || sort.needsScores(), doMaxScore);\n      lock.lock();\n      try {\n        final AtomicReaderContext ctx = slice.leaves[0];\n        final int base = ctx.docBase;\n        final LeafCollector collector = hq.getLeafCollector(ctx);\n        collector.setScorer(fakeScorer);\n        for(ScoreDoc scoreDoc : docs.scoreDocs) {\n          fakeScorer.doc = scoreDoc.doc - base;\n          fakeScorer.score = scoreDoc.score;\n          collector.collect(scoreDoc.doc-base);\n        }\n\n        // Carry over maxScore from sub:\n        if (doMaxScore && docs.getMaxScore() > hq.maxScore) {\n          hq.maxScore = docs.getMaxScore();\n        }\n      } finally {\n        lock.unlock();\n      }\n      return docs;\n    }\n\n","sourceOld":"    @Override\n    public TopFieldDocs call() throws IOException {\n      assert slice.leaves.length == 1;\n      final TopFieldDocs docs = searcher.search(Arrays.asList(slice.leaves),\n          weight, after, nDocs, sort, true, doDocScores || sort.needsScores(), doMaxScore);\n      lock.lock();\n      try {\n        final AtomicReaderContext ctx = slice.leaves[0];\n        final int base = ctx.docBase;\n        hq.setNextReader(ctx);\n        hq.setScorer(fakeScorer);\n        for(ScoreDoc scoreDoc : docs.scoreDocs) {\n          fakeScorer.doc = scoreDoc.doc - base;\n          fakeScorer.score = scoreDoc.score;\n          hq.collect(scoreDoc.doc-base);\n        }\n\n        // Carry over maxScore from sub:\n        if (doMaxScore && docs.getMaxScore() > hq.maxScore) {\n          hq.maxScore = docs.getMaxScore();\n        }\n      } finally {\n        lock.unlock();\n      }\n      return docs;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher.SearcherCallableWithSort#call().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher.SearcherCallableWithSort#call().mjava","sourceNew":"    @Override\n    public TopFieldDocs call() throws IOException {\n      assert slice.leaves.length == 1;\n      final TopFieldDocs docs = searcher.search(Arrays.asList(slice.leaves),\n          weight, after, nDocs, sort, true, doDocScores || sort.needsScores(), doMaxScore);\n      lock.lock();\n      try {\n        final LeafReaderContext ctx = slice.leaves[0];\n        final int base = ctx.docBase;\n        final LeafCollector collector = hq.getLeafCollector(ctx);\n        collector.setScorer(fakeScorer);\n        for(ScoreDoc scoreDoc : docs.scoreDocs) {\n          fakeScorer.doc = scoreDoc.doc - base;\n          fakeScorer.score = scoreDoc.score;\n          collector.collect(scoreDoc.doc-base);\n        }\n\n        // Carry over maxScore from sub:\n        if (doMaxScore && docs.getMaxScore() > hq.maxScore) {\n          hq.maxScore = docs.getMaxScore();\n        }\n      } finally {\n        lock.unlock();\n      }\n      return docs;\n    }\n\n","sourceOld":"    @Override\n    public TopFieldDocs call() throws IOException {\n      assert slice.leaves.length == 1;\n      final TopFieldDocs docs = searcher.search(Arrays.asList(slice.leaves),\n          weight, after, nDocs, sort, true, doDocScores || sort.needsScores(), doMaxScore);\n      lock.lock();\n      try {\n        final AtomicReaderContext ctx = slice.leaves[0];\n        final int base = ctx.docBase;\n        final LeafCollector collector = hq.getLeafCollector(ctx);\n        collector.setScorer(fakeScorer);\n        for(ScoreDoc scoreDoc : docs.scoreDocs) {\n          fakeScorer.doc = scoreDoc.doc - base;\n          fakeScorer.score = scoreDoc.score;\n          collector.collect(scoreDoc.doc-base);\n        }\n\n        // Carry over maxScore from sub:\n        if (doMaxScore && docs.getMaxScore() > hq.maxScore) {\n          hq.maxScore = docs.getMaxScore();\n        }\n      } finally {\n        lock.unlock();\n      }\n      return docs;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"023aa7229ae194442d2c4f36a9aaea1588760416","date":1421349700,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher.SearcherCallableWithSort#call().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher.SearcherCallableWithSort#call().mjava","sourceNew":"    @Override\n    public TopFieldDocs call() throws IOException {\n      assert slice.leaves.length == 1;\n      return searcher.search(Arrays.asList(slice.leaves),\n          weight, after, nDocs, sort, true, doDocScores || sort.needsScores(), doMaxScore);\n    }\n\n","sourceOld":"    @Override\n    public TopFieldDocs call() throws IOException {\n      assert slice.leaves.length == 1;\n      final TopFieldDocs docs = searcher.search(Arrays.asList(slice.leaves),\n          weight, after, nDocs, sort, true, doDocScores || sort.needsScores(), doMaxScore);\n      lock.lock();\n      try {\n        final LeafReaderContext ctx = slice.leaves[0];\n        final int base = ctx.docBase;\n        final LeafCollector collector = hq.getLeafCollector(ctx);\n        collector.setScorer(fakeScorer);\n        for(ScoreDoc scoreDoc : docs.scoreDocs) {\n          fakeScorer.doc = scoreDoc.doc - base;\n          fakeScorer.score = scoreDoc.score;\n          collector.collect(scoreDoc.doc-base);\n        }\n\n        // Carry over maxScore from sub:\n        if (doMaxScore && docs.getMaxScore() > hq.maxScore) {\n          hq.maxScore = docs.getMaxScore();\n        }\n      } finally {\n        lock.unlock();\n      }\n      return docs;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4353719ad1728723cc96856c01e546290603410c","date":1421418249,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher.SearcherCallableWithSort#call().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher.SearcherCallableWithSort#call().mjava","sourceNew":"    @Override\n    public TopFieldDocs call() throws IOException {\n      assert slice.leaves.length == 1;\n      return searcher.search(Arrays.asList(slice.leaves),\n          weight, after, nDocs, sort, true, doDocScores, doMaxScore);\n    }\n\n","sourceOld":"    @Override\n    public TopFieldDocs call() throws IOException {\n      assert slice.leaves.length == 1;\n      return searcher.search(Arrays.asList(slice.leaves),\n          weight, after, nDocs, sort, true, doDocScores || sort.needsScores(), doMaxScore);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb17639909a369c1e64866842e5c213440acc17e","date":1423238093,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher.SearcherCallableWithSort#call().mjava","sourceNew":null,"sourceOld":"    @Override\n    public TopFieldDocs call() throws IOException {\n      assert slice.leaves.length == 1;\n      return searcher.search(Arrays.asList(slice.leaves),\n          weight, after, nDocs, sort, true, doDocScores, doMaxScore);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c","7530de27b87b961b51f01bd1299b7004d46e8823"],"fb17639909a369c1e64866842e5c213440acc17e":["4353719ad1728723cc96856c01e546290603410c"],"4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c":["fb02351ae2b114dd41585916d1e35fb2cff98fb0"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["ae73da626f97850c922c42736f808d0378e165f0"],"fb02351ae2b114dd41585916d1e35fb2cff98fb0":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4353719ad1728723cc96856c01e546290603410c":["023aa7229ae194442d2c4f36a9aaea1588760416"],"1c48d77b092518bb5fe34187680876685b8b9aed":["7530de27b87b961b51f01bd1299b7004d46e8823"],"15e323346eac5e4685c0a9f2df85eb96b4239bbb":["1c48d77b092518bb5fe34187680876685b8b9aed","ae73da626f97850c922c42736f808d0378e165f0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ae73da626f97850c922c42736f808d0378e165f0":["1c48d77b092518bb5fe34187680876685b8b9aed"],"7530de27b87b961b51f01bd1299b7004d46e8823":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c"],"023aa7229ae194442d2c4f36a9aaea1588760416":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"ef0d8a69209261514c5739c770bba706c2308450":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","fb02351ae2b114dd41585916d1e35fb2cff98fb0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fb17639909a369c1e64866842e5c213440acc17e"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"fb17639909a369c1e64866842e5c213440acc17e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","7530de27b87b961b51f01bd1299b7004d46e8823"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["fb02351ae2b114dd41585916d1e35fb2cff98fb0","ef0d8a69209261514c5739c770bba706c2308450"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["023aa7229ae194442d2c4f36a9aaea1588760416"],"fb02351ae2b114dd41585916d1e35fb2cff98fb0":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c","ef0d8a69209261514c5739c770bba706c2308450"],"4353719ad1728723cc96856c01e546290603410c":["fb17639909a369c1e64866842e5c213440acc17e"],"1c48d77b092518bb5fe34187680876685b8b9aed":["15e323346eac5e4685c0a9f2df85eb96b4239bbb","ae73da626f97850c922c42736f808d0378e165f0"],"15e323346eac5e4685c0a9f2df85eb96b4239bbb":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"ae73da626f97850c922c42736f808d0378e165f0":["c9fb5f46e264daf5ba3860defe623a89d202dd87","15e323346eac5e4685c0a9f2df85eb96b4239bbb"],"7530de27b87b961b51f01bd1299b7004d46e8823":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","1c48d77b092518bb5fe34187680876685b8b9aed"],"023aa7229ae194442d2c4f36a9aaea1588760416":["4353719ad1728723cc96856c01e546290603410c"],"ef0d8a69209261514c5739c770bba706c2308450":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","15e323346eac5e4685c0a9f2df85eb96b4239bbb","ef0d8a69209261514c5739c770bba706c2308450","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}