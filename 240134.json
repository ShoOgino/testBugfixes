{"path":"lucene/tools/src/java/org/apache/lucene/validation/ForbiddenApisCheckTask#addSignature(String).mjava","commits":[{"id":"c7f73df94cfb3e05fba3b55eaa6677855a369c35","date":1341945151,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/tools/src/java/org/apache/lucene/validation/ForbiddenApisCheckTask#addSignature(String).mjava","pathOld":"lucene/tools/src/java/org/apache/lucene/validation/ForbiddenApisCheckTask#addSignature(ClassLoader,String).mjava","sourceNew":"  /** Adds the method signature to the list of disallowed methods. The Signature is checked against the given ClassLoader. */\n  private void addSignature(final String signature) throws BuildException {\n    final String clazz, field;\n    final Method method;\n    int p = signature.indexOf('#');\n    if (p >= 0) {\n      clazz = signature.substring(0, p);\n      final String s = signature.substring(p + 1);\n      p = s.indexOf('(');\n      if (p >= 0) {\n        if (p == 0) {\n          throw new BuildException(\"Invalid method signature (method name missing): \" + signature);\n        }\n        // we ignore the return type, its just to match easier (so return type is void):\n        try {\n          method = Method.getMethod(\"void \" + s, true);\n        } catch (IllegalArgumentException iae) {\n          throw new BuildException(\"Invalid method signature: \" + signature);\n        }\n        field = null;\n      } else {\n        field = s;\n        method = null;\n      }\n    } else {\n      clazz = signature;\n      method = null;\n      field = null;\n    }\n    // check class & method/field signature, if it is really existent (in classpath), but we don't really load the class into JVM:\n    final ClassSignatureLookup c = getClassFromClassLoader(clazz);\n    if (method != null) {\n      assert field == null;\n      // list all methods with this signature:\n      boolean found = false;\n      for (final Method m : c.methods) {\n        if (m.getName().equals(method.getName()) && Arrays.equals(m.getArgumentTypes(), method.getArgumentTypes())) {\n          found = true;\n          forbiddenMethods.put(c.reader.getClassName() + '\\000' + m, signature);\n          // don't break when found, as there may be more covariant overrides!\n        }\n      }\n      if (!found) {\n        throw new BuildException(\"No method found with following signature: \" + signature);\n      }\n    } else if (field != null) {\n      assert method == null;\n      if (!c.fields.contains(field)) {\n        throw new BuildException(\"No field found with following name: \" + signature);\n      }\n      forbiddenFields.put(c.reader.getClassName() + '\\000' + field, signature);\n    } else {\n      assert field == null && method == null;\n      // only add the signature as class name\n      forbiddenClasses.put(c.reader.getClassName(), signature);\n    }\n  }\n\n","sourceOld":"  /** Adds the method signature to the list of disallowed methods. The Signature is checked against the given ClassLoader. */\n  private void addSignature(final ClassLoader loader, final String signature) throws BuildException {\n    final String clazz, field;\n    final Method method;\n    int p = signature.indexOf('#');\n    if (p >= 0) {\n      clazz = signature.substring(0, p);\n      final String s = signature.substring(p + 1);\n      p = s.indexOf('(');\n      if (p >= 0) {\n        if (p == 0) {\n          throw new BuildException(\"Invalid method signature (method name missing): \" + signature);\n        }\n        // we ignore the return type, its just to match easier (so return type is void):\n        try {\n          method = Method.getMethod(\"void \" + s, true);\n        } catch (IllegalArgumentException iae) {\n          throw new BuildException(\"Invalid method signature: \" + signature);\n        }\n        field = null;\n      } else {\n        field = s;\n        method = null;\n      }\n    } else {\n      clazz = signature;\n      method = null;\n      field = null;\n    }\n    // check class & method/field signature, if it is really existent (in classpath), but we don't really load the class into JVM:\n    ClassNode c = classCache.get(clazz);\n    if (c == null) {\n      readClass(loader, clazz).accept(c = new ClassNode(Opcodes.ASM4), ClassReader.SKIP_CODE | ClassReader.SKIP_DEBUG | ClassReader.SKIP_FRAMES);\n      classCache.put(clazz, c);\n    }\n    if (method != null) {\n      assert field == null;\n      // list all methods with this signature:\n      boolean found = false;\n      for (final MethodNode mn : c.methods) {\n        if (mn.name.equals(method.getName()) && Arrays.equals(Type.getArgumentTypes(mn.desc), method.getArgumentTypes())) {\n          found = true;\n          forbiddenMethods.put(c.name + '\\000' + new Method(mn.name, mn.desc), signature);\n          // don't break when found, as there may be more covariant overrides!\n        }\n      }\n      if (!found) {\n        throw new BuildException(\"No method found with following signature: \" + signature);\n      }\n    } else if (field != null) {\n      assert method == null;\n      // list all fields to find the right one:\n      boolean found = false;\n      for (final FieldNode fld : c.fields) {\n        if (fld.name.equals(field)) {\n          found = true;\n          forbiddenFields.put(c.name + '\\000' + fld.name, signature);\n          break;\n        }\n      }\n      if (!found) {\n        throw new BuildException(\"No field found with following name: \" + signature);\n      }\n    } else {\n      assert field == null && method == null;\n      // only add the signature as class name\n      forbiddenClasses.put(c.name, signature);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/tools/src/java/org/apache/lucene/validation/ForbiddenApisCheckTask#addSignature(String).mjava","pathOld":"/dev/null","sourceNew":"  /** Adds the method signature to the list of disallowed methods. The Signature is checked against the given ClassLoader. */\n  private void addSignature(final String signature) throws BuildException {\n    final String clazz, field;\n    final Method method;\n    int p = signature.indexOf('#');\n    if (p >= 0) {\n      clazz = signature.substring(0, p);\n      final String s = signature.substring(p + 1);\n      p = s.indexOf('(');\n      if (p >= 0) {\n        if (p == 0) {\n          throw new BuildException(\"Invalid method signature (method name missing): \" + signature);\n        }\n        // we ignore the return type, its just to match easier (so return type is void):\n        try {\n          method = Method.getMethod(\"void \" + s, true);\n        } catch (IllegalArgumentException iae) {\n          throw new BuildException(\"Invalid method signature: \" + signature);\n        }\n        field = null;\n      } else {\n        field = s;\n        method = null;\n      }\n    } else {\n      clazz = signature;\n      method = null;\n      field = null;\n    }\n    // check class & method/field signature, if it is really existent (in classpath), but we don't really load the class into JVM:\n    final ClassSignatureLookup c = getClassFromClassLoader(clazz);\n    if (method != null) {\n      assert field == null;\n      // list all methods with this signature:\n      boolean found = false;\n      for (final Method m : c.methods) {\n        if (m.getName().equals(method.getName()) && Arrays.equals(m.getArgumentTypes(), method.getArgumentTypes())) {\n          found = true;\n          forbiddenMethods.put(c.reader.getClassName() + '\\000' + m, signature);\n          // don't break when found, as there may be more covariant overrides!\n        }\n      }\n      if (!found) {\n        throw new BuildException(\"No method found with following signature: \" + signature);\n      }\n    } else if (field != null) {\n      assert method == null;\n      if (!c.fields.contains(field)) {\n        throw new BuildException(\"No field found with following name: \" + signature);\n      }\n      forbiddenFields.put(c.reader.getClassName() + '\\000' + field, signature);\n    } else {\n      assert field == null && method == null;\n      // only add the signature as class name\n      forbiddenClasses.put(c.reader.getClassName(), signature);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/tools/src/java/org/apache/lucene/validation/ForbiddenApisCheckTask#addSignature(String).mjava","pathOld":"/dev/null","sourceNew":"  /** Adds the method signature to the list of disallowed methods. The Signature is checked against the given ClassLoader. */\n  private void addSignature(final String signature) throws BuildException {\n    final String clazz, field;\n    final Method method;\n    int p = signature.indexOf('#');\n    if (p >= 0) {\n      clazz = signature.substring(0, p);\n      final String s = signature.substring(p + 1);\n      p = s.indexOf('(');\n      if (p >= 0) {\n        if (p == 0) {\n          throw new BuildException(\"Invalid method signature (method name missing): \" + signature);\n        }\n        // we ignore the return type, its just to match easier (so return type is void):\n        try {\n          method = Method.getMethod(\"void \" + s, true);\n        } catch (IllegalArgumentException iae) {\n          throw new BuildException(\"Invalid method signature: \" + signature);\n        }\n        field = null;\n      } else {\n        field = s;\n        method = null;\n      }\n    } else {\n      clazz = signature;\n      method = null;\n      field = null;\n    }\n    // check class & method/field signature, if it is really existent (in classpath), but we don't really load the class into JVM:\n    final ClassSignatureLookup c = getClassFromClassLoader(clazz);\n    if (method != null) {\n      assert field == null;\n      // list all methods with this signature:\n      boolean found = false;\n      for (final Method m : c.methods) {\n        if (m.getName().equals(method.getName()) && Arrays.equals(m.getArgumentTypes(), method.getArgumentTypes())) {\n          found = true;\n          forbiddenMethods.put(c.reader.getClassName() + '\\000' + m, signature);\n          // don't break when found, as there may be more covariant overrides!\n        }\n      }\n      if (!found) {\n        throw new BuildException(\"No method found with following signature: \" + signature);\n      }\n    } else if (field != null) {\n      assert method == null;\n      if (!c.fields.contains(field)) {\n        throw new BuildException(\"No field found with following name: \" + signature);\n      }\n      forbiddenFields.put(c.reader.getClassName() + '\\000' + field, signature);\n    } else {\n      assert field == null && method == null;\n      // only add the signature as class name\n      forbiddenClasses.put(c.reader.getClassName(), signature);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8f65fb5029f5f7fa27e485539ccf9e5a439adfb5","date":1360055735,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/tools/src/java/org/apache/lucene/validation/ForbiddenApisCheckTask#addSignature(String).mjava","sourceNew":null,"sourceOld":"  /** Adds the method signature to the list of disallowed methods. The Signature is checked against the given ClassLoader. */\n  private void addSignature(final String signature) throws BuildException {\n    final String clazz, field;\n    final Method method;\n    int p = signature.indexOf('#');\n    if (p >= 0) {\n      clazz = signature.substring(0, p);\n      final String s = signature.substring(p + 1);\n      p = s.indexOf('(');\n      if (p >= 0) {\n        if (p == 0) {\n          throw new BuildException(\"Invalid method signature (method name missing): \" + signature);\n        }\n        // we ignore the return type, its just to match easier (so return type is void):\n        try {\n          method = Method.getMethod(\"void \" + s, true);\n        } catch (IllegalArgumentException iae) {\n          throw new BuildException(\"Invalid method signature: \" + signature);\n        }\n        field = null;\n      } else {\n        field = s;\n        method = null;\n      }\n    } else {\n      clazz = signature;\n      method = null;\n      field = null;\n    }\n    // check class & method/field signature, if it is really existent (in classpath), but we don't really load the class into JVM:\n    final ClassSignatureLookup c = getClassFromClassLoader(clazz);\n    if (method != null) {\n      assert field == null;\n      // list all methods with this signature:\n      boolean found = false;\n      for (final Method m : c.methods) {\n        if (m.getName().equals(method.getName()) && Arrays.equals(m.getArgumentTypes(), method.getArgumentTypes())) {\n          found = true;\n          forbiddenMethods.put(c.reader.getClassName() + '\\000' + m, signature);\n          // don't break when found, as there may be more covariant overrides!\n        }\n      }\n      if (!found) {\n        throw new BuildException(\"No method found with following signature: \" + signature);\n      }\n    } else if (field != null) {\n      assert method == null;\n      if (!c.fields.contains(field)) {\n        throw new BuildException(\"No field found with following name: \" + signature);\n      }\n      forbiddenFields.put(c.reader.getClassName() + '\\000' + field, signature);\n    } else {\n      assert field == null && method == null;\n      // only add the signature as class name\n      forbiddenClasses.put(c.reader.getClassName(), signature);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e4d4ec39bf5396230748ca859ff05ab024b6fc5","date":1360112310,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/tools/src/java/org/apache/lucene/validation/ForbiddenApisCheckTask#addSignature(String).mjava","sourceNew":null,"sourceOld":"  /** Adds the method signature to the list of disallowed methods. The Signature is checked against the given ClassLoader. */\n  private void addSignature(final String signature) throws BuildException {\n    final String clazz, field;\n    final Method method;\n    int p = signature.indexOf('#');\n    if (p >= 0) {\n      clazz = signature.substring(0, p);\n      final String s = signature.substring(p + 1);\n      p = s.indexOf('(');\n      if (p >= 0) {\n        if (p == 0) {\n          throw new BuildException(\"Invalid method signature (method name missing): \" + signature);\n        }\n        // we ignore the return type, its just to match easier (so return type is void):\n        try {\n          method = Method.getMethod(\"void \" + s, true);\n        } catch (IllegalArgumentException iae) {\n          throw new BuildException(\"Invalid method signature: \" + signature);\n        }\n        field = null;\n      } else {\n        field = s;\n        method = null;\n      }\n    } else {\n      clazz = signature;\n      method = null;\n      field = null;\n    }\n    // check class & method/field signature, if it is really existent (in classpath), but we don't really load the class into JVM:\n    final ClassSignatureLookup c = getClassFromClassLoader(clazz);\n    if (method != null) {\n      assert field == null;\n      // list all methods with this signature:\n      boolean found = false;\n      for (final Method m : c.methods) {\n        if (m.getName().equals(method.getName()) && Arrays.equals(m.getArgumentTypes(), method.getArgumentTypes())) {\n          found = true;\n          forbiddenMethods.put(c.reader.getClassName() + '\\000' + m, signature);\n          // don't break when found, as there may be more covariant overrides!\n        }\n      }\n      if (!found) {\n        throw new BuildException(\"No method found with following signature: \" + signature);\n      }\n    } else if (field != null) {\n      assert method == null;\n      if (!c.fields.contains(field)) {\n        throw new BuildException(\"No field found with following name: \" + signature);\n      }\n      forbiddenFields.put(c.reader.getClassName() + '\\000' + field, signature);\n    } else {\n      assert field == null && method == null;\n      // only add the signature as class name\n      forbiddenClasses.put(c.reader.getClassName(), signature);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"aba371508186796cc6151d8223a5b4e16d02e26e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c7f73df94cfb3e05fba3b55eaa6677855a369c35"],"c7f73df94cfb3e05fba3b55eaa6677855a369c35":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3e4d4ec39bf5396230748ca859ff05ab024b6fc5":["c7f73df94cfb3e05fba3b55eaa6677855a369c35","8f65fb5029f5f7fa27e485539ccf9e5a439adfb5"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c7f73df94cfb3e05fba3b55eaa6677855a369c35"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8f65fb5029f5f7fa27e485539ccf9e5a439adfb5":["c7f73df94cfb3e05fba3b55eaa6677855a369c35"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8f65fb5029f5f7fa27e485539ccf9e5a439adfb5"]},"commit2Childs":{"aba371508186796cc6151d8223a5b4e16d02e26e":[],"c7f73df94cfb3e05fba3b55eaa6677855a369c35":["aba371508186796cc6151d8223a5b4e16d02e26e","3e4d4ec39bf5396230748ca859ff05ab024b6fc5","fe33227f6805edab2036cbb80645cc4e2d1fa424","8f65fb5029f5f7fa27e485539ccf9e5a439adfb5"],"3e4d4ec39bf5396230748ca859ff05ab024b6fc5":[],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["aba371508186796cc6151d8223a5b4e16d02e26e","c7f73df94cfb3e05fba3b55eaa6677855a369c35","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"8f65fb5029f5f7fa27e485539ccf9e5a439adfb5":["3e4d4ec39bf5396230748ca859ff05ab024b6fc5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aba371508186796cc6151d8223a5b4e16d02e26e","3e4d4ec39bf5396230748ca859ff05ab024b6fc5","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}