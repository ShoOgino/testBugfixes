{"path":"modules/queries/src/test/org/apache/lucene/queries/TestCustomScoreQuery.CustomMulAddQuery#getCustomScoreProvider(AtomicReaderContext).mjava","commits":[{"id":"c8fda790e002fff32e201cbd0f7bed4c2b333a64","date":1309401082,"type":1,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queries/src/test/org/apache/lucene/queries/TestCustomScoreQuery.CustomMulAddQuery#getCustomScoreProvider(AtomicReaderContext).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/function/TestCustomScoreQuery.CustomMulAddQuery#getCustomScoreProvider(AtomicReaderContext).mjava","sourceNew":"    @Override\n    protected CustomScoreProvider getCustomScoreProvider(AtomicReaderContext context) {\n      return new CustomScoreProvider(context) {\n        @Override\n        public float customScore(int doc, float subQueryScore, float valSrcScores[]) {\n          if (valSrcScores.length == 0) {\n            return subQueryScore;\n          }\n          if (valSrcScores.length == 1) {\n            return subQueryScore + valSrcScores[0];\n            // confirm that skipping beyond the last doc, on the\n            // previous reader, hits NO_MORE_DOCS\n          }\n          return (subQueryScore + valSrcScores[0]) * valSrcScores[1]; // we know there are two\n        }\n\n        @Override\n        public Explanation customExplain(int doc, Explanation subQueryExpl, Explanation valSrcExpls[]) {\n          if (valSrcExpls.length == 0) {\n            return subQueryExpl;\n          }\n          Explanation exp = new Explanation(valSrcExpls[0].getValue() + subQueryExpl.getValue(), \"sum of:\");\n          exp.addDetail(subQueryExpl);\n          exp.addDetail(valSrcExpls[0]);\n          if (valSrcExpls.length == 1) {\n            exp.setDescription(\"CustomMulAdd, sum of:\");\n            return exp;\n          }\n          Explanation exp2 = new Explanation(valSrcExpls[1].getValue() * exp.getValue(), \"custom score: product of:\");\n          exp2.addDetail(valSrcExpls[1]);\n          exp2.addDetail(exp);\n          return exp2;\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    protected CustomScoreProvider getCustomScoreProvider(AtomicReaderContext context) {\n      return new CustomScoreProvider(context) {\n        @Override\n        public float customScore(int doc, float subQueryScore, float valSrcScores[]) {\n          if (valSrcScores.length == 0) {\n            return subQueryScore;\n          }\n          if (valSrcScores.length == 1) {\n            return subQueryScore + valSrcScores[0];\n            // confirm that skipping beyond the last doc, on the\n            // previous reader, hits NO_MORE_DOCS\n          }\n          return (subQueryScore + valSrcScores[0]) * valSrcScores[1]; // we know there are two\n        }\n\n        @Override\n        public Explanation customExplain(int doc, Explanation subQueryExpl, Explanation valSrcExpls[]) {\n          if (valSrcExpls.length == 0) {\n            return subQueryExpl;\n          }\n          Explanation exp = new Explanation(valSrcExpls[0].getValue() + subQueryExpl.getValue(), \"sum of:\");\n          exp.addDetail(subQueryExpl);\n          exp.addDetail(valSrcExpls[0]);\n          if (valSrcExpls.length == 1) {\n            exp.setDescription(\"CustomMulAdd, sum of:\");\n            return exp;\n          }\n          Explanation exp2 = new Explanation(valSrcExpls[1].getValue() * exp.getValue(), \"custom score: product of:\");\n          exp2.addDetail(valSrcExpls[1]);\n          exp2.addDetail(exp);\n          return exp2;\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/queries/src/test/org/apache/lucene/queries/TestCustomScoreQuery.CustomMulAddQuery#getCustomScoreProvider(AtomicReaderContext).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/function/TestCustomScoreQuery.CustomMulAddQuery#getCustomScoreProvider(AtomicReaderContext).mjava","sourceNew":"    @Override\n    protected CustomScoreProvider getCustomScoreProvider(AtomicReaderContext context) {\n      return new CustomScoreProvider(context) {\n        @Override\n        public float customScore(int doc, float subQueryScore, float valSrcScores[]) {\n          if (valSrcScores.length == 0) {\n            return subQueryScore;\n          }\n          if (valSrcScores.length == 1) {\n            return subQueryScore + valSrcScores[0];\n            // confirm that skipping beyond the last doc, on the\n            // previous reader, hits NO_MORE_DOCS\n          }\n          return (subQueryScore + valSrcScores[0]) * valSrcScores[1]; // we know there are two\n        }\n\n        @Override\n        public Explanation customExplain(int doc, Explanation subQueryExpl, Explanation valSrcExpls[]) {\n          if (valSrcExpls.length == 0) {\n            return subQueryExpl;\n          }\n          Explanation exp = new Explanation(valSrcExpls[0].getValue() + subQueryExpl.getValue(), \"sum of:\");\n          exp.addDetail(subQueryExpl);\n          exp.addDetail(valSrcExpls[0]);\n          if (valSrcExpls.length == 1) {\n            exp.setDescription(\"CustomMulAdd, sum of:\");\n            return exp;\n          }\n          Explanation exp2 = new Explanation(valSrcExpls[1].getValue() * exp.getValue(), \"custom score: product of:\");\n          exp2.addDetail(valSrcExpls[1]);\n          exp2.addDetail(exp);\n          return exp2;\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    protected CustomScoreProvider getCustomScoreProvider(AtomicReaderContext context) {\n      return new CustomScoreProvider(context) {\n        @Override\n        public float customScore(int doc, float subQueryScore, float valSrcScores[]) {\n          if (valSrcScores.length == 0) {\n            return subQueryScore;\n          }\n          if (valSrcScores.length == 1) {\n            return subQueryScore + valSrcScores[0];\n            // confirm that skipping beyond the last doc, on the\n            // previous reader, hits NO_MORE_DOCS\n          }\n          return (subQueryScore + valSrcScores[0]) * valSrcScores[1]; // we know there are two\n        }\n\n        @Override\n        public Explanation customExplain(int doc, Explanation subQueryExpl, Explanation valSrcExpls[]) {\n          if (valSrcExpls.length == 0) {\n            return subQueryExpl;\n          }\n          Explanation exp = new Explanation(valSrcExpls[0].getValue() + subQueryExpl.getValue(), \"sum of:\");\n          exp.addDetail(subQueryExpl);\n          exp.addDetail(valSrcExpls[0]);\n          if (valSrcExpls.length == 1) {\n            exp.setDescription(\"CustomMulAdd, sum of:\");\n            return exp;\n          }\n          Explanation exp2 = new Explanation(valSrcExpls[1].getValue() * exp.getValue(), \"custom score: product of:\");\n          exp2.addDetail(valSrcExpls[1]);\n          exp2.addDetail(exp);\n          return exp2;\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/queries/src/test/org/apache/lucene/queries/TestCustomScoreQuery.CustomMulAddQuery#getCustomScoreProvider(AtomicReaderContext).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/function/TestCustomScoreQuery.CustomMulAddQuery#getCustomScoreProvider(AtomicReaderContext).mjava","sourceNew":"    @Override\n    protected CustomScoreProvider getCustomScoreProvider(AtomicReaderContext context) {\n      return new CustomScoreProvider(context) {\n        @Override\n        public float customScore(int doc, float subQueryScore, float valSrcScores[]) {\n          if (valSrcScores.length == 0) {\n            return subQueryScore;\n          }\n          if (valSrcScores.length == 1) {\n            return subQueryScore + valSrcScores[0];\n            // confirm that skipping beyond the last doc, on the\n            // previous reader, hits NO_MORE_DOCS\n          }\n          return (subQueryScore + valSrcScores[0]) * valSrcScores[1]; // we know there are two\n        }\n\n        @Override\n        public Explanation customExplain(int doc, Explanation subQueryExpl, Explanation valSrcExpls[]) {\n          if (valSrcExpls.length == 0) {\n            return subQueryExpl;\n          }\n          Explanation exp = new Explanation(valSrcExpls[0].getValue() + subQueryExpl.getValue(), \"sum of:\");\n          exp.addDetail(subQueryExpl);\n          exp.addDetail(valSrcExpls[0]);\n          if (valSrcExpls.length == 1) {\n            exp.setDescription(\"CustomMulAdd, sum of:\");\n            return exp;\n          }\n          Explanation exp2 = new Explanation(valSrcExpls[1].getValue() * exp.getValue(), \"custom score: product of:\");\n          exp2.addDetail(valSrcExpls[1]);\n          exp2.addDetail(exp);\n          return exp2;\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    protected CustomScoreProvider getCustomScoreProvider(AtomicReaderContext context) {\n      return new CustomScoreProvider(context) {\n        @Override\n        public float customScore(int doc, float subQueryScore, float valSrcScores[]) {\n          if (valSrcScores.length == 0) {\n            return subQueryScore;\n          }\n          if (valSrcScores.length == 1) {\n            return subQueryScore + valSrcScores[0];\n            // confirm that skipping beyond the last doc, on the\n            // previous reader, hits NO_MORE_DOCS\n          }\n          return (subQueryScore + valSrcScores[0]) * valSrcScores[1]; // we know there are two\n        }\n\n        @Override\n        public Explanation customExplain(int doc, Explanation subQueryExpl, Explanation valSrcExpls[]) {\n          if (valSrcExpls.length == 0) {\n            return subQueryExpl;\n          }\n          Explanation exp = new Explanation(valSrcExpls[0].getValue() + subQueryExpl.getValue(), \"sum of:\");\n          exp.addDetail(subQueryExpl);\n          exp.addDetail(valSrcExpls[0]);\n          if (valSrcExpls.length == 1) {\n            exp.setDescription(\"CustomMulAdd, sum of:\");\n            return exp;\n          }\n          Explanation exp2 = new Explanation(valSrcExpls[1].getValue() * exp.getValue(), \"custom score: product of:\");\n          exp2.addDetail(valSrcExpls[1]);\n          exp2.addDetail(exp);\n          return exp2;\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/TestCustomScoreQuery.CustomMulAddQuery#getCustomScoreProvider(AtomicReaderContext).mjava","pathOld":"modules/queries/src/test/org/apache/lucene/queries/TestCustomScoreQuery.CustomMulAddQuery#getCustomScoreProvider(AtomicReaderContext).mjava","sourceNew":"    @Override\n    protected CustomScoreProvider getCustomScoreProvider(AtomicReaderContext context) {\n      return new CustomScoreProvider(context) {\n        @Override\n        public float customScore(int doc, float subQueryScore, float valSrcScores[]) {\n          if (valSrcScores.length == 0) {\n            return subQueryScore;\n          }\n          if (valSrcScores.length == 1) {\n            return subQueryScore + valSrcScores[0];\n            // confirm that skipping beyond the last doc, on the\n            // previous reader, hits NO_MORE_DOCS\n          }\n          return (subQueryScore + valSrcScores[0]) * valSrcScores[1]; // we know there are two\n        }\n\n        @Override\n        public Explanation customExplain(int doc, Explanation subQueryExpl, Explanation valSrcExpls[]) {\n          if (valSrcExpls.length == 0) {\n            return subQueryExpl;\n          }\n          Explanation exp = new Explanation(valSrcExpls[0].getValue() + subQueryExpl.getValue(), \"sum of:\");\n          exp.addDetail(subQueryExpl);\n          exp.addDetail(valSrcExpls[0]);\n          if (valSrcExpls.length == 1) {\n            exp.setDescription(\"CustomMulAdd, sum of:\");\n            return exp;\n          }\n          Explanation exp2 = new Explanation(valSrcExpls[1].getValue() * exp.getValue(), \"custom score: product of:\");\n          exp2.addDetail(valSrcExpls[1]);\n          exp2.addDetail(exp);\n          return exp2;\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    protected CustomScoreProvider getCustomScoreProvider(AtomicReaderContext context) {\n      return new CustomScoreProvider(context) {\n        @Override\n        public float customScore(int doc, float subQueryScore, float valSrcScores[]) {\n          if (valSrcScores.length == 0) {\n            return subQueryScore;\n          }\n          if (valSrcScores.length == 1) {\n            return subQueryScore + valSrcScores[0];\n            // confirm that skipping beyond the last doc, on the\n            // previous reader, hits NO_MORE_DOCS\n          }\n          return (subQueryScore + valSrcScores[0]) * valSrcScores[1]; // we know there are two\n        }\n\n        @Override\n        public Explanation customExplain(int doc, Explanation subQueryExpl, Explanation valSrcExpls[]) {\n          if (valSrcExpls.length == 0) {\n            return subQueryExpl;\n          }\n          Explanation exp = new Explanation(valSrcExpls[0].getValue() + subQueryExpl.getValue(), \"sum of:\");\n          exp.addDetail(subQueryExpl);\n          exp.addDetail(valSrcExpls[0]);\n          if (valSrcExpls.length == 1) {\n            exp.setDescription(\"CustomMulAdd, sum of:\");\n            return exp;\n          }\n          Explanation exp2 = new Explanation(valSrcExpls[1].getValue() * exp.getValue(), \"custom score: product of:\");\n          exp2.addDetail(valSrcExpls[1]);\n          exp2.addDetail(exp);\n          return exp2;\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["c8fda790e002fff32e201cbd0f7bed4c2b333a64"],"c8fda790e002fff32e201cbd0f7bed4c2b333a64":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c8fda790e002fff32e201cbd0f7bed4c2b333a64"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c8fda790e002fff32e201cbd0f7bed4c2b333a64"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c8fda790e002fff32e201cbd0f7bed4c2b333a64":["b89678825b68eccaf09e6ab71675fc0b0af1e099","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c8fda790e002fff32e201cbd0f7bed4c2b333a64","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}