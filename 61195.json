{"path":"lucene/core/src/test/org/apache/lucene/search/TestIndexSearcher#testRejectedExecution().mjava","commits":[{"id":"9c92d00295a9f8cc365981d39aec46ab8c0835d6","date":1569560651,"type":0,"author":"Atri Sharma","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestIndexSearcher#testRejectedExecution().mjava","pathOld":"/dev/null","sourceNew":"  public void testRejectedExecution() throws IOException {\n    List<LeafReaderContext> leaves = reader.leaves();\n    AtomicInteger numExecutions = new AtomicInteger(0);\n    ExecutorService service = new RejectingMockExecutor();\n\n    IndexSearcher searcher = new IndexSearcher(reader, service) {\n      @Override\n      protected LeafSlice[] slices(List<LeafReaderContext> leaves) {\n        ArrayList<LeafSlice> slices = new ArrayList<>();\n        for (LeafReaderContext ctx : leaves) {\n          slices.add(new LeafSlice(Arrays.asList(ctx)));\n        }\n        return slices.toArray(new LeafSlice[0]);\n      }\n    };\n\n    // To ensure that failing ExecutorService still allows query to run\n    // successfully\n    searcher.search(new MatchAllDocsQuery(), 10);\n    if (leaves.size() <= 1) {\n      assertEquals(0, numExecutions.get());\n    } else {\n      assertEquals(leaves.size() - 1, numExecutions.get());\n    }\n\n    service.shutdown();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a47fe9268b8692055e78d5d88e5944da72204992","date":1569585581,"type":3,"author":"Atri Sharma","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestIndexSearcher#testRejectedExecution().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestIndexSearcher#testRejectedExecution().mjava","sourceNew":"  public void testRejectedExecution() throws IOException {\n    ExecutorService service = new RejectingMockExecutor();\n\n    IndexSearcher searcher = new IndexSearcher(reader, service) {\n      @Override\n      protected LeafSlice[] slices(List<LeafReaderContext> leaves) {\n        ArrayList<LeafSlice> slices = new ArrayList<>();\n        for (LeafReaderContext ctx : leaves) {\n          slices.add(new LeafSlice(Arrays.asList(ctx)));\n        }\n        return slices.toArray(new LeafSlice[0]);\n      }\n    };\n\n    // To ensure that failing ExecutorService still allows query to run\n    // successfully\n    TopDocs topDocs = searcher.search(new MatchAllDocsQuery(), 10);\n    assert topDocs.scoreDocs.length == 10;\n\n    service.shutdown();\n  }\n\n","sourceOld":"  public void testRejectedExecution() throws IOException {\n    List<LeafReaderContext> leaves = reader.leaves();\n    AtomicInteger numExecutions = new AtomicInteger(0);\n    ExecutorService service = new RejectingMockExecutor();\n\n    IndexSearcher searcher = new IndexSearcher(reader, service) {\n      @Override\n      protected LeafSlice[] slices(List<LeafReaderContext> leaves) {\n        ArrayList<LeafSlice> slices = new ArrayList<>();\n        for (LeafReaderContext ctx : leaves) {\n          slices.add(new LeafSlice(Arrays.asList(ctx)));\n        }\n        return slices.toArray(new LeafSlice[0]);\n      }\n    };\n\n    // To ensure that failing ExecutorService still allows query to run\n    // successfully\n    searcher.search(new MatchAllDocsQuery(), 10);\n    if (leaves.size() <= 1) {\n      assertEquals(0, numExecutions.get());\n    } else {\n      assertEquals(leaves.size() - 1, numExecutions.get());\n    }\n\n    service.shutdown();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9c92d00295a9f8cc365981d39aec46ab8c0835d6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a47fe9268b8692055e78d5d88e5944da72204992"],"a47fe9268b8692055e78d5d88e5944da72204992":["9c92d00295a9f8cc365981d39aec46ab8c0835d6"]},"commit2Childs":{"9c92d00295a9f8cc365981d39aec46ab8c0835d6":["a47fe9268b8692055e78d5d88e5944da72204992"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9c92d00295a9f8cc365981d39aec46ab8c0835d6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"a47fe9268b8692055e78d5d88e5944da72204992":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}