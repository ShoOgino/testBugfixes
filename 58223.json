{"path":"lucene/src/java/org/apache/lucene/search/FieldComparator.FloatComparator#compareBottom(int).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/FieldComparator.FloatComparator#compareBottom(int).mjava","pathOld":"src/java/org/apache/lucene/search/FieldComparator.FloatComparator#compareBottom(int).mjava","sourceNew":"    @Override\n    public int compareBottom(int doc) {\n      // TODO: are there sneaky non-branch ways to compute\n      // sign of float?\n      final float v2 = currentReaderValues[doc];\n      if (bottom > v2) {\n        return 1;\n      } else if (bottom < v2) {\n        return -1;\n      } else {\n        return 0;\n      }\n    }\n\n","sourceOld":"    @Override\n    public int compareBottom(int doc) {\n      // TODO: are there sneaky non-branch ways to compute\n      // sign of float?\n      final float v2 = currentReaderValues[doc];\n      if (bottom > v2) {\n        return 1;\n      } else if (bottom < v2) {\n        return -1;\n      } else {\n        return 0;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff1421d1974cfd5072e195bbb63592657da2f66e","date":1285733489,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/FieldComparator.FloatComparator#compareBottom(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FieldComparator.FloatComparator#compareBottom(int).mjava","sourceNew":"    @Override\n    public int compareBottom(int doc) {\n      // TODO: are there sneaky non-branch ways to compute sign of float?\n      final float v2 = (checkMissing && !cached.valid.get(doc)) \n        ? missingValue : cached.values[doc];\n      \n      if (bottom > v2) {\n        return 1;\n      } else if (bottom < v2) {\n        return -1;\n      } else {\n        return 0;\n      }\n    }\n\n","sourceOld":"    @Override\n    public int compareBottom(int doc) {\n      // TODO: are there sneaky non-branch ways to compute\n      // sign of float?\n      final float v2 = currentReaderValues[doc];\n      if (bottom > v2) {\n        return 1;\n      } else if (bottom < v2) {\n        return -1;\n      } else {\n        return 0;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"53b177c3833d5ccb59768c3b9ff78e9d0bdb213a","date":1291860358,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/FieldComparator.FloatComparator#compareBottom(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FieldComparator.FloatComparator#compareBottom(int).mjava","sourceNew":"    @Override\n    public int compareBottom(int doc) {\n      // TODO: are there sneaky non-branch ways to compute sign of float?\n      float v2 = docValues[doc];\n      if (valid != null && v2==0 && !valid.get(doc))\n        v2 = missingValue;\n\n      \n      if (bottom > v2) {\n        return 1;\n      } else if (bottom < v2) {\n        return -1;\n      } else {\n        return 0;\n      }\n    }\n\n","sourceOld":"    @Override\n    public int compareBottom(int doc) {\n      // TODO: are there sneaky non-branch ways to compute sign of float?\n      final float v2 = (checkMissing && !cached.valid.get(doc)) \n        ? missingValue : cached.values[doc];\n      \n      if (bottom > v2) {\n        return 1;\n      } else if (bottom < v2) {\n        return -1;\n      } else {\n        return 0;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab5cb6a74aefb78aa0569857970b9151dfe2e787","date":1292842407,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/FieldComparator.FloatComparator#compareBottom(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FieldComparator.FloatComparator#compareBottom(int).mjava","sourceNew":"    @Override\n    public int compareBottom(int doc) {\n      // TODO: are there sneaky non-branch ways to compute sign of float?\n      float v2 = docValues[doc];\n      if (valid != null && v2==0 && !valid.get(doc))\n        v2 = missingValue;\n\n      \n      if (bottom > v2) {\n        return 1;\n      } else if (bottom < v2) {\n        return -1;\n      } else {\n        return 0;\n      }\n    }\n\n","sourceOld":"    @Override\n    public int compareBottom(int doc) {\n      // TODO: are there sneaky non-branch ways to compute sign of float?\n      final float v2 = (checkMissing && !cached.valid.get(doc)) \n        ? missingValue : cached.values[doc];\n      \n      if (bottom > v2) {\n        return 1;\n      } else if (bottom < v2) {\n        return -1;\n      } else {\n        return 0;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/FieldComparator.FloatComparator#compareBottom(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FieldComparator.FloatComparator#compareBottom(int).mjava","sourceNew":"    @Override\n    public int compareBottom(int doc) {\n      // TODO: are there sneaky non-branch ways to compute sign of float?\n      float v2 = docValues[doc];\n      if (valid != null && v2==0 && !valid.get(doc))\n        v2 = missingValue;\n\n      \n      if (bottom > v2) {\n        return 1;\n      } else if (bottom < v2) {\n        return -1;\n      } else {\n        return 0;\n      }\n    }\n\n","sourceOld":"    @Override\n    public int compareBottom(int doc) {\n      // TODO: are there sneaky non-branch ways to compute\n      // sign of float?\n      final float v2 = currentReaderValues[doc];\n      if (bottom > v2) {\n        return 1;\n      } else if (bottom < v2) {\n        return -1;\n      } else {\n        return 0;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"382fe3a6ca9745891afebda9b9a57cc158305545","date":1320952430,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/FieldComparator.FloatComparator#compareBottom(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FieldComparator.FloatComparator#compareBottom(int).mjava","sourceNew":"    @Override\n    public int compareBottom(int doc) {\n      // TODO: are there sneaky non-branch ways to compute sign of float?\n      float v2 = currentReaderValues[doc];\n      // Test for v2 == 0 to save Bits.get method call for\n      // the common case (doc has value and value is non-zero):\n      if (docsWithField != null && v2 == 0 && !docsWithField.get(doc)) {\n        v2 = missingValue;\n      }\n      \n      if (bottom > v2) {\n        return 1;\n      } else if (bottom < v2) {\n        return -1;\n      } else {\n        return 0;\n      }\n    }\n\n","sourceOld":"    @Override\n    public int compareBottom(int doc) {\n      // TODO: are there sneaky non-branch ways to compute sign of float?\n      float v2 = docValues[doc];\n      if (valid != null && v2==0 && !valid.get(doc))\n        v2 = missingValue;\n\n      \n      if (bottom > v2) {\n        return 1;\n      } else if (bottom < v2) {\n        return -1;\n      } else {\n        return 0;\n      }\n    }\n\n","bugFix":null,"bugIntro":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldComparator.FloatComparator#compareBottom(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FieldComparator.FloatComparator#compareBottom(int).mjava","sourceNew":"    @Override\n    public int compareBottom(int doc) {\n      // TODO: are there sneaky non-branch ways to compute sign of float?\n      float v2 = currentReaderValues[doc];\n      // Test for v2 == 0 to save Bits.get method call for\n      // the common case (doc has value and value is non-zero):\n      if (docsWithField != null && v2 == 0 && !docsWithField.get(doc)) {\n        v2 = missingValue;\n      }\n      \n      if (bottom > v2) {\n        return 1;\n      } else if (bottom < v2) {\n        return -1;\n      } else {\n        return 0;\n      }\n    }\n\n","sourceOld":"    @Override\n    public int compareBottom(int doc) {\n      // TODO: are there sneaky non-branch ways to compute sign of float?\n      float v2 = currentReaderValues[doc];\n      // Test for v2 == 0 to save Bits.get method call for\n      // the common case (doc has value and value is non-zero):\n      if (docsWithField != null && v2 == 0 && !docsWithField.get(doc)) {\n        v2 = missingValue;\n      }\n      \n      if (bottom > v2) {\n        return 1;\n      } else if (bottom < v2) {\n        return -1;\n      } else {\n        return 0;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["382fe3a6ca9745891afebda9b9a57cc158305545"],"53b177c3833d5ccb59768c3b9ff78e9d0bdb213a":["ff1421d1974cfd5072e195bbb63592657da2f66e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["ff1421d1974cfd5072e195bbb63592657da2f66e","53b177c3833d5ccb59768c3b9ff78e9d0bdb213a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["9454a6510e2db155fb01faa5c049b06ece95fab9","53b177c3833d5ccb59768c3b9ff78e9d0bdb213a"],"382fe3a6ca9745891afebda9b9a57cc158305545":["53b177c3833d5ccb59768c3b9ff78e9d0bdb213a"],"ff1421d1974cfd5072e195bbb63592657da2f66e":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"53b177c3833d5ccb59768c3b9ff78e9d0bdb213a":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","382fe3a6ca9745891afebda9b9a57cc158305545"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"382fe3a6ca9745891afebda9b9a57cc158305545":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"ff1421d1974cfd5072e195bbb63592657da2f66e":["53b177c3833d5ccb59768c3b9ff78e9d0bdb213a","ab5cb6a74aefb78aa0569857970b9151dfe2e787"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","ff1421d1974cfd5072e195bbb63592657da2f66e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}