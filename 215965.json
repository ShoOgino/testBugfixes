{"path":"lucene/src/java/org/apache/lucene/search/DisjunctionMaxScorer#scoreAll(int,int,int,float[],float[]).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/DisjunctionMaxScorer#scoreAll(int,int,int,float[],float[]).mjava","pathOld":"src/java/org/apache/lucene/search/DisjunctionMaxScorer#scoreAll(int,int,int,float[],float[]).mjava","sourceNew":"  // Recursively iterate all subScorers that generated last doc computing sum and max\n  private void scoreAll(int root, int size, int doc, float[] sum, float[] max) throws IOException {\n    if (root < size && subScorers[root].docID() == doc) {\n      float sub = subScorers[root].score();\n      sum[0] += sub;\n      max[0] = Math.max(max[0], sub);\n      scoreAll((root<<1)+1, size, doc, sum, max);\n      scoreAll((root<<1)+2, size, doc, sum, max);\n    }\n  }\n\n","sourceOld":"  // Recursively iterate all subScorers that generated last doc computing sum and max\n  private void scoreAll(int root, int size, int doc, float[] sum, float[] max) throws IOException {\n    if (root < size && subScorers[root].docID() == doc) {\n      float sub = subScorers[root].score();\n      sum[0] += sub;\n      max[0] = Math.max(max[0], sub);\n      scoreAll((root<<1)+1, size, doc, sum, max);\n      scoreAll((root<<1)+2, size, doc, sum, max);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf997b9c86cc024469d4250989553f2ac5970cd9","date":1286803520,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/DisjunctionMaxScorer#scoreAll(int,int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/DisjunctionMaxScorer#scoreAll(int,int,int,float[],float[]).mjava","sourceNew":"  // Recursively iterate all subScorers that generated last doc computing sum and max\n  private void scoreAll(int root, int size, int doc) throws IOException {\n    if (root < size && subScorers[root].docID() == doc) {\n      float sub = subScorers[root].score();\n      scoreSum += sub;\n      scoreMax = Math.max(scoreMax, sub);\n      scoreAll((root<<1)+1, size, doc);\n      scoreAll((root<<1)+2, size, doc);\n    }\n  }\n\n","sourceOld":"  // Recursively iterate all subScorers that generated last doc computing sum and max\n  private void scoreAll(int root, int size, int doc, float[] sum, float[] max) throws IOException {\n    if (root < size && subScorers[root].docID() == doc) {\n      float sub = subScorers[root].score();\n      sum[0] += sub;\n      max[0] = Math.max(max[0], sub);\n      scoreAll((root<<1)+1, size, doc, sum, max);\n      scoreAll((root<<1)+2, size, doc, sum, max);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/search/DisjunctionMaxScorer#scoreAll(int,int,int,float[],float[]).mjava","sourceNew":null,"sourceOld":"  // Recursively iterate all subScorers that generated last doc computing sum and max\n  private void scoreAll(int root, int size, int doc, float[] sum, float[] max) throws IOException {\n    if (root < size && subScorers[root].docID() == doc) {\n      float sub = subScorers[root].score();\n      sum[0] += sub;\n      max[0] = Math.max(max[0], sub);\n      scoreAll((root<<1)+1, size, doc, sum, max);\n      scoreAll((root<<1)+2, size, doc, sum, max);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["9454a6510e2db155fb01faa5c049b06ece95fab9","cf997b9c86cc024469d4250989553f2ac5970cd9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cf997b9c86cc024469d4250989553f2ac5970cd9"],"cf997b9c86cc024469d4250989553f2ac5970cd9":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cf997b9c86cc024469d4250989553f2ac5970cd9"],"cf997b9c86cc024469d4250989553f2ac5970cd9":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}