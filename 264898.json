{"path":"lucene/core/src/test/org/apache/lucene/search/TestConjunctionDISI#scorer(DocIdSetIterator,TwoPhaseIterator).mjava","commits":[{"id":"a3d6eb0072094d94624002318ba2d4c840946833","date":1424947971,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestConjunctionDISI#scorer(DocIdSetIterator,TwoPhaseIterator).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestConjunctionDISI#scorer(DocIdSetIterator,TwoPhaseDocIdSetIterator).mjava","sourceNew":"  /**\n   * Create a {@link Scorer} that wraps the given {@link DocIdSetIterator}. It\n   * also accepts a {@link TwoPhaseIterator} view, which is exposed in\n   * {@link Scorer#asTwoPhaseIterator()}. When the two-phase view is not null,\n   * then {@link Scorer#nextDoc()} and {@link Scorer#advance(int)} will raise\n   * an exception in order to make sure that {@link ConjunctionDISI} takes\n   * advantage of the {@link TwoPhaseIterator} view.\n   */\n  private static Scorer scorer(DocIdSetIterator it, TwoPhaseIterator twoPhaseIterator) {\n    return new Scorer(null) {\n\n      @Override\n      public TwoPhaseIterator asTwoPhaseIterator() {\n        return twoPhaseIterator;\n      }\n\n      @Override\n      public int docID() {\n        if (twoPhaseIterator != null) {\n          throw new UnsupportedOperationException(\"ConjunctionDISI should call the two-phase iterator\");\n        }\n        return it.docID();\n      }\n\n      @Override\n      public int nextDoc() throws IOException {\n        if (twoPhaseIterator != null) {\n          throw new UnsupportedOperationException(\"ConjunctionDISI should call the two-phase iterator\");\n        }\n        return it.nextDoc();\n      }\n\n      @Override\n      public int advance(int target) throws IOException {\n        if (twoPhaseIterator != null) {\n          throw new UnsupportedOperationException(\"ConjunctionDISI should call the two-phase iterator\");\n        }\n        return it.advance(target);\n      }\n\n      @Override\n      public long cost() {\n        if (twoPhaseIterator != null) {\n          throw new UnsupportedOperationException(\"ConjunctionDISI should call the two-phase iterator\");\n        }\n        return it.cost();\n      }\n\n      @Override\n      public float score() throws IOException {\n        return 0;\n      }\n\n      @Override\n      public int freq() throws IOException {\n        return 0;\n      }\n\n    };\n  }\n\n","sourceOld":"  /**\n   * Create a {@link Scorer} that wraps the given {@link DocIdSetIterator}. It\n   * also accepts a {@link TwoPhaseDocIdSetIterator} view, which is exposed in\n   * {@link Scorer#asTwoPhaseIterator()}. When the two-phase view is not null,\n   * then {@link Scorer#nextDoc()} and {@link Scorer#advance(int)} will raise\n   * an exception in order to make sure that {@link ConjunctionDISI} takes\n   * advantage of the {@link TwoPhaseDocIdSetIterator} view.\n   */\n  private static Scorer scorer(DocIdSetIterator it, TwoPhaseDocIdSetIterator twoPhaseIterator) {\n    return new Scorer(null) {\n\n      @Override\n      public TwoPhaseDocIdSetIterator asTwoPhaseIterator() {\n        return twoPhaseIterator;\n      }\n\n      @Override\n      public int docID() {\n        if (twoPhaseIterator != null) {\n          throw new UnsupportedOperationException(\"ConjunctionDISI should call the two-phase iterator\");\n        }\n        return it.docID();\n      }\n\n      @Override\n      public int nextDoc() throws IOException {\n        if (twoPhaseIterator != null) {\n          throw new UnsupportedOperationException(\"ConjunctionDISI should call the two-phase iterator\");\n        }\n        return it.nextDoc();\n      }\n\n      @Override\n      public int advance(int target) throws IOException {\n        if (twoPhaseIterator != null) {\n          throw new UnsupportedOperationException(\"ConjunctionDISI should call the two-phase iterator\");\n        }\n        return it.advance(target);\n      }\n\n      @Override\n      public long cost() {\n        if (twoPhaseIterator != null) {\n          throw new UnsupportedOperationException(\"ConjunctionDISI should call the two-phase iterator\");\n        }\n        return it.cost();\n      }\n\n      @Override\n      public float score() throws IOException {\n        return 0;\n      }\n\n      @Override\n      public int freq() throws IOException {\n        return 0;\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestConjunctionDISI#scorer(DocIdSetIterator,TwoPhaseIterator).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Create a {@link Scorer} that wraps the given {@link DocIdSetIterator}. It\n   * also accepts a {@link TwoPhaseIterator} view, which is exposed in\n   * {@link Scorer#asTwoPhaseIterator()}. When the two-phase view is not null,\n   * then {@link Scorer#nextDoc()} and {@link Scorer#advance(int)} will raise\n   * an exception in order to make sure that {@link ConjunctionDISI} takes\n   * advantage of the {@link TwoPhaseIterator} view.\n   */\n  private static Scorer scorer(DocIdSetIterator it, TwoPhaseIterator twoPhaseIterator) {\n    return new Scorer(null) {\n\n      @Override\n      public TwoPhaseIterator asTwoPhaseIterator() {\n        return twoPhaseIterator;\n      }\n\n      @Override\n      public int docID() {\n        if (twoPhaseIterator != null) {\n          throw new UnsupportedOperationException(\"ConjunctionDISI should call the two-phase iterator\");\n        }\n        return it.docID();\n      }\n\n      @Override\n      public int nextDoc() throws IOException {\n        if (twoPhaseIterator != null) {\n          throw new UnsupportedOperationException(\"ConjunctionDISI should call the two-phase iterator\");\n        }\n        return it.nextDoc();\n      }\n\n      @Override\n      public int advance(int target) throws IOException {\n        if (twoPhaseIterator != null) {\n          throw new UnsupportedOperationException(\"ConjunctionDISI should call the two-phase iterator\");\n        }\n        return it.advance(target);\n      }\n\n      @Override\n      public long cost() {\n        if (twoPhaseIterator != null) {\n          throw new UnsupportedOperationException(\"ConjunctionDISI should call the two-phase iterator\");\n        }\n        return it.cost();\n      }\n\n      @Override\n      public float score() throws IOException {\n        return 0;\n      }\n\n      @Override\n      public int freq() throws IOException {\n        return 0;\n      }\n\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7dd748bb245633a8195281556bb0e68a6ea97d18","date":1449755030,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestConjunctionDISI#scorer(DocIdSetIterator,TwoPhaseIterator).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestConjunctionDISI#scorer(DocIdSetIterator,TwoPhaseIterator).mjava","sourceNew":"  /**\n   * Create a {@link Scorer} that wraps the given {@link DocIdSetIterator}. It\n   * also accepts a {@link TwoPhaseIterator} view, which is exposed in\n   * {@link Scorer#twoPhaseIterator()}. When the two-phase view is not null,\n   * then {@link DocIdSetIterator#nextDoc()} and {@link DocIdSetIterator#advance(int)} will raise\n   * an exception in order to make sure that {@link ConjunctionDISI} takes\n   * advantage of the {@link TwoPhaseIterator} view.\n   */\n  private static Scorer scorer(DocIdSetIterator it, TwoPhaseIterator twoPhaseIterator) {\n    return new Scorer(null) {\n\n      @Override\n      public DocIdSetIterator iterator() {\n        return new DocIdSetIterator() {\n\n          @Override\n          public int docID() {\n            return it.docID();\n          }\n\n          @Override\n          public int nextDoc() throws IOException {\n            if (twoPhaseIterator != null) {\n              throw new UnsupportedOperationException(\"ConjunctionDISI should call the two-phase iterator\");\n            }\n            return it.nextDoc();\n          }\n\n          @Override\n          public int advance(int target) throws IOException {\n            if (twoPhaseIterator != null) {\n              throw new UnsupportedOperationException(\"ConjunctionDISI should call the two-phase iterator\");\n            }\n            return it.advance(target);\n          }\n\n          @Override\n          public long cost() {\n            if (twoPhaseIterator != null) {\n              throw new UnsupportedOperationException(\"ConjunctionDISI should call the two-phase iterator\");\n            }\n            return it.cost();\n          }\n        };\n      }\n\n      @Override\n      public TwoPhaseIterator twoPhaseIterator() {\n        return twoPhaseIterator;\n      }\n\n      @Override\n      public int docID() {\n        if (twoPhaseIterator != null) {\n          throw new UnsupportedOperationException(\"ConjunctionDISI should call the two-phase iterator\");\n        }\n        return it.docID();\n      }\n\n      @Override\n      public float score() throws IOException {\n        return 0;\n      }\n\n      @Override\n      public int freq() throws IOException {\n        return 0;\n      }\n\n    };\n  }\n\n","sourceOld":"  /**\n   * Create a {@link Scorer} that wraps the given {@link DocIdSetIterator}. It\n   * also accepts a {@link TwoPhaseIterator} view, which is exposed in\n   * {@link Scorer#asTwoPhaseIterator()}. When the two-phase view is not null,\n   * then {@link Scorer#nextDoc()} and {@link Scorer#advance(int)} will raise\n   * an exception in order to make sure that {@link ConjunctionDISI} takes\n   * advantage of the {@link TwoPhaseIterator} view.\n   */\n  private static Scorer scorer(DocIdSetIterator it, TwoPhaseIterator twoPhaseIterator) {\n    return new Scorer(null) {\n\n      @Override\n      public TwoPhaseIterator asTwoPhaseIterator() {\n        return twoPhaseIterator;\n      }\n\n      @Override\n      public int docID() {\n        if (twoPhaseIterator != null) {\n          throw new UnsupportedOperationException(\"ConjunctionDISI should call the two-phase iterator\");\n        }\n        return it.docID();\n      }\n\n      @Override\n      public int nextDoc() throws IOException {\n        if (twoPhaseIterator != null) {\n          throw new UnsupportedOperationException(\"ConjunctionDISI should call the two-phase iterator\");\n        }\n        return it.nextDoc();\n      }\n\n      @Override\n      public int advance(int target) throws IOException {\n        if (twoPhaseIterator != null) {\n          throw new UnsupportedOperationException(\"ConjunctionDISI should call the two-phase iterator\");\n        }\n        return it.advance(target);\n      }\n\n      @Override\n      public long cost() {\n        if (twoPhaseIterator != null) {\n          throw new UnsupportedOperationException(\"ConjunctionDISI should call the two-phase iterator\");\n        }\n        return it.cost();\n      }\n\n      @Override\n      public float score() throws IOException {\n        return 0;\n      }\n\n      @Override\n      public int freq() throws IOException {\n        return 0;\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dc14da055888b63b4f8c922d0e1579f3cb315ad7","date":1510744456,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestConjunctionDISI#scorer(DocIdSetIterator,TwoPhaseIterator).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestConjunctionDISI#scorer(DocIdSetIterator,TwoPhaseIterator).mjava","sourceNew":"  /**\n   * Create a {@link Scorer} that wraps the given {@link DocIdSetIterator}. It\n   * also accepts a {@link TwoPhaseIterator} view, which is exposed in\n   * {@link Scorer#twoPhaseIterator()}. When the two-phase view is not null,\n   * then {@link DocIdSetIterator#nextDoc()} and {@link DocIdSetIterator#advance(int)} will raise\n   * an exception in order to make sure that {@link ConjunctionDISI} takes\n   * advantage of the {@link TwoPhaseIterator} view.\n   */\n  private static Scorer scorer(DocIdSetIterator it, TwoPhaseIterator twoPhaseIterator) {\n    return new Scorer(null) {\n\n      @Override\n      public DocIdSetIterator iterator() {\n        return new DocIdSetIterator() {\n\n          @Override\n          public int docID() {\n            return it.docID();\n          }\n\n          @Override\n          public int nextDoc() throws IOException {\n            if (twoPhaseIterator != null) {\n              throw new UnsupportedOperationException(\"ConjunctionDISI should call the two-phase iterator\");\n            }\n            return it.nextDoc();\n          }\n\n          @Override\n          public int advance(int target) throws IOException {\n            if (twoPhaseIterator != null) {\n              throw new UnsupportedOperationException(\"ConjunctionDISI should call the two-phase iterator\");\n            }\n            return it.advance(target);\n          }\n\n          @Override\n          public long cost() {\n            if (twoPhaseIterator != null) {\n              throw new UnsupportedOperationException(\"ConjunctionDISI should call the two-phase iterator\");\n            }\n            return it.cost();\n          }\n        };\n      }\n\n      @Override\n      public TwoPhaseIterator twoPhaseIterator() {\n        return twoPhaseIterator;\n      }\n\n      @Override\n      public int docID() {\n        if (twoPhaseIterator != null) {\n          throw new UnsupportedOperationException(\"ConjunctionDISI should call the two-phase iterator\");\n        }\n        return it.docID();\n      }\n\n      @Override\n      public float score() throws IOException {\n        return 0;\n      }\n\n    };\n  }\n\n","sourceOld":"  /**\n   * Create a {@link Scorer} that wraps the given {@link DocIdSetIterator}. It\n   * also accepts a {@link TwoPhaseIterator} view, which is exposed in\n   * {@link Scorer#twoPhaseIterator()}. When the two-phase view is not null,\n   * then {@link DocIdSetIterator#nextDoc()} and {@link DocIdSetIterator#advance(int)} will raise\n   * an exception in order to make sure that {@link ConjunctionDISI} takes\n   * advantage of the {@link TwoPhaseIterator} view.\n   */\n  private static Scorer scorer(DocIdSetIterator it, TwoPhaseIterator twoPhaseIterator) {\n    return new Scorer(null) {\n\n      @Override\n      public DocIdSetIterator iterator() {\n        return new DocIdSetIterator() {\n\n          @Override\n          public int docID() {\n            return it.docID();\n          }\n\n          @Override\n          public int nextDoc() throws IOException {\n            if (twoPhaseIterator != null) {\n              throw new UnsupportedOperationException(\"ConjunctionDISI should call the two-phase iterator\");\n            }\n            return it.nextDoc();\n          }\n\n          @Override\n          public int advance(int target) throws IOException {\n            if (twoPhaseIterator != null) {\n              throw new UnsupportedOperationException(\"ConjunctionDISI should call the two-phase iterator\");\n            }\n            return it.advance(target);\n          }\n\n          @Override\n          public long cost() {\n            if (twoPhaseIterator != null) {\n              throw new UnsupportedOperationException(\"ConjunctionDISI should call the two-phase iterator\");\n            }\n            return it.cost();\n          }\n        };\n      }\n\n      @Override\n      public TwoPhaseIterator twoPhaseIterator() {\n        return twoPhaseIterator;\n      }\n\n      @Override\n      public int docID() {\n        if (twoPhaseIterator != null) {\n          throw new UnsupportedOperationException(\"ConjunctionDISI should call the two-phase iterator\");\n        }\n        return it.docID();\n      }\n\n      @Override\n      public float score() throws IOException {\n        return 0;\n      }\n\n      @Override\n      public int freq() throws IOException {\n        return 0;\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fc47cb7b4346802411bb432f501ed0673d7119e","date":1512640179,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestConjunctionDISI#scorer(DocIdSetIterator,TwoPhaseIterator).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestConjunctionDISI#scorer(DocIdSetIterator,TwoPhaseIterator).mjava","sourceNew":"  /**\n   * Create a {@link Scorer} that wraps the given {@link DocIdSetIterator}. It\n   * also accepts a {@link TwoPhaseIterator} view, which is exposed in\n   * {@link Scorer#twoPhaseIterator()}. When the two-phase view is not null,\n   * then {@link DocIdSetIterator#nextDoc()} and {@link DocIdSetIterator#advance(int)} will raise\n   * an exception in order to make sure that {@link ConjunctionDISI} takes\n   * advantage of the {@link TwoPhaseIterator} view.\n   */\n  private static Scorer scorer(DocIdSetIterator it, TwoPhaseIterator twoPhaseIterator) {\n    return new Scorer(null) {\n\n      @Override\n      public DocIdSetIterator iterator() {\n        return new DocIdSetIterator() {\n\n          @Override\n          public int docID() {\n            return it.docID();\n          }\n\n          @Override\n          public int nextDoc() throws IOException {\n            if (twoPhaseIterator != null) {\n              throw new UnsupportedOperationException(\"ConjunctionDISI should call the two-phase iterator\");\n            }\n            return it.nextDoc();\n          }\n\n          @Override\n          public int advance(int target) throws IOException {\n            if (twoPhaseIterator != null) {\n              throw new UnsupportedOperationException(\"ConjunctionDISI should call the two-phase iterator\");\n            }\n            return it.advance(target);\n          }\n\n          @Override\n          public long cost() {\n            if (twoPhaseIterator != null) {\n              throw new UnsupportedOperationException(\"ConjunctionDISI should call the two-phase iterator\");\n            }\n            return it.cost();\n          }\n        };\n      }\n\n      @Override\n      public TwoPhaseIterator twoPhaseIterator() {\n        return twoPhaseIterator;\n      }\n\n      @Override\n      public int docID() {\n        if (twoPhaseIterator != null) {\n          throw new UnsupportedOperationException(\"ConjunctionDISI should call the two-phase iterator\");\n        }\n        return it.docID();\n      }\n\n      @Override\n      public float score() throws IOException {\n        return 0;\n      }\n\n      @Override\n      public float maxScore() {\n        return 0;\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Create a {@link Scorer} that wraps the given {@link DocIdSetIterator}. It\n   * also accepts a {@link TwoPhaseIterator} view, which is exposed in\n   * {@link Scorer#twoPhaseIterator()}. When the two-phase view is not null,\n   * then {@link DocIdSetIterator#nextDoc()} and {@link DocIdSetIterator#advance(int)} will raise\n   * an exception in order to make sure that {@link ConjunctionDISI} takes\n   * advantage of the {@link TwoPhaseIterator} view.\n   */\n  private static Scorer scorer(DocIdSetIterator it, TwoPhaseIterator twoPhaseIterator) {\n    return new Scorer(null) {\n\n      @Override\n      public DocIdSetIterator iterator() {\n        return new DocIdSetIterator() {\n\n          @Override\n          public int docID() {\n            return it.docID();\n          }\n\n          @Override\n          public int nextDoc() throws IOException {\n            if (twoPhaseIterator != null) {\n              throw new UnsupportedOperationException(\"ConjunctionDISI should call the two-phase iterator\");\n            }\n            return it.nextDoc();\n          }\n\n          @Override\n          public int advance(int target) throws IOException {\n            if (twoPhaseIterator != null) {\n              throw new UnsupportedOperationException(\"ConjunctionDISI should call the two-phase iterator\");\n            }\n            return it.advance(target);\n          }\n\n          @Override\n          public long cost() {\n            if (twoPhaseIterator != null) {\n              throw new UnsupportedOperationException(\"ConjunctionDISI should call the two-phase iterator\");\n            }\n            return it.cost();\n          }\n        };\n      }\n\n      @Override\n      public TwoPhaseIterator twoPhaseIterator() {\n        return twoPhaseIterator;\n      }\n\n      @Override\n      public int docID() {\n        if (twoPhaseIterator != null) {\n          throw new UnsupportedOperationException(\"ConjunctionDISI should call the two-phase iterator\");\n        }\n        return it.docID();\n      }\n\n      @Override\n      public float score() throws IOException {\n        return 0;\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"417142ff08fda9cf0b72d5133e63097a166c6458","date":1512729693,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestConjunctionDISI#scorer(DocIdSetIterator,TwoPhaseIterator).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestConjunctionDISI#scorer(DocIdSetIterator,TwoPhaseIterator).mjava","sourceNew":"  /**\n   * Create a {@link Scorer} that wraps the given {@link DocIdSetIterator}. It\n   * also accepts a {@link TwoPhaseIterator} view, which is exposed in\n   * {@link Scorer#twoPhaseIterator()}. When the two-phase view is not null,\n   * then {@link DocIdSetIterator#nextDoc()} and {@link DocIdSetIterator#advance(int)} will raise\n   * an exception in order to make sure that {@link ConjunctionDISI} takes\n   * advantage of the {@link TwoPhaseIterator} view.\n   */\n  private static Scorer scorer(DocIdSetIterator it, TwoPhaseIterator twoPhaseIterator) {\n    return new Scorer(null) {\n\n      @Override\n      public DocIdSetIterator iterator() {\n        return new DocIdSetIterator() {\n\n          @Override\n          public int docID() {\n            return it.docID();\n          }\n\n          @Override\n          public int nextDoc() throws IOException {\n            if (twoPhaseIterator != null) {\n              throw new UnsupportedOperationException(\"ConjunctionDISI should call the two-phase iterator\");\n            }\n            return it.nextDoc();\n          }\n\n          @Override\n          public int advance(int target) throws IOException {\n            if (twoPhaseIterator != null) {\n              throw new UnsupportedOperationException(\"ConjunctionDISI should call the two-phase iterator\");\n            }\n            return it.advance(target);\n          }\n\n          @Override\n          public long cost() {\n            if (twoPhaseIterator != null) {\n              throw new UnsupportedOperationException(\"ConjunctionDISI should call the two-phase iterator\");\n            }\n            return it.cost();\n          }\n        };\n      }\n\n      @Override\n      public TwoPhaseIterator twoPhaseIterator() {\n        return twoPhaseIterator;\n      }\n\n      @Override\n      public int docID() {\n        if (twoPhaseIterator != null) {\n          throw new UnsupportedOperationException(\"ConjunctionDISI should call the two-phase iterator\");\n        }\n        return it.docID();\n      }\n\n      @Override\n      public float score() throws IOException {\n        return 0;\n      }\n\n      @Override\n      public float maxScore() {\n        return 0;\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Create a {@link Scorer} that wraps the given {@link DocIdSetIterator}. It\n   * also accepts a {@link TwoPhaseIterator} view, which is exposed in\n   * {@link Scorer#twoPhaseIterator()}. When the two-phase view is not null,\n   * then {@link DocIdSetIterator#nextDoc()} and {@link DocIdSetIterator#advance(int)} will raise\n   * an exception in order to make sure that {@link ConjunctionDISI} takes\n   * advantage of the {@link TwoPhaseIterator} view.\n   */\n  private static Scorer scorer(DocIdSetIterator it, TwoPhaseIterator twoPhaseIterator) {\n    return new Scorer(null) {\n\n      @Override\n      public DocIdSetIterator iterator() {\n        return new DocIdSetIterator() {\n\n          @Override\n          public int docID() {\n            return it.docID();\n          }\n\n          @Override\n          public int nextDoc() throws IOException {\n            if (twoPhaseIterator != null) {\n              throw new UnsupportedOperationException(\"ConjunctionDISI should call the two-phase iterator\");\n            }\n            return it.nextDoc();\n          }\n\n          @Override\n          public int advance(int target) throws IOException {\n            if (twoPhaseIterator != null) {\n              throw new UnsupportedOperationException(\"ConjunctionDISI should call the two-phase iterator\");\n            }\n            return it.advance(target);\n          }\n\n          @Override\n          public long cost() {\n            if (twoPhaseIterator != null) {\n              throw new UnsupportedOperationException(\"ConjunctionDISI should call the two-phase iterator\");\n            }\n            return it.cost();\n          }\n        };\n      }\n\n      @Override\n      public TwoPhaseIterator twoPhaseIterator() {\n        return twoPhaseIterator;\n      }\n\n      @Override\n      public int docID() {\n        if (twoPhaseIterator != null) {\n          throw new UnsupportedOperationException(\"ConjunctionDISI should call the two-phase iterator\");\n        }\n        return it.docID();\n      }\n\n      @Override\n      public float score() throws IOException {\n        return 0;\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"523cc6563c99a55527ef7993efc5413c6648852d","date":1518704038,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestConjunctionDISI#scorer(DocIdSetIterator,TwoPhaseIterator).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestConjunctionDISI#scorer(DocIdSetIterator,TwoPhaseIterator).mjava","sourceNew":"  /**\n   * Create a {@link Scorer} that wraps the given {@link DocIdSetIterator}. It\n   * also accepts a {@link TwoPhaseIterator} view, which is exposed in\n   * {@link Scorer#twoPhaseIterator()}. When the two-phase view is not null,\n   * then {@link DocIdSetIterator#nextDoc()} and {@link DocIdSetIterator#advance(int)} will raise\n   * an exception in order to make sure that {@link ConjunctionDISI} takes\n   * advantage of the {@link TwoPhaseIterator} view.\n   */\n  private static Scorer scorer(DocIdSetIterator it, TwoPhaseIterator twoPhaseIterator) {\n    return new Scorer(null) {\n\n      @Override\n      public DocIdSetIterator iterator() {\n        return new DocIdSetIterator() {\n\n          @Override\n          public int docID() {\n            return it.docID();\n          }\n\n          @Override\n          public int nextDoc() throws IOException {\n            if (twoPhaseIterator != null) {\n              throw new UnsupportedOperationException(\"ConjunctionDISI should call the two-phase iterator\");\n            }\n            return it.nextDoc();\n          }\n\n          @Override\n          public int advance(int target) throws IOException {\n            if (twoPhaseIterator != null) {\n              throw new UnsupportedOperationException(\"ConjunctionDISI should call the two-phase iterator\");\n            }\n            return it.advance(target);\n          }\n\n          @Override\n          public long cost() {\n            if (twoPhaseIterator != null) {\n              throw new UnsupportedOperationException(\"ConjunctionDISI should call the two-phase iterator\");\n            }\n            return it.cost();\n          }\n        };\n      }\n\n      @Override\n      public TwoPhaseIterator twoPhaseIterator() {\n        return twoPhaseIterator;\n      }\n\n      @Override\n      public int docID() {\n        if (twoPhaseIterator != null) {\n          throw new UnsupportedOperationException(\"ConjunctionDISI should call the two-phase iterator\");\n        }\n        return it.docID();\n      }\n\n      @Override\n      public float score() throws IOException {\n        return 0;\n      }\n\n      @Override\n      public float getMaxScore(int upTo) throws IOException {\n        return 0;\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Create a {@link Scorer} that wraps the given {@link DocIdSetIterator}. It\n   * also accepts a {@link TwoPhaseIterator} view, which is exposed in\n   * {@link Scorer#twoPhaseIterator()}. When the two-phase view is not null,\n   * then {@link DocIdSetIterator#nextDoc()} and {@link DocIdSetIterator#advance(int)} will raise\n   * an exception in order to make sure that {@link ConjunctionDISI} takes\n   * advantage of the {@link TwoPhaseIterator} view.\n   */\n  private static Scorer scorer(DocIdSetIterator it, TwoPhaseIterator twoPhaseIterator) {\n    return new Scorer(null) {\n\n      @Override\n      public DocIdSetIterator iterator() {\n        return new DocIdSetIterator() {\n\n          @Override\n          public int docID() {\n            return it.docID();\n          }\n\n          @Override\n          public int nextDoc() throws IOException {\n            if (twoPhaseIterator != null) {\n              throw new UnsupportedOperationException(\"ConjunctionDISI should call the two-phase iterator\");\n            }\n            return it.nextDoc();\n          }\n\n          @Override\n          public int advance(int target) throws IOException {\n            if (twoPhaseIterator != null) {\n              throw new UnsupportedOperationException(\"ConjunctionDISI should call the two-phase iterator\");\n            }\n            return it.advance(target);\n          }\n\n          @Override\n          public long cost() {\n            if (twoPhaseIterator != null) {\n              throw new UnsupportedOperationException(\"ConjunctionDISI should call the two-phase iterator\");\n            }\n            return it.cost();\n          }\n        };\n      }\n\n      @Override\n      public TwoPhaseIterator twoPhaseIterator() {\n        return twoPhaseIterator;\n      }\n\n      @Override\n      public int docID() {\n        if (twoPhaseIterator != null) {\n          throw new UnsupportedOperationException(\"ConjunctionDISI should call the two-phase iterator\");\n        }\n        return it.docID();\n      }\n\n      @Override\n      public float score() throws IOException {\n        return 0;\n      }\n\n      @Override\n      public float maxScore() {\n        return 0;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6dbd758f2776b0129f6b3641b6490ddc68d7b0f3","date":1536316907,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestConjunctionDISI#scorer(DocIdSetIterator,TwoPhaseIterator).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestConjunctionDISI#scorer(DocIdSetIterator,TwoPhaseIterator).mjava","sourceNew":"  /**\n   * Create a {@link Scorer} that wraps the given {@link DocIdSetIterator}. It\n   * also accepts a {@link TwoPhaseIterator} view, which is exposed in\n   * {@link Scorer#twoPhaseIterator()}. When the two-phase view is not null,\n   * then {@link DocIdSetIterator#nextDoc()} and {@link DocIdSetIterator#advance(int)} will raise\n   * an exception in order to make sure that {@link ConjunctionDISI} takes\n   * advantage of the {@link TwoPhaseIterator} view.\n   */\n  private static Scorer scorer(DocIdSetIterator it, TwoPhaseIterator twoPhaseIterator) {\n    return new Scorer(new FakeWeight()) {\n\n      @Override\n      public DocIdSetIterator iterator() {\n        return new DocIdSetIterator() {\n\n          @Override\n          public int docID() {\n            return it.docID();\n          }\n\n          @Override\n          public int nextDoc() throws IOException {\n            if (twoPhaseIterator != null) {\n              throw new UnsupportedOperationException(\"ConjunctionDISI should call the two-phase iterator\");\n            }\n            return it.nextDoc();\n          }\n\n          @Override\n          public int advance(int target) throws IOException {\n            if (twoPhaseIterator != null) {\n              throw new UnsupportedOperationException(\"ConjunctionDISI should call the two-phase iterator\");\n            }\n            return it.advance(target);\n          }\n\n          @Override\n          public long cost() {\n            if (twoPhaseIterator != null) {\n              throw new UnsupportedOperationException(\"ConjunctionDISI should call the two-phase iterator\");\n            }\n            return it.cost();\n          }\n        };\n      }\n\n      @Override\n      public TwoPhaseIterator twoPhaseIterator() {\n        return twoPhaseIterator;\n      }\n\n      @Override\n      public int docID() {\n        if (twoPhaseIterator != null) {\n          throw new UnsupportedOperationException(\"ConjunctionDISI should call the two-phase iterator\");\n        }\n        return it.docID();\n      }\n\n      @Override\n      public float score() throws IOException {\n        return 0;\n      }\n\n      @Override\n      public float getMaxScore(int upTo) throws IOException {\n        return 0;\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Create a {@link Scorer} that wraps the given {@link DocIdSetIterator}. It\n   * also accepts a {@link TwoPhaseIterator} view, which is exposed in\n   * {@link Scorer#twoPhaseIterator()}. When the two-phase view is not null,\n   * then {@link DocIdSetIterator#nextDoc()} and {@link DocIdSetIterator#advance(int)} will raise\n   * an exception in order to make sure that {@link ConjunctionDISI} takes\n   * advantage of the {@link TwoPhaseIterator} view.\n   */\n  private static Scorer scorer(DocIdSetIterator it, TwoPhaseIterator twoPhaseIterator) {\n    return new Scorer(null) {\n\n      @Override\n      public DocIdSetIterator iterator() {\n        return new DocIdSetIterator() {\n\n          @Override\n          public int docID() {\n            return it.docID();\n          }\n\n          @Override\n          public int nextDoc() throws IOException {\n            if (twoPhaseIterator != null) {\n              throw new UnsupportedOperationException(\"ConjunctionDISI should call the two-phase iterator\");\n            }\n            return it.nextDoc();\n          }\n\n          @Override\n          public int advance(int target) throws IOException {\n            if (twoPhaseIterator != null) {\n              throw new UnsupportedOperationException(\"ConjunctionDISI should call the two-phase iterator\");\n            }\n            return it.advance(target);\n          }\n\n          @Override\n          public long cost() {\n            if (twoPhaseIterator != null) {\n              throw new UnsupportedOperationException(\"ConjunctionDISI should call the two-phase iterator\");\n            }\n            return it.cost();\n          }\n        };\n      }\n\n      @Override\n      public TwoPhaseIterator twoPhaseIterator() {\n        return twoPhaseIterator;\n      }\n\n      @Override\n      public int docID() {\n        if (twoPhaseIterator != null) {\n          throw new UnsupportedOperationException(\"ConjunctionDISI should call the two-phase iterator\");\n        }\n        return it.docID();\n      }\n\n      @Override\n      public float score() throws IOException {\n        return 0;\n      }\n\n      @Override\n      public float getMaxScore(int upTo) throws IOException {\n        return 0;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a3d6eb0072094d94624002318ba2d4c840946833"],"dc14da055888b63b4f8c922d0e1579f3cb315ad7":["7dd748bb245633a8195281556bb0e68a6ea97d18"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6dbd758f2776b0129f6b3641b6490ddc68d7b0f3":["523cc6563c99a55527ef7993efc5413c6648852d"],"a3d6eb0072094d94624002318ba2d4c840946833":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["dc14da055888b63b4f8c922d0e1579f3cb315ad7"],"7dd748bb245633a8195281556bb0e68a6ea97d18":["a3d6eb0072094d94624002318ba2d4c840946833"],"523cc6563c99a55527ef7993efc5413c6648852d":["417142ff08fda9cf0b72d5133e63097a166c6458"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6dbd758f2776b0129f6b3641b6490ddc68d7b0f3"],"417142ff08fda9cf0b72d5133e63097a166c6458":["dc14da055888b63b4f8c922d0e1579f3cb315ad7","9fc47cb7b4346802411bb432f501ed0673d7119e"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"dc14da055888b63b4f8c922d0e1579f3cb315ad7":["9fc47cb7b4346802411bb432f501ed0673d7119e","417142ff08fda9cf0b72d5133e63097a166c6458"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","a3d6eb0072094d94624002318ba2d4c840946833"],"6dbd758f2776b0129f6b3641b6490ddc68d7b0f3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a3d6eb0072094d94624002318ba2d4c840946833":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","7dd748bb245633a8195281556bb0e68a6ea97d18"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["417142ff08fda9cf0b72d5133e63097a166c6458"],"7dd748bb245633a8195281556bb0e68a6ea97d18":["dc14da055888b63b4f8c922d0e1579f3cb315ad7"],"523cc6563c99a55527ef7993efc5413c6648852d":["6dbd758f2776b0129f6b3641b6490ddc68d7b0f3"],"417142ff08fda9cf0b72d5133e63097a166c6458":["523cc6563c99a55527ef7993efc5413c6648852d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}