{"path":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/nodes/QueryNodeImpl#getChildren().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/nodes/QueryNodeImpl#getChildren().mjava","pathOld":"modules/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/nodes/QueryNodeImpl#getChildren().mjava","sourceNew":"  /**\n   * @return a List for QueryNode object. Returns null, for nodes that do not\n   *         contain children. All leaf Nodes return null.\n   */\n  public final List<QueryNode> getChildren() {\n    if (isLeaf() || this.clauses == null) {\n      return null;\n    }\n    return this.clauses;\n  }\n\n","sourceOld":"  /**\n   * @return a List for QueryNode object. Returns null, for nodes that do not\n   *         contain children. All leaf Nodes return null.\n   */\n  public final List<QueryNode> getChildren() {\n    if (isLeaf() || this.clauses == null) {\n      return null;\n    }\n    return this.clauses;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/nodes/QueryNodeImpl#getChildren().mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/nodes/QueryNodeImpl#getChildren().mjava","sourceNew":"  /**\n   * @return a List for QueryNode object. Returns null, for nodes that do not\n   *         contain children. All leaf Nodes return null.\n   */\n  @Override\n  public final List<QueryNode> getChildren() {\n    if (isLeaf() || this.clauses == null) {\n      return null;\n    }\n    return this.clauses;\n  }\n\n","sourceOld":"  /**\n   * @return a List for QueryNode object. Returns null, for nodes that do not\n   *         contain children. All leaf Nodes return null.\n   */\n  public final List<QueryNode> getChildren() {\n    if (isLeaf() || this.clauses == null) {\n      return null;\n    }\n    return this.clauses;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/nodes/QueryNodeImpl#getChildren().mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/nodes/QueryNodeImpl#getChildren().mjava","sourceNew":"  /**\n   * @return a List for QueryNode object. Returns null, for nodes that do not\n   *         contain children. All leaf Nodes return null.\n   */\n  @Override\n  public final List<QueryNode> getChildren() {\n    if (isLeaf() || this.clauses == null) {\n      return null;\n    }\n    return this.clauses;\n  }\n\n","sourceOld":"  /**\n   * @return a List for QueryNode object. Returns null, for nodes that do not\n   *         contain children. All leaf Nodes return null.\n   */\n  public final List<QueryNode> getChildren() {\n    if (isLeaf() || this.clauses == null) {\n      return null;\n    }\n    return this.clauses;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"917ebe9ddaf53995b52117fefb375be692579d63","date":1390362584,"type":3,"author":"Adriano Crestani Campos","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/nodes/QueryNodeImpl#getChildren().mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/nodes/QueryNodeImpl#getChildren().mjava","sourceNew":"  /**\n   * @return a List for QueryNode object. Returns null, for nodes that do not\n   *         contain children. All leaf Nodes return null.\n   */\n  @Override\n  public final List<QueryNode> getChildren() {\n    if (isLeaf() || this.clauses == null) {\n      return null;\n    }\n    return new ArrayList<QueryNode>(this.clauses);\n  }\n\n","sourceOld":"  /**\n   * @return a List for QueryNode object. Returns null, for nodes that do not\n   *         contain children. All leaf Nodes return null.\n   */\n  @Override\n  public final List<QueryNode> getChildren() {\n    if (isLeaf() || this.clauses == null) {\n      return null;\n    }\n    return this.clauses;\n  }\n\n","bugFix":["b955a87bc7c5daeda1ed56821ec0bec2e8789e44"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/nodes/QueryNodeImpl#getChildren().mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/nodes/QueryNodeImpl#getChildren().mjava","sourceNew":"  /**\n   * @return a List for QueryNode object. Returns null, for nodes that do not\n   *         contain children. All leaf Nodes return null.\n   */\n  @Override\n  public final List<QueryNode> getChildren() {\n    if (isLeaf() || this.clauses == null) {\n      return null;\n    }\n    return new ArrayList<>(this.clauses);\n  }\n\n","sourceOld":"  /**\n   * @return a List for QueryNode object. Returns null, for nodes that do not\n   *         contain children. All leaf Nodes return null.\n   */\n  @Override\n  public final List<QueryNode> getChildren() {\n    if (isLeaf() || this.clauses == null) {\n      return null;\n    }\n    return new ArrayList<QueryNode>(this.clauses);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["b89678825b68eccaf09e6ab71675fc0b0af1e099","7530de27b87b961b51f01bd1299b7004d46e8823"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["917ebe9ddaf53995b52117fefb375be692579d63"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"917ebe9ddaf53995b52117fefb375be692579d63":["7530de27b87b961b51f01bd1299b7004d46e8823"],"7530de27b87b961b51f01bd1299b7004d46e8823":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","7530de27b87b961b51f01bd1299b7004d46e8823"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"917ebe9ddaf53995b52117fefb375be692579d63":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"7530de27b87b961b51f01bd1299b7004d46e8823":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","917ebe9ddaf53995b52117fefb375be692579d63"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}