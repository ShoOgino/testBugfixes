{"path":"solr/core/src/test/org/apache/solr/analysis/TestReversedWildcardFilterFactory#wasReversed(SolrQueryParser,String).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/analysis/TestReversedWildcardFilterFactory#wasReversed(SolrQueryParser,String).mjava","pathOld":"solr/src/test/org/apache/solr/analysis/TestReversedWildcardFilterFactory#wasReversed(SolrQueryParser,String).mjava","sourceNew":"  /** fragile assert: depends on our implementation, but cleanest way to check for now */ \n  private boolean wasReversed(SolrQueryParser qp, String query) throws Exception {\n    Query q = qp.parse(query);\n    if (!(q instanceof AutomatonQuery))\n      return false;\n    // this is a hack to get the protected Automaton field in AutomatonQuery, \n    // may break in later lucene versions - we have no getter... for good reasons.\n    final Field automatonField = AutomatonQuery.class.getDeclaredField(\"automaton\");\n    automatonField.setAccessible(true);\n    Automaton automaton = (Automaton) automatonField.get(q);\n    String prefix = SpecialOperations.getCommonPrefix(automaton);\n    return prefix.length() > 0 && prefix.charAt(0) == '\\u0001';\n  }\n\n","sourceOld":"  /** fragile assert: depends on our implementation, but cleanest way to check for now */ \n  private boolean wasReversed(SolrQueryParser qp, String query) throws Exception {\n    Query q = qp.parse(query);\n    if (!(q instanceof AutomatonQuery))\n      return false;\n    // this is a hack to get the protected Automaton field in AutomatonQuery, \n    // may break in later lucene versions - we have no getter... for good reasons.\n    final Field automatonField = AutomatonQuery.class.getDeclaredField(\"automaton\");\n    automatonField.setAccessible(true);\n    Automaton automaton = (Automaton) automatonField.get(q);\n    String prefix = SpecialOperations.getCommonPrefix(automaton);\n    return prefix.length() > 0 && prefix.charAt(0) == '\\u0001';\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/analysis/TestReversedWildcardFilterFactory#wasReversed(SolrQueryParser,String).mjava","pathOld":"solr/src/test/org/apache/solr/analysis/TestReversedWildcardFilterFactory#wasReversed(SolrQueryParser,String).mjava","sourceNew":"  /** fragile assert: depends on our implementation, but cleanest way to check for now */ \n  private boolean wasReversed(SolrQueryParser qp, String query) throws Exception {\n    Query q = qp.parse(query);\n    if (!(q instanceof AutomatonQuery))\n      return false;\n    // this is a hack to get the protected Automaton field in AutomatonQuery, \n    // may break in later lucene versions - we have no getter... for good reasons.\n    final Field automatonField = AutomatonQuery.class.getDeclaredField(\"automaton\");\n    automatonField.setAccessible(true);\n    Automaton automaton = (Automaton) automatonField.get(q);\n    String prefix = SpecialOperations.getCommonPrefix(automaton);\n    return prefix.length() > 0 && prefix.charAt(0) == '\\u0001';\n  }\n\n","sourceOld":"  /** fragile assert: depends on our implementation, but cleanest way to check for now */ \n  private boolean wasReversed(SolrQueryParser qp, String query) throws Exception {\n    Query q = qp.parse(query);\n    if (!(q instanceof AutomatonQuery))\n      return false;\n    // this is a hack to get the protected Automaton field in AutomatonQuery, \n    // may break in later lucene versions - we have no getter... for good reasons.\n    final Field automatonField = AutomatonQuery.class.getDeclaredField(\"automaton\");\n    automatonField.setAccessible(true);\n    Automaton automaton = (Automaton) automatonField.get(q);\n    String prefix = SpecialOperations.getCommonPrefix(automaton);\n    return prefix.length() > 0 && prefix.charAt(0) == '\\u0001';\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/analysis/TestReversedWildcardFilterFactory#wasReversed(SolrQueryParser,String).mjava","pathOld":"solr/src/test/org/apache/solr/analysis/TestReversedWildcardFilterFactory#wasReversed(SolrQueryParser,String).mjava","sourceNew":"  /** fragile assert: depends on our implementation, but cleanest way to check for now */ \n  private boolean wasReversed(SolrQueryParser qp, String query) throws Exception {\n    Query q = qp.parse(query);\n    if (!(q instanceof AutomatonQuery))\n      return false;\n    // this is a hack to get the protected Automaton field in AutomatonQuery, \n    // may break in later lucene versions - we have no getter... for good reasons.\n    final Field automatonField = AutomatonQuery.class.getDeclaredField(\"automaton\");\n    automatonField.setAccessible(true);\n    Automaton automaton = (Automaton) automatonField.get(q);\n    String prefix = SpecialOperations.getCommonPrefix(automaton);\n    return prefix.length() > 0 && prefix.charAt(0) == '\\u0001';\n  }\n\n","sourceOld":"  /** fragile assert: depends on our implementation, but cleanest way to check for now */ \n  private boolean wasReversed(SolrQueryParser qp, String query) throws Exception {\n    Query q = qp.parse(query);\n    if (!(q instanceof AutomatonQuery))\n      return false;\n    // this is a hack to get the protected Automaton field in AutomatonQuery, \n    // may break in later lucene versions - we have no getter... for good reasons.\n    final Field automatonField = AutomatonQuery.class.getDeclaredField(\"automaton\");\n    automatonField.setAccessible(true);\n    Automaton automaton = (Automaton) automatonField.get(q);\n    String prefix = SpecialOperations.getCommonPrefix(automaton);\n    return prefix.length() > 0 && prefix.charAt(0) == '\\u0001';\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fa64435b5902ce266c23755a4a00691a3285dab8","date":1347243290,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/analysis/TestReversedWildcardFilterFactory#wasReversed(SolrQueryParser,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/analysis/TestReversedWildcardFilterFactory#wasReversed(SolrQueryParser,String).mjava","sourceNew":"  /** fragile assert: depends on our implementation, but cleanest way to check for now */ \n  private boolean wasReversed(SolrQueryParser qp, String query) throws Exception {\n    Query q = qp.parse(query);\n    if (!(q instanceof AutomatonQuery))\n      return false;\n    // this is a hack to get the protected Automaton field in AutomatonQuery,\n    // may break in later lucene versions - we have no getter... for good reasons.\n    final Field automatonField = AutomatonQuery.class.getDeclaredField(\"automaton\");\n    automatonField.setAccessible(true);\n    Automaton automaton = (Automaton) automatonField.get(q);\n    String prefix = SpecialOperations.getCommonPrefix(automaton);\n    return prefix.length() > 0 && prefix.charAt(0) == '\\u0001';\n  }\n\n","sourceOld":"  /** fragile assert: depends on our implementation, but cleanest way to check for now */ \n  private boolean wasReversed(SolrQueryParser qp, String query) throws Exception {\n    Query q = qp.parse(query);\n    if (!(q instanceof AutomatonQuery))\n      return false;\n    // this is a hack to get the protected Automaton field in AutomatonQuery, \n    // may break in later lucene versions - we have no getter... for good reasons.\n    final Field automatonField = AutomatonQuery.class.getDeclaredField(\"automaton\");\n    automatonField.setAccessible(true);\n    Automaton automaton = (Automaton) automatonField.get(q);\n    String prefix = SpecialOperations.getCommonPrefix(automaton);\n    return prefix.length() > 0 && prefix.charAt(0) == '\\u0001';\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f4ef381bf0c2d618c6db830d3dd668c6901c05a","date":1402592253,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/analysis/TestReversedWildcardFilterFactory#wasReversed(SolrQueryParser,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/analysis/TestReversedWildcardFilterFactory#wasReversed(SolrQueryParser,String).mjava","sourceNew":"  /** fragile assert: depends on our implementation, but cleanest way to check for now */ \n  private boolean wasReversed(SolrQueryParser qp, String query) throws Exception {\n    Query q = qp.parse(query);\n    if (!(q instanceof AutomatonQuery))\n      return false;\n    LightAutomaton automaton = ((AutomatonQuery) q).getLightAutomaton();\n    String prefix = SpecialOperations.getCommonPrefix(automaton);\n    return prefix.length() > 0 && prefix.charAt(0) == '\\u0001';\n  }\n\n","sourceOld":"  /** fragile assert: depends on our implementation, but cleanest way to check for now */ \n  private boolean wasReversed(SolrQueryParser qp, String query) throws Exception {\n    Query q = qp.parse(query);\n    if (!(q instanceof AutomatonQuery))\n      return false;\n    // this is a hack to get the protected Automaton field in AutomatonQuery,\n    // may break in later lucene versions - we have no getter... for good reasons.\n    final Field automatonField = AutomatonQuery.class.getDeclaredField(\"automaton\");\n    automatonField.setAccessible(true);\n    Automaton automaton = (Automaton) automatonField.get(q);\n    String prefix = SpecialOperations.getCommonPrefix(automaton);\n    return prefix.length() > 0 && prefix.charAt(0) == '\\u0001';\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"91969cc03a4f4b731d4a2ba991fdc9f1119a104e","date":1402602795,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/analysis/TestReversedWildcardFilterFactory#wasReversed(SolrQueryParser,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/analysis/TestReversedWildcardFilterFactory#wasReversed(SolrQueryParser,String).mjava","sourceNew":"  /** fragile assert: depends on our implementation, but cleanest way to check for now */ \n  private boolean wasReversed(SolrQueryParser qp, String query) throws Exception {\n    Query q = qp.parse(query);\n    if (!(q instanceof AutomatonQuery)) {\n      return false;\n    }\n    LightAutomaton automaton = ((AutomatonQuery) q).getLightAutomaton();\n    String prefix = SpecialOperations.getCommonPrefix(BasicOperations.determinize(automaton));\n    return prefix.length() > 0 && prefix.charAt(0) == '\\u0001';\n  }\n\n","sourceOld":"  /** fragile assert: depends on our implementation, but cleanest way to check for now */ \n  private boolean wasReversed(SolrQueryParser qp, String query) throws Exception {\n    Query q = qp.parse(query);\n    if (!(q instanceof AutomatonQuery))\n      return false;\n    LightAutomaton automaton = ((AutomatonQuery) q).getLightAutomaton();\n    String prefix = SpecialOperations.getCommonPrefix(automaton);\n    return prefix.length() > 0 && prefix.charAt(0) == '\\u0001';\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ca1c732df8923f5624f6c06b1dcca9e69d98c96","date":1402957391,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/analysis/TestReversedWildcardFilterFactory#wasReversed(SolrQueryParser,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/analysis/TestReversedWildcardFilterFactory#wasReversed(SolrQueryParser,String).mjava","sourceNew":"  /** fragile assert: depends on our implementation, but cleanest way to check for now */ \n  private boolean wasReversed(SolrQueryParser qp, String query) throws Exception {\n    Query q = qp.parse(query);\n    if (!(q instanceof AutomatonQuery)) {\n      return false;\n    }\n    Automaton automaton = ((AutomatonQuery) q).getAutomaton();\n    String prefix = Operations.getCommonPrefix(Operations.determinize(automaton));\n    return prefix.length() > 0 && prefix.charAt(0) == '\\u0001';\n  }\n\n","sourceOld":"  /** fragile assert: depends on our implementation, but cleanest way to check for now */ \n  private boolean wasReversed(SolrQueryParser qp, String query) throws Exception {\n    Query q = qp.parse(query);\n    if (!(q instanceof AutomatonQuery)) {\n      return false;\n    }\n    LightAutomaton automaton = ((AutomatonQuery) q).getLightAutomaton();\n    String prefix = SpecialOperations.getCommonPrefix(BasicOperations.determinize(automaton));\n    return prefix.length() > 0 && prefix.charAt(0) == '\\u0001';\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c84485629d80d203608e8975a1139de9933cc38","date":1403166128,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/analysis/TestReversedWildcardFilterFactory#wasReversed(SolrQueryParser,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/analysis/TestReversedWildcardFilterFactory#wasReversed(SolrQueryParser,String).mjava","sourceNew":"  /** fragile assert: depends on our implementation, but cleanest way to check for now */ \n  private boolean wasReversed(SolrQueryParser qp, String query) throws Exception {\n    Query q = qp.parse(query);\n    if (!(q instanceof AutomatonQuery)) {\n      return false;\n    }\n    Automaton automaton = ((AutomatonQuery) q).getAutomaton();\n    String prefix = Operations.getCommonPrefix(Operations.determinize(automaton));\n    return prefix.length() > 0 && prefix.charAt(0) == '\\u0001';\n  }\n\n","sourceOld":"  /** fragile assert: depends on our implementation, but cleanest way to check for now */ \n  private boolean wasReversed(SolrQueryParser qp, String query) throws Exception {\n    Query q = qp.parse(query);\n    if (!(q instanceof AutomatonQuery))\n      return false;\n    // this is a hack to get the protected Automaton field in AutomatonQuery,\n    // may break in later lucene versions - we have no getter... for good reasons.\n    final Field automatonField = AutomatonQuery.class.getDeclaredField(\"automaton\");\n    automatonField.setAccessible(true);\n    Automaton automaton = (Automaton) automatonField.get(q);\n    String prefix = SpecialOperations.getCommonPrefix(automaton);\n    return prefix.length() > 0 && prefix.charAt(0) == '\\u0001';\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b316f82baae88f5e279893a9cb7eee51fd8902f","date":1415131390,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/analysis/TestReversedWildcardFilterFactory#wasReversed(SolrQueryParser,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/analysis/TestReversedWildcardFilterFactory#wasReversed(SolrQueryParser,String).mjava","sourceNew":"  /** fragile assert: depends on our implementation, but cleanest way to check for now */ \n  private boolean wasReversed(SolrQueryParser qp, String query) throws Exception {\n    Query q = qp.parse(query);\n    if (!(q instanceof AutomatonQuery)) {\n      return false;\n    }\n    Automaton automaton = ((AutomatonQuery) q).getAutomaton();\n    String prefix = Operations.getCommonPrefix(Operations.determinize(automaton,\n      Operations.DEFAULT_MAX_DETERMINIZED_STATES));\n    return prefix.length() > 0 && prefix.charAt(0) == '\\u0001';\n  }\n\n","sourceOld":"  /** fragile assert: depends on our implementation, but cleanest way to check for now */ \n  private boolean wasReversed(SolrQueryParser qp, String query) throws Exception {\n    Query q = qp.parse(query);\n    if (!(q instanceof AutomatonQuery)) {\n      return false;\n    }\n    Automaton automaton = ((AutomatonQuery) q).getAutomaton();\n    String prefix = Operations.getCommonPrefix(Operations.determinize(automaton));\n    return prefix.length() > 0 && prefix.charAt(0) == '\\u0001';\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fa64435b5902ce266c23755a4a00691a3285dab8":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["91969cc03a4f4b731d4a2ba991fdc9f1119a104e"],"7f4ef381bf0c2d618c6db830d3dd668c6901c05a":["fa64435b5902ce266c23755a4a00691a3285dab8"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8b316f82baae88f5e279893a9cb7eee51fd8902f":["5c84485629d80d203608e8975a1139de9933cc38"],"91969cc03a4f4b731d4a2ba991fdc9f1119a104e":["7f4ef381bf0c2d618c6db830d3dd668c6901c05a"],"5c84485629d80d203608e8975a1139de9933cc38":["fa64435b5902ce266c23755a4a00691a3285dab8","4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8b316f82baae88f5e279893a9cb7eee51fd8902f"]},"commit2Childs":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"fa64435b5902ce266c23755a4a00691a3285dab8":["7f4ef381bf0c2d618c6db830d3dd668c6901c05a","5c84485629d80d203608e8975a1139de9933cc38"],"c26f00b574427b55127e869b935845554afde1fa":["fa64435b5902ce266c23755a4a00691a3285dab8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["5c84485629d80d203608e8975a1139de9933cc38"],"7f4ef381bf0c2d618c6db830d3dd668c6901c05a":["91969cc03a4f4b731d4a2ba991fdc9f1119a104e"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"91969cc03a4f4b731d4a2ba991fdc9f1119a104e":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"8b316f82baae88f5e279893a9cb7eee51fd8902f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5c84485629d80d203608e8975a1139de9933cc38":["8b316f82baae88f5e279893a9cb7eee51fd8902f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}