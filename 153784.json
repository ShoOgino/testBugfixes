{"path":"src/java/org/apache/solr/request/TextResponseWriter#writeVal(String,Object).mjava","commits":[{"id":"434ff4225627b937a533128f8746eb1e9009fc95","date":1153247240,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/request/TextResponseWriter#writeVal(String,Object).mjava","pathOld":"/dev/null","sourceNew":"  public void writeVal(String name, Object val) throws IOException {\r\n\r\n    // if there get to be enough types, perhaps hashing on the type\r\n    // to get a handler might be faster (but types must be exact to do that...)\r\n\r\n    // go in order of most common to least common\r\n    if (val==null) {\r\n      writeNull(name);\r\n    } else if (val instanceof String) {\r\n      writeStr(name, val.toString(), true);\r\n      // micro-optimization... using toString() avoids a cast first\r\n    } else if (val instanceof Integer) {\r\n      writeInt(name, val.toString());\r\n    } else if (val instanceof Boolean) {\r\n      writeBool(name, val.toString());\r\n    } else if (val instanceof Long) {\r\n      writeLong(name, val.toString());\r\n    } else if (val instanceof Date) {\r\n      writeDate(name,(Date)val);\r\n    } else if (val instanceof Float) {\r\n      // we pass the float instead of using toString() because\r\n      // it may need special formatting. same for double.\r\n      writeFloat(name, ((Float)val).floatValue());\r\n    } else if (val instanceof Double) {\r\n      writeDouble(name, ((Double)val).doubleValue());\r\n    } else if (val instanceof Document) {\r\n      writeDoc(name, (Document)val, returnFields, 0.0f, false);\r\n    } else if (val instanceof DocList) {\r\n      // requires access to IndexReader\r\n      writeDocList(name, (DocList)val, returnFields,null);\r\n    // }\r\n    // else if (val instanceof DocSet) {\r\n    // how do we know what fields to read?\r\n    // todo: have a DocList/DocSet wrapper that\r\n    // restricts the fields to write...?\r\n    } else if (val instanceof Map) {\r\n      writeMap(name, (Map)val, false, true);\r\n    } else if (val instanceof NamedList) {\r\n      writeNamedList(name, (NamedList)val);\r\n    } else if (val instanceof Collection) {\r\n      writeArray(name,(Collection)val);\r\n    } else if (val instanceof Object[]) {\r\n      writeArray(name,(Object[])val);\r\n    } else {\r\n      // default... for debugging only\r\n      writeStr(name, val.getClass().getName() + ':' + val.toString(), true);\r\n    }\r\n  }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0c0e301b711811c6aaee90440cc1a7925fdd1a1e","date":1153259525,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/request/TextResponseWriter#writeVal(String,Object).mjava","pathOld":"src/java/org/apache/solr/request/TextResponseWriter#writeVal(String,Object).mjava","sourceNew":"  public void writeVal(String name, Object val) throws IOException {\n\n    // if there get to be enough types, perhaps hashing on the type\n    // to get a handler might be faster (but types must be exact to do that...)\n\n    // go in order of most common to least common\n    if (val==null) {\n      writeNull(name);\n    } else if (val instanceof String) {\n      writeStr(name, val.toString(), true);\n      // micro-optimization... using toString() avoids a cast first\n    } else if (val instanceof Integer) {\n      writeInt(name, val.toString());\n    } else if (val instanceof Boolean) {\n      writeBool(name, val.toString());\n    } else if (val instanceof Long) {\n      writeLong(name, val.toString());\n    } else if (val instanceof Date) {\n      writeDate(name,(Date)val);\n    } else if (val instanceof Float) {\n      // we pass the float instead of using toString() because\n      // it may need special formatting. same for double.\n      writeFloat(name, ((Float)val).floatValue());\n    } else if (val instanceof Double) {\n      writeDouble(name, ((Double)val).doubleValue());\n    } else if (val instanceof Document) {\n      writeDoc(name, (Document)val, returnFields, 0.0f, false);\n    } else if (val instanceof DocList) {\n      // requires access to IndexReader\n      writeDocList(name, (DocList)val, returnFields,null);\n    // }\n    // else if (val instanceof DocSet) {\n    // how do we know what fields to read?\n    // todo: have a DocList/DocSet wrapper that\n    // restricts the fields to write...?\n    } else if (val instanceof Map) {\n      writeMap(name, (Map)val, false, true);\n    } else if (val instanceof NamedList) {\n      writeNamedList(name, (NamedList)val);\n    } else if (val instanceof Collection) {\n      writeArray(name,(Collection)val);\n    } else if (val instanceof Object[]) {\n      writeArray(name,(Object[])val);\n    } else {\n      // default... for debugging only\n      writeStr(name, val.getClass().getName() + ':' + val.toString(), true);\n    }\n  }\n\n","sourceOld":"  public void writeVal(String name, Object val) throws IOException {\r\n\r\n    // if there get to be enough types, perhaps hashing on the type\r\n    // to get a handler might be faster (but types must be exact to do that...)\r\n\r\n    // go in order of most common to least common\r\n    if (val==null) {\r\n      writeNull(name);\r\n    } else if (val instanceof String) {\r\n      writeStr(name, val.toString(), true);\r\n      // micro-optimization... using toString() avoids a cast first\r\n    } else if (val instanceof Integer) {\r\n      writeInt(name, val.toString());\r\n    } else if (val instanceof Boolean) {\r\n      writeBool(name, val.toString());\r\n    } else if (val instanceof Long) {\r\n      writeLong(name, val.toString());\r\n    } else if (val instanceof Date) {\r\n      writeDate(name,(Date)val);\r\n    } else if (val instanceof Float) {\r\n      // we pass the float instead of using toString() because\r\n      // it may need special formatting. same for double.\r\n      writeFloat(name, ((Float)val).floatValue());\r\n    } else if (val instanceof Double) {\r\n      writeDouble(name, ((Double)val).doubleValue());\r\n    } else if (val instanceof Document) {\r\n      writeDoc(name, (Document)val, returnFields, 0.0f, false);\r\n    } else if (val instanceof DocList) {\r\n      // requires access to IndexReader\r\n      writeDocList(name, (DocList)val, returnFields,null);\r\n    // }\r\n    // else if (val instanceof DocSet) {\r\n    // how do we know what fields to read?\r\n    // todo: have a DocList/DocSet wrapper that\r\n    // restricts the fields to write...?\r\n    } else if (val instanceof Map) {\r\n      writeMap(name, (Map)val, false, true);\r\n    } else if (val instanceof NamedList) {\r\n      writeNamedList(name, (NamedList)val);\r\n    } else if (val instanceof Collection) {\r\n      writeArray(name,(Collection)val);\r\n    } else if (val instanceof Object[]) {\r\n      writeArray(name,(Object[])val);\r\n    } else {\r\n      // default... for debugging only\r\n      writeStr(name, val.getClass().getName() + ':' + val.toString(), true);\r\n    }\r\n  }\r\n\n","bugFix":null,"bugIntro":["c5892bdf887aeb6dcc06096dd9b4a7363513eff7","c5892bdf887aeb6dcc06096dd9b4a7363513eff7","c5892bdf887aeb6dcc06096dd9b4a7363513eff7"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"dd6bbc7bb83faaa41918157227a3048310685b35","date":1172960487,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/request/TextResponseWriter#writeVal(String,Object).mjava","pathOld":"src/java/org/apache/solr/request/TextResponseWriter#writeVal(String,Object).mjava","sourceNew":"  public void writeVal(String name, Object val) throws IOException {\n\n    // if there get to be enough types, perhaps hashing on the type\n    // to get a handler might be faster (but types must be exact to do that...)\n\n    // go in order of most common to least common\n    if (val==null) {\n      writeNull(name);\n    } else if (val instanceof String) {\n      writeStr(name, val.toString(), true);\n      // micro-optimization... using toString() avoids a cast first\n    } else if (val instanceof Integer) {\n      writeInt(name, val.toString());\n    } else if (val instanceof Boolean) {\n      writeBool(name, val.toString());\n    } else if (val instanceof Long) {\n      writeLong(name, val.toString());\n    } else if (val instanceof Date) {\n      writeDate(name,(Date)val);\n    } else if (val instanceof Float) {\n      // we pass the float instead of using toString() because\n      // it may need special formatting. same for double.\n      writeFloat(name, ((Float)val).floatValue());\n    } else if (val instanceof Double) {\n      writeDouble(name, ((Double)val).doubleValue());\n    } else if (val instanceof Document) {\n      writeDoc(name, (Document)val, returnFields, 0.0f, false);\n    } else if (val instanceof DocList) {\n      // requires access to IndexReader\n      writeDocList(name, (DocList)val, returnFields,null);\n    // }\n    // else if (val instanceof DocSet) {\n    // how do we know what fields to read?\n    // todo: have a DocList/DocSet wrapper that\n    // restricts the fields to write...?\n    } else if (val instanceof Map) {\n      writeMap(name, (Map)val, false, true);\n    } else if (val instanceof NamedList) {\n      writeNamedList(name, (NamedList)val);\n    } else if (val instanceof Iterable) {\n      writeArray(name,((Iterable)val).iterator());\n    } else if (val instanceof Object[]) {\n      writeArray(name,(Object[])val);\n    } else if (val instanceof Iterator) {\n      writeArray(name,(Iterator)val);\n    } else {\n      // default... for debugging only\n      writeStr(name, val.getClass().getName() + ':' + val.toString(), true);\n    }\n  }\n\n","sourceOld":"  public void writeVal(String name, Object val) throws IOException {\n\n    // if there get to be enough types, perhaps hashing on the type\n    // to get a handler might be faster (but types must be exact to do that...)\n\n    // go in order of most common to least common\n    if (val==null) {\n      writeNull(name);\n    } else if (val instanceof String) {\n      writeStr(name, val.toString(), true);\n      // micro-optimization... using toString() avoids a cast first\n    } else if (val instanceof Integer) {\n      writeInt(name, val.toString());\n    } else if (val instanceof Boolean) {\n      writeBool(name, val.toString());\n    } else if (val instanceof Long) {\n      writeLong(name, val.toString());\n    } else if (val instanceof Date) {\n      writeDate(name,(Date)val);\n    } else if (val instanceof Float) {\n      // we pass the float instead of using toString() because\n      // it may need special formatting. same for double.\n      writeFloat(name, ((Float)val).floatValue());\n    } else if (val instanceof Double) {\n      writeDouble(name, ((Double)val).doubleValue());\n    } else if (val instanceof Document) {\n      writeDoc(name, (Document)val, returnFields, 0.0f, false);\n    } else if (val instanceof DocList) {\n      // requires access to IndexReader\n      writeDocList(name, (DocList)val, returnFields,null);\n    // }\n    // else if (val instanceof DocSet) {\n    // how do we know what fields to read?\n    // todo: have a DocList/DocSet wrapper that\n    // restricts the fields to write...?\n    } else if (val instanceof Map) {\n      writeMap(name, (Map)val, false, true);\n    } else if (val instanceof NamedList) {\n      writeNamedList(name, (NamedList)val);\n    } else if (val instanceof Collection) {\n      writeArray(name,(Collection)val);\n    } else if (val instanceof Object[]) {\n      writeArray(name,(Object[])val);\n    } else {\n      // default... for debugging only\n      writeStr(name, val.getClass().getName() + ':' + val.toString(), true);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c451686dba22c9c0e2b950b3d4dc9c1cde081887","date":1199826919,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/request/TextResponseWriter#writeVal(String,Object).mjava","pathOld":"src/java/org/apache/solr/request/TextResponseWriter#writeVal(String,Object).mjava","sourceNew":"  public void writeVal(String name, Object val) throws IOException {\n\n    // if there get to be enough types, perhaps hashing on the type\n    // to get a handler might be faster (but types must be exact to do that...)\n\n    // go in order of most common to least common\n    if (val==null) {\n      writeNull(name);\n    } else if (val instanceof String) {\n      writeStr(name, val.toString(), true);\n      // micro-optimization... using toString() avoids a cast first\n    } else if (val instanceof Integer) {\n      writeInt(name, val.toString());\n    } else if (val instanceof Boolean) {\n      writeBool(name, val.toString());\n    } else if (val instanceof Long) {\n      writeLong(name, val.toString());\n    } else if (val instanceof Date) {\n      writeDate(name,(Date)val);\n    } else if (val instanceof Float) {\n      // we pass the float instead of using toString() because\n      // it may need special formatting. same for double.\n      writeFloat(name, ((Float)val).floatValue());\n    } else if (val instanceof Double) {\n      writeDouble(name, ((Double)val).doubleValue());\n    } else if (val instanceof Document) {\n      writeDoc(name, (Document)val, returnFields, 0.0f, false);\n    } else if (val instanceof SolrDocument) {\n      writeSolrDocument(name, (SolrDocument)val, returnFields, null);\n    } else if (val instanceof DocList) {\n      // requires access to IndexReader\n      writeDocList(name, (DocList)val, returnFields,null);\n    // }\n    // else if (val instanceof DocSet) {\n    // how do we know what fields to read?\n    // todo: have a DocList/DocSet wrapper that\n    // restricts the fields to write...?\n    } else if (val instanceof SolrDocumentList) {\n      writeSolrDocumentList(name, (SolrDocumentList)val, returnFields, null);\n    } else if (val instanceof Map) {\n      writeMap(name, (Map)val, false, true);\n    } else if (val instanceof NamedList) {\n      writeNamedList(name, (NamedList)val);\n    } else if (val instanceof Iterable) {\n      writeArray(name,((Iterable)val).iterator());\n    } else if (val instanceof Object[]) {\n      writeArray(name,(Object[])val);\n    } else if (val instanceof Iterator) {\n      writeArray(name,(Iterator)val);\n    } else {\n      // default... for debugging only\n      writeStr(name, val.getClass().getName() + ':' + val.toString(), true);\n    }\n  }\n\n","sourceOld":"  public void writeVal(String name, Object val) throws IOException {\n\n    // if there get to be enough types, perhaps hashing on the type\n    // to get a handler might be faster (but types must be exact to do that...)\n\n    // go in order of most common to least common\n    if (val==null) {\n      writeNull(name);\n    } else if (val instanceof String) {\n      writeStr(name, val.toString(), true);\n      // micro-optimization... using toString() avoids a cast first\n    } else if (val instanceof Integer) {\n      writeInt(name, val.toString());\n    } else if (val instanceof Boolean) {\n      writeBool(name, val.toString());\n    } else if (val instanceof Long) {\n      writeLong(name, val.toString());\n    } else if (val instanceof Date) {\n      writeDate(name,(Date)val);\n    } else if (val instanceof Float) {\n      // we pass the float instead of using toString() because\n      // it may need special formatting. same for double.\n      writeFloat(name, ((Float)val).floatValue());\n    } else if (val instanceof Double) {\n      writeDouble(name, ((Double)val).doubleValue());\n    } else if (val instanceof Document) {\n      writeDoc(name, (Document)val, returnFields, 0.0f, false);\n    } else if (val instanceof DocList) {\n      // requires access to IndexReader\n      writeDocList(name, (DocList)val, returnFields,null);\n    // }\n    // else if (val instanceof DocSet) {\n    // how do we know what fields to read?\n    // todo: have a DocList/DocSet wrapper that\n    // restricts the fields to write...?\n    } else if (val instanceof Map) {\n      writeMap(name, (Map)val, false, true);\n    } else if (val instanceof NamedList) {\n      writeNamedList(name, (NamedList)val);\n    } else if (val instanceof Iterable) {\n      writeArray(name,((Iterable)val).iterator());\n    } else if (val instanceof Object[]) {\n      writeArray(name,(Object[])val);\n    } else if (val instanceof Iterator) {\n      writeArray(name,(Iterator)val);\n    } else {\n      // default... for debugging only\n      writeStr(name, val.getClass().getName() + ':' + val.toString(), true);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"10b17ff7ad534c3b34a34944d80a87d217011d9c","date":1263262796,"type":5,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/response/TextResponseWriter#writeVal(String,Object).mjava","pathOld":"src/java/org/apache/solr/request/TextResponseWriter#writeVal(String,Object).mjava","sourceNew":"  public void writeVal(String name, Object val) throws IOException {\n\n    // if there get to be enough types, perhaps hashing on the type\n    // to get a handler might be faster (but types must be exact to do that...)\n\n    // go in order of most common to least common\n    if (val==null) {\n      writeNull(name);\n    } else if (val instanceof String) {\n      writeStr(name, val.toString(), true);\n      // micro-optimization... using toString() avoids a cast first\n    } else if (val instanceof Integer) {\n      writeInt(name, val.toString());\n    } else if (val instanceof Boolean) {\n      writeBool(name, val.toString());\n    } else if (val instanceof Long) {\n      writeLong(name, val.toString());\n    } else if (val instanceof Date) {\n      writeDate(name,(Date)val);\n    } else if (val instanceof Float) {\n      // we pass the float instead of using toString() because\n      // it may need special formatting. same for double.\n      writeFloat(name, ((Float)val).floatValue());\n    } else if (val instanceof Double) {\n      writeDouble(name, ((Double)val).doubleValue());\n    } else if (val instanceof Document) {\n      writeDoc(name, (Document)val, returnFields, 0.0f, false);\n    } else if (val instanceof SolrDocument) {\n      writeSolrDocument(name, (SolrDocument)val, returnFields, null);\n    } else if (val instanceof DocList) {\n      // requires access to IndexReader\n      writeDocList(name, (DocList)val, returnFields,null);\n    // }\n    // else if (val instanceof DocSet) {\n    // how do we know what fields to read?\n    // todo: have a DocList/DocSet wrapper that\n    // restricts the fields to write...?\n    } else if (val instanceof SolrDocumentList) {\n      writeSolrDocumentList(name, (SolrDocumentList)val, returnFields, null);\n    } else if (val instanceof Map) {\n      writeMap(name, (Map)val, false, true);\n    } else if (val instanceof NamedList) {\n      writeNamedList(name, (NamedList)val);\n    } else if (val instanceof Iterable) {\n      writeArray(name,((Iterable)val).iterator());\n    } else if (val instanceof Object[]) {\n      writeArray(name,(Object[])val);\n    } else if (val instanceof Iterator) {\n      writeArray(name,(Iterator)val);\n    } else {\n      // default... for debugging only\n      writeStr(name, val.getClass().getName() + ':' + val.toString(), true);\n    }\n  }\n\n","sourceOld":"  public void writeVal(String name, Object val) throws IOException {\n\n    // if there get to be enough types, perhaps hashing on the type\n    // to get a handler might be faster (but types must be exact to do that...)\n\n    // go in order of most common to least common\n    if (val==null) {\n      writeNull(name);\n    } else if (val instanceof String) {\n      writeStr(name, val.toString(), true);\n      // micro-optimization... using toString() avoids a cast first\n    } else if (val instanceof Integer) {\n      writeInt(name, val.toString());\n    } else if (val instanceof Boolean) {\n      writeBool(name, val.toString());\n    } else if (val instanceof Long) {\n      writeLong(name, val.toString());\n    } else if (val instanceof Date) {\n      writeDate(name,(Date)val);\n    } else if (val instanceof Float) {\n      // we pass the float instead of using toString() because\n      // it may need special formatting. same for double.\n      writeFloat(name, ((Float)val).floatValue());\n    } else if (val instanceof Double) {\n      writeDouble(name, ((Double)val).doubleValue());\n    } else if (val instanceof Document) {\n      writeDoc(name, (Document)val, returnFields, 0.0f, false);\n    } else if (val instanceof SolrDocument) {\n      writeSolrDocument(name, (SolrDocument)val, returnFields, null);\n    } else if (val instanceof DocList) {\n      // requires access to IndexReader\n      writeDocList(name, (DocList)val, returnFields,null);\n    // }\n    // else if (val instanceof DocSet) {\n    // how do we know what fields to read?\n    // todo: have a DocList/DocSet wrapper that\n    // restricts the fields to write...?\n    } else if (val instanceof SolrDocumentList) {\n      writeSolrDocumentList(name, (SolrDocumentList)val, returnFields, null);\n    } else if (val instanceof Map) {\n      writeMap(name, (Map)val, false, true);\n    } else if (val instanceof NamedList) {\n      writeNamedList(name, (NamedList)val);\n    } else if (val instanceof Iterable) {\n      writeArray(name,((Iterable)val).iterator());\n    } else if (val instanceof Object[]) {\n      writeArray(name,(Object[])val);\n    } else if (val instanceof Iterator) {\n      writeArray(name,(Iterator)val);\n    } else {\n      // default... for debugging only\n      writeStr(name, val.getClass().getName() + ':' + val.toString(), true);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"0c0e301b711811c6aaee90440cc1a7925fdd1a1e":["434ff4225627b937a533128f8746eb1e9009fc95"],"434ff4225627b937a533128f8746eb1e9009fc95":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"dd6bbc7bb83faaa41918157227a3048310685b35":["0c0e301b711811c6aaee90440cc1a7925fdd1a1e"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"10b17ff7ad534c3b34a34944d80a87d217011d9c":["c451686dba22c9c0e2b950b3d4dc9c1cde081887"],"c451686dba22c9c0e2b950b3d4dc9c1cde081887":["dd6bbc7bb83faaa41918157227a3048310685b35"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"0c0e301b711811c6aaee90440cc1a7925fdd1a1e":["dd6bbc7bb83faaa41918157227a3048310685b35"],"434ff4225627b937a533128f8746eb1e9009fc95":["0c0e301b711811c6aaee90440cc1a7925fdd1a1e"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["434ff4225627b937a533128f8746eb1e9009fc95"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"dd6bbc7bb83faaa41918157227a3048310685b35":["c451686dba22c9c0e2b950b3d4dc9c1cde081887"],"10b17ff7ad534c3b34a34944d80a87d217011d9c":[],"c451686dba22c9c0e2b950b3d4dc9c1cde081887":["10b17ff7ad534c3b34a34944d80a87d217011d9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["10b17ff7ad534c3b34a34944d80a87d217011d9c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}