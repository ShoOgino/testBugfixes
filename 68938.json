{"path":"solr/core/src/java/org/apache/solr/cloud/Overseer.CloudStateUpdater#updateState(CloudState,ZkNodeProps).mjava","commits":[{"id":"a5093a9e893633cc091cf2f729d7863671c2b715","date":1339132888,"type":1,"author":"Sami Siren","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.CloudStateUpdater#updateState(CloudState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.CloudStateUpdater#updateState(CloudState,String,CoreState).mjava","sourceNew":"      /**\n       * Try to assign core to the cluster. \n       * @throws KeeperException \n       * @throws InterruptedException \n       */\n      private CloudState updateState(CloudState state, final ZkNodeProps message) throws KeeperException, InterruptedException {\n        final String collection = message.get(ZkStateReader.COLLECTION_PROP);\n        final String zkCoreNodeName = message.get(ZkStateReader.NODE_NAME_PROP) + \"_\" + message.get(ZkStateReader.CORE_NAME_PROP);\n        final Integer numShards = message.get(ZkStateReader.NUM_SHARDS_PROP)!=null?Integer.parseInt(message.get(ZkStateReader.NUM_SHARDS_PROP)):null;\n        \n        //collection does not yet exist, create placeholders if num shards is specified\n        if (!state.getCollections().contains(collection)\n            && numShards!=null) {\n          state = createCollection(state, collection, numShards);\n        }\n        \n        // use the provided non null shardId\n        String shardId = message.get(ZkStateReader.SHARD_ID_PROP);\n        if (shardId == null) {\n          String nodeName = message.get(ZkStateReader.NODE_NAME_PROP);\n          //get shardId from CloudState\n          shardId = getAssignedId(state, nodeName, message);\n        }\n        if(shardId == null) {\n          //request new shardId \n          shardId = AssignShard.assignShard(collection, state, numShards);\n        }\n          \n          Map<String,String> props = new HashMap<String,String>();\n          Map<String,String> coreProps = new HashMap<String,String>(message.getProperties().size());\n          coreProps.putAll(message.getProperties());\n          // we don't put num_shards in the clusterstate\n          coreProps.remove(ZkStateReader.NUM_SHARDS_PROP);\n          coreProps.remove(QUEUE_OPERATION);\n          for (Entry<String,String> entry : coreProps.entrySet()) {\n            props.put(entry.getKey(), entry.getValue());\n          }\n          ZkNodeProps zkProps = new ZkNodeProps(props);\n          Slice slice = state.getSlice(collection, shardId);\n          Map<String,ZkNodeProps> shardProps;\n          if (slice == null) {\n            shardProps = new HashMap<String,ZkNodeProps>();\n          } else {\n            shardProps = state.getSlice(collection, shardId).getShardsCopy();\n          }\n          shardProps.put(zkCoreNodeName, zkProps);\n\n          slice = new Slice(shardId, shardProps);\n          CloudState newCloudState = updateSlice(state, collection, slice);\n          return newCloudState;\n      }\n\n","sourceOld":"      /**\n       * Try to assign core to the cluster. \n       * @throws KeeperException \n       * @throws InterruptedException \n       */\n      private CloudState updateState(CloudState state, String nodeName, CoreState coreState) throws KeeperException, InterruptedException {\n        String collection = coreState.getCollectionName();\n        String zkCoreNodeName = coreState.getCoreNodeName();\n        \n        //collection does not yet exist, create placeholders if num shards is specified\n        if (!state.getCollections().contains(coreState.getCollectionName())\n            && coreState.getNumShards() != null) {\n          state = createCollection(state, collection, coreState.getNumShards());\n        }\n        \n        // use the provided non null shardId\n        String shardId = coreState.getProperties().get(ZkStateReader.SHARD_ID_PROP);\n        if(shardId==null) {\n          //use shardId from CloudState\n          shardId = getAssignedId(state, nodeName, coreState);\n        }\n        if(shardId==null) {\n          //request new shardId \n          shardId = AssignShard.assignShard(collection, state, coreState.getNumShards());\n        }\n          \n          Map<String,String> props = new HashMap<String,String>();\n          Map<String,String> coreProps = new HashMap<String,String>(coreState.getProperties().size());\n          coreProps.putAll(coreState.getProperties());\n          // we don't put num_shards in the clusterstate\n          coreProps.remove(\"num_shards\");\n          for (Entry<String,String> entry : coreProps.entrySet()) {\n            props.put(entry.getKey(), entry.getValue());\n          }\n          ZkNodeProps zkProps = new ZkNodeProps(props);\n          Slice slice = state.getSlice(collection, shardId);\n          Map<String,ZkNodeProps> shardProps;\n          if (slice == null) {\n            shardProps = new HashMap<String,ZkNodeProps>();\n          } else {\n            shardProps = state.getSlice(collection, shardId).getShardsCopy();\n          }\n          shardProps.put(zkCoreNodeName, zkProps);\n\n          slice = new Slice(shardId, shardProps);\n          CloudState newCloudState = updateSlice(state, collection, slice);\n          return newCloudState;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.CloudStateUpdater#updateState(CloudState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.CloudStateUpdater#updateState(CloudState,ZkNodeProps).mjava","sourceNew":"      /**\n       * Try to assign core to the cluster. \n       */\n      private CloudState updateState(CloudState state, final ZkNodeProps message) {\n        final String collection = message.get(ZkStateReader.COLLECTION_PROP);\n        final String zkCoreNodeName = message.get(ZkStateReader.NODE_NAME_PROP) + \"_\" + message.get(ZkStateReader.CORE_NAME_PROP);\n        final Integer numShards = message.get(ZkStateReader.NUM_SHARDS_PROP)!=null?Integer.parseInt(message.get(ZkStateReader.NUM_SHARDS_PROP)):null;\n        \n        //collection does not yet exist, create placeholders if num shards is specified\n        if (!state.getCollections().contains(collection)\n            && numShards!=null) {\n          state = createCollection(state, collection, numShards);\n        }\n        \n        // use the provided non null shardId\n        String shardId = message.get(ZkStateReader.SHARD_ID_PROP);\n        if (shardId == null) {\n          String nodeName = message.get(ZkStateReader.NODE_NAME_PROP);\n          //get shardId from CloudState\n          shardId = getAssignedId(state, nodeName, message);\n        }\n        if(shardId == null) {\n          //request new shardId \n          shardId = AssignShard.assignShard(collection, state, numShards);\n        }\n          \n          Map<String,String> props = new HashMap<String,String>();\n          Map<String,String> coreProps = new HashMap<String,String>(message.getProperties().size());\n          coreProps.putAll(message.getProperties());\n          // we don't put num_shards in the clusterstate\n          coreProps.remove(ZkStateReader.NUM_SHARDS_PROP);\n          coreProps.remove(QUEUE_OPERATION);\n          for (Entry<String,String> entry : coreProps.entrySet()) {\n            props.put(entry.getKey(), entry.getValue());\n          }\n          ZkNodeProps zkProps = new ZkNodeProps(props);\n          Slice slice = state.getSlice(collection, shardId);\n          Map<String,ZkNodeProps> shardProps;\n          if (slice == null) {\n            shardProps = new HashMap<String,ZkNodeProps>();\n          } else {\n            shardProps = state.getSlice(collection, shardId).getShardsCopy();\n          }\n          shardProps.put(zkCoreNodeName, zkProps);\n\n          slice = new Slice(shardId, shardProps);\n          CloudState newCloudState = updateSlice(state, collection, slice);\n          return newCloudState;\n      }\n\n","sourceOld":"      /**\n       * Try to assign core to the cluster. \n       * @throws KeeperException \n       * @throws InterruptedException \n       */\n      private CloudState updateState(CloudState state, final ZkNodeProps message) throws KeeperException, InterruptedException {\n        final String collection = message.get(ZkStateReader.COLLECTION_PROP);\n        final String zkCoreNodeName = message.get(ZkStateReader.NODE_NAME_PROP) + \"_\" + message.get(ZkStateReader.CORE_NAME_PROP);\n        final Integer numShards = message.get(ZkStateReader.NUM_SHARDS_PROP)!=null?Integer.parseInt(message.get(ZkStateReader.NUM_SHARDS_PROP)):null;\n        \n        //collection does not yet exist, create placeholders if num shards is specified\n        if (!state.getCollections().contains(collection)\n            && numShards!=null) {\n          state = createCollection(state, collection, numShards);\n        }\n        \n        // use the provided non null shardId\n        String shardId = message.get(ZkStateReader.SHARD_ID_PROP);\n        if (shardId == null) {\n          String nodeName = message.get(ZkStateReader.NODE_NAME_PROP);\n          //get shardId from CloudState\n          shardId = getAssignedId(state, nodeName, message);\n        }\n        if(shardId == null) {\n          //request new shardId \n          shardId = AssignShard.assignShard(collection, state, numShards);\n        }\n          \n          Map<String,String> props = new HashMap<String,String>();\n          Map<String,String> coreProps = new HashMap<String,String>(message.getProperties().size());\n          coreProps.putAll(message.getProperties());\n          // we don't put num_shards in the clusterstate\n          coreProps.remove(ZkStateReader.NUM_SHARDS_PROP);\n          coreProps.remove(QUEUE_OPERATION);\n          for (Entry<String,String> entry : coreProps.entrySet()) {\n            props.put(entry.getKey(), entry.getValue());\n          }\n          ZkNodeProps zkProps = new ZkNodeProps(props);\n          Slice slice = state.getSlice(collection, shardId);\n          Map<String,ZkNodeProps> shardProps;\n          if (slice == null) {\n            shardProps = new HashMap<String,ZkNodeProps>();\n          } else {\n            shardProps = state.getSlice(collection, shardId).getShardsCopy();\n          }\n          shardProps.put(zkCoreNodeName, zkProps);\n\n          slice = new Slice(shardId, shardProps);\n          CloudState newCloudState = updateSlice(state, collection, slice);\n          return newCloudState;\n      }\n\n","bugFix":["a5093a9e893633cc091cf2f729d7863671c2b715"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.CloudStateUpdater#updateState(CloudState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.CloudStateUpdater#updateState(CloudState,ZkNodeProps).mjava","sourceNew":"      /**\n       * Try to assign core to the cluster. \n       */\n      private CloudState updateState(CloudState state, final ZkNodeProps message) {\n        final String collection = message.get(ZkStateReader.COLLECTION_PROP);\n        final String zkCoreNodeName = message.get(ZkStateReader.NODE_NAME_PROP) + \"_\" + message.get(ZkStateReader.CORE_NAME_PROP);\n        final Integer numShards = message.get(ZkStateReader.NUM_SHARDS_PROP)!=null?Integer.parseInt(message.get(ZkStateReader.NUM_SHARDS_PROP)):null;\n        \n        //collection does not yet exist, create placeholders if num shards is specified\n        if (!state.getCollections().contains(collection)\n            && numShards!=null) {\n          state = createCollection(state, collection, numShards);\n        }\n        \n        // use the provided non null shardId\n        String shardId = message.get(ZkStateReader.SHARD_ID_PROP);\n        if (shardId == null) {\n          String nodeName = message.get(ZkStateReader.NODE_NAME_PROP);\n          //get shardId from CloudState\n          shardId = getAssignedId(state, nodeName, message);\n        }\n        if(shardId == null) {\n          //request new shardId \n          shardId = AssignShard.assignShard(collection, state, numShards);\n        }\n          \n          Map<String,String> props = new HashMap<String,String>();\n          Map<String,String> coreProps = new HashMap<String,String>(message.getProperties().size());\n          coreProps.putAll(message.getProperties());\n          // we don't put num_shards in the clusterstate\n          coreProps.remove(ZkStateReader.NUM_SHARDS_PROP);\n          coreProps.remove(QUEUE_OPERATION);\n          for (Entry<String,String> entry : coreProps.entrySet()) {\n            props.put(entry.getKey(), entry.getValue());\n          }\n          ZkNodeProps zkProps = new ZkNodeProps(props);\n          Slice slice = state.getSlice(collection, shardId);\n          Map<String,ZkNodeProps> shardProps;\n          if (slice == null) {\n            shardProps = new HashMap<String,ZkNodeProps>();\n          } else {\n            shardProps = state.getSlice(collection, shardId).getShardsCopy();\n          }\n          shardProps.put(zkCoreNodeName, zkProps);\n\n          slice = new Slice(shardId, shardProps);\n          CloudState newCloudState = updateSlice(state, collection, slice);\n          return newCloudState;\n      }\n\n","sourceOld":"      /**\n       * Try to assign core to the cluster. \n       * @throws KeeperException \n       * @throws InterruptedException \n       */\n      private CloudState updateState(CloudState state, final ZkNodeProps message) throws KeeperException, InterruptedException {\n        final String collection = message.get(ZkStateReader.COLLECTION_PROP);\n        final String zkCoreNodeName = message.get(ZkStateReader.NODE_NAME_PROP) + \"_\" + message.get(ZkStateReader.CORE_NAME_PROP);\n        final Integer numShards = message.get(ZkStateReader.NUM_SHARDS_PROP)!=null?Integer.parseInt(message.get(ZkStateReader.NUM_SHARDS_PROP)):null;\n        \n        //collection does not yet exist, create placeholders if num shards is specified\n        if (!state.getCollections().contains(collection)\n            && numShards!=null) {\n          state = createCollection(state, collection, numShards);\n        }\n        \n        // use the provided non null shardId\n        String shardId = message.get(ZkStateReader.SHARD_ID_PROP);\n        if (shardId == null) {\n          String nodeName = message.get(ZkStateReader.NODE_NAME_PROP);\n          //get shardId from CloudState\n          shardId = getAssignedId(state, nodeName, message);\n        }\n        if(shardId == null) {\n          //request new shardId \n          shardId = AssignShard.assignShard(collection, state, numShards);\n        }\n          \n          Map<String,String> props = new HashMap<String,String>();\n          Map<String,String> coreProps = new HashMap<String,String>(message.getProperties().size());\n          coreProps.putAll(message.getProperties());\n          // we don't put num_shards in the clusterstate\n          coreProps.remove(ZkStateReader.NUM_SHARDS_PROP);\n          coreProps.remove(QUEUE_OPERATION);\n          for (Entry<String,String> entry : coreProps.entrySet()) {\n            props.put(entry.getKey(), entry.getValue());\n          }\n          ZkNodeProps zkProps = new ZkNodeProps(props);\n          Slice slice = state.getSlice(collection, shardId);\n          Map<String,ZkNodeProps> shardProps;\n          if (slice == null) {\n            shardProps = new HashMap<String,ZkNodeProps>();\n          } else {\n            shardProps = state.getSlice(collection, shardId).getShardsCopy();\n          }\n          shardProps.put(zkCoreNodeName, zkProps);\n\n          slice = new Slice(shardId, shardProps);\n          CloudState newCloudState = updateSlice(state, collection, slice);\n          return newCloudState;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f767f8c99eaedb984df754fe61f21c5de260f94","date":1344105153,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#updateState(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.CloudStateUpdater#updateState(CloudState,ZkNodeProps).mjava","sourceNew":"      /**\n       * Try to assign core to the cluster. \n       */\n      private ClusterState updateState(ClusterState state, final ZkNodeProps message) {\n        final String collection = message.get(ZkStateReader.COLLECTION_PROP);\n        final String zkCoreNodeName = message.get(ZkStateReader.NODE_NAME_PROP) + \"_\" + message.get(ZkStateReader.CORE_NAME_PROP);\n        final Integer numShards = message.get(ZkStateReader.NUM_SHARDS_PROP)!=null?Integer.parseInt(message.get(ZkStateReader.NUM_SHARDS_PROP)):null;\n        \n        //collection does not yet exist, create placeholders if num shards is specified\n        if (!state.getCollections().contains(collection)\n            && numShards!=null) {\n          state = createCollection(state, collection, numShards);\n        }\n        \n        // use the provided non null shardId\n        String shardId = message.get(ZkStateReader.SHARD_ID_PROP);\n        if (shardId == null) {\n          String nodeName = message.get(ZkStateReader.NODE_NAME_PROP);\n          //get shardId from ClusterState\n          shardId = getAssignedId(state, nodeName, message);\n        }\n        if(shardId == null) {\n          //request new shardId \n          shardId = AssignShard.assignShard(collection, state, numShards);\n        }\n          \n          Map<String,String> props = new HashMap<String,String>();\n          Map<String,String> coreProps = new HashMap<String,String>(message.getProperties().size());\n          coreProps.putAll(message.getProperties());\n          // we don't put num_shards in the clusterstate\n          coreProps.remove(ZkStateReader.NUM_SHARDS_PROP);\n          coreProps.remove(QUEUE_OPERATION);\n          for (Entry<String,String> entry : coreProps.entrySet()) {\n            props.put(entry.getKey(), entry.getValue());\n          }\n          ZkNodeProps zkProps = new ZkNodeProps(props);\n          Slice slice = state.getSlice(collection, shardId);\n          Map<String,ZkNodeProps> shardProps;\n          if (slice == null) {\n            shardProps = new HashMap<String,ZkNodeProps>();\n          } else {\n            shardProps = state.getSlice(collection, shardId).getShardsCopy();\n          }\n          shardProps.put(zkCoreNodeName, zkProps);\n\n          slice = new Slice(shardId, shardProps);\n          ClusterState newClusterState = updateSlice(state, collection, slice);\n          return newClusterState;\n      }\n\n","sourceOld":"      /**\n       * Try to assign core to the cluster. \n       */\n      private CloudState updateState(CloudState state, final ZkNodeProps message) {\n        final String collection = message.get(ZkStateReader.COLLECTION_PROP);\n        final String zkCoreNodeName = message.get(ZkStateReader.NODE_NAME_PROP) + \"_\" + message.get(ZkStateReader.CORE_NAME_PROP);\n        final Integer numShards = message.get(ZkStateReader.NUM_SHARDS_PROP)!=null?Integer.parseInt(message.get(ZkStateReader.NUM_SHARDS_PROP)):null;\n        \n        //collection does not yet exist, create placeholders if num shards is specified\n        if (!state.getCollections().contains(collection)\n            && numShards!=null) {\n          state = createCollection(state, collection, numShards);\n        }\n        \n        // use the provided non null shardId\n        String shardId = message.get(ZkStateReader.SHARD_ID_PROP);\n        if (shardId == null) {\n          String nodeName = message.get(ZkStateReader.NODE_NAME_PROP);\n          //get shardId from CloudState\n          shardId = getAssignedId(state, nodeName, message);\n        }\n        if(shardId == null) {\n          //request new shardId \n          shardId = AssignShard.assignShard(collection, state, numShards);\n        }\n          \n          Map<String,String> props = new HashMap<String,String>();\n          Map<String,String> coreProps = new HashMap<String,String>(message.getProperties().size());\n          coreProps.putAll(message.getProperties());\n          // we don't put num_shards in the clusterstate\n          coreProps.remove(ZkStateReader.NUM_SHARDS_PROP);\n          coreProps.remove(QUEUE_OPERATION);\n          for (Entry<String,String> entry : coreProps.entrySet()) {\n            props.put(entry.getKey(), entry.getValue());\n          }\n          ZkNodeProps zkProps = new ZkNodeProps(props);\n          Slice slice = state.getSlice(collection, shardId);\n          Map<String,ZkNodeProps> shardProps;\n          if (slice == null) {\n            shardProps = new HashMap<String,ZkNodeProps>();\n          } else {\n            shardProps = state.getSlice(collection, shardId).getShardsCopy();\n          }\n          shardProps.put(zkCoreNodeName, zkProps);\n\n          slice = new Slice(shardId, shardProps);\n          CloudState newCloudState = updateSlice(state, collection, slice);\n          return newCloudState;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8fd5be977c105554c6a7b68afcdbc511439723ab","date":1344115570,"type":5,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#updateState(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.CloudStateUpdater#updateState(CloudState,ZkNodeProps).mjava","sourceNew":"      /**\n       * Try to assign core to the cluster. \n       */\n      private ClusterState updateState(ClusterState state, final ZkNodeProps message) {\n        final String collection = message.get(ZkStateReader.COLLECTION_PROP);\n        final String zkCoreNodeName = message.get(ZkStateReader.NODE_NAME_PROP) + \"_\" + message.get(ZkStateReader.CORE_NAME_PROP);\n        final Integer numShards = message.get(ZkStateReader.NUM_SHARDS_PROP)!=null?Integer.parseInt(message.get(ZkStateReader.NUM_SHARDS_PROP)):null;\n        \n        //collection does not yet exist, create placeholders if num shards is specified\n        if (!state.getCollections().contains(collection)\n            && numShards!=null) {\n          state = createCollection(state, collection, numShards);\n        }\n        \n        // use the provided non null shardId\n        String shardId = message.get(ZkStateReader.SHARD_ID_PROP);\n        if (shardId == null) {\n          String nodeName = message.get(ZkStateReader.NODE_NAME_PROP);\n          //get shardId from ClusterState\n          shardId = getAssignedId(state, nodeName, message);\n        }\n        if(shardId == null) {\n          //request new shardId \n          shardId = AssignShard.assignShard(collection, state, numShards);\n        }\n          \n          Map<String,String> props = new HashMap<String,String>();\n          Map<String,String> coreProps = new HashMap<String,String>(message.getProperties().size());\n          coreProps.putAll(message.getProperties());\n          // we don't put num_shards in the clusterstate\n          coreProps.remove(ZkStateReader.NUM_SHARDS_PROP);\n          coreProps.remove(QUEUE_OPERATION);\n          for (Entry<String,String> entry : coreProps.entrySet()) {\n            props.put(entry.getKey(), entry.getValue());\n          }\n          ZkNodeProps zkProps = new ZkNodeProps(props);\n          Slice slice = state.getSlice(collection, shardId);\n          Map<String,ZkNodeProps> shardProps;\n          if (slice == null) {\n            shardProps = new HashMap<String,ZkNodeProps>();\n          } else {\n            shardProps = state.getSlice(collection, shardId).getShardsCopy();\n          }\n          shardProps.put(zkCoreNodeName, zkProps);\n\n          slice = new Slice(shardId, shardProps);\n          ClusterState newClusterState = updateSlice(state, collection, slice);\n          return newClusterState;\n      }\n\n","sourceOld":"      /**\n       * Try to assign core to the cluster. \n       */\n      private CloudState updateState(CloudState state, final ZkNodeProps message) {\n        final String collection = message.get(ZkStateReader.COLLECTION_PROP);\n        final String zkCoreNodeName = message.get(ZkStateReader.NODE_NAME_PROP) + \"_\" + message.get(ZkStateReader.CORE_NAME_PROP);\n        final Integer numShards = message.get(ZkStateReader.NUM_SHARDS_PROP)!=null?Integer.parseInt(message.get(ZkStateReader.NUM_SHARDS_PROP)):null;\n        \n        //collection does not yet exist, create placeholders if num shards is specified\n        if (!state.getCollections().contains(collection)\n            && numShards!=null) {\n          state = createCollection(state, collection, numShards);\n        }\n        \n        // use the provided non null shardId\n        String shardId = message.get(ZkStateReader.SHARD_ID_PROP);\n        if (shardId == null) {\n          String nodeName = message.get(ZkStateReader.NODE_NAME_PROP);\n          //get shardId from CloudState\n          shardId = getAssignedId(state, nodeName, message);\n        }\n        if(shardId == null) {\n          //request new shardId \n          shardId = AssignShard.assignShard(collection, state, numShards);\n        }\n          \n          Map<String,String> props = new HashMap<String,String>();\n          Map<String,String> coreProps = new HashMap<String,String>(message.getProperties().size());\n          coreProps.putAll(message.getProperties());\n          // we don't put num_shards in the clusterstate\n          coreProps.remove(ZkStateReader.NUM_SHARDS_PROP);\n          coreProps.remove(QUEUE_OPERATION);\n          for (Entry<String,String> entry : coreProps.entrySet()) {\n            props.put(entry.getKey(), entry.getValue());\n          }\n          ZkNodeProps zkProps = new ZkNodeProps(props);\n          Slice slice = state.getSlice(collection, shardId);\n          Map<String,ZkNodeProps> shardProps;\n          if (slice == null) {\n            shardProps = new HashMap<String,ZkNodeProps>();\n          } else {\n            shardProps = state.getSlice(collection, shardId).getShardsCopy();\n          }\n          shardProps.put(zkCoreNodeName, zkProps);\n\n          slice = new Slice(shardId, shardProps);\n          CloudState newCloudState = updateSlice(state, collection, slice);\n          return newCloudState;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.CloudStateUpdater#updateState(CloudState,ZkNodeProps).mjava","sourceNew":null,"sourceOld":"      /**\n       * Try to assign core to the cluster. \n       */\n      private CloudState updateState(CloudState state, final ZkNodeProps message) {\n        final String collection = message.get(ZkStateReader.COLLECTION_PROP);\n        final String zkCoreNodeName = message.get(ZkStateReader.NODE_NAME_PROP) + \"_\" + message.get(ZkStateReader.CORE_NAME_PROP);\n        final Integer numShards = message.get(ZkStateReader.NUM_SHARDS_PROP)!=null?Integer.parseInt(message.get(ZkStateReader.NUM_SHARDS_PROP)):null;\n        \n        //collection does not yet exist, create placeholders if num shards is specified\n        if (!state.getCollections().contains(collection)\n            && numShards!=null) {\n          state = createCollection(state, collection, numShards);\n        }\n        \n        // use the provided non null shardId\n        String shardId = message.get(ZkStateReader.SHARD_ID_PROP);\n        if (shardId == null) {\n          String nodeName = message.get(ZkStateReader.NODE_NAME_PROP);\n          //get shardId from CloudState\n          shardId = getAssignedId(state, nodeName, message);\n        }\n        if(shardId == null) {\n          //request new shardId \n          shardId = AssignShard.assignShard(collection, state, numShards);\n        }\n          \n          Map<String,String> props = new HashMap<String,String>();\n          Map<String,String> coreProps = new HashMap<String,String>(message.getProperties().size());\n          coreProps.putAll(message.getProperties());\n          // we don't put num_shards in the clusterstate\n          coreProps.remove(ZkStateReader.NUM_SHARDS_PROP);\n          coreProps.remove(QUEUE_OPERATION);\n          for (Entry<String,String> entry : coreProps.entrySet()) {\n            props.put(entry.getKey(), entry.getValue());\n          }\n          ZkNodeProps zkProps = new ZkNodeProps(props);\n          Slice slice = state.getSlice(collection, shardId);\n          Map<String,ZkNodeProps> shardProps;\n          if (slice == null) {\n            shardProps = new HashMap<String,ZkNodeProps>();\n          } else {\n            shardProps = state.getSlice(collection, shardId).getShardsCopy();\n          }\n          shardProps.put(zkCoreNodeName, zkProps);\n\n          slice = new Slice(shardId, shardProps);\n          CloudState newCloudState = updateSlice(state, collection, slice);\n          return newCloudState;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f767f8c99eaedb984df754fe61f21c5de260f94":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["a5093a9e893633cc091cf2f729d7863671c2b715","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a5093a9e893633cc091cf2f729d7863671c2b715":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["4d3e8520fd031bab31fd0e4d480e55958bc45efe","3f767f8c99eaedb984df754fe61f21c5de260f94"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["a5093a9e893633cc091cf2f729d7863671c2b715"],"8fd5be977c105554c6a7b68afcdbc511439723ab":["fe33227f6805edab2036cbb80645cc4e2d1fa424","3f767f8c99eaedb984df754fe61f21c5de260f94"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f767f8c99eaedb984df754fe61f21c5de260f94"]},"commit2Childs":{"3f767f8c99eaedb984df754fe61f21c5de260f94":["d6f074e73200c07d54f242d3880a8da5a35ff97b","8fd5be977c105554c6a7b68afcdbc511439723ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["8fd5be977c105554c6a7b68afcdbc511439723ab"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a5093a9e893633cc091cf2f729d7863671c2b715"],"a5093a9e893633cc091cf2f729d7863671c2b715":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["3f767f8c99eaedb984df754fe61f21c5de260f94","fe33227f6805edab2036cbb80645cc4e2d1fa424","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"8fd5be977c105554c6a7b68afcdbc511439723ab":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d6f074e73200c07d54f242d3880a8da5a35ff97b","8fd5be977c105554c6a7b68afcdbc511439723ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}