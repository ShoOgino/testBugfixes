{"path":"solr/core/src/java/org/apache/solr/handler/RequestHandlerBase#initializeMetrics(SolrMetrics).mjava","commits":[{"id":"a117d95183986014a31f25bb04e5464ca06d6068","date":1566208086,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/RequestHandlerBase#initializeMetrics(SolrMetrics).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void initializeMetrics(SolrMetrics m) {\n    this.solrMetrics = m.getChildInfo(this);\n    numErrors = solrMetrics.meter(this, \"errors\", getCategory().toString());\n    numServerErrors = solrMetrics.meter(this, \"serverErrors\", getCategory().toString());\n    numClientErrors = solrMetrics.meter(this, \"clientErrors\", getCategory().toString());\n    numTimeouts = solrMetrics.meter(this, \"timeouts\", getCategory().toString());\n    requests = solrMetrics.counter(this, \"requests\", getCategory().toString());\n    MetricsMap metricsMap = new MetricsMap((detail, map) ->\n        shardPurposes.forEach((k, v) -> map.put(k, v.getCount())));\n    solrMetrics.gauge(this, metricsMap, true, \"shardRequests\", getCategory().toString());\n    requestTimes = solrMetrics.timer(this,\"requestTimes\", getCategory().toString());\n    totalTime = solrMetrics.counter(this, \"totalTime\", getCategory().toString());\n    solrMetrics.gauge(this, () -> handlerStart, true, \"handlerStart\", getCategory().toString());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17c468812fc0c60f3d66b176339dc70564d8c3cb","date":1567918667,"type":4,"author":"Noble Paul","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/handler/RequestHandlerBase#initializeMetrics(SolrMetrics).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void initializeMetrics(SolrMetrics m) {\n    this.solrMetrics = m.getChildInfo(this);\n    numErrors = solrMetrics.meter(this, \"errors\", getCategory().toString());\n    numServerErrors = solrMetrics.meter(this, \"serverErrors\", getCategory().toString());\n    numClientErrors = solrMetrics.meter(this, \"clientErrors\", getCategory().toString());\n    numTimeouts = solrMetrics.meter(this, \"timeouts\", getCategory().toString());\n    requests = solrMetrics.counter(this, \"requests\", getCategory().toString());\n    MetricsMap metricsMap = new MetricsMap((detail, map) ->\n        shardPurposes.forEach((k, v) -> map.put(k, v.getCount())));\n    solrMetrics.gauge(this, metricsMap, true, \"shardRequests\", getCategory().toString());\n    requestTimes = solrMetrics.timer(this,\"requestTimes\", getCategory().toString());\n    totalTime = solrMetrics.counter(this, \"totalTime\", getCategory().toString());\n    solrMetrics.gauge(this, () -> handlerStart, true, \"handlerStart\", getCategory().toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"52275555c0ae3b55430cef26ad7fca3f02440944","date":1568033329,"type":4,"author":"Noble Paul","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/handler/RequestHandlerBase#initializeMetrics(SolrMetrics).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void initializeMetrics(SolrMetrics m) {\n    this.solrMetrics = m.getChildInfo(this);\n    numErrors = solrMetrics.meter(this, \"errors\", getCategory().toString());\n    numServerErrors = solrMetrics.meter(this, \"serverErrors\", getCategory().toString());\n    numClientErrors = solrMetrics.meter(this, \"clientErrors\", getCategory().toString());\n    numTimeouts = solrMetrics.meter(this, \"timeouts\", getCategory().toString());\n    requests = solrMetrics.counter(this, \"requests\", getCategory().toString());\n    MetricsMap metricsMap = new MetricsMap((detail, map) ->\n        shardPurposes.forEach((k, v) -> map.put(k, v.getCount())));\n    solrMetrics.gauge(this, metricsMap, true, \"shardRequests\", getCategory().toString());\n    requestTimes = solrMetrics.timer(this,\"requestTimes\", getCategory().toString());\n    totalTime = solrMetrics.counter(this, \"totalTime\", getCategory().toString());\n    solrMetrics.gauge(this, () -> handlerStart, true, \"handlerStart\", getCategory().toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"52275555c0ae3b55430cef26ad7fca3f02440944":["a117d95183986014a31f25bb04e5464ca06d6068","17c468812fc0c60f3d66b176339dc70564d8c3cb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a117d95183986014a31f25bb04e5464ca06d6068":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"17c468812fc0c60f3d66b176339dc70564d8c3cb":["a117d95183986014a31f25bb04e5464ca06d6068"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["52275555c0ae3b55430cef26ad7fca3f02440944"]},"commit2Childs":{"52275555c0ae3b55430cef26ad7fca3f02440944":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a117d95183986014a31f25bb04e5464ca06d6068"],"a117d95183986014a31f25bb04e5464ca06d6068":["52275555c0ae3b55430cef26ad7fca3f02440944","17c468812fc0c60f3d66b176339dc70564d8c3cb"],"17c468812fc0c60f3d66b176339dc70564d8c3cb":["52275555c0ae3b55430cef26ad7fca3f02440944"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}