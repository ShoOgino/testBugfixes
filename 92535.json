{"path":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene42/Lucene42TermVectorsReader.TVFields#terms(String).mjava","commits":[{"id":"3d5291145ae0cea7e6e6a2379f3a32643bf71bf6","date":1411857884,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene42/Lucene42TermVectorsReader.TVFields#terms(String).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public Terms terms(String field) throws IOException {\n      final FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n      if (fieldInfo == null) {\n        return null;\n      }\n      int idx = -1;\n      for (int i = 0; i < fieldNumOffs.length; ++i) {\n        if (fieldNums[fieldNumOffs[i]] == fieldInfo.number) {\n          idx = i;\n          break;\n        }\n      }\n\n      if (idx == -1 || numTerms[idx] == 0) {\n        // no term\n        return null;\n      }\n      int fieldOff = 0, fieldLen = -1;\n      for (int i = 0; i < fieldNumOffs.length; ++i) {\n        if (i < idx) {\n          fieldOff += fieldLengths[i];\n        } else {\n          fieldLen = fieldLengths[i];\n          break;\n        }\n      }\n      assert fieldLen >= 0;\n      return new TVTerms(numTerms[idx], fieldFlags[idx],\n          prefixLengths[idx], suffixLengths[idx], termFreqs[idx],\n          positionIndex[idx], positions[idx], startOffsets[idx], lengths[idx],\n          payloadIndex[idx], payloadBytes,\n          new BytesRef(suffixBytes.bytes, suffixBytes.offset + fieldOff, fieldLen));\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9bb9a29a5e71a90295f175df8919802993142c9a","date":1412517673,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene42/Lucene42TermVectorsReader.TVFields#terms(String).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public Terms terms(String field) throws IOException {\n      final FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n      if (fieldInfo == null) {\n        return null;\n      }\n      int idx = -1;\n      for (int i = 0; i < fieldNumOffs.length; ++i) {\n        if (fieldNums[fieldNumOffs[i]] == fieldInfo.number) {\n          idx = i;\n          break;\n        }\n      }\n\n      if (idx == -1 || numTerms[idx] == 0) {\n        // no term\n        return null;\n      }\n      int fieldOff = 0, fieldLen = -1;\n      for (int i = 0; i < fieldNumOffs.length; ++i) {\n        if (i < idx) {\n          fieldOff += fieldLengths[i];\n        } else {\n          fieldLen = fieldLengths[i];\n          break;\n        }\n      }\n      assert fieldLen >= 0;\n      return new TVTerms(numTerms[idx], fieldFlags[idx],\n          prefixLengths[idx], suffixLengths[idx], termFreqs[idx],\n          positionIndex[idx], positions[idx], startOffsets[idx], lengths[idx],\n          payloadIndex[idx], payloadBytes,\n          new BytesRef(suffixBytes.bytes, suffixBytes.offset + fieldOff, fieldLen));\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"71387d8cb6923eb831b17a8b734608ba2e21c653","date":1414126093,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene42/Lucene42TermVectorsReader.TVFields#terms(String).mjava","sourceNew":null,"sourceOld":"    @Override\n    public Terms terms(String field) throws IOException {\n      final FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n      if (fieldInfo == null) {\n        return null;\n      }\n      int idx = -1;\n      for (int i = 0; i < fieldNumOffs.length; ++i) {\n        if (fieldNums[fieldNumOffs[i]] == fieldInfo.number) {\n          idx = i;\n          break;\n        }\n      }\n\n      if (idx == -1 || numTerms[idx] == 0) {\n        // no term\n        return null;\n      }\n      int fieldOff = 0, fieldLen = -1;\n      for (int i = 0; i < fieldNumOffs.length; ++i) {\n        if (i < idx) {\n          fieldOff += fieldLengths[i];\n        } else {\n          fieldLen = fieldLengths[i];\n          break;\n        }\n      }\n      assert fieldLen >= 0;\n      return new TVTerms(numTerms[idx], fieldFlags[idx],\n          prefixLengths[idx], suffixLengths[idx], termFreqs[idx],\n          positionIndex[idx], positions[idx], startOffsets[idx], lengths[idx],\n          payloadIndex[idx], payloadBytes,\n          new BytesRef(suffixBytes.bytes, suffixBytes.offset + fieldOff, fieldLen));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9bb9a29a5e71a90295f175df8919802993142c9a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3d5291145ae0cea7e6e6a2379f3a32643bf71bf6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3d5291145ae0cea7e6e6a2379f3a32643bf71bf6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"71387d8cb6923eb831b17a8b734608ba2e21c653":["9bb9a29a5e71a90295f175df8919802993142c9a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["71387d8cb6923eb831b17a8b734608ba2e21c653"]},"commit2Childs":{"9bb9a29a5e71a90295f175df8919802993142c9a":["71387d8cb6923eb831b17a8b734608ba2e21c653"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9bb9a29a5e71a90295f175df8919802993142c9a","3d5291145ae0cea7e6e6a2379f3a32643bf71bf6"],"3d5291145ae0cea7e6e6a2379f3a32643bf71bf6":["9bb9a29a5e71a90295f175df8919802993142c9a"],"71387d8cb6923eb831b17a8b734608ba2e21c653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}