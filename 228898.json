{"path":"lucene/grouping/src/java/org/apache/lucene/search/grouping/SearchGroup.GroupMerger#updateNextGroup(int,ShardIter[T]).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/SearchGroup.GroupMerger#updateNextGroup(int,ShardIter[T]).mjava","pathOld":"modules/grouping/src/java/org/apache/lucene/search/grouping/SearchGroup.GroupMerger#updateNextGroup(int,ShardIter[T]).mjava","sourceNew":"    @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n    private void updateNextGroup(int topN, ShardIter<T> shard) {\n      while(shard.iter.hasNext()) {\n        final SearchGroup<T> group = shard.next();\n        MergedGroup<T> mergedGroup = groupsSeen.get(group.groupValue);\n        final boolean isNew = mergedGroup == null;\n        //System.out.println(\"    next group=\" + (group.groupValue == null ? \"null\" : ((BytesRef) group.groupValue).utf8ToString()) + \" sort=\" + Arrays.toString(group.sortValues));\n\n        if (isNew) {\n          // Start a new group:\n          //System.out.println(\"      new\");\n          mergedGroup = new MergedGroup<T>(group.groupValue);\n          mergedGroup.minShardIndex = shard.shardIndex;\n          assert group.sortValues != null;\n          mergedGroup.topValues = group.sortValues;\n          groupsSeen.put(group.groupValue, mergedGroup);\n          mergedGroup.inQueue = true;\n          queue.add(mergedGroup);\n        } else if (mergedGroup.processed) {\n          // This shard produced a group that we already\n          // processed; move on to next group...\n          continue;\n        } else {\n          //System.out.println(\"      old\");\n          boolean competes = false;\n          for(int compIDX=0;compIDX<groupComp.comparators.length;compIDX++) {\n            final int cmp = groupComp.reversed[compIDX] * groupComp.comparators[compIDX].compareValues(group.sortValues[compIDX],\n                                                                                                       mergedGroup.topValues[compIDX]);\n            if (cmp < 0) {\n              // Definitely competes\n              competes = true;\n              break;\n            } else if (cmp > 0) {\n              // Definitely does not compete\n              break;\n            } else if (compIDX == groupComp.comparators.length-1) {\n              if (shard.shardIndex < mergedGroup.minShardIndex) {\n                competes = true;\n              }\n            }\n          }\n\n          //System.out.println(\"      competes=\" + competes);\n\n          if (competes) {\n            // Group's sort changed -- remove & re-insert\n            if (mergedGroup.inQueue) {\n              queue.remove(mergedGroup);\n            }\n            mergedGroup.topValues = group.sortValues;\n            mergedGroup.minShardIndex = shard.shardIndex;\n            queue.add(mergedGroup);\n            mergedGroup.inQueue = true;\n          }\n        }\n\n        mergedGroup.shards.add(shard);\n        break;\n      }\n\n      // Prune un-competitive groups:\n      while(queue.size() > topN) {\n        final MergedGroup<T> group = queue.pollLast();\n        //System.out.println(\"PRUNE: \" + group);\n        group.inQueue = false;\n      }\n    }\n\n","sourceOld":"    @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n    private void updateNextGroup(int topN, ShardIter<T> shard) {\n      while(shard.iter.hasNext()) {\n        final SearchGroup<T> group = shard.next();\n        MergedGroup<T> mergedGroup = groupsSeen.get(group.groupValue);\n        final boolean isNew = mergedGroup == null;\n        //System.out.println(\"    next group=\" + (group.groupValue == null ? \"null\" : ((BytesRef) group.groupValue).utf8ToString()) + \" sort=\" + Arrays.toString(group.sortValues));\n\n        if (isNew) {\n          // Start a new group:\n          //System.out.println(\"      new\");\n          mergedGroup = new MergedGroup<T>(group.groupValue);\n          mergedGroup.minShardIndex = shard.shardIndex;\n          assert group.sortValues != null;\n          mergedGroup.topValues = group.sortValues;\n          groupsSeen.put(group.groupValue, mergedGroup);\n          mergedGroup.inQueue = true;\n          queue.add(mergedGroup);\n        } else if (mergedGroup.processed) {\n          // This shard produced a group that we already\n          // processed; move on to next group...\n          continue;\n        } else {\n          //System.out.println(\"      old\");\n          boolean competes = false;\n          for(int compIDX=0;compIDX<groupComp.comparators.length;compIDX++) {\n            final int cmp = groupComp.reversed[compIDX] * groupComp.comparators[compIDX].compareValues(group.sortValues[compIDX],\n                                                                                                       mergedGroup.topValues[compIDX]);\n            if (cmp < 0) {\n              // Definitely competes\n              competes = true;\n              break;\n            } else if (cmp > 0) {\n              // Definitely does not compete\n              break;\n            } else if (compIDX == groupComp.comparators.length-1) {\n              if (shard.shardIndex < mergedGroup.minShardIndex) {\n                competes = true;\n              }\n            }\n          }\n\n          //System.out.println(\"      competes=\" + competes);\n\n          if (competes) {\n            // Group's sort changed -- remove & re-insert\n            if (mergedGroup.inQueue) {\n              queue.remove(mergedGroup);\n            }\n            mergedGroup.topValues = group.sortValues;\n            mergedGroup.minShardIndex = shard.shardIndex;\n            queue.add(mergedGroup);\n            mergedGroup.inQueue = true;\n          }\n        }\n\n        mergedGroup.shards.add(shard);\n        break;\n      }\n\n      // Prune un-competitive groups:\n      while(queue.size() > topN) {\n        final MergedGroup<T> group = queue.pollLast();\n        //System.out.println(\"PRUNE: \" + group);\n        group.inQueue = false;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/SearchGroup.GroupMerger#updateNextGroup(int,ShardIter[T]).mjava","pathOld":"lucene/grouping/src/java/org/apache/lucene/search/grouping/SearchGroup.GroupMerger#updateNextGroup(int,ShardIter[T]).mjava","sourceNew":"    @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n    private void updateNextGroup(int topN, ShardIter<T> shard) {\n      while(shard.iter.hasNext()) {\n        final SearchGroup<T> group = shard.next();\n        MergedGroup<T> mergedGroup = groupsSeen.get(group.groupValue);\n        final boolean isNew = mergedGroup == null;\n        //System.out.println(\"    next group=\" + (group.groupValue == null ? \"null\" : ((BytesRef) group.groupValue).utf8ToString()) + \" sort=\" + Arrays.toString(group.sortValues));\n\n        if (isNew) {\n          // Start a new group:\n          //System.out.println(\"      new\");\n          mergedGroup = new MergedGroup<>(group.groupValue);\n          mergedGroup.minShardIndex = shard.shardIndex;\n          assert group.sortValues != null;\n          mergedGroup.topValues = group.sortValues;\n          groupsSeen.put(group.groupValue, mergedGroup);\n          mergedGroup.inQueue = true;\n          queue.add(mergedGroup);\n        } else if (mergedGroup.processed) {\n          // This shard produced a group that we already\n          // processed; move on to next group...\n          continue;\n        } else {\n          //System.out.println(\"      old\");\n          boolean competes = false;\n          for(int compIDX=0;compIDX<groupComp.comparators.length;compIDX++) {\n            final int cmp = groupComp.reversed[compIDX] * groupComp.comparators[compIDX].compareValues(group.sortValues[compIDX],\n                                                                                                       mergedGroup.topValues[compIDX]);\n            if (cmp < 0) {\n              // Definitely competes\n              competes = true;\n              break;\n            } else if (cmp > 0) {\n              // Definitely does not compete\n              break;\n            } else if (compIDX == groupComp.comparators.length-1) {\n              if (shard.shardIndex < mergedGroup.minShardIndex) {\n                competes = true;\n              }\n            }\n          }\n\n          //System.out.println(\"      competes=\" + competes);\n\n          if (competes) {\n            // Group's sort changed -- remove & re-insert\n            if (mergedGroup.inQueue) {\n              queue.remove(mergedGroup);\n            }\n            mergedGroup.topValues = group.sortValues;\n            mergedGroup.minShardIndex = shard.shardIndex;\n            queue.add(mergedGroup);\n            mergedGroup.inQueue = true;\n          }\n        }\n\n        mergedGroup.shards.add(shard);\n        break;\n      }\n\n      // Prune un-competitive groups:\n      while(queue.size() > topN) {\n        final MergedGroup<T> group = queue.pollLast();\n        //System.out.println(\"PRUNE: \" + group);\n        group.inQueue = false;\n      }\n    }\n\n","sourceOld":"    @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n    private void updateNextGroup(int topN, ShardIter<T> shard) {\n      while(shard.iter.hasNext()) {\n        final SearchGroup<T> group = shard.next();\n        MergedGroup<T> mergedGroup = groupsSeen.get(group.groupValue);\n        final boolean isNew = mergedGroup == null;\n        //System.out.println(\"    next group=\" + (group.groupValue == null ? \"null\" : ((BytesRef) group.groupValue).utf8ToString()) + \" sort=\" + Arrays.toString(group.sortValues));\n\n        if (isNew) {\n          // Start a new group:\n          //System.out.println(\"      new\");\n          mergedGroup = new MergedGroup<T>(group.groupValue);\n          mergedGroup.minShardIndex = shard.shardIndex;\n          assert group.sortValues != null;\n          mergedGroup.topValues = group.sortValues;\n          groupsSeen.put(group.groupValue, mergedGroup);\n          mergedGroup.inQueue = true;\n          queue.add(mergedGroup);\n        } else if (mergedGroup.processed) {\n          // This shard produced a group that we already\n          // processed; move on to next group...\n          continue;\n        } else {\n          //System.out.println(\"      old\");\n          boolean competes = false;\n          for(int compIDX=0;compIDX<groupComp.comparators.length;compIDX++) {\n            final int cmp = groupComp.reversed[compIDX] * groupComp.comparators[compIDX].compareValues(group.sortValues[compIDX],\n                                                                                                       mergedGroup.topValues[compIDX]);\n            if (cmp < 0) {\n              // Definitely competes\n              competes = true;\n              break;\n            } else if (cmp > 0) {\n              // Definitely does not compete\n              break;\n            } else if (compIDX == groupComp.comparators.length-1) {\n              if (shard.shardIndex < mergedGroup.minShardIndex) {\n                competes = true;\n              }\n            }\n          }\n\n          //System.out.println(\"      competes=\" + competes);\n\n          if (competes) {\n            // Group's sort changed -- remove & re-insert\n            if (mergedGroup.inQueue) {\n              queue.remove(mergedGroup);\n            }\n            mergedGroup.topValues = group.sortValues;\n            mergedGroup.minShardIndex = shard.shardIndex;\n            queue.add(mergedGroup);\n            mergedGroup.inQueue = true;\n          }\n        }\n\n        mergedGroup.shards.add(shard);\n        break;\n      }\n\n      // Prune un-competitive groups:\n      while(queue.size() > topN) {\n        final MergedGroup<T> group = queue.pollLast();\n        //System.out.println(\"PRUNE: \" + group);\n        group.inQueue = false;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}