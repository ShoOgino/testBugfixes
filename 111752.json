{"path":"src/java/org/apache/lucene/search/FieldCacheImpl.ByteCache#createValue(IndexReader,Entry).mjava","commits":[{"id":"e69f59b863731d864bf3047235e718f0f88f8841","date":1250105498,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/FieldCacheImpl.ByteCache#createValue(IndexReader,Entry).mjava","pathOld":"/dev/null","sourceNew":"    protected Object createValue(IndexReader reader, Entry entryKey)\n        throws IOException {\n      Entry entry = (Entry) entryKey;\n      String field = entry.field;\n      ByteParser parser = (ByteParser) entry.custom;\n      if (parser == null) {\n        return wrapper.getBytes(reader, field, FieldCache.DEFAULT_BYTE_PARSER);\n      }\n      final byte[] retArray = new byte[reader.maxDoc()];\n      TermDocs termDocs = reader.termDocs();\n      TermEnum termEnum = reader.terms (new Term (field));\n      try {\n        do {\n          Term term = termEnum.term();\n          if (term==null || term.field() != field) break;\n          byte termval = parser.parseByte(term.text());\n          termDocs.seek (termEnum);\n          while (termDocs.next()) {\n            retArray[termDocs.doc()] = termval;\n          }\n        } while (termEnum.next());\n      } catch (StopFillCacheException stop) {\n      } finally {\n        termDocs.close();\n        termEnum.close();\n      }\n      return retArray;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"20ff1ff2aa6f91149e9cd75f65a56fbdda5266ce","date":1255993146,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/FieldCacheImpl.ByteCache#createValue(IndexReader,Entry).mjava","pathOld":"src/java/org/apache/lucene/search/FieldCacheImpl.ByteCache#createValue(IndexReader,Entry).mjava","sourceNew":"    protected Object createValue(IndexReader reader, Entry entryKey)\n        throws IOException {\n      Entry entry = entryKey;\n      String field = entry.field;\n      ByteParser parser = (ByteParser) entry.custom;\n      if (parser == null) {\n        return wrapper.getBytes(reader, field, FieldCache.DEFAULT_BYTE_PARSER);\n      }\n      final byte[] retArray = new byte[reader.maxDoc()];\n      TermDocs termDocs = reader.termDocs();\n      TermEnum termEnum = reader.terms (new Term (field));\n      try {\n        do {\n          Term term = termEnum.term();\n          if (term==null || term.field() != field) break;\n          byte termval = parser.parseByte(term.text());\n          termDocs.seek (termEnum);\n          while (termDocs.next()) {\n            retArray[termDocs.doc()] = termval;\n          }\n        } while (termEnum.next());\n      } catch (StopFillCacheException stop) {\n      } finally {\n        termDocs.close();\n        termEnum.close();\n      }\n      return retArray;\n    }\n\n","sourceOld":"    protected Object createValue(IndexReader reader, Entry entryKey)\n        throws IOException {\n      Entry entry = (Entry) entryKey;\n      String field = entry.field;\n      ByteParser parser = (ByteParser) entry.custom;\n      if (parser == null) {\n        return wrapper.getBytes(reader, field, FieldCache.DEFAULT_BYTE_PARSER);\n      }\n      final byte[] retArray = new byte[reader.maxDoc()];\n      TermDocs termDocs = reader.termDocs();\n      TermEnum termEnum = reader.terms (new Term (field));\n      try {\n        do {\n          Term term = termEnum.term();\n          if (term==null || term.field() != field) break;\n          byte termval = parser.parseByte(term.text());\n          termDocs.seek (termEnum);\n          while (termDocs.next()) {\n            retArray[termDocs.doc()] = termval;\n          }\n        } while (termEnum.next());\n      } catch (StopFillCacheException stop) {\n      } finally {\n        termDocs.close();\n        termEnum.close();\n      }\n      return retArray;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a9e385641d717e641408d8fbbc62be8fc766357","date":1256746606,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/FieldCacheImpl.ByteCache#createValue(IndexReader,Entry).mjava","pathOld":"src/java/org/apache/lucene/search/FieldCacheImpl.ByteCache#createValue(IndexReader,Entry).mjava","sourceNew":"    @Override\n    protected Object createValue(IndexReader reader, Entry entryKey)\n        throws IOException {\n      Entry entry = entryKey;\n      String field = entry.field;\n      ByteParser parser = (ByteParser) entry.custom;\n      if (parser == null) {\n        return wrapper.getBytes(reader, field, FieldCache.DEFAULT_BYTE_PARSER);\n      }\n      final byte[] retArray = new byte[reader.maxDoc()];\n      TermDocs termDocs = reader.termDocs();\n      TermEnum termEnum = reader.terms (new Term (field));\n      try {\n        do {\n          Term term = termEnum.term();\n          if (term==null || term.field() != field) break;\n          byte termval = parser.parseByte(term.text());\n          termDocs.seek (termEnum);\n          while (termDocs.next()) {\n            retArray[termDocs.doc()] = termval;\n          }\n        } while (termEnum.next());\n      } catch (StopFillCacheException stop) {\n      } finally {\n        termDocs.close();\n        termEnum.close();\n      }\n      return retArray;\n    }\n\n","sourceOld":"    protected Object createValue(IndexReader reader, Entry entryKey)\n        throws IOException {\n      Entry entry = entryKey;\n      String field = entry.field;\n      ByteParser parser = (ByteParser) entry.custom;\n      if (parser == null) {\n        return wrapper.getBytes(reader, field, FieldCache.DEFAULT_BYTE_PARSER);\n      }\n      final byte[] retArray = new byte[reader.maxDoc()];\n      TermDocs termDocs = reader.termDocs();\n      TermEnum termEnum = reader.terms (new Term (field));\n      try {\n        do {\n          Term term = termEnum.term();\n          if (term==null || term.field() != field) break;\n          byte termval = parser.parseByte(term.text());\n          termDocs.seek (termEnum);\n          while (termDocs.next()) {\n            retArray[termDocs.doc()] = termval;\n          }\n        } while (termEnum.next());\n      } catch (StopFillCacheException stop) {\n      } finally {\n        termDocs.close();\n        termEnum.close();\n      }\n      return retArray;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/FieldCacheImpl.ByteCache#createValue(IndexReader,Entry).mjava","pathOld":"src/java/org/apache/lucene/search/FieldCacheImpl.ByteCache#createValue(IndexReader,Entry).mjava","sourceNew":"    @Override\n    protected Object createValue(IndexReader reader, Entry entryKey)\n        throws IOException {\n      Entry entry = entryKey;\n      String field = entry.field;\n      ByteParser parser = (ByteParser) entry.custom;\n      if (parser == null) {\n        return wrapper.getBytes(reader, field, FieldCache.DEFAULT_BYTE_PARSER);\n      }\n      final byte[] retArray = new byte[reader.maxDoc()];\n      TermDocs termDocs = reader.termDocs();\n      TermEnum termEnum = reader.terms (new Term (field));\n      try {\n        do {\n          Term term = termEnum.term();\n          if (term==null || term.field() != field) break;\n          byte termval = parser.parseByte(term.text());\n          termDocs.seek (termEnum);\n          while (termDocs.next()) {\n            retArray[termDocs.doc()] = termval;\n          }\n        } while (termEnum.next());\n      } catch (StopFillCacheException stop) {\n      } finally {\n        termDocs.close();\n        termEnum.close();\n      }\n      return retArray;\n    }\n\n","sourceOld":"    @Override\n    protected Object createValue(IndexReader reader, Entry entryKey)\n        throws IOException {\n      Entry entry = entryKey;\n      String field = entry.field;\n      ByteParser parser = (ByteParser) entry.custom;\n      if (parser == null) {\n        return wrapper.getBytes(reader, field, FieldCache.DEFAULT_BYTE_PARSER);\n      }\n      final byte[] retArray = new byte[reader.maxDoc()];\n      TermDocs termDocs = reader.termDocs();\n      TermEnum termEnum = reader.terms (new Term (field));\n      try {\n        do {\n          Term term = termEnum.term();\n          if (term==null || term.field() != field) break;\n          byte termval = parser.parseByte(term.text());\n          termDocs.seek (termEnum);\n          while (termDocs.next()) {\n            retArray[termDocs.doc()] = termval;\n          }\n        } while (termEnum.next());\n      } catch (StopFillCacheException stop) {\n      } finally {\n        termDocs.close();\n        termEnum.close();\n      }\n      return retArray;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8a9e385641d717e641408d8fbbc62be8fc766357":["20ff1ff2aa6f91149e9cd75f65a56fbdda5266ce"],"e69f59b863731d864bf3047235e718f0f88f8841":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"20ff1ff2aa6f91149e9cd75f65a56fbdda5266ce":["e69f59b863731d864bf3047235e718f0f88f8841"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["8a9e385641d717e641408d8fbbc62be8fc766357"]},"commit2Childs":{"8a9e385641d717e641408d8fbbc62be8fc766357":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"e69f59b863731d864bf3047235e718f0f88f8841":["20ff1ff2aa6f91149e9cd75f65a56fbdda5266ce"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e69f59b863731d864bf3047235e718f0f88f8841"],"20ff1ff2aa6f91149e9cd75f65a56fbdda5266ce":["8a9e385641d717e641408d8fbbc62be8fc766357"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}