{"path":"lucene/test-framework/src/java/org/apache/lucene/index/BasePointsFormatTestCase#testBasic().mjava","commits":[{"id":"4522ffca5a1f420c6a02198c9332d7c596a30ca5","date":1457270822,"type":1,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BasePointsFormatTestCase#testBasic().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BasePointFormatTestCase#testBasic().mjava","sourceNew":"  public void testBasic() throws Exception {\n    Directory dir = getDirectory(20);\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    iwc.setMergePolicy(newLogMergePolicy());\n    IndexWriter w = new IndexWriter(dir, iwc);\n    byte[] point = new byte[4];\n    for(int i=0;i<20;i++) {\n      Document doc = new Document();\n      NumericUtils.intToSortableBytes(i, point, 0);\n      doc.add(new BinaryPoint(\"dim\", point));\n      w.addDocument(doc);\n    }\n    w.forceMerge(1);\n    w.close();\n\n    DirectoryReader r = DirectoryReader.open(dir);\n    LeafReader sub = getOnlySegmentReader(r);\n    PointValues values = sub.getPointValues();\n\n    // Simple test: make sure intersect can visit every doc:\n    BitSet seen = new BitSet();\n    values.intersect(\"dim\",\n                     new IntersectVisitor() {\n                       @Override\n                       public Relation compare(byte[] minPacked, byte[] maxPacked) {\n                         return Relation.CELL_CROSSES_QUERY;\n                       }\n                       public void visit(int docID) {\n                         throw new IllegalStateException();\n                       }\n                       public void visit(int docID, byte[] packedValue) {\n                         seen.set(docID);\n                         assertEquals(docID, NumericUtils.sortableBytesToInt(packedValue, 0));\n                       }\n                     });\n    assertEquals(20, seen.cardinality());\n    IOUtils.close(r, dir);\n  }\n\n","sourceOld":"  public void testBasic() throws Exception {\n    Directory dir = getDirectory(20);\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    iwc.setMergePolicy(newLogMergePolicy());\n    IndexWriter w = new IndexWriter(dir, iwc);\n    byte[] point = new byte[4];\n    for(int i=0;i<20;i++) {\n      Document doc = new Document();\n      NumericUtils.intToSortableBytes(i, point, 0);\n      doc.add(new BinaryPoint(\"dim\", point));\n      w.addDocument(doc);\n    }\n    w.forceMerge(1);\n    w.close();\n\n    DirectoryReader r = DirectoryReader.open(dir);\n    LeafReader sub = getOnlySegmentReader(r);\n    PointValues values = sub.getPointValues();\n\n    // Simple test: make sure intersect can visit every doc:\n    BitSet seen = new BitSet();\n    values.intersect(\"dim\",\n                     new IntersectVisitor() {\n                       @Override\n                       public Relation compare(byte[] minPacked, byte[] maxPacked) {\n                         return Relation.CELL_CROSSES_QUERY;\n                       }\n                       public void visit(int docID) {\n                         throw new IllegalStateException();\n                       }\n                       public void visit(int docID, byte[] packedValue) {\n                         seen.set(docID);\n                         assertEquals(docID, NumericUtils.sortableBytesToInt(packedValue, 0));\n                       }\n                     });\n    assertEquals(20, seen.cardinality());\n    IOUtils.close(r, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1","date":1457644139,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BasePointsFormatTestCase#testBasic().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BasePointsFormatTestCase#testBasic().mjava","sourceNew":"  public void testBasic() throws Exception {\n    Directory dir = getDirectory(20);\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    iwc.setMergePolicy(newLogMergePolicy());\n    IndexWriter w = new IndexWriter(dir, iwc);\n    byte[] point = new byte[4];\n    for(int i=0;i<20;i++) {\n      Document doc = new Document();\n      NumericUtils.intToSortableBytes(i, point, 0);\n      doc.add(new BinaryPoint(\"dim\", point));\n      w.addDocument(doc);\n    }\n    w.forceMerge(1);\n    w.close();\n\n    DirectoryReader r = DirectoryReader.open(dir);\n    LeafReader sub = getOnlyLeafReader(r);\n    PointValues values = sub.getPointValues();\n\n    // Simple test: make sure intersect can visit every doc:\n    BitSet seen = new BitSet();\n    values.intersect(\"dim\",\n                     new IntersectVisitor() {\n                       @Override\n                       public Relation compare(byte[] minPacked, byte[] maxPacked) {\n                         return Relation.CELL_CROSSES_QUERY;\n                       }\n                       public void visit(int docID) {\n                         throw new IllegalStateException();\n                       }\n                       public void visit(int docID, byte[] packedValue) {\n                         seen.set(docID);\n                         assertEquals(docID, NumericUtils.sortableBytesToInt(packedValue, 0));\n                       }\n                     });\n    assertEquals(20, seen.cardinality());\n    IOUtils.close(r, dir);\n  }\n\n","sourceOld":"  public void testBasic() throws Exception {\n    Directory dir = getDirectory(20);\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    iwc.setMergePolicy(newLogMergePolicy());\n    IndexWriter w = new IndexWriter(dir, iwc);\n    byte[] point = new byte[4];\n    for(int i=0;i<20;i++) {\n      Document doc = new Document();\n      NumericUtils.intToSortableBytes(i, point, 0);\n      doc.add(new BinaryPoint(\"dim\", point));\n      w.addDocument(doc);\n    }\n    w.forceMerge(1);\n    w.close();\n\n    DirectoryReader r = DirectoryReader.open(dir);\n    LeafReader sub = getOnlySegmentReader(r);\n    PointValues values = sub.getPointValues();\n\n    // Simple test: make sure intersect can visit every doc:\n    BitSet seen = new BitSet();\n    values.intersect(\"dim\",\n                     new IntersectVisitor() {\n                       @Override\n                       public Relation compare(byte[] minPacked, byte[] maxPacked) {\n                         return Relation.CELL_CROSSES_QUERY;\n                       }\n                       public void visit(int docID) {\n                         throw new IllegalStateException();\n                       }\n                       public void visit(int docID, byte[] packedValue) {\n                         seen.set(docID);\n                         assertEquals(docID, NumericUtils.sortableBytesToInt(packedValue, 0));\n                       }\n                     });\n    assertEquals(20, seen.cardinality());\n    IOUtils.close(r, dir);\n  }\n\n","bugFix":["ca792c26af46bd6c4a08d81117c60440cf6a7e3d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"367f57e2ee85b7f7e28cfe73370a22cf67624f65","date":1476778467,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BasePointsFormatTestCase#testBasic().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BasePointsFormatTestCase#testBasic().mjava","sourceNew":"  public void testBasic() throws Exception {\n    Directory dir = getDirectory(20);\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    iwc.setMergePolicy(newLogMergePolicy());\n    IndexWriter w = new IndexWriter(dir, iwc);\n    byte[] point = new byte[4];\n    for(int i=0;i<20;i++) {\n      Document doc = new Document();\n      NumericUtils.intToSortableBytes(i, point, 0);\n      doc.add(new BinaryPoint(\"dim\", point));\n      w.addDocument(doc);\n    }\n    w.forceMerge(1);\n    w.close();\n\n    DirectoryReader r = DirectoryReader.open(dir);\n    LeafReader sub = getOnlyLeafReader(r);\n    PointValues values = sub.getPointValues(\"dim\");\n\n    // Simple test: make sure intersect can visit every doc:\n    BitSet seen = new BitSet();\n    values.intersect(\n                     new IntersectVisitor() {\n                       @Override\n                       public Relation compare(byte[] minPacked, byte[] maxPacked) {\n                         return Relation.CELL_CROSSES_QUERY;\n                       }\n                       public void visit(int docID) {\n                         throw new IllegalStateException();\n                       }\n                       public void visit(int docID, byte[] packedValue) {\n                         seen.set(docID);\n                         assertEquals(docID, NumericUtils.sortableBytesToInt(packedValue, 0));\n                       }\n                     });\n    assertEquals(20, seen.cardinality());\n    IOUtils.close(r, dir);\n  }\n\n","sourceOld":"  public void testBasic() throws Exception {\n    Directory dir = getDirectory(20);\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    iwc.setMergePolicy(newLogMergePolicy());\n    IndexWriter w = new IndexWriter(dir, iwc);\n    byte[] point = new byte[4];\n    for(int i=0;i<20;i++) {\n      Document doc = new Document();\n      NumericUtils.intToSortableBytes(i, point, 0);\n      doc.add(new BinaryPoint(\"dim\", point));\n      w.addDocument(doc);\n    }\n    w.forceMerge(1);\n    w.close();\n\n    DirectoryReader r = DirectoryReader.open(dir);\n    LeafReader sub = getOnlyLeafReader(r);\n    PointValues values = sub.getPointValues();\n\n    // Simple test: make sure intersect can visit every doc:\n    BitSet seen = new BitSet();\n    values.intersect(\"dim\",\n                     new IntersectVisitor() {\n                       @Override\n                       public Relation compare(byte[] minPacked, byte[] maxPacked) {\n                         return Relation.CELL_CROSSES_QUERY;\n                       }\n                       public void visit(int docID) {\n                         throw new IllegalStateException();\n                       }\n                       public void visit(int docID, byte[] packedValue) {\n                         seen.set(docID);\n                         assertEquals(docID, NumericUtils.sortableBytesToInt(packedValue, 0));\n                       }\n                     });\n    assertEquals(20, seen.cardinality());\n    IOUtils.close(r, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BasePointsFormatTestCase#testBasic().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BasePointsFormatTestCase#testBasic().mjava","sourceNew":"  public void testBasic() throws Exception {\n    Directory dir = getDirectory(20);\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    iwc.setMergePolicy(newLogMergePolicy());\n    IndexWriter w = new IndexWriter(dir, iwc);\n    byte[] point = new byte[4];\n    for(int i=0;i<20;i++) {\n      Document doc = new Document();\n      NumericUtils.intToSortableBytes(i, point, 0);\n      doc.add(new BinaryPoint(\"dim\", point));\n      w.addDocument(doc);\n    }\n    w.forceMerge(1);\n    w.close();\n\n    DirectoryReader r = DirectoryReader.open(dir);\n    LeafReader sub = getOnlyLeafReader(r);\n    PointValues values = sub.getPointValues(\"dim\");\n\n    // Simple test: make sure intersect can visit every doc:\n    BitSet seen = new BitSet();\n    values.intersect(\n                     new IntersectVisitor() {\n                       @Override\n                       public Relation compare(byte[] minPacked, byte[] maxPacked) {\n                         return Relation.CELL_CROSSES_QUERY;\n                       }\n                       public void visit(int docID) {\n                         throw new IllegalStateException();\n                       }\n                       public void visit(int docID, byte[] packedValue) {\n                         seen.set(docID);\n                         assertEquals(docID, NumericUtils.sortableBytesToInt(packedValue, 0));\n                       }\n                     });\n    assertEquals(20, seen.cardinality());\n    IOUtils.close(r, dir);\n  }\n\n","sourceOld":"  public void testBasic() throws Exception {\n    Directory dir = getDirectory(20);\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    iwc.setMergePolicy(newLogMergePolicy());\n    IndexWriter w = new IndexWriter(dir, iwc);\n    byte[] point = new byte[4];\n    for(int i=0;i<20;i++) {\n      Document doc = new Document();\n      NumericUtils.intToSortableBytes(i, point, 0);\n      doc.add(new BinaryPoint(\"dim\", point));\n      w.addDocument(doc);\n    }\n    w.forceMerge(1);\n    w.close();\n\n    DirectoryReader r = DirectoryReader.open(dir);\n    LeafReader sub = getOnlyLeafReader(r);\n    PointValues values = sub.getPointValues();\n\n    // Simple test: make sure intersect can visit every doc:\n    BitSet seen = new BitSet();\n    values.intersect(\"dim\",\n                     new IntersectVisitor() {\n                       @Override\n                       public Relation compare(byte[] minPacked, byte[] maxPacked) {\n                         return Relation.CELL_CROSSES_QUERY;\n                       }\n                       public void visit(int docID) {\n                         throw new IllegalStateException();\n                       }\n                       public void visit(int docID, byte[] packedValue) {\n                         seen.set(docID);\n                         assertEquals(docID, NumericUtils.sortableBytesToInt(packedValue, 0));\n                       }\n                     });\n    assertEquals(20, seen.cardinality());\n    IOUtils.close(r, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1":["4522ffca5a1f420c6a02198c9332d7c596a30ca5"],"4522ffca5a1f420c6a02198c9332d7c596a30ca5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"367f57e2ee85b7f7e28cfe73370a22cf67624f65":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1","367f57e2ee85b7f7e28cfe73370a22cf67624f65"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["367f57e2ee85b7f7e28cfe73370a22cf67624f65"]},"commit2Childs":{"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1":["367f57e2ee85b7f7e28cfe73370a22cf67624f65","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4522ffca5a1f420c6a02198c9332d7c596a30ca5":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4522ffca5a1f420c6a02198c9332d7c596a30ca5"],"367f57e2ee85b7f7e28cfe73370a22cf67624f65":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}