{"path":"modules/grouping/src/java/org/apache/lucene/search/grouping/function/FunctionFirstPassGroupingCollector#FunctionFirstPassGroupingCollector(ValueSource,Map[#,#],Sort,int).mjava","commits":[{"id":"beac87a1a5dbb19e3803d52b56690043fbc6671d","date":1331196058,"type":1,"author":"Martijn van Groningen","isMerge":false,"pathNew":"modules/grouping/src/java/org/apache/lucene/search/grouping/function/FunctionFirstPassGroupingCollector#FunctionFirstPassGroupingCollector(ValueSource,Map[#,#],Sort,int).mjava","pathOld":"modules/grouping/src/java/org/apache/lucene/search/grouping/function/FunctionFirstPassGroupingCollector#FunctionFirstPassGroupingCollector(ValueSource,Map,Sort,int).mjava","sourceNew":"  /**\n   * Creates a first pass collector.\n   *\n   * @param groupByVS  The {@link ValueSource} instance to group by\n   * @param vsContext  The ValueSource context\n   * @param groupSort  The {@link Sort} used to sort the\n   *                   groups.  The top sorted document within each group\n   *                   according to groupSort, determines how that group\n   *                   sorts against other groups.  This must be non-null,\n   *                   ie, if you want to groupSort by relevance use\n   *                   Sort.RELEVANCE.\n   * @param topNGroups How many top groups to keep.\n   * @throws IOException When I/O related errors occur\n   */\n  public FunctionFirstPassGroupingCollector(ValueSource groupByVS, Map<?, ?> vsContext, Sort groupSort, int topNGroups) throws IOException {\n    super(groupSort, topNGroups);\n    this.groupByVS = groupByVS;\n    this.vsContext = vsContext;\n  }\n\n","sourceOld":"  /**\n   * Creates a first pass collector.\n   *\n   * @param groupByVS  The {@link ValueSource} instance to group by\n   * @param vsContext  The ValueSource context\n   * @param groupSort  The {@link Sort} used to sort the\n   *                   groups.  The top sorted document within each group\n   *                   according to groupSort, determines how that group\n   *                   sorts against other groups.  This must be non-null,\n   *                   ie, if you want to groupSort by relevance use\n   *                   Sort.RELEVANCE.\n   * @param topNGroups How many top groups to keep.\n   * @throws IOException When I/O related errors occur\n   */\n  public FunctionFirstPassGroupingCollector(ValueSource groupByVS, Map vsContext, Sort groupSort, int topNGroups) throws IOException {\n    super(groupSort, topNGroups);\n    this.groupByVS = groupByVS;\n    this.vsContext = vsContext;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"38e3b736c7ca086d61b7dbb841c905ee115490da","date":1331657018,"type":1,"author":"Ryan McKinley","isMerge":true,"pathNew":"modules/grouping/src/java/org/apache/lucene/search/grouping/function/FunctionFirstPassGroupingCollector#FunctionFirstPassGroupingCollector(ValueSource,Map[#,#],Sort,int).mjava","pathOld":"modules/grouping/src/java/org/apache/lucene/search/grouping/function/FunctionFirstPassGroupingCollector#FunctionFirstPassGroupingCollector(ValueSource,Map,Sort,int).mjava","sourceNew":"  /**\n   * Creates a first pass collector.\n   *\n   * @param groupByVS  The {@link ValueSource} instance to group by\n   * @param vsContext  The ValueSource context\n   * @param groupSort  The {@link Sort} used to sort the\n   *                   groups.  The top sorted document within each group\n   *                   according to groupSort, determines how that group\n   *                   sorts against other groups.  This must be non-null,\n   *                   ie, if you want to groupSort by relevance use\n   *                   Sort.RELEVANCE.\n   * @param topNGroups How many top groups to keep.\n   * @throws IOException When I/O related errors occur\n   */\n  public FunctionFirstPassGroupingCollector(ValueSource groupByVS, Map<?, ?> vsContext, Sort groupSort, int topNGroups) throws IOException {\n    super(groupSort, topNGroups);\n    this.groupByVS = groupByVS;\n    this.vsContext = vsContext;\n  }\n\n","sourceOld":"  /**\n   * Creates a first pass collector.\n   *\n   * @param groupByVS  The {@link ValueSource} instance to group by\n   * @param vsContext  The ValueSource context\n   * @param groupSort  The {@link Sort} used to sort the\n   *                   groups.  The top sorted document within each group\n   *                   according to groupSort, determines how that group\n   *                   sorts against other groups.  This must be non-null,\n   *                   ie, if you want to groupSort by relevance use\n   *                   Sort.RELEVANCE.\n   * @param topNGroups How many top groups to keep.\n   * @throws IOException When I/O related errors occur\n   */\n  public FunctionFirstPassGroupingCollector(ValueSource groupByVS, Map vsContext, Sort groupSort, int topNGroups) throws IOException {\n    super(groupSort, topNGroups);\n    this.groupByVS = groupByVS;\n    this.vsContext = vsContext;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/function/FunctionFirstPassGroupingCollector#FunctionFirstPassGroupingCollector(ValueSource,Map[#,#],Sort,int).mjava","pathOld":"modules/grouping/src/java/org/apache/lucene/search/grouping/function/FunctionFirstPassGroupingCollector#FunctionFirstPassGroupingCollector(ValueSource,Map[#,#],Sort,int).mjava","sourceNew":"  /**\n   * Creates a first pass collector.\n   *\n   * @param groupByVS  The {@link ValueSource} instance to group by\n   * @param vsContext  The ValueSource context\n   * @param groupSort  The {@link Sort} used to sort the\n   *                   groups.  The top sorted document within each group\n   *                   according to groupSort, determines how that group\n   *                   sorts against other groups.  This must be non-null,\n   *                   ie, if you want to groupSort by relevance use\n   *                   Sort.RELEVANCE.\n   * @param topNGroups How many top groups to keep.\n   * @throws IOException When I/O related errors occur\n   */\n  public FunctionFirstPassGroupingCollector(ValueSource groupByVS, Map<?, ?> vsContext, Sort groupSort, int topNGroups) throws IOException {\n    super(groupSort, topNGroups);\n    this.groupByVS = groupByVS;\n    this.vsContext = vsContext;\n  }\n\n","sourceOld":"  /**\n   * Creates a first pass collector.\n   *\n   * @param groupByVS  The {@link ValueSource} instance to group by\n   * @param vsContext  The ValueSource context\n   * @param groupSort  The {@link Sort} used to sort the\n   *                   groups.  The top sorted document within each group\n   *                   according to groupSort, determines how that group\n   *                   sorts against other groups.  This must be non-null,\n   *                   ie, if you want to groupSort by relevance use\n   *                   Sort.RELEVANCE.\n   * @param topNGroups How many top groups to keep.\n   * @throws IOException When I/O related errors occur\n   */\n  public FunctionFirstPassGroupingCollector(ValueSource groupByVS, Map<?, ?> vsContext, Sort groupSort, int topNGroups) throws IOException {\n    super(groupSort, topNGroups);\n    this.groupByVS = groupByVS;\n    this.vsContext = vsContext;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"38e3b736c7ca086d61b7dbb841c905ee115490da":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","beac87a1a5dbb19e3803d52b56690043fbc6671d"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["beac87a1a5dbb19e3803d52b56690043fbc6671d"],"beac87a1a5dbb19e3803d52b56690043fbc6671d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"38e3b736c7ca086d61b7dbb841c905ee115490da":[],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"beac87a1a5dbb19e3803d52b56690043fbc6671d":["38e3b736c7ca086d61b7dbb841c905ee115490da","b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["38e3b736c7ca086d61b7dbb841c905ee115490da","beac87a1a5dbb19e3803d52b56690043fbc6671d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["38e3b736c7ca086d61b7dbb841c905ee115490da","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}