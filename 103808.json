{"path":"lucene/facet/src/test/org/apache/lucene/facet/simple/TestRangeFacets#testMixedRangeAndNonRangeTaxonomy().mjava","commits":[{"id":"ce7aff7772c162c15d520e31af46c555f60d5c3b","date":1385135519,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/simple/TestRangeFacets#testMixedRangeAndNonRangeTaxonomy().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeAccumulator#testMixedRangeAndNonRangeTaxonomy().mjava","sourceNew":"  /** Tests single request that mixes Range and non-Range\n   *  faceting, with DrillSideways and taxonomy. */\n  public void testMixedRangeAndNonRangeTaxonomy() throws Exception {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Directory td = newDirectory();\n    DirectoryTaxonomyWriter tw = new DirectoryTaxonomyWriter(td, IndexWriterConfig.OpenMode.CREATE);\n\n    FacetsConfig config = new FacetsConfig();\n    DocumentBuilder builder = new DocumentBuilder(tw, config);\n\n    for (long l = 0; l < 100; l++) {\n      Document doc = new Document();\n      // For computing range facet counts:\n      doc.add(new NumericDocValuesField(\"field\", l));\n      // For drill down by numeric range:\n      doc.add(new LongField(\"field\", l, Field.Store.NO));\n\n      if ((l&3) == 0) {\n        doc.add(new FacetField(\"dim\", \"a\"));\n      } else {\n        doc.add(new FacetField(\"dim\", \"b\"));\n      }\n      w.addDocument(builder.build(doc));\n    }\n\n    final IndexReader r = w.getReader();\n\n    final TaxonomyReader tr = new DirectoryTaxonomyReader(tw);\n\n    IndexSearcher s = newSearcher(r);\n\n    SimpleDrillSideways ds = new SimpleDrillSideways(s, config, tr) {\n\n        @Override\n        protected Facets buildFacetsResult(SimpleFacetsCollector drillDowns, SimpleFacetsCollector[] drillSideways, String[] drillSidewaysDims) throws IOException {        \n          // nocommit this is awkward... can we improve?\n          // nocommit is drillDowns allowed to be null?\n          // should it?\n          SimpleFacetsCollector dimFC = drillDowns;\n          SimpleFacetsCollector fieldFC = drillDowns;\n          if (drillSideways != null) {\n            for(int i=0;i<drillSideways.length;i++) {\n              String dim = drillSidewaysDims[i];\n              if (dim.equals(\"field\")) {\n                fieldFC = drillSideways[i];\n              } else {\n                dimFC = drillSideways[i];\n              }\n            }\n          }\n\n          Map<String,Facets> byDim = new HashMap<String,Facets>();\n          byDim.put(\"field\",\n                    new RangeFacetCounts(\"field\", fieldFC,\n                          new LongRange(\"less than 10\", 0L, true, 10L, false),\n                          new LongRange(\"less than or equal to 10\", 0L, true, 10L, true),\n                          new LongRange(\"over 90\", 90L, false, 100L, false),\n                          new LongRange(\"90 or above\", 90L, true, 100L, false),\n                          new LongRange(\"over 1000\", 1000L, false, Long.MAX_VALUE, false)));\n          byDim.put(\"dim\", getTaxonomyFacetCounts(taxoReader, config, dimFC));\n          return new MultiFacets(byDim, null);\n        }\n\n        @Override\n        protected boolean scoreSubDocsAtOnce() {\n          return random().nextBoolean();\n        }\n      };\n\n    // First search, no drill downs:\n    SimpleDrillDownQuery ddq = new SimpleDrillDownQuery(config);\n    SimpleDrillSidewaysResult dsr = ds.search(null, ddq, 10);\n\n    assertEquals(100, dsr.hits.totalHits);\n    assertEquals(\"dim (100)\\n  b (75)\\n  a (25)\\n\", dsr.facets.getTopChildren(10, \"dim\").toString());\n    assertEquals(\"field (100)\\n  less than 10 (10)\\n  less than or equal to 10 (11)\\n  over 90 (9)\\n  90 or above (10)\\n  over 1000 (0)\\n\",\n                 dsr.facets.getTopChildren(10, \"field\").toString());\n\n    // Second search, drill down on dim=b:\n    ddq = new SimpleDrillDownQuery(config);\n    ddq.add(\"dim\", \"b\");\n    dsr = ds.search(null, ddq, 10);\n\n    assertEquals(75, dsr.hits.totalHits);\n    assertEquals(\"dim (100)\\n  b (75)\\n  a (25)\\n\", dsr.facets.getTopChildren(10, \"dim\").toString());\n    assertEquals(\"field (75)\\n  less than 10 (7)\\n  less than or equal to 10 (8)\\n  over 90 (7)\\n  90 or above (8)\\n  over 1000 (0)\\n\",\n                 dsr.facets.getTopChildren(10, \"field\").toString());\n\n    // Third search, drill down on \"less than or equal to 10\":\n    ddq = new SimpleDrillDownQuery(config);\n    ddq.add(\"field\", NumericRangeQuery.newLongRange(\"field\", 0L, 10L, true, true));\n    dsr = ds.search(null, ddq, 10);\n\n    assertEquals(11, dsr.hits.totalHits);\n    assertEquals(\"dim (11)\\n  b (8)\\n  a (3)\\n\", dsr.facets.getTopChildren(10, \"dim\").toString());\n    assertEquals(\"field (100)\\n  less than 10 (10)\\n  less than or equal to 10 (11)\\n  over 90 (9)\\n  90 or above (10)\\n  over 1000 (0)\\n\",\n                 dsr.facets.getTopChildren(10, \"field\").toString());\n    IOUtils.close(tw, tr, td, w, r, d);\n  }\n\n","sourceOld":"  /** Tests single request that mixes Range and non-Range\n   *  faceting, with DrillSideways and taxonomy. */\n  public void testMixedRangeAndNonRangeTaxonomy() throws Exception {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Directory td = newDirectory();\n    DirectoryTaxonomyWriter tw = new DirectoryTaxonomyWriter(td, IndexWriterConfig.OpenMode.CREATE);\n    FacetFields ff = new FacetFields(tw);\n\n    for (long l = 0; l < 100; l++) {\n      Document doc = new Document();\n      // For computing range facet counts:\n      doc.add(new NumericDocValuesField(\"field\", l));\n      // For drill down by numeric range:\n      doc.add(new LongField(\"field\", l, Field.Store.NO));\n\n      FacetLabel cp;\n      if ((l&3) == 0) {\n        cp = new FacetLabel(\"dim\", \"a\");\n      } else {\n        cp = new FacetLabel(\"dim\", \"b\");\n      }\n      ff.addFields(doc, Collections.singletonList(cp));\n      w.addDocument(doc);\n    }\n\n    final IndexReader r = w.getReader();\n    w.close();\n\n    final TaxonomyReader tr = new DirectoryTaxonomyReader(tw);\n    tw.close();\n\n    IndexSearcher s = newSearcher(r);\n\n    final CountFacetRequest countRequest = new CountFacetRequest(new FacetLabel(\"dim\"), 2);\n    final RangeFacetRequest<LongRange> rangeRequest = new RangeFacetRequest<LongRange>(\"field\",\n                          new LongRange(\"less than 10\", 0L, true, 10L, false),\n                          new LongRange(\"less than or equal to 10\", 0L, true, 10L, true),\n                          new LongRange(\"over 90\", 90L, false, 100L, false),\n                          new LongRange(\"90 or above\", 90L, true, 100L, false),\n                          new LongRange(\"over 1000\", 1000L, false, Long.MAX_VALUE, false));\n    FacetSearchParams fsp = new FacetSearchParams(countRequest, rangeRequest);\n    \n    final Set<String> dimSeen = new HashSet<String>();\n\n    DrillSideways ds = new DrillSideways(s, tr) {\n        @Override\n        protected FacetsAccumulator getDrillDownAccumulator(FacetSearchParams fsp) {\n          checkSeen(fsp);\n          return FacetsAccumulator.create(fsp, r, tr, null);\n        }\n\n        @Override\n        protected FacetsAccumulator getDrillSidewaysAccumulator(String dim, FacetSearchParams fsp) {\n          checkSeen(fsp);\n          return FacetsAccumulator.create(fsp, r, tr, null);\n        }\n\n        private void checkSeen(FacetSearchParams fsp) {\n          // Each dim should up only once, across\n          // both drillDown and drillSideways requests:\n          for(FacetRequest fr : fsp.facetRequests) {\n            String dim = fr.categoryPath.components[0];\n            assertFalse(\"dim \" + dim + \" already seen\", dimSeen.contains(dim));\n            dimSeen.add(dim);\n          }\n        }\n\n        @Override\n        protected boolean scoreSubDocsAtOnce() {\n          return random().nextBoolean();\n        }\n      };\n\n    // First search, no drill downs:\n    DrillDownQuery ddq = new DrillDownQuery(FacetIndexingParams.DEFAULT, new MatchAllDocsQuery());\n    DrillSidewaysResult dsr = ds.search(null, ddq, 10, fsp);\n\n    assertEquals(100, dsr.hits.totalHits);\n    assertEquals(2, dsr.facetResults.size());\n    assertEquals(\"dim (0)\\n  b (75)\\n  a (25)\\n\", FacetTestUtils.toSimpleString(dsr.facetResults.get(0)));\n    assertEquals(\"field (0)\\n  less than 10 (10)\\n  less than or equal to 10 (11)\\n  over 90 (9)\\n  90 or above (10)\\n  over 1000 (0)\\n\", FacetTestUtils.toSimpleString(dsr.facetResults.get(1)));\n\n    // Second search, drill down on dim=b:\n    ddq = new DrillDownQuery(FacetIndexingParams.DEFAULT, new MatchAllDocsQuery());\n    ddq.add(new FacetLabel(\"dim\", \"b\"));\n    dimSeen.clear();\n    dsr = ds.search(null, ddq, 10, fsp);\n\n    assertEquals(75, dsr.hits.totalHits);\n    assertEquals(2, dsr.facetResults.size());\n    assertEquals(\"dim (0)\\n  b (75)\\n  a (25)\\n\", FacetTestUtils.toSimpleString(dsr.facetResults.get(0)));\n    assertEquals(\"field (0)\\n  less than 10 (7)\\n  less than or equal to 10 (8)\\n  over 90 (7)\\n  90 or above (8)\\n  over 1000 (0)\\n\", FacetTestUtils.toSimpleString(dsr.facetResults.get(1)));\n\n    // Third search, drill down on \"less than or equal to 10\":\n    ddq = new DrillDownQuery(FacetIndexingParams.DEFAULT, new MatchAllDocsQuery());\n    ddq.add(\"field\", NumericRangeQuery.newLongRange(\"field\", 0L, 10L, true, true));\n    dimSeen.clear();\n    dsr = ds.search(null, ddq, 10, fsp);\n\n    assertEquals(11, dsr.hits.totalHits);\n    assertEquals(2, dsr.facetResults.size());\n    assertEquals(\"dim (0)\\n  b (8)\\n  a (3)\\n\", FacetTestUtils.toSimpleString(dsr.facetResults.get(0)));\n    assertEquals(\"field (0)\\n  less than 10 (10)\\n  less than or equal to 10 (11)\\n  over 90 (9)\\n  90 or above (10)\\n  over 1000 (0)\\n\", FacetTestUtils.toSimpleString(dsr.facetResults.get(1)));\n\n    IOUtils.close(tr, td, r, d);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae75def1e2525383b6e1397ed97c44387da9941c","date":1385249238,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/simple/TestRangeFacets#testMixedRangeAndNonRangeTaxonomy().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/simple/TestRangeFacets#testMixedRangeAndNonRangeTaxonomy().mjava","sourceNew":"  /** Tests single request that mixes Range and non-Range\n   *  faceting, with DrillSideways and taxonomy. */\n  public void testMixedRangeAndNonRangeTaxonomy() throws Exception {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Directory td = newDirectory();\n    DirectoryTaxonomyWriter tw = new DirectoryTaxonomyWriter(td, IndexWriterConfig.OpenMode.CREATE);\n\n    FacetsConfig config = new FacetsConfig(tw);\n\n    for (long l = 0; l < 100; l++) {\n      Document doc = new Document();\n      // For computing range facet counts:\n      doc.add(new NumericDocValuesField(\"field\", l));\n      // For drill down by numeric range:\n      doc.add(new LongField(\"field\", l, Field.Store.NO));\n\n      if ((l&3) == 0) {\n        doc.add(new FacetField(\"dim\", \"a\"));\n      } else {\n        doc.add(new FacetField(\"dim\", \"b\"));\n      }\n      w.addDocument(config.build(doc));\n    }\n\n    final IndexReader r = w.getReader();\n\n    final TaxonomyReader tr = new DirectoryTaxonomyReader(tw);\n\n    IndexSearcher s = newSearcher(r);\n\n    SimpleDrillSideways ds = new SimpleDrillSideways(s, config, tr) {\n\n        @Override\n        protected Facets buildFacetsResult(SimpleFacetsCollector drillDowns, SimpleFacetsCollector[] drillSideways, String[] drillSidewaysDims) throws IOException {        \n          // nocommit this is awkward... can we improve?\n          // nocommit is drillDowns allowed to be null?\n          // should it?\n          SimpleFacetsCollector dimFC = drillDowns;\n          SimpleFacetsCollector fieldFC = drillDowns;\n          if (drillSideways != null) {\n            for(int i=0;i<drillSideways.length;i++) {\n              String dim = drillSidewaysDims[i];\n              if (dim.equals(\"field\")) {\n                fieldFC = drillSideways[i];\n              } else {\n                dimFC = drillSideways[i];\n              }\n            }\n          }\n\n          Map<String,Facets> byDim = new HashMap<String,Facets>();\n          byDim.put(\"field\",\n                    new RangeFacetCounts(\"field\", fieldFC,\n                          new LongRange(\"less than 10\", 0L, true, 10L, false),\n                          new LongRange(\"less than or equal to 10\", 0L, true, 10L, true),\n                          new LongRange(\"over 90\", 90L, false, 100L, false),\n                          new LongRange(\"90 or above\", 90L, true, 100L, false),\n                          new LongRange(\"over 1000\", 1000L, false, Long.MAX_VALUE, false)));\n          byDim.put(\"dim\", getTaxonomyFacetCounts(taxoReader, config, dimFC));\n          return new MultiFacets(byDim, null);\n        }\n\n        @Override\n        protected boolean scoreSubDocsAtOnce() {\n          return random().nextBoolean();\n        }\n      };\n\n    // First search, no drill downs:\n    SimpleDrillDownQuery ddq = new SimpleDrillDownQuery(config);\n    SimpleDrillSidewaysResult dsr = ds.search(null, ddq, 10);\n\n    assertEquals(100, dsr.hits.totalHits);\n    assertEquals(\"dim (100)\\n  b (75)\\n  a (25)\\n\", dsr.facets.getTopChildren(10, \"dim\").toString());\n    assertEquals(\"field (100)\\n  less than 10 (10)\\n  less than or equal to 10 (11)\\n  over 90 (9)\\n  90 or above (10)\\n  over 1000 (0)\\n\",\n                 dsr.facets.getTopChildren(10, \"field\").toString());\n\n    // Second search, drill down on dim=b:\n    ddq = new SimpleDrillDownQuery(config);\n    ddq.add(\"dim\", \"b\");\n    dsr = ds.search(null, ddq, 10);\n\n    assertEquals(75, dsr.hits.totalHits);\n    assertEquals(\"dim (100)\\n  b (75)\\n  a (25)\\n\", dsr.facets.getTopChildren(10, \"dim\").toString());\n    assertEquals(\"field (75)\\n  less than 10 (7)\\n  less than or equal to 10 (8)\\n  over 90 (7)\\n  90 or above (8)\\n  over 1000 (0)\\n\",\n                 dsr.facets.getTopChildren(10, \"field\").toString());\n\n    // Third search, drill down on \"less than or equal to 10\":\n    ddq = new SimpleDrillDownQuery(config);\n    ddq.add(\"field\", NumericRangeQuery.newLongRange(\"field\", 0L, 10L, true, true));\n    dsr = ds.search(null, ddq, 10);\n\n    assertEquals(11, dsr.hits.totalHits);\n    assertEquals(\"dim (11)\\n  b (8)\\n  a (3)\\n\", dsr.facets.getTopChildren(10, \"dim\").toString());\n    assertEquals(\"field (100)\\n  less than 10 (10)\\n  less than or equal to 10 (11)\\n  over 90 (9)\\n  90 or above (10)\\n  over 1000 (0)\\n\",\n                 dsr.facets.getTopChildren(10, \"field\").toString());\n    IOUtils.close(tw, tr, td, w, r, d);\n  }\n\n","sourceOld":"  /** Tests single request that mixes Range and non-Range\n   *  faceting, with DrillSideways and taxonomy. */\n  public void testMixedRangeAndNonRangeTaxonomy() throws Exception {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Directory td = newDirectory();\n    DirectoryTaxonomyWriter tw = new DirectoryTaxonomyWriter(td, IndexWriterConfig.OpenMode.CREATE);\n\n    FacetsConfig config = new FacetsConfig();\n    DocumentBuilder builder = new DocumentBuilder(tw, config);\n\n    for (long l = 0; l < 100; l++) {\n      Document doc = new Document();\n      // For computing range facet counts:\n      doc.add(new NumericDocValuesField(\"field\", l));\n      // For drill down by numeric range:\n      doc.add(new LongField(\"field\", l, Field.Store.NO));\n\n      if ((l&3) == 0) {\n        doc.add(new FacetField(\"dim\", \"a\"));\n      } else {\n        doc.add(new FacetField(\"dim\", \"b\"));\n      }\n      w.addDocument(builder.build(doc));\n    }\n\n    final IndexReader r = w.getReader();\n\n    final TaxonomyReader tr = new DirectoryTaxonomyReader(tw);\n\n    IndexSearcher s = newSearcher(r);\n\n    SimpleDrillSideways ds = new SimpleDrillSideways(s, config, tr) {\n\n        @Override\n        protected Facets buildFacetsResult(SimpleFacetsCollector drillDowns, SimpleFacetsCollector[] drillSideways, String[] drillSidewaysDims) throws IOException {        \n          // nocommit this is awkward... can we improve?\n          // nocommit is drillDowns allowed to be null?\n          // should it?\n          SimpleFacetsCollector dimFC = drillDowns;\n          SimpleFacetsCollector fieldFC = drillDowns;\n          if (drillSideways != null) {\n            for(int i=0;i<drillSideways.length;i++) {\n              String dim = drillSidewaysDims[i];\n              if (dim.equals(\"field\")) {\n                fieldFC = drillSideways[i];\n              } else {\n                dimFC = drillSideways[i];\n              }\n            }\n          }\n\n          Map<String,Facets> byDim = new HashMap<String,Facets>();\n          byDim.put(\"field\",\n                    new RangeFacetCounts(\"field\", fieldFC,\n                          new LongRange(\"less than 10\", 0L, true, 10L, false),\n                          new LongRange(\"less than or equal to 10\", 0L, true, 10L, true),\n                          new LongRange(\"over 90\", 90L, false, 100L, false),\n                          new LongRange(\"90 or above\", 90L, true, 100L, false),\n                          new LongRange(\"over 1000\", 1000L, false, Long.MAX_VALUE, false)));\n          byDim.put(\"dim\", getTaxonomyFacetCounts(taxoReader, config, dimFC));\n          return new MultiFacets(byDim, null);\n        }\n\n        @Override\n        protected boolean scoreSubDocsAtOnce() {\n          return random().nextBoolean();\n        }\n      };\n\n    // First search, no drill downs:\n    SimpleDrillDownQuery ddq = new SimpleDrillDownQuery(config);\n    SimpleDrillSidewaysResult dsr = ds.search(null, ddq, 10);\n\n    assertEquals(100, dsr.hits.totalHits);\n    assertEquals(\"dim (100)\\n  b (75)\\n  a (25)\\n\", dsr.facets.getTopChildren(10, \"dim\").toString());\n    assertEquals(\"field (100)\\n  less than 10 (10)\\n  less than or equal to 10 (11)\\n  over 90 (9)\\n  90 or above (10)\\n  over 1000 (0)\\n\",\n                 dsr.facets.getTopChildren(10, \"field\").toString());\n\n    // Second search, drill down on dim=b:\n    ddq = new SimpleDrillDownQuery(config);\n    ddq.add(\"dim\", \"b\");\n    dsr = ds.search(null, ddq, 10);\n\n    assertEquals(75, dsr.hits.totalHits);\n    assertEquals(\"dim (100)\\n  b (75)\\n  a (25)\\n\", dsr.facets.getTopChildren(10, \"dim\").toString());\n    assertEquals(\"field (75)\\n  less than 10 (7)\\n  less than or equal to 10 (8)\\n  over 90 (7)\\n  90 or above (8)\\n  over 1000 (0)\\n\",\n                 dsr.facets.getTopChildren(10, \"field\").toString());\n\n    // Third search, drill down on \"less than or equal to 10\":\n    ddq = new SimpleDrillDownQuery(config);\n    ddq.add(\"field\", NumericRangeQuery.newLongRange(\"field\", 0L, 10L, true, true));\n    dsr = ds.search(null, ddq, 10);\n\n    assertEquals(11, dsr.hits.totalHits);\n    assertEquals(\"dim (11)\\n  b (8)\\n  a (3)\\n\", dsr.facets.getTopChildren(10, \"dim\").toString());\n    assertEquals(\"field (100)\\n  less than 10 (10)\\n  less than or equal to 10 (11)\\n  over 90 (9)\\n  90 or above (10)\\n  over 1000 (0)\\n\",\n                 dsr.facets.getTopChildren(10, \"field\").toString());\n    IOUtils.close(tw, tr, td, w, r, d);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f01616d06510fc630b6ef0ec324bdebc2fc49b3c","date":1385331328,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/simple/TestRangeFacets#testMixedRangeAndNonRangeTaxonomy().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/simple/TestRangeFacets#testMixedRangeAndNonRangeTaxonomy().mjava","sourceNew":"  /** Tests single request that mixes Range and non-Range\n   *  faceting, with DrillSideways and taxonomy. */\n  public void testMixedRangeAndNonRangeTaxonomy() throws Exception {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Directory td = newDirectory();\n    DirectoryTaxonomyWriter tw = new DirectoryTaxonomyWriter(td, IndexWriterConfig.OpenMode.CREATE);\n\n    FacetsConfig config = new FacetsConfig(tw);\n\n    for (long l = 0; l < 100; l++) {\n      Document doc = new Document();\n      // For computing range facet counts:\n      doc.add(new NumericDocValuesField(\"field\", l));\n      // For drill down by numeric range:\n      doc.add(new LongField(\"field\", l, Field.Store.NO));\n\n      if ((l&3) == 0) {\n        doc.add(new FacetField(\"dim\", \"a\"));\n      } else {\n        doc.add(new FacetField(\"dim\", \"b\"));\n      }\n      w.addDocument(config.build(doc));\n    }\n\n    final IndexReader r = w.getReader();\n\n    final TaxonomyReader tr = new DirectoryTaxonomyReader(tw);\n\n    IndexSearcher s = newSearcher(r);\n\n    SimpleDrillSideways ds = new SimpleDrillSideways(s, config, tr) {\n\n        @Override\n        protected Facets buildFacetsResult(SimpleFacetsCollector drillDowns, SimpleFacetsCollector[] drillSideways, String[] drillSidewaysDims) throws IOException {        \n          // nocommit this is awkward... can we improve?\n          // nocommit is drillDowns allowed to be null?\n          // should it?\n          SimpleFacetsCollector dimFC = drillDowns;\n          SimpleFacetsCollector fieldFC = drillDowns;\n          if (drillSideways != null) {\n            for(int i=0;i<drillSideways.length;i++) {\n              String dim = drillSidewaysDims[i];\n              if (dim.equals(\"field\")) {\n                fieldFC = drillSideways[i];\n              } else {\n                dimFC = drillSideways[i];\n              }\n            }\n          }\n\n          Map<String,Facets> byDim = new HashMap<String,Facets>();\n          byDim.put(\"field\",\n                    new RangeFacetCounts(\"field\", fieldFC,\n                          new LongRange(\"less than 10\", 0L, true, 10L, false),\n                          new LongRange(\"less than or equal to 10\", 0L, true, 10L, true),\n                          new LongRange(\"over 90\", 90L, false, 100L, false),\n                          new LongRange(\"90 or above\", 90L, true, 100L, false),\n                          new LongRange(\"over 1000\", 1000L, false, Long.MAX_VALUE, false)));\n          byDim.put(\"dim\", getTaxonomyFacetCounts(taxoReader, config, dimFC));\n          return new MultiFacets(byDim, null);\n        }\n\n        @Override\n        protected boolean scoreSubDocsAtOnce() {\n          return random().nextBoolean();\n        }\n      };\n\n    // First search, no drill downs:\n    SimpleDrillDownQuery ddq = new SimpleDrillDownQuery(config);\n    SimpleDrillSidewaysResult dsr = ds.search(null, ddq, 10);\n\n    assertEquals(100, dsr.hits.totalHits);\n    assertEquals(\"value=100 childCount=2\\n  b (75)\\n  a (25)\\n\", dsr.facets.getTopChildren(10, \"dim\").toString());\n    assertEquals(\"value=100 childCount=5\\n  less than 10 (10)\\n  less than or equal to 10 (11)\\n  over 90 (9)\\n  90 or above (10)\\n  over 1000 (0)\\n\",\n                 dsr.facets.getTopChildren(10, \"field\").toString());\n\n    // Second search, drill down on dim=b:\n    ddq = new SimpleDrillDownQuery(config);\n    ddq.add(\"dim\", \"b\");\n    dsr = ds.search(null, ddq, 10);\n\n    assertEquals(75, dsr.hits.totalHits);\n    assertEquals(\"value=100 childCount=2\\n  b (75)\\n  a (25)\\n\", dsr.facets.getTopChildren(10, \"dim\").toString());\n    assertEquals(\"value=75 childCount=5\\n  less than 10 (7)\\n  less than or equal to 10 (8)\\n  over 90 (7)\\n  90 or above (8)\\n  over 1000 (0)\\n\",\n                 dsr.facets.getTopChildren(10, \"field\").toString());\n\n    // Third search, drill down on \"less than or equal to 10\":\n    ddq = new SimpleDrillDownQuery(config);\n    ddq.add(\"field\", NumericRangeQuery.newLongRange(\"field\", 0L, 10L, true, true));\n    dsr = ds.search(null, ddq, 10);\n\n    assertEquals(11, dsr.hits.totalHits);\n    assertEquals(\"value=11 childCount=2\\n  b (8)\\n  a (3)\\n\", dsr.facets.getTopChildren(10, \"dim\").toString());\n    assertEquals(\"value=100 childCount=5\\n  less than 10 (10)\\n  less than or equal to 10 (11)\\n  over 90 (9)\\n  90 or above (10)\\n  over 1000 (0)\\n\",\n                 dsr.facets.getTopChildren(10, \"field\").toString());\n    IOUtils.close(tw, tr, td, w, r, d);\n  }\n\n","sourceOld":"  /** Tests single request that mixes Range and non-Range\n   *  faceting, with DrillSideways and taxonomy. */\n  public void testMixedRangeAndNonRangeTaxonomy() throws Exception {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Directory td = newDirectory();\n    DirectoryTaxonomyWriter tw = new DirectoryTaxonomyWriter(td, IndexWriterConfig.OpenMode.CREATE);\n\n    FacetsConfig config = new FacetsConfig(tw);\n\n    for (long l = 0; l < 100; l++) {\n      Document doc = new Document();\n      // For computing range facet counts:\n      doc.add(new NumericDocValuesField(\"field\", l));\n      // For drill down by numeric range:\n      doc.add(new LongField(\"field\", l, Field.Store.NO));\n\n      if ((l&3) == 0) {\n        doc.add(new FacetField(\"dim\", \"a\"));\n      } else {\n        doc.add(new FacetField(\"dim\", \"b\"));\n      }\n      w.addDocument(config.build(doc));\n    }\n\n    final IndexReader r = w.getReader();\n\n    final TaxonomyReader tr = new DirectoryTaxonomyReader(tw);\n\n    IndexSearcher s = newSearcher(r);\n\n    SimpleDrillSideways ds = new SimpleDrillSideways(s, config, tr) {\n\n        @Override\n        protected Facets buildFacetsResult(SimpleFacetsCollector drillDowns, SimpleFacetsCollector[] drillSideways, String[] drillSidewaysDims) throws IOException {        \n          // nocommit this is awkward... can we improve?\n          // nocommit is drillDowns allowed to be null?\n          // should it?\n          SimpleFacetsCollector dimFC = drillDowns;\n          SimpleFacetsCollector fieldFC = drillDowns;\n          if (drillSideways != null) {\n            for(int i=0;i<drillSideways.length;i++) {\n              String dim = drillSidewaysDims[i];\n              if (dim.equals(\"field\")) {\n                fieldFC = drillSideways[i];\n              } else {\n                dimFC = drillSideways[i];\n              }\n            }\n          }\n\n          Map<String,Facets> byDim = new HashMap<String,Facets>();\n          byDim.put(\"field\",\n                    new RangeFacetCounts(\"field\", fieldFC,\n                          new LongRange(\"less than 10\", 0L, true, 10L, false),\n                          new LongRange(\"less than or equal to 10\", 0L, true, 10L, true),\n                          new LongRange(\"over 90\", 90L, false, 100L, false),\n                          new LongRange(\"90 or above\", 90L, true, 100L, false),\n                          new LongRange(\"over 1000\", 1000L, false, Long.MAX_VALUE, false)));\n          byDim.put(\"dim\", getTaxonomyFacetCounts(taxoReader, config, dimFC));\n          return new MultiFacets(byDim, null);\n        }\n\n        @Override\n        protected boolean scoreSubDocsAtOnce() {\n          return random().nextBoolean();\n        }\n      };\n\n    // First search, no drill downs:\n    SimpleDrillDownQuery ddq = new SimpleDrillDownQuery(config);\n    SimpleDrillSidewaysResult dsr = ds.search(null, ddq, 10);\n\n    assertEquals(100, dsr.hits.totalHits);\n    assertEquals(\"dim (100)\\n  b (75)\\n  a (25)\\n\", dsr.facets.getTopChildren(10, \"dim\").toString());\n    assertEquals(\"field (100)\\n  less than 10 (10)\\n  less than or equal to 10 (11)\\n  over 90 (9)\\n  90 or above (10)\\n  over 1000 (0)\\n\",\n                 dsr.facets.getTopChildren(10, \"field\").toString());\n\n    // Second search, drill down on dim=b:\n    ddq = new SimpleDrillDownQuery(config);\n    ddq.add(\"dim\", \"b\");\n    dsr = ds.search(null, ddq, 10);\n\n    assertEquals(75, dsr.hits.totalHits);\n    assertEquals(\"dim (100)\\n  b (75)\\n  a (25)\\n\", dsr.facets.getTopChildren(10, \"dim\").toString());\n    assertEquals(\"field (75)\\n  less than 10 (7)\\n  less than or equal to 10 (8)\\n  over 90 (7)\\n  90 or above (8)\\n  over 1000 (0)\\n\",\n                 dsr.facets.getTopChildren(10, \"field\").toString());\n\n    // Third search, drill down on \"less than or equal to 10\":\n    ddq = new SimpleDrillDownQuery(config);\n    ddq.add(\"field\", NumericRangeQuery.newLongRange(\"field\", 0L, 10L, true, true));\n    dsr = ds.search(null, ddq, 10);\n\n    assertEquals(11, dsr.hits.totalHits);\n    assertEquals(\"dim (11)\\n  b (8)\\n  a (3)\\n\", dsr.facets.getTopChildren(10, \"dim\").toString());\n    assertEquals(\"field (100)\\n  less than 10 (10)\\n  less than or equal to 10 (11)\\n  over 90 (9)\\n  90 or above (10)\\n  over 1000 (0)\\n\",\n                 dsr.facets.getTopChildren(10, \"field\").toString());\n    IOUtils.close(tw, tr, td, w, r, d);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"21d36d0db865f7b84026b447bec653469a6e66df","date":1385495602,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/TestRangeFacets#testMixedRangeAndNonRangeTaxonomy().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/simple/TestRangeFacets#testMixedRangeAndNonRangeTaxonomy().mjava","sourceNew":"  /** Tests single request that mixes Range and non-Range\n   *  faceting, with DrillSideways and taxonomy. */\n  public void testMixedRangeAndNonRangeTaxonomy() throws Exception {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Directory td = newDirectory();\n    DirectoryTaxonomyWriter tw = new DirectoryTaxonomyWriter(td, IndexWriterConfig.OpenMode.CREATE);\n\n    FacetsConfig config = new FacetsConfig(tw);\n\n    for (long l = 0; l < 100; l++) {\n      Document doc = new Document();\n      // For computing range facet counts:\n      doc.add(new NumericDocValuesField(\"field\", l));\n      // For drill down by numeric range:\n      doc.add(new LongField(\"field\", l, Field.Store.NO));\n\n      if ((l&3) == 0) {\n        doc.add(new FacetField(\"dim\", \"a\"));\n      } else {\n        doc.add(new FacetField(\"dim\", \"b\"));\n      }\n      w.addDocument(config.build(doc));\n    }\n\n    final IndexReader r = w.getReader();\n\n    final TaxonomyReader tr = new DirectoryTaxonomyReader(tw);\n\n    IndexSearcher s = newSearcher(r);\n\n    DrillSideways ds = new DrillSideways(s, config, tr) {\n\n        @Override\n        protected Facets buildFacetsResult(FacetsCollector drillDowns, FacetsCollector[] drillSideways, String[] drillSidewaysDims) throws IOException {        \n          // nocommit this is awkward... can we improve?\n          // nocommit is drillDowns allowed to be null?\n          // should it?\n          FacetsCollector dimFC = drillDowns;\n          FacetsCollector fieldFC = drillDowns;\n          if (drillSideways != null) {\n            for(int i=0;i<drillSideways.length;i++) {\n              String dim = drillSidewaysDims[i];\n              if (dim.equals(\"field\")) {\n                fieldFC = drillSideways[i];\n              } else {\n                dimFC = drillSideways[i];\n              }\n            }\n          }\n\n          Map<String,Facets> byDim = new HashMap<String,Facets>();\n          byDim.put(\"field\",\n                    new RangeFacetCounts(\"field\", fieldFC,\n                          new LongRange(\"less than 10\", 0L, true, 10L, false),\n                          new LongRange(\"less than or equal to 10\", 0L, true, 10L, true),\n                          new LongRange(\"over 90\", 90L, false, 100L, false),\n                          new LongRange(\"90 or above\", 90L, true, 100L, false),\n                          new LongRange(\"over 1000\", 1000L, false, Long.MAX_VALUE, false)));\n          byDim.put(\"dim\", getTaxonomyFacetCounts(taxoReader, config, dimFC));\n          return new MultiFacets(byDim, null);\n        }\n\n        @Override\n        protected boolean scoreSubDocsAtOnce() {\n          return random().nextBoolean();\n        }\n      };\n\n    // First search, no drill downs:\n    DrillDownQuery ddq = new DrillDownQuery(config);\n    DrillSidewaysResult dsr = ds.search(null, ddq, 10);\n\n    assertEquals(100, dsr.hits.totalHits);\n    assertEquals(\"value=100 childCount=2\\n  b (75)\\n  a (25)\\n\", dsr.facets.getTopChildren(10, \"dim\").toString());\n    assertEquals(\"value=100 childCount=5\\n  less than 10 (10)\\n  less than or equal to 10 (11)\\n  over 90 (9)\\n  90 or above (10)\\n  over 1000 (0)\\n\",\n                 dsr.facets.getTopChildren(10, \"field\").toString());\n\n    // Second search, drill down on dim=b:\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"dim\", \"b\");\n    dsr = ds.search(null, ddq, 10);\n\n    assertEquals(75, dsr.hits.totalHits);\n    assertEquals(\"value=100 childCount=2\\n  b (75)\\n  a (25)\\n\", dsr.facets.getTopChildren(10, \"dim\").toString());\n    assertEquals(\"value=75 childCount=5\\n  less than 10 (7)\\n  less than or equal to 10 (8)\\n  over 90 (7)\\n  90 or above (8)\\n  over 1000 (0)\\n\",\n                 dsr.facets.getTopChildren(10, \"field\").toString());\n\n    // Third search, drill down on \"less than or equal to 10\":\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"field\", NumericRangeQuery.newLongRange(\"field\", 0L, 10L, true, true));\n    dsr = ds.search(null, ddq, 10);\n\n    assertEquals(11, dsr.hits.totalHits);\n    assertEquals(\"value=11 childCount=2\\n  b (8)\\n  a (3)\\n\", dsr.facets.getTopChildren(10, \"dim\").toString());\n    assertEquals(\"value=100 childCount=5\\n  less than 10 (10)\\n  less than or equal to 10 (11)\\n  over 90 (9)\\n  90 or above (10)\\n  over 1000 (0)\\n\",\n                 dsr.facets.getTopChildren(10, \"field\").toString());\n    IOUtils.close(tw, tr, td, w, r, d);\n  }\n\n","sourceOld":"  /** Tests single request that mixes Range and non-Range\n   *  faceting, with DrillSideways and taxonomy. */\n  public void testMixedRangeAndNonRangeTaxonomy() throws Exception {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Directory td = newDirectory();\n    DirectoryTaxonomyWriter tw = new DirectoryTaxonomyWriter(td, IndexWriterConfig.OpenMode.CREATE);\n\n    FacetsConfig config = new FacetsConfig(tw);\n\n    for (long l = 0; l < 100; l++) {\n      Document doc = new Document();\n      // For computing range facet counts:\n      doc.add(new NumericDocValuesField(\"field\", l));\n      // For drill down by numeric range:\n      doc.add(new LongField(\"field\", l, Field.Store.NO));\n\n      if ((l&3) == 0) {\n        doc.add(new FacetField(\"dim\", \"a\"));\n      } else {\n        doc.add(new FacetField(\"dim\", \"b\"));\n      }\n      w.addDocument(config.build(doc));\n    }\n\n    final IndexReader r = w.getReader();\n\n    final TaxonomyReader tr = new DirectoryTaxonomyReader(tw);\n\n    IndexSearcher s = newSearcher(r);\n\n    SimpleDrillSideways ds = new SimpleDrillSideways(s, config, tr) {\n\n        @Override\n        protected Facets buildFacetsResult(SimpleFacetsCollector drillDowns, SimpleFacetsCollector[] drillSideways, String[] drillSidewaysDims) throws IOException {        \n          // nocommit this is awkward... can we improve?\n          // nocommit is drillDowns allowed to be null?\n          // should it?\n          SimpleFacetsCollector dimFC = drillDowns;\n          SimpleFacetsCollector fieldFC = drillDowns;\n          if (drillSideways != null) {\n            for(int i=0;i<drillSideways.length;i++) {\n              String dim = drillSidewaysDims[i];\n              if (dim.equals(\"field\")) {\n                fieldFC = drillSideways[i];\n              } else {\n                dimFC = drillSideways[i];\n              }\n            }\n          }\n\n          Map<String,Facets> byDim = new HashMap<String,Facets>();\n          byDim.put(\"field\",\n                    new RangeFacetCounts(\"field\", fieldFC,\n                          new LongRange(\"less than 10\", 0L, true, 10L, false),\n                          new LongRange(\"less than or equal to 10\", 0L, true, 10L, true),\n                          new LongRange(\"over 90\", 90L, false, 100L, false),\n                          new LongRange(\"90 or above\", 90L, true, 100L, false),\n                          new LongRange(\"over 1000\", 1000L, false, Long.MAX_VALUE, false)));\n          byDim.put(\"dim\", getTaxonomyFacetCounts(taxoReader, config, dimFC));\n          return new MultiFacets(byDim, null);\n        }\n\n        @Override\n        protected boolean scoreSubDocsAtOnce() {\n          return random().nextBoolean();\n        }\n      };\n\n    // First search, no drill downs:\n    SimpleDrillDownQuery ddq = new SimpleDrillDownQuery(config);\n    SimpleDrillSidewaysResult dsr = ds.search(null, ddq, 10);\n\n    assertEquals(100, dsr.hits.totalHits);\n    assertEquals(\"value=100 childCount=2\\n  b (75)\\n  a (25)\\n\", dsr.facets.getTopChildren(10, \"dim\").toString());\n    assertEquals(\"value=100 childCount=5\\n  less than 10 (10)\\n  less than or equal to 10 (11)\\n  over 90 (9)\\n  90 or above (10)\\n  over 1000 (0)\\n\",\n                 dsr.facets.getTopChildren(10, \"field\").toString());\n\n    // Second search, drill down on dim=b:\n    ddq = new SimpleDrillDownQuery(config);\n    ddq.add(\"dim\", \"b\");\n    dsr = ds.search(null, ddq, 10);\n\n    assertEquals(75, dsr.hits.totalHits);\n    assertEquals(\"value=100 childCount=2\\n  b (75)\\n  a (25)\\n\", dsr.facets.getTopChildren(10, \"dim\").toString());\n    assertEquals(\"value=75 childCount=5\\n  less than 10 (7)\\n  less than or equal to 10 (8)\\n  over 90 (7)\\n  90 or above (8)\\n  over 1000 (0)\\n\",\n                 dsr.facets.getTopChildren(10, \"field\").toString());\n\n    // Third search, drill down on \"less than or equal to 10\":\n    ddq = new SimpleDrillDownQuery(config);\n    ddq.add(\"field\", NumericRangeQuery.newLongRange(\"field\", 0L, 10L, true, true));\n    dsr = ds.search(null, ddq, 10);\n\n    assertEquals(11, dsr.hits.totalHits);\n    assertEquals(\"value=11 childCount=2\\n  b (8)\\n  a (3)\\n\", dsr.facets.getTopChildren(10, \"dim\").toString());\n    assertEquals(\"value=100 childCount=5\\n  less than 10 (10)\\n  less than or equal to 10 (11)\\n  over 90 (9)\\n  90 or above (10)\\n  over 1000 (0)\\n\",\n                 dsr.facets.getTopChildren(10, \"field\").toString());\n    IOUtils.close(tw, tr, td, w, r, d);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"21d36d0db865f7b84026b447bec653469a6e66df":["f01616d06510fc630b6ef0ec324bdebc2fc49b3c"],"ce7aff7772c162c15d520e31af46c555f60d5c3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f01616d06510fc630b6ef0ec324bdebc2fc49b3c":["ae75def1e2525383b6e1397ed97c44387da9941c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ae75def1e2525383b6e1397ed97c44387da9941c":["ce7aff7772c162c15d520e31af46c555f60d5c3b"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ce7aff7772c162c15d520e31af46c555f60d5c3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"21d36d0db865f7b84026b447bec653469a6e66df":[],"ce7aff7772c162c15d520e31af46c555f60d5c3b":["ae75def1e2525383b6e1397ed97c44387da9941c"],"f01616d06510fc630b6ef0ec324bdebc2fc49b3c":["21d36d0db865f7b84026b447bec653469a6e66df"],"ae75def1e2525383b6e1397ed97c44387da9941c":["f01616d06510fc630b6ef0ec324bdebc2fc49b3c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["21d36d0db865f7b84026b447bec653469a6e66df","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}