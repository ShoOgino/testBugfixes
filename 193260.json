{"path":"lucene/analysis/common/src/java/org/apache/lucene/analysis/compound/DictionaryCompoundWordTokenFilterFactory#DictionaryCompoundWordTokenFilterFactory(Map[String,String]).mjava","commits":[{"id":"57da959ec15bb701bd1d1bf3c613b69009ff4bfd","date":1364833800,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/compound/DictionaryCompoundWordTokenFilterFactory#DictionaryCompoundWordTokenFilterFactory(Map[String,String]).mjava","pathOld":"/dev/null","sourceNew":"  /** Creates a new DictionaryCompoundWordTokenFilterFactory */\n  public DictionaryCompoundWordTokenFilterFactory(Map<String, String> args) {\n    super(args);\n    assureMatchVersion();\n    dictFile = args.remove(\"dictionary\");\n    if (null == dictFile) {\n      throw new IllegalArgumentException(\"Missing required parameter: dictionary\");\n    }\n\n    minWordSize = getInt(args, \"minWordSize\", CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE);\n    minSubwordSize = getInt(args, \"minSubwordSize\", CompoundWordTokenFilterBase.DEFAULT_MIN_SUBWORD_SIZE);\n    maxSubwordSize = getInt(args, \"maxSubwordSize\", CompoundWordTokenFilterBase.DEFAULT_MAX_SUBWORD_SIZE);\n    onlyLongestMatch = getBoolean(args, \"onlyLongestMatch\", true);\n    if (!args.isEmpty()) {\n      throw new IllegalArgumentException(\"Unknown parameters: \" + args);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["623b5245fbd9d5af9f458826ba9ed3d6212db24d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"dcae30df9fe9300569835aef42ec65802c7c0afb","date":1364859933,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/compound/DictionaryCompoundWordTokenFilterFactory#DictionaryCompoundWordTokenFilterFactory(Map[String,String]).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/compound/DictionaryCompoundWordTokenFilterFactory#DictionaryCompoundWordTokenFilterFactory(Map[String,String]).mjava","sourceNew":"  /** Creates a new DictionaryCompoundWordTokenFilterFactory */\n  public DictionaryCompoundWordTokenFilterFactory(Map<String, String> args) {\n    super(args);\n    assureMatchVersion();\n    dictFile = require(args, \"dictionary\");\n    minWordSize = getInt(args, \"minWordSize\", CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE);\n    minSubwordSize = getInt(args, \"minSubwordSize\", CompoundWordTokenFilterBase.DEFAULT_MIN_SUBWORD_SIZE);\n    maxSubwordSize = getInt(args, \"maxSubwordSize\", CompoundWordTokenFilterBase.DEFAULT_MAX_SUBWORD_SIZE);\n    onlyLongestMatch = getBoolean(args, \"onlyLongestMatch\", true);\n    if (!args.isEmpty()) {\n      throw new IllegalArgumentException(\"Unknown parameters: \" + args);\n    }\n  }\n\n","sourceOld":"  /** Creates a new DictionaryCompoundWordTokenFilterFactory */\n  public DictionaryCompoundWordTokenFilterFactory(Map<String, String> args) {\n    super(args);\n    assureMatchVersion();\n    dictFile = args.remove(\"dictionary\");\n    if (null == dictFile) {\n      throw new IllegalArgumentException(\"Missing required parameter: dictionary\");\n    }\n\n    minWordSize = getInt(args, \"minWordSize\", CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE);\n    minSubwordSize = getInt(args, \"minSubwordSize\", CompoundWordTokenFilterBase.DEFAULT_MIN_SUBWORD_SIZE);\n    maxSubwordSize = getInt(args, \"maxSubwordSize\", CompoundWordTokenFilterBase.DEFAULT_MAX_SUBWORD_SIZE);\n    onlyLongestMatch = getBoolean(args, \"onlyLongestMatch\", true);\n    if (!args.isEmpty()) {\n      throw new IllegalArgumentException(\"Unknown parameters: \" + args);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"379db3ad24c4f0214f30a122265a6d6be003a99d","date":1407537768,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/compound/DictionaryCompoundWordTokenFilterFactory#DictionaryCompoundWordTokenFilterFactory(Map[String,String]).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/compound/DictionaryCompoundWordTokenFilterFactory#DictionaryCompoundWordTokenFilterFactory(Map[String,String]).mjava","sourceNew":"  /** Creates a new DictionaryCompoundWordTokenFilterFactory */\n  public DictionaryCompoundWordTokenFilterFactory(Map<String, String> args) {\n    super(args);\n    assureMatchVersion();\n    dictFile = require(args, \"dictionary\");\n    minWordSize = getInt(args, \"minWordSize\", Lucene43CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE);\n    minSubwordSize = getInt(args, \"minSubwordSize\", Lucene43CompoundWordTokenFilterBase.DEFAULT_MIN_SUBWORD_SIZE);\n    maxSubwordSize = getInt(args, \"maxSubwordSize\", Lucene43CompoundWordTokenFilterBase.DEFAULT_MAX_SUBWORD_SIZE);\n    onlyLongestMatch = getBoolean(args, \"onlyLongestMatch\", true);\n    if (!args.isEmpty()) {\n      throw new IllegalArgumentException(\"Unknown parameters: \" + args);\n    }\n  }\n\n","sourceOld":"  /** Creates a new DictionaryCompoundWordTokenFilterFactory */\n  public DictionaryCompoundWordTokenFilterFactory(Map<String, String> args) {\n    super(args);\n    assureMatchVersion();\n    dictFile = require(args, \"dictionary\");\n    minWordSize = getInt(args, \"minWordSize\", CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE);\n    minSubwordSize = getInt(args, \"minSubwordSize\", CompoundWordTokenFilterBase.DEFAULT_MIN_SUBWORD_SIZE);\n    maxSubwordSize = getInt(args, \"maxSubwordSize\", CompoundWordTokenFilterBase.DEFAULT_MAX_SUBWORD_SIZE);\n    onlyLongestMatch = getBoolean(args, \"onlyLongestMatch\", true);\n    if (!args.isEmpty()) {\n      throw new IllegalArgumentException(\"Unknown parameters: \" + args);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"71387d8cb6923eb831b17a8b734608ba2e21c653","date":1414126093,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/compound/DictionaryCompoundWordTokenFilterFactory#DictionaryCompoundWordTokenFilterFactory(Map[String,String]).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/compound/DictionaryCompoundWordTokenFilterFactory#DictionaryCompoundWordTokenFilterFactory(Map[String,String]).mjava","sourceNew":"  /** Creates a new DictionaryCompoundWordTokenFilterFactory */\n  public DictionaryCompoundWordTokenFilterFactory(Map<String, String> args) {\n    super(args);\n    assureMatchVersion();\n    dictFile = require(args, \"dictionary\");\n    minWordSize = getInt(args, \"minWordSize\", CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE);\n    minSubwordSize = getInt(args, \"minSubwordSize\", CompoundWordTokenFilterBase.DEFAULT_MIN_SUBWORD_SIZE);\n    maxSubwordSize = getInt(args, \"maxSubwordSize\", CompoundWordTokenFilterBase.DEFAULT_MAX_SUBWORD_SIZE);\n    onlyLongestMatch = getBoolean(args, \"onlyLongestMatch\", true);\n    if (!args.isEmpty()) {\n      throw new IllegalArgumentException(\"Unknown parameters: \" + args);\n    }\n  }\n\n","sourceOld":"  /** Creates a new DictionaryCompoundWordTokenFilterFactory */\n  public DictionaryCompoundWordTokenFilterFactory(Map<String, String> args) {\n    super(args);\n    assureMatchVersion();\n    dictFile = require(args, \"dictionary\");\n    minWordSize = getInt(args, \"minWordSize\", Lucene43CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE);\n    minSubwordSize = getInt(args, \"minSubwordSize\", Lucene43CompoundWordTokenFilterBase.DEFAULT_MIN_SUBWORD_SIZE);\n    maxSubwordSize = getInt(args, \"maxSubwordSize\", Lucene43CompoundWordTokenFilterBase.DEFAULT_MAX_SUBWORD_SIZE);\n    onlyLongestMatch = getBoolean(args, \"onlyLongestMatch\", true);\n    if (!args.isEmpty()) {\n      throw new IllegalArgumentException(\"Unknown parameters: \" + args);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"623b5245fbd9d5af9f458826ba9ed3d6212db24d","date":1421078865,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/compound/DictionaryCompoundWordTokenFilterFactory#DictionaryCompoundWordTokenFilterFactory(Map[String,String]).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/compound/DictionaryCompoundWordTokenFilterFactory#DictionaryCompoundWordTokenFilterFactory(Map[String,String]).mjava","sourceNew":"  /** Creates a new DictionaryCompoundWordTokenFilterFactory */\n  public DictionaryCompoundWordTokenFilterFactory(Map<String, String> args) {\n    super(args);\n    dictFile = require(args, \"dictionary\");\n    minWordSize = getInt(args, \"minWordSize\", CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE);\n    minSubwordSize = getInt(args, \"minSubwordSize\", CompoundWordTokenFilterBase.DEFAULT_MIN_SUBWORD_SIZE);\n    maxSubwordSize = getInt(args, \"maxSubwordSize\", CompoundWordTokenFilterBase.DEFAULT_MAX_SUBWORD_SIZE);\n    onlyLongestMatch = getBoolean(args, \"onlyLongestMatch\", true);\n    if (!args.isEmpty()) {\n      throw new IllegalArgumentException(\"Unknown parameters: \" + args);\n    }\n  }\n\n","sourceOld":"  /** Creates a new DictionaryCompoundWordTokenFilterFactory */\n  public DictionaryCompoundWordTokenFilterFactory(Map<String, String> args) {\n    super(args);\n    assureMatchVersion();\n    dictFile = require(args, \"dictionary\");\n    minWordSize = getInt(args, \"minWordSize\", CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE);\n    minSubwordSize = getInt(args, \"minSubwordSize\", CompoundWordTokenFilterBase.DEFAULT_MIN_SUBWORD_SIZE);\n    maxSubwordSize = getInt(args, \"maxSubwordSize\", CompoundWordTokenFilterBase.DEFAULT_MAX_SUBWORD_SIZE);\n    onlyLongestMatch = getBoolean(args, \"onlyLongestMatch\", true);\n    if (!args.isEmpty()) {\n      throw new IllegalArgumentException(\"Unknown parameters: \" + args);\n    }\n  }\n\n","bugFix":["57da959ec15bb701bd1d1bf3c613b69009ff4bfd"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"dcae30df9fe9300569835aef42ec65802c7c0afb":["57da959ec15bb701bd1d1bf3c613b69009ff4bfd"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["dcae30df9fe9300569835aef42ec65802c7c0afb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"623b5245fbd9d5af9f458826ba9ed3d6212db24d":["71387d8cb6923eb831b17a8b734608ba2e21c653"],"57da959ec15bb701bd1d1bf3c613b69009ff4bfd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"71387d8cb6923eb831b17a8b734608ba2e21c653":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["623b5245fbd9d5af9f458826ba9ed3d6212db24d"]},"commit2Childs":{"dcae30df9fe9300569835aef42ec65802c7c0afb":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["71387d8cb6923eb831b17a8b734608ba2e21c653"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["57da959ec15bb701bd1d1bf3c613b69009ff4bfd"],"623b5245fbd9d5af9f458826ba9ed3d6212db24d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"57da959ec15bb701bd1d1bf3c613b69009ff4bfd":["dcae30df9fe9300569835aef42ec65802c7c0afb"],"71387d8cb6923eb831b17a8b734608ba2e21c653":["623b5245fbd9d5af9f458826ba9ed3d6212db24d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}