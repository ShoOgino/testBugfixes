{"path":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/CreateIndexTask#setIndexWriterConfig(IndexWriter,Config).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/CreateIndexTask#setIndexWriterConfig(IndexWriter,Config).mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/CreateIndexTask#setIndexWriterConfig(IndexWriter,Config).mjava","sourceNew":"  public static void setIndexWriterConfig(IndexWriter writer, Config config) throws IOException {\n\n    final String mergeScheduler = config.get(\"merge.scheduler\",\n                                             \"org.apache.lucene.index.ConcurrentMergeScheduler\");\n    try {\n      writer.setMergeScheduler(Class.forName(mergeScheduler).asSubclass(MergeScheduler.class).newInstance());\n    } catch (Exception e) {\n      throw new RuntimeException(\"unable to instantiate class '\" + mergeScheduler + \"' as merge scheduler\", e);\n    }\n\n    if (mergeScheduler.equals(\"org.apache.lucene.index.ConcurrentMergeScheduler\")) {\n      ConcurrentMergeScheduler cms = (ConcurrentMergeScheduler) writer.getMergeScheduler();\n      int v = config.get(\"concurrent.merge.scheduler.max.thread.count\", -1);\n      if (v != -1) {\n        cms.setMaxThreadCount(v);\n      }\n      v = config.get(\"concurrent.merge.scheduler.max.merge.count\", -1);\n      if (v != -1) {\n        cms.setMaxMergeCount(v);\n      }\n    }\n\n    final String mergePolicy = config.get(\"merge.policy\",\n                                          \"org.apache.lucene.index.LogByteSizeMergePolicy\");\n    try {\n      writer.setMergePolicy(Class.forName(mergePolicy).asSubclass(MergePolicy.class).getConstructor(IndexWriter.class).newInstance(writer));\n    } catch (Exception e) {\n      throw new RuntimeException(\"unable to instantiate class '\" + mergePolicy + \"' as merge policy\", e);\n    }\n\n    writer.setUseCompoundFile(config.get(\"compound\",true));\n    writer.setMergeFactor(config.get(\"merge.factor\",OpenIndexTask.DEFAULT_MERGE_PFACTOR));\n    writer.setMaxFieldLength(config.get(\"max.field.length\",OpenIndexTask.DEFAULT_MAX_FIELD_LENGTH));\n\n    final double ramBuffer = config.get(\"ram.flush.mb\",OpenIndexTask.DEFAULT_RAM_FLUSH_MB);\n    final int maxBuffered = config.get(\"max.buffered\",OpenIndexTask.DEFAULT_MAX_BUFFERED);\n    if (maxBuffered == IndexWriterConfig.DISABLE_AUTO_FLUSH) {\n      writer.setRAMBufferSizeMB(ramBuffer);\n      writer.setMaxBufferedDocs(maxBuffered);\n    } else {\n      writer.setMaxBufferedDocs(maxBuffered);\n      writer.setRAMBufferSizeMB(ramBuffer);\n    }\n    \n    String infoStreamVal = config.get(\"writer.info.stream\", null);\n    if (infoStreamVal != null) {\n      if (infoStreamVal.equals(\"SystemOut\")) {\n        writer.setInfoStream(System.out);\n      } else if (infoStreamVal.equals(\"SystemErr\")) {\n        writer.setInfoStream(System.err);\n      } else {\n        File f = new File(infoStreamVal).getAbsoluteFile();\n        writer.setInfoStream(new PrintStream(new BufferedOutputStream(new FileOutputStream(f))));\n      }\n    }\n  }\n\n","sourceOld":"  public static void setIndexWriterConfig(IndexWriter writer, Config config) throws IOException {\n\n    final String mergeScheduler = config.get(\"merge.scheduler\",\n                                             \"org.apache.lucene.index.ConcurrentMergeScheduler\");\n    try {\n      writer.setMergeScheduler(Class.forName(mergeScheduler).asSubclass(MergeScheduler.class).newInstance());\n    } catch (Exception e) {\n      throw new RuntimeException(\"unable to instantiate class '\" + mergeScheduler + \"' as merge scheduler\", e);\n    }\n\n    if (mergeScheduler.equals(\"org.apache.lucene.index.ConcurrentMergeScheduler\")) {\n      ConcurrentMergeScheduler cms = (ConcurrentMergeScheduler) writer.getMergeScheduler();\n      int v = config.get(\"concurrent.merge.scheduler.max.thread.count\", -1);\n      if (v != -1) {\n        cms.setMaxThreadCount(v);\n      }\n      v = config.get(\"concurrent.merge.scheduler.max.merge.count\", -1);\n      if (v != -1) {\n        cms.setMaxMergeCount(v);\n      }\n    }\n\n    final String mergePolicy = config.get(\"merge.policy\",\n                                          \"org.apache.lucene.index.LogByteSizeMergePolicy\");\n    try {\n      writer.setMergePolicy(Class.forName(mergePolicy).asSubclass(MergePolicy.class).getConstructor(IndexWriter.class).newInstance(writer));\n    } catch (Exception e) {\n      throw new RuntimeException(\"unable to instantiate class '\" + mergePolicy + \"' as merge policy\", e);\n    }\n\n    writer.setUseCompoundFile(config.get(\"compound\",true));\n    writer.setMergeFactor(config.get(\"merge.factor\",OpenIndexTask.DEFAULT_MERGE_PFACTOR));\n    writer.setMaxFieldLength(config.get(\"max.field.length\",OpenIndexTask.DEFAULT_MAX_FIELD_LENGTH));\n\n    final double ramBuffer = config.get(\"ram.flush.mb\",OpenIndexTask.DEFAULT_RAM_FLUSH_MB);\n    final int maxBuffered = config.get(\"max.buffered\",OpenIndexTask.DEFAULT_MAX_BUFFERED);\n    if (maxBuffered == IndexWriterConfig.DISABLE_AUTO_FLUSH) {\n      writer.setRAMBufferSizeMB(ramBuffer);\n      writer.setMaxBufferedDocs(maxBuffered);\n    } else {\n      writer.setMaxBufferedDocs(maxBuffered);\n      writer.setRAMBufferSizeMB(ramBuffer);\n    }\n    \n    String infoStreamVal = config.get(\"writer.info.stream\", null);\n    if (infoStreamVal != null) {\n      if (infoStreamVal.equals(\"SystemOut\")) {\n        writer.setInfoStream(System.out);\n      } else if (infoStreamVal.equals(\"SystemErr\")) {\n        writer.setInfoStream(System.err);\n      } else {\n        File f = new File(infoStreamVal).getAbsoluteFile();\n        writer.setInfoStream(new PrintStream(new BufferedOutputStream(new FileOutputStream(f))));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7ab99e8c71442b92c320e218141dee04a9b91ce8","date":1269203801,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/CreateIndexTask#setIndexWriterConfig(IndexWriter,Config).mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/CreateIndexTask#setIndexWriterConfig(IndexWriter,Config).mjava","sourceNew":"  public static void setIndexWriterConfig(IndexWriter writer, Config config) throws IOException {\n\n    final String mergeScheduler = config.get(\"merge.scheduler\",\n                                             \"org.apache.lucene.index.ConcurrentMergeScheduler\");\n    try {\n      writer.setMergeScheduler(Class.forName(mergeScheduler).asSubclass(MergeScheduler.class).newInstance());\n    } catch (Exception e) {\n      throw new RuntimeException(\"unable to instantiate class '\" + mergeScheduler + \"' as merge scheduler\", e);\n    }\n\n    if (mergeScheduler.equals(\"org.apache.lucene.index.ConcurrentMergeScheduler\")) {\n      ConcurrentMergeScheduler cms = (ConcurrentMergeScheduler) writer.getMergeScheduler();\n      int v = config.get(\"concurrent.merge.scheduler.max.thread.count\", -1);\n      if (v != -1) {\n        cms.setMaxThreadCount(v);\n      }\n      v = config.get(\"concurrent.merge.scheduler.max.merge.count\", -1);\n      if (v != -1) {\n        cms.setMaxMergeCount(v);\n      }\n    }\n\n    final String mergePolicy = config.get(\"merge.policy\",\n                                          \"org.apache.lucene.index.LogByteSizeMergePolicy\");\n    try {\n      writer.setMergePolicy(Class.forName(mergePolicy).asSubclass(MergePolicy.class).newInstance());\n    } catch (Exception e) {\n      throw new RuntimeException(\"unable to instantiate class '\" + mergePolicy + \"' as merge policy\", e);\n    }\n\n    writer.setUseCompoundFile(config.get(\"compound\",true));\n    writer.setMergeFactor(config.get(\"merge.factor\",OpenIndexTask.DEFAULT_MERGE_PFACTOR));\n    writer.setMaxFieldLength(config.get(\"max.field.length\",OpenIndexTask.DEFAULT_MAX_FIELD_LENGTH));\n\n    final double ramBuffer = config.get(\"ram.flush.mb\",OpenIndexTask.DEFAULT_RAM_FLUSH_MB);\n    final int maxBuffered = config.get(\"max.buffered\",OpenIndexTask.DEFAULT_MAX_BUFFERED);\n    if (maxBuffered == IndexWriterConfig.DISABLE_AUTO_FLUSH) {\n      writer.setRAMBufferSizeMB(ramBuffer);\n      writer.setMaxBufferedDocs(maxBuffered);\n    } else {\n      writer.setMaxBufferedDocs(maxBuffered);\n      writer.setRAMBufferSizeMB(ramBuffer);\n    }\n    \n    String infoStreamVal = config.get(\"writer.info.stream\", null);\n    if (infoStreamVal != null) {\n      if (infoStreamVal.equals(\"SystemOut\")) {\n        writer.setInfoStream(System.out);\n      } else if (infoStreamVal.equals(\"SystemErr\")) {\n        writer.setInfoStream(System.err);\n      } else {\n        File f = new File(infoStreamVal).getAbsoluteFile();\n        writer.setInfoStream(new PrintStream(new BufferedOutputStream(new FileOutputStream(f))));\n      }\n    }\n  }\n\n","sourceOld":"  public static void setIndexWriterConfig(IndexWriter writer, Config config) throws IOException {\n\n    final String mergeScheduler = config.get(\"merge.scheduler\",\n                                             \"org.apache.lucene.index.ConcurrentMergeScheduler\");\n    try {\n      writer.setMergeScheduler(Class.forName(mergeScheduler).asSubclass(MergeScheduler.class).newInstance());\n    } catch (Exception e) {\n      throw new RuntimeException(\"unable to instantiate class '\" + mergeScheduler + \"' as merge scheduler\", e);\n    }\n\n    if (mergeScheduler.equals(\"org.apache.lucene.index.ConcurrentMergeScheduler\")) {\n      ConcurrentMergeScheduler cms = (ConcurrentMergeScheduler) writer.getMergeScheduler();\n      int v = config.get(\"concurrent.merge.scheduler.max.thread.count\", -1);\n      if (v != -1) {\n        cms.setMaxThreadCount(v);\n      }\n      v = config.get(\"concurrent.merge.scheduler.max.merge.count\", -1);\n      if (v != -1) {\n        cms.setMaxMergeCount(v);\n      }\n    }\n\n    final String mergePolicy = config.get(\"merge.policy\",\n                                          \"org.apache.lucene.index.LogByteSizeMergePolicy\");\n    try {\n      writer.setMergePolicy(Class.forName(mergePolicy).asSubclass(MergePolicy.class).getConstructor(IndexWriter.class).newInstance(writer));\n    } catch (Exception e) {\n      throw new RuntimeException(\"unable to instantiate class '\" + mergePolicy + \"' as merge policy\", e);\n    }\n\n    writer.setUseCompoundFile(config.get(\"compound\",true));\n    writer.setMergeFactor(config.get(\"merge.factor\",OpenIndexTask.DEFAULT_MERGE_PFACTOR));\n    writer.setMaxFieldLength(config.get(\"max.field.length\",OpenIndexTask.DEFAULT_MAX_FIELD_LENGTH));\n\n    final double ramBuffer = config.get(\"ram.flush.mb\",OpenIndexTask.DEFAULT_RAM_FLUSH_MB);\n    final int maxBuffered = config.get(\"max.buffered\",OpenIndexTask.DEFAULT_MAX_BUFFERED);\n    if (maxBuffered == IndexWriterConfig.DISABLE_AUTO_FLUSH) {\n      writer.setRAMBufferSizeMB(ramBuffer);\n      writer.setMaxBufferedDocs(maxBuffered);\n    } else {\n      writer.setMaxBufferedDocs(maxBuffered);\n      writer.setRAMBufferSizeMB(ramBuffer);\n    }\n    \n    String infoStreamVal = config.get(\"writer.info.stream\", null);\n    if (infoStreamVal != null) {\n      if (infoStreamVal.equals(\"SystemOut\")) {\n        writer.setInfoStream(System.out);\n      } else if (infoStreamVal.equals(\"SystemErr\")) {\n        writer.setInfoStream(System.err);\n      } else {\n        File f = new File(infoStreamVal).getAbsoluteFile();\n        writer.setInfoStream(new PrintStream(new BufferedOutputStream(new FileOutputStream(f))));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"14b4bcebc8ea5c69eb01adfa263b0c55e5945cd8","date":1270638212,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/CreateIndexTask#setIndexWriterConfig(IndexWriter,Config).mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/CreateIndexTask#setIndexWriterConfig(IndexWriter,Config).mjava","sourceNew":"  public static void setIndexWriterConfig(IndexWriter writer, Config config) throws IOException {\n\n    final String mergeScheduler = config.get(\"merge.scheduler\",\n                                             \"org.apache.lucene.index.ConcurrentMergeScheduler\");\n    if (mergeScheduler.equals(NoMergeScheduler.class.getName())) {\n      writer.setMergeScheduler(NoMergeScheduler.INSTANCE);\n    } else {\n      try {\n        writer.setMergeScheduler(Class.forName(mergeScheduler).asSubclass(MergeScheduler.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergeScheduler + \"' as merge scheduler\", e);\n      }\n      \n      if (mergeScheduler.equals(\"org.apache.lucene.index.ConcurrentMergeScheduler\")) {\n        ConcurrentMergeScheduler cms = (ConcurrentMergeScheduler) writer.getMergeScheduler();\n        int v = config.get(\"concurrent.merge.scheduler.max.thread.count\", -1);\n        if (v != -1) {\n          cms.setMaxThreadCount(v);\n        }\n        v = config.get(\"concurrent.merge.scheduler.max.merge.count\", -1);\n        if (v != -1) {\n          cms.setMaxMergeCount(v);\n        }\n      }\n    }\n\n    final String mergePolicy = config.get(\"merge.policy\",\n                                          \"org.apache.lucene.index.LogByteSizeMergePolicy\");\n    boolean isCompound = config.get(\"compound\", true);\n    if (mergePolicy.equals(NoMergePolicy.class.getName())) {\n      writer.setMergePolicy(isCompound ? NoMergePolicy.COMPOUND_FILES : NoMergePolicy.NO_COMPOUND_FILES);\n    } else {\n      try {\n        writer.setMergePolicy(Class.forName(mergePolicy).asSubclass(MergePolicy.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergePolicy + \"' as merge policy\", e);\n      }\n      writer.setUseCompoundFile(isCompound);\n      writer.setMergeFactor(config.get(\"merge.factor\",OpenIndexTask.DEFAULT_MERGE_PFACTOR));\n    }\n    writer.setMaxFieldLength(config.get(\"max.field.length\",OpenIndexTask.DEFAULT_MAX_FIELD_LENGTH));\n\n    final double ramBuffer = config.get(\"ram.flush.mb\",OpenIndexTask.DEFAULT_RAM_FLUSH_MB);\n    final int maxBuffered = config.get(\"max.buffered\",OpenIndexTask.DEFAULT_MAX_BUFFERED);\n    if (maxBuffered == IndexWriterConfig.DISABLE_AUTO_FLUSH) {\n      writer.setRAMBufferSizeMB(ramBuffer);\n      writer.setMaxBufferedDocs(maxBuffered);\n    } else {\n      writer.setMaxBufferedDocs(maxBuffered);\n      writer.setRAMBufferSizeMB(ramBuffer);\n    }\n    \n    String infoStreamVal = config.get(\"writer.info.stream\", null);\n    if (infoStreamVal != null) {\n      if (infoStreamVal.equals(\"SystemOut\")) {\n        writer.setInfoStream(System.out);\n      } else if (infoStreamVal.equals(\"SystemErr\")) {\n        writer.setInfoStream(System.err);\n      } else {\n        File f = new File(infoStreamVal).getAbsoluteFile();\n        writer.setInfoStream(new PrintStream(new BufferedOutputStream(new FileOutputStream(f))));\n      }\n    }\n  }\n\n","sourceOld":"  public static void setIndexWriterConfig(IndexWriter writer, Config config) throws IOException {\n\n    final String mergeScheduler = config.get(\"merge.scheduler\",\n                                             \"org.apache.lucene.index.ConcurrentMergeScheduler\");\n    try {\n      writer.setMergeScheduler(Class.forName(mergeScheduler).asSubclass(MergeScheduler.class).newInstance());\n    } catch (Exception e) {\n      throw new RuntimeException(\"unable to instantiate class '\" + mergeScheduler + \"' as merge scheduler\", e);\n    }\n\n    if (mergeScheduler.equals(\"org.apache.lucene.index.ConcurrentMergeScheduler\")) {\n      ConcurrentMergeScheduler cms = (ConcurrentMergeScheduler) writer.getMergeScheduler();\n      int v = config.get(\"concurrent.merge.scheduler.max.thread.count\", -1);\n      if (v != -1) {\n        cms.setMaxThreadCount(v);\n      }\n      v = config.get(\"concurrent.merge.scheduler.max.merge.count\", -1);\n      if (v != -1) {\n        cms.setMaxMergeCount(v);\n      }\n    }\n\n    final String mergePolicy = config.get(\"merge.policy\",\n                                          \"org.apache.lucene.index.LogByteSizeMergePolicy\");\n    try {\n      writer.setMergePolicy(Class.forName(mergePolicy).asSubclass(MergePolicy.class).newInstance());\n    } catch (Exception e) {\n      throw new RuntimeException(\"unable to instantiate class '\" + mergePolicy + \"' as merge policy\", e);\n    }\n\n    writer.setUseCompoundFile(config.get(\"compound\",true));\n    writer.setMergeFactor(config.get(\"merge.factor\",OpenIndexTask.DEFAULT_MERGE_PFACTOR));\n    writer.setMaxFieldLength(config.get(\"max.field.length\",OpenIndexTask.DEFAULT_MAX_FIELD_LENGTH));\n\n    final double ramBuffer = config.get(\"ram.flush.mb\",OpenIndexTask.DEFAULT_RAM_FLUSH_MB);\n    final int maxBuffered = config.get(\"max.buffered\",OpenIndexTask.DEFAULT_MAX_BUFFERED);\n    if (maxBuffered == IndexWriterConfig.DISABLE_AUTO_FLUSH) {\n      writer.setRAMBufferSizeMB(ramBuffer);\n      writer.setMaxBufferedDocs(maxBuffered);\n    } else {\n      writer.setMaxBufferedDocs(maxBuffered);\n      writer.setRAMBufferSizeMB(ramBuffer);\n    }\n    \n    String infoStreamVal = config.get(\"writer.info.stream\", null);\n    if (infoStreamVal != null) {\n      if (infoStreamVal.equals(\"SystemOut\")) {\n        writer.setInfoStream(System.out);\n      } else if (infoStreamVal.equals(\"SystemErr\")) {\n        writer.setInfoStream(System.err);\n      } else {\n        File f = new File(infoStreamVal).getAbsoluteFile();\n        writer.setInfoStream(new PrintStream(new BufferedOutputStream(new FileOutputStream(f))));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1087dbf8766612c616d338f60273101b5490d8d6","date":1280279136,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/CreateIndexTask#setIndexWriterConfig(IndexWriter,Config).mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/CreateIndexTask#setIndexWriterConfig(IndexWriter,Config).mjava","sourceNew":"  public static void setIndexWriterConfig(IndexWriter writer, Config config) throws IOException {\n\n    final String mergeScheduler = config.get(\"merge.scheduler\",\n                                             \"org.apache.lucene.index.ConcurrentMergeScheduler\");\n    if (mergeScheduler.equals(NoMergeScheduler.class.getName())) {\n      writer.getConfig().setMergeScheduler(NoMergeScheduler.INSTANCE);\n    } else {\n      try {\n        writer.getConfig().setMergeScheduler(Class.forName(mergeScheduler).asSubclass(MergeScheduler.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergeScheduler + \"' as merge scheduler\", e);\n      }\n      \n      if (mergeScheduler.equals(\"org.apache.lucene.index.ConcurrentMergeScheduler\")) {\n        ConcurrentMergeScheduler cms = (ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler();\n        int v = config.get(\"concurrent.merge.scheduler.max.thread.count\", -1);\n        if (v != -1) {\n          cms.setMaxThreadCount(v);\n        }\n        v = config.get(\"concurrent.merge.scheduler.max.merge.count\", -1);\n        if (v != -1) {\n          cms.setMaxMergeCount(v);\n        }\n      }\n    }\n\n    final String mergePolicy = config.get(\"merge.policy\",\n                                          \"org.apache.lucene.index.LogByteSizeMergePolicy\");\n    boolean isCompound = config.get(\"compound\", true);\n    if (mergePolicy.equals(NoMergePolicy.class.getName())) {\n      writer.getConfig().setMergePolicy(isCompound ? NoMergePolicy.COMPOUND_FILES : NoMergePolicy.NO_COMPOUND_FILES);\n    } else {\n      try {\n        writer.getConfig().setMergePolicy(Class.forName(mergePolicy).asSubclass(MergePolicy.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergePolicy + \"' as merge policy\", e);\n      }\n      if (writer.getConfig().getMergePolicy() instanceof LogMergePolicy) {\n        ((LogMergePolicy) writer.getConfig().getMergePolicy()).setUseCompoundFile(isCompound);\n        ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(config.get(\"merge.factor\",OpenIndexTask.DEFAULT_MERGE_PFACTOR));\n      }\n    }\n    writer.getConfig().setMaxFieldLength(config.get(\"max.field.length\",OpenIndexTask.DEFAULT_MAX_FIELD_LENGTH));\n\n    final double ramBuffer = config.get(\"ram.flush.mb\",OpenIndexTask.DEFAULT_RAM_FLUSH_MB);\n    final int maxBuffered = config.get(\"max.buffered\",OpenIndexTask.DEFAULT_MAX_BUFFERED);\n    if (maxBuffered == IndexWriterConfig.DISABLE_AUTO_FLUSH) {\n      writer.setRAMBufferSizeMB(ramBuffer);\n      writer.setMaxBufferedDocs(maxBuffered);\n    } else {\n      writer.setMaxBufferedDocs(maxBuffered);\n      writer.setRAMBufferSizeMB(ramBuffer);\n    }\n    \n    String infoStreamVal = config.get(\"writer.info.stream\", null);\n    if (infoStreamVal != null) {\n      if (infoStreamVal.equals(\"SystemOut\")) {\n        writer.setInfoStream(System.out);\n      } else if (infoStreamVal.equals(\"SystemErr\")) {\n        writer.setInfoStream(System.err);\n      } else {\n        File f = new File(infoStreamVal).getAbsoluteFile();\n        writer.setInfoStream(new PrintStream(new BufferedOutputStream(new FileOutputStream(f))));\n      }\n    }\n  }\n\n","sourceOld":"  public static void setIndexWriterConfig(IndexWriter writer, Config config) throws IOException {\n\n    final String mergeScheduler = config.get(\"merge.scheduler\",\n                                             \"org.apache.lucene.index.ConcurrentMergeScheduler\");\n    if (mergeScheduler.equals(NoMergeScheduler.class.getName())) {\n      writer.setMergeScheduler(NoMergeScheduler.INSTANCE);\n    } else {\n      try {\n        writer.setMergeScheduler(Class.forName(mergeScheduler).asSubclass(MergeScheduler.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergeScheduler + \"' as merge scheduler\", e);\n      }\n      \n      if (mergeScheduler.equals(\"org.apache.lucene.index.ConcurrentMergeScheduler\")) {\n        ConcurrentMergeScheduler cms = (ConcurrentMergeScheduler) writer.getMergeScheduler();\n        int v = config.get(\"concurrent.merge.scheduler.max.thread.count\", -1);\n        if (v != -1) {\n          cms.setMaxThreadCount(v);\n        }\n        v = config.get(\"concurrent.merge.scheduler.max.merge.count\", -1);\n        if (v != -1) {\n          cms.setMaxMergeCount(v);\n        }\n      }\n    }\n\n    final String mergePolicy = config.get(\"merge.policy\",\n                                          \"org.apache.lucene.index.LogByteSizeMergePolicy\");\n    boolean isCompound = config.get(\"compound\", true);\n    if (mergePolicy.equals(NoMergePolicy.class.getName())) {\n      writer.setMergePolicy(isCompound ? NoMergePolicy.COMPOUND_FILES : NoMergePolicy.NO_COMPOUND_FILES);\n    } else {\n      try {\n        writer.setMergePolicy(Class.forName(mergePolicy).asSubclass(MergePolicy.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergePolicy + \"' as merge policy\", e);\n      }\n      writer.setUseCompoundFile(isCompound);\n      writer.setMergeFactor(config.get(\"merge.factor\",OpenIndexTask.DEFAULT_MERGE_PFACTOR));\n    }\n    writer.setMaxFieldLength(config.get(\"max.field.length\",OpenIndexTask.DEFAULT_MAX_FIELD_LENGTH));\n\n    final double ramBuffer = config.get(\"ram.flush.mb\",OpenIndexTask.DEFAULT_RAM_FLUSH_MB);\n    final int maxBuffered = config.get(\"max.buffered\",OpenIndexTask.DEFAULT_MAX_BUFFERED);\n    if (maxBuffered == IndexWriterConfig.DISABLE_AUTO_FLUSH) {\n      writer.setRAMBufferSizeMB(ramBuffer);\n      writer.setMaxBufferedDocs(maxBuffered);\n    } else {\n      writer.setMaxBufferedDocs(maxBuffered);\n      writer.setRAMBufferSizeMB(ramBuffer);\n    }\n    \n    String infoStreamVal = config.get(\"writer.info.stream\", null);\n    if (infoStreamVal != null) {\n      if (infoStreamVal.equals(\"SystemOut\")) {\n        writer.setInfoStream(System.out);\n      } else if (infoStreamVal.equals(\"SystemErr\")) {\n        writer.setInfoStream(System.err);\n      } else {\n        File f = new File(infoStreamVal).getAbsoluteFile();\n        writer.setInfoStream(new PrintStream(new BufferedOutputStream(new FileOutputStream(f))));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c740bdcaf9781b9822969a3305e51cfa4eaaf673","date":1280775080,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/CreateIndexTask#setIndexWriterConfig(IndexWriter,Config).mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/CreateIndexTask#setIndexWriterConfig(IndexWriter,Config).mjava","sourceNew":"  public static void setIndexWriterConfig(IndexWriter writer, Config config) throws IOException {\n\n    final String mergeScheduler = config.get(\"merge.scheduler\",\n                                             \"org.apache.lucene.index.ConcurrentMergeScheduler\");\n    if (mergeScheduler.equals(NoMergeScheduler.class.getName())) {\n      writer.setMergeScheduler(NoMergeScheduler.INSTANCE);\n    } else {\n      try {\n        writer.setMergeScheduler(Class.forName(mergeScheduler).asSubclass(MergeScheduler.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergeScheduler + \"' as merge scheduler\", e);\n      }\n      \n      if (mergeScheduler.equals(\"org.apache.lucene.index.ConcurrentMergeScheduler\")) {\n        ConcurrentMergeScheduler cms = (ConcurrentMergeScheduler) writer.getMergeScheduler();\n        int v = config.get(\"concurrent.merge.scheduler.max.thread.count\", -1);\n        if (v != -1) {\n          cms.setMaxThreadCount(v);\n        }\n        v = config.get(\"concurrent.merge.scheduler.max.merge.count\", -1);\n        if (v != -1) {\n          cms.setMaxMergeCount(v);\n        }\n      }\n    }\n\n    final String defaultCodec = config.get(\"default.codec\", null);\n    if (defaultCodec != null) {\n      CodecProvider.setDefaultCodec(defaultCodec);\n    }\n\n    final String mergePolicy = config.get(\"merge.policy\",\n                                          \"org.apache.lucene.index.LogByteSizeMergePolicy\");\n    boolean isCompound = config.get(\"compound\", true);\n    if (mergePolicy.equals(NoMergePolicy.class.getName())) {\n      writer.setMergePolicy(isCompound ? NoMergePolicy.COMPOUND_FILES : NoMergePolicy.NO_COMPOUND_FILES);\n    } else {\n      try {\n        writer.setMergePolicy(Class.forName(mergePolicy).asSubclass(MergePolicy.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergePolicy + \"' as merge policy\", e);\n      }\n      writer.setUseCompoundFile(isCompound);\n      writer.setMergeFactor(config.get(\"merge.factor\",OpenIndexTask.DEFAULT_MERGE_PFACTOR));\n    }\n    writer.setMaxFieldLength(config.get(\"max.field.length\",OpenIndexTask.DEFAULT_MAX_FIELD_LENGTH));\n\n    final double ramBuffer = config.get(\"ram.flush.mb\",OpenIndexTask.DEFAULT_RAM_FLUSH_MB);\n    final int maxBuffered = config.get(\"max.buffered\",OpenIndexTask.DEFAULT_MAX_BUFFERED);\n    if (maxBuffered == IndexWriterConfig.DISABLE_AUTO_FLUSH) {\n      writer.setRAMBufferSizeMB(ramBuffer);\n      writer.setMaxBufferedDocs(maxBuffered);\n    } else {\n      writer.setMaxBufferedDocs(maxBuffered);\n      writer.setRAMBufferSizeMB(ramBuffer);\n    }\n    \n    String infoStreamVal = config.get(\"writer.info.stream\", null);\n    if (infoStreamVal != null) {\n      if (infoStreamVal.equals(\"SystemOut\")) {\n        writer.setInfoStream(System.out);\n      } else if (infoStreamVal.equals(\"SystemErr\")) {\n        writer.setInfoStream(System.err);\n      } else {\n        File f = new File(infoStreamVal).getAbsoluteFile();\n        writer.setInfoStream(new PrintStream(new BufferedOutputStream(new FileOutputStream(f))));\n      }\n    }\n  }\n\n","sourceOld":"  public static void setIndexWriterConfig(IndexWriter writer, Config config) throws IOException {\n\n    final String mergeScheduler = config.get(\"merge.scheduler\",\n                                             \"org.apache.lucene.index.ConcurrentMergeScheduler\");\n    if (mergeScheduler.equals(NoMergeScheduler.class.getName())) {\n      writer.setMergeScheduler(NoMergeScheduler.INSTANCE);\n    } else {\n      try {\n        writer.setMergeScheduler(Class.forName(mergeScheduler).asSubclass(MergeScheduler.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergeScheduler + \"' as merge scheduler\", e);\n      }\n      \n      if (mergeScheduler.equals(\"org.apache.lucene.index.ConcurrentMergeScheduler\")) {\n        ConcurrentMergeScheduler cms = (ConcurrentMergeScheduler) writer.getMergeScheduler();\n        int v = config.get(\"concurrent.merge.scheduler.max.thread.count\", -1);\n        if (v != -1) {\n          cms.setMaxThreadCount(v);\n        }\n        v = config.get(\"concurrent.merge.scheduler.max.merge.count\", -1);\n        if (v != -1) {\n          cms.setMaxMergeCount(v);\n        }\n      }\n    }\n\n    final String mergePolicy = config.get(\"merge.policy\",\n                                          \"org.apache.lucene.index.LogByteSizeMergePolicy\");\n    boolean isCompound = config.get(\"compound\", true);\n    if (mergePolicy.equals(NoMergePolicy.class.getName())) {\n      writer.setMergePolicy(isCompound ? NoMergePolicy.COMPOUND_FILES : NoMergePolicy.NO_COMPOUND_FILES);\n    } else {\n      try {\n        writer.setMergePolicy(Class.forName(mergePolicy).asSubclass(MergePolicy.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergePolicy + \"' as merge policy\", e);\n      }\n      writer.setUseCompoundFile(isCompound);\n      writer.setMergeFactor(config.get(\"merge.factor\",OpenIndexTask.DEFAULT_MERGE_PFACTOR));\n    }\n    writer.setMaxFieldLength(config.get(\"max.field.length\",OpenIndexTask.DEFAULT_MAX_FIELD_LENGTH));\n\n    final double ramBuffer = config.get(\"ram.flush.mb\",OpenIndexTask.DEFAULT_RAM_FLUSH_MB);\n    final int maxBuffered = config.get(\"max.buffered\",OpenIndexTask.DEFAULT_MAX_BUFFERED);\n    if (maxBuffered == IndexWriterConfig.DISABLE_AUTO_FLUSH) {\n      writer.setRAMBufferSizeMB(ramBuffer);\n      writer.setMaxBufferedDocs(maxBuffered);\n    } else {\n      writer.setMaxBufferedDocs(maxBuffered);\n      writer.setRAMBufferSizeMB(ramBuffer);\n    }\n    \n    String infoStreamVal = config.get(\"writer.info.stream\", null);\n    if (infoStreamVal != null) {\n      if (infoStreamVal.equals(\"SystemOut\")) {\n        writer.setInfoStream(System.out);\n      } else if (infoStreamVal.equals(\"SystemErr\")) {\n        writer.setInfoStream(System.err);\n      } else {\n        File f = new File(infoStreamVal).getAbsoluteFile();\n        writer.setInfoStream(new PrintStream(new BufferedOutputStream(new FileOutputStream(f))));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"72ba12f3c327c892d69cfdd5ac98ec5cfc05ce10","date":1288892232,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/CreateIndexTask#createWriterConfig(Config,PerfRunData,OpenMode,IndexCommit).mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/CreateIndexTask#setIndexWriterConfig(IndexWriter,Config).mjava","sourceNew":"  public static IndexWriterConfig createWriterConfig(Config config, PerfRunData runData, OpenMode mode, IndexCommit commit) {\n    Version version = Version.valueOf(config.get(\"writer.version\", Version.LUCENE_40.toString()));\n    IndexWriterConfig iwConf = new IndexWriterConfig(version, runData.getAnalyzer());\n    iwConf.setOpenMode(mode);\n    IndexDeletionPolicy indexDeletionPolicy = getIndexDeletionPolicy(config);\n    iwConf.setIndexDeletionPolicy(indexDeletionPolicy);\n    if(commit != null)\n      iwConf.setIndexCommit(commit);\n    \n\n    final String mergeScheduler = config.get(\"merge.scheduler\",\n                                             \"org.apache.lucene.index.ConcurrentMergeScheduler\");\n    if (mergeScheduler.equals(NoMergeScheduler.class.getName())) {\n      iwConf.setMergeScheduler(NoMergeScheduler.INSTANCE);\n    } else {\n      try {\n        iwConf.setMergeScheduler(Class.forName(mergeScheduler).asSubclass(MergeScheduler.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergeScheduler + \"' as merge scheduler\", e);\n      }\n      \n      if (mergeScheduler.equals(\"org.apache.lucene.index.ConcurrentMergeScheduler\")) {\n        ConcurrentMergeScheduler cms = (ConcurrentMergeScheduler) iwConf.getMergeScheduler();\n        int v = config.get(\"concurrent.merge.scheduler.max.thread.count\", -1);\n        if (v != -1) {\n          cms.setMaxThreadCount(v);\n        }\n        v = config.get(\"concurrent.merge.scheduler.max.merge.count\", -1);\n        if (v != -1) {\n          cms.setMaxMergeCount(v);\n        }\n      }\n    }\n\n    final String defaultCodec = config.get(\"default.codec\", null);\n    if (defaultCodec != null) {\n      CodecProvider.setDefaultCodec(defaultCodec);\n    }\n\n    final String mergePolicy = config.get(\"merge.policy\",\n                                          \"org.apache.lucene.index.LogByteSizeMergePolicy\");\n    boolean isCompound = config.get(\"compound\", true);\n    if (mergePolicy.equals(NoMergePolicy.class.getName())) {\n      iwConf.setMergePolicy(isCompound ? NoMergePolicy.COMPOUND_FILES : NoMergePolicy.NO_COMPOUND_FILES);\n    } else {\n      try {\n        iwConf.setMergePolicy(Class.forName(mergePolicy).asSubclass(MergePolicy.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergePolicy + \"' as merge policy\", e);\n      }\n      if(iwConf.getMergePolicy() instanceof LogMergePolicy) {\n        LogMergePolicy logMergePolicy = (LogMergePolicy) iwConf.getMergePolicy();\n        logMergePolicy.setUseCompoundFile(isCompound);\n        logMergePolicy.setMergeFactor(config.get(\"merge.factor\",OpenIndexTask.DEFAULT_MERGE_PFACTOR));\n      }\n    }\n    iwConf.setMaxFieldLength(config.get(\"max.field.length\",OpenIndexTask.DEFAULT_MAX_FIELD_LENGTH));\n    final double ramBuffer = config.get(\"ram.flush.mb\",OpenIndexTask.DEFAULT_RAM_FLUSH_MB);\n    final int maxBuffered = config.get(\"max.buffered\",OpenIndexTask.DEFAULT_MAX_BUFFERED);\n    if (maxBuffered == IndexWriterConfig.DISABLE_AUTO_FLUSH) {\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n      iwConf.setMaxBufferedDocs(maxBuffered);\n    } else {\n      iwConf.setMaxBufferedDocs(maxBuffered);\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n    }\n    \n    return iwConf;\n  }\n\n","sourceOld":"  public static void setIndexWriterConfig(IndexWriter writer, Config config) throws IOException {\n\n    final String mergeScheduler = config.get(\"merge.scheduler\",\n                                             \"org.apache.lucene.index.ConcurrentMergeScheduler\");\n    if (mergeScheduler.equals(NoMergeScheduler.class.getName())) {\n      writer.setMergeScheduler(NoMergeScheduler.INSTANCE);\n    } else {\n      try {\n        writer.setMergeScheduler(Class.forName(mergeScheduler).asSubclass(MergeScheduler.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergeScheduler + \"' as merge scheduler\", e);\n      }\n      \n      if (mergeScheduler.equals(\"org.apache.lucene.index.ConcurrentMergeScheduler\")) {\n        ConcurrentMergeScheduler cms = (ConcurrentMergeScheduler) writer.getMergeScheduler();\n        int v = config.get(\"concurrent.merge.scheduler.max.thread.count\", -1);\n        if (v != -1) {\n          cms.setMaxThreadCount(v);\n        }\n        v = config.get(\"concurrent.merge.scheduler.max.merge.count\", -1);\n        if (v != -1) {\n          cms.setMaxMergeCount(v);\n        }\n      }\n    }\n\n    final String defaultCodec = config.get(\"default.codec\", null);\n    if (defaultCodec != null) {\n      CodecProvider.setDefaultCodec(defaultCodec);\n    }\n\n    final String mergePolicy = config.get(\"merge.policy\",\n                                          \"org.apache.lucene.index.LogByteSizeMergePolicy\");\n    boolean isCompound = config.get(\"compound\", true);\n    if (mergePolicy.equals(NoMergePolicy.class.getName())) {\n      writer.setMergePolicy(isCompound ? NoMergePolicy.COMPOUND_FILES : NoMergePolicy.NO_COMPOUND_FILES);\n    } else {\n      try {\n        writer.setMergePolicy(Class.forName(mergePolicy).asSubclass(MergePolicy.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergePolicy + \"' as merge policy\", e);\n      }\n      writer.setUseCompoundFile(isCompound);\n      writer.setMergeFactor(config.get(\"merge.factor\",OpenIndexTask.DEFAULT_MERGE_PFACTOR));\n    }\n    writer.setMaxFieldLength(config.get(\"max.field.length\",OpenIndexTask.DEFAULT_MAX_FIELD_LENGTH));\n\n    final double ramBuffer = config.get(\"ram.flush.mb\",OpenIndexTask.DEFAULT_RAM_FLUSH_MB);\n    final int maxBuffered = config.get(\"max.buffered\",OpenIndexTask.DEFAULT_MAX_BUFFERED);\n    if (maxBuffered == IndexWriterConfig.DISABLE_AUTO_FLUSH) {\n      writer.setRAMBufferSizeMB(ramBuffer);\n      writer.setMaxBufferedDocs(maxBuffered);\n    } else {\n      writer.setMaxBufferedDocs(maxBuffered);\n      writer.setRAMBufferSizeMB(ramBuffer);\n    }\n    \n    String infoStreamVal = config.get(\"writer.info.stream\", null);\n    if (infoStreamVal != null) {\n      if (infoStreamVal.equals(\"SystemOut\")) {\n        writer.setInfoStream(System.out);\n      } else if (infoStreamVal.equals(\"SystemErr\")) {\n        writer.setInfoStream(System.err);\n      } else {\n        File f = new File(infoStreamVal).getAbsoluteFile();\n        writer.setInfoStream(new PrintStream(new BufferedOutputStream(new FileOutputStream(f))));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["0bf41419d452997826ec5f17684993377be77f49","0bf41419d452997826ec5f17684993377be77f49","0bf41419d452997826ec5f17684993377be77f49","0bf41419d452997826ec5f17684993377be77f49","0bf41419d452997826ec5f17684993377be77f49","0bf41419d452997826ec5f17684993377be77f49","be3b141eed4372b3eb04def61ab79f86f572f481","be3b141eed4372b3eb04def61ab79f86f572f481","be3b141eed4372b3eb04def61ab79f86f572f481","be3b141eed4372b3eb04def61ab79f86f572f481","be3b141eed4372b3eb04def61ab79f86f572f481","be3b141eed4372b3eb04def61ab79f86f572f481"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"85a883878c0af761245ab048babc63d099f835f3","date":1289553330,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/CreateIndexTask#createWriterConfig(Config,PerfRunData,OpenMode,IndexCommit).mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/CreateIndexTask#setIndexWriterConfig(IndexWriter,Config).mjava","sourceNew":"  public static IndexWriterConfig createWriterConfig(Config config, PerfRunData runData, OpenMode mode, IndexCommit commit) {\n    Version version = Version.valueOf(config.get(\"writer.version\", Version.LUCENE_40.toString()));\n    IndexWriterConfig iwConf = new IndexWriterConfig(version, runData.getAnalyzer());\n    iwConf.setOpenMode(mode);\n    IndexDeletionPolicy indexDeletionPolicy = getIndexDeletionPolicy(config);\n    iwConf.setIndexDeletionPolicy(indexDeletionPolicy);\n    if(commit != null)\n      iwConf.setIndexCommit(commit);\n    \n\n    final String mergeScheduler = config.get(\"merge.scheduler\",\n                                             \"org.apache.lucene.index.ConcurrentMergeScheduler\");\n    if (mergeScheduler.equals(NoMergeScheduler.class.getName())) {\n      iwConf.setMergeScheduler(NoMergeScheduler.INSTANCE);\n    } else {\n      try {\n        iwConf.setMergeScheduler(Class.forName(mergeScheduler).asSubclass(MergeScheduler.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergeScheduler + \"' as merge scheduler\", e);\n      }\n      \n      if (mergeScheduler.equals(\"org.apache.lucene.index.ConcurrentMergeScheduler\")) {\n        ConcurrentMergeScheduler cms = (ConcurrentMergeScheduler) iwConf.getMergeScheduler();\n        int v = config.get(\"concurrent.merge.scheduler.max.thread.count\", -1);\n        if (v != -1) {\n          cms.setMaxThreadCount(v);\n        }\n        v = config.get(\"concurrent.merge.scheduler.max.merge.count\", -1);\n        if (v != -1) {\n          cms.setMaxMergeCount(v);\n        }\n      }\n    }\n\n    final String defaultCodec = config.get(\"default.codec\", null);\n    if (defaultCodec != null) {\n      CodecProvider.setDefaultCodec(defaultCodec);\n      CodecProvider.getDefault().setDefaultFieldCodec(defaultCodec);\n    }\n\n    final String mergePolicy = config.get(\"merge.policy\",\n                                          \"org.apache.lucene.index.LogByteSizeMergePolicy\");\n    boolean isCompound = config.get(\"compound\", true);\n    if (mergePolicy.equals(NoMergePolicy.class.getName())) {\n      iwConf.setMergePolicy(isCompound ? NoMergePolicy.COMPOUND_FILES : NoMergePolicy.NO_COMPOUND_FILES);\n    } else {\n      try {\n        iwConf.setMergePolicy(Class.forName(mergePolicy).asSubclass(MergePolicy.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergePolicy + \"' as merge policy\", e);\n      }\n      if(iwConf.getMergePolicy() instanceof LogMergePolicy) {\n        LogMergePolicy logMergePolicy = (LogMergePolicy) iwConf.getMergePolicy();\n        logMergePolicy.setUseCompoundFile(isCompound);\n        logMergePolicy.setMergeFactor(config.get(\"merge.factor\",OpenIndexTask.DEFAULT_MERGE_PFACTOR));\n      }\n    }\n    iwConf.setMaxFieldLength(config.get(\"max.field.length\",OpenIndexTask.DEFAULT_MAX_FIELD_LENGTH));\n    final double ramBuffer = config.get(\"ram.flush.mb\",OpenIndexTask.DEFAULT_RAM_FLUSH_MB);\n    final int maxBuffered = config.get(\"max.buffered\",OpenIndexTask.DEFAULT_MAX_BUFFERED);\n    if (maxBuffered == IndexWriterConfig.DISABLE_AUTO_FLUSH) {\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n      iwConf.setMaxBufferedDocs(maxBuffered);\n    } else {\n      iwConf.setMaxBufferedDocs(maxBuffered);\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n    }\n    \n    return iwConf;\n  }\n\n","sourceOld":"  public static void setIndexWriterConfig(IndexWriter writer, Config config) throws IOException {\n\n    final String mergeScheduler = config.get(\"merge.scheduler\",\n                                             \"org.apache.lucene.index.ConcurrentMergeScheduler\");\n    if (mergeScheduler.equals(NoMergeScheduler.class.getName())) {\n      writer.setMergeScheduler(NoMergeScheduler.INSTANCE);\n    } else {\n      try {\n        writer.setMergeScheduler(Class.forName(mergeScheduler).asSubclass(MergeScheduler.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergeScheduler + \"' as merge scheduler\", e);\n      }\n      \n      if (mergeScheduler.equals(\"org.apache.lucene.index.ConcurrentMergeScheduler\")) {\n        ConcurrentMergeScheduler cms = (ConcurrentMergeScheduler) writer.getMergeScheduler();\n        int v = config.get(\"concurrent.merge.scheduler.max.thread.count\", -1);\n        if (v != -1) {\n          cms.setMaxThreadCount(v);\n        }\n        v = config.get(\"concurrent.merge.scheduler.max.merge.count\", -1);\n        if (v != -1) {\n          cms.setMaxMergeCount(v);\n        }\n      }\n    }\n\n    final String defaultCodec = config.get(\"default.codec\", null);\n    if (defaultCodec != null) {\n      CodecProvider.setDefaultCodec(defaultCodec);\n    }\n\n    final String mergePolicy = config.get(\"merge.policy\",\n                                          \"org.apache.lucene.index.LogByteSizeMergePolicy\");\n    boolean isCompound = config.get(\"compound\", true);\n    if (mergePolicy.equals(NoMergePolicy.class.getName())) {\n      writer.setMergePolicy(isCompound ? NoMergePolicy.COMPOUND_FILES : NoMergePolicy.NO_COMPOUND_FILES);\n    } else {\n      try {\n        writer.setMergePolicy(Class.forName(mergePolicy).asSubclass(MergePolicy.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergePolicy + \"' as merge policy\", e);\n      }\n      writer.setUseCompoundFile(isCompound);\n      writer.setMergeFactor(config.get(\"merge.factor\",OpenIndexTask.DEFAULT_MERGE_PFACTOR));\n    }\n    writer.setMaxFieldLength(config.get(\"max.field.length\",OpenIndexTask.DEFAULT_MAX_FIELD_LENGTH));\n\n    final double ramBuffer = config.get(\"ram.flush.mb\",OpenIndexTask.DEFAULT_RAM_FLUSH_MB);\n    final int maxBuffered = config.get(\"max.buffered\",OpenIndexTask.DEFAULT_MAX_BUFFERED);\n    if (maxBuffered == IndexWriterConfig.DISABLE_AUTO_FLUSH) {\n      writer.setRAMBufferSizeMB(ramBuffer);\n      writer.setMaxBufferedDocs(maxBuffered);\n    } else {\n      writer.setMaxBufferedDocs(maxBuffered);\n      writer.setRAMBufferSizeMB(ramBuffer);\n    }\n    \n    String infoStreamVal = config.get(\"writer.info.stream\", null);\n    if (infoStreamVal != null) {\n      if (infoStreamVal.equals(\"SystemOut\")) {\n        writer.setInfoStream(System.out);\n      } else if (infoStreamVal.equals(\"SystemErr\")) {\n        writer.setInfoStream(System.err);\n      } else {\n        File f = new File(infoStreamVal).getAbsoluteFile();\n        writer.setInfoStream(new PrintStream(new BufferedOutputStream(new FileOutputStream(f))));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/CreateIndexTask#setIndexWriterConfig(IndexWriter,Config).mjava","sourceNew":null,"sourceOld":"  public static void setIndexWriterConfig(IndexWriter writer, Config config) throws IOException {\n\n    final String mergeScheduler = config.get(\"merge.scheduler\",\n                                             \"org.apache.lucene.index.ConcurrentMergeScheduler\");\n    if (mergeScheduler.equals(NoMergeScheduler.class.getName())) {\n      writer.getConfig().setMergeScheduler(NoMergeScheduler.INSTANCE);\n    } else {\n      try {\n        writer.getConfig().setMergeScheduler(Class.forName(mergeScheduler).asSubclass(MergeScheduler.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergeScheduler + \"' as merge scheduler\", e);\n      }\n      \n      if (mergeScheduler.equals(\"org.apache.lucene.index.ConcurrentMergeScheduler\")) {\n        ConcurrentMergeScheduler cms = (ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler();\n        int v = config.get(\"concurrent.merge.scheduler.max.thread.count\", -1);\n        if (v != -1) {\n          cms.setMaxThreadCount(v);\n        }\n        v = config.get(\"concurrent.merge.scheduler.max.merge.count\", -1);\n        if (v != -1) {\n          cms.setMaxMergeCount(v);\n        }\n      }\n    }\n\n    final String mergePolicy = config.get(\"merge.policy\",\n                                          \"org.apache.lucene.index.LogByteSizeMergePolicy\");\n    boolean isCompound = config.get(\"compound\", true);\n    if (mergePolicy.equals(NoMergePolicy.class.getName())) {\n      writer.getConfig().setMergePolicy(isCompound ? NoMergePolicy.COMPOUND_FILES : NoMergePolicy.NO_COMPOUND_FILES);\n    } else {\n      try {\n        writer.getConfig().setMergePolicy(Class.forName(mergePolicy).asSubclass(MergePolicy.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergePolicy + \"' as merge policy\", e);\n      }\n      if (writer.getConfig().getMergePolicy() instanceof LogMergePolicy) {\n        ((LogMergePolicy) writer.getConfig().getMergePolicy()).setUseCompoundFile(isCompound);\n        ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(config.get(\"merge.factor\",OpenIndexTask.DEFAULT_MERGE_PFACTOR));\n      }\n    }\n    writer.getConfig().setMaxFieldLength(config.get(\"max.field.length\",OpenIndexTask.DEFAULT_MAX_FIELD_LENGTH));\n\n    final double ramBuffer = config.get(\"ram.flush.mb\",OpenIndexTask.DEFAULT_RAM_FLUSH_MB);\n    final int maxBuffered = config.get(\"max.buffered\",OpenIndexTask.DEFAULT_MAX_BUFFERED);\n    if (maxBuffered == IndexWriterConfig.DISABLE_AUTO_FLUSH) {\n      writer.setRAMBufferSizeMB(ramBuffer);\n      writer.setMaxBufferedDocs(maxBuffered);\n    } else {\n      writer.setMaxBufferedDocs(maxBuffered);\n      writer.setRAMBufferSizeMB(ramBuffer);\n    }\n    \n    String infoStreamVal = config.get(\"writer.info.stream\", null);\n    if (infoStreamVal != null) {\n      if (infoStreamVal.equals(\"SystemOut\")) {\n        writer.setInfoStream(System.out);\n      } else if (infoStreamVal.equals(\"SystemErr\")) {\n        writer.setInfoStream(System.err);\n      } else {\n        File f = new File(infoStreamVal).getAbsoluteFile();\n        writer.setInfoStream(new PrintStream(new BufferedOutputStream(new FileOutputStream(f))));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"14b4bcebc8ea5c69eb01adfa263b0c55e5945cd8":["7ab99e8c71442b92c320e218141dee04a9b91ce8"],"7ab99e8c71442b92c320e218141dee04a9b91ce8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"c740bdcaf9781b9822969a3305e51cfa4eaaf673":["14b4bcebc8ea5c69eb01adfa263b0c55e5945cd8"],"1087dbf8766612c616d338f60273101b5490d8d6":["14b4bcebc8ea5c69eb01adfa263b0c55e5945cd8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"85a883878c0af761245ab048babc63d099f835f3":["c740bdcaf9781b9822969a3305e51cfa4eaaf673","72ba12f3c327c892d69cfdd5ac98ec5cfc05ce10"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["1087dbf8766612c616d338f60273101b5490d8d6","72ba12f3c327c892d69cfdd5ac98ec5cfc05ce10"],"72ba12f3c327c892d69cfdd5ac98ec5cfc05ce10":["c740bdcaf9781b9822969a3305e51cfa4eaaf673"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["72ba12f3c327c892d69cfdd5ac98ec5cfc05ce10"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"14b4bcebc8ea5c69eb01adfa263b0c55e5945cd8":["c740bdcaf9781b9822969a3305e51cfa4eaaf673","1087dbf8766612c616d338f60273101b5490d8d6"],"7ab99e8c71442b92c320e218141dee04a9b91ce8":["14b4bcebc8ea5c69eb01adfa263b0c55e5945cd8"],"c740bdcaf9781b9822969a3305e51cfa4eaaf673":["85a883878c0af761245ab048babc63d099f835f3","72ba12f3c327c892d69cfdd5ac98ec5cfc05ce10"],"1087dbf8766612c616d338f60273101b5490d8d6":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"85a883878c0af761245ab048babc63d099f835f3":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"72ba12f3c327c892d69cfdd5ac98ec5cfc05ce10":["85a883878c0af761245ab048babc63d099f835f3","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["7ab99e8c71442b92c320e218141dee04a9b91ce8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["85a883878c0af761245ab048babc63d099f835f3","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}