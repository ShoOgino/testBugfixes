{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#checkSort(JettySolrRunner,String,String,String[]).mjava","commits":[{"id":"f8c0e05ed2dea5beb7c0246a2a6e68f28595357b","date":1479136768,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#checkSort(JettySolrRunner,String,String,String[]).mjava","pathOld":"/dev/null","sourceNew":"  // Select and export should be identical sort orders I think.\n  private void checkSort(JettySolrRunner jetty, String field, String sortDir, String[] fields) throws IOException, SolrServerException {\n\n    // Comes back after after LUCENE-7548\n//    SolrQuery query = new SolrQuery(\"*:*\");\n//    query.addSort(field, (\"asc\".equals(sortDir) ? SolrQuery.ORDER.asc : SolrQuery.ORDER.desc));\n//    query.addSort(\"id\", SolrQuery.ORDER.asc);\n//    query.addField(\"id\");\n//    query.addField(field);\n//    query.setRequestHandler(\"standard\");\n//    query.setRows(100);\n//\n//    List<String> selectOrder = new ArrayList<>();\n//\n//    String url = jetty.getBaseUrl() + \"/\" + COLLECTION;\n//\n//    try (HttpSolrClient client = getHttpSolrClient(url)) {\n//      client.setConnectionTimeout(DEFAULT_CONNECTION_TIMEOUT);\n//      QueryResponse rsp = client.query(query);\n//      for (SolrDocument doc : rsp.getResults()) {\n//        selectOrder.add((String) doc.getFieldValue(\"id\"));\n//      }\n//    }\n//    SolrParams exportParams = mapParams(\"q\", \"*:*\", \"qt\", \"/export\", \"fl\", \"id,\" + field, \"sort\", field + \" \" + sortDir + \",id asc\");\n//    try (CloudSolrStream solrStream = new CloudSolrStream(zkHost, COLLECTION, exportParams)) {\n//      List<Tuple> tuples = getTuples(solrStream);\n//      assertEquals(\"There should be exactly 32 responses returned\", 32, tuples.size());\n//      // Since the getTuples method doesn't return the EOF tuple, these two entries should be the same size.\n//      assertEquals(\"Tuple count should exactly match sort array size for field \" + field + \" sort order \" + sortDir, selectOrder.size(), tuples.size());\n//\n//      for (int idx = 0; idx < selectOrder.size(); ++idx) { // Tuples should be in lock step with the orders from select.\n//        assertEquals(\"Order for missing docValues fields wrong for field '\" + field + \"' sort direction '\" + sortDir,\n//            tuples.get(idx).getString(\"id\"), selectOrder.get(idx));\n//      }\n//    }\n\n    // Remove below and uncomment above after LUCENE-7548\n    List<String> selectOrder = (\"asc\".equals(sortDir)) ? Arrays.asList(ascOrder) : Arrays.asList(descOrder);\n    List<String> selectOrderBool = (\"asc\".equals(sortDir)) ? Arrays.asList(ascOrderBool) : Arrays.asList(descOrderBool);\n    SolrParams exportParams = mapParams(\"q\", \"*:*\", \"qt\", \"/export\", \"fl\", \"id,\" + field, \"sort\", field + \" \" + sortDir + \",id asc\");\n    try (CloudSolrStream solrStream = new CloudSolrStream(zkHost, COLLECTION, exportParams)) {\n      List<Tuple> tuples = getTuples(solrStream);\n      assertEquals(\"There should be exactly 32 responses returned\", 32, tuples.size());\n      // Since the getTuples method doesn't return the EOF tuple, these two entries should be the same size.\n      assertEquals(\"Tuple count should exactly match sort array size for field \" + field + \" sort order \" + sortDir, selectOrder.size(), tuples.size());\n\n      for (int idx = 0; idx < selectOrder.size(); ++idx) { // Tuples should be in lock step with the orders passed in.\n        assertEquals(\"Order for missing docValues fields wrong for field '\" + field + \"' sort direction '\" + sortDir +\n                \"' RESTORE GETTING selectOrder from select statement after LUCENE-7548\",\n            tuples.get(idx).getString(\"id\"), (field.startsWith(\"b_\") ? selectOrderBool.get(idx) : selectOrder.get(idx)));\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c8243e301531f97de264740d6afa71de6781dd64","date":1479139589,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#checkSort(JettySolrRunner,String,String,String[]).mjava","pathOld":"/dev/null","sourceNew":"  // Select and export should be identical sort orders I think.\n  private void checkSort(JettySolrRunner jetty, String field, String sortDir, String[] fields) throws IOException, SolrServerException {\n\n    // Comes back after after LUCENE-7548\n//    SolrQuery query = new SolrQuery(\"*:*\");\n//    query.addSort(field, (\"asc\".equals(sortDir) ? SolrQuery.ORDER.asc : SolrQuery.ORDER.desc));\n//    query.addSort(\"id\", SolrQuery.ORDER.asc);\n//    query.addField(\"id\");\n//    query.addField(field);\n//    query.setRequestHandler(\"standard\");\n//    query.setRows(100);\n//\n//    List<String> selectOrder = new ArrayList<>();\n//\n//    String url = jetty.getBaseUrl() + \"/\" + COLLECTION;\n//\n//    try (HttpSolrClient client = getHttpSolrClient(url)) {\n//      client.setConnectionTimeout(DEFAULT_CONNECTION_TIMEOUT);\n//      QueryResponse rsp = client.query(query);\n//      for (SolrDocument doc : rsp.getResults()) {\n//        selectOrder.add((String) doc.getFieldValue(\"id\"));\n//      }\n//    }\n//    SolrParams exportParams = mapParams(\"q\", \"*:*\", \"qt\", \"/export\", \"fl\", \"id,\" + field, \"sort\", field + \" \" + sortDir + \",id asc\");\n//    try (CloudSolrStream solrStream = new CloudSolrStream(zkHost, COLLECTION, exportParams)) {\n//      List<Tuple> tuples = getTuples(solrStream);\n//      assertEquals(\"There should be exactly 32 responses returned\", 32, tuples.size());\n//      // Since the getTuples method doesn't return the EOF tuple, these two entries should be the same size.\n//      assertEquals(\"Tuple count should exactly match sort array size for field \" + field + \" sort order \" + sortDir, selectOrder.size(), tuples.size());\n//\n//      for (int idx = 0; idx < selectOrder.size(); ++idx) { // Tuples should be in lock step with the orders from select.\n//        assertEquals(\"Order for missing docValues fields wrong for field '\" + field + \"' sort direction '\" + sortDir,\n//            tuples.get(idx).getString(\"id\"), selectOrder.get(idx));\n//      }\n//    }\n\n    // Remove below and uncomment above after LUCENE-7548\n    List<String> selectOrder = (\"asc\".equals(sortDir)) ? Arrays.asList(ascOrder) : Arrays.asList(descOrder);\n    List<String> selectOrderBool = (\"asc\".equals(sortDir)) ? Arrays.asList(ascOrderBool) : Arrays.asList(descOrderBool);\n    SolrParams exportParams = mapParams(\"q\", \"*:*\", \"qt\", \"/export\", \"fl\", \"id,\" + field, \"sort\", field + \" \" + sortDir + \",id asc\");\n    try (CloudSolrStream solrStream = new CloudSolrStream(zkHost, COLLECTION, exportParams)) {\n      List<Tuple> tuples = getTuples(solrStream);\n      assertEquals(\"There should be exactly 32 responses returned\", 32, tuples.size());\n      // Since the getTuples method doesn't return the EOF tuple, these two entries should be the same size.\n      assertEquals(\"Tuple count should exactly match sort array size for field \" + field + \" sort order \" + sortDir, selectOrder.size(), tuples.size());\n\n      for (int idx = 0; idx < selectOrder.size(); ++idx) { // Tuples should be in lock step with the orders passed in.\n        assertEquals(\"Order for missing docValues fields wrong for field '\" + field + \"' sort direction '\" + sortDir +\n                \"' RESTORE GETTING selectOrder from select statement after LUCENE-7548\",\n            tuples.get(idx).getString(\"id\"), (field.startsWith(\"b_\") ? selectOrderBool.get(idx) : selectOrder.get(idx)));\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8c969f15cd04d31e520319c619a445ae21f02d72","date":1479263638,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#checkSort(JettySolrRunner,String,String,String[]).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#checkSort(JettySolrRunner,String,String,String[]).mjava","sourceNew":"  // Select and export should be identical sort orders I think.\n  private void checkSort(JettySolrRunner jetty, String field, String sortDir, String[] fields) throws IOException, SolrServerException {\n\n    // Comes back after after LUCENE-7548\n//    SolrQuery query = new SolrQuery(\"*:*\");\n//    query.addSort(field, (\"asc\".equals(sortDir) ? SolrQuery.ORDER.asc : SolrQuery.ORDER.desc));\n//    query.addSort(\"id\", SolrQuery.ORDER.asc);\n//    query.addField(\"id\");\n//    query.addField(field);\n//    query.setRequestHandler(\"standard\");\n//    query.setRows(100);\n//\n//    List<String> selectOrder = new ArrayList<>();\n//\n//    String url = jetty.getBaseUrl() + \"/\" + COLLECTION;\n//\n//    try (HttpSolrClient client = getHttpSolrClient(url)) {\n//      client.setConnectionTimeout(DEFAULT_CONNECTION_TIMEOUT);\n//      QueryResponse rsp = client.query(query);\n//      for (SolrDocument doc : rsp.getResults()) {\n//        selectOrder.add((String) doc.getFieldValue(\"id\"));\n//      }\n//    }\n//    SolrParams exportParams = mapParams(\"q\", \"*:*\", \"qt\", \"/export\", \"fl\", \"id,\" + field, \"sort\", field + \" \" + sortDir + \",id asc\");\n//    try (CloudSolrStream solrStream = new CloudSolrStream(zkHost, COLLECTIONORALIAS, exportParams)) {\n//      List<Tuple> tuples = getTuples(solrStream);\n//      assertEquals(\"There should be exactly 32 responses returned\", 32, tuples.size());\n//      // Since the getTuples method doesn't return the EOF tuple, these two entries should be the same size.\n//      assertEquals(\"Tuple count should exactly match sort array size for field \" + field + \" sort order \" + sortDir, selectOrder.size(), tuples.size());\n//\n//      for (int idx = 0; idx < selectOrder.size(); ++idx) { // Tuples should be in lock step with the orders from select.\n//        assertEquals(\"Order for missing docValues fields wrong for field '\" + field + \"' sort direction '\" + sortDir,\n//            tuples.get(idx).getString(\"id\"), selectOrder.get(idx));\n//      }\n//    }\n\n    // Remove below and uncomment above after LUCENE-7548\n    List<String> selectOrder = (\"asc\".equals(sortDir)) ? Arrays.asList(ascOrder) : Arrays.asList(descOrder);\n    List<String> selectOrderBool = (\"asc\".equals(sortDir)) ? Arrays.asList(ascOrderBool) : Arrays.asList(descOrderBool);\n    SolrParams exportParams = mapParams(\"q\", \"*:*\", \"qt\", \"/export\", \"fl\", \"id,\" + field, \"sort\", field + \" \" + sortDir + \",id asc\");\n    try (CloudSolrStream solrStream = new CloudSolrStream(zkHost, COLLECTIONORALIAS, exportParams)) {\n      List<Tuple> tuples = getTuples(solrStream);\n      assertEquals(\"There should be exactly 32 responses returned\", 32, tuples.size());\n      // Since the getTuples method doesn't return the EOF tuple, these two entries should be the same size.\n      assertEquals(\"Tuple count should exactly match sort array size for field \" + field + \" sort order \" + sortDir, selectOrder.size(), tuples.size());\n\n      for (int idx = 0; idx < selectOrder.size(); ++idx) { // Tuples should be in lock step with the orders passed in.\n        assertEquals(\"Order for missing docValues fields wrong for field '\" + field + \"' sort direction '\" + sortDir +\n                \"' RESTORE GETTING selectOrder from select statement after LUCENE-7548\",\n            tuples.get(idx).getString(\"id\"), (field.startsWith(\"b_\") ? selectOrderBool.get(idx) : selectOrder.get(idx)));\n      }\n    }\n  }\n\n","sourceOld":"  // Select and export should be identical sort orders I think.\n  private void checkSort(JettySolrRunner jetty, String field, String sortDir, String[] fields) throws IOException, SolrServerException {\n\n    // Comes back after after LUCENE-7548\n//    SolrQuery query = new SolrQuery(\"*:*\");\n//    query.addSort(field, (\"asc\".equals(sortDir) ? SolrQuery.ORDER.asc : SolrQuery.ORDER.desc));\n//    query.addSort(\"id\", SolrQuery.ORDER.asc);\n//    query.addField(\"id\");\n//    query.addField(field);\n//    query.setRequestHandler(\"standard\");\n//    query.setRows(100);\n//\n//    List<String> selectOrder = new ArrayList<>();\n//\n//    String url = jetty.getBaseUrl() + \"/\" + COLLECTION;\n//\n//    try (HttpSolrClient client = getHttpSolrClient(url)) {\n//      client.setConnectionTimeout(DEFAULT_CONNECTION_TIMEOUT);\n//      QueryResponse rsp = client.query(query);\n//      for (SolrDocument doc : rsp.getResults()) {\n//        selectOrder.add((String) doc.getFieldValue(\"id\"));\n//      }\n//    }\n//    SolrParams exportParams = mapParams(\"q\", \"*:*\", \"qt\", \"/export\", \"fl\", \"id,\" + field, \"sort\", field + \" \" + sortDir + \",id asc\");\n//    try (CloudSolrStream solrStream = new CloudSolrStream(zkHost, COLLECTION, exportParams)) {\n//      List<Tuple> tuples = getTuples(solrStream);\n//      assertEquals(\"There should be exactly 32 responses returned\", 32, tuples.size());\n//      // Since the getTuples method doesn't return the EOF tuple, these two entries should be the same size.\n//      assertEquals(\"Tuple count should exactly match sort array size for field \" + field + \" sort order \" + sortDir, selectOrder.size(), tuples.size());\n//\n//      for (int idx = 0; idx < selectOrder.size(); ++idx) { // Tuples should be in lock step with the orders from select.\n//        assertEquals(\"Order for missing docValues fields wrong for field '\" + field + \"' sort direction '\" + sortDir,\n//            tuples.get(idx).getString(\"id\"), selectOrder.get(idx));\n//      }\n//    }\n\n    // Remove below and uncomment above after LUCENE-7548\n    List<String> selectOrder = (\"asc\".equals(sortDir)) ? Arrays.asList(ascOrder) : Arrays.asList(descOrder);\n    List<String> selectOrderBool = (\"asc\".equals(sortDir)) ? Arrays.asList(ascOrderBool) : Arrays.asList(descOrderBool);\n    SolrParams exportParams = mapParams(\"q\", \"*:*\", \"qt\", \"/export\", \"fl\", \"id,\" + field, \"sort\", field + \" \" + sortDir + \",id asc\");\n    try (CloudSolrStream solrStream = new CloudSolrStream(zkHost, COLLECTION, exportParams)) {\n      List<Tuple> tuples = getTuples(solrStream);\n      assertEquals(\"There should be exactly 32 responses returned\", 32, tuples.size());\n      // Since the getTuples method doesn't return the EOF tuple, these two entries should be the same size.\n      assertEquals(\"Tuple count should exactly match sort array size for field \" + field + \" sort order \" + sortDir, selectOrder.size(), tuples.size());\n\n      for (int idx = 0; idx < selectOrder.size(); ++idx) { // Tuples should be in lock step with the orders passed in.\n        assertEquals(\"Order for missing docValues fields wrong for field '\" + field + \"' sort direction '\" + sortDir +\n                \"' RESTORE GETTING selectOrder from select statement after LUCENE-7548\",\n            tuples.get(idx).getString(\"id\"), (field.startsWith(\"b_\") ? selectOrderBool.get(idx) : selectOrder.get(idx)));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a1ef55e1fff7ff44354432770ad8bc19be1fcc75","date":1479266056,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#checkSort(JettySolrRunner,String,String,String[]).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#checkSort(JettySolrRunner,String,String,String[]).mjava","sourceNew":"  // Select and export should be identical sort orders I think.\n  private void checkSort(JettySolrRunner jetty, String field, String sortDir, String[] fields) throws IOException, SolrServerException {\n\n    // Comes back after after LUCENE-7548\n//    SolrQuery query = new SolrQuery(\"*:*\");\n//    query.addSort(field, (\"asc\".equals(sortDir) ? SolrQuery.ORDER.asc : SolrQuery.ORDER.desc));\n//    query.addSort(\"id\", SolrQuery.ORDER.asc);\n//    query.addField(\"id\");\n//    query.addField(field);\n//    query.setRequestHandler(\"standard\");\n//    query.setRows(100);\n//\n//    List<String> selectOrder = new ArrayList<>();\n//\n//    String url = jetty.getBaseUrl() + \"/\" + COLLECTION;\n//\n//    try (HttpSolrClient client = getHttpSolrClient(url)) {\n//      client.setConnectionTimeout(DEFAULT_CONNECTION_TIMEOUT);\n//      QueryResponse rsp = client.query(query);\n//      for (SolrDocument doc : rsp.getResults()) {\n//        selectOrder.add((String) doc.getFieldValue(\"id\"));\n//      }\n//    }\n//    SolrParams exportParams = mapParams(\"q\", \"*:*\", \"qt\", \"/export\", \"fl\", \"id,\" + field, \"sort\", field + \" \" + sortDir + \",id asc\");\n//    try (CloudSolrStream solrStream = new CloudSolrStream(zkHost, COLLECTIONORALIAS, exportParams)) {\n//      List<Tuple> tuples = getTuples(solrStream);\n//      assertEquals(\"There should be exactly 32 responses returned\", 32, tuples.size());\n//      // Since the getTuples method doesn't return the EOF tuple, these two entries should be the same size.\n//      assertEquals(\"Tuple count should exactly match sort array size for field \" + field + \" sort order \" + sortDir, selectOrder.size(), tuples.size());\n//\n//      for (int idx = 0; idx < selectOrder.size(); ++idx) { // Tuples should be in lock step with the orders from select.\n//        assertEquals(\"Order for missing docValues fields wrong for field '\" + field + \"' sort direction '\" + sortDir,\n//            tuples.get(idx).getString(\"id\"), selectOrder.get(idx));\n//      }\n//    }\n\n    // Remove below and uncomment above after LUCENE-7548\n    List<String> selectOrder = (\"asc\".equals(sortDir)) ? Arrays.asList(ascOrder) : Arrays.asList(descOrder);\n    List<String> selectOrderBool = (\"asc\".equals(sortDir)) ? Arrays.asList(ascOrderBool) : Arrays.asList(descOrderBool);\n    SolrParams exportParams = mapParams(\"q\", \"*:*\", \"qt\", \"/export\", \"fl\", \"id,\" + field, \"sort\", field + \" \" + sortDir + \",id asc\");\n    try (CloudSolrStream solrStream = new CloudSolrStream(zkHost, COLLECTIONORALIAS, exportParams)) {\n      List<Tuple> tuples = getTuples(solrStream);\n      assertEquals(\"There should be exactly 32 responses returned\", 32, tuples.size());\n      // Since the getTuples method doesn't return the EOF tuple, these two entries should be the same size.\n      assertEquals(\"Tuple count should exactly match sort array size for field \" + field + \" sort order \" + sortDir, selectOrder.size(), tuples.size());\n\n      for (int idx = 0; idx < selectOrder.size(); ++idx) { // Tuples should be in lock step with the orders passed in.\n        assertEquals(\"Order for missing docValues fields wrong for field '\" + field + \"' sort direction '\" + sortDir +\n                \"' RESTORE GETTING selectOrder from select statement after LUCENE-7548\",\n            tuples.get(idx).getString(\"id\"), (field.startsWith(\"b_\") ? selectOrderBool.get(idx) : selectOrder.get(idx)));\n      }\n    }\n  }\n\n","sourceOld":"  // Select and export should be identical sort orders I think.\n  private void checkSort(JettySolrRunner jetty, String field, String sortDir, String[] fields) throws IOException, SolrServerException {\n\n    // Comes back after after LUCENE-7548\n//    SolrQuery query = new SolrQuery(\"*:*\");\n//    query.addSort(field, (\"asc\".equals(sortDir) ? SolrQuery.ORDER.asc : SolrQuery.ORDER.desc));\n//    query.addSort(\"id\", SolrQuery.ORDER.asc);\n//    query.addField(\"id\");\n//    query.addField(field);\n//    query.setRequestHandler(\"standard\");\n//    query.setRows(100);\n//\n//    List<String> selectOrder = new ArrayList<>();\n//\n//    String url = jetty.getBaseUrl() + \"/\" + COLLECTION;\n//\n//    try (HttpSolrClient client = getHttpSolrClient(url)) {\n//      client.setConnectionTimeout(DEFAULT_CONNECTION_TIMEOUT);\n//      QueryResponse rsp = client.query(query);\n//      for (SolrDocument doc : rsp.getResults()) {\n//        selectOrder.add((String) doc.getFieldValue(\"id\"));\n//      }\n//    }\n//    SolrParams exportParams = mapParams(\"q\", \"*:*\", \"qt\", \"/export\", \"fl\", \"id,\" + field, \"sort\", field + \" \" + sortDir + \",id asc\");\n//    try (CloudSolrStream solrStream = new CloudSolrStream(zkHost, COLLECTION, exportParams)) {\n//      List<Tuple> tuples = getTuples(solrStream);\n//      assertEquals(\"There should be exactly 32 responses returned\", 32, tuples.size());\n//      // Since the getTuples method doesn't return the EOF tuple, these two entries should be the same size.\n//      assertEquals(\"Tuple count should exactly match sort array size for field \" + field + \" sort order \" + sortDir, selectOrder.size(), tuples.size());\n//\n//      for (int idx = 0; idx < selectOrder.size(); ++idx) { // Tuples should be in lock step with the orders from select.\n//        assertEquals(\"Order for missing docValues fields wrong for field '\" + field + \"' sort direction '\" + sortDir,\n//            tuples.get(idx).getString(\"id\"), selectOrder.get(idx));\n//      }\n//    }\n\n    // Remove below and uncomment above after LUCENE-7548\n    List<String> selectOrder = (\"asc\".equals(sortDir)) ? Arrays.asList(ascOrder) : Arrays.asList(descOrder);\n    List<String> selectOrderBool = (\"asc\".equals(sortDir)) ? Arrays.asList(ascOrderBool) : Arrays.asList(descOrderBool);\n    SolrParams exportParams = mapParams(\"q\", \"*:*\", \"qt\", \"/export\", \"fl\", \"id,\" + field, \"sort\", field + \" \" + sortDir + \",id asc\");\n    try (CloudSolrStream solrStream = new CloudSolrStream(zkHost, COLLECTION, exportParams)) {\n      List<Tuple> tuples = getTuples(solrStream);\n      assertEquals(\"There should be exactly 32 responses returned\", 32, tuples.size());\n      // Since the getTuples method doesn't return the EOF tuple, these two entries should be the same size.\n      assertEquals(\"Tuple count should exactly match sort array size for field \" + field + \" sort order \" + sortDir, selectOrder.size(), tuples.size());\n\n      for (int idx = 0; idx < selectOrder.size(); ++idx) { // Tuples should be in lock step with the orders passed in.\n        assertEquals(\"Order for missing docValues fields wrong for field '\" + field + \"' sort direction '\" + sortDir +\n                \"' RESTORE GETTING selectOrder from select statement after LUCENE-7548\",\n            tuples.get(idx).getString(\"id\"), (field.startsWith(\"b_\") ? selectOrderBool.get(idx) : selectOrder.get(idx)));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c405288c4553ffb50ab8ca5adbdde9881bcec4e4","date":1491938682,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#checkSort(JettySolrRunner,String,String,String[]).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#checkSort(JettySolrRunner,String,String,String[]).mjava","sourceNew":"  // Select and export should be identical sort orders I think.\n  private void checkSort(JettySolrRunner jetty, String field, String sortDir, String[] fields) throws IOException, SolrServerException {\n\n    // Comes back after after LUCENE-7548\n//    SolrQuery query = new SolrQuery(\"*:*\");\n//    query.addSort(field, (\"asc\".equals(sortDir) ? SolrQuery.ORDER.asc : SolrQuery.ORDER.desc));\n//    query.addSort(\"id\", SolrQuery.ORDER.asc);\n//    query.addField(\"id\");\n//    query.addField(field);\n//    query.setRequestHandler(\"standard\");\n//    query.setRows(100);\n//\n//    List<String> selectOrder = new ArrayList<>();\n//\n//    String url = jetty.getBaseUrl() + \"/\" + COLLECTION;\n//\n//    try (HttpSolrClient client = getHttpSolrClient(url)) {\n//      client.setConnectionTimeout(DEFAULT_CONNECTION_TIMEOUT);\n//      QueryResponse rsp = client.query(query);\n//      for (SolrDocument doc : rsp.getResults()) {\n//        selectOrder.add((String) doc.getFieldValue(\"id\"));\n//      }\n//    }\n//    SolrParams exportParams = mapParams(\"q\", \"*:*\", \"qt\", \"/export\", \"fl\", \"id,\" + field, \"sort\", field + \" \" + sortDir + \",id asc\");\n//    try (CloudSolrStream solrStream = new CloudSolrStream(zkHost, COLLECTIONORALIAS, exportParams)) {\n//      List<Tuple> tuples = getTuples(solrStream);\n//      assertEquals(\"There should be exactly 32 responses returned\", 32, tuples.size());\n//      // Since the getTuples method doesn't return the EOF tuple, these two entries should be the same size.\n//      assertEquals(\"Tuple count should exactly match sort array size for field \" + field + \" sort order \" + sortDir, selectOrder.size(), tuples.size());\n//\n//      for (int idx = 0; idx < selectOrder.size(); ++idx) { // Tuples should be in lock step with the orders from select.\n//        assertEquals(\"Order for missing docValues fields wrong for field '\" + field + \"' sort direction '\" + sortDir,\n//            tuples.get(idx).getString(\"id\"), selectOrder.get(idx));\n//      }\n//    }\n\n    // Remove below and uncomment above after LUCENE-7548\n    List<String> selectOrder = (\"asc\".equals(sortDir)) ? Arrays.asList(ascOrder) : Arrays.asList(descOrder);\n    List<String> selectOrderBool = (\"asc\".equals(sortDir)) ? Arrays.asList(ascOrderBool) : Arrays.asList(descOrderBool);\n    SolrParams exportParams = mapParams(\"q\", \"*:*\", \"qt\", \"/export\", \"fl\", \"id,\" + field, \"sort\", field + \" \" + sortDir + \",id asc\");\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n    try (CloudSolrStream solrStream = new CloudSolrStream(zkHost, COLLECTIONORALIAS, exportParams)) {\n      solrStream.setStreamContext(streamContext);\n      List<Tuple> tuples = getTuples(solrStream);\n      assertEquals(\"There should be exactly 32 responses returned\", 32, tuples.size());\n      // Since the getTuples method doesn't return the EOF tuple, these two entries should be the same size.\n      assertEquals(\"Tuple count should exactly match sort array size for field \" + field + \" sort order \" + sortDir, selectOrder.size(), tuples.size());\n\n      for (int idx = 0; idx < selectOrder.size(); ++idx) { // Tuples should be in lock step with the orders passed in.\n        assertEquals(\"Order for missing docValues fields wrong for field '\" + field + \"' sort direction '\" + sortDir +\n                \"' RESTORE GETTING selectOrder from select statement after LUCENE-7548\",\n            tuples.get(idx).getString(\"id\"), (field.startsWith(\"b_\") ? selectOrderBool.get(idx) : selectOrder.get(idx)));\n      }\n    } finally {\n      solrClientCache.close();\n    }\n  }\n\n","sourceOld":"  // Select and export should be identical sort orders I think.\n  private void checkSort(JettySolrRunner jetty, String field, String sortDir, String[] fields) throws IOException, SolrServerException {\n\n    // Comes back after after LUCENE-7548\n//    SolrQuery query = new SolrQuery(\"*:*\");\n//    query.addSort(field, (\"asc\".equals(sortDir) ? SolrQuery.ORDER.asc : SolrQuery.ORDER.desc));\n//    query.addSort(\"id\", SolrQuery.ORDER.asc);\n//    query.addField(\"id\");\n//    query.addField(field);\n//    query.setRequestHandler(\"standard\");\n//    query.setRows(100);\n//\n//    List<String> selectOrder = new ArrayList<>();\n//\n//    String url = jetty.getBaseUrl() + \"/\" + COLLECTION;\n//\n//    try (HttpSolrClient client = getHttpSolrClient(url)) {\n//      client.setConnectionTimeout(DEFAULT_CONNECTION_TIMEOUT);\n//      QueryResponse rsp = client.query(query);\n//      for (SolrDocument doc : rsp.getResults()) {\n//        selectOrder.add((String) doc.getFieldValue(\"id\"));\n//      }\n//    }\n//    SolrParams exportParams = mapParams(\"q\", \"*:*\", \"qt\", \"/export\", \"fl\", \"id,\" + field, \"sort\", field + \" \" + sortDir + \",id asc\");\n//    try (CloudSolrStream solrStream = new CloudSolrStream(zkHost, COLLECTIONORALIAS, exportParams)) {\n//      List<Tuple> tuples = getTuples(solrStream);\n//      assertEquals(\"There should be exactly 32 responses returned\", 32, tuples.size());\n//      // Since the getTuples method doesn't return the EOF tuple, these two entries should be the same size.\n//      assertEquals(\"Tuple count should exactly match sort array size for field \" + field + \" sort order \" + sortDir, selectOrder.size(), tuples.size());\n//\n//      for (int idx = 0; idx < selectOrder.size(); ++idx) { // Tuples should be in lock step with the orders from select.\n//        assertEquals(\"Order for missing docValues fields wrong for field '\" + field + \"' sort direction '\" + sortDir,\n//            tuples.get(idx).getString(\"id\"), selectOrder.get(idx));\n//      }\n//    }\n\n    // Remove below and uncomment above after LUCENE-7548\n    List<String> selectOrder = (\"asc\".equals(sortDir)) ? Arrays.asList(ascOrder) : Arrays.asList(descOrder);\n    List<String> selectOrderBool = (\"asc\".equals(sortDir)) ? Arrays.asList(ascOrderBool) : Arrays.asList(descOrderBool);\n    SolrParams exportParams = mapParams(\"q\", \"*:*\", \"qt\", \"/export\", \"fl\", \"id,\" + field, \"sort\", field + \" \" + sortDir + \",id asc\");\n    try (CloudSolrStream solrStream = new CloudSolrStream(zkHost, COLLECTIONORALIAS, exportParams)) {\n      List<Tuple> tuples = getTuples(solrStream);\n      assertEquals(\"There should be exactly 32 responses returned\", 32, tuples.size());\n      // Since the getTuples method doesn't return the EOF tuple, these two entries should be the same size.\n      assertEquals(\"Tuple count should exactly match sort array size for field \" + field + \" sort order \" + sortDir, selectOrder.size(), tuples.size());\n\n      for (int idx = 0; idx < selectOrder.size(); ++idx) { // Tuples should be in lock step with the orders passed in.\n        assertEquals(\"Order for missing docValues fields wrong for field '\" + field + \"' sort direction '\" + sortDir +\n                \"' RESTORE GETTING selectOrder from select statement after LUCENE-7548\",\n            tuples.get(idx).getString(\"id\"), (field.startsWith(\"b_\") ? selectOrderBool.get(idx) : selectOrder.get(idx)));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#checkSort(JettySolrRunner,String,String,String[]).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#checkSort(JettySolrRunner,String,String,String[]).mjava","sourceNew":"  // Select and export should be identical sort orders I think.\n  private void checkSort(JettySolrRunner jetty, String field, String sortDir, String[] fields) throws IOException, SolrServerException {\n\n    // Comes back after after LUCENE-7548\n//    SolrQuery query = new SolrQuery(\"*:*\");\n//    query.addSort(field, (\"asc\".equals(sortDir) ? SolrQuery.ORDER.asc : SolrQuery.ORDER.desc));\n//    query.addSort(\"id\", SolrQuery.ORDER.asc);\n//    query.addField(\"id\");\n//    query.addField(field);\n//    query.setRequestHandler(\"standard\");\n//    query.setRows(100);\n//\n//    List<String> selectOrder = new ArrayList<>();\n//\n//    String url = jetty.getBaseUrl() + \"/\" + COLLECTION;\n//\n//    try (HttpSolrClient client = getHttpSolrClient(url)) {\n//      client.setConnectionTimeout(DEFAULT_CONNECTION_TIMEOUT);\n//      QueryResponse rsp = client.query(query);\n//      for (SolrDocument doc : rsp.getResults()) {\n//        selectOrder.add((String) doc.getFieldValue(\"id\"));\n//      }\n//    }\n//    SolrParams exportParams = mapParams(\"q\", \"*:*\", \"qt\", \"/export\", \"fl\", \"id,\" + field, \"sort\", field + \" \" + sortDir + \",id asc\");\n//    try (CloudSolrStream solrStream = new CloudSolrStream(zkHost, COLLECTIONORALIAS, exportParams)) {\n//      List<Tuple> tuples = getTuples(solrStream);\n//      assertEquals(\"There should be exactly 32 responses returned\", 32, tuples.size());\n//      // Since the getTuples method doesn't return the EOF tuple, these two entries should be the same size.\n//      assertEquals(\"Tuple count should exactly match sort array size for field \" + field + \" sort order \" + sortDir, selectOrder.size(), tuples.size());\n//\n//      for (int idx = 0; idx < selectOrder.size(); ++idx) { // Tuples should be in lock step with the orders from select.\n//        assertEquals(\"Order for missing docValues fields wrong for field '\" + field + \"' sort direction '\" + sortDir,\n//            tuples.get(idx).getString(\"id\"), selectOrder.get(idx));\n//      }\n//    }\n\n    // Remove below and uncomment above after LUCENE-7548\n    List<String> selectOrder = (\"asc\".equals(sortDir)) ? Arrays.asList(ascOrder) : Arrays.asList(descOrder);\n    List<String> selectOrderBool = (\"asc\".equals(sortDir)) ? Arrays.asList(ascOrderBool) : Arrays.asList(descOrderBool);\n    SolrParams exportParams = mapParams(\"q\", \"*:*\", \"qt\", \"/export\", \"fl\", \"id,\" + field, \"sort\", field + \" \" + sortDir + \",id asc\");\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n    try (CloudSolrStream solrStream = new CloudSolrStream(zkHost, COLLECTIONORALIAS, exportParams)) {\n      solrStream.setStreamContext(streamContext);\n      List<Tuple> tuples = getTuples(solrStream);\n      assertEquals(\"There should be exactly 32 responses returned\", 32, tuples.size());\n      // Since the getTuples method doesn't return the EOF tuple, these two entries should be the same size.\n      assertEquals(\"Tuple count should exactly match sort array size for field \" + field + \" sort order \" + sortDir, selectOrder.size(), tuples.size());\n\n      for (int idx = 0; idx < selectOrder.size(); ++idx) { // Tuples should be in lock step with the orders passed in.\n        assertEquals(\"Order for missing docValues fields wrong for field '\" + field + \"' sort direction '\" + sortDir +\n                \"' RESTORE GETTING selectOrder from select statement after LUCENE-7548\",\n            tuples.get(idx).getString(\"id\"), (field.startsWith(\"b_\") ? selectOrderBool.get(idx) : selectOrder.get(idx)));\n      }\n    } finally {\n      solrClientCache.close();\n    }\n  }\n\n","sourceOld":"  // Select and export should be identical sort orders I think.\n  private void checkSort(JettySolrRunner jetty, String field, String sortDir, String[] fields) throws IOException, SolrServerException {\n\n    // Comes back after after LUCENE-7548\n//    SolrQuery query = new SolrQuery(\"*:*\");\n//    query.addSort(field, (\"asc\".equals(sortDir) ? SolrQuery.ORDER.asc : SolrQuery.ORDER.desc));\n//    query.addSort(\"id\", SolrQuery.ORDER.asc);\n//    query.addField(\"id\");\n//    query.addField(field);\n//    query.setRequestHandler(\"standard\");\n//    query.setRows(100);\n//\n//    List<String> selectOrder = new ArrayList<>();\n//\n//    String url = jetty.getBaseUrl() + \"/\" + COLLECTION;\n//\n//    try (HttpSolrClient client = getHttpSolrClient(url)) {\n//      client.setConnectionTimeout(DEFAULT_CONNECTION_TIMEOUT);\n//      QueryResponse rsp = client.query(query);\n//      for (SolrDocument doc : rsp.getResults()) {\n//        selectOrder.add((String) doc.getFieldValue(\"id\"));\n//      }\n//    }\n//    SolrParams exportParams = mapParams(\"q\", \"*:*\", \"qt\", \"/export\", \"fl\", \"id,\" + field, \"sort\", field + \" \" + sortDir + \",id asc\");\n//    try (CloudSolrStream solrStream = new CloudSolrStream(zkHost, COLLECTIONORALIAS, exportParams)) {\n//      List<Tuple> tuples = getTuples(solrStream);\n//      assertEquals(\"There should be exactly 32 responses returned\", 32, tuples.size());\n//      // Since the getTuples method doesn't return the EOF tuple, these two entries should be the same size.\n//      assertEquals(\"Tuple count should exactly match sort array size for field \" + field + \" sort order \" + sortDir, selectOrder.size(), tuples.size());\n//\n//      for (int idx = 0; idx < selectOrder.size(); ++idx) { // Tuples should be in lock step with the orders from select.\n//        assertEquals(\"Order for missing docValues fields wrong for field '\" + field + \"' sort direction '\" + sortDir,\n//            tuples.get(idx).getString(\"id\"), selectOrder.get(idx));\n//      }\n//    }\n\n    // Remove below and uncomment above after LUCENE-7548\n    List<String> selectOrder = (\"asc\".equals(sortDir)) ? Arrays.asList(ascOrder) : Arrays.asList(descOrder);\n    List<String> selectOrderBool = (\"asc\".equals(sortDir)) ? Arrays.asList(ascOrderBool) : Arrays.asList(descOrderBool);\n    SolrParams exportParams = mapParams(\"q\", \"*:*\", \"qt\", \"/export\", \"fl\", \"id,\" + field, \"sort\", field + \" \" + sortDir + \",id asc\");\n    try (CloudSolrStream solrStream = new CloudSolrStream(zkHost, COLLECTIONORALIAS, exportParams)) {\n      List<Tuple> tuples = getTuples(solrStream);\n      assertEquals(\"There should be exactly 32 responses returned\", 32, tuples.size());\n      // Since the getTuples method doesn't return the EOF tuple, these two entries should be the same size.\n      assertEquals(\"Tuple count should exactly match sort array size for field \" + field + \" sort order \" + sortDir, selectOrder.size(), tuples.size());\n\n      for (int idx = 0; idx < selectOrder.size(); ++idx) { // Tuples should be in lock step with the orders passed in.\n        assertEquals(\"Order for missing docValues fields wrong for field '\" + field + \"' sort direction '\" + sortDir +\n                \"' RESTORE GETTING selectOrder from select statement after LUCENE-7548\",\n            tuples.get(idx).getString(\"id\"), (field.startsWith(\"b_\") ? selectOrderBool.get(idx) : selectOrder.get(idx)));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["8c969f15cd04d31e520319c619a445ae21f02d72"],"c8243e301531f97de264740d6afa71de6781dd64":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f8c0e05ed2dea5beb7c0246a2a6e68f28595357b"],"f8c0e05ed2dea5beb7c0246a2a6e68f28595357b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a1ef55e1fff7ff44354432770ad8bc19be1fcc75":["c8243e301531f97de264740d6afa71de6781dd64","8c969f15cd04d31e520319c619a445ae21f02d72"],"c405288c4553ffb50ab8ca5adbdde9881bcec4e4":["8c969f15cd04d31e520319c619a445ae21f02d72"],"8c969f15cd04d31e520319c619a445ae21f02d72":["f8c0e05ed2dea5beb7c0246a2a6e68f28595357b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c405288c4553ffb50ab8ca5adbdde9881bcec4e4"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"c8243e301531f97de264740d6afa71de6781dd64":["a1ef55e1fff7ff44354432770ad8bc19be1fcc75"],"f8c0e05ed2dea5beb7c0246a2a6e68f28595357b":["c8243e301531f97de264740d6afa71de6781dd64","8c969f15cd04d31e520319c619a445ae21f02d72"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c8243e301531f97de264740d6afa71de6781dd64","f8c0e05ed2dea5beb7c0246a2a6e68f28595357b"],"a1ef55e1fff7ff44354432770ad8bc19be1fcc75":[],"c405288c4553ffb50ab8ca5adbdde9881bcec4e4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8c969f15cd04d31e520319c619a445ae21f02d72":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","a1ef55e1fff7ff44354432770ad8bc19be1fcc75","c405288c4553ffb50ab8ca5adbdde9881bcec4e4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","a1ef55e1fff7ff44354432770ad8bc19be1fcc75","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}