{"path":"lucene/core/src/java/org/apache/lucene/util/SloppyMath#haversinKilometers(double,double,double,double).mjava","commits":[{"id":"ec60431d008a694828dacb4bc3cda775b6c44a9f","date":1458570843,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/SloppyMath#haversinKilometers(double,double,double,double).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/SloppyMath#haversin(double,double,double,double).mjava","sourceNew":"  /**\n   * Returns the Haversine distance in kilometers between two points\n   * specified in decimal degrees (latitude/longitude).  This works correctly\n   * even if the dateline is between the two points.\n   *\n   * @param lat1 Latitude of the first point.\n   * @param lon1 Longitude of the first point.\n   * @param lat2 Latitude of the second point.\n   * @param lon2 Longitude of the second point.\n   * @return distance in kilometers.\n   * @deprecated Use {@link #haversinMeters(double, double, double, double) instead}\n   */\n  @Deprecated\n  public static double haversinKilometers(double lat1, double lon1, double lat2, double lon2) {\n    double h = haversinSortKey(lat1, lon1, lat2, lon2);\n    return TO_KILOMETERS * 2 * asin(Math.min(1, Math.sqrt(h * 0.5)));\n  }\n\n","sourceOld":"  /**\n   * Returns the Haversine distance in kilometers between two points\n   * specified in decimal degrees (latitude/longitude).  This works correctly\n   * even if the dateline is between the two points.\n   *\n   * @param lat1 Latitude of the first point.\n   * @param lon1 Longitude of the first point.\n   * @param lat2 Latitude of the second point.\n   * @param lon2 Longitude of the second point.\n   * @return distance in kilometers.\n   */\n  public static double haversin(double lat1, double lon1, double lat2, double lon2) {\n    double x1 = lat1 * TO_RADIANS;\n    double x2 = lat2 * TO_RADIANS;\n    double h1 = 1 - cos(x1 - x2);\n    double h2 = 1 - cos((lon1 - lon2) * TO_RADIANS);\n    double h = (h1 + cos(x1) * cos(x2) * h2) / 2;\n\n    double avgLat = (x1 + x2) / 2d;\n    double diameter = earthDiameter(avgLat);\n\n    return diameter * asin(Math.min(1, Math.sqrt(h)));\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ec60431d008a694828dacb4bc3cda775b6c44a9f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ec60431d008a694828dacb4bc3cda775b6c44a9f"]},"commit2Childs":{"ec60431d008a694828dacb4bc3cda775b6c44a9f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ec60431d008a694828dacb4bc3cda775b6c44a9f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}