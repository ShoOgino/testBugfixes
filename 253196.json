{"path":"modules/spatial-lucene/src/main/java/org/apache/lucene/spatial/base/context/ParseUtils#parseLatitudeLongitude(double[],String).mjava","commits":[{"id":"b17c5c53627893d93f9261826cc6d9c447c5ee3a","date":1329777932,"type":0,"author":"David Wayne Smiley","isMerge":false,"pathNew":"modules/spatial-lucene/src/main/java/org/apache/lucene/spatial/base/context/ParseUtils#parseLatitudeLongitude(double[],String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * extract (by calling {@link #parsePoint(String[], String, int)} and validate the latitude and longitude contained\n   * in the String by making sure the latitude is between 90 & -90 and longitude is between -180 and 180.\n   * <p/>\n   * The latitude is assumed to be the first part of the string and the longitude the second part.\n   *\n   * @param latLon    A preallocated array to hold the result\n   * @param latLonStr The string to parse.  Latitude is the first value, longitude is the second.\n   * @return The lat long\n   * @throws org.apache.lucene.spatial.base.exception.InvalidShapeException if there was an error parsing\n   */\n  public static final double[] parseLatitudeLongitude(double[] latLon, String latLonStr) throws InvalidShapeException {\n    if (latLon == null) {\n      latLon = new double[2];\n    }\n    double[] toks = parsePointDouble(null, latLonStr, 2);\n\n    if (toks[0] < -90.0 || toks[0] > 90.0) {\n      throw new InvalidShapeException(\n              \"Invalid latitude: latitudes are range -90 to 90: provided lat: [\"\n                      + toks[0] + \"]\");\n    }\n    latLon[0] = toks[0];\n\n\n    if (toks[1] < -180.0 || toks[1] > 180.0) {\n\n      throw new InvalidShapeException(\n              \"Invalid longitude: longitudes are range -180 to 180: provided lon: [\"\n                      + toks[1] + \"]\");\n    }\n    latLon[1] = toks[1];\n\n    return latLon;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ef186f4ac90644cd4e8df6b66acb56a52e5ca602","date":1329778037,"type":5,"author":"David Wayne Smiley","isMerge":false,"pathNew":"modules/spatial/src/main/java/org/apache/lucene/spatial/base/context/ParseUtils#parseLatitudeLongitude(double[],String).mjava","pathOld":"modules/spatial-lucene/src/main/java/org/apache/lucene/spatial/base/context/ParseUtils#parseLatitudeLongitude(double[],String).mjava","sourceNew":"  /**\n   * extract (by calling {@link #parsePoint(String[], String, int)} and validate the latitude and longitude contained\n   * in the String by making sure the latitude is between 90 & -90 and longitude is between -180 and 180.\n   * <p/>\n   * The latitude is assumed to be the first part of the string and the longitude the second part.\n   *\n   * @param latLon    A preallocated array to hold the result\n   * @param latLonStr The string to parse.  Latitude is the first value, longitude is the second.\n   * @return The lat long\n   * @throws org.apache.lucene.spatial.base.exception.InvalidShapeException if there was an error parsing\n   */\n  public static final double[] parseLatitudeLongitude(double[] latLon, String latLonStr) throws InvalidShapeException {\n    if (latLon == null) {\n      latLon = new double[2];\n    }\n    double[] toks = parsePointDouble(null, latLonStr, 2);\n\n    if (toks[0] < -90.0 || toks[0] > 90.0) {\n      throw new InvalidShapeException(\n              \"Invalid latitude: latitudes are range -90 to 90: provided lat: [\"\n                      + toks[0] + \"]\");\n    }\n    latLon[0] = toks[0];\n\n\n    if (toks[1] < -180.0 || toks[1] > 180.0) {\n\n      throw new InvalidShapeException(\n              \"Invalid longitude: longitudes are range -180 to 180: provided lon: [\"\n                      + toks[1] + \"]\");\n    }\n    latLon[1] = toks[1];\n\n    return latLon;\n  }\n\n","sourceOld":"  /**\n   * extract (by calling {@link #parsePoint(String[], String, int)} and validate the latitude and longitude contained\n   * in the String by making sure the latitude is between 90 & -90 and longitude is between -180 and 180.\n   * <p/>\n   * The latitude is assumed to be the first part of the string and the longitude the second part.\n   *\n   * @param latLon    A preallocated array to hold the result\n   * @param latLonStr The string to parse.  Latitude is the first value, longitude is the second.\n   * @return The lat long\n   * @throws org.apache.lucene.spatial.base.exception.InvalidShapeException if there was an error parsing\n   */\n  public static final double[] parseLatitudeLongitude(double[] latLon, String latLonStr) throws InvalidShapeException {\n    if (latLon == null) {\n      latLon = new double[2];\n    }\n    double[] toks = parsePointDouble(null, latLonStr, 2);\n\n    if (toks[0] < -90.0 || toks[0] > 90.0) {\n      throw new InvalidShapeException(\n              \"Invalid latitude: latitudes are range -90 to 90: provided lat: [\"\n                      + toks[0] + \"]\");\n    }\n    latLon[0] = toks[0];\n\n\n    if (toks[1] < -180.0 || toks[1] > 180.0) {\n\n      throw new InvalidShapeException(\n              \"Invalid longitude: longitudes are range -180 to 180: provided lon: [\"\n                      + toks[1] + \"]\");\n    }\n    latLon[1] = toks[1];\n\n    return latLon;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ef186f4ac90644cd4e8df6b66acb56a52e5ca602":["b17c5c53627893d93f9261826cc6d9c447c5ee3a"],"b17c5c53627893d93f9261826cc6d9c447c5ee3a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b17c5c53627893d93f9261826cc6d9c447c5ee3a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ef186f4ac90644cd4e8df6b66acb56a52e5ca602":[],"b17c5c53627893d93f9261826cc6d9c447c5ee3a":["ef186f4ac90644cd4e8df6b66acb56a52e5ca602"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ef186f4ac90644cd4e8df6b66acb56a52e5ca602","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}