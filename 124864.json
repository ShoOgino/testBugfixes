{"path":"src/java/org/apache/solr/update/DocumentBuilder#addSingleField(SchemaField,String,float).mjava","commits":[{"id":"0c3e228bf650e96f3002a8fb73dd0c13d55af077","date":1138253849,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/update/DocumentBuilder#addSingleField(SchemaField,String,float).mjava","pathOld":"/dev/null","sourceNew":"  protected void addSingleField(SchemaField sfield, String val, float boost) {\n    //System.out.println(\"###################ADDING FIELD \"+sfield+\"=\"+val);\n\n    // we don't check for a null val ourselves because a solr.FieldType\n    // might actually want to map it to something.  If createField()\n    // returns null, then we don't store the field.\n    Field field = sfield.createField(val, boost);\n    if (field != null) {\n      if (!sfield.multiValued()) {\n        String oldValue = map.put(sfield.getName(), val);\n        if (oldValue != null) {\n          throw new SolrException(400,\"ERROR: multiple values encountered for non multiValued field \" + sfield.getName()\n                  + \": first='\" + oldValue + \"' second='\" + val + \"'\");\n        }\n      }\n      // field.setBoost(boost);\n      doc.add(field);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4abe53aaee39b5f2f41dd9a0b905c1ddf880996","date":1180477701,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/update/DocumentBuilder#addSingleField(SchemaField,String,float).mjava","pathOld":"src/java/org/apache/solr/update/DocumentBuilder#addSingleField(SchemaField,String,float).mjava","sourceNew":"  protected void addSingleField(SchemaField sfield, String val, float boost) {\n    //System.out.println(\"###################ADDING FIELD \"+sfield+\"=\"+val);\n\n    // we don't check for a null val ourselves because a solr.FieldType\n    // might actually want to map it to something.  If createField()\n    // returns null, then we don't store the field.\n    Field field = sfield.createField(val, boost);\n    if (field != null) {\n      if (!sfield.multiValued()) {\n        String oldValue = map.put(sfield.getName(), val);\n        if (oldValue != null) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"ERROR: multiple values encountered for non multiValued field \" + sfield.getName()\n                  + \": first='\" + oldValue + \"' second='\" + val + \"'\");\n        }\n      }\n      // field.setBoost(boost);\n      doc.add(field);\n    }\n  }\n\n","sourceOld":"  protected void addSingleField(SchemaField sfield, String val, float boost) {\n    //System.out.println(\"###################ADDING FIELD \"+sfield+\"=\"+val);\n\n    // we don't check for a null val ourselves because a solr.FieldType\n    // might actually want to map it to something.  If createField()\n    // returns null, then we don't store the field.\n    Field field = sfield.createField(val, boost);\n    if (field != null) {\n      if (!sfield.multiValued()) {\n        String oldValue = map.put(sfield.getName(), val);\n        if (oldValue != null) {\n          throw new SolrException(400,\"ERROR: multiple values encountered for non multiValued field \" + sfield.getName()\n                  + \": first='\" + oldValue + \"' second='\" + val + \"'\");\n        }\n      }\n      // field.setBoost(boost);\n      doc.add(field);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0902cc3e4d3f7e4fe37a1474010f51523cafbbef","date":1181874468,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/update/DocumentBuilder#addSingleField(SchemaField,String,float).mjava","pathOld":"src/java/org/apache/solr/update/DocumentBuilder#addSingleField(SchemaField,String,float).mjava","sourceNew":"  protected void addSingleField(SchemaField sfield, String val, float boost) {\n    //System.out.println(\"###################ADDING FIELD \"+sfield+\"=\"+val);\n\n    // we don't check for a null val ourselves because a solr.FieldType\n    // might actually want to map it to something.  If createField()\n    // returns null, then we don't store the field.\n    Field field = sfield.createField(val, boost);\n    if (field != null) {\n      if (!sfield.multiValued()) {\n        String oldValue = map.put(sfield.getName(), val);\n        if (oldValue != null) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"ERROR: multiple values encountered for non multiValued field \" + sfield.getName()\n                  + \": first='\" + oldValue + \"' second='\" + val + \"'\");\n        }\n      }\n      \n      if( doc == null ) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n            \"must call startDoc() before adding fields!\" );\n      }\n       \n      // field.setBoost(boost);\n      doc.add(field);\n    }\n  }\n\n","sourceOld":"  protected void addSingleField(SchemaField sfield, String val, float boost) {\n    //System.out.println(\"###################ADDING FIELD \"+sfield+\"=\"+val);\n\n    // we don't check for a null val ourselves because a solr.FieldType\n    // might actually want to map it to something.  If createField()\n    // returns null, then we don't store the field.\n    Field field = sfield.createField(val, boost);\n    if (field != null) {\n      if (!sfield.multiValued()) {\n        String oldValue = map.put(sfield.getName(), val);\n        if (oldValue != null) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"ERROR: multiple values encountered for non multiValued field \" + sfield.getName()\n                  + \": first='\" + oldValue + \"' second='\" + val + \"'\");\n        }\n      }\n      // field.setBoost(boost);\n      doc.add(field);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0cd1b5cc13e2ad6adfe55db8cf8a0d81077563f4","date":1182923522,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/update/DocumentBuilder#addSingleField(SchemaField,String,float).mjava","pathOld":"src/java/org/apache/solr/update/DocumentBuilder#addSingleField(SchemaField,String,float).mjava","sourceNew":"  protected void addSingleField(SchemaField sfield, String val, float boost) {\n    //System.out.println(\"###################ADDING FIELD \"+sfield+\"=\"+val);\n\n    // we don't check for a null val ourselves because a solr.FieldType\n    // might actually want to map it to something.  If createField()\n    // returns null, then we don't store the field.\n    Field field = sfield.createField(val, boost);\n    if (field != null) {\n      if (!sfield.multiValued()) {\n        String oldValue = map.put(sfield.getName(), val);\n        if (oldValue != null) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"ERROR: multiple values encountered for non multiValued field \" + sfield.getName()\n                  + \": first='\" + oldValue + \"' second='\" + val + \"'\");\n        }\n      }\n       \n      // field.setBoost(boost);\n      doc.add(field);\n    }\n  }\n\n","sourceOld":"  protected void addSingleField(SchemaField sfield, String val, float boost) {\n    //System.out.println(\"###################ADDING FIELD \"+sfield+\"=\"+val);\n\n    // we don't check for a null val ourselves because a solr.FieldType\n    // might actually want to map it to something.  If createField()\n    // returns null, then we don't store the field.\n    Field field = sfield.createField(val, boost);\n    if (field != null) {\n      if (!sfield.multiValued()) {\n        String oldValue = map.put(sfield.getName(), val);\n        if (oldValue != null) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"ERROR: multiple values encountered for non multiValued field \" + sfield.getName()\n                  + \": first='\" + oldValue + \"' second='\" + val + \"'\");\n        }\n      }\n      \n      if( doc == null ) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n            \"must call startDoc() before adding fields!\" );\n      }\n       \n      // field.setBoost(boost);\n      doc.add(field);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"abec2fd822be07fc74ef5ba3609b9c5625a87d6d","date":1261659802,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/solr/update/DocumentBuilder#addSingleField(SchemaField,String,float).mjava","pathOld":"src/java/org/apache/solr/update/DocumentBuilder#addSingleField(SchemaField,String,float).mjava","sourceNew":"  protected void addSingleField(SchemaField sfield, String val, float boost) {\n    //System.out.println(\"###################ADDING FIELD \"+sfield+\"=\"+val);\n\n    // we don't check for a null val ourselves because a solr.FieldType\n    // might actually want to map it to something.  If createField()\n    // returns null, then we don't store the field.\n    if (sfield.isPolyField()) {\n      Fieldable[] fields = sfield.createFields(val, boost);\n      if (fields != null && fields.length > 0) {\n        if (!sfield.multiValued()) {\n          String oldValue = map.put(sfield.getName(), val);\n          if (oldValue != null) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"ERROR: multiple values encountered for non multiValued field \" + sfield.getName()\n                    + \": first='\" + oldValue + \"' second='\" + val + \"'\");\n          }\n        }\n        // Add each field\n        for (Fieldable field : fields) {\n          doc.add(field);\n        }\n      }\n    } else {\n      Field field = sfield.createField(val, boost);\n      if (field != null) {\n        if (!sfield.multiValued()) {\n          String oldValue = map.put(sfield.getName(), val);\n          if (oldValue != null) {\n            throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"ERROR: multiple values encountered for non multiValued field \" + sfield.getName()\n                    + \": first='\" + oldValue + \"' second='\" + val + \"'\");\n          }\n        }\n      }\n      doc.add(field);\n    }\n\n  }\n\n","sourceOld":"  protected void addSingleField(SchemaField sfield, String val, float boost) {\n    //System.out.println(\"###################ADDING FIELD \"+sfield+\"=\"+val);\n\n    // we don't check for a null val ourselves because a solr.FieldType\n    // might actually want to map it to something.  If createField()\n    // returns null, then we don't store the field.\n    Field field = sfield.createField(val, boost);\n    if (field != null) {\n      if (!sfield.multiValued()) {\n        String oldValue = map.put(sfield.getName(), val);\n        if (oldValue != null) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"ERROR: multiple values encountered for non multiValued field \" + sfield.getName()\n                  + \": first='\" + oldValue + \"' second='\" + val + \"'\");\n        }\n      }\n       \n      // field.setBoost(boost);\n      doc.add(field);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c4af8237bfcb686fe618e6a3d3f451382f3395c","date":1261692845,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/update/DocumentBuilder#addSingleField(SchemaField,String,float).mjava","pathOld":"src/java/org/apache/solr/update/DocumentBuilder#addSingleField(SchemaField,String,float).mjava","sourceNew":"  protected void addSingleField(SchemaField sfield, String val, float boost) {\n    //System.out.println(\"###################ADDING FIELD \"+sfield+\"=\"+val);\n\n    // we don't check for a null val ourselves because a solr.FieldType\n    // might actually want to map it to something.  If createField()\n    // returns null, then we don't store the field.\n    if (sfield.isPolyField()) {\n      Fieldable[] fields = sfield.createFields(val, boost);\n      if (fields.length > 0) {\n        if (!sfield.multiValued()) {\n          String oldValue = map.put(sfield.getName(), val);\n          if (oldValue != null) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"ERROR: multiple values encountered for non multiValued field \" + sfield.getName()\n                    + \": first='\" + oldValue + \"' second='\" + val + \"'\");\n          }\n        }\n        // Add each field\n        for (Fieldable field : fields) {\n          doc.add(field);\n        }\n      }\n    } else {\n      Field field = sfield.createField(val, boost);\n      if (field != null) {\n        if (!sfield.multiValued()) {\n          String oldValue = map.put(sfield.getName(), val);\n          if (oldValue != null) {\n            throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"ERROR: multiple values encountered for non multiValued field \" + sfield.getName()\n                    + \": first='\" + oldValue + \"' second='\" + val + \"'\");\n          }\n        }\n      }\n      doc.add(field);\n    }\n\n  }\n\n","sourceOld":"  protected void addSingleField(SchemaField sfield, String val, float boost) {\n    //System.out.println(\"###################ADDING FIELD \"+sfield+\"=\"+val);\n\n    // we don't check for a null val ourselves because a solr.FieldType\n    // might actually want to map it to something.  If createField()\n    // returns null, then we don't store the field.\n    if (sfield.isPolyField()) {\n      Fieldable[] fields = sfield.createFields(val, boost);\n      if (fields != null && fields.length > 0) {\n        if (!sfield.multiValued()) {\n          String oldValue = map.put(sfield.getName(), val);\n          if (oldValue != null) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"ERROR: multiple values encountered for non multiValued field \" + sfield.getName()\n                    + \": first='\" + oldValue + \"' second='\" + val + \"'\");\n          }\n        }\n        // Add each field\n        for (Fieldable field : fields) {\n          doc.add(field);\n        }\n      }\n    } else {\n      Field field = sfield.createField(val, boost);\n      if (field != null) {\n        if (!sfield.multiValued()) {\n          String oldValue = map.put(sfield.getName(), val);\n          if (oldValue != null) {\n            throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"ERROR: multiple values encountered for non multiValued field \" + sfield.getName()\n                    + \": first='\" + oldValue + \"' second='\" + val + \"'\");\n          }\n        }\n      }\n      doc.add(field);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/update/DocumentBuilder#addSingleField(SchemaField,String,float).mjava","pathOld":"src/java/org/apache/solr/update/DocumentBuilder#addSingleField(SchemaField,String,float).mjava","sourceNew":"  protected void addSingleField(SchemaField sfield, String val, float boost) {\n    //System.out.println(\"###################ADDING FIELD \"+sfield+\"=\"+val);\n\n    // we don't check for a null val ourselves because a solr.FieldType\n    // might actually want to map it to something.  If createField()\n    // returns null, then we don't store the field.\n    if (sfield.isPolyField()) {\n      Fieldable[] fields = sfield.createFields(val, boost);\n      if (fields.length > 0) {\n        if (!sfield.multiValued()) {\n          String oldValue = map.put(sfield.getName(), val);\n          if (oldValue != null) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"ERROR: multiple values encountered for non multiValued field \" + sfield.getName()\n                    + \": first='\" + oldValue + \"' second='\" + val + \"'\");\n          }\n        }\n        // Add each field\n        for (Fieldable field : fields) {\n          doc.add(field);\n        }\n      }\n    } else {\n      Field field = sfield.createField(val, boost);\n      if (field != null) {\n        if (!sfield.multiValued()) {\n          String oldValue = map.put(sfield.getName(), val);\n          if (oldValue != null) {\n            throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"ERROR: multiple values encountered for non multiValued field \" + sfield.getName()\n                    + \": first='\" + oldValue + \"' second='\" + val + \"'\");\n          }\n        }\n      }\n      doc.add(field);\n    }\n\n  }\n\n","sourceOld":"  protected void addSingleField(SchemaField sfield, String val, float boost) {\n    //System.out.println(\"###################ADDING FIELD \"+sfield+\"=\"+val);\n\n    // we don't check for a null val ourselves because a solr.FieldType\n    // might actually want to map it to something.  If createField()\n    // returns null, then we don't store the field.\n    if (sfield.isPolyField()) {\n      Fieldable[] fields = sfield.createFields(val, boost);\n      if (fields.length > 0) {\n        if (!sfield.multiValued()) {\n          String oldValue = map.put(sfield.getName(), val);\n          if (oldValue != null) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"ERROR: multiple values encountered for non multiValued field \" + sfield.getName()\n                    + \": first='\" + oldValue + \"' second='\" + val + \"'\");\n          }\n        }\n        // Add each field\n        for (Fieldable field : fields) {\n          doc.add(field);\n        }\n      }\n    } else {\n      Field field = sfield.createField(val, boost);\n      if (field != null) {\n        if (!sfield.multiValued()) {\n          String oldValue = map.put(sfield.getName(), val);\n          if (oldValue != null) {\n            throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"ERROR: multiple values encountered for non multiValued field \" + sfield.getName()\n                    + \": first='\" + oldValue + \"' second='\" + val + \"'\");\n          }\n        }\n      }\n      doc.add(field);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"abec2fd822be07fc74ef5ba3609b9c5625a87d6d":["0cd1b5cc13e2ad6adfe55db8cf8a0d81077563f4"],"0c3e228bf650e96f3002a8fb73dd0c13d55af077":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"5c4af8237bfcb686fe618e6a3d3f451382f3395c":["abec2fd822be07fc74ef5ba3609b9c5625a87d6d"],"0902cc3e4d3f7e4fe37a1474010f51523cafbbef":["c4abe53aaee39b5f2f41dd9a0b905c1ddf880996"],"ad94625fb8d088209f46650c8097196fec67f00c":["5c4af8237bfcb686fe618e6a3d3f451382f3395c"],"0cd1b5cc13e2ad6adfe55db8cf8a0d81077563f4":["0902cc3e4d3f7e4fe37a1474010f51523cafbbef"],"c4abe53aaee39b5f2f41dd9a0b905c1ddf880996":["0c3e228bf650e96f3002a8fb73dd0c13d55af077"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"abec2fd822be07fc74ef5ba3609b9c5625a87d6d":["5c4af8237bfcb686fe618e6a3d3f451382f3395c"],"0c3e228bf650e96f3002a8fb73dd0c13d55af077":["c4abe53aaee39b5f2f41dd9a0b905c1ddf880996"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["0c3e228bf650e96f3002a8fb73dd0c13d55af077"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5c4af8237bfcb686fe618e6a3d3f451382f3395c":["ad94625fb8d088209f46650c8097196fec67f00c"],"0902cc3e4d3f7e4fe37a1474010f51523cafbbef":["0cd1b5cc13e2ad6adfe55db8cf8a0d81077563f4"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"0cd1b5cc13e2ad6adfe55db8cf8a0d81077563f4":["abec2fd822be07fc74ef5ba3609b9c5625a87d6d"],"c4abe53aaee39b5f2f41dd9a0b905c1ddf880996":["0902cc3e4d3f7e4fe37a1474010f51523cafbbef"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}