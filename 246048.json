{"path":"solr/core/src/java/org/apache/solr/util/stats/MetricUtils#convertMetric(String,Metric,Predicate[CharSequence],boolean,boolean,boolean,boolean,String,BiConsumer[String,Object]).mjava","commits":[{"id":"233211c3dbff6f367588be5bbb4ac77f72eae193","date":1602085975,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/stats/MetricUtils#convertMetric(String,Metric,Predicate[CharSequence],boolean,boolean,boolean,boolean,String,BiConsumer[String,Object]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Convert a single instance of metric into a map or flattened object.\n   * @param n metric name\n   * @param metric metric instance\n   * @param propertyFilter limit what properties of a metric are returned\n   * @param skipHistograms discard any {@link Histogram}-s and histogram parts of {@link Timer}-s.\n   * @param skipAggregateValues discard internal values of {@link AggregateMetric}-s.\n   * @param compact use compact representation for counters and gauges.\n   * @param simple use simplified representation for complex metrics - instead of a (name, map)\n   *             only the selected (name \".\" key, value) pairs will be produced.\n   * @param consumer consumer that accepts produced objects\n   */\n  public static void convertMetric(String n, Metric metric, Predicate<CharSequence> propertyFilter, boolean skipHistograms, boolean skipAggregateValues,\n                              boolean compact, boolean simple, String separator, BiConsumer<String, Object> consumer) {\n    if (metric instanceof Counter) {\n      Counter counter = (Counter) metric;\n      convertCounter(n, counter, propertyFilter, compact, consumer);\n    } else if (metric instanceof Gauge) {\n      @SuppressWarnings({\"rawtypes\"})\n      Gauge gauge = (Gauge) metric;\n      // unwrap if needed\n      if (gauge instanceof SolrMetricManager.GaugeWrapper) {\n        gauge = ((SolrMetricManager.GaugeWrapper) gauge).getGauge();\n      }\n      try {\n        if (gauge instanceof MapWriter) {\n          convertMapWriter(n, (MapWriter) gauge, propertyFilter, simple, compact, separator, consumer);\n        } else {\n          convertGauge(n, gauge, propertyFilter, simple, compact, separator, consumer);\n        }\n      } catch (InternalError ie) {\n        if (n.startsWith(\"memory.\") && ie.getMessage().contains(\"Memory Pool not found\")) {\n          log.warn(\"Error converting gauge '{}', possible JDK bug: SOLR-10362\", n, ie);\n          consumer.accept(n, null);\n        } else {\n          throw ie;\n        }\n      }\n    } else if (metric instanceof Meter) {\n      Meter meter = (Meter) metric;\n      convertMeter(n, meter, propertyFilter, simple, separator, consumer);\n    } else if (metric instanceof Timer) {\n      Timer timer = (Timer) metric;\n      convertTimer(n, timer, propertyFilter, skipHistograms, simple, separator, consumer);\n    } else if (metric instanceof Histogram) {\n      if (!skipHistograms) {\n        Histogram histogram = (Histogram) metric;\n        convertHistogram(n, histogram, propertyFilter, simple, separator, consumer);\n      }\n    } else if (metric instanceof AggregateMetric) {\n      convertAggregateMetric(n, (AggregateMetric)metric, propertyFilter, skipAggregateValues, simple, separator, consumer);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"233211c3dbff6f367588be5bbb4ac77f72eae193":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["233211c3dbff6f367588be5bbb4ac77f72eae193"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["233211c3dbff6f367588be5bbb4ac77f72eae193"],"233211c3dbff6f367588be5bbb4ac77f72eae193":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}