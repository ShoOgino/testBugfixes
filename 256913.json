{"path":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.CollapsingFieldValueCollector#CollapsingFieldValueCollector(int,int,SortedDocValues,int,String,boolean,boolean,FieldType,IntOpenHashSet,FunctionQuery).mjava","commits":[{"id":"51e87f816b84771636e67fc67039925030ebe671","date":1388500548,"type":1,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.CollapsingFieldValueCollector#CollapsingFieldValueCollector(int,int,SortedDocValues,int,String,boolean,boolean,FieldType,IntOpenHashSet,FunctionQuery).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.CollapsingFieldValueCollector#CollapsingFieldValueCollector(int,int,SortedDocValues,int,String,boolean,boolean,FieldType,IntOpenHashSet).mjava","sourceNew":"    public CollapsingFieldValueCollector(int maxDoc,\n                                         int segments,\n                                         SortedDocValues values,\n                                         int nullPolicy,\n                                         String field,\n                                         boolean max,\n                                         boolean needsScores,\n                                         FieldType fieldType,\n                                         IntOpenHashSet boostDocs,\n                                         FunctionQuery funcQuery) throws IOException{\n\n      this.maxDoc = maxDoc;\n      this.contexts = new AtomicReaderContext[segments];\n      this.values = values;\n      int valueCount = values.getValueCount();\n      this.nullPolicy = nullPolicy;\n      this.needsScores = needsScores;\n      this.boostDocs = boostDocs;\n      if(funcQuery != null) {\n        this.fieldValueCollapse =  new ValueSourceCollapse(maxDoc, field, nullPolicy, new int[valueCount], max, this.needsScores, boostDocs, funcQuery);\n      } else {\n        if(fieldType instanceof TrieIntField) {\n          this.fieldValueCollapse = new IntValueCollapse(maxDoc, field, nullPolicy, new int[valueCount], max, this.needsScores, boostDocs);\n        } else if(fieldType instanceof TrieLongField) {\n          this.fieldValueCollapse =  new LongValueCollapse(maxDoc, field, nullPolicy, new int[valueCount], max, this.needsScores, boostDocs);\n        } else if(fieldType instanceof TrieFloatField) {\n          this.fieldValueCollapse =  new FloatValueCollapse(maxDoc, field, nullPolicy, new int[valueCount], max, this.needsScores, boostDocs);\n        } else {\n          throw new IOException(\"min/max must be either TrieInt, TrieLong or TrieFloat.\");\n        }\n      }\n    }\n\n","sourceOld":"    public CollapsingFieldValueCollector(int maxDoc,\n                                         int segments,\n                                         SortedDocValues values,\n                                         int nullPolicy,\n                                         String field,\n                                         boolean max,\n                                         boolean needsScores,\n                                         FieldType fieldType,\n                                         IntOpenHashSet boostDocs) throws IOException{\n\n      this.maxDoc = maxDoc;\n      this.contexts = new AtomicReaderContext[segments];\n      this.values = values;\n      int valueCount = values.getValueCount();\n      this.nullPolicy = nullPolicy;\n      this.needsScores = needsScores;\n      this.boostDocs = boostDocs;\n      if(fieldType instanceof TrieIntField) {\n        this.fieldValueCollapse = new IntValueCollapse(maxDoc, field, nullPolicy, new int[valueCount], max, this.needsScores, boostDocs);\n      } else if(fieldType instanceof TrieLongField) {\n        this.fieldValueCollapse =  new LongValueCollapse(maxDoc, field, nullPolicy, new int[valueCount], max, this.needsScores, boostDocs);\n      } else if(fieldType instanceof TrieFloatField) {\n        this.fieldValueCollapse =  new FloatValueCollapse(maxDoc, field, nullPolicy, new int[valueCount], max, this.needsScores, boostDocs);\n      } else {\n        throw new IOException(\"min/max must be either TrieInt, TrieLong or TrieFloat.\");\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"224952d10f823935a2a836d4072cb5bd6ac33e3e","date":1392068030,"type":5,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.CollapsingFieldValueCollector#CollapsingFieldValueCollector(int,int,SortedDocValues,int,String,boolean,boolean,FieldType,IntOpenHashSet,FunctionQuery,IndexSearcher).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.CollapsingFieldValueCollector#CollapsingFieldValueCollector(int,int,SortedDocValues,int,String,boolean,boolean,FieldType,IntOpenHashSet,FunctionQuery).mjava","sourceNew":"    public CollapsingFieldValueCollector(int maxDoc,\n                                         int segments,\n                                         SortedDocValues values,\n                                         int nullPolicy,\n                                         String field,\n                                         boolean max,\n                                         boolean needsScores,\n                                         FieldType fieldType,\n                                         IntOpenHashSet boostDocs,\n                                         FunctionQuery funcQuery, IndexSearcher searcher) throws IOException{\n\n      this.maxDoc = maxDoc;\n      this.contexts = new AtomicReaderContext[segments];\n      this.values = values;\n      int valueCount = values.getValueCount();\n      this.nullPolicy = nullPolicy;\n      this.needsScores = needsScores;\n      this.boostDocs = boostDocs;\n      if(funcQuery != null) {\n        this.fieldValueCollapse =  new ValueSourceCollapse(maxDoc, field, nullPolicy, new int[valueCount], max, this.needsScores, boostDocs, funcQuery, searcher);\n      } else {\n        if(fieldType instanceof TrieIntField) {\n          this.fieldValueCollapse = new IntValueCollapse(maxDoc, field, nullPolicy, new int[valueCount], max, this.needsScores, boostDocs);\n        } else if(fieldType instanceof TrieLongField) {\n          this.fieldValueCollapse =  new LongValueCollapse(maxDoc, field, nullPolicy, new int[valueCount], max, this.needsScores, boostDocs);\n        } else if(fieldType instanceof TrieFloatField) {\n          this.fieldValueCollapse =  new FloatValueCollapse(maxDoc, field, nullPolicy, new int[valueCount], max, this.needsScores, boostDocs);\n        } else {\n          throw new IOException(\"min/max must be either TrieInt, TrieLong or TrieFloat.\");\n        }\n      }\n    }\n\n","sourceOld":"    public CollapsingFieldValueCollector(int maxDoc,\n                                         int segments,\n                                         SortedDocValues values,\n                                         int nullPolicy,\n                                         String field,\n                                         boolean max,\n                                         boolean needsScores,\n                                         FieldType fieldType,\n                                         IntOpenHashSet boostDocs,\n                                         FunctionQuery funcQuery) throws IOException{\n\n      this.maxDoc = maxDoc;\n      this.contexts = new AtomicReaderContext[segments];\n      this.values = values;\n      int valueCount = values.getValueCount();\n      this.nullPolicy = nullPolicy;\n      this.needsScores = needsScores;\n      this.boostDocs = boostDocs;\n      if(funcQuery != null) {\n        this.fieldValueCollapse =  new ValueSourceCollapse(maxDoc, field, nullPolicy, new int[valueCount], max, this.needsScores, boostDocs, funcQuery);\n      } else {\n        if(fieldType instanceof TrieIntField) {\n          this.fieldValueCollapse = new IntValueCollapse(maxDoc, field, nullPolicy, new int[valueCount], max, this.needsScores, boostDocs);\n        } else if(fieldType instanceof TrieLongField) {\n          this.fieldValueCollapse =  new LongValueCollapse(maxDoc, field, nullPolicy, new int[valueCount], max, this.needsScores, boostDocs);\n        } else if(fieldType instanceof TrieFloatField) {\n          this.fieldValueCollapse =  new FloatValueCollapse(maxDoc, field, nullPolicy, new int[valueCount], max, this.needsScores, boostDocs);\n        } else {\n          throw new IOException(\"min/max must be either TrieInt, TrieLong or TrieFloat.\");\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"224952d10f823935a2a836d4072cb5bd6ac33e3e":["51e87f816b84771636e67fc67039925030ebe671"],"51e87f816b84771636e67fc67039925030ebe671":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["224952d10f823935a2a836d4072cb5bd6ac33e3e"]},"commit2Childs":{"224952d10f823935a2a836d4072cb5bd6ac33e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"51e87f816b84771636e67fc67039925030ebe671":["224952d10f823935a2a836d4072cb5bd6ac33e3e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["51e87f816b84771636e67fc67039925030ebe671"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}