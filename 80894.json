{"path":"solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers#parseQueryString(String,Map[String,String[]]).mjava","commits":[{"id":"bfea9c90af47b6b37ffaafe52d3307a1f8978e68","date":1357665734,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers#parseQueryString(String,Map[String,String[]]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Given a url-encoded query string (UTF-8), map it into the given map\n   * @param queryString as given from URL\n   * @param map place all parameters in this map\n   */\n  static void parseQueryString(final String queryString, final Map<String,String[]> map) {\n    if (queryString != null && queryString.length() > 0) {\n      try {\n        final int len = queryString.length();\n        // this input stream emulates to get the raw bytes from the URL as passed to servlet container, it disallows any byte > 127 and enforces to %-escape them:\n        final InputStream in = new InputStream() {\n          int pos = 0;\n          @Override\n          public int read() {\n            if (pos < len) {\n              final char ch = queryString.charAt(pos);\n              if (ch > 127) {\n                throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"URLDecoder: The query string contains a not-%-escaped byte > 127 at position \" + pos);\n              }\n              pos++;\n              return ch;\n            } else {\n              return -1;\n            }\n          }\n        };\n        parseFormDataContent(in, Long.MAX_VALUE, IOUtils.CHARSET_UTF_8, map);\n      } catch (IOException ioe) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, ioe);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e6354dd7c71fe122926fc53d7d29f715b1283db","date":1357915185,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers#parseQueryString(String,Map[String,String[]]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Given a url-encoded query string (UTF-8), map it into the given map\n   * @param queryString as given from URL\n   * @param map place all parameters in this map\n   */\n  static void parseQueryString(final String queryString, final Map<String,String[]> map) {\n    if (queryString != null && queryString.length() > 0) {\n      try {\n        final int len = queryString.length();\n        // this input stream emulates to get the raw bytes from the URL as passed to servlet container, it disallows any byte > 127 and enforces to %-escape them:\n        final InputStream in = new InputStream() {\n          int pos = 0;\n          @Override\n          public int read() {\n            if (pos < len) {\n              final char ch = queryString.charAt(pos);\n              if (ch > 127) {\n                throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"URLDecoder: The query string contains a not-%-escaped byte > 127 at position \" + pos);\n              }\n              pos++;\n              return ch;\n            } else {\n              return -1;\n            }\n          }\n        };\n        parseFormDataContent(in, Long.MAX_VALUE, IOUtils.CHARSET_UTF_8, map);\n      } catch (IOException ioe) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, ioe);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"08970e5b8411182a29412c177eff67ec1110095b","date":1366640815,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers#parseQueryString(String,Map[String,String[]]).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers#parseQueryString(String,Map[String,String[]]).mjava","sourceNew":"  /**\n   * Given a url-encoded query string (UTF-8), map it into the given map\n   * @param queryString as given from URL\n   * @param map place all parameters in this map\n   */\n  static void parseQueryString(final String queryString, final Map<String,String[]> map) {\n    if (queryString != null && queryString.length() > 0) {\n      try {\n        final int len = queryString.length();\n        // this input stream emulates to get the raw bytes from the URL as passed to servlet container, it disallows any byte > 127 and enforces to %-escape them:\n        final InputStream in = new InputStream() {\n          int pos = 0;\n          @Override\n          public int read() {\n            if (pos < len) {\n              final char ch = queryString.charAt(pos);\n              if (ch > 127) {\n                throw new SolrException(ErrorCode.BAD_REQUEST, \"URLDecoder: The query string contains a not-%-escaped byte > 127 at position \" + pos);\n              }\n              pos++;\n              return ch;\n            } else {\n              return -1;\n            }\n          }\n        };\n        parseFormDataContent(in, Long.MAX_VALUE, IOUtils.CHARSET_UTF_8, map);\n      } catch (IOException ioe) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, ioe);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Given a url-encoded query string (UTF-8), map it into the given map\n   * @param queryString as given from URL\n   * @param map place all parameters in this map\n   */\n  static void parseQueryString(final String queryString, final Map<String,String[]> map) {\n    if (queryString != null && queryString.length() > 0) {\n      try {\n        final int len = queryString.length();\n        // this input stream emulates to get the raw bytes from the URL as passed to servlet container, it disallows any byte > 127 and enforces to %-escape them:\n        final InputStream in = new InputStream() {\n          int pos = 0;\n          @Override\n          public int read() {\n            if (pos < len) {\n              final char ch = queryString.charAt(pos);\n              if (ch > 127) {\n                throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"URLDecoder: The query string contains a not-%-escaped byte > 127 at position \" + pos);\n              }\n              pos++;\n              return ch;\n            } else {\n              return -1;\n            }\n          }\n        };\n        parseFormDataContent(in, Long.MAX_VALUE, IOUtils.CHARSET_UTF_8, map);\n      } catch (IOException ioe) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, ioe);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"92009ce6b3696f548a1c7eb9fcf8cab29b541426","date":1375140262,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers#parseQueryString(String,Map[String,String[]]).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers#parseQueryString(String,Map[String,String[]]).mjava","sourceNew":"  /**\n   * Given a url-encoded query string (UTF-8), map it into the given map\n   * @param queryString as given from URL\n   * @param map place all parameters in this map\n   */\n  static void parseQueryString(final String queryString, final Map<String,String[]> map) {\n    if (queryString != null && queryString.length() > 0) {\n      try {\n        final int len = queryString.length();\n        // this input stream emulates to get the raw bytes from the URL as passed to servlet container, it disallows any byte > 127 and enforces to %-escape them:\n        final InputStream in = new InputStream() {\n          int pos = 0;\n          @Override\n          public int read() {\n            if (pos < len) {\n              final char ch = queryString.charAt(pos);\n              if (ch > 127) {\n                throw new SolrException(ErrorCode.BAD_REQUEST, \"URLDecoder: The query string contains a not-%-escaped byte > 127 at position \" + pos);\n              }\n              pos++;\n              return ch;\n            } else {\n              return -1;\n            }\n          }\n        };\n        parseFormDataContent(in, Long.MAX_VALUE, IOUtils.CHARSET_UTF_8, map, true);\n      } catch (IOException ioe) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, ioe);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Given a url-encoded query string (UTF-8), map it into the given map\n   * @param queryString as given from URL\n   * @param map place all parameters in this map\n   */\n  static void parseQueryString(final String queryString, final Map<String,String[]> map) {\n    if (queryString != null && queryString.length() > 0) {\n      try {\n        final int len = queryString.length();\n        // this input stream emulates to get the raw bytes from the URL as passed to servlet container, it disallows any byte > 127 and enforces to %-escape them:\n        final InputStream in = new InputStream() {\n          int pos = 0;\n          @Override\n          public int read() {\n            if (pos < len) {\n              final char ch = queryString.charAt(pos);\n              if (ch > 127) {\n                throw new SolrException(ErrorCode.BAD_REQUEST, \"URLDecoder: The query string contains a not-%-escaped byte > 127 at position \" + pos);\n              }\n              pos++;\n              return ch;\n            } else {\n              return -1;\n            }\n          }\n        };\n        parseFormDataContent(in, Long.MAX_VALUE, IOUtils.CHARSET_UTF_8, map);\n      } catch (IOException ioe) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, ioe);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers#parseQueryString(String,Map[String,String[]]).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers#parseQueryString(String,Map[String,String[]]).mjava","sourceNew":"  /**\n   * Given a url-encoded query string (UTF-8), map it into the given map\n   * @param queryString as given from URL\n   * @param map place all parameters in this map\n   */\n  static void parseQueryString(final String queryString, final Map<String,String[]> map) {\n    if (queryString != null && queryString.length() > 0) {\n      try {\n        final int len = queryString.length();\n        // this input stream emulates to get the raw bytes from the URL as passed to servlet container, it disallows any byte > 127 and enforces to %-escape them:\n        final InputStream in = new InputStream() {\n          int pos = 0;\n          @Override\n          public int read() {\n            if (pos < len) {\n              final char ch = queryString.charAt(pos);\n              if (ch > 127) {\n                throw new SolrException(ErrorCode.BAD_REQUEST, \"URLDecoder: The query string contains a not-%-escaped byte > 127 at position \" + pos);\n              }\n              pos++;\n              return ch;\n            } else {\n              return -1;\n            }\n          }\n        };\n        parseFormDataContent(in, Long.MAX_VALUE, IOUtils.CHARSET_UTF_8, map, true);\n      } catch (IOException ioe) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, ioe);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Given a url-encoded query string (UTF-8), map it into the given map\n   * @param queryString as given from URL\n   * @param map place all parameters in this map\n   */\n  static void parseQueryString(final String queryString, final Map<String,String[]> map) {\n    if (queryString != null && queryString.length() > 0) {\n      try {\n        final int len = queryString.length();\n        // this input stream emulates to get the raw bytes from the URL as passed to servlet container, it disallows any byte > 127 and enforces to %-escape them:\n        final InputStream in = new InputStream() {\n          int pos = 0;\n          @Override\n          public int read() {\n            if (pos < len) {\n              final char ch = queryString.charAt(pos);\n              if (ch > 127) {\n                throw new SolrException(ErrorCode.BAD_REQUEST, \"URLDecoder: The query string contains a not-%-escaped byte > 127 at position \" + pos);\n              }\n              pos++;\n              return ch;\n            } else {\n              return -1;\n            }\n          }\n        };\n        parseFormDataContent(in, Long.MAX_VALUE, IOUtils.CHARSET_UTF_8, map);\n      } catch (IOException ioe) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, ioe);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7d89d7e4e5101347833eea558851bf4209218619","date":1396265641,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers#parseQueryString(String,Map[String,String[]]).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers#parseQueryString(String,Map[String,String[]]).mjava","sourceNew":"  /**\n   * Given a url-encoded query string (UTF-8), map it into the given map\n   * @param queryString as given from URL\n   * @param map place all parameters in this map\n   */\n  static void parseQueryString(final String queryString, final Map<String,String[]> map) {\n    if (queryString != null && queryString.length() > 0) {\n      try {\n        final int len = queryString.length();\n        // this input stream emulates to get the raw bytes from the URL as passed to servlet container, it disallows any byte > 127 and enforces to %-escape them:\n        final InputStream in = new InputStream() {\n          int pos = 0;\n          @Override\n          public int read() {\n            if (pos < len) {\n              final char ch = queryString.charAt(pos);\n              if (ch > 127) {\n                throw new SolrException(ErrorCode.BAD_REQUEST, \"URLDecoder: The query string contains a not-%-escaped byte > 127 at position \" + pos);\n              }\n              pos++;\n              return ch;\n            } else {\n              return -1;\n            }\n          }\n        };\n        parseFormDataContent(in, Long.MAX_VALUE, StandardCharsets.UTF_8, map, true);\n      } catch (IOException ioe) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, ioe);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Given a url-encoded query string (UTF-8), map it into the given map\n   * @param queryString as given from URL\n   * @param map place all parameters in this map\n   */\n  static void parseQueryString(final String queryString, final Map<String,String[]> map) {\n    if (queryString != null && queryString.length() > 0) {\n      try {\n        final int len = queryString.length();\n        // this input stream emulates to get the raw bytes from the URL as passed to servlet container, it disallows any byte > 127 and enforces to %-escape them:\n        final InputStream in = new InputStream() {\n          int pos = 0;\n          @Override\n          public int read() {\n            if (pos < len) {\n              final char ch = queryString.charAt(pos);\n              if (ch > 127) {\n                throw new SolrException(ErrorCode.BAD_REQUEST, \"URLDecoder: The query string contains a not-%-escaped byte > 127 at position \" + pos);\n              }\n              pos++;\n              return ch;\n            } else {\n              return -1;\n            }\n          }\n        };\n        parseFormDataContent(in, Long.MAX_VALUE, IOUtils.CHARSET_UTF_8, map, true);\n      } catch (IOException ioe) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, ioe);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers#parseQueryString(String,Map[String,String[]]).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers#parseQueryString(String,Map[String,String[]]).mjava","sourceNew":"  /**\n   * Given a url-encoded query string (UTF-8), map it into the given map\n   * @param queryString as given from URL\n   * @param map place all parameters in this map\n   */\n  static void parseQueryString(final String queryString, final Map<String,String[]> map) {\n    if (queryString != null && queryString.length() > 0) {\n      try {\n        final int len = queryString.length();\n        // this input stream emulates to get the raw bytes from the URL as passed to servlet container, it disallows any byte > 127 and enforces to %-escape them:\n        final InputStream in = new InputStream() {\n          int pos = 0;\n          @Override\n          public int read() {\n            if (pos < len) {\n              final char ch = queryString.charAt(pos);\n              if (ch > 127) {\n                throw new SolrException(ErrorCode.BAD_REQUEST, \"URLDecoder: The query string contains a not-%-escaped byte > 127 at position \" + pos);\n              }\n              pos++;\n              return ch;\n            } else {\n              return -1;\n            }\n          }\n        };\n        parseFormDataContent(in, Long.MAX_VALUE, StandardCharsets.UTF_8, map, true);\n      } catch (IOException ioe) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, ioe);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Given a url-encoded query string (UTF-8), map it into the given map\n   * @param queryString as given from URL\n   * @param map place all parameters in this map\n   */\n  static void parseQueryString(final String queryString, final Map<String,String[]> map) {\n    if (queryString != null && queryString.length() > 0) {\n      try {\n        final int len = queryString.length();\n        // this input stream emulates to get the raw bytes from the URL as passed to servlet container, it disallows any byte > 127 and enforces to %-escape them:\n        final InputStream in = new InputStream() {\n          int pos = 0;\n          @Override\n          public int read() {\n            if (pos < len) {\n              final char ch = queryString.charAt(pos);\n              if (ch > 127) {\n                throw new SolrException(ErrorCode.BAD_REQUEST, \"URLDecoder: The query string contains a not-%-escaped byte > 127 at position \" + pos);\n              }\n              pos++;\n              return ch;\n            } else {\n              return -1;\n            }\n          }\n        };\n        parseFormDataContent(in, Long.MAX_VALUE, IOUtils.CHARSET_UTF_8, map, true);\n      } catch (IOException ioe) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, ioe);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5eb2511ababf862ea11e10761c70ee560cd84510":["92009ce6b3696f548a1c7eb9fcf8cab29b541426","7d89d7e4e5101347833eea558851bf4209218619"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["08970e5b8411182a29412c177eff67ec1110095b","92009ce6b3696f548a1c7eb9fcf8cab29b541426"],"bfea9c90af47b6b37ffaafe52d3307a1f8978e68":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"92009ce6b3696f548a1c7eb9fcf8cab29b541426":["08970e5b8411182a29412c177eff67ec1110095b"],"7d89d7e4e5101347833eea558851bf4209218619":["92009ce6b3696f548a1c7eb9fcf8cab29b541426"],"4e6354dd7c71fe122926fc53d7d29f715b1283db":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","bfea9c90af47b6b37ffaafe52d3307a1f8978e68"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7d89d7e4e5101347833eea558851bf4209218619"],"08970e5b8411182a29412c177eff67ec1110095b":["bfea9c90af47b6b37ffaafe52d3307a1f8978e68"]},"commit2Childs":{"5eb2511ababf862ea11e10761c70ee560cd84510":[],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":[],"bfea9c90af47b6b37ffaafe52d3307a1f8978e68":["4e6354dd7c71fe122926fc53d7d29f715b1283db","08970e5b8411182a29412c177eff67ec1110095b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bfea9c90af47b6b37ffaafe52d3307a1f8978e68","4e6354dd7c71fe122926fc53d7d29f715b1283db"],"92009ce6b3696f548a1c7eb9fcf8cab29b541426":["5eb2511ababf862ea11e10761c70ee560cd84510","716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","7d89d7e4e5101347833eea558851bf4209218619"],"7d89d7e4e5101347833eea558851bf4209218619":["5eb2511ababf862ea11e10761c70ee560cd84510","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4e6354dd7c71fe122926fc53d7d29f715b1283db":[],"08970e5b8411182a29412c177eff67ec1110095b":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","92009ce6b3696f548a1c7eb9fcf8cab29b541426"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","4e6354dd7c71fe122926fc53d7d29f715b1283db","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}