{"path":"lucene/core/src/test/org/apache/lucene/util/TestOfflineSorter#testFixedLengthHeap().mjava","commits":[{"id":"ee52259641568741fbc6ecc51284431e2a36475c","date":1459331525,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestOfflineSorter#testFixedLengthHeap().mjava","pathOld":"/dev/null","sourceNew":"  public void testFixedLengthHeap() throws Exception {\n    // Make sure the RAM accounting is correct, i.e. if we are sorting fixed width\n    // ints (4 bytes) then the heap used is really only 4 bytes per value:\n    Directory dir = newDirectory();\n    IndexOutput out = dir.createTempOutput(\"unsorted\", \"tmp\", IOContext.DEFAULT);\n    try (ByteSequencesWriter w = new OfflineSorter.ByteSequencesWriter(out)) {\n      byte[] bytes = new byte[Integer.BYTES];\n      for (int i=0;i<1024*1024;i++) {\n        random().nextBytes(bytes);\n        w.write(bytes);\n      }\n      CodecUtil.writeFooter(out);\n    }\n\n    OfflineSorter sorter = new OfflineSorter(dir, \"foo\", OfflineSorter.DEFAULT_COMPARATOR, BufferSize.megabytes(4), OfflineSorter.MAX_TEMPFILES, Integer.BYTES);\n    sorter.sort(out.getName());\n    // 1 MB of ints with 4 MH heap allowed should have been sorted in a single heap partition:\n    assertEquals(0, sorter.sortInfo.mergeRounds);\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7dcb0432bcb41451b41e9aaaabe99f5d208258fe","date":1493203108,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestOfflineSorter#testFixedLengthHeap().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestOfflineSorter#testFixedLengthHeap().mjava","sourceNew":"  public void testFixedLengthHeap() throws Exception {\n    // Make sure the RAM accounting is correct, i.e. if we are sorting fixed width\n    // ints (4 bytes) then the heap used is really only 4 bytes per value:\n    Directory dir = newDirectory();\n    IndexOutput out = dir.createTempOutput(\"unsorted\", \"tmp\", IOContext.DEFAULT);\n    try (ByteSequencesWriter w = new OfflineSorter.ByteSequencesWriter(out)) {\n      byte[] bytes = new byte[Integer.BYTES];\n      for (int i=0;i<1024*1024;i++) {\n        random().nextBytes(bytes);\n        w.write(bytes);\n      }\n      CodecUtil.writeFooter(out);\n    }\n\n    ExecutorService exec = randomExecutorServiceOrNull();\n    OfflineSorter sorter = new OfflineSorter(dir, \"foo\", OfflineSorter.DEFAULT_COMPARATOR, BufferSize.megabytes(4), OfflineSorter.MAX_TEMPFILES, Integer.BYTES, exec, TestUtil.nextInt(random(), 1, 4));\n    sorter.sort(out.getName());\n    if (exec != null) {\n      exec.shutdownNow();\n    }\n    // 1 MB of ints with 4 MH heap allowed should have been sorted in a single heap partition:\n    assertEquals(0, sorter.sortInfo.mergeRounds);\n    dir.close();\n  }\n\n","sourceOld":"  public void testFixedLengthHeap() throws Exception {\n    // Make sure the RAM accounting is correct, i.e. if we are sorting fixed width\n    // ints (4 bytes) then the heap used is really only 4 bytes per value:\n    Directory dir = newDirectory();\n    IndexOutput out = dir.createTempOutput(\"unsorted\", \"tmp\", IOContext.DEFAULT);\n    try (ByteSequencesWriter w = new OfflineSorter.ByteSequencesWriter(out)) {\n      byte[] bytes = new byte[Integer.BYTES];\n      for (int i=0;i<1024*1024;i++) {\n        random().nextBytes(bytes);\n        w.write(bytes);\n      }\n      CodecUtil.writeFooter(out);\n    }\n\n    OfflineSorter sorter = new OfflineSorter(dir, \"foo\", OfflineSorter.DEFAULT_COMPARATOR, BufferSize.megabytes(4), OfflineSorter.MAX_TEMPFILES, Integer.BYTES);\n    sorter.sort(out.getName());\n    // 1 MB of ints with 4 MH heap allowed should have been sorted in a single heap partition:\n    assertEquals(0, sorter.sortInfo.mergeRounds);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestOfflineSorter#testFixedLengthHeap().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestOfflineSorter#testFixedLengthHeap().mjava","sourceNew":"  public void testFixedLengthHeap() throws Exception {\n    // Make sure the RAM accounting is correct, i.e. if we are sorting fixed width\n    // ints (4 bytes) then the heap used is really only 4 bytes per value:\n    Directory dir = newDirectory();\n    IndexOutput out = dir.createTempOutput(\"unsorted\", \"tmp\", IOContext.DEFAULT);\n    try (ByteSequencesWriter w = new OfflineSorter.ByteSequencesWriter(out)) {\n      byte[] bytes = new byte[Integer.BYTES];\n      for (int i=0;i<1024*1024;i++) {\n        random().nextBytes(bytes);\n        w.write(bytes);\n      }\n      CodecUtil.writeFooter(out);\n    }\n\n    ExecutorService exec = randomExecutorServiceOrNull();\n    OfflineSorter sorter = new OfflineSorter(dir, \"foo\", OfflineSorter.DEFAULT_COMPARATOR, BufferSize.megabytes(4), OfflineSorter.MAX_TEMPFILES, Integer.BYTES, exec, TestUtil.nextInt(random(), 1, 4));\n    sorter.sort(out.getName());\n    if (exec != null) {\n      exec.shutdownNow();\n    }\n    // 1 MB of ints with 4 MH heap allowed should have been sorted in a single heap partition:\n    assertEquals(0, sorter.sortInfo.mergeRounds);\n    dir.close();\n  }\n\n","sourceOld":"  public void testFixedLengthHeap() throws Exception {\n    // Make sure the RAM accounting is correct, i.e. if we are sorting fixed width\n    // ints (4 bytes) then the heap used is really only 4 bytes per value:\n    Directory dir = newDirectory();\n    IndexOutput out = dir.createTempOutput(\"unsorted\", \"tmp\", IOContext.DEFAULT);\n    try (ByteSequencesWriter w = new OfflineSorter.ByteSequencesWriter(out)) {\n      byte[] bytes = new byte[Integer.BYTES];\n      for (int i=0;i<1024*1024;i++) {\n        random().nextBytes(bytes);\n        w.write(bytes);\n      }\n      CodecUtil.writeFooter(out);\n    }\n\n    OfflineSorter sorter = new OfflineSorter(dir, \"foo\", OfflineSorter.DEFAULT_COMPARATOR, BufferSize.megabytes(4), OfflineSorter.MAX_TEMPFILES, Integer.BYTES);\n    sorter.sort(out.getName());\n    // 1 MB of ints with 4 MH heap allowed should have been sorted in a single heap partition:\n    assertEquals(0, sorter.sortInfo.mergeRounds);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fc1e9ddca40a3ddf8b097f2cf1fe2547fe8e384f","date":1579652839,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestOfflineSorter#testFixedLengthHeap().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestOfflineSorter#testFixedLengthHeap().mjava","sourceNew":"  @Slow\n  public void testFixedLengthHeap() throws Exception {\n    // Make sure the RAM accounting is correct, i.e. if we are sorting fixed width\n    // ints (4 bytes) then the heap used is really only 4 bytes per value:\n    Directory dir = newDirectory();\n    IndexOutput out = dir.createTempOutput(\"unsorted\", \"tmp\", IOContext.DEFAULT);\n    try (ByteSequencesWriter w = new OfflineSorter.ByteSequencesWriter(out)) {\n      byte[] bytes = new byte[Integer.BYTES];\n      for (int i=0;i<1024*1024;i++) {\n        random().nextBytes(bytes);\n        w.write(bytes);\n      }\n      CodecUtil.writeFooter(out);\n    }\n\n    ExecutorService exec = randomExecutorServiceOrNull();\n    OfflineSorter sorter = new OfflineSorter(dir, \"foo\", OfflineSorter.DEFAULT_COMPARATOR, BufferSize.megabytes(4), OfflineSorter.MAX_TEMPFILES, Integer.BYTES, exec, TestUtil.nextInt(random(), 1, 4));\n    sorter.sort(out.getName());\n    if (exec != null) {\n      exec.shutdownNow();\n    }\n    // 1 MB of ints with 4 MH heap allowed should have been sorted in a single heap partition:\n    assertEquals(0, sorter.sortInfo.mergeRounds);\n    dir.close();\n  }\n\n","sourceOld":"  public void testFixedLengthHeap() throws Exception {\n    // Make sure the RAM accounting is correct, i.e. if we are sorting fixed width\n    // ints (4 bytes) then the heap used is really only 4 bytes per value:\n    Directory dir = newDirectory();\n    IndexOutput out = dir.createTempOutput(\"unsorted\", \"tmp\", IOContext.DEFAULT);\n    try (ByteSequencesWriter w = new OfflineSorter.ByteSequencesWriter(out)) {\n      byte[] bytes = new byte[Integer.BYTES];\n      for (int i=0;i<1024*1024;i++) {\n        random().nextBytes(bytes);\n        w.write(bytes);\n      }\n      CodecUtil.writeFooter(out);\n    }\n\n    ExecutorService exec = randomExecutorServiceOrNull();\n    OfflineSorter sorter = new OfflineSorter(dir, \"foo\", OfflineSorter.DEFAULT_COMPARATOR, BufferSize.megabytes(4), OfflineSorter.MAX_TEMPFILES, Integer.BYTES, exec, TestUtil.nextInt(random(), 1, 4));\n    sorter.sort(out.getName());\n    if (exec != null) {\n      exec.shutdownNow();\n    }\n    // 1 MB of ints with 4 MH heap allowed should have been sorted in a single heap partition:\n    assertEquals(0, sorter.sortInfo.mergeRounds);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":["71da933d30aea361ccc224d6544c451cbf49916d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"71da933d30aea361ccc224d6544c451cbf49916d","date":1579874339,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestOfflineSorter#testFixedLengthHeap().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestOfflineSorter#testFixedLengthHeap().mjava","sourceNew":"  @Nightly\n  public void testFixedLengthHeap() throws Exception {\n    // Make sure the RAM accounting is correct, i.e. if we are sorting fixed width\n    // ints (4 bytes) then the heap used is really only 4 bytes per value:\n    Directory dir = newDirectory();\n    IndexOutput out = dir.createTempOutput(\"unsorted\", \"tmp\", IOContext.DEFAULT);\n    try (ByteSequencesWriter w = new OfflineSorter.ByteSequencesWriter(out)) {\n      byte[] bytes = new byte[Integer.BYTES];\n      for (int i=0;i<1024*1024;i++) {\n        random().nextBytes(bytes);\n        w.write(bytes);\n      }\n      CodecUtil.writeFooter(out);\n    }\n\n    ExecutorService exec = randomExecutorServiceOrNull();\n    OfflineSorter sorter = new OfflineSorter(dir, \"foo\", OfflineSorter.DEFAULT_COMPARATOR, BufferSize.megabytes(4), OfflineSorter.MAX_TEMPFILES, Integer.BYTES, exec, TestUtil.nextInt(random(), 1, 4));\n    sorter.sort(out.getName());\n    if (exec != null) {\n      exec.shutdownNow();\n    }\n    // 1 MB of ints with 4 MH heap allowed should have been sorted in a single heap partition:\n    assertEquals(0, sorter.sortInfo.mergeRounds);\n    dir.close();\n  }\n\n","sourceOld":"  @Slow\n  public void testFixedLengthHeap() throws Exception {\n    // Make sure the RAM accounting is correct, i.e. if we are sorting fixed width\n    // ints (4 bytes) then the heap used is really only 4 bytes per value:\n    Directory dir = newDirectory();\n    IndexOutput out = dir.createTempOutput(\"unsorted\", \"tmp\", IOContext.DEFAULT);\n    try (ByteSequencesWriter w = new OfflineSorter.ByteSequencesWriter(out)) {\n      byte[] bytes = new byte[Integer.BYTES];\n      for (int i=0;i<1024*1024;i++) {\n        random().nextBytes(bytes);\n        w.write(bytes);\n      }\n      CodecUtil.writeFooter(out);\n    }\n\n    ExecutorService exec = randomExecutorServiceOrNull();\n    OfflineSorter sorter = new OfflineSorter(dir, \"foo\", OfflineSorter.DEFAULT_COMPARATOR, BufferSize.megabytes(4), OfflineSorter.MAX_TEMPFILES, Integer.BYTES, exec, TestUtil.nextInt(random(), 1, 4));\n    sorter.sort(out.getName());\n    if (exec != null) {\n      exec.shutdownNow();\n    }\n    // 1 MB of ints with 4 MH heap allowed should have been sorted in a single heap partition:\n    assertEquals(0, sorter.sortInfo.mergeRounds);\n    dir.close();\n  }\n\n","bugFix":["fc1e9ddca40a3ddf8b097f2cf1fe2547fe8e384f"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fc1e9ddca40a3ddf8b097f2cf1fe2547fe8e384f":["7dcb0432bcb41451b41e9aaaabe99f5d208258fe"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["ee52259641568741fbc6ecc51284431e2a36475c","7dcb0432bcb41451b41e9aaaabe99f5d208258fe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ee52259641568741fbc6ecc51284431e2a36475c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7dcb0432bcb41451b41e9aaaabe99f5d208258fe":["ee52259641568741fbc6ecc51284431e2a36475c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["71da933d30aea361ccc224d6544c451cbf49916d"],"71da933d30aea361ccc224d6544c451cbf49916d":["fc1e9ddca40a3ddf8b097f2cf1fe2547fe8e384f"]},"commit2Childs":{"fc1e9ddca40a3ddf8b097f2cf1fe2547fe8e384f":["71da933d30aea361ccc224d6544c451cbf49916d"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ee52259641568741fbc6ecc51284431e2a36475c"],"ee52259641568741fbc6ecc51284431e2a36475c":["e9017cf144952056066919f1ebc7897ff9bd71b1","7dcb0432bcb41451b41e9aaaabe99f5d208258fe"],"7dcb0432bcb41451b41e9aaaabe99f5d208258fe":["fc1e9ddca40a3ddf8b097f2cf1fe2547fe8e384f","e9017cf144952056066919f1ebc7897ff9bd71b1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"71da933d30aea361ccc224d6544c451cbf49916d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}