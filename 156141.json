{"path":"lucene/core/src/test/org/apache/lucene/index/TestCrashCausesCorruptIndex#searchForFleas(int).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestCrashCausesCorruptIndex#searchForFleas(int).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestCrashCausesCorruptIndex#searchForFleas(int).mjava","sourceNew":"  /**\n   * Run an example search.\n   * \n   * @throws IOException\n   * @throws ParseException\n   */\n  private void searchForFleas(final int expectedTotalHits) throws IOException {\n    Directory realDirectory = newFSDirectory(path);\n    IndexReader indexReader = IndexReader.open(realDirectory);\n    IndexSearcher indexSearcher = newSearcher(indexReader);\n    TopDocs topDocs = indexSearcher.search(new TermQuery(new Term(TEXT_FIELD, \"fleas\")), 10);\n    assertNotNull(topDocs);\n    assertEquals(expectedTotalHits, topDocs.totalHits);\n    indexReader.close();\n    realDirectory.close();\n  }\n\n","sourceOld":"  /**\n   * Run an example search.\n   * \n   * @throws IOException\n   * @throws ParseException\n   */\n  private void searchForFleas(final int expectedTotalHits) throws IOException {\n    Directory realDirectory = newFSDirectory(path);\n    IndexReader indexReader = IndexReader.open(realDirectory);\n    IndexSearcher indexSearcher = newSearcher(indexReader);\n    TopDocs topDocs = indexSearcher.search(new TermQuery(new Term(TEXT_FIELD, \"fleas\")), 10);\n    assertNotNull(topDocs);\n    assertEquals(expectedTotalHits, topDocs.totalHits);\n    indexReader.close();\n    realDirectory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","date":1338430031,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestCrashCausesCorruptIndex#searchForFleas(int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestCrashCausesCorruptIndex#searchForFleas(int).mjava","sourceNew":"  /**\n   * Run an example search.\n   * \n   * @throws IOException\n   * @throws ParseException\n   */\n  private void searchForFleas(final int expectedTotalHits) throws IOException {\n    Directory realDirectory = newFSDirectory(path);\n    IndexReader indexReader = DirectoryReader.open(realDirectory);\n    IndexSearcher indexSearcher = newSearcher(indexReader);\n    TopDocs topDocs = indexSearcher.search(new TermQuery(new Term(TEXT_FIELD, \"fleas\")), 10);\n    assertNotNull(topDocs);\n    assertEquals(expectedTotalHits, topDocs.totalHits);\n    indexReader.close();\n    realDirectory.close();\n  }\n\n","sourceOld":"  /**\n   * Run an example search.\n   * \n   * @throws IOException\n   * @throws ParseException\n   */\n  private void searchForFleas(final int expectedTotalHits) throws IOException {\n    Directory realDirectory = newFSDirectory(path);\n    IndexReader indexReader = IndexReader.open(realDirectory);\n    IndexSearcher indexSearcher = newSearcher(indexReader);\n    TopDocs topDocs = indexSearcher.search(new TermQuery(new Term(TEXT_FIELD, \"fleas\")), 10);\n    assertNotNull(topDocs);\n    assertEquals(expectedTotalHits, topDocs.totalHits);\n    indexReader.close();\n    realDirectory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bd9ddb59e9d33950773d186a8b726b5610ae3aad","date":1341258232,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestCrashCausesCorruptIndex#searchForFleas(int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestCrashCausesCorruptIndex#searchForFleas(int).mjava","sourceNew":"  /**\n   * Run an example search.\n   * \n   * @throws IOException\n   */\n  private void searchForFleas(final int expectedTotalHits) throws IOException {\n    Directory realDirectory = newFSDirectory(path);\n    IndexReader indexReader = DirectoryReader.open(realDirectory);\n    IndexSearcher indexSearcher = newSearcher(indexReader);\n    TopDocs topDocs = indexSearcher.search(new TermQuery(new Term(TEXT_FIELD, \"fleas\")), 10);\n    assertNotNull(topDocs);\n    assertEquals(expectedTotalHits, topDocs.totalHits);\n    indexReader.close();\n    realDirectory.close();\n  }\n\n","sourceOld":"  /**\n   * Run an example search.\n   * \n   * @throws IOException\n   * @throws ParseException\n   */\n  private void searchForFleas(final int expectedTotalHits) throws IOException {\n    Directory realDirectory = newFSDirectory(path);\n    IndexReader indexReader = DirectoryReader.open(realDirectory);\n    IndexSearcher indexSearcher = newSearcher(indexReader);\n    TopDocs topDocs = indexSearcher.search(new TermQuery(new Term(TEXT_FIELD, \"fleas\")), 10);\n    assertNotNull(topDocs);\n    assertEquals(expectedTotalHits, topDocs.totalHits);\n    indexReader.close();\n    realDirectory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestCrashCausesCorruptIndex#searchForFleas(int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestCrashCausesCorruptIndex#searchForFleas(int).mjava","sourceNew":"  /**\n   * Run an example search.\n   * \n   * @throws IOException\n   */\n  private void searchForFleas(final int expectedTotalHits) throws IOException {\n    Directory realDirectory = newFSDirectory(path);\n    IndexReader indexReader = DirectoryReader.open(realDirectory);\n    IndexSearcher indexSearcher = newSearcher(indexReader);\n    TopDocs topDocs = indexSearcher.search(new TermQuery(new Term(TEXT_FIELD, \"fleas\")), 10);\n    assertNotNull(topDocs);\n    assertEquals(expectedTotalHits, topDocs.totalHits);\n    indexReader.close();\n    realDirectory.close();\n  }\n\n","sourceOld":"  /**\n   * Run an example search.\n   * \n   * @throws IOException\n   * @throws ParseException\n   */\n  private void searchForFleas(final int expectedTotalHits) throws IOException {\n    Directory realDirectory = newFSDirectory(path);\n    IndexReader indexReader = DirectoryReader.open(realDirectory);\n    IndexSearcher indexSearcher = newSearcher(indexReader);\n    TopDocs topDocs = indexSearcher.search(new TermQuery(new Term(TEXT_FIELD, \"fleas\")), 10);\n    assertNotNull(topDocs);\n    assertEquals(expectedTotalHits, topDocs.totalHits);\n    indexReader.close();\n    realDirectory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","date":1348430063,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestCrashCausesCorruptIndex#searchForFleas(int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestCrashCausesCorruptIndex#searchForFleas(int).mjava","sourceNew":"  /**\n   * Run an example search.\n   */\n  private void searchForFleas(final int expectedTotalHits) throws IOException {\n    Directory realDirectory = newFSDirectory(path);\n    IndexReader indexReader = DirectoryReader.open(realDirectory);\n    IndexSearcher indexSearcher = newSearcher(indexReader);\n    TopDocs topDocs = indexSearcher.search(new TermQuery(new Term(TEXT_FIELD, \"fleas\")), 10);\n    assertNotNull(topDocs);\n    assertEquals(expectedTotalHits, topDocs.totalHits);\n    indexReader.close();\n    realDirectory.close();\n  }\n\n","sourceOld":"  /**\n   * Run an example search.\n   * \n   * @throws IOException\n   */\n  private void searchForFleas(final int expectedTotalHits) throws IOException {\n    Directory realDirectory = newFSDirectory(path);\n    IndexReader indexReader = DirectoryReader.open(realDirectory);\n    IndexSearcher indexSearcher = newSearcher(indexReader);\n    TopDocs topDocs = indexSearcher.search(new TermQuery(new Term(TEXT_FIELD, \"fleas\")), 10);\n    assertNotNull(topDocs);\n    assertEquals(expectedTotalHits, topDocs.totalHits);\n    indexReader.close();\n    realDirectory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83788ad129a5154d5c6562c4e8ce3db48793aada","date":1532961485,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestCrashCausesCorruptIndex#searchForFleas(int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestCrashCausesCorruptIndex#searchForFleas(int).mjava","sourceNew":"  /**\n   * Run an example search.\n   */\n  private void searchForFleas(final int expectedTotalHits) throws IOException {\n    Directory realDirectory = newFSDirectory(path);\n    IndexReader indexReader = DirectoryReader.open(realDirectory);\n    IndexSearcher indexSearcher = newSearcher(indexReader);\n    TopDocs topDocs = indexSearcher.search(new TermQuery(new Term(TEXT_FIELD, \"fleas\")), 10);\n    assertNotNull(topDocs);\n    assertEquals(expectedTotalHits, topDocs.totalHits.value);\n    indexReader.close();\n    realDirectory.close();\n  }\n\n","sourceOld":"  /**\n   * Run an example search.\n   */\n  private void searchForFleas(final int expectedTotalHits) throws IOException {\n    Directory realDirectory = newFSDirectory(path);\n    IndexReader indexReader = DirectoryReader.open(realDirectory);\n    IndexSearcher indexSearcher = newSearcher(indexReader);\n    TopDocs topDocs = indexSearcher.search(new TermQuery(new Term(TEXT_FIELD, \"fleas\")), 10);\n    assertNotNull(topDocs);\n    assertEquals(expectedTotalHits, topDocs.totalHits);\n    indexReader.close();\n    realDirectory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["bd9ddb59e9d33950773d186a8b726b5610ae3aad"],"bd9ddb59e9d33950773d186a8b726b5610ae3aad":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","bd9ddb59e9d33950773d186a8b726b5610ae3aad"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"83788ad129a5154d5c6562c4e8ce3db48793aada":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["83788ad129a5154d5c6562c4e8ce3db48793aada"]},"commit2Childs":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["83788ad129a5154d5c6562c4e8ce3db48793aada"],"bd9ddb59e9d33950773d186a8b726b5610ae3aad":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["bd9ddb59e9d33950773d186a8b726b5610ae3aad","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}