{"path":"lucene/src/test-framework/java/org/apache/lucene/util/LuceneTestCase#newIndexWriterConfig(Random,Version,Analyzer).mjava","commits":[{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/util/LuceneTestCase#newIndexWriterConfig(Random,Version,Analyzer).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#newIndexWriterConfig(Random,Version,Analyzer).mjava","sourceNew":"  /** create a new index writer config with random defaults using the specified random */\n  public static IndexWriterConfig newIndexWriterConfig(Random r, Version v, Analyzer a) {\n    IndexWriterConfig c = new IndexWriterConfig(v, a);\n    c.setSimilarityProvider(similarityProvider);\n    if (r.nextBoolean()) {\n      c.setMergeScheduler(new SerialMergeScheduler());\n    }\n    if (r.nextBoolean()) {\n      if (rarely(r)) {\n        // crazy value\n        c.setMaxBufferedDocs(_TestUtil.nextInt(r, 2, 7));\n      } else {\n        // reasonable value\n        c.setMaxBufferedDocs(_TestUtil.nextInt(r, 8, 1000));\n      }\n    }\n    if (r.nextBoolean()) {\n      if (rarely(r)) {\n        // crazy value\n        c.setTermIndexInterval(r.nextBoolean() ? _TestUtil.nextInt(r, 1, 31) : _TestUtil.nextInt(r, 129, 1000));\n      } else {\n        // reasonable value\n        c.setTermIndexInterval(_TestUtil.nextInt(r, 32, 128));\n      }\n    }\n    if (r.nextBoolean()) {\n      c.setIndexerThreadPool(new ThreadAffinityDocumentsWriterThreadPool(_TestUtil.nextInt(r, 1, 20)));\n    }\n\n    if (r.nextBoolean()) {\n      c.setMergePolicy(newTieredMergePolicy());\n    } else if (r.nextBoolean()) {\n      c.setMergePolicy(newLogMergePolicy());\n    } else {\n      c.setMergePolicy(new MockRandomMergePolicy(r));\n    }\n\n    c.setReaderPooling(r.nextBoolean());\n    c.setReaderTermsIndexDivisor(_TestUtil.nextInt(r, 1, 4));\n    return c;\n  }\n\n","sourceOld":"  /** create a new index writer config with random defaults using the specified random */\n  public static IndexWriterConfig newIndexWriterConfig(Random r, Version v, Analyzer a) {\n    IndexWriterConfig c = new IndexWriterConfig(v, a);\n    c.setSimilarityProvider(similarityProvider);\n    if (r.nextBoolean()) {\n      c.setMergeScheduler(new SerialMergeScheduler());\n    }\n    if (r.nextBoolean()) {\n      if (rarely(r)) {\n        // crazy value\n        c.setMaxBufferedDocs(_TestUtil.nextInt(r, 2, 7));\n      } else {\n        // reasonable value\n        c.setMaxBufferedDocs(_TestUtil.nextInt(r, 8, 1000));\n      }\n    }\n    if (r.nextBoolean()) {\n      if (rarely(r)) {\n        // crazy value\n        c.setTermIndexInterval(r.nextBoolean() ? _TestUtil.nextInt(r, 1, 31) : _TestUtil.nextInt(r, 129, 1000));\n      } else {\n        // reasonable value\n        c.setTermIndexInterval(_TestUtil.nextInt(r, 32, 128));\n      }\n    }\n    if (r.nextBoolean()) {\n      c.setIndexerThreadPool(new ThreadAffinityDocumentsWriterThreadPool(_TestUtil.nextInt(r, 1, 20)));\n    }\n\n    if (r.nextBoolean()) {\n      c.setMergePolicy(newTieredMergePolicy());\n    } else if (r.nextBoolean()) {\n      c.setMergePolicy(newLogMergePolicy());\n    } else {\n      c.setMergePolicy(new MockRandomMergePolicy(r));\n    }\n\n    c.setReaderPooling(r.nextBoolean());\n    c.setReaderTermsIndexDivisor(_TestUtil.nextInt(r, 1, 4));\n    return c;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8be580b58bcc650d428f3f22de81cadcf51d650a","date":1325279655,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/util/LuceneTestCase#newIndexWriterConfig(Random,Version,Analyzer).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/util/LuceneTestCase#newIndexWriterConfig(Random,Version,Analyzer).mjava","sourceNew":"  /** create a new index writer config with random defaults using the specified random */\n  public static IndexWriterConfig newIndexWriterConfig(Random r, Version v, Analyzer a) {\n    IndexWriterConfig c = new IndexWriterConfig(v, a);\n    c.setSimilarityProvider(similarityProvider);\n    if (r.nextBoolean()) {\n      c.setMergeScheduler(new SerialMergeScheduler());\n    }\n    if (r.nextBoolean()) {\n      if (rarely(r)) {\n        // crazy value\n        c.setMaxBufferedDocs(_TestUtil.nextInt(r, 2, 15));\n      } else {\n        // reasonable value\n        c.setMaxBufferedDocs(_TestUtil.nextInt(r, 16, 1000));\n      }\n    }\n    if (r.nextBoolean()) {\n      if (rarely(r)) {\n        // crazy value\n        c.setTermIndexInterval(r.nextBoolean() ? _TestUtil.nextInt(r, 1, 31) : _TestUtil.nextInt(r, 129, 1000));\n      } else {\n        // reasonable value\n        c.setTermIndexInterval(_TestUtil.nextInt(r, 32, 128));\n      }\n    }\n    if (r.nextBoolean()) {\n      if (rarely(r)) {\n        // crazy value\n        c.setIndexerThreadPool(new ThreadAffinityDocumentsWriterThreadPool(_TestUtil.nextInt(r, 5, 20)));\n      } else {\n        // reasonable value\n        c.setIndexerThreadPool(new ThreadAffinityDocumentsWriterThreadPool(_TestUtil.nextInt(r, 1, 4)));\n      }\n    }\n\n    if (rarely(r)) {\n      c.setMergePolicy(new MockRandomMergePolicy(r));\n    } else if (r.nextBoolean()) {\n      c.setMergePolicy(newTieredMergePolicy());\n    } else {\n      c.setMergePolicy(newLogMergePolicy());\n    }\n\n    c.setReaderPooling(r.nextBoolean());\n    c.setReaderTermsIndexDivisor(_TestUtil.nextInt(r, 1, 4));\n    return c;\n  }\n\n","sourceOld":"  /** create a new index writer config with random defaults using the specified random */\n  public static IndexWriterConfig newIndexWriterConfig(Random r, Version v, Analyzer a) {\n    IndexWriterConfig c = new IndexWriterConfig(v, a);\n    c.setSimilarityProvider(similarityProvider);\n    if (r.nextBoolean()) {\n      c.setMergeScheduler(new SerialMergeScheduler());\n    }\n    if (r.nextBoolean()) {\n      if (rarely(r)) {\n        // crazy value\n        c.setMaxBufferedDocs(_TestUtil.nextInt(r, 2, 7));\n      } else {\n        // reasonable value\n        c.setMaxBufferedDocs(_TestUtil.nextInt(r, 8, 1000));\n      }\n    }\n    if (r.nextBoolean()) {\n      if (rarely(r)) {\n        // crazy value\n        c.setTermIndexInterval(r.nextBoolean() ? _TestUtil.nextInt(r, 1, 31) : _TestUtil.nextInt(r, 129, 1000));\n      } else {\n        // reasonable value\n        c.setTermIndexInterval(_TestUtil.nextInt(r, 32, 128));\n      }\n    }\n    if (r.nextBoolean()) {\n      c.setIndexerThreadPool(new ThreadAffinityDocumentsWriterThreadPool(_TestUtil.nextInt(r, 1, 20)));\n    }\n\n    if (r.nextBoolean()) {\n      c.setMergePolicy(newTieredMergePolicy());\n    } else if (r.nextBoolean()) {\n      c.setMergePolicy(newLogMergePolicy());\n    } else {\n      c.setMergePolicy(new MockRandomMergePolicy(r));\n    }\n\n    c.setReaderPooling(r.nextBoolean());\n    c.setReaderTermsIndexDivisor(_TestUtil.nextInt(r, 1, 4));\n    return c;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"16f6363e049bd8052e8241efbd4e877e20c7680f","date":1326727155,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/util/LuceneTestCase#newIndexWriterConfig(Random,Version,Analyzer).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/util/LuceneTestCase#newIndexWriterConfig(Random,Version,Analyzer).mjava","sourceNew":"  /** create a new index writer config with random defaults using the specified random */\n  public static IndexWriterConfig newIndexWriterConfig(Random r, Version v, Analyzer a) {\n    IndexWriterConfig c = new IndexWriterConfig(v, a);\n    c.setSimilarityProvider(similarityProvider);\n    if (r.nextBoolean()) {\n      c.setMergeScheduler(new SerialMergeScheduler());\n    }\n    if (r.nextBoolean()) {\n      if (rarely(r)) {\n        // crazy value\n        c.setMaxBufferedDocs(_TestUtil.nextInt(r, 2, 15));\n      } else {\n        // reasonable value\n        c.setMaxBufferedDocs(_TestUtil.nextInt(r, 16, 1000));\n      }\n    }\n    if (r.nextBoolean()) {\n      if (rarely(r)) {\n        // crazy value\n        c.setTermIndexInterval(r.nextBoolean() ? _TestUtil.nextInt(r, 1, 31) : _TestUtil.nextInt(r, 129, 1000));\n      } else {\n        // reasonable value\n        c.setTermIndexInterval(_TestUtil.nextInt(r, 32, 128));\n      }\n    }\n    if (r.nextBoolean()) {\n      int maxNumThreadStates = rarely(r) ? _TestUtil.nextInt(r, 5, 20) // crazy value\n          : _TestUtil.nextInt(r, 1, 4); // reasonable value\n      if (rarely(r)) {\n        // random thread pool\n        c.setIndexerThreadPool(new RandomDocumentsWriterPerThreadPool(maxNumThreadStates, r));\n      } else {\n        // random thread pool\n        c.setIndexerThreadPool(new ThreadAffinityDocumentsWriterThreadPool(maxNumThreadStates));\n      }\n    }\n\n    if (rarely(r)) {\n      c.setMergePolicy(new MockRandomMergePolicy(r));\n    } else if (r.nextBoolean()) {\n      c.setMergePolicy(newTieredMergePolicy());\n    } else {\n      c.setMergePolicy(newLogMergePolicy());\n    }\n\n    c.setReaderPooling(r.nextBoolean());\n    c.setReaderTermsIndexDivisor(_TestUtil.nextInt(r, 1, 4));\n    return c;\n  }\n\n","sourceOld":"  /** create a new index writer config with random defaults using the specified random */\n  public static IndexWriterConfig newIndexWriterConfig(Random r, Version v, Analyzer a) {\n    IndexWriterConfig c = new IndexWriterConfig(v, a);\n    c.setSimilarityProvider(similarityProvider);\n    if (r.nextBoolean()) {\n      c.setMergeScheduler(new SerialMergeScheduler());\n    }\n    if (r.nextBoolean()) {\n      if (rarely(r)) {\n        // crazy value\n        c.setMaxBufferedDocs(_TestUtil.nextInt(r, 2, 15));\n      } else {\n        // reasonable value\n        c.setMaxBufferedDocs(_TestUtil.nextInt(r, 16, 1000));\n      }\n    }\n    if (r.nextBoolean()) {\n      if (rarely(r)) {\n        // crazy value\n        c.setTermIndexInterval(r.nextBoolean() ? _TestUtil.nextInt(r, 1, 31) : _TestUtil.nextInt(r, 129, 1000));\n      } else {\n        // reasonable value\n        c.setTermIndexInterval(_TestUtil.nextInt(r, 32, 128));\n      }\n    }\n    if (r.nextBoolean()) {\n      if (rarely(r)) {\n        // crazy value\n        c.setIndexerThreadPool(new ThreadAffinityDocumentsWriterThreadPool(_TestUtil.nextInt(r, 5, 20)));\n      } else {\n        // reasonable value\n        c.setIndexerThreadPool(new ThreadAffinityDocumentsWriterThreadPool(_TestUtil.nextInt(r, 1, 4)));\n      }\n    }\n\n    if (rarely(r)) {\n      c.setMergePolicy(new MockRandomMergePolicy(r));\n    } else if (r.nextBoolean()) {\n      c.setMergePolicy(newTieredMergePolicy());\n    } else {\n      c.setMergePolicy(newLogMergePolicy());\n    }\n\n    c.setReaderPooling(r.nextBoolean());\n    c.setReaderTermsIndexDivisor(_TestUtil.nextInt(r, 1, 4));\n    return c;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b","date":1328532481,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/util/LuceneTestCase#newIndexWriterConfig(Random,Version,Analyzer).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/util/LuceneTestCase#newIndexWriterConfig(Random,Version,Analyzer).mjava","sourceNew":"  /** create a new index writer config with random defaults using the specified random */\n  public static IndexWriterConfig newIndexWriterConfig(Random r, Version v, Analyzer a) {\n    IndexWriterConfig c = new IndexWriterConfig(v, a);\n    c.setSimilarity(similarity);\n    if (r.nextBoolean()) {\n      c.setMergeScheduler(new SerialMergeScheduler());\n    }\n    if (r.nextBoolean()) {\n      if (rarely(r)) {\n        // crazy value\n        c.setMaxBufferedDocs(_TestUtil.nextInt(r, 2, 15));\n      } else {\n        // reasonable value\n        c.setMaxBufferedDocs(_TestUtil.nextInt(r, 16, 1000));\n      }\n    }\n    if (r.nextBoolean()) {\n      if (rarely(r)) {\n        // crazy value\n        c.setTermIndexInterval(r.nextBoolean() ? _TestUtil.nextInt(r, 1, 31) : _TestUtil.nextInt(r, 129, 1000));\n      } else {\n        // reasonable value\n        c.setTermIndexInterval(_TestUtil.nextInt(r, 32, 128));\n      }\n    }\n    if (r.nextBoolean()) {\n      int maxNumThreadStates = rarely(r) ? _TestUtil.nextInt(r, 5, 20) // crazy value\n          : _TestUtil.nextInt(r, 1, 4); // reasonable value\n      if (rarely(r)) {\n        // random thread pool\n        c.setIndexerThreadPool(new RandomDocumentsWriterPerThreadPool(maxNumThreadStates, r));\n      } else {\n        // random thread pool\n        c.setIndexerThreadPool(new ThreadAffinityDocumentsWriterThreadPool(maxNumThreadStates));\n      }\n    }\n\n    if (rarely(r)) {\n      c.setMergePolicy(new MockRandomMergePolicy(r));\n    } else if (r.nextBoolean()) {\n      c.setMergePolicy(newTieredMergePolicy());\n    } else {\n      c.setMergePolicy(newLogMergePolicy());\n    }\n\n    c.setReaderPooling(r.nextBoolean());\n    c.setReaderTermsIndexDivisor(_TestUtil.nextInt(r, 1, 4));\n    return c;\n  }\n\n","sourceOld":"  /** create a new index writer config with random defaults using the specified random */\n  public static IndexWriterConfig newIndexWriterConfig(Random r, Version v, Analyzer a) {\n    IndexWriterConfig c = new IndexWriterConfig(v, a);\n    c.setSimilarityProvider(similarityProvider);\n    if (r.nextBoolean()) {\n      c.setMergeScheduler(new SerialMergeScheduler());\n    }\n    if (r.nextBoolean()) {\n      if (rarely(r)) {\n        // crazy value\n        c.setMaxBufferedDocs(_TestUtil.nextInt(r, 2, 15));\n      } else {\n        // reasonable value\n        c.setMaxBufferedDocs(_TestUtil.nextInt(r, 16, 1000));\n      }\n    }\n    if (r.nextBoolean()) {\n      if (rarely(r)) {\n        // crazy value\n        c.setTermIndexInterval(r.nextBoolean() ? _TestUtil.nextInt(r, 1, 31) : _TestUtil.nextInt(r, 129, 1000));\n      } else {\n        // reasonable value\n        c.setTermIndexInterval(_TestUtil.nextInt(r, 32, 128));\n      }\n    }\n    if (r.nextBoolean()) {\n      int maxNumThreadStates = rarely(r) ? _TestUtil.nextInt(r, 5, 20) // crazy value\n          : _TestUtil.nextInt(r, 1, 4); // reasonable value\n      if (rarely(r)) {\n        // random thread pool\n        c.setIndexerThreadPool(new RandomDocumentsWriterPerThreadPool(maxNumThreadStates, r));\n      } else {\n        // random thread pool\n        c.setIndexerThreadPool(new ThreadAffinityDocumentsWriterThreadPool(maxNumThreadStates));\n      }\n    }\n\n    if (rarely(r)) {\n      c.setMergePolicy(new MockRandomMergePolicy(r));\n    } else if (r.nextBoolean()) {\n      c.setMergePolicy(newTieredMergePolicy());\n    } else {\n      c.setMergePolicy(newLogMergePolicy());\n    }\n\n    c.setReaderPooling(r.nextBoolean());\n    c.setReaderTermsIndexDivisor(_TestUtil.nextInt(r, 1, 4));\n    return c;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newIndexWriterConfig(Random,Version,Analyzer).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/util/LuceneTestCase#newIndexWriterConfig(Random,Version,Analyzer).mjava","sourceNew":"  /** create a new index writer config with random defaults using the specified random */\n  public static IndexWriterConfig newIndexWriterConfig(Random r, Version v, Analyzer a) {\n    IndexWriterConfig c = new IndexWriterConfig(v, a);\n    c.setSimilarity(similarity);\n    if (r.nextBoolean()) {\n      c.setMergeScheduler(new SerialMergeScheduler());\n    }\n    if (r.nextBoolean()) {\n      if (rarely(r)) {\n        // crazy value\n        c.setMaxBufferedDocs(_TestUtil.nextInt(r, 2, 15));\n      } else {\n        // reasonable value\n        c.setMaxBufferedDocs(_TestUtil.nextInt(r, 16, 1000));\n      }\n    }\n    if (r.nextBoolean()) {\n      if (rarely(r)) {\n        // crazy value\n        c.setTermIndexInterval(r.nextBoolean() ? _TestUtil.nextInt(r, 1, 31) : _TestUtil.nextInt(r, 129, 1000));\n      } else {\n        // reasonable value\n        c.setTermIndexInterval(_TestUtil.nextInt(r, 32, 128));\n      }\n    }\n    if (r.nextBoolean()) {\n      int maxNumThreadStates = rarely(r) ? _TestUtil.nextInt(r, 5, 20) // crazy value\n          : _TestUtil.nextInt(r, 1, 4); // reasonable value\n      if (rarely(r)) {\n        // random thread pool\n        c.setIndexerThreadPool(new RandomDocumentsWriterPerThreadPool(maxNumThreadStates, r));\n      } else {\n        // random thread pool\n        c.setIndexerThreadPool(new ThreadAffinityDocumentsWriterThreadPool(maxNumThreadStates));\n      }\n    }\n\n    if (rarely(r)) {\n      c.setMergePolicy(new MockRandomMergePolicy(r));\n    } else if (r.nextBoolean()) {\n      c.setMergePolicy(newTieredMergePolicy());\n    } else {\n      c.setMergePolicy(newLogMergePolicy());\n    }\n\n    c.setReaderPooling(r.nextBoolean());\n    c.setReaderTermsIndexDivisor(_TestUtil.nextInt(r, 1, 4));\n    return c;\n  }\n\n","sourceOld":"  /** create a new index writer config with random defaults using the specified random */\n  public static IndexWriterConfig newIndexWriterConfig(Random r, Version v, Analyzer a) {\n    IndexWriterConfig c = new IndexWriterConfig(v, a);\n    c.setSimilarity(similarity);\n    if (r.nextBoolean()) {\n      c.setMergeScheduler(new SerialMergeScheduler());\n    }\n    if (r.nextBoolean()) {\n      if (rarely(r)) {\n        // crazy value\n        c.setMaxBufferedDocs(_TestUtil.nextInt(r, 2, 15));\n      } else {\n        // reasonable value\n        c.setMaxBufferedDocs(_TestUtil.nextInt(r, 16, 1000));\n      }\n    }\n    if (r.nextBoolean()) {\n      if (rarely(r)) {\n        // crazy value\n        c.setTermIndexInterval(r.nextBoolean() ? _TestUtil.nextInt(r, 1, 31) : _TestUtil.nextInt(r, 129, 1000));\n      } else {\n        // reasonable value\n        c.setTermIndexInterval(_TestUtil.nextInt(r, 32, 128));\n      }\n    }\n    if (r.nextBoolean()) {\n      int maxNumThreadStates = rarely(r) ? _TestUtil.nextInt(r, 5, 20) // crazy value\n          : _TestUtil.nextInt(r, 1, 4); // reasonable value\n      if (rarely(r)) {\n        // random thread pool\n        c.setIndexerThreadPool(new RandomDocumentsWriterPerThreadPool(maxNumThreadStates, r));\n      } else {\n        // random thread pool\n        c.setIndexerThreadPool(new ThreadAffinityDocumentsWriterThreadPool(maxNumThreadStates));\n      }\n    }\n\n    if (rarely(r)) {\n      c.setMergePolicy(new MockRandomMergePolicy(r));\n    } else if (r.nextBoolean()) {\n      c.setMergePolicy(newTieredMergePolicy());\n    } else {\n      c.setMergePolicy(newLogMergePolicy());\n    }\n\n    c.setReaderPooling(r.nextBoolean());\n    c.setReaderTermsIndexDivisor(_TestUtil.nextInt(r, 1, 4));\n    return c;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7b91922b55d15444d554721b352861d028eb8278":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"16f6363e049bd8052e8241efbd4e877e20c7680f":["8be580b58bcc650d428f3f22de81cadcf51d650a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b":["16f6363e049bd8052e8241efbd4e877e20c7680f"],"8be580b58bcc650d428f3f22de81cadcf51d650a":["7b91922b55d15444d554721b352861d028eb8278"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"7b91922b55d15444d554721b352861d028eb8278":["8be580b58bcc650d428f3f22de81cadcf51d650a"],"16f6363e049bd8052e8241efbd4e877e20c7680f":["1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7b91922b55d15444d554721b352861d028eb8278"],"8be580b58bcc650d428f3f22de81cadcf51d650a":["16f6363e049bd8052e8241efbd4e877e20c7680f"],"1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}