{"path":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/prefix/tree/DateRangePrefixTreeTest#testParseCalendar().mjava","commits":[{"id":"5e5b3d1ec8b5f671731ced50c3f94a717677c09f","date":1556685139,"type":0,"author":"Thomas Lemm√©","isMerge":false,"pathNew":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/prefix/tree/DateRangePrefixTreeTest#testParseCalendar().mjava","pathOld":"/dev/null","sourceNew":"  public void testParseCalendar() throws ParseException {\n    Instant expected = OffsetDateTime.of(1984, 12, 18, 12, 34, 56, 100000000, ZoneOffset.UTC).toInstant();\n\n    assertEquals(expected, tree.parseCalendar(\"1984-12-18T12:34:56.1Z\").toInstant());\n    assertEquals(expected.with(ChronoField.MILLI_OF_SECOND, 10), tree.parseCalendar(\"1984-12-18T12:34:56.01Z\").toInstant());\n    assertEquals(expected.with(ChronoField.MILLI_OF_SECOND, 1), tree.parseCalendar(\"1984-12-18T12:34:56.001Z\").toInstant());\n    assertEquals(expected, tree.parseCalendar(\"1984-12-18T12:34:56.1000Z\").toInstant());\n    assertEquals(expected, tree.parseCalendar(\"1984-12-18T12:34:56.100000000Z\").toInstant());\n    assertEquals(expected.with(ChronoField.NANO_OF_SECOND, 0), tree.parseCalendar(\"1984-12-18T12:34:56Z\").toInstant());\n    // decimal places are simply cut off as rounding may affect the \"seconds\" part of the calender which was set before\n    assertEquals(expected.with(ChronoField.MILLI_OF_SECOND, 999), tree.parseCalendar(\"1984-12-18T12:34:56.9999Z\").toInstant());\n\n    assertEquals(expected, tree.parseCalendar(\"1984-12-18T12:34:56.1\").toInstant());\n    assertEquals(expected.with(ChronoField.MILLI_OF_SECOND, 10), tree.parseCalendar(\"1984-12-18T12:34:56.01\").toInstant());\n    assertEquals(expected.with(ChronoField.MILLI_OF_SECOND, 1), tree.parseCalendar(\"1984-12-18T12:34:56.001\").toInstant());\n    assertEquals(expected, tree.parseCalendar(\"1984-12-18T12:34:56.1000\").toInstant());\n    assertEquals(expected, tree.parseCalendar(\"1984-12-18T12:34:56.100000000\").toInstant());\n    assertEquals(expected.with(ChronoField.NANO_OF_SECOND, 0), tree.parseCalendar(\"1984-12-18T12:34:56\").toInstant());\n    assertEquals(expected.with(ChronoField.MILLI_OF_SECOND, 999), tree.parseCalendar(\"1984-12-18T12:34:56.9999\").toInstant());\n    \n    assertEquals(OffsetDateTime.parse(\"1984-12-18T12:34:56.01Z\", ISO_DATE_TIME).get(ChronoField.MILLI_OF_SECOND), 10);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5e5b3d1ec8b5f671731ced50c3f94a717677c09f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5e5b3d1ec8b5f671731ced50c3f94a717677c09f"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5e5b3d1ec8b5f671731ced50c3f94a717677c09f"],"5e5b3d1ec8b5f671731ced50c3f94a717677c09f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}