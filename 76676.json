{"path":"lucene/src/java/org/apache/lucene/index/IndexReader#termPositions(Term).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#termPositions(Term).mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#termPositions(Term).mjava","sourceNew":"  /** Returns an enumeration of all the documents which contain\n   * <code>term</code>.  For each document, in addition to the document number\n   * and frequency of the term in that document, a list of all of the ordinal\n   * positions of the term in the document is available.  Thus, this method\n   * implements the mapping:\n   *\n   * <p><ul>\n   * Term &nbsp;&nbsp; =&gt; &nbsp;&nbsp; &lt;docNum, freq,\n   * &lt;pos<sub>1</sub>, pos<sub>2</sub>, ...\n   * pos<sub>freq-1</sub>&gt;\n   * &gt;<sup>*</sup>\n   * </ul>\n   * <p> This positional information facilitates phrase and proximity searching.\n   * <p>The enumeration is ordered by document number.  Each document number is\n   * greater than all that precede it in the enumeration.\n   * @throws IOException if there is a low-level IO error\n   */\n  public TermPositions termPositions(Term term) throws IOException {\n    ensureOpen();\n    TermPositions termPositions = termPositions();\n    termPositions.seek(term);\n    return termPositions;\n  }\n\n","sourceOld":"  /** Returns an enumeration of all the documents which contain\n   * <code>term</code>.  For each document, in addition to the document number\n   * and frequency of the term in that document, a list of all of the ordinal\n   * positions of the term in the document is available.  Thus, this method\n   * implements the mapping:\n   *\n   * <p><ul>\n   * Term &nbsp;&nbsp; =&gt; &nbsp;&nbsp; &lt;docNum, freq,\n   * &lt;pos<sub>1</sub>, pos<sub>2</sub>, ...\n   * pos<sub>freq-1</sub>&gt;\n   * &gt;<sup>*</sup>\n   * </ul>\n   * <p> This positional information facilitates phrase and proximity searching.\n   * <p>The enumeration is ordered by document number.  Each document number is\n   * greater than all that precede it in the enumeration.\n   * @throws IOException if there is a low-level IO error\n   */\n  public TermPositions termPositions(Term term) throws IOException {\n    ensureOpen();\n    TermPositions termPositions = termPositions();\n    termPositions.seek(term);\n    return termPositions;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#termPositions(Term).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#termPositions(Term).mjava","sourceNew":"  /** Returns an enumeration of all the documents which contain\n   * <code>term</code>.  For each document, in addition to the document number\n   * and frequency of the term in that document, a list of all of the ordinal\n   * positions of the term in the document is available.  Thus, this method\n   * implements the mapping:\n   *\n   * <p><ul>\n   * Term &nbsp;&nbsp; =&gt; &nbsp;&nbsp; &lt;docNum, freq,\n   * &lt;pos<sub>1</sub>, pos<sub>2</sub>, ...\n   * pos<sub>freq-1</sub>&gt;\n   * &gt;<sup>*</sup>\n   * </ul>\n   * <p> This positional information facilitates phrase and proximity searching.\n   * <p>The enumeration is ordered by document number.  Each document number is\n   * greater than all that precede it in the enumeration.\n   * @deprecated Please switch the flex API ({@link\n   * #termDocsEnum}) instead\n   * @throws IOException if there is a low-level IO error\n   */\n  @Deprecated\n  public TermPositions termPositions(Term term) throws IOException {\n    ensureOpen();\n    TermPositions termPositions = termPositions();\n    termPositions.seek(term);\n    return termPositions;\n  }\n\n","sourceOld":"  /** Returns an enumeration of all the documents which contain\n   * <code>term</code>.  For each document, in addition to the document number\n   * and frequency of the term in that document, a list of all of the ordinal\n   * positions of the term in the document is available.  Thus, this method\n   * implements the mapping:\n   *\n   * <p><ul>\n   * Term &nbsp;&nbsp; =&gt; &nbsp;&nbsp; &lt;docNum, freq,\n   * &lt;pos<sub>1</sub>, pos<sub>2</sub>, ...\n   * pos<sub>freq-1</sub>&gt;\n   * &gt;<sup>*</sup>\n   * </ul>\n   * <p> This positional information facilitates phrase and proximity searching.\n   * <p>The enumeration is ordered by document number.  Each document number is\n   * greater than all that precede it in the enumeration.\n   * @throws IOException if there is a low-level IO error\n   */\n  public TermPositions termPositions(Term term) throws IOException {\n    ensureOpen();\n    TermPositions termPositions = termPositions();\n    termPositions.seek(term);\n    return termPositions;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28427ef110c4c5bf5b4057731b83110bd1e13724","date":1276701452,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#termPositions(Term).mjava","sourceNew":null,"sourceOld":"  /** Returns an enumeration of all the documents which contain\n   * <code>term</code>.  For each document, in addition to the document number\n   * and frequency of the term in that document, a list of all of the ordinal\n   * positions of the term in the document is available.  Thus, this method\n   * implements the mapping:\n   *\n   * <p><ul>\n   * Term &nbsp;&nbsp; =&gt; &nbsp;&nbsp; &lt;docNum, freq,\n   * &lt;pos<sub>1</sub>, pos<sub>2</sub>, ...\n   * pos<sub>freq-1</sub>&gt;\n   * &gt;<sup>*</sup>\n   * </ul>\n   * <p> This positional information facilitates phrase and proximity searching.\n   * <p>The enumeration is ordered by document number.  Each document number is\n   * greater than all that precede it in the enumeration.\n   * @deprecated Please switch the flex API ({@link\n   * #termDocsEnum}) instead\n   * @throws IOException if there is a low-level IO error\n   */\n  @Deprecated\n  public TermPositions termPositions(Term term) throws IOException {\n    ensureOpen();\n    TermPositions termPositions = termPositions();\n    termPositions.seek(term);\n    return termPositions;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#termPositions(Term).mjava","sourceNew":null,"sourceOld":"  /** Returns an enumeration of all the documents which contain\n   * <code>term</code>.  For each document, in addition to the document number\n   * and frequency of the term in that document, a list of all of the ordinal\n   * positions of the term in the document is available.  Thus, this method\n   * implements the mapping:\n   *\n   * <p><ul>\n   * Term &nbsp;&nbsp; =&gt; &nbsp;&nbsp; &lt;docNum, freq,\n   * &lt;pos<sub>1</sub>, pos<sub>2</sub>, ...\n   * pos<sub>freq-1</sub>&gt;\n   * &gt;<sup>*</sup>\n   * </ul>\n   * <p> This positional information facilitates phrase and proximity searching.\n   * <p>The enumeration is ordered by document number.  Each document number is\n   * greater than all that precede it in the enumeration.\n   * @deprecated Please switch the flex API ({@link\n   * #termDocsEnum}) instead\n   * @throws IOException if there is a low-level IO error\n   */\n  @Deprecated\n  public TermPositions termPositions(Term term) throws IOException {\n    ensureOpen();\n    TermPositions termPositions = termPositions();\n    termPositions.seek(term);\n    return termPositions;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"28427ef110c4c5bf5b4057731b83110bd1e13724":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"5f4e87790277826a2aea119328600dfb07761f32":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","28427ef110c4c5bf5b4057731b83110bd1e13724"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28427ef110c4c5bf5b4057731b83110bd1e13724"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"28427ef110c4c5bf5b4057731b83110bd1e13724":["5f4e87790277826a2aea119328600dfb07761f32","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["28427ef110c4c5bf5b4057731b83110bd1e13724","5f4e87790277826a2aea119328600dfb07761f32"],"5f4e87790277826a2aea119328600dfb07761f32":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5f4e87790277826a2aea119328600dfb07761f32","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}