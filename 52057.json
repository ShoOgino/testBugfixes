{"path":"modules/facet/src/test/org/apache/lucene/facet/search/TestMultipleCategoryLists#testDefault().mjava","commits":[{"id":"89f15687f60bd49cd3d9de427e85c17fd9397d61","date":1309381327,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"modules/facet/src/test/org/apache/lucene/facet/search/TestMultipleCategoryLists#testDefault().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testDefault() throws Exception {\n    Directory[][] dirs = getDirs();\n    // create and open an index writer\n    IndexWriter iw = new IndexWriter(dirs[0][0], new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    // create and open a taxonomy writer\n    TaxonomyWriter tw = new LuceneTaxonomyWriter(dirs[0][1], OpenMode.CREATE);\n\n    /**\n     * Configure with no custom counting lists\n     */\n    PerDimensionIndexingParams iParams = new PerDimensionIndexingParams();\n\n    seedIndex(iw, tw, iParams);\n\n    iw.commit();\n    tw.commit();\n\n    // prepare index reader and taxonomy.\n    TaxonomyReader tr = new LuceneTaxonomyReader(dirs[0][1]);\n    IndexReader ir = IndexReader.open(dirs[0][0]);\n\n    // prepare searcher to search against\n    IndexSearcher searcher = new IndexSearcher(ir);\n\n    FacetsCollector facetsCollector = performSearch(iParams, tr, ir,\n        searcher);\n\n    // Obtain facets results and hand-test them\n    assertCorrectResults(facetsCollector);\n\n    DocsEnum td = MultiFields.getTermDocsEnum(ir, MultiFields.getDeletedDocs(ir), \"$facets\", new BytesRef(\"$fulltree$\"));\n    assertTrue(td.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n\n    tr.close();\n    ir.close();\n    searcher.close();\n    iw.close();\n    tw.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a4df66e06e0c3b520d7d5941e1c043076f06f17","date":1309454196,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/facet/src/test/org/apache/lucene/facet/search/TestMultipleCategoryLists#testDefault().mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/search/TestMultipleCategoryLists#testDefault().mjava","sourceNew":"  @Test\n  public void testDefault() throws Exception {\n    Directory[][] dirs = getDirs();\n    // create and open an index writer\n    RandomIndexWriter iw = new RandomIndexWriter(random, dirs[0][0], newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)));\n    // create and open a taxonomy writer\n    TaxonomyWriter tw = new LuceneTaxonomyWriter(dirs[0][1], OpenMode.CREATE);\n\n    /**\n     * Configure with no custom counting lists\n     */\n    PerDimensionIndexingParams iParams = new PerDimensionIndexingParams();\n\n    seedIndex(iw, tw, iParams);\n\n    IndexReader ir = iw.getReader();\n    tw.commit();\n\n    // prepare index reader and taxonomy.\n    TaxonomyReader tr = new LuceneTaxonomyReader(dirs[0][1]);\n\n    // prepare searcher to search against\n    IndexSearcher searcher = newSearcher(ir);\n\n    FacetsCollector facetsCollector = performSearch(iParams, tr, ir,\n        searcher);\n\n    // Obtain facets results and hand-test them\n    assertCorrectResults(facetsCollector);\n\n    DocsEnum td = MultiFields.getTermDocsEnum(ir, MultiFields.getDeletedDocs(ir), \"$facets\", new BytesRef(\"$fulltree$\"));\n    assertTrue(td.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n\n    tr.close();\n    ir.close();\n    searcher.close();\n    iw.close();\n    tw.close();\n    IOUtils.closeSafely(false, dirs[0]);\n  }\n\n","sourceOld":"  @Test\n  public void testDefault() throws Exception {\n    Directory[][] dirs = getDirs();\n    // create and open an index writer\n    IndexWriter iw = new IndexWriter(dirs[0][0], new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    // create and open a taxonomy writer\n    TaxonomyWriter tw = new LuceneTaxonomyWriter(dirs[0][1], OpenMode.CREATE);\n\n    /**\n     * Configure with no custom counting lists\n     */\n    PerDimensionIndexingParams iParams = new PerDimensionIndexingParams();\n\n    seedIndex(iw, tw, iParams);\n\n    iw.commit();\n    tw.commit();\n\n    // prepare index reader and taxonomy.\n    TaxonomyReader tr = new LuceneTaxonomyReader(dirs[0][1]);\n    IndexReader ir = IndexReader.open(dirs[0][0]);\n\n    // prepare searcher to search against\n    IndexSearcher searcher = new IndexSearcher(ir);\n\n    FacetsCollector facetsCollector = performSearch(iParams, tr, ir,\n        searcher);\n\n    // Obtain facets results and hand-test them\n    assertCorrectResults(facetsCollector);\n\n    DocsEnum td = MultiFields.getTermDocsEnum(ir, MultiFields.getDeletedDocs(ir), \"$facets\", new BytesRef(\"$fulltree$\"));\n    assertTrue(td.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n\n    tr.close();\n    ir.close();\n    searcher.close();\n    iw.close();\n    tw.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","date":1309960478,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"modules/facet/src/test/org/apache/lucene/facet/search/TestMultipleCategoryLists#testDefault().mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/search/TestMultipleCategoryLists#testDefault().mjava","sourceNew":"  @Test\n  public void testDefault() throws Exception {\n    Directory[][] dirs = getDirs();\n    // create and open an index writer\n    RandomIndexWriter iw = new RandomIndexWriter(random, dirs[0][0], newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)));\n    // create and open a taxonomy writer\n    TaxonomyWriter tw = new LuceneTaxonomyWriter(dirs[0][1], OpenMode.CREATE);\n\n    /**\n     * Configure with no custom counting lists\n     */\n    PerDimensionIndexingParams iParams = new PerDimensionIndexingParams();\n\n    seedIndex(iw, tw, iParams);\n\n    IndexReader ir = iw.getReader();\n    tw.commit();\n\n    // prepare index reader and taxonomy.\n    TaxonomyReader tr = new LuceneTaxonomyReader(dirs[0][1]);\n\n    // prepare searcher to search against\n    IndexSearcher searcher = newSearcher(ir);\n\n    FacetsCollector facetsCollector = performSearch(iParams, tr, ir,\n        searcher);\n\n    // Obtain facets results and hand-test them\n    assertCorrectResults(facetsCollector);\n\n    DocsEnum td = MultiFields.getTermDocsEnum(ir, MultiFields.getLiveDocs(ir), \"$facets\", new BytesRef(\"$fulltree$\"));\n    assertTrue(td.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n\n    tr.close();\n    ir.close();\n    searcher.close();\n    iw.close();\n    tw.close();\n    IOUtils.closeSafely(false, dirs[0]);\n  }\n\n","sourceOld":"  @Test\n  public void testDefault() throws Exception {\n    Directory[][] dirs = getDirs();\n    // create and open an index writer\n    RandomIndexWriter iw = new RandomIndexWriter(random, dirs[0][0], newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)));\n    // create and open a taxonomy writer\n    TaxonomyWriter tw = new LuceneTaxonomyWriter(dirs[0][1], OpenMode.CREATE);\n\n    /**\n     * Configure with no custom counting lists\n     */\n    PerDimensionIndexingParams iParams = new PerDimensionIndexingParams();\n\n    seedIndex(iw, tw, iParams);\n\n    IndexReader ir = iw.getReader();\n    tw.commit();\n\n    // prepare index reader and taxonomy.\n    TaxonomyReader tr = new LuceneTaxonomyReader(dirs[0][1]);\n\n    // prepare searcher to search against\n    IndexSearcher searcher = newSearcher(ir);\n\n    FacetsCollector facetsCollector = performSearch(iParams, tr, ir,\n        searcher);\n\n    // Obtain facets results and hand-test them\n    assertCorrectResults(facetsCollector);\n\n    DocsEnum td = MultiFields.getTermDocsEnum(ir, MultiFields.getDeletedDocs(ir), \"$facets\", new BytesRef(\"$fulltree$\"));\n    assertTrue(td.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n\n    tr.close();\n    ir.close();\n    searcher.close();\n    iw.close();\n    tw.close();\n    IOUtils.closeSafely(false, dirs[0]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/facet/src/test/org/apache/lucene/facet/search/TestMultipleCategoryLists#testDefault().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testDefault() throws Exception {\n    Directory[][] dirs = getDirs();\n    // create and open an index writer\n    RandomIndexWriter iw = new RandomIndexWriter(random, dirs[0][0], newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)));\n    // create and open a taxonomy writer\n    TaxonomyWriter tw = new LuceneTaxonomyWriter(dirs[0][1], OpenMode.CREATE);\n\n    /**\n     * Configure with no custom counting lists\n     */\n    PerDimensionIndexingParams iParams = new PerDimensionIndexingParams();\n\n    seedIndex(iw, tw, iParams);\n\n    IndexReader ir = iw.getReader();\n    tw.commit();\n\n    // prepare index reader and taxonomy.\n    TaxonomyReader tr = new LuceneTaxonomyReader(dirs[0][1]);\n\n    // prepare searcher to search against\n    IndexSearcher searcher = newSearcher(ir);\n\n    FacetsCollector facetsCollector = performSearch(iParams, tr, ir,\n        searcher);\n\n    // Obtain facets results and hand-test them\n    assertCorrectResults(facetsCollector);\n\n    DocsEnum td = MultiFields.getTermDocsEnum(ir, MultiFields.getLiveDocs(ir), \"$facets\", new BytesRef(\"$fulltree$\"));\n    assertTrue(td.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n\n    tr.close();\n    ir.close();\n    searcher.close();\n    iw.close();\n    tw.close();\n    IOUtils.closeSafely(false, dirs[0]);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/facet/src/test/org/apache/lucene/facet/search/TestMultipleCategoryLists#testDefault().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testDefault() throws Exception {\n    Directory[][] dirs = getDirs();\n    // create and open an index writer\n    RandomIndexWriter iw = new RandomIndexWriter(random, dirs[0][0], newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)));\n    // create and open a taxonomy writer\n    TaxonomyWriter tw = new LuceneTaxonomyWriter(dirs[0][1], OpenMode.CREATE);\n\n    /**\n     * Configure with no custom counting lists\n     */\n    PerDimensionIndexingParams iParams = new PerDimensionIndexingParams();\n\n    seedIndex(iw, tw, iParams);\n\n    IndexReader ir = iw.getReader();\n    tw.commit();\n\n    // prepare index reader and taxonomy.\n    TaxonomyReader tr = new LuceneTaxonomyReader(dirs[0][1]);\n\n    // prepare searcher to search against\n    IndexSearcher searcher = newSearcher(ir);\n\n    FacetsCollector facetsCollector = performSearch(iParams, tr, ir,\n        searcher);\n\n    // Obtain facets results and hand-test them\n    assertCorrectResults(facetsCollector);\n\n    DocsEnum td = MultiFields.getTermDocsEnum(ir, MultiFields.getLiveDocs(ir), \"$facets\", new BytesRef(\"$fulltree$\"));\n    assertTrue(td.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n\n    tr.close();\n    ir.close();\n    searcher.close();\n    iw.close();\n    tw.close();\n    IOUtils.closeSafely(false, dirs[0]);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"24230fe54121f9be9d85f2c2067536296785e421","date":1314462346,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"modules/facet/src/test/org/apache/lucene/facet/search/TestMultipleCategoryLists#testDefault().mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/search/TestMultipleCategoryLists#testDefault().mjava","sourceNew":"  @Test\n  public void testDefault() throws Exception {\n    Directory[][] dirs = getDirs();\n    // create and open an index writer\n    RandomIndexWriter iw = new RandomIndexWriter(random, dirs[0][0], newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)));\n    // create and open a taxonomy writer\n    TaxonomyWriter tw = new LuceneTaxonomyWriter(dirs[0][1], OpenMode.CREATE);\n\n    /**\n     * Configure with no custom counting lists\n     */\n    PerDimensionIndexingParams iParams = new PerDimensionIndexingParams();\n\n    seedIndex(iw, tw, iParams);\n\n    IndexReader ir = iw.getReader();\n    tw.commit();\n\n    // prepare index reader and taxonomy.\n    TaxonomyReader tr = new LuceneTaxonomyReader(dirs[0][1]);\n\n    // prepare searcher to search against\n    IndexSearcher searcher = newSearcher(ir);\n\n    FacetsCollector facetsCollector = performSearch(iParams, tr, ir,\n        searcher);\n\n    // Obtain facets results and hand-test them\n    assertCorrectResults(facetsCollector);\n\n    DocsEnum td = MultiFields.getTermDocsEnum(ir, MultiFields.getLiveDocs(ir), \"$facets\", new BytesRef(\"$fulltree$\"));\n    assertTrue(td.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n\n    tr.close();\n    ir.close();\n    searcher.close();\n    iw.close();\n    tw.close();\n    IOUtils.close(dirs[0]);\n  }\n\n","sourceOld":"  @Test\n  public void testDefault() throws Exception {\n    Directory[][] dirs = getDirs();\n    // create and open an index writer\n    RandomIndexWriter iw = new RandomIndexWriter(random, dirs[0][0], newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)));\n    // create and open a taxonomy writer\n    TaxonomyWriter tw = new LuceneTaxonomyWriter(dirs[0][1], OpenMode.CREATE);\n\n    /**\n     * Configure with no custom counting lists\n     */\n    PerDimensionIndexingParams iParams = new PerDimensionIndexingParams();\n\n    seedIndex(iw, tw, iParams);\n\n    IndexReader ir = iw.getReader();\n    tw.commit();\n\n    // prepare index reader and taxonomy.\n    TaxonomyReader tr = new LuceneTaxonomyReader(dirs[0][1]);\n\n    // prepare searcher to search against\n    IndexSearcher searcher = newSearcher(ir);\n\n    FacetsCollector facetsCollector = performSearch(iParams, tr, ir,\n        searcher);\n\n    // Obtain facets results and hand-test them\n    assertCorrectResults(facetsCollector);\n\n    DocsEnum td = MultiFields.getTermDocsEnum(ir, MultiFields.getLiveDocs(ir), \"$facets\", new BytesRef(\"$fulltree$\"));\n    assertTrue(td.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n\n    tr.close();\n    ir.close();\n    searcher.close();\n    iw.close();\n    tw.close();\n    IOUtils.closeSafely(false, dirs[0]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ea469eab8fd0f3032f4fcde1c644a721e8309d3b","date":1320301582,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"modules/facet/src/test/org/apache/lucene/facet/search/TestMultipleCategoryLists#testDefault().mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/search/TestMultipleCategoryLists#testDefault().mjava","sourceNew":"  @Test\n  public void testDefault() throws Exception {\n    Directory[][] dirs = getDirs();\n    // create and open an index writer\n    RandomIndexWriter iw = new RandomIndexWriter(random, dirs[0][0], newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)));\n    // create and open a taxonomy writer\n    TaxonomyWriter tw = new DirectoryTaxonomyWriter(dirs[0][1], OpenMode.CREATE);\n\n    /**\n     * Configure with no custom counting lists\n     */\n    PerDimensionIndexingParams iParams = new PerDimensionIndexingParams();\n\n    seedIndex(iw, tw, iParams);\n\n    IndexReader ir = iw.getReader();\n    tw.commit();\n\n    // prepare index reader and taxonomy.\n    TaxonomyReader tr = new DirectoryTaxonomyReader(dirs[0][1]);\n\n    // prepare searcher to search against\n    IndexSearcher searcher = newSearcher(ir);\n\n    FacetsCollector facetsCollector = performSearch(iParams, tr, ir,\n        searcher);\n\n    // Obtain facets results and hand-test them\n    assertCorrectResults(facetsCollector);\n\n    DocsEnum td = MultiFields.getTermDocsEnum(ir, MultiFields.getLiveDocs(ir), \"$facets\", new BytesRef(\"$fulltree$\"));\n    assertTrue(td.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n\n    tr.close();\n    ir.close();\n    searcher.close();\n    iw.close();\n    tw.close();\n    IOUtils.close(dirs[0]);\n  }\n\n","sourceOld":"  @Test\n  public void testDefault() throws Exception {\n    Directory[][] dirs = getDirs();\n    // create and open an index writer\n    RandomIndexWriter iw = new RandomIndexWriter(random, dirs[0][0], newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)));\n    // create and open a taxonomy writer\n    TaxonomyWriter tw = new LuceneTaxonomyWriter(dirs[0][1], OpenMode.CREATE);\n\n    /**\n     * Configure with no custom counting lists\n     */\n    PerDimensionIndexingParams iParams = new PerDimensionIndexingParams();\n\n    seedIndex(iw, tw, iParams);\n\n    IndexReader ir = iw.getReader();\n    tw.commit();\n\n    // prepare index reader and taxonomy.\n    TaxonomyReader tr = new LuceneTaxonomyReader(dirs[0][1]);\n\n    // prepare searcher to search against\n    IndexSearcher searcher = newSearcher(ir);\n\n    FacetsCollector facetsCollector = performSearch(iParams, tr, ir,\n        searcher);\n\n    // Obtain facets results and hand-test them\n    assertCorrectResults(facetsCollector);\n\n    DocsEnum td = MultiFields.getTermDocsEnum(ir, MultiFields.getLiveDocs(ir), \"$facets\", new BytesRef(\"$fulltree$\"));\n    assertTrue(td.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n\n    tr.close();\n    ir.close();\n    searcher.close();\n    iw.close();\n    tw.close();\n    IOUtils.close(dirs[0]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"872cff1d3a554e0cd64014cd97f88d3002b0f491","date":1323024658,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"modules/facet/src/test/org/apache/lucene/facet/search/TestMultipleCategoryLists#testDefault().mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/search/TestMultipleCategoryLists#testDefault().mjava","sourceNew":"  @Test\n  public void testDefault() throws Exception {\n    Directory[][] dirs = getDirs();\n    // create and open an index writer\n    RandomIndexWriter iw = new RandomIndexWriter(random, dirs[0][0], newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)));\n    // create and open a taxonomy writer\n    TaxonomyWriter tw = new DirectoryTaxonomyWriter(dirs[0][1], OpenMode.CREATE);\n\n    /**\n     * Configure with no custom counting lists\n     */\n    PerDimensionIndexingParams iParams = new PerDimensionIndexingParams();\n\n    seedIndex(iw, tw, iParams);\n\n    IndexReader ir = iw.getReader();\n    tw.commit();\n\n    // prepare index reader and taxonomy.\n    TaxonomyReader tr = new DirectoryTaxonomyReader(dirs[0][1]);\n\n    // prepare searcher to search against\n    IndexSearcher searcher = newSearcher(ir);\n\n    FacetsCollector facetsCollector = performSearch(iParams, tr, ir,\n        searcher);\n\n    // Obtain facets results and hand-test them\n    assertCorrectResults(facetsCollector);\n\n    DocsEnum td = _TestUtil.docs(random, ir, \"$facets\", new BytesRef(\"$fulltree$\"), MultiFields.getLiveDocs(ir), null, false);\n    assertTrue(td.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n\n    tr.close();\n    ir.close();\n    searcher.close();\n    iw.close();\n    tw.close();\n    IOUtils.close(dirs[0]);\n  }\n\n","sourceOld":"  @Test\n  public void testDefault() throws Exception {\n    Directory[][] dirs = getDirs();\n    // create and open an index writer\n    RandomIndexWriter iw = new RandomIndexWriter(random, dirs[0][0], newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)));\n    // create and open a taxonomy writer\n    TaxonomyWriter tw = new DirectoryTaxonomyWriter(dirs[0][1], OpenMode.CREATE);\n\n    /**\n     * Configure with no custom counting lists\n     */\n    PerDimensionIndexingParams iParams = new PerDimensionIndexingParams();\n\n    seedIndex(iw, tw, iParams);\n\n    IndexReader ir = iw.getReader();\n    tw.commit();\n\n    // prepare index reader and taxonomy.\n    TaxonomyReader tr = new DirectoryTaxonomyReader(dirs[0][1]);\n\n    // prepare searcher to search against\n    IndexSearcher searcher = newSearcher(ir);\n\n    FacetsCollector facetsCollector = performSearch(iParams, tr, ir,\n        searcher);\n\n    // Obtain facets results and hand-test them\n    assertCorrectResults(facetsCollector);\n\n    DocsEnum td = MultiFields.getTermDocsEnum(ir, MultiFields.getLiveDocs(ir), \"$facets\", new BytesRef(\"$fulltree$\"));\n    assertTrue(td.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n\n    tr.close();\n    ir.close();\n    searcher.close();\n    iw.close();\n    tw.close();\n    IOUtils.close(dirs[0]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b65b350ca9588f9fc76ce7d6804160d06c45ff42","date":1323026297,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"modules/facet/src/test/org/apache/lucene/facet/search/TestMultipleCategoryLists#testDefault().mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/search/TestMultipleCategoryLists#testDefault().mjava","sourceNew":"  @Test\n  public void testDefault() throws Exception {\n    Directory[][] dirs = getDirs();\n    // create and open an index writer\n    RandomIndexWriter iw = new RandomIndexWriter(random, dirs[0][0], newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)));\n    // create and open a taxonomy writer\n    TaxonomyWriter tw = new DirectoryTaxonomyWriter(dirs[0][1], OpenMode.CREATE);\n\n    /**\n     * Configure with no custom counting lists\n     */\n    PerDimensionIndexingParams iParams = new PerDimensionIndexingParams();\n\n    seedIndex(iw, tw, iParams);\n\n    IndexReader ir = iw.getReader();\n    tw.commit();\n\n    // prepare index reader and taxonomy.\n    TaxonomyReader tr = new DirectoryTaxonomyReader(dirs[0][1]);\n\n    // prepare searcher to search against\n    IndexSearcher searcher = newSearcher(ir);\n\n    FacetsCollector facetsCollector = performSearch(iParams, tr, ir,\n        searcher);\n\n    // Obtain facets results and hand-test them\n    assertCorrectResults(facetsCollector);\n\n    DocsEnum td = _TestUtil.docs(random, ir, \"$facets\", new BytesRef(\"$fulltree$\"), MultiFields.getLiveDocs(ir), null, false);\n    assertTrue(td.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n\n    tr.close();\n    ir.close();\n    searcher.close();\n    iw.close();\n    tw.close();\n    IOUtils.close(dirs[0]);\n  }\n\n","sourceOld":"  @Test\n  public void testDefault() throws Exception {\n    Directory[][] dirs = getDirs();\n    // create and open an index writer\n    RandomIndexWriter iw = new RandomIndexWriter(random, dirs[0][0], newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)));\n    // create and open a taxonomy writer\n    TaxonomyWriter tw = new DirectoryTaxonomyWriter(dirs[0][1], OpenMode.CREATE);\n\n    /**\n     * Configure with no custom counting lists\n     */\n    PerDimensionIndexingParams iParams = new PerDimensionIndexingParams();\n\n    seedIndex(iw, tw, iParams);\n\n    IndexReader ir = iw.getReader();\n    tw.commit();\n\n    // prepare index reader and taxonomy.\n    TaxonomyReader tr = new DirectoryTaxonomyReader(dirs[0][1]);\n\n    // prepare searcher to search against\n    IndexSearcher searcher = newSearcher(ir);\n\n    FacetsCollector facetsCollector = performSearch(iParams, tr, ir,\n        searcher);\n\n    // Obtain facets results and hand-test them\n    assertCorrectResults(facetsCollector);\n\n    DocsEnum td = MultiFields.getTermDocsEnum(ir, MultiFields.getLiveDocs(ir), \"$facets\", new BytesRef(\"$fulltree$\"));\n    assertTrue(td.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n\n    tr.close();\n    ir.close();\n    searcher.close();\n    iw.close();\n    tw.close();\n    IOUtils.close(dirs[0]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e7c2454a6a8237bfd0e953f5b940838408c9055","date":1323649300,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/facet/src/test/org/apache/lucene/facet/search/TestMultipleCategoryLists#testDefault().mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/search/TestMultipleCategoryLists#testDefault().mjava","sourceNew":"  @Test\n  public void testDefault() throws Exception {\n    Directory[][] dirs = getDirs();\n    // create and open an index writer\n    RandomIndexWriter iw = new RandomIndexWriter(random, dirs[0][0], newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)));\n    // create and open a taxonomy writer\n    TaxonomyWriter tw = new DirectoryTaxonomyWriter(dirs[0][1], OpenMode.CREATE);\n\n    /**\n     * Configure with no custom counting lists\n     */\n    PerDimensionIndexingParams iParams = new PerDimensionIndexingParams();\n\n    seedIndex(iw, tw, iParams);\n\n    IndexReader ir = iw.getReader();\n    tw.commit();\n\n    // prepare index reader and taxonomy.\n    TaxonomyReader tr = new DirectoryTaxonomyReader(dirs[0][1]);\n\n    // prepare searcher to search against\n    IndexSearcher searcher = newSearcher(ir);\n\n    FacetsCollector facetsCollector = performSearch(iParams, tr, ir,\n        searcher);\n\n    // Obtain facets results and hand-test them\n    assertCorrectResults(facetsCollector);\n\n    DocsEnum td = _TestUtil.docs(random, ir, \"$facets\", new BytesRef(\"$fulltree$\"), MultiFields.getLiveDocs(ir), null, false);\n    assertTrue(td.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n\n    tr.close();\n    ir.close();\n    iw.close();\n    tw.close();\n    IOUtils.close(dirs[0]);\n  }\n\n","sourceOld":"  @Test\n  public void testDefault() throws Exception {\n    Directory[][] dirs = getDirs();\n    // create and open an index writer\n    RandomIndexWriter iw = new RandomIndexWriter(random, dirs[0][0], newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)));\n    // create and open a taxonomy writer\n    TaxonomyWriter tw = new DirectoryTaxonomyWriter(dirs[0][1], OpenMode.CREATE);\n\n    /**\n     * Configure with no custom counting lists\n     */\n    PerDimensionIndexingParams iParams = new PerDimensionIndexingParams();\n\n    seedIndex(iw, tw, iParams);\n\n    IndexReader ir = iw.getReader();\n    tw.commit();\n\n    // prepare index reader and taxonomy.\n    TaxonomyReader tr = new DirectoryTaxonomyReader(dirs[0][1]);\n\n    // prepare searcher to search against\n    IndexSearcher searcher = newSearcher(ir);\n\n    FacetsCollector facetsCollector = performSearch(iParams, tr, ir,\n        searcher);\n\n    // Obtain facets results and hand-test them\n    assertCorrectResults(facetsCollector);\n\n    DocsEnum td = _TestUtil.docs(random, ir, \"$facets\", new BytesRef(\"$fulltree$\"), MultiFields.getLiveDocs(ir), null, false);\n    assertTrue(td.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n\n    tr.close();\n    ir.close();\n    searcher.close();\n    iw.close();\n    tw.close();\n    IOUtils.close(dirs[0]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","date":1323720782,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"modules/facet/src/test/org/apache/lucene/facet/search/TestMultipleCategoryLists#testDefault().mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/search/TestMultipleCategoryLists#testDefault().mjava","sourceNew":"  @Test\n  public void testDefault() throws Exception {\n    Directory[][] dirs = getDirs();\n    // create and open an index writer\n    RandomIndexWriter iw = new RandomIndexWriter(random, dirs[0][0], newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)));\n    // create and open a taxonomy writer\n    TaxonomyWriter tw = new DirectoryTaxonomyWriter(dirs[0][1], OpenMode.CREATE);\n\n    /**\n     * Configure with no custom counting lists\n     */\n    PerDimensionIndexingParams iParams = new PerDimensionIndexingParams();\n\n    seedIndex(iw, tw, iParams);\n\n    IndexReader ir = iw.getReader();\n    tw.commit();\n\n    // prepare index reader and taxonomy.\n    TaxonomyReader tr = new DirectoryTaxonomyReader(dirs[0][1]);\n\n    // prepare searcher to search against\n    IndexSearcher searcher = newSearcher(ir);\n\n    FacetsCollector facetsCollector = performSearch(iParams, tr, ir,\n        searcher);\n\n    // Obtain facets results and hand-test them\n    assertCorrectResults(facetsCollector);\n\n    DocsEnum td = _TestUtil.docs(random, ir, \"$facets\", new BytesRef(\"$fulltree$\"), MultiFields.getLiveDocs(ir), null, false);\n    assertTrue(td.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n\n    tr.close();\n    ir.close();\n    iw.close();\n    tw.close();\n    IOUtils.close(dirs[0]);\n  }\n\n","sourceOld":"  @Test\n  public void testDefault() throws Exception {\n    Directory[][] dirs = getDirs();\n    // create and open an index writer\n    RandomIndexWriter iw = new RandomIndexWriter(random, dirs[0][0], newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)));\n    // create and open a taxonomy writer\n    TaxonomyWriter tw = new DirectoryTaxonomyWriter(dirs[0][1], OpenMode.CREATE);\n\n    /**\n     * Configure with no custom counting lists\n     */\n    PerDimensionIndexingParams iParams = new PerDimensionIndexingParams();\n\n    seedIndex(iw, tw, iParams);\n\n    IndexReader ir = iw.getReader();\n    tw.commit();\n\n    // prepare index reader and taxonomy.\n    TaxonomyReader tr = new DirectoryTaxonomyReader(dirs[0][1]);\n\n    // prepare searcher to search against\n    IndexSearcher searcher = newSearcher(ir);\n\n    FacetsCollector facetsCollector = performSearch(iParams, tr, ir,\n        searcher);\n\n    // Obtain facets results and hand-test them\n    assertCorrectResults(facetsCollector);\n\n    DocsEnum td = _TestUtil.docs(random, ir, \"$facets\", new BytesRef(\"$fulltree$\"), MultiFields.getLiveDocs(ir), null, false);\n    assertTrue(td.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n\n    tr.close();\n    ir.close();\n    searcher.close();\n    iw.close();\n    tw.close();\n    IOUtils.close(dirs[0]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"modules/facet/src/test/org/apache/lucene/facet/search/TestMultipleCategoryLists#testDefault().mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/search/TestMultipleCategoryLists#testDefault().mjava","sourceNew":"  @Test\n  public void testDefault() throws Exception {\n    Directory[][] dirs = getDirs();\n    // create and open an index writer\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dirs[0][0], newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false)));\n    // create and open a taxonomy writer\n    TaxonomyWriter tw = new DirectoryTaxonomyWriter(dirs[0][1], OpenMode.CREATE);\n\n    /**\n     * Configure with no custom counting lists\n     */\n    PerDimensionIndexingParams iParams = new PerDimensionIndexingParams();\n\n    seedIndex(iw, tw, iParams);\n\n    IndexReader ir = iw.getReader();\n    tw.commit();\n\n    // prepare index reader and taxonomy.\n    TaxonomyReader tr = new DirectoryTaxonomyReader(dirs[0][1]);\n\n    // prepare searcher to search against\n    IndexSearcher searcher = newSearcher(ir);\n\n    FacetsCollector facetsCollector = performSearch(iParams, tr, ir,\n        searcher);\n\n    // Obtain facets results and hand-test them\n    assertCorrectResults(facetsCollector);\n\n    DocsEnum td = _TestUtil.docs(random(), ir, \"$facets\", new BytesRef(\"$fulltree$\"), MultiFields.getLiveDocs(ir), null, false);\n    assertTrue(td.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n\n    tr.close();\n    ir.close();\n    iw.close();\n    tw.close();\n    IOUtils.close(dirs[0]);\n  }\n\n","sourceOld":"  @Test\n  public void testDefault() throws Exception {\n    Directory[][] dirs = getDirs();\n    // create and open an index writer\n    RandomIndexWriter iw = new RandomIndexWriter(random, dirs[0][0], newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)));\n    // create and open a taxonomy writer\n    TaxonomyWriter tw = new DirectoryTaxonomyWriter(dirs[0][1], OpenMode.CREATE);\n\n    /**\n     * Configure with no custom counting lists\n     */\n    PerDimensionIndexingParams iParams = new PerDimensionIndexingParams();\n\n    seedIndex(iw, tw, iParams);\n\n    IndexReader ir = iw.getReader();\n    tw.commit();\n\n    // prepare index reader and taxonomy.\n    TaxonomyReader tr = new DirectoryTaxonomyReader(dirs[0][1]);\n\n    // prepare searcher to search against\n    IndexSearcher searcher = newSearcher(ir);\n\n    FacetsCollector facetsCollector = performSearch(iParams, tr, ir,\n        searcher);\n\n    // Obtain facets results and hand-test them\n    assertCorrectResults(facetsCollector);\n\n    DocsEnum td = _TestUtil.docs(random, ir, \"$facets\", new BytesRef(\"$fulltree$\"), MultiFields.getLiveDocs(ir), null, false);\n    assertTrue(td.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n\n    tr.close();\n    ir.close();\n    iw.close();\n    tw.close();\n    IOUtils.close(dirs[0]);\n  }\n\n","bugFix":null,"bugIntro":["02331260bb246364779cb6f04919ca47900d01bb"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestMultipleCategoryLists#testDefault().mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/search/TestMultipleCategoryLists#testDefault().mjava","sourceNew":"  @Test\n  public void testDefault() throws Exception {\n    Directory[][] dirs = getDirs();\n    // create and open an index writer\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dirs[0][0], newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false)));\n    // create and open a taxonomy writer\n    TaxonomyWriter tw = new DirectoryTaxonomyWriter(dirs[0][1], OpenMode.CREATE);\n\n    /**\n     * Configure with no custom counting lists\n     */\n    PerDimensionIndexingParams iParams = new PerDimensionIndexingParams();\n\n    seedIndex(iw, tw, iParams);\n\n    IndexReader ir = iw.getReader();\n    tw.commit();\n\n    // prepare index reader and taxonomy.\n    TaxonomyReader tr = new DirectoryTaxonomyReader(dirs[0][1]);\n\n    // prepare searcher to search against\n    IndexSearcher searcher = newSearcher(ir);\n\n    FacetsCollector facetsCollector = performSearch(iParams, tr, ir,\n        searcher);\n\n    // Obtain facets results and hand-test them\n    assertCorrectResults(facetsCollector);\n\n    DocsEnum td = _TestUtil.docs(random(), ir, \"$facets\", new BytesRef(\"$fulltree$\"), MultiFields.getLiveDocs(ir), null, false);\n    assertTrue(td.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n\n    tr.close();\n    ir.close();\n    iw.close();\n    tw.close();\n    IOUtils.close(dirs[0]);\n  }\n\n","sourceOld":"  @Test\n  public void testDefault() throws Exception {\n    Directory[][] dirs = getDirs();\n    // create and open an index writer\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dirs[0][0], newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false)));\n    // create and open a taxonomy writer\n    TaxonomyWriter tw = new DirectoryTaxonomyWriter(dirs[0][1], OpenMode.CREATE);\n\n    /**\n     * Configure with no custom counting lists\n     */\n    PerDimensionIndexingParams iParams = new PerDimensionIndexingParams();\n\n    seedIndex(iw, tw, iParams);\n\n    IndexReader ir = iw.getReader();\n    tw.commit();\n\n    // prepare index reader and taxonomy.\n    TaxonomyReader tr = new DirectoryTaxonomyReader(dirs[0][1]);\n\n    // prepare searcher to search against\n    IndexSearcher searcher = newSearcher(ir);\n\n    FacetsCollector facetsCollector = performSearch(iParams, tr, ir,\n        searcher);\n\n    // Obtain facets results and hand-test them\n    assertCorrectResults(facetsCollector);\n\n    DocsEnum td = _TestUtil.docs(random(), ir, \"$facets\", new BytesRef(\"$fulltree$\"), MultiFields.getLiveDocs(ir), null, false);\n    assertTrue(td.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n\n    tr.close();\n    ir.close();\n    iw.close();\n    tw.close();\n    IOUtils.close(dirs[0]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"24230fe54121f9be9d85f2c2067536296785e421":["e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"ea469eab8fd0f3032f4fcde1c644a721e8309d3b":["24230fe54121f9be9d85f2c2067536296785e421"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":["872cff1d3a554e0cd64014cd97f88d3002b0f491","0e7c2454a6a8237bfd0e953f5b940838408c9055"],"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb":["7a4df66e06e0c3b520d7d5941e1c043076f06f17"],"872cff1d3a554e0cd64014cd97f88d3002b0f491":["ea469eab8fd0f3032f4fcde1c644a721e8309d3b"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"89f15687f60bd49cd3d9de427e85c17fd9397d61":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"0e7c2454a6a8237bfd0e953f5b940838408c9055":["872cff1d3a554e0cd64014cd97f88d3002b0f491"],"b65b350ca9588f9fc76ce7d6804160d06c45ff42":["ea469eab8fd0f3032f4fcde1c644a721e8309d3b","872cff1d3a554e0cd64014cd97f88d3002b0f491"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["0e7c2454a6a8237bfd0e953f5b940838408c9055"],"7a4df66e06e0c3b520d7d5941e1c043076f06f17":["89f15687f60bd49cd3d9de427e85c17fd9397d61"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"24230fe54121f9be9d85f2c2067536296785e421":["ea469eab8fd0f3032f4fcde1c644a721e8309d3b"],"ea469eab8fd0f3032f4fcde1c644a721e8309d3b":["872cff1d3a554e0cd64014cd97f88d3002b0f491","b65b350ca9588f9fc76ce7d6804160d06c45ff42"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":[],"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb":["24230fe54121f9be9d85f2c2067536296785e421","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"872cff1d3a554e0cd64014cd97f88d3002b0f491":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","0e7c2454a6a8237bfd0e953f5b940838408c9055","b65b350ca9588f9fc76ce7d6804160d06c45ff42"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"89f15687f60bd49cd3d9de427e85c17fd9397d61":["7a4df66e06e0c3b520d7d5941e1c043076f06f17"],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0e7c2454a6a8237bfd0e953f5b940838408c9055":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"b65b350ca9588f9fc76ce7d6804160d06c45ff42":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d083e83f225b11e5fdd900e83d26ddb385b6955c","89f15687f60bd49cd3d9de427e85c17fd9397d61","817d8435e9135b756f08ce6710ab0baac51bdf88"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"7a4df66e06e0c3b520d7d5941e1c043076f06f17":["e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","b65b350ca9588f9fc76ce7d6804160d06c45ff42","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}