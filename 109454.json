{"path":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggester#AnalyzingInfixSuggester(Directory,Analyzer,Analyzer,int,boolean,boolean,boolean,boolean).mjava","commits":[{"id":"e15af9ab52794c4f3888b19ff3cf55ccea043db2","date":1479337431,"type":0,"author":"Steve Rowe","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggester#AnalyzingInfixSuggester(Directory,Analyzer,Analyzer,int,boolean,boolean,boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"    /** Create a new instance, loading from a previously built\n     *  AnalyzingInfixSuggester directory, if it exists.  This directory must be\n     *  private to the infix suggester (i.e., not an external\n     *  Lucene index).  Note that {@link #close}\n     *  will also close the provided directory.\n     *\n     *  @param minPrefixChars Minimum number of leading characters\n     *     before PrefixQuery is used (default 4).\n     *     Prefixes shorter than this are indexed as character\n     *     ngrams (increasing index size but making lookups\n     *     faster).\n     *\n     *  @param commitOnBuild Call commit after the index has finished building. This would persist the\n     *                       suggester index to disk and future instances of this suggester can use this pre-built dictionary.\n     *\n     *  @param allTermsRequired All terms in the suggest query must be matched.\n     *  @param highlight Highlight suggest query in suggestions.\n     *  @param closeIndexWriterOnBuild If true, the IndexWriter will be closed after the index has finished building.\n     */\n  public AnalyzingInfixSuggester(Directory dir, Analyzer indexAnalyzer, Analyzer queryAnalyzer, int minPrefixChars,\n                                 boolean commitOnBuild, boolean allTermsRequired, \n                                 boolean highlight, boolean closeIndexWriterOnBuild) throws IOException {\n                                    \n    if (minPrefixChars < 0) {\n      throw new IllegalArgumentException(\"minPrefixChars must be >= 0; got: \" + minPrefixChars);\n    }\n\n    this.queryAnalyzer = queryAnalyzer;\n    this.indexAnalyzer = indexAnalyzer;\n    this.dir = dir;\n    this.minPrefixChars = minPrefixChars;\n    this.commitOnBuild = commitOnBuild;\n    this.allTermsRequired = allTermsRequired;\n    this.highlight = highlight;\n    this.closeIndexWriterOnBuild = closeIndexWriterOnBuild;\n\n    if (DirectoryReader.indexExists(dir)) {\n      // Already built; open it:\n      writer = new IndexWriter(dir,\n                               getIndexWriterConfig(getGramAnalyzer(), IndexWriterConfig.OpenMode.APPEND));\n      searcherMgr = new SearcherManager(writer, null);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e859e664a65796dadf8aaf65db6f66f3a885368","date":1479487334,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggester#AnalyzingInfixSuggester(Directory,Analyzer,Analyzer,int,boolean,boolean,boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"    /** Create a new instance, loading from a previously built\n     *  AnalyzingInfixSuggester directory, if it exists.  This directory must be\n     *  private to the infix suggester (i.e., not an external\n     *  Lucene index).  Note that {@link #close}\n     *  will also close the provided directory.\n     *\n     *  @param minPrefixChars Minimum number of leading characters\n     *     before PrefixQuery is used (default 4).\n     *     Prefixes shorter than this are indexed as character\n     *     ngrams (increasing index size but making lookups\n     *     faster).\n     *\n     *  @param commitOnBuild Call commit after the index has finished building. This would persist the\n     *                       suggester index to disk and future instances of this suggester can use this pre-built dictionary.\n     *\n     *  @param allTermsRequired All terms in the suggest query must be matched.\n     *  @param highlight Highlight suggest query in suggestions.\n     *  @param closeIndexWriterOnBuild If true, the IndexWriter will be closed after the index has finished building.\n     */\n  public AnalyzingInfixSuggester(Directory dir, Analyzer indexAnalyzer, Analyzer queryAnalyzer, int minPrefixChars,\n                                 boolean commitOnBuild, boolean allTermsRequired, \n                                 boolean highlight, boolean closeIndexWriterOnBuild) throws IOException {\n                                    \n    if (minPrefixChars < 0) {\n      throw new IllegalArgumentException(\"minPrefixChars must be >= 0; got: \" + minPrefixChars);\n    }\n\n    this.queryAnalyzer = queryAnalyzer;\n    this.indexAnalyzer = indexAnalyzer;\n    this.dir = dir;\n    this.minPrefixChars = minPrefixChars;\n    this.commitOnBuild = commitOnBuild;\n    this.allTermsRequired = allTermsRequired;\n    this.highlight = highlight;\n    this.closeIndexWriterOnBuild = closeIndexWriterOnBuild;\n\n    if (DirectoryReader.indexExists(dir)) {\n      // Already built; open it:\n      writer = new IndexWriter(dir,\n                               getIndexWriterConfig(getGramAnalyzer(), IndexWriterConfig.OpenMode.APPEND));\n      searcherMgr = new SearcherManager(writer, null);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"21fc4540234a8ebf9228a85e621322fbf0592153","date":1485843191,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggester#AnalyzingInfixSuggester(Directory,Analyzer,Analyzer,int,boolean,boolean,boolean,boolean).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggester#AnalyzingInfixSuggester(Directory,Analyzer,Analyzer,int,boolean,boolean,boolean,boolean).mjava","sourceNew":"    /** Create a new instance, loading from a previously built\n     *  AnalyzingInfixSuggester directory, if it exists.  This directory must be\n     *  private to the infix suggester (i.e., not an external\n     *  Lucene index).  Note that {@link #close}\n     *  will also close the provided directory.\n     *\n     *  @param minPrefixChars Minimum number of leading characters\n     *     before PrefixQuery is used (default 4).\n     *     Prefixes shorter than this are indexed as character\n     *     ngrams (increasing index size but making lookups\n     *     faster).\n     *\n     *  @param commitOnBuild Call commit after the index has finished building. This would persist the\n     *                       suggester index to disk and future instances of this suggester can use this pre-built dictionary.\n     *\n     *  @param allTermsRequired All terms in the suggest query must be matched.\n     *  @param highlight Highlight suggest query in suggestions.\n     *  @param closeIndexWriterOnBuild If true, the IndexWriter will be closed after the index has finished building.\n     */\n  public AnalyzingInfixSuggester(Directory dir, Analyzer indexAnalyzer, Analyzer queryAnalyzer, int minPrefixChars,\n                                 boolean commitOnBuild, boolean allTermsRequired, \n                                 boolean highlight, boolean closeIndexWriterOnBuild) throws IOException {\n                                    \n    if (minPrefixChars < 0) {\n      throw new IllegalArgumentException(\"minPrefixChars must be >= 0; got: \" + minPrefixChars);\n    }\n\n    this.queryAnalyzer = queryAnalyzer;\n    this.indexAnalyzer = indexAnalyzer;\n    this.dir = dir;\n    this.minPrefixChars = minPrefixChars;\n    this.commitOnBuild = commitOnBuild;\n    this.allTermsRequired = allTermsRequired;\n    this.highlight = highlight;\n    this.closeIndexWriterOnBuild = closeIndexWriterOnBuild;\n\n    if (DirectoryReader.indexExists(dir)) {\n      // Already built; open it:\n      searcherMgr = new SearcherManager(dir, null);\n    }\n  }\n\n","sourceOld":"    /** Create a new instance, loading from a previously built\n     *  AnalyzingInfixSuggester directory, if it exists.  This directory must be\n     *  private to the infix suggester (i.e., not an external\n     *  Lucene index).  Note that {@link #close}\n     *  will also close the provided directory.\n     *\n     *  @param minPrefixChars Minimum number of leading characters\n     *     before PrefixQuery is used (default 4).\n     *     Prefixes shorter than this are indexed as character\n     *     ngrams (increasing index size but making lookups\n     *     faster).\n     *\n     *  @param commitOnBuild Call commit after the index has finished building. This would persist the\n     *                       suggester index to disk and future instances of this suggester can use this pre-built dictionary.\n     *\n     *  @param allTermsRequired All terms in the suggest query must be matched.\n     *  @param highlight Highlight suggest query in suggestions.\n     *  @param closeIndexWriterOnBuild If true, the IndexWriter will be closed after the index has finished building.\n     */\n  public AnalyzingInfixSuggester(Directory dir, Analyzer indexAnalyzer, Analyzer queryAnalyzer, int minPrefixChars,\n                                 boolean commitOnBuild, boolean allTermsRequired, \n                                 boolean highlight, boolean closeIndexWriterOnBuild) throws IOException {\n                                    \n    if (minPrefixChars < 0) {\n      throw new IllegalArgumentException(\"minPrefixChars must be >= 0; got: \" + minPrefixChars);\n    }\n\n    this.queryAnalyzer = queryAnalyzer;\n    this.indexAnalyzer = indexAnalyzer;\n    this.dir = dir;\n    this.minPrefixChars = minPrefixChars;\n    this.commitOnBuild = commitOnBuild;\n    this.allTermsRequired = allTermsRequired;\n    this.highlight = highlight;\n    this.closeIndexWriterOnBuild = closeIndexWriterOnBuild;\n\n    if (DirectoryReader.indexExists(dir)) {\n      // Already built; open it:\n      writer = new IndexWriter(dir,\n                               getIndexWriterConfig(getGramAnalyzer(), IndexWriterConfig.OpenMode.APPEND));\n      searcherMgr = new SearcherManager(writer, null);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0debbe3b933db3b47fdc5984fbe24e55324d3ed4","date":1485866433,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggester#AnalyzingInfixSuggester(Directory,Analyzer,Analyzer,int,boolean,boolean,boolean,boolean).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggester#AnalyzingInfixSuggester(Directory,Analyzer,Analyzer,int,boolean,boolean,boolean,boolean).mjava","sourceNew":"    /** Create a new instance, loading from a previously built\n     *  AnalyzingInfixSuggester directory, if it exists.  This directory must be\n     *  private to the infix suggester (i.e., not an external\n     *  Lucene index).  Note that {@link #close}\n     *  will also close the provided directory.\n     *\n     *  @param minPrefixChars Minimum number of leading characters\n     *     before PrefixQuery is used (default 4).\n     *     Prefixes shorter than this are indexed as character\n     *     ngrams (increasing index size but making lookups\n     *     faster).\n     *\n     *  @param commitOnBuild Call commit after the index has finished building. This would persist the\n     *                       suggester index to disk and future instances of this suggester can use this pre-built dictionary.\n     *\n     *  @param allTermsRequired All terms in the suggest query must be matched.\n     *  @param highlight Highlight suggest query in suggestions.\n     *  @param closeIndexWriterOnBuild If true, the IndexWriter will be closed after the index has finished building.\n     */\n  public AnalyzingInfixSuggester(Directory dir, Analyzer indexAnalyzer, Analyzer queryAnalyzer, int minPrefixChars,\n                                 boolean commitOnBuild, boolean allTermsRequired, \n                                 boolean highlight, boolean closeIndexWriterOnBuild) throws IOException {\n                                    \n    if (minPrefixChars < 0) {\n      throw new IllegalArgumentException(\"minPrefixChars must be >= 0; got: \" + minPrefixChars);\n    }\n\n    this.queryAnalyzer = queryAnalyzer;\n    this.indexAnalyzer = indexAnalyzer;\n    this.dir = dir;\n    this.minPrefixChars = minPrefixChars;\n    this.commitOnBuild = commitOnBuild;\n    this.allTermsRequired = allTermsRequired;\n    this.highlight = highlight;\n    this.closeIndexWriterOnBuild = closeIndexWriterOnBuild;\n\n    if (DirectoryReader.indexExists(dir)) {\n      // Already built; open it:\n      searcherMgr = new SearcherManager(dir, null);\n    }\n  }\n\n","sourceOld":"    /** Create a new instance, loading from a previously built\n     *  AnalyzingInfixSuggester directory, if it exists.  This directory must be\n     *  private to the infix suggester (i.e., not an external\n     *  Lucene index).  Note that {@link #close}\n     *  will also close the provided directory.\n     *\n     *  @param minPrefixChars Minimum number of leading characters\n     *     before PrefixQuery is used (default 4).\n     *     Prefixes shorter than this are indexed as character\n     *     ngrams (increasing index size but making lookups\n     *     faster).\n     *\n     *  @param commitOnBuild Call commit after the index has finished building. This would persist the\n     *                       suggester index to disk and future instances of this suggester can use this pre-built dictionary.\n     *\n     *  @param allTermsRequired All terms in the suggest query must be matched.\n     *  @param highlight Highlight suggest query in suggestions.\n     *  @param closeIndexWriterOnBuild If true, the IndexWriter will be closed after the index has finished building.\n     */\n  public AnalyzingInfixSuggester(Directory dir, Analyzer indexAnalyzer, Analyzer queryAnalyzer, int minPrefixChars,\n                                 boolean commitOnBuild, boolean allTermsRequired, \n                                 boolean highlight, boolean closeIndexWriterOnBuild) throws IOException {\n                                    \n    if (minPrefixChars < 0) {\n      throw new IllegalArgumentException(\"minPrefixChars must be >= 0; got: \" + minPrefixChars);\n    }\n\n    this.queryAnalyzer = queryAnalyzer;\n    this.indexAnalyzer = indexAnalyzer;\n    this.dir = dir;\n    this.minPrefixChars = minPrefixChars;\n    this.commitOnBuild = commitOnBuild;\n    this.allTermsRequired = allTermsRequired;\n    this.highlight = highlight;\n    this.closeIndexWriterOnBuild = closeIndexWriterOnBuild;\n\n    if (DirectoryReader.indexExists(dir)) {\n      // Already built; open it:\n      writer = new IndexWriter(dir,\n                               getIndexWriterConfig(getGramAnalyzer(), IndexWriterConfig.OpenMode.APPEND));\n      searcherMgr = new SearcherManager(writer, null);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c3523a0ab04c3002eee3896c75ea5f10f388bcc","date":1485968422,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggester#AnalyzingInfixSuggester(Directory,Analyzer,Analyzer,int,boolean,boolean,boolean,boolean).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggester#AnalyzingInfixSuggester(Directory,Analyzer,Analyzer,int,boolean,boolean,boolean,boolean).mjava","sourceNew":"    /** Create a new instance, loading from a previously built\n     *  AnalyzingInfixSuggester directory, if it exists.  This directory must be\n     *  private to the infix suggester (i.e., not an external\n     *  Lucene index).  Note that {@link #close}\n     *  will also close the provided directory.\n     *\n     *  @param minPrefixChars Minimum number of leading characters\n     *     before PrefixQuery is used (default 4).\n     *     Prefixes shorter than this are indexed as character\n     *     ngrams (increasing index size but making lookups\n     *     faster).\n     *\n     *  @param commitOnBuild Call commit after the index has finished building. This would persist the\n     *                       suggester index to disk and future instances of this suggester can use this pre-built dictionary.\n     *\n     *  @param allTermsRequired All terms in the suggest query must be matched.\n     *  @param highlight Highlight suggest query in suggestions.\n     *  @param closeIndexWriterOnBuild If true, the IndexWriter will be closed after the index has finished building.\n     */\n  public AnalyzingInfixSuggester(Directory dir, Analyzer indexAnalyzer, Analyzer queryAnalyzer, int minPrefixChars,\n                                 boolean commitOnBuild, boolean allTermsRequired, \n                                 boolean highlight, boolean closeIndexWriterOnBuild) throws IOException {\n                                    \n    if (minPrefixChars < 0) {\n      throw new IllegalArgumentException(\"minPrefixChars must be >= 0; got: \" + minPrefixChars);\n    }\n\n    this.queryAnalyzer = queryAnalyzer;\n    this.indexAnalyzer = indexAnalyzer;\n    this.dir = dir;\n    this.minPrefixChars = minPrefixChars;\n    this.commitOnBuild = commitOnBuild;\n    this.allTermsRequired = allTermsRequired;\n    this.highlight = highlight;\n    this.closeIndexWriterOnBuild = closeIndexWriterOnBuild;\n\n    if (DirectoryReader.indexExists(dir)) {\n      // Already built; open it:\n      searcherMgr = new SearcherManager(dir, null);\n    }\n  }\n\n","sourceOld":"    /** Create a new instance, loading from a previously built\n     *  AnalyzingInfixSuggester directory, if it exists.  This directory must be\n     *  private to the infix suggester (i.e., not an external\n     *  Lucene index).  Note that {@link #close}\n     *  will also close the provided directory.\n     *\n     *  @param minPrefixChars Minimum number of leading characters\n     *     before PrefixQuery is used (default 4).\n     *     Prefixes shorter than this are indexed as character\n     *     ngrams (increasing index size but making lookups\n     *     faster).\n     *\n     *  @param commitOnBuild Call commit after the index has finished building. This would persist the\n     *                       suggester index to disk and future instances of this suggester can use this pre-built dictionary.\n     *\n     *  @param allTermsRequired All terms in the suggest query must be matched.\n     *  @param highlight Highlight suggest query in suggestions.\n     *  @param closeIndexWriterOnBuild If true, the IndexWriter will be closed after the index has finished building.\n     */\n  public AnalyzingInfixSuggester(Directory dir, Analyzer indexAnalyzer, Analyzer queryAnalyzer, int minPrefixChars,\n                                 boolean commitOnBuild, boolean allTermsRequired, \n                                 boolean highlight, boolean closeIndexWriterOnBuild) throws IOException {\n                                    \n    if (minPrefixChars < 0) {\n      throw new IllegalArgumentException(\"minPrefixChars must be >= 0; got: \" + minPrefixChars);\n    }\n\n    this.queryAnalyzer = queryAnalyzer;\n    this.indexAnalyzer = indexAnalyzer;\n    this.dir = dir;\n    this.minPrefixChars = minPrefixChars;\n    this.commitOnBuild = commitOnBuild;\n    this.allTermsRequired = allTermsRequired;\n    this.highlight = highlight;\n    this.closeIndexWriterOnBuild = closeIndexWriterOnBuild;\n\n    if (DirectoryReader.indexExists(dir)) {\n      // Already built; open it:\n      writer = new IndexWriter(dir,\n                               getIndexWriterConfig(getGramAnalyzer(), IndexWriterConfig.OpenMode.APPEND));\n      searcherMgr = new SearcherManager(writer, null);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":["2e859e664a65796dadf8aaf65db6f66f3a885368","0debbe3b933db3b47fdc5984fbe24e55324d3ed4"],"0debbe3b933db3b47fdc5984fbe24e55324d3ed4":["e15af9ab52794c4f3888b19ff3cf55ccea043db2","21fc4540234a8ebf9228a85e621322fbf0592153"],"e15af9ab52794c4f3888b19ff3cf55ccea043db2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2e859e664a65796dadf8aaf65db6f66f3a885368":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e15af9ab52794c4f3888b19ff3cf55ccea043db2"],"21fc4540234a8ebf9228a85e621322fbf0592153":["e15af9ab52794c4f3888b19ff3cf55ccea043db2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0debbe3b933db3b47fdc5984fbe24e55324d3ed4"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e15af9ab52794c4f3888b19ff3cf55ccea043db2","2e859e664a65796dadf8aaf65db6f66f3a885368"],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":[],"0debbe3b933db3b47fdc5984fbe24e55324d3ed4":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e15af9ab52794c4f3888b19ff3cf55ccea043db2":["0debbe3b933db3b47fdc5984fbe24e55324d3ed4","2e859e664a65796dadf8aaf65db6f66f3a885368","21fc4540234a8ebf9228a85e621322fbf0592153"],"2e859e664a65796dadf8aaf65db6f66f3a885368":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc"],"21fc4540234a8ebf9228a85e621322fbf0592153":["0debbe3b933db3b47fdc5984fbe24e55324d3ed4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}