{"path":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestNumericQueryParser#init().mjava","commits":[{"id":"08cbf46083e5da06462231794b96d24df6712fc9","date":1310445670,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestNumericQueryParser#init().mjava","pathOld":"/dev/null","sourceNew":"  static void init() {\n    try {\n      LOCALE = randomLocale(random);\n      TIMEZONE = randomTimeZone(random);\n      DATE_STYLE = randomDateStyle(random);\n      TIME_STYLE = randomDateStyle(random);\n      ANALYZER = new MockAnalyzer(random);\n      qp = new StandardQueryParser(ANALYZER);\n      NUMBER_FORMAT = NumberFormat.getNumberInstance(LOCALE);\n      NUMBER_FORMAT.setMaximumFractionDigits((random.nextInt() & 20) + 1);\n      NUMBER_FORMAT.setMinimumFractionDigits((random.nextInt() & 20) + 1);\n      NUMBER_FORMAT.setMaximumIntegerDigits((random.nextInt() & 20) + 1);\n      NUMBER_FORMAT.setMinimumIntegerDigits((random.nextInt() & 20) + 1);\n      \n      // assumes localized date pattern will have at least year, month, day, hour, minute\n      SimpleDateFormat dateFormat = (SimpleDateFormat) DateFormat.getDateTimeInstance(\n          DATE_STYLE, TIME_STYLE, LOCALE);\n      \n      // not all date patterns includes era, full year, timezone and second, so we add them here\n      dateFormat.applyPattern(dateFormat.toPattern() + \" G s Z yyyy\");\n      dateFormat.setTimeZone(TIMEZONE);\n      DATE_FORMAT  = new NumberDateFormat(dateFormat);\n      \n      HashMap<String,Number> randomNumberMap = new HashMap<String,Number>();\n      \n      double randomDouble;\n      long randomLong;\n      int randomInt;\n      float randomFloat;\n      long randomDate;\n      \n      while ((randomLong = normalizeNumber(Math.abs(random.nextLong()))\n          .longValue()) == 0)\n        ;\n      while ((randomDouble = normalizeNumber(Math.abs(random.nextDouble()))\n          .doubleValue()) == 0)\n        ;\n      while ((randomFloat = normalizeNumber(Math.abs(random.nextFloat()))\n          .floatValue()) == 0)\n        ;\n      while ((randomInt = normalizeNumber(Math.abs(random.nextInt()))\n          .intValue()) == 0)\n        ;\n      \n      // make sure random date is at least one second from 0\n      while ((randomDate = normalizeNumber(Math.abs(random.nextLong()))\n          .longValue()) < 1000)\n        ;\n      \n      // truncate to second\n      randomDate = (randomDate / 1000) * 1000;\n      \n      randomNumberMap.put(NumericField.DataType.LONG.name(), randomLong);\n      randomNumberMap.put(NumericField.DataType.INT.name(), randomInt);\n      randomNumberMap.put(NumericField.DataType.FLOAT.name(), randomFloat);\n      randomNumberMap.put(NumericField.DataType.DOUBLE.name(), randomDouble);\n      randomNumberMap.put(DATE_FIELD_NAME, randomDate);\n      \n      RANDOM_NUMBER_MAP = Collections.unmodifiableMap(randomNumberMap);\n      \n    } catch (ParseException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"64232de0f47f5f5c9cfcc27c8cd0fba3c2f78820","date":1310445844,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestNumericQueryParser#init().mjava","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestNumericQueryParser#init().mjava","sourceNew":"  static void init() {\n    try {\n      LOCALE = randomLocale(random);\n      TIMEZONE = randomTimeZone(random);\n      DATE_STYLE = randomDateStyle(random);\n      TIME_STYLE = randomDateStyle(random);\n      ANALYZER = new MockAnalyzer(random);\n      qp = new StandardQueryParser(ANALYZER);\n      NUMBER_FORMAT = NumberFormat.getNumberInstance(LOCALE);\n      NUMBER_FORMAT.setMaximumFractionDigits((random.nextInt() & 20) + 1);\n      NUMBER_FORMAT.setMinimumFractionDigits((random.nextInt() & 20) + 1);\n      NUMBER_FORMAT.setMaximumIntegerDigits((random.nextInt() & 20) + 1);\n      NUMBER_FORMAT.setMinimumIntegerDigits((random.nextInt() & 20) + 1);\n      \n      // assumes localized date pattern will have at least year, month, day, hour, minute\n      SimpleDateFormat dateFormat = (SimpleDateFormat) DateFormat.getDateTimeInstance(\n          DATE_STYLE, TIME_STYLE, LOCALE);\n      \n      // not all date patterns includes era, full year, timezone and second, so we add them here\n      dateFormat.applyPattern(dateFormat.toPattern() + \" G s Z yyyy\");\n      dateFormat.setTimeZone(TIMEZONE);\n      DATE_FORMAT  = new NumberDateFormat(dateFormat);\n      \n      HashMap<String,Number> randomNumberMap = new HashMap<String,Number>();\n      \n      double randomDouble;\n      long randomLong;\n      int randomInt;\n      float randomFloat;\n      long randomDate;\n      \n      while ((randomLong = normalizeNumber(Math.abs(random.nextLong()))\n          .longValue()) == 0)\n        ;\n      while ((randomDouble = normalizeNumber(Math.abs(random.nextDouble()))\n          .doubleValue()) == 0)\n        ;\n      while ((randomFloat = normalizeNumber(Math.abs(random.nextFloat()))\n          .floatValue()) == 0)\n        ;\n      while ((randomInt = normalizeNumber(Math.abs(random.nextInt()))\n          .intValue()) == 0)\n        ;\n      \n      // make sure random date is at least one second from 0\n      while ((randomDate = normalizeNumber(Math.abs(random.nextLong()))\n          .longValue()) < 1000)\n        ;\n\n      // prune date value so it doesn't pass in insane values to some calendars.\n      randomDate = randomDate % 3400000000000l;\n\n      // truncate to second\n      randomDate = (randomDate / 1000) * 1000;\n      \n      randomNumberMap.put(NumericField.DataType.LONG.name(), randomLong);\n      randomNumberMap.put(NumericField.DataType.INT.name(), randomInt);\n      randomNumberMap.put(NumericField.DataType.FLOAT.name(), randomFloat);\n      randomNumberMap.put(NumericField.DataType.DOUBLE.name(), randomDouble);\n      randomNumberMap.put(DATE_FIELD_NAME, randomDate);\n      \n      RANDOM_NUMBER_MAP = Collections.unmodifiableMap(randomNumberMap);\n      \n    } catch (ParseException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  static void init() {\n    try {\n      LOCALE = randomLocale(random);\n      TIMEZONE = randomTimeZone(random);\n      DATE_STYLE = randomDateStyle(random);\n      TIME_STYLE = randomDateStyle(random);\n      ANALYZER = new MockAnalyzer(random);\n      qp = new StandardQueryParser(ANALYZER);\n      NUMBER_FORMAT = NumberFormat.getNumberInstance(LOCALE);\n      NUMBER_FORMAT.setMaximumFractionDigits((random.nextInt() & 20) + 1);\n      NUMBER_FORMAT.setMinimumFractionDigits((random.nextInt() & 20) + 1);\n      NUMBER_FORMAT.setMaximumIntegerDigits((random.nextInt() & 20) + 1);\n      NUMBER_FORMAT.setMinimumIntegerDigits((random.nextInt() & 20) + 1);\n      \n      // assumes localized date pattern will have at least year, month, day, hour, minute\n      SimpleDateFormat dateFormat = (SimpleDateFormat) DateFormat.getDateTimeInstance(\n          DATE_STYLE, TIME_STYLE, LOCALE);\n      \n      // not all date patterns includes era, full year, timezone and second, so we add them here\n      dateFormat.applyPattern(dateFormat.toPattern() + \" G s Z yyyy\");\n      dateFormat.setTimeZone(TIMEZONE);\n      DATE_FORMAT  = new NumberDateFormat(dateFormat);\n      \n      HashMap<String,Number> randomNumberMap = new HashMap<String,Number>();\n      \n      double randomDouble;\n      long randomLong;\n      int randomInt;\n      float randomFloat;\n      long randomDate;\n      \n      while ((randomLong = normalizeNumber(Math.abs(random.nextLong()))\n          .longValue()) == 0)\n        ;\n      while ((randomDouble = normalizeNumber(Math.abs(random.nextDouble()))\n          .doubleValue()) == 0)\n        ;\n      while ((randomFloat = normalizeNumber(Math.abs(random.nextFloat()))\n          .floatValue()) == 0)\n        ;\n      while ((randomInt = normalizeNumber(Math.abs(random.nextInt()))\n          .intValue()) == 0)\n        ;\n      \n      // make sure random date is at least one second from 0\n      while ((randomDate = normalizeNumber(Math.abs(random.nextLong()))\n          .longValue()) < 1000)\n        ;\n      \n      // truncate to second\n      randomDate = (randomDate / 1000) * 1000;\n      \n      randomNumberMap.put(NumericField.DataType.LONG.name(), randomLong);\n      randomNumberMap.put(NumericField.DataType.INT.name(), randomInt);\n      randomNumberMap.put(NumericField.DataType.FLOAT.name(), randomFloat);\n      randomNumberMap.put(NumericField.DataType.DOUBLE.name(), randomDouble);\n      randomNumberMap.put(DATE_FIELD_NAME, randomDate);\n      \n      RANDOM_NUMBER_MAP = Collections.unmodifiableMap(randomNumberMap);\n      \n    } catch (ParseException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29f181fdb0347dbb618f61c630222bd533dce0ed","date":1310447211,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestNumericQueryParser#init().mjava","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestNumericQueryParser#init().mjava","sourceNew":"  static void init() {\n    try {\n      LOCALE = randomLocale(random);\n      LOCALE = Locale.getDefault();\n      TIMEZONE = randomTimeZone(random);\n      DATE_STYLE = randomDateStyle(random);\n      TIME_STYLE = randomDateStyle(random);\n      ANALYZER = new MockAnalyzer(random);\n      qp = new StandardQueryParser(ANALYZER);\n      NUMBER_FORMAT = NumberFormat.getNumberInstance(LOCALE);\n      NUMBER_FORMAT.setMaximumFractionDigits((random.nextInt() & 20) + 1);\n      NUMBER_FORMAT.setMinimumFractionDigits((random.nextInt() & 20) + 1);\n      NUMBER_FORMAT.setMaximumIntegerDigits((random.nextInt() & 20) + 1);\n      NUMBER_FORMAT.setMinimumIntegerDigits((random.nextInt() & 20) + 4); // the loop checks for < 1000, this is a must!\n      \n      // assumes localized date pattern will have at least year, month, day, hour, minute\n      SimpleDateFormat dateFormat = (SimpleDateFormat) DateFormat.getDateTimeInstance(\n          DATE_STYLE, TIME_STYLE, LOCALE);\n      \n      // not all date patterns includes era, full year, timezone and second, so we add them here\n      dateFormat.applyPattern(dateFormat.toPattern() + \" G s Z yyyy\");\n      dateFormat.setTimeZone(TIMEZONE);\n      DATE_FORMAT  = new NumberDateFormat(dateFormat);\n      \n      HashMap<String,Number> randomNumberMap = new HashMap<String,Number>();\n      \n      double randomDouble;\n      long randomLong;\n      int randomInt;\n      float randomFloat;\n      long randomDate;\n      \n      while ((randomLong = normalizeNumber(Math.abs(random.nextLong()))\n          .longValue()) == 0)\n        ;\n      while ((randomDouble = normalizeNumber(Math.abs(random.nextDouble()))\n          .doubleValue()) == 0)\n        ;\n      while ((randomFloat = normalizeNumber(Math.abs(random.nextFloat()))\n          .floatValue()) == 0)\n        ;\n      while ((randomInt = normalizeNumber(Math.abs(random.nextInt()))\n          .intValue()) == 0)\n        ;\n      \n      // make sure random date is at least one second from 0\n      while ((randomDate = normalizeNumber(Math.abs(random.nextLong()))\n          .longValue()) < 1000)\n        ;\n\n      // prune date value so it doesn't pass in insane values to some calendars.\n      randomDate = randomDate % 3400000000000l;\n\n      // truncate to second\n      randomDate = (randomDate / 1000) * 1000;\n      \n      randomNumberMap.put(NumericField.DataType.LONG.name(), randomLong);\n      randomNumberMap.put(NumericField.DataType.INT.name(), randomInt);\n      randomNumberMap.put(NumericField.DataType.FLOAT.name(), randomFloat);\n      randomNumberMap.put(NumericField.DataType.DOUBLE.name(), randomDouble);\n      randomNumberMap.put(DATE_FIELD_NAME, randomDate);\n      \n      RANDOM_NUMBER_MAP = Collections.unmodifiableMap(randomNumberMap);\n      \n    } catch (ParseException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  static void init() {\n    try {\n      LOCALE = randomLocale(random);\n      TIMEZONE = randomTimeZone(random);\n      DATE_STYLE = randomDateStyle(random);\n      TIME_STYLE = randomDateStyle(random);\n      ANALYZER = new MockAnalyzer(random);\n      qp = new StandardQueryParser(ANALYZER);\n      NUMBER_FORMAT = NumberFormat.getNumberInstance(LOCALE);\n      NUMBER_FORMAT.setMaximumFractionDigits((random.nextInt() & 20) + 1);\n      NUMBER_FORMAT.setMinimumFractionDigits((random.nextInt() & 20) + 1);\n      NUMBER_FORMAT.setMaximumIntegerDigits((random.nextInt() & 20) + 1);\n      NUMBER_FORMAT.setMinimumIntegerDigits((random.nextInt() & 20) + 1);\n      \n      // assumes localized date pattern will have at least year, month, day, hour, minute\n      SimpleDateFormat dateFormat = (SimpleDateFormat) DateFormat.getDateTimeInstance(\n          DATE_STYLE, TIME_STYLE, LOCALE);\n      \n      // not all date patterns includes era, full year, timezone and second, so we add them here\n      dateFormat.applyPattern(dateFormat.toPattern() + \" G s Z yyyy\");\n      dateFormat.setTimeZone(TIMEZONE);\n      DATE_FORMAT  = new NumberDateFormat(dateFormat);\n      \n      HashMap<String,Number> randomNumberMap = new HashMap<String,Number>();\n      \n      double randomDouble;\n      long randomLong;\n      int randomInt;\n      float randomFloat;\n      long randomDate;\n      \n      while ((randomLong = normalizeNumber(Math.abs(random.nextLong()))\n          .longValue()) == 0)\n        ;\n      while ((randomDouble = normalizeNumber(Math.abs(random.nextDouble()))\n          .doubleValue()) == 0)\n        ;\n      while ((randomFloat = normalizeNumber(Math.abs(random.nextFloat()))\n          .floatValue()) == 0)\n        ;\n      while ((randomInt = normalizeNumber(Math.abs(random.nextInt()))\n          .intValue()) == 0)\n        ;\n      \n      // make sure random date is at least one second from 0\n      while ((randomDate = normalizeNumber(Math.abs(random.nextLong()))\n          .longValue()) < 1000)\n        ;\n\n      // prune date value so it doesn't pass in insane values to some calendars.\n      randomDate = randomDate % 3400000000000l;\n\n      // truncate to second\n      randomDate = (randomDate / 1000) * 1000;\n      \n      randomNumberMap.put(NumericField.DataType.LONG.name(), randomLong);\n      randomNumberMap.put(NumericField.DataType.INT.name(), randomInt);\n      randomNumberMap.put(NumericField.DataType.FLOAT.name(), randomFloat);\n      randomNumberMap.put(NumericField.DataType.DOUBLE.name(), randomDouble);\n      randomNumberMap.put(DATE_FIELD_NAME, randomDate);\n      \n      RANDOM_NUMBER_MAP = Collections.unmodifiableMap(randomNumberMap);\n      \n    } catch (ParseException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"305666b3b66686963507abb36c644a3aa29c3c80","date":1310447315,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestNumericQueryParser#init().mjava","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestNumericQueryParser#init().mjava","sourceNew":"  static void init() {\n    try {\n      LOCALE = randomLocale(random);\n      TIMEZONE = randomTimeZone(random);\n      DATE_STYLE = randomDateStyle(random);\n      TIME_STYLE = randomDateStyle(random);\n      ANALYZER = new MockAnalyzer(random);\n      qp = new StandardQueryParser(ANALYZER);\n      NUMBER_FORMAT = NumberFormat.getNumberInstance(LOCALE);\n      NUMBER_FORMAT.setMaximumFractionDigits((random.nextInt() & 20) + 1);\n      NUMBER_FORMAT.setMinimumFractionDigits((random.nextInt() & 20) + 1);\n      NUMBER_FORMAT.setMaximumIntegerDigits((random.nextInt() & 20) + 1);\n      NUMBER_FORMAT.setMinimumIntegerDigits((random.nextInt() & 20) + 4); // the loop checks for < 1000, this is a must!\n      \n      // assumes localized date pattern will have at least year, month, day, hour, minute\n      SimpleDateFormat dateFormat = (SimpleDateFormat) DateFormat.getDateTimeInstance(\n          DATE_STYLE, TIME_STYLE, LOCALE);\n      \n      // not all date patterns includes era, full year, timezone and second, so we add them here\n      dateFormat.applyPattern(dateFormat.toPattern() + \" G s Z yyyy\");\n      dateFormat.setTimeZone(TIMEZONE);\n      DATE_FORMAT  = new NumberDateFormat(dateFormat);\n      \n      HashMap<String,Number> randomNumberMap = new HashMap<String,Number>();\n      \n      double randomDouble;\n      long randomLong;\n      int randomInt;\n      float randomFloat;\n      long randomDate;\n      \n      while ((randomLong = normalizeNumber(Math.abs(random.nextLong()))\n          .longValue()) == 0)\n        ;\n      while ((randomDouble = normalizeNumber(Math.abs(random.nextDouble()))\n          .doubleValue()) == 0)\n        ;\n      while ((randomFloat = normalizeNumber(Math.abs(random.nextFloat()))\n          .floatValue()) == 0)\n        ;\n      while ((randomInt = normalizeNumber(Math.abs(random.nextInt()))\n          .intValue()) == 0)\n        ;\n      \n      // make sure random date is at least one second from 0\n      while ((randomDate = normalizeNumber(Math.abs(random.nextLong()))\n          .longValue()) < 1000)\n        ;\n\n      // prune date value so it doesn't pass in insane values to some calendars.\n      randomDate = randomDate % 3400000000000l;\n\n      // truncate to second\n      randomDate = (randomDate / 1000) * 1000;\n      \n      randomNumberMap.put(NumericField.DataType.LONG.name(), randomLong);\n      randomNumberMap.put(NumericField.DataType.INT.name(), randomInt);\n      randomNumberMap.put(NumericField.DataType.FLOAT.name(), randomFloat);\n      randomNumberMap.put(NumericField.DataType.DOUBLE.name(), randomDouble);\n      randomNumberMap.put(DATE_FIELD_NAME, randomDate);\n      \n      RANDOM_NUMBER_MAP = Collections.unmodifiableMap(randomNumberMap);\n      \n    } catch (ParseException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  static void init() {\n    try {\n      LOCALE = randomLocale(random);\n      LOCALE = Locale.getDefault();\n      TIMEZONE = randomTimeZone(random);\n      DATE_STYLE = randomDateStyle(random);\n      TIME_STYLE = randomDateStyle(random);\n      ANALYZER = new MockAnalyzer(random);\n      qp = new StandardQueryParser(ANALYZER);\n      NUMBER_FORMAT = NumberFormat.getNumberInstance(LOCALE);\n      NUMBER_FORMAT.setMaximumFractionDigits((random.nextInt() & 20) + 1);\n      NUMBER_FORMAT.setMinimumFractionDigits((random.nextInt() & 20) + 1);\n      NUMBER_FORMAT.setMaximumIntegerDigits((random.nextInt() & 20) + 1);\n      NUMBER_FORMAT.setMinimumIntegerDigits((random.nextInt() & 20) + 4); // the loop checks for < 1000, this is a must!\n      \n      // assumes localized date pattern will have at least year, month, day, hour, minute\n      SimpleDateFormat dateFormat = (SimpleDateFormat) DateFormat.getDateTimeInstance(\n          DATE_STYLE, TIME_STYLE, LOCALE);\n      \n      // not all date patterns includes era, full year, timezone and second, so we add them here\n      dateFormat.applyPattern(dateFormat.toPattern() + \" G s Z yyyy\");\n      dateFormat.setTimeZone(TIMEZONE);\n      DATE_FORMAT  = new NumberDateFormat(dateFormat);\n      \n      HashMap<String,Number> randomNumberMap = new HashMap<String,Number>();\n      \n      double randomDouble;\n      long randomLong;\n      int randomInt;\n      float randomFloat;\n      long randomDate;\n      \n      while ((randomLong = normalizeNumber(Math.abs(random.nextLong()))\n          .longValue()) == 0)\n        ;\n      while ((randomDouble = normalizeNumber(Math.abs(random.nextDouble()))\n          .doubleValue()) == 0)\n        ;\n      while ((randomFloat = normalizeNumber(Math.abs(random.nextFloat()))\n          .floatValue()) == 0)\n        ;\n      while ((randomInt = normalizeNumber(Math.abs(random.nextInt()))\n          .intValue()) == 0)\n        ;\n      \n      // make sure random date is at least one second from 0\n      while ((randomDate = normalizeNumber(Math.abs(random.nextLong()))\n          .longValue()) < 1000)\n        ;\n\n      // prune date value so it doesn't pass in insane values to some calendars.\n      randomDate = randomDate % 3400000000000l;\n\n      // truncate to second\n      randomDate = (randomDate / 1000) * 1000;\n      \n      randomNumberMap.put(NumericField.DataType.LONG.name(), randomLong);\n      randomNumberMap.put(NumericField.DataType.INT.name(), randomInt);\n      randomNumberMap.put(NumericField.DataType.FLOAT.name(), randomFloat);\n      randomNumberMap.put(NumericField.DataType.DOUBLE.name(), randomDouble);\n      randomNumberMap.put(DATE_FIELD_NAME, randomDate);\n      \n      RANDOM_NUMBER_MAP = Collections.unmodifiableMap(randomNumberMap);\n      \n    } catch (ParseException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1","date":1310612214,"type":5,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestNumericQueryParser#init().mjava","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestNumericQueryParser#init().mjava","sourceNew":"  static void init() {\n    try {\n      LOCALE = randomLocale(random);\n      TIMEZONE = randomTimeZone(random);\n      DATE_STYLE = randomDateStyle(random);\n      TIME_STYLE = randomDateStyle(random);\n      ANALYZER = new MockAnalyzer(random);\n      qp = new StandardQueryParser(ANALYZER);\n      NUMBER_FORMAT = NumberFormat.getNumberInstance(LOCALE);\n      NUMBER_FORMAT.setMaximumFractionDigits((random.nextInt() & 20) + 1);\n      NUMBER_FORMAT.setMinimumFractionDigits((random.nextInt() & 20) + 1);\n      NUMBER_FORMAT.setMaximumIntegerDigits((random.nextInt() & 20) + 1);\n      NUMBER_FORMAT.setMinimumIntegerDigits((random.nextInt() & 20) + 4); // the loop checks for < 1000, this is a must!\n      \n      // assumes localized date pattern will have at least year, month, day, hour, minute\n      SimpleDateFormat dateFormat = (SimpleDateFormat) DateFormat.getDateTimeInstance(\n          DATE_STYLE, TIME_STYLE, LOCALE);\n      \n      // not all date patterns includes era, full year, timezone and second, so we add them here\n      dateFormat.applyPattern(dateFormat.toPattern() + \" G s Z yyyy\");\n      dateFormat.setTimeZone(TIMEZONE);\n      DATE_FORMAT  = new NumberDateFormat(dateFormat);\n      \n      HashMap<String,Number> randomNumberMap = new HashMap<String,Number>();\n      \n      double randomDouble;\n      long randomLong;\n      int randomInt;\n      float randomFloat;\n      long randomDate;\n      \n      while ((randomLong = normalizeNumber(Math.abs(random.nextLong()))\n          .longValue()) == 0)\n        ;\n      while ((randomDouble = normalizeNumber(Math.abs(random.nextDouble()))\n          .doubleValue()) == 0)\n        ;\n      while ((randomFloat = normalizeNumber(Math.abs(random.nextFloat()))\n          .floatValue()) == 0)\n        ;\n      while ((randomInt = normalizeNumber(Math.abs(random.nextInt()))\n          .intValue()) == 0)\n        ;\n      \n      // make sure random date is at least one second from 0\n      while ((randomDate = normalizeNumber(Math.abs(random.nextLong()))\n          .longValue()) < 1000)\n        ;\n\n      // prune date value so it doesn't pass in insane values to some calendars.\n      randomDate = randomDate % 3400000000000l;\n\n      // truncate to second\n      randomDate = (randomDate / 1000) * 1000;\n      \n      randomNumberMap.put(NumericField.DataType.LONG.name(), randomLong);\n      randomNumberMap.put(NumericField.DataType.INT.name(), randomInt);\n      randomNumberMap.put(NumericField.DataType.FLOAT.name(), randomFloat);\n      randomNumberMap.put(NumericField.DataType.DOUBLE.name(), randomDouble);\n      randomNumberMap.put(DATE_FIELD_NAME, randomDate);\n      \n      RANDOM_NUMBER_MAP = Collections.unmodifiableMap(randomNumberMap);\n      \n    } catch (ParseException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  static void init() {\n    try {\n      LOCALE = randomLocale(random);\n      TIMEZONE = randomTimeZone(random);\n      DATE_STYLE = randomDateStyle(random);\n      TIME_STYLE = randomDateStyle(random);\n      ANALYZER = new MockAnalyzer(random);\n      qp = new StandardQueryParser(ANALYZER);\n      NUMBER_FORMAT = NumberFormat.getNumberInstance(LOCALE);\n      NUMBER_FORMAT.setMaximumFractionDigits((random.nextInt() & 20) + 1);\n      NUMBER_FORMAT.setMinimumFractionDigits((random.nextInt() & 20) + 1);\n      NUMBER_FORMAT.setMaximumIntegerDigits((random.nextInt() & 20) + 1);\n      NUMBER_FORMAT.setMinimumIntegerDigits((random.nextInt() & 20) + 4); // the loop checks for < 1000, this is a must!\n      \n      // assumes localized date pattern will have at least year, month, day, hour, minute\n      SimpleDateFormat dateFormat = (SimpleDateFormat) DateFormat.getDateTimeInstance(\n          DATE_STYLE, TIME_STYLE, LOCALE);\n      \n      // not all date patterns includes era, full year, timezone and second, so we add them here\n      dateFormat.applyPattern(dateFormat.toPattern() + \" G s Z yyyy\");\n      dateFormat.setTimeZone(TIMEZONE);\n      DATE_FORMAT  = new NumberDateFormat(dateFormat);\n      \n      HashMap<String,Number> randomNumberMap = new HashMap<String,Number>();\n      \n      double randomDouble;\n      long randomLong;\n      int randomInt;\n      float randomFloat;\n      long randomDate;\n      \n      while ((randomLong = normalizeNumber(Math.abs(random.nextLong()))\n          .longValue()) == 0)\n        ;\n      while ((randomDouble = normalizeNumber(Math.abs(random.nextDouble()))\n          .doubleValue()) == 0)\n        ;\n      while ((randomFloat = normalizeNumber(Math.abs(random.nextFloat()))\n          .floatValue()) == 0)\n        ;\n      while ((randomInt = normalizeNumber(Math.abs(random.nextInt()))\n          .intValue()) == 0)\n        ;\n      \n      // make sure random date is at least one second from 0\n      while ((randomDate = normalizeNumber(Math.abs(random.nextLong()))\n          .longValue()) < 1000)\n        ;\n\n      // prune date value so it doesn't pass in insane values to some calendars.\n      randomDate = randomDate % 3400000000000l;\n\n      // truncate to second\n      randomDate = (randomDate / 1000) * 1000;\n      \n      randomNumberMap.put(NumericField.DataType.LONG.name(), randomLong);\n      randomNumberMap.put(NumericField.DataType.INT.name(), randomInt);\n      randomNumberMap.put(NumericField.DataType.FLOAT.name(), randomFloat);\n      randomNumberMap.put(NumericField.DataType.DOUBLE.name(), randomDouble);\n      randomNumberMap.put(DATE_FIELD_NAME, randomDate);\n      \n      RANDOM_NUMBER_MAP = Collections.unmodifiableMap(randomNumberMap);\n      \n    } catch (ParseException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1":["305666b3b66686963507abb36c644a3aa29c3c80"],"305666b3b66686963507abb36c644a3aa29c3c80":["29f181fdb0347dbb618f61c630222bd533dce0ed"],"29f181fdb0347dbb618f61c630222bd533dce0ed":["64232de0f47f5f5c9cfcc27c8cd0fba3c2f78820"],"64232de0f47f5f5c9cfcc27c8cd0fba3c2f78820":["08cbf46083e5da06462231794b96d24df6712fc9"],"08cbf46083e5da06462231794b96d24df6712fc9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1"]},"commit2Childs":{"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"305666b3b66686963507abb36c644a3aa29c3c80":["4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1"],"29f181fdb0347dbb618f61c630222bd533dce0ed":["305666b3b66686963507abb36c644a3aa29c3c80"],"64232de0f47f5f5c9cfcc27c8cd0fba3c2f78820":["29f181fdb0347dbb618f61c630222bd533dce0ed"],"08cbf46083e5da06462231794b96d24df6712fc9":["64232de0f47f5f5c9cfcc27c8cd0fba3c2f78820"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["08cbf46083e5da06462231794b96d24df6712fc9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}