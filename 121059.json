{"path":"lucene/analysis/common/src/java/org/apache/lucene/analysis/synonym/SynonymFilterFactory#loadSynonyms(ResourceLoader,String,boolean,Analyzer).mjava","commits":[{"id":"85f3a2d749715373feb8529516e92d3538103525","date":1379624134,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/synonym/SynonymFilterFactory#loadSynonyms(ResourceLoader,String,boolean,Analyzer).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/synonym/SynonymFilterFactory#loadSolrSynonyms(ResourceLoader,boolean,Analyzer).mjava","sourceNew":"  /**\n   * Load synonyms with the given {@link SynonymMap.Parser} class.\n   */\n  private SynonymMap loadSynonyms(ResourceLoader loader, String cname, boolean dedup, Analyzer analyzer) throws IOException, ParseException {\n    CharsetDecoder decoder = Charset.forName(\"UTF-8\").newDecoder()\n        .onMalformedInput(CodingErrorAction.REPORT)\n        .onUnmappableCharacter(CodingErrorAction.REPORT);\n\n    SynonymMap.Parser parser;\n    Class<? extends SynonymMap.Parser> clazz = loader.findClass(cname, SynonymMap.Parser.class);\n    try {\n      parser = clazz.getConstructor(boolean.class, boolean.class, Analyzer.class).newInstance(dedup, expand, analyzer);\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n\n    File synonymFile = new File(synonyms);\n    if (synonymFile.exists()) {\n      decoder.reset();\n      parser.parse(new InputStreamReader(loader.openResource(synonyms), decoder));\n    } else {\n      List<String> files = splitFileNames(synonyms);\n      for (String file : files) {\n        decoder.reset();\n        parser.parse(new InputStreamReader(loader.openResource(file), decoder));\n      }\n    }\n    return parser.build();\n  }\n\n","sourceOld":"  /**\n   * Load synonyms from the solr format, \"format=solr\".\n   */\n  private SynonymMap loadSolrSynonyms(ResourceLoader loader, boolean dedup, Analyzer analyzer) throws IOException, ParseException {    \n    CharsetDecoder decoder = Charset.forName(\"UTF-8\").newDecoder()\n      .onMalformedInput(CodingErrorAction.REPORT)\n      .onUnmappableCharacter(CodingErrorAction.REPORT);\n    \n    SolrSynonymParser parser = new SolrSynonymParser(dedup, expand, analyzer);\n    File synonymFile = new File(synonyms);\n    if (synonymFile.exists()) {\n      decoder.reset();\n      parser.add(new InputStreamReader(loader.openResource(synonyms), decoder));\n    } else {\n      List<String> files = splitFileNames(synonyms);\n      for (String file : files) {\n        decoder.reset();\n        parser.add(new InputStreamReader(loader.openResource(file), decoder));\n      }\n    }\n    return parser.build();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7d89d7e4e5101347833eea558851bf4209218619","date":1396265641,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/synonym/SynonymFilterFactory#loadSynonyms(ResourceLoader,String,boolean,Analyzer).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/synonym/SynonymFilterFactory#loadSynonyms(ResourceLoader,String,boolean,Analyzer).mjava","sourceNew":"  /**\n   * Load synonyms with the given {@link SynonymMap.Parser} class.\n   */\n  private SynonymMap loadSynonyms(ResourceLoader loader, String cname, boolean dedup, Analyzer analyzer) throws IOException, ParseException {\n    CharsetDecoder decoder = StandardCharsets.UTF_8.newDecoder()\n        .onMalformedInput(CodingErrorAction.REPORT)\n        .onUnmappableCharacter(CodingErrorAction.REPORT);\n\n    SynonymMap.Parser parser;\n    Class<? extends SynonymMap.Parser> clazz = loader.findClass(cname, SynonymMap.Parser.class);\n    try {\n      parser = clazz.getConstructor(boolean.class, boolean.class, Analyzer.class).newInstance(dedup, expand, analyzer);\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n\n    File synonymFile = new File(synonyms);\n    if (synonymFile.exists()) {\n      decoder.reset();\n      parser.parse(new InputStreamReader(loader.openResource(synonyms), decoder));\n    } else {\n      List<String> files = splitFileNames(synonyms);\n      for (String file : files) {\n        decoder.reset();\n        parser.parse(new InputStreamReader(loader.openResource(file), decoder));\n      }\n    }\n    return parser.build();\n  }\n\n","sourceOld":"  /**\n   * Load synonyms with the given {@link SynonymMap.Parser} class.\n   */\n  private SynonymMap loadSynonyms(ResourceLoader loader, String cname, boolean dedup, Analyzer analyzer) throws IOException, ParseException {\n    CharsetDecoder decoder = Charset.forName(\"UTF-8\").newDecoder()\n        .onMalformedInput(CodingErrorAction.REPORT)\n        .onUnmappableCharacter(CodingErrorAction.REPORT);\n\n    SynonymMap.Parser parser;\n    Class<? extends SynonymMap.Parser> clazz = loader.findClass(cname, SynonymMap.Parser.class);\n    try {\n      parser = clazz.getConstructor(boolean.class, boolean.class, Analyzer.class).newInstance(dedup, expand, analyzer);\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n\n    File synonymFile = new File(synonyms);\n    if (synonymFile.exists()) {\n      decoder.reset();\n      parser.parse(new InputStreamReader(loader.openResource(synonyms), decoder));\n    } else {\n      List<String> files = splitFileNames(synonyms);\n      for (String file : files) {\n        decoder.reset();\n        parser.parse(new InputStreamReader(loader.openResource(file), decoder));\n      }\n    }\n    return parser.build();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ed5f4bd4ee593745097b1ec9f0110b1997a9e58","date":1396480148,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/synonym/SynonymFilterFactory#loadSynonyms(ResourceLoader,String,boolean,Analyzer).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/synonym/SynonymFilterFactory#loadSynonyms(ResourceLoader,String,boolean,Analyzer).mjava","sourceNew":"  /**\n   * Load synonyms with the given {@link SynonymMap.Parser} class.\n   */\n  protected SynonymMap loadSynonyms(ResourceLoader loader, String cname, boolean dedup, Analyzer analyzer) throws IOException, ParseException {\n    CharsetDecoder decoder = StandardCharsets.UTF_8.newDecoder()\n        .onMalformedInput(CodingErrorAction.REPORT)\n        .onUnmappableCharacter(CodingErrorAction.REPORT);\n\n    SynonymMap.Parser parser;\n    Class<? extends SynonymMap.Parser> clazz = loader.findClass(cname, SynonymMap.Parser.class);\n    try {\n      parser = clazz.getConstructor(boolean.class, boolean.class, Analyzer.class).newInstance(dedup, expand, analyzer);\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n\n    File synonymFile = new File(synonyms);\n    if (synonymFile.exists()) {\n      decoder.reset();\n      parser.parse(new InputStreamReader(loader.openResource(synonyms), decoder));\n    } else {\n      List<String> files = splitFileNames(synonyms);\n      for (String file : files) {\n        decoder.reset();\n        parser.parse(new InputStreamReader(loader.openResource(file), decoder));\n      }\n    }\n    return parser.build();\n  }\n\n","sourceOld":"  /**\n   * Load synonyms with the given {@link SynonymMap.Parser} class.\n   */\n  private SynonymMap loadSynonyms(ResourceLoader loader, String cname, boolean dedup, Analyzer analyzer) throws IOException, ParseException {\n    CharsetDecoder decoder = StandardCharsets.UTF_8.newDecoder()\n        .onMalformedInput(CodingErrorAction.REPORT)\n        .onUnmappableCharacter(CodingErrorAction.REPORT);\n\n    SynonymMap.Parser parser;\n    Class<? extends SynonymMap.Parser> clazz = loader.findClass(cname, SynonymMap.Parser.class);\n    try {\n      parser = clazz.getConstructor(boolean.class, boolean.class, Analyzer.class).newInstance(dedup, expand, analyzer);\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n\n    File synonymFile = new File(synonyms);\n    if (synonymFile.exists()) {\n      decoder.reset();\n      parser.parse(new InputStreamReader(loader.openResource(synonyms), decoder));\n    } else {\n      List<String> files = splitFileNames(synonyms);\n      for (String file : files) {\n        decoder.reset();\n        parser.parse(new InputStreamReader(loader.openResource(file), decoder));\n      }\n    }\n    return parser.build();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/synonym/SynonymFilterFactory#loadSynonyms(ResourceLoader,String,boolean,Analyzer).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/synonym/SynonymFilterFactory#loadSynonyms(ResourceLoader,String,boolean,Analyzer).mjava","sourceNew":"  /**\n   * Load synonyms with the given {@link SynonymMap.Parser} class.\n   */\n  protected SynonymMap loadSynonyms(ResourceLoader loader, String cname, boolean dedup, Analyzer analyzer) throws IOException, ParseException {\n    CharsetDecoder decoder = StandardCharsets.UTF_8.newDecoder()\n        .onMalformedInput(CodingErrorAction.REPORT)\n        .onUnmappableCharacter(CodingErrorAction.REPORT);\n\n    SynonymMap.Parser parser;\n    Class<? extends SynonymMap.Parser> clazz = loader.findClass(cname, SynonymMap.Parser.class);\n    try {\n      parser = clazz.getConstructor(boolean.class, boolean.class, Analyzer.class).newInstance(dedup, expand, analyzer);\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n\n    File synonymFile = new File(synonyms);\n    if (synonymFile.exists()) {\n      decoder.reset();\n      parser.parse(new InputStreamReader(loader.openResource(synonyms), decoder));\n    } else {\n      List<String> files = splitFileNames(synonyms);\n      for (String file : files) {\n        decoder.reset();\n        parser.parse(new InputStreamReader(loader.openResource(file), decoder));\n      }\n    }\n    return parser.build();\n  }\n\n","sourceOld":"  /**\n   * Load synonyms with the given {@link SynonymMap.Parser} class.\n   */\n  private SynonymMap loadSynonyms(ResourceLoader loader, String cname, boolean dedup, Analyzer analyzer) throws IOException, ParseException {\n    CharsetDecoder decoder = Charset.forName(\"UTF-8\").newDecoder()\n        .onMalformedInput(CodingErrorAction.REPORT)\n        .onUnmappableCharacter(CodingErrorAction.REPORT);\n\n    SynonymMap.Parser parser;\n    Class<? extends SynonymMap.Parser> clazz = loader.findClass(cname, SynonymMap.Parser.class);\n    try {\n      parser = clazz.getConstructor(boolean.class, boolean.class, Analyzer.class).newInstance(dedup, expand, analyzer);\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n\n    File synonymFile = new File(synonyms);\n    if (synonymFile.exists()) {\n      decoder.reset();\n      parser.parse(new InputStreamReader(loader.openResource(synonyms), decoder));\n    } else {\n      List<String> files = splitFileNames(synonyms);\n      for (String file : files) {\n        decoder.reset();\n        parser.parse(new InputStreamReader(loader.openResource(file), decoder));\n      }\n    }\n    return parser.build();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4abec28b874149a7223e32cc7a01704c27790de","date":1410644789,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/synonym/SynonymFilterFactory#loadSynonyms(ResourceLoader,String,boolean,Analyzer).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/synonym/SynonymFilterFactory#loadSynonyms(ResourceLoader,String,boolean,Analyzer).mjava","sourceNew":"  /**\n   * Load synonyms with the given {@link SynonymMap.Parser} class.\n   */\n  protected SynonymMap loadSynonyms(ResourceLoader loader, String cname, boolean dedup, Analyzer analyzer) throws IOException, ParseException {\n    CharsetDecoder decoder = StandardCharsets.UTF_8.newDecoder()\n        .onMalformedInput(CodingErrorAction.REPORT)\n        .onUnmappableCharacter(CodingErrorAction.REPORT);\n\n    SynonymMap.Parser parser;\n    Class<? extends SynonymMap.Parser> clazz = loader.findClass(cname, SynonymMap.Parser.class);\n    try {\n      parser = clazz.getConstructor(boolean.class, boolean.class, Analyzer.class).newInstance(dedup, expand, analyzer);\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n\n    List<String> files = splitFileNames(synonyms);\n    for (String file : files) {\n      decoder.reset();\n      parser.parse(new InputStreamReader(loader.openResource(file), decoder));\n    }\n    return parser.build();\n  }\n\n","sourceOld":"  /**\n   * Load synonyms with the given {@link SynonymMap.Parser} class.\n   */\n  protected SynonymMap loadSynonyms(ResourceLoader loader, String cname, boolean dedup, Analyzer analyzer) throws IOException, ParseException {\n    CharsetDecoder decoder = StandardCharsets.UTF_8.newDecoder()\n        .onMalformedInput(CodingErrorAction.REPORT)\n        .onUnmappableCharacter(CodingErrorAction.REPORT);\n\n    SynonymMap.Parser parser;\n    Class<? extends SynonymMap.Parser> clazz = loader.findClass(cname, SynonymMap.Parser.class);\n    try {\n      parser = clazz.getConstructor(boolean.class, boolean.class, Analyzer.class).newInstance(dedup, expand, analyzer);\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n\n    File synonymFile = new File(synonyms);\n    if (synonymFile.exists()) {\n      decoder.reset();\n      parser.parse(new InputStreamReader(loader.openResource(synonyms), decoder));\n    } else {\n      List<String> files = splitFileNames(synonyms);\n      for (String file : files) {\n        decoder.reset();\n        parser.parse(new InputStreamReader(loader.openResource(file), decoder));\n      }\n    }\n    return parser.build();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9822706d4f21d835a84063c97b73d776e06545f9","date":1451909978,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/synonym/SynonymFilterFactory#loadSynonyms(ResourceLoader,String,boolean,Analyzer).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/synonym/SynonymFilterFactory#loadSynonyms(ResourceLoader,String,boolean,Analyzer).mjava","sourceNew":"  /**\n   * Load synonyms with the given {@link SynonymMap.Parser} class.\n   */\n  protected SynonymMap loadSynonyms(ResourceLoader loader, String cname, boolean dedup, Analyzer analyzer) throws IOException, ParseException {\n    CharsetDecoder decoder = StandardCharsets.UTF_8.newDecoder()\n        .onMalformedInput(CodingErrorAction.REPORT)\n        .onUnmappableCharacter(CodingErrorAction.REPORT);\n\n    SynonymMap.Parser parser;\n    Class<? extends SynonymMap.Parser> clazz = loader.findClass(cname, SynonymMap.Parser.class);\n    try {\n      parser = clazz.getConstructor(boolean.class, boolean.class, Analyzer.class).newInstance(dedup, expand, analyzer);\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n\n    List<String> files = splitFileNames(synonyms);\n    for (String file : files) {\n      decoder.reset();\n      try (final Reader isr = new InputStreamReader(loader.openResource(file), decoder)) {\n        parser.parse(isr);\n      }\n    }\n    return parser.build();\n  }\n\n","sourceOld":"  /**\n   * Load synonyms with the given {@link SynonymMap.Parser} class.\n   */\n  protected SynonymMap loadSynonyms(ResourceLoader loader, String cname, boolean dedup, Analyzer analyzer) throws IOException, ParseException {\n    CharsetDecoder decoder = StandardCharsets.UTF_8.newDecoder()\n        .onMalformedInput(CodingErrorAction.REPORT)\n        .onUnmappableCharacter(CodingErrorAction.REPORT);\n\n    SynonymMap.Parser parser;\n    Class<? extends SynonymMap.Parser> clazz = loader.findClass(cname, SynonymMap.Parser.class);\n    try {\n      parser = clazz.getConstructor(boolean.class, boolean.class, Analyzer.class).newInstance(dedup, expand, analyzer);\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n\n    List<String> files = splitFileNames(synonyms);\n    for (String file : files) {\n      decoder.reset();\n      parser.parse(new InputStreamReader(loader.openResource(file), decoder));\n    }\n    return parser.build();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5eb2511ababf862ea11e10761c70ee560cd84510":["85f3a2d749715373feb8529516e92d3538103525","9ed5f4bd4ee593745097b1ec9f0110b1997a9e58"],"9ed5f4bd4ee593745097b1ec9f0110b1997a9e58":["7d89d7e4e5101347833eea558851bf4209218619"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f4abec28b874149a7223e32cc7a01704c27790de":["9ed5f4bd4ee593745097b1ec9f0110b1997a9e58"],"7d89d7e4e5101347833eea558851bf4209218619":["85f3a2d749715373feb8529516e92d3538103525"],"85f3a2d749715373feb8529516e92d3538103525":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9822706d4f21d835a84063c97b73d776e06545f9":["f4abec28b874149a7223e32cc7a01704c27790de"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9822706d4f21d835a84063c97b73d776e06545f9"]},"commit2Childs":{"5eb2511ababf862ea11e10761c70ee560cd84510":[],"9ed5f4bd4ee593745097b1ec9f0110b1997a9e58":["5eb2511ababf862ea11e10761c70ee560cd84510","f4abec28b874149a7223e32cc7a01704c27790de"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["85f3a2d749715373feb8529516e92d3538103525"],"7d89d7e4e5101347833eea558851bf4209218619":["9ed5f4bd4ee593745097b1ec9f0110b1997a9e58"],"f4abec28b874149a7223e32cc7a01704c27790de":["9822706d4f21d835a84063c97b73d776e06545f9"],"85f3a2d749715373feb8529516e92d3538103525":["5eb2511ababf862ea11e10761c70ee560cd84510","7d89d7e4e5101347833eea558851bf4209218619"],"9822706d4f21d835a84063c97b73d776e06545f9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}