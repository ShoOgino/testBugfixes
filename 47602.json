{"path":"src/test/org/apache/lucene/search/function/TestOrdValues#doTestRank(String,boolean).mjava","commits":[{"id":"3f74570911bfdb9f7b01948745dcd67c69676c0e","date":1181060975,"type":0,"author":"Doron Cohen","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/function/TestOrdValues#doTestRank(String,boolean).mjava","pathOld":"/dev/null","sourceNew":"  // Test that queries based on reverse/ordFieldScore scores correctly\n  private void doTestRank (String field, boolean inOrder) throws CorruptIndexException, Exception {\n    IndexSearcher s = new IndexSearcher(dir);\n    ValueSource vs;\n    if (inOrder) {\n      vs = new OrdFieldSource(field);\n    } else {\n      vs = new ReverseOrdFieldSource(field);\n    }\n        \n    Query q = new ValueSourceQuery(vs);\n    log(\"test: \"+q);\n    QueryUtils.check(q,s);\n    Hits h = s.search(q);\n    assertEquals(\"All docs should be matched!\",N_DOCS,h.length());\n    String prevID = inOrder\n      ? \"IE\"   // greater than all ids of docs in this test (\"ID0001\", etc.)\n      : \"IC\";  // smaller than all ids of docs in this test (\"ID0001\", etc.)\n          \n    for (int i=0; i<h.length(); i++) {\n      String resID = h.doc(i).get(ID_FIELD);\n      log(i+\".   score=\"+h.score(i)+\"  -  \"+resID);\n      log(s.explain(q,h.id(i)));\n      if (inOrder) {\n        assertTrue(\"res id \"+resID+\" should be < prev res id \"+prevID, resID.compareTo(prevID)<0);\n      } else {\n        assertTrue(\"res id \"+resID+\" should be > prev res id \"+prevID, resID.compareTo(prevID)>0);\n      }\n      prevID = resID;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5af07783dbc171e26a694c4f7d735e30c2769faa","date":1211569075,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/function/TestOrdValues#doTestRank(String,boolean).mjava","pathOld":"src/test/org/apache/lucene/search/function/TestOrdValues#doTestRank(String,boolean).mjava","sourceNew":"  // Test that queries based on reverse/ordFieldScore scores correctly\n  private void doTestRank (String field, boolean inOrder) throws CorruptIndexException, Exception {\n    IndexSearcher s = new IndexSearcher(dir);\n    ValueSource vs;\n    if (inOrder) {\n      vs = new OrdFieldSource(field);\n    } else {\n      vs = new ReverseOrdFieldSource(field);\n    }\n        \n    Query q = new ValueSourceQuery(vs);\n    log(\"test: \"+q);\n    QueryUtils.check(q,s);\n    ScoreDoc[] h = s.search(q, null, 1000).scoreDocs;\n    assertEquals(\"All docs should be matched!\",N_DOCS,h.length);\n    String prevID = inOrder\n      ? \"IE\"   // greater than all ids of docs in this test (\"ID0001\", etc.)\n      : \"IC\";  // smaller than all ids of docs in this test (\"ID0001\", etc.)\n          \n    for (int i=0; i<h.length; i++) {\n      String resID = s.doc(h[i].doc).get(ID_FIELD);\n      log(i+\".   score=\"+h[i].score+\"  -  \"+resID);\n      log(s.explain(q,h[i].doc));\n      if (inOrder) {\n        assertTrue(\"res id \"+resID+\" should be < prev res id \"+prevID, resID.compareTo(prevID)<0);\n      } else {\n        assertTrue(\"res id \"+resID+\" should be > prev res id \"+prevID, resID.compareTo(prevID)>0);\n      }\n      prevID = resID;\n    }\n  }\n\n","sourceOld":"  // Test that queries based on reverse/ordFieldScore scores correctly\n  private void doTestRank (String field, boolean inOrder) throws CorruptIndexException, Exception {\n    IndexSearcher s = new IndexSearcher(dir);\n    ValueSource vs;\n    if (inOrder) {\n      vs = new OrdFieldSource(field);\n    } else {\n      vs = new ReverseOrdFieldSource(field);\n    }\n        \n    Query q = new ValueSourceQuery(vs);\n    log(\"test: \"+q);\n    QueryUtils.check(q,s);\n    Hits h = s.search(q);\n    assertEquals(\"All docs should be matched!\",N_DOCS,h.length());\n    String prevID = inOrder\n      ? \"IE\"   // greater than all ids of docs in this test (\"ID0001\", etc.)\n      : \"IC\";  // smaller than all ids of docs in this test (\"ID0001\", etc.)\n          \n    for (int i=0; i<h.length(); i++) {\n      String resID = h.doc(i).get(ID_FIELD);\n      log(i+\".   score=\"+h.score(i)+\"  -  \"+resID);\n      log(s.explain(q,h.id(i)));\n      if (inOrder) {\n        assertTrue(\"res id \"+resID+\" should be < prev res id \"+prevID, resID.compareTo(prevID)<0);\n      } else {\n        assertTrue(\"res id \"+resID+\" should be > prev res id \"+prevID, resID.compareTo(prevID)>0);\n      }\n      prevID = resID;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0f3c039c6901211afce15c1d756384b4c47f5b9","date":1250192369,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/function/TestOrdValues#doTestRank(String,boolean).mjava","pathOld":"src/test/org/apache/lucene/search/function/TestOrdValues#doTestRank(String,boolean).mjava","sourceNew":"  // Test that queries based on reverse/ordFieldScore scores correctly\n  private void doTestRank (String field, boolean inOrder) throws CorruptIndexException, Exception {\n    IndexSearcher s = new IndexSearcher(dir);\n    ValueSource vs;\n    if (inOrder) {\n      vs = new MultiValueSource(new OrdFieldSource(field));\n    } else {\n      vs = new MultiValueSource(new ReverseOrdFieldSource(field));\n    }\n        \n    Query q = new ValueSourceQuery(vs);\n    log(\"test: \"+q);\n    QueryUtils.check(q,s);\n    ScoreDoc[] h = s.search(q, null, 1000).scoreDocs;\n    assertEquals(\"All docs should be matched!\",N_DOCS,h.length);\n    String prevID = inOrder\n      ? \"IE\"   // greater than all ids of docs in this test (\"ID0001\", etc.)\n      : \"IC\";  // smaller than all ids of docs in this test (\"ID0001\", etc.)\n          \n    for (int i=0; i<h.length; i++) {\n      String resID = s.doc(h[i].doc).get(ID_FIELD);\n      log(i+\".   score=\"+h[i].score+\"  -  \"+resID);\n      log(s.explain(q,h[i].doc));\n      if (inOrder) {\n        assertTrue(\"res id \"+resID+\" should be < prev res id \"+prevID, resID.compareTo(prevID)<0);\n      } else {\n        assertTrue(\"res id \"+resID+\" should be > prev res id \"+prevID, resID.compareTo(prevID)>0);\n      }\n      prevID = resID;\n    }\n  }\n\n","sourceOld":"  // Test that queries based on reverse/ordFieldScore scores correctly\n  private void doTestRank (String field, boolean inOrder) throws CorruptIndexException, Exception {\n    IndexSearcher s = new IndexSearcher(dir);\n    ValueSource vs;\n    if (inOrder) {\n      vs = new OrdFieldSource(field);\n    } else {\n      vs = new ReverseOrdFieldSource(field);\n    }\n        \n    Query q = new ValueSourceQuery(vs);\n    log(\"test: \"+q);\n    QueryUtils.check(q,s);\n    ScoreDoc[] h = s.search(q, null, 1000).scoreDocs;\n    assertEquals(\"All docs should be matched!\",N_DOCS,h.length);\n    String prevID = inOrder\n      ? \"IE\"   // greater than all ids of docs in this test (\"ID0001\", etc.)\n      : \"IC\";  // smaller than all ids of docs in this test (\"ID0001\", etc.)\n          \n    for (int i=0; i<h.length; i++) {\n      String resID = s.doc(h[i].doc).get(ID_FIELD);\n      log(i+\".   score=\"+h[i].score+\"  -  \"+resID);\n      log(s.explain(q,h[i].doc));\n      if (inOrder) {\n        assertTrue(\"res id \"+resID+\" should be < prev res id \"+prevID, resID.compareTo(prevID)<0);\n      } else {\n        assertTrue(\"res id \"+resID+\" should be > prev res id \"+prevID, resID.compareTo(prevID)>0);\n      }\n      prevID = resID;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8d1458a2543cbd30cbfe7929be4dcb5c5251659","date":1254582241,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/function/TestOrdValues#doTestRank(String,boolean).mjava","pathOld":"src/test/org/apache/lucene/search/function/TestOrdValues#doTestRank(String,boolean).mjava","sourceNew":"  // Test that queries based on reverse/ordFieldScore scores correctly\n  private void doTestRank (String field, boolean inOrder) throws CorruptIndexException, Exception {\n    IndexSearcher s = new IndexSearcher(dir, true);\n    ValueSource vs;\n    if (inOrder) {\n      vs = new MultiValueSource(new OrdFieldSource(field));\n    } else {\n      vs = new MultiValueSource(new ReverseOrdFieldSource(field));\n    }\n        \n    Query q = new ValueSourceQuery(vs);\n    log(\"test: \"+q);\n    QueryUtils.check(q,s);\n    ScoreDoc[] h = s.search(q, null, 1000).scoreDocs;\n    assertEquals(\"All docs should be matched!\",N_DOCS,h.length);\n    String prevID = inOrder\n      ? \"IE\"   // greater than all ids of docs in this test (\"ID0001\", etc.)\n      : \"IC\";  // smaller than all ids of docs in this test (\"ID0001\", etc.)\n          \n    for (int i=0; i<h.length; i++) {\n      String resID = s.doc(h[i].doc).get(ID_FIELD);\n      log(i+\".   score=\"+h[i].score+\"  -  \"+resID);\n      log(s.explain(q,h[i].doc));\n      if (inOrder) {\n        assertTrue(\"res id \"+resID+\" should be < prev res id \"+prevID, resID.compareTo(prevID)<0);\n      } else {\n        assertTrue(\"res id \"+resID+\" should be > prev res id \"+prevID, resID.compareTo(prevID)>0);\n      }\n      prevID = resID;\n    }\n  }\n\n","sourceOld":"  // Test that queries based on reverse/ordFieldScore scores correctly\n  private void doTestRank (String field, boolean inOrder) throws CorruptIndexException, Exception {\n    IndexSearcher s = new IndexSearcher(dir);\n    ValueSource vs;\n    if (inOrder) {\n      vs = new MultiValueSource(new OrdFieldSource(field));\n    } else {\n      vs = new MultiValueSource(new ReverseOrdFieldSource(field));\n    }\n        \n    Query q = new ValueSourceQuery(vs);\n    log(\"test: \"+q);\n    QueryUtils.check(q,s);\n    ScoreDoc[] h = s.search(q, null, 1000).scoreDocs;\n    assertEquals(\"All docs should be matched!\",N_DOCS,h.length);\n    String prevID = inOrder\n      ? \"IE\"   // greater than all ids of docs in this test (\"ID0001\", etc.)\n      : \"IC\";  // smaller than all ids of docs in this test (\"ID0001\", etc.)\n          \n    for (int i=0; i<h.length; i++) {\n      String resID = s.doc(h[i].doc).get(ID_FIELD);\n      log(i+\".   score=\"+h[i].score+\"  -  \"+resID);\n      log(s.explain(q,h[i].doc));\n      if (inOrder) {\n        assertTrue(\"res id \"+resID+\" should be < prev res id \"+prevID, resID.compareTo(prevID)<0);\n      } else {\n        assertTrue(\"res id \"+resID+\" should be > prev res id \"+prevID, resID.compareTo(prevID)>0);\n      }\n      prevID = resID;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a046c0c310bc77931fc8441bd920053b607dd14","date":1254584734,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"src/test/org/apache/lucene/search/function/TestOrdValues#doTestRank(String,boolean).mjava","pathOld":"src/test/org/apache/lucene/search/function/TestOrdValues#doTestRank(String,boolean).mjava","sourceNew":"  // Test that queries based on reverse/ordFieldScore scores correctly\n  private void doTestRank (String field, boolean inOrder) throws CorruptIndexException, Exception {\n    IndexSearcher s = new IndexSearcher(dir, true);\n    ValueSource vs;\n    if (inOrder) {\n      vs = new MultiValueSource(new OrdFieldSource(field));\n    } else {\n      vs = new MultiValueSource(new ReverseOrdFieldSource(field));\n    }\n        \n    Query q = new ValueSourceQuery(vs);\n    log(\"test: \"+q);\n    QueryUtils.check(q,s);\n    ScoreDoc[] h = s.search(q, null, 1000).scoreDocs;\n    assertEquals(\"All docs should be matched!\",N_DOCS,h.length);\n    String prevID = inOrder\n      ? \"IE\"   // greater than all ids of docs in this test (\"ID0001\", etc.)\n      : \"IC\";  // smaller than all ids of docs in this test (\"ID0001\", etc.)\n          \n    for (int i=0; i<h.length; i++) {\n      String resID = s.doc(h[i].doc).get(ID_FIELD);\n      log(i+\".   score=\"+h[i].score+\"  -  \"+resID);\n      log(s.explain(q,h[i].doc));\n      if (inOrder) {\n        assertTrue(\"res id \"+resID+\" should be < prev res id \"+prevID, resID.compareTo(prevID)<0);\n      } else {\n        assertTrue(\"res id \"+resID+\" should be > prev res id \"+prevID, resID.compareTo(prevID)>0);\n      }\n      prevID = resID;\n    }\n  }\n\n","sourceOld":"  // Test that queries based on reverse/ordFieldScore scores correctly\n  private void doTestRank (String field, boolean inOrder) throws CorruptIndexException, Exception {\n    IndexSearcher s = new IndexSearcher(dir);\n    ValueSource vs;\n    if (inOrder) {\n      vs = new MultiValueSource(new OrdFieldSource(field));\n    } else {\n      vs = new MultiValueSource(new ReverseOrdFieldSource(field));\n    }\n        \n    Query q = new ValueSourceQuery(vs);\n    log(\"test: \"+q);\n    QueryUtils.check(q,s);\n    ScoreDoc[] h = s.search(q, null, 1000).scoreDocs;\n    assertEquals(\"All docs should be matched!\",N_DOCS,h.length);\n    String prevID = inOrder\n      ? \"IE\"   // greater than all ids of docs in this test (\"ID0001\", etc.)\n      : \"IC\";  // smaller than all ids of docs in this test (\"ID0001\", etc.)\n          \n    for (int i=0; i<h.length; i++) {\n      String resID = s.doc(h[i].doc).get(ID_FIELD);\n      log(i+\".   score=\"+h[i].score+\"  -  \"+resID);\n      log(s.explain(q,h[i].doc));\n      if (inOrder) {\n        assertTrue(\"res id \"+resID+\" should be < prev res id \"+prevID, resID.compareTo(prevID)<0);\n      } else {\n        assertTrue(\"res id \"+resID+\" should be > prev res id \"+prevID, resID.compareTo(prevID)>0);\n      }\n      prevID = resID;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"da967fe61e54433cf4aa1ef91a0969522a87f9d3","date":1257930738,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/function/TestOrdValues#doTestRank(String,boolean).mjava","pathOld":"src/test/org/apache/lucene/search/function/TestOrdValues#doTestRank(String,boolean).mjava","sourceNew":"  // Test that queries based on reverse/ordFieldScore scores correctly\n  private void doTestRank (String field, boolean inOrder) throws CorruptIndexException, Exception {\n    IndexSearcher s = new IndexSearcher(dir, true);\n    ValueSource vs;\n    if (inOrder) {\n      vs = new OrdFieldSource(field);\n    } else {\n      vs = new ReverseOrdFieldSource(field);\n    }\n        \n    Query q = new ValueSourceQuery(vs);\n    log(\"test: \"+q);\n    QueryUtils.check(q,s);\n    ScoreDoc[] h = s.search(q, null, 1000).scoreDocs;\n    assertEquals(\"All docs should be matched!\",N_DOCS,h.length);\n    String prevID = inOrder\n      ? \"IE\"   // greater than all ids of docs in this test (\"ID0001\", etc.)\n      : \"IC\";  // smaller than all ids of docs in this test (\"ID0001\", etc.)\n          \n    for (int i=0; i<h.length; i++) {\n      String resID = s.doc(h[i].doc).get(ID_FIELD);\n      log(i+\".   score=\"+h[i].score+\"  -  \"+resID);\n      log(s.explain(q,h[i].doc));\n      if (inOrder) {\n        assertTrue(\"res id \"+resID+\" should be < prev res id \"+prevID, resID.compareTo(prevID)<0);\n      } else {\n        assertTrue(\"res id \"+resID+\" should be > prev res id \"+prevID, resID.compareTo(prevID)>0);\n      }\n      prevID = resID;\n    }\n  }\n\n","sourceOld":"  // Test that queries based on reverse/ordFieldScore scores correctly\n  private void doTestRank (String field, boolean inOrder) throws CorruptIndexException, Exception {\n    IndexSearcher s = new IndexSearcher(dir, true);\n    ValueSource vs;\n    if (inOrder) {\n      vs = new MultiValueSource(new OrdFieldSource(field));\n    } else {\n      vs = new MultiValueSource(new ReverseOrdFieldSource(field));\n    }\n        \n    Query q = new ValueSourceQuery(vs);\n    log(\"test: \"+q);\n    QueryUtils.check(q,s);\n    ScoreDoc[] h = s.search(q, null, 1000).scoreDocs;\n    assertEquals(\"All docs should be matched!\",N_DOCS,h.length);\n    String prevID = inOrder\n      ? \"IE\"   // greater than all ids of docs in this test (\"ID0001\", etc.)\n      : \"IC\";  // smaller than all ids of docs in this test (\"ID0001\", etc.)\n          \n    for (int i=0; i<h.length; i++) {\n      String resID = s.doc(h[i].doc).get(ID_FIELD);\n      log(i+\".   score=\"+h[i].score+\"  -  \"+resID);\n      log(s.explain(q,h[i].doc));\n      if (inOrder) {\n        assertTrue(\"res id \"+resID+\" should be < prev res id \"+prevID, resID.compareTo(prevID)<0);\n      } else {\n        assertTrue(\"res id \"+resID+\" should be > prev res id \"+prevID, resID.compareTo(prevID)>0);\n      }\n      prevID = resID;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"777b7ef341decfee8757f492d8a154637cd7a384","date":1260037647,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/function/TestOrdValues#doTestRank(String,boolean).mjava","pathOld":"src/test/org/apache/lucene/search/function/TestOrdValues#doTestRank(String,boolean).mjava","sourceNew":"  // Test that queries based on reverse/ordFieldScore scores correctly\n  private void doTestRank(String field, boolean inOrder) throws CorruptIndexException, Exception {\n    IndexSearcher s = new IndexSearcher(dir, true);\n    ValueSource vs;\n    if (inOrder) {\n      vs = new OrdFieldSource(field);\n    } else {\n      vs = new ReverseOrdFieldSource(field);\n    }\n\n    Query q = new ValueSourceQuery(vs);\n    log(\"test: \" + q);\n    QueryUtils.check(q, s);\n    ScoreDoc[] h = s.search(q, null, 1000).scoreDocs;\n    assertEquals(\"All docs should be matched!\", N_DOCS, h.length);\n    String prevID = inOrder\n            ? \"IE\"   // greater than all ids of docs in this test (\"ID0001\", etc.)\n            : \"IC\";  // smaller than all ids of docs in this test (\"ID0001\", etc.)\n\n    for (int i = 0; i < h.length; i++) {\n      String resID = s.doc(h[i].doc).get(ID_FIELD);\n      log(i + \".   score=\" + h[i].score + \"  -  \" + resID);\n      log(s.explain(q, h[i].doc));\n      if (inOrder) {\n        assertTrue(\"res id \" + resID + \" should be < prev res id \" + prevID, resID.compareTo(prevID) < 0);\n      } else {\n        assertTrue(\"res id \" + resID + \" should be > prev res id \" + prevID, resID.compareTo(prevID) > 0);\n      }\n      prevID = resID;\n    }\n  }\n\n","sourceOld":"  // Test that queries based on reverse/ordFieldScore scores correctly\n  private void doTestRank (String field, boolean inOrder) throws CorruptIndexException, Exception {\n    IndexSearcher s = new IndexSearcher(dir, true);\n    ValueSource vs;\n    if (inOrder) {\n      vs = new OrdFieldSource(field);\n    } else {\n      vs = new ReverseOrdFieldSource(field);\n    }\n        \n    Query q = new ValueSourceQuery(vs);\n    log(\"test: \"+q);\n    QueryUtils.check(q,s);\n    ScoreDoc[] h = s.search(q, null, 1000).scoreDocs;\n    assertEquals(\"All docs should be matched!\",N_DOCS,h.length);\n    String prevID = inOrder\n      ? \"IE\"   // greater than all ids of docs in this test (\"ID0001\", etc.)\n      : \"IC\";  // smaller than all ids of docs in this test (\"ID0001\", etc.)\n          \n    for (int i=0; i<h.length; i++) {\n      String resID = s.doc(h[i].doc).get(ID_FIELD);\n      log(i+\".   score=\"+h[i].score+\"  -  \"+resID);\n      log(s.explain(q,h[i].doc));\n      if (inOrder) {\n        assertTrue(\"res id \"+resID+\" should be < prev res id \"+prevID, resID.compareTo(prevID)<0);\n      } else {\n        assertTrue(\"res id \"+resID+\" should be > prev res id \"+prevID, resID.compareTo(prevID)>0);\n      }\n      prevID = resID;\n    }\n  }\n\n","bugFix":null,"bugIntro":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/function/TestOrdValues#doTestRank(String,boolean).mjava","pathOld":"src/test/org/apache/lucene/search/function/TestOrdValues#doTestRank(String,boolean).mjava","sourceNew":"  // Test that queries based on reverse/ordFieldScore scores correctly\n  private void doTestRank(String field, boolean inOrder) throws CorruptIndexException, Exception {\n    IndexSearcher s = new IndexSearcher(dir, true);\n    ValueSource vs;\n    if (inOrder) {\n      vs = new OrdFieldSource(field);\n    } else {\n      vs = new ReverseOrdFieldSource(field);\n    }\n\n    Query q = new ValueSourceQuery(vs);\n    log(\"test: \" + q);\n    QueryUtils.check(q, s);\n    ScoreDoc[] h = s.search(q, null, 1000).scoreDocs;\n    assertEquals(\"All docs should be matched!\", N_DOCS, h.length);\n    String prevID = inOrder\n            ? \"IE\"   // greater than all ids of docs in this test (\"ID0001\", etc.)\n            : \"IC\";  // smaller than all ids of docs in this test (\"ID0001\", etc.)\n\n    for (int i = 0; i < h.length; i++) {\n      String resID = s.doc(h[i].doc).get(ID_FIELD);\n      log(i + \".   score=\" + h[i].score + \"  -  \" + resID);\n      log(s.explain(q, h[i].doc));\n      if (inOrder) {\n        assertTrue(\"res id \" + resID + \" should be < prev res id \" + prevID, resID.compareTo(prevID) < 0);\n      } else {\n        assertTrue(\"res id \" + resID + \" should be > prev res id \" + prevID, resID.compareTo(prevID) > 0);\n      }\n      prevID = resID;\n    }\n  }\n\n","sourceOld":"  // Test that queries based on reverse/ordFieldScore scores correctly\n  private void doTestRank(String field, boolean inOrder) throws CorruptIndexException, Exception {\n    IndexSearcher s = new IndexSearcher(dir, true);\n    ValueSource vs;\n    if (inOrder) {\n      vs = new OrdFieldSource(field);\n    } else {\n      vs = new ReverseOrdFieldSource(field);\n    }\n\n    Query q = new ValueSourceQuery(vs);\n    log(\"test: \" + q);\n    QueryUtils.check(q, s);\n    ScoreDoc[] h = s.search(q, null, 1000).scoreDocs;\n    assertEquals(\"All docs should be matched!\", N_DOCS, h.length);\n    String prevID = inOrder\n            ? \"IE\"   // greater than all ids of docs in this test (\"ID0001\", etc.)\n            : \"IC\";  // smaller than all ids of docs in this test (\"ID0001\", etc.)\n\n    for (int i = 0; i < h.length; i++) {\n      String resID = s.doc(h[i].doc).get(ID_FIELD);\n      log(i + \".   score=\" + h[i].score + \"  -  \" + resID);\n      log(s.explain(q, h[i].doc));\n      if (inOrder) {\n        assertTrue(\"res id \" + resID + \" should be < prev res id \" + prevID, resID.compareTo(prevID) < 0);\n      } else {\n        assertTrue(\"res id \" + resID + \" should be > prev res id \" + prevID, resID.compareTo(prevID) > 0);\n      }\n      prevID = resID;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["b0f3c039c6901211afce15c1d756384b4c47f5b9"],"b0f3c039c6901211afce15c1d756384b4c47f5b9":["5af07783dbc171e26a694c4f7d735e30c2769faa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0a046c0c310bc77931fc8441bd920053b607dd14":["b0f3c039c6901211afce15c1d756384b4c47f5b9","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"5af07783dbc171e26a694c4f7d735e30c2769faa":["3f74570911bfdb9f7b01948745dcd67c69676c0e"],"3f74570911bfdb9f7b01948745dcd67c69676c0e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"777b7ef341decfee8757f492d8a154637cd7a384":["da967fe61e54433cf4aa1ef91a0969522a87f9d3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["777b7ef341decfee8757f492d8a154637cd7a384"],"da967fe61e54433cf4aa1ef91a0969522a87f9d3":["0a046c0c310bc77931fc8441bd920053b607dd14"]},"commit2Childs":{"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["0a046c0c310bc77931fc8441bd920053b607dd14"],"b0f3c039c6901211afce15c1d756384b4c47f5b9":["e8d1458a2543cbd30cbfe7929be4dcb5c5251659","0a046c0c310bc77931fc8441bd920053b607dd14"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3f74570911bfdb9f7b01948745dcd67c69676c0e"],"0a046c0c310bc77931fc8441bd920053b607dd14":["da967fe61e54433cf4aa1ef91a0969522a87f9d3"],"5af07783dbc171e26a694c4f7d735e30c2769faa":["b0f3c039c6901211afce15c1d756384b4c47f5b9"],"3f74570911bfdb9f7b01948745dcd67c69676c0e":["5af07783dbc171e26a694c4f7d735e30c2769faa"],"777b7ef341decfee8757f492d8a154637cd7a384":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"da967fe61e54433cf4aa1ef91a0969522a87f9d3":["777b7ef341decfee8757f492d8a154637cd7a384"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}