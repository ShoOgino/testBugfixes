{"path":"solr/src/java/org/apache/solr/handler/AnalysisRequestHandler#getTokens(TokenStream).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/AnalysisRequestHandler#getTokens(TokenStream).mjava","pathOld":"/dev/null","sourceNew":"  static NamedList<NamedList<Object>> getTokens(TokenStream tstream) throws IOException {\n    // outer is namedList since order of tokens is important\n    NamedList<NamedList<Object>> tokens = new NamedList<NamedList<Object>>();\n    Token t = null;\n    while (((t = tstream.next()) != null)) {\n      NamedList<Object> token = new SimpleOrderedMap<Object>();\n      tokens.add(\"token\", token);\n      token.add(\"value\", new String(t.termBuffer(), 0, t.termLength()));\n      token.add(\"start\", t.startOffset());\n      token.add(\"end\", t.endOffset());\n      token.add(\"posInc\", t.getPositionIncrement());\n      token.add(\"type\", t.type());\n      //TODO: handle payloads\n    }\n    return tokens;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/handler/AnalysisRequestHandler#getTokens(TokenStream).mjava","sourceNew":null,"sourceOld":"  static NamedList<NamedList<Object>> getTokens(TokenStream tstream) throws IOException {\n    // outer is namedList since order of tokens is important\n    NamedList<NamedList<Object>> tokens = new NamedList<NamedList<Object>>();\n    Token t = null;\n    while (((t = tstream.next()) != null)) {\n      NamedList<Object> token = new SimpleOrderedMap<Object>();\n      tokens.add(\"token\", token);\n      token.add(\"value\", new String(t.termBuffer(), 0, t.termLength()));\n      token.add(\"start\", t.startOffset());\n      token.add(\"end\", t.endOffset());\n      token.add(\"posInc\", t.getPositionIncrement());\n      token.add(\"type\", t.type());\n      //TODO: handle payloads\n    }\n    return tokens;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/AnalysisRequestHandler#getTokens(TokenStream).mjava","pathOld":"src/java/org/apache/solr/handler/AnalysisRequestHandler#getTokens(TokenStream).mjava","sourceNew":"  static NamedList<NamedList<Object>> getTokens(TokenStream tstream) throws IOException {\n    // outer is namedList since order of tokens is important\n    NamedList<NamedList<Object>> tokens = new NamedList<NamedList<Object>>();\n    // TODO: support custom attributes\n    TermAttribute termAtt = (TermAttribute) tstream.addAttribute(TermAttribute.class);\n    OffsetAttribute offsetAtt = (OffsetAttribute) tstream.addAttribute(OffsetAttribute.class);\n    TypeAttribute typeAtt = (TypeAttribute) tstream.addAttribute(TypeAttribute.class);\n    PositionIncrementAttribute posIncAtt = (PositionIncrementAttribute) tstream.addAttribute(PositionIncrementAttribute.class);\n    \n    while (tstream.incrementToken()) {\n      NamedList<Object> token = new SimpleOrderedMap<Object>();\n      tokens.add(\"token\", token);\n      token.add(\"value\", new String(termAtt.termBuffer(), 0, termAtt.termLength()));\n      token.add(\"start\", offsetAtt.startOffset());\n      token.add(\"end\", offsetAtt.endOffset());\n      token.add(\"posInc\", posIncAtt.getPositionIncrement());\n      token.add(\"type\", typeAtt.type());\n      //TODO: handle payloads\n    }\n    return tokens;\n  }\n\n","sourceOld":"  static NamedList<NamedList<Object>> getTokens(TokenStream tstream) throws IOException {\n    // outer is namedList since order of tokens is important\n    NamedList<NamedList<Object>> tokens = new NamedList<NamedList<Object>>();\n    // TODO: support custom attributes\n    TermAttribute termAtt = (TermAttribute) tstream.addAttribute(TermAttribute.class);\n    OffsetAttribute offsetAtt = (OffsetAttribute) tstream.addAttribute(OffsetAttribute.class);\n    TypeAttribute typeAtt = (TypeAttribute) tstream.addAttribute(TypeAttribute.class);\n    PositionIncrementAttribute posIncAtt = (PositionIncrementAttribute) tstream.addAttribute(PositionIncrementAttribute.class);\n    \n    while (tstream.incrementToken()) {\n      NamedList<Object> token = new SimpleOrderedMap<Object>();\n      tokens.add(\"token\", token);\n      token.add(\"value\", new String(termAtt.termBuffer(), 0, termAtt.termLength()));\n      token.add(\"start\", offsetAtt.startOffset());\n      token.add(\"end\", offsetAtt.endOffset());\n      token.add(\"posInc\", posIncAtt.getPositionIncrement());\n      token.add(\"type\", typeAtt.type());\n      //TODO: handle payloads\n    }\n    return tokens;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/AnalysisRequestHandler#getTokens(TokenStream).mjava","pathOld":"/dev/null","sourceNew":"  static NamedList<NamedList<Object>> getTokens(TokenStream tstream) throws IOException {\n    // outer is namedList since order of tokens is important\n    NamedList<NamedList<Object>> tokens = new NamedList<NamedList<Object>>();\n    // TODO: support custom attributes\n    TermAttribute termAtt = (TermAttribute) tstream.addAttribute(TermAttribute.class);\n    OffsetAttribute offsetAtt = (OffsetAttribute) tstream.addAttribute(OffsetAttribute.class);\n    TypeAttribute typeAtt = (TypeAttribute) tstream.addAttribute(TypeAttribute.class);\n    PositionIncrementAttribute posIncAtt = (PositionIncrementAttribute) tstream.addAttribute(PositionIncrementAttribute.class);\n    \n    while (tstream.incrementToken()) {\n      NamedList<Object> token = new SimpleOrderedMap<Object>();\n      tokens.add(\"token\", token);\n      token.add(\"value\", new String(termAtt.termBuffer(), 0, termAtt.termLength()));\n      token.add(\"start\", offsetAtt.startOffset());\n      token.add(\"end\", offsetAtt.endOffset());\n      token.add(\"posInc\", posIncAtt.getPositionIncrement());\n      token.add(\"type\", typeAtt.type());\n      //TODO: handle payloads\n    }\n    return tokens;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/AnalysisRequestHandler#getTokens(TokenStream).mjava","pathOld":"solr/src/java/org/apache/solr/handler/AnalysisRequestHandler#getTokens(TokenStream).mjava","sourceNew":"  static NamedList<NamedList<Object>> getTokens(TokenStream tstream) throws IOException {\n    // outer is namedList since order of tokens is important\n    NamedList<NamedList<Object>> tokens = new NamedList<NamedList<Object>>();\n    // TODO: support custom attributes\n    TermAttribute termAtt = null;\n    TermToBytesRefAttribute bytesAtt = null;\n    if (tstream.hasAttribute(TermAttribute.class)) {\n      termAtt = tstream.getAttribute(TermAttribute.class);\n    } else if (tstream.hasAttribute(TermToBytesRefAttribute.class)) {\n      bytesAtt = tstream.getAttribute(TermToBytesRefAttribute.class);\n    }\n    final OffsetAttribute offsetAtt = tstream.addAttribute(OffsetAttribute.class);\n    final TypeAttribute typeAtt = tstream.addAttribute(TypeAttribute.class);\n    final PositionIncrementAttribute posIncAtt = tstream.addAttribute(PositionIncrementAttribute.class);\n    \n    final BytesRef bytes = new BytesRef();\n    while (tstream.incrementToken()) {\n      NamedList<Object> token = new SimpleOrderedMap<Object>();\n      tokens.add(\"token\", token);\n      if (termAtt != null) {\n        token.add(\"value\", termAtt.term());\n      }\n      if (bytesAtt != null) {\n        bytesAtt.toBytesRef(bytes);\n        // TODO: This is incorrect when numeric fields change in later lucene versions. It should use BytesRef directly!\n        token.add(\"value\", bytes.utf8ToString());\n      }\n      token.add(\"start\", offsetAtt.startOffset());\n      token.add(\"end\", offsetAtt.endOffset());\n      token.add(\"posInc\", posIncAtt.getPositionIncrement());\n      token.add(\"type\", typeAtt.type());\n      //TODO: handle payloads\n    }\n    return tokens;\n  }\n\n","sourceOld":"  static NamedList<NamedList<Object>> getTokens(TokenStream tstream) throws IOException {\n    // outer is namedList since order of tokens is important\n    NamedList<NamedList<Object>> tokens = new NamedList<NamedList<Object>>();\n    // TODO: support custom attributes\n    TermAttribute termAtt = (TermAttribute) tstream.addAttribute(TermAttribute.class);\n    OffsetAttribute offsetAtt = (OffsetAttribute) tstream.addAttribute(OffsetAttribute.class);\n    TypeAttribute typeAtt = (TypeAttribute) tstream.addAttribute(TypeAttribute.class);\n    PositionIncrementAttribute posIncAtt = (PositionIncrementAttribute) tstream.addAttribute(PositionIncrementAttribute.class);\n    \n    while (tstream.incrementToken()) {\n      NamedList<Object> token = new SimpleOrderedMap<Object>();\n      tokens.add(\"token\", token);\n      token.add(\"value\", new String(termAtt.termBuffer(), 0, termAtt.termLength()));\n      token.add(\"start\", offsetAtt.startOffset());\n      token.add(\"end\", offsetAtt.endOffset());\n      token.add(\"posInc\", posIncAtt.getPositionIncrement());\n      token.add(\"type\", typeAtt.type());\n      //TODO: handle payloads\n    }\n    return tokens;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d085fb336a7208eea2214e5ffcc803960819b60b","date":1270981894,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/AnalysisRequestHandler#getTokens(TokenStream).mjava","pathOld":"solr/src/java/org/apache/solr/handler/AnalysisRequestHandler#getTokens(TokenStream).mjava","sourceNew":"  static NamedList<NamedList<Object>> getTokens(TokenStream tstream) throws IOException {\n    // outer is namedList since order of tokens is important\n    NamedList<NamedList<Object>> tokens = new NamedList<NamedList<Object>>();\n    // TODO: support custom attributes\n    CharTermAttribute termAtt = null;\n    TermToBytesRefAttribute bytesAtt = null;\n    if (tstream.hasAttribute(CharTermAttribute.class)) {\n      termAtt = tstream.getAttribute(CharTermAttribute.class);\n    } else if (tstream.hasAttribute(TermToBytesRefAttribute.class)) {\n      bytesAtt = tstream.getAttribute(TermToBytesRefAttribute.class);\n    }\n    final OffsetAttribute offsetAtt = tstream.addAttribute(OffsetAttribute.class);\n    final TypeAttribute typeAtt = tstream.addAttribute(TypeAttribute.class);\n    final PositionIncrementAttribute posIncAtt = tstream.addAttribute(PositionIncrementAttribute.class);\n    \n    final BytesRef bytes = new BytesRef();\n    while (tstream.incrementToken()) {\n      NamedList<Object> token = new SimpleOrderedMap<Object>();\n      tokens.add(\"token\", token);\n      if (termAtt != null) {\n        token.add(\"value\", termAtt.toString());\n      }\n      if (bytesAtt != null) {\n        bytesAtt.toBytesRef(bytes);\n        // TODO: This is incorrect when numeric fields change in later lucene versions. It should use BytesRef directly!\n        token.add(\"value\", bytes.utf8ToString());\n      }\n      token.add(\"start\", offsetAtt.startOffset());\n      token.add(\"end\", offsetAtt.endOffset());\n      token.add(\"posInc\", posIncAtt.getPositionIncrement());\n      token.add(\"type\", typeAtt.type());\n      //TODO: handle payloads\n    }\n    return tokens;\n  }\n\n","sourceOld":"  static NamedList<NamedList<Object>> getTokens(TokenStream tstream) throws IOException {\n    // outer is namedList since order of tokens is important\n    NamedList<NamedList<Object>> tokens = new NamedList<NamedList<Object>>();\n    // TODO: support custom attributes\n    TermAttribute termAtt = null;\n    TermToBytesRefAttribute bytesAtt = null;\n    if (tstream.hasAttribute(TermAttribute.class)) {\n      termAtt = tstream.getAttribute(TermAttribute.class);\n    } else if (tstream.hasAttribute(TermToBytesRefAttribute.class)) {\n      bytesAtt = tstream.getAttribute(TermToBytesRefAttribute.class);\n    }\n    final OffsetAttribute offsetAtt = tstream.addAttribute(OffsetAttribute.class);\n    final TypeAttribute typeAtt = tstream.addAttribute(TypeAttribute.class);\n    final PositionIncrementAttribute posIncAtt = tstream.addAttribute(PositionIncrementAttribute.class);\n    \n    final BytesRef bytes = new BytesRef();\n    while (tstream.incrementToken()) {\n      NamedList<Object> token = new SimpleOrderedMap<Object>();\n      tokens.add(\"token\", token);\n      if (termAtt != null) {\n        token.add(\"value\", termAtt.term());\n      }\n      if (bytesAtt != null) {\n        bytesAtt.toBytesRef(bytes);\n        // TODO: This is incorrect when numeric fields change in later lucene versions. It should use BytesRef directly!\n        token.add(\"value\", bytes.utf8ToString());\n      }\n      token.add(\"start\", offsetAtt.startOffset());\n      token.add(\"end\", offsetAtt.endOffset());\n      token.add(\"posInc\", posIncAtt.getPositionIncrement());\n      token.add(\"type\", typeAtt.type());\n      //TODO: handle payloads\n    }\n    return tokens;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3ee857a409368c4693aaff6b8aafb539ba07a1b3","date":1293240111,"type":4,"author":"Yonik Seeley","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/handler/AnalysisRequestHandler#getTokens(TokenStream).mjava","sourceNew":null,"sourceOld":"  static NamedList<NamedList<Object>> getTokens(TokenStream tstream) throws IOException {\n    // outer is namedList since order of tokens is important\n    NamedList<NamedList<Object>> tokens = new NamedList<NamedList<Object>>();\n    // TODO: support custom attributes\n    CharTermAttribute termAtt = null;\n    TermToBytesRefAttribute bytesAtt = null;\n    if (tstream.hasAttribute(CharTermAttribute.class)) {\n      termAtt = tstream.getAttribute(CharTermAttribute.class);\n    } else if (tstream.hasAttribute(TermToBytesRefAttribute.class)) {\n      bytesAtt = tstream.getAttribute(TermToBytesRefAttribute.class);\n    }\n    final OffsetAttribute offsetAtt = tstream.addAttribute(OffsetAttribute.class);\n    final TypeAttribute typeAtt = tstream.addAttribute(TypeAttribute.class);\n    final PositionIncrementAttribute posIncAtt = tstream.addAttribute(PositionIncrementAttribute.class);\n    \n    final BytesRef bytes = new BytesRef();\n    while (tstream.incrementToken()) {\n      NamedList<Object> token = new SimpleOrderedMap<Object>();\n      tokens.add(\"token\", token);\n      if (termAtt != null) {\n        token.add(\"value\", termAtt.toString());\n      }\n      if (bytesAtt != null) {\n        bytesAtt.toBytesRef(bytes);\n        // TODO: This is incorrect when numeric fields change in later lucene versions. It should use BytesRef directly!\n        token.add(\"value\", bytes.utf8ToString());\n      }\n      token.add(\"start\", offsetAtt.startOffset());\n      token.add(\"end\", offsetAtt.endOffset());\n      token.add(\"posInc\", posIncAtt.getPositionIncrement());\n      token.add(\"type\", typeAtt.type());\n      //TODO: handle payloads\n    }\n    return tokens;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c55212e05b7fb8ce60fcd70d61b8ed8221830f73","date":1293245506,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/AnalysisRequestHandler#getTokens(TokenStream).mjava","pathOld":"/dev/null","sourceNew":"  static NamedList<NamedList<Object>> getTokens(TokenStream tstream) throws IOException {\n    // outer is namedList since order of tokens is important\n    NamedList<NamedList<Object>> tokens = new NamedList<NamedList<Object>>();\n    // TODO: support custom attributes\n    CharTermAttribute termAtt = null;\n    TermToBytesRefAttribute bytesAtt = null;\n    if (tstream.hasAttribute(CharTermAttribute.class)) {\n      termAtt = tstream.getAttribute(CharTermAttribute.class);\n    } else if (tstream.hasAttribute(TermToBytesRefAttribute.class)) {\n      bytesAtt = tstream.getAttribute(TermToBytesRefAttribute.class);\n    }\n    final OffsetAttribute offsetAtt = tstream.addAttribute(OffsetAttribute.class);\n    final TypeAttribute typeAtt = tstream.addAttribute(TypeAttribute.class);\n    final PositionIncrementAttribute posIncAtt = tstream.addAttribute(PositionIncrementAttribute.class);\n    \n    final BytesRef bytes = new BytesRef();\n    while (tstream.incrementToken()) {\n      NamedList<Object> token = new SimpleOrderedMap<Object>();\n      tokens.add(\"token\", token);\n      if (termAtt != null) {\n        token.add(\"value\", termAtt.toString());\n      }\n      if (bytesAtt != null) {\n        bytesAtt.toBytesRef(bytes);\n        // TODO: This is incorrect when numeric fields change in later lucene versions. It should use BytesRef directly!\n        token.add(\"value\", bytes.utf8ToString());\n      }\n      token.add(\"start\", offsetAtt.startOffset());\n      token.add(\"end\", offsetAtt.endOffset());\n      token.add(\"posInc\", posIncAtt.getPositionIncrement());\n      token.add(\"type\", typeAtt.type());\n      //TODO: handle payloads\n    }\n    return tokens;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ec58fb7921964848d01bea54f8ec4a2ac813eaeb","date":1295476876,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/handler/AnalysisRequestHandler#getTokens(TokenStream).mjava","sourceNew":null,"sourceOld":"  static NamedList<NamedList<Object>> getTokens(TokenStream tstream) throws IOException {\n    // outer is namedList since order of tokens is important\n    NamedList<NamedList<Object>> tokens = new NamedList<NamedList<Object>>();\n    // TODO: support custom attributes\n    CharTermAttribute termAtt = null;\n    TermToBytesRefAttribute bytesAtt = null;\n    if (tstream.hasAttribute(CharTermAttribute.class)) {\n      termAtt = tstream.getAttribute(CharTermAttribute.class);\n    } else if (tstream.hasAttribute(TermToBytesRefAttribute.class)) {\n      bytesAtt = tstream.getAttribute(TermToBytesRefAttribute.class);\n    }\n    final OffsetAttribute offsetAtt = tstream.addAttribute(OffsetAttribute.class);\n    final TypeAttribute typeAtt = tstream.addAttribute(TypeAttribute.class);\n    final PositionIncrementAttribute posIncAtt = tstream.addAttribute(PositionIncrementAttribute.class);\n    \n    final BytesRef bytes = new BytesRef();\n    while (tstream.incrementToken()) {\n      NamedList<Object> token = new SimpleOrderedMap<Object>();\n      tokens.add(\"token\", token);\n      if (termAtt != null) {\n        token.add(\"value\", termAtt.toString());\n      }\n      if (bytesAtt != null) {\n        bytesAtt.toBytesRef(bytes);\n        // TODO: This is incorrect when numeric fields change in later lucene versions. It should use BytesRef directly!\n        token.add(\"value\", bytes.utf8ToString());\n      }\n      token.add(\"start\", offsetAtt.startOffset());\n      token.add(\"end\", offsetAtt.endOffset());\n      token.add(\"posInc\", posIncAtt.getPositionIncrement());\n      token.add(\"type\", typeAtt.type());\n      //TODO: handle payloads\n    }\n    return tokens;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e79a6d080bdd5b2a8f56342cf571b5476de04180","date":1295638686,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/handler/AnalysisRequestHandler#getTokens(TokenStream).mjava","sourceNew":null,"sourceOld":"  static NamedList<NamedList<Object>> getTokens(TokenStream tstream) throws IOException {\n    // outer is namedList since order of tokens is important\n    NamedList<NamedList<Object>> tokens = new NamedList<NamedList<Object>>();\n    // TODO: support custom attributes\n    CharTermAttribute termAtt = null;\n    TermToBytesRefAttribute bytesAtt = null;\n    if (tstream.hasAttribute(CharTermAttribute.class)) {\n      termAtt = tstream.getAttribute(CharTermAttribute.class);\n    } else if (tstream.hasAttribute(TermToBytesRefAttribute.class)) {\n      bytesAtt = tstream.getAttribute(TermToBytesRefAttribute.class);\n    }\n    final OffsetAttribute offsetAtt = tstream.addAttribute(OffsetAttribute.class);\n    final TypeAttribute typeAtt = tstream.addAttribute(TypeAttribute.class);\n    final PositionIncrementAttribute posIncAtt = tstream.addAttribute(PositionIncrementAttribute.class);\n    \n    final BytesRef bytes = new BytesRef();\n    while (tstream.incrementToken()) {\n      NamedList<Object> token = new SimpleOrderedMap<Object>();\n      tokens.add(\"token\", token);\n      if (termAtt != null) {\n        token.add(\"value\", termAtt.toString());\n      }\n      if (bytesAtt != null) {\n        bytesAtt.toBytesRef(bytes);\n        // TODO: This is incorrect when numeric fields change in later lucene versions. It should use BytesRef directly!\n        token.add(\"value\", bytes.utf8ToString());\n      }\n      token.add(\"start\", offsetAtt.startOffset());\n      token.add(\"end\", offsetAtt.endOffset());\n      token.add(\"posInc\", posIncAtt.getPositionIncrement());\n      token.add(\"type\", typeAtt.type());\n      //TODO: handle payloads\n    }\n    return tokens;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/handler/AnalysisRequestHandler#getTokens(TokenStream).mjava","sourceNew":null,"sourceOld":"  static NamedList<NamedList<Object>> getTokens(TokenStream tstream) throws IOException {\n    // outer is namedList since order of tokens is important\n    NamedList<NamedList<Object>> tokens = new NamedList<NamedList<Object>>();\n    // TODO: support custom attributes\n    CharTermAttribute termAtt = null;\n    TermToBytesRefAttribute bytesAtt = null;\n    if (tstream.hasAttribute(CharTermAttribute.class)) {\n      termAtt = tstream.getAttribute(CharTermAttribute.class);\n    } else if (tstream.hasAttribute(TermToBytesRefAttribute.class)) {\n      bytesAtt = tstream.getAttribute(TermToBytesRefAttribute.class);\n    }\n    final OffsetAttribute offsetAtt = tstream.addAttribute(OffsetAttribute.class);\n    final TypeAttribute typeAtt = tstream.addAttribute(TypeAttribute.class);\n    final PositionIncrementAttribute posIncAtt = tstream.addAttribute(PositionIncrementAttribute.class);\n    \n    final BytesRef bytes = new BytesRef();\n    while (tstream.incrementToken()) {\n      NamedList<Object> token = new SimpleOrderedMap<Object>();\n      tokens.add(\"token\", token);\n      if (termAtt != null) {\n        token.add(\"value\", termAtt.toString());\n      }\n      if (bytesAtt != null) {\n        bytesAtt.toBytesRef(bytes);\n        // TODO: This is incorrect when numeric fields change in later lucene versions. It should use BytesRef directly!\n        token.add(\"value\", bytes.utf8ToString());\n      }\n      token.add(\"start\", offsetAtt.startOffset());\n      token.add(\"end\", offsetAtt.endOffset());\n      token.add(\"posInc\", posIncAtt.getPositionIncrement());\n      token.add(\"type\", typeAtt.type());\n      //TODO: handle payloads\n    }\n    return tokens;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3ee857a409368c4693aaff6b8aafb539ba07a1b3":["d085fb336a7208eea2214e5ffcc803960819b60b"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["1da8d55113b689b06716246649de6f62430f15c0"],"ec58fb7921964848d01bea54f8ec4a2ac813eaeb":["c55212e05b7fb8ce60fcd70d61b8ed8221830f73"],"e79a6d080bdd5b2a8f56342cf571b5476de04180":["d085fb336a7208eea2214e5ffcc803960819b60b","ec58fb7921964848d01bea54f8ec4a2ac813eaeb"],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["d085fb336a7208eea2214e5ffcc803960819b60b","ec58fb7921964848d01bea54f8ec4a2ac813eaeb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"d085fb336a7208eea2214e5ffcc803960819b60b":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"c55212e05b7fb8ce60fcd70d61b8ed8221830f73":["3ee857a409368c4693aaff6b8aafb539ba07a1b3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ec58fb7921964848d01bea54f8ec4a2ac813eaeb"]},"commit2Childs":{"3ee857a409368c4693aaff6b8aafb539ba07a1b3":["c55212e05b7fb8ce60fcd70d61b8ed8221830f73"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["d085fb336a7208eea2214e5ffcc803960819b60b"],"ec58fb7921964848d01bea54f8ec4a2ac813eaeb":["e79a6d080bdd5b2a8f56342cf571b5476de04180","29ef99d61cda9641b6250bf9567329a6e65f901d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e79a6d080bdd5b2a8f56342cf571b5476de04180":[],"1da8d55113b689b06716246649de6f62430f15c0":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"d085fb336a7208eea2214e5ffcc803960819b60b":["3ee857a409368c4693aaff6b8aafb539ba07a1b3","e79a6d080bdd5b2a8f56342cf571b5476de04180","29ef99d61cda9641b6250bf9567329a6e65f901d"],"c55212e05b7fb8ce60fcd70d61b8ed8221830f73":["ec58fb7921964848d01bea54f8ec4a2ac813eaeb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e79a6d080bdd5b2a8f56342cf571b5476de04180","29ef99d61cda9641b6250bf9567329a6e65f901d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}