{"path":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#installTestCodecs(String,CodecProvider).mjava","commits":[{"id":"182cfc5b92d5da17fd74fc41c8091ed157d80ff4","date":1290263949,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#installTestCodecs(String,CodecProvider).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#installTestCodecs().mjava","sourceNew":"  // returns current default codec\n  static Codec installTestCodecs(String codec, CodecProvider cp) {\n    savedDefaultCodec = cp.getDefaultFieldCodec();\n\n    final boolean codecHasParam;\n    int codecParam = 0;\n    if (codec.equals(\"randomPerField\")) {\n      // lie\n      codec = \"Standard\";\n      codecHasParam = false;\n    } else if (codec.equals(\"random\")) {\n      codec = pickRandomCodec(random);\n      codecHasParam = false;\n    } else {\n      Matcher m = codecWithParam.matcher(codec);\n      if (m.matches()) {\n        // codec has a fixed param\n        codecHasParam = true;\n        codec = m.group(1);\n        codecParam = Integer.parseInt(m.group(2));\n      } else {\n        codecHasParam = false;\n      }\n    }\n\n    cp.setDefaultFieldCodec(codec);\n\n    if (codec.equals(\"PreFlex\")) {\n      // If we're running w/ PreFlex codec we must swap in the\n      // test-only PreFlexRW codec (since core PreFlex can\n      // only read segments):\n      swapCodec(new PreFlexRWCodec(), cp);\n    }\n\n    swapCodec(new MockSepCodec(), cp);\n    swapCodec(new PulsingCodec(codecHasParam && \"Pulsing\".equals(codec) ? codecParam : _TestUtil.nextInt(random, 1, 20)), cp);\n    swapCodec(new MockFixedIntBlockCodec(codecHasParam && \"MockFixedIntBlock\".equals(codec) ? codecParam : _TestUtil.nextInt(random, 1, 2000)), cp);\n    // baseBlockSize cannot be over 127:\n    swapCodec(new MockVariableIntBlockCodec(codecHasParam && \"MockVariableIntBlock\".equals(codec) ? codecParam : _TestUtil.nextInt(random, 1, 127)), cp);\n\n    return cp.lookup(codec);\n  }\n\n","sourceOld":"  // returns current default codec\n  static Codec installTestCodecs() {\n    final CodecProvider cp = CodecProvider.getDefault();\n\n    savedDefaultCodec = cp.getDefaultFieldCodec();\n    String codec = TEST_CODEC;\n\n    final boolean codecHasParam;\n    int codecParam = 0;\n    if (codec.equals(\"random\")) {\n      codec = pickRandomCodec(random);\n      codecHasParam = false;\n    } else {\n      Matcher m = codecWithParam.matcher(codec);\n      if (m.matches()) {\n        // codec has a fixed param\n        codecHasParam = true;\n        codec = m.group(1);\n        codecParam = Integer.parseInt(m.group(2));\n      } else {\n        codecHasParam = false;\n      }\n    }\n\n    cp.setDefaultFieldCodec(codec);\n\n    if (codec.equals(\"PreFlex\")) {\n      // If we're running w/ PreFlex codec we must swap in the\n      // test-only PreFlexRW codec (since core PreFlex can\n      // only read segments):\n      swapCodec(new PreFlexRWCodec());\n    }\n\n    swapCodec(new MockSepCodec());\n    swapCodec(new PulsingCodec(codecHasParam && \"Pulsing\".equals(codec) ? codecParam : _TestUtil.nextInt(random, 1, 20)));\n    swapCodec(new MockFixedIntBlockCodec(codecHasParam && \"MockFixedIntBlock\".equals(codec) ? codecParam : _TestUtil.nextInt(random, 1, 2000)));\n    // baseBlockSize cannot be over 127:\n    swapCodec(new MockVariableIntBlockCodec(codecHasParam && \"MockVariableIntBlock\".equals(codec) ? codecParam : _TestUtil.nextInt(random, 1, 127)));\n\n    return cp.lookup(codec);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#installTestCodecs(String,CodecProvider).mjava","pathOld":"/dev/null","sourceNew":"  // returns current default codec\n  static Codec installTestCodecs(String codec, CodecProvider cp) {\n    savedDefaultCodec = cp.getDefaultFieldCodec();\n\n    final boolean codecHasParam;\n    int codecParam = 0;\n    if (codec.equals(\"randomPerField\")) {\n      // lie\n      codec = \"Standard\";\n      codecHasParam = false;\n    } else if (codec.equals(\"random\")) {\n      codec = pickRandomCodec(random);\n      codecHasParam = false;\n    } else {\n      Matcher m = codecWithParam.matcher(codec);\n      if (m.matches()) {\n        // codec has a fixed param\n        codecHasParam = true;\n        codec = m.group(1);\n        codecParam = Integer.parseInt(m.group(2));\n      } else {\n        codecHasParam = false;\n      }\n    }\n\n    cp.setDefaultFieldCodec(codec);\n\n    if (codec.equals(\"PreFlex\")) {\n      // If we're running w/ PreFlex codec we must swap in the\n      // test-only PreFlexRW codec (since core PreFlex can\n      // only read segments):\n      swapCodec(new PreFlexRWCodec(), cp);\n    }\n\n    swapCodec(new MockSepCodec(), cp);\n    swapCodec(new PulsingCodec(codecHasParam && \"Pulsing\".equals(codec) ? codecParam : _TestUtil.nextInt(random, 1, 20)), cp);\n    swapCodec(new MockFixedIntBlockCodec(codecHasParam && \"MockFixedIntBlock\".equals(codec) ? codecParam : _TestUtil.nextInt(random, 1, 2000)), cp);\n    // baseBlockSize cannot be over 127:\n    swapCodec(new MockVariableIntBlockCodec(codecHasParam && \"MockVariableIntBlock\".equals(codec) ? codecParam : _TestUtil.nextInt(random, 1, 127)), cp);\n\n    return cp.lookup(codec);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#installTestCodecs(String,CodecProvider).mjava","pathOld":"/dev/null","sourceNew":"  // returns current default codec\n  static Codec installTestCodecs(String codec, CodecProvider cp) {\n    savedDefaultCodec = cp.getDefaultFieldCodec();\n\n    final boolean codecHasParam;\n    int codecParam = 0;\n    if (codec.equals(\"randomPerField\")) {\n      // lie\n      codec = \"Standard\";\n      codecHasParam = false;\n    } else if (codec.equals(\"random\")) {\n      codec = pickRandomCodec(random);\n      codecHasParam = false;\n    } else {\n      Matcher m = codecWithParam.matcher(codec);\n      if (m.matches()) {\n        // codec has a fixed param\n        codecHasParam = true;\n        codec = m.group(1);\n        codecParam = Integer.parseInt(m.group(2));\n      } else {\n        codecHasParam = false;\n      }\n    }\n\n    cp.setDefaultFieldCodec(codec);\n\n    if (codec.equals(\"PreFlex\")) {\n      // If we're running w/ PreFlex codec we must swap in the\n      // test-only PreFlexRW codec (since core PreFlex can\n      // only read segments):\n      swapCodec(new PreFlexRWCodec(), cp);\n    }\n\n    swapCodec(new MockSepCodec(), cp);\n    swapCodec(new PulsingCodec(codecHasParam && \"Pulsing\".equals(codec) ? codecParam : _TestUtil.nextInt(random, 1, 20)), cp);\n    swapCodec(new MockFixedIntBlockCodec(codecHasParam && \"MockFixedIntBlock\".equals(codec) ? codecParam : _TestUtil.nextInt(random, 1, 2000)), cp);\n    // baseBlockSize cannot be over 127:\n    swapCodec(new MockVariableIntBlockCodec(codecHasParam && \"MockVariableIntBlock\".equals(codec) ? codecParam : _TestUtil.nextInt(random, 1, 127)), cp);\n\n    return cp.lookup(codec);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56da903869515527852ee21ea7ef7bfe414cd40d","date":1294224724,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#installTestCodecs(String,CodecProvider).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#installTestCodecs(String,CodecProvider).mjava","sourceNew":"  // returns current default codec\n  static Codec installTestCodecs(String codec, CodecProvider cp) {\n    savedDefaultCodec = cp.getDefaultFieldCodec();\n\n    final boolean codecHasParam;\n    int codecParam = 0;\n    if (codec.equals(\"randomPerField\")) {\n      // lie\n      codec = \"Standard\";\n      codecHasParam = false;\n    } else if (codec.equals(\"random\")) {\n      codec = pickRandomCodec(random);\n      codecHasParam = false;\n    } else {\n      Matcher m = codecWithParam.matcher(codec);\n      if (m.matches()) {\n        // codec has a fixed param\n        codecHasParam = true;\n        codec = m.group(1);\n        codecParam = Integer.parseInt(m.group(2));\n      } else {\n        codecHasParam = false;\n      }\n    }\n\n    cp.setDefaultFieldCodec(codec);\n\n    if (codec.equals(\"PreFlex\")) {\n      // If we're running w/ PreFlex codec we must swap in the\n      // test-only PreFlexRW codec (since core PreFlex can\n      // only read segments):\n      swapCodec(new PreFlexRWCodec(), cp);\n    }\n\n    swapCodec(new MockSepCodec(), cp);\n    swapCodec(new PulsingCodec(codecHasParam && \"Pulsing\".equals(codec) ? codecParam : _TestUtil.nextInt(random, 1, 20)), cp);\n    swapCodec(new MockFixedIntBlockCodec(codecHasParam && \"MockFixedIntBlock\".equals(codec) ? codecParam : _TestUtil.nextInt(random, 1, 2000)), cp);\n    // baseBlockSize cannot be over 127:\n    swapCodec(new MockVariableIntBlockCodec(codecHasParam && \"MockVariableIntBlock\".equals(codec) ? codecParam : _TestUtil.nextInt(random, 1, 127)), cp);\n    swapCodec(new MockRandomCodec(random), cp);\n\n    return cp.lookup(codec);\n  }\n\n","sourceOld":"  // returns current default codec\n  static Codec installTestCodecs(String codec, CodecProvider cp) {\n    savedDefaultCodec = cp.getDefaultFieldCodec();\n\n    final boolean codecHasParam;\n    int codecParam = 0;\n    if (codec.equals(\"randomPerField\")) {\n      // lie\n      codec = \"Standard\";\n      codecHasParam = false;\n    } else if (codec.equals(\"random\")) {\n      codec = pickRandomCodec(random);\n      codecHasParam = false;\n    } else {\n      Matcher m = codecWithParam.matcher(codec);\n      if (m.matches()) {\n        // codec has a fixed param\n        codecHasParam = true;\n        codec = m.group(1);\n        codecParam = Integer.parseInt(m.group(2));\n      } else {\n        codecHasParam = false;\n      }\n    }\n\n    cp.setDefaultFieldCodec(codec);\n\n    if (codec.equals(\"PreFlex\")) {\n      // If we're running w/ PreFlex codec we must swap in the\n      // test-only PreFlexRW codec (since core PreFlex can\n      // only read segments):\n      swapCodec(new PreFlexRWCodec(), cp);\n    }\n\n    swapCodec(new MockSepCodec(), cp);\n    swapCodec(new PulsingCodec(codecHasParam && \"Pulsing\".equals(codec) ? codecParam : _TestUtil.nextInt(random, 1, 20)), cp);\n    swapCodec(new MockFixedIntBlockCodec(codecHasParam && \"MockFixedIntBlock\".equals(codec) ? codecParam : _TestUtil.nextInt(random, 1, 2000)), cp);\n    // baseBlockSize cannot be over 127:\n    swapCodec(new MockVariableIntBlockCodec(codecHasParam && \"MockVariableIntBlock\".equals(codec) ? codecParam : _TestUtil.nextInt(random, 1, 127)), cp);\n\n    return cp.lookup(codec);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#installTestCodecs(String,CodecProvider).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#installTestCodecs(String,CodecProvider).mjava","sourceNew":"  // returns current default codec\n  static Codec installTestCodecs(String codec, CodecProvider cp) {\n    savedDefaultCodec = cp.getDefaultFieldCodec();\n\n    final boolean codecHasParam;\n    int codecParam = 0;\n    if (codec.equals(\"randomPerField\")) {\n      // lie\n      codec = \"Standard\";\n      codecHasParam = false;\n    } else if (codec.equals(\"random\")) {\n      codec = pickRandomCodec(random);\n      codecHasParam = false;\n    } else {\n      Matcher m = codecWithParam.matcher(codec);\n      if (m.matches()) {\n        // codec has a fixed param\n        codecHasParam = true;\n        codec = m.group(1);\n        codecParam = Integer.parseInt(m.group(2));\n      } else {\n        codecHasParam = false;\n      }\n    }\n\n    cp.setDefaultFieldCodec(codec);\n\n    if (codec.equals(\"PreFlex\")) {\n      // If we're running w/ PreFlex codec we must swap in the\n      // test-only PreFlexRW codec (since core PreFlex can\n      // only read segments):\n      swapCodec(new PreFlexRWCodec(), cp);\n    }\n\n    swapCodec(new MockSepCodec(), cp);\n    swapCodec(new PulsingCodec(codecHasParam && \"Pulsing\".equals(codec) ? codecParam : _TestUtil.nextInt(random, 1, 20)), cp);\n    swapCodec(new MockFixedIntBlockCodec(codecHasParam && \"MockFixedIntBlock\".equals(codec) ? codecParam : _TestUtil.nextInt(random, 1, 2000)), cp);\n    // baseBlockSize cannot be over 127:\n    swapCodec(new MockVariableIntBlockCodec(codecHasParam && \"MockVariableIntBlock\".equals(codec) ? codecParam : _TestUtil.nextInt(random, 1, 127)), cp);\n    swapCodec(new MockRandomCodec(random), cp);\n\n    return cp.lookup(codec);\n  }\n\n","sourceOld":"  // returns current default codec\n  static Codec installTestCodecs(String codec, CodecProvider cp) {\n    savedDefaultCodec = cp.getDefaultFieldCodec();\n\n    final boolean codecHasParam;\n    int codecParam = 0;\n    if (codec.equals(\"randomPerField\")) {\n      // lie\n      codec = \"Standard\";\n      codecHasParam = false;\n    } else if (codec.equals(\"random\")) {\n      codec = pickRandomCodec(random);\n      codecHasParam = false;\n    } else {\n      Matcher m = codecWithParam.matcher(codec);\n      if (m.matches()) {\n        // codec has a fixed param\n        codecHasParam = true;\n        codec = m.group(1);\n        codecParam = Integer.parseInt(m.group(2));\n      } else {\n        codecHasParam = false;\n      }\n    }\n\n    cp.setDefaultFieldCodec(codec);\n\n    if (codec.equals(\"PreFlex\")) {\n      // If we're running w/ PreFlex codec we must swap in the\n      // test-only PreFlexRW codec (since core PreFlex can\n      // only read segments):\n      swapCodec(new PreFlexRWCodec(), cp);\n    }\n\n    swapCodec(new MockSepCodec(), cp);\n    swapCodec(new PulsingCodec(codecHasParam && \"Pulsing\".equals(codec) ? codecParam : _TestUtil.nextInt(random, 1, 20)), cp);\n    swapCodec(new MockFixedIntBlockCodec(codecHasParam && \"MockFixedIntBlock\".equals(codec) ? codecParam : _TestUtil.nextInt(random, 1, 2000)), cp);\n    // baseBlockSize cannot be over 127:\n    swapCodec(new MockVariableIntBlockCodec(codecHasParam && \"MockVariableIntBlock\".equals(codec) ? codecParam : _TestUtil.nextInt(random, 1, 127)), cp);\n\n    return cp.lookup(codec);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#installTestCodecs(String,CodecProvider).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#installTestCodecs(String,CodecProvider).mjava","sourceNew":"  // returns current default codec\n  static Codec installTestCodecs(String codec, CodecProvider cp) {\n    savedDefaultCodec = cp.getDefaultFieldCodec();\n\n    final boolean codecHasParam;\n    int codecParam = 0;\n    if (codec.equals(\"randomPerField\")) {\n      // lie\n      codec = \"Standard\";\n      codecHasParam = false;\n    } else if (codec.equals(\"random\")) {\n      codec = pickRandomCodec(random);\n      codecHasParam = false;\n    } else {\n      Matcher m = codecWithParam.matcher(codec);\n      if (m.matches()) {\n        // codec has a fixed param\n        codecHasParam = true;\n        codec = m.group(1);\n        codecParam = Integer.parseInt(m.group(2));\n      } else {\n        codecHasParam = false;\n      }\n    }\n\n    cp.setDefaultFieldCodec(codec);\n\n    if (codec.equals(\"PreFlex\")) {\n      // If we're running w/ PreFlex codec we must swap in the\n      // test-only PreFlexRW codec (since core PreFlex can\n      // only read segments):\n      swapCodec(new PreFlexRWCodec(), cp);\n    }\n\n    swapCodec(new MockSepCodec(), cp);\n    swapCodec(new PulsingCodec(codecHasParam && \"Pulsing\".equals(codec) ? codecParam : _TestUtil.nextInt(random, 1, 20)), cp);\n    swapCodec(new MockFixedIntBlockCodec(codecHasParam && \"MockFixedIntBlock\".equals(codec) ? codecParam : _TestUtil.nextInt(random, 1, 2000)), cp);\n    // baseBlockSize cannot be over 127:\n    swapCodec(new MockVariableIntBlockCodec(codecHasParam && \"MockVariableIntBlock\".equals(codec) ? codecParam : _TestUtil.nextInt(random, 1, 127)), cp);\n    swapCodec(new MockRandomCodec(random), cp);\n\n    return cp.lookup(codec);\n  }\n\n","sourceOld":"  // returns current default codec\n  static Codec installTestCodecs(String codec, CodecProvider cp) {\n    savedDefaultCodec = cp.getDefaultFieldCodec();\n\n    final boolean codecHasParam;\n    int codecParam = 0;\n    if (codec.equals(\"randomPerField\")) {\n      // lie\n      codec = \"Standard\";\n      codecHasParam = false;\n    } else if (codec.equals(\"random\")) {\n      codec = pickRandomCodec(random);\n      codecHasParam = false;\n    } else {\n      Matcher m = codecWithParam.matcher(codec);\n      if (m.matches()) {\n        // codec has a fixed param\n        codecHasParam = true;\n        codec = m.group(1);\n        codecParam = Integer.parseInt(m.group(2));\n      } else {\n        codecHasParam = false;\n      }\n    }\n\n    cp.setDefaultFieldCodec(codec);\n\n    if (codec.equals(\"PreFlex\")) {\n      // If we're running w/ PreFlex codec we must swap in the\n      // test-only PreFlexRW codec (since core PreFlex can\n      // only read segments):\n      swapCodec(new PreFlexRWCodec(), cp);\n    }\n\n    swapCodec(new MockSepCodec(), cp);\n    swapCodec(new PulsingCodec(codecHasParam && \"Pulsing\".equals(codec) ? codecParam : _TestUtil.nextInt(random, 1, 20)), cp);\n    swapCodec(new MockFixedIntBlockCodec(codecHasParam && \"MockFixedIntBlock\".equals(codec) ? codecParam : _TestUtil.nextInt(random, 1, 2000)), cp);\n    // baseBlockSize cannot be over 127:\n    swapCodec(new MockVariableIntBlockCodec(codecHasParam && \"MockVariableIntBlock\".equals(codec) ? codecParam : _TestUtil.nextInt(random, 1, 127)), cp);\n\n    return cp.lookup(codec);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce","date":1297021734,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#installTestCodecs(String,CodecProvider).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#installTestCodecs(String,CodecProvider).mjava","sourceNew":"  // returns current default codec\n  static Codec installTestCodecs(String codec, CodecProvider cp) {\n    savedDefaultCodec = cp.getDefaultFieldCodec();\n\n    final boolean codecHasParam;\n    int codecParam = 0;\n    if (codec.equals(\"randomPerField\")) {\n      // lie\n      codec = \"Standard\";\n      codecHasParam = false;\n    } else if (codec.equals(\"random\")) {\n      codec = pickRandomCodec(random);\n      codecHasParam = false;\n    } else {\n      Matcher m = codecWithParam.matcher(codec);\n      if (m.matches()) {\n        // codec has a fixed param\n        codecHasParam = true;\n        codec = m.group(1);\n        codecParam = Integer.parseInt(m.group(2));\n      } else {\n        codecHasParam = false;\n      }\n    }\n\n    cp.setDefaultFieldCodec(codec);\n\n    if (codec.equals(\"PreFlex\")) {\n      // If we're running w/ PreFlex codec we must swap in the\n      // test-only PreFlexRW codec (since core PreFlex can\n      // only read segments):\n      swapCodec(new PreFlexRWCodec(), cp);\n    }\n\n    swapCodec(new MockSepCodec(), cp);\n    swapCodec(new PulsingCodec(codecHasParam && \"Pulsing\".equals(codec) ? codecParam : _TestUtil.nextInt(random, 1, 20)), cp);\n    swapCodec(new MockFixedIntBlockCodec(codecHasParam && \"MockFixedIntBlock\".equals(codec) ? codecParam : _TestUtil.nextInt(random, 1, 2000)), cp);\n    // baseBlockSize cannot be over 127:\n    swapCodec(new MockVariableIntBlockCodec(codecHasParam && \"MockVariableIntBlock\".equals(codec) ? codecParam : _TestUtil.nextInt(random, 1, 127)), cp);\n    swapCodec(new MockRandomCodec(random), cp);\n\n    return cp.lookup(codec);\n  }\n\n","sourceOld":"  // returns current default codec\n  static Codec installTestCodecs(String codec, CodecProvider cp) {\n    savedDefaultCodec = cp.getDefaultFieldCodec();\n\n    final boolean codecHasParam;\n    int codecParam = 0;\n    if (codec.equals(\"randomPerField\")) {\n      // lie\n      codec = \"Standard\";\n      codecHasParam = false;\n    } else if (codec.equals(\"random\")) {\n      codec = pickRandomCodec(random);\n      codecHasParam = false;\n    } else {\n      Matcher m = codecWithParam.matcher(codec);\n      if (m.matches()) {\n        // codec has a fixed param\n        codecHasParam = true;\n        codec = m.group(1);\n        codecParam = Integer.parseInt(m.group(2));\n      } else {\n        codecHasParam = false;\n      }\n    }\n\n    cp.setDefaultFieldCodec(codec);\n\n    if (codec.equals(\"PreFlex\")) {\n      // If we're running w/ PreFlex codec we must swap in the\n      // test-only PreFlexRW codec (since core PreFlex can\n      // only read segments):\n      swapCodec(new PreFlexRWCodec(), cp);\n    }\n\n    swapCodec(new MockSepCodec(), cp);\n    swapCodec(new PulsingCodec(codecHasParam && \"Pulsing\".equals(codec) ? codecParam : _TestUtil.nextInt(random, 1, 20)), cp);\n    swapCodec(new MockFixedIntBlockCodec(codecHasParam && \"MockFixedIntBlock\".equals(codec) ? codecParam : _TestUtil.nextInt(random, 1, 2000)), cp);\n    // baseBlockSize cannot be over 127:\n    swapCodec(new MockVariableIntBlockCodec(codecHasParam && \"MockVariableIntBlock\".equals(codec) ? codecParam : _TestUtil.nextInt(random, 1, 127)), cp);\n    swapCodec(new MockRandomCodec(random), cp);\n\n    return cp.lookup(codec);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#installTestCodecs(String,CodecProvider).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#installTestCodecs(String,CodecProvider).mjava","sourceNew":"  // returns current default codec\n  static Codec installTestCodecs(String codec, CodecProvider cp) {\n    savedDefaultCodec = cp.getDefaultFieldCodec();\n\n    final boolean codecHasParam;\n    int codecParam = 0;\n    if (codec.equals(\"randomPerField\")) {\n      // lie\n      codec = \"Standard\";\n      codecHasParam = false;\n    } else if (codec.equals(\"random\")) {\n      codec = pickRandomCodec(random);\n      codecHasParam = false;\n    } else {\n      Matcher m = codecWithParam.matcher(codec);\n      if (m.matches()) {\n        // codec has a fixed param\n        codecHasParam = true;\n        codec = m.group(1);\n        codecParam = Integer.parseInt(m.group(2));\n      } else {\n        codecHasParam = false;\n      }\n    }\n\n    cp.setDefaultFieldCodec(codec);\n\n    if (codec.equals(\"PreFlex\")) {\n      // If we're running w/ PreFlex codec we must swap in the\n      // test-only PreFlexRW codec (since core PreFlex can\n      // only read segments):\n      swapCodec(new PreFlexRWCodec(), cp);\n    }\n\n    swapCodec(new MockSepCodec(), cp);\n    swapCodec(new PulsingCodec(codecHasParam && \"Pulsing\".equals(codec) ? codecParam : _TestUtil.nextInt(random, 1, 20)), cp);\n    swapCodec(new MockFixedIntBlockCodec(codecHasParam && \"MockFixedIntBlock\".equals(codec) ? codecParam : _TestUtil.nextInt(random, 1, 2000)), cp);\n    // baseBlockSize cannot be over 127:\n    swapCodec(new MockVariableIntBlockCodec(codecHasParam && \"MockVariableIntBlock\".equals(codec) ? codecParam : _TestUtil.nextInt(random, 1, 127)), cp);\n    swapCodec(new MockRandomCodec(random), cp);\n\n    return cp.lookup(codec);\n  }\n\n","sourceOld":"  // returns current default codec\n  static Codec installTestCodecs(String codec, CodecProvider cp) {\n    savedDefaultCodec = cp.getDefaultFieldCodec();\n\n    final boolean codecHasParam;\n    int codecParam = 0;\n    if (codec.equals(\"randomPerField\")) {\n      // lie\n      codec = \"Standard\";\n      codecHasParam = false;\n    } else if (codec.equals(\"random\")) {\n      codec = pickRandomCodec(random);\n      codecHasParam = false;\n    } else {\n      Matcher m = codecWithParam.matcher(codec);\n      if (m.matches()) {\n        // codec has a fixed param\n        codecHasParam = true;\n        codec = m.group(1);\n        codecParam = Integer.parseInt(m.group(2));\n      } else {\n        codecHasParam = false;\n      }\n    }\n\n    cp.setDefaultFieldCodec(codec);\n\n    if (codec.equals(\"PreFlex\")) {\n      // If we're running w/ PreFlex codec we must swap in the\n      // test-only PreFlexRW codec (since core PreFlex can\n      // only read segments):\n      swapCodec(new PreFlexRWCodec(), cp);\n    }\n\n    swapCodec(new MockSepCodec(), cp);\n    swapCodec(new PulsingCodec(codecHasParam && \"Pulsing\".equals(codec) ? codecParam : _TestUtil.nextInt(random, 1, 20)), cp);\n    swapCodec(new MockFixedIntBlockCodec(codecHasParam && \"MockFixedIntBlock\".equals(codec) ? codecParam : _TestUtil.nextInt(random, 1, 2000)), cp);\n    // baseBlockSize cannot be over 127:\n    swapCodec(new MockVariableIntBlockCodec(codecHasParam && \"MockVariableIntBlock\".equals(codec) ? codecParam : _TestUtil.nextInt(random, 1, 127)), cp);\n    swapCodec(new MockRandomCodec(random), cp);\n\n    return cp.lookup(codec);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":5,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#installTestCodecs(String,CodecProvider).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#installTestCodecs(String,CodecProvider).mjava","sourceNew":"  // returns current default codec\n  static Codec installTestCodecs(String codec, CodecProvider cp) {\n    savedDefaultCodec = cp.getDefaultFieldCodec();\n\n    final boolean codecHasParam;\n    int codecParam = 0;\n    if (codec.equals(\"randomPerField\")) {\n      // lie\n      codec = \"Standard\";\n      codecHasParam = false;\n    } else if (codec.equals(\"random\")) {\n      codec = pickRandomCodec(random);\n      codecHasParam = false;\n    } else {\n      Matcher m = codecWithParam.matcher(codec);\n      if (m.matches()) {\n        // codec has a fixed param\n        codecHasParam = true;\n        codec = m.group(1);\n        codecParam = Integer.parseInt(m.group(2));\n      } else {\n        codecHasParam = false;\n      }\n    }\n\n    cp.setDefaultFieldCodec(codec);\n\n    if (codec.equals(\"PreFlex\")) {\n      // If we're running w/ PreFlex codec we must swap in the\n      // test-only PreFlexRW codec (since core PreFlex can\n      // only read segments):\n      swapCodec(new PreFlexRWCodec(), cp);\n    }\n\n    swapCodec(new MockSepCodec(), cp);\n    swapCodec(new PulsingCodec(codecHasParam && \"Pulsing\".equals(codec) ? codecParam : _TestUtil.nextInt(random, 1, 20)), cp);\n    swapCodec(new MockFixedIntBlockCodec(codecHasParam && \"MockFixedIntBlock\".equals(codec) ? codecParam : _TestUtil.nextInt(random, 1, 2000)), cp);\n    // baseBlockSize cannot be over 127:\n    swapCodec(new MockVariableIntBlockCodec(codecHasParam && \"MockVariableIntBlock\".equals(codec) ? codecParam : _TestUtil.nextInt(random, 1, 127)), cp);\n    swapCodec(new MockRandomCodec(random), cp);\n\n    return cp.lookup(codec);\n  }\n\n","sourceOld":"  // returns current default codec\n  static Codec installTestCodecs(String codec, CodecProvider cp) {\n    savedDefaultCodec = cp.getDefaultFieldCodec();\n\n    final boolean codecHasParam;\n    int codecParam = 0;\n    if (codec.equals(\"randomPerField\")) {\n      // lie\n      codec = \"Standard\";\n      codecHasParam = false;\n    } else if (codec.equals(\"random\")) {\n      codec = pickRandomCodec(random);\n      codecHasParam = false;\n    } else {\n      Matcher m = codecWithParam.matcher(codec);\n      if (m.matches()) {\n        // codec has a fixed param\n        codecHasParam = true;\n        codec = m.group(1);\n        codecParam = Integer.parseInt(m.group(2));\n      } else {\n        codecHasParam = false;\n      }\n    }\n\n    cp.setDefaultFieldCodec(codec);\n\n    if (codec.equals(\"PreFlex\")) {\n      // If we're running w/ PreFlex codec we must swap in the\n      // test-only PreFlexRW codec (since core PreFlex can\n      // only read segments):\n      swapCodec(new PreFlexRWCodec(), cp);\n    }\n\n    swapCodec(new MockSepCodec(), cp);\n    swapCodec(new PulsingCodec(codecHasParam && \"Pulsing\".equals(codec) ? codecParam : _TestUtil.nextInt(random, 1, 20)), cp);\n    swapCodec(new MockFixedIntBlockCodec(codecHasParam && \"MockFixedIntBlock\".equals(codec) ? codecParam : _TestUtil.nextInt(random, 1, 2000)), cp);\n    // baseBlockSize cannot be over 127:\n    swapCodec(new MockVariableIntBlockCodec(codecHasParam && \"MockVariableIntBlock\".equals(codec) ? codecParam : _TestUtil.nextInt(random, 1, 127)), cp);\n    swapCodec(new MockRandomCodec(random), cp);\n\n    return cp.lookup(codec);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["3bb13258feba31ab676502787ab2e1779f129b7a","56da903869515527852ee21ea7ef7bfe414cd40d"],"56da903869515527852ee21ea7ef7bfe414cd40d":["182cfc5b92d5da17fd74fc41c8091ed157d80ff4"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["70ad682703b8585f5d0a637efec044d57ec05efb","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"182cfc5b92d5da17fd74fc41c8091ed157d80ff4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","182cfc5b92d5da17fd74fc41c8091ed157d80ff4"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","56da903869515527852ee21ea7ef7bfe414cd40d"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["868da859b43505d9d2a023bfeae6dd0c795f5295","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"3bb13258feba31ab676502787ab2e1779f129b7a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","182cfc5b92d5da17fd74fc41c8091ed157d80ff4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce":["56da903869515527852ee21ea7ef7bfe414cd40d"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"56da903869515527852ee21ea7ef7bfe414cd40d":["70ad682703b8585f5d0a637efec044d57ec05efb","868da859b43505d9d2a023bfeae6dd0c795f5295","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["182cfc5b92d5da17fd74fc41c8091ed157d80ff4","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a"],"182cfc5b92d5da17fd74fc41c8091ed157d80ff4":["56da903869515527852ee21ea7ef7bfe414cd40d","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["868da859b43505d9d2a023bfeae6dd0c795f5295"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"3bb13258feba31ab676502787ab2e1779f129b7a":["70ad682703b8585f5d0a637efec044d57ec05efb"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce":["29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}