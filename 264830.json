{"path":"lucene/src/java/org/apache/lucene/store/CompoundFileDirectory#CompoundFileDirectory(Directory,String,IOContext).mjava","commits":[{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/store/CompoundFileDirectory#CompoundFileDirectory(Directory,String,IOContext).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Create a new CompoundFileDirectory.\n   * <p>\n   * NOTE: subclasses must call {@link #initForRead(Map)} before the directory can be used.\n   */\n  public CompoundFileDirectory(Directory directory, String fileName, IOContext context) throws IOException {\n    assert !(directory instanceof CompoundFileDirectory) : \"compound file inside of compound file: \" + fileName;\n    this.directory = directory;\n    this.fileName = fileName;\n    this.readBufferSize = BufferedIndexInput.bufferSize(context);\n    this.isOpen = false;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1291e4568eb7d9463d751627596ef14baf4c1603","date":1310112572,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/store/CompoundFileDirectory#CompoundFileDirectory(Directory,String,IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/store/CompoundFileDirectory#CompoundFileDirectory(Directory,String,IOContext).mjava","sourceNew":"  /**\n   * Create a new CompoundFileDirectory.\n   * <p>\n   * NOTE: subclasses must call {@link #initForRead(Map)} before the directory can be used.\n   */\n  public CompoundFileDirectory(Directory directory, String fileName, IOContext context) throws IOException {\n\n    this.directory = directory;\n    this.fileName = fileName;\n    this.readBufferSize = BufferedIndexInput.bufferSize(context);\n    this.isOpen = false;\n  }\n\n","sourceOld":"  /**\n   * Create a new CompoundFileDirectory.\n   * <p>\n   * NOTE: subclasses must call {@link #initForRead(Map)} before the directory can be used.\n   */\n  public CompoundFileDirectory(Directory directory, String fileName, IOContext context) throws IOException {\n    assert !(directory instanceof CompoundFileDirectory) : \"compound file inside of compound file: \" + fileName;\n    this.directory = directory;\n    this.fileName = fileName;\n    this.readBufferSize = BufferedIndexInput.bufferSize(context);\n    this.isOpen = false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ddc4c914be86e34b54f70023f45a60fa7f04e929","date":1310115160,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/store/CompoundFileDirectory#CompoundFileDirectory(Directory,String,IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/store/CompoundFileDirectory#CompoundFileDirectory(Directory,String,int).mjava","sourceNew":"  /**\n   * Create a new CompoundFileDirectory.\n   * <p>\n   * NOTE: subclasses must call {@link #initForRead(Map)} before the directory can be used.\n   */\n  public CompoundFileDirectory(Directory directory, String fileName, IOContext context) throws IOException {\n\n    this.directory = directory;\n    this.fileName = fileName;\n    this.readBufferSize = BufferedIndexInput.bufferSize(context);\n    this.isOpen = false;\n  }\n\n","sourceOld":"  /**\n   * Create a new CompoundFileDirectory.\n   * <p>\n   * NOTE: subclasses must call {@link #initForRead(Map)} before the directory can be used.\n   */\n  public CompoundFileDirectory(Directory directory, String fileName, int readBufferSize) throws IOException {\n\n    this.directory = directory;\n    this.fileName = fileName;\n    this.readBufferSize = readBufferSize;\n    this.isOpen = false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5d004d0e0b3f65bb40da76d476d659d7888270e8","date":1310158940,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/store/CompoundFileDirectory#CompoundFileDirectory(Directory,String,IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/store/CompoundFileDirectory#CompoundFileDirectory(Directory,String,int).mjava","sourceNew":"  /**\n   * Create a new CompoundFileDirectory.\n   * <p>\n   * NOTE: subclasses must call {@link #initForRead(Map)} before the directory can be used.\n   */\n  public CompoundFileDirectory(Directory directory, String fileName, IOContext context) throws IOException {\n\n    this.directory = directory;\n    this.fileName = fileName;\n    this.readBufferSize = BufferedIndexInput.bufferSize(context);\n    this.isOpen = false;\n  }\n\n","sourceOld":"  /**\n   * Create a new CompoundFileDirectory.\n   * <p>\n   * NOTE: subclasses must call {@link #initForRead(Map)} before the directory can be used.\n   */\n  public CompoundFileDirectory(Directory directory, String fileName, int readBufferSize) throws IOException {\n\n    this.directory = directory;\n    this.fileName = fileName;\n    this.readBufferSize = readBufferSize;\n    this.isOpen = false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"67aadace85f701c87a4e0721eedcda25d8415a70","date":1314201925,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/store/CompoundFileDirectory#CompoundFileDirectory(Directory,String,IOContext,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/store/CompoundFileDirectory#CompoundFileDirectory(Directory,String,IOContext).mjava","sourceNew":"  /**\n   * Create a new CompoundFileDirectory.\n   * <p>\n   * NOTE: subclasses must call {@link #initForRead(Map)} before the directory can be used.\n   */\n  public CompoundFileDirectory(Directory directory, String fileName, IOContext context, boolean openForWrite) throws IOException {\n    this.directory = directory;\n    this.fileName = fileName;\n    this.readBufferSize = BufferedIndexInput.bufferSize(context);\n    this.isOpen = false;\n    this.openForWrite = openForWrite;\n    if (!openForWrite) {\n      boolean success = false;\n      handle = directory.createSlicer(fileName, context);\n      try {\n        this.entries = readEntries(handle, directory, fileName);\n        success = true;\n      } finally {\n        if (!success) {\n          IOUtils.closeSafely(true, handle);\n        }\n      }\n      this.isOpen = true;\n      writer = null;\n    } else {\n      assert !(directory instanceof CompoundFileDirectory) : \"compound file inside of compound file: \" + fileName;\n      this.entries = SENTINEL;\n      this.isOpen = true;\n      writer = new CompoundFileWriter(directory, fileName);\n      handle = null;\n    }\n  }\n\n","sourceOld":"  /**\n   * Create a new CompoundFileDirectory.\n   * <p>\n   * NOTE: subclasses must call {@link #initForRead(Map)} before the directory can be used.\n   */\n  public CompoundFileDirectory(Directory directory, String fileName, IOContext context) throws IOException {\n\n    this.directory = directory;\n    this.fileName = fileName;\n    this.readBufferSize = BufferedIndexInput.bufferSize(context);\n    this.isOpen = false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1291e4568eb7d9463d751627596ef14baf4c1603":["d083e83f225b11e5fdd900e83d26ddb385b6955c","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"67aadace85f701c87a4e0721eedcda25d8415a70":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5d004d0e0b3f65bb40da76d476d659d7888270e8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ddc4c914be86e34b54f70023f45a60fa7f04e929"],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1291e4568eb7d9463d751627596ef14baf4c1603"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["67aadace85f701c87a4e0721eedcda25d8415a70"]},"commit2Childs":{"1291e4568eb7d9463d751627596ef14baf4c1603":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"67aadace85f701c87a4e0721eedcda25d8415a70":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1291e4568eb7d9463d751627596ef14baf4c1603","5d004d0e0b3f65bb40da76d476d659d7888270e8","ddc4c914be86e34b54f70023f45a60fa7f04e929","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":[],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["67aadace85f701c87a4e0721eedcda25d8415a70","5d004d0e0b3f65bb40da76d476d659d7888270e8"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["1291e4568eb7d9463d751627596ef14baf4c1603"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5d004d0e0b3f65bb40da76d476d659d7888270e8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}