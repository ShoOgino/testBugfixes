{"path":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImportHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImportHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp)\n          throws Exception {\n    rsp.setHttpCaching(false);\n    SolrParams params = req.getParams();\n    DataImporter.RequestParams requestParams = new DataImporter.RequestParams(getParamsMap(params));\n    String command = requestParams.command;\n    Iterable<ContentStream> streams = req.getContentStreams();\n    if(streams != null){\n      for (ContentStream stream : streams) {\n          requestParams.contentStream = stream;\n          break;\n      }\n    }\n    if (DataImporter.SHOW_CONF_CMD.equals(command)) {\n      // Modify incoming request params to add wt=raw\n      ModifiableSolrParams rawParams = new ModifiableSolrParams(req.getParams());\n      rawParams.set(CommonParams.WT, \"raw\");\n      req.setParams(rawParams);\n      String dataConfigFile = defaults.get(\"config\");\n      ContentStreamBase content = new ContentStreamBase.StringStream(SolrWriter\n              .getResourceAsString(req.getCore().getResourceLoader().openResource(\n              dataConfigFile)));\n      rsp.add(RawResponseWriter.CONTENT, content);\n      return;\n    }\n\n    rsp.add(\"initArgs\", initArgs);\n    String message = \"\";\n\n    if (command != null)\n      rsp.add(\"command\", command);\n\n    if (requestParams.debug && (importer == null || !importer.isBusy())) {\n      // Reload the data-config.xml\n      importer = null;\n      if (requestParams.dataConfig != null) {\n        try {\n          processConfiguration((NamedList) initArgs.get(\"defaults\"));\n          importer = new DataImporter(requestParams.dataConfig, req.getCore()\n                  , dataSources, coreScopeSession);\n        } catch (RuntimeException e) {\n          rsp.add(\"exception\", DebugLogger.getStacktraceString(e));\n          importer = null;\n          return;\n        }\n      } else {\n        inform(req.getCore());\n      }\n      message = DataImporter.MSG.CONFIG_RELOADED;\n    }\n\n    // If importer is still null\n    if (importer == null) {\n      rsp.add(\"status\", DataImporter.MSG.NO_INIT);\n      return;\n    }\n\n    if (command != null && DataImporter.ABORT_CMD.equals(command)) {\n      importer.runCmd(requestParams, null);\n    } else if (importer.isBusy()) {\n      message = DataImporter.MSG.CMD_RUNNING;\n    } else if (command != null) {\n      if (DataImporter.FULL_IMPORT_CMD.equals(command)\n              || DataImporter.DELTA_IMPORT_CMD.equals(command) ||\n              IMPORT_CMD.equals(command)) {\n\n        UpdateRequestProcessorChain processorChain =\n                req.getCore().getUpdateProcessingChain(params.get(UpdateParams.UPDATE_PROCESSOR));\n        UpdateRequestProcessor processor = processorChain.createProcessor(req, rsp);\n        SolrResourceLoader loader = req.getCore().getResourceLoader();\n        SolrWriter sw = getSolrWriter(processor, loader, requestParams);\n\n        if (requestParams.debug) {\n          if (debugEnabled) {\n            // Synchronous request for the debug mode\n            importer.runCmd(requestParams, sw);\n            rsp.add(\"mode\", \"debug\");\n            rsp.add(\"documents\", debugDocuments);\n            if (sw.debugLogger != null)\n              rsp.add(\"verbose-output\", sw.debugLogger.output);\n            debugDocuments = null;\n          } else {\n            message = DataImporter.MSG.DEBUG_NOT_ENABLED;\n          }\n        } else {\n          // Asynchronous request for normal mode\n          if(requestParams.contentStream == null && !requestParams.syncMode){\n            importer.runAsync(requestParams, sw);\n          } else {\n              importer.runCmd(requestParams, sw);\n          }\n        }\n      } else if (DataImporter.RELOAD_CONF_CMD.equals(command)) {\n        importer = null;\n        inform(req.getCore());\n        message = DataImporter.MSG.CONFIG_RELOADED;\n      }\n    }\n    rsp.add(\"status\", importer.isBusy() ? \"busy\" : \"idle\");\n    rsp.add(\"importResponse\", message);\n    rsp.add(\"statusMessages\", importer.getStatusMessages());\n\n    RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImportHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":null,"sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp)\n          throws Exception {\n    rsp.setHttpCaching(false);\n    SolrParams params = req.getParams();\n    DataImporter.RequestParams requestParams = new DataImporter.RequestParams(getParamsMap(params));\n    String command = requestParams.command;\n    Iterable<ContentStream> streams = req.getContentStreams();\n    if(streams != null){\n      for (ContentStream stream : streams) {\n          requestParams.contentStream = stream;\n          break;\n      }\n    }\n    if (DataImporter.SHOW_CONF_CMD.equals(command)) {\n      // Modify incoming request params to add wt=raw\n      ModifiableSolrParams rawParams = new ModifiableSolrParams(req.getParams());\n      rawParams.set(CommonParams.WT, \"raw\");\n      req.setParams(rawParams);\n      String dataConfigFile = defaults.get(\"config\");\n      ContentStreamBase content = new ContentStreamBase.StringStream(SolrWriter\n              .getResourceAsString(req.getCore().getResourceLoader().openResource(\n              dataConfigFile)));\n      rsp.add(RawResponseWriter.CONTENT, content);\n      return;\n    }\n\n    rsp.add(\"initArgs\", initArgs);\n    String message = \"\";\n\n    if (command != null)\n      rsp.add(\"command\", command);\n\n    if (requestParams.debug && (importer == null || !importer.isBusy())) {\n      // Reload the data-config.xml\n      importer = null;\n      if (requestParams.dataConfig != null) {\n        try {\n          processConfiguration((NamedList) initArgs.get(\"defaults\"));\n          importer = new DataImporter(requestParams.dataConfig, req.getCore()\n                  , dataSources, coreScopeSession);\n        } catch (RuntimeException e) {\n          rsp.add(\"exception\", DebugLogger.getStacktraceString(e));\n          importer = null;\n          return;\n        }\n      } else {\n        inform(req.getCore());\n      }\n      message = DataImporter.MSG.CONFIG_RELOADED;\n    }\n\n    // If importer is still null\n    if (importer == null) {\n      rsp.add(\"status\", DataImporter.MSG.NO_INIT);\n      return;\n    }\n\n    if (command != null && DataImporter.ABORT_CMD.equals(command)) {\n      importer.runCmd(requestParams, null);\n    } else if (importer.isBusy()) {\n      message = DataImporter.MSG.CMD_RUNNING;\n    } else if (command != null) {\n      if (DataImporter.FULL_IMPORT_CMD.equals(command)\n              || DataImporter.DELTA_IMPORT_CMD.equals(command) ||\n              IMPORT_CMD.equals(command)) {\n\n        UpdateRequestProcessorChain processorChain =\n                req.getCore().getUpdateProcessingChain(params.get(UpdateParams.UPDATE_PROCESSOR));\n        UpdateRequestProcessor processor = processorChain.createProcessor(req, rsp);\n        SolrResourceLoader loader = req.getCore().getResourceLoader();\n        SolrWriter sw = getSolrWriter(processor, loader, requestParams);\n\n        if (requestParams.debug) {\n          if (debugEnabled) {\n            // Synchronous request for the debug mode\n            importer.runCmd(requestParams, sw);\n            rsp.add(\"mode\", \"debug\");\n            rsp.add(\"documents\", debugDocuments);\n            if (sw.debugLogger != null)\n              rsp.add(\"verbose-output\", sw.debugLogger.output);\n            debugDocuments = null;\n          } else {\n            message = DataImporter.MSG.DEBUG_NOT_ENABLED;\n          }\n        } else {\n          // Asynchronous request for normal mode\n          if(requestParams.contentStream == null && !requestParams.syncMode){\n            importer.runAsync(requestParams, sw);\n          } else {\n              importer.runCmd(requestParams, sw);\n          }\n        }\n      } else if (DataImporter.RELOAD_CONF_CMD.equals(command)) {\n        importer = null;\n        inform(req.getCore());\n        message = DataImporter.MSG.CONFIG_RELOADED;\n      }\n    }\n    rsp.add(\"status\", importer.isBusy() ? \"busy\" : \"idle\");\n    rsp.add(\"importResponse\", message);\n    rsp.add(\"statusMessages\", importer.getStatusMessages());\n\n    RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImportHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImportHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp)\n          throws Exception {\n    rsp.setHttpCaching(false);\n    SolrParams params = req.getParams();\n    DataImporter.RequestParams requestParams = new DataImporter.RequestParams(getParamsMap(params));\n    String command = requestParams.command;\n    Iterable<ContentStream> streams = req.getContentStreams();\n    if(streams != null){\n      for (ContentStream stream : streams) {\n          requestParams.contentStream = stream;\n          break;\n      }\n    }\n    if (DataImporter.SHOW_CONF_CMD.equals(command)) {\n      // Modify incoming request params to add wt=raw\n      ModifiableSolrParams rawParams = new ModifiableSolrParams(req.getParams());\n      rawParams.set(CommonParams.WT, \"raw\");\n      req.setParams(rawParams);\n      String dataConfigFile = defaults.get(\"config\");\n      ContentStreamBase content = new ContentStreamBase.StringStream(SolrWriter\n              .getResourceAsString(req.getCore().getResourceLoader().openResource(\n              dataConfigFile)));\n      rsp.add(RawResponseWriter.CONTENT, content);\n      return;\n    }\n\n    rsp.add(\"initArgs\", initArgs);\n    String message = \"\";\n\n    if (command != null)\n      rsp.add(\"command\", command);\n\n    if (requestParams.debug && (importer == null || !importer.isBusy())) {\n      // Reload the data-config.xml\n      importer = null;\n      if (requestParams.dataConfig != null) {\n        try {\n          processConfiguration((NamedList) initArgs.get(\"defaults\"));\n          importer = new DataImporter(requestParams.dataConfig, req.getCore()\n                  , dataSources, coreScopeSession);\n        } catch (RuntimeException e) {\n          rsp.add(\"exception\", DebugLogger.getStacktraceString(e));\n          importer = null;\n          return;\n        }\n      } else {\n        inform(req.getCore());\n      }\n      message = DataImporter.MSG.CONFIG_RELOADED;\n    }\n\n    // If importer is still null\n    if (importer == null) {\n      rsp.add(\"status\", DataImporter.MSG.NO_INIT);\n      return;\n    }\n\n    if (command != null && DataImporter.ABORT_CMD.equals(command)) {\n      importer.runCmd(requestParams, null);\n    } else if (importer.isBusy()) {\n      message = DataImporter.MSG.CMD_RUNNING;\n    } else if (command != null) {\n      if (DataImporter.FULL_IMPORT_CMD.equals(command)\n              || DataImporter.DELTA_IMPORT_CMD.equals(command) ||\n              IMPORT_CMD.equals(command)) {\n\n        UpdateRequestProcessorChain processorChain =\n                req.getCore().getUpdateProcessingChain(params.get(UpdateParams.UPDATE_PROCESSOR));\n        UpdateRequestProcessor processor = processorChain.createProcessor(req, rsp);\n        SolrResourceLoader loader = req.getCore().getResourceLoader();\n        SolrWriter sw = getSolrWriter(processor, loader, requestParams);\n\n        if (requestParams.debug) {\n          if (debugEnabled) {\n            // Synchronous request for the debug mode\n            importer.runCmd(requestParams, sw);\n            rsp.add(\"mode\", \"debug\");\n            rsp.add(\"documents\", debugDocuments);\n            if (sw.debugLogger != null)\n              rsp.add(\"verbose-output\", sw.debugLogger.output);\n            debugDocuments = null;\n          } else {\n            message = DataImporter.MSG.DEBUG_NOT_ENABLED;\n          }\n        } else {\n          // Asynchronous request for normal mode\n          if(requestParams.contentStream == null && !requestParams.syncMode){\n            importer.runAsync(requestParams, sw);\n          } else {\n              importer.runCmd(requestParams, sw);\n          }\n        }\n      } else if (DataImporter.RELOAD_CONF_CMD.equals(command)) {\n        importer = null;\n        inform(req.getCore());\n        message = DataImporter.MSG.CONFIG_RELOADED;\n      }\n    }\n    rsp.add(\"status\", importer.isBusy() ? \"busy\" : \"idle\");\n    rsp.add(\"importResponse\", message);\n    rsp.add(\"statusMessages\", importer.getStatusMessages());\n\n    RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp)\n          throws Exception {\n    rsp.setHttpCaching(false);\n    SolrParams params = req.getParams();\n    DataImporter.RequestParams requestParams = new DataImporter.RequestParams(getParamsMap(params));\n    String command = requestParams.command;\n    Iterable<ContentStream> streams = req.getContentStreams();\n    if(streams != null){\n      for (ContentStream stream : streams) {\n          requestParams.contentStream = stream;\n          break;\n      }\n    }\n    if (DataImporter.SHOW_CONF_CMD.equals(command)) {\n      // Modify incoming request params to add wt=raw\n      ModifiableSolrParams rawParams = new ModifiableSolrParams(req.getParams());\n      rawParams.set(CommonParams.WT, \"raw\");\n      req.setParams(rawParams);\n      String dataConfigFile = defaults.get(\"config\");\n      ContentStreamBase content = new ContentStreamBase.StringStream(SolrWriter\n              .getResourceAsString(req.getCore().getResourceLoader().openResource(\n              dataConfigFile)));\n      rsp.add(RawResponseWriter.CONTENT, content);\n      return;\n    }\n\n    rsp.add(\"initArgs\", initArgs);\n    String message = \"\";\n\n    if (command != null)\n      rsp.add(\"command\", command);\n\n    if (requestParams.debug && (importer == null || !importer.isBusy())) {\n      // Reload the data-config.xml\n      importer = null;\n      if (requestParams.dataConfig != null) {\n        try {\n          processConfiguration((NamedList) initArgs.get(\"defaults\"));\n          importer = new DataImporter(requestParams.dataConfig, req.getCore()\n                  , dataSources, coreScopeSession);\n        } catch (RuntimeException e) {\n          rsp.add(\"exception\", DebugLogger.getStacktraceString(e));\n          importer = null;\n          return;\n        }\n      } else {\n        inform(req.getCore());\n      }\n      message = DataImporter.MSG.CONFIG_RELOADED;\n    }\n\n    // If importer is still null\n    if (importer == null) {\n      rsp.add(\"status\", DataImporter.MSG.NO_INIT);\n      return;\n    }\n\n    if (command != null && DataImporter.ABORT_CMD.equals(command)) {\n      importer.runCmd(requestParams, null);\n    } else if (importer.isBusy()) {\n      message = DataImporter.MSG.CMD_RUNNING;\n    } else if (command != null) {\n      if (DataImporter.FULL_IMPORT_CMD.equals(command)\n              || DataImporter.DELTA_IMPORT_CMD.equals(command) ||\n              IMPORT_CMD.equals(command)) {\n\n        UpdateRequestProcessorChain processorChain =\n                req.getCore().getUpdateProcessingChain(params.get(UpdateParams.UPDATE_PROCESSOR));\n        UpdateRequestProcessor processor = processorChain.createProcessor(req, rsp);\n        SolrResourceLoader loader = req.getCore().getResourceLoader();\n        SolrWriter sw = getSolrWriter(processor, loader, requestParams);\n\n        if (requestParams.debug) {\n          if (debugEnabled) {\n            // Synchronous request for the debug mode\n            importer.runCmd(requestParams, sw);\n            rsp.add(\"mode\", \"debug\");\n            rsp.add(\"documents\", debugDocuments);\n            if (sw.debugLogger != null)\n              rsp.add(\"verbose-output\", sw.debugLogger.output);\n            debugDocuments = null;\n          } else {\n            message = DataImporter.MSG.DEBUG_NOT_ENABLED;\n          }\n        } else {\n          // Asynchronous request for normal mode\n          if(requestParams.contentStream == null && !requestParams.syncMode){\n            importer.runAsync(requestParams, sw);\n          } else {\n              importer.runCmd(requestParams, sw);\n          }\n        }\n      } else if (DataImporter.RELOAD_CONF_CMD.equals(command)) {\n        importer = null;\n        inform(req.getCore());\n        message = DataImporter.MSG.CONFIG_RELOADED;\n      }\n    }\n    rsp.add(\"status\", importer.isBusy() ? \"busy\" : \"idle\");\n    rsp.add(\"importResponse\", message);\n    rsp.add(\"statusMessages\", importer.getStatusMessages());\n\n    RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImportHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp)\n          throws Exception {\n    rsp.setHttpCaching(false);\n    SolrParams params = req.getParams();\n    DataImporter.RequestParams requestParams = new DataImporter.RequestParams(getParamsMap(params));\n    String command = requestParams.command;\n    Iterable<ContentStream> streams = req.getContentStreams();\n    if(streams != null){\n      for (ContentStream stream : streams) {\n          requestParams.contentStream = stream;\n          break;\n      }\n    }\n    if (DataImporter.SHOW_CONF_CMD.equals(command)) {\n      // Modify incoming request params to add wt=raw\n      ModifiableSolrParams rawParams = new ModifiableSolrParams(req.getParams());\n      rawParams.set(CommonParams.WT, \"raw\");\n      req.setParams(rawParams);\n      String dataConfigFile = defaults.get(\"config\");\n      ContentStreamBase content = new ContentStreamBase.StringStream(SolrWriter\n              .getResourceAsString(req.getCore().getResourceLoader().openResource(\n              dataConfigFile)));\n      rsp.add(RawResponseWriter.CONTENT, content);\n      return;\n    }\n\n    rsp.add(\"initArgs\", initArgs);\n    String message = \"\";\n\n    if (command != null)\n      rsp.add(\"command\", command);\n\n    if (requestParams.debug && (importer == null || !importer.isBusy())) {\n      // Reload the data-config.xml\n      importer = null;\n      if (requestParams.dataConfig != null) {\n        try {\n          processConfiguration((NamedList) initArgs.get(\"defaults\"));\n          importer = new DataImporter(requestParams.dataConfig, req.getCore()\n                  , dataSources, coreScopeSession);\n        } catch (RuntimeException e) {\n          rsp.add(\"exception\", DebugLogger.getStacktraceString(e));\n          importer = null;\n          return;\n        }\n      } else {\n        inform(req.getCore());\n      }\n      message = DataImporter.MSG.CONFIG_RELOADED;\n    }\n\n    // If importer is still null\n    if (importer == null) {\n      rsp.add(\"status\", DataImporter.MSG.NO_INIT);\n      return;\n    }\n\n    if (command != null && DataImporter.ABORT_CMD.equals(command)) {\n      importer.runCmd(requestParams, null);\n    } else if (importer.isBusy()) {\n      message = DataImporter.MSG.CMD_RUNNING;\n    } else if (command != null) {\n      if (DataImporter.FULL_IMPORT_CMD.equals(command)\n              || DataImporter.DELTA_IMPORT_CMD.equals(command) ||\n              IMPORT_CMD.equals(command)) {\n\n        UpdateRequestProcessorChain processorChain =\n                req.getCore().getUpdateProcessingChain(params.get(UpdateParams.UPDATE_PROCESSOR));\n        UpdateRequestProcessor processor = processorChain.createProcessor(req, rsp);\n        SolrResourceLoader loader = req.getCore().getResourceLoader();\n        SolrWriter sw = getSolrWriter(processor, loader, requestParams);\n\n        if (requestParams.debug) {\n          if (debugEnabled) {\n            // Synchronous request for the debug mode\n            importer.runCmd(requestParams, sw);\n            rsp.add(\"mode\", \"debug\");\n            rsp.add(\"documents\", debugDocuments);\n            if (sw.debugLogger != null)\n              rsp.add(\"verbose-output\", sw.debugLogger.output);\n            debugDocuments = null;\n          } else {\n            message = DataImporter.MSG.DEBUG_NOT_ENABLED;\n          }\n        } else {\n          // Asynchronous request for normal mode\n          if(requestParams.contentStream == null && !requestParams.syncMode){\n            importer.runAsync(requestParams, sw);\n          } else {\n              importer.runCmd(requestParams, sw);\n          }\n        }\n      } else if (DataImporter.RELOAD_CONF_CMD.equals(command)) {\n        importer = null;\n        inform(req.getCore());\n        message = DataImporter.MSG.CONFIG_RELOADED;\n      }\n    }\n    rsp.add(\"status\", importer.isBusy() ? \"busy\" : \"idle\");\n    rsp.add(\"importResponse\", message);\n    rsp.add(\"statusMessages\", importer.getStatusMessages());\n\n    RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5ae62bcdfd4a0689a745ab1d38c6bd1c7c390cfa","date":1293733647,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImportHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImportHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp)\n          throws Exception {\n    rsp.setHttpCaching(false);\n    SolrParams params = req.getParams();\n    DataImporter.RequestParams requestParams = new DataImporter.RequestParams(getParamsMap(params));\n    String command = requestParams.command;\n    Iterable<ContentStream> streams = req.getContentStreams();\n    if(streams != null){\n      for (ContentStream stream : streams) {\n          requestParams.contentStream = stream;\n          break;\n      }\n    }\n    if (DataImporter.SHOW_CONF_CMD.equals(command)) {\n      // Modify incoming request params to add wt=raw\n      ModifiableSolrParams rawParams = new ModifiableSolrParams(req.getParams());\n      rawParams.set(CommonParams.WT, \"raw\");\n      req.setParams(rawParams);\n      String dataConfigFile = defaults.get(\"config\");\n      ContentStreamBase content = new ContentStreamBase.StringStream(SolrWriter\n              .getResourceAsString(req.getCore().getResourceLoader().openResource(\n              dataConfigFile)));\n      rsp.add(RawResponseWriter.CONTENT, content);\n      return;\n    }\n\n    rsp.add(\"initArgs\", initArgs);\n    String message = \"\";\n\n    if (command != null)\n      rsp.add(\"command\", command);\n\n    if (requestParams.debug && (importer == null || !importer.isBusy())) {\n      // Reload the data-config.xml\n      importer = null;\n      if (requestParams.dataConfig != null) {\n        try {\n          processConfiguration((NamedList) initArgs.get(\"defaults\"));\n          importer = new DataImporter(requestParams.dataConfig, req.getCore()\n                  , dataSources, coreScopeSession);\n        } catch (RuntimeException e) {\n          rsp.add(\"exception\", DebugLogger.getStacktraceString(e));\n          importer = null;\n          return;\n        }\n      } else {\n        inform(req.getCore());\n      }\n      message = DataImporter.MSG.CONFIG_RELOADED;\n    }\n\n    // If importer is still null\n    if (importer == null) {\n      rsp.add(\"status\", DataImporter.MSG.NO_INIT);\n      return;\n    }\n\n    if (command != null && DataImporter.ABORT_CMD.equals(command)) {\n      importer.runCmd(requestParams, null);\n    } else if (importer.isBusy()) {\n      message = DataImporter.MSG.CMD_RUNNING;\n    } else if (command != null) {\n      if (DataImporter.FULL_IMPORT_CMD.equals(command)\n              || DataImporter.DELTA_IMPORT_CMD.equals(command) ||\n              IMPORT_CMD.equals(command)) {\n\n        UpdateRequestProcessorChain processorChain =\n                req.getCore().getUpdateProcessingChain(params.get(UpdateParams.UPDATE_PROCESSOR));\n        UpdateRequestProcessor processor = processorChain.createProcessor(req, rsp);\n        SolrResourceLoader loader = req.getCore().getResourceLoader();\n        SolrWriter sw = getSolrWriter(processor, loader, requestParams, req);\n\n        if (requestParams.debug) {\n          if (debugEnabled) {\n            // Synchronous request for the debug mode\n            importer.runCmd(requestParams, sw);\n            rsp.add(\"mode\", \"debug\");\n            rsp.add(\"documents\", debugDocuments);\n            if (sw.debugLogger != null)\n              rsp.add(\"verbose-output\", sw.debugLogger.output);\n            debugDocuments = null;\n          } else {\n            message = DataImporter.MSG.DEBUG_NOT_ENABLED;\n          }\n        } else {\n          // Asynchronous request for normal mode\n          if(requestParams.contentStream == null && !requestParams.syncMode){\n            importer.runAsync(requestParams, sw);\n          } else {\n              importer.runCmd(requestParams, sw);\n          }\n        }\n      } else if (DataImporter.RELOAD_CONF_CMD.equals(command)) {\n        importer = null;\n        inform(req.getCore());\n        message = DataImporter.MSG.CONFIG_RELOADED;\n      }\n    }\n    rsp.add(\"status\", importer.isBusy() ? \"busy\" : \"idle\");\n    rsp.add(\"importResponse\", message);\n    rsp.add(\"statusMessages\", importer.getStatusMessages());\n\n    RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp)\n          throws Exception {\n    rsp.setHttpCaching(false);\n    SolrParams params = req.getParams();\n    DataImporter.RequestParams requestParams = new DataImporter.RequestParams(getParamsMap(params));\n    String command = requestParams.command;\n    Iterable<ContentStream> streams = req.getContentStreams();\n    if(streams != null){\n      for (ContentStream stream : streams) {\n          requestParams.contentStream = stream;\n          break;\n      }\n    }\n    if (DataImporter.SHOW_CONF_CMD.equals(command)) {\n      // Modify incoming request params to add wt=raw\n      ModifiableSolrParams rawParams = new ModifiableSolrParams(req.getParams());\n      rawParams.set(CommonParams.WT, \"raw\");\n      req.setParams(rawParams);\n      String dataConfigFile = defaults.get(\"config\");\n      ContentStreamBase content = new ContentStreamBase.StringStream(SolrWriter\n              .getResourceAsString(req.getCore().getResourceLoader().openResource(\n              dataConfigFile)));\n      rsp.add(RawResponseWriter.CONTENT, content);\n      return;\n    }\n\n    rsp.add(\"initArgs\", initArgs);\n    String message = \"\";\n\n    if (command != null)\n      rsp.add(\"command\", command);\n\n    if (requestParams.debug && (importer == null || !importer.isBusy())) {\n      // Reload the data-config.xml\n      importer = null;\n      if (requestParams.dataConfig != null) {\n        try {\n          processConfiguration((NamedList) initArgs.get(\"defaults\"));\n          importer = new DataImporter(requestParams.dataConfig, req.getCore()\n                  , dataSources, coreScopeSession);\n        } catch (RuntimeException e) {\n          rsp.add(\"exception\", DebugLogger.getStacktraceString(e));\n          importer = null;\n          return;\n        }\n      } else {\n        inform(req.getCore());\n      }\n      message = DataImporter.MSG.CONFIG_RELOADED;\n    }\n\n    // If importer is still null\n    if (importer == null) {\n      rsp.add(\"status\", DataImporter.MSG.NO_INIT);\n      return;\n    }\n\n    if (command != null && DataImporter.ABORT_CMD.equals(command)) {\n      importer.runCmd(requestParams, null);\n    } else if (importer.isBusy()) {\n      message = DataImporter.MSG.CMD_RUNNING;\n    } else if (command != null) {\n      if (DataImporter.FULL_IMPORT_CMD.equals(command)\n              || DataImporter.DELTA_IMPORT_CMD.equals(command) ||\n              IMPORT_CMD.equals(command)) {\n\n        UpdateRequestProcessorChain processorChain =\n                req.getCore().getUpdateProcessingChain(params.get(UpdateParams.UPDATE_PROCESSOR));\n        UpdateRequestProcessor processor = processorChain.createProcessor(req, rsp);\n        SolrResourceLoader loader = req.getCore().getResourceLoader();\n        SolrWriter sw = getSolrWriter(processor, loader, requestParams);\n\n        if (requestParams.debug) {\n          if (debugEnabled) {\n            // Synchronous request for the debug mode\n            importer.runCmd(requestParams, sw);\n            rsp.add(\"mode\", \"debug\");\n            rsp.add(\"documents\", debugDocuments);\n            if (sw.debugLogger != null)\n              rsp.add(\"verbose-output\", sw.debugLogger.output);\n            debugDocuments = null;\n          } else {\n            message = DataImporter.MSG.DEBUG_NOT_ENABLED;\n          }\n        } else {\n          // Asynchronous request for normal mode\n          if(requestParams.contentStream == null && !requestParams.syncMode){\n            importer.runAsync(requestParams, sw);\n          } else {\n              importer.runCmd(requestParams, sw);\n          }\n        }\n      } else if (DataImporter.RELOAD_CONF_CMD.equals(command)) {\n        importer = null;\n        inform(req.getCore());\n        message = DataImporter.MSG.CONFIG_RELOADED;\n      }\n    }\n    rsp.add(\"status\", importer.isBusy() ? \"busy\" : \"idle\");\n    rsp.add(\"importResponse\", message);\n    rsp.add(\"statusMessages\", importer.getStatusMessages());\n\n    RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c","date":1294014627,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImportHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImportHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp)\n          throws Exception {\n    rsp.setHttpCaching(false);\n    SolrParams params = req.getParams();\n    DataImporter.RequestParams requestParams = new DataImporter.RequestParams(getParamsMap(params));\n    String command = requestParams.command;\n    Iterable<ContentStream> streams = req.getContentStreams();\n    if(streams != null){\n      for (ContentStream stream : streams) {\n          requestParams.contentStream = stream;\n          break;\n      }\n    }\n    if (DataImporter.SHOW_CONF_CMD.equals(command)) {\n      // Modify incoming request params to add wt=raw\n      ModifiableSolrParams rawParams = new ModifiableSolrParams(req.getParams());\n      rawParams.set(CommonParams.WT, \"raw\");\n      req.setParams(rawParams);\n      String dataConfigFile = defaults.get(\"config\");\n      ContentStreamBase content = new ContentStreamBase.StringStream(SolrWriter\n              .getResourceAsString(req.getCore().getResourceLoader().openResource(\n              dataConfigFile)));\n      rsp.add(RawResponseWriter.CONTENT, content);\n      return;\n    }\n\n    rsp.add(\"initArgs\", initArgs);\n    String message = \"\";\n\n    if (command != null)\n      rsp.add(\"command\", command);\n\n    if (requestParams.debug && (importer == null || !importer.isBusy())) {\n      // Reload the data-config.xml\n      importer = null;\n      if (requestParams.dataConfig != null) {\n        try {\n          processConfiguration((NamedList) initArgs.get(\"defaults\"));\n          importer = new DataImporter(requestParams.dataConfig, req.getCore()\n                  , dataSources, coreScopeSession);\n        } catch (RuntimeException e) {\n          rsp.add(\"exception\", DebugLogger.getStacktraceString(e));\n          importer = null;\n          return;\n        }\n      } else {\n        inform(req.getCore());\n      }\n      message = DataImporter.MSG.CONFIG_RELOADED;\n    }\n\n    // If importer is still null\n    if (importer == null) {\n      rsp.add(\"status\", DataImporter.MSG.NO_INIT);\n      return;\n    }\n\n    if (command != null && DataImporter.ABORT_CMD.equals(command)) {\n      importer.runCmd(requestParams, null);\n    } else if (importer.isBusy()) {\n      message = DataImporter.MSG.CMD_RUNNING;\n    } else if (command != null) {\n      if (DataImporter.FULL_IMPORT_CMD.equals(command)\n              || DataImporter.DELTA_IMPORT_CMD.equals(command) ||\n              IMPORT_CMD.equals(command)) {\n\n        UpdateRequestProcessorChain processorChain =\n                req.getCore().getUpdateProcessingChain(params.get(UpdateParams.UPDATE_PROCESSOR));\n        UpdateRequestProcessor processor = processorChain.createProcessor(req, rsp);\n        SolrResourceLoader loader = req.getCore().getResourceLoader();\n        SolrWriter sw = getSolrWriter(processor, loader, requestParams, req);\n\n        if (requestParams.debug) {\n          if (debugEnabled) {\n            // Synchronous request for the debug mode\n            importer.runCmd(requestParams, sw);\n            rsp.add(\"mode\", \"debug\");\n            rsp.add(\"documents\", debugDocuments);\n            if (sw.debugLogger != null)\n              rsp.add(\"verbose-output\", sw.debugLogger.output);\n            debugDocuments = null;\n          } else {\n            message = DataImporter.MSG.DEBUG_NOT_ENABLED;\n          }\n        } else {\n          // Asynchronous request for normal mode\n          if(requestParams.contentStream == null && !requestParams.syncMode){\n            importer.runAsync(requestParams, sw);\n          } else {\n              importer.runCmd(requestParams, sw);\n          }\n        }\n      } else if (DataImporter.RELOAD_CONF_CMD.equals(command)) {\n        importer = null;\n        inform(req.getCore());\n        message = DataImporter.MSG.CONFIG_RELOADED;\n      }\n    }\n    rsp.add(\"status\", importer.isBusy() ? \"busy\" : \"idle\");\n    rsp.add(\"importResponse\", message);\n    rsp.add(\"statusMessages\", importer.getStatusMessages());\n\n    RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp)\n          throws Exception {\n    rsp.setHttpCaching(false);\n    SolrParams params = req.getParams();\n    DataImporter.RequestParams requestParams = new DataImporter.RequestParams(getParamsMap(params));\n    String command = requestParams.command;\n    Iterable<ContentStream> streams = req.getContentStreams();\n    if(streams != null){\n      for (ContentStream stream : streams) {\n          requestParams.contentStream = stream;\n          break;\n      }\n    }\n    if (DataImporter.SHOW_CONF_CMD.equals(command)) {\n      // Modify incoming request params to add wt=raw\n      ModifiableSolrParams rawParams = new ModifiableSolrParams(req.getParams());\n      rawParams.set(CommonParams.WT, \"raw\");\n      req.setParams(rawParams);\n      String dataConfigFile = defaults.get(\"config\");\n      ContentStreamBase content = new ContentStreamBase.StringStream(SolrWriter\n              .getResourceAsString(req.getCore().getResourceLoader().openResource(\n              dataConfigFile)));\n      rsp.add(RawResponseWriter.CONTENT, content);\n      return;\n    }\n\n    rsp.add(\"initArgs\", initArgs);\n    String message = \"\";\n\n    if (command != null)\n      rsp.add(\"command\", command);\n\n    if (requestParams.debug && (importer == null || !importer.isBusy())) {\n      // Reload the data-config.xml\n      importer = null;\n      if (requestParams.dataConfig != null) {\n        try {\n          processConfiguration((NamedList) initArgs.get(\"defaults\"));\n          importer = new DataImporter(requestParams.dataConfig, req.getCore()\n                  , dataSources, coreScopeSession);\n        } catch (RuntimeException e) {\n          rsp.add(\"exception\", DebugLogger.getStacktraceString(e));\n          importer = null;\n          return;\n        }\n      } else {\n        inform(req.getCore());\n      }\n      message = DataImporter.MSG.CONFIG_RELOADED;\n    }\n\n    // If importer is still null\n    if (importer == null) {\n      rsp.add(\"status\", DataImporter.MSG.NO_INIT);\n      return;\n    }\n\n    if (command != null && DataImporter.ABORT_CMD.equals(command)) {\n      importer.runCmd(requestParams, null);\n    } else if (importer.isBusy()) {\n      message = DataImporter.MSG.CMD_RUNNING;\n    } else if (command != null) {\n      if (DataImporter.FULL_IMPORT_CMD.equals(command)\n              || DataImporter.DELTA_IMPORT_CMD.equals(command) ||\n              IMPORT_CMD.equals(command)) {\n\n        UpdateRequestProcessorChain processorChain =\n                req.getCore().getUpdateProcessingChain(params.get(UpdateParams.UPDATE_PROCESSOR));\n        UpdateRequestProcessor processor = processorChain.createProcessor(req, rsp);\n        SolrResourceLoader loader = req.getCore().getResourceLoader();\n        SolrWriter sw = getSolrWriter(processor, loader, requestParams);\n\n        if (requestParams.debug) {\n          if (debugEnabled) {\n            // Synchronous request for the debug mode\n            importer.runCmd(requestParams, sw);\n            rsp.add(\"mode\", \"debug\");\n            rsp.add(\"documents\", debugDocuments);\n            if (sw.debugLogger != null)\n              rsp.add(\"verbose-output\", sw.debugLogger.output);\n            debugDocuments = null;\n          } else {\n            message = DataImporter.MSG.DEBUG_NOT_ENABLED;\n          }\n        } else {\n          // Asynchronous request for normal mode\n          if(requestParams.contentStream == null && !requestParams.syncMode){\n            importer.runAsync(requestParams, sw);\n          } else {\n              importer.runCmd(requestParams, sw);\n          }\n        }\n      } else if (DataImporter.RELOAD_CONF_CMD.equals(command)) {\n        importer = null;\n        inform(req.getCore());\n        message = DataImporter.MSG.CONFIG_RELOADED;\n      }\n    }\n    rsp.add(\"status\", importer.isBusy() ? \"busy\" : \"idle\");\n    rsp.add(\"importResponse\", message);\n    rsp.add(\"statusMessages\", importer.getStatusMessages());\n\n    RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImportHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImportHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp)\n          throws Exception {\n    rsp.setHttpCaching(false);\n    SolrParams params = req.getParams();\n    DataImporter.RequestParams requestParams = new DataImporter.RequestParams(getParamsMap(params));\n    String command = requestParams.command;\n    Iterable<ContentStream> streams = req.getContentStreams();\n    if(streams != null){\n      for (ContentStream stream : streams) {\n          requestParams.contentStream = stream;\n          break;\n      }\n    }\n    if (DataImporter.SHOW_CONF_CMD.equals(command)) {\n      // Modify incoming request params to add wt=raw\n      ModifiableSolrParams rawParams = new ModifiableSolrParams(req.getParams());\n      rawParams.set(CommonParams.WT, \"raw\");\n      req.setParams(rawParams);\n      String dataConfigFile = defaults.get(\"config\");\n      ContentStreamBase content = new ContentStreamBase.StringStream(SolrWriter\n              .getResourceAsString(req.getCore().getResourceLoader().openResource(\n              dataConfigFile)));\n      rsp.add(RawResponseWriter.CONTENT, content);\n      return;\n    }\n\n    rsp.add(\"initArgs\", initArgs);\n    String message = \"\";\n\n    if (command != null)\n      rsp.add(\"command\", command);\n\n    if (requestParams.debug && (importer == null || !importer.isBusy())) {\n      // Reload the data-config.xml\n      importer = null;\n      if (requestParams.dataConfig != null) {\n        try {\n          processConfiguration((NamedList) initArgs.get(\"defaults\"));\n          importer = new DataImporter(requestParams.dataConfig, req.getCore()\n                  , dataSources, coreScopeSession);\n        } catch (RuntimeException e) {\n          rsp.add(\"exception\", DebugLogger.getStacktraceString(e));\n          importer = null;\n          return;\n        }\n      } else {\n        inform(req.getCore());\n      }\n      message = DataImporter.MSG.CONFIG_RELOADED;\n    }\n\n    // If importer is still null\n    if (importer == null) {\n      rsp.add(\"status\", DataImporter.MSG.NO_INIT);\n      return;\n    }\n\n    if (command != null && DataImporter.ABORT_CMD.equals(command)) {\n      importer.runCmd(requestParams, null);\n    } else if (importer.isBusy()) {\n      message = DataImporter.MSG.CMD_RUNNING;\n    } else if (command != null) {\n      if (DataImporter.FULL_IMPORT_CMD.equals(command)\n              || DataImporter.DELTA_IMPORT_CMD.equals(command) ||\n              IMPORT_CMD.equals(command)) {\n\n        UpdateRequestProcessorChain processorChain =\n                req.getCore().getUpdateProcessingChain(params.get(UpdateParams.UPDATE_PROCESSOR));\n        UpdateRequestProcessor processor = processorChain.createProcessor(req, rsp);\n        SolrResourceLoader loader = req.getCore().getResourceLoader();\n        SolrWriter sw = getSolrWriter(processor, loader, requestParams, req);\n\n        if (requestParams.debug) {\n          if (debugEnabled) {\n            // Synchronous request for the debug mode\n            importer.runCmd(requestParams, sw);\n            rsp.add(\"mode\", \"debug\");\n            rsp.add(\"documents\", debugDocuments);\n            if (sw.debugLogger != null)\n              rsp.add(\"verbose-output\", sw.debugLogger.output);\n            debugDocuments = null;\n          } else {\n            message = DataImporter.MSG.DEBUG_NOT_ENABLED;\n          }\n        } else {\n          // Asynchronous request for normal mode\n          if(requestParams.contentStream == null && !requestParams.syncMode){\n            importer.runAsync(requestParams, sw);\n          } else {\n              importer.runCmd(requestParams, sw);\n          }\n        }\n      } else if (DataImporter.RELOAD_CONF_CMD.equals(command)) {\n        importer = null;\n        inform(req.getCore());\n        message = DataImporter.MSG.CONFIG_RELOADED;\n      }\n    }\n    rsp.add(\"status\", importer.isBusy() ? \"busy\" : \"idle\");\n    rsp.add(\"importResponse\", message);\n    rsp.add(\"statusMessages\", importer.getStatusMessages());\n\n    RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp)\n          throws Exception {\n    rsp.setHttpCaching(false);\n    SolrParams params = req.getParams();\n    DataImporter.RequestParams requestParams = new DataImporter.RequestParams(getParamsMap(params));\n    String command = requestParams.command;\n    Iterable<ContentStream> streams = req.getContentStreams();\n    if(streams != null){\n      for (ContentStream stream : streams) {\n          requestParams.contentStream = stream;\n          break;\n      }\n    }\n    if (DataImporter.SHOW_CONF_CMD.equals(command)) {\n      // Modify incoming request params to add wt=raw\n      ModifiableSolrParams rawParams = new ModifiableSolrParams(req.getParams());\n      rawParams.set(CommonParams.WT, \"raw\");\n      req.setParams(rawParams);\n      String dataConfigFile = defaults.get(\"config\");\n      ContentStreamBase content = new ContentStreamBase.StringStream(SolrWriter\n              .getResourceAsString(req.getCore().getResourceLoader().openResource(\n              dataConfigFile)));\n      rsp.add(RawResponseWriter.CONTENT, content);\n      return;\n    }\n\n    rsp.add(\"initArgs\", initArgs);\n    String message = \"\";\n\n    if (command != null)\n      rsp.add(\"command\", command);\n\n    if (requestParams.debug && (importer == null || !importer.isBusy())) {\n      // Reload the data-config.xml\n      importer = null;\n      if (requestParams.dataConfig != null) {\n        try {\n          processConfiguration((NamedList) initArgs.get(\"defaults\"));\n          importer = new DataImporter(requestParams.dataConfig, req.getCore()\n                  , dataSources, coreScopeSession);\n        } catch (RuntimeException e) {\n          rsp.add(\"exception\", DebugLogger.getStacktraceString(e));\n          importer = null;\n          return;\n        }\n      } else {\n        inform(req.getCore());\n      }\n      message = DataImporter.MSG.CONFIG_RELOADED;\n    }\n\n    // If importer is still null\n    if (importer == null) {\n      rsp.add(\"status\", DataImporter.MSG.NO_INIT);\n      return;\n    }\n\n    if (command != null && DataImporter.ABORT_CMD.equals(command)) {\n      importer.runCmd(requestParams, null);\n    } else if (importer.isBusy()) {\n      message = DataImporter.MSG.CMD_RUNNING;\n    } else if (command != null) {\n      if (DataImporter.FULL_IMPORT_CMD.equals(command)\n              || DataImporter.DELTA_IMPORT_CMD.equals(command) ||\n              IMPORT_CMD.equals(command)) {\n\n        UpdateRequestProcessorChain processorChain =\n                req.getCore().getUpdateProcessingChain(params.get(UpdateParams.UPDATE_PROCESSOR));\n        UpdateRequestProcessor processor = processorChain.createProcessor(req, rsp);\n        SolrResourceLoader loader = req.getCore().getResourceLoader();\n        SolrWriter sw = getSolrWriter(processor, loader, requestParams);\n\n        if (requestParams.debug) {\n          if (debugEnabled) {\n            // Synchronous request for the debug mode\n            importer.runCmd(requestParams, sw);\n            rsp.add(\"mode\", \"debug\");\n            rsp.add(\"documents\", debugDocuments);\n            if (sw.debugLogger != null)\n              rsp.add(\"verbose-output\", sw.debugLogger.output);\n            debugDocuments = null;\n          } else {\n            message = DataImporter.MSG.DEBUG_NOT_ENABLED;\n          }\n        } else {\n          // Asynchronous request for normal mode\n          if(requestParams.contentStream == null && !requestParams.syncMode){\n            importer.runAsync(requestParams, sw);\n          } else {\n              importer.runCmd(requestParams, sw);\n          }\n        }\n      } else if (DataImporter.RELOAD_CONF_CMD.equals(command)) {\n        importer = null;\n        inform(req.getCore());\n        message = DataImporter.MSG.CONFIG_RELOADED;\n      }\n    }\n    rsp.add(\"status\", importer.isBusy() ? \"busy\" : \"idle\");\n    rsp.add(\"importResponse\", message);\n    rsp.add(\"statusMessages\", importer.getStatusMessages());\n\n    RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b24326411db492f92ea49f6fb947c90bc73cf19e","date":1298813468,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImportHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImportHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp)\n          throws Exception {\n    rsp.setHttpCaching(false);\n    SolrParams params = req.getParams();\n    DataImporter.RequestParams requestParams = new DataImporter.RequestParams(getParamsMap(params));\n    String command = requestParams.command;\n    Iterable<ContentStream> streams = req.getContentStreams();\n    if(streams != null){\n      for (ContentStream stream : streams) {\n          requestParams.contentStream = stream;\n          break;\n      }\n    }\n    if (DataImporter.SHOW_CONF_CMD.equals(command)) {\n      // Modify incoming request params to add wt=raw\n      ModifiableSolrParams rawParams = new ModifiableSolrParams(req.getParams());\n      rawParams.set(CommonParams.WT, \"raw\");\n      req.setParams(rawParams);\n      String dataConfigFile = defaults.get(\"config\");\n      ContentStreamBase content = new ContentStreamBase.StringStream(SolrWriter\n              .getResourceAsString(req.getCore().getResourceLoader().openResource(\n              dataConfigFile)));\n      rsp.add(RawResponseWriter.CONTENT, content);\n      return;\n    }\n\n    rsp.add(\"initArgs\", initArgs);\n    String message = \"\";\n\n    if (command != null)\n      rsp.add(\"command\", command);\n\n    if (requestParams.debug && (importer == null || !importer.isBusy())) {\n      // Reload the data-config.xml\n      importer = null;\n      if (requestParams.dataConfig != null) {\n        try {\n          processConfiguration((NamedList) initArgs.get(\"defaults\"));\n          importer = new DataImporter(new InputSource(new StringReader(requestParams.dataConfig)), req.getCore()\n                  , dataSources, coreScopeSession);\n        } catch (RuntimeException e) {\n          rsp.add(\"exception\", DebugLogger.getStacktraceString(e));\n          importer = null;\n          return;\n        }\n      } else {\n        inform(req.getCore());\n      }\n      message = DataImporter.MSG.CONFIG_RELOADED;\n    }\n\n    // If importer is still null\n    if (importer == null) {\n      rsp.add(\"status\", DataImporter.MSG.NO_INIT);\n      return;\n    }\n\n    if (command != null && DataImporter.ABORT_CMD.equals(command)) {\n      importer.runCmd(requestParams, null);\n    } else if (importer.isBusy()) {\n      message = DataImporter.MSG.CMD_RUNNING;\n    } else if (command != null) {\n      if (DataImporter.FULL_IMPORT_CMD.equals(command)\n              || DataImporter.DELTA_IMPORT_CMD.equals(command) ||\n              IMPORT_CMD.equals(command)) {\n\n        UpdateRequestProcessorChain processorChain =\n                req.getCore().getUpdateProcessingChain(params.get(UpdateParams.UPDATE_PROCESSOR));\n        UpdateRequestProcessor processor = processorChain.createProcessor(req, rsp);\n        SolrResourceLoader loader = req.getCore().getResourceLoader();\n        SolrWriter sw = getSolrWriter(processor, loader, requestParams, req);\n\n        if (requestParams.debug) {\n          if (debugEnabled) {\n            // Synchronous request for the debug mode\n            importer.runCmd(requestParams, sw);\n            rsp.add(\"mode\", \"debug\");\n            rsp.add(\"documents\", debugDocuments);\n            if (sw.debugLogger != null)\n              rsp.add(\"verbose-output\", sw.debugLogger.output);\n            debugDocuments = null;\n          } else {\n            message = DataImporter.MSG.DEBUG_NOT_ENABLED;\n          }\n        } else {\n          // Asynchronous request for normal mode\n          if(requestParams.contentStream == null && !requestParams.syncMode){\n            importer.runAsync(requestParams, sw);\n          } else {\n              importer.runCmd(requestParams, sw);\n          }\n        }\n      } else if (DataImporter.RELOAD_CONF_CMD.equals(command)) {\n        importer = null;\n        inform(req.getCore());\n        message = DataImporter.MSG.CONFIG_RELOADED;\n      }\n    }\n    rsp.add(\"status\", importer.isBusy() ? \"busy\" : \"idle\");\n    rsp.add(\"importResponse\", message);\n    rsp.add(\"statusMessages\", importer.getStatusMessages());\n\n    RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp)\n          throws Exception {\n    rsp.setHttpCaching(false);\n    SolrParams params = req.getParams();\n    DataImporter.RequestParams requestParams = new DataImporter.RequestParams(getParamsMap(params));\n    String command = requestParams.command;\n    Iterable<ContentStream> streams = req.getContentStreams();\n    if(streams != null){\n      for (ContentStream stream : streams) {\n          requestParams.contentStream = stream;\n          break;\n      }\n    }\n    if (DataImporter.SHOW_CONF_CMD.equals(command)) {\n      // Modify incoming request params to add wt=raw\n      ModifiableSolrParams rawParams = new ModifiableSolrParams(req.getParams());\n      rawParams.set(CommonParams.WT, \"raw\");\n      req.setParams(rawParams);\n      String dataConfigFile = defaults.get(\"config\");\n      ContentStreamBase content = new ContentStreamBase.StringStream(SolrWriter\n              .getResourceAsString(req.getCore().getResourceLoader().openResource(\n              dataConfigFile)));\n      rsp.add(RawResponseWriter.CONTENT, content);\n      return;\n    }\n\n    rsp.add(\"initArgs\", initArgs);\n    String message = \"\";\n\n    if (command != null)\n      rsp.add(\"command\", command);\n\n    if (requestParams.debug && (importer == null || !importer.isBusy())) {\n      // Reload the data-config.xml\n      importer = null;\n      if (requestParams.dataConfig != null) {\n        try {\n          processConfiguration((NamedList) initArgs.get(\"defaults\"));\n          importer = new DataImporter(requestParams.dataConfig, req.getCore()\n                  , dataSources, coreScopeSession);\n        } catch (RuntimeException e) {\n          rsp.add(\"exception\", DebugLogger.getStacktraceString(e));\n          importer = null;\n          return;\n        }\n      } else {\n        inform(req.getCore());\n      }\n      message = DataImporter.MSG.CONFIG_RELOADED;\n    }\n\n    // If importer is still null\n    if (importer == null) {\n      rsp.add(\"status\", DataImporter.MSG.NO_INIT);\n      return;\n    }\n\n    if (command != null && DataImporter.ABORT_CMD.equals(command)) {\n      importer.runCmd(requestParams, null);\n    } else if (importer.isBusy()) {\n      message = DataImporter.MSG.CMD_RUNNING;\n    } else if (command != null) {\n      if (DataImporter.FULL_IMPORT_CMD.equals(command)\n              || DataImporter.DELTA_IMPORT_CMD.equals(command) ||\n              IMPORT_CMD.equals(command)) {\n\n        UpdateRequestProcessorChain processorChain =\n                req.getCore().getUpdateProcessingChain(params.get(UpdateParams.UPDATE_PROCESSOR));\n        UpdateRequestProcessor processor = processorChain.createProcessor(req, rsp);\n        SolrResourceLoader loader = req.getCore().getResourceLoader();\n        SolrWriter sw = getSolrWriter(processor, loader, requestParams, req);\n\n        if (requestParams.debug) {\n          if (debugEnabled) {\n            // Synchronous request for the debug mode\n            importer.runCmd(requestParams, sw);\n            rsp.add(\"mode\", \"debug\");\n            rsp.add(\"documents\", debugDocuments);\n            if (sw.debugLogger != null)\n              rsp.add(\"verbose-output\", sw.debugLogger.output);\n            debugDocuments = null;\n          } else {\n            message = DataImporter.MSG.DEBUG_NOT_ENABLED;\n          }\n        } else {\n          // Asynchronous request for normal mode\n          if(requestParams.contentStream == null && !requestParams.syncMode){\n            importer.runAsync(requestParams, sw);\n          } else {\n              importer.runCmd(requestParams, sw);\n          }\n        }\n      } else if (DataImporter.RELOAD_CONF_CMD.equals(command)) {\n        importer = null;\n        inform(req.getCore());\n        message = DataImporter.MSG.CONFIG_RELOADED;\n      }\n    }\n    rsp.add(\"status\", importer.isBusy() ? \"busy\" : \"idle\");\n    rsp.add(\"importResponse\", message);\n    rsp.add(\"statusMessages\", importer.getStatusMessages());\n\n    RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImportHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImportHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp)\n          throws Exception {\n    rsp.setHttpCaching(false);\n    SolrParams params = req.getParams();\n    DataImporter.RequestParams requestParams = new DataImporter.RequestParams(getParamsMap(params));\n    String command = requestParams.command;\n    Iterable<ContentStream> streams = req.getContentStreams();\n    if(streams != null){\n      for (ContentStream stream : streams) {\n          requestParams.contentStream = stream;\n          break;\n      }\n    }\n    if (DataImporter.SHOW_CONF_CMD.equals(command)) {\n      // Modify incoming request params to add wt=raw\n      ModifiableSolrParams rawParams = new ModifiableSolrParams(req.getParams());\n      rawParams.set(CommonParams.WT, \"raw\");\n      req.setParams(rawParams);\n      String dataConfigFile = defaults.get(\"config\");\n      ContentStreamBase content = new ContentStreamBase.StringStream(SolrWriter\n              .getResourceAsString(req.getCore().getResourceLoader().openResource(\n              dataConfigFile)));\n      rsp.add(RawResponseWriter.CONTENT, content);\n      return;\n    }\n\n    rsp.add(\"initArgs\", initArgs);\n    String message = \"\";\n\n    if (command != null)\n      rsp.add(\"command\", command);\n\n    if (requestParams.debug && (importer == null || !importer.isBusy())) {\n      // Reload the data-config.xml\n      importer = null;\n      if (requestParams.dataConfig != null) {\n        try {\n          processConfiguration((NamedList) initArgs.get(\"defaults\"));\n          importer = new DataImporter(new InputSource(new StringReader(requestParams.dataConfig)), req.getCore()\n                  , dataSources, coreScopeSession);\n        } catch (RuntimeException e) {\n          rsp.add(\"exception\", DebugLogger.getStacktraceString(e));\n          importer = null;\n          return;\n        }\n      } else {\n        inform(req.getCore());\n      }\n      message = DataImporter.MSG.CONFIG_RELOADED;\n    }\n\n    // If importer is still null\n    if (importer == null) {\n      rsp.add(\"status\", DataImporter.MSG.NO_INIT);\n      return;\n    }\n\n    if (command != null && DataImporter.ABORT_CMD.equals(command)) {\n      importer.runCmd(requestParams, null);\n    } else if (importer.isBusy()) {\n      message = DataImporter.MSG.CMD_RUNNING;\n    } else if (command != null) {\n      if (DataImporter.FULL_IMPORT_CMD.equals(command)\n              || DataImporter.DELTA_IMPORT_CMD.equals(command) ||\n              IMPORT_CMD.equals(command)) {\n\n        UpdateRequestProcessorChain processorChain =\n                req.getCore().getUpdateProcessingChain(params.get(UpdateParams.UPDATE_PROCESSOR));\n        UpdateRequestProcessor processor = processorChain.createProcessor(req, rsp);\n        SolrResourceLoader loader = req.getCore().getResourceLoader();\n        SolrWriter sw = getSolrWriter(processor, loader, requestParams, req);\n\n        if (requestParams.debug) {\n          if (debugEnabled) {\n            // Synchronous request for the debug mode\n            importer.runCmd(requestParams, sw);\n            rsp.add(\"mode\", \"debug\");\n            rsp.add(\"documents\", debugDocuments);\n            if (sw.debugLogger != null)\n              rsp.add(\"verbose-output\", sw.debugLogger.output);\n            debugDocuments = null;\n          } else {\n            message = DataImporter.MSG.DEBUG_NOT_ENABLED;\n          }\n        } else {\n          // Asynchronous request for normal mode\n          if(requestParams.contentStream == null && !requestParams.syncMode){\n            importer.runAsync(requestParams, sw);\n          } else {\n              importer.runCmd(requestParams, sw);\n          }\n        }\n      } else if (DataImporter.RELOAD_CONF_CMD.equals(command)) {\n        importer = null;\n        inform(req.getCore());\n        message = DataImporter.MSG.CONFIG_RELOADED;\n      }\n    }\n    rsp.add(\"status\", importer.isBusy() ? \"busy\" : \"idle\");\n    rsp.add(\"importResponse\", message);\n    rsp.add(\"statusMessages\", importer.getStatusMessages());\n\n    RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp)\n          throws Exception {\n    rsp.setHttpCaching(false);\n    SolrParams params = req.getParams();\n    DataImporter.RequestParams requestParams = new DataImporter.RequestParams(getParamsMap(params));\n    String command = requestParams.command;\n    Iterable<ContentStream> streams = req.getContentStreams();\n    if(streams != null){\n      for (ContentStream stream : streams) {\n          requestParams.contentStream = stream;\n          break;\n      }\n    }\n    if (DataImporter.SHOW_CONF_CMD.equals(command)) {\n      // Modify incoming request params to add wt=raw\n      ModifiableSolrParams rawParams = new ModifiableSolrParams(req.getParams());\n      rawParams.set(CommonParams.WT, \"raw\");\n      req.setParams(rawParams);\n      String dataConfigFile = defaults.get(\"config\");\n      ContentStreamBase content = new ContentStreamBase.StringStream(SolrWriter\n              .getResourceAsString(req.getCore().getResourceLoader().openResource(\n              dataConfigFile)));\n      rsp.add(RawResponseWriter.CONTENT, content);\n      return;\n    }\n\n    rsp.add(\"initArgs\", initArgs);\n    String message = \"\";\n\n    if (command != null)\n      rsp.add(\"command\", command);\n\n    if (requestParams.debug && (importer == null || !importer.isBusy())) {\n      // Reload the data-config.xml\n      importer = null;\n      if (requestParams.dataConfig != null) {\n        try {\n          processConfiguration((NamedList) initArgs.get(\"defaults\"));\n          importer = new DataImporter(requestParams.dataConfig, req.getCore()\n                  , dataSources, coreScopeSession);\n        } catch (RuntimeException e) {\n          rsp.add(\"exception\", DebugLogger.getStacktraceString(e));\n          importer = null;\n          return;\n        }\n      } else {\n        inform(req.getCore());\n      }\n      message = DataImporter.MSG.CONFIG_RELOADED;\n    }\n\n    // If importer is still null\n    if (importer == null) {\n      rsp.add(\"status\", DataImporter.MSG.NO_INIT);\n      return;\n    }\n\n    if (command != null && DataImporter.ABORT_CMD.equals(command)) {\n      importer.runCmd(requestParams, null);\n    } else if (importer.isBusy()) {\n      message = DataImporter.MSG.CMD_RUNNING;\n    } else if (command != null) {\n      if (DataImporter.FULL_IMPORT_CMD.equals(command)\n              || DataImporter.DELTA_IMPORT_CMD.equals(command) ||\n              IMPORT_CMD.equals(command)) {\n\n        UpdateRequestProcessorChain processorChain =\n                req.getCore().getUpdateProcessingChain(params.get(UpdateParams.UPDATE_PROCESSOR));\n        UpdateRequestProcessor processor = processorChain.createProcessor(req, rsp);\n        SolrResourceLoader loader = req.getCore().getResourceLoader();\n        SolrWriter sw = getSolrWriter(processor, loader, requestParams, req);\n\n        if (requestParams.debug) {\n          if (debugEnabled) {\n            // Synchronous request for the debug mode\n            importer.runCmd(requestParams, sw);\n            rsp.add(\"mode\", \"debug\");\n            rsp.add(\"documents\", debugDocuments);\n            if (sw.debugLogger != null)\n              rsp.add(\"verbose-output\", sw.debugLogger.output);\n            debugDocuments = null;\n          } else {\n            message = DataImporter.MSG.DEBUG_NOT_ENABLED;\n          }\n        } else {\n          // Asynchronous request for normal mode\n          if(requestParams.contentStream == null && !requestParams.syncMode){\n            importer.runAsync(requestParams, sw);\n          } else {\n              importer.runCmd(requestParams, sw);\n          }\n        }\n      } else if (DataImporter.RELOAD_CONF_CMD.equals(command)) {\n        importer = null;\n        inform(req.getCore());\n        message = DataImporter.MSG.CONFIG_RELOADED;\n      }\n    }\n    rsp.add(\"status\", importer.isBusy() ? \"busy\" : \"idle\");\n    rsp.add(\"importResponse\", message);\n    rsp.add(\"statusMessages\", importer.getStatusMessages());\n\n    RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImportHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImportHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp)\n          throws Exception {\n    rsp.setHttpCaching(false);\n    SolrParams params = req.getParams();\n    DataImporter.RequestParams requestParams = new DataImporter.RequestParams(getParamsMap(params));\n    String command = requestParams.command;\n    Iterable<ContentStream> streams = req.getContentStreams();\n    if(streams != null){\n      for (ContentStream stream : streams) {\n          requestParams.contentStream = stream;\n          break;\n      }\n    }\n    if (DataImporter.SHOW_CONF_CMD.equals(command)) {\n      // Modify incoming request params to add wt=raw\n      ModifiableSolrParams rawParams = new ModifiableSolrParams(req.getParams());\n      rawParams.set(CommonParams.WT, \"raw\");\n      req.setParams(rawParams);\n      String dataConfigFile = defaults.get(\"config\");\n      ContentStreamBase content = new ContentStreamBase.StringStream(SolrWriter\n              .getResourceAsString(req.getCore().getResourceLoader().openResource(\n              dataConfigFile)));\n      rsp.add(RawResponseWriter.CONTENT, content);\n      return;\n    }\n\n    rsp.add(\"initArgs\", initArgs);\n    String message = \"\";\n\n    if (command != null)\n      rsp.add(\"command\", command);\n\n    if (requestParams.debug && (importer == null || !importer.isBusy())) {\n      // Reload the data-config.xml\n      importer = null;\n      if (requestParams.dataConfig != null) {\n        try {\n          processConfiguration((NamedList) initArgs.get(\"defaults\"));\n          importer = new DataImporter(new InputSource(new StringReader(requestParams.dataConfig)), req.getCore()\n                  , dataSources, coreScopeSession);\n        } catch (RuntimeException e) {\n          rsp.add(\"exception\", DebugLogger.getStacktraceString(e));\n          importer = null;\n          return;\n        }\n      } else {\n        inform(req.getCore());\n      }\n      message = DataImporter.MSG.CONFIG_RELOADED;\n    }\n\n    // If importer is still null\n    if (importer == null) {\n      rsp.add(\"status\", DataImporter.MSG.NO_INIT);\n      return;\n    }\n\n    if (command != null && DataImporter.ABORT_CMD.equals(command)) {\n      importer.runCmd(requestParams, null);\n    } else if (importer.isBusy()) {\n      message = DataImporter.MSG.CMD_RUNNING;\n    } else if (command != null) {\n      if (DataImporter.FULL_IMPORT_CMD.equals(command)\n              || DataImporter.DELTA_IMPORT_CMD.equals(command) ||\n              IMPORT_CMD.equals(command)) {\n\n        UpdateRequestProcessorChain processorChain =\n                req.getCore().getUpdateProcessingChain(params.get(UpdateParams.UPDATE_PROCESSOR));\n        UpdateRequestProcessor processor = processorChain.createProcessor(req, rsp);\n        SolrResourceLoader loader = req.getCore().getResourceLoader();\n        SolrWriter sw = getSolrWriter(processor, loader, requestParams, req);\n\n        if (requestParams.debug) {\n          if (debugEnabled) {\n            // Synchronous request for the debug mode\n            importer.runCmd(requestParams, sw);\n            rsp.add(\"mode\", \"debug\");\n            rsp.add(\"documents\", debugDocuments);\n            if (sw.debugLogger != null)\n              rsp.add(\"verbose-output\", sw.debugLogger.output);\n            debugDocuments = null;\n          } else {\n            message = DataImporter.MSG.DEBUG_NOT_ENABLED;\n          }\n        } else {\n          // Asynchronous request for normal mode\n          if(requestParams.contentStream == null && !requestParams.syncMode){\n            importer.runAsync(requestParams, sw);\n          } else {\n              importer.runCmd(requestParams, sw);\n          }\n        }\n      } else if (DataImporter.RELOAD_CONF_CMD.equals(command)) {\n        importer = null;\n        inform(req.getCore());\n        message = DataImporter.MSG.CONFIG_RELOADED;\n      }\n    }\n    rsp.add(\"status\", importer.isBusy() ? \"busy\" : \"idle\");\n    rsp.add(\"importResponse\", message);\n    rsp.add(\"statusMessages\", importer.getStatusMessages());\n\n    RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp)\n          throws Exception {\n    rsp.setHttpCaching(false);\n    SolrParams params = req.getParams();\n    DataImporter.RequestParams requestParams = new DataImporter.RequestParams(getParamsMap(params));\n    String command = requestParams.command;\n    Iterable<ContentStream> streams = req.getContentStreams();\n    if(streams != null){\n      for (ContentStream stream : streams) {\n          requestParams.contentStream = stream;\n          break;\n      }\n    }\n    if (DataImporter.SHOW_CONF_CMD.equals(command)) {\n      // Modify incoming request params to add wt=raw\n      ModifiableSolrParams rawParams = new ModifiableSolrParams(req.getParams());\n      rawParams.set(CommonParams.WT, \"raw\");\n      req.setParams(rawParams);\n      String dataConfigFile = defaults.get(\"config\");\n      ContentStreamBase content = new ContentStreamBase.StringStream(SolrWriter\n              .getResourceAsString(req.getCore().getResourceLoader().openResource(\n              dataConfigFile)));\n      rsp.add(RawResponseWriter.CONTENT, content);\n      return;\n    }\n\n    rsp.add(\"initArgs\", initArgs);\n    String message = \"\";\n\n    if (command != null)\n      rsp.add(\"command\", command);\n\n    if (requestParams.debug && (importer == null || !importer.isBusy())) {\n      // Reload the data-config.xml\n      importer = null;\n      if (requestParams.dataConfig != null) {\n        try {\n          processConfiguration((NamedList) initArgs.get(\"defaults\"));\n          importer = new DataImporter(requestParams.dataConfig, req.getCore()\n                  , dataSources, coreScopeSession);\n        } catch (RuntimeException e) {\n          rsp.add(\"exception\", DebugLogger.getStacktraceString(e));\n          importer = null;\n          return;\n        }\n      } else {\n        inform(req.getCore());\n      }\n      message = DataImporter.MSG.CONFIG_RELOADED;\n    }\n\n    // If importer is still null\n    if (importer == null) {\n      rsp.add(\"status\", DataImporter.MSG.NO_INIT);\n      return;\n    }\n\n    if (command != null && DataImporter.ABORT_CMD.equals(command)) {\n      importer.runCmd(requestParams, null);\n    } else if (importer.isBusy()) {\n      message = DataImporter.MSG.CMD_RUNNING;\n    } else if (command != null) {\n      if (DataImporter.FULL_IMPORT_CMD.equals(command)\n              || DataImporter.DELTA_IMPORT_CMD.equals(command) ||\n              IMPORT_CMD.equals(command)) {\n\n        UpdateRequestProcessorChain processorChain =\n                req.getCore().getUpdateProcessingChain(params.get(UpdateParams.UPDATE_PROCESSOR));\n        UpdateRequestProcessor processor = processorChain.createProcessor(req, rsp);\n        SolrResourceLoader loader = req.getCore().getResourceLoader();\n        SolrWriter sw = getSolrWriter(processor, loader, requestParams, req);\n\n        if (requestParams.debug) {\n          if (debugEnabled) {\n            // Synchronous request for the debug mode\n            importer.runCmd(requestParams, sw);\n            rsp.add(\"mode\", \"debug\");\n            rsp.add(\"documents\", debugDocuments);\n            if (sw.debugLogger != null)\n              rsp.add(\"verbose-output\", sw.debugLogger.output);\n            debugDocuments = null;\n          } else {\n            message = DataImporter.MSG.DEBUG_NOT_ENABLED;\n          }\n        } else {\n          // Asynchronous request for normal mode\n          if(requestParams.contentStream == null && !requestParams.syncMode){\n            importer.runAsync(requestParams, sw);\n          } else {\n              importer.runCmd(requestParams, sw);\n          }\n        }\n      } else if (DataImporter.RELOAD_CONF_CMD.equals(command)) {\n        importer = null;\n        inform(req.getCore());\n        message = DataImporter.MSG.CONFIG_RELOADED;\n      }\n    }\n    rsp.add(\"status\", importer.isBusy() ? \"busy\" : \"idle\");\n    rsp.add(\"importResponse\", message);\n    rsp.add(\"statusMessages\", importer.getStatusMessages());\n\n    RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"64cae353de680169c133e0a9f4debee071ad3241","date":1303312298,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImportHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImportHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp)\n          throws Exception {\n    rsp.setHttpCaching(false);\n    SolrParams params = req.getParams();\n    DataImporter.RequestParams requestParams = new DataImporter.RequestParams(getParamsMap(params));\n    String command = requestParams.command;\n    Iterable<ContentStream> streams = req.getContentStreams();\n    if(streams != null){\n      for (ContentStream stream : streams) {\n          requestParams.contentStream = stream;\n          break;\n      }\n    }\n    if (DataImporter.SHOW_CONF_CMD.equals(command)) {\n      // Modify incoming request params to add wt=raw\n      ModifiableSolrParams rawParams = new ModifiableSolrParams(req.getParams());\n      rawParams.set(CommonParams.WT, \"raw\");\n      req.setParams(rawParams);\n      String dataConfigFile = defaults.get(\"config\");\n      ContentStreamBase content = new ContentStreamBase.StringStream(SolrWriter\n              .getResourceAsString(req.getCore().getResourceLoader().openResource(\n              dataConfigFile)));\n      rsp.add(RawResponseWriter.CONTENT, content);\n      return;\n    }\n\n    rsp.add(\"initArgs\", initArgs);\n    String message = \"\";\n\n    if (command != null)\n      rsp.add(\"command\", command);\n\n    if (requestParams.debug && (importer == null || !importer.isBusy())) {\n      // Reload the data-config.xml\n      importer = null;\n      if (requestParams.dataConfig != null) {\n        try {\n          processConfiguration((NamedList) initArgs.get(\"defaults\"));\n          importer = new DataImporter(new InputSource(new StringReader(requestParams.dataConfig)), req.getCore()\n                  , dataSources, coreScopeSession);\n        } catch (RuntimeException e) {\n          rsp.add(\"exception\", DebugLogger.getStacktraceString(e));\n          importer = null;\n          return;\n        }\n      } else {\n        inform(req.getCore());\n      }\n      message = DataImporter.MSG.CONFIG_RELOADED;\n    }\n\n    // If importer is still null\n    if (importer == null) {\n      rsp.add(\"status\", DataImporter.MSG.NO_INIT);\n      return;\n    }\n\n    if (command != null && DataImporter.ABORT_CMD.equals(command)) {\n      importer.runCmd(requestParams, null);\n    } else if (importer.isBusy()) {\n      message = DataImporter.MSG.CMD_RUNNING;\n    } else if (command != null) {\n      if (DataImporter.FULL_IMPORT_CMD.equals(command)\n              || DataImporter.DELTA_IMPORT_CMD.equals(command) ||\n              IMPORT_CMD.equals(command)) {\n\n        UpdateRequestProcessorChain processorChain =\n                req.getCore().getUpdateProcessingChain(params.get(UpdateParams.UPDATE_CHAIN));\n        UpdateRequestProcessor processor = processorChain.createProcessor(req, rsp);\n        SolrResourceLoader loader = req.getCore().getResourceLoader();\n        SolrWriter sw = getSolrWriter(processor, loader, requestParams, req);\n\n        if (requestParams.debug) {\n          if (debugEnabled) {\n            // Synchronous request for the debug mode\n            importer.runCmd(requestParams, sw);\n            rsp.add(\"mode\", \"debug\");\n            rsp.add(\"documents\", debugDocuments);\n            if (sw.debugLogger != null)\n              rsp.add(\"verbose-output\", sw.debugLogger.output);\n            debugDocuments = null;\n          } else {\n            message = DataImporter.MSG.DEBUG_NOT_ENABLED;\n          }\n        } else {\n          // Asynchronous request for normal mode\n          if(requestParams.contentStream == null && !requestParams.syncMode){\n            importer.runAsync(requestParams, sw);\n          } else {\n              importer.runCmd(requestParams, sw);\n          }\n        }\n      } else if (DataImporter.RELOAD_CONF_CMD.equals(command)) {\n        importer = null;\n        inform(req.getCore());\n        message = DataImporter.MSG.CONFIG_RELOADED;\n      }\n    }\n    rsp.add(\"status\", importer.isBusy() ? \"busy\" : \"idle\");\n    rsp.add(\"importResponse\", message);\n    rsp.add(\"statusMessages\", importer.getStatusMessages());\n\n    RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp)\n          throws Exception {\n    rsp.setHttpCaching(false);\n    SolrParams params = req.getParams();\n    DataImporter.RequestParams requestParams = new DataImporter.RequestParams(getParamsMap(params));\n    String command = requestParams.command;\n    Iterable<ContentStream> streams = req.getContentStreams();\n    if(streams != null){\n      for (ContentStream stream : streams) {\n          requestParams.contentStream = stream;\n          break;\n      }\n    }\n    if (DataImporter.SHOW_CONF_CMD.equals(command)) {\n      // Modify incoming request params to add wt=raw\n      ModifiableSolrParams rawParams = new ModifiableSolrParams(req.getParams());\n      rawParams.set(CommonParams.WT, \"raw\");\n      req.setParams(rawParams);\n      String dataConfigFile = defaults.get(\"config\");\n      ContentStreamBase content = new ContentStreamBase.StringStream(SolrWriter\n              .getResourceAsString(req.getCore().getResourceLoader().openResource(\n              dataConfigFile)));\n      rsp.add(RawResponseWriter.CONTENT, content);\n      return;\n    }\n\n    rsp.add(\"initArgs\", initArgs);\n    String message = \"\";\n\n    if (command != null)\n      rsp.add(\"command\", command);\n\n    if (requestParams.debug && (importer == null || !importer.isBusy())) {\n      // Reload the data-config.xml\n      importer = null;\n      if (requestParams.dataConfig != null) {\n        try {\n          processConfiguration((NamedList) initArgs.get(\"defaults\"));\n          importer = new DataImporter(new InputSource(new StringReader(requestParams.dataConfig)), req.getCore()\n                  , dataSources, coreScopeSession);\n        } catch (RuntimeException e) {\n          rsp.add(\"exception\", DebugLogger.getStacktraceString(e));\n          importer = null;\n          return;\n        }\n      } else {\n        inform(req.getCore());\n      }\n      message = DataImporter.MSG.CONFIG_RELOADED;\n    }\n\n    // If importer is still null\n    if (importer == null) {\n      rsp.add(\"status\", DataImporter.MSG.NO_INIT);\n      return;\n    }\n\n    if (command != null && DataImporter.ABORT_CMD.equals(command)) {\n      importer.runCmd(requestParams, null);\n    } else if (importer.isBusy()) {\n      message = DataImporter.MSG.CMD_RUNNING;\n    } else if (command != null) {\n      if (DataImporter.FULL_IMPORT_CMD.equals(command)\n              || DataImporter.DELTA_IMPORT_CMD.equals(command) ||\n              IMPORT_CMD.equals(command)) {\n\n        UpdateRequestProcessorChain processorChain =\n                req.getCore().getUpdateProcessingChain(params.get(UpdateParams.UPDATE_PROCESSOR));\n        UpdateRequestProcessor processor = processorChain.createProcessor(req, rsp);\n        SolrResourceLoader loader = req.getCore().getResourceLoader();\n        SolrWriter sw = getSolrWriter(processor, loader, requestParams, req);\n\n        if (requestParams.debug) {\n          if (debugEnabled) {\n            // Synchronous request for the debug mode\n            importer.runCmd(requestParams, sw);\n            rsp.add(\"mode\", \"debug\");\n            rsp.add(\"documents\", debugDocuments);\n            if (sw.debugLogger != null)\n              rsp.add(\"verbose-output\", sw.debugLogger.output);\n            debugDocuments = null;\n          } else {\n            message = DataImporter.MSG.DEBUG_NOT_ENABLED;\n          }\n        } else {\n          // Asynchronous request for normal mode\n          if(requestParams.contentStream == null && !requestParams.syncMode){\n            importer.runAsync(requestParams, sw);\n          } else {\n              importer.runCmd(requestParams, sw);\n          }\n        }\n      } else if (DataImporter.RELOAD_CONF_CMD.equals(command)) {\n        importer = null;\n        inform(req.getCore());\n        message = DataImporter.MSG.CONFIG_RELOADED;\n      }\n    }\n    rsp.add(\"status\", importer.isBusy() ? \"busy\" : \"idle\");\n    rsp.add(\"importResponse\", message);\n    rsp.add(\"statusMessages\", importer.getStatusMessages());\n\n    RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n  }\n\n","bugFix":null,"bugIntro":["38cf2ff411b3f7342febd22163907bafb5342a6f","38cf2ff411b3f7342febd22163907bafb5342a6f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d493718201f0d0c54c773fb323d87bbd2fbffe41","date":1303546048,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImportHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImportHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp)\n          throws Exception {\n    rsp.setHttpCaching(false);\n    SolrParams params = req.getParams();\n    DataImporter.RequestParams requestParams = new DataImporter.RequestParams(getParamsMap(params));\n    String command = requestParams.command;\n    Iterable<ContentStream> streams = req.getContentStreams();\n    if(streams != null){\n      for (ContentStream stream : streams) {\n          requestParams.contentStream = stream;\n          break;\n      }\n    }\n    if (DataImporter.SHOW_CONF_CMD.equals(command)) {\n      // Modify incoming request params to add wt=raw\n      ModifiableSolrParams rawParams = new ModifiableSolrParams(req.getParams());\n      rawParams.set(CommonParams.WT, \"raw\");\n      req.setParams(rawParams);\n      String dataConfigFile = defaults.get(\"config\");\n      ContentStreamBase content = new ContentStreamBase.StringStream(SolrWriter\n              .getResourceAsString(req.getCore().getResourceLoader().openResource(\n              dataConfigFile)));\n      rsp.add(RawResponseWriter.CONTENT, content);\n      return;\n    }\n\n    rsp.add(\"initArgs\", initArgs);\n    String message = \"\";\n\n    if (command != null)\n      rsp.add(\"command\", command);\n\n    if (requestParams.debug && (importer == null || !importer.isBusy())) {\n      // Reload the data-config.xml\n      importer = null;\n      if (requestParams.dataConfig != null) {\n        try {\n          processConfiguration((NamedList) initArgs.get(\"defaults\"));\n          importer = new DataImporter(new InputSource(new StringReader(requestParams.dataConfig)), req.getCore()\n                  , dataSources, coreScopeSession);\n        } catch (RuntimeException e) {\n          rsp.add(\"exception\", DebugLogger.getStacktraceString(e));\n          importer = null;\n          return;\n        }\n      } else {\n        inform(req.getCore());\n      }\n      message = DataImporter.MSG.CONFIG_RELOADED;\n    }\n\n    // If importer is still null\n    if (importer == null) {\n      rsp.add(\"status\", DataImporter.MSG.NO_INIT);\n      return;\n    }\n\n    if (command != null && DataImporter.ABORT_CMD.equals(command)) {\n      importer.runCmd(requestParams, null);\n    } else if (importer.isBusy()) {\n      message = DataImporter.MSG.CMD_RUNNING;\n    } else if (command != null) {\n      if (DataImporter.FULL_IMPORT_CMD.equals(command)\n              || DataImporter.DELTA_IMPORT_CMD.equals(command) ||\n              IMPORT_CMD.equals(command)) {\n\n        UpdateRequestProcessorChain processorChain =\n                req.getCore().getUpdateProcessingChain(params.get(UpdateParams.UPDATE_CHAIN));\n        UpdateRequestProcessor processor = processorChain.createProcessor(req, rsp);\n        SolrResourceLoader loader = req.getCore().getResourceLoader();\n        SolrWriter sw = getSolrWriter(processor, loader, requestParams, req);\n\n        if (requestParams.debug) {\n          if (debugEnabled) {\n            // Synchronous request for the debug mode\n            importer.runCmd(requestParams, sw);\n            rsp.add(\"mode\", \"debug\");\n            rsp.add(\"documents\", debugDocuments);\n            if (sw.debugLogger != null)\n              rsp.add(\"verbose-output\", sw.debugLogger.output);\n            debugDocuments = null;\n          } else {\n            message = DataImporter.MSG.DEBUG_NOT_ENABLED;\n          }\n        } else {\n          // Asynchronous request for normal mode\n          if(requestParams.contentStream == null && !requestParams.syncMode){\n            importer.runAsync(requestParams, sw);\n          } else {\n              importer.runCmd(requestParams, sw);\n          }\n        }\n      } else if (DataImporter.RELOAD_CONF_CMD.equals(command)) {\n        importer = null;\n        inform(req.getCore());\n        message = DataImporter.MSG.CONFIG_RELOADED;\n      }\n    }\n    rsp.add(\"status\", importer.isBusy() ? \"busy\" : \"idle\");\n    rsp.add(\"importResponse\", message);\n    rsp.add(\"statusMessages\", importer.getStatusMessages());\n\n    RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp)\n          throws Exception {\n    rsp.setHttpCaching(false);\n    SolrParams params = req.getParams();\n    DataImporter.RequestParams requestParams = new DataImporter.RequestParams(getParamsMap(params));\n    String command = requestParams.command;\n    Iterable<ContentStream> streams = req.getContentStreams();\n    if(streams != null){\n      for (ContentStream stream : streams) {\n          requestParams.contentStream = stream;\n          break;\n      }\n    }\n    if (DataImporter.SHOW_CONF_CMD.equals(command)) {\n      // Modify incoming request params to add wt=raw\n      ModifiableSolrParams rawParams = new ModifiableSolrParams(req.getParams());\n      rawParams.set(CommonParams.WT, \"raw\");\n      req.setParams(rawParams);\n      String dataConfigFile = defaults.get(\"config\");\n      ContentStreamBase content = new ContentStreamBase.StringStream(SolrWriter\n              .getResourceAsString(req.getCore().getResourceLoader().openResource(\n              dataConfigFile)));\n      rsp.add(RawResponseWriter.CONTENT, content);\n      return;\n    }\n\n    rsp.add(\"initArgs\", initArgs);\n    String message = \"\";\n\n    if (command != null)\n      rsp.add(\"command\", command);\n\n    if (requestParams.debug && (importer == null || !importer.isBusy())) {\n      // Reload the data-config.xml\n      importer = null;\n      if (requestParams.dataConfig != null) {\n        try {\n          processConfiguration((NamedList) initArgs.get(\"defaults\"));\n          importer = new DataImporter(new InputSource(new StringReader(requestParams.dataConfig)), req.getCore()\n                  , dataSources, coreScopeSession);\n        } catch (RuntimeException e) {\n          rsp.add(\"exception\", DebugLogger.getStacktraceString(e));\n          importer = null;\n          return;\n        }\n      } else {\n        inform(req.getCore());\n      }\n      message = DataImporter.MSG.CONFIG_RELOADED;\n    }\n\n    // If importer is still null\n    if (importer == null) {\n      rsp.add(\"status\", DataImporter.MSG.NO_INIT);\n      return;\n    }\n\n    if (command != null && DataImporter.ABORT_CMD.equals(command)) {\n      importer.runCmd(requestParams, null);\n    } else if (importer.isBusy()) {\n      message = DataImporter.MSG.CMD_RUNNING;\n    } else if (command != null) {\n      if (DataImporter.FULL_IMPORT_CMD.equals(command)\n              || DataImporter.DELTA_IMPORT_CMD.equals(command) ||\n              IMPORT_CMD.equals(command)) {\n\n        UpdateRequestProcessorChain processorChain =\n                req.getCore().getUpdateProcessingChain(params.get(UpdateParams.UPDATE_PROCESSOR));\n        UpdateRequestProcessor processor = processorChain.createProcessor(req, rsp);\n        SolrResourceLoader loader = req.getCore().getResourceLoader();\n        SolrWriter sw = getSolrWriter(processor, loader, requestParams, req);\n\n        if (requestParams.debug) {\n          if (debugEnabled) {\n            // Synchronous request for the debug mode\n            importer.runCmd(requestParams, sw);\n            rsp.add(\"mode\", \"debug\");\n            rsp.add(\"documents\", debugDocuments);\n            if (sw.debugLogger != null)\n              rsp.add(\"verbose-output\", sw.debugLogger.output);\n            debugDocuments = null;\n          } else {\n            message = DataImporter.MSG.DEBUG_NOT_ENABLED;\n          }\n        } else {\n          // Asynchronous request for normal mode\n          if(requestParams.contentStream == null && !requestParams.syncMode){\n            importer.runAsync(requestParams, sw);\n          } else {\n              importer.runCmd(requestParams, sw);\n          }\n        }\n      } else if (DataImporter.RELOAD_CONF_CMD.equals(command)) {\n        importer = null;\n        inform(req.getCore());\n        message = DataImporter.MSG.CONFIG_RELOADED;\n      }\n    }\n    rsp.add(\"status\", importer.isBusy() ? \"busy\" : \"idle\");\n    rsp.add(\"importResponse\", message);\n    rsp.add(\"statusMessages\", importer.getStatusMessages());\n\n    RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImportHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImportHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp)\n          throws Exception {\n    rsp.setHttpCaching(false);\n    SolrParams params = req.getParams();\n    DataImporter.RequestParams requestParams = new DataImporter.RequestParams(getParamsMap(params));\n    String command = requestParams.command;\n    Iterable<ContentStream> streams = req.getContentStreams();\n    if(streams != null){\n      for (ContentStream stream : streams) {\n          requestParams.contentStream = stream;\n          break;\n      }\n    }\n    if (DataImporter.SHOW_CONF_CMD.equals(command)) {\n      // Modify incoming request params to add wt=raw\n      ModifiableSolrParams rawParams = new ModifiableSolrParams(req.getParams());\n      rawParams.set(CommonParams.WT, \"raw\");\n      req.setParams(rawParams);\n      String dataConfigFile = defaults.get(\"config\");\n      ContentStreamBase content = new ContentStreamBase.StringStream(SolrWriter\n              .getResourceAsString(req.getCore().getResourceLoader().openResource(\n              dataConfigFile)));\n      rsp.add(RawResponseWriter.CONTENT, content);\n      return;\n    }\n\n    rsp.add(\"initArgs\", initArgs);\n    String message = \"\";\n\n    if (command != null)\n      rsp.add(\"command\", command);\n\n    if (requestParams.debug && (importer == null || !importer.isBusy())) {\n      // Reload the data-config.xml\n      importer = null;\n      if (requestParams.dataConfig != null) {\n        try {\n          processConfiguration((NamedList) initArgs.get(\"defaults\"));\n          importer = new DataImporter(new InputSource(new StringReader(requestParams.dataConfig)), req.getCore()\n                  , dataSources, coreScopeSession);\n        } catch (RuntimeException e) {\n          rsp.add(\"exception\", DebugLogger.getStacktraceString(e));\n          importer = null;\n          return;\n        }\n      } else {\n        inform(req.getCore());\n      }\n      message = DataImporter.MSG.CONFIG_RELOADED;\n    }\n\n    // If importer is still null\n    if (importer == null) {\n      rsp.add(\"status\", DataImporter.MSG.NO_INIT);\n      return;\n    }\n\n    if (command != null && DataImporter.ABORT_CMD.equals(command)) {\n      importer.runCmd(requestParams, null);\n    } else if (importer.isBusy()) {\n      message = DataImporter.MSG.CMD_RUNNING;\n    } else if (command != null) {\n      if (DataImporter.FULL_IMPORT_CMD.equals(command)\n              || DataImporter.DELTA_IMPORT_CMD.equals(command) ||\n              IMPORT_CMD.equals(command)) {\n\n        UpdateRequestProcessorChain processorChain =\n                req.getCore().getUpdateProcessingChain(params.get(UpdateParams.UPDATE_CHAIN));\n        UpdateRequestProcessor processor = processorChain.createProcessor(req, rsp);\n        SolrResourceLoader loader = req.getCore().getResourceLoader();\n        SolrWriter sw = getSolrWriter(processor, loader, requestParams, req);\n\n        if (requestParams.debug) {\n          if (debugEnabled) {\n            // Synchronous request for the debug mode\n            importer.runCmd(requestParams, sw);\n            rsp.add(\"mode\", \"debug\");\n            rsp.add(\"documents\", debugDocuments);\n            if (sw.debugLogger != null)\n              rsp.add(\"verbose-output\", sw.debugLogger.output);\n            debugDocuments = null;\n          } else {\n            message = DataImporter.MSG.DEBUG_NOT_ENABLED;\n          }\n        } else {\n          // Asynchronous request for normal mode\n          if(requestParams.contentStream == null && !requestParams.syncMode){\n            importer.runAsync(requestParams, sw);\n          } else {\n              importer.runCmd(requestParams, sw);\n          }\n        }\n      } else if (DataImporter.RELOAD_CONF_CMD.equals(command)) {\n        importer = null;\n        inform(req.getCore());\n        message = DataImporter.MSG.CONFIG_RELOADED;\n      }\n    }\n    rsp.add(\"status\", importer.isBusy() ? \"busy\" : \"idle\");\n    rsp.add(\"importResponse\", message);\n    rsp.add(\"statusMessages\", importer.getStatusMessages());\n\n    RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp)\n          throws Exception {\n    rsp.setHttpCaching(false);\n    SolrParams params = req.getParams();\n    DataImporter.RequestParams requestParams = new DataImporter.RequestParams(getParamsMap(params));\n    String command = requestParams.command;\n    Iterable<ContentStream> streams = req.getContentStreams();\n    if(streams != null){\n      for (ContentStream stream : streams) {\n          requestParams.contentStream = stream;\n          break;\n      }\n    }\n    if (DataImporter.SHOW_CONF_CMD.equals(command)) {\n      // Modify incoming request params to add wt=raw\n      ModifiableSolrParams rawParams = new ModifiableSolrParams(req.getParams());\n      rawParams.set(CommonParams.WT, \"raw\");\n      req.setParams(rawParams);\n      String dataConfigFile = defaults.get(\"config\");\n      ContentStreamBase content = new ContentStreamBase.StringStream(SolrWriter\n              .getResourceAsString(req.getCore().getResourceLoader().openResource(\n              dataConfigFile)));\n      rsp.add(RawResponseWriter.CONTENT, content);\n      return;\n    }\n\n    rsp.add(\"initArgs\", initArgs);\n    String message = \"\";\n\n    if (command != null)\n      rsp.add(\"command\", command);\n\n    if (requestParams.debug && (importer == null || !importer.isBusy())) {\n      // Reload the data-config.xml\n      importer = null;\n      if (requestParams.dataConfig != null) {\n        try {\n          processConfiguration((NamedList) initArgs.get(\"defaults\"));\n          importer = new DataImporter(new InputSource(new StringReader(requestParams.dataConfig)), req.getCore()\n                  , dataSources, coreScopeSession);\n        } catch (RuntimeException e) {\n          rsp.add(\"exception\", DebugLogger.getStacktraceString(e));\n          importer = null;\n          return;\n        }\n      } else {\n        inform(req.getCore());\n      }\n      message = DataImporter.MSG.CONFIG_RELOADED;\n    }\n\n    // If importer is still null\n    if (importer == null) {\n      rsp.add(\"status\", DataImporter.MSG.NO_INIT);\n      return;\n    }\n\n    if (command != null && DataImporter.ABORT_CMD.equals(command)) {\n      importer.runCmd(requestParams, null);\n    } else if (importer.isBusy()) {\n      message = DataImporter.MSG.CMD_RUNNING;\n    } else if (command != null) {\n      if (DataImporter.FULL_IMPORT_CMD.equals(command)\n              || DataImporter.DELTA_IMPORT_CMD.equals(command) ||\n              IMPORT_CMD.equals(command)) {\n\n        UpdateRequestProcessorChain processorChain =\n                req.getCore().getUpdateProcessingChain(params.get(UpdateParams.UPDATE_PROCESSOR));\n        UpdateRequestProcessor processor = processorChain.createProcessor(req, rsp);\n        SolrResourceLoader loader = req.getCore().getResourceLoader();\n        SolrWriter sw = getSolrWriter(processor, loader, requestParams, req);\n\n        if (requestParams.debug) {\n          if (debugEnabled) {\n            // Synchronous request for the debug mode\n            importer.runCmd(requestParams, sw);\n            rsp.add(\"mode\", \"debug\");\n            rsp.add(\"documents\", debugDocuments);\n            if (sw.debugLogger != null)\n              rsp.add(\"verbose-output\", sw.debugLogger.output);\n            debugDocuments = null;\n          } else {\n            message = DataImporter.MSG.DEBUG_NOT_ENABLED;\n          }\n        } else {\n          // Asynchronous request for normal mode\n          if(requestParams.contentStream == null && !requestParams.syncMode){\n            importer.runAsync(requestParams, sw);\n          } else {\n              importer.runCmd(requestParams, sw);\n          }\n        }\n      } else if (DataImporter.RELOAD_CONF_CMD.equals(command)) {\n        importer = null;\n        inform(req.getCore());\n        message = DataImporter.MSG.CONFIG_RELOADED;\n      }\n    }\n    rsp.add(\"status\", importer.isBusy() ? \"busy\" : \"idle\");\n    rsp.add(\"importResponse\", message);\n    rsp.add(\"statusMessages\", importer.getStatusMessages());\n\n    RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImportHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImportHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp)\n          throws Exception {\n    rsp.setHttpCaching(false);\n    SolrParams params = req.getParams();\n    DataImporter.RequestParams requestParams = new DataImporter.RequestParams(getParamsMap(params));\n    String command = requestParams.command;\n    Iterable<ContentStream> streams = req.getContentStreams();\n    if(streams != null){\n      for (ContentStream stream : streams) {\n          requestParams.contentStream = stream;\n          break;\n      }\n    }\n    if (DataImporter.SHOW_CONF_CMD.equals(command)) {\n      // Modify incoming request params to add wt=raw\n      ModifiableSolrParams rawParams = new ModifiableSolrParams(req.getParams());\n      rawParams.set(CommonParams.WT, \"raw\");\n      req.setParams(rawParams);\n      String dataConfigFile = defaults.get(\"config\");\n      ContentStreamBase content = new ContentStreamBase.StringStream(SolrWriter\n              .getResourceAsString(req.getCore().getResourceLoader().openResource(\n              dataConfigFile)));\n      rsp.add(RawResponseWriter.CONTENT, content);\n      return;\n    }\n\n    rsp.add(\"initArgs\", initArgs);\n    String message = \"\";\n\n    if (command != null)\n      rsp.add(\"command\", command);\n\n    if (requestParams.debug && (importer == null || !importer.isBusy())) {\n      // Reload the data-config.xml\n      importer = null;\n      if (requestParams.dataConfig != null) {\n        try {\n          processConfiguration((NamedList) initArgs.get(\"defaults\"));\n          importer = new DataImporter(new InputSource(new StringReader(requestParams.dataConfig)), req.getCore()\n                  , dataSources, coreScopeSession);\n        } catch (RuntimeException e) {\n          rsp.add(\"exception\", DebugLogger.getStacktraceString(e));\n          importer = null;\n          return;\n        }\n      } else {\n        inform(req.getCore());\n      }\n      message = DataImporter.MSG.CONFIG_RELOADED;\n    }\n\n    // If importer is still null\n    if (importer == null) {\n      rsp.add(\"status\", DataImporter.MSG.NO_INIT);\n      return;\n    }\n\n    if (command != null && DataImporter.ABORT_CMD.equals(command)) {\n      importer.runCmd(requestParams, null);\n    } else if (importer.isBusy()) {\n      message = DataImporter.MSG.CMD_RUNNING;\n    } else if (command != null) {\n      if (DataImporter.FULL_IMPORT_CMD.equals(command)\n              || DataImporter.DELTA_IMPORT_CMD.equals(command) ||\n              IMPORT_CMD.equals(command)) {\n\n        UpdateRequestProcessorChain processorChain =\n                req.getCore().getUpdateProcessingChain(params.get(UpdateParams.UPDATE_CHAIN));\n        UpdateRequestProcessor processor = processorChain.createProcessor(req, rsp);\n        SolrResourceLoader loader = req.getCore().getResourceLoader();\n        SolrWriter sw = getSolrWriter(processor, loader, requestParams, req);\n\n        if (requestParams.debug) {\n          if (debugEnabled) {\n            // Synchronous request for the debug mode\n            importer.runCmd(requestParams, sw);\n            rsp.add(\"mode\", \"debug\");\n            rsp.add(\"documents\", debugDocuments);\n            if (sw.debugLogger != null)\n              rsp.add(\"verbose-output\", sw.debugLogger.output);\n            debugDocuments = null;\n          } else {\n            message = DataImporter.MSG.DEBUG_NOT_ENABLED;\n          }\n        } else {\n          // Asynchronous request for normal mode\n          if(requestParams.contentStream == null && !requestParams.syncMode){\n            importer.runAsync(requestParams, sw);\n          } else {\n              importer.runCmd(requestParams, sw);\n          }\n        }\n      } else if (DataImporter.RELOAD_CONF_CMD.equals(command)) {\n        importer = null;\n        inform(req.getCore());\n        message = DataImporter.MSG.CONFIG_RELOADED;\n      }\n    }\n    rsp.add(\"status\", importer.isBusy() ? \"busy\" : \"idle\");\n    rsp.add(\"importResponse\", message);\n    rsp.add(\"statusMessages\", importer.getStatusMessages());\n\n    RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp)\n          throws Exception {\n    rsp.setHttpCaching(false);\n    SolrParams params = req.getParams();\n    DataImporter.RequestParams requestParams = new DataImporter.RequestParams(getParamsMap(params));\n    String command = requestParams.command;\n    Iterable<ContentStream> streams = req.getContentStreams();\n    if(streams != null){\n      for (ContentStream stream : streams) {\n          requestParams.contentStream = stream;\n          break;\n      }\n    }\n    if (DataImporter.SHOW_CONF_CMD.equals(command)) {\n      // Modify incoming request params to add wt=raw\n      ModifiableSolrParams rawParams = new ModifiableSolrParams(req.getParams());\n      rawParams.set(CommonParams.WT, \"raw\");\n      req.setParams(rawParams);\n      String dataConfigFile = defaults.get(\"config\");\n      ContentStreamBase content = new ContentStreamBase.StringStream(SolrWriter\n              .getResourceAsString(req.getCore().getResourceLoader().openResource(\n              dataConfigFile)));\n      rsp.add(RawResponseWriter.CONTENT, content);\n      return;\n    }\n\n    rsp.add(\"initArgs\", initArgs);\n    String message = \"\";\n\n    if (command != null)\n      rsp.add(\"command\", command);\n\n    if (requestParams.debug && (importer == null || !importer.isBusy())) {\n      // Reload the data-config.xml\n      importer = null;\n      if (requestParams.dataConfig != null) {\n        try {\n          processConfiguration((NamedList) initArgs.get(\"defaults\"));\n          importer = new DataImporter(new InputSource(new StringReader(requestParams.dataConfig)), req.getCore()\n                  , dataSources, coreScopeSession);\n        } catch (RuntimeException e) {\n          rsp.add(\"exception\", DebugLogger.getStacktraceString(e));\n          importer = null;\n          return;\n        }\n      } else {\n        inform(req.getCore());\n      }\n      message = DataImporter.MSG.CONFIG_RELOADED;\n    }\n\n    // If importer is still null\n    if (importer == null) {\n      rsp.add(\"status\", DataImporter.MSG.NO_INIT);\n      return;\n    }\n\n    if (command != null && DataImporter.ABORT_CMD.equals(command)) {\n      importer.runCmd(requestParams, null);\n    } else if (importer.isBusy()) {\n      message = DataImporter.MSG.CMD_RUNNING;\n    } else if (command != null) {\n      if (DataImporter.FULL_IMPORT_CMD.equals(command)\n              || DataImporter.DELTA_IMPORT_CMD.equals(command) ||\n              IMPORT_CMD.equals(command)) {\n\n        UpdateRequestProcessorChain processorChain =\n                req.getCore().getUpdateProcessingChain(params.get(UpdateParams.UPDATE_PROCESSOR));\n        UpdateRequestProcessor processor = processorChain.createProcessor(req, rsp);\n        SolrResourceLoader loader = req.getCore().getResourceLoader();\n        SolrWriter sw = getSolrWriter(processor, loader, requestParams, req);\n\n        if (requestParams.debug) {\n          if (debugEnabled) {\n            // Synchronous request for the debug mode\n            importer.runCmd(requestParams, sw);\n            rsp.add(\"mode\", \"debug\");\n            rsp.add(\"documents\", debugDocuments);\n            if (sw.debugLogger != null)\n              rsp.add(\"verbose-output\", sw.debugLogger.output);\n            debugDocuments = null;\n          } else {\n            message = DataImporter.MSG.DEBUG_NOT_ENABLED;\n          }\n        } else {\n          // Asynchronous request for normal mode\n          if(requestParams.contentStream == null && !requestParams.syncMode){\n            importer.runAsync(requestParams, sw);\n          } else {\n              importer.runCmd(requestParams, sw);\n          }\n        }\n      } else if (DataImporter.RELOAD_CONF_CMD.equals(command)) {\n        importer = null;\n        inform(req.getCore());\n        message = DataImporter.MSG.CONFIG_RELOADED;\n      }\n    }\n    rsp.add(\"status\", importer.isBusy() ? \"busy\" : \"idle\");\n    rsp.add(\"importResponse\", message);\n    rsp.add(\"statusMessages\", importer.getStatusMessages());\n\n    RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImportHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImportHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp)\n          throws Exception {\n    rsp.setHttpCaching(false);\n    SolrParams params = req.getParams();\n    DataImporter.RequestParams requestParams = new DataImporter.RequestParams(getParamsMap(params));\n    String command = requestParams.command;\n    Iterable<ContentStream> streams = req.getContentStreams();\n    if(streams != null){\n      for (ContentStream stream : streams) {\n          requestParams.contentStream = stream;\n          break;\n      }\n    }\n    if (DataImporter.SHOW_CONF_CMD.equals(command)) {\n      // Modify incoming request params to add wt=raw\n      ModifiableSolrParams rawParams = new ModifiableSolrParams(req.getParams());\n      rawParams.set(CommonParams.WT, \"raw\");\n      req.setParams(rawParams);\n      String dataConfigFile = defaults.get(\"config\");\n      ContentStreamBase content = new ContentStreamBase.StringStream(SolrWriter\n              .getResourceAsString(req.getCore().getResourceLoader().openResource(\n              dataConfigFile)));\n      rsp.add(RawResponseWriter.CONTENT, content);\n      return;\n    }\n\n    rsp.add(\"initArgs\", initArgs);\n    String message = \"\";\n\n    if (command != null)\n      rsp.add(\"command\", command);\n\n    if (requestParams.debug && (importer == null || !importer.isBusy())) {\n      // Reload the data-config.xml\n      importer = null;\n      if (requestParams.dataConfig != null) {\n        try {\n          processConfiguration((NamedList) initArgs.get(\"defaults\"));\n          importer = new DataImporter(new InputSource(new StringReader(requestParams.dataConfig)), req.getCore()\n                  , dataSources, coreScopeSession);\n        } catch (RuntimeException e) {\n          rsp.add(\"exception\", DebugLogger.getStacktraceString(e));\n          importer = null;\n          return;\n        }\n      } else {\n        inform(req.getCore());\n      }\n      message = DataImporter.MSG.CONFIG_RELOADED;\n    }\n\n    // If importer is still null\n    if (importer == null) {\n      rsp.add(\"status\", DataImporter.MSG.NO_INIT);\n      return;\n    }\n\n    if (command != null && DataImporter.ABORT_CMD.equals(command)) {\n      importer.runCmd(requestParams, null);\n    } else if (importer.isBusy()) {\n      message = DataImporter.MSG.CMD_RUNNING;\n    } else if (command != null) {\n      if (DataImporter.FULL_IMPORT_CMD.equals(command)\n              || DataImporter.DELTA_IMPORT_CMD.equals(command) ||\n              IMPORT_CMD.equals(command)) {\n\n        UpdateRequestProcessorChain processorChain =\n                req.getCore().getUpdateProcessingChain(params.get(UpdateParams.UPDATE_CHAIN));\n        UpdateRequestProcessor processor = processorChain.createProcessor(req, rsp);\n        SolrResourceLoader loader = req.getCore().getResourceLoader();\n        SolrWriter sw = getSolrWriter(processor, loader, requestParams, req);\n\n        if (requestParams.debug) {\n          if (debugEnabled) {\n            // Synchronous request for the debug mode\n            importer.runCmd(requestParams, sw);\n            rsp.add(\"mode\", \"debug\");\n            rsp.add(\"documents\", debugDocuments);\n            if (sw.debugLogger != null)\n              rsp.add(\"verbose-output\", sw.debugLogger.output);\n            debugDocuments = null;\n          } else {\n            message = DataImporter.MSG.DEBUG_NOT_ENABLED;\n          }\n        } else {\n          // Asynchronous request for normal mode\n          if(requestParams.contentStream == null && !requestParams.syncMode){\n            importer.runAsync(requestParams, sw);\n          } else {\n              importer.runCmd(requestParams, sw);\n          }\n        }\n      } else if (DataImporter.RELOAD_CONF_CMD.equals(command)) {\n        importer = null;\n        inform(req.getCore());\n        message = DataImporter.MSG.CONFIG_RELOADED;\n      }\n    }\n    rsp.add(\"status\", importer.isBusy() ? \"busy\" : \"idle\");\n    rsp.add(\"importResponse\", message);\n    rsp.add(\"statusMessages\", importer.getStatusMessages());\n\n    RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp)\n          throws Exception {\n    rsp.setHttpCaching(false);\n    SolrParams params = req.getParams();\n    DataImporter.RequestParams requestParams = new DataImporter.RequestParams(getParamsMap(params));\n    String command = requestParams.command;\n    Iterable<ContentStream> streams = req.getContentStreams();\n    if(streams != null){\n      for (ContentStream stream : streams) {\n          requestParams.contentStream = stream;\n          break;\n      }\n    }\n    if (DataImporter.SHOW_CONF_CMD.equals(command)) {\n      // Modify incoming request params to add wt=raw\n      ModifiableSolrParams rawParams = new ModifiableSolrParams(req.getParams());\n      rawParams.set(CommonParams.WT, \"raw\");\n      req.setParams(rawParams);\n      String dataConfigFile = defaults.get(\"config\");\n      ContentStreamBase content = new ContentStreamBase.StringStream(SolrWriter\n              .getResourceAsString(req.getCore().getResourceLoader().openResource(\n              dataConfigFile)));\n      rsp.add(RawResponseWriter.CONTENT, content);\n      return;\n    }\n\n    rsp.add(\"initArgs\", initArgs);\n    String message = \"\";\n\n    if (command != null)\n      rsp.add(\"command\", command);\n\n    if (requestParams.debug && (importer == null || !importer.isBusy())) {\n      // Reload the data-config.xml\n      importer = null;\n      if (requestParams.dataConfig != null) {\n        try {\n          processConfiguration((NamedList) initArgs.get(\"defaults\"));\n          importer = new DataImporter(new InputSource(new StringReader(requestParams.dataConfig)), req.getCore()\n                  , dataSources, coreScopeSession);\n        } catch (RuntimeException e) {\n          rsp.add(\"exception\", DebugLogger.getStacktraceString(e));\n          importer = null;\n          return;\n        }\n      } else {\n        inform(req.getCore());\n      }\n      message = DataImporter.MSG.CONFIG_RELOADED;\n    }\n\n    // If importer is still null\n    if (importer == null) {\n      rsp.add(\"status\", DataImporter.MSG.NO_INIT);\n      return;\n    }\n\n    if (command != null && DataImporter.ABORT_CMD.equals(command)) {\n      importer.runCmd(requestParams, null);\n    } else if (importer.isBusy()) {\n      message = DataImporter.MSG.CMD_RUNNING;\n    } else if (command != null) {\n      if (DataImporter.FULL_IMPORT_CMD.equals(command)\n              || DataImporter.DELTA_IMPORT_CMD.equals(command) ||\n              IMPORT_CMD.equals(command)) {\n\n        UpdateRequestProcessorChain processorChain =\n                req.getCore().getUpdateProcessingChain(params.get(UpdateParams.UPDATE_CHAIN));\n        UpdateRequestProcessor processor = processorChain.createProcessor(req, rsp);\n        SolrResourceLoader loader = req.getCore().getResourceLoader();\n        SolrWriter sw = getSolrWriter(processor, loader, requestParams, req);\n\n        if (requestParams.debug) {\n          if (debugEnabled) {\n            // Synchronous request for the debug mode\n            importer.runCmd(requestParams, sw);\n            rsp.add(\"mode\", \"debug\");\n            rsp.add(\"documents\", debugDocuments);\n            if (sw.debugLogger != null)\n              rsp.add(\"verbose-output\", sw.debugLogger.output);\n            debugDocuments = null;\n          } else {\n            message = DataImporter.MSG.DEBUG_NOT_ENABLED;\n          }\n        } else {\n          // Asynchronous request for normal mode\n          if(requestParams.contentStream == null && !requestParams.syncMode){\n            importer.runAsync(requestParams, sw);\n          } else {\n              importer.runCmd(requestParams, sw);\n          }\n        }\n      } else if (DataImporter.RELOAD_CONF_CMD.equals(command)) {\n        importer = null;\n        inform(req.getCore());\n        message = DataImporter.MSG.CONFIG_RELOADED;\n      }\n    }\n    rsp.add(\"status\", importer.isBusy() ? \"busy\" : \"idle\");\n    rsp.add(\"importResponse\", message);\n    rsp.add(\"statusMessages\", importer.getStatusMessages());\n\n    RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImportHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImportHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp)\n          throws Exception {\n    rsp.setHttpCaching(false);\n    SolrParams params = req.getParams();\n    DataImporter.RequestParams requestParams = new DataImporter.RequestParams(getParamsMap(params));\n    String command = requestParams.command;\n    Iterable<ContentStream> streams = req.getContentStreams();\n    if(streams != null){\n      for (ContentStream stream : streams) {\n          requestParams.contentStream = stream;\n          break;\n      }\n    }\n    if (DataImporter.SHOW_CONF_CMD.equals(command)) {\n      // Modify incoming request params to add wt=raw\n      ModifiableSolrParams rawParams = new ModifiableSolrParams(req.getParams());\n      rawParams.set(CommonParams.WT, \"raw\");\n      req.setParams(rawParams);\n      String dataConfigFile = defaults.get(\"config\");\n      ContentStreamBase content = new ContentStreamBase.StringStream(SolrWriter\n              .getResourceAsString(req.getCore().getResourceLoader().openResource(\n              dataConfigFile)));\n      rsp.add(RawResponseWriter.CONTENT, content);\n      return;\n    }\n\n    rsp.add(\"initArgs\", initArgs);\n    String message = \"\";\n\n    if (command != null)\n      rsp.add(\"command\", command);\n\n    if (requestParams.debug && (importer == null || !importer.isBusy())) {\n      // Reload the data-config.xml\n      importer = null;\n      if (requestParams.dataConfig != null) {\n        try {\n          processConfiguration((NamedList) initArgs.get(\"defaults\"));\n          importer = new DataImporter(new InputSource(new StringReader(requestParams.dataConfig)), req.getCore()\n                  , dataSources, coreScopeSession);\n        } catch (RuntimeException e) {\n          rsp.add(\"exception\", DebugLogger.getStacktraceString(e));\n          importer = null;\n          return;\n        }\n      } else {\n        inform(req.getCore());\n      }\n      message = DataImporter.MSG.CONFIG_RELOADED;\n    }\n\n    // If importer is still null\n    if (importer == null) {\n      rsp.add(\"status\", DataImporter.MSG.NO_INIT);\n      return;\n    }\n\n    if (command != null && DataImporter.ABORT_CMD.equals(command)) {\n      importer.runCmd(requestParams, null);\n    } else if (importer.isBusy()) {\n      message = DataImporter.MSG.CMD_RUNNING;\n    } else if (command != null) {\n      if (DataImporter.FULL_IMPORT_CMD.equals(command)\n              || DataImporter.DELTA_IMPORT_CMD.equals(command) ||\n              IMPORT_CMD.equals(command)) {\n\n        UpdateRequestProcessorChain processorChain =\n                req.getCore().getUpdateProcessingChain(params.get(UpdateParams.UPDATE_CHAIN));\n        UpdateRequestProcessor processor = processorChain.createProcessor(req, rsp);\n        SolrResourceLoader loader = req.getCore().getResourceLoader();\n        SolrWriter sw = getSolrWriter(processor, loader, requestParams, req);\n\n        if (requestParams.debug) {\n          if (debugEnabled) {\n            // Synchronous request for the debug mode\n            importer.runCmd(requestParams, sw);\n            rsp.add(\"mode\", \"debug\");\n            rsp.add(\"documents\", debugDocuments);\n            if (sw.debugLogger != null)\n              rsp.add(\"verbose-output\", sw.debugLogger.output);\n            debugDocuments = null;\n          } else {\n            message = DataImporter.MSG.DEBUG_NOT_ENABLED;\n          }\n        } else {\n          // Asynchronous request for normal mode\n          if(requestParams.contentStream == null && !requestParams.syncMode){\n            importer.runAsync(requestParams, sw);\n          } else {\n              importer.runCmd(requestParams, sw);\n          }\n        }\n      } else if (DataImporter.RELOAD_CONF_CMD.equals(command)) {\n        importer = null;\n        inform(req.getCore());\n        message = DataImporter.MSG.CONFIG_RELOADED;\n      }\n    }\n    rsp.add(\"status\", importer.isBusy() ? \"busy\" : \"idle\");\n    rsp.add(\"importResponse\", message);\n    rsp.add(\"statusMessages\", importer.getStatusMessages());\n\n    RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp)\n          throws Exception {\n    rsp.setHttpCaching(false);\n    SolrParams params = req.getParams();\n    DataImporter.RequestParams requestParams = new DataImporter.RequestParams(getParamsMap(params));\n    String command = requestParams.command;\n    Iterable<ContentStream> streams = req.getContentStreams();\n    if(streams != null){\n      for (ContentStream stream : streams) {\n          requestParams.contentStream = stream;\n          break;\n      }\n    }\n    if (DataImporter.SHOW_CONF_CMD.equals(command)) {\n      // Modify incoming request params to add wt=raw\n      ModifiableSolrParams rawParams = new ModifiableSolrParams(req.getParams());\n      rawParams.set(CommonParams.WT, \"raw\");\n      req.setParams(rawParams);\n      String dataConfigFile = defaults.get(\"config\");\n      ContentStreamBase content = new ContentStreamBase.StringStream(SolrWriter\n              .getResourceAsString(req.getCore().getResourceLoader().openResource(\n              dataConfigFile)));\n      rsp.add(RawResponseWriter.CONTENT, content);\n      return;\n    }\n\n    rsp.add(\"initArgs\", initArgs);\n    String message = \"\";\n\n    if (command != null)\n      rsp.add(\"command\", command);\n\n    if (requestParams.debug && (importer == null || !importer.isBusy())) {\n      // Reload the data-config.xml\n      importer = null;\n      if (requestParams.dataConfig != null) {\n        try {\n          processConfiguration((NamedList) initArgs.get(\"defaults\"));\n          importer = new DataImporter(new InputSource(new StringReader(requestParams.dataConfig)), req.getCore()\n                  , dataSources, coreScopeSession);\n        } catch (RuntimeException e) {\n          rsp.add(\"exception\", DebugLogger.getStacktraceString(e));\n          importer = null;\n          return;\n        }\n      } else {\n        inform(req.getCore());\n      }\n      message = DataImporter.MSG.CONFIG_RELOADED;\n    }\n\n    // If importer is still null\n    if (importer == null) {\n      rsp.add(\"status\", DataImporter.MSG.NO_INIT);\n      return;\n    }\n\n    if (command != null && DataImporter.ABORT_CMD.equals(command)) {\n      importer.runCmd(requestParams, null);\n    } else if (importer.isBusy()) {\n      message = DataImporter.MSG.CMD_RUNNING;\n    } else if (command != null) {\n      if (DataImporter.FULL_IMPORT_CMD.equals(command)\n              || DataImporter.DELTA_IMPORT_CMD.equals(command) ||\n              IMPORT_CMD.equals(command)) {\n\n        UpdateRequestProcessorChain processorChain =\n                req.getCore().getUpdateProcessingChain(params.get(UpdateParams.UPDATE_CHAIN));\n        UpdateRequestProcessor processor = processorChain.createProcessor(req, rsp);\n        SolrResourceLoader loader = req.getCore().getResourceLoader();\n        SolrWriter sw = getSolrWriter(processor, loader, requestParams, req);\n\n        if (requestParams.debug) {\n          if (debugEnabled) {\n            // Synchronous request for the debug mode\n            importer.runCmd(requestParams, sw);\n            rsp.add(\"mode\", \"debug\");\n            rsp.add(\"documents\", debugDocuments);\n            if (sw.debugLogger != null)\n              rsp.add(\"verbose-output\", sw.debugLogger.output);\n            debugDocuments = null;\n          } else {\n            message = DataImporter.MSG.DEBUG_NOT_ENABLED;\n          }\n        } else {\n          // Asynchronous request for normal mode\n          if(requestParams.contentStream == null && !requestParams.syncMode){\n            importer.runAsync(requestParams, sw);\n          } else {\n              importer.runCmd(requestParams, sw);\n          }\n        }\n      } else if (DataImporter.RELOAD_CONF_CMD.equals(command)) {\n        importer = null;\n        inform(req.getCore());\n        message = DataImporter.MSG.CONFIG_RELOADED;\n      }\n    }\n    rsp.add(\"status\", importer.isBusy() ? \"busy\" : \"idle\");\n    rsp.add(\"importResponse\", message);\n    rsp.add(\"statusMessages\", importer.getStatusMessages());\n\n    RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["1da8d55113b689b06716246649de6f62430f15c0","5ae62bcdfd4a0689a745ab1d38c6bd1c7c390cfa"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c26f00b574427b55127e869b935845554afde1fa":["64cae353de680169c133e0a9f4debee071ad3241","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["d619839baa8ce5503e496b94a9e42ad6f079293f","64cae353de680169c133e0a9f4debee071ad3241"],"d493718201f0d0c54c773fb323d87bbd2fbffe41":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","64cae353de680169c133e0a9f4debee071ad3241"],"64cae353de680169c133e0a9f4debee071ad3241":["b24326411db492f92ea49f6fb947c90bc73cf19e"],"b24326411db492f92ea49f6fb947c90bc73cf19e":["5ae62bcdfd4a0689a745ab1d38c6bd1c7c390cfa"],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c":["1da8d55113b689b06716246649de6f62430f15c0","5ae62bcdfd4a0689a745ab1d38c6bd1c7c390cfa"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c","b24326411db492f92ea49f6fb947c90bc73cf19e"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a3776dccca01c11e7046323cfad46a3b4a471233","64cae353de680169c133e0a9f4debee071ad3241"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["70ad682703b8585f5d0a637efec044d57ec05efb","b24326411db492f92ea49f6fb947c90bc73cf19e"],"a3776dccca01c11e7046323cfad46a3b4a471233":["b24326411db492f92ea49f6fb947c90bc73cf19e","64cae353de680169c133e0a9f4debee071ad3241"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"5ae62bcdfd4a0689a745ab1d38c6bd1c7c390cfa":["1da8d55113b689b06716246649de6f62430f15c0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":["d619839baa8ce5503e496b94a9e42ad6f079293f"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"d493718201f0d0c54c773fb323d87bbd2fbffe41":[],"64cae353de680169c133e0a9f4debee071ad3241":["c26f00b574427b55127e869b935845554afde1fa","135621f3a0670a9394eb563224a3b76cc4dddc0f","d493718201f0d0c54c773fb323d87bbd2fbffe41","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","a3776dccca01c11e7046323cfad46a3b4a471233"],"1da8d55113b689b06716246649de6f62430f15c0":["70ad682703b8585f5d0a637efec044d57ec05efb","ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c","5ae62bcdfd4a0689a745ab1d38c6bd1c7c390cfa"],"b24326411db492f92ea49f6fb947c90bc73cf19e":["64cae353de680169c133e0a9f4debee071ad3241","c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","a3776dccca01c11e7046323cfad46a3b4a471233"],"ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["d493718201f0d0c54c773fb323d87bbd2fbffe41"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["c26f00b574427b55127e869b935845554afde1fa"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"a3776dccca01c11e7046323cfad46a3b4a471233":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"5ae62bcdfd4a0689a745ab1d38c6bd1c7c390cfa":["70ad682703b8585f5d0a637efec044d57ec05efb","b24326411db492f92ea49f6fb947c90bc73cf19e","ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["135621f3a0670a9394eb563224a3b76cc4dddc0f","d493718201f0d0c54c773fb323d87bbd2fbffe41","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}