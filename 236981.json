{"path":"modules/spatial/base/src/java/org/apache/lucene/spatial/base/distance/DistanceUtils#distSquaredCartesian(double[],double[]).mjava","commits":[{"id":"d0df2b6e5bc4da595d109453e90eff8dc0ffeb8a","date":1329809096,"type":1,"author":"Ryan McKinley","isMerge":false,"pathNew":"modules/spatial/base/src/java/org/apache/lucene/spatial/base/distance/DistanceUtils#distSquaredCartesian(double[],double[]).mjava","pathOld":"modules/spatial/strategy/src/java/org/apache/lucene/spatial/base/distance/DistanceUtils#distSquaredCartesian(double[],double[]).mjava","sourceNew":"  /**\n   * The square of the cartesian Distance.  Not really a distance, but useful if all that matters is\n   * comparing the result to another one.\n   *\n   * @param vec1 The first point\n   * @param vec2 The second point\n   * @return The squared cartesian distance\n   */\n  public static double distSquaredCartesian(double[] vec1, double[] vec2) {\n    double result = 0;\n    for (int i = 0; i < vec1.length; i++) {\n      double v = vec1[i] - vec2[i];\n      result += v * v;\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * The square of the cartesian Distance.  Not really a distance, but useful if all that matters is\n   * comparing the result to another one.\n   *\n   * @param vec1 The first point\n   * @param vec2 The second point\n   * @return The squared cartesian distance\n   */\n  public static double distSquaredCartesian(double[] vec1, double[] vec2) {\n    double result = 0;\n    for (int i = 0; i < vec1.length; i++) {\n      double v = vec1[i] - vec2[i];\n      result += v * v;\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"25738042b3fdefd34091f8a386e2ce94d892a505","date":1330492659,"type":4,"author":"Ryan McKinley","isMerge":false,"pathNew":"/dev/null","pathOld":"modules/spatial/base/src/java/org/apache/lucene/spatial/base/distance/DistanceUtils#distSquaredCartesian(double[],double[]).mjava","sourceNew":null,"sourceOld":"  /**\n   * The square of the cartesian Distance.  Not really a distance, but useful if all that matters is\n   * comparing the result to another one.\n   *\n   * @param vec1 The first point\n   * @param vec2 The second point\n   * @return The squared cartesian distance\n   */\n  public static double distSquaredCartesian(double[] vec1, double[] vec2) {\n    double result = 0;\n    for (int i = 0; i < vec1.length; i++) {\n      double v = vec1[i] - vec2[i];\n      result += v * v;\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"25738042b3fdefd34091f8a386e2ce94d892a505":["d0df2b6e5bc4da595d109453e90eff8dc0ffeb8a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d0df2b6e5bc4da595d109453e90eff8dc0ffeb8a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817","d0df2b6e5bc4da595d109453e90eff8dc0ffeb8a"],"25738042b3fdefd34091f8a386e2ce94d892a505":[],"d0df2b6e5bc4da595d109453e90eff8dc0ffeb8a":["25738042b3fdefd34091f8a386e2ce94d892a505"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["25738042b3fdefd34091f8a386e2ce94d892a505","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}