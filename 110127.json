{"path":"lucene/src/test/org/apache/lucene/index/codecs/intblock/TestIntBlockCodec#testSimpleIntBlocks().mjava","commits":[{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/codecs/intblock/TestIntBlockCodec#testSimpleIntBlocks().mjava","pathOld":"/dev/null","sourceNew":"  public void testSimpleIntBlocks() throws Exception {\n    Directory dir = new MockRAMDirectory();\n\n    IntIndexOutput out = new SimpleIntBlockIndexOutput(dir, \"test\", 128);\n    for(int i=0;i<11777;i++) {\n      out.write(i);\n    }\n    out.close();\n\n    IntIndexInput in = new SimpleIntBlockIndexInput(dir, \"test\", 128);\n    IntIndexInput.Reader r = in.reader();\n\n    for(int i=0;i<11777;i++) {\n      assertEquals(i, r.next());\n    }\n    in.close();\n    \n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"108e81824177a1a9f2507addadb8894e1cdf9afc","date":1280934266,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/codecs/intblock/TestIntBlockCodec#testSimpleIntBlocks().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/codecs/intblock/TestIntBlockCodec#testSimpleIntBlocks().mjava","sourceNew":"  public void testSimpleIntBlocks() throws Exception {\n    Directory dir = new MockRAMDirectory();\n\n    IntIndexOutput out = new MockFixedIntBlockIndexOutput(dir, \"test\", 128);\n    for(int i=0;i<11777;i++) {\n      out.write(i);\n    }\n    out.close();\n\n    IntIndexInput in = new MockFixedIntBlockIndexInput(dir, \"test\", 128);\n    IntIndexInput.Reader r = in.reader();\n\n    for(int i=0;i<11777;i++) {\n      assertEquals(i, r.next());\n    }\n    in.close();\n    \n    dir.close();\n  }\n\n","sourceOld":"  public void testSimpleIntBlocks() throws Exception {\n    Directory dir = new MockRAMDirectory();\n\n    IntIndexOutput out = new SimpleIntBlockIndexOutput(dir, \"test\", 128);\n    for(int i=0;i<11777;i++) {\n      out.write(i);\n    }\n    out.close();\n\n    IntIndexInput in = new SimpleIntBlockIndexInput(dir, \"test\", 128);\n    IntIndexInput.Reader r = in.reader();\n\n    for(int i=0;i<11777;i++) {\n      assertEquals(i, r.next());\n    }\n    in.close();\n    \n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"03b152509ee3fa8cf52abb8a4a0cfe7287c59fc8","date":1281277545,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/codecs/intblock/TestIntBlockCodec#testSimpleIntBlocks().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/codecs/intblock/TestIntBlockCodec#testSimpleIntBlocks().mjava","sourceNew":"  public void testSimpleIntBlocks() throws Exception {\n    Directory dir = new MockRAMDirectory();\n\n    IntStreamFactory f = new MockFixedIntBlockCodec(128).getIntFactory();\n\n    IntIndexOutput out = f.createOutput(dir, \"test\");\n    for(int i=0;i<11777;i++) {\n      out.write(i);\n    }\n    out.close();\n\n    IntIndexInput in = f.openInput(dir, \"test\");\n    IntIndexInput.Reader r = in.reader();\n\n    for(int i=0;i<11777;i++) {\n      assertEquals(i, r.next());\n    }\n    in.close();\n    \n    dir.close();\n  }\n\n","sourceOld":"  public void testSimpleIntBlocks() throws Exception {\n    Directory dir = new MockRAMDirectory();\n\n    IntIndexOutput out = new MockFixedIntBlockIndexOutput(dir, \"test\", 128);\n    for(int i=0;i<11777;i++) {\n      out.write(i);\n    }\n    out.close();\n\n    IntIndexInput in = new MockFixedIntBlockIndexInput(dir, \"test\", 128);\n    IntIndexInput.Reader r = in.reader();\n\n    for(int i=0;i<11777;i++) {\n      assertEquals(i, r.next());\n    }\n    in.close();\n    \n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/codecs/intblock/TestIntBlockCodec#testSimpleIntBlocks().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/codecs/intblock/TestIntBlockCodec#testSimpleIntBlocks().mjava","sourceNew":"  public void testSimpleIntBlocks() throws Exception {\n    Directory dir = newDirectory(newRandom());\n\n    IntStreamFactory f = new MockFixedIntBlockCodec(128).getIntFactory();\n\n    IntIndexOutput out = f.createOutput(dir, \"test\");\n    for(int i=0;i<11777;i++) {\n      out.write(i);\n    }\n    out.close();\n\n    IntIndexInput in = f.openInput(dir, \"test\");\n    IntIndexInput.Reader r = in.reader();\n\n    for(int i=0;i<11777;i++) {\n      assertEquals(i, r.next());\n    }\n    in.close();\n    \n    dir.close();\n  }\n\n","sourceOld":"  public void testSimpleIntBlocks() throws Exception {\n    Directory dir = new MockRAMDirectory();\n\n    IntStreamFactory f = new MockFixedIntBlockCodec(128).getIntFactory();\n\n    IntIndexOutput out = f.createOutput(dir, \"test\");\n    for(int i=0;i<11777;i++) {\n      out.write(i);\n    }\n    out.close();\n\n    IntIndexInput in = f.openInput(dir, \"test\");\n    IntIndexInput.Reader r = in.reader();\n\n    for(int i=0;i<11777;i++) {\n      assertEquals(i, r.next());\n    }\n    in.close();\n    \n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/codecs/intblock/TestIntBlockCodec#testSimpleIntBlocks().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/codecs/intblock/TestIntBlockCodec#testSimpleIntBlocks().mjava","sourceNew":"  public void testSimpleIntBlocks() throws Exception {\n    Directory dir = newDirectory();\n\n    IntStreamFactory f = new MockFixedIntBlockCodec(128).getIntFactory();\n\n    IntIndexOutput out = f.createOutput(dir, \"test\");\n    for(int i=0;i<11777;i++) {\n      out.write(i);\n    }\n    out.close();\n\n    IntIndexInput in = f.openInput(dir, \"test\");\n    IntIndexInput.Reader r = in.reader();\n\n    for(int i=0;i<11777;i++) {\n      assertEquals(i, r.next());\n    }\n    in.close();\n    \n    dir.close();\n  }\n\n","sourceOld":"  public void testSimpleIntBlocks() throws Exception {\n    Directory dir = newDirectory(newRandom());\n\n    IntStreamFactory f = new MockFixedIntBlockCodec(128).getIntFactory();\n\n    IntIndexOutput out = f.createOutput(dir, \"test\");\n    for(int i=0;i<11777;i++) {\n      out.write(i);\n    }\n    out.close();\n\n    IntIndexInput in = f.openInput(dir, \"test\");\n    IntIndexInput.Reader r = in.reader();\n\n    for(int i=0;i<11777;i++) {\n      assertEquals(i, r.next());\n    }\n    in.close();\n    \n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/codecs/intblock/TestIntBlockCodec#testSimpleIntBlocks().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/codecs/intblock/TestIntBlockCodec#testSimpleIntBlocks().mjava","sourceNew":"  public void testSimpleIntBlocks() throws Exception {\n    Directory dir = newDirectory();\n\n    IntStreamFactory f = new MockFixedIntBlockCodec(128).getIntFactory();\n\n    IntIndexOutput out = f.createOutput(dir, \"test\");\n    for(int i=0;i<11777;i++) {\n      out.write(i);\n    }\n    out.close();\n\n    IntIndexInput in = f.openInput(dir, \"test\");\n    IntIndexInput.Reader r = in.reader();\n\n    for(int i=0;i<11777;i++) {\n      assertEquals(i, r.next());\n    }\n    in.close();\n    \n    dir.close();\n  }\n\n","sourceOld":"  public void testSimpleIntBlocks() throws Exception {\n    Directory dir = new MockRAMDirectory();\n\n    IntIndexOutput out = new SimpleIntBlockIndexOutput(dir, \"test\", 128);\n    for(int i=0;i<11777;i++) {\n      out.write(i);\n    }\n    out.close();\n\n    IntIndexInput in = new SimpleIntBlockIndexInput(dir, \"test\", 128);\n    IntIndexInput.Reader r = in.reader();\n\n    for(int i=0;i<11777;i++) {\n      assertEquals(i, r.next());\n    }\n    in.close();\n    \n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"639c36565ce03aed5b0fce7c9e4448e53a1f7efd","date":1308580104,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/codecs/intblock/TestIntBlockCodec#testSimpleIntBlocks().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/codecs/intblock/TestIntBlockCodec#testSimpleIntBlocks().mjava","sourceNew":"  public void testSimpleIntBlocks() throws Exception {\n    Directory dir = newDirectory();\n\n    IntStreamFactory f = new MockFixedIntBlockCodec(128).getIntFactory();\n\n    IntIndexOutput out = f.createOutput(dir, \"test\");\n    for(int i=0;i<11777;i++) {\n      out.write(i);\n    }\n    out.close();\n\n    IntIndexInput in = f.openInput(dir, \"test\", IOContext.DEFAULT);\n    IntIndexInput.Reader r = in.reader();\n\n    for(int i=0;i<11777;i++) {\n      assertEquals(i, r.next());\n    }\n    in.close();\n    \n    dir.close();\n  }\n\n","sourceOld":"  public void testSimpleIntBlocks() throws Exception {\n    Directory dir = newDirectory();\n\n    IntStreamFactory f = new MockFixedIntBlockCodec(128).getIntFactory();\n\n    IntIndexOutput out = f.createOutput(dir, \"test\");\n    for(int i=0;i<11777;i++) {\n      out.write(i);\n    }\n    out.close();\n\n    IntIndexInput in = f.openInput(dir, \"test\");\n    IntIndexInput.Reader r = in.reader();\n\n    for(int i=0;i<11777;i++) {\n      assertEquals(i, r.next());\n    }\n    in.close();\n    \n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6f9be74ca7baaef11857ad002cad40419979516","date":1309449808,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/codecs/intblock/TestIntBlockCodec#testSimpleIntBlocks().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/codecs/intblock/TestIntBlockCodec#testSimpleIntBlocks().mjava","sourceNew":"  public void testSimpleIntBlocks() throws Exception {\n    Directory dir = newDirectory();\n\n    IntStreamFactory f = new MockFixedIntBlockCodec(128).getIntFactory();\n\n    IntIndexOutput out = f.createOutput(dir, \"test\", newIOContext(random));\n    for(int i=0;i<11777;i++) {\n      out.write(i);\n    }\n    out.close();\n\n    IntIndexInput in = f.openInput(dir, \"test\", newIOContext(random));\n    IntIndexInput.Reader r = in.reader();\n\n    for(int i=0;i<11777;i++) {\n      assertEquals(i, r.next());\n    }\n    in.close();\n    \n    dir.close();\n  }\n\n","sourceOld":"  public void testSimpleIntBlocks() throws Exception {\n    Directory dir = newDirectory();\n\n    IntStreamFactory f = new MockFixedIntBlockCodec(128).getIntFactory();\n\n    IntIndexOutput out = f.createOutput(dir, \"test\");\n    for(int i=0;i<11777;i++) {\n      out.write(i);\n    }\n    out.close();\n\n    IntIndexInput in = f.openInput(dir, \"test\", IOContext.DEFAULT);\n    IntIndexInput.Reader r = in.reader();\n\n    for(int i=0;i<11777;i++) {\n      assertEquals(i, r.next());\n    }\n    in.close();\n    \n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ddc4c914be86e34b54f70023f45a60fa7f04e929","date":1310115160,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/codecs/intblock/TestIntBlockCodec#testSimpleIntBlocks().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/codecs/intblock/TestIntBlockCodec#testSimpleIntBlocks().mjava","sourceNew":"  public void testSimpleIntBlocks() throws Exception {\n    Directory dir = newDirectory();\n\n    IntStreamFactory f = new MockFixedIntBlockCodec(128).getIntFactory();\n\n    IntIndexOutput out = f.createOutput(dir, \"test\", newIOContext(random));\n    for(int i=0;i<11777;i++) {\n      out.write(i);\n    }\n    out.close();\n\n    IntIndexInput in = f.openInput(dir, \"test\", newIOContext(random));\n    IntIndexInput.Reader r = in.reader();\n\n    for(int i=0;i<11777;i++) {\n      assertEquals(i, r.next());\n    }\n    in.close();\n    \n    dir.close();\n  }\n\n","sourceOld":"  public void testSimpleIntBlocks() throws Exception {\n    Directory dir = newDirectory();\n\n    IntStreamFactory f = new MockFixedIntBlockCodec(128).getIntFactory();\n\n    IntIndexOutput out = f.createOutput(dir, \"test\");\n    for(int i=0;i<11777;i++) {\n      out.write(i);\n    }\n    out.close();\n\n    IntIndexInput in = f.openInput(dir, \"test\");\n    IntIndexInput.Reader r = in.reader();\n\n    for(int i=0;i<11777;i++) {\n      assertEquals(i, r.next());\n    }\n    in.close();\n    \n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5d004d0e0b3f65bb40da76d476d659d7888270e8","date":1310158940,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/codecs/intblock/TestIntBlockCodec#testSimpleIntBlocks().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/codecs/intblock/TestIntBlockCodec#testSimpleIntBlocks().mjava","sourceNew":"  public void testSimpleIntBlocks() throws Exception {\n    Directory dir = newDirectory();\n\n    IntStreamFactory f = new MockFixedIntBlockCodec(128).getIntFactory();\n\n    IntIndexOutput out = f.createOutput(dir, \"test\", newIOContext(random));\n    for(int i=0;i<11777;i++) {\n      out.write(i);\n    }\n    out.close();\n\n    IntIndexInput in = f.openInput(dir, \"test\", newIOContext(random));\n    IntIndexInput.Reader r = in.reader();\n\n    for(int i=0;i<11777;i++) {\n      assertEquals(i, r.next());\n    }\n    in.close();\n    \n    dir.close();\n  }\n\n","sourceOld":"  public void testSimpleIntBlocks() throws Exception {\n    Directory dir = newDirectory();\n\n    IntStreamFactory f = new MockFixedIntBlockCodec(128).getIntFactory();\n\n    IntIndexOutput out = f.createOutput(dir, \"test\");\n    for(int i=0;i<11777;i++) {\n      out.write(i);\n    }\n    out.close();\n\n    IntIndexInput in = f.openInput(dir, \"test\");\n    IntIndexInput.Reader r = in.reader();\n\n    for(int i=0;i<11777;i++) {\n      assertEquals(i, r.next());\n    }\n    in.close();\n    \n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/codecs/intblock/TestIntBlockCodec#testSimpleIntBlocks().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/codecs/intblock/TestIntBlockCodec#testSimpleIntBlocks().mjava","sourceNew":"  public void testSimpleIntBlocks() throws Exception {\n    Directory dir = newDirectory();\n\n    IntStreamFactory f = new MockFixedIntBlockPostingsFormat(128).getIntFactory();\n\n    IntIndexOutput out = f.createOutput(dir, \"test\", newIOContext(random));\n    for(int i=0;i<11777;i++) {\n      out.write(i);\n    }\n    out.close();\n\n    IntIndexInput in = f.openInput(dir, \"test\", newIOContext(random));\n    IntIndexInput.Reader r = in.reader();\n\n    for(int i=0;i<11777;i++) {\n      assertEquals(i, r.next());\n    }\n    in.close();\n    \n    dir.close();\n  }\n\n","sourceOld":"  public void testSimpleIntBlocks() throws Exception {\n    Directory dir = newDirectory();\n\n    IntStreamFactory f = new MockFixedIntBlockCodec(128).getIntFactory();\n\n    IntIndexOutput out = f.createOutput(dir, \"test\", newIOContext(random));\n    for(int i=0;i<11777;i++) {\n      out.write(i);\n    }\n    out.close();\n\n    IntIndexInput in = f.openInput(dir, \"test\", newIOContext(random));\n    IntIndexInput.Reader r = in.reader();\n\n    for(int i=0;i<11777;i++) {\n      assertEquals(i, r.next());\n    }\n    in.close();\n    \n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0ae5e3ed1232483b7b8a014f175a5fe43595982","date":1324062192,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/codecs/intblock/TestIntBlockCodec#testSimpleIntBlocks().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/codecs/intblock/TestIntBlockCodec#testSimpleIntBlocks().mjava","sourceNew":"  public void testSimpleIntBlocks() throws Exception {\n    Directory dir = newDirectory();\n\n    IntStreamFactory f = new MockFixedIntBlockPostingsFormat(128).getIntFactory();\n\n    IntIndexOutput out = f.createOutput(dir, \"test\", newIOContext(random));\n    for(int i=0;i<11777;i++) {\n      out.write(i);\n    }\n    out.close();\n\n    IntIndexInput in = f.openInput(dir, \"test\", newIOContext(random));\n    IntIndexInput.Reader r = in.reader();\n\n    for(int i=0;i<11777;i++) {\n      assertEquals(i, r.next());\n    }\n    in.close();\n    \n    dir.close();\n  }\n\n","sourceOld":"  public void testSimpleIntBlocks() throws Exception {\n    Directory dir = newDirectory();\n\n    IntStreamFactory f = new MockFixedIntBlockPostingsFormat(128).getIntFactory();\n\n    IntIndexOutput out = f.createOutput(dir, \"test\", newIOContext(random));\n    for(int i=0;i<11777;i++) {\n      out.write(i);\n    }\n    out.close();\n\n    IntIndexInput in = f.openInput(dir, \"test\", newIOContext(random));\n    IntIndexInput.Reader r = in.reader();\n\n    for(int i=0;i<11777;i++) {\n      assertEquals(i, r.next());\n    }\n    in.close();\n    \n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"03b152509ee3fa8cf52abb8a4a0cfe7287c59fc8":["108e81824177a1a9f2507addadb8894e1cdf9afc"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["03b152509ee3fa8cf52abb8a4a0cfe7287c59fc8"],"108e81824177a1a9f2507addadb8894e1cdf9afc":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"639c36565ce03aed5b0fce7c9e4448e53a1f7efd":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","1f653cfcf159baeaafe5d01682a911e95bba4012"],"7b91922b55d15444d554721b352861d028eb8278":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b6f9be74ca7baaef11857ad002cad40419979516":["639c36565ce03aed5b0fce7c9e4448e53a1f7efd"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":["1f653cfcf159baeaafe5d01682a911e95bba4012","ddc4c914be86e34b54f70023f45a60fa7f04e929"],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["1f653cfcf159baeaafe5d01682a911e95bba4012","b6f9be74ca7baaef11857ad002cad40419979516"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["7b91922b55d15444d554721b352861d028eb8278"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"]},"commit2Childs":{"03b152509ee3fa8cf52abb8a4a0cfe7287c59fc8":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"108e81824177a1a9f2507addadb8894e1cdf9afc":["03b152509ee3fa8cf52abb8a4a0cfe7287c59fc8"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["108e81824177a1a9f2507addadb8894e1cdf9afc","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"639c36565ce03aed5b0fce7c9e4448e53a1f7efd":["b6f9be74ca7baaef11857ad002cad40419979516"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"7b91922b55d15444d554721b352861d028eb8278":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["639c36565ce03aed5b0fce7c9e4448e53a1f7efd","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","5d004d0e0b3f65bb40da76d476d659d7888270e8","ddc4c914be86e34b54f70023f45a60fa7f04e929"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"b6f9be74ca7baaef11857ad002cad40419979516":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":[],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["7b91922b55d15444d554721b352861d028eb8278","5d004d0e0b3f65bb40da76d476d659d7888270e8"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","5d004d0e0b3f65bb40da76d476d659d7888270e8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}