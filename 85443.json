{"path":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterOutOfMemory#testCheckpoint().mjava","commits":[{"id":"30310b71978c10ec44d08c346837a2f4bfe7dfed","date":1410955605,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterOutOfMemory#testCheckpoint().mjava","pathOld":"/dev/null","sourceNew":"  @Ignore(\"LUCENE-5958: not yet\")\n  public void testCheckpoint() throws Exception {\n    final Random r = new Random(random().nextLong());\n    doTest(new Failure() {\n      @Override\n      public void eval(MockDirectoryWrapper dir) throws IOException {\n        Exception e = new Exception();\n        StackTraceElement stack[] = e.getStackTrace();\n        boolean ok = false;\n        for (int i = 0; i < stack.length; i++) {\n          if (stack[i].getClassName().equals(IndexFileDeleter.class.getName()) && stack[i].getMethodName().equals(\"checkpoint\")) {\n            ok = true;\n          }\n        }\n        if (ok && r.nextInt(4) == 0) {\n          throw new OutOfMemoryError(\"Fake OutOfMemoryError\");\n        }\n      }\n    });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"949847c0040cd70a68222d526cb0da7bf6cbb3c2","date":1410997182,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterOutOfMemory#testCheckpoint().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterOutOfMemory#testCheckpoint().mjava","sourceNew":"  public void testCheckpoint() throws Exception {\n    final Random r = new Random(random().nextLong());\n    doTest(new Failure() {\n      @Override\n      public void eval(MockDirectoryWrapper dir) throws IOException {\n        Exception e = new Exception();\n        StackTraceElement stack[] = e.getStackTrace();\n        boolean ok = false;\n        for (int i = 0; i < stack.length; i++) {\n          if (stack[i].getClassName().equals(IndexFileDeleter.class.getName()) && stack[i].getMethodName().equals(\"checkpoint\")) {\n            ok = true;\n          }\n        }\n        if (ok && r.nextInt(4) == 0) {\n          throw new OutOfMemoryError(\"Fake OutOfMemoryError\");\n        }\n      }\n    });\n  }\n\n","sourceOld":"  @Ignore(\"LUCENE-5958: not yet\")\n  public void testCheckpoint() throws Exception {\n    final Random r = new Random(random().nextLong());\n    doTest(new Failure() {\n      @Override\n      public void eval(MockDirectoryWrapper dir) throws IOException {\n        Exception e = new Exception();\n        StackTraceElement stack[] = e.getStackTrace();\n        boolean ok = false;\n        for (int i = 0; i < stack.length; i++) {\n          if (stack[i].getClassName().equals(IndexFileDeleter.class.getName()) && stack[i].getMethodName().equals(\"checkpoint\")) {\n            ok = true;\n          }\n        }\n        if (ok && r.nextInt(4) == 0) {\n          throw new OutOfMemoryError(\"Fake OutOfMemoryError\");\n        }\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"faca0a5ba7f0b5cf87d9ebc28a943ec3dfd38458","date":1416851862,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterOutOfMemory#testCheckpoint().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterOutOfMemory#testCheckpoint().mjava","sourceNew":"  public void testCheckpoint() throws Exception {\n    final Random r = new Random(random().nextLong());\n    doTest(new Failure() {\n      @Override\n      public void eval(MockDirectoryWrapper dir) throws IOException {\n        StackTraceElement stack[] = Thread.currentThread().getStackTrace();\n        boolean ok = false;\n        for (int i = 0; i < stack.length; i++) {\n          if (stack[i].getClassName().equals(IndexFileDeleter.class.getName()) && stack[i].getMethodName().equals(\"checkpoint\")) {\n            ok = true;\n          }\n        }\n        if (ok && r.nextInt(4) == 0) {\n          throw new OutOfMemoryError(\"Fake OutOfMemoryError\");\n        }\n      }\n    });\n  }\n\n","sourceOld":"  public void testCheckpoint() throws Exception {\n    final Random r = new Random(random().nextLong());\n    doTest(new Failure() {\n      @Override\n      public void eval(MockDirectoryWrapper dir) throws IOException {\n        Exception e = new Exception();\n        StackTraceElement stack[] = e.getStackTrace();\n        boolean ok = false;\n        for (int i = 0; i < stack.length; i++) {\n          if (stack[i].getClassName().equals(IndexFileDeleter.class.getName()) && stack[i].getMethodName().equals(\"checkpoint\")) {\n            ok = true;\n          }\n        }\n        if (ok && r.nextInt(4) == 0) {\n          throw new OutOfMemoryError(\"Fake OutOfMemoryError\");\n        }\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a87ce200bba7d88024e2f1c4012212072ce8a5ae","date":1417031281,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterOutOfMemory#testCheckpoint().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterOutOfMemory#testCheckpoint().mjava","sourceNew":"  @Nightly\n  public void testCheckpoint() throws Exception {\n    final Random r = new Random(random().nextLong());\n    doTest(new Failure() {\n      @Override\n      public void eval(MockDirectoryWrapper dir) throws IOException {\n        StackTraceElement stack[] = Thread.currentThread().getStackTrace();\n        boolean ok = false;\n        for (int i = 0; i < stack.length; i++) {\n          if (stack[i].getClassName().equals(IndexFileDeleter.class.getName()) && stack[i].getMethodName().equals(\"checkpoint\")) {\n            ok = true;\n          }\n        }\n        if (ok && r.nextInt(4) == 0) {\n          throw new OutOfMemoryError(\"Fake OutOfMemoryError\");\n        }\n      }\n    });\n  }\n\n","sourceOld":"  public void testCheckpoint() throws Exception {\n    final Random r = new Random(random().nextLong());\n    doTest(new Failure() {\n      @Override\n      public void eval(MockDirectoryWrapper dir) throws IOException {\n        StackTraceElement stack[] = Thread.currentThread().getStackTrace();\n        boolean ok = false;\n        for (int i = 0; i < stack.length; i++) {\n          if (stack[i].getClassName().equals(IndexFileDeleter.class.getName()) && stack[i].getMethodName().equals(\"checkpoint\")) {\n            ok = true;\n          }\n        }\n        if (ok && r.nextInt(4) == 0) {\n          throw new OutOfMemoryError(\"Fake OutOfMemoryError\");\n        }\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c48871ed951104729f5e17a8ee1091b43fa18980","date":1446564542,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterOnVMError#testCheckpoint().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterOutOfMemory#testCheckpoint().mjava","sourceNew":"  @Nightly\n  public void testCheckpoint() throws Exception {\n    final Random r = new Random(random().nextLong());\n    doTest(new Failure() {\n      @Override\n      public void eval(MockDirectoryWrapper dir) throws IOException {\n        StackTraceElement stack[] = Thread.currentThread().getStackTrace();\n        boolean ok = false;\n        for (int i = 0; i < stack.length; i++) {\n          if (stack[i].getClassName().equals(IndexFileDeleter.class.getName()) && stack[i].getMethodName().equals(\"checkpoint\")) {\n            ok = true;\n          }\n        }\n        if (ok && r.nextInt(4) == 0) {\n          throw new OutOfMemoryError(\"Fake OutOfMemoryError\");\n        }\n      }\n    });\n  }\n\n","sourceOld":"  @Nightly\n  public void testCheckpoint() throws Exception {\n    final Random r = new Random(random().nextLong());\n    doTest(new Failure() {\n      @Override\n      public void eval(MockDirectoryWrapper dir) throws IOException {\n        StackTraceElement stack[] = Thread.currentThread().getStackTrace();\n        boolean ok = false;\n        for (int i = 0; i < stack.length; i++) {\n          if (stack[i].getClassName().equals(IndexFileDeleter.class.getName()) && stack[i].getMethodName().equals(\"checkpoint\")) {\n            ok = true;\n          }\n        }\n        if (ok && r.nextInt(4) == 0) {\n          throw new OutOfMemoryError(\"Fake OutOfMemoryError\");\n        }\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"30310b71978c10ec44d08c346837a2f4bfe7dfed":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a87ce200bba7d88024e2f1c4012212072ce8a5ae":["faca0a5ba7f0b5cf87d9ebc28a943ec3dfd38458"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"faca0a5ba7f0b5cf87d9ebc28a943ec3dfd38458":["949847c0040cd70a68222d526cb0da7bf6cbb3c2"],"949847c0040cd70a68222d526cb0da7bf6cbb3c2":["30310b71978c10ec44d08c346837a2f4bfe7dfed"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c48871ed951104729f5e17a8ee1091b43fa18980"],"c48871ed951104729f5e17a8ee1091b43fa18980":["a87ce200bba7d88024e2f1c4012212072ce8a5ae"]},"commit2Childs":{"30310b71978c10ec44d08c346837a2f4bfe7dfed":["949847c0040cd70a68222d526cb0da7bf6cbb3c2"],"a87ce200bba7d88024e2f1c4012212072ce8a5ae":["c48871ed951104729f5e17a8ee1091b43fa18980"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["30310b71978c10ec44d08c346837a2f4bfe7dfed"],"faca0a5ba7f0b5cf87d9ebc28a943ec3dfd38458":["a87ce200bba7d88024e2f1c4012212072ce8a5ae"],"949847c0040cd70a68222d526cb0da7bf6cbb3c2":["faca0a5ba7f0b5cf87d9ebc28a943ec3dfd38458"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"c48871ed951104729f5e17a8ee1091b43fa18980":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}