{"path":"solr/core/src/test/org/apache/solr/cloud/DeleteReplicaTest#tryToRemoveOnlyIfDown(String,CloudSolrClient,Replica,String).mjava","commits":[{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DeleteReplicaTest#tryToRemoveOnlyIfDown(String,CloudSolrClient,Replica,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DeleteReplicaTest#tryToRemoveOnlyIfDown(String,CloudSolrServer,Replica,String).mjava","sourceNew":"  protected void tryToRemoveOnlyIfDown(String collectionName, CloudSolrClient client, Replica replica, String shard) throws IOException, SolrServerException {\n    Map m = makeMap(\"collection\", collectionName,\n        \"action\", DELETEREPLICA.toLower(),\n        \"shard\", shard,\n        \"replica\", replica.getName(),\n        ONLY_IF_DOWN, \"true\");\n    SolrParams params = new MapSolrParams(m);\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    client.request(request);\n  }\n\n","sourceOld":"  protected void tryToRemoveOnlyIfDown(String collectionName, CloudSolrServer client, Replica replica, String shard) throws IOException, SolrServerException {\n    Map m = makeMap(\"collection\", collectionName,\n        \"action\", DELETEREPLICA.toLower(),\n        \"shard\", shard,\n        \"replica\", replica.getName(),\n        ONLY_IF_DOWN, \"true\");\n    SolrParams params = new MapSolrParams(m);\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    client.request(request);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"609b19bb8de96c4e5e338d1d4a0349957522b601","date":1474892114,"type":4,"author":"Alan Woodward","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/DeleteReplicaTest#tryToRemoveOnlyIfDown(String,CloudSolrClient,Replica,String).mjava","sourceNew":null,"sourceOld":"  protected void tryToRemoveOnlyIfDown(String collectionName, CloudSolrClient client, Replica replica, String shard) throws IOException, SolrServerException {\n    Map m = makeMap(\"collection\", collectionName,\n        \"action\", DELETEREPLICA.toLower(),\n        \"shard\", shard,\n        \"replica\", replica.getName(),\n        ONLY_IF_DOWN, \"true\");\n    SolrParams params = new MapSolrParams(m);\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    client.request(request);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/DeleteReplicaTest#tryToRemoveOnlyIfDown(String,CloudSolrClient,Replica,String).mjava","sourceNew":null,"sourceOld":"  protected void tryToRemoveOnlyIfDown(String collectionName, CloudSolrClient client, Replica replica, String shard) throws IOException, SolrServerException {\n    Map m = makeMap(\"collection\", collectionName,\n        \"action\", DELETEREPLICA.toLower(),\n        \"shard\", shard,\n        \"replica\", replica.getName(),\n        ONLY_IF_DOWN, \"true\");\n    SolrParams params = new MapSolrParams(m);\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    client.request(request);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/DeleteReplicaTest#tryToRemoveOnlyIfDown(String,CloudSolrClient,Replica,String).mjava","sourceNew":null,"sourceOld":"  protected void tryToRemoveOnlyIfDown(String collectionName, CloudSolrClient client, Replica replica, String shard) throws IOException, SolrServerException {\n    Map m = makeMap(\"collection\", collectionName,\n        \"action\", DELETEREPLICA.toLower(),\n        \"shard\", shard,\n        \"replica\", replica.getName(),\n        ONLY_IF_DOWN, \"true\");\n    SolrParams params = new MapSolrParams(m);\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    client.request(request);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["bafca15d8e408346a67f4282ad1143b88023893b","609b19bb8de96c4e5e338d1d4a0349957522b601"],"609b19bb8de96c4e5e338d1d4a0349957522b601":["bafca15d8e408346a67f4282ad1143b88023893b"],"bafca15d8e408346a67f4282ad1143b88023893b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["bafca15d8e408346a67f4282ad1143b88023893b","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bafca15d8e408346a67f4282ad1143b88023893b"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"609b19bb8de96c4e5e338d1d4a0349957522b601":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"bafca15d8e408346a67f4282ad1143b88023893b":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","609b19bb8de96c4e5e338d1d4a0349957522b601","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}