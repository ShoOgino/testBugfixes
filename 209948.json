{"path":"lucene/src/java/org/apache/lucene/index/codecs/BlockTermsReader.FieldReader.SegmentTermsEnum#docsAndPositions(Bits,DocsAndPositionsEnum).mjava","commits":[{"id":"b1add9ddc0005b07550d4350720aac22dc9886b3","date":1295549635,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/BlockTermsReader.FieldReader.SegmentTermsEnum#docsAndPositions(Bits,DocsAndPositionsEnum).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/PrefixCodedTermsReader.FieldReader.SegmentTermsEnum#docsAndPositions(Bits,DocsAndPositionsEnum).mjava","sourceNew":"      @Override\n      public DocsAndPositionsEnum docsAndPositions(Bits skipDocs, DocsAndPositionsEnum reuse) throws IOException {\n        //System.out.println(\"BTR.d&p this=\" + this);\n        decodeMetaData();\n        if (fieldInfo.omitTermFreqAndPositions) {\n          return null;\n        } else {\n          DocsAndPositionsEnum dpe = postingsReader.docsAndPositions(fieldInfo, state, skipDocs, reuse);\n          //System.out.println(\"  return d&pe=\" + dpe);\n          return dpe;\n        }\n      }\n\n","sourceOld":"      @Override\n      public DocsAndPositionsEnum docsAndPositions(Bits skipDocs, DocsAndPositionsEnum reuse) throws IOException {\n        if (fieldInfo.omitTermFreqAndPositions) {\n          return null;\n        } else {\n          return postingsReader.docsAndPositions(fieldInfo, state, skipDocs, reuse);\n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd1bfe3cedf815c14939d170d53031c88eb5c444","date":1295896578,"type":0,"author":"Michael Busch","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/BlockTermsReader.FieldReader.SegmentTermsEnum#docsAndPositions(Bits,DocsAndPositionsEnum).mjava","pathOld":"/dev/null","sourceNew":"      @Override\n      public DocsAndPositionsEnum docsAndPositions(Bits skipDocs, DocsAndPositionsEnum reuse) throws IOException {\n        //System.out.println(\"BTR.d&p this=\" + this);\n        decodeMetaData();\n        if (fieldInfo.omitTermFreqAndPositions) {\n          return null;\n        } else {\n          DocsAndPositionsEnum dpe = postingsReader.docsAndPositions(fieldInfo, state, skipDocs, reuse);\n          //System.out.println(\"  return d&pe=\" + dpe);\n          return dpe;\n        }\n      }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/BlockTermsReader.FieldReader.SegmentTermsEnum#docsAndPositions(Bits,DocsAndPositionsEnum).mjava","pathOld":"/dev/null","sourceNew":"      @Override\n      public DocsAndPositionsEnum docsAndPositions(Bits skipDocs, DocsAndPositionsEnum reuse) throws IOException {\n        //System.out.println(\"BTR.d&p this=\" + this);\n        decodeMetaData();\n        if (fieldInfo.omitTermFreqAndPositions) {\n          return null;\n        } else {\n          DocsAndPositionsEnum dpe = postingsReader.docsAndPositions(fieldInfo, state, skipDocs, reuse);\n          //System.out.println(\"  return d&pe=\" + dpe);\n          return dpe;\n        }\n      }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","date":1309960478,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/BlockTermsReader.FieldReader.SegmentTermsEnum#docsAndPositions(Bits,DocsAndPositionsEnum).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/BlockTermsReader.FieldReader.SegmentTermsEnum#docsAndPositions(Bits,DocsAndPositionsEnum).mjava","sourceNew":"      @Override\n      public DocsAndPositionsEnum docsAndPositions(Bits liveDocs, DocsAndPositionsEnum reuse) throws IOException {\n        //System.out.println(\"BTR.d&p this=\" + this);\n        decodeMetaData();\n        if (fieldInfo.omitTermFreqAndPositions) {\n          return null;\n        } else {\n          DocsAndPositionsEnum dpe = postingsReader.docsAndPositions(fieldInfo, state, liveDocs, reuse);\n          //System.out.println(\"  return d&pe=\" + dpe);\n          return dpe;\n        }\n      }\n\n","sourceOld":"      @Override\n      public DocsAndPositionsEnum docsAndPositions(Bits skipDocs, DocsAndPositionsEnum reuse) throws IOException {\n        //System.out.println(\"BTR.d&p this=\" + this);\n        decodeMetaData();\n        if (fieldInfo.omitTermFreqAndPositions) {\n          return null;\n        } else {\n          DocsAndPositionsEnum dpe = postingsReader.docsAndPositions(fieldInfo, state, skipDocs, reuse);\n          //System.out.println(\"  return d&pe=\" + dpe);\n          return dpe;\n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/BlockTermsReader.FieldReader.SegmentTermsEnum#docsAndPositions(Bits,DocsAndPositionsEnum).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/BlockTermsReader.FieldReader.SegmentTermsEnum#docsAndPositions(Bits,DocsAndPositionsEnum).mjava","sourceNew":"      @Override\n      public DocsAndPositionsEnum docsAndPositions(Bits liveDocs, DocsAndPositionsEnum reuse) throws IOException {\n        //System.out.println(\"BTR.d&p this=\" + this);\n        decodeMetaData();\n        if (fieldInfo.omitTermFreqAndPositions) {\n          return null;\n        } else {\n          DocsAndPositionsEnum dpe = postingsReader.docsAndPositions(fieldInfo, state, liveDocs, reuse);\n          //System.out.println(\"  return d&pe=\" + dpe);\n          return dpe;\n        }\n      }\n\n","sourceOld":"      @Override\n      public DocsAndPositionsEnum docsAndPositions(Bits skipDocs, DocsAndPositionsEnum reuse) throws IOException {\n        //System.out.println(\"BTR.d&p this=\" + this);\n        decodeMetaData();\n        if (fieldInfo.omitTermFreqAndPositions) {\n          return null;\n        } else {\n          DocsAndPositionsEnum dpe = postingsReader.docsAndPositions(fieldInfo, state, skipDocs, reuse);\n          //System.out.println(\"  return d&pe=\" + dpe);\n          return dpe;\n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/BlockTermsReader.FieldReader.SegmentTermsEnum#docsAndPositions(Bits,DocsAndPositionsEnum).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/BlockTermsReader.FieldReader.SegmentTermsEnum#docsAndPositions(Bits,DocsAndPositionsEnum).mjava","sourceNew":"      @Override\n      public DocsAndPositionsEnum docsAndPositions(Bits liveDocs, DocsAndPositionsEnum reuse) throws IOException {\n        //System.out.println(\"BTR.d&p this=\" + this);\n        decodeMetaData();\n        if (fieldInfo.omitTermFreqAndPositions) {\n          return null;\n        } else {\n          DocsAndPositionsEnum dpe = postingsReader.docsAndPositions(fieldInfo, state, liveDocs, reuse);\n          //System.out.println(\"  return d&pe=\" + dpe);\n          return dpe;\n        }\n      }\n\n","sourceOld":"      @Override\n      public DocsAndPositionsEnum docsAndPositions(Bits skipDocs, DocsAndPositionsEnum reuse) throws IOException {\n        //System.out.println(\"BTR.d&p this=\" + this);\n        decodeMetaData();\n        if (fieldInfo.omitTermFreqAndPositions) {\n          return null;\n        } else {\n          DocsAndPositionsEnum dpe = postingsReader.docsAndPositions(fieldInfo, state, skipDocs, reuse);\n          //System.out.println(\"  return d&pe=\" + dpe);\n          return dpe;\n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2afd23a6f1242190c3409d8d81d5c5912d607fc9","date":1310477482,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/BlockTermsReader.FieldReader.SegmentTermsEnum#docsAndPositions(Bits,DocsAndPositionsEnum).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/BlockTermsReader.FieldReader.SegmentTermsEnum#docsAndPositions(Bits,DocsAndPositionsEnum).mjava","sourceNew":"      @Override\n      public DocsAndPositionsEnum docsAndPositions(Bits liveDocs, DocsAndPositionsEnum reuse) throws IOException {\n        //System.out.println(\"BTR.d&p this=\" + this);\n        decodeMetaData();\n        if (fieldInfo.indexOptions != IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n          return null;\n        } else {\n          DocsAndPositionsEnum dpe = postingsReader.docsAndPositions(fieldInfo, state, liveDocs, reuse);\n          //System.out.println(\"  return d&pe=\" + dpe);\n          return dpe;\n        }\n      }\n\n","sourceOld":"      @Override\n      public DocsAndPositionsEnum docsAndPositions(Bits liveDocs, DocsAndPositionsEnum reuse) throws IOException {\n        //System.out.println(\"BTR.d&p this=\" + this);\n        decodeMetaData();\n        if (fieldInfo.omitTermFreqAndPositions) {\n          return null;\n        } else {\n          DocsAndPositionsEnum dpe = postingsReader.docsAndPositions(fieldInfo, state, liveDocs, reuse);\n          //System.out.println(\"  return d&pe=\" + dpe);\n          return dpe;\n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0ae5e3ed1232483b7b8a014f175a5fe43595982","date":1324062192,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/BlockTermsReader.FieldReader.SegmentTermsEnum#docsAndPositions(Bits,DocsAndPositionsEnum).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/BlockTermsReader.FieldReader.SegmentTermsEnum#docsAndPositions(Bits,DocsAndPositionsEnum).mjava","sourceNew":"      @Override\n      public DocsAndPositionsEnum docsAndPositions(Bits liveDocs, DocsAndPositionsEnum reuse) throws IOException {\n        //System.out.println(\"BTR.d&p this=\" + this);\n        decodeMetaData();\n        if (fieldInfo.indexOptions != IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n          return null;\n        } else {\n          DocsAndPositionsEnum dpe = postingsReader.docsAndPositions(fieldInfo, state, liveDocs, reuse);\n          //System.out.println(\"  return d&pe=\" + dpe);\n          return dpe;\n        }\n      }\n\n","sourceOld":"      @Override\n      public DocsAndPositionsEnum docsAndPositions(Bits liveDocs, DocsAndPositionsEnum reuse) throws IOException {\n        //System.out.println(\"BTR.d&p this=\" + this);\n        decodeMetaData();\n        if (fieldInfo.indexOptions != IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n          return null;\n        } else {\n          DocsAndPositionsEnum dpe = postingsReader.docsAndPositions(fieldInfo, state, liveDocs, reuse);\n          //System.out.println(\"  return d&pe=\" + dpe);\n          return dpe;\n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2afd23a6f1242190c3409d8d81d5c5912d607fc9":["e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"fd1bfe3cedf815c14939d170d53031c88eb5c444":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b1add9ddc0005b07550d4350720aac22dc9886b3"],"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb":["b1add9ddc0005b07550d4350720aac22dc9886b3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b1add9ddc0005b07550d4350720aac22dc9886b3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["2afd23a6f1242190c3409d8d81d5c5912d607fc9"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["b1add9ddc0005b07550d4350720aac22dc9886b3","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["b1add9ddc0005b07550d4350720aac22dc9886b3","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"]},"commit2Childs":{"2afd23a6f1242190c3409d8d81d5c5912d607fc9":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"fd1bfe3cedf815c14939d170d53031c88eb5c444":[],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb":["2afd23a6f1242190c3409d8d81d5c5912d607fc9","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fd1bfe3cedf815c14939d170d53031c88eb5c444","29ef99d61cda9641b6250bf9567329a6e65f901d","b1add9ddc0005b07550d4350720aac22dc9886b3"],"b1add9ddc0005b07550d4350720aac22dc9886b3":["29ef99d61cda9641b6250bf9567329a6e65f901d","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fd1bfe3cedf815c14939d170d53031c88eb5c444","29ef99d61cda9641b6250bf9567329a6e65f901d","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}