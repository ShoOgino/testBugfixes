{"path":"src/java/org/apache/solr/handler/DumpRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","commits":[{"id":"d80013b5e260def972025c93a0b08524f9c38f49","date":1170102801,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/DumpRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException \n  {\n    // Show params\n    rsp.add( \"params\", req.getParams().toNamedList() );\n        \n    // Write the streams...\n    if( req.getContentStreams() != null ) {\n      NamedList<Object> streams = new NamedList<Object>();\n      // Cycle through each stream\n      for( ContentStream content : req.getContentStreams() ) {\n        NamedList<Object> stream = new NamedList<Object>();\n        stream.add( \"name\", content.getName() );\n        stream.add( \"fieldName\", content.getSourceInfo() );\n        stream.add( \"size\", content.getSize() );\n        stream.add( \"contentType\", content.getContentType() );\n        stream.add( \"stream\", IOUtils.toString( content.getStream() ) );\n        streams.add( \"stream\", stream );\n      }\n      rsp.add( \"streams\", streams );\n    }\n\n    // Show the context\n    Map<Object,Object> context = req.getContext();\n    if( context != null ) {\n      NamedList ctx = new NamedList();\n      for( Map.Entry<Object,Object> entry : context.entrySet() ) {\n        ctx.add( entry.getKey().toString(), entry.getValue() );\n      }\n      rsp.add( \"context\", ctx );\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["dbf8bf15546966c2999be987d32191fc1ef495ef"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4145b7b13874de95211223a6edb648da8794a688","date":1170182192,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/DumpRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"src/java/org/apache/solr/handler/DumpRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException \n  {\n    // Show params\n    rsp.add( \"params\", req.getParams().toNamedList() );\n        \n    // Write the streams...\n    if( req.getContentStreams() != null ) {\n      ArrayList streams = new ArrayList();\n      // Cycle through each stream\n      for( ContentStream content : req.getContentStreams() ) {\n        NamedList<Object> stream = new SimpleOrderedMap<Object>();\n        stream.add( \"name\", content.getName() );\n        stream.add( \"fieldName\", content.getSourceInfo() );\n        stream.add( \"size\", content.getSize() );\n        stream.add( \"contentType\", content.getContentType() );\n        stream.add( \"stream\", IOUtils.toString( content.getStream() ) );\n        streams.add( stream );\n      }\n      rsp.add( \"streams\", streams );\n    }\n\n    rsp.add(\"context\", req.getContext());\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException \n  {\n    // Show params\n    rsp.add( \"params\", req.getParams().toNamedList() );\n        \n    // Write the streams...\n    if( req.getContentStreams() != null ) {\n      NamedList<Object> streams = new NamedList<Object>();\n      // Cycle through each stream\n      for( ContentStream content : req.getContentStreams() ) {\n        NamedList<Object> stream = new NamedList<Object>();\n        stream.add( \"name\", content.getName() );\n        stream.add( \"fieldName\", content.getSourceInfo() );\n        stream.add( \"size\", content.getSize() );\n        stream.add( \"contentType\", content.getContentType() );\n        stream.add( \"stream\", IOUtils.toString( content.getStream() ) );\n        streams.add( \"stream\", stream );\n      }\n      rsp.add( \"streams\", streams );\n    }\n\n    // Show the context\n    Map<Object,Object> context = req.getContext();\n    if( context != null ) {\n      NamedList ctx = new NamedList();\n      for( Map.Entry<Object,Object> entry : context.entrySet() ) {\n        ctx.add( entry.getKey().toString(), entry.getValue() );\n      }\n      rsp.add( \"context\", ctx );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b0aac8e235806a4f222a5c01cc3677dd79f9cf13","date":1225027423,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/DumpRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"src/java/org/apache/solr/handler/DumpRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException \n  {\n    // Show params\n    rsp.add( \"params\", req.getParams().toNamedList() );\n        \n    // Write the streams...\n    if( req.getContentStreams() != null ) {\n      ArrayList streams = new ArrayList();\n      // Cycle through each stream\n      for( ContentStream content : req.getContentStreams() ) {\n        NamedList<Object> stream = new SimpleOrderedMap<Object>();\n        stream.add( \"name\", content.getName() );\n        stream.add( \"sourceInfo\", content.getSourceInfo() );\n        stream.add( \"size\", content.getSize() );\n        stream.add( \"contentType\", content.getContentType() );\n        stream.add( \"stream\", IOUtils.toString( content.getStream() ) );\n        streams.add( stream );\n      }\n      rsp.add( \"streams\", streams );\n    }\n\n    rsp.add(\"context\", req.getContext());\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException \n  {\n    // Show params\n    rsp.add( \"params\", req.getParams().toNamedList() );\n        \n    // Write the streams...\n    if( req.getContentStreams() != null ) {\n      ArrayList streams = new ArrayList();\n      // Cycle through each stream\n      for( ContentStream content : req.getContentStreams() ) {\n        NamedList<Object> stream = new SimpleOrderedMap<Object>();\n        stream.add( \"name\", content.getName() );\n        stream.add( \"fieldName\", content.getSourceInfo() );\n        stream.add( \"size\", content.getSize() );\n        stream.add( \"contentType\", content.getContentType() );\n        stream.add( \"stream\", IOUtils.toString( content.getStream() ) );\n        streams.add( stream );\n      }\n      rsp.add( \"streams\", streams );\n    }\n\n    rsp.add(\"context\", req.getContext());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"dbf8bf15546966c2999be987d32191fc1ef495ef","date":1265300798,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/DumpRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"src/java/org/apache/solr/handler/DumpRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException \n  {\n    // Show params\n    rsp.add( \"params\", req.getParams().toNamedList() );\n        \n    // Write the streams...\n    if( req.getContentStreams() != null ) {\n      ArrayList streams = new ArrayList();\n      // Cycle through each stream\n      for( ContentStream content : req.getContentStreams() ) {\n        NamedList<Object> stream = new SimpleOrderedMap<Object>();\n        stream.add( \"name\", content.getName() );\n        stream.add( \"sourceInfo\", content.getSourceInfo() );\n        stream.add( \"size\", content.getSize() );\n        stream.add( \"contentType\", content.getContentType() );\n        InputStream is = content.getStream();\n        try {\n          stream.add( \"stream\", IOUtils.toString(is) );\n        } finally {\n          is.close();\n        }\n        streams.add( stream );\n      }\n      rsp.add( \"streams\", streams );\n    }\n\n    rsp.add(\"context\", req.getContext());\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException \n  {\n    // Show params\n    rsp.add( \"params\", req.getParams().toNamedList() );\n        \n    // Write the streams...\n    if( req.getContentStreams() != null ) {\n      ArrayList streams = new ArrayList();\n      // Cycle through each stream\n      for( ContentStream content : req.getContentStreams() ) {\n        NamedList<Object> stream = new SimpleOrderedMap<Object>();\n        stream.add( \"name\", content.getName() );\n        stream.add( \"sourceInfo\", content.getSourceInfo() );\n        stream.add( \"size\", content.getSize() );\n        stream.add( \"contentType\", content.getContentType() );\n        stream.add( \"stream\", IOUtils.toString( content.getStream() ) );\n        streams.add( stream );\n      }\n      rsp.add( \"streams\", streams );\n    }\n\n    rsp.add(\"context\", req.getContext());\n  }\n\n","bugFix":["d80013b5e260def972025c93a0b08524f9c38f49"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/DumpRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"src/java/org/apache/solr/handler/DumpRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException \n  {\n    // Show params\n    rsp.add( \"params\", req.getParams().toNamedList() );\n        \n    // Write the streams...\n    if( req.getContentStreams() != null ) {\n      ArrayList streams = new ArrayList();\n      // Cycle through each stream\n      for( ContentStream content : req.getContentStreams() ) {\n        NamedList<Object> stream = new SimpleOrderedMap<Object>();\n        stream.add( \"name\", content.getName() );\n        stream.add( \"sourceInfo\", content.getSourceInfo() );\n        stream.add( \"size\", content.getSize() );\n        stream.add( \"contentType\", content.getContentType() );\n        InputStream is = content.getStream();\n        try {\n          stream.add( \"stream\", IOUtils.toString(is) );\n        } finally {\n          is.close();\n        }\n        streams.add( stream );\n      }\n      rsp.add( \"streams\", streams );\n    }\n\n    rsp.add(\"context\", req.getContext());\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException \n  {\n    // Show params\n    rsp.add( \"params\", req.getParams().toNamedList() );\n        \n    // Write the streams...\n    if( req.getContentStreams() != null ) {\n      ArrayList streams = new ArrayList();\n      // Cycle through each stream\n      for( ContentStream content : req.getContentStreams() ) {\n        NamedList<Object> stream = new SimpleOrderedMap<Object>();\n        stream.add( \"name\", content.getName() );\n        stream.add( \"sourceInfo\", content.getSourceInfo() );\n        stream.add( \"size\", content.getSize() );\n        stream.add( \"contentType\", content.getContentType() );\n        InputStream is = content.getStream();\n        try {\n          stream.add( \"stream\", IOUtils.toString(is) );\n        } finally {\n          is.close();\n        }\n        streams.add( stream );\n      }\n      rsp.add( \"streams\", streams );\n    }\n\n    rsp.add(\"context\", req.getContext());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"b0aac8e235806a4f222a5c01cc3677dd79f9cf13":["4145b7b13874de95211223a6edb648da8794a688"],"ad94625fb8d088209f46650c8097196fec67f00c":["dbf8bf15546966c2999be987d32191fc1ef495ef"],"4145b7b13874de95211223a6edb648da8794a688":["d80013b5e260def972025c93a0b08524f9c38f49"],"dbf8bf15546966c2999be987d32191fc1ef495ef":["b0aac8e235806a4f222a5c01cc3677dd79f9cf13"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d80013b5e260def972025c93a0b08524f9c38f49":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["d80013b5e260def972025c93a0b08524f9c38f49"],"b0aac8e235806a4f222a5c01cc3677dd79f9cf13":["dbf8bf15546966c2999be987d32191fc1ef495ef"],"4145b7b13874de95211223a6edb648da8794a688":["b0aac8e235806a4f222a5c01cc3677dd79f9cf13"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"dbf8bf15546966c2999be987d32191fc1ef495ef":["ad94625fb8d088209f46650c8097196fec67f00c"],"d80013b5e260def972025c93a0b08524f9c38f49":["4145b7b13874de95211223a6edb648da8794a688"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}