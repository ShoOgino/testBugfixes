{"path":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#syncToMe(ZkController,String,String,ZkNodeProps,CoreDescriptor).mjava","commits":[{"id":"cb4a195b8dc1808cd01748bd2e0fba26ca915d4d","date":1361851792,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#syncToMe(ZkController,String,String,ZkNodeProps,CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#syncToMe(ZkController,String,String,ZkNodeProps).mjava","sourceNew":"  private void syncToMe(ZkController zkController, String collection,\n      String shardId, ZkNodeProps leaderProps, CoreDescriptor cd) {\n    \n    // sync everyone else\n    // TODO: we should do this in parallel at least\n    List<ZkCoreNodeProps> nodes = zkController\n        .getZkStateReader()\n        .getReplicaProps(collection, shardId,\n            zkController.getCoreNodeName(cd),\n            leaderProps.getStr(ZkStateReader.CORE_NAME_PROP));\n    if (nodes == null) {\n      log.info(ZkCoreNodeProps.getCoreUrl(leaderProps) + \" has no replicas\");\n      return;\n    }\n\n    ZkCoreNodeProps zkLeader = new ZkCoreNodeProps(leaderProps);\n    for (ZkCoreNodeProps node : nodes) {\n      try {\n        log.info(ZkCoreNodeProps.getCoreUrl(leaderProps) + \": try and ask \" + node.getCoreUrl() + \" to sync\");\n        \n        requestSync(node.getBaseUrl(), node.getCoreUrl(), zkLeader.getCoreUrl(), node.getCoreName());\n        \n      } catch (Exception e) {\n        SolrException.log(log, \"Error syncing replica to leader\", e);\n      }\n    }\n    \n    \n    for(;;) {\n      ShardResponse srsp = shardHandler.takeCompletedOrError();\n      if (srsp == null) break;\n      boolean success = handleResponse(srsp);\n      if (srsp.getException() != null) {\n        SolrException.log(log, \"Sync request error: \" + srsp.getException());\n      }\n      \n      if (!success) {\n         try {\n           log.info(ZkCoreNodeProps.getCoreUrl(leaderProps) + \": Sync failed - asking replica (\" + srsp.getShardAddress() + \") to recover.\");\n           if (isClosed) {\n             log.info(\"We have been closed, don't request that a replica recover\");\n           } else {\n             requestRecovery(leaderProps, ((ShardCoreRequest)srsp.getShardRequest()).baseUrl, ((ShardCoreRequest)srsp.getShardRequest()).coreName);\n           }\n         } catch (Throwable t) {\n           SolrException.log(log, ZkCoreNodeProps.getCoreUrl(leaderProps) + \": Could not tell a replica to recover\", t);\n         }\n      } else {\n        log.info(ZkCoreNodeProps.getCoreUrl(leaderProps) + \": \" + \" sync completed with \" + srsp.getShardAddress());\n      }\n      \n    }\n\n  }\n\n","sourceOld":"  private void syncToMe(ZkController zkController, String collection,\n      String shardId, ZkNodeProps leaderProps) {\n    \n    // sync everyone else\n    // TODO: we should do this in parallel at least\n    List<ZkCoreNodeProps> nodes = zkController\n        .getZkStateReader()\n        .getReplicaProps(collection, shardId,\n            leaderProps.getStr(ZkStateReader.NODE_NAME_PROP),\n            leaderProps.getStr(ZkStateReader.CORE_NAME_PROP));\n    if (nodes == null) {\n      log.info(ZkCoreNodeProps.getCoreUrl(leaderProps) + \" has no replicas\");\n      return;\n    }\n\n    ZkCoreNodeProps zkLeader = new ZkCoreNodeProps(leaderProps);\n    for (ZkCoreNodeProps node : nodes) {\n      try {\n        log.info(ZkCoreNodeProps.getCoreUrl(leaderProps) + \": try and ask \" + node.getCoreUrl() + \" to sync\");\n        \n        requestSync(node.getBaseUrl(), node.getCoreUrl(), zkLeader.getCoreUrl(), node.getCoreName());\n        \n      } catch (Exception e) {\n        SolrException.log(log, \"Error syncing replica to leader\", e);\n      }\n    }\n    \n    \n    for(;;) {\n      ShardResponse srsp = shardHandler.takeCompletedOrError();\n      if (srsp == null) break;\n      boolean success = handleResponse(srsp);\n      if (srsp.getException() != null) {\n        SolrException.log(log, \"Sync request error: \" + srsp.getException());\n      }\n      \n      if (!success) {\n         try {\n           log.info(ZkCoreNodeProps.getCoreUrl(leaderProps) + \": Sync failed - asking replica (\" + srsp.getShardAddress() + \") to recover.\");\n           if (isClosed) {\n             log.info(\"We have been closed, don't request that a replica recover\");\n           } else {\n             requestRecovery(leaderProps, ((ShardCoreRequest)srsp.getShardRequest()).baseUrl, ((ShardCoreRequest)srsp.getShardRequest()).coreName);\n           }\n         } catch (Throwable t) {\n           SolrException.log(log, ZkCoreNodeProps.getCoreUrl(leaderProps) + \": Could not tell a replica to recover\", t);\n         }\n      } else {\n        log.info(ZkCoreNodeProps.getCoreUrl(leaderProps) + \": \" + \" sync completed with \" + srsp.getShardAddress());\n      }\n      \n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"849494cf2f3a96af5c8c84995108ddd8456fcd04","date":1372277913,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#syncToMe(ZkController,String,String,ZkNodeProps,CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#syncToMe(ZkController,String,String,ZkNodeProps,CoreDescriptor).mjava","sourceNew":"  private void syncToMe(ZkController zkController, String collection,\n      String shardId, ZkNodeProps leaderProps, CoreDescriptor cd) {\n    \n    // sync everyone else\n    // TODO: we should do this in parallel at least\n    List<ZkCoreNodeProps> nodes = zkController\n        .getZkStateReader()\n        .getReplicaProps(collection, shardId,\n            cd.getCloudDescriptor().getCoreNodeName(),\n            leaderProps.getStr(ZkStateReader.CORE_NAME_PROP));\n    if (nodes == null) {\n      log.info(ZkCoreNodeProps.getCoreUrl(leaderProps) + \" has no replicas\");\n      return;\n    }\n\n    ZkCoreNodeProps zkLeader = new ZkCoreNodeProps(leaderProps);\n    for (ZkCoreNodeProps node : nodes) {\n      try {\n        log.info(ZkCoreNodeProps.getCoreUrl(leaderProps) + \": try and ask \" + node.getCoreUrl() + \" to sync\");\n        \n        requestSync(node.getBaseUrl(), node.getCoreUrl(), zkLeader.getCoreUrl(), node.getCoreName());\n        \n      } catch (Exception e) {\n        SolrException.log(log, \"Error syncing replica to leader\", e);\n      }\n    }\n    \n    \n    for(;;) {\n      ShardResponse srsp = shardHandler.takeCompletedOrError();\n      if (srsp == null) break;\n      boolean success = handleResponse(srsp);\n      if (srsp.getException() != null) {\n        SolrException.log(log, \"Sync request error: \" + srsp.getException());\n      }\n      \n      if (!success) {\n         try {\n           log.info(ZkCoreNodeProps.getCoreUrl(leaderProps) + \": Sync failed - asking replica (\" + srsp.getShardAddress() + \") to recover.\");\n           if (isClosed) {\n             log.info(\"We have been closed, don't request that a replica recover\");\n           } else {\n             requestRecovery(leaderProps, ((ShardCoreRequest)srsp.getShardRequest()).baseUrl, ((ShardCoreRequest)srsp.getShardRequest()).coreName);\n           }\n         } catch (Throwable t) {\n           SolrException.log(log, ZkCoreNodeProps.getCoreUrl(leaderProps) + \": Could not tell a replica to recover\", t);\n         }\n      } else {\n        log.info(ZkCoreNodeProps.getCoreUrl(leaderProps) + \": \" + \" sync completed with \" + srsp.getShardAddress());\n      }\n      \n    }\n\n  }\n\n","sourceOld":"  private void syncToMe(ZkController zkController, String collection,\n      String shardId, ZkNodeProps leaderProps, CoreDescriptor cd) {\n    \n    // sync everyone else\n    // TODO: we should do this in parallel at least\n    List<ZkCoreNodeProps> nodes = zkController\n        .getZkStateReader()\n        .getReplicaProps(collection, shardId,\n            zkController.getCoreNodeName(cd),\n            leaderProps.getStr(ZkStateReader.CORE_NAME_PROP));\n    if (nodes == null) {\n      log.info(ZkCoreNodeProps.getCoreUrl(leaderProps) + \" has no replicas\");\n      return;\n    }\n\n    ZkCoreNodeProps zkLeader = new ZkCoreNodeProps(leaderProps);\n    for (ZkCoreNodeProps node : nodes) {\n      try {\n        log.info(ZkCoreNodeProps.getCoreUrl(leaderProps) + \": try and ask \" + node.getCoreUrl() + \" to sync\");\n        \n        requestSync(node.getBaseUrl(), node.getCoreUrl(), zkLeader.getCoreUrl(), node.getCoreName());\n        \n      } catch (Exception e) {\n        SolrException.log(log, \"Error syncing replica to leader\", e);\n      }\n    }\n    \n    \n    for(;;) {\n      ShardResponse srsp = shardHandler.takeCompletedOrError();\n      if (srsp == null) break;\n      boolean success = handleResponse(srsp);\n      if (srsp.getException() != null) {\n        SolrException.log(log, \"Sync request error: \" + srsp.getException());\n      }\n      \n      if (!success) {\n         try {\n           log.info(ZkCoreNodeProps.getCoreUrl(leaderProps) + \": Sync failed - asking replica (\" + srsp.getShardAddress() + \") to recover.\");\n           if (isClosed) {\n             log.info(\"We have been closed, don't request that a replica recover\");\n           } else {\n             requestRecovery(leaderProps, ((ShardCoreRequest)srsp.getShardRequest()).baseUrl, ((ShardCoreRequest)srsp.getShardRequest()).coreName);\n           }\n         } catch (Throwable t) {\n           SolrException.log(log, ZkCoreNodeProps.getCoreUrl(leaderProps) + \": Could not tell a replica to recover\", t);\n         }\n      } else {\n        log.info(ZkCoreNodeProps.getCoreUrl(leaderProps) + \": \" + \" sync completed with \" + srsp.getShardAddress());\n      }\n      \n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#syncToMe(ZkController,String,String,ZkNodeProps,CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#syncToMe(ZkController,String,String,ZkNodeProps,CoreDescriptor).mjava","sourceNew":"  private void syncToMe(ZkController zkController, String collection,\n      String shardId, ZkNodeProps leaderProps, CoreDescriptor cd) {\n    \n    // sync everyone else\n    // TODO: we should do this in parallel at least\n    List<ZkCoreNodeProps> nodes = zkController\n        .getZkStateReader()\n        .getReplicaProps(collection, shardId,\n            cd.getCloudDescriptor().getCoreNodeName(),\n            leaderProps.getStr(ZkStateReader.CORE_NAME_PROP));\n    if (nodes == null) {\n      log.info(ZkCoreNodeProps.getCoreUrl(leaderProps) + \" has no replicas\");\n      return;\n    }\n\n    ZkCoreNodeProps zkLeader = new ZkCoreNodeProps(leaderProps);\n    for (ZkCoreNodeProps node : nodes) {\n      try {\n        log.info(ZkCoreNodeProps.getCoreUrl(leaderProps) + \": try and ask \" + node.getCoreUrl() + \" to sync\");\n        \n        requestSync(node.getBaseUrl(), node.getCoreUrl(), zkLeader.getCoreUrl(), node.getCoreName());\n        \n      } catch (Exception e) {\n        SolrException.log(log, \"Error syncing replica to leader\", e);\n      }\n    }\n    \n    \n    for(;;) {\n      ShardResponse srsp = shardHandler.takeCompletedOrError();\n      if (srsp == null) break;\n      boolean success = handleResponse(srsp);\n      if (srsp.getException() != null) {\n        SolrException.log(log, \"Sync request error: \" + srsp.getException());\n      }\n      \n      if (!success) {\n         try {\n           log.info(ZkCoreNodeProps.getCoreUrl(leaderProps) + \": Sync failed - asking replica (\" + srsp.getShardAddress() + \") to recover.\");\n           if (isClosed) {\n             log.info(\"We have been closed, don't request that a replica recover\");\n           } else {\n             requestRecovery(leaderProps, ((ShardCoreRequest)srsp.getShardRequest()).baseUrl, ((ShardCoreRequest)srsp.getShardRequest()).coreName);\n           }\n         } catch (Throwable t) {\n           SolrException.log(log, ZkCoreNodeProps.getCoreUrl(leaderProps) + \": Could not tell a replica to recover\", t);\n         }\n      } else {\n        log.info(ZkCoreNodeProps.getCoreUrl(leaderProps) + \": \" + \" sync completed with \" + srsp.getShardAddress());\n      }\n      \n    }\n\n  }\n\n","sourceOld":"  private void syncToMe(ZkController zkController, String collection,\n      String shardId, ZkNodeProps leaderProps, CoreDescriptor cd) {\n    \n    // sync everyone else\n    // TODO: we should do this in parallel at least\n    List<ZkCoreNodeProps> nodes = zkController\n        .getZkStateReader()\n        .getReplicaProps(collection, shardId,\n            zkController.getCoreNodeName(cd),\n            leaderProps.getStr(ZkStateReader.CORE_NAME_PROP));\n    if (nodes == null) {\n      log.info(ZkCoreNodeProps.getCoreUrl(leaderProps) + \" has no replicas\");\n      return;\n    }\n\n    ZkCoreNodeProps zkLeader = new ZkCoreNodeProps(leaderProps);\n    for (ZkCoreNodeProps node : nodes) {\n      try {\n        log.info(ZkCoreNodeProps.getCoreUrl(leaderProps) + \": try and ask \" + node.getCoreUrl() + \" to sync\");\n        \n        requestSync(node.getBaseUrl(), node.getCoreUrl(), zkLeader.getCoreUrl(), node.getCoreName());\n        \n      } catch (Exception e) {\n        SolrException.log(log, \"Error syncing replica to leader\", e);\n      }\n    }\n    \n    \n    for(;;) {\n      ShardResponse srsp = shardHandler.takeCompletedOrError();\n      if (srsp == null) break;\n      boolean success = handleResponse(srsp);\n      if (srsp.getException() != null) {\n        SolrException.log(log, \"Sync request error: \" + srsp.getException());\n      }\n      \n      if (!success) {\n         try {\n           log.info(ZkCoreNodeProps.getCoreUrl(leaderProps) + \": Sync failed - asking replica (\" + srsp.getShardAddress() + \") to recover.\");\n           if (isClosed) {\n             log.info(\"We have been closed, don't request that a replica recover\");\n           } else {\n             requestRecovery(leaderProps, ((ShardCoreRequest)srsp.getShardRequest()).baseUrl, ((ShardCoreRequest)srsp.getShardRequest()).coreName);\n           }\n         } catch (Throwable t) {\n           SolrException.log(log, ZkCoreNodeProps.getCoreUrl(leaderProps) + \": Could not tell a replica to recover\", t);\n         }\n      } else {\n        log.info(ZkCoreNodeProps.getCoreUrl(leaderProps) + \": \" + \" sync completed with \" + srsp.getShardAddress());\n      }\n      \n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f56da6f4f15d95f318d2d6ac2a39a9183dfecff2","date":1389633998,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#syncToMe(ZkController,String,String,ZkNodeProps,CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#syncToMe(ZkController,String,String,ZkNodeProps,CoreDescriptor).mjava","sourceNew":"  private void syncToMe(ZkController zkController, String collection,\n      String shardId, ZkNodeProps leaderProps, CoreDescriptor cd) {\n    \n    // sync everyone else\n    // TODO: we should do this in parallel at least\n    List<ZkCoreNodeProps> nodes = zkController\n        .getZkStateReader()\n        .getReplicaProps(collection, shardId,\n            cd.getCloudDescriptor().getCoreNodeName(),\n            leaderProps.getStr(ZkStateReader.CORE_NAME_PROP));\n    if (nodes == null) {\n      log.info(ZkCoreNodeProps.getCoreUrl(leaderProps) + \" has no replicas\");\n      return;\n    }\n\n    ZkCoreNodeProps zkLeader = new ZkCoreNodeProps(leaderProps);\n    for (ZkCoreNodeProps node : nodes) {\n      try {\n        log.info(ZkCoreNodeProps.getCoreUrl(leaderProps) + \": try and ask \" + node.getCoreUrl() + \" to sync\");\n        \n        requestSync(node.getBaseUrl(), node.getCoreUrl(), zkLeader.getCoreUrl(), node.getCoreName());\n        \n      } catch (Exception e) {\n        SolrException.log(log, \"Error syncing replica to leader\", e);\n      }\n    }\n    \n    \n    for(;;) {\n      ShardResponse srsp = shardHandler.takeCompletedOrError();\n      if (srsp == null) break;\n      boolean success = handleResponse(srsp);\n      if (srsp.getException() != null) {\n        SolrException.log(log, \"Sync request error: \" + srsp.getException());\n      }\n      \n      if (!success) {\n         try {\n           log.info(ZkCoreNodeProps.getCoreUrl(leaderProps) + \": Sync failed - asking replica (\" + srsp.getShardAddress() + \") to recover.\");\n           if (isClosed) {\n             log.info(\"We have been closed, don't request that a replica recover\");\n           } else {\n             requestRecovery(leaderProps, ((ShardCoreRequest)srsp.getShardRequest()).baseUrl, ((ShardCoreRequest)srsp.getShardRequest()).coreName);\n           }\n         } catch (Exception e) {\n           SolrException.log(log, ZkCoreNodeProps.getCoreUrl(leaderProps) + \": Could not tell a replica to recover\", e);\n         }\n      } else {\n        log.info(ZkCoreNodeProps.getCoreUrl(leaderProps) + \": \" + \" sync completed with \" + srsp.getShardAddress());\n      }\n      \n    }\n\n  }\n\n","sourceOld":"  private void syncToMe(ZkController zkController, String collection,\n      String shardId, ZkNodeProps leaderProps, CoreDescriptor cd) {\n    \n    // sync everyone else\n    // TODO: we should do this in parallel at least\n    List<ZkCoreNodeProps> nodes = zkController\n        .getZkStateReader()\n        .getReplicaProps(collection, shardId,\n            cd.getCloudDescriptor().getCoreNodeName(),\n            leaderProps.getStr(ZkStateReader.CORE_NAME_PROP));\n    if (nodes == null) {\n      log.info(ZkCoreNodeProps.getCoreUrl(leaderProps) + \" has no replicas\");\n      return;\n    }\n\n    ZkCoreNodeProps zkLeader = new ZkCoreNodeProps(leaderProps);\n    for (ZkCoreNodeProps node : nodes) {\n      try {\n        log.info(ZkCoreNodeProps.getCoreUrl(leaderProps) + \": try and ask \" + node.getCoreUrl() + \" to sync\");\n        \n        requestSync(node.getBaseUrl(), node.getCoreUrl(), zkLeader.getCoreUrl(), node.getCoreName());\n        \n      } catch (Exception e) {\n        SolrException.log(log, \"Error syncing replica to leader\", e);\n      }\n    }\n    \n    \n    for(;;) {\n      ShardResponse srsp = shardHandler.takeCompletedOrError();\n      if (srsp == null) break;\n      boolean success = handleResponse(srsp);\n      if (srsp.getException() != null) {\n        SolrException.log(log, \"Sync request error: \" + srsp.getException());\n      }\n      \n      if (!success) {\n         try {\n           log.info(ZkCoreNodeProps.getCoreUrl(leaderProps) + \": Sync failed - asking replica (\" + srsp.getShardAddress() + \") to recover.\");\n           if (isClosed) {\n             log.info(\"We have been closed, don't request that a replica recover\");\n           } else {\n             requestRecovery(leaderProps, ((ShardCoreRequest)srsp.getShardRequest()).baseUrl, ((ShardCoreRequest)srsp.getShardRequest()).coreName);\n           }\n         } catch (Throwable t) {\n           SolrException.log(log, ZkCoreNodeProps.getCoreUrl(leaderProps) + \": Could not tell a replica to recover\", t);\n         }\n      } else {\n        log.info(ZkCoreNodeProps.getCoreUrl(leaderProps) + \": \" + \" sync completed with \" + srsp.getShardAddress());\n      }\n      \n    }\n\n  }\n\n","bugFix":["6013b4c7388f1627659c8f96c44abd10a294d3a6"],"bugIntro":["9f1bee4bba8988141f8357bda2ccd9405926c4e5"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a81e7d9c7ad18b6ec658ebdb132dd51a2164f039","date":1405209123,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#syncToMe(ZkController,String,String,ZkNodeProps,CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#syncToMe(ZkController,String,String,ZkNodeProps,CoreDescriptor).mjava","sourceNew":"  private void syncToMe(ZkController zkController, String collection,\n      String shardId, ZkNodeProps leaderProps, CoreDescriptor cd) {\n    \n    // sync everyone else\n    // TODO: we should do this in parallel at least\n    List<ZkCoreNodeProps> nodes = zkController\n        .getZkStateReader()\n        .getReplicaProps(collection, shardId,\n            cd.getCloudDescriptor().getCoreNodeName());\n    if (nodes == null) {\n      log.info(ZkCoreNodeProps.getCoreUrl(leaderProps) + \" has no replicas\");\n      return;\n    }\n\n    ZkCoreNodeProps zkLeader = new ZkCoreNodeProps(leaderProps);\n    for (ZkCoreNodeProps node : nodes) {\n      try {\n        log.info(ZkCoreNodeProps.getCoreUrl(leaderProps) + \": try and ask \" + node.getCoreUrl() + \" to sync\");\n        \n        requestSync(node.getBaseUrl(), node.getCoreUrl(), zkLeader.getCoreUrl(), node.getCoreName());\n        \n      } catch (Exception e) {\n        SolrException.log(log, \"Error syncing replica to leader\", e);\n      }\n    }\n    \n    \n    for(;;) {\n      ShardResponse srsp = shardHandler.takeCompletedOrError();\n      if (srsp == null) break;\n      boolean success = handleResponse(srsp);\n      if (srsp.getException() != null) {\n        SolrException.log(log, \"Sync request error: \" + srsp.getException());\n      }\n      \n      if (!success) {\n         try {\n           log.info(ZkCoreNodeProps.getCoreUrl(leaderProps) + \": Sync failed - asking replica (\" + srsp.getShardAddress() + \") to recover.\");\n           if (isClosed) {\n             log.info(\"We have been closed, don't request that a replica recover\");\n           } else {\n             requestRecovery(leaderProps, ((ShardCoreRequest)srsp.getShardRequest()).baseUrl, ((ShardCoreRequest)srsp.getShardRequest()).coreName);\n           }\n         } catch (Exception e) {\n           SolrException.log(log, ZkCoreNodeProps.getCoreUrl(leaderProps) + \": Could not tell a replica to recover\", e);\n         }\n      } else {\n        log.info(ZkCoreNodeProps.getCoreUrl(leaderProps) + \": \" + \" sync completed with \" + srsp.getShardAddress());\n      }\n      \n    }\n\n  }\n\n","sourceOld":"  private void syncToMe(ZkController zkController, String collection,\n      String shardId, ZkNodeProps leaderProps, CoreDescriptor cd) {\n    \n    // sync everyone else\n    // TODO: we should do this in parallel at least\n    List<ZkCoreNodeProps> nodes = zkController\n        .getZkStateReader()\n        .getReplicaProps(collection, shardId,\n            cd.getCloudDescriptor().getCoreNodeName(),\n            leaderProps.getStr(ZkStateReader.CORE_NAME_PROP));\n    if (nodes == null) {\n      log.info(ZkCoreNodeProps.getCoreUrl(leaderProps) + \" has no replicas\");\n      return;\n    }\n\n    ZkCoreNodeProps zkLeader = new ZkCoreNodeProps(leaderProps);\n    for (ZkCoreNodeProps node : nodes) {\n      try {\n        log.info(ZkCoreNodeProps.getCoreUrl(leaderProps) + \": try and ask \" + node.getCoreUrl() + \" to sync\");\n        \n        requestSync(node.getBaseUrl(), node.getCoreUrl(), zkLeader.getCoreUrl(), node.getCoreName());\n        \n      } catch (Exception e) {\n        SolrException.log(log, \"Error syncing replica to leader\", e);\n      }\n    }\n    \n    \n    for(;;) {\n      ShardResponse srsp = shardHandler.takeCompletedOrError();\n      if (srsp == null) break;\n      boolean success = handleResponse(srsp);\n      if (srsp.getException() != null) {\n        SolrException.log(log, \"Sync request error: \" + srsp.getException());\n      }\n      \n      if (!success) {\n         try {\n           log.info(ZkCoreNodeProps.getCoreUrl(leaderProps) + \": Sync failed - asking replica (\" + srsp.getShardAddress() + \") to recover.\");\n           if (isClosed) {\n             log.info(\"We have been closed, don't request that a replica recover\");\n           } else {\n             requestRecovery(leaderProps, ((ShardCoreRequest)srsp.getShardRequest()).baseUrl, ((ShardCoreRequest)srsp.getShardRequest()).coreName);\n           }\n         } catch (Exception e) {\n           SolrException.log(log, ZkCoreNodeProps.getCoreUrl(leaderProps) + \": Could not tell a replica to recover\", e);\n         }\n      } else {\n        log.info(ZkCoreNodeProps.getCoreUrl(leaderProps) + \": \" + \" sync completed with \" + srsp.getShardAddress());\n      }\n      \n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9f1bee4bba8988141f8357bda2ccd9405926c4e5","date":1449703835,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#syncToMe(ZkController,String,String,ZkNodeProps,CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#syncToMe(ZkController,String,String,ZkNodeProps,CoreDescriptor).mjava","sourceNew":"  private void syncToMe(ZkController zkController, String collection,\n      String shardId, ZkNodeProps leaderProps, CoreDescriptor cd) {\n    \n    // sync everyone else\n    // TODO: we should do this in parallel at least\n    List<ZkCoreNodeProps> nodes = zkController\n        .getZkStateReader()\n        .getReplicaProps(collection, shardId,\n            cd.getCloudDescriptor().getCoreNodeName());\n    if (nodes == null) {\n      log.info(ZkCoreNodeProps.getCoreUrl(leaderProps) + \" has no replicas\");\n      return;\n    }\n\n    ZkCoreNodeProps zkLeader = new ZkCoreNodeProps(leaderProps);\n    for (ZkCoreNodeProps node : nodes) {\n      try {\n        log.info(ZkCoreNodeProps.getCoreUrl(leaderProps) + \": try and ask \" + node.getCoreUrl() + \" to sync\");\n        \n        requestSync(node.getBaseUrl(), node.getCoreUrl(), zkLeader.getCoreUrl(), node.getCoreName());\n        \n      } catch (Exception e) {\n        SolrException.log(log, \"Error syncing replica to leader\", e);\n      }\n    }\n    \n    \n    for(;;) {\n      ShardResponse srsp = shardHandler.takeCompletedOrError();\n      if (srsp == null) break;\n      boolean success = handleResponse(srsp);\n      if (srsp.getException() != null) {\n        SolrException.log(log, \"Sync request error: \" + srsp.getException());\n      }\n      \n      if (!success) {\n        log.info(ZkCoreNodeProps.getCoreUrl(leaderProps) + \": Sync failed - we will ask replica (\" + srsp.getShardAddress()\n            + \") to recover.\");\n        if (isClosed) {\n          log.info(\"We have been closed, don't request that a replica recover\");\n        } else {\n          RecoveryRequest rr = new RecoveryRequest();\n          rr.leaderProps = leaderProps;\n          rr.baseUrl = ((ShardCoreRequest) srsp.getShardRequest()).baseUrl;\n          rr.coreName = ((ShardCoreRequest) srsp.getShardRequest()).coreName;\n          recoveryRequests.add(rr);\n        }\n      } else {\n        log.info(ZkCoreNodeProps.getCoreUrl(leaderProps) + \": \" + \" sync completed with \" + srsp.getShardAddress());\n      }\n      \n    }\n\n  }\n\n","sourceOld":"  private void syncToMe(ZkController zkController, String collection,\n      String shardId, ZkNodeProps leaderProps, CoreDescriptor cd) {\n    \n    // sync everyone else\n    // TODO: we should do this in parallel at least\n    List<ZkCoreNodeProps> nodes = zkController\n        .getZkStateReader()\n        .getReplicaProps(collection, shardId,\n            cd.getCloudDescriptor().getCoreNodeName());\n    if (nodes == null) {\n      log.info(ZkCoreNodeProps.getCoreUrl(leaderProps) + \" has no replicas\");\n      return;\n    }\n\n    ZkCoreNodeProps zkLeader = new ZkCoreNodeProps(leaderProps);\n    for (ZkCoreNodeProps node : nodes) {\n      try {\n        log.info(ZkCoreNodeProps.getCoreUrl(leaderProps) + \": try and ask \" + node.getCoreUrl() + \" to sync\");\n        \n        requestSync(node.getBaseUrl(), node.getCoreUrl(), zkLeader.getCoreUrl(), node.getCoreName());\n        \n      } catch (Exception e) {\n        SolrException.log(log, \"Error syncing replica to leader\", e);\n      }\n    }\n    \n    \n    for(;;) {\n      ShardResponse srsp = shardHandler.takeCompletedOrError();\n      if (srsp == null) break;\n      boolean success = handleResponse(srsp);\n      if (srsp.getException() != null) {\n        SolrException.log(log, \"Sync request error: \" + srsp.getException());\n      }\n      \n      if (!success) {\n         try {\n           log.info(ZkCoreNodeProps.getCoreUrl(leaderProps) + \": Sync failed - asking replica (\" + srsp.getShardAddress() + \") to recover.\");\n           if (isClosed) {\n             log.info(\"We have been closed, don't request that a replica recover\");\n           } else {\n             requestRecovery(leaderProps, ((ShardCoreRequest)srsp.getShardRequest()).baseUrl, ((ShardCoreRequest)srsp.getShardRequest()).coreName);\n           }\n         } catch (Exception e) {\n           SolrException.log(log, ZkCoreNodeProps.getCoreUrl(leaderProps) + \": Could not tell a replica to recover\", e);\n         }\n      } else {\n        log.info(ZkCoreNodeProps.getCoreUrl(leaderProps) + \": \" + \" sync completed with \" + srsp.getShardAddress());\n      }\n      \n    }\n\n  }\n\n","bugFix":["08404c494c3d7f0f23c26191b824a38ac9384877","221ff19d62d5ff429ffecf8e7f3e01ff93754854","ce9115008b2600dda16a6765e06b6b380458c02f","f56da6f4f15d95f318d2d6ac2a39a9183dfecff2"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a678060dc71c218831c2b3b18d0064573c6a968d","date":1455918109,"type":5,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#syncToMe(ZkController,String,String,ZkNodeProps,CoreDescriptor,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#syncToMe(ZkController,String,String,ZkNodeProps,CoreDescriptor).mjava","sourceNew":"  private void syncToMe(ZkController zkController, String collection,\n                        String shardId, ZkNodeProps leaderProps, CoreDescriptor cd,\n                        int nUpdates) {\n    \n    // sync everyone else\n    // TODO: we should do this in parallel at least\n    List<ZkCoreNodeProps> nodes = zkController\n        .getZkStateReader()\n        .getReplicaProps(collection, shardId,\n            cd.getCloudDescriptor().getCoreNodeName());\n    if (nodes == null) {\n      log.info(ZkCoreNodeProps.getCoreUrl(leaderProps) + \" has no replicas\");\n      return;\n    }\n\n    ZkCoreNodeProps zkLeader = new ZkCoreNodeProps(leaderProps);\n    for (ZkCoreNodeProps node : nodes) {\n      try {\n        log.info(ZkCoreNodeProps.getCoreUrl(leaderProps) + \": try and ask \" + node.getCoreUrl() + \" to sync\");\n        \n        requestSync(node.getBaseUrl(), node.getCoreUrl(), zkLeader.getCoreUrl(), node.getCoreName(), nUpdates);\n        \n      } catch (Exception e) {\n        SolrException.log(log, \"Error syncing replica to leader\", e);\n      }\n    }\n    \n    \n    for(;;) {\n      ShardResponse srsp = shardHandler.takeCompletedOrError();\n      if (srsp == null) break;\n      boolean success = handleResponse(srsp);\n      if (srsp.getException() != null) {\n        SolrException.log(log, \"Sync request error: \" + srsp.getException());\n      }\n      \n      if (!success) {\n        log.info(ZkCoreNodeProps.getCoreUrl(leaderProps) + \": Sync failed - we will ask replica (\" + srsp.getShardAddress()\n            + \") to recover.\");\n        if (isClosed) {\n          log.info(\"We have been closed, don't request that a replica recover\");\n        } else {\n          RecoveryRequest rr = new RecoveryRequest();\n          rr.leaderProps = leaderProps;\n          rr.baseUrl = ((ShardCoreRequest) srsp.getShardRequest()).baseUrl;\n          rr.coreName = ((ShardCoreRequest) srsp.getShardRequest()).coreName;\n          recoveryRequests.add(rr);\n        }\n      } else {\n        log.info(ZkCoreNodeProps.getCoreUrl(leaderProps) + \": \" + \" sync completed with \" + srsp.getShardAddress());\n      }\n      \n    }\n\n  }\n\n","sourceOld":"  private void syncToMe(ZkController zkController, String collection,\n      String shardId, ZkNodeProps leaderProps, CoreDescriptor cd) {\n    \n    // sync everyone else\n    // TODO: we should do this in parallel at least\n    List<ZkCoreNodeProps> nodes = zkController\n        .getZkStateReader()\n        .getReplicaProps(collection, shardId,\n            cd.getCloudDescriptor().getCoreNodeName());\n    if (nodes == null) {\n      log.info(ZkCoreNodeProps.getCoreUrl(leaderProps) + \" has no replicas\");\n      return;\n    }\n\n    ZkCoreNodeProps zkLeader = new ZkCoreNodeProps(leaderProps);\n    for (ZkCoreNodeProps node : nodes) {\n      try {\n        log.info(ZkCoreNodeProps.getCoreUrl(leaderProps) + \": try and ask \" + node.getCoreUrl() + \" to sync\");\n        \n        requestSync(node.getBaseUrl(), node.getCoreUrl(), zkLeader.getCoreUrl(), node.getCoreName());\n        \n      } catch (Exception e) {\n        SolrException.log(log, \"Error syncing replica to leader\", e);\n      }\n    }\n    \n    \n    for(;;) {\n      ShardResponse srsp = shardHandler.takeCompletedOrError();\n      if (srsp == null) break;\n      boolean success = handleResponse(srsp);\n      if (srsp.getException() != null) {\n        SolrException.log(log, \"Sync request error: \" + srsp.getException());\n      }\n      \n      if (!success) {\n        log.info(ZkCoreNodeProps.getCoreUrl(leaderProps) + \": Sync failed - we will ask replica (\" + srsp.getShardAddress()\n            + \") to recover.\");\n        if (isClosed) {\n          log.info(\"We have been closed, don't request that a replica recover\");\n        } else {\n          RecoveryRequest rr = new RecoveryRequest();\n          rr.leaderProps = leaderProps;\n          rr.baseUrl = ((ShardCoreRequest) srsp.getShardRequest()).baseUrl;\n          rr.coreName = ((ShardCoreRequest) srsp.getShardRequest()).coreName;\n          recoveryRequests.add(rr);\n        }\n      } else {\n        log.info(ZkCoreNodeProps.getCoreUrl(leaderProps) + \": \" + \" sync completed with \" + srsp.getShardAddress());\n      }\n      \n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"849494cf2f3a96af5c8c84995108ddd8456fcd04":["cb4a195b8dc1808cd01748bd2e0fba26ca915d4d"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["cb4a195b8dc1808cd01748bd2e0fba26ca915d4d","849494cf2f3a96af5c8c84995108ddd8456fcd04"],"9f1bee4bba8988141f8357bda2ccd9405926c4e5":["a81e7d9c7ad18b6ec658ebdb132dd51a2164f039"],"a81e7d9c7ad18b6ec658ebdb132dd51a2164f039":["f56da6f4f15d95f318d2d6ac2a39a9183dfecff2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f56da6f4f15d95f318d2d6ac2a39a9183dfecff2":["849494cf2f3a96af5c8c84995108ddd8456fcd04"],"cb4a195b8dc1808cd01748bd2e0fba26ca915d4d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a678060dc71c218831c2b3b18d0064573c6a968d"],"a678060dc71c218831c2b3b18d0064573c6a968d":["9f1bee4bba8988141f8357bda2ccd9405926c4e5"]},"commit2Childs":{"849494cf2f3a96af5c8c84995108ddd8456fcd04":["37a0f60745e53927c4c876cfe5b5a58170f0646c","f56da6f4f15d95f318d2d6ac2a39a9183dfecff2"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"9f1bee4bba8988141f8357bda2ccd9405926c4e5":["a678060dc71c218831c2b3b18d0064573c6a968d"],"a81e7d9c7ad18b6ec658ebdb132dd51a2164f039":["9f1bee4bba8988141f8357bda2ccd9405926c4e5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cb4a195b8dc1808cd01748bd2e0fba26ca915d4d"],"cb4a195b8dc1808cd01748bd2e0fba26ca915d4d":["849494cf2f3a96af5c8c84995108ddd8456fcd04","37a0f60745e53927c4c876cfe5b5a58170f0646c"],"f56da6f4f15d95f318d2d6ac2a39a9183dfecff2":["a81e7d9c7ad18b6ec658ebdb132dd51a2164f039"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"a678060dc71c218831c2b3b18d0064573c6a968d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}