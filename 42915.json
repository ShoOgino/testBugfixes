{"path":"backwards/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testPhrasePrefixWithBooleanQuery().mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testPhrasePrefixWithBooleanQuery().mjava","pathOld":"/dev/null","sourceNew":"  public void testPhrasePrefixWithBooleanQuery() throws IOException {\n    RAMDirectory indexStore = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(indexStore, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT, Collections.emptySet()), true, IndexWriter.MaxFieldLength.LIMITED);\n    add(\"This is a test\", \"object\", writer);\n    add(\"a note\", \"note\", writer);\n    writer.close();\n    \n    IndexSearcher searcher = new IndexSearcher(indexStore, true);\n\n    // This query will be equivalent to +type:note +body:\"a t*\"\n    BooleanQuery q = new BooleanQuery();\n    q.add(new TermQuery(new Term(\"type\", \"note\")), BooleanClause.Occur.MUST);\n\n    MultiPhraseQuery trouble = new MultiPhraseQuery();\n    trouble.add(new Term(\"body\", \"a\"));\n    trouble.add(new Term[] { new Term(\"body\", \"test\"), new Term(\"body\", \"this\") });\n    q.add(trouble, BooleanClause.Occur.MUST);\n\n    // exception will be thrown here without fix for #35626:\n    ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(\"Wrong number of hits\", 0, hits.length);\n    searcher.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testPhrasePrefixWithBooleanQuery().mjava","pathOld":"backwards/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testPhrasePrefixWithBooleanQuery().mjava","sourceNew":"  public void testPhrasePrefixWithBooleanQuery() throws IOException {\n    RAMDirectory indexStore = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(indexStore, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT, Collections.emptySet()), true, IndexWriter.MaxFieldLength.LIMITED);\n    add(\"This is a test\", \"object\", writer);\n    add(\"a note\", \"note\", writer);\n    writer.close();\n    \n    IndexSearcher searcher = new IndexSearcher(indexStore, true);\n\n    // This query will be equivalent to +type:note +body:\"a t*\"\n    BooleanQuery q = new BooleanQuery();\n    q.add(new TermQuery(new Term(\"type\", \"note\")), BooleanClause.Occur.MUST);\n\n    MultiPhraseQuery trouble = new MultiPhraseQuery();\n    trouble.add(new Term(\"body\", \"a\"));\n    trouble.add(new Term[] { new Term(\"body\", \"test\"), new Term(\"body\", \"this\") });\n    q.add(trouble, BooleanClause.Occur.MUST);\n\n    // exception will be thrown here without fix for #35626:\n    ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(\"Wrong number of hits\", 0, hits.length);\n    searcher.close();\n  }\n\n","sourceOld":"  public void testPhrasePrefixWithBooleanQuery() throws IOException {\n    RAMDirectory indexStore = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(indexStore, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT, Collections.emptySet()), true, IndexWriter.MaxFieldLength.LIMITED);\n    add(\"This is a test\", \"object\", writer);\n    add(\"a note\", \"note\", writer);\n    writer.close();\n    \n    IndexSearcher searcher = new IndexSearcher(indexStore, true);\n\n    // This query will be equivalent to +type:note +body:\"a t*\"\n    BooleanQuery q = new BooleanQuery();\n    q.add(new TermQuery(new Term(\"type\", \"note\")), BooleanClause.Occur.MUST);\n\n    MultiPhraseQuery trouble = new MultiPhraseQuery();\n    trouble.add(new Term(\"body\", \"a\"));\n    trouble.add(new Term[] { new Term(\"body\", \"test\"), new Term(\"body\", \"this\") });\n    q.add(trouble, BooleanClause.Occur.MUST);\n\n    // exception will be thrown here without fix for #35626:\n    ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(\"Wrong number of hits\", 0, hits.length);\n    searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}