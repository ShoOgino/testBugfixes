{"path":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellStemFilter#HunspellStemFilter(TokenStream,Dictionary,int).mjava","commits":[{"id":"dc3f094cafa4a87b4066e1d6710fa4e6afe6260e","date":1393532367,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellStemFilter#HunspellStemFilter(TokenStream,Dictionary,int).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell2/Hunspell2StemFilter#Hunspell2StemFilter(TokenStream,Dictionary,int).mjava","sourceNew":"  /**\n   * Creates a new Hunspell2StemFilter that will stem tokens from the given TokenStream using affix rules in the provided\n   * Dictionary\n   *\n   * @param input TokenStream whose tokens will be stemmed\n   * @param dictionary HunspellDictionary containing the affix rules and words that will be used to stem the tokens\n   * @param recursionCap maximum level of recursion stemmer can go into, defaults to <code>2</code>\n   */\n  public HunspellStemFilter(TokenStream input, Dictionary dictionary, int recursionCap) {\n    this(input, dictionary, true, recursionCap);\n  }\n\n","sourceOld":"  /**\n   * Creates a new Hunspell2StemFilter that will stem tokens from the given TokenStream using affix rules in the provided\n   * Dictionary\n   *\n   * @param input TokenStream whose tokens will be stemmed\n   * @param dictionary HunspellDictionary containing the affix rules and words that will be used to stem the tokens\n   * @param recursionCap maximum level of recursion stemmer can go into, defaults to <code>2</code>\n   */\n  public Hunspell2StemFilter(TokenStream input, Dictionary dictionary, int recursionCap) {\n    this(input, dictionary, true, recursionCap);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"843e3d7739f44ea33024019813400f7de2507547","date":1393532390,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellStemFilter#HunspellStemFilter(TokenStream,Dictionary,int).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellStemFilter#HunspellStemFilter(TokenStream,Dictionary,int).mjava","sourceNew":"  /**\n   * Creates a new HunspellStemFilter that will stem tokens from the given TokenStream using affix rules in the provided\n   * Dictionary\n   *\n   * @param input TokenStream whose tokens will be stemmed\n   * @param dictionary HunspellDictionary containing the affix rules and words that will be used to stem the tokens\n   * @param recursionCap maximum level of recursion stemmer can go into, defaults to <code>2</code>\n   */\n  public HunspellStemFilter(TokenStream input, Dictionary dictionary, int recursionCap) {\n    this(input, dictionary, true, recursionCap);\n  }\n\n","sourceOld":"  /**\n   * Creates a new Hunspell2StemFilter that will stem tokens from the given TokenStream using affix rules in the provided\n   * Dictionary\n   *\n   * @param input TokenStream whose tokens will be stemmed\n   * @param dictionary HunspellDictionary containing the affix rules and words that will be used to stem the tokens\n   * @param recursionCap maximum level of recursion stemmer can go into, defaults to <code>2</code>\n   */\n  public HunspellStemFilter(TokenStream input, Dictionary dictionary, int recursionCap) {\n    this(input, dictionary, true, recursionCap);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba791bce8103c79e38f957e9c5a53a75871bd918","date":1393539206,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellStemFilter#HunspellStemFilter(TokenStream,Dictionary,int).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellStemFilter#HunspellStemFilter(TokenStream,HunspellDictionary,int).mjava","sourceNew":"  /**\n   * Creates a new HunspellStemFilter that will stem tokens from the given TokenStream using affix rules in the provided\n   * Dictionary\n   *\n   * @param input TokenStream whose tokens will be stemmed\n   * @param dictionary HunspellDictionary containing the affix rules and words that will be used to stem the tokens\n   * @param recursionCap maximum level of recursion stemmer can go into, defaults to <code>2</code>\n   */\n  public HunspellStemFilter(TokenStream input, Dictionary dictionary, int recursionCap) {\n    this(input, dictionary, true, recursionCap);\n  }\n\n","sourceOld":"  /**\n   * Creates a new HunspellStemFilter that will stem tokens from the given TokenStream using affix rules in the provided\n   * HunspellDictionary\n   *\n   * @param input TokenStream whose tokens will be stemmed\n   * @param dictionary HunspellDictionary containing the affix rules and words that will be used to stem the tokens\n   * @param recursionCap maximum level of recursion stemmer can go into, defaults to <code>2</code>\n   */\n  public HunspellStemFilter(TokenStream input, HunspellDictionary dictionary, int recursionCap) {\n    this(input, dictionary, true, recursionCap);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1bc1343e76d5f1ad7d6a35dd8c55fb52f9b4e3a7","date":1393724838,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellStemFilter#HunspellStemFilter(TokenStream,Dictionary,int).mjava","sourceNew":null,"sourceOld":"  /**\n   * Creates a new HunspellStemFilter that will stem tokens from the given TokenStream using affix rules in the provided\n   * Dictionary\n   *\n   * @param input TokenStream whose tokens will be stemmed\n   * @param dictionary HunspellDictionary containing the affix rules and words that will be used to stem the tokens\n   * @param recursionCap maximum level of recursion stemmer can go into, defaults to <code>2</code>\n   */\n  public HunspellStemFilter(TokenStream input, Dictionary dictionary, int recursionCap) {\n    this(input, dictionary, true, recursionCap);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"843e3d7739f44ea33024019813400f7de2507547":["dc3f094cafa4a87b4066e1d6710fa4e6afe6260e"],"1bc1343e76d5f1ad7d6a35dd8c55fb52f9b4e3a7":["ba791bce8103c79e38f957e9c5a53a75871bd918"],"ba791bce8103c79e38f957e9c5a53a75871bd918":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","843e3d7739f44ea33024019813400f7de2507547"],"dc3f094cafa4a87b4066e1d6710fa4e6afe6260e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1bc1343e76d5f1ad7d6a35dd8c55fb52f9b4e3a7"]},"commit2Childs":{"843e3d7739f44ea33024019813400f7de2507547":["ba791bce8103c79e38f957e9c5a53a75871bd918"],"1bc1343e76d5f1ad7d6a35dd8c55fb52f9b4e3a7":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ba791bce8103c79e38f957e9c5a53a75871bd918":["1bc1343e76d5f1ad7d6a35dd8c55fb52f9b4e3a7"],"dc3f094cafa4a87b4066e1d6710fa4e6afe6260e":["843e3d7739f44ea33024019813400f7de2507547"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ba791bce8103c79e38f957e9c5a53a75871bd918","dc3f094cafa4a87b4066e1d6710fa4e6afe6260e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}