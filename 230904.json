{"path":"lucene/src/java/org/apache/lucene/index/IndexWriter#copySegmentAsIs(SegmentInfo,String,Map[String,String],Set[String],IOContext).mjava","commits":[{"id":"639c36565ce03aed5b0fce7c9e4448e53a1f7efd","date":1308580104,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#copySegmentAsIs(SegmentInfo,String,Map[String,String],Set[String],IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#copySegmentAsIs(SegmentInfo,String,Map[String,String],Set[String]).mjava","sourceNew":"  /** Copies the segment files as-is into the IndexWriter's directory. */\n  private void copySegmentAsIs(SegmentInfo info, String segName,\n      Map<String, String> dsNames, Set<String> dsFilesCopied, IOContext context)\n      throws IOException {\n    // Determine if the doc store of this segment needs to be copied. It's\n    // only relevant for segments that share doc store with others,\n    // because the DS might have been copied already, in which case we\n    // just want to update the DS name of this SegmentInfo.\n    // NOTE: pre-3x segments include a null DSName if they don't share doc\n    // store. The following code ensures we don't accidentally insert\n    // 'null' to the map.\n    String dsName = info.getDocStoreSegment();\n    final String newDsName;\n    if (dsName != null) {\n      if (dsNames.containsKey(dsName)) {\n        newDsName = dsNames.get(dsName);\n      } else {\n        dsNames.put(dsName, segName);\n        newDsName = segName;\n      }\n    } else {\n      newDsName = segName;\n    }\n    \n    // Copy the segment files\n    for (String file: info.files()) {\n      final String newFileName;\n      if (IndexFileNames.isDocStoreFile(file)) {\n        newFileName = newDsName + IndexFileNames.stripSegmentName(file);\n        if (dsFilesCopied.contains(newFileName)) {\n          continue;\n        }\n        dsFilesCopied.add(newFileName);\n      } else {\n        newFileName = segName + IndexFileNames.stripSegmentName(file);\n      }\n      \n      assert !directory.fileExists(newFileName): \"file \\\"\" + newFileName + \"\\\" already exists\";\n      info.dir.copy(directory, file, newFileName, context);\n    }\n    \n    info.setDocStore(info.getDocStoreOffset(), newDsName, info.getDocStoreIsCompoundFile());\n    info.dir = directory;\n    info.name = segName;\n  }\n\n","sourceOld":"  /** Copies the segment files as-is into the IndexWriter's directory. */\n  private void copySegmentAsIs(SegmentInfo info, String segName,\n      Map<String, String> dsNames, Set<String> dsFilesCopied)\n      throws IOException {\n    // Determine if the doc store of this segment needs to be copied. It's\n    // only relevant for segments that share doc store with others,\n    // because the DS might have been copied already, in which case we\n    // just want to update the DS name of this SegmentInfo.\n    // NOTE: pre-3x segments include a null DSName if they don't share doc\n    // store. The following code ensures we don't accidentally insert\n    // 'null' to the map.\n    String dsName = info.getDocStoreSegment();\n    final String newDsName;\n    if (dsName != null) {\n      if (dsNames.containsKey(dsName)) {\n        newDsName = dsNames.get(dsName);\n      } else {\n        dsNames.put(dsName, segName);\n        newDsName = segName;\n      }\n    } else {\n      newDsName = segName;\n    }\n    \n    // Copy the segment files\n    for (String file: info.files()) {\n      final String newFileName;\n      if (IndexFileNames.isDocStoreFile(file)) {\n        newFileName = newDsName + IndexFileNames.stripSegmentName(file);\n        if (dsFilesCopied.contains(newFileName)) {\n          continue;\n        }\n        dsFilesCopied.add(newFileName);\n      } else {\n        newFileName = segName + IndexFileNames.stripSegmentName(file);\n      }\n      \n      assert !directory.fileExists(newFileName): \"file \\\"\" + newFileName + \"\\\" already exists\";\n      info.dir.copy(directory, file, newFileName);\n    }\n    \n    info.setDocStore(info.getDocStoreOffset(), newDsName, info.getDocStoreIsCompoundFile());\n    info.dir = directory;\n    info.name = segName;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ddc4c914be86e34b54f70023f45a60fa7f04e929","date":1310115160,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#copySegmentAsIs(SegmentInfo,String,Map[String,String],Set[String],IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#copySegmentAsIs(SegmentInfo,String,Map[String,String],Set[String]).mjava","sourceNew":"  /** Copies the segment files as-is into the IndexWriter's directory. */\n  private void copySegmentAsIs(SegmentInfo info, String segName,\n      Map<String, String> dsNames, Set<String> dsFilesCopied, IOContext context)\n      throws IOException {\n    // Determine if the doc store of this segment needs to be copied. It's\n    // only relevant for segments that share doc store with others,\n    // because the DS might have been copied already, in which case we\n    // just want to update the DS name of this SegmentInfo.\n    // NOTE: pre-3x segments include a null DSName if they don't share doc\n    // store. The following code ensures we don't accidentally insert\n    // 'null' to the map.\n    String dsName = info.getDocStoreSegment();\n    final String newDsName;\n    if (dsName != null) {\n      if (dsNames.containsKey(dsName)) {\n        newDsName = dsNames.get(dsName);\n      } else {\n        dsNames.put(dsName, segName);\n        newDsName = segName;\n      }\n    } else {\n      newDsName = segName;\n    }\n    \n    // Copy the segment files\n    for (String file: info.files()) {\n      final String newFileName;\n      if (IndexFileNames.isDocStoreFile(file)) {\n        newFileName = newDsName + IndexFileNames.stripSegmentName(file);\n        if (dsFilesCopied.contains(newFileName)) {\n          continue;\n        }\n        dsFilesCopied.add(newFileName);\n      } else {\n        newFileName = segName + IndexFileNames.stripSegmentName(file);\n      }\n      \n      assert !directory.fileExists(newFileName): \"file \\\"\" + newFileName + \"\\\" already exists\";\n      info.dir.copy(directory, file, newFileName, context);\n    }\n    \n    info.setDocStore(info.getDocStoreOffset(), newDsName, info.getDocStoreIsCompoundFile());\n    info.dir = directory;\n    info.name = segName;\n  }\n\n","sourceOld":"  /** Copies the segment files as-is into the IndexWriter's directory. */\n  private void copySegmentAsIs(SegmentInfo info, String segName,\n      Map<String, String> dsNames, Set<String> dsFilesCopied)\n      throws IOException {\n    // Determine if the doc store of this segment needs to be copied. It's\n    // only relevant for segments that share doc store with others,\n    // because the DS might have been copied already, in which case we\n    // just want to update the DS name of this SegmentInfo.\n    // NOTE: pre-3x segments include a null DSName if they don't share doc\n    // store. The following code ensures we don't accidentally insert\n    // 'null' to the map.\n    String dsName = info.getDocStoreSegment();\n    final String newDsName;\n    if (dsName != null) {\n      if (dsNames.containsKey(dsName)) {\n        newDsName = dsNames.get(dsName);\n      } else {\n        dsNames.put(dsName, segName);\n        newDsName = segName;\n      }\n    } else {\n      newDsName = segName;\n    }\n    \n    // Copy the segment files\n    for (String file: info.files()) {\n      final String newFileName;\n      if (IndexFileNames.isDocStoreFile(file)) {\n        newFileName = newDsName + IndexFileNames.stripSegmentName(file);\n        if (dsFilesCopied.contains(newFileName)) {\n          continue;\n        }\n        dsFilesCopied.add(newFileName);\n      } else {\n        newFileName = segName + IndexFileNames.stripSegmentName(file);\n      }\n      \n      assert !directory.fileExists(newFileName): \"file \\\"\" + newFileName + \"\\\" already exists\";\n      info.dir.copy(directory, file, newFileName);\n    }\n    \n    info.setDocStore(info.getDocStoreOffset(), newDsName, info.getDocStoreIsCompoundFile());\n    info.dir = directory;\n    info.name = segName;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5d004d0e0b3f65bb40da76d476d659d7888270e8","date":1310158940,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#copySegmentAsIs(SegmentInfo,String,Map[String,String],Set[String],IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#copySegmentAsIs(SegmentInfo,String,Map[String,String],Set[String]).mjava","sourceNew":"  /** Copies the segment files as-is into the IndexWriter's directory. */\n  private void copySegmentAsIs(SegmentInfo info, String segName,\n      Map<String, String> dsNames, Set<String> dsFilesCopied, IOContext context)\n      throws IOException {\n    // Determine if the doc store of this segment needs to be copied. It's\n    // only relevant for segments that share doc store with others,\n    // because the DS might have been copied already, in which case we\n    // just want to update the DS name of this SegmentInfo.\n    // NOTE: pre-3x segments include a null DSName if they don't share doc\n    // store. The following code ensures we don't accidentally insert\n    // 'null' to the map.\n    String dsName = info.getDocStoreSegment();\n    final String newDsName;\n    if (dsName != null) {\n      if (dsNames.containsKey(dsName)) {\n        newDsName = dsNames.get(dsName);\n      } else {\n        dsNames.put(dsName, segName);\n        newDsName = segName;\n      }\n    } else {\n      newDsName = segName;\n    }\n    \n    // Copy the segment files\n    for (String file: info.files()) {\n      final String newFileName;\n      if (IndexFileNames.isDocStoreFile(file)) {\n        newFileName = newDsName + IndexFileNames.stripSegmentName(file);\n        if (dsFilesCopied.contains(newFileName)) {\n          continue;\n        }\n        dsFilesCopied.add(newFileName);\n      } else {\n        newFileName = segName + IndexFileNames.stripSegmentName(file);\n      }\n      \n      assert !directory.fileExists(newFileName): \"file \\\"\" + newFileName + \"\\\" already exists\";\n      info.dir.copy(directory, file, newFileName, context);\n    }\n    \n    info.setDocStore(info.getDocStoreOffset(), newDsName, info.getDocStoreIsCompoundFile());\n    info.dir = directory;\n    info.name = segName;\n  }\n\n","sourceOld":"  /** Copies the segment files as-is into the IndexWriter's directory. */\n  private void copySegmentAsIs(SegmentInfo info, String segName,\n      Map<String, String> dsNames, Set<String> dsFilesCopied)\n      throws IOException {\n    // Determine if the doc store of this segment needs to be copied. It's\n    // only relevant for segments that share doc store with others,\n    // because the DS might have been copied already, in which case we\n    // just want to update the DS name of this SegmentInfo.\n    // NOTE: pre-3x segments include a null DSName if they don't share doc\n    // store. The following code ensures we don't accidentally insert\n    // 'null' to the map.\n    String dsName = info.getDocStoreSegment();\n    final String newDsName;\n    if (dsName != null) {\n      if (dsNames.containsKey(dsName)) {\n        newDsName = dsNames.get(dsName);\n      } else {\n        dsNames.put(dsName, segName);\n        newDsName = segName;\n      }\n    } else {\n      newDsName = segName;\n    }\n    \n    // Copy the segment files\n    for (String file: info.files()) {\n      final String newFileName;\n      if (IndexFileNames.isDocStoreFile(file)) {\n        newFileName = newDsName + IndexFileNames.stripSegmentName(file);\n        if (dsFilesCopied.contains(newFileName)) {\n          continue;\n        }\n        dsFilesCopied.add(newFileName);\n      } else {\n        newFileName = segName + IndexFileNames.stripSegmentName(file);\n      }\n      \n      assert !directory.fileExists(newFileName): \"file \\\"\" + newFileName + \"\\\" already exists\";\n      info.dir.copy(directory, file, newFileName);\n    }\n    \n    info.setDocStore(info.getDocStoreOffset(), newDsName, info.getDocStoreIsCompoundFile());\n    info.dir = directory;\n    info.name = segName;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc749c053615f5871f3b95715fe292f34e70a53","date":1321470575,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#copySegmentAsIs(SegmentInfo,String,Map[String,String],Set[String],IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#copySegmentAsIs(SegmentInfo,String,Map[String,String],Set[String],IOContext).mjava","sourceNew":"  /** Copies the segment files as-is into the IndexWriter's directory. */\n  private void copySegmentAsIs(SegmentInfo info, String segName,\n      Map<String, String> dsNames, Set<String> dsFilesCopied, IOContext context)\n      throws IOException {\n    // Determine if the doc store of this segment needs to be copied. It's\n    // only relevant for segments that share doc store with others,\n    // because the DS might have been copied already, in which case we\n    // just want to update the DS name of this SegmentInfo.\n    // NOTE: pre-3x segments include a null DSName if they don't share doc\n    // store. The following code ensures we don't accidentally insert\n    // 'null' to the map.\n    String dsName = info.getDocStoreSegment();\n    final String newDsName;\n    if (dsName != null) {\n      if (dsNames.containsKey(dsName)) {\n        newDsName = dsNames.get(dsName);\n      } else {\n        dsNames.put(dsName, segName);\n        newDsName = segName;\n      }\n    } else {\n      newDsName = segName;\n    }\n    \n    Set<String> codecDocStoreFiles = info.codecDocStoreFiles();\n    // Copy the segment files\n    for (String file: info.files()) {\n      final String newFileName;\n      if (codecDocStoreFiles.contains(file) || file.endsWith(IndexFileNames.COMPOUND_FILE_STORE_EXTENSION)) {\n        newFileName = newDsName + IndexFileNames.stripSegmentName(file);\n        if (dsFilesCopied.contains(newFileName)) {\n          continue;\n        }\n        dsFilesCopied.add(newFileName);\n      } else {\n        newFileName = segName + IndexFileNames.stripSegmentName(file);\n      }\n      \n      assert !directory.fileExists(newFileName): \"file \\\"\" + newFileName + \"\\\" already exists\";\n      info.dir.copy(directory, file, newFileName, context);\n    }\n    \n    info.setDocStore(info.getDocStoreOffset(), newDsName, info.getDocStoreIsCompoundFile());\n    info.dir = directory;\n    info.name = segName;\n  }\n\n","sourceOld":"  /** Copies the segment files as-is into the IndexWriter's directory. */\n  private void copySegmentAsIs(SegmentInfo info, String segName,\n      Map<String, String> dsNames, Set<String> dsFilesCopied, IOContext context)\n      throws IOException {\n    // Determine if the doc store of this segment needs to be copied. It's\n    // only relevant for segments that share doc store with others,\n    // because the DS might have been copied already, in which case we\n    // just want to update the DS name of this SegmentInfo.\n    // NOTE: pre-3x segments include a null DSName if they don't share doc\n    // store. The following code ensures we don't accidentally insert\n    // 'null' to the map.\n    String dsName = info.getDocStoreSegment();\n    final String newDsName;\n    if (dsName != null) {\n      if (dsNames.containsKey(dsName)) {\n        newDsName = dsNames.get(dsName);\n      } else {\n        dsNames.put(dsName, segName);\n        newDsName = segName;\n      }\n    } else {\n      newDsName = segName;\n    }\n    \n    // Copy the segment files\n    for (String file: info.files()) {\n      final String newFileName;\n      if (IndexFileNames.isDocStoreFile(file)) {\n        newFileName = newDsName + IndexFileNames.stripSegmentName(file);\n        if (dsFilesCopied.contains(newFileName)) {\n          continue;\n        }\n        dsFilesCopied.add(newFileName);\n      } else {\n        newFileName = segName + IndexFileNames.stripSegmentName(file);\n      }\n      \n      assert !directory.fileExists(newFileName): \"file \\\"\" + newFileName + \"\\\" already exists\";\n      info.dir.copy(directory, file, newFileName, context);\n    }\n    \n    info.setDocStore(info.getDocStoreOffset(), newDsName, info.getDocStoreIsCompoundFile());\n    info.dir = directory;\n    info.name = segName;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"975446fea038e8da470a870a240379127117d5c8","date":1327929047,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#copySegmentAsIs(SegmentInfo,String,Map[String,String],Set[String],IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#copySegmentAsIs(SegmentInfo,String,Map[String,String],Set[String],IOContext).mjava","sourceNew":"  /** Copies the segment files as-is into the IndexWriter's directory. */\n  private void copySegmentAsIs(SegmentInfo info, String segName,\n      Map<String, String> dsNames, Set<String> dsFilesCopied, IOContext context)\n      throws IOException {\n    // Determine if the doc store of this segment needs to be copied. It's\n    // only relevant for segments that share doc store with others,\n    // because the DS might have been copied already, in which case we\n    // just want to update the DS name of this SegmentInfo.\n    String dsName = info.getDocStoreSegment();\n    assert dsName != null;\n    final String newDsName;\n    if (dsNames.containsKey(dsName)) {\n      newDsName = dsNames.get(dsName);\n    } else {\n      dsNames.put(dsName, segName);\n      newDsName = segName;\n    }\n    \n    // nocommit: remove this\n    Set<String> codecDocStoreFiles = new HashSet<String>();\n    codec.storedFieldsFormat().files(info, codecDocStoreFiles);\n    codec.termVectorsFormat().files(info, codecDocStoreFiles);\n    \n    // Copy the segment files\n    for (String file: info.files()) {\n      final String newFileName;\n      if (codecDocStoreFiles.contains(file) || file.endsWith(IndexFileNames.COMPOUND_FILE_STORE_EXTENSION)) {\n        newFileName = newDsName + IndexFileNames.stripSegmentName(file);\n        if (dsFilesCopied.contains(newFileName)) {\n          continue;\n        }\n        dsFilesCopied.add(newFileName);\n      } else {\n        newFileName = segName + IndexFileNames.stripSegmentName(file);\n      }\n      \n      assert !directory.fileExists(newFileName): \"file \\\"\" + newFileName + \"\\\" already exists\";\n      info.dir.copy(directory, file, newFileName, context);\n    }\n    \n    info.setDocStore(info.getDocStoreOffset(), newDsName, info.getDocStoreIsCompoundFile());\n    info.dir = directory;\n    info.name = segName;\n  }\n\n","sourceOld":"  /** Copies the segment files as-is into the IndexWriter's directory. */\n  private void copySegmentAsIs(SegmentInfo info, String segName,\n      Map<String, String> dsNames, Set<String> dsFilesCopied, IOContext context)\n      throws IOException {\n    // Determine if the doc store of this segment needs to be copied. It's\n    // only relevant for segments that share doc store with others,\n    // because the DS might have been copied already, in which case we\n    // just want to update the DS name of this SegmentInfo.\n    // NOTE: pre-3x segments include a null DSName if they don't share doc\n    // store. The following code ensures we don't accidentally insert\n    // 'null' to the map.\n    String dsName = info.getDocStoreSegment();\n    final String newDsName;\n    if (dsName != null) {\n      if (dsNames.containsKey(dsName)) {\n        newDsName = dsNames.get(dsName);\n      } else {\n        dsNames.put(dsName, segName);\n        newDsName = segName;\n      }\n    } else {\n      newDsName = segName;\n    }\n    \n    Set<String> codecDocStoreFiles = info.codecDocStoreFiles();\n    // Copy the segment files\n    for (String file: info.files()) {\n      final String newFileName;\n      if (codecDocStoreFiles.contains(file) || file.endsWith(IndexFileNames.COMPOUND_FILE_STORE_EXTENSION)) {\n        newFileName = newDsName + IndexFileNames.stripSegmentName(file);\n        if (dsFilesCopied.contains(newFileName)) {\n          continue;\n        }\n        dsFilesCopied.add(newFileName);\n      } else {\n        newFileName = segName + IndexFileNames.stripSegmentName(file);\n      }\n      \n      assert !directory.fileExists(newFileName): \"file \\\"\" + newFileName + \"\\\" already exists\";\n      info.dir.copy(directory, file, newFileName, context);\n    }\n    \n    info.setDocStore(info.getDocStoreOffset(), newDsName, info.getDocStoreIsCompoundFile());\n    info.dir = directory;\n    info.name = segName;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2d9557774b9f672817ad13472675db3f858d8d60","date":1327929609,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#copySegmentAsIs(SegmentInfo,String,Map[String,String],Set[String],IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#copySegmentAsIs(SegmentInfo,String,Map[String,String],Set[String],IOContext).mjava","sourceNew":"  /** Copies the segment files as-is into the IndexWriter's directory. */\n  private void copySegmentAsIs(SegmentInfo info, String segName,\n      Map<String, String> dsNames, Set<String> dsFilesCopied, IOContext context)\n      throws IOException {\n    // Determine if the doc store of this segment needs to be copied. It's\n    // only relevant for segments that share doc store with others,\n    // because the DS might have been copied already, in which case we\n    // just want to update the DS name of this SegmentInfo.\n    String dsName = info.getDocStoreSegment();\n    assert dsName != null;\n    final String newDsName;\n    if (dsNames.containsKey(dsName)) {\n      newDsName = dsNames.get(dsName);\n    } else {\n      dsNames.put(dsName, segName);\n      newDsName = segName;\n    }\n    \n    Set<String> codecDocStoreFiles = new HashSet<String>();\n    if (info.getDocStoreOffset() != -1) {\n      // only violate the codec this way if its preflex\n      codec.storedFieldsFormat().files(info, codecDocStoreFiles);\n      codec.termVectorsFormat().files(info, codecDocStoreFiles);\n    }\n    \n    // Copy the segment files\n    for (String file: info.files()) {\n      final String newFileName;\n      if (codecDocStoreFiles.contains(file) || file.endsWith(IndexFileNames.COMPOUND_FILE_STORE_EXTENSION)) {\n        newFileName = newDsName + IndexFileNames.stripSegmentName(file);\n        if (dsFilesCopied.contains(newFileName)) {\n          continue;\n        }\n        dsFilesCopied.add(newFileName);\n      } else {\n        newFileName = segName + IndexFileNames.stripSegmentName(file);\n      }\n      \n      assert !directory.fileExists(newFileName): \"file \\\"\" + newFileName + \"\\\" already exists\";\n      info.dir.copy(directory, file, newFileName, context);\n    }\n    \n    info.setDocStore(info.getDocStoreOffset(), newDsName, info.getDocStoreIsCompoundFile());\n    info.dir = directory;\n    info.name = segName;\n  }\n\n","sourceOld":"  /** Copies the segment files as-is into the IndexWriter's directory. */\n  private void copySegmentAsIs(SegmentInfo info, String segName,\n      Map<String, String> dsNames, Set<String> dsFilesCopied, IOContext context)\n      throws IOException {\n    // Determine if the doc store of this segment needs to be copied. It's\n    // only relevant for segments that share doc store with others,\n    // because the DS might have been copied already, in which case we\n    // just want to update the DS name of this SegmentInfo.\n    String dsName = info.getDocStoreSegment();\n    assert dsName != null;\n    final String newDsName;\n    if (dsNames.containsKey(dsName)) {\n      newDsName = dsNames.get(dsName);\n    } else {\n      dsNames.put(dsName, segName);\n      newDsName = segName;\n    }\n    \n    // nocommit: remove this\n    Set<String> codecDocStoreFiles = new HashSet<String>();\n    codec.storedFieldsFormat().files(info, codecDocStoreFiles);\n    codec.termVectorsFormat().files(info, codecDocStoreFiles);\n    \n    // Copy the segment files\n    for (String file: info.files()) {\n      final String newFileName;\n      if (codecDocStoreFiles.contains(file) || file.endsWith(IndexFileNames.COMPOUND_FILE_STORE_EXTENSION)) {\n        newFileName = newDsName + IndexFileNames.stripSegmentName(file);\n        if (dsFilesCopied.contains(newFileName)) {\n          continue;\n        }\n        dsFilesCopied.add(newFileName);\n      } else {\n        newFileName = segName + IndexFileNames.stripSegmentName(file);\n      }\n      \n      assert !directory.fileExists(newFileName): \"file \\\"\" + newFileName + \"\\\" already exists\";\n      info.dir.copy(directory, file, newFileName, context);\n    }\n    \n    info.setDocStore(info.getDocStoreOffset(), newDsName, info.getDocStoreIsCompoundFile());\n    info.dir = directory;\n    info.name = segName;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"be9e3e7d2fc880996ffcfe9a8fc47057b647e9e3","date":1327944832,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#copySegmentAsIs(SegmentInfo,String,Map[String,String],Set[String],IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#copySegmentAsIs(SegmentInfo,String,Map[String,String],Set[String],IOContext).mjava","sourceNew":"  /** Copies the segment files as-is into the IndexWriter's directory. */\n  private void copySegmentAsIs(SegmentInfo info, String segName,\n      Map<String, String> dsNames, Set<String> dsFilesCopied, IOContext context)\n      throws IOException {\n    // Determine if the doc store of this segment needs to be copied. It's\n    // only relevant for segments that share doc store with others,\n    // because the DS might have been copied already, in which case we\n    // just want to update the DS name of this SegmentInfo.\n    String dsName = info.getDocStoreSegment();\n    assert dsName != null;\n    final String newDsName;\n    if (dsNames.containsKey(dsName)) {\n      newDsName = dsNames.get(dsName);\n    } else {\n      dsNames.put(dsName, segName);\n      newDsName = segName;\n    }\n    \n    Set<String> codecDocStoreFiles = new HashSet<String>();\n    if (info.getDocStoreOffset() != -1) {\n      // only violate the codec this way if its preflex\n      codec.storedFieldsFormat().files(info, codecDocStoreFiles);\n      codec.termVectorsFormat().files(info, codecDocStoreFiles);\n    }\n    \n    // Copy the segment files\n    for (String file: info.files()) {\n      final String newFileName;\n      if (codecDocStoreFiles.contains(file)) {\n        newFileName = newDsName + IndexFileNames.stripSegmentName(file);\n        if (dsFilesCopied.contains(newFileName)) {\n          continue;\n        }\n        dsFilesCopied.add(newFileName);\n      } else {\n        newFileName = segName + IndexFileNames.stripSegmentName(file);\n      }\n      \n      assert !directory.fileExists(newFileName): \"file \\\"\" + newFileName + \"\\\" already exists\";\n      info.dir.copy(directory, file, newFileName, context);\n    }\n    \n    info.setDocStore(info.getDocStoreOffset(), newDsName, info.getDocStoreIsCompoundFile());\n    info.dir = directory;\n    info.name = segName;\n  }\n\n","sourceOld":"  /** Copies the segment files as-is into the IndexWriter's directory. */\n  private void copySegmentAsIs(SegmentInfo info, String segName,\n      Map<String, String> dsNames, Set<String> dsFilesCopied, IOContext context)\n      throws IOException {\n    // Determine if the doc store of this segment needs to be copied. It's\n    // only relevant for segments that share doc store with others,\n    // because the DS might have been copied already, in which case we\n    // just want to update the DS name of this SegmentInfo.\n    String dsName = info.getDocStoreSegment();\n    assert dsName != null;\n    final String newDsName;\n    if (dsNames.containsKey(dsName)) {\n      newDsName = dsNames.get(dsName);\n    } else {\n      dsNames.put(dsName, segName);\n      newDsName = segName;\n    }\n    \n    Set<String> codecDocStoreFiles = new HashSet<String>();\n    if (info.getDocStoreOffset() != -1) {\n      // only violate the codec this way if its preflex\n      codec.storedFieldsFormat().files(info, codecDocStoreFiles);\n      codec.termVectorsFormat().files(info, codecDocStoreFiles);\n    }\n    \n    // Copy the segment files\n    for (String file: info.files()) {\n      final String newFileName;\n      if (codecDocStoreFiles.contains(file) || file.endsWith(IndexFileNames.COMPOUND_FILE_STORE_EXTENSION)) {\n        newFileName = newDsName + IndexFileNames.stripSegmentName(file);\n        if (dsFilesCopied.contains(newFileName)) {\n          continue;\n        }\n        dsFilesCopied.add(newFileName);\n      } else {\n        newFileName = segName + IndexFileNames.stripSegmentName(file);\n      }\n      \n      assert !directory.fileExists(newFileName): \"file \\\"\" + newFileName + \"\\\" already exists\";\n      info.dir.copy(directory, file, newFileName, context);\n    }\n    \n    info.setDocStore(info.getDocStoreOffset(), newDsName, info.getDocStoreIsCompoundFile());\n    info.dir = directory;\n    info.name = segName;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"296df632fd63421ea20756fa11ad36fbc6f4c8a9","date":1327957998,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#copySegmentAsIs(SegmentInfo,String,Map[String,String],Set[String],IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#copySegmentAsIs(SegmentInfo,String,Map[String,String],Set[String],IOContext).mjava","sourceNew":"  /** Copies the segment files as-is into the IndexWriter's directory. */\n  private void copySegmentAsIs(SegmentInfo info, String segName,\n      Map<String, String> dsNames, Set<String> dsFilesCopied, IOContext context)\n      throws IOException {\n    // Determine if the doc store of this segment needs to be copied. It's\n    // only relevant for segments that share doc store with others,\n    // because the DS might have been copied already, in which case we\n    // just want to update the DS name of this SegmentInfo.\n    String dsName = info.getDocStoreSegment();\n    assert dsName != null;\n    final String newDsName;\n    if (dsNames.containsKey(dsName)) {\n      newDsName = dsNames.get(dsName);\n    } else {\n      dsNames.put(dsName, segName);\n      newDsName = segName;\n    }\n    \n    Set<String> codecDocStoreFiles = new HashSet<String>();\n    if (info.getDocStoreOffset() != -1) {\n      // only violate the codec this way if its preflex\n      codec.storedFieldsFormat().files(info, codecDocStoreFiles);\n      codec.termVectorsFormat().files(info, codecDocStoreFiles);\n    }\n    \n    // Copy the segment files\n    for (String file: info.files()) {\n      final String newFileName;\n      if (codecDocStoreFiles.contains(file)) {\n        newFileName = newDsName + IndexFileNames.stripSegmentName(file);\n        if (dsFilesCopied.contains(newFileName)) {\n          continue;\n        }\n        dsFilesCopied.add(newFileName);\n      } else {\n        newFileName = segName + IndexFileNames.stripSegmentName(file);\n      }\n      \n      assert !directory.fileExists(newFileName): \"file \\\"\" + newFileName + \"\\\" already exists\";\n      info.dir.copy(directory, file, newFileName, context);\n    }\n    \n    info.setDocStore(info.getDocStoreOffset(), newDsName, info.getDocStoreIsCompoundFile());\n    info.dir = directory;\n    info.name = segName;\n  }\n\n","sourceOld":"  /** Copies the segment files as-is into the IndexWriter's directory. */\n  private void copySegmentAsIs(SegmentInfo info, String segName,\n      Map<String, String> dsNames, Set<String> dsFilesCopied, IOContext context)\n      throws IOException {\n    // Determine if the doc store of this segment needs to be copied. It's\n    // only relevant for segments that share doc store with others,\n    // because the DS might have been copied already, in which case we\n    // just want to update the DS name of this SegmentInfo.\n    // NOTE: pre-3x segments include a null DSName if they don't share doc\n    // store. The following code ensures we don't accidentally insert\n    // 'null' to the map.\n    String dsName = info.getDocStoreSegment();\n    final String newDsName;\n    if (dsName != null) {\n      if (dsNames.containsKey(dsName)) {\n        newDsName = dsNames.get(dsName);\n      } else {\n        dsNames.put(dsName, segName);\n        newDsName = segName;\n      }\n    } else {\n      newDsName = segName;\n    }\n    \n    Set<String> codecDocStoreFiles = info.codecDocStoreFiles();\n    // Copy the segment files\n    for (String file: info.files()) {\n      final String newFileName;\n      if (codecDocStoreFiles.contains(file) || file.endsWith(IndexFileNames.COMPOUND_FILE_STORE_EXTENSION)) {\n        newFileName = newDsName + IndexFileNames.stripSegmentName(file);\n        if (dsFilesCopied.contains(newFileName)) {\n          continue;\n        }\n        dsFilesCopied.add(newFileName);\n      } else {\n        newFileName = segName + IndexFileNames.stripSegmentName(file);\n      }\n      \n      assert !directory.fileExists(newFileName): \"file \\\"\" + newFileName + \"\\\" already exists\";\n      info.dir.copy(directory, file, newFileName, context);\n    }\n    \n    info.setDocStore(info.getDocStoreOffset(), newDsName, info.getDocStoreIsCompoundFile());\n    info.dir = directory;\n    info.name = segName;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"410e066f093e407222d9681429d209084e783149","date":1327958394,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#copySegmentAsIs(SegmentInfo,String,Map[String,String],Set[String],IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#copySegmentAsIs(SegmentInfo,String,Map[String,String],Set[String],IOContext).mjava","sourceNew":"  /** Copies the segment files as-is into the IndexWriter's directory. */\n  private void copySegmentAsIs(SegmentInfo info, String segName,\n      Map<String, String> dsNames, Set<String> dsFilesCopied, IOContext context)\n      throws IOException {\n    // Determine if the doc store of this segment needs to be copied. It's\n    // only relevant for segments that share doc store with others,\n    // because the DS might have been copied already, in which case we\n    // just want to update the DS name of this SegmentInfo.\n    String dsName = info.getDocStoreSegment();\n    assert dsName != null;\n    final String newDsName;\n    if (dsNames.containsKey(dsName)) {\n      newDsName = dsNames.get(dsName);\n    } else {\n      dsNames.put(dsName, segName);\n      newDsName = segName;\n    }\n    \n    Set<String> codecDocStoreFiles = new HashSet<String>();\n    if (info.getDocStoreOffset() != -1) {\n      // only violate the codec this way if its preflex\n      codec.storedFieldsFormat().files(info, codecDocStoreFiles);\n      codec.termVectorsFormat().files(info, codecDocStoreFiles);\n    }\n    \n    // Copy the segment files\n    for (String file: info.files()) {\n      final String newFileName;\n      if (codecDocStoreFiles.contains(file)) {\n        newFileName = newDsName + IndexFileNames.stripSegmentName(file);\n        if (dsFilesCopied.contains(newFileName)) {\n          continue;\n        }\n        dsFilesCopied.add(newFileName);\n      } else {\n        newFileName = segName + IndexFileNames.stripSegmentName(file);\n      }\n      \n      assert !directory.fileExists(newFileName): \"file \\\"\" + newFileName + \"\\\" already exists\";\n      info.dir.copy(directory, file, newFileName, context);\n    }\n    \n    info.setDocStore(info.getDocStoreOffset(), newDsName, info.getDocStoreIsCompoundFile());\n    info.dir = directory;\n    info.name = segName;\n  }\n\n","sourceOld":"  /** Copies the segment files as-is into the IndexWriter's directory. */\n  private void copySegmentAsIs(SegmentInfo info, String segName,\n      Map<String, String> dsNames, Set<String> dsFilesCopied, IOContext context)\n      throws IOException {\n    // Determine if the doc store of this segment needs to be copied. It's\n    // only relevant for segments that share doc store with others,\n    // because the DS might have been copied already, in which case we\n    // just want to update the DS name of this SegmentInfo.\n    // NOTE: pre-3x segments include a null DSName if they don't share doc\n    // store. The following code ensures we don't accidentally insert\n    // 'null' to the map.\n    String dsName = info.getDocStoreSegment();\n    final String newDsName;\n    if (dsName != null) {\n      if (dsNames.containsKey(dsName)) {\n        newDsName = dsNames.get(dsName);\n      } else {\n        dsNames.put(dsName, segName);\n        newDsName = segName;\n      }\n    } else {\n      newDsName = segName;\n    }\n    \n    Set<String> codecDocStoreFiles = info.codecDocStoreFiles();\n    // Copy the segment files\n    for (String file: info.files()) {\n      final String newFileName;\n      if (codecDocStoreFiles.contains(file) || file.endsWith(IndexFileNames.COMPOUND_FILE_STORE_EXTENSION)) {\n        newFileName = newDsName + IndexFileNames.stripSegmentName(file);\n        if (dsFilesCopied.contains(newFileName)) {\n          continue;\n        }\n        dsFilesCopied.add(newFileName);\n      } else {\n        newFileName = segName + IndexFileNames.stripSegmentName(file);\n      }\n      \n      assert !directory.fileExists(newFileName): \"file \\\"\" + newFileName + \"\\\" already exists\";\n      info.dir.copy(directory, file, newFileName, context);\n    }\n    \n    info.setDocStore(info.getDocStoreOffset(), newDsName, info.getDocStoreIsCompoundFile());\n    info.dir = directory;\n    info.name = segName;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#copySegmentAsIs(SegmentInfo,String,Map[String,String],Set[String],IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#copySegmentAsIs(SegmentInfo,String,Map[String,String],Set[String],IOContext).mjava","sourceNew":"  /** Copies the segment files as-is into the IndexWriter's directory. */\n  private void copySegmentAsIs(SegmentInfo info, String segName,\n      Map<String, String> dsNames, Set<String> dsFilesCopied, IOContext context)\n      throws IOException {\n    // Determine if the doc store of this segment needs to be copied. It's\n    // only relevant for segments that share doc store with others,\n    // because the DS might have been copied already, in which case we\n    // just want to update the DS name of this SegmentInfo.\n    String dsName = info.getDocStoreSegment();\n    assert dsName != null;\n    final String newDsName;\n    if (dsNames.containsKey(dsName)) {\n      newDsName = dsNames.get(dsName);\n    } else {\n      dsNames.put(dsName, segName);\n      newDsName = segName;\n    }\n    \n    Set<String> codecDocStoreFiles = new HashSet<String>();\n    if (info.getDocStoreOffset() != -1) {\n      // only violate the codec this way if its preflex\n      codec.storedFieldsFormat().files(info, codecDocStoreFiles);\n      codec.termVectorsFormat().files(info, codecDocStoreFiles);\n    }\n    \n    // Copy the segment files\n    for (String file: info.files()) {\n      final String newFileName;\n      if (codecDocStoreFiles.contains(file)) {\n        newFileName = newDsName + IndexFileNames.stripSegmentName(file);\n        if (dsFilesCopied.contains(newFileName)) {\n          continue;\n        }\n        dsFilesCopied.add(newFileName);\n      } else {\n        newFileName = segName + IndexFileNames.stripSegmentName(file);\n      }\n      \n      assert !directory.fileExists(newFileName): \"file \\\"\" + newFileName + \"\\\" already exists\";\n      info.dir.copy(directory, file, newFileName, context);\n    }\n    \n    info.setDocStore(info.getDocStoreOffset(), newDsName, info.getDocStoreIsCompoundFile());\n    info.dir = directory;\n    info.name = segName;\n  }\n\n","sourceOld":"  /** Copies the segment files as-is into the IndexWriter's directory. */\n  private void copySegmentAsIs(SegmentInfo info, String segName,\n      Map<String, String> dsNames, Set<String> dsFilesCopied, IOContext context)\n      throws IOException {\n    // Determine if the doc store of this segment needs to be copied. It's\n    // only relevant for segments that share doc store with others,\n    // because the DS might have been copied already, in which case we\n    // just want to update the DS name of this SegmentInfo.\n    String dsName = info.getDocStoreSegment();\n    assert dsName != null;\n    final String newDsName;\n    if (dsNames.containsKey(dsName)) {\n      newDsName = dsNames.get(dsName);\n    } else {\n      dsNames.put(dsName, segName);\n      newDsName = segName;\n    }\n    \n    Set<String> codecDocStoreFiles = new HashSet<String>();\n    if (info.getDocStoreOffset() != -1) {\n      // only violate the codec this way if its preflex\n      codec.storedFieldsFormat().files(info, codecDocStoreFiles);\n      codec.termVectorsFormat().files(info, codecDocStoreFiles);\n    }\n    \n    // Copy the segment files\n    for (String file: info.files()) {\n      final String newFileName;\n      if (codecDocStoreFiles.contains(file)) {\n        newFileName = newDsName + IndexFileNames.stripSegmentName(file);\n        if (dsFilesCopied.contains(newFileName)) {\n          continue;\n        }\n        dsFilesCopied.add(newFileName);\n      } else {\n        newFileName = segName + IndexFileNames.stripSegmentName(file);\n      }\n      \n      assert !directory.fileExists(newFileName): \"file \\\"\" + newFileName + \"\\\" already exists\";\n      info.dir.copy(directory, file, newFileName, context);\n    }\n    \n    info.setDocStore(info.getDocStoreOffset(), newDsName, info.getDocStoreIsCompoundFile());\n    info.dir = directory;\n    info.name = segName;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"410e066f093e407222d9681429d209084e783149":["3cc749c053615f5871f3b95715fe292f34e70a53","296df632fd63421ea20756fa11ad36fbc6f4c8a9"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["296df632fd63421ea20756fa11ad36fbc6f4c8a9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cc749c053615f5871f3b95715fe292f34e70a53":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"639c36565ce03aed5b0fce7c9e4448e53a1f7efd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ddc4c914be86e34b54f70023f45a60fa7f04e929"],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","639c36565ce03aed5b0fce7c9e4448e53a1f7efd"],"296df632fd63421ea20756fa11ad36fbc6f4c8a9":["3cc749c053615f5871f3b95715fe292f34e70a53","be9e3e7d2fc880996ffcfe9a8fc47057b647e9e3"],"2d9557774b9f672817ad13472675db3f858d8d60":["975446fea038e8da470a870a240379127117d5c8"],"975446fea038e8da470a870a240379127117d5c8":["3cc749c053615f5871f3b95715fe292f34e70a53"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"be9e3e7d2fc880996ffcfe9a8fc47057b647e9e3":["2d9557774b9f672817ad13472675db3f858d8d60"]},"commit2Childs":{"410e066f093e407222d9681429d209084e783149":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["639c36565ce03aed5b0fce7c9e4448e53a1f7efd","5d004d0e0b3f65bb40da76d476d659d7888270e8","ddc4c914be86e34b54f70023f45a60fa7f04e929"],"3cc749c053615f5871f3b95715fe292f34e70a53":["410e066f093e407222d9681429d209084e783149","296df632fd63421ea20756fa11ad36fbc6f4c8a9","975446fea038e8da470a870a240379127117d5c8"],"639c36565ce03aed5b0fce7c9e4448e53a1f7efd":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":[],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["3cc749c053615f5871f3b95715fe292f34e70a53","5d004d0e0b3f65bb40da76d476d659d7888270e8"],"296df632fd63421ea20756fa11ad36fbc6f4c8a9":["410e066f093e407222d9681429d209084e783149","3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"2d9557774b9f672817ad13472675db3f858d8d60":["be9e3e7d2fc880996ffcfe9a8fc47057b647e9e3"],"975446fea038e8da470a870a240379127117d5c8":["2d9557774b9f672817ad13472675db3f858d8d60"],"be9e3e7d2fc880996ffcfe9a8fc47057b647e9e3":["296df632fd63421ea20756fa11ad36fbc6f4c8a9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["410e066f093e407222d9681429d209084e783149","5d004d0e0b3f65bb40da76d476d659d7888270e8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}