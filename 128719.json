{"path":"src/java/org/apache/solr/schema/IndexSchema#getField(String).mjava","commits":[{"id":"0c3e228bf650e96f3002a8fb73dd0c13d55af077","date":1138253849,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/schema/IndexSchema#getField(String).mjava","pathOld":"/dev/null","sourceNew":"  // get a field, and if not statically defined, check dynamic fields.\n  public SchemaField getField(String fieldName) {\n     SchemaField f = fields.get(fieldName);\n    if (f != null) return f;\n\n    for (DynamicField df : dynamicFields) {\n      if (df.matches(fieldName)) return df.makeSchemaField(fieldName);\n    }\n\n    // Hmmm, default field could also be implemented with a dynamic field of \"*\".\n    // It would have to be special-cased and only used if nothing else matched.\n    /***  REMOVED -YCS\n    if (defaultFieldType != null) return new SchemaField(fieldName,defaultFieldType);\n    ***/\n    throw new SolrException(1,\"undefined field \"+fieldName);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2f80211c8197bb79dae092b6ea66a4a839be2add","date":1149580420,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/solr/schema/IndexSchema#getField(String).mjava","pathOld":"src/java/org/apache/solr/schema/IndexSchema#getField(String).mjava","sourceNew":"  /**\n   * Returns the SchemaField that should be used for the specified field name \n   *\n   * @param fieldName may be an explicitly created field, or a name that\n   * excercies a dynamic field.\n   * @throws SolrException if no such field exists\n   * @see #getFieldType\n   */\n  public SchemaField getField(String fieldName) {\n     SchemaField f = fields.get(fieldName);\n    if (f != null) return f;\n\n    for (DynamicField df : dynamicFields) {\n      if (df.matches(fieldName)) return df.makeSchemaField(fieldName);\n    }\n\n    // Hmmm, default field could also be implemented with a dynamic field of \"*\".\n    // It would have to be special-cased and only used if nothing else matched.\n    /***  REMOVED -YCS\n    if (defaultFieldType != null) return new SchemaField(fieldName,defaultFieldType);\n    ***/\n    throw new SolrException(1,\"undefined field \"+fieldName);\n  }\n\n","sourceOld":"  // get a field, and if not statically defined, check dynamic fields.\n  public SchemaField getField(String fieldName) {\n     SchemaField f = fields.get(fieldName);\n    if (f != null) return f;\n\n    for (DynamicField df : dynamicFields) {\n      if (df.matches(fieldName)) return df.makeSchemaField(fieldName);\n    }\n\n    // Hmmm, default field could also be implemented with a dynamic field of \"*\".\n    // It would have to be special-cased and only used if nothing else matched.\n    /***  REMOVED -YCS\n    if (defaultFieldType != null) return new SchemaField(fieldName,defaultFieldType);\n    ***/\n    throw new SolrException(1,\"undefined field \"+fieldName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b451a0c4c12c9a8575a49bafc27463190c8b8833","date":1149619984,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/schema/IndexSchema#getField(String).mjava","pathOld":"src/java/org/apache/solr/schema/IndexSchema#getField(String).mjava","sourceNew":"  /**\n   * Returns the SchemaField that should be used for the specified field name\n   *\n   * @param fieldName may be an explicitly defined field, or a name that\n   * matches a dynamic field.\n   * @throws SolrException if no such field exists\n   * @see #getFieldType\n   */\n  public SchemaField getField(String fieldName) {\n     SchemaField f = fields.get(fieldName);\n    if (f != null) return f;\n\n    for (DynamicField df : dynamicFields) {\n      if (df.matches(fieldName)) return df.makeSchemaField(fieldName);\n    }\n\n    // Hmmm, default field could also be implemented with a dynamic field of \"*\".\n    // It would have to be special-cased and only used if nothing else matched.\n    /***  REMOVED -YCS\n    if (defaultFieldType != null) return new SchemaField(fieldName,defaultFieldType);\n    ***/\n    throw new SolrException(1,\"undefined field \"+fieldName);\n  }\n\n","sourceOld":"  /**\n   * Returns the SchemaField that should be used for the specified field name \n   *\n   * @param fieldName may be an explicitly created field, or a name that\n   * excercies a dynamic field.\n   * @throws SolrException if no such field exists\n   * @see #getFieldType\n   */\n  public SchemaField getField(String fieldName) {\n     SchemaField f = fields.get(fieldName);\n    if (f != null) return f;\n\n    for (DynamicField df : dynamicFields) {\n      if (df.matches(fieldName)) return df.makeSchemaField(fieldName);\n    }\n\n    // Hmmm, default field could also be implemented with a dynamic field of \"*\".\n    // It would have to be special-cased and only used if nothing else matched.\n    /***  REMOVED -YCS\n    if (defaultFieldType != null) return new SchemaField(fieldName,defaultFieldType);\n    ***/\n    throw new SolrException(1,\"undefined field \"+fieldName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bae1211d5fe8e634f0e8d499ce4c98d8376ef5ae","date":1177806217,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/schema/IndexSchema#getField(String).mjava","pathOld":"src/java/org/apache/solr/schema/IndexSchema#getField(String).mjava","sourceNew":"  /**\n   * Returns the SchemaField that should be used for the specified field name\n   *\n   * @param fieldName may be an explicitly defined field, or a name that\n   * matches a dynamic field.\n   * @throws SolrException if no such field exists\n   * @see #getFieldType\n   */\n  public SchemaField getField(String fieldName) {\n     SchemaField f = fields.get(fieldName);\n    if (f != null) return f;\n\n    for (DynamicField df : dynamicFields) {\n      if (df.matches(fieldName)) return df.makeSchemaField(fieldName);\n    }\n\n    // Hmmm, default field could also be implemented with a dynamic field of \"*\".\n    // It would have to be special-cased and only used if nothing else matched.\n    /***  REMOVED -YCS\n    if (defaultFieldType != null) return new SchemaField(fieldName,defaultFieldType);\n    ***/\n    throw new SolrException(400,\"undefined field \"+fieldName);\n  }\n\n","sourceOld":"  /**\n   * Returns the SchemaField that should be used for the specified field name\n   *\n   * @param fieldName may be an explicitly defined field, or a name that\n   * matches a dynamic field.\n   * @throws SolrException if no such field exists\n   * @see #getFieldType\n   */\n  public SchemaField getField(String fieldName) {\n     SchemaField f = fields.get(fieldName);\n    if (f != null) return f;\n\n    for (DynamicField df : dynamicFields) {\n      if (df.matches(fieldName)) return df.makeSchemaField(fieldName);\n    }\n\n    // Hmmm, default field could also be implemented with a dynamic field of \"*\".\n    // It would have to be special-cased and only used if nothing else matched.\n    /***  REMOVED -YCS\n    if (defaultFieldType != null) return new SchemaField(fieldName,defaultFieldType);\n    ***/\n    throw new SolrException(1,\"undefined field \"+fieldName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4abe53aaee39b5f2f41dd9a0b905c1ddf880996","date":1180477701,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/schema/IndexSchema#getField(String).mjava","pathOld":"src/java/org/apache/solr/schema/IndexSchema#getField(String).mjava","sourceNew":"  /**\n   * Returns the SchemaField that should be used for the specified field name\n   *\n   * @param fieldName may be an explicitly defined field, or a name that\n   * matches a dynamic field.\n   * @throws SolrException if no such field exists\n   * @see #getFieldType\n   */\n  public SchemaField getField(String fieldName) {\n     SchemaField f = fields.get(fieldName);\n    if (f != null) return f;\n\n    for (DynamicField df : dynamicFields) {\n      if (df.matches(fieldName)) return df.makeSchemaField(fieldName);\n    }\n\n    // Hmmm, default field could also be implemented with a dynamic field of \"*\".\n    // It would have to be special-cased and only used if nothing else matched.\n    /***  REMOVED -YCS\n    if (defaultFieldType != null) return new SchemaField(fieldName,defaultFieldType);\n    ***/\n    throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"undefined field \"+fieldName);\n  }\n\n","sourceOld":"  /**\n   * Returns the SchemaField that should be used for the specified field name\n   *\n   * @param fieldName may be an explicitly defined field, or a name that\n   * matches a dynamic field.\n   * @throws SolrException if no such field exists\n   * @see #getFieldType\n   */\n  public SchemaField getField(String fieldName) {\n     SchemaField f = fields.get(fieldName);\n    if (f != null) return f;\n\n    for (DynamicField df : dynamicFields) {\n      if (df.matches(fieldName)) return df.makeSchemaField(fieldName);\n    }\n\n    // Hmmm, default field could also be implemented with a dynamic field of \"*\".\n    // It would have to be special-cased and only used if nothing else matched.\n    /***  REMOVED -YCS\n    if (defaultFieldType != null) return new SchemaField(fieldName,defaultFieldType);\n    ***/\n    throw new SolrException(400,\"undefined field \"+fieldName);\n  }\n\n","bugFix":null,"bugIntro":["4094497d8fed39484374f51c230cc0e5d660112f","4094497d8fed39484374f51c230cc0e5d660112f","4094497d8fed39484374f51c230cc0e5d660112f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"abec2fd822be07fc74ef5ba3609b9c5625a87d6d","date":1261659802,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/solr/schema/IndexSchema#getField(String).mjava","pathOld":"src/java/org/apache/solr/schema/IndexSchema#getField(String).mjava","sourceNew":"  /**\n   * Returns the SchemaField that should be used for the specified field name\n   *\n   * @param fieldName may be an explicitly defined field, a PolyField type, or a name that\n   * matches a dynamic field.\n   * @throws SolrException if no such field exists\n   * @see #getFieldType\n   * @see #getFieldOrNull(String)\n   * @return The {@link SchemaField}\n   */\n  public SchemaField getField(String fieldName) {\n    SchemaField f = getFieldOrNull(fieldName);\n    if (f != null) return f;\n\n\n    // Hmmm, default field could also be implemented with a dynamic field of \"*\".\n    // It would have to be special-cased and only used if nothing else matched.\n    /***  REMOVED -YCS\n    if (defaultFieldType != null) return new SchemaField(fieldName,defaultFieldType);\n    ***/\n    throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"undefined field \"+fieldName);\n  }\n\n","sourceOld":"  /**\n   * Returns the SchemaField that should be used for the specified field name\n   *\n   * @param fieldName may be an explicitly defined field, or a name that\n   * matches a dynamic field.\n   * @throws SolrException if no such field exists\n   * @see #getFieldType\n   */\n  public SchemaField getField(String fieldName) {\n     SchemaField f = fields.get(fieldName);\n    if (f != null) return f;\n\n    for (DynamicField df : dynamicFields) {\n      if (df.matches(fieldName)) return df.makeSchemaField(fieldName);\n    }\n\n    // Hmmm, default field could also be implemented with a dynamic field of \"*\".\n    // It would have to be special-cased and only used if nothing else matched.\n    /***  REMOVED -YCS\n    if (defaultFieldType != null) return new SchemaField(fieldName,defaultFieldType);\n    ***/\n    throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"undefined field \"+fieldName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b82ee93a0b7e1703398375f2e9acc80c452b97c4","date":1261679725,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/schema/IndexSchema#getField(String).mjava","pathOld":"src/java/org/apache/solr/schema/IndexSchema#getField(String).mjava","sourceNew":"  /**\n   * Returns the SchemaField that should be used for the specified field name\n   *\n   * @param fieldName may be an explicitly defined field or a name that\n   * matches a dynamic field.\n   * @throws SolrException if no such field exists\n   * @see #getFieldType\n   * @see #getFieldOrNull(String)\n   * @return The {@link SchemaField}\n   */\n  public SchemaField getField(String fieldName) {\n    SchemaField f = getFieldOrNull(fieldName);\n    if (f != null) return f;\n\n\n    // Hmmm, default field could also be implemented with a dynamic field of \"*\".\n    // It would have to be special-cased and only used if nothing else matched.\n    /***  REMOVED -YCS\n    if (defaultFieldType != null) return new SchemaField(fieldName,defaultFieldType);\n    ***/\n    throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"undefined field \"+fieldName);\n  }\n\n","sourceOld":"  /**\n   * Returns the SchemaField that should be used for the specified field name\n   *\n   * @param fieldName may be an explicitly defined field, a PolyField type, or a name that\n   * matches a dynamic field.\n   * @throws SolrException if no such field exists\n   * @see #getFieldType\n   * @see #getFieldOrNull(String)\n   * @return The {@link SchemaField}\n   */\n  public SchemaField getField(String fieldName) {\n    SchemaField f = getFieldOrNull(fieldName);\n    if (f != null) return f;\n\n\n    // Hmmm, default field could also be implemented with a dynamic field of \"*\".\n    // It would have to be special-cased and only used if nothing else matched.\n    /***  REMOVED -YCS\n    if (defaultFieldType != null) return new SchemaField(fieldName,defaultFieldType);\n    ***/\n    throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"undefined field \"+fieldName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/schema/IndexSchema#getField(String).mjava","pathOld":"src/java/org/apache/solr/schema/IndexSchema#getField(String).mjava","sourceNew":"  /**\n   * Returns the SchemaField that should be used for the specified field name\n   *\n   * @param fieldName may be an explicitly defined field or a name that\n   * matches a dynamic field.\n   * @throws SolrException if no such field exists\n   * @see #getFieldType\n   * @see #getFieldOrNull(String)\n   * @return The {@link SchemaField}\n   */\n  public SchemaField getField(String fieldName) {\n    SchemaField f = getFieldOrNull(fieldName);\n    if (f != null) return f;\n\n\n    // Hmmm, default field could also be implemented with a dynamic field of \"*\".\n    // It would have to be special-cased and only used if nothing else matched.\n    /***  REMOVED -YCS\n    if (defaultFieldType != null) return new SchemaField(fieldName,defaultFieldType);\n    ***/\n    throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"undefined field \"+fieldName);\n  }\n\n","sourceOld":"  /**\n   * Returns the SchemaField that should be used for the specified field name\n   *\n   * @param fieldName may be an explicitly defined field or a name that\n   * matches a dynamic field.\n   * @throws SolrException if no such field exists\n   * @see #getFieldType\n   * @see #getFieldOrNull(String)\n   * @return The {@link SchemaField}\n   */\n  public SchemaField getField(String fieldName) {\n    SchemaField f = getFieldOrNull(fieldName);\n    if (f != null) return f;\n\n\n    // Hmmm, default field could also be implemented with a dynamic field of \"*\".\n    // It would have to be special-cased and only used if nothing else matched.\n    /***  REMOVED -YCS\n    if (defaultFieldType != null) return new SchemaField(fieldName,defaultFieldType);\n    ***/\n    throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"undefined field \"+fieldName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"abec2fd822be07fc74ef5ba3609b9c5625a87d6d":["c4abe53aaee39b5f2f41dd9a0b905c1ddf880996"],"bae1211d5fe8e634f0e8d499ce4c98d8376ef5ae":["b451a0c4c12c9a8575a49bafc27463190c8b8833"],"0c3e228bf650e96f3002a8fb73dd0c13d55af077":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["b82ee93a0b7e1703398375f2e9acc80c452b97c4"],"b82ee93a0b7e1703398375f2e9acc80c452b97c4":["abec2fd822be07fc74ef5ba3609b9c5625a87d6d"],"b451a0c4c12c9a8575a49bafc27463190c8b8833":["2f80211c8197bb79dae092b6ea66a4a839be2add"],"c4abe53aaee39b5f2f41dd9a0b905c1ddf880996":["bae1211d5fe8e634f0e8d499ce4c98d8376ef5ae"],"2f80211c8197bb79dae092b6ea66a4a839be2add":["0c3e228bf650e96f3002a8fb73dd0c13d55af077"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"abec2fd822be07fc74ef5ba3609b9c5625a87d6d":["b82ee93a0b7e1703398375f2e9acc80c452b97c4"],"bae1211d5fe8e634f0e8d499ce4c98d8376ef5ae":["c4abe53aaee39b5f2f41dd9a0b905c1ddf880996"],"0c3e228bf650e96f3002a8fb73dd0c13d55af077":["2f80211c8197bb79dae092b6ea66a4a839be2add"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["0c3e228bf650e96f3002a8fb73dd0c13d55af077"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"b82ee93a0b7e1703398375f2e9acc80c452b97c4":["ad94625fb8d088209f46650c8097196fec67f00c"],"b451a0c4c12c9a8575a49bafc27463190c8b8833":["bae1211d5fe8e634f0e8d499ce4c98d8376ef5ae"],"c4abe53aaee39b5f2f41dd9a0b905c1ddf880996":["abec2fd822be07fc74ef5ba3609b9c5625a87d6d"],"2f80211c8197bb79dae092b6ea66a4a839be2add":["b451a0c4c12c9a8575a49bafc27463190c8b8833"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}