{"path":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/DocMakerTest#testNorms().mjava","commits":[{"id":"ecc11368dc265bfdad90214f8bf5da99016ab1e2","date":1294144090,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/DocMakerTest#testNorms().mjava","pathOld":"lucene/contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/DocMakerTest#testNorms().mjava","sourceNew":"  /* Tests doc.tokenized.norms and doc.body.tokenized.norms properties. */\n  public void testNorms() throws Exception {\n    \n    Document doc;\n    \n    // Don't set anything, use the defaults\n    doc = createTestNormsDocument(false, false, false, false);\n    assertTrue(doc.getField(DocMaker.TITLE_FIELD).getOmitNorms());\n    assertFalse(doc.getField(DocMaker.BODY_FIELD).getOmitNorms());\n    \n    // Set norms to false\n    doc = createTestNormsDocument(true, false, false, false);\n    assertTrue(doc.getField(DocMaker.TITLE_FIELD).getOmitNorms());\n    assertFalse(doc.getField(DocMaker.BODY_FIELD).getOmitNorms());\n    \n    // Set norms to true\n    doc = createTestNormsDocument(true, true, false, false);\n    assertFalse(doc.getField(DocMaker.TITLE_FIELD).getOmitNorms());\n    assertFalse(doc.getField(DocMaker.BODY_FIELD).getOmitNorms());\n    \n    // Set body norms to false\n    doc = createTestNormsDocument(false, false, true, false);\n    assertTrue(doc.getField(DocMaker.TITLE_FIELD).getOmitNorms());\n    assertTrue(doc.getField(DocMaker.BODY_FIELD).getOmitNorms());\n    \n    // Set body norms to true\n    doc = createTestNormsDocument(false, false, true, true);\n    assertTrue(doc.getField(DocMaker.TITLE_FIELD).getOmitNorms());\n    assertFalse(doc.getField(DocMaker.BODY_FIELD).getOmitNorms());\n  }\n\n","sourceOld":"  /* Tests doc.tokenized.norms and doc.body.tokenized.norms properties. */\n  public void testNorms() throws Exception {\n    \n    Document doc;\n    \n    // Don't set anything, use the defaults\n    doc = createTestNormsDocument(false, false, false, false);\n    assertTrue(doc.getField(DocMaker.TITLE_FIELD).getOmitNorms());\n    assertFalse(doc.getField(DocMaker.BODY_FIELD).getOmitNorms());\n    \n    // Set norms to false\n    doc = createTestNormsDocument(true, false, false, false);\n    assertTrue(doc.getField(DocMaker.TITLE_FIELD).getOmitNorms());\n    assertFalse(doc.getField(DocMaker.BODY_FIELD).getOmitNorms());\n    \n    // Set norms to true\n    doc = createTestNormsDocument(true, true, false, false);\n    assertFalse(doc.getField(DocMaker.TITLE_FIELD).getOmitNorms());\n    assertFalse(doc.getField(DocMaker.BODY_FIELD).getOmitNorms());\n    \n    // Set body norms to false\n    doc = createTestNormsDocument(false, false, true, false);\n    assertTrue(doc.getField(DocMaker.TITLE_FIELD).getOmitNorms());\n    assertTrue(doc.getField(DocMaker.BODY_FIELD).getOmitNorms());\n    \n    // Set body norms to true\n    doc = createTestNormsDocument(false, false, true, true);\n    assertTrue(doc.getField(DocMaker.TITLE_FIELD).getOmitNorms());\n    assertFalse(doc.getField(DocMaker.BODY_FIELD).getOmitNorms());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/DocMakerTest#testNorms().mjava","pathOld":"lucene/contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/DocMakerTest#testNorms().mjava","sourceNew":"  /* Tests doc.tokenized.norms and doc.body.tokenized.norms properties. */\n  public void testNorms() throws Exception {\n    \n    Document doc;\n    \n    // Don't set anything, use the defaults\n    doc = createTestNormsDocument(false, false, false, false);\n    assertTrue(doc.getField(DocMaker.TITLE_FIELD).getOmitNorms());\n    assertFalse(doc.getField(DocMaker.BODY_FIELD).getOmitNorms());\n    \n    // Set norms to false\n    doc = createTestNormsDocument(true, false, false, false);\n    assertTrue(doc.getField(DocMaker.TITLE_FIELD).getOmitNorms());\n    assertFalse(doc.getField(DocMaker.BODY_FIELD).getOmitNorms());\n    \n    // Set norms to true\n    doc = createTestNormsDocument(true, true, false, false);\n    assertFalse(doc.getField(DocMaker.TITLE_FIELD).getOmitNorms());\n    assertFalse(doc.getField(DocMaker.BODY_FIELD).getOmitNorms());\n    \n    // Set body norms to false\n    doc = createTestNormsDocument(false, false, true, false);\n    assertTrue(doc.getField(DocMaker.TITLE_FIELD).getOmitNorms());\n    assertTrue(doc.getField(DocMaker.BODY_FIELD).getOmitNorms());\n    \n    // Set body norms to true\n    doc = createTestNormsDocument(false, false, true, true);\n    assertTrue(doc.getField(DocMaker.TITLE_FIELD).getOmitNorms());\n    assertFalse(doc.getField(DocMaker.BODY_FIELD).getOmitNorms());\n  }\n\n","sourceOld":"  /* Tests doc.tokenized.norms and doc.body.tokenized.norms properties. */\n  public void testNorms() throws Exception {\n    \n    Document doc;\n    \n    // Don't set anything, use the defaults\n    doc = createTestNormsDocument(false, false, false, false);\n    assertTrue(doc.getField(DocMaker.TITLE_FIELD).getOmitNorms());\n    assertFalse(doc.getField(DocMaker.BODY_FIELD).getOmitNorms());\n    \n    // Set norms to false\n    doc = createTestNormsDocument(true, false, false, false);\n    assertTrue(doc.getField(DocMaker.TITLE_FIELD).getOmitNorms());\n    assertFalse(doc.getField(DocMaker.BODY_FIELD).getOmitNorms());\n    \n    // Set norms to true\n    doc = createTestNormsDocument(true, true, false, false);\n    assertFalse(doc.getField(DocMaker.TITLE_FIELD).getOmitNorms());\n    assertFalse(doc.getField(DocMaker.BODY_FIELD).getOmitNorms());\n    \n    // Set body norms to false\n    doc = createTestNormsDocument(false, false, true, false);\n    assertTrue(doc.getField(DocMaker.TITLE_FIELD).getOmitNorms());\n    assertTrue(doc.getField(DocMaker.BODY_FIELD).getOmitNorms());\n    \n    // Set body norms to true\n    doc = createTestNormsDocument(false, false, true, true);\n    assertTrue(doc.getField(DocMaker.TITLE_FIELD).getOmitNorms());\n    assertFalse(doc.getField(DocMaker.BODY_FIELD).getOmitNorms());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":1,"author":"Michael Busch","isMerge":true,"pathNew":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/DocMakerTest#testNorms().mjava","pathOld":"lucene/contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/DocMakerTest#testNorms().mjava","sourceNew":"  /* Tests doc.tokenized.norms and doc.body.tokenized.norms properties. */\n  public void testNorms() throws Exception {\n    \n    Document doc;\n    \n    // Don't set anything, use the defaults\n    doc = createTestNormsDocument(false, false, false, false);\n    assertTrue(doc.getField(DocMaker.TITLE_FIELD).getOmitNorms());\n    assertFalse(doc.getField(DocMaker.BODY_FIELD).getOmitNorms());\n    \n    // Set norms to false\n    doc = createTestNormsDocument(true, false, false, false);\n    assertTrue(doc.getField(DocMaker.TITLE_FIELD).getOmitNorms());\n    assertFalse(doc.getField(DocMaker.BODY_FIELD).getOmitNorms());\n    \n    // Set norms to true\n    doc = createTestNormsDocument(true, true, false, false);\n    assertFalse(doc.getField(DocMaker.TITLE_FIELD).getOmitNorms());\n    assertFalse(doc.getField(DocMaker.BODY_FIELD).getOmitNorms());\n    \n    // Set body norms to false\n    doc = createTestNormsDocument(false, false, true, false);\n    assertTrue(doc.getField(DocMaker.TITLE_FIELD).getOmitNorms());\n    assertTrue(doc.getField(DocMaker.BODY_FIELD).getOmitNorms());\n    \n    // Set body norms to true\n    doc = createTestNormsDocument(false, false, true, true);\n    assertTrue(doc.getField(DocMaker.TITLE_FIELD).getOmitNorms());\n    assertFalse(doc.getField(DocMaker.BODY_FIELD).getOmitNorms());\n  }\n\n","sourceOld":"  /* Tests doc.tokenized.norms and doc.body.tokenized.norms properties. */\n  public void testNorms() throws Exception {\n    \n    Document doc;\n    \n    // Don't set anything, use the defaults\n    doc = createTestNormsDocument(false, false, false, false);\n    assertTrue(doc.getField(DocMaker.TITLE_FIELD).getOmitNorms());\n    assertFalse(doc.getField(DocMaker.BODY_FIELD).getOmitNorms());\n    \n    // Set norms to false\n    doc = createTestNormsDocument(true, false, false, false);\n    assertTrue(doc.getField(DocMaker.TITLE_FIELD).getOmitNorms());\n    assertFalse(doc.getField(DocMaker.BODY_FIELD).getOmitNorms());\n    \n    // Set norms to true\n    doc = createTestNormsDocument(true, true, false, false);\n    assertFalse(doc.getField(DocMaker.TITLE_FIELD).getOmitNorms());\n    assertFalse(doc.getField(DocMaker.BODY_FIELD).getOmitNorms());\n    \n    // Set body norms to false\n    doc = createTestNormsDocument(false, false, true, false);\n    assertTrue(doc.getField(DocMaker.TITLE_FIELD).getOmitNorms());\n    assertTrue(doc.getField(DocMaker.BODY_FIELD).getOmitNorms());\n    \n    // Set body norms to true\n    doc = createTestNormsDocument(false, false, true, true);\n    assertTrue(doc.getField(DocMaker.TITLE_FIELD).getOmitNorms());\n    assertFalse(doc.getField(DocMaker.BODY_FIELD).getOmitNorms());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/DocMakerTest#testNorms().mjava","pathOld":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/DocMakerTest#testNorms().mjava","sourceNew":"  /* Tests doc.tokenized.norms and doc.body.tokenized.norms properties. */\n  public void testNorms() throws Exception {\n    \n    Document doc;\n    \n    // Don't set anything, use the defaults\n    doc = createTestNormsDocument(false, false, false, false);\n    assertTrue(doc.getField(DocMaker.TITLE_FIELD).omitNorms());\n    assertFalse(doc.getField(DocMaker.BODY_FIELD).omitNorms());\n    \n    // Set norms to false\n    doc = createTestNormsDocument(true, false, false, false);\n    assertTrue(doc.getField(DocMaker.TITLE_FIELD).omitNorms());\n    assertFalse(doc.getField(DocMaker.BODY_FIELD).omitNorms());\n    \n    // Set norms to true\n    doc = createTestNormsDocument(true, true, false, false);\n    assertFalse(doc.getField(DocMaker.TITLE_FIELD).omitNorms());\n    assertFalse(doc.getField(DocMaker.BODY_FIELD).omitNorms());\n    \n    // Set body norms to false\n    doc = createTestNormsDocument(false, false, true, false);\n    assertTrue(doc.getField(DocMaker.TITLE_FIELD).omitNorms());\n    assertTrue(doc.getField(DocMaker.BODY_FIELD).omitNorms());\n    \n    // Set body norms to true\n    doc = createTestNormsDocument(false, false, true, true);\n    assertTrue(doc.getField(DocMaker.TITLE_FIELD).omitNorms());\n    assertFalse(doc.getField(DocMaker.BODY_FIELD).omitNorms());\n  }\n\n","sourceOld":"  /* Tests doc.tokenized.norms and doc.body.tokenized.norms properties. */\n  public void testNorms() throws Exception {\n    \n    Document doc;\n    \n    // Don't set anything, use the defaults\n    doc = createTestNormsDocument(false, false, false, false);\n    assertTrue(doc.getField(DocMaker.TITLE_FIELD).getOmitNorms());\n    assertFalse(doc.getField(DocMaker.BODY_FIELD).getOmitNorms());\n    \n    // Set norms to false\n    doc = createTestNormsDocument(true, false, false, false);\n    assertTrue(doc.getField(DocMaker.TITLE_FIELD).getOmitNorms());\n    assertFalse(doc.getField(DocMaker.BODY_FIELD).getOmitNorms());\n    \n    // Set norms to true\n    doc = createTestNormsDocument(true, true, false, false);\n    assertFalse(doc.getField(DocMaker.TITLE_FIELD).getOmitNorms());\n    assertFalse(doc.getField(DocMaker.BODY_FIELD).getOmitNorms());\n    \n    // Set body norms to false\n    doc = createTestNormsDocument(false, false, true, false);\n    assertTrue(doc.getField(DocMaker.TITLE_FIELD).getOmitNorms());\n    assertTrue(doc.getField(DocMaker.BODY_FIELD).getOmitNorms());\n    \n    // Set body norms to true\n    doc = createTestNormsDocument(false, false, true, true);\n    assertTrue(doc.getField(DocMaker.TITLE_FIELD).getOmitNorms());\n    assertFalse(doc.getField(DocMaker.BODY_FIELD).getOmitNorms());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6eb141f80638abdb6ffaa5149877f36ea39b6ad5","date":1315714072,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/DocMakerTest#testNorms().mjava","pathOld":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/DocMakerTest#testNorms().mjava","sourceNew":"  /* Tests doc.tokenized.norms and doc.body.tokenized.norms properties. */\n  public void testNorms() throws Exception {\n    \n    Document doc;\n    \n    // Don't set anything, use the defaults\n    doc = createTestNormsDocument(false, false, false, false);\n    assertTrue(doc.getField(DocMaker.TITLE_FIELD).fieldType().omitNorms());\n    assertFalse(doc.getField(DocMaker.BODY_FIELD).fieldType().omitNorms());\n    \n    // Set norms to false\n    doc = createTestNormsDocument(true, false, false, false);\n    assertTrue(doc.getField(DocMaker.TITLE_FIELD).fieldType().omitNorms());\n    assertFalse(doc.getField(DocMaker.BODY_FIELD).fieldType().omitNorms());\n    \n    // Set norms to true\n    doc = createTestNormsDocument(true, true, false, false);\n    assertFalse(doc.getField(DocMaker.TITLE_FIELD).fieldType().omitNorms());\n    assertFalse(doc.getField(DocMaker.BODY_FIELD).fieldType().omitNorms());\n    \n    // Set body norms to false\n    doc = createTestNormsDocument(false, false, true, false);\n    assertTrue(doc.getField(DocMaker.TITLE_FIELD).fieldType().omitNorms());\n    assertTrue(doc.getField(DocMaker.BODY_FIELD).fieldType().omitNorms());\n    \n    // Set body norms to true\n    doc = createTestNormsDocument(false, false, true, true);\n    assertTrue(doc.getField(DocMaker.TITLE_FIELD).fieldType().omitNorms());\n    assertFalse(doc.getField(DocMaker.BODY_FIELD).fieldType().omitNorms());\n  }\n\n","sourceOld":"  /* Tests doc.tokenized.norms and doc.body.tokenized.norms properties. */\n  public void testNorms() throws Exception {\n    \n    Document doc;\n    \n    // Don't set anything, use the defaults\n    doc = createTestNormsDocument(false, false, false, false);\n    assertTrue(doc.getField(DocMaker.TITLE_FIELD).omitNorms());\n    assertFalse(doc.getField(DocMaker.BODY_FIELD).omitNorms());\n    \n    // Set norms to false\n    doc = createTestNormsDocument(true, false, false, false);\n    assertTrue(doc.getField(DocMaker.TITLE_FIELD).omitNorms());\n    assertFalse(doc.getField(DocMaker.BODY_FIELD).omitNorms());\n    \n    // Set norms to true\n    doc = createTestNormsDocument(true, true, false, false);\n    assertFalse(doc.getField(DocMaker.TITLE_FIELD).omitNorms());\n    assertFalse(doc.getField(DocMaker.BODY_FIELD).omitNorms());\n    \n    // Set body norms to false\n    doc = createTestNormsDocument(false, false, true, false);\n    assertTrue(doc.getField(DocMaker.TITLE_FIELD).omitNorms());\n    assertTrue(doc.getField(DocMaker.BODY_FIELD).omitNorms());\n    \n    // Set body norms to true\n    doc = createTestNormsDocument(false, false, true, true);\n    assertTrue(doc.getField(DocMaker.TITLE_FIELD).omitNorms());\n    assertFalse(doc.getField(DocMaker.BODY_FIELD).omitNorms());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/DocMakerTest#testNorms().mjava","pathOld":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/DocMakerTest#testNorms().mjava","sourceNew":"  /* Tests doc.tokenized.norms and doc.body.tokenized.norms properties. */\n  public void testNorms() throws Exception {\n    \n    Document doc;\n    \n    // Don't set anything, use the defaults\n    doc = createTestNormsDocument(false, false, false, false);\n    assertTrue(doc.getField(DocMaker.TITLE_FIELD).fieldType().omitNorms());\n    assertFalse(doc.getField(DocMaker.BODY_FIELD).fieldType().omitNorms());\n    \n    // Set norms to false\n    doc = createTestNormsDocument(true, false, false, false);\n    assertTrue(doc.getField(DocMaker.TITLE_FIELD).fieldType().omitNorms());\n    assertFalse(doc.getField(DocMaker.BODY_FIELD).fieldType().omitNorms());\n    \n    // Set norms to true\n    doc = createTestNormsDocument(true, true, false, false);\n    assertFalse(doc.getField(DocMaker.TITLE_FIELD).fieldType().omitNorms());\n    assertFalse(doc.getField(DocMaker.BODY_FIELD).fieldType().omitNorms());\n    \n    // Set body norms to false\n    doc = createTestNormsDocument(false, false, true, false);\n    assertTrue(doc.getField(DocMaker.TITLE_FIELD).fieldType().omitNorms());\n    assertTrue(doc.getField(DocMaker.BODY_FIELD).fieldType().omitNorms());\n    \n    // Set body norms to true\n    doc = createTestNormsDocument(false, false, true, true);\n    assertTrue(doc.getField(DocMaker.TITLE_FIELD).fieldType().omitNorms());\n    assertFalse(doc.getField(DocMaker.BODY_FIELD).fieldType().omitNorms());\n  }\n\n","sourceOld":"  /* Tests doc.tokenized.norms and doc.body.tokenized.norms properties. */\n  public void testNorms() throws Exception {\n    \n    Document doc;\n    \n    // Don't set anything, use the defaults\n    doc = createTestNormsDocument(false, false, false, false);\n    assertTrue(doc.getField(DocMaker.TITLE_FIELD).fieldType().omitNorms());\n    assertFalse(doc.getField(DocMaker.BODY_FIELD).fieldType().omitNorms());\n    \n    // Set norms to false\n    doc = createTestNormsDocument(true, false, false, false);\n    assertTrue(doc.getField(DocMaker.TITLE_FIELD).fieldType().omitNorms());\n    assertFalse(doc.getField(DocMaker.BODY_FIELD).fieldType().omitNorms());\n    \n    // Set norms to true\n    doc = createTestNormsDocument(true, true, false, false);\n    assertFalse(doc.getField(DocMaker.TITLE_FIELD).fieldType().omitNorms());\n    assertFalse(doc.getField(DocMaker.BODY_FIELD).fieldType().omitNorms());\n    \n    // Set body norms to false\n    doc = createTestNormsDocument(false, false, true, false);\n    assertTrue(doc.getField(DocMaker.TITLE_FIELD).fieldType().omitNorms());\n    assertTrue(doc.getField(DocMaker.BODY_FIELD).fieldType().omitNorms());\n    \n    // Set body norms to true\n    doc = createTestNormsDocument(false, false, true, true);\n    assertTrue(doc.getField(DocMaker.TITLE_FIELD).fieldType().omitNorms());\n    assertFalse(doc.getField(DocMaker.BODY_FIELD).fieldType().omitNorms());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["6eb141f80638abdb6ffaa5149877f36ea39b6ad5"],"ecc11368dc265bfdad90214f8bf5da99016ab1e2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6eb141f80638abdb6ffaa5149877f36ea39b6ad5":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":[],"ecc11368dc265bfdad90214f8bf5da99016ab1e2":["70ad682703b8585f5d0a637efec044d57ec05efb","1509f151d7692d84fae414b2b799ac06ba60fcb4","868da859b43505d9d2a023bfeae6dd0c795f5295"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["70ad682703b8585f5d0a637efec044d57ec05efb","ecc11368dc265bfdad90214f8bf5da99016ab1e2","868da859b43505d9d2a023bfeae6dd0c795f5295"],"6eb141f80638abdb6ffaa5149877f36ea39b6ad5":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["6eb141f80638abdb6ffaa5149877f36ea39b6ad5"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["70ad682703b8585f5d0a637efec044d57ec05efb","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}