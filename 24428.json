{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader.StandardTermState#copyFrom(TermState).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader.StandardTermState#copyFrom(TermState).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader.StandardTermState#copyFrom(TermState).mjava","sourceNew":"    @Override\n    public void copyFrom(TermState _other) {\n      super.copyFrom(_other);\n      StandardTermState other = (StandardTermState) _other;\n      freqOffset = other.freqOffset;\n      proxOffset = other.proxOffset;\n      skipOffset = other.skipOffset;\n\n      // Do not copy bytes, bytesReader (else TermState is\n      // very heavy, ie drags around the entire block's\n      // byte[]).  On seek back, if next() is in fact used\n      // (rare!), they will be re-read from disk.\n    }\n\n","sourceOld":"    @Override\n    public void copyFrom(TermState _other) {\n      super.copyFrom(_other);\n      StandardTermState other = (StandardTermState) _other;\n      freqOffset = other.freqOffset;\n      proxOffset = other.proxOffset;\n      skipOffset = other.skipOffset;\n\n      // Do not copy bytes, bytesReader (else TermState is\n      // very heavy, ie drags around the entire block's\n      // byte[]).  On seek back, if next() is in fact used\n      // (rare!), they will be re-read from disk.\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a88d7b0899b7d22dcbd4cf8ca35d9ec9850ab98","date":1377268487,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader.StandardTermState#copyFrom(TermState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader.StandardTermState#copyFrom(TermState).mjava","sourceNew":"    @Override\n    public void copyFrom(TermState _other) {\n      super.copyFrom(_other);\n      StandardTermState other = (StandardTermState) _other;\n      freqOffset = other.freqOffset;\n      proxOffset = other.proxOffset;\n      skipOffset = other.skipOffset;\n    }\n\n","sourceOld":"    @Override\n    public void copyFrom(TermState _other) {\n      super.copyFrom(_other);\n      StandardTermState other = (StandardTermState) _other;\n      freqOffset = other.freqOffset;\n      proxOffset = other.proxOffset;\n      skipOffset = other.skipOffset;\n\n      // Do not copy bytes, bytesReader (else TermState is\n      // very heavy, ie drags around the entire block's\n      // byte[]).  On seek back, if next() is in fact used\n      // (rare!), they will be re-read from disk.\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2f948dd442d23baa6cbb28daf77c8db78b351329","date":1378742876,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader.StandardTermState#copyFrom(TermState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader.StandardTermState#copyFrom(TermState).mjava","sourceNew":"    @Override\n    public void copyFrom(TermState _other) {\n      super.copyFrom(_other);\n      StandardTermState other = (StandardTermState) _other;\n      freqOffset = other.freqOffset;\n      proxOffset = other.proxOffset;\n      skipOffset = other.skipOffset;\n    }\n\n","sourceOld":"    @Override\n    public void copyFrom(TermState _other) {\n      super.copyFrom(_other);\n      StandardTermState other = (StandardTermState) _other;\n      freqOffset = other.freqOffset;\n      proxOffset = other.proxOffset;\n      skipOffset = other.skipOffset;\n\n      // Do not copy bytes, bytesReader (else TermState is\n      // very heavy, ie drags around the entire block's\n      // byte[]).  On seek back, if next() is in fact used\n      // (rare!), they will be re-read from disk.\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cc45c615dbb82bf79d5f9550286098367874fbf","date":1409571423,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader.StandardTermState#copyFrom(TermState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader.StandardTermState#copyFrom(TermState).mjava","sourceNew":"    @Override\n    public void copyFrom(TermState _other) {\n      super.copyFrom(_other);\n      StandardTermState other = (StandardTermState) _other;\n      freqOffset = other.freqOffset;\n      proxOffset = other.proxOffset;\n      skipOffset = other.skipOffset;\n    }\n\n","sourceOld":"    @Override\n    public void copyFrom(TermState _other) {\n      super.copyFrom(_other);\n      StandardTermState other = (StandardTermState) _other;\n      freqOffset = other.freqOffset;\n      proxOffset = other.proxOffset;\n      skipOffset = other.skipOffset;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"402ad3ddc9da7b70da1b167667a60ece6a1381fb","date":1409656478,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader.StandardTermState#copyFrom(TermState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader.StandardTermState#copyFrom(TermState).mjava","sourceNew":"    @Override\n    public void copyFrom(TermState _other) {\n      super.copyFrom(_other);\n      StandardTermState other = (StandardTermState) _other;\n      freqOffset = other.freqOffset;\n      proxOffset = other.proxOffset;\n      skipOffset = other.skipOffset;\n    }\n\n","sourceOld":"    @Override\n    public void copyFrom(TermState _other) {\n      super.copyFrom(_other);\n      StandardTermState other = (StandardTermState) _other;\n      freqOffset = other.freqOffset;\n      proxOffset = other.proxOffset;\n      skipOffset = other.skipOffset;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1a88d7b0899b7d22dcbd4cf8ca35d9ec9850ab98":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cc45c615dbb82bf79d5f9550286098367874fbf":["2f948dd442d23baa6cbb28daf77c8db78b351329"],"2f948dd442d23baa6cbb28daf77c8db78b351329":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","1a88d7b0899b7d22dcbd4cf8ca35d9ec9850ab98"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["2f948dd442d23baa6cbb28daf77c8db78b351329","4cc45c615dbb82bf79d5f9550286098367874fbf"]},"commit2Childs":{"1a88d7b0899b7d22dcbd4cf8ca35d9ec9850ab98":["2f948dd442d23baa6cbb28daf77c8db78b351329"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["1a88d7b0899b7d22dcbd4cf8ca35d9ec9850ab98","2f948dd442d23baa6cbb28daf77c8db78b351329"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4cc45c615dbb82bf79d5f9550286098367874fbf":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"2f948dd442d23baa6cbb28daf77c8db78b351329":["4cc45c615dbb82bf79d5f9550286098367874fbf","402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}