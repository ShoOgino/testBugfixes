{"path":"lucene/spatial/src/java/org/apache/lucene/spatial/search/GeoPointDistanceQuery#GeoPointDistanceQuery(String,GeoRect,double,double,double).mjava","commits":[{"id":"937923083e4d137932336fc80f3d78758ff698a6","date":1454691519,"type":1,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/search/GeoPointDistanceQuery#GeoPointDistanceQuery(String,GeoRect,double,double,double).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/search/GeoPointDistanceQuery#GeoPointDistanceQuery(String,GeoRect,double,double,double).mjava","sourceNew":"  private GeoPointDistanceQuery(final String field, GeoRect bbox, final double centerLon,\n                                final double centerLat, final double radiusMeters) {\n    super(field, bbox.minLon, bbox.minLat, bbox.maxLon, bbox.maxLat);\n    {\n      // check longitudinal overlap (limits radius)\n      final double maxRadius = GeoDistanceUtils.maxRadialDistanceMeters(centerLon, centerLat);\n      if (radiusMeters > maxRadius) {\n        throw new IllegalArgumentException(\"radiusMeters \" + radiusMeters + \" exceeds maxRadius [\" + maxRadius\n            + \"] at location [\" + centerLon + \" \" + centerLat + \"]\");\n      }\n    }\n\n    if (GeoUtils.isValidLon(centerLon) == false) {\n      throw new IllegalArgumentException(\"invalid centerLon \" + centerLon);\n    }\n\n    if (GeoUtils.isValidLat(centerLat) == false) {\n      throw new IllegalArgumentException(\"invalid centerLat \" + centerLat);\n    }\n\n    if (radiusMeters <= 0.0) {\n      throw new IllegalArgumentException(\"invalid radiusMeters \" + radiusMeters);\n    }\n\n    this.centerLon = centerLon;\n    this.centerLat = centerLat;\n    this.radiusMeters = radiusMeters;\n  }\n\n","sourceOld":"  private GeoPointDistanceQuery(final String field, GeoRect bbox, final double centerLon,\n                                final double centerLat, final double radiusMeters) {\n    super(field, bbox.minLon, bbox.minLat, bbox.maxLon, bbox.maxLat);\n    {\n      // check longitudinal overlap (limits radius)\n      final double maxRadius = GeoDistanceUtils.maxRadialDistanceMeters(centerLon, centerLat);\n      if (radiusMeters > maxRadius) {\n        throw new IllegalArgumentException(\"radiusMeters \" + radiusMeters + \" exceeds maxRadius [\" + maxRadius\n            + \"] at location [\" + centerLon + \" \" + centerLat + \"]\");\n      }\n    }\n\n    if (GeoUtils.isValidLon(centerLon) == false) {\n      throw new IllegalArgumentException(\"invalid centerLon \" + centerLon);\n    }\n\n    if (GeoUtils.isValidLat(centerLat) == false) {\n      throw new IllegalArgumentException(\"invalid centerLat \" + centerLat);\n    }\n\n    if (radiusMeters <= 0.0) {\n      throw new IllegalArgumentException(\"invalid radiusMeters \" + radiusMeters);\n    }\n\n    this.centerLon = centerLon;\n    this.centerLat = centerLat;\n    this.radiusMeters = radiusMeters;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"62cc423073d23f01208c6cf85844dedd80011121","date":1454731549,"type":5,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/search/GeoPointDistanceQuery#GeoPointDistanceQuery(String,TermEncoding,GeoRect,double,double,double).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/search/GeoPointDistanceQuery#GeoPointDistanceQuery(String,GeoRect,double,double,double).mjava","sourceNew":"  private GeoPointDistanceQuery(final String field, final TermEncoding termEncoding, final GeoRect bbox, final double centerLon,\n                                final double centerLat, final double radiusMeters) {\n    super(field, termEncoding, bbox.minLon, bbox.minLat, bbox.maxLon, bbox.maxLat);\n    {\n      // check longitudinal overlap (restrict distance to maximum longitudinal radius)\n      // todo this restriction technically shouldn't be needed,\n      // its only purpose is to ensure the bounding box doesn't self overlap.\n      final double maxRadius = GeoDistanceUtils.maxRadialDistanceMeters(centerLon, centerLat);\n      if (radiusMeters > maxRadius) {\n        throw new IllegalArgumentException(\"radiusMeters \" + radiusMeters + \" exceeds maxRadius [\" + maxRadius\n            + \"] at location [\" + centerLon + \" \" + centerLat + \"]\");\n      }\n    }\n\n    if (GeoUtils.isValidLon(centerLon) == false) {\n      throw new IllegalArgumentException(\"invalid centerLon \" + centerLon);\n    }\n\n    if (GeoUtils.isValidLat(centerLat) == false) {\n      throw new IllegalArgumentException(\"invalid centerLat \" + centerLat);\n    }\n\n    if (radiusMeters <= 0.0) {\n      throw new IllegalArgumentException(\"invalid radiusMeters \" + radiusMeters);\n    }\n\n    this.centerLon = centerLon;\n    this.centerLat = centerLat;\n    this.radiusMeters = radiusMeters;\n  }\n\n","sourceOld":"  private GeoPointDistanceQuery(final String field, GeoRect bbox, final double centerLon,\n                                final double centerLat, final double radiusMeters) {\n    super(field, bbox.minLon, bbox.minLat, bbox.maxLon, bbox.maxLat);\n    {\n      // check longitudinal overlap (limits radius)\n      final double maxRadius = GeoDistanceUtils.maxRadialDistanceMeters(centerLon, centerLat);\n      if (radiusMeters > maxRadius) {\n        throw new IllegalArgumentException(\"radiusMeters \" + radiusMeters + \" exceeds maxRadius [\" + maxRadius\n            + \"] at location [\" + centerLon + \" \" + centerLat + \"]\");\n      }\n    }\n\n    if (GeoUtils.isValidLon(centerLon) == false) {\n      throw new IllegalArgumentException(\"invalid centerLon \" + centerLon);\n    }\n\n    if (GeoUtils.isValidLat(centerLat) == false) {\n      throw new IllegalArgumentException(\"invalid centerLat \" + centerLat);\n    }\n\n    if (radiusMeters <= 0.0) {\n      throw new IllegalArgumentException(\"invalid radiusMeters \" + radiusMeters);\n    }\n\n    this.centerLon = centerLon;\n    this.centerLat = centerLat;\n    this.radiusMeters = radiusMeters;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a207d19eac354d649c3f0e2cce070017c78125e","date":1454776470,"type":5,"author":"Erick Erickson","isMerge":true,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/search/GeoPointDistanceQuery#GeoPointDistanceQuery(String,TermEncoding,GeoRect,double,double,double).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/search/GeoPointDistanceQuery#GeoPointDistanceQuery(String,GeoRect,double,double,double).mjava","sourceNew":"  private GeoPointDistanceQuery(final String field, final TermEncoding termEncoding, final GeoRect bbox, final double centerLon,\n                                final double centerLat, final double radiusMeters) {\n    super(field, termEncoding, bbox.minLon, bbox.minLat, bbox.maxLon, bbox.maxLat);\n    {\n      // check longitudinal overlap (restrict distance to maximum longitudinal radius)\n      // todo this restriction technically shouldn't be needed,\n      // its only purpose is to ensure the bounding box doesn't self overlap.\n      final double maxRadius = GeoDistanceUtils.maxRadialDistanceMeters(centerLon, centerLat);\n      if (radiusMeters > maxRadius) {\n        throw new IllegalArgumentException(\"radiusMeters \" + radiusMeters + \" exceeds maxRadius [\" + maxRadius\n            + \"] at location [\" + centerLon + \" \" + centerLat + \"]\");\n      }\n    }\n\n    if (GeoUtils.isValidLon(centerLon) == false) {\n      throw new IllegalArgumentException(\"invalid centerLon \" + centerLon);\n    }\n\n    if (GeoUtils.isValidLat(centerLat) == false) {\n      throw new IllegalArgumentException(\"invalid centerLat \" + centerLat);\n    }\n\n    if (radiusMeters <= 0.0) {\n      throw new IllegalArgumentException(\"invalid radiusMeters \" + radiusMeters);\n    }\n\n    this.centerLon = centerLon;\n    this.centerLat = centerLat;\n    this.radiusMeters = radiusMeters;\n  }\n\n","sourceOld":"  private GeoPointDistanceQuery(final String field, GeoRect bbox, final double centerLon,\n                                final double centerLat, final double radiusMeters) {\n    super(field, bbox.minLon, bbox.minLat, bbox.maxLon, bbox.maxLat);\n    {\n      // check longitudinal overlap (limits radius)\n      final double maxRadius = GeoDistanceUtils.maxRadialDistanceMeters(centerLon, centerLat);\n      if (radiusMeters > maxRadius) {\n        throw new IllegalArgumentException(\"radiusMeters \" + radiusMeters + \" exceeds maxRadius [\" + maxRadius\n            + \"] at location [\" + centerLon + \" \" + centerLat + \"]\");\n      }\n    }\n\n    if (GeoUtils.isValidLon(centerLon) == false) {\n      throw new IllegalArgumentException(\"invalid centerLon \" + centerLon);\n    }\n\n    if (GeoUtils.isValidLat(centerLat) == false) {\n      throw new IllegalArgumentException(\"invalid centerLat \" + centerLat);\n    }\n\n    if (radiusMeters <= 0.0) {\n      throw new IllegalArgumentException(\"invalid radiusMeters \" + radiusMeters);\n    }\n\n    this.centerLon = centerLon;\n    this.centerLat = centerLat;\n    this.radiusMeters = radiusMeters;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5a207d19eac354d649c3f0e2cce070017c78125e":["937923083e4d137932336fc80f3d78758ff698a6","62cc423073d23f01208c6cf85844dedd80011121"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"62cc423073d23f01208c6cf85844dedd80011121":["937923083e4d137932336fc80f3d78758ff698a6"],"937923083e4d137932336fc80f3d78758ff698a6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5a207d19eac354d649c3f0e2cce070017c78125e"]},"commit2Childs":{"5a207d19eac354d649c3f0e2cce070017c78125e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["937923083e4d137932336fc80f3d78758ff698a6"],"62cc423073d23f01208c6cf85844dedd80011121":["5a207d19eac354d649c3f0e2cce070017c78125e"],"937923083e4d137932336fc80f3d78758ff698a6":["5a207d19eac354d649c3f0e2cce070017c78125e","62cc423073d23f01208c6cf85844dedd80011121"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}