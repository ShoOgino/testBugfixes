{"path":"lucene/core/src/java/org/apache/lucene/index/ReadersAndUpdates#writeLiveDocs(Directory).mjava","commits":[{"id":"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0","date":1383367127,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/ReadersAndUpdates#writeLiveDocs(Directory).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/ReadersAndLiveDocs#writeLiveDocs(Directory).mjava","sourceNew":"  // Commit live docs (writes new _X_N.del files) and field updates (writes new\n  // _X_N updates files) to the directory; returns true if it wrote any file\n  // and false if there were no new deletes or updates to write:\n  public synchronized boolean writeLiveDocs(Directory dir) throws IOException {\n    assert Thread.holdsLock(writer);\n    //System.out.println(\"rld.writeLiveDocs seg=\" + info + \" pendingDelCount=\" + pendingDeleteCount + \" numericUpdates=\" + numericUpdates);\n    if (pendingDeleteCount == 0) {\n      return false;\n    }\n    \n    // We have new deletes\n    assert liveDocs.length() == info.info.getDocCount();\n    \n    // Do this so we can delete any created files on\n    // exception; this saves all codecs from having to do\n    // it:\n    TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(dir);\n    \n    // We can write directly to the actual name (vs to a\n    // .tmp & renaming it) because the file is not live\n    // until segments file is written:\n    boolean success = false;\n    try {\n      Codec codec = info.info.getCodec();\n      codec.liveDocsFormat().writeLiveDocs((MutableBits)liveDocs, trackingDir, info, pendingDeleteCount, IOContext.DEFAULT);\n      success = true;\n    } finally {\n      if (!success) {\n        // Advance only the nextWriteDelGen so that a 2nd\n        // attempt to write will write to a new file\n        info.advanceNextWriteDelGen();\n        \n        // Delete any partially created file(s):\n        for (String fileName : trackingDir.getCreatedFiles()) {\n          try {\n            dir.deleteFile(fileName);\n          } catch (Throwable t) {\n            // Ignore so we throw only the first exc\n          }\n        }\n      }\n    }\n    \n    // If we hit an exc in the line above (eg disk full)\n    // then info's delGen remains pointing to the previous\n    // (successfully written) del docs:\n    info.advanceDelGen();\n    info.setDelCount(info.getDelCount() + pendingDeleteCount);\n    pendingDeleteCount = 0;\n    \n    return true;\n  }\n\n","sourceOld":"  // Commit live docs (writes new _X_N.del files) and field updates (writes new\n  // _X_N updates files) to the directory; returns true if it wrote any file\n  // and false if there were no new deletes or updates to write:\n  // TODO (DVU_RENAME) to writeDeletesAndUpdates\n  public synchronized boolean writeLiveDocs(Directory dir) throws IOException {\n    assert Thread.holdsLock(writer);\n    //System.out.println(\"rld.writeLiveDocs seg=\" + info + \" pendingDelCount=\" + pendingDeleteCount + \" numericUpdates=\" + numericUpdates);\n    if (pendingDeleteCount == 0) {\n      return false;\n    }\n    \n    // We have new deletes\n    assert liveDocs.length() == info.info.getDocCount();\n    \n    // Do this so we can delete any created files on\n    // exception; this saves all codecs from having to do\n    // it:\n    TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(dir);\n    \n    // We can write directly to the actual name (vs to a\n    // .tmp & renaming it) because the file is not live\n    // until segments file is written:\n    boolean success = false;\n    try {\n      Codec codec = info.info.getCodec();\n      codec.liveDocsFormat().writeLiveDocs((MutableBits)liveDocs, trackingDir, info, pendingDeleteCount, IOContext.DEFAULT);\n      success = true;\n    } finally {\n      if (!success) {\n        // Advance only the nextWriteDelGen so that a 2nd\n        // attempt to write will write to a new file\n        info.advanceNextWriteDelGen();\n        \n        // Delete any partially created file(s):\n        for (String fileName : trackingDir.getCreatedFiles()) {\n          try {\n            dir.deleteFile(fileName);\n          } catch (Throwable t) {\n            // Ignore so we throw only the first exc\n          }\n        }\n      }\n    }\n    \n    // If we hit an exc in the line above (eg disk full)\n    // then info's delGen remains pointing to the previous\n    // (successfully written) del docs:\n    info.advanceDelGen();\n    info.setDelCount(info.getDelCount() + pendingDeleteCount);\n    pendingDeleteCount = 0;\n    \n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"98d2deb8c96c79ebef084a1f8e5a1a6c08608f13","date":1409346855,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/ReadersAndUpdates#writeLiveDocs(Directory).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/ReadersAndUpdates#writeLiveDocs(Directory).mjava","sourceNew":"  // Commit live docs (writes new _X_N.del files) and field updates (writes new\n  // _X_N updates files) to the directory; returns true if it wrote any file\n  // and false if there were no new deletes or updates to write:\n  public synchronized boolean writeLiveDocs(Directory dir) throws IOException {\n    assert Thread.holdsLock(writer);\n    //System.out.println(\"rld.writeLiveDocs seg=\" + info + \" pendingDelCount=\" + pendingDeleteCount + \" numericUpdates=\" + numericUpdates);\n    if (pendingDeleteCount == 0) {\n      return false;\n    }\n    \n    // We have new deletes\n    assert liveDocs.length() == info.info.getDocCount();\n    \n    // Do this so we can delete any created files on\n    // exception; this saves all codecs from having to do\n    // it:\n    TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(dir);\n    \n    // We can write directly to the actual name (vs to a\n    // .tmp & renaming it) because the file is not live\n    // until segments file is written:\n    boolean success = false;\n    try {\n      Codec codec = info.info.getCodec();\n      codec.liveDocsFormat().writeLiveDocs((MutableBits)liveDocs, trackingDir, info, pendingDeleteCount, IOContext.DEFAULT);\n      success = true;\n    } finally {\n      if (!success) {\n        // Advance only the nextWriteDelGen so that a 2nd\n        // attempt to write will write to a new file\n        info.advanceNextWriteDelGen();\n        \n        // Delete any partially created file(s):\n        for (String fileName : trackingDir.getCreatedFiles()) {\n          IOUtils.deleteFilesIgnoringExceptions(dir, fileName);\n        }\n      }\n    }\n    \n    // If we hit an exc in the line above (eg disk full)\n    // then info's delGen remains pointing to the previous\n    // (successfully written) del docs:\n    info.advanceDelGen();\n    info.setDelCount(info.getDelCount() + pendingDeleteCount);\n    pendingDeleteCount = 0;\n    \n    return true;\n  }\n\n","sourceOld":"  // Commit live docs (writes new _X_N.del files) and field updates (writes new\n  // _X_N updates files) to the directory; returns true if it wrote any file\n  // and false if there were no new deletes or updates to write:\n  public synchronized boolean writeLiveDocs(Directory dir) throws IOException {\n    assert Thread.holdsLock(writer);\n    //System.out.println(\"rld.writeLiveDocs seg=\" + info + \" pendingDelCount=\" + pendingDeleteCount + \" numericUpdates=\" + numericUpdates);\n    if (pendingDeleteCount == 0) {\n      return false;\n    }\n    \n    // We have new deletes\n    assert liveDocs.length() == info.info.getDocCount();\n    \n    // Do this so we can delete any created files on\n    // exception; this saves all codecs from having to do\n    // it:\n    TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(dir);\n    \n    // We can write directly to the actual name (vs to a\n    // .tmp & renaming it) because the file is not live\n    // until segments file is written:\n    boolean success = false;\n    try {\n      Codec codec = info.info.getCodec();\n      codec.liveDocsFormat().writeLiveDocs((MutableBits)liveDocs, trackingDir, info, pendingDeleteCount, IOContext.DEFAULT);\n      success = true;\n    } finally {\n      if (!success) {\n        // Advance only the nextWriteDelGen so that a 2nd\n        // attempt to write will write to a new file\n        info.advanceNextWriteDelGen();\n        \n        // Delete any partially created file(s):\n        for (String fileName : trackingDir.getCreatedFiles()) {\n          try {\n            dir.deleteFile(fileName);\n          } catch (Throwable t) {\n            // Ignore so we throw only the first exc\n          }\n        }\n      }\n    }\n    \n    // If we hit an exc in the line above (eg disk full)\n    // then info's delGen remains pointing to the previous\n    // (successfully written) del docs:\n    info.advanceDelGen();\n    info.setDelCount(info.getDelCount() + pendingDeleteCount);\n    pendingDeleteCount = 0;\n    \n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0267c69e2456a3477a1ad785723f2135da3117e","date":1425317087,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/ReadersAndUpdates#writeLiveDocs(Directory).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/ReadersAndUpdates#writeLiveDocs(Directory).mjava","sourceNew":"  // Commit live docs (writes new _X_N.del files) and field updates (writes new\n  // _X_N updates files) to the directory; returns true if it wrote any file\n  // and false if there were no new deletes or updates to write:\n  public synchronized boolean writeLiveDocs(Directory dir) throws IOException {\n    assert Thread.holdsLock(writer);\n    //System.out.println(\"rld.writeLiveDocs seg=\" + info + \" pendingDelCount=\" + pendingDeleteCount + \" numericUpdates=\" + numericUpdates);\n    if (pendingDeleteCount == 0) {\n      return false;\n    }\n    \n    // We have new deletes\n    assert liveDocs.length() == info.info.maxDoc();\n    \n    // Do this so we can delete any created files on\n    // exception; this saves all codecs from having to do\n    // it:\n    TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(dir);\n    \n    // We can write directly to the actual name (vs to a\n    // .tmp & renaming it) because the file is not live\n    // until segments file is written:\n    boolean success = false;\n    try {\n      Codec codec = info.info.getCodec();\n      codec.liveDocsFormat().writeLiveDocs((MutableBits)liveDocs, trackingDir, info, pendingDeleteCount, IOContext.DEFAULT);\n      success = true;\n    } finally {\n      if (!success) {\n        // Advance only the nextWriteDelGen so that a 2nd\n        // attempt to write will write to a new file\n        info.advanceNextWriteDelGen();\n        \n        // Delete any partially created file(s):\n        for (String fileName : trackingDir.getCreatedFiles()) {\n          IOUtils.deleteFilesIgnoringExceptions(dir, fileName);\n        }\n      }\n    }\n    \n    // If we hit an exc in the line above (eg disk full)\n    // then info's delGen remains pointing to the previous\n    // (successfully written) del docs:\n    info.advanceDelGen();\n    info.setDelCount(info.getDelCount() + pendingDeleteCount);\n    pendingDeleteCount = 0;\n    \n    return true;\n  }\n\n","sourceOld":"  // Commit live docs (writes new _X_N.del files) and field updates (writes new\n  // _X_N updates files) to the directory; returns true if it wrote any file\n  // and false if there were no new deletes or updates to write:\n  public synchronized boolean writeLiveDocs(Directory dir) throws IOException {\n    assert Thread.holdsLock(writer);\n    //System.out.println(\"rld.writeLiveDocs seg=\" + info + \" pendingDelCount=\" + pendingDeleteCount + \" numericUpdates=\" + numericUpdates);\n    if (pendingDeleteCount == 0) {\n      return false;\n    }\n    \n    // We have new deletes\n    assert liveDocs.length() == info.info.getDocCount();\n    \n    // Do this so we can delete any created files on\n    // exception; this saves all codecs from having to do\n    // it:\n    TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(dir);\n    \n    // We can write directly to the actual name (vs to a\n    // .tmp & renaming it) because the file is not live\n    // until segments file is written:\n    boolean success = false;\n    try {\n      Codec codec = info.info.getCodec();\n      codec.liveDocsFormat().writeLiveDocs((MutableBits)liveDocs, trackingDir, info, pendingDeleteCount, IOContext.DEFAULT);\n      success = true;\n    } finally {\n      if (!success) {\n        // Advance only the nextWriteDelGen so that a 2nd\n        // attempt to write will write to a new file\n        info.advanceNextWriteDelGen();\n        \n        // Delete any partially created file(s):\n        for (String fileName : trackingDir.getCreatedFiles()) {\n          IOUtils.deleteFilesIgnoringExceptions(dir, fileName);\n        }\n      }\n    }\n    \n    // If we hit an exc in the line above (eg disk full)\n    // then info's delGen remains pointing to the previous\n    // (successfully written) del docs:\n    info.advanceDelGen();\n    info.setDelCount(info.getDelCount() + pendingDeleteCount);\n    pendingDeleteCount = 0;\n    \n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b06445ae1731e049327712db0454e5643ca9b7fe","date":1425329139,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/ReadersAndUpdates#writeLiveDocs(Directory).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/ReadersAndUpdates#writeLiveDocs(Directory).mjava","sourceNew":"  // Commit live docs (writes new _X_N.del files) and field updates (writes new\n  // _X_N updates files) to the directory; returns true if it wrote any file\n  // and false if there were no new deletes or updates to write:\n  public synchronized boolean writeLiveDocs(Directory dir) throws IOException {\n    assert Thread.holdsLock(writer);\n    //System.out.println(\"rld.writeLiveDocs seg=\" + info + \" pendingDelCount=\" + pendingDeleteCount + \" numericUpdates=\" + numericUpdates);\n    if (pendingDeleteCount == 0) {\n      return false;\n    }\n    \n    // We have new deletes\n    assert liveDocs.length() == info.info.maxDoc();\n    \n    // Do this so we can delete any created files on\n    // exception; this saves all codecs from having to do\n    // it:\n    TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(dir);\n    \n    // We can write directly to the actual name (vs to a\n    // .tmp & renaming it) because the file is not live\n    // until segments file is written:\n    boolean success = false;\n    try {\n      Codec codec = info.info.getCodec();\n      codec.liveDocsFormat().writeLiveDocs((MutableBits)liveDocs, trackingDir, info, pendingDeleteCount, IOContext.DEFAULT);\n      success = true;\n    } finally {\n      if (!success) {\n        // Advance only the nextWriteDelGen so that a 2nd\n        // attempt to write will write to a new file\n        info.advanceNextWriteDelGen();\n        \n        // Delete any partially created file(s):\n        for (String fileName : trackingDir.getCreatedFiles()) {\n          IOUtils.deleteFilesIgnoringExceptions(dir, fileName);\n        }\n      }\n    }\n    \n    // If we hit an exc in the line above (eg disk full)\n    // then info's delGen remains pointing to the previous\n    // (successfully written) del docs:\n    info.advanceDelGen();\n    info.setDelCount(info.getDelCount() + pendingDeleteCount);\n    pendingDeleteCount = 0;\n    \n    return true;\n  }\n\n","sourceOld":"  // Commit live docs (writes new _X_N.del files) and field updates (writes new\n  // _X_N updates files) to the directory; returns true if it wrote any file\n  // and false if there were no new deletes or updates to write:\n  public synchronized boolean writeLiveDocs(Directory dir) throws IOException {\n    assert Thread.holdsLock(writer);\n    //System.out.println(\"rld.writeLiveDocs seg=\" + info + \" pendingDelCount=\" + pendingDeleteCount + \" numericUpdates=\" + numericUpdates);\n    if (pendingDeleteCount == 0) {\n      return false;\n    }\n    \n    // We have new deletes\n    assert liveDocs.length() == info.info.getDocCount();\n    \n    // Do this so we can delete any created files on\n    // exception; this saves all codecs from having to do\n    // it:\n    TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(dir);\n    \n    // We can write directly to the actual name (vs to a\n    // .tmp & renaming it) because the file is not live\n    // until segments file is written:\n    boolean success = false;\n    try {\n      Codec codec = info.info.getCodec();\n      codec.liveDocsFormat().writeLiveDocs((MutableBits)liveDocs, trackingDir, info, pendingDeleteCount, IOContext.DEFAULT);\n      success = true;\n    } finally {\n      if (!success) {\n        // Advance only the nextWriteDelGen so that a 2nd\n        // attempt to write will write to a new file\n        info.advanceNextWriteDelGen();\n        \n        // Delete any partially created file(s):\n        for (String fileName : trackingDir.getCreatedFiles()) {\n          IOUtils.deleteFilesIgnoringExceptions(dir, fileName);\n        }\n      }\n    }\n    \n    // If we hit an exc in the line above (eg disk full)\n    // then info's delGen remains pointing to the previous\n    // (successfully written) del docs:\n    info.advanceDelGen();\n    info.setDelCount(info.getDelCount() + pendingDeleteCount);\n    pendingDeleteCount = 0;\n    \n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/ReadersAndUpdates#writeLiveDocs(Directory).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/ReadersAndUpdates#writeLiveDocs(Directory).mjava","sourceNew":"  // Commit live docs (writes new _X_N.del files) and field updates (writes new\n  // _X_N updates files) to the directory; returns true if it wrote any file\n  // and false if there were no new deletes or updates to write:\n  public synchronized boolean writeLiveDocs(Directory dir) throws IOException {\n    assert Thread.holdsLock(writer);\n    //System.out.println(\"rld.writeLiveDocs seg=\" + info + \" pendingDelCount=\" + pendingDeleteCount + \" numericUpdates=\" + numericUpdates);\n    if (pendingDeleteCount == 0) {\n      return false;\n    }\n    \n    // We have new deletes\n    assert liveDocs.length() == info.info.maxDoc();\n    \n    // Do this so we can delete any created files on\n    // exception; this saves all codecs from having to do\n    // it:\n    TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(dir);\n    \n    // We can write directly to the actual name (vs to a\n    // .tmp & renaming it) because the file is not live\n    // until segments file is written:\n    boolean success = false;\n    try {\n      Codec codec = info.info.getCodec();\n      codec.liveDocsFormat().writeLiveDocs((MutableBits)liveDocs, trackingDir, info, pendingDeleteCount, IOContext.DEFAULT);\n      success = true;\n    } finally {\n      if (!success) {\n        // Advance only the nextWriteDelGen so that a 2nd\n        // attempt to write will write to a new file\n        info.advanceNextWriteDelGen();\n        \n        // Delete any partially created file(s):\n        for (String fileName : trackingDir.getCreatedFiles()) {\n          IOUtils.deleteFilesIgnoringExceptions(dir, fileName);\n        }\n      }\n    }\n    \n    // If we hit an exc in the line above (eg disk full)\n    // then info's delGen remains pointing to the previous\n    // (successfully written) del docs:\n    info.advanceDelGen();\n    info.setDelCount(info.getDelCount() + pendingDeleteCount);\n    pendingDeleteCount = 0;\n    \n    return true;\n  }\n\n","sourceOld":"  // Commit live docs (writes new _X_N.del files) and field updates (writes new\n  // _X_N updates files) to the directory; returns true if it wrote any file\n  // and false if there were no new deletes or updates to write:\n  public synchronized boolean writeLiveDocs(Directory dir) throws IOException {\n    assert Thread.holdsLock(writer);\n    //System.out.println(\"rld.writeLiveDocs seg=\" + info + \" pendingDelCount=\" + pendingDeleteCount + \" numericUpdates=\" + numericUpdates);\n    if (pendingDeleteCount == 0) {\n      return false;\n    }\n    \n    // We have new deletes\n    assert liveDocs.length() == info.info.getDocCount();\n    \n    // Do this so we can delete any created files on\n    // exception; this saves all codecs from having to do\n    // it:\n    TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(dir);\n    \n    // We can write directly to the actual name (vs to a\n    // .tmp & renaming it) because the file is not live\n    // until segments file is written:\n    boolean success = false;\n    try {\n      Codec codec = info.info.getCodec();\n      codec.liveDocsFormat().writeLiveDocs((MutableBits)liveDocs, trackingDir, info, pendingDeleteCount, IOContext.DEFAULT);\n      success = true;\n    } finally {\n      if (!success) {\n        // Advance only the nextWriteDelGen so that a 2nd\n        // attempt to write will write to a new file\n        info.advanceNextWriteDelGen();\n        \n        // Delete any partially created file(s):\n        for (String fileName : trackingDir.getCreatedFiles()) {\n          IOUtils.deleteFilesIgnoringExceptions(dir, fileName);\n        }\n      }\n    }\n    \n    // If we hit an exc in the line above (eg disk full)\n    // then info's delGen remains pointing to the previous\n    // (successfully written) del docs:\n    info.advanceDelGen();\n    info.setDelCount(info.getDelCount() + pendingDeleteCount);\n    pendingDeleteCount = 0;\n    \n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4363cd33f6eff7fb4753574a441e2d18c1022a4","date":1498067235,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/ReadersAndUpdates#writeLiveDocs(Directory).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/ReadersAndUpdates#writeLiveDocs(Directory).mjava","sourceNew":"  // Commit live docs (writes new _X_N.del files) and field updates (writes new\n  // _X_N updates files) to the directory; returns true if it wrote any file\n  // and false if there were no new deletes or updates to write:\n  public synchronized boolean writeLiveDocs(Directory dir) throws IOException {\n    if (pendingDeleteCount == 0) {\n      return false;\n    }\n    \n    // We have new deletes\n    assert liveDocs.length() == info.info.maxDoc();\n    \n    // Do this so we can delete any created files on\n    // exception; this saves all codecs from having to do\n    // it:\n    TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(dir);\n    \n    // We can write directly to the actual name (vs to a\n    // .tmp & renaming it) because the file is not live\n    // until segments file is written:\n    boolean success = false;\n    try {\n      Codec codec = info.info.getCodec();\n      codec.liveDocsFormat().writeLiveDocs((MutableBits)liveDocs, trackingDir, info, pendingDeleteCount, IOContext.DEFAULT);\n      success = true;\n    } finally {\n      if (!success) {\n        // Advance only the nextWriteDelGen so that a 2nd\n        // attempt to write will write to a new file\n        info.advanceNextWriteDelGen();\n        \n        // Delete any partially created file(s):\n        for (String fileName : trackingDir.getCreatedFiles()) {\n          IOUtils.deleteFilesIgnoringExceptions(dir, fileName);\n        }\n      }\n    }\n    \n    // If we hit an exc in the line above (eg disk full)\n    // then info's delGen remains pointing to the previous\n    // (successfully written) del docs:\n    info.advanceDelGen();\n    info.setDelCount(info.getDelCount() + pendingDeleteCount);\n    pendingDeleteCount = 0;\n    \n    return true;\n  }\n\n","sourceOld":"  // Commit live docs (writes new _X_N.del files) and field updates (writes new\n  // _X_N updates files) to the directory; returns true if it wrote any file\n  // and false if there were no new deletes or updates to write:\n  public synchronized boolean writeLiveDocs(Directory dir) throws IOException {\n    assert Thread.holdsLock(writer);\n    //System.out.println(\"rld.writeLiveDocs seg=\" + info + \" pendingDelCount=\" + pendingDeleteCount + \" numericUpdates=\" + numericUpdates);\n    if (pendingDeleteCount == 0) {\n      return false;\n    }\n    \n    // We have new deletes\n    assert liveDocs.length() == info.info.maxDoc();\n    \n    // Do this so we can delete any created files on\n    // exception; this saves all codecs from having to do\n    // it:\n    TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(dir);\n    \n    // We can write directly to the actual name (vs to a\n    // .tmp & renaming it) because the file is not live\n    // until segments file is written:\n    boolean success = false;\n    try {\n      Codec codec = info.info.getCodec();\n      codec.liveDocsFormat().writeLiveDocs((MutableBits)liveDocs, trackingDir, info, pendingDeleteCount, IOContext.DEFAULT);\n      success = true;\n    } finally {\n      if (!success) {\n        // Advance only the nextWriteDelGen so that a 2nd\n        // attempt to write will write to a new file\n        info.advanceNextWriteDelGen();\n        \n        // Delete any partially created file(s):\n        for (String fileName : trackingDir.getCreatedFiles()) {\n          IOUtils.deleteFilesIgnoringExceptions(dir, fileName);\n        }\n      }\n    }\n    \n    // If we hit an exc in the line above (eg disk full)\n    // then info's delGen remains pointing to the previous\n    // (successfully written) del docs:\n    info.advanceDelGen();\n    info.setDelCount(info.getDelCount() + pendingDeleteCount);\n    pendingDeleteCount = 0;\n    \n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/ReadersAndUpdates#writeLiveDocs(Directory).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/ReadersAndUpdates#writeLiveDocs(Directory).mjava","sourceNew":"  // Commit live docs (writes new _X_N.del files) and field updates (writes new\n  // _X_N updates files) to the directory; returns true if it wrote any file\n  // and false if there were no new deletes or updates to write:\n  public synchronized boolean writeLiveDocs(Directory dir) throws IOException {\n    if (pendingDeleteCount == 0) {\n      return false;\n    }\n    \n    // We have new deletes\n    assert liveDocs.length() == info.info.maxDoc();\n    \n    // Do this so we can delete any created files on\n    // exception; this saves all codecs from having to do\n    // it:\n    TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(dir);\n    \n    // We can write directly to the actual name (vs to a\n    // .tmp & renaming it) because the file is not live\n    // until segments file is written:\n    boolean success = false;\n    try {\n      Codec codec = info.info.getCodec();\n      codec.liveDocsFormat().writeLiveDocs((MutableBits)liveDocs, trackingDir, info, pendingDeleteCount, IOContext.DEFAULT);\n      success = true;\n    } finally {\n      if (!success) {\n        // Advance only the nextWriteDelGen so that a 2nd\n        // attempt to write will write to a new file\n        info.advanceNextWriteDelGen();\n        \n        // Delete any partially created file(s):\n        for (String fileName : trackingDir.getCreatedFiles()) {\n          IOUtils.deleteFilesIgnoringExceptions(dir, fileName);\n        }\n      }\n    }\n    \n    // If we hit an exc in the line above (eg disk full)\n    // then info's delGen remains pointing to the previous\n    // (successfully written) del docs:\n    info.advanceDelGen();\n    info.setDelCount(info.getDelCount() + pendingDeleteCount);\n    pendingDeleteCount = 0;\n    \n    return true;\n  }\n\n","sourceOld":"  // Commit live docs (writes new _X_N.del files) and field updates (writes new\n  // _X_N updates files) to the directory; returns true if it wrote any file\n  // and false if there were no new deletes or updates to write:\n  public synchronized boolean writeLiveDocs(Directory dir) throws IOException {\n    assert Thread.holdsLock(writer);\n    //System.out.println(\"rld.writeLiveDocs seg=\" + info + \" pendingDelCount=\" + pendingDeleteCount + \" numericUpdates=\" + numericUpdates);\n    if (pendingDeleteCount == 0) {\n      return false;\n    }\n    \n    // We have new deletes\n    assert liveDocs.length() == info.info.maxDoc();\n    \n    // Do this so we can delete any created files on\n    // exception; this saves all codecs from having to do\n    // it:\n    TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(dir);\n    \n    // We can write directly to the actual name (vs to a\n    // .tmp & renaming it) because the file is not live\n    // until segments file is written:\n    boolean success = false;\n    try {\n      Codec codec = info.info.getCodec();\n      codec.liveDocsFormat().writeLiveDocs((MutableBits)liveDocs, trackingDir, info, pendingDeleteCount, IOContext.DEFAULT);\n      success = true;\n    } finally {\n      if (!success) {\n        // Advance only the nextWriteDelGen so that a 2nd\n        // attempt to write will write to a new file\n        info.advanceNextWriteDelGen();\n        \n        // Delete any partially created file(s):\n        for (String fileName : trackingDir.getCreatedFiles()) {\n          IOUtils.deleteFilesIgnoringExceptions(dir, fileName);\n        }\n      }\n    }\n    \n    // If we hit an exc in the line above (eg disk full)\n    // then info's delGen remains pointing to the previous\n    // (successfully written) del docs:\n    info.advanceDelGen();\n    info.setDelCount(info.getDelCount() + pendingDeleteCount);\n    pendingDeleteCount = 0;\n    \n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/ReadersAndUpdates#writeLiveDocs(Directory).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/ReadersAndUpdates#writeLiveDocs(Directory).mjava","sourceNew":"  // Commit live docs (writes new _X_N.del files) and field updates (writes new\n  // _X_N updates files) to the directory; returns true if it wrote any file\n  // and false if there were no new deletes or updates to write:\n  public synchronized boolean writeLiveDocs(Directory dir) throws IOException {\n    if (pendingDeleteCount == 0) {\n      return false;\n    }\n    \n    // We have new deletes\n    assert liveDocs.length() == info.info.maxDoc();\n    \n    // Do this so we can delete any created files on\n    // exception; this saves all codecs from having to do\n    // it:\n    TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(dir);\n    \n    // We can write directly to the actual name (vs to a\n    // .tmp & renaming it) because the file is not live\n    // until segments file is written:\n    boolean success = false;\n    try {\n      Codec codec = info.info.getCodec();\n      codec.liveDocsFormat().writeLiveDocs((MutableBits)liveDocs, trackingDir, info, pendingDeleteCount, IOContext.DEFAULT);\n      success = true;\n    } finally {\n      if (!success) {\n        // Advance only the nextWriteDelGen so that a 2nd\n        // attempt to write will write to a new file\n        info.advanceNextWriteDelGen();\n        \n        // Delete any partially created file(s):\n        for (String fileName : trackingDir.getCreatedFiles()) {\n          IOUtils.deleteFilesIgnoringExceptions(dir, fileName);\n        }\n      }\n    }\n    \n    // If we hit an exc in the line above (eg disk full)\n    // then info's delGen remains pointing to the previous\n    // (successfully written) del docs:\n    info.advanceDelGen();\n    info.setDelCount(info.getDelCount() + pendingDeleteCount);\n    pendingDeleteCount = 0;\n    \n    return true;\n  }\n\n","sourceOld":"  // Commit live docs (writes new _X_N.del files) and field updates (writes new\n  // _X_N updates files) to the directory; returns true if it wrote any file\n  // and false if there were no new deletes or updates to write:\n  public synchronized boolean writeLiveDocs(Directory dir) throws IOException {\n    assert Thread.holdsLock(writer);\n    //System.out.println(\"rld.writeLiveDocs seg=\" + info + \" pendingDelCount=\" + pendingDeleteCount + \" numericUpdates=\" + numericUpdates);\n    if (pendingDeleteCount == 0) {\n      return false;\n    }\n    \n    // We have new deletes\n    assert liveDocs.length() == info.info.maxDoc();\n    \n    // Do this so we can delete any created files on\n    // exception; this saves all codecs from having to do\n    // it:\n    TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(dir);\n    \n    // We can write directly to the actual name (vs to a\n    // .tmp & renaming it) because the file is not live\n    // until segments file is written:\n    boolean success = false;\n    try {\n      Codec codec = info.info.getCodec();\n      codec.liveDocsFormat().writeLiveDocs((MutableBits)liveDocs, trackingDir, info, pendingDeleteCount, IOContext.DEFAULT);\n      success = true;\n    } finally {\n      if (!success) {\n        // Advance only the nextWriteDelGen so that a 2nd\n        // attempt to write will write to a new file\n        info.advanceNextWriteDelGen();\n        \n        // Delete any partially created file(s):\n        for (String fileName : trackingDir.getCreatedFiles()) {\n          IOUtils.deleteFilesIgnoringExceptions(dir, fileName);\n        }\n      }\n    }\n    \n    // If we hit an exc in the line above (eg disk full)\n    // then info's delGen remains pointing to the previous\n    // (successfully written) del docs:\n    info.advanceDelGen();\n    info.setDelCount(info.getDelCount() + pendingDeleteCount);\n    pendingDeleteCount = 0;\n    \n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d60c1bb96a28a26d197c36299f7b6c9c5da617a1","date":1522484702,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/ReadersAndUpdates#writeLiveDocs(Directory).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/ReadersAndUpdates#writeLiveDocs(Directory).mjava","sourceNew":"  // Commit live docs (writes new _X_N.del files) and field updates (writes new\n  // _X_N updates files) to the directory; returns true if it wrote any file\n  // and false if there were no new deletes or updates to write:\n  public synchronized boolean writeLiveDocs(Directory dir) throws IOException {\n    return pendingDeletes.writeLiveDocs(dir);\n  }\n\n","sourceOld":"  // Commit live docs (writes new _X_N.del files) and field updates (writes new\n  // _X_N updates files) to the directory; returns true if it wrote any file\n  // and false if there were no new deletes or updates to write:\n  public synchronized boolean writeLiveDocs(Directory dir) throws IOException {\n    if (pendingDeleteCount == 0) {\n      return false;\n    }\n    \n    // We have new deletes\n    assert liveDocs.length() == info.info.maxDoc();\n    \n    // Do this so we can delete any created files on\n    // exception; this saves all codecs from having to do\n    // it:\n    TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(dir);\n    \n    // We can write directly to the actual name (vs to a\n    // .tmp & renaming it) because the file is not live\n    // until segments file is written:\n    boolean success = false;\n    try {\n      Codec codec = info.info.getCodec();\n      codec.liveDocsFormat().writeLiveDocs((MutableBits)liveDocs, trackingDir, info, pendingDeleteCount, IOContext.DEFAULT);\n      success = true;\n    } finally {\n      if (!success) {\n        // Advance only the nextWriteDelGen so that a 2nd\n        // attempt to write will write to a new file\n        info.advanceNextWriteDelGen();\n        \n        // Delete any partially created file(s):\n        for (String fileName : trackingDir.getCreatedFiles()) {\n          IOUtils.deleteFilesIgnoringExceptions(dir, fileName);\n        }\n      }\n    }\n    \n    // If we hit an exc in the line above (eg disk full)\n    // then info's delGen remains pointing to the previous\n    // (successfully written) del docs:\n    info.advanceDelGen();\n    info.setDelCount(info.getDelCount() + pendingDeleteCount);\n    pendingDeleteCount = 0;\n    \n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa5e39259dfd4a68287c824d3b7e1bc9097dc895","date":1522505041,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/ReadersAndUpdates#writeLiveDocs(Directory).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/ReadersAndUpdates#writeLiveDocs(Directory).mjava","sourceNew":"  // Commit live docs (writes new _X_N.del files) and field updates (writes new\n  // _X_N updates files) to the directory; returns true if it wrote any file\n  // and false if there were no new deletes or updates to write:\n  public synchronized boolean writeLiveDocs(Directory dir) throws IOException {\n    return pendingDeletes.writeLiveDocs(dir);\n  }\n\n","sourceOld":"  // Commit live docs (writes new _X_N.del files) and field updates (writes new\n  // _X_N updates files) to the directory; returns true if it wrote any file\n  // and false if there were no new deletes or updates to write:\n  public synchronized boolean writeLiveDocs(Directory dir) throws IOException {\n    if (pendingDeleteCount == 0) {\n      return false;\n    }\n    \n    // We have new deletes\n    assert liveDocs.length() == info.info.maxDoc();\n    \n    // Do this so we can delete any created files on\n    // exception; this saves all codecs from having to do\n    // it:\n    TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(dir);\n    \n    // We can write directly to the actual name (vs to a\n    // .tmp & renaming it) because the file is not live\n    // until segments file is written:\n    boolean success = false;\n    try {\n      Codec codec = info.info.getCodec();\n      codec.liveDocsFormat().writeLiveDocs((MutableBits)liveDocs, trackingDir, info, pendingDeleteCount, IOContext.DEFAULT);\n      success = true;\n    } finally {\n      if (!success) {\n        // Advance only the nextWriteDelGen so that a 2nd\n        // attempt to write will write to a new file\n        info.advanceNextWriteDelGen();\n        \n        // Delete any partially created file(s):\n        for (String fileName : trackingDir.getCreatedFiles()) {\n          IOUtils.deleteFilesIgnoringExceptions(dir, fileName);\n        }\n      }\n    }\n    \n    // If we hit an exc in the line above (eg disk full)\n    // then info's delGen remains pointing to the previous\n    // (successfully written) del docs:\n    info.advanceDelGen();\n    info.setDelCount(info.getDelCount() + pendingDeleteCount);\n    pendingDeleteCount = 0;\n    \n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["98d2deb8c96c79ebef084a1f8e5a1a6c08608f13","b0267c69e2456a3477a1ad785723f2135da3117e"],"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b06445ae1731e049327712db0454e5643ca9b7fe":["98d2deb8c96c79ebef084a1f8e5a1a6c08608f13","b0267c69e2456a3477a1ad785723f2135da3117e"],"f4363cd33f6eff7fb4753574a441e2d18c1022a4":["b0267c69e2456a3477a1ad785723f2135da3117e"],"b0267c69e2456a3477a1ad785723f2135da3117e":["98d2deb8c96c79ebef084a1f8e5a1a6c08608f13"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"98d2deb8c96c79ebef084a1f8e5a1a6c08608f13":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0"],"aa5e39259dfd4a68287c824d3b7e1bc9097dc895":["28288370235ed02234a64753cdbf0c6ec096304a","d60c1bb96a28a26d197c36299f7b6c9c5da617a1"],"d60c1bb96a28a26d197c36299f7b6c9c5da617a1":["28288370235ed02234a64753cdbf0c6ec096304a"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["b0267c69e2456a3477a1ad785723f2135da3117e","f4363cd33f6eff7fb4753574a441e2d18c1022a4"],"28288370235ed02234a64753cdbf0c6ec096304a":["b0267c69e2456a3477a1ad785723f2135da3117e","f4363cd33f6eff7fb4753574a441e2d18c1022a4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["aa5e39259dfd4a68287c824d3b7e1bc9097dc895"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0":["98d2deb8c96c79ebef084a1f8e5a1a6c08608f13"],"b06445ae1731e049327712db0454e5643ca9b7fe":[],"f4363cd33f6eff7fb4753574a441e2d18c1022a4":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"b0267c69e2456a3477a1ad785723f2135da3117e":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","b06445ae1731e049327712db0454e5643ca9b7fe","f4363cd33f6eff7fb4753574a441e2d18c1022a4","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0"],"98d2deb8c96c79ebef084a1f8e5a1a6c08608f13":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","b06445ae1731e049327712db0454e5643ca9b7fe","b0267c69e2456a3477a1ad785723f2135da3117e"],"aa5e39259dfd4a68287c824d3b7e1bc9097dc895":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d60c1bb96a28a26d197c36299f7b6c9c5da617a1":["aa5e39259dfd4a68287c824d3b7e1bc9097dc895"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":[],"28288370235ed02234a64753cdbf0c6ec096304a":["aa5e39259dfd4a68287c824d3b7e1bc9097dc895","d60c1bb96a28a26d197c36299f7b6c9c5da617a1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","b06445ae1731e049327712db0454e5643ca9b7fe","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}