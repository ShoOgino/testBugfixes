{"path":"lucene/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#explain(ReaderContext,int).mjava","commits":[{"id":"2dadf0f3286a34a0fee6e788ffce88624bf2984e","date":1294260428,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#explain(ReaderContext,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#explain(IndexReader,int).mjava","sourceNew":"    @Override\n    public Explanation explain(ReaderContext context, int doc)\n      throws IOException {\n      ComplexExplanation result = new ComplexExplanation();\n      result.setDescription(\"weight(\"+getQuery()+\" in \"+doc+\"), product of:\");\n\n      Explanation idfExpl = new Explanation(idf, \"idf(\"+getQuery()+\")\");\n\n      // explain query weight\n      Explanation queryExpl = new Explanation();\n      queryExpl.setDescription(\"queryWeight(\" + getQuery() + \"), product of:\");\n\n      Explanation boostExpl = new Explanation(getBoost(), \"boost\");\n      if (getBoost() != 1.0f)\n        queryExpl.addDetail(boostExpl);\n\n      queryExpl.addDetail(idfExpl);\n\n      Explanation queryNormExpl = new Explanation(queryNorm,\"queryNorm\");\n      queryExpl.addDetail(queryNormExpl);\n\n      queryExpl.setValue(boostExpl.getValue() *\n                         idfExpl.getValue() *\n                         queryNormExpl.getValue());\n\n      result.addDetail(queryExpl);\n\n      // explain field weight\n      ComplexExplanation fieldExpl = new ComplexExplanation();\n      fieldExpl.setDescription(\"fieldWeight(\"+getQuery()+\" in \"+doc+\n                               \"), product of:\");\n\n      Scorer scorer = scorer(context, true, false);\n      if (scorer == null) {\n        return new Explanation(0.0f, \"no matching docs\");\n      }\n\n      Explanation tfExplanation = new Explanation();\n      int d = scorer.advance(doc);\n      float phraseFreq;\n      if (d == doc) {\n        phraseFreq = scorer.freq();\n      } else {\n        phraseFreq = 0.0f;\n      }\n\n      tfExplanation.setValue(similarity.tf(phraseFreq));\n      tfExplanation.setDescription(\"tf(phraseFreq=\" + phraseFreq + \")\");\n      fieldExpl.addDetail(tfExplanation);\n      fieldExpl.addDetail(idfExpl);\n\n      Explanation fieldNormExpl = new Explanation();\n      byte[] fieldNorms = context.reader.norms(field);\n      float fieldNorm =\n        fieldNorms!=null ? similarity.decodeNormValue(fieldNorms[doc]) : 1.0f;\n      fieldNormExpl.setValue(fieldNorm);\n      fieldNormExpl.setDescription(\"fieldNorm(field=\"+field+\", doc=\"+doc+\")\");\n      fieldExpl.addDetail(fieldNormExpl);\n\n      fieldExpl.setMatch(Boolean.valueOf(tfExplanation.isMatch()));\n      fieldExpl.setValue(tfExplanation.getValue() *\n                         idfExpl.getValue() *\n                         fieldNormExpl.getValue());\n\n      result.addDetail(fieldExpl);\n      result.setMatch(fieldExpl.getMatch());\n\n      // combine them\n      result.setValue(queryExpl.getValue() * fieldExpl.getValue());\n\n      if (queryExpl.getValue() == 1.0f)\n        return fieldExpl;\n\n      return result;\n    }\n\n","sourceOld":"    @Override\n    public Explanation explain(IndexReader reader, int doc)\n      throws IOException {\n      ComplexExplanation result = new ComplexExplanation();\n      result.setDescription(\"weight(\"+getQuery()+\" in \"+doc+\"), product of:\");\n\n      Explanation idfExpl = new Explanation(idf, \"idf(\"+getQuery()+\")\");\n\n      // explain query weight\n      Explanation queryExpl = new Explanation();\n      queryExpl.setDescription(\"queryWeight(\" + getQuery() + \"), product of:\");\n\n      Explanation boostExpl = new Explanation(getBoost(), \"boost\");\n      if (getBoost() != 1.0f)\n        queryExpl.addDetail(boostExpl);\n\n      queryExpl.addDetail(idfExpl);\n\n      Explanation queryNormExpl = new Explanation(queryNorm,\"queryNorm\");\n      queryExpl.addDetail(queryNormExpl);\n\n      queryExpl.setValue(boostExpl.getValue() *\n                         idfExpl.getValue() *\n                         queryNormExpl.getValue());\n\n      result.addDetail(queryExpl);\n\n      // explain field weight\n      ComplexExplanation fieldExpl = new ComplexExplanation();\n      fieldExpl.setDescription(\"fieldWeight(\"+getQuery()+\" in \"+doc+\n                               \"), product of:\");\n\n      Scorer scorer = scorer(reader, true, false);\n      if (scorer == null) {\n        return new Explanation(0.0f, \"no matching docs\");\n      }\n\n      Explanation tfExplanation = new Explanation();\n      int d = scorer.advance(doc);\n      float phraseFreq;\n      if (d == doc) {\n        phraseFreq = scorer.freq();\n      } else {\n        phraseFreq = 0.0f;\n      }\n\n      tfExplanation.setValue(similarity.tf(phraseFreq));\n      tfExplanation.setDescription(\"tf(phraseFreq=\" + phraseFreq + \")\");\n      fieldExpl.addDetail(tfExplanation);\n      fieldExpl.addDetail(idfExpl);\n\n      Explanation fieldNormExpl = new Explanation();\n      byte[] fieldNorms = reader.norms(field);\n      float fieldNorm =\n        fieldNorms!=null ? similarity.decodeNormValue(fieldNorms[doc]) : 1.0f;\n      fieldNormExpl.setValue(fieldNorm);\n      fieldNormExpl.setDescription(\"fieldNorm(field=\"+field+\", doc=\"+doc+\")\");\n      fieldExpl.addDetail(fieldNormExpl);\n\n      fieldExpl.setMatch(Boolean.valueOf(tfExplanation.isMatch()));\n      fieldExpl.setValue(tfExplanation.getValue() *\n                         idfExpl.getValue() *\n                         fieldNormExpl.getValue());\n\n      result.addDetail(fieldExpl);\n      result.setMatch(fieldExpl.getMatch());\n\n      // combine them\n      result.setValue(queryExpl.getValue() * fieldExpl.getValue());\n\n      if (queryExpl.getValue() == 1.0f)\n        return fieldExpl;\n\n      return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a10b98ef1ef4bf9e38d2e07a9e425a916afa8705","date":1294747166,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#explain(AtomicReaderContext,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#explain(ReaderContext,int).mjava","sourceNew":"    @Override\n    public Explanation explain(AtomicReaderContext context, int doc)\n      throws IOException {\n      ComplexExplanation result = new ComplexExplanation();\n      result.setDescription(\"weight(\"+getQuery()+\" in \"+doc+\"), product of:\");\n\n      Explanation idfExpl = new Explanation(idf, \"idf(\"+getQuery()+\")\");\n\n      // explain query weight\n      Explanation queryExpl = new Explanation();\n      queryExpl.setDescription(\"queryWeight(\" + getQuery() + \"), product of:\");\n\n      Explanation boostExpl = new Explanation(getBoost(), \"boost\");\n      if (getBoost() != 1.0f)\n        queryExpl.addDetail(boostExpl);\n\n      queryExpl.addDetail(idfExpl);\n\n      Explanation queryNormExpl = new Explanation(queryNorm,\"queryNorm\");\n      queryExpl.addDetail(queryNormExpl);\n\n      queryExpl.setValue(boostExpl.getValue() *\n                         idfExpl.getValue() *\n                         queryNormExpl.getValue());\n\n      result.addDetail(queryExpl);\n\n      // explain field weight\n      ComplexExplanation fieldExpl = new ComplexExplanation();\n      fieldExpl.setDescription(\"fieldWeight(\"+getQuery()+\" in \"+doc+\n                               \"), product of:\");\n\n      Scorer scorer = scorer(context, true, false);\n      if (scorer == null) {\n        return new Explanation(0.0f, \"no matching docs\");\n      }\n\n      Explanation tfExplanation = new Explanation();\n      int d = scorer.advance(doc);\n      float phraseFreq;\n      if (d == doc) {\n        phraseFreq = scorer.freq();\n      } else {\n        phraseFreq = 0.0f;\n      }\n\n      tfExplanation.setValue(similarity.tf(phraseFreq));\n      tfExplanation.setDescription(\"tf(phraseFreq=\" + phraseFreq + \")\");\n      fieldExpl.addDetail(tfExplanation);\n      fieldExpl.addDetail(idfExpl);\n\n      Explanation fieldNormExpl = new Explanation();\n      byte[] fieldNorms = context.reader.norms(field);\n      float fieldNorm =\n        fieldNorms!=null ? similarity.decodeNormValue(fieldNorms[doc]) : 1.0f;\n      fieldNormExpl.setValue(fieldNorm);\n      fieldNormExpl.setDescription(\"fieldNorm(field=\"+field+\", doc=\"+doc+\")\");\n      fieldExpl.addDetail(fieldNormExpl);\n\n      fieldExpl.setMatch(Boolean.valueOf(tfExplanation.isMatch()));\n      fieldExpl.setValue(tfExplanation.getValue() *\n                         idfExpl.getValue() *\n                         fieldNormExpl.getValue());\n\n      result.addDetail(fieldExpl);\n      result.setMatch(fieldExpl.getMatch());\n\n      // combine them\n      result.setValue(queryExpl.getValue() * fieldExpl.getValue());\n\n      if (queryExpl.getValue() == 1.0f)\n        return fieldExpl;\n\n      return result;\n    }\n\n","sourceOld":"    @Override\n    public Explanation explain(ReaderContext context, int doc)\n      throws IOException {\n      ComplexExplanation result = new ComplexExplanation();\n      result.setDescription(\"weight(\"+getQuery()+\" in \"+doc+\"), product of:\");\n\n      Explanation idfExpl = new Explanation(idf, \"idf(\"+getQuery()+\")\");\n\n      // explain query weight\n      Explanation queryExpl = new Explanation();\n      queryExpl.setDescription(\"queryWeight(\" + getQuery() + \"), product of:\");\n\n      Explanation boostExpl = new Explanation(getBoost(), \"boost\");\n      if (getBoost() != 1.0f)\n        queryExpl.addDetail(boostExpl);\n\n      queryExpl.addDetail(idfExpl);\n\n      Explanation queryNormExpl = new Explanation(queryNorm,\"queryNorm\");\n      queryExpl.addDetail(queryNormExpl);\n\n      queryExpl.setValue(boostExpl.getValue() *\n                         idfExpl.getValue() *\n                         queryNormExpl.getValue());\n\n      result.addDetail(queryExpl);\n\n      // explain field weight\n      ComplexExplanation fieldExpl = new ComplexExplanation();\n      fieldExpl.setDescription(\"fieldWeight(\"+getQuery()+\" in \"+doc+\n                               \"), product of:\");\n\n      Scorer scorer = scorer(context, true, false);\n      if (scorer == null) {\n        return new Explanation(0.0f, \"no matching docs\");\n      }\n\n      Explanation tfExplanation = new Explanation();\n      int d = scorer.advance(doc);\n      float phraseFreq;\n      if (d == doc) {\n        phraseFreq = scorer.freq();\n      } else {\n        phraseFreq = 0.0f;\n      }\n\n      tfExplanation.setValue(similarity.tf(phraseFreq));\n      tfExplanation.setDescription(\"tf(phraseFreq=\" + phraseFreq + \")\");\n      fieldExpl.addDetail(tfExplanation);\n      fieldExpl.addDetail(idfExpl);\n\n      Explanation fieldNormExpl = new Explanation();\n      byte[] fieldNorms = context.reader.norms(field);\n      float fieldNorm =\n        fieldNorms!=null ? similarity.decodeNormValue(fieldNorms[doc]) : 1.0f;\n      fieldNormExpl.setValue(fieldNorm);\n      fieldNormExpl.setDescription(\"fieldNorm(field=\"+field+\", doc=\"+doc+\")\");\n      fieldExpl.addDetail(fieldNormExpl);\n\n      fieldExpl.setMatch(Boolean.valueOf(tfExplanation.isMatch()));\n      fieldExpl.setValue(tfExplanation.getValue() *\n                         idfExpl.getValue() *\n                         fieldNormExpl.getValue());\n\n      result.addDetail(fieldExpl);\n      result.setMatch(fieldExpl.getMatch());\n\n      // combine them\n      result.setValue(queryExpl.getValue() * fieldExpl.getValue());\n\n      if (queryExpl.getValue() == 1.0f)\n        return fieldExpl;\n\n      return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"2dadf0f3286a34a0fee6e788ffce88624bf2984e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a10b98ef1ef4bf9e38d2e07a9e425a916afa8705":["2dadf0f3286a34a0fee6e788ffce88624bf2984e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a10b98ef1ef4bf9e38d2e07a9e425a916afa8705"]},"commit2Childs":{"2dadf0f3286a34a0fee6e788ffce88624bf2984e":["a10b98ef1ef4bf9e38d2e07a9e425a916afa8705"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2dadf0f3286a34a0fee6e788ffce88624bf2984e"],"a10b98ef1ef4bf9e38d2e07a9e425a916afa8705":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}