{"path":"src/java/org/apache/lucene/analysis/tokenattributes/TermAttributeImpl#growTermBuffer(int).mjava","commits":[{"id":"ec8b5a20a12931b8d7e616c79c5248ae06cc5568","date":1248471948,"type":1,"author":"Michael Busch","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/tokenattributes/TermAttributeImpl#growTermBuffer(int).mjava","pathOld":"src/java/org/apache/lucene/analysis/tokenattributes/TermAttribute#growTermBuffer(int).mjava","sourceNew":"  /** Allocates a buffer char[] of at least newSize\n   *  @param newSize minimum size of the buffer\n   *  @return newly created buffer with length >= newSize or null if the current termBuffer is big enough\n   */\n  private char[] growTermBuffer(int newSize) {\n    if (termBuffer != null) {\n      if (termBuffer.length >= newSize)\n        // Already big enough\n        return null;\n      else\n        // Not big enough; create a new array with slight\n        // over allocation:\n        return new char[ArrayUtil.getNextSize(newSize)];\n    } else {\n\n      // determine the best size\n      // The buffer is always at least MIN_BUFFER_SIZE\n      if (newSize < MIN_BUFFER_SIZE) {\n        newSize = MIN_BUFFER_SIZE;\n      }\n\n      return new char[newSize];\n    }\n  }\n\n","sourceOld":"  /** Allocates a buffer char[] of at least newSize\n   *  @param newSize minimum size of the buffer\n   *  @return newly created buffer with length >= newSize or null if the current termBuffer is big enough\n   */\n  private char[] growTermBuffer(int newSize) {\n    if (termBuffer != null) {\n      if (termBuffer.length >= newSize)\n        // Already big enough\n        return null;\n      else\n        // Not big enough; create a new array with slight\n        // over allocation:\n        return new char[ArrayUtil.getNextSize(newSize)];\n    } else {\n\n      // determine the best size\n      // The buffer is always at least MIN_BUFFER_SIZE\n      if (newSize < MIN_BUFFER_SIZE) {\n        newSize = MIN_BUFFER_SIZE;\n      }\n\n      return new char[newSize];\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"881f3cbef4fe1d74529367acf824c7394e2dd11c","date":1248894847,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/tokenattributes/TermAttributeImpl#growTermBuffer(int).mjava","pathOld":"src/java/org/apache/lucene/analysis/tokenattributes/TermAttributeImpl#growTermBuffer(int).mjava","sourceNew":"  /** Allocates a buffer char[] of at least newSize, without preserving the existing content.\n   * its always used in places that set the content \n   *  @param newSize minimum size of the buffer\n   */\n  private void growTermBuffer(int newSize) {\n    if (termBuffer == null) {\n      // The buffer is always at least MIN_BUFFER_SIZE\n      termBuffer = new char[ArrayUtil.getNextSize(newSize < MIN_BUFFER_SIZE ? MIN_BUFFER_SIZE : newSize)];   \n    } else {\n      if(termBuffer.length < newSize){\n        // Not big enough; create a new array with slight\n        // over allocation:\n        termBuffer = new char[ArrayUtil.getNextSize(newSize)];\n      }\n    } \n  }\n\n","sourceOld":"  /** Allocates a buffer char[] of at least newSize\n   *  @param newSize minimum size of the buffer\n   *  @return newly created buffer with length >= newSize or null if the current termBuffer is big enough\n   */\n  private char[] growTermBuffer(int newSize) {\n    if (termBuffer != null) {\n      if (termBuffer.length >= newSize)\n        // Already big enough\n        return null;\n      else\n        // Not big enough; create a new array with slight\n        // over allocation:\n        return new char[ArrayUtil.getNextSize(newSize)];\n    } else {\n\n      // determine the best size\n      // The buffer is always at least MIN_BUFFER_SIZE\n      if (newSize < MIN_BUFFER_SIZE) {\n        newSize = MIN_BUFFER_SIZE;\n      }\n\n      return new char[newSize];\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"38c26570a4fd6cf0856801c977a2bc9c28a5424c","date":1264074890,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/tokenattributes/TermAttributeImpl#growTermBuffer(int).mjava","pathOld":"src/java/org/apache/lucene/analysis/tokenattributes/TermAttributeImpl#growTermBuffer(int).mjava","sourceNew":"  /** Allocates a buffer char[] of at least newSize, without preserving the existing content.\n   * its always used in places that set the content \n   *  @param newSize minimum size of the buffer\n   */\n  private void growTermBuffer(int newSize) {\n    if (termBuffer == null) {\n      // The buffer is always at least MIN_BUFFER_SIZE\n      termBuffer = new char[ArrayUtil.oversize(newSize < MIN_BUFFER_SIZE ? MIN_BUFFER_SIZE : newSize, RamUsageEstimator.NUM_BYTES_CHAR)];   \n    } else {\n      if(termBuffer.length < newSize){\n        // Not big enough; create a new array with slight\n        // over allocation:\n        termBuffer = new char[ArrayUtil.oversize(newSize, RamUsageEstimator.NUM_BYTES_CHAR)];\n      }\n    } \n  }\n\n","sourceOld":"  /** Allocates a buffer char[] of at least newSize, without preserving the existing content.\n   * its always used in places that set the content \n   *  @param newSize minimum size of the buffer\n   */\n  private void growTermBuffer(int newSize) {\n    if (termBuffer == null) {\n      // The buffer is always at least MIN_BUFFER_SIZE\n      termBuffer = new char[ArrayUtil.getNextSize(newSize < MIN_BUFFER_SIZE ? MIN_BUFFER_SIZE : newSize)];   \n    } else {\n      if(termBuffer.length < newSize){\n        // Not big enough; create a new array with slight\n        // over allocation:\n        termBuffer = new char[ArrayUtil.getNextSize(newSize)];\n      }\n    } \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/analysis/tokenattributes/TermAttributeImpl#growTermBuffer(int).mjava","pathOld":"src/java/org/apache/lucene/analysis/tokenattributes/TermAttributeImpl#growTermBuffer(int).mjava","sourceNew":"  /** Allocates a buffer char[] of at least newSize, without preserving the existing content.\n   * its always used in places that set the content \n   *  @param newSize minimum size of the buffer\n   */\n  private void growTermBuffer(int newSize) {\n    if (termBuffer == null) {\n      // The buffer is always at least MIN_BUFFER_SIZE\n      termBuffer = new char[ArrayUtil.oversize(newSize < MIN_BUFFER_SIZE ? MIN_BUFFER_SIZE : newSize, RamUsageEstimator.NUM_BYTES_CHAR)];   \n    } else {\n      if(termBuffer.length < newSize){\n        // Not big enough; create a new array with slight\n        // over allocation:\n        termBuffer = new char[ArrayUtil.oversize(newSize, RamUsageEstimator.NUM_BYTES_CHAR)];\n      }\n    } \n  }\n\n","sourceOld":"  /** Allocates a buffer char[] of at least newSize, without preserving the existing content.\n   * its always used in places that set the content \n   *  @param newSize minimum size of the buffer\n   */\n  private void growTermBuffer(int newSize) {\n    if (termBuffer == null) {\n      // The buffer is always at least MIN_BUFFER_SIZE\n      termBuffer = new char[ArrayUtil.oversize(newSize < MIN_BUFFER_SIZE ? MIN_BUFFER_SIZE : newSize, RamUsageEstimator.NUM_BYTES_CHAR)];   \n    } else {\n      if(termBuffer.length < newSize){\n        // Not big enough; create a new array with slight\n        // over allocation:\n        termBuffer = new char[ArrayUtil.oversize(newSize, RamUsageEstimator.NUM_BYTES_CHAR)];\n      }\n    } \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"881f3cbef4fe1d74529367acf824c7394e2dd11c":["ec8b5a20a12931b8d7e616c79c5248ae06cc5568"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"38c26570a4fd6cf0856801c977a2bc9c28a5424c":["881f3cbef4fe1d74529367acf824c7394e2dd11c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["38c26570a4fd6cf0856801c977a2bc9c28a5424c"],"ec8b5a20a12931b8d7e616c79c5248ae06cc5568":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"881f3cbef4fe1d74529367acf824c7394e2dd11c":["38c26570a4fd6cf0856801c977a2bc9c28a5424c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ec8b5a20a12931b8d7e616c79c5248ae06cc5568"],"38c26570a4fd6cf0856801c977a2bc9c28a5424c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"ec8b5a20a12931b8d7e616c79c5248ae06cc5568":["881f3cbef4fe1d74529367acf824c7394e2dd11c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}