{"path":"lucene/core/src/java/org/apache/lucene/util/fst/FST#readArcByDirectAddressing(Arc[T],BytesReader,int).mjava","commits":[{"id":"71d31a7d5773508492505519bb5230b87c8937ad","date":1573681693,"type":0,"author":"Bruno Roustant","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#readArcByDirectAddressing(Arc[T],BytesReader,int).mjava","pathOld":"/dev/null","sourceNew":"  /** Reads a present direct addressing node arc, with the provided index in the label range.\n   *\n   * @param rangeIndex The index of the arc in the label range. It must be present.\n   *                   The real arc offset is computed based on the presence bits of\n   *                   the direct addressing node.\n   */\n  public Arc<T> readArcByDirectAddressing(Arc<T> arc, final BytesReader in, int rangeIndex) throws IOException {\n    assert arc.nodeFlags() == ARCS_FOR_DIRECT_ADDRESSING;\n    assert arc.bytesPerArc() > 0;\n    assert assertPresenceBytesAreValid(arc);\n    assert rangeIndex >= 0 && rangeIndex < arc.numArcs();\n    assert arc.bitTable().isBitSet(rangeIndex);\n    int presenceIndex = arc.bitTable().countBitsUpTo(rangeIndex);\n    in.setPosition(arc.posArcsStart() - presenceIndex * arc.bytesPerArc());\n    arc.arcIdx = rangeIndex;\n    arc.flags = in.readByte();\n    return readArc(arc, in);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["06086b5bd0f0d57858f0675becc58edf1f6b7c11"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"06086b5bd0f0d57858f0675becc58edf1f6b7c11","date":1586421397,"type":3,"author":"Bruno Roustant","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#readArcByDirectAddressing(Arc[T],BytesReader,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FST#readArcByDirectAddressing(Arc[T],BytesReader,int).mjava","sourceNew":"  /**\n   * Reads a present direct addressing node arc, with the provided index in the label range.\n   *\n   * @param rangeIndex The index of the arc in the label range. It must be present.\n   *                   The real arc offset is computed based on the presence bits of\n   *                   the direct addressing node.\n   */\n  public Arc<T> readArcByDirectAddressing(Arc<T> arc, final BytesReader in, int rangeIndex) throws IOException {\n    assert BitTable.assertIsValid(arc, in);\n    assert rangeIndex >= 0 && rangeIndex < arc.numArcs();\n    assert BitTable.isBitSet(rangeIndex, arc, in);\n    int presenceIndex = BitTable.countBitsUpTo(rangeIndex, arc, in);\n    return readArcByDirectAddressing(arc, in, rangeIndex, presenceIndex);\n  }\n\n","sourceOld":"  /** Reads a present direct addressing node arc, with the provided index in the label range.\n   *\n   * @param rangeIndex The index of the arc in the label range. It must be present.\n   *                   The real arc offset is computed based on the presence bits of\n   *                   the direct addressing node.\n   */\n  public Arc<T> readArcByDirectAddressing(Arc<T> arc, final BytesReader in, int rangeIndex) throws IOException {\n    assert arc.nodeFlags() == ARCS_FOR_DIRECT_ADDRESSING;\n    assert arc.bytesPerArc() > 0;\n    assert assertPresenceBytesAreValid(arc);\n    assert rangeIndex >= 0 && rangeIndex < arc.numArcs();\n    assert arc.bitTable().isBitSet(rangeIndex);\n    int presenceIndex = arc.bitTable().countBitsUpTo(rangeIndex);\n    in.setPosition(arc.posArcsStart() - presenceIndex * arc.bytesPerArc());\n    arc.arcIdx = rangeIndex;\n    arc.flags = in.readByte();\n    return readArc(arc, in);\n  }\n\n","bugFix":["71d31a7d5773508492505519bb5230b87c8937ad"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"06086b5bd0f0d57858f0675becc58edf1f6b7c11":["71d31a7d5773508492505519bb5230b87c8937ad"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"71d31a7d5773508492505519bb5230b87c8937ad":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["06086b5bd0f0d57858f0675becc58edf1f6b7c11"]},"commit2Childs":{"06086b5bd0f0d57858f0675becc58edf1f6b7c11":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["71d31a7d5773508492505519bb5230b87c8937ad"],"71d31a7d5773508492505519bb5230b87c8937ad":["06086b5bd0f0d57858f0675becc58edf1f6b7c11"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}