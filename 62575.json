{"path":"solr/solrj/src/test/org/apache/solr/common/cloud/TestZkConfigManager#testUploadWithACL().mjava","commits":[{"id":"6c8a2521797f14d1d697a17a0069f5619cd211a6","date":1424361535,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/cloud/TestZkConfigManager#testUploadWithACL().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testUploadWithACL() throws IOException {\n\n    zkServer.ensurePathExists(\"/acl\");\n\n    final String readOnlyUsername = \"readonly\";\n    final String readOnlyPassword = \"readonly\";\n    final String writeableUsername = \"writeable\";\n    final String writeablePassword = \"writeable\";\n\n    ZkACLProvider aclProvider = new DefaultZkACLProvider(){\n      @Override\n      protected List<ACL> createGlobalACLsToAdd() {\n        try {\n          List<ACL> result = new ArrayList<>();\n          result.add(new ACL(ZooDefs.Perms.ALL, new Id(\"digest\", DigestAuthenticationProvider.generateDigest(writeableUsername + \":\" + writeablePassword))));\n          result.add(new ACL(ZooDefs.Perms.READ, new Id(\"digest\", DigestAuthenticationProvider.generateDigest(readOnlyUsername + \":\" + readOnlyPassword))));\n          return result;\n        }\n        catch (NoSuchAlgorithmException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    };\n\n    ZkCredentialsProvider readonly = new DefaultZkCredentialsProvider(){\n      @Override\n      protected Collection<ZkCredentials> createCredentials() {\n        List<ZkCredentials> credentials = new ArrayList<>();\n        credentials.add(new ZkCredentials(\"digest\", (readOnlyUsername + \":\" + readOnlyPassword).getBytes(Charsets.UTF_8)));\n        return credentials;\n      }\n    };\n\n    ZkCredentialsProvider writeable = new DefaultZkCredentialsProvider(){\n      @Override\n      protected Collection<ZkCredentials> createCredentials() {\n        List<ZkCredentials> credentials = new ArrayList<>();\n        credentials.add(new ZkCredentials(\"digest\", (writeableUsername + \":\" + writeablePassword).getBytes(Charsets.UTF_8)));\n        return credentials;\n      }\n    };\n\n    Path configPath = createTempDir(\"acl-config\");\n    Files.createFile(configPath.resolve(\"file1\"));\n\n    // Start with all-access client\n    try (SolrZkClient client = buildZkClient(zkServer.getZkAddress(\"/acl\"), aclProvider, writeable)) {\n      ZkConfigManager configManager = new ZkConfigManager(client);\n      configManager.uploadConfigDir(configPath, \"acltest\");\n      assertEquals(1, configManager.listConfigs().size());\n    }\n\n    // Readonly access client can get the list of configs, but can't upload\n    try (SolrZkClient client = buildZkClient(zkServer.getZkAddress(\"/acl\"), aclProvider, readonly)) {\n      ZkConfigManager configManager = new ZkConfigManager(client);\n      assertEquals(1, configManager.listConfigs().size());\n      configManager.uploadConfigDir(configPath, \"acltest2\");\n      fail (\"Should have thrown an ACL exception\");\n    }\n    catch (IOException e) {\n      assertEquals(KeeperException.NoAuthException.class, Throwables.getRootCause(e).getClass());\n    }\n\n    // Client with no auth whatsoever can't even get the list of configs\n    try (SolrZkClient client = new SolrZkClient(zkServer.getZkAddress(\"/acl\"), 10000)) {\n      ZkConfigManager configManager = new ZkConfigManager(client);\n      configManager.listConfigs();\n      fail(\"Should have thrown an ACL exception\");\n    }\n    catch (IOException e) {\n      assertEquals(KeeperException.NoAuthException.class, Throwables.getRootCause(e).getClass());\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c609c76a49c17e5c1c8a5d5cd2d685be9f306a47","date":1477689538,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/cloud/TestZkConfigManager#testUploadWithACL().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/cloud/TestZkConfigManager#testUploadWithACL().mjava","sourceNew":"  @Test\n  public void testUploadWithACL() throws IOException {\n\n    zkServer.ensurePathExists(\"/acl\");\n\n    final String readOnlyUsername = \"readonly\";\n    final String readOnlyPassword = \"readonly\";\n    final String writeableUsername = \"writeable\";\n    final String writeablePassword = \"writeable\";\n\n    ZkACLProvider aclProvider = new DefaultZkACLProvider(){\n      @Override\n      protected List<ACL> createGlobalACLsToAdd() {\n        try {\n          List<ACL> result = new ArrayList<>();\n          result.add(new ACL(ZooDefs.Perms.ALL, new Id(\"digest\", DigestAuthenticationProvider.generateDigest(writeableUsername + \":\" + writeablePassword))));\n          result.add(new ACL(ZooDefs.Perms.READ, new Id(\"digest\", DigestAuthenticationProvider.generateDigest(readOnlyUsername + \":\" + readOnlyPassword))));\n          return result;\n        }\n        catch (NoSuchAlgorithmException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    };\n\n    ZkCredentialsProvider readonly = new DefaultZkCredentialsProvider(){\n      @Override\n      protected Collection<ZkCredentials> createCredentials() {\n        List<ZkCredentials> credentials = new ArrayList<>();\n        credentials.add(new ZkCredentials(\"digest\", (readOnlyUsername + \":\" + readOnlyPassword).getBytes(StandardCharsets.UTF_8)));\n        return credentials;\n      }\n    };\n\n    ZkCredentialsProvider writeable = new DefaultZkCredentialsProvider(){\n      @Override\n      protected Collection<ZkCredentials> createCredentials() {\n        List<ZkCredentials> credentials = new ArrayList<>();\n        credentials.add(new ZkCredentials(\"digest\", (writeableUsername + \":\" + writeablePassword).getBytes(StandardCharsets.UTF_8)));\n        return credentials;\n      }\n    };\n\n    Path configPath = createTempDir(\"acl-config\");\n    Files.createFile(configPath.resolve(\"file1\"));\n\n    // Start with all-access client\n    try (SolrZkClient client = buildZkClient(zkServer.getZkAddress(\"/acl\"), aclProvider, writeable)) {\n      ZkConfigManager configManager = new ZkConfigManager(client);\n      configManager.uploadConfigDir(configPath, \"acltest\");\n      assertEquals(1, configManager.listConfigs().size());\n    }\n\n    // Readonly access client can get the list of configs, but can't upload\n    try (SolrZkClient client = buildZkClient(zkServer.getZkAddress(\"/acl\"), aclProvider, readonly)) {\n      ZkConfigManager configManager = new ZkConfigManager(client);\n      assertEquals(1, configManager.listConfigs().size());\n      configManager.uploadConfigDir(configPath, \"acltest2\");\n      fail (\"Should have thrown an ACL exception\");\n    }\n    catch (IOException e) {\n      assertEquals(KeeperException.NoAuthException.class, Throwables.getRootCause(e).getClass());\n    }\n\n    // Client with no auth whatsoever can't even get the list of configs\n    try (SolrZkClient client = new SolrZkClient(zkServer.getZkAddress(\"/acl\"), 10000)) {\n      ZkConfigManager configManager = new ZkConfigManager(client);\n      configManager.listConfigs();\n      fail(\"Should have thrown an ACL exception\");\n    }\n    catch (IOException e) {\n      assertEquals(KeeperException.NoAuthException.class, Throwables.getRootCause(e).getClass());\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testUploadWithACL() throws IOException {\n\n    zkServer.ensurePathExists(\"/acl\");\n\n    final String readOnlyUsername = \"readonly\";\n    final String readOnlyPassword = \"readonly\";\n    final String writeableUsername = \"writeable\";\n    final String writeablePassword = \"writeable\";\n\n    ZkACLProvider aclProvider = new DefaultZkACLProvider(){\n      @Override\n      protected List<ACL> createGlobalACLsToAdd() {\n        try {\n          List<ACL> result = new ArrayList<>();\n          result.add(new ACL(ZooDefs.Perms.ALL, new Id(\"digest\", DigestAuthenticationProvider.generateDigest(writeableUsername + \":\" + writeablePassword))));\n          result.add(new ACL(ZooDefs.Perms.READ, new Id(\"digest\", DigestAuthenticationProvider.generateDigest(readOnlyUsername + \":\" + readOnlyPassword))));\n          return result;\n        }\n        catch (NoSuchAlgorithmException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    };\n\n    ZkCredentialsProvider readonly = new DefaultZkCredentialsProvider(){\n      @Override\n      protected Collection<ZkCredentials> createCredentials() {\n        List<ZkCredentials> credentials = new ArrayList<>();\n        credentials.add(new ZkCredentials(\"digest\", (readOnlyUsername + \":\" + readOnlyPassword).getBytes(Charsets.UTF_8)));\n        return credentials;\n      }\n    };\n\n    ZkCredentialsProvider writeable = new DefaultZkCredentialsProvider(){\n      @Override\n      protected Collection<ZkCredentials> createCredentials() {\n        List<ZkCredentials> credentials = new ArrayList<>();\n        credentials.add(new ZkCredentials(\"digest\", (writeableUsername + \":\" + writeablePassword).getBytes(Charsets.UTF_8)));\n        return credentials;\n      }\n    };\n\n    Path configPath = createTempDir(\"acl-config\");\n    Files.createFile(configPath.resolve(\"file1\"));\n\n    // Start with all-access client\n    try (SolrZkClient client = buildZkClient(zkServer.getZkAddress(\"/acl\"), aclProvider, writeable)) {\n      ZkConfigManager configManager = new ZkConfigManager(client);\n      configManager.uploadConfigDir(configPath, \"acltest\");\n      assertEquals(1, configManager.listConfigs().size());\n    }\n\n    // Readonly access client can get the list of configs, but can't upload\n    try (SolrZkClient client = buildZkClient(zkServer.getZkAddress(\"/acl\"), aclProvider, readonly)) {\n      ZkConfigManager configManager = new ZkConfigManager(client);\n      assertEquals(1, configManager.listConfigs().size());\n      configManager.uploadConfigDir(configPath, \"acltest2\");\n      fail (\"Should have thrown an ACL exception\");\n    }\n    catch (IOException e) {\n      assertEquals(KeeperException.NoAuthException.class, Throwables.getRootCause(e).getClass());\n    }\n\n    // Client with no auth whatsoever can't even get the list of configs\n    try (SolrZkClient client = new SolrZkClient(zkServer.getZkAddress(\"/acl\"), 10000)) {\n      ZkConfigManager configManager = new ZkConfigManager(client);\n      configManager.listConfigs();\n      fail(\"Should have thrown an ACL exception\");\n    }\n    catch (IOException e) {\n      assertEquals(KeeperException.NoAuthException.class, Throwables.getRootCause(e).getClass());\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"320888923ec13b91f53082558f01f4c9960dd226","date":1477926871,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/common/cloud/TestZkConfigManager#testUploadWithACL().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/cloud/TestZkConfigManager#testUploadWithACL().mjava","sourceNew":"  @Test\n  public void testUploadWithACL() throws IOException {\n\n    zkServer.ensurePathExists(\"/acl\");\n\n    final String readOnlyUsername = \"readonly\";\n    final String readOnlyPassword = \"readonly\";\n    final String writeableUsername = \"writeable\";\n    final String writeablePassword = \"writeable\";\n\n    ZkACLProvider aclProvider = new DefaultZkACLProvider(){\n      @Override\n      protected List<ACL> createGlobalACLsToAdd() {\n        try {\n          List<ACL> result = new ArrayList<>();\n          result.add(new ACL(ZooDefs.Perms.ALL, new Id(\"digest\", DigestAuthenticationProvider.generateDigest(writeableUsername + \":\" + writeablePassword))));\n          result.add(new ACL(ZooDefs.Perms.READ, new Id(\"digest\", DigestAuthenticationProvider.generateDigest(readOnlyUsername + \":\" + readOnlyPassword))));\n          return result;\n        }\n        catch (NoSuchAlgorithmException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    };\n\n    ZkCredentialsProvider readonly = new DefaultZkCredentialsProvider(){\n      @Override\n      protected Collection<ZkCredentials> createCredentials() {\n        List<ZkCredentials> credentials = new ArrayList<>();\n        credentials.add(new ZkCredentials(\"digest\", (readOnlyUsername + \":\" + readOnlyPassword).getBytes(StandardCharsets.UTF_8)));\n        return credentials;\n      }\n    };\n\n    ZkCredentialsProvider writeable = new DefaultZkCredentialsProvider(){\n      @Override\n      protected Collection<ZkCredentials> createCredentials() {\n        List<ZkCredentials> credentials = new ArrayList<>();\n        credentials.add(new ZkCredentials(\"digest\", (writeableUsername + \":\" + writeablePassword).getBytes(StandardCharsets.UTF_8)));\n        return credentials;\n      }\n    };\n\n    Path configPath = createTempDir(\"acl-config\");\n    Files.createFile(configPath.resolve(\"file1\"));\n\n    // Start with all-access client\n    try (SolrZkClient client = buildZkClient(zkServer.getZkAddress(\"/acl\"), aclProvider, writeable)) {\n      ZkConfigManager configManager = new ZkConfigManager(client);\n      configManager.uploadConfigDir(configPath, \"acltest\");\n      assertEquals(1, configManager.listConfigs().size());\n    }\n\n    // Readonly access client can get the list of configs, but can't upload\n    try (SolrZkClient client = buildZkClient(zkServer.getZkAddress(\"/acl\"), aclProvider, readonly)) {\n      ZkConfigManager configManager = new ZkConfigManager(client);\n      assertEquals(1, configManager.listConfigs().size());\n      configManager.uploadConfigDir(configPath, \"acltest2\");\n      fail (\"Should have thrown an ACL exception\");\n    }\n    catch (IOException e) {\n      assertEquals(KeeperException.NoAuthException.class, Throwables.getRootCause(e).getClass());\n    }\n\n    // Client with no auth whatsoever can't even get the list of configs\n    try (SolrZkClient client = new SolrZkClient(zkServer.getZkAddress(\"/acl\"), 10000)) {\n      ZkConfigManager configManager = new ZkConfigManager(client);\n      configManager.listConfigs();\n      fail(\"Should have thrown an ACL exception\");\n    }\n    catch (IOException e) {\n      assertEquals(KeeperException.NoAuthException.class, Throwables.getRootCause(e).getClass());\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testUploadWithACL() throws IOException {\n\n    zkServer.ensurePathExists(\"/acl\");\n\n    final String readOnlyUsername = \"readonly\";\n    final String readOnlyPassword = \"readonly\";\n    final String writeableUsername = \"writeable\";\n    final String writeablePassword = \"writeable\";\n\n    ZkACLProvider aclProvider = new DefaultZkACLProvider(){\n      @Override\n      protected List<ACL> createGlobalACLsToAdd() {\n        try {\n          List<ACL> result = new ArrayList<>();\n          result.add(new ACL(ZooDefs.Perms.ALL, new Id(\"digest\", DigestAuthenticationProvider.generateDigest(writeableUsername + \":\" + writeablePassword))));\n          result.add(new ACL(ZooDefs.Perms.READ, new Id(\"digest\", DigestAuthenticationProvider.generateDigest(readOnlyUsername + \":\" + readOnlyPassword))));\n          return result;\n        }\n        catch (NoSuchAlgorithmException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    };\n\n    ZkCredentialsProvider readonly = new DefaultZkCredentialsProvider(){\n      @Override\n      protected Collection<ZkCredentials> createCredentials() {\n        List<ZkCredentials> credentials = new ArrayList<>();\n        credentials.add(new ZkCredentials(\"digest\", (readOnlyUsername + \":\" + readOnlyPassword).getBytes(Charsets.UTF_8)));\n        return credentials;\n      }\n    };\n\n    ZkCredentialsProvider writeable = new DefaultZkCredentialsProvider(){\n      @Override\n      protected Collection<ZkCredentials> createCredentials() {\n        List<ZkCredentials> credentials = new ArrayList<>();\n        credentials.add(new ZkCredentials(\"digest\", (writeableUsername + \":\" + writeablePassword).getBytes(Charsets.UTF_8)));\n        return credentials;\n      }\n    };\n\n    Path configPath = createTempDir(\"acl-config\");\n    Files.createFile(configPath.resolve(\"file1\"));\n\n    // Start with all-access client\n    try (SolrZkClient client = buildZkClient(zkServer.getZkAddress(\"/acl\"), aclProvider, writeable)) {\n      ZkConfigManager configManager = new ZkConfigManager(client);\n      configManager.uploadConfigDir(configPath, \"acltest\");\n      assertEquals(1, configManager.listConfigs().size());\n    }\n\n    // Readonly access client can get the list of configs, but can't upload\n    try (SolrZkClient client = buildZkClient(zkServer.getZkAddress(\"/acl\"), aclProvider, readonly)) {\n      ZkConfigManager configManager = new ZkConfigManager(client);\n      assertEquals(1, configManager.listConfigs().size());\n      configManager.uploadConfigDir(configPath, \"acltest2\");\n      fail (\"Should have thrown an ACL exception\");\n    }\n    catch (IOException e) {\n      assertEquals(KeeperException.NoAuthException.class, Throwables.getRootCause(e).getClass());\n    }\n\n    // Client with no auth whatsoever can't even get the list of configs\n    try (SolrZkClient client = new SolrZkClient(zkServer.getZkAddress(\"/acl\"), 10000)) {\n      ZkConfigManager configManager = new ZkConfigManager(client);\n      configManager.listConfigs();\n      fail(\"Should have thrown an ACL exception\");\n    }\n    catch (IOException e) {\n      assertEquals(KeeperException.NoAuthException.class, Throwables.getRootCause(e).getClass());\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6c8a2521797f14d1d697a17a0069f5619cd211a6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c609c76a49c17e5c1c8a5d5cd2d685be9f306a47":["6c8a2521797f14d1d697a17a0069f5619cd211a6"],"320888923ec13b91f53082558f01f4c9960dd226":["6c8a2521797f14d1d697a17a0069f5619cd211a6","c609c76a49c17e5c1c8a5d5cd2d685be9f306a47"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c609c76a49c17e5c1c8a5d5cd2d685be9f306a47"]},"commit2Childs":{"6c8a2521797f14d1d697a17a0069f5619cd211a6":["c609c76a49c17e5c1c8a5d5cd2d685be9f306a47","320888923ec13b91f53082558f01f4c9960dd226"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6c8a2521797f14d1d697a17a0069f5619cd211a6"],"c609c76a49c17e5c1c8a5d5cd2d685be9f306a47":["320888923ec13b91f53082558f01f4c9960dd226","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"320888923ec13b91f53082558f01f4c9960dd226":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["320888923ec13b91f53082558f01f4c9960dd226","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}