{"path":"backwards/src/test/org/apache/lucene/util/cache/TestSimpleLRUCache#testLRUCache().mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/test/org/apache/lucene/util/cache/TestSimpleLRUCache#testLRUCache().mjava","pathOld":"/dev/null","sourceNew":"  public void testLRUCache() throws Exception {\n    final int n = 100;\n    Object dummy = new Object();\n    \n    Cache cache = new SimpleLRUCache(n);\n    \n    for (int i = 0; i < n; i++) {\n      cache.put(Integer.valueOf(i), dummy);\n    }\n    \n    // access every 2nd item in cache\n    for (int i = 0; i < n; i+=2) {\n      assertNotNull(cache.get(Integer.valueOf(i)));\n    }\n    \n    // add n/2 elements to cache, the ones that weren't\n    // touched in the previous loop should now be thrown away\n    for (int i = n; i < n + (n / 2); i++) {\n      cache.put(Integer.valueOf(i), dummy);\n    }\n    \n    // access every 4th item in cache\n    for (int i = 0; i < n; i+=4) {\n      assertNotNull(cache.get(Integer.valueOf(i)));\n    }\n\n    // add 3/4n elements to cache, the ones that weren't\n    // touched in the previous loops should now be thrown away\n    for (int i = n; i < n + (n * 3 / 4); i++) {\n      cache.put(Integer.valueOf(i), dummy);\n    }\n    \n    // access every 4th item in cache\n    for (int i = 0; i < n; i+=4) {\n      assertNotNull(cache.get(Integer.valueOf(i)));\n    }\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/util/cache/TestSimpleLRUCache#testLRUCache().mjava","pathOld":"backwards/src/test/org/apache/lucene/util/cache/TestSimpleLRUCache#testLRUCache().mjava","sourceNew":"  public void testLRUCache() throws Exception {\n    final int n = 100;\n    Object dummy = new Object();\n    \n    Cache cache = new SimpleLRUCache(n);\n    \n    for (int i = 0; i < n; i++) {\n      cache.put(Integer.valueOf(i), dummy);\n    }\n    \n    // access every 2nd item in cache\n    for (int i = 0; i < n; i+=2) {\n      assertNotNull(cache.get(Integer.valueOf(i)));\n    }\n    \n    // add n/2 elements to cache, the ones that weren't\n    // touched in the previous loop should now be thrown away\n    for (int i = n; i < n + (n / 2); i++) {\n      cache.put(Integer.valueOf(i), dummy);\n    }\n    \n    // access every 4th item in cache\n    for (int i = 0; i < n; i+=4) {\n      assertNotNull(cache.get(Integer.valueOf(i)));\n    }\n\n    // add 3/4n elements to cache, the ones that weren't\n    // touched in the previous loops should now be thrown away\n    for (int i = n; i < n + (n * 3 / 4); i++) {\n      cache.put(Integer.valueOf(i), dummy);\n    }\n    \n    // access every 4th item in cache\n    for (int i = 0; i < n; i+=4) {\n      assertNotNull(cache.get(Integer.valueOf(i)));\n    }\n    \n  }\n\n","sourceOld":"  public void testLRUCache() throws Exception {\n    final int n = 100;\n    Object dummy = new Object();\n    \n    Cache cache = new SimpleLRUCache(n);\n    \n    for (int i = 0; i < n; i++) {\n      cache.put(Integer.valueOf(i), dummy);\n    }\n    \n    // access every 2nd item in cache\n    for (int i = 0; i < n; i+=2) {\n      assertNotNull(cache.get(Integer.valueOf(i)));\n    }\n    \n    // add n/2 elements to cache, the ones that weren't\n    // touched in the previous loop should now be thrown away\n    for (int i = n; i < n + (n / 2); i++) {\n      cache.put(Integer.valueOf(i), dummy);\n    }\n    \n    // access every 4th item in cache\n    for (int i = 0; i < n; i+=4) {\n      assertNotNull(cache.get(Integer.valueOf(i)));\n    }\n\n    // add 3/4n elements to cache, the ones that weren't\n    // touched in the previous loops should now be thrown away\n    for (int i = n; i < n + (n * 3 / 4); i++) {\n      cache.put(Integer.valueOf(i), dummy);\n    }\n    \n    // access every 4th item in cache\n    for (int i = 0; i < n; i+=4) {\n      assertNotNull(cache.get(Integer.valueOf(i)));\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}