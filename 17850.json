{"path":"lucene/core/src/java/org/apache/lucene/index/FrozenBufferedUpdates.TermDocsIterator#nextTerm(String,BytesRef).mjava","commits":[{"id":"83b6ce113ec151d7bf9175578d92d5320f91ab2e","date":1544711434,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FrozenBufferedUpdates.TermDocsIterator#nextTerm(String,BytesRef).mjava","pathOld":"/dev/null","sourceNew":"    DocIdSetIterator nextTerm(String field, BytesRef term) throws IOException {\n      setField(field);\n      if (termsEnum != null) {\n        if (sortedTerms) {\n          assert assertSorted(term);\n          // in the sorted case we can take advantage of the \"seeking forward\" property\n          // this allows us depending on the term dict impl to reuse data-structures internally\n          // which speed up iteration over terms and docs significantly.\n          int cmp = term.compareTo(readerTerm);\n          if (cmp < 0) {\n            return null; // requested term does not exist in this segment\n          } else if (cmp == 0) {\n            return getDocs();\n          } else if (cmp > 0) {\n            TermsEnum.SeekStatus status = termsEnum.seekCeil(term);\n            switch (status) {\n              case FOUND:\n                return getDocs();\n              case NOT_FOUND:\n                readerTerm = termsEnum.term();\n                return null;\n              case END:\n                // no more terms in this segment\n                termsEnum = null;\n                return null;\n              default:\n                throw new AssertionError(\"unknown status\");\n            }\n          }\n        } else if (termsEnum.seekExact(term)) {\n          return getDocs();\n        }\n      }\n      return null;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb0b91dbd7ffa9329d88b6cf6d606e542fed61d8","date":1582222690,"type":3,"author":"Nhat Nguyen","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FrozenBufferedUpdates.TermDocsIterator#nextTerm(String,BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/FrozenBufferedUpdates.TermDocsIterator#nextTerm(String,BytesRef).mjava","sourceNew":"    DocIdSetIterator nextTerm(String field, BytesRef term) throws IOException {\n      setField(field);\n      if (termsEnum != null) {\n        if (sortedTerms) {\n          assert assertSorted(term);\n          // in the sorted case we can take advantage of the \"seeking forward\" property\n          // this allows us depending on the term dict impl to reuse data-structures internally\n          // which speed up iteration over terms and docs significantly.\n          int cmp = term.compareTo(readerTerm);\n          if (cmp < 0) {\n            return null; // requested term does not exist in this segment\n          } else if (cmp == 0) {\n            return getDocs();\n          } else {\n            TermsEnum.SeekStatus status = termsEnum.seekCeil(term);\n            switch (status) {\n              case FOUND:\n                return getDocs();\n              case NOT_FOUND:\n                readerTerm = termsEnum.term();\n                return null;\n              case END:\n                // no more terms in this segment\n                termsEnum = null;\n                return null;\n              default:\n                throw new AssertionError(\"unknown status\");\n            }\n          }\n        } else if (termsEnum.seekExact(term)) {\n          return getDocs();\n        }\n      }\n      return null;\n    }\n\n","sourceOld":"    DocIdSetIterator nextTerm(String field, BytesRef term) throws IOException {\n      setField(field);\n      if (termsEnum != null) {\n        if (sortedTerms) {\n          assert assertSorted(term);\n          // in the sorted case we can take advantage of the \"seeking forward\" property\n          // this allows us depending on the term dict impl to reuse data-structures internally\n          // which speed up iteration over terms and docs significantly.\n          int cmp = term.compareTo(readerTerm);\n          if (cmp < 0) {\n            return null; // requested term does not exist in this segment\n          } else if (cmp == 0) {\n            return getDocs();\n          } else if (cmp > 0) {\n            TermsEnum.SeekStatus status = termsEnum.seekCeil(term);\n            switch (status) {\n              case FOUND:\n                return getDocs();\n              case NOT_FOUND:\n                readerTerm = termsEnum.term();\n                return null;\n              case END:\n                // no more terms in this segment\n                termsEnum = null;\n                return null;\n              default:\n                throw new AssertionError(\"unknown status\");\n            }\n          }\n        } else if (termsEnum.seekExact(term)) {\n          return getDocs();\n        }\n      }\n      return null;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fb0b91dbd7ffa9329d88b6cf6d606e542fed61d8":["83b6ce113ec151d7bf9175578d92d5320f91ab2e"],"83b6ce113ec151d7bf9175578d92d5320f91ab2e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fb0b91dbd7ffa9329d88b6cf6d606e542fed61d8"]},"commit2Childs":{"fb0b91dbd7ffa9329d88b6cf6d606e542fed61d8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"83b6ce113ec151d7bf9175578d92d5320f91ab2e":["fb0b91dbd7ffa9329d88b6cf6d606e542fed61d8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["83b6ce113ec151d7bf9175578d92d5320f91ab2e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}