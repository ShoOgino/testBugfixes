{"path":"lucene/backwards/src/java/org/apache/lucene/index/SegmentReader#reopenSegment(SegmentInfo,boolean,boolean).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/index/SegmentReader#reopenSegment(SegmentInfo,boolean,boolean).mjava","pathOld":"backwards/src/java/org/apache/lucene/index/SegmentReader#reopenSegment(SegmentInfo,boolean,boolean).mjava","sourceNew":"  synchronized SegmentReader reopenSegment(SegmentInfo si, boolean doClone, boolean openReadOnly) throws CorruptIndexException, IOException {\n    boolean deletionsUpToDate = (this.si.hasDeletions() == si.hasDeletions()) \n                                  && (!si.hasDeletions() || this.si.getDelFileName().equals(si.getDelFileName()));\n    boolean normsUpToDate = true;\n    \n    boolean[] fieldNormsChanged = new boolean[core.fieldInfos.size()];\n    final int fieldCount = core.fieldInfos.size();\n    for (int i = 0; i < fieldCount; i++) {\n      if (!this.si.getNormFileName(i).equals(si.getNormFileName(i))) {\n        normsUpToDate = false;\n        fieldNormsChanged[i] = true;\n      }\n    }\n\n    // if we're cloning we need to run through the reopenSegment logic\n    // also if both old and new readers aren't readonly, we clone to avoid sharing modifications\n    if (normsUpToDate && deletionsUpToDate && !doClone && openReadOnly && readOnly) {\n      return this;\n    }    \n\n    // When cloning, the incoming SegmentInfos should not\n    // have any changes in it:\n    assert !doClone || (normsUpToDate && deletionsUpToDate);\n\n    // clone reader\n    SegmentReader clone = openReadOnly ? new ReadOnlySegmentReader() : new SegmentReader();\n\n    boolean success = false;\n    try {\n      core.incRef();\n      clone.core = core;\n      clone.readOnly = openReadOnly;\n      clone.si = si;\n      clone.readBufferSize = readBufferSize;\n\n      if (!openReadOnly && hasChanges) {\n        // My pending changes transfer to the new reader\n        clone.pendingDeleteCount = pendingDeleteCount;\n        clone.deletedDocsDirty = deletedDocsDirty;\n        clone.normsDirty = normsDirty;\n        clone.hasChanges = hasChanges;\n        hasChanges = false;\n      }\n      \n      if (doClone) {\n        if (deletedDocs != null) {\n          deletedDocsRef.incRef();\n          clone.deletedDocs = deletedDocs;\n          clone.deletedDocsRef = deletedDocsRef;\n        }\n      } else {\n        if (!deletionsUpToDate) {\n          // load deleted docs\n          assert clone.deletedDocs == null;\n          clone.loadDeletedDocs();\n        } else if (deletedDocs != null) {\n          deletedDocsRef.incRef();\n          clone.deletedDocs = deletedDocs;\n          clone.deletedDocsRef = deletedDocsRef;\n        }\n      }\n\n      clone.norms = new HashMap<String,Norm>();\n\n      // Clone norms\n      for (int i = 0; i < fieldNormsChanged.length; i++) {\n\n        // Clone unchanged norms to the cloned reader\n        if (doClone || !fieldNormsChanged[i]) {\n          final String curField = core.fieldInfos.fieldInfo(i).name;\n          Norm norm = this.norms.get(curField);\n          if (norm != null)\n            clone.norms.put(curField, (Norm) norm.clone());\n        }\n      }\n\n      // If we are not cloning, then this will open anew\n      // any norms that have changed:\n      clone.openNorms(si.getUseCompoundFile() ? core.getCFSReader() : directory(), readBufferSize);\n\n      success = true;\n    } finally {\n      if (!success) {\n        // An exception occurred during reopen, we have to decRef the norms\n        // that we incRef'ed already and close singleNormsStream and FieldsReader\n        clone.decRef();\n      }\n    }\n    \n    return clone;\n  }\n\n","sourceOld":"  synchronized SegmentReader reopenSegment(SegmentInfo si, boolean doClone, boolean openReadOnly) throws CorruptIndexException, IOException {\n    boolean deletionsUpToDate = (this.si.hasDeletions() == si.hasDeletions()) \n                                  && (!si.hasDeletions() || this.si.getDelFileName().equals(si.getDelFileName()));\n    boolean normsUpToDate = true;\n    \n    boolean[] fieldNormsChanged = new boolean[core.fieldInfos.size()];\n    final int fieldCount = core.fieldInfos.size();\n    for (int i = 0; i < fieldCount; i++) {\n      if (!this.si.getNormFileName(i).equals(si.getNormFileName(i))) {\n        normsUpToDate = false;\n        fieldNormsChanged[i] = true;\n      }\n    }\n\n    // if we're cloning we need to run through the reopenSegment logic\n    // also if both old and new readers aren't readonly, we clone to avoid sharing modifications\n    if (normsUpToDate && deletionsUpToDate && !doClone && openReadOnly && readOnly) {\n      return this;\n    }    \n\n    // When cloning, the incoming SegmentInfos should not\n    // have any changes in it:\n    assert !doClone || (normsUpToDate && deletionsUpToDate);\n\n    // clone reader\n    SegmentReader clone = openReadOnly ? new ReadOnlySegmentReader() : new SegmentReader();\n\n    boolean success = false;\n    try {\n      core.incRef();\n      clone.core = core;\n      clone.readOnly = openReadOnly;\n      clone.si = si;\n      clone.readBufferSize = readBufferSize;\n\n      if (!openReadOnly && hasChanges) {\n        // My pending changes transfer to the new reader\n        clone.pendingDeleteCount = pendingDeleteCount;\n        clone.deletedDocsDirty = deletedDocsDirty;\n        clone.normsDirty = normsDirty;\n        clone.hasChanges = hasChanges;\n        hasChanges = false;\n      }\n      \n      if (doClone) {\n        if (deletedDocs != null) {\n          deletedDocsRef.incRef();\n          clone.deletedDocs = deletedDocs;\n          clone.deletedDocsRef = deletedDocsRef;\n        }\n      } else {\n        if (!deletionsUpToDate) {\n          // load deleted docs\n          assert clone.deletedDocs == null;\n          clone.loadDeletedDocs();\n        } else if (deletedDocs != null) {\n          deletedDocsRef.incRef();\n          clone.deletedDocs = deletedDocs;\n          clone.deletedDocsRef = deletedDocsRef;\n        }\n      }\n\n      clone.norms = new HashMap<String,Norm>();\n\n      // Clone norms\n      for (int i = 0; i < fieldNormsChanged.length; i++) {\n\n        // Clone unchanged norms to the cloned reader\n        if (doClone || !fieldNormsChanged[i]) {\n          final String curField = core.fieldInfos.fieldInfo(i).name;\n          Norm norm = this.norms.get(curField);\n          if (norm != null)\n            clone.norms.put(curField, (Norm) norm.clone());\n        }\n      }\n\n      // If we are not cloning, then this will open anew\n      // any norms that have changed:\n      clone.openNorms(si.getUseCompoundFile() ? core.getCFSReader() : directory(), readBufferSize);\n\n      success = true;\n    } finally {\n      if (!success) {\n        // An exception occurred during reopen, we have to decRef the norms\n        // that we incRef'ed already and close singleNormsStream and FieldsReader\n        clone.decRef();\n      }\n    }\n    \n    return clone;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/java/org/apache/lucene/index/SegmentReader#reopenSegment(SegmentInfo,boolean,boolean).mjava","sourceNew":null,"sourceOld":"  synchronized SegmentReader reopenSegment(SegmentInfo si, boolean doClone, boolean openReadOnly) throws CorruptIndexException, IOException {\n    boolean deletionsUpToDate = (this.si.hasDeletions() == si.hasDeletions()) \n                                  && (!si.hasDeletions() || this.si.getDelFileName().equals(si.getDelFileName()));\n    boolean normsUpToDate = true;\n    \n    boolean[] fieldNormsChanged = new boolean[core.fieldInfos.size()];\n    final int fieldCount = core.fieldInfos.size();\n    for (int i = 0; i < fieldCount; i++) {\n      if (!this.si.getNormFileName(i).equals(si.getNormFileName(i))) {\n        normsUpToDate = false;\n        fieldNormsChanged[i] = true;\n      }\n    }\n\n    // if we're cloning we need to run through the reopenSegment logic\n    // also if both old and new readers aren't readonly, we clone to avoid sharing modifications\n    if (normsUpToDate && deletionsUpToDate && !doClone && openReadOnly && readOnly) {\n      return this;\n    }    \n\n    // When cloning, the incoming SegmentInfos should not\n    // have any changes in it:\n    assert !doClone || (normsUpToDate && deletionsUpToDate);\n\n    // clone reader\n    SegmentReader clone = openReadOnly ? new ReadOnlySegmentReader() : new SegmentReader();\n\n    boolean success = false;\n    try {\n      core.incRef();\n      clone.core = core;\n      clone.readOnly = openReadOnly;\n      clone.si = si;\n      clone.readBufferSize = readBufferSize;\n\n      if (!openReadOnly && hasChanges) {\n        // My pending changes transfer to the new reader\n        clone.pendingDeleteCount = pendingDeleteCount;\n        clone.deletedDocsDirty = deletedDocsDirty;\n        clone.normsDirty = normsDirty;\n        clone.hasChanges = hasChanges;\n        hasChanges = false;\n      }\n      \n      if (doClone) {\n        if (deletedDocs != null) {\n          deletedDocsRef.incRef();\n          clone.deletedDocs = deletedDocs;\n          clone.deletedDocsRef = deletedDocsRef;\n        }\n      } else {\n        if (!deletionsUpToDate) {\n          // load deleted docs\n          assert clone.deletedDocs == null;\n          clone.loadDeletedDocs();\n        } else if (deletedDocs != null) {\n          deletedDocsRef.incRef();\n          clone.deletedDocs = deletedDocs;\n          clone.deletedDocsRef = deletedDocsRef;\n        }\n      }\n\n      clone.norms = new HashMap<String,Norm>();\n\n      // Clone norms\n      for (int i = 0; i < fieldNormsChanged.length; i++) {\n\n        // Clone unchanged norms to the cloned reader\n        if (doClone || !fieldNormsChanged[i]) {\n          final String curField = core.fieldInfos.fieldInfo(i).name;\n          Norm norm = this.norms.get(curField);\n          if (norm != null)\n            clone.norms.put(curField, (Norm) norm.clone());\n        }\n      }\n\n      // If we are not cloning, then this will open anew\n      // any norms that have changed:\n      clone.openNorms(si.getUseCompoundFile() ? core.getCFSReader() : directory(), readBufferSize);\n\n      success = true;\n    } finally {\n      if (!success) {\n        // An exception occurred during reopen, we have to decRef the norms\n        // that we incRef'ed already and close singleNormsStream and FieldsReader\n        clone.decRef();\n      }\n    }\n    \n    return clone;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}