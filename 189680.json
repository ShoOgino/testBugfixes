{"path":"solr/core/src/java/org/apache/solr/update/processor/DocExpirationUpdateProcessorFactory.TTLUpdateProcessor#processAdd(AddUpdateCommand).mjava","commits":[{"id":"ca70fffb953aae4d27efbfc28758033a317f39b1","date":1396371342,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DocExpirationUpdateProcessorFactory.TTLUpdateProcessor#processAdd(AddUpdateCommand).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void processAdd(AddUpdateCommand cmd) throws IOException {\n      final SolrInputDocument doc = cmd.getSolrInputDocument();\n\n      final String math = doc.containsKey(ttlField) \n        ? doc.getFieldValue(ttlField).toString() : defaultTtl;\n\n      if (null != math) {\n        try {\n          final DateMathParser dmp = new DateMathParser();\n          // TODO: should we try to accept things like \"1DAY\" as well as \"+1DAY\" ?\n          // How? \n          // 'startsWith(\"+\")' is a bad idea because it would cause porblems with\n          // things like \"/DAY+1YEAR\"\n          // Maybe catch ParseException and rety with \"+\" prepended?\n          doc.addField(expireField, dmp.parseMath(math));\n        } catch (ParseException pe) {\n          throw new SolrException(BAD_REQUEST, \"Can't parse ttl as date math: \" + math, pe);\n        }\n      }\n\n      super.processAdd(cmd);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DocExpirationUpdateProcessorFactory.TTLUpdateProcessor#processAdd(AddUpdateCommand).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void processAdd(AddUpdateCommand cmd) throws IOException {\n      final SolrInputDocument doc = cmd.getSolrInputDocument();\n\n      final String math = doc.containsKey(ttlField) \n        ? doc.getFieldValue(ttlField).toString() : defaultTtl;\n\n      if (null != math) {\n        try {\n          final DateMathParser dmp = new DateMathParser();\n          // TODO: should we try to accept things like \"1DAY\" as well as \"+1DAY\" ?\n          // How? \n          // 'startsWith(\"+\")' is a bad idea because it would cause porblems with\n          // things like \"/DAY+1YEAR\"\n          // Maybe catch ParseException and rety with \"+\" prepended?\n          doc.addField(expireField, dmp.parseMath(math));\n        } catch (ParseException pe) {\n          throw new SolrException(BAD_REQUEST, \"Can't parse ttl as date math: \" + math, pe);\n        }\n      }\n\n      super.processAdd(cmd);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0158ced21948b6626f733c1c42c1e18d94449789","date":1462994341,"type":3,"author":"Bartosz Krasi≈Ñski","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DocExpirationUpdateProcessorFactory.TTLUpdateProcessor#processAdd(AddUpdateCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/DocExpirationUpdateProcessorFactory.TTLUpdateProcessor#processAdd(AddUpdateCommand).mjava","sourceNew":"    @Override\n    public void processAdd(AddUpdateCommand cmd) throws IOException {\n      final SolrInputDocument doc = cmd.getSolrInputDocument();\n\n      final String math = doc.containsKey(ttlField) \n        ? doc.getFieldValue(ttlField).toString() : defaultTtl;\n\n      if (null != math) {\n        try {\n          final DateMathParser dmp = new DateMathParser();\n          // TODO: should we try to accept things like \"1DAY\" as well as \"+1DAY\" ?\n          // How? \n          // 'startsWith(\"+\")' is a bad idea because it would cause problems with\n          // things like \"/DAY+1YEAR\"\n          // Maybe catch ParseException and retry with \"+\" prepended?\n          doc.addField(expireField, dmp.parseMath(math));\n        } catch (ParseException pe) {\n          throw new SolrException(BAD_REQUEST, \"Can't parse ttl as date math: \" + math, pe);\n        }\n      }\n\n      super.processAdd(cmd);\n    }\n\n","sourceOld":"    @Override\n    public void processAdd(AddUpdateCommand cmd) throws IOException {\n      final SolrInputDocument doc = cmd.getSolrInputDocument();\n\n      final String math = doc.containsKey(ttlField) \n        ? doc.getFieldValue(ttlField).toString() : defaultTtl;\n\n      if (null != math) {\n        try {\n          final DateMathParser dmp = new DateMathParser();\n          // TODO: should we try to accept things like \"1DAY\" as well as \"+1DAY\" ?\n          // How? \n          // 'startsWith(\"+\")' is a bad idea because it would cause porblems with\n          // things like \"/DAY+1YEAR\"\n          // Maybe catch ParseException and rety with \"+\" prepended?\n          doc.addField(expireField, dmp.parseMath(math));\n        } catch (ParseException pe) {\n          throw new SolrException(BAD_REQUEST, \"Can't parse ttl as date math: \" + math, pe);\n        }\n      }\n\n      super.processAdd(cmd);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DocExpirationUpdateProcessorFactory.TTLUpdateProcessor#processAdd(AddUpdateCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/DocExpirationUpdateProcessorFactory.TTLUpdateProcessor#processAdd(AddUpdateCommand).mjava","sourceNew":"    @Override\n    public void processAdd(AddUpdateCommand cmd) throws IOException {\n      final SolrInputDocument doc = cmd.getSolrInputDocument();\n\n      final String math = doc.containsKey(ttlField) \n        ? doc.getFieldValue(ttlField).toString() : defaultTtl;\n\n      if (null != math) {\n        try {\n          final DateMathParser dmp = new DateMathParser();\n          // TODO: should we try to accept things like \"1DAY\" as well as \"+1DAY\" ?\n          // How? \n          // 'startsWith(\"+\")' is a bad idea because it would cause problems with\n          // things like \"/DAY+1YEAR\"\n          // Maybe catch ParseException and retry with \"+\" prepended?\n          doc.addField(expireField, dmp.parseMath(math));\n        } catch (ParseException pe) {\n          throw new SolrException(BAD_REQUEST, \"Can't parse ttl as date math: \" + math, pe);\n        }\n      }\n\n      super.processAdd(cmd);\n    }\n\n","sourceOld":"    @Override\n    public void processAdd(AddUpdateCommand cmd) throws IOException {\n      final SolrInputDocument doc = cmd.getSolrInputDocument();\n\n      final String math = doc.containsKey(ttlField) \n        ? doc.getFieldValue(ttlField).toString() : defaultTtl;\n\n      if (null != math) {\n        try {\n          final DateMathParser dmp = new DateMathParser();\n          // TODO: should we try to accept things like \"1DAY\" as well as \"+1DAY\" ?\n          // How? \n          // 'startsWith(\"+\")' is a bad idea because it would cause porblems with\n          // things like \"/DAY+1YEAR\"\n          // Maybe catch ParseException and rety with \"+\" prepended?\n          doc.addField(expireField, dmp.parseMath(math));\n        } catch (ParseException pe) {\n          throw new SolrException(BAD_REQUEST, \"Can't parse ttl as date math: \" + math, pe);\n        }\n      }\n\n      super.processAdd(cmd);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DocExpirationUpdateProcessorFactory.TTLUpdateProcessor#processAdd(AddUpdateCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/DocExpirationUpdateProcessorFactory.TTLUpdateProcessor#processAdd(AddUpdateCommand).mjava","sourceNew":"    @Override\n    public void processAdd(AddUpdateCommand cmd) throws IOException {\n      final SolrInputDocument doc = cmd.getSolrInputDocument();\n\n      final String math = doc.containsKey(ttlField) \n        ? doc.getFieldValue(ttlField).toString() : defaultTtl;\n\n      if (null != math) {\n        try {\n          final DateMathParser dmp = new DateMathParser();\n          // TODO: should we try to accept things like \"1DAY\" as well as \"+1DAY\" ?\n          // How? \n          // 'startsWith(\"+\")' is a bad idea because it would cause problems with\n          // things like \"/DAY+1YEAR\"\n          // Maybe catch ParseException and retry with \"+\" prepended?\n          doc.addField(expireField, dmp.parseMath(math));\n        } catch (ParseException pe) {\n          throw new SolrException(BAD_REQUEST, \"Can't parse ttl as date math: \" + math, pe);\n        }\n      }\n\n      super.processAdd(cmd);\n    }\n\n","sourceOld":"    @Override\n    public void processAdd(AddUpdateCommand cmd) throws IOException {\n      final SolrInputDocument doc = cmd.getSolrInputDocument();\n\n      final String math = doc.containsKey(ttlField) \n        ? doc.getFieldValue(ttlField).toString() : defaultTtl;\n\n      if (null != math) {\n        try {\n          final DateMathParser dmp = new DateMathParser();\n          // TODO: should we try to accept things like \"1DAY\" as well as \"+1DAY\" ?\n          // How? \n          // 'startsWith(\"+\")' is a bad idea because it would cause porblems with\n          // things like \"/DAY+1YEAR\"\n          // Maybe catch ParseException and rety with \"+\" prepended?\n          doc.addField(expireField, dmp.parseMath(math));\n        } catch (ParseException pe) {\n          throw new SolrException(BAD_REQUEST, \"Can't parse ttl as date math: \" + math, pe);\n        }\n      }\n\n      super.processAdd(cmd);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5eb2511ababf862ea11e10761c70ee560cd84510":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ca70fffb953aae4d27efbfc28758033a317f39b1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ca70fffb953aae4d27efbfc28758033a317f39b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["ca70fffb953aae4d27efbfc28758033a317f39b1","d470c8182e92b264680e34081b75e70a9f2b3c89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["ca70fffb953aae4d27efbfc28758033a317f39b1","0158ced21948b6626f733c1c42c1e18d94449789"],"0158ced21948b6626f733c1c42c1e18d94449789":["ca70fffb953aae4d27efbfc28758033a317f39b1"]},"commit2Childs":{"5eb2511ababf862ea11e10761c70ee560cd84510":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5eb2511ababf862ea11e10761c70ee560cd84510","ca70fffb953aae4d27efbfc28758033a317f39b1"],"ca70fffb953aae4d27efbfc28758033a317f39b1":["5eb2511ababf862ea11e10761c70ee560cd84510","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89","0158ced21948b6626f733c1c42c1e18d94449789"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"0158ced21948b6626f733c1c42c1e18d94449789":["d470c8182e92b264680e34081b75e70a9f2b3c89"]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}