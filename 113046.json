{"path":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testNestedDocScoringWithDeletes().mjava","commits":[{"id":"a9960231c0d2fe8b22f626e517d4cbca37be4a6a","date":1351702608,"type":0,"author":"Martijn van Groningen","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testNestedDocScoringWithDeletes().mjava","pathOld":"/dev/null","sourceNew":"  public void testNestedDocScoringWithDeletes() throws Exception {\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(\n        random(),\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT,\n            new MockAnalyzer(random())).setMergePolicy(NoMergePolicy.COMPOUND_FILES));\n\n    // Cannot assert this since we use NoMergePolicy:\n    w.setDoRandomForceMergeAssert(false);\n\n    List<Document> docs = new ArrayList<Document>();\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"c\", 1999));\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n\n    w.commit();\n    IndexSearcher s = newSearcher(DirectoryReader.open(dir));\n\n    ToParentBlockJoinQuery q = new ToParentBlockJoinQuery(\n        NumericRangeQuery.newIntRange(\"year\", 1990, 2010, true, true),\n        new CachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\")))),\n        ScoreMode.Total\n    );\n\n    TopDocs topDocs = s.search(q, 10);\n    assertEquals(2, topDocs.totalHits);\n    assertEquals(6, topDocs.scoreDocs[0].doc);\n    assertEquals(3.0f, topDocs.scoreDocs[0].score, 0.0f);\n    assertEquals(2, topDocs.scoreDocs[1].doc);\n    assertEquals(2.0f, topDocs.scoreDocs[1].score, 0.0f);\n\n    s.getIndexReader().close();\n    w.deleteDocuments(new Term(\"skill\", \"java\"));\n    w.close();\n    s = newSearcher(DirectoryReader.open(dir));\n\n    topDocs = s.search(q, 10);\n    assertEquals(2, topDocs.totalHits);\n    assertEquals(6, topDocs.scoreDocs[0].doc);\n    assertEquals(2.0f, topDocs.scoreDocs[0].score, 0.0f);\n    assertEquals(2, topDocs.scoreDocs[1].doc);\n    assertEquals(1.0f, topDocs.scoreDocs[1].score, 0.0f);\n\n    s.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19f400d1b6b61e87efe596bd64726f080f9a29f0","date":1366027276,"type":3,"author":"Martijn van Groningen","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testNestedDocScoringWithDeletes().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testNestedDocScoringWithDeletes().mjava","sourceNew":"  public void testNestedDocScoringWithDeletes() throws Exception {\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(\n        random(),\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT,\n            new MockAnalyzer(random())).setMergePolicy(NoMergePolicy.COMPOUND_FILES));\n\n    // Cannot assert this since we use NoMergePolicy:\n    w.setDoRandomForceMergeAssert(false);\n\n    List<Document> docs = new ArrayList<>();\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"c\", 1999));\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n\n    w.commit();\n    IndexSearcher s = newSearcher(DirectoryReader.open(dir));\n\n    ToParentBlockJoinQuery q = new ToParentBlockJoinQuery(\n        NumericRangeQuery.newIntRange(\"year\", 1990, 2010, true, true),\n        new CachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\")))),\n        ScoreMode.Total\n    );\n\n    TopDocs topDocs = s.search(q, 10);\n    assertEquals(2, topDocs.totalHits);\n    assertEquals(6, topDocs.scoreDocs[0].doc);\n    assertEquals(3.0f, topDocs.scoreDocs[0].score, 0.0f);\n    assertEquals(2, topDocs.scoreDocs[1].doc);\n    assertEquals(2.0f, topDocs.scoreDocs[1].score, 0.0f);\n\n    s.getIndexReader().close();\n    w.deleteDocuments(new Term(\"skill\", \"java\"));\n    w.close();\n    s = newSearcher(DirectoryReader.open(dir));\n\n    topDocs = s.search(q, 10);\n    assertEquals(2, topDocs.totalHits);\n    assertEquals(6, topDocs.scoreDocs[0].doc);\n    assertEquals(2.0f, topDocs.scoreDocs[0].score, 0.0f);\n    assertEquals(2, topDocs.scoreDocs[1].doc);\n    assertEquals(1.0f, topDocs.scoreDocs[1].score, 0.0f);\n\n    s.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testNestedDocScoringWithDeletes() throws Exception {\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(\n        random(),\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT,\n            new MockAnalyzer(random())).setMergePolicy(NoMergePolicy.COMPOUND_FILES));\n\n    // Cannot assert this since we use NoMergePolicy:\n    w.setDoRandomForceMergeAssert(false);\n\n    List<Document> docs = new ArrayList<Document>();\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"c\", 1999));\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n\n    w.commit();\n    IndexSearcher s = newSearcher(DirectoryReader.open(dir));\n\n    ToParentBlockJoinQuery q = new ToParentBlockJoinQuery(\n        NumericRangeQuery.newIntRange(\"year\", 1990, 2010, true, true),\n        new CachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\")))),\n        ScoreMode.Total\n    );\n\n    TopDocs topDocs = s.search(q, 10);\n    assertEquals(2, topDocs.totalHits);\n    assertEquals(6, topDocs.scoreDocs[0].doc);\n    assertEquals(3.0f, topDocs.scoreDocs[0].score, 0.0f);\n    assertEquals(2, topDocs.scoreDocs[1].doc);\n    assertEquals(2.0f, topDocs.scoreDocs[1].score, 0.0f);\n\n    s.getIndexReader().close();\n    w.deleteDocuments(new Term(\"skill\", \"java\"));\n    w.close();\n    s = newSearcher(DirectoryReader.open(dir));\n\n    topDocs = s.search(q, 10);\n    assertEquals(2, topDocs.totalHits);\n    assertEquals(6, topDocs.scoreDocs[0].doc);\n    assertEquals(2.0f, topDocs.scoreDocs[0].score, 0.0f);\n    assertEquals(2, topDocs.scoreDocs[1].doc);\n    assertEquals(1.0f, topDocs.scoreDocs[1].score, 0.0f);\n\n    s.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"49a8cbd66bc94e18d7b9087e42dbc6cc0ee0c161","date":1378462032,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testNestedDocScoringWithDeletes().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testNestedDocScoringWithDeletes().mjava","sourceNew":"  public void testNestedDocScoringWithDeletes() throws Exception {\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(\n        random(),\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT,\n            new MockAnalyzer(random())).setMergePolicy(NoMergePolicy.COMPOUND_FILES));\n\n    // Cannot assert this since we use NoMergePolicy:\n    w.setDoRandomForceMergeAssert(false);\n\n    List<Document> docs = new ArrayList<>();\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"c\", 1999));\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n\n    w.commit();\n    IndexSearcher s = newSearcher(DirectoryReader.open(dir));\n\n    ToParentBlockJoinQuery q = new ToParentBlockJoinQuery(\n        NumericRangeQuery.newIntRange(\"year\", 1990, 2010, true, true),\n        new FixedBitSetCachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\")))),\n        ScoreMode.Total\n    );\n\n    TopDocs topDocs = s.search(q, 10);\n    assertEquals(2, topDocs.totalHits);\n    assertEquals(6, topDocs.scoreDocs[0].doc);\n    assertEquals(3.0f, topDocs.scoreDocs[0].score, 0.0f);\n    assertEquals(2, topDocs.scoreDocs[1].doc);\n    assertEquals(2.0f, topDocs.scoreDocs[1].score, 0.0f);\n\n    s.getIndexReader().close();\n    w.deleteDocuments(new Term(\"skill\", \"java\"));\n    w.close();\n    s = newSearcher(DirectoryReader.open(dir));\n\n    topDocs = s.search(q, 10);\n    assertEquals(2, topDocs.totalHits);\n    assertEquals(6, topDocs.scoreDocs[0].doc);\n    assertEquals(2.0f, topDocs.scoreDocs[0].score, 0.0f);\n    assertEquals(2, topDocs.scoreDocs[1].doc);\n    assertEquals(1.0f, topDocs.scoreDocs[1].score, 0.0f);\n\n    s.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testNestedDocScoringWithDeletes() throws Exception {\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(\n        random(),\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT,\n            new MockAnalyzer(random())).setMergePolicy(NoMergePolicy.COMPOUND_FILES));\n\n    // Cannot assert this since we use NoMergePolicy:\n    w.setDoRandomForceMergeAssert(false);\n\n    List<Document> docs = new ArrayList<>();\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"c\", 1999));\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n\n    w.commit();\n    IndexSearcher s = newSearcher(DirectoryReader.open(dir));\n\n    ToParentBlockJoinQuery q = new ToParentBlockJoinQuery(\n        NumericRangeQuery.newIntRange(\"year\", 1990, 2010, true, true),\n        new CachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\")))),\n        ScoreMode.Total\n    );\n\n    TopDocs topDocs = s.search(q, 10);\n    assertEquals(2, topDocs.totalHits);\n    assertEquals(6, topDocs.scoreDocs[0].doc);\n    assertEquals(3.0f, topDocs.scoreDocs[0].score, 0.0f);\n    assertEquals(2, topDocs.scoreDocs[1].doc);\n    assertEquals(2.0f, topDocs.scoreDocs[1].score, 0.0f);\n\n    s.getIndexReader().close();\n    w.deleteDocuments(new Term(\"skill\", \"java\"));\n    w.close();\n    s = newSearcher(DirectoryReader.open(dir));\n\n    topDocs = s.search(q, 10);\n    assertEquals(2, topDocs.totalHits);\n    assertEquals(6, topDocs.scoreDocs[0].doc);\n    assertEquals(2.0f, topDocs.scoreDocs[0].score, 0.0f);\n    assertEquals(2, topDocs.scoreDocs[1].doc);\n    assertEquals(1.0f, topDocs.scoreDocs[1].score, 0.0f);\n\n    s.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testNestedDocScoringWithDeletes().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testNestedDocScoringWithDeletes().mjava","sourceNew":"  public void testNestedDocScoringWithDeletes() throws Exception {\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(\n        random(),\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT,\n            new MockAnalyzer(random())).setMergePolicy(NoMergePolicy.COMPOUND_FILES));\n\n    // Cannot assert this since we use NoMergePolicy:\n    w.setDoRandomForceMergeAssert(false);\n\n    List<Document> docs = new ArrayList<>();\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"c\", 1999));\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n\n    w.commit();\n    IndexSearcher s = newSearcher(DirectoryReader.open(dir));\n\n    ToParentBlockJoinQuery q = new ToParentBlockJoinQuery(\n        NumericRangeQuery.newIntRange(\"year\", 1990, 2010, true, true),\n        new FixedBitSetCachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\")))),\n        ScoreMode.Total\n    );\n\n    TopDocs topDocs = s.search(q, 10);\n    assertEquals(2, topDocs.totalHits);\n    assertEquals(6, topDocs.scoreDocs[0].doc);\n    assertEquals(3.0f, topDocs.scoreDocs[0].score, 0.0f);\n    assertEquals(2, topDocs.scoreDocs[1].doc);\n    assertEquals(2.0f, topDocs.scoreDocs[1].score, 0.0f);\n\n    s.getIndexReader().close();\n    w.deleteDocuments(new Term(\"skill\", \"java\"));\n    w.shutdown();\n    s = newSearcher(DirectoryReader.open(dir));\n\n    topDocs = s.search(q, 10);\n    assertEquals(2, topDocs.totalHits);\n    assertEquals(6, topDocs.scoreDocs[0].doc);\n    assertEquals(2.0f, topDocs.scoreDocs[0].score, 0.0f);\n    assertEquals(2, topDocs.scoreDocs[1].doc);\n    assertEquals(1.0f, topDocs.scoreDocs[1].score, 0.0f);\n\n    s.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testNestedDocScoringWithDeletes() throws Exception {\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(\n        random(),\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT,\n            new MockAnalyzer(random())).setMergePolicy(NoMergePolicy.COMPOUND_FILES));\n\n    // Cannot assert this since we use NoMergePolicy:\n    w.setDoRandomForceMergeAssert(false);\n\n    List<Document> docs = new ArrayList<>();\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"c\", 1999));\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n\n    w.commit();\n    IndexSearcher s = newSearcher(DirectoryReader.open(dir));\n\n    ToParentBlockJoinQuery q = new ToParentBlockJoinQuery(\n        NumericRangeQuery.newIntRange(\"year\", 1990, 2010, true, true),\n        new FixedBitSetCachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\")))),\n        ScoreMode.Total\n    );\n\n    TopDocs topDocs = s.search(q, 10);\n    assertEquals(2, topDocs.totalHits);\n    assertEquals(6, topDocs.scoreDocs[0].doc);\n    assertEquals(3.0f, topDocs.scoreDocs[0].score, 0.0f);\n    assertEquals(2, topDocs.scoreDocs[1].doc);\n    assertEquals(2.0f, topDocs.scoreDocs[1].score, 0.0f);\n\n    s.getIndexReader().close();\n    w.deleteDocuments(new Term(\"skill\", \"java\"));\n    w.close();\n    s = newSearcher(DirectoryReader.open(dir));\n\n    topDocs = s.search(q, 10);\n    assertEquals(2, topDocs.totalHits);\n    assertEquals(6, topDocs.scoreDocs[0].doc);\n    assertEquals(2.0f, topDocs.scoreDocs[0].score, 0.0f);\n    assertEquals(2, topDocs.scoreDocs[1].doc);\n    assertEquals(1.0f, topDocs.scoreDocs[1].score, 0.0f);\n\n    s.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e2fb55c0777755badd3b46d8140f3d4301febed","date":1398881584,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testNestedDocScoringWithDeletes().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testNestedDocScoringWithDeletes().mjava","sourceNew":"  public void testNestedDocScoringWithDeletes() throws Exception {\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(\n        random(),\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT,\n            new MockAnalyzer(random())).setMergePolicy(NoMergePolicy.INSTANCE));\n\n    // Cannot assert this since we use NoMergePolicy:\n    w.setDoRandomForceMergeAssert(false);\n\n    List<Document> docs = new ArrayList<>();\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"c\", 1999));\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n\n    w.commit();\n    IndexSearcher s = newSearcher(DirectoryReader.open(dir));\n\n    ToParentBlockJoinQuery q = new ToParentBlockJoinQuery(\n        NumericRangeQuery.newIntRange(\"year\", 1990, 2010, true, true),\n        new FixedBitSetCachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\")))),\n        ScoreMode.Total\n    );\n\n    TopDocs topDocs = s.search(q, 10);\n    assertEquals(2, topDocs.totalHits);\n    assertEquals(6, topDocs.scoreDocs[0].doc);\n    assertEquals(3.0f, topDocs.scoreDocs[0].score, 0.0f);\n    assertEquals(2, topDocs.scoreDocs[1].doc);\n    assertEquals(2.0f, topDocs.scoreDocs[1].score, 0.0f);\n\n    s.getIndexReader().close();\n    w.deleteDocuments(new Term(\"skill\", \"java\"));\n    w.shutdown();\n    s = newSearcher(DirectoryReader.open(dir));\n\n    topDocs = s.search(q, 10);\n    assertEquals(2, topDocs.totalHits);\n    assertEquals(6, topDocs.scoreDocs[0].doc);\n    assertEquals(2.0f, topDocs.scoreDocs[0].score, 0.0f);\n    assertEquals(2, topDocs.scoreDocs[1].doc);\n    assertEquals(1.0f, topDocs.scoreDocs[1].score, 0.0f);\n\n    s.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testNestedDocScoringWithDeletes() throws Exception {\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(\n        random(),\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT,\n            new MockAnalyzer(random())).setMergePolicy(NoMergePolicy.COMPOUND_FILES));\n\n    // Cannot assert this since we use NoMergePolicy:\n    w.setDoRandomForceMergeAssert(false);\n\n    List<Document> docs = new ArrayList<>();\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"c\", 1999));\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n\n    w.commit();\n    IndexSearcher s = newSearcher(DirectoryReader.open(dir));\n\n    ToParentBlockJoinQuery q = new ToParentBlockJoinQuery(\n        NumericRangeQuery.newIntRange(\"year\", 1990, 2010, true, true),\n        new FixedBitSetCachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\")))),\n        ScoreMode.Total\n    );\n\n    TopDocs topDocs = s.search(q, 10);\n    assertEquals(2, topDocs.totalHits);\n    assertEquals(6, topDocs.scoreDocs[0].doc);\n    assertEquals(3.0f, topDocs.scoreDocs[0].score, 0.0f);\n    assertEquals(2, topDocs.scoreDocs[1].doc);\n    assertEquals(2.0f, topDocs.scoreDocs[1].score, 0.0f);\n\n    s.getIndexReader().close();\n    w.deleteDocuments(new Term(\"skill\", \"java\"));\n    w.shutdown();\n    s = newSearcher(DirectoryReader.open(dir));\n\n    topDocs = s.search(q, 10);\n    assertEquals(2, topDocs.totalHits);\n    assertEquals(6, topDocs.scoreDocs[0].doc);\n    assertEquals(2.0f, topDocs.scoreDocs[0].score, 0.0f);\n    assertEquals(2, topDocs.scoreDocs[1].doc);\n    assertEquals(1.0f, topDocs.scoreDocs[1].score, 0.0f);\n\n    s.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testNestedDocScoringWithDeletes().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testNestedDocScoringWithDeletes().mjava","sourceNew":"  public void testNestedDocScoringWithDeletes() throws Exception {\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(\n        random(),\n        dir,\n        newIndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(NoMergePolicy.INSTANCE));\n\n    // Cannot assert this since we use NoMergePolicy:\n    w.setDoRandomForceMergeAssert(false);\n\n    List<Document> docs = new ArrayList<>();\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"c\", 1999));\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n\n    w.commit();\n    IndexSearcher s = newSearcher(DirectoryReader.open(dir));\n\n    ToParentBlockJoinQuery q = new ToParentBlockJoinQuery(\n        NumericRangeQuery.newIntRange(\"year\", 1990, 2010, true, true),\n        new FixedBitSetCachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\")))),\n        ScoreMode.Total\n    );\n\n    TopDocs topDocs = s.search(q, 10);\n    assertEquals(2, topDocs.totalHits);\n    assertEquals(6, topDocs.scoreDocs[0].doc);\n    assertEquals(3.0f, topDocs.scoreDocs[0].score, 0.0f);\n    assertEquals(2, topDocs.scoreDocs[1].doc);\n    assertEquals(2.0f, topDocs.scoreDocs[1].score, 0.0f);\n\n    s.getIndexReader().close();\n    w.deleteDocuments(new Term(\"skill\", \"java\"));\n    w.shutdown();\n    s = newSearcher(DirectoryReader.open(dir));\n\n    topDocs = s.search(q, 10);\n    assertEquals(2, topDocs.totalHits);\n    assertEquals(6, topDocs.scoreDocs[0].doc);\n    assertEquals(2.0f, topDocs.scoreDocs[0].score, 0.0f);\n    assertEquals(2, topDocs.scoreDocs[1].doc);\n    assertEquals(1.0f, topDocs.scoreDocs[1].score, 0.0f);\n\n    s.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testNestedDocScoringWithDeletes() throws Exception {\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(\n        random(),\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT,\n            new MockAnalyzer(random())).setMergePolicy(NoMergePolicy.INSTANCE));\n\n    // Cannot assert this since we use NoMergePolicy:\n    w.setDoRandomForceMergeAssert(false);\n\n    List<Document> docs = new ArrayList<>();\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"c\", 1999));\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n\n    w.commit();\n    IndexSearcher s = newSearcher(DirectoryReader.open(dir));\n\n    ToParentBlockJoinQuery q = new ToParentBlockJoinQuery(\n        NumericRangeQuery.newIntRange(\"year\", 1990, 2010, true, true),\n        new FixedBitSetCachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\")))),\n        ScoreMode.Total\n    );\n\n    TopDocs topDocs = s.search(q, 10);\n    assertEquals(2, topDocs.totalHits);\n    assertEquals(6, topDocs.scoreDocs[0].doc);\n    assertEquals(3.0f, topDocs.scoreDocs[0].score, 0.0f);\n    assertEquals(2, topDocs.scoreDocs[1].doc);\n    assertEquals(2.0f, topDocs.scoreDocs[1].score, 0.0f);\n\n    s.getIndexReader().close();\n    w.deleteDocuments(new Term(\"skill\", \"java\"));\n    w.shutdown();\n    s = newSearcher(DirectoryReader.open(dir));\n\n    topDocs = s.search(q, 10);\n    assertEquals(2, topDocs.totalHits);\n    assertEquals(6, topDocs.scoreDocs[0].doc);\n    assertEquals(2.0f, topDocs.scoreDocs[0].score, 0.0f);\n    assertEquals(2, topDocs.scoreDocs[1].doc);\n    assertEquals(1.0f, topDocs.scoreDocs[1].score, 0.0f);\n\n    s.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testNestedDocScoringWithDeletes().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testNestedDocScoringWithDeletes().mjava","sourceNew":"  public void testNestedDocScoringWithDeletes() throws Exception {\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(\n        random(),\n        dir,\n        newIndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(NoMergePolicy.INSTANCE));\n\n    // Cannot assert this since we use NoMergePolicy:\n    w.setDoRandomForceMergeAssert(false);\n\n    List<Document> docs = new ArrayList<>();\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"c\", 1999));\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n\n    w.commit();\n    IndexSearcher s = newSearcher(DirectoryReader.open(dir));\n\n    ToParentBlockJoinQuery q = new ToParentBlockJoinQuery(\n        NumericRangeQuery.newIntRange(\"year\", 1990, 2010, true, true),\n        new FixedBitSetCachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\")))),\n        ScoreMode.Total\n    );\n\n    TopDocs topDocs = s.search(q, 10);\n    assertEquals(2, topDocs.totalHits);\n    assertEquals(6, topDocs.scoreDocs[0].doc);\n    assertEquals(3.0f, topDocs.scoreDocs[0].score, 0.0f);\n    assertEquals(2, topDocs.scoreDocs[1].doc);\n    assertEquals(2.0f, topDocs.scoreDocs[1].score, 0.0f);\n\n    s.getIndexReader().close();\n    w.deleteDocuments(new Term(\"skill\", \"java\"));\n    w.close();\n    s = newSearcher(DirectoryReader.open(dir));\n\n    topDocs = s.search(q, 10);\n    assertEquals(2, topDocs.totalHits);\n    assertEquals(6, topDocs.scoreDocs[0].doc);\n    assertEquals(2.0f, topDocs.scoreDocs[0].score, 0.0f);\n    assertEquals(2, topDocs.scoreDocs[1].doc);\n    assertEquals(1.0f, topDocs.scoreDocs[1].score, 0.0f);\n\n    s.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testNestedDocScoringWithDeletes() throws Exception {\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(\n        random(),\n        dir,\n        newIndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(NoMergePolicy.INSTANCE));\n\n    // Cannot assert this since we use NoMergePolicy:\n    w.setDoRandomForceMergeAssert(false);\n\n    List<Document> docs = new ArrayList<>();\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"c\", 1999));\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n\n    w.commit();\n    IndexSearcher s = newSearcher(DirectoryReader.open(dir));\n\n    ToParentBlockJoinQuery q = new ToParentBlockJoinQuery(\n        NumericRangeQuery.newIntRange(\"year\", 1990, 2010, true, true),\n        new FixedBitSetCachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\")))),\n        ScoreMode.Total\n    );\n\n    TopDocs topDocs = s.search(q, 10);\n    assertEquals(2, topDocs.totalHits);\n    assertEquals(6, topDocs.scoreDocs[0].doc);\n    assertEquals(3.0f, topDocs.scoreDocs[0].score, 0.0f);\n    assertEquals(2, topDocs.scoreDocs[1].doc);\n    assertEquals(2.0f, topDocs.scoreDocs[1].score, 0.0f);\n\n    s.getIndexReader().close();\n    w.deleteDocuments(new Term(\"skill\", \"java\"));\n    w.shutdown();\n    s = newSearcher(DirectoryReader.open(dir));\n\n    topDocs = s.search(q, 10);\n    assertEquals(2, topDocs.totalHits);\n    assertEquals(6, topDocs.scoreDocs[0].doc);\n    assertEquals(2.0f, topDocs.scoreDocs[0].score, 0.0f);\n    assertEquals(2, topDocs.scoreDocs[1].doc);\n    assertEquals(1.0f, topDocs.scoreDocs[1].score, 0.0f);\n\n    s.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b012914a8110b2ff1d075ed1ef72aa57084d4897","date":1414685177,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testNestedDocScoringWithDeletes().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testNestedDocScoringWithDeletes().mjava","sourceNew":"  public void testNestedDocScoringWithDeletes() throws Exception {\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(\n        random(),\n        dir,\n        newIndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(NoMergePolicy.INSTANCE));\n\n    // Cannot assert this since we use NoMergePolicy:\n    w.setDoRandomForceMergeAssert(false);\n\n    List<Document> docs = new ArrayList<>();\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"c\", 1999));\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n\n    w.commit();\n    IndexSearcher s = newSearcher(DirectoryReader.open(dir));\n\n    ToParentBlockJoinQuery q = new ToParentBlockJoinQuery(\n        NumericRangeQuery.newIntRange(\"year\", 1990, 2010, true, true),\n        new BitDocIdSetCachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\")))),\n        ScoreMode.Total\n    );\n\n    TopDocs topDocs = s.search(q, 10);\n    assertEquals(2, topDocs.totalHits);\n    assertEquals(6, topDocs.scoreDocs[0].doc);\n    assertEquals(3.0f, topDocs.scoreDocs[0].score, 0.0f);\n    assertEquals(2, topDocs.scoreDocs[1].doc);\n    assertEquals(2.0f, topDocs.scoreDocs[1].score, 0.0f);\n\n    s.getIndexReader().close();\n    w.deleteDocuments(new Term(\"skill\", \"java\"));\n    w.close();\n    s = newSearcher(DirectoryReader.open(dir));\n\n    topDocs = s.search(q, 10);\n    assertEquals(2, topDocs.totalHits);\n    assertEquals(6, topDocs.scoreDocs[0].doc);\n    assertEquals(2.0f, topDocs.scoreDocs[0].score, 0.0f);\n    assertEquals(2, topDocs.scoreDocs[1].doc);\n    assertEquals(1.0f, topDocs.scoreDocs[1].score, 0.0f);\n\n    s.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testNestedDocScoringWithDeletes() throws Exception {\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(\n        random(),\n        dir,\n        newIndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(NoMergePolicy.INSTANCE));\n\n    // Cannot assert this since we use NoMergePolicy:\n    w.setDoRandomForceMergeAssert(false);\n\n    List<Document> docs = new ArrayList<>();\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"c\", 1999));\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n\n    w.commit();\n    IndexSearcher s = newSearcher(DirectoryReader.open(dir));\n\n    ToParentBlockJoinQuery q = new ToParentBlockJoinQuery(\n        NumericRangeQuery.newIntRange(\"year\", 1990, 2010, true, true),\n        new FixedBitSetCachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\")))),\n        ScoreMode.Total\n    );\n\n    TopDocs topDocs = s.search(q, 10);\n    assertEquals(2, topDocs.totalHits);\n    assertEquals(6, topDocs.scoreDocs[0].doc);\n    assertEquals(3.0f, topDocs.scoreDocs[0].score, 0.0f);\n    assertEquals(2, topDocs.scoreDocs[1].doc);\n    assertEquals(2.0f, topDocs.scoreDocs[1].score, 0.0f);\n\n    s.getIndexReader().close();\n    w.deleteDocuments(new Term(\"skill\", \"java\"));\n    w.close();\n    s = newSearcher(DirectoryReader.open(dir));\n\n    topDocs = s.search(q, 10);\n    assertEquals(2, topDocs.totalHits);\n    assertEquals(6, topDocs.scoreDocs[0].doc);\n    assertEquals(2.0f, topDocs.scoreDocs[0].score, 0.0f);\n    assertEquals(2, topDocs.scoreDocs[1].doc);\n    assertEquals(1.0f, topDocs.scoreDocs[1].score, 0.0f);\n\n    s.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f4464508ee83288c8c4585b533f9faaa93aa314","date":1435240759,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testNestedDocScoringWithDeletes().mjava","sourceNew":null,"sourceOld":"  public void testNestedDocScoringWithDeletes() throws Exception {\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(\n        random(),\n        dir,\n        newIndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(NoMergePolicy.INSTANCE));\n\n    // Cannot assert this since we use NoMergePolicy:\n    w.setDoRandomForceMergeAssert(false);\n\n    List<Document> docs = new ArrayList<>();\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"c\", 1999));\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n\n    w.commit();\n    IndexSearcher s = newSearcher(DirectoryReader.open(dir));\n\n    ToParentBlockJoinQuery q = new ToParentBlockJoinQuery(\n        NumericRangeQuery.newIntRange(\"year\", 1990, 2010, true, true),\n        new BitDocIdSetCachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\")))),\n        ScoreMode.Total\n    );\n\n    TopDocs topDocs = s.search(q, 10);\n    assertEquals(2, topDocs.totalHits);\n    assertEquals(6, topDocs.scoreDocs[0].doc);\n    assertEquals(3.0f, topDocs.scoreDocs[0].score, 0.0f);\n    assertEquals(2, topDocs.scoreDocs[1].doc);\n    assertEquals(2.0f, topDocs.scoreDocs[1].score, 0.0f);\n\n    s.getIndexReader().close();\n    w.deleteDocuments(new Term(\"skill\", \"java\"));\n    w.close();\n    s = newSearcher(DirectoryReader.open(dir));\n\n    topDocs = s.search(q, 10);\n    assertEquals(2, topDocs.totalHits);\n    assertEquals(6, topDocs.scoreDocs[0].doc);\n    assertEquals(2.0f, topDocs.scoreDocs[0].score, 0.0f);\n    assertEquals(2, topDocs.scoreDocs[1].doc);\n    assertEquals(1.0f, topDocs.scoreDocs[1].score, 0.0f);\n\n    s.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7e2fb55c0777755badd3b46d8140f3d4301febed":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"19f400d1b6b61e87efe596bd64726f080f9a29f0":["a9960231c0d2fe8b22f626e517d4cbca37be4a6a"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["b012914a8110b2ff1d075ed1ef72aa57084d4897"],"b012914a8110b2ff1d075ed1ef72aa57084d4897":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["7e2fb55c0777755badd3b46d8140f3d4301febed"],"a9960231c0d2fe8b22f626e517d4cbca37be4a6a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"49a8cbd66bc94e18d7b9087e42dbc6cc0ee0c161":["19f400d1b6b61e87efe596bd64726f080f9a29f0"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["49a8cbd66bc94e18d7b9087e42dbc6cc0ee0c161"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f4464508ee83288c8c4585b533f9faaa93aa314"]},"commit2Childs":{"7e2fb55c0777755badd3b46d8140f3d4301febed":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"19f400d1b6b61e87efe596bd64726f080f9a29f0":["49a8cbd66bc94e18d7b9087e42dbc6cc0ee0c161"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b012914a8110b2ff1d075ed1ef72aa57084d4897":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"a9960231c0d2fe8b22f626e517d4cbca37be4a6a":["19f400d1b6b61e87efe596bd64726f080f9a29f0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a9960231c0d2fe8b22f626e517d4cbca37be4a6a"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["b012914a8110b2ff1d075ed1ef72aa57084d4897"],"49a8cbd66bc94e18d7b9087e42dbc6cc0ee0c161":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["7e2fb55c0777755badd3b46d8140f3d4301febed"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}