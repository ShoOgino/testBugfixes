{"path":"src/java/org/apache/solr/schema/FieldType#createFields(SchemaField,int,FieldType,String,float,String...).mjava","commits":[{"id":"abec2fd822be07fc74ef5ba3609b9c5625a87d6d","date":1261659802,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/solr/schema/FieldType#createFields(SchemaField,int,FieldType,String,float,String...).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Create multiple fields from a single field and multiple values.  Fields are named as SchemaField.getName() + {@link #POLY_FIELD_SEPARATOR} + i, where\n   * i starts at 0.\n   * <p/>\n   * If the field is stored, then an extra field gets created that contains the storageVal.  It is this field that also\n   *\n   * @param field The {@link org.apache.solr.schema.SchemaField}\n   * @param props The properties to use\n   * @param delegatedType An optional type to use.  If null, then field.getType() is used.  Useful for poly fields.\n   * @param storageVal If the field stores, then this value will be used for the stored field\n   * @param boost The boost to apply to all fields\n   * @param externalVals The values to use\n   * @return The fields\n   */\n  protected Fieldable[] createFields(SchemaField field, int props,\n                                 FieldType delegatedType, String storageVal,\n                                 float boost, String ... externalVals) {\n    int n = field.indexed() ? externalVals.length : 0;\n    n += field.stored() ? 1 : 0;\n    if (delegatedType == null) { //if the type isn't being overriden, then just use the base one\n      delegatedType = field.getType();\n    }\n    Field[] results = new Field[n];\n    //Field.Store.NO,Field.Index.NOT_ANALYZED_NO_NORMS, Field.TermVector.NO, true, true\n\n    if (externalVals.length > 0) {\n      if (field.indexed()) {\n        String name = field.getName() + \"_\";\n        String suffix = POLY_FIELD_SEPARATOR + delegatedType.typeName;\n\n        int len = name.length();\n        StringBuilder bldr = new StringBuilder(len + 3 + suffix.length());//should be enough buffer to handle most values of j.\n        bldr.append(name);\n        for (int j = 0; j < externalVals.length; j++) {\n          //SchemaField is final, as is name, so we need to recreate each time\n          //put the counter before the separator, b/c dynamic fields can't be asterisks on both the front and the end of the String\n          bldr.append(j).append(suffix);\n          SchemaField sf = SchemaField.create(bldr.toString(),\n                  delegatedType, props, null);\n                  //schema.getDynamicField(name  + \"_\" + j + POLY_FIELD_SEPARATOR + delegatedType.typeName);\n                  /**/\n          //new SchemaField(name, ft, p, defaultValue )\n          //QUESTION: should we allow for vectors, etc?  Not sure that it makes sense\n          results[j] = delegatedType.createField(sf, externalVals[j], boost);\n          bldr.setLength(len);//cut the builder back to just the length of the prefix, but keep the capacity\n        }\n      }\n      Field.TermVector fieldTermVec = getFieldTermVec(field, storageVal);\n      if (field.stored() || fieldTermVec.equals(Field.TermVector.YES)\n              || fieldTermVec.equals(Field.TermVector.WITH_OFFSETS)\n              || fieldTermVec.equals(Field.TermVector.WITH_POSITIONS)\n              || fieldTermVec.equals(Field.TermVector.WITH_POSITIONS_OFFSETS)\n      ) {\n\n          //QUESTION: should we allow for vectors, etc?  Not sure that it makes sense\n        results[results.length - 1] = createField(field.getName(), storageVal, getFieldStore(field, storageVal),\n                Field.Index.NO,\n                fieldTermVec, field.omitNorms(), field.omitTf(), boost);\n         \n      }\n\n    }\n    return results;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4aafd8c35feb155ec2e0e4b6e03cc1604204dd52","date":1261676568,"type":4,"author":"Yonik Seeley","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/solr/schema/FieldType#createFields(SchemaField,int,FieldType,String,float,String...).mjava","sourceNew":null,"sourceOld":"  /**\n   * Create multiple fields from a single field and multiple values.  Fields are named as SchemaField.getName() + {@link #POLY_FIELD_SEPARATOR} + i, where\n   * i starts at 0.\n   * <p/>\n   * If the field is stored, then an extra field gets created that contains the storageVal.  It is this field that also\n   *\n   * @param field The {@link org.apache.solr.schema.SchemaField}\n   * @param props The properties to use\n   * @param delegatedType An optional type to use.  If null, then field.getType() is used.  Useful for poly fields.\n   * @param storageVal If the field stores, then this value will be used for the stored field\n   * @param boost The boost to apply to all fields\n   * @param externalVals The values to use\n   * @return The fields\n   */\n  protected Fieldable[] createFields(SchemaField field, int props,\n                                 FieldType delegatedType, String storageVal,\n                                 float boost, String ... externalVals) {\n    int n = field.indexed() ? externalVals.length : 0;\n    n += field.stored() ? 1 : 0;\n    if (delegatedType == null) { //if the type isn't being overriden, then just use the base one\n      delegatedType = field.getType();\n    }\n    Field[] results = new Field[n];\n    //Field.Store.NO,Field.Index.NOT_ANALYZED_NO_NORMS, Field.TermVector.NO, true, true\n\n    if (externalVals.length > 0) {\n      if (field.indexed()) {\n        String name = field.getName() + \"_\";\n        String suffix = POLY_FIELD_SEPARATOR + delegatedType.typeName;\n\n        int len = name.length();\n        StringBuilder bldr = new StringBuilder(len + 3 + suffix.length());//should be enough buffer to handle most values of j.\n        bldr.append(name);\n        for (int j = 0; j < externalVals.length; j++) {\n          //SchemaField is final, as is name, so we need to recreate each time\n          //put the counter before the separator, b/c dynamic fields can't be asterisks on both the front and the end of the String\n          bldr.append(j).append(suffix);\n          SchemaField sf = SchemaField.create(bldr.toString(),\n                  delegatedType, props, null);\n                  //schema.getDynamicField(name  + \"_\" + j + POLY_FIELD_SEPARATOR + delegatedType.typeName);\n                  /**/\n          //new SchemaField(name, ft, p, defaultValue )\n          //QUESTION: should we allow for vectors, etc?  Not sure that it makes sense\n          results[j] = delegatedType.createField(sf, externalVals[j], boost);\n          bldr.setLength(len);//cut the builder back to just the length of the prefix, but keep the capacity\n        }\n      }\n      Field.TermVector fieldTermVec = getFieldTermVec(field, storageVal);\n      if (field.stored() || fieldTermVec.equals(Field.TermVector.YES)\n              || fieldTermVec.equals(Field.TermVector.WITH_OFFSETS)\n              || fieldTermVec.equals(Field.TermVector.WITH_POSITIONS)\n              || fieldTermVec.equals(Field.TermVector.WITH_POSITIONS_OFFSETS)\n      ) {\n\n          //QUESTION: should we allow for vectors, etc?  Not sure that it makes sense\n        results[results.length - 1] = createField(field.getName(), storageVal, getFieldStore(field, storageVal),\n                Field.Index.NO,\n                fieldTermVec, field.omitNorms(), field.omitTf(), boost);\n         \n      }\n\n    }\n    return results;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"abec2fd822be07fc74ef5ba3609b9c5625a87d6d":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"4aafd8c35feb155ec2e0e4b6e03cc1604204dd52":["abec2fd822be07fc74ef5ba3609b9c5625a87d6d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"abec2fd822be07fc74ef5ba3609b9c5625a87d6d":["4aafd8c35feb155ec2e0e4b6e03cc1604204dd52"],"4aafd8c35feb155ec2e0e4b6e03cc1604204dd52":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["abec2fd822be07fc74ef5ba3609b9c5625a87d6d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4aafd8c35feb155ec2e0e4b6e03cc1604204dd52","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}