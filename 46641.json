{"path":"lucene/test-framework/src/java/org/apache/lucene/util/BaseDocIdSetTestCase#assertEquals(int,BitSet,T).mjava","commits":[{"id":"7581da3051efe8071ae92ac7eca27a270bc4611e","date":1373613227,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/BaseDocIdSetTestCase#assertEquals(int,BitSet,T).mjava","pathOld":"/dev/null","sourceNew":"  /** Assert that the content of the {@link DocIdSet} is the same as the content of the {@link BitSet}. */\n  public void assertEquals(int numBits, BitSet ds1, T ds2) throws IOException {\n    // nextDoc\n    DocIdSetIterator it2 = ds2.iterator();\n    if (it2 == null) {\n      assertEquals(-1, ds1.nextSetBit(0));\n    } else {\n      assertEquals(-1, it2.docID());\n      for (int doc = ds1.nextSetBit(0); doc != -1; doc = ds1.nextSetBit(doc + 1)) {\n        assertEquals(doc, it2.nextDoc());\n        assertEquals(doc, it2.docID());\n      }\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, it2.nextDoc());\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, it2.docID());\n    }\n\n    // nextDoc / advance\n    it2 = ds2.iterator();\n    if (it2 == null) {\n      assertEquals(-1, ds1.nextSetBit(0));\n    } else {\n      for (int doc = -1; doc != DocIdSetIterator.NO_MORE_DOCS;) {\n        if (random().nextBoolean()) {\n          doc = ds1.nextSetBit(doc + 1);\n          if (doc == -1) {\n            doc = DocIdSetIterator.NO_MORE_DOCS;\n          }\n          assertEquals(doc, it2.nextDoc());\n          assertEquals(doc, it2.docID());\n        } else {\n          final int target = doc + 1 + random().nextInt(random().nextBoolean() ? 64 : Math.max(numBits / 8, 1));\n          doc = ds1.nextSetBit(target);\n          if (doc == -1) {\n            doc = DocIdSetIterator.NO_MORE_DOCS;\n          }\n          assertEquals(doc, it2.advance(target));\n          assertEquals(doc, it2.docID());\n        }\n      }\n    }\n\n    // bits()\n    final Bits bits = ds2.bits();\n    if (bits != null) {\n      // test consistency between bits and iterator\n      it2 = ds2.iterator();\n      for (int previousDoc = -1, doc = it2.nextDoc(); ; previousDoc = doc, doc = it2.nextDoc()) {\n        final int max = doc == DocIdSetIterator.NO_MORE_DOCS ? bits.length() : doc;\n        for (int i = previousDoc + 1; i < max; ++i) {\n          assertEquals(false, bits.get(i));\n        }\n        if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        assertEquals(true, bits.get(doc));\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/BaseDocIdSetTestCase#assertEquals(int,BitSet,T).mjava","pathOld":"/dev/null","sourceNew":"  /** Assert that the content of the {@link DocIdSet} is the same as the content of the {@link BitSet}. */\n  public void assertEquals(int numBits, BitSet ds1, T ds2) throws IOException {\n    // nextDoc\n    DocIdSetIterator it2 = ds2.iterator();\n    if (it2 == null) {\n      assertEquals(-1, ds1.nextSetBit(0));\n    } else {\n      assertEquals(-1, it2.docID());\n      for (int doc = ds1.nextSetBit(0); doc != -1; doc = ds1.nextSetBit(doc + 1)) {\n        assertEquals(doc, it2.nextDoc());\n        assertEquals(doc, it2.docID());\n      }\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, it2.nextDoc());\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, it2.docID());\n    }\n\n    // nextDoc / advance\n    it2 = ds2.iterator();\n    if (it2 == null) {\n      assertEquals(-1, ds1.nextSetBit(0));\n    } else {\n      for (int doc = -1; doc != DocIdSetIterator.NO_MORE_DOCS;) {\n        if (random().nextBoolean()) {\n          doc = ds1.nextSetBit(doc + 1);\n          if (doc == -1) {\n            doc = DocIdSetIterator.NO_MORE_DOCS;\n          }\n          assertEquals(doc, it2.nextDoc());\n          assertEquals(doc, it2.docID());\n        } else {\n          final int target = doc + 1 + random().nextInt(random().nextBoolean() ? 64 : Math.max(numBits / 8, 1));\n          doc = ds1.nextSetBit(target);\n          if (doc == -1) {\n            doc = DocIdSetIterator.NO_MORE_DOCS;\n          }\n          assertEquals(doc, it2.advance(target));\n          assertEquals(doc, it2.docID());\n        }\n      }\n    }\n\n    // bits()\n    final Bits bits = ds2.bits();\n    if (bits != null) {\n      // test consistency between bits and iterator\n      it2 = ds2.iterator();\n      for (int previousDoc = -1, doc = it2.nextDoc(); ; previousDoc = doc, doc = it2.nextDoc()) {\n        final int max = doc == DocIdSetIterator.NO_MORE_DOCS ? bits.length() : doc;\n        for (int i = previousDoc + 1; i < max; ++i) {\n          assertEquals(false, bits.get(i));\n        }\n        if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        assertEquals(true, bits.get(doc));\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"617d6d4150e0fb2acef8980ce51e3b8e628fb200","date":1580326292,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/BaseDocIdSetTestCase#assertEquals(int,BitSet,T).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/BaseDocIdSetTestCase#assertEquals(int,BitSet,T).mjava","sourceNew":"  /** Assert that the content of the {@link DocIdSet} is the same as the content of the {@link BitSet}. */\n  public void assertEquals(int numBits, BitSet ds1, T ds2) throws IOException {\n    Random random = random();\n    // nextDoc\n    DocIdSetIterator it2 = ds2.iterator();\n    if (it2 == null) {\n      assertEquals(-1, ds1.nextSetBit(0));\n    } else {\n      assertEquals(-1, it2.docID());\n      for (int doc = ds1.nextSetBit(0); doc != -1; doc = ds1.nextSetBit(doc + 1)) {\n        assertEquals(doc, it2.nextDoc());\n        assertEquals(doc, it2.docID());\n      }\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, it2.nextDoc());\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, it2.docID());\n    }\n\n    // nextDoc / advance\n    it2 = ds2.iterator();\n    if (it2 == null) {\n      assertEquals(-1, ds1.nextSetBit(0));\n    } else {\n      for (int doc = -1; doc != DocIdSetIterator.NO_MORE_DOCS;) {\n        if (random.nextBoolean()) {\n          doc = ds1.nextSetBit(doc + 1);\n          if (doc == -1) {\n            doc = DocIdSetIterator.NO_MORE_DOCS;\n          }\n          assertEquals(doc, it2.nextDoc());\n          assertEquals(doc, it2.docID());\n        } else {\n          final int target = doc + 1 + random.nextInt(random.nextBoolean() ? 64 : Math.max(numBits / 8, 1));\n          doc = ds1.nextSetBit(target);\n          if (doc == -1) {\n            doc = DocIdSetIterator.NO_MORE_DOCS;\n          }\n          assertEquals(doc, it2.advance(target));\n          assertEquals(doc, it2.docID());\n        }\n      }\n    }\n\n    // bits()\n    final Bits bits = ds2.bits();\n    if (bits != null) {\n      // test consistency between bits and iterator\n      it2 = ds2.iterator();\n      for (int previousDoc = -1, doc = it2.nextDoc(); ; previousDoc = doc, doc = it2.nextDoc()) {\n        final int max = doc == DocIdSetIterator.NO_MORE_DOCS ? bits.length() : doc;\n        for (int i = previousDoc + 1; i < max; ++i) {\n          assertEquals(false, bits.get(i));\n        }\n        if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        assertEquals(true, bits.get(doc));\n      }\n    }\n  }\n\n","sourceOld":"  /** Assert that the content of the {@link DocIdSet} is the same as the content of the {@link BitSet}. */\n  public void assertEquals(int numBits, BitSet ds1, T ds2) throws IOException {\n    // nextDoc\n    DocIdSetIterator it2 = ds2.iterator();\n    if (it2 == null) {\n      assertEquals(-1, ds1.nextSetBit(0));\n    } else {\n      assertEquals(-1, it2.docID());\n      for (int doc = ds1.nextSetBit(0); doc != -1; doc = ds1.nextSetBit(doc + 1)) {\n        assertEquals(doc, it2.nextDoc());\n        assertEquals(doc, it2.docID());\n      }\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, it2.nextDoc());\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, it2.docID());\n    }\n\n    // nextDoc / advance\n    it2 = ds2.iterator();\n    if (it2 == null) {\n      assertEquals(-1, ds1.nextSetBit(0));\n    } else {\n      for (int doc = -1; doc != DocIdSetIterator.NO_MORE_DOCS;) {\n        if (random().nextBoolean()) {\n          doc = ds1.nextSetBit(doc + 1);\n          if (doc == -1) {\n            doc = DocIdSetIterator.NO_MORE_DOCS;\n          }\n          assertEquals(doc, it2.nextDoc());\n          assertEquals(doc, it2.docID());\n        } else {\n          final int target = doc + 1 + random().nextInt(random().nextBoolean() ? 64 : Math.max(numBits / 8, 1));\n          doc = ds1.nextSetBit(target);\n          if (doc == -1) {\n            doc = DocIdSetIterator.NO_MORE_DOCS;\n          }\n          assertEquals(doc, it2.advance(target));\n          assertEquals(doc, it2.docID());\n        }\n      }\n    }\n\n    // bits()\n    final Bits bits = ds2.bits();\n    if (bits != null) {\n      // test consistency between bits and iterator\n      it2 = ds2.iterator();\n      for (int previousDoc = -1, doc = it2.nextDoc(); ; previousDoc = doc, doc = it2.nextDoc()) {\n        final int max = doc == DocIdSetIterator.NO_MORE_DOCS ? bits.length() : doc;\n        for (int i = previousDoc + 1; i < max; ++i) {\n          assertEquals(false, bits.get(i));\n        }\n        if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        assertEquals(true, bits.get(doc));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"37a0f60745e53927c4c876cfe5b5a58170f0646c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7581da3051efe8071ae92ac7eca27a270bc4611e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"617d6d4150e0fb2acef8980ce51e3b8e628fb200":["7581da3051efe8071ae92ac7eca27a270bc4611e"],"7581da3051efe8071ae92ac7eca27a270bc4611e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["617d6d4150e0fb2acef8980ce51e3b8e628fb200"]},"commit2Childs":{"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["37a0f60745e53927c4c876cfe5b5a58170f0646c","7581da3051efe8071ae92ac7eca27a270bc4611e"],"7581da3051efe8071ae92ac7eca27a270bc4611e":["37a0f60745e53927c4c876cfe5b5a58170f0646c","617d6d4150e0fb2acef8980ce51e3b8e628fb200"],"617d6d4150e0fb2acef8980ce51e3b8e628fb200":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}