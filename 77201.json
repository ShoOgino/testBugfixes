{"path":"lucene/core/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy#testStallControl().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy#testStallControl().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy#testStallControl().mjava","sourceNew":"  public void testStallControl() throws InterruptedException,\n      CorruptIndexException, LockObtainFailedException, IOException {\n\n    int[] numThreads = new int[] { 4 + random.nextInt(8), 1 };\n    final int numDocumentsToIndex = 50 + random.nextInt(50);\n    for (int i = 0; i < numThreads.length; i++) {\n      AtomicInteger numDocs = new AtomicInteger(numDocumentsToIndex);\n      MockDirectoryWrapper dir = newDirectory();\n      // mock a very slow harddisk sometimes here so that flushing is very slow\n      dir.setThrottling(MockDirectoryWrapper.Throttling.SOMETIMES);\n      IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer(random));\n      iwc.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      iwc.setMaxBufferedDeleteTerms(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      FlushPolicy flushPolicy = new FlushByRamOrCountsPolicy();\n      iwc.setFlushPolicy(flushPolicy);\n      \n      DocumentsWriterPerThreadPool threadPool = new ThreadAffinityDocumentsWriterThreadPool(\n          numThreads[i]== 1 ? 1 : 2);\n      iwc.setIndexerThreadPool(threadPool);\n      // with such a small ram buffer we should be stalled quiet quickly\n      iwc.setRAMBufferSizeMB(0.25);\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      IndexThread[] threads = new IndexThread[numThreads[i]];\n      for (int x = 0; x < threads.length; x++) {\n        threads[x] = new IndexThread(numDocs, numThreads[i], writer,\n            lineDocFile, false);\n        threads[x].start();\n      }\n\n      for (int x = 0; x < threads.length; x++) {\n        threads[x].join();\n      }\n      DocumentsWriter docsWriter = writer.getDocsWriter();\n      assertNotNull(docsWriter);\n      DocumentsWriterFlushControl flushControl = docsWriter.flushControl;\n      assertEquals(\" all flushes must be due\", 0, flushControl.flushBytes());\n      assertEquals(numDocumentsToIndex, writer.numDocs());\n      assertEquals(numDocumentsToIndex, writer.maxDoc());\n      if (numThreads[i] == 1) {\n        assertFalse(\n            \"single thread must not block numThreads: \" + numThreads[i],\n            docsWriter.flushControl.stallControl.hasBlocked());\n      }\n      if (docsWriter.flushControl.peakNetBytes > (2.d * iwc.getRAMBufferSizeMB() * 1024.d * 1024.d)) {\n        assertTrue(docsWriter.flushControl.stallControl.wasStalled);\n      }\n      assertActiveBytesAfter(flushControl);\n      writer.close(true);\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testStallControl() throws InterruptedException,\n      CorruptIndexException, LockObtainFailedException, IOException {\n\n    int[] numThreads = new int[] { 4 + random.nextInt(8), 1 };\n    final int numDocumentsToIndex = 50 + random.nextInt(50);\n    for (int i = 0; i < numThreads.length; i++) {\n      AtomicInteger numDocs = new AtomicInteger(numDocumentsToIndex);\n      MockDirectoryWrapper dir = newDirectory();\n      // mock a very slow harddisk sometimes here so that flushing is very slow\n      dir.setThrottling(MockDirectoryWrapper.Throttling.SOMETIMES);\n      IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer(random));\n      iwc.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      iwc.setMaxBufferedDeleteTerms(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      FlushPolicy flushPolicy = new FlushByRamOrCountsPolicy();\n      iwc.setFlushPolicy(flushPolicy);\n      \n      DocumentsWriterPerThreadPool threadPool = new ThreadAffinityDocumentsWriterThreadPool(\n          numThreads[i]== 1 ? 1 : 2);\n      iwc.setIndexerThreadPool(threadPool);\n      // with such a small ram buffer we should be stalled quiet quickly\n      iwc.setRAMBufferSizeMB(0.25);\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      IndexThread[] threads = new IndexThread[numThreads[i]];\n      for (int x = 0; x < threads.length; x++) {\n        threads[x] = new IndexThread(numDocs, numThreads[i], writer,\n            lineDocFile, false);\n        threads[x].start();\n      }\n\n      for (int x = 0; x < threads.length; x++) {\n        threads[x].join();\n      }\n      DocumentsWriter docsWriter = writer.getDocsWriter();\n      assertNotNull(docsWriter);\n      DocumentsWriterFlushControl flushControl = docsWriter.flushControl;\n      assertEquals(\" all flushes must be due\", 0, flushControl.flushBytes());\n      assertEquals(numDocumentsToIndex, writer.numDocs());\n      assertEquals(numDocumentsToIndex, writer.maxDoc());\n      if (numThreads[i] == 1) {\n        assertFalse(\n            \"single thread must not block numThreads: \" + numThreads[i],\n            docsWriter.flushControl.stallControl.hasBlocked());\n      }\n      if (docsWriter.flushControl.peakNetBytes > (2.d * iwc.getRAMBufferSizeMB() * 1024.d * 1024.d)) {\n        assertTrue(docsWriter.flushControl.stallControl.wasStalled);\n      }\n      assertActiveBytesAfter(flushControl);\n      writer.close(true);\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy#testStallControl().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy#testStallControl().mjava","sourceNew":"  public void testStallControl() throws InterruptedException,\n      CorruptIndexException, LockObtainFailedException, IOException {\n\n    int[] numThreads = new int[] { 4 + random().nextInt(8), 1 };\n    final int numDocumentsToIndex = 50 + random().nextInt(50);\n    for (int i = 0; i < numThreads.length; i++) {\n      AtomicInteger numDocs = new AtomicInteger(numDocumentsToIndex);\n      MockDirectoryWrapper dir = newDirectory();\n      // mock a very slow harddisk sometimes here so that flushing is very slow\n      dir.setThrottling(MockDirectoryWrapper.Throttling.SOMETIMES);\n      IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer(random()));\n      iwc.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      iwc.setMaxBufferedDeleteTerms(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      FlushPolicy flushPolicy = new FlushByRamOrCountsPolicy();\n      iwc.setFlushPolicy(flushPolicy);\n      \n      DocumentsWriterPerThreadPool threadPool = new ThreadAffinityDocumentsWriterThreadPool(\n          numThreads[i]== 1 ? 1 : 2);\n      iwc.setIndexerThreadPool(threadPool);\n      // with such a small ram buffer we should be stalled quiet quickly\n      iwc.setRAMBufferSizeMB(0.25);\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      IndexThread[] threads = new IndexThread[numThreads[i]];\n      for (int x = 0; x < threads.length; x++) {\n        threads[x] = new IndexThread(numDocs, numThreads[i], writer,\n            lineDocFile, false);\n        threads[x].start();\n      }\n\n      for (int x = 0; x < threads.length; x++) {\n        threads[x].join();\n      }\n      DocumentsWriter docsWriter = writer.getDocsWriter();\n      assertNotNull(docsWriter);\n      DocumentsWriterFlushControl flushControl = docsWriter.flushControl;\n      assertEquals(\" all flushes must be due\", 0, flushControl.flushBytes());\n      assertEquals(numDocumentsToIndex, writer.numDocs());\n      assertEquals(numDocumentsToIndex, writer.maxDoc());\n      if (numThreads[i] == 1) {\n        assertFalse(\n            \"single thread must not block numThreads: \" + numThreads[i],\n            docsWriter.flushControl.stallControl.hasBlocked());\n      }\n      if (docsWriter.flushControl.peakNetBytes > (2.d * iwc.getRAMBufferSizeMB() * 1024.d * 1024.d)) {\n        assertTrue(docsWriter.flushControl.stallControl.wasStalled);\n      }\n      assertActiveBytesAfter(flushControl);\n      writer.close(true);\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testStallControl() throws InterruptedException,\n      CorruptIndexException, LockObtainFailedException, IOException {\n\n    int[] numThreads = new int[] { 4 + random.nextInt(8), 1 };\n    final int numDocumentsToIndex = 50 + random.nextInt(50);\n    for (int i = 0; i < numThreads.length; i++) {\n      AtomicInteger numDocs = new AtomicInteger(numDocumentsToIndex);\n      MockDirectoryWrapper dir = newDirectory();\n      // mock a very slow harddisk sometimes here so that flushing is very slow\n      dir.setThrottling(MockDirectoryWrapper.Throttling.SOMETIMES);\n      IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer(random));\n      iwc.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      iwc.setMaxBufferedDeleteTerms(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      FlushPolicy flushPolicy = new FlushByRamOrCountsPolicy();\n      iwc.setFlushPolicy(flushPolicy);\n      \n      DocumentsWriterPerThreadPool threadPool = new ThreadAffinityDocumentsWriterThreadPool(\n          numThreads[i]== 1 ? 1 : 2);\n      iwc.setIndexerThreadPool(threadPool);\n      // with such a small ram buffer we should be stalled quiet quickly\n      iwc.setRAMBufferSizeMB(0.25);\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      IndexThread[] threads = new IndexThread[numThreads[i]];\n      for (int x = 0; x < threads.length; x++) {\n        threads[x] = new IndexThread(numDocs, numThreads[i], writer,\n            lineDocFile, false);\n        threads[x].start();\n      }\n\n      for (int x = 0; x < threads.length; x++) {\n        threads[x].join();\n      }\n      DocumentsWriter docsWriter = writer.getDocsWriter();\n      assertNotNull(docsWriter);\n      DocumentsWriterFlushControl flushControl = docsWriter.flushControl;\n      assertEquals(\" all flushes must be due\", 0, flushControl.flushBytes());\n      assertEquals(numDocumentsToIndex, writer.numDocs());\n      assertEquals(numDocumentsToIndex, writer.maxDoc());\n      if (numThreads[i] == 1) {\n        assertFalse(\n            \"single thread must not block numThreads: \" + numThreads[i],\n            docsWriter.flushControl.stallControl.hasBlocked());\n      }\n      if (docsWriter.flushControl.peakNetBytes > (2.d * iwc.getRAMBufferSizeMB() * 1024.d * 1024.d)) {\n        assertTrue(docsWriter.flushControl.stallControl.wasStalled);\n      }\n      assertActiveBytesAfter(flushControl);\n      writer.close(true);\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5e38f40562eb7c165ae08ab2367a031883138354","date":1340287338,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy#testStallControl().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy#testStallControl().mjava","sourceNew":"  public void testStallControl() throws InterruptedException,\n      CorruptIndexException, LockObtainFailedException, IOException {\n\n    int[] numThreads = new int[] { 4 + random().nextInt(8), 1 };\n    final int numDocumentsToIndex = 50 + random().nextInt(50);\n    for (int i = 0; i < numThreads.length; i++) {\n      AtomicInteger numDocs = new AtomicInteger(numDocumentsToIndex);\n      MockDirectoryWrapper dir = newDirectory();\n      // mock a very slow harddisk sometimes here so that flushing is very slow\n      dir.setThrottling(MockDirectoryWrapper.Throttling.SOMETIMES);\n      IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer(random()));\n      iwc.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      iwc.setMaxBufferedDeleteTerms(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      FlushPolicy flushPolicy = new FlushByRamOrCountsPolicy();\n      iwc.setFlushPolicy(flushPolicy);\n      \n      DocumentsWriterPerThreadPool threadPool = new ThreadAffinityDocumentsWriterThreadPool(\n          numThreads[i]== 1 ? 1 : 2);\n      iwc.setIndexerThreadPool(threadPool);\n      // with such a small ram buffer we should be stalled quiet quickly\n      iwc.setRAMBufferSizeMB(0.25);\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      IndexThread[] threads = new IndexThread[numThreads[i]];\n      for (int x = 0; x < threads.length; x++) {\n        threads[x] = new IndexThread(numDocs, numThreads[i], writer,\n            lineDocFile, false);\n        threads[x].start();\n      }\n\n      for (int x = 0; x < threads.length; x++) {\n        threads[x].join();\n      }\n      DocumentsWriter docsWriter = writer.getDocsWriter();\n      assertNotNull(docsWriter);\n      DocumentsWriterFlushControl flushControl = docsWriter.flushControl;\n      assertEquals(\" all flushes must be due\", 0, flushControl.flushBytes());\n      assertEquals(numDocumentsToIndex, writer.numDocs());\n      assertEquals(numDocumentsToIndex, writer.maxDoc());\n      if (numThreads[i] == 1) {\n        assertFalse(\n            \"single thread must not block numThreads: \" + numThreads[i],\n            docsWriter.flushControl.stallControl.hasBlocked());\n      }\n      if (docsWriter.flushControl.peakNetBytes > (2.d * iwc.getRAMBufferSizeMB() * 1024.d * 1024.d)) {\n        assertTrue(docsWriter.flushControl.stallControl.wasStalled());\n      }\n      assertActiveBytesAfter(flushControl);\n      writer.close(true);\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testStallControl() throws InterruptedException,\n      CorruptIndexException, LockObtainFailedException, IOException {\n\n    int[] numThreads = new int[] { 4 + random().nextInt(8), 1 };\n    final int numDocumentsToIndex = 50 + random().nextInt(50);\n    for (int i = 0; i < numThreads.length; i++) {\n      AtomicInteger numDocs = new AtomicInteger(numDocumentsToIndex);\n      MockDirectoryWrapper dir = newDirectory();\n      // mock a very slow harddisk sometimes here so that flushing is very slow\n      dir.setThrottling(MockDirectoryWrapper.Throttling.SOMETIMES);\n      IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer(random()));\n      iwc.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      iwc.setMaxBufferedDeleteTerms(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      FlushPolicy flushPolicy = new FlushByRamOrCountsPolicy();\n      iwc.setFlushPolicy(flushPolicy);\n      \n      DocumentsWriterPerThreadPool threadPool = new ThreadAffinityDocumentsWriterThreadPool(\n          numThreads[i]== 1 ? 1 : 2);\n      iwc.setIndexerThreadPool(threadPool);\n      // with such a small ram buffer we should be stalled quiet quickly\n      iwc.setRAMBufferSizeMB(0.25);\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      IndexThread[] threads = new IndexThread[numThreads[i]];\n      for (int x = 0; x < threads.length; x++) {\n        threads[x] = new IndexThread(numDocs, numThreads[i], writer,\n            lineDocFile, false);\n        threads[x].start();\n      }\n\n      for (int x = 0; x < threads.length; x++) {\n        threads[x].join();\n      }\n      DocumentsWriter docsWriter = writer.getDocsWriter();\n      assertNotNull(docsWriter);\n      DocumentsWriterFlushControl flushControl = docsWriter.flushControl;\n      assertEquals(\" all flushes must be due\", 0, flushControl.flushBytes());\n      assertEquals(numDocumentsToIndex, writer.numDocs());\n      assertEquals(numDocumentsToIndex, writer.maxDoc());\n      if (numThreads[i] == 1) {\n        assertFalse(\n            \"single thread must not block numThreads: \" + numThreads[i],\n            docsWriter.flushControl.stallControl.hasBlocked());\n      }\n      if (docsWriter.flushControl.peakNetBytes > (2.d * iwc.getRAMBufferSizeMB() * 1024.d * 1024.d)) {\n        assertTrue(docsWriter.flushControl.stallControl.wasStalled);\n      }\n      assertActiveBytesAfter(flushControl);\n      writer.close(true);\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy#testStallControl().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy#testStallControl().mjava","sourceNew":"  public void testStallControl() throws InterruptedException, IOException {\n\n    int[] numThreads = new int[] { 4 + random().nextInt(8), 1 };\n    final int numDocumentsToIndex = 50 + random().nextInt(50);\n    for (int i = 0; i < numThreads.length; i++) {\n      AtomicInteger numDocs = new AtomicInteger(numDocumentsToIndex);\n      MockDirectoryWrapper dir = newDirectory();\n      // mock a very slow harddisk sometimes here so that flushing is very slow\n      dir.setThrottling(MockDirectoryWrapper.Throttling.SOMETIMES);\n      IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer(random()));\n      iwc.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      iwc.setMaxBufferedDeleteTerms(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      FlushPolicy flushPolicy = new FlushByRamOrCountsPolicy();\n      iwc.setFlushPolicy(flushPolicy);\n      \n      DocumentsWriterPerThreadPool threadPool = new ThreadAffinityDocumentsWriterThreadPool(\n          numThreads[i]== 1 ? 1 : 2);\n      iwc.setIndexerThreadPool(threadPool);\n      // with such a small ram buffer we should be stalled quiet quickly\n      iwc.setRAMBufferSizeMB(0.25);\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      IndexThread[] threads = new IndexThread[numThreads[i]];\n      for (int x = 0; x < threads.length; x++) {\n        threads[x] = new IndexThread(numDocs, numThreads[i], writer,\n            lineDocFile, false);\n        threads[x].start();\n      }\n\n      for (int x = 0; x < threads.length; x++) {\n        threads[x].join();\n      }\n      DocumentsWriter docsWriter = writer.getDocsWriter();\n      assertNotNull(docsWriter);\n      DocumentsWriterFlushControl flushControl = docsWriter.flushControl;\n      assertEquals(\" all flushes must be due\", 0, flushControl.flushBytes());\n      assertEquals(numDocumentsToIndex, writer.numDocs());\n      assertEquals(numDocumentsToIndex, writer.maxDoc());\n      if (numThreads[i] == 1) {\n        assertFalse(\n            \"single thread must not block numThreads: \" + numThreads[i],\n            docsWriter.flushControl.stallControl.hasBlocked());\n      }\n      if (docsWriter.flushControl.peakNetBytes > (2.d * iwc.getRAMBufferSizeMB() * 1024.d * 1024.d)) {\n        assertTrue(docsWriter.flushControl.stallControl.wasStalled());\n      }\n      assertActiveBytesAfter(flushControl);\n      writer.close(true);\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testStallControl() throws InterruptedException,\n      CorruptIndexException, LockObtainFailedException, IOException {\n\n    int[] numThreads = new int[] { 4 + random().nextInt(8), 1 };\n    final int numDocumentsToIndex = 50 + random().nextInt(50);\n    for (int i = 0; i < numThreads.length; i++) {\n      AtomicInteger numDocs = new AtomicInteger(numDocumentsToIndex);\n      MockDirectoryWrapper dir = newDirectory();\n      // mock a very slow harddisk sometimes here so that flushing is very slow\n      dir.setThrottling(MockDirectoryWrapper.Throttling.SOMETIMES);\n      IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer(random()));\n      iwc.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      iwc.setMaxBufferedDeleteTerms(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      FlushPolicy flushPolicy = new FlushByRamOrCountsPolicy();\n      iwc.setFlushPolicy(flushPolicy);\n      \n      DocumentsWriterPerThreadPool threadPool = new ThreadAffinityDocumentsWriterThreadPool(\n          numThreads[i]== 1 ? 1 : 2);\n      iwc.setIndexerThreadPool(threadPool);\n      // with such a small ram buffer we should be stalled quiet quickly\n      iwc.setRAMBufferSizeMB(0.25);\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      IndexThread[] threads = new IndexThread[numThreads[i]];\n      for (int x = 0; x < threads.length; x++) {\n        threads[x] = new IndexThread(numDocs, numThreads[i], writer,\n            lineDocFile, false);\n        threads[x].start();\n      }\n\n      for (int x = 0; x < threads.length; x++) {\n        threads[x].join();\n      }\n      DocumentsWriter docsWriter = writer.getDocsWriter();\n      assertNotNull(docsWriter);\n      DocumentsWriterFlushControl flushControl = docsWriter.flushControl;\n      assertEquals(\" all flushes must be due\", 0, flushControl.flushBytes());\n      assertEquals(numDocumentsToIndex, writer.numDocs());\n      assertEquals(numDocumentsToIndex, writer.maxDoc());\n      if (numThreads[i] == 1) {\n        assertFalse(\n            \"single thread must not block numThreads: \" + numThreads[i],\n            docsWriter.flushControl.stallControl.hasBlocked());\n      }\n      if (docsWriter.flushControl.peakNetBytes > (2.d * iwc.getRAMBufferSizeMB() * 1024.d * 1024.d)) {\n        assertTrue(docsWriter.flushControl.stallControl.wasStalled());\n      }\n      assertActiveBytesAfter(flushControl);\n      writer.close(true);\n      dir.close();\n    }\n  }\n\n","bugFix":["32f306edd62f81390a6e263e8b913f089f3e98a1","d2ed1b9b7b46829fe3199afe9a8bc203f201b175"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy#testStallControl().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy#testStallControl().mjava","sourceNew":"  public void testStallControl() throws InterruptedException, IOException {\n\n    int[] numThreads = new int[] { 4 + random().nextInt(8), 1 };\n    final int numDocumentsToIndex = 50 + random().nextInt(50);\n    for (int i = 0; i < numThreads.length; i++) {\n      AtomicInteger numDocs = new AtomicInteger(numDocumentsToIndex);\n      MockDirectoryWrapper dir = newDirectory();\n      // mock a very slow harddisk sometimes here so that flushing is very slow\n      dir.setThrottling(MockDirectoryWrapper.Throttling.SOMETIMES);\n      IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer(random()));\n      iwc.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      iwc.setMaxBufferedDeleteTerms(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      FlushPolicy flushPolicy = new FlushByRamOrCountsPolicy();\n      iwc.setFlushPolicy(flushPolicy);\n      \n      DocumentsWriterPerThreadPool threadPool = new ThreadAffinityDocumentsWriterThreadPool(\n          numThreads[i]== 1 ? 1 : 2);\n      iwc.setIndexerThreadPool(threadPool);\n      // with such a small ram buffer we should be stalled quiet quickly\n      iwc.setRAMBufferSizeMB(0.25);\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      IndexThread[] threads = new IndexThread[numThreads[i]];\n      for (int x = 0; x < threads.length; x++) {\n        threads[x] = new IndexThread(numDocs, numThreads[i], writer,\n            lineDocFile, false);\n        threads[x].start();\n      }\n\n      for (int x = 0; x < threads.length; x++) {\n        threads[x].join();\n      }\n      DocumentsWriter docsWriter = writer.getDocsWriter();\n      assertNotNull(docsWriter);\n      DocumentsWriterFlushControl flushControl = docsWriter.flushControl;\n      assertEquals(\" all flushes must be due\", 0, flushControl.flushBytes());\n      assertEquals(numDocumentsToIndex, writer.numDocs());\n      assertEquals(numDocumentsToIndex, writer.maxDoc());\n      if (numThreads[i] == 1) {\n        assertFalse(\n            \"single thread must not block numThreads: \" + numThreads[i],\n            docsWriter.flushControl.stallControl.hasBlocked());\n      }\n      if (docsWriter.flushControl.peakNetBytes > (2.d * iwc.getRAMBufferSizeMB() * 1024.d * 1024.d)) {\n        assertTrue(docsWriter.flushControl.stallControl.wasStalled());\n      }\n      assertActiveBytesAfter(flushControl);\n      writer.close(true);\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testStallControl() throws InterruptedException,\n      CorruptIndexException, LockObtainFailedException, IOException {\n\n    int[] numThreads = new int[] { 4 + random().nextInt(8), 1 };\n    final int numDocumentsToIndex = 50 + random().nextInt(50);\n    for (int i = 0; i < numThreads.length; i++) {\n      AtomicInteger numDocs = new AtomicInteger(numDocumentsToIndex);\n      MockDirectoryWrapper dir = newDirectory();\n      // mock a very slow harddisk sometimes here so that flushing is very slow\n      dir.setThrottling(MockDirectoryWrapper.Throttling.SOMETIMES);\n      IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer(random()));\n      iwc.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      iwc.setMaxBufferedDeleteTerms(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      FlushPolicy flushPolicy = new FlushByRamOrCountsPolicy();\n      iwc.setFlushPolicy(flushPolicy);\n      \n      DocumentsWriterPerThreadPool threadPool = new ThreadAffinityDocumentsWriterThreadPool(\n          numThreads[i]== 1 ? 1 : 2);\n      iwc.setIndexerThreadPool(threadPool);\n      // with such a small ram buffer we should be stalled quiet quickly\n      iwc.setRAMBufferSizeMB(0.25);\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      IndexThread[] threads = new IndexThread[numThreads[i]];\n      for (int x = 0; x < threads.length; x++) {\n        threads[x] = new IndexThread(numDocs, numThreads[i], writer,\n            lineDocFile, false);\n        threads[x].start();\n      }\n\n      for (int x = 0; x < threads.length; x++) {\n        threads[x].join();\n      }\n      DocumentsWriter docsWriter = writer.getDocsWriter();\n      assertNotNull(docsWriter);\n      DocumentsWriterFlushControl flushControl = docsWriter.flushControl;\n      assertEquals(\" all flushes must be due\", 0, flushControl.flushBytes());\n      assertEquals(numDocumentsToIndex, writer.numDocs());\n      assertEquals(numDocumentsToIndex, writer.maxDoc());\n      if (numThreads[i] == 1) {\n        assertFalse(\n            \"single thread must not block numThreads: \" + numThreads[i],\n            docsWriter.flushControl.stallControl.hasBlocked());\n      }\n      if (docsWriter.flushControl.peakNetBytes > (2.d * iwc.getRAMBufferSizeMB() * 1024.d * 1024.d)) {\n        assertTrue(docsWriter.flushControl.stallControl.wasStalled);\n      }\n      assertActiveBytesAfter(flushControl);\n      writer.close(true);\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d19974432be9aed28ee7dca73bdf01d139e763a9","date":1342822166,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy#testStallControl().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy#testStallControl().mjava","sourceNew":"  public void testStallControl() throws InterruptedException, IOException {\n\n    int[] numThreads = new int[] { 4 + random().nextInt(8), 1 };\n    final int numDocumentsToIndex = 50 + random().nextInt(50);\n    for (int i = 0; i < numThreads.length; i++) {\n      AtomicInteger numDocs = new AtomicInteger(numDocumentsToIndex);\n      MockDirectoryWrapper dir = newMockDirectory();\n      // mock a very slow harddisk sometimes here so that flushing is very slow\n      dir.setThrottling(MockDirectoryWrapper.Throttling.SOMETIMES);\n      IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer(random()));\n      iwc.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      iwc.setMaxBufferedDeleteTerms(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      FlushPolicy flushPolicy = new FlushByRamOrCountsPolicy();\n      iwc.setFlushPolicy(flushPolicy);\n      \n      DocumentsWriterPerThreadPool threadPool = new ThreadAffinityDocumentsWriterThreadPool(\n          numThreads[i]== 1 ? 1 : 2);\n      iwc.setIndexerThreadPool(threadPool);\n      // with such a small ram buffer we should be stalled quiet quickly\n      iwc.setRAMBufferSizeMB(0.25);\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      IndexThread[] threads = new IndexThread[numThreads[i]];\n      for (int x = 0; x < threads.length; x++) {\n        threads[x] = new IndexThread(numDocs, numThreads[i], writer,\n            lineDocFile, false);\n        threads[x].start();\n      }\n\n      for (int x = 0; x < threads.length; x++) {\n        threads[x].join();\n      }\n      DocumentsWriter docsWriter = writer.getDocsWriter();\n      assertNotNull(docsWriter);\n      DocumentsWriterFlushControl flushControl = docsWriter.flushControl;\n      assertEquals(\" all flushes must be due\", 0, flushControl.flushBytes());\n      assertEquals(numDocumentsToIndex, writer.numDocs());\n      assertEquals(numDocumentsToIndex, writer.maxDoc());\n      if (numThreads[i] == 1) {\n        assertFalse(\n            \"single thread must not block numThreads: \" + numThreads[i],\n            docsWriter.flushControl.stallControl.hasBlocked());\n      }\n      if (docsWriter.flushControl.peakNetBytes > (2.d * iwc.getRAMBufferSizeMB() * 1024.d * 1024.d)) {\n        assertTrue(docsWriter.flushControl.stallControl.wasStalled());\n      }\n      assertActiveBytesAfter(flushControl);\n      writer.close(true);\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testStallControl() throws InterruptedException, IOException {\n\n    int[] numThreads = new int[] { 4 + random().nextInt(8), 1 };\n    final int numDocumentsToIndex = 50 + random().nextInt(50);\n    for (int i = 0; i < numThreads.length; i++) {\n      AtomicInteger numDocs = new AtomicInteger(numDocumentsToIndex);\n      MockDirectoryWrapper dir = newDirectory();\n      // mock a very slow harddisk sometimes here so that flushing is very slow\n      dir.setThrottling(MockDirectoryWrapper.Throttling.SOMETIMES);\n      IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer(random()));\n      iwc.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      iwc.setMaxBufferedDeleteTerms(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      FlushPolicy flushPolicy = new FlushByRamOrCountsPolicy();\n      iwc.setFlushPolicy(flushPolicy);\n      \n      DocumentsWriterPerThreadPool threadPool = new ThreadAffinityDocumentsWriterThreadPool(\n          numThreads[i]== 1 ? 1 : 2);\n      iwc.setIndexerThreadPool(threadPool);\n      // with such a small ram buffer we should be stalled quiet quickly\n      iwc.setRAMBufferSizeMB(0.25);\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      IndexThread[] threads = new IndexThread[numThreads[i]];\n      for (int x = 0; x < threads.length; x++) {\n        threads[x] = new IndexThread(numDocs, numThreads[i], writer,\n            lineDocFile, false);\n        threads[x].start();\n      }\n\n      for (int x = 0; x < threads.length; x++) {\n        threads[x].join();\n      }\n      DocumentsWriter docsWriter = writer.getDocsWriter();\n      assertNotNull(docsWriter);\n      DocumentsWriterFlushControl flushControl = docsWriter.flushControl;\n      assertEquals(\" all flushes must be due\", 0, flushControl.flushBytes());\n      assertEquals(numDocumentsToIndex, writer.numDocs());\n      assertEquals(numDocumentsToIndex, writer.maxDoc());\n      if (numThreads[i] == 1) {\n        assertFalse(\n            \"single thread must not block numThreads: \" + numThreads[i],\n            docsWriter.flushControl.stallControl.hasBlocked());\n      }\n      if (docsWriter.flushControl.peakNetBytes > (2.d * iwc.getRAMBufferSizeMB() * 1024.d * 1024.d)) {\n        assertTrue(docsWriter.flushControl.stallControl.wasStalled());\n      }\n      assertActiveBytesAfter(flushControl);\n      writer.close(true);\n      dir.close();\n    }\n  }\n\n","bugFix":["d2ed1b9b7b46829fe3199afe9a8bc203f201b175"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","date":1343059585,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy#testStallControl().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy#testStallControl().mjava","sourceNew":"  public void testStallControl() throws InterruptedException, IOException {\n\n    int[] numThreads = new int[] { 4 + random().nextInt(8), 1 };\n    final int numDocumentsToIndex = 50 + random().nextInt(50);\n    for (int i = 0; i < numThreads.length; i++) {\n      AtomicInteger numDocs = new AtomicInteger(numDocumentsToIndex);\n      MockDirectoryWrapper dir = newMockDirectory();\n      // mock a very slow harddisk sometimes here so that flushing is very slow\n      dir.setThrottling(MockDirectoryWrapper.Throttling.SOMETIMES);\n      IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer(random()));\n      iwc.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      iwc.setMaxBufferedDeleteTerms(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      FlushPolicy flushPolicy = new FlushByRamOrCountsPolicy();\n      iwc.setFlushPolicy(flushPolicy);\n      \n      DocumentsWriterPerThreadPool threadPool = new ThreadAffinityDocumentsWriterThreadPool(\n          numThreads[i]== 1 ? 1 : 2);\n      iwc.setIndexerThreadPool(threadPool);\n      // with such a small ram buffer we should be stalled quiet quickly\n      iwc.setRAMBufferSizeMB(0.25);\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      IndexThread[] threads = new IndexThread[numThreads[i]];\n      for (int x = 0; x < threads.length; x++) {\n        threads[x] = new IndexThread(numDocs, numThreads[i], writer,\n            lineDocFile, false);\n        threads[x].start();\n      }\n\n      for (int x = 0; x < threads.length; x++) {\n        threads[x].join();\n      }\n      DocumentsWriter docsWriter = writer.getDocsWriter();\n      assertNotNull(docsWriter);\n      DocumentsWriterFlushControl flushControl = docsWriter.flushControl;\n      assertEquals(\" all flushes must be due\", 0, flushControl.flushBytes());\n      assertEquals(numDocumentsToIndex, writer.numDocs());\n      assertEquals(numDocumentsToIndex, writer.maxDoc());\n      if (numThreads[i] == 1) {\n        assertFalse(\n            \"single thread must not block numThreads: \" + numThreads[i],\n            docsWriter.flushControl.stallControl.hasBlocked());\n      }\n      if (docsWriter.flushControl.peakNetBytes > (2.d * iwc.getRAMBufferSizeMB() * 1024.d * 1024.d)) {\n        assertTrue(docsWriter.flushControl.stallControl.wasStalled());\n      }\n      assertActiveBytesAfter(flushControl);\n      writer.close(true);\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testStallControl() throws InterruptedException, IOException {\n\n    int[] numThreads = new int[] { 4 + random().nextInt(8), 1 };\n    final int numDocumentsToIndex = 50 + random().nextInt(50);\n    for (int i = 0; i < numThreads.length; i++) {\n      AtomicInteger numDocs = new AtomicInteger(numDocumentsToIndex);\n      MockDirectoryWrapper dir = newDirectory();\n      // mock a very slow harddisk sometimes here so that flushing is very slow\n      dir.setThrottling(MockDirectoryWrapper.Throttling.SOMETIMES);\n      IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer(random()));\n      iwc.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      iwc.setMaxBufferedDeleteTerms(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      FlushPolicy flushPolicy = new FlushByRamOrCountsPolicy();\n      iwc.setFlushPolicy(flushPolicy);\n      \n      DocumentsWriterPerThreadPool threadPool = new ThreadAffinityDocumentsWriterThreadPool(\n          numThreads[i]== 1 ? 1 : 2);\n      iwc.setIndexerThreadPool(threadPool);\n      // with such a small ram buffer we should be stalled quiet quickly\n      iwc.setRAMBufferSizeMB(0.25);\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      IndexThread[] threads = new IndexThread[numThreads[i]];\n      for (int x = 0; x < threads.length; x++) {\n        threads[x] = new IndexThread(numDocs, numThreads[i], writer,\n            lineDocFile, false);\n        threads[x].start();\n      }\n\n      for (int x = 0; x < threads.length; x++) {\n        threads[x].join();\n      }\n      DocumentsWriter docsWriter = writer.getDocsWriter();\n      assertNotNull(docsWriter);\n      DocumentsWriterFlushControl flushControl = docsWriter.flushControl;\n      assertEquals(\" all flushes must be due\", 0, flushControl.flushBytes());\n      assertEquals(numDocumentsToIndex, writer.numDocs());\n      assertEquals(numDocumentsToIndex, writer.maxDoc());\n      if (numThreads[i] == 1) {\n        assertFalse(\n            \"single thread must not block numThreads: \" + numThreads[i],\n            docsWriter.flushControl.stallControl.hasBlocked());\n      }\n      if (docsWriter.flushControl.peakNetBytes > (2.d * iwc.getRAMBufferSizeMB() * 1024.d * 1024.d)) {\n        assertTrue(docsWriter.flushControl.stallControl.wasStalled());\n      }\n      assertActiveBytesAfter(flushControl);\n      writer.close(true);\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy#testStallControl().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy#testStallControl().mjava","sourceNew":"  public void testStallControl() throws InterruptedException, IOException {\n\n    int[] numThreads = new int[] { 4 + random().nextInt(8), 1 };\n    final int numDocumentsToIndex = 50 + random().nextInt(50);\n    for (int i = 0; i < numThreads.length; i++) {\n      AtomicInteger numDocs = new AtomicInteger(numDocumentsToIndex);\n      MockDirectoryWrapper dir = newMockDirectory();\n      // mock a very slow harddisk sometimes here so that flushing is very slow\n      dir.setThrottling(MockDirectoryWrapper.Throttling.SOMETIMES);\n      IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer(random()));\n      iwc.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      iwc.setMaxBufferedDeleteTerms(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      FlushPolicy flushPolicy = new FlushByRamOrCountsPolicy();\n      iwc.setFlushPolicy(flushPolicy);\n      \n      DocumentsWriterPerThreadPool threadPool = new ThreadAffinityDocumentsWriterThreadPool(\n          numThreads[i]== 1 ? 1 : 2);\n      iwc.setIndexerThreadPool(threadPool);\n      // with such a small ram buffer we should be stalled quiet quickly\n      iwc.setRAMBufferSizeMB(0.25);\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      IndexThread[] threads = new IndexThread[numThreads[i]];\n      for (int x = 0; x < threads.length; x++) {\n        threads[x] = new IndexThread(numDocs, numThreads[i], writer,\n            lineDocFile, false);\n        threads[x].start();\n      }\n\n      for (int x = 0; x < threads.length; x++) {\n        threads[x].join();\n      }\n      DocumentsWriter docsWriter = writer.getDocsWriter();\n      assertNotNull(docsWriter);\n      DocumentsWriterFlushControl flushControl = docsWriter.flushControl;\n      assertEquals(\" all flushes must be due\", 0, flushControl.flushBytes());\n      assertEquals(numDocumentsToIndex, writer.numDocs());\n      assertEquals(numDocumentsToIndex, writer.maxDoc());\n      if (numThreads[i] == 1) {\n        assertFalse(\n            \"single thread must not block numThreads: \" + numThreads[i],\n            docsWriter.flushControl.stallControl.hasBlocked());\n      }\n      if (docsWriter.flushControl.peakNetBytes > (2.d * iwc.getRAMBufferSizeMB() * 1024.d * 1024.d)) {\n        assertTrue(docsWriter.flushControl.stallControl.wasStalled());\n      }\n      assertActiveBytesAfter(flushControl);\n      writer.close(true);\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testStallControl() throws InterruptedException, IOException {\n\n    int[] numThreads = new int[] { 4 + random().nextInt(8), 1 };\n    final int numDocumentsToIndex = 50 + random().nextInt(50);\n    for (int i = 0; i < numThreads.length; i++) {\n      AtomicInteger numDocs = new AtomicInteger(numDocumentsToIndex);\n      MockDirectoryWrapper dir = newDirectory();\n      // mock a very slow harddisk sometimes here so that flushing is very slow\n      dir.setThrottling(MockDirectoryWrapper.Throttling.SOMETIMES);\n      IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer(random()));\n      iwc.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      iwc.setMaxBufferedDeleteTerms(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      FlushPolicy flushPolicy = new FlushByRamOrCountsPolicy();\n      iwc.setFlushPolicy(flushPolicy);\n      \n      DocumentsWriterPerThreadPool threadPool = new ThreadAffinityDocumentsWriterThreadPool(\n          numThreads[i]== 1 ? 1 : 2);\n      iwc.setIndexerThreadPool(threadPool);\n      // with such a small ram buffer we should be stalled quiet quickly\n      iwc.setRAMBufferSizeMB(0.25);\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      IndexThread[] threads = new IndexThread[numThreads[i]];\n      for (int x = 0; x < threads.length; x++) {\n        threads[x] = new IndexThread(numDocs, numThreads[i], writer,\n            lineDocFile, false);\n        threads[x].start();\n      }\n\n      for (int x = 0; x < threads.length; x++) {\n        threads[x].join();\n      }\n      DocumentsWriter docsWriter = writer.getDocsWriter();\n      assertNotNull(docsWriter);\n      DocumentsWriterFlushControl flushControl = docsWriter.flushControl;\n      assertEquals(\" all flushes must be due\", 0, flushControl.flushBytes());\n      assertEquals(numDocumentsToIndex, writer.numDocs());\n      assertEquals(numDocumentsToIndex, writer.maxDoc());\n      if (numThreads[i] == 1) {\n        assertFalse(\n            \"single thread must not block numThreads: \" + numThreads[i],\n            docsWriter.flushControl.stallControl.hasBlocked());\n      }\n      if (docsWriter.flushControl.peakNetBytes > (2.d * iwc.getRAMBufferSizeMB() * 1024.d * 1024.d)) {\n        assertTrue(docsWriter.flushControl.stallControl.wasStalled());\n      }\n      assertActiveBytesAfter(flushControl);\n      writer.close(true);\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy#testStallControl().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy#testStallControl().mjava","sourceNew":"  public void testStallControl() throws InterruptedException, IOException {\n\n    int[] numThreads = new int[] { 4 + random().nextInt(8), 1 };\n    final int numDocumentsToIndex = 50 + random().nextInt(50);\n    for (int i = 0; i < numThreads.length; i++) {\n      AtomicInteger numDocs = new AtomicInteger(numDocumentsToIndex);\n      MockDirectoryWrapper dir = newMockDirectory();\n      // mock a very slow harddisk sometimes here so that flushing is very slow\n      dir.setThrottling(MockDirectoryWrapper.Throttling.SOMETIMES);\n      IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer(random()));\n      iwc.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      iwc.setMaxBufferedDeleteTerms(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      FlushPolicy flushPolicy = new FlushByRamOrCountsPolicy();\n      iwc.setFlushPolicy(flushPolicy);\n      \n      DocumentsWriterPerThreadPool threadPool = new ThreadAffinityDocumentsWriterThreadPool(\n          numThreads[i]== 1 ? 1 : 2);\n      iwc.setIndexerThreadPool(threadPool);\n      // with such a small ram buffer we should be stalled quiet quickly\n      iwc.setRAMBufferSizeMB(0.25);\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      IndexThread[] threads = new IndexThread[numThreads[i]];\n      for (int x = 0; x < threads.length; x++) {\n        threads[x] = new IndexThread(numDocs, numThreads[i], writer,\n            lineDocFile, false);\n        threads[x].start();\n      }\n\n      for (int x = 0; x < threads.length; x++) {\n        threads[x].join();\n      }\n      DocumentsWriter docsWriter = writer.getDocsWriter();\n      assertNotNull(docsWriter);\n      DocumentsWriterFlushControl flushControl = docsWriter.flushControl;\n      assertEquals(\" all flushes must be due\", 0, flushControl.flushBytes());\n      assertEquals(numDocumentsToIndex, writer.numDocs());\n      assertEquals(numDocumentsToIndex, writer.maxDoc());\n      if (numThreads[i] == 1) {\n        assertFalse(\n            \"single thread must not block numThreads: \" + numThreads[i],\n            docsWriter.flushControl.stallControl.hasBlocked());\n      }\n      if (docsWriter.flushControl.peakNetBytes > (2.d * iwc.getRAMBufferSizeMB() * 1024.d * 1024.d)) {\n        assertTrue(docsWriter.flushControl.stallControl.wasStalled());\n      }\n      assertActiveBytesAfter(flushControl);\n      writer.shutdown();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testStallControl() throws InterruptedException, IOException {\n\n    int[] numThreads = new int[] { 4 + random().nextInt(8), 1 };\n    final int numDocumentsToIndex = 50 + random().nextInt(50);\n    for (int i = 0; i < numThreads.length; i++) {\n      AtomicInteger numDocs = new AtomicInteger(numDocumentsToIndex);\n      MockDirectoryWrapper dir = newMockDirectory();\n      // mock a very slow harddisk sometimes here so that flushing is very slow\n      dir.setThrottling(MockDirectoryWrapper.Throttling.SOMETIMES);\n      IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer(random()));\n      iwc.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      iwc.setMaxBufferedDeleteTerms(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      FlushPolicy flushPolicy = new FlushByRamOrCountsPolicy();\n      iwc.setFlushPolicy(flushPolicy);\n      \n      DocumentsWriterPerThreadPool threadPool = new ThreadAffinityDocumentsWriterThreadPool(\n          numThreads[i]== 1 ? 1 : 2);\n      iwc.setIndexerThreadPool(threadPool);\n      // with such a small ram buffer we should be stalled quiet quickly\n      iwc.setRAMBufferSizeMB(0.25);\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      IndexThread[] threads = new IndexThread[numThreads[i]];\n      for (int x = 0; x < threads.length; x++) {\n        threads[x] = new IndexThread(numDocs, numThreads[i], writer,\n            lineDocFile, false);\n        threads[x].start();\n      }\n\n      for (int x = 0; x < threads.length; x++) {\n        threads[x].join();\n      }\n      DocumentsWriter docsWriter = writer.getDocsWriter();\n      assertNotNull(docsWriter);\n      DocumentsWriterFlushControl flushControl = docsWriter.flushControl;\n      assertEquals(\" all flushes must be due\", 0, flushControl.flushBytes());\n      assertEquals(numDocumentsToIndex, writer.numDocs());\n      assertEquals(numDocumentsToIndex, writer.maxDoc());\n      if (numThreads[i] == 1) {\n        assertFalse(\n            \"single thread must not block numThreads: \" + numThreads[i],\n            docsWriter.flushControl.stallControl.hasBlocked());\n      }\n      if (docsWriter.flushControl.peakNetBytes > (2.d * iwc.getRAMBufferSizeMB() * 1024.d * 1024.d)) {\n        assertTrue(docsWriter.flushControl.stallControl.wasStalled());\n      }\n      assertActiveBytesAfter(flushControl);\n      writer.close(true);\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"839ca1793cd9a8eb5bd7c7c62918192d47972f73","date":1399544004,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy#testStallControl().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy#testStallControl().mjava","sourceNew":"  public void testStallControl() throws InterruptedException, IOException {\n\n    int[] numThreads = new int[] { 4 + random().nextInt(8), 1 };\n    final int numDocumentsToIndex = 50 + random().nextInt(50);\n    for (int i = 0; i < numThreads.length; i++) {\n      AtomicInteger numDocs = new AtomicInteger(numDocumentsToIndex);\n      MockDirectoryWrapper dir = newMockDirectory();\n      // mock a very slow harddisk sometimes here so that flushing is very slow\n      dir.setThrottling(MockDirectoryWrapper.Throttling.SOMETIMES);\n      IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer(random()));\n      iwc.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      iwc.setMaxBufferedDeleteTerms(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      FlushPolicy flushPolicy = new FlushByRamOrCountsPolicy();\n      iwc.setFlushPolicy(flushPolicy);\n      \n      DocumentsWriterPerThreadPool threadPool = new DocumentsWriterPerThreadPool(\n          numThreads[i]== 1 ? 1 : 2);\n      iwc.setIndexerThreadPool(threadPool);\n      // with such a small ram buffer we should be stalled quiet quickly\n      iwc.setRAMBufferSizeMB(0.25);\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      IndexThread[] threads = new IndexThread[numThreads[i]];\n      for (int x = 0; x < threads.length; x++) {\n        threads[x] = new IndexThread(numDocs, numThreads[i], writer,\n            lineDocFile, false);\n        threads[x].start();\n      }\n\n      for (int x = 0; x < threads.length; x++) {\n        threads[x].join();\n      }\n      DocumentsWriter docsWriter = writer.getDocsWriter();\n      assertNotNull(docsWriter);\n      DocumentsWriterFlushControl flushControl = docsWriter.flushControl;\n      assertEquals(\" all flushes must be due\", 0, flushControl.flushBytes());\n      assertEquals(numDocumentsToIndex, writer.numDocs());\n      assertEquals(numDocumentsToIndex, writer.maxDoc());\n      if (numThreads[i] == 1) {\n        assertFalse(\n            \"single thread must not block numThreads: \" + numThreads[i],\n            docsWriter.flushControl.stallControl.hasBlocked());\n      }\n      if (docsWriter.flushControl.peakNetBytes > (2.d * iwc.getRAMBufferSizeMB() * 1024.d * 1024.d)) {\n        assertTrue(docsWriter.flushControl.stallControl.wasStalled());\n      }\n      assertActiveBytesAfter(flushControl);\n      writer.shutdown();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testStallControl() throws InterruptedException, IOException {\n\n    int[] numThreads = new int[] { 4 + random().nextInt(8), 1 };\n    final int numDocumentsToIndex = 50 + random().nextInt(50);\n    for (int i = 0; i < numThreads.length; i++) {\n      AtomicInteger numDocs = new AtomicInteger(numDocumentsToIndex);\n      MockDirectoryWrapper dir = newMockDirectory();\n      // mock a very slow harddisk sometimes here so that flushing is very slow\n      dir.setThrottling(MockDirectoryWrapper.Throttling.SOMETIMES);\n      IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer(random()));\n      iwc.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      iwc.setMaxBufferedDeleteTerms(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      FlushPolicy flushPolicy = new FlushByRamOrCountsPolicy();\n      iwc.setFlushPolicy(flushPolicy);\n      \n      DocumentsWriterPerThreadPool threadPool = new ThreadAffinityDocumentsWriterThreadPool(\n          numThreads[i]== 1 ? 1 : 2);\n      iwc.setIndexerThreadPool(threadPool);\n      // with such a small ram buffer we should be stalled quiet quickly\n      iwc.setRAMBufferSizeMB(0.25);\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      IndexThread[] threads = new IndexThread[numThreads[i]];\n      for (int x = 0; x < threads.length; x++) {\n        threads[x] = new IndexThread(numDocs, numThreads[i], writer,\n            lineDocFile, false);\n        threads[x].start();\n      }\n\n      for (int x = 0; x < threads.length; x++) {\n        threads[x].join();\n      }\n      DocumentsWriter docsWriter = writer.getDocsWriter();\n      assertNotNull(docsWriter);\n      DocumentsWriterFlushControl flushControl = docsWriter.flushControl;\n      assertEquals(\" all flushes must be due\", 0, flushControl.flushBytes());\n      assertEquals(numDocumentsToIndex, writer.numDocs());\n      assertEquals(numDocumentsToIndex, writer.maxDoc());\n      if (numThreads[i] == 1) {\n        assertFalse(\n            \"single thread must not block numThreads: \" + numThreads[i],\n            docsWriter.flushControl.stallControl.hasBlocked());\n      }\n      if (docsWriter.flushControl.peakNetBytes > (2.d * iwc.getRAMBufferSizeMB() * 1024.d * 1024.d)) {\n        assertTrue(docsWriter.flushControl.stallControl.wasStalled());\n      }\n      assertActiveBytesAfter(flushControl);\n      writer.shutdown();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy#testStallControl().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy#testStallControl().mjava","sourceNew":"  public void testStallControl() throws InterruptedException, IOException {\n\n    int[] numThreads = new int[] { 4 + random().nextInt(8), 1 };\n    final int numDocumentsToIndex = 50 + random().nextInt(50);\n    for (int i = 0; i < numThreads.length; i++) {\n      AtomicInteger numDocs = new AtomicInteger(numDocumentsToIndex);\n      MockDirectoryWrapper dir = newMockDirectory();\n      // mock a very slow harddisk sometimes here so that flushing is very slow\n      dir.setThrottling(MockDirectoryWrapper.Throttling.SOMETIMES);\n      IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()));\n      iwc.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      iwc.setMaxBufferedDeleteTerms(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      FlushPolicy flushPolicy = new FlushByRamOrCountsPolicy();\n      iwc.setFlushPolicy(flushPolicy);\n      \n      DocumentsWriterPerThreadPool threadPool = new DocumentsWriterPerThreadPool(\n          numThreads[i]== 1 ? 1 : 2);\n      iwc.setIndexerThreadPool(threadPool);\n      // with such a small ram buffer we should be stalled quiet quickly\n      iwc.setRAMBufferSizeMB(0.25);\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      IndexThread[] threads = new IndexThread[numThreads[i]];\n      for (int x = 0; x < threads.length; x++) {\n        threads[x] = new IndexThread(numDocs, numThreads[i], writer,\n            lineDocFile, false);\n        threads[x].start();\n      }\n\n      for (int x = 0; x < threads.length; x++) {\n        threads[x].join();\n      }\n      DocumentsWriter docsWriter = writer.getDocsWriter();\n      assertNotNull(docsWriter);\n      DocumentsWriterFlushControl flushControl = docsWriter.flushControl;\n      assertEquals(\" all flushes must be due\", 0, flushControl.flushBytes());\n      assertEquals(numDocumentsToIndex, writer.numDocs());\n      assertEquals(numDocumentsToIndex, writer.maxDoc());\n      if (numThreads[i] == 1) {\n        assertFalse(\n            \"single thread must not block numThreads: \" + numThreads[i],\n            docsWriter.flushControl.stallControl.hasBlocked());\n      }\n      if (docsWriter.flushControl.peakNetBytes > (2.d * iwc.getRAMBufferSizeMB() * 1024.d * 1024.d)) {\n        assertTrue(docsWriter.flushControl.stallControl.wasStalled());\n      }\n      assertActiveBytesAfter(flushControl);\n      writer.shutdown();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testStallControl() throws InterruptedException, IOException {\n\n    int[] numThreads = new int[] { 4 + random().nextInt(8), 1 };\n    final int numDocumentsToIndex = 50 + random().nextInt(50);\n    for (int i = 0; i < numThreads.length; i++) {\n      AtomicInteger numDocs = new AtomicInteger(numDocumentsToIndex);\n      MockDirectoryWrapper dir = newMockDirectory();\n      // mock a very slow harddisk sometimes here so that flushing is very slow\n      dir.setThrottling(MockDirectoryWrapper.Throttling.SOMETIMES);\n      IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer(random()));\n      iwc.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      iwc.setMaxBufferedDeleteTerms(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      FlushPolicy flushPolicy = new FlushByRamOrCountsPolicy();\n      iwc.setFlushPolicy(flushPolicy);\n      \n      DocumentsWriterPerThreadPool threadPool = new DocumentsWriterPerThreadPool(\n          numThreads[i]== 1 ? 1 : 2);\n      iwc.setIndexerThreadPool(threadPool);\n      // with such a small ram buffer we should be stalled quiet quickly\n      iwc.setRAMBufferSizeMB(0.25);\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      IndexThread[] threads = new IndexThread[numThreads[i]];\n      for (int x = 0; x < threads.length; x++) {\n        threads[x] = new IndexThread(numDocs, numThreads[i], writer,\n            lineDocFile, false);\n        threads[x].start();\n      }\n\n      for (int x = 0; x < threads.length; x++) {\n        threads[x].join();\n      }\n      DocumentsWriter docsWriter = writer.getDocsWriter();\n      assertNotNull(docsWriter);\n      DocumentsWriterFlushControl flushControl = docsWriter.flushControl;\n      assertEquals(\" all flushes must be due\", 0, flushControl.flushBytes());\n      assertEquals(numDocumentsToIndex, writer.numDocs());\n      assertEquals(numDocumentsToIndex, writer.maxDoc());\n      if (numThreads[i] == 1) {\n        assertFalse(\n            \"single thread must not block numThreads: \" + numThreads[i],\n            docsWriter.flushControl.stallControl.hasBlocked());\n      }\n      if (docsWriter.flushControl.peakNetBytes > (2.d * iwc.getRAMBufferSizeMB() * 1024.d * 1024.d)) {\n        assertTrue(docsWriter.flushControl.stallControl.wasStalled());\n      }\n      assertActiveBytesAfter(flushControl);\n      writer.shutdown();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy#testStallControl().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy#testStallControl().mjava","sourceNew":"  public void testStallControl() throws InterruptedException, IOException {\n\n    int[] numThreads = new int[] { 4 + random().nextInt(8), 1 };\n    final int numDocumentsToIndex = 50 + random().nextInt(50);\n    for (int i = 0; i < numThreads.length; i++) {\n      AtomicInteger numDocs = new AtomicInteger(numDocumentsToIndex);\n      MockDirectoryWrapper dir = newMockDirectory();\n      // mock a very slow harddisk sometimes here so that flushing is very slow\n      dir.setThrottling(MockDirectoryWrapper.Throttling.SOMETIMES);\n      IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()));\n      iwc.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      iwc.setMaxBufferedDeleteTerms(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      FlushPolicy flushPolicy = new FlushByRamOrCountsPolicy();\n      iwc.setFlushPolicy(flushPolicy);\n      \n      DocumentsWriterPerThreadPool threadPool = new DocumentsWriterPerThreadPool(\n          numThreads[i]== 1 ? 1 : 2);\n      iwc.setIndexerThreadPool(threadPool);\n      // with such a small ram buffer we should be stalled quiet quickly\n      iwc.setRAMBufferSizeMB(0.25);\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      IndexThread[] threads = new IndexThread[numThreads[i]];\n      for (int x = 0; x < threads.length; x++) {\n        threads[x] = new IndexThread(numDocs, numThreads[i], writer,\n            lineDocFile, false);\n        threads[x].start();\n      }\n\n      for (int x = 0; x < threads.length; x++) {\n        threads[x].join();\n      }\n      DocumentsWriter docsWriter = writer.getDocsWriter();\n      assertNotNull(docsWriter);\n      DocumentsWriterFlushControl flushControl = docsWriter.flushControl;\n      assertEquals(\" all flushes must be due\", 0, flushControl.flushBytes());\n      assertEquals(numDocumentsToIndex, writer.numDocs());\n      assertEquals(numDocumentsToIndex, writer.maxDoc());\n      if (numThreads[i] == 1) {\n        assertFalse(\n            \"single thread must not block numThreads: \" + numThreads[i],\n            docsWriter.flushControl.stallControl.hasBlocked());\n      }\n      if (docsWriter.flushControl.peakNetBytes > (2.d * iwc.getRAMBufferSizeMB() * 1024.d * 1024.d)) {\n        assertTrue(docsWriter.flushControl.stallControl.wasStalled());\n      }\n      assertActiveBytesAfter(flushControl);\n      writer.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testStallControl() throws InterruptedException, IOException {\n\n    int[] numThreads = new int[] { 4 + random().nextInt(8), 1 };\n    final int numDocumentsToIndex = 50 + random().nextInt(50);\n    for (int i = 0; i < numThreads.length; i++) {\n      AtomicInteger numDocs = new AtomicInteger(numDocumentsToIndex);\n      MockDirectoryWrapper dir = newMockDirectory();\n      // mock a very slow harddisk sometimes here so that flushing is very slow\n      dir.setThrottling(MockDirectoryWrapper.Throttling.SOMETIMES);\n      IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()));\n      iwc.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      iwc.setMaxBufferedDeleteTerms(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      FlushPolicy flushPolicy = new FlushByRamOrCountsPolicy();\n      iwc.setFlushPolicy(flushPolicy);\n      \n      DocumentsWriterPerThreadPool threadPool = new DocumentsWriterPerThreadPool(\n          numThreads[i]== 1 ? 1 : 2);\n      iwc.setIndexerThreadPool(threadPool);\n      // with such a small ram buffer we should be stalled quiet quickly\n      iwc.setRAMBufferSizeMB(0.25);\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      IndexThread[] threads = new IndexThread[numThreads[i]];\n      for (int x = 0; x < threads.length; x++) {\n        threads[x] = new IndexThread(numDocs, numThreads[i], writer,\n            lineDocFile, false);\n        threads[x].start();\n      }\n\n      for (int x = 0; x < threads.length; x++) {\n        threads[x].join();\n      }\n      DocumentsWriter docsWriter = writer.getDocsWriter();\n      assertNotNull(docsWriter);\n      DocumentsWriterFlushControl flushControl = docsWriter.flushControl;\n      assertEquals(\" all flushes must be due\", 0, flushControl.flushBytes());\n      assertEquals(numDocumentsToIndex, writer.numDocs());\n      assertEquals(numDocumentsToIndex, writer.maxDoc());\n      if (numThreads[i] == 1) {\n        assertFalse(\n            \"single thread must not block numThreads: \" + numThreads[i],\n            docsWriter.flushControl.stallControl.hasBlocked());\n      }\n      if (docsWriter.flushControl.peakNetBytes > (2.d * iwc.getRAMBufferSizeMB() * 1024.d * 1024.d)) {\n        assertTrue(docsWriter.flushControl.stallControl.wasStalled());\n      }\n      assertActiveBytesAfter(flushControl);\n      writer.shutdown();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"121cfdcba6f99c493e7b96a919b7be40205b3d15","date":1407714151,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy#testStallControl().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy#testStallControl().mjava","sourceNew":"  public void testStallControl() throws InterruptedException, IOException {\n\n    int[] numThreads = new int[] { 4 + random().nextInt(8), 1 };\n    final int numDocumentsToIndex = 50 + random().nextInt(50);\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n    for (int i = 0; i < numThreads.length; i++) {\n      AtomicInteger numDocs = new AtomicInteger(numDocumentsToIndex);\n      MockDirectoryWrapper dir = newMockDirectory();\n      // mock a very slow harddisk sometimes here so that flushing is very slow\n      dir.setThrottling(MockDirectoryWrapper.Throttling.SOMETIMES);\n      IndexWriterConfig iwc = newIndexWriterConfig(analyzer);\n      iwc.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      iwc.setMaxBufferedDeleteTerms(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      FlushPolicy flushPolicy = new FlushByRamOrCountsPolicy();\n      iwc.setFlushPolicy(flushPolicy);\n      \n      DocumentsWriterPerThreadPool threadPool = new DocumentsWriterPerThreadPool(\n          numThreads[i]== 1 ? 1 : 2);\n      iwc.setIndexerThreadPool(threadPool);\n      // with such a small ram buffer we should be stalled quiet quickly\n      iwc.setRAMBufferSizeMB(0.25);\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      IndexThread[] threads = new IndexThread[numThreads[i]];\n      for (int x = 0; x < threads.length; x++) {\n        threads[x] = new IndexThread(numDocs, numThreads[i], writer,\n            lineDocFile, false);\n        threads[x].start();\n      }\n\n      for (int x = 0; x < threads.length; x++) {\n        threads[x].join();\n      }\n      DocumentsWriter docsWriter = writer.getDocsWriter();\n      assertNotNull(docsWriter);\n      DocumentsWriterFlushControl flushControl = docsWriter.flushControl;\n      assertEquals(\" all flushes must be due\", 0, flushControl.flushBytes());\n      assertEquals(numDocumentsToIndex, writer.numDocs());\n      assertEquals(numDocumentsToIndex, writer.maxDoc());\n      if (numThreads[i] == 1) {\n        assertFalse(\n            \"single thread must not block numThreads: \" + numThreads[i],\n            docsWriter.flushControl.stallControl.hasBlocked());\n      }\n      if (docsWriter.flushControl.peakNetBytes > (2.d * iwc.getRAMBufferSizeMB() * 1024.d * 1024.d)) {\n        assertTrue(docsWriter.flushControl.stallControl.wasStalled());\n      }\n      assertActiveBytesAfter(flushControl);\n      writer.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testStallControl() throws InterruptedException, IOException {\n\n    int[] numThreads = new int[] { 4 + random().nextInt(8), 1 };\n    final int numDocumentsToIndex = 50 + random().nextInt(50);\n    for (int i = 0; i < numThreads.length; i++) {\n      AtomicInteger numDocs = new AtomicInteger(numDocumentsToIndex);\n      MockDirectoryWrapper dir = newMockDirectory();\n      // mock a very slow harddisk sometimes here so that flushing is very slow\n      dir.setThrottling(MockDirectoryWrapper.Throttling.SOMETIMES);\n      IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()));\n      iwc.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      iwc.setMaxBufferedDeleteTerms(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      FlushPolicy flushPolicy = new FlushByRamOrCountsPolicy();\n      iwc.setFlushPolicy(flushPolicy);\n      \n      DocumentsWriterPerThreadPool threadPool = new DocumentsWriterPerThreadPool(\n          numThreads[i]== 1 ? 1 : 2);\n      iwc.setIndexerThreadPool(threadPool);\n      // with such a small ram buffer we should be stalled quiet quickly\n      iwc.setRAMBufferSizeMB(0.25);\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      IndexThread[] threads = new IndexThread[numThreads[i]];\n      for (int x = 0; x < threads.length; x++) {\n        threads[x] = new IndexThread(numDocs, numThreads[i], writer,\n            lineDocFile, false);\n        threads[x].start();\n      }\n\n      for (int x = 0; x < threads.length; x++) {\n        threads[x].join();\n      }\n      DocumentsWriter docsWriter = writer.getDocsWriter();\n      assertNotNull(docsWriter);\n      DocumentsWriterFlushControl flushControl = docsWriter.flushControl;\n      assertEquals(\" all flushes must be due\", 0, flushControl.flushBytes());\n      assertEquals(numDocumentsToIndex, writer.numDocs());\n      assertEquals(numDocumentsToIndex, writer.maxDoc());\n      if (numThreads[i] == 1) {\n        assertFalse(\n            \"single thread must not block numThreads: \" + numThreads[i],\n            docsWriter.flushControl.stallControl.hasBlocked());\n      }\n      if (docsWriter.flushControl.peakNetBytes > (2.d * iwc.getRAMBufferSizeMB() * 1024.d * 1024.d)) {\n        assertTrue(docsWriter.flushControl.stallControl.wasStalled());\n      }\n      assertActiveBytesAfter(flushControl);\n      writer.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"405c51e85c889e88c2edf4048c29449bad988884","date":1423089088,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy#testStallControl().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy#testStallControl().mjava","sourceNew":"  public void testStallControl() throws InterruptedException, IOException {\n\n    int[] numThreads = new int[] { 4 + random().nextInt(8), 1 };\n    final int numDocumentsToIndex = 50 + random().nextInt(50);\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n    for (int i = 0; i < numThreads.length; i++) {\n      AtomicInteger numDocs = new AtomicInteger(numDocumentsToIndex);\n      MockDirectoryWrapper dir = newMockDirectory();\n      // mock a very slow harddisk sometimes here so that flushing is very slow\n      dir.setThrottling(MockDirectoryWrapper.Throttling.SOMETIMES);\n      IndexWriterConfig iwc = newIndexWriterConfig(analyzer);\n      iwc.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      iwc.setMaxBufferedDeleteTerms(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      FlushPolicy flushPolicy = new FlushByRamOrCountsPolicy();\n      iwc.setFlushPolicy(flushPolicy);\n      \n      DocumentsWriterPerThreadPool threadPool = new DocumentsWriterPerThreadPool(\n          numThreads[i]== 1 ? 1 : 2);\n      iwc.setIndexerThreadPool(threadPool);\n      // with such a small ram buffer we should be stalled quite quickly\n      iwc.setRAMBufferSizeMB(0.25);\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      IndexThread[] threads = new IndexThread[numThreads[i]];\n      for (int x = 0; x < threads.length; x++) {\n        threads[x] = new IndexThread(numDocs, numThreads[i], writer,\n            lineDocFile, false);\n        threads[x].start();\n      }\n\n      for (int x = 0; x < threads.length; x++) {\n        threads[x].join();\n      }\n      DocumentsWriter docsWriter = writer.getDocsWriter();\n      assertNotNull(docsWriter);\n      DocumentsWriterFlushControl flushControl = docsWriter.flushControl;\n      assertEquals(\" all flushes must be due\", 0, flushControl.flushBytes());\n      assertEquals(numDocumentsToIndex, writer.numDocs());\n      assertEquals(numDocumentsToIndex, writer.maxDoc());\n      if (numThreads[i] == 1) {\n        assertFalse(\n            \"single thread must not block numThreads: \" + numThreads[i],\n            docsWriter.flushControl.stallControl.hasBlocked());\n      }\n      if (docsWriter.flushControl.peakNetBytes > (2.d * iwc.getRAMBufferSizeMB() * 1024.d * 1024.d)) {\n        assertTrue(docsWriter.flushControl.stallControl.wasStalled());\n      }\n      assertActiveBytesAfter(flushControl);\n      writer.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testStallControl() throws InterruptedException, IOException {\n\n    int[] numThreads = new int[] { 4 + random().nextInt(8), 1 };\n    final int numDocumentsToIndex = 50 + random().nextInt(50);\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n    for (int i = 0; i < numThreads.length; i++) {\n      AtomicInteger numDocs = new AtomicInteger(numDocumentsToIndex);\n      MockDirectoryWrapper dir = newMockDirectory();\n      // mock a very slow harddisk sometimes here so that flushing is very slow\n      dir.setThrottling(MockDirectoryWrapper.Throttling.SOMETIMES);\n      IndexWriterConfig iwc = newIndexWriterConfig(analyzer);\n      iwc.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      iwc.setMaxBufferedDeleteTerms(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      FlushPolicy flushPolicy = new FlushByRamOrCountsPolicy();\n      iwc.setFlushPolicy(flushPolicy);\n      \n      DocumentsWriterPerThreadPool threadPool = new DocumentsWriterPerThreadPool(\n          numThreads[i]== 1 ? 1 : 2);\n      iwc.setIndexerThreadPool(threadPool);\n      // with such a small ram buffer we should be stalled quiet quickly\n      iwc.setRAMBufferSizeMB(0.25);\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      IndexThread[] threads = new IndexThread[numThreads[i]];\n      for (int x = 0; x < threads.length; x++) {\n        threads[x] = new IndexThread(numDocs, numThreads[i], writer,\n            lineDocFile, false);\n        threads[x].start();\n      }\n\n      for (int x = 0; x < threads.length; x++) {\n        threads[x].join();\n      }\n      DocumentsWriter docsWriter = writer.getDocsWriter();\n      assertNotNull(docsWriter);\n      DocumentsWriterFlushControl flushControl = docsWriter.flushControl;\n      assertEquals(\" all flushes must be due\", 0, flushControl.flushBytes());\n      assertEquals(numDocumentsToIndex, writer.numDocs());\n      assertEquals(numDocumentsToIndex, writer.maxDoc());\n      if (numThreads[i] == 1) {\n        assertFalse(\n            \"single thread must not block numThreads: \" + numThreads[i],\n            docsWriter.flushControl.stallControl.hasBlocked());\n      }\n      if (docsWriter.flushControl.peakNetBytes > (2.d * iwc.getRAMBufferSizeMB() * 1024.d * 1024.d)) {\n        assertTrue(docsWriter.flushControl.stallControl.wasStalled());\n      }\n      assertActiveBytesAfter(flushControl);\n      writer.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c02b804ab16489b95429791a2d8fb0e0728354d4","date":1436551798,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy#testStallControl().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy#testStallControl().mjava","sourceNew":"  public void testStallControl() throws InterruptedException, IOException {\n\n    int[] numThreads = new int[] { 4 + random().nextInt(8), 1 };\n    final int numDocumentsToIndex = 50 + random().nextInt(50);\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n    for (int i = 0; i < numThreads.length; i++) {\n      AtomicInteger numDocs = new AtomicInteger(numDocumentsToIndex);\n      MockDirectoryWrapper dir = newMockDirectory();\n      // mock a very slow harddisk sometimes here so that flushing is very slow\n      dir.setThrottling(MockDirectoryWrapper.Throttling.SOMETIMES);\n      IndexWriterConfig iwc = newIndexWriterConfig(analyzer);\n      iwc.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      iwc.setMaxBufferedDeleteTerms(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      FlushPolicy flushPolicy = new FlushByRamOrCountsPolicy();\n      iwc.setFlushPolicy(flushPolicy);\n      \n      DocumentsWriterPerThreadPool threadPool = new DocumentsWriterPerThreadPool();\n      iwc.setIndexerThreadPool(threadPool);\n      // with such a small ram buffer we should be stalled quite quickly\n      iwc.setRAMBufferSizeMB(0.25);\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      IndexThread[] threads = new IndexThread[numThreads[i]];\n      for (int x = 0; x < threads.length; x++) {\n        threads[x] = new IndexThread(numDocs, numThreads[i], writer,\n            lineDocFile, false);\n        threads[x].start();\n      }\n\n      for (int x = 0; x < threads.length; x++) {\n        threads[x].join();\n      }\n      DocumentsWriter docsWriter = writer.getDocsWriter();\n      assertNotNull(docsWriter);\n      DocumentsWriterFlushControl flushControl = docsWriter.flushControl;\n      assertEquals(\" all flushes must be due\", 0, flushControl.flushBytes());\n      assertEquals(numDocumentsToIndex, writer.numDocs());\n      assertEquals(numDocumentsToIndex, writer.maxDoc());\n      if (numThreads[i] == 1) {\n        assertFalse(\n            \"single thread must not block numThreads: \" + numThreads[i],\n            docsWriter.flushControl.stallControl.hasBlocked());\n      }\n      if (docsWriter.flushControl.peakNetBytes > (2.d * iwc.getRAMBufferSizeMB() * 1024.d * 1024.d)) {\n        assertTrue(docsWriter.flushControl.stallControl.wasStalled());\n      }\n      assertActiveBytesAfter(flushControl);\n      writer.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testStallControl() throws InterruptedException, IOException {\n\n    int[] numThreads = new int[] { 4 + random().nextInt(8), 1 };\n    final int numDocumentsToIndex = 50 + random().nextInt(50);\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n    for (int i = 0; i < numThreads.length; i++) {\n      AtomicInteger numDocs = new AtomicInteger(numDocumentsToIndex);\n      MockDirectoryWrapper dir = newMockDirectory();\n      // mock a very slow harddisk sometimes here so that flushing is very slow\n      dir.setThrottling(MockDirectoryWrapper.Throttling.SOMETIMES);\n      IndexWriterConfig iwc = newIndexWriterConfig(analyzer);\n      iwc.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      iwc.setMaxBufferedDeleteTerms(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      FlushPolicy flushPolicy = new FlushByRamOrCountsPolicy();\n      iwc.setFlushPolicy(flushPolicy);\n      \n      DocumentsWriterPerThreadPool threadPool = new DocumentsWriterPerThreadPool(\n          numThreads[i]== 1 ? 1 : 2);\n      iwc.setIndexerThreadPool(threadPool);\n      // with such a small ram buffer we should be stalled quite quickly\n      iwc.setRAMBufferSizeMB(0.25);\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      IndexThread[] threads = new IndexThread[numThreads[i]];\n      for (int x = 0; x < threads.length; x++) {\n        threads[x] = new IndexThread(numDocs, numThreads[i], writer,\n            lineDocFile, false);\n        threads[x].start();\n      }\n\n      for (int x = 0; x < threads.length; x++) {\n        threads[x].join();\n      }\n      DocumentsWriter docsWriter = writer.getDocsWriter();\n      assertNotNull(docsWriter);\n      DocumentsWriterFlushControl flushControl = docsWriter.flushControl;\n      assertEquals(\" all flushes must be due\", 0, flushControl.flushBytes());\n      assertEquals(numDocumentsToIndex, writer.numDocs());\n      assertEquals(numDocumentsToIndex, writer.maxDoc());\n      if (numThreads[i] == 1) {\n        assertFalse(\n            \"single thread must not block numThreads: \" + numThreads[i],\n            docsWriter.flushControl.stallControl.hasBlocked());\n      }\n      if (docsWriter.flushControl.peakNetBytes > (2.d * iwc.getRAMBufferSizeMB() * 1024.d * 1024.d)) {\n        assertTrue(docsWriter.flushControl.stallControl.wasStalled());\n      }\n      assertActiveBytesAfter(flushControl);\n      writer.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4363cd33f6eff7fb4753574a441e2d18c1022a4","date":1498067235,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy#testStallControl().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy#testStallControl().mjava","sourceNew":"  public void testStallControl() throws InterruptedException, IOException {\n\n    int[] numThreads = new int[] { 4 + random().nextInt(8), 1 };\n    final int numDocumentsToIndex = 50 + random().nextInt(50);\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n    for (int i = 0; i < numThreads.length; i++) {\n      AtomicInteger numDocs = new AtomicInteger(numDocumentsToIndex);\n      MockDirectoryWrapper dir = newMockDirectory();\n      // mock a very slow harddisk sometimes here so that flushing is very slow\n      dir.setThrottling(MockDirectoryWrapper.Throttling.SOMETIMES);\n      IndexWriterConfig iwc = newIndexWriterConfig(analyzer);\n      iwc.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      FlushPolicy flushPolicy = new FlushByRamOrCountsPolicy();\n      iwc.setFlushPolicy(flushPolicy);\n      \n      DocumentsWriterPerThreadPool threadPool = new DocumentsWriterPerThreadPool();\n      iwc.setIndexerThreadPool(threadPool);\n      // with such a small ram buffer we should be stalled quite quickly\n      iwc.setRAMBufferSizeMB(0.25);\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      IndexThread[] threads = new IndexThread[numThreads[i]];\n      for (int x = 0; x < threads.length; x++) {\n        threads[x] = new IndexThread(numDocs, numThreads[i], writer,\n            lineDocFile, false);\n        threads[x].start();\n      }\n\n      for (int x = 0; x < threads.length; x++) {\n        threads[x].join();\n      }\n      DocumentsWriter docsWriter = writer.getDocsWriter();\n      assertNotNull(docsWriter);\n      DocumentsWriterFlushControl flushControl = docsWriter.flushControl;\n      assertEquals(\" all flushes must be due\", 0, flushControl.flushBytes());\n      assertEquals(numDocumentsToIndex, writer.numDocs());\n      assertEquals(numDocumentsToIndex, writer.maxDoc());\n      if (numThreads[i] == 1) {\n        assertFalse(\n            \"single thread must not block numThreads: \" + numThreads[i],\n            docsWriter.flushControl.stallControl.hasBlocked());\n      }\n      if (docsWriter.flushControl.peakNetBytes > (2.d * iwc.getRAMBufferSizeMB() * 1024.d * 1024.d)) {\n        assertTrue(docsWriter.flushControl.stallControl.wasStalled());\n      }\n      assertActiveBytesAfter(flushControl);\n      writer.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testStallControl() throws InterruptedException, IOException {\n\n    int[] numThreads = new int[] { 4 + random().nextInt(8), 1 };\n    final int numDocumentsToIndex = 50 + random().nextInt(50);\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n    for (int i = 0; i < numThreads.length; i++) {\n      AtomicInteger numDocs = new AtomicInteger(numDocumentsToIndex);\n      MockDirectoryWrapper dir = newMockDirectory();\n      // mock a very slow harddisk sometimes here so that flushing is very slow\n      dir.setThrottling(MockDirectoryWrapper.Throttling.SOMETIMES);\n      IndexWriterConfig iwc = newIndexWriterConfig(analyzer);\n      iwc.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      iwc.setMaxBufferedDeleteTerms(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      FlushPolicy flushPolicy = new FlushByRamOrCountsPolicy();\n      iwc.setFlushPolicy(flushPolicy);\n      \n      DocumentsWriterPerThreadPool threadPool = new DocumentsWriterPerThreadPool();\n      iwc.setIndexerThreadPool(threadPool);\n      // with such a small ram buffer we should be stalled quite quickly\n      iwc.setRAMBufferSizeMB(0.25);\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      IndexThread[] threads = new IndexThread[numThreads[i]];\n      for (int x = 0; x < threads.length; x++) {\n        threads[x] = new IndexThread(numDocs, numThreads[i], writer,\n            lineDocFile, false);\n        threads[x].start();\n      }\n\n      for (int x = 0; x < threads.length; x++) {\n        threads[x].join();\n      }\n      DocumentsWriter docsWriter = writer.getDocsWriter();\n      assertNotNull(docsWriter);\n      DocumentsWriterFlushControl flushControl = docsWriter.flushControl;\n      assertEquals(\" all flushes must be due\", 0, flushControl.flushBytes());\n      assertEquals(numDocumentsToIndex, writer.numDocs());\n      assertEquals(numDocumentsToIndex, writer.maxDoc());\n      if (numThreads[i] == 1) {\n        assertFalse(\n            \"single thread must not block numThreads: \" + numThreads[i],\n            docsWriter.flushControl.stallControl.hasBlocked());\n      }\n      if (docsWriter.flushControl.peakNetBytes > (2.d * iwc.getRAMBufferSizeMB() * 1024.d * 1024.d)) {\n        assertTrue(docsWriter.flushControl.stallControl.wasStalled());\n      }\n      assertActiveBytesAfter(flushControl);\n      writer.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy#testStallControl().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy#testStallControl().mjava","sourceNew":"  public void testStallControl() throws InterruptedException, IOException {\n\n    int[] numThreads = new int[] { 4 + random().nextInt(8), 1 };\n    final int numDocumentsToIndex = 50 + random().nextInt(50);\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n    for (int i = 0; i < numThreads.length; i++) {\n      AtomicInteger numDocs = new AtomicInteger(numDocumentsToIndex);\n      MockDirectoryWrapper dir = newMockDirectory();\n      // mock a very slow harddisk sometimes here so that flushing is very slow\n      dir.setThrottling(MockDirectoryWrapper.Throttling.SOMETIMES);\n      IndexWriterConfig iwc = newIndexWriterConfig(analyzer);\n      iwc.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      FlushPolicy flushPolicy = new FlushByRamOrCountsPolicy();\n      iwc.setFlushPolicy(flushPolicy);\n      \n      DocumentsWriterPerThreadPool threadPool = new DocumentsWriterPerThreadPool();\n      iwc.setIndexerThreadPool(threadPool);\n      // with such a small ram buffer we should be stalled quite quickly\n      iwc.setRAMBufferSizeMB(0.25);\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      IndexThread[] threads = new IndexThread[numThreads[i]];\n      for (int x = 0; x < threads.length; x++) {\n        threads[x] = new IndexThread(numDocs, numThreads[i], writer,\n            lineDocFile, false);\n        threads[x].start();\n      }\n\n      for (int x = 0; x < threads.length; x++) {\n        threads[x].join();\n      }\n      DocumentsWriter docsWriter = writer.getDocsWriter();\n      assertNotNull(docsWriter);\n      DocumentsWriterFlushControl flushControl = docsWriter.flushControl;\n      assertEquals(\" all flushes must be due\", 0, flushControl.flushBytes());\n      assertEquals(numDocumentsToIndex, writer.numDocs());\n      assertEquals(numDocumentsToIndex, writer.maxDoc());\n      if (numThreads[i] == 1) {\n        assertFalse(\n            \"single thread must not block numThreads: \" + numThreads[i],\n            docsWriter.flushControl.stallControl.hasBlocked());\n      }\n      if (docsWriter.flushControl.peakNetBytes > (2.d * iwc.getRAMBufferSizeMB() * 1024.d * 1024.d)) {\n        assertTrue(docsWriter.flushControl.stallControl.wasStalled());\n      }\n      assertActiveBytesAfter(flushControl);\n      writer.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testStallControl() throws InterruptedException, IOException {\n\n    int[] numThreads = new int[] { 4 + random().nextInt(8), 1 };\n    final int numDocumentsToIndex = 50 + random().nextInt(50);\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n    for (int i = 0; i < numThreads.length; i++) {\n      AtomicInteger numDocs = new AtomicInteger(numDocumentsToIndex);\n      MockDirectoryWrapper dir = newMockDirectory();\n      // mock a very slow harddisk sometimes here so that flushing is very slow\n      dir.setThrottling(MockDirectoryWrapper.Throttling.SOMETIMES);\n      IndexWriterConfig iwc = newIndexWriterConfig(analyzer);\n      iwc.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      iwc.setMaxBufferedDeleteTerms(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      FlushPolicy flushPolicy = new FlushByRamOrCountsPolicy();\n      iwc.setFlushPolicy(flushPolicy);\n      \n      DocumentsWriterPerThreadPool threadPool = new DocumentsWriterPerThreadPool();\n      iwc.setIndexerThreadPool(threadPool);\n      // with such a small ram buffer we should be stalled quite quickly\n      iwc.setRAMBufferSizeMB(0.25);\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      IndexThread[] threads = new IndexThread[numThreads[i]];\n      for (int x = 0; x < threads.length; x++) {\n        threads[x] = new IndexThread(numDocs, numThreads[i], writer,\n            lineDocFile, false);\n        threads[x].start();\n      }\n\n      for (int x = 0; x < threads.length; x++) {\n        threads[x].join();\n      }\n      DocumentsWriter docsWriter = writer.getDocsWriter();\n      assertNotNull(docsWriter);\n      DocumentsWriterFlushControl flushControl = docsWriter.flushControl;\n      assertEquals(\" all flushes must be due\", 0, flushControl.flushBytes());\n      assertEquals(numDocumentsToIndex, writer.numDocs());\n      assertEquals(numDocumentsToIndex, writer.maxDoc());\n      if (numThreads[i] == 1) {\n        assertFalse(\n            \"single thread must not block numThreads: \" + numThreads[i],\n            docsWriter.flushControl.stallControl.hasBlocked());\n      }\n      if (docsWriter.flushControl.peakNetBytes > (2.d * iwc.getRAMBufferSizeMB() * 1024.d * 1024.d)) {\n        assertTrue(docsWriter.flushControl.stallControl.wasStalled());\n      }\n      assertActiveBytesAfter(flushControl);\n      writer.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy#testStallControl().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy#testStallControl().mjava","sourceNew":"  public void testStallControl() throws InterruptedException, IOException {\n\n    int[] numThreads = new int[] { 4 + random().nextInt(8), 1 };\n    final int numDocumentsToIndex = 50 + random().nextInt(50);\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n    for (int i = 0; i < numThreads.length; i++) {\n      AtomicInteger numDocs = new AtomicInteger(numDocumentsToIndex);\n      MockDirectoryWrapper dir = newMockDirectory();\n      // mock a very slow harddisk sometimes here so that flushing is very slow\n      dir.setThrottling(MockDirectoryWrapper.Throttling.SOMETIMES);\n      IndexWriterConfig iwc = newIndexWriterConfig(analyzer);\n      iwc.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      FlushPolicy flushPolicy = new FlushByRamOrCountsPolicy();\n      iwc.setFlushPolicy(flushPolicy);\n      \n      DocumentsWriterPerThreadPool threadPool = new DocumentsWriterPerThreadPool();\n      iwc.setIndexerThreadPool(threadPool);\n      // with such a small ram buffer we should be stalled quite quickly\n      iwc.setRAMBufferSizeMB(0.25);\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      IndexThread[] threads = new IndexThread[numThreads[i]];\n      for (int x = 0; x < threads.length; x++) {\n        threads[x] = new IndexThread(numDocs, numThreads[i], writer,\n            lineDocFile, false);\n        threads[x].start();\n      }\n\n      for (int x = 0; x < threads.length; x++) {\n        threads[x].join();\n      }\n      DocumentsWriter docsWriter = writer.getDocsWriter();\n      assertNotNull(docsWriter);\n      DocumentsWriterFlushControl flushControl = docsWriter.flushControl;\n      assertEquals(\" all flushes must be due\", 0, flushControl.flushBytes());\n      assertEquals(numDocumentsToIndex, writer.numDocs());\n      assertEquals(numDocumentsToIndex, writer.maxDoc());\n      if (numThreads[i] == 1) {\n        assertFalse(\n            \"single thread must not block numThreads: \" + numThreads[i],\n            docsWriter.flushControl.stallControl.hasBlocked());\n      }\n      if (docsWriter.flushControl.peakNetBytes > (2.d * iwc.getRAMBufferSizeMB() * 1024.d * 1024.d)) {\n        assertTrue(docsWriter.flushControl.stallControl.wasStalled());\n      }\n      assertActiveBytesAfter(flushControl);\n      writer.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testStallControl() throws InterruptedException, IOException {\n\n    int[] numThreads = new int[] { 4 + random().nextInt(8), 1 };\n    final int numDocumentsToIndex = 50 + random().nextInt(50);\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n    for (int i = 0; i < numThreads.length; i++) {\n      AtomicInteger numDocs = new AtomicInteger(numDocumentsToIndex);\n      MockDirectoryWrapper dir = newMockDirectory();\n      // mock a very slow harddisk sometimes here so that flushing is very slow\n      dir.setThrottling(MockDirectoryWrapper.Throttling.SOMETIMES);\n      IndexWriterConfig iwc = newIndexWriterConfig(analyzer);\n      iwc.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      iwc.setMaxBufferedDeleteTerms(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      FlushPolicy flushPolicy = new FlushByRamOrCountsPolicy();\n      iwc.setFlushPolicy(flushPolicy);\n      \n      DocumentsWriterPerThreadPool threadPool = new DocumentsWriterPerThreadPool();\n      iwc.setIndexerThreadPool(threadPool);\n      // with such a small ram buffer we should be stalled quite quickly\n      iwc.setRAMBufferSizeMB(0.25);\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      IndexThread[] threads = new IndexThread[numThreads[i]];\n      for (int x = 0; x < threads.length; x++) {\n        threads[x] = new IndexThread(numDocs, numThreads[i], writer,\n            lineDocFile, false);\n        threads[x].start();\n      }\n\n      for (int x = 0; x < threads.length; x++) {\n        threads[x].join();\n      }\n      DocumentsWriter docsWriter = writer.getDocsWriter();\n      assertNotNull(docsWriter);\n      DocumentsWriterFlushControl flushControl = docsWriter.flushControl;\n      assertEquals(\" all flushes must be due\", 0, flushControl.flushBytes());\n      assertEquals(numDocumentsToIndex, writer.numDocs());\n      assertEquals(numDocumentsToIndex, writer.maxDoc());\n      if (numThreads[i] == 1) {\n        assertFalse(\n            \"single thread must not block numThreads: \" + numThreads[i],\n            docsWriter.flushControl.stallControl.hasBlocked());\n      }\n      if (docsWriter.flushControl.peakNetBytes > (2.d * iwc.getRAMBufferSizeMB() * 1024.d * 1024.d)) {\n        assertTrue(docsWriter.flushControl.stallControl.wasStalled());\n      }\n      assertActiveBytesAfter(flushControl);\n      writer.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"130574de275b668a12d70a2c1d9cfc72fbfb76f6","date":1535620307,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy#testStallControl().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy#testStallControl().mjava","sourceNew":"  public void testStallControl() throws InterruptedException, IOException {\n\n    int[] numThreads = new int[] { 4 + random().nextInt(8), 1 };\n    final int numDocumentsToIndex = 50 + random().nextInt(50);\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n    for (int i = 0; i < numThreads.length; i++) {\n      AtomicInteger numDocs = new AtomicInteger(numDocumentsToIndex);\n      MockDirectoryWrapper dir = newMockDirectory();\n      // mock a very slow harddisk sometimes here so that flushing is very slow\n      dir.setThrottling(MockDirectoryWrapper.Throttling.SOMETIMES);\n      IndexWriterConfig iwc = newIndexWriterConfig(analyzer);\n      iwc.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      FlushPolicy flushPolicy = new FlushByRamOrCountsPolicy();\n      iwc.setFlushPolicy(flushPolicy);\n      \n      DocumentsWriterPerThreadPool threadPool = new DocumentsWriterPerThreadPool();\n      iwc.setIndexerThreadPool(threadPool);\n      // with such a small ram buffer we should be stalled quite quickly\n      iwc.setRAMBufferSizeMB(0.25);\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      IndexThread[] threads = new IndexThread[numThreads[i]];\n      for (int x = 0; x < threads.length; x++) {\n        threads[x] = new IndexThread(numDocs, numThreads[i], writer,\n            lineDocFile, false);\n        threads[x].start();\n      }\n\n      for (int x = 0; x < threads.length; x++) {\n        threads[x].join();\n      }\n      DocumentsWriter docsWriter = writer.getDocsWriter();\n      assertNotNull(docsWriter);\n      DocumentsWriterFlushControl flushControl = docsWriter.flushControl;\n      assertEquals(\" all flushes must be due\", 0, writer.getFlushingBytes());\n      assertEquals(numDocumentsToIndex, writer.numDocs());\n      assertEquals(numDocumentsToIndex, writer.maxDoc());\n      if (numThreads[i] == 1) {\n        assertFalse(\n            \"single thread must not block numThreads: \" + numThreads[i],\n            docsWriter.flushControl.stallControl.hasBlocked());\n      }\n      if (docsWriter.flushControl.peakNetBytes > (2.d * iwc.getRAMBufferSizeMB() * 1024.d * 1024.d)) {\n        assertTrue(docsWriter.flushControl.stallControl.wasStalled());\n      }\n      assertActiveBytesAfter(flushControl);\n      writer.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testStallControl() throws InterruptedException, IOException {\n\n    int[] numThreads = new int[] { 4 + random().nextInt(8), 1 };\n    final int numDocumentsToIndex = 50 + random().nextInt(50);\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n    for (int i = 0; i < numThreads.length; i++) {\n      AtomicInteger numDocs = new AtomicInteger(numDocumentsToIndex);\n      MockDirectoryWrapper dir = newMockDirectory();\n      // mock a very slow harddisk sometimes here so that flushing is very slow\n      dir.setThrottling(MockDirectoryWrapper.Throttling.SOMETIMES);\n      IndexWriterConfig iwc = newIndexWriterConfig(analyzer);\n      iwc.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      FlushPolicy flushPolicy = new FlushByRamOrCountsPolicy();\n      iwc.setFlushPolicy(flushPolicy);\n      \n      DocumentsWriterPerThreadPool threadPool = new DocumentsWriterPerThreadPool();\n      iwc.setIndexerThreadPool(threadPool);\n      // with such a small ram buffer we should be stalled quite quickly\n      iwc.setRAMBufferSizeMB(0.25);\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      IndexThread[] threads = new IndexThread[numThreads[i]];\n      for (int x = 0; x < threads.length; x++) {\n        threads[x] = new IndexThread(numDocs, numThreads[i], writer,\n            lineDocFile, false);\n        threads[x].start();\n      }\n\n      for (int x = 0; x < threads.length; x++) {\n        threads[x].join();\n      }\n      DocumentsWriter docsWriter = writer.getDocsWriter();\n      assertNotNull(docsWriter);\n      DocumentsWriterFlushControl flushControl = docsWriter.flushControl;\n      assertEquals(\" all flushes must be due\", 0, flushControl.flushBytes());\n      assertEquals(numDocumentsToIndex, writer.numDocs());\n      assertEquals(numDocumentsToIndex, writer.maxDoc());\n      if (numThreads[i] == 1) {\n        assertFalse(\n            \"single thread must not block numThreads: \" + numThreads[i],\n            docsWriter.flushControl.stallControl.hasBlocked());\n      }\n      if (docsWriter.flushControl.peakNetBytes > (2.d * iwc.getRAMBufferSizeMB() * 1024.d * 1024.d)) {\n        assertTrue(docsWriter.flushControl.stallControl.wasStalled());\n      }\n      assertActiveBytesAfter(flushControl);\n      writer.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"feb4029567b43f074ed7b6eb8fb126d355075dfd","date":1544812585,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy#testStallControl().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy#testStallControl().mjava","sourceNew":"  public void testStallControl() throws InterruptedException, IOException {\n\n    int[] numThreads = new int[] { 4 + random().nextInt(8), 1 };\n    final int numDocumentsToIndex = 50 + random().nextInt(50);\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n    for (int i = 0; i < numThreads.length; i++) {\n      AtomicInteger numDocs = new AtomicInteger(numDocumentsToIndex);\n      MockDirectoryWrapper dir = newMockDirectory();\n      // mock a very slow harddisk sometimes here so that flushing is very slow\n      dir.setThrottling(MockDirectoryWrapper.Throttling.SOMETIMES);\n      IndexWriterConfig iwc = newIndexWriterConfig(analyzer);\n      iwc.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      FlushPolicy flushPolicy = new FlushByRamOrCountsPolicy();\n      iwc.setFlushPolicy(flushPolicy);\n      \n      DocumentsWriterPerThreadPool threadPool = new DocumentsWriterPerThreadPool();\n      iwc.setIndexerThreadPool(threadPool);\n      // with such a small ram buffer we should be stalled quite quickly\n      iwc.setRAMBufferSizeMB(0.25);\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      IndexThread[] threads = new IndexThread[numThreads[i]];\n      for (int x = 0; x < threads.length; x++) {\n        threads[x] = new IndexThread(numDocs, numThreads[i], writer,\n            lineDocFile, false);\n        threads[x].start();\n      }\n\n      for (int x = 0; x < threads.length; x++) {\n        threads[x].join();\n      }\n      DocumentsWriter docsWriter = writer.getDocsWriter();\n      assertNotNull(docsWriter);\n      DocumentsWriterFlushControl flushControl = docsWriter.flushControl;\n      assertEquals(\" all flushes must be due\", 0, writer.getFlushingBytes());\n      assertEquals(numDocumentsToIndex, writer.getDocStats().numDocs);\n      assertEquals(numDocumentsToIndex, writer.getDocStats().maxDoc);\n      if (numThreads[i] == 1) {\n        assertFalse(\n            \"single thread must not block numThreads: \" + numThreads[i],\n            docsWriter.flushControl.stallControl.hasBlocked());\n      }\n      if (docsWriter.flushControl.peakNetBytes > (2.d * iwc.getRAMBufferSizeMB() * 1024.d * 1024.d)) {\n        assertTrue(docsWriter.flushControl.stallControl.wasStalled());\n      }\n      assertActiveBytesAfter(flushControl);\n      writer.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testStallControl() throws InterruptedException, IOException {\n\n    int[] numThreads = new int[] { 4 + random().nextInt(8), 1 };\n    final int numDocumentsToIndex = 50 + random().nextInt(50);\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n    for (int i = 0; i < numThreads.length; i++) {\n      AtomicInteger numDocs = new AtomicInteger(numDocumentsToIndex);\n      MockDirectoryWrapper dir = newMockDirectory();\n      // mock a very slow harddisk sometimes here so that flushing is very slow\n      dir.setThrottling(MockDirectoryWrapper.Throttling.SOMETIMES);\n      IndexWriterConfig iwc = newIndexWriterConfig(analyzer);\n      iwc.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      FlushPolicy flushPolicy = new FlushByRamOrCountsPolicy();\n      iwc.setFlushPolicy(flushPolicy);\n      \n      DocumentsWriterPerThreadPool threadPool = new DocumentsWriterPerThreadPool();\n      iwc.setIndexerThreadPool(threadPool);\n      // with such a small ram buffer we should be stalled quite quickly\n      iwc.setRAMBufferSizeMB(0.25);\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      IndexThread[] threads = new IndexThread[numThreads[i]];\n      for (int x = 0; x < threads.length; x++) {\n        threads[x] = new IndexThread(numDocs, numThreads[i], writer,\n            lineDocFile, false);\n        threads[x].start();\n      }\n\n      for (int x = 0; x < threads.length; x++) {\n        threads[x].join();\n      }\n      DocumentsWriter docsWriter = writer.getDocsWriter();\n      assertNotNull(docsWriter);\n      DocumentsWriterFlushControl flushControl = docsWriter.flushControl;\n      assertEquals(\" all flushes must be due\", 0, writer.getFlushingBytes());\n      assertEquals(numDocumentsToIndex, writer.numDocs());\n      assertEquals(numDocumentsToIndex, writer.maxDoc());\n      if (numThreads[i] == 1) {\n        assertFalse(\n            \"single thread must not block numThreads: \" + numThreads[i],\n            docsWriter.flushControl.stallControl.hasBlocked());\n      }\n      if (docsWriter.flushControl.peakNetBytes > (2.d * iwc.getRAMBufferSizeMB() * 1024.d * 1024.d)) {\n        assertTrue(docsWriter.flushControl.stallControl.wasStalled());\n      }\n      assertActiveBytesAfter(flushControl);\n      writer.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"264935965977b4a9e2f3920420647072c9c49176","date":1586600626,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy#testStallControl().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy#testStallControl().mjava","sourceNew":"  public void testStallControl() throws InterruptedException, IOException {\n\n    int[] numThreads = new int[] { 4 + random().nextInt(8), 1 };\n    final int numDocumentsToIndex = 50 + random().nextInt(50);\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n    for (int i = 0; i < numThreads.length; i++) {\n      AtomicInteger numDocs = new AtomicInteger(numDocumentsToIndex);\n      MockDirectoryWrapper dir = newMockDirectory();\n      // mock a very slow harddisk sometimes here so that flushing is very slow\n      dir.setThrottling(MockDirectoryWrapper.Throttling.SOMETIMES);\n      IndexWriterConfig iwc = newIndexWriterConfig(analyzer);\n      iwc.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      FlushPolicy flushPolicy = new FlushByRamOrCountsPolicy();\n      iwc.setFlushPolicy(flushPolicy);\n      \n      // with such a small ram buffer we should be stalled quite quickly\n      iwc.setRAMBufferSizeMB(0.25);\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      IndexThread[] threads = new IndexThread[numThreads[i]];\n      for (int x = 0; x < threads.length; x++) {\n        threads[x] = new IndexThread(numDocs, numThreads[i], writer,\n            lineDocFile, false);\n        threads[x].start();\n      }\n\n      for (int x = 0; x < threads.length; x++) {\n        threads[x].join();\n      }\n      DocumentsWriter docsWriter = writer.getDocsWriter();\n      assertNotNull(docsWriter);\n      DocumentsWriterFlushControl flushControl = docsWriter.flushControl;\n      assertEquals(\" all flushes must be due\", 0, writer.getFlushingBytes());\n      assertEquals(numDocumentsToIndex, writer.getDocStats().numDocs);\n      assertEquals(numDocumentsToIndex, writer.getDocStats().maxDoc);\n      if (numThreads[i] == 1) {\n        assertFalse(\n            \"single thread must not block numThreads: \" + numThreads[i],\n            docsWriter.flushControl.stallControl.hasBlocked());\n      }\n      if (docsWriter.flushControl.peakNetBytes > (2.d * iwc.getRAMBufferSizeMB() * 1024.d * 1024.d)) {\n        assertTrue(docsWriter.flushControl.stallControl.wasStalled());\n      }\n      assertActiveBytesAfter(flushControl);\n      writer.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testStallControl() throws InterruptedException, IOException {\n\n    int[] numThreads = new int[] { 4 + random().nextInt(8), 1 };\n    final int numDocumentsToIndex = 50 + random().nextInt(50);\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n    for (int i = 0; i < numThreads.length; i++) {\n      AtomicInteger numDocs = new AtomicInteger(numDocumentsToIndex);\n      MockDirectoryWrapper dir = newMockDirectory();\n      // mock a very slow harddisk sometimes here so that flushing is very slow\n      dir.setThrottling(MockDirectoryWrapper.Throttling.SOMETIMES);\n      IndexWriterConfig iwc = newIndexWriterConfig(analyzer);\n      iwc.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      FlushPolicy flushPolicy = new FlushByRamOrCountsPolicy();\n      iwc.setFlushPolicy(flushPolicy);\n      \n      DocumentsWriterPerThreadPool threadPool = new DocumentsWriterPerThreadPool();\n      iwc.setIndexerThreadPool(threadPool);\n      // with such a small ram buffer we should be stalled quite quickly\n      iwc.setRAMBufferSizeMB(0.25);\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      IndexThread[] threads = new IndexThread[numThreads[i]];\n      for (int x = 0; x < threads.length; x++) {\n        threads[x] = new IndexThread(numDocs, numThreads[i], writer,\n            lineDocFile, false);\n        threads[x].start();\n      }\n\n      for (int x = 0; x < threads.length; x++) {\n        threads[x].join();\n      }\n      DocumentsWriter docsWriter = writer.getDocsWriter();\n      assertNotNull(docsWriter);\n      DocumentsWriterFlushControl flushControl = docsWriter.flushControl;\n      assertEquals(\" all flushes must be due\", 0, writer.getFlushingBytes());\n      assertEquals(numDocumentsToIndex, writer.getDocStats().numDocs);\n      assertEquals(numDocumentsToIndex, writer.getDocStats().maxDoc);\n      if (numThreads[i] == 1) {\n        assertFalse(\n            \"single thread must not block numThreads: \" + numThreads[i],\n            docsWriter.flushControl.stallControl.hasBlocked());\n      }\n      if (docsWriter.flushControl.peakNetBytes > (2.d * iwc.getRAMBufferSizeMB() * 1024.d * 1024.d)) {\n        assertTrue(docsWriter.flushControl.stallControl.wasStalled());\n      }\n      assertActiveBytesAfter(flushControl);\n      writer.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a428f5314daaabf8eab7c50bdc3bc14e6cd1aa2","date":1588002560,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy#testStallControl().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy#testStallControl().mjava","sourceNew":"  public void testStallControl() throws InterruptedException, IOException {\n\n    int[] numThreads = new int[] { 4 + random().nextInt(8), 1 };\n    final int numDocumentsToIndex = 50 + random().nextInt(50);\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n    for (int i = 0; i < numThreads.length; i++) {\n      AtomicInteger numDocs = new AtomicInteger(numDocumentsToIndex);\n      MockDirectoryWrapper dir = newMockDirectory();\n      // mock a very slow harddisk sometimes here so that flushing is very slow\n      dir.setThrottling(MockDirectoryWrapper.Throttling.SOMETIMES);\n      IndexWriterConfig iwc = newIndexWriterConfig(analyzer);\n      iwc.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      FlushPolicy flushPolicy = new FlushByRamOrCountsPolicy();\n      iwc.setFlushPolicy(flushPolicy);\n      \n      // with such a small ram buffer we should be stalled quite quickly\n      iwc.setRAMBufferSizeMB(0.25);\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      IndexThread[] threads = new IndexThread[numThreads[i]];\n      for (int x = 0; x < threads.length; x++) {\n        threads[x] = new IndexThread(numDocs, numThreads[i], writer,\n            lineDocFile, false);\n        threads[x].start();\n      }\n\n      for (int x = 0; x < threads.length; x++) {\n        threads[x].join();\n      }\n      DocumentsWriter docsWriter = writer.getDocsWriter();\n      assertNotNull(docsWriter);\n      DocumentsWriterFlushControl flushControl = docsWriter.flushControl;\n      assertEquals(\" all flushes must be due\", 0, writer.getFlushingBytes());\n      assertEquals(numDocumentsToIndex, writer.getDocStats().numDocs);\n      assertEquals(numDocumentsToIndex, writer.getDocStats().maxDoc);\n      if (numThreads[i] == 1) {\n        assertFalse(\n            \"single thread must not block numThreads: \" + numThreads[i],\n            docsWriter.flushControl.stallControl.hasBlocked());\n      }\n      if (docsWriter.flushControl.getPeakNetBytes() > (2.d * iwc.getRAMBufferSizeMB() * 1024.d * 1024.d)) {\n        assertTrue(docsWriter.flushControl.stallControl.wasStalled());\n      }\n      assertActiveBytesAfter(flushControl);\n      writer.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testStallControl() throws InterruptedException, IOException {\n\n    int[] numThreads = new int[] { 4 + random().nextInt(8), 1 };\n    final int numDocumentsToIndex = 50 + random().nextInt(50);\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n    for (int i = 0; i < numThreads.length; i++) {\n      AtomicInteger numDocs = new AtomicInteger(numDocumentsToIndex);\n      MockDirectoryWrapper dir = newMockDirectory();\n      // mock a very slow harddisk sometimes here so that flushing is very slow\n      dir.setThrottling(MockDirectoryWrapper.Throttling.SOMETIMES);\n      IndexWriterConfig iwc = newIndexWriterConfig(analyzer);\n      iwc.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      FlushPolicy flushPolicy = new FlushByRamOrCountsPolicy();\n      iwc.setFlushPolicy(flushPolicy);\n      \n      // with such a small ram buffer we should be stalled quite quickly\n      iwc.setRAMBufferSizeMB(0.25);\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      IndexThread[] threads = new IndexThread[numThreads[i]];\n      for (int x = 0; x < threads.length; x++) {\n        threads[x] = new IndexThread(numDocs, numThreads[i], writer,\n            lineDocFile, false);\n        threads[x].start();\n      }\n\n      for (int x = 0; x < threads.length; x++) {\n        threads[x].join();\n      }\n      DocumentsWriter docsWriter = writer.getDocsWriter();\n      assertNotNull(docsWriter);\n      DocumentsWriterFlushControl flushControl = docsWriter.flushControl;\n      assertEquals(\" all flushes must be due\", 0, writer.getFlushingBytes());\n      assertEquals(numDocumentsToIndex, writer.getDocStats().numDocs);\n      assertEquals(numDocumentsToIndex, writer.getDocStats().maxDoc);\n      if (numThreads[i] == 1) {\n        assertFalse(\n            \"single thread must not block numThreads: \" + numThreads[i],\n            docsWriter.flushControl.stallControl.hasBlocked());\n      }\n      if (docsWriter.flushControl.peakNetBytes > (2.d * iwc.getRAMBufferSizeMB() * 1024.d * 1024.d)) {\n        assertTrue(docsWriter.flushControl.stallControl.wasStalled());\n      }\n      assertActiveBytesAfter(flushControl);\n      writer.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"264935965977b4a9e2f3920420647072c9c49176":["feb4029567b43f074ed7b6eb8fb126d355075dfd"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["839ca1793cd9a8eb5bd7c7c62918192d47972f73"],"5e38f40562eb7c165ae08ab2367a031883138354":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"130574de275b668a12d70a2c1d9cfc72fbfb76f6":["28288370235ed02234a64753cdbf0c6ec096304a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f4363cd33f6eff7fb4753574a441e2d18c1022a4":["c02b804ab16489b95429791a2d8fb0e0728354d4"],"121cfdcba6f99c493e7b96a919b7be40205b3d15":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"405c51e85c889e88c2edf4048c29449bad988884":["121cfdcba6f99c493e7b96a919b7be40205b3d15"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["c02b804ab16489b95429791a2d8fb0e0728354d4","f4363cd33f6eff7fb4753574a441e2d18c1022a4"],"28288370235ed02234a64753cdbf0c6ec096304a":["c02b804ab16489b95429791a2d8fb0e0728354d4","f4363cd33f6eff7fb4753574a441e2d18c1022a4"],"c02b804ab16489b95429791a2d8fb0e0728354d4":["405c51e85c889e88c2edf4048c29449bad988884"],"aba371508186796cc6151d8223a5b4e16d02e26e":["4d3e8520fd031bab31fd0e4d480e55958bc45efe","d19974432be9aed28ee7dca73bdf01d139e763a9"],"839ca1793cd9a8eb5bd7c7c62918192d47972f73":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"d19974432be9aed28ee7dca73bdf01d139e763a9":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"feb4029567b43f074ed7b6eb8fb126d355075dfd":["130574de275b668a12d70a2c1d9cfc72fbfb76f6"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["629c38c4ae4e303d0617e05fbfe508140b32f0a3","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8a428f5314daaabf8eab7c50bdc3bc14e6cd1aa2":["264935965977b4a9e2f3920420647072c9c49176"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["d19974432be9aed28ee7dca73bdf01d139e763a9"],"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7":["fe33227f6805edab2036cbb80645cc4e2d1fa424","d19974432be9aed28ee7dca73bdf01d139e763a9"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["5e38f40562eb7c165ae08ab2367a031883138354"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8a428f5314daaabf8eab7c50bdc3bc14e6cd1aa2"]},"commit2Childs":{"264935965977b4a9e2f3920420647072c9c49176":["8a428f5314daaabf8eab7c50bdc3bc14e6cd1aa2"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"5e38f40562eb7c165ae08ab2367a031883138354":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"130574de275b668a12d70a2c1d9cfc72fbfb76f6":["feb4029567b43f074ed7b6eb8fb126d355075dfd"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"f4363cd33f6eff7fb4753574a441e2d18c1022a4":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"121cfdcba6f99c493e7b96a919b7be40205b3d15":["405c51e85c889e88c2edf4048c29449bad988884"],"405c51e85c889e88c2edf4048c29449bad988884":["c02b804ab16489b95429791a2d8fb0e0728354d4"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":[],"28288370235ed02234a64753cdbf0c6ec096304a":["130574de275b668a12d70a2c1d9cfc72fbfb76f6"],"c02b804ab16489b95429791a2d8fb0e0728354d4":["f4363cd33f6eff7fb4753574a441e2d18c1022a4","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"839ca1793cd9a8eb5bd7c7c62918192d47972f73":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"d19974432be9aed28ee7dca73bdf01d139e763a9":["aba371508186796cc6151d8223a5b4e16d02e26e","ae14298f4eec6d5faee6a149f88ba57d14a6f21a","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7"],"feb4029567b43f074ed7b6eb8fb126d355075dfd":["264935965977b4a9e2f3920420647072c9c49176"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["4b51f65902cc2d20ddeb7a5b949aaddf990f31a7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["121cfdcba6f99c493e7b96a919b7be40205b3d15"],"8a428f5314daaabf8eab7c50bdc3bc14e6cd1aa2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["839ca1793cd9a8eb5bd7c7c62918192d47972f73"],"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7":[],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["5e38f40562eb7c165ae08ab2367a031883138354","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["aba371508186796cc6151d8223a5b4e16d02e26e","d19974432be9aed28ee7dca73bdf01d139e763a9","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","aba371508186796cc6151d8223a5b4e16d02e26e","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}