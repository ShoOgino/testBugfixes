{"path":"lucene/core/src/test/org/apache/lucene/util/automaton/TestAutomaton#testMakeBinaryIntervalEqual().mjava","commits":[{"id":"3e8715d826e588419327562287d5d6a8040d63d6","date":1427987148,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestAutomaton#testMakeBinaryIntervalEqual().mjava","pathOld":"/dev/null","sourceNew":"  public void testMakeBinaryIntervalEqual() throws Exception {\n    Automaton a = Automata.makeBinaryInterval(new BytesRef(\"bar\"), true, new BytesRef(\"bar\"), true);\n    assertTrue(Operations.run(a, intsRef(\"bar\")));\n    assertTrue(Operations.isFinite(a));\n    assertEquals(1, Operations.getFiniteStrings(a, 10).size());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2638f781be724518ff6c2263d14a48cf6e68017","date":1427989059,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestAutomaton#testMakeBinaryIntervalEqual().mjava","pathOld":"/dev/null","sourceNew":"  public void testMakeBinaryIntervalEqual() throws Exception {\n    Automaton a = Automata.makeBinaryInterval(new BytesRef(\"bar\"), true, new BytesRef(\"bar\"), true);\n    assertTrue(Operations.run(a, intsRef(\"bar\")));\n    assertTrue(Operations.isFinite(a));\n    assertEquals(1, Operations.getFiniteStrings(a, 10).size());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"35fa550f45857d99d3d6d743420ee54b4d0c37f8","date":1436039255,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestAutomaton#testMakeBinaryIntervalEqual().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/automaton/TestAutomaton#testMakeBinaryIntervalEqual().mjava","sourceNew":"  public void testMakeBinaryIntervalEqual() throws Exception {\n    Automaton a = Automata.makeBinaryInterval(new BytesRef(\"bar\"), true, new BytesRef(\"bar\"), true);\n    assertTrue(Operations.run(a, intsRef(\"bar\")));\n    assertTrue(Operations.isFinite(a));\n    assertEquals(1, TestOperations.getFiniteStrings(a).size());\n  }\n\n","sourceOld":"  public void testMakeBinaryIntervalEqual() throws Exception {\n    Automaton a = Automata.makeBinaryInterval(new BytesRef(\"bar\"), true, new BytesRef(\"bar\"), true);\n    assertTrue(Operations.run(a, intsRef(\"bar\")));\n    assertTrue(Operations.isFinite(a));\n    assertEquals(1, Operations.getFiniteStrings(a, 10).size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"35fa550f45857d99d3d6d743420ee54b4d0c37f8":["3e8715d826e588419327562287d5d6a8040d63d6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d2638f781be724518ff6c2263d14a48cf6e68017":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3e8715d826e588419327562287d5d6a8040d63d6"],"3e8715d826e588419327562287d5d6a8040d63d6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["35fa550f45857d99d3d6d743420ee54b4d0c37f8"]},"commit2Childs":{"35fa550f45857d99d3d6d743420ee54b4d0c37f8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d2638f781be724518ff6c2263d14a48cf6e68017","3e8715d826e588419327562287d5d6a8040d63d6"],"d2638f781be724518ff6c2263d14a48cf6e68017":[],"3e8715d826e588419327562287d5d6a8040d63d6":["35fa550f45857d99d3d6d743420ee54b4d0c37f8","d2638f781be724518ff6c2263d14a48cf6e68017"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d2638f781be724518ff6c2263d14a48cf6e68017","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}