{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy.Session#Session(SolrCloudManager,Policy,Transaction).mjava","commits":[{"id":"e5028c6838e2e49cb9da1cf70269851c049f107a","date":1584984100,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy.Session#Session(SolrCloudManager,Policy,Transaction).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy.Session#Session(SolrCloudManager,Transaction).mjava","sourceNew":"    Session(SolrCloudManager cloudManager, Policy policy, Transaction transaction) {\n      this.transaction = transaction;\n      this.policy = policy;\n      ClusterState state = null;\n      this.nodeStateProvider = cloudManager.getNodeStateProvider();\n      try {\n        state = cloudManager.getClusterStateProvider().getClusterState();\n        log.trace(\"-- session created with cluster state: {}\", state);\n      } catch (Exception e) {\n        log.trace(\"-- session created, can't obtain cluster state\", e);\n      }\n      this.znodeVersion = state != null ? state.getZNodeVersion() : -1;\n      this.nodes = new ArrayList<>(cloudManager.getClusterStateProvider().getLiveNodes());\n      this.cloudManager = cloudManager;\n      for (String node : nodes) {\n        collections.addAll(nodeStateProvider.getReplicaInfo(node, Collections.emptyList()).keySet());\n      }\n\n      expandedClauses = policy.getClusterPolicy().stream()\n          .filter(clause -> !clause.isPerCollectiontag())\n          .collect(Collectors.toList());\n\n      if (nodes.size() > 0) {\n        //if any collection has 'withCollection' irrespective of the node, the NodeStateProvider returns a map value\n        Map<String, Object> vals = nodeStateProvider.getNodeValues(nodes.get(0), Collections.singleton(\"withCollection\"));\n        if (!vals.isEmpty() && vals.get(\"withCollection\") != null) {\n          Map<String, String> withCollMap = (Map<String, String>) vals.get(\"withCollection\");\n          if (!withCollMap.isEmpty()) {\n            Clause withCollClause = new Clause((Map<String,Object>)Utils.fromJSONString(\"{withCollection:'*' , node: '#ANY'}\") ,\n                new Condition(NODE.tagName, \"#ANY\", Operand.EQUAL, null, null),\n                new Condition(WITH_COLLECTION.tagName,\"*\" , Operand.EQUAL, null, null), true, null, false\n            );\n            expandedClauses.add(withCollClause);\n          }\n        }\n      }\n\n      ClusterStateProvider stateProvider = cloudManager.getClusterStateProvider();\n      for (String c : collections) {\n        addClausesForCollection(policy, expandedClauses, stateProvider, c);\n      }\n\n      Collections.sort(expandedClauses);\n\n      matrix = new ArrayList<>(nodes.size());\n      for (String node : nodes) matrix.add(new Row(node, policy.getParams(), policy.getPerReplicaAttributes(), this));\n      applyRules();\n    }\n\n","sourceOld":"    Session(SolrCloudManager cloudManager, Transaction transaction) {\n      this.transaction = transaction;\n      ClusterState state = null;\n      this.nodeStateProvider = cloudManager.getNodeStateProvider();\n      try {\n        state = cloudManager.getClusterStateProvider().getClusterState();\n        log.trace(\"-- session created with cluster state: {}\", state);\n      } catch (Exception e) {\n        log.trace(\"-- session created, can't obtain cluster state\", e);\n      }\n      this.znodeVersion = state != null ? state.getZNodeVersion() : -1;\n      this.nodes = new ArrayList<>(cloudManager.getClusterStateProvider().getLiveNodes());\n      this.cloudManager = cloudManager;\n      for (String node : nodes) {\n        collections.addAll(nodeStateProvider.getReplicaInfo(node, Collections.emptyList()).keySet());\n      }\n\n      expandedClauses = clusterPolicy.stream()\n          .filter(clause -> !clause.isPerCollectiontag())\n          .collect(Collectors.toList());\n\n      if (nodes.size() > 0) {\n        //if any collection has 'withCollection' irrespective of the node, the NodeStateProvider returns a map value\n        Map<String, Object> vals = nodeStateProvider.getNodeValues(nodes.get(0), Collections.singleton(\"withCollection\"));\n        if (!vals.isEmpty() && vals.get(\"withCollection\") != null) {\n          Map<String, String> withCollMap = (Map<String, String>) vals.get(\"withCollection\");\n          if (!withCollMap.isEmpty()) {\n            Clause withCollClause = new Clause((Map<String,Object>)Utils.fromJSONString(\"{withCollection:'*' , node: '#ANY'}\") ,\n                new Condition(NODE.tagName, \"#ANY\", Operand.EQUAL, null, null),\n                new Condition(WITH_COLLECTION.tagName,\"*\" , Operand.EQUAL, null, null), true, null, false\n            );\n            expandedClauses.add(withCollClause);\n          }\n        }\n      }\n\n      ClusterStateProvider stateProvider = cloudManager.getClusterStateProvider();\n      for (String c : collections) {\n        addClausesForCollection(stateProvider, c);\n      }\n\n      Collections.sort(expandedClauses);\n\n      matrix = new ArrayList<>(nodes.size());\n      for (String node : nodes) matrix.add(new Row(node, params, perReplicaAttributes, this));\n      applyRules();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5ad9c35f926b4bf8da0336d1300efc709c8d5a56","date":1591729157,"type":3,"author":"murblanc","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy.Session#Session(SolrCloudManager,Policy,Transaction).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy.Session#Session(SolrCloudManager,Policy,Transaction).mjava","sourceNew":"    Session(SolrCloudManager cloudManager, Policy policy, Transaction transaction) {\n      this.transaction = transaction;\n      this.policy = policy;\n      ClusterState state = null;\n      this.nodeStateProvider = cloudManager.getNodeStateProvider();\n      try {\n        state = cloudManager.getClusterStateProvider().getClusterState();\n        log.trace(\"-- session created with cluster state: {}\", state);\n      } catch (Exception e) {\n        log.trace(\"-- session created, can't obtain cluster state\", e);\n      }\n      this.nodes = new ArrayList<>(cloudManager.getClusterStateProvider().getLiveNodes());\n      this.cloudManager = cloudManager;\n      for (String node : nodes) {\n        collections.addAll(nodeStateProvider.getReplicaInfo(node, Collections.emptyList()).keySet());\n      }\n\n      expandedClauses = policy.getClusterPolicy().stream()\n          .filter(clause -> !clause.isPerCollectiontag())\n          .collect(Collectors.toList());\n\n      if (nodes.size() > 0) {\n        //if any collection has 'withCollection' irrespective of the node, the NodeStateProvider returns a map value\n        Map<String, Object> vals = nodeStateProvider.getNodeValues(nodes.get(0), Collections.singleton(\"withCollection\"));\n        if (!vals.isEmpty() && vals.get(\"withCollection\") != null) {\n          Map<String, String> withCollMap = (Map<String, String>) vals.get(\"withCollection\");\n          if (!withCollMap.isEmpty()) {\n            Clause withCollClause = new Clause((Map<String,Object>)Utils.fromJSONString(\"{withCollection:'*' , node: '#ANY'}\") ,\n                new Condition(NODE.tagName, \"#ANY\", Operand.EQUAL, null, null),\n                new Condition(WITH_COLLECTION.tagName,\"*\" , Operand.EQUAL, null, null), true, null, false\n            );\n            expandedClauses.add(withCollClause);\n          }\n        }\n      }\n\n      ClusterStateProvider stateProvider = cloudManager.getClusterStateProvider();\n      for (String c : collections) {\n        addClausesForCollection(policy, expandedClauses, stateProvider, c);\n      }\n\n      Collections.sort(expandedClauses);\n\n      matrix = new ArrayList<>(nodes.size());\n      for (String node : nodes) matrix.add(new Row(node, policy.getParams(), policy.getPerReplicaAttributes(), this));\n      applyRules();\n    }\n\n","sourceOld":"    Session(SolrCloudManager cloudManager, Policy policy, Transaction transaction) {\n      this.transaction = transaction;\n      this.policy = policy;\n      ClusterState state = null;\n      this.nodeStateProvider = cloudManager.getNodeStateProvider();\n      try {\n        state = cloudManager.getClusterStateProvider().getClusterState();\n        log.trace(\"-- session created with cluster state: {}\", state);\n      } catch (Exception e) {\n        log.trace(\"-- session created, can't obtain cluster state\", e);\n      }\n      this.znodeVersion = state != null ? state.getZNodeVersion() : -1;\n      this.nodes = new ArrayList<>(cloudManager.getClusterStateProvider().getLiveNodes());\n      this.cloudManager = cloudManager;\n      for (String node : nodes) {\n        collections.addAll(nodeStateProvider.getReplicaInfo(node, Collections.emptyList()).keySet());\n      }\n\n      expandedClauses = policy.getClusterPolicy().stream()\n          .filter(clause -> !clause.isPerCollectiontag())\n          .collect(Collectors.toList());\n\n      if (nodes.size() > 0) {\n        //if any collection has 'withCollection' irrespective of the node, the NodeStateProvider returns a map value\n        Map<String, Object> vals = nodeStateProvider.getNodeValues(nodes.get(0), Collections.singleton(\"withCollection\"));\n        if (!vals.isEmpty() && vals.get(\"withCollection\") != null) {\n          Map<String, String> withCollMap = (Map<String, String>) vals.get(\"withCollection\");\n          if (!withCollMap.isEmpty()) {\n            Clause withCollClause = new Clause((Map<String,Object>)Utils.fromJSONString(\"{withCollection:'*' , node: '#ANY'}\") ,\n                new Condition(NODE.tagName, \"#ANY\", Operand.EQUAL, null, null),\n                new Condition(WITH_COLLECTION.tagName,\"*\" , Operand.EQUAL, null, null), true, null, false\n            );\n            expandedClauses.add(withCollClause);\n          }\n        }\n      }\n\n      ClusterStateProvider stateProvider = cloudManager.getClusterStateProvider();\n      for (String c : collections) {\n        addClausesForCollection(policy, expandedClauses, stateProvider, c);\n      }\n\n      Collections.sort(expandedClauses);\n\n      matrix = new ArrayList<>(nodes.size());\n      for (String node : nodes) matrix.add(new Row(node, policy.getParams(), policy.getPerReplicaAttributes(), this));\n      applyRules();\n    }\n\n","bugFix":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b0249ced9c25c3b173d20c3ca74160b9eade78c","date":1591787635,"type":3,"author":"murblanc","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy.Session#Session(SolrCloudManager,Policy,Transaction).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy.Session#Session(SolrCloudManager,Policy,Transaction).mjava","sourceNew":"    /**\n     * This constructor creates a Session from the current Zookeeper collection, replica and node states.\n     */\n    Session(SolrCloudManager cloudManager, Policy policy, Transaction transaction) {\n      collections = new HashSet<>();\n      this.transaction = transaction;\n      this.policy = policy;\n      ClusterState state = null;\n      this.nodeStateProvider = cloudManager.getNodeStateProvider();\n      try {\n        state = cloudManager.getClusterStateProvider().getClusterState();\n        log.trace(\"-- session created with cluster state: {}\", state);\n      } catch (Exception e) {\n        log.trace(\"-- session created, can't obtain cluster state\", e);\n      }\n      this.nodes = new ArrayList<>(cloudManager.getClusterStateProvider().getLiveNodes());\n      this.cloudManager = cloudManager;\n      for (String node : nodes) {\n        collections.addAll(nodeStateProvider.getReplicaInfo(node, Collections.emptyList()).keySet());\n      }\n\n      expandedClauses = policy.getClusterPolicy().stream()\n          .filter(clause -> !clause.isPerCollectiontag())\n          .collect(Collectors.toList());\n\n      if (nodes.size() > 0) {\n        //if any collection has 'withCollection' irrespective of the node, the NodeStateProvider returns a map value\n        Map<String, Object> vals = nodeStateProvider.getNodeValues(nodes.get(0), Collections.singleton(\"withCollection\"));\n        if (!vals.isEmpty() && vals.get(\"withCollection\") != null) {\n          Map<String, String> withCollMap = (Map<String, String>) vals.get(\"withCollection\");\n          if (!withCollMap.isEmpty()) {\n            Clause withCollClause = new Clause((Map<String,Object>)Utils.fromJSONString(\"{withCollection:'*' , node: '#ANY'}\") ,\n                new Condition(NODE.tagName, \"#ANY\", Operand.EQUAL, null, null),\n                new Condition(WITH_COLLECTION.tagName,\"*\" , Operand.EQUAL, null, null), true, null, false\n            );\n            expandedClauses.add(withCollClause);\n          }\n        }\n      }\n\n      ClusterStateProvider stateProvider = cloudManager.getClusterStateProvider();\n      for (String c : collections) {\n        addClausesForCollection(policy, expandedClauses, stateProvider, c);\n      }\n\n      Collections.sort(expandedClauses);\n\n      matrix = new ArrayList<>(nodes.size());\n      for (String node : nodes) matrix.add(new Row(node, policy.getParams(), policy.getPerReplicaAttributes(), this));\n      applyRules();\n    }\n\n","sourceOld":"    Session(SolrCloudManager cloudManager, Policy policy, Transaction transaction) {\n      this.transaction = transaction;\n      this.policy = policy;\n      ClusterState state = null;\n      this.nodeStateProvider = cloudManager.getNodeStateProvider();\n      try {\n        state = cloudManager.getClusterStateProvider().getClusterState();\n        log.trace(\"-- session created with cluster state: {}\", state);\n      } catch (Exception e) {\n        log.trace(\"-- session created, can't obtain cluster state\", e);\n      }\n      this.nodes = new ArrayList<>(cloudManager.getClusterStateProvider().getLiveNodes());\n      this.cloudManager = cloudManager;\n      for (String node : nodes) {\n        collections.addAll(nodeStateProvider.getReplicaInfo(node, Collections.emptyList()).keySet());\n      }\n\n      expandedClauses = policy.getClusterPolicy().stream()\n          .filter(clause -> !clause.isPerCollectiontag())\n          .collect(Collectors.toList());\n\n      if (nodes.size() > 0) {\n        //if any collection has 'withCollection' irrespective of the node, the NodeStateProvider returns a map value\n        Map<String, Object> vals = nodeStateProvider.getNodeValues(nodes.get(0), Collections.singleton(\"withCollection\"));\n        if (!vals.isEmpty() && vals.get(\"withCollection\") != null) {\n          Map<String, String> withCollMap = (Map<String, String>) vals.get(\"withCollection\");\n          if (!withCollMap.isEmpty()) {\n            Clause withCollClause = new Clause((Map<String,Object>)Utils.fromJSONString(\"{withCollection:'*' , node: '#ANY'}\") ,\n                new Condition(NODE.tagName, \"#ANY\", Operand.EQUAL, null, null),\n                new Condition(WITH_COLLECTION.tagName,\"*\" , Operand.EQUAL, null, null), true, null, false\n            );\n            expandedClauses.add(withCollClause);\n          }\n        }\n      }\n\n      ClusterStateProvider stateProvider = cloudManager.getClusterStateProvider();\n      for (String c : collections) {\n        addClausesForCollection(policy, expandedClauses, stateProvider, c);\n      }\n\n      Collections.sort(expandedClauses);\n\n      matrix = new ArrayList<>(nodes.size());\n      for (String node : nodes) matrix.add(new Row(node, policy.getParams(), policy.getPerReplicaAttributes(), this));\n      applyRules();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"527adea7ce767368d7317339023e18e39702132e","date":1592163810,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy.Session#Session(SolrCloudManager,Policy,Transaction).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy.Session#Session(SolrCloudManager,Policy,Transaction).mjava","sourceNew":"    /**\n     * This constructor creates a Session from the current Zookeeper collection, replica and node states.\n     */\n    Session(SolrCloudManager cloudManager, Policy policy, Transaction transaction) {\n      collections = new HashSet<>();\n      this.transaction = transaction;\n      this.policy = policy;\n      ClusterState state = null;\n      this.nodeStateProvider = cloudManager.getNodeStateProvider();\n      try {\n        state = cloudManager.getClusterStateProvider().getClusterState();\n        log.trace(\"-- session created with cluster state: {}\", state);\n      } catch (Exception e) {\n        log.trace(\"-- session created, can't obtain cluster state\", e);\n      }\n      this.nodes = new ArrayList<>(cloudManager.getClusterStateProvider().getLiveNodes());\n      this.cloudManager = cloudManager;\n      for (String node : nodes) {\n        collections.addAll(nodeStateProvider.getReplicaInfo(node, Collections.emptyList()).keySet());\n      }\n\n      expandedClauses = policy.getClusterPolicy().stream()\n          .filter(clause -> !clause.isPerCollectiontag())\n          .collect(Collectors.toList());\n\n      if (nodes.size() > 0) {\n        //if any collection has 'withCollection' irrespective of the node, the NodeStateProvider returns a map value\n        Map<String, Object> vals = nodeStateProvider.getNodeValues(nodes.get(0), Collections.singleton(\"withCollection\"));\n        if (!vals.isEmpty() && vals.get(\"withCollection\") != null) {\n          @SuppressWarnings({\"unchecked\"})\n          Map<String, String> withCollMap = (Map<String, String>) vals.get(\"withCollection\");\n          if (!withCollMap.isEmpty()) {\n            @SuppressWarnings({\"unchecked\"})\n            Clause withCollClause = new Clause((Map<String,Object>)Utils.fromJSONString(\"{withCollection:'*' , node: '#ANY'}\") ,\n                new Condition(NODE.tagName, \"#ANY\", Operand.EQUAL, null, null),\n                new Condition(WITH_COLLECTION.tagName,\"*\" , Operand.EQUAL, null, null), true, null, false\n            );\n            expandedClauses.add(withCollClause);\n          }\n        }\n      }\n\n      ClusterStateProvider stateProvider = cloudManager.getClusterStateProvider();\n      for (String c : collections) {\n        addClausesForCollection(policy, expandedClauses, stateProvider, c);\n      }\n\n      Collections.sort(expandedClauses);\n\n      matrix = new ArrayList<>(nodes.size());\n      for (String node : nodes) matrix.add(new Row(node, policy.getParams(), policy.getPerReplicaAttributes(), this));\n      applyRules();\n    }\n\n","sourceOld":"    /**\n     * This constructor creates a Session from the current Zookeeper collection, replica and node states.\n     */\n    Session(SolrCloudManager cloudManager, Policy policy, Transaction transaction) {\n      collections = new HashSet<>();\n      this.transaction = transaction;\n      this.policy = policy;\n      ClusterState state = null;\n      this.nodeStateProvider = cloudManager.getNodeStateProvider();\n      try {\n        state = cloudManager.getClusterStateProvider().getClusterState();\n        log.trace(\"-- session created with cluster state: {}\", state);\n      } catch (Exception e) {\n        log.trace(\"-- session created, can't obtain cluster state\", e);\n      }\n      this.nodes = new ArrayList<>(cloudManager.getClusterStateProvider().getLiveNodes());\n      this.cloudManager = cloudManager;\n      for (String node : nodes) {\n        collections.addAll(nodeStateProvider.getReplicaInfo(node, Collections.emptyList()).keySet());\n      }\n\n      expandedClauses = policy.getClusterPolicy().stream()\n          .filter(clause -> !clause.isPerCollectiontag())\n          .collect(Collectors.toList());\n\n      if (nodes.size() > 0) {\n        //if any collection has 'withCollection' irrespective of the node, the NodeStateProvider returns a map value\n        Map<String, Object> vals = nodeStateProvider.getNodeValues(nodes.get(0), Collections.singleton(\"withCollection\"));\n        if (!vals.isEmpty() && vals.get(\"withCollection\") != null) {\n          Map<String, String> withCollMap = (Map<String, String>) vals.get(\"withCollection\");\n          if (!withCollMap.isEmpty()) {\n            Clause withCollClause = new Clause((Map<String,Object>)Utils.fromJSONString(\"{withCollection:'*' , node: '#ANY'}\") ,\n                new Condition(NODE.tagName, \"#ANY\", Operand.EQUAL, null, null),\n                new Condition(WITH_COLLECTION.tagName,\"*\" , Operand.EQUAL, null, null), true, null, false\n            );\n            expandedClauses.add(withCollClause);\n          }\n        }\n      }\n\n      ClusterStateProvider stateProvider = cloudManager.getClusterStateProvider();\n      for (String c : collections) {\n        addClausesForCollection(policy, expandedClauses, stateProvider, c);\n      }\n\n      Collections.sort(expandedClauses);\n\n      matrix = new ArrayList<>(nodes.size());\n      for (String node : nodes) matrix.add(new Row(node, policy.getParams(), policy.getPerReplicaAttributes(), this));\n      applyRules();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy.Session#Session(SolrCloudManager,Policy,Transaction).mjava","sourceNew":null,"sourceOld":"    /**\n     * This constructor creates a Session from the current Zookeeper collection, replica and node states.\n     */\n    Session(SolrCloudManager cloudManager, Policy policy, Transaction transaction) {\n      collections = new HashSet<>();\n      this.transaction = transaction;\n      this.policy = policy;\n      ClusterState state = null;\n      this.nodeStateProvider = cloudManager.getNodeStateProvider();\n      try {\n        state = cloudManager.getClusterStateProvider().getClusterState();\n        log.trace(\"-- session created with cluster state: {}\", state);\n      } catch (Exception e) {\n        log.trace(\"-- session created, can't obtain cluster state\", e);\n      }\n      this.nodes = new ArrayList<>(cloudManager.getClusterStateProvider().getLiveNodes());\n      this.cloudManager = cloudManager;\n      for (String node : nodes) {\n        collections.addAll(nodeStateProvider.getReplicaInfo(node, Collections.emptyList()).keySet());\n      }\n\n      expandedClauses = policy.getClusterPolicy().stream()\n          .filter(clause -> !clause.isPerCollectiontag())\n          .collect(Collectors.toList());\n\n      if (nodes.size() > 0) {\n        //if any collection has 'withCollection' irrespective of the node, the NodeStateProvider returns a map value\n        Map<String, Object> vals = nodeStateProvider.getNodeValues(nodes.get(0), Collections.singleton(\"withCollection\"));\n        if (!vals.isEmpty() && vals.get(\"withCollection\") != null) {\n          @SuppressWarnings({\"unchecked\"})\n          Map<String, String> withCollMap = (Map<String, String>) vals.get(\"withCollection\");\n          if (!withCollMap.isEmpty()) {\n            @SuppressWarnings({\"unchecked\"})\n            Clause withCollClause = new Clause((Map<String,Object>)Utils.fromJSONString(\"{withCollection:'*' , node: '#ANY'}\") ,\n                new Condition(NODE.tagName, \"#ANY\", Operand.EQUAL, null, null),\n                new Condition(WITH_COLLECTION.tagName,\"*\" , Operand.EQUAL, null, null), true, null, false\n            );\n            expandedClauses.add(withCollClause);\n          }\n        }\n      }\n\n      ClusterStateProvider stateProvider = cloudManager.getClusterStateProvider();\n      for (String c : collections) {\n        addClausesForCollection(policy, expandedClauses, stateProvider, c);\n      }\n\n      Collections.sort(expandedClauses);\n\n      matrix = new ArrayList<>(nodes.size());\n      for (String node : nodes) matrix.add(new Row(node, policy.getParams(), policy.getPerReplicaAttributes(), this));\n      applyRules();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5ad9c35f926b4bf8da0336d1300efc709c8d5a56":["e5028c6838e2e49cb9da1cf70269851c049f107a"],"3f504512a03d978990cbff30db0522b354e846db":["527adea7ce767368d7317339023e18e39702132e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"527adea7ce767368d7317339023e18e39702132e":["7b0249ced9c25c3b173d20c3ca74160b9eade78c"],"7b0249ced9c25c3b173d20c3ca74160b9eade78c":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"e5028c6838e2e49cb9da1cf70269851c049f107a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"5ad9c35f926b4bf8da0336d1300efc709c8d5a56":["7b0249ced9c25c3b173d20c3ca74160b9eade78c"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e5028c6838e2e49cb9da1cf70269851c049f107a"],"527adea7ce767368d7317339023e18e39702132e":["3f504512a03d978990cbff30db0522b354e846db"],"e5028c6838e2e49cb9da1cf70269851c049f107a":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"7b0249ced9c25c3b173d20c3ca74160b9eade78c":["527adea7ce767368d7317339023e18e39702132e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}