{"path":"lucene/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","commits":[{"id":"3fc1f3f78b299e125f7e60f43b5d457392bea23f","date":1317431015,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#scorer(AtomicReaderContext,ScorerContext).mjava","sourceNew":"    @Override\n    public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n        boolean topScorer, Bits acceptDocs) throws IOException {\n      assert !termArrays.isEmpty();\n      final IndexReader reader = context.reader;\n      final Bits liveDocs = acceptDocs;\n      \n      PhraseQuery.PostingsAndFreq[] postingsFreqs = new PhraseQuery.PostingsAndFreq[termArrays.size()];\n\n      for (int pos=0; pos<postingsFreqs.length; pos++) {\n        Term[] terms = termArrays.get(pos);\n\n        final DocsAndPositionsEnum postingsEnum;\n        int docFreq;\n\n        if (terms.length > 1) {\n          postingsEnum = new UnionDocsAndPositionsEnum(reader, terms);\n\n          // coarse -- this overcounts since a given doc can\n          // have more than one terms:\n          docFreq = 0;\n          for(int termIdx=0;termIdx<terms.length;termIdx++) {\n            docFreq += reader.docFreq(terms[termIdx]);\n          }\n        } else {\n          final Term term = terms[0];\n          postingsEnum = reader.termPositionsEnum(liveDocs,\n                                                  term.field(),\n                                                  term.bytes());\n\n          if (postingsEnum == null) {\n            if (reader.termDocsEnum(liveDocs, term.field(), term.bytes()) != null) {\n              // term does exist, but has no positions\n              throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed without position data; cannot run PhraseQuery (term=\" + term.text() + \")\");\n            } else {\n              // term does not exist\n              return null;\n            }\n          }\n\n          docFreq = reader.docFreq(term.field(), term.bytes());\n        }\n\n        postingsFreqs[pos] = new PhraseQuery.PostingsAndFreq(postingsEnum, docFreq, positions.get(pos).intValue(), terms[0]);\n      }\n\n      // sort by increasing docFreq order\n      if (slop == 0) {\n        ArrayUtil.mergeSort(postingsFreqs);\n      }\n\n      if (slop == 0) {\n        ExactPhraseScorer s = new ExactPhraseScorer(this, postingsFreqs, similarity.exactDocScorer(stats, field, context));\n        if (s.noDocs) {\n          return null;\n        } else {\n          return s;\n        }\n      } else {\n        return new SloppyPhraseScorer(this, postingsFreqs, slop, similarity.sloppyDocScorer(stats, field, context));\n      }\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(AtomicReaderContext context, ScorerContext scorerContext) throws IOException {\n      assert !termArrays.isEmpty();\n      final IndexReader reader = context.reader;\n      final Bits liveDocs = reader.getLiveDocs();\n      \n      PhraseQuery.PostingsAndFreq[] postingsFreqs = new PhraseQuery.PostingsAndFreq[termArrays.size()];\n\n      for (int pos=0; pos<postingsFreqs.length; pos++) {\n        Term[] terms = termArrays.get(pos);\n\n        final DocsAndPositionsEnum postingsEnum;\n        int docFreq;\n\n        if (terms.length > 1) {\n          postingsEnum = new UnionDocsAndPositionsEnum(reader, terms);\n\n          // coarse -- this overcounts since a given doc can\n          // have more than one terms:\n          docFreq = 0;\n          for(int termIdx=0;termIdx<terms.length;termIdx++) {\n            docFreq += reader.docFreq(terms[termIdx]);\n          }\n        } else {\n          final Term term = terms[0];\n          postingsEnum = reader.termPositionsEnum(liveDocs,\n                                                  term.field(),\n                                                  term.bytes());\n\n          if (postingsEnum == null) {\n            if (reader.termDocsEnum(liveDocs, term.field(), term.bytes()) != null) {\n              // term does exist, but has no positions\n              throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed without position data; cannot run PhraseQuery (term=\" + term.text() + \")\");\n            } else {\n              // term does not exist\n              return null;\n            }\n          }\n\n          docFreq = reader.docFreq(term.field(), term.bytes());\n        }\n\n        postingsFreqs[pos] = new PhraseQuery.PostingsAndFreq(postingsEnum, docFreq, positions.get(pos).intValue(), terms[0]);\n      }\n\n      // sort by increasing docFreq order\n      if (slop == 0) {\n        ArrayUtil.mergeSort(postingsFreqs);\n      }\n\n      if (slop == 0) {\n        ExactPhraseScorer s = new ExactPhraseScorer(this, postingsFreqs, similarity.exactDocScorer(stats, field, context));\n        if (s.noDocs) {\n          return null;\n        } else {\n          return s;\n        }\n      } else {\n        return new SloppyPhraseScorer(this, postingsFreqs, slop, similarity.sloppyDocScorer(stats, field, context));\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d827579cb8382b568e1eb2ab73a72189eb3d9b80","date":1317751030,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","sourceNew":"    @Override\n    public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n        boolean topScorer, Bits acceptDocs) throws IOException {\n      assert !termArrays.isEmpty();\n      final IndexReader reader = context.reader;\n      final Bits liveDocs = acceptDocs;\n      \n      PhraseQuery.PostingsAndFreq[] postingsFreqs = new PhraseQuery.PostingsAndFreq[termArrays.size()];\n\n      for (int pos=0; pos<postingsFreqs.length; pos++) {\n        Term[] terms = termArrays.get(pos);\n\n        final DocsAndPositionsEnum postingsEnum;\n        int docFreq;\n\n        if (terms.length > 1) {\n          postingsEnum = new UnionDocsAndPositionsEnum(liveDocs, reader, terms);\n\n          // coarse -- this overcounts since a given doc can\n          // have more than one terms:\n          docFreq = 0;\n          for(int termIdx=0;termIdx<terms.length;termIdx++) {\n            docFreq += reader.docFreq(terms[termIdx]);\n          }\n        } else {\n          final Term term = terms[0];\n          postingsEnum = reader.termPositionsEnum(liveDocs,\n                                                  term.field(),\n                                                  term.bytes());\n\n          if (postingsEnum == null) {\n            if (reader.termDocsEnum(liveDocs, term.field(), term.bytes()) != null) {\n              // term does exist, but has no positions\n              throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed without position data; cannot run PhraseQuery (term=\" + term.text() + \")\");\n            } else {\n              // term does not exist\n              return null;\n            }\n          }\n\n          docFreq = reader.docFreq(term.field(), term.bytes());\n        }\n\n        postingsFreqs[pos] = new PhraseQuery.PostingsAndFreq(postingsEnum, docFreq, positions.get(pos).intValue(), terms[0]);\n      }\n\n      // sort by increasing docFreq order\n      if (slop == 0) {\n        ArrayUtil.mergeSort(postingsFreqs);\n      }\n\n      if (slop == 0) {\n        ExactPhraseScorer s = new ExactPhraseScorer(this, postingsFreqs, similarity.exactDocScorer(stats, field, context));\n        if (s.noDocs) {\n          return null;\n        } else {\n          return s;\n        }\n      } else {\n        return new SloppyPhraseScorer(this, postingsFreqs, slop, similarity.sloppyDocScorer(stats, field, context));\n      }\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n        boolean topScorer, Bits acceptDocs) throws IOException {\n      assert !termArrays.isEmpty();\n      final IndexReader reader = context.reader;\n      final Bits liveDocs = acceptDocs;\n      \n      PhraseQuery.PostingsAndFreq[] postingsFreqs = new PhraseQuery.PostingsAndFreq[termArrays.size()];\n\n      for (int pos=0; pos<postingsFreqs.length; pos++) {\n        Term[] terms = termArrays.get(pos);\n\n        final DocsAndPositionsEnum postingsEnum;\n        int docFreq;\n\n        if (terms.length > 1) {\n          postingsEnum = new UnionDocsAndPositionsEnum(reader, terms);\n\n          // coarse -- this overcounts since a given doc can\n          // have more than one terms:\n          docFreq = 0;\n          for(int termIdx=0;termIdx<terms.length;termIdx++) {\n            docFreq += reader.docFreq(terms[termIdx]);\n          }\n        } else {\n          final Term term = terms[0];\n          postingsEnum = reader.termPositionsEnum(liveDocs,\n                                                  term.field(),\n                                                  term.bytes());\n\n          if (postingsEnum == null) {\n            if (reader.termDocsEnum(liveDocs, term.field(), term.bytes()) != null) {\n              // term does exist, but has no positions\n              throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed without position data; cannot run PhraseQuery (term=\" + term.text() + \")\");\n            } else {\n              // term does not exist\n              return null;\n            }\n          }\n\n          docFreq = reader.docFreq(term.field(), term.bytes());\n        }\n\n        postingsFreqs[pos] = new PhraseQuery.PostingsAndFreq(postingsEnum, docFreq, positions.get(pos).intValue(), terms[0]);\n      }\n\n      // sort by increasing docFreq order\n      if (slop == 0) {\n        ArrayUtil.mergeSort(postingsFreqs);\n      }\n\n      if (slop == 0) {\n        ExactPhraseScorer s = new ExactPhraseScorer(this, postingsFreqs, similarity.exactDocScorer(stats, field, context));\n        if (s.noDocs) {\n          return null;\n        } else {\n          return s;\n        }\n      } else {\n        return new SloppyPhraseScorer(this, postingsFreqs, slop, similarity.sloppyDocScorer(stats, field, context));\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e2297162a22c55456e200caef2cbcb00fe381120","date":1321551342,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","sourceNew":"    @Override\n    public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n        boolean topScorer, Bits acceptDocs) throws IOException {\n      assert !termArrays.isEmpty();\n      final IndexReader reader = context.reader;\n      final Bits liveDocs = acceptDocs;\n      \n      PhraseQuery.PostingsAndFreq[] postingsFreqs = new PhraseQuery.PostingsAndFreq[termArrays.size()];\n\n      final Terms fieldTerms = reader.terms(field);\n      if (fieldTerms == null) {\n        return null;\n      }\n\n      // Reuse single TermsEnum below:\n      final TermsEnum termsEnum = fieldTerms.iterator(null);\n\n      for (int pos=0; pos<postingsFreqs.length; pos++) {\n        Term[] terms = termArrays.get(pos);\n\n        final DocsAndPositionsEnum postingsEnum;\n        int docFreq;\n\n        if (terms.length > 1) {\n          postingsEnum = new UnionDocsAndPositionsEnum(liveDocs, context, terms, termContexts, termsEnum);\n\n          // coarse -- this overcounts since a given doc can\n          // have more than one term:\n          docFreq = 0;\n          for(int termIdx=0;termIdx<terms.length;termIdx++) {\n            final Term term = terms[termIdx];\n            TermState termState = termContexts.get(term).get(context.ord);\n            if (termState == null) {\n              // Term not in reader\n              continue;\n            }\n            termsEnum.seekExact(term.bytes(), termState);\n            docFreq += termsEnum.docFreq();\n          }\n\n          if (docFreq == 0) {\n            // None of the terms are in this reader\n            return null;\n          }\n        } else {\n          final Term term = terms[0];\n          TermState termState = termContexts.get(term).get(context.ord);\n          if (termState == null) {\n            // Term not in reader\n            return null;\n          }\n          termsEnum.seekExact(term.bytes(), termState);\n          postingsEnum = termsEnum.docsAndPositions(liveDocs, null);\n\n          if (postingsEnum == null) {\n            // term does exist, but has no positions\n            assert termsEnum.docs(liveDocs, null) != null: \"termstate found but no term exists in reader\";\n            throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed without position data; cannot run PhraseQuery (term=\" + term.text() + \")\");\n          }\n\n          docFreq = termsEnum.docFreq();\n        }\n\n        postingsFreqs[pos] = new PhraseQuery.PostingsAndFreq(postingsEnum, docFreq, positions.get(pos).intValue(), terms[0]);\n      }\n\n      // sort by increasing docFreq order\n      if (slop == 0) {\n        ArrayUtil.mergeSort(postingsFreqs);\n      }\n\n      if (slop == 0) {\n        ExactPhraseScorer s = new ExactPhraseScorer(this, postingsFreqs, similarity.exactDocScorer(stats, field, context));\n        if (s.noDocs) {\n          return null;\n        } else {\n          return s;\n        }\n      } else {\n        return new SloppyPhraseScorer(this, postingsFreqs, slop, similarity.sloppyDocScorer(stats, field, context));\n      }\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n        boolean topScorer, Bits acceptDocs) throws IOException {\n      assert !termArrays.isEmpty();\n      final IndexReader reader = context.reader;\n      final Bits liveDocs = acceptDocs;\n      \n      PhraseQuery.PostingsAndFreq[] postingsFreqs = new PhraseQuery.PostingsAndFreq[termArrays.size()];\n\n      for (int pos=0; pos<postingsFreqs.length; pos++) {\n        Term[] terms = termArrays.get(pos);\n\n        final DocsAndPositionsEnum postingsEnum;\n        int docFreq;\n\n        if (terms.length > 1) {\n          postingsEnum = new UnionDocsAndPositionsEnum(liveDocs, reader, terms);\n\n          // coarse -- this overcounts since a given doc can\n          // have more than one terms:\n          docFreq = 0;\n          for(int termIdx=0;termIdx<terms.length;termIdx++) {\n            docFreq += reader.docFreq(terms[termIdx]);\n          }\n        } else {\n          final Term term = terms[0];\n          postingsEnum = reader.termPositionsEnum(liveDocs,\n                                                  term.field(),\n                                                  term.bytes());\n\n          if (postingsEnum == null) {\n            if (reader.termDocsEnum(liveDocs, term.field(), term.bytes()) != null) {\n              // term does exist, but has no positions\n              throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed without position data; cannot run PhraseQuery (term=\" + term.text() + \")\");\n            } else {\n              // term does not exist\n              return null;\n            }\n          }\n\n          docFreq = reader.docFreq(term.field(), term.bytes());\n        }\n\n        postingsFreqs[pos] = new PhraseQuery.PostingsAndFreq(postingsEnum, docFreq, positions.get(pos).intValue(), terms[0]);\n      }\n\n      // sort by increasing docFreq order\n      if (slop == 0) {\n        ArrayUtil.mergeSort(postingsFreqs);\n      }\n\n      if (slop == 0) {\n        ExactPhraseScorer s = new ExactPhraseScorer(this, postingsFreqs, similarity.exactDocScorer(stats, field, context));\n        if (s.noDocs) {\n          return null;\n        } else {\n          return s;\n        }\n      } else {\n        return new SloppyPhraseScorer(this, postingsFreqs, slop, similarity.sloppyDocScorer(stats, field, context));\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"872cff1d3a554e0cd64014cd97f88d3002b0f491","date":1323024658,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","sourceNew":"    @Override\n    public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n        boolean topScorer, Bits acceptDocs) throws IOException {\n      assert !termArrays.isEmpty();\n      final IndexReader reader = context.reader;\n      final Bits liveDocs = acceptDocs;\n      \n      PhraseQuery.PostingsAndFreq[] postingsFreqs = new PhraseQuery.PostingsAndFreq[termArrays.size()];\n\n      final Terms fieldTerms = reader.terms(field);\n      if (fieldTerms == null) {\n        return null;\n      }\n\n      // Reuse single TermsEnum below:\n      final TermsEnum termsEnum = fieldTerms.iterator(null);\n\n      for (int pos=0; pos<postingsFreqs.length; pos++) {\n        Term[] terms = termArrays.get(pos);\n\n        final DocsAndPositionsEnum postingsEnum;\n        int docFreq;\n\n        if (terms.length > 1) {\n          postingsEnum = new UnionDocsAndPositionsEnum(liveDocs, context, terms, termContexts, termsEnum);\n\n          // coarse -- this overcounts since a given doc can\n          // have more than one term:\n          docFreq = 0;\n          for(int termIdx=0;termIdx<terms.length;termIdx++) {\n            final Term term = terms[termIdx];\n            TermState termState = termContexts.get(term).get(context.ord);\n            if (termState == null) {\n              // Term not in reader\n              continue;\n            }\n            termsEnum.seekExact(term.bytes(), termState);\n            docFreq += termsEnum.docFreq();\n          }\n\n          if (docFreq == 0) {\n            // None of the terms are in this reader\n            return null;\n          }\n        } else {\n          final Term term = terms[0];\n          TermState termState = termContexts.get(term).get(context.ord);\n          if (termState == null) {\n            // Term not in reader\n            return null;\n          }\n          termsEnum.seekExact(term.bytes(), termState);\n          postingsEnum = termsEnum.docsAndPositions(liveDocs, null);\n\n          if (postingsEnum == null) {\n            // term does exist, but has no positions\n            assert termsEnum.docs(liveDocs, null, false) != null: \"termstate found but no term exists in reader\";\n            throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed without position data; cannot run PhraseQuery (term=\" + term.text() + \")\");\n          }\n\n          docFreq = termsEnum.docFreq();\n        }\n\n        postingsFreqs[pos] = new PhraseQuery.PostingsAndFreq(postingsEnum, docFreq, positions.get(pos).intValue(), terms[0]);\n      }\n\n      // sort by increasing docFreq order\n      if (slop == 0) {\n        ArrayUtil.mergeSort(postingsFreqs);\n      }\n\n      if (slop == 0) {\n        ExactPhraseScorer s = new ExactPhraseScorer(this, postingsFreqs, similarity.exactDocScorer(stats, field, context));\n        if (s.noDocs) {\n          return null;\n        } else {\n          return s;\n        }\n      } else {\n        return new SloppyPhraseScorer(this, postingsFreqs, slop, similarity.sloppyDocScorer(stats, field, context));\n      }\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n        boolean topScorer, Bits acceptDocs) throws IOException {\n      assert !termArrays.isEmpty();\n      final IndexReader reader = context.reader;\n      final Bits liveDocs = acceptDocs;\n      \n      PhraseQuery.PostingsAndFreq[] postingsFreqs = new PhraseQuery.PostingsAndFreq[termArrays.size()];\n\n      final Terms fieldTerms = reader.terms(field);\n      if (fieldTerms == null) {\n        return null;\n      }\n\n      // Reuse single TermsEnum below:\n      final TermsEnum termsEnum = fieldTerms.iterator(null);\n\n      for (int pos=0; pos<postingsFreqs.length; pos++) {\n        Term[] terms = termArrays.get(pos);\n\n        final DocsAndPositionsEnum postingsEnum;\n        int docFreq;\n\n        if (terms.length > 1) {\n          postingsEnum = new UnionDocsAndPositionsEnum(liveDocs, context, terms, termContexts, termsEnum);\n\n          // coarse -- this overcounts since a given doc can\n          // have more than one term:\n          docFreq = 0;\n          for(int termIdx=0;termIdx<terms.length;termIdx++) {\n            final Term term = terms[termIdx];\n            TermState termState = termContexts.get(term).get(context.ord);\n            if (termState == null) {\n              // Term not in reader\n              continue;\n            }\n            termsEnum.seekExact(term.bytes(), termState);\n            docFreq += termsEnum.docFreq();\n          }\n\n          if (docFreq == 0) {\n            // None of the terms are in this reader\n            return null;\n          }\n        } else {\n          final Term term = terms[0];\n          TermState termState = termContexts.get(term).get(context.ord);\n          if (termState == null) {\n            // Term not in reader\n            return null;\n          }\n          termsEnum.seekExact(term.bytes(), termState);\n          postingsEnum = termsEnum.docsAndPositions(liveDocs, null);\n\n          if (postingsEnum == null) {\n            // term does exist, but has no positions\n            assert termsEnum.docs(liveDocs, null) != null: \"termstate found but no term exists in reader\";\n            throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed without position data; cannot run PhraseQuery (term=\" + term.text() + \")\");\n          }\n\n          docFreq = termsEnum.docFreq();\n        }\n\n        postingsFreqs[pos] = new PhraseQuery.PostingsAndFreq(postingsEnum, docFreq, positions.get(pos).intValue(), terms[0]);\n      }\n\n      // sort by increasing docFreq order\n      if (slop == 0) {\n        ArrayUtil.mergeSort(postingsFreqs);\n      }\n\n      if (slop == 0) {\n        ExactPhraseScorer s = new ExactPhraseScorer(this, postingsFreqs, similarity.exactDocScorer(stats, field, context));\n        if (s.noDocs) {\n          return null;\n        } else {\n          return s;\n        }\n      } else {\n        return new SloppyPhraseScorer(this, postingsFreqs, slop, similarity.sloppyDocScorer(stats, field, context));\n      }\n    }\n\n","bugFix":null,"bugIntro":["02331260bb246364779cb6f04919ca47900d01bb"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b65b350ca9588f9fc76ce7d6804160d06c45ff42","date":1323026297,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","sourceNew":"    @Override\n    public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n        boolean topScorer, Bits acceptDocs) throws IOException {\n      assert !termArrays.isEmpty();\n      final IndexReader reader = context.reader;\n      final Bits liveDocs = acceptDocs;\n      \n      PhraseQuery.PostingsAndFreq[] postingsFreqs = new PhraseQuery.PostingsAndFreq[termArrays.size()];\n\n      final Terms fieldTerms = reader.terms(field);\n      if (fieldTerms == null) {\n        return null;\n      }\n\n      // Reuse single TermsEnum below:\n      final TermsEnum termsEnum = fieldTerms.iterator(null);\n\n      for (int pos=0; pos<postingsFreqs.length; pos++) {\n        Term[] terms = termArrays.get(pos);\n\n        final DocsAndPositionsEnum postingsEnum;\n        int docFreq;\n\n        if (terms.length > 1) {\n          postingsEnum = new UnionDocsAndPositionsEnum(liveDocs, context, terms, termContexts, termsEnum);\n\n          // coarse -- this overcounts since a given doc can\n          // have more than one term:\n          docFreq = 0;\n          for(int termIdx=0;termIdx<terms.length;termIdx++) {\n            final Term term = terms[termIdx];\n            TermState termState = termContexts.get(term).get(context.ord);\n            if (termState == null) {\n              // Term not in reader\n              continue;\n            }\n            termsEnum.seekExact(term.bytes(), termState);\n            docFreq += termsEnum.docFreq();\n          }\n\n          if (docFreq == 0) {\n            // None of the terms are in this reader\n            return null;\n          }\n        } else {\n          final Term term = terms[0];\n          TermState termState = termContexts.get(term).get(context.ord);\n          if (termState == null) {\n            // Term not in reader\n            return null;\n          }\n          termsEnum.seekExact(term.bytes(), termState);\n          postingsEnum = termsEnum.docsAndPositions(liveDocs, null);\n\n          if (postingsEnum == null) {\n            // term does exist, but has no positions\n            assert termsEnum.docs(liveDocs, null, false) != null: \"termstate found but no term exists in reader\";\n            throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed without position data; cannot run PhraseQuery (term=\" + term.text() + \")\");\n          }\n\n          docFreq = termsEnum.docFreq();\n        }\n\n        postingsFreqs[pos] = new PhraseQuery.PostingsAndFreq(postingsEnum, docFreq, positions.get(pos).intValue(), terms[0]);\n      }\n\n      // sort by increasing docFreq order\n      if (slop == 0) {\n        ArrayUtil.mergeSort(postingsFreqs);\n      }\n\n      if (slop == 0) {\n        ExactPhraseScorer s = new ExactPhraseScorer(this, postingsFreqs, similarity.exactDocScorer(stats, field, context));\n        if (s.noDocs) {\n          return null;\n        } else {\n          return s;\n        }\n      } else {\n        return new SloppyPhraseScorer(this, postingsFreqs, slop, similarity.sloppyDocScorer(stats, field, context));\n      }\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n        boolean topScorer, Bits acceptDocs) throws IOException {\n      assert !termArrays.isEmpty();\n      final IndexReader reader = context.reader;\n      final Bits liveDocs = acceptDocs;\n      \n      PhraseQuery.PostingsAndFreq[] postingsFreqs = new PhraseQuery.PostingsAndFreq[termArrays.size()];\n\n      final Terms fieldTerms = reader.terms(field);\n      if (fieldTerms == null) {\n        return null;\n      }\n\n      // Reuse single TermsEnum below:\n      final TermsEnum termsEnum = fieldTerms.iterator(null);\n\n      for (int pos=0; pos<postingsFreqs.length; pos++) {\n        Term[] terms = termArrays.get(pos);\n\n        final DocsAndPositionsEnum postingsEnum;\n        int docFreq;\n\n        if (terms.length > 1) {\n          postingsEnum = new UnionDocsAndPositionsEnum(liveDocs, context, terms, termContexts, termsEnum);\n\n          // coarse -- this overcounts since a given doc can\n          // have more than one term:\n          docFreq = 0;\n          for(int termIdx=0;termIdx<terms.length;termIdx++) {\n            final Term term = terms[termIdx];\n            TermState termState = termContexts.get(term).get(context.ord);\n            if (termState == null) {\n              // Term not in reader\n              continue;\n            }\n            termsEnum.seekExact(term.bytes(), termState);\n            docFreq += termsEnum.docFreq();\n          }\n\n          if (docFreq == 0) {\n            // None of the terms are in this reader\n            return null;\n          }\n        } else {\n          final Term term = terms[0];\n          TermState termState = termContexts.get(term).get(context.ord);\n          if (termState == null) {\n            // Term not in reader\n            return null;\n          }\n          termsEnum.seekExact(term.bytes(), termState);\n          postingsEnum = termsEnum.docsAndPositions(liveDocs, null);\n\n          if (postingsEnum == null) {\n            // term does exist, but has no positions\n            assert termsEnum.docs(liveDocs, null) != null: \"termstate found but no term exists in reader\";\n            throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed without position data; cannot run PhraseQuery (term=\" + term.text() + \")\");\n          }\n\n          docFreq = termsEnum.docFreq();\n        }\n\n        postingsFreqs[pos] = new PhraseQuery.PostingsAndFreq(postingsEnum, docFreq, positions.get(pos).intValue(), terms[0]);\n      }\n\n      // sort by increasing docFreq order\n      if (slop == 0) {\n        ArrayUtil.mergeSort(postingsFreqs);\n      }\n\n      if (slop == 0) {\n        ExactPhraseScorer s = new ExactPhraseScorer(this, postingsFreqs, similarity.exactDocScorer(stats, field, context));\n        if (s.noDocs) {\n          return null;\n        } else {\n          return s;\n        }\n      } else {\n        return new SloppyPhraseScorer(this, postingsFreqs, slop, similarity.sloppyDocScorer(stats, field, context));\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"31f025ae60076ae95274433f3fe8e6ace2857a87","date":1326669465,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","sourceNew":"    @Override\n    public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n        boolean topScorer, Bits acceptDocs) throws IOException {\n      assert !termArrays.isEmpty();\n      final IndexReader reader = context.reader;\n      final Bits liveDocs = acceptDocs;\n      \n      PhraseQuery.PostingsAndFreq[] postingsFreqs = new PhraseQuery.PostingsAndFreq[termArrays.size()];\n\n      final Terms fieldTerms = reader.terms(field);\n      if (fieldTerms == null) {\n        return null;\n      }\n\n      // Reuse single TermsEnum below:\n      final TermsEnum termsEnum = fieldTerms.iterator(null);\n\n      for (int pos=0; pos<postingsFreqs.length; pos++) {\n        Term[] terms = termArrays.get(pos);\n\n        final DocsAndPositionsEnum postingsEnum;\n        int docFreq;\n\n        if (terms.length > 1) {\n          postingsEnum = new UnionDocsAndPositionsEnum(liveDocs, context, terms, termContexts, termsEnum);\n\n          // coarse -- this overcounts since a given doc can\n          // have more than one term:\n          docFreq = 0;\n          for(int termIdx=0;termIdx<terms.length;termIdx++) {\n            final Term term = terms[termIdx];\n            TermState termState = termContexts.get(term).get(context.ord);\n            if (termState == null) {\n              // Term not in reader\n              continue;\n            }\n            termsEnum.seekExact(term.bytes(), termState);\n            docFreq += termsEnum.docFreq();\n          }\n\n          if (docFreq == 0) {\n            // None of the terms are in this reader\n            return null;\n          }\n        } else {\n          final Term term = terms[0];\n          TermState termState = termContexts.get(term).get(context.ord);\n          if (termState == null) {\n            // Term not in reader\n            return null;\n          }\n          termsEnum.seekExact(term.bytes(), termState);\n          postingsEnum = termsEnum.docsAndPositions(liveDocs, null, false);\n\n          if (postingsEnum == null) {\n            // term does exist, but has no positions\n            assert termsEnum.docs(liveDocs, null, false) != null: \"termstate found but no term exists in reader\";\n            throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed without position data; cannot run PhraseQuery (term=\" + term.text() + \")\");\n          }\n\n          docFreq = termsEnum.docFreq();\n        }\n\n        postingsFreqs[pos] = new PhraseQuery.PostingsAndFreq(postingsEnum, docFreq, positions.get(pos).intValue(), terms[0]);\n      }\n\n      // sort by increasing docFreq order\n      if (slop == 0) {\n        ArrayUtil.mergeSort(postingsFreqs);\n      }\n\n      if (slop == 0) {\n        ExactPhraseScorer s = new ExactPhraseScorer(this, postingsFreqs, similarity.exactDocScorer(stats, field, context));\n        if (s.noDocs) {\n          return null;\n        } else {\n          return s;\n        }\n      } else {\n        return new SloppyPhraseScorer(this, postingsFreqs, slop, similarity.sloppyDocScorer(stats, field, context));\n      }\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n        boolean topScorer, Bits acceptDocs) throws IOException {\n      assert !termArrays.isEmpty();\n      final IndexReader reader = context.reader;\n      final Bits liveDocs = acceptDocs;\n      \n      PhraseQuery.PostingsAndFreq[] postingsFreqs = new PhraseQuery.PostingsAndFreq[termArrays.size()];\n\n      final Terms fieldTerms = reader.terms(field);\n      if (fieldTerms == null) {\n        return null;\n      }\n\n      // Reuse single TermsEnum below:\n      final TermsEnum termsEnum = fieldTerms.iterator(null);\n\n      for (int pos=0; pos<postingsFreqs.length; pos++) {\n        Term[] terms = termArrays.get(pos);\n\n        final DocsAndPositionsEnum postingsEnum;\n        int docFreq;\n\n        if (terms.length > 1) {\n          postingsEnum = new UnionDocsAndPositionsEnum(liveDocs, context, terms, termContexts, termsEnum);\n\n          // coarse -- this overcounts since a given doc can\n          // have more than one term:\n          docFreq = 0;\n          for(int termIdx=0;termIdx<terms.length;termIdx++) {\n            final Term term = terms[termIdx];\n            TermState termState = termContexts.get(term).get(context.ord);\n            if (termState == null) {\n              // Term not in reader\n              continue;\n            }\n            termsEnum.seekExact(term.bytes(), termState);\n            docFreq += termsEnum.docFreq();\n          }\n\n          if (docFreq == 0) {\n            // None of the terms are in this reader\n            return null;\n          }\n        } else {\n          final Term term = terms[0];\n          TermState termState = termContexts.get(term).get(context.ord);\n          if (termState == null) {\n            // Term not in reader\n            return null;\n          }\n          termsEnum.seekExact(term.bytes(), termState);\n          postingsEnum = termsEnum.docsAndPositions(liveDocs, null);\n\n          if (postingsEnum == null) {\n            // term does exist, but has no positions\n            assert termsEnum.docs(liveDocs, null, false) != null: \"termstate found but no term exists in reader\";\n            throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed without position data; cannot run PhraseQuery (term=\" + term.text() + \")\");\n          }\n\n          docFreq = termsEnum.docFreq();\n        }\n\n        postingsFreqs[pos] = new PhraseQuery.PostingsAndFreq(postingsEnum, docFreq, positions.get(pos).intValue(), terms[0]);\n      }\n\n      // sort by increasing docFreq order\n      if (slop == 0) {\n        ArrayUtil.mergeSort(postingsFreqs);\n      }\n\n      if (slop == 0) {\n        ExactPhraseScorer s = new ExactPhraseScorer(this, postingsFreqs, similarity.exactDocScorer(stats, field, context));\n        if (s.noDocs) {\n          return null;\n        } else {\n          return s;\n        }\n      } else {\n        return new SloppyPhraseScorer(this, postingsFreqs, slop, similarity.sloppyDocScorer(stats, field, context));\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2725b2d479964ea5aaea0ba4ae2634716f3ec26c","date":1327188170,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","sourceNew":"    @Override\n    public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n        boolean topScorer, Bits acceptDocs) throws IOException {\n      assert !termArrays.isEmpty();\n      final AtomicIndexReader reader = context.reader;\n      final Bits liveDocs = acceptDocs;\n      \n      PhraseQuery.PostingsAndFreq[] postingsFreqs = new PhraseQuery.PostingsAndFreq[termArrays.size()];\n\n      final Terms fieldTerms = reader.terms(field);\n      if (fieldTerms == null) {\n        return null;\n      }\n\n      // Reuse single TermsEnum below:\n      final TermsEnum termsEnum = fieldTerms.iterator(null);\n\n      for (int pos=0; pos<postingsFreqs.length; pos++) {\n        Term[] terms = termArrays.get(pos);\n\n        final DocsAndPositionsEnum postingsEnum;\n        int docFreq;\n\n        if (terms.length > 1) {\n          postingsEnum = new UnionDocsAndPositionsEnum(liveDocs, context, terms, termContexts, termsEnum);\n\n          // coarse -- this overcounts since a given doc can\n          // have more than one term:\n          docFreq = 0;\n          for(int termIdx=0;termIdx<terms.length;termIdx++) {\n            final Term term = terms[termIdx];\n            TermState termState = termContexts.get(term).get(context.ord);\n            if (termState == null) {\n              // Term not in reader\n              continue;\n            }\n            termsEnum.seekExact(term.bytes(), termState);\n            docFreq += termsEnum.docFreq();\n          }\n\n          if (docFreq == 0) {\n            // None of the terms are in this reader\n            return null;\n          }\n        } else {\n          final Term term = terms[0];\n          TermState termState = termContexts.get(term).get(context.ord);\n          if (termState == null) {\n            // Term not in reader\n            return null;\n          }\n          termsEnum.seekExact(term.bytes(), termState);\n          postingsEnum = termsEnum.docsAndPositions(liveDocs, null, false);\n\n          if (postingsEnum == null) {\n            // term does exist, but has no positions\n            assert termsEnum.docs(liveDocs, null, false) != null: \"termstate found but no term exists in reader\";\n            throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed without position data; cannot run PhraseQuery (term=\" + term.text() + \")\");\n          }\n\n          docFreq = termsEnum.docFreq();\n        }\n\n        postingsFreqs[pos] = new PhraseQuery.PostingsAndFreq(postingsEnum, docFreq, positions.get(pos).intValue(), terms[0]);\n      }\n\n      // sort by increasing docFreq order\n      if (slop == 0) {\n        ArrayUtil.mergeSort(postingsFreqs);\n      }\n\n      if (slop == 0) {\n        ExactPhraseScorer s = new ExactPhraseScorer(this, postingsFreqs, similarity.exactDocScorer(stats, field, context));\n        if (s.noDocs) {\n          return null;\n        } else {\n          return s;\n        }\n      } else {\n        return new SloppyPhraseScorer(this, postingsFreqs, slop, similarity.sloppyDocScorer(stats, field, context));\n      }\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n        boolean topScorer, Bits acceptDocs) throws IOException {\n      assert !termArrays.isEmpty();\n      final IndexReader reader = context.reader;\n      final Bits liveDocs = acceptDocs;\n      \n      PhraseQuery.PostingsAndFreq[] postingsFreqs = new PhraseQuery.PostingsAndFreq[termArrays.size()];\n\n      final Terms fieldTerms = reader.terms(field);\n      if (fieldTerms == null) {\n        return null;\n      }\n\n      // Reuse single TermsEnum below:\n      final TermsEnum termsEnum = fieldTerms.iterator(null);\n\n      for (int pos=0; pos<postingsFreqs.length; pos++) {\n        Term[] terms = termArrays.get(pos);\n\n        final DocsAndPositionsEnum postingsEnum;\n        int docFreq;\n\n        if (terms.length > 1) {\n          postingsEnum = new UnionDocsAndPositionsEnum(liveDocs, context, terms, termContexts, termsEnum);\n\n          // coarse -- this overcounts since a given doc can\n          // have more than one term:\n          docFreq = 0;\n          for(int termIdx=0;termIdx<terms.length;termIdx++) {\n            final Term term = terms[termIdx];\n            TermState termState = termContexts.get(term).get(context.ord);\n            if (termState == null) {\n              // Term not in reader\n              continue;\n            }\n            termsEnum.seekExact(term.bytes(), termState);\n            docFreq += termsEnum.docFreq();\n          }\n\n          if (docFreq == 0) {\n            // None of the terms are in this reader\n            return null;\n          }\n        } else {\n          final Term term = terms[0];\n          TermState termState = termContexts.get(term).get(context.ord);\n          if (termState == null) {\n            // Term not in reader\n            return null;\n          }\n          termsEnum.seekExact(term.bytes(), termState);\n          postingsEnum = termsEnum.docsAndPositions(liveDocs, null, false);\n\n          if (postingsEnum == null) {\n            // term does exist, but has no positions\n            assert termsEnum.docs(liveDocs, null, false) != null: \"termstate found but no term exists in reader\";\n            throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed without position data; cannot run PhraseQuery (term=\" + term.text() + \")\");\n          }\n\n          docFreq = termsEnum.docFreq();\n        }\n\n        postingsFreqs[pos] = new PhraseQuery.PostingsAndFreq(postingsEnum, docFreq, positions.get(pos).intValue(), terms[0]);\n      }\n\n      // sort by increasing docFreq order\n      if (slop == 0) {\n        ArrayUtil.mergeSort(postingsFreqs);\n      }\n\n      if (slop == 0) {\n        ExactPhraseScorer s = new ExactPhraseScorer(this, postingsFreqs, similarity.exactDocScorer(stats, field, context));\n        if (s.noDocs) {\n          return null;\n        } else {\n          return s;\n        }\n      } else {\n        return new SloppyPhraseScorer(this, postingsFreqs, slop, similarity.sloppyDocScorer(stats, field, context));\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6fff8f4b218bd0626afcdce82027bafeb84a50a4","date":1327229950,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","sourceNew":"    @Override\n    public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n        boolean topScorer, Bits acceptDocs) throws IOException {\n      assert !termArrays.isEmpty();\n      final AtomicIndexReader reader = context.reader();\n      final Bits liveDocs = acceptDocs;\n      \n      PhraseQuery.PostingsAndFreq[] postingsFreqs = new PhraseQuery.PostingsAndFreq[termArrays.size()];\n\n      final Terms fieldTerms = reader.terms(field);\n      if (fieldTerms == null) {\n        return null;\n      }\n\n      // Reuse single TermsEnum below:\n      final TermsEnum termsEnum = fieldTerms.iterator(null);\n\n      for (int pos=0; pos<postingsFreqs.length; pos++) {\n        Term[] terms = termArrays.get(pos);\n\n        final DocsAndPositionsEnum postingsEnum;\n        int docFreq;\n\n        if (terms.length > 1) {\n          postingsEnum = new UnionDocsAndPositionsEnum(liveDocs, context, terms, termContexts, termsEnum);\n\n          // coarse -- this overcounts since a given doc can\n          // have more than one term:\n          docFreq = 0;\n          for(int termIdx=0;termIdx<terms.length;termIdx++) {\n            final Term term = terms[termIdx];\n            TermState termState = termContexts.get(term).get(context.ord);\n            if (termState == null) {\n              // Term not in reader\n              continue;\n            }\n            termsEnum.seekExact(term.bytes(), termState);\n            docFreq += termsEnum.docFreq();\n          }\n\n          if (docFreq == 0) {\n            // None of the terms are in this reader\n            return null;\n          }\n        } else {\n          final Term term = terms[0];\n          TermState termState = termContexts.get(term).get(context.ord);\n          if (termState == null) {\n            // Term not in reader\n            return null;\n          }\n          termsEnum.seekExact(term.bytes(), termState);\n          postingsEnum = termsEnum.docsAndPositions(liveDocs, null, false);\n\n          if (postingsEnum == null) {\n            // term does exist, but has no positions\n            assert termsEnum.docs(liveDocs, null, false) != null: \"termstate found but no term exists in reader\";\n            throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed without position data; cannot run PhraseQuery (term=\" + term.text() + \")\");\n          }\n\n          docFreq = termsEnum.docFreq();\n        }\n\n        postingsFreqs[pos] = new PhraseQuery.PostingsAndFreq(postingsEnum, docFreq, positions.get(pos).intValue(), terms[0]);\n      }\n\n      // sort by increasing docFreq order\n      if (slop == 0) {\n        ArrayUtil.mergeSort(postingsFreqs);\n      }\n\n      if (slop == 0) {\n        ExactPhraseScorer s = new ExactPhraseScorer(this, postingsFreqs, similarity.exactDocScorer(stats, field, context));\n        if (s.noDocs) {\n          return null;\n        } else {\n          return s;\n        }\n      } else {\n        return new SloppyPhraseScorer(this, postingsFreqs, slop, similarity.sloppyDocScorer(stats, field, context));\n      }\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n        boolean topScorer, Bits acceptDocs) throws IOException {\n      assert !termArrays.isEmpty();\n      final AtomicIndexReader reader = context.reader;\n      final Bits liveDocs = acceptDocs;\n      \n      PhraseQuery.PostingsAndFreq[] postingsFreqs = new PhraseQuery.PostingsAndFreq[termArrays.size()];\n\n      final Terms fieldTerms = reader.terms(field);\n      if (fieldTerms == null) {\n        return null;\n      }\n\n      // Reuse single TermsEnum below:\n      final TermsEnum termsEnum = fieldTerms.iterator(null);\n\n      for (int pos=0; pos<postingsFreqs.length; pos++) {\n        Term[] terms = termArrays.get(pos);\n\n        final DocsAndPositionsEnum postingsEnum;\n        int docFreq;\n\n        if (terms.length > 1) {\n          postingsEnum = new UnionDocsAndPositionsEnum(liveDocs, context, terms, termContexts, termsEnum);\n\n          // coarse -- this overcounts since a given doc can\n          // have more than one term:\n          docFreq = 0;\n          for(int termIdx=0;termIdx<terms.length;termIdx++) {\n            final Term term = terms[termIdx];\n            TermState termState = termContexts.get(term).get(context.ord);\n            if (termState == null) {\n              // Term not in reader\n              continue;\n            }\n            termsEnum.seekExact(term.bytes(), termState);\n            docFreq += termsEnum.docFreq();\n          }\n\n          if (docFreq == 0) {\n            // None of the terms are in this reader\n            return null;\n          }\n        } else {\n          final Term term = terms[0];\n          TermState termState = termContexts.get(term).get(context.ord);\n          if (termState == null) {\n            // Term not in reader\n            return null;\n          }\n          termsEnum.seekExact(term.bytes(), termState);\n          postingsEnum = termsEnum.docsAndPositions(liveDocs, null, false);\n\n          if (postingsEnum == null) {\n            // term does exist, but has no positions\n            assert termsEnum.docs(liveDocs, null, false) != null: \"termstate found but no term exists in reader\";\n            throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed without position data; cannot run PhraseQuery (term=\" + term.text() + \")\");\n          }\n\n          docFreq = termsEnum.docFreq();\n        }\n\n        postingsFreqs[pos] = new PhraseQuery.PostingsAndFreq(postingsEnum, docFreq, positions.get(pos).intValue(), terms[0]);\n      }\n\n      // sort by increasing docFreq order\n      if (slop == 0) {\n        ArrayUtil.mergeSort(postingsFreqs);\n      }\n\n      if (slop == 0) {\n        ExactPhraseScorer s = new ExactPhraseScorer(this, postingsFreqs, similarity.exactDocScorer(stats, field, context));\n        if (s.noDocs) {\n          return null;\n        } else {\n          return s;\n        }\n      } else {\n        return new SloppyPhraseScorer(this, postingsFreqs, slop, similarity.sloppyDocScorer(stats, field, context));\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"da6d5ac19a80d65b1e864251f155d30960353b7e","date":1327881054,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","sourceNew":"    @Override\n    public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n        boolean topScorer, Bits acceptDocs) throws IOException {\n      assert !termArrays.isEmpty();\n      final AtomicReader reader = context.reader();\n      final Bits liveDocs = acceptDocs;\n      \n      PhraseQuery.PostingsAndFreq[] postingsFreqs = new PhraseQuery.PostingsAndFreq[termArrays.size()];\n\n      final Terms fieldTerms = reader.terms(field);\n      if (fieldTerms == null) {\n        return null;\n      }\n\n      // Reuse single TermsEnum below:\n      final TermsEnum termsEnum = fieldTerms.iterator(null);\n\n      for (int pos=0; pos<postingsFreqs.length; pos++) {\n        Term[] terms = termArrays.get(pos);\n\n        final DocsAndPositionsEnum postingsEnum;\n        int docFreq;\n\n        if (terms.length > 1) {\n          postingsEnum = new UnionDocsAndPositionsEnum(liveDocs, context, terms, termContexts, termsEnum);\n\n          // coarse -- this overcounts since a given doc can\n          // have more than one term:\n          docFreq = 0;\n          for(int termIdx=0;termIdx<terms.length;termIdx++) {\n            final Term term = terms[termIdx];\n            TermState termState = termContexts.get(term).get(context.ord);\n            if (termState == null) {\n              // Term not in reader\n              continue;\n            }\n            termsEnum.seekExact(term.bytes(), termState);\n            docFreq += termsEnum.docFreq();\n          }\n\n          if (docFreq == 0) {\n            // None of the terms are in this reader\n            return null;\n          }\n        } else {\n          final Term term = terms[0];\n          TermState termState = termContexts.get(term).get(context.ord);\n          if (termState == null) {\n            // Term not in reader\n            return null;\n          }\n          termsEnum.seekExact(term.bytes(), termState);\n          postingsEnum = termsEnum.docsAndPositions(liveDocs, null, false);\n\n          if (postingsEnum == null) {\n            // term does exist, but has no positions\n            assert termsEnum.docs(liveDocs, null, false) != null: \"termstate found but no term exists in reader\";\n            throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed without position data; cannot run PhraseQuery (term=\" + term.text() + \")\");\n          }\n\n          docFreq = termsEnum.docFreq();\n        }\n\n        postingsFreqs[pos] = new PhraseQuery.PostingsAndFreq(postingsEnum, docFreq, positions.get(pos).intValue(), terms[0]);\n      }\n\n      // sort by increasing docFreq order\n      if (slop == 0) {\n        ArrayUtil.mergeSort(postingsFreqs);\n      }\n\n      if (slop == 0) {\n        ExactPhraseScorer s = new ExactPhraseScorer(this, postingsFreqs, similarity.exactDocScorer(stats, field, context));\n        if (s.noDocs) {\n          return null;\n        } else {\n          return s;\n        }\n      } else {\n        return new SloppyPhraseScorer(this, postingsFreqs, slop, similarity.sloppyDocScorer(stats, field, context));\n      }\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n        boolean topScorer, Bits acceptDocs) throws IOException {\n      assert !termArrays.isEmpty();\n      final AtomicIndexReader reader = context.reader();\n      final Bits liveDocs = acceptDocs;\n      \n      PhraseQuery.PostingsAndFreq[] postingsFreqs = new PhraseQuery.PostingsAndFreq[termArrays.size()];\n\n      final Terms fieldTerms = reader.terms(field);\n      if (fieldTerms == null) {\n        return null;\n      }\n\n      // Reuse single TermsEnum below:\n      final TermsEnum termsEnum = fieldTerms.iterator(null);\n\n      for (int pos=0; pos<postingsFreqs.length; pos++) {\n        Term[] terms = termArrays.get(pos);\n\n        final DocsAndPositionsEnum postingsEnum;\n        int docFreq;\n\n        if (terms.length > 1) {\n          postingsEnum = new UnionDocsAndPositionsEnum(liveDocs, context, terms, termContexts, termsEnum);\n\n          // coarse -- this overcounts since a given doc can\n          // have more than one term:\n          docFreq = 0;\n          for(int termIdx=0;termIdx<terms.length;termIdx++) {\n            final Term term = terms[termIdx];\n            TermState termState = termContexts.get(term).get(context.ord);\n            if (termState == null) {\n              // Term not in reader\n              continue;\n            }\n            termsEnum.seekExact(term.bytes(), termState);\n            docFreq += termsEnum.docFreq();\n          }\n\n          if (docFreq == 0) {\n            // None of the terms are in this reader\n            return null;\n          }\n        } else {\n          final Term term = terms[0];\n          TermState termState = termContexts.get(term).get(context.ord);\n          if (termState == null) {\n            // Term not in reader\n            return null;\n          }\n          termsEnum.seekExact(term.bytes(), termState);\n          postingsEnum = termsEnum.docsAndPositions(liveDocs, null, false);\n\n          if (postingsEnum == null) {\n            // term does exist, but has no positions\n            assert termsEnum.docs(liveDocs, null, false) != null: \"termstate found but no term exists in reader\";\n            throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed without position data; cannot run PhraseQuery (term=\" + term.text() + \")\");\n          }\n\n          docFreq = termsEnum.docFreq();\n        }\n\n        postingsFreqs[pos] = new PhraseQuery.PostingsAndFreq(postingsEnum, docFreq, positions.get(pos).intValue(), terms[0]);\n      }\n\n      // sort by increasing docFreq order\n      if (slop == 0) {\n        ArrayUtil.mergeSort(postingsFreqs);\n      }\n\n      if (slop == 0) {\n        ExactPhraseScorer s = new ExactPhraseScorer(this, postingsFreqs, similarity.exactDocScorer(stats, field, context));\n        if (s.noDocs) {\n          return null;\n        } else {\n          return s;\n        }\n      } else {\n        return new SloppyPhraseScorer(this, postingsFreqs, slop, similarity.sloppyDocScorer(stats, field, context));\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","sourceNew":"    @Override\n    public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n        boolean topScorer, Bits acceptDocs) throws IOException {\n      assert !termArrays.isEmpty();\n      final AtomicReader reader = context.reader();\n      final Bits liveDocs = acceptDocs;\n      \n      PhraseQuery.PostingsAndFreq[] postingsFreqs = new PhraseQuery.PostingsAndFreq[termArrays.size()];\n\n      final Terms fieldTerms = reader.terms(field);\n      if (fieldTerms == null) {\n        return null;\n      }\n\n      // Reuse single TermsEnum below:\n      final TermsEnum termsEnum = fieldTerms.iterator(null);\n\n      for (int pos=0; pos<postingsFreqs.length; pos++) {\n        Term[] terms = termArrays.get(pos);\n\n        final DocsAndPositionsEnum postingsEnum;\n        int docFreq;\n\n        if (terms.length > 1) {\n          postingsEnum = new UnionDocsAndPositionsEnum(liveDocs, context, terms, termContexts, termsEnum);\n\n          // coarse -- this overcounts since a given doc can\n          // have more than one term:\n          docFreq = 0;\n          for(int termIdx=0;termIdx<terms.length;termIdx++) {\n            final Term term = terms[termIdx];\n            TermState termState = termContexts.get(term).get(context.ord);\n            if (termState == null) {\n              // Term not in reader\n              continue;\n            }\n            termsEnum.seekExact(term.bytes(), termState);\n            docFreq += termsEnum.docFreq();\n          }\n\n          if (docFreq == 0) {\n            // None of the terms are in this reader\n            return null;\n          }\n        } else {\n          final Term term = terms[0];\n          TermState termState = termContexts.get(term).get(context.ord);\n          if (termState == null) {\n            // Term not in reader\n            return null;\n          }\n          termsEnum.seekExact(term.bytes(), termState);\n          postingsEnum = termsEnum.docsAndPositions(liveDocs, null, false);\n\n          if (postingsEnum == null) {\n            // term does exist, but has no positions\n            assert termsEnum.docs(liveDocs, null, false) != null: \"termstate found but no term exists in reader\";\n            throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed without position data; cannot run PhraseQuery (term=\" + term.text() + \")\");\n          }\n\n          docFreq = termsEnum.docFreq();\n        }\n\n        postingsFreqs[pos] = new PhraseQuery.PostingsAndFreq(postingsEnum, docFreq, positions.get(pos).intValue(), terms[0]);\n      }\n\n      // sort by increasing docFreq order\n      if (slop == 0) {\n        ArrayUtil.mergeSort(postingsFreqs);\n      }\n\n      if (slop == 0) {\n        ExactPhraseScorer s = new ExactPhraseScorer(this, postingsFreqs, similarity.exactDocScorer(stats, field, context));\n        if (s.noDocs) {\n          return null;\n        } else {\n          return s;\n        }\n      } else {\n        return new SloppyPhraseScorer(this, postingsFreqs, slop, similarity.sloppyDocScorer(stats, field, context));\n      }\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n        boolean topScorer, Bits acceptDocs) throws IOException {\n      assert !termArrays.isEmpty();\n      final IndexReader reader = context.reader;\n      final Bits liveDocs = acceptDocs;\n      \n      PhraseQuery.PostingsAndFreq[] postingsFreqs = new PhraseQuery.PostingsAndFreq[termArrays.size()];\n\n      final Terms fieldTerms = reader.terms(field);\n      if (fieldTerms == null) {\n        return null;\n      }\n\n      // Reuse single TermsEnum below:\n      final TermsEnum termsEnum = fieldTerms.iterator(null);\n\n      for (int pos=0; pos<postingsFreqs.length; pos++) {\n        Term[] terms = termArrays.get(pos);\n\n        final DocsAndPositionsEnum postingsEnum;\n        int docFreq;\n\n        if (terms.length > 1) {\n          postingsEnum = new UnionDocsAndPositionsEnum(liveDocs, context, terms, termContexts, termsEnum);\n\n          // coarse -- this overcounts since a given doc can\n          // have more than one term:\n          docFreq = 0;\n          for(int termIdx=0;termIdx<terms.length;termIdx++) {\n            final Term term = terms[termIdx];\n            TermState termState = termContexts.get(term).get(context.ord);\n            if (termState == null) {\n              // Term not in reader\n              continue;\n            }\n            termsEnum.seekExact(term.bytes(), termState);\n            docFreq += termsEnum.docFreq();\n          }\n\n          if (docFreq == 0) {\n            // None of the terms are in this reader\n            return null;\n          }\n        } else {\n          final Term term = terms[0];\n          TermState termState = termContexts.get(term).get(context.ord);\n          if (termState == null) {\n            // Term not in reader\n            return null;\n          }\n          termsEnum.seekExact(term.bytes(), termState);\n          postingsEnum = termsEnum.docsAndPositions(liveDocs, null, false);\n\n          if (postingsEnum == null) {\n            // term does exist, but has no positions\n            assert termsEnum.docs(liveDocs, null, false) != null: \"termstate found but no term exists in reader\";\n            throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed without position data; cannot run PhraseQuery (term=\" + term.text() + \")\");\n          }\n\n          docFreq = termsEnum.docFreq();\n        }\n\n        postingsFreqs[pos] = new PhraseQuery.PostingsAndFreq(postingsEnum, docFreq, positions.get(pos).intValue(), terms[0]);\n      }\n\n      // sort by increasing docFreq order\n      if (slop == 0) {\n        ArrayUtil.mergeSort(postingsFreqs);\n      }\n\n      if (slop == 0) {\n        ExactPhraseScorer s = new ExactPhraseScorer(this, postingsFreqs, similarity.exactDocScorer(stats, field, context));\n        if (s.noDocs) {\n          return null;\n        } else {\n          return s;\n        }\n      } else {\n        return new SloppyPhraseScorer(this, postingsFreqs, slop, similarity.sloppyDocScorer(stats, field, context));\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"660345363f16c7d4c38aa11a35bf59aa99466cf1","date":1328227279,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","sourceNew":"    @Override\n    public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n        boolean topScorer, Bits acceptDocs) throws IOException {\n      assert !termArrays.isEmpty();\n      final AtomicReader reader = context.reader();\n      final Bits liveDocs = acceptDocs;\n      \n      PhraseQuery.PostingsAndFreq[] postingsFreqs = new PhraseQuery.PostingsAndFreq[termArrays.size()];\n\n      final Terms fieldTerms = reader.terms(field);\n      if (fieldTerms == null) {\n        return null;\n      }\n\n      // Reuse single TermsEnum below:\n      final TermsEnum termsEnum = fieldTerms.iterator(null);\n\n      for (int pos=0; pos<postingsFreqs.length; pos++) {\n        Term[] terms = termArrays.get(pos);\n\n        final DocsAndPositionsEnum postingsEnum;\n        int docFreq;\n\n        if (terms.length > 1) {\n          postingsEnum = new UnionDocsAndPositionsEnum(liveDocs, context, terms, termContexts, termsEnum);\n\n          // coarse -- this overcounts since a given doc can\n          // have more than one term:\n          docFreq = 0;\n          for(int termIdx=0;termIdx<terms.length;termIdx++) {\n            final Term term = terms[termIdx];\n            TermState termState = termContexts.get(term).get(context.ord);\n            if (termState == null) {\n              // Term not in reader\n              continue;\n            }\n            termsEnum.seekExact(term.bytes(), termState);\n            docFreq += termsEnum.docFreq();\n          }\n\n          if (docFreq == 0) {\n            // None of the terms are in this reader\n            return null;\n          }\n        } else {\n          final Term term = terms[0];\n          TermState termState = termContexts.get(term).get(context.ord);\n          if (termState == null) {\n            // Term not in reader\n            return null;\n          }\n          termsEnum.seekExact(term.bytes(), termState);\n          postingsEnum = termsEnum.docsAndPositions(liveDocs, null, false);\n\n          if (postingsEnum == null) {\n            // term does exist, but has no positions\n            assert termsEnum.docs(liveDocs, null, false) != null: \"termstate found but no term exists in reader\";\n            throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed without position data; cannot run PhraseQuery (term=\" + term.text() + \")\");\n          }\n\n          docFreq = termsEnum.docFreq();\n        }\n\n        postingsFreqs[pos] = new PhraseQuery.PostingsAndFreq(postingsEnum, docFreq, positions.get(pos).intValue(), terms[0]);\n      }\n\n      // sort by increasing docFreq order\n      if (slop == 0) {\n        ArrayUtil.mergeSort(postingsFreqs);\n      }\n\n      if (slop == 0) {\n        ExactPhraseScorer s = new ExactPhraseScorer(this, postingsFreqs, similarity.exactSimScorer(stats, context));\n        if (s.noDocs) {\n          return null;\n        } else {\n          return s;\n        }\n      } else {\n        return new SloppyPhraseScorer(this, postingsFreqs, slop, similarity.sloppySimScorer(stats, context));\n      }\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n        boolean topScorer, Bits acceptDocs) throws IOException {\n      assert !termArrays.isEmpty();\n      final AtomicReader reader = context.reader();\n      final Bits liveDocs = acceptDocs;\n      \n      PhraseQuery.PostingsAndFreq[] postingsFreqs = new PhraseQuery.PostingsAndFreq[termArrays.size()];\n\n      final Terms fieldTerms = reader.terms(field);\n      if (fieldTerms == null) {\n        return null;\n      }\n\n      // Reuse single TermsEnum below:\n      final TermsEnum termsEnum = fieldTerms.iterator(null);\n\n      for (int pos=0; pos<postingsFreqs.length; pos++) {\n        Term[] terms = termArrays.get(pos);\n\n        final DocsAndPositionsEnum postingsEnum;\n        int docFreq;\n\n        if (terms.length > 1) {\n          postingsEnum = new UnionDocsAndPositionsEnum(liveDocs, context, terms, termContexts, termsEnum);\n\n          // coarse -- this overcounts since a given doc can\n          // have more than one term:\n          docFreq = 0;\n          for(int termIdx=0;termIdx<terms.length;termIdx++) {\n            final Term term = terms[termIdx];\n            TermState termState = termContexts.get(term).get(context.ord);\n            if (termState == null) {\n              // Term not in reader\n              continue;\n            }\n            termsEnum.seekExact(term.bytes(), termState);\n            docFreq += termsEnum.docFreq();\n          }\n\n          if (docFreq == 0) {\n            // None of the terms are in this reader\n            return null;\n          }\n        } else {\n          final Term term = terms[0];\n          TermState termState = termContexts.get(term).get(context.ord);\n          if (termState == null) {\n            // Term not in reader\n            return null;\n          }\n          termsEnum.seekExact(term.bytes(), termState);\n          postingsEnum = termsEnum.docsAndPositions(liveDocs, null, false);\n\n          if (postingsEnum == null) {\n            // term does exist, but has no positions\n            assert termsEnum.docs(liveDocs, null, false) != null: \"termstate found but no term exists in reader\";\n            throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed without position data; cannot run PhraseQuery (term=\" + term.text() + \")\");\n          }\n\n          docFreq = termsEnum.docFreq();\n        }\n\n        postingsFreqs[pos] = new PhraseQuery.PostingsAndFreq(postingsEnum, docFreq, positions.get(pos).intValue(), terms[0]);\n      }\n\n      // sort by increasing docFreq order\n      if (slop == 0) {\n        ArrayUtil.mergeSort(postingsFreqs);\n      }\n\n      if (slop == 0) {\n        ExactPhraseScorer s = new ExactPhraseScorer(this, postingsFreqs, similarity.exactDocScorer(stats, field, context));\n        if (s.noDocs) {\n          return null;\n        } else {\n          return s;\n        }\n      } else {\n        return new SloppyPhraseScorer(this, postingsFreqs, slop, similarity.sloppyDocScorer(stats, field, context));\n      }\n    }\n\n","bugFix":null,"bugIntro":["b799defcfda6d303cbb180917bf1e749089adf42"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","sourceNew":"    @Override\n    public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n        boolean topScorer, Bits acceptDocs) throws IOException {\n      assert !termArrays.isEmpty();\n      final AtomicReader reader = context.reader();\n      final Bits liveDocs = acceptDocs;\n      \n      PhraseQuery.PostingsAndFreq[] postingsFreqs = new PhraseQuery.PostingsAndFreq[termArrays.size()];\n\n      final Terms fieldTerms = reader.terms(field);\n      if (fieldTerms == null) {\n        return null;\n      }\n\n      // Reuse single TermsEnum below:\n      final TermsEnum termsEnum = fieldTerms.iterator(null);\n\n      for (int pos=0; pos<postingsFreqs.length; pos++) {\n        Term[] terms = termArrays.get(pos);\n\n        final DocsAndPositionsEnum postingsEnum;\n        int docFreq;\n\n        if (terms.length > 1) {\n          postingsEnum = new UnionDocsAndPositionsEnum(liveDocs, context, terms, termContexts, termsEnum);\n\n          // coarse -- this overcounts since a given doc can\n          // have more than one term:\n          docFreq = 0;\n          for(int termIdx=0;termIdx<terms.length;termIdx++) {\n            final Term term = terms[termIdx];\n            TermState termState = termContexts.get(term).get(context.ord);\n            if (termState == null) {\n              // Term not in reader\n              continue;\n            }\n            termsEnum.seekExact(term.bytes(), termState);\n            docFreq += termsEnum.docFreq();\n          }\n\n          if (docFreq == 0) {\n            // None of the terms are in this reader\n            return null;\n          }\n        } else {\n          final Term term = terms[0];\n          TermState termState = termContexts.get(term).get(context.ord);\n          if (termState == null) {\n            // Term not in reader\n            return null;\n          }\n          termsEnum.seekExact(term.bytes(), termState);\n          postingsEnum = termsEnum.docsAndPositions(liveDocs, null, false);\n\n          if (postingsEnum == null) {\n            // term does exist, but has no positions\n            assert termsEnum.docs(liveDocs, null, false) != null: \"termstate found but no term exists in reader\";\n            throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed without position data; cannot run PhraseQuery (term=\" + term.text() + \")\");\n          }\n\n          docFreq = termsEnum.docFreq();\n        }\n\n        postingsFreqs[pos] = new PhraseQuery.PostingsAndFreq(postingsEnum, docFreq, positions.get(pos).intValue(), terms[0]);\n      }\n\n      // sort by increasing docFreq order\n      if (slop == 0) {\n        ArrayUtil.mergeSort(postingsFreqs);\n      }\n\n      if (slop == 0) {\n        ExactPhraseScorer s = new ExactPhraseScorer(this, postingsFreqs, similarity.exactSimScorer(stats, context));\n        if (s.noDocs) {\n          return null;\n        } else {\n          return s;\n        }\n      } else {\n        return new SloppyPhraseScorer(this, postingsFreqs, slop, similarity.sloppySimScorer(stats, context));\n      }\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n        boolean topScorer, Bits acceptDocs) throws IOException {\n      assert !termArrays.isEmpty();\n      final AtomicReader reader = context.reader();\n      final Bits liveDocs = acceptDocs;\n      \n      PhraseQuery.PostingsAndFreq[] postingsFreqs = new PhraseQuery.PostingsAndFreq[termArrays.size()];\n\n      final Terms fieldTerms = reader.terms(field);\n      if (fieldTerms == null) {\n        return null;\n      }\n\n      // Reuse single TermsEnum below:\n      final TermsEnum termsEnum = fieldTerms.iterator(null);\n\n      for (int pos=0; pos<postingsFreqs.length; pos++) {\n        Term[] terms = termArrays.get(pos);\n\n        final DocsAndPositionsEnum postingsEnum;\n        int docFreq;\n\n        if (terms.length > 1) {\n          postingsEnum = new UnionDocsAndPositionsEnum(liveDocs, context, terms, termContexts, termsEnum);\n\n          // coarse -- this overcounts since a given doc can\n          // have more than one term:\n          docFreq = 0;\n          for(int termIdx=0;termIdx<terms.length;termIdx++) {\n            final Term term = terms[termIdx];\n            TermState termState = termContexts.get(term).get(context.ord);\n            if (termState == null) {\n              // Term not in reader\n              continue;\n            }\n            termsEnum.seekExact(term.bytes(), termState);\n            docFreq += termsEnum.docFreq();\n          }\n\n          if (docFreq == 0) {\n            // None of the terms are in this reader\n            return null;\n          }\n        } else {\n          final Term term = terms[0];\n          TermState termState = termContexts.get(term).get(context.ord);\n          if (termState == null) {\n            // Term not in reader\n            return null;\n          }\n          termsEnum.seekExact(term.bytes(), termState);\n          postingsEnum = termsEnum.docsAndPositions(liveDocs, null, false);\n\n          if (postingsEnum == null) {\n            // term does exist, but has no positions\n            assert termsEnum.docs(liveDocs, null, false) != null: \"termstate found but no term exists in reader\";\n            throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed without position data; cannot run PhraseQuery (term=\" + term.text() + \")\");\n          }\n\n          docFreq = termsEnum.docFreq();\n        }\n\n        postingsFreqs[pos] = new PhraseQuery.PostingsAndFreq(postingsEnum, docFreq, positions.get(pos).intValue(), terms[0]);\n      }\n\n      // sort by increasing docFreq order\n      if (slop == 0) {\n        ArrayUtil.mergeSort(postingsFreqs);\n      }\n\n      if (slop == 0) {\n        ExactPhraseScorer s = new ExactPhraseScorer(this, postingsFreqs, similarity.exactSimScorer(stats, context));\n        if (s.noDocs) {\n          return null;\n        } else {\n          return s;\n        }\n      } else {\n        return new SloppyPhraseScorer(this, postingsFreqs, slop, similarity.sloppySimScorer(stats, context));\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"660345363f16c7d4c38aa11a35bf59aa99466cf1":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["660345363f16c7d4c38aa11a35bf59aa99466cf1"],"3fc1f3f78b299e125f7e60f43b5d457392bea23f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6fff8f4b218bd0626afcdce82027bafeb84a50a4":["2725b2d479964ea5aaea0ba4ae2634716f3ec26c"],"e2297162a22c55456e200caef2cbcb00fe381120":["d827579cb8382b568e1eb2ab73a72189eb3d9b80"],"872cff1d3a554e0cd64014cd97f88d3002b0f491":["e2297162a22c55456e200caef2cbcb00fe381120"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["31f025ae60076ae95274433f3fe8e6ace2857a87","da6d5ac19a80d65b1e864251f155d30960353b7e"],"da6d5ac19a80d65b1e864251f155d30960353b7e":["6fff8f4b218bd0626afcdce82027bafeb84a50a4"],"b65b350ca9588f9fc76ce7d6804160d06c45ff42":["e2297162a22c55456e200caef2cbcb00fe381120","872cff1d3a554e0cd64014cd97f88d3002b0f491"],"d827579cb8382b568e1eb2ab73a72189eb3d9b80":["3fc1f3f78b299e125f7e60f43b5d457392bea23f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"31f025ae60076ae95274433f3fe8e6ace2857a87":["872cff1d3a554e0cd64014cd97f88d3002b0f491"],"2725b2d479964ea5aaea0ba4ae2634716f3ec26c":["31f025ae60076ae95274433f3fe8e6ace2857a87"]},"commit2Childs":{"660345363f16c7d4c38aa11a35bf59aa99466cf1":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3fc1f3f78b299e125f7e60f43b5d457392bea23f":["d827579cb8382b568e1eb2ab73a72189eb3d9b80"],"6fff8f4b218bd0626afcdce82027bafeb84a50a4":["da6d5ac19a80d65b1e864251f155d30960353b7e"],"e2297162a22c55456e200caef2cbcb00fe381120":["872cff1d3a554e0cd64014cd97f88d3002b0f491","b65b350ca9588f9fc76ce7d6804160d06c45ff42"],"872cff1d3a554e0cd64014cd97f88d3002b0f491":["b65b350ca9588f9fc76ce7d6804160d06c45ff42","31f025ae60076ae95274433f3fe8e6ace2857a87"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["660345363f16c7d4c38aa11a35bf59aa99466cf1"],"da6d5ac19a80d65b1e864251f155d30960353b7e":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"b65b350ca9588f9fc76ce7d6804160d06c45ff42":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3fc1f3f78b299e125f7e60f43b5d457392bea23f"],"d827579cb8382b568e1eb2ab73a72189eb3d9b80":["e2297162a22c55456e200caef2cbcb00fe381120"],"2725b2d479964ea5aaea0ba4ae2634716f3ec26c":["6fff8f4b218bd0626afcdce82027bafeb84a50a4"],"31f025ae60076ae95274433f3fe8e6ace2857a87":["5cab9a86bd67202d20b6adc463008c8e982b070a","2725b2d479964ea5aaea0ba4ae2634716f3ec26c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b65b350ca9588f9fc76ce7d6804160d06c45ff42","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}