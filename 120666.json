{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/ConversionEvaluator#constructConverter(LENGTH_CONSTANT,LENGTH_CONSTANT).mjava","commits":[{"id":"ba1e7de64990e3928b90142a52fb92eeff556475","date":1503713257,"type":1,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/ConversionEvaluator#constructConverter(LENGTH_CONSTANT,LENGTH_CONSTANT).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/ConversionEvaluator#getConvert(LENGTH_CONSTANT,LENGTH_CONSTANT).mjava","sourceNew":"  private Converter constructConverter(LENGTH_CONSTANT from, LENGTH_CONSTANT to) throws IOException {\n    switch(from) {\n      case INCHES:\n        switch(to) {\n          case MILLIMETERS:\n            return (double value) -> value * 25.4;\n          case CENTIMETERS:\n            return (double value) -> value * 2.54;\n          case METERS:\n            return (double value) -> value * 0.0254;\n          default:\n            throw new EvaluatorException(String.format(Locale.ROOT,  \"No conversion available from %s to %s\", from, to));\n        }\n      case FEET:\n        switch(to) {\n          case METERS:\n            return (double value) -> value * .30;\n          default:\n            throw new EvaluatorException(String.format(Locale.ROOT,  \"No conversion available from %s to %s\", from, to));\n        }\n      case YARDS:\n        switch(to) {\n          case METERS:\n            return (double value) -> value * .91;\n          case KILOMETERS:\n            return (double value) -> value * 0.00091;\n          default:\n            throw new EvaluatorException(String.format(Locale.ROOT,  \"No conversion available from %s to %s\", from, to));\n        }\n      case MILES:\n        switch(to) {\n          case KILOMETERS:\n            return (double value) -> value * 1.61;\n          default:\n            throw new EvaluatorException(String.format(Locale.ROOT,  \"No conversion available from %s to %s\", from, to));\n        }\n      case MILLIMETERS:\n        switch (to) {\n          case INCHES:\n            return (double value) -> value * 0.039;\n          default:\n            throw new EvaluatorException(String.format(Locale.ROOT,  \"No conversion available from %s to %s\", from, to));\n        }\n      case CENTIMETERS:\n        switch(to) {\n          case INCHES:\n            return (double value) -> value * 0.39;\n          default:\n            throw new EvaluatorException(String.format(Locale.ROOT,  \"No conversion available from %s to %s\", from, to));\n        }\n      case METERS:\n        switch(to) {\n          case FEET:\n            return (double value) -> value * 3.28;\n          default:\n            throw new EvaluatorException(String.format(Locale.ROOT,  \"No conversion available from %s to %s\", from, to));\n        }\n      case KILOMETERS:\n        switch(to) {\n          case MILES:\n            return (double value) -> value * 0.62;\n          case FEET:\n            return (double value) -> value * 3280.8;\n          default:\n            throw new EvaluatorException(String.format(Locale.ROOT,  \"No conversion available from %s to %s\", from, to));\n        }\n      default:\n        throw new EvaluatorException(String.format(Locale.ROOT,  \"No conversion available from %s to %s\", from, to));\n    }\n  }\n\n","sourceOld":"  private Convert getConvert(LENGTH_CONSTANT from, LENGTH_CONSTANT to) throws IOException {\n    switch(from) {\n      case INCHES:\n        switch(to) {\n          case MILLIMETERS:\n            return (double d) -> d*25.4;\n          case CENTIMETERS:\n            return (double d) -> d*2.54;\n          case METERS:\n            return (double d) -> d*0.0254;\n          default:\n            throw new EvaluatorException(\"No conversion available from \"+from+\" to \"+to);\n        }\n      case FEET:\n        switch(to) {\n          case METERS:\n            return (double d) -> d * .30;\n        }\n      case YARDS:\n        switch(to) {\n          case METERS:\n            return (double d) -> d * .91;\n          case KILOMETERS:\n            return (double d) -> d * 0.00091;\n          default:\n            throw new EvaluatorException(\"No conversion available from \"+from+\" to \"+to);\n        }\n      case MILES:\n        switch(to) {\n          case KILOMETERS:\n            return (double d) -> d * 1.61;\n          default:\n            throw new EvaluatorException(\"No conversion available from \"+from+\" to \"+to);\n        }\n      case MILLIMETERS:\n        switch (to) {\n          case INCHES:\n            return (double d) -> d * 0.039;\n          default:\n            throw new EvaluatorException(\"No conversion available from \"+from+\" to \"+to);\n        }\n      case CENTIMETERS:\n        switch(to) {\n          case INCHES:\n            return (double d) -> d * 0.39;\n          default:\n            throw new EvaluatorException(\"No conversion available from \"+from+\" to \"+to);\n        }\n      case METERS:\n        switch(to) {\n          case FEET:\n            return (double d) -> d * 3.28;\n          default:\n            throw new EvaluatorException(\"No conversion available from \"+from+\" to \"+to);\n        }\n      case KILOMETERS:\n        switch(to) {\n          case MILES:\n            return (double d) -> d * 0.62;\n          case FEET:\n            return (double d) -> d * 3280.8;\n        }\n      default:\n        throw new EvaluatorException(\"No conversion available from \"+from);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"45c28dbb559366e1f4ef8077346552bfb3f7ecf6","date":1503738439,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/ConversionEvaluator#constructConverter(LENGTH_CONSTANT,LENGTH_CONSTANT).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/ConversionEvaluator#getConvert(LENGTH_CONSTANT,LENGTH_CONSTANT).mjava","sourceNew":"  private Converter constructConverter(LENGTH_CONSTANT from, LENGTH_CONSTANT to) throws IOException {\n    switch(from) {\n      case INCHES:\n        switch(to) {\n          case MILLIMETERS:\n            return (double value) -> value * 25.4;\n          case CENTIMETERS:\n            return (double value) -> value * 2.54;\n          case METERS:\n            return (double value) -> value * 0.0254;\n          default:\n            throw new EvaluatorException(String.format(Locale.ROOT,  \"No conversion available from %s to %s\", from, to));\n        }\n      case FEET:\n        switch(to) {\n          case METERS:\n            return (double value) -> value * .30;\n          default:\n            throw new EvaluatorException(String.format(Locale.ROOT,  \"No conversion available from %s to %s\", from, to));\n        }\n      case YARDS:\n        switch(to) {\n          case METERS:\n            return (double value) -> value * .91;\n          case KILOMETERS:\n            return (double value) -> value * 0.00091;\n          default:\n            throw new EvaluatorException(String.format(Locale.ROOT,  \"No conversion available from %s to %s\", from, to));\n        }\n      case MILES:\n        switch(to) {\n          case KILOMETERS:\n            return (double value) -> value * 1.61;\n          default:\n            throw new EvaluatorException(String.format(Locale.ROOT,  \"No conversion available from %s to %s\", from, to));\n        }\n      case MILLIMETERS:\n        switch (to) {\n          case INCHES:\n            return (double value) -> value * 0.039;\n          default:\n            throw new EvaluatorException(String.format(Locale.ROOT,  \"No conversion available from %s to %s\", from, to));\n        }\n      case CENTIMETERS:\n        switch(to) {\n          case INCHES:\n            return (double value) -> value * 0.39;\n          default:\n            throw new EvaluatorException(String.format(Locale.ROOT,  \"No conversion available from %s to %s\", from, to));\n        }\n      case METERS:\n        switch(to) {\n          case FEET:\n            return (double value) -> value * 3.28;\n          default:\n            throw new EvaluatorException(String.format(Locale.ROOT,  \"No conversion available from %s to %s\", from, to));\n        }\n      case KILOMETERS:\n        switch(to) {\n          case MILES:\n            return (double value) -> value * 0.62;\n          case FEET:\n            return (double value) -> value * 3280.8;\n          default:\n            throw new EvaluatorException(String.format(Locale.ROOT,  \"No conversion available from %s to %s\", from, to));\n        }\n      default:\n        throw new EvaluatorException(String.format(Locale.ROOT,  \"No conversion available from %s to %s\", from, to));\n    }\n  }\n\n","sourceOld":"  private Convert getConvert(LENGTH_CONSTANT from, LENGTH_CONSTANT to) throws IOException {\n    switch(from) {\n      case INCHES:\n        switch(to) {\n          case MILLIMETERS:\n            return (double d) -> d*25.4;\n          case CENTIMETERS:\n            return (double d) -> d*2.54;\n          case METERS:\n            return (double d) -> d*0.0254;\n          default:\n            throw new EvaluatorException(\"No conversion available from \"+from+\" to \"+to);\n        }\n      case FEET:\n        switch(to) {\n          case METERS:\n            return (double d) -> d * .30;\n        }\n      case YARDS:\n        switch(to) {\n          case METERS:\n            return (double d) -> d * .91;\n          case KILOMETERS:\n            return (double d) -> d * 0.00091;\n          default:\n            throw new EvaluatorException(\"No conversion available from \"+from+\" to \"+to);\n        }\n      case MILES:\n        switch(to) {\n          case KILOMETERS:\n            return (double d) -> d * 1.61;\n          default:\n            throw new EvaluatorException(\"No conversion available from \"+from+\" to \"+to);\n        }\n      case MILLIMETERS:\n        switch (to) {\n          case INCHES:\n            return (double d) -> d * 0.039;\n          default:\n            throw new EvaluatorException(\"No conversion available from \"+from+\" to \"+to);\n        }\n      case CENTIMETERS:\n        switch(to) {\n          case INCHES:\n            return (double d) -> d * 0.39;\n          default:\n            throw new EvaluatorException(\"No conversion available from \"+from+\" to \"+to);\n        }\n      case METERS:\n        switch(to) {\n          case FEET:\n            return (double d) -> d * 3.28;\n          default:\n            throw new EvaluatorException(\"No conversion available from \"+from+\" to \"+to);\n        }\n      case KILOMETERS:\n        switch(to) {\n          case MILES:\n            return (double d) -> d * 0.62;\n          case FEET:\n            return (double d) -> d * 3280.8;\n        }\n      default:\n        throw new EvaluatorException(\"No conversion available from \"+from);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a7809d1d753b67f48b1a706e17034bf8b624ea3","date":1504366927,"type":1,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/ConversionEvaluator#constructConverter(LENGTH_CONSTANT,LENGTH_CONSTANT).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/ConversionEvaluator#getConvert(LENGTH_CONSTANT,LENGTH_CONSTANT).mjava","sourceNew":"  private Converter constructConverter(LENGTH_CONSTANT from, LENGTH_CONSTANT to) throws IOException {\n    switch(from) {\n      case INCHES:\n        switch(to) {\n          case MILLIMETERS:\n            return (double value) -> value * 25.4;\n          case CENTIMETERS:\n            return (double value) -> value * 2.54;\n          case METERS:\n            return (double value) -> value * 0.0254;\n          default:\n            throw new EvaluatorException(String.format(Locale.ROOT,  \"No conversion available from %s to %s\", from, to));\n        }\n      case FEET:\n        switch(to) {\n          case METERS:\n            return (double value) -> value * .30;\n          default:\n            throw new EvaluatorException(String.format(Locale.ROOT,  \"No conversion available from %s to %s\", from, to));\n        }\n      case YARDS:\n        switch(to) {\n          case METERS:\n            return (double value) -> value * .91;\n          case KILOMETERS:\n            return (double value) -> value * 0.00091;\n          default:\n            throw new EvaluatorException(String.format(Locale.ROOT,  \"No conversion available from %s to %s\", from, to));\n        }\n      case MILES:\n        switch(to) {\n          case KILOMETERS:\n            return (double value) -> value * 1.61;\n          default:\n            throw new EvaluatorException(String.format(Locale.ROOT,  \"No conversion available from %s to %s\", from, to));\n        }\n      case MILLIMETERS:\n        switch (to) {\n          case INCHES:\n            return (double value) -> value * 0.039;\n          default:\n            throw new EvaluatorException(String.format(Locale.ROOT,  \"No conversion available from %s to %s\", from, to));\n        }\n      case CENTIMETERS:\n        switch(to) {\n          case INCHES:\n            return (double value) -> value * 0.39;\n          default:\n            throw new EvaluatorException(String.format(Locale.ROOT,  \"No conversion available from %s to %s\", from, to));\n        }\n      case METERS:\n        switch(to) {\n          case FEET:\n            return (double value) -> value * 3.28;\n          default:\n            throw new EvaluatorException(String.format(Locale.ROOT,  \"No conversion available from %s to %s\", from, to));\n        }\n      case KILOMETERS:\n        switch(to) {\n          case MILES:\n            return (double value) -> value * 0.62;\n          case FEET:\n            return (double value) -> value * 3280.8;\n          default:\n            throw new EvaluatorException(String.format(Locale.ROOT,  \"No conversion available from %s to %s\", from, to));\n        }\n      default:\n        throw new EvaluatorException(String.format(Locale.ROOT,  \"No conversion available from %s to %s\", from, to));\n    }\n  }\n\n","sourceOld":"  private Convert getConvert(LENGTH_CONSTANT from, LENGTH_CONSTANT to) throws IOException {\n    switch(from) {\n      case INCHES:\n        switch(to) {\n          case MILLIMETERS:\n            return (double d) -> d*25.4;\n          case CENTIMETERS:\n            return (double d) -> d*2.54;\n          case METERS:\n            return (double d) -> d*0.0254;\n          default:\n            throw new EvaluatorException(\"No conversion available from \"+from+\" to \"+to);\n        }\n      case FEET:\n        switch(to) {\n          case METERS:\n            return (double d) -> d * .30;\n        }\n      case YARDS:\n        switch(to) {\n          case METERS:\n            return (double d) -> d * .91;\n          case KILOMETERS:\n            return (double d) -> d * 0.00091;\n          default:\n            throw new EvaluatorException(\"No conversion available from \"+from+\" to \"+to);\n        }\n      case MILES:\n        switch(to) {\n          case KILOMETERS:\n            return (double d) -> d * 1.61;\n          default:\n            throw new EvaluatorException(\"No conversion available from \"+from+\" to \"+to);\n        }\n      case MILLIMETERS:\n        switch (to) {\n          case INCHES:\n            return (double d) -> d * 0.039;\n          default:\n            throw new EvaluatorException(\"No conversion available from \"+from+\" to \"+to);\n        }\n      case CENTIMETERS:\n        switch(to) {\n          case INCHES:\n            return (double d) -> d * 0.39;\n          default:\n            throw new EvaluatorException(\"No conversion available from \"+from+\" to \"+to);\n        }\n      case METERS:\n        switch(to) {\n          case FEET:\n            return (double d) -> d * 3.28;\n          default:\n            throw new EvaluatorException(\"No conversion available from \"+from+\" to \"+to);\n        }\n      case KILOMETERS:\n        switch(to) {\n          case MILES:\n            return (double d) -> d * 0.62;\n          case FEET:\n            return (double d) -> d * 3280.8;\n        }\n      default:\n        throw new EvaluatorException(\"No conversion available from \"+from);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a7809d1d753b67f48b1a706e17034bf8b624ea3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","45c28dbb559366e1f4ef8077346552bfb3f7ecf6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"45c28dbb559366e1f4ef8077346552bfb3f7ecf6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ba1e7de64990e3928b90142a52fb92eeff556475"],"ba1e7de64990e3928b90142a52fb92eeff556475":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["45c28dbb559366e1f4ef8077346552bfb3f7ecf6"]},"commit2Childs":{"3a7809d1d753b67f48b1a706e17034bf8b624ea3":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","45c28dbb559366e1f4ef8077346552bfb3f7ecf6","ba1e7de64990e3928b90142a52fb92eeff556475"],"45c28dbb559366e1f4ef8077346552bfb3f7ecf6":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ba1e7de64990e3928b90142a52fb92eeff556475":["45c28dbb559366e1f4ef8077346552bfb3f7ecf6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}