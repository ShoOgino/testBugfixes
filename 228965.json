{"path":"lucene/core/src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testSparseIndex().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testSparseIndex().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testSparseIndex().mjava","sourceNew":"  // test using a sparse index (with deleted docs).\n  @Test\n  public void testSparseIndex() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n    for (int d = -20; d <= 20; d++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\",Integer.toString(d), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"body\",\"body\", StringField.TYPE_UNSTORED));\n      writer.addDocument(doc);\n    }\n    \n    writer.forceMerge(1);\n    writer.deleteDocuments(new Term(\"id\",\"0\"));\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir);\n    IndexSearcher search = newSearcher(reader);\n    assertTrue(reader.hasDeletions());\n\n    ScoreDoc[] result;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 40, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) 0),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) 0),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) 10),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 11, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) -10),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 11, result.length);\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  // test using a sparse index (with deleted docs).\n  @Test\n  public void testSparseIndex() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n    for (int d = -20; d <= 20; d++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\",Integer.toString(d), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"body\",\"body\", StringField.TYPE_UNSTORED));\n      writer.addDocument(doc);\n    }\n    \n    writer.forceMerge(1);\n    writer.deleteDocuments(new Term(\"id\",\"0\"));\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir);\n    IndexSearcher search = newSearcher(reader);\n    assertTrue(reader.hasDeletions());\n\n    ScoreDoc[] result;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 40, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) 0),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) 0),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) 10),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 11, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) -10),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 11, result.length);\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testSparseIndex().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testSparseIndex().mjava","sourceNew":"  // test using a sparse index (with deleted docs).\n  @Test\n  public void testSparseIndex() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n\n    for (int d = -20; d <= 20; d++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\",Integer.toString(d), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"body\",\"body\", StringField.TYPE_UNSTORED));\n      writer.addDocument(doc);\n    }\n    \n    writer.forceMerge(1);\n    writer.deleteDocuments(new Term(\"id\",\"0\"));\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir);\n    IndexSearcher search = newSearcher(reader);\n    assertTrue(reader.hasDeletions());\n\n    ScoreDoc[] result;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 40, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) 0),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) 0),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) 10),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 11, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) -10),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 11, result.length);\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  // test using a sparse index (with deleted docs).\n  @Test\n  public void testSparseIndex() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n    for (int d = -20; d <= 20; d++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\",Integer.toString(d), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"body\",\"body\", StringField.TYPE_UNSTORED));\n      writer.addDocument(doc);\n    }\n    \n    writer.forceMerge(1);\n    writer.deleteDocuments(new Term(\"id\",\"0\"));\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir);\n    IndexSearcher search = newSearcher(reader);\n    assertTrue(reader.hasDeletions());\n\n    ScoreDoc[] result;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 40, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) 0),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) 0),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) 10),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 11, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) -10),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 11, result.length);\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","date":1338430031,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testSparseIndex().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testSparseIndex().mjava","sourceNew":"  // test using a sparse index (with deleted docs).\n  @Test\n  public void testSparseIndex() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n\n    for (int d = -20; d <= 20; d++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\",Integer.toString(d), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"body\",\"body\", StringField.TYPE_UNSTORED));\n      writer.addDocument(doc);\n    }\n    \n    writer.forceMerge(1);\n    writer.deleteDocuments(new Term(\"id\",\"0\"));\n    writer.close();\n\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher search = newSearcher(reader);\n    assertTrue(reader.hasDeletions());\n\n    ScoreDoc[] result;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 40, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) 0),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) 0),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) 10),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 11, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) -10),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 11, result.length);\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  // test using a sparse index (with deleted docs).\n  @Test\n  public void testSparseIndex() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n\n    for (int d = -20; d <= 20; d++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\",Integer.toString(d), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"body\",\"body\", StringField.TYPE_UNSTORED));\n      writer.addDocument(doc);\n    }\n    \n    writer.forceMerge(1);\n    writer.deleteDocuments(new Term(\"id\",\"0\"));\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir);\n    IndexSearcher search = newSearcher(reader);\n    assertTrue(reader.hasDeletions());\n\n    ScoreDoc[] result;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 40, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) 0),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) 0),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) 10),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 11, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) -10),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 11, result.length);\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"04f07771a2a7dd3a395700665ed839c3dae2def2","date":1339350139,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testSparseIndex().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testSparseIndex().mjava","sourceNew":"  // test using a sparse index (with deleted docs).\n  @Test\n  public void testSparseIndex() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n\n    for (int d = -20; d <= 20; d++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", Integer.toString(d), Field.Store.NO));\n      doc.add(newStringField(\"body\", \"body\", Field.Store.NO));\n      writer.addDocument(doc);\n    }\n    \n    writer.forceMerge(1);\n    writer.deleteDocuments(new Term(\"id\",\"0\"));\n    writer.close();\n\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher search = newSearcher(reader);\n    assertTrue(reader.hasDeletions());\n\n    ScoreDoc[] result;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 40, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) 0),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) 0),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) 10),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 11, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) -10),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 11, result.length);\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  // test using a sparse index (with deleted docs).\n  @Test\n  public void testSparseIndex() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n\n    for (int d = -20; d <= 20; d++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\",Integer.toString(d), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"body\",\"body\", StringField.TYPE_UNSTORED));\n      writer.addDocument(doc);\n    }\n    \n    writer.forceMerge(1);\n    writer.deleteDocuments(new Term(\"id\",\"0\"));\n    writer.close();\n\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher search = newSearcher(reader);\n    assertTrue(reader.hasDeletions());\n\n    ScoreDoc[] result;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 40, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) 0),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) 0),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) 10),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 11, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) -10),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 11, result.length);\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"59a0020b413d44dd79d85d7a66ed5004265fb453","date":1371758877,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testSparseIndex().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testSparseIndex().mjava","sourceNew":"  // test using a sparse index (with deleted docs).\n  @Test\n  public void testSparseIndex() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n\n    for (int d = -20; d <= 20; d++) {\n      Document doc = new Document();\n      doc.add(new IntField(\"id_int\", d, Field.Store.NO));\n      doc.add(newStringField(\"body\", \"body\", Field.Store.NO));\n      writer.addDocument(doc);\n    }\n    \n    writer.forceMerge(1);\n    BytesRef term0 = new BytesRef();\n    NumericUtils.intToPrefixCoded(0, 0, term0);\n    writer.deleteDocuments(new Term(\"id_int\", term0));\n    writer.close();\n\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher search = newSearcher(reader);\n    assertTrue(reader.hasDeletions());\n\n    ScoreDoc[] result;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id_int\",-20,20,T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 40, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id_int\",0,20,T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id_int\",-20,0,T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id_int\",10,20,T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 11, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id_int\",-20,-10,T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 11, result.length);\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  // test using a sparse index (with deleted docs).\n  @Test\n  public void testSparseIndex() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n\n    for (int d = -20; d <= 20; d++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", Integer.toString(d), Field.Store.NO));\n      doc.add(newStringField(\"body\", \"body\", Field.Store.NO));\n      writer.addDocument(doc);\n    }\n    \n    writer.forceMerge(1);\n    writer.deleteDocuments(new Term(\"id\",\"0\"));\n    writer.close();\n\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher search = newSearcher(reader);\n    assertTrue(reader.hasDeletions());\n\n    ScoreDoc[] result;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 40, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) 0),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) 0),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) 10),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 11, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) -10),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 11, result.length);\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":["9274621789ce990dbfef455dabdf026bb3184821","7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testSparseIndex().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testSparseIndex().mjava","sourceNew":"  // test using a sparse index (with deleted docs).\n  @Test\n  public void testSparseIndex() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n\n    for (int d = -20; d <= 20; d++) {\n      Document doc = new Document();\n      doc.add(new IntField(\"id_int\", d, Field.Store.NO));\n      doc.add(newStringField(\"body\", \"body\", Field.Store.NO));\n      writer.addDocument(doc);\n    }\n    \n    writer.forceMerge(1);\n    BytesRef term0 = new BytesRef();\n    NumericUtils.intToPrefixCoded(0, 0, term0);\n    writer.deleteDocuments(new Term(\"id_int\", term0));\n    writer.close();\n\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher search = newSearcher(reader);\n    assertTrue(reader.hasDeletions());\n\n    ScoreDoc[] result;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id_int\",-20,20,T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 40, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id_int\",0,20,T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id_int\",-20,0,T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id_int\",10,20,T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 11, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id_int\",-20,-10,T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 11, result.length);\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  // test using a sparse index (with deleted docs).\n  @Test\n  public void testSparseIndex() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n\n    for (int d = -20; d <= 20; d++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", Integer.toString(d), Field.Store.NO));\n      doc.add(newStringField(\"body\", \"body\", Field.Store.NO));\n      writer.addDocument(doc);\n    }\n    \n    writer.forceMerge(1);\n    writer.deleteDocuments(new Term(\"id\",\"0\"));\n    writer.close();\n\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher search = newSearcher(reader);\n    assertTrue(reader.hasDeletions());\n\n    ScoreDoc[] result;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 40, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) 0),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) 0),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) 10),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 11, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) -10),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 11, result.length);\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testSparseIndex().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testSparseIndex().mjava","sourceNew":"  // test using a sparse index (with deleted docs).\n  @Test\n  public void testSparseIndex() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n\n    for (int d = -20; d <= 20; d++) {\n      Document doc = new Document();\n      doc.add(new IntField(\"id_int\", d, Field.Store.NO));\n      doc.add(newStringField(\"body\", \"body\", Field.Store.NO));\n      writer.addDocument(doc);\n    }\n    \n    writer.forceMerge(1);\n    BytesRef term0 = new BytesRef();\n    NumericUtils.intToPrefixCoded(0, 0, term0);\n    writer.deleteDocuments(new Term(\"id_int\", term0));\n    writer.shutdown();\n\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher search = newSearcher(reader);\n    assertTrue(reader.hasDeletions());\n\n    ScoreDoc[] result;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id_int\",-20,20,T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 40, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id_int\",0,20,T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id_int\",-20,0,T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id_int\",10,20,T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 11, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id_int\",-20,-10,T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 11, result.length);\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  // test using a sparse index (with deleted docs).\n  @Test\n  public void testSparseIndex() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n\n    for (int d = -20; d <= 20; d++) {\n      Document doc = new Document();\n      doc.add(new IntField(\"id_int\", d, Field.Store.NO));\n      doc.add(newStringField(\"body\", \"body\", Field.Store.NO));\n      writer.addDocument(doc);\n    }\n    \n    writer.forceMerge(1);\n    BytesRef term0 = new BytesRef();\n    NumericUtils.intToPrefixCoded(0, 0, term0);\n    writer.deleteDocuments(new Term(\"id_int\", term0));\n    writer.close();\n\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher search = newSearcher(reader);\n    assertTrue(reader.hasDeletions());\n\n    ScoreDoc[] result;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id_int\",-20,20,T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 40, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id_int\",0,20,T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id_int\",-20,0,T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id_int\",10,20,T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 11, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id_int\",-20,-10,T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 11, result.length);\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","date":1399816179,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testSparseIndex().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testSparseIndex().mjava","sourceNew":"  // test using a sparse index (with deleted docs).\n  @Test\n  public void testSparseIndex() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n\n    for (int d = -20; d <= 20; d++) {\n      Document doc = new Document();\n      doc.add(new IntField(\"id_int\", d, Field.Store.NO));\n      doc.add(new NumericDocValuesField(\"id_int\", d));\n      doc.add(newStringField(\"body\", \"body\", Field.Store.NO));\n      writer.addDocument(doc);\n    }\n    \n    writer.forceMerge(1);\n    BytesRef term0 = new BytesRef();\n    NumericUtils.intToPrefixCoded(0, 0, term0);\n    writer.deleteDocuments(new Term(\"id_int\", term0));\n    writer.shutdown();\n\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher search = newSearcher(reader);\n    assertTrue(reader.hasDeletions());\n\n    ScoreDoc[] result;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id_int\",-20,20,T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 40, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id_int\",0,20,T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id_int\",-20,0,T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id_int\",10,20,T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 11, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id_int\",-20,-10,T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 11, result.length);\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  // test using a sparse index (with deleted docs).\n  @Test\n  public void testSparseIndex() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n\n    for (int d = -20; d <= 20; d++) {\n      Document doc = new Document();\n      doc.add(new IntField(\"id_int\", d, Field.Store.NO));\n      doc.add(newStringField(\"body\", \"body\", Field.Store.NO));\n      writer.addDocument(doc);\n    }\n    \n    writer.forceMerge(1);\n    BytesRef term0 = new BytesRef();\n    NumericUtils.intToPrefixCoded(0, 0, term0);\n    writer.deleteDocuments(new Term(\"id_int\", term0));\n    writer.shutdown();\n\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher search = newSearcher(reader);\n    assertTrue(reader.hasDeletions());\n\n    ScoreDoc[] result;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id_int\",-20,20,T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 40, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id_int\",0,20,T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id_int\",-20,0,T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id_int\",10,20,T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 11, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id_int\",-20,-10,T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 11, result.length);\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9274621789ce990dbfef455dabdf026bb3184821","date":1400046684,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testSparseIndex().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testSparseIndex().mjava","sourceNew":"  // test using a sparse index (with deleted docs).\n  @Test\n  public void testSparseIndex() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n\n    for (int d = -20; d <= 20; d++) {\n      Document doc = new Document();\n      doc.add(new IntField(\"id_int\", d, Field.Store.NO));\n      doc.add(new NumericDocValuesField(\"id_int\", d));\n      doc.add(newStringField(\"body\", \"body\", Field.Store.NO));\n      writer.addDocument(doc);\n    }\n    \n    writer.forceMerge(1);\n    BytesRef term0 = new BytesRef();\n    NumericUtils.intToPrefixCoded(0, 0, term0);\n    writer.deleteDocuments(new Term(\"id_int\", term0));\n    writer.shutdown();\n\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher search = newSearcher(reader);\n    assertTrue(reader.hasDeletions());\n\n    ScoreDoc[] result;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    result = search.search(q,DocValuesRangeFilter.newIntRange(\"id_int\",-20,20,T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 40, result.length);\n\n    result = search.search(q,DocValuesRangeFilter.newIntRange(\"id_int\",0,20,T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,DocValuesRangeFilter.newIntRange(\"id_int\",-20,0,T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,DocValuesRangeFilter.newIntRange(\"id_int\",10,20,T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 11, result.length);\n\n    result = search.search(q,DocValuesRangeFilter.newIntRange(\"id_int\",-20,-10,T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 11, result.length);\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  // test using a sparse index (with deleted docs).\n  @Test\n  public void testSparseIndex() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n\n    for (int d = -20; d <= 20; d++) {\n      Document doc = new Document();\n      doc.add(new IntField(\"id_int\", d, Field.Store.NO));\n      doc.add(new NumericDocValuesField(\"id_int\", d));\n      doc.add(newStringField(\"body\", \"body\", Field.Store.NO));\n      writer.addDocument(doc);\n    }\n    \n    writer.forceMerge(1);\n    BytesRef term0 = new BytesRef();\n    NumericUtils.intToPrefixCoded(0, 0, term0);\n    writer.deleteDocuments(new Term(\"id_int\", term0));\n    writer.shutdown();\n\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher search = newSearcher(reader);\n    assertTrue(reader.hasDeletions());\n\n    ScoreDoc[] result;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id_int\",-20,20,T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 40, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id_int\",0,20,T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id_int\",-20,0,T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id_int\",10,20,T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 11, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id_int\",-20,-10,T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 11, result.length);\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":["59a0020b413d44dd79d85d7a66ed5004265fb453"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"93dd449115a9247533e44bab47e8429e5dccbc6d","date":1400258396,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testSparseIndex().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testSparseIndex().mjava","sourceNew":"  // test using a sparse index (with deleted docs).\n  @Test\n  public void testSparseIndex() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n\n    for (int d = -20; d <= 20; d++) {\n      Document doc = new Document();\n      doc.add(new IntField(\"id_int\", d, Field.Store.NO));\n      doc.add(new NumericDocValuesField(\"id_int\", d));\n      doc.add(newStringField(\"body\", \"body\", Field.Store.NO));\n      writer.addDocument(doc);\n    }\n    \n    writer.forceMerge(1);\n    BytesRef term0 = new BytesRef();\n    NumericUtils.intToPrefixCoded(0, 0, term0);\n    writer.deleteDocuments(new Term(\"id_int\", term0));\n    writer.shutdown();\n\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher search = newSearcher(reader);\n    assertTrue(reader.hasDeletions());\n\n    ScoreDoc[] result;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    result = search.search(q,DocValuesRangeFilter.newIntRange(\"id_int\",-20,20,T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 40, result.length);\n\n    result = search.search(q,DocValuesRangeFilter.newIntRange(\"id_int\",0,20,T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,DocValuesRangeFilter.newIntRange(\"id_int\",-20,0,T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,DocValuesRangeFilter.newIntRange(\"id_int\",10,20,T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 11, result.length);\n\n    result = search.search(q,DocValuesRangeFilter.newIntRange(\"id_int\",-20,-10,T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 11, result.length);\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  // test using a sparse index (with deleted docs).\n  @Test\n  public void testSparseIndex() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n\n    for (int d = -20; d <= 20; d++) {\n      Document doc = new Document();\n      doc.add(new IntField(\"id_int\", d, Field.Store.NO));\n      doc.add(newStringField(\"body\", \"body\", Field.Store.NO));\n      writer.addDocument(doc);\n    }\n    \n    writer.forceMerge(1);\n    BytesRef term0 = new BytesRef();\n    NumericUtils.intToPrefixCoded(0, 0, term0);\n    writer.deleteDocuments(new Term(\"id_int\", term0));\n    writer.shutdown();\n\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher search = newSearcher(reader);\n    assertTrue(reader.hasDeletions());\n\n    ScoreDoc[] result;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id_int\",-20,20,T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 40, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id_int\",0,20,T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id_int\",-20,0,T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id_int\",10,20,T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 11, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id_int\",-20,-10,T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 11, result.length);\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"56572ec06f1407c066d6b7399413178b33176cd8","date":1400495675,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testSparseIndex().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testSparseIndex().mjava","sourceNew":"  // test using a sparse index (with deleted docs).\n  @Test\n  public void testSparseIndex() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n\n    for (int d = -20; d <= 20; d++) {\n      Document doc = new Document();\n      doc.add(new IntField(\"id_int\", d, Field.Store.NO));\n      doc.add(new NumericDocValuesField(\"id_int\", d));\n      doc.add(newStringField(\"body\", \"body\", Field.Store.NO));\n      writer.addDocument(doc);\n    }\n    \n    writer.forceMerge(1);\n    BytesRef term0 = new BytesRef();\n    NumericUtils.intToPrefixCoded(0, 0, term0);\n    writer.deleteDocuments(new Term(\"id_int\", term0));\n    writer.shutdown();\n\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher search = newSearcher(reader);\n    assertTrue(reader.hasDeletions());\n\n    ScoreDoc[] result;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    result = search.search(q,DocValuesRangeFilter.newIntRange(\"id_int\",-20,20,T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 40, result.length);\n\n    result = search.search(q,DocValuesRangeFilter.newIntRange(\"id_int\",0,20,T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,DocValuesRangeFilter.newIntRange(\"id_int\",-20,0,T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,DocValuesRangeFilter.newIntRange(\"id_int\",10,20,T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 11, result.length);\n\n    result = search.search(q,DocValuesRangeFilter.newIntRange(\"id_int\",-20,-10,T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 11, result.length);\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  // test using a sparse index (with deleted docs).\n  @Test\n  public void testSparseIndex() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n\n    for (int d = -20; d <= 20; d++) {\n      Document doc = new Document();\n      doc.add(new IntField(\"id_int\", d, Field.Store.NO));\n      doc.add(newStringField(\"body\", \"body\", Field.Store.NO));\n      writer.addDocument(doc);\n    }\n    \n    writer.forceMerge(1);\n    BytesRef term0 = new BytesRef();\n    NumericUtils.intToPrefixCoded(0, 0, term0);\n    writer.deleteDocuments(new Term(\"id_int\", term0));\n    writer.shutdown();\n\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher search = newSearcher(reader);\n    assertTrue(reader.hasDeletions());\n\n    ScoreDoc[] result;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id_int\",-20,20,T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 40, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id_int\",0,20,T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id_int\",-20,0,T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id_int\",10,20,T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 11, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id_int\",-20,-10,T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 11, result.length);\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testSparseIndex().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testSparseIndex().mjava","sourceNew":"  // test using a sparse index (with deleted docs).\n  @Test\n  public void testSparseIndex() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n\n    for (int d = -20; d <= 20; d++) {\n      Document doc = new Document();\n      doc.add(new IntField(\"id_int\", d, Field.Store.NO));\n      doc.add(new NumericDocValuesField(\"id_int\", d));\n      doc.add(newStringField(\"body\", \"body\", Field.Store.NO));\n      writer.addDocument(doc);\n    }\n    \n    writer.forceMerge(1);\n    BytesRef term0 = new BytesRef();\n    NumericUtils.intToPrefixCoded(0, 0, term0);\n    writer.deleteDocuments(new Term(\"id_int\", term0));\n    writer.shutdown();\n\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher search = newSearcher(reader);\n    assertTrue(reader.hasDeletions());\n\n    ScoreDoc[] result;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    result = search.search(q,DocValuesRangeFilter.newIntRange(\"id_int\",-20,20,T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 40, result.length);\n\n    result = search.search(q,DocValuesRangeFilter.newIntRange(\"id_int\",0,20,T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,DocValuesRangeFilter.newIntRange(\"id_int\",-20,0,T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,DocValuesRangeFilter.newIntRange(\"id_int\",10,20,T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 11, result.length);\n\n    result = search.search(q,DocValuesRangeFilter.newIntRange(\"id_int\",-20,-10,T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 11, result.length);\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  // test using a sparse index (with deleted docs).\n  @Test\n  public void testSparseIndex() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n\n    for (int d = -20; d <= 20; d++) {\n      Document doc = new Document();\n      doc.add(new IntField(\"id_int\", d, Field.Store.NO));\n      doc.add(new NumericDocValuesField(\"id_int\", d));\n      doc.add(newStringField(\"body\", \"body\", Field.Store.NO));\n      writer.addDocument(doc);\n    }\n    \n    writer.forceMerge(1);\n    BytesRef term0 = new BytesRef();\n    NumericUtils.intToPrefixCoded(0, 0, term0);\n    writer.deleteDocuments(new Term(\"id_int\", term0));\n    writer.shutdown();\n\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher search = newSearcher(reader);\n    assertTrue(reader.hasDeletions());\n\n    ScoreDoc[] result;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    result = search.search(q,DocValuesRangeFilter.newIntRange(\"id_int\",-20,20,T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 40, result.length);\n\n    result = search.search(q,DocValuesRangeFilter.newIntRange(\"id_int\",0,20,T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,DocValuesRangeFilter.newIntRange(\"id_int\",-20,0,T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,DocValuesRangeFilter.newIntRange(\"id_int\",10,20,T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 11, result.length);\n\n    result = search.search(q,DocValuesRangeFilter.newIntRange(\"id_int\",-20,-10,T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 11, result.length);\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testSparseIndex().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testSparseIndex().mjava","sourceNew":"  // test using a sparse index (with deleted docs).\n  @Test\n  public void testSparseIndex() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n\n    for (int d = -20; d <= 20; d++) {\n      Document doc = new Document();\n      doc.add(new IntField(\"id_int\", d, Field.Store.NO));\n      doc.add(new NumericDocValuesField(\"id_int\", d));\n      doc.add(newStringField(\"body\", \"body\", Field.Store.NO));\n      writer.addDocument(doc);\n    }\n    \n    writer.forceMerge(1);\n    BytesRef term0 = new BytesRef();\n    NumericUtils.intToPrefixCoded(0, 0, term0);\n    writer.deleteDocuments(new Term(\"id_int\", term0));\n    writer.close();\n\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher search = newSearcher(reader);\n    assertTrue(reader.hasDeletions());\n\n    ScoreDoc[] result;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    result = search.search(q,DocValuesRangeFilter.newIntRange(\"id_int\",-20,20,T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 40, result.length);\n\n    result = search.search(q,DocValuesRangeFilter.newIntRange(\"id_int\",0,20,T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,DocValuesRangeFilter.newIntRange(\"id_int\",-20,0,T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,DocValuesRangeFilter.newIntRange(\"id_int\",10,20,T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 11, result.length);\n\n    result = search.search(q,DocValuesRangeFilter.newIntRange(\"id_int\",-20,-10,T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 11, result.length);\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  // test using a sparse index (with deleted docs).\n  @Test\n  public void testSparseIndex() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n\n    for (int d = -20; d <= 20; d++) {\n      Document doc = new Document();\n      doc.add(new IntField(\"id_int\", d, Field.Store.NO));\n      doc.add(new NumericDocValuesField(\"id_int\", d));\n      doc.add(newStringField(\"body\", \"body\", Field.Store.NO));\n      writer.addDocument(doc);\n    }\n    \n    writer.forceMerge(1);\n    BytesRef term0 = new BytesRef();\n    NumericUtils.intToPrefixCoded(0, 0, term0);\n    writer.deleteDocuments(new Term(\"id_int\", term0));\n    writer.shutdown();\n\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher search = newSearcher(reader);\n    assertTrue(reader.hasDeletions());\n\n    ScoreDoc[] result;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    result = search.search(q,DocValuesRangeFilter.newIntRange(\"id_int\",-20,20,T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 40, result.length);\n\n    result = search.search(q,DocValuesRangeFilter.newIntRange(\"id_int\",0,20,T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,DocValuesRangeFilter.newIntRange(\"id_int\",-20,0,T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,DocValuesRangeFilter.newIntRange(\"id_int\",10,20,T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 11, result.length);\n\n    result = search.search(q,DocValuesRangeFilter.newIntRange(\"id_int\",-20,-10,T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 11, result.length);\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","date":1407854805,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testSparseIndex().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testSparseIndex().mjava","sourceNew":"  // test using a sparse index (with deleted docs).\n  @Test\n  public void testSparseIndex() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n\n    for (int d = -20; d <= 20; d++) {\n      Document doc = new Document();\n      doc.add(new IntField(\"id_int\", d, Field.Store.NO));\n      doc.add(new NumericDocValuesField(\"id_int\", d));\n      doc.add(newStringField(\"body\", \"body\", Field.Store.NO));\n      writer.addDocument(doc);\n    }\n    \n    writer.forceMerge(1);\n    BytesRefBuilder term0 = new BytesRefBuilder();\n    NumericUtils.intToPrefixCoded(0, 0, term0);\n    writer.deleteDocuments(new Term(\"id_int\", term0.get()));\n    writer.close();\n\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher search = newSearcher(reader);\n    assertTrue(reader.hasDeletions());\n\n    ScoreDoc[] result;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    result = search.search(q,DocValuesRangeFilter.newIntRange(\"id_int\",-20,20,T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 40, result.length);\n\n    result = search.search(q,DocValuesRangeFilter.newIntRange(\"id_int\",0,20,T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,DocValuesRangeFilter.newIntRange(\"id_int\",-20,0,T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,DocValuesRangeFilter.newIntRange(\"id_int\",10,20,T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 11, result.length);\n\n    result = search.search(q,DocValuesRangeFilter.newIntRange(\"id_int\",-20,-10,T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 11, result.length);\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  // test using a sparse index (with deleted docs).\n  @Test\n  public void testSparseIndex() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n\n    for (int d = -20; d <= 20; d++) {\n      Document doc = new Document();\n      doc.add(new IntField(\"id_int\", d, Field.Store.NO));\n      doc.add(new NumericDocValuesField(\"id_int\", d));\n      doc.add(newStringField(\"body\", \"body\", Field.Store.NO));\n      writer.addDocument(doc);\n    }\n    \n    writer.forceMerge(1);\n    BytesRef term0 = new BytesRef();\n    NumericUtils.intToPrefixCoded(0, 0, term0);\n    writer.deleteDocuments(new Term(\"id_int\", term0));\n    writer.close();\n\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher search = newSearcher(reader);\n    assertTrue(reader.hasDeletions());\n\n    ScoreDoc[] result;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    result = search.search(q,DocValuesRangeFilter.newIntRange(\"id_int\",-20,20,T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 40, result.length);\n\n    result = search.search(q,DocValuesRangeFilter.newIntRange(\"id_int\",0,20,T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,DocValuesRangeFilter.newIntRange(\"id_int\",-20,0,T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,DocValuesRangeFilter.newIntRange(\"id_int\",10,20,T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 11, result.length);\n\n    result = search.search(q,DocValuesRangeFilter.newIntRange(\"id_int\",-20,-10,T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 11, result.length);\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":["59a0020b413d44dd79d85d7a66ed5004265fb453"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"484e80062d7ab2729bc82f0311d6a97dd913961a","date":1424450206,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testSparseIndex().mjava","sourceNew":null,"sourceOld":"  // test using a sparse index (with deleted docs).\n  @Test\n  public void testSparseIndex() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n\n    for (int d = -20; d <= 20; d++) {\n      Document doc = new Document();\n      doc.add(new IntField(\"id_int\", d, Field.Store.NO));\n      doc.add(new NumericDocValuesField(\"id_int\", d));\n      doc.add(newStringField(\"body\", \"body\", Field.Store.NO));\n      writer.addDocument(doc);\n    }\n    \n    writer.forceMerge(1);\n    BytesRefBuilder term0 = new BytesRefBuilder();\n    NumericUtils.intToPrefixCoded(0, 0, term0);\n    writer.deleteDocuments(new Term(\"id_int\", term0.get()));\n    writer.close();\n\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher search = newSearcher(reader);\n    assertTrue(reader.hasDeletions());\n\n    ScoreDoc[] result;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    result = search.search(q,DocValuesRangeFilter.newIntRange(\"id_int\",-20,20,T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 40, result.length);\n\n    result = search.search(q,DocValuesRangeFilter.newIntRange(\"id_int\",0,20,T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,DocValuesRangeFilter.newIntRange(\"id_int\",-20,0,T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,DocValuesRangeFilter.newIntRange(\"id_int\",10,20,T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 11, result.length);\n\n    result = search.search(q,DocValuesRangeFilter.newIntRange(\"id_int\",-20,-10,T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 11, result.length);\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"9274621789ce990dbfef455dabdf026bb3184821":["b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["04f07771a2a7dd3a395700665ed839c3dae2def2","59a0020b413d44dd79d85d7a66ed5004265fb453"],"484e80062d7ab2729bc82f0311d6a97dd913961a":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"56572ec06f1407c066d6b7399413178b33176cd8":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a","93dd449115a9247533e44bab47e8429e5dccbc6d"],"04f07771a2a7dd3a395700665ed839c3dae2def2":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a","9274621789ce990dbfef455dabdf026bb3184821"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"59a0020b413d44dd79d85d7a66ed5004265fb453":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["59a0020b413d44dd79d85d7a66ed5004265fb453"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["484e80062d7ab2729bc82f0311d6a97dd913961a"]},"commit2Childs":{"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"9274621789ce990dbfef455dabdf026bb3184821":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"484e80062d7ab2729bc82f0311d6a97dd913961a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["9274621789ce990dbfef455dabdf026bb3184821"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["484e80062d7ab2729bc82f0311d6a97dd913961a"],"56572ec06f1407c066d6b7399413178b33176cd8":[],"04f07771a2a7dd3a395700665ed839c3dae2def2":["37a0f60745e53927c4c876cfe5b5a58170f0646c","59a0020b413d44dd79d85d7a66ed5004265fb453"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","56572ec06f1407c066d6b7399413178b33176cd8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"59a0020b413d44dd79d85d7a66ed5004265fb453":["37a0f60745e53927c4c876cfe5b5a58170f0646c","ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","56572ec06f1407c066d6b7399413178b33176cd8","93dd449115a9247533e44bab47e8429e5dccbc6d"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","56572ec06f1407c066d6b7399413178b33176cd8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}