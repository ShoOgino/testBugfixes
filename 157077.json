{"path":"contrib/benchmark/src/java/org/apache/lucene/benchmark/utils/ExtractReuters#extractFile(File).mjava","commits":[{"id":"226abb667f503323e0d9473af1883fa03ef3a3fd","date":1163596173,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/utils/ExtractReuters#extractFile(File).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Override if you wish to change what is extracted\n     *\n     * @param sgmFile\n     */\n    protected void extractFile(File sgmFile)\n    {\n        try\n        {\n            BufferedReader reader = new BufferedReader(new FileReader(sgmFile));\n\n            StringBuffer buffer = new StringBuffer(1024);\n            StringBuffer outBuffer = new StringBuffer(1024);\n\n            String line = null;\n            int index = -1;\n            int docNumber = 0;\n            while ((line = reader.readLine()) != null)\n            {\n                //when we see a closing reuters tag, flush the file\n\n                if ((index = line.indexOf(\"</REUTERS\")) == -1)\n                {\n                    //Replace the SGM escape sequences\n\n                    buffer.append(line).append(' ');//accumulate the strings for now, then apply regular expression to get the pieces,\n                }\n                else\n                {\n                    //Extract the relevant pieces and write to a file in the output dir\n                    Matcher matcher = EXTRACTION_PATTERN.matcher(buffer);\n                    while (matcher.find())\n                    {\n                        for (int i = 1; i <= matcher.groupCount(); i++)\n                        {\n                            if (matcher.group(i) != null)\n                            {\n                                outBuffer.append(matcher.group(i));\n                            }\n                        }\n                        outBuffer.append(LINE_SEPARATOR).append(LINE_SEPARATOR);\n                    }\n                    String out = outBuffer.toString();\n                    for (int i = 0; i < META_CHARS_SERIALIZATIONS.length; i++)\n                    {\n                        out = out.replaceAll(META_CHARS_SERIALIZATIONS[i], META_CHARS[i]);\n                    }\n                    File outFile = new File(outputDir, sgmFile.getName() + \"-\" + (docNumber++) + \".txt\");\n                    //System.out.println(\"Writing \" + outFile);\n                    FileWriter writer = new FileWriter(outFile);\n                    writer.write(out);\n                    writer.close();\n                    outBuffer.setLength(0);\n                    buffer.setLength(0);\n                }\n            }\n        }\n\n        catch (\n                IOException e\n                )\n\n        {\n            throw new RuntimeException(e);\n        }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["42a270f0606309d514faa19e1d021eb7b42305a6","42a270f0606309d514faa19e1d021eb7b42305a6"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c55a660bceaf72068ba1fbf6856388430c0a7334","date":1174007816,"type":3,"author":"Doron Cohen","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/utils/ExtractReuters#extractFile(File).mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/utils/ExtractReuters#extractFile(File).mjava","sourceNew":"    /**\n     * Override if you wish to change what is extracted\n     *\n     * @param sgmFile\n     */\n    protected void extractFile(File sgmFile)\n    {\n        try\n        {\n            BufferedReader reader = new BufferedReader(new FileReader(sgmFile));\n\n            StringBuffer buffer = new StringBuffer(1024);\n            StringBuffer outBuffer = new StringBuffer(1024);\n\n            String line = null;\n            int index = -1;\n            int docNumber = 0;\n            while ((line = reader.readLine()) != null)\n            {\n                //when we see a closing reuters tag, flush the file\n\n                if ((index = line.indexOf(\"</REUTERS\")) == -1)\n                {\n                    //Replace the SGM escape sequences\n\n                    buffer.append(line).append(' ');//accumulate the strings for now, then apply regular expression to get the pieces,\n                }\n                else\n                {\n                    //Extract the relevant pieces and write to a file in the output dir\n                    Matcher matcher = EXTRACTION_PATTERN.matcher(buffer);\n                    while (matcher.find())\n                    {\n                        for (int i = 1; i <= matcher.groupCount(); i++)\n                        {\n                            if (matcher.group(i) != null)\n                            {\n                                outBuffer.append(matcher.group(i));\n                            }\n                        }\n                        outBuffer.append(LINE_SEPARATOR).append(LINE_SEPARATOR);\n                    }\n                    String out = outBuffer.toString();\n                    for (int i = 0; i < META_CHARS_SERIALIZATIONS.length; i++)\n                    {\n                        out = out.replaceAll(META_CHARS_SERIALIZATIONS[i], META_CHARS[i]);\n                    }\n                    File outFile = new File(outputDir, sgmFile.getName() + \"-\" + (docNumber++) + \".txt\");\n                    //System.out.println(\"Writing \" + outFile);\n                    FileWriter writer = new FileWriter(outFile);\n                    writer.write(out);\n                    writer.close();\n                    outBuffer.setLength(0);\n                    buffer.setLength(0);\n                }\n            }\n            reader.close();\n        }\n\n        catch (\n                IOException e\n                )\n\n        {\n            throw new RuntimeException(e);\n        }\n    }\n\n","sourceOld":"    /**\n     * Override if you wish to change what is extracted\n     *\n     * @param sgmFile\n     */\n    protected void extractFile(File sgmFile)\n    {\n        try\n        {\n            BufferedReader reader = new BufferedReader(new FileReader(sgmFile));\n\n            StringBuffer buffer = new StringBuffer(1024);\n            StringBuffer outBuffer = new StringBuffer(1024);\n\n            String line = null;\n            int index = -1;\n            int docNumber = 0;\n            while ((line = reader.readLine()) != null)\n            {\n                //when we see a closing reuters tag, flush the file\n\n                if ((index = line.indexOf(\"</REUTERS\")) == -1)\n                {\n                    //Replace the SGM escape sequences\n\n                    buffer.append(line).append(' ');//accumulate the strings for now, then apply regular expression to get the pieces,\n                }\n                else\n                {\n                    //Extract the relevant pieces and write to a file in the output dir\n                    Matcher matcher = EXTRACTION_PATTERN.matcher(buffer);\n                    while (matcher.find())\n                    {\n                        for (int i = 1; i <= matcher.groupCount(); i++)\n                        {\n                            if (matcher.group(i) != null)\n                            {\n                                outBuffer.append(matcher.group(i));\n                            }\n                        }\n                        outBuffer.append(LINE_SEPARATOR).append(LINE_SEPARATOR);\n                    }\n                    String out = outBuffer.toString();\n                    for (int i = 0; i < META_CHARS_SERIALIZATIONS.length; i++)\n                    {\n                        out = out.replaceAll(META_CHARS_SERIALIZATIONS[i], META_CHARS[i]);\n                    }\n                    File outFile = new File(outputDir, sgmFile.getName() + \"-\" + (docNumber++) + \".txt\");\n                    //System.out.println(\"Writing \" + outFile);\n                    FileWriter writer = new FileWriter(outFile);\n                    writer.write(out);\n                    writer.close();\n                    outBuffer.setLength(0);\n                    buffer.setLength(0);\n                }\n            }\n        }\n\n        catch (\n                IOException e\n                )\n\n        {\n            throw new RuntimeException(e);\n        }\n    }\n\n","bugFix":null,"bugIntro":["42a270f0606309d514faa19e1d021eb7b42305a6","42a270f0606309d514faa19e1d021eb7b42305a6"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a","date":1267298041,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/utils/ExtractReuters#extractFile(File).mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/utils/ExtractReuters#extractFile(File).mjava","sourceNew":"    /**\n     * Override if you wish to change what is extracted\n     *\n     * @param sgmFile\n     */\n    protected void extractFile(File sgmFile)\n    {\n        try\n        {\n            BufferedReader reader = new BufferedReader(new FileReader(sgmFile));\n\n            StringBuffer buffer = new StringBuffer(1024);\n            StringBuffer outBuffer = new StringBuffer(1024);\n\n            String line = null;\n            int docNumber = 0;\n            while ((line = reader.readLine()) != null)\n            {\n                //when we see a closing reuters tag, flush the file\n\n                if (line.indexOf(\"</REUTERS\") == -1) {\n                    //Replace the SGM escape sequences\n\n                    buffer.append(line).append(' ');//accumulate the strings for now, then apply regular expression to get the pieces,\n                }\n                else\n                {\n                    //Extract the relevant pieces and write to a file in the output dir\n                    Matcher matcher = EXTRACTION_PATTERN.matcher(buffer);\n                    while (matcher.find())\n                    {\n                        for (int i = 1; i <= matcher.groupCount(); i++)\n                        {\n                            if (matcher.group(i) != null)\n                            {\n                                outBuffer.append(matcher.group(i));\n                            }\n                        }\n                        outBuffer.append(LINE_SEPARATOR).append(LINE_SEPARATOR);\n                    }\n                    String out = outBuffer.toString();\n                    for (int i = 0; i < META_CHARS_SERIALIZATIONS.length; i++)\n                    {\n                        out = out.replaceAll(META_CHARS_SERIALIZATIONS[i], META_CHARS[i]);\n                    }\n                    File outFile = new File(outputDir, sgmFile.getName() + \"-\" + (docNumber++) + \".txt\");\n                    //System.out.println(\"Writing \" + outFile);\n                    FileWriter writer = new FileWriter(outFile);\n                    writer.write(out);\n                    writer.close();\n                    outBuffer.setLength(0);\n                    buffer.setLength(0);\n                }\n            }\n            reader.close();\n        }\n\n        catch (\n                IOException e\n                )\n\n        {\n            throw new RuntimeException(e);\n        }\n    }\n\n","sourceOld":"    /**\n     * Override if you wish to change what is extracted\n     *\n     * @param sgmFile\n     */\n    protected void extractFile(File sgmFile)\n    {\n        try\n        {\n            BufferedReader reader = new BufferedReader(new FileReader(sgmFile));\n\n            StringBuffer buffer = new StringBuffer(1024);\n            StringBuffer outBuffer = new StringBuffer(1024);\n\n            String line = null;\n            int index = -1;\n            int docNumber = 0;\n            while ((line = reader.readLine()) != null)\n            {\n                //when we see a closing reuters tag, flush the file\n\n                if ((index = line.indexOf(\"</REUTERS\")) == -1)\n                {\n                    //Replace the SGM escape sequences\n\n                    buffer.append(line).append(' ');//accumulate the strings for now, then apply regular expression to get the pieces,\n                }\n                else\n                {\n                    //Extract the relevant pieces and write to a file in the output dir\n                    Matcher matcher = EXTRACTION_PATTERN.matcher(buffer);\n                    while (matcher.find())\n                    {\n                        for (int i = 1; i <= matcher.groupCount(); i++)\n                        {\n                            if (matcher.group(i) != null)\n                            {\n                                outBuffer.append(matcher.group(i));\n                            }\n                        }\n                        outBuffer.append(LINE_SEPARATOR).append(LINE_SEPARATOR);\n                    }\n                    String out = outBuffer.toString();\n                    for (int i = 0; i < META_CHARS_SERIALIZATIONS.length; i++)\n                    {\n                        out = out.replaceAll(META_CHARS_SERIALIZATIONS[i], META_CHARS[i]);\n                    }\n                    File outFile = new File(outputDir, sgmFile.getName() + \"-\" + (docNumber++) + \".txt\");\n                    //System.out.println(\"Writing \" + outFile);\n                    FileWriter writer = new FileWriter(outFile);\n                    writer.write(out);\n                    writer.close();\n                    outBuffer.setLength(0);\n                    buffer.setLength(0);\n                }\n            }\n            reader.close();\n        }\n\n        catch (\n                IOException e\n                )\n\n        {\n            throw new RuntimeException(e);\n        }\n    }\n\n","bugFix":null,"bugIntro":["42a270f0606309d514faa19e1d021eb7b42305a6","42a270f0606309d514faa19e1d021eb7b42305a6"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/utils/ExtractReuters#extractFile(File).mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/utils/ExtractReuters#extractFile(File).mjava","sourceNew":"    /**\n     * Override if you wish to change what is extracted\n     *\n     * @param sgmFile\n     */\n    protected void extractFile(File sgmFile)\n    {\n        try\n        {\n            BufferedReader reader = new BufferedReader(new FileReader(sgmFile));\n\n            StringBuffer buffer = new StringBuffer(1024);\n            StringBuffer outBuffer = new StringBuffer(1024);\n\n            String line = null;\n            int docNumber = 0;\n            while ((line = reader.readLine()) != null)\n            {\n                //when we see a closing reuters tag, flush the file\n\n                if (line.indexOf(\"</REUTERS\") == -1) {\n                    //Replace the SGM escape sequences\n\n                    buffer.append(line).append(' ');//accumulate the strings for now, then apply regular expression to get the pieces,\n                }\n                else\n                {\n                    //Extract the relevant pieces and write to a file in the output dir\n                    Matcher matcher = EXTRACTION_PATTERN.matcher(buffer);\n                    while (matcher.find())\n                    {\n                        for (int i = 1; i <= matcher.groupCount(); i++)\n                        {\n                            if (matcher.group(i) != null)\n                            {\n                                outBuffer.append(matcher.group(i));\n                            }\n                        }\n                        outBuffer.append(LINE_SEPARATOR).append(LINE_SEPARATOR);\n                    }\n                    String out = outBuffer.toString();\n                    for (int i = 0; i < META_CHARS_SERIALIZATIONS.length; i++)\n                    {\n                        out = out.replaceAll(META_CHARS_SERIALIZATIONS[i], META_CHARS[i]);\n                    }\n                    File outFile = new File(outputDir, sgmFile.getName() + \"-\" + (docNumber++) + \".txt\");\n                    //System.out.println(\"Writing \" + outFile);\n                    FileWriter writer = new FileWriter(outFile);\n                    writer.write(out);\n                    writer.close();\n                    outBuffer.setLength(0);\n                    buffer.setLength(0);\n                }\n            }\n            reader.close();\n        }\n\n        catch (\n                IOException e\n                )\n\n        {\n            throw new RuntimeException(e);\n        }\n    }\n\n","sourceOld":"    /**\n     * Override if you wish to change what is extracted\n     *\n     * @param sgmFile\n     */\n    protected void extractFile(File sgmFile)\n    {\n        try\n        {\n            BufferedReader reader = new BufferedReader(new FileReader(sgmFile));\n\n            StringBuffer buffer = new StringBuffer(1024);\n            StringBuffer outBuffer = new StringBuffer(1024);\n\n            String line = null;\n            int docNumber = 0;\n            while ((line = reader.readLine()) != null)\n            {\n                //when we see a closing reuters tag, flush the file\n\n                if (line.indexOf(\"</REUTERS\") == -1) {\n                    //Replace the SGM escape sequences\n\n                    buffer.append(line).append(' ');//accumulate the strings for now, then apply regular expression to get the pieces,\n                }\n                else\n                {\n                    //Extract the relevant pieces and write to a file in the output dir\n                    Matcher matcher = EXTRACTION_PATTERN.matcher(buffer);\n                    while (matcher.find())\n                    {\n                        for (int i = 1; i <= matcher.groupCount(); i++)\n                        {\n                            if (matcher.group(i) != null)\n                            {\n                                outBuffer.append(matcher.group(i));\n                            }\n                        }\n                        outBuffer.append(LINE_SEPARATOR).append(LINE_SEPARATOR);\n                    }\n                    String out = outBuffer.toString();\n                    for (int i = 0; i < META_CHARS_SERIALIZATIONS.length; i++)\n                    {\n                        out = out.replaceAll(META_CHARS_SERIALIZATIONS[i], META_CHARS[i]);\n                    }\n                    File outFile = new File(outputDir, sgmFile.getName() + \"-\" + (docNumber++) + \".txt\");\n                    //System.out.println(\"Writing \" + outFile);\n                    FileWriter writer = new FileWriter(outFile);\n                    writer.write(out);\n                    writer.close();\n                    outBuffer.setLength(0);\n                    buffer.setLength(0);\n                }\n            }\n            reader.close();\n        }\n\n        catch (\n                IOException e\n                )\n\n        {\n            throw new RuntimeException(e);\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"226abb667f503323e0d9473af1883fa03ef3a3fd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c55a660bceaf72068ba1fbf6856388430c0a7334":["226abb667f503323e0d9473af1883fa03ef3a3fd"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["c55a660bceaf72068ba1fbf6856388430c0a7334"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"]},"commit2Childs":{"226abb667f503323e0d9473af1883fa03ef3a3fd":["c55a660bceaf72068ba1fbf6856388430c0a7334"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["226abb667f503323e0d9473af1883fa03ef3a3fd"],"c55a660bceaf72068ba1fbf6856388430c0a7334":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}