{"path":"solr/src/test/org/apache/solr/request/JSONWriterTest#testJSON().mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/request/JSONWriterTest#testJSON().mjava","pathOld":"/dev/null","sourceNew":"  public void testJSON() throws IOException {\n    SolrQueryRequest req = req(\"wt\",\"json\",\"json.nl\",\"arrarr\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    JSONResponseWriter w = new JSONResponseWriter();\n\n    StringWriter buf = new StringWriter();\n    NamedList nl = new NamedList();\n    nl.add(\"data1\", \"hello\");\n    nl.add(null, 42);\n    rsp.add(\"nl\", nl);\n\n    w.write(buf, req, rsp);\n    assertEquals(buf.toString(), \"{\\\"nl\\\":[[\\\"data1\\\",\\\"hello\\\"],[null,42]]}\");\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/test/org/apache/solr/request/JSONWriterTest#testJSON().mjava","sourceNew":null,"sourceOld":"  public void testJSON() throws IOException {\n    SolrQueryRequest req = req(\"wt\",\"json\",\"json.nl\",\"arrarr\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    JSONResponseWriter w = new JSONResponseWriter();\n\n    StringWriter buf = new StringWriter();\n    NamedList nl = new NamedList();\n    nl.add(\"data1\", \"hello\");\n    nl.add(null, 42);\n    rsp.add(\"nl\", nl);\n\n    w.write(buf, req, rsp);\n    assertEquals(buf.toString(), \"{\\\"nl\\\":[[\\\"data1\\\",\\\"hello\\\"],[null,42]]}\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/request/JSONWriterTest#testJSON().mjava","pathOld":"src/test/org/apache/solr/request/JSONWriterTest#testJSON().mjava","sourceNew":"  public void testJSON() throws IOException {\n    SolrQueryRequest req = req(\"wt\",\"json\",\"json.nl\",\"arrarr\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    JSONResponseWriter w = new JSONResponseWriter();\n\n    StringWriter buf = new StringWriter();\n    NamedList nl = new NamedList();\n    nl.add(\"data1\", \"hello\");\n    nl.add(null, 42);\n    rsp.add(\"nl\", nl);\n\n    w.write(buf, req, rsp);\n    assertEquals(buf.toString(), \"{\\\"nl\\\":[[\\\"data1\\\",\\\"hello\\\"],[null,42]]}\");\n\n  }\n\n","sourceOld":"  public void testJSON() throws IOException {\n    SolrQueryRequest req = req(\"wt\",\"json\",\"json.nl\",\"arrarr\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    JSONResponseWriter w = new JSONResponseWriter();\n\n    StringWriter buf = new StringWriter();\n    NamedList nl = new NamedList();\n    nl.add(\"data1\", \"hello\");\n    nl.add(null, 42);\n    rsp.add(\"nl\", nl);\n\n    w.write(buf, req, rsp);\n    assertEquals(buf.toString(), \"{\\\"nl\\\":[[\\\"data1\\\",\\\"hello\\\"],[null,42]]}\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/request/JSONWriterTest#testJSON().mjava","pathOld":"/dev/null","sourceNew":"  public void testJSON() throws IOException {\n    SolrQueryRequest req = req(\"wt\",\"json\",\"json.nl\",\"arrarr\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    JSONResponseWriter w = new JSONResponseWriter();\n\n    StringWriter buf = new StringWriter();\n    NamedList nl = new NamedList();\n    nl.add(\"data1\", \"hello\");\n    nl.add(null, 42);\n    rsp.add(\"nl\", nl);\n\n    w.write(buf, req, rsp);\n    assertEquals(buf.toString(), \"{\\\"nl\\\":[[\\\"data1\\\",\\\"hello\\\"],[null,42]]}\");\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"afeb033b2bd36d8ce9d82142b197da4dde13068b","date":1269115863,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/request/JSONWriterTest#testJSON().mjava","pathOld":"solr/src/test/org/apache/solr/request/JSONWriterTest#testJSON().mjava","sourceNew":"  @Test\n  public void testJSON() throws IOException {\n    SolrQueryRequest req = req(\"wt\",\"json\",\"json.nl\",\"arrarr\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    JSONResponseWriter w = new JSONResponseWriter();\n\n    StringWriter buf = new StringWriter();\n    NamedList nl = new NamedList();\n    nl.add(\"data1\", \"hello\");\n    nl.add(null, 42);\n    rsp.add(\"nl\", nl);\n\n    w.write(buf, req, rsp);\n    assertEquals(buf.toString(), \"{\\\"nl\\\":[[\\\"data1\\\",\\\"hello\\\"],[null,42]]}\");\n\n  }\n\n","sourceOld":"  public void testJSON() throws IOException {\n    SolrQueryRequest req = req(\"wt\",\"json\",\"json.nl\",\"arrarr\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    JSONResponseWriter w = new JSONResponseWriter();\n\n    StringWriter buf = new StringWriter();\n    NamedList nl = new NamedList();\n    nl.add(\"data1\", \"hello\");\n    nl.add(null, 42);\n    rsp.add(\"nl\", nl);\n\n    w.write(buf, req, rsp);\n    assertEquals(buf.toString(), \"{\\\"nl\\\":[[\\\"data1\\\",\\\"hello\\\"],[null,42]]}\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"75b37fb54210d54c3353b3792654e257c77d38b3","date":1287360857,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/request/JSONWriterTest#testJSON().mjava","pathOld":"solr/src/test/org/apache/solr/request/JSONWriterTest#testJSON().mjava","sourceNew":"  @Test\n  public void testJSON() throws IOException {\n    SolrQueryRequest req = req(\"wt\",\"json\",\"json.nl\",\"arrarr\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    JSONResponseWriter w = new JSONResponseWriter();\n\n    StringWriter buf = new StringWriter();\n    NamedList nl = new NamedList();\n    nl.add(\"data1\", \"hello\");\n    nl.add(null, 42);\n    rsp.add(\"nl\", nl);\n\n    w.write(buf, req, rsp);\n    assertEquals(buf.toString(), \"{\\\"nl\\\":[[\\\"data1\\\",\\\"hello\\\"],[null,42]]}\");\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testJSON() throws IOException {\n    SolrQueryRequest req = req(\"wt\",\"json\",\"json.nl\",\"arrarr\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    JSONResponseWriter w = new JSONResponseWriter();\n\n    StringWriter buf = new StringWriter();\n    NamedList nl = new NamedList();\n    nl.add(\"data1\", \"hello\");\n    nl.add(null, 42);\n    rsp.add(\"nl\", nl);\n\n    w.write(buf, req, rsp);\n    assertEquals(buf.toString(), \"{\\\"nl\\\":[[\\\"data1\\\",\\\"hello\\\"],[null,42]]}\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4ecea1664e8617d82eca3b8055a3c37cb4da8511","date":1287578668,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/request/JSONWriterTest#testJSON().mjava","pathOld":"solr/src/test/org/apache/solr/request/JSONWriterTest#testJSON().mjava","sourceNew":"  @Test\n  public void testJSON() throws IOException {\n    SolrQueryRequest req = req(\"wt\",\"json\",\"json.nl\",\"arrarr\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    JSONResponseWriter w = new JSONResponseWriter();\n\n    StringWriter buf = new StringWriter();\n    NamedList nl = new NamedList();\n    nl.add(\"data1\", \"hello\");\n    nl.add(null, 42);\n    rsp.add(\"nl\", nl);\n\n    w.write(buf, req, rsp);\n    assertEquals(buf.toString(), \"{\\\"nl\\\":[[\\\"data1\\\",\\\"hello\\\"],[null,42]]}\");\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testJSON() throws IOException {\n    SolrQueryRequest req = req(\"wt\",\"json\",\"json.nl\",\"arrarr\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    JSONResponseWriter w = new JSONResponseWriter();\n\n    StringWriter buf = new StringWriter();\n    NamedList nl = new NamedList();\n    nl.add(\"data1\", \"hello\");\n    nl.add(null, 42);\n    rsp.add(\"nl\", nl);\n\n    w.write(buf, req, rsp);\n    assertEquals(buf.toString(), \"{\\\"nl\\\":[[\\\"data1\\\",\\\"hello\\\"],[null,42]]}\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/request/JSONWriterTest#testJSON().mjava","pathOld":"solr/src/test/org/apache/solr/request/JSONWriterTest#testJSON().mjava","sourceNew":"  @Test\n  public void testJSON() throws IOException {\n    SolrQueryRequest req = req(\"wt\",\"json\",\"json.nl\",\"arrarr\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    JSONResponseWriter w = new JSONResponseWriter();\n\n    StringWriter buf = new StringWriter();\n    NamedList nl = new NamedList();\n    nl.add(\"data1\", \"hello\");\n    nl.add(null, 42);\n    rsp.add(\"nl\", nl);\n\n    w.write(buf, req, rsp);\n    assertEquals(buf.toString(), \"{\\\"nl\\\":[[\\\"data1\\\",\\\"hello\\\"],[null,42]]}\");\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testJSON() throws IOException {\n    SolrQueryRequest req = req(\"wt\",\"json\",\"json.nl\",\"arrarr\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    JSONResponseWriter w = new JSONResponseWriter();\n\n    StringWriter buf = new StringWriter();\n    NamedList nl = new NamedList();\n    nl.add(\"data1\", \"hello\");\n    nl.add(null, 42);\n    rsp.add(\"nl\", nl);\n\n    w.write(buf, req, rsp);\n    assertEquals(buf.toString(), \"{\\\"nl\\\":[[\\\"data1\\\",\\\"hello\\\"],[null,42]]}\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b8ad81f99cac0805cb57c4d47963d87d4a722a62","date":1305598173,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/request/JSONWriterTest#testJSON().mjava","pathOld":"solr/src/test/org/apache/solr/request/JSONWriterTest#testJSON().mjava","sourceNew":"  @Test\n  public void testJSON() throws IOException {\n    SolrQueryRequest req = req(\"wt\",\"json\",\"json.nl\",\"arrarr\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    JSONResponseWriter w = new JSONResponseWriter();\n\n    StringWriter buf = new StringWriter();\n    NamedList nl = new NamedList();\n    nl.add(\"data1\", \"he\\u2028llo\\u2029!\");       // make sure that 2028 and 2029 are both escaped (they are illegal in javascript)\n    nl.add(null, 42);\n    rsp.add(\"nl\", nl);\n\n    w.write(buf, req, rsp);\n    assertEquals(\"{\\\"nl\\\":[[\\\"data1\\\",\\\"he\\\\u2028llo\\\\u2029!\\\"],[null,42]]}\", buf.toString());\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testJSON() throws IOException {\n    SolrQueryRequest req = req(\"wt\",\"json\",\"json.nl\",\"arrarr\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    JSONResponseWriter w = new JSONResponseWriter();\n\n    StringWriter buf = new StringWriter();\n    NamedList nl = new NamedList();\n    nl.add(\"data1\", \"hello\");\n    nl.add(null, 42);\n    rsp.add(\"nl\", nl);\n\n    w.write(buf, req, rsp);\n    assertEquals(buf.toString(), \"{\\\"nl\\\":[[\\\"data1\\\",\\\"hello\\\"],[null,42]]}\");\n    req.close();\n  }\n\n","bugFix":["f9e12e0f510993a016e54ba4b77808a71fd8b77f"],"bugIntro":["c5892bdf887aeb6dcc06096dd9b4a7363513eff7","c5892bdf887aeb6dcc06096dd9b4a7363513eff7","c5892bdf887aeb6dcc06096dd9b4a7363513eff7"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c3a8a449466c1ff7ce2274fe73dab487256964b4","date":1305735867,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/request/JSONWriterTest#testJSON().mjava","pathOld":"solr/src/test/org/apache/solr/request/JSONWriterTest#testJSON().mjava","sourceNew":"  @Test\n  public void testJSON() throws IOException {\n    SolrQueryRequest req = req(\"wt\",\"json\",\"json.nl\",\"arrarr\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    JSONResponseWriter w = new JSONResponseWriter();\n\n    StringWriter buf = new StringWriter();\n    NamedList nl = new NamedList();\n    nl.add(\"data1\", \"he\\u2028llo\\u2029!\");       // make sure that 2028 and 2029 are both escaped (they are illegal in javascript)\n    nl.add(null, 42);\n    rsp.add(\"nl\", nl);\n\n    w.write(buf, req, rsp);\n    assertEquals(\"{\\\"nl\\\":[[\\\"data1\\\",\\\"he\\\\u2028llo\\\\u2029!\\\"],[null,42]]}\", buf.toString());\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testJSON() throws IOException {\n    SolrQueryRequest req = req(\"wt\",\"json\",\"json.nl\",\"arrarr\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    JSONResponseWriter w = new JSONResponseWriter();\n\n    StringWriter buf = new StringWriter();\n    NamedList nl = new NamedList();\n    nl.add(\"data1\", \"hello\");\n    nl.add(null, 42);\n    rsp.add(\"nl\", nl);\n\n    w.write(buf, req, rsp);\n    assertEquals(buf.toString(), \"{\\\"nl\\\":[[\\\"data1\\\",\\\"hello\\\"],[null,42]]}\");\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/request/JSONWriterTest#testJSON().mjava","pathOld":"solr/src/test/org/apache/solr/request/JSONWriterTest#testJSON().mjava","sourceNew":"  @Test\n  public void testJSON() throws IOException {\n    SolrQueryRequest req = req(\"wt\",\"json\",\"json.nl\",\"arrarr\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    JSONResponseWriter w = new JSONResponseWriter();\n\n    StringWriter buf = new StringWriter();\n    NamedList nl = new NamedList();\n    nl.add(\"data1\", \"he\\u2028llo\\u2029!\");       // make sure that 2028 and 2029 are both escaped (they are illegal in javascript)\n    nl.add(null, 42);\n    rsp.add(\"nl\", nl);\n\n    w.write(buf, req, rsp);\n    assertEquals(\"{\\\"nl\\\":[[\\\"data1\\\",\\\"he\\\\u2028llo\\\\u2029!\\\"],[null,42]]}\", buf.toString());\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testJSON() throws IOException {\n    SolrQueryRequest req = req(\"wt\",\"json\",\"json.nl\",\"arrarr\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    JSONResponseWriter w = new JSONResponseWriter();\n\n    StringWriter buf = new StringWriter();\n    NamedList nl = new NamedList();\n    nl.add(\"data1\", \"hello\");\n    nl.add(null, 42);\n    rsp.add(\"nl\", nl);\n\n    w.write(buf, req, rsp);\n    assertEquals(buf.toString(), \"{\\\"nl\\\":[[\\\"data1\\\",\\\"hello\\\"],[null,42]]}\");\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/request/JSONWriterTest#testJSON().mjava","pathOld":"solr/src/test/org/apache/solr/request/JSONWriterTest#testJSON().mjava","sourceNew":"  @Test\n  public void testJSON() throws IOException {\n    SolrQueryRequest req = req(\"wt\",\"json\",\"json.nl\",\"arrarr\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    JSONResponseWriter w = new JSONResponseWriter();\n\n    StringWriter buf = new StringWriter();\n    NamedList nl = new NamedList();\n    nl.add(\"data1\", \"he\\u2028llo\\u2029!\");       // make sure that 2028 and 2029 are both escaped (they are illegal in javascript)\n    nl.add(null, 42);\n    rsp.add(\"nl\", nl);\n\n    w.write(buf, req, rsp);\n    assertEquals(\"{\\\"nl\\\":[[\\\"data1\\\",\\\"he\\\\u2028llo\\\\u2029!\\\"],[null,42]]}\", buf.toString());\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testJSON() throws IOException {\n    SolrQueryRequest req = req(\"wt\",\"json\",\"json.nl\",\"arrarr\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    JSONResponseWriter w = new JSONResponseWriter();\n\n    StringWriter buf = new StringWriter();\n    NamedList nl = new NamedList();\n    nl.add(\"data1\", \"he\\u2028llo\\u2029!\");       // make sure that 2028 and 2029 are both escaped (they are illegal in javascript)\n    nl.add(null, 42);\n    rsp.add(\"nl\", nl);\n\n    w.write(buf, req, rsp);\n    assertEquals(\"{\\\"nl\\\":[[\\\"data1\\\",\\\"he\\\\u2028llo\\\\u2029!\\\"],[null,42]]}\", buf.toString());\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/request/JSONWriterTest#testJSON().mjava","pathOld":"solr/src/test/org/apache/solr/request/JSONWriterTest#testJSON().mjava","sourceNew":"  @Test\n  public void testJSON() throws IOException {\n    SolrQueryRequest req = req(\"wt\",\"json\",\"json.nl\",\"arrarr\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    JSONResponseWriter w = new JSONResponseWriter();\n\n    StringWriter buf = new StringWriter();\n    NamedList nl = new NamedList();\n    nl.add(\"data1\", \"he\\u2028llo\\u2029!\");       // make sure that 2028 and 2029 are both escaped (they are illegal in javascript)\n    nl.add(null, 42);\n    rsp.add(\"nl\", nl);\n\n    w.write(buf, req, rsp);\n    assertEquals(\"{\\\"nl\\\":[[\\\"data1\\\",\\\"he\\\\u2028llo\\\\u2029!\\\"],[null,42]]}\", buf.toString());\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testJSON() throws IOException {\n    SolrQueryRequest req = req(\"wt\",\"json\",\"json.nl\",\"arrarr\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    JSONResponseWriter w = new JSONResponseWriter();\n\n    StringWriter buf = new StringWriter();\n    NamedList nl = new NamedList();\n    nl.add(\"data1\", \"he\\u2028llo\\u2029!\");       // make sure that 2028 and 2029 are both escaped (they are illegal in javascript)\n    nl.add(null, 42);\n    rsp.add(\"nl\", nl);\n\n    w.write(buf, req, rsp);\n    assertEquals(\"{\\\"nl\\\":[[\\\"data1\\\",\\\"he\\\\u2028llo\\\\u2029!\\\"],[null,42]]}\", buf.toString());\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/request/JSONWriterTest#testJSON().mjava","pathOld":"solr/src/test/org/apache/solr/request/JSONWriterTest#testJSON().mjava","sourceNew":"  @Test\n  public void testJSON() throws IOException {\n    SolrQueryRequest req = req(\"wt\",\"json\",\"json.nl\",\"arrarr\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    JSONResponseWriter w = new JSONResponseWriter();\n\n    StringWriter buf = new StringWriter();\n    NamedList nl = new NamedList();\n    nl.add(\"data1\", \"he\\u2028llo\\u2029!\");       // make sure that 2028 and 2029 are both escaped (they are illegal in javascript)\n    nl.add(null, 42);\n    rsp.add(\"nl\", nl);\n\n    w.write(buf, req, rsp);\n    assertEquals(\"{\\\"nl\\\":[[\\\"data1\\\",\\\"he\\\\u2028llo\\\\u2029!\\\"],[null,42]]}\", buf.toString());\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testJSON() throws IOException {\n    SolrQueryRequest req = req(\"wt\",\"json\",\"json.nl\",\"arrarr\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    JSONResponseWriter w = new JSONResponseWriter();\n\n    StringWriter buf = new StringWriter();\n    NamedList nl = new NamedList();\n    nl.add(\"data1\", \"he\\u2028llo\\u2029!\");       // make sure that 2028 and 2029 are both escaped (they are illegal in javascript)\n    nl.add(null, 42);\n    rsp.add(\"nl\", nl);\n\n    w.write(buf, req, rsp);\n    assertEquals(\"{\\\"nl\\\":[[\\\"data1\\\",\\\"he\\\\u2028llo\\\\u2029!\\\"],[null,42]]}\", buf.toString());\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c26f00b574427b55127e869b935845554afde1fa":["b8ad81f99cac0805cb57c4d47963d87d4a722a62","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"75b37fb54210d54c3353b3792654e257c77d38b3":["afeb033b2bd36d8ce9d82142b197da4dde13068b"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["afeb033b2bd36d8ce9d82142b197da4dde13068b","75b37fb54210d54c3353b3792654e257c77d38b3"],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"c3a8a449466c1ff7ce2274fe73dab487256964b4":["4ecea1664e8617d82eca3b8055a3c37cb4da8511","b8ad81f99cac0805cb57c4d47963d87d4a722a62"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a3776dccca01c11e7046323cfad46a3b4a471233"],"a3776dccca01c11e7046323cfad46a3b4a471233":["75b37fb54210d54c3353b3792654e257c77d38b3","b8ad81f99cac0805cb57c4d47963d87d4a722a62"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"afeb033b2bd36d8ce9d82142b197da4dde13068b":["1da8d55113b689b06716246649de6f62430f15c0"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["b8ad81f99cac0805cb57c4d47963d87d4a722a62"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["afeb033b2bd36d8ce9d82142b197da4dde13068b","75b37fb54210d54c3353b3792654e257c77d38b3"],"b8ad81f99cac0805cb57c4d47963d87d4a722a62":["75b37fb54210d54c3353b3792654e257c77d38b3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"75b37fb54210d54c3353b3792654e257c77d38b3":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","a3776dccca01c11e7046323cfad46a3b4a471233","4ecea1664e8617d82eca3b8055a3c37cb4da8511","b8ad81f99cac0805cb57c4d47963d87d4a722a62"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"1da8d55113b689b06716246649de6f62430f15c0":["afeb033b2bd36d8ce9d82142b197da4dde13068b"],"c3a8a449466c1ff7ce2274fe73dab487256964b4":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"a3776dccca01c11e7046323cfad46a3b4a471233":["c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"afeb033b2bd36d8ce9d82142b197da4dde13068b":["75b37fb54210d54c3353b3792654e257c77d38b3","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["c3a8a449466c1ff7ce2274fe73dab487256964b4"],"b8ad81f99cac0805cb57c4d47963d87d4a722a62":["c26f00b574427b55127e869b935845554afde1fa","c3a8a449466c1ff7ce2274fe73dab487256964b4","a3776dccca01c11e7046323cfad46a3b4a471233","a258fbb26824fd104ed795e5d9033d2d040049ee"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","c3a8a449466c1ff7ce2274fe73dab487256964b4","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}