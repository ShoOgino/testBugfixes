{"path":"lucene/test-framework/src/java/org/apache/lucene/index/BaseCompressingDocValuesFormatTestCase#testSingleBigValueCompression().mjava","commits":[{"id":"bf317f41f8247db62a955791ebb8a5ab3e7c8d47","date":1366724337,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseCompressingDocValuesFormatTestCase#testSingleBigValueCompression().mjava","pathOld":"/dev/null","sourceNew":"  public void testSingleBigValueCompression() throws IOException {\n    final Directory dir = new RAMDirectory();\n    final IndexWriterConfig iwc = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    final IndexWriter iwriter = new IndexWriter(dir, iwc);\n\n    final Document doc = new Document();\n    final NumericDocValuesField dvf = new NumericDocValuesField(\"dv\", 0);\n    doc.add(dvf);\n    for (int i = 0; i < 20000; ++i) {\n      dvf.setLongValue(i & 1023);\n      iwriter.addDocument(doc);\n    }\n    iwriter.forceMerge(1);\n    final long size1 = dirSize(dir);\n    dvf.setLongValue(Long.MAX_VALUE);\n    iwriter.addDocument(doc);\n    iwriter.forceMerge(1);\n    final long size2 = dirSize(dir);\n    // make sure the new value did not grow the bpv for every other value\n    assertTrue(size2 < size1 + (20000 * (63 - 10)) / 8);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseCompressingDocValuesFormatTestCase#testSingleBigValueCompression().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseCompressingDocValuesFormatTestCase#testSingleBigValueCompression().mjava","sourceNew":"  public void testSingleBigValueCompression() throws IOException {\n    final Directory dir = new RAMDirectory();\n    final IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    final IndexWriter iwriter = new IndexWriter(dir, iwc);\n\n    final Document doc = new Document();\n    final NumericDocValuesField dvf = new NumericDocValuesField(\"dv\", 0);\n    doc.add(dvf);\n    for (int i = 0; i < 20000; ++i) {\n      dvf.setLongValue(i & 1023);\n      iwriter.addDocument(doc);\n    }\n    iwriter.forceMerge(1);\n    final long size1 = dirSize(dir);\n    dvf.setLongValue(Long.MAX_VALUE);\n    iwriter.addDocument(doc);\n    iwriter.forceMerge(1);\n    final long size2 = dirSize(dir);\n    // make sure the new value did not grow the bpv for every other value\n    assertTrue(size2 < size1 + (20000 * (63 - 10)) / 8);\n  }\n\n","sourceOld":"  public void testSingleBigValueCompression() throws IOException {\n    final Directory dir = new RAMDirectory();\n    final IndexWriterConfig iwc = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    final IndexWriter iwriter = new IndexWriter(dir, iwc);\n\n    final Document doc = new Document();\n    final NumericDocValuesField dvf = new NumericDocValuesField(\"dv\", 0);\n    doc.add(dvf);\n    for (int i = 0; i < 20000; ++i) {\n      dvf.setLongValue(i & 1023);\n      iwriter.addDocument(doc);\n    }\n    iwriter.forceMerge(1);\n    final long size1 = dirSize(dir);\n    dvf.setLongValue(Long.MAX_VALUE);\n    iwriter.addDocument(doc);\n    iwriter.forceMerge(1);\n    final long size2 = dirSize(dir);\n    // make sure the new value did not grow the bpv for every other value\n    assertTrue(size2 < size1 + (20000 * (63 - 10)) / 8);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d77dafd89756a5161d244985903e3487ca109182","date":1548679743,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseCompressingDocValuesFormatTestCase#testSingleBigValueCompression().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseCompressingDocValuesFormatTestCase#testSingleBigValueCompression().mjava","sourceNew":"  public void testSingleBigValueCompression() throws IOException {\n    try (final Directory dir = new ByteBuffersDirectory()) {\n      final IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n      final IndexWriter iwriter = new IndexWriter(dir, iwc);\n\n      final Document doc = new Document();\n      final NumericDocValuesField dvf = new NumericDocValuesField(\"dv\", 0);\n      doc.add(dvf);\n      for (int i = 0; i < 20000; ++i) {\n        dvf.setLongValue(i & 1023);\n        iwriter.addDocument(doc);\n      }\n      iwriter.forceMerge(1);\n      final long size1 = dirSize(dir);\n      dvf.setLongValue(Long.MAX_VALUE);\n      iwriter.addDocument(doc);\n      iwriter.forceMerge(1);\n      final long size2 = dirSize(dir);\n      // make sure the new value did not grow the bpv for every other value\n      assertTrue(size2 < size1 + (20000 * (63 - 10)) / 8);\n    }\n  }\n\n","sourceOld":"  public void testSingleBigValueCompression() throws IOException {\n    final Directory dir = new RAMDirectory();\n    final IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    final IndexWriter iwriter = new IndexWriter(dir, iwc);\n\n    final Document doc = new Document();\n    final NumericDocValuesField dvf = new NumericDocValuesField(\"dv\", 0);\n    doc.add(dvf);\n    for (int i = 0; i < 20000; ++i) {\n      dvf.setLongValue(i & 1023);\n      iwriter.addDocument(doc);\n    }\n    iwriter.forceMerge(1);\n    final long size1 = dirSize(dir);\n    dvf.setLongValue(Long.MAX_VALUE);\n    iwriter.addDocument(doc);\n    iwriter.forceMerge(1);\n    final long size2 = dirSize(dir);\n    // make sure the new value did not grow the bpv for every other value\n    assertTrue(size2 < size1 + (20000 * (63 - 10)) / 8);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["bf317f41f8247db62a955791ebb8a5ab3e7c8d47"],"d77dafd89756a5161d244985903e3487ca109182":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"bf317f41f8247db62a955791ebb8a5ab3e7c8d47":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d77dafd89756a5161d244985903e3487ca109182"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bf317f41f8247db62a955791ebb8a5ab3e7c8d47"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["d77dafd89756a5161d244985903e3487ca109182"],"d77dafd89756a5161d244985903e3487ca109182":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bf317f41f8247db62a955791ebb8a5ab3e7c8d47":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}