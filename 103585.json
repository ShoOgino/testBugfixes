{"path":"lucene/src/java/org/apache/lucene/search/Similarity#idfExplain(Term,IndexSearcher,int).mjava","commits":[{"id":"8b241ea5e635d896cc0af83cd96ffd0322e0aba7","date":1294226200,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/Similarity#idfExplain(Term,IndexSearcher,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/Similarity#idfExplain(Term,Searcher,int).mjava","sourceNew":"  /**\n   * Computes a score factor for a simple term and returns an explanation\n   * for that score factor.\n   * \n   * <p>\n   * The default implementation uses:\n   * \n   * <pre>\n   * idf(docFreq, searcher.maxDoc());\n   * </pre>\n   * \n   * Note that {@link Searcher#maxDoc()} is used instead of\n   * {@link org.apache.lucene.index.IndexReader#numDocs() IndexReader#numDocs()} because also \n   * {@link Searcher#docFreq(Term)} is used, and when the latter \n   * is inaccurate, so is {@link Searcher#maxDoc()}, and in the same direction.\n   * In addition, {@link Searcher#maxDoc()} is more efficient to compute\n   *   \n   * @param term the term in question\n   * @param searcher the document collection being searched\n   * @param docFreq externally computed docFreq for this term\n   * @return an IDFExplain object that includes both an idf score factor \n             and an explanation for the term.\n   * @throws IOException\n   */\n  public IDFExplanation idfExplain(final Term term, final IndexSearcher searcher, int docFreq) throws IOException {\n    final int df = docFreq;\n    final int max = searcher.maxDoc();\n    final float idf = idf(df, max);\n    return new IDFExplanation() {\n        @Override\n        public String explain() {\n          return \"idf(docFreq=\" + df +\n          \", maxDocs=\" + max + \")\";\n        }\n        @Override\n        public float getIdf() {\n          return idf;\n        }};\n   }\n\n","sourceOld":"  /**\n   * Computes a score factor for a simple term and returns an explanation\n   * for that score factor.\n   * \n   * <p>\n   * The default implementation uses:\n   * \n   * <pre>\n   * idf(docFreq, searcher.maxDoc());\n   * </pre>\n   * \n   * Note that {@link Searcher#maxDoc()} is used instead of\n   * {@link org.apache.lucene.index.IndexReader#numDocs() IndexReader#numDocs()} because also \n   * {@link Searcher#docFreq(Term)} is used, and when the latter \n   * is inaccurate, so is {@link Searcher#maxDoc()}, and in the same direction.\n   * In addition, {@link Searcher#maxDoc()} is more efficient to compute\n   *   \n   * @param term the term in question\n   * @param searcher the document collection being searched\n   * @param docFreq externally computed docFreq for this term\n   * @return an IDFExplain object that includes both an idf score factor \n             and an explanation for the term.\n   * @throws IOException\n   */\n  public IDFExplanation idfExplain(final Term term, final Searcher searcher, int docFreq) throws IOException {\n    final int df = docFreq;\n    final int max = searcher.maxDoc();\n    final float idf = idf(df, max);\n    return new IDFExplanation() {\n        @Override\n        public String explain() {\n          return \"idf(docFreq=\" + df +\n          \", maxDocs=\" + max + \")\";\n        }\n        @Override\n        public float getIdf() {\n          return idf;\n        }};\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a1aa37d6135cf6c605c23e4ff9becf07f6049c7","date":1294253125,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/Similarity#idfExplain(Term,IndexSearcher,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/Similarity#idfExplain(Term,IndexSearcher,int).mjava","sourceNew":"  /**\n   * Computes a score factor for a simple term and returns an explanation\n   * for that score factor.\n   * \n   * <p>\n   * The default implementation uses:\n   * \n   * <pre>\n   * idf(docFreq, searcher.maxDoc());\n   * </pre>\n   * \n   * Note that {@link IndexSearcher#maxDoc()} is used instead of\n   * {@link org.apache.lucene.index.IndexReader#numDocs() IndexReader#numDocs()} because also \n   * {@link IndexSearcher#docFreq(Term)} is used, and when the latter \n   * is inaccurate, so is {@link IndexSearcher#maxDoc()}, and in the same direction.\n   * In addition, {@link IndexSearcher#maxDoc()} is more efficient to compute\n   *   \n   * @param term the term in question\n   * @param searcher the document collection being searched\n   * @param docFreq externally computed docFreq for this term\n   * @return an IDFExplain object that includes both an idf score factor \n             and an explanation for the term.\n   * @throws IOException\n   */\n  public IDFExplanation idfExplain(final Term term, final IndexSearcher searcher, int docFreq) throws IOException {\n    final int df = docFreq;\n    final int max = searcher.maxDoc();\n    final float idf = idf(df, max);\n    return new IDFExplanation() {\n        @Override\n        public String explain() {\n          return \"idf(docFreq=\" + df +\n          \", maxDocs=\" + max + \")\";\n        }\n        @Override\n        public float getIdf() {\n          return idf;\n        }};\n   }\n\n","sourceOld":"  /**\n   * Computes a score factor for a simple term and returns an explanation\n   * for that score factor.\n   * \n   * <p>\n   * The default implementation uses:\n   * \n   * <pre>\n   * idf(docFreq, searcher.maxDoc());\n   * </pre>\n   * \n   * Note that {@link Searcher#maxDoc()} is used instead of\n   * {@link org.apache.lucene.index.IndexReader#numDocs() IndexReader#numDocs()} because also \n   * {@link Searcher#docFreq(Term)} is used, and when the latter \n   * is inaccurate, so is {@link Searcher#maxDoc()}, and in the same direction.\n   * In addition, {@link Searcher#maxDoc()} is more efficient to compute\n   *   \n   * @param term the term in question\n   * @param searcher the document collection being searched\n   * @param docFreq externally computed docFreq for this term\n   * @return an IDFExplain object that includes both an idf score factor \n             and an explanation for the term.\n   * @throws IOException\n   */\n  public IDFExplanation idfExplain(final Term term, final IndexSearcher searcher, int docFreq) throws IOException {\n    final int df = docFreq;\n    final int max = searcher.maxDoc();\n    final float idf = idf(df, max);\n    return new IDFExplanation() {\n        @Override\n        public String explain() {\n          return \"idf(docFreq=\" + df +\n          \", maxDocs=\" + max + \")\";\n        }\n        @Override\n        public float getIdf() {\n          return idf;\n        }};\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/Similarity#idfExplain(Term,IndexSearcher,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Computes a score factor for a simple term and returns an explanation\n   * for that score factor.\n   * \n   * <p>\n   * The default implementation uses:\n   * \n   * <pre>\n   * idf(docFreq, searcher.maxDoc());\n   * </pre>\n   * \n   * Note that {@link Searcher#maxDoc()} is used instead of\n   * {@link org.apache.lucene.index.IndexReader#numDocs() IndexReader#numDocs()} because also \n   * {@link Searcher#docFreq(Term)} is used, and when the latter \n   * is inaccurate, so is {@link Searcher#maxDoc()}, and in the same direction.\n   * In addition, {@link Searcher#maxDoc()} is more efficient to compute\n   *   \n   * @param term the term in question\n   * @param searcher the document collection being searched\n   * @param docFreq externally computed docFreq for this term\n   * @return an IDFExplain object that includes both an idf score factor \n             and an explanation for the term.\n   * @throws IOException\n   */\n  public IDFExplanation idfExplain(final Term term, final IndexSearcher searcher, int docFreq) throws IOException {\n    final int df = docFreq;\n    final int max = searcher.maxDoc();\n    final float idf = idf(df, max);\n    return new IDFExplanation() {\n        @Override\n        public String explain() {\n          return \"idf(docFreq=\" + df +\n          \", maxDocs=\" + max + \")\";\n        }\n        @Override\n        public float getIdf() {\n          return idf;\n        }};\n   }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f15a832925f4d6ff4ebbb7cd776fba456ee47043","date":1294585153,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/Similarity#idfExplain(Term,IndexSearcher,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/Similarity#idfExplain(Term,IndexSearcher,int).mjava","sourceNew":"  /**\n   * Computes a score factor for a simple term and returns an explanation\n   * for that score factor.\n   * \n   * <p>\n   * The default implementation uses:\n   * \n   * <pre>\n   * idf(docFreq, searcher.maxDoc());\n   * </pre>\n   * \n   * Note that {@link IndexSearcher#maxDoc()} is used instead of\n   * {@link org.apache.lucene.index.IndexReader#numDocs() IndexReader#numDocs()} because also \n   * {@link IndexSearcher#docFreq(Term)} is used, and when the latter \n   * is inaccurate, so is {@link IndexSearcher#maxDoc()}, and in the same direction.\n   * In addition, {@link IndexSearcher#maxDoc()} is more efficient to compute\n   *   \n   * @param term the term in question\n   * @param searcher the document collection being searched\n   * @param docFreq externally computed docFreq for this term\n   * @return an IDFExplain object that includes both an idf score factor \n             and an explanation for the term.\n   * @throws IOException\n   */\n  public IDFExplanation idfExplain(final Term term, final IndexSearcher searcher, int docFreq) throws IOException {\n    final int df = docFreq;\n    final int max = searcher.maxDoc();\n    final float idf = idf(df, max);\n    return new IDFExplanation() {\n        @Override\n        public String explain() {\n          return \"idf(docFreq=\" + df +\n          \", maxDocs=\" + max + \")\";\n        }\n        @Override\n        public float getIdf() {\n          return idf;\n        }};\n  }\n\n","sourceOld":"  /**\n   * Computes a score factor for a simple term and returns an explanation\n   * for that score factor.\n   * \n   * <p>\n   * The default implementation uses:\n   * \n   * <pre>\n   * idf(docFreq, searcher.maxDoc());\n   * </pre>\n   * \n   * Note that {@link IndexSearcher#maxDoc()} is used instead of\n   * {@link org.apache.lucene.index.IndexReader#numDocs() IndexReader#numDocs()} because also \n   * {@link IndexSearcher#docFreq(Term)} is used, and when the latter \n   * is inaccurate, so is {@link IndexSearcher#maxDoc()}, and in the same direction.\n   * In addition, {@link IndexSearcher#maxDoc()} is more efficient to compute\n   *   \n   * @param term the term in question\n   * @param searcher the document collection being searched\n   * @param docFreq externally computed docFreq for this term\n   * @return an IDFExplain object that includes both an idf score factor \n             and an explanation for the term.\n   * @throws IOException\n   */\n  public IDFExplanation idfExplain(final Term term, final IndexSearcher searcher, int docFreq) throws IOException {\n    final int df = docFreq;\n    final int max = searcher.maxDoc();\n    final float idf = idf(df, max);\n    return new IDFExplanation() {\n        @Override\n        public String explain() {\n          return \"idf(docFreq=\" + df +\n          \", maxDocs=\" + max + \")\";\n        }\n        @Override\n        public float getIdf() {\n          return idf;\n        }};\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/Similarity#idfExplain(Term,IndexSearcher,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Computes a score factor for a simple term and returns an explanation\n   * for that score factor.\n   * \n   * <p>\n   * The default implementation uses:\n   * \n   * <pre>\n   * idf(docFreq, searcher.maxDoc());\n   * </pre>\n   * \n   * Note that {@link IndexSearcher#maxDoc()} is used instead of\n   * {@link org.apache.lucene.index.IndexReader#numDocs() IndexReader#numDocs()} because also \n   * {@link IndexSearcher#docFreq(Term)} is used, and when the latter \n   * is inaccurate, so is {@link IndexSearcher#maxDoc()}, and in the same direction.\n   * In addition, {@link IndexSearcher#maxDoc()} is more efficient to compute\n   *   \n   * @param term the term in question\n   * @param searcher the document collection being searched\n   * @param docFreq externally computed docFreq for this term\n   * @return an IDFExplain object that includes both an idf score factor \n             and an explanation for the term.\n   * @throws IOException\n   */\n  public IDFExplanation idfExplain(final Term term, final IndexSearcher searcher, int docFreq) throws IOException {\n    final int df = docFreq;\n    final int max = searcher.maxDoc();\n    final float idf = idf(df, max);\n    return new IDFExplanation() {\n        @Override\n        public String explain() {\n          return \"idf(docFreq=\" + df +\n          \", maxDocs=\" + max + \")\";\n        }\n        @Override\n        public float getIdf() {\n          return idf;\n        }};\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/Similarity#idfExplain(Term,IndexSearcher,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/Similarity#idfExplain(Term,IndexSearcher,int).mjava","sourceNew":"  /**\n   * Computes a score factor for a simple term and returns an explanation\n   * for that score factor.\n   * \n   * <p>\n   * The default implementation uses:\n   * \n   * <pre>\n   * idf(docFreq, searcher.maxDoc());\n   * </pre>\n   * \n   * Note that {@link IndexSearcher#maxDoc()} is used instead of\n   * {@link org.apache.lucene.index.IndexReader#numDocs() IndexReader#numDocs()} because also \n   * {@link IndexSearcher#docFreq(Term)} is used, and when the latter \n   * is inaccurate, so is {@link IndexSearcher#maxDoc()}, and in the same direction.\n   * In addition, {@link IndexSearcher#maxDoc()} is more efficient to compute\n   *   \n   * @param term the term in question\n   * @param searcher the document collection being searched\n   * @param docFreq externally computed docFreq for this term\n   * @return an IDFExplain object that includes both an idf score factor \n             and an explanation for the term.\n   * @throws IOException\n   */\n  public IDFExplanation idfExplain(final Term term, final IndexSearcher searcher, int docFreq) throws IOException {\n    final int df = docFreq;\n    final int max = searcher.maxDoc();\n    final float idf = idf(df, max);\n    return new IDFExplanation() {\n        @Override\n        public String explain() {\n          return \"idf(docFreq=\" + df +\n          \", maxDocs=\" + max + \")\";\n        }\n        @Override\n        public float getIdf() {\n          return idf;\n        }};\n  }\n\n","sourceOld":"  /**\n   * Computes a score factor for a simple term and returns an explanation\n   * for that score factor.\n   * \n   * <p>\n   * The default implementation uses:\n   * \n   * <pre>\n   * idf(docFreq, searcher.maxDoc());\n   * </pre>\n   * \n   * Note that {@link Searcher#maxDoc()} is used instead of\n   * {@link org.apache.lucene.index.IndexReader#numDocs() IndexReader#numDocs()} because also \n   * {@link Searcher#docFreq(Term)} is used, and when the latter \n   * is inaccurate, so is {@link Searcher#maxDoc()}, and in the same direction.\n   * In addition, {@link Searcher#maxDoc()} is more efficient to compute\n   *   \n   * @param term the term in question\n   * @param searcher the document collection being searched\n   * @param docFreq externally computed docFreq for this term\n   * @return an IDFExplain object that includes both an idf score factor \n             and an explanation for the term.\n   * @throws IOException\n   */\n  public IDFExplanation idfExplain(final Term term, final IndexSearcher searcher, int docFreq) throws IOException {\n    final int df = docFreq;\n    final int max = searcher.maxDoc();\n    final float idf = idf(df, max);\n    return new IDFExplanation() {\n        @Override\n        public String explain() {\n          return \"idf(docFreq=\" + df +\n          \", maxDocs=\" + max + \")\";\n        }\n        @Override\n        public float getIdf() {\n          return idf;\n        }};\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f3cee3d20b0c786e6fca20539454262e29edcab","date":1310101685,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/TFIDFSimilarity#idfExplain(TermContext,IndexSearcher).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/Similarity#idfExplain(Term,IndexSearcher,int).mjava","sourceNew":"  /**\n   * Computes a score factor for a simple term and returns an explanation\n   * for that score factor.\n   * \n   * <p>\n   * The default implementation uses:\n   * \n   * <pre>\n   * idf(docFreq, searcher.maxDoc());\n   * </pre>\n   * \n   * Note that {@link IndexSearcher#maxDoc()} is used instead of\n   * {@link org.apache.lucene.index.IndexReader#numDocs() IndexReader#numDocs()} because also \n   * {@link IndexSearcher#docFreq(Term)} is used, and when the latter \n   * is inaccurate, so is {@link IndexSearcher#maxDoc()}, and in the same direction.\n   * In addition, {@link IndexSearcher#maxDoc()} is more efficient to compute\n   *   \n   * @param stats statistics of the term in question\n   * @param searcher the document collection being searched\n   * @return an Explain object that includes both an idf score factor \n             and an explanation for the term.\n   * @throws IOException\n   */\n  public Explanation idfExplain(TermContext stats, final IndexSearcher searcher) throws IOException {\n    final int df = stats.docFreq();\n    final int max = searcher.maxDoc();\n    final float idf = idf(df, max);\n    return new Explanation(idf, \"idf(docFreq=\" + df + \", maxDocs=\" + max + \")\");\n  }\n\n","sourceOld":"  /**\n   * Computes a score factor for a simple term and returns an explanation\n   * for that score factor.\n   * \n   * <p>\n   * The default implementation uses:\n   * \n   * <pre>\n   * idf(docFreq, searcher.maxDoc());\n   * </pre>\n   * \n   * Note that {@link IndexSearcher#maxDoc()} is used instead of\n   * {@link org.apache.lucene.index.IndexReader#numDocs() IndexReader#numDocs()} because also \n   * {@link IndexSearcher#docFreq(Term)} is used, and when the latter \n   * is inaccurate, so is {@link IndexSearcher#maxDoc()}, and in the same direction.\n   * In addition, {@link IndexSearcher#maxDoc()} is more efficient to compute\n   *   \n   * @param term the term in question\n   * @param searcher the document collection being searched\n   * @param docFreq externally computed docFreq for this term\n   * @return an IDFExplain object that includes both an idf score factor \n             and an explanation for the term.\n   * @throws IOException\n   */\n  public IDFExplanation idfExplain(final Term term, final IndexSearcher searcher, int docFreq) throws IOException {\n    final int df = docFreq;\n    final int max = searcher.maxDoc();\n    final float idf = idf(df, max);\n    return new IDFExplanation() {\n        @Override\n        public String explain() {\n          return \"idf(docFreq=\" + df +\n          \", maxDocs=\" + max + \")\";\n        }\n        @Override\n        public float getIdf() {\n          return idf;\n        }};\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f0b9507caf22f292ac0e5e59f62db4275adf4511","date":1310107283,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/TFIDFSimilarity#idfExplain(TermContext,IndexSearcher).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/Similarity#idfExplain(Term,IndexSearcher,int).mjava","sourceNew":"  /**\n   * Computes a score factor for a simple term and returns an explanation\n   * for that score factor.\n   * \n   * <p>\n   * The default implementation uses:\n   * \n   * <pre>\n   * idf(docFreq, searcher.maxDoc());\n   * </pre>\n   * \n   * Note that {@link IndexSearcher#maxDoc()} is used instead of\n   * {@link org.apache.lucene.index.IndexReader#numDocs() IndexReader#numDocs()} because also \n   * {@link IndexSearcher#docFreq(Term)} is used, and when the latter \n   * is inaccurate, so is {@link IndexSearcher#maxDoc()}, and in the same direction.\n   * In addition, {@link IndexSearcher#maxDoc()} is more efficient to compute\n   *   \n   * @param stats statistics of the term in question\n   * @param searcher the document collection being searched\n   * @return an Explain object that includes both an idf score factor \n             and an explanation for the term.\n   * @throws IOException\n   */\n  public Explanation idfExplain(TermContext stats, final IndexSearcher searcher) throws IOException {\n    final int df = stats.docFreq();\n    final int max = searcher.maxDoc();\n    final float idf = idf(df, max);\n    return new Explanation(idf, \"idf(docFreq=\" + df + \", maxDocs=\" + max + \")\");\n  }\n\n","sourceOld":"  /**\n   * Computes a score factor for a simple term and returns an explanation\n   * for that score factor.\n   * \n   * <p>\n   * The default implementation uses:\n   * \n   * <pre>\n   * idf(docFreq, searcher.maxDoc());\n   * </pre>\n   * \n   * Note that {@link IndexSearcher#maxDoc()} is used instead of\n   * {@link org.apache.lucene.index.IndexReader#numDocs() IndexReader#numDocs()} because also \n   * {@link IndexSearcher#docFreq(Term)} is used, and when the latter \n   * is inaccurate, so is {@link IndexSearcher#maxDoc()}, and in the same direction.\n   * In addition, {@link IndexSearcher#maxDoc()} is more efficient to compute\n   *   \n   * @param term the term in question\n   * @param searcher the document collection being searched\n   * @param docFreq externally computed docFreq for this term\n   * @return an IDFExplain object that includes both an idf score factor \n             and an explanation for the term.\n   * @throws IOException\n   */\n  public IDFExplanation idfExplain(final Term term, final IndexSearcher searcher, int docFreq) throws IOException {\n    final int df = docFreq;\n    final int max = searcher.maxDoc();\n    final float idf = idf(df, max);\n    return new IDFExplanation() {\n        @Override\n        public String explain() {\n          return \"idf(docFreq=\" + df +\n          \", maxDocs=\" + max + \")\";\n        }\n        @Override\n        public float getIdf() {\n          return idf;\n        }};\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1291e4568eb7d9463d751627596ef14baf4c1603","date":1310112572,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/TFIDFSimilarity#idfExplain(TermContext,IndexSearcher).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/Similarity#idfExplain(Term,IndexSearcher,int).mjava","sourceNew":"  /**\n   * Computes a score factor for a simple term and returns an explanation\n   * for that score factor.\n   * \n   * <p>\n   * The default implementation uses:\n   * \n   * <pre>\n   * idf(docFreq, searcher.maxDoc());\n   * </pre>\n   * \n   * Note that {@link IndexSearcher#maxDoc()} is used instead of\n   * {@link org.apache.lucene.index.IndexReader#numDocs() IndexReader#numDocs()} because also \n   * {@link IndexSearcher#docFreq(Term)} is used, and when the latter \n   * is inaccurate, so is {@link IndexSearcher#maxDoc()}, and in the same direction.\n   * In addition, {@link IndexSearcher#maxDoc()} is more efficient to compute\n   *   \n   * @param stats statistics of the term in question\n   * @param searcher the document collection being searched\n   * @return an Explain object that includes both an idf score factor \n             and an explanation for the term.\n   * @throws IOException\n   */\n  public Explanation idfExplain(TermContext stats, final IndexSearcher searcher) throws IOException {\n    final int df = stats.docFreq();\n    final int max = searcher.maxDoc();\n    final float idf = idf(df, max);\n    return new Explanation(idf, \"idf(docFreq=\" + df + \", maxDocs=\" + max + \")\");\n  }\n\n","sourceOld":"  /**\n   * Computes a score factor for a simple term and returns an explanation\n   * for that score factor.\n   * \n   * <p>\n   * The default implementation uses:\n   * \n   * <pre>\n   * idf(docFreq, searcher.maxDoc());\n   * </pre>\n   * \n   * Note that {@link IndexSearcher#maxDoc()} is used instead of\n   * {@link org.apache.lucene.index.IndexReader#numDocs() IndexReader#numDocs()} because also \n   * {@link IndexSearcher#docFreq(Term)} is used, and when the latter \n   * is inaccurate, so is {@link IndexSearcher#maxDoc()}, and in the same direction.\n   * In addition, {@link IndexSearcher#maxDoc()} is more efficient to compute\n   *   \n   * @param term the term in question\n   * @param searcher the document collection being searched\n   * @param docFreq externally computed docFreq for this term\n   * @return an IDFExplain object that includes both an idf score factor \n             and an explanation for the term.\n   * @throws IOException\n   */\n  public IDFExplanation idfExplain(final Term term, final IndexSearcher searcher, int docFreq) throws IOException {\n    final int df = docFreq;\n    final int max = searcher.maxDoc();\n    final float idf = idf(df, max);\n    return new IDFExplanation() {\n        @Override\n        public String explain() {\n          return \"idf(docFreq=\" + df +\n          \", maxDocs=\" + max + \")\";\n        }\n        @Override\n        public float getIdf() {\n          return idf;\n        }};\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1291e4568eb7d9463d751627596ef14baf4c1603":["f15a832925f4d6ff4ebbb7cd776fba456ee47043","0f3cee3d20b0c786e6fca20539454262e29edcab"],"70ad682703b8585f5d0a637efec044d57ec05efb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"0f3cee3d20b0c786e6fca20539454262e29edcab":["f15a832925f4d6ff4ebbb7cd776fba456ee47043"],"f15a832925f4d6ff4ebbb7cd776fba456ee47043":["8a1aa37d6135cf6c605c23e4ff9becf07f6049c7"],"8b241ea5e635d896cc0af83cd96ffd0322e0aba7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f0b9507caf22f292ac0e5e59f62db4275adf4511":["f15a832925f4d6ff4ebbb7cd776fba456ee47043","0f3cee3d20b0c786e6fca20539454262e29edcab"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["70ad682703b8585f5d0a637efec044d57ec05efb","f15a832925f4d6ff4ebbb7cd776fba456ee47043"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8a1aa37d6135cf6c605c23e4ff9becf07f6049c7":["8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f15a832925f4d6ff4ebbb7cd776fba456ee47043"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f3cee3d20b0c786e6fca20539454262e29edcab"]},"commit2Childs":{"1291e4568eb7d9463d751627596ef14baf4c1603":[],"70ad682703b8585f5d0a637efec044d57ec05efb":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"f15a832925f4d6ff4ebbb7cd776fba456ee47043":["1291e4568eb7d9463d751627596ef14baf4c1603","0f3cee3d20b0c786e6fca20539454262e29edcab","f0b9507caf22f292ac0e5e59f62db4275adf4511","29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295"],"0f3cee3d20b0c786e6fca20539454262e29edcab":["1291e4568eb7d9463d751627596ef14baf4c1603","f0b9507caf22f292ac0e5e59f62db4275adf4511","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8b241ea5e635d896cc0af83cd96ffd0322e0aba7":["70ad682703b8585f5d0a637efec044d57ec05efb","8a1aa37d6135cf6c605c23e4ff9becf07f6049c7"],"f0b9507caf22f292ac0e5e59f62db4275adf4511":[],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["70ad682703b8585f5d0a637efec044d57ec05efb","8b241ea5e635d896cc0af83cd96ffd0322e0aba7","868da859b43505d9d2a023bfeae6dd0c795f5295"],"8a1aa37d6135cf6c605c23e4ff9becf07f6049c7":["f15a832925f4d6ff4ebbb7cd776fba456ee47043"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1291e4568eb7d9463d751627596ef14baf4c1603","f0b9507caf22f292ac0e5e59f62db4275adf4511","29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}