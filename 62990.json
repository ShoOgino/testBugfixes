{"path":"lucene/src/java/org/apache/lucene/index/AtomicReader#termDocsEnum(Bits,String,BytesRef,TermState,boolean).mjava","commits":[{"id":"da6d5ac19a80d65b1e864251f155d30960353b7e","date":1327881054,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/AtomicReader#termDocsEnum(Bits,String,BytesRef,TermState,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/AtomicIndexReader#termDocsEnum(Bits,String,BytesRef,TermState,boolean).mjava","sourceNew":"  /**\n   * Returns {@link DocsEnum} for the specified field and\n   * {@link TermState}. This may return null, if either the field or the term\n   * does not exists or the {@link TermState} is invalid for the underlying\n   * implementation.*/\n  public final DocsEnum termDocsEnum(Bits liveDocs, String field, BytesRef term, TermState state, boolean needsFreqs) throws IOException {\n    assert state != null;\n    assert field != null;\n    final Fields fields = fields();\n    if (fields != null) {\n      final Terms terms = fields.terms(field);\n      if (terms != null) {\n        final TermsEnum termsEnum = terms.iterator(null);\n        termsEnum.seekExact(term, state);\n        return termsEnum.docs(liveDocs, null, needsFreqs);\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  /**\n   * Returns {@link DocsEnum} for the specified field and\n   * {@link TermState}. This may return null, if either the field or the term\n   * does not exists or the {@link TermState} is invalid for the underlying\n   * implementation.*/\n  public final DocsEnum termDocsEnum(Bits liveDocs, String field, BytesRef term, TermState state, boolean needsFreqs) throws IOException {\n    assert state != null;\n    assert field != null;\n    final Fields fields = fields();\n    if (fields != null) {\n      final Terms terms = fields.terms(field);\n      if (terms != null) {\n        final TermsEnum termsEnum = terms.iterator(null);\n        termsEnum.seekExact(term, state);\n        return termsEnum.docs(liveDocs, null, needsFreqs);\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":1,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/AtomicReader#termDocsEnum(Bits,String,BytesRef,TermState,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#termDocsEnum(Bits,String,BytesRef,TermState,boolean).mjava","sourceNew":"  /**\n   * Returns {@link DocsEnum} for the specified field and\n   * {@link TermState}. This may return null, if either the field or the term\n   * does not exists or the {@link TermState} is invalid for the underlying\n   * implementation.*/\n  public final DocsEnum termDocsEnum(Bits liveDocs, String field, BytesRef term, TermState state, boolean needsFreqs) throws IOException {\n    assert state != null;\n    assert field != null;\n    final Fields fields = fields();\n    if (fields != null) {\n      final Terms terms = fields.terms(field);\n      if (terms != null) {\n        final TermsEnum termsEnum = terms.iterator(null);\n        termsEnum.seekExact(term, state);\n        return termsEnum.docs(liveDocs, null, needsFreqs);\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  /**\n   * Returns {@link DocsEnum} for the specified field and\n   * {@link TermState}. This may return null, if either the field or the term\n   * does not exists or the {@link TermState} is invalid for the underlying\n   * implementation.*/\n  public final DocsEnum termDocsEnum(Bits liveDocs, String field, BytesRef term, TermState state, boolean needsFreqs) throws IOException {\n    assert state != null;\n    assert field != null;\n    final Fields fields = fields();\n    if (fields != null) {\n      final Terms terms = fields.terms(field);\n      if (terms != null) {\n        final TermsEnum termsEnum = terms.iterator(null);\n        termsEnum.seekExact(term, state);\n        return termsEnum.docs(liveDocs, null, needsFreqs);\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/AtomicReader#termDocsEnum(Bits,String,BytesRef,TermState,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/AtomicReader#termDocsEnum(Bits,String,BytesRef,TermState,boolean).mjava","sourceNew":"  /**\n   * Returns {@link DocsEnum} for the specified field and\n   * {@link TermState}. This may return null, if either the field or the term\n   * does not exists or the {@link TermState} is invalid for the underlying\n   * implementation.*/\n  public final DocsEnum termDocsEnum(Bits liveDocs, String field, BytesRef term, TermState state, boolean needsFreqs) throws IOException {\n    assert state != null;\n    assert field != null;\n    final Fields fields = fields();\n    if (fields != null) {\n      final Terms terms = fields.terms(field);\n      if (terms != null) {\n        final TermsEnum termsEnum = terms.iterator(null);\n        termsEnum.seekExact(term, state);\n        return termsEnum.docs(liveDocs, null, needsFreqs);\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  /**\n   * Returns {@link DocsEnum} for the specified field and\n   * {@link TermState}. This may return null, if either the field or the term\n   * does not exists or the {@link TermState} is invalid for the underlying\n   * implementation.*/\n  public final DocsEnum termDocsEnum(Bits liveDocs, String field, BytesRef term, TermState state, boolean needsFreqs) throws IOException {\n    assert state != null;\n    assert field != null;\n    final Fields fields = fields();\n    if (fields != null) {\n      final Terms terms = fields.terms(field);\n      if (terms != null) {\n        final TermsEnum termsEnum = terms.iterator(null);\n        termsEnum.seekExact(term, state);\n        return termsEnum.docs(liveDocs, null, needsFreqs);\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"da6d5ac19a80d65b1e864251f155d30960353b7e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5cab9a86bd67202d20b6adc463008c8e982b070a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","da6d5ac19a80d65b1e864251f155d30960353b7e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"da6d5ac19a80d65b1e864251f155d30960353b7e":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["da6d5ac19a80d65b1e864251f155d30960353b7e","5cab9a86bd67202d20b6adc463008c8e982b070a"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}