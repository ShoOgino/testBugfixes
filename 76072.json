{"path":"solr/solrj/src/test/org/apache/solr/common/util/TestRetryUtil#testRetryOnThrowable().mjava","commits":[{"id":"c6d05f0bca58bfc9ee9350e9daffcdab4b8c1c31","date":1393811533,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/TestRetryUtil#testRetryOnThrowable().mjava","pathOld":"/dev/null","sourceNew":"  public void testRetryOnThrowable() throws Throwable {\n    final AtomicInteger executes = new AtomicInteger();\n    RetryUtil.retryOnThrowable(SolrException.class, 10000, 10, new RetryCmd() {\n      \n      @Override\n      public void execute() throws Throwable {\n        int calls = executes.incrementAndGet();\n        if (calls <= 2) {\n          throw new SolrException(ErrorCode.SERVER_ERROR, \"Bad Stuff Happened\");\n        }\n      }\n    });\n    \n    assertEquals(3, executes.get());\n    \n    final AtomicInteger executes2 = new AtomicInteger();\n    boolean caughtSolrException = false;\n    try {\n      RetryUtil.retryOnThrowable(IllegalStateException.class, 10000, 10,\n          new RetryCmd() {\n            \n            @Override\n            public void execute() throws Throwable {\n              int calls = executes2.incrementAndGet();\n              if (calls <= 2) {\n                throw new SolrException(ErrorCode.SERVER_ERROR,\n                    \"Bad Stuff Happened\");\n              }\n            }\n          });\n    } catch (SolrException e) {\n      caughtSolrException = true;\n    }\n    assertTrue(caughtSolrException);\n    assertEquals(1, executes2.get());\n    \n    final AtomicInteger executes3 = new AtomicInteger();\n    caughtSolrException = false;\n    try {\n      RetryUtil.retryOnThrowable(SolrException.class, 1000, 10, new RetryCmd() {\n        \n        @Override\n        public void execute() throws Throwable {\n          executes3.incrementAndGet();\n          throw new SolrException(ErrorCode.SERVER_ERROR, \"Bad Stuff Happened\");\n        }\n      });\n    } catch (SolrException e) {\n      caughtSolrException = true;\n    }\n    \n    assertTrue(executes3.get() > 1);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"836c500a0331122caefebab172421da4b0d73c57","date":1393811925,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/TestRetryUtil#testRetryOnThrowable().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/util/TestRetryUtil#testRetryOnThrowable().mjava","sourceNew":"  public void testRetryOnThrowable() throws Throwable {\n    final AtomicInteger executes = new AtomicInteger();\n    RetryUtil.retryOnThrowable(SolrException.class, 10000, 10, new RetryCmd() {\n      \n      @Override\n      public void execute() throws Throwable {\n        int calls = executes.incrementAndGet();\n        if (calls <= 2) {\n          throw new SolrException(ErrorCode.SERVER_ERROR, \"Bad Stuff Happened\");\n        }\n      }\n    });\n    \n    assertEquals(3, executes.get());\n    \n    final AtomicInteger executes2 = new AtomicInteger();\n    boolean caughtSolrException = false;\n    try {\n      RetryUtil.retryOnThrowable(IllegalStateException.class, 10000, 10,\n          new RetryCmd() {\n            \n            @Override\n            public void execute() throws Throwable {\n              int calls = executes2.incrementAndGet();\n              if (calls <= 2) {\n                throw new SolrException(ErrorCode.SERVER_ERROR,\n                    \"Bad Stuff Happened\");\n              }\n            }\n          });\n    } catch (SolrException e) {\n      caughtSolrException = true;\n    }\n    assertTrue(caughtSolrException);\n    assertEquals(1, executes2.get());\n    \n    final AtomicInteger executes3 = new AtomicInteger();\n    caughtSolrException = false;\n    try {\n      RetryUtil.retryOnThrowable(SolrException.class, 1000, 10, new RetryCmd() {\n        \n        @Override\n        public void execute() throws Throwable {\n          executes3.incrementAndGet();\n          throw new SolrException(ErrorCode.SERVER_ERROR, \"Bad Stuff Happened\");\n        }\n      });\n    } catch (SolrException e) {\n      caughtSolrException = true;\n    }\n    \n    assertTrue(caughtSolrException);\n    assertTrue(executes3.get() > 1);\n  }\n\n","sourceOld":"  public void testRetryOnThrowable() throws Throwable {\n    final AtomicInteger executes = new AtomicInteger();\n    RetryUtil.retryOnThrowable(SolrException.class, 10000, 10, new RetryCmd() {\n      \n      @Override\n      public void execute() throws Throwable {\n        int calls = executes.incrementAndGet();\n        if (calls <= 2) {\n          throw new SolrException(ErrorCode.SERVER_ERROR, \"Bad Stuff Happened\");\n        }\n      }\n    });\n    \n    assertEquals(3, executes.get());\n    \n    final AtomicInteger executes2 = new AtomicInteger();\n    boolean caughtSolrException = false;\n    try {\n      RetryUtil.retryOnThrowable(IllegalStateException.class, 10000, 10,\n          new RetryCmd() {\n            \n            @Override\n            public void execute() throws Throwable {\n              int calls = executes2.incrementAndGet();\n              if (calls <= 2) {\n                throw new SolrException(ErrorCode.SERVER_ERROR,\n                    \"Bad Stuff Happened\");\n              }\n            }\n          });\n    } catch (SolrException e) {\n      caughtSolrException = true;\n    }\n    assertTrue(caughtSolrException);\n    assertEquals(1, executes2.get());\n    \n    final AtomicInteger executes3 = new AtomicInteger();\n    caughtSolrException = false;\n    try {\n      RetryUtil.retryOnThrowable(SolrException.class, 1000, 10, new RetryCmd() {\n        \n        @Override\n        public void execute() throws Throwable {\n          executes3.incrementAndGet();\n          throw new SolrException(ErrorCode.SERVER_ERROR, \"Bad Stuff Happened\");\n        }\n      });\n    } catch (SolrException e) {\n      caughtSolrException = true;\n    }\n    \n    assertTrue(executes3.get() > 1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ddd17dd71008bdecd624542b68b0f8161d53a068","date":1466401278,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/TestRetryUtil#testRetryOnThrowable().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/util/TestRetryUtil#testRetryOnThrowable().mjava","sourceNew":"  public void testRetryOnThrowable() throws Throwable {\n    final AtomicInteger executes = new AtomicInteger();\n    RetryUtil.retryOnThrowable(SolrException.class, 10000, 10, () -> {\n      int calls = executes.incrementAndGet();\n      if (calls <= 2) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Bad Stuff Happened\");\n      }\n    });\n    \n    assertEquals(3, executes.get());\n    \n    final AtomicInteger executes2 = new AtomicInteger();\n    boolean caughtSolrException = false;\n    try {\n      RetryUtil.retryOnThrowable(IllegalStateException.class, 10000, 10,\n          () -> {\n            int calls = executes2.incrementAndGet();\n            if (calls <= 2) {\n              throw new SolrException(ErrorCode.SERVER_ERROR,\n                  \"Bad Stuff Happened\");\n            }\n          });\n    } catch (SolrException e) {\n      caughtSolrException = true;\n    }\n    assertTrue(caughtSolrException);\n    assertEquals(1, executes2.get());\n    \n    final AtomicInteger executes3 = new AtomicInteger();\n    caughtSolrException = false;\n    try {\n      RetryUtil.retryOnThrowable(SolrException.class, 1000, 10, () -> {\n        executes3.incrementAndGet();\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Bad Stuff Happened\");\n      });\n    } catch (SolrException e) {\n      caughtSolrException = true;\n    }\n    \n    assertTrue(caughtSolrException);\n    assertTrue(executes3.get() > 1);\n  }\n\n","sourceOld":"  public void testRetryOnThrowable() throws Throwable {\n    final AtomicInteger executes = new AtomicInteger();\n    RetryUtil.retryOnThrowable(SolrException.class, 10000, 10, new RetryCmd() {\n      \n      @Override\n      public void execute() throws Throwable {\n        int calls = executes.incrementAndGet();\n        if (calls <= 2) {\n          throw new SolrException(ErrorCode.SERVER_ERROR, \"Bad Stuff Happened\");\n        }\n      }\n    });\n    \n    assertEquals(3, executes.get());\n    \n    final AtomicInteger executes2 = new AtomicInteger();\n    boolean caughtSolrException = false;\n    try {\n      RetryUtil.retryOnThrowable(IllegalStateException.class, 10000, 10,\n          new RetryCmd() {\n            \n            @Override\n            public void execute() throws Throwable {\n              int calls = executes2.incrementAndGet();\n              if (calls <= 2) {\n                throw new SolrException(ErrorCode.SERVER_ERROR,\n                    \"Bad Stuff Happened\");\n              }\n            }\n          });\n    } catch (SolrException e) {\n      caughtSolrException = true;\n    }\n    assertTrue(caughtSolrException);\n    assertEquals(1, executes2.get());\n    \n    final AtomicInteger executes3 = new AtomicInteger();\n    caughtSolrException = false;\n    try {\n      RetryUtil.retryOnThrowable(SolrException.class, 1000, 10, new RetryCmd() {\n        \n        @Override\n        public void execute() throws Throwable {\n          executes3.incrementAndGet();\n          throw new SolrException(ErrorCode.SERVER_ERROR, \"Bad Stuff Happened\");\n        }\n      });\n    } catch (SolrException e) {\n      caughtSolrException = true;\n    }\n    \n    assertTrue(caughtSolrException);\n    assertTrue(executes3.get() > 1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/TestRetryUtil#testRetryOnThrowable().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/util/TestRetryUtil#testRetryOnThrowable().mjava","sourceNew":"  public void testRetryOnThrowable() throws Throwable {\n    final AtomicInteger executes = new AtomicInteger();\n    RetryUtil.retryOnThrowable(SolrException.class, 10000, 10, () -> {\n      int calls = executes.incrementAndGet();\n      if (calls <= 2) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Bad Stuff Happened\");\n      }\n    });\n    \n    assertEquals(3, executes.get());\n    \n    final AtomicInteger executes2 = new AtomicInteger();\n    boolean caughtSolrException = false;\n    try {\n      RetryUtil.retryOnThrowable(IllegalStateException.class, 10000, 10,\n          () -> {\n            int calls = executes2.incrementAndGet();\n            if (calls <= 2) {\n              throw new SolrException(ErrorCode.SERVER_ERROR,\n                  \"Bad Stuff Happened\");\n            }\n          });\n    } catch (SolrException e) {\n      caughtSolrException = true;\n    }\n    assertTrue(caughtSolrException);\n    assertEquals(1, executes2.get());\n    \n    final AtomicInteger executes3 = new AtomicInteger();\n    caughtSolrException = false;\n    try {\n      RetryUtil.retryOnThrowable(SolrException.class, 1000, 10, () -> {\n        executes3.incrementAndGet();\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Bad Stuff Happened\");\n      });\n    } catch (SolrException e) {\n      caughtSolrException = true;\n    }\n    \n    assertTrue(caughtSolrException);\n    assertTrue(executes3.get() > 1);\n  }\n\n","sourceOld":"  public void testRetryOnThrowable() throws Throwable {\n    final AtomicInteger executes = new AtomicInteger();\n    RetryUtil.retryOnThrowable(SolrException.class, 10000, 10, new RetryCmd() {\n      \n      @Override\n      public void execute() throws Throwable {\n        int calls = executes.incrementAndGet();\n        if (calls <= 2) {\n          throw new SolrException(ErrorCode.SERVER_ERROR, \"Bad Stuff Happened\");\n        }\n      }\n    });\n    \n    assertEquals(3, executes.get());\n    \n    final AtomicInteger executes2 = new AtomicInteger();\n    boolean caughtSolrException = false;\n    try {\n      RetryUtil.retryOnThrowable(IllegalStateException.class, 10000, 10,\n          new RetryCmd() {\n            \n            @Override\n            public void execute() throws Throwable {\n              int calls = executes2.incrementAndGet();\n              if (calls <= 2) {\n                throw new SolrException(ErrorCode.SERVER_ERROR,\n                    \"Bad Stuff Happened\");\n              }\n            }\n          });\n    } catch (SolrException e) {\n      caughtSolrException = true;\n    }\n    assertTrue(caughtSolrException);\n    assertEquals(1, executes2.get());\n    \n    final AtomicInteger executes3 = new AtomicInteger();\n    caughtSolrException = false;\n    try {\n      RetryUtil.retryOnThrowable(SolrException.class, 1000, 10, new RetryCmd() {\n        \n        @Override\n        public void execute() throws Throwable {\n          executes3.incrementAndGet();\n          throw new SolrException(ErrorCode.SERVER_ERROR, \"Bad Stuff Happened\");\n        }\n      });\n    } catch (SolrException e) {\n      caughtSolrException = true;\n    }\n    \n    assertTrue(caughtSolrException);\n    assertTrue(executes3.get() > 1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ddd17dd71008bdecd624542b68b0f8161d53a068":["836c500a0331122caefebab172421da4b0d73c57"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"836c500a0331122caefebab172421da4b0d73c57":["c6d05f0bca58bfc9ee9350e9daffcdab4b8c1c31"],"c6d05f0bca58bfc9ee9350e9daffcdab4b8c1c31":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["836c500a0331122caefebab172421da4b0d73c57","ddd17dd71008bdecd624542b68b0f8161d53a068"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ddd17dd71008bdecd624542b68b0f8161d53a068"]},"commit2Childs":{"ddd17dd71008bdecd624542b68b0f8161d53a068":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c6d05f0bca58bfc9ee9350e9daffcdab4b8c1c31"],"836c500a0331122caefebab172421da4b0d73c57":["ddd17dd71008bdecd624542b68b0f8161d53a068","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"c6d05f0bca58bfc9ee9350e9daffcdab4b8c1c31":["836c500a0331122caefebab172421da4b0d73c57"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}