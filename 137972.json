{"path":"lucene/src/java/org/apache/lucene/index/MultiTermsEnum#seekExact(BytesRef,boolean).mjava","commits":[{"id":"fd9cc9d77712aba3662f24632df7539ab75e3667","date":1309095238,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/MultiTermsEnum#seekExact(BytesRef,boolean).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public boolean seekExact(BytesRef term, boolean useCache) throws IOException {\n    queue.clear();\n    numTop = 0;\n\n    boolean seekOpt = false;\n    if (lastSeek != null && termComp.compare(lastSeek, term) <= 0) {\n      seekOpt = true;\n    }\n\n    lastSeek = null;\n\n    for(int i=0;i<numSubs;i++) {\n      final boolean status;\n      // LUCENE-2130: if we had just seek'd already, prior\n      // to this seek, and the new seek term is after the\n      // previous one, don't try to re-seek this sub if its\n      // current term is already beyond this new seek term.\n      // Doing so is a waste because this sub will simply\n      // seek to the same spot.\n      if (seekOpt) {\n        final BytesRef curTerm = currentSubs[i].current;\n        if (curTerm != null) {\n          final int cmp = termComp.compare(term, curTerm);\n          if (cmp == 0) {\n            status = true;\n          } else if (cmp < 0) {\n            status = false;\n          } else {\n            status = currentSubs[i].terms.seekExact(term, useCache);\n          }\n        } else {\n          status = false;\n        }\n      } else {\n        status = currentSubs[i].terms.seekExact(term, useCache);\n      }\n\n      if (status) {\n        top[numTop++] = currentSubs[i];\n        current = currentSubs[i].current = currentSubs[i].terms.term();\n      }\n    }\n\n    // if at least one sub had exact match to the requested\n    // term then we found match\n    return numTop > 0;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2553b00f699380c64959ccb27991289aae87be2e","date":1309290151,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/MultiTermsEnum#seekExact(BytesRef,boolean).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public boolean seekExact(BytesRef term, boolean useCache) throws IOException {\n    queue.clear();\n    numTop = 0;\n\n    boolean seekOpt = false;\n    if (lastSeek != null && termComp.compare(lastSeek, term) <= 0) {\n      seekOpt = true;\n    }\n\n    lastSeek = null;\n\n    for(int i=0;i<numSubs;i++) {\n      final boolean status;\n      // LUCENE-2130: if we had just seek'd already, prior\n      // to this seek, and the new seek term is after the\n      // previous one, don't try to re-seek this sub if its\n      // current term is already beyond this new seek term.\n      // Doing so is a waste because this sub will simply\n      // seek to the same spot.\n      if (seekOpt) {\n        final BytesRef curTerm = currentSubs[i].current;\n        if (curTerm != null) {\n          final int cmp = termComp.compare(term, curTerm);\n          if (cmp == 0) {\n            status = true;\n          } else if (cmp < 0) {\n            status = false;\n          } else {\n            status = currentSubs[i].terms.seekExact(term, useCache);\n          }\n        } else {\n          status = false;\n        }\n      } else {\n        status = currentSubs[i].terms.seekExact(term, useCache);\n      }\n\n      if (status) {\n        top[numTop++] = currentSubs[i];\n        current = currentSubs[i].current = currentSubs[i].terms.term();\n      }\n    }\n\n    // if at least one sub had exact match to the requested\n    // term then we found match\n    return numTop > 0;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0dbc7493b4f3e9c8bfa60028d6a4d82e2e9f0b67","date":1309449942,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/MultiTermsEnum#seekExact(BytesRef,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/MultiTermsEnum#seekExact(BytesRef,boolean).mjava","sourceNew":"  @Override\n  public boolean seekExact(BytesRef term, boolean useCache) throws IOException {\n    queue.clear();\n    numTop = 0;\n\n    boolean seekOpt = false;\n    if (lastSeek != null && termComp.compare(lastSeek, term) <= 0) {\n      seekOpt = true;\n    }\n\n    lastSeek = null;\n    lastSeekExact = true;\n\n    for(int i=0;i<numSubs;i++) {\n      final boolean status;\n      // LUCENE-2130: if we had just seek'd already, prior\n      // to this seek, and the new seek term is after the\n      // previous one, don't try to re-seek this sub if its\n      // current term is already beyond this new seek term.\n      // Doing so is a waste because this sub will simply\n      // seek to the same spot.\n      if (seekOpt) {\n        final BytesRef curTerm = currentSubs[i].current;\n        if (curTerm != null) {\n          final int cmp = termComp.compare(term, curTerm);\n          if (cmp == 0) {\n            status = true;\n          } else if (cmp < 0) {\n            status = false;\n          } else {\n            status = currentSubs[i].terms.seekExact(term, useCache);\n          }\n        } else {\n          status = false;\n        }\n      } else {\n        status = currentSubs[i].terms.seekExact(term, useCache);\n      }\n\n      if (status) {\n        top[numTop++] = currentSubs[i];\n        current = currentSubs[i].current = currentSubs[i].terms.term();\n        assert term.equals(currentSubs[i].current);\n      }\n    }\n\n    // if at least one sub had exact match to the requested\n    // term then we found match\n    return numTop > 0;\n  }\n\n","sourceOld":"  @Override\n  public boolean seekExact(BytesRef term, boolean useCache) throws IOException {\n    queue.clear();\n    numTop = 0;\n\n    boolean seekOpt = false;\n    if (lastSeek != null && termComp.compare(lastSeek, term) <= 0) {\n      seekOpt = true;\n    }\n\n    lastSeek = null;\n\n    for(int i=0;i<numSubs;i++) {\n      final boolean status;\n      // LUCENE-2130: if we had just seek'd already, prior\n      // to this seek, and the new seek term is after the\n      // previous one, don't try to re-seek this sub if its\n      // current term is already beyond this new seek term.\n      // Doing so is a waste because this sub will simply\n      // seek to the same spot.\n      if (seekOpt) {\n        final BytesRef curTerm = currentSubs[i].current;\n        if (curTerm != null) {\n          final int cmp = termComp.compare(term, curTerm);\n          if (cmp == 0) {\n            status = true;\n          } else if (cmp < 0) {\n            status = false;\n          } else {\n            status = currentSubs[i].terms.seekExact(term, useCache);\n          }\n        } else {\n          status = false;\n        }\n      } else {\n        status = currentSubs[i].terms.seekExact(term, useCache);\n      }\n\n      if (status) {\n        top[numTop++] = currentSubs[i];\n        current = currentSubs[i].current = currentSubs[i].terms.term();\n      }\n    }\n\n    // if at least one sub had exact match to the requested\n    // term then we found match\n    return numTop > 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/MultiTermsEnum#seekExact(BytesRef,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/MultiTermsEnum#seekExact(BytesRef,boolean).mjava","sourceNew":"  @Override\n  public boolean seekExact(BytesRef term, boolean useCache) throws IOException {\n    queue.clear();\n    numTop = 0;\n\n    boolean seekOpt = false;\n    if (lastSeek != null && termComp.compare(lastSeek, term) <= 0) {\n      seekOpt = true;\n    }\n\n    lastSeek = null;\n    lastSeekExact = true;\n\n    for(int i=0;i<numSubs;i++) {\n      final boolean status;\n      // LUCENE-2130: if we had just seek'd already, prior\n      // to this seek, and the new seek term is after the\n      // previous one, don't try to re-seek this sub if its\n      // current term is already beyond this new seek term.\n      // Doing so is a waste because this sub will simply\n      // seek to the same spot.\n      if (seekOpt) {\n        final BytesRef curTerm = currentSubs[i].current;\n        if (curTerm != null) {\n          final int cmp = termComp.compare(term, curTerm);\n          if (cmp == 0) {\n            status = true;\n          } else if (cmp < 0) {\n            status = false;\n          } else {\n            status = currentSubs[i].terms.seekExact(term, useCache);\n          }\n        } else {\n          status = false;\n        }\n      } else {\n        status = currentSubs[i].terms.seekExact(term, useCache);\n      }\n\n      if (status) {\n        top[numTop++] = currentSubs[i];\n        current = currentSubs[i].current = currentSubs[i].terms.term();\n        assert term.equals(currentSubs[i].current);\n      }\n    }\n\n    // if at least one sub had exact match to the requested\n    // term then we found match\n    return numTop > 0;\n  }\n\n","sourceOld":"  @Override\n  public boolean seekExact(BytesRef term, boolean useCache) throws IOException {\n    queue.clear();\n    numTop = 0;\n\n    boolean seekOpt = false;\n    if (lastSeek != null && termComp.compare(lastSeek, term) <= 0) {\n      seekOpt = true;\n    }\n\n    lastSeek = null;\n\n    for(int i=0;i<numSubs;i++) {\n      final boolean status;\n      // LUCENE-2130: if we had just seek'd already, prior\n      // to this seek, and the new seek term is after the\n      // previous one, don't try to re-seek this sub if its\n      // current term is already beyond this new seek term.\n      // Doing so is a waste because this sub will simply\n      // seek to the same spot.\n      if (seekOpt) {\n        final BytesRef curTerm = currentSubs[i].current;\n        if (curTerm != null) {\n          final int cmp = termComp.compare(term, curTerm);\n          if (cmp == 0) {\n            status = true;\n          } else if (cmp < 0) {\n            status = false;\n          } else {\n            status = currentSubs[i].terms.seekExact(term, useCache);\n          }\n        } else {\n          status = false;\n        }\n      } else {\n        status = currentSubs[i].terms.seekExact(term, useCache);\n      }\n\n      if (status) {\n        top[numTop++] = currentSubs[i];\n        current = currentSubs[i].current = currentSubs[i].terms.term();\n      }\n    }\n\n    // if at least one sub had exact match to the requested\n    // term then we found match\n    return numTop > 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/MultiTermsEnum#seekExact(BytesRef,boolean).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public boolean seekExact(BytesRef term, boolean useCache) throws IOException {\n    queue.clear();\n    numTop = 0;\n\n    boolean seekOpt = false;\n    if (lastSeek != null && termComp.compare(lastSeek, term) <= 0) {\n      seekOpt = true;\n    }\n\n    lastSeek = null;\n    lastSeekExact = true;\n\n    for(int i=0;i<numSubs;i++) {\n      final boolean status;\n      // LUCENE-2130: if we had just seek'd already, prior\n      // to this seek, and the new seek term is after the\n      // previous one, don't try to re-seek this sub if its\n      // current term is already beyond this new seek term.\n      // Doing so is a waste because this sub will simply\n      // seek to the same spot.\n      if (seekOpt) {\n        final BytesRef curTerm = currentSubs[i].current;\n        if (curTerm != null) {\n          final int cmp = termComp.compare(term, curTerm);\n          if (cmp == 0) {\n            status = true;\n          } else if (cmp < 0) {\n            status = false;\n          } else {\n            status = currentSubs[i].terms.seekExact(term, useCache);\n          }\n        } else {\n          status = false;\n        }\n      } else {\n        status = currentSubs[i].terms.seekExact(term, useCache);\n      }\n\n      if (status) {\n        top[numTop++] = currentSubs[i];\n        current = currentSubs[i].current = currentSubs[i].terms.term();\n        assert term.equals(currentSubs[i].current);\n      }\n    }\n\n    // if at least one sub had exact match to the requested\n    // term then we found match\n    return numTop > 0;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MultiTermsEnum#seekExact(BytesRef,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/MultiTermsEnum#seekExact(BytesRef,boolean).mjava","sourceNew":"  @Override\n  public boolean seekExact(BytesRef term, boolean useCache) throws IOException {\n    queue.clear();\n    numTop = 0;\n\n    boolean seekOpt = false;\n    if (lastSeek != null && termComp.compare(lastSeek, term) <= 0) {\n      seekOpt = true;\n    }\n\n    lastSeek = null;\n    lastSeekExact = true;\n\n    for(int i=0;i<numSubs;i++) {\n      final boolean status;\n      // LUCENE-2130: if we had just seek'd already, prior\n      // to this seek, and the new seek term is after the\n      // previous one, don't try to re-seek this sub if its\n      // current term is already beyond this new seek term.\n      // Doing so is a waste because this sub will simply\n      // seek to the same spot.\n      if (seekOpt) {\n        final BytesRef curTerm = currentSubs[i].current;\n        if (curTerm != null) {\n          final int cmp = termComp.compare(term, curTerm);\n          if (cmp == 0) {\n            status = true;\n          } else if (cmp < 0) {\n            status = false;\n          } else {\n            status = currentSubs[i].terms.seekExact(term, useCache);\n          }\n        } else {\n          status = false;\n        }\n      } else {\n        status = currentSubs[i].terms.seekExact(term, useCache);\n      }\n\n      if (status) {\n        top[numTop++] = currentSubs[i];\n        current = currentSubs[i].current = currentSubs[i].terms.term();\n        assert term.equals(currentSubs[i].current);\n      }\n    }\n\n    // if at least one sub had exact match to the requested\n    // term then we found match\n    return numTop > 0;\n  }\n\n","sourceOld":"  @Override\n  public boolean seekExact(BytesRef term, boolean useCache) throws IOException {\n    queue.clear();\n    numTop = 0;\n\n    boolean seekOpt = false;\n    if (lastSeek != null && termComp.compare(lastSeek, term) <= 0) {\n      seekOpt = true;\n    }\n\n    lastSeek = null;\n    lastSeekExact = true;\n\n    for(int i=0;i<numSubs;i++) {\n      final boolean status;\n      // LUCENE-2130: if we had just seek'd already, prior\n      // to this seek, and the new seek term is after the\n      // previous one, don't try to re-seek this sub if its\n      // current term is already beyond this new seek term.\n      // Doing so is a waste because this sub will simply\n      // seek to the same spot.\n      if (seekOpt) {\n        final BytesRef curTerm = currentSubs[i].current;\n        if (curTerm != null) {\n          final int cmp = termComp.compare(term, curTerm);\n          if (cmp == 0) {\n            status = true;\n          } else if (cmp < 0) {\n            status = false;\n          } else {\n            status = currentSubs[i].terms.seekExact(term, useCache);\n          }\n        } else {\n          status = false;\n        }\n      } else {\n        status = currentSubs[i].terms.seekExact(term, useCache);\n      }\n\n      if (status) {\n        top[numTop++] = currentSubs[i];\n        current = currentSubs[i].current = currentSubs[i].terms.term();\n        assert term.equals(currentSubs[i].current);\n      }\n    }\n\n    // if at least one sub had exact match to the requested\n    // term then we found match\n    return numTop > 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["0dbc7493b4f3e9c8bfa60028d6a4d82e2e9f0b67"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0dbc7493b4f3e9c8bfa60028d6a4d82e2e9f0b67":["fd9cc9d77712aba3662f24632df7539ab75e3667"],"2553b00f699380c64959ccb27991289aae87be2e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fd9cc9d77712aba3662f24632df7539ab75e3667"],"fd9cc9d77712aba3662f24632df7539ab75e3667":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0dbc7493b4f3e9c8bfa60028d6a4d82e2e9f0b67"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["2553b00f699380c64959ccb27991289aae87be2e","0dbc7493b4f3e9c8bfa60028d6a4d82e2e9f0b67"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2553b00f699380c64959ccb27991289aae87be2e","fd9cc9d77712aba3662f24632df7539ab75e3667","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"0dbc7493b4f3e9c8bfa60028d6a4d82e2e9f0b67":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"2553b00f699380c64959ccb27991289aae87be2e":["817d8435e9135b756f08ce6710ab0baac51bdf88"],"fd9cc9d77712aba3662f24632df7539ab75e3667":["0dbc7493b4f3e9c8bfa60028d6a4d82e2e9f0b67","2553b00f699380c64959ccb27991289aae87be2e"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}