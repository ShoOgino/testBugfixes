{"path":"lucene/codecs/src/test/org/apache/lucene/codecs/compressing/AbstractTestCompressionMode#testLongLiterals().mjava","commits":[{"id":"078bbd4ef812eb14d6d5b1c0ab72b4df820604dd","date":1351768691,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/test/org/apache/lucene/codecs/compressing/AbstractTestCompressionMode#testLongLiterals().mjava","pathOld":"/dev/null","sourceNew":"  public void testLongLiterals() throws IOException {\n    // long literals (length > 16) which are not the last literals\n    final byte[] decompressed = randomArray(RandomInts.randomIntBetween(random(), 400, 1024), 256);\n    final int matchRef = random().nextInt(30);\n    final int matchOff = RandomInts.randomIntBetween(random(), decompressed.length - 40, decompressed.length - 20);\n    final int matchLength = RandomInts.randomIntBetween(random(), 4, 10);\n    System.arraycopy(decompressed, matchRef, decompressed, matchOff, matchLength);\n    test(decompressed);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a51ec81f1fd009bf893bd88ec1c7b964fae6fab","date":1354403647,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/compressing/AbstractTestCompressionMode#testLongLiterals().mjava","pathOld":"lucene/codecs/src/test/org/apache/lucene/codecs/compressing/AbstractTestCompressionMode#testLongLiterals().mjava","sourceNew":"  public void testLongLiterals() throws IOException {\n    // long literals (length > 16) which are not the last literals\n    final byte[] decompressed = randomArray(RandomInts.randomIntBetween(random(), 400, 1024), 256);\n    final int matchRef = random().nextInt(30);\n    final int matchOff = RandomInts.randomIntBetween(random(), decompressed.length - 40, decompressed.length - 20);\n    final int matchLength = RandomInts.randomIntBetween(random(), 4, 10);\n    System.arraycopy(decompressed, matchRef, decompressed, matchOff, matchLength);\n    test(decompressed);\n  }\n\n","sourceOld":"  public void testLongLiterals() throws IOException {\n    // long literals (length > 16) which are not the last literals\n    final byte[] decompressed = randomArray(RandomInts.randomIntBetween(random(), 400, 1024), 256);\n    final int matchRef = random().nextInt(30);\n    final int matchOff = RandomInts.randomIntBetween(random(), decompressed.length - 40, decompressed.length - 20);\n    final int matchLength = RandomInts.randomIntBetween(random(), 4, 10);\n    System.arraycopy(decompressed, matchRef, decompressed, matchOff, matchLength);\n    test(decompressed);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/codecs/src/test/org/apache/lucene/codecs/compressing/AbstractTestCompressionMode#testLongLiterals().mjava","sourceNew":null,"sourceOld":"  public void testLongLiterals() throws IOException {\n    // long literals (length > 16) which are not the last literals\n    final byte[] decompressed = randomArray(RandomInts.randomIntBetween(random(), 400, 1024), 256);\n    final int matchRef = random().nextInt(30);\n    final int matchOff = RandomInts.randomIntBetween(random(), decompressed.length - 40, decompressed.length - 20);\n    final int matchLength = RandomInts.randomIntBetween(random(), 4, 10);\n    System.arraycopy(decompressed, matchRef, decompressed, matchOff, matchLength);\n    test(decompressed);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["078bbd4ef812eb14d6d5b1c0ab72b4df820604dd","1a51ec81f1fd009bf893bd88ec1c7b964fae6fab"],"078bbd4ef812eb14d6d5b1c0ab72b4df820604dd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1a51ec81f1fd009bf893bd88ec1c7b964fae6fab"],"1a51ec81f1fd009bf893bd88ec1c7b964fae6fab":["078bbd4ef812eb14d6d5b1c0ab72b4df820604dd"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["078bbd4ef812eb14d6d5b1c0ab72b4df820604dd"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"078bbd4ef812eb14d6d5b1c0ab72b4df820604dd":["407687e67faf6e1f02a211ca078d8e3eed631027","1a51ec81f1fd009bf893bd88ec1c7b964fae6fab"],"1a51ec81f1fd009bf893bd88ec1c7b964fae6fab":["407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}