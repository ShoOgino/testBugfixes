{"path":"lucene/sandbox/src/java/org/apache/lucene/document/XYShapeBoundingBoxQuery#relateRangeBBoxToQuery(int,int,byte[],int,int,byte[]).mjava","commits":[{"id":"c286b0d8c507a88b289407e2fe161effa275c6b0","date":1562615977,"type":0,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/XYShapeBoundingBoxQuery#relateRangeBBoxToQuery(int,int,byte[],int,int,byte[]).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  protected PointValues.Relation relateRangeBBoxToQuery(int minXOffset, int minYOffset, byte[] minTriangle,\n                                                        int maxXOffset, int maxYOffset, byte[] maxTriangle) {\n    return rectangle2D.relateRangeBBox(minXOffset, minYOffset, minTriangle, maxXOffset, maxYOffset, maxTriangle);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5e32619a05801247e931ce6b9998721600e247b0","date":1570166014,"type":3,"author":"Igor Motov","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/XYShapeBoundingBoxQuery#relateRangeBBoxToQuery(int,int,byte[],int,int,byte[]).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/XYShapeBoundingBoxQuery#relateRangeBBoxToQuery(int,int,byte[],int,int,byte[]).mjava","sourceNew":"  @Override\n  protected PointValues.Relation relateRangeBBoxToQuery(int minXOffset, int minYOffset, byte[] minTriangle,\n                                                        int maxXOffset, int maxYOffset, byte[] maxTriangle) {\n    if (queryRelation == QueryRelation.INTERSECTS || queryRelation == QueryRelation.DISJOINT) {\n      return rectangle2D.intersectRangeBBox(minXOffset, minYOffset, minTriangle, maxXOffset, maxYOffset, maxTriangle);\n    }\n    return rectangle2D.relateRangeBBox(minXOffset, minYOffset, minTriangle, maxXOffset, maxYOffset, maxTriangle);\n  }\n\n","sourceOld":"  @Override\n  protected PointValues.Relation relateRangeBBoxToQuery(int minXOffset, int minYOffset, byte[] minTriangle,\n                                                        int maxXOffset, int maxYOffset, byte[] maxTriangle) {\n    return rectangle2D.relateRangeBBox(minXOffset, minYOffset, minTriangle, maxXOffset, maxYOffset, maxTriangle);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":3,"author":"jimczi","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/XYShapeBoundingBoxQuery#relateRangeBBoxToQuery(int,int,byte[],int,int,byte[]).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/XYShapeBoundingBoxQuery#relateRangeBBoxToQuery(int,int,byte[],int,int,byte[]).mjava","sourceNew":"  @Override\n  protected PointValues.Relation relateRangeBBoxToQuery(int minXOffset, int minYOffset, byte[] minTriangle,\n                                                        int maxXOffset, int maxYOffset, byte[] maxTriangle) {\n    if (queryRelation == QueryRelation.INTERSECTS || queryRelation == QueryRelation.DISJOINT) {\n      return rectangle2D.intersectRangeBBox(minXOffset, minYOffset, minTriangle, maxXOffset, maxYOffset, maxTriangle);\n    }\n    return rectangle2D.relateRangeBBox(minXOffset, minYOffset, minTriangle, maxXOffset, maxYOffset, maxTriangle);\n  }\n\n","sourceOld":"  @Override\n  protected PointValues.Relation relateRangeBBoxToQuery(int minXOffset, int minYOffset, byte[] minTriangle,\n                                                        int maxXOffset, int maxYOffset, byte[] maxTriangle) {\n    return rectangle2D.relateRangeBBox(minXOffset, minYOffset, minTriangle, maxXOffset, maxYOffset, maxTriangle);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f2d8fb73c718c3fc5600f453cc514f18ae1b8c3","date":1576052211,"type":3,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/XYShapeBoundingBoxQuery#relateRangeBBoxToQuery(int,int,byte[],int,int,byte[]).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/XYShapeBoundingBoxQuery#relateRangeBBoxToQuery(int,int,byte[],int,int,byte[]).mjava","sourceNew":"  @Override\n  protected PointValues.Relation relateRangeBBoxToQuery(int minXOffset, int minYOffset, byte[] minTriangle,\n                                                        int maxXOffset, int maxYOffset, byte[] maxTriangle) {\n    double minY = decode(NumericUtils.sortableBytesToInt(minTriangle, minYOffset));\n    double minX = decode(NumericUtils.sortableBytesToInt(minTriangle, minXOffset));\n    double maxY = decode(NumericUtils.sortableBytesToInt(maxTriangle, maxYOffset));\n    double maxX = decode(NumericUtils.sortableBytesToInt(maxTriangle, maxXOffset));\n    // check internal node against query\n    PointValues.Relation rel = rectangle2D.relate(minX, maxX, minY, maxY);\n    // TODO: Check if this really helps\n    if (queryRelation == QueryRelation.INTERSECTS && rel == PointValues.Relation.CELL_CROSSES_QUERY) {\n      // for intersects we can restrict the conditions by using the inner box\n      double innerMaxY = decode(NumericUtils.sortableBytesToInt(maxTriangle, minYOffset));\n      if (rectangle2D.relate(minX, maxX, minY, innerMaxY) == PointValues.Relation.CELL_INSIDE_QUERY) {\n        return PointValues.Relation.CELL_INSIDE_QUERY;\n      }\n      double innerMaX = decode(NumericUtils.sortableBytesToInt(maxTriangle, minXOffset));\n      if (rectangle2D.relate(minX, innerMaX, minY, maxY) == PointValues.Relation.CELL_INSIDE_QUERY) {\n        return PointValues.Relation.CELL_INSIDE_QUERY;\n      }\n      double innerMinY = decode(NumericUtils.sortableBytesToInt(minTriangle, maxYOffset));\n      if (rectangle2D.relate(minX, maxX, innerMinY, maxY) == PointValues.Relation.CELL_INSIDE_QUERY) {\n        return PointValues.Relation.CELL_INSIDE_QUERY;\n      }\n      double innerMinX = decode(NumericUtils.sortableBytesToInt(minTriangle, maxXOffset));\n      if (rectangle2D.relate(innerMinX, maxX, minY, maxY) == PointValues.Relation.CELL_INSIDE_QUERY) {\n        return PointValues.Relation.CELL_INSIDE_QUERY;\n      }\n    }\n    return rel;\n  }\n\n","sourceOld":"  @Override\n  protected PointValues.Relation relateRangeBBoxToQuery(int minXOffset, int minYOffset, byte[] minTriangle,\n                                                        int maxXOffset, int maxYOffset, byte[] maxTriangle) {\n    if (queryRelation == QueryRelation.INTERSECTS || queryRelation == QueryRelation.DISJOINT) {\n      return rectangle2D.intersectRangeBBox(minXOffset, minYOffset, minTriangle, maxXOffset, maxYOffset, maxTriangle);\n    }\n    return rectangle2D.relateRangeBBox(minXOffset, minYOffset, minTriangle, maxXOffset, maxYOffset, maxTriangle);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6c6b7e01cb749c3b01e226e06085dfb1d9ed8eab","date":1576073026,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/XYShapeBoundingBoxQuery#relateRangeBBoxToQuery(int,int,byte[],int,int,byte[]).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/XYShapeBoundingBoxQuery#relateRangeBBoxToQuery(int,int,byte[],int,int,byte[]).mjava","sourceNew":"  @Override\n  protected PointValues.Relation relateRangeBBoxToQuery(int minXOffset, int minYOffset, byte[] minTriangle,\n                                                        int maxXOffset, int maxYOffset, byte[] maxTriangle) {\n    double minY = decode(NumericUtils.sortableBytesToInt(minTriangle, minYOffset));\n    double minX = decode(NumericUtils.sortableBytesToInt(minTriangle, minXOffset));\n    double maxY = decode(NumericUtils.sortableBytesToInt(maxTriangle, maxYOffset));\n    double maxX = decode(NumericUtils.sortableBytesToInt(maxTriangle, maxXOffset));\n    // check internal node against query\n    PointValues.Relation rel = rectangle2D.relate(minX, maxX, minY, maxY);\n    // TODO: Check if this really helps\n    if (queryRelation == QueryRelation.INTERSECTS && rel == PointValues.Relation.CELL_CROSSES_QUERY) {\n      // for intersects we can restrict the conditions by using the inner box\n      double innerMaxY = decode(NumericUtils.sortableBytesToInt(maxTriangle, minYOffset));\n      if (rectangle2D.relate(minX, maxX, minY, innerMaxY) == PointValues.Relation.CELL_INSIDE_QUERY) {\n        return PointValues.Relation.CELL_INSIDE_QUERY;\n      }\n      double innerMaX = decode(NumericUtils.sortableBytesToInt(maxTriangle, minXOffset));\n      if (rectangle2D.relate(minX, innerMaX, minY, maxY) == PointValues.Relation.CELL_INSIDE_QUERY) {\n        return PointValues.Relation.CELL_INSIDE_QUERY;\n      }\n      double innerMinY = decode(NumericUtils.sortableBytesToInt(minTriangle, maxYOffset));\n      if (rectangle2D.relate(minX, maxX, innerMinY, maxY) == PointValues.Relation.CELL_INSIDE_QUERY) {\n        return PointValues.Relation.CELL_INSIDE_QUERY;\n      }\n      double innerMinX = decode(NumericUtils.sortableBytesToInt(minTriangle, maxXOffset));\n      if (rectangle2D.relate(innerMinX, maxX, minY, maxY) == PointValues.Relation.CELL_INSIDE_QUERY) {\n        return PointValues.Relation.CELL_INSIDE_QUERY;\n      }\n    }\n    return rel;\n  }\n\n","sourceOld":"  @Override\n  protected PointValues.Relation relateRangeBBoxToQuery(int minXOffset, int minYOffset, byte[] minTriangle,\n                                                        int maxXOffset, int maxYOffset, byte[] maxTriangle) {\n    if (queryRelation == QueryRelation.INTERSECTS || queryRelation == QueryRelation.DISJOINT) {\n      return rectangle2D.intersectRangeBBox(minXOffset, minYOffset, minTriangle, maxXOffset, maxYOffset, maxTriangle);\n    }\n    return rectangle2D.relateRangeBBox(minXOffset, minYOffset, minTriangle, maxXOffset, maxYOffset, maxTriangle);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09c1e6d465800c73af60624bf9d4459a19f7940c","date":1579293280,"type":5,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/XYShapeBoundingBoxQuery#relateRangeBBoxToQuery(int,int,byte[],int,int,byte[]).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/XYShapeBoundingBoxQuery#relateRangeBBoxToQuery(int,int,byte[],int,int,byte[]).mjava","sourceNew":"  @Override\n  protected Relation relateRangeBBoxToQuery(int minXOffset, int minYOffset, byte[] minTriangle,\n                                                        int maxXOffset, int maxYOffset, byte[] maxTriangle) {\n    double minY = decode(NumericUtils.sortableBytesToInt(minTriangle, minYOffset));\n    double minX = decode(NumericUtils.sortableBytesToInt(minTriangle, minXOffset));\n    double maxY = decode(NumericUtils.sortableBytesToInt(maxTriangle, maxYOffset));\n    double maxX = decode(NumericUtils.sortableBytesToInt(maxTriangle, maxXOffset));\n    // check internal node against query\n    Relation rel = rectangle2D.relate(minX, maxX, minY, maxY);\n    // TODO: Check if this really helps\n    if (queryRelation == QueryRelation.INTERSECTS && rel == Relation.CELL_CROSSES_QUERY) {\n      // for intersects we can restrict the conditions by using the inner box\n      double innerMaxY = decode(NumericUtils.sortableBytesToInt(maxTriangle, minYOffset));\n      if (rectangle2D.relate(minX, maxX, minY, innerMaxY) == Relation.CELL_INSIDE_QUERY) {\n        return Relation.CELL_INSIDE_QUERY;\n      }\n      double innerMaX = decode(NumericUtils.sortableBytesToInt(maxTriangle, minXOffset));\n      if (rectangle2D.relate(minX, innerMaX, minY, maxY) == Relation.CELL_INSIDE_QUERY) {\n        return Relation.CELL_INSIDE_QUERY;\n      }\n      double innerMinY = decode(NumericUtils.sortableBytesToInt(minTriangle, maxYOffset));\n      if (rectangle2D.relate(minX, maxX, innerMinY, maxY) == Relation.CELL_INSIDE_QUERY) {\n        return Relation.CELL_INSIDE_QUERY;\n      }\n      double innerMinX = decode(NumericUtils.sortableBytesToInt(minTriangle, maxXOffset));\n      if (rectangle2D.relate(innerMinX, maxX, minY, maxY) == Relation.CELL_INSIDE_QUERY) {\n        return Relation.CELL_INSIDE_QUERY;\n      }\n    }\n    return rel;\n  }\n\n","sourceOld":"  @Override\n  protected PointValues.Relation relateRangeBBoxToQuery(int minXOffset, int minYOffset, byte[] minTriangle,\n                                                        int maxXOffset, int maxYOffset, byte[] maxTriangle) {\n    double minY = decode(NumericUtils.sortableBytesToInt(minTriangle, minYOffset));\n    double minX = decode(NumericUtils.sortableBytesToInt(minTriangle, minXOffset));\n    double maxY = decode(NumericUtils.sortableBytesToInt(maxTriangle, maxYOffset));\n    double maxX = decode(NumericUtils.sortableBytesToInt(maxTriangle, maxXOffset));\n    // check internal node against query\n    PointValues.Relation rel = rectangle2D.relate(minX, maxX, minY, maxY);\n    // TODO: Check if this really helps\n    if (queryRelation == QueryRelation.INTERSECTS && rel == PointValues.Relation.CELL_CROSSES_QUERY) {\n      // for intersects we can restrict the conditions by using the inner box\n      double innerMaxY = decode(NumericUtils.sortableBytesToInt(maxTriangle, minYOffset));\n      if (rectangle2D.relate(minX, maxX, minY, innerMaxY) == PointValues.Relation.CELL_INSIDE_QUERY) {\n        return PointValues.Relation.CELL_INSIDE_QUERY;\n      }\n      double innerMaX = decode(NumericUtils.sortableBytesToInt(maxTriangle, minXOffset));\n      if (rectangle2D.relate(minX, innerMaX, minY, maxY) == PointValues.Relation.CELL_INSIDE_QUERY) {\n        return PointValues.Relation.CELL_INSIDE_QUERY;\n      }\n      double innerMinY = decode(NumericUtils.sortableBytesToInt(minTriangle, maxYOffset));\n      if (rectangle2D.relate(minX, maxX, innerMinY, maxY) == PointValues.Relation.CELL_INSIDE_QUERY) {\n        return PointValues.Relation.CELL_INSIDE_QUERY;\n      }\n      double innerMinX = decode(NumericUtils.sortableBytesToInt(minTriangle, maxXOffset));\n      if (rectangle2D.relate(innerMinX, maxX, minY, maxY) == PointValues.Relation.CELL_INSIDE_QUERY) {\n        return PointValues.Relation.CELL_INSIDE_QUERY;\n      }\n    }\n    return rel;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6c6b7e01cb749c3b01e226e06085dfb1d9ed8eab":["5e32619a05801247e931ce6b9998721600e247b0","3f2d8fb73c718c3fc5600f453cc514f18ae1b8c3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"09c1e6d465800c73af60624bf9d4459a19f7940c":["3f2d8fb73c718c3fc5600f453cc514f18ae1b8c3"],"5e32619a05801247e931ce6b9998721600e247b0":["c286b0d8c507a88b289407e2fe161effa275c6b0"],"c286b0d8c507a88b289407e2fe161effa275c6b0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3f2d8fb73c718c3fc5600f453cc514f18ae1b8c3":["5e32619a05801247e931ce6b9998721600e247b0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["09c1e6d465800c73af60624bf9d4459a19f7940c"],"b0b597c65628ca9e73913a07e81691f8229bae35":["c286b0d8c507a88b289407e2fe161effa275c6b0","5e32619a05801247e931ce6b9998721600e247b0"]},"commit2Childs":{"6c6b7e01cb749c3b01e226e06085dfb1d9ed8eab":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c286b0d8c507a88b289407e2fe161effa275c6b0"],"5e32619a05801247e931ce6b9998721600e247b0":["6c6b7e01cb749c3b01e226e06085dfb1d9ed8eab","3f2d8fb73c718c3fc5600f453cc514f18ae1b8c3","b0b597c65628ca9e73913a07e81691f8229bae35"],"09c1e6d465800c73af60624bf9d4459a19f7940c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c286b0d8c507a88b289407e2fe161effa275c6b0":["5e32619a05801247e931ce6b9998721600e247b0","b0b597c65628ca9e73913a07e81691f8229bae35"],"3f2d8fb73c718c3fc5600f453cc514f18ae1b8c3":["6c6b7e01cb749c3b01e226e06085dfb1d9ed8eab","09c1e6d465800c73af60624bf9d4459a19f7940c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["6c6b7e01cb749c3b01e226e06085dfb1d9ed8eab","cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}