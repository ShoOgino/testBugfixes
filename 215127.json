{"path":"solr/core/src/test/org/apache/solr/spelling/DirectSolrSpellCheckerTest#test().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/spelling/DirectSolrSpellCheckerTest#test().mjava","pathOld":"solr/src/test/org/apache/solr/spelling/DirectSolrSpellCheckerTest#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    DirectSolrSpellChecker checker = new DirectSolrSpellChecker();\n    NamedList spellchecker = new NamedList();\n    spellchecker.add(\"classname\", DirectSolrSpellChecker.class.getName());\n    spellchecker.add(DirectSolrSpellChecker.FIELD, \"teststop\");\n    spellchecker.add(DirectSolrSpellChecker.MINQUERYLENGTH, 2); // we will try \"fob\"\n\n    SolrCore core = h.getCore();\n    checker.init(spellchecker, core);\n\n    RefCounted<SolrIndexSearcher> searcher = core.getSearcher();\n    Collection<Token> tokens = queryConverter.convert(\"fob\");\n    SpellingOptions spellOpts = new SpellingOptions(tokens, searcher.get().getIndexReader());\n    SpellingResult result = checker.getSuggestions(spellOpts);\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    Map<String, Integer> suggestions = result.get(tokens.iterator().next());\n    Map.Entry<String, Integer> entry = suggestions.entrySet().iterator().next();\n    assertTrue(entry.getKey() + \" is not equal to \" + \"foo\", entry.getKey().equals(\"foo\") == true);\n    assertFalse(entry.getValue() + \" equals: \" + SpellingResult.NO_FREQUENCY_INFO, entry.getValue() == SpellingResult.NO_FREQUENCY_INFO);\n\n    spellOpts.tokens = queryConverter.convert(\"super\");\n    result = checker.getSuggestions(spellOpts);\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    suggestions = result.get(tokens.iterator().next());\n    assertTrue(\"suggestions is not null and it should be\", suggestions == null);\n    searcher.decref();\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    DirectSolrSpellChecker checker = new DirectSolrSpellChecker();\n    NamedList spellchecker = new NamedList();\n    spellchecker.add(\"classname\", DirectSolrSpellChecker.class.getName());\n    spellchecker.add(DirectSolrSpellChecker.FIELD, \"teststop\");\n    spellchecker.add(DirectSolrSpellChecker.MINQUERYLENGTH, 2); // we will try \"fob\"\n\n    SolrCore core = h.getCore();\n    checker.init(spellchecker, core);\n\n    RefCounted<SolrIndexSearcher> searcher = core.getSearcher();\n    Collection<Token> tokens = queryConverter.convert(\"fob\");\n    SpellingOptions spellOpts = new SpellingOptions(tokens, searcher.get().getIndexReader());\n    SpellingResult result = checker.getSuggestions(spellOpts);\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    Map<String, Integer> suggestions = result.get(tokens.iterator().next());\n    Map.Entry<String, Integer> entry = suggestions.entrySet().iterator().next();\n    assertTrue(entry.getKey() + \" is not equal to \" + \"foo\", entry.getKey().equals(\"foo\") == true);\n    assertFalse(entry.getValue() + \" equals: \" + SpellingResult.NO_FREQUENCY_INFO, entry.getValue() == SpellingResult.NO_FREQUENCY_INFO);\n\n    spellOpts.tokens = queryConverter.convert(\"super\");\n    result = checker.getSuggestions(spellOpts);\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    suggestions = result.get(tokens.iterator().next());\n    assertTrue(\"suggestions is not null and it should be\", suggestions == null);\n    searcher.decref();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/spelling/DirectSolrSpellCheckerTest#test().mjava","pathOld":"solr/src/test/org/apache/solr/spelling/DirectSolrSpellCheckerTest#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    DirectSolrSpellChecker checker = new DirectSolrSpellChecker();\n    NamedList spellchecker = new NamedList();\n    spellchecker.add(\"classname\", DirectSolrSpellChecker.class.getName());\n    spellchecker.add(DirectSolrSpellChecker.FIELD, \"teststop\");\n    spellchecker.add(DirectSolrSpellChecker.MINQUERYLENGTH, 2); // we will try \"fob\"\n\n    SolrCore core = h.getCore();\n    checker.init(spellchecker, core);\n\n    RefCounted<SolrIndexSearcher> searcher = core.getSearcher();\n    Collection<Token> tokens = queryConverter.convert(\"fob\");\n    SpellingOptions spellOpts = new SpellingOptions(tokens, searcher.get().getIndexReader());\n    SpellingResult result = checker.getSuggestions(spellOpts);\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    Map<String, Integer> suggestions = result.get(tokens.iterator().next());\n    Map.Entry<String, Integer> entry = suggestions.entrySet().iterator().next();\n    assertTrue(entry.getKey() + \" is not equal to \" + \"foo\", entry.getKey().equals(\"foo\") == true);\n    assertFalse(entry.getValue() + \" equals: \" + SpellingResult.NO_FREQUENCY_INFO, entry.getValue() == SpellingResult.NO_FREQUENCY_INFO);\n\n    spellOpts.tokens = queryConverter.convert(\"super\");\n    result = checker.getSuggestions(spellOpts);\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    suggestions = result.get(tokens.iterator().next());\n    assertTrue(\"suggestions is not null and it should be\", suggestions == null);\n    searcher.decref();\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    DirectSolrSpellChecker checker = new DirectSolrSpellChecker();\n    NamedList spellchecker = new NamedList();\n    spellchecker.add(\"classname\", DirectSolrSpellChecker.class.getName());\n    spellchecker.add(DirectSolrSpellChecker.FIELD, \"teststop\");\n    spellchecker.add(DirectSolrSpellChecker.MINQUERYLENGTH, 2); // we will try \"fob\"\n\n    SolrCore core = h.getCore();\n    checker.init(spellchecker, core);\n\n    RefCounted<SolrIndexSearcher> searcher = core.getSearcher();\n    Collection<Token> tokens = queryConverter.convert(\"fob\");\n    SpellingOptions spellOpts = new SpellingOptions(tokens, searcher.get().getIndexReader());\n    SpellingResult result = checker.getSuggestions(spellOpts);\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    Map<String, Integer> suggestions = result.get(tokens.iterator().next());\n    Map.Entry<String, Integer> entry = suggestions.entrySet().iterator().next();\n    assertTrue(entry.getKey() + \" is not equal to \" + \"foo\", entry.getKey().equals(\"foo\") == true);\n    assertFalse(entry.getValue() + \" equals: \" + SpellingResult.NO_FREQUENCY_INFO, entry.getValue() == SpellingResult.NO_FREQUENCY_INFO);\n\n    spellOpts.tokens = queryConverter.convert(\"super\");\n    result = checker.getSuggestions(spellOpts);\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    suggestions = result.get(tokens.iterator().next());\n    assertTrue(\"suggestions is not null and it should be\", suggestions == null);\n    searcher.decref();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/spelling/DirectSolrSpellCheckerTest#test().mjava","pathOld":"solr/src/test/org/apache/solr/spelling/DirectSolrSpellCheckerTest#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    DirectSolrSpellChecker checker = new DirectSolrSpellChecker();\n    NamedList spellchecker = new NamedList();\n    spellchecker.add(\"classname\", DirectSolrSpellChecker.class.getName());\n    spellchecker.add(DirectSolrSpellChecker.FIELD, \"teststop\");\n    spellchecker.add(DirectSolrSpellChecker.MINQUERYLENGTH, 2); // we will try \"fob\"\n\n    SolrCore core = h.getCore();\n    checker.init(spellchecker, core);\n\n    RefCounted<SolrIndexSearcher> searcher = core.getSearcher();\n    Collection<Token> tokens = queryConverter.convert(\"fob\");\n    SpellingOptions spellOpts = new SpellingOptions(tokens, searcher.get().getIndexReader());\n    SpellingResult result = checker.getSuggestions(spellOpts);\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    Map<String, Integer> suggestions = result.get(tokens.iterator().next());\n    Map.Entry<String, Integer> entry = suggestions.entrySet().iterator().next();\n    assertTrue(entry.getKey() + \" is not equal to \" + \"foo\", entry.getKey().equals(\"foo\") == true);\n    assertFalse(entry.getValue() + \" equals: \" + SpellingResult.NO_FREQUENCY_INFO, entry.getValue() == SpellingResult.NO_FREQUENCY_INFO);\n\n    spellOpts.tokens = queryConverter.convert(\"super\");\n    result = checker.getSuggestions(spellOpts);\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    suggestions = result.get(tokens.iterator().next());\n    assertTrue(\"suggestions is not null and it should be\", suggestions == null);\n    searcher.decref();\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    DirectSolrSpellChecker checker = new DirectSolrSpellChecker();\n    NamedList spellchecker = new NamedList();\n    spellchecker.add(\"classname\", DirectSolrSpellChecker.class.getName());\n    spellchecker.add(DirectSolrSpellChecker.FIELD, \"teststop\");\n    spellchecker.add(DirectSolrSpellChecker.MINQUERYLENGTH, 2); // we will try \"fob\"\n\n    SolrCore core = h.getCore();\n    checker.init(spellchecker, core);\n\n    RefCounted<SolrIndexSearcher> searcher = core.getSearcher();\n    Collection<Token> tokens = queryConverter.convert(\"fob\");\n    SpellingOptions spellOpts = new SpellingOptions(tokens, searcher.get().getIndexReader());\n    SpellingResult result = checker.getSuggestions(spellOpts);\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    Map<String, Integer> suggestions = result.get(tokens.iterator().next());\n    Map.Entry<String, Integer> entry = suggestions.entrySet().iterator().next();\n    assertTrue(entry.getKey() + \" is not equal to \" + \"foo\", entry.getKey().equals(\"foo\") == true);\n    assertFalse(entry.getValue() + \" equals: \" + SpellingResult.NO_FREQUENCY_INFO, entry.getValue() == SpellingResult.NO_FREQUENCY_INFO);\n\n    spellOpts.tokens = queryConverter.convert(\"super\");\n    result = checker.getSuggestions(spellOpts);\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    suggestions = result.get(tokens.iterator().next());\n    assertTrue(\"suggestions is not null and it should be\", suggestions == null);\n    searcher.decref();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f08557cdb6c60ac7b88a9342c983a20cd236e74f","date":1330954480,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/spelling/DirectSolrSpellCheckerTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/spelling/DirectSolrSpellCheckerTest#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    DirectSolrSpellChecker checker = new DirectSolrSpellChecker();\n    NamedList spellchecker = new NamedList();\n    spellchecker.add(\"classname\", DirectSolrSpellChecker.class.getName());\n    spellchecker.add(SolrSpellChecker.FIELD, \"teststop\");\n    spellchecker.add(DirectSolrSpellChecker.MINQUERYLENGTH, 2); // we will try \"fob\"\n\n    SolrCore core = h.getCore();\n    checker.init(spellchecker, core);\n\n    RefCounted<SolrIndexSearcher> searcher = core.getSearcher();\n    Collection<Token> tokens = queryConverter.convert(\"fob\");\n    SpellingOptions spellOpts = new SpellingOptions(tokens, searcher.get().getIndexReader());\n    SpellingResult result = checker.getSuggestions(spellOpts);\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    Map<String, Integer> suggestions = result.get(tokens.iterator().next());\n    Map.Entry<String, Integer> entry = suggestions.entrySet().iterator().next();\n    assertTrue(entry.getKey() + \" is not equal to \" + \"foo\", entry.getKey().equals(\"foo\") == true);\n    assertFalse(entry.getValue() + \" equals: \" + SpellingResult.NO_FREQUENCY_INFO, entry.getValue() == SpellingResult.NO_FREQUENCY_INFO);\n\n    spellOpts.tokens = queryConverter.convert(\"super\");\n    result = checker.getSuggestions(spellOpts);\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    suggestions = result.get(tokens.iterator().next());\n    assertTrue(\"suggestions is not null and it should be\", suggestions == null);\n    searcher.decref();\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    DirectSolrSpellChecker checker = new DirectSolrSpellChecker();\n    NamedList spellchecker = new NamedList();\n    spellchecker.add(\"classname\", DirectSolrSpellChecker.class.getName());\n    spellchecker.add(DirectSolrSpellChecker.FIELD, \"teststop\");\n    spellchecker.add(DirectSolrSpellChecker.MINQUERYLENGTH, 2); // we will try \"fob\"\n\n    SolrCore core = h.getCore();\n    checker.init(spellchecker, core);\n\n    RefCounted<SolrIndexSearcher> searcher = core.getSearcher();\n    Collection<Token> tokens = queryConverter.convert(\"fob\");\n    SpellingOptions spellOpts = new SpellingOptions(tokens, searcher.get().getIndexReader());\n    SpellingResult result = checker.getSuggestions(spellOpts);\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    Map<String, Integer> suggestions = result.get(tokens.iterator().next());\n    Map.Entry<String, Integer> entry = suggestions.entrySet().iterator().next();\n    assertTrue(entry.getKey() + \" is not equal to \" + \"foo\", entry.getKey().equals(\"foo\") == true);\n    assertFalse(entry.getValue() + \" equals: \" + SpellingResult.NO_FREQUENCY_INFO, entry.getValue() == SpellingResult.NO_FREQUENCY_INFO);\n\n    spellOpts.tokens = queryConverter.convert(\"super\");\n    result = checker.getSuggestions(spellOpts);\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    suggestions = result.get(tokens.iterator().next());\n    assertTrue(\"suggestions is not null and it should be\", suggestions == null);\n    searcher.decref();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/spelling/DirectSolrSpellCheckerTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/spelling/DirectSolrSpellCheckerTest#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    DirectSolrSpellChecker checker = new DirectSolrSpellChecker();\n    NamedList spellchecker = new NamedList();\n    spellchecker.add(\"classname\", DirectSolrSpellChecker.class.getName());\n    spellchecker.add(SolrSpellChecker.FIELD, \"teststop\");\n    spellchecker.add(DirectSolrSpellChecker.MINQUERYLENGTH, 2); // we will try \"fob\"\n\n    SolrCore core = h.getCore();\n    checker.init(spellchecker, core);\n\n    RefCounted<SolrIndexSearcher> searcher = core.getSearcher();\n    Collection<Token> tokens = queryConverter.convert(\"fob\");\n    SpellingOptions spellOpts = new SpellingOptions(tokens, searcher.get().getIndexReader());\n    SpellingResult result = checker.getSuggestions(spellOpts);\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    Map<String, Integer> suggestions = result.get(tokens.iterator().next());\n    Map.Entry<String, Integer> entry = suggestions.entrySet().iterator().next();\n    assertTrue(entry.getKey() + \" is not equal to \" + \"foo\", entry.getKey().equals(\"foo\") == true);\n    assertFalse(entry.getValue() + \" equals: \" + SpellingResult.NO_FREQUENCY_INFO, entry.getValue() == SpellingResult.NO_FREQUENCY_INFO);\n\n    spellOpts.tokens = queryConverter.convert(\"super\");\n    result = checker.getSuggestions(spellOpts);\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    suggestions = result.get(tokens.iterator().next());\n    assertTrue(\"suggestions is not null and it should be\", suggestions == null);\n    searcher.decref();\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    DirectSolrSpellChecker checker = new DirectSolrSpellChecker();\n    NamedList spellchecker = new NamedList();\n    spellchecker.add(\"classname\", DirectSolrSpellChecker.class.getName());\n    spellchecker.add(DirectSolrSpellChecker.FIELD, \"teststop\");\n    spellchecker.add(DirectSolrSpellChecker.MINQUERYLENGTH, 2); // we will try \"fob\"\n\n    SolrCore core = h.getCore();\n    checker.init(spellchecker, core);\n\n    RefCounted<SolrIndexSearcher> searcher = core.getSearcher();\n    Collection<Token> tokens = queryConverter.convert(\"fob\");\n    SpellingOptions spellOpts = new SpellingOptions(tokens, searcher.get().getIndexReader());\n    SpellingResult result = checker.getSuggestions(spellOpts);\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    Map<String, Integer> suggestions = result.get(tokens.iterator().next());\n    Map.Entry<String, Integer> entry = suggestions.entrySet().iterator().next();\n    assertTrue(entry.getKey() + \" is not equal to \" + \"foo\", entry.getKey().equals(\"foo\") == true);\n    assertFalse(entry.getValue() + \" equals: \" + SpellingResult.NO_FREQUENCY_INFO, entry.getValue() == SpellingResult.NO_FREQUENCY_INFO);\n\n    spellOpts.tokens = queryConverter.convert(\"super\");\n    result = checker.getSuggestions(spellOpts);\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    suggestions = result.get(tokens.iterator().next());\n    assertTrue(\"suggestions is not null and it should be\", suggestions == null);\n    searcher.decref();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ab833f2b623042c834458d4cbcad05073a93793","date":1527625631,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/spelling/DirectSolrSpellCheckerTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/spelling/DirectSolrSpellCheckerTest#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    DirectSolrSpellChecker checker = new DirectSolrSpellChecker();\n    NamedList spellchecker = new NamedList();\n    spellchecker.add(\"classname\", DirectSolrSpellChecker.class.getName());\n    spellchecker.add(SolrSpellChecker.FIELD, \"teststop\");\n    spellchecker.add(DirectSolrSpellChecker.MINQUERYLENGTH, 2); // we will try \"fob\"\n\n    SolrCore core = h.getCore();\n    checker.init(spellchecker, core);\n\n    h.getCore().withSearcher(searcher -> {\n      Collection<Token> tokens = queryConverter.convert(\"fob\");\n      SpellingOptions spellOpts = new SpellingOptions(tokens, searcher.getIndexReader());\n      SpellingResult result = checker.getSuggestions(spellOpts);\n      assertTrue(\"result is null and it shouldn't be\", result != null);\n      Map<String, Integer> suggestions = result.get(tokens.iterator().next());\n      Map.Entry<String, Integer> entry = suggestions.entrySet().iterator().next();\n      assertTrue(entry.getKey() + \" is not equal to \" + \"foo\", entry.getKey().equals(\"foo\") == true);\n      assertFalse(entry.getValue() + \" equals: \" + SpellingResult.NO_FREQUENCY_INFO, entry.getValue() == SpellingResult.NO_FREQUENCY_INFO);\n\n      spellOpts.tokens = queryConverter.convert(\"super\");\n      result = checker.getSuggestions(spellOpts);\n      assertTrue(\"result is null and it shouldn't be\", result != null);\n      suggestions = result.get(tokens.iterator().next());\n      assertTrue(\"suggestions is not null and it should be\", suggestions == null);\n      return null;\n    });\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    DirectSolrSpellChecker checker = new DirectSolrSpellChecker();\n    NamedList spellchecker = new NamedList();\n    spellchecker.add(\"classname\", DirectSolrSpellChecker.class.getName());\n    spellchecker.add(SolrSpellChecker.FIELD, \"teststop\");\n    spellchecker.add(DirectSolrSpellChecker.MINQUERYLENGTH, 2); // we will try \"fob\"\n\n    SolrCore core = h.getCore();\n    checker.init(spellchecker, core);\n\n    RefCounted<SolrIndexSearcher> searcher = core.getSearcher();\n    Collection<Token> tokens = queryConverter.convert(\"fob\");\n    SpellingOptions spellOpts = new SpellingOptions(tokens, searcher.get().getIndexReader());\n    SpellingResult result = checker.getSuggestions(spellOpts);\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    Map<String, Integer> suggestions = result.get(tokens.iterator().next());\n    Map.Entry<String, Integer> entry = suggestions.entrySet().iterator().next();\n    assertTrue(entry.getKey() + \" is not equal to \" + \"foo\", entry.getKey().equals(\"foo\") == true);\n    assertFalse(entry.getValue() + \" equals: \" + SpellingResult.NO_FREQUENCY_INFO, entry.getValue() == SpellingResult.NO_FREQUENCY_INFO);\n\n    spellOpts.tokens = queryConverter.convert(\"super\");\n    result = checker.getSuggestions(spellOpts);\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    suggestions = result.get(tokens.iterator().next());\n    assertTrue(\"suggestions is not null and it should be\", suggestions == null);\n    searcher.decref();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2138c838f1c8052d94d61eb1e205dce7fa6932ef","date":1527642223,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/spelling/DirectSolrSpellCheckerTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/spelling/DirectSolrSpellCheckerTest#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    DirectSolrSpellChecker checker = new DirectSolrSpellChecker();\n    NamedList spellchecker = new NamedList();\n    spellchecker.add(\"classname\", DirectSolrSpellChecker.class.getName());\n    spellchecker.add(SolrSpellChecker.FIELD, \"teststop\");\n    spellchecker.add(DirectSolrSpellChecker.MINQUERYLENGTH, 2); // we will try \"fob\"\n\n    SolrCore core = h.getCore();\n    checker.init(spellchecker, core);\n\n    h.getCore().withSearcher(searcher -> {\n      Collection<Token> tokens = queryConverter.convert(\"fob\");\n      SpellingOptions spellOpts = new SpellingOptions(tokens, searcher.getIndexReader());\n      SpellingResult result = checker.getSuggestions(spellOpts);\n      assertTrue(\"result is null and it shouldn't be\", result != null);\n      Map<String, Integer> suggestions = result.get(tokens.iterator().next());\n      Map.Entry<String, Integer> entry = suggestions.entrySet().iterator().next();\n      assertTrue(entry.getKey() + \" is not equal to \" + \"foo\", entry.getKey().equals(\"foo\") == true);\n      assertFalse(entry.getValue() + \" equals: \" + SpellingResult.NO_FREQUENCY_INFO, entry.getValue() == SpellingResult.NO_FREQUENCY_INFO);\n\n      spellOpts.tokens = queryConverter.convert(\"super\");\n      result = checker.getSuggestions(spellOpts);\n      assertTrue(\"result is null and it shouldn't be\", result != null);\n      suggestions = result.get(tokens.iterator().next());\n      assertTrue(\"suggestions is not null and it should be\", suggestions == null);\n      return null;\n    });\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    DirectSolrSpellChecker checker = new DirectSolrSpellChecker();\n    NamedList spellchecker = new NamedList();\n    spellchecker.add(\"classname\", DirectSolrSpellChecker.class.getName());\n    spellchecker.add(SolrSpellChecker.FIELD, \"teststop\");\n    spellchecker.add(DirectSolrSpellChecker.MINQUERYLENGTH, 2); // we will try \"fob\"\n\n    SolrCore core = h.getCore();\n    checker.init(spellchecker, core);\n\n    RefCounted<SolrIndexSearcher> searcher = core.getSearcher();\n    Collection<Token> tokens = queryConverter.convert(\"fob\");\n    SpellingOptions spellOpts = new SpellingOptions(tokens, searcher.get().getIndexReader());\n    SpellingResult result = checker.getSuggestions(spellOpts);\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    Map<String, Integer> suggestions = result.get(tokens.iterator().next());\n    Map.Entry<String, Integer> entry = suggestions.entrySet().iterator().next();\n    assertTrue(entry.getKey() + \" is not equal to \" + \"foo\", entry.getKey().equals(\"foo\") == true);\n    assertFalse(entry.getValue() + \" equals: \" + SpellingResult.NO_FREQUENCY_INFO, entry.getValue() == SpellingResult.NO_FREQUENCY_INFO);\n\n    spellOpts.tokens = queryConverter.convert(\"super\");\n    result = checker.getSuggestions(spellOpts);\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    suggestions = result.get(tokens.iterator().next());\n    assertTrue(\"suggestions is not null and it should be\", suggestions == null);\n    searcher.decref();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"438117c5355b74dcb5b01197e08f16858e726c7d","date":1577196300,"type":3,"author":"Bruno Roustant","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/spelling/DirectSolrSpellCheckerTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/spelling/DirectSolrSpellCheckerTest#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    DirectSolrSpellChecker checker = new DirectSolrSpellChecker();\n    NamedList spellchecker = new NamedList();\n    spellchecker.add(\"classname\", DirectSolrSpellChecker.class.getName());\n    spellchecker.add(SolrSpellChecker.FIELD, \"teststop\");\n    spellchecker.add(DirectSolrSpellChecker.MINQUERYLENGTH, 2); // we will try \"fob\"\n\n    SolrCore core = h.getCore();\n    checker.init(spellchecker, core);\n\n    h.getCore().withSearcher(searcher -> {\n\n      // check that 'fob' is corrected to 'foo'\n      Collection<Token> tokens = queryConverter.convert(\"fob\");\n      SpellingOptions spellOpts = new SpellingOptions(tokens, searcher.getIndexReader());\n      SpellingResult result = checker.getSuggestions(spellOpts);\n      assertNotNull(\"result shouldn't be null\", result);\n      Map<String, Integer> suggestions = result.get(tokens.iterator().next());\n      assertFalse(\"suggestions shouldn't be empty\", suggestions.isEmpty());\n      Map.Entry<String, Integer> entry = suggestions.entrySet().iterator().next();\n      assertEquals(\"foo\", entry.getKey());\n      assertFalse(entry.getValue() + \" equals: \" + SpellingResult.NO_FREQUENCY_INFO, entry.getValue() == SpellingResult.NO_FREQUENCY_INFO);\n\n      // check that 'super' is *not* corrected\n      spellOpts.tokens = queryConverter.convert(\"super\");\n      result = checker.getSuggestions(spellOpts);\n      assertNotNull(\"result shouldn't be null\", result);\n      suggestions = result.get(spellOpts.tokens.iterator().next());\n      assertNotNull(\"suggestions shouldn't be null\", suggestions);\n      assertTrue(\"suggestions should be empty\", suggestions.isEmpty());\n      return null;\n    });\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    DirectSolrSpellChecker checker = new DirectSolrSpellChecker();\n    NamedList spellchecker = new NamedList();\n    spellchecker.add(\"classname\", DirectSolrSpellChecker.class.getName());\n    spellchecker.add(SolrSpellChecker.FIELD, \"teststop\");\n    spellchecker.add(DirectSolrSpellChecker.MINQUERYLENGTH, 2); // we will try \"fob\"\n\n    SolrCore core = h.getCore();\n    checker.init(spellchecker, core);\n\n    h.getCore().withSearcher(searcher -> {\n      Collection<Token> tokens = queryConverter.convert(\"fob\");\n      SpellingOptions spellOpts = new SpellingOptions(tokens, searcher.getIndexReader());\n      SpellingResult result = checker.getSuggestions(spellOpts);\n      assertTrue(\"result is null and it shouldn't be\", result != null);\n      Map<String, Integer> suggestions = result.get(tokens.iterator().next());\n      Map.Entry<String, Integer> entry = suggestions.entrySet().iterator().next();\n      assertTrue(entry.getKey() + \" is not equal to \" + \"foo\", entry.getKey().equals(\"foo\") == true);\n      assertFalse(entry.getValue() + \" equals: \" + SpellingResult.NO_FREQUENCY_INFO, entry.getValue() == SpellingResult.NO_FREQUENCY_INFO);\n\n      spellOpts.tokens = queryConverter.convert(\"super\");\n      result = checker.getSuggestions(spellOpts);\n      assertTrue(\"result is null and it shouldn't be\", result != null);\n      suggestions = result.get(tokens.iterator().next());\n      assertTrue(\"suggestions is not null and it should be\", suggestions == null);\n      return null;\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"96b4a3cd1f2463ebc4ffc0f61acdb3359637fe2a","date":1577276097,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/spelling/DirectSolrSpellCheckerTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/spelling/DirectSolrSpellCheckerTest#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    DirectSolrSpellChecker checker = new DirectSolrSpellChecker();\n    NamedList spellchecker = new NamedList();\n    spellchecker.add(\"classname\", DirectSolrSpellChecker.class.getName());\n    spellchecker.add(SolrSpellChecker.FIELD, \"teststop\");\n    spellchecker.add(DirectSolrSpellChecker.MINQUERYLENGTH, 2); // we will try \"fob\"\n\n    SolrCore core = h.getCore();\n    checker.init(spellchecker, core);\n\n    h.getCore().withSearcher(searcher -> {\n\n      // check that 'fob' is corrected to 'foo'\n      Collection<Token> tokens = queryConverter.convert(\"fob\");\n      SpellingOptions spellOpts = new SpellingOptions(tokens, searcher.getIndexReader());\n      SpellingResult result = checker.getSuggestions(spellOpts);\n      assertNotNull(\"result shouldn't be null\", result);\n      Map<String, Integer> suggestions = result.get(tokens.iterator().next());\n      assertFalse(\"suggestions shouldn't be empty\", suggestions.isEmpty());\n      Map.Entry<String, Integer> entry = suggestions.entrySet().iterator().next();\n      assertEquals(\"foo\", entry.getKey());\n      assertFalse(entry.getValue() + \" equals: \" + SpellingResult.NO_FREQUENCY_INFO, entry.getValue() == SpellingResult.NO_FREQUENCY_INFO);\n\n      // check that 'super' is *not* corrected\n      spellOpts.tokens = queryConverter.convert(\"super\");\n      result = checker.getSuggestions(spellOpts);\n      assertNotNull(\"result shouldn't be null\", result);\n      suggestions = result.get(spellOpts.tokens.iterator().next());\n      assertNotNull(\"suggestions shouldn't be null\", suggestions);\n      assertTrue(\"suggestions should be empty\", suggestions.isEmpty());\n      return null;\n    });\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    DirectSolrSpellChecker checker = new DirectSolrSpellChecker();\n    NamedList spellchecker = new NamedList();\n    spellchecker.add(\"classname\", DirectSolrSpellChecker.class.getName());\n    spellchecker.add(SolrSpellChecker.FIELD, \"teststop\");\n    spellchecker.add(DirectSolrSpellChecker.MINQUERYLENGTH, 2); // we will try \"fob\"\n\n    SolrCore core = h.getCore();\n    checker.init(spellchecker, core);\n\n    h.getCore().withSearcher(searcher -> {\n      Collection<Token> tokens = queryConverter.convert(\"fob\");\n      SpellingOptions spellOpts = new SpellingOptions(tokens, searcher.getIndexReader());\n      SpellingResult result = checker.getSuggestions(spellOpts);\n      assertTrue(\"result is null and it shouldn't be\", result != null);\n      Map<String, Integer> suggestions = result.get(tokens.iterator().next());\n      Map.Entry<String, Integer> entry = suggestions.entrySet().iterator().next();\n      assertTrue(entry.getKey() + \" is not equal to \" + \"foo\", entry.getKey().equals(\"foo\") == true);\n      assertFalse(entry.getValue() + \" equals: \" + SpellingResult.NO_FREQUENCY_INFO, entry.getValue() == SpellingResult.NO_FREQUENCY_INFO);\n\n      spellOpts.tokens = queryConverter.convert(\"super\");\n      result = checker.getSuggestions(spellOpts);\n      assertTrue(\"result is null and it shouldn't be\", result != null);\n      suggestions = result.get(tokens.iterator().next());\n      assertTrue(\"suggestions is not null and it should be\", suggestions == null);\n      return null;\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa2585c33d5d66a1c837c312221eb55ddb3c4300","date":1592493170,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/spelling/DirectSolrSpellCheckerTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/spelling/DirectSolrSpellCheckerTest#test().mjava","sourceNew":"  @Test\n  @SuppressWarnings({\"unchecked\"})\n  public void test() throws Exception {\n    DirectSolrSpellChecker checker = new DirectSolrSpellChecker();\n    @SuppressWarnings({\"rawtypes\"})\n    NamedList spellchecker = new NamedList();\n    spellchecker.add(\"classname\", DirectSolrSpellChecker.class.getName());\n    spellchecker.add(SolrSpellChecker.FIELD, \"teststop\");\n    spellchecker.add(DirectSolrSpellChecker.MINQUERYLENGTH, 2); // we will try \"fob\"\n\n    SolrCore core = h.getCore();\n    checker.init(spellchecker, core);\n\n    h.getCore().withSearcher(searcher -> {\n\n      // check that 'fob' is corrected to 'foo'\n      Collection<Token> tokens = queryConverter.convert(\"fob\");\n      SpellingOptions spellOpts = new SpellingOptions(tokens, searcher.getIndexReader());\n      SpellingResult result = checker.getSuggestions(spellOpts);\n      assertNotNull(\"result shouldn't be null\", result);\n      Map<String, Integer> suggestions = result.get(tokens.iterator().next());\n      assertFalse(\"suggestions shouldn't be empty\", suggestions.isEmpty());\n      Map.Entry<String, Integer> entry = suggestions.entrySet().iterator().next();\n      assertEquals(\"foo\", entry.getKey());\n      assertFalse(entry.getValue() + \" equals: \" + SpellingResult.NO_FREQUENCY_INFO, entry.getValue() == SpellingResult.NO_FREQUENCY_INFO);\n\n      // check that 'super' is *not* corrected\n      spellOpts.tokens = queryConverter.convert(\"super\");\n      result = checker.getSuggestions(spellOpts);\n      assertNotNull(\"result shouldn't be null\", result);\n      suggestions = result.get(spellOpts.tokens.iterator().next());\n      assertNotNull(\"suggestions shouldn't be null\", suggestions);\n      assertTrue(\"suggestions should be empty\", suggestions.isEmpty());\n      return null;\n    });\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    DirectSolrSpellChecker checker = new DirectSolrSpellChecker();\n    NamedList spellchecker = new NamedList();\n    spellchecker.add(\"classname\", DirectSolrSpellChecker.class.getName());\n    spellchecker.add(SolrSpellChecker.FIELD, \"teststop\");\n    spellchecker.add(DirectSolrSpellChecker.MINQUERYLENGTH, 2); // we will try \"fob\"\n\n    SolrCore core = h.getCore();\n    checker.init(spellchecker, core);\n\n    h.getCore().withSearcher(searcher -> {\n\n      // check that 'fob' is corrected to 'foo'\n      Collection<Token> tokens = queryConverter.convert(\"fob\");\n      SpellingOptions spellOpts = new SpellingOptions(tokens, searcher.getIndexReader());\n      SpellingResult result = checker.getSuggestions(spellOpts);\n      assertNotNull(\"result shouldn't be null\", result);\n      Map<String, Integer> suggestions = result.get(tokens.iterator().next());\n      assertFalse(\"suggestions shouldn't be empty\", suggestions.isEmpty());\n      Map.Entry<String, Integer> entry = suggestions.entrySet().iterator().next();\n      assertEquals(\"foo\", entry.getKey());\n      assertFalse(entry.getValue() + \" equals: \" + SpellingResult.NO_FREQUENCY_INFO, entry.getValue() == SpellingResult.NO_FREQUENCY_INFO);\n\n      // check that 'super' is *not* corrected\n      spellOpts.tokens = queryConverter.convert(\"super\");\n      result = checker.getSuggestions(spellOpts);\n      assertNotNull(\"result shouldn't be null\", result);\n      suggestions = result.get(spellOpts.tokens.iterator().next());\n      assertNotNull(\"suggestions shouldn't be null\", suggestions);\n      assertTrue(\"suggestions should be empty\", suggestions.isEmpty());\n      return null;\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"96b4a3cd1f2463ebc4ffc0f61acdb3359637fe2a":["2138c838f1c8052d94d61eb1e205dce7fa6932ef","438117c5355b74dcb5b01197e08f16858e726c7d"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["438117c5355b74dcb5b01197e08f16858e726c7d"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["c26f00b574427b55127e869b935845554afde1fa","f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f08557cdb6c60ac7b88a9342c983a20cd236e74f":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4ab833f2b623042c834458d4cbcad05073a93793":["f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"438117c5355b74dcb5b01197e08f16858e726c7d":["2138c838f1c8052d94d61eb1e205dce7fa6932ef"],"2138c838f1c8052d94d61eb1e205dce7fa6932ef":["f08557cdb6c60ac7b88a9342c983a20cd236e74f","4ab833f2b623042c834458d4cbcad05073a93793"]},"commit2Childs":{"96b4a3cd1f2463ebc4ffc0f61acdb3359637fe2a":[],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"f08557cdb6c60ac7b88a9342c983a20cd236e74f":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","4ab833f2b623042c834458d4cbcad05073a93793","2138c838f1c8052d94d61eb1e205dce7fa6932ef"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"4ab833f2b623042c834458d4cbcad05073a93793":["2138c838f1c8052d94d61eb1e205dce7fa6932ef"],"2138c838f1c8052d94d61eb1e205dce7fa6932ef":["96b4a3cd1f2463ebc4ffc0f61acdb3359637fe2a","438117c5355b74dcb5b01197e08f16858e726c7d"],"438117c5355b74dcb5b01197e08f16858e726c7d":["96b4a3cd1f2463ebc4ffc0f61acdb3359637fe2a","aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["96b4a3cd1f2463ebc4ffc0f61acdb3359637fe2a","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}