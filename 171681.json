{"path":"solr/core/src/test/org/apache/solr/core/TestJmxIntegration#beforeClass().mjava","commits":[{"id":"d9405f486872f1e416304dfe389741f4ee2f8a4d","date":1351276739,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestJmxIntegration#beforeClass().mjava","pathOld":"/dev/null","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    initCore(\"solrconfig.xml\", \"schema.xml\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2126b84bd093fa3d921582a109a0ee578c28126","date":1351522501,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestJmxIntegration#beforeClass().mjava","pathOld":"/dev/null","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    initCore(\"solrconfig.xml\", \"schema.xml\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c1d6d844f3b4061aedc283b5e71ff1d19aeae291","date":1375221534,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestJmxIntegration#beforeClass().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestJmxIntegration#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    // Make sure that at least one MBeanServer is available\n    // prior to initializing the core\n    //\n    // (test configs are setup to use existing server if any, \n    // otherwise skip JMX)\n    MBeanServer platformServer = ManagementFactory.getPlatformMBeanServer();\n\n    initCore(\"solrconfig.xml\", \"schema.xml\");\n\n    // we should be able to se that the core has JmxIntegration enabled\n    assertTrue(\"JMX not enabled\",\n               h.getCore().getSolrConfig().jmxConfig.enabled);\n    // and we should be able to see that the the monitor map found \n    // a JMX server to use, which refers to the server we started\n\n    Map registry = h.getCore().getInfoRegistry();\n    assertTrue(\"info registry is not a JMX monitored map\",\n               registry instanceof JmxMonitoredMap);\n    mbeanServer = ((JmxMonitoredMap)registry).getServer();\n\n    assertNotNull(\"No JMX server found by monitor map\",\n                  mbeanServer);\n\n    // NOTE: we can't garuntee that \"mbeanServer == platformServer\"\n    // the JVM may have mutiple MBean servers funning when the test started\n    // and the contract of not specifying one when configuring solr with\n    // <jmx /> is that it will use whatever the \"first\" MBean server \n    // returned by the JVM is.\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    initCore(\"solrconfig.xml\", \"schema.xml\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestJmxIntegration#beforeClass().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestJmxIntegration#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    // Make sure that at least one MBeanServer is available\n    // prior to initializing the core\n    //\n    // (test configs are setup to use existing server if any, \n    // otherwise skip JMX)\n    MBeanServer platformServer = ManagementFactory.getPlatformMBeanServer();\n\n    initCore(\"solrconfig.xml\", \"schema.xml\");\n\n    // we should be able to se that the core has JmxIntegration enabled\n    assertTrue(\"JMX not enabled\",\n               h.getCore().getSolrConfig().jmxConfig.enabled);\n    // and we should be able to see that the the monitor map found \n    // a JMX server to use, which refers to the server we started\n\n    Map registry = h.getCore().getInfoRegistry();\n    assertTrue(\"info registry is not a JMX monitored map\",\n               registry instanceof JmxMonitoredMap);\n    mbeanServer = ((JmxMonitoredMap)registry).getServer();\n\n    assertNotNull(\"No JMX server found by monitor map\",\n                  mbeanServer);\n\n    // NOTE: we can't garuntee that \"mbeanServer == platformServer\"\n    // the JVM may have mutiple MBean servers funning when the test started\n    // and the contract of not specifying one when configuring solr with\n    // <jmx /> is that it will use whatever the \"first\" MBean server \n    // returned by the JVM is.\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    initCore(\"solrconfig.xml\", \"schema.xml\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"816521ebaad5add9cb96bb88c577394e2938c40b","date":1491931343,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestJmxIntegration#beforeClass().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestJmxIntegration#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    // Make sure that at least one MBeanServer is available\n    // prior to initializing the core\n    //\n    // (test configs are setup to use existing server if any, \n    // otherwise skip JMX)\n    MBeanServer platformServer = ManagementFactory.getPlatformMBeanServer();\n\n    initCore(\"solrconfig.xml\", \"schema.xml\");\n\n    // we should be able to see that the core has JmxIntegration enabled\n    registryName = h.getCore().getCoreMetricManager().getRegistryName();\n    SolrMetricManager manager = h.getCoreContainer().getMetricManager();\n    Map<String,SolrMetricReporter> reporters = manager.getReporters(registryName);\n    assertEquals(1, reporters.size());\n    SolrMetricReporter reporter = reporters.values().iterator().next();\n    assertTrue(reporter instanceof SolrJmxReporter);\n    SolrJmxReporter jmx = (SolrJmxReporter)reporter;\n    assertTrue(\"JMX not enabled\", jmx.isActive());\n    // and we should be able to see that the reporter\n    // refers to the JMX server we started\n\n    mbeanServer = jmx.getMBeanServer();\n\n    assertNotNull(\"No JMX server found in the reporter\",\n        mbeanServer);\n\n    // NOTE: we can't guarantee that \"mbeanServer == platformServer\"\n    // the JVM may have multiple MBean servers running when the test started\n    // and the contract of not specifying one when configuring solr.xml without\n    // agetnId or serviceUrl is that it will use whatever the \"first\" MBean server\n    // returned by the JVM is.\n\n    nameFactory = new JmxObjectNameFactory(\"default\", registryName);\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    // Make sure that at least one MBeanServer is available\n    // prior to initializing the core\n    //\n    // (test configs are setup to use existing server if any, \n    // otherwise skip JMX)\n    MBeanServer platformServer = ManagementFactory.getPlatformMBeanServer();\n\n    initCore(\"solrconfig.xml\", \"schema.xml\");\n\n    // we should be able to se that the core has JmxIntegration enabled\n    assertTrue(\"JMX not enabled\",\n               h.getCore().getSolrConfig().jmxConfig.enabled);\n    // and we should be able to see that the the monitor map found \n    // a JMX server to use, which refers to the server we started\n\n    Map registry = h.getCore().getInfoRegistry();\n    assertTrue(\"info registry is not a JMX monitored map\",\n               registry instanceof JmxMonitoredMap);\n    mbeanServer = ((JmxMonitoredMap)registry).getServer();\n\n    assertNotNull(\"No JMX server found by monitor map\",\n                  mbeanServer);\n\n    // NOTE: we can't garuntee that \"mbeanServer == platformServer\"\n    // the JVM may have mutiple MBean servers funning when the test started\n    // and the contract of not specifying one when configuring solr with\n    // <jmx /> is that it will use whatever the \"first\" MBean server \n    // returned by the JVM is.\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestJmxIntegration#beforeClass().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestJmxIntegration#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    // Make sure that at least one MBeanServer is available\n    // prior to initializing the core\n    //\n    // (test configs are setup to use existing server if any, \n    // otherwise skip JMX)\n    MBeanServer platformServer = ManagementFactory.getPlatformMBeanServer();\n\n    initCore(\"solrconfig.xml\", \"schema.xml\");\n\n    // we should be able to see that the core has JmxIntegration enabled\n    registryName = h.getCore().getCoreMetricManager().getRegistryName();\n    SolrMetricManager manager = h.getCoreContainer().getMetricManager();\n    Map<String,SolrMetricReporter> reporters = manager.getReporters(registryName);\n    assertEquals(1, reporters.size());\n    SolrMetricReporter reporter = reporters.values().iterator().next();\n    assertTrue(reporter instanceof SolrJmxReporter);\n    SolrJmxReporter jmx = (SolrJmxReporter)reporter;\n    assertTrue(\"JMX not enabled\", jmx.isActive());\n    // and we should be able to see that the reporter\n    // refers to the JMX server we started\n\n    mbeanServer = jmx.getMBeanServer();\n\n    assertNotNull(\"No JMX server found in the reporter\",\n        mbeanServer);\n\n    // NOTE: we can't guarantee that \"mbeanServer == platformServer\"\n    // the JVM may have multiple MBean servers running when the test started\n    // and the contract of not specifying one when configuring solr.xml without\n    // agetnId or serviceUrl is that it will use whatever the \"first\" MBean server\n    // returned by the JVM is.\n\n    nameFactory = new JmxObjectNameFactory(\"default\", registryName);\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    // Make sure that at least one MBeanServer is available\n    // prior to initializing the core\n    //\n    // (test configs are setup to use existing server if any, \n    // otherwise skip JMX)\n    MBeanServer platformServer = ManagementFactory.getPlatformMBeanServer();\n\n    initCore(\"solrconfig.xml\", \"schema.xml\");\n\n    // we should be able to se that the core has JmxIntegration enabled\n    assertTrue(\"JMX not enabled\",\n               h.getCore().getSolrConfig().jmxConfig.enabled);\n    // and we should be able to see that the the monitor map found \n    // a JMX server to use, which refers to the server we started\n\n    Map registry = h.getCore().getInfoRegistry();\n    assertTrue(\"info registry is not a JMX monitored map\",\n               registry instanceof JmxMonitoredMap);\n    mbeanServer = ((JmxMonitoredMap)registry).getServer();\n\n    assertNotNull(\"No JMX server found by monitor map\",\n                  mbeanServer);\n\n    // NOTE: we can't garuntee that \"mbeanServer == platformServer\"\n    // the JVM may have mutiple MBean servers funning when the test started\n    // and the contract of not specifying one when configuring solr with\n    // <jmx /> is that it will use whatever the \"first\" MBean server \n    // returned by the JVM is.\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d771fb78e7f47800957309c7732d239aba4a7ff0","date":1503435332,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestJmxIntegration#beforeClass().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestJmxIntegration#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    // Make sure that at least one MBeanServer is available\n    // prior to initializing the core\n    //\n    // (test configs are setup to use existing server if any, \n    // otherwise skip JMX)\n    MBeanServer newMbeanServer = MBeanServerFactory.createMBeanServer();\n\n    initCore(\"solrconfig.xml\", \"schema.xml\");\n\n    // we should be able to see that the core has JmxIntegration enabled\n    registryName = h.getCore().getCoreMetricManager().getRegistryName();\n    SolrMetricManager manager = h.getCoreContainer().getMetricManager();\n    Map<String,SolrMetricReporter> reporters = manager.getReporters(registryName);\n    assertEquals(1, reporters.size());\n    SolrMetricReporter reporter = reporters.values().iterator().next();\n    assertTrue(reporter instanceof SolrJmxReporter);\n    SolrJmxReporter jmx = (SolrJmxReporter)reporter;\n    assertTrue(\"JMX not enabled\", jmx.isActive());\n    // and we should be able to see that the reporter\n    // refers to the JMX server we started\n\n    mbeanServer = jmx.getMBeanServer();\n\n    assertNotNull(\"No JMX server found in the reporter\",\n        mbeanServer);\n\n    // NOTE: we can't guarantee that \"mbeanServer == platformServer\"\n    // the JVM may have multiple MBean servers running when the test started\n    // and the contract of not specifying one when configuring solr.xml without\n    // agetnId or serviceUrl is that it will use whatever the \"first\" MBean server\n    // returned by the JVM is.\n\n    nameFactory = new JmxObjectNameFactory(\"default\", registryName);\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    // Make sure that at least one MBeanServer is available\n    // prior to initializing the core\n    //\n    // (test configs are setup to use existing server if any, \n    // otherwise skip JMX)\n    MBeanServer platformServer = ManagementFactory.getPlatformMBeanServer();\n\n    initCore(\"solrconfig.xml\", \"schema.xml\");\n\n    // we should be able to see that the core has JmxIntegration enabled\n    registryName = h.getCore().getCoreMetricManager().getRegistryName();\n    SolrMetricManager manager = h.getCoreContainer().getMetricManager();\n    Map<String,SolrMetricReporter> reporters = manager.getReporters(registryName);\n    assertEquals(1, reporters.size());\n    SolrMetricReporter reporter = reporters.values().iterator().next();\n    assertTrue(reporter instanceof SolrJmxReporter);\n    SolrJmxReporter jmx = (SolrJmxReporter)reporter;\n    assertTrue(\"JMX not enabled\", jmx.isActive());\n    // and we should be able to see that the reporter\n    // refers to the JMX server we started\n\n    mbeanServer = jmx.getMBeanServer();\n\n    assertNotNull(\"No JMX server found in the reporter\",\n        mbeanServer);\n\n    // NOTE: we can't guarantee that \"mbeanServer == platformServer\"\n    // the JVM may have multiple MBean servers running when the test started\n    // and the contract of not specifying one when configuring solr.xml without\n    // agetnId or serviceUrl is that it will use whatever the \"first\" MBean server\n    // returned by the JVM is.\n\n    nameFactory = new JmxObjectNameFactory(\"default\", registryName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fde8a8d1ec5924bfc0d5463efd96fe7b817fa52f","date":1503439663,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestJmxIntegration#beforeClass().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestJmxIntegration#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    // Make sure that at least one MBeanServer is available\n    // prior to initializing the core\n    //\n    // (test configs are setup to use existing server if any, \n    // otherwise skip JMX)\n    newMbeanServer = MBeanServerFactory.createMBeanServer();\n\n    initCore(\"solrconfig.xml\", \"schema.xml\");\n\n    // we should be able to see that the core has JmxIntegration enabled\n    registryName = h.getCore().getCoreMetricManager().getRegistryName();\n    SolrMetricManager manager = h.getCoreContainer().getMetricManager();\n    Map<String,SolrMetricReporter> reporters = manager.getReporters(registryName);\n    assertEquals(1, reporters.size());\n    SolrMetricReporter reporter = reporters.values().iterator().next();\n    assertTrue(reporter instanceof SolrJmxReporter);\n    SolrJmxReporter jmx = (SolrJmxReporter)reporter;\n    assertTrue(\"JMX not enabled\", jmx.isActive());\n    // and we should be able to see that the reporter\n    // refers to the JMX server we started\n\n    mbeanServer = jmx.getMBeanServer();\n\n    assertNotNull(\"No JMX server found in the reporter\",\n        mbeanServer);\n\n    // NOTE: we can't guarantee that \"mbeanServer == platformServer\"\n    // the JVM may have multiple MBean servers running when the test started\n    // and the contract of not specifying one when configuring solr.xml without\n    // agetnId or serviceUrl is that it will use whatever the \"first\" MBean server\n    // returned by the JVM is.\n\n    nameFactory = new JmxObjectNameFactory(\"default\", registryName);\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    // Make sure that at least one MBeanServer is available\n    // prior to initializing the core\n    //\n    // (test configs are setup to use existing server if any, \n    // otherwise skip JMX)\n    MBeanServer newMbeanServer = MBeanServerFactory.createMBeanServer();\n\n    initCore(\"solrconfig.xml\", \"schema.xml\");\n\n    // we should be able to see that the core has JmxIntegration enabled\n    registryName = h.getCore().getCoreMetricManager().getRegistryName();\n    SolrMetricManager manager = h.getCoreContainer().getMetricManager();\n    Map<String,SolrMetricReporter> reporters = manager.getReporters(registryName);\n    assertEquals(1, reporters.size());\n    SolrMetricReporter reporter = reporters.values().iterator().next();\n    assertTrue(reporter instanceof SolrJmxReporter);\n    SolrJmxReporter jmx = (SolrJmxReporter)reporter;\n    assertTrue(\"JMX not enabled\", jmx.isActive());\n    // and we should be able to see that the reporter\n    // refers to the JMX server we started\n\n    mbeanServer = jmx.getMBeanServer();\n\n    assertNotNull(\"No JMX server found in the reporter\",\n        mbeanServer);\n\n    // NOTE: we can't guarantee that \"mbeanServer == platformServer\"\n    // the JVM may have multiple MBean servers running when the test started\n    // and the contract of not specifying one when configuring solr.xml without\n    // agetnId or serviceUrl is that it will use whatever the \"first\" MBean server\n    // returned by the JVM is.\n\n    nameFactory = new JmxObjectNameFactory(\"default\", registryName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a7809d1d753b67f48b1a706e17034bf8b624ea3","date":1504366927,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestJmxIntegration#beforeClass().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestJmxIntegration#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    // Make sure that at least one MBeanServer is available\n    // prior to initializing the core\n    //\n    // (test configs are setup to use existing server if any, \n    // otherwise skip JMX)\n    newMbeanServer = MBeanServerFactory.createMBeanServer();\n\n    initCore(\"solrconfig.xml\", \"schema.xml\");\n\n    // we should be able to see that the core has JmxIntegration enabled\n    registryName = h.getCore().getCoreMetricManager().getRegistryName();\n    SolrMetricManager manager = h.getCoreContainer().getMetricManager();\n    Map<String,SolrMetricReporter> reporters = manager.getReporters(registryName);\n    assertEquals(1, reporters.size());\n    SolrMetricReporter reporter = reporters.values().iterator().next();\n    assertTrue(reporter instanceof SolrJmxReporter);\n    SolrJmxReporter jmx = (SolrJmxReporter)reporter;\n    assertTrue(\"JMX not enabled\", jmx.isActive());\n    // and we should be able to see that the reporter\n    // refers to the JMX server we started\n\n    mbeanServer = jmx.getMBeanServer();\n\n    assertNotNull(\"No JMX server found in the reporter\",\n        mbeanServer);\n\n    // NOTE: we can't guarantee that \"mbeanServer == platformServer\"\n    // the JVM may have multiple MBean servers running when the test started\n    // and the contract of not specifying one when configuring solr.xml without\n    // agetnId or serviceUrl is that it will use whatever the \"first\" MBean server\n    // returned by the JVM is.\n\n    nameFactory = new JmxObjectNameFactory(\"default\", registryName);\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    // Make sure that at least one MBeanServer is available\n    // prior to initializing the core\n    //\n    // (test configs are setup to use existing server if any, \n    // otherwise skip JMX)\n    MBeanServer platformServer = ManagementFactory.getPlatformMBeanServer();\n\n    initCore(\"solrconfig.xml\", \"schema.xml\");\n\n    // we should be able to see that the core has JmxIntegration enabled\n    registryName = h.getCore().getCoreMetricManager().getRegistryName();\n    SolrMetricManager manager = h.getCoreContainer().getMetricManager();\n    Map<String,SolrMetricReporter> reporters = manager.getReporters(registryName);\n    assertEquals(1, reporters.size());\n    SolrMetricReporter reporter = reporters.values().iterator().next();\n    assertTrue(reporter instanceof SolrJmxReporter);\n    SolrJmxReporter jmx = (SolrJmxReporter)reporter;\n    assertTrue(\"JMX not enabled\", jmx.isActive());\n    // and we should be able to see that the reporter\n    // refers to the JMX server we started\n\n    mbeanServer = jmx.getMBeanServer();\n\n    assertNotNull(\"No JMX server found in the reporter\",\n        mbeanServer);\n\n    // NOTE: we can't guarantee that \"mbeanServer == platformServer\"\n    // the JVM may have multiple MBean servers running when the test started\n    // and the contract of not specifying one when configuring solr.xml without\n    // agetnId or serviceUrl is that it will use whatever the \"first\" MBean server\n    // returned by the JVM is.\n\n    nameFactory = new JmxObjectNameFactory(\"default\", registryName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["c1d6d844f3b4061aedc283b5e71ff1d19aeae291"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["d9405f486872f1e416304dfe389741f4ee2f8a4d","c1d6d844f3b4061aedc283b5e71ff1d19aeae291"],"c1d6d844f3b4061aedc283b5e71ff1d19aeae291":["d9405f486872f1e416304dfe389741f4ee2f8a4d"],"3a7809d1d753b67f48b1a706e17034bf8b624ea3":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","fde8a8d1ec5924bfc0d5463efd96fe7b817fa52f"],"fde8a8d1ec5924bfc0d5463efd96fe7b817fa52f":["d771fb78e7f47800957309c7732d239aba4a7ff0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d9405f486872f1e416304dfe389741f4ee2f8a4d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f2126b84bd093fa3d921582a109a0ee578c28126":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d9405f486872f1e416304dfe389741f4ee2f8a4d"],"d771fb78e7f47800957309c7732d239aba4a7ff0":["816521ebaad5add9cb96bb88c577394e2938c40b"],"816521ebaad5add9cb96bb88c577394e2938c40b":["c1d6d844f3b4061aedc283b5e71ff1d19aeae291"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fde8a8d1ec5924bfc0d5463efd96fe7b817fa52f"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["3a7809d1d753b67f48b1a706e17034bf8b624ea3"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":[],"c1d6d844f3b4061aedc283b5e71ff1d19aeae291":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","816521ebaad5add9cb96bb88c577394e2938c40b"],"3a7809d1d753b67f48b1a706e17034bf8b624ea3":[],"fde8a8d1ec5924bfc0d5463efd96fe7b817fa52f":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d9405f486872f1e416304dfe389741f4ee2f8a4d","f2126b84bd093fa3d921582a109a0ee578c28126"],"d9405f486872f1e416304dfe389741f4ee2f8a4d":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","c1d6d844f3b4061aedc283b5e71ff1d19aeae291","f2126b84bd093fa3d921582a109a0ee578c28126"],"f2126b84bd093fa3d921582a109a0ee578c28126":[],"d771fb78e7f47800957309c7732d239aba4a7ff0":["fde8a8d1ec5924bfc0d5463efd96fe7b817fa52f"],"816521ebaad5add9cb96bb88c577394e2938c40b":["d771fb78e7f47800957309c7732d239aba4a7ff0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","3a7809d1d753b67f48b1a706e17034bf8b624ea3","f2126b84bd093fa3d921582a109a0ee578c28126","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}