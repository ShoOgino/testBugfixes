{"path":"lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader.SegmentDocsAndPositionsAndPayloadsEnum#getPayload().mjava","commits":[{"id":"a0ae5e3ed1232483b7b8a014f175a5fe43595982","date":1324062192,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader.SegmentDocsAndPositionsAndPayloadsEnum#getPayload().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/lucene40/Lucene40PostingsReader.SegmentDocsAndPositionsAndPayloadsEnum#getPayload().mjava","sourceNew":"    /** Returns the payload at this position, or null if no\n     *  payload was indexed. */\n    @Override\n    public BytesRef getPayload() throws IOException {\n      assert lazyProxPointer == -1;\n      assert posPendingCount < freq;\n      if (!payloadPending) {\n        throw new IOException(\"Either no payload exists at this term position or an attempt was made to load it more than once.\");\n      }\n      if (payloadLength > payload.bytes.length) {\n        payload.grow(payloadLength);\n      }\n\n      proxIn.readBytes(payload.bytes, 0, payloadLength);\n      payload.length = payloadLength;\n      payloadPending = false;\n\n      return payload;\n    }\n\n","sourceOld":"    /** Returns the payload at this position, or null if no\n     *  payload was indexed. */\n    @Override\n    public BytesRef getPayload() throws IOException {\n      assert lazyProxPointer == -1;\n      assert posPendingCount < freq;\n      if (!payloadPending) {\n        throw new IOException(\"Either no payload exists at this term position or an attempt was made to load it more than once.\");\n      }\n      if (payloadLength > payload.bytes.length) {\n        payload.grow(payloadLength);\n      }\n\n      proxIn.readBytes(payload.bytes, 0, payloadLength);\n      payload.length = payloadLength;\n      payloadPending = false;\n\n      return payload;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a44b232879361a7ace3520b5b313094a9a35e044","date":1327356188,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader.SegmentDocsAndPositionsAndPayloadsEnum#getPayload().mjava","sourceNew":null,"sourceOld":"    /** Returns the payload at this position, or null if no\n     *  payload was indexed. */\n    @Override\n    public BytesRef getPayload() throws IOException {\n      assert lazyProxPointer == -1;\n      assert posPendingCount < freq;\n      if (!payloadPending) {\n        throw new IOException(\"Either no payload exists at this term position or an attempt was made to load it more than once.\");\n      }\n      if (payloadLength > payload.bytes.length) {\n        payload.grow(payloadLength);\n      }\n\n      proxIn.readBytes(payload.bytes, 0, payloadLength);\n      payload.length = payloadLength;\n      payloadPending = false;\n\n      return payload;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a89676536a5d3e2e875a9eed6b3f22a63cca643","date":1327356915,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader.SegmentDocsAndPositionsAndPayloadsEnum#getPayload().mjava","sourceNew":null,"sourceOld":"    /** Returns the payload at this position, or null if no\n     *  payload was indexed. */\n    @Override\n    public BytesRef getPayload() throws IOException {\n      assert lazyProxPointer == -1;\n      assert posPendingCount < freq;\n      if (!payloadPending) {\n        throw new IOException(\"Either no payload exists at this term position or an attempt was made to load it more than once.\");\n      }\n      if (payloadLength > payload.bytes.length) {\n        payload.grow(payloadLength);\n      }\n\n      proxIn.readBytes(payload.bytes, 0, payloadLength);\n      payload.length = payloadLength;\n      payloadPending = false;\n\n      return payload;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader.SegmentDocsAndPositionsAndPayloadsEnum#getPayload().mjava","sourceNew":null,"sourceOld":"    /** Returns the payload at this position, or null if no\n     *  payload was indexed. */\n    @Override\n    public BytesRef getPayload() throws IOException {\n      assert lazyProxPointer == -1;\n      assert posPendingCount < freq;\n      if (!payloadPending) {\n        throw new IOException(\"Either no payload exists at this term position or an attempt was made to load it more than once.\");\n      }\n      if (payloadLength > payload.bytes.length) {\n        payload.grow(payloadLength);\n      }\n\n      proxIn.readBytes(payload.bytes, 0, payloadLength);\n      payload.length = payloadLength;\n      payloadPending = false;\n\n      return payload;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5a89676536a5d3e2e875a9eed6b3f22a63cca643":["a0ae5e3ed1232483b7b8a014f175a5fe43595982","a44b232879361a7ace3520b5b313094a9a35e044"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["a0ae5e3ed1232483b7b8a014f175a5fe43595982","a44b232879361a7ace3520b5b313094a9a35e044"],"a44b232879361a7ace3520b5b313094a9a35e044":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a44b232879361a7ace3520b5b313094a9a35e044"]},"commit2Childs":{"5a89676536a5d3e2e875a9eed6b3f22a63cca643":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"a44b232879361a7ace3520b5b313094a9a35e044":["5a89676536a5d3e2e875a9eed6b3f22a63cca643","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["5a89676536a5d3e2e875a9eed6b3f22a63cca643","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","a44b232879361a7ace3520b5b313094a9a35e044"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5a89676536a5d3e2e875a9eed6b3f22a63cca643","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}