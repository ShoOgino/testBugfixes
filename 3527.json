{"path":"lucene/replicator/src/test/org/apache/lucene/replicator/nrt/TestStressNRTReplication#sendReplicasToPrimary().mjava","commits":[{"id":"1baa9aa50ea2e3bb6e5c03f150789720fbcedbc9","date":1453892412,"type":1,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/replicator/src/test/org/apache/lucene/replicator/nrt/TestStressNRTReplication#sendReplicasToPrimary().mjava","pathOld":"lucene/replicator/src/test/org/apache/lucene/replicator/nrt/TestNRTReplication#sendReplicasToPrimary().mjava","sourceNew":"  /** Sends currently alive replicas to primary, which uses this to know who to notify when it does a refresh */\n  private void sendReplicasToPrimary() {\n    NodeProcess curPrimary = primary;\n    if (curPrimary != null) {\n      List<NodeProcess> replicas = new ArrayList<>();\n      for (NodeProcess node : nodes) {\n        if (node != null && node.isPrimary == false) {\n          replicas.add(node);\n        }\n      }\n\n      message(\"top: send \" + replicas.size() + \" replicas to primary\");\n\n      try (Connection c = new Connection(curPrimary.tcpPort)) {\n        c.out.writeByte(SimplePrimaryNode.CMD_SET_REPLICAS);\n        c.out.writeVInt(replicas.size());        \n        for(NodeProcess replica : replicas) {\n          c.out.writeVInt(replica.id);\n          c.out.writeVInt(replica.tcpPort);\n        }\n        c.flush();\n        c.in.readByte();\n      } catch (Throwable t) {\n        message(\"top: ignore exc sending replicas to primary: \" + t);\n      }\n    }\n  }\n\n","sourceOld":"  /** Sends currently alive replicas to primary, which uses this to know who to notify when it does a refresh */\n  private void sendReplicasToPrimary() {\n    NodeProcess curPrimary = primary;\n    if (curPrimary != null) {\n      List<NodeProcess> replicas = new ArrayList<>();\n      for (NodeProcess node : nodes) {\n        if (node != null && node.isPrimary == false) {\n          replicas.add(node);\n        }\n      }\n\n      message(\"top: send \" + replicas.size() + \" replicas to primary\");\n\n      try (Connection c = new Connection(curPrimary.tcpPort)) {\n        c.out.writeByte(SimplePrimaryNode.CMD_SET_REPLICAS);\n        c.out.writeVInt(replicas.size());        \n        for(NodeProcess replica : replicas) {\n          c.out.writeVInt(replica.id);\n          c.out.writeVInt(replica.tcpPort);\n        }\n        c.flush();\n        c.in.readByte();\n      } catch (Throwable t) {\n        message(\"top: ignore exc sending replicas to primary: \" + t);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c3d0d2e502d016d967c45c0c972ace4d02885e07","date":1454976917,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/replicator/src/test/org/apache/lucene/replicator/nrt/TestStressNRTReplication#sendReplicasToPrimary().mjava","pathOld":"lucene/replicator/src/test/org/apache/lucene/replicator/nrt/TestStressNRTReplication#sendReplicasToPrimary().mjava","sourceNew":"  /** Sends currently alive replicas to primary, which uses this to know who to notify when it does a refresh */\n  private void sendReplicasToPrimary() {\n    NodeProcess curPrimary = primary;\n    if (curPrimary != null) {\n      List<NodeProcess> replicas = new ArrayList<>();\n      for (NodeProcess node : nodes) {\n        if (node != null && node.isPrimary == false) {\n          replicas.add(node);\n        }\n      }\n\n      message(\"top: send \" + replicas.size() + \" replicas to primary\");\n\n      try (Connection c = new Connection(curPrimary.tcpPort)) {\n        c.out.writeByte(SimplePrimaryNode.CMD_SET_REPLICAS);\n        c.out.writeVInt(replicas.size());        \n        for(NodeProcess replica : replicas) {\n          c.out.writeVInt(replica.id);\n          c.out.writeVInt(replica.tcpPort);\n        }\n        c.flush();\n        c.in.readByte();\n      } catch (Throwable t) {\n        message(\"top: ignore exc sending replicas to primary P\" + curPrimary.id + \" at tcpPort=\" + curPrimary.tcpPort);\n        t.printStackTrace(System.out);\n      }\n    }\n  }\n\n","sourceOld":"  /** Sends currently alive replicas to primary, which uses this to know who to notify when it does a refresh */\n  private void sendReplicasToPrimary() {\n    NodeProcess curPrimary = primary;\n    if (curPrimary != null) {\n      List<NodeProcess> replicas = new ArrayList<>();\n      for (NodeProcess node : nodes) {\n        if (node != null && node.isPrimary == false) {\n          replicas.add(node);\n        }\n      }\n\n      message(\"top: send \" + replicas.size() + \" replicas to primary\");\n\n      try (Connection c = new Connection(curPrimary.tcpPort)) {\n        c.out.writeByte(SimplePrimaryNode.CMD_SET_REPLICAS);\n        c.out.writeVInt(replicas.size());        \n        for(NodeProcess replica : replicas) {\n          c.out.writeVInt(replica.id);\n          c.out.writeVInt(replica.tcpPort);\n        }\n        c.flush();\n        c.in.readByte();\n      } catch (Throwable t) {\n        message(\"top: ignore exc sending replicas to primary: \" + t);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"33b6213064c76adb293e52f03a3eb1528c5b1858","date":1454977105,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/replicator/src/test/org/apache/lucene/replicator/nrt/TestStressNRTReplication#sendReplicasToPrimary().mjava","pathOld":"lucene/replicator/src/test/org/apache/lucene/replicator/nrt/TestStressNRTReplication#sendReplicasToPrimary().mjava","sourceNew":"  /** Sends currently alive replicas to primary, which uses this to know who to notify when it does a refresh */\n  private void sendReplicasToPrimary() {\n    NodeProcess curPrimary = primary;\n    if (curPrimary != null) {\n      List<NodeProcess> replicas = new ArrayList<>();\n      for (NodeProcess node : nodes) {\n        if (node != null && node.isPrimary == false) {\n          replicas.add(node);\n        }\n      }\n\n      message(\"top: send \" + replicas.size() + \" replicas to primary\");\n\n      try (Connection c = new Connection(curPrimary.tcpPort)) {\n        c.out.writeByte(SimplePrimaryNode.CMD_SET_REPLICAS);\n        c.out.writeVInt(replicas.size());        \n        for(NodeProcess replica : replicas) {\n          c.out.writeVInt(replica.id);\n          c.out.writeVInt(replica.tcpPort);\n        }\n        c.flush();\n        c.in.readByte();\n      } catch (Throwable t) {\n        message(\"top: ignore exc sending replicas to primary P\" + curPrimary.id + \" at tcpPort=\" + curPrimary.tcpPort);\n        t.printStackTrace(System.out);\n      }\n    }\n  }\n\n","sourceOld":"  /** Sends currently alive replicas to primary, which uses this to know who to notify when it does a refresh */\n  private void sendReplicasToPrimary() {\n    NodeProcess curPrimary = primary;\n    if (curPrimary != null) {\n      List<NodeProcess> replicas = new ArrayList<>();\n      for (NodeProcess node : nodes) {\n        if (node != null && node.isPrimary == false) {\n          replicas.add(node);\n        }\n      }\n\n      message(\"top: send \" + replicas.size() + \" replicas to primary\");\n\n      try (Connection c = new Connection(curPrimary.tcpPort)) {\n        c.out.writeByte(SimplePrimaryNode.CMD_SET_REPLICAS);\n        c.out.writeVInt(replicas.size());        \n        for(NodeProcess replica : replicas) {\n          c.out.writeVInt(replica.id);\n          c.out.writeVInt(replica.tcpPort);\n        }\n        c.flush();\n        c.in.readByte();\n      } catch (Throwable t) {\n        message(\"top: ignore exc sending replicas to primary: \" + t);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"68496c2200e559fb7802f7575427b7a482659afb","date":1455207618,"type":0,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/replicator/src/test/org/apache/lucene/replicator/nrt/TestStressNRTReplication#sendReplicasToPrimary().mjava","pathOld":"/dev/null","sourceNew":"  /** Sends currently alive replicas to primary, which uses this to know who to notify when it does a refresh */\n  private void sendReplicasToPrimary() {\n    NodeProcess curPrimary = primary;\n    if (curPrimary != null) {\n      List<NodeProcess> replicas = new ArrayList<>();\n      for (NodeProcess node : nodes) {\n        if (node != null && node.isPrimary == false) {\n          replicas.add(node);\n        }\n      }\n\n      message(\"top: send \" + replicas.size() + \" replicas to primary\");\n\n      try (Connection c = new Connection(curPrimary.tcpPort)) {\n        c.out.writeByte(SimplePrimaryNode.CMD_SET_REPLICAS);\n        c.out.writeVInt(replicas.size());        \n        for(NodeProcess replica : replicas) {\n          c.out.writeVInt(replica.id);\n          c.out.writeVInt(replica.tcpPort);\n        }\n        c.flush();\n        c.in.readByte();\n      } catch (Throwable t) {\n        message(\"top: ignore exc sending replicas to primary P\" + curPrimary.id + \" at tcpPort=\" + curPrimary.tcpPort);\n        t.printStackTrace(System.out);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1baa9aa50ea2e3bb6e5c03f150789720fbcedbc9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c3d0d2e502d016d967c45c0c972ace4d02885e07":["1baa9aa50ea2e3bb6e5c03f150789720fbcedbc9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"68496c2200e559fb7802f7575427b7a482659afb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","33b6213064c76adb293e52f03a3eb1528c5b1858"],"33b6213064c76adb293e52f03a3eb1528c5b1858":["1baa9aa50ea2e3bb6e5c03f150789720fbcedbc9","c3d0d2e502d016d967c45c0c972ace4d02885e07"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["68496c2200e559fb7802f7575427b7a482659afb"]},"commit2Childs":{"1baa9aa50ea2e3bb6e5c03f150789720fbcedbc9":["c3d0d2e502d016d967c45c0c972ace4d02885e07","33b6213064c76adb293e52f03a3eb1528c5b1858"],"c3d0d2e502d016d967c45c0c972ace4d02885e07":["33b6213064c76adb293e52f03a3eb1528c5b1858"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1baa9aa50ea2e3bb6e5c03f150789720fbcedbc9","68496c2200e559fb7802f7575427b7a482659afb"],"68496c2200e559fb7802f7575427b7a482659afb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"33b6213064c76adb293e52f03a3eb1528c5b1858":["68496c2200e559fb7802f7575427b7a482659afb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}