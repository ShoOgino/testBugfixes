{"path":"lucene/core/src/test/org/apache/lucene/search/TestSearchAfter#assertQuery(Query,Filter,Sort).mjava","commits":[{"id":"fb02351ae2b114dd41585916d1e35fb2cff98fb0","date":1337171337,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSearchAfter#assertQuery(Query,Filter,Sort).mjava","pathOld":"/dev/null","sourceNew":"  void assertQuery(Query query, Filter filter, Sort sort) throws Exception {\n    int maxDoc = searcher.getIndexReader().maxDoc();\n    TopDocs all;\n    int pageSize = _TestUtil.nextInt(random(), 1, maxDoc*2);\n    if (VERBOSE) {\n      System.out.println(\"\\nassertQuery: query=\" + query + \" filter=\" + filter + \" sort=\" + sort + \" pageSize=\" + pageSize);\n    }\n    final boolean doMaxScore = random().nextBoolean();\n    if (sort == null) {\n      all = searcher.search(query, filter, maxDoc);\n    } else if (sort == Sort.RELEVANCE) {\n      all = searcher.search(query, filter, maxDoc, sort, true, doMaxScore);\n    } else {\n      all = searcher.search(query, filter, maxDoc, sort);\n    }\n    if (VERBOSE) {\n      System.out.println(\"  all.totalHits=\" + all.totalHits);\n    }\n    int pageStart = 0;\n    ScoreDoc lastBottom = null;\n    while (pageStart < all.totalHits) {\n      TopDocs paged;\n      if (sort == null) {\n        if (VERBOSE) {\n          System.out.println(\"  iter lastBottom=\" + lastBottom);\n        }\n        paged = searcher.searchAfter(lastBottom, query, filter, pageSize);\n      } else {\n        if (VERBOSE) {\n          System.out.println(\"  iter lastBottom=\" + lastBottom + (lastBottom == null ? \"\" : \" fields=\" + Arrays.toString(((FieldDoc) lastBottom).fields)));\n        }\n        if (sort == Sort.RELEVANCE) {\n          paged = searcher.searchAfter(lastBottom, query, filter, pageSize, sort, true, doMaxScore);\n        } else {\n          paged = searcher.searchAfter(lastBottom, query, filter, pageSize, sort);\n        }\n      }\n\n      if (paged.scoreDocs.length == 0) {\n        break;\n      }\n      assertPage(pageStart, all, paged);\n      pageStart += paged.scoreDocs.length;\n      lastBottom = paged.scoreDocs[paged.scoreDocs.length - 1];\n    }\n    assertEquals(all.scoreDocs.length, pageStart);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ef0d8a69209261514c5739c770bba706c2308450","date":1337607597,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSearchAfter#assertQuery(Query,Filter,Sort).mjava","pathOld":"/dev/null","sourceNew":"  void assertQuery(Query query, Filter filter, Sort sort) throws Exception {\n    int maxDoc = searcher.getIndexReader().maxDoc();\n    TopDocs all;\n    int pageSize = _TestUtil.nextInt(random(), 1, maxDoc*2);\n    if (VERBOSE) {\n      System.out.println(\"\\nassertQuery: query=\" + query + \" filter=\" + filter + \" sort=\" + sort + \" pageSize=\" + pageSize);\n    }\n    final boolean doMaxScore = random().nextBoolean();\n    if (sort == null) {\n      all = searcher.search(query, filter, maxDoc);\n    } else if (sort == Sort.RELEVANCE) {\n      all = searcher.search(query, filter, maxDoc, sort, true, doMaxScore);\n    } else {\n      all = searcher.search(query, filter, maxDoc, sort);\n    }\n    if (VERBOSE) {\n      System.out.println(\"  all.totalHits=\" + all.totalHits);\n    }\n    int pageStart = 0;\n    ScoreDoc lastBottom = null;\n    while (pageStart < all.totalHits) {\n      TopDocs paged;\n      if (sort == null) {\n        if (VERBOSE) {\n          System.out.println(\"  iter lastBottom=\" + lastBottom);\n        }\n        paged = searcher.searchAfter(lastBottom, query, filter, pageSize);\n      } else {\n        if (VERBOSE) {\n          System.out.println(\"  iter lastBottom=\" + lastBottom + (lastBottom == null ? \"\" : \" fields=\" + Arrays.toString(((FieldDoc) lastBottom).fields)));\n        }\n        if (sort == Sort.RELEVANCE) {\n          paged = searcher.searchAfter(lastBottom, query, filter, pageSize, sort, true, doMaxScore);\n        } else {\n          paged = searcher.searchAfter(lastBottom, query, filter, pageSize, sort);\n        }\n      }\n\n      if (paged.scoreDocs.length == 0) {\n        break;\n      }\n      assertPage(pageStart, all, paged);\n      pageStart += paged.scoreDocs.length;\n      lastBottom = paged.scoreDocs[paged.scoreDocs.length - 1];\n    }\n    assertEquals(all.scoreDocs.length, pageStart);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6c7b8ea8201d2646377f6895771dc7dc83ef57f4","date":1379216535,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSearchAfter#assertQuery(Query,Filter,Sort).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSearchAfter#assertQuery(Query,Filter,Sort).mjava","sourceNew":"  void assertQuery(Query query, Filter filter, Sort sort) throws Exception {\n    int size = _TestUtil.nextInt(random(), 1, searcher.getIndexReader().maxDoc());\n    TopDocs all;\n    int pageSize = _TestUtil.nextInt(random(), 1, size*2);\n    if (VERBOSE) {\n      System.out.println(\"\\nassertQuery: query=\" + query + \" filter=\" + filter + \" sort=\" + sort + \" pageSize=\" + pageSize);\n    }\n    final boolean doMaxScore = random().nextBoolean();\n    if (sort == null) {\n      all = searcher.search(query, filter, size);\n    } else if (sort == Sort.RELEVANCE) {\n      all = searcher.search(query, filter, size, sort, true, doMaxScore);\n    } else {\n      all = searcher.search(query, filter, size, sort);\n    }\n    if (VERBOSE) {\n      System.out.println(\"  all.totalHits=\" + all.totalHits);\n    }\n    int pageStart = 0;\n    ScoreDoc lastBottom = null;\n    while (pageStart < all.totalHits) {\n      TopDocs paged;\n      if (sort == null) {\n        if (VERBOSE) {\n          System.out.println(\"  iter lastBottom=\" + lastBottom);\n        }\n        paged = searcher.searchAfter(lastBottom, query, filter, pageSize);\n      } else {\n        if (VERBOSE) {\n          System.out.println(\"  iter lastBottom=\" + lastBottom + (lastBottom == null ? \"\" : \" fields=\" + Arrays.toString(((FieldDoc) lastBottom).fields)));\n        }\n        if (sort == Sort.RELEVANCE) {\n          paged = searcher.searchAfter(lastBottom, query, filter, pageSize, sort, true, doMaxScore);\n        } else {\n          paged = searcher.searchAfter(lastBottom, query, filter, pageSize, sort);\n        }\n      }\n\n      if (paged.scoreDocs.length == 0) {\n        break;\n      }\n      assertPage(pageStart, all, paged);\n      pageStart += paged.scoreDocs.length;\n      lastBottom = paged.scoreDocs[paged.scoreDocs.length - 1];\n    }\n    assertEquals(all.scoreDocs.length, pageStart);\n  }\n\n","sourceOld":"  void assertQuery(Query query, Filter filter, Sort sort) throws Exception {\n    int maxDoc = searcher.getIndexReader().maxDoc();\n    TopDocs all;\n    int pageSize = _TestUtil.nextInt(random(), 1, maxDoc*2);\n    if (VERBOSE) {\n      System.out.println(\"\\nassertQuery: query=\" + query + \" filter=\" + filter + \" sort=\" + sort + \" pageSize=\" + pageSize);\n    }\n    final boolean doMaxScore = random().nextBoolean();\n    if (sort == null) {\n      all = searcher.search(query, filter, maxDoc);\n    } else if (sort == Sort.RELEVANCE) {\n      all = searcher.search(query, filter, maxDoc, sort, true, doMaxScore);\n    } else {\n      all = searcher.search(query, filter, maxDoc, sort);\n    }\n    if (VERBOSE) {\n      System.out.println(\"  all.totalHits=\" + all.totalHits);\n    }\n    int pageStart = 0;\n    ScoreDoc lastBottom = null;\n    while (pageStart < all.totalHits) {\n      TopDocs paged;\n      if (sort == null) {\n        if (VERBOSE) {\n          System.out.println(\"  iter lastBottom=\" + lastBottom);\n        }\n        paged = searcher.searchAfter(lastBottom, query, filter, pageSize);\n      } else {\n        if (VERBOSE) {\n          System.out.println(\"  iter lastBottom=\" + lastBottom + (lastBottom == null ? \"\" : \" fields=\" + Arrays.toString(((FieldDoc) lastBottom).fields)));\n        }\n        if (sort == Sort.RELEVANCE) {\n          paged = searcher.searchAfter(lastBottom, query, filter, pageSize, sort, true, doMaxScore);\n        } else {\n          paged = searcher.searchAfter(lastBottom, query, filter, pageSize, sort);\n        }\n      }\n\n      if (paged.scoreDocs.length == 0) {\n        break;\n      }\n      assertPage(pageStart, all, paged);\n      pageStart += paged.scoreDocs.length;\n      lastBottom = paged.scoreDocs[paged.scoreDocs.length - 1];\n    }\n    assertEquals(all.scoreDocs.length, pageStart);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b57932425027bfa9715d81af6d9684489be097c","date":1379216597,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSearchAfter#assertQuery(Query,Filter,Sort).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSearchAfter#assertQuery(Query,Filter,Sort).mjava","sourceNew":"  void assertQuery(Query query, Filter filter, Sort sort) throws Exception {\n    int maxDoc = searcher.getIndexReader().maxDoc();\n    TopDocs all;\n    int pageSize = _TestUtil.nextInt(random(), 1, maxDoc*2);\n    if (VERBOSE) {\n      System.out.println(\"\\nassertQuery: query=\" + query + \" filter=\" + filter + \" sort=\" + sort + \" pageSize=\" + pageSize);\n    }\n    final boolean doMaxScore = random().nextBoolean();\n    if (sort == null) {\n      all = searcher.search(query, filter, maxDoc);\n    } else if (sort == Sort.RELEVANCE) {\n      all = searcher.search(query, filter, maxDoc, sort, true, doMaxScore);\n    } else {\n      all = searcher.search(query, filter, maxDoc, sort);\n    }\n    if (VERBOSE) {\n      System.out.println(\"  all.totalHits=\" + all.totalHits);\n    }\n    int pageStart = 0;\n    ScoreDoc lastBottom = null;\n    while (pageStart < all.totalHits) {\n      TopDocs paged;\n      if (sort == null) {\n        if (VERBOSE) {\n          System.out.println(\"  iter lastBottom=\" + lastBottom);\n        }\n        paged = searcher.searchAfter(lastBottom, query, filter, pageSize);\n      } else {\n        if (VERBOSE) {\n          System.out.println(\"  iter lastBottom=\" + lastBottom + (lastBottom == null ? \"\" : \" fields=\" + Arrays.toString(((FieldDoc) lastBottom).fields)));\n        }\n        if (sort == Sort.RELEVANCE) {\n          paged = searcher.searchAfter(lastBottom, query, filter, pageSize, sort, true, doMaxScore);\n        } else {\n          paged = searcher.searchAfter(lastBottom, query, filter, pageSize, sort);\n        }\n      }\n\n      if (paged.scoreDocs.length == 0) {\n        break;\n      }\n      assertPage(pageStart, all, paged);\n      pageStart += paged.scoreDocs.length;\n      lastBottom = paged.scoreDocs[paged.scoreDocs.length - 1];\n    }\n    assertEquals(all.scoreDocs.length, pageStart);\n  }\n\n","sourceOld":"  void assertQuery(Query query, Filter filter, Sort sort) throws Exception {\n    int size = _TestUtil.nextInt(random(), 1, searcher.getIndexReader().maxDoc());\n    TopDocs all;\n    int pageSize = _TestUtil.nextInt(random(), 1, size*2);\n    if (VERBOSE) {\n      System.out.println(\"\\nassertQuery: query=\" + query + \" filter=\" + filter + \" sort=\" + sort + \" pageSize=\" + pageSize);\n    }\n    final boolean doMaxScore = random().nextBoolean();\n    if (sort == null) {\n      all = searcher.search(query, filter, size);\n    } else if (sort == Sort.RELEVANCE) {\n      all = searcher.search(query, filter, size, sort, true, doMaxScore);\n    } else {\n      all = searcher.search(query, filter, size, sort);\n    }\n    if (VERBOSE) {\n      System.out.println(\"  all.totalHits=\" + all.totalHits);\n    }\n    int pageStart = 0;\n    ScoreDoc lastBottom = null;\n    while (pageStart < all.totalHits) {\n      TopDocs paged;\n      if (sort == null) {\n        if (VERBOSE) {\n          System.out.println(\"  iter lastBottom=\" + lastBottom);\n        }\n        paged = searcher.searchAfter(lastBottom, query, filter, pageSize);\n      } else {\n        if (VERBOSE) {\n          System.out.println(\"  iter lastBottom=\" + lastBottom + (lastBottom == null ? \"\" : \" fields=\" + Arrays.toString(((FieldDoc) lastBottom).fields)));\n        }\n        if (sort == Sort.RELEVANCE) {\n          paged = searcher.searchAfter(lastBottom, query, filter, pageSize, sort, true, doMaxScore);\n        } else {\n          paged = searcher.searchAfter(lastBottom, query, filter, pageSize, sort);\n        }\n      }\n\n      if (paged.scoreDocs.length == 0) {\n        break;\n      }\n      assertPage(pageStart, all, paged);\n      pageStart += paged.scoreDocs.length;\n      lastBottom = paged.scoreDocs[paged.scoreDocs.length - 1];\n    }\n    assertEquals(all.scoreDocs.length, pageStart);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7615b855702e008d91a95a2578bf05d27372f599","date":1389802891,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSearchAfter#assertQuery(Query,Filter,Sort).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSearchAfter#assertQuery(Query,Filter,Sort).mjava","sourceNew":"  void assertQuery(Query query, Filter filter, Sort sort) throws Exception {\n    int maxDoc = searcher.getIndexReader().maxDoc();\n    TopDocs all;\n    int pageSize = _TestUtil.nextInt(random(), 1, maxDoc*2);\n    if (VERBOSE) {\n      System.out.println(\"\\nassertQuery \" + (iter++) + \": query=\" + query + \" filter=\" + filter + \" sort=\" + sort + \" pageSize=\" + pageSize);\n    }\n    final boolean doMaxScore = random().nextBoolean();\n    if (sort == null) {\n      // nocommit randomly sometimes doScores & doMaxScore:\n      all = searcher.search(query, filter, maxDoc);\n    } else if (sort == Sort.RELEVANCE) {\n      all = searcher.search(query, filter, maxDoc, sort, true, doMaxScore);\n    } else {\n      // nocommit randomly sometimes doScores & doMaxScore:\n      all = searcher.search(query, filter, maxDoc, sort);\n    }\n    if (VERBOSE) {\n      System.out.println(\"  all.totalHits=\" + all.totalHits);\n      int upto = 0;\n      for(ScoreDoc scoreDoc : all.scoreDocs) {\n        System.out.println(\"    hit \" + (upto++) + \": id=\" + searcher.doc(scoreDoc.doc).get(\"id\") + \" \" + scoreDoc);\n      }\n    }\n    int pageStart = 0;\n    ScoreDoc lastBottom = null;\n    while (pageStart < all.totalHits) {\n      TopDocs paged;\n      if (sort == null) {\n        if (VERBOSE) {\n          System.out.println(\"  iter lastBottom=\" + lastBottom);\n        }\n        // nocommit randomly sometimes doScores & doMaxScore:\n        paged = searcher.searchAfter(lastBottom, query, filter, pageSize);\n      } else {\n        if (VERBOSE) {\n          System.out.println(\"  iter lastBottom=\" + lastBottom);\n        }\n        if (sort == Sort.RELEVANCE) {\n          paged = searcher.searchAfter(lastBottom, query, filter, pageSize, sort, true, doMaxScore);\n        } else {\n          // nocommit randomly sometimes doScores & doMaxScore:\n          paged = searcher.searchAfter(lastBottom, query, filter, pageSize, sort);\n        }\n      }\n      if (VERBOSE) {\n        System.out.println(\"    \" + paged.scoreDocs.length + \" hits on page\");\n      }\n\n      if (paged.scoreDocs.length == 0) {\n        break;\n      }\n      assertPage(pageStart, all, paged);\n      pageStart += paged.scoreDocs.length;\n      lastBottom = paged.scoreDocs[paged.scoreDocs.length - 1];\n    }\n    assertEquals(all.scoreDocs.length, pageStart);\n  }\n\n","sourceOld":"  void assertQuery(Query query, Filter filter, Sort sort) throws Exception {\n    int maxDoc = searcher.getIndexReader().maxDoc();\n    TopDocs all;\n    int pageSize = _TestUtil.nextInt(random(), 1, maxDoc*2);\n    if (VERBOSE) {\n      System.out.println(\"\\nassertQuery: query=\" + query + \" filter=\" + filter + \" sort=\" + sort + \" pageSize=\" + pageSize);\n    }\n    final boolean doMaxScore = random().nextBoolean();\n    if (sort == null) {\n      all = searcher.search(query, filter, maxDoc);\n    } else if (sort == Sort.RELEVANCE) {\n      all = searcher.search(query, filter, maxDoc, sort, true, doMaxScore);\n    } else {\n      all = searcher.search(query, filter, maxDoc, sort);\n    }\n    if (VERBOSE) {\n      System.out.println(\"  all.totalHits=\" + all.totalHits);\n    }\n    int pageStart = 0;\n    ScoreDoc lastBottom = null;\n    while (pageStart < all.totalHits) {\n      TopDocs paged;\n      if (sort == null) {\n        if (VERBOSE) {\n          System.out.println(\"  iter lastBottom=\" + lastBottom);\n        }\n        paged = searcher.searchAfter(lastBottom, query, filter, pageSize);\n      } else {\n        if (VERBOSE) {\n          System.out.println(\"  iter lastBottom=\" + lastBottom + (lastBottom == null ? \"\" : \" fields=\" + Arrays.toString(((FieldDoc) lastBottom).fields)));\n        }\n        if (sort == Sort.RELEVANCE) {\n          paged = searcher.searchAfter(lastBottom, query, filter, pageSize, sort, true, doMaxScore);\n        } else {\n          paged = searcher.searchAfter(lastBottom, query, filter, pageSize, sort);\n        }\n      }\n\n      if (paged.scoreDocs.length == 0) {\n        break;\n      }\n      assertPage(pageStart, all, paged);\n      pageStart += paged.scoreDocs.length;\n      lastBottom = paged.scoreDocs[paged.scoreDocs.length - 1];\n    }\n    assertEquals(all.scoreDocs.length, pageStart);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f718186415bc5417a3367c952c64c8534053c350","date":1389820099,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSearchAfter#assertQuery(Query,Filter,Sort).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSearchAfter#assertQuery(Query,Filter,Sort).mjava","sourceNew":"  void assertQuery(Query query, Filter filter, Sort sort) throws Exception {\n    int maxDoc = searcher.getIndexReader().maxDoc();\n    TopDocs all;\n    int pageSize = _TestUtil.nextInt(random(), 1, maxDoc*2);\n    if (VERBOSE) {\n      System.out.println(\"\\nassertQuery \" + (iter++) + \": query=\" + query + \" filter=\" + filter + \" sort=\" + sort + \" pageSize=\" + pageSize);\n    }\n    final boolean doMaxScore = random().nextBoolean();\n    final boolean doScores = random().nextBoolean();\n    if (sort == null) {\n      all = searcher.search(query, filter, maxDoc);\n    } else if (sort == Sort.RELEVANCE) {\n      all = searcher.search(query, filter, maxDoc, sort, true, doMaxScore);\n    } else {\n      all = searcher.search(query, filter, maxDoc, sort, doScores, doMaxScore);\n    }\n    if (VERBOSE) {\n      System.out.println(\"  all.totalHits=\" + all.totalHits);\n      int upto = 0;\n      for(ScoreDoc scoreDoc : all.scoreDocs) {\n        System.out.println(\"    hit \" + (upto++) + \": id=\" + searcher.doc(scoreDoc.doc).get(\"id\") + \" \" + scoreDoc);\n      }\n    }\n    int pageStart = 0;\n    ScoreDoc lastBottom = null;\n    while (pageStart < all.totalHits) {\n      TopDocs paged;\n      if (sort == null) {\n        if (VERBOSE) {\n          System.out.println(\"  iter lastBottom=\" + lastBottom);\n        }\n        paged = searcher.searchAfter(lastBottom, query, filter, pageSize);\n      } else {\n        if (VERBOSE) {\n          System.out.println(\"  iter lastBottom=\" + lastBottom);\n        }\n        if (sort == Sort.RELEVANCE) {\n          paged = searcher.searchAfter(lastBottom, query, filter, pageSize, sort, true, doMaxScore);\n        } else {\n          paged = searcher.searchAfter(lastBottom, query, filter, pageSize, sort, doScores, doMaxScore);\n        }\n      }\n      if (VERBOSE) {\n        System.out.println(\"    \" + paged.scoreDocs.length + \" hits on page\");\n      }\n\n      if (paged.scoreDocs.length == 0) {\n        break;\n      }\n      assertPage(pageStart, all, paged);\n      pageStart += paged.scoreDocs.length;\n      lastBottom = paged.scoreDocs[paged.scoreDocs.length - 1];\n    }\n    assertEquals(all.scoreDocs.length, pageStart);\n  }\n\n","sourceOld":"  void assertQuery(Query query, Filter filter, Sort sort) throws Exception {\n    int maxDoc = searcher.getIndexReader().maxDoc();\n    TopDocs all;\n    int pageSize = _TestUtil.nextInt(random(), 1, maxDoc*2);\n    if (VERBOSE) {\n      System.out.println(\"\\nassertQuery \" + (iter++) + \": query=\" + query + \" filter=\" + filter + \" sort=\" + sort + \" pageSize=\" + pageSize);\n    }\n    final boolean doMaxScore = random().nextBoolean();\n    if (sort == null) {\n      // nocommit randomly sometimes doScores & doMaxScore:\n      all = searcher.search(query, filter, maxDoc);\n    } else if (sort == Sort.RELEVANCE) {\n      all = searcher.search(query, filter, maxDoc, sort, true, doMaxScore);\n    } else {\n      // nocommit randomly sometimes doScores & doMaxScore:\n      all = searcher.search(query, filter, maxDoc, sort);\n    }\n    if (VERBOSE) {\n      System.out.println(\"  all.totalHits=\" + all.totalHits);\n      int upto = 0;\n      for(ScoreDoc scoreDoc : all.scoreDocs) {\n        System.out.println(\"    hit \" + (upto++) + \": id=\" + searcher.doc(scoreDoc.doc).get(\"id\") + \" \" + scoreDoc);\n      }\n    }\n    int pageStart = 0;\n    ScoreDoc lastBottom = null;\n    while (pageStart < all.totalHits) {\n      TopDocs paged;\n      if (sort == null) {\n        if (VERBOSE) {\n          System.out.println(\"  iter lastBottom=\" + lastBottom);\n        }\n        // nocommit randomly sometimes doScores & doMaxScore:\n        paged = searcher.searchAfter(lastBottom, query, filter, pageSize);\n      } else {\n        if (VERBOSE) {\n          System.out.println(\"  iter lastBottom=\" + lastBottom);\n        }\n        if (sort == Sort.RELEVANCE) {\n          paged = searcher.searchAfter(lastBottom, query, filter, pageSize, sort, true, doMaxScore);\n        } else {\n          // nocommit randomly sometimes doScores & doMaxScore:\n          paged = searcher.searchAfter(lastBottom, query, filter, pageSize, sort);\n        }\n      }\n      if (VERBOSE) {\n        System.out.println(\"    \" + paged.scoreDocs.length + \" hits on page\");\n      }\n\n      if (paged.scoreDocs.length == 0) {\n        break;\n      }\n      assertPage(pageStart, all, paged);\n      pageStart += paged.scoreDocs.length;\n      lastBottom = paged.scoreDocs[paged.scoreDocs.length - 1];\n    }\n    assertEquals(all.scoreDocs.length, pageStart);\n  }\n\n","bugFix":null,"bugIntro":["45274255319f6ca70f11b8a07a5fc00cb00cde57"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"27ab7b234eab0cbc020836989b96ed430e1065bb","date":1389894025,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSearchAfter#assertQuery(Query,Filter,Sort).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSearchAfter#assertQuery(Query,Filter,Sort).mjava","sourceNew":"  void assertQuery(Query query, Filter filter, Sort sort) throws Exception {\n    int maxDoc = searcher.getIndexReader().maxDoc();\n    TopDocs all;\n    int pageSize = _TestUtil.nextInt(random(), 1, maxDoc*2);\n    if (VERBOSE) {\n      System.out.println(\"\\nassertQuery \" + (iter++) + \": query=\" + query + \" filter=\" + filter + \" sort=\" + sort + \" pageSize=\" + pageSize);\n    }\n    final boolean doMaxScore = random().nextBoolean();\n    final boolean doScores = random().nextBoolean();\n    if (sort == null) {\n      all = searcher.search(query, filter, maxDoc);\n    } else if (sort == Sort.RELEVANCE) {\n      all = searcher.search(query, filter, maxDoc, sort, true, doMaxScore);\n    } else {\n      all = searcher.search(query, filter, maxDoc, sort, doScores, doMaxScore);\n    }\n    if (VERBOSE) {\n      System.out.println(\"  all.totalHits=\" + all.totalHits);\n      int upto = 0;\n      for(ScoreDoc scoreDoc : all.scoreDocs) {\n        System.out.println(\"    hit \" + (upto++) + \": id=\" + searcher.doc(scoreDoc.doc).get(\"id\") + \" \" + scoreDoc);\n      }\n    }\n    int pageStart = 0;\n    ScoreDoc lastBottom = null;\n    while (pageStart < all.totalHits) {\n      TopDocs paged;\n      if (sort == null) {\n        if (VERBOSE) {\n          System.out.println(\"  iter lastBottom=\" + lastBottom);\n        }\n        paged = searcher.searchAfter(lastBottom, query, filter, pageSize);\n      } else {\n        if (VERBOSE) {\n          System.out.println(\"  iter lastBottom=\" + lastBottom);\n        }\n        if (sort == Sort.RELEVANCE) {\n          paged = searcher.searchAfter(lastBottom, query, filter, pageSize, sort, true, doMaxScore);\n        } else {\n          paged = searcher.searchAfter(lastBottom, query, filter, pageSize, sort, doScores, doMaxScore);\n        }\n      }\n      if (VERBOSE) {\n        System.out.println(\"    \" + paged.scoreDocs.length + \" hits on page\");\n      }\n\n      if (paged.scoreDocs.length == 0) {\n        break;\n      }\n      assertPage(pageStart, all, paged);\n      pageStart += paged.scoreDocs.length;\n      lastBottom = paged.scoreDocs[paged.scoreDocs.length - 1];\n    }\n    assertEquals(all.scoreDocs.length, pageStart);\n  }\n\n","sourceOld":"  void assertQuery(Query query, Filter filter, Sort sort) throws Exception {\n    int maxDoc = searcher.getIndexReader().maxDoc();\n    TopDocs all;\n    int pageSize = _TestUtil.nextInt(random(), 1, maxDoc*2);\n    if (VERBOSE) {\n      System.out.println(\"\\nassertQuery: query=\" + query + \" filter=\" + filter + \" sort=\" + sort + \" pageSize=\" + pageSize);\n    }\n    final boolean doMaxScore = random().nextBoolean();\n    if (sort == null) {\n      all = searcher.search(query, filter, maxDoc);\n    } else if (sort == Sort.RELEVANCE) {\n      all = searcher.search(query, filter, maxDoc, sort, true, doMaxScore);\n    } else {\n      all = searcher.search(query, filter, maxDoc, sort);\n    }\n    if (VERBOSE) {\n      System.out.println(\"  all.totalHits=\" + all.totalHits);\n    }\n    int pageStart = 0;\n    ScoreDoc lastBottom = null;\n    while (pageStart < all.totalHits) {\n      TopDocs paged;\n      if (sort == null) {\n        if (VERBOSE) {\n          System.out.println(\"  iter lastBottom=\" + lastBottom);\n        }\n        paged = searcher.searchAfter(lastBottom, query, filter, pageSize);\n      } else {\n        if (VERBOSE) {\n          System.out.println(\"  iter lastBottom=\" + lastBottom + (lastBottom == null ? \"\" : \" fields=\" + Arrays.toString(((FieldDoc) lastBottom).fields)));\n        }\n        if (sort == Sort.RELEVANCE) {\n          paged = searcher.searchAfter(lastBottom, query, filter, pageSize, sort, true, doMaxScore);\n        } else {\n          paged = searcher.searchAfter(lastBottom, query, filter, pageSize, sort);\n        }\n      }\n\n      if (paged.scoreDocs.length == 0) {\n        break;\n      }\n      assertPage(pageStart, all, paged);\n      pageStart += paged.scoreDocs.length;\n      lastBottom = paged.scoreDocs[paged.scoreDocs.length - 1];\n    }\n    assertEquals(all.scoreDocs.length, pageStart);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSearchAfter#assertQuery(Query,Filter,Sort).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSearchAfter#assertQuery(Query,Filter,Sort).mjava","sourceNew":"  void assertQuery(Query query, Filter filter, Sort sort) throws Exception {\n    int maxDoc = searcher.getIndexReader().maxDoc();\n    TopDocs all;\n    int pageSize = TestUtil.nextInt(random(), 1, maxDoc * 2);\n    if (VERBOSE) {\n      System.out.println(\"\\nassertQuery \" + (iter++) + \": query=\" + query + \" filter=\" + filter + \" sort=\" + sort + \" pageSize=\" + pageSize);\n    }\n    final boolean doMaxScore = random().nextBoolean();\n    final boolean doScores = random().nextBoolean();\n    if (sort == null) {\n      all = searcher.search(query, filter, maxDoc);\n    } else if (sort == Sort.RELEVANCE) {\n      all = searcher.search(query, filter, maxDoc, sort, true, doMaxScore);\n    } else {\n      all = searcher.search(query, filter, maxDoc, sort, doScores, doMaxScore);\n    }\n    if (VERBOSE) {\n      System.out.println(\"  all.totalHits=\" + all.totalHits);\n      int upto = 0;\n      for(ScoreDoc scoreDoc : all.scoreDocs) {\n        System.out.println(\"    hit \" + (upto++) + \": id=\" + searcher.doc(scoreDoc.doc).get(\"id\") + \" \" + scoreDoc);\n      }\n    }\n    int pageStart = 0;\n    ScoreDoc lastBottom = null;\n    while (pageStart < all.totalHits) {\n      TopDocs paged;\n      if (sort == null) {\n        if (VERBOSE) {\n          System.out.println(\"  iter lastBottom=\" + lastBottom);\n        }\n        paged = searcher.searchAfter(lastBottom, query, filter, pageSize);\n      } else {\n        if (VERBOSE) {\n          System.out.println(\"  iter lastBottom=\" + lastBottom);\n        }\n        if (sort == Sort.RELEVANCE) {\n          paged = searcher.searchAfter(lastBottom, query, filter, pageSize, sort, true, doMaxScore);\n        } else {\n          paged = searcher.searchAfter(lastBottom, query, filter, pageSize, sort, doScores, doMaxScore);\n        }\n      }\n      if (VERBOSE) {\n        System.out.println(\"    \" + paged.scoreDocs.length + \" hits on page\");\n      }\n\n      if (paged.scoreDocs.length == 0) {\n        break;\n      }\n      assertPage(pageStart, all, paged);\n      pageStart += paged.scoreDocs.length;\n      lastBottom = paged.scoreDocs[paged.scoreDocs.length - 1];\n    }\n    assertEquals(all.scoreDocs.length, pageStart);\n  }\n\n","sourceOld":"  void assertQuery(Query query, Filter filter, Sort sort) throws Exception {\n    int maxDoc = searcher.getIndexReader().maxDoc();\n    TopDocs all;\n    int pageSize = _TestUtil.nextInt(random(), 1, maxDoc*2);\n    if (VERBOSE) {\n      System.out.println(\"\\nassertQuery \" + (iter++) + \": query=\" + query + \" filter=\" + filter + \" sort=\" + sort + \" pageSize=\" + pageSize);\n    }\n    final boolean doMaxScore = random().nextBoolean();\n    final boolean doScores = random().nextBoolean();\n    if (sort == null) {\n      all = searcher.search(query, filter, maxDoc);\n    } else if (sort == Sort.RELEVANCE) {\n      all = searcher.search(query, filter, maxDoc, sort, true, doMaxScore);\n    } else {\n      all = searcher.search(query, filter, maxDoc, sort, doScores, doMaxScore);\n    }\n    if (VERBOSE) {\n      System.out.println(\"  all.totalHits=\" + all.totalHits);\n      int upto = 0;\n      for(ScoreDoc scoreDoc : all.scoreDocs) {\n        System.out.println(\"    hit \" + (upto++) + \": id=\" + searcher.doc(scoreDoc.doc).get(\"id\") + \" \" + scoreDoc);\n      }\n    }\n    int pageStart = 0;\n    ScoreDoc lastBottom = null;\n    while (pageStart < all.totalHits) {\n      TopDocs paged;\n      if (sort == null) {\n        if (VERBOSE) {\n          System.out.println(\"  iter lastBottom=\" + lastBottom);\n        }\n        paged = searcher.searchAfter(lastBottom, query, filter, pageSize);\n      } else {\n        if (VERBOSE) {\n          System.out.println(\"  iter lastBottom=\" + lastBottom);\n        }\n        if (sort == Sort.RELEVANCE) {\n          paged = searcher.searchAfter(lastBottom, query, filter, pageSize, sort, true, doMaxScore);\n        } else {\n          paged = searcher.searchAfter(lastBottom, query, filter, pageSize, sort, doScores, doMaxScore);\n        }\n      }\n      if (VERBOSE) {\n        System.out.println(\"    \" + paged.scoreDocs.length + \" hits on page\");\n      }\n\n      if (paged.scoreDocs.length == 0) {\n        break;\n      }\n      assertPage(pageStart, all, paged);\n      pageStart += paged.scoreDocs.length;\n      lastBottom = paged.scoreDocs[paged.scoreDocs.length - 1];\n    }\n    assertEquals(all.scoreDocs.length, pageStart);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc","date":1424799790,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSearchAfter#assertQuery(Query,Sort).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSearchAfter#assertQuery(Query,Filter,Sort).mjava","sourceNew":"  void assertQuery(Query query, Sort sort) throws Exception {\n    int maxDoc = searcher.getIndexReader().maxDoc();\n    TopDocs all;\n    int pageSize = TestUtil.nextInt(random(), 1, maxDoc * 2);\n    if (VERBOSE) {\n      System.out.println(\"\\nassertQuery \" + (iter++) + \": query=\" + query + \" sort=\" + sort + \" pageSize=\" + pageSize);\n    }\n    final boolean doMaxScore = random().nextBoolean();\n    final boolean doScores = random().nextBoolean();\n    if (sort == null) {\n      all = searcher.search(query, maxDoc);\n    } else if (sort == Sort.RELEVANCE) {\n      all = searcher.search(query, maxDoc, sort, true, doMaxScore);\n    } else {\n      all = searcher.search(query, maxDoc, sort, doScores, doMaxScore);\n    }\n    if (VERBOSE) {\n      System.out.println(\"  all.totalHits=\" + all.totalHits);\n      int upto = 0;\n      for(ScoreDoc scoreDoc : all.scoreDocs) {\n        System.out.println(\"    hit \" + (upto++) + \": id=\" + searcher.doc(scoreDoc.doc).get(\"id\") + \" \" + scoreDoc);\n      }\n    }\n    int pageStart = 0;\n    ScoreDoc lastBottom = null;\n    while (pageStart < all.totalHits) {\n      TopDocs paged;\n      if (sort == null) {\n        if (VERBOSE) {\n          System.out.println(\"  iter lastBottom=\" + lastBottom);\n        }\n        paged = searcher.searchAfter(lastBottom, query, pageSize);\n      } else {\n        if (VERBOSE) {\n          System.out.println(\"  iter lastBottom=\" + lastBottom);\n        }\n        if (sort == Sort.RELEVANCE) {\n          paged = searcher.searchAfter(lastBottom, query, pageSize, sort, true, doMaxScore);\n        } else {\n          paged = searcher.searchAfter(lastBottom, query, pageSize, sort, doScores, doMaxScore);\n        }\n      }\n      if (VERBOSE) {\n        System.out.println(\"    \" + paged.scoreDocs.length + \" hits on page\");\n      }\n\n      if (paged.scoreDocs.length == 0) {\n        break;\n      }\n      assertPage(pageStart, all, paged);\n      pageStart += paged.scoreDocs.length;\n      lastBottom = paged.scoreDocs[paged.scoreDocs.length - 1];\n    }\n    assertEquals(all.scoreDocs.length, pageStart);\n  }\n\n","sourceOld":"  void assertQuery(Query query, Filter filter, Sort sort) throws Exception {\n    int maxDoc = searcher.getIndexReader().maxDoc();\n    TopDocs all;\n    int pageSize = TestUtil.nextInt(random(), 1, maxDoc * 2);\n    if (VERBOSE) {\n      System.out.println(\"\\nassertQuery \" + (iter++) + \": query=\" + query + \" filter=\" + filter + \" sort=\" + sort + \" pageSize=\" + pageSize);\n    }\n    final boolean doMaxScore = random().nextBoolean();\n    final boolean doScores = random().nextBoolean();\n    if (sort == null) {\n      all = searcher.search(query, filter, maxDoc);\n    } else if (sort == Sort.RELEVANCE) {\n      all = searcher.search(query, filter, maxDoc, sort, true, doMaxScore);\n    } else {\n      all = searcher.search(query, filter, maxDoc, sort, doScores, doMaxScore);\n    }\n    if (VERBOSE) {\n      System.out.println(\"  all.totalHits=\" + all.totalHits);\n      int upto = 0;\n      for(ScoreDoc scoreDoc : all.scoreDocs) {\n        System.out.println(\"    hit \" + (upto++) + \": id=\" + searcher.doc(scoreDoc.doc).get(\"id\") + \" \" + scoreDoc);\n      }\n    }\n    int pageStart = 0;\n    ScoreDoc lastBottom = null;\n    while (pageStart < all.totalHits) {\n      TopDocs paged;\n      if (sort == null) {\n        if (VERBOSE) {\n          System.out.println(\"  iter lastBottom=\" + lastBottom);\n        }\n        paged = searcher.searchAfter(lastBottom, query, filter, pageSize);\n      } else {\n        if (VERBOSE) {\n          System.out.println(\"  iter lastBottom=\" + lastBottom);\n        }\n        if (sort == Sort.RELEVANCE) {\n          paged = searcher.searchAfter(lastBottom, query, filter, pageSize, sort, true, doMaxScore);\n        } else {\n          paged = searcher.searchAfter(lastBottom, query, filter, pageSize, sort, doScores, doMaxScore);\n        }\n      }\n      if (VERBOSE) {\n        System.out.println(\"    \" + paged.scoreDocs.length + \" hits on page\");\n      }\n\n      if (paged.scoreDocs.length == 0) {\n        break;\n      }\n      assertPage(pageStart, all, paged);\n      pageStart += paged.scoreDocs.length;\n      lastBottom = paged.scoreDocs[paged.scoreDocs.length - 1];\n    }\n    assertEquals(all.scoreDocs.length, pageStart);\n  }\n\n","bugFix":null,"bugIntro":["45274255319f6ca70f11b8a07a5fc00cb00cde57"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"fb02351ae2b114dd41585916d1e35fb2cff98fb0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f718186415bc5417a3367c952c64c8534053c350":["7615b855702e008d91a95a2578bf05d27372f599"],"3b57932425027bfa9715d81af6d9684489be097c":["6c7b8ea8201d2646377f6895771dc7dc83ef57f4"],"27ab7b234eab0cbc020836989b96ed430e1065bb":["fb02351ae2b114dd41585916d1e35fb2cff98fb0","f718186415bc5417a3367c952c64c8534053c350"],"6c7b8ea8201d2646377f6895771dc7dc83ef57f4":["fb02351ae2b114dd41585916d1e35fb2cff98fb0"],"6613659748fe4411a7dcf85266e55db1f95f7315":["27ab7b234eab0cbc020836989b96ed430e1065bb"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["6613659748fe4411a7dcf85266e55db1f95f7315"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7615b855702e008d91a95a2578bf05d27372f599":["fb02351ae2b114dd41585916d1e35fb2cff98fb0"],"ef0d8a69209261514c5739c770bba706c2308450":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fb02351ae2b114dd41585916d1e35fb2cff98fb0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"]},"commit2Childs":{"fb02351ae2b114dd41585916d1e35fb2cff98fb0":["27ab7b234eab0cbc020836989b96ed430e1065bb","6c7b8ea8201d2646377f6895771dc7dc83ef57f4","7615b855702e008d91a95a2578bf05d27372f599","ef0d8a69209261514c5739c770bba706c2308450"],"f718186415bc5417a3367c952c64c8534053c350":["27ab7b234eab0cbc020836989b96ed430e1065bb"],"3b57932425027bfa9715d81af6d9684489be097c":[],"6c7b8ea8201d2646377f6895771dc7dc83ef57f4":["3b57932425027bfa9715d81af6d9684489be097c"],"27ab7b234eab0cbc020836989b96ed430e1065bb":["6613659748fe4411a7dcf85266e55db1f95f7315"],"6613659748fe4411a7dcf85266e55db1f95f7315":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fb02351ae2b114dd41585916d1e35fb2cff98fb0","ef0d8a69209261514c5739c770bba706c2308450"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7615b855702e008d91a95a2578bf05d27372f599":["f718186415bc5417a3367c952c64c8534053c350"],"ef0d8a69209261514c5739c770bba706c2308450":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3b57932425027bfa9715d81af6d9684489be097c","ef0d8a69209261514c5739c770bba706c2308450","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}