{"path":"solr/contrib/analytics/src/java/org/apache/solr/analytics/util/MedianCalculator#[T-extends-Comparable[T]]_partition(List[T],int,int,T).mjava","commits":[{"id":"0f719faa74f7213d4a395510dbc1f1b7cb178484","date":1410881394,"type":1,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/util/MedianCalculator#[T-extends-Comparable[T]]_partition(List[T],int,int,T).mjava","pathOld":"solr/core/src/java/org/apache/solr/analytics/util/MedianCalculator#[T-extends-Comparable[T]]_partition(List[T],int,int,T).mjava","sourceNew":"  private static <T extends Comparable<T>> Point partition(List<T> list, int begin, int end, T indexElement) {\n    T temp;\n    int left, right;\n    for (left = begin, right = end; left < right; left++, right--) {\n      while (list.get(left).compareTo(indexElement) < 0) {\n        left++;\n      }\n      while (right != begin - 1 && list.get(right).compareTo(indexElement) >= 0) {\n        right--;\n      }\n      if (right <= left) {\n        left--;\n        right++;\n        break;\n      }\n      temp = list.get(left);\n      list.set(left, list.get(right));\n      list.set(right, temp);\n    }\n    while (left != begin - 1 && list.get(left).compareTo(indexElement) >= 0) {\n      left--;\n    }\n    while (right != end + 1 && list.get(right).compareTo(indexElement) <= 0) {\n      right++;\n    }\n    int rightMove = right + 1;\n    while (rightMove < end + 1) {\n      if (list.get(rightMove).equals(indexElement)) {\n        temp = list.get(rightMove);\n        list.set(rightMove, list.get(right));\n        list.set(right, temp);\n        do {\n          right++;\n        } while (list.get(right).equals(indexElement));\n        if (rightMove <= right) {\n          rightMove = right;\n        }\n      }\n      rightMove++;\n    }\n    return new Point(left, right);\n  }\n\n","sourceOld":"  private static <T extends Comparable<T>> Point partition(List<T> list, int begin, int end, T indexElement) {\n    T temp;\n    int left, right;\n    for (left = begin, right = end; left < right; left++, right--) {\n      while (list.get(left).compareTo(indexElement) < 0) {\n        left++;\n      }\n      while (right != begin - 1 && list.get(right).compareTo(indexElement) >= 0) {\n        right--;\n      }\n      if (right <= left) {\n        left--;\n        right++;\n        break;\n      }\n      temp = list.get(left);\n      list.set(left, list.get(right));\n      list.set(right, temp);\n    }\n    while (left != begin - 1 && list.get(left).compareTo(indexElement) >= 0) {\n      left--;\n    }\n    while (right != end + 1 && list.get(right).compareTo(indexElement) <= 0) {\n      right++;\n    }\n    int rightMove = right + 1;\n    while (rightMove < end + 1) {\n      if (list.get(rightMove).equals(indexElement)) {\n        temp = list.get(rightMove);\n        list.set(rightMove, list.get(right));\n        list.set(right, temp);\n        do {\n          right++;\n        } while (list.get(right).equals(indexElement));\n        if (rightMove <= right) {\n          rightMove = right;\n        }\n      }\n      rightMove++;\n    }\n    return new Point(left, right);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"248f6ecc900c3a5633fd5ca6f564ea8b717720da","date":1588863846,"type":3,"author":"Mike Drob","isMerge":false,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/util/MedianCalculator#[T-extends-Comparable[T]]_partition(List[T],int,int,T).mjava","pathOld":"solr/contrib/analytics/src/java/org/apache/solr/analytics/util/MedianCalculator#[T-extends-Comparable[T]]_partition(List[T],int,int,T).mjava","sourceNew":"  private static <T extends Comparable<T>> OrdinalCalculator.Point partition(List<T> list, int begin, int end, T indexElement) {\n    T temp;\n    int left, right;\n    for (left = begin, right = end; left < right; left++, right--) {\n      while (list.get(left).compareTo(indexElement) < 0) {\n        left++;\n      }\n      while (right != begin - 1 && list.get(right).compareTo(indexElement) >= 0) {\n        right--;\n      }\n      if (right <= left) {\n        left--;\n        right++;\n        break;\n      }\n      temp = list.get(left);\n      list.set(left, list.get(right));\n      list.set(right, temp);\n    }\n    while (left != begin - 1 && list.get(left).compareTo(indexElement) >= 0) {\n      left--;\n    }\n    while (right != end + 1 && list.get(right).compareTo(indexElement) <= 0) {\n      right++;\n    }\n    int rightMove = right + 1;\n    while (rightMove < end + 1) {\n      if (list.get(rightMove).equals(indexElement)) {\n        temp = list.get(rightMove);\n        list.set(rightMove, list.get(right));\n        list.set(right, temp);\n        do {\n          right++;\n        } while (list.get(right).equals(indexElement));\n        if (rightMove <= right) {\n          rightMove = right;\n        }\n      }\n      rightMove++;\n    }\n    return new OrdinalCalculator.Point(left, right);\n  }\n\n","sourceOld":"  private static <T extends Comparable<T>> Point partition(List<T> list, int begin, int end, T indexElement) {\n    T temp;\n    int left, right;\n    for (left = begin, right = end; left < right; left++, right--) {\n      while (list.get(left).compareTo(indexElement) < 0) {\n        left++;\n      }\n      while (right != begin - 1 && list.get(right).compareTo(indexElement) >= 0) {\n        right--;\n      }\n      if (right <= left) {\n        left--;\n        right++;\n        break;\n      }\n      temp = list.get(left);\n      list.set(left, list.get(right));\n      list.set(right, temp);\n    }\n    while (left != begin - 1 && list.get(left).compareTo(indexElement) >= 0) {\n      left--;\n    }\n    while (right != end + 1 && list.get(right).compareTo(indexElement) <= 0) {\n      right++;\n    }\n    int rightMove = right + 1;\n    while (rightMove < end + 1) {\n      if (list.get(rightMove).equals(indexElement)) {\n        temp = list.get(rightMove);\n        list.set(rightMove, list.get(right));\n        list.set(right, temp);\n        do {\n          right++;\n        } while (list.get(right).equals(indexElement));\n        if (rightMove <= right) {\n          rightMove = right;\n        }\n      }\n      rightMove++;\n    }\n    return new Point(left, right);\n  }\n\n","bugFix":["ff403346522eaa9de75403763e297e83a3ea585c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"248f6ecc900c3a5633fd5ca6f564ea8b717720da":["0f719faa74f7213d4a395510dbc1f1b7cb178484"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0f719faa74f7213d4a395510dbc1f1b7cb178484":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["248f6ecc900c3a5633fd5ca6f564ea8b717720da"]},"commit2Childs":{"248f6ecc900c3a5633fd5ca6f564ea8b717720da":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0f719faa74f7213d4a395510dbc1f1b7cb178484"],"0f719faa74f7213d4a395510dbc1f1b7cb178484":["248f6ecc900c3a5633fd5ca6f564ea8b717720da"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}