{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy#writeMap(EntryWriter).mjava","commits":[{"id":"6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2","date":1498616740,"type":1,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy#writeMap(EntryWriter).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Policy#writeMap(EntryWriter).mjava","sourceNew":"  @Override\n  public void writeMap(EntryWriter ew) throws IOException {\n    if (!policies.isEmpty()) {\n      ew.put(\"policies\", (MapWriter) ew1 -> {\n        for (Map.Entry<String, List<Clause>> e : policies.entrySet()) {\n          ew1.put(e.getKey(), e.getValue());\n        }\n      });\n    }\n    if (!clusterPreferences.isEmpty()) {\n      ew.put(\"preferences\", (IteratorWriter) iw -> {\n        for (Preference p : clusterPreferences) iw.add(p);\n      });\n    }\n\n  }\n\n","sourceOld":"  @Override\n  public void writeMap(EntryWriter ew) throws IOException {\n    if (!policies.isEmpty()) {\n      ew.put(\"policies\", (MapWriter) ew1 -> {\n        for (Map.Entry<String, List<Clause>> e : policies.entrySet()) {\n          ew1.put(e.getKey(), e.getValue());\n        }\n      });\n    }\n    if (!clusterPreferences.isEmpty()) {\n      ew.put(\"preferences\", (IteratorWriter) iw -> {\n        for (Preference p : clusterPreferences) iw.add(p);\n      });\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"98f11c416d30e556e0004a9a84960702d12d35b1","date":1498628359,"type":1,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy#writeMap(EntryWriter).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Policy#writeMap(EntryWriter).mjava","sourceNew":"  @Override\n  public void writeMap(EntryWriter ew) throws IOException {\n    if (!policies.isEmpty()) {\n      ew.put(\"policies\", (MapWriter) ew1 -> {\n        for (Map.Entry<String, List<Clause>> e : policies.entrySet()) {\n          ew1.put(e.getKey(), e.getValue());\n        }\n      });\n    }\n    if (!clusterPreferences.isEmpty()) {\n      ew.put(\"preferences\", (IteratorWriter) iw -> {\n        for (Preference p : clusterPreferences) iw.add(p);\n      });\n    }\n\n  }\n\n","sourceOld":"  @Override\n  public void writeMap(EntryWriter ew) throws IOException {\n    if (!policies.isEmpty()) {\n      ew.put(\"policies\", (MapWriter) ew1 -> {\n        for (Map.Entry<String, List<Clause>> e : policies.entrySet()) {\n          ew1.put(e.getKey(), e.getValue());\n        }\n      });\n    }\n    if (!clusterPreferences.isEmpty()) {\n      ew.put(\"preferences\", (IteratorWriter) iw -> {\n        for (Preference p : clusterPreferences) iw.add(p);\n      });\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy#writeMap(EntryWriter).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void writeMap(EntryWriter ew) throws IOException {\n    if (!policies.isEmpty()) {\n      ew.put(\"policies\", (MapWriter) ew1 -> {\n        for (Map.Entry<String, List<Clause>> e : policies.entrySet()) {\n          ew1.put(e.getKey(), e.getValue());\n        }\n      });\n    }\n    if (!clusterPreferences.isEmpty()) {\n      ew.put(\"preferences\", (IteratorWriter) iw -> {\n        for (Preference p : clusterPreferences) iw.add(p);\n      });\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25","date":1499961129,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy#writeMap(EntryWriter).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy#writeMap(EntryWriter).mjava","sourceNew":"  @Override\n  public void writeMap(EntryWriter ew) throws IOException {\n    if (!policies.isEmpty()) {\n      ew.put(POLICIES, (MapWriter) ew1 -> {\n        for (Map.Entry<String, List<Clause>> e : policies.entrySet()) {\n          ew1.put(e.getKey(), e.getValue());\n        }\n      });\n    }\n    if (!clusterPreferences.isEmpty()) {\n      ew.put(CLUSTER_PREFERENCES, (IteratorWriter) iw -> {\n        for (Preference p : clusterPreferences) iw.add(p);\n      });\n    }\n    if (!clusterPolicy.isEmpty()) {\n      ew.put(CLUSTER_POLICY, (IteratorWriter) iw -> {\n        for (Clause c : clusterPolicy) {\n          iw.add(c);\n        }\n      });\n    }\n  }\n\n","sourceOld":"  @Override\n  public void writeMap(EntryWriter ew) throws IOException {\n    if (!policies.isEmpty()) {\n      ew.put(\"policies\", (MapWriter) ew1 -> {\n        for (Map.Entry<String, List<Clause>> e : policies.entrySet()) {\n          ew1.put(e.getKey(), e.getValue());\n        }\n      });\n    }\n    if (!clusterPreferences.isEmpty()) {\n      ew.put(\"preferences\", (IteratorWriter) iw -> {\n        for (Preference p : clusterPreferences) iw.add(p);\n      });\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c304e97e7c1d472bc70e801b35ee78583916c6cd","date":1507105431,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy#writeMap(EntryWriter).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy#writeMap(EntryWriter).mjava","sourceNew":"  @Override\n  public void writeMap(EntryWriter ew) throws IOException {\n    if (!policies.isEmpty()) {\n      ew.put(POLICIES, (MapWriter) ew1 -> {\n        for (Map.Entry<String, List<Clause>> e : policies.entrySet()) {\n          ew1.put(e.getKey(), e.getValue());\n        }\n      });\n    }\n    if (!clusterPreferences.isEmpty()) {\n      ew.put(CLUSTER_PREFERENCES, (IteratorWriter) iw -> {\n        for (Preference p : clusterPreferences) iw.add(p);\n      });\n    }\n    if (!clusterPolicy.isEmpty()) {\n      ew.put(CLUSTER_POLICY, (IteratorWriter) iw -> {\n        for (Clause c : clusterPolicy) {\n          iw.add(c);\n        }\n      });\n    }\n  }\n\n","sourceOld":"  @Override\n  public void writeMap(EntryWriter ew) throws IOException {\n    if (!policies.isEmpty()) {\n      ew.put(\"policies\", (MapWriter) ew1 -> {\n        for (Map.Entry<String, List<Clause>> e : policies.entrySet()) {\n          ew1.put(e.getKey(), e.getValue());\n        }\n      });\n    }\n    if (!clusterPreferences.isEmpty()) {\n      ew.put(\"preferences\", (IteratorWriter) iw -> {\n        for (Preference p : clusterPreferences) iw.add(p);\n      });\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"560c18d71dad43d675158783c3840f8c80d6d39c","date":1507105532,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy#writeMap(EntryWriter).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy#writeMap(EntryWriter).mjava","sourceNew":"  @Override\n  public void writeMap(EntryWriter ew) throws IOException {\n    if (!policies.isEmpty()) {\n      ew.put(POLICIES, (MapWriter) ew1 -> {\n        for (Map.Entry<String, List<Clause>> e : policies.entrySet()) {\n          ew1.put(e.getKey(), e.getValue());\n        }\n      });\n    }\n    if (!clusterPreferences.isEmpty()) {\n      ew.put(CLUSTER_PREFERENCES, (IteratorWriter) iw -> {\n        for (Preference p : clusterPreferences) iw.add(p);\n      });\n    }\n    if (!clusterPolicy.isEmpty()) {\n      ew.put(CLUSTER_POLICY, (IteratorWriter) iw -> {\n        for (Clause c : clusterPolicy) {\n          iw.add(c);\n        }\n      });\n    }\n  }\n\n","sourceOld":"  @Override\n  public void writeMap(EntryWriter ew) throws IOException {\n    if (!policies.isEmpty()) {\n      ew.put(\"policies\", (MapWriter) ew1 -> {\n        for (Map.Entry<String, List<Clause>> e : policies.entrySet()) {\n          ew1.put(e.getKey(), e.getValue());\n        }\n      });\n    }\n    if (!clusterPreferences.isEmpty()) {\n      ew.put(\"preferences\", (IteratorWriter) iw -> {\n        for (Preference p : clusterPreferences) iw.add(p);\n      });\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"216382c52eb6bf24fc72851399bb3750e8ad7a97","date":1538562171,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy#writeMap(EntryWriter).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy#writeMap(EntryWriter).mjava","sourceNew":"  @Override\n  public void writeMap(EntryWriter ew) throws IOException {\n    // if we were initially empty then we don't want to persist any implicitly added\n    // policy or preferences\n    if (empty)  return;\n\n    if (!policies.isEmpty()) {\n      ew.put(POLICIES, (MapWriter) ew1 -> {\n        for (Map.Entry<String, List<Clause>> e : policies.entrySet()) {\n          ew1.put(e.getKey(), e.getValue());\n        }\n      });\n    }\n    if (!emptyPreferences && !clusterPreferences.isEmpty()) {\n      ew.put(CLUSTER_PREFERENCES, (IteratorWriter) iw -> {\n        for (Preference p : clusterPreferences) iw.add(p);\n      });\n    }\n    if (!clusterPolicy.isEmpty()) {\n      ew.put(CLUSTER_POLICY, (IteratorWriter) iw -> {\n        for (Clause c : clusterPolicy) {\n          iw.add(c);\n        }\n      });\n    }\n  }\n\n","sourceOld":"  @Override\n  public void writeMap(EntryWriter ew) throws IOException {\n    if (!policies.isEmpty()) {\n      ew.put(POLICIES, (MapWriter) ew1 -> {\n        for (Map.Entry<String, List<Clause>> e : policies.entrySet()) {\n          ew1.put(e.getKey(), e.getValue());\n        }\n      });\n    }\n    if (!clusterPreferences.isEmpty()) {\n      ew.put(CLUSTER_PREFERENCES, (IteratorWriter) iw -> {\n        for (Preference p : clusterPreferences) iw.add(p);\n      });\n    }\n    if (!clusterPolicy.isEmpty()) {\n      ew.put(CLUSTER_POLICY, (IteratorWriter) iw -> {\n        for (Clause c : clusterPolicy) {\n          iw.add(c);\n        }\n      });\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"067ba8c807b0f23eae8bf41bc27046a87b548134","date":1587570399,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy#writeMap(EntryWriter).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy#writeMap(EntryWriter).mjava","sourceNew":"  @Override\n  public void writeMap(EntryWriter ew) throws IOException {\n    // if we were initially empty then we don't want to persist any implicitly added\n    // policy or preferences\n    if (empty)  return;\n\n    if (!policies.isEmpty()) {\n      ew.put(POLICIES, (MapWriter) ew1 -> {\n        for (Map.Entry<String, List<Clause>> e : policies.entrySet()) {\n          ew1.put(e.getKey(), e.getValue());\n        }\n      });\n    }\n    if (!emptyPreferences && !clusterPreferences.isEmpty()) {\n      ew.put(CLUSTER_PREFERENCES, (IteratorWriter) iw -> {\n        for (Preference p : clusterPreferences) iw.add(p);\n      });\n    }\n    if (!emptyClusterPolicy) {\n      ew.put(CLUSTER_POLICY, (IteratorWriter) iw -> {\n        for (Clause c : clusterPolicy) {\n          iw.add(c);\n        }\n      });\n    }\n  }\n\n","sourceOld":"  @Override\n  public void writeMap(EntryWriter ew) throws IOException {\n    // if we were initially empty then we don't want to persist any implicitly added\n    // policy or preferences\n    if (empty)  return;\n\n    if (!policies.isEmpty()) {\n      ew.put(POLICIES, (MapWriter) ew1 -> {\n        for (Map.Entry<String, List<Clause>> e : policies.entrySet()) {\n          ew1.put(e.getKey(), e.getValue());\n        }\n      });\n    }\n    if (!emptyPreferences && !clusterPreferences.isEmpty()) {\n      ew.put(CLUSTER_PREFERENCES, (IteratorWriter) iw -> {\n        for (Preference p : clusterPreferences) iw.add(p);\n      });\n    }\n    if (!clusterPolicy.isEmpty()) {\n      ew.put(CLUSTER_POLICY, (IteratorWriter) iw -> {\n        for (Clause c : clusterPolicy) {\n          iw.add(c);\n        }\n      });\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy#writeMap(EntryWriter).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void writeMap(EntryWriter ew) throws IOException {\n    // if we were initially empty then we don't want to persist any implicitly added\n    // policy or preferences\n    if (empty)  return;\n\n    if (!policies.isEmpty()) {\n      ew.put(POLICIES, (MapWriter) ew1 -> {\n        for (Map.Entry<String, List<Clause>> e : policies.entrySet()) {\n          ew1.put(e.getKey(), e.getValue());\n        }\n      });\n    }\n    if (!emptyPreferences && !clusterPreferences.isEmpty()) {\n      ew.put(CLUSTER_PREFERENCES, (IteratorWriter) iw -> {\n        for (Preference p : clusterPreferences) iw.add(p);\n      });\n    }\n    if (!emptyClusterPolicy) {\n      ew.put(CLUSTER_POLICY, (IteratorWriter) iw -> {\n        for (Clause c : clusterPolicy) {\n          iw.add(c);\n        }\n      });\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["28288370235ed02234a64753cdbf0c6ec096304a","219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25"],"6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3f504512a03d978990cbff30db0522b354e846db":["067ba8c807b0f23eae8bf41bc27046a87b548134"],"216382c52eb6bf24fc72851399bb3750e8ad7a97":["560c18d71dad43d675158783c3840f8c80d6d39c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"067ba8c807b0f23eae8bf41bc27046a87b548134":["216382c52eb6bf24fc72851399bb3750e8ad7a97"],"560c18d71dad43d675158783c3840f8c80d6d39c":["28288370235ed02234a64753cdbf0c6ec096304a","c304e97e7c1d472bc70e801b35ee78583916c6cd"],"219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25":["98f11c416d30e556e0004a9a84960702d12d35b1"],"28288370235ed02234a64753cdbf0c6ec096304a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2"],"98f11c416d30e556e0004a9a84960702d12d35b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["560c18d71dad43d675158783c3840f8c80d6d39c"],"6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2":["28288370235ed02234a64753cdbf0c6ec096304a","98f11c416d30e556e0004a9a84960702d12d35b1"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2","28288370235ed02234a64753cdbf0c6ec096304a","98f11c416d30e556e0004a9a84960702d12d35b1"],"216382c52eb6bf24fc72851399bb3750e8ad7a97":["067ba8c807b0f23eae8bf41bc27046a87b548134"],"067ba8c807b0f23eae8bf41bc27046a87b548134":["3f504512a03d978990cbff30db0522b354e846db"],"219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25":["c304e97e7c1d472bc70e801b35ee78583916c6cd"],"560c18d71dad43d675158783c3840f8c80d6d39c":["216382c52eb6bf24fc72851399bb3750e8ad7a97"],"28288370235ed02234a64753cdbf0c6ec096304a":["c304e97e7c1d472bc70e801b35ee78583916c6cd","560c18d71dad43d675158783c3840f8c80d6d39c"],"98f11c416d30e556e0004a9a84960702d12d35b1":["219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}