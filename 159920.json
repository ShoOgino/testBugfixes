{"path":"lucene/test-framework/src/java/org/apache/lucene/codecs/compressing/CompressingCodec#randomInstance(Random,int,int,boolean,int).mjava","commits":[{"id":"59d4661023aa9541b0a759e4d2e11dcf83b923a0","date":1420124226,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/compressing/CompressingCodec#randomInstance(Random,int,int,boolean,int).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/compressing/CompressingCodec#randomInstance(Random,int,int,boolean).mjava","sourceNew":"  /**\n   * Create a random instance.\n   */\n  public static CompressingCodec randomInstance(Random random, int chunkSize, int maxDocsPerChunk, boolean withSegmentSuffix, int blockSize) {\n    switch (random.nextInt(4)) {\n    case 0:\n      return new FastCompressingCodec(chunkSize, maxDocsPerChunk, withSegmentSuffix, blockSize);\n    case 1:\n      return new FastDecompressionCompressingCodec(chunkSize, maxDocsPerChunk, withSegmentSuffix, blockSize);\n    case 2:\n      return new HighCompressionCompressingCodec(chunkSize, maxDocsPerChunk, withSegmentSuffix, blockSize);\n    case 3:\n      return new DummyCompressingCodec(chunkSize, maxDocsPerChunk, withSegmentSuffix, blockSize);\n    default:\n      throw new AssertionError();\n    }\n  }\n\n","sourceOld":"  /**\n   * Create a random instance.\n   */\n  public static CompressingCodec randomInstance(Random random, int chunkSize, int maxDocsPerChunk, boolean withSegmentSuffix) {\n    switch (random.nextInt(4)) {\n    case 0:\n      return new FastCompressingCodec(chunkSize, maxDocsPerChunk, withSegmentSuffix);\n    case 1:\n      return new FastDecompressionCompressingCodec(chunkSize, maxDocsPerChunk, withSegmentSuffix);\n    case 2:\n      return new HighCompressionCompressingCodec(chunkSize, maxDocsPerChunk, withSegmentSuffix);\n    case 3:\n      return new DummyCompressingCodec(chunkSize, maxDocsPerChunk, withSegmentSuffix);\n    default:\n      throw new AssertionError();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70a4487b07c49a1861c05720e04624826ecbe9fa","date":1580924108,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/compressing/CompressingCodec#randomInstance(Random,int,int,boolean,int).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/compressing/CompressingCodec#randomInstance(Random,int,int,boolean,int).mjava","sourceNew":"  /**\n   * Create a random instance.\n   */\n  public static CompressingCodec randomInstance(Random random, int chunkSize, int maxDocsPerChunk, boolean withSegmentSuffix, int blockShift) {\n    switch (random.nextInt(4)) {\n    case 0:\n      return new FastCompressingCodec(chunkSize, maxDocsPerChunk, withSegmentSuffix, blockShift);\n    case 1:\n      return new FastDecompressionCompressingCodec(chunkSize, maxDocsPerChunk, withSegmentSuffix, blockShift);\n    case 2:\n      return new HighCompressionCompressingCodec(chunkSize, maxDocsPerChunk, withSegmentSuffix, blockShift);\n    case 3:\n      return new DummyCompressingCodec(chunkSize, maxDocsPerChunk, withSegmentSuffix, blockShift);\n    default:\n      throw new AssertionError();\n    }\n  }\n\n","sourceOld":"  /**\n   * Create a random instance.\n   */\n  public static CompressingCodec randomInstance(Random random, int chunkSize, int maxDocsPerChunk, boolean withSegmentSuffix, int blockSize) {\n    switch (random.nextInt(4)) {\n    case 0:\n      return new FastCompressingCodec(chunkSize, maxDocsPerChunk, withSegmentSuffix, blockSize);\n    case 1:\n      return new FastDecompressionCompressingCodec(chunkSize, maxDocsPerChunk, withSegmentSuffix, blockSize);\n    case 2:\n      return new HighCompressionCompressingCodec(chunkSize, maxDocsPerChunk, withSegmentSuffix, blockSize);\n    case 3:\n      return new DummyCompressingCodec(chunkSize, maxDocsPerChunk, withSegmentSuffix, blockSize);\n    default:\n      throw new AssertionError();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0db8230c9dbe474fc18e1e71cf04c1ada8046ec9","date":1598432674,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/compressing/CompressingCodec#randomInstance(Random,int,int,boolean,int).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/compressing/CompressingCodec#randomInstance(Random,int,int,boolean,int).mjava","sourceNew":"  /**\n   * Create a random instance.\n   */\n  public static CompressingCodec randomInstance(Random random, int chunkSize, int maxDocsPerChunk, boolean withSegmentSuffix, int blockShift) {\n    switch (random.nextInt(5)) {\n    case 0:\n      return new FastCompressingCodec(chunkSize, maxDocsPerChunk, withSegmentSuffix, blockShift);\n    case 1:\n      return new FastDecompressionCompressingCodec(chunkSize, maxDocsPerChunk, withSegmentSuffix, blockShift);\n    case 2:\n      return new HighCompressionCompressingCodec(chunkSize, maxDocsPerChunk, withSegmentSuffix, blockShift);\n    case 3:\n      return new DummyCompressingCodec(chunkSize, maxDocsPerChunk, withSegmentSuffix, blockShift);\n    case 4:\n      return new DeflateWithPresetCompressingCodec(chunkSize, maxDocsPerChunk, withSegmentSuffix, blockShift);\n    default:\n      throw new AssertionError();\n    }\n  }\n\n","sourceOld":"  /**\n   * Create a random instance.\n   */\n  public static CompressingCodec randomInstance(Random random, int chunkSize, int maxDocsPerChunk, boolean withSegmentSuffix, int blockShift) {\n    switch (random.nextInt(4)) {\n    case 0:\n      return new FastCompressingCodec(chunkSize, maxDocsPerChunk, withSegmentSuffix, blockShift);\n    case 1:\n      return new FastDecompressionCompressingCodec(chunkSize, maxDocsPerChunk, withSegmentSuffix, blockShift);\n    case 2:\n      return new HighCompressionCompressingCodec(chunkSize, maxDocsPerChunk, withSegmentSuffix, blockShift);\n    case 3:\n      return new DummyCompressingCodec(chunkSize, maxDocsPerChunk, withSegmentSuffix, blockShift);\n    default:\n      throw new AssertionError();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9aefce86de8b17eed91ab011fb54d704d91102ef","date":1599128224,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/compressing/CompressingCodec#randomInstance(Random,int,int,boolean,int).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/compressing/CompressingCodec#randomInstance(Random,int,int,boolean,int).mjava","sourceNew":"  /**\n   * Create a random instance.\n   */\n  public static CompressingCodec randomInstance(Random random, int chunkSize, int maxDocsPerChunk, boolean withSegmentSuffix, int blockShift) {\n    switch (random.nextInt(6)) {\n    case 0:\n      return new FastCompressingCodec(chunkSize, maxDocsPerChunk, withSegmentSuffix, blockShift);\n    case 1:\n      return new FastDecompressionCompressingCodec(chunkSize, maxDocsPerChunk, withSegmentSuffix, blockShift);\n    case 2:\n      return new HighCompressionCompressingCodec(chunkSize, maxDocsPerChunk, withSegmentSuffix, blockShift);\n    case 3:\n      return new DummyCompressingCodec(chunkSize, maxDocsPerChunk, withSegmentSuffix, blockShift);\n    case 4:\n      return new DeflateWithPresetCompressingCodec(chunkSize, maxDocsPerChunk, withSegmentSuffix, blockShift);\n    case 5:\n      return new LZ4WithPresetCompressingCodec(chunkSize, maxDocsPerChunk, withSegmentSuffix, blockShift);\n    default:\n      throw new AssertionError();\n    }\n  }\n\n","sourceOld":"  /**\n   * Create a random instance.\n   */\n  public static CompressingCodec randomInstance(Random random, int chunkSize, int maxDocsPerChunk, boolean withSegmentSuffix, int blockShift) {\n    switch (random.nextInt(5)) {\n    case 0:\n      return new FastCompressingCodec(chunkSize, maxDocsPerChunk, withSegmentSuffix, blockShift);\n    case 1:\n      return new FastDecompressionCompressingCodec(chunkSize, maxDocsPerChunk, withSegmentSuffix, blockShift);\n    case 2:\n      return new HighCompressionCompressingCodec(chunkSize, maxDocsPerChunk, withSegmentSuffix, blockShift);\n    case 3:\n      return new DummyCompressingCodec(chunkSize, maxDocsPerChunk, withSegmentSuffix, blockShift);\n    case 4:\n      return new DeflateWithPresetCompressingCodec(chunkSize, maxDocsPerChunk, withSegmentSuffix, blockShift);\n    default:\n      throw new AssertionError();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70a4487b07c49a1861c05720e04624826ecbe9fa":["59d4661023aa9541b0a759e4d2e11dcf83b923a0"],"59d4661023aa9541b0a759e4d2e11dcf83b923a0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9aefce86de8b17eed91ab011fb54d704d91102ef":["0db8230c9dbe474fc18e1e71cf04c1ada8046ec9"],"0db8230c9dbe474fc18e1e71cf04c1ada8046ec9":["70a4487b07c49a1861c05720e04624826ecbe9fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9aefce86de8b17eed91ab011fb54d704d91102ef"]},"commit2Childs":{"70a4487b07c49a1861c05720e04624826ecbe9fa":["0db8230c9dbe474fc18e1e71cf04c1ada8046ec9"],"59d4661023aa9541b0a759e4d2e11dcf83b923a0":["70a4487b07c49a1861c05720e04624826ecbe9fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["59d4661023aa9541b0a759e4d2e11dcf83b923a0"],"9aefce86de8b17eed91ab011fb54d704d91102ef":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0db8230c9dbe474fc18e1e71cf04c1ada8046ec9":["9aefce86de8b17eed91ab011fb54d704d91102ef"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}