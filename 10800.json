{"path":"solr/core/src/test/org/apache/solr/cloud/MigrateRouteKeyTest.Indexer#run().mjava","commits":[{"id":"5ef0a91e147ef5c263ff965642f847b554b13ba2","date":1386676110,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/MigrateRouteKeyTest.Indexer#run().mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void run() {\n      long start = System.currentTimeMillis();\n      for (int id = 26*3; id < 500 && System.currentTimeMillis() - start <= seconds*1000; id++) {\n        String shardKey = \"\" + (char) ('a' + (id % 26)); // See comment in ShardRoutingTest for hash distribution\n        SolrInputDocument doc = new SolrInputDocument();\n        doc.addField(\"id\", shardKey + (bitSep != -1 ? \"/\" + bitSep : \"\") + \"!\" + id);\n        doc.addField(\"n_ti\", id);\n        try {\n          cloudClient.add(doc);\n          if (splitKey.equals(shardKey))\n            splitKeyCount++;\n        } catch (Exception e) {\n          log.error(\"Exception while adding document id: \" + doc.getField(\"id\"), e);\n        }\n        try {\n          Thread.sleep(50);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/MigrateRouteKeyTest.Indexer#run().mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void run() {\n      long start = System.currentTimeMillis();\n      for (int id = 26*3; id < 500 && System.currentTimeMillis() - start <= seconds*1000; id++) {\n        String shardKey = \"\" + (char) ('a' + (id % 26)); // See comment in ShardRoutingTest for hash distribution\n        SolrInputDocument doc = new SolrInputDocument();\n        doc.addField(\"id\", shardKey + (bitSep != -1 ? \"/\" + bitSep : \"\") + \"!\" + id);\n        doc.addField(\"n_ti\", id);\n        try {\n          cloudClient.add(doc);\n          if (splitKey.equals(shardKey))\n            splitKeyCount++;\n        } catch (Exception e) {\n          log.error(\"Exception while adding document id: \" + doc.getField(\"id\"), e);\n        }\n        try {\n          Thread.sleep(50);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bcf9886c8ff537aafde14de48ebf744f5673f08b","date":1439041198,"type":3,"author":"Ramkumar Aiyengar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/MigrateRouteKeyTest.Indexer#run().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/MigrateRouteKeyTest.Indexer#run().mjava","sourceNew":"    @Override\n    public void run() {\n      TimeOut timeout = new TimeOut(seconds, TimeUnit.SECONDS);\n      for (int id = 26*3; id < 500 && ! timeout.hasTimedOut(); id++) {\n        String shardKey = \"\" + (char) ('a' + (id % 26)); // See comment in ShardRoutingTest for hash distribution\n        SolrInputDocument doc = new SolrInputDocument();\n        doc.addField(\"id\", shardKey + (bitSep != -1 ? \"/\" + bitSep : \"\") + \"!\" + id);\n        doc.addField(\"n_ti\", id);\n        try {\n          cloudClient.add(doc);\n          if (splitKey.equals(shardKey))\n            splitKeyCount++;\n        } catch (Exception e) {\n          log.error(\"Exception while adding document id: \" + doc.getField(\"id\"), e);\n        }\n        try {\n          Thread.sleep(50);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void run() {\n      long start = System.currentTimeMillis();\n      for (int id = 26*3; id < 500 && System.currentTimeMillis() - start <= seconds*1000; id++) {\n        String shardKey = \"\" + (char) ('a' + (id % 26)); // See comment in ShardRoutingTest for hash distribution\n        SolrInputDocument doc = new SolrInputDocument();\n        doc.addField(\"id\", shardKey + (bitSep != -1 ? \"/\" + bitSep : \"\") + \"!\" + id);\n        doc.addField(\"n_ti\", id);\n        try {\n          cloudClient.add(doc);\n          if (splitKey.equals(shardKey))\n            splitKeyCount++;\n        } catch (Exception e) {\n          log.error(\"Exception while adding document id: \" + doc.getField(\"id\"), e);\n        }\n        try {\n          Thread.sleep(50);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a02c54923e5f4de08097fa9028e09e8cf5caa82","date":1475573567,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/MigrateRouteKeyTest.Indexer#run().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/MigrateRouteKeyTest.Indexer#run().mjava","sourceNew":"    @Override\n    public void run() {\n      TimeOut timeout = new TimeOut(seconds, TimeUnit.SECONDS);\n      for (int id = 26*3; id < 500 && ! timeout.hasTimedOut(); id++) {\n        String shardKey = \"\" + (char) ('a' + (id % 26)); // See comment in ShardRoutingTest for hash distribution\n        SolrInputDocument doc = new SolrInputDocument();\n        doc.addField(\"id\", shardKey + (bitSep != -1 ? \"/\" + bitSep : \"\") + \"!\" + id);\n        doc.addField(\"n_ti\", id);\n        try {\n          cloudClient.add(doc);\n          if (splitKey.equals(shardKey))\n            splitKeyCount++;\n        } catch (Exception e) {\n          log.error(\"Exception while adding document id: \" + doc.getField(\"id\"), e);\n        }\n        try {\n          Thread.sleep(50);\n        } catch (InterruptedException e) {\n          return;\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void run() {\n      TimeOut timeout = new TimeOut(seconds, TimeUnit.SECONDS);\n      for (int id = 26*3; id < 500 && ! timeout.hasTimedOut(); id++) {\n        String shardKey = \"\" + (char) ('a' + (id % 26)); // See comment in ShardRoutingTest for hash distribution\n        SolrInputDocument doc = new SolrInputDocument();\n        doc.addField(\"id\", shardKey + (bitSep != -1 ? \"/\" + bitSep : \"\") + \"!\" + id);\n        doc.addField(\"n_ti\", id);\n        try {\n          cloudClient.add(doc);\n          if (splitKey.equals(shardKey))\n            splitKeyCount++;\n        } catch (Exception e) {\n          log.error(\"Exception while adding document id: \" + doc.getField(\"id\"), e);\n        }\n        try {\n          Thread.sleep(50);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1967bed916cc89da82a1c2085f27976da6d08cbd","date":1475588750,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/MigrateRouteKeyTest.Indexer#run().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/MigrateRouteKeyTest.Indexer#run().mjava","sourceNew":"    @Override\n    public void run() {\n      TimeOut timeout = new TimeOut(seconds, TimeUnit.SECONDS);\n      for (int id = 26*3; id < 500 && ! timeout.hasTimedOut(); id++) {\n        String shardKey = \"\" + (char) ('a' + (id % 26)); // See comment in ShardRoutingTest for hash distribution\n        SolrInputDocument doc = new SolrInputDocument();\n        doc.addField(\"id\", shardKey + (bitSep != -1 ? \"/\" + bitSep : \"\") + \"!\" + id);\n        doc.addField(\"n_ti\", id);\n        try {\n          cloudClient.add(doc);\n          if (splitKey.equals(shardKey))\n            splitKeyCount++;\n        } catch (Exception e) {\n          log.error(\"Exception while adding document id: \" + doc.getField(\"id\"), e);\n        }\n        try {\n          Thread.sleep(50);\n        } catch (InterruptedException e) {\n          return;\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void run() {\n      TimeOut timeout = new TimeOut(seconds, TimeUnit.SECONDS);\n      for (int id = 26*3; id < 500 && ! timeout.hasTimedOut(); id++) {\n        String shardKey = \"\" + (char) ('a' + (id % 26)); // See comment in ShardRoutingTest for hash distribution\n        SolrInputDocument doc = new SolrInputDocument();\n        doc.addField(\"id\", shardKey + (bitSep != -1 ? \"/\" + bitSep : \"\") + \"!\" + id);\n        doc.addField(\"n_ti\", id);\n        try {\n          cloudClient.add(doc);\n          if (splitKey.equals(shardKey))\n            splitKeyCount++;\n        } catch (Exception e) {\n          log.error(\"Exception while adding document id: \" + doc.getField(\"id\"), e);\n        }\n        try {\n          Thread.sleep(50);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/MigrateRouteKeyTest.Indexer#run().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/MigrateRouteKeyTest.Indexer#run().mjava","sourceNew":"    @Override\n    public void run() {\n      TimeOut timeout = new TimeOut(seconds, TimeUnit.SECONDS);\n      for (int id = 26*3; id < 500 && ! timeout.hasTimedOut(); id++) {\n        String shardKey = \"\" + (char) ('a' + (id % 26)); // See comment in ShardRoutingTest for hash distribution\n        SolrInputDocument doc = new SolrInputDocument();\n        doc.addField(\"id\", shardKey + (bitSep != -1 ? \"/\" + bitSep : \"\") + \"!\" + id);\n        doc.addField(\"n_ti\", id);\n        try {\n          cloudClient.add(doc);\n          if (splitKey.equals(shardKey))\n            splitKeyCount++;\n        } catch (Exception e) {\n          log.error(\"Exception while adding document id: \" + doc.getField(\"id\"), e);\n        }\n        try {\n          Thread.sleep(50);\n        } catch (InterruptedException e) {\n          return;\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void run() {\n      TimeOut timeout = new TimeOut(seconds, TimeUnit.SECONDS);\n      for (int id = 26*3; id < 500 && ! timeout.hasTimedOut(); id++) {\n        String shardKey = \"\" + (char) ('a' + (id % 26)); // See comment in ShardRoutingTest for hash distribution\n        SolrInputDocument doc = new SolrInputDocument();\n        doc.addField(\"id\", shardKey + (bitSep != -1 ? \"/\" + bitSep : \"\") + \"!\" + id);\n        doc.addField(\"n_ti\", id);\n        try {\n          cloudClient.add(doc);\n          if (splitKey.equals(shardKey))\n            splitKeyCount++;\n        } catch (Exception e) {\n          log.error(\"Exception while adding document id: \" + doc.getField(\"id\"), e);\n        }\n        try {\n          Thread.sleep(50);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","date":1513252583,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/MigrateRouteKeyTest.Indexer#run().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/MigrateRouteKeyTest.Indexer#run().mjava","sourceNew":"    @Override\n    public void run() {\n      TimeOut timeout = new TimeOut(seconds, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n      for (int id = 26*3; id < 500 && ! timeout.hasTimedOut(); id++) {\n        String shardKey = \"\" + (char) ('a' + (id % 26)); // See comment in ShardRoutingTest for hash distribution\n        SolrInputDocument doc = new SolrInputDocument();\n        doc.addField(\"id\", shardKey + (bitSep != -1 ? \"/\" + bitSep : \"\") + \"!\" + id);\n        doc.addField(\"n_ti\", id);\n        try {\n          cloudClient.add(doc);\n          if (splitKey.equals(shardKey))\n            splitKeyCount++;\n        } catch (Exception e) {\n          log.error(\"Exception while adding document id: \" + doc.getField(\"id\"), e);\n        }\n        try {\n          Thread.sleep(50);\n        } catch (InterruptedException e) {\n          return;\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void run() {\n      TimeOut timeout = new TimeOut(seconds, TimeUnit.SECONDS);\n      for (int id = 26*3; id < 500 && ! timeout.hasTimedOut(); id++) {\n        String shardKey = \"\" + (char) ('a' + (id % 26)); // See comment in ShardRoutingTest for hash distribution\n        SolrInputDocument doc = new SolrInputDocument();\n        doc.addField(\"id\", shardKey + (bitSep != -1 ? \"/\" + bitSep : \"\") + \"!\" + id);\n        doc.addField(\"n_ti\", id);\n        try {\n          cloudClient.add(doc);\n          if (splitKey.equals(shardKey))\n            splitKeyCount++;\n        } catch (Exception e) {\n          log.error(\"Exception while adding document id: \" + doc.getField(\"id\"), e);\n        }\n        try {\n          Thread.sleep(50);\n        } catch (InterruptedException e) {\n          return;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a966532d92cf9ba2856f15a8140151bb6b518e4b","date":1588290631,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/MigrateRouteKeyTest.Indexer#run().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/MigrateRouteKeyTest.Indexer#run().mjava","sourceNew":"    @Override\n    public void run() {\n      TimeOut timeout = new TimeOut(seconds, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n      for (int id = 26*3; id < 500 && ! timeout.hasTimedOut(); id++) {\n        String shardKey = \"\" + (char) ('a' + (id % 26)); // See comment in ShardRoutingTest for hash distribution\n        SolrInputDocument doc = new SolrInputDocument();\n        doc.addField(\"id\", shardKey + (bitSep != -1 ? \"/\" + bitSep : \"\") + \"!\" + id);\n        doc.addField(\"n_ti\", id);\n        try {\n          cloudClient.add(doc);\n          if (splitKey.equals(shardKey))\n            splitKeyCount++;\n        } catch (Exception e) {\n          log.error(\"Exception while adding document id: {}\", doc.getField(\"id\"), e);\n        }\n        try {\n          Thread.sleep(50);\n        } catch (InterruptedException e) {\n          return;\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void run() {\n      TimeOut timeout = new TimeOut(seconds, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n      for (int id = 26*3; id < 500 && ! timeout.hasTimedOut(); id++) {\n        String shardKey = \"\" + (char) ('a' + (id % 26)); // See comment in ShardRoutingTest for hash distribution\n        SolrInputDocument doc = new SolrInputDocument();\n        doc.addField(\"id\", shardKey + (bitSep != -1 ? \"/\" + bitSep : \"\") + \"!\" + id);\n        doc.addField(\"n_ti\", id);\n        try {\n          cloudClient.add(doc);\n          if (splitKey.equals(shardKey))\n            splitKeyCount++;\n        } catch (Exception e) {\n          log.error(\"Exception while adding document id: \" + doc.getField(\"id\"), e);\n        }\n        try {\n          Thread.sleep(50);\n        } catch (InterruptedException e) {\n          return;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1967bed916cc89da82a1c2085f27976da6d08cbd":["bcf9886c8ff537aafde14de48ebf744f5673f08b","5a02c54923e5f4de08097fa9028e09e8cf5caa82"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5ef0a91e147ef5c263ff965642f847b554b13ba2"],"bcf9886c8ff537aafde14de48ebf744f5673f08b":["5ef0a91e147ef5c263ff965642f847b554b13ba2"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["1967bed916cc89da82a1c2085f27976da6d08cbd"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"5a02c54923e5f4de08097fa9028e09e8cf5caa82":["bcf9886c8ff537aafde14de48ebf744f5673f08b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["bcf9886c8ff537aafde14de48ebf744f5673f08b","1967bed916cc89da82a1c2085f27976da6d08cbd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a966532d92cf9ba2856f15a8140151bb6b518e4b"],"5ef0a91e147ef5c263ff965642f847b554b13ba2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"1967bed916cc89da82a1c2085f27976da6d08cbd":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","5ef0a91e147ef5c263ff965642f847b554b13ba2"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"bcf9886c8ff537aafde14de48ebf744f5673f08b":["1967bed916cc89da82a1c2085f27976da6d08cbd","5a02c54923e5f4de08097fa9028e09e8cf5caa82","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["a966532d92cf9ba2856f15a8140151bb6b518e4b"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5a02c54923e5f4de08097fa9028e09e8cf5caa82":["1967bed916cc89da82a1c2085f27976da6d08cbd"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"5ef0a91e147ef5c263ff965642f847b554b13ba2":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","bcf9886c8ff537aafde14de48ebf744f5673f08b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}