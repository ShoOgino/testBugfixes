{"path":"lucene/src/java/org/apache/lucene/search/SearcherManager#SearcherManager(IndexWriter,boolean,SearcherWarmer,ExecutorService).mjava","commits":[{"id":"df16fc2e9b615e0138edac46655ae628f5d098ad","date":1320876869,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/SearcherManager#SearcherManager(IndexWriter,boolean,SearcherWarmer,ExecutorService).mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/search/SearcherManager#SearcherManager(IndexWriter,boolean,SearcherWarmer,ExecutorService).mjava","sourceNew":"  /**\n   * Creates and returns a new SearcherManager from the given {@link IndexWriter}. \n   * @param writer the IndexWriter to open the IndexReader from.\n   * @param applyAllDeletes If <code>true</code>, all buffered deletes will\n   *        be applied (made visible) in the {@link IndexSearcher} / {@link IndexReader}.\n   *        If <code>false</code>, the deletes may or may not be applied, but remain buffered \n   *        (in IndexWriter) so that they will be applied in the future.\n   *        Applying deletes can be costly, so if your app can tolerate deleted documents\n   *        being returned you might gain some performance by passing <code>false</code>.\n   *        See {@link IndexReader#openIfChanged(IndexReader, IndexWriter, boolean)}.\n   * @param warmer An optional {@link SearcherWarmer}. Pass\n   *        <code>null</code> if you don't require the searcher to warmed\n   *        before going live.  If this is  <code>non-null</code> then a\n   *        merged segment warmer is installed on the\n   *        provided IndexWriter's config.\n   * @param es An optional {@link ExecutorService} so different segments can\n   *        be searched concurrently (see {@link\n   *        IndexSearcher#IndexSearcher(IndexReader,ExecutorService)}.  Pass <code>null</code>\n   *        to search segments sequentially.\n   *        \n   * @throws IOException\n   */\n  public SearcherManager(IndexWriter writer, boolean applyAllDeletes,\n      final SearcherWarmer warmer, final ExecutorService es) throws IOException {\n    this.es = es;\n    this.warmer = warmer;\n    currentSearcher = new IndexSearcher(IndexReader.open(writer, applyAllDeletes));\n    if (warmer != null) {\n      writer.getConfig().setMergedSegmentWarmer(\n          new IndexWriter.IndexReaderWarmer() {\n            @Override\n            public void warm(IndexReader reader) throws IOException {\n              warmer.warm(new IndexSearcher(reader, es));\n            }\n          });\n    }\n  }\n\n","sourceOld":"  /**\n   * Creates and returns a new SearcherManager from the given {@link IndexWriter}. \n   * @param writer the IndexWriter to open the IndexReader from.\n   * @param applyAllDeletes If <code>true</code>, all buffered deletes will\n   *        be applied (made visible) in the {@link IndexSearcher} / {@link IndexReader}.\n   *        If <code>false</code>, the deletes may or may not be applied, but remain buffered \n   *        (in IndexWriter) so that they will be applied in the future.\n   *        Applying deletes can be costly, so if your app can tolerate deleted documents\n   *        being returned you might gain some performance by passing <code>false</code>.\n   *        See {@link IndexReader#openIfChanged(IndexReader, IndexWriter, boolean)}.\n   * @param warmer An optional {@link SearcherWarmer}. Pass\n   *        <code>null</code> if you don't require the searcher to warmed\n   *        before going live.  If this is  <code>non-null</code> then a\n   *        merged segment warmer is installed on the\n   *        provided IndexWriter's config.\n   * @param es An optional {@link ExecutorService} so different segments can\n   *        be searched concurrently (see {@link\n   *        IndexSearcher#IndexSearcher(IndexReader,ExecutorService)}.  Pass <code>null</code>\n   *        to search segments sequentially.\n   *        \n   * @throws IOException\n   */\n  public SearcherManager(IndexWriter writer, boolean applyAllDeletes,\n      final SearcherWarmer warmer, final ExecutorService es) throws IOException {\n    this.es = es;\n    this.warmer = warmer;\n    currentSearcher = new IndexSearcher(IndexReader.open(writer, applyAllDeletes));\n    if (warmer != null) {\n      writer.getConfig().setMergedSegmentWarmer(\n          new IndexWriter.IndexReaderWarmer() {\n            @Override\n            public void warm(IndexReader reader) throws IOException {\n              warmer.warm(new IndexSearcher(reader, es));\n            }\n          });\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"568cba246a11f491637ba492f881589c2142667c","date":1323623267,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/SearcherManager#SearcherManager(IndexWriter,boolean,SearcherFactory).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/SearcherManager#SearcherManager(IndexWriter,boolean,SearcherWarmer,ExecutorService).mjava","sourceNew":"  /**\n   * Creates and returns a new SearcherManager from the given {@link IndexWriter}. \n   * @param writer the IndexWriter to open the IndexReader from.\n   * @param applyAllDeletes If <code>true</code>, all buffered deletes will\n   *        be applied (made visible) in the {@link IndexSearcher} / {@link IndexReader}.\n   *        If <code>false</code>, the deletes may or may not be applied, but remain buffered \n   *        (in IndexWriter) so that they will be applied in the future.\n   *        Applying deletes can be costly, so if your app can tolerate deleted documents\n   *        being returned you might gain some performance by passing <code>false</code>.\n   *        See {@link IndexReader#openIfChanged(IndexReader, IndexWriter, boolean)}.\n   * @param searcherFactory An optional {@link SearcherFactory}. Pass\n   *        <code>null</code> if you don't require the searcher to be warmed\n   *        before going live or other custom behavior.\n   *        \n   * @throws IOException\n   */\n  public SearcherManager(IndexWriter writer, boolean applyAllDeletes, SearcherFactory searcherFactory) throws IOException {\n    if (searcherFactory == null) {\n      searcherFactory = new SearcherFactory();\n    }\n    this.searcherFactory = searcherFactory;\n    currentSearcher = searcherFactory.newSearcher(IndexReader.open(writer, applyAllDeletes));\n  }\n\n","sourceOld":"  /**\n   * Creates and returns a new SearcherManager from the given {@link IndexWriter}. \n   * @param writer the IndexWriter to open the IndexReader from.\n   * @param applyAllDeletes If <code>true</code>, all buffered deletes will\n   *        be applied (made visible) in the {@link IndexSearcher} / {@link IndexReader}.\n   *        If <code>false</code>, the deletes may or may not be applied, but remain buffered \n   *        (in IndexWriter) so that they will be applied in the future.\n   *        Applying deletes can be costly, so if your app can tolerate deleted documents\n   *        being returned you might gain some performance by passing <code>false</code>.\n   *        See {@link IndexReader#openIfChanged(IndexReader, IndexWriter, boolean)}.\n   * @param warmer An optional {@link SearcherWarmer}. Pass\n   *        <code>null</code> if you don't require the searcher to warmed\n   *        before going live.  If this is  <code>non-null</code> then a\n   *        merged segment warmer is installed on the\n   *        provided IndexWriter's config.\n   * @param es An optional {@link ExecutorService} so different segments can\n   *        be searched concurrently (see {@link\n   *        IndexSearcher#IndexSearcher(IndexReader,ExecutorService)}.  Pass <code>null</code>\n   *        to search segments sequentially.\n   *        \n   * @throws IOException\n   */\n  public SearcherManager(IndexWriter writer, boolean applyAllDeletes,\n      final SearcherWarmer warmer, final ExecutorService es) throws IOException {\n    this.es = es;\n    this.warmer = warmer;\n    currentSearcher = new IndexSearcher(IndexReader.open(writer, applyAllDeletes));\n    if (warmer != null) {\n      writer.getConfig().setMergedSegmentWarmer(\n          new IndexWriter.IndexReaderWarmer() {\n            @Override\n            public void warm(IndexReader reader) throws IOException {\n              warmer.warm(new IndexSearcher(reader, es));\n            }\n          });\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","date":1323720782,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/SearcherManager#SearcherManager(IndexWriter,boolean,SearcherFactory).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/SearcherManager#SearcherManager(IndexWriter,boolean,SearcherWarmer,ExecutorService).mjava","sourceNew":"  /**\n   * Creates and returns a new SearcherManager from the given {@link IndexWriter}. \n   * @param writer the IndexWriter to open the IndexReader from.\n   * @param applyAllDeletes If <code>true</code>, all buffered deletes will\n   *        be applied (made visible) in the {@link IndexSearcher} / {@link IndexReader}.\n   *        If <code>false</code>, the deletes may or may not be applied, but remain buffered \n   *        (in IndexWriter) so that they will be applied in the future.\n   *        Applying deletes can be costly, so if your app can tolerate deleted documents\n   *        being returned you might gain some performance by passing <code>false</code>.\n   *        See {@link IndexReader#openIfChanged(IndexReader, IndexWriter, boolean)}.\n   * @param searcherFactory An optional {@link SearcherFactory}. Pass\n   *        <code>null</code> if you don't require the searcher to be warmed\n   *        before going live or other custom behavior.\n   *        \n   * @throws IOException\n   */\n  public SearcherManager(IndexWriter writer, boolean applyAllDeletes, SearcherFactory searcherFactory) throws IOException {\n    if (searcherFactory == null) {\n      searcherFactory = new SearcherFactory();\n    }\n    this.searcherFactory = searcherFactory;\n    currentSearcher = searcherFactory.newSearcher(IndexReader.open(writer, applyAllDeletes));\n  }\n\n","sourceOld":"  /**\n   * Creates and returns a new SearcherManager from the given {@link IndexWriter}. \n   * @param writer the IndexWriter to open the IndexReader from.\n   * @param applyAllDeletes If <code>true</code>, all buffered deletes will\n   *        be applied (made visible) in the {@link IndexSearcher} / {@link IndexReader}.\n   *        If <code>false</code>, the deletes may or may not be applied, but remain buffered \n   *        (in IndexWriter) so that they will be applied in the future.\n   *        Applying deletes can be costly, so if your app can tolerate deleted documents\n   *        being returned you might gain some performance by passing <code>false</code>.\n   *        See {@link IndexReader#openIfChanged(IndexReader, IndexWriter, boolean)}.\n   * @param warmer An optional {@link SearcherWarmer}. Pass\n   *        <code>null</code> if you don't require the searcher to warmed\n   *        before going live.  If this is  <code>non-null</code> then a\n   *        merged segment warmer is installed on the\n   *        provided IndexWriter's config.\n   * @param es An optional {@link ExecutorService} so different segments can\n   *        be searched concurrently (see {@link\n   *        IndexSearcher#IndexSearcher(IndexReader,ExecutorService)}.  Pass <code>null</code>\n   *        to search segments sequentially.\n   *        \n   * @throws IOException\n   */\n  public SearcherManager(IndexWriter writer, boolean applyAllDeletes,\n      final SearcherWarmer warmer, final ExecutorService es) throws IOException {\n    this.es = es;\n    this.warmer = warmer;\n    currentSearcher = new IndexSearcher(IndexReader.open(writer, applyAllDeletes));\n    if (warmer != null) {\n      writer.getConfig().setMergedSegmentWarmer(\n          new IndexWriter.IndexReaderWarmer() {\n            @Override\n            public void warm(IndexReader reader) throws IOException {\n              warmer.warm(new IndexSearcher(reader, es));\n            }\n          });\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"568cba246a11f491637ba492f881589c2142667c":["df16fc2e9b615e0138edac46655ae628f5d098ad"],"df16fc2e9b615e0138edac46655ae628f5d098ad":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":["df16fc2e9b615e0138edac46655ae628f5d098ad","568cba246a11f491637ba492f881589c2142667c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["568cba246a11f491637ba492f881589c2142667c"]},"commit2Childs":{"568cba246a11f491637ba492f881589c2142667c":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"df16fc2e9b615e0138edac46655ae628f5d098ad":["568cba246a11f491637ba492f881589c2142667c","93ccd971aca7fb61b7f1b946e44714cfc80bfc7c"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["df16fc2e9b615e0138edac46655ae628f5d098ad"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}