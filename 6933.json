{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsReader.BlockPostingsEnum#refillPositions().mjava","commits":[{"id":"51f5280f31484820499077f41fcdfe92d527d9dc","date":1423229122,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsReader.BlockPostingsEnum#refillPositions().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsReader.BlockDocsAndPositionsEnum#refillPositions().mjava","sourceNew":"    private void refillPositions() throws IOException {\n      if (posIn.getFilePointer() == lastPosBlockFP) {\n        final int count = (int) (totalTermFreq % BLOCK_SIZE);\n        int payloadLength = 0;\n        for(int i=0;i<count;i++) {\n          int code = posIn.readVInt();\n          if (indexHasPayloads) {\n            if ((code & 1) != 0) {\n              payloadLength = posIn.readVInt();\n            }\n            posDeltaBuffer[i] = code >>> 1;\n            if (payloadLength != 0) {\n              posIn.seek(posIn.getFilePointer() + payloadLength);\n            }\n          } else {\n            posDeltaBuffer[i] = code;\n          }\n          if (indexHasOffsets) {\n            if ((posIn.readVInt() & 1) != 0) {\n              // offset length changed\n              posIn.readVInt();\n            }\n          }\n        }\n      } else {\n        forUtil.readBlock(posIn, encoded, posDeltaBuffer);\n      }\n    }\n\n","sourceOld":"    private void refillPositions() throws IOException {\n      if (posIn.getFilePointer() == lastPosBlockFP) {\n        final int count = (int) (totalTermFreq % BLOCK_SIZE);\n        int payloadLength = 0;\n        for(int i=0;i<count;i++) {\n          int code = posIn.readVInt();\n          if (indexHasPayloads) {\n            if ((code & 1) != 0) {\n              payloadLength = posIn.readVInt();\n            }\n            posDeltaBuffer[i] = code >>> 1;\n            if (payloadLength != 0) {\n              posIn.seek(posIn.getFilePointer() + payloadLength);\n            }\n          } else {\n            posDeltaBuffer[i] = code;\n          }\n          if (indexHasOffsets) {\n            if ((posIn.readVInt() & 1) != 0) {\n              // offset length changed\n              posIn.readVInt();\n            }\n          }\n        }\n      } else {\n        forUtil.readBlock(posIn, encoded, posDeltaBuffer);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8dd25829321d66cd54ea7d40a4130e0d2a29bec","date":1562680889,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsReader.BlockImpactsPostingsEnum#refillPositions().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsReader.BlockPostingsEnum#refillPositions().mjava","sourceNew":"    private void refillPositions() throws IOException {\n      if (posIn.getFilePointer() == lastPosBlockFP) {\n        final int count = (int) (totalTermFreq % BLOCK_SIZE);\n        int payloadLength = 0;\n        for(int i=0;i<count;i++) {\n          int code = posIn.readVInt();\n          if (indexHasPayloads) {\n            if ((code & 1) != 0) {\n              payloadLength = posIn.readVInt();\n            }\n            posDeltaBuffer[i] = code >>> 1;\n            if (payloadLength != 0) {\n              posIn.seek(posIn.getFilePointer() + payloadLength);\n            }\n          } else {\n            posDeltaBuffer[i] = code;\n          }\n          if (indexHasOffsets) {\n            if ((posIn.readVInt() & 1) != 0) {\n              // offset length changed\n              posIn.readVInt();\n            }\n          }\n        }\n      } else {\n        forUtil.readBlock(posIn, encoded, posDeltaBuffer);\n      }\n    }\n\n","sourceOld":"    private void refillPositions() throws IOException {\n      if (posIn.getFilePointer() == lastPosBlockFP) {\n        final int count = (int) (totalTermFreq % BLOCK_SIZE);\n        int payloadLength = 0;\n        for(int i=0;i<count;i++) {\n          int code = posIn.readVInt();\n          if (indexHasPayloads) {\n            if ((code & 1) != 0) {\n              payloadLength = posIn.readVInt();\n            }\n            posDeltaBuffer[i] = code >>> 1;\n            if (payloadLength != 0) {\n              posIn.seek(posIn.getFilePointer() + payloadLength);\n            }\n          } else {\n            posDeltaBuffer[i] = code;\n          }\n          if (indexHasOffsets) {\n            if ((posIn.readVInt() & 1) != 0) {\n              // offset length changed\n              posIn.readVInt();\n            }\n          }\n        }\n      } else {\n        forUtil.readBlock(posIn, encoded, posDeltaBuffer);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f8dd25829321d66cd54ea7d40a4130e0d2a29bec":["51f5280f31484820499077f41fcdfe92d527d9dc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"51f5280f31484820499077f41fcdfe92d527d9dc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f8dd25829321d66cd54ea7d40a4130e0d2a29bec"]},"commit2Childs":{"f8dd25829321d66cd54ea7d40a4130e0d2a29bec":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["51f5280f31484820499077f41fcdfe92d527d9dc"],"51f5280f31484820499077f41fcdfe92d527d9dc":["f8dd25829321d66cd54ea7d40a4130e0d2a29bec"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}