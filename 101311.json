{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testLogNormalDistribution().mjava","commits":[{"id":"f7052a30e794b71229411425f0b5c985a1d49d4d","date":1506534783,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testLogNormalDistribution().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testLogNormalDistribution() throws Exception {\n    String cexpr = \"let(echo=true, \" +\n        \"a=describe(sample(logNormalDistribution(.1, 0),10000)), \" +\n        \"b=describe(sample(logNormalDistribution(.3, 0),10000)), \" +\n        \"c=describe(sample(logNormalDistribution(.6, 0),10000)),\" +\n        \"d=mean(sample(logNormalDistribution(.3, 0),10000)), \" +\n        \"e=mean(sample(logNormalDistribution(.3, 2),10000)), \" +\n        \")\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    Map a = (Map)tuples.get(0).get(\"a\");\n    Map b = (Map)tuples.get(0).get(\"b\");\n    Map c = (Map)tuples.get(0).get(\"c\");\n\n    Number sa = (Number)a.get(\"skewness\");\n    Number sb = (Number)b.get(\"skewness\");\n    Number sc = (Number)c.get(\"skewness\");\n\n    assertTrue(sa.doubleValue() < sb.doubleValue());\n    assertTrue(sb.doubleValue() < sc.doubleValue());\n\n    Number d = (Number)tuples.get(0).get(\"d\");\n    Number e = (Number)tuples.get(0).get(\"e\");\n\n    assertTrue(d.doubleValue() < e.doubleValue());\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6240b74b884c5587f2a4062dd27d6c32bf228889","date":1507037235,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testLogNormalDistribution().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testLogNormalDistribution() throws Exception {\n    String cexpr = \"let(echo=true, \" +\n        \"a=describe(sample(logNormalDistribution(.1, 0),10000)), \" +\n        \"b=describe(sample(logNormalDistribution(.3, 0),10000)), \" +\n        \"c=describe(sample(logNormalDistribution(.6, 0),10000)),\" +\n        \"d=mean(sample(logNormalDistribution(.3, 0),10000)), \" +\n        \"e=mean(sample(logNormalDistribution(.3, 2),10000)), \" +\n        \")\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    Map a = (Map)tuples.get(0).get(\"a\");\n    Map b = (Map)tuples.get(0).get(\"b\");\n    Map c = (Map)tuples.get(0).get(\"c\");\n\n    Number sa = (Number)a.get(\"skewness\");\n    Number sb = (Number)b.get(\"skewness\");\n    Number sc = (Number)c.get(\"skewness\");\n\n    assertTrue(sa.doubleValue() < sb.doubleValue());\n    assertTrue(sb.doubleValue() < sc.doubleValue());\n\n    Number d = (Number)tuples.get(0).get(\"d\");\n    Number e = (Number)tuples.get(0).get(\"e\");\n\n    assertTrue(d.doubleValue() < e.doubleValue());\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf","date":1522951207,"type":5,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testLogNormalDistribution().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testLogNormalDistribution().mjava","sourceNew":"  @Test\n  public void testLogNormalDistribution() throws Exception {\n    String cexpr = \"let(echo=true, \" +\n        \"a=describe(sample(logNormalDistribution(.1, 0),10000)), \" +\n        \"b=describe(sample(logNormalDistribution(.3, 0),10000)), \" +\n        \"c=describe(sample(logNormalDistribution(.6, 0),10000)),\" +\n        \"d=mean(sample(logNormalDistribution(.3, 0),10000)), \" +\n        \"e=mean(sample(logNormalDistribution(.3, 2),10000)), \" +\n        \")\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    Map a = (Map)tuples.get(0).get(\"a\");\n    Map b = (Map)tuples.get(0).get(\"b\");\n    Map c = (Map)tuples.get(0).get(\"c\");\n\n    Number sa = (Number)a.get(\"skewness\");\n    Number sb = (Number)b.get(\"skewness\");\n    Number sc = (Number)c.get(\"skewness\");\n\n    assertTrue(sa.doubleValue() < sb.doubleValue());\n    assertTrue(sb.doubleValue() < sc.doubleValue());\n\n    Number d = (Number)tuples.get(0).get(\"d\");\n    Number e = (Number)tuples.get(0).get(\"e\");\n\n    assertTrue(d.doubleValue() < e.doubleValue());\n\n  }\n\n","sourceOld":"  @Test\n  public void testLogNormalDistribution() throws Exception {\n    String cexpr = \"let(echo=true, \" +\n        \"a=describe(sample(logNormalDistribution(.1, 0),10000)), \" +\n        \"b=describe(sample(logNormalDistribution(.3, 0),10000)), \" +\n        \"c=describe(sample(logNormalDistribution(.6, 0),10000)),\" +\n        \"d=mean(sample(logNormalDistribution(.3, 0),10000)), \" +\n        \"e=mean(sample(logNormalDistribution(.3, 2),10000)), \" +\n        \")\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    Map a = (Map)tuples.get(0).get(\"a\");\n    Map b = (Map)tuples.get(0).get(\"b\");\n    Map c = (Map)tuples.get(0).get(\"c\");\n\n    Number sa = (Number)a.get(\"skewness\");\n    Number sb = (Number)b.get(\"skewness\");\n    Number sc = (Number)c.get(\"skewness\");\n\n    assertTrue(sa.doubleValue() < sb.doubleValue());\n    assertTrue(sb.doubleValue() < sc.doubleValue());\n\n    Number d = (Number)tuples.get(0).get(\"d\");\n    Number e = (Number)tuples.get(0).get(\"e\");\n\n    assertTrue(d.doubleValue() < e.doubleValue());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6240b74b884c5587f2a4062dd27d6c32bf228889":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f7052a30e794b71229411425f0b5c985a1d49d4d"],"f7052a30e794b71229411425f0b5c985a1d49d4d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf"],"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf":["f7052a30e794b71229411425f0b5c985a1d49d4d"]},"commit2Childs":{"6240b74b884c5587f2a4062dd27d6c32bf228889":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6240b74b884c5587f2a4062dd27d6c32bf228889","f7052a30e794b71229411425f0b5c985a1d49d4d"],"f7052a30e794b71229411425f0b5c985a1d49d4d":["6240b74b884c5587f2a4062dd27d6c32bf228889","8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["6240b74b884c5587f2a4062dd27d6c32bf228889","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}