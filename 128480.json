{"path":"lucene/facet/src/java/org/apache/lucene/facet/associations/AssociationsFacetFields#createCategoryListMapping(Iterable[CategoryPath]).mjava","commits":[{"id":"7a1037d9031f9702ee6912f8751ef1d5320da6d9","date":1357217787,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/associations/AssociationsFacetFields#createCategoryListMapping(Iterable[CategoryPath]).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  protected Map<CategoryListParams,Iterable<CategoryPath>> createCategoryListMapping(\n      Iterable<CategoryPath> categories) {\n    CategoryAssociationsContainer categoryAssociations = (CategoryAssociationsContainer) categories;\n    HashMap<CategoryListParams,Iterable<CategoryPath>> categoryLists = \n        new HashMap<CategoryListParams,Iterable<CategoryPath>>();\n    for (CategoryPath cp : categories) {\n      // each category may be indexed under a different field, so add it to the right list.\n      CategoryListParams clp = indexingParams.getCategoryListParams(cp);\n      CategoryAssociationsContainer clpContainer = (CategoryAssociationsContainer) categoryLists.get(clp);\n      if (clpContainer == null) {\n        clpContainer = new CategoryAssociationsContainer();\n        categoryLists.put(clp, clpContainer);\n      }\n      // DrillDownStream modifies the CategoryPath by calling trim(). That means\n      // that the source category, as the app ses it, is modified. While for\n      // most apps this is not a problem, we need to protect against it. If\n      // CategoryPath will be made immutable, we can stop cloning.\n      cp = cp.clone();\n      clpContainer.setAssociation(cp, categoryAssociations.getAssociation(cp));\n    }\n    return categoryLists;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d90771c07d45c6ad884c5ef9cb3a6eeb257238d1","date":1357499264,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/associations/AssociationsFacetFields#createCategoryListMapping(Iterable[CategoryPath]).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/associations/AssociationsFacetFields#createCategoryListMapping(Iterable[CategoryPath]).mjava","sourceNew":"  @Override\n  protected Map<CategoryListParams,Iterable<CategoryPath>> createCategoryListMapping(\n      Iterable<CategoryPath> categories) {\n    CategoryAssociationsContainer categoryAssociations = (CategoryAssociationsContainer) categories;\n    HashMap<CategoryListParams,Iterable<CategoryPath>> categoryLists = \n        new HashMap<CategoryListParams,Iterable<CategoryPath>>();\n    for (CategoryPath cp : categories) {\n      // each category may be indexed under a different field, so add it to the right list.\n      CategoryListParams clp = indexingParams.getCategoryListParams(cp);\n      CategoryAssociationsContainer clpContainer = (CategoryAssociationsContainer) categoryLists.get(clp);\n      if (clpContainer == null) {\n        clpContainer = new CategoryAssociationsContainer();\n        categoryLists.put(clp, clpContainer);\n      }\n      clpContainer.setAssociation(cp, categoryAssociations.getAssociation(cp));\n    }\n    return categoryLists;\n  }\n\n","sourceOld":"  @Override\n  protected Map<CategoryListParams,Iterable<CategoryPath>> createCategoryListMapping(\n      Iterable<CategoryPath> categories) {\n    CategoryAssociationsContainer categoryAssociations = (CategoryAssociationsContainer) categories;\n    HashMap<CategoryListParams,Iterable<CategoryPath>> categoryLists = \n        new HashMap<CategoryListParams,Iterable<CategoryPath>>();\n    for (CategoryPath cp : categories) {\n      // each category may be indexed under a different field, so add it to the right list.\n      CategoryListParams clp = indexingParams.getCategoryListParams(cp);\n      CategoryAssociationsContainer clpContainer = (CategoryAssociationsContainer) categoryLists.get(clp);\n      if (clpContainer == null) {\n        clpContainer = new CategoryAssociationsContainer();\n        categoryLists.put(clp, clpContainer);\n      }\n      // DrillDownStream modifies the CategoryPath by calling trim(). That means\n      // that the source category, as the app ses it, is modified. While for\n      // most apps this is not a problem, we need to protect against it. If\n      // CategoryPath will be made immutable, we can stop cloning.\n      cp = cp.clone();\n      clpContainer.setAssociation(cp, categoryAssociations.getAssociation(cp));\n    }\n    return categoryLists;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/associations/AssociationsFacetFields#createCategoryListMapping(Iterable[CategoryPath]).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  protected Map<CategoryListParams,Iterable<CategoryPath>> createCategoryListMapping(\n      Iterable<CategoryPath> categories) {\n    CategoryAssociationsContainer categoryAssociations = (CategoryAssociationsContainer) categories;\n    HashMap<CategoryListParams,Iterable<CategoryPath>> categoryLists = \n        new HashMap<CategoryListParams,Iterable<CategoryPath>>();\n    for (CategoryPath cp : categories) {\n      // each category may be indexed under a different field, so add it to the right list.\n      CategoryListParams clp = indexingParams.getCategoryListParams(cp);\n      CategoryAssociationsContainer clpContainer = (CategoryAssociationsContainer) categoryLists.get(clp);\n      if (clpContainer == null) {\n        clpContainer = new CategoryAssociationsContainer();\n        categoryLists.put(clp, clpContainer);\n      }\n      clpContainer.setAssociation(cp, categoryAssociations.getAssociation(cp));\n    }\n    return categoryLists;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c190847801a50f4dd20fd639bdc29b54ea3b288b","date":1384461522,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/associations/AssociationsFacetFields#createCategoryListMapping(Iterable[FacetLabel]).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/associations/AssociationsFacetFields#createCategoryListMapping(Iterable[CategoryPath]).mjava","sourceNew":"  @Override\n  protected Map<CategoryListParams,Iterable<FacetLabel>> createCategoryListMapping(\n      Iterable<FacetLabel> categories) {\n    CategoryAssociationsContainer categoryAssociations = (CategoryAssociationsContainer) categories;\n    HashMap<CategoryListParams,Iterable<FacetLabel>> categoryLists = \n        new HashMap<CategoryListParams,Iterable<FacetLabel>>();\n    for (FacetLabel cp : categories) {\n      // each category may be indexed under a different field, so add it to the right list.\n      CategoryListParams clp = indexingParams.getCategoryListParams(cp);\n      CategoryAssociationsContainer clpContainer = (CategoryAssociationsContainer) categoryLists.get(clp);\n      if (clpContainer == null) {\n        clpContainer = new CategoryAssociationsContainer();\n        categoryLists.put(clp, clpContainer);\n      }\n      clpContainer.setAssociation(cp, categoryAssociations.getAssociation(cp));\n    }\n    return categoryLists;\n  }\n\n","sourceOld":"  @Override\n  protected Map<CategoryListParams,Iterable<CategoryPath>> createCategoryListMapping(\n      Iterable<CategoryPath> categories) {\n    CategoryAssociationsContainer categoryAssociations = (CategoryAssociationsContainer) categories;\n    HashMap<CategoryListParams,Iterable<CategoryPath>> categoryLists = \n        new HashMap<CategoryListParams,Iterable<CategoryPath>>();\n    for (CategoryPath cp : categories) {\n      // each category may be indexed under a different field, so add it to the right list.\n      CategoryListParams clp = indexingParams.getCategoryListParams(cp);\n      CategoryAssociationsContainer clpContainer = (CategoryAssociationsContainer) categoryLists.get(clp);\n      if (clpContainer == null) {\n        clpContainer = new CategoryAssociationsContainer();\n        categoryLists.put(clp, clpContainer);\n      }\n      clpContainer.setAssociation(cp, categoryAssociations.getAssociation(cp));\n    }\n    return categoryLists;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/associations/AssociationsFacetFields#createCategoryListMapping(Iterable[CategoryPath]).mjava","sourceNew":null,"sourceOld":"  @Override\n  protected Map<CategoryListParams,Iterable<CategoryPath>> createCategoryListMapping(\n      Iterable<CategoryPath> categories) {\n    CategoryAssociationsContainer categoryAssociations = (CategoryAssociationsContainer) categories;\n    HashMap<CategoryListParams,Iterable<CategoryPath>> categoryLists = \n        new HashMap<CategoryListParams,Iterable<CategoryPath>>();\n    for (CategoryPath cp : categories) {\n      // each category may be indexed under a different field, so add it to the right list.\n      CategoryListParams clp = indexingParams.getCategoryListParams(cp);\n      CategoryAssociationsContainer clpContainer = (CategoryAssociationsContainer) categoryLists.get(clp);\n      if (clpContainer == null) {\n        clpContainer = new CategoryAssociationsContainer();\n        categoryLists.put(clp, clpContainer);\n      }\n      clpContainer.setAssociation(cp, categoryAssociations.getAssociation(cp));\n    }\n    return categoryLists;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d90771c07d45c6ad884c5ef9cb3a6eeb257238d1"],"d90771c07d45c6ad884c5ef9cb3a6eeb257238d1":["7a1037d9031f9702ee6912f8751ef1d5320da6d9"],"7a1037d9031f9702ee6912f8751ef1d5320da6d9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cc728b07df73b197e6d940d27f9b08b63918f13":["d90771c07d45c6ad884c5ef9cb3a6eeb257238d1","c190847801a50f4dd20fd639bdc29b54ea3b288b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["d90771c07d45c6ad884c5ef9cb3a6eeb257238d1"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"d90771c07d45c6ad884c5ef9cb3a6eeb257238d1":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","3cc728b07df73b197e6d940d27f9b08b63918f13","c190847801a50f4dd20fd639bdc29b54ea3b288b"],"7a1037d9031f9702ee6912f8751ef1d5320da6d9":["d90771c07d45c6ad884c5ef9cb3a6eeb257238d1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","7a1037d9031f9702ee6912f8751ef1d5320da6d9"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}