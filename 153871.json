{"path":"lucene/core/src/java/org/apache/lucene/index/MergePolicy#setMaxCFSSegmentSizeMB(double).mjava","commits":[{"id":"088a7ef694fd43d5d9a4d200c4005865f773d1e7","date":1371136274,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MergePolicy#setMaxCFSSegmentSizeMB(double).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/LogMergePolicy#setMaxCFSSegmentSizeMB(double).mjava","sourceNew":"  /** If a merged segment will be more than this value,\n   *  leave the segment as\n   *  non-compound file even if compound file is enabled.\n   *  Set this to Double.POSITIVE_INFINITY (default) and noCFSRatio to 1.0\n   *  to always use CFS regardless of merge size. */\n  public final void setMaxCFSSegmentSizeMB(double v) {\n    if (v < 0.0) {\n      throw new IllegalArgumentException(\"maxCFSSegmentSizeMB must be >=0 (got \" + v + \")\");\n    }\n    v *= 1024 * 1024;\n    this.maxCFSSegmentSize = (v > Long.MAX_VALUE) ? Long.MAX_VALUE : (long) v;\n  }\n\n","sourceOld":"  /** If a merged segment will be more than this value,\n   *  leave the segment as\n   *  non-compound file even if compound file is enabled.\n   *  Set this to Double.POSITIVE_INFINITY (default) and noCFSRatio to 1.0\n   *  to always use CFS regardless of merge size. */\n  public final void setMaxCFSSegmentSizeMB(double v) {\n    if (v < 0.0) {\n      throw new IllegalArgumentException(\"maxCFSSegmentSizeMB must be >=0 (got \" + v + \")\");\n    }\n    v *= 1024 * 1024;\n    this.maxCFSSegmentSize = (v > Long.MAX_VALUE) ? Long.MAX_VALUE : (long) v;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"39cc7fae4e4c6be7c74434527ee9852592db649f","date":1412761164,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MergePolicy#setMaxCFSSegmentSizeMB(double).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/MergePolicy#setMaxCFSSegmentSizeMB(double).mjava","sourceNew":"  /** If a merged segment will be more than this value,\n   *  leave the segment as\n   *  non-compound file even if compound file is enabled.\n   *  Set this to Double.POSITIVE_INFINITY (default) and noCFSRatio to 1.0\n   *  to always use CFS regardless of merge size. */\n  public final void setMaxCFSSegmentSizeMB(double v) {\n    if (v < 0.0) {\n      throw new IllegalArgumentException(\"maxCFSSegmentSizeMB must be >=0 (got \" + v + \")\");\n    }\n    v *= 1024 * 1024;\n    this.maxCFSSegmentSize = v > Long.MAX_VALUE ? Long.MAX_VALUE : (long) v;\n  }\n\n","sourceOld":"  /** If a merged segment will be more than this value,\n   *  leave the segment as\n   *  non-compound file even if compound file is enabled.\n   *  Set this to Double.POSITIVE_INFINITY (default) and noCFSRatio to 1.0\n   *  to always use CFS regardless of merge size. */\n  public final void setMaxCFSSegmentSizeMB(double v) {\n    if (v < 0.0) {\n      throw new IllegalArgumentException(\"maxCFSSegmentSizeMB must be >=0 (got \" + v + \")\");\n    }\n    v *= 1024 * 1024;\n    this.maxCFSSegmentSize = (v > Long.MAX_VALUE) ? Long.MAX_VALUE : (long) v;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55980207f1977bd1463465de1659b821347e2fa8","date":1413336386,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MergePolicy#setMaxCFSSegmentSizeMB(double).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/MergePolicy#setMaxCFSSegmentSizeMB(double).mjava","sourceNew":"  /** If a merged segment will be more than this value,\n   *  leave the segment as\n   *  non-compound file even if compound file is enabled.\n   *  Set this to Double.POSITIVE_INFINITY (default) and noCFSRatio to 1.0\n   *  to always use CFS regardless of merge size. */\n  public final void setMaxCFSSegmentSizeMB(double v) {\n    if (v < 0.0) {\n      throw new IllegalArgumentException(\"maxCFSSegmentSizeMB must be >=0 (got \" + v + \")\");\n    }\n    v *= 1024 * 1024;\n    this.maxCFSSegmentSize = v > Long.MAX_VALUE ? Long.MAX_VALUE : (long) v;\n  }\n\n","sourceOld":"  /** If a merged segment will be more than this value,\n   *  leave the segment as\n   *  non-compound file even if compound file is enabled.\n   *  Set this to Double.POSITIVE_INFINITY (default) and noCFSRatio to 1.0\n   *  to always use CFS regardless of merge size. */\n  public final void setMaxCFSSegmentSizeMB(double v) {\n    if (v < 0.0) {\n      throw new IllegalArgumentException(\"maxCFSSegmentSizeMB must be >=0 (got \" + v + \")\");\n    }\n    v *= 1024 * 1024;\n    this.maxCFSSegmentSize = (v > Long.MAX_VALUE) ? Long.MAX_VALUE : (long) v;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e96253deb801879f3fc6373f5069f2debfe797d3","date":1454570664,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MergePolicy#setMaxCFSSegmentSizeMB(double).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/MergePolicy#setMaxCFSSegmentSizeMB(double).mjava","sourceNew":"  /** If a merged segment will be more than this value,\n   *  leave the segment as\n   *  non-compound file even if compound file is enabled.\n   *  Set this to Double.POSITIVE_INFINITY (default) and noCFSRatio to 1.0\n   *  to always use CFS regardless of merge size. */\n  public void setMaxCFSSegmentSizeMB(double v) {\n    if (v < 0.0) {\n      throw new IllegalArgumentException(\"maxCFSSegmentSizeMB must be >=0 (got \" + v + \")\");\n    }\n    v *= 1024 * 1024;\n    this.maxCFSSegmentSize = v > Long.MAX_VALUE ? Long.MAX_VALUE : (long) v;\n  }\n\n","sourceOld":"  /** If a merged segment will be more than this value,\n   *  leave the segment as\n   *  non-compound file even if compound file is enabled.\n   *  Set this to Double.POSITIVE_INFINITY (default) and noCFSRatio to 1.0\n   *  to always use CFS regardless of merge size. */\n  public final void setMaxCFSSegmentSizeMB(double v) {\n    if (v < 0.0) {\n      throw new IllegalArgumentException(\"maxCFSSegmentSizeMB must be >=0 (got \" + v + \")\");\n    }\n    v *= 1024 * 1024;\n    this.maxCFSSegmentSize = v > Long.MAX_VALUE ? Long.MAX_VALUE : (long) v;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b1704c078ec59838c9d95d5bf5738b393b537494","date":1454693901,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MergePolicy#setMaxCFSSegmentSizeMB(double).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/MergePolicy#setMaxCFSSegmentSizeMB(double).mjava","sourceNew":"  /** If a merged segment will be more than this value,\n   *  leave the segment as\n   *  non-compound file even if compound file is enabled.\n   *  Set this to Double.POSITIVE_INFINITY (default) and noCFSRatio to 1.0\n   *  to always use CFS regardless of merge size. */\n  public void setMaxCFSSegmentSizeMB(double v) {\n    if (v < 0.0) {\n      throw new IllegalArgumentException(\"maxCFSSegmentSizeMB must be >=0 (got \" + v + \")\");\n    }\n    v *= 1024 * 1024;\n    this.maxCFSSegmentSize = v > Long.MAX_VALUE ? Long.MAX_VALUE : (long) v;\n  }\n\n","sourceOld":"  /** If a merged segment will be more than this value,\n   *  leave the segment as\n   *  non-compound file even if compound file is enabled.\n   *  Set this to Double.POSITIVE_INFINITY (default) and noCFSRatio to 1.0\n   *  to always use CFS regardless of merge size. */\n  public final void setMaxCFSSegmentSizeMB(double v) {\n    if (v < 0.0) {\n      throw new IllegalArgumentException(\"maxCFSSegmentSizeMB must be >=0 (got \" + v + \")\");\n    }\n    v *= 1024 * 1024;\n    this.maxCFSSegmentSize = v > Long.MAX_VALUE ? Long.MAX_VALUE : (long) v;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MergePolicy#setMaxCFSSegmentSizeMB(double).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/MergePolicy#setMaxCFSSegmentSizeMB(double).mjava","sourceNew":"  /** If a merged segment will be more than this value,\n   *  leave the segment as\n   *  non-compound file even if compound file is enabled.\n   *  Set this to Double.POSITIVE_INFINITY (default) and noCFSRatio to 1.0\n   *  to always use CFS regardless of merge size. */\n  public void setMaxCFSSegmentSizeMB(double v) {\n    if (v < 0.0) {\n      throw new IllegalArgumentException(\"maxCFSSegmentSizeMB must be >=0 (got \" + v + \")\");\n    }\n    v *= 1024 * 1024;\n    this.maxCFSSegmentSize = v > Long.MAX_VALUE ? Long.MAX_VALUE : (long) v;\n  }\n\n","sourceOld":"  /** If a merged segment will be more than this value,\n   *  leave the segment as\n   *  non-compound file even if compound file is enabled.\n   *  Set this to Double.POSITIVE_INFINITY (default) and noCFSRatio to 1.0\n   *  to always use CFS regardless of merge size. */\n  public final void setMaxCFSSegmentSizeMB(double v) {\n    if (v < 0.0) {\n      throw new IllegalArgumentException(\"maxCFSSegmentSizeMB must be >=0 (got \" + v + \")\");\n    }\n    v *= 1024 * 1024;\n    this.maxCFSSegmentSize = v > Long.MAX_VALUE ? Long.MAX_VALUE : (long) v;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"39cc7fae4e4c6be7c74434527ee9852592db649f":["088a7ef694fd43d5d9a4d200c4005865f773d1e7"],"55980207f1977bd1463465de1659b821347e2fa8":["088a7ef694fd43d5d9a4d200c4005865f773d1e7","39cc7fae4e4c6be7c74434527ee9852592db649f"],"088a7ef694fd43d5d9a4d200c4005865f773d1e7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e96253deb801879f3fc6373f5069f2debfe797d3":["39cc7fae4e4c6be7c74434527ee9852592db649f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["39cc7fae4e4c6be7c74434527ee9852592db649f","e96253deb801879f3fc6373f5069f2debfe797d3"],"b1704c078ec59838c9d95d5bf5738b393b537494":["39cc7fae4e4c6be7c74434527ee9852592db649f","e96253deb801879f3fc6373f5069f2debfe797d3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e96253deb801879f3fc6373f5069f2debfe797d3"]},"commit2Childs":{"39cc7fae4e4c6be7c74434527ee9852592db649f":["55980207f1977bd1463465de1659b821347e2fa8","e96253deb801879f3fc6373f5069f2debfe797d3","1e6acbaae7af722f17204ceccf0f7db5753eccf3","b1704c078ec59838c9d95d5bf5738b393b537494"],"55980207f1977bd1463465de1659b821347e2fa8":[],"088a7ef694fd43d5d9a4d200c4005865f773d1e7":["39cc7fae4e4c6be7c74434527ee9852592db649f","55980207f1977bd1463465de1659b821347e2fa8"],"e96253deb801879f3fc6373f5069f2debfe797d3":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","b1704c078ec59838c9d95d5bf5738b393b537494","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["088a7ef694fd43d5d9a4d200c4005865f773d1e7"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"b1704c078ec59838c9d95d5bf5738b393b537494":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["55980207f1977bd1463465de1659b821347e2fa8","1e6acbaae7af722f17204ceccf0f7db5753eccf3","b1704c078ec59838c9d95d5bf5738b393b537494","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}