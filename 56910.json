{"path":"solr/core/src/test/org/apache/solr/search/TestReRankQParserPlugin#testOverRank().mjava","commits":[{"id":"ab323901b34dfa96b6871cb6c5fc9cfcce93c2d1","date":1410446084,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestReRankQParserPlugin#testOverRank().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testOverRank() throws Exception {\n\n    assertU(delQ(\"*:*\"));\n    assertU(commit());\n\n    //Test the scenario that where we rank more documents then we return.\n\n    String[] doc = {\"id\",\"1\", \"term_s\", \"YYYY\", \"group_s\", \"group1\", \"test_ti\", \"5\", \"test_tl\", \"10\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc));\n    String[] doc1 = {\"id\",\"2\", \"term_s\",\"YYYY\", \"group_s\", \"group1\", \"test_ti\", \"50\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc1));\n\n    String[] doc2 = {\"id\",\"3\", \"term_s\", \"YYYY\", \"test_ti\", \"5000\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc2));\n    String[] doc3 = {\"id\",\"4\", \"term_s\", \"YYYY\", \"test_ti\", \"500\", \"test_tl\", \"1000\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc3));\n\n\n    String[] doc4 = {\"id\",\"5\", \"term_s\", \"YYYY\", \"group_s\", \"group2\", \"test_ti\", \"4\", \"test_tl\", \"10\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc4));\n\n    String[] doc5 = {\"id\",\"6\", \"term_s\",\"YYYY\", \"group_s\", \"group2\", \"test_ti\", \"10\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc5));\n\n    String[] doc6 = {\"id\",\"7\", \"term_s\", \"YYYY\", \"group_s\", \"group1\", \"test_ti\", \"5\", \"test_tl\", \"10\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc6));\n\n\n    String[] doc7 = {\"id\",\"8\", \"term_s\",\"YYYY\", \"group_s\", \"group1\", \"test_ti\", \"50\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc7));\n\n    String[] doc8 = {\"id\",\"9\", \"term_s\", \"YYYY\", \"test_ti\", \"5000\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc8));\n    String[] doc9 = {\"id\",\"10\", \"term_s\", \"YYYY\", \"test_ti\", \"500\", \"test_tl\", \"1000\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc9));\n\n    String[] doc10 = {\"id\",\"11\", \"term_s\", \"YYYY\", \"group_s\", \"group2\", \"test_ti\", \"4\", \"test_tl\", \"10\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc10));\n    assertU(commit());\n\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!rerank reRankQuery=$rqq reRankDocs=11 reRankWeight=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60 id:7^70 id:8^80 id:9^90 id:10^100 id:11^110\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"2\");\n\n    assertQ(req(params), \"*[count(//doc)=2]\",\n        \"//result/doc[1]/float[@name='id'][.='8.0']\",\n        \"//result/doc[2]/float[@name='id'][.='2.0']\"\n    );\n\n    //Test Elevation\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!rerank reRankQuery=$rqq reRankDocs=6 reRankWeight=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60 id:7^70 id:8^80 id:9^90 id:10^100 id:11^110\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"3\");\n    params.add(\"qt\",\"/elevate\");\n    params.add(\"elevateIds\", \"1,4\");\n\n    assertQ(req(params), \"*[count(//doc)=3]\",\n        \"//result/doc[1]/float[@name='id'][.='1.0']\", //Elevated\n        \"//result/doc[2]/float[@name='id'][.='4.0']\", //Elevated\n        \"//result/doc[3]/float[@name='id'][.='8.0']\"); //Boosted during rerank.\n\n\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["a6be80501b3ee38dea6ab1d6439aa049acdfa0ad"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b18553d9fe6c051baf12f8a2afd3ef2b9c7710a4","date":1410470012,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestReRankQParserPlugin#testOverRank().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestReRankQParserPlugin#testOverRank().mjava","sourceNew":"  @Test\n  public void testOverRank() throws Exception {\n\n    assertU(delQ(\"*:*\"));\n    assertU(commit());\n\n    //Test the scenario that where we rank more documents then we return.\n\n    String[] doc = {\"id\",\"1\", \"term_s\", \"YYYY\", \"group_s\", \"group1\", \"test_ti\", \"5\", \"test_tl\", \"10\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc));\n    String[] doc1 = {\"id\",\"2\", \"term_s\",\"YYYY\", \"group_s\", \"group1\", \"test_ti\", \"50\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc1));\n\n    String[] doc2 = {\"id\",\"3\", \"term_s\", \"YYYY\", \"test_ti\", \"5000\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc2));\n    String[] doc3 = {\"id\",\"4\", \"term_s\", \"YYYY\", \"test_ti\", \"500\", \"test_tl\", \"1000\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc3));\n\n\n    String[] doc4 = {\"id\",\"5\", \"term_s\", \"YYYY\", \"group_s\", \"group2\", \"test_ti\", \"4\", \"test_tl\", \"10\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc4));\n\n    String[] doc5 = {\"id\",\"6\", \"term_s\",\"YYYY\", \"group_s\", \"group2\", \"test_ti\", \"10\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc5));\n\n    String[] doc6 = {\"id\",\"7\", \"term_s\", \"YYYY\", \"group_s\", \"group1\", \"test_ti\", \"5\", \"test_tl\", \"10\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc6));\n\n\n    String[] doc7 = {\"id\",\"8\", \"term_s\",\"YYYY\", \"group_s\", \"group1\", \"test_ti\", \"50\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc7));\n\n    String[] doc8 = {\"id\",\"9\", \"term_s\", \"YYYY\", \"test_ti\", \"5000\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc8));\n    String[] doc9 = {\"id\",\"10\", \"term_s\", \"YYYY\", \"test_ti\", \"500\", \"test_tl\", \"1000\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc9));\n\n    String[] doc10 = {\"id\",\"11\", \"term_s\", \"YYYY\", \"group_s\", \"group2\", \"test_ti\", \"4\", \"test_tl\", \"10\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc10));\n    assertU(commit());\n\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!rerank reRankQuery=$rqq reRankDocs=11 reRankWeight=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60 id:7^70 id:8^80 id:9^90 id:10^100 id:11^110\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"2\");\n\n    assertQ(req(params), \"*[count(//doc)=2]\",\n        \"//result/doc[1]/float[@name='id'][.='8.0']\",\n        \"//result/doc[2]/float[@name='id'][.='2.0']\"\n    );\n\n    //Test Elevation\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!rerank reRankQuery=$rqq reRankDocs=11 reRankWeight=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60 id:7^70 id:8^80 id:9^90 id:10^100 id:11^110\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"3\");\n    params.add(\"qt\",\"/elevate\");\n    params.add(\"elevateIds\", \"1,4\");\n\n    assertQ(req(params), \"*[count(//doc)=3]\",\n        \"//result/doc[1]/float[@name='id'][.='1.0']\", //Elevated\n        \"//result/doc[2]/float[@name='id'][.='4.0']\", //Elevated\n        \"//result/doc[3]/float[@name='id'][.='8.0']\"); //Boosted during rerank.\n\n\n\n  }\n\n","sourceOld":"  @Test\n  public void testOverRank() throws Exception {\n\n    assertU(delQ(\"*:*\"));\n    assertU(commit());\n\n    //Test the scenario that where we rank more documents then we return.\n\n    String[] doc = {\"id\",\"1\", \"term_s\", \"YYYY\", \"group_s\", \"group1\", \"test_ti\", \"5\", \"test_tl\", \"10\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc));\n    String[] doc1 = {\"id\",\"2\", \"term_s\",\"YYYY\", \"group_s\", \"group1\", \"test_ti\", \"50\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc1));\n\n    String[] doc2 = {\"id\",\"3\", \"term_s\", \"YYYY\", \"test_ti\", \"5000\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc2));\n    String[] doc3 = {\"id\",\"4\", \"term_s\", \"YYYY\", \"test_ti\", \"500\", \"test_tl\", \"1000\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc3));\n\n\n    String[] doc4 = {\"id\",\"5\", \"term_s\", \"YYYY\", \"group_s\", \"group2\", \"test_ti\", \"4\", \"test_tl\", \"10\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc4));\n\n    String[] doc5 = {\"id\",\"6\", \"term_s\",\"YYYY\", \"group_s\", \"group2\", \"test_ti\", \"10\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc5));\n\n    String[] doc6 = {\"id\",\"7\", \"term_s\", \"YYYY\", \"group_s\", \"group1\", \"test_ti\", \"5\", \"test_tl\", \"10\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc6));\n\n\n    String[] doc7 = {\"id\",\"8\", \"term_s\",\"YYYY\", \"group_s\", \"group1\", \"test_ti\", \"50\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc7));\n\n    String[] doc8 = {\"id\",\"9\", \"term_s\", \"YYYY\", \"test_ti\", \"5000\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc8));\n    String[] doc9 = {\"id\",\"10\", \"term_s\", \"YYYY\", \"test_ti\", \"500\", \"test_tl\", \"1000\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc9));\n\n    String[] doc10 = {\"id\",\"11\", \"term_s\", \"YYYY\", \"group_s\", \"group2\", \"test_ti\", \"4\", \"test_tl\", \"10\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc10));\n    assertU(commit());\n\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!rerank reRankQuery=$rqq reRankDocs=11 reRankWeight=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60 id:7^70 id:8^80 id:9^90 id:10^100 id:11^110\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"2\");\n\n    assertQ(req(params), \"*[count(//doc)=2]\",\n        \"//result/doc[1]/float[@name='id'][.='8.0']\",\n        \"//result/doc[2]/float[@name='id'][.='2.0']\"\n    );\n\n    //Test Elevation\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!rerank reRankQuery=$rqq reRankDocs=6 reRankWeight=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60 id:7^70 id:8^80 id:9^90 id:10^100 id:11^110\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"3\");\n    params.add(\"qt\",\"/elevate\");\n    params.add(\"elevateIds\", \"1,4\");\n\n    assertQ(req(params), \"*[count(//doc)=3]\",\n        \"//result/doc[1]/float[@name='id'][.='1.0']\", //Elevated\n        \"//result/doc[2]/float[@name='id'][.='4.0']\", //Elevated\n        \"//result/doc[3]/float[@name='id'][.='8.0']\"); //Boosted during rerank.\n\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a6be80501b3ee38dea6ab1d6439aa049acdfa0ad","date":1434033347,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestReRankQParserPlugin#testOverRank().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestReRankQParserPlugin#testOverRank().mjava","sourceNew":"  @Test\n  public void testOverRank() throws Exception {\n\n    assertU(delQ(\"*:*\"));\n    assertU(commit());\n\n    //Test the scenario that where we rank more documents then we return.\n\n    String[] doc = {\"id\",\"1\", \"term_s\", \"YYYY\", \"group_s\", \"group1\", \"test_ti\", \"5\", \"test_tl\", \"10\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc));\n    String[] doc1 = {\"id\",\"2\", \"term_s\",\"YYYY\", \"group_s\", \"group1\", \"test_ti\", \"50\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc1));\n\n    String[] doc2 = {\"id\",\"3\", \"term_s\", \"YYYY\", \"test_ti\", \"5000\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc2));\n    String[] doc3 = {\"id\",\"4\", \"term_s\", \"YYYY\", \"test_ti\", \"500\", \"test_tl\", \"1000\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc3));\n\n\n    String[] doc4 = {\"id\",\"5\", \"term_s\", \"YYYY\", \"group_s\", \"group2\", \"test_ti\", \"4\", \"test_tl\", \"10\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc4));\n\n    String[] doc5 = {\"id\",\"6\", \"term_s\",\"YYYY\", \"group_s\", \"group2\", \"test_ti\", \"10\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc5));\n\n    String[] doc6 = {\"id\",\"7\", \"term_s\", \"YYYY\", \"group_s\", \"group1\", \"test_ti\", \"5\", \"test_tl\", \"10\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc6));\n\n\n    String[] doc7 = {\"id\",\"8\", \"term_s\",\"YYYY\", \"group_s\", \"group1\", \"test_ti\", \"50\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc7));\n\n    String[] doc8 = {\"id\",\"9\", \"term_s\", \"YYYY\", \"test_ti\", \"5000\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc8));\n    String[] doc9 = {\"id\",\"10\", \"term_s\", \"YYYY\", \"test_ti\", \"500\", \"test_tl\", \"1000\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc9));\n\n    String[] doc10 = {\"id\",\"11\", \"term_s\", \"YYYY\", \"group_s\", \"group2\", \"test_ti\", \"4\", \"test_tl\", \"10\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc10));\n    assertU(commit());\n\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!rerank reRankQuery=$rqq reRankDocs=11 reRankWeight=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60 id:7^70 id:8^80 id:9^90 id:10^100 id:11^110\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"2\");\n\n    assertQ(req(params), \"*[count(//doc)=2]\",\n        \"//result/doc[1]/float[@name='id'][.='8.0']\",\n        \"//result/doc[2]/float[@name='id'][.='2.0']\"\n    );\n\n    //Test Elevation\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!rerank reRankQuery=$rqq reRankDocs=11 reRankWeight=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60 id:7^70 id:8^80 id:9^90 id:10^100 id:11^110\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"3\");\n    params.add(\"qt\",\"/elevate\");\n    params.add(\"elevateIds\", \"1,4\");\n\n    assertQ(req(params), \"*[count(//doc)=3]\",\n        \"//result/doc[1]/float[@name='id'][.='1.0']\", //Elevated\n        \"//result/doc[2]/float[@name='id'][.='4.0']\", //Elevated\n        \"//result/doc[3]/float[@name='id'][.='8.0']\"); //Boosted during rerank.\n  }\n\n","sourceOld":"  @Test\n  public void testOverRank() throws Exception {\n\n    assertU(delQ(\"*:*\"));\n    assertU(commit());\n\n    //Test the scenario that where we rank more documents then we return.\n\n    String[] doc = {\"id\",\"1\", \"term_s\", \"YYYY\", \"group_s\", \"group1\", \"test_ti\", \"5\", \"test_tl\", \"10\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc));\n    String[] doc1 = {\"id\",\"2\", \"term_s\",\"YYYY\", \"group_s\", \"group1\", \"test_ti\", \"50\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc1));\n\n    String[] doc2 = {\"id\",\"3\", \"term_s\", \"YYYY\", \"test_ti\", \"5000\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc2));\n    String[] doc3 = {\"id\",\"4\", \"term_s\", \"YYYY\", \"test_ti\", \"500\", \"test_tl\", \"1000\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc3));\n\n\n    String[] doc4 = {\"id\",\"5\", \"term_s\", \"YYYY\", \"group_s\", \"group2\", \"test_ti\", \"4\", \"test_tl\", \"10\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc4));\n\n    String[] doc5 = {\"id\",\"6\", \"term_s\",\"YYYY\", \"group_s\", \"group2\", \"test_ti\", \"10\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc5));\n\n    String[] doc6 = {\"id\",\"7\", \"term_s\", \"YYYY\", \"group_s\", \"group1\", \"test_ti\", \"5\", \"test_tl\", \"10\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc6));\n\n\n    String[] doc7 = {\"id\",\"8\", \"term_s\",\"YYYY\", \"group_s\", \"group1\", \"test_ti\", \"50\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc7));\n\n    String[] doc8 = {\"id\",\"9\", \"term_s\", \"YYYY\", \"test_ti\", \"5000\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc8));\n    String[] doc9 = {\"id\",\"10\", \"term_s\", \"YYYY\", \"test_ti\", \"500\", \"test_tl\", \"1000\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc9));\n\n    String[] doc10 = {\"id\",\"11\", \"term_s\", \"YYYY\", \"group_s\", \"group2\", \"test_ti\", \"4\", \"test_tl\", \"10\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc10));\n    assertU(commit());\n\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!rerank reRankQuery=$rqq reRankDocs=11 reRankWeight=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60 id:7^70 id:8^80 id:9^90 id:10^100 id:11^110\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"2\");\n\n    assertQ(req(params), \"*[count(//doc)=2]\",\n        \"//result/doc[1]/float[@name='id'][.='8.0']\",\n        \"//result/doc[2]/float[@name='id'][.='2.0']\"\n    );\n\n    //Test Elevation\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!rerank reRankQuery=$rqq reRankDocs=11 reRankWeight=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60 id:7^70 id:8^80 id:9^90 id:10^100 id:11^110\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"3\");\n    params.add(\"qt\",\"/elevate\");\n    params.add(\"elevateIds\", \"1,4\");\n\n    assertQ(req(params), \"*[count(//doc)=3]\",\n        \"//result/doc[1]/float[@name='id'][.='1.0']\", //Elevated\n        \"//result/doc[2]/float[@name='id'][.='4.0']\", //Elevated\n        \"//result/doc[3]/float[@name='id'][.='8.0']\"); //Boosted during rerank.\n\n\n\n  }\n\n","bugFix":["ab323901b34dfa96b6871cb6c5fc9cfcce93c2d1"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"569aade36ab5d95a5e6b8fca9676ce35657ba6b6","date":1454328039,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestReRankQParserPlugin#testOverRank().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestReRankQParserPlugin#testOverRank().mjava","sourceNew":"  @Test\n  public void testOverRank() throws Exception {\n\n    assertU(delQ(\"*:*\"));\n    assertU(commit());\n\n    //Test the scenario that where we rank more documents then we return.\n\n    String[] doc = {\"id\",\"1\", \"term_s\", \"YYYY\", \"group_s\", \"group1\", \"test_ti\", \"5\", \"test_tl\", \"10\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc));\n    String[] doc1 = {\"id\",\"2\", \"term_s\",\"YYYY\", \"group_s\", \"group1\", \"test_ti\", \"50\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc1));\n\n    String[] doc2 = {\"id\",\"3\", \"term_s\", \"YYYY\", \"test_ti\", \"5000\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc2));\n    String[] doc3 = {\"id\",\"4\", \"term_s\", \"YYYY\", \"test_ti\", \"500\", \"test_tl\", \"1000\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc3));\n\n\n    String[] doc4 = {\"id\",\"5\", \"term_s\", \"YYYY\", \"group_s\", \"group2\", \"test_ti\", \"4\", \"test_tl\", \"10\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc4));\n\n    String[] doc5 = {\"id\",\"6\", \"term_s\",\"YYYY\", \"group_s\", \"group2\", \"test_ti\", \"10\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc5));\n\n    String[] doc6 = {\"id\",\"7\", \"term_s\", \"YYYY\", \"group_s\", \"group1\", \"test_ti\", \"5\", \"test_tl\", \"10\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc6));\n\n\n    String[] doc7 = {\"id\",\"8\", \"term_s\",\"YYYY\", \"group_s\", \"group1\", \"test_ti\", \"50\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc7));\n\n    String[] doc8 = {\"id\",\"9\", \"term_s\", \"YYYY\", \"test_ti\", \"5000\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc8));\n    String[] doc9 = {\"id\",\"10\", \"term_s\", \"YYYY\", \"test_ti\", \"500\", \"test_tl\", \"1000\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc9));\n\n    String[] doc10 = {\"id\",\"11\", \"term_s\", \"YYYY\", \"group_s\", \"group2\", \"test_ti\", \"4\", \"test_tl\", \"10\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc10));\n    assertU(commit());\n\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=11 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60 id:7^70 id:8^80 id:9^90 id:10^100 id:11^110\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"2\");\n\n    assertQ(req(params), \"*[count(//doc)=2]\",\n        \"//result/doc[1]/float[@name='id'][.='8.0']\",\n        \"//result/doc[2]/float[@name='id'][.='2.0']\"\n    );\n\n    //Test Elevation\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=11 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60 id:7^70 id:8^80 id:9^90 id:10^100 id:11^110\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"3\");\n    params.add(\"qt\",\"/elevate\");\n    params.add(\"elevateIds\", \"1,4\");\n\n    assertQ(req(params), \"*[count(//doc)=3]\",\n        \"//result/doc[1]/float[@name='id'][.='1.0']\", //Elevated\n        \"//result/doc[2]/float[@name='id'][.='4.0']\", //Elevated\n        \"//result/doc[3]/float[@name='id'][.='8.0']\"); //Boosted during rerank.\n  }\n\n","sourceOld":"  @Test\n  public void testOverRank() throws Exception {\n\n    assertU(delQ(\"*:*\"));\n    assertU(commit());\n\n    //Test the scenario that where we rank more documents then we return.\n\n    String[] doc = {\"id\",\"1\", \"term_s\", \"YYYY\", \"group_s\", \"group1\", \"test_ti\", \"5\", \"test_tl\", \"10\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc));\n    String[] doc1 = {\"id\",\"2\", \"term_s\",\"YYYY\", \"group_s\", \"group1\", \"test_ti\", \"50\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc1));\n\n    String[] doc2 = {\"id\",\"3\", \"term_s\", \"YYYY\", \"test_ti\", \"5000\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc2));\n    String[] doc3 = {\"id\",\"4\", \"term_s\", \"YYYY\", \"test_ti\", \"500\", \"test_tl\", \"1000\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc3));\n\n\n    String[] doc4 = {\"id\",\"5\", \"term_s\", \"YYYY\", \"group_s\", \"group2\", \"test_ti\", \"4\", \"test_tl\", \"10\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc4));\n\n    String[] doc5 = {\"id\",\"6\", \"term_s\",\"YYYY\", \"group_s\", \"group2\", \"test_ti\", \"10\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc5));\n\n    String[] doc6 = {\"id\",\"7\", \"term_s\", \"YYYY\", \"group_s\", \"group1\", \"test_ti\", \"5\", \"test_tl\", \"10\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc6));\n\n\n    String[] doc7 = {\"id\",\"8\", \"term_s\",\"YYYY\", \"group_s\", \"group1\", \"test_ti\", \"50\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc7));\n\n    String[] doc8 = {\"id\",\"9\", \"term_s\", \"YYYY\", \"test_ti\", \"5000\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc8));\n    String[] doc9 = {\"id\",\"10\", \"term_s\", \"YYYY\", \"test_ti\", \"500\", \"test_tl\", \"1000\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc9));\n\n    String[] doc10 = {\"id\",\"11\", \"term_s\", \"YYYY\", \"group_s\", \"group2\", \"test_ti\", \"4\", \"test_tl\", \"10\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc10));\n    assertU(commit());\n\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!rerank reRankQuery=$rqq reRankDocs=11 reRankWeight=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60 id:7^70 id:8^80 id:9^90 id:10^100 id:11^110\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"2\");\n\n    assertQ(req(params), \"*[count(//doc)=2]\",\n        \"//result/doc[1]/float[@name='id'][.='8.0']\",\n        \"//result/doc[2]/float[@name='id'][.='2.0']\"\n    );\n\n    //Test Elevation\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!rerank reRankQuery=$rqq reRankDocs=11 reRankWeight=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60 id:7^70 id:8^80 id:9^90 id:10^100 id:11^110\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"3\");\n    params.add(\"qt\",\"/elevate\");\n    params.add(\"elevateIds\", \"1,4\");\n\n    assertQ(req(params), \"*[count(//doc)=3]\",\n        \"//result/doc[1]/float[@name='id'][.='1.0']\", //Elevated\n        \"//result/doc[2]/float[@name='id'][.='4.0']\", //Elevated\n        \"//result/doc[3]/float[@name='id'][.='8.0']\"); //Boosted during rerank.\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestReRankQParserPlugin#testOverRank().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestReRankQParserPlugin#testOverRank().mjava","sourceNew":"  @Test\n  public void testOverRank() throws Exception {\n\n    assertU(delQ(\"*:*\"));\n    assertU(commit());\n\n    //Test the scenario that where we rank more documents then we return.\n\n    String[] doc = {\"id\",\"1\", \"term_s\", \"YYYY\", \"group_s\", \"group1\", \"test_ti\", \"5\", \"test_tl\", \"10\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc));\n    String[] doc1 = {\"id\",\"2\", \"term_s\",\"YYYY\", \"group_s\", \"group1\", \"test_ti\", \"50\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc1));\n\n    String[] doc2 = {\"id\",\"3\", \"term_s\", \"YYYY\", \"test_ti\", \"5000\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc2));\n    String[] doc3 = {\"id\",\"4\", \"term_s\", \"YYYY\", \"test_ti\", \"500\", \"test_tl\", \"1000\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc3));\n\n\n    String[] doc4 = {\"id\",\"5\", \"term_s\", \"YYYY\", \"group_s\", \"group2\", \"test_ti\", \"4\", \"test_tl\", \"10\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc4));\n\n    String[] doc5 = {\"id\",\"6\", \"term_s\",\"YYYY\", \"group_s\", \"group2\", \"test_ti\", \"10\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc5));\n\n    String[] doc6 = {\"id\",\"7\", \"term_s\", \"YYYY\", \"group_s\", \"group1\", \"test_ti\", \"5\", \"test_tl\", \"10\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc6));\n\n\n    String[] doc7 = {\"id\",\"8\", \"term_s\",\"YYYY\", \"group_s\", \"group1\", \"test_ti\", \"50\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc7));\n\n    String[] doc8 = {\"id\",\"9\", \"term_s\", \"YYYY\", \"test_ti\", \"5000\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc8));\n    String[] doc9 = {\"id\",\"10\", \"term_s\", \"YYYY\", \"test_ti\", \"500\", \"test_tl\", \"1000\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc9));\n\n    String[] doc10 = {\"id\",\"11\", \"term_s\", \"YYYY\", \"group_s\", \"group2\", \"test_ti\", \"4\", \"test_tl\", \"10\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc10));\n    assertU(commit());\n\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=11 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60 id:7^70 id:8^80 id:9^90 id:10^100 id:11^110\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"2\");\n\n    assertQ(req(params), \"*[count(//doc)=2]\",\n        \"//result/doc[1]/float[@name='id'][.='8.0']\",\n        \"//result/doc[2]/float[@name='id'][.='2.0']\"\n    );\n\n    //Test Elevation\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=11 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60 id:7^70 id:8^80 id:9^90 id:10^100 id:11^110\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"3\");\n    params.add(\"qt\",\"/elevate\");\n    params.add(\"elevateIds\", \"1,4\");\n\n    assertQ(req(params), \"*[count(//doc)=3]\",\n        \"//result/doc[1]/float[@name='id'][.='1.0']\", //Elevated\n        \"//result/doc[2]/float[@name='id'][.='4.0']\", //Elevated\n        \"//result/doc[3]/float[@name='id'][.='8.0']\"); //Boosted during rerank.\n  }\n\n","sourceOld":"  @Test\n  public void testOverRank() throws Exception {\n\n    assertU(delQ(\"*:*\"));\n    assertU(commit());\n\n    //Test the scenario that where we rank more documents then we return.\n\n    String[] doc = {\"id\",\"1\", \"term_s\", \"YYYY\", \"group_s\", \"group1\", \"test_ti\", \"5\", \"test_tl\", \"10\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc));\n    String[] doc1 = {\"id\",\"2\", \"term_s\",\"YYYY\", \"group_s\", \"group1\", \"test_ti\", \"50\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc1));\n\n    String[] doc2 = {\"id\",\"3\", \"term_s\", \"YYYY\", \"test_ti\", \"5000\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc2));\n    String[] doc3 = {\"id\",\"4\", \"term_s\", \"YYYY\", \"test_ti\", \"500\", \"test_tl\", \"1000\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc3));\n\n\n    String[] doc4 = {\"id\",\"5\", \"term_s\", \"YYYY\", \"group_s\", \"group2\", \"test_ti\", \"4\", \"test_tl\", \"10\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc4));\n\n    String[] doc5 = {\"id\",\"6\", \"term_s\",\"YYYY\", \"group_s\", \"group2\", \"test_ti\", \"10\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc5));\n\n    String[] doc6 = {\"id\",\"7\", \"term_s\", \"YYYY\", \"group_s\", \"group1\", \"test_ti\", \"5\", \"test_tl\", \"10\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc6));\n\n\n    String[] doc7 = {\"id\",\"8\", \"term_s\",\"YYYY\", \"group_s\", \"group1\", \"test_ti\", \"50\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc7));\n\n    String[] doc8 = {\"id\",\"9\", \"term_s\", \"YYYY\", \"test_ti\", \"5000\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc8));\n    String[] doc9 = {\"id\",\"10\", \"term_s\", \"YYYY\", \"test_ti\", \"500\", \"test_tl\", \"1000\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc9));\n\n    String[] doc10 = {\"id\",\"11\", \"term_s\", \"YYYY\", \"group_s\", \"group2\", \"test_ti\", \"4\", \"test_tl\", \"10\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc10));\n    assertU(commit());\n\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!rerank reRankQuery=$rqq reRankDocs=11 reRankWeight=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60 id:7^70 id:8^80 id:9^90 id:10^100 id:11^110\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"2\");\n\n    assertQ(req(params), \"*[count(//doc)=2]\",\n        \"//result/doc[1]/float[@name='id'][.='8.0']\",\n        \"//result/doc[2]/float[@name='id'][.='2.0']\"\n    );\n\n    //Test Elevation\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!rerank reRankQuery=$rqq reRankDocs=11 reRankWeight=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60 id:7^70 id:8^80 id:9^90 id:10^100 id:11^110\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"3\");\n    params.add(\"qt\",\"/elevate\");\n    params.add(\"elevateIds\", \"1,4\");\n\n    assertQ(req(params), \"*[count(//doc)=3]\",\n        \"//result/doc[1]/float[@name='id'][.='1.0']\", //Elevated\n        \"//result/doc[2]/float[@name='id'][.='4.0']\", //Elevated\n        \"//result/doc[3]/float[@name='id'][.='8.0']\"); //Boosted during rerank.\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a144790859eb303122988cd315215ff30f449d2","date":1493938430,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestReRankQParserPlugin#testOverRank().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestReRankQParserPlugin#testOverRank().mjava","sourceNew":"  @Test\n  public void testOverRank() throws Exception {\n\n    assertU(delQ(\"*:*\"));\n    assertU(commit());\n\n    //Test the scenario that where we rank more documents then we return.\n\n    String[] doc = {\"id\",\"1\", \"term_s\", \"YYYY\", \"group_s\", \"group1\", \"test_ti\", \"5\", \"test_tl\", \"10\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc));\n    String[] doc1 = {\"id\",\"2\", \"term_s\",\"YYYY\", \"group_s\", \"group1\", \"test_ti\", \"50\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc1));\n\n    String[] doc2 = {\"id\",\"3\", \"term_s\", \"YYYY\", \"test_ti\", \"5000\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc2));\n    String[] doc3 = {\"id\",\"4\", \"term_s\", \"YYYY\", \"test_ti\", \"500\", \"test_tl\", \"1000\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc3));\n\n\n    String[] doc4 = {\"id\",\"5\", \"term_s\", \"YYYY\", \"group_s\", \"group2\", \"test_ti\", \"4\", \"test_tl\", \"10\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc4));\n\n    String[] doc5 = {\"id\",\"6\", \"term_s\",\"YYYY\", \"group_s\", \"group2\", \"test_ti\", \"10\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc5));\n\n    String[] doc6 = {\"id\",\"7\", \"term_s\", \"YYYY\", \"group_s\", \"group1\", \"test_ti\", \"5\", \"test_tl\", \"10\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc6));\n\n\n    String[] doc7 = {\"id\",\"8\", \"term_s\",\"YYYY\", \"group_s\", \"group1\", \"test_ti\", \"50\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc7));\n\n    String[] doc8 = {\"id\",\"9\", \"term_s\", \"YYYY\", \"test_ti\", \"5000\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc8));\n    String[] doc9 = {\"id\",\"10\", \"term_s\", \"YYYY\", \"test_ti\", \"500\", \"test_tl\", \"1000\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc9));\n\n    String[] doc10 = {\"id\",\"11\", \"term_s\", \"YYYY\", \"group_s\", \"group2\", \"test_ti\", \"4\", \"test_tl\", \"10\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc10));\n    assertU(commit());\n\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=11 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60 id:7^70 id:8^80 id:9^90 id:10^100 id:11^110\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"2\");\n    params.add(\"df\", \"text\");\n\n    assertQ(req(params), \"*[count(//doc)=2]\",\n        \"//result/doc[1]/float[@name='id'][.='8.0']\",\n        \"//result/doc[2]/float[@name='id'][.='2.0']\"\n    );\n\n    //Test Elevation\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=11 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60 id:7^70 id:8^80 id:9^90 id:10^100 id:11^110\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"3\");\n    params.add(\"qt\",\"/elevate\");\n    params.add(\"elevateIds\", \"1,4\");\n\n    assertQ(req(params), \"*[count(//doc)=3]\",\n        \"//result/doc[1]/float[@name='id'][.='1.0']\", //Elevated\n        \"//result/doc[2]/float[@name='id'][.='4.0']\", //Elevated\n        \"//result/doc[3]/float[@name='id'][.='8.0']\"); //Boosted during rerank.\n  }\n\n","sourceOld":"  @Test\n  public void testOverRank() throws Exception {\n\n    assertU(delQ(\"*:*\"));\n    assertU(commit());\n\n    //Test the scenario that where we rank more documents then we return.\n\n    String[] doc = {\"id\",\"1\", \"term_s\", \"YYYY\", \"group_s\", \"group1\", \"test_ti\", \"5\", \"test_tl\", \"10\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc));\n    String[] doc1 = {\"id\",\"2\", \"term_s\",\"YYYY\", \"group_s\", \"group1\", \"test_ti\", \"50\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc1));\n\n    String[] doc2 = {\"id\",\"3\", \"term_s\", \"YYYY\", \"test_ti\", \"5000\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc2));\n    String[] doc3 = {\"id\",\"4\", \"term_s\", \"YYYY\", \"test_ti\", \"500\", \"test_tl\", \"1000\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc3));\n\n\n    String[] doc4 = {\"id\",\"5\", \"term_s\", \"YYYY\", \"group_s\", \"group2\", \"test_ti\", \"4\", \"test_tl\", \"10\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc4));\n\n    String[] doc5 = {\"id\",\"6\", \"term_s\",\"YYYY\", \"group_s\", \"group2\", \"test_ti\", \"10\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc5));\n\n    String[] doc6 = {\"id\",\"7\", \"term_s\", \"YYYY\", \"group_s\", \"group1\", \"test_ti\", \"5\", \"test_tl\", \"10\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc6));\n\n\n    String[] doc7 = {\"id\",\"8\", \"term_s\",\"YYYY\", \"group_s\", \"group1\", \"test_ti\", \"50\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc7));\n\n    String[] doc8 = {\"id\",\"9\", \"term_s\", \"YYYY\", \"test_ti\", \"5000\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc8));\n    String[] doc9 = {\"id\",\"10\", \"term_s\", \"YYYY\", \"test_ti\", \"500\", \"test_tl\", \"1000\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc9));\n\n    String[] doc10 = {\"id\",\"11\", \"term_s\", \"YYYY\", \"group_s\", \"group2\", \"test_ti\", \"4\", \"test_tl\", \"10\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc10));\n    assertU(commit());\n\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=11 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60 id:7^70 id:8^80 id:9^90 id:10^100 id:11^110\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"2\");\n\n    assertQ(req(params), \"*[count(//doc)=2]\",\n        \"//result/doc[1]/float[@name='id'][.='8.0']\",\n        \"//result/doc[2]/float[@name='id'][.='2.0']\"\n    );\n\n    //Test Elevation\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=11 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60 id:7^70 id:8^80 id:9^90 id:10^100 id:11^110\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"3\");\n    params.add(\"qt\",\"/elevate\");\n    params.add(\"elevateIds\", \"1,4\");\n\n    assertQ(req(params), \"*[count(//doc)=3]\",\n        \"//result/doc[1]/float[@name='id'][.='1.0']\", //Elevated\n        \"//result/doc[2]/float[@name='id'][.='4.0']\", //Elevated\n        \"//result/doc[3]/float[@name='id'][.='8.0']\"); //Boosted during rerank.\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestReRankQParserPlugin#testOverRank().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestReRankQParserPlugin#testOverRank().mjava","sourceNew":"  @Test\n  public void testOverRank() throws Exception {\n\n    assertU(delQ(\"*:*\"));\n    assertU(commit());\n\n    //Test the scenario that where we rank more documents then we return.\n\n    String[] doc = {\"id\",\"1\", \"term_s\", \"YYYY\", \"group_s\", \"group1\", \"test_ti\", \"5\", \"test_tl\", \"10\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc));\n    String[] doc1 = {\"id\",\"2\", \"term_s\",\"YYYY\", \"group_s\", \"group1\", \"test_ti\", \"50\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc1));\n\n    String[] doc2 = {\"id\",\"3\", \"term_s\", \"YYYY\", \"test_ti\", \"5000\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc2));\n    String[] doc3 = {\"id\",\"4\", \"term_s\", \"YYYY\", \"test_ti\", \"500\", \"test_tl\", \"1000\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc3));\n\n\n    String[] doc4 = {\"id\",\"5\", \"term_s\", \"YYYY\", \"group_s\", \"group2\", \"test_ti\", \"4\", \"test_tl\", \"10\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc4));\n\n    String[] doc5 = {\"id\",\"6\", \"term_s\",\"YYYY\", \"group_s\", \"group2\", \"test_ti\", \"10\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc5));\n\n    String[] doc6 = {\"id\",\"7\", \"term_s\", \"YYYY\", \"group_s\", \"group1\", \"test_ti\", \"5\", \"test_tl\", \"10\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc6));\n\n\n    String[] doc7 = {\"id\",\"8\", \"term_s\",\"YYYY\", \"group_s\", \"group1\", \"test_ti\", \"50\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc7));\n\n    String[] doc8 = {\"id\",\"9\", \"term_s\", \"YYYY\", \"test_ti\", \"5000\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc8));\n    String[] doc9 = {\"id\",\"10\", \"term_s\", \"YYYY\", \"test_ti\", \"500\", \"test_tl\", \"1000\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc9));\n\n    String[] doc10 = {\"id\",\"11\", \"term_s\", \"YYYY\", \"group_s\", \"group2\", \"test_ti\", \"4\", \"test_tl\", \"10\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc10));\n    assertU(commit());\n\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=11 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60 id:7^70 id:8^80 id:9^90 id:10^100 id:11^110\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"2\");\n    params.add(\"df\", \"text\");\n\n    assertQ(req(params), \"*[count(//doc)=2]\",\n        \"//result/doc[1]/float[@name='id'][.='8.0']\",\n        \"//result/doc[2]/float[@name='id'][.='2.0']\"\n    );\n\n    //Test Elevation\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=11 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60 id:7^70 id:8^80 id:9^90 id:10^100 id:11^110\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"3\");\n    params.add(\"qt\",\"/elevate\");\n    params.add(\"elevateIds\", \"1,4\");\n\n    assertQ(req(params), \"*[count(//doc)=3]\",\n        \"//result/doc[1]/float[@name='id'][.='1.0']\", //Elevated\n        \"//result/doc[2]/float[@name='id'][.='4.0']\", //Elevated\n        \"//result/doc[3]/float[@name='id'][.='8.0']\"); //Boosted during rerank.\n  }\n\n","sourceOld":"  @Test\n  public void testOverRank() throws Exception {\n\n    assertU(delQ(\"*:*\"));\n    assertU(commit());\n\n    //Test the scenario that where we rank more documents then we return.\n\n    String[] doc = {\"id\",\"1\", \"term_s\", \"YYYY\", \"group_s\", \"group1\", \"test_ti\", \"5\", \"test_tl\", \"10\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc));\n    String[] doc1 = {\"id\",\"2\", \"term_s\",\"YYYY\", \"group_s\", \"group1\", \"test_ti\", \"50\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc1));\n\n    String[] doc2 = {\"id\",\"3\", \"term_s\", \"YYYY\", \"test_ti\", \"5000\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc2));\n    String[] doc3 = {\"id\",\"4\", \"term_s\", \"YYYY\", \"test_ti\", \"500\", \"test_tl\", \"1000\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc3));\n\n\n    String[] doc4 = {\"id\",\"5\", \"term_s\", \"YYYY\", \"group_s\", \"group2\", \"test_ti\", \"4\", \"test_tl\", \"10\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc4));\n\n    String[] doc5 = {\"id\",\"6\", \"term_s\",\"YYYY\", \"group_s\", \"group2\", \"test_ti\", \"10\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc5));\n\n    String[] doc6 = {\"id\",\"7\", \"term_s\", \"YYYY\", \"group_s\", \"group1\", \"test_ti\", \"5\", \"test_tl\", \"10\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc6));\n\n\n    String[] doc7 = {\"id\",\"8\", \"term_s\",\"YYYY\", \"group_s\", \"group1\", \"test_ti\", \"50\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc7));\n\n    String[] doc8 = {\"id\",\"9\", \"term_s\", \"YYYY\", \"test_ti\", \"5000\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc8));\n    String[] doc9 = {\"id\",\"10\", \"term_s\", \"YYYY\", \"test_ti\", \"500\", \"test_tl\", \"1000\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc9));\n\n    String[] doc10 = {\"id\",\"11\", \"term_s\", \"YYYY\", \"group_s\", \"group2\", \"test_ti\", \"4\", \"test_tl\", \"10\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc10));\n    assertU(commit());\n\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=11 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60 id:7^70 id:8^80 id:9^90 id:10^100 id:11^110\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"2\");\n\n    assertQ(req(params), \"*[count(//doc)=2]\",\n        \"//result/doc[1]/float[@name='id'][.='8.0']\",\n        \"//result/doc[2]/float[@name='id'][.='2.0']\"\n    );\n\n    //Test Elevation\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=11 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60 id:7^70 id:8^80 id:9^90 id:10^100 id:11^110\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"3\");\n    params.add(\"qt\",\"/elevate\");\n    params.add(\"elevateIds\", \"1,4\");\n\n    assertQ(req(params), \"*[count(//doc)=3]\",\n        \"//result/doc[1]/float[@name='id'][.='1.0']\", //Elevated\n        \"//result/doc[2]/float[@name='id'][.='4.0']\", //Elevated\n        \"//result/doc[3]/float[@name='id'][.='8.0']\"); //Boosted during rerank.\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a71f63026529f3c1f03cfdd664910873ab2369ae","date":1497543264,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestReRankQParserPlugin#testOverRank().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestReRankQParserPlugin#testOverRank().mjava","sourceNew":"  @Test\n  public void testOverRank() throws Exception {\n\n    assertU(delQ(\"*:*\"));\n    assertU(commit());\n\n    //Test the scenario that where we rank more documents then we return.\n\n    String[] doc = {\"id\",\"1\", \"term_s\", \"YYYY\", \"group_s\", \"group1\", \"test_ti\", \"5\", \"test_tl\", \"10\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc));\n    String[] doc1 = {\"id\",\"2\", \"term_s\",\"YYYY\", \"group_s\", \"group1\", \"test_ti\", \"50\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc1));\n\n    String[] doc2 = {\"id\",\"3\", \"term_s\", \"YYYY\", \"test_ti\", \"5000\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc2));\n    String[] doc3 = {\"id\",\"4\", \"term_s\", \"YYYY\", \"test_ti\", \"500\", \"test_tl\", \"1000\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc3));\n\n\n    String[] doc4 = {\"id\",\"5\", \"term_s\", \"YYYY\", \"group_s\", \"group2\", \"test_ti\", \"4\", \"test_tl\", \"10\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc4));\n\n    String[] doc5 = {\"id\",\"6\", \"term_s\",\"YYYY\", \"group_s\", \"group2\", \"test_ti\", \"10\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc5));\n\n    String[] doc6 = {\"id\",\"7\", \"term_s\", \"YYYY\", \"group_s\", \"group1\", \"test_ti\", \"5\", \"test_tl\", \"10\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc6));\n\n\n    String[] doc7 = {\"id\",\"8\", \"term_s\",\"YYYY\", \"group_s\", \"group1\", \"test_ti\", \"50\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc7));\n\n    String[] doc8 = {\"id\",\"9\", \"term_s\", \"YYYY\", \"test_ti\", \"5000\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc8));\n    String[] doc9 = {\"id\",\"10\", \"term_s\", \"YYYY\", \"test_ti\", \"500\", \"test_tl\", \"1000\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc9));\n\n    String[] doc10 = {\"id\",\"11\", \"term_s\", \"YYYY\", \"group_s\", \"group2\", \"test_ti\", \"4\", \"test_tl\", \"10\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc10));\n    assertU(commit());\n\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=11 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60 id:7^70 id:8^80 id:9^90 id:10^100 id:11^110\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"2\");\n    params.add(\"df\", \"text\");\n\n    assertQ(req(params), \"*[count(//doc)=2]\",\n        \"//result/doc[1]/str[@name='id'][.='8']\",\n        \"//result/doc[2]/str[@name='id'][.='2']\"\n    );\n\n    //Test Elevation\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=11 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60 id:7^70 id:8^80 id:9^90 id:10^100 id:11^110\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"3\");\n    params.add(\"qt\",\"/elevate\");\n    params.add(\"elevateIds\", \"1,4\");\n\n    assertQ(req(params), \"*[count(//doc)=3]\",\n        \"//result/doc[1]/str[@name='id'][.='1']\", //Elevated\n        \"//result/doc[2]/str[@name='id'][.='4']\", //Elevated\n        \"//result/doc[3]/str[@name='id'][.='8']\"); //Boosted during rerank.\n  }\n\n","sourceOld":"  @Test\n  public void testOverRank() throws Exception {\n\n    assertU(delQ(\"*:*\"));\n    assertU(commit());\n\n    //Test the scenario that where we rank more documents then we return.\n\n    String[] doc = {\"id\",\"1\", \"term_s\", \"YYYY\", \"group_s\", \"group1\", \"test_ti\", \"5\", \"test_tl\", \"10\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc));\n    String[] doc1 = {\"id\",\"2\", \"term_s\",\"YYYY\", \"group_s\", \"group1\", \"test_ti\", \"50\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc1));\n\n    String[] doc2 = {\"id\",\"3\", \"term_s\", \"YYYY\", \"test_ti\", \"5000\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc2));\n    String[] doc3 = {\"id\",\"4\", \"term_s\", \"YYYY\", \"test_ti\", \"500\", \"test_tl\", \"1000\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc3));\n\n\n    String[] doc4 = {\"id\",\"5\", \"term_s\", \"YYYY\", \"group_s\", \"group2\", \"test_ti\", \"4\", \"test_tl\", \"10\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc4));\n\n    String[] doc5 = {\"id\",\"6\", \"term_s\",\"YYYY\", \"group_s\", \"group2\", \"test_ti\", \"10\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc5));\n\n    String[] doc6 = {\"id\",\"7\", \"term_s\", \"YYYY\", \"group_s\", \"group1\", \"test_ti\", \"5\", \"test_tl\", \"10\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc6));\n\n\n    String[] doc7 = {\"id\",\"8\", \"term_s\",\"YYYY\", \"group_s\", \"group1\", \"test_ti\", \"50\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc7));\n\n    String[] doc8 = {\"id\",\"9\", \"term_s\", \"YYYY\", \"test_ti\", \"5000\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc8));\n    String[] doc9 = {\"id\",\"10\", \"term_s\", \"YYYY\", \"test_ti\", \"500\", \"test_tl\", \"1000\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc9));\n\n    String[] doc10 = {\"id\",\"11\", \"term_s\", \"YYYY\", \"group_s\", \"group2\", \"test_ti\", \"4\", \"test_tl\", \"10\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc10));\n    assertU(commit());\n\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=11 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60 id:7^70 id:8^80 id:9^90 id:10^100 id:11^110\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"2\");\n    params.add(\"df\", \"text\");\n\n    assertQ(req(params), \"*[count(//doc)=2]\",\n        \"//result/doc[1]/float[@name='id'][.='8.0']\",\n        \"//result/doc[2]/float[@name='id'][.='2.0']\"\n    );\n\n    //Test Elevation\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=11 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60 id:7^70 id:8^80 id:9^90 id:10^100 id:11^110\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"3\");\n    params.add(\"qt\",\"/elevate\");\n    params.add(\"elevateIds\", \"1,4\");\n\n    assertQ(req(params), \"*[count(//doc)=3]\",\n        \"//result/doc[1]/float[@name='id'][.='1.0']\", //Elevated\n        \"//result/doc[2]/float[@name='id'][.='4.0']\", //Elevated\n        \"//result/doc[3]/float[@name='id'][.='8.0']\"); //Boosted during rerank.\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestReRankQParserPlugin#testOverRank().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestReRankQParserPlugin#testOverRank().mjava","sourceNew":"  @Test\n  public void testOverRank() throws Exception {\n\n    assertU(delQ(\"*:*\"));\n    assertU(commit());\n\n    //Test the scenario that where we rank more documents then we return.\n\n    String[] doc = {\"id\",\"1\", \"term_s\", \"YYYY\", \"group_s\", \"group1\", \"test_ti\", \"5\", \"test_tl\", \"10\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc));\n    String[] doc1 = {\"id\",\"2\", \"term_s\",\"YYYY\", \"group_s\", \"group1\", \"test_ti\", \"50\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc1));\n\n    String[] doc2 = {\"id\",\"3\", \"term_s\", \"YYYY\", \"test_ti\", \"5000\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc2));\n    String[] doc3 = {\"id\",\"4\", \"term_s\", \"YYYY\", \"test_ti\", \"500\", \"test_tl\", \"1000\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc3));\n\n\n    String[] doc4 = {\"id\",\"5\", \"term_s\", \"YYYY\", \"group_s\", \"group2\", \"test_ti\", \"4\", \"test_tl\", \"10\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc4));\n\n    String[] doc5 = {\"id\",\"6\", \"term_s\",\"YYYY\", \"group_s\", \"group2\", \"test_ti\", \"10\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc5));\n\n    String[] doc6 = {\"id\",\"7\", \"term_s\", \"YYYY\", \"group_s\", \"group1\", \"test_ti\", \"5\", \"test_tl\", \"10\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc6));\n\n\n    String[] doc7 = {\"id\",\"8\", \"term_s\",\"YYYY\", \"group_s\", \"group1\", \"test_ti\", \"50\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc7));\n\n    String[] doc8 = {\"id\",\"9\", \"term_s\", \"YYYY\", \"test_ti\", \"5000\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc8));\n    String[] doc9 = {\"id\",\"10\", \"term_s\", \"YYYY\", \"test_ti\", \"500\", \"test_tl\", \"1000\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc9));\n\n    String[] doc10 = {\"id\",\"11\", \"term_s\", \"YYYY\", \"group_s\", \"group2\", \"test_ti\", \"4\", \"test_tl\", \"10\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc10));\n    assertU(commit());\n\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=11 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60 id:7^70 id:8^80 id:9^90 id:10^100 id:11^110\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"2\");\n    params.add(\"df\", \"text\");\n\n    assertQ(req(params), \"*[count(//doc)=2]\",\n        \"//result/doc[1]/str[@name='id'][.='8']\",\n        \"//result/doc[2]/str[@name='id'][.='2']\"\n    );\n\n    //Test Elevation\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=11 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60 id:7^70 id:8^80 id:9^90 id:10^100 id:11^110\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"3\");\n    params.add(\"qt\",\"/elevate\");\n    params.add(\"elevateIds\", \"1,4\");\n\n    assertQ(req(params), \"*[count(//doc)=3]\",\n        \"//result/doc[1]/str[@name='id'][.='1']\", //Elevated\n        \"//result/doc[2]/str[@name='id'][.='4']\", //Elevated\n        \"//result/doc[3]/str[@name='id'][.='8']\"); //Boosted during rerank.\n  }\n\n","sourceOld":"  @Test\n  public void testOverRank() throws Exception {\n\n    assertU(delQ(\"*:*\"));\n    assertU(commit());\n\n    //Test the scenario that where we rank more documents then we return.\n\n    String[] doc = {\"id\",\"1\", \"term_s\", \"YYYY\", \"group_s\", \"group1\", \"test_ti\", \"5\", \"test_tl\", \"10\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc));\n    String[] doc1 = {\"id\",\"2\", \"term_s\",\"YYYY\", \"group_s\", \"group1\", \"test_ti\", \"50\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc1));\n\n    String[] doc2 = {\"id\",\"3\", \"term_s\", \"YYYY\", \"test_ti\", \"5000\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc2));\n    String[] doc3 = {\"id\",\"4\", \"term_s\", \"YYYY\", \"test_ti\", \"500\", \"test_tl\", \"1000\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc3));\n\n\n    String[] doc4 = {\"id\",\"5\", \"term_s\", \"YYYY\", \"group_s\", \"group2\", \"test_ti\", \"4\", \"test_tl\", \"10\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc4));\n\n    String[] doc5 = {\"id\",\"6\", \"term_s\",\"YYYY\", \"group_s\", \"group2\", \"test_ti\", \"10\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc5));\n\n    String[] doc6 = {\"id\",\"7\", \"term_s\", \"YYYY\", \"group_s\", \"group1\", \"test_ti\", \"5\", \"test_tl\", \"10\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc6));\n\n\n    String[] doc7 = {\"id\",\"8\", \"term_s\",\"YYYY\", \"group_s\", \"group1\", \"test_ti\", \"50\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc7));\n\n    String[] doc8 = {\"id\",\"9\", \"term_s\", \"YYYY\", \"test_ti\", \"5000\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc8));\n    String[] doc9 = {\"id\",\"10\", \"term_s\", \"YYYY\", \"test_ti\", \"500\", \"test_tl\", \"1000\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc9));\n\n    String[] doc10 = {\"id\",\"11\", \"term_s\", \"YYYY\", \"group_s\", \"group2\", \"test_ti\", \"4\", \"test_tl\", \"10\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc10));\n    assertU(commit());\n\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=11 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60 id:7^70 id:8^80 id:9^90 id:10^100 id:11^110\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"2\");\n    params.add(\"df\", \"text\");\n\n    assertQ(req(params), \"*[count(//doc)=2]\",\n        \"//result/doc[1]/float[@name='id'][.='8.0']\",\n        \"//result/doc[2]/float[@name='id'][.='2.0']\"\n    );\n\n    //Test Elevation\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=11 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60 id:7^70 id:8^80 id:9^90 id:10^100 id:11^110\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"3\");\n    params.add(\"qt\",\"/elevate\");\n    params.add(\"elevateIds\", \"1,4\");\n\n    assertQ(req(params), \"*[count(//doc)=3]\",\n        \"//result/doc[1]/float[@name='id'][.='1.0']\", //Elevated\n        \"//result/doc[2]/float[@name='id'][.='4.0']\", //Elevated\n        \"//result/doc[3]/float[@name='id'][.='8.0']\"); //Boosted during rerank.\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestReRankQParserPlugin#testOverRank().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestReRankQParserPlugin#testOverRank().mjava","sourceNew":"  @Test\n  public void testOverRank() throws Exception {\n\n    assertU(delQ(\"*:*\"));\n    assertU(commit());\n\n    //Test the scenario that where we rank more documents then we return.\n\n    String[] doc = {\"id\",\"1\", \"term_s\", \"YYYY\", \"group_s\", \"group1\", \"test_ti\", \"5\", \"test_tl\", \"10\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc));\n    String[] doc1 = {\"id\",\"2\", \"term_s\",\"YYYY\", \"group_s\", \"group1\", \"test_ti\", \"50\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc1));\n\n    String[] doc2 = {\"id\",\"3\", \"term_s\", \"YYYY\", \"test_ti\", \"5000\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc2));\n    String[] doc3 = {\"id\",\"4\", \"term_s\", \"YYYY\", \"test_ti\", \"500\", \"test_tl\", \"1000\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc3));\n\n\n    String[] doc4 = {\"id\",\"5\", \"term_s\", \"YYYY\", \"group_s\", \"group2\", \"test_ti\", \"4\", \"test_tl\", \"10\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc4));\n\n    String[] doc5 = {\"id\",\"6\", \"term_s\",\"YYYY\", \"group_s\", \"group2\", \"test_ti\", \"10\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc5));\n\n    String[] doc6 = {\"id\",\"7\", \"term_s\", \"YYYY\", \"group_s\", \"group1\", \"test_ti\", \"5\", \"test_tl\", \"10\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc6));\n\n\n    String[] doc7 = {\"id\",\"8\", \"term_s\",\"YYYY\", \"group_s\", \"group1\", \"test_ti\", \"50\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc7));\n\n    String[] doc8 = {\"id\",\"9\", \"term_s\", \"YYYY\", \"test_ti\", \"5000\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc8));\n    String[] doc9 = {\"id\",\"10\", \"term_s\", \"YYYY\", \"test_ti\", \"500\", \"test_tl\", \"1000\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc9));\n\n    String[] doc10 = {\"id\",\"11\", \"term_s\", \"YYYY\", \"group_s\", \"group2\", \"test_ti\", \"4\", \"test_tl\", \"10\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc10));\n    assertU(commit());\n\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=11 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60 id:7^70 id:8^80 id:9^90 id:10^100 id:11^110\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"2\");\n    params.add(\"df\", \"text\");\n\n    assertQ(req(params), \"*[count(//doc)=2]\",\n        \"//result/doc[1]/str[@name='id'][.='8']\",\n        \"//result/doc[2]/str[@name='id'][.='2']\"\n    );\n\n    //Test Elevation\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=11 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60 id:7^70 id:8^80 id:9^90 id:10^100 id:11^110\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"3\");\n    params.add(\"qt\",\"/elevate\");\n    params.add(\"elevateIds\", \"1,4\");\n\n    assertQ(req(params), \"*[count(//doc)=3]\",\n        \"//result/doc[1]/str[@name='id'][.='1']\", //Elevated\n        \"//result/doc[2]/str[@name='id'][.='4']\", //Elevated\n        \"//result/doc[3]/str[@name='id'][.='8']\"); //Boosted during rerank.\n  }\n\n","sourceOld":"  @Test\n  public void testOverRank() throws Exception {\n\n    assertU(delQ(\"*:*\"));\n    assertU(commit());\n\n    //Test the scenario that where we rank more documents then we return.\n\n    String[] doc = {\"id\",\"1\", \"term_s\", \"YYYY\", \"group_s\", \"group1\", \"test_ti\", \"5\", \"test_tl\", \"10\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc));\n    String[] doc1 = {\"id\",\"2\", \"term_s\",\"YYYY\", \"group_s\", \"group1\", \"test_ti\", \"50\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc1));\n\n    String[] doc2 = {\"id\",\"3\", \"term_s\", \"YYYY\", \"test_ti\", \"5000\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc2));\n    String[] doc3 = {\"id\",\"4\", \"term_s\", \"YYYY\", \"test_ti\", \"500\", \"test_tl\", \"1000\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc3));\n\n\n    String[] doc4 = {\"id\",\"5\", \"term_s\", \"YYYY\", \"group_s\", \"group2\", \"test_ti\", \"4\", \"test_tl\", \"10\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc4));\n\n    String[] doc5 = {\"id\",\"6\", \"term_s\",\"YYYY\", \"group_s\", \"group2\", \"test_ti\", \"10\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc5));\n\n    String[] doc6 = {\"id\",\"7\", \"term_s\", \"YYYY\", \"group_s\", \"group1\", \"test_ti\", \"5\", \"test_tl\", \"10\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc6));\n\n\n    String[] doc7 = {\"id\",\"8\", \"term_s\",\"YYYY\", \"group_s\", \"group1\", \"test_ti\", \"50\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc7));\n\n    String[] doc8 = {\"id\",\"9\", \"term_s\", \"YYYY\", \"test_ti\", \"5000\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc8));\n    String[] doc9 = {\"id\",\"10\", \"term_s\", \"YYYY\", \"test_ti\", \"500\", \"test_tl\", \"1000\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc9));\n\n    String[] doc10 = {\"id\",\"11\", \"term_s\", \"YYYY\", \"group_s\", \"group2\", \"test_ti\", \"4\", \"test_tl\", \"10\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc10));\n    assertU(commit());\n\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=11 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60 id:7^70 id:8^80 id:9^90 id:10^100 id:11^110\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"2\");\n    params.add(\"df\", \"text\");\n\n    assertQ(req(params), \"*[count(//doc)=2]\",\n        \"//result/doc[1]/float[@name='id'][.='8.0']\",\n        \"//result/doc[2]/float[@name='id'][.='2.0']\"\n    );\n\n    //Test Elevation\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=11 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60 id:7^70 id:8^80 id:9^90 id:10^100 id:11^110\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"3\");\n    params.add(\"qt\",\"/elevate\");\n    params.add(\"elevateIds\", \"1,4\");\n\n    assertQ(req(params), \"*[count(//doc)=3]\",\n        \"//result/doc[1]/float[@name='id'][.='1.0']\", //Elevated\n        \"//result/doc[2]/float[@name='id'][.='4.0']\", //Elevated\n        \"//result/doc[3]/float[@name='id'][.='8.0']\"); //Boosted during rerank.\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["569aade36ab5d95a5e6b8fca9676ce35657ba6b6","1a144790859eb303122988cd315215ff30f449d2"],"b18553d9fe6c051baf12f8a2afd3ef2b9c7710a4":["ab323901b34dfa96b6871cb6c5fc9cfcce93c2d1"],"a6be80501b3ee38dea6ab1d6439aa049acdfa0ad":["b18553d9fe6c051baf12f8a2afd3ef2b9c7710a4"],"1a144790859eb303122988cd315215ff30f449d2":["569aade36ab5d95a5e6b8fca9676ce35657ba6b6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a71f63026529f3c1f03cfdd664910873ab2369ae":["1a144790859eb303122988cd315215ff30f449d2"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["a6be80501b3ee38dea6ab1d6439aa049acdfa0ad","569aade36ab5d95a5e6b8fca9676ce35657ba6b6"],"569aade36ab5d95a5e6b8fca9676ce35657ba6b6":["a6be80501b3ee38dea6ab1d6439aa049acdfa0ad"],"ab323901b34dfa96b6871cb6c5fc9cfcce93c2d1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"28288370235ed02234a64753cdbf0c6ec096304a":["1a144790859eb303122988cd315215ff30f449d2","a71f63026529f3c1f03cfdd664910873ab2369ae"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["e9017cf144952056066919f1ebc7897ff9bd71b1","a71f63026529f3c1f03cfdd664910873ab2369ae"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"b18553d9fe6c051baf12f8a2afd3ef2b9c7710a4":["a6be80501b3ee38dea6ab1d6439aa049acdfa0ad"],"a6be80501b3ee38dea6ab1d6439aa049acdfa0ad":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","569aade36ab5d95a5e6b8fca9676ce35657ba6b6"],"1a144790859eb303122988cd315215ff30f449d2":["e9017cf144952056066919f1ebc7897ff9bd71b1","a71f63026529f3c1f03cfdd664910873ab2369ae","28288370235ed02234a64753cdbf0c6ec096304a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ab323901b34dfa96b6871cb6c5fc9cfcce93c2d1"],"a71f63026529f3c1f03cfdd664910873ab2369ae":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"569aade36ab5d95a5e6b8fca9676ce35657ba6b6":["e9017cf144952056066919f1ebc7897ff9bd71b1","1a144790859eb303122988cd315215ff30f449d2","1e6acbaae7af722f17204ceccf0f7db5753eccf3"],"ab323901b34dfa96b6871cb6c5fc9cfcce93c2d1":["b18553d9fe6c051baf12f8a2afd3ef2b9c7710a4"],"28288370235ed02234a64753cdbf0c6ec096304a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}