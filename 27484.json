{"path":"solr/core/src/test/org/apache/solr/util/TestRTimerTree#test().mjava","commits":[{"id":"104456f4eeacc857f7e1e6408e1483de8c2bd658","date":1439164522,"type":1,"author":"Ramkumar Aiyengar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/TestRTimerTree#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/util/TestRTimer#test().mjava","sourceNew":"  public void test() {\n    RTimerTree rt = new MockRTimerTree(), subt, st;\n\n    MockTimerImpl.incrementSystemTime(100);\n    assertEquals(100, (int) rt.getTime());\n\n    subt = rt.sub(\"sub1\");\n    MockTimerImpl.incrementSystemTime(50);\n    assertEquals(150, (int) rt.getTime());\n    assertEquals(50, (int) subt.getTime());\n\n    st = subt.sub(\"sub1.1\");\n    st.resume();\n    MockTimerImpl.incrementSystemTime(10);\n    assertEquals(10, (int) st.getTime());\n    st.pause();\n    MockTimerImpl.incrementSystemTime(50);\n    assertEquals(10, (int) st.getTime());\n    st.resume();\n    MockTimerImpl.incrementSystemTime(10);\n    st.pause();\n    subt.stop();\n    rt.stop();\n\n    assertEquals(20, (int) st.getTime());\n    assertEquals(120, (int) subt.getTime());\n    assertEquals(220, (int) rt.getTime());\n\n    NamedList nl = rt.asNamedList();\n    assertEquals(220, ((Double) nl.get(\"time\")).intValue());\n    NamedList sub1nl = (NamedList) nl.get(\"sub1\");\n    assertNotNull(sub1nl);\n    assertEquals(120, ((Double) sub1nl.get(\"time\")).intValue());\n    NamedList sub11nl = (NamedList) sub1nl.get(\"sub1.1\");\n    assertNotNull(sub11nl);\n    assertEquals(20, ((Double) sub11nl.get(\"time\")).intValue());\n  }\n\n","sourceOld":"  public void test() {\n    RTimer rt = new MockRTimer(), subt, st;\n\n    MockTimerImpl.incrementSystemTime(100);\n    assertEquals(100, (int) rt.getTime());\n\n    subt = rt.sub(\"sub1\");\n    MockTimerImpl.incrementSystemTime(50);\n    assertEquals(150, (int) rt.getTime());\n    assertEquals(50, (int) subt.getTime());\n\n    st = subt.sub(\"sub1.1\");\n    st.resume();\n    MockTimerImpl.incrementSystemTime(10);\n    assertEquals(10, (int) st.getTime());\n    st.pause();\n    MockTimerImpl.incrementSystemTime(50);\n    assertEquals(10, (int) st.getTime());\n    st.resume();\n    MockTimerImpl.incrementSystemTime(10);\n    st.pause();\n    subt.stop();\n    rt.stop();\n\n    assertEquals(20, (int) st.getTime());\n    assertEquals(120, (int) subt.getTime());\n    assertEquals(220, (int) rt.getTime());\n\n    NamedList nl = rt.asNamedList();\n    assertEquals(220, ((Double) nl.get(\"time\")).intValue());\n    NamedList sub1nl = (NamedList) nl.get(\"sub1\");\n    assertNotNull(sub1nl);\n    assertEquals(120, ((Double) sub1nl.get(\"time\")).intValue());\n    NamedList sub11nl = (NamedList) sub1nl.get(\"sub1.1\");\n    assertNotNull(sub11nl);\n    assertEquals(20, ((Double) sub11nl.get(\"time\")).intValue());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98520789adb1d5ad05afb4956eca0944a929688","date":1592430701,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/TestRTimerTree#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/util/TestRTimerTree#test().mjava","sourceNew":"  public void test() {\n    RTimerTree rt = new MockRTimerTree(), subt, st;\n\n    MockTimerImpl.incrementSystemTime(100);\n    assertEquals(100, (int) rt.getTime());\n\n    subt = rt.sub(\"sub1\");\n    MockTimerImpl.incrementSystemTime(50);\n    assertEquals(150, (int) rt.getTime());\n    assertEquals(50, (int) subt.getTime());\n\n    st = subt.sub(\"sub1.1\");\n    st.resume();\n    MockTimerImpl.incrementSystemTime(10);\n    assertEquals(10, (int) st.getTime());\n    st.pause();\n    MockTimerImpl.incrementSystemTime(50);\n    assertEquals(10, (int) st.getTime());\n    st.resume();\n    MockTimerImpl.incrementSystemTime(10);\n    st.pause();\n    subt.stop();\n    rt.stop();\n\n    assertEquals(20, (int) st.getTime());\n    assertEquals(120, (int) subt.getTime());\n    assertEquals(220, (int) rt.getTime());\n\n    @SuppressWarnings({\"rawtypes\"})\n    NamedList nl = rt.asNamedList();\n    assertEquals(220, ((Double) nl.get(\"time\")).intValue());\n    @SuppressWarnings({\"rawtypes\"})\n    NamedList sub1nl = (NamedList) nl.get(\"sub1\");\n    assertNotNull(sub1nl);\n    assertEquals(120, ((Double) sub1nl.get(\"time\")).intValue());\n    @SuppressWarnings({\"rawtypes\"})\n    NamedList sub11nl = (NamedList) sub1nl.get(\"sub1.1\");\n    assertNotNull(sub11nl);\n    assertEquals(20, ((Double) sub11nl.get(\"time\")).intValue());\n  }\n\n","sourceOld":"  public void test() {\n    RTimerTree rt = new MockRTimerTree(), subt, st;\n\n    MockTimerImpl.incrementSystemTime(100);\n    assertEquals(100, (int) rt.getTime());\n\n    subt = rt.sub(\"sub1\");\n    MockTimerImpl.incrementSystemTime(50);\n    assertEquals(150, (int) rt.getTime());\n    assertEquals(50, (int) subt.getTime());\n\n    st = subt.sub(\"sub1.1\");\n    st.resume();\n    MockTimerImpl.incrementSystemTime(10);\n    assertEquals(10, (int) st.getTime());\n    st.pause();\n    MockTimerImpl.incrementSystemTime(50);\n    assertEquals(10, (int) st.getTime());\n    st.resume();\n    MockTimerImpl.incrementSystemTime(10);\n    st.pause();\n    subt.stop();\n    rt.stop();\n\n    assertEquals(20, (int) st.getTime());\n    assertEquals(120, (int) subt.getTime());\n    assertEquals(220, (int) rt.getTime());\n\n    NamedList nl = rt.asNamedList();\n    assertEquals(220, ((Double) nl.get(\"time\")).intValue());\n    NamedList sub1nl = (NamedList) nl.get(\"sub1\");\n    assertNotNull(sub1nl);\n    assertEquals(120, ((Double) sub1nl.get(\"time\")).intValue());\n    NamedList sub11nl = (NamedList) sub1nl.get(\"sub1.1\");\n    assertNotNull(sub11nl);\n    assertEquals(20, ((Double) sub11nl.get(\"time\")).intValue());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"104456f4eeacc857f7e1e6408e1483de8c2bd658":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e98520789adb1d5ad05afb4956eca0944a929688"],"e98520789adb1d5ad05afb4956eca0944a929688":["104456f4eeacc857f7e1e6408e1483de8c2bd658"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["104456f4eeacc857f7e1e6408e1483de8c2bd658"],"104456f4eeacc857f7e1e6408e1483de8c2bd658":["e98520789adb1d5ad05afb4956eca0944a929688"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"e98520789adb1d5ad05afb4956eca0944a929688":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}