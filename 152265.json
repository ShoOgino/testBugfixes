{"path":"lucene/src/java/org/apache/lucene/index/SegmentInfo#SegmentInfo(Directory,int,IndexInput,CodecProvider).mjava","commits":[{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentInfo#SegmentInfo(Directory,int,IndexInput,CodecProvider).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Construct a new SegmentInfo instance by reading a\n   * previously saved SegmentInfo from input.\n   *\n   * @param dir directory to load from\n   * @param format format of the segments info file\n   * @param input input handle to read segment info from\n   */\n  SegmentInfo(Directory dir, int format, IndexInput input, CodecProvider codecs) throws IOException {\n    this.dir = dir;\n    name = input.readString();\n    docCount = input.readInt();\n    final String codecName;\n    if (format <= SegmentInfos.FORMAT_LOCKLESS) {\n      delGen = input.readLong();\n      if (format <= SegmentInfos.FORMAT_SHARED_DOC_STORE) {\n        docStoreOffset = input.readInt();\n        if (docStoreOffset != -1) {\n          docStoreSegment = input.readString();\n          docStoreIsCompoundFile = (1 == input.readByte());\n        } else {\n          docStoreSegment = name;\n          docStoreIsCompoundFile = false;\n        }\n      } else {\n        docStoreOffset = -1;\n        docStoreSegment = name;\n        docStoreIsCompoundFile = false;\n      }\n      if (format <= SegmentInfos.FORMAT_SINGLE_NORM_FILE) {\n        hasSingleNormFile = (1 == input.readByte());\n      } else {\n        hasSingleNormFile = false;\n      }\n      int numNormGen = input.readInt();\n      if (numNormGen == NO) {\n        normGen = null;\n      } else {\n        normGen = new long[numNormGen];\n        for(int j=0;j<numNormGen;j++) {\n          normGen[j] = input.readLong();\n        }\n      }\n      isCompoundFile = input.readByte();\n      preLockless = (isCompoundFile == CHECK_DIR);\n      if (format <= SegmentInfos.FORMAT_DEL_COUNT) {\n        delCount = input.readInt();\n        assert delCount <= docCount;\n      } else\n        delCount = -1;\n      if (format <= SegmentInfos.FORMAT_HAS_PROX)\n        hasProx = input.readByte() == 1;\n      else\n        hasProx = true;\n\n      // System.out.println(Thread.currentThread().getName() + \": si.read hasProx=\" + hasProx + \" seg=\" + name);\n      \n      if (format <= SegmentInfos.FORMAT_FLEX_POSTINGS)\n        codecName = input.readString();\n      else\n        codecName = \"PreFlex\";\n\n      if (format <= SegmentInfos.FORMAT_DIAGNOSTICS) {\n        diagnostics = input.readStringStringMap();\n      } else {\n        diagnostics = Collections.<String,String>emptyMap();\n      }\n    } else {\n      delGen = CHECK_DIR;\n      normGen = null;\n      isCompoundFile = CHECK_DIR;\n      preLockless = true;\n      hasSingleNormFile = false;\n      docStoreOffset = -1;\n      docStoreIsCompoundFile = false;\n      docStoreSegment = null;\n      delCount = -1;\n      hasProx = true;\n      codecName = \"PreFlex\";\n      diagnostics = Collections.<String,String>emptyMap();\n    }\n    codec = codecs.lookup(codecName);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6267e1ce56c2eec111425690cd04e251b6f14952","date":1275222352,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentInfo#SegmentInfo(Directory,int,IndexInput,CodecProvider).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentInfo#SegmentInfo(Directory,int,IndexInput,CodecProvider).mjava","sourceNew":"  /**\n   * Construct a new SegmentInfo instance by reading a\n   * previously saved SegmentInfo from input.\n   *\n   * @param dir directory to load from\n   * @param format format of the segments info file\n   * @param input input handle to read segment info from\n   */\n  SegmentInfo(Directory dir, int format, IndexInput input, CodecProvider codecs) throws IOException {\n    this.dir = dir;\n    name = input.readString();\n    docCount = input.readInt();\n    final String codecName;\n    delGen = input.readLong();\n    docStoreOffset = input.readInt();\n    if (docStoreOffset != -1) {\n      docStoreSegment = input.readString();\n      docStoreIsCompoundFile = input.readByte() == YES;\n    } else {\n      docStoreSegment = name;\n      docStoreIsCompoundFile = false;\n    }\n    if (format > SegmentInfos.FORMAT_4_0) {\n      // pre-4.0 indexes write a byte if there is a single norms file\n      assert 1 == input.readByte();\n    }\n    int numNormGen = input.readInt();\n    if (numNormGen == NO) {\n      normGen = null;\n    } else {\n      normGen = new long[numNormGen];\n      for(int j=0;j<numNormGen;j++) {\n        normGen[j] = input.readLong();\n      }\n    }\n    isCompoundFile = input.readByte() == YES;\n\n    delCount = input.readInt();\n    assert delCount <= docCount;\n\n    hasProx = input.readByte() == YES;\n    \n    // System.out.println(Thread.currentThread().getName() + \": si.read hasProx=\" + hasProx + \" seg=\" + name);\n    \n    if (format <= SegmentInfos.FORMAT_4_0)\n      codecName = input.readString();\n    else\n      codecName = \"PreFlex\";\n    \n    diagnostics = input.readStringStringMap();\n    codec = codecs.lookup(codecName);\n  }\n\n","sourceOld":"  /**\n   * Construct a new SegmentInfo instance by reading a\n   * previously saved SegmentInfo from input.\n   *\n   * @param dir directory to load from\n   * @param format format of the segments info file\n   * @param input input handle to read segment info from\n   */\n  SegmentInfo(Directory dir, int format, IndexInput input, CodecProvider codecs) throws IOException {\n    this.dir = dir;\n    name = input.readString();\n    docCount = input.readInt();\n    final String codecName;\n    if (format <= SegmentInfos.FORMAT_LOCKLESS) {\n      delGen = input.readLong();\n      if (format <= SegmentInfos.FORMAT_SHARED_DOC_STORE) {\n        docStoreOffset = input.readInt();\n        if (docStoreOffset != -1) {\n          docStoreSegment = input.readString();\n          docStoreIsCompoundFile = (1 == input.readByte());\n        } else {\n          docStoreSegment = name;\n          docStoreIsCompoundFile = false;\n        }\n      } else {\n        docStoreOffset = -1;\n        docStoreSegment = name;\n        docStoreIsCompoundFile = false;\n      }\n      if (format <= SegmentInfos.FORMAT_SINGLE_NORM_FILE) {\n        hasSingleNormFile = (1 == input.readByte());\n      } else {\n        hasSingleNormFile = false;\n      }\n      int numNormGen = input.readInt();\n      if (numNormGen == NO) {\n        normGen = null;\n      } else {\n        normGen = new long[numNormGen];\n        for(int j=0;j<numNormGen;j++) {\n          normGen[j] = input.readLong();\n        }\n      }\n      isCompoundFile = input.readByte();\n      preLockless = (isCompoundFile == CHECK_DIR);\n      if (format <= SegmentInfos.FORMAT_DEL_COUNT) {\n        delCount = input.readInt();\n        assert delCount <= docCount;\n      } else\n        delCount = -1;\n      if (format <= SegmentInfos.FORMAT_HAS_PROX)\n        hasProx = input.readByte() == 1;\n      else\n        hasProx = true;\n\n      // System.out.println(Thread.currentThread().getName() + \": si.read hasProx=\" + hasProx + \" seg=\" + name);\n      \n      if (format <= SegmentInfos.FORMAT_FLEX_POSTINGS)\n        codecName = input.readString();\n      else\n        codecName = \"PreFlex\";\n\n      if (format <= SegmentInfos.FORMAT_DIAGNOSTICS) {\n        diagnostics = input.readStringStringMap();\n      } else {\n        diagnostics = Collections.<String,String>emptyMap();\n      }\n    } else {\n      delGen = CHECK_DIR;\n      normGen = null;\n      isCompoundFile = CHECK_DIR;\n      preLockless = true;\n      hasSingleNormFile = false;\n      docStoreOffset = -1;\n      docStoreIsCompoundFile = false;\n      docStoreSegment = null;\n      delCount = -1;\n      hasProx = true;\n      codecName = \"PreFlex\";\n      diagnostics = Collections.<String,String>emptyMap();\n    }\n    codec = codecs.lookup(codecName);\n  }\n\n","bugFix":null,"bugIntro":["358fe29f788dd69d23f5202c98fea32df2b7d49d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"358fe29f788dd69d23f5202c98fea32df2b7d49d","date":1276339655,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentInfo#SegmentInfo(Directory,int,IndexInput,CodecProvider).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentInfo#SegmentInfo(Directory,int,IndexInput,CodecProvider).mjava","sourceNew":"  /**\n   * Construct a new SegmentInfo instance by reading a\n   * previously saved SegmentInfo from input.\n   *\n   * @param dir directory to load from\n   * @param format format of the segments info file\n   * @param input input handle to read segment info from\n   */\n  SegmentInfo(Directory dir, int format, IndexInput input, CodecProvider codecs) throws IOException {\n    this.dir = dir;\n    name = input.readString();\n    docCount = input.readInt();\n    final String codecName;\n    delGen = input.readLong();\n    docStoreOffset = input.readInt();\n    if (docStoreOffset != -1) {\n      docStoreSegment = input.readString();\n      docStoreIsCompoundFile = input.readByte() == YES;\n    } else {\n      docStoreSegment = name;\n      docStoreIsCompoundFile = false;\n    }\n    if (format > SegmentInfos.FORMAT_4_0) {\n      // pre-4.0 indexes write a byte if there is a single norms file\n      byte b = input.readByte();\n      assert 1 == b;\n    }\n    int numNormGen = input.readInt();\n    if (numNormGen == NO) {\n      normGen = null;\n    } else {\n      normGen = new long[numNormGen];\n      for(int j=0;j<numNormGen;j++) {\n        normGen[j] = input.readLong();\n      }\n    }\n    isCompoundFile = input.readByte() == YES;\n\n    delCount = input.readInt();\n    assert delCount <= docCount;\n\n    hasProx = input.readByte() == YES;\n    \n    // System.out.println(Thread.currentThread().getName() + \": si.read hasProx=\" + hasProx + \" seg=\" + name);\n    \n    if (format <= SegmentInfos.FORMAT_4_0)\n      codecName = input.readString();\n    else\n      codecName = \"PreFlex\";\n    \n    diagnostics = input.readStringStringMap();\n    codec = codecs.lookup(codecName);\n  }\n\n","sourceOld":"  /**\n   * Construct a new SegmentInfo instance by reading a\n   * previously saved SegmentInfo from input.\n   *\n   * @param dir directory to load from\n   * @param format format of the segments info file\n   * @param input input handle to read segment info from\n   */\n  SegmentInfo(Directory dir, int format, IndexInput input, CodecProvider codecs) throws IOException {\n    this.dir = dir;\n    name = input.readString();\n    docCount = input.readInt();\n    final String codecName;\n    delGen = input.readLong();\n    docStoreOffset = input.readInt();\n    if (docStoreOffset != -1) {\n      docStoreSegment = input.readString();\n      docStoreIsCompoundFile = input.readByte() == YES;\n    } else {\n      docStoreSegment = name;\n      docStoreIsCompoundFile = false;\n    }\n    if (format > SegmentInfos.FORMAT_4_0) {\n      // pre-4.0 indexes write a byte if there is a single norms file\n      assert 1 == input.readByte();\n    }\n    int numNormGen = input.readInt();\n    if (numNormGen == NO) {\n      normGen = null;\n    } else {\n      normGen = new long[numNormGen];\n      for(int j=0;j<numNormGen;j++) {\n        normGen[j] = input.readLong();\n      }\n    }\n    isCompoundFile = input.readByte() == YES;\n\n    delCount = input.readInt();\n    assert delCount <= docCount;\n\n    hasProx = input.readByte() == YES;\n    \n    // System.out.println(Thread.currentThread().getName() + \": si.read hasProx=\" + hasProx + \" seg=\" + name);\n    \n    if (format <= SegmentInfos.FORMAT_4_0)\n      codecName = input.readString();\n    else\n      codecName = \"PreFlex\";\n    \n    diagnostics = input.readStringStringMap();\n    codec = codecs.lookup(codecName);\n  }\n\n","bugFix":["6267e1ce56c2eec111425690cd04e251b6f14952"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6066dbe072ec5334ff5824f474e9d3abd1620fb7","date":1278709584,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentInfo#SegmentInfo(Directory,int,IndexInput,CodecProvider).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentInfo#SegmentInfo(Directory,int,IndexInput,CodecProvider).mjava","sourceNew":"  /**\n   * Construct a new SegmentInfo instance by reading a\n   * previously saved SegmentInfo from input.\n   * <p>Note: this is public only to allow access from\n   * the codecs package.</p>\n   *\n   * @param dir directory to load from\n   * @param format format of the segments info file\n   * @param input input handle to read segment info from\n   */\n  public SegmentInfo(Directory dir, int format, IndexInput input, CodecProvider codecs) throws IOException {\n    this.dir = dir;\n    name = input.readString();\n    docCount = input.readInt();\n    final String codecName;\n    delGen = input.readLong();\n    docStoreOffset = input.readInt();\n    if (docStoreOffset != -1) {\n      docStoreSegment = input.readString();\n      docStoreIsCompoundFile = input.readByte() == YES;\n    } else {\n      docStoreSegment = name;\n      docStoreIsCompoundFile = false;\n    }\n    if (format > SegmentInfos.FORMAT_4_0) {\n      // pre-4.0 indexes write a byte if there is a single norms file\n      byte b = input.readByte();\n      assert 1 == b;\n    }\n    int numNormGen = input.readInt();\n    if (numNormGen == NO) {\n      normGen = null;\n    } else {\n      normGen = new long[numNormGen];\n      for(int j=0;j<numNormGen;j++) {\n        normGen[j] = input.readLong();\n      }\n    }\n    isCompoundFile = input.readByte() == YES;\n\n    delCount = input.readInt();\n    assert delCount <= docCount;\n\n    hasProx = input.readByte() == YES;\n    \n    // System.out.println(Thread.currentThread().getName() + \": si.read hasProx=\" + hasProx + \" seg=\" + name);\n    \n    if (format <= SegmentInfos.FORMAT_4_0)\n      codecName = input.readString();\n    else\n      codecName = \"PreFlex\";\n    \n    diagnostics = input.readStringStringMap();\n    codec = codecs.lookup(codecName);\n  }\n\n","sourceOld":"  /**\n   * Construct a new SegmentInfo instance by reading a\n   * previously saved SegmentInfo from input.\n   *\n   * @param dir directory to load from\n   * @param format format of the segments info file\n   * @param input input handle to read segment info from\n   */\n  SegmentInfo(Directory dir, int format, IndexInput input, CodecProvider codecs) throws IOException {\n    this.dir = dir;\n    name = input.readString();\n    docCount = input.readInt();\n    final String codecName;\n    delGen = input.readLong();\n    docStoreOffset = input.readInt();\n    if (docStoreOffset != -1) {\n      docStoreSegment = input.readString();\n      docStoreIsCompoundFile = input.readByte() == YES;\n    } else {\n      docStoreSegment = name;\n      docStoreIsCompoundFile = false;\n    }\n    if (format > SegmentInfos.FORMAT_4_0) {\n      // pre-4.0 indexes write a byte if there is a single norms file\n      byte b = input.readByte();\n      assert 1 == b;\n    }\n    int numNormGen = input.readInt();\n    if (numNormGen == NO) {\n      normGen = null;\n    } else {\n      normGen = new long[numNormGen];\n      for(int j=0;j<numNormGen;j++) {\n        normGen[j] = input.readLong();\n      }\n    }\n    isCompoundFile = input.readByte() == YES;\n\n    delCount = input.readInt();\n    assert delCount <= docCount;\n\n    hasProx = input.readByte() == YES;\n    \n    // System.out.println(Thread.currentThread().getName() + \": si.read hasProx=\" + hasProx + \" seg=\" + name);\n    \n    if (format <= SegmentInfos.FORMAT_4_0)\n      codecName = input.readString();\n    else\n      codecName = \"PreFlex\";\n    \n    diagnostics = input.readStringStringMap();\n    codec = codecs.lookup(codecName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0cd8367c3d48e4b63dee1895a261d4986c716bbb","date":1279637747,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentInfo#SegmentInfo(Directory,int,IndexInput,CodecProvider).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentInfo#SegmentInfo(Directory,int,IndexInput,CodecProvider).mjava","sourceNew":"  /**\n   * Construct a new SegmentInfo instance by reading a\n   * previously saved SegmentInfo from input.\n   * <p>Note: this is public only to allow access from\n   * the codecs package.</p>\n   *\n   * @param dir directory to load from\n   * @param format format of the segments info file\n   * @param input input handle to read segment info from\n   */\n  public SegmentInfo(Directory dir, int format, IndexInput input, CodecProvider codecs) throws IOException {\n    this.dir = dir;\n    name = input.readString();\n    docCount = input.readInt();\n    final String codecName;\n    delGen = input.readLong();\n    docStoreOffset = input.readInt();\n    if (docStoreOffset != -1) {\n      docStoreSegment = input.readString();\n      docStoreIsCompoundFile = input.readByte() == YES;\n    } else {\n      docStoreSegment = name;\n      docStoreIsCompoundFile = false;\n    }\n    if (format > DefaultSegmentInfosWriter.FORMAT_4_0) {\n      // pre-4.0 indexes write a byte if there is a single norms file\n      byte b = input.readByte();\n      assert 1 == b;\n    }\n    int numNormGen = input.readInt();\n    if (numNormGen == NO) {\n      normGen = null;\n    } else {\n      normGen = new long[numNormGen];\n      for(int j=0;j<numNormGen;j++) {\n        normGen[j] = input.readLong();\n      }\n    }\n    isCompoundFile = input.readByte() == YES;\n\n    delCount = input.readInt();\n    assert delCount <= docCount;\n\n    hasProx = input.readByte() == YES;\n    \n    // System.out.println(Thread.currentThread().getName() + \": si.read hasProx=\" + hasProx + \" seg=\" + name);\n    \n    if (format <= DefaultSegmentInfosWriter.FORMAT_4_0)\n      codecName = input.readString();\n    else\n      codecName = \"PreFlex\";\n    \n    diagnostics = input.readStringStringMap();\n    codec = codecs.lookup(codecName);\n  }\n\n","sourceOld":"  /**\n   * Construct a new SegmentInfo instance by reading a\n   * previously saved SegmentInfo from input.\n   * <p>Note: this is public only to allow access from\n   * the codecs package.</p>\n   *\n   * @param dir directory to load from\n   * @param format format of the segments info file\n   * @param input input handle to read segment info from\n   */\n  public SegmentInfo(Directory dir, int format, IndexInput input, CodecProvider codecs) throws IOException {\n    this.dir = dir;\n    name = input.readString();\n    docCount = input.readInt();\n    final String codecName;\n    delGen = input.readLong();\n    docStoreOffset = input.readInt();\n    if (docStoreOffset != -1) {\n      docStoreSegment = input.readString();\n      docStoreIsCompoundFile = input.readByte() == YES;\n    } else {\n      docStoreSegment = name;\n      docStoreIsCompoundFile = false;\n    }\n    if (format > SegmentInfos.FORMAT_4_0) {\n      // pre-4.0 indexes write a byte if there is a single norms file\n      byte b = input.readByte();\n      assert 1 == b;\n    }\n    int numNormGen = input.readInt();\n    if (numNormGen == NO) {\n      normGen = null;\n    } else {\n      normGen = new long[numNormGen];\n      for(int j=0;j<numNormGen;j++) {\n        normGen[j] = input.readLong();\n      }\n    }\n    isCompoundFile = input.readByte() == YES;\n\n    delCount = input.readInt();\n    assert delCount <= docCount;\n\n    hasProx = input.readByte() == YES;\n    \n    // System.out.println(Thread.currentThread().getName() + \": si.read hasProx=\" + hasProx + \" seg=\" + name);\n    \n    if (format <= SegmentInfos.FORMAT_4_0)\n      codecName = input.readString();\n    else\n      codecName = \"PreFlex\";\n    \n    diagnostics = input.readStringStringMap();\n    codec = codecs.lookup(codecName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentInfo#SegmentInfo(Directory,int,IndexInput,CodecProvider).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentInfo#SegmentInfo(Directory,int,IndexInput,CodecProvider).mjava","sourceNew":"  /**\n   * Construct a new SegmentInfo instance by reading a\n   * previously saved SegmentInfo from input.\n   * <p>Note: this is public only to allow access from\n   * the codecs package.</p>\n   *\n   * @param dir directory to load from\n   * @param format format of the segments info file\n   * @param input input handle to read segment info from\n   */\n  public SegmentInfo(Directory dir, int format, IndexInput input, CodecProvider codecs) throws IOException {\n    this.dir = dir;\n    name = input.readString();\n    docCount = input.readInt();\n    final String codecName;\n    delGen = input.readLong();\n    docStoreOffset = input.readInt();\n    if (docStoreOffset != -1) {\n      docStoreSegment = input.readString();\n      docStoreIsCompoundFile = input.readByte() == YES;\n    } else {\n      docStoreSegment = name;\n      docStoreIsCompoundFile = false;\n    }\n    if (format > DefaultSegmentInfosWriter.FORMAT_4_0) {\n      // pre-4.0 indexes write a byte if there is a single norms file\n      byte b = input.readByte();\n      assert 1 == b;\n    }\n    int numNormGen = input.readInt();\n    if (numNormGen == NO) {\n      normGen = null;\n    } else {\n      normGen = new long[numNormGen];\n      for(int j=0;j<numNormGen;j++) {\n        normGen[j] = input.readLong();\n      }\n    }\n    isCompoundFile = input.readByte() == YES;\n\n    delCount = input.readInt();\n    assert delCount <= docCount;\n\n    hasProx = input.readByte() == YES;\n    \n    // System.out.println(Thread.currentThread().getName() + \": si.read hasProx=\" + hasProx + \" seg=\" + name);\n    \n    if (format <= DefaultSegmentInfosWriter.FORMAT_4_0)\n      codecName = input.readString();\n    else\n      codecName = \"PreFlex\";\n    \n    diagnostics = input.readStringStringMap();\n    codec = codecs.lookup(codecName);\n  }\n\n","sourceOld":"  /**\n   * Construct a new SegmentInfo instance by reading a\n   * previously saved SegmentInfo from input.\n   *\n   * @param dir directory to load from\n   * @param format format of the segments info file\n   * @param input input handle to read segment info from\n   */\n  SegmentInfo(Directory dir, int format, IndexInput input, CodecProvider codecs) throws IOException {\n    this.dir = dir;\n    name = input.readString();\n    docCount = input.readInt();\n    final String codecName;\n    delGen = input.readLong();\n    docStoreOffset = input.readInt();\n    if (docStoreOffset != -1) {\n      docStoreSegment = input.readString();\n      docStoreIsCompoundFile = input.readByte() == YES;\n    } else {\n      docStoreSegment = name;\n      docStoreIsCompoundFile = false;\n    }\n    if (format > SegmentInfos.FORMAT_4_0) {\n      // pre-4.0 indexes write a byte if there is a single norms file\n      assert 1 == input.readByte();\n    }\n    int numNormGen = input.readInt();\n    if (numNormGen == NO) {\n      normGen = null;\n    } else {\n      normGen = new long[numNormGen];\n      for(int j=0;j<numNormGen;j++) {\n        normGen[j] = input.readLong();\n      }\n    }\n    isCompoundFile = input.readByte() == YES;\n\n    delCount = input.readInt();\n    assert delCount <= docCount;\n\n    hasProx = input.readByte() == YES;\n    \n    // System.out.println(Thread.currentThread().getName() + \": si.read hasProx=\" + hasProx + \" seg=\" + name);\n    \n    if (format <= SegmentInfos.FORMAT_4_0)\n      codecName = input.readString();\n    else\n      codecName = \"PreFlex\";\n    \n    diagnostics = input.readStringStringMap();\n    codec = codecs.lookup(codecName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"833a7987bc1c94455fde83e3311f72bddedcfb93","date":1279951470,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentInfo#SegmentInfo(Directory,int,IndexInput,CodecProvider).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentInfo#SegmentInfo(Directory,int,IndexInput,CodecProvider).mjava","sourceNew":"  /**\n   * Construct a new SegmentInfo instance by reading a\n   * previously saved SegmentInfo from input.\n   * <p>Note: this is public only to allow access from\n   * the codecs package.</p>\n   *\n   * @param dir directory to load from\n   * @param format format of the segments info file\n   * @param input input handle to read segment info from\n   */\n  public SegmentInfo(Directory dir, int format, IndexInput input, CodecProvider codecs) throws IOException {\n    this.dir = dir;\n    name = input.readString();\n    docCount = input.readInt();\n    final String codecName;\n    delGen = input.readLong();\n    docStoreOffset = input.readInt();\n    if (docStoreOffset != -1) {\n      docStoreSegment = input.readString();\n      docStoreIsCompoundFile = input.readByte() == YES;\n    } else {\n      docStoreSegment = name;\n      docStoreIsCompoundFile = false;\n    }\n\n    if (format > DefaultSegmentInfosWriter.FORMAT_4_0) {\n      // pre-4.0 indexes write a byte if there is a single norms file\n      byte b = input.readByte();\n      assert 1 == b;\n    }\n\n    int numNormGen = input.readInt();\n    if (numNormGen == NO) {\n      normGen = null;\n    } else {\n      normGen = new long[numNormGen];\n      for(int j=0;j<numNormGen;j++) {\n        normGen[j] = input.readLong();\n      }\n    }\n    isCompoundFile = input.readByte() == YES;\n\n    delCount = input.readInt();\n    assert delCount <= docCount;\n\n    hasProx = input.readByte() == YES;\n    \n    // System.out.println(Thread.currentThread().getName() + \": si.read hasProx=\" + hasProx + \" seg=\" + name);\n    \n    if (format <= DefaultSegmentInfosWriter.FORMAT_4_0)\n      codecName = input.readString();\n    else\n      codecName = \"PreFlex\";\n    \n    diagnostics = input.readStringStringMap();\n    codec = codecs.lookup(codecName);\n  }\n\n","sourceOld":"  /**\n   * Construct a new SegmentInfo instance by reading a\n   * previously saved SegmentInfo from input.\n   * <p>Note: this is public only to allow access from\n   * the codecs package.</p>\n   *\n   * @param dir directory to load from\n   * @param format format of the segments info file\n   * @param input input handle to read segment info from\n   */\n  public SegmentInfo(Directory dir, int format, IndexInput input, CodecProvider codecs) throws IOException {\n    this.dir = dir;\n    name = input.readString();\n    docCount = input.readInt();\n    final String codecName;\n    delGen = input.readLong();\n    docStoreOffset = input.readInt();\n    if (docStoreOffset != -1) {\n      docStoreSegment = input.readString();\n      docStoreIsCompoundFile = input.readByte() == YES;\n    } else {\n      docStoreSegment = name;\n      docStoreIsCompoundFile = false;\n    }\n    if (format > DefaultSegmentInfosWriter.FORMAT_4_0) {\n      // pre-4.0 indexes write a byte if there is a single norms file\n      byte b = input.readByte();\n      assert 1 == b;\n    }\n    int numNormGen = input.readInt();\n    if (numNormGen == NO) {\n      normGen = null;\n    } else {\n      normGen = new long[numNormGen];\n      for(int j=0;j<numNormGen;j++) {\n        normGen[j] = input.readLong();\n      }\n    }\n    isCompoundFile = input.readByte() == YES;\n\n    delCount = input.readInt();\n    assert delCount <= docCount;\n\n    hasProx = input.readByte() == YES;\n    \n    // System.out.println(Thread.currentThread().getName() + \": si.read hasProx=\" + hasProx + \" seg=\" + name);\n    \n    if (format <= DefaultSegmentInfosWriter.FORMAT_4_0)\n      codecName = input.readString();\n    else\n      codecName = \"PreFlex\";\n    \n    diagnostics = input.readStringStringMap();\n    codec = codecs.lookup(codecName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a493e6d0c3ad86bd55c0a1360d110142e948f2bd","date":1289406991,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentInfo#SegmentInfo(Directory,int,IndexInput,CodecProvider).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentInfo#SegmentInfo(Directory,int,IndexInput,CodecProvider).mjava","sourceNew":"  /**\n   * Construct a new SegmentInfo instance by reading a\n   * previously saved SegmentInfo from input.\n   * <p>Note: this is public only to allow access from\n   * the codecs package.</p>\n   *\n   * @param dir directory to load from\n   * @param format format of the segments info file\n   * @param input input handle to read segment info from\n   */\n  public SegmentInfo(Directory dir, int format, IndexInput input, CodecProvider codecs) throws IOException {\n    this.dir = dir;\n    name = input.readString();\n    docCount = input.readInt();\n    delGen = input.readLong();\n    docStoreOffset = input.readInt();\n    if (docStoreOffset != -1) {\n      docStoreSegment = input.readString();\n      docStoreIsCompoundFile = input.readByte() == YES;\n    } else {\n      docStoreSegment = name;\n      docStoreIsCompoundFile = false;\n    }\n    if (format > DefaultSegmentInfosWriter.FORMAT_4_0) {\n      // pre-4.0 indexes write a byte if there is a single norms file\n      byte b = input.readByte();\n      assert 1 == b;\n    }\n    int numNormGen = input.readInt();\n    if (numNormGen == NO) {\n      normGen = null;\n    } else {\n      normGen = new long[numNormGen];\n      for(int j=0;j<numNormGen;j++) {\n        normGen[j] = input.readLong();\n      }\n    }\n    isCompoundFile = input.readByte() == YES;\n\n    delCount = input.readInt();\n    assert delCount <= docCount;\n\n    hasProx = input.readByte() == YES;\n    \n    // System.out.println(Thread.currentThread().getName() + \": si.read hasProx=\" + hasProx + \" seg=\" + name);\n    segmentCodecs = new SegmentCodecs(codecs);\n    if (format <= DefaultSegmentInfosWriter.FORMAT_4_0) {\n      segmentCodecs.read(input);\n    } else {\n      // codec ID on FieldInfo is 0 so it will simply use the first codec available\n      // TODO what todo if preflex is not available in the provider? register it or fail?\n      segmentCodecs.codecs = new Codec[] { codecs.lookup(\"PreFlex\")};\n    }\n    diagnostics = input.readStringStringMap();\n  }\n\n","sourceOld":"  /**\n   * Construct a new SegmentInfo instance by reading a\n   * previously saved SegmentInfo from input.\n   * <p>Note: this is public only to allow access from\n   * the codecs package.</p>\n   *\n   * @param dir directory to load from\n   * @param format format of the segments info file\n   * @param input input handle to read segment info from\n   */\n  public SegmentInfo(Directory dir, int format, IndexInput input, CodecProvider codecs) throws IOException {\n    this.dir = dir;\n    name = input.readString();\n    docCount = input.readInt();\n    final String codecName;\n    delGen = input.readLong();\n    docStoreOffset = input.readInt();\n    if (docStoreOffset != -1) {\n      docStoreSegment = input.readString();\n      docStoreIsCompoundFile = input.readByte() == YES;\n    } else {\n      docStoreSegment = name;\n      docStoreIsCompoundFile = false;\n    }\n    if (format > DefaultSegmentInfosWriter.FORMAT_4_0) {\n      // pre-4.0 indexes write a byte if there is a single norms file\n      byte b = input.readByte();\n      assert 1 == b;\n    }\n    int numNormGen = input.readInt();\n    if (numNormGen == NO) {\n      normGen = null;\n    } else {\n      normGen = new long[numNormGen];\n      for(int j=0;j<numNormGen;j++) {\n        normGen[j] = input.readLong();\n      }\n    }\n    isCompoundFile = input.readByte() == YES;\n\n    delCount = input.readInt();\n    assert delCount <= docCount;\n\n    hasProx = input.readByte() == YES;\n    \n    // System.out.println(Thread.currentThread().getName() + \": si.read hasProx=\" + hasProx + \" seg=\" + name);\n    \n    if (format <= DefaultSegmentInfosWriter.FORMAT_4_0)\n      codecName = input.readString();\n    else\n      codecName = \"PreFlex\";\n    \n    diagnostics = input.readStringStringMap();\n    codec = codecs.lookup(codecName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85a883878c0af761245ab048babc63d099f835f3","date":1289553330,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentInfo#SegmentInfo(Directory,int,IndexInput,CodecProvider).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentInfo#SegmentInfo(Directory,int,IndexInput,CodecProvider).mjava","sourceNew":"  /**\n   * Construct a new SegmentInfo instance by reading a\n   * previously saved SegmentInfo from input.\n   * <p>Note: this is public only to allow access from\n   * the codecs package.</p>\n   *\n   * @param dir directory to load from\n   * @param format format of the segments info file\n   * @param input input handle to read segment info from\n   */\n  public SegmentInfo(Directory dir, int format, IndexInput input, CodecProvider codecs) throws IOException {\n    this.dir = dir;\n    name = input.readString();\n    docCount = input.readInt();\n    delGen = input.readLong();\n    docStoreOffset = input.readInt();\n    if (docStoreOffset != -1) {\n      docStoreSegment = input.readString();\n      docStoreIsCompoundFile = input.readByte() == YES;\n    } else {\n      docStoreSegment = name;\n      docStoreIsCompoundFile = false;\n    }\n    if (format > DefaultSegmentInfosWriter.FORMAT_4_0) {\n      // pre-4.0 indexes write a byte if there is a single norms file\n      byte b = input.readByte();\n      assert 1 == b;\n    }\n    int numNormGen = input.readInt();\n    if (numNormGen == NO) {\n      normGen = null;\n    } else {\n      normGen = new long[numNormGen];\n      for(int j=0;j<numNormGen;j++) {\n        normGen[j] = input.readLong();\n      }\n    }\n    isCompoundFile = input.readByte() == YES;\n\n    delCount = input.readInt();\n    assert delCount <= docCount;\n\n    hasProx = input.readByte() == YES;\n    \n    // System.out.println(Thread.currentThread().getName() + \": si.read hasProx=\" + hasProx + \" seg=\" + name);\n    segmentCodecs = new SegmentCodecs(codecs);\n    if (format <= DefaultSegmentInfosWriter.FORMAT_4_0) {\n      segmentCodecs.read(input);\n    } else {\n      // codec ID on FieldInfo is 0 so it will simply use the first codec available\n      // TODO what todo if preflex is not available in the provider? register it or fail?\n      segmentCodecs.codecs = new Codec[] { codecs.lookup(\"PreFlex\")};\n    }\n    diagnostics = input.readStringStringMap();\n  }\n\n","sourceOld":"  /**\n   * Construct a new SegmentInfo instance by reading a\n   * previously saved SegmentInfo from input.\n   * <p>Note: this is public only to allow access from\n   * the codecs package.</p>\n   *\n   * @param dir directory to load from\n   * @param format format of the segments info file\n   * @param input input handle to read segment info from\n   */\n  public SegmentInfo(Directory dir, int format, IndexInput input, CodecProvider codecs) throws IOException {\n    this.dir = dir;\n    name = input.readString();\n    docCount = input.readInt();\n    final String codecName;\n    delGen = input.readLong();\n    docStoreOffset = input.readInt();\n    if (docStoreOffset != -1) {\n      docStoreSegment = input.readString();\n      docStoreIsCompoundFile = input.readByte() == YES;\n    } else {\n      docStoreSegment = name;\n      docStoreIsCompoundFile = false;\n    }\n    if (format > DefaultSegmentInfosWriter.FORMAT_4_0) {\n      // pre-4.0 indexes write a byte if there is a single norms file\n      byte b = input.readByte();\n      assert 1 == b;\n    }\n    int numNormGen = input.readInt();\n    if (numNormGen == NO) {\n      normGen = null;\n    } else {\n      normGen = new long[numNormGen];\n      for(int j=0;j<numNormGen;j++) {\n        normGen[j] = input.readLong();\n      }\n    }\n    isCompoundFile = input.readByte() == YES;\n\n    delCount = input.readInt();\n    assert delCount <= docCount;\n\n    hasProx = input.readByte() == YES;\n    \n    // System.out.println(Thread.currentThread().getName() + \": si.read hasProx=\" + hasProx + \" seg=\" + name);\n    \n    if (format <= DefaultSegmentInfosWriter.FORMAT_4_0)\n      codecName = input.readString();\n    else\n      codecName = \"PreFlex\";\n    \n    diagnostics = input.readStringStringMap();\n    codec = codecs.lookup(codecName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e1cbd7e289dc1243c7a59e1a83d078163a147fe","date":1292268032,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentInfo#SegmentInfo(Directory,int,IndexInput,CodecProvider).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentInfo#SegmentInfo(Directory,int,IndexInput,CodecProvider).mjava","sourceNew":"  /**\n   * Construct a new SegmentInfo instance by reading a\n   * previously saved SegmentInfo from input.\n   * <p>Note: this is public only to allow access from\n   * the codecs package.</p>\n   *\n   * @param dir directory to load from\n   * @param format format of the segments info file\n   * @param input input handle to read segment info from\n   */\n  public SegmentInfo(Directory dir, int format, IndexInput input, CodecProvider codecs) throws IOException {\n    this.dir = dir;\n    name = input.readString();\n    docCount = input.readInt();\n    delGen = input.readLong();\n    docStoreOffset = input.readInt();\n    if (docStoreOffset != -1) {\n      docStoreSegment = input.readString();\n      docStoreIsCompoundFile = input.readByte() == YES;\n    } else {\n      docStoreSegment = name;\n      docStoreIsCompoundFile = false;\n    }\n    if (format > DefaultSegmentInfosWriter.FORMAT_4_0) {\n      // pre-4.0 indexes write a byte if there is a single norms file\n      byte b = input.readByte();\n      assert 1 == b;\n    }\n    int numNormGen = input.readInt();\n    if (numNormGen == NO) {\n      normGen = null;\n    } else {\n      normGen = new long[numNormGen];\n      for(int j=0;j<numNormGen;j++) {\n        normGen[j] = input.readLong();\n      }\n    }\n    isCompoundFile = input.readByte() == YES;\n\n    delCount = input.readInt();\n    assert delCount <= docCount;\n\n    hasProx = input.readByte() == YES;\n    \n    // System.out.println(Thread.currentThread().getName() + \": si.read hasProx=\" + hasProx + \" seg=\" + name);\n    segmentCodecs = new SegmentCodecs(codecs);\n    if (format <= DefaultSegmentInfosWriter.FORMAT_4_0) {\n      segmentCodecs.read(input);\n    } else {\n      // codec ID on FieldInfo is 0 so it will simply use the first codec available\n      // TODO what todo if preflex is not available in the provider? register it or fail?\n      segmentCodecs.codecs = new Codec[] { codecs.lookup(\"PreFlex\")};\n    }\n    diagnostics = input.readStringStringMap();\n    \n    if (format <= DefaultSegmentInfosWriter.FORMAT_HAS_VECTORS) {\n      hasVectors = input.readByte();\n    } else {\n      hasVectors = 2;\n    }\n  }\n\n","sourceOld":"  /**\n   * Construct a new SegmentInfo instance by reading a\n   * previously saved SegmentInfo from input.\n   * <p>Note: this is public only to allow access from\n   * the codecs package.</p>\n   *\n   * @param dir directory to load from\n   * @param format format of the segments info file\n   * @param input input handle to read segment info from\n   */\n  public SegmentInfo(Directory dir, int format, IndexInput input, CodecProvider codecs) throws IOException {\n    this.dir = dir;\n    name = input.readString();\n    docCount = input.readInt();\n    delGen = input.readLong();\n    docStoreOffset = input.readInt();\n    if (docStoreOffset != -1) {\n      docStoreSegment = input.readString();\n      docStoreIsCompoundFile = input.readByte() == YES;\n    } else {\n      docStoreSegment = name;\n      docStoreIsCompoundFile = false;\n    }\n    if (format > DefaultSegmentInfosWriter.FORMAT_4_0) {\n      // pre-4.0 indexes write a byte if there is a single norms file\n      byte b = input.readByte();\n      assert 1 == b;\n    }\n    int numNormGen = input.readInt();\n    if (numNormGen == NO) {\n      normGen = null;\n    } else {\n      normGen = new long[numNormGen];\n      for(int j=0;j<numNormGen;j++) {\n        normGen[j] = input.readLong();\n      }\n    }\n    isCompoundFile = input.readByte() == YES;\n\n    delCount = input.readInt();\n    assert delCount <= docCount;\n\n    hasProx = input.readByte() == YES;\n    \n    // System.out.println(Thread.currentThread().getName() + \": si.read hasProx=\" + hasProx + \" seg=\" + name);\n    segmentCodecs = new SegmentCodecs(codecs);\n    if (format <= DefaultSegmentInfosWriter.FORMAT_4_0) {\n      segmentCodecs.read(input);\n    } else {\n      // codec ID on FieldInfo is 0 so it will simply use the first codec available\n      // TODO what todo if preflex is not available in the provider? register it or fail?\n      segmentCodecs.codecs = new Codec[] { codecs.lookup(\"PreFlex\")};\n    }\n    diagnostics = input.readStringStringMap();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5dd55ef4d8a74ff17963e786d91a8ddc54806cfa","date":1292347838,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentInfo#SegmentInfo(Directory,int,IndexInput,CodecProvider).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentInfo#SegmentInfo(Directory,int,IndexInput,CodecProvider).mjava","sourceNew":"  /**\n   * Construct a new SegmentInfo instance by reading a\n   * previously saved SegmentInfo from input.\n   * <p>Note: this is public only to allow access from\n   * the codecs package.</p>\n   *\n   * @param dir directory to load from\n   * @param format format of the segments info file\n   * @param input input handle to read segment info from\n   */\n  public SegmentInfo(Directory dir, int format, IndexInput input, CodecProvider codecs) throws IOException {\n    this.dir = dir;\n    name = input.readString();\n    docCount = input.readInt();\n    delGen = input.readLong();\n    docStoreOffset = input.readInt();\n    if (docStoreOffset != -1) {\n      docStoreSegment = input.readString();\n      docStoreIsCompoundFile = input.readByte() == YES;\n    } else {\n      docStoreSegment = name;\n      docStoreIsCompoundFile = false;\n    }\n    if (format > DefaultSegmentInfosWriter.FORMAT_4_0) {\n      // pre-4.0 indexes write a byte if there is a single norms file\n      byte b = input.readByte();\n      assert 1 == b;\n    }\n    int numNormGen = input.readInt();\n    if (numNormGen == NO) {\n      normGen = null;\n    } else {\n      normGen = new long[numNormGen];\n      for(int j=0;j<numNormGen;j++) {\n        normGen[j] = input.readLong();\n      }\n    }\n    isCompoundFile = input.readByte() == YES;\n\n    delCount = input.readInt();\n    assert delCount <= docCount;\n\n    hasProx = input.readByte() == YES;\n    \n    // System.out.println(Thread.currentThread().getName() + \": si.read hasProx=\" + hasProx + \" seg=\" + name);\n    segmentCodecs = new SegmentCodecs(codecs);\n    if (format <= DefaultSegmentInfosWriter.FORMAT_4_0) {\n      segmentCodecs.read(input);\n    } else {\n      // codec ID on FieldInfo is 0 so it will simply use the first codec available\n      // TODO what todo if preflex is not available in the provider? register it or fail?\n      segmentCodecs.codecs = new Codec[] { codecs.lookup(\"PreFlex\")};\n    }\n    diagnostics = input.readStringStringMap();\n    \n    if (format <= DefaultSegmentInfosWriter.FORMAT_HAS_VECTORS) {\n      hasVectors = input.readByte() == 1;\n    } else {\n      final String storesSegment;\n      if (docStoreOffset != -1) {\n        storesSegment = docStoreSegment;\n      } else {\n        storesSegment = name;\n      }\n      hasVectors = dir.fileExists(IndexFileNames.segmentFileName(storesSegment, \"\", IndexFileNames.VECTORS_INDEX_EXTENSION));\n    }\n  }\n\n","sourceOld":"  /**\n   * Construct a new SegmentInfo instance by reading a\n   * previously saved SegmentInfo from input.\n   * <p>Note: this is public only to allow access from\n   * the codecs package.</p>\n   *\n   * @param dir directory to load from\n   * @param format format of the segments info file\n   * @param input input handle to read segment info from\n   */\n  public SegmentInfo(Directory dir, int format, IndexInput input, CodecProvider codecs) throws IOException {\n    this.dir = dir;\n    name = input.readString();\n    docCount = input.readInt();\n    delGen = input.readLong();\n    docStoreOffset = input.readInt();\n    if (docStoreOffset != -1) {\n      docStoreSegment = input.readString();\n      docStoreIsCompoundFile = input.readByte() == YES;\n    } else {\n      docStoreSegment = name;\n      docStoreIsCompoundFile = false;\n    }\n    if (format > DefaultSegmentInfosWriter.FORMAT_4_0) {\n      // pre-4.0 indexes write a byte if there is a single norms file\n      byte b = input.readByte();\n      assert 1 == b;\n    }\n    int numNormGen = input.readInt();\n    if (numNormGen == NO) {\n      normGen = null;\n    } else {\n      normGen = new long[numNormGen];\n      for(int j=0;j<numNormGen;j++) {\n        normGen[j] = input.readLong();\n      }\n    }\n    isCompoundFile = input.readByte() == YES;\n\n    delCount = input.readInt();\n    assert delCount <= docCount;\n\n    hasProx = input.readByte() == YES;\n    \n    // System.out.println(Thread.currentThread().getName() + \": si.read hasProx=\" + hasProx + \" seg=\" + name);\n    segmentCodecs = new SegmentCodecs(codecs);\n    if (format <= DefaultSegmentInfosWriter.FORMAT_4_0) {\n      segmentCodecs.read(input);\n    } else {\n      // codec ID on FieldInfo is 0 so it will simply use the first codec available\n      // TODO what todo if preflex is not available in the provider? register it or fail?\n      segmentCodecs.codecs = new Codec[] { codecs.lookup(\"PreFlex\")};\n    }\n    diagnostics = input.readStringStringMap();\n    \n    if (format <= DefaultSegmentInfosWriter.FORMAT_HAS_VECTORS) {\n      hasVectors = input.readByte();\n    } else {\n      hasVectors = 2;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30ca900054c38836c7c167379e300af4dabb34c3","date":1292602599,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentInfo#SegmentInfo(Directory,int,IndexInput,CodecProvider).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentInfo#SegmentInfo(Directory,int,IndexInput,CodecProvider).mjava","sourceNew":"  /**\n   * Construct a new SegmentInfo instance by reading a\n   * previously saved SegmentInfo from input.\n   * <p>Note: this is public only to allow access from\n   * the codecs package.</p>\n   *\n   * @param dir directory to load from\n   * @param format format of the segments info file\n   * @param input input handle to read segment info from\n   */\n  public SegmentInfo(Directory dir, int format, IndexInput input, CodecProvider codecs) throws IOException {\n    this.dir = dir;\n    name = input.readString();\n    docCount = input.readInt();\n    delGen = input.readLong();\n    docStoreOffset = input.readInt();\n    if (docStoreOffset != -1) {\n      docStoreSegment = input.readString();\n      docStoreIsCompoundFile = input.readByte() == YES;\n    } else {\n      docStoreSegment = name;\n      docStoreIsCompoundFile = false;\n    }\n    if (format > DefaultSegmentInfosWriter.FORMAT_4_0) {\n      // pre-4.0 indexes write a byte if there is a single norms file\n      byte b = input.readByte();\n      assert 1 == b;\n    }\n    int numNormGen = input.readInt();\n    if (numNormGen == NO) {\n      normGen = null;\n    } else {\n      normGen = new long[numNormGen];\n      for(int j=0;j<numNormGen;j++) {\n        normGen[j] = input.readLong();\n      }\n    }\n    isCompoundFile = input.readByte() == YES;\n\n    delCount = input.readInt();\n    assert delCount <= docCount;\n\n    hasProx = input.readByte() == YES;\n    \n    // System.out.println(Thread.currentThread().getName() + \": si.read hasProx=\" + hasProx + \" seg=\" + name);\n    segmentCodecs = new SegmentCodecs(codecs);\n    if (format <= DefaultSegmentInfosWriter.FORMAT_4_0) {\n      segmentCodecs.read(input);\n    } else {\n      // codec ID on FieldInfo is 0 so it will simply use the first codec available\n      // TODO what todo if preflex is not available in the provider? register it or fail?\n      segmentCodecs.codecs = new Codec[] { codecs.lookup(\"PreFlex\")};\n    }\n    diagnostics = input.readStringStringMap();\n    \n    if (format <= DefaultSegmentInfosWriter.FORMAT_HAS_VECTORS) {\n      hasVectors = input.readByte() == 1;\n    } else {\n      final String storesSegment;\n      final String ext;\n      final boolean isCompoundFile;\n      if (docStoreOffset != -1) {\n        storesSegment = docStoreSegment;\n        isCompoundFile = docStoreIsCompoundFile;\n        ext = IndexFileNames.COMPOUND_FILE_STORE_EXTENSION;\n      } else {\n        storesSegment = name;\n        isCompoundFile = getUseCompoundFile();\n        ext = IndexFileNames.COMPOUND_FILE_EXTENSION;\n      }\n      final Directory dirToTest;\n      if (isCompoundFile) {\n        dirToTest = new CompoundFileReader(dir, IndexFileNames.segmentFileName(storesSegment, \"\", ext));\n      } else {\n        dirToTest = dir;\n      }\n      try {\n        hasVectors = dirToTest.fileExists(IndexFileNames.segmentFileName(storesSegment, \"\", IndexFileNames.VECTORS_INDEX_EXTENSION));\n      } finally {\n        if (isCompoundFile) {\n          dirToTest.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Construct a new SegmentInfo instance by reading a\n   * previously saved SegmentInfo from input.\n   * <p>Note: this is public only to allow access from\n   * the codecs package.</p>\n   *\n   * @param dir directory to load from\n   * @param format format of the segments info file\n   * @param input input handle to read segment info from\n   */\n  public SegmentInfo(Directory dir, int format, IndexInput input, CodecProvider codecs) throws IOException {\n    this.dir = dir;\n    name = input.readString();\n    docCount = input.readInt();\n    delGen = input.readLong();\n    docStoreOffset = input.readInt();\n    if (docStoreOffset != -1) {\n      docStoreSegment = input.readString();\n      docStoreIsCompoundFile = input.readByte() == YES;\n    } else {\n      docStoreSegment = name;\n      docStoreIsCompoundFile = false;\n    }\n    if (format > DefaultSegmentInfosWriter.FORMAT_4_0) {\n      // pre-4.0 indexes write a byte if there is a single norms file\n      byte b = input.readByte();\n      assert 1 == b;\n    }\n    int numNormGen = input.readInt();\n    if (numNormGen == NO) {\n      normGen = null;\n    } else {\n      normGen = new long[numNormGen];\n      for(int j=0;j<numNormGen;j++) {\n        normGen[j] = input.readLong();\n      }\n    }\n    isCompoundFile = input.readByte() == YES;\n\n    delCount = input.readInt();\n    assert delCount <= docCount;\n\n    hasProx = input.readByte() == YES;\n    \n    // System.out.println(Thread.currentThread().getName() + \": si.read hasProx=\" + hasProx + \" seg=\" + name);\n    segmentCodecs = new SegmentCodecs(codecs);\n    if (format <= DefaultSegmentInfosWriter.FORMAT_4_0) {\n      segmentCodecs.read(input);\n    } else {\n      // codec ID on FieldInfo is 0 so it will simply use the first codec available\n      // TODO what todo if preflex is not available in the provider? register it or fail?\n      segmentCodecs.codecs = new Codec[] { codecs.lookup(\"PreFlex\")};\n    }\n    diagnostics = input.readStringStringMap();\n    \n    if (format <= DefaultSegmentInfosWriter.FORMAT_HAS_VECTORS) {\n      hasVectors = input.readByte() == 1;\n    } else {\n      final String storesSegment;\n      if (docStoreOffset != -1) {\n        storesSegment = docStoreSegment;\n      } else {\n        storesSegment = name;\n      }\n      hasVectors = dir.fileExists(IndexFileNames.segmentFileName(storesSegment, \"\", IndexFileNames.VECTORS_INDEX_EXTENSION));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab5cb6a74aefb78aa0569857970b9151dfe2e787","date":1292842407,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentInfo#SegmentInfo(Directory,int,IndexInput,CodecProvider).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentInfo#SegmentInfo(Directory,int,IndexInput,CodecProvider).mjava","sourceNew":"  /**\n   * Construct a new SegmentInfo instance by reading a\n   * previously saved SegmentInfo from input.\n   * <p>Note: this is public only to allow access from\n   * the codecs package.</p>\n   *\n   * @param dir directory to load from\n   * @param format format of the segments info file\n   * @param input input handle to read segment info from\n   */\n  public SegmentInfo(Directory dir, int format, IndexInput input, CodecProvider codecs) throws IOException {\n    this.dir = dir;\n    name = input.readString();\n    docCount = input.readInt();\n    delGen = input.readLong();\n    docStoreOffset = input.readInt();\n    if (docStoreOffset != -1) {\n      docStoreSegment = input.readString();\n      docStoreIsCompoundFile = input.readByte() == YES;\n    } else {\n      docStoreSegment = name;\n      docStoreIsCompoundFile = false;\n    }\n    if (format > DefaultSegmentInfosWriter.FORMAT_4_0) {\n      // pre-4.0 indexes write a byte if there is a single norms file\n      byte b = input.readByte();\n      assert 1 == b;\n    }\n    int numNormGen = input.readInt();\n    if (numNormGen == NO) {\n      normGen = null;\n    } else {\n      normGen = new long[numNormGen];\n      for(int j=0;j<numNormGen;j++) {\n        normGen[j] = input.readLong();\n      }\n    }\n    isCompoundFile = input.readByte() == YES;\n\n    delCount = input.readInt();\n    assert delCount <= docCount;\n\n    hasProx = input.readByte() == YES;\n    \n    // System.out.println(Thread.currentThread().getName() + \": si.read hasProx=\" + hasProx + \" seg=\" + name);\n    segmentCodecs = new SegmentCodecs(codecs);\n    if (format <= DefaultSegmentInfosWriter.FORMAT_4_0) {\n      segmentCodecs.read(input);\n    } else {\n      // codec ID on FieldInfo is 0 so it will simply use the first codec available\n      // TODO what todo if preflex is not available in the provider? register it or fail?\n      segmentCodecs.codecs = new Codec[] { codecs.lookup(\"PreFlex\")};\n    }\n    diagnostics = input.readStringStringMap();\n    \n    if (format <= DefaultSegmentInfosWriter.FORMAT_HAS_VECTORS) {\n      hasVectors = input.readByte() == 1;\n    } else {\n      final String storesSegment;\n      final String ext;\n      final boolean isCompoundFile;\n      if (docStoreOffset != -1) {\n        storesSegment = docStoreSegment;\n        isCompoundFile = docStoreIsCompoundFile;\n        ext = IndexFileNames.COMPOUND_FILE_STORE_EXTENSION;\n      } else {\n        storesSegment = name;\n        isCompoundFile = getUseCompoundFile();\n        ext = IndexFileNames.COMPOUND_FILE_EXTENSION;\n      }\n      final Directory dirToTest;\n      if (isCompoundFile) {\n        dirToTest = new CompoundFileReader(dir, IndexFileNames.segmentFileName(storesSegment, \"\", ext));\n      } else {\n        dirToTest = dir;\n      }\n      try {\n        hasVectors = dirToTest.fileExists(IndexFileNames.segmentFileName(storesSegment, \"\", IndexFileNames.VECTORS_INDEX_EXTENSION));\n      } finally {\n        if (isCompoundFile) {\n          dirToTest.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Construct a new SegmentInfo instance by reading a\n   * previously saved SegmentInfo from input.\n   * <p>Note: this is public only to allow access from\n   * the codecs package.</p>\n   *\n   * @param dir directory to load from\n   * @param format format of the segments info file\n   * @param input input handle to read segment info from\n   */\n  public SegmentInfo(Directory dir, int format, IndexInput input, CodecProvider codecs) throws IOException {\n    this.dir = dir;\n    name = input.readString();\n    docCount = input.readInt();\n    delGen = input.readLong();\n    docStoreOffset = input.readInt();\n    if (docStoreOffset != -1) {\n      docStoreSegment = input.readString();\n      docStoreIsCompoundFile = input.readByte() == YES;\n    } else {\n      docStoreSegment = name;\n      docStoreIsCompoundFile = false;\n    }\n    if (format > DefaultSegmentInfosWriter.FORMAT_4_0) {\n      // pre-4.0 indexes write a byte if there is a single norms file\n      byte b = input.readByte();\n      assert 1 == b;\n    }\n    int numNormGen = input.readInt();\n    if (numNormGen == NO) {\n      normGen = null;\n    } else {\n      normGen = new long[numNormGen];\n      for(int j=0;j<numNormGen;j++) {\n        normGen[j] = input.readLong();\n      }\n    }\n    isCompoundFile = input.readByte() == YES;\n\n    delCount = input.readInt();\n    assert delCount <= docCount;\n\n    hasProx = input.readByte() == YES;\n    \n    // System.out.println(Thread.currentThread().getName() + \": si.read hasProx=\" + hasProx + \" seg=\" + name);\n    segmentCodecs = new SegmentCodecs(codecs);\n    if (format <= DefaultSegmentInfosWriter.FORMAT_4_0) {\n      segmentCodecs.read(input);\n    } else {\n      // codec ID on FieldInfo is 0 so it will simply use the first codec available\n      // TODO what todo if preflex is not available in the provider? register it or fail?\n      segmentCodecs.codecs = new Codec[] { codecs.lookup(\"PreFlex\")};\n    }\n    diagnostics = input.readStringStringMap();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentInfo#SegmentInfo(Directory,int,IndexInput,CodecProvider).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentInfo#SegmentInfo(Directory,int,IndexInput,CodecProvider).mjava","sourceNew":"  /**\n   * Construct a new SegmentInfo instance by reading a\n   * previously saved SegmentInfo from input.\n   * <p>Note: this is public only to allow access from\n   * the codecs package.</p>\n   *\n   * @param dir directory to load from\n   * @param format format of the segments info file\n   * @param input input handle to read segment info from\n   */\n  public SegmentInfo(Directory dir, int format, IndexInput input, CodecProvider codecs) throws IOException {\n    this.dir = dir;\n    name = input.readString();\n    docCount = input.readInt();\n    delGen = input.readLong();\n    docStoreOffset = input.readInt();\n    if (docStoreOffset != -1) {\n      docStoreSegment = input.readString();\n      docStoreIsCompoundFile = input.readByte() == YES;\n    } else {\n      docStoreSegment = name;\n      docStoreIsCompoundFile = false;\n    }\n\n    if (format > DefaultSegmentInfosWriter.FORMAT_4_0) {\n      // pre-4.0 indexes write a byte if there is a single norms file\n      byte b = input.readByte();\n      assert 1 == b;\n    }\n\n    int numNormGen = input.readInt();\n    if (numNormGen == NO) {\n      normGen = null;\n    } else {\n      normGen = new long[numNormGen];\n      for(int j=0;j<numNormGen;j++) {\n        normGen[j] = input.readLong();\n      }\n    }\n    isCompoundFile = input.readByte() == YES;\n\n    delCount = input.readInt();\n    assert delCount <= docCount;\n\n    hasProx = input.readByte() == YES;\n\n    // System.out.println(Thread.currentThread().getName() + \": si.read hasProx=\" + hasProx + \" seg=\" + name);\n    segmentCodecs = new SegmentCodecs(codecs);\n    if (format <= DefaultSegmentInfosWriter.FORMAT_4_0) {\n      segmentCodecs.read(input);\n    } else {\n      // codec ID on FieldInfo is 0 so it will simply use the first codec available\n      // TODO what todo if preflex is not available in the provider? register it or fail?\n      segmentCodecs.codecs = new Codec[] { codecs.lookup(\"PreFlex\")};\n    }\n    diagnostics = input.readStringStringMap();\n\n    if (format <= DefaultSegmentInfosWriter.FORMAT_HAS_VECTORS) {\n      hasVectors = input.readByte() == 1;\n    } else {\n      final String storesSegment;\n      final String ext;\n      final boolean isCompoundFile;\n      if (docStoreOffset != -1) {\n        storesSegment = docStoreSegment;\n        isCompoundFile = docStoreIsCompoundFile;\n        ext = IndexFileNames.COMPOUND_FILE_STORE_EXTENSION;\n      } else {\n        storesSegment = name;\n        isCompoundFile = getUseCompoundFile();\n        ext = IndexFileNames.COMPOUND_FILE_EXTENSION;\n      }\n      final Directory dirToTest;\n      if (isCompoundFile) {\n        dirToTest = new CompoundFileReader(dir, IndexFileNames.segmentFileName(storesSegment, \"\", ext));\n      } else {\n        dirToTest = dir;\n      }\n      try {\n        hasVectors = dirToTest.fileExists(IndexFileNames.segmentFileName(storesSegment, \"\", IndexFileNames.VECTORS_INDEX_EXTENSION));\n      } finally {\n        if (isCompoundFile) {\n          dirToTest.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Construct a new SegmentInfo instance by reading a\n   * previously saved SegmentInfo from input.\n   * <p>Note: this is public only to allow access from\n   * the codecs package.</p>\n   *\n   * @param dir directory to load from\n   * @param format format of the segments info file\n   * @param input input handle to read segment info from\n   */\n  public SegmentInfo(Directory dir, int format, IndexInput input, CodecProvider codecs) throws IOException {\n    this.dir = dir;\n    name = input.readString();\n    docCount = input.readInt();\n    final String codecName;\n    delGen = input.readLong();\n    docStoreOffset = input.readInt();\n    if (docStoreOffset != -1) {\n      docStoreSegment = input.readString();\n      docStoreIsCompoundFile = input.readByte() == YES;\n    } else {\n      docStoreSegment = name;\n      docStoreIsCompoundFile = false;\n    }\n\n    if (format > DefaultSegmentInfosWriter.FORMAT_4_0) {\n      // pre-4.0 indexes write a byte if there is a single norms file\n      byte b = input.readByte();\n      assert 1 == b;\n    }\n\n    int numNormGen = input.readInt();\n    if (numNormGen == NO) {\n      normGen = null;\n    } else {\n      normGen = new long[numNormGen];\n      for(int j=0;j<numNormGen;j++) {\n        normGen[j] = input.readLong();\n      }\n    }\n    isCompoundFile = input.readByte() == YES;\n\n    delCount = input.readInt();\n    assert delCount <= docCount;\n\n    hasProx = input.readByte() == YES;\n    \n    // System.out.println(Thread.currentThread().getName() + \": si.read hasProx=\" + hasProx + \" seg=\" + name);\n    \n    if (format <= DefaultSegmentInfosWriter.FORMAT_4_0)\n      codecName = input.readString();\n    else\n      codecName = \"PreFlex\";\n    \n    diagnostics = input.readStringStringMap();\n    codec = codecs.lookup(codecName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b9dc373b96fc96e6300e2f5af947f6998e6aa6a6","date":1295759448,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentInfo#SegmentInfo(Directory,int,IndexInput,CodecProvider).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentInfo#SegmentInfo(Directory,int,IndexInput,CodecProvider).mjava","sourceNew":"  /**\n   * Construct a new SegmentInfo instance by reading a\n   * previously saved SegmentInfo from input.\n   * <p>Note: this is public only to allow access from\n   * the codecs package.</p>\n   *\n   * @param dir directory to load from\n   * @param format format of the segments info file\n   * @param input input handle to read segment info from\n   */\n  public SegmentInfo(Directory dir, int format, IndexInput input, CodecProvider codecs) throws IOException {\n    this.dir = dir;\n    if (format <= DefaultSegmentInfosWriter.FORMAT_3_1) {\n      version = input.readString();\n    }\n    name = input.readString();\n    docCount = input.readInt();\n    delGen = input.readLong();\n    docStoreOffset = input.readInt();\n    if (docStoreOffset != -1) {\n      docStoreSegment = input.readString();\n      docStoreIsCompoundFile = input.readByte() == YES;\n    } else {\n      docStoreSegment = name;\n      docStoreIsCompoundFile = false;\n    }\n    if (format > DefaultSegmentInfosWriter.FORMAT_4_0) {\n      // pre-4.0 indexes write a byte if there is a single norms file\n      byte b = input.readByte();\n      assert 1 == b;\n    }\n    int numNormGen = input.readInt();\n    if (numNormGen == NO) {\n      normGen = null;\n    } else {\n      normGen = new long[numNormGen];\n      for(int j=0;j<numNormGen;j++) {\n        normGen[j] = input.readLong();\n      }\n    }\n    isCompoundFile = input.readByte() == YES;\n\n    delCount = input.readInt();\n    assert delCount <= docCount;\n\n    hasProx = input.readByte() == YES;\n    \n    // System.out.println(Thread.currentThread().getName() + \": si.read hasProx=\" + hasProx + \" seg=\" + name);\n    segmentCodecs = new SegmentCodecs(codecs);\n    if (format <= DefaultSegmentInfosWriter.FORMAT_4_0) {\n      segmentCodecs.read(input);\n    } else {\n      // codec ID on FieldInfo is 0 so it will simply use the first codec available\n      // TODO what todo if preflex is not available in the provider? register it or fail?\n      segmentCodecs.codecs = new Codec[] { codecs.lookup(\"PreFlex\")};\n    }\n    diagnostics = input.readStringStringMap();\n    \n    if (format <= DefaultSegmentInfosWriter.FORMAT_HAS_VECTORS) {\n      hasVectors = input.readByte() == 1;\n    } else {\n      final String storesSegment;\n      final String ext;\n      final boolean isCompoundFile;\n      if (docStoreOffset != -1) {\n        storesSegment = docStoreSegment;\n        isCompoundFile = docStoreIsCompoundFile;\n        ext = IndexFileNames.COMPOUND_FILE_STORE_EXTENSION;\n      } else {\n        storesSegment = name;\n        isCompoundFile = getUseCompoundFile();\n        ext = IndexFileNames.COMPOUND_FILE_EXTENSION;\n      }\n      final Directory dirToTest;\n      if (isCompoundFile) {\n        dirToTest = new CompoundFileReader(dir, IndexFileNames.segmentFileName(storesSegment, \"\", ext));\n      } else {\n        dirToTest = dir;\n      }\n      try {\n        hasVectors = dirToTest.fileExists(IndexFileNames.segmentFileName(storesSegment, \"\", IndexFileNames.VECTORS_INDEX_EXTENSION));\n      } finally {\n        if (isCompoundFile) {\n          dirToTest.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Construct a new SegmentInfo instance by reading a\n   * previously saved SegmentInfo from input.\n   * <p>Note: this is public only to allow access from\n   * the codecs package.</p>\n   *\n   * @param dir directory to load from\n   * @param format format of the segments info file\n   * @param input input handle to read segment info from\n   */\n  public SegmentInfo(Directory dir, int format, IndexInput input, CodecProvider codecs) throws IOException {\n    this.dir = dir;\n    name = input.readString();\n    docCount = input.readInt();\n    delGen = input.readLong();\n    docStoreOffset = input.readInt();\n    if (docStoreOffset != -1) {\n      docStoreSegment = input.readString();\n      docStoreIsCompoundFile = input.readByte() == YES;\n    } else {\n      docStoreSegment = name;\n      docStoreIsCompoundFile = false;\n    }\n    if (format > DefaultSegmentInfosWriter.FORMAT_4_0) {\n      // pre-4.0 indexes write a byte if there is a single norms file\n      byte b = input.readByte();\n      assert 1 == b;\n    }\n    int numNormGen = input.readInt();\n    if (numNormGen == NO) {\n      normGen = null;\n    } else {\n      normGen = new long[numNormGen];\n      for(int j=0;j<numNormGen;j++) {\n        normGen[j] = input.readLong();\n      }\n    }\n    isCompoundFile = input.readByte() == YES;\n\n    delCount = input.readInt();\n    assert delCount <= docCount;\n\n    hasProx = input.readByte() == YES;\n    \n    // System.out.println(Thread.currentThread().getName() + \": si.read hasProx=\" + hasProx + \" seg=\" + name);\n    segmentCodecs = new SegmentCodecs(codecs);\n    if (format <= DefaultSegmentInfosWriter.FORMAT_4_0) {\n      segmentCodecs.read(input);\n    } else {\n      // codec ID on FieldInfo is 0 so it will simply use the first codec available\n      // TODO what todo if preflex is not available in the provider? register it or fail?\n      segmentCodecs.codecs = new Codec[] { codecs.lookup(\"PreFlex\")};\n    }\n    diagnostics = input.readStringStringMap();\n    \n    if (format <= DefaultSegmentInfosWriter.FORMAT_HAS_VECTORS) {\n      hasVectors = input.readByte() == 1;\n    } else {\n      final String storesSegment;\n      final String ext;\n      final boolean isCompoundFile;\n      if (docStoreOffset != -1) {\n        storesSegment = docStoreSegment;\n        isCompoundFile = docStoreIsCompoundFile;\n        ext = IndexFileNames.COMPOUND_FILE_STORE_EXTENSION;\n      } else {\n        storesSegment = name;\n        isCompoundFile = getUseCompoundFile();\n        ext = IndexFileNames.COMPOUND_FILE_EXTENSION;\n      }\n      final Directory dirToTest;\n      if (isCompoundFile) {\n        dirToTest = new CompoundFileReader(dir, IndexFileNames.segmentFileName(storesSegment, \"\", ext));\n      } else {\n        dirToTest = dir;\n      }\n      try {\n        hasVectors = dirToTest.fileExists(IndexFileNames.segmentFileName(storesSegment, \"\", IndexFileNames.VECTORS_INDEX_EXTENSION));\n      } finally {\n        if (isCompoundFile) {\n          dirToTest.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb9b72f7c3d7827c64dd4ec580ded81778da361d","date":1295897920,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentInfo#SegmentInfo(Directory,int,IndexInput,CodecProvider).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentInfo#SegmentInfo(Directory,int,IndexInput,CodecProvider).mjava","sourceNew":"  /**\n   * Construct a new SegmentInfo instance by reading a\n   * previously saved SegmentInfo from input.\n   * <p>Note: this is public only to allow access from\n   * the codecs package.</p>\n   *\n   * @param dir directory to load from\n   * @param format format of the segments info file\n   * @param input input handle to read segment info from\n   */\n  public SegmentInfo(Directory dir, int format, IndexInput input, CodecProvider codecs) throws IOException {\n    this.dir = dir;\n    if (format <= DefaultSegmentInfosWriter.FORMAT_3_1) {\n      version = input.readString();\n    }\n    name = input.readString();\n    docCount = input.readInt();\n    delGen = input.readLong();\n    docStoreOffset = input.readInt();\n    if (docStoreOffset != -1) {\n      docStoreSegment = input.readString();\n      docStoreIsCompoundFile = input.readByte() == YES;\n    } else {\n      docStoreSegment = name;\n      docStoreIsCompoundFile = false;\n    }\n\n    if (format > DefaultSegmentInfosWriter.FORMAT_4_0) {\n      // pre-4.0 indexes write a byte if there is a single norms file\n      byte b = input.readByte();\n      assert 1 == b;\n    }\n\n    int numNormGen = input.readInt();\n    if (numNormGen == NO) {\n      normGen = null;\n    } else {\n      normGen = new long[numNormGen];\n      for(int j=0;j<numNormGen;j++) {\n        normGen[j] = input.readLong();\n      }\n    }\n    isCompoundFile = input.readByte() == YES;\n\n    delCount = input.readInt();\n    assert delCount <= docCount;\n\n    hasProx = input.readByte() == YES;\n\n    // System.out.println(Thread.currentThread().getName() + \": si.read hasProx=\" + hasProx + \" seg=\" + name);\n    segmentCodecs = new SegmentCodecs(codecs);\n    if (format <= DefaultSegmentInfosWriter.FORMAT_4_0) {\n      segmentCodecs.read(input);\n    } else {\n      // codec ID on FieldInfo is 0 so it will simply use the first codec available\n      // TODO what todo if preflex is not available in the provider? register it or fail?\n      segmentCodecs.codecs = new Codec[] { codecs.lookup(\"PreFlex\")};\n    }\n    diagnostics = input.readStringStringMap();\n\n    if (format <= DefaultSegmentInfosWriter.FORMAT_HAS_VECTORS) {\n      hasVectors = input.readByte() == 1;\n    } else {\n      final String storesSegment;\n      final String ext;\n      final boolean isCompoundFile;\n      if (docStoreOffset != -1) {\n        storesSegment = docStoreSegment;\n        isCompoundFile = docStoreIsCompoundFile;\n        ext = IndexFileNames.COMPOUND_FILE_STORE_EXTENSION;\n      } else {\n        storesSegment = name;\n        isCompoundFile = getUseCompoundFile();\n        ext = IndexFileNames.COMPOUND_FILE_EXTENSION;\n      }\n      final Directory dirToTest;\n      if (isCompoundFile) {\n        dirToTest = new CompoundFileReader(dir, IndexFileNames.segmentFileName(storesSegment, \"\", ext));\n      } else {\n        dirToTest = dir;\n      }\n      try {\n        hasVectors = dirToTest.fileExists(IndexFileNames.segmentFileName(storesSegment, \"\", IndexFileNames.VECTORS_INDEX_EXTENSION));\n      } finally {\n        if (isCompoundFile) {\n          dirToTest.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Construct a new SegmentInfo instance by reading a\n   * previously saved SegmentInfo from input.\n   * <p>Note: this is public only to allow access from\n   * the codecs package.</p>\n   *\n   * @param dir directory to load from\n   * @param format format of the segments info file\n   * @param input input handle to read segment info from\n   */\n  public SegmentInfo(Directory dir, int format, IndexInput input, CodecProvider codecs) throws IOException {\n    this.dir = dir;\n    name = input.readString();\n    docCount = input.readInt();\n    delGen = input.readLong();\n    docStoreOffset = input.readInt();\n    if (docStoreOffset != -1) {\n      docStoreSegment = input.readString();\n      docStoreIsCompoundFile = input.readByte() == YES;\n    } else {\n      docStoreSegment = name;\n      docStoreIsCompoundFile = false;\n    }\n\n    if (format > DefaultSegmentInfosWriter.FORMAT_4_0) {\n      // pre-4.0 indexes write a byte if there is a single norms file\n      byte b = input.readByte();\n      assert 1 == b;\n    }\n\n    int numNormGen = input.readInt();\n    if (numNormGen == NO) {\n      normGen = null;\n    } else {\n      normGen = new long[numNormGen];\n      for(int j=0;j<numNormGen;j++) {\n        normGen[j] = input.readLong();\n      }\n    }\n    isCompoundFile = input.readByte() == YES;\n\n    delCount = input.readInt();\n    assert delCount <= docCount;\n\n    hasProx = input.readByte() == YES;\n\n    // System.out.println(Thread.currentThread().getName() + \": si.read hasProx=\" + hasProx + \" seg=\" + name);\n    segmentCodecs = new SegmentCodecs(codecs);\n    if (format <= DefaultSegmentInfosWriter.FORMAT_4_0) {\n      segmentCodecs.read(input);\n    } else {\n      // codec ID on FieldInfo is 0 so it will simply use the first codec available\n      // TODO what todo if preflex is not available in the provider? register it or fail?\n      segmentCodecs.codecs = new Codec[] { codecs.lookup(\"PreFlex\")};\n    }\n    diagnostics = input.readStringStringMap();\n\n    if (format <= DefaultSegmentInfosWriter.FORMAT_HAS_VECTORS) {\n      hasVectors = input.readByte() == 1;\n    } else {\n      final String storesSegment;\n      final String ext;\n      final boolean isCompoundFile;\n      if (docStoreOffset != -1) {\n        storesSegment = docStoreSegment;\n        isCompoundFile = docStoreIsCompoundFile;\n        ext = IndexFileNames.COMPOUND_FILE_STORE_EXTENSION;\n      } else {\n        storesSegment = name;\n        isCompoundFile = getUseCompoundFile();\n        ext = IndexFileNames.COMPOUND_FILE_EXTENSION;\n      }\n      final Directory dirToTest;\n      if (isCompoundFile) {\n        dirToTest = new CompoundFileReader(dir, IndexFileNames.segmentFileName(storesSegment, \"\", ext));\n      } else {\n        dirToTest = dir;\n      }\n      try {\n        hasVectors = dirToTest.fileExists(IndexFileNames.segmentFileName(storesSegment, \"\", IndexFileNames.VECTORS_INDEX_EXTENSION));\n      } finally {\n        if (isCompoundFile) {\n          dirToTest.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentInfo#SegmentInfo(Directory,int,IndexInput,CodecProvider).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentInfo#SegmentInfo(Directory,int,IndexInput,CodecProvider).mjava","sourceNew":"  /**\n   * Construct a new SegmentInfo instance by reading a\n   * previously saved SegmentInfo from input.\n   * <p>Note: this is public only to allow access from\n   * the codecs package.</p>\n   *\n   * @param dir directory to load from\n   * @param format format of the segments info file\n   * @param input input handle to read segment info from\n   */\n  public SegmentInfo(Directory dir, int format, IndexInput input, CodecProvider codecs) throws IOException {\n    this.dir = dir;\n    if (format <= DefaultSegmentInfosWriter.FORMAT_3_1) {\n      version = input.readString();\n    }\n    name = input.readString();\n    docCount = input.readInt();\n    delGen = input.readLong();\n    docStoreOffset = input.readInt();\n    if (docStoreOffset != -1) {\n      docStoreSegment = input.readString();\n      docStoreIsCompoundFile = input.readByte() == YES;\n    } else {\n      docStoreSegment = name;\n      docStoreIsCompoundFile = false;\n    }\n    if (format > DefaultSegmentInfosWriter.FORMAT_4_0) {\n      // pre-4.0 indexes write a byte if there is a single norms file\n      byte b = input.readByte();\n      assert 1 == b;\n    }\n    int numNormGen = input.readInt();\n    if (numNormGen == NO) {\n      normGen = null;\n    } else {\n      normGen = new long[numNormGen];\n      for(int j=0;j<numNormGen;j++) {\n        normGen[j] = input.readLong();\n      }\n    }\n    isCompoundFile = input.readByte() == YES;\n\n    delCount = input.readInt();\n    assert delCount <= docCount;\n\n    hasProx = input.readByte() == YES;\n    \n    // System.out.println(Thread.currentThread().getName() + \": si.read hasProx=\" + hasProx + \" seg=\" + name);\n    segmentCodecs = new SegmentCodecs(codecs);\n    if (format <= DefaultSegmentInfosWriter.FORMAT_4_0) {\n      segmentCodecs.read(input);\n    } else {\n      // codec ID on FieldInfo is 0 so it will simply use the first codec available\n      // TODO what todo if preflex is not available in the provider? register it or fail?\n      segmentCodecs.codecs = new Codec[] { codecs.lookup(\"PreFlex\")};\n    }\n    diagnostics = input.readStringStringMap();\n    \n    if (format <= DefaultSegmentInfosWriter.FORMAT_HAS_VECTORS) {\n      hasVectors = input.readByte() == 1;\n    } else {\n      final String storesSegment;\n      final String ext;\n      final boolean isCompoundFile;\n      if (docStoreOffset != -1) {\n        storesSegment = docStoreSegment;\n        isCompoundFile = docStoreIsCompoundFile;\n        ext = IndexFileNames.COMPOUND_FILE_STORE_EXTENSION;\n      } else {\n        storesSegment = name;\n        isCompoundFile = getUseCompoundFile();\n        ext = IndexFileNames.COMPOUND_FILE_EXTENSION;\n      }\n      final Directory dirToTest;\n      if (isCompoundFile) {\n        dirToTest = new CompoundFileReader(dir, IndexFileNames.segmentFileName(storesSegment, \"\", ext));\n      } else {\n        dirToTest = dir;\n      }\n      try {\n        hasVectors = dirToTest.fileExists(IndexFileNames.segmentFileName(storesSegment, \"\", IndexFileNames.VECTORS_INDEX_EXTENSION));\n      } finally {\n        if (isCompoundFile) {\n          dirToTest.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Construct a new SegmentInfo instance by reading a\n   * previously saved SegmentInfo from input.\n   * <p>Note: this is public only to allow access from\n   * the codecs package.</p>\n   *\n   * @param dir directory to load from\n   * @param format format of the segments info file\n   * @param input input handle to read segment info from\n   */\n  public SegmentInfo(Directory dir, int format, IndexInput input, CodecProvider codecs) throws IOException {\n    this.dir = dir;\n    name = input.readString();\n    docCount = input.readInt();\n    delGen = input.readLong();\n    docStoreOffset = input.readInt();\n    if (docStoreOffset != -1) {\n      docStoreSegment = input.readString();\n      docStoreIsCompoundFile = input.readByte() == YES;\n    } else {\n      docStoreSegment = name;\n      docStoreIsCompoundFile = false;\n    }\n    if (format > DefaultSegmentInfosWriter.FORMAT_4_0) {\n      // pre-4.0 indexes write a byte if there is a single norms file\n      byte b = input.readByte();\n      assert 1 == b;\n    }\n    int numNormGen = input.readInt();\n    if (numNormGen == NO) {\n      normGen = null;\n    } else {\n      normGen = new long[numNormGen];\n      for(int j=0;j<numNormGen;j++) {\n        normGen[j] = input.readLong();\n      }\n    }\n    isCompoundFile = input.readByte() == YES;\n\n    delCount = input.readInt();\n    assert delCount <= docCount;\n\n    hasProx = input.readByte() == YES;\n    \n    // System.out.println(Thread.currentThread().getName() + \": si.read hasProx=\" + hasProx + \" seg=\" + name);\n    segmentCodecs = new SegmentCodecs(codecs);\n    if (format <= DefaultSegmentInfosWriter.FORMAT_4_0) {\n      segmentCodecs.read(input);\n    } else {\n      // codec ID on FieldInfo is 0 so it will simply use the first codec available\n      // TODO what todo if preflex is not available in the provider? register it or fail?\n      segmentCodecs.codecs = new Codec[] { codecs.lookup(\"PreFlex\")};\n    }\n    diagnostics = input.readStringStringMap();\n    \n    if (format <= DefaultSegmentInfosWriter.FORMAT_HAS_VECTORS) {\n      hasVectors = input.readByte() == 1;\n    } else {\n      final String storesSegment;\n      final String ext;\n      final boolean isCompoundFile;\n      if (docStoreOffset != -1) {\n        storesSegment = docStoreSegment;\n        isCompoundFile = docStoreIsCompoundFile;\n        ext = IndexFileNames.COMPOUND_FILE_STORE_EXTENSION;\n      } else {\n        storesSegment = name;\n        isCompoundFile = getUseCompoundFile();\n        ext = IndexFileNames.COMPOUND_FILE_EXTENSION;\n      }\n      final Directory dirToTest;\n      if (isCompoundFile) {\n        dirToTest = new CompoundFileReader(dir, IndexFileNames.segmentFileName(storesSegment, \"\", ext));\n      } else {\n        dirToTest = dir;\n      }\n      try {\n        hasVectors = dirToTest.fileExists(IndexFileNames.segmentFileName(storesSegment, \"\", IndexFileNames.VECTORS_INDEX_EXTENSION));\n      } finally {\n        if (isCompoundFile) {\n          dirToTest.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0c7a8f7304b75b1528814c5820fa23a96816c27","date":1298314239,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentInfo#SegmentInfo(Directory,int,IndexInput,CodecProvider).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentInfo#SegmentInfo(Directory,int,IndexInput,CodecProvider).mjava","sourceNew":"  /**\n   * Construct a new SegmentInfo instance by reading a\n   * previously saved SegmentInfo from input.\n   * <p>Note: this is public only to allow access from\n   * the codecs package.</p>\n   *\n   * @param dir directory to load from\n   * @param format format of the segments info file\n   * @param input input handle to read segment info from\n   */\n  public SegmentInfo(Directory dir, int format, IndexInput input, CodecProvider codecs) throws IOException {\n    this.dir = dir;\n    if (format <= DefaultSegmentInfosWriter.FORMAT_3_1) {\n      version = input.readString();\n    }\n    name = input.readString();\n    docCount = input.readInt();\n    delGen = input.readLong();\n    docStoreOffset = input.readInt();\n    if (docStoreOffset != -1) {\n      docStoreSegment = input.readString();\n      docStoreIsCompoundFile = input.readByte() == YES;\n    } else {\n      docStoreSegment = name;\n      docStoreIsCompoundFile = false;\n    }\n    if (format > DefaultSegmentInfosWriter.FORMAT_4_0) {\n      // pre-4.0 indexes write a byte if there is a single norms file\n      byte b = input.readByte();\n      assert 1 == b;\n    }\n    int numNormGen = input.readInt();\n    if (numNormGen == NO) {\n      normGen = null;\n    } else {\n      normGen = new HashMap<Integer, Long>();\n      for(int j=0;j<numNormGen;j++) {\n        int fieldNumber = j;\n        if (format <= DefaultSegmentInfosWriter.FORMAT_4_0) {\n          fieldNumber = input.readInt();\n      }\n\n        normGen.put(fieldNumber, input.readLong());\n    }\n    }\n    isCompoundFile = input.readByte() == YES;\n\n    Directory dir0 = dir;\n    if (isCompoundFile) {\n      dir0 = new CompoundFileReader(dir, IndexFileNames.segmentFileName(name, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION));\n    }\n\n    try {\n      fieldInfos = new FieldInfos(dir0, IndexFileNames.segmentFileName(name, \"\", IndexFileNames.FIELD_INFOS_EXTENSION));\n    } finally {\n      if (dir != dir0) {\n        dir0.close();\n      }\n    }\n\n    delCount = input.readInt();\n    assert delCount <= docCount;\n\n    hasProx = input.readByte();\n    \n    // System.out.println(Thread.currentThread().getName() + \": si.read hasProx=\" + hasProx + \" seg=\" + name);\n    segmentCodecs = new SegmentCodecs(codecs);\n    if (format <= DefaultSegmentInfosWriter.FORMAT_4_0) {\n      segmentCodecs.read(input);\n    } else {\n      // codec ID on FieldInfo is 0 so it will simply use the first codec available\n      // TODO what todo if preflex is not available in the provider? register it or fail?\n      segmentCodecs.codecs = new Codec[] { codecs.lookup(\"PreFlex\")};\n    }\n    diagnostics = input.readStringStringMap();\n    \n    if (format <= DefaultSegmentInfosWriter.FORMAT_HAS_VECTORS) {\n      hasVectors = input.readByte();\n    } else {\n      final String storesSegment;\n      final String ext;\n      final boolean isCompoundFile;\n      if (docStoreOffset != -1) {\n        storesSegment = docStoreSegment;\n        isCompoundFile = docStoreIsCompoundFile;\n        ext = IndexFileNames.COMPOUND_FILE_STORE_EXTENSION;\n      } else {\n        storesSegment = name;\n        isCompoundFile = getUseCompoundFile();\n        ext = IndexFileNames.COMPOUND_FILE_EXTENSION;\n      }\n      final Directory dirToTest;\n      if (isCompoundFile) {\n        dirToTest = new CompoundFileReader(dir, IndexFileNames.segmentFileName(storesSegment, \"\", ext));\n      } else {\n        dirToTest = dir;\n      }\n      try {\n        if (dirToTest.fileExists(IndexFileNames.segmentFileName(storesSegment, \"\", IndexFileNames.VECTORS_INDEX_EXTENSION))) {\n          hasVectors = YES;\n        } else {\n          hasVectors = NO;\n        }\n      } finally {\n        if (isCompoundFile) {\n          dirToTest.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Construct a new SegmentInfo instance by reading a\n   * previously saved SegmentInfo from input.\n   * <p>Note: this is public only to allow access from\n   * the codecs package.</p>\n   *\n   * @param dir directory to load from\n   * @param format format of the segments info file\n   * @param input input handle to read segment info from\n   */\n  public SegmentInfo(Directory dir, int format, IndexInput input, CodecProvider codecs) throws IOException {\n    this.dir = dir;\n    if (format <= DefaultSegmentInfosWriter.FORMAT_3_1) {\n      version = input.readString();\n    }\n    name = input.readString();\n    docCount = input.readInt();\n    delGen = input.readLong();\n    docStoreOffset = input.readInt();\n    if (docStoreOffset != -1) {\n      docStoreSegment = input.readString();\n      docStoreIsCompoundFile = input.readByte() == YES;\n    } else {\n      docStoreSegment = name;\n      docStoreIsCompoundFile = false;\n    }\n    if (format > DefaultSegmentInfosWriter.FORMAT_4_0) {\n      // pre-4.0 indexes write a byte if there is a single norms file\n      byte b = input.readByte();\n      assert 1 == b;\n    }\n    int numNormGen = input.readInt();\n    if (numNormGen == NO) {\n      normGen = null;\n    } else {\n      normGen = new long[numNormGen];\n      for(int j=0;j<numNormGen;j++) {\n        normGen[j] = input.readLong();\n      }\n    }\n    isCompoundFile = input.readByte() == YES;\n\n    delCount = input.readInt();\n    assert delCount <= docCount;\n\n    hasProx = input.readByte() == YES;\n    \n    // System.out.println(Thread.currentThread().getName() + \": si.read hasProx=\" + hasProx + \" seg=\" + name);\n    segmentCodecs = new SegmentCodecs(codecs);\n    if (format <= DefaultSegmentInfosWriter.FORMAT_4_0) {\n      segmentCodecs.read(input);\n    } else {\n      // codec ID on FieldInfo is 0 so it will simply use the first codec available\n      // TODO what todo if preflex is not available in the provider? register it or fail?\n      segmentCodecs.codecs = new Codec[] { codecs.lookup(\"PreFlex\")};\n    }\n    diagnostics = input.readStringStringMap();\n    \n    if (format <= DefaultSegmentInfosWriter.FORMAT_HAS_VECTORS) {\n      hasVectors = input.readByte() == 1;\n    } else {\n      final String storesSegment;\n      final String ext;\n      final boolean isCompoundFile;\n      if (docStoreOffset != -1) {\n        storesSegment = docStoreSegment;\n        isCompoundFile = docStoreIsCompoundFile;\n        ext = IndexFileNames.COMPOUND_FILE_STORE_EXTENSION;\n      } else {\n        storesSegment = name;\n        isCompoundFile = getUseCompoundFile();\n        ext = IndexFileNames.COMPOUND_FILE_EXTENSION;\n      }\n      final Directory dirToTest;\n      if (isCompoundFile) {\n        dirToTest = new CompoundFileReader(dir, IndexFileNames.segmentFileName(storesSegment, \"\", ext));\n      } else {\n        dirToTest = dir;\n      }\n      try {\n        hasVectors = dirToTest.fileExists(IndexFileNames.segmentFileName(storesSegment, \"\", IndexFileNames.VECTORS_INDEX_EXTENSION));\n      } finally {\n        if (isCompoundFile) {\n          dirToTest.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentInfo#SegmentInfo(Directory,int,IndexInput,CodecProvider).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentInfo#SegmentInfo(Directory,int,IndexInput,CodecProvider).mjava","sourceNew":"  /**\n   * Construct a new SegmentInfo instance by reading a\n   * previously saved SegmentInfo from input.\n   * <p>Note: this is public only to allow access from\n   * the codecs package.</p>\n   *\n   * @param dir directory to load from\n   * @param format format of the segments info file\n   * @param input input handle to read segment info from\n   */\n  public SegmentInfo(Directory dir, int format, IndexInput input, CodecProvider codecs) throws IOException {\n    this.dir = dir;\n    if (format <= DefaultSegmentInfosWriter.FORMAT_3_1) {\n      version = input.readString();\n    }\n    name = input.readString();\n    docCount = input.readInt();\n    delGen = input.readLong();\n    docStoreOffset = input.readInt();\n    if (docStoreOffset != -1) {\n      docStoreSegment = input.readString();\n      docStoreIsCompoundFile = input.readByte() == YES;\n    } else {\n      docStoreSegment = name;\n      docStoreIsCompoundFile = false;\n    }\n\n    if (format > DefaultSegmentInfosWriter.FORMAT_4_0) {\n      // pre-4.0 indexes write a byte if there is a single norms file\n      byte b = input.readByte();\n      assert 1 == b;\n    }\n\n    int numNormGen = input.readInt();\n    if (numNormGen == NO) {\n      normGen = null;\n    } else {\n      normGen = new HashMap<Integer, Long>();\n      for(int j=0;j<numNormGen;j++) {\n        int fieldNumber = j;\n        if (format <= DefaultSegmentInfosWriter.FORMAT_4_0) {\n          fieldNumber = input.readInt();\n      }\n\n        normGen.put(fieldNumber, input.readLong());\n    }\n    }\n    isCompoundFile = input.readByte() == YES;\n\n    Directory dir0 = dir;\n    if (isCompoundFile) {\n      dir0 = new CompoundFileReader(dir, IndexFileNames.segmentFileName(name, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION));\n    }\n\n    try {\n      fieldInfos = new FieldInfos(dir0, IndexFileNames.segmentFileName(name, \"\", IndexFileNames.FIELD_INFOS_EXTENSION));\n    } finally {\n      if (dir != dir0) {\n        dir0.close();\n      }\n    }\n\n    delCount = input.readInt();\n    assert delCount <= docCount;\n\n    hasProx = input.readByte();\n\n    // System.out.println(Thread.currentThread().getName() + \": si.read hasProx=\" + hasProx + \" seg=\" + name);\n    segmentCodecs = new SegmentCodecs(codecs);\n    if (format <= DefaultSegmentInfosWriter.FORMAT_4_0) {\n      segmentCodecs.read(input);\n    } else {\n      // codec ID on FieldInfo is 0 so it will simply use the first codec available\n      // TODO what todo if preflex is not available in the provider? register it or fail?\n      segmentCodecs.codecs = new Codec[] { codecs.lookup(\"PreFlex\")};\n    }\n    diagnostics = input.readStringStringMap();\n\n    if (format <= DefaultSegmentInfosWriter.FORMAT_HAS_VECTORS) {\n      hasVectors = input.readByte();\n    } else {\n      final String storesSegment;\n      final String ext;\n      final boolean isCompoundFile;\n      if (docStoreOffset != -1) {\n        storesSegment = docStoreSegment;\n        isCompoundFile = docStoreIsCompoundFile;\n        ext = IndexFileNames.COMPOUND_FILE_STORE_EXTENSION;\n      } else {\n        storesSegment = name;\n        isCompoundFile = getUseCompoundFile();\n        ext = IndexFileNames.COMPOUND_FILE_EXTENSION;\n      }\n      final Directory dirToTest;\n      if (isCompoundFile) {\n        dirToTest = new CompoundFileReader(dir, IndexFileNames.segmentFileName(storesSegment, \"\", ext));\n      } else {\n        dirToTest = dir;\n      }\n      try {\n        if (dirToTest.fileExists(IndexFileNames.segmentFileName(storesSegment, \"\", IndexFileNames.VECTORS_INDEX_EXTENSION))) {\n          hasVectors = YES;\n        } else {\n          hasVectors = NO;\n        }\n      } finally {\n        if (isCompoundFile) {\n          dirToTest.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Construct a new SegmentInfo instance by reading a\n   * previously saved SegmentInfo from input.\n   * <p>Note: this is public only to allow access from\n   * the codecs package.</p>\n   *\n   * @param dir directory to load from\n   * @param format format of the segments info file\n   * @param input input handle to read segment info from\n   */\n  public SegmentInfo(Directory dir, int format, IndexInput input, CodecProvider codecs) throws IOException {\n    this.dir = dir;\n    if (format <= DefaultSegmentInfosWriter.FORMAT_3_1) {\n      version = input.readString();\n    }\n    name = input.readString();\n    docCount = input.readInt();\n    delGen = input.readLong();\n    docStoreOffset = input.readInt();\n    if (docStoreOffset != -1) {\n      docStoreSegment = input.readString();\n      docStoreIsCompoundFile = input.readByte() == YES;\n    } else {\n      docStoreSegment = name;\n      docStoreIsCompoundFile = false;\n    }\n\n    if (format > DefaultSegmentInfosWriter.FORMAT_4_0) {\n      // pre-4.0 indexes write a byte if there is a single norms file\n      byte b = input.readByte();\n      assert 1 == b;\n    }\n\n    int numNormGen = input.readInt();\n    if (numNormGen == NO) {\n      normGen = null;\n    } else {\n      normGen = new long[numNormGen];\n      for(int j=0;j<numNormGen;j++) {\n        normGen[j] = input.readLong();\n      }\n    }\n    isCompoundFile = input.readByte() == YES;\n\n    delCount = input.readInt();\n    assert delCount <= docCount;\n\n    hasProx = input.readByte() == YES;\n\n    // System.out.println(Thread.currentThread().getName() + \": si.read hasProx=\" + hasProx + \" seg=\" + name);\n    segmentCodecs = new SegmentCodecs(codecs);\n    if (format <= DefaultSegmentInfosWriter.FORMAT_4_0) {\n      segmentCodecs.read(input);\n    } else {\n      // codec ID on FieldInfo is 0 so it will simply use the first codec available\n      // TODO what todo if preflex is not available in the provider? register it or fail?\n      segmentCodecs.codecs = new Codec[] { codecs.lookup(\"PreFlex\")};\n    }\n    diagnostics = input.readStringStringMap();\n\n    if (format <= DefaultSegmentInfosWriter.FORMAT_HAS_VECTORS) {\n      hasVectors = input.readByte() == 1;\n    } else {\n      final String storesSegment;\n      final String ext;\n      final boolean isCompoundFile;\n      if (docStoreOffset != -1) {\n        storesSegment = docStoreSegment;\n        isCompoundFile = docStoreIsCompoundFile;\n        ext = IndexFileNames.COMPOUND_FILE_STORE_EXTENSION;\n      } else {\n        storesSegment = name;\n        isCompoundFile = getUseCompoundFile();\n        ext = IndexFileNames.COMPOUND_FILE_EXTENSION;\n      }\n      final Directory dirToTest;\n      if (isCompoundFile) {\n        dirToTest = new CompoundFileReader(dir, IndexFileNames.segmentFileName(storesSegment, \"\", ext));\n      } else {\n        dirToTest = dir;\n      }\n      try {\n        hasVectors = dirToTest.fileExists(IndexFileNames.segmentFileName(storesSegment, \"\", IndexFileNames.VECTORS_INDEX_EXTENSION));\n      } finally {\n        if (isCompoundFile) {\n          dirToTest.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"14ec33385f6fbb6ce172882d14605790418a5d31","date":1298910796,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentInfo#SegmentInfo(Directory,int,IndexInput,CodecProvider).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentInfo#SegmentInfo(Directory,int,IndexInput,CodecProvider).mjava","sourceNew":"  /**\n   * Construct a new SegmentInfo instance by reading a\n   * previously saved SegmentInfo from input.\n   * <p>Note: this is public only to allow access from\n   * the codecs package.</p>\n   *\n   * @param dir directory to load from\n   * @param format format of the segments info file\n   * @param input input handle to read segment info from\n   */\n  public SegmentInfo(Directory dir, int format, IndexInput input, CodecProvider codecs) throws IOException {\n    this.dir = dir;\n    if (format <= DefaultSegmentInfosWriter.FORMAT_3_1) {\n      version = input.readString();\n    }\n    name = input.readString();\n    docCount = input.readInt();\n    delGen = input.readLong();\n    docStoreOffset = input.readInt();\n    if (docStoreOffset != -1) {\n      docStoreSegment = input.readString();\n      docStoreIsCompoundFile = input.readByte() == YES;\n    } else {\n      docStoreSegment = name;\n      docStoreIsCompoundFile = false;\n    }\n    if (format > DefaultSegmentInfosWriter.FORMAT_4_0) {\n      // pre-4.0 indexes write a byte if there is a single norms file\n      byte b = input.readByte();\n      assert 1 == b;\n    }\n    int numNormGen = input.readInt();\n    if (numNormGen == NO) {\n      normGen = null;\n    } else {\n      normGen = new long[numNormGen];\n      for(int j=0;j<numNormGen;j++) {\n        normGen[j] = input.readLong();\n      }\n    }\n    isCompoundFile = input.readByte() == YES;\n\n    delCount = input.readInt();\n    assert delCount <= docCount;\n\n    hasProx = input.readByte() == YES;\n    \n    // System.out.println(Thread.currentThread().getName() + \": si.read hasProx=\" + hasProx + \" seg=\" + name);\n    segmentCodecs = new SegmentCodecs(codecs);\n    if (format <= DefaultSegmentInfosWriter.FORMAT_4_0) {\n      segmentCodecs.read(input);\n    } else {\n      // codec ID on FieldInfo is 0 so it will simply use the first codec available\n      // TODO what todo if preflex is not available in the provider? register it or fail?\n      segmentCodecs.codecs = new Codec[] { codecs.lookup(\"PreFlex\")};\n    }\n    diagnostics = input.readStringStringMap();\n    \n    if (format <= DefaultSegmentInfosWriter.FORMAT_HAS_VECTORS) {\n      hasVectors = input.readByte() == 1;\n    } else {\n      final String storesSegment;\n      final String ext;\n      final boolean isCompoundFile;\n      if (docStoreOffset != -1) {\n        storesSegment = docStoreSegment;\n        isCompoundFile = docStoreIsCompoundFile;\n        ext = IndexFileNames.COMPOUND_FILE_STORE_EXTENSION;\n      } else {\n        storesSegment = name;\n        isCompoundFile = getUseCompoundFile();\n        ext = IndexFileNames.COMPOUND_FILE_EXTENSION;\n      }\n      final Directory dirToTest;\n      if (isCompoundFile) {\n        dirToTest = new CompoundFileReader(dir, IndexFileNames.segmentFileName(storesSegment, \"\", ext));\n      } else {\n        dirToTest = dir;\n      }\n      try {\n        hasVectors = dirToTest.fileExists(IndexFileNames.segmentFileName(storesSegment, \"\", IndexFileNames.VECTORS_INDEX_EXTENSION));\n      } finally {\n        if (isCompoundFile) {\n          dirToTest.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Construct a new SegmentInfo instance by reading a\n   * previously saved SegmentInfo from input.\n   * <p>Note: this is public only to allow access from\n   * the codecs package.</p>\n   *\n   * @param dir directory to load from\n   * @param format format of the segments info file\n   * @param input input handle to read segment info from\n   */\n  public SegmentInfo(Directory dir, int format, IndexInput input, CodecProvider codecs) throws IOException {\n    this.dir = dir;\n    if (format <= DefaultSegmentInfosWriter.FORMAT_3_1) {\n      version = input.readString();\n    }\n    name = input.readString();\n    docCount = input.readInt();\n    delGen = input.readLong();\n    docStoreOffset = input.readInt();\n    if (docStoreOffset != -1) {\n      docStoreSegment = input.readString();\n      docStoreIsCompoundFile = input.readByte() == YES;\n    } else {\n      docStoreSegment = name;\n      docStoreIsCompoundFile = false;\n    }\n    if (format > DefaultSegmentInfosWriter.FORMAT_4_0) {\n      // pre-4.0 indexes write a byte if there is a single norms file\n      byte b = input.readByte();\n      assert 1 == b;\n    }\n    int numNormGen = input.readInt();\n    if (numNormGen == NO) {\n      normGen = null;\n    } else {\n      normGen = new HashMap<Integer, Long>();\n      for(int j=0;j<numNormGen;j++) {\n        int fieldNumber = j;\n        if (format <= DefaultSegmentInfosWriter.FORMAT_4_0) {\n          fieldNumber = input.readInt();\n      }\n\n        normGen.put(fieldNumber, input.readLong());\n    }\n    }\n    isCompoundFile = input.readByte() == YES;\n\n    Directory dir0 = dir;\n    if (isCompoundFile) {\n      dir0 = new CompoundFileReader(dir, IndexFileNames.segmentFileName(name, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION));\n    }\n\n    try {\n      fieldInfos = new FieldInfos(dir0, IndexFileNames.segmentFileName(name, \"\", IndexFileNames.FIELD_INFOS_EXTENSION));\n    } finally {\n      if (dir != dir0) {\n        dir0.close();\n      }\n    }\n\n    delCount = input.readInt();\n    assert delCount <= docCount;\n\n    hasProx = input.readByte();\n    \n    // System.out.println(Thread.currentThread().getName() + \": si.read hasProx=\" + hasProx + \" seg=\" + name);\n    segmentCodecs = new SegmentCodecs(codecs);\n    if (format <= DefaultSegmentInfosWriter.FORMAT_4_0) {\n      segmentCodecs.read(input);\n    } else {\n      // codec ID on FieldInfo is 0 so it will simply use the first codec available\n      // TODO what todo if preflex is not available in the provider? register it or fail?\n      segmentCodecs.codecs = new Codec[] { codecs.lookup(\"PreFlex\")};\n    }\n    diagnostics = input.readStringStringMap();\n    \n    if (format <= DefaultSegmentInfosWriter.FORMAT_HAS_VECTORS) {\n      hasVectors = input.readByte();\n    } else {\n      final String storesSegment;\n      final String ext;\n      final boolean isCompoundFile;\n      if (docStoreOffset != -1) {\n        storesSegment = docStoreSegment;\n        isCompoundFile = docStoreIsCompoundFile;\n        ext = IndexFileNames.COMPOUND_FILE_STORE_EXTENSION;\n      } else {\n        storesSegment = name;\n        isCompoundFile = getUseCompoundFile();\n        ext = IndexFileNames.COMPOUND_FILE_EXTENSION;\n      }\n      final Directory dirToTest;\n      if (isCompoundFile) {\n        dirToTest = new CompoundFileReader(dir, IndexFileNames.segmentFileName(storesSegment, \"\", ext));\n      } else {\n        dirToTest = dir;\n      }\n      try {\n        if (dirToTest.fileExists(IndexFileNames.segmentFileName(storesSegment, \"\", IndexFileNames.VECTORS_INDEX_EXTENSION))) {\n          hasVectors = YES;\n        } else {\n          hasVectors = NO;\n        }\n      } finally {\n        if (isCompoundFile) {\n          dirToTest.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1224a4027481acce15495b03bce9b48b93b42722","date":1300792329,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentInfo#SegmentInfo(Directory,int,IndexInput,CodecProvider).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentInfo#SegmentInfo(Directory,int,IndexInput,CodecProvider).mjava","sourceNew":"  /**\n   * Construct a new SegmentInfo instance by reading a\n   * previously saved SegmentInfo from input.\n   * <p>Note: this is public only to allow access from\n   * the codecs package.</p>\n   *\n   * @param dir directory to load from\n   * @param format format of the segments info file\n   * @param input input handle to read segment info from\n   */\n  public SegmentInfo(Directory dir, int format, IndexInput input, CodecProvider codecs) throws IOException {\n    this.dir = dir;\n    if (format <= DefaultSegmentInfosWriter.FORMAT_3_1) {\n      version = input.readString();\n    }\n    name = input.readString();\n    docCount = input.readInt();\n    delGen = input.readLong();\n    docStoreOffset = input.readInt();\n    if (docStoreOffset != -1) {\n      docStoreSegment = input.readString();\n      docStoreIsCompoundFile = input.readByte() == YES;\n    } else {\n      docStoreSegment = name;\n      docStoreIsCompoundFile = false;\n    }\n    if (format > DefaultSegmentInfosWriter.FORMAT_4_0) {\n      // pre-4.0 indexes write a byte if there is a single norms file\n      byte b = input.readByte();\n      assert 1 == b;\n    }\n    int numNormGen = input.readInt();\n    if (numNormGen == NO) {\n      normGen = null;\n    } else {\n      normGen = new HashMap<Integer, Long>();\n      for(int j=0;j<numNormGen;j++) {\n        int fieldNumber = j;\n        if (format <= DefaultSegmentInfosWriter.FORMAT_4_0) {\n          fieldNumber = input.readInt();\n        }\n\n        normGen.put(fieldNumber, input.readLong());\n      }\n    }\n    isCompoundFile = input.readByte() == YES;\n\n    delCount = input.readInt();\n    assert delCount <= docCount;\n\n    hasProx = input.readByte() == YES;\n    \n    // System.out.println(Thread.currentThread().getName() + \": si.read hasProx=\" + hasProx + \" seg=\" + name);\n    segmentCodecs = new SegmentCodecs(codecs);\n    if (format <= DefaultSegmentInfosWriter.FORMAT_4_0) {\n      segmentCodecs.read(input);\n    } else {\n      // codec ID on FieldInfo is 0 so it will simply use the first codec available\n      // TODO what todo if preflex is not available in the provider? register it or fail?\n      segmentCodecs.codecs = new Codec[] { codecs.lookup(\"PreFlex\")};\n    }\n    diagnostics = input.readStringStringMap();\n    \n    if (format <= DefaultSegmentInfosWriter.FORMAT_HAS_VECTORS) {\n      hasVectors = input.readByte() == 1;\n    } else {\n      final String storesSegment;\n      final String ext;\n      final boolean isCompoundFile;\n      if (docStoreOffset != -1) {\n        storesSegment = docStoreSegment;\n        isCompoundFile = docStoreIsCompoundFile;\n        ext = IndexFileNames.COMPOUND_FILE_STORE_EXTENSION;\n      } else {\n        storesSegment = name;\n        isCompoundFile = getUseCompoundFile();\n        ext = IndexFileNames.COMPOUND_FILE_EXTENSION;\n      }\n      final Directory dirToTest;\n      if (isCompoundFile) {\n        dirToTest = new CompoundFileReader(dir, IndexFileNames.segmentFileName(storesSegment, \"\", ext));\n      } else {\n        dirToTest = dir;\n      }\n      try {\n        hasVectors = dirToTest.fileExists(IndexFileNames.segmentFileName(storesSegment, \"\", IndexFileNames.VECTORS_INDEX_EXTENSION));\n      } finally {\n        if (isCompoundFile) {\n          dirToTest.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Construct a new SegmentInfo instance by reading a\n   * previously saved SegmentInfo from input.\n   * <p>Note: this is public only to allow access from\n   * the codecs package.</p>\n   *\n   * @param dir directory to load from\n   * @param format format of the segments info file\n   * @param input input handle to read segment info from\n   */\n  public SegmentInfo(Directory dir, int format, IndexInput input, CodecProvider codecs) throws IOException {\n    this.dir = dir;\n    if (format <= DefaultSegmentInfosWriter.FORMAT_3_1) {\n      version = input.readString();\n    }\n    name = input.readString();\n    docCount = input.readInt();\n    delGen = input.readLong();\n    docStoreOffset = input.readInt();\n    if (docStoreOffset != -1) {\n      docStoreSegment = input.readString();\n      docStoreIsCompoundFile = input.readByte() == YES;\n    } else {\n      docStoreSegment = name;\n      docStoreIsCompoundFile = false;\n    }\n    if (format > DefaultSegmentInfosWriter.FORMAT_4_0) {\n      // pre-4.0 indexes write a byte if there is a single norms file\n      byte b = input.readByte();\n      assert 1 == b;\n    }\n    int numNormGen = input.readInt();\n    if (numNormGen == NO) {\n      normGen = null;\n    } else {\n      normGen = new long[numNormGen];\n      for(int j=0;j<numNormGen;j++) {\n        normGen[j] = input.readLong();\n      }\n    }\n    isCompoundFile = input.readByte() == YES;\n\n    delCount = input.readInt();\n    assert delCount <= docCount;\n\n    hasProx = input.readByte() == YES;\n    \n    // System.out.println(Thread.currentThread().getName() + \": si.read hasProx=\" + hasProx + \" seg=\" + name);\n    segmentCodecs = new SegmentCodecs(codecs);\n    if (format <= DefaultSegmentInfosWriter.FORMAT_4_0) {\n      segmentCodecs.read(input);\n    } else {\n      // codec ID on FieldInfo is 0 so it will simply use the first codec available\n      // TODO what todo if preflex is not available in the provider? register it or fail?\n      segmentCodecs.codecs = new Codec[] { codecs.lookup(\"PreFlex\")};\n    }\n    diagnostics = input.readStringStringMap();\n    \n    if (format <= DefaultSegmentInfosWriter.FORMAT_HAS_VECTORS) {\n      hasVectors = input.readByte() == 1;\n    } else {\n      final String storesSegment;\n      final String ext;\n      final boolean isCompoundFile;\n      if (docStoreOffset != -1) {\n        storesSegment = docStoreSegment;\n        isCompoundFile = docStoreIsCompoundFile;\n        ext = IndexFileNames.COMPOUND_FILE_STORE_EXTENSION;\n      } else {\n        storesSegment = name;\n        isCompoundFile = getUseCompoundFile();\n        ext = IndexFileNames.COMPOUND_FILE_EXTENSION;\n      }\n      final Directory dirToTest;\n      if (isCompoundFile) {\n        dirToTest = new CompoundFileReader(dir, IndexFileNames.segmentFileName(storesSegment, \"\", ext));\n      } else {\n        dirToTest = dir;\n      }\n      try {\n        hasVectors = dirToTest.fileExists(IndexFileNames.segmentFileName(storesSegment, \"\", IndexFileNames.VECTORS_INDEX_EXTENSION));\n      } finally {\n        if (isCompoundFile) {\n          dirToTest.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e92442af786151ee55bc283eb472f629e3c7b52b","date":1301070252,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentInfo#SegmentInfo(Directory,int,IndexInput,CodecProvider).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentInfo#SegmentInfo(Directory,int,IndexInput,CodecProvider).mjava","sourceNew":"  /**\n   * Construct a new SegmentInfo instance by reading a\n   * previously saved SegmentInfo from input.\n   * <p>Note: this is public only to allow access from\n   * the codecs package.</p>\n   *\n   * @param dir directory to load from\n   * @param format format of the segments info file\n   * @param input input handle to read segment info from\n   */\n  public SegmentInfo(Directory dir, int format, IndexInput input, CodecProvider codecs) throws IOException {\n    this.dir = dir;\n    if (format <= DefaultSegmentInfosWriter.FORMAT_3_1) {\n      version = input.readString();\n    }\n    name = input.readString();\n    docCount = input.readInt();\n    delGen = input.readLong();\n    docStoreOffset = input.readInt();\n    if (docStoreOffset != -1) {\n      docStoreSegment = input.readString();\n      docStoreIsCompoundFile = input.readByte() == YES;\n    } else {\n      docStoreSegment = name;\n      docStoreIsCompoundFile = false;\n    }\n    if (format > DefaultSegmentInfosWriter.FORMAT_4_0) {\n      // pre-4.0 indexes write a byte if there is a single norms file\n      byte b = input.readByte();\n      assert 1 == b;\n    }\n    int numNormGen = input.readInt();\n    if (numNormGen == NO) {\n      normGen = null;\n    } else {\n      normGen = new HashMap<Integer, Long>();\n      for(int j=0;j<numNormGen;j++) {\n        int fieldNumber = j;\n        if (format <= DefaultSegmentInfosWriter.FORMAT_4_0) {\n          fieldNumber = input.readInt();\n        }\n\n        normGen.put(fieldNumber, input.readLong());\n      }\n    }\n    isCompoundFile = input.readByte() == YES;\n\n    delCount = input.readInt();\n    assert delCount <= docCount;\n\n    hasProx = input.readByte() == YES;\n    \n    // System.out.println(Thread.currentThread().getName() + \": si.read hasProx=\" + hasProx + \" seg=\" + name);\n    if (format <= DefaultSegmentInfosWriter.FORMAT_4_0) {\n      segmentCodecs = new SegmentCodecs(codecs, input);\n    } else {\n      // codec ID on FieldInfo is 0 so it will simply use the first codec available\n      // TODO what todo if preflex is not available in the provider? register it or fail?\n      segmentCodecs = new SegmentCodecs(codecs, new Codec[] { codecs.lookup(\"PreFlex\")});\n    }\n    diagnostics = input.readStringStringMap();\n    \n    if (format <= DefaultSegmentInfosWriter.FORMAT_HAS_VECTORS) {\n      hasVectors = input.readByte() == 1;\n    } else {\n      final String storesSegment;\n      final String ext;\n      final boolean isCompoundFile;\n      if (docStoreOffset != -1) {\n        storesSegment = docStoreSegment;\n        isCompoundFile = docStoreIsCompoundFile;\n        ext = IndexFileNames.COMPOUND_FILE_STORE_EXTENSION;\n      } else {\n        storesSegment = name;\n        isCompoundFile = getUseCompoundFile();\n        ext = IndexFileNames.COMPOUND_FILE_EXTENSION;\n      }\n      final Directory dirToTest;\n      if (isCompoundFile) {\n        dirToTest = new CompoundFileReader(dir, IndexFileNames.segmentFileName(storesSegment, \"\", ext));\n      } else {\n        dirToTest = dir;\n      }\n      try {\n        hasVectors = dirToTest.fileExists(IndexFileNames.segmentFileName(storesSegment, \"\", IndexFileNames.VECTORS_INDEX_EXTENSION));\n      } finally {\n        if (isCompoundFile) {\n          dirToTest.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Construct a new SegmentInfo instance by reading a\n   * previously saved SegmentInfo from input.\n   * <p>Note: this is public only to allow access from\n   * the codecs package.</p>\n   *\n   * @param dir directory to load from\n   * @param format format of the segments info file\n   * @param input input handle to read segment info from\n   */\n  public SegmentInfo(Directory dir, int format, IndexInput input, CodecProvider codecs) throws IOException {\n    this.dir = dir;\n    if (format <= DefaultSegmentInfosWriter.FORMAT_3_1) {\n      version = input.readString();\n    }\n    name = input.readString();\n    docCount = input.readInt();\n    delGen = input.readLong();\n    docStoreOffset = input.readInt();\n    if (docStoreOffset != -1) {\n      docStoreSegment = input.readString();\n      docStoreIsCompoundFile = input.readByte() == YES;\n    } else {\n      docStoreSegment = name;\n      docStoreIsCompoundFile = false;\n    }\n    if (format > DefaultSegmentInfosWriter.FORMAT_4_0) {\n      // pre-4.0 indexes write a byte if there is a single norms file\n      byte b = input.readByte();\n      assert 1 == b;\n    }\n    int numNormGen = input.readInt();\n    if (numNormGen == NO) {\n      normGen = null;\n    } else {\n      normGen = new HashMap<Integer, Long>();\n      for(int j=0;j<numNormGen;j++) {\n        int fieldNumber = j;\n        if (format <= DefaultSegmentInfosWriter.FORMAT_4_0) {\n          fieldNumber = input.readInt();\n        }\n\n        normGen.put(fieldNumber, input.readLong());\n      }\n    }\n    isCompoundFile = input.readByte() == YES;\n\n    delCount = input.readInt();\n    assert delCount <= docCount;\n\n    hasProx = input.readByte() == YES;\n    \n    // System.out.println(Thread.currentThread().getName() + \": si.read hasProx=\" + hasProx + \" seg=\" + name);\n    segmentCodecs = new SegmentCodecs(codecs);\n    if (format <= DefaultSegmentInfosWriter.FORMAT_4_0) {\n      segmentCodecs.read(input);\n    } else {\n      // codec ID on FieldInfo is 0 so it will simply use the first codec available\n      // TODO what todo if preflex is not available in the provider? register it or fail?\n      segmentCodecs.codecs = new Codec[] { codecs.lookup(\"PreFlex\")};\n    }\n    diagnostics = input.readStringStringMap();\n    \n    if (format <= DefaultSegmentInfosWriter.FORMAT_HAS_VECTORS) {\n      hasVectors = input.readByte() == 1;\n    } else {\n      final String storesSegment;\n      final String ext;\n      final boolean isCompoundFile;\n      if (docStoreOffset != -1) {\n        storesSegment = docStoreSegment;\n        isCompoundFile = docStoreIsCompoundFile;\n        ext = IndexFileNames.COMPOUND_FILE_STORE_EXTENSION;\n      } else {\n        storesSegment = name;\n        isCompoundFile = getUseCompoundFile();\n        ext = IndexFileNames.COMPOUND_FILE_EXTENSION;\n      }\n      final Directory dirToTest;\n      if (isCompoundFile) {\n        dirToTest = new CompoundFileReader(dir, IndexFileNames.segmentFileName(storesSegment, \"\", ext));\n      } else {\n        dirToTest = dir;\n      }\n      try {\n        hasVectors = dirToTest.fileExists(IndexFileNames.segmentFileName(storesSegment, \"\", IndexFileNames.VECTORS_INDEX_EXTENSION));\n      } finally {\n        if (isCompoundFile) {\n          dirToTest.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentInfo#SegmentInfo(Directory,int,IndexInput,CodecProvider).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentInfo#SegmentInfo(Directory,int,IndexInput,CodecProvider).mjava","sourceNew":"  /**\n   * Construct a new SegmentInfo instance by reading a\n   * previously saved SegmentInfo from input.\n   * <p>Note: this is public only to allow access from\n   * the codecs package.</p>\n   *\n   * @param dir directory to load from\n   * @param format format of the segments info file\n   * @param input input handle to read segment info from\n   */\n  public SegmentInfo(Directory dir, int format, IndexInput input, CodecProvider codecs) throws IOException {\n    this.dir = dir;\n    if (format <= DefaultSegmentInfosWriter.FORMAT_3_1) {\n      version = input.readString();\n    }\n    name = input.readString();\n    docCount = input.readInt();\n    delGen = input.readLong();\n    docStoreOffset = input.readInt();\n    if (docStoreOffset != -1) {\n      docStoreSegment = input.readString();\n      docStoreIsCompoundFile = input.readByte() == YES;\n    } else {\n      docStoreSegment = name;\n      docStoreIsCompoundFile = false;\n    }\n    if (format > DefaultSegmentInfosWriter.FORMAT_4_0) {\n      // pre-4.0 indexes write a byte if there is a single norms file\n      byte b = input.readByte();\n      assert 1 == b;\n    }\n    int numNormGen = input.readInt();\n    if (numNormGen == NO) {\n      normGen = null;\n    } else {\n      normGen = new HashMap<Integer, Long>();\n      for(int j=0;j<numNormGen;j++) {\n        int fieldNumber = j;\n        if (format <= DefaultSegmentInfosWriter.FORMAT_4_0) {\n          fieldNumber = input.readInt();\n        }\n\n        normGen.put(fieldNumber, input.readLong());\n      }\n    }\n    isCompoundFile = input.readByte() == YES;\n\n    delCount = input.readInt();\n    assert delCount <= docCount;\n\n    hasProx = input.readByte() == YES;\n    \n    // System.out.println(Thread.currentThread().getName() + \": si.read hasProx=\" + hasProx + \" seg=\" + name);\n    if (format <= DefaultSegmentInfosWriter.FORMAT_4_0) {\n      segmentCodecs = new SegmentCodecs(codecs, input);\n    } else {\n      // codec ID on FieldInfo is 0 so it will simply use the first codec available\n      // TODO what todo if preflex is not available in the provider? register it or fail?\n      segmentCodecs = new SegmentCodecs(codecs, new Codec[] { codecs.lookup(\"PreFlex\")});\n    }\n    diagnostics = input.readStringStringMap();\n    \n    if (format <= DefaultSegmentInfosWriter.FORMAT_HAS_VECTORS) {\n      hasVectors = input.readByte() == 1;\n    } else {\n      final String storesSegment;\n      final String ext;\n      final boolean isCompoundFile;\n      if (docStoreOffset != -1) {\n        storesSegment = docStoreSegment;\n        isCompoundFile = docStoreIsCompoundFile;\n        ext = IndexFileNames.COMPOUND_FILE_STORE_EXTENSION;\n      } else {\n        storesSegment = name;\n        isCompoundFile = getUseCompoundFile();\n        ext = IndexFileNames.COMPOUND_FILE_EXTENSION;\n      }\n      final Directory dirToTest;\n      if (isCompoundFile) {\n        dirToTest = new CompoundFileReader(dir, IndexFileNames.segmentFileName(storesSegment, \"\", ext));\n      } else {\n        dirToTest = dir;\n      }\n      try {\n        hasVectors = dirToTest.fileExists(IndexFileNames.segmentFileName(storesSegment, \"\", IndexFileNames.VECTORS_INDEX_EXTENSION));\n      } finally {\n        if (isCompoundFile) {\n          dirToTest.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Construct a new SegmentInfo instance by reading a\n   * previously saved SegmentInfo from input.\n   * <p>Note: this is public only to allow access from\n   * the codecs package.</p>\n   *\n   * @param dir directory to load from\n   * @param format format of the segments info file\n   * @param input input handle to read segment info from\n   */\n  public SegmentInfo(Directory dir, int format, IndexInput input, CodecProvider codecs) throws IOException {\n    this.dir = dir;\n    if (format <= DefaultSegmentInfosWriter.FORMAT_3_1) {\n      version = input.readString();\n    }\n    name = input.readString();\n    docCount = input.readInt();\n    delGen = input.readLong();\n    docStoreOffset = input.readInt();\n    if (docStoreOffset != -1) {\n      docStoreSegment = input.readString();\n      docStoreIsCompoundFile = input.readByte() == YES;\n    } else {\n      docStoreSegment = name;\n      docStoreIsCompoundFile = false;\n    }\n    if (format > DefaultSegmentInfosWriter.FORMAT_4_0) {\n      // pre-4.0 indexes write a byte if there is a single norms file\n      byte b = input.readByte();\n      assert 1 == b;\n    }\n    int numNormGen = input.readInt();\n    if (numNormGen == NO) {\n      normGen = null;\n    } else {\n      normGen = new long[numNormGen];\n      for(int j=0;j<numNormGen;j++) {\n        normGen[j] = input.readLong();\n      }\n    }\n    isCompoundFile = input.readByte() == YES;\n\n    delCount = input.readInt();\n    assert delCount <= docCount;\n\n    hasProx = input.readByte() == YES;\n    \n    // System.out.println(Thread.currentThread().getName() + \": si.read hasProx=\" + hasProx + \" seg=\" + name);\n    segmentCodecs = new SegmentCodecs(codecs);\n    if (format <= DefaultSegmentInfosWriter.FORMAT_4_0) {\n      segmentCodecs.read(input);\n    } else {\n      // codec ID on FieldInfo is 0 so it will simply use the first codec available\n      // TODO what todo if preflex is not available in the provider? register it or fail?\n      segmentCodecs.codecs = new Codec[] { codecs.lookup(\"PreFlex\")};\n    }\n    diagnostics = input.readStringStringMap();\n    \n    if (format <= DefaultSegmentInfosWriter.FORMAT_HAS_VECTORS) {\n      hasVectors = input.readByte() == 1;\n    } else {\n      final String storesSegment;\n      final String ext;\n      final boolean isCompoundFile;\n      if (docStoreOffset != -1) {\n        storesSegment = docStoreSegment;\n        isCompoundFile = docStoreIsCompoundFile;\n        ext = IndexFileNames.COMPOUND_FILE_STORE_EXTENSION;\n      } else {\n        storesSegment = name;\n        isCompoundFile = getUseCompoundFile();\n        ext = IndexFileNames.COMPOUND_FILE_EXTENSION;\n      }\n      final Directory dirToTest;\n      if (isCompoundFile) {\n        dirToTest = new CompoundFileReader(dir, IndexFileNames.segmentFileName(storesSegment, \"\", ext));\n      } else {\n        dirToTest = dir;\n      }\n      try {\n        hasVectors = dirToTest.fileExists(IndexFileNames.segmentFileName(storesSegment, \"\", IndexFileNames.VECTORS_INDEX_EXTENSION));\n      } finally {\n        if (isCompoundFile) {\n          dirToTest.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentInfo#SegmentInfo(Directory,int,IndexInput,CodecProvider).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentInfo#SegmentInfo(Directory,int,IndexInput,CodecProvider).mjava","sourceNew":"  /**\n   * Construct a new SegmentInfo instance by reading a\n   * previously saved SegmentInfo from input.\n   * <p>Note: this is public only to allow access from\n   * the codecs package.</p>\n   *\n   * @param dir directory to load from\n   * @param format format of the segments info file\n   * @param input input handle to read segment info from\n   */\n  public SegmentInfo(Directory dir, int format, IndexInput input, CodecProvider codecs) throws IOException {\n    this.dir = dir;\n    if (format <= DefaultSegmentInfosWriter.FORMAT_3_1) {\n      version = input.readString();\n    }\n    name = input.readString();\n    docCount = input.readInt();\n    delGen = input.readLong();\n    docStoreOffset = input.readInt();\n    if (docStoreOffset != -1) {\n      docStoreSegment = input.readString();\n      docStoreIsCompoundFile = input.readByte() == YES;\n    } else {\n      docStoreSegment = name;\n      docStoreIsCompoundFile = false;\n    }\n\n    if (format > DefaultSegmentInfosWriter.FORMAT_4_0) {\n      // pre-4.0 indexes write a byte if there is a single norms file\n      byte b = input.readByte();\n      assert 1 == b;\n    }\n\n    int numNormGen = input.readInt();\n    if (numNormGen == NO) {\n      normGen = null;\n    } else {\n      normGen = new HashMap<Integer, Long>();\n      for(int j=0;j<numNormGen;j++) {\n        int fieldNumber = j;\n        if (format <= DefaultSegmentInfosWriter.FORMAT_4_0) {\n          fieldNumber = input.readInt();\n        }\n\n        normGen.put(fieldNumber, input.readLong());\n      }\n    }\n    isCompoundFile = input.readByte() == YES;\n\n    delCount = input.readInt();\n    assert delCount <= docCount;\n\n    hasProx = input.readByte() == YES;\n\n    // System.out.println(Thread.currentThread().getName() + \": si.read hasProx=\" + hasProx + \" seg=\" + name);\n    if (format <= DefaultSegmentInfosWriter.FORMAT_4_0) {\n      segmentCodecs = new SegmentCodecs(codecs, input);\n    } else {\n      // codec ID on FieldInfo is 0 so it will simply use the first codec available\n      // TODO what todo if preflex is not available in the provider? register it or fail?\n      segmentCodecs = new SegmentCodecs(codecs, new Codec[] { codecs.lookup(\"PreFlex\")});\n    }\n    diagnostics = input.readStringStringMap();\n\n    if (format <= DefaultSegmentInfosWriter.FORMAT_HAS_VECTORS) {\n      hasVectors = input.readByte() == 1;\n    } else {\n      final String storesSegment;\n      final String ext;\n      final boolean isCompoundFile;\n      if (docStoreOffset != -1) {\n        storesSegment = docStoreSegment;\n        isCompoundFile = docStoreIsCompoundFile;\n        ext = IndexFileNames.COMPOUND_FILE_STORE_EXTENSION;\n      } else {\n        storesSegment = name;\n        isCompoundFile = getUseCompoundFile();\n        ext = IndexFileNames.COMPOUND_FILE_EXTENSION;\n      }\n      final Directory dirToTest;\n      if (isCompoundFile) {\n        dirToTest = new CompoundFileReader(dir, IndexFileNames.segmentFileName(storesSegment, \"\", ext));\n      } else {\n        dirToTest = dir;\n      }\n      try {\n        hasVectors = dirToTest.fileExists(IndexFileNames.segmentFileName(storesSegment, \"\", IndexFileNames.VECTORS_INDEX_EXTENSION));\n      } finally {\n        if (isCompoundFile) {\n          dirToTest.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Construct a new SegmentInfo instance by reading a\n   * previously saved SegmentInfo from input.\n   * <p>Note: this is public only to allow access from\n   * the codecs package.</p>\n   *\n   * @param dir directory to load from\n   * @param format format of the segments info file\n   * @param input input handle to read segment info from\n   */\n  public SegmentInfo(Directory dir, int format, IndexInput input, CodecProvider codecs) throws IOException {\n    this.dir = dir;\n    if (format <= DefaultSegmentInfosWriter.FORMAT_3_1) {\n      version = input.readString();\n    }\n    name = input.readString();\n    docCount = input.readInt();\n    delGen = input.readLong();\n    docStoreOffset = input.readInt();\n    if (docStoreOffset != -1) {\n      docStoreSegment = input.readString();\n      docStoreIsCompoundFile = input.readByte() == YES;\n    } else {\n      docStoreSegment = name;\n      docStoreIsCompoundFile = false;\n    }\n\n    if (format > DefaultSegmentInfosWriter.FORMAT_4_0) {\n      // pre-4.0 indexes write a byte if there is a single norms file\n      byte b = input.readByte();\n      assert 1 == b;\n    }\n\n    int numNormGen = input.readInt();\n    if (numNormGen == NO) {\n      normGen = null;\n    } else {\n      normGen = new HashMap<Integer, Long>();\n      for(int j=0;j<numNormGen;j++) {\n        int fieldNumber = j;\n        if (format <= DefaultSegmentInfosWriter.FORMAT_4_0) {\n          fieldNumber = input.readInt();\n      }\n\n        normGen.put(fieldNumber, input.readLong());\n    }\n    }\n    isCompoundFile = input.readByte() == YES;\n\n    Directory dir0 = dir;\n    if (isCompoundFile) {\n      dir0 = new CompoundFileReader(dir, IndexFileNames.segmentFileName(name, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION));\n    }\n\n    try {\n      fieldInfos = new FieldInfos(dir0, IndexFileNames.segmentFileName(name, \"\", IndexFileNames.FIELD_INFOS_EXTENSION));\n    } finally {\n      if (dir != dir0) {\n        dir0.close();\n      }\n    }\n\n    delCount = input.readInt();\n    assert delCount <= docCount;\n\n    hasProx = input.readByte();\n\n    // System.out.println(Thread.currentThread().getName() + \": si.read hasProx=\" + hasProx + \" seg=\" + name);\n    segmentCodecs = new SegmentCodecs(codecs);\n    if (format <= DefaultSegmentInfosWriter.FORMAT_4_0) {\n      segmentCodecs.read(input);\n    } else {\n      // codec ID on FieldInfo is 0 so it will simply use the first codec available\n      // TODO what todo if preflex is not available in the provider? register it or fail?\n      segmentCodecs.codecs = new Codec[] { codecs.lookup(\"PreFlex\")};\n    }\n    diagnostics = input.readStringStringMap();\n\n    if (format <= DefaultSegmentInfosWriter.FORMAT_HAS_VECTORS) {\n      hasVectors = input.readByte();\n    } else {\n      final String storesSegment;\n      final String ext;\n      final boolean isCompoundFile;\n      if (docStoreOffset != -1) {\n        storesSegment = docStoreSegment;\n        isCompoundFile = docStoreIsCompoundFile;\n        ext = IndexFileNames.COMPOUND_FILE_STORE_EXTENSION;\n      } else {\n        storesSegment = name;\n        isCompoundFile = getUseCompoundFile();\n        ext = IndexFileNames.COMPOUND_FILE_EXTENSION;\n      }\n      final Directory dirToTest;\n      if (isCompoundFile) {\n        dirToTest = new CompoundFileReader(dir, IndexFileNames.segmentFileName(storesSegment, \"\", ext));\n      } else {\n        dirToTest = dir;\n      }\n      try {\n        if (dirToTest.fileExists(IndexFileNames.segmentFileName(storesSegment, \"\", IndexFileNames.VECTORS_INDEX_EXTENSION))) {\n          hasVectors = YES;\n        } else {\n          hasVectors = NO;\n        }\n      } finally {\n        if (isCompoundFile) {\n          dirToTest.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b3e06be49006ecac364d39d12b9c9f74882f9b9f","date":1304289513,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentInfo#SegmentInfo(Directory,int,IndexInput,CodecProvider).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentInfo#SegmentInfo(Directory,int,IndexInput,CodecProvider).mjava","sourceNew":"  /**\n   * Construct a new SegmentInfo instance by reading a\n   * previously saved SegmentInfo from input.\n   * <p>Note: this is public only to allow access from\n   * the codecs package.</p>\n   *\n   * @param dir directory to load from\n   * @param format format of the segments info file\n   * @param input input handle to read segment info from\n   */\n  public SegmentInfo(Directory dir, int format, IndexInput input, CodecProvider codecs) throws IOException {\n    this.dir = dir;\n    if (format <= DefaultSegmentInfosWriter.FORMAT_3_1) {\n      version = input.readString();\n    }\n    name = input.readString();\n    docCount = input.readInt();\n    delGen = input.readLong();\n    docStoreOffset = input.readInt();\n    if (docStoreOffset != -1) {\n      docStoreSegment = input.readString();\n      docStoreIsCompoundFile = input.readByte() == YES;\n    } else {\n      docStoreSegment = name;\n      docStoreIsCompoundFile = false;\n    }\n\n    if (format > DefaultSegmentInfosWriter.FORMAT_4_0) {\n      // pre-4.0 indexes write a byte if there is a single norms file\n      byte b = input.readByte();\n      assert 1 == b;\n    }\n\n    int numNormGen = input.readInt();\n    if (numNormGen == NO) {\n      normGen = null;\n    } else {\n      normGen = new HashMap<Integer, Long>();\n      for(int j=0;j<numNormGen;j++) {\n        int fieldNumber = j;\n        if (format <= DefaultSegmentInfosWriter.FORMAT_4_0) {\n          fieldNumber = input.readInt();\n        }\n\n        normGen.put(fieldNumber, input.readLong());\n      }\n    }\n    isCompoundFile = input.readByte() == YES;\n\n    delCount = input.readInt();\n    assert delCount <= docCount;\n\n    hasProx = input.readByte() == YES;\n\n    // System.out.println(Thread.currentThread().getName() + \": si.read hasProx=\" + hasProx + \" seg=\" + name);\n    if (format <= DefaultSegmentInfosWriter.FORMAT_4_0) {\n      segmentCodecs = new SegmentCodecs(codecs, input);\n    } else {\n      // codec ID on FieldInfo is 0 so it will simply use the first codec available\n      // TODO what todo if preflex is not available in the provider? register it or fail?\n      segmentCodecs = new SegmentCodecs(codecs, new Codec[] { codecs.lookup(\"PreFlex\")});\n    }\n    diagnostics = input.readStringStringMap();\n\n    if (format <= DefaultSegmentInfosWriter.FORMAT_HAS_VECTORS) {\n      hasVectors = input.readByte() == 1;\n    } else {\n      final String storesSegment;\n      final String ext;\n      final boolean isCompoundFile;\n      if (docStoreOffset != -1) {\n        storesSegment = docStoreSegment;\n        isCompoundFile = docStoreIsCompoundFile;\n        ext = IndexFileNames.COMPOUND_FILE_STORE_EXTENSION;\n      } else {\n        storesSegment = name;\n        isCompoundFile = getUseCompoundFile();\n        ext = IndexFileNames.COMPOUND_FILE_EXTENSION;\n      }\n      final Directory dirToTest;\n      if (isCompoundFile) {\n        dirToTest = new CompoundFileReader(dir, IndexFileNames.segmentFileName(storesSegment, \"\", ext));\n      } else {\n        dirToTest = dir;\n      }\n      try {\n        hasVectors = dirToTest.fileExists(IndexFileNames.segmentFileName(storesSegment, \"\", IndexFileNames.VECTORS_INDEX_EXTENSION));\n      } finally {\n        if (isCompoundFile) {\n          dirToTest.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Construct a new SegmentInfo instance by reading a\n   * previously saved SegmentInfo from input.\n   * <p>Note: this is public only to allow access from\n   * the codecs package.</p>\n   *\n   * @param dir directory to load from\n   * @param format format of the segments info file\n   * @param input input handle to read segment info from\n   */\n  public SegmentInfo(Directory dir, int format, IndexInput input, CodecProvider codecs) throws IOException {\n    this.dir = dir;\n    if (format <= DefaultSegmentInfosWriter.FORMAT_3_1) {\n      version = input.readString();\n    }\n    name = input.readString();\n    docCount = input.readInt();\n    delGen = input.readLong();\n    docStoreOffset = input.readInt();\n    if (docStoreOffset != -1) {\n      docStoreSegment = input.readString();\n      docStoreIsCompoundFile = input.readByte() == YES;\n    } else {\n      docStoreSegment = name;\n      docStoreIsCompoundFile = false;\n    }\n    if (format > DefaultSegmentInfosWriter.FORMAT_4_0) {\n      // pre-4.0 indexes write a byte if there is a single norms file\n      byte b = input.readByte();\n      assert 1 == b;\n    }\n    int numNormGen = input.readInt();\n    if (numNormGen == NO) {\n      normGen = null;\n    } else {\n      normGen = new HashMap<Integer, Long>();\n      for(int j=0;j<numNormGen;j++) {\n        int fieldNumber = j;\n        if (format <= DefaultSegmentInfosWriter.FORMAT_4_0) {\n          fieldNumber = input.readInt();\n        }\n\n        normGen.put(fieldNumber, input.readLong());\n      }\n    }\n    isCompoundFile = input.readByte() == YES;\n\n    delCount = input.readInt();\n    assert delCount <= docCount;\n\n    hasProx = input.readByte() == YES;\n    \n    // System.out.println(Thread.currentThread().getName() + \": si.read hasProx=\" + hasProx + \" seg=\" + name);\n    if (format <= DefaultSegmentInfosWriter.FORMAT_4_0) {\n      segmentCodecs = new SegmentCodecs(codecs, input);\n    } else {\n      // codec ID on FieldInfo is 0 so it will simply use the first codec available\n      // TODO what todo if preflex is not available in the provider? register it or fail?\n      segmentCodecs = new SegmentCodecs(codecs, new Codec[] { codecs.lookup(\"PreFlex\")});\n    }\n    diagnostics = input.readStringStringMap();\n    \n    if (format <= DefaultSegmentInfosWriter.FORMAT_HAS_VECTORS) {\n      hasVectors = input.readByte() == 1;\n    } else {\n      final String storesSegment;\n      final String ext;\n      final boolean isCompoundFile;\n      if (docStoreOffset != -1) {\n        storesSegment = docStoreSegment;\n        isCompoundFile = docStoreIsCompoundFile;\n        ext = IndexFileNames.COMPOUND_FILE_STORE_EXTENSION;\n      } else {\n        storesSegment = name;\n        isCompoundFile = getUseCompoundFile();\n        ext = IndexFileNames.COMPOUND_FILE_EXTENSION;\n      }\n      final Directory dirToTest;\n      if (isCompoundFile) {\n        dirToTest = new CompoundFileReader(dir, IndexFileNames.segmentFileName(storesSegment, \"\", ext));\n      } else {\n        dirToTest = dir;\n      }\n      try {\n        hasVectors = dirToTest.fileExists(IndexFileNames.segmentFileName(storesSegment, \"\", IndexFileNames.VECTORS_INDEX_EXTENSION));\n      } finally {\n        if (isCompoundFile) {\n          dirToTest.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentInfo#SegmentInfo(Directory,int,IndexInput,CodecProvider).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentInfo#SegmentInfo(Directory,int,IndexInput,CodecProvider).mjava","sourceNew":"  /**\n   * Construct a new SegmentInfo instance by reading a\n   * previously saved SegmentInfo from input.\n   * <p>Note: this is public only to allow access from\n   * the codecs package.</p>\n   *\n   * @param dir directory to load from\n   * @param format format of the segments info file\n   * @param input input handle to read segment info from\n   */\n  public SegmentInfo(Directory dir, int format, IndexInput input, CodecProvider codecs) throws IOException {\n    this.dir = dir;\n    if (format <= DefaultSegmentInfosWriter.FORMAT_3_1) {\n      version = input.readString();\n    }\n    name = input.readString();\n    docCount = input.readInt();\n    delGen = input.readLong();\n    docStoreOffset = input.readInt();\n    if (docStoreOffset != -1) {\n      docStoreSegment = input.readString();\n      docStoreIsCompoundFile = input.readByte() == YES;\n    } else {\n      docStoreSegment = name;\n      docStoreIsCompoundFile = false;\n    }\n\n    if (format > DefaultSegmentInfosWriter.FORMAT_4_0) {\n      // pre-4.0 indexes write a byte if there is a single norms file\n      byte b = input.readByte();\n      assert 1 == b;\n    }\n\n    int numNormGen = input.readInt();\n    if (numNormGen == NO) {\n      normGen = null;\n    } else {\n      normGen = new HashMap<Integer, Long>();\n      for(int j=0;j<numNormGen;j++) {\n        int fieldNumber = j;\n        if (format <= DefaultSegmentInfosWriter.FORMAT_4_0) {\n          fieldNumber = input.readInt();\n        }\n\n        normGen.put(fieldNumber, input.readLong());\n      }\n    }\n    isCompoundFile = input.readByte() == YES;\n\n    delCount = input.readInt();\n    assert delCount <= docCount;\n\n    hasProx = input.readByte() == YES;\n\n    // System.out.println(Thread.currentThread().getName() + \": si.read hasProx=\" + hasProx + \" seg=\" + name);\n    if (format <= DefaultSegmentInfosWriter.FORMAT_4_0) {\n      segmentCodecs = new SegmentCodecs(codecs, input);\n    } else {\n      // codec ID on FieldInfo is 0 so it will simply use the first codec available\n      // TODO what todo if preflex is not available in the provider? register it or fail?\n      segmentCodecs = new SegmentCodecs(codecs, new Codec[] { codecs.lookup(\"PreFlex\")});\n    }\n    diagnostics = input.readStringStringMap();\n\n    if (format <= DefaultSegmentInfosWriter.FORMAT_HAS_VECTORS) {\n      hasVectors = input.readByte() == 1;\n    } else {\n      final String storesSegment;\n      final String ext;\n      final boolean isCompoundFile;\n      if (docStoreOffset != -1) {\n        storesSegment = docStoreSegment;\n        isCompoundFile = docStoreIsCompoundFile;\n        ext = IndexFileNames.COMPOUND_FILE_STORE_EXTENSION;\n      } else {\n        storesSegment = name;\n        isCompoundFile = getUseCompoundFile();\n        ext = IndexFileNames.COMPOUND_FILE_EXTENSION;\n      }\n      final Directory dirToTest;\n      if (isCompoundFile) {\n        dirToTest = new CompoundFileReader(dir, IndexFileNames.segmentFileName(storesSegment, \"\", ext));\n      } else {\n        dirToTest = dir;\n      }\n      try {\n        hasVectors = dirToTest.fileExists(IndexFileNames.segmentFileName(storesSegment, \"\", IndexFileNames.VECTORS_INDEX_EXTENSION));\n      } finally {\n        if (isCompoundFile) {\n          dirToTest.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Construct a new SegmentInfo instance by reading a\n   * previously saved SegmentInfo from input.\n   * <p>Note: this is public only to allow access from\n   * the codecs package.</p>\n   *\n   * @param dir directory to load from\n   * @param format format of the segments info file\n   * @param input input handle to read segment info from\n   */\n  public SegmentInfo(Directory dir, int format, IndexInput input, CodecProvider codecs) throws IOException {\n    this.dir = dir;\n    if (format <= DefaultSegmentInfosWriter.FORMAT_3_1) {\n      version = input.readString();\n    }\n    name = input.readString();\n    docCount = input.readInt();\n    delGen = input.readLong();\n    docStoreOffset = input.readInt();\n    if (docStoreOffset != -1) {\n      docStoreSegment = input.readString();\n      docStoreIsCompoundFile = input.readByte() == YES;\n    } else {\n      docStoreSegment = name;\n      docStoreIsCompoundFile = false;\n    }\n    if (format > DefaultSegmentInfosWriter.FORMAT_4_0) {\n      // pre-4.0 indexes write a byte if there is a single norms file\n      byte b = input.readByte();\n      assert 1 == b;\n    }\n    int numNormGen = input.readInt();\n    if (numNormGen == NO) {\n      normGen = null;\n    } else {\n      normGen = new HashMap<Integer, Long>();\n      for(int j=0;j<numNormGen;j++) {\n        int fieldNumber = j;\n        if (format <= DefaultSegmentInfosWriter.FORMAT_4_0) {\n          fieldNumber = input.readInt();\n        }\n\n        normGen.put(fieldNumber, input.readLong());\n      }\n    }\n    isCompoundFile = input.readByte() == YES;\n\n    delCount = input.readInt();\n    assert delCount <= docCount;\n\n    hasProx = input.readByte() == YES;\n    \n    // System.out.println(Thread.currentThread().getName() + \": si.read hasProx=\" + hasProx + \" seg=\" + name);\n    if (format <= DefaultSegmentInfosWriter.FORMAT_4_0) {\n      segmentCodecs = new SegmentCodecs(codecs, input);\n    } else {\n      // codec ID on FieldInfo is 0 so it will simply use the first codec available\n      // TODO what todo if preflex is not available in the provider? register it or fail?\n      segmentCodecs = new SegmentCodecs(codecs, new Codec[] { codecs.lookup(\"PreFlex\")});\n    }\n    diagnostics = input.readStringStringMap();\n    \n    if (format <= DefaultSegmentInfosWriter.FORMAT_HAS_VECTORS) {\n      hasVectors = input.readByte() == 1;\n    } else {\n      final String storesSegment;\n      final String ext;\n      final boolean isCompoundFile;\n      if (docStoreOffset != -1) {\n        storesSegment = docStoreSegment;\n        isCompoundFile = docStoreIsCompoundFile;\n        ext = IndexFileNames.COMPOUND_FILE_STORE_EXTENSION;\n      } else {\n        storesSegment = name;\n        isCompoundFile = getUseCompoundFile();\n        ext = IndexFileNames.COMPOUND_FILE_EXTENSION;\n      }\n      final Directory dirToTest;\n      if (isCompoundFile) {\n        dirToTest = new CompoundFileReader(dir, IndexFileNames.segmentFileName(storesSegment, \"\", ext));\n      } else {\n        dirToTest = dir;\n      }\n      try {\n        hasVectors = dirToTest.fileExists(IndexFileNames.segmentFileName(storesSegment, \"\", IndexFileNames.VECTORS_INDEX_EXTENSION));\n      } finally {\n        if (isCompoundFile) {\n          dirToTest.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fe2fc74577855eadfb5eae3153c2fffdaaf791","date":1305237079,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentInfo#SegmentInfo(Directory,int,IndexInput,CodecProvider).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentInfo#SegmentInfo(Directory,int,IndexInput,CodecProvider).mjava","sourceNew":"  /**\n   * Construct a new SegmentInfo instance by reading a\n   * previously saved SegmentInfo from input.\n   * <p>Note: this is public only to allow access from\n   * the codecs package.</p>\n   *\n   * @param dir directory to load from\n   * @param format format of the segments info file\n   * @param input input handle to read segment info from\n   */\n  public SegmentInfo(Directory dir, int format, IndexInput input, CodecProvider codecs) throws IOException {\n    this.dir = dir;\n    if (format <= DefaultSegmentInfosWriter.FORMAT_3_1) {\n      version = input.readString();\n    }\n    name = input.readString();\n    docCount = input.readInt();\n    delGen = input.readLong();\n    docStoreOffset = input.readInt();\n    if (docStoreOffset != -1) {\n      docStoreSegment = input.readString();\n      docStoreIsCompoundFile = input.readByte() == YES;\n    } else {\n      docStoreSegment = name;\n      docStoreIsCompoundFile = false;\n    }\n\n    if (format > DefaultSegmentInfosWriter.FORMAT_4_0) {\n      // pre-4.0 indexes write a byte if there is a single norms file\n      byte b = input.readByte();\n      assert 1 == b;\n    }\n\n    int numNormGen = input.readInt();\n    if (numNormGen == NO) {\n      normGen = null;\n    } else {\n      normGen = new HashMap<Integer, Long>();\n      for(int j=0;j<numNormGen;j++) {\n        int fieldNumber = j;\n        if (format <= DefaultSegmentInfosWriter.FORMAT_4_0) {\n          fieldNumber = input.readInt();\n        }\n\n        normGen.put(fieldNumber, input.readLong());\n      }\n    }\n    isCompoundFile = input.readByte() == YES;\n\n    delCount = input.readInt();\n    assert delCount <= docCount;\n\n    hasProx = input.readByte();\n\n    // System.out.println(Thread.currentThread().getName() + \": si.read hasProx=\" + hasProx + \" seg=\" + name);\n    if (format <= DefaultSegmentInfosWriter.FORMAT_4_0) {\n      segmentCodecs = new SegmentCodecs(codecs, input);\n    } else {\n      // codec ID on FieldInfo is 0 so it will simply use the first codec available\n      // TODO what todo if preflex is not available in the provider? register it or fail?\n      segmentCodecs = new SegmentCodecs(codecs, new Codec[] { codecs.lookup(\"PreFlex\")});\n    }\n    diagnostics = input.readStringStringMap();\n\n    if (format <= DefaultSegmentInfosWriter.FORMAT_HAS_VECTORS) {\n      hasVectors = input.readByte();\n    } else {\n      final String storesSegment;\n      final String ext;\n      final boolean isCompoundFile;\n      if (docStoreOffset != -1) {\n        storesSegment = docStoreSegment;\n        isCompoundFile = docStoreIsCompoundFile;\n        ext = IndexFileNames.COMPOUND_FILE_STORE_EXTENSION;\n      } else {\n        storesSegment = name;\n        isCompoundFile = getUseCompoundFile();\n        ext = IndexFileNames.COMPOUND_FILE_EXTENSION;\n      }\n      final Directory dirToTest;\n      if (isCompoundFile) {\n        dirToTest = new CompoundFileReader(dir, IndexFileNames.segmentFileName(storesSegment, \"\", ext));\n      } else {\n        dirToTest = dir;\n      }\n      try {\n        hasVectors = dirToTest.fileExists(IndexFileNames.segmentFileName(storesSegment, \"\", IndexFileNames.VECTORS_INDEX_EXTENSION)) ? YES : NO;\n      } finally {\n        if (isCompoundFile) {\n          dirToTest.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Construct a new SegmentInfo instance by reading a\n   * previously saved SegmentInfo from input.\n   * <p>Note: this is public only to allow access from\n   * the codecs package.</p>\n   *\n   * @param dir directory to load from\n   * @param format format of the segments info file\n   * @param input input handle to read segment info from\n   */\n  public SegmentInfo(Directory dir, int format, IndexInput input, CodecProvider codecs) throws IOException {\n    this.dir = dir;\n    if (format <= DefaultSegmentInfosWriter.FORMAT_3_1) {\n      version = input.readString();\n    }\n    name = input.readString();\n    docCount = input.readInt();\n    delGen = input.readLong();\n    docStoreOffset = input.readInt();\n    if (docStoreOffset != -1) {\n      docStoreSegment = input.readString();\n      docStoreIsCompoundFile = input.readByte() == YES;\n    } else {\n      docStoreSegment = name;\n      docStoreIsCompoundFile = false;\n    }\n\n    if (format > DefaultSegmentInfosWriter.FORMAT_4_0) {\n      // pre-4.0 indexes write a byte if there is a single norms file\n      byte b = input.readByte();\n      assert 1 == b;\n    }\n\n    int numNormGen = input.readInt();\n    if (numNormGen == NO) {\n      normGen = null;\n    } else {\n      normGen = new HashMap<Integer, Long>();\n      for(int j=0;j<numNormGen;j++) {\n        int fieldNumber = j;\n        if (format <= DefaultSegmentInfosWriter.FORMAT_4_0) {\n          fieldNumber = input.readInt();\n        }\n\n        normGen.put(fieldNumber, input.readLong());\n      }\n    }\n    isCompoundFile = input.readByte() == YES;\n\n    delCount = input.readInt();\n    assert delCount <= docCount;\n\n    hasProx = input.readByte() == YES;\n\n    // System.out.println(Thread.currentThread().getName() + \": si.read hasProx=\" + hasProx + \" seg=\" + name);\n    if (format <= DefaultSegmentInfosWriter.FORMAT_4_0) {\n      segmentCodecs = new SegmentCodecs(codecs, input);\n    } else {\n      // codec ID on FieldInfo is 0 so it will simply use the first codec available\n      // TODO what todo if preflex is not available in the provider? register it or fail?\n      segmentCodecs = new SegmentCodecs(codecs, new Codec[] { codecs.lookup(\"PreFlex\")});\n    }\n    diagnostics = input.readStringStringMap();\n\n    if (format <= DefaultSegmentInfosWriter.FORMAT_HAS_VECTORS) {\n      hasVectors = input.readByte() == 1;\n    } else {\n      final String storesSegment;\n      final String ext;\n      final boolean isCompoundFile;\n      if (docStoreOffset != -1) {\n        storesSegment = docStoreSegment;\n        isCompoundFile = docStoreIsCompoundFile;\n        ext = IndexFileNames.COMPOUND_FILE_STORE_EXTENSION;\n      } else {\n        storesSegment = name;\n        isCompoundFile = getUseCompoundFile();\n        ext = IndexFileNames.COMPOUND_FILE_EXTENSION;\n      }\n      final Directory dirToTest;\n      if (isCompoundFile) {\n        dirToTest = new CompoundFileReader(dir, IndexFileNames.segmentFileName(storesSegment, \"\", ext));\n      } else {\n        dirToTest = dir;\n      }\n      try {\n        hasVectors = dirToTest.fileExists(IndexFileNames.segmentFileName(storesSegment, \"\", IndexFileNames.VECTORS_INDEX_EXTENSION));\n      } finally {\n        if (isCompoundFile) {\n          dirToTest.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c700f8d0842d3e52bb2bdfbfdc046a137e836edb","date":1305285499,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentInfo#SegmentInfo(Directory,int,IndexInput,CodecProvider).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentInfo#SegmentInfo(Directory,int,IndexInput,CodecProvider).mjava","sourceNew":"  /**\n   * Construct a new SegmentInfo instance by reading a\n   * previously saved SegmentInfo from input.\n   * <p>Note: this is public only to allow access from\n   * the codecs package.</p>\n   *\n   * @param dir directory to load from\n   * @param format format of the segments info file\n   * @param input input handle to read segment info from\n   */\n  public SegmentInfo(Directory dir, int format, IndexInput input, CodecProvider codecs) throws IOException {\n    this.dir = dir;\n    if (format <= DefaultSegmentInfosWriter.FORMAT_3_1) {\n      version = input.readString();\n    }\n    name = input.readString();\n    docCount = input.readInt();\n    delGen = input.readLong();\n    docStoreOffset = input.readInt();\n    if (docStoreOffset != -1) {\n      docStoreSegment = input.readString();\n      docStoreIsCompoundFile = input.readByte() == YES;\n    } else {\n      docStoreSegment = name;\n      docStoreIsCompoundFile = false;\n    }\n\n    if (format > DefaultSegmentInfosWriter.FORMAT_4_0) {\n      // pre-4.0 indexes write a byte if there is a single norms file\n      byte b = input.readByte();\n      assert 1 == b;\n    }\n\n    int numNormGen = input.readInt();\n    if (numNormGen == NO) {\n      normGen = null;\n    } else {\n      normGen = new HashMap<Integer, Long>();\n      for(int j=0;j<numNormGen;j++) {\n        int fieldNumber = j;\n        if (format <= DefaultSegmentInfosWriter.FORMAT_4_0) {\n          fieldNumber = input.readInt();\n        }\n\n        normGen.put(fieldNumber, input.readLong());\n      }\n    }\n    isCompoundFile = input.readByte() == YES;\n\n    delCount = input.readInt();\n    assert delCount <= docCount;\n\n    hasProx = input.readByte();\n\n    // System.out.println(Thread.currentThread().getName() + \": si.read hasProx=\" + hasProx + \" seg=\" + name);\n    if (format <= DefaultSegmentInfosWriter.FORMAT_4_0) {\n      segmentCodecs = new SegmentCodecs(codecs, input);\n    } else {\n      // codec ID on FieldInfo is 0 so it will simply use the first codec available\n      // TODO what todo if preflex is not available in the provider? register it or fail?\n      segmentCodecs = new SegmentCodecs(codecs, new Codec[] { codecs.lookup(\"PreFlex\")});\n    }\n    diagnostics = input.readStringStringMap();\n\n    if (format <= DefaultSegmentInfosWriter.FORMAT_HAS_VECTORS) {\n      hasVectors = input.readByte();\n    } else {\n      final String storesSegment;\n      final String ext;\n      final boolean isCompoundFile;\n      if (docStoreOffset != -1) {\n        storesSegment = docStoreSegment;\n        isCompoundFile = docStoreIsCompoundFile;\n        ext = IndexFileNames.COMPOUND_FILE_STORE_EXTENSION;\n      } else {\n        storesSegment = name;\n        isCompoundFile = getUseCompoundFile();\n        ext = IndexFileNames.COMPOUND_FILE_EXTENSION;\n      }\n      final Directory dirToTest;\n      if (isCompoundFile) {\n        dirToTest = new CompoundFileReader(dir, IndexFileNames.segmentFileName(storesSegment, \"\", ext));\n      } else {\n        dirToTest = dir;\n      }\n      try {\n        hasVectors = dirToTest.fileExists(IndexFileNames.segmentFileName(storesSegment, \"\", IndexFileNames.VECTORS_INDEX_EXTENSION)) ? YES : NO;\n      } finally {\n        if (isCompoundFile) {\n          dirToTest.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Construct a new SegmentInfo instance by reading a\n   * previously saved SegmentInfo from input.\n   * <p>Note: this is public only to allow access from\n   * the codecs package.</p>\n   *\n   * @param dir directory to load from\n   * @param format format of the segments info file\n   * @param input input handle to read segment info from\n   */\n  public SegmentInfo(Directory dir, int format, IndexInput input, CodecProvider codecs) throws IOException {\n    this.dir = dir;\n    if (format <= DefaultSegmentInfosWriter.FORMAT_3_1) {\n      version = input.readString();\n    }\n    name = input.readString();\n    docCount = input.readInt();\n    delGen = input.readLong();\n    docStoreOffset = input.readInt();\n    if (docStoreOffset != -1) {\n      docStoreSegment = input.readString();\n      docStoreIsCompoundFile = input.readByte() == YES;\n    } else {\n      docStoreSegment = name;\n      docStoreIsCompoundFile = false;\n    }\n\n    if (format > DefaultSegmentInfosWriter.FORMAT_4_0) {\n      // pre-4.0 indexes write a byte if there is a single norms file\n      byte b = input.readByte();\n      assert 1 == b;\n    }\n\n    int numNormGen = input.readInt();\n    if (numNormGen == NO) {\n      normGen = null;\n    } else {\n      normGen = new HashMap<Integer, Long>();\n      for(int j=0;j<numNormGen;j++) {\n        int fieldNumber = j;\n        if (format <= DefaultSegmentInfosWriter.FORMAT_4_0) {\n          fieldNumber = input.readInt();\n        }\n\n        normGen.put(fieldNumber, input.readLong());\n      }\n    }\n    isCompoundFile = input.readByte() == YES;\n\n    delCount = input.readInt();\n    assert delCount <= docCount;\n\n    hasProx = input.readByte() == YES;\n\n    // System.out.println(Thread.currentThread().getName() + \": si.read hasProx=\" + hasProx + \" seg=\" + name);\n    if (format <= DefaultSegmentInfosWriter.FORMAT_4_0) {\n      segmentCodecs = new SegmentCodecs(codecs, input);\n    } else {\n      // codec ID on FieldInfo is 0 so it will simply use the first codec available\n      // TODO what todo if preflex is not available in the provider? register it or fail?\n      segmentCodecs = new SegmentCodecs(codecs, new Codec[] { codecs.lookup(\"PreFlex\")});\n    }\n    diagnostics = input.readStringStringMap();\n\n    if (format <= DefaultSegmentInfosWriter.FORMAT_HAS_VECTORS) {\n      hasVectors = input.readByte() == 1;\n    } else {\n      final String storesSegment;\n      final String ext;\n      final boolean isCompoundFile;\n      if (docStoreOffset != -1) {\n        storesSegment = docStoreSegment;\n        isCompoundFile = docStoreIsCompoundFile;\n        ext = IndexFileNames.COMPOUND_FILE_STORE_EXTENSION;\n      } else {\n        storesSegment = name;\n        isCompoundFile = getUseCompoundFile();\n        ext = IndexFileNames.COMPOUND_FILE_EXTENSION;\n      }\n      final Directory dirToTest;\n      if (isCompoundFile) {\n        dirToTest = new CompoundFileReader(dir, IndexFileNames.segmentFileName(storesSegment, \"\", ext));\n      } else {\n        dirToTest = dir;\n      }\n      try {\n        hasVectors = dirToTest.fileExists(IndexFileNames.segmentFileName(storesSegment, \"\", IndexFileNames.VECTORS_INDEX_EXTENSION));\n      } finally {\n        if (isCompoundFile) {\n          dirToTest.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentInfo#SegmentInfo(Directory,int,IndexInput,CodecProvider).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentInfo#SegmentInfo(Directory,int,IndexInput,CodecProvider).mjava","sourceNew":"  /**\n   * Construct a new SegmentInfo instance by reading a\n   * previously saved SegmentInfo from input.\n   * <p>Note: this is public only to allow access from\n   * the codecs package.</p>\n   *\n   * @param dir directory to load from\n   * @param format format of the segments info file\n   * @param input input handle to read segment info from\n   */\n  public SegmentInfo(Directory dir, int format, IndexInput input, CodecProvider codecs) throws IOException {\n    this.dir = dir;\n    if (format <= DefaultSegmentInfosWriter.FORMAT_3_1) {\n      version = input.readString();\n    }\n    name = input.readString();\n    docCount = input.readInt();\n    delGen = input.readLong();\n    docStoreOffset = input.readInt();\n    if (docStoreOffset != -1) {\n      docStoreSegment = input.readString();\n      docStoreIsCompoundFile = input.readByte() == YES;\n    } else {\n      docStoreSegment = name;\n      docStoreIsCompoundFile = false;\n    }\n\n    if (format > DefaultSegmentInfosWriter.FORMAT_4_0) {\n      // pre-4.0 indexes write a byte if there is a single norms file\n      byte b = input.readByte();\n      assert 1 == b;\n    }\n\n    int numNormGen = input.readInt();\n    if (numNormGen == NO) {\n      normGen = null;\n    } else {\n      normGen = new HashMap<Integer, Long>();\n      for(int j=0;j<numNormGen;j++) {\n        int fieldNumber = j;\n        if (format <= DefaultSegmentInfosWriter.FORMAT_4_0) {\n          fieldNumber = input.readInt();\n        }\n\n        normGen.put(fieldNumber, input.readLong());\n      }\n    }\n    isCompoundFile = input.readByte() == YES;\n\n    delCount = input.readInt();\n    assert delCount <= docCount;\n\n    hasProx = input.readByte();\n\n    // System.out.println(Thread.currentThread().getName() + \": si.read hasProx=\" + hasProx + \" seg=\" + name);\n    if (format <= DefaultSegmentInfosWriter.FORMAT_4_0) {\n      segmentCodecs = new SegmentCodecs(codecs, input);\n    } else {\n      // codec ID on FieldInfo is 0 so it will simply use the first codec available\n      // TODO what todo if preflex is not available in the provider? register it or fail?\n      segmentCodecs = new SegmentCodecs(codecs, new Codec[] { codecs.lookup(\"PreFlex\")});\n    }\n    diagnostics = input.readStringStringMap();\n\n    if (format <= DefaultSegmentInfosWriter.FORMAT_HAS_VECTORS) {\n      hasVectors = input.readByte();\n    } else {\n      final String storesSegment;\n      final String ext;\n      final boolean isCompoundFile;\n      if (docStoreOffset != -1) {\n        storesSegment = docStoreSegment;\n        isCompoundFile = docStoreIsCompoundFile;\n        ext = IndexFileNames.COMPOUND_FILE_STORE_EXTENSION;\n      } else {\n        storesSegment = name;\n        isCompoundFile = getUseCompoundFile();\n        ext = IndexFileNames.COMPOUND_FILE_EXTENSION;\n      }\n      final Directory dirToTest;\n      if (isCompoundFile) {\n        dirToTest = new CompoundFileReader(dir, IndexFileNames.segmentFileName(storesSegment, \"\", ext));\n      } else {\n        dirToTest = dir;\n      }\n      try {\n        hasVectors = dirToTest.fileExists(IndexFileNames.segmentFileName(storesSegment, \"\", IndexFileNames.VECTORS_INDEX_EXTENSION)) ? YES : NO;\n      } finally {\n        if (isCompoundFile) {\n          dirToTest.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Construct a new SegmentInfo instance by reading a\n   * previously saved SegmentInfo from input.\n   * <p>Note: this is public only to allow access from\n   * the codecs package.</p>\n   *\n   * @param dir directory to load from\n   * @param format format of the segments info file\n   * @param input input handle to read segment info from\n   */\n  public SegmentInfo(Directory dir, int format, IndexInput input, CodecProvider codecs) throws IOException {\n    this.dir = dir;\n    if (format <= DefaultSegmentInfosWriter.FORMAT_3_1) {\n      version = input.readString();\n    }\n    name = input.readString();\n    docCount = input.readInt();\n    delGen = input.readLong();\n    docStoreOffset = input.readInt();\n    if (docStoreOffset != -1) {\n      docStoreSegment = input.readString();\n      docStoreIsCompoundFile = input.readByte() == YES;\n    } else {\n      docStoreSegment = name;\n      docStoreIsCompoundFile = false;\n    }\n    if (format > DefaultSegmentInfosWriter.FORMAT_4_0) {\n      // pre-4.0 indexes write a byte if there is a single norms file\n      byte b = input.readByte();\n      assert 1 == b;\n    }\n    int numNormGen = input.readInt();\n    if (numNormGen == NO) {\n      normGen = null;\n    } else {\n      normGen = new HashMap<Integer, Long>();\n      for(int j=0;j<numNormGen;j++) {\n        int fieldNumber = j;\n        if (format <= DefaultSegmentInfosWriter.FORMAT_4_0) {\n          fieldNumber = input.readInt();\n        }\n\n        normGen.put(fieldNumber, input.readLong());\n      }\n    }\n    isCompoundFile = input.readByte() == YES;\n\n    delCount = input.readInt();\n    assert delCount <= docCount;\n\n    hasProx = input.readByte() == YES;\n    \n    // System.out.println(Thread.currentThread().getName() + \": si.read hasProx=\" + hasProx + \" seg=\" + name);\n    if (format <= DefaultSegmentInfosWriter.FORMAT_4_0) {\n      segmentCodecs = new SegmentCodecs(codecs, input);\n    } else {\n      // codec ID on FieldInfo is 0 so it will simply use the first codec available\n      // TODO what todo if preflex is not available in the provider? register it or fail?\n      segmentCodecs = new SegmentCodecs(codecs, new Codec[] { codecs.lookup(\"PreFlex\")});\n    }\n    diagnostics = input.readStringStringMap();\n    \n    if (format <= DefaultSegmentInfosWriter.FORMAT_HAS_VECTORS) {\n      hasVectors = input.readByte() == 1;\n    } else {\n      final String storesSegment;\n      final String ext;\n      final boolean isCompoundFile;\n      if (docStoreOffset != -1) {\n        storesSegment = docStoreSegment;\n        isCompoundFile = docStoreIsCompoundFile;\n        ext = IndexFileNames.COMPOUND_FILE_STORE_EXTENSION;\n      } else {\n        storesSegment = name;\n        isCompoundFile = getUseCompoundFile();\n        ext = IndexFileNames.COMPOUND_FILE_EXTENSION;\n      }\n      final Directory dirToTest;\n      if (isCompoundFile) {\n        dirToTest = new CompoundFileReader(dir, IndexFileNames.segmentFileName(storesSegment, \"\", ext));\n      } else {\n        dirToTest = dir;\n      }\n      try {\n        hasVectors = dirToTest.fileExists(IndexFileNames.segmentFileName(storesSegment, \"\", IndexFileNames.VECTORS_INDEX_EXTENSION));\n      } finally {\n        if (isCompoundFile) {\n          dirToTest.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"639c36565ce03aed5b0fce7c9e4448e53a1f7efd","date":1308580104,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentInfo#SegmentInfo(Directory,int,IndexInput,CodecProvider).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentInfo#SegmentInfo(Directory,int,IndexInput,CodecProvider).mjava","sourceNew":"  /**\n   * Construct a new SegmentInfo instance by reading a\n   * previously saved SegmentInfo from input.\n   * <p>Note: this is public only to allow access from\n   * the codecs package.</p>\n   *\n   * @param dir directory to load from\n   * @param format format of the segments info file\n   * @param input input handle to read segment info from\n   */\n  public SegmentInfo(Directory dir, int format, IndexInput input, CodecProvider codecs) throws IOException {\n    this.dir = dir;\n    if (format <= DefaultSegmentInfosWriter.FORMAT_3_1) {\n      version = input.readString();\n    }\n    name = input.readString();\n    docCount = input.readInt();\n    delGen = input.readLong();\n    docStoreOffset = input.readInt();\n    if (docStoreOffset != -1) {\n      docStoreSegment = input.readString();\n      docStoreIsCompoundFile = input.readByte() == YES;\n    } else {\n      docStoreSegment = name;\n      docStoreIsCompoundFile = false;\n    }\n\n    if (format > DefaultSegmentInfosWriter.FORMAT_4_0) {\n      // pre-4.0 indexes write a byte if there is a single norms file\n      byte b = input.readByte();\n      assert 1 == b;\n    }\n\n    int numNormGen = input.readInt();\n    if (numNormGen == NO) {\n      normGen = null;\n    } else {\n      normGen = new HashMap<Integer, Long>();\n      for(int j=0;j<numNormGen;j++) {\n        int fieldNumber = j;\n        if (format <= DefaultSegmentInfosWriter.FORMAT_4_0) {\n          fieldNumber = input.readInt();\n        }\n\n        normGen.put(fieldNumber, input.readLong());\n      }\n    }\n    isCompoundFile = input.readByte() == YES;\n\n    delCount = input.readInt();\n    assert delCount <= docCount;\n\n    hasProx = input.readByte();\n\n    // System.out.println(Thread.currentThread().getName() + \": si.read hasProx=\" + hasProx + \" seg=\" + name);\n    if (format <= DefaultSegmentInfosWriter.FORMAT_4_0) {\n      segmentCodecs = new SegmentCodecs(codecs, input);\n    } else {\n      // codec ID on FieldInfo is 0 so it will simply use the first codec available\n      // TODO what todo if preflex is not available in the provider? register it or fail?\n      segmentCodecs = new SegmentCodecs(codecs, new Codec[] { codecs.lookup(\"PreFlex\")});\n    }\n    diagnostics = input.readStringStringMap();\n\n    if (format <= DefaultSegmentInfosWriter.FORMAT_HAS_VECTORS) {\n      hasVectors = input.readByte();\n    } else {\n      final String storesSegment;\n      final String ext;\n      final boolean isCompoundFile;\n      if (docStoreOffset != -1) {\n        storesSegment = docStoreSegment;\n        isCompoundFile = docStoreIsCompoundFile;\n        ext = IndexFileNames.COMPOUND_FILE_STORE_EXTENSION;\n      } else {\n        storesSegment = name;\n        isCompoundFile = getUseCompoundFile();\n        ext = IndexFileNames.COMPOUND_FILE_EXTENSION;\n      }\n      final Directory dirToTest;\n      if (isCompoundFile) {\n        dirToTest = new CompoundFileReader(dir, IndexFileNames.segmentFileName(storesSegment, \"\", ext), IOContext.READONCE);\n      } else {\n        dirToTest = dir;\n      }\n      try {\n        hasVectors = dirToTest.fileExists(IndexFileNames.segmentFileName(storesSegment, \"\", IndexFileNames.VECTORS_INDEX_EXTENSION)) ? YES : NO;\n      } finally {\n        if (isCompoundFile) {\n          dirToTest.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Construct a new SegmentInfo instance by reading a\n   * previously saved SegmentInfo from input.\n   * <p>Note: this is public only to allow access from\n   * the codecs package.</p>\n   *\n   * @param dir directory to load from\n   * @param format format of the segments info file\n   * @param input input handle to read segment info from\n   */\n  public SegmentInfo(Directory dir, int format, IndexInput input, CodecProvider codecs) throws IOException {\n    this.dir = dir;\n    if (format <= DefaultSegmentInfosWriter.FORMAT_3_1) {\n      version = input.readString();\n    }\n    name = input.readString();\n    docCount = input.readInt();\n    delGen = input.readLong();\n    docStoreOffset = input.readInt();\n    if (docStoreOffset != -1) {\n      docStoreSegment = input.readString();\n      docStoreIsCompoundFile = input.readByte() == YES;\n    } else {\n      docStoreSegment = name;\n      docStoreIsCompoundFile = false;\n    }\n\n    if (format > DefaultSegmentInfosWriter.FORMAT_4_0) {\n      // pre-4.0 indexes write a byte if there is a single norms file\n      byte b = input.readByte();\n      assert 1 == b;\n    }\n\n    int numNormGen = input.readInt();\n    if (numNormGen == NO) {\n      normGen = null;\n    } else {\n      normGen = new HashMap<Integer, Long>();\n      for(int j=0;j<numNormGen;j++) {\n        int fieldNumber = j;\n        if (format <= DefaultSegmentInfosWriter.FORMAT_4_0) {\n          fieldNumber = input.readInt();\n        }\n\n        normGen.put(fieldNumber, input.readLong());\n      }\n    }\n    isCompoundFile = input.readByte() == YES;\n\n    delCount = input.readInt();\n    assert delCount <= docCount;\n\n    hasProx = input.readByte();\n\n    // System.out.println(Thread.currentThread().getName() + \": si.read hasProx=\" + hasProx + \" seg=\" + name);\n    if (format <= DefaultSegmentInfosWriter.FORMAT_4_0) {\n      segmentCodecs = new SegmentCodecs(codecs, input);\n    } else {\n      // codec ID on FieldInfo is 0 so it will simply use the first codec available\n      // TODO what todo if preflex is not available in the provider? register it or fail?\n      segmentCodecs = new SegmentCodecs(codecs, new Codec[] { codecs.lookup(\"PreFlex\")});\n    }\n    diagnostics = input.readStringStringMap();\n\n    if (format <= DefaultSegmentInfosWriter.FORMAT_HAS_VECTORS) {\n      hasVectors = input.readByte();\n    } else {\n      final String storesSegment;\n      final String ext;\n      final boolean isCompoundFile;\n      if (docStoreOffset != -1) {\n        storesSegment = docStoreSegment;\n        isCompoundFile = docStoreIsCompoundFile;\n        ext = IndexFileNames.COMPOUND_FILE_STORE_EXTENSION;\n      } else {\n        storesSegment = name;\n        isCompoundFile = getUseCompoundFile();\n        ext = IndexFileNames.COMPOUND_FILE_EXTENSION;\n      }\n      final Directory dirToTest;\n      if (isCompoundFile) {\n        dirToTest = new CompoundFileReader(dir, IndexFileNames.segmentFileName(storesSegment, \"\", ext));\n      } else {\n        dirToTest = dir;\n      }\n      try {\n        hasVectors = dirToTest.fileExists(IndexFileNames.segmentFileName(storesSegment, \"\", IndexFileNames.VECTORS_INDEX_EXTENSION)) ? YES : NO;\n      } finally {\n        if (isCompoundFile) {\n          dirToTest.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0aab6e810b4b0d3743d6a048be0602801f4b3920","date":1308671625,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentInfo#SegmentInfo(Directory,int,IndexInput,CodecProvider).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentInfo#SegmentInfo(Directory,int,IndexInput,CodecProvider).mjava","sourceNew":"  /**\n   * Construct a new SegmentInfo instance by reading a\n   * previously saved SegmentInfo from input.\n   * <p>Note: this is public only to allow access from\n   * the codecs package.</p>\n   *\n   * @param dir directory to load from\n   * @param format format of the segments info file\n   * @param input input handle to read segment info from\n   */\n  public SegmentInfo(Directory dir, int format, IndexInput input, CodecProvider codecs) throws IOException {\n    this.dir = dir;\n    if (format <= DefaultSegmentInfosWriter.FORMAT_3_1) {\n      version = input.readString();\n    }\n    name = input.readString();\n    docCount = input.readInt();\n    delGen = input.readLong();\n    docStoreOffset = input.readInt();\n    if (docStoreOffset != -1) {\n      docStoreSegment = input.readString();\n      docStoreIsCompoundFile = input.readByte() == YES;\n    } else {\n      docStoreSegment = name;\n      docStoreIsCompoundFile = false;\n    }\n\n    if (format > DefaultSegmentInfosWriter.FORMAT_4_0) {\n      // pre-4.0 indexes write a byte if there is a single norms file\n      byte b = input.readByte();\n      assert 1 == b;\n    }\n\n    int numNormGen = input.readInt();\n    if (numNormGen == NO) {\n      normGen = null;\n    } else {\n      normGen = new HashMap<Integer, Long>();\n      for(int j=0;j<numNormGen;j++) {\n        int fieldNumber = j;\n        if (format <= DefaultSegmentInfosWriter.FORMAT_4_0) {\n          fieldNumber = input.readInt();\n        }\n\n        normGen.put(fieldNumber, input.readLong());\n      }\n    }\n    isCompoundFile = input.readByte() == YES;\n\n    delCount = input.readInt();\n    assert delCount <= docCount;\n\n    hasProx = input.readByte();\n\n    // System.out.println(Thread.currentThread().getName() + \": si.read hasProx=\" + hasProx + \" seg=\" + name);\n    if (format <= DefaultSegmentInfosWriter.FORMAT_4_0) {\n      segmentCodecs = new SegmentCodecs(codecs, input);\n    } else {\n      // codec ID on FieldInfo is 0 so it will simply use the first codec available\n      // TODO what todo if preflex is not available in the provider? register it or fail?\n      segmentCodecs = new SegmentCodecs(codecs, new Codec[] { codecs.lookup(\"PreFlex\")});\n    }\n    diagnostics = input.readStringStringMap();\n\n    if (format <= DefaultSegmentInfosWriter.FORMAT_HAS_VECTORS) {\n      hasVectors = input.readByte();\n    } else {\n      final String storesSegment;\n      final String ext;\n      final boolean isCompoundFile;\n      if (docStoreOffset != -1) {\n        storesSegment = docStoreSegment;\n        isCompoundFile = docStoreIsCompoundFile;\n        ext = IndexFileNames.COMPOUND_FILE_STORE_EXTENSION;\n      } else {\n        storesSegment = name;\n        isCompoundFile = getUseCompoundFile();\n        ext = IndexFileNames.COMPOUND_FILE_EXTENSION;\n      }\n      final Directory dirToTest;\n      if (isCompoundFile) {\n        dirToTest = dir.openCompoundInput(IndexFileNames.segmentFileName(storesSegment, \"\", ext), BufferedIndexInput.BUFFER_SIZE);\n      } else {\n        dirToTest = dir;\n      }\n      try {\n        hasVectors = dirToTest.fileExists(IndexFileNames.segmentFileName(storesSegment, \"\", IndexFileNames.VECTORS_INDEX_EXTENSION)) ? YES : NO;\n      } finally {\n        if (isCompoundFile) {\n          dirToTest.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Construct a new SegmentInfo instance by reading a\n   * previously saved SegmentInfo from input.\n   * <p>Note: this is public only to allow access from\n   * the codecs package.</p>\n   *\n   * @param dir directory to load from\n   * @param format format of the segments info file\n   * @param input input handle to read segment info from\n   */\n  public SegmentInfo(Directory dir, int format, IndexInput input, CodecProvider codecs) throws IOException {\n    this.dir = dir;\n    if (format <= DefaultSegmentInfosWriter.FORMAT_3_1) {\n      version = input.readString();\n    }\n    name = input.readString();\n    docCount = input.readInt();\n    delGen = input.readLong();\n    docStoreOffset = input.readInt();\n    if (docStoreOffset != -1) {\n      docStoreSegment = input.readString();\n      docStoreIsCompoundFile = input.readByte() == YES;\n    } else {\n      docStoreSegment = name;\n      docStoreIsCompoundFile = false;\n    }\n\n    if (format > DefaultSegmentInfosWriter.FORMAT_4_0) {\n      // pre-4.0 indexes write a byte if there is a single norms file\n      byte b = input.readByte();\n      assert 1 == b;\n    }\n\n    int numNormGen = input.readInt();\n    if (numNormGen == NO) {\n      normGen = null;\n    } else {\n      normGen = new HashMap<Integer, Long>();\n      for(int j=0;j<numNormGen;j++) {\n        int fieldNumber = j;\n        if (format <= DefaultSegmentInfosWriter.FORMAT_4_0) {\n          fieldNumber = input.readInt();\n        }\n\n        normGen.put(fieldNumber, input.readLong());\n      }\n    }\n    isCompoundFile = input.readByte() == YES;\n\n    delCount = input.readInt();\n    assert delCount <= docCount;\n\n    hasProx = input.readByte();\n\n    // System.out.println(Thread.currentThread().getName() + \": si.read hasProx=\" + hasProx + \" seg=\" + name);\n    if (format <= DefaultSegmentInfosWriter.FORMAT_4_0) {\n      segmentCodecs = new SegmentCodecs(codecs, input);\n    } else {\n      // codec ID on FieldInfo is 0 so it will simply use the first codec available\n      // TODO what todo if preflex is not available in the provider? register it or fail?\n      segmentCodecs = new SegmentCodecs(codecs, new Codec[] { codecs.lookup(\"PreFlex\")});\n    }\n    diagnostics = input.readStringStringMap();\n\n    if (format <= DefaultSegmentInfosWriter.FORMAT_HAS_VECTORS) {\n      hasVectors = input.readByte();\n    } else {\n      final String storesSegment;\n      final String ext;\n      final boolean isCompoundFile;\n      if (docStoreOffset != -1) {\n        storesSegment = docStoreSegment;\n        isCompoundFile = docStoreIsCompoundFile;\n        ext = IndexFileNames.COMPOUND_FILE_STORE_EXTENSION;\n      } else {\n        storesSegment = name;\n        isCompoundFile = getUseCompoundFile();\n        ext = IndexFileNames.COMPOUND_FILE_EXTENSION;\n      }\n      final Directory dirToTest;\n      if (isCompoundFile) {\n        dirToTest = new CompoundFileReader(dir, IndexFileNames.segmentFileName(storesSegment, \"\", ext));\n      } else {\n        dirToTest = dir;\n      }\n      try {\n        hasVectors = dirToTest.fileExists(IndexFileNames.segmentFileName(storesSegment, \"\", IndexFileNames.VECTORS_INDEX_EXTENSION)) ? YES : NO;\n      } finally {\n        if (isCompoundFile) {\n          dirToTest.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ca791416b7d9cc876025db4aea7ec799e8167c0e","date":1308701127,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentInfo#SegmentInfo(Directory,int,IndexInput,CodecProvider).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentInfo#SegmentInfo(Directory,int,IndexInput,CodecProvider).mjava","sourceNew":"  /**\n   * Construct a new SegmentInfo instance by reading a\n   * previously saved SegmentInfo from input.\n   * <p>Note: this is public only to allow access from\n   * the codecs package.</p>\n   *\n   * @param dir directory to load from\n   * @param format format of the segments info file\n   * @param input input handle to read segment info from\n   */\n  public SegmentInfo(Directory dir, int format, IndexInput input, CodecProvider codecs) throws IOException {\n    this.dir = dir;\n    if (format <= DefaultSegmentInfosWriter.FORMAT_SEGMENT_RECORDS_VERSION) {\n      version = input.readString();\n    }\n    name = input.readString();\n    docCount = input.readInt();\n    delGen = input.readLong();\n    docStoreOffset = input.readInt();\n    if (docStoreOffset != -1) {\n      docStoreSegment = input.readString();\n      docStoreIsCompoundFile = input.readByte() == YES;\n    } else {\n      docStoreSegment = name;\n      docStoreIsCompoundFile = false;\n    }\n\n    if (format > DefaultSegmentInfosWriter.FORMAT_FLEX) {\n      // pre-4.0 indexes write a byte if there is a single norms file\n      byte b = input.readByte();\n      assert 1 == b;\n    }\n\n    int numNormGen = input.readInt();\n    if (numNormGen == NO) {\n      normGen = null;\n    } else {\n      normGen = new HashMap<Integer, Long>();\n      for(int j=0;j<numNormGen;j++) {\n        int fieldNumber = j;\n        if (format <= DefaultSegmentInfosWriter.FORMAT_FLEX) {\n          fieldNumber = input.readInt();\n        }\n\n        normGen.put(fieldNumber, input.readLong());\n      }\n    }\n    isCompoundFile = input.readByte() == YES;\n\n    delCount = input.readInt();\n    assert delCount <= docCount;\n\n    hasProx = input.readByte();\n\n    // System.out.println(Thread.currentThread().getName() + \": si.read hasProx=\" + hasProx + \" seg=\" + name);\n    if (format <= DefaultSegmentInfosWriter.FORMAT_FLEX) {\n      segmentCodecs = new SegmentCodecs(codecs, input);\n    } else {\n      // codec ID on FieldInfo is 0 so it will simply use the first codec available\n      // TODO what todo if preflex is not available in the provider? register it or fail?\n      segmentCodecs = new SegmentCodecs(codecs, new Codec[] { codecs.lookup(\"PreFlex\")});\n    }\n    diagnostics = input.readStringStringMap();\n\n    if (format <= DefaultSegmentInfosWriter.FORMAT_HAS_VECTORS) {\n      hasVectors = input.readByte();\n    } else {\n      final String storesSegment;\n      final String ext;\n      final boolean isCompoundFile;\n      if (docStoreOffset != -1) {\n        storesSegment = docStoreSegment;\n        isCompoundFile = docStoreIsCompoundFile;\n        ext = IndexFileNames.COMPOUND_FILE_STORE_EXTENSION;\n      } else {\n        storesSegment = name;\n        isCompoundFile = getUseCompoundFile();\n        ext = IndexFileNames.COMPOUND_FILE_EXTENSION;\n      }\n      final Directory dirToTest;\n      if (isCompoundFile) {\n        dirToTest = dir.openCompoundInput(IndexFileNames.segmentFileName(storesSegment, \"\", ext), BufferedIndexInput.BUFFER_SIZE);\n      } else {\n        dirToTest = dir;\n      }\n      try {\n        hasVectors = dirToTest.fileExists(IndexFileNames.segmentFileName(storesSegment, \"\", IndexFileNames.VECTORS_INDEX_EXTENSION)) ? YES : NO;\n      } finally {\n        if (isCompoundFile) {\n          dirToTest.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Construct a new SegmentInfo instance by reading a\n   * previously saved SegmentInfo from input.\n   * <p>Note: this is public only to allow access from\n   * the codecs package.</p>\n   *\n   * @param dir directory to load from\n   * @param format format of the segments info file\n   * @param input input handle to read segment info from\n   */\n  public SegmentInfo(Directory dir, int format, IndexInput input, CodecProvider codecs) throws IOException {\n    this.dir = dir;\n    if (format <= DefaultSegmentInfosWriter.FORMAT_3_1) {\n      version = input.readString();\n    }\n    name = input.readString();\n    docCount = input.readInt();\n    delGen = input.readLong();\n    docStoreOffset = input.readInt();\n    if (docStoreOffset != -1) {\n      docStoreSegment = input.readString();\n      docStoreIsCompoundFile = input.readByte() == YES;\n    } else {\n      docStoreSegment = name;\n      docStoreIsCompoundFile = false;\n    }\n\n    if (format > DefaultSegmentInfosWriter.FORMAT_4_0) {\n      // pre-4.0 indexes write a byte if there is a single norms file\n      byte b = input.readByte();\n      assert 1 == b;\n    }\n\n    int numNormGen = input.readInt();\n    if (numNormGen == NO) {\n      normGen = null;\n    } else {\n      normGen = new HashMap<Integer, Long>();\n      for(int j=0;j<numNormGen;j++) {\n        int fieldNumber = j;\n        if (format <= DefaultSegmentInfosWriter.FORMAT_4_0) {\n          fieldNumber = input.readInt();\n        }\n\n        normGen.put(fieldNumber, input.readLong());\n      }\n    }\n    isCompoundFile = input.readByte() == YES;\n\n    delCount = input.readInt();\n    assert delCount <= docCount;\n\n    hasProx = input.readByte();\n\n    // System.out.println(Thread.currentThread().getName() + \": si.read hasProx=\" + hasProx + \" seg=\" + name);\n    if (format <= DefaultSegmentInfosWriter.FORMAT_4_0) {\n      segmentCodecs = new SegmentCodecs(codecs, input);\n    } else {\n      // codec ID on FieldInfo is 0 so it will simply use the first codec available\n      // TODO what todo if preflex is not available in the provider? register it or fail?\n      segmentCodecs = new SegmentCodecs(codecs, new Codec[] { codecs.lookup(\"PreFlex\")});\n    }\n    diagnostics = input.readStringStringMap();\n\n    if (format <= DefaultSegmentInfosWriter.FORMAT_HAS_VECTORS) {\n      hasVectors = input.readByte();\n    } else {\n      final String storesSegment;\n      final String ext;\n      final boolean isCompoundFile;\n      if (docStoreOffset != -1) {\n        storesSegment = docStoreSegment;\n        isCompoundFile = docStoreIsCompoundFile;\n        ext = IndexFileNames.COMPOUND_FILE_STORE_EXTENSION;\n      } else {\n        storesSegment = name;\n        isCompoundFile = getUseCompoundFile();\n        ext = IndexFileNames.COMPOUND_FILE_EXTENSION;\n      }\n      final Directory dirToTest;\n      if (isCompoundFile) {\n        dirToTest = dir.openCompoundInput(IndexFileNames.segmentFileName(storesSegment, \"\", ext), BufferedIndexInput.BUFFER_SIZE);\n      } else {\n        dirToTest = dir;\n      }\n      try {\n        hasVectors = dirToTest.fileExists(IndexFileNames.segmentFileName(storesSegment, \"\", IndexFileNames.VECTORS_INDEX_EXTENSION)) ? YES : NO;\n      } finally {\n        if (isCompoundFile) {\n          dirToTest.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4aa91b365d4819eed673110a366d7ce611fdab1b","date":1308730304,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentInfo#SegmentInfo(Directory,int,IndexInput,CodecProvider).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentInfo#SegmentInfo(Directory,int,IndexInput,CodecProvider).mjava","sourceNew":"  /**\n   * Construct a new SegmentInfo instance by reading a\n   * previously saved SegmentInfo from input.\n   * <p>Note: this is public only to allow access from\n   * the codecs package.</p>\n   *\n   * @param dir directory to load from\n   * @param format format of the segments info file\n   * @param input input handle to read segment info from\n   */\n  public SegmentInfo(Directory dir, int format, IndexInput input, CodecProvider codecs) throws IOException {\n    this.dir = dir;\n    if (format <= DefaultSegmentInfosWriter.FORMAT_3_1) {\n      version = input.readString();\n    }\n    name = input.readString();\n    docCount = input.readInt();\n    delGen = input.readLong();\n    docStoreOffset = input.readInt();\n    if (docStoreOffset != -1) {\n      docStoreSegment = input.readString();\n      docStoreIsCompoundFile = input.readByte() == YES;\n    } else {\n      docStoreSegment = name;\n      docStoreIsCompoundFile = false;\n    }\n\n    if (format > DefaultSegmentInfosWriter.FORMAT_4_0) {\n      // pre-4.0 indexes write a byte if there is a single norms file\n      byte b = input.readByte();\n      assert 1 == b;\n    }\n\n    int numNormGen = input.readInt();\n    if (numNormGen == NO) {\n      normGen = null;\n    } else {\n      normGen = new HashMap<Integer, Long>();\n      for(int j=0;j<numNormGen;j++) {\n        int fieldNumber = j;\n        if (format <= DefaultSegmentInfosWriter.FORMAT_4_0) {\n          fieldNumber = input.readInt();\n        }\n\n        normGen.put(fieldNumber, input.readLong());\n      }\n    }\n    isCompoundFile = input.readByte() == YES;\n\n    delCount = input.readInt();\n    assert delCount <= docCount;\n\n    hasProx = input.readByte();\n\n    // System.out.println(Thread.currentThread().getName() + \": si.read hasProx=\" + hasProx + \" seg=\" + name);\n    if (format <= DefaultSegmentInfosWriter.FORMAT_4_0) {\n      segmentCodecs = new SegmentCodecs(codecs, input);\n    } else {\n      // codec ID on FieldInfo is 0 so it will simply use the first codec available\n      // TODO what todo if preflex is not available in the provider? register it or fail?\n      segmentCodecs = new SegmentCodecs(codecs, new Codec[] { codecs.lookup(\"PreFlex\")});\n    }\n    diagnostics = input.readStringStringMap();\n\n    if (format <= DefaultSegmentInfosWriter.FORMAT_HAS_VECTORS) {\n      hasVectors = input.readByte();\n    } else {\n      final String storesSegment;\n      final String ext;\n      final boolean isCompoundFile;\n      if (docStoreOffset != -1) {\n        storesSegment = docStoreSegment;\n        isCompoundFile = docStoreIsCompoundFile;\n        ext = IndexFileNames.COMPOUND_FILE_STORE_EXTENSION;\n      } else {\n        storesSegment = name;\n        isCompoundFile = getUseCompoundFile();\n        ext = IndexFileNames.COMPOUND_FILE_EXTENSION;\n      }\n      final Directory dirToTest;\n      if (isCompoundFile) {\n        dirToTest = dir.openCompoundInput(IndexFileNames.segmentFileName(storesSegment, \"\", ext), BufferedIndexInput.BUFFER_SIZE);\n      } else {\n        dirToTest = dir;\n      }\n      try {\n        hasVectors = dirToTest.fileExists(IndexFileNames.segmentFileName(storesSegment, \"\", IndexFileNames.VECTORS_INDEX_EXTENSION)) ? YES : NO;\n      } finally {\n        if (isCompoundFile) {\n          dirToTest.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Construct a new SegmentInfo instance by reading a\n   * previously saved SegmentInfo from input.\n   * <p>Note: this is public only to allow access from\n   * the codecs package.</p>\n   *\n   * @param dir directory to load from\n   * @param format format of the segments info file\n   * @param input input handle to read segment info from\n   */\n  public SegmentInfo(Directory dir, int format, IndexInput input, CodecProvider codecs) throws IOException {\n    this.dir = dir;\n    if (format <= DefaultSegmentInfosWriter.FORMAT_SEGMENT_RECORDS_VERSION) {\n      version = input.readString();\n    }\n    name = input.readString();\n    docCount = input.readInt();\n    delGen = input.readLong();\n    docStoreOffset = input.readInt();\n    if (docStoreOffset != -1) {\n      docStoreSegment = input.readString();\n      docStoreIsCompoundFile = input.readByte() == YES;\n    } else {\n      docStoreSegment = name;\n      docStoreIsCompoundFile = false;\n    }\n\n    if (format > DefaultSegmentInfosWriter.FORMAT_FLEX) {\n      // pre-4.0 indexes write a byte if there is a single norms file\n      byte b = input.readByte();\n      assert 1 == b;\n    }\n\n    int numNormGen = input.readInt();\n    if (numNormGen == NO) {\n      normGen = null;\n    } else {\n      normGen = new HashMap<Integer, Long>();\n      for(int j=0;j<numNormGen;j++) {\n        int fieldNumber = j;\n        if (format <= DefaultSegmentInfosWriter.FORMAT_FLEX) {\n          fieldNumber = input.readInt();\n        }\n\n        normGen.put(fieldNumber, input.readLong());\n      }\n    }\n    isCompoundFile = input.readByte() == YES;\n\n    delCount = input.readInt();\n    assert delCount <= docCount;\n\n    hasProx = input.readByte();\n\n    // System.out.println(Thread.currentThread().getName() + \": si.read hasProx=\" + hasProx + \" seg=\" + name);\n    if (format <= DefaultSegmentInfosWriter.FORMAT_FLEX) {\n      segmentCodecs = new SegmentCodecs(codecs, input);\n    } else {\n      // codec ID on FieldInfo is 0 so it will simply use the first codec available\n      // TODO what todo if preflex is not available in the provider? register it or fail?\n      segmentCodecs = new SegmentCodecs(codecs, new Codec[] { codecs.lookup(\"PreFlex\")});\n    }\n    diagnostics = input.readStringStringMap();\n\n    if (format <= DefaultSegmentInfosWriter.FORMAT_HAS_VECTORS) {\n      hasVectors = input.readByte();\n    } else {\n      final String storesSegment;\n      final String ext;\n      final boolean isCompoundFile;\n      if (docStoreOffset != -1) {\n        storesSegment = docStoreSegment;\n        isCompoundFile = docStoreIsCompoundFile;\n        ext = IndexFileNames.COMPOUND_FILE_STORE_EXTENSION;\n      } else {\n        storesSegment = name;\n        isCompoundFile = getUseCompoundFile();\n        ext = IndexFileNames.COMPOUND_FILE_EXTENSION;\n      }\n      final Directory dirToTest;\n      if (isCompoundFile) {\n        dirToTest = dir.openCompoundInput(IndexFileNames.segmentFileName(storesSegment, \"\", ext), BufferedIndexInput.BUFFER_SIZE);\n      } else {\n        dirToTest = dir;\n      }\n      try {\n        hasVectors = dirToTest.fileExists(IndexFileNames.segmentFileName(storesSegment, \"\", IndexFileNames.VECTORS_INDEX_EXTENSION)) ? YES : NO;\n      } finally {\n        if (isCompoundFile) {\n          dirToTest.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2553b00f699380c64959ccb27991289aae87be2e","date":1309290151,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentInfo#SegmentInfo(Directory,int,IndexInput,CodecProvider).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentInfo#SegmentInfo(Directory,int,IndexInput,CodecProvider).mjava","sourceNew":"  /**\n   * Construct a new SegmentInfo instance by reading a\n   * previously saved SegmentInfo from input.\n   * <p>Note: this is public only to allow access from\n   * the codecs package.</p>\n   *\n   * @param dir directory to load from\n   * @param format format of the segments info file\n   * @param input input handle to read segment info from\n   */\n  public SegmentInfo(Directory dir, int format, IndexInput input, CodecProvider codecs) throws IOException {\n    this.dir = dir;\n    if (format <= DefaultSegmentInfosWriter.FORMAT_3_1) {\n      version = input.readString();\n    }\n    name = input.readString();\n    docCount = input.readInt();\n    delGen = input.readLong();\n    docStoreOffset = input.readInt();\n    if (docStoreOffset != -1) {\n      docStoreSegment = input.readString();\n      docStoreIsCompoundFile = input.readByte() == YES;\n    } else {\n      docStoreSegment = name;\n      docStoreIsCompoundFile = false;\n    }\n\n    if (format > DefaultSegmentInfosWriter.FORMAT_4_0) {\n      // pre-4.0 indexes write a byte if there is a single norms file\n      byte b = input.readByte();\n      assert 1 == b;\n    }\n\n    int numNormGen = input.readInt();\n    if (numNormGen == NO) {\n      normGen = null;\n    } else {\n      normGen = new HashMap<Integer, Long>();\n      for(int j=0;j<numNormGen;j++) {\n        int fieldNumber = j;\n        if (format <= DefaultSegmentInfosWriter.FORMAT_4_0) {\n          fieldNumber = input.readInt();\n        }\n\n        normGen.put(fieldNumber, input.readLong());\n      }\n    }\n    isCompoundFile = input.readByte() == YES;\n\n    delCount = input.readInt();\n    assert delCount <= docCount;\n\n    hasProx = input.readByte();\n\n    // System.out.println(Thread.currentThread().getName() + \": si.read hasProx=\" + hasProx + \" seg=\" + name);\n    if (format <= DefaultSegmentInfosWriter.FORMAT_4_0) {\n      segmentCodecs = new SegmentCodecs(codecs, input);\n    } else {\n      // codec ID on FieldInfo is 0 so it will simply use the first codec available\n      // TODO what todo if preflex is not available in the provider? register it or fail?\n      segmentCodecs = new SegmentCodecs(codecs, new Codec[] { codecs.lookup(\"PreFlex\")});\n    }\n    diagnostics = input.readStringStringMap();\n\n    if (format <= DefaultSegmentInfosWriter.FORMAT_HAS_VECTORS) {\n      hasVectors = input.readByte();\n    } else {\n      final String storesSegment;\n      final String ext;\n      final boolean isCompoundFile;\n      if (docStoreOffset != -1) {\n        storesSegment = docStoreSegment;\n        isCompoundFile = docStoreIsCompoundFile;\n        ext = IndexFileNames.COMPOUND_FILE_STORE_EXTENSION;\n      } else {\n        storesSegment = name;\n        isCompoundFile = getUseCompoundFile();\n        ext = IndexFileNames.COMPOUND_FILE_EXTENSION;\n      }\n      final Directory dirToTest;\n      if (isCompoundFile) {\n        dirToTest = dir.openCompoundInput(IndexFileNames.segmentFileName(storesSegment, \"\", ext), BufferedIndexInput.BUFFER_SIZE);\n      } else {\n        dirToTest = dir;\n      }\n      try {\n        hasVectors = dirToTest.fileExists(IndexFileNames.segmentFileName(storesSegment, \"\", IndexFileNames.VECTORS_INDEX_EXTENSION)) ? YES : NO;\n      } finally {\n        if (isCompoundFile) {\n          dirToTest.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Construct a new SegmentInfo instance by reading a\n   * previously saved SegmentInfo from input.\n   * <p>Note: this is public only to allow access from\n   * the codecs package.</p>\n   *\n   * @param dir directory to load from\n   * @param format format of the segments info file\n   * @param input input handle to read segment info from\n   */\n  public SegmentInfo(Directory dir, int format, IndexInput input, CodecProvider codecs) throws IOException {\n    this.dir = dir;\n    if (format <= DefaultSegmentInfosWriter.FORMAT_3_1) {\n      version = input.readString();\n    }\n    name = input.readString();\n    docCount = input.readInt();\n    delGen = input.readLong();\n    docStoreOffset = input.readInt();\n    if (docStoreOffset != -1) {\n      docStoreSegment = input.readString();\n      docStoreIsCompoundFile = input.readByte() == YES;\n    } else {\n      docStoreSegment = name;\n      docStoreIsCompoundFile = false;\n    }\n\n    if (format > DefaultSegmentInfosWriter.FORMAT_4_0) {\n      // pre-4.0 indexes write a byte if there is a single norms file\n      byte b = input.readByte();\n      assert 1 == b;\n    }\n\n    int numNormGen = input.readInt();\n    if (numNormGen == NO) {\n      normGen = null;\n    } else {\n      normGen = new HashMap<Integer, Long>();\n      for(int j=0;j<numNormGen;j++) {\n        int fieldNumber = j;\n        if (format <= DefaultSegmentInfosWriter.FORMAT_4_0) {\n          fieldNumber = input.readInt();\n        }\n\n        normGen.put(fieldNumber, input.readLong());\n      }\n    }\n    isCompoundFile = input.readByte() == YES;\n\n    delCount = input.readInt();\n    assert delCount <= docCount;\n\n    hasProx = input.readByte();\n\n    // System.out.println(Thread.currentThread().getName() + \": si.read hasProx=\" + hasProx + \" seg=\" + name);\n    if (format <= DefaultSegmentInfosWriter.FORMAT_4_0) {\n      segmentCodecs = new SegmentCodecs(codecs, input);\n    } else {\n      // codec ID on FieldInfo is 0 so it will simply use the first codec available\n      // TODO what todo if preflex is not available in the provider? register it or fail?\n      segmentCodecs = new SegmentCodecs(codecs, new Codec[] { codecs.lookup(\"PreFlex\")});\n    }\n    diagnostics = input.readStringStringMap();\n\n    if (format <= DefaultSegmentInfosWriter.FORMAT_HAS_VECTORS) {\n      hasVectors = input.readByte();\n    } else {\n      final String storesSegment;\n      final String ext;\n      final boolean isCompoundFile;\n      if (docStoreOffset != -1) {\n        storesSegment = docStoreSegment;\n        isCompoundFile = docStoreIsCompoundFile;\n        ext = IndexFileNames.COMPOUND_FILE_STORE_EXTENSION;\n      } else {\n        storesSegment = name;\n        isCompoundFile = getUseCompoundFile();\n        ext = IndexFileNames.COMPOUND_FILE_EXTENSION;\n      }\n      final Directory dirToTest;\n      if (isCompoundFile) {\n        dirToTest = new CompoundFileReader(dir, IndexFileNames.segmentFileName(storesSegment, \"\", ext));\n      } else {\n        dirToTest = dir;\n      }\n      try {\n        hasVectors = dirToTest.fileExists(IndexFileNames.segmentFileName(storesSegment, \"\", IndexFileNames.VECTORS_INDEX_EXTENSION)) ? YES : NO;\n      } finally {\n        if (isCompoundFile) {\n          dirToTest.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentInfo#SegmentInfo(Directory,int,IndexInput,CodecProvider).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentInfo#SegmentInfo(Directory,int,IndexInput,CodecProvider).mjava","sourceNew":"  /**\n   * Construct a new SegmentInfo instance by reading a\n   * previously saved SegmentInfo from input.\n   * <p>Note: this is public only to allow access from\n   * the codecs package.</p>\n   *\n   * @param dir directory to load from\n   * @param format format of the segments info file\n   * @param input input handle to read segment info from\n   */\n  public SegmentInfo(Directory dir, int format, IndexInput input, CodecProvider codecs) throws IOException {\n    this.dir = dir;\n    if (format <= DefaultSegmentInfosWriter.FORMAT_3_1) {\n      version = input.readString();\n    }\n    name = input.readString();\n    docCount = input.readInt();\n    delGen = input.readLong();\n    docStoreOffset = input.readInt();\n    if (docStoreOffset != -1) {\n      docStoreSegment = input.readString();\n      docStoreIsCompoundFile = input.readByte() == YES;\n    } else {\n      docStoreSegment = name;\n      docStoreIsCompoundFile = false;\n    }\n\n    if (format > DefaultSegmentInfosWriter.FORMAT_4_0) {\n      // pre-4.0 indexes write a byte if there is a single norms file\n      byte b = input.readByte();\n      assert 1 == b;\n    }\n\n    int numNormGen = input.readInt();\n    if (numNormGen == NO) {\n      normGen = null;\n    } else {\n      normGen = new HashMap<Integer, Long>();\n      for(int j=0;j<numNormGen;j++) {\n        int fieldNumber = j;\n        if (format <= DefaultSegmentInfosWriter.FORMAT_4_0) {\n          fieldNumber = input.readInt();\n        }\n\n        normGen.put(fieldNumber, input.readLong());\n      }\n    }\n    isCompoundFile = input.readByte() == YES;\n\n    delCount = input.readInt();\n    assert delCount <= docCount;\n\n    hasProx = input.readByte();\n\n    // System.out.println(Thread.currentThread().getName() + \": si.read hasProx=\" + hasProx + \" seg=\" + name);\n    if (format <= DefaultSegmentInfosWriter.FORMAT_4_0) {\n      segmentCodecs = new SegmentCodecs(codecs, input);\n    } else {\n      // codec ID on FieldInfo is 0 so it will simply use the first codec available\n      // TODO what todo if preflex is not available in the provider? register it or fail?\n      segmentCodecs = new SegmentCodecs(codecs, new Codec[] { codecs.lookup(\"PreFlex\")});\n    }\n    diagnostics = input.readStringStringMap();\n\n    if (format <= DefaultSegmentInfosWriter.FORMAT_HAS_VECTORS) {\n      hasVectors = input.readByte();\n    } else {\n      final String storesSegment;\n      final String ext;\n      final boolean isCompoundFile;\n      if (docStoreOffset != -1) {\n        storesSegment = docStoreSegment;\n        isCompoundFile = docStoreIsCompoundFile;\n        ext = IndexFileNames.COMPOUND_FILE_STORE_EXTENSION;\n      } else {\n        storesSegment = name;\n        isCompoundFile = getUseCompoundFile();\n        ext = IndexFileNames.COMPOUND_FILE_EXTENSION;\n      }\n      final Directory dirToTest;\n      if (isCompoundFile) {\n        dirToTest = dir.openCompoundInput(IndexFileNames.segmentFileName(storesSegment, \"\", ext), IOContext.READONCE );\n      } else {\n        dirToTest = dir;\n      }\n      try {\n        hasVectors = dirToTest.fileExists(IndexFileNames.segmentFileName(storesSegment, \"\", IndexFileNames.VECTORS_INDEX_EXTENSION)) ? YES : NO;\n      } finally {\n        if (isCompoundFile) {\n          dirToTest.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Construct a new SegmentInfo instance by reading a\n   * previously saved SegmentInfo from input.\n   * <p>Note: this is public only to allow access from\n   * the codecs package.</p>\n   *\n   * @param dir directory to load from\n   * @param format format of the segments info file\n   * @param input input handle to read segment info from\n   */\n  public SegmentInfo(Directory dir, int format, IndexInput input, CodecProvider codecs) throws IOException {\n    this.dir = dir;\n    if (format <= DefaultSegmentInfosWriter.FORMAT_3_1) {\n      version = input.readString();\n    }\n    name = input.readString();\n    docCount = input.readInt();\n    delGen = input.readLong();\n    docStoreOffset = input.readInt();\n    if (docStoreOffset != -1) {\n      docStoreSegment = input.readString();\n      docStoreIsCompoundFile = input.readByte() == YES;\n    } else {\n      docStoreSegment = name;\n      docStoreIsCompoundFile = false;\n    }\n\n    if (format > DefaultSegmentInfosWriter.FORMAT_4_0) {\n      // pre-4.0 indexes write a byte if there is a single norms file\n      byte b = input.readByte();\n      assert 1 == b;\n    }\n\n    int numNormGen = input.readInt();\n    if (numNormGen == NO) {\n      normGen = null;\n    } else {\n      normGen = new HashMap<Integer, Long>();\n      for(int j=0;j<numNormGen;j++) {\n        int fieldNumber = j;\n        if (format <= DefaultSegmentInfosWriter.FORMAT_4_0) {\n          fieldNumber = input.readInt();\n        }\n\n        normGen.put(fieldNumber, input.readLong());\n      }\n    }\n    isCompoundFile = input.readByte() == YES;\n\n    delCount = input.readInt();\n    assert delCount <= docCount;\n\n    hasProx = input.readByte();\n\n    // System.out.println(Thread.currentThread().getName() + \": si.read hasProx=\" + hasProx + \" seg=\" + name);\n    if (format <= DefaultSegmentInfosWriter.FORMAT_4_0) {\n      segmentCodecs = new SegmentCodecs(codecs, input);\n    } else {\n      // codec ID on FieldInfo is 0 so it will simply use the first codec available\n      // TODO what todo if preflex is not available in the provider? register it or fail?\n      segmentCodecs = new SegmentCodecs(codecs, new Codec[] { codecs.lookup(\"PreFlex\")});\n    }\n    diagnostics = input.readStringStringMap();\n\n    if (format <= DefaultSegmentInfosWriter.FORMAT_HAS_VECTORS) {\n      hasVectors = input.readByte();\n    } else {\n      final String storesSegment;\n      final String ext;\n      final boolean isCompoundFile;\n      if (docStoreOffset != -1) {\n        storesSegment = docStoreSegment;\n        isCompoundFile = docStoreIsCompoundFile;\n        ext = IndexFileNames.COMPOUND_FILE_STORE_EXTENSION;\n      } else {\n        storesSegment = name;\n        isCompoundFile = getUseCompoundFile();\n        ext = IndexFileNames.COMPOUND_FILE_EXTENSION;\n      }\n      final Directory dirToTest;\n      if (isCompoundFile) {\n        dirToTest = new CompoundFileReader(dir, IndexFileNames.segmentFileName(storesSegment, \"\", ext), IOContext.READONCE);\n      } else {\n        dirToTest = dir;\n      }\n      try {\n        hasVectors = dirToTest.fileExists(IndexFileNames.segmentFileName(storesSegment, \"\", IndexFileNames.VECTORS_INDEX_EXTENSION)) ? YES : NO;\n      } finally {\n        if (isCompoundFile) {\n          dirToTest.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1291e4568eb7d9463d751627596ef14baf4c1603","date":1310112572,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentInfo#SegmentInfo(Directory,int,IndexInput,CodecProvider).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentInfo#SegmentInfo(Directory,int,IndexInput,CodecProvider).mjava","sourceNew":"  /**\n   * Construct a new SegmentInfo instance by reading a\n   * previously saved SegmentInfo from input.\n   * <p>Note: this is public only to allow access from\n   * the codecs package.</p>\n   *\n   * @param dir directory to load from\n   * @param format format of the segments info file\n   * @param input input handle to read segment info from\n   */\n  public SegmentInfo(Directory dir, int format, IndexInput input, CodecProvider codecs) throws IOException {\n    this.dir = dir;\n    if (format <= DefaultSegmentInfosWriter.FORMAT_3_1) {\n      version = input.readString();\n    }\n    name = input.readString();\n    docCount = input.readInt();\n    delGen = input.readLong();\n    docStoreOffset = input.readInt();\n    if (docStoreOffset != -1) {\n      docStoreSegment = input.readString();\n      docStoreIsCompoundFile = input.readByte() == YES;\n    } else {\n      docStoreSegment = name;\n      docStoreIsCompoundFile = false;\n    }\n\n    if (format > DefaultSegmentInfosWriter.FORMAT_4_0) {\n      // pre-4.0 indexes write a byte if there is a single norms file\n      byte b = input.readByte();\n      assert 1 == b;\n    }\n\n    int numNormGen = input.readInt();\n    if (numNormGen == NO) {\n      normGen = null;\n    } else {\n      normGen = new HashMap<Integer, Long>();\n      for(int j=0;j<numNormGen;j++) {\n        int fieldNumber = j;\n        if (format <= DefaultSegmentInfosWriter.FORMAT_4_0) {\n          fieldNumber = input.readInt();\n        }\n\n        normGen.put(fieldNumber, input.readLong());\n      }\n    }\n    isCompoundFile = input.readByte() == YES;\n\n    delCount = input.readInt();\n    assert delCount <= docCount;\n\n    hasProx = input.readByte();\n\n    // System.out.println(Thread.currentThread().getName() + \": si.read hasProx=\" + hasProx + \" seg=\" + name);\n    if (format <= DefaultSegmentInfosWriter.FORMAT_4_0) {\n      segmentCodecs = new SegmentCodecs(codecs, input);\n    } else {\n      // codec ID on FieldInfo is 0 so it will simply use the first codec available\n      // TODO what todo if preflex is not available in the provider? register it or fail?\n      segmentCodecs = new SegmentCodecs(codecs, new Codec[] { codecs.lookup(\"PreFlex\")});\n    }\n    diagnostics = input.readStringStringMap();\n\n    if (format <= DefaultSegmentInfosWriter.FORMAT_HAS_VECTORS) {\n      hasVectors = input.readByte();\n    } else {\n      final String storesSegment;\n      final String ext;\n      final boolean isCompoundFile;\n      if (docStoreOffset != -1) {\n        storesSegment = docStoreSegment;\n        isCompoundFile = docStoreIsCompoundFile;\n        ext = IndexFileNames.COMPOUND_FILE_STORE_EXTENSION;\n      } else {\n        storesSegment = name;\n        isCompoundFile = getUseCompoundFile();\n        ext = IndexFileNames.COMPOUND_FILE_EXTENSION;\n      }\n      final Directory dirToTest;\n      if (isCompoundFile) {\n        dirToTest = dir.openCompoundInput(IndexFileNames.segmentFileName(storesSegment, \"\", ext), IOContext.READONCE);\n      } else {\n        dirToTest = dir;\n      }\n      try {\n        hasVectors = dirToTest.fileExists(IndexFileNames.segmentFileName(storesSegment, \"\", IndexFileNames.VECTORS_INDEX_EXTENSION)) ? YES : NO;\n      } finally {\n        if (isCompoundFile) {\n          dirToTest.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Construct a new SegmentInfo instance by reading a\n   * previously saved SegmentInfo from input.\n   * <p>Note: this is public only to allow access from\n   * the codecs package.</p>\n   *\n   * @param dir directory to load from\n   * @param format format of the segments info file\n   * @param input input handle to read segment info from\n   */\n  public SegmentInfo(Directory dir, int format, IndexInput input, CodecProvider codecs) throws IOException {\n    this.dir = dir;\n    if (format <= DefaultSegmentInfosWriter.FORMAT_3_1) {\n      version = input.readString();\n    }\n    name = input.readString();\n    docCount = input.readInt();\n    delGen = input.readLong();\n    docStoreOffset = input.readInt();\n    if (docStoreOffset != -1) {\n      docStoreSegment = input.readString();\n      docStoreIsCompoundFile = input.readByte() == YES;\n    } else {\n      docStoreSegment = name;\n      docStoreIsCompoundFile = false;\n    }\n\n    if (format > DefaultSegmentInfosWriter.FORMAT_4_0) {\n      // pre-4.0 indexes write a byte if there is a single norms file\n      byte b = input.readByte();\n      assert 1 == b;\n    }\n\n    int numNormGen = input.readInt();\n    if (numNormGen == NO) {\n      normGen = null;\n    } else {\n      normGen = new HashMap<Integer, Long>();\n      for(int j=0;j<numNormGen;j++) {\n        int fieldNumber = j;\n        if (format <= DefaultSegmentInfosWriter.FORMAT_4_0) {\n          fieldNumber = input.readInt();\n        }\n\n        normGen.put(fieldNumber, input.readLong());\n      }\n    }\n    isCompoundFile = input.readByte() == YES;\n\n    delCount = input.readInt();\n    assert delCount <= docCount;\n\n    hasProx = input.readByte();\n\n    // System.out.println(Thread.currentThread().getName() + \": si.read hasProx=\" + hasProx + \" seg=\" + name);\n    if (format <= DefaultSegmentInfosWriter.FORMAT_4_0) {\n      segmentCodecs = new SegmentCodecs(codecs, input);\n    } else {\n      // codec ID on FieldInfo is 0 so it will simply use the first codec available\n      // TODO what todo if preflex is not available in the provider? register it or fail?\n      segmentCodecs = new SegmentCodecs(codecs, new Codec[] { codecs.lookup(\"PreFlex\")});\n    }\n    diagnostics = input.readStringStringMap();\n\n    if (format <= DefaultSegmentInfosWriter.FORMAT_HAS_VECTORS) {\n      hasVectors = input.readByte();\n    } else {\n      final String storesSegment;\n      final String ext;\n      final boolean isCompoundFile;\n      if (docStoreOffset != -1) {\n        storesSegment = docStoreSegment;\n        isCompoundFile = docStoreIsCompoundFile;\n        ext = IndexFileNames.COMPOUND_FILE_STORE_EXTENSION;\n      } else {\n        storesSegment = name;\n        isCompoundFile = getUseCompoundFile();\n        ext = IndexFileNames.COMPOUND_FILE_EXTENSION;\n      }\n      final Directory dirToTest;\n      if (isCompoundFile) {\n        dirToTest = dir.openCompoundInput(IndexFileNames.segmentFileName(storesSegment, \"\", ext), IOContext.READONCE );\n      } else {\n        dirToTest = dir;\n      }\n      try {\n        hasVectors = dirToTest.fileExists(IndexFileNames.segmentFileName(storesSegment, \"\", IndexFileNames.VECTORS_INDEX_EXTENSION)) ? YES : NO;\n      } finally {\n        if (isCompoundFile) {\n          dirToTest.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ddc4c914be86e34b54f70023f45a60fa7f04e929","date":1310115160,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentInfo#SegmentInfo(Directory,int,IndexInput,CodecProvider).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentInfo#SegmentInfo(Directory,int,IndexInput,CodecProvider).mjava","sourceNew":"  /**\n   * Construct a new SegmentInfo instance by reading a\n   * previously saved SegmentInfo from input.\n   * <p>Note: this is public only to allow access from\n   * the codecs package.</p>\n   *\n   * @param dir directory to load from\n   * @param format format of the segments info file\n   * @param input input handle to read segment info from\n   */\n  public SegmentInfo(Directory dir, int format, IndexInput input, CodecProvider codecs) throws IOException {\n    this.dir = dir;\n    if (format <= DefaultSegmentInfosWriter.FORMAT_3_1) {\n      version = input.readString();\n    }\n    name = input.readString();\n    docCount = input.readInt();\n    delGen = input.readLong();\n    docStoreOffset = input.readInt();\n    if (docStoreOffset != -1) {\n      docStoreSegment = input.readString();\n      docStoreIsCompoundFile = input.readByte() == YES;\n    } else {\n      docStoreSegment = name;\n      docStoreIsCompoundFile = false;\n    }\n\n    if (format > DefaultSegmentInfosWriter.FORMAT_4_0) {\n      // pre-4.0 indexes write a byte if there is a single norms file\n      byte b = input.readByte();\n      assert 1 == b;\n    }\n\n    int numNormGen = input.readInt();\n    if (numNormGen == NO) {\n      normGen = null;\n    } else {\n      normGen = new HashMap<Integer, Long>();\n      for(int j=0;j<numNormGen;j++) {\n        int fieldNumber = j;\n        if (format <= DefaultSegmentInfosWriter.FORMAT_4_0) {\n          fieldNumber = input.readInt();\n        }\n\n        normGen.put(fieldNumber, input.readLong());\n      }\n    }\n    isCompoundFile = input.readByte() == YES;\n\n    delCount = input.readInt();\n    assert delCount <= docCount;\n\n    hasProx = input.readByte();\n\n    // System.out.println(Thread.currentThread().getName() + \": si.read hasProx=\" + hasProx + \" seg=\" + name);\n    if (format <= DefaultSegmentInfosWriter.FORMAT_4_0) {\n      segmentCodecs = new SegmentCodecs(codecs, input);\n    } else {\n      // codec ID on FieldInfo is 0 so it will simply use the first codec available\n      // TODO what todo if preflex is not available in the provider? register it or fail?\n      segmentCodecs = new SegmentCodecs(codecs, new Codec[] { codecs.lookup(\"PreFlex\")});\n    }\n    diagnostics = input.readStringStringMap();\n\n    if (format <= DefaultSegmentInfosWriter.FORMAT_HAS_VECTORS) {\n      hasVectors = input.readByte();\n    } else {\n      final String storesSegment;\n      final String ext;\n      final boolean isCompoundFile;\n      if (docStoreOffset != -1) {\n        storesSegment = docStoreSegment;\n        isCompoundFile = docStoreIsCompoundFile;\n        ext = IndexFileNames.COMPOUND_FILE_STORE_EXTENSION;\n      } else {\n        storesSegment = name;\n        isCompoundFile = getUseCompoundFile();\n        ext = IndexFileNames.COMPOUND_FILE_EXTENSION;\n      }\n      final Directory dirToTest;\n      if (isCompoundFile) {\n        dirToTest = dir.openCompoundInput(IndexFileNames.segmentFileName(storesSegment, \"\", ext), IOContext.READONCE);\n      } else {\n        dirToTest = dir;\n      }\n      try {\n        hasVectors = dirToTest.fileExists(IndexFileNames.segmentFileName(storesSegment, \"\", IndexFileNames.VECTORS_INDEX_EXTENSION)) ? YES : NO;\n      } finally {\n        if (isCompoundFile) {\n          dirToTest.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Construct a new SegmentInfo instance by reading a\n   * previously saved SegmentInfo from input.\n   * <p>Note: this is public only to allow access from\n   * the codecs package.</p>\n   *\n   * @param dir directory to load from\n   * @param format format of the segments info file\n   * @param input input handle to read segment info from\n   */\n  public SegmentInfo(Directory dir, int format, IndexInput input, CodecProvider codecs) throws IOException {\n    this.dir = dir;\n    if (format <= DefaultSegmentInfosWriter.FORMAT_3_1) {\n      version = input.readString();\n    }\n    name = input.readString();\n    docCount = input.readInt();\n    delGen = input.readLong();\n    docStoreOffset = input.readInt();\n    if (docStoreOffset != -1) {\n      docStoreSegment = input.readString();\n      docStoreIsCompoundFile = input.readByte() == YES;\n    } else {\n      docStoreSegment = name;\n      docStoreIsCompoundFile = false;\n    }\n\n    if (format > DefaultSegmentInfosWriter.FORMAT_4_0) {\n      // pre-4.0 indexes write a byte if there is a single norms file\n      byte b = input.readByte();\n      assert 1 == b;\n    }\n\n    int numNormGen = input.readInt();\n    if (numNormGen == NO) {\n      normGen = null;\n    } else {\n      normGen = new HashMap<Integer, Long>();\n      for(int j=0;j<numNormGen;j++) {\n        int fieldNumber = j;\n        if (format <= DefaultSegmentInfosWriter.FORMAT_4_0) {\n          fieldNumber = input.readInt();\n        }\n\n        normGen.put(fieldNumber, input.readLong());\n      }\n    }\n    isCompoundFile = input.readByte() == YES;\n\n    delCount = input.readInt();\n    assert delCount <= docCount;\n\n    hasProx = input.readByte();\n\n    // System.out.println(Thread.currentThread().getName() + \": si.read hasProx=\" + hasProx + \" seg=\" + name);\n    if (format <= DefaultSegmentInfosWriter.FORMAT_4_0) {\n      segmentCodecs = new SegmentCodecs(codecs, input);\n    } else {\n      // codec ID on FieldInfo is 0 so it will simply use the first codec available\n      // TODO what todo if preflex is not available in the provider? register it or fail?\n      segmentCodecs = new SegmentCodecs(codecs, new Codec[] { codecs.lookup(\"PreFlex\")});\n    }\n    diagnostics = input.readStringStringMap();\n\n    if (format <= DefaultSegmentInfosWriter.FORMAT_HAS_VECTORS) {\n      hasVectors = input.readByte();\n    } else {\n      final String storesSegment;\n      final String ext;\n      final boolean isCompoundFile;\n      if (docStoreOffset != -1) {\n        storesSegment = docStoreSegment;\n        isCompoundFile = docStoreIsCompoundFile;\n        ext = IndexFileNames.COMPOUND_FILE_STORE_EXTENSION;\n      } else {\n        storesSegment = name;\n        isCompoundFile = getUseCompoundFile();\n        ext = IndexFileNames.COMPOUND_FILE_EXTENSION;\n      }\n      final Directory dirToTest;\n      if (isCompoundFile) {\n        dirToTest = dir.openCompoundInput(IndexFileNames.segmentFileName(storesSegment, \"\", ext), BufferedIndexInput.BUFFER_SIZE);\n      } else {\n        dirToTest = dir;\n      }\n      try {\n        hasVectors = dirToTest.fileExists(IndexFileNames.segmentFileName(storesSegment, \"\", IndexFileNames.VECTORS_INDEX_EXTENSION)) ? YES : NO;\n      } finally {\n        if (isCompoundFile) {\n          dirToTest.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5d004d0e0b3f65bb40da76d476d659d7888270e8","date":1310158940,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentInfo#SegmentInfo(Directory,int,IndexInput,CodecProvider).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentInfo#SegmentInfo(Directory,int,IndexInput,CodecProvider).mjava","sourceNew":"  /**\n   * Construct a new SegmentInfo instance by reading a\n   * previously saved SegmentInfo from input.\n   * <p>Note: this is public only to allow access from\n   * the codecs package.</p>\n   *\n   * @param dir directory to load from\n   * @param format format of the segments info file\n   * @param input input handle to read segment info from\n   */\n  public SegmentInfo(Directory dir, int format, IndexInput input, CodecProvider codecs) throws IOException {\n    this.dir = dir;\n    if (format <= DefaultSegmentInfosWriter.FORMAT_3_1) {\n      version = input.readString();\n    }\n    name = input.readString();\n    docCount = input.readInt();\n    delGen = input.readLong();\n    docStoreOffset = input.readInt();\n    if (docStoreOffset != -1) {\n      docStoreSegment = input.readString();\n      docStoreIsCompoundFile = input.readByte() == YES;\n    } else {\n      docStoreSegment = name;\n      docStoreIsCompoundFile = false;\n    }\n\n    if (format > DefaultSegmentInfosWriter.FORMAT_4_0) {\n      // pre-4.0 indexes write a byte if there is a single norms file\n      byte b = input.readByte();\n      assert 1 == b;\n    }\n\n    int numNormGen = input.readInt();\n    if (numNormGen == NO) {\n      normGen = null;\n    } else {\n      normGen = new HashMap<Integer, Long>();\n      for(int j=0;j<numNormGen;j++) {\n        int fieldNumber = j;\n        if (format <= DefaultSegmentInfosWriter.FORMAT_4_0) {\n          fieldNumber = input.readInt();\n        }\n\n        normGen.put(fieldNumber, input.readLong());\n      }\n    }\n    isCompoundFile = input.readByte() == YES;\n\n    delCount = input.readInt();\n    assert delCount <= docCount;\n\n    hasProx = input.readByte();\n\n    // System.out.println(Thread.currentThread().getName() + \": si.read hasProx=\" + hasProx + \" seg=\" + name);\n    if (format <= DefaultSegmentInfosWriter.FORMAT_4_0) {\n      segmentCodecs = new SegmentCodecs(codecs, input);\n    } else {\n      // codec ID on FieldInfo is 0 so it will simply use the first codec available\n      // TODO what todo if preflex is not available in the provider? register it or fail?\n      segmentCodecs = new SegmentCodecs(codecs, new Codec[] { codecs.lookup(\"PreFlex\")});\n    }\n    diagnostics = input.readStringStringMap();\n\n    if (format <= DefaultSegmentInfosWriter.FORMAT_HAS_VECTORS) {\n      hasVectors = input.readByte();\n    } else {\n      final String storesSegment;\n      final String ext;\n      final boolean isCompoundFile;\n      if (docStoreOffset != -1) {\n        storesSegment = docStoreSegment;\n        isCompoundFile = docStoreIsCompoundFile;\n        ext = IndexFileNames.COMPOUND_FILE_STORE_EXTENSION;\n      } else {\n        storesSegment = name;\n        isCompoundFile = getUseCompoundFile();\n        ext = IndexFileNames.COMPOUND_FILE_EXTENSION;\n      }\n      final Directory dirToTest;\n      if (isCompoundFile) {\n        dirToTest = dir.openCompoundInput(IndexFileNames.segmentFileName(storesSegment, \"\", ext), IOContext.READONCE);\n      } else {\n        dirToTest = dir;\n      }\n      try {\n        hasVectors = dirToTest.fileExists(IndexFileNames.segmentFileName(storesSegment, \"\", IndexFileNames.VECTORS_INDEX_EXTENSION)) ? YES : NO;\n      } finally {\n        if (isCompoundFile) {\n          dirToTest.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Construct a new SegmentInfo instance by reading a\n   * previously saved SegmentInfo from input.\n   * <p>Note: this is public only to allow access from\n   * the codecs package.</p>\n   *\n   * @param dir directory to load from\n   * @param format format of the segments info file\n   * @param input input handle to read segment info from\n   */\n  public SegmentInfo(Directory dir, int format, IndexInput input, CodecProvider codecs) throws IOException {\n    this.dir = dir;\n    if (format <= DefaultSegmentInfosWriter.FORMAT_3_1) {\n      version = input.readString();\n    }\n    name = input.readString();\n    docCount = input.readInt();\n    delGen = input.readLong();\n    docStoreOffset = input.readInt();\n    if (docStoreOffset != -1) {\n      docStoreSegment = input.readString();\n      docStoreIsCompoundFile = input.readByte() == YES;\n    } else {\n      docStoreSegment = name;\n      docStoreIsCompoundFile = false;\n    }\n\n    if (format > DefaultSegmentInfosWriter.FORMAT_4_0) {\n      // pre-4.0 indexes write a byte if there is a single norms file\n      byte b = input.readByte();\n      assert 1 == b;\n    }\n\n    int numNormGen = input.readInt();\n    if (numNormGen == NO) {\n      normGen = null;\n    } else {\n      normGen = new HashMap<Integer, Long>();\n      for(int j=0;j<numNormGen;j++) {\n        int fieldNumber = j;\n        if (format <= DefaultSegmentInfosWriter.FORMAT_4_0) {\n          fieldNumber = input.readInt();\n        }\n\n        normGen.put(fieldNumber, input.readLong());\n      }\n    }\n    isCompoundFile = input.readByte() == YES;\n\n    delCount = input.readInt();\n    assert delCount <= docCount;\n\n    hasProx = input.readByte();\n\n    // System.out.println(Thread.currentThread().getName() + \": si.read hasProx=\" + hasProx + \" seg=\" + name);\n    if (format <= DefaultSegmentInfosWriter.FORMAT_4_0) {\n      segmentCodecs = new SegmentCodecs(codecs, input);\n    } else {\n      // codec ID on FieldInfo is 0 so it will simply use the first codec available\n      // TODO what todo if preflex is not available in the provider? register it or fail?\n      segmentCodecs = new SegmentCodecs(codecs, new Codec[] { codecs.lookup(\"PreFlex\")});\n    }\n    diagnostics = input.readStringStringMap();\n\n    if (format <= DefaultSegmentInfosWriter.FORMAT_HAS_VECTORS) {\n      hasVectors = input.readByte();\n    } else {\n      final String storesSegment;\n      final String ext;\n      final boolean isCompoundFile;\n      if (docStoreOffset != -1) {\n        storesSegment = docStoreSegment;\n        isCompoundFile = docStoreIsCompoundFile;\n        ext = IndexFileNames.COMPOUND_FILE_STORE_EXTENSION;\n      } else {\n        storesSegment = name;\n        isCompoundFile = getUseCompoundFile();\n        ext = IndexFileNames.COMPOUND_FILE_EXTENSION;\n      }\n      final Directory dirToTest;\n      if (isCompoundFile) {\n        dirToTest = dir.openCompoundInput(IndexFileNames.segmentFileName(storesSegment, \"\", ext), BufferedIndexInput.BUFFER_SIZE);\n      } else {\n        dirToTest = dir;\n      }\n      try {\n        hasVectors = dirToTest.fileExists(IndexFileNames.segmentFileName(storesSegment, \"\", IndexFileNames.VECTORS_INDEX_EXTENSION)) ? YES : NO;\n      } finally {\n        if (isCompoundFile) {\n          dirToTest.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"67aadace85f701c87a4e0721eedcda25d8415a70","date":1314201925,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentInfo#SegmentInfo(Directory,int,IndexInput,CodecProvider).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentInfo#SegmentInfo(Directory,int,IndexInput,CodecProvider).mjava","sourceNew":"  /**\n   * Construct a new SegmentInfo instance by reading a\n   * previously saved SegmentInfo from input.\n   * <p>Note: this is public only to allow access from\n   * the codecs package.</p>\n   *\n   * @param dir directory to load from\n   * @param format format of the segments info file\n   * @param input input handle to read segment info from\n   */\n  public SegmentInfo(Directory dir, int format, IndexInput input, CodecProvider codecs) throws IOException {\n    this.dir = dir;\n    if (format <= DefaultSegmentInfosWriter.FORMAT_3_1) {\n      version = input.readString();\n    }\n    name = input.readString();\n    docCount = input.readInt();\n    delGen = input.readLong();\n    docStoreOffset = input.readInt();\n    if (docStoreOffset != -1) {\n      docStoreSegment = input.readString();\n      docStoreIsCompoundFile = input.readByte() == YES;\n    } else {\n      docStoreSegment = name;\n      docStoreIsCompoundFile = false;\n    }\n\n    if (format > DefaultSegmentInfosWriter.FORMAT_4_0) {\n      // pre-4.0 indexes write a byte if there is a single norms file\n      byte b = input.readByte();\n      assert 1 == b;\n    }\n\n    int numNormGen = input.readInt();\n    if (numNormGen == NO) {\n      normGen = null;\n    } else {\n      normGen = new HashMap<Integer, Long>();\n      for(int j=0;j<numNormGen;j++) {\n        int fieldNumber = j;\n        if (format <= DefaultSegmentInfosWriter.FORMAT_4_0) {\n          fieldNumber = input.readInt();\n        }\n\n        normGen.put(fieldNumber, input.readLong());\n      }\n    }\n    isCompoundFile = input.readByte() == YES;\n\n    delCount = input.readInt();\n    assert delCount <= docCount;\n\n    hasProx = input.readByte();\n\n    // System.out.println(Thread.currentThread().getName() + \": si.read hasProx=\" + hasProx + \" seg=\" + name);\n    if (format <= DefaultSegmentInfosWriter.FORMAT_4_0) {\n      segmentCodecs = new SegmentCodecs(codecs, input);\n    } else {\n      // codec ID on FieldInfo is 0 so it will simply use the first codec available\n      // TODO what todo if preflex is not available in the provider? register it or fail?\n      segmentCodecs = new SegmentCodecs(codecs, new Codec[] { codecs.lookup(\"PreFlex\")});\n    }\n    diagnostics = input.readStringStringMap();\n\n    if (format <= DefaultSegmentInfosWriter.FORMAT_HAS_VECTORS) {\n      hasVectors = input.readByte();\n    } else {\n      final String storesSegment;\n      final String ext;\n      final boolean isCompoundFile;\n      if (docStoreOffset != -1) {\n        storesSegment = docStoreSegment;\n        isCompoundFile = docStoreIsCompoundFile;\n        ext = IndexFileNames.COMPOUND_FILE_STORE_EXTENSION;\n      } else {\n        storesSegment = name;\n        isCompoundFile = getUseCompoundFile();\n        ext = IndexFileNames.COMPOUND_FILE_EXTENSION;\n      }\n      final Directory dirToTest;\n      if (isCompoundFile) {\n        dirToTest = new CompoundFileDirectory(dir, IndexFileNames.segmentFileName(storesSegment, \"\", ext), IOContext.READONCE, false);\n      } else {\n        dirToTest = dir;\n      }\n      try {\n        hasVectors = dirToTest.fileExists(IndexFileNames.segmentFileName(storesSegment, \"\", IndexFileNames.VECTORS_INDEX_EXTENSION)) ? YES : NO;\n      } finally {\n        if (isCompoundFile) {\n          dirToTest.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Construct a new SegmentInfo instance by reading a\n   * previously saved SegmentInfo from input.\n   * <p>Note: this is public only to allow access from\n   * the codecs package.</p>\n   *\n   * @param dir directory to load from\n   * @param format format of the segments info file\n   * @param input input handle to read segment info from\n   */\n  public SegmentInfo(Directory dir, int format, IndexInput input, CodecProvider codecs) throws IOException {\n    this.dir = dir;\n    if (format <= DefaultSegmentInfosWriter.FORMAT_3_1) {\n      version = input.readString();\n    }\n    name = input.readString();\n    docCount = input.readInt();\n    delGen = input.readLong();\n    docStoreOffset = input.readInt();\n    if (docStoreOffset != -1) {\n      docStoreSegment = input.readString();\n      docStoreIsCompoundFile = input.readByte() == YES;\n    } else {\n      docStoreSegment = name;\n      docStoreIsCompoundFile = false;\n    }\n\n    if (format > DefaultSegmentInfosWriter.FORMAT_4_0) {\n      // pre-4.0 indexes write a byte if there is a single norms file\n      byte b = input.readByte();\n      assert 1 == b;\n    }\n\n    int numNormGen = input.readInt();\n    if (numNormGen == NO) {\n      normGen = null;\n    } else {\n      normGen = new HashMap<Integer, Long>();\n      for(int j=0;j<numNormGen;j++) {\n        int fieldNumber = j;\n        if (format <= DefaultSegmentInfosWriter.FORMAT_4_0) {\n          fieldNumber = input.readInt();\n        }\n\n        normGen.put(fieldNumber, input.readLong());\n      }\n    }\n    isCompoundFile = input.readByte() == YES;\n\n    delCount = input.readInt();\n    assert delCount <= docCount;\n\n    hasProx = input.readByte();\n\n    // System.out.println(Thread.currentThread().getName() + \": si.read hasProx=\" + hasProx + \" seg=\" + name);\n    if (format <= DefaultSegmentInfosWriter.FORMAT_4_0) {\n      segmentCodecs = new SegmentCodecs(codecs, input);\n    } else {\n      // codec ID on FieldInfo is 0 so it will simply use the first codec available\n      // TODO what todo if preflex is not available in the provider? register it or fail?\n      segmentCodecs = new SegmentCodecs(codecs, new Codec[] { codecs.lookup(\"PreFlex\")});\n    }\n    diagnostics = input.readStringStringMap();\n\n    if (format <= DefaultSegmentInfosWriter.FORMAT_HAS_VECTORS) {\n      hasVectors = input.readByte();\n    } else {\n      final String storesSegment;\n      final String ext;\n      final boolean isCompoundFile;\n      if (docStoreOffset != -1) {\n        storesSegment = docStoreSegment;\n        isCompoundFile = docStoreIsCompoundFile;\n        ext = IndexFileNames.COMPOUND_FILE_STORE_EXTENSION;\n      } else {\n        storesSegment = name;\n        isCompoundFile = getUseCompoundFile();\n        ext = IndexFileNames.COMPOUND_FILE_EXTENSION;\n      }\n      final Directory dirToTest;\n      if (isCompoundFile) {\n        dirToTest = dir.openCompoundInput(IndexFileNames.segmentFileName(storesSegment, \"\", ext), IOContext.READONCE);\n      } else {\n        dirToTest = dir;\n      }\n      try {\n        hasVectors = dirToTest.fileExists(IndexFileNames.segmentFileName(storesSegment, \"\", IndexFileNames.VECTORS_INDEX_EXTENSION)) ? YES : NO;\n      } finally {\n        if (isCompoundFile) {\n          dirToTest.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentInfo#SegmentInfo(Directory,int,IndexInput).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentInfo#SegmentInfo(Directory,int,IndexInput,CodecProvider).mjava","sourceNew":"  /**\n   * Construct a new SegmentInfo instance by reading a\n   * previously saved SegmentInfo from input.\n   * <p>Note: this is public only to allow access from\n   * the codecs package.</p>\n   *\n   * @param dir directory to load from\n   * @param format format of the segments info file\n   * @param input input handle to read segment info from\n   */\n  public SegmentInfo(Directory dir, int format, IndexInput input) throws IOException {\n    this.dir = dir;\n    if (format <= DefaultSegmentInfosWriter.FORMAT_3_1) {\n      version = input.readString();\n    }\n    name = input.readString();\n    docCount = input.readInt();\n    delGen = input.readLong();\n    docStoreOffset = input.readInt();\n    if (docStoreOffset != -1) {\n      docStoreSegment = input.readString();\n      docStoreIsCompoundFile = input.readByte() == YES;\n    } else {\n      docStoreSegment = name;\n      docStoreIsCompoundFile = false;\n    }\n\n    if (format > DefaultSegmentInfosWriter.FORMAT_4_0) {\n      // pre-4.0 indexes write a byte if there is a single norms file\n      byte b = input.readByte();\n      assert 1 == b;\n    }\n\n    int numNormGen = input.readInt();\n    if (numNormGen == NO) {\n      normGen = null;\n    } else {\n      normGen = new HashMap<Integer, Long>();\n      for(int j=0;j<numNormGen;j++) {\n        int fieldNumber = j;\n        if (format <= DefaultSegmentInfosWriter.FORMAT_4_0) {\n          fieldNumber = input.readInt();\n        }\n\n        normGen.put(fieldNumber, input.readLong());\n      }\n    }\n    isCompoundFile = input.readByte() == YES;\n\n    delCount = input.readInt();\n    assert delCount <= docCount;\n\n    hasProx = input.readByte();\n\n    \n    // System.out.println(Thread.currentThread().getName() + \": si.read hasProx=\" + hasProx + \" seg=\" + name);\n    // note: if the codec is not available: Codec.forName will throw an exception.\n    if (format <= DefaultSegmentInfosWriter.FORMAT_4_0) {\n      codec = Codec.forName(input.readString());\n    } else {\n      codec = Codec.forName(\"Lucene3x\");\n    }\n    diagnostics = input.readStringStringMap();\n\n    if (format <= DefaultSegmentInfosWriter.FORMAT_HAS_VECTORS) {\n      hasVectors = input.readByte();\n    } else {\n      final String storesSegment;\n      final String ext;\n      final boolean isCompoundFile;\n      if (docStoreOffset != -1) {\n        storesSegment = docStoreSegment;\n        isCompoundFile = docStoreIsCompoundFile;\n        ext = IndexFileNames.COMPOUND_FILE_STORE_EXTENSION;\n      } else {\n        storesSegment = name;\n        isCompoundFile = getUseCompoundFile();\n        ext = IndexFileNames.COMPOUND_FILE_EXTENSION;\n      }\n      final Directory dirToTest;\n      if (isCompoundFile) {\n        dirToTest = new CompoundFileDirectory(dir, IndexFileNames.segmentFileName(storesSegment, \"\", ext), IOContext.READONCE, false);\n      } else {\n        dirToTest = dir;\n      }\n      try {\n        hasVectors = dirToTest.fileExists(IndexFileNames.segmentFileName(storesSegment, \"\", IndexFileNames.VECTORS_INDEX_EXTENSION)) ? YES : NO;\n      } finally {\n        if (isCompoundFile) {\n          dirToTest.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Construct a new SegmentInfo instance by reading a\n   * previously saved SegmentInfo from input.\n   * <p>Note: this is public only to allow access from\n   * the codecs package.</p>\n   *\n   * @param dir directory to load from\n   * @param format format of the segments info file\n   * @param input input handle to read segment info from\n   */\n  public SegmentInfo(Directory dir, int format, IndexInput input, CodecProvider codecs) throws IOException {\n    this.dir = dir;\n    if (format <= DefaultSegmentInfosWriter.FORMAT_3_1) {\n      version = input.readString();\n    }\n    name = input.readString();\n    docCount = input.readInt();\n    delGen = input.readLong();\n    docStoreOffset = input.readInt();\n    if (docStoreOffset != -1) {\n      docStoreSegment = input.readString();\n      docStoreIsCompoundFile = input.readByte() == YES;\n    } else {\n      docStoreSegment = name;\n      docStoreIsCompoundFile = false;\n    }\n\n    if (format > DefaultSegmentInfosWriter.FORMAT_4_0) {\n      // pre-4.0 indexes write a byte if there is a single norms file\n      byte b = input.readByte();\n      assert 1 == b;\n    }\n\n    int numNormGen = input.readInt();\n    if (numNormGen == NO) {\n      normGen = null;\n    } else {\n      normGen = new HashMap<Integer, Long>();\n      for(int j=0;j<numNormGen;j++) {\n        int fieldNumber = j;\n        if (format <= DefaultSegmentInfosWriter.FORMAT_4_0) {\n          fieldNumber = input.readInt();\n        }\n\n        normGen.put(fieldNumber, input.readLong());\n      }\n    }\n    isCompoundFile = input.readByte() == YES;\n\n    delCount = input.readInt();\n    assert delCount <= docCount;\n\n    hasProx = input.readByte();\n\n    // System.out.println(Thread.currentThread().getName() + \": si.read hasProx=\" + hasProx + \" seg=\" + name);\n    if (format <= DefaultSegmentInfosWriter.FORMAT_4_0) {\n      segmentCodecs = new SegmentCodecs(codecs, input);\n    } else {\n      // codec ID on FieldInfo is 0 so it will simply use the first codec available\n      // TODO what todo if preflex is not available in the provider? register it or fail?\n      segmentCodecs = new SegmentCodecs(codecs, new Codec[] { codecs.lookup(\"PreFlex\")});\n    }\n    diagnostics = input.readStringStringMap();\n\n    if (format <= DefaultSegmentInfosWriter.FORMAT_HAS_VECTORS) {\n      hasVectors = input.readByte();\n    } else {\n      final String storesSegment;\n      final String ext;\n      final boolean isCompoundFile;\n      if (docStoreOffset != -1) {\n        storesSegment = docStoreSegment;\n        isCompoundFile = docStoreIsCompoundFile;\n        ext = IndexFileNames.COMPOUND_FILE_STORE_EXTENSION;\n      } else {\n        storesSegment = name;\n        isCompoundFile = getUseCompoundFile();\n        ext = IndexFileNames.COMPOUND_FILE_EXTENSION;\n      }\n      final Directory dirToTest;\n      if (isCompoundFile) {\n        dirToTest = new CompoundFileDirectory(dir, IndexFileNames.segmentFileName(storesSegment, \"\", ext), IOContext.READONCE, false);\n      } else {\n        dirToTest = dir;\n      }\n      try {\n        hasVectors = dirToTest.fileExists(IndexFileNames.segmentFileName(storesSegment, \"\", IndexFileNames.VECTORS_INDEX_EXTENSION)) ? YES : NO;\n      } finally {\n        if (isCompoundFile) {\n          dirToTest.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"67aadace85f701c87a4e0721eedcda25d8415a70":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"d3fe2fc74577855eadfb5eae3153c2fffdaaf791":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"a493e6d0c3ad86bd55c0a1360d110142e948f2bd":["0cd8367c3d48e4b63dee1895a261d4986c716bbb"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"639c36565ce03aed5b0fce7c9e4448e53a1f7efd":["d3fe2fc74577855eadfb5eae3153c2fffdaaf791"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["833a7987bc1c94455fde83e3311f72bddedcfb93","30ca900054c38836c7c167379e300af4dabb34c3"],"bb9b72f7c3d7827c64dd4ec580ded81778da361d":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","b9dc373b96fc96e6300e2f5af947f6998e6aa6a6"],"e92442af786151ee55bc283eb472f629e3c7b52b":["1224a4027481acce15495b03bce9b48b93b42722"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["bde51b089eb7f86171eb3406e38a274743f9b7ac","e92442af786151ee55bc283eb472f629e3c7b52b"],"14ec33385f6fbb6ce172882d14605790418a5d31":["b0c7a8f7304b75b1528814c5820fa23a96816c27"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","b9dc373b96fc96e6300e2f5af947f6998e6aa6a6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"30ca900054c38836c7c167379e300af4dabb34c3":["5dd55ef4d8a74ff17963e786d91a8ddc54806cfa"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":["2553b00f699380c64959ccb27991289aae87be2e","ddc4c914be86e34b54f70023f45a60fa7f04e929"],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":["135621f3a0670a9394eb563224a3b76cc4dddc0f","d3fe2fc74577855eadfb5eae3153c2fffdaaf791"],"358fe29f788dd69d23f5202c98fea32df2b7d49d":["6267e1ce56c2eec111425690cd04e251b6f14952"],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["4aa91b365d4819eed673110a366d7ce611fdab1b","1291e4568eb7d9463d751627596ef14baf4c1603"],"ca791416b7d9cc876025db4aea7ec799e8167c0e":["0aab6e810b4b0d3743d6a048be0602801f4b3920"],"7e1cbd7e289dc1243c7a59e1a83d078163a147fe":["a493e6d0c3ad86bd55c0a1360d110142e948f2bd"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["bb9b72f7c3d7827c64dd4ec580ded81778da361d","b0c7a8f7304b75b1528814c5820fa23a96816c27"],"1224a4027481acce15495b03bce9b48b93b42722":["14ec33385f6fbb6ce172882d14605790418a5d31"],"833a7987bc1c94455fde83e3311f72bddedcfb93":["5f4e87790277826a2aea119328600dfb07761f32"],"b9dc373b96fc96e6300e2f5af947f6998e6aa6a6":["30ca900054c38836c7c167379e300af4dabb34c3"],"85a883878c0af761245ab048babc63d099f835f3":["0cd8367c3d48e4b63dee1895a261d4986c716bbb","a493e6d0c3ad86bd55c0a1360d110142e948f2bd"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["d619839baa8ce5503e496b94a9e42ad6f079293f","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"0aab6e810b4b0d3743d6a048be0602801f4b3920":["d3fe2fc74577855eadfb5eae3153c2fffdaaf791"],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["e92442af786151ee55bc283eb472f629e3c7b52b","c0ef0193974807e4bddf5432a6b0287fe4d6c9df"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["85a883878c0af761245ab048babc63d099f835f3","30ca900054c38836c7c167379e300af4dabb34c3"],"0cd8367c3d48e4b63dee1895a261d4986c716bbb":["6066dbe072ec5334ff5824f474e9d3abd1620fb7"],"5f4e87790277826a2aea119328600dfb07761f32":["6267e1ce56c2eec111425690cd04e251b6f14952","0cd8367c3d48e4b63dee1895a261d4986c716bbb"],"2553b00f699380c64959ccb27991289aae87be2e":["a3776dccca01c11e7046323cfad46a3b4a471233","4aa91b365d4819eed673110a366d7ce611fdab1b"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["639c36565ce03aed5b0fce7c9e4448e53a1f7efd","4aa91b365d4819eed673110a366d7ce611fdab1b"],"7b91922b55d15444d554721b352861d028eb8278":["67aadace85f701c87a4e0721eedcda25d8415a70"],"6267e1ce56c2eec111425690cd04e251b6f14952":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"1291e4568eb7d9463d751627596ef14baf4c1603":["d083e83f225b11e5fdd900e83d26ddb385b6955c","4aa91b365d4819eed673110a366d7ce611fdab1b"],"6066dbe072ec5334ff5824f474e9d3abd1620fb7":["358fe29f788dd69d23f5202c98fea32df2b7d49d"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["29ef99d61cda9641b6250bf9567329a6e65f901d","e92442af786151ee55bc283eb472f629e3c7b52b"],"b0c7a8f7304b75b1528814c5820fa23a96816c27":["b9dc373b96fc96e6300e2f5af947f6998e6aa6a6"],"a3776dccca01c11e7046323cfad46a3b4a471233":["e92442af786151ee55bc283eb472f629e3c7b52b","d3fe2fc74577855eadfb5eae3153c2fffdaaf791"],"5dd55ef4d8a74ff17963e786d91a8ddc54806cfa":["7e1cbd7e289dc1243c7a59e1a83d078163a147fe"],"4aa91b365d4819eed673110a366d7ce611fdab1b":["ca791416b7d9cc876025db4aea7ec799e8167c0e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7b91922b55d15444d554721b352861d028eb8278"]},"commit2Childs":{"67aadace85f701c87a4e0721eedcda25d8415a70":["7b91922b55d15444d554721b352861d028eb8278"],"d3fe2fc74577855eadfb5eae3153c2fffdaaf791":["639c36565ce03aed5b0fce7c9e4448e53a1f7efd","c700f8d0842d3e52bb2bdfbfdc046a137e836edb","0aab6e810b4b0d3743d6a048be0602801f4b3920","a3776dccca01c11e7046323cfad46a3b4a471233"],"a493e6d0c3ad86bd55c0a1360d110142e948f2bd":["7e1cbd7e289dc1243c7a59e1a83d078163a147fe","85a883878c0af761245ab048babc63d099f835f3"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["6267e1ce56c2eec111425690cd04e251b6f14952"],"639c36565ce03aed5b0fce7c9e4448e53a1f7efd":["d083e83f225b11e5fdd900e83d26ddb385b6955c"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bb9b72f7c3d7827c64dd4ec580ded81778da361d"],"bb9b72f7c3d7827c64dd4ec580ded81778da361d":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"e92442af786151ee55bc283eb472f629e3c7b52b":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","b3e06be49006ecac364d39d12b9c9f74882f9b9f","d619839baa8ce5503e496b94a9e42ad6f079293f","a3776dccca01c11e7046323cfad46a3b4a471233"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"14ec33385f6fbb6ce172882d14605790418a5d31":["1224a4027481acce15495b03bce9b48b93b42722"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["d619839baa8ce5503e496b94a9e42ad6f079293f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"30ca900054c38836c7c167379e300af4dabb34c3":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","b9dc373b96fc96e6300e2f5af947f6998e6aa6a6","ab5cb6a74aefb78aa0569857970b9151dfe2e787"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":[],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":[],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["67aadace85f701c87a4e0721eedcda25d8415a70","5d004d0e0b3f65bb40da76d476d659d7888270e8"],"358fe29f788dd69d23f5202c98fea32df2b7d49d":["6066dbe072ec5334ff5824f474e9d3abd1620fb7"],"ca791416b7d9cc876025db4aea7ec799e8167c0e":["4aa91b365d4819eed673110a366d7ce611fdab1b"],"7e1cbd7e289dc1243c7a59e1a83d078163a147fe":["5dd55ef4d8a74ff17963e786d91a8ddc54806cfa"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df"],"833a7987bc1c94455fde83e3311f72bddedcfb93":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"1224a4027481acce15495b03bce9b48b93b42722":["e92442af786151ee55bc283eb472f629e3c7b52b"],"b9dc373b96fc96e6300e2f5af947f6998e6aa6a6":["bb9b72f7c3d7827c64dd4ec580ded81778da361d","29ef99d61cda9641b6250bf9567329a6e65f901d","b0c7a8f7304b75b1528814c5820fa23a96816c27"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["c700f8d0842d3e52bb2bdfbfdc046a137e836edb"],"85a883878c0af761245ab048babc63d099f835f3":["ab5cb6a74aefb78aa0569857970b9151dfe2e787"],"0aab6e810b4b0d3743d6a048be0602801f4b3920":["ca791416b7d9cc876025db4aea7ec799e8167c0e"],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["d3fe2fc74577855eadfb5eae3153c2fffdaaf791","135621f3a0670a9394eb563224a3b76cc4dddc0f"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"0cd8367c3d48e4b63dee1895a261d4986c716bbb":["a493e6d0c3ad86bd55c0a1360d110142e948f2bd","85a883878c0af761245ab048babc63d099f835f3","5f4e87790277826a2aea119328600dfb07761f32"],"5f4e87790277826a2aea119328600dfb07761f32":["833a7987bc1c94455fde83e3311f72bddedcfb93"],"2553b00f699380c64959ccb27991289aae87be2e":["5d004d0e0b3f65bb40da76d476d659d7888270e8"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["1291e4568eb7d9463d751627596ef14baf4c1603"],"6267e1ce56c2eec111425690cd04e251b6f14952":["358fe29f788dd69d23f5202c98fea32df2b7d49d","5f4e87790277826a2aea119328600dfb07761f32"],"1291e4568eb7d9463d751627596ef14baf4c1603":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"7b91922b55d15444d554721b352861d028eb8278":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6066dbe072ec5334ff5824f474e9d3abd1620fb7":["0cd8367c3d48e4b63dee1895a261d4986c716bbb"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"b0c7a8f7304b75b1528814c5820fa23a96816c27":["14ec33385f6fbb6ce172882d14605790418a5d31","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"a3776dccca01c11e7046323cfad46a3b4a471233":["2553b00f699380c64959ccb27991289aae87be2e"],"5dd55ef4d8a74ff17963e786d91a8ddc54806cfa":["30ca900054c38836c7c167379e300af4dabb34c3"],"4aa91b365d4819eed673110a366d7ce611fdab1b":["ddc4c914be86e34b54f70023f45a60fa7f04e929","2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c","1291e4568eb7d9463d751627596ef14baf4c1603"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5d004d0e0b3f65bb40da76d476d659d7888270e8","c700f8d0842d3e52bb2bdfbfdc046a137e836edb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}