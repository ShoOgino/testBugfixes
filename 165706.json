{"path":"sandbox/contributions/analyzers/src/java/org/apache/lucene/analysis/nl/DutchStemmer#stem(String).mjava","commits":[{"id":"a684698d2d785b642cc0dda9c81091abc2bd90b5","date":1078844108,"type":0,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"sandbox/contributions/analyzers/src/java/org/apache/lucene/analysis/nl/DutchStemmer#stem(String).mjava","pathOld":"/dev/null","sourceNew":"\t//TODO convert to internal\n\t/*\n\t * Stemms the given term to an unique <tt>discriminator</tt>.\n\t *\n\t * @param term The term that should be stemmed.\n\t * @return Discriminator for <tt>term</tt>\n\t */\n\tpublic String stem( String term )\n\t{\n\t\tterm = term.toLowerCase();\n\t\tif ( !isStemmable( term ) )\n\t\t\treturn term;\n\t\tif (_stemDict != null && _stemDict.contains(term))\n\t\t\tif (_stemDict.get(term) instanceof String)\n\t\t\t\treturn (String)_stemDict.get(term);\n\t\t\telse return null;\n\n\t\t// Reset the StringBuffer.\n\t\tsb.delete(0, sb.length());\n\t\tsb.insert(0, term);\n\t\t// Stemming starts here...\n\t\tsubstitute(sb);\n\t\tstoreYandI(sb);\n\t\t_R1 = getRIndex(sb, 0);\n\t\t_R1 = Math.max(3,_R1);\n\t\tstep1(sb);\n\t\tstep2(sb);\n\t\t_R2 = getRIndex(sb, _R1);\n\t\tstep3a(sb);\n\t\tstep3b(sb);\n\t\tstep4(sb);\n\t\treStoreYandI(sb);\n\t\treturn sb.toString();\n\t}\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37c74a185a49d74a8a2de1f102ffe2fbf8c80ff9","date":1078974336,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"sandbox/contributions/analyzers/src/java/org/apache/lucene/analysis/nl/DutchStemmer#stem(String).mjava","pathOld":"sandbox/contributions/analyzers/src/java/org/apache/lucene/analysis/nl/DutchStemmer#stem(String).mjava","sourceNew":"  //TODO convert to internal\n  /*\n   * Stemms the given term to an unique <tt>discriminator</tt>.\n   *\n   * @param term The term that should be stemmed.\n   * @return Discriminator for <tt>term</tt>\n   */\n  public String stem(String term) {\n    term = term.toLowerCase();\n    if (!isStemmable(term))\n      return term;\n    if (_stemDict != null && _stemDict.containsKey(term))\n      if (_stemDict.get(term) instanceof String)\n        return (String) _stemDict.get(term);\n      else\n        return null;\n\n    // Reset the StringBuffer.\n    sb.delete(0, sb.length());\n    sb.insert(0, term);\n    // Stemming starts here...\n    substitute(sb);\n    storeYandI(sb);\n    _R1 = getRIndex(sb, 0);\n    _R1 = Math.max(3, _R1);\n    step1(sb);\n    step2(sb);\n    _R2 = getRIndex(sb, _R1);\n    step3a(sb);\n    step3b(sb);\n    step4(sb);\n    reStoreYandI(sb);\n    return sb.toString();\n  }\n\n","sourceOld":"\t//TODO convert to internal\n\t/*\n\t * Stemms the given term to an unique <tt>discriminator</tt>.\n\t *\n\t * @param term The term that should be stemmed.\n\t * @return Discriminator for <tt>term</tt>\n\t */\n\tpublic String stem( String term )\n\t{\n\t\tterm = term.toLowerCase();\n\t\tif ( !isStemmable( term ) )\n\t\t\treturn term;\n\t\tif (_stemDict != null && _stemDict.contains(term))\n\t\t\tif (_stemDict.get(term) instanceof String)\n\t\t\t\treturn (String)_stemDict.get(term);\n\t\t\telse return null;\n\n\t\t// Reset the StringBuffer.\n\t\tsb.delete(0, sb.length());\n\t\tsb.insert(0, term);\n\t\t// Stemming starts here...\n\t\tsubstitute(sb);\n\t\tstoreYandI(sb);\n\t\t_R1 = getRIndex(sb, 0);\n\t\t_R1 = Math.max(3,_R1);\n\t\tstep1(sb);\n\t\tstep2(sb);\n\t\t_R2 = getRIndex(sb, _R1);\n\t\tstep3a(sb);\n\t\tstep3b(sb);\n\t\tstep4(sb);\n\t\treStoreYandI(sb);\n\t\treturn sb.toString();\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"043c298cb215f13ba7b9b81d20760704e8f93d66","date":1107566743,"type":5,"author":"Erik Hatcher","isMerge":false,"pathNew":"contrib/analyzers/src/java/org/apache/lucene/analysis/nl/DutchStemmer#stem(String).mjava","pathOld":"sandbox/contributions/analyzers/src/java/org/apache/lucene/analysis/nl/DutchStemmer#stem(String).mjava","sourceNew":"  //TODO convert to internal\n  /*\n   * Stemms the given term to an unique <tt>discriminator</tt>.\n   *\n   * @param term The term that should be stemmed.\n   * @return Discriminator for <tt>term</tt>\n   */\n  public String stem(String term) {\n    term = term.toLowerCase();\n    if (!isStemmable(term))\n      return term;\n    if (_stemDict != null && _stemDict.containsKey(term))\n      if (_stemDict.get(term) instanceof String)\n        return (String) _stemDict.get(term);\n      else\n        return null;\n\n    // Reset the StringBuffer.\n    sb.delete(0, sb.length());\n    sb.insert(0, term);\n    // Stemming starts here...\n    substitute(sb);\n    storeYandI(sb);\n    _R1 = getRIndex(sb, 0);\n    _R1 = Math.max(3, _R1);\n    step1(sb);\n    step2(sb);\n    _R2 = getRIndex(sb, _R1);\n    step3a(sb);\n    step3b(sb);\n    step4(sb);\n    reStoreYandI(sb);\n    return sb.toString();\n  }\n\n","sourceOld":"  //TODO convert to internal\n  /*\n   * Stemms the given term to an unique <tt>discriminator</tt>.\n   *\n   * @param term The term that should be stemmed.\n   * @return Discriminator for <tt>term</tt>\n   */\n  public String stem(String term) {\n    term = term.toLowerCase();\n    if (!isStemmable(term))\n      return term;\n    if (_stemDict != null && _stemDict.containsKey(term))\n      if (_stemDict.get(term) instanceof String)\n        return (String) _stemDict.get(term);\n      else\n        return null;\n\n    // Reset the StringBuffer.\n    sb.delete(0, sb.length());\n    sb.insert(0, term);\n    // Stemming starts here...\n    substitute(sb);\n    storeYandI(sb);\n    _R1 = getRIndex(sb, 0);\n    _R1 = Math.max(3, _R1);\n    step1(sb);\n    step2(sb);\n    _R2 = getRIndex(sb, _R1);\n    step3a(sb);\n    step3b(sb);\n    step4(sb);\n    reStoreYandI(sb);\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"043c298cb215f13ba7b9b81d20760704e8f93d66":["37c74a185a49d74a8a2de1f102ffe2fbf8c80ff9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a684698d2d785b642cc0dda9c81091abc2bd90b5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["043c298cb215f13ba7b9b81d20760704e8f93d66"],"37c74a185a49d74a8a2de1f102ffe2fbf8c80ff9":["a684698d2d785b642cc0dda9c81091abc2bd90b5"]},"commit2Childs":{"043c298cb215f13ba7b9b81d20760704e8f93d66":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a684698d2d785b642cc0dda9c81091abc2bd90b5"],"a684698d2d785b642cc0dda9c81091abc2bd90b5":["37c74a185a49d74a8a2de1f102ffe2fbf8c80ff9"],"37c74a185a49d74a8a2de1f102ffe2fbf8c80ff9":["043c298cb215f13ba7b9b81d20760704e8f93d66"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}