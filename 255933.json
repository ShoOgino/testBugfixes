{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/request/UpdateRequest#getRoutes(DocRouter,DocCollection,Map[String,List[String]],ModifiableSolrParams,String).mjava","commits":[{"id":"d5fc588fc7c6e55c0d778665292d023bf8d5f3b1","date":1378862385,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/UpdateRequest#getRoutes(DocRouter,DocCollection,Map[String,List[String]],ModifiableSolrParams,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * @param router to route updates with\n   * @param col DocCollection for the updates\n   * @param urlMap of the cluster\n   * @param params params to use\n   * @param idField the id field\n   * @return a Map of urls to requests\n   */\n  public Map<String,LBHttpSolrServer.Req> getRoutes(DocRouter router,\n      DocCollection col, Map<String,List<String>> urlMap,\n      ModifiableSolrParams params, String idField) {\n    \n    if ((documents == null || documents.size() == 0)\n        && (deleteById == null || deleteById.size() == 0)) {\n      return null;\n    }\n    \n    Map<String,LBHttpSolrServer.Req> routes = new HashMap<String,LBHttpSolrServer.Req>();\n    if (documents != null) {\n      Set<Entry<SolrInputDocument,Map<String,Object>>> entries = documents.entrySet();\n      for (Entry<SolrInputDocument,Map<String,Object>> entry : entries) {\n        SolrInputDocument doc = entry.getKey();\n        Object id = doc.getFieldValue(idField);\n        if (id == null) {\n          return null;\n        }\n        Slice slice = router.getTargetSlice(id\n            .toString(), doc, null, col);\n        if (slice == null) {\n          return null;\n        }\n        List<String> urls = urlMap.get(slice.getName());\n        String leaderUrl = urls.get(0);\n        LBHttpSolrServer.Req request = (LBHttpSolrServer.Req) routes\n            .get(leaderUrl);\n        if (request == null) {\n          UpdateRequest updateRequest = new UpdateRequest();\n          updateRequest.setMethod(getMethod());\n          updateRequest.setCommitWithin(getCommitWithin());\n          updateRequest.setParams(params);\n          updateRequest.setPath(getPath());\n          request = new LBHttpSolrServer.Req(updateRequest, urls);\n          routes.put(leaderUrl, request);\n        }\n        UpdateRequest urequest = (UpdateRequest) request.getRequest();\n        urequest.add(doc);\n      }\n    }\n    \n    // Route the deleteById's\n    \n    if (deleteById != null) {\n      \n      Iterator<Map.Entry<String,Map<String,Object>>> entries = deleteById.entrySet()\n          .iterator();\n      while (entries.hasNext()) {\n        \n        Map.Entry<String,Map<String,Object>> entry = entries.next();\n        \n        String deleteId = entry.getKey();\n        Map<String,Object> map = entry.getValue();\n        Long version = null;\n        if (map != null) {\n          version = (Long) map.get(\"ver\");\n        }\n        Slice slice = router.getTargetSlice(deleteId, null, null, col);\n        if (slice == null) {\n          return null;\n        }\n        List<String> urls = urlMap.get(slice.getName());\n        String leaderUrl = urls.get(0);\n        LBHttpSolrServer.Req request = routes.get(leaderUrl);\n        if (request != null) {\n          UpdateRequest urequest = (UpdateRequest) request.getRequest();\n          urequest.deleteById(deleteId, version);\n        } else {\n          UpdateRequest urequest = new UpdateRequest();\n          urequest.deleteById(deleteId, version);\n          request = new LBHttpSolrServer.Req(urequest, urls);\n          routes.put(leaderUrl, request);\n        }\n      }\n    }\n\n    return routes;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["f517609336abda4a2852a6d56a0d92b97f5f7a9f","13a60d5cca07cbecc52e08e57ae3416a59b3dfe8","747dd71fefcbc7142661c25334b74c518fef4d81"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f517609336abda4a2852a6d56a0d92b97f5f7a9f","date":1382153013,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/UpdateRequest#getRoutes(DocRouter,DocCollection,Map[String,List[String]],ModifiableSolrParams,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/UpdateRequest#getRoutes(DocRouter,DocCollection,Map[String,List[String]],ModifiableSolrParams,String).mjava","sourceNew":"  /**\n   * @param router to route updates with\n   * @param col DocCollection for the updates\n   * @param urlMap of the cluster\n   * @param params params to use\n   * @param idField the id field\n   * @return a Map of urls to requests\n   */\n  public Map<String,LBHttpSolrServer.Req> getRoutes(DocRouter router,\n      DocCollection col, Map<String,List<String>> urlMap,\n      ModifiableSolrParams params, String idField) {\n    \n    if ((documents == null || documents.size() == 0)\n        && (deleteById == null || deleteById.size() == 0)) {\n      return null;\n    }\n    \n    Map<String,LBHttpSolrServer.Req> routes = new HashMap<String,LBHttpSolrServer.Req>();\n    if (documents != null) {\n      Set<Entry<SolrInputDocument,Map<String,Object>>> entries = documents.entrySet();\n      for (Entry<SolrInputDocument,Map<String,Object>> entry : entries) {\n        SolrInputDocument doc = entry.getKey();\n        Object id = doc.getFieldValue(idField);\n        if (id == null) {\n          return null;\n        }\n        Slice slice = router.getTargetSlice(id\n            .toString(), doc, null, col);\n        if (slice == null) {\n          return null;\n        }\n        List<String> urls = urlMap.get(slice.getName());\n        String leaderUrl = urls.get(0);\n        LBHttpSolrServer.Req request = (LBHttpSolrServer.Req) routes\n            .get(leaderUrl);\n        if (request == null) {\n          UpdateRequest updateRequest = new UpdateRequest();\n          updateRequest.setMethod(getMethod());\n          updateRequest.setCommitWithin(getCommitWithin());\n          updateRequest.setParams(params);\n          updateRequest.setPath(getPath());\n          request = new LBHttpSolrServer.Req(updateRequest, urls);\n          routes.put(leaderUrl, request);\n        }\n        UpdateRequest urequest = (UpdateRequest) request.getRequest();\n        urequest.add(doc);\n      }\n    }\n    \n    // Route the deleteById's\n    \n    if (deleteById != null) {\n      \n      Iterator<Map.Entry<String,Map<String,Object>>> entries = deleteById.entrySet()\n          .iterator();\n      while (entries.hasNext()) {\n        \n        Map.Entry<String,Map<String,Object>> entry = entries.next();\n        \n        String deleteId = entry.getKey();\n        Map<String,Object> map = entry.getValue();\n        Long version = null;\n        if (map != null) {\n          version = (Long) map.get(VER);\n        }\n        Slice slice = router.getTargetSlice(deleteId, null, null, col);\n        if (slice == null) {\n          return null;\n        }\n        List<String> urls = urlMap.get(slice.getName());\n        String leaderUrl = urls.get(0);\n        LBHttpSolrServer.Req request = routes.get(leaderUrl);\n        if (request != null) {\n          UpdateRequest urequest = (UpdateRequest) request.getRequest();\n          urequest.deleteById(deleteId, version);\n        } else {\n          UpdateRequest urequest = new UpdateRequest();\n          urequest.deleteById(deleteId, version);\n          request = new LBHttpSolrServer.Req(urequest, urls);\n          routes.put(leaderUrl, request);\n        }\n      }\n    }\n\n    return routes;\n  }\n\n","sourceOld":"  /**\n   * @param router to route updates with\n   * @param col DocCollection for the updates\n   * @param urlMap of the cluster\n   * @param params params to use\n   * @param idField the id field\n   * @return a Map of urls to requests\n   */\n  public Map<String,LBHttpSolrServer.Req> getRoutes(DocRouter router,\n      DocCollection col, Map<String,List<String>> urlMap,\n      ModifiableSolrParams params, String idField) {\n    \n    if ((documents == null || documents.size() == 0)\n        && (deleteById == null || deleteById.size() == 0)) {\n      return null;\n    }\n    \n    Map<String,LBHttpSolrServer.Req> routes = new HashMap<String,LBHttpSolrServer.Req>();\n    if (documents != null) {\n      Set<Entry<SolrInputDocument,Map<String,Object>>> entries = documents.entrySet();\n      for (Entry<SolrInputDocument,Map<String,Object>> entry : entries) {\n        SolrInputDocument doc = entry.getKey();\n        Object id = doc.getFieldValue(idField);\n        if (id == null) {\n          return null;\n        }\n        Slice slice = router.getTargetSlice(id\n            .toString(), doc, null, col);\n        if (slice == null) {\n          return null;\n        }\n        List<String> urls = urlMap.get(slice.getName());\n        String leaderUrl = urls.get(0);\n        LBHttpSolrServer.Req request = (LBHttpSolrServer.Req) routes\n            .get(leaderUrl);\n        if (request == null) {\n          UpdateRequest updateRequest = new UpdateRequest();\n          updateRequest.setMethod(getMethod());\n          updateRequest.setCommitWithin(getCommitWithin());\n          updateRequest.setParams(params);\n          updateRequest.setPath(getPath());\n          request = new LBHttpSolrServer.Req(updateRequest, urls);\n          routes.put(leaderUrl, request);\n        }\n        UpdateRequest urequest = (UpdateRequest) request.getRequest();\n        urequest.add(doc);\n      }\n    }\n    \n    // Route the deleteById's\n    \n    if (deleteById != null) {\n      \n      Iterator<Map.Entry<String,Map<String,Object>>> entries = deleteById.entrySet()\n          .iterator();\n      while (entries.hasNext()) {\n        \n        Map.Entry<String,Map<String,Object>> entry = entries.next();\n        \n        String deleteId = entry.getKey();\n        Map<String,Object> map = entry.getValue();\n        Long version = null;\n        if (map != null) {\n          version = (Long) map.get(\"ver\");\n        }\n        Slice slice = router.getTargetSlice(deleteId, null, null, col);\n        if (slice == null) {\n          return null;\n        }\n        List<String> urls = urlMap.get(slice.getName());\n        String leaderUrl = urls.get(0);\n        LBHttpSolrServer.Req request = routes.get(leaderUrl);\n        if (request != null) {\n          UpdateRequest urequest = (UpdateRequest) request.getRequest();\n          urequest.deleteById(deleteId, version);\n        } else {\n          UpdateRequest urequest = new UpdateRequest();\n          urequest.deleteById(deleteId, version);\n          request = new LBHttpSolrServer.Req(urequest, urls);\n          routes.put(leaderUrl, request);\n        }\n      }\n    }\n\n    return routes;\n  }\n\n","bugFix":["d5fc588fc7c6e55c0d778665292d023bf8d5f3b1"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e7c1be4a49a7733047fef6a6790f8161e543366b","date":1383194125,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/UpdateRequest#getRoutes(DocRouter,DocCollection,Map[String,List[String]],ModifiableSolrParams,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/UpdateRequest#getRoutes(DocRouter,DocCollection,Map[String,List[String]],ModifiableSolrParams,String).mjava","sourceNew":"  /**\n   * @param router to route updates with\n   * @param col DocCollection for the updates\n   * @param urlMap of the cluster\n   * @param params params to use\n   * @param idField the id field\n   * @return a Map of urls to requests\n   */\n  public Map<String,LBHttpSolrServer.Req> getRoutes(DocRouter router,\n      DocCollection col, Map<String,List<String>> urlMap,\n      ModifiableSolrParams params, String idField) {\n    \n    if ((documents == null || documents.size() == 0)\n        && (deleteById == null || deleteById.size() == 0)) {\n      return null;\n    }\n    \n    Map<String,LBHttpSolrServer.Req> routes = new HashMap<String,LBHttpSolrServer.Req>();\n    if (documents != null) {\n      Set<Entry<SolrInputDocument,Map<String,Object>>> entries = documents.entrySet();\n      for (Entry<SolrInputDocument,Map<String,Object>> entry : entries) {\n        SolrInputDocument doc = entry.getKey();\n        Object id = doc.getFieldValue(idField);\n        if (id == null) {\n          return null;\n        }\n        Slice slice = router.getTargetSlice(id\n            .toString(), doc, null, col);\n        if (slice == null) {\n          return null;\n        }\n        List<String> urls = urlMap.get(slice.getName());\n        String leaderUrl = urls.get(0);\n        LBHttpSolrServer.Req request = (LBHttpSolrServer.Req) routes\n            .get(leaderUrl);\n        if (request == null) {\n          UpdateRequest updateRequest = new UpdateRequest();\n          updateRequest.setMethod(getMethod());\n          updateRequest.setCommitWithin(getCommitWithin());\n          updateRequest.setParams(params);\n          updateRequest.setPath(getPath());\n          request = new LBHttpSolrServer.Req(updateRequest, urls);\n          routes.put(leaderUrl, request);\n        }\n        UpdateRequest urequest = (UpdateRequest) request.getRequest();\n        urequest.add(doc);\n      }\n    }\n    \n    // Route the deleteById's\n    \n    if (deleteById != null) {\n      \n      Iterator<Map.Entry<String,Map<String,Object>>> entries = deleteById.entrySet()\n          .iterator();\n      while (entries.hasNext()) {\n        \n        Map.Entry<String,Map<String,Object>> entry = entries.next();\n        \n        String deleteId = entry.getKey();\n        Map<String,Object> map = entry.getValue();\n        Long version = null;\n        if (map != null) {\n          version = (Long) map.get(VER);\n        }\n        Slice slice = router.getTargetSlice(deleteId, null, null, col);\n        if (slice == null) {\n          return null;\n        }\n        List<String> urls = urlMap.get(slice.getName());\n        String leaderUrl = urls.get(0);\n        LBHttpSolrServer.Req request = routes.get(leaderUrl);\n        if (request != null) {\n          UpdateRequest urequest = (UpdateRequest) request.getRequest();\n          urequest.deleteById(deleteId, version);\n        } else {\n          UpdateRequest urequest = new UpdateRequest();\n          urequest.setParams(params);\n          urequest.deleteById(deleteId, version);\n          request = new LBHttpSolrServer.Req(urequest, urls);\n          routes.put(leaderUrl, request);\n        }\n      }\n    }\n\n    return routes;\n  }\n\n","sourceOld":"  /**\n   * @param router to route updates with\n   * @param col DocCollection for the updates\n   * @param urlMap of the cluster\n   * @param params params to use\n   * @param idField the id field\n   * @return a Map of urls to requests\n   */\n  public Map<String,LBHttpSolrServer.Req> getRoutes(DocRouter router,\n      DocCollection col, Map<String,List<String>> urlMap,\n      ModifiableSolrParams params, String idField) {\n    \n    if ((documents == null || documents.size() == 0)\n        && (deleteById == null || deleteById.size() == 0)) {\n      return null;\n    }\n    \n    Map<String,LBHttpSolrServer.Req> routes = new HashMap<String,LBHttpSolrServer.Req>();\n    if (documents != null) {\n      Set<Entry<SolrInputDocument,Map<String,Object>>> entries = documents.entrySet();\n      for (Entry<SolrInputDocument,Map<String,Object>> entry : entries) {\n        SolrInputDocument doc = entry.getKey();\n        Object id = doc.getFieldValue(idField);\n        if (id == null) {\n          return null;\n        }\n        Slice slice = router.getTargetSlice(id\n            .toString(), doc, null, col);\n        if (slice == null) {\n          return null;\n        }\n        List<String> urls = urlMap.get(slice.getName());\n        String leaderUrl = urls.get(0);\n        LBHttpSolrServer.Req request = (LBHttpSolrServer.Req) routes\n            .get(leaderUrl);\n        if (request == null) {\n          UpdateRequest updateRequest = new UpdateRequest();\n          updateRequest.setMethod(getMethod());\n          updateRequest.setCommitWithin(getCommitWithin());\n          updateRequest.setParams(params);\n          updateRequest.setPath(getPath());\n          request = new LBHttpSolrServer.Req(updateRequest, urls);\n          routes.put(leaderUrl, request);\n        }\n        UpdateRequest urequest = (UpdateRequest) request.getRequest();\n        urequest.add(doc);\n      }\n    }\n    \n    // Route the deleteById's\n    \n    if (deleteById != null) {\n      \n      Iterator<Map.Entry<String,Map<String,Object>>> entries = deleteById.entrySet()\n          .iterator();\n      while (entries.hasNext()) {\n        \n        Map.Entry<String,Map<String,Object>> entry = entries.next();\n        \n        String deleteId = entry.getKey();\n        Map<String,Object> map = entry.getValue();\n        Long version = null;\n        if (map != null) {\n          version = (Long) map.get(VER);\n        }\n        Slice slice = router.getTargetSlice(deleteId, null, null, col);\n        if (slice == null) {\n          return null;\n        }\n        List<String> urls = urlMap.get(slice.getName());\n        String leaderUrl = urls.get(0);\n        LBHttpSolrServer.Req request = routes.get(leaderUrl);\n        if (request != null) {\n          UpdateRequest urequest = (UpdateRequest) request.getRequest();\n          urequest.deleteById(deleteId, version);\n        } else {\n          UpdateRequest urequest = new UpdateRequest();\n          urequest.deleteById(deleteId, version);\n          request = new LBHttpSolrServer.Req(urequest, urls);\n          routes.put(leaderUrl, request);\n        }\n      }\n    }\n\n    return routes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/UpdateRequest#getRoutes(DocRouter,DocCollection,Map[String,List[String]],ModifiableSolrParams,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/UpdateRequest#getRoutes(DocRouter,DocCollection,Map[String,List[String]],ModifiableSolrParams,String).mjava","sourceNew":"  /**\n   * @param router to route updates with\n   * @param col DocCollection for the updates\n   * @param urlMap of the cluster\n   * @param params params to use\n   * @param idField the id field\n   * @return a Map of urls to requests\n   */\n  public Map<String,LBHttpSolrServer.Req> getRoutes(DocRouter router,\n      DocCollection col, Map<String,List<String>> urlMap,\n      ModifiableSolrParams params, String idField) {\n    \n    if ((documents == null || documents.size() == 0)\n        && (deleteById == null || deleteById.size() == 0)) {\n      return null;\n    }\n    \n    Map<String,LBHttpSolrServer.Req> routes = new HashMap<>();\n    if (documents != null) {\n      Set<Entry<SolrInputDocument,Map<String,Object>>> entries = documents.entrySet();\n      for (Entry<SolrInputDocument,Map<String,Object>> entry : entries) {\n        SolrInputDocument doc = entry.getKey();\n        Object id = doc.getFieldValue(idField);\n        if (id == null) {\n          return null;\n        }\n        Slice slice = router.getTargetSlice(id\n            .toString(), doc, null, col);\n        if (slice == null) {\n          return null;\n        }\n        List<String> urls = urlMap.get(slice.getName());\n        String leaderUrl = urls.get(0);\n        LBHttpSolrServer.Req request = (LBHttpSolrServer.Req) routes\n            .get(leaderUrl);\n        if (request == null) {\n          UpdateRequest updateRequest = new UpdateRequest();\n          updateRequest.setMethod(getMethod());\n          updateRequest.setCommitWithin(getCommitWithin());\n          updateRequest.setParams(params);\n          updateRequest.setPath(getPath());\n          request = new LBHttpSolrServer.Req(updateRequest, urls);\n          routes.put(leaderUrl, request);\n        }\n        UpdateRequest urequest = (UpdateRequest) request.getRequest();\n        urequest.add(doc);\n      }\n    }\n    \n    // Route the deleteById's\n    \n    if (deleteById != null) {\n      \n      Iterator<Map.Entry<String,Map<String,Object>>> entries = deleteById.entrySet()\n          .iterator();\n      while (entries.hasNext()) {\n        \n        Map.Entry<String,Map<String,Object>> entry = entries.next();\n        \n        String deleteId = entry.getKey();\n        Map<String,Object> map = entry.getValue();\n        Long version = null;\n        if (map != null) {\n          version = (Long) map.get(VER);\n        }\n        Slice slice = router.getTargetSlice(deleteId, null, null, col);\n        if (slice == null) {\n          return null;\n        }\n        List<String> urls = urlMap.get(slice.getName());\n        String leaderUrl = urls.get(0);\n        LBHttpSolrServer.Req request = routes.get(leaderUrl);\n        if (request != null) {\n          UpdateRequest urequest = (UpdateRequest) request.getRequest();\n          urequest.deleteById(deleteId, version);\n        } else {\n          UpdateRequest urequest = new UpdateRequest();\n          urequest.setParams(params);\n          urequest.deleteById(deleteId, version);\n          request = new LBHttpSolrServer.Req(urequest, urls);\n          routes.put(leaderUrl, request);\n        }\n      }\n    }\n\n    return routes;\n  }\n\n","sourceOld":"  /**\n   * @param router to route updates with\n   * @param col DocCollection for the updates\n   * @param urlMap of the cluster\n   * @param params params to use\n   * @param idField the id field\n   * @return a Map of urls to requests\n   */\n  public Map<String,LBHttpSolrServer.Req> getRoutes(DocRouter router,\n      DocCollection col, Map<String,List<String>> urlMap,\n      ModifiableSolrParams params, String idField) {\n    \n    if ((documents == null || documents.size() == 0)\n        && (deleteById == null || deleteById.size() == 0)) {\n      return null;\n    }\n    \n    Map<String,LBHttpSolrServer.Req> routes = new HashMap<String,LBHttpSolrServer.Req>();\n    if (documents != null) {\n      Set<Entry<SolrInputDocument,Map<String,Object>>> entries = documents.entrySet();\n      for (Entry<SolrInputDocument,Map<String,Object>> entry : entries) {\n        SolrInputDocument doc = entry.getKey();\n        Object id = doc.getFieldValue(idField);\n        if (id == null) {\n          return null;\n        }\n        Slice slice = router.getTargetSlice(id\n            .toString(), doc, null, col);\n        if (slice == null) {\n          return null;\n        }\n        List<String> urls = urlMap.get(slice.getName());\n        String leaderUrl = urls.get(0);\n        LBHttpSolrServer.Req request = (LBHttpSolrServer.Req) routes\n            .get(leaderUrl);\n        if (request == null) {\n          UpdateRequest updateRequest = new UpdateRequest();\n          updateRequest.setMethod(getMethod());\n          updateRequest.setCommitWithin(getCommitWithin());\n          updateRequest.setParams(params);\n          updateRequest.setPath(getPath());\n          request = new LBHttpSolrServer.Req(updateRequest, urls);\n          routes.put(leaderUrl, request);\n        }\n        UpdateRequest urequest = (UpdateRequest) request.getRequest();\n        urequest.add(doc);\n      }\n    }\n    \n    // Route the deleteById's\n    \n    if (deleteById != null) {\n      \n      Iterator<Map.Entry<String,Map<String,Object>>> entries = deleteById.entrySet()\n          .iterator();\n      while (entries.hasNext()) {\n        \n        Map.Entry<String,Map<String,Object>> entry = entries.next();\n        \n        String deleteId = entry.getKey();\n        Map<String,Object> map = entry.getValue();\n        Long version = null;\n        if (map != null) {\n          version = (Long) map.get(VER);\n        }\n        Slice slice = router.getTargetSlice(deleteId, null, null, col);\n        if (slice == null) {\n          return null;\n        }\n        List<String> urls = urlMap.get(slice.getName());\n        String leaderUrl = urls.get(0);\n        LBHttpSolrServer.Req request = routes.get(leaderUrl);\n        if (request != null) {\n          UpdateRequest urequest = (UpdateRequest) request.getRequest();\n          urequest.deleteById(deleteId, version);\n        } else {\n          UpdateRequest urequest = new UpdateRequest();\n          urequest.setParams(params);\n          urequest.deleteById(deleteId, version);\n          request = new LBHttpSolrServer.Req(urequest, urls);\n          routes.put(leaderUrl, request);\n        }\n      }\n    }\n\n    return routes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/UpdateRequest#getRoutes(DocRouter,DocCollection,Map[String,List[String]],ModifiableSolrParams,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/UpdateRequest#getRoutes(DocRouter,DocCollection,Map[String,List[String]],ModifiableSolrParams,String).mjava","sourceNew":"  /**\n   * @param router to route updates with\n   * @param col DocCollection for the updates\n   * @param urlMap of the cluster\n   * @param params params to use\n   * @param idField the id field\n   * @return a Map of urls to requests\n   */\n  public Map<String,LBHttpSolrClient.Req> getRoutes(DocRouter router,\n      DocCollection col, Map<String,List<String>> urlMap,\n      ModifiableSolrParams params, String idField) {\n    \n    if ((documents == null || documents.size() == 0)\n        && (deleteById == null || deleteById.size() == 0)) {\n      return null;\n    }\n    \n    Map<String,LBHttpSolrClient.Req> routes = new HashMap<>();\n    if (documents != null) {\n      Set<Entry<SolrInputDocument,Map<String,Object>>> entries = documents.entrySet();\n      for (Entry<SolrInputDocument,Map<String,Object>> entry : entries) {\n        SolrInputDocument doc = entry.getKey();\n        Object id = doc.getFieldValue(idField);\n        if (id == null) {\n          return null;\n        }\n        Slice slice = router.getTargetSlice(id\n            .toString(), doc, null, col);\n        if (slice == null) {\n          return null;\n        }\n        List<String> urls = urlMap.get(slice.getName());\n        String leaderUrl = urls.get(0);\n        LBHttpSolrClient.Req request = (LBHttpSolrClient.Req) routes\n            .get(leaderUrl);\n        if (request == null) {\n          UpdateRequest updateRequest = new UpdateRequest();\n          updateRequest.setMethod(getMethod());\n          updateRequest.setCommitWithin(getCommitWithin());\n          updateRequest.setParams(params);\n          updateRequest.setPath(getPath());\n          request = new LBHttpSolrClient.Req(updateRequest, urls);\n          routes.put(leaderUrl, request);\n        }\n        UpdateRequest urequest = (UpdateRequest) request.getRequest();\n        urequest.add(doc);\n      }\n    }\n    \n    // Route the deleteById's\n    \n    if (deleteById != null) {\n      \n      Iterator<Map.Entry<String,Map<String,Object>>> entries = deleteById.entrySet()\n          .iterator();\n      while (entries.hasNext()) {\n        \n        Map.Entry<String,Map<String,Object>> entry = entries.next();\n        \n        String deleteId = entry.getKey();\n        Map<String,Object> map = entry.getValue();\n        Long version = null;\n        if (map != null) {\n          version = (Long) map.get(VER);\n        }\n        Slice slice = router.getTargetSlice(deleteId, null, null, col);\n        if (slice == null) {\n          return null;\n        }\n        List<String> urls = urlMap.get(slice.getName());\n        String leaderUrl = urls.get(0);\n        LBHttpSolrClient.Req request = routes.get(leaderUrl);\n        if (request != null) {\n          UpdateRequest urequest = (UpdateRequest) request.getRequest();\n          urequest.deleteById(deleteId, version);\n        } else {\n          UpdateRequest urequest = new UpdateRequest();\n          urequest.setParams(params);\n          urequest.deleteById(deleteId, version);\n          request = new LBHttpSolrClient.Req(urequest, urls);\n          routes.put(leaderUrl, request);\n        }\n      }\n    }\n\n    return routes;\n  }\n\n","sourceOld":"  /**\n   * @param router to route updates with\n   * @param col DocCollection for the updates\n   * @param urlMap of the cluster\n   * @param params params to use\n   * @param idField the id field\n   * @return a Map of urls to requests\n   */\n  public Map<String,LBHttpSolrServer.Req> getRoutes(DocRouter router,\n      DocCollection col, Map<String,List<String>> urlMap,\n      ModifiableSolrParams params, String idField) {\n    \n    if ((documents == null || documents.size() == 0)\n        && (deleteById == null || deleteById.size() == 0)) {\n      return null;\n    }\n    \n    Map<String,LBHttpSolrServer.Req> routes = new HashMap<>();\n    if (documents != null) {\n      Set<Entry<SolrInputDocument,Map<String,Object>>> entries = documents.entrySet();\n      for (Entry<SolrInputDocument,Map<String,Object>> entry : entries) {\n        SolrInputDocument doc = entry.getKey();\n        Object id = doc.getFieldValue(idField);\n        if (id == null) {\n          return null;\n        }\n        Slice slice = router.getTargetSlice(id\n            .toString(), doc, null, col);\n        if (slice == null) {\n          return null;\n        }\n        List<String> urls = urlMap.get(slice.getName());\n        String leaderUrl = urls.get(0);\n        LBHttpSolrServer.Req request = (LBHttpSolrServer.Req) routes\n            .get(leaderUrl);\n        if (request == null) {\n          UpdateRequest updateRequest = new UpdateRequest();\n          updateRequest.setMethod(getMethod());\n          updateRequest.setCommitWithin(getCommitWithin());\n          updateRequest.setParams(params);\n          updateRequest.setPath(getPath());\n          request = new LBHttpSolrServer.Req(updateRequest, urls);\n          routes.put(leaderUrl, request);\n        }\n        UpdateRequest urequest = (UpdateRequest) request.getRequest();\n        urequest.add(doc);\n      }\n    }\n    \n    // Route the deleteById's\n    \n    if (deleteById != null) {\n      \n      Iterator<Map.Entry<String,Map<String,Object>>> entries = deleteById.entrySet()\n          .iterator();\n      while (entries.hasNext()) {\n        \n        Map.Entry<String,Map<String,Object>> entry = entries.next();\n        \n        String deleteId = entry.getKey();\n        Map<String,Object> map = entry.getValue();\n        Long version = null;\n        if (map != null) {\n          version = (Long) map.get(VER);\n        }\n        Slice slice = router.getTargetSlice(deleteId, null, null, col);\n        if (slice == null) {\n          return null;\n        }\n        List<String> urls = urlMap.get(slice.getName());\n        String leaderUrl = urls.get(0);\n        LBHttpSolrServer.Req request = routes.get(leaderUrl);\n        if (request != null) {\n          UpdateRequest urequest = (UpdateRequest) request.getRequest();\n          urequest.deleteById(deleteId, version);\n        } else {\n          UpdateRequest urequest = new UpdateRequest();\n          urequest.setParams(params);\n          urequest.deleteById(deleteId, version);\n          request = new LBHttpSolrServer.Req(urequest, urls);\n          routes.put(leaderUrl, request);\n        }\n      }\n    }\n\n    return routes;\n  }\n\n","bugFix":null,"bugIntro":["cc3126fc8c8ae78d791419d51fd3df987e1b6ba4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"13a60d5cca07cbecc52e08e57ae3416a59b3dfe8","date":1420760947,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/UpdateRequest#getRoutes(DocRouter,DocCollection,Map[String,List[String]],ModifiableSolrParams,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/UpdateRequest#getRoutes(DocRouter,DocCollection,Map[String,List[String]],ModifiableSolrParams,String).mjava","sourceNew":"  /**\n   * @param router to route updates with\n   * @param col DocCollection for the updates\n   * @param urlMap of the cluster\n   * @param params params to use\n   * @param idField the id field\n   * @return a Map of urls to requests\n   */\n  public Map<String,LBHttpSolrClient.Req> getRoutes(DocRouter router,\n      DocCollection col, Map<String,List<String>> urlMap,\n      ModifiableSolrParams params, String idField) {\n    \n    if ((documents == null || documents.size() == 0)\n        && (deleteById == null || deleteById.size() == 0)) {\n      return null;\n    }\n    \n    Map<String,LBHttpSolrClient.Req> routes = new HashMap<>();\n    if (documents != null) {\n      Set<Entry<SolrInputDocument,Map<String,Object>>> entries = documents.entrySet();\n      for (Entry<SolrInputDocument,Map<String,Object>> entry : entries) {\n        SolrInputDocument doc = entry.getKey();\n        Object id = doc.getFieldValue(idField);\n        if (id == null) {\n          return null;\n        }\n        Slice slice = router.getTargetSlice(id\n            .toString(), doc, null, col);\n        if (slice == null) {\n          return null;\n        }\n        List<String> urls = urlMap.get(slice.getName());\n        String leaderUrl = urls.get(0);\n        LBHttpSolrClient.Req request = (LBHttpSolrClient.Req) routes\n            .get(leaderUrl);\n        if (request == null) {\n          UpdateRequest updateRequest = new UpdateRequest();\n          updateRequest.setMethod(getMethod());\n          updateRequest.setCommitWithin(getCommitWithin());\n          updateRequest.setParams(params);\n          updateRequest.setPath(getPath());\n          request = new LBHttpSolrClient.Req(updateRequest, urls);\n          routes.put(leaderUrl, request);\n        }\n        UpdateRequest urequest = (UpdateRequest) request.getRequest();\n        Map<String,Object> value = entry.getValue();\n        Boolean ow = null;\n        if (value != null) {\n          ow = (Boolean) value.get(OVERWRITE);\n        }\n        if (ow != null) {\n          urequest.add(doc, ow);\n        } else {\n          urequest.add(doc);\n        }\n      }\n    }\n    \n    // Route the deleteById's\n    \n    if (deleteById != null) {\n      \n      Iterator<Map.Entry<String,Map<String,Object>>> entries = deleteById.entrySet()\n          .iterator();\n      while (entries.hasNext()) {\n        \n        Map.Entry<String,Map<String,Object>> entry = entries.next();\n        \n        String deleteId = entry.getKey();\n        Map<String,Object> map = entry.getValue();\n        Long version = null;\n        if (map != null) {\n          version = (Long) map.get(VER);\n        }\n        Slice slice = router.getTargetSlice(deleteId, null, null, col);\n        if (slice == null) {\n          return null;\n        }\n        List<String> urls = urlMap.get(slice.getName());\n        String leaderUrl = urls.get(0);\n        LBHttpSolrClient.Req request = routes.get(leaderUrl);\n        if (request != null) {\n          UpdateRequest urequest = (UpdateRequest) request.getRequest();\n          urequest.deleteById(deleteId, version);\n        } else {\n          UpdateRequest urequest = new UpdateRequest();\n          urequest.setParams(params);\n          urequest.deleteById(deleteId, version);\n          request = new LBHttpSolrClient.Req(urequest, urls);\n          routes.put(leaderUrl, request);\n        }\n      }\n    }\n\n    return routes;\n  }\n\n","sourceOld":"  /**\n   * @param router to route updates with\n   * @param col DocCollection for the updates\n   * @param urlMap of the cluster\n   * @param params params to use\n   * @param idField the id field\n   * @return a Map of urls to requests\n   */\n  public Map<String,LBHttpSolrClient.Req> getRoutes(DocRouter router,\n      DocCollection col, Map<String,List<String>> urlMap,\n      ModifiableSolrParams params, String idField) {\n    \n    if ((documents == null || documents.size() == 0)\n        && (deleteById == null || deleteById.size() == 0)) {\n      return null;\n    }\n    \n    Map<String,LBHttpSolrClient.Req> routes = new HashMap<>();\n    if (documents != null) {\n      Set<Entry<SolrInputDocument,Map<String,Object>>> entries = documents.entrySet();\n      for (Entry<SolrInputDocument,Map<String,Object>> entry : entries) {\n        SolrInputDocument doc = entry.getKey();\n        Object id = doc.getFieldValue(idField);\n        if (id == null) {\n          return null;\n        }\n        Slice slice = router.getTargetSlice(id\n            .toString(), doc, null, col);\n        if (slice == null) {\n          return null;\n        }\n        List<String> urls = urlMap.get(slice.getName());\n        String leaderUrl = urls.get(0);\n        LBHttpSolrClient.Req request = (LBHttpSolrClient.Req) routes\n            .get(leaderUrl);\n        if (request == null) {\n          UpdateRequest updateRequest = new UpdateRequest();\n          updateRequest.setMethod(getMethod());\n          updateRequest.setCommitWithin(getCommitWithin());\n          updateRequest.setParams(params);\n          updateRequest.setPath(getPath());\n          request = new LBHttpSolrClient.Req(updateRequest, urls);\n          routes.put(leaderUrl, request);\n        }\n        UpdateRequest urequest = (UpdateRequest) request.getRequest();\n        urequest.add(doc);\n      }\n    }\n    \n    // Route the deleteById's\n    \n    if (deleteById != null) {\n      \n      Iterator<Map.Entry<String,Map<String,Object>>> entries = deleteById.entrySet()\n          .iterator();\n      while (entries.hasNext()) {\n        \n        Map.Entry<String,Map<String,Object>> entry = entries.next();\n        \n        String deleteId = entry.getKey();\n        Map<String,Object> map = entry.getValue();\n        Long version = null;\n        if (map != null) {\n          version = (Long) map.get(VER);\n        }\n        Slice slice = router.getTargetSlice(deleteId, null, null, col);\n        if (slice == null) {\n          return null;\n        }\n        List<String> urls = urlMap.get(slice.getName());\n        String leaderUrl = urls.get(0);\n        LBHttpSolrClient.Req request = routes.get(leaderUrl);\n        if (request != null) {\n          UpdateRequest urequest = (UpdateRequest) request.getRequest();\n          urequest.deleteById(deleteId, version);\n        } else {\n          UpdateRequest urequest = new UpdateRequest();\n          urequest.setParams(params);\n          urequest.deleteById(deleteId, version);\n          request = new LBHttpSolrClient.Req(urequest, urls);\n          routes.put(leaderUrl, request);\n        }\n      }\n    }\n\n    return routes;\n  }\n\n","bugFix":["d5fc588fc7c6e55c0d778665292d023bf8d5f3b1"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"747dd71fefcbc7142661c25334b74c518fef4d81","date":1423504825,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/UpdateRequest#getRoutes(DocRouter,DocCollection,Map[String,List[String]],ModifiableSolrParams,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/UpdateRequest#getRoutes(DocRouter,DocCollection,Map[String,List[String]],ModifiableSolrParams,String).mjava","sourceNew":"  /**\n   * @param router to route updates with\n   * @param col DocCollection for the updates\n   * @param urlMap of the cluster\n   * @param params params to use\n   * @param idField the id field\n   * @return a Map of urls to requests\n   */\n  public Map<String,LBHttpSolrClient.Req> getRoutes(DocRouter router,\n      DocCollection col, Map<String,List<String>> urlMap,\n      ModifiableSolrParams params, String idField) {\n    \n    if ((documents == null || documents.size() == 0)\n        && (deleteById == null || deleteById.size() == 0)) {\n      return null;\n    }\n    \n    Map<String,LBHttpSolrClient.Req> routes = new HashMap<>();\n    if (documents != null) {\n      Set<Entry<SolrInputDocument,Map<String,Object>>> entries = documents.entrySet();\n      for (Entry<SolrInputDocument,Map<String,Object>> entry : entries) {\n        SolrInputDocument doc = entry.getKey();\n        Object id = doc.getFieldValue(idField);\n        if (id == null) {\n          return null;\n        }\n        Slice slice = router.getTargetSlice(id\n            .toString(), doc, null, null, col);\n        if (slice == null) {\n          return null;\n        }\n        List<String> urls = urlMap.get(slice.getName());\n        String leaderUrl = urls.get(0);\n        LBHttpSolrClient.Req request = (LBHttpSolrClient.Req) routes\n            .get(leaderUrl);\n        if (request == null) {\n          UpdateRequest updateRequest = new UpdateRequest();\n          updateRequest.setMethod(getMethod());\n          updateRequest.setCommitWithin(getCommitWithin());\n          updateRequest.setParams(params);\n          updateRequest.setPath(getPath());\n          request = new LBHttpSolrClient.Req(updateRequest, urls);\n          routes.put(leaderUrl, request);\n        }\n        UpdateRequest urequest = (UpdateRequest) request.getRequest();\n        Map<String,Object> value = entry.getValue();\n        Boolean ow = null;\n        if (value != null) {\n          ow = (Boolean) value.get(OVERWRITE);\n        }\n        if (ow != null) {\n          urequest.add(doc, ow);\n        } else {\n          urequest.add(doc);\n        }\n      }\n    }\n    \n    // Route the deleteById's\n    \n    if (deleteById != null) {\n      \n      Iterator<Map.Entry<String,Map<String,Object>>> entries = deleteById.entrySet()\n          .iterator();\n      while (entries.hasNext()) {\n        \n        Map.Entry<String,Map<String,Object>> entry = entries.next();\n        \n        String deleteId = entry.getKey();\n        Map<String,Object> map = entry.getValue();\n        Long version = null;\n        if (map != null) {\n          version = (Long) map.get(VER);\n        }\n        Slice slice = router.getTargetSlice(deleteId, null, null, null, col);\n        if (slice == null) {\n          return null;\n        }\n        List<String> urls = urlMap.get(slice.getName());\n        String leaderUrl = urls.get(0);\n        LBHttpSolrClient.Req request = routes.get(leaderUrl);\n        if (request != null) {\n          UpdateRequest urequest = (UpdateRequest) request.getRequest();\n          urequest.deleteById(deleteId, version);\n        } else {\n          UpdateRequest urequest = new UpdateRequest();\n          urequest.setParams(params);\n          urequest.deleteById(deleteId, version);\n          request = new LBHttpSolrClient.Req(urequest, urls);\n          routes.put(leaderUrl, request);\n        }\n      }\n    }\n\n    return routes;\n  }\n\n","sourceOld":"  /**\n   * @param router to route updates with\n   * @param col DocCollection for the updates\n   * @param urlMap of the cluster\n   * @param params params to use\n   * @param idField the id field\n   * @return a Map of urls to requests\n   */\n  public Map<String,LBHttpSolrClient.Req> getRoutes(DocRouter router,\n      DocCollection col, Map<String,List<String>> urlMap,\n      ModifiableSolrParams params, String idField) {\n    \n    if ((documents == null || documents.size() == 0)\n        && (deleteById == null || deleteById.size() == 0)) {\n      return null;\n    }\n    \n    Map<String,LBHttpSolrClient.Req> routes = new HashMap<>();\n    if (documents != null) {\n      Set<Entry<SolrInputDocument,Map<String,Object>>> entries = documents.entrySet();\n      for (Entry<SolrInputDocument,Map<String,Object>> entry : entries) {\n        SolrInputDocument doc = entry.getKey();\n        Object id = doc.getFieldValue(idField);\n        if (id == null) {\n          return null;\n        }\n        Slice slice = router.getTargetSlice(id\n            .toString(), doc, null, col);\n        if (slice == null) {\n          return null;\n        }\n        List<String> urls = urlMap.get(slice.getName());\n        String leaderUrl = urls.get(0);\n        LBHttpSolrClient.Req request = (LBHttpSolrClient.Req) routes\n            .get(leaderUrl);\n        if (request == null) {\n          UpdateRequest updateRequest = new UpdateRequest();\n          updateRequest.setMethod(getMethod());\n          updateRequest.setCommitWithin(getCommitWithin());\n          updateRequest.setParams(params);\n          updateRequest.setPath(getPath());\n          request = new LBHttpSolrClient.Req(updateRequest, urls);\n          routes.put(leaderUrl, request);\n        }\n        UpdateRequest urequest = (UpdateRequest) request.getRequest();\n        Map<String,Object> value = entry.getValue();\n        Boolean ow = null;\n        if (value != null) {\n          ow = (Boolean) value.get(OVERWRITE);\n        }\n        if (ow != null) {\n          urequest.add(doc, ow);\n        } else {\n          urequest.add(doc);\n        }\n      }\n    }\n    \n    // Route the deleteById's\n    \n    if (deleteById != null) {\n      \n      Iterator<Map.Entry<String,Map<String,Object>>> entries = deleteById.entrySet()\n          .iterator();\n      while (entries.hasNext()) {\n        \n        Map.Entry<String,Map<String,Object>> entry = entries.next();\n        \n        String deleteId = entry.getKey();\n        Map<String,Object> map = entry.getValue();\n        Long version = null;\n        if (map != null) {\n          version = (Long) map.get(VER);\n        }\n        Slice slice = router.getTargetSlice(deleteId, null, null, col);\n        if (slice == null) {\n          return null;\n        }\n        List<String> urls = urlMap.get(slice.getName());\n        String leaderUrl = urls.get(0);\n        LBHttpSolrClient.Req request = routes.get(leaderUrl);\n        if (request != null) {\n          UpdateRequest urequest = (UpdateRequest) request.getRequest();\n          urequest.deleteById(deleteId, version);\n        } else {\n          UpdateRequest urequest = new UpdateRequest();\n          urequest.setParams(params);\n          urequest.deleteById(deleteId, version);\n          request = new LBHttpSolrClient.Req(urequest, urls);\n          routes.put(leaderUrl, request);\n        }\n      }\n    }\n\n    return routes;\n  }\n\n","bugFix":["d5fc588fc7c6e55c0d778665292d023bf8d5f3b1"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"51f7b7f45b8207ac13e4274c75d82ef57c0c4c1e","date":1454592543,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/UpdateRequest#getRoutes(DocRouter,DocCollection,Map[String,List[String]],ModifiableSolrParams,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/UpdateRequest#getRoutes(DocRouter,DocCollection,Map[String,List[String]],ModifiableSolrParams,String).mjava","sourceNew":"  /**\n   * @param router to route updates with\n   * @param col DocCollection for the updates\n   * @param urlMap of the cluster\n   * @param params params to use\n   * @param idField the id field\n   * @return a Map of urls to requests\n   */\n  public Map<String,LBHttpSolrClient.Req> getRoutes(DocRouter router,\n      DocCollection col, Map<String,List<String>> urlMap,\n      ModifiableSolrParams params, String idField) {\n    \n    if ((documents == null || documents.size() == 0)\n        && (deleteById == null || deleteById.size() == 0)) {\n      return null;\n    }\n    \n    Map<String,LBHttpSolrClient.Req> routes = new HashMap<>();\n    if (documents != null) {\n      Set<Entry<SolrInputDocument,Map<String,Object>>> entries = documents.entrySet();\n      for (Entry<SolrInputDocument,Map<String,Object>> entry : entries) {\n        SolrInputDocument doc = entry.getKey();\n        Object id = doc.getFieldValue(idField);\n        if (id == null) {\n          return null;\n        }\n        Slice slice = router.getTargetSlice(id\n            .toString(), doc, null, null, col);\n        if (slice == null) {\n          return null;\n        }\n        List<String> urls = urlMap.get(slice.getName());\n        String leaderUrl = urls.get(0);\n        LBHttpSolrClient.Req request = (LBHttpSolrClient.Req) routes\n            .get(leaderUrl);\n        if (request == null) {\n          UpdateRequest updateRequest = new UpdateRequest();\n          updateRequest.setMethod(getMethod());\n          updateRequest.setCommitWithin(getCommitWithin());\n          updateRequest.setParams(params);\n          updateRequest.setPath(getPath());\n          updateRequest.setBasicAuthCredentials(getBasicAuthUser(), getBasicAuthPassword());\n          request = new LBHttpSolrClient.Req(updateRequest, urls);\n          routes.put(leaderUrl, request);\n        }\n        UpdateRequest urequest = (UpdateRequest) request.getRequest();\n        Map<String,Object> value = entry.getValue();\n        Boolean ow = null;\n        if (value != null) {\n          ow = (Boolean) value.get(OVERWRITE);\n        }\n        if (ow != null) {\n          urequest.add(doc, ow);\n        } else {\n          urequest.add(doc);\n        }\n      }\n    }\n    \n    // Route the deleteById's\n    \n    if (deleteById != null) {\n      \n      Iterator<Map.Entry<String,Map<String,Object>>> entries = deleteById.entrySet()\n          .iterator();\n      while (entries.hasNext()) {\n        \n        Map.Entry<String,Map<String,Object>> entry = entries.next();\n        \n        String deleteId = entry.getKey();\n        Map<String,Object> map = entry.getValue();\n        Long version = null;\n        if (map != null) {\n          version = (Long) map.get(VER);\n        }\n        Slice slice = router.getTargetSlice(deleteId, null, null, null, col);\n        if (slice == null) {\n          return null;\n        }\n        List<String> urls = urlMap.get(slice.getName());\n        String leaderUrl = urls.get(0);\n        LBHttpSolrClient.Req request = routes.get(leaderUrl);\n        if (request != null) {\n          UpdateRequest urequest = (UpdateRequest) request.getRequest();\n          urequest.deleteById(deleteId, version);\n        } else {\n          UpdateRequest urequest = new UpdateRequest();\n          urequest.setParams(params);\n          urequest.deleteById(deleteId, version);\n          request = new LBHttpSolrClient.Req(urequest, urls);\n          routes.put(leaderUrl, request);\n        }\n      }\n    }\n\n    return routes;\n  }\n\n","sourceOld":"  /**\n   * @param router to route updates with\n   * @param col DocCollection for the updates\n   * @param urlMap of the cluster\n   * @param params params to use\n   * @param idField the id field\n   * @return a Map of urls to requests\n   */\n  public Map<String,LBHttpSolrClient.Req> getRoutes(DocRouter router,\n      DocCollection col, Map<String,List<String>> urlMap,\n      ModifiableSolrParams params, String idField) {\n    \n    if ((documents == null || documents.size() == 0)\n        && (deleteById == null || deleteById.size() == 0)) {\n      return null;\n    }\n    \n    Map<String,LBHttpSolrClient.Req> routes = new HashMap<>();\n    if (documents != null) {\n      Set<Entry<SolrInputDocument,Map<String,Object>>> entries = documents.entrySet();\n      for (Entry<SolrInputDocument,Map<String,Object>> entry : entries) {\n        SolrInputDocument doc = entry.getKey();\n        Object id = doc.getFieldValue(idField);\n        if (id == null) {\n          return null;\n        }\n        Slice slice = router.getTargetSlice(id\n            .toString(), doc, null, null, col);\n        if (slice == null) {\n          return null;\n        }\n        List<String> urls = urlMap.get(slice.getName());\n        String leaderUrl = urls.get(0);\n        LBHttpSolrClient.Req request = (LBHttpSolrClient.Req) routes\n            .get(leaderUrl);\n        if (request == null) {\n          UpdateRequest updateRequest = new UpdateRequest();\n          updateRequest.setMethod(getMethod());\n          updateRequest.setCommitWithin(getCommitWithin());\n          updateRequest.setParams(params);\n          updateRequest.setPath(getPath());\n          request = new LBHttpSolrClient.Req(updateRequest, urls);\n          routes.put(leaderUrl, request);\n        }\n        UpdateRequest urequest = (UpdateRequest) request.getRequest();\n        Map<String,Object> value = entry.getValue();\n        Boolean ow = null;\n        if (value != null) {\n          ow = (Boolean) value.get(OVERWRITE);\n        }\n        if (ow != null) {\n          urequest.add(doc, ow);\n        } else {\n          urequest.add(doc);\n        }\n      }\n    }\n    \n    // Route the deleteById's\n    \n    if (deleteById != null) {\n      \n      Iterator<Map.Entry<String,Map<String,Object>>> entries = deleteById.entrySet()\n          .iterator();\n      while (entries.hasNext()) {\n        \n        Map.Entry<String,Map<String,Object>> entry = entries.next();\n        \n        String deleteId = entry.getKey();\n        Map<String,Object> map = entry.getValue();\n        Long version = null;\n        if (map != null) {\n          version = (Long) map.get(VER);\n        }\n        Slice slice = router.getTargetSlice(deleteId, null, null, null, col);\n        if (slice == null) {\n          return null;\n        }\n        List<String> urls = urlMap.get(slice.getName());\n        String leaderUrl = urls.get(0);\n        LBHttpSolrClient.Req request = routes.get(leaderUrl);\n        if (request != null) {\n          UpdateRequest urequest = (UpdateRequest) request.getRequest();\n          urequest.deleteById(deleteId, version);\n        } else {\n          UpdateRequest urequest = new UpdateRequest();\n          urequest.setParams(params);\n          urequest.deleteById(deleteId, version);\n          request = new LBHttpSolrClient.Req(urequest, urls);\n          routes.put(leaderUrl, request);\n        }\n      }\n    }\n\n    return routes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b1704c078ec59838c9d95d5bf5738b393b537494","date":1454693901,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/UpdateRequest#getRoutes(DocRouter,DocCollection,Map[String,List[String]],ModifiableSolrParams,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/UpdateRequest#getRoutes(DocRouter,DocCollection,Map[String,List[String]],ModifiableSolrParams,String).mjava","sourceNew":"  /**\n   * @param router to route updates with\n   * @param col DocCollection for the updates\n   * @param urlMap of the cluster\n   * @param params params to use\n   * @param idField the id field\n   * @return a Map of urls to requests\n   */\n  public Map<String,LBHttpSolrClient.Req> getRoutes(DocRouter router,\n      DocCollection col, Map<String,List<String>> urlMap,\n      ModifiableSolrParams params, String idField) {\n    \n    if ((documents == null || documents.size() == 0)\n        && (deleteById == null || deleteById.size() == 0)) {\n      return null;\n    }\n    \n    Map<String,LBHttpSolrClient.Req> routes = new HashMap<>();\n    if (documents != null) {\n      Set<Entry<SolrInputDocument,Map<String,Object>>> entries = documents.entrySet();\n      for (Entry<SolrInputDocument,Map<String,Object>> entry : entries) {\n        SolrInputDocument doc = entry.getKey();\n        Object id = doc.getFieldValue(idField);\n        if (id == null) {\n          return null;\n        }\n        Slice slice = router.getTargetSlice(id\n            .toString(), doc, null, null, col);\n        if (slice == null) {\n          return null;\n        }\n        List<String> urls = urlMap.get(slice.getName());\n        String leaderUrl = urls.get(0);\n        LBHttpSolrClient.Req request = (LBHttpSolrClient.Req) routes\n            .get(leaderUrl);\n        if (request == null) {\n          UpdateRequest updateRequest = new UpdateRequest();\n          updateRequest.setMethod(getMethod());\n          updateRequest.setCommitWithin(getCommitWithin());\n          updateRequest.setParams(params);\n          updateRequest.setPath(getPath());\n          updateRequest.setBasicAuthCredentials(getBasicAuthUser(), getBasicAuthPassword());\n          request = new LBHttpSolrClient.Req(updateRequest, urls);\n          routes.put(leaderUrl, request);\n        }\n        UpdateRequest urequest = (UpdateRequest) request.getRequest();\n        Map<String,Object> value = entry.getValue();\n        Boolean ow = null;\n        if (value != null) {\n          ow = (Boolean) value.get(OVERWRITE);\n        }\n        if (ow != null) {\n          urequest.add(doc, ow);\n        } else {\n          urequest.add(doc);\n        }\n      }\n    }\n    \n    // Route the deleteById's\n    \n    if (deleteById != null) {\n      \n      Iterator<Map.Entry<String,Map<String,Object>>> entries = deleteById.entrySet()\n          .iterator();\n      while (entries.hasNext()) {\n        \n        Map.Entry<String,Map<String,Object>> entry = entries.next();\n        \n        String deleteId = entry.getKey();\n        Map<String,Object> map = entry.getValue();\n        Long version = null;\n        if (map != null) {\n          version = (Long) map.get(VER);\n        }\n        Slice slice = router.getTargetSlice(deleteId, null, null, null, col);\n        if (slice == null) {\n          return null;\n        }\n        List<String> urls = urlMap.get(slice.getName());\n        String leaderUrl = urls.get(0);\n        LBHttpSolrClient.Req request = routes.get(leaderUrl);\n        if (request != null) {\n          UpdateRequest urequest = (UpdateRequest) request.getRequest();\n          urequest.deleteById(deleteId, version);\n        } else {\n          UpdateRequest urequest = new UpdateRequest();\n          urequest.setParams(params);\n          urequest.deleteById(deleteId, version);\n          request = new LBHttpSolrClient.Req(urequest, urls);\n          routes.put(leaderUrl, request);\n        }\n      }\n    }\n\n    return routes;\n  }\n\n","sourceOld":"  /**\n   * @param router to route updates with\n   * @param col DocCollection for the updates\n   * @param urlMap of the cluster\n   * @param params params to use\n   * @param idField the id field\n   * @return a Map of urls to requests\n   */\n  public Map<String,LBHttpSolrClient.Req> getRoutes(DocRouter router,\n      DocCollection col, Map<String,List<String>> urlMap,\n      ModifiableSolrParams params, String idField) {\n    \n    if ((documents == null || documents.size() == 0)\n        && (deleteById == null || deleteById.size() == 0)) {\n      return null;\n    }\n    \n    Map<String,LBHttpSolrClient.Req> routes = new HashMap<>();\n    if (documents != null) {\n      Set<Entry<SolrInputDocument,Map<String,Object>>> entries = documents.entrySet();\n      for (Entry<SolrInputDocument,Map<String,Object>> entry : entries) {\n        SolrInputDocument doc = entry.getKey();\n        Object id = doc.getFieldValue(idField);\n        if (id == null) {\n          return null;\n        }\n        Slice slice = router.getTargetSlice(id\n            .toString(), doc, null, null, col);\n        if (slice == null) {\n          return null;\n        }\n        List<String> urls = urlMap.get(slice.getName());\n        String leaderUrl = urls.get(0);\n        LBHttpSolrClient.Req request = (LBHttpSolrClient.Req) routes\n            .get(leaderUrl);\n        if (request == null) {\n          UpdateRequest updateRequest = new UpdateRequest();\n          updateRequest.setMethod(getMethod());\n          updateRequest.setCommitWithin(getCommitWithin());\n          updateRequest.setParams(params);\n          updateRequest.setPath(getPath());\n          request = new LBHttpSolrClient.Req(updateRequest, urls);\n          routes.put(leaderUrl, request);\n        }\n        UpdateRequest urequest = (UpdateRequest) request.getRequest();\n        Map<String,Object> value = entry.getValue();\n        Boolean ow = null;\n        if (value != null) {\n          ow = (Boolean) value.get(OVERWRITE);\n        }\n        if (ow != null) {\n          urequest.add(doc, ow);\n        } else {\n          urequest.add(doc);\n        }\n      }\n    }\n    \n    // Route the deleteById's\n    \n    if (deleteById != null) {\n      \n      Iterator<Map.Entry<String,Map<String,Object>>> entries = deleteById.entrySet()\n          .iterator();\n      while (entries.hasNext()) {\n        \n        Map.Entry<String,Map<String,Object>> entry = entries.next();\n        \n        String deleteId = entry.getKey();\n        Map<String,Object> map = entry.getValue();\n        Long version = null;\n        if (map != null) {\n          version = (Long) map.get(VER);\n        }\n        Slice slice = router.getTargetSlice(deleteId, null, null, null, col);\n        if (slice == null) {\n          return null;\n        }\n        List<String> urls = urlMap.get(slice.getName());\n        String leaderUrl = urls.get(0);\n        LBHttpSolrClient.Req request = routes.get(leaderUrl);\n        if (request != null) {\n          UpdateRequest urequest = (UpdateRequest) request.getRequest();\n          urequest.deleteById(deleteId, version);\n        } else {\n          UpdateRequest urequest = new UpdateRequest();\n          urequest.setParams(params);\n          urequest.deleteById(deleteId, version);\n          request = new LBHttpSolrClient.Req(urequest, urls);\n          routes.put(leaderUrl, request);\n        }\n      }\n    }\n\n    return routes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/UpdateRequest#getRoutes(DocRouter,DocCollection,Map[String,List[String]],ModifiableSolrParams,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/UpdateRequest#getRoutes(DocRouter,DocCollection,Map[String,List[String]],ModifiableSolrParams,String).mjava","sourceNew":"  /**\n   * @param router to route updates with\n   * @param col DocCollection for the updates\n   * @param urlMap of the cluster\n   * @param params params to use\n   * @param idField the id field\n   * @return a Map of urls to requests\n   */\n  public Map<String,LBHttpSolrClient.Req> getRoutes(DocRouter router,\n      DocCollection col, Map<String,List<String>> urlMap,\n      ModifiableSolrParams params, String idField) {\n    \n    if ((documents == null || documents.size() == 0)\n        && (deleteById == null || deleteById.size() == 0)) {\n      return null;\n    }\n    \n    Map<String,LBHttpSolrClient.Req> routes = new HashMap<>();\n    if (documents != null) {\n      Set<Entry<SolrInputDocument,Map<String,Object>>> entries = documents.entrySet();\n      for (Entry<SolrInputDocument,Map<String,Object>> entry : entries) {\n        SolrInputDocument doc = entry.getKey();\n        Object id = doc.getFieldValue(idField);\n        if (id == null) {\n          return null;\n        }\n        Slice slice = router.getTargetSlice(id\n            .toString(), doc, null, null, col);\n        if (slice == null) {\n          return null;\n        }\n        List<String> urls = urlMap.get(slice.getName());\n        String leaderUrl = urls.get(0);\n        LBHttpSolrClient.Req request = (LBHttpSolrClient.Req) routes\n            .get(leaderUrl);\n        if (request == null) {\n          UpdateRequest updateRequest = new UpdateRequest();\n          updateRequest.setMethod(getMethod());\n          updateRequest.setCommitWithin(getCommitWithin());\n          updateRequest.setParams(params);\n          updateRequest.setPath(getPath());\n          updateRequest.setBasicAuthCredentials(getBasicAuthUser(), getBasicAuthPassword());\n          request = new LBHttpSolrClient.Req(updateRequest, urls);\n          routes.put(leaderUrl, request);\n        }\n        UpdateRequest urequest = (UpdateRequest) request.getRequest();\n        Map<String,Object> value = entry.getValue();\n        Boolean ow = null;\n        if (value != null) {\n          ow = (Boolean) value.get(OVERWRITE);\n        }\n        if (ow != null) {\n          urequest.add(doc, ow);\n        } else {\n          urequest.add(doc);\n        }\n      }\n    }\n    \n    // Route the deleteById's\n    \n    if (deleteById != null) {\n      \n      Iterator<Map.Entry<String,Map<String,Object>>> entries = deleteById.entrySet()\n          .iterator();\n      while (entries.hasNext()) {\n        \n        Map.Entry<String,Map<String,Object>> entry = entries.next();\n        \n        String deleteId = entry.getKey();\n        Map<String,Object> map = entry.getValue();\n        Long version = null;\n        if (map != null) {\n          version = (Long) map.get(VER);\n        }\n        Slice slice = router.getTargetSlice(deleteId, null, null, null, col);\n        if (slice == null) {\n          return null;\n        }\n        List<String> urls = urlMap.get(slice.getName());\n        String leaderUrl = urls.get(0);\n        LBHttpSolrClient.Req request = routes.get(leaderUrl);\n        if (request != null) {\n          UpdateRequest urequest = (UpdateRequest) request.getRequest();\n          urequest.deleteById(deleteId, version);\n        } else {\n          UpdateRequest urequest = new UpdateRequest();\n          urequest.setParams(params);\n          urequest.deleteById(deleteId, version);\n          request = new LBHttpSolrClient.Req(urequest, urls);\n          routes.put(leaderUrl, request);\n        }\n      }\n    }\n\n    return routes;\n  }\n\n","sourceOld":"  /**\n   * @param router to route updates with\n   * @param col DocCollection for the updates\n   * @param urlMap of the cluster\n   * @param params params to use\n   * @param idField the id field\n   * @return a Map of urls to requests\n   */\n  public Map<String,LBHttpSolrClient.Req> getRoutes(DocRouter router,\n      DocCollection col, Map<String,List<String>> urlMap,\n      ModifiableSolrParams params, String idField) {\n    \n    if ((documents == null || documents.size() == 0)\n        && (deleteById == null || deleteById.size() == 0)) {\n      return null;\n    }\n    \n    Map<String,LBHttpSolrClient.Req> routes = new HashMap<>();\n    if (documents != null) {\n      Set<Entry<SolrInputDocument,Map<String,Object>>> entries = documents.entrySet();\n      for (Entry<SolrInputDocument,Map<String,Object>> entry : entries) {\n        SolrInputDocument doc = entry.getKey();\n        Object id = doc.getFieldValue(idField);\n        if (id == null) {\n          return null;\n        }\n        Slice slice = router.getTargetSlice(id\n            .toString(), doc, null, null, col);\n        if (slice == null) {\n          return null;\n        }\n        List<String> urls = urlMap.get(slice.getName());\n        String leaderUrl = urls.get(0);\n        LBHttpSolrClient.Req request = (LBHttpSolrClient.Req) routes\n            .get(leaderUrl);\n        if (request == null) {\n          UpdateRequest updateRequest = new UpdateRequest();\n          updateRequest.setMethod(getMethod());\n          updateRequest.setCommitWithin(getCommitWithin());\n          updateRequest.setParams(params);\n          updateRequest.setPath(getPath());\n          request = new LBHttpSolrClient.Req(updateRequest, urls);\n          routes.put(leaderUrl, request);\n        }\n        UpdateRequest urequest = (UpdateRequest) request.getRequest();\n        Map<String,Object> value = entry.getValue();\n        Boolean ow = null;\n        if (value != null) {\n          ow = (Boolean) value.get(OVERWRITE);\n        }\n        if (ow != null) {\n          urequest.add(doc, ow);\n        } else {\n          urequest.add(doc);\n        }\n      }\n    }\n    \n    // Route the deleteById's\n    \n    if (deleteById != null) {\n      \n      Iterator<Map.Entry<String,Map<String,Object>>> entries = deleteById.entrySet()\n          .iterator();\n      while (entries.hasNext()) {\n        \n        Map.Entry<String,Map<String,Object>> entry = entries.next();\n        \n        String deleteId = entry.getKey();\n        Map<String,Object> map = entry.getValue();\n        Long version = null;\n        if (map != null) {\n          version = (Long) map.get(VER);\n        }\n        Slice slice = router.getTargetSlice(deleteId, null, null, null, col);\n        if (slice == null) {\n          return null;\n        }\n        List<String> urls = urlMap.get(slice.getName());\n        String leaderUrl = urls.get(0);\n        LBHttpSolrClient.Req request = routes.get(leaderUrl);\n        if (request != null) {\n          UpdateRequest urequest = (UpdateRequest) request.getRequest();\n          urequest.deleteById(deleteId, version);\n        } else {\n          UpdateRequest urequest = new UpdateRequest();\n          urequest.setParams(params);\n          urequest.deleteById(deleteId, version);\n          request = new LBHttpSolrClient.Req(urequest, urls);\n          routes.put(leaderUrl, request);\n        }\n      }\n    }\n\n    return routes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"68423be363a30c5a005b0eb6830c749d93b2b8db","date":1454893700,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/UpdateRequest#getRoutes(DocRouter,DocCollection,Map[String,List[String]],ModifiableSolrParams,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/UpdateRequest#getRoutes(DocRouter,DocCollection,Map[String,List[String]],ModifiableSolrParams,String).mjava","sourceNew":"  /**\n   * @param router to route updates with\n   * @param col DocCollection for the updates\n   * @param urlMap of the cluster\n   * @param params params to use\n   * @param idField the id field\n   * @return a Map of urls to requests\n   */\n  public Map<String,LBHttpSolrClient.Req> getRoutes(DocRouter router,\n      DocCollection col, Map<String,List<String>> urlMap,\n      ModifiableSolrParams params, String idField) {\n    \n    if ((documents == null || documents.size() == 0)\n        && (deleteById == null || deleteById.size() == 0)) {\n      return null;\n    }\n    \n    Map<String,LBHttpSolrClient.Req> routes = new HashMap<>();\n    if (documents != null) {\n      Set<Entry<SolrInputDocument,Map<String,Object>>> entries = documents.entrySet();\n      for (Entry<SolrInputDocument,Map<String,Object>> entry : entries) {\n        SolrInputDocument doc = entry.getKey();\n        Object id = doc.getFieldValue(idField);\n        if (id == null) {\n          return null;\n        }\n        Slice slice = router.getTargetSlice(id\n            .toString(), doc, null, null, col);\n        if (slice == null) {\n          return null;\n        }\n        List<String> urls = urlMap.get(slice.getName());\n        String leaderUrl = urls.get(0);\n        LBHttpSolrClient.Req request = (LBHttpSolrClient.Req) routes\n            .get(leaderUrl);\n        if (request == null) {\n          UpdateRequest updateRequest = new UpdateRequest();\n          updateRequest.setMethod(getMethod());\n          updateRequest.setCommitWithin(getCommitWithin());\n          updateRequest.setParams(params);\n          updateRequest.setPath(getPath());\n          updateRequest.setBasicAuthCredentials(getBasicAuthUser(), getBasicAuthPassword());\n          request = new LBHttpSolrClient.Req(updateRequest, urls);\n          routes.put(leaderUrl, request);\n        }\n        UpdateRequest urequest = (UpdateRequest) request.getRequest();\n        Map<String,Object> value = entry.getValue();\n        Boolean ow = null;\n        if (value != null) {\n          ow = (Boolean) value.get(OVERWRITE);\n        }\n        if (ow != null) {\n          urequest.add(doc, ow);\n        } else {\n          urequest.add(doc);\n        }\n      }\n    }\n    \n    // Route the deleteById's\n    \n    if (deleteById != null) {\n      \n      Iterator<Map.Entry<String,Map<String,Object>>> entries = deleteById.entrySet()\n          .iterator();\n      while (entries.hasNext()) {\n        \n        Map.Entry<String,Map<String,Object>> entry = entries.next();\n        \n        String deleteId = entry.getKey();\n        Map<String,Object> map = entry.getValue();\n        Long version = null;\n        if (map != null) {\n          version = (Long) map.get(VER);\n        }\n        Slice slice = router.getTargetSlice(deleteId, null, null, null, col);\n        if (slice == null) {\n          return null;\n        }\n        List<String> urls = urlMap.get(slice.getName());\n        String leaderUrl = urls.get(0);\n        LBHttpSolrClient.Req request = routes.get(leaderUrl);\n        if (request != null) {\n          UpdateRequest urequest = (UpdateRequest) request.getRequest();\n          urequest.deleteById(deleteId, version);\n        } else {\n          UpdateRequest urequest = new UpdateRequest();\n          urequest.setParams(params);\n          urequest.deleteById(deleteId, version);\n          urequest.setCommitWithin(getCommitWithin());\n          request = new LBHttpSolrClient.Req(urequest, urls);\n          routes.put(leaderUrl, request);\n        }\n      }\n    }\n\n    return routes;\n  }\n\n","sourceOld":"  /**\n   * @param router to route updates with\n   * @param col DocCollection for the updates\n   * @param urlMap of the cluster\n   * @param params params to use\n   * @param idField the id field\n   * @return a Map of urls to requests\n   */\n  public Map<String,LBHttpSolrClient.Req> getRoutes(DocRouter router,\n      DocCollection col, Map<String,List<String>> urlMap,\n      ModifiableSolrParams params, String idField) {\n    \n    if ((documents == null || documents.size() == 0)\n        && (deleteById == null || deleteById.size() == 0)) {\n      return null;\n    }\n    \n    Map<String,LBHttpSolrClient.Req> routes = new HashMap<>();\n    if (documents != null) {\n      Set<Entry<SolrInputDocument,Map<String,Object>>> entries = documents.entrySet();\n      for (Entry<SolrInputDocument,Map<String,Object>> entry : entries) {\n        SolrInputDocument doc = entry.getKey();\n        Object id = doc.getFieldValue(idField);\n        if (id == null) {\n          return null;\n        }\n        Slice slice = router.getTargetSlice(id\n            .toString(), doc, null, null, col);\n        if (slice == null) {\n          return null;\n        }\n        List<String> urls = urlMap.get(slice.getName());\n        String leaderUrl = urls.get(0);\n        LBHttpSolrClient.Req request = (LBHttpSolrClient.Req) routes\n            .get(leaderUrl);\n        if (request == null) {\n          UpdateRequest updateRequest = new UpdateRequest();\n          updateRequest.setMethod(getMethod());\n          updateRequest.setCommitWithin(getCommitWithin());\n          updateRequest.setParams(params);\n          updateRequest.setPath(getPath());\n          updateRequest.setBasicAuthCredentials(getBasicAuthUser(), getBasicAuthPassword());\n          request = new LBHttpSolrClient.Req(updateRequest, urls);\n          routes.put(leaderUrl, request);\n        }\n        UpdateRequest urequest = (UpdateRequest) request.getRequest();\n        Map<String,Object> value = entry.getValue();\n        Boolean ow = null;\n        if (value != null) {\n          ow = (Boolean) value.get(OVERWRITE);\n        }\n        if (ow != null) {\n          urequest.add(doc, ow);\n        } else {\n          urequest.add(doc);\n        }\n      }\n    }\n    \n    // Route the deleteById's\n    \n    if (deleteById != null) {\n      \n      Iterator<Map.Entry<String,Map<String,Object>>> entries = deleteById.entrySet()\n          .iterator();\n      while (entries.hasNext()) {\n        \n        Map.Entry<String,Map<String,Object>> entry = entries.next();\n        \n        String deleteId = entry.getKey();\n        Map<String,Object> map = entry.getValue();\n        Long version = null;\n        if (map != null) {\n          version = (Long) map.get(VER);\n        }\n        Slice slice = router.getTargetSlice(deleteId, null, null, null, col);\n        if (slice == null) {\n          return null;\n        }\n        List<String> urls = urlMap.get(slice.getName());\n        String leaderUrl = urls.get(0);\n        LBHttpSolrClient.Req request = routes.get(leaderUrl);\n        if (request != null) {\n          UpdateRequest urequest = (UpdateRequest) request.getRequest();\n          urequest.deleteById(deleteId, version);\n        } else {\n          UpdateRequest urequest = new UpdateRequest();\n          urequest.setParams(params);\n          urequest.deleteById(deleteId, version);\n          request = new LBHttpSolrClient.Req(urequest, urls);\n          routes.put(leaderUrl, request);\n        }\n      }\n    }\n\n    return routes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"291857aeee5ec20518ddce131ac4362c0075ebe1","date":1467882201,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/UpdateRequest#getRoutes(DocRouter,DocCollection,Map[String,List[String]],ModifiableSolrParams,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/UpdateRequest#getRoutes(DocRouter,DocCollection,Map[String,List[String]],ModifiableSolrParams,String).mjava","sourceNew":"  /**\n   * @param router to route updates with\n   * @param col DocCollection for the updates\n   * @param urlMap of the cluster\n   * @param params params to use\n   * @param idField the id field\n   * @return a Map of urls to requests\n   */\n  public Map<String,LBHttpSolrClient.Req> getRoutes(DocRouter router,\n      DocCollection col, Map<String,List<String>> urlMap,\n      ModifiableSolrParams params, String idField) {\n    \n    if ((documents == null || documents.size() == 0)\n        && (deleteById == null || deleteById.size() == 0)) {\n      return null;\n    }\n    \n    Map<String,LBHttpSolrClient.Req> routes = new HashMap<>();\n    if (documents != null) {\n      Set<Entry<SolrInputDocument,Map<String,Object>>> entries = documents.entrySet();\n      for (Entry<SolrInputDocument,Map<String,Object>> entry : entries) {\n        SolrInputDocument doc = entry.getKey();\n        Object id = doc.getFieldValue(idField);\n        if (id == null) {\n          return null;\n        }\n        Slice slice = router.getTargetSlice(id\n            .toString(), doc, null, null, col);\n        if (slice == null) {\n          return null;\n        }\n        List<String> urls = urlMap.get(slice.getName());\n        if (urls == null) {\n          return null;\n        }\n        String leaderUrl = urls.get(0);\n        LBHttpSolrClient.Req request = (LBHttpSolrClient.Req) routes\n            .get(leaderUrl);\n        if (request == null) {\n          UpdateRequest updateRequest = new UpdateRequest();\n          updateRequest.setMethod(getMethod());\n          updateRequest.setCommitWithin(getCommitWithin());\n          updateRequest.setParams(params);\n          updateRequest.setPath(getPath());\n          updateRequest.setBasicAuthCredentials(getBasicAuthUser(), getBasicAuthPassword());\n          request = new LBHttpSolrClient.Req(updateRequest, urls);\n          routes.put(leaderUrl, request);\n        }\n        UpdateRequest urequest = (UpdateRequest) request.getRequest();\n        Map<String,Object> value = entry.getValue();\n        Boolean ow = null;\n        if (value != null) {\n          ow = (Boolean) value.get(OVERWRITE);\n        }\n        if (ow != null) {\n          urequest.add(doc, ow);\n        } else {\n          urequest.add(doc);\n        }\n      }\n    }\n    \n    // Route the deleteById's\n    \n    if (deleteById != null) {\n      \n      Iterator<Map.Entry<String,Map<String,Object>>> entries = deleteById.entrySet()\n          .iterator();\n      while (entries.hasNext()) {\n        \n        Map.Entry<String,Map<String,Object>> entry = entries.next();\n        \n        String deleteId = entry.getKey();\n        Map<String,Object> map = entry.getValue();\n        Long version = null;\n        if (map != null) {\n          version = (Long) map.get(VER);\n        }\n        Slice slice = router.getTargetSlice(deleteId, null, null, null, col);\n        if (slice == null) {\n          return null;\n        }\n        List<String> urls = urlMap.get(slice.getName());\n        if (urls == null) {\n          return null;\n        }\n        String leaderUrl = urls.get(0);\n        LBHttpSolrClient.Req request = routes.get(leaderUrl);\n        if (request != null) {\n          UpdateRequest urequest = (UpdateRequest) request.getRequest();\n          urequest.deleteById(deleteId, version);\n        } else {\n          UpdateRequest urequest = new UpdateRequest();\n          urequest.setParams(params);\n          urequest.deleteById(deleteId, version);\n          urequest.setCommitWithin(getCommitWithin());\n          request = new LBHttpSolrClient.Req(urequest, urls);\n          routes.put(leaderUrl, request);\n        }\n      }\n    }\n\n    return routes;\n  }\n\n","sourceOld":"  /**\n   * @param router to route updates with\n   * @param col DocCollection for the updates\n   * @param urlMap of the cluster\n   * @param params params to use\n   * @param idField the id field\n   * @return a Map of urls to requests\n   */\n  public Map<String,LBHttpSolrClient.Req> getRoutes(DocRouter router,\n      DocCollection col, Map<String,List<String>> urlMap,\n      ModifiableSolrParams params, String idField) {\n    \n    if ((documents == null || documents.size() == 0)\n        && (deleteById == null || deleteById.size() == 0)) {\n      return null;\n    }\n    \n    Map<String,LBHttpSolrClient.Req> routes = new HashMap<>();\n    if (documents != null) {\n      Set<Entry<SolrInputDocument,Map<String,Object>>> entries = documents.entrySet();\n      for (Entry<SolrInputDocument,Map<String,Object>> entry : entries) {\n        SolrInputDocument doc = entry.getKey();\n        Object id = doc.getFieldValue(idField);\n        if (id == null) {\n          return null;\n        }\n        Slice slice = router.getTargetSlice(id\n            .toString(), doc, null, null, col);\n        if (slice == null) {\n          return null;\n        }\n        List<String> urls = urlMap.get(slice.getName());\n        String leaderUrl = urls.get(0);\n        LBHttpSolrClient.Req request = (LBHttpSolrClient.Req) routes\n            .get(leaderUrl);\n        if (request == null) {\n          UpdateRequest updateRequest = new UpdateRequest();\n          updateRequest.setMethod(getMethod());\n          updateRequest.setCommitWithin(getCommitWithin());\n          updateRequest.setParams(params);\n          updateRequest.setPath(getPath());\n          updateRequest.setBasicAuthCredentials(getBasicAuthUser(), getBasicAuthPassword());\n          request = new LBHttpSolrClient.Req(updateRequest, urls);\n          routes.put(leaderUrl, request);\n        }\n        UpdateRequest urequest = (UpdateRequest) request.getRequest();\n        Map<String,Object> value = entry.getValue();\n        Boolean ow = null;\n        if (value != null) {\n          ow = (Boolean) value.get(OVERWRITE);\n        }\n        if (ow != null) {\n          urequest.add(doc, ow);\n        } else {\n          urequest.add(doc);\n        }\n      }\n    }\n    \n    // Route the deleteById's\n    \n    if (deleteById != null) {\n      \n      Iterator<Map.Entry<String,Map<String,Object>>> entries = deleteById.entrySet()\n          .iterator();\n      while (entries.hasNext()) {\n        \n        Map.Entry<String,Map<String,Object>> entry = entries.next();\n        \n        String deleteId = entry.getKey();\n        Map<String,Object> map = entry.getValue();\n        Long version = null;\n        if (map != null) {\n          version = (Long) map.get(VER);\n        }\n        Slice slice = router.getTargetSlice(deleteId, null, null, null, col);\n        if (slice == null) {\n          return null;\n        }\n        List<String> urls = urlMap.get(slice.getName());\n        String leaderUrl = urls.get(0);\n        LBHttpSolrClient.Req request = routes.get(leaderUrl);\n        if (request != null) {\n          UpdateRequest urequest = (UpdateRequest) request.getRequest();\n          urequest.deleteById(deleteId, version);\n        } else {\n          UpdateRequest urequest = new UpdateRequest();\n          urequest.setParams(params);\n          urequest.deleteById(deleteId, version);\n          urequest.setCommitWithin(getCommitWithin());\n          request = new LBHttpSolrClient.Req(urequest, urls);\n          routes.put(leaderUrl, request);\n        }\n      }\n    }\n\n    return routes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/UpdateRequest#getRoutes(DocRouter,DocCollection,Map[String,List[String]],ModifiableSolrParams,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/UpdateRequest#getRoutes(DocRouter,DocCollection,Map[String,List[String]],ModifiableSolrParams,String).mjava","sourceNew":"  /**\n   * @param router to route updates with\n   * @param col DocCollection for the updates\n   * @param urlMap of the cluster\n   * @param params params to use\n   * @param idField the id field\n   * @return a Map of urls to requests\n   */\n  public Map<String,LBHttpSolrClient.Req> getRoutes(DocRouter router,\n      DocCollection col, Map<String,List<String>> urlMap,\n      ModifiableSolrParams params, String idField) {\n    \n    if ((documents == null || documents.size() == 0)\n        && (deleteById == null || deleteById.size() == 0)) {\n      return null;\n    }\n    \n    Map<String,LBHttpSolrClient.Req> routes = new HashMap<>();\n    if (documents != null) {\n      Set<Entry<SolrInputDocument,Map<String,Object>>> entries = documents.entrySet();\n      for (Entry<SolrInputDocument,Map<String,Object>> entry : entries) {\n        SolrInputDocument doc = entry.getKey();\n        Object id = doc.getFieldValue(idField);\n        if (id == null) {\n          return null;\n        }\n        Slice slice = router.getTargetSlice(id\n            .toString(), doc, null, null, col);\n        if (slice == null) {\n          return null;\n        }\n        List<String> urls = urlMap.get(slice.getName());\n        if (urls == null) {\n          return null;\n        }\n        String leaderUrl = urls.get(0);\n        LBHttpSolrClient.Req request = (LBHttpSolrClient.Req) routes\n            .get(leaderUrl);\n        if (request == null) {\n          UpdateRequest updateRequest = new UpdateRequest();\n          updateRequest.setMethod(getMethod());\n          updateRequest.setCommitWithin(getCommitWithin());\n          updateRequest.setParams(params);\n          updateRequest.setPath(getPath());\n          updateRequest.setBasicAuthCredentials(getBasicAuthUser(), getBasicAuthPassword());\n          request = new LBHttpSolrClient.Req(updateRequest, urls);\n          routes.put(leaderUrl, request);\n        }\n        UpdateRequest urequest = (UpdateRequest) request.getRequest();\n        Map<String,Object> value = entry.getValue();\n        Boolean ow = null;\n        if (value != null) {\n          ow = (Boolean) value.get(OVERWRITE);\n        }\n        if (ow != null) {\n          urequest.add(doc, ow);\n        } else {\n          urequest.add(doc);\n        }\n      }\n    }\n    \n    // Route the deleteById's\n    \n    if (deleteById != null) {\n      \n      Iterator<Map.Entry<String,Map<String,Object>>> entries = deleteById.entrySet()\n          .iterator();\n      while (entries.hasNext()) {\n        \n        Map.Entry<String,Map<String,Object>> entry = entries.next();\n        \n        String deleteId = entry.getKey();\n        Map<String,Object> map = entry.getValue();\n        Long version = null;\n        if (map != null) {\n          version = (Long) map.get(VER);\n        }\n        Slice slice = router.getTargetSlice(deleteId, null, null, null, col);\n        if (slice == null) {\n          return null;\n        }\n        List<String> urls = urlMap.get(slice.getName());\n        if (urls == null) {\n          return null;\n        }\n        String leaderUrl = urls.get(0);\n        LBHttpSolrClient.Req request = routes.get(leaderUrl);\n        if (request != null) {\n          UpdateRequest urequest = (UpdateRequest) request.getRequest();\n          urequest.deleteById(deleteId, version);\n        } else {\n          UpdateRequest urequest = new UpdateRequest();\n          urequest.setParams(params);\n          urequest.deleteById(deleteId, version);\n          urequest.setCommitWithin(getCommitWithin());\n          request = new LBHttpSolrClient.Req(urequest, urls);\n          routes.put(leaderUrl, request);\n        }\n      }\n    }\n\n    return routes;\n  }\n\n","sourceOld":"  /**\n   * @param router to route updates with\n   * @param col DocCollection for the updates\n   * @param urlMap of the cluster\n   * @param params params to use\n   * @param idField the id field\n   * @return a Map of urls to requests\n   */\n  public Map<String,LBHttpSolrClient.Req> getRoutes(DocRouter router,\n      DocCollection col, Map<String,List<String>> urlMap,\n      ModifiableSolrParams params, String idField) {\n    \n    if ((documents == null || documents.size() == 0)\n        && (deleteById == null || deleteById.size() == 0)) {\n      return null;\n    }\n    \n    Map<String,LBHttpSolrClient.Req> routes = new HashMap<>();\n    if (documents != null) {\n      Set<Entry<SolrInputDocument,Map<String,Object>>> entries = documents.entrySet();\n      for (Entry<SolrInputDocument,Map<String,Object>> entry : entries) {\n        SolrInputDocument doc = entry.getKey();\n        Object id = doc.getFieldValue(idField);\n        if (id == null) {\n          return null;\n        }\n        Slice slice = router.getTargetSlice(id\n            .toString(), doc, null, null, col);\n        if (slice == null) {\n          return null;\n        }\n        List<String> urls = urlMap.get(slice.getName());\n        String leaderUrl = urls.get(0);\n        LBHttpSolrClient.Req request = (LBHttpSolrClient.Req) routes\n            .get(leaderUrl);\n        if (request == null) {\n          UpdateRequest updateRequest = new UpdateRequest();\n          updateRequest.setMethod(getMethod());\n          updateRequest.setCommitWithin(getCommitWithin());\n          updateRequest.setParams(params);\n          updateRequest.setPath(getPath());\n          updateRequest.setBasicAuthCredentials(getBasicAuthUser(), getBasicAuthPassword());\n          request = new LBHttpSolrClient.Req(updateRequest, urls);\n          routes.put(leaderUrl, request);\n        }\n        UpdateRequest urequest = (UpdateRequest) request.getRequest();\n        Map<String,Object> value = entry.getValue();\n        Boolean ow = null;\n        if (value != null) {\n          ow = (Boolean) value.get(OVERWRITE);\n        }\n        if (ow != null) {\n          urequest.add(doc, ow);\n        } else {\n          urequest.add(doc);\n        }\n      }\n    }\n    \n    // Route the deleteById's\n    \n    if (deleteById != null) {\n      \n      Iterator<Map.Entry<String,Map<String,Object>>> entries = deleteById.entrySet()\n          .iterator();\n      while (entries.hasNext()) {\n        \n        Map.Entry<String,Map<String,Object>> entry = entries.next();\n        \n        String deleteId = entry.getKey();\n        Map<String,Object> map = entry.getValue();\n        Long version = null;\n        if (map != null) {\n          version = (Long) map.get(VER);\n        }\n        Slice slice = router.getTargetSlice(deleteId, null, null, null, col);\n        if (slice == null) {\n          return null;\n        }\n        List<String> urls = urlMap.get(slice.getName());\n        String leaderUrl = urls.get(0);\n        LBHttpSolrClient.Req request = routes.get(leaderUrl);\n        if (request != null) {\n          UpdateRequest urequest = (UpdateRequest) request.getRequest();\n          urequest.deleteById(deleteId, version);\n        } else {\n          UpdateRequest urequest = new UpdateRequest();\n          urequest.setParams(params);\n          urequest.deleteById(deleteId, version);\n          urequest.setCommitWithin(getCommitWithin());\n          request = new LBHttpSolrClient.Req(urequest, urls);\n          routes.put(leaderUrl, request);\n        }\n      }\n    }\n\n    return routes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cc3126fc8c8ae78d791419d51fd3df987e1b6ba4","date":1491772407,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/UpdateRequest#getRoutes(DocRouter,DocCollection,Map[String,List[String]],ModifiableSolrParams,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/UpdateRequest#getRoutes(DocRouter,DocCollection,Map[String,List[String]],ModifiableSolrParams,String).mjava","sourceNew":"  /**\n   * @param router to route updates with\n   * @param col DocCollection for the updates\n   * @param urlMap of the cluster\n   * @param params params to use\n   * @param idField the id field\n   * @return a Map of urls to requests\n   */\n  public Map<String,LBHttpSolrClient.Req> getRoutes(DocRouter router,\n      DocCollection col, Map<String,List<String>> urlMap,\n      ModifiableSolrParams params, String idField) {\n    \n    if ((documents == null || documents.size() == 0)\n        && (deleteById == null || deleteById.size() == 0)) {\n      return null;\n    }\n    \n    Map<String,LBHttpSolrClient.Req> routes = new HashMap<>();\n    if (documents != null) {\n      Set<Entry<SolrInputDocument,Map<String,Object>>> entries = documents.entrySet();\n      for (Entry<SolrInputDocument,Map<String,Object>> entry : entries) {\n        SolrInputDocument doc = entry.getKey();\n        Object id = doc.getFieldValue(idField);\n        if (id == null) {\n          return null;\n        }\n        Slice slice = router.getTargetSlice(id\n            .toString(), doc, null, null, col);\n        if (slice == null) {\n          return null;\n        }\n        List<String> urls = urlMap.get(slice.getName());\n        if (urls == null) {\n          return null;\n        }\n        String leaderUrl = urls.get(0);\n        LBHttpSolrClient.Req request = routes\n            .get(leaderUrl);\n        if (request == null) {\n          UpdateRequest updateRequest = new UpdateRequest();\n          updateRequest.setMethod(getMethod());\n          updateRequest.setCommitWithin(getCommitWithin());\n          updateRequest.setParams(params);\n          updateRequest.setPath(getPath());\n          updateRequest.setBasicAuthCredentials(getBasicAuthUser(), getBasicAuthPassword());\n          updateRequest.setResponseParser(getResponseParser());\n          request = new LBHttpSolrClient.Req(updateRequest, urls);\n          routes.put(leaderUrl, request);\n        }\n        UpdateRequest urequest = (UpdateRequest) request.getRequest();\n        Map<String,Object> value = entry.getValue();\n        Boolean ow = null;\n        if (value != null) {\n          ow = (Boolean) value.get(OVERWRITE);\n        }\n        if (ow != null) {\n          urequest.add(doc, ow);\n        } else {\n          urequest.add(doc);\n        }\n      }\n    }\n    \n    // Route the deleteById's\n    \n    if (deleteById != null) {\n      \n      Iterator<Map.Entry<String,Map<String,Object>>> entries = deleteById.entrySet()\n          .iterator();\n      while (entries.hasNext()) {\n        \n        Map.Entry<String,Map<String,Object>> entry = entries.next();\n        \n        String deleteId = entry.getKey();\n        Map<String,Object> map = entry.getValue();\n        Long version = null;\n        if (map != null) {\n          version = (Long) map.get(VER);\n        }\n        Slice slice = router.getTargetSlice(deleteId, null, null, null, col);\n        if (slice == null) {\n          return null;\n        }\n        List<String> urls = urlMap.get(slice.getName());\n        if (urls == null) {\n          return null;\n        }\n        String leaderUrl = urls.get(0);\n        LBHttpSolrClient.Req request = routes.get(leaderUrl);\n        if (request != null) {\n          UpdateRequest urequest = (UpdateRequest) request.getRequest();\n          urequest.deleteById(deleteId, version);\n        } else {\n          UpdateRequest urequest = new UpdateRequest();\n          urequest.setParams(params);\n          urequest.deleteById(deleteId, version);\n          urequest.setCommitWithin(getCommitWithin());\n          request = new LBHttpSolrClient.Req(urequest, urls);\n          routes.put(leaderUrl, request);\n        }\n      }\n    }\n\n    return routes;\n  }\n\n","sourceOld":"  /**\n   * @param router to route updates with\n   * @param col DocCollection for the updates\n   * @param urlMap of the cluster\n   * @param params params to use\n   * @param idField the id field\n   * @return a Map of urls to requests\n   */\n  public Map<String,LBHttpSolrClient.Req> getRoutes(DocRouter router,\n      DocCollection col, Map<String,List<String>> urlMap,\n      ModifiableSolrParams params, String idField) {\n    \n    if ((documents == null || documents.size() == 0)\n        && (deleteById == null || deleteById.size() == 0)) {\n      return null;\n    }\n    \n    Map<String,LBHttpSolrClient.Req> routes = new HashMap<>();\n    if (documents != null) {\n      Set<Entry<SolrInputDocument,Map<String,Object>>> entries = documents.entrySet();\n      for (Entry<SolrInputDocument,Map<String,Object>> entry : entries) {\n        SolrInputDocument doc = entry.getKey();\n        Object id = doc.getFieldValue(idField);\n        if (id == null) {\n          return null;\n        }\n        Slice slice = router.getTargetSlice(id\n            .toString(), doc, null, null, col);\n        if (slice == null) {\n          return null;\n        }\n        List<String> urls = urlMap.get(slice.getName());\n        if (urls == null) {\n          return null;\n        }\n        String leaderUrl = urls.get(0);\n        LBHttpSolrClient.Req request = (LBHttpSolrClient.Req) routes\n            .get(leaderUrl);\n        if (request == null) {\n          UpdateRequest updateRequest = new UpdateRequest();\n          updateRequest.setMethod(getMethod());\n          updateRequest.setCommitWithin(getCommitWithin());\n          updateRequest.setParams(params);\n          updateRequest.setPath(getPath());\n          updateRequest.setBasicAuthCredentials(getBasicAuthUser(), getBasicAuthPassword());\n          request = new LBHttpSolrClient.Req(updateRequest, urls);\n          routes.put(leaderUrl, request);\n        }\n        UpdateRequest urequest = (UpdateRequest) request.getRequest();\n        Map<String,Object> value = entry.getValue();\n        Boolean ow = null;\n        if (value != null) {\n          ow = (Boolean) value.get(OVERWRITE);\n        }\n        if (ow != null) {\n          urequest.add(doc, ow);\n        } else {\n          urequest.add(doc);\n        }\n      }\n    }\n    \n    // Route the deleteById's\n    \n    if (deleteById != null) {\n      \n      Iterator<Map.Entry<String,Map<String,Object>>> entries = deleteById.entrySet()\n          .iterator();\n      while (entries.hasNext()) {\n        \n        Map.Entry<String,Map<String,Object>> entry = entries.next();\n        \n        String deleteId = entry.getKey();\n        Map<String,Object> map = entry.getValue();\n        Long version = null;\n        if (map != null) {\n          version = (Long) map.get(VER);\n        }\n        Slice slice = router.getTargetSlice(deleteId, null, null, null, col);\n        if (slice == null) {\n          return null;\n        }\n        List<String> urls = urlMap.get(slice.getName());\n        if (urls == null) {\n          return null;\n        }\n        String leaderUrl = urls.get(0);\n        LBHttpSolrClient.Req request = routes.get(leaderUrl);\n        if (request != null) {\n          UpdateRequest urequest = (UpdateRequest) request.getRequest();\n          urequest.deleteById(deleteId, version);\n        } else {\n          UpdateRequest urequest = new UpdateRequest();\n          urequest.setParams(params);\n          urequest.deleteById(deleteId, version);\n          urequest.setCommitWithin(getCommitWithin());\n          request = new LBHttpSolrClient.Req(urequest, urls);\n          routes.put(leaderUrl, request);\n        }\n      }\n    }\n\n    return routes;\n  }\n\n","bugFix":["bafca15d8e408346a67f4282ad1143b88023893b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/UpdateRequest#getRoutes(DocRouter,DocCollection,Map[String,List[String]],ModifiableSolrParams,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/UpdateRequest#getRoutes(DocRouter,DocCollection,Map[String,List[String]],ModifiableSolrParams,String).mjava","sourceNew":"  /**\n   * @param router to route updates with\n   * @param col DocCollection for the updates\n   * @param urlMap of the cluster\n   * @param params params to use\n   * @param idField the id field\n   * @return a Map of urls to requests\n   */\n  public Map<String,LBHttpSolrClient.Req> getRoutes(DocRouter router,\n      DocCollection col, Map<String,List<String>> urlMap,\n      ModifiableSolrParams params, String idField) {\n    \n    if ((documents == null || documents.size() == 0)\n        && (deleteById == null || deleteById.size() == 0)) {\n      return null;\n    }\n    \n    Map<String,LBHttpSolrClient.Req> routes = new HashMap<>();\n    if (documents != null) {\n      Set<Entry<SolrInputDocument,Map<String,Object>>> entries = documents.entrySet();\n      for (Entry<SolrInputDocument,Map<String,Object>> entry : entries) {\n        SolrInputDocument doc = entry.getKey();\n        Object id = doc.getFieldValue(idField);\n        if (id == null) {\n          return null;\n        }\n        Slice slice = router.getTargetSlice(id\n            .toString(), doc, null, null, col);\n        if (slice == null) {\n          return null;\n        }\n        List<String> urls = urlMap.get(slice.getName());\n        if (urls == null) {\n          return null;\n        }\n        String leaderUrl = urls.get(0);\n        LBHttpSolrClient.Req request = routes\n            .get(leaderUrl);\n        if (request == null) {\n          UpdateRequest updateRequest = new UpdateRequest();\n          updateRequest.setMethod(getMethod());\n          updateRequest.setCommitWithin(getCommitWithin());\n          updateRequest.setParams(params);\n          updateRequest.setPath(getPath());\n          updateRequest.setBasicAuthCredentials(getBasicAuthUser(), getBasicAuthPassword());\n          updateRequest.setResponseParser(getResponseParser());\n          request = new LBHttpSolrClient.Req(updateRequest, urls);\n          routes.put(leaderUrl, request);\n        }\n        UpdateRequest urequest = (UpdateRequest) request.getRequest();\n        Map<String,Object> value = entry.getValue();\n        Boolean ow = null;\n        if (value != null) {\n          ow = (Boolean) value.get(OVERWRITE);\n        }\n        if (ow != null) {\n          urequest.add(doc, ow);\n        } else {\n          urequest.add(doc);\n        }\n      }\n    }\n    \n    // Route the deleteById's\n    \n    if (deleteById != null) {\n      \n      Iterator<Map.Entry<String,Map<String,Object>>> entries = deleteById.entrySet()\n          .iterator();\n      while (entries.hasNext()) {\n        \n        Map.Entry<String,Map<String,Object>> entry = entries.next();\n        \n        String deleteId = entry.getKey();\n        Map<String,Object> map = entry.getValue();\n        Long version = null;\n        if (map != null) {\n          version = (Long) map.get(VER);\n        }\n        Slice slice = router.getTargetSlice(deleteId, null, null, null, col);\n        if (slice == null) {\n          return null;\n        }\n        List<String> urls = urlMap.get(slice.getName());\n        if (urls == null) {\n          return null;\n        }\n        String leaderUrl = urls.get(0);\n        LBHttpSolrClient.Req request = routes.get(leaderUrl);\n        if (request != null) {\n          UpdateRequest urequest = (UpdateRequest) request.getRequest();\n          urequest.deleteById(deleteId, version);\n        } else {\n          UpdateRequest urequest = new UpdateRequest();\n          urequest.setParams(params);\n          urequest.deleteById(deleteId, version);\n          urequest.setCommitWithin(getCommitWithin());\n          request = new LBHttpSolrClient.Req(urequest, urls);\n          routes.put(leaderUrl, request);\n        }\n      }\n    }\n\n    return routes;\n  }\n\n","sourceOld":"  /**\n   * @param router to route updates with\n   * @param col DocCollection for the updates\n   * @param urlMap of the cluster\n   * @param params params to use\n   * @param idField the id field\n   * @return a Map of urls to requests\n   */\n  public Map<String,LBHttpSolrClient.Req> getRoutes(DocRouter router,\n      DocCollection col, Map<String,List<String>> urlMap,\n      ModifiableSolrParams params, String idField) {\n    \n    if ((documents == null || documents.size() == 0)\n        && (deleteById == null || deleteById.size() == 0)) {\n      return null;\n    }\n    \n    Map<String,LBHttpSolrClient.Req> routes = new HashMap<>();\n    if (documents != null) {\n      Set<Entry<SolrInputDocument,Map<String,Object>>> entries = documents.entrySet();\n      for (Entry<SolrInputDocument,Map<String,Object>> entry : entries) {\n        SolrInputDocument doc = entry.getKey();\n        Object id = doc.getFieldValue(idField);\n        if (id == null) {\n          return null;\n        }\n        Slice slice = router.getTargetSlice(id\n            .toString(), doc, null, null, col);\n        if (slice == null) {\n          return null;\n        }\n        List<String> urls = urlMap.get(slice.getName());\n        if (urls == null) {\n          return null;\n        }\n        String leaderUrl = urls.get(0);\n        LBHttpSolrClient.Req request = (LBHttpSolrClient.Req) routes\n            .get(leaderUrl);\n        if (request == null) {\n          UpdateRequest updateRequest = new UpdateRequest();\n          updateRequest.setMethod(getMethod());\n          updateRequest.setCommitWithin(getCommitWithin());\n          updateRequest.setParams(params);\n          updateRequest.setPath(getPath());\n          updateRequest.setBasicAuthCredentials(getBasicAuthUser(), getBasicAuthPassword());\n          request = new LBHttpSolrClient.Req(updateRequest, urls);\n          routes.put(leaderUrl, request);\n        }\n        UpdateRequest urequest = (UpdateRequest) request.getRequest();\n        Map<String,Object> value = entry.getValue();\n        Boolean ow = null;\n        if (value != null) {\n          ow = (Boolean) value.get(OVERWRITE);\n        }\n        if (ow != null) {\n          urequest.add(doc, ow);\n        } else {\n          urequest.add(doc);\n        }\n      }\n    }\n    \n    // Route the deleteById's\n    \n    if (deleteById != null) {\n      \n      Iterator<Map.Entry<String,Map<String,Object>>> entries = deleteById.entrySet()\n          .iterator();\n      while (entries.hasNext()) {\n        \n        Map.Entry<String,Map<String,Object>> entry = entries.next();\n        \n        String deleteId = entry.getKey();\n        Map<String,Object> map = entry.getValue();\n        Long version = null;\n        if (map != null) {\n          version = (Long) map.get(VER);\n        }\n        Slice slice = router.getTargetSlice(deleteId, null, null, null, col);\n        if (slice == null) {\n          return null;\n        }\n        List<String> urls = urlMap.get(slice.getName());\n        if (urls == null) {\n          return null;\n        }\n        String leaderUrl = urls.get(0);\n        LBHttpSolrClient.Req request = routes.get(leaderUrl);\n        if (request != null) {\n          UpdateRequest urequest = (UpdateRequest) request.getRequest();\n          urequest.deleteById(deleteId, version);\n        } else {\n          UpdateRequest urequest = new UpdateRequest();\n          urequest.setParams(params);\n          urequest.deleteById(deleteId, version);\n          urequest.setCommitWithin(getCommitWithin());\n          request = new LBHttpSolrClient.Req(urequest, urls);\n          routes.put(leaderUrl, request);\n        }\n      }\n    }\n\n    return routes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"39a9e7b7364ba343ceb6ea953b753d977e10e65b","date":1522685822,"type":3,"author":"Erick","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/UpdateRequest#getRoutes(DocRouter,DocCollection,Map[String,List[String]],ModifiableSolrParams,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/UpdateRequest#getRoutes(DocRouter,DocCollection,Map[String,List[String]],ModifiableSolrParams,String).mjava","sourceNew":"  /**\n   * @param router to route updates with\n   * @param col DocCollection for the updates\n   * @param urlMap of the cluster\n   * @param params params to use\n   * @param idField the id field\n   * @return a Map of urls to requests\n   */\n  public Map<String,LBHttpSolrClient.Req> getRoutes(DocRouter router,\n      DocCollection col, Map<String,List<String>> urlMap,\n      ModifiableSolrParams params, String idField) {\n    \n    if ((documents == null || documents.size() == 0)\n        && (deleteById == null || deleteById.size() == 0)) {\n      return null;\n    }\n    \n    Map<String,LBHttpSolrClient.Req> routes = new HashMap<>();\n    if (documents != null) {\n      Set<Entry<SolrInputDocument,Map<String,Object>>> entries = documents.entrySet();\n      for (Entry<SolrInputDocument,Map<String,Object>> entry : entries) {\n        SolrInputDocument doc = entry.getKey();\n        Object id = doc.getFieldValue(idField);\n        if (id == null) {\n          return null;\n        }\n        Slice slice = router.getTargetSlice(id\n            .toString(), doc, null, null, col);\n        if (slice == null) {\n          return null;\n        }\n        List<String> urls = urlMap.get(slice.getName());\n        if (urls == null) {\n          return null;\n        }\n        String leaderUrl = urls.get(0);\n        LBHttpSolrClient.Req request = routes\n            .get(leaderUrl);\n        if (request == null) {\n          UpdateRequest updateRequest = new UpdateRequest();\n          updateRequest.setMethod(getMethod());\n          updateRequest.setCommitWithin(getCommitWithin());\n          updateRequest.setParams(params);\n          updateRequest.setPath(getPath());\n          updateRequest.setBasicAuthCredentials(getBasicAuthUser(), getBasicAuthPassword());\n          updateRequest.setResponseParser(getResponseParser());\n          request = new LBHttpSolrClient.Req(updateRequest, urls);\n          routes.put(leaderUrl, request);\n        }\n        UpdateRequest urequest = (UpdateRequest) request.getRequest();\n        Map<String,Object> value = entry.getValue();\n        Boolean ow = null;\n        if (value != null) {\n          ow = (Boolean) value.get(OVERWRITE);\n        }\n        if (ow != null) {\n          urequest.add(doc, ow);\n        } else {\n          urequest.add(doc);\n        }\n      }\n    }\n    \n    // Route the deleteById's\n    \n    if (deleteById != null) {\n      \n      Iterator<Map.Entry<String,Map<String,Object>>> entries = deleteById.entrySet()\n          .iterator();\n      while (entries.hasNext()) {\n        \n        Map.Entry<String,Map<String,Object>> entry = entries.next();\n        \n        String deleteId = entry.getKey();\n        Map<String,Object> map = entry.getValue();\n        Long version = null;\n        if (map != null) {\n          version = (Long) map.get(VER);\n        }\n        Slice slice = router.getTargetSlice(deleteId, null, null, null, col);\n        if (slice == null) {\n          return null;\n        }\n        List<String> urls = urlMap.get(slice.getName());\n        if (urls == null) {\n          return null;\n        }\n        String leaderUrl = urls.get(0);\n        LBHttpSolrClient.Req request = routes.get(leaderUrl);\n        if (request != null) {\n          UpdateRequest urequest = (UpdateRequest) request.getRequest();\n          urequest.deleteById(deleteId, version);\n        } else {\n          UpdateRequest urequest = new UpdateRequest();\n          urequest.setParams(params);\n          urequest.deleteById(deleteId, version);\n          urequest.setCommitWithin(getCommitWithin());\n          urequest.setBasicAuthCredentials(getBasicAuthUser(), getBasicAuthPassword());\n          request = new LBHttpSolrClient.Req(urequest, urls);\n          routes.put(leaderUrl, request);\n        }\n      }\n    }\n\n    return routes;\n  }\n\n","sourceOld":"  /**\n   * @param router to route updates with\n   * @param col DocCollection for the updates\n   * @param urlMap of the cluster\n   * @param params params to use\n   * @param idField the id field\n   * @return a Map of urls to requests\n   */\n  public Map<String,LBHttpSolrClient.Req> getRoutes(DocRouter router,\n      DocCollection col, Map<String,List<String>> urlMap,\n      ModifiableSolrParams params, String idField) {\n    \n    if ((documents == null || documents.size() == 0)\n        && (deleteById == null || deleteById.size() == 0)) {\n      return null;\n    }\n    \n    Map<String,LBHttpSolrClient.Req> routes = new HashMap<>();\n    if (documents != null) {\n      Set<Entry<SolrInputDocument,Map<String,Object>>> entries = documents.entrySet();\n      for (Entry<SolrInputDocument,Map<String,Object>> entry : entries) {\n        SolrInputDocument doc = entry.getKey();\n        Object id = doc.getFieldValue(idField);\n        if (id == null) {\n          return null;\n        }\n        Slice slice = router.getTargetSlice(id\n            .toString(), doc, null, null, col);\n        if (slice == null) {\n          return null;\n        }\n        List<String> urls = urlMap.get(slice.getName());\n        if (urls == null) {\n          return null;\n        }\n        String leaderUrl = urls.get(0);\n        LBHttpSolrClient.Req request = routes\n            .get(leaderUrl);\n        if (request == null) {\n          UpdateRequest updateRequest = new UpdateRequest();\n          updateRequest.setMethod(getMethod());\n          updateRequest.setCommitWithin(getCommitWithin());\n          updateRequest.setParams(params);\n          updateRequest.setPath(getPath());\n          updateRequest.setBasicAuthCredentials(getBasicAuthUser(), getBasicAuthPassword());\n          updateRequest.setResponseParser(getResponseParser());\n          request = new LBHttpSolrClient.Req(updateRequest, urls);\n          routes.put(leaderUrl, request);\n        }\n        UpdateRequest urequest = (UpdateRequest) request.getRequest();\n        Map<String,Object> value = entry.getValue();\n        Boolean ow = null;\n        if (value != null) {\n          ow = (Boolean) value.get(OVERWRITE);\n        }\n        if (ow != null) {\n          urequest.add(doc, ow);\n        } else {\n          urequest.add(doc);\n        }\n      }\n    }\n    \n    // Route the deleteById's\n    \n    if (deleteById != null) {\n      \n      Iterator<Map.Entry<String,Map<String,Object>>> entries = deleteById.entrySet()\n          .iterator();\n      while (entries.hasNext()) {\n        \n        Map.Entry<String,Map<String,Object>> entry = entries.next();\n        \n        String deleteId = entry.getKey();\n        Map<String,Object> map = entry.getValue();\n        Long version = null;\n        if (map != null) {\n          version = (Long) map.get(VER);\n        }\n        Slice slice = router.getTargetSlice(deleteId, null, null, null, col);\n        if (slice == null) {\n          return null;\n        }\n        List<String> urls = urlMap.get(slice.getName());\n        if (urls == null) {\n          return null;\n        }\n        String leaderUrl = urls.get(0);\n        LBHttpSolrClient.Req request = routes.get(leaderUrl);\n        if (request != null) {\n          UpdateRequest urequest = (UpdateRequest) request.getRequest();\n          urequest.deleteById(deleteId, version);\n        } else {\n          UpdateRequest urequest = new UpdateRequest();\n          urequest.setParams(params);\n          urequest.deleteById(deleteId, version);\n          urequest.setCommitWithin(getCommitWithin());\n          request = new LBHttpSolrClient.Req(urequest, urls);\n          routes.put(leaderUrl, request);\n        }\n      }\n    }\n\n    return routes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0544142c22eb88b6d8b3817f2e1190156aa4f9af","date":1551692505,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/UpdateRequest#getRoutes(DocRouter,DocCollection,Map[String,List[String]],ModifiableSolrParams,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/UpdateRequest#getRoutes(DocRouter,DocCollection,Map[String,List[String]],ModifiableSolrParams,String).mjava","sourceNew":"  /**\n   * @param router to route updates with\n   * @param col DocCollection for the updates\n   * @param urlMap of the cluster\n   * @param params params to use\n   * @param idField the id field\n   * @return a Map of urls to requests\n   * @deprecated since 8.0, uses {@link #getRoutesToCollection(DocRouter, DocCollection, Map, ModifiableSolrParams, String)} instead\n   */\n  @Deprecated\n  public Map<String,LBHttpSolrClient.Req> getRoutes(DocRouter router,\n      DocCollection col, Map<String,List<String>> urlMap,\n      ModifiableSolrParams params, String idField) {\n    return getRoutes(router, col, urlMap, params, idField, LBHttpSolrClient.Req::new);\n  }\n\n","sourceOld":"  /**\n   * @param router to route updates with\n   * @param col DocCollection for the updates\n   * @param urlMap of the cluster\n   * @param params params to use\n   * @param idField the id field\n   * @return a Map of urls to requests\n   */\n  public Map<String,LBHttpSolrClient.Req> getRoutes(DocRouter router,\n      DocCollection col, Map<String,List<String>> urlMap,\n      ModifiableSolrParams params, String idField) {\n    \n    if ((documents == null || documents.size() == 0)\n        && (deleteById == null || deleteById.size() == 0)) {\n      return null;\n    }\n    \n    Map<String,LBHttpSolrClient.Req> routes = new HashMap<>();\n    if (documents != null) {\n      Set<Entry<SolrInputDocument,Map<String,Object>>> entries = documents.entrySet();\n      for (Entry<SolrInputDocument,Map<String,Object>> entry : entries) {\n        SolrInputDocument doc = entry.getKey();\n        Object id = doc.getFieldValue(idField);\n        if (id == null) {\n          return null;\n        }\n        Slice slice = router.getTargetSlice(id\n            .toString(), doc, null, null, col);\n        if (slice == null) {\n          return null;\n        }\n        List<String> urls = urlMap.get(slice.getName());\n        if (urls == null) {\n          return null;\n        }\n        String leaderUrl = urls.get(0);\n        LBHttpSolrClient.Req request = routes\n            .get(leaderUrl);\n        if (request == null) {\n          UpdateRequest updateRequest = new UpdateRequest();\n          updateRequest.setMethod(getMethod());\n          updateRequest.setCommitWithin(getCommitWithin());\n          updateRequest.setParams(params);\n          updateRequest.setPath(getPath());\n          updateRequest.setBasicAuthCredentials(getBasicAuthUser(), getBasicAuthPassword());\n          updateRequest.setResponseParser(getResponseParser());\n          request = new LBHttpSolrClient.Req(updateRequest, urls);\n          routes.put(leaderUrl, request);\n        }\n        UpdateRequest urequest = (UpdateRequest) request.getRequest();\n        Map<String,Object> value = entry.getValue();\n        Boolean ow = null;\n        if (value != null) {\n          ow = (Boolean) value.get(OVERWRITE);\n        }\n        if (ow != null) {\n          urequest.add(doc, ow);\n        } else {\n          urequest.add(doc);\n        }\n      }\n    }\n    \n    // Route the deleteById's\n    \n    if (deleteById != null) {\n      \n      Iterator<Map.Entry<String,Map<String,Object>>> entries = deleteById.entrySet()\n          .iterator();\n      while (entries.hasNext()) {\n        \n        Map.Entry<String,Map<String,Object>> entry = entries.next();\n        \n        String deleteId = entry.getKey();\n        Map<String,Object> map = entry.getValue();\n        Long version = null;\n        if (map != null) {\n          version = (Long) map.get(VER);\n        }\n        Slice slice = router.getTargetSlice(deleteId, null, null, null, col);\n        if (slice == null) {\n          return null;\n        }\n        List<String> urls = urlMap.get(slice.getName());\n        if (urls == null) {\n          return null;\n        }\n        String leaderUrl = urls.get(0);\n        LBHttpSolrClient.Req request = routes.get(leaderUrl);\n        if (request != null) {\n          UpdateRequest urequest = (UpdateRequest) request.getRequest();\n          urequest.deleteById(deleteId, version);\n        } else {\n          UpdateRequest urequest = new UpdateRequest();\n          urequest.setParams(params);\n          urequest.deleteById(deleteId, version);\n          urequest.setCommitWithin(getCommitWithin());\n          urequest.setBasicAuthCredentials(getBasicAuthUser(), getBasicAuthPassword());\n          request = new LBHttpSolrClient.Req(urequest, urls);\n          routes.put(leaderUrl, request);\n        }\n      }\n    }\n\n    return routes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["291857aeee5ec20518ddce131ac4362c0075ebe1"],"cc3126fc8c8ae78d791419d51fd3df987e1b6ba4":["291857aeee5ec20518ddce131ac4362c0075ebe1"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["e7c1be4a49a7733047fef6a6790f8161e543366b"],"68423be363a30c5a005b0eb6830c749d93b2b8db":["51f7b7f45b8207ac13e4274c75d82ef57c0c4c1e"],"0544142c22eb88b6d8b3817f2e1190156aa4f9af":["39a9e7b7364ba343ceb6ea953b753d977e10e65b"],"d5fc588fc7c6e55c0d778665292d023bf8d5f3b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["747dd71fefcbc7142661c25334b74c518fef4d81","51f7b7f45b8207ac13e4274c75d82ef57c0c4c1e"],"e7c1be4a49a7733047fef6a6790f8161e543366b":["f517609336abda4a2852a6d56a0d92b97f5f7a9f"],"bafca15d8e408346a67f4282ad1143b88023893b":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"747dd71fefcbc7142661c25334b74c518fef4d81":["13a60d5cca07cbecc52e08e57ae3416a59b3dfe8"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["68423be363a30c5a005b0eb6830c749d93b2b8db","291857aeee5ec20518ddce131ac4362c0075ebe1"],"51f7b7f45b8207ac13e4274c75d82ef57c0c4c1e":["747dd71fefcbc7142661c25334b74c518fef4d81"],"39a9e7b7364ba343ceb6ea953b753d977e10e65b":["cc3126fc8c8ae78d791419d51fd3df987e1b6ba4"],"f517609336abda4a2852a6d56a0d92b97f5f7a9f":["d5fc588fc7c6e55c0d778665292d023bf8d5f3b1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"13a60d5cca07cbecc52e08e57ae3416a59b3dfe8":["bafca15d8e408346a67f4282ad1143b88023893b"],"b1704c078ec59838c9d95d5bf5738b393b537494":["747dd71fefcbc7142661c25334b74c518fef4d81","51f7b7f45b8207ac13e4274c75d82ef57c0c4c1e"],"291857aeee5ec20518ddce131ac4362c0075ebe1":["68423be363a30c5a005b0eb6830c749d93b2b8db"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0544142c22eb88b6d8b3817f2e1190156aa4f9af"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"cc3126fc8c8ae78d791419d51fd3df987e1b6ba4":["39a9e7b7364ba343ceb6ea953b753d977e10e65b"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["bafca15d8e408346a67f4282ad1143b88023893b"],"68423be363a30c5a005b0eb6830c749d93b2b8db":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","291857aeee5ec20518ddce131ac4362c0075ebe1"],"0544142c22eb88b6d8b3817f2e1190156aa4f9af":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d5fc588fc7c6e55c0d778665292d023bf8d5f3b1":["f517609336abda4a2852a6d56a0d92b97f5f7a9f"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"e7c1be4a49a7733047fef6a6790f8161e543366b":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"bafca15d8e408346a67f4282ad1143b88023893b":["13a60d5cca07cbecc52e08e57ae3416a59b3dfe8"],"747dd71fefcbc7142661c25334b74c518fef4d81":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","51f7b7f45b8207ac13e4274c75d82ef57c0c4c1e","b1704c078ec59838c9d95d5bf5738b393b537494"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"51f7b7f45b8207ac13e4274c75d82ef57c0c4c1e":["68423be363a30c5a005b0eb6830c749d93b2b8db","1e6acbaae7af722f17204ceccf0f7db5753eccf3","b1704c078ec59838c9d95d5bf5738b393b537494"],"39a9e7b7364ba343ceb6ea953b753d977e10e65b":["0544142c22eb88b6d8b3817f2e1190156aa4f9af"],"f517609336abda4a2852a6d56a0d92b97f5f7a9f":["e7c1be4a49a7733047fef6a6790f8161e543366b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d5fc588fc7c6e55c0d778665292d023bf8d5f3b1"],"13a60d5cca07cbecc52e08e57ae3416a59b3dfe8":["747dd71fefcbc7142661c25334b74c518fef4d81"],"b1704c078ec59838c9d95d5bf5738b393b537494":[],"291857aeee5ec20518ddce131ac4362c0075ebe1":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","cc3126fc8c8ae78d791419d51fd3df987e1b6ba4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","1e6acbaae7af722f17204ceccf0f7db5753eccf3","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","b1704c078ec59838c9d95d5bf5738b393b537494","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}