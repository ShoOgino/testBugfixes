{"path":"src/test/org/apache/lucene/index/TestIndexWriter.FailOnlyInCommit#eval(MockRAMDirectory).mjava","commits":[{"id":"3ead7b8e9b4934446f7a00ad0e81e3aa4d587ab6","date":1205349797,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter.FailOnlyInCommit#eval(MockRAMDirectory).mjava","pathOld":"/dev/null","sourceNew":"    public void eval(MockRAMDirectory dir)  throws IOException {\n      StackTraceElement[] trace = new Exception().getStackTrace();\n      boolean isCommit = false;\n      boolean isDelete = false;\n      for (int i = 0; i < trace.length; i++) {\n        if (\"org.apache.lucene.index.SegmentInfos\".equals(trace[i].getClassName()) && \"commit\".equals(trace[i].getMethodName()))\n          isCommit = true;\n        if (\"org.apache.lucene.store.MockRAMDirectory\".equals(trace[i].getClassName()) && \"deleteFile\".equals(trace[i].getMethodName()))\n          isDelete = true;\n      }\n\n      if (isCommit) {\n        if (!isDelete) {\n          fail1 = true;\n          throw new RuntimeException(\"now fail first\");\n        } else {\n          fail2 = true;\n          throw new IOException(\"now fail during delete\");\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"455aeff4fef915340c5b19d71d5e147034e83093","date":1210099270,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter.FailOnlyInCommit#eval(MockRAMDirectory).mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter.FailOnlyInCommit#eval(MockRAMDirectory).mjava","sourceNew":"    public void eval(MockRAMDirectory dir)  throws IOException {\n      StackTraceElement[] trace = new Exception().getStackTrace();\n      boolean isCommit = false;\n      boolean isDelete = false;\n      for (int i = 0; i < trace.length; i++) {\n        if (\"org.apache.lucene.index.SegmentInfos\".equals(trace[i].getClassName()) && \"prepareCommit\".equals(trace[i].getMethodName()))\n          isCommit = true;\n        if (\"org.apache.lucene.store.MockRAMDirectory\".equals(trace[i].getClassName()) && \"deleteFile\".equals(trace[i].getMethodName()))\n          isDelete = true;\n      }\n\n      if (isCommit) {\n        if (!isDelete) {\n          fail1 = true;\n          throw new RuntimeException(\"now fail first\");\n        } else {\n          fail2 = true;\n          throw new IOException(\"now fail during delete\");\n        }\n      }\n    }\n\n","sourceOld":"    public void eval(MockRAMDirectory dir)  throws IOException {\n      StackTraceElement[] trace = new Exception().getStackTrace();\n      boolean isCommit = false;\n      boolean isDelete = false;\n      for (int i = 0; i < trace.length; i++) {\n        if (\"org.apache.lucene.index.SegmentInfos\".equals(trace[i].getClassName()) && \"commit\".equals(trace[i].getMethodName()))\n          isCommit = true;\n        if (\"org.apache.lucene.store.MockRAMDirectory\".equals(trace[i].getClassName()) && \"deleteFile\".equals(trace[i].getMethodName()))\n          isDelete = true;\n      }\n\n      if (isCommit) {\n        if (!isDelete) {\n          fail1 = true;\n          throw new RuntimeException(\"now fail first\");\n        } else {\n          fail2 = true;\n          throw new IOException(\"now fail during delete\");\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1326054a8d3aa66382d49decc7f330955c9c6f71","date":1257386139,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter.FailOnlyInCommit#eval(MockRAMDirectory).mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter.FailOnlyInCommit#eval(MockRAMDirectory).mjava","sourceNew":"    @Override\n    public void eval(MockRAMDirectory dir)  throws IOException {\n      StackTraceElement[] trace = new Exception().getStackTrace();\n      boolean isCommit = false;\n      boolean isDelete = false;\n      for (int i = 0; i < trace.length; i++) {\n        if (\"org.apache.lucene.index.SegmentInfos\".equals(trace[i].getClassName()) && \"prepareCommit\".equals(trace[i].getMethodName()))\n          isCommit = true;\n        if (\"org.apache.lucene.store.MockRAMDirectory\".equals(trace[i].getClassName()) && \"deleteFile\".equals(trace[i].getMethodName()))\n          isDelete = true;\n      }\n\n      if (isCommit) {\n        if (!isDelete) {\n          fail1 = true;\n          throw new RuntimeException(\"now fail first\");\n        } else {\n          fail2 = true;\n          throw new IOException(\"now fail during delete\");\n        }\n      }\n    }\n\n","sourceOld":"    public void eval(MockRAMDirectory dir)  throws IOException {\n      StackTraceElement[] trace = new Exception().getStackTrace();\n      boolean isCommit = false;\n      boolean isDelete = false;\n      for (int i = 0; i < trace.length; i++) {\n        if (\"org.apache.lucene.index.SegmentInfos\".equals(trace[i].getClassName()) && \"prepareCommit\".equals(trace[i].getMethodName()))\n          isCommit = true;\n        if (\"org.apache.lucene.store.MockRAMDirectory\".equals(trace[i].getClassName()) && \"deleteFile\".equals(trace[i].getMethodName()))\n          isDelete = true;\n      }\n\n      if (isCommit) {\n        if (!isDelete) {\n          fail1 = true;\n          throw new RuntimeException(\"now fail first\");\n        } else {\n          fail2 = true;\n          throw new IOException(\"now fail during delete\");\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter.FailOnlyInCommit#eval(MockRAMDirectory).mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter.FailOnlyInCommit#eval(MockRAMDirectory).mjava","sourceNew":"    @Override\n    public void eval(MockRAMDirectory dir)  throws IOException {\n      StackTraceElement[] trace = new Exception().getStackTrace();\n      boolean isCommit = false;\n      boolean isDelete = false;\n      for (int i = 0; i < trace.length; i++) {\n        if (\"org.apache.lucene.index.SegmentInfos\".equals(trace[i].getClassName()) && \"prepareCommit\".equals(trace[i].getMethodName()))\n          isCommit = true;\n        if (\"org.apache.lucene.store.MockRAMDirectory\".equals(trace[i].getClassName()) && \"deleteFile\".equals(trace[i].getMethodName()))\n          isDelete = true;\n      }\n\n      if (isCommit) {\n        if (!isDelete) {\n          fail1 = true;\n          throw new RuntimeException(\"now fail first\");\n        } else {\n          fail2 = true;\n          throw new IOException(\"now fail during delete\");\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void eval(MockRAMDirectory dir)  throws IOException {\n      StackTraceElement[] trace = new Exception().getStackTrace();\n      boolean isCommit = false;\n      boolean isDelete = false;\n      for (int i = 0; i < trace.length; i++) {\n        if (\"org.apache.lucene.index.SegmentInfos\".equals(trace[i].getClassName()) && \"prepareCommit\".equals(trace[i].getMethodName()))\n          isCommit = true;\n        if (\"org.apache.lucene.store.MockRAMDirectory\".equals(trace[i].getClassName()) && \"deleteFile\".equals(trace[i].getMethodName()))\n          isDelete = true;\n      }\n\n      if (isCommit) {\n        if (!isDelete) {\n          fail1 = true;\n          throw new RuntimeException(\"now fail first\");\n        } else {\n          fail2 = true;\n          throw new IOException(\"now fail during delete\");\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1326054a8d3aa66382d49decc7f330955c9c6f71":["455aeff4fef915340c5b19d71d5e147034e83093"],"3ead7b8e9b4934446f7a00ad0e81e3aa4d587ab6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"455aeff4fef915340c5b19d71d5e147034e83093":["3ead7b8e9b4934446f7a00ad0e81e3aa4d587ab6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["1326054a8d3aa66382d49decc7f330955c9c6f71"]},"commit2Childs":{"1326054a8d3aa66382d49decc7f330955c9c6f71":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"3ead7b8e9b4934446f7a00ad0e81e3aa4d587ab6":["455aeff4fef915340c5b19d71d5e147034e83093"],"455aeff4fef915340c5b19d71d5e147034e83093":["1326054a8d3aa66382d49decc7f330955c9c6f71"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3ead7b8e9b4934446f7a00ad0e81e3aa4d587ab6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}