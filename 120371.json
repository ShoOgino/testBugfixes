{"path":"lucene/core/src/java/org/apache/lucene/util/FixedBitSet#ensureCapacity(FixedBitSet,int).mjava","commits":[{"id":"3995f83351082af8ae83bb017e63c56818fc1568","date":1392047063,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/FixedBitSet#ensureCapacity(FixedBitSet,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * If the given {@link FixedBitSet} is large enough to hold {@code numBits},\n   * returns the given bits, otherwise returns a new {@link FixedBitSet} which\n   * can hold the requested number of bits.\n   * \n   * <p>\n   * <b>NOTE:</b> the returned bitset reuses the underlying {@code long[]} of\n   * the given {@code bits} if possible. Also, calling {@link #length()} on the\n   * returned bits may return a value greater than {@code numBits}.\n   */\n  public static FixedBitSet ensureCapacity(FixedBitSet bits, int numBits) {\n    if (numBits < bits.length()) {\n      return bits;\n    } else {\n      int numWords = bits2words(numBits);\n      long[] arr = bits.getBits();\n      if (numWords >= arr.length) {\n        arr = ArrayUtil.grow(arr, numWords + 1);\n      }\n      return new FixedBitSet(arr, arr.length << 6);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["af918c7c328775f9fadd5870c21f0fafc2a059cc"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"af918c7c328775f9fadd5870c21f0fafc2a059cc","date":1430253435,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/FixedBitSet#ensureCapacity(FixedBitSet,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/FixedBitSet#ensureCapacity(FixedBitSet,int).mjava","sourceNew":"  /**\n   * If the given {@link FixedBitSet} is large enough to hold {@code numBits+1},\n   * returns the given bits, otherwise returns a new {@link FixedBitSet} which\n   * can hold the requested number of bits.\n   * <p>\n   * <b>NOTE:</b> the returned bitset reuses the underlying {@code long[]} of\n   * the given {@code bits} if possible. Also, calling {@link #length()} on the\n   * returned bits may return a value greater than {@code numBits}.\n   */\n  public static FixedBitSet ensureCapacity(FixedBitSet bits, int numBits) {\n    if (numBits < bits.numBits) {\n      return bits;\n    } else {\n      // Depends on the ghost bits being clear!\n      // (Otherwise, they may become visible in the new instance)\n      int numWords = bits2words(numBits);\n      long[] arr = bits.getBits();\n      if (numWords >= arr.length) {\n        arr = ArrayUtil.grow(arr, numWords + 1);\n      }\n      return new FixedBitSet(arr, arr.length << 6);\n    }\n  }\n\n","sourceOld":"  /**\n   * If the given {@link FixedBitSet} is large enough to hold {@code numBits},\n   * returns the given bits, otherwise returns a new {@link FixedBitSet} which\n   * can hold the requested number of bits.\n   * \n   * <p>\n   * <b>NOTE:</b> the returned bitset reuses the underlying {@code long[]} of\n   * the given {@code bits} if possible. Also, calling {@link #length()} on the\n   * returned bits may return a value greater than {@code numBits}.\n   */\n  public static FixedBitSet ensureCapacity(FixedBitSet bits, int numBits) {\n    if (numBits < bits.length()) {\n      return bits;\n    } else {\n      int numWords = bits2words(numBits);\n      long[] arr = bits.getBits();\n      if (numWords >= arr.length) {\n        arr = ArrayUtil.grow(arr, numWords + 1);\n      }\n      return new FixedBitSet(arr, arr.length << 6);\n    }\n  }\n\n","bugFix":["3995f83351082af8ae83bb017e63c56818fc1568"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"af918c7c328775f9fadd5870c21f0fafc2a059cc":["3995f83351082af8ae83bb017e63c56818fc1568"],"3995f83351082af8ae83bb017e63c56818fc1568":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["af918c7c328775f9fadd5870c21f0fafc2a059cc"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3995f83351082af8ae83bb017e63c56818fc1568"],"af918c7c328775f9fadd5870c21f0fafc2a059cc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3995f83351082af8ae83bb017e63c56818fc1568":["af918c7c328775f9fadd5870c21f0fafc2a059cc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}