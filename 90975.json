{"path":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQueryVisitSubscorers#testGetChildrenMinShouldMatchSumScorer().mjava","commits":[{"id":"1edabd582609f54032bad1c31dc5efe38070127e","date":1404739071,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQueryVisitSubscorers#testGetChildrenMinShouldMatchSumScorer().mjava","pathOld":"/dev/null","sourceNew":"  public void testGetChildrenMinShouldMatchSumScorer() throws IOException {\n    final BooleanQuery query = new BooleanQuery();\n    query.add(new TermQuery(new Term(F2, \"nutch\")), Occur.SHOULD);\n    query.add(new TermQuery(new Term(F2, \"web\")), Occur.SHOULD);\n    query.add(new TermQuery(new Term(F2, \"crawler\")), Occur.SHOULD);\n    query.setMinimumNumberShouldMatch(2);\n    ScorerSummarizingCollector collector = new ScorerSummarizingCollector();\n    searcher.search(query, collector);\n    assertEquals(1, collector.getNumHits());\n    assertFalse(collector.getSummaries().isEmpty());\n    for (String summary : collector.getSummaries()) {\n      assertEquals(\n          \"MinShouldMatchSumScorer\\n\" +\n          \"    SHOULD TermScorer body:nutch\\n\" +\n          \"    SHOULD TermScorer body:web\\n\" +\n          \"    SHOULD TermScorer body:crawler\", summary);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"251e6911800e3a02e1da3bfd4dc49a914aef9778","date":1423063783,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQueryVisitSubscorers#testGetChildrenMinShouldMatchSumScorer().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQueryVisitSubscorers#testGetChildrenMinShouldMatchSumScorer().mjava","sourceNew":"  public void testGetChildrenMinShouldMatchSumScorer() throws IOException {\n    final BooleanQuery query = new BooleanQuery();\n    query.add(new TermQuery(new Term(F2, \"nutch\")), Occur.SHOULD);\n    query.add(new TermQuery(new Term(F2, \"web\")), Occur.SHOULD);\n    query.add(new TermQuery(new Term(F2, \"crawler\")), Occur.SHOULD);\n    query.setMinimumNumberShouldMatch(2);\n    query.add(new MatchAllDocsQuery(), Occur.MUST);\n    ScorerSummarizingCollector collector = new ScorerSummarizingCollector();\n    searcher.search(query, collector);\n    assertEquals(1, collector.getNumHits());\n    assertFalse(collector.getSummaries().isEmpty());\n    for (String summary : collector.getSummaries()) {\n      assertEquals(\n          \"CoordinatingConjunctionScorer\\n\" +\n          \"    MUST MinShouldMatchSumScorer\\n\" +\n          \"            SHOULD TermScorer body:nutch\\n\" +\n          \"            SHOULD TermScorer body:web\\n\" +\n          \"            SHOULD TermScorer body:crawler\\n\" +\n          \"    MUST MatchAllScorer\", summary);\n    }\n  }\n\n","sourceOld":"  public void testGetChildrenMinShouldMatchSumScorer() throws IOException {\n    final BooleanQuery query = new BooleanQuery();\n    query.add(new TermQuery(new Term(F2, \"nutch\")), Occur.SHOULD);\n    query.add(new TermQuery(new Term(F2, \"web\")), Occur.SHOULD);\n    query.add(new TermQuery(new Term(F2, \"crawler\")), Occur.SHOULD);\n    query.setMinimumNumberShouldMatch(2);\n    ScorerSummarizingCollector collector = new ScorerSummarizingCollector();\n    searcher.search(query, collector);\n    assertEquals(1, collector.getNumHits());\n    assertFalse(collector.getSummaries().isEmpty());\n    for (String summary : collector.getSummaries()) {\n      assertEquals(\n          \"MinShouldMatchSumScorer\\n\" +\n          \"    SHOULD TermScorer body:nutch\\n\" +\n          \"    SHOULD TermScorer body:web\\n\" +\n          \"    SHOULD TermScorer body:crawler\", summary);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"25f698887111a682424e759ba36083180899a1fd","date":1423588899,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQueryVisitSubscorers#testGetChildrenMinShouldMatchSumScorer().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQueryVisitSubscorers#testGetChildrenMinShouldMatchSumScorer().mjava","sourceNew":"  public void testGetChildrenMinShouldMatchSumScorer() throws IOException {\n    final BooleanQuery query = new BooleanQuery();\n    query.add(new TermQuery(new Term(F2, \"nutch\")), Occur.SHOULD);\n    query.add(new TermQuery(new Term(F2, \"web\")), Occur.SHOULD);\n    query.add(new TermQuery(new Term(F2, \"crawler\")), Occur.SHOULD);\n    query.setMinimumNumberShouldMatch(2);\n    query.add(new MatchAllDocsQuery(), Occur.MUST);\n    ScorerSummarizingCollector collector = new ScorerSummarizingCollector();\n    searcher.search(query, collector);\n    assertEquals(1, collector.getNumHits());\n    assertFalse(collector.getSummaries().isEmpty());\n    for (String summary : collector.getSummaries()) {\n      assertEquals(\n          \"CoordinatingConjunctionScorer\\n\" +\n          \"    MUST MatchAllScorer\\n\" +\n          \"    MUST MinShouldMatchSumScorer\\n\" +\n          \"            SHOULD TermScorer body:nutch\\n\" +\n          \"            SHOULD TermScorer body:web\\n\" +\n          \"            SHOULD TermScorer body:crawler\",\n          summary);\n    }\n  }\n\n","sourceOld":"  public void testGetChildrenMinShouldMatchSumScorer() throws IOException {\n    final BooleanQuery query = new BooleanQuery();\n    query.add(new TermQuery(new Term(F2, \"nutch\")), Occur.SHOULD);\n    query.add(new TermQuery(new Term(F2, \"web\")), Occur.SHOULD);\n    query.add(new TermQuery(new Term(F2, \"crawler\")), Occur.SHOULD);\n    query.setMinimumNumberShouldMatch(2);\n    query.add(new MatchAllDocsQuery(), Occur.MUST);\n    ScorerSummarizingCollector collector = new ScorerSummarizingCollector();\n    searcher.search(query, collector);\n    assertEquals(1, collector.getNumHits());\n    assertFalse(collector.getSummaries().isEmpty());\n    for (String summary : collector.getSummaries()) {\n      assertEquals(\n          \"CoordinatingConjunctionScorer\\n\" +\n          \"    MUST MinShouldMatchSumScorer\\n\" +\n          \"            SHOULD TermScorer body:nutch\\n\" +\n          \"            SHOULD TermScorer body:web\\n\" +\n          \"            SHOULD TermScorer body:crawler\\n\" +\n          \"    MUST MatchAllScorer\", summary);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a7f94ff172f40ff68a926d112e25b96bc38e5a27","date":1431002360,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQueryVisitSubscorers#testGetChildrenMinShouldMatchSumScorer().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQueryVisitSubscorers#testGetChildrenMinShouldMatchSumScorer().mjava","sourceNew":"  public void testGetChildrenMinShouldMatchSumScorer() throws IOException {\n    final BooleanQuery query = new BooleanQuery();\n    query.add(new TermQuery(new Term(F2, \"nutch\")), Occur.SHOULD);\n    query.add(new TermQuery(new Term(F2, \"web\")), Occur.SHOULD);\n    query.add(new TermQuery(new Term(F2, \"crawler\")), Occur.SHOULD);\n    query.setMinimumNumberShouldMatch(2);\n    query.add(new MatchAllDocsQuery(), Occur.MUST);\n    ScorerSummarizingCollector collector = new ScorerSummarizingCollector();\n    searcher.search(query, collector);\n    assertEquals(1, collector.getNumHits());\n    assertFalse(collector.getSummaries().isEmpty());\n    for (String summary : collector.getSummaries()) {\n      assertEquals(\n          \"CoordinatingConjunctionScorer\\n\" +\n          \"    MUST ConstantScoreScorer\\n\" +\n          \"    MUST MinShouldMatchSumScorer\\n\" +\n          \"            SHOULD TermScorer body:nutch\\n\" +\n          \"            SHOULD TermScorer body:web\\n\" +\n          \"            SHOULD TermScorer body:crawler\",\n          summary);\n    }\n  }\n\n","sourceOld":"  public void testGetChildrenMinShouldMatchSumScorer() throws IOException {\n    final BooleanQuery query = new BooleanQuery();\n    query.add(new TermQuery(new Term(F2, \"nutch\")), Occur.SHOULD);\n    query.add(new TermQuery(new Term(F2, \"web\")), Occur.SHOULD);\n    query.add(new TermQuery(new Term(F2, \"crawler\")), Occur.SHOULD);\n    query.setMinimumNumberShouldMatch(2);\n    query.add(new MatchAllDocsQuery(), Occur.MUST);\n    ScorerSummarizingCollector collector = new ScorerSummarizingCollector();\n    searcher.search(query, collector);\n    assertEquals(1, collector.getNumHits());\n    assertFalse(collector.getSummaries().isEmpty());\n    for (String summary : collector.getSummaries()) {\n      assertEquals(\n          \"CoordinatingConjunctionScorer\\n\" +\n          \"    MUST MatchAllScorer\\n\" +\n          \"    MUST MinShouldMatchSumScorer\\n\" +\n          \"            SHOULD TermScorer body:nutch\\n\" +\n          \"            SHOULD TermScorer body:web\\n\" +\n          \"            SHOULD TermScorer body:crawler\",\n          summary);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQueryVisitSubscorers#testGetChildrenMinShouldMatchSumScorer().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQueryVisitSubscorers#testGetChildrenMinShouldMatchSumScorer().mjava","sourceNew":"  public void testGetChildrenMinShouldMatchSumScorer() throws IOException {\n    final BooleanQuery.Builder query = new BooleanQuery.Builder();\n    query.add(new TermQuery(new Term(F2, \"nutch\")), Occur.SHOULD);\n    query.add(new TermQuery(new Term(F2, \"web\")), Occur.SHOULD);\n    query.add(new TermQuery(new Term(F2, \"crawler\")), Occur.SHOULD);\n    query.setMinimumNumberShouldMatch(2);\n    query.add(new MatchAllDocsQuery(), Occur.MUST);\n    ScorerSummarizingCollector collector = new ScorerSummarizingCollector();\n    searcher.search(query.build(), collector);\n    assertEquals(1, collector.getNumHits());\n    assertFalse(collector.getSummaries().isEmpty());\n    for (String summary : collector.getSummaries()) {\n      assertEquals(\n          \"CoordinatingConjunctionScorer\\n\" +\n          \"    MUST ConstantScoreScorer\\n\" +\n          \"    MUST MinShouldMatchSumScorer\\n\" +\n          \"            SHOULD TermScorer body:nutch\\n\" +\n          \"            SHOULD TermScorer body:web\\n\" +\n          \"            SHOULD TermScorer body:crawler\",\n          summary);\n    }\n  }\n\n","sourceOld":"  public void testGetChildrenMinShouldMatchSumScorer() throws IOException {\n    final BooleanQuery query = new BooleanQuery();\n    query.add(new TermQuery(new Term(F2, \"nutch\")), Occur.SHOULD);\n    query.add(new TermQuery(new Term(F2, \"web\")), Occur.SHOULD);\n    query.add(new TermQuery(new Term(F2, \"crawler\")), Occur.SHOULD);\n    query.setMinimumNumberShouldMatch(2);\n    query.add(new MatchAllDocsQuery(), Occur.MUST);\n    ScorerSummarizingCollector collector = new ScorerSummarizingCollector();\n    searcher.search(query, collector);\n    assertEquals(1, collector.getNumHits());\n    assertFalse(collector.getSummaries().isEmpty());\n    for (String summary : collector.getSummaries()) {\n      assertEquals(\n          \"CoordinatingConjunctionScorer\\n\" +\n          \"    MUST ConstantScoreScorer\\n\" +\n          \"    MUST MinShouldMatchSumScorer\\n\" +\n          \"            SHOULD TermScorer body:nutch\\n\" +\n          \"            SHOULD TermScorer body:web\\n\" +\n          \"            SHOULD TermScorer body:crawler\",\n          summary);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c8a0e442f7b61f811680273b25da95994a724466","date":1467878549,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQueryVisitSubscorers#testGetChildrenMinShouldMatchSumScorer().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQueryVisitSubscorers#testGetChildrenMinShouldMatchSumScorer().mjava","sourceNew":"  public void testGetChildrenMinShouldMatchSumScorer() throws IOException {\n    final BooleanQuery.Builder query = new BooleanQuery.Builder();\n    query.add(new TermQuery(new Term(F2, \"nutch\")), Occur.SHOULD);\n    query.add(new TermQuery(new Term(F2, \"web\")), Occur.SHOULD);\n    query.add(new TermQuery(new Term(F2, \"crawler\")), Occur.SHOULD);\n    query.setMinimumNumberShouldMatch(2);\n    query.add(new MatchAllDocsQuery(), Occur.MUST);\n    ScorerSummarizingCollector collector = new ScorerSummarizingCollector();\n    searcher.search(query.build(), collector);\n    assertEquals(1, collector.getNumHits());\n    assertFalse(collector.getSummaries().isEmpty());\n    for (String summary : collector.getSummaries()) {\n      assertEquals(\n          \"ConjunctionScorer\\n\" +\n          \"    MUST ConstantScoreScorer\\n\" +\n          \"    MUST MinShouldMatchSumScorer\\n\" +\n          \"            SHOULD TermScorer body:nutch\\n\" +\n          \"            SHOULD TermScorer body:web\\n\" +\n          \"            SHOULD TermScorer body:crawler\",\n          summary);\n    }\n  }\n\n","sourceOld":"  public void testGetChildrenMinShouldMatchSumScorer() throws IOException {\n    final BooleanQuery.Builder query = new BooleanQuery.Builder();\n    query.add(new TermQuery(new Term(F2, \"nutch\")), Occur.SHOULD);\n    query.add(new TermQuery(new Term(F2, \"web\")), Occur.SHOULD);\n    query.add(new TermQuery(new Term(F2, \"crawler\")), Occur.SHOULD);\n    query.setMinimumNumberShouldMatch(2);\n    query.add(new MatchAllDocsQuery(), Occur.MUST);\n    ScorerSummarizingCollector collector = new ScorerSummarizingCollector();\n    searcher.search(query.build(), collector);\n    assertEquals(1, collector.getNumHits());\n    assertFalse(collector.getSummaries().isEmpty());\n    for (String summary : collector.getSummaries()) {\n      assertEquals(\n          \"CoordinatingConjunctionScorer\\n\" +\n          \"    MUST ConstantScoreScorer\\n\" +\n          \"    MUST MinShouldMatchSumScorer\\n\" +\n          \"            SHOULD TermScorer body:nutch\\n\" +\n          \"            SHOULD TermScorer body:web\\n\" +\n          \"            SHOULD TermScorer body:crawler\",\n          summary);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQueryVisitSubscorers#testGetChildrenMinShouldMatchSumScorer().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQueryVisitSubscorers#testGetChildrenMinShouldMatchSumScorer().mjava","sourceNew":"  public void testGetChildrenMinShouldMatchSumScorer() throws IOException {\n    final BooleanQuery.Builder query = new BooleanQuery.Builder();\n    query.add(new TermQuery(new Term(F2, \"nutch\")), Occur.SHOULD);\n    query.add(new TermQuery(new Term(F2, \"web\")), Occur.SHOULD);\n    query.add(new TermQuery(new Term(F2, \"crawler\")), Occur.SHOULD);\n    query.setMinimumNumberShouldMatch(2);\n    query.add(new MatchAllDocsQuery(), Occur.MUST);\n    ScorerSummarizingCollector collector = new ScorerSummarizingCollector();\n    searcher.search(query.build(), collector);\n    assertEquals(1, collector.getNumHits());\n    assertFalse(collector.getSummaries().isEmpty());\n    for (String summary : collector.getSummaries()) {\n      assertEquals(\n          \"ConjunctionScorer\\n\" +\n          \"    MUST ConstantScoreScorer\\n\" +\n          \"    MUST MinShouldMatchSumScorer\\n\" +\n          \"            SHOULD TermScorer body:nutch\\n\" +\n          \"            SHOULD TermScorer body:web\\n\" +\n          \"            SHOULD TermScorer body:crawler\",\n          summary);\n    }\n  }\n\n","sourceOld":"  public void testGetChildrenMinShouldMatchSumScorer() throws IOException {\n    final BooleanQuery.Builder query = new BooleanQuery.Builder();\n    query.add(new TermQuery(new Term(F2, \"nutch\")), Occur.SHOULD);\n    query.add(new TermQuery(new Term(F2, \"web\")), Occur.SHOULD);\n    query.add(new TermQuery(new Term(F2, \"crawler\")), Occur.SHOULD);\n    query.setMinimumNumberShouldMatch(2);\n    query.add(new MatchAllDocsQuery(), Occur.MUST);\n    ScorerSummarizingCollector collector = new ScorerSummarizingCollector();\n    searcher.search(query.build(), collector);\n    assertEquals(1, collector.getNumHits());\n    assertFalse(collector.getSummaries().isEmpty());\n    for (String summary : collector.getSummaries()) {\n      assertEquals(\n          \"CoordinatingConjunctionScorer\\n\" +\n          \"    MUST ConstantScoreScorer\\n\" +\n          \"    MUST MinShouldMatchSumScorer\\n\" +\n          \"            SHOULD TermScorer body:nutch\\n\" +\n          \"            SHOULD TermScorer body:web\\n\" +\n          \"            SHOULD TermScorer body:crawler\",\n          summary);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dca67e06c96e95a8d9ef07418b6299bfd981523b","date":1484639518,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQueryVisitSubscorers#testGetChildrenMinShouldMatchSumScorer().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQueryVisitSubscorers#testGetChildrenMinShouldMatchSumScorer().mjava","sourceNew":"  public void testGetChildrenMinShouldMatchSumScorer() throws IOException {\n    final BooleanQuery.Builder query = new BooleanQuery.Builder();\n    query.add(new TermQuery(new Term(F2, \"nutch\")), Occur.SHOULD);\n    query.add(new TermQuery(new Term(F2, \"web\")), Occur.SHOULD);\n    query.add(new TermQuery(new Term(F2, \"crawler\")), Occur.SHOULD);\n    query.setMinimumNumberShouldMatch(2);\n    query.add(new MatchAllDocsQuery(), Occur.MUST);\n    ScorerSummarizingCollector collector = new ScorerSummarizingCollector();\n    searcher.search(query.build(), collector);\n    assertEquals(1, collector.getNumHits());\n    assertFalse(collector.getSummaries().isEmpty());\n    for (String summary : collector.getSummaries()) {\n      assertEquals(\n          \"ConjunctionScorer\\n\" +\n          \"    MUST ConstantScoreScorer\\n\" +\n          \"    MUST MinShouldMatchSumScorer\\n\" +\n          \"            SHOULD TermScorer body:nutch\\n\" +\n          \"            SHOULD TermScorer body:crawler\\n\" +\n          \"            SHOULD TermScorer body:web\",\n          summary);\n    }\n  }\n\n","sourceOld":"  public void testGetChildrenMinShouldMatchSumScorer() throws IOException {\n    final BooleanQuery.Builder query = new BooleanQuery.Builder();\n    query.add(new TermQuery(new Term(F2, \"nutch\")), Occur.SHOULD);\n    query.add(new TermQuery(new Term(F2, \"web\")), Occur.SHOULD);\n    query.add(new TermQuery(new Term(F2, \"crawler\")), Occur.SHOULD);\n    query.setMinimumNumberShouldMatch(2);\n    query.add(new MatchAllDocsQuery(), Occur.MUST);\n    ScorerSummarizingCollector collector = new ScorerSummarizingCollector();\n    searcher.search(query.build(), collector);\n    assertEquals(1, collector.getNumHits());\n    assertFalse(collector.getSummaries().isEmpty());\n    for (String summary : collector.getSummaries()) {\n      assertEquals(\n          \"ConjunctionScorer\\n\" +\n          \"    MUST ConstantScoreScorer\\n\" +\n          \"    MUST MinShouldMatchSumScorer\\n\" +\n          \"            SHOULD TermScorer body:nutch\\n\" +\n          \"            SHOULD TermScorer body:web\\n\" +\n          \"            SHOULD TermScorer body:crawler\",\n          summary);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"302d34f2c66e8d489ee13078305c330cbf67b226","date":1484754357,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQueryVisitSubscorers#testGetChildrenMinShouldMatchSumScorer().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQueryVisitSubscorers#testGetChildrenMinShouldMatchSumScorer().mjava","sourceNew":"  public void testGetChildrenMinShouldMatchSumScorer() throws IOException {\n    final BooleanQuery.Builder query = new BooleanQuery.Builder();\n    query.add(new TermQuery(new Term(F2, \"nutch\")), Occur.SHOULD);\n    query.add(new TermQuery(new Term(F2, \"web\")), Occur.SHOULD);\n    query.add(new TermQuery(new Term(F2, \"crawler\")), Occur.SHOULD);\n    query.setMinimumNumberShouldMatch(2);\n    query.add(new MatchAllDocsQuery(), Occur.MUST);\n    ScorerSummarizingCollector collector = new ScorerSummarizingCollector();\n    searcher.search(query.build(), collector);\n    assertEquals(1, collector.getNumHits());\n    assertFalse(collector.getSummaries().isEmpty());\n    for (String summary : collector.getSummaries()) {\n      assertEquals(\n          \"ConjunctionScorer\\n\" +\n          \"    MUST ConstantScoreScorer\\n\" +\n          \"    MUST MinShouldMatchSumScorer\\n\" +\n          \"            SHOULD TermScorer body:nutch\\n\" +\n          \"            SHOULD TermScorer body:crawler\\n\" +\n          \"            SHOULD TermScorer body:web\",\n          summary);\n    }\n  }\n\n","sourceOld":"  public void testGetChildrenMinShouldMatchSumScorer() throws IOException {\n    final BooleanQuery.Builder query = new BooleanQuery.Builder();\n    query.add(new TermQuery(new Term(F2, \"nutch\")), Occur.SHOULD);\n    query.add(new TermQuery(new Term(F2, \"web\")), Occur.SHOULD);\n    query.add(new TermQuery(new Term(F2, \"crawler\")), Occur.SHOULD);\n    query.setMinimumNumberShouldMatch(2);\n    query.add(new MatchAllDocsQuery(), Occur.MUST);\n    ScorerSummarizingCollector collector = new ScorerSummarizingCollector();\n    searcher.search(query.build(), collector);\n    assertEquals(1, collector.getNumHits());\n    assertFalse(collector.getSummaries().isEmpty());\n    for (String summary : collector.getSummaries()) {\n      assertEquals(\n          \"ConjunctionScorer\\n\" +\n          \"    MUST ConstantScoreScorer\\n\" +\n          \"    MUST MinShouldMatchSumScorer\\n\" +\n          \"            SHOULD TermScorer body:nutch\\n\" +\n          \"            SHOULD TermScorer body:web\\n\" +\n          \"            SHOULD TermScorer body:crawler\",\n          summary);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"26ae065817023d886f3de2bc162e9e1ad71c7a02","date":1485164116,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQueryVisitSubscorers#testGetChildrenMinShouldMatchSumScorer().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQueryVisitSubscorers#testGetChildrenMinShouldMatchSumScorer().mjava","sourceNew":"  public void testGetChildrenMinShouldMatchSumScorer() throws IOException {\n    final BooleanQuery.Builder query = new BooleanQuery.Builder();\n    query.add(new TermQuery(new Term(F2, \"nutch\")), Occur.SHOULD);\n    query.add(new TermQuery(new Term(F2, \"web\")), Occur.SHOULD);\n    query.add(new TermQuery(new Term(F2, \"crawler\")), Occur.SHOULD);\n    query.setMinimumNumberShouldMatch(2);\n    query.add(new MatchAllDocsQuery(), Occur.MUST);\n    ScorerSummarizingCollector collector = new ScorerSummarizingCollector();\n    searcher.search(query.build(), collector);\n    assertEquals(1, collector.getNumHits());\n    assertFalse(collector.getSummaries().isEmpty());\n    for (String summary : collector.getSummaries()) {\n      assertEquals(\n          \"ConjunctionScorer\\n\" +\n              \"    MUST ConstantScoreScorer\\n\" +\n              \"    MUST MinShouldMatchSumScorer\\n\" +\n              \"            SHOULD TermScorer body:web\\n\" +\n              \"            SHOULD TermScorer body:crawler\\n\" +\n              \"            SHOULD TermScorer body:nutch\",\n              summary);\n    }\n  }\n\n","sourceOld":"  public void testGetChildrenMinShouldMatchSumScorer() throws IOException {\n    final BooleanQuery.Builder query = new BooleanQuery.Builder();\n    query.add(new TermQuery(new Term(F2, \"nutch\")), Occur.SHOULD);\n    query.add(new TermQuery(new Term(F2, \"web\")), Occur.SHOULD);\n    query.add(new TermQuery(new Term(F2, \"crawler\")), Occur.SHOULD);\n    query.setMinimumNumberShouldMatch(2);\n    query.add(new MatchAllDocsQuery(), Occur.MUST);\n    ScorerSummarizingCollector collector = new ScorerSummarizingCollector();\n    searcher.search(query.build(), collector);\n    assertEquals(1, collector.getNumHits());\n    assertFalse(collector.getSummaries().isEmpty());\n    for (String summary : collector.getSummaries()) {\n      assertEquals(\n          \"ConjunctionScorer\\n\" +\n          \"    MUST ConstantScoreScorer\\n\" +\n          \"    MUST MinShouldMatchSumScorer\\n\" +\n          \"            SHOULD TermScorer body:nutch\\n\" +\n          \"            SHOULD TermScorer body:crawler\\n\" +\n          \"            SHOULD TermScorer body:web\",\n          summary);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d88f2d3d3107907144cec6455db31ccebd65475a","date":1485171003,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQueryVisitSubscorers#testGetChildrenMinShouldMatchSumScorer().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQueryVisitSubscorers#testGetChildrenMinShouldMatchSumScorer().mjava","sourceNew":"  public void testGetChildrenMinShouldMatchSumScorer() throws IOException {\n    final BooleanQuery.Builder query = new BooleanQuery.Builder();\n    query.add(new TermQuery(new Term(F2, \"nutch\")), Occur.SHOULD);\n    query.add(new TermQuery(new Term(F2, \"web\")), Occur.SHOULD);\n    query.add(new TermQuery(new Term(F2, \"crawler\")), Occur.SHOULD);\n    query.setMinimumNumberShouldMatch(2);\n    query.add(new MatchAllDocsQuery(), Occur.MUST);\n    ScorerSummarizingCollector collector = new ScorerSummarizingCollector();\n    searcher.search(query.build(), collector);\n    assertEquals(1, collector.getNumHits());\n    assertFalse(collector.getSummaries().isEmpty());\n    for (String summary : collector.getSummaries()) {\n      assertEquals(\n          \"ConjunctionScorer\\n\" +\n          \"    MUST ConstantScoreScorer\\n\" +\n          \"    MUST MinShouldMatchSumScorer\\n\" +\n          \"            SHOULD TermScorer body:nutch\\n\" +\n          \"            SHOULD TermScorer body:crawler\\n\" +\n          \"            SHOULD TermScorer body:web\",\n          summary);\n    }\n  }\n\n","sourceOld":"  public void testGetChildrenMinShouldMatchSumScorer() throws IOException {\n    final BooleanQuery.Builder query = new BooleanQuery.Builder();\n    query.add(new TermQuery(new Term(F2, \"nutch\")), Occur.SHOULD);\n    query.add(new TermQuery(new Term(F2, \"web\")), Occur.SHOULD);\n    query.add(new TermQuery(new Term(F2, \"crawler\")), Occur.SHOULD);\n    query.setMinimumNumberShouldMatch(2);\n    query.add(new MatchAllDocsQuery(), Occur.MUST);\n    ScorerSummarizingCollector collector = new ScorerSummarizingCollector();\n    searcher.search(query.build(), collector);\n    assertEquals(1, collector.getNumHits());\n    assertFalse(collector.getSummaries().isEmpty());\n    for (String summary : collector.getSummaries()) {\n      assertEquals(\n          \"ConjunctionScorer\\n\" +\n              \"    MUST ConstantScoreScorer\\n\" +\n              \"    MUST MinShouldMatchSumScorer\\n\" +\n              \"            SHOULD TermScorer body:web\\n\" +\n              \"            SHOULD TermScorer body:crawler\\n\" +\n              \"            SHOULD TermScorer body:nutch\",\n              summary);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c9e07c6618087aa30ff83c3a54818165e76c3a8","date":1487684665,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQueryVisitSubscorers#testGetChildrenMinShouldMatchSumScorer().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQueryVisitSubscorers#testGetChildrenMinShouldMatchSumScorer().mjava","sourceNew":"  public void testGetChildrenMinShouldMatchSumScorer() throws IOException {\n    final BooleanQuery.Builder query = new BooleanQuery.Builder();\n    query.add(new TermQuery(new Term(F2, \"nutch\")), Occur.SHOULD);\n    query.add(new TermQuery(new Term(F2, \"web\")), Occur.SHOULD);\n    query.add(new TermQuery(new Term(F2, \"crawler\")), Occur.SHOULD);\n    query.setMinimumNumberShouldMatch(2);\n    query.add(new MatchAllDocsQuery(), Occur.MUST);\n    ScorerSummarizingCollector collector = new ScorerSummarizingCollector();\n    searcher.search(query.build(), collector);\n    assertEquals(1, collector.getNumHits());\n    assertFalse(collector.getSummaries().isEmpty());\n    for (String summary : collector.getSummaries()) {\n      assertEquals(\n          \"ConjunctionScorer\\n\" +\n          \"    MUST ConstantScoreScorer\\n\" +\n          \"    MUST MinShouldMatchSumScorer\\n\" +\n          \"            SHOULD TermScorer body:web\\n\" +\n          \"            SHOULD TermScorer body:crawler\\n\" +\n          \"            SHOULD TermScorer body:nutch\",\n              summary);\n    }\n  }\n\n","sourceOld":"  public void testGetChildrenMinShouldMatchSumScorer() throws IOException {\n    final BooleanQuery.Builder query = new BooleanQuery.Builder();\n    query.add(new TermQuery(new Term(F2, \"nutch\")), Occur.SHOULD);\n    query.add(new TermQuery(new Term(F2, \"web\")), Occur.SHOULD);\n    query.add(new TermQuery(new Term(F2, \"crawler\")), Occur.SHOULD);\n    query.setMinimumNumberShouldMatch(2);\n    query.add(new MatchAllDocsQuery(), Occur.MUST);\n    ScorerSummarizingCollector collector = new ScorerSummarizingCollector();\n    searcher.search(query.build(), collector);\n    assertEquals(1, collector.getNumHits());\n    assertFalse(collector.getSummaries().isEmpty());\n    for (String summary : collector.getSummaries()) {\n      assertEquals(\n          \"ConjunctionScorer\\n\" +\n          \"    MUST ConstantScoreScorer\\n\" +\n          \"    MUST MinShouldMatchSumScorer\\n\" +\n          \"            SHOULD TermScorer body:nutch\\n\" +\n          \"            SHOULD TermScorer body:crawler\\n\" +\n          \"            SHOULD TermScorer body:web\",\n          summary);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"24f3e9c0fc20b3107388ec853a6fbad9f891b461","date":1502359844,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQueryVisitSubscorers#testGetChildrenMinShouldMatchSumScorer().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQueryVisitSubscorers#testGetChildrenMinShouldMatchSumScorer().mjava","sourceNew":"  public void testGetChildrenMinShouldMatchSumScorer() throws IOException {\n    final BooleanQuery.Builder query = new BooleanQuery.Builder();\n    query.add(new TermQuery(new Term(F2, \"nutch\")), Occur.SHOULD);\n    query.add(new TermQuery(new Term(F2, \"web\")), Occur.SHOULD);\n    query.add(new TermQuery(new Term(F2, \"crawler\")), Occur.SHOULD);\n    query.setMinimumNumberShouldMatch(2);\n    query.add(new MatchAllDocsQuery(), Occur.MUST);\n    ScorerSummarizingCollector collector = new ScorerSummarizingCollector();\n    searcher.search(query.build(), collector);\n    assertEquals(1, collector.getNumHits());\n    assertFalse(collector.getSummaries().isEmpty());\n    for (String summary : collector.getSummaries()) {\n      assertEquals(\n          \"ConjunctionScorer\\n\" +\n          \"    MUST ConstantScoreScorer\\n\" +\n          \"    MUST MinShouldMatchSumScorer\\n\" +\n          \"            SHOULD TermScorer body:crawler\\n\" +\n          \"            SHOULD TermScorer body:web\\n\" +\n          \"            SHOULD TermScorer body:nutch\",\n              summary);\n    }\n  }\n\n","sourceOld":"  public void testGetChildrenMinShouldMatchSumScorer() throws IOException {\n    final BooleanQuery.Builder query = new BooleanQuery.Builder();\n    query.add(new TermQuery(new Term(F2, \"nutch\")), Occur.SHOULD);\n    query.add(new TermQuery(new Term(F2, \"web\")), Occur.SHOULD);\n    query.add(new TermQuery(new Term(F2, \"crawler\")), Occur.SHOULD);\n    query.setMinimumNumberShouldMatch(2);\n    query.add(new MatchAllDocsQuery(), Occur.MUST);\n    ScorerSummarizingCollector collector = new ScorerSummarizingCollector();\n    searcher.search(query.build(), collector);\n    assertEquals(1, collector.getNumHits());\n    assertFalse(collector.getSummaries().isEmpty());\n    for (String summary : collector.getSummaries()) {\n      assertEquals(\n          \"ConjunctionScorer\\n\" +\n          \"    MUST ConstantScoreScorer\\n\" +\n          \"    MUST MinShouldMatchSumScorer\\n\" +\n          \"            SHOULD TermScorer body:web\\n\" +\n          \"            SHOULD TermScorer body:crawler\\n\" +\n          \"            SHOULD TermScorer body:nutch\",\n              summary);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7d6ba405c7c8192661bdf7ce782181d12f3162a6","date":1502361392,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQueryVisitSubscorers#testGetChildrenMinShouldMatchSumScorer().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQueryVisitSubscorers#testGetChildrenMinShouldMatchSumScorer().mjava","sourceNew":"  public void testGetChildrenMinShouldMatchSumScorer() throws IOException {\n    final BooleanQuery.Builder query = new BooleanQuery.Builder();\n    query.add(new TermQuery(new Term(F2, \"nutch\")), Occur.SHOULD);\n    query.add(new TermQuery(new Term(F2, \"web\")), Occur.SHOULD);\n    query.add(new TermQuery(new Term(F2, \"crawler\")), Occur.SHOULD);\n    query.setMinimumNumberShouldMatch(2);\n    query.add(new MatchAllDocsQuery(), Occur.MUST);\n    ScorerSummarizingCollector collector = new ScorerSummarizingCollector();\n    searcher.search(query.build(), collector);\n    assertEquals(1, collector.getNumHits());\n    assertFalse(collector.getSummaries().isEmpty());\n    for (String summary : collector.getSummaries()) {\n      assertEquals(\n          \"ConjunctionScorer\\n\" +\n          \"    MUST ConstantScoreScorer\\n\" +\n          \"    MUST MinShouldMatchSumScorer\\n\" +\n          \"            SHOULD TermScorer body:crawler\\n\" +\n          \"            SHOULD TermScorer body:web\\n\" +\n          \"            SHOULD TermScorer body:nutch\",\n              summary);\n    }\n  }\n\n","sourceOld":"  public void testGetChildrenMinShouldMatchSumScorer() throws IOException {\n    final BooleanQuery.Builder query = new BooleanQuery.Builder();\n    query.add(new TermQuery(new Term(F2, \"nutch\")), Occur.SHOULD);\n    query.add(new TermQuery(new Term(F2, \"web\")), Occur.SHOULD);\n    query.add(new TermQuery(new Term(F2, \"crawler\")), Occur.SHOULD);\n    query.setMinimumNumberShouldMatch(2);\n    query.add(new MatchAllDocsQuery(), Occur.MUST);\n    ScorerSummarizingCollector collector = new ScorerSummarizingCollector();\n    searcher.search(query.build(), collector);\n    assertEquals(1, collector.getNumHits());\n    assertFalse(collector.getSummaries().isEmpty());\n    for (String summary : collector.getSummaries()) {\n      assertEquals(\n          \"ConjunctionScorer\\n\" +\n          \"    MUST ConstantScoreScorer\\n\" +\n          \"    MUST MinShouldMatchSumScorer\\n\" +\n          \"            SHOULD TermScorer body:web\\n\" +\n          \"            SHOULD TermScorer body:crawler\\n\" +\n          \"            SHOULD TermScorer body:nutch\",\n              summary);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"58884af1f68e9d61c217c753fbd6266d86a63b14","date":1502363401,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQueryVisitSubscorers#testGetChildrenMinShouldMatchSumScorer().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQueryVisitSubscorers#testGetChildrenMinShouldMatchSumScorer().mjava","sourceNew":"  public void testGetChildrenMinShouldMatchSumScorer() throws IOException {\n    final BooleanQuery.Builder query = new BooleanQuery.Builder();\n    query.add(new TermQuery(new Term(F2, \"nutch\")), Occur.SHOULD);\n    query.add(new TermQuery(new Term(F2, \"web\")), Occur.SHOULD);\n    query.add(new TermQuery(new Term(F2, \"crawler\")), Occur.SHOULD);\n    query.setMinimumNumberShouldMatch(2);\n    query.add(new MatchAllDocsQuery(), Occur.MUST);\n    ScorerSummarizingCollector collector = new ScorerSummarizingCollector();\n    searcher.search(query.build(), collector);\n    assertEquals(1, collector.getNumHits());\n    assertFalse(collector.getSummaries().isEmpty());\n    for (String summary : collector.getSummaries()) {\n      assertEquals(\n          \"ConjunctionScorer\\n\" +\n          \"    MUST ConstantScoreScorer\\n\" +\n          \"    MUST MinShouldMatchSumScorer\\n\" +\n          \"            SHOULD TermScorer body:crawler\\n\" +\n          \"            SHOULD TermScorer body:web\\n\" +\n          \"            SHOULD TermScorer body:nutch\",\n              summary);\n    }\n  }\n\n","sourceOld":"  public void testGetChildrenMinShouldMatchSumScorer() throws IOException {\n    final BooleanQuery.Builder query = new BooleanQuery.Builder();\n    query.add(new TermQuery(new Term(F2, \"nutch\")), Occur.SHOULD);\n    query.add(new TermQuery(new Term(F2, \"web\")), Occur.SHOULD);\n    query.add(new TermQuery(new Term(F2, \"crawler\")), Occur.SHOULD);\n    query.setMinimumNumberShouldMatch(2);\n    query.add(new MatchAllDocsQuery(), Occur.MUST);\n    ScorerSummarizingCollector collector = new ScorerSummarizingCollector();\n    searcher.search(query.build(), collector);\n    assertEquals(1, collector.getNumHits());\n    assertFalse(collector.getSummaries().isEmpty());\n    for (String summary : collector.getSummaries()) {\n      assertEquals(\n          \"ConjunctionScorer\\n\" +\n          \"    MUST ConstantScoreScorer\\n\" +\n          \"    MUST MinShouldMatchSumScorer\\n\" +\n          \"            SHOULD TermScorer body:web\\n\" +\n          \"            SHOULD TermScorer body:crawler\\n\" +\n          \"            SHOULD TermScorer body:nutch\",\n              summary);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be","date":1502692251,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQueryVisitSubscorers#testGetChildrenMinShouldMatchSumScorer().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQueryVisitSubscorers#testGetChildrenMinShouldMatchSumScorer().mjava","sourceNew":"  public void testGetChildrenMinShouldMatchSumScorer() throws IOException {\n    final BooleanQuery.Builder query = new BooleanQuery.Builder();\n    query.add(new TermQuery(new Term(F2, \"nutch\")), Occur.SHOULD);\n    query.add(new TermQuery(new Term(F2, \"web\")), Occur.SHOULD);\n    query.add(new TermQuery(new Term(F2, \"crawler\")), Occur.SHOULD);\n    query.setMinimumNumberShouldMatch(2);\n    query.add(new MatchAllDocsQuery(), Occur.MUST);\n    ScorerSummarizingCollector collector = new ScorerSummarizingCollector();\n    searcher.search(query.build(), collector);\n    assertEquals(1, collector.getNumHits());\n    assertFalse(collector.getSummaries().isEmpty());\n    for (String summary : collector.getSummaries()) {\n      assertEquals(\n          \"ConjunctionScorer\\n\" +\n          \"    MUST ConstantScoreScorer\\n\" +\n          \"    MUST MinShouldMatchSumScorer\\n\" +\n          \"            SHOULD TermScorer body:crawler\\n\" +\n          \"            SHOULD TermScorer body:web\\n\" +\n          \"            SHOULD TermScorer body:nutch\",\n              summary);\n    }\n  }\n\n","sourceOld":"  public void testGetChildrenMinShouldMatchSumScorer() throws IOException {\n    final BooleanQuery.Builder query = new BooleanQuery.Builder();\n    query.add(new TermQuery(new Term(F2, \"nutch\")), Occur.SHOULD);\n    query.add(new TermQuery(new Term(F2, \"web\")), Occur.SHOULD);\n    query.add(new TermQuery(new Term(F2, \"crawler\")), Occur.SHOULD);\n    query.setMinimumNumberShouldMatch(2);\n    query.add(new MatchAllDocsQuery(), Occur.MUST);\n    ScorerSummarizingCollector collector = new ScorerSummarizingCollector();\n    searcher.search(query.build(), collector);\n    assertEquals(1, collector.getNumHits());\n    assertFalse(collector.getSummaries().isEmpty());\n    for (String summary : collector.getSummaries()) {\n      assertEquals(\n          \"ConjunctionScorer\\n\" +\n          \"    MUST ConstantScoreScorer\\n\" +\n          \"    MUST MinShouldMatchSumScorer\\n\" +\n          \"            SHOULD TermScorer body:web\\n\" +\n          \"            SHOULD TermScorer body:crawler\\n\" +\n          \"            SHOULD TermScorer body:nutch\",\n              summary);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"251e6911800e3a02e1da3bfd4dc49a914aef9778":["1edabd582609f54032bad1c31dc5efe38070127e"],"a7f94ff172f40ff68a926d112e25b96bc38e5a27":["25f698887111a682424e759ba36083180899a1fd"],"24f3e9c0fc20b3107388ec853a6fbad9f891b461":["2c9e07c6618087aa30ff83c3a54818165e76c3a8"],"2c9e07c6618087aa30ff83c3a54818165e76c3a8":["d88f2d3d3107907144cec6455db31ccebd65475a"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747","c8a0e442f7b61f811680273b25da95994a724466"],"302d34f2c66e8d489ee13078305c330cbf67b226":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","dca67e06c96e95a8d9ef07418b6299bfd981523b"],"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["a7f94ff172f40ff68a926d112e25b96bc38e5a27"],"7d6ba405c7c8192661bdf7ce782181d12f3162a6":["2c9e07c6618087aa30ff83c3a54818165e76c3a8","24f3e9c0fc20b3107388ec853a6fbad9f891b461"],"58884af1f68e9d61c217c753fbd6266d86a63b14":["2c9e07c6618087aa30ff83c3a54818165e76c3a8","7d6ba405c7c8192661bdf7ce782181d12f3162a6"],"1edabd582609f54032bad1c31dc5efe38070127e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"dca67e06c96e95a8d9ef07418b6299bfd981523b":["c8a0e442f7b61f811680273b25da95994a724466"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be":["2c9e07c6618087aa30ff83c3a54818165e76c3a8","7d6ba405c7c8192661bdf7ce782181d12f3162a6"],"c8a0e442f7b61f811680273b25da95994a724466":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"d88f2d3d3107907144cec6455db31ccebd65475a":["26ae065817023d886f3de2bc162e9e1ad71c7a02"],"26ae065817023d886f3de2bc162e9e1ad71c7a02":["dca67e06c96e95a8d9ef07418b6299bfd981523b"],"25f698887111a682424e759ba36083180899a1fd":["251e6911800e3a02e1da3bfd4dc49a914aef9778"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7d6ba405c7c8192661bdf7ce782181d12f3162a6"]},"commit2Childs":{"251e6911800e3a02e1da3bfd4dc49a914aef9778":["25f698887111a682424e759ba36083180899a1fd"],"a7f94ff172f40ff68a926d112e25b96bc38e5a27":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"24f3e9c0fc20b3107388ec853a6fbad9f891b461":["7d6ba405c7c8192661bdf7ce782181d12f3162a6"],"2c9e07c6618087aa30ff83c3a54818165e76c3a8":["24f3e9c0fc20b3107388ec853a6fbad9f891b461","7d6ba405c7c8192661bdf7ce782181d12f3162a6","58884af1f68e9d61c217c753fbd6266d86a63b14","93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["302d34f2c66e8d489ee13078305c330cbf67b226"],"302d34f2c66e8d489ee13078305c330cbf67b226":[],"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","c8a0e442f7b61f811680273b25da95994a724466"],"7d6ba405c7c8192661bdf7ce782181d12f3162a6":["58884af1f68e9d61c217c753fbd6266d86a63b14","93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"58884af1f68e9d61c217c753fbd6266d86a63b14":[],"1edabd582609f54032bad1c31dc5efe38070127e":["251e6911800e3a02e1da3bfd4dc49a914aef9778"],"dca67e06c96e95a8d9ef07418b6299bfd981523b":["302d34f2c66e8d489ee13078305c330cbf67b226","26ae065817023d886f3de2bc162e9e1ad71c7a02"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1edabd582609f54032bad1c31dc5efe38070127e"],"93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be":[],"c8a0e442f7b61f811680273b25da95994a724466":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","dca67e06c96e95a8d9ef07418b6299bfd981523b"],"d88f2d3d3107907144cec6455db31ccebd65475a":["2c9e07c6618087aa30ff83c3a54818165e76c3a8"],"26ae065817023d886f3de2bc162e9e1ad71c7a02":["d88f2d3d3107907144cec6455db31ccebd65475a"],"25f698887111a682424e759ba36083180899a1fd":["a7f94ff172f40ff68a926d112e25b96bc38e5a27"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["302d34f2c66e8d489ee13078305c330cbf67b226","58884af1f68e9d61c217c753fbd6266d86a63b14","93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}