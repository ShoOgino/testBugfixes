{"path":"lucene/core/src/test/org/apache/lucene/search/spans/TestSpans#testNPESpanQuery().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestSpans#testNPESpanQuery().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestSpans#testNPESpanQuery().mjava","sourceNew":"  // LUCENE-1404\n  public void testNPESpanQuery() throws Throwable {\n    final Directory dir = newDirectory();\n    final IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n    // Add documents\n    addDoc(writer, \"1\", \"the big dogs went running to the market\");\n    addDoc(writer, \"2\", \"the cat chased the mouse, then the cat ate the mouse quickly\");\n    \n    // Commit\n    writer.close();\n\n    // Get searcher\n    final IndexReader reader = IndexReader.open(dir);\n    final IndexSearcher searcher = newSearcher(reader);\n\n    // Control (make sure docs indexed)\n    assertEquals(2, hitCount(searcher, \"the\"));\n    assertEquals(1, hitCount(searcher, \"cat\"));\n    assertEquals(1, hitCount(searcher, \"dogs\"));\n    assertEquals(0, hitCount(searcher, \"rabbit\"));\n\n    // This throws exception (it shouldn't)\n    assertEquals(1,\n                 searcher.search(createSpan(0, true,                                 \n                                            new SpanQuery[] {createSpan(4, false, \"chased\", \"cat\"),\n                                                             createSpan(\"ate\")}), 10).totalHits);\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1404\n  public void testNPESpanQuery() throws Throwable {\n    final Directory dir = newDirectory();\n    final IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n    // Add documents\n    addDoc(writer, \"1\", \"the big dogs went running to the market\");\n    addDoc(writer, \"2\", \"the cat chased the mouse, then the cat ate the mouse quickly\");\n    \n    // Commit\n    writer.close();\n\n    // Get searcher\n    final IndexReader reader = IndexReader.open(dir);\n    final IndexSearcher searcher = newSearcher(reader);\n\n    // Control (make sure docs indexed)\n    assertEquals(2, hitCount(searcher, \"the\"));\n    assertEquals(1, hitCount(searcher, \"cat\"));\n    assertEquals(1, hitCount(searcher, \"dogs\"));\n    assertEquals(0, hitCount(searcher, \"rabbit\"));\n\n    // This throws exception (it shouldn't)\n    assertEquals(1,\n                 searcher.search(createSpan(0, true,                                 \n                                            new SpanQuery[] {createSpan(4, false, \"chased\", \"cat\"),\n                                                             createSpan(\"ate\")}), 10).totalHits);\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestSpans#testNPESpanQuery().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestSpans#testNPESpanQuery().mjava","sourceNew":"  // LUCENE-1404\n  public void testNPESpanQuery() throws Throwable {\n    final Directory dir = newDirectory();\n    final IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n\n    // Add documents\n    addDoc(writer, \"1\", \"the big dogs went running to the market\");\n    addDoc(writer, \"2\", \"the cat chased the mouse, then the cat ate the mouse quickly\");\n    \n    // Commit\n    writer.close();\n\n    // Get searcher\n    final IndexReader reader = IndexReader.open(dir);\n    final IndexSearcher searcher = newSearcher(reader);\n\n    // Control (make sure docs indexed)\n    assertEquals(2, hitCount(searcher, \"the\"));\n    assertEquals(1, hitCount(searcher, \"cat\"));\n    assertEquals(1, hitCount(searcher, \"dogs\"));\n    assertEquals(0, hitCount(searcher, \"rabbit\"));\n\n    // This throws exception (it shouldn't)\n    assertEquals(1,\n                 searcher.search(createSpan(0, true,                                 \n                                            new SpanQuery[] {createSpan(4, false, \"chased\", \"cat\"),\n                                                             createSpan(\"ate\")}), 10).totalHits);\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1404\n  public void testNPESpanQuery() throws Throwable {\n    final Directory dir = newDirectory();\n    final IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n    // Add documents\n    addDoc(writer, \"1\", \"the big dogs went running to the market\");\n    addDoc(writer, \"2\", \"the cat chased the mouse, then the cat ate the mouse quickly\");\n    \n    // Commit\n    writer.close();\n\n    // Get searcher\n    final IndexReader reader = IndexReader.open(dir);\n    final IndexSearcher searcher = newSearcher(reader);\n\n    // Control (make sure docs indexed)\n    assertEquals(2, hitCount(searcher, \"the\"));\n    assertEquals(1, hitCount(searcher, \"cat\"));\n    assertEquals(1, hitCount(searcher, \"dogs\"));\n    assertEquals(0, hitCount(searcher, \"rabbit\"));\n\n    // This throws exception (it shouldn't)\n    assertEquals(1,\n                 searcher.search(createSpan(0, true,                                 \n                                            new SpanQuery[] {createSpan(4, false, \"chased\", \"cat\"),\n                                                             createSpan(\"ate\")}), 10).totalHits);\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","date":1338430031,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestSpans#testNPESpanQuery().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestSpans#testNPESpanQuery().mjava","sourceNew":"  // LUCENE-1404\n  public void testNPESpanQuery() throws Throwable {\n    final Directory dir = newDirectory();\n    final IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n\n    // Add documents\n    addDoc(writer, \"1\", \"the big dogs went running to the market\");\n    addDoc(writer, \"2\", \"the cat chased the mouse, then the cat ate the mouse quickly\");\n    \n    // Commit\n    writer.close();\n\n    // Get searcher\n    final IndexReader reader = DirectoryReader.open(dir);\n    final IndexSearcher searcher = newSearcher(reader);\n\n    // Control (make sure docs indexed)\n    assertEquals(2, hitCount(searcher, \"the\"));\n    assertEquals(1, hitCount(searcher, \"cat\"));\n    assertEquals(1, hitCount(searcher, \"dogs\"));\n    assertEquals(0, hitCount(searcher, \"rabbit\"));\n\n    // This throws exception (it shouldn't)\n    assertEquals(1,\n                 searcher.search(createSpan(0, true,                                 \n                                            new SpanQuery[] {createSpan(4, false, \"chased\", \"cat\"),\n                                                             createSpan(\"ate\")}), 10).totalHits);\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1404\n  public void testNPESpanQuery() throws Throwable {\n    final Directory dir = newDirectory();\n    final IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n\n    // Add documents\n    addDoc(writer, \"1\", \"the big dogs went running to the market\");\n    addDoc(writer, \"2\", \"the cat chased the mouse, then the cat ate the mouse quickly\");\n    \n    // Commit\n    writer.close();\n\n    // Get searcher\n    final IndexReader reader = IndexReader.open(dir);\n    final IndexSearcher searcher = newSearcher(reader);\n\n    // Control (make sure docs indexed)\n    assertEquals(2, hitCount(searcher, \"the\"));\n    assertEquals(1, hitCount(searcher, \"cat\"));\n    assertEquals(1, hitCount(searcher, \"dogs\"));\n    assertEquals(0, hitCount(searcher, \"rabbit\"));\n\n    // This throws exception (it shouldn't)\n    assertEquals(1,\n                 searcher.search(createSpan(0, true,                                 \n                                            new SpanQuery[] {createSpan(4, false, \"chased\", \"cat\"),\n                                                             createSpan(\"ate\")}), 10).totalHits);\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestSpans#testNPESpanQuery().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestSpans#testNPESpanQuery().mjava","sourceNew":"  // LUCENE-1404\n  public void testNPESpanQuery() throws Throwable {\n    final Directory dir = newDirectory();\n    final IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n\n    // Add documents\n    addDoc(writer, \"1\", \"the big dogs went running to the market\");\n    addDoc(writer, \"2\", \"the cat chased the mouse, then the cat ate the mouse quickly\");\n    \n    // Commit\n    writer.shutdown();\n\n    // Get searcher\n    final IndexReader reader = DirectoryReader.open(dir);\n    final IndexSearcher searcher = newSearcher(reader);\n\n    // Control (make sure docs indexed)\n    assertEquals(2, hitCount(searcher, \"the\"));\n    assertEquals(1, hitCount(searcher, \"cat\"));\n    assertEquals(1, hitCount(searcher, \"dogs\"));\n    assertEquals(0, hitCount(searcher, \"rabbit\"));\n\n    // This throws exception (it shouldn't)\n    assertEquals(1,\n                 searcher.search(createSpan(0, true,                                 \n                                            new SpanQuery[] {createSpan(4, false, \"chased\", \"cat\"),\n                                                             createSpan(\"ate\")}), 10).totalHits);\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1404\n  public void testNPESpanQuery() throws Throwable {\n    final Directory dir = newDirectory();\n    final IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n\n    // Add documents\n    addDoc(writer, \"1\", \"the big dogs went running to the market\");\n    addDoc(writer, \"2\", \"the cat chased the mouse, then the cat ate the mouse quickly\");\n    \n    // Commit\n    writer.close();\n\n    // Get searcher\n    final IndexReader reader = DirectoryReader.open(dir);\n    final IndexSearcher searcher = newSearcher(reader);\n\n    // Control (make sure docs indexed)\n    assertEquals(2, hitCount(searcher, \"the\"));\n    assertEquals(1, hitCount(searcher, \"cat\"));\n    assertEquals(1, hitCount(searcher, \"dogs\"));\n    assertEquals(0, hitCount(searcher, \"rabbit\"));\n\n    // This throws exception (it shouldn't)\n    assertEquals(1,\n                 searcher.search(createSpan(0, true,                                 \n                                            new SpanQuery[] {createSpan(4, false, \"chased\", \"cat\"),\n                                                             createSpan(\"ate\")}), 10).totalHits);\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestSpans#testNPESpanQuery().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestSpans#testNPESpanQuery().mjava","sourceNew":"  // LUCENE-1404\n  public void testNPESpanQuery() throws Throwable {\n    final Directory dir = newDirectory();\n    final IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(new MockAnalyzer(random())));\n\n    // Add documents\n    addDoc(writer, \"1\", \"the big dogs went running to the market\");\n    addDoc(writer, \"2\", \"the cat chased the mouse, then the cat ate the mouse quickly\");\n    \n    // Commit\n    writer.close();\n\n    // Get searcher\n    final IndexReader reader = DirectoryReader.open(dir);\n    final IndexSearcher searcher = newSearcher(reader);\n\n    // Control (make sure docs indexed)\n    assertEquals(2, hitCount(searcher, \"the\"));\n    assertEquals(1, hitCount(searcher, \"cat\"));\n    assertEquals(1, hitCount(searcher, \"dogs\"));\n    assertEquals(0, hitCount(searcher, \"rabbit\"));\n\n    // This throws exception (it shouldn't)\n    assertEquals(1,\n                 searcher.search(createSpan(0, true,                                 \n                                            new SpanQuery[] {createSpan(4, false, \"chased\", \"cat\"),\n                                                             createSpan(\"ate\")}), 10).totalHits);\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1404\n  public void testNPESpanQuery() throws Throwable {\n    final Directory dir = newDirectory();\n    final IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n\n    // Add documents\n    addDoc(writer, \"1\", \"the big dogs went running to the market\");\n    addDoc(writer, \"2\", \"the cat chased the mouse, then the cat ate the mouse quickly\");\n    \n    // Commit\n    writer.shutdown();\n\n    // Get searcher\n    final IndexReader reader = DirectoryReader.open(dir);\n    final IndexSearcher searcher = newSearcher(reader);\n\n    // Control (make sure docs indexed)\n    assertEquals(2, hitCount(searcher, \"the\"));\n    assertEquals(1, hitCount(searcher, \"cat\"));\n    assertEquals(1, hitCount(searcher, \"dogs\"));\n    assertEquals(0, hitCount(searcher, \"rabbit\"));\n\n    // This throws exception (it shouldn't)\n    assertEquals(1,\n                 searcher.search(createSpan(0, true,                                 \n                                            new SpanQuery[] {createSpan(4, false, \"chased\", \"cat\"),\n                                                             createSpan(\"ate\")}), 10).totalHits);\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83788ad129a5154d5c6562c4e8ce3db48793aada","date":1532961485,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestSpans#testNPESpanQuery().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestSpans#testNPESpanQuery().mjava","sourceNew":"  // LUCENE-1404\n  public void testNPESpanQuery() throws Throwable {\n    final Directory dir = newDirectory();\n    final IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(new MockAnalyzer(random())));\n\n    // Add documents\n    addDoc(writer, \"1\", \"the big dogs went running to the market\");\n    addDoc(writer, \"2\", \"the cat chased the mouse, then the cat ate the mouse quickly\");\n    \n    // Commit\n    writer.close();\n\n    // Get searcher\n    final IndexReader reader = DirectoryReader.open(dir);\n    final IndexSearcher searcher = newSearcher(reader);\n\n    // Control (make sure docs indexed)\n    assertEquals(2, hitCount(searcher, \"the\"));\n    assertEquals(1, hitCount(searcher, \"cat\"));\n    assertEquals(1, hitCount(searcher, \"dogs\"));\n    assertEquals(0, hitCount(searcher, \"rabbit\"));\n\n    // This throws exception (it shouldn't)\n    assertEquals(1,\n                 searcher.search(createSpan(0, true,                                 \n                                            new SpanQuery[] {createSpan(4, false, \"chased\", \"cat\"),\n                                                             createSpan(\"ate\")}), 10).totalHits.value);\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1404\n  public void testNPESpanQuery() throws Throwable {\n    final Directory dir = newDirectory();\n    final IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(new MockAnalyzer(random())));\n\n    // Add documents\n    addDoc(writer, \"1\", \"the big dogs went running to the market\");\n    addDoc(writer, \"2\", \"the cat chased the mouse, then the cat ate the mouse quickly\");\n    \n    // Commit\n    writer.close();\n\n    // Get searcher\n    final IndexReader reader = DirectoryReader.open(dir);\n    final IndexSearcher searcher = newSearcher(reader);\n\n    // Control (make sure docs indexed)\n    assertEquals(2, hitCount(searcher, \"the\"));\n    assertEquals(1, hitCount(searcher, \"cat\"));\n    assertEquals(1, hitCount(searcher, \"dogs\"));\n    assertEquals(0, hitCount(searcher, \"rabbit\"));\n\n    // This throws exception (it shouldn't)\n    assertEquals(1,\n                 searcher.search(createSpan(0, true,                                 \n                                            new SpanQuery[] {createSpan(4, false, \"chased\", \"cat\"),\n                                                             createSpan(\"ate\")}), 10).totalHits);\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["83788ad129a5154d5c6562c4e8ce3db48793aada"]},"commit2Childs":{"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["83788ad129a5154d5c6562c4e8ce3db48793aada"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}