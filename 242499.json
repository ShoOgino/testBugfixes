{"path":"solr/core/src/java/org/apache/solr/cloud/DeleteAliasCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","commits":[{"id":"66e0b82bd39567aa2bf534e5282d05fb4a4a2c76","date":1471585465,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/DeleteAliasCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#deleteAlias(Aliases,ZkNodeProps).mjava","sourceNew":"  @Override\n  public void call(ClusterState state, ZkNodeProps message, NamedList results) throws Exception {\n    String aliasName = message.getStr(NAME);\n\n    Map<String,Map<String,String>> newAliasesMap = new HashMap<>();\n    Map<String,String> newCollectionAliasesMap = new HashMap<>();\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    newCollectionAliasesMap.putAll(zkStateReader.getAliases().getCollectionAliasMap());\n    newCollectionAliasesMap.remove(aliasName);\n    newAliasesMap.put(\"collection\", newCollectionAliasesMap);\n    Aliases newAliases = new Aliases(newAliasesMap);\n    byte[] jsonBytes = null;\n    if (newAliases.collectionAliasSize() > 0) { // only sub map right now\n      jsonBytes  = Utils.toJSON(newAliases.getAliasMap());\n    }\n    try {\n      zkStateReader.getZkClient().setData(ZkStateReader.ALIASES,\n          jsonBytes, true);\n      checkForAliasAbsence(aliasName);\n      // some fudge for other nodes\n      Thread.sleep(100);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    } catch (InterruptedException e) {\n      log.warn(\"\", e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    }\n\n  }\n\n","sourceOld":"  private void deleteAlias(Aliases aliases, ZkNodeProps message) {\n    String aliasName = message.getStr(NAME);\n\n    Map<String,Map<String,String>> newAliasesMap = new HashMap<>();\n    Map<String,String> newCollectionAliasesMap = new HashMap<>();\n    newCollectionAliasesMap.putAll(aliases.getCollectionAliasMap());\n    newCollectionAliasesMap.remove(aliasName);\n    newAliasesMap.put(\"collection\", newCollectionAliasesMap);\n    Aliases newAliases = new Aliases(newAliasesMap);\n    byte[] jsonBytes = null;\n    if (newAliases.collectionAliasSize() > 0) { // only sub map right now\n      jsonBytes  = Utils.toJSON(newAliases.getAliasMap());\n    }\n    try {\n      zkStateReader.getZkClient().setData(ZkStateReader.ALIASES,\n          jsonBytes, true);\n      checkForAliasAbsence(aliasName);\n      // some fudge for other nodes\n      Thread.sleep(100);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new SolrException(ErrorCode.SERVER_ERROR, e);\n    } catch (InterruptedException e) {\n      log.warn(\"\", e);\n      throw new SolrException(ErrorCode.SERVER_ERROR, e);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"403d05f7f8d69b65659157eff1bc1d2717f04c66","date":1471692961,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/DeleteAliasCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#deleteAlias(Aliases,ZkNodeProps).mjava","sourceNew":"  @Override\n  public void call(ClusterState state, ZkNodeProps message, NamedList results) throws Exception {\n    String aliasName = message.getStr(NAME);\n\n    Map<String,Map<String,String>> newAliasesMap = new HashMap<>();\n    Map<String,String> newCollectionAliasesMap = new HashMap<>();\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    newCollectionAliasesMap.putAll(zkStateReader.getAliases().getCollectionAliasMap());\n    newCollectionAliasesMap.remove(aliasName);\n    newAliasesMap.put(\"collection\", newCollectionAliasesMap);\n    Aliases newAliases = new Aliases(newAliasesMap);\n    byte[] jsonBytes = null;\n    if (newAliases.collectionAliasSize() > 0) { // only sub map right now\n      jsonBytes  = Utils.toJSON(newAliases.getAliasMap());\n    }\n    try {\n      zkStateReader.getZkClient().setData(ZkStateReader.ALIASES,\n          jsonBytes, true);\n      checkForAliasAbsence(aliasName);\n      // some fudge for other nodes\n      Thread.sleep(100);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    } catch (InterruptedException e) {\n      log.warn(\"\", e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    }\n\n  }\n\n","sourceOld":"  private void deleteAlias(Aliases aliases, ZkNodeProps message) {\n    String aliasName = message.getStr(NAME);\n\n    Map<String,Map<String,String>> newAliasesMap = new HashMap<>();\n    Map<String,String> newCollectionAliasesMap = new HashMap<>();\n    newCollectionAliasesMap.putAll(aliases.getCollectionAliasMap());\n    newCollectionAliasesMap.remove(aliasName);\n    newAliasesMap.put(\"collection\", newCollectionAliasesMap);\n    Aliases newAliases = new Aliases(newAliasesMap);\n    byte[] jsonBytes = null;\n    if (newAliases.collectionAliasSize() > 0) { // only sub map right now\n      jsonBytes  = Utils.toJSON(newAliases.getAliasMap());\n    }\n    try {\n      zkStateReader.getZkClient().setData(ZkStateReader.ALIASES,\n          jsonBytes, true);\n      checkForAliasAbsence(aliasName);\n      // some fudge for other nodes\n      Thread.sleep(100);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new SolrException(ErrorCode.SERVER_ERROR, e);\n    } catch (InterruptedException e) {\n      log.warn(\"\", e);\n      throw new SolrException(ErrorCode.SERVER_ERROR, e);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/DeleteAliasCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void call(ClusterState state, ZkNodeProps message, NamedList results) throws Exception {\n    String aliasName = message.getStr(NAME);\n\n    Map<String,Map<String,String>> newAliasesMap = new HashMap<>();\n    Map<String,String> newCollectionAliasesMap = new HashMap<>();\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    newCollectionAliasesMap.putAll(zkStateReader.getAliases().getCollectionAliasMap());\n    newCollectionAliasesMap.remove(aliasName);\n    newAliasesMap.put(\"collection\", newCollectionAliasesMap);\n    Aliases newAliases = new Aliases(newAliasesMap);\n    byte[] jsonBytes = null;\n    if (newAliases.collectionAliasSize() > 0) { // only sub map right now\n      jsonBytes  = Utils.toJSON(newAliases.getAliasMap());\n    }\n    try {\n      zkStateReader.getZkClient().setData(ZkStateReader.ALIASES,\n          jsonBytes, true);\n      checkForAliasAbsence(aliasName);\n      // some fudge for other nodes\n      Thread.sleep(100);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    } catch (InterruptedException e) {\n      log.warn(\"\", e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6b824daa61db3f30b91a22213d6c04e1fa2e2b06","date":1508385744,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/DeleteAliasCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/DeleteAliasCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  @Override\n  public void call(ClusterState state, ZkNodeProps message, NamedList results) throws Exception {\n    String aliasName = message.getStr(NAME);\n\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    byte[] jsonBytes = zkStateReader.getAliases().cloneWithCollectionAlias(aliasName, null).toJSON();\n    try {\n      zkStateReader.getZkClient().setData(ZkStateReader.ALIASES, jsonBytes, true);\n\n      checkForAliasAbsence(aliasName);\n      // some fudge for other nodes\n      Thread.sleep(100);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    } catch (InterruptedException e) {\n      log.warn(\"\", e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    }\n\n  }\n\n","sourceOld":"  @Override\n  public void call(ClusterState state, ZkNodeProps message, NamedList results) throws Exception {\n    String aliasName = message.getStr(NAME);\n\n    Map<String,Map<String,String>> newAliasesMap = new HashMap<>();\n    Map<String,String> newCollectionAliasesMap = new HashMap<>();\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    newCollectionAliasesMap.putAll(zkStateReader.getAliases().getCollectionAliasMap());\n    newCollectionAliasesMap.remove(aliasName);\n    newAliasesMap.put(\"collection\", newCollectionAliasesMap);\n    Aliases newAliases = new Aliases(newAliasesMap);\n    byte[] jsonBytes = null;\n    if (newAliases.collectionAliasSize() > 0) { // only sub map right now\n      jsonBytes  = Utils.toJSON(newAliases.getAliasMap());\n    }\n    try {\n      zkStateReader.getZkClient().setData(ZkStateReader.ALIASES,\n          jsonBytes, true);\n      checkForAliasAbsence(aliasName);\n      // some fudge for other nodes\n      Thread.sleep(100);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    } catch (InterruptedException e) {\n      log.warn(\"\", e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"215e40821821b2df2e69355e208532c05ef095a5","date":1510858642,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/DeleteAliasCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/DeleteAliasCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  @Override\n  public void call(ClusterState state, ZkNodeProps message, NamedList results) throws Exception {\n    String aliasName = message.getStr(NAME);\n\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    zkStateReader.aliasesHolder.applyModificationAndExportToZk(a -> a.cloneWithCollectionAlias(aliasName, null));\n  }\n\n","sourceOld":"  @Override\n  public void call(ClusterState state, ZkNodeProps message, NamedList results) throws Exception {\n    String aliasName = message.getStr(NAME);\n\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    byte[] jsonBytes = zkStateReader.getAliases().cloneWithCollectionAlias(aliasName, null).toJSON();\n    try {\n      zkStateReader.getZkClient().setData(ZkStateReader.ALIASES, jsonBytes, true);\n\n      checkForAliasAbsence(aliasName);\n      // some fudge for other nodes\n      Thread.sleep(100);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    } catch (InterruptedException e) {\n      log.warn(\"\", e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6146c07c0dee1ae1e42926167acd127fed5ef59d","date":1516129420,"type":5,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/DeleteAliasCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/DeleteAliasCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  @Override\n  public void call(ClusterState state, ZkNodeProps message, NamedList results) throws Exception {\n    String aliasName = message.getStr(NAME);\n\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    zkStateReader.aliasesHolder.applyModificationAndExportToZk(a -> a.cloneWithCollectionAlias(aliasName, null));\n  }\n\n","sourceOld":"  @Override\n  public void call(ClusterState state, ZkNodeProps message, NamedList results) throws Exception {\n    String aliasName = message.getStr(NAME);\n\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    zkStateReader.aliasesHolder.applyModificationAndExportToZk(a -> a.cloneWithCollectionAlias(aliasName, null));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/DeleteAliasCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/DeleteAliasCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  @Override\n  public void call(ClusterState state, ZkNodeProps message, NamedList results) throws Exception {\n    String aliasName = message.getStr(NAME);\n\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    zkStateReader.aliasesHolder.applyModificationAndExportToZk(a -> a.cloneWithCollectionAlias(aliasName, null));\n  }\n\n","sourceOld":"  @Override\n  public void call(ClusterState state, ZkNodeProps message, NamedList results) throws Exception {\n    String aliasName = message.getStr(NAME);\n\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    zkStateReader.aliasesHolder.applyModificationAndExportToZk(a -> a.cloneWithCollectionAlias(aliasName, null));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["215e40821821b2df2e69355e208532c05ef095a5","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"215e40821821b2df2e69355e208532c05ef095a5":["6b824daa61db3f30b91a22213d6c04e1fa2e2b06"],"6b824daa61db3f30b91a22213d6c04e1fa2e2b06":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"403d05f7f8d69b65659157eff1bc1d2717f04c66":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","66e0b82bd39567aa2bf534e5282d05fb4a4a2c76"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"66e0b82bd39567aa2bf534e5282d05fb4a4a2c76":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["215e40821821b2df2e69355e208532c05ef095a5"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","403d05f7f8d69b65659157eff1bc1d2717f04c66"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b94236357aaa22b76c10629851fe4e376e0cea82"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"215e40821821b2df2e69355e208532c05ef095a5":["b94236357aaa22b76c10629851fe4e376e0cea82","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"6b824daa61db3f30b91a22213d6c04e1fa2e2b06":["215e40821821b2df2e69355e208532c05ef095a5"],"403d05f7f8d69b65659157eff1bc1d2717f04c66":["6b824daa61db3f30b91a22213d6c04e1fa2e2b06","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["403d05f7f8d69b65659157eff1bc1d2717f04c66","66e0b82bd39567aa2bf534e5282d05fb4a4a2c76","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"66e0b82bd39567aa2bf534e5282d05fb4a4a2c76":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["b94236357aaa22b76c10629851fe4e376e0cea82"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}