{"path":"backwards/src/test/org/apache/lucene/search/QueryUtils#makeEmptyIndex(int).mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/test/org/apache/lucene/search/QueryUtils#makeEmptyIndex(int).mjava","pathOld":"/dev/null","sourceNew":"  private static RAMDirectory makeEmptyIndex(final int numDeletedDocs) \n    throws IOException {\n      RAMDirectory d = new RAMDirectory();\n      IndexWriter w = new IndexWriter(d, new WhitespaceAnalyzer(), true,\n                                      MaxFieldLength.LIMITED);\n      for (int i = 0; i < numDeletedDocs; i++) {\n        w.addDocument(new Document());\n      }\n      w.commit();\n      w.deleteDocuments( new MatchAllDocsQuery() );\n      w.commit();\n\n      if (0 < numDeletedDocs)\n        Assert.assertTrue(\"writer has no deletions\", w.hasDeletions());\n\n      Assert.assertEquals(\"writer is missing some deleted docs\", \n                          numDeletedDocs, w.maxDoc());\n      Assert.assertEquals(\"writer has non-deleted docs\", \n                          0, w.numDocs());\n      w.close();\n      IndexReader r = IndexReader.open(d, true);\n      Assert.assertEquals(\"reader has wrong number of deleted docs\", \n                          numDeletedDocs, r.numDeletedDocs());\n      r.close();\n      return d;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/search/QueryUtils#makeEmptyIndex(int).mjava","pathOld":"backwards/src/test/org/apache/lucene/search/QueryUtils#makeEmptyIndex(int).mjava","sourceNew":"  private static RAMDirectory makeEmptyIndex(final int numDeletedDocs) \n    throws IOException {\n      RAMDirectory d = new RAMDirectory();\n      IndexWriter w = new IndexWriter(d, new WhitespaceAnalyzer(), true,\n                                      MaxFieldLength.LIMITED);\n      for (int i = 0; i < numDeletedDocs; i++) {\n        w.addDocument(new Document());\n      }\n      w.commit();\n      w.deleteDocuments( new MatchAllDocsQuery() );\n      w.commit();\n\n      if (0 < numDeletedDocs)\n        Assert.assertTrue(\"writer has no deletions\", w.hasDeletions());\n\n      Assert.assertEquals(\"writer is missing some deleted docs\", \n                          numDeletedDocs, w.maxDoc());\n      Assert.assertEquals(\"writer has non-deleted docs\", \n                          0, w.numDocs());\n      w.close();\n      IndexReader r = IndexReader.open(d, true);\n      Assert.assertEquals(\"reader has wrong number of deleted docs\", \n                          numDeletedDocs, r.numDeletedDocs());\n      r.close();\n      return d;\n  }\n\n","sourceOld":"  private static RAMDirectory makeEmptyIndex(final int numDeletedDocs) \n    throws IOException {\n      RAMDirectory d = new RAMDirectory();\n      IndexWriter w = new IndexWriter(d, new WhitespaceAnalyzer(), true,\n                                      MaxFieldLength.LIMITED);\n      for (int i = 0; i < numDeletedDocs; i++) {\n        w.addDocument(new Document());\n      }\n      w.commit();\n      w.deleteDocuments( new MatchAllDocsQuery() );\n      w.commit();\n\n      if (0 < numDeletedDocs)\n        Assert.assertTrue(\"writer has no deletions\", w.hasDeletions());\n\n      Assert.assertEquals(\"writer is missing some deleted docs\", \n                          numDeletedDocs, w.maxDoc());\n      Assert.assertEquals(\"writer has non-deleted docs\", \n                          0, w.numDocs());\n      w.close();\n      IndexReader r = IndexReader.open(d, true);\n      Assert.assertEquals(\"reader has wrong number of deleted docs\", \n                          numDeletedDocs, r.numDeletedDocs());\n      r.close();\n      return d;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}