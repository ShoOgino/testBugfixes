{"path":"lucene/core/src/java/org/apache/lucene/util/StringHelper#randomId().mjava","commits":[{"id":"e3cc329405ce41b8ef462b4cd30611eca1567620","date":1408661910,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/StringHelper#randomId().mjava","pathOld":"/dev/null","sourceNew":"  /** Generates a non-cryptographic globally unique id. */\n  public static String randomId() {\n\n    // NOTE: we don't use Java's UUID.randomUUID() implementation here because:\n    //\n    //   * It's overkill for our usage: it tries to be cryptographically\n    //     secure, whereas for this use we don't care if someone can\n    //     guess the IDs.\n    //\n    //   * It uses SecureRandom, which on Linux can easily take a long time\n    //     (I saw ~ 10 seconds just running a Lucene test) when entropy\n    //     harvesting is falling behind.\n    //\n    //   * It loses a few (6) bits to version and variant and it's not clear\n    //     what impact that has on the period, whereas the simple ++ (mod 2^128)\n    //     we use here is guaranteed to have the full period.\n\n    String id;\n    synchronized(idLock) {\n      id = nextId.toString(16);\n      nextId = nextId.add(BigInteger.ONE).and(idMask);\n    }\n\n    assert id.length() <= 32: \"id=\" + id;\n    id = idPad.substring(id.length()) + id;\n\n    return id;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["5f6bd27530a2846413fe2d00030493c0e2d3a072"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a5d957b3a23cce91c77a2c9971ecf0c9f99dd503","date":1411708843,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/StringHelper#randomId().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/StringHelper#randomId().mjava","sourceNew":"  /** Generates a non-cryptographic globally unique id. */\n  public static byte[] randomId() {\n\n    // NOTE: we don't use Java's UUID.randomUUID() implementation here because:\n    //\n    //   * It's overkill for our usage: it tries to be cryptographically\n    //     secure, whereas for this use we don't care if someone can\n    //     guess the IDs.\n    //\n    //   * It uses SecureRandom, which on Linux can easily take a long time\n    //     (I saw ~ 10 seconds just running a Lucene test) when entropy\n    //     harvesting is falling behind.\n    //\n    //   * It loses a few (6) bits to version and variant and it's not clear\n    //     what impact that has on the period, whereas the simple ++ (mod 2^128)\n    //     we use here is guaranteed to have the full period.\n\n    byte bits[];\n    synchronized(idLock) {\n      bits = nextId.toByteArray();\n      nextId = nextId.add(BigInteger.ONE).and(mask128);\n    }\n    \n    // toByteArray() always returns a sign bit, so it may require an extra byte (always zero)\n    if (bits.length > ID_LENGTH) {\n      assert bits.length == ID_LENGTH + 1;\n      assert bits[0] == 0;\n      return Arrays.copyOfRange(bits, 1, bits.length);\n    } else {\n      byte[] result = new byte[ID_LENGTH];\n      System.arraycopy(bits, 0, result, result.length - bits.length, bits.length);\n      return result;\n    }\n  }\n\n","sourceOld":"  /** Generates a non-cryptographic globally unique id. */\n  public static String randomId() {\n\n    // NOTE: we don't use Java's UUID.randomUUID() implementation here because:\n    //\n    //   * It's overkill for our usage: it tries to be cryptographically\n    //     secure, whereas for this use we don't care if someone can\n    //     guess the IDs.\n    //\n    //   * It uses SecureRandom, which on Linux can easily take a long time\n    //     (I saw ~ 10 seconds just running a Lucene test) when entropy\n    //     harvesting is falling behind.\n    //\n    //   * It loses a few (6) bits to version and variant and it's not clear\n    //     what impact that has on the period, whereas the simple ++ (mod 2^128)\n    //     we use here is guaranteed to have the full period.\n\n    String id;\n    synchronized(idLock) {\n      id = nextId.toString(16);\n      nextId = nextId.add(BigInteger.ONE).and(idMask);\n    }\n\n    assert id.length() <= 32: \"id=\" + id;\n    id = idPad.substring(id.length()) + id;\n\n    return id;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5f6bd27530a2846413fe2d00030493c0e2d3a072","date":1411811855,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/StringHelper#randomId().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/StringHelper#randomId().mjava","sourceNew":"  /** Generates a non-cryptographic globally unique id. */\n  public static byte[] randomId() {\n\n    // NOTE: we don't use Java's UUID.randomUUID() implementation here because:\n    //\n    //   * It's overkill for our usage: it tries to be cryptographically\n    //     secure, whereas for this use we don't care if someone can\n    //     guess the IDs.\n    //\n    //   * It uses SecureRandom, which on Linux can easily take a long time\n    //     (I saw ~ 10 seconds just running a Lucene test) when entropy\n    //     harvesting is falling behind.\n    //\n    //   * It loses a few (6) bits to version and variant and it's not clear\n    //     what impact that has on the period, whereas the simple ++ (mod 2^128)\n    //     we use here is guaranteed to have the full period.\n\n    byte bits[];\n    synchronized(idLock) {\n      bits = nextId.toByteArray();\n      nextId = nextId.add(BigInteger.ONE).and(mask128);\n    }\n    \n    // toByteArray() always returns a sign bit, so it may require an extra byte (always zero)\n    if (bits.length > ID_LENGTH) {\n      assert bits.length == ID_LENGTH + 1;\n      assert bits[0] == 0;\n      return Arrays.copyOfRange(bits, 1, bits.length);\n    } else {\n      byte[] result = new byte[ID_LENGTH];\n      System.arraycopy(bits, 0, result, result.length - bits.length, bits.length);\n      return result;\n    }\n  }\n\n","sourceOld":"  /** Generates a non-cryptographic globally unique id. */\n  public static String randomId() {\n\n    // NOTE: we don't use Java's UUID.randomUUID() implementation here because:\n    //\n    //   * It's overkill for our usage: it tries to be cryptographically\n    //     secure, whereas for this use we don't care if someone can\n    //     guess the IDs.\n    //\n    //   * It uses SecureRandom, which on Linux can easily take a long time\n    //     (I saw ~ 10 seconds just running a Lucene test) when entropy\n    //     harvesting is falling behind.\n    //\n    //   * It loses a few (6) bits to version and variant and it's not clear\n    //     what impact that has on the period, whereas the simple ++ (mod 2^128)\n    //     we use here is guaranteed to have the full period.\n\n    String id;\n    synchronized(idLock) {\n      id = nextId.toString(16);\n      nextId = nextId.add(BigInteger.ONE).and(idMask);\n    }\n\n    assert id.length() <= 32: \"id=\" + id;\n    id = idPad.substring(id.length()) + id;\n\n    return id;\n  }\n\n","bugFix":["e3cc329405ce41b8ef462b4cd30611eca1567620"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9798d0818e7a880546802b509792d3f3d57babd2","date":1528358901,"type":3,"author":"Nhat Nguyen","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/StringHelper#randomId().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/StringHelper#randomId().mjava","sourceNew":"  /** Generates a non-cryptographic globally unique id. */\n  public static byte[] randomId() {\n\n    // NOTE: we don't use Java's UUID.randomUUID() implementation here because:\n    //\n    //   * It's overkill for our usage: it tries to be cryptographically\n    //     secure, whereas for this use we don't care if someone can\n    //     guess the IDs.\n    //\n    //   * It uses SecureRandom, which on Linux can easily take a long time\n    //     (I saw ~ 10 seconds just running a Lucene test) when entropy\n    //     harvesting is falling behind.\n    //\n    //   * It loses a few (6) bits to version and variant and it's not clear\n    //     what impact that has on the period, whereas the simple ++ (mod 2^128)\n    //     we use here is guaranteed to have the full period.\n\n    byte bits[];\n    synchronized(idLock) {\n      bits = nextId.toByteArray();\n      nextId = nextId.add(BigInteger.ONE).and(mask128);\n    }\n    \n    // toByteArray() always returns a sign bit, so it may require an extra byte (always zero)\n    if (bits.length > ID_LENGTH) {\n      assert bits.length == ID_LENGTH + 1;\n      assert bits[0] == 0;\n      return ArrayUtil.copyOfSubArray(bits, 1, bits.length);\n    } else {\n      byte[] result = new byte[ID_LENGTH];\n      System.arraycopy(bits, 0, result, result.length - bits.length, bits.length);\n      return result;\n    }\n  }\n\n","sourceOld":"  /** Generates a non-cryptographic globally unique id. */\n  public static byte[] randomId() {\n\n    // NOTE: we don't use Java's UUID.randomUUID() implementation here because:\n    //\n    //   * It's overkill for our usage: it tries to be cryptographically\n    //     secure, whereas for this use we don't care if someone can\n    //     guess the IDs.\n    //\n    //   * It uses SecureRandom, which on Linux can easily take a long time\n    //     (I saw ~ 10 seconds just running a Lucene test) when entropy\n    //     harvesting is falling behind.\n    //\n    //   * It loses a few (6) bits to version and variant and it's not clear\n    //     what impact that has on the period, whereas the simple ++ (mod 2^128)\n    //     we use here is guaranteed to have the full period.\n\n    byte bits[];\n    synchronized(idLock) {\n      bits = nextId.toByteArray();\n      nextId = nextId.add(BigInteger.ONE).and(mask128);\n    }\n    \n    // toByteArray() always returns a sign bit, so it may require an extra byte (always zero)\n    if (bits.length > ID_LENGTH) {\n      assert bits.length == ID_LENGTH + 1;\n      assert bits[0] == 0;\n      return Arrays.copyOfRange(bits, 1, bits.length);\n    } else {\n      byte[] result = new byte[ID_LENGTH];\n      System.arraycopy(bits, 0, result, result.length - bits.length, bits.length);\n      return result;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70042a8a492f7054d480ccdd2be9796510d4327","date":1528386658,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/StringHelper#randomId().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/StringHelper#randomId().mjava","sourceNew":"  /** Generates a non-cryptographic globally unique id. */\n  public static byte[] randomId() {\n\n    // NOTE: we don't use Java's UUID.randomUUID() implementation here because:\n    //\n    //   * It's overkill for our usage: it tries to be cryptographically\n    //     secure, whereas for this use we don't care if someone can\n    //     guess the IDs.\n    //\n    //   * It uses SecureRandom, which on Linux can easily take a long time\n    //     (I saw ~ 10 seconds just running a Lucene test) when entropy\n    //     harvesting is falling behind.\n    //\n    //   * It loses a few (6) bits to version and variant and it's not clear\n    //     what impact that has on the period, whereas the simple ++ (mod 2^128)\n    //     we use here is guaranteed to have the full period.\n\n    byte bits[];\n    synchronized(idLock) {\n      bits = nextId.toByteArray();\n      nextId = nextId.add(BigInteger.ONE).and(mask128);\n    }\n    \n    // toByteArray() always returns a sign bit, so it may require an extra byte (always zero)\n    if (bits.length > ID_LENGTH) {\n      assert bits.length == ID_LENGTH + 1;\n      assert bits[0] == 0;\n      return ArrayUtil.copyOfSubArray(bits, 1, bits.length);\n    } else {\n      byte[] result = new byte[ID_LENGTH];\n      System.arraycopy(bits, 0, result, result.length - bits.length, bits.length);\n      return result;\n    }\n  }\n\n","sourceOld":"  /** Generates a non-cryptographic globally unique id. */\n  public static byte[] randomId() {\n\n    // NOTE: we don't use Java's UUID.randomUUID() implementation here because:\n    //\n    //   * It's overkill for our usage: it tries to be cryptographically\n    //     secure, whereas for this use we don't care if someone can\n    //     guess the IDs.\n    //\n    //   * It uses SecureRandom, which on Linux can easily take a long time\n    //     (I saw ~ 10 seconds just running a Lucene test) when entropy\n    //     harvesting is falling behind.\n    //\n    //   * It loses a few (6) bits to version and variant and it's not clear\n    //     what impact that has on the period, whereas the simple ++ (mod 2^128)\n    //     we use here is guaranteed to have the full period.\n\n    byte bits[];\n    synchronized(idLock) {\n      bits = nextId.toByteArray();\n      nextId = nextId.add(BigInteger.ONE).and(mask128);\n    }\n    \n    // toByteArray() always returns a sign bit, so it may require an extra byte (always zero)\n    if (bits.length > ID_LENGTH) {\n      assert bits.length == ID_LENGTH + 1;\n      assert bits[0] == 0;\n      return Arrays.copyOfRange(bits, 1, bits.length);\n    } else {\n      byte[] result = new byte[ID_LENGTH];\n      System.arraycopy(bits, 0, result, result.length - bits.length, bits.length);\n      return result;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/StringHelper#randomId().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/StringHelper#randomId().mjava","sourceNew":"  /** Generates a non-cryptographic globally unique id. */\n  public static byte[] randomId() {\n\n    // NOTE: we don't use Java's UUID.randomUUID() implementation here because:\n    //\n    //   * It's overkill for our usage: it tries to be cryptographically\n    //     secure, whereas for this use we don't care if someone can\n    //     guess the IDs.\n    //\n    //   * It uses SecureRandom, which on Linux can easily take a long time\n    //     (I saw ~ 10 seconds just running a Lucene test) when entropy\n    //     harvesting is falling behind.\n    //\n    //   * It loses a few (6) bits to version and variant and it's not clear\n    //     what impact that has on the period, whereas the simple ++ (mod 2^128)\n    //     we use here is guaranteed to have the full period.\n\n    byte bits[];\n    synchronized(idLock) {\n      bits = nextId.toByteArray();\n      nextId = nextId.add(BigInteger.ONE).and(mask128);\n    }\n    \n    // toByteArray() always returns a sign bit, so it may require an extra byte (always zero)\n    if (bits.length > ID_LENGTH) {\n      assert bits.length == ID_LENGTH + 1;\n      assert bits[0] == 0;\n      return ArrayUtil.copyOfSubArray(bits, 1, bits.length);\n    } else {\n      byte[] result = new byte[ID_LENGTH];\n      System.arraycopy(bits, 0, result, result.length - bits.length, bits.length);\n      return result;\n    }\n  }\n\n","sourceOld":"  /** Generates a non-cryptographic globally unique id. */\n  public static byte[] randomId() {\n\n    // NOTE: we don't use Java's UUID.randomUUID() implementation here because:\n    //\n    //   * It's overkill for our usage: it tries to be cryptographically\n    //     secure, whereas for this use we don't care if someone can\n    //     guess the IDs.\n    //\n    //   * It uses SecureRandom, which on Linux can easily take a long time\n    //     (I saw ~ 10 seconds just running a Lucene test) when entropy\n    //     harvesting is falling behind.\n    //\n    //   * It loses a few (6) bits to version and variant and it's not clear\n    //     what impact that has on the period, whereas the simple ++ (mod 2^128)\n    //     we use here is guaranteed to have the full period.\n\n    byte bits[];\n    synchronized(idLock) {\n      bits = nextId.toByteArray();\n      nextId = nextId.add(BigInteger.ONE).and(mask128);\n    }\n    \n    // toByteArray() always returns a sign bit, so it may require an extra byte (always zero)\n    if (bits.length > ID_LENGTH) {\n      assert bits.length == ID_LENGTH + 1;\n      assert bits[0] == 0;\n      return Arrays.copyOfRange(bits, 1, bits.length);\n    } else {\n      byte[] result = new byte[ID_LENGTH];\n      System.arraycopy(bits, 0, result, result.length - bits.length, bits.length);\n      return result;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e3cc329405ce41b8ef462b4cd30611eca1567620":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a5d957b3a23cce91c77a2c9971ecf0c9f99dd503":["e3cc329405ce41b8ef462b4cd30611eca1567620"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5f6bd27530a2846413fe2d00030493c0e2d3a072":["e3cc329405ce41b8ef462b4cd30611eca1567620","a5d957b3a23cce91c77a2c9971ecf0c9f99dd503"],"b70042a8a492f7054d480ccdd2be9796510d4327":["5f6bd27530a2846413fe2d00030493c0e2d3a072","9798d0818e7a880546802b509792d3f3d57babd2"],"9798d0818e7a880546802b509792d3f3d57babd2":["5f6bd27530a2846413fe2d00030493c0e2d3a072"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9798d0818e7a880546802b509792d3f3d57babd2"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["5f6bd27530a2846413fe2d00030493c0e2d3a072","9798d0818e7a880546802b509792d3f3d57babd2"]},"commit2Childs":{"e3cc329405ce41b8ef462b4cd30611eca1567620":["a5d957b3a23cce91c77a2c9971ecf0c9f99dd503","5f6bd27530a2846413fe2d00030493c0e2d3a072"],"a5d957b3a23cce91c77a2c9971ecf0c9f99dd503":["5f6bd27530a2846413fe2d00030493c0e2d3a072"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e3cc329405ce41b8ef462b4cd30611eca1567620"],"5f6bd27530a2846413fe2d00030493c0e2d3a072":["b70042a8a492f7054d480ccdd2be9796510d4327","9798d0818e7a880546802b509792d3f3d57babd2","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"b70042a8a492f7054d480ccdd2be9796510d4327":[],"9798d0818e7a880546802b509792d3f3d57babd2":["b70042a8a492f7054d480ccdd2be9796510d4327","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["b70042a8a492f7054d480ccdd2be9796510d4327","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}