{"path":"lucene/src/java/org/apache/lucene/store/LockVerifyServer#main(String[]).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/store/LockVerifyServer#main(String[]).mjava","pathOld":"src/java/org/apache/lucene/store/LockVerifyServer#main(String[]).mjava","sourceNew":"  public static void main(String[] args) throws IOException {\n\n    if (args.length != 1) {\n      System.out.println(\"\\nUsage: java org.apache.lucene.store.LockVerifyServer port\\n\");\n      System.exit(1);\n    }\n\n    final int port = Integer.parseInt(args[0]);\n\n    ServerSocket s = new ServerSocket(port);\n    s.setReuseAddress(true);\n    System.out.println(\"\\nReady on port \" + port + \"...\");\n\n    int lockedID = 0;\n    long startTime = System.currentTimeMillis();\n\n    while(true) {\n      Socket cs = s.accept();\n      OutputStream out = cs.getOutputStream();\n      InputStream in = cs.getInputStream();\n\n      int id = in.read();\n      int command = in.read();\n\n      boolean err = false;\n\n      if (command == 1) {\n        // Locked\n        if (lockedID != 0) {\n          err = true;\n          System.out.println(getTime(startTime) + \" ERROR: id \" + id + \" got lock, but \" + lockedID + \" already holds the lock\");\n        }\n        lockedID = id;\n      } else if (command == 0) {\n        if (lockedID != id) {\n          err = true;\n          System.out.println(getTime(startTime) + \" ERROR: id \" + id + \" released the lock, but \" + lockedID + \" is the one holding the lock\");\n        }\n        lockedID = 0;\n      } else\n        throw new RuntimeException(\"unrecognized command \" + command);\n\n      System.out.print(\".\");\n\n      if (err)\n        out.write(1);\n      else\n        out.write(0);\n\n      out.close();\n      in.close();\n      cs.close();\n    }\n  }\n\n","sourceOld":"  public static void main(String[] args) throws IOException {\n\n    if (args.length != 1) {\n      System.out.println(\"\\nUsage: java org.apache.lucene.store.LockVerifyServer port\\n\");\n      System.exit(1);\n    }\n\n    final int port = Integer.parseInt(args[0]);\n\n    ServerSocket s = new ServerSocket(port);\n    s.setReuseAddress(true);\n    System.out.println(\"\\nReady on port \" + port + \"...\");\n\n    int lockedID = 0;\n    long startTime = System.currentTimeMillis();\n\n    while(true) {\n      Socket cs = s.accept();\n      OutputStream out = cs.getOutputStream();\n      InputStream in = cs.getInputStream();\n\n      int id = in.read();\n      int command = in.read();\n\n      boolean err = false;\n\n      if (command == 1) {\n        // Locked\n        if (lockedID != 0) {\n          err = true;\n          System.out.println(getTime(startTime) + \" ERROR: id \" + id + \" got lock, but \" + lockedID + \" already holds the lock\");\n        }\n        lockedID = id;\n      } else if (command == 0) {\n        if (lockedID != id) {\n          err = true;\n          System.out.println(getTime(startTime) + \" ERROR: id \" + id + \" released the lock, but \" + lockedID + \" is the one holding the lock\");\n        }\n        lockedID = 0;\n      } else\n        throw new RuntimeException(\"unrecognized command \" + command);\n\n      System.out.print(\".\");\n\n      if (err)\n        out.write(1);\n      else\n        out.write(0);\n\n      out.close();\n      in.close();\n      cs.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/LockVerifyServer#main(String[]).mjava","pathOld":"lucene/src/java/org/apache/lucene/store/LockVerifyServer#main(String[]).mjava","sourceNew":"  public static void main(String[] args) throws IOException {\n\n    if (args.length != 1) {\n      System.out.println(\"\\nUsage: java org.apache.lucene.store.LockVerifyServer port\\n\");\n      System.exit(1);\n    }\n\n    final int port = Integer.parseInt(args[0]);\n\n    ServerSocket s = new ServerSocket(port);\n    s.setReuseAddress(true);\n    System.out.println(\"\\nReady on port \" + port + \"...\");\n\n    int lockedID = 0;\n    long startTime = System.currentTimeMillis();\n\n    while(true) {\n      Socket cs = s.accept();\n      OutputStream out = cs.getOutputStream();\n      InputStream in = cs.getInputStream();\n\n      int id = in.read();\n      int command = in.read();\n\n      boolean err = false;\n\n      if (command == 1) {\n        // Locked\n        if (lockedID != 0) {\n          err = true;\n          System.out.println(getTime(startTime) + \" ERROR: id \" + id + \" got lock, but \" + lockedID + \" already holds the lock\");\n        }\n        lockedID = id;\n      } else if (command == 0) {\n        if (lockedID != id) {\n          err = true;\n          System.out.println(getTime(startTime) + \" ERROR: id \" + id + \" released the lock, but \" + lockedID + \" is the one holding the lock\");\n        }\n        lockedID = 0;\n      } else\n        throw new RuntimeException(\"unrecognized command \" + command);\n\n      System.out.print(\".\");\n\n      if (err)\n        out.write(1);\n      else\n        out.write(0);\n\n      out.close();\n      in.close();\n      cs.close();\n    }\n  }\n\n","sourceOld":"  public static void main(String[] args) throws IOException {\n\n    if (args.length != 1) {\n      System.out.println(\"\\nUsage: java org.apache.lucene.store.LockVerifyServer port\\n\");\n      System.exit(1);\n    }\n\n    final int port = Integer.parseInt(args[0]);\n\n    ServerSocket s = new ServerSocket(port);\n    s.setReuseAddress(true);\n    System.out.println(\"\\nReady on port \" + port + \"...\");\n\n    int lockedID = 0;\n    long startTime = System.currentTimeMillis();\n\n    while(true) {\n      Socket cs = s.accept();\n      OutputStream out = cs.getOutputStream();\n      InputStream in = cs.getInputStream();\n\n      int id = in.read();\n      int command = in.read();\n\n      boolean err = false;\n\n      if (command == 1) {\n        // Locked\n        if (lockedID != 0) {\n          err = true;\n          System.out.println(getTime(startTime) + \" ERROR: id \" + id + \" got lock, but \" + lockedID + \" already holds the lock\");\n        }\n        lockedID = id;\n      } else if (command == 0) {\n        if (lockedID != id) {\n          err = true;\n          System.out.println(getTime(startTime) + \" ERROR: id \" + id + \" released the lock, but \" + lockedID + \" is the one holding the lock\");\n        }\n        lockedID = 0;\n      } else\n        throw new RuntimeException(\"unrecognized command \" + command);\n\n      System.out.print(\".\");\n\n      if (err)\n        out.write(1);\n      else\n        out.write(0);\n\n      out.close();\n      in.close();\n      cs.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}