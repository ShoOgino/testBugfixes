{"path":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testEmptyFieldNameWithEmptyTerm().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testEmptyFieldNameWithEmptyTerm().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testEmptyFieldNameWithEmptyTerm().mjava","sourceNew":"  public void testEmptyFieldNameWithEmptyTerm() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    Document doc = new Document();\n    doc.add(newField(\"\", \"\", StringField.TYPE_UNSTORED));\n    doc.add(newField(\"\", \"a\", StringField.TYPE_UNSTORED));\n    doc.add(newField(\"\", \"b\", StringField.TYPE_UNSTORED));\n    doc.add(newField(\"\", \"c\", StringField.TYPE_UNSTORED));\n    writer.addDocument(doc);  \n    writer.close();\n    DirectoryReader reader = IndexReader.open(dir);\n    AtomicReader subreader = getOnlySegmentReader(reader);\n    TermsEnum te = subreader.fields().terms(\"\").iterator(null);\n    assertEquals(new BytesRef(\"\"), te.next());\n    assertEquals(new BytesRef(\"a\"), te.next());\n    assertEquals(new BytesRef(\"b\"), te.next());\n    assertEquals(new BytesRef(\"c\"), te.next());\n    assertNull(te.next());\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testEmptyFieldNameWithEmptyTerm() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    Document doc = new Document();\n    doc.add(newField(\"\", \"\", StringField.TYPE_UNSTORED));\n    doc.add(newField(\"\", \"a\", StringField.TYPE_UNSTORED));\n    doc.add(newField(\"\", \"b\", StringField.TYPE_UNSTORED));\n    doc.add(newField(\"\", \"c\", StringField.TYPE_UNSTORED));\n    writer.addDocument(doc);  \n    writer.close();\n    DirectoryReader reader = IndexReader.open(dir);\n    AtomicReader subreader = getOnlySegmentReader(reader);\n    TermsEnum te = subreader.fields().terms(\"\").iterator(null);\n    assertEquals(new BytesRef(\"\"), te.next());\n    assertEquals(new BytesRef(\"a\"), te.next());\n    assertEquals(new BytesRef(\"b\"), te.next());\n    assertEquals(new BytesRef(\"c\"), te.next());\n    assertNull(te.next());\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testEmptyFieldNameWithEmptyTerm().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testEmptyFieldNameWithEmptyTerm().mjava","sourceNew":"  public void testEmptyFieldNameWithEmptyTerm() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    Document doc = new Document();\n    doc.add(newField(\"\", \"\", StringField.TYPE_UNSTORED));\n    doc.add(newField(\"\", \"a\", StringField.TYPE_UNSTORED));\n    doc.add(newField(\"\", \"b\", StringField.TYPE_UNSTORED));\n    doc.add(newField(\"\", \"c\", StringField.TYPE_UNSTORED));\n    writer.addDocument(doc);  \n    writer.close();\n    DirectoryReader reader = IndexReader.open(dir);\n    AtomicReader subreader = getOnlySegmentReader(reader);\n    TermsEnum te = subreader.fields().terms(\"\").iterator(null);\n    assertEquals(new BytesRef(\"\"), te.next());\n    assertEquals(new BytesRef(\"a\"), te.next());\n    assertEquals(new BytesRef(\"b\"), te.next());\n    assertEquals(new BytesRef(\"c\"), te.next());\n    assertNull(te.next());\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testEmptyFieldNameWithEmptyTerm() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    Document doc = new Document();\n    doc.add(newField(\"\", \"\", StringField.TYPE_UNSTORED));\n    doc.add(newField(\"\", \"a\", StringField.TYPE_UNSTORED));\n    doc.add(newField(\"\", \"b\", StringField.TYPE_UNSTORED));\n    doc.add(newField(\"\", \"c\", StringField.TYPE_UNSTORED));\n    writer.addDocument(doc);  \n    writer.close();\n    DirectoryReader reader = IndexReader.open(dir);\n    AtomicReader subreader = getOnlySegmentReader(reader);\n    TermsEnum te = subreader.fields().terms(\"\").iterator(null);\n    assertEquals(new BytesRef(\"\"), te.next());\n    assertEquals(new BytesRef(\"a\"), te.next());\n    assertEquals(new BytesRef(\"b\"), te.next());\n    assertEquals(new BytesRef(\"c\"), te.next());\n    assertNull(te.next());\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","date":1338430031,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testEmptyFieldNameWithEmptyTerm().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testEmptyFieldNameWithEmptyTerm().mjava","sourceNew":"  public void testEmptyFieldNameWithEmptyTerm() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    Document doc = new Document();\n    doc.add(newField(\"\", \"\", StringField.TYPE_UNSTORED));\n    doc.add(newField(\"\", \"a\", StringField.TYPE_UNSTORED));\n    doc.add(newField(\"\", \"b\", StringField.TYPE_UNSTORED));\n    doc.add(newField(\"\", \"c\", StringField.TYPE_UNSTORED));\n    writer.addDocument(doc);  \n    writer.close();\n    DirectoryReader reader = DirectoryReader.open(dir);\n    AtomicReader subreader = getOnlySegmentReader(reader);\n    TermsEnum te = subreader.fields().terms(\"\").iterator(null);\n    assertEquals(new BytesRef(\"\"), te.next());\n    assertEquals(new BytesRef(\"a\"), te.next());\n    assertEquals(new BytesRef(\"b\"), te.next());\n    assertEquals(new BytesRef(\"c\"), te.next());\n    assertNull(te.next());\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testEmptyFieldNameWithEmptyTerm() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    Document doc = new Document();\n    doc.add(newField(\"\", \"\", StringField.TYPE_UNSTORED));\n    doc.add(newField(\"\", \"a\", StringField.TYPE_UNSTORED));\n    doc.add(newField(\"\", \"b\", StringField.TYPE_UNSTORED));\n    doc.add(newField(\"\", \"c\", StringField.TYPE_UNSTORED));\n    writer.addDocument(doc);  \n    writer.close();\n    DirectoryReader reader = IndexReader.open(dir);\n    AtomicReader subreader = getOnlySegmentReader(reader);\n    TermsEnum te = subreader.fields().terms(\"\").iterator(null);\n    assertEquals(new BytesRef(\"\"), te.next());\n    assertEquals(new BytesRef(\"a\"), te.next());\n    assertEquals(new BytesRef(\"b\"), te.next());\n    assertEquals(new BytesRef(\"c\"), te.next());\n    assertNull(te.next());\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"04f07771a2a7dd3a395700665ed839c3dae2def2","date":1339350139,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testEmptyFieldNameWithEmptyTerm().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testEmptyFieldNameWithEmptyTerm().mjava","sourceNew":"  public void testEmptyFieldNameWithEmptyTerm() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    Document doc = new Document();\n    doc.add(newStringField(\"\", \"\", Field.Store.NO));\n    doc.add(newStringField(\"\", \"a\", Field.Store.NO));\n    doc.add(newStringField(\"\", \"b\", Field.Store.NO));\n    doc.add(newStringField(\"\", \"c\", Field.Store.NO));\n    writer.addDocument(doc);  \n    writer.close();\n    DirectoryReader reader = DirectoryReader.open(dir);\n    AtomicReader subreader = getOnlySegmentReader(reader);\n    TermsEnum te = subreader.fields().terms(\"\").iterator(null);\n    assertEquals(new BytesRef(\"\"), te.next());\n    assertEquals(new BytesRef(\"a\"), te.next());\n    assertEquals(new BytesRef(\"b\"), te.next());\n    assertEquals(new BytesRef(\"c\"), te.next());\n    assertNull(te.next());\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testEmptyFieldNameWithEmptyTerm() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    Document doc = new Document();\n    doc.add(newField(\"\", \"\", StringField.TYPE_UNSTORED));\n    doc.add(newField(\"\", \"a\", StringField.TYPE_UNSTORED));\n    doc.add(newField(\"\", \"b\", StringField.TYPE_UNSTORED));\n    doc.add(newField(\"\", \"c\", StringField.TYPE_UNSTORED));\n    writer.addDocument(doc);  \n    writer.close();\n    DirectoryReader reader = DirectoryReader.open(dir);\n    AtomicReader subreader = getOnlySegmentReader(reader);\n    TermsEnum te = subreader.fields().terms(\"\").iterator(null);\n    assertEquals(new BytesRef(\"\"), te.next());\n    assertEquals(new BytesRef(\"a\"), te.next());\n    assertEquals(new BytesRef(\"b\"), te.next());\n    assertEquals(new BytesRef(\"c\"), te.next());\n    assertNull(te.next());\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":["255895910bec99adb867c3575281a4e4f4471eea"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testEmptyFieldNameWithEmptyTerm().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testEmptyFieldNameWithEmptyTerm().mjava","sourceNew":"  public void testEmptyFieldNameWithEmptyTerm() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    Document doc = new Document();\n    doc.add(newStringField(\"\", \"\", Field.Store.NO));\n    doc.add(newStringField(\"\", \"a\", Field.Store.NO));\n    doc.add(newStringField(\"\", \"b\", Field.Store.NO));\n    doc.add(newStringField(\"\", \"c\", Field.Store.NO));\n    writer.addDocument(doc);  \n    writer.shutdown();\n    DirectoryReader reader = DirectoryReader.open(dir);\n    AtomicReader subreader = getOnlySegmentReader(reader);\n    TermsEnum te = subreader.fields().terms(\"\").iterator(null);\n    assertEquals(new BytesRef(\"\"), te.next());\n    assertEquals(new BytesRef(\"a\"), te.next());\n    assertEquals(new BytesRef(\"b\"), te.next());\n    assertEquals(new BytesRef(\"c\"), te.next());\n    assertNull(te.next());\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testEmptyFieldNameWithEmptyTerm() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    Document doc = new Document();\n    doc.add(newStringField(\"\", \"\", Field.Store.NO));\n    doc.add(newStringField(\"\", \"a\", Field.Store.NO));\n    doc.add(newStringField(\"\", \"b\", Field.Store.NO));\n    doc.add(newStringField(\"\", \"c\", Field.Store.NO));\n    writer.addDocument(doc);  \n    writer.close();\n    DirectoryReader reader = DirectoryReader.open(dir);\n    AtomicReader subreader = getOnlySegmentReader(reader);\n    TermsEnum te = subreader.fields().terms(\"\").iterator(null);\n    assertEquals(new BytesRef(\"\"), te.next());\n    assertEquals(new BytesRef(\"a\"), te.next());\n    assertEquals(new BytesRef(\"b\"), te.next());\n    assertEquals(new BytesRef(\"c\"), te.next());\n    assertNull(te.next());\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testEmptyFieldNameWithEmptyTerm().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testEmptyFieldNameWithEmptyTerm().mjava","sourceNew":"  public void testEmptyFieldNameWithEmptyTerm() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n    Document doc = new Document();\n    doc.add(newStringField(\"\", \"\", Field.Store.NO));\n    doc.add(newStringField(\"\", \"a\", Field.Store.NO));\n    doc.add(newStringField(\"\", \"b\", Field.Store.NO));\n    doc.add(newStringField(\"\", \"c\", Field.Store.NO));\n    writer.addDocument(doc);  \n    writer.shutdown();\n    DirectoryReader reader = DirectoryReader.open(dir);\n    AtomicReader subreader = getOnlySegmentReader(reader);\n    TermsEnum te = subreader.fields().terms(\"\").iterator(null);\n    assertEquals(new BytesRef(\"\"), te.next());\n    assertEquals(new BytesRef(\"a\"), te.next());\n    assertEquals(new BytesRef(\"b\"), te.next());\n    assertEquals(new BytesRef(\"c\"), te.next());\n    assertNull(te.next());\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testEmptyFieldNameWithEmptyTerm() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    Document doc = new Document();\n    doc.add(newStringField(\"\", \"\", Field.Store.NO));\n    doc.add(newStringField(\"\", \"a\", Field.Store.NO));\n    doc.add(newStringField(\"\", \"b\", Field.Store.NO));\n    doc.add(newStringField(\"\", \"c\", Field.Store.NO));\n    writer.addDocument(doc);  \n    writer.shutdown();\n    DirectoryReader reader = DirectoryReader.open(dir);\n    AtomicReader subreader = getOnlySegmentReader(reader);\n    TermsEnum te = subreader.fields().terms(\"\").iterator(null);\n    assertEquals(new BytesRef(\"\"), te.next());\n    assertEquals(new BytesRef(\"a\"), te.next());\n    assertEquals(new BytesRef(\"b\"), te.next());\n    assertEquals(new BytesRef(\"c\"), te.next());\n    assertNull(te.next());\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testEmptyFieldNameWithEmptyTerm().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testEmptyFieldNameWithEmptyTerm().mjava","sourceNew":"  public void testEmptyFieldNameWithEmptyTerm() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n    Document doc = new Document();\n    doc.add(newStringField(\"\", \"\", Field.Store.NO));\n    doc.add(newStringField(\"\", \"a\", Field.Store.NO));\n    doc.add(newStringField(\"\", \"b\", Field.Store.NO));\n    doc.add(newStringField(\"\", \"c\", Field.Store.NO));\n    writer.addDocument(doc);  \n    writer.close();\n    DirectoryReader reader = DirectoryReader.open(dir);\n    AtomicReader subreader = getOnlySegmentReader(reader);\n    TermsEnum te = subreader.fields().terms(\"\").iterator(null);\n    assertEquals(new BytesRef(\"\"), te.next());\n    assertEquals(new BytesRef(\"a\"), te.next());\n    assertEquals(new BytesRef(\"b\"), te.next());\n    assertEquals(new BytesRef(\"c\"), te.next());\n    assertNull(te.next());\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testEmptyFieldNameWithEmptyTerm() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n    Document doc = new Document();\n    doc.add(newStringField(\"\", \"\", Field.Store.NO));\n    doc.add(newStringField(\"\", \"a\", Field.Store.NO));\n    doc.add(newStringField(\"\", \"b\", Field.Store.NO));\n    doc.add(newStringField(\"\", \"c\", Field.Store.NO));\n    writer.addDocument(doc);  \n    writer.shutdown();\n    DirectoryReader reader = DirectoryReader.open(dir);\n    AtomicReader subreader = getOnlySegmentReader(reader);\n    TermsEnum te = subreader.fields().terms(\"\").iterator(null);\n    assertEquals(new BytesRef(\"\"), te.next());\n    assertEquals(new BytesRef(\"a\"), te.next());\n    assertEquals(new BytesRef(\"b\"), te.next());\n    assertEquals(new BytesRef(\"c\"), te.next());\n    assertNull(te.next());\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testEmptyFieldNameWithEmptyTerm().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testEmptyFieldNameWithEmptyTerm().mjava","sourceNew":"  public void testEmptyFieldNameWithEmptyTerm() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n    Document doc = new Document();\n    doc.add(newStringField(\"\", \"\", Field.Store.NO));\n    doc.add(newStringField(\"\", \"a\", Field.Store.NO));\n    doc.add(newStringField(\"\", \"b\", Field.Store.NO));\n    doc.add(newStringField(\"\", \"c\", Field.Store.NO));\n    writer.addDocument(doc);  \n    writer.close();\n    DirectoryReader reader = DirectoryReader.open(dir);\n    LeafReader subreader = getOnlySegmentReader(reader);\n    TermsEnum te = subreader.fields().terms(\"\").iterator(null);\n    assertEquals(new BytesRef(\"\"), te.next());\n    assertEquals(new BytesRef(\"a\"), te.next());\n    assertEquals(new BytesRef(\"b\"), te.next());\n    assertEquals(new BytesRef(\"c\"), te.next());\n    assertNull(te.next());\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testEmptyFieldNameWithEmptyTerm() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n    Document doc = new Document();\n    doc.add(newStringField(\"\", \"\", Field.Store.NO));\n    doc.add(newStringField(\"\", \"a\", Field.Store.NO));\n    doc.add(newStringField(\"\", \"b\", Field.Store.NO));\n    doc.add(newStringField(\"\", \"c\", Field.Store.NO));\n    writer.addDocument(doc);  \n    writer.close();\n    DirectoryReader reader = DirectoryReader.open(dir);\n    AtomicReader subreader = getOnlySegmentReader(reader);\n    TermsEnum te = subreader.fields().terms(\"\").iterator(null);\n    assertEquals(new BytesRef(\"\"), te.next());\n    assertEquals(new BytesRef(\"a\"), te.next());\n    assertEquals(new BytesRef(\"b\"), te.next());\n    assertEquals(new BytesRef(\"c\"), te.next());\n    assertNull(te.next());\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82","date":1428522487,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testEmptyFieldNameWithEmptyTerm().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testEmptyFieldNameWithEmptyTerm().mjava","sourceNew":"  public void testEmptyFieldNameWithEmptyTerm() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n    Document doc = new Document();\n    doc.add(newStringField(\"\", \"\", Field.Store.NO));\n    doc.add(newStringField(\"\", \"a\", Field.Store.NO));\n    doc.add(newStringField(\"\", \"b\", Field.Store.NO));\n    doc.add(newStringField(\"\", \"c\", Field.Store.NO));\n    writer.addDocument(doc);  \n    writer.close();\n    DirectoryReader reader = DirectoryReader.open(dir);\n    LeafReader subreader = getOnlySegmentReader(reader);\n    TermsEnum te = subreader.fields().terms(\"\").iterator();\n    assertEquals(new BytesRef(\"\"), te.next());\n    assertEquals(new BytesRef(\"a\"), te.next());\n    assertEquals(new BytesRef(\"b\"), te.next());\n    assertEquals(new BytesRef(\"c\"), te.next());\n    assertNull(te.next());\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testEmptyFieldNameWithEmptyTerm() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n    Document doc = new Document();\n    doc.add(newStringField(\"\", \"\", Field.Store.NO));\n    doc.add(newStringField(\"\", \"a\", Field.Store.NO));\n    doc.add(newStringField(\"\", \"b\", Field.Store.NO));\n    doc.add(newStringField(\"\", \"c\", Field.Store.NO));\n    writer.addDocument(doc);  \n    writer.close();\n    DirectoryReader reader = DirectoryReader.open(dir);\n    LeafReader subreader = getOnlySegmentReader(reader);\n    TermsEnum te = subreader.fields().terms(\"\").iterator(null);\n    assertEquals(new BytesRef(\"\"), te.next());\n    assertEquals(new BytesRef(\"a\"), te.next());\n    assertEquals(new BytesRef(\"b\"), te.next());\n    assertEquals(new BytesRef(\"c\"), te.next());\n    assertNull(te.next());\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1","date":1457644139,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testEmptyFieldNameWithEmptyTerm().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testEmptyFieldNameWithEmptyTerm().mjava","sourceNew":"  public void testEmptyFieldNameWithEmptyTerm() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n    Document doc = new Document();\n    doc.add(newStringField(\"\", \"\", Field.Store.NO));\n    doc.add(newStringField(\"\", \"a\", Field.Store.NO));\n    doc.add(newStringField(\"\", \"b\", Field.Store.NO));\n    doc.add(newStringField(\"\", \"c\", Field.Store.NO));\n    writer.addDocument(doc);  \n    writer.close();\n    DirectoryReader reader = DirectoryReader.open(dir);\n    LeafReader subreader = getOnlyLeafReader(reader);\n    TermsEnum te = subreader.fields().terms(\"\").iterator();\n    assertEquals(new BytesRef(\"\"), te.next());\n    assertEquals(new BytesRef(\"a\"), te.next());\n    assertEquals(new BytesRef(\"b\"), te.next());\n    assertEquals(new BytesRef(\"c\"), te.next());\n    assertNull(te.next());\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testEmptyFieldNameWithEmptyTerm() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n    Document doc = new Document();\n    doc.add(newStringField(\"\", \"\", Field.Store.NO));\n    doc.add(newStringField(\"\", \"a\", Field.Store.NO));\n    doc.add(newStringField(\"\", \"b\", Field.Store.NO));\n    doc.add(newStringField(\"\", \"c\", Field.Store.NO));\n    writer.addDocument(doc);  \n    writer.close();\n    DirectoryReader reader = DirectoryReader.open(dir);\n    LeafReader subreader = getOnlySegmentReader(reader);\n    TermsEnum te = subreader.fields().terms(\"\").iterator();\n    assertEquals(new BytesRef(\"\"), te.next());\n    assertEquals(new BytesRef(\"a\"), te.next());\n    assertEquals(new BytesRef(\"b\"), te.next());\n    assertEquals(new BytesRef(\"c\"), te.next());\n    assertNull(te.next());\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e588e8c82e32e29ef3837c0b06a2ad34f3c51a2b","date":1497408244,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testEmptyFieldNameWithEmptyTerm().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testEmptyFieldNameWithEmptyTerm().mjava","sourceNew":"  public void testEmptyFieldNameWithEmptyTerm() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n    Document doc = new Document();\n    doc.add(newStringField(\"\", \"\", Field.Store.NO));\n    doc.add(newStringField(\"\", \"a\", Field.Store.NO));\n    doc.add(newStringField(\"\", \"b\", Field.Store.NO));\n    doc.add(newStringField(\"\", \"c\", Field.Store.NO));\n    writer.addDocument(doc);  \n    writer.close();\n    DirectoryReader reader = DirectoryReader.open(dir);\n    LeafReader subreader = getOnlyLeafReader(reader);\n    TermsEnum te = subreader.terms(\"\").iterator();\n    assertEquals(new BytesRef(\"\"), te.next());\n    assertEquals(new BytesRef(\"a\"), te.next());\n    assertEquals(new BytesRef(\"b\"), te.next());\n    assertEquals(new BytesRef(\"c\"), te.next());\n    assertNull(te.next());\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testEmptyFieldNameWithEmptyTerm() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n    Document doc = new Document();\n    doc.add(newStringField(\"\", \"\", Field.Store.NO));\n    doc.add(newStringField(\"\", \"a\", Field.Store.NO));\n    doc.add(newStringField(\"\", \"b\", Field.Store.NO));\n    doc.add(newStringField(\"\", \"c\", Field.Store.NO));\n    writer.addDocument(doc);  \n    writer.close();\n    DirectoryReader reader = DirectoryReader.open(dir);\n    LeafReader subreader = getOnlyLeafReader(reader);\n    TermsEnum te = subreader.fields().terms(\"\").iterator();\n    assertEquals(new BytesRef(\"\"), te.next());\n    assertEquals(new BytesRef(\"a\"), te.next());\n    assertEquals(new BytesRef(\"b\"), te.next());\n    assertEquals(new BytesRef(\"c\"), te.next());\n    assertNull(te.next());\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testEmptyFieldNameWithEmptyTerm().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testEmptyFieldNameWithEmptyTerm().mjava","sourceNew":"  public void testEmptyFieldNameWithEmptyTerm() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n    Document doc = new Document();\n    doc.add(newStringField(\"\", \"\", Field.Store.NO));\n    doc.add(newStringField(\"\", \"a\", Field.Store.NO));\n    doc.add(newStringField(\"\", \"b\", Field.Store.NO));\n    doc.add(newStringField(\"\", \"c\", Field.Store.NO));\n    writer.addDocument(doc);  \n    writer.close();\n    DirectoryReader reader = DirectoryReader.open(dir);\n    LeafReader subreader = getOnlyLeafReader(reader);\n    TermsEnum te = subreader.terms(\"\").iterator();\n    assertEquals(new BytesRef(\"\"), te.next());\n    assertEquals(new BytesRef(\"a\"), te.next());\n    assertEquals(new BytesRef(\"b\"), te.next());\n    assertEquals(new BytesRef(\"c\"), te.next());\n    assertNull(te.next());\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testEmptyFieldNameWithEmptyTerm() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n    Document doc = new Document();\n    doc.add(newStringField(\"\", \"\", Field.Store.NO));\n    doc.add(newStringField(\"\", \"a\", Field.Store.NO));\n    doc.add(newStringField(\"\", \"b\", Field.Store.NO));\n    doc.add(newStringField(\"\", \"c\", Field.Store.NO));\n    writer.addDocument(doc);  \n    writer.close();\n    DirectoryReader reader = DirectoryReader.open(dir);\n    LeafReader subreader = getOnlyLeafReader(reader);\n    TermsEnum te = subreader.fields().terms(\"\").iterator();\n    assertEquals(new BytesRef(\"\"), te.next());\n    assertEquals(new BytesRef(\"a\"), te.next());\n    assertEquals(new BytesRef(\"b\"), te.next());\n    assertEquals(new BytesRef(\"c\"), te.next());\n    assertNull(te.next());\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testEmptyFieldNameWithEmptyTerm().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testEmptyFieldNameWithEmptyTerm().mjava","sourceNew":"  public void testEmptyFieldNameWithEmptyTerm() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n    Document doc = new Document();\n    doc.add(newStringField(\"\", \"\", Field.Store.NO));\n    doc.add(newStringField(\"\", \"a\", Field.Store.NO));\n    doc.add(newStringField(\"\", \"b\", Field.Store.NO));\n    doc.add(newStringField(\"\", \"c\", Field.Store.NO));\n    writer.addDocument(doc);  \n    writer.close();\n    DirectoryReader reader = DirectoryReader.open(dir);\n    LeafReader subreader = getOnlyLeafReader(reader);\n    TermsEnum te = subreader.terms(\"\").iterator();\n    assertEquals(new BytesRef(\"\"), te.next());\n    assertEquals(new BytesRef(\"a\"), te.next());\n    assertEquals(new BytesRef(\"b\"), te.next());\n    assertEquals(new BytesRef(\"c\"), te.next());\n    assertNull(te.next());\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testEmptyFieldNameWithEmptyTerm() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n    Document doc = new Document();\n    doc.add(newStringField(\"\", \"\", Field.Store.NO));\n    doc.add(newStringField(\"\", \"a\", Field.Store.NO));\n    doc.add(newStringField(\"\", \"b\", Field.Store.NO));\n    doc.add(newStringField(\"\", \"c\", Field.Store.NO));\n    writer.addDocument(doc);  \n    writer.close();\n    DirectoryReader reader = DirectoryReader.open(dir);\n    LeafReader subreader = getOnlyLeafReader(reader);\n    TermsEnum te = subreader.fields().terms(\"\").iterator();\n    assertEquals(new BytesRef(\"\"), te.next());\n    assertEquals(new BytesRef(\"a\"), te.next());\n    assertEquals(new BytesRef(\"b\"), te.next());\n    assertEquals(new BytesRef(\"c\"), te.next());\n    assertNull(te.next());\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe39f1a106531207c028defebbc9eb5bb489ac50","date":1592513789,"type":3,"author":"Michael Sokolov","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testEmptyFieldNameWithEmptyTerm().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testEmptyFieldNameWithEmptyTerm().mjava","sourceNew":"  public void testEmptyFieldNameWithEmptyTerm() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n    Document doc = new Document();\n    doc.add(newStringField(\"\", \"\", Field.Store.NO));\n    doc.add(newStringField(\"\", \"a\", Field.Store.NO));\n    doc.add(newStringField(\"\", \"b\", Field.Store.NO));\n    doc.add(newStringField(\"\", \"c\", Field.Store.NO));\n    writer.addDocument(doc);\n    writer.close();\n    DirectoryReader reader = DirectoryReader.open(dir);\n    LeafReader subreader = getOnlyLeafReader(reader);\n    TermsEnum te = subreader.terms(\"\").iterator();\n    assertEquals(new BytesRef(\"\"), te.next());\n    assertEquals(new BytesRef(\"a\"), te.next());\n    assertEquals(new BytesRef(\"b\"), te.next());\n    assertEquals(new BytesRef(\"c\"), te.next());\n    assertNull(te.next());\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testEmptyFieldNameWithEmptyTerm() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n    Document doc = new Document();\n    doc.add(newStringField(\"\", \"\", Field.Store.NO));\n    doc.add(newStringField(\"\", \"a\", Field.Store.NO));\n    doc.add(newStringField(\"\", \"b\", Field.Store.NO));\n    doc.add(newStringField(\"\", \"c\", Field.Store.NO));\n    writer.addDocument(doc);  \n    writer.close();\n    DirectoryReader reader = DirectoryReader.open(dir);\n    LeafReader subreader = getOnlyLeafReader(reader);\n    TermsEnum te = subreader.terms(\"\").iterator();\n    assertEquals(new BytesRef(\"\"), te.next());\n    assertEquals(new BytesRef(\"a\"), te.next());\n    assertEquals(new BytesRef(\"b\"), te.next());\n    assertEquals(new BytesRef(\"c\"), te.next());\n    assertNull(te.next());\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1182fe36fb5df768dc2da53f6d5338cbc07268ae","date":1592861749,"type":3,"author":"Michael Sokolov","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testEmptyFieldNameWithEmptyTerm().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testEmptyFieldNameWithEmptyTerm().mjava","sourceNew":"  public void testEmptyFieldNameWithEmptyTerm() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n    Document doc = new Document();\n    doc.add(newStringField(\"\", \"\", Field.Store.NO));\n    doc.add(newStringField(\"\", \"a\", Field.Store.NO));\n    doc.add(newStringField(\"\", \"b\", Field.Store.NO));\n    doc.add(newStringField(\"\", \"c\", Field.Store.NO));\n    writer.addDocument(doc);  \n    writer.close();\n    DirectoryReader reader = DirectoryReader.open(dir);\n    LeafReader subreader = getOnlyLeafReader(reader);\n    TermsEnum te = subreader.terms(\"\").iterator();\n    assertEquals(new BytesRef(\"\"), te.next());\n    assertEquals(new BytesRef(\"a\"), te.next());\n    assertEquals(new BytesRef(\"b\"), te.next());\n    assertEquals(new BytesRef(\"c\"), te.next());\n    assertNull(te.next());\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testEmptyFieldNameWithEmptyTerm() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n    Document doc = new Document();\n    doc.add(newStringField(\"\", \"\", Field.Store.NO));\n    doc.add(newStringField(\"\", \"a\", Field.Store.NO));\n    doc.add(newStringField(\"\", \"b\", Field.Store.NO));\n    doc.add(newStringField(\"\", \"c\", Field.Store.NO));\n    writer.addDocument(doc);\n    writer.close();\n    DirectoryReader reader = DirectoryReader.open(dir);\n    LeafReader subreader = getOnlyLeafReader(reader);\n    TermsEnum te = subreader.terms(\"\").iterator();\n    assertEquals(new BytesRef(\"\"), te.next());\n    assertEquals(new BytesRef(\"a\"), te.next());\n    assertEquals(new BytesRef(\"b\"), te.next());\n    assertEquals(new BytesRef(\"c\"), te.next());\n    assertNull(te.next());\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c2a23476693f2bd9a4b44cc3187c429a2e21dac2","date":1593289545,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testEmptyFieldNameWithEmptyTerm().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testEmptyFieldNameWithEmptyTerm().mjava","sourceNew":"  public void testEmptyFieldNameWithEmptyTerm() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n    Document doc = new Document();\n    doc.add(newStringField(\"\", \"\", Field.Store.NO));\n    doc.add(newStringField(\"\", \"a\", Field.Store.NO));\n    doc.add(newStringField(\"\", \"b\", Field.Store.NO));\n    doc.add(newStringField(\"\", \"c\", Field.Store.NO));\n    writer.addDocument(doc);\n    writer.close();\n    DirectoryReader reader = DirectoryReader.open(dir);\n    LeafReader subreader = getOnlyLeafReader(reader);\n    TermsEnum te = subreader.terms(\"\").iterator();\n    assertEquals(new BytesRef(\"\"), te.next());\n    assertEquals(new BytesRef(\"a\"), te.next());\n    assertEquals(new BytesRef(\"b\"), te.next());\n    assertEquals(new BytesRef(\"c\"), te.next());\n    assertNull(te.next());\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testEmptyFieldNameWithEmptyTerm() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n    Document doc = new Document();\n    doc.add(newStringField(\"\", \"\", Field.Store.NO));\n    doc.add(newStringField(\"\", \"a\", Field.Store.NO));\n    doc.add(newStringField(\"\", \"b\", Field.Store.NO));\n    doc.add(newStringField(\"\", \"c\", Field.Store.NO));\n    writer.addDocument(doc);  \n    writer.close();\n    DirectoryReader reader = DirectoryReader.open(dir);\n    LeafReader subreader = getOnlyLeafReader(reader);\n    TermsEnum te = subreader.terms(\"\").iterator();\n    assertEquals(new BytesRef(\"\"), te.next());\n    assertEquals(new BytesRef(\"a\"), te.next());\n    assertEquals(new BytesRef(\"b\"), te.next());\n    assertEquals(new BytesRef(\"c\"), te.next());\n    assertNull(te.next());\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"e588e8c82e32e29ef3837c0b06a2ad34f3c51a2b":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe39f1a106531207c028defebbc9eb5bb489ac50":["28288370235ed02234a64753cdbf0c6ec096304a"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"28288370235ed02234a64753cdbf0c6ec096304a":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1","e588e8c82e32e29ef3837c0b06a2ad34f3c51a2b"],"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82"],"04f07771a2a7dd3a395700665ed839c3dae2def2":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"c2a23476693f2bd9a4b44cc3187c429a2e21dac2":["1182fe36fb5df768dc2da53f6d5338cbc07268ae"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"1182fe36fb5df768dc2da53f6d5338cbc07268ae":["fe39f1a106531207c028defebbc9eb5bb489ac50"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1","e588e8c82e32e29ef3837c0b06a2ad34f3c51a2b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c2a23476693f2bd9a4b44cc3187c429a2e21dac2"]},"commit2Childs":{"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"e588e8c82e32e29ef3837c0b06a2ad34f3c51a2b":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"fe39f1a106531207c028defebbc9eb5bb489ac50":["1182fe36fb5df768dc2da53f6d5338cbc07268ae"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82"],"28288370235ed02234a64753cdbf0c6ec096304a":["fe39f1a106531207c028defebbc9eb5bb489ac50"],"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1":["e588e8c82e32e29ef3837c0b06a2ad34f3c51a2b","28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"04f07771a2a7dd3a395700665ed839c3dae2def2":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"c2a23476693f2bd9a4b44cc3187c429a2e21dac2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"1182fe36fb5df768dc2da53f6d5338cbc07268ae":["c2a23476693f2bd9a4b44cc3187c429a2e21dac2"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}