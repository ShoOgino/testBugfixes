{"path":"lucene/core/src/java/org/apache/lucene/search/TermInSetQuery#visit(QueryVisitor).mjava","commits":[{"id":"5b9ffb60dc4bdc972b1403ad2ab2f5b4d9ce4cf7","date":1552575873,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TermInSetQuery#visit(QueryVisitor).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void visit(QueryVisitor visitor) {\n    if (visitor.acceptField(field) == false) {\n      return;\n    }\n    QueryVisitor v = visitor.getSubVisitor(Occur.SHOULD, this);\n    List<Term> terms = new ArrayList<>();\n    TermIterator iterator = termData.iterator();\n    for (BytesRef term = iterator.next(); term != null; term = iterator.next()) {\n      terms.add(new Term(field, BytesRef.deepCopyOf(term)));\n    }\n    v.consumeTerms(this, terms.toArray(new Term[0]));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe1bc3639daa2b0731b0eac4b50e518f492d3a23","date":1588151945,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TermInSetQuery#visit(QueryVisitor).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TermInSetQuery#visit(QueryVisitor).mjava","sourceNew":"  @Override\n  public void visit(QueryVisitor visitor) {\n    if (visitor.acceptField(field) == false) {\n      return;\n    }\n    if (termData.size() == 1) {\n      visitor.consumeTerms(this, new Term(field, termData.iterator().next()));\n    }\n    if (termData.size() > 1) {\n      visitor.consumeTermsMatching(this, field, this::asByteRunAutomaton);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void visit(QueryVisitor visitor) {\n    if (visitor.acceptField(field) == false) {\n      return;\n    }\n    QueryVisitor v = visitor.getSubVisitor(Occur.SHOULD, this);\n    List<Term> terms = new ArrayList<>();\n    TermIterator iterator = termData.iterator();\n    for (BytesRef term = iterator.next(); term != null; term = iterator.next()) {\n      terms.add(new Term(field, BytesRef.deepCopyOf(term)));\n    }\n    v.consumeTerms(this, terms.toArray(new Term[0]));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fe1bc3639daa2b0731b0eac4b50e518f492d3a23":["5b9ffb60dc4bdc972b1403ad2ab2f5b4d9ce4cf7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fe1bc3639daa2b0731b0eac4b50e518f492d3a23"],"5b9ffb60dc4bdc972b1403ad2ab2f5b4d9ce4cf7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"fe1bc3639daa2b0731b0eac4b50e518f492d3a23":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5b9ffb60dc4bdc972b1403ad2ab2f5b4d9ce4cf7"],"5b9ffb60dc4bdc972b1403ad2ab2f5b4d9ce4cf7":["fe1bc3639daa2b0731b0eac4b50e518f492d3a23"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}