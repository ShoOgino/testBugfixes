{"path":"lucene/core/src/java/org/apache/lucene/store/FSDirectory.FSIndexOutput#FSIndexOutput(String).mjava","commits":[{"id":"bce1e2aee8b16573bc0d091471e4660d140b5823","date":1400533696,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/FSDirectory.FSIndexOutput#FSIndexOutput(String).mjava","pathOld":"/dev/null","sourceNew":"    public FSIndexOutput(String name) throws IOException {\n      super(new FilterOutputStream(new FileOutputStream(new File(directory, name))) {\n        // This implementation ensures, that we never write more than CHUNK_SIZE bytes:\n        @Override\n        public void write(byte[] b, int offset, int length) throws IOException {\n          while (length > 0) {\n            final int chunk = Math.min(length, CHUNK_SIZE);\n            out.write(b, offset, chunk);\n            length -= chunk;\n            offset += chunk;\n          }\n        }\n      }, CHUNK_SIZE);\n      this.name = name;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7605579001505896d48b07160075a5c8b8e128e","date":1400758727,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/store/FSDirectory.FSIndexOutput#FSIndexOutput(String).mjava","pathOld":"/dev/null","sourceNew":"    public FSIndexOutput(String name) throws IOException {\n      super(new FilterOutputStream(new FileOutputStream(new File(directory, name))) {\n        // This implementation ensures, that we never write more than CHUNK_SIZE bytes:\n        @Override\n        public void write(byte[] b, int offset, int length) throws IOException {\n          while (length > 0) {\n            final int chunk = Math.min(length, CHUNK_SIZE);\n            out.write(b, offset, chunk);\n            length -= chunk;\n            offset += chunk;\n          }\n        }\n      }, CHUNK_SIZE);\n      this.name = name;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4abec28b874149a7223e32cc7a01704c27790de","date":1410644789,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/FSDirectory.FSIndexOutput#FSIndexOutput(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/FSDirectory.FSIndexOutput#FSIndexOutput(String).mjava","sourceNew":"    public FSIndexOutput(String name) throws IOException {\n      super(new FilterOutputStream(Files.newOutputStream(directory.resolve(name))) {\n        // This implementation ensures, that we never write more than CHUNK_SIZE bytes:\n        @Override\n        public void write(byte[] b, int offset, int length) throws IOException {\n          while (length > 0) {\n            final int chunk = Math.min(length, CHUNK_SIZE);\n            out.write(b, offset, chunk);\n            length -= chunk;\n            offset += chunk;\n          }\n        }\n      }, CHUNK_SIZE);\n      this.name = name;\n    }\n\n","sourceOld":"    public FSIndexOutput(String name) throws IOException {\n      super(new FilterOutputStream(new FileOutputStream(new File(directory, name))) {\n        // This implementation ensures, that we never write more than CHUNK_SIZE bytes:\n        @Override\n        public void write(byte[] b, int offset, int length) throws IOException {\n          while (length > 0) {\n            final int chunk = Math.min(length, CHUNK_SIZE);\n            out.write(b, offset, chunk);\n            length -= chunk;\n            offset += chunk;\n          }\n        }\n      }, CHUNK_SIZE);\n      this.name = name;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8833cc981e4be2dcfe8c6b5ca2781c59e1124a60","date":1417468898,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/FSDirectory.FSIndexOutput#FSIndexOutput(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/FSDirectory.FSIndexOutput#FSIndexOutput(String).mjava","sourceNew":"    public FSIndexOutput(String name) throws IOException {\n      super(\"FSIndexOutput(path=\\\"\" + directory.resolve(name) + \"\\\")\", new FilterOutputStream(Files.newOutputStream(directory.resolve(name))) {\n        // This implementation ensures, that we never write more than CHUNK_SIZE bytes:\n        @Override\n        public void write(byte[] b, int offset, int length) throws IOException {\n          while (length > 0) {\n            final int chunk = Math.min(length, CHUNK_SIZE);\n            out.write(b, offset, chunk);\n            length -= chunk;\n            offset += chunk;\n          }\n        }\n      }, CHUNK_SIZE);\n      this.name = name;\n    }\n\n","sourceOld":"    public FSIndexOutput(String name) throws IOException {\n      super(new FilterOutputStream(Files.newOutputStream(directory.resolve(name))) {\n        // This implementation ensures, that we never write more than CHUNK_SIZE bytes:\n        @Override\n        public void write(byte[] b, int offset, int length) throws IOException {\n          while (length > 0) {\n            final int chunk = Math.min(length, CHUNK_SIZE);\n            out.write(b, offset, chunk);\n            length -= chunk;\n            offset += chunk;\n          }\n        }\n      }, CHUNK_SIZE);\n      this.name = name;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0716e003f90db334b4898cc2149fcc71e9a4fe4e","date":1420109009,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/FSDirectory.FSIndexOutput#FSIndexOutput(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/FSDirectory.FSIndexOutput#FSIndexOutput(String).mjava","sourceNew":"    public FSIndexOutput(String name) throws IOException {\n      super(\"FSIndexOutput(path=\\\"\" + directory.resolve(name) + \"\\\")\", new FilterOutputStream(Files.newOutputStream(directory.resolve(name))) {\n        // This implementation ensures, that we never write more than CHUNK_SIZE bytes:\n        @Override\n        public void write(byte[] b, int offset, int length) throws IOException {\n          while (length > 0) {\n            final int chunk = Math.min(length, CHUNK_SIZE);\n            out.write(b, offset, chunk);\n            length -= chunk;\n            offset += chunk;\n          }\n        }\n      }, CHUNK_SIZE);\n    }\n\n","sourceOld":"    public FSIndexOutput(String name) throws IOException {\n      super(\"FSIndexOutput(path=\\\"\" + directory.resolve(name) + \"\\\")\", new FilterOutputStream(Files.newOutputStream(directory.resolve(name))) {\n        // This implementation ensures, that we never write more than CHUNK_SIZE bytes:\n        @Override\n        public void write(byte[] b, int offset, int length) throws IOException {\n          while (length > 0) {\n            final int chunk = Math.min(length, CHUNK_SIZE);\n            out.write(b, offset, chunk);\n            length -= chunk;\n            offset += chunk;\n          }\n        }\n      }, CHUNK_SIZE);\n      this.name = name;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"867e3d9153fb761456b54a9dcce566e1545c5ef6","date":1444903098,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/FSDirectory.FSIndexOutput#FSIndexOutput(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/FSDirectory.FSIndexOutput#FSIndexOutput(String).mjava","sourceNew":"    public FSIndexOutput(String name) throws IOException {\n      this(name, StandardOpenOption.CREATE, StandardOpenOption.TRUNCATE_EXISTING, StandardOpenOption.WRITE);\n    }\n\n","sourceOld":"    public FSIndexOutput(String name) throws IOException {\n      super(\"FSIndexOutput(path=\\\"\" + directory.resolve(name) + \"\\\")\", new FilterOutputStream(Files.newOutputStream(directory.resolve(name))) {\n        // This implementation ensures, that we never write more than CHUNK_SIZE bytes:\n        @Override\n        public void write(byte[] b, int offset, int length) throws IOException {\n          while (length > 0) {\n            final int chunk = Math.min(length, CHUNK_SIZE);\n            out.write(b, offset, chunk);\n            length -= chunk;\n            offset += chunk;\n          }\n        }\n      }, CHUNK_SIZE);\n    }\n\n","bugFix":null,"bugIntro":["11c6df42fb3eba174c3ca0d9a5194eaecd893b77"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"11c6df42fb3eba174c3ca0d9a5194eaecd893b77","date":1465931757,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/FSDirectory.FSIndexOutput#FSIndexOutput(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/FSDirectory.FSIndexOutput#FSIndexOutput(String).mjava","sourceNew":"    public FSIndexOutput(String name) throws IOException {\n      this(name, StandardOpenOption.WRITE, StandardOpenOption.CREATE_NEW);\n    }\n\n","sourceOld":"    public FSIndexOutput(String name) throws IOException {\n      this(name, StandardOpenOption.CREATE, StandardOpenOption.TRUNCATE_EXISTING, StandardOpenOption.WRITE);\n    }\n\n","bugFix":["867e3d9153fb761456b54a9dcce566e1545c5ef6"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/store/FSDirectory.FSIndexOutput#FSIndexOutput(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/FSDirectory.FSIndexOutput#FSIndexOutput(String).mjava","sourceNew":"    public FSIndexOutput(String name) throws IOException {\n      this(name, StandardOpenOption.WRITE, StandardOpenOption.CREATE_NEW);\n    }\n\n","sourceOld":"    public FSIndexOutput(String name) throws IOException {\n      this(name, StandardOpenOption.CREATE, StandardOpenOption.TRUNCATE_EXISTING, StandardOpenOption.WRITE);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bce1e2aee8b16573bc0d091471e4660d140b5823":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0716e003f90db334b4898cc2149fcc71e9a4fe4e":["8833cc981e4be2dcfe8c6b5ca2781c59e1124a60"],"8833cc981e4be2dcfe8c6b5ca2781c59e1124a60":["f4abec28b874149a7223e32cc7a01704c27790de"],"11c6df42fb3eba174c3ca0d9a5194eaecd893b77":["867e3d9153fb761456b54a9dcce566e1545c5ef6"],"b7605579001505896d48b07160075a5c8b8e128e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","bce1e2aee8b16573bc0d091471e4660d140b5823"],"f4abec28b874149a7223e32cc7a01704c27790de":["bce1e2aee8b16573bc0d091471e4660d140b5823"],"867e3d9153fb761456b54a9dcce566e1545c5ef6":["0716e003f90db334b4898cc2149fcc71e9a4fe4e"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["867e3d9153fb761456b54a9dcce566e1545c5ef6","11c6df42fb3eba174c3ca0d9a5194eaecd893b77"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["11c6df42fb3eba174c3ca0d9a5194eaecd893b77"]},"commit2Childs":{"bce1e2aee8b16573bc0d091471e4660d140b5823":["b7605579001505896d48b07160075a5c8b8e128e","f4abec28b874149a7223e32cc7a01704c27790de"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bce1e2aee8b16573bc0d091471e4660d140b5823","b7605579001505896d48b07160075a5c8b8e128e"],"0716e003f90db334b4898cc2149fcc71e9a4fe4e":["867e3d9153fb761456b54a9dcce566e1545c5ef6"],"8833cc981e4be2dcfe8c6b5ca2781c59e1124a60":["0716e003f90db334b4898cc2149fcc71e9a4fe4e"],"11c6df42fb3eba174c3ca0d9a5194eaecd893b77":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b7605579001505896d48b07160075a5c8b8e128e":[],"f4abec28b874149a7223e32cc7a01704c27790de":["8833cc981e4be2dcfe8c6b5ca2781c59e1124a60"],"867e3d9153fb761456b54a9dcce566e1545c5ef6":["11c6df42fb3eba174c3ca0d9a5194eaecd893b77","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7605579001505896d48b07160075a5c8b8e128e","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}