{"path":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/Plane#intersects(PlanetModel,Plane,GeoPoint[],GeoPoint[],Membership[],Membership...).mjava","commits":[{"id":"f9f97ca977ad649f14b4f60a888adef2edd7a64e","date":1432702490,"type":1,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/Plane#intersects(PlanetModel,Plane,GeoPoint[],GeoPoint[],Membership[],Membership...).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/Plane#intersects(Plane,GeoPoint[],GeoPoint[],Membership[],Membership...).mjava","sourceNew":"  /**\n   * Determine whether the plane intersects another plane within the\n   * bounds provided.\n   *\n   * @param planetModel is the planet model to use in determining intersection.\n   * @param q                 is the other plane.\n   * @param notablePoints     are points to look at to disambiguate cases when the two planes are identical.\n   * @param moreNotablePoints are additional points to look at to disambiguate cases when the two planes are identical.\n   * @param bounds            is one part of the bounds.\n   * @param moreBounds        are more bounds.\n   * @return true if there's an intersection.\n   */\n  public boolean intersects(final PlanetModel planetModel, final Plane q, final GeoPoint[] notablePoints, final GeoPoint[] moreNotablePoints, final Membership[] bounds, final Membership... moreBounds) {\n    //System.err.println(\"Does plane \"+this+\" intersect with plane \"+q);\n    // If the two planes are identical, then the math will find no points of intersection.\n    // So a special case of this is to check for plane equality.  But that is not enough, because\n    // what we really need at that point is to determine whether overlap occurs between the two parts of the intersection\n    // of plane and circle.  That is, are there *any* points on the plane that are within the bounds described?\n    if (isNumericallyIdentical(q)) {\n      //System.err.println(\" Identical plane\");\n      // The only way to efficiently figure this out will be to have a list of trial points available to evaluate.\n      // We look for any point that fulfills all the bounds.\n      for (GeoPoint p : notablePoints) {\n        if (meetsAllBounds(p, bounds, moreBounds)) {\n          //System.err.println(\"  found a notable point in bounds, so intersects\");\n          return true;\n        }\n      }\n      for (GeoPoint p : moreNotablePoints) {\n        if (meetsAllBounds(p, bounds, moreBounds)) {\n          //System.err.println(\"  found a notable point in bounds, so intersects\");\n          return true;\n        }\n      }\n      //System.err.println(\"  no notable points inside found; no intersection\");\n      return false;\n    }\n    return findIntersections(planetModel, q, bounds, moreBounds).length > 0;\n  }\n\n","sourceOld":"  /**\n   * Determine whether the plane intersects another plane within the\n   * bounds provided.\n   *\n   * @param q                 is the other plane.\n   * @param notablePoints     are points to look at to disambiguate cases when the two planes are identical.\n   * @param moreNotablePoints are additional points to look at to disambiguate cases when the two planes are identical.\n   * @param bounds            is one part of the bounds.\n   * @param moreBounds        are more bounds.\n   * @return true if there's an intersection.\n   */\n  public boolean intersects(final Plane q, final GeoPoint[] notablePoints, final GeoPoint[] moreNotablePoints, final Membership[] bounds, final Membership... moreBounds) {\n    //System.err.println(\"Does plane \"+this+\" intersect with plane \"+q);\n    // If the two planes are identical, then the math will find no points of intersection.\n    // So a special case of this is to check for plane equality.  But that is not enough, because\n    // what we really need at that point is to determine whether overlap occurs between the two parts of the intersection\n    // of plane and circle.  That is, are there *any* points on the plane that are within the bounds described?\n    if (isNumericallyIdentical(q)) {\n      //System.err.println(\" Identical plane\");\n      // The only way to efficiently figure this out will be to have a list of trial points available to evaluate.\n      // We look for any point that fulfills all the bounds.\n      for (GeoPoint p : notablePoints) {\n        if (meetsAllBounds(p, bounds, moreBounds)) {\n          //System.err.println(\"  found a notable point in bounds, so intersects\");\n          return true;\n        }\n      }\n      for (GeoPoint p : moreNotablePoints) {\n        if (meetsAllBounds(p, bounds, moreBounds)) {\n          //System.err.println(\"  found a notable point in bounds, so intersects\");\n          return true;\n        }\n      }\n      //System.err.println(\"  no notable points inside found; no intersection\");\n      return false;\n    }\n    return findIntersections(q, bounds, moreBounds).length > 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fec06d6753751ae302c7d35866763e6cb414112d","date":1433250698,"type":1,"author":"David Wayne Smiley","isMerge":true,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/Plane#intersects(PlanetModel,Plane,GeoPoint[],GeoPoint[],Membership[],Membership...).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/Plane#intersects(Plane,GeoPoint[],GeoPoint[],Membership[],Membership...).mjava","sourceNew":"  /**\n   * Determine whether the plane intersects another plane within the\n   * bounds provided.\n   *\n   * @param planetModel is the planet model to use in determining intersection.\n   * @param q                 is the other plane.\n   * @param notablePoints     are points to look at to disambiguate cases when the two planes are identical.\n   * @param moreNotablePoints are additional points to look at to disambiguate cases when the two planes are identical.\n   * @param bounds            is one part of the bounds.\n   * @param moreBounds        are more bounds.\n   * @return true if there's an intersection.\n   */\n  public boolean intersects(final PlanetModel planetModel, final Plane q, final GeoPoint[] notablePoints, final GeoPoint[] moreNotablePoints, final Membership[] bounds, final Membership... moreBounds) {\n    //System.err.println(\"Does plane \"+this+\" intersect with plane \"+q);\n    // If the two planes are identical, then the math will find no points of intersection.\n    // So a special case of this is to check for plane equality.  But that is not enough, because\n    // what we really need at that point is to determine whether overlap occurs between the two parts of the intersection\n    // of plane and circle.  That is, are there *any* points on the plane that are within the bounds described?\n    if (isNumericallyIdentical(q)) {\n      //System.err.println(\" Identical plane\");\n      // The only way to efficiently figure this out will be to have a list of trial points available to evaluate.\n      // We look for any point that fulfills all the bounds.\n      for (GeoPoint p : notablePoints) {\n        if (meetsAllBounds(p, bounds, moreBounds)) {\n          //System.err.println(\"  found a notable point in bounds, so intersects\");\n          return true;\n        }\n      }\n      for (GeoPoint p : moreNotablePoints) {\n        if (meetsAllBounds(p, bounds, moreBounds)) {\n          //System.err.println(\"  found a notable point in bounds, so intersects\");\n          return true;\n        }\n      }\n      //System.err.println(\"  no notable points inside found; no intersection\");\n      return false;\n    }\n    return findIntersections(planetModel, q, bounds, moreBounds).length > 0;\n  }\n\n","sourceOld":"  /**\n   * Determine whether the plane intersects another plane within the\n   * bounds provided.\n   *\n   * @param q                 is the other plane.\n   * @param notablePoints     are points to look at to disambiguate cases when the two planes are identical.\n   * @param moreNotablePoints are additional points to look at to disambiguate cases when the two planes are identical.\n   * @param bounds            is one part of the bounds.\n   * @param moreBounds        are more bounds.\n   * @return true if there's an intersection.\n   */\n  public boolean intersects(final Plane q, final GeoPoint[] notablePoints, final GeoPoint[] moreNotablePoints, final Membership[] bounds, final Membership... moreBounds) {\n    //System.err.println(\"Does plane \"+this+\" intersect with plane \"+q);\n    // If the two planes are identical, then the math will find no points of intersection.\n    // So a special case of this is to check for plane equality.  But that is not enough, because\n    // what we really need at that point is to determine whether overlap occurs between the two parts of the intersection\n    // of plane and circle.  That is, are there *any* points on the plane that are within the bounds described?\n    if (isNumericallyIdentical(q)) {\n      //System.err.println(\" Identical plane\");\n      // The only way to efficiently figure this out will be to have a list of trial points available to evaluate.\n      // We look for any point that fulfills all the bounds.\n      for (GeoPoint p : notablePoints) {\n        if (meetsAllBounds(p, bounds, moreBounds)) {\n          //System.err.println(\"  found a notable point in bounds, so intersects\");\n          return true;\n        }\n      }\n      for (GeoPoint p : moreNotablePoints) {\n        if (meetsAllBounds(p, bounds, moreBounds)) {\n          //System.err.println(\"  found a notable point in bounds, so intersects\");\n          return true;\n        }\n      }\n      //System.err.println(\"  no notable points inside found; no intersection\");\n      return false;\n    }\n    return findIntersections(q, bounds, moreBounds).length > 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3022be5842502b7c2a57a5124199bbc30236f0a0","date":1436724252,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/Plane#intersects(PlanetModel,Plane,GeoPoint[],GeoPoint[],Membership[],Membership...).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/Plane#intersects(PlanetModel,Plane,GeoPoint[],GeoPoint[],Membership[],Membership...).mjava","sourceNew":"  /**\n   * Determine whether the plane intersects another plane within the\n   * bounds provided.\n   *\n   * @param planetModel is the planet model to use in determining intersection.\n   * @param q                 is the other plane.\n   * @param notablePoints     are points to look at to disambiguate cases when the two planes are identical.\n   * @param moreNotablePoints are additional points to look at to disambiguate cases when the two planes are identical.\n   * @param bounds            is one part of the bounds.\n   * @param moreBounds        are more bounds.\n   * @return true if there's an intersection.\n   */\n  public boolean intersects(final PlanetModel planetModel, final Plane q, final GeoPoint[] notablePoints, final GeoPoint[] moreNotablePoints, final Membership[] bounds, final Membership... moreBounds) {\n    //System.err.println(\"Does plane \"+this+\" intersect with plane \"+q);\n    // If the two planes are identical, then the math will find no points of intersection.\n    // So a special case of this is to check for plane equality.  But that is not enough, because\n    // what we really need at that point is to determine whether overlap occurs between the two parts of the intersection\n    // of plane and circle.  That is, are there *any* points on the plane that are within the bounds described?\n    if (isNumericallyIdentical(q)) {\n      //System.err.println(\" Identical plane\");\n      // The only way to efficiently figure this out will be to have a list of trial points available to evaluate.\n      // We look for any point that fulfills all the bounds.\n      for (GeoPoint p : notablePoints) {\n        if (meetsAllBounds(p, bounds, moreBounds)) {\n          //System.err.println(\"  found a notable point in bounds, so intersects\");\n          return true;\n        }\n      }\n      for (GeoPoint p : moreNotablePoints) {\n        if (meetsAllBounds(p, bounds, moreBounds)) {\n          //System.err.println(\"  found a notable point in bounds, so intersects\");\n          return true;\n        }\n      }\n      //System.err.println(\"  no notable points inside found; no intersection\");\n      return false;\n    }\n    return findIntersections(planetModel, q, bounds, moreBounds).length > 0;\n  }\n\n","sourceOld":"  /**\n   * Determine whether the plane intersects another plane within the\n   * bounds provided.\n   *\n   * @param planetModel is the planet model to use in determining intersection.\n   * @param q                 is the other plane.\n   * @param notablePoints     are points to look at to disambiguate cases when the two planes are identical.\n   * @param moreNotablePoints are additional points to look at to disambiguate cases when the two planes are identical.\n   * @param bounds            is one part of the bounds.\n   * @param moreBounds        are more bounds.\n   * @return true if there's an intersection.\n   */\n  public boolean intersects(final PlanetModel planetModel, final Plane q, final GeoPoint[] notablePoints, final GeoPoint[] moreNotablePoints, final Membership[] bounds, final Membership... moreBounds) {\n    //System.err.println(\"Does plane \"+this+\" intersect with plane \"+q);\n    // If the two planes are identical, then the math will find no points of intersection.\n    // So a special case of this is to check for plane equality.  But that is not enough, because\n    // what we really need at that point is to determine whether overlap occurs between the two parts of the intersection\n    // of plane and circle.  That is, are there *any* points on the plane that are within the bounds described?\n    if (isNumericallyIdentical(q)) {\n      //System.err.println(\" Identical plane\");\n      // The only way to efficiently figure this out will be to have a list of trial points available to evaluate.\n      // We look for any point that fulfills all the bounds.\n      for (GeoPoint p : notablePoints) {\n        if (meetsAllBounds(p, bounds, moreBounds)) {\n          //System.err.println(\"  found a notable point in bounds, so intersects\");\n          return true;\n        }\n      }\n      for (GeoPoint p : moreNotablePoints) {\n        if (meetsAllBounds(p, bounds, moreBounds)) {\n          //System.err.println(\"  found a notable point in bounds, so intersects\");\n          return true;\n        }\n      }\n      //System.err.println(\"  no notable points inside found; no intersection\");\n      return false;\n    }\n    return findIntersections(planetModel, q, bounds, moreBounds).length > 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fec06d6753751ae302c7d35866763e6cb414112d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f9f97ca977ad649f14b4f60a888adef2edd7a64e"],"3022be5842502b7c2a57a5124199bbc30236f0a0":["fec06d6753751ae302c7d35866763e6cb414112d"],"f9f97ca977ad649f14b4f60a888adef2edd7a64e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3022be5842502b7c2a57a5124199bbc30236f0a0"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fec06d6753751ae302c7d35866763e6cb414112d","f9f97ca977ad649f14b4f60a888adef2edd7a64e"],"fec06d6753751ae302c7d35866763e6cb414112d":["3022be5842502b7c2a57a5124199bbc30236f0a0"],"3022be5842502b7c2a57a5124199bbc30236f0a0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f9f97ca977ad649f14b4f60a888adef2edd7a64e":["fec06d6753751ae302c7d35866763e6cb414112d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}