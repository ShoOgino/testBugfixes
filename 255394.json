{"path":"solr/core/src/test/org/apache/solr/legacy/TestLegacyTerms#testDoubleFieldMinMax().mjava","commits":[{"id":"a178ac3dec643551e66363c457a9074f55545f86","date":1496133188,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/legacy/TestLegacyTerms#testDoubleFieldMinMax().mjava","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/legacy/TestLegacyTerms#testDoubleFieldMinMax().mjava","sourceNew":"  public void testDoubleFieldMinMax() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    int numDocs = atLeast(100);\n    double minValue = Double.POSITIVE_INFINITY;\n    double maxValue = Double.NEGATIVE_INFINITY;\n    for(int i=0;i<numDocs;i++ ){\n      Document doc = new Document();\n      double num = random().nextDouble();\n      minValue = Math.min(num, minValue);\n      maxValue = Math.max(num, maxValue);\n      doc.add(new LegacyDoubleField(\"field\", num, Field.Store.NO));\n      w.addDocument(doc);\n    }\n    \n    IndexReader r = w.getReader();\n\n    Terms terms = MultiFields.getTerms(r, \"field\");\n\n    assertEquals(minValue, NumericUtils.sortableLongToDouble(LegacyNumericUtils.getMinLong(terms)), 0.0);\n    assertEquals(maxValue, NumericUtils.sortableLongToDouble(LegacyNumericUtils.getMaxLong(terms)), 0.0);\n\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDoubleFieldMinMax() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    int numDocs = atLeast(100);\n    double minValue = Double.POSITIVE_INFINITY;\n    double maxValue = Double.NEGATIVE_INFINITY;\n    for(int i=0;i<numDocs;i++ ){\n      Document doc = new Document();\n      double num = random().nextDouble();\n      minValue = Math.min(num, minValue);\n      maxValue = Math.max(num, maxValue);\n      doc.add(new LegacyDoubleField(\"field\", num, Field.Store.NO));\n      w.addDocument(doc);\n    }\n    \n    IndexReader r = w.getReader();\n\n    Terms terms = MultiFields.getTerms(r, \"field\");\n\n    assertEquals(minValue, NumericUtils.sortableLongToDouble(LegacyNumericUtils.getMinLong(terms)), 0.0);\n    assertEquals(maxValue, NumericUtils.sortableLongToDouble(LegacyNumericUtils.getMaxLong(terms)), 0.0);\n\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1f5728f32a4a256b36cfabd7a2636452f599bb9","date":1496231774,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/legacy/TestLegacyTerms#testDoubleFieldMinMax().mjava","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/legacy/TestLegacyTerms#testDoubleFieldMinMax().mjava","sourceNew":"  public void testDoubleFieldMinMax() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    int numDocs = atLeast(100);\n    double minValue = Double.POSITIVE_INFINITY;\n    double maxValue = Double.NEGATIVE_INFINITY;\n    for(int i=0;i<numDocs;i++ ){\n      Document doc = new Document();\n      double num = random().nextDouble();\n      minValue = Math.min(num, minValue);\n      maxValue = Math.max(num, maxValue);\n      doc.add(new LegacyDoubleField(\"field\", num, Field.Store.NO));\n      w.addDocument(doc);\n    }\n    \n    IndexReader r = w.getReader();\n\n    Terms terms = MultiFields.getTerms(r, \"field\");\n\n    assertEquals(minValue, NumericUtils.sortableLongToDouble(LegacyNumericUtils.getMinLong(terms)), 0.0);\n    assertEquals(maxValue, NumericUtils.sortableLongToDouble(LegacyNumericUtils.getMaxLong(terms)), 0.0);\n\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDoubleFieldMinMax() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    int numDocs = atLeast(100);\n    double minValue = Double.POSITIVE_INFINITY;\n    double maxValue = Double.NEGATIVE_INFINITY;\n    for(int i=0;i<numDocs;i++ ){\n      Document doc = new Document();\n      double num = random().nextDouble();\n      minValue = Math.min(num, minValue);\n      maxValue = Math.max(num, maxValue);\n      doc.add(new LegacyDoubleField(\"field\", num, Field.Store.NO));\n      w.addDocument(doc);\n    }\n    \n    IndexReader r = w.getReader();\n\n    Terms terms = MultiFields.getTerms(r, \"field\");\n\n    assertEquals(minValue, NumericUtils.sortableLongToDouble(LegacyNumericUtils.getMinLong(terms)), 0.0);\n    assertEquals(maxValue, NumericUtils.sortableLongToDouble(LegacyNumericUtils.getMaxLong(terms)), 0.0);\n\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":1,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/legacy/TestLegacyTerms#testDoubleFieldMinMax().mjava","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/legacy/TestLegacyTerms#testDoubleFieldMinMax().mjava","sourceNew":"  public void testDoubleFieldMinMax() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    int numDocs = atLeast(100);\n    double minValue = Double.POSITIVE_INFINITY;\n    double maxValue = Double.NEGATIVE_INFINITY;\n    for(int i=0;i<numDocs;i++ ){\n      Document doc = new Document();\n      double num = random().nextDouble();\n      minValue = Math.min(num, minValue);\n      maxValue = Math.max(num, maxValue);\n      doc.add(new LegacyDoubleField(\"field\", num, Field.Store.NO));\n      w.addDocument(doc);\n    }\n    \n    IndexReader r = w.getReader();\n\n    Terms terms = MultiFields.getTerms(r, \"field\");\n\n    assertEquals(minValue, NumericUtils.sortableLongToDouble(LegacyNumericUtils.getMinLong(terms)), 0.0);\n    assertEquals(maxValue, NumericUtils.sortableLongToDouble(LegacyNumericUtils.getMaxLong(terms)), 0.0);\n\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDoubleFieldMinMax() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    int numDocs = atLeast(100);\n    double minValue = Double.POSITIVE_INFINITY;\n    double maxValue = Double.NEGATIVE_INFINITY;\n    for(int i=0;i<numDocs;i++ ){\n      Document doc = new Document();\n      double num = random().nextDouble();\n      minValue = Math.min(num, minValue);\n      maxValue = Math.max(num, maxValue);\n      doc.add(new LegacyDoubleField(\"field\", num, Field.Store.NO));\n      w.addDocument(doc);\n    }\n    \n    IndexReader r = w.getReader();\n\n    Terms terms = MultiFields.getTerms(r, \"field\");\n\n    assertEquals(minValue, NumericUtils.sortableLongToDouble(LegacyNumericUtils.getMinLong(terms)), 0.0);\n    assertEquals(maxValue, NumericUtils.sortableLongToDouble(LegacyNumericUtils.getMaxLong(terms)), 0.0);\n\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"04e775de416dd2d8067b10db1c8af975a1d5017e","date":1539906554,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/legacy/TestLegacyTerms#testDoubleFieldMinMax().mjava","pathOld":"solr/core/src/test/org/apache/solr/legacy/TestLegacyTerms#testDoubleFieldMinMax().mjava","sourceNew":"  public void testDoubleFieldMinMax() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    int numDocs = atLeast(100);\n    double minValue = Double.POSITIVE_INFINITY;\n    double maxValue = Double.NEGATIVE_INFINITY;\n    for(int i=0;i<numDocs;i++ ){\n      Document doc = new Document();\n      double num = random().nextDouble();\n      minValue = Math.min(num, minValue);\n      maxValue = Math.max(num, maxValue);\n      doc.add(new LegacyDoubleField(\"field\", num, Field.Store.NO));\n      w.addDocument(doc);\n    }\n    \n    IndexReader r = w.getReader();\n\n    Terms terms = MultiTerms.getTerms(r, \"field\");\n\n    assertEquals(minValue, NumericUtils.sortableLongToDouble(LegacyNumericUtils.getMinLong(terms)), 0.0);\n    assertEquals(maxValue, NumericUtils.sortableLongToDouble(LegacyNumericUtils.getMaxLong(terms)), 0.0);\n\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDoubleFieldMinMax() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    int numDocs = atLeast(100);\n    double minValue = Double.POSITIVE_INFINITY;\n    double maxValue = Double.NEGATIVE_INFINITY;\n    for(int i=0;i<numDocs;i++ ){\n      Document doc = new Document();\n      double num = random().nextDouble();\n      minValue = Math.min(num, minValue);\n      maxValue = Math.max(num, maxValue);\n      doc.add(new LegacyDoubleField(\"field\", num, Field.Store.NO));\n      w.addDocument(doc);\n    }\n    \n    IndexReader r = w.getReader();\n\n    Terms terms = MultiFields.getTerms(r, \"field\");\n\n    assertEquals(minValue, NumericUtils.sortableLongToDouble(LegacyNumericUtils.getMinLong(terms)), 0.0);\n    assertEquals(maxValue, NumericUtils.sortableLongToDouble(LegacyNumericUtils.getMaxLong(terms)), 0.0);\n\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a178ac3dec643551e66363c457a9074f55545f86":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a178ac3dec643551e66363c457a9074f55545f86"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"04e775de416dd2d8067b10db1c8af975a1d5017e":["d1f5728f32a4a256b36cfabd7a2636452f599bb9"],"d1f5728f32a4a256b36cfabd7a2636452f599bb9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a178ac3dec643551e66363c457a9074f55545f86"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["04e775de416dd2d8067b10db1c8af975a1d5017e"]},"commit2Childs":{"a178ac3dec643551e66363c457a9074f55545f86":["e9017cf144952056066919f1ebc7897ff9bd71b1","d1f5728f32a4a256b36cfabd7a2636452f599bb9"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a178ac3dec643551e66363c457a9074f55545f86","e9017cf144952056066919f1ebc7897ff9bd71b1","d1f5728f32a4a256b36cfabd7a2636452f599bb9"],"04e775de416dd2d8067b10db1c8af975a1d5017e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d1f5728f32a4a256b36cfabd7a2636452f599bb9":["04e775de416dd2d8067b10db1c8af975a1d5017e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}