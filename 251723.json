{"path":"lucene/suggest/src/java/org/apache/lucene/search/suggest/jaspell/JaspellTernarySearchTrie#matchPrefix(CharSequence,int).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/jaspell/JaspellTernarySearchTrie#matchPrefix(CharSequence,int).mjava","pathOld":"modules/suggest/src/java/org/apache/lucene/search/suggest/jaspell/JaspellTernarySearchTrie#matchPrefix(CharSequence,int).mjava","sourceNew":"  /**\n   * Returns an alphabetical <code>List</code> of all keys in the trie that\n   * begin with a given prefix. Only keys for nodes having non-null data are\n   * included in the <code>List</code>.\n   * \n   *@param prefix\n   *          Each key returned from this method will begin with the characters\n   *          in prefix.\n   *@param numReturnValues\n   *          The maximum number of values returned from this method.\n   *@return A <code>List</code> with the results\n   */\n  public List<String> matchPrefix(CharSequence prefix, int numReturnValues) {\n    Vector<String> sortKeysResult = new Vector<String>();\n    TSTNode startNode = getNode(prefix);\n    if (startNode == null) {\n      return sortKeysResult;\n    }\n    if (startNode.data != null) {\n      sortKeysResult.addElement(getKey(startNode));\n    }\n    return sortKeysRecursion(startNode.relatives[TSTNode.EQKID],\n            ((numReturnValues < 0) ? -1 : numReturnValues), sortKeysResult);\n  }\n\n","sourceOld":"  /**\n   * Returns an alphabetical <code>List</code> of all keys in the trie that\n   * begin with a given prefix. Only keys for nodes having non-null data are\n   * included in the <code>List</code>.\n   * \n   *@param prefix\n   *          Each key returned from this method will begin with the characters\n   *          in prefix.\n   *@param numReturnValues\n   *          The maximum number of values returned from this method.\n   *@return A <code>List</code> with the results\n   */\n  public List<String> matchPrefix(CharSequence prefix, int numReturnValues) {\n    Vector<String> sortKeysResult = new Vector<String>();\n    TSTNode startNode = getNode(prefix);\n    if (startNode == null) {\n      return sortKeysResult;\n    }\n    if (startNode.data != null) {\n      sortKeysResult.addElement(getKey(startNode));\n    }\n    return sortKeysRecursion(startNode.relatives[TSTNode.EQKID],\n            ((numReturnValues < 0) ? -1 : numReturnValues), sortKeysResult);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/jaspell/JaspellTernarySearchTrie#matchPrefix(CharSequence,int).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/jaspell/JaspellTernarySearchTrie#matchPrefix(CharSequence,int).mjava","sourceNew":"  /**\n   * Returns an alphabetical <code>List</code> of all keys in the trie that\n   * begin with a given prefix. Only keys for nodes having non-null data are\n   * included in the <code>List</code>.\n   * \n   *@param prefix\n   *          Each key returned from this method will begin with the characters\n   *          in prefix.\n   *@param numReturnValues\n   *          The maximum number of values returned from this method.\n   *@return A <code>List</code> with the results\n   */\n  public List<String> matchPrefix(CharSequence prefix, int numReturnValues) {\n    Vector<String> sortKeysResult = new Vector<>();\n    TSTNode startNode = getNode(prefix);\n    if (startNode == null) {\n      return sortKeysResult;\n    }\n    if (startNode.data != null) {\n      sortKeysResult.addElement(getKey(startNode));\n    }\n    return sortKeysRecursion(startNode.relatives[TSTNode.EQKID],\n            ((numReturnValues < 0) ? -1 : numReturnValues), sortKeysResult);\n  }\n\n","sourceOld":"  /**\n   * Returns an alphabetical <code>List</code> of all keys in the trie that\n   * begin with a given prefix. Only keys for nodes having non-null data are\n   * included in the <code>List</code>.\n   * \n   *@param prefix\n   *          Each key returned from this method will begin with the characters\n   *          in prefix.\n   *@param numReturnValues\n   *          The maximum number of values returned from this method.\n   *@return A <code>List</code> with the results\n   */\n  public List<String> matchPrefix(CharSequence prefix, int numReturnValues) {\n    Vector<String> sortKeysResult = new Vector<String>();\n    TSTNode startNode = getNode(prefix);\n    if (startNode == null) {\n      return sortKeysResult;\n    }\n    if (startNode.data != null) {\n      sortKeysResult.addElement(getKey(startNode));\n    }\n    return sortKeysRecursion(startNode.relatives[TSTNode.EQKID],\n            ((numReturnValues < 0) ? -1 : numReturnValues), sortKeysResult);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}