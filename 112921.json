{"path":"src/test/org/apache/solr/OutputWriterTest#testSOLR59responseHeaderVersions().mjava","commits":[{"id":"7aef5adbca53f7820aa6289dda74f595ed816ac7","date":1166101420,"type":0,"author":"Bertrand Delacretaz","isMerge":false,"pathNew":"src/test/org/apache/solr/OutputWriterTest#testSOLR59responseHeaderVersions().mjava","pathOld":"/dev/null","sourceNew":"    /** responseHeader has changed in SOLR-59, check old and new variants */\n    public void testSOLR59responseHeaderVersions() {\n        // default version is 2.2, with \"new\" responseHeader\n        lrf.args.remove(\"version\");\n        lrf.args.put(\"wt\", \"standard\");\n        assertQ(req(\"foo\"), \"/response/lst[@name='responseHeader']/int[@name='status'][.='0']\");\n        lrf.args.remove(\"wt\");\n        assertQ(req(\"foo\"), \"/response/lst[@name='responseHeader']/int[@name='QTime']\");\n        \n        // version=2.1 reverts to old responseHeader\n        lrf.args.put(\"version\", \"2.1\");\n        lrf.args.put(\"wt\", \"standard\");\n        assertQ(req(\"foo\"), \"/response/responseHeader/status[.='0']\");\n        lrf.args.remove(\"wt\");\n        assertQ(req(\"foo\"), \"/response/responseHeader/QTime\");\n\n        // and explicit 2.2 works as default  \n        lrf.args.put(\"version\", \"2.2\");\n        lrf.args.put(\"wt\", \"standard\");\n        assertQ(req(\"foo\"), \"/response/lst[@name='responseHeader']/int[@name='status'][.='0']\");\n        lrf.args.remove(\"wt\");\n        assertQ(req(\"foo\"), \"/response/lst[@name='responseHeader']/int[@name='QTime']\");\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/OutputWriterTest#testSOLR59responseHeaderVersions().mjava","pathOld":"src/test/org/apache/solr/OutputWriterTest#testSOLR59responseHeaderVersions().mjava","sourceNew":"    /** responseHeader has changed in SOLR-59, check old and new variants */\n    public void testSOLR59responseHeaderVersions() {\n        // default version is 2.2, with \"new\" responseHeader\n        lrf.args.remove(\"version\");\n        lrf.args.put(\"wt\", \"standard\");\n        assertQ(req(\"foo\"), \"/response/lst[@name='responseHeader']/int[@name='status'][.='0']\");\n        lrf.args.remove(\"wt\");\n        assertQ(req(\"foo\"), \"/response/lst[@name='responseHeader']/int[@name='QTime']\");\n        \n        // version=2.1 reverts to old responseHeader\n        lrf.args.put(\"version\", \"2.1\");\n        lrf.args.put(\"wt\", \"standard\");\n        assertQ(req(\"foo\"), \"/response/responseHeader/status[.='0']\");\n        lrf.args.remove(\"wt\");\n        assertQ(req(\"foo\"), \"/response/responseHeader/QTime\");\n\n        // and explicit 2.2 works as default  \n        lrf.args.put(\"version\", \"2.2\");\n        lrf.args.put(\"wt\", \"standard\");\n        assertQ(req(\"foo\"), \"/response/lst[@name='responseHeader']/int[@name='status'][.='0']\");\n        lrf.args.remove(\"wt\");\n        assertQ(req(\"foo\"), \"/response/lst[@name='responseHeader']/int[@name='QTime']\");\n    }\n\n","sourceOld":"    /** responseHeader has changed in SOLR-59, check old and new variants */\n    public void testSOLR59responseHeaderVersions() {\n        // default version is 2.2, with \"new\" responseHeader\n        lrf.args.remove(\"version\");\n        lrf.args.put(\"wt\", \"standard\");\n        assertQ(req(\"foo\"), \"/response/lst[@name='responseHeader']/int[@name='status'][.='0']\");\n        lrf.args.remove(\"wt\");\n        assertQ(req(\"foo\"), \"/response/lst[@name='responseHeader']/int[@name='QTime']\");\n        \n        // version=2.1 reverts to old responseHeader\n        lrf.args.put(\"version\", \"2.1\");\n        lrf.args.put(\"wt\", \"standard\");\n        assertQ(req(\"foo\"), \"/response/responseHeader/status[.='0']\");\n        lrf.args.remove(\"wt\");\n        assertQ(req(\"foo\"), \"/response/responseHeader/QTime\");\n\n        // and explicit 2.2 works as default  \n        lrf.args.put(\"version\", \"2.2\");\n        lrf.args.put(\"wt\", \"standard\");\n        assertQ(req(\"foo\"), \"/response/lst[@name='responseHeader']/int[@name='status'][.='0']\");\n        lrf.args.remove(\"wt\");\n        assertQ(req(\"foo\"), \"/response/lst[@name='responseHeader']/int[@name='QTime']\");\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["7aef5adbca53f7820aa6289dda74f595ed816ac7"],"7aef5adbca53f7820aa6289dda74f595ed816ac7":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["7aef5adbca53f7820aa6289dda74f595ed816ac7"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"7aef5adbca53f7820aa6289dda74f595ed816ac7":["ad94625fb8d088209f46650c8097196fec67f00c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}