{"path":"lucene/sandbox/src/test/org/apache/lucene/document/BaseShapeTestCase#verifyRandomPointQueries(IndexReader,Object...).mjava","commits":[{"id":"6afbfd2ecc6d7825f89bbcf75e25046650f937a6","date":1579085873,"type":0,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/BaseShapeTestCase#verifyRandomPointQueries(IndexReader,Object...).mjava","pathOld":"/dev/null","sourceNew":"  /** test random generated point queries */\n  protected void verifyRandomPointQueries(IndexReader reader, Object... shapes) throws Exception {\n    IndexSearcher s = newSearcher(reader);\n\n    final int iters = scaledIterationCount(shapes.length);\n\n    Bits liveDocs = MultiBits.getLiveDocs(s.getIndexReader());\n    int maxDoc = s.getIndexReader().maxDoc();\n\n    for (int iter = 0; iter < iters; ++iter) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + (iter+1) + \" of \" + iters + \" s=\" + s);\n      }\n\n      Object[] queryPoints = nextPoints();\n      QueryRelation queryRelation = RandomPicks.randomFrom(random(), QueryRelation.values());\n      Component2D queryPoly2D;\n      Query query;\n      if (queryRelation == QueryRelation.CONTAINS) {\n        queryPoly2D = toPoint2D(queryPoints[0]);\n        query = newPointsQuery(FIELD_NAME, queryRelation, queryPoints[0]);\n      } else {\n        queryPoly2D = toPoint2D(queryPoints);\n        query = newPointsQuery(FIELD_NAME, queryRelation, queryPoints);\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  query=\" + query + \", relation=\" + queryRelation);\n      }\n\n      final FixedBitSet hits = new FixedBitSet(maxDoc);\n      s.search(query, new SimpleCollector() {\n\n        private int docBase;\n\n        @Override\n        public ScoreMode scoreMode() {\n          return ScoreMode.COMPLETE_NO_SCORES;\n        }\n\n        @Override\n        protected void doSetNextReader(LeafReaderContext context) throws IOException {\n          docBase = context.docBase;\n        }\n\n        @Override\n        public void collect(int doc) throws IOException {\n          hits.set(docBase+doc);\n        }\n      });\n\n      boolean fail = false;\n      NumericDocValues docIDToID = MultiDocValues.getNumericValues(reader, \"id\");\n      for (int docID = 0; docID < maxDoc; ++docID) {\n        assertEquals(docID, docIDToID.nextDoc());\n        int id = (int) docIDToID.longValue();\n        boolean expected;\n\n        if (liveDocs != null && liveDocs.get(docID) == false) {\n          // document is deleted\n          expected = false;\n        } else if (shapes[id] == null) {\n          expected = false;\n        } else {\n          expected = VALIDATOR.setRelation(queryRelation).testComponentQuery(queryPoly2D, shapes[id]);\n        }\n\n        if (hits.get(docID) != expected) {\n          StringBuilder b = new StringBuilder();\n\n          if (expected) {\n            b.append(\"FAIL: id=\" + id + \" should match but did not\\n\");\n          } else {\n            b.append(\"FAIL: id=\" + id + \" should not match but did\\n\");\n          }\n          b.append(\"  relation=\" + queryRelation + \"\\n\");\n          b.append(\"  query=\" + query + \" docID=\" + docID + \"\\n\");\n          if (shapes[id] instanceof Object[]) {\n            b.append(\"  shape=\" + Arrays.toString((Object[]) shapes[id]) + \"\\n\");\n          } else {\n            b.append(\"  shape=\" + shapes[id] + \"\\n\");\n          }\n          b.append(\"  deleted?=\" + (liveDocs != null && liveDocs.get(docID) == false));\n          b.append(\"  rect=Points(\" + Arrays.toString(queryPoints) + \")\\n\");\n          if (true) {\n            fail(\"wrong hit (first of possibly more):\\n\\n\" + b);\n          } else {\n            System.out.println(b.toString());\n            fail = true;\n          }\n        }\n      }\n      if (fail) {\n        fail(\"some hits were wrong\");\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1fb9d9c81bf2e6709854f7e362e5e3a3a3e75f61","date":1579089602,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/BaseShapeTestCase#verifyRandomPointQueries(IndexReader,Object...).mjava","pathOld":"/dev/null","sourceNew":"  /** test random generated point queries */\n  protected void verifyRandomPointQueries(IndexReader reader, Object... shapes) throws Exception {\n    IndexSearcher s = newSearcher(reader);\n\n    final int iters = scaledIterationCount(shapes.length);\n\n    Bits liveDocs = MultiBits.getLiveDocs(s.getIndexReader());\n    int maxDoc = s.getIndexReader().maxDoc();\n\n    for (int iter = 0; iter < iters; ++iter) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + (iter+1) + \" of \" + iters + \" s=\" + s);\n      }\n\n      Object[] queryPoints = nextPoints();\n      QueryRelation queryRelation = RandomPicks.randomFrom(random(), QueryRelation.values());\n      Component2D queryPoly2D;\n      Query query;\n      if (queryRelation == QueryRelation.CONTAINS) {\n        queryPoly2D = toPoint2D(queryPoints[0]);\n        query = newPointsQuery(FIELD_NAME, queryRelation, queryPoints[0]);\n      } else {\n        queryPoly2D = toPoint2D(queryPoints);\n        query = newPointsQuery(FIELD_NAME, queryRelation, queryPoints);\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  query=\" + query + \", relation=\" + queryRelation);\n      }\n\n      final FixedBitSet hits = new FixedBitSet(maxDoc);\n      s.search(query, new SimpleCollector() {\n\n        private int docBase;\n\n        @Override\n        public ScoreMode scoreMode() {\n          return ScoreMode.COMPLETE_NO_SCORES;\n        }\n\n        @Override\n        protected void doSetNextReader(LeafReaderContext context) throws IOException {\n          docBase = context.docBase;\n        }\n\n        @Override\n        public void collect(int doc) throws IOException {\n          hits.set(docBase+doc);\n        }\n      });\n\n      boolean fail = false;\n      NumericDocValues docIDToID = MultiDocValues.getNumericValues(reader, \"id\");\n      for (int docID = 0; docID < maxDoc; ++docID) {\n        assertEquals(docID, docIDToID.nextDoc());\n        int id = (int) docIDToID.longValue();\n        boolean expected;\n\n        if (liveDocs != null && liveDocs.get(docID) == false) {\n          // document is deleted\n          expected = false;\n        } else if (shapes[id] == null) {\n          expected = false;\n        } else {\n          expected = VALIDATOR.setRelation(queryRelation).testComponentQuery(queryPoly2D, shapes[id]);\n        }\n\n        if (hits.get(docID) != expected) {\n          StringBuilder b = new StringBuilder();\n\n          if (expected) {\n            b.append(\"FAIL: id=\" + id + \" should match but did not\\n\");\n          } else {\n            b.append(\"FAIL: id=\" + id + \" should not match but did\\n\");\n          }\n          b.append(\"  relation=\" + queryRelation + \"\\n\");\n          b.append(\"  query=\" + query + \" docID=\" + docID + \"\\n\");\n          if (shapes[id] instanceof Object[]) {\n            b.append(\"  shape=\" + Arrays.toString((Object[]) shapes[id]) + \"\\n\");\n          } else {\n            b.append(\"  shape=\" + shapes[id] + \"\\n\");\n          }\n          b.append(\"  deleted?=\" + (liveDocs != null && liveDocs.get(docID) == false));\n          b.append(\"  rect=Points(\" + Arrays.toString(queryPoints) + \")\\n\");\n          if (true) {\n            fail(\"wrong hit (first of possibly more):\\n\\n\" + b);\n          } else {\n            System.out.println(b.toString());\n            fail = true;\n          }\n        }\n      }\n      if (fail) {\n        fail(\"some hits were wrong\");\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09c1e6d465800c73af60624bf9d4459a19f7940c","date":1579293280,"type":5,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/document/BaseShapeTestCase#verifyRandomPointQueries(IndexReader,Object...).mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/BaseShapeTestCase#verifyRandomPointQueries(IndexReader,Object...).mjava","sourceNew":"  /** test random generated point queries */\n  protected void verifyRandomPointQueries(IndexReader reader, Object... shapes) throws Exception {\n    IndexSearcher s = newSearcher(reader);\n\n    final int iters = scaledIterationCount(shapes.length);\n\n    Bits liveDocs = MultiBits.getLiveDocs(s.getIndexReader());\n    int maxDoc = s.getIndexReader().maxDoc();\n\n    for (int iter = 0; iter < iters; ++iter) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + (iter+1) + \" of \" + iters + \" s=\" + s);\n      }\n\n      Object[] queryPoints = nextPoints();\n      QueryRelation queryRelation = RandomPicks.randomFrom(random(), QueryRelation.values());\n      Component2D queryPoly2D;\n      Query query;\n      if (queryRelation == QueryRelation.CONTAINS) {\n        queryPoly2D = toPoint2D(queryPoints[0]);\n        query = newPointsQuery(FIELD_NAME, queryRelation, queryPoints[0]);\n      } else {\n        queryPoly2D = toPoint2D(queryPoints);\n        query = newPointsQuery(FIELD_NAME, queryRelation, queryPoints);\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  query=\" + query + \", relation=\" + queryRelation);\n      }\n\n      final FixedBitSet hits = new FixedBitSet(maxDoc);\n      s.search(query, new SimpleCollector() {\n\n        private int docBase;\n\n        @Override\n        public ScoreMode scoreMode() {\n          return ScoreMode.COMPLETE_NO_SCORES;\n        }\n\n        @Override\n        protected void doSetNextReader(LeafReaderContext context) throws IOException {\n          docBase = context.docBase;\n        }\n\n        @Override\n        public void collect(int doc) throws IOException {\n          hits.set(docBase+doc);\n        }\n      });\n\n      boolean fail = false;\n      NumericDocValues docIDToID = MultiDocValues.getNumericValues(reader, \"id\");\n      for (int docID = 0; docID < maxDoc; ++docID) {\n        assertEquals(docID, docIDToID.nextDoc());\n        int id = (int) docIDToID.longValue();\n        boolean expected;\n\n        if (liveDocs != null && liveDocs.get(docID) == false) {\n          // document is deleted\n          expected = false;\n        } else if (shapes[id] == null) {\n          expected = false;\n        } else {\n          expected = VALIDATOR.setRelation(queryRelation).testComponentQuery(queryPoly2D, shapes[id]);\n        }\n\n        if (hits.get(docID) != expected) {\n          StringBuilder b = new StringBuilder();\n\n          if (expected) {\n            b.append(\"FAIL: id=\" + id + \" should match but did not\\n\");\n          } else {\n            b.append(\"FAIL: id=\" + id + \" should not match but did\\n\");\n          }\n          b.append(\"  relation=\" + queryRelation + \"\\n\");\n          b.append(\"  query=\" + query + \" docID=\" + docID + \"\\n\");\n          if (shapes[id] instanceof Object[]) {\n            b.append(\"  shape=\" + Arrays.toString((Object[]) shapes[id]) + \"\\n\");\n          } else {\n            b.append(\"  shape=\" + shapes[id] + \"\\n\");\n          }\n          b.append(\"  deleted?=\" + (liveDocs != null && liveDocs.get(docID) == false));\n          b.append(\"  rect=Points(\" + Arrays.toString(queryPoints) + \")\\n\");\n          if (true) {\n            fail(\"wrong hit (first of possibly more):\\n\\n\" + b);\n          } else {\n            System.out.println(b.toString());\n            fail = true;\n          }\n        }\n      }\n      if (fail) {\n        fail(\"some hits were wrong\");\n      }\n    }\n  }\n\n","sourceOld":"  /** test random generated point queries */\n  protected void verifyRandomPointQueries(IndexReader reader, Object... shapes) throws Exception {\n    IndexSearcher s = newSearcher(reader);\n\n    final int iters = scaledIterationCount(shapes.length);\n\n    Bits liveDocs = MultiBits.getLiveDocs(s.getIndexReader());\n    int maxDoc = s.getIndexReader().maxDoc();\n\n    for (int iter = 0; iter < iters; ++iter) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + (iter+1) + \" of \" + iters + \" s=\" + s);\n      }\n\n      Object[] queryPoints = nextPoints();\n      QueryRelation queryRelation = RandomPicks.randomFrom(random(), QueryRelation.values());\n      Component2D queryPoly2D;\n      Query query;\n      if (queryRelation == QueryRelation.CONTAINS) {\n        queryPoly2D = toPoint2D(queryPoints[0]);\n        query = newPointsQuery(FIELD_NAME, queryRelation, queryPoints[0]);\n      } else {\n        queryPoly2D = toPoint2D(queryPoints);\n        query = newPointsQuery(FIELD_NAME, queryRelation, queryPoints);\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  query=\" + query + \", relation=\" + queryRelation);\n      }\n\n      final FixedBitSet hits = new FixedBitSet(maxDoc);\n      s.search(query, new SimpleCollector() {\n\n        private int docBase;\n\n        @Override\n        public ScoreMode scoreMode() {\n          return ScoreMode.COMPLETE_NO_SCORES;\n        }\n\n        @Override\n        protected void doSetNextReader(LeafReaderContext context) throws IOException {\n          docBase = context.docBase;\n        }\n\n        @Override\n        public void collect(int doc) throws IOException {\n          hits.set(docBase+doc);\n        }\n      });\n\n      boolean fail = false;\n      NumericDocValues docIDToID = MultiDocValues.getNumericValues(reader, \"id\");\n      for (int docID = 0; docID < maxDoc; ++docID) {\n        assertEquals(docID, docIDToID.nextDoc());\n        int id = (int) docIDToID.longValue();\n        boolean expected;\n\n        if (liveDocs != null && liveDocs.get(docID) == false) {\n          // document is deleted\n          expected = false;\n        } else if (shapes[id] == null) {\n          expected = false;\n        } else {\n          expected = VALIDATOR.setRelation(queryRelation).testComponentQuery(queryPoly2D, shapes[id]);\n        }\n\n        if (hits.get(docID) != expected) {\n          StringBuilder b = new StringBuilder();\n\n          if (expected) {\n            b.append(\"FAIL: id=\" + id + \" should match but did not\\n\");\n          } else {\n            b.append(\"FAIL: id=\" + id + \" should not match but did\\n\");\n          }\n          b.append(\"  relation=\" + queryRelation + \"\\n\");\n          b.append(\"  query=\" + query + \" docID=\" + docID + \"\\n\");\n          if (shapes[id] instanceof Object[]) {\n            b.append(\"  shape=\" + Arrays.toString((Object[]) shapes[id]) + \"\\n\");\n          } else {\n            b.append(\"  shape=\" + shapes[id] + \"\\n\");\n          }\n          b.append(\"  deleted?=\" + (liveDocs != null && liveDocs.get(docID) == false));\n          b.append(\"  rect=Points(\" + Arrays.toString(queryPoints) + \")\\n\");\n          if (true) {\n            fail(\"wrong hit (first of possibly more):\\n\\n\" + b);\n          } else {\n            System.out.println(b.toString());\n            fail = true;\n          }\n        }\n      }\n      if (fail) {\n        fail(\"some hits were wrong\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6afbfd2ecc6d7825f89bbcf75e25046650f937a6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1fb9d9c81bf2e6709854f7e362e5e3a3a3e75f61":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6afbfd2ecc6d7825f89bbcf75e25046650f937a6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"09c1e6d465800c73af60624bf9d4459a19f7940c":["6afbfd2ecc6d7825f89bbcf75e25046650f937a6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["09c1e6d465800c73af60624bf9d4459a19f7940c"]},"commit2Childs":{"6afbfd2ecc6d7825f89bbcf75e25046650f937a6":["1fb9d9c81bf2e6709854f7e362e5e3a3a3e75f61","09c1e6d465800c73af60624bf9d4459a19f7940c"],"1fb9d9c81bf2e6709854f7e362e5e3a3a3e75f61":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6afbfd2ecc6d7825f89bbcf75e25046650f937a6","1fb9d9c81bf2e6709854f7e362e5e3a3a3e75f61"],"09c1e6d465800c73af60624bf9d4459a19f7940c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1fb9d9c81bf2e6709854f7e362e5e3a3a3e75f61","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}