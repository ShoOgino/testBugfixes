{"path":"solr/core/src/test/org/apache/solr/search/TestMultiWordSynonyms#testEdismaxQueryParsing_multiTermWithPf_shouldParseCorrectPhraseQueries().mjava","commits":[{"id":"c7a49f8dc38a90fbd6c7edac0845981e0b0a7f21","date":1541431969,"type":0,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestMultiWordSynonyms#testEdismaxQueryParsing_multiTermWithPf_shouldParseCorrectPhraseQueries().mjava","pathOld":"/dev/null","sourceNew":"  public void testEdismaxQueryParsing_multiTermWithPf_shouldParseCorrectPhraseQueries() throws Exception {\n    Query q = QParser.getParser(\"foo a b bar\",\"edismax\",true,\n        req(params(\"sow\", \"false\",\"qf\", \"text^10\",\"pf\", \"text^10\",\"pf2\", \"text^5\",\"pf3\", \"text^8\"))).getQuery();\n    assertEquals(\"+(\" +\n        \"((text:foo)^10.0) ((text:a)^10.0) ((text:b)^10.0) (((+text:tropical +text:cyclone) text:bar)^10.0)) \" +\n        \"((spanNear([text:foo, text:a, text:b, spanOr([spanNear([text:tropical, text:cyclone], 0, true), text:bar])], 0, true))^10.0) \" +\n        \"(((text:\\\"foo a\\\")^5.0) ((text:\\\"a b\\\")^5.0) ((spanNear([text:b, spanOr([spanNear([text:tropical, text:cyclone], 0, true), text:bar])], 0, true))^5.0)) \" +\n        \"(((text:\\\"foo a b\\\")^8.0) ((spanNear([text:a, text:b, spanOr([spanNear([text:tropical, text:cyclone], 0, true), text:bar])], 0, true))^8.0))\", q.toString());\n\n    q = QParser.getParser(\"tropical cyclone foo a b \",\"edismax\",true, req(params(\"qf\", \"text^10\",\"pf\", \"text^10\",\"pf2\", \"text^5\",\"pf3\", \"text^8\"))).getQuery();\n    assertEquals(\"+(\" +\n        \"((text:bar (+text:tropical +text:cyclone))^10.0) ((text:foo)^10.0) ((text:a)^10.0) ((text:b)^10.0)) \" +\n        \"((spanNear([spanOr([text:bar, spanNear([text:tropical, text:cyclone], 0, true)]), text:foo, text:a, text:b], 0, true))^10.0) \" +\n        \"(((spanOr([text:bar, spanNear([text:tropical, text:cyclone], 0, true)]))^5.0) ((text:\\\"cyclone foo\\\")^5.0) ((text:\\\"foo a\\\")^5.0) ((text:\\\"a b\\\")^5.0)) \" +\n        \"(((spanNear([spanOr([text:bar, spanNear([text:tropical, text:cyclone], 0, true)]), text:foo], 0, true))^8.0) ((text:\\\"cyclone foo a\\\")^8.0) ((text:\\\"foo a b\\\")^8.0))\", q.toString());\n\n    q = QParser.getParser(\"foo a b tropical cyclone\",\"edismax\",true, req(params(\"qf\", \"text^10\",\"pf\", \"text^10\",\"pf2\", \"text^5\",\"pf3\", \"text^8\"))).getQuery();\n    assertEquals(\"+(\" +\n        \"((text:foo)^10.0) ((text:a)^10.0) ((text:b)^10.0) ((text:bar (+text:tropical +text:cyclone))^10.0)) \" +\n        \"((spanNear([text:foo, text:a, text:b, spanOr([text:bar, spanNear([text:tropical, text:cyclone], 0, true)])], 0, true))^10.0) \" +\n        \"(((text:\\\"foo a\\\")^5.0) ((text:\\\"a b\\\")^5.0) ((text:\\\"b tropical\\\")^5.0) ((spanOr([text:bar, spanNear([text:tropical, text:cyclone], 0, true)]))^5.0)) \" +\n        \"(((text:\\\"foo a b\\\")^8.0) ((text:\\\"a b tropical\\\")^8.0) ((spanNear([text:b, spanOr([text:bar, spanNear([text:tropical, text:cyclone], 0, true)])], 0, true))^8.0))\", q.toString());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"02bf300ae49caa47cd23550d69d6683a61ad89cb","date":1582727554,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestMultiWordSynonyms#testEdismaxQueryParsing_multiTermWithPf_shouldParseCorrectPhraseQueries().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestMultiWordSynonyms#testEdismaxQueryParsing_multiTermWithPf_shouldParseCorrectPhraseQueries().mjava","sourceNew":"  public void testEdismaxQueryParsing_multiTermWithPf_shouldParseCorrectPhraseQueries() throws Exception {\n    Query q = QParser.getParser(\"foo a b bar\",\"edismax\",true,\n        req(params(\"sow\", \"false\",\"qf\", \"text^10\",\"pf\", \"text^10\",\"pf2\", \"text^5\",\"pf3\", \"text^8\"))).getQuery();\n    assertEquals(\"+(\" +\n        \"((text:foo)^10.0) ((text:a)^10.0) ((text:b)^10.0) (((+text:tropical +text:cyclone) text:bar)^10.0)) \" +\n        \"((text:\\\"foo a b tropical cyclone\\\" text:\\\"foo a b bar\\\")^10.0) \" +\n        \"(((text:\\\"foo a\\\")^5.0) ((text:\\\"a b\\\")^5.0) ((text:\\\"b tropical cyclone\\\" text:\\\"b bar\\\")^5.0)) \" +\n        \"(((text:\\\"foo a b\\\")^8.0) ((text:\\\"a b tropical cyclone\\\" text:\\\"a b bar\\\")^8.0))\", q.toString());\n\n    q = QParser.getParser(\"tropical cyclone foo a b \",\"edismax\",true, req(params(\"qf\", \"text^10\",\"pf\", \"text^10\",\"pf2\", \"text^5\",\"pf3\", \"text^8\"))).getQuery();\n    assertEquals(\"+(\" +\n        \"((text:bar (+text:tropical +text:cyclone))^10.0) ((text:foo)^10.0) ((text:a)^10.0) ((text:b)^10.0)) \" +\n        \"((text:\\\"bar foo a b\\\" text:\\\"tropical cyclone foo a b\\\")^10.0) \" +\n        \"(((text:bar text:\\\"tropical cyclone\\\")^5.0) ((text:\\\"cyclone foo\\\")^5.0) ((text:\\\"foo a\\\")^5.0) ((text:\\\"a b\\\")^5.0)) \" +\n        \"(((text:\\\"bar foo\\\" text:\\\"tropical cyclone foo\\\")^8.0) ((text:\\\"cyclone foo a\\\")^8.0) ((text:\\\"foo a b\\\")^8.0))\", q.toString());\n\n    q = QParser.getParser(\"foo a b tropical cyclone\",\"edismax\",true, req(params(\"qf\", \"text^10\",\"pf\", \"text^10\",\"pf2\", \"text^5\",\"pf3\", \"text^8\"))).getQuery();\n    assertEquals(\"+(\" +\n        \"((text:foo)^10.0) ((text:a)^10.0) ((text:b)^10.0) ((text:bar (+text:tropical +text:cyclone))^10.0)) \" +\n        \"((text:\\\"foo a b bar\\\" text:\\\"foo a b tropical cyclone\\\")^10.0) \" +\n        \"(((text:\\\"foo a\\\")^5.0) ((text:\\\"a b\\\")^5.0) ((text:\\\"b tropical\\\")^5.0) ((text:bar text:\\\"tropical cyclone\\\")^5.0)) \" +\n        \"(((text:\\\"foo a b\\\")^8.0) ((text:\\\"a b tropical\\\")^8.0) ((text:\\\"b bar\\\" text:\\\"b tropical cyclone\\\")^8.0))\", q.toString());\n  }\n\n","sourceOld":"  public void testEdismaxQueryParsing_multiTermWithPf_shouldParseCorrectPhraseQueries() throws Exception {\n    Query q = QParser.getParser(\"foo a b bar\",\"edismax\",true,\n        req(params(\"sow\", \"false\",\"qf\", \"text^10\",\"pf\", \"text^10\",\"pf2\", \"text^5\",\"pf3\", \"text^8\"))).getQuery();\n    assertEquals(\"+(\" +\n        \"((text:foo)^10.0) ((text:a)^10.0) ((text:b)^10.0) (((+text:tropical +text:cyclone) text:bar)^10.0)) \" +\n        \"((spanNear([text:foo, text:a, text:b, spanOr([spanNear([text:tropical, text:cyclone], 0, true), text:bar])], 0, true))^10.0) \" +\n        \"(((text:\\\"foo a\\\")^5.0) ((text:\\\"a b\\\")^5.0) ((spanNear([text:b, spanOr([spanNear([text:tropical, text:cyclone], 0, true), text:bar])], 0, true))^5.0)) \" +\n        \"(((text:\\\"foo a b\\\")^8.0) ((spanNear([text:a, text:b, spanOr([spanNear([text:tropical, text:cyclone], 0, true), text:bar])], 0, true))^8.0))\", q.toString());\n\n    q = QParser.getParser(\"tropical cyclone foo a b \",\"edismax\",true, req(params(\"qf\", \"text^10\",\"pf\", \"text^10\",\"pf2\", \"text^5\",\"pf3\", \"text^8\"))).getQuery();\n    assertEquals(\"+(\" +\n        \"((text:bar (+text:tropical +text:cyclone))^10.0) ((text:foo)^10.0) ((text:a)^10.0) ((text:b)^10.0)) \" +\n        \"((spanNear([spanOr([text:bar, spanNear([text:tropical, text:cyclone], 0, true)]), text:foo, text:a, text:b], 0, true))^10.0) \" +\n        \"(((spanOr([text:bar, spanNear([text:tropical, text:cyclone], 0, true)]))^5.0) ((text:\\\"cyclone foo\\\")^5.0) ((text:\\\"foo a\\\")^5.0) ((text:\\\"a b\\\")^5.0)) \" +\n        \"(((spanNear([spanOr([text:bar, spanNear([text:tropical, text:cyclone], 0, true)]), text:foo], 0, true))^8.0) ((text:\\\"cyclone foo a\\\")^8.0) ((text:\\\"foo a b\\\")^8.0))\", q.toString());\n\n    q = QParser.getParser(\"foo a b tropical cyclone\",\"edismax\",true, req(params(\"qf\", \"text^10\",\"pf\", \"text^10\",\"pf2\", \"text^5\",\"pf3\", \"text^8\"))).getQuery();\n    assertEquals(\"+(\" +\n        \"((text:foo)^10.0) ((text:a)^10.0) ((text:b)^10.0) ((text:bar (+text:tropical +text:cyclone))^10.0)) \" +\n        \"((spanNear([text:foo, text:a, text:b, spanOr([text:bar, spanNear([text:tropical, text:cyclone], 0, true)])], 0, true))^10.0) \" +\n        \"(((text:\\\"foo a\\\")^5.0) ((text:\\\"a b\\\")^5.0) ((text:\\\"b tropical\\\")^5.0) ((spanOr([text:bar, spanNear([text:tropical, text:cyclone], 0, true)]))^5.0)) \" +\n        \"(((text:\\\"foo a b\\\")^8.0) ((text:\\\"a b tropical\\\")^8.0) ((spanNear([text:b, spanOr([text:bar, spanNear([text:tropical, text:cyclone], 0, true)])], 0, true))^8.0))\", q.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"02bf300ae49caa47cd23550d69d6683a61ad89cb":["c7a49f8dc38a90fbd6c7edac0845981e0b0a7f21"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["02bf300ae49caa47cd23550d69d6683a61ad89cb"],"c7a49f8dc38a90fbd6c7edac0845981e0b0a7f21":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"02bf300ae49caa47cd23550d69d6683a61ad89cb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c7a49f8dc38a90fbd6c7edac0845981e0b0a7f21"],"c7a49f8dc38a90fbd6c7edac0845981e0b0a7f21":["02bf300ae49caa47cd23550d69d6683a61ad89cb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}