{"path":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene50/TestLucene50NormsFormat#testNormMapRandom().mjava","commits":[{"id":"96d86741fa6ad3b3a96fbf99f5e41bc74784c5f9","date":1434069165,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene50/TestLucene50NormsFormat#testNormMapRandom().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestLucene50NormsFormat#testNormMapRandom().mjava","sourceNew":"  public void testNormMapRandom() {\n\n    Set<Byte> uniqueValuesSet = new HashSet<>();\n    int numUniqValues = TestUtil.nextInt(random(), 1, 256);\n    for (int i = 0; i < numUniqValues; i++) {\n      uniqueValuesSet.add(Byte.valueOf((byte)TestUtil.nextInt(random(), Byte.MIN_VALUE, Byte.MAX_VALUE)));\n    }\n    Byte uniqueValues[] = uniqueValuesSet.toArray(new Byte[uniqueValuesSet.size()]);\n\n    Map<Byte,Integer> freqs = new HashMap<>();\n    NormMap map = new NormMap();\n    int numdocs = TestUtil.nextInt(random(), 1, 100000);\n    for (int i = 0; i < numdocs; i++) {\n      byte value = uniqueValues[random().nextInt(uniqueValues.length)];\n      // now add to both expected and actual\n      map.add(value);\n      if (freqs.containsKey(value)) {\n        freqs.put(value, freqs.get(value) + 1);\n      } else {\n        freqs.put(value, 1);\n      }\n    }\n\n    assertEquals(freqs.size(), map.size);\n    for (Map.Entry<Byte,Integer> kv : freqs.entrySet()) {\n      byte value = kv.getKey();\n      int freq = kv.getValue();\n      int ord = map.ord(value);\n      assertEquals(freq, map.freqs[ord]);\n      assertEquals(value, map.values[ord]);\n    }\n\n    // optimizing should reorder ordinals from greatest to least frequency\n    map.optimizeOrdinals();\n    // recheck consistency\n    assertEquals(freqs.size(), map.size);\n    for (Map.Entry<Byte,Integer> kv : freqs.entrySet()) {\n      byte value = kv.getKey();\n      int freq = kv.getValue();\n      int ord = map.ord(value);\n      assertEquals(freq, map.freqs[ord]);\n      assertEquals(value, map.values[ord]);\n    }\n    // also check descending freq\n    int prevFreq = map.freqs[0];\n    for (int i = 1; i < map.size; ++i) {\n      assertTrue(prevFreq >= map.freqs[i]);\n      prevFreq = map.freqs[i];\n    }\n  }\n\n","sourceOld":"  public void testNormMapRandom() {\n\n    Set<Byte> uniqueValuesSet = new HashSet<>();\n    int numUniqValues = TestUtil.nextInt(random(), 1, 256);\n    for (int i = 0; i < numUniqValues; i++) {\n      uniqueValuesSet.add(Byte.valueOf((byte)TestUtil.nextInt(random(), Byte.MIN_VALUE, Byte.MAX_VALUE)));\n    }\n    Byte uniqueValues[] = uniqueValuesSet.toArray(new Byte[uniqueValuesSet.size()]);\n\n    Map<Byte,Integer> freqs = new HashMap<>();\n    NormMap map = new NormMap();\n    int numdocs = TestUtil.nextInt(random(), 1, 100000);\n    for (int i = 0; i < numdocs; i++) {\n      byte value = uniqueValues[random().nextInt(uniqueValues.length)];\n      // now add to both expected and actual\n      map.add(value);\n      if (freqs.containsKey(value)) {\n        freqs.put(value, freqs.get(value) + 1);\n      } else {\n        freqs.put(value, 1);\n      }\n    }\n\n    assertEquals(freqs.size(), map.size);\n    for (Map.Entry<Byte,Integer> kv : freqs.entrySet()) {\n      byte value = kv.getKey();\n      int freq = kv.getValue();\n      int ord = map.ord(value);\n      assertEquals(freq, map.freqs[ord]);\n      assertEquals(value, map.values[ord]);\n    }\n\n    // optimizing should reorder ordinals from greatest to least frequency\n    map.optimizeOrdinals();\n    // recheck consistency\n    assertEquals(freqs.size(), map.size);\n    for (Map.Entry<Byte,Integer> kv : freqs.entrySet()) {\n      byte value = kv.getKey();\n      int freq = kv.getValue();\n      int ord = map.ord(value);\n      assertEquals(freq, map.freqs[ord]);\n      assertEquals(value, map.values[ord]);\n    }\n    // also check descending freq\n    int prevFreq = map.freqs[0];\n    for (int i = 1; i < map.size; ++i) {\n      assertTrue(prevFreq >= map.freqs[i]);\n      prevFreq = map.freqs[i];\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"52a55f5afb81e4ca7ec581bf1a7b8218204e8af7","date":1472142029,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene50/TestLucene50NormsFormat#testNormMapRandom().mjava","sourceNew":null,"sourceOld":"  public void testNormMapRandom() {\n\n    Set<Byte> uniqueValuesSet = new HashSet<>();\n    int numUniqValues = TestUtil.nextInt(random(), 1, 256);\n    for (int i = 0; i < numUniqValues; i++) {\n      uniqueValuesSet.add(Byte.valueOf((byte)TestUtil.nextInt(random(), Byte.MIN_VALUE, Byte.MAX_VALUE)));\n    }\n    Byte uniqueValues[] = uniqueValuesSet.toArray(new Byte[uniqueValuesSet.size()]);\n\n    Map<Byte,Integer> freqs = new HashMap<>();\n    NormMap map = new NormMap();\n    int numdocs = TestUtil.nextInt(random(), 1, 100000);\n    for (int i = 0; i < numdocs; i++) {\n      byte value = uniqueValues[random().nextInt(uniqueValues.length)];\n      // now add to both expected and actual\n      map.add(value);\n      if (freqs.containsKey(value)) {\n        freqs.put(value, freqs.get(value) + 1);\n      } else {\n        freqs.put(value, 1);\n      }\n    }\n\n    assertEquals(freqs.size(), map.size);\n    for (Map.Entry<Byte,Integer> kv : freqs.entrySet()) {\n      byte value = kv.getKey();\n      int freq = kv.getValue();\n      int ord = map.ord(value);\n      assertEquals(freq, map.freqs[ord]);\n      assertEquals(value, map.values[ord]);\n    }\n\n    // optimizing should reorder ordinals from greatest to least frequency\n    map.optimizeOrdinals();\n    // recheck consistency\n    assertEquals(freqs.size(), map.size);\n    for (Map.Entry<Byte,Integer> kv : freqs.entrySet()) {\n      byte value = kv.getKey();\n      int freq = kv.getValue();\n      int ord = map.ord(value);\n      assertEquals(freq, map.freqs[ord]);\n      assertEquals(value, map.values[ord]);\n    }\n    // also check descending freq\n    int prevFreq = map.freqs[0];\n    for (int i = 1; i < map.size; ++i) {\n      assertTrue(prevFreq >= map.freqs[i]);\n      prevFreq = map.freqs[i];\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a","date":1472163016,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene50/TestLucene50NormsFormat#testNormMapRandom().mjava","sourceNew":null,"sourceOld":"  public void testNormMapRandom() {\n\n    Set<Byte> uniqueValuesSet = new HashSet<>();\n    int numUniqValues = TestUtil.nextInt(random(), 1, 256);\n    for (int i = 0; i < numUniqValues; i++) {\n      uniqueValuesSet.add(Byte.valueOf((byte)TestUtil.nextInt(random(), Byte.MIN_VALUE, Byte.MAX_VALUE)));\n    }\n    Byte uniqueValues[] = uniqueValuesSet.toArray(new Byte[uniqueValuesSet.size()]);\n\n    Map<Byte,Integer> freqs = new HashMap<>();\n    NormMap map = new NormMap();\n    int numdocs = TestUtil.nextInt(random(), 1, 100000);\n    for (int i = 0; i < numdocs; i++) {\n      byte value = uniqueValues[random().nextInt(uniqueValues.length)];\n      // now add to both expected and actual\n      map.add(value);\n      if (freqs.containsKey(value)) {\n        freqs.put(value, freqs.get(value) + 1);\n      } else {\n        freqs.put(value, 1);\n      }\n    }\n\n    assertEquals(freqs.size(), map.size);\n    for (Map.Entry<Byte,Integer> kv : freqs.entrySet()) {\n      byte value = kv.getKey();\n      int freq = kv.getValue();\n      int ord = map.ord(value);\n      assertEquals(freq, map.freqs[ord]);\n      assertEquals(value, map.values[ord]);\n    }\n\n    // optimizing should reorder ordinals from greatest to least frequency\n    map.optimizeOrdinals();\n    // recheck consistency\n    assertEquals(freqs.size(), map.size);\n    for (Map.Entry<Byte,Integer> kv : freqs.entrySet()) {\n      byte value = kv.getKey();\n      int freq = kv.getValue();\n      int ord = map.ord(value);\n      assertEquals(freq, map.freqs[ord]);\n      assertEquals(value, map.values[ord]);\n    }\n    // also check descending freq\n    int prevFreq = map.freqs[0];\n    for (int i = 1; i < map.size; ++i) {\n      assertTrue(prevFreq >= map.freqs[i]);\n      prevFreq = map.freqs[i];\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene50/TestLucene50NormsFormat#testNormMapRandom().mjava","sourceNew":null,"sourceOld":"  public void testNormMapRandom() {\n\n    Set<Byte> uniqueValuesSet = new HashSet<>();\n    int numUniqValues = TestUtil.nextInt(random(), 1, 256);\n    for (int i = 0; i < numUniqValues; i++) {\n      uniqueValuesSet.add(Byte.valueOf((byte)TestUtil.nextInt(random(), Byte.MIN_VALUE, Byte.MAX_VALUE)));\n    }\n    Byte uniqueValues[] = uniqueValuesSet.toArray(new Byte[uniqueValuesSet.size()]);\n\n    Map<Byte,Integer> freqs = new HashMap<>();\n    NormMap map = new NormMap();\n    int numdocs = TestUtil.nextInt(random(), 1, 100000);\n    for (int i = 0; i < numdocs; i++) {\n      byte value = uniqueValues[random().nextInt(uniqueValues.length)];\n      // now add to both expected and actual\n      map.add(value);\n      if (freqs.containsKey(value)) {\n        freqs.put(value, freqs.get(value) + 1);\n      } else {\n        freqs.put(value, 1);\n      }\n    }\n\n    assertEquals(freqs.size(), map.size);\n    for (Map.Entry<Byte,Integer> kv : freqs.entrySet()) {\n      byte value = kv.getKey();\n      int freq = kv.getValue();\n      int ord = map.ord(value);\n      assertEquals(freq, map.freqs[ord]);\n      assertEquals(value, map.values[ord]);\n    }\n\n    // optimizing should reorder ordinals from greatest to least frequency\n    map.optimizeOrdinals();\n    // recheck consistency\n    assertEquals(freqs.size(), map.size);\n    for (Map.Entry<Byte,Integer> kv : freqs.entrySet()) {\n      byte value = kv.getKey();\n      int freq = kv.getValue();\n      int ord = map.ord(value);\n      assertEquals(freq, map.freqs[ord]);\n      assertEquals(value, map.values[ord]);\n    }\n    // also check descending freq\n    int prevFreq = map.freqs[0];\n    for (int i = 1; i < map.size; ++i) {\n      assertTrue(prevFreq >= map.freqs[i]);\n      prevFreq = map.freqs[i];\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"96d86741fa6ad3b3a96fbf99f5e41bc74784c5f9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a":["96d86741fa6ad3b3a96fbf99f5e41bc74784c5f9","52a55f5afb81e4ca7ec581bf1a7b8218204e8af7"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["96d86741fa6ad3b3a96fbf99f5e41bc74784c5f9","e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a"],"52a55f5afb81e4ca7ec581bf1a7b8218204e8af7":["96d86741fa6ad3b3a96fbf99f5e41bc74784c5f9"]},"commit2Childs":{"96d86741fa6ad3b3a96fbf99f5e41bc74784c5f9":["e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","52a55f5afb81e4ca7ec581bf1a7b8218204e8af7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["96d86741fa6ad3b3a96fbf99f5e41bc74784c5f9"],"e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"52a55f5afb81e4ca7ec581bf1a7b8218204e8af7":["e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}