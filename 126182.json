{"path":"solr/core/src/test/org/apache/solr/core/CoreSorterTest#testSort().mjava","commits":[{"id":"e22a92d60a5a6320f9653856966fcd77c60953b3","date":1468676579,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/CoreSorterTest#testSort().mjava","pathOld":"/dev/null","sourceNew":"  public void testSort() throws Exception {\n    CoreContainer mockCC = getMockContainer();\n    MockCoreSorter coreSorter = (MockCoreSorter) new MockCoreSorter().init(mockCC);\n    List<CoreDescriptor> copy = new ArrayList<>(coreSorter.getLocalCores());\n    Collections.sort(copy, coreSorter::compare);\n    List<CountsForEachShard> l = copy.stream()\n        .map(CoreDescriptor::getCloudDescriptor)\n        .map(it -> coreSorter.shardsVsReplicaCounts.get(getShardName(it)))\n        .collect(toList());\n    for (int i = 1; i < l.size(); i++) {\n      CountsForEachShard curr = l.get(i);\n      CountsForEachShard prev = l.get(i-1);\n      assertTrue(CoreSorter.countsComparator.compare(prev, curr) < 1);\n    }\n\n    for (CountsForEachShard c : l) {\n      System.out.println(c);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/CoreSorterTest#testSort().mjava","pathOld":"/dev/null","sourceNew":"  public void testSort() throws Exception {\n    CoreContainer mockCC = getMockContainer();\n    MockCoreSorter coreSorter = (MockCoreSorter) new MockCoreSorter().init(mockCC);\n    List<CoreDescriptor> copy = new ArrayList<>(coreSorter.getLocalCores());\n    Collections.sort(copy, coreSorter::compare);\n    List<CountsForEachShard> l = copy.stream()\n        .map(CoreDescriptor::getCloudDescriptor)\n        .map(it -> coreSorter.shardsVsReplicaCounts.get(getShardName(it)))\n        .collect(toList());\n    for (int i = 1; i < l.size(); i++) {\n      CountsForEachShard curr = l.get(i);\n      CountsForEachShard prev = l.get(i-1);\n      assertTrue(CoreSorter.countsComparator.compare(prev, curr) < 1);\n    }\n\n    for (CountsForEachShard c : l) {\n      System.out.println(c);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"919b9b89b8d44ea491f18a92e6d52efcf5f7a065","date":1585280660,"type":4,"author":"David Smiley","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/core/CoreSorterTest#testSort().mjava","sourceNew":null,"sourceOld":"  public void testSort() throws Exception {\n    CoreContainer mockCC = getMockContainer();\n    MockCoreSorter coreSorter = (MockCoreSorter) new MockCoreSorter().init(mockCC);\n    List<CoreDescriptor> copy = new ArrayList<>(coreSorter.getLocalCores());\n    Collections.sort(copy, coreSorter::compare);\n    List<CountsForEachShard> l = copy.stream()\n        .map(CoreDescriptor::getCloudDescriptor)\n        .map(it -> coreSorter.shardsVsReplicaCounts.get(getShardName(it)))\n        .collect(toList());\n    for (int i = 1; i < l.size(); i++) {\n      CountsForEachShard curr = l.get(i);\n      CountsForEachShard prev = l.get(i-1);\n      assertTrue(CoreSorter.countsComparator.compare(prev, curr) < 1);\n    }\n\n    for (CountsForEachShard c : l) {\n      System.out.println(c);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"919b9b89b8d44ea491f18a92e6d52efcf5f7a065":["e22a92d60a5a6320f9653856966fcd77c60953b3"],"e22a92d60a5a6320f9653856966fcd77c60953b3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e22a92d60a5a6320f9653856966fcd77c60953b3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["919b9b89b8d44ea491f18a92e6d52efcf5f7a065"]},"commit2Childs":{"919b9b89b8d44ea491f18a92e6d52efcf5f7a065":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e22a92d60a5a6320f9653856966fcd77c60953b3":["919b9b89b8d44ea491f18a92e6d52efcf5f7a065","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e22a92d60a5a6320f9653856966fcd77c60953b3","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}