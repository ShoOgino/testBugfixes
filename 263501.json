{"path":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicOperations#isDeterministic(LightAutomaton).mjava","commits":[{"id":"ac34f0c5bb9274821fb0cb18075234e02002e9bf","date":1402508126,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicOperations#isDeterministic(LightAutomaton).mjava","pathOld":"/dev/null","sourceNew":"  public static boolean isDeterministic(LightAutomaton a) {\n    BitSet done = new BitSet(a.getNumStates());\n    List<Integer> queue = new ArrayList<>();\n    queue.add(0);\n    done.set(0);\n    LightAutomaton.Transition t = new LightAutomaton.Transition();\n\n    while (queue.isEmpty() == false) {\n      int state = queue.remove(queue.size()-1);\n      int count = a.initTransition(state, t);\n      int lastMax = -1;\n      for(int i=0;i<count;i++) {\n        a.getNextTransition(t);\n        if (t.min <= lastMax) {\n          return false;\n        }\n        lastMax = t.max;\n        if (done.get(t.dest) == false) {\n          done.set(t.dest);\n          queue.add(t.dest);\n        }\n      }\n    }\n\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f4ef381bf0c2d618c6db830d3dd668c6901c05a","date":1402592253,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicOperations#isDeterministic(LightAutomaton).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicOperations#isDeterministic(LightAutomaton).mjava","sourceNew":"  /** Returns true if the automaton is deterministic. */\n  public static boolean isDeterministic(LightAutomaton a) {\n    BitSet done = new BitSet(a.getNumStates());\n    List<Integer> queue = new ArrayList<>();\n    queue.add(0);\n    done.set(0);\n    LightAutomaton.Transition t = new LightAutomaton.Transition();\n\n    while (queue.isEmpty() == false) {\n      int state = queue.remove(queue.size()-1);\n      int count = a.initTransition(state, t);\n      int lastMax = -1;\n      for(int i=0;i<count;i++) {\n        a.getNextTransition(t);\n        if (t.min <= lastMax) {\n          return false;\n        }\n        lastMax = t.max;\n        if (done.get(t.dest) == false) {\n          done.set(t.dest);\n          queue.add(t.dest);\n        }\n      }\n    }\n\n    return true;\n  }\n\n","sourceOld":"  public static boolean isDeterministic(LightAutomaton a) {\n    BitSet done = new BitSet(a.getNumStates());\n    List<Integer> queue = new ArrayList<>();\n    queue.add(0);\n    done.set(0);\n    LightAutomaton.Transition t = new LightAutomaton.Transition();\n\n    while (queue.isEmpty() == false) {\n      int state = queue.remove(queue.size()-1);\n      int count = a.initTransition(state, t);\n      int lastMax = -1;\n      for(int i=0;i<count;i++) {\n        a.getNextTransition(t);\n        if (t.min <= lastMax) {\n          return false;\n        }\n        lastMax = t.max;\n        if (done.get(t.dest) == false) {\n          done.set(t.dest);\n          queue.add(t.dest);\n        }\n      }\n    }\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0c8cfaac638acc80d26d08288440ede37e6539e9","date":1402678000,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicOperations#isDeterministic(LightAutomaton).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicOperations#isDeterministic(LightAutomaton).mjava","sourceNew":"  /** Returns true if the automaton is deterministic. */\n  public static boolean isDeterministic(LightAutomaton a) {\n    BitSet done = new BitSet(a.getNumStates());\n    List<Integer> queue = new ArrayList<>();\n    queue.add(0);\n    done.set(0);\n    Transition t = new Transition();\n\n    while (queue.isEmpty() == false) {\n      int state = queue.remove(queue.size()-1);\n      int count = a.initTransition(state, t);\n      int lastMax = -1;\n      for(int i=0;i<count;i++) {\n        a.getNextTransition(t);\n        if (t.min <= lastMax) {\n          return false;\n        }\n        lastMax = t.max;\n        if (done.get(t.dest) == false) {\n          done.set(t.dest);\n          queue.add(t.dest);\n        }\n      }\n    }\n\n    return true;\n  }\n\n","sourceOld":"  /** Returns true if the automaton is deterministic. */\n  public static boolean isDeterministic(LightAutomaton a) {\n    BitSet done = new BitSet(a.getNumStates());\n    List<Integer> queue = new ArrayList<>();\n    queue.add(0);\n    done.set(0);\n    LightAutomaton.Transition t = new LightAutomaton.Transition();\n\n    while (queue.isEmpty() == false) {\n      int state = queue.remove(queue.size()-1);\n      int count = a.initTransition(state, t);\n      int lastMax = -1;\n      for(int i=0;i<count;i++) {\n        a.getNextTransition(t);\n        if (t.min <= lastMax) {\n          return false;\n        }\n        lastMax = t.max;\n        if (done.get(t.dest) == false) {\n          done.set(t.dest);\n          queue.add(t.dest);\n        }\n      }\n    }\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a67285d1a68175d877eb9fd1624fccad3db028ff","date":1402779028,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/automaton/AutomatonTestUtil#isDeterministicSlow(LightAutomaton).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicOperations#isDeterministic(LightAutomaton).mjava","sourceNew":"  // nocommit where to assert this...\n  /** Returns true if the automaton is deterministic. */\n  public static boolean isDeterministicSlow(LightAutomaton a) {\n    Transition t = new Transition();\n    int numStates = a.getNumStates();\n    for(int s=0;s<numStates;s++) {\n      int count = a.initTransition(s, t);\n      int lastMax = -1;\n      for(int i=0;i<count;i++) {\n        a.getNextTransition(t);\n        if (t.min <= lastMax) {\n          assert a.isDeterministic() == false;\n          return false;\n        }\n        lastMax = t.max;\n      }\n    }\n\n    assert a.isDeterministic() == true;\n    return true;\n  }\n\n","sourceOld":"  /** Returns true if the automaton is deterministic. */\n  public static boolean isDeterministic(LightAutomaton a) {\n    BitSet done = new BitSet(a.getNumStates());\n    List<Integer> queue = new ArrayList<>();\n    queue.add(0);\n    done.set(0);\n    Transition t = new Transition();\n\n    while (queue.isEmpty() == false) {\n      int state = queue.remove(queue.size()-1);\n      int count = a.initTransition(state, t);\n      int lastMax = -1;\n      for(int i=0;i<count;i++) {\n        a.getNextTransition(t);\n        if (t.min <= lastMax) {\n          return false;\n        }\n        lastMax = t.max;\n        if (done.get(t.dest) == false) {\n          done.set(t.dest);\n          queue.add(t.dest);\n        }\n      }\n    }\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a67285d1a68175d877eb9fd1624fccad3db028ff":["0c8cfaac638acc80d26d08288440ede37e6539e9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7f4ef381bf0c2d618c6db830d3dd668c6901c05a":["ac34f0c5bb9274821fb0cb18075234e02002e9bf"],"0c8cfaac638acc80d26d08288440ede37e6539e9":["7f4ef381bf0c2d618c6db830d3dd668c6901c05a"],"ac34f0c5bb9274821fb0cb18075234e02002e9bf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a67285d1a68175d877eb9fd1624fccad3db028ff":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ac34f0c5bb9274821fb0cb18075234e02002e9bf","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7f4ef381bf0c2d618c6db830d3dd668c6901c05a":["0c8cfaac638acc80d26d08288440ede37e6539e9"],"0c8cfaac638acc80d26d08288440ede37e6539e9":["a67285d1a68175d877eb9fd1624fccad3db028ff"],"ac34f0c5bb9274821fb0cb18075234e02002e9bf":["7f4ef381bf0c2d618c6db830d3dd668c6901c05a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a67285d1a68175d877eb9fd1624fccad3db028ff","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}