{"path":"lucene/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#duellReaders(CompositeReader,AtomicReader).mjava","commits":[{"id":"30fd30bfbfa6b9e036bcd99c8339712e965d4a63","date":1351859294,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#duellReaders(CompositeReader,AtomicReader).mjava","pathOld":"/dev/null","sourceNew":"  private void duellReaders(CompositeReader other, AtomicReader memIndexReader)\n      throws IOException {\n    AtomicReader competitor = new SlowCompositeReaderWrapper(other);\n    Fields memFields = memIndexReader.fields();\n    for (String field : competitor.fields()) {\n      Terms memTerms = memFields.terms(field);\n      Terms iwTerms = memIndexReader.terms(field);\n      if (iwTerms == null) {\n        assertNull(memTerms);\n      } else {\n        DocValues normValues = competitor.normValues(field);\n        DocValues memNormValues = memIndexReader.normValues(field);\n        if (normValues != null) {\n          // mem idx always computes norms on the fly\n          assertNotNull(memNormValues);\n          assertEquals(normValues.getDirectSource().getInt(0), memNormValues.getDirectSource().getInt(0), 0.01);\n        }\n          \n        assertNotNull(memTerms);\n        assertEquals(iwTerms.getDocCount(), memTerms.getDocCount());\n        assertEquals(iwTerms.getSumDocFreq(), memTerms.getSumDocFreq());\n        assertEquals(iwTerms.getSumTotalTermFreq(), memTerms.getSumTotalTermFreq());\n        TermsEnum iwTermsIter = iwTerms.iterator(null);\n        TermsEnum memTermsIter = memTerms.iterator(null);\n        if (iwTerms.hasPositions()) {\n          final boolean offsets = iwTerms.hasOffsets() && memTerms.hasOffsets();\n         \n          while(iwTermsIter.next() != null) {\n            assertNotNull(memTermsIter.next());\n            assertEquals(iwTermsIter.term(), memTermsIter.term());\n            DocsAndPositionsEnum iwDocsAndPos = iwTermsIter.docsAndPositions(null, null);\n            DocsAndPositionsEnum memDocsAndPos = memTermsIter.docsAndPositions(null, null);\n            while(iwDocsAndPos.nextDoc() != DocsAndPositionsEnum.NO_MORE_DOCS) {\n              assertEquals(iwDocsAndPos.docID(), memDocsAndPos.nextDoc());\n              assertEquals(iwDocsAndPos.freq(), memDocsAndPos.freq());\n              for (int i = 0; i < iwDocsAndPos.freq(); i++) {\n                assertEquals(\"term: \" + iwTermsIter.term().utf8ToString(), iwDocsAndPos.nextPosition(), memDocsAndPos.nextPosition());\n                if (offsets) {\n                  assertEquals(iwDocsAndPos.startOffset(), memDocsAndPos.startOffset());\n                  assertEquals(iwDocsAndPos.endOffset(), memDocsAndPos.endOffset());\n                }\n              }\n              \n            }\n            \n          }\n        } else {\n          while(iwTermsIter.next() != null) {\n            assertEquals(iwTermsIter.term(), memTermsIter.term());\n            DocsEnum iwDocsAndPos = iwTermsIter.docs(null, null);\n            DocsEnum memDocsAndPos = memTermsIter.docs(null, null);\n            while(iwDocsAndPos.nextDoc() != DocsAndPositionsEnum.NO_MORE_DOCS) {\n              assertEquals(iwDocsAndPos.docID(), memDocsAndPos.nextDoc());\n              assertEquals(iwDocsAndPos.freq(), memDocsAndPos.freq());\n            }\n          }\n        }\n      }\n      \n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0837ab0472feecb3a54260729d845f839e1cbd72","date":1358283639,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#duellReaders(CompositeReader,AtomicReader).mjava","pathOld":"lucene/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#duellReaders(CompositeReader,AtomicReader).mjava","sourceNew":"  private void duellReaders(CompositeReader other, AtomicReader memIndexReader)\n      throws IOException {\n    AtomicReader competitor = new SlowCompositeReaderWrapper(other);\n    Fields memFields = memIndexReader.fields();\n    for (String field : competitor.fields()) {\n      Terms memTerms = memFields.terms(field);\n      Terms iwTerms = memIndexReader.terms(field);\n      if (iwTerms == null) {\n        assertNull(memTerms);\n      } else {\n        NumericDocValues normValues = competitor.simpleNormValues(field);\n        NumericDocValues memNormValues = memIndexReader.simpleNormValues(field);\n        if (normValues != null) {\n          // mem idx always computes norms on the fly\n          assertNotNull(memNormValues);\n          assertEquals(normValues.get(0), memNormValues.get(0));\n        }\n          \n        assertNotNull(memTerms);\n        assertEquals(iwTerms.getDocCount(), memTerms.getDocCount());\n        assertEquals(iwTerms.getSumDocFreq(), memTerms.getSumDocFreq());\n        assertEquals(iwTerms.getSumTotalTermFreq(), memTerms.getSumTotalTermFreq());\n        TermsEnum iwTermsIter = iwTerms.iterator(null);\n        TermsEnum memTermsIter = memTerms.iterator(null);\n        if (iwTerms.hasPositions()) {\n          final boolean offsets = iwTerms.hasOffsets() && memTerms.hasOffsets();\n         \n          while(iwTermsIter.next() != null) {\n            assertNotNull(memTermsIter.next());\n            assertEquals(iwTermsIter.term(), memTermsIter.term());\n            DocsAndPositionsEnum iwDocsAndPos = iwTermsIter.docsAndPositions(null, null);\n            DocsAndPositionsEnum memDocsAndPos = memTermsIter.docsAndPositions(null, null);\n            while(iwDocsAndPos.nextDoc() != DocsAndPositionsEnum.NO_MORE_DOCS) {\n              assertEquals(iwDocsAndPos.docID(), memDocsAndPos.nextDoc());\n              assertEquals(iwDocsAndPos.freq(), memDocsAndPos.freq());\n              for (int i = 0; i < iwDocsAndPos.freq(); i++) {\n                assertEquals(\"term: \" + iwTermsIter.term().utf8ToString(), iwDocsAndPos.nextPosition(), memDocsAndPos.nextPosition());\n                if (offsets) {\n                  assertEquals(iwDocsAndPos.startOffset(), memDocsAndPos.startOffset());\n                  assertEquals(iwDocsAndPos.endOffset(), memDocsAndPos.endOffset());\n                }\n              }\n              \n            }\n            \n          }\n        } else {\n          while(iwTermsIter.next() != null) {\n            assertEquals(iwTermsIter.term(), memTermsIter.term());\n            DocsEnum iwDocsAndPos = iwTermsIter.docs(null, null);\n            DocsEnum memDocsAndPos = memTermsIter.docs(null, null);\n            while(iwDocsAndPos.nextDoc() != DocsAndPositionsEnum.NO_MORE_DOCS) {\n              assertEquals(iwDocsAndPos.docID(), memDocsAndPos.nextDoc());\n              assertEquals(iwDocsAndPos.freq(), memDocsAndPos.freq());\n            }\n          }\n        }\n      }\n      \n    }\n  }\n\n","sourceOld":"  private void duellReaders(CompositeReader other, AtomicReader memIndexReader)\n      throws IOException {\n    AtomicReader competitor = new SlowCompositeReaderWrapper(other);\n    Fields memFields = memIndexReader.fields();\n    for (String field : competitor.fields()) {\n      Terms memTerms = memFields.terms(field);\n      Terms iwTerms = memIndexReader.terms(field);\n      if (iwTerms == null) {\n        assertNull(memTerms);\n      } else {\n        DocValues normValues = competitor.normValues(field);\n        DocValues memNormValues = memIndexReader.normValues(field);\n        if (normValues != null) {\n          // mem idx always computes norms on the fly\n          assertNotNull(memNormValues);\n          assertEquals(normValues.getDirectSource().getInt(0), memNormValues.getDirectSource().getInt(0), 0.01);\n        }\n          \n        assertNotNull(memTerms);\n        assertEquals(iwTerms.getDocCount(), memTerms.getDocCount());\n        assertEquals(iwTerms.getSumDocFreq(), memTerms.getSumDocFreq());\n        assertEquals(iwTerms.getSumTotalTermFreq(), memTerms.getSumTotalTermFreq());\n        TermsEnum iwTermsIter = iwTerms.iterator(null);\n        TermsEnum memTermsIter = memTerms.iterator(null);\n        if (iwTerms.hasPositions()) {\n          final boolean offsets = iwTerms.hasOffsets() && memTerms.hasOffsets();\n         \n          while(iwTermsIter.next() != null) {\n            assertNotNull(memTermsIter.next());\n            assertEquals(iwTermsIter.term(), memTermsIter.term());\n            DocsAndPositionsEnum iwDocsAndPos = iwTermsIter.docsAndPositions(null, null);\n            DocsAndPositionsEnum memDocsAndPos = memTermsIter.docsAndPositions(null, null);\n            while(iwDocsAndPos.nextDoc() != DocsAndPositionsEnum.NO_MORE_DOCS) {\n              assertEquals(iwDocsAndPos.docID(), memDocsAndPos.nextDoc());\n              assertEquals(iwDocsAndPos.freq(), memDocsAndPos.freq());\n              for (int i = 0; i < iwDocsAndPos.freq(); i++) {\n                assertEquals(\"term: \" + iwTermsIter.term().utf8ToString(), iwDocsAndPos.nextPosition(), memDocsAndPos.nextPosition());\n                if (offsets) {\n                  assertEquals(iwDocsAndPos.startOffset(), memDocsAndPos.startOffset());\n                  assertEquals(iwDocsAndPos.endOffset(), memDocsAndPos.endOffset());\n                }\n              }\n              \n            }\n            \n          }\n        } else {\n          while(iwTermsIter.next() != null) {\n            assertEquals(iwTermsIter.term(), memTermsIter.term());\n            DocsEnum iwDocsAndPos = iwTermsIter.docs(null, null);\n            DocsEnum memDocsAndPos = memTermsIter.docs(null, null);\n            while(iwDocsAndPos.nextDoc() != DocsAndPositionsEnum.NO_MORE_DOCS) {\n              assertEquals(iwDocsAndPos.docID(), memDocsAndPos.nextDoc());\n              assertEquals(iwDocsAndPos.freq(), memDocsAndPos.freq());\n            }\n          }\n        }\n      }\n      \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b8acf0807ca5f38beda8e0f7d5ab46ff39f81200","date":1358521790,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#duellReaders(CompositeReader,AtomicReader).mjava","pathOld":"lucene/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#duellReaders(CompositeReader,AtomicReader).mjava","sourceNew":"  private void duellReaders(CompositeReader other, AtomicReader memIndexReader)\n      throws IOException {\n    AtomicReader competitor = new SlowCompositeReaderWrapper(other);\n    Fields memFields = memIndexReader.fields();\n    for (String field : competitor.fields()) {\n      Terms memTerms = memFields.terms(field);\n      Terms iwTerms = memIndexReader.terms(field);\n      if (iwTerms == null) {\n        assertNull(memTerms);\n      } else {\n        NumericDocValues normValues = competitor.getNormValues(field);\n        NumericDocValues memNormValues = memIndexReader.getNormValues(field);\n        if (normValues != null) {\n          // mem idx always computes norms on the fly\n          assertNotNull(memNormValues);\n          assertEquals(normValues.get(0), memNormValues.get(0));\n        }\n          \n        assertNotNull(memTerms);\n        assertEquals(iwTerms.getDocCount(), memTerms.getDocCount());\n        assertEquals(iwTerms.getSumDocFreq(), memTerms.getSumDocFreq());\n        assertEquals(iwTerms.getSumTotalTermFreq(), memTerms.getSumTotalTermFreq());\n        TermsEnum iwTermsIter = iwTerms.iterator(null);\n        TermsEnum memTermsIter = memTerms.iterator(null);\n        if (iwTerms.hasPositions()) {\n          final boolean offsets = iwTerms.hasOffsets() && memTerms.hasOffsets();\n         \n          while(iwTermsIter.next() != null) {\n            assertNotNull(memTermsIter.next());\n            assertEquals(iwTermsIter.term(), memTermsIter.term());\n            DocsAndPositionsEnum iwDocsAndPos = iwTermsIter.docsAndPositions(null, null);\n            DocsAndPositionsEnum memDocsAndPos = memTermsIter.docsAndPositions(null, null);\n            while(iwDocsAndPos.nextDoc() != DocsAndPositionsEnum.NO_MORE_DOCS) {\n              assertEquals(iwDocsAndPos.docID(), memDocsAndPos.nextDoc());\n              assertEquals(iwDocsAndPos.freq(), memDocsAndPos.freq());\n              for (int i = 0; i < iwDocsAndPos.freq(); i++) {\n                assertEquals(\"term: \" + iwTermsIter.term().utf8ToString(), iwDocsAndPos.nextPosition(), memDocsAndPos.nextPosition());\n                if (offsets) {\n                  assertEquals(iwDocsAndPos.startOffset(), memDocsAndPos.startOffset());\n                  assertEquals(iwDocsAndPos.endOffset(), memDocsAndPos.endOffset());\n                }\n              }\n              \n            }\n            \n          }\n        } else {\n          while(iwTermsIter.next() != null) {\n            assertEquals(iwTermsIter.term(), memTermsIter.term());\n            DocsEnum iwDocsAndPos = iwTermsIter.docs(null, null);\n            DocsEnum memDocsAndPos = memTermsIter.docs(null, null);\n            while(iwDocsAndPos.nextDoc() != DocsAndPositionsEnum.NO_MORE_DOCS) {\n              assertEquals(iwDocsAndPos.docID(), memDocsAndPos.nextDoc());\n              assertEquals(iwDocsAndPos.freq(), memDocsAndPos.freq());\n            }\n          }\n        }\n      }\n      \n    }\n  }\n\n","sourceOld":"  private void duellReaders(CompositeReader other, AtomicReader memIndexReader)\n      throws IOException {\n    AtomicReader competitor = new SlowCompositeReaderWrapper(other);\n    Fields memFields = memIndexReader.fields();\n    for (String field : competitor.fields()) {\n      Terms memTerms = memFields.terms(field);\n      Terms iwTerms = memIndexReader.terms(field);\n      if (iwTerms == null) {\n        assertNull(memTerms);\n      } else {\n        NumericDocValues normValues = competitor.simpleNormValues(field);\n        NumericDocValues memNormValues = memIndexReader.simpleNormValues(field);\n        if (normValues != null) {\n          // mem idx always computes norms on the fly\n          assertNotNull(memNormValues);\n          assertEquals(normValues.get(0), memNormValues.get(0));\n        }\n          \n        assertNotNull(memTerms);\n        assertEquals(iwTerms.getDocCount(), memTerms.getDocCount());\n        assertEquals(iwTerms.getSumDocFreq(), memTerms.getSumDocFreq());\n        assertEquals(iwTerms.getSumTotalTermFreq(), memTerms.getSumTotalTermFreq());\n        TermsEnum iwTermsIter = iwTerms.iterator(null);\n        TermsEnum memTermsIter = memTerms.iterator(null);\n        if (iwTerms.hasPositions()) {\n          final boolean offsets = iwTerms.hasOffsets() && memTerms.hasOffsets();\n         \n          while(iwTermsIter.next() != null) {\n            assertNotNull(memTermsIter.next());\n            assertEquals(iwTermsIter.term(), memTermsIter.term());\n            DocsAndPositionsEnum iwDocsAndPos = iwTermsIter.docsAndPositions(null, null);\n            DocsAndPositionsEnum memDocsAndPos = memTermsIter.docsAndPositions(null, null);\n            while(iwDocsAndPos.nextDoc() != DocsAndPositionsEnum.NO_MORE_DOCS) {\n              assertEquals(iwDocsAndPos.docID(), memDocsAndPos.nextDoc());\n              assertEquals(iwDocsAndPos.freq(), memDocsAndPos.freq());\n              for (int i = 0; i < iwDocsAndPos.freq(); i++) {\n                assertEquals(\"term: \" + iwTermsIter.term().utf8ToString(), iwDocsAndPos.nextPosition(), memDocsAndPos.nextPosition());\n                if (offsets) {\n                  assertEquals(iwDocsAndPos.startOffset(), memDocsAndPos.startOffset());\n                  assertEquals(iwDocsAndPos.endOffset(), memDocsAndPos.endOffset());\n                }\n              }\n              \n            }\n            \n          }\n        } else {\n          while(iwTermsIter.next() != null) {\n            assertEquals(iwTermsIter.term(), memTermsIter.term());\n            DocsEnum iwDocsAndPos = iwTermsIter.docs(null, null);\n            DocsEnum memDocsAndPos = memTermsIter.docs(null, null);\n            while(iwDocsAndPos.nextDoc() != DocsAndPositionsEnum.NO_MORE_DOCS) {\n              assertEquals(iwDocsAndPos.docID(), memDocsAndPos.nextDoc());\n              assertEquals(iwDocsAndPos.freq(), memDocsAndPos.freq());\n            }\n          }\n        }\n      }\n      \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#duellReaders(CompositeReader,AtomicReader).mjava","pathOld":"lucene/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#duellReaders(CompositeReader,AtomicReader).mjava","sourceNew":"  private void duellReaders(CompositeReader other, AtomicReader memIndexReader)\n      throws IOException {\n    AtomicReader competitor = new SlowCompositeReaderWrapper(other);\n    Fields memFields = memIndexReader.fields();\n    for (String field : competitor.fields()) {\n      Terms memTerms = memFields.terms(field);\n      Terms iwTerms = memIndexReader.terms(field);\n      if (iwTerms == null) {\n        assertNull(memTerms);\n      } else {\n        NumericDocValues normValues = competitor.getNormValues(field);\n        NumericDocValues memNormValues = memIndexReader.getNormValues(field);\n        if (normValues != null) {\n          // mem idx always computes norms on the fly\n          assertNotNull(memNormValues);\n          assertEquals(normValues.get(0), memNormValues.get(0));\n        }\n          \n        assertNotNull(memTerms);\n        assertEquals(iwTerms.getDocCount(), memTerms.getDocCount());\n        assertEquals(iwTerms.getSumDocFreq(), memTerms.getSumDocFreq());\n        assertEquals(iwTerms.getSumTotalTermFreq(), memTerms.getSumTotalTermFreq());\n        TermsEnum iwTermsIter = iwTerms.iterator(null);\n        TermsEnum memTermsIter = memTerms.iterator(null);\n        if (iwTerms.hasPositions()) {\n          final boolean offsets = iwTerms.hasOffsets() && memTerms.hasOffsets();\n         \n          while(iwTermsIter.next() != null) {\n            assertNotNull(memTermsIter.next());\n            assertEquals(iwTermsIter.term(), memTermsIter.term());\n            DocsAndPositionsEnum iwDocsAndPos = iwTermsIter.docsAndPositions(null, null);\n            DocsAndPositionsEnum memDocsAndPos = memTermsIter.docsAndPositions(null, null);\n            while(iwDocsAndPos.nextDoc() != DocsAndPositionsEnum.NO_MORE_DOCS) {\n              assertEquals(iwDocsAndPos.docID(), memDocsAndPos.nextDoc());\n              assertEquals(iwDocsAndPos.freq(), memDocsAndPos.freq());\n              for (int i = 0; i < iwDocsAndPos.freq(); i++) {\n                assertEquals(\"term: \" + iwTermsIter.term().utf8ToString(), iwDocsAndPos.nextPosition(), memDocsAndPos.nextPosition());\n                if (offsets) {\n                  assertEquals(iwDocsAndPos.startOffset(), memDocsAndPos.startOffset());\n                  assertEquals(iwDocsAndPos.endOffset(), memDocsAndPos.endOffset());\n                }\n              }\n              \n            }\n            \n          }\n        } else {\n          while(iwTermsIter.next() != null) {\n            assertEquals(iwTermsIter.term(), memTermsIter.term());\n            DocsEnum iwDocsAndPos = iwTermsIter.docs(null, null);\n            DocsEnum memDocsAndPos = memTermsIter.docs(null, null);\n            while(iwDocsAndPos.nextDoc() != DocsAndPositionsEnum.NO_MORE_DOCS) {\n              assertEquals(iwDocsAndPos.docID(), memDocsAndPos.nextDoc());\n              assertEquals(iwDocsAndPos.freq(), memDocsAndPos.freq());\n            }\n          }\n        }\n      }\n      \n    }\n  }\n\n","sourceOld":"  private void duellReaders(CompositeReader other, AtomicReader memIndexReader)\n      throws IOException {\n    AtomicReader competitor = new SlowCompositeReaderWrapper(other);\n    Fields memFields = memIndexReader.fields();\n    for (String field : competitor.fields()) {\n      Terms memTerms = memFields.terms(field);\n      Terms iwTerms = memIndexReader.terms(field);\n      if (iwTerms == null) {\n        assertNull(memTerms);\n      } else {\n        DocValues normValues = competitor.normValues(field);\n        DocValues memNormValues = memIndexReader.normValues(field);\n        if (normValues != null) {\n          // mem idx always computes norms on the fly\n          assertNotNull(memNormValues);\n          assertEquals(normValues.getDirectSource().getInt(0), memNormValues.getDirectSource().getInt(0), 0.01);\n        }\n          \n        assertNotNull(memTerms);\n        assertEquals(iwTerms.getDocCount(), memTerms.getDocCount());\n        assertEquals(iwTerms.getSumDocFreq(), memTerms.getSumDocFreq());\n        assertEquals(iwTerms.getSumTotalTermFreq(), memTerms.getSumTotalTermFreq());\n        TermsEnum iwTermsIter = iwTerms.iterator(null);\n        TermsEnum memTermsIter = memTerms.iterator(null);\n        if (iwTerms.hasPositions()) {\n          final boolean offsets = iwTerms.hasOffsets() && memTerms.hasOffsets();\n         \n          while(iwTermsIter.next() != null) {\n            assertNotNull(memTermsIter.next());\n            assertEquals(iwTermsIter.term(), memTermsIter.term());\n            DocsAndPositionsEnum iwDocsAndPos = iwTermsIter.docsAndPositions(null, null);\n            DocsAndPositionsEnum memDocsAndPos = memTermsIter.docsAndPositions(null, null);\n            while(iwDocsAndPos.nextDoc() != DocsAndPositionsEnum.NO_MORE_DOCS) {\n              assertEquals(iwDocsAndPos.docID(), memDocsAndPos.nextDoc());\n              assertEquals(iwDocsAndPos.freq(), memDocsAndPos.freq());\n              for (int i = 0; i < iwDocsAndPos.freq(); i++) {\n                assertEquals(\"term: \" + iwTermsIter.term().utf8ToString(), iwDocsAndPos.nextPosition(), memDocsAndPos.nextPosition());\n                if (offsets) {\n                  assertEquals(iwDocsAndPos.startOffset(), memDocsAndPos.startOffset());\n                  assertEquals(iwDocsAndPos.endOffset(), memDocsAndPos.endOffset());\n                }\n              }\n              \n            }\n            \n          }\n        } else {\n          while(iwTermsIter.next() != null) {\n            assertEquals(iwTermsIter.term(), memTermsIter.term());\n            DocsEnum iwDocsAndPos = iwTermsIter.docs(null, null);\n            DocsEnum memDocsAndPos = memTermsIter.docs(null, null);\n            while(iwDocsAndPos.nextDoc() != DocsAndPositionsEnum.NO_MORE_DOCS) {\n              assertEquals(iwDocsAndPos.docID(), memDocsAndPos.nextDoc());\n              assertEquals(iwDocsAndPos.freq(), memDocsAndPos.freq());\n            }\n          }\n        }\n      }\n      \n    }\n  }\n\n","bugFix":["30fd30bfbfa6b9e036bcd99c8339712e965d4a63"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"df9bf66ed405ee5c7d32b47bdb36c2e36d2c1392","date":1377503666,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#duellReaders(CompositeReader,AtomicReader).mjava","pathOld":"lucene/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#duellReaders(CompositeReader,AtomicReader).mjava","sourceNew":"  private void duellReaders(CompositeReader other, AtomicReader memIndexReader)\n      throws IOException {\n    AtomicReader competitor = SlowCompositeReaderWrapper.wrap(other);\n    Fields memFields = memIndexReader.fields();\n    for (String field : competitor.fields()) {\n      Terms memTerms = memFields.terms(field);\n      Terms iwTerms = memIndexReader.terms(field);\n      if (iwTerms == null) {\n        assertNull(memTerms);\n      } else {\n        NumericDocValues normValues = competitor.getNormValues(field);\n        NumericDocValues memNormValues = memIndexReader.getNormValues(field);\n        if (normValues != null) {\n          // mem idx always computes norms on the fly\n          assertNotNull(memNormValues);\n          assertEquals(normValues.get(0), memNormValues.get(0));\n        }\n          \n        assertNotNull(memTerms);\n        assertEquals(iwTerms.getDocCount(), memTerms.getDocCount());\n        assertEquals(iwTerms.getSumDocFreq(), memTerms.getSumDocFreq());\n        assertEquals(iwTerms.getSumTotalTermFreq(), memTerms.getSumTotalTermFreq());\n        TermsEnum iwTermsIter = iwTerms.iterator(null);\n        TermsEnum memTermsIter = memTerms.iterator(null);\n        if (iwTerms.hasPositions()) {\n          final boolean offsets = iwTerms.hasOffsets() && memTerms.hasOffsets();\n         \n          while(iwTermsIter.next() != null) {\n            assertNotNull(memTermsIter.next());\n            assertEquals(iwTermsIter.term(), memTermsIter.term());\n            DocsAndPositionsEnum iwDocsAndPos = iwTermsIter.docsAndPositions(null, null);\n            DocsAndPositionsEnum memDocsAndPos = memTermsIter.docsAndPositions(null, null);\n            while(iwDocsAndPos.nextDoc() != DocsAndPositionsEnum.NO_MORE_DOCS) {\n              assertEquals(iwDocsAndPos.docID(), memDocsAndPos.nextDoc());\n              assertEquals(iwDocsAndPos.freq(), memDocsAndPos.freq());\n              for (int i = 0; i < iwDocsAndPos.freq(); i++) {\n                assertEquals(\"term: \" + iwTermsIter.term().utf8ToString(), iwDocsAndPos.nextPosition(), memDocsAndPos.nextPosition());\n                if (offsets) {\n                  assertEquals(iwDocsAndPos.startOffset(), memDocsAndPos.startOffset());\n                  assertEquals(iwDocsAndPos.endOffset(), memDocsAndPos.endOffset());\n                }\n              }\n              \n            }\n            \n          }\n        } else {\n          while(iwTermsIter.next() != null) {\n            assertEquals(iwTermsIter.term(), memTermsIter.term());\n            DocsEnum iwDocsAndPos = iwTermsIter.docs(null, null);\n            DocsEnum memDocsAndPos = memTermsIter.docs(null, null);\n            while(iwDocsAndPos.nextDoc() != DocsAndPositionsEnum.NO_MORE_DOCS) {\n              assertEquals(iwDocsAndPos.docID(), memDocsAndPos.nextDoc());\n              assertEquals(iwDocsAndPos.freq(), memDocsAndPos.freq());\n            }\n          }\n        }\n      }\n      \n    }\n  }\n\n","sourceOld":"  private void duellReaders(CompositeReader other, AtomicReader memIndexReader)\n      throws IOException {\n    AtomicReader competitor = new SlowCompositeReaderWrapper(other);\n    Fields memFields = memIndexReader.fields();\n    for (String field : competitor.fields()) {\n      Terms memTerms = memFields.terms(field);\n      Terms iwTerms = memIndexReader.terms(field);\n      if (iwTerms == null) {\n        assertNull(memTerms);\n      } else {\n        NumericDocValues normValues = competitor.getNormValues(field);\n        NumericDocValues memNormValues = memIndexReader.getNormValues(field);\n        if (normValues != null) {\n          // mem idx always computes norms on the fly\n          assertNotNull(memNormValues);\n          assertEquals(normValues.get(0), memNormValues.get(0));\n        }\n          \n        assertNotNull(memTerms);\n        assertEquals(iwTerms.getDocCount(), memTerms.getDocCount());\n        assertEquals(iwTerms.getSumDocFreq(), memTerms.getSumDocFreq());\n        assertEquals(iwTerms.getSumTotalTermFreq(), memTerms.getSumTotalTermFreq());\n        TermsEnum iwTermsIter = iwTerms.iterator(null);\n        TermsEnum memTermsIter = memTerms.iterator(null);\n        if (iwTerms.hasPositions()) {\n          final boolean offsets = iwTerms.hasOffsets() && memTerms.hasOffsets();\n         \n          while(iwTermsIter.next() != null) {\n            assertNotNull(memTermsIter.next());\n            assertEquals(iwTermsIter.term(), memTermsIter.term());\n            DocsAndPositionsEnum iwDocsAndPos = iwTermsIter.docsAndPositions(null, null);\n            DocsAndPositionsEnum memDocsAndPos = memTermsIter.docsAndPositions(null, null);\n            while(iwDocsAndPos.nextDoc() != DocsAndPositionsEnum.NO_MORE_DOCS) {\n              assertEquals(iwDocsAndPos.docID(), memDocsAndPos.nextDoc());\n              assertEquals(iwDocsAndPos.freq(), memDocsAndPos.freq());\n              for (int i = 0; i < iwDocsAndPos.freq(); i++) {\n                assertEquals(\"term: \" + iwTermsIter.term().utf8ToString(), iwDocsAndPos.nextPosition(), memDocsAndPos.nextPosition());\n                if (offsets) {\n                  assertEquals(iwDocsAndPos.startOffset(), memDocsAndPos.startOffset());\n                  assertEquals(iwDocsAndPos.endOffset(), memDocsAndPos.endOffset());\n                }\n              }\n              \n            }\n            \n          }\n        } else {\n          while(iwTermsIter.next() != null) {\n            assertEquals(iwTermsIter.term(), memTermsIter.term());\n            DocsEnum iwDocsAndPos = iwTermsIter.docs(null, null);\n            DocsEnum memDocsAndPos = memTermsIter.docs(null, null);\n            while(iwDocsAndPos.nextDoc() != DocsAndPositionsEnum.NO_MORE_DOCS) {\n              assertEquals(iwDocsAndPos.docID(), memDocsAndPos.nextDoc());\n              assertEquals(iwDocsAndPos.freq(), memDocsAndPos.freq());\n            }\n          }\n        }\n      }\n      \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#duellReaders(CompositeReader,AtomicReader).mjava","pathOld":"lucene/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#duellReaders(CompositeReader,AtomicReader).mjava","sourceNew":"  private void duellReaders(CompositeReader other, AtomicReader memIndexReader)\n      throws IOException {\n    AtomicReader competitor = SlowCompositeReaderWrapper.wrap(other);\n    Fields memFields = memIndexReader.fields();\n    for (String field : competitor.fields()) {\n      Terms memTerms = memFields.terms(field);\n      Terms iwTerms = memIndexReader.terms(field);\n      if (iwTerms == null) {\n        assertNull(memTerms);\n      } else {\n        NumericDocValues normValues = competitor.getNormValues(field);\n        NumericDocValues memNormValues = memIndexReader.getNormValues(field);\n        if (normValues != null) {\n          // mem idx always computes norms on the fly\n          assertNotNull(memNormValues);\n          assertEquals(normValues.get(0), memNormValues.get(0));\n        }\n          \n        assertNotNull(memTerms);\n        assertEquals(iwTerms.getDocCount(), memTerms.getDocCount());\n        assertEquals(iwTerms.getSumDocFreq(), memTerms.getSumDocFreq());\n        assertEquals(iwTerms.getSumTotalTermFreq(), memTerms.getSumTotalTermFreq());\n        TermsEnum iwTermsIter = iwTerms.iterator(null);\n        TermsEnum memTermsIter = memTerms.iterator(null);\n        if (iwTerms.hasPositions()) {\n          final boolean offsets = iwTerms.hasOffsets() && memTerms.hasOffsets();\n         \n          while(iwTermsIter.next() != null) {\n            assertNotNull(memTermsIter.next());\n            assertEquals(iwTermsIter.term(), memTermsIter.term());\n            DocsAndPositionsEnum iwDocsAndPos = iwTermsIter.docsAndPositions(null, null);\n            DocsAndPositionsEnum memDocsAndPos = memTermsIter.docsAndPositions(null, null);\n            while(iwDocsAndPos.nextDoc() != DocsAndPositionsEnum.NO_MORE_DOCS) {\n              assertEquals(iwDocsAndPos.docID(), memDocsAndPos.nextDoc());\n              assertEquals(iwDocsAndPos.freq(), memDocsAndPos.freq());\n              for (int i = 0; i < iwDocsAndPos.freq(); i++) {\n                assertEquals(\"term: \" + iwTermsIter.term().utf8ToString(), iwDocsAndPos.nextPosition(), memDocsAndPos.nextPosition());\n                if (offsets) {\n                  assertEquals(iwDocsAndPos.startOffset(), memDocsAndPos.startOffset());\n                  assertEquals(iwDocsAndPos.endOffset(), memDocsAndPos.endOffset());\n                }\n              }\n              \n            }\n            \n          }\n        } else {\n          while(iwTermsIter.next() != null) {\n            assertEquals(iwTermsIter.term(), memTermsIter.term());\n            DocsEnum iwDocsAndPos = iwTermsIter.docs(null, null);\n            DocsEnum memDocsAndPos = memTermsIter.docs(null, null);\n            while(iwDocsAndPos.nextDoc() != DocsAndPositionsEnum.NO_MORE_DOCS) {\n              assertEquals(iwDocsAndPos.docID(), memDocsAndPos.nextDoc());\n              assertEquals(iwDocsAndPos.freq(), memDocsAndPos.freq());\n            }\n          }\n        }\n      }\n      \n    }\n  }\n\n","sourceOld":"  private void duellReaders(CompositeReader other, AtomicReader memIndexReader)\n      throws IOException {\n    AtomicReader competitor = new SlowCompositeReaderWrapper(other);\n    Fields memFields = memIndexReader.fields();\n    for (String field : competitor.fields()) {\n      Terms memTerms = memFields.terms(field);\n      Terms iwTerms = memIndexReader.terms(field);\n      if (iwTerms == null) {\n        assertNull(memTerms);\n      } else {\n        NumericDocValues normValues = competitor.getNormValues(field);\n        NumericDocValues memNormValues = memIndexReader.getNormValues(field);\n        if (normValues != null) {\n          // mem idx always computes norms on the fly\n          assertNotNull(memNormValues);\n          assertEquals(normValues.get(0), memNormValues.get(0));\n        }\n          \n        assertNotNull(memTerms);\n        assertEquals(iwTerms.getDocCount(), memTerms.getDocCount());\n        assertEquals(iwTerms.getSumDocFreq(), memTerms.getSumDocFreq());\n        assertEquals(iwTerms.getSumTotalTermFreq(), memTerms.getSumTotalTermFreq());\n        TermsEnum iwTermsIter = iwTerms.iterator(null);\n        TermsEnum memTermsIter = memTerms.iterator(null);\n        if (iwTerms.hasPositions()) {\n          final boolean offsets = iwTerms.hasOffsets() && memTerms.hasOffsets();\n         \n          while(iwTermsIter.next() != null) {\n            assertNotNull(memTermsIter.next());\n            assertEquals(iwTermsIter.term(), memTermsIter.term());\n            DocsAndPositionsEnum iwDocsAndPos = iwTermsIter.docsAndPositions(null, null);\n            DocsAndPositionsEnum memDocsAndPos = memTermsIter.docsAndPositions(null, null);\n            while(iwDocsAndPos.nextDoc() != DocsAndPositionsEnum.NO_MORE_DOCS) {\n              assertEquals(iwDocsAndPos.docID(), memDocsAndPos.nextDoc());\n              assertEquals(iwDocsAndPos.freq(), memDocsAndPos.freq());\n              for (int i = 0; i < iwDocsAndPos.freq(); i++) {\n                assertEquals(\"term: \" + iwTermsIter.term().utf8ToString(), iwDocsAndPos.nextPosition(), memDocsAndPos.nextPosition());\n                if (offsets) {\n                  assertEquals(iwDocsAndPos.startOffset(), memDocsAndPos.startOffset());\n                  assertEquals(iwDocsAndPos.endOffset(), memDocsAndPos.endOffset());\n                }\n              }\n              \n            }\n            \n          }\n        } else {\n          while(iwTermsIter.next() != null) {\n            assertEquals(iwTermsIter.term(), memTermsIter.term());\n            DocsEnum iwDocsAndPos = iwTermsIter.docs(null, null);\n            DocsEnum memDocsAndPos = memTermsIter.docs(null, null);\n            while(iwDocsAndPos.nextDoc() != DocsAndPositionsEnum.NO_MORE_DOCS) {\n              assertEquals(iwDocsAndPos.docID(), memDocsAndPos.nextDoc());\n              assertEquals(iwDocsAndPos.freq(), memDocsAndPos.freq());\n            }\n          }\n        }\n      }\n      \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":4,"author":"Ryan Ernst","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#duellReaders(CompositeReader,AtomicReader).mjava","sourceNew":null,"sourceOld":"  private void duellReaders(CompositeReader other, AtomicReader memIndexReader)\n      throws IOException {\n    AtomicReader competitor = SlowCompositeReaderWrapper.wrap(other);\n    Fields memFields = memIndexReader.fields();\n    for (String field : competitor.fields()) {\n      Terms memTerms = memFields.terms(field);\n      Terms iwTerms = memIndexReader.terms(field);\n      if (iwTerms == null) {\n        assertNull(memTerms);\n      } else {\n        NumericDocValues normValues = competitor.getNormValues(field);\n        NumericDocValues memNormValues = memIndexReader.getNormValues(field);\n        if (normValues != null) {\n          // mem idx always computes norms on the fly\n          assertNotNull(memNormValues);\n          assertEquals(normValues.get(0), memNormValues.get(0));\n        }\n          \n        assertNotNull(memTerms);\n        assertEquals(iwTerms.getDocCount(), memTerms.getDocCount());\n        assertEquals(iwTerms.getSumDocFreq(), memTerms.getSumDocFreq());\n        assertEquals(iwTerms.getSumTotalTermFreq(), memTerms.getSumTotalTermFreq());\n        TermsEnum iwTermsIter = iwTerms.iterator(null);\n        TermsEnum memTermsIter = memTerms.iterator(null);\n        if (iwTerms.hasPositions()) {\n          final boolean offsets = iwTerms.hasOffsets() && memTerms.hasOffsets();\n         \n          while(iwTermsIter.next() != null) {\n            assertNotNull(memTermsIter.next());\n            assertEquals(iwTermsIter.term(), memTermsIter.term());\n            DocsAndPositionsEnum iwDocsAndPos = iwTermsIter.docsAndPositions(null, null);\n            DocsAndPositionsEnum memDocsAndPos = memTermsIter.docsAndPositions(null, null);\n            while(iwDocsAndPos.nextDoc() != DocsAndPositionsEnum.NO_MORE_DOCS) {\n              assertEquals(iwDocsAndPos.docID(), memDocsAndPos.nextDoc());\n              assertEquals(iwDocsAndPos.freq(), memDocsAndPos.freq());\n              for (int i = 0; i < iwDocsAndPos.freq(); i++) {\n                assertEquals(\"term: \" + iwTermsIter.term().utf8ToString(), iwDocsAndPos.nextPosition(), memDocsAndPos.nextPosition());\n                if (offsets) {\n                  assertEquals(iwDocsAndPos.startOffset(), memDocsAndPos.startOffset());\n                  assertEquals(iwDocsAndPos.endOffset(), memDocsAndPos.endOffset());\n                }\n              }\n              \n            }\n            \n          }\n        } else {\n          while(iwTermsIter.next() != null) {\n            assertEquals(iwTermsIter.term(), memTermsIter.term());\n            DocsEnum iwDocsAndPos = iwTermsIter.docs(null, null);\n            DocsEnum memDocsAndPos = memTermsIter.docs(null, null);\n            while(iwDocsAndPos.nextDoc() != DocsAndPositionsEnum.NO_MORE_DOCS) {\n              assertEquals(iwDocsAndPos.docID(), memDocsAndPos.nextDoc());\n              assertEquals(iwDocsAndPos.freq(), memDocsAndPos.freq());\n            }\n          }\n        }\n      }\n      \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b8acf0807ca5f38beda8e0f7d5ab46ff39f81200":["0837ab0472feecb3a54260729d845f839e1cbd72"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["30fd30bfbfa6b9e036bcd99c8339712e965d4a63","b8acf0807ca5f38beda8e0f7d5ab46ff39f81200"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["d4d69c535930b5cce125cff868d40f6373dc27d4","df9bf66ed405ee5c7d32b47bdb36c2e36d2c1392"],"30fd30bfbfa6b9e036bcd99c8339712e965d4a63":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"df9bf66ed405ee5c7d32b47bdb36c2e36d2c1392":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"0837ab0472feecb3a54260729d845f839e1cbd72":["30fd30bfbfa6b9e036bcd99c8339712e965d4a63"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["df9bf66ed405ee5c7d32b47bdb36c2e36d2c1392"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c9fb5f46e264daf5ba3860defe623a89d202dd87"]},"commit2Childs":{"b8acf0807ca5f38beda8e0f7d5ab46ff39f81200":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","df9bf66ed405ee5c7d32b47bdb36c2e36d2c1392"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"30fd30bfbfa6b9e036bcd99c8339712e965d4a63":["d4d69c535930b5cce125cff868d40f6373dc27d4","0837ab0472feecb3a54260729d845f839e1cbd72"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["30fd30bfbfa6b9e036bcd99c8339712e965d4a63"],"df9bf66ed405ee5c7d32b47bdb36c2e36d2c1392":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","c9fb5f46e264daf5ba3860defe623a89d202dd87"],"0837ab0472feecb3a54260729d845f839e1cbd72":["b8acf0807ca5f38beda8e0f7d5ab46ff39f81200"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}