{"path":"lucene/classification/src/java/org/apache/lucene/classification/BM25NBClassifier#getTermProbForClass(Term,String...).mjava","commits":[{"id":"37dc4585237301aef478cc54a24c7188a28ab2e6","date":1494512792,"type":0,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/classification/src/java/org/apache/lucene/classification/BM25NBClassifier#getTermProbForClass(Term,String...).mjava","pathOld":"/dev/null","sourceNew":"  private double getTermProbForClass(Term classTerm, String... words) throws IOException {\n    BooleanQuery.Builder builder = new BooleanQuery.Builder();\n    builder.add(new BooleanClause(new TermQuery(classTerm), BooleanClause.Occur.MUST));\n    for (String textFieldName : textFieldNames) {\n      for (String word : words) {\n        builder.add(new BooleanClause(new TermQuery(new Term(textFieldName, word)), BooleanClause.Occur.SHOULD));\n      }\n    }\n    if (query != null) {\n      builder.add(query, BooleanClause.Occur.MUST);\n    }\n    TopDocs search = indexSearcher.search(builder.build(), 1);\n    return search.totalHits > 0 ? search.getMaxScore() : 1;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"360b3962efc30aa8b2c39c3087aa36069674bbe7","date":1494557674,"type":0,"author":"Cao Manh Dat","isMerge":true,"pathNew":"lucene/classification/src/java/org/apache/lucene/classification/BM25NBClassifier#getTermProbForClass(Term,String...).mjava","pathOld":"/dev/null","sourceNew":"  private double getTermProbForClass(Term classTerm, String... words) throws IOException {\n    BooleanQuery.Builder builder = new BooleanQuery.Builder();\n    builder.add(new BooleanClause(new TermQuery(classTerm), BooleanClause.Occur.MUST));\n    for (String textFieldName : textFieldNames) {\n      for (String word : words) {\n        builder.add(new BooleanClause(new TermQuery(new Term(textFieldName, word)), BooleanClause.Occur.SHOULD));\n      }\n    }\n    if (query != null) {\n      builder.add(query, BooleanClause.Occur.MUST);\n    }\n    TopDocs search = indexSearcher.search(builder.build(), 1);\n    return search.totalHits > 0 ? search.getMaxScore() : 1;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/classification/src/java/org/apache/lucene/classification/BM25NBClassifier#getTermProbForClass(Term,String...).mjava","pathOld":"/dev/null","sourceNew":"  private double getTermProbForClass(Term classTerm, String... words) throws IOException {\n    BooleanQuery.Builder builder = new BooleanQuery.Builder();\n    builder.add(new BooleanClause(new TermQuery(classTerm), BooleanClause.Occur.MUST));\n    for (String textFieldName : textFieldNames) {\n      for (String word : words) {\n        builder.add(new BooleanClause(new TermQuery(new Term(textFieldName, word)), BooleanClause.Occur.SHOULD));\n      }\n    }\n    if (query != null) {\n      builder.add(query, BooleanClause.Occur.MUST);\n    }\n    TopDocs search = indexSearcher.search(builder.build(), 1);\n    return search.totalHits > 0 ? search.getMaxScore() : 1;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"81fff83bdb893c1471efd78f6a9a3ce4f98120b9","date":1531895937,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/classification/src/java/org/apache/lucene/classification/BM25NBClassifier#getTermProbForClass(Term,String...).mjava","pathOld":"lucene/classification/src/java/org/apache/lucene/classification/BM25NBClassifier#getTermProbForClass(Term,String...).mjava","sourceNew":"  private double getTermProbForClass(Term classTerm, String... words) throws IOException {\n    BooleanQuery.Builder builder = new BooleanQuery.Builder();\n    builder.add(new BooleanClause(new TermQuery(classTerm), BooleanClause.Occur.MUST));\n    for (String textFieldName : textFieldNames) {\n      for (String word : words) {\n        builder.add(new BooleanClause(new TermQuery(new Term(textFieldName, word)), BooleanClause.Occur.SHOULD));\n      }\n    }\n    if (query != null) {\n      builder.add(query, BooleanClause.Occur.MUST);\n    }\n    TopDocs search = indexSearcher.search(builder.build(), 1);\n    return search.totalHits > 0 ? search.scoreDocs[0].score : 1;\n  }\n\n","sourceOld":"  private double getTermProbForClass(Term classTerm, String... words) throws IOException {\n    BooleanQuery.Builder builder = new BooleanQuery.Builder();\n    builder.add(new BooleanClause(new TermQuery(classTerm), BooleanClause.Occur.MUST));\n    for (String textFieldName : textFieldNames) {\n      for (String word : words) {\n        builder.add(new BooleanClause(new TermQuery(new Term(textFieldName, word)), BooleanClause.Occur.SHOULD));\n      }\n    }\n    if (query != null) {\n      builder.add(query, BooleanClause.Occur.MUST);\n    }\n    TopDocs search = indexSearcher.search(builder.build(), 1);\n    return search.totalHits > 0 ? search.getMaxScore() : 1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/classification/src/java/org/apache/lucene/classification/BM25NBClassifier#getTermProbForClass(Term,String...).mjava","pathOld":"lucene/classification/src/java/org/apache/lucene/classification/BM25NBClassifier#getTermProbForClass(Term,String...).mjava","sourceNew":"  private double getTermProbForClass(Term classTerm, String... words) throws IOException {\n    BooleanQuery.Builder builder = new BooleanQuery.Builder();\n    builder.add(new BooleanClause(new TermQuery(classTerm), BooleanClause.Occur.MUST));\n    for (String textFieldName : textFieldNames) {\n      for (String word : words) {\n        builder.add(new BooleanClause(new TermQuery(new Term(textFieldName, word)), BooleanClause.Occur.SHOULD));\n      }\n    }\n    if (query != null) {\n      builder.add(query, BooleanClause.Occur.MUST);\n    }\n    TopDocs search = indexSearcher.search(builder.build(), 1);\n    return search.totalHits > 0 ? search.scoreDocs[0].score : 1;\n  }\n\n","sourceOld":"  private double getTermProbForClass(Term classTerm, String... words) throws IOException {\n    BooleanQuery.Builder builder = new BooleanQuery.Builder();\n    builder.add(new BooleanClause(new TermQuery(classTerm), BooleanClause.Occur.MUST));\n    for (String textFieldName : textFieldNames) {\n      for (String word : words) {\n        builder.add(new BooleanClause(new TermQuery(new Term(textFieldName, word)), BooleanClause.Occur.SHOULD));\n      }\n    }\n    if (query != null) {\n      builder.add(query, BooleanClause.Occur.MUST);\n    }\n    TopDocs search = indexSearcher.search(builder.build(), 1);\n    return search.totalHits > 0 ? search.getMaxScore() : 1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83788ad129a5154d5c6562c4e8ce3db48793aada","date":1532961485,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/classification/src/java/org/apache/lucene/classification/BM25NBClassifier#getTermProbForClass(Term,String...).mjava","pathOld":"lucene/classification/src/java/org/apache/lucene/classification/BM25NBClassifier#getTermProbForClass(Term,String...).mjava","sourceNew":"  private double getTermProbForClass(Term classTerm, String... words) throws IOException {\n    BooleanQuery.Builder builder = new BooleanQuery.Builder();\n    builder.add(new BooleanClause(new TermQuery(classTerm), BooleanClause.Occur.MUST));\n    for (String textFieldName : textFieldNames) {\n      for (String word : words) {\n        builder.add(new BooleanClause(new TermQuery(new Term(textFieldName, word)), BooleanClause.Occur.SHOULD));\n      }\n    }\n    if (query != null) {\n      builder.add(query, BooleanClause.Occur.MUST);\n    }\n    TopDocs search = indexSearcher.search(builder.build(), 1);\n    return search.totalHits.value > 0 ? search.scoreDocs[0].score : 1;\n  }\n\n","sourceOld":"  private double getTermProbForClass(Term classTerm, String... words) throws IOException {\n    BooleanQuery.Builder builder = new BooleanQuery.Builder();\n    builder.add(new BooleanClause(new TermQuery(classTerm), BooleanClause.Occur.MUST));\n    for (String textFieldName : textFieldNames) {\n      for (String word : words) {\n        builder.add(new BooleanClause(new TermQuery(new Term(textFieldName, word)), BooleanClause.Occur.SHOULD));\n      }\n    }\n    if (query != null) {\n      builder.add(query, BooleanClause.Occur.MUST);\n    }\n    TopDocs search = indexSearcher.search(builder.build(), 1);\n    return search.totalHits > 0 ? search.scoreDocs[0].score : 1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","360b3962efc30aa8b2c39c3087aa36069674bbe7"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["360b3962efc30aa8b2c39c3087aa36069674bbe7","81fff83bdb893c1471efd78f6a9a3ce4f98120b9"],"360b3962efc30aa8b2c39c3087aa36069674bbe7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","37dc4585237301aef478cc54a24c7188a28ab2e6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"83788ad129a5154d5c6562c4e8ce3db48793aada":["81fff83bdb893c1471efd78f6a9a3ce4f98120b9"],"81fff83bdb893c1471efd78f6a9a3ce4f98120b9":["360b3962efc30aa8b2c39c3087aa36069674bbe7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["83788ad129a5154d5c6562c4e8ce3db48793aada"],"37dc4585237301aef478cc54a24c7188a28ab2e6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"360b3962efc30aa8b2c39c3087aa36069674bbe7":["e9017cf144952056066919f1ebc7897ff9bd71b1","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","81fff83bdb893c1471efd78f6a9a3ce4f98120b9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e9017cf144952056066919f1ebc7897ff9bd71b1","360b3962efc30aa8b2c39c3087aa36069674bbe7","37dc4585237301aef478cc54a24c7188a28ab2e6"],"81fff83bdb893c1471efd78f6a9a3ce4f98120b9":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","83788ad129a5154d5c6562c4e8ce3db48793aada"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"37dc4585237301aef478cc54a24c7188a28ab2e6":["360b3962efc30aa8b2c39c3087aa36069674bbe7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}