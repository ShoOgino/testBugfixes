{"path":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#expandUseParams(SolrQueryRequest,Object).mjava","commits":[{"id":"5e8661269ebb23269662a2826882f11611e91d5a","date":1475042403,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#expandUseParams(SolrQueryRequest,Object).mjava","pathOld":"/dev/null","sourceNew":"    private Map<String, Object> expandUseParams(SolrQueryRequest req,\n                                                Object plugin) {\n\n      Map<String, Object> pluginInfo = null;\n      if (plugin instanceof Map) {\n        pluginInfo = (Map) plugin;\n      } else if (plugin instanceof PluginInfo) {\n        pluginInfo = ((PluginInfo) plugin).toMap(new LinkedHashMap<>());\n      }\n      String useParams = (String) pluginInfo.get(USEPARAM);\n      String useparamsInReq = req.getOriginalParams().get(USEPARAM);\n      if (useParams != null || useparamsInReq != null) {\n        Map m = new LinkedHashMap<>();\n        pluginInfo.put(\"_useParamsExpanded_\", m);\n        List<String> params = new ArrayList<>();\n        if (useParams != null) params.addAll(StrUtils.splitSmart(useParams, ','));\n        if (useparamsInReq != null) params.addAll(StrUtils.splitSmart(useparamsInReq, ','));\n        for (String param : params) {\n          RequestParams.ParamSet p = this.req.getCore().getSolrConfig().getRequestParams().getParams(param);\n          if (p != null) {\n            m.put(param, p);\n          } else {\n            m.put(param, \"[NOT AVAILABLE]\");\n          }\n        }\n\n\n        LocalSolrQueryRequest r = new LocalSolrQueryRequest(req.getCore(), req.getOriginalParams());\n        r.getContext().put(USEPARAM, useParams);\n        NamedList nl = new PluginInfo(SolrRequestHandler.TYPE, pluginInfo).initArgs;\n        SolrPluginUtils.setDefaults(r,\n            getSolrParamsFromNamedList(nl, DEFAULTS),\n            getSolrParamsFromNamedList(nl, APPENDS),\n            getSolrParamsFromNamedList(nl, INVARIANTS));\n        //SolrParams.wrapDefaults(maskUseParams, req.getParams())\n\n        MapSolrParams mask = new MapSolrParams(ImmutableMap.<String, String>builder()\n            .put(\"componentName\", \"\")\n            .put(\"expandParams\", \"\")\n            .build());\n        pluginInfo.put(\"_effectiveParams_\",\n            SolrParams.wrapDefaults(mask, r.getParams()));\n      }\n      return pluginInfo;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["5fb8cae56bd31a827317dd604b1169743f9475f2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#expandUseParams(SolrQueryRequest,Object).mjava","pathOld":"/dev/null","sourceNew":"    private Map<String, Object> expandUseParams(SolrQueryRequest req,\n                                                Object plugin) {\n\n      Map<String, Object> pluginInfo = null;\n      if (plugin instanceof Map) {\n        pluginInfo = (Map) plugin;\n      } else if (plugin instanceof PluginInfo) {\n        pluginInfo = ((PluginInfo) plugin).toMap(new LinkedHashMap<>());\n      }\n      String useParams = (String) pluginInfo.get(USEPARAM);\n      String useparamsInReq = req.getOriginalParams().get(USEPARAM);\n      if (useParams != null || useparamsInReq != null) {\n        Map m = new LinkedHashMap<>();\n        pluginInfo.put(\"_useParamsExpanded_\", m);\n        List<String> params = new ArrayList<>();\n        if (useParams != null) params.addAll(StrUtils.splitSmart(useParams, ','));\n        if (useparamsInReq != null) params.addAll(StrUtils.splitSmart(useparamsInReq, ','));\n        for (String param : params) {\n          RequestParams.ParamSet p = this.req.getCore().getSolrConfig().getRequestParams().getParams(param);\n          if (p != null) {\n            m.put(param, p);\n          } else {\n            m.put(param, \"[NOT AVAILABLE]\");\n          }\n        }\n\n\n        LocalSolrQueryRequest r = new LocalSolrQueryRequest(req.getCore(), req.getOriginalParams());\n        r.getContext().put(USEPARAM, useParams);\n        NamedList nl = new PluginInfo(SolrRequestHandler.TYPE, pluginInfo).initArgs;\n        SolrPluginUtils.setDefaults(r,\n            getSolrParamsFromNamedList(nl, DEFAULTS),\n            getSolrParamsFromNamedList(nl, APPENDS),\n            getSolrParamsFromNamedList(nl, INVARIANTS));\n        //SolrParams.wrapDefaults(maskUseParams, req.getParams())\n\n        MapSolrParams mask = new MapSolrParams(ImmutableMap.<String, String>builder()\n            .put(\"componentName\", \"\")\n            .put(\"expandParams\", \"\")\n            .build());\n        pluginInfo.put(\"_effectiveParams_\",\n            SolrParams.wrapDefaults(mask, r.getParams()));\n      }\n      return pluginInfo;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#expandUseParams(SolrQueryRequest,Object).mjava","pathOld":"/dev/null","sourceNew":"    private Map<String, Object> expandUseParams(SolrQueryRequest req,\n                                                Object plugin) {\n\n      Map<String, Object> pluginInfo = null;\n      if (plugin instanceof Map) {\n        pluginInfo = (Map) plugin;\n      } else if (plugin instanceof PluginInfo) {\n        pluginInfo = ((PluginInfo) plugin).toMap(new LinkedHashMap<>());\n      }\n      String useParams = (String) pluginInfo.get(USEPARAM);\n      String useparamsInReq = req.getOriginalParams().get(USEPARAM);\n      if (useParams != null || useparamsInReq != null) {\n        Map m = new LinkedHashMap<>();\n        pluginInfo.put(\"_useParamsExpanded_\", m);\n        List<String> params = new ArrayList<>();\n        if (useParams != null) params.addAll(StrUtils.splitSmart(useParams, ','));\n        if (useparamsInReq != null) params.addAll(StrUtils.splitSmart(useparamsInReq, ','));\n        for (String param : params) {\n          RequestParams.ParamSet p = this.req.getCore().getSolrConfig().getRequestParams().getParams(param);\n          if (p != null) {\n            m.put(param, p);\n          } else {\n            m.put(param, \"[NOT AVAILABLE]\");\n          }\n        }\n\n\n        LocalSolrQueryRequest r = new LocalSolrQueryRequest(req.getCore(), req.getOriginalParams());\n        r.getContext().put(USEPARAM, useParams);\n        NamedList nl = new PluginInfo(SolrRequestHandler.TYPE, pluginInfo).initArgs;\n        SolrPluginUtils.setDefaults(r,\n            getSolrParamsFromNamedList(nl, DEFAULTS),\n            getSolrParamsFromNamedList(nl, APPENDS),\n            getSolrParamsFromNamedList(nl, INVARIANTS));\n        //SolrParams.wrapDefaults(maskUseParams, req.getParams())\n\n        MapSolrParams mask = new MapSolrParams(ImmutableMap.<String, String>builder()\n            .put(\"componentName\", \"\")\n            .put(\"expandParams\", \"\")\n            .build());\n        pluginInfo.put(\"_effectiveParams_\",\n            SolrParams.wrapDefaults(mask, r.getParams()));\n      }\n      return pluginInfo;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5fb8cae56bd31a827317dd604b1169743f9475f2","date":1571413113,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#expandUseParams(SolrQueryRequest,Object).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#expandUseParams(SolrQueryRequest,Object).mjava","sourceNew":"    private Map<String, Object> expandUseParams(SolrQueryRequest req,\n                                                Object plugin) {\n\n      Map<String, Object> pluginInfo = null;\n      if (plugin instanceof Map) {\n        pluginInfo = (Map) plugin;\n      } else if (plugin instanceof PluginInfo) {\n        pluginInfo = ((PluginInfo) plugin).toMap(new LinkedHashMap<>());\n      }\n      String useParams = (String) pluginInfo.get(USEPARAM);\n      String useParamsInReq = req.getOriginalParams().get(USEPARAM);\n      if (useParams != null || useParamsInReq != null) {\n        Map m = new LinkedHashMap<>();\n        pluginInfo.put(\"_useParamsExpanded_\", m);\n        List<String> params = new ArrayList<>();\n        if (useParams != null) params.addAll(StrUtils.splitSmart(useParams, ','));\n        if (useParamsInReq != null) params.addAll(StrUtils.splitSmart(useParamsInReq, ','));\n        for (String param : params) {\n          RequestParams.ParamSet p = this.req.getCore().getSolrConfig().getRequestParams().getParams(param);\n          if (p != null) {\n            m.put(param, p);\n          } else {\n            m.put(param, \"[NOT AVAILABLE]\");\n          }\n        }\n\n\n        LocalSolrQueryRequest r = new LocalSolrQueryRequest(req.getCore(), req.getOriginalParams());\n        r.getContext().put(USEPARAM, useParams);\n        NamedList nl = new PluginInfo(SolrRequestHandler.TYPE, pluginInfo).initArgs;\n        SolrPluginUtils.setDefaults(r,\n            getSolrParamsFromNamedList(nl, DEFAULTS),\n            getSolrParamsFromNamedList(nl, APPENDS),\n            getSolrParamsFromNamedList(nl, INVARIANTS));\n        //SolrParams.wrapDefaults(maskUseParams, req.getParams())\n\n        MapSolrParams mask = new MapSolrParams(ImmutableMap.<String, String>builder()\n            .put(\"componentName\", \"\")\n            .put(\"expandParams\", \"\")\n            .build());\n        pluginInfo.put(\"_effectiveParams_\",\n            SolrParams.wrapDefaults(mask, r.getParams()));\n      }\n      return pluginInfo;\n    }\n\n","sourceOld":"    private Map<String, Object> expandUseParams(SolrQueryRequest req,\n                                                Object plugin) {\n\n      Map<String, Object> pluginInfo = null;\n      if (plugin instanceof Map) {\n        pluginInfo = (Map) plugin;\n      } else if (plugin instanceof PluginInfo) {\n        pluginInfo = ((PluginInfo) plugin).toMap(new LinkedHashMap<>());\n      }\n      String useParams = (String) pluginInfo.get(USEPARAM);\n      String useparamsInReq = req.getOriginalParams().get(USEPARAM);\n      if (useParams != null || useparamsInReq != null) {\n        Map m = new LinkedHashMap<>();\n        pluginInfo.put(\"_useParamsExpanded_\", m);\n        List<String> params = new ArrayList<>();\n        if (useParams != null) params.addAll(StrUtils.splitSmart(useParams, ','));\n        if (useparamsInReq != null) params.addAll(StrUtils.splitSmart(useparamsInReq, ','));\n        for (String param : params) {\n          RequestParams.ParamSet p = this.req.getCore().getSolrConfig().getRequestParams().getParams(param);\n          if (p != null) {\n            m.put(param, p);\n          } else {\n            m.put(param, \"[NOT AVAILABLE]\");\n          }\n        }\n\n\n        LocalSolrQueryRequest r = new LocalSolrQueryRequest(req.getCore(), req.getOriginalParams());\n        r.getContext().put(USEPARAM, useParams);\n        NamedList nl = new PluginInfo(SolrRequestHandler.TYPE, pluginInfo).initArgs;\n        SolrPluginUtils.setDefaults(r,\n            getSolrParamsFromNamedList(nl, DEFAULTS),\n            getSolrParamsFromNamedList(nl, APPENDS),\n            getSolrParamsFromNamedList(nl, INVARIANTS));\n        //SolrParams.wrapDefaults(maskUseParams, req.getParams())\n\n        MapSolrParams mask = new MapSolrParams(ImmutableMap.<String, String>builder()\n            .put(\"componentName\", \"\")\n            .put(\"expandParams\", \"\")\n            .build());\n        pluginInfo.put(\"_effectiveParams_\",\n            SolrParams.wrapDefaults(mask, r.getParams()));\n      }\n      return pluginInfo;\n    }\n\n","bugFix":["5e8661269ebb23269662a2826882f11611e91d5a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2caf6d6e842e1a4e4ae68ec6dfa5139c31a84ec5","date":1591384964,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#expandUseParams(SolrQueryRequest,Object).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#expandUseParams(SolrQueryRequest,Object).mjava","sourceNew":"    @SuppressWarnings({\"unchecked\"})\n    private Map<String, Object> expandUseParams(SolrQueryRequest req,\n                                                Object plugin) {\n\n      Map<String, Object> pluginInfo = null;\n      if (plugin instanceof Map) {\n        pluginInfo = (Map) plugin;\n      } else if (plugin instanceof PluginInfo) {\n        pluginInfo = ((PluginInfo) plugin).toMap(new LinkedHashMap<>());\n      }\n      @SuppressWarnings({\"rawtypes\"})\n      String useParams = (String) pluginInfo.get(USEPARAM);\n      String useParamsInReq = req.getOriginalParams().get(USEPARAM);\n      if (useParams != null || useParamsInReq != null) {\n        @SuppressWarnings({\"rawtypes\"})\n        Map m = new LinkedHashMap<>();\n        pluginInfo.put(\"_useParamsExpanded_\", m);\n        List<String> params = new ArrayList<>();\n        if (useParams != null) params.addAll(StrUtils.splitSmart(useParams, ','));\n        if (useParamsInReq != null) params.addAll(StrUtils.splitSmart(useParamsInReq, ','));\n        for (String param : params) {\n          RequestParams.ParamSet p = this.req.getCore().getSolrConfig().getRequestParams().getParams(param);\n          if (p != null) {\n            m.put(param, p);\n          } else {\n            m.put(param, \"[NOT AVAILABLE]\");\n          }\n        }\n\n\n        LocalSolrQueryRequest r = new LocalSolrQueryRequest(req.getCore(), req.getOriginalParams());\n        r.getContext().put(USEPARAM, useParams);\n        @SuppressWarnings({\"rawtypes\"})\n        NamedList nl = new PluginInfo(SolrRequestHandler.TYPE, pluginInfo).initArgs;\n        SolrPluginUtils.setDefaults(r,\n            getSolrParamsFromNamedList(nl, DEFAULTS),\n            getSolrParamsFromNamedList(nl, APPENDS),\n            getSolrParamsFromNamedList(nl, INVARIANTS));\n        //SolrParams.wrapDefaults(maskUseParams, req.getParams())\n\n        MapSolrParams mask = new MapSolrParams(ImmutableMap.<String, String>builder()\n            .put(\"componentName\", \"\")\n            .put(\"expandParams\", \"\")\n            .build());\n        pluginInfo.put(\"_effectiveParams_\",\n            SolrParams.wrapDefaults(mask, r.getParams()));\n      }\n      return pluginInfo;\n    }\n\n","sourceOld":"    private Map<String, Object> expandUseParams(SolrQueryRequest req,\n                                                Object plugin) {\n\n      Map<String, Object> pluginInfo = null;\n      if (plugin instanceof Map) {\n        pluginInfo = (Map) plugin;\n      } else if (plugin instanceof PluginInfo) {\n        pluginInfo = ((PluginInfo) plugin).toMap(new LinkedHashMap<>());\n      }\n      String useParams = (String) pluginInfo.get(USEPARAM);\n      String useParamsInReq = req.getOriginalParams().get(USEPARAM);\n      if (useParams != null || useParamsInReq != null) {\n        Map m = new LinkedHashMap<>();\n        pluginInfo.put(\"_useParamsExpanded_\", m);\n        List<String> params = new ArrayList<>();\n        if (useParams != null) params.addAll(StrUtils.splitSmart(useParams, ','));\n        if (useParamsInReq != null) params.addAll(StrUtils.splitSmart(useParamsInReq, ','));\n        for (String param : params) {\n          RequestParams.ParamSet p = this.req.getCore().getSolrConfig().getRequestParams().getParams(param);\n          if (p != null) {\n            m.put(param, p);\n          } else {\n            m.put(param, \"[NOT AVAILABLE]\");\n          }\n        }\n\n\n        LocalSolrQueryRequest r = new LocalSolrQueryRequest(req.getCore(), req.getOriginalParams());\n        r.getContext().put(USEPARAM, useParams);\n        NamedList nl = new PluginInfo(SolrRequestHandler.TYPE, pluginInfo).initArgs;\n        SolrPluginUtils.setDefaults(r,\n            getSolrParamsFromNamedList(nl, DEFAULTS),\n            getSolrParamsFromNamedList(nl, APPENDS),\n            getSolrParamsFromNamedList(nl, INVARIANTS));\n        //SolrParams.wrapDefaults(maskUseParams, req.getParams())\n\n        MapSolrParams mask = new MapSolrParams(ImmutableMap.<String, String>builder()\n            .put(\"componentName\", \"\")\n            .put(\"expandParams\", \"\")\n            .build());\n        pluginInfo.put(\"_effectiveParams_\",\n            SolrParams.wrapDefaults(mask, r.getParams()));\n      }\n      return pluginInfo;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5fb8cae56bd31a827317dd604b1169743f9475f2":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"2caf6d6e842e1a4e4ae68ec6dfa5139c31a84ec5":["5fb8cae56bd31a827317dd604b1169743f9475f2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5e8661269ebb23269662a2826882f11611e91d5a"],"5e8661269ebb23269662a2826882f11611e91d5a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2caf6d6e842e1a4e4ae68ec6dfa5139c31a84ec5"]},"commit2Childs":{"5fb8cae56bd31a827317dd604b1169743f9475f2":["2caf6d6e842e1a4e4ae68ec6dfa5139c31a84ec5"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["5fb8cae56bd31a827317dd604b1169743f9475f2","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"2caf6d6e842e1a4e4ae68ec6dfa5139c31a84ec5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","5e8661269ebb23269662a2826882f11611e91d5a","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"5e8661269ebb23269662a2826882f11611e91d5a":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}