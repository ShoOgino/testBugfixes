{"path":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#getSearchGroups(AbstractFirstPassGroupingCollector,int,boolean).mjava","commits":[{"id":"8b48c85d1bf438ef65fbc1abe44f4e2c04a43e00","date":1317931776,"type":0,"author":"Martijn van Groningen","isMerge":false,"pathNew":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#getSearchGroups(AbstractFirstPassGroupingCollector,int,boolean).mjava","pathOld":"/dev/null","sourceNew":"  private Collection<SearchGroup<BytesRef>> getSearchGroups(AbstractFirstPassGroupingCollector c, int groupOffset, boolean fillFields) {\n    if (c.getClass().isAssignableFrom(TermFirstPassGroupingCollector.class)) {\n      return ((TermFirstPassGroupingCollector) c).getTopGroups(groupOffset, fillFields);\n    } else if (c.getClass().isAssignableFrom(FunctionFirstPassGroupingCollector.class)) {\n      Collection<SearchGroup<MutableValue>> mutableValueGroups = ((FunctionFirstPassGroupingCollector) c).getTopGroups(groupOffset, fillFields);\n      if (mutableValueGroups == null) {\n        return null;\n      }\n\n      List<SearchGroup<BytesRef>> groups = new ArrayList<SearchGroup<BytesRef>>(mutableValueGroups.size());\n      for (SearchGroup<MutableValue> mutableValueGroup : mutableValueGroups) {\n        SearchGroup<BytesRef> sg = new SearchGroup<BytesRef>();\n        sg.groupValue = mutableValueGroup.groupValue.exists() ? ((MutableValueStr) mutableValueGroup.groupValue).value : null;\n        sg.sortValues = mutableValueGroup.sortValues;\n        groups.add(sg);\n      }\n      return groups;\n    }\n    fail();\n    return null;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4739c84c362b9673ab5ed3e038ff760c718c30c8","date":1322161679,"type":3,"author":"Martijn van Groningen","isMerge":false,"pathNew":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#getSearchGroups(AbstractFirstPassGroupingCollector,int,boolean).mjava","pathOld":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#getSearchGroups(AbstractFirstPassGroupingCollector,int,boolean).mjava","sourceNew":"  private Collection<SearchGroup<BytesRef>> getSearchGroups(AbstractFirstPassGroupingCollector c, int groupOffset, boolean fillFields) {\n    if (TermFirstPassGroupingCollector.class.isAssignableFrom(c.getClass())) {\n      return ((TermFirstPassGroupingCollector) c).getTopGroups(groupOffset, fillFields);\n    } else if (FunctionFirstPassGroupingCollector.class.isAssignableFrom(c.getClass())) {\n      Collection<SearchGroup<MutableValue>> mutableValueGroups = ((FunctionFirstPassGroupingCollector) c).getTopGroups(groupOffset, fillFields);\n      if (mutableValueGroups == null) {\n        return null;\n      }\n\n      List<SearchGroup<BytesRef>> groups = new ArrayList<SearchGroup<BytesRef>>(mutableValueGroups.size());\n      for (SearchGroup<MutableValue> mutableValueGroup : mutableValueGroups) {\n        SearchGroup<BytesRef> sg = new SearchGroup<BytesRef>();\n        sg.groupValue = mutableValueGroup.groupValue.exists() ? ((MutableValueStr) mutableValueGroup.groupValue).value : null;\n        sg.sortValues = mutableValueGroup.sortValues;\n        groups.add(sg);\n      }\n      return groups;\n    } else if (DVFirstPassGroupingCollector.class.isAssignableFrom(c.getClass())) {\n      @SuppressWarnings(\"unchecked\")\n      Collection<SearchGroup<BytesRef>> topGroups = ((DVFirstPassGroupingCollector<BytesRef>) c).getTopGroups(groupOffset, fillFields);\n      return topGroups;\n    }\n    fail();\n    return null;\n  }\n\n","sourceOld":"  private Collection<SearchGroup<BytesRef>> getSearchGroups(AbstractFirstPassGroupingCollector c, int groupOffset, boolean fillFields) {\n    if (c.getClass().isAssignableFrom(TermFirstPassGroupingCollector.class)) {\n      return ((TermFirstPassGroupingCollector) c).getTopGroups(groupOffset, fillFields);\n    } else if (c.getClass().isAssignableFrom(FunctionFirstPassGroupingCollector.class)) {\n      Collection<SearchGroup<MutableValue>> mutableValueGroups = ((FunctionFirstPassGroupingCollector) c).getTopGroups(groupOffset, fillFields);\n      if (mutableValueGroups == null) {\n        return null;\n      }\n\n      List<SearchGroup<BytesRef>> groups = new ArrayList<SearchGroup<BytesRef>>(mutableValueGroups.size());\n      for (SearchGroup<MutableValue> mutableValueGroup : mutableValueGroups) {\n        SearchGroup<BytesRef> sg = new SearchGroup<BytesRef>();\n        sg.groupValue = mutableValueGroup.groupValue.exists() ? ((MutableValueStr) mutableValueGroup.groupValue).value : null;\n        sg.sortValues = mutableValueGroup.sortValues;\n        groups.add(sg);\n      }\n      return groups;\n    }\n    fail();\n    return null;\n  }\n\n","bugFix":null,"bugIntro":["d4d69c535930b5cce125cff868d40f6373dc27d4","d4d69c535930b5cce125cff868d40f6373dc27d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6005b05c19356dfca18f39979caeeb6b85bc88bb","date":1331204804,"type":5,"author":"Martijn van Groningen","isMerge":false,"pathNew":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#getSearchGroups(AbstractFirstPassGroupingCollector[#],int,boolean).mjava","pathOld":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#getSearchGroups(AbstractFirstPassGroupingCollector,int,boolean).mjava","sourceNew":"  private Collection<SearchGroup<BytesRef>> getSearchGroups(AbstractFirstPassGroupingCollector<?> c, int groupOffset, boolean fillFields) {\n    if (TermFirstPassGroupingCollector.class.isAssignableFrom(c.getClass())) {\n      return ((TermFirstPassGroupingCollector) c).getTopGroups(groupOffset, fillFields);\n    } else if (FunctionFirstPassGroupingCollector.class.isAssignableFrom(c.getClass())) {\n      Collection<SearchGroup<MutableValue>> mutableValueGroups = ((FunctionFirstPassGroupingCollector) c).getTopGroups(groupOffset, fillFields);\n      if (mutableValueGroups == null) {\n        return null;\n      }\n\n      List<SearchGroup<BytesRef>> groups = new ArrayList<SearchGroup<BytesRef>>(mutableValueGroups.size());\n      for (SearchGroup<MutableValue> mutableValueGroup : mutableValueGroups) {\n        SearchGroup<BytesRef> sg = new SearchGroup<BytesRef>();\n        sg.groupValue = mutableValueGroup.groupValue.exists() ? ((MutableValueStr) mutableValueGroup.groupValue).value : null;\n        sg.sortValues = mutableValueGroup.sortValues;\n        groups.add(sg);\n      }\n      return groups;\n    } else if (DVFirstPassGroupingCollector.class.isAssignableFrom(c.getClass())) {\n      @SuppressWarnings(\"unchecked\")\n      Collection<SearchGroup<BytesRef>> topGroups = ((DVFirstPassGroupingCollector<BytesRef>) c).getTopGroups(groupOffset, fillFields);\n      return topGroups;\n    }\n    fail();\n    return null;\n  }\n\n","sourceOld":"  private Collection<SearchGroup<BytesRef>> getSearchGroups(AbstractFirstPassGroupingCollector c, int groupOffset, boolean fillFields) {\n    if (TermFirstPassGroupingCollector.class.isAssignableFrom(c.getClass())) {\n      return ((TermFirstPassGroupingCollector) c).getTopGroups(groupOffset, fillFields);\n    } else if (FunctionFirstPassGroupingCollector.class.isAssignableFrom(c.getClass())) {\n      Collection<SearchGroup<MutableValue>> mutableValueGroups = ((FunctionFirstPassGroupingCollector) c).getTopGroups(groupOffset, fillFields);\n      if (mutableValueGroups == null) {\n        return null;\n      }\n\n      List<SearchGroup<BytesRef>> groups = new ArrayList<SearchGroup<BytesRef>>(mutableValueGroups.size());\n      for (SearchGroup<MutableValue> mutableValueGroup : mutableValueGroups) {\n        SearchGroup<BytesRef> sg = new SearchGroup<BytesRef>();\n        sg.groupValue = mutableValueGroup.groupValue.exists() ? ((MutableValueStr) mutableValueGroup.groupValue).value : null;\n        sg.sortValues = mutableValueGroup.sortValues;\n        groups.add(sg);\n      }\n      return groups;\n    } else if (DVFirstPassGroupingCollector.class.isAssignableFrom(c.getClass())) {\n      @SuppressWarnings(\"unchecked\")\n      Collection<SearchGroup<BytesRef>> topGroups = ((DVFirstPassGroupingCollector<BytesRef>) c).getTopGroups(groupOffset, fillFields);\n      return topGroups;\n    }\n    fail();\n    return null;\n  }\n\n","bugFix":null,"bugIntro":["f7558b5077dd4abd457be151475f13b541f4f13e","f7558b5077dd4abd457be151475f13b541f4f13e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"38e3b736c7ca086d61b7dbb841c905ee115490da","date":1331657018,"type":5,"author":"Ryan McKinley","isMerge":true,"pathNew":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#getSearchGroups(AbstractFirstPassGroupingCollector[#],int,boolean).mjava","pathOld":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#getSearchGroups(AbstractFirstPassGroupingCollector,int,boolean).mjava","sourceNew":"  private Collection<SearchGroup<BytesRef>> getSearchGroups(AbstractFirstPassGroupingCollector<?> c, int groupOffset, boolean fillFields) {\n    if (TermFirstPassGroupingCollector.class.isAssignableFrom(c.getClass())) {\n      return ((TermFirstPassGroupingCollector) c).getTopGroups(groupOffset, fillFields);\n    } else if (FunctionFirstPassGroupingCollector.class.isAssignableFrom(c.getClass())) {\n      Collection<SearchGroup<MutableValue>> mutableValueGroups = ((FunctionFirstPassGroupingCollector) c).getTopGroups(groupOffset, fillFields);\n      if (mutableValueGroups == null) {\n        return null;\n      }\n\n      List<SearchGroup<BytesRef>> groups = new ArrayList<SearchGroup<BytesRef>>(mutableValueGroups.size());\n      for (SearchGroup<MutableValue> mutableValueGroup : mutableValueGroups) {\n        SearchGroup<BytesRef> sg = new SearchGroup<BytesRef>();\n        sg.groupValue = mutableValueGroup.groupValue.exists() ? ((MutableValueStr) mutableValueGroup.groupValue).value : null;\n        sg.sortValues = mutableValueGroup.sortValues;\n        groups.add(sg);\n      }\n      return groups;\n    } else if (DVFirstPassGroupingCollector.class.isAssignableFrom(c.getClass())) {\n      @SuppressWarnings(\"unchecked\")\n      Collection<SearchGroup<BytesRef>> topGroups = ((DVFirstPassGroupingCollector<BytesRef>) c).getTopGroups(groupOffset, fillFields);\n      return topGroups;\n    }\n    fail();\n    return null;\n  }\n\n","sourceOld":"  private Collection<SearchGroup<BytesRef>> getSearchGroups(AbstractFirstPassGroupingCollector c, int groupOffset, boolean fillFields) {\n    if (TermFirstPassGroupingCollector.class.isAssignableFrom(c.getClass())) {\n      return ((TermFirstPassGroupingCollector) c).getTopGroups(groupOffset, fillFields);\n    } else if (FunctionFirstPassGroupingCollector.class.isAssignableFrom(c.getClass())) {\n      Collection<SearchGroup<MutableValue>> mutableValueGroups = ((FunctionFirstPassGroupingCollector) c).getTopGroups(groupOffset, fillFields);\n      if (mutableValueGroups == null) {\n        return null;\n      }\n\n      List<SearchGroup<BytesRef>> groups = new ArrayList<SearchGroup<BytesRef>>(mutableValueGroups.size());\n      for (SearchGroup<MutableValue> mutableValueGroup : mutableValueGroups) {\n        SearchGroup<BytesRef> sg = new SearchGroup<BytesRef>();\n        sg.groupValue = mutableValueGroup.groupValue.exists() ? ((MutableValueStr) mutableValueGroup.groupValue).value : null;\n        sg.sortValues = mutableValueGroup.sortValues;\n        groups.add(sg);\n      }\n      return groups;\n    } else if (DVFirstPassGroupingCollector.class.isAssignableFrom(c.getClass())) {\n      @SuppressWarnings(\"unchecked\")\n      Collection<SearchGroup<BytesRef>> topGroups = ((DVFirstPassGroupingCollector<BytesRef>) c).getTopGroups(groupOffset, fillFields);\n      return topGroups;\n    }\n    fail();\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"38e3b736c7ca086d61b7dbb841c905ee115490da":["4739c84c362b9673ab5ed3e038ff760c718c30c8","6005b05c19356dfca18f39979caeeb6b85bc88bb"],"6005b05c19356dfca18f39979caeeb6b85bc88bb":["4739c84c362b9673ab5ed3e038ff760c718c30c8"],"4739c84c362b9673ab5ed3e038ff760c718c30c8":["8b48c85d1bf438ef65fbc1abe44f4e2c04a43e00"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8b48c85d1bf438ef65fbc1abe44f4e2c04a43e00":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6005b05c19356dfca18f39979caeeb6b85bc88bb"]},"commit2Childs":{"38e3b736c7ca086d61b7dbb841c905ee115490da":[],"6005b05c19356dfca18f39979caeeb6b85bc88bb":["38e3b736c7ca086d61b7dbb841c905ee115490da","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4739c84c362b9673ab5ed3e038ff760c718c30c8":["38e3b736c7ca086d61b7dbb841c905ee115490da","6005b05c19356dfca18f39979caeeb6b85bc88bb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8b48c85d1bf438ef65fbc1abe44f4e2c04a43e00"],"8b48c85d1bf438ef65fbc1abe44f4e2c04a43e00":["4739c84c362b9673ab5ed3e038ff760c718c30c8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["38e3b736c7ca086d61b7dbb841c905ee115490da","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}