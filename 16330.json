{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimNodeStateProvider#simRemoveDeadNodes().mjava","commits":[{"id":"a4422b331d00607258b0ed3e43934306e67764aa","date":1513943901,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimNodeStateProvider#simRemoveDeadNodes().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Remove values that correspond to dead nodes. If values contained a 'nodeRole'\n   * key then /roles.json is updated.\n   */\n  public void simRemoveDeadNodes() {\n    Set<String> myNodes = new HashSet<>(nodeValues.keySet());\n    myNodes.removeAll(liveNodesSet.get());\n    AtomicBoolean updateRoles = new AtomicBoolean(false);\n    myNodes.forEach(n -> {\n      LOG.debug(\"- removing dead node values: \" + n);\n      Map<String, Object> vals = nodeValues.remove(n);\n      if (vals.containsKey(\"nodeRole\")) {\n        updateRoles.set(true);\n      }\n    });\n    if (updateRoles.get()) {\n      saveRoles();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad60b6945c360ff89899d716d9cdec8dd674e2a0","date":1528114819,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimNodeStateProvider#simRemoveDeadNodes().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimNodeStateProvider#simRemoveDeadNodes().mjava","sourceNew":"  /**\n   * Remove values that correspond to dead nodes. If values contained a 'nodeRole'\n   * key then /roles.json is updated.\n   */\n  public void simRemoveDeadNodes() throws InterruptedException {\n    Set<String> myNodes = new HashSet<>(nodeValues.keySet());\n    myNodes.removeAll(liveNodesSet.get());\n    lock.lockInterruptibly();\n    try {\n      AtomicBoolean updateRoles = new AtomicBoolean(false);\n      myNodes.forEach(n -> {\n        LOG.debug(\"- removing dead node values: \" + n);\n        Map<String, Object> vals = nodeValues.remove(n);\n        if (vals.containsKey(\"nodeRole\")) {\n          updateRoles.set(true);\n        }\n      });\n      if (updateRoles.get()) {\n        saveRoles();\n      }\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","sourceOld":"  /**\n   * Remove values that correspond to dead nodes. If values contained a 'nodeRole'\n   * key then /roles.json is updated.\n   */\n  public void simRemoveDeadNodes() {\n    Set<String> myNodes = new HashSet<>(nodeValues.keySet());\n    myNodes.removeAll(liveNodesSet.get());\n    AtomicBoolean updateRoles = new AtomicBoolean(false);\n    myNodes.forEach(n -> {\n      LOG.debug(\"- removing dead node values: \" + n);\n      Map<String, Object> vals = nodeValues.remove(n);\n      if (vals.containsKey(\"nodeRole\")) {\n        updateRoles.set(true);\n      }\n    });\n    if (updateRoles.get()) {\n      saveRoles();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f592209545c71895260367152601e9200399776d","date":1528238935,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimNodeStateProvider#simRemoveDeadNodes().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimNodeStateProvider#simRemoveDeadNodes().mjava","sourceNew":"  /**\n   * Remove values that correspond to dead nodes. If values contained a 'nodeRole'\n   * key then /roles.json is updated.\n   */\n  public void simRemoveDeadNodes() throws InterruptedException {\n    Set<String> myNodes = new HashSet<>(nodeValues.keySet());\n    myNodes.removeAll(liveNodesSet.get());\n    lock.lockInterruptibly();\n    try {\n      AtomicBoolean updateRoles = new AtomicBoolean(false);\n      myNodes.forEach(n -> {\n        LOG.debug(\"- removing dead node values: \" + n);\n        Map<String, Object> vals = nodeValues.remove(n);\n        if (vals.containsKey(\"nodeRole\")) {\n          updateRoles.set(true);\n        }\n      });\n      if (updateRoles.get()) {\n        saveRoles();\n      }\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","sourceOld":"  /**\n   * Remove values that correspond to dead nodes. If values contained a 'nodeRole'\n   * key then /roles.json is updated.\n   */\n  public void simRemoveDeadNodes() {\n    Set<String> myNodes = new HashSet<>(nodeValues.keySet());\n    myNodes.removeAll(liveNodesSet.get());\n    AtomicBoolean updateRoles = new AtomicBoolean(false);\n    myNodes.forEach(n -> {\n      LOG.debug(\"- removing dead node values: \" + n);\n      Map<String, Object> vals = nodeValues.remove(n);\n      if (vals.containsKey(\"nodeRole\")) {\n        updateRoles.set(true);\n      }\n    });\n    if (updateRoles.get()) {\n      saveRoles();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70042a8a492f7054d480ccdd2be9796510d4327","date":1528386658,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimNodeStateProvider#simRemoveDeadNodes().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimNodeStateProvider#simRemoveDeadNodes().mjava","sourceNew":"  /**\n   * Remove values that correspond to dead nodes. If values contained a 'nodeRole'\n   * key then /roles.json is updated.\n   */\n  public void simRemoveDeadNodes() throws InterruptedException {\n    Set<String> myNodes = new HashSet<>(nodeValues.keySet());\n    myNodes.removeAll(liveNodesSet.get());\n    lock.lockInterruptibly();\n    try {\n      AtomicBoolean updateRoles = new AtomicBoolean(false);\n      myNodes.forEach(n -> {\n        LOG.debug(\"- removing dead node values: \" + n);\n        Map<String, Object> vals = nodeValues.remove(n);\n        if (vals.containsKey(\"nodeRole\")) {\n          updateRoles.set(true);\n        }\n      });\n      if (updateRoles.get()) {\n        saveRoles();\n      }\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","sourceOld":"  /**\n   * Remove values that correspond to dead nodes. If values contained a 'nodeRole'\n   * key then /roles.json is updated.\n   */\n  public void simRemoveDeadNodes() {\n    Set<String> myNodes = new HashSet<>(nodeValues.keySet());\n    myNodes.removeAll(liveNodesSet.get());\n    AtomicBoolean updateRoles = new AtomicBoolean(false);\n    myNodes.forEach(n -> {\n      LOG.debug(\"- removing dead node values: \" + n);\n      Map<String, Object> vals = nodeValues.remove(n);\n      if (vals.containsKey(\"nodeRole\")) {\n        updateRoles.set(true);\n      }\n    });\n    if (updateRoles.get()) {\n      saveRoles();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd","date":1534976797,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimNodeStateProvider#simRemoveDeadNodes().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimNodeStateProvider#simRemoveDeadNodes().mjava","sourceNew":"  /**\n   * Remove values that correspond to dead nodes. If values contained a 'nodeRole'\n   * key then /roles.json is updated.\n   */\n  public void simRemoveDeadNodes() throws InterruptedException {\n    Set<String> myNodes = new HashSet<>(nodeValues.keySet());\n    myNodes.removeAll(liveNodesSet.get());\n    lock.lockInterruptibly();\n    try {\n      AtomicBoolean updateRoles = new AtomicBoolean(false);\n      myNodes.forEach(n -> {\n        log.debug(\"- removing dead node values: \" + n);\n        Map<String, Object> vals = nodeValues.remove(n);\n        if (vals.containsKey(\"nodeRole\")) {\n          updateRoles.set(true);\n        }\n      });\n      if (updateRoles.get()) {\n        saveRoles();\n      }\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","sourceOld":"  /**\n   * Remove values that correspond to dead nodes. If values contained a 'nodeRole'\n   * key then /roles.json is updated.\n   */\n  public void simRemoveDeadNodes() throws InterruptedException {\n    Set<String> myNodes = new HashSet<>(nodeValues.keySet());\n    myNodes.removeAll(liveNodesSet.get());\n    lock.lockInterruptibly();\n    try {\n      AtomicBoolean updateRoles = new AtomicBoolean(false);\n      myNodes.forEach(n -> {\n        LOG.debug(\"- removing dead node values: \" + n);\n        Map<String, Object> vals = nodeValues.remove(n);\n        if (vals.containsKey(\"nodeRole\")) {\n          updateRoles.set(true);\n        }\n      });\n      if (updateRoles.get()) {\n        saveRoles();\n      }\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5","date":1556572478,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimNodeStateProvider#simRemoveDeadNodes().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimNodeStateProvider#simRemoveDeadNodes().mjava","sourceNew":"  /**\n   * Remove values that correspond to dead nodes. If values contained a 'nodeRole'\n   * key then /roles.json is updated.\n   */\n  public void simRemoveDeadNodes() throws InterruptedException {\n    Set<String> myNodes = new HashSet<>(nodeValues.keySet());\n    myNodes.removeAll(liveNodesSet.get());\n    lock.lockInterruptibly();\n    try {\n      AtomicBoolean updateRoles = new AtomicBoolean(false);\n      myNodes.forEach(n -> {\n        log.debug(\"- removing dead node values: \" + n);\n        Map<String, Object> vals = nodeValues.remove(n);\n        if (vals.containsKey(\"nodeRole\")) {\n          updateRoles.set(true);\n        }\n      });\n      if (updateRoles.get()) {\n        saveRoles();\n      }\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","sourceOld":"  /**\n   * Remove values that correspond to dead nodes. If values contained a 'nodeRole'\n   * key then /roles.json is updated.\n   */\n  public void simRemoveDeadNodes() throws InterruptedException {\n    Set<String> myNodes = new HashSet<>(nodeValues.keySet());\n    myNodes.removeAll(liveNodesSet.get());\n    lock.lockInterruptibly();\n    try {\n      AtomicBoolean updateRoles = new AtomicBoolean(false);\n      myNodes.forEach(n -> {\n        log.debug(\"- removing dead node values: \" + n);\n        Map<String, Object> vals = nodeValues.remove(n);\n        if (vals.containsKey(\"nodeRole\")) {\n          updateRoles.set(true);\n        }\n      });\n      if (updateRoles.get()) {\n        saveRoles();\n      }\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b70042a8a492f7054d480ccdd2be9796510d4327":["a4422b331d00607258b0ed3e43934306e67764aa","ad60b6945c360ff89899d716d9cdec8dd674e2a0"],"a4422b331d00607258b0ed3e43934306e67764aa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"ad60b6945c360ff89899d716d9cdec8dd674e2a0":["a4422b331d00607258b0ed3e43934306e67764aa"],"f592209545c71895260367152601e9200399776d":["a4422b331d00607258b0ed3e43934306e67764aa","ad60b6945c360ff89899d716d9cdec8dd674e2a0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["ad60b6945c360ff89899d716d9cdec8dd674e2a0"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a4422b331d00607258b0ed3e43934306e67764aa"],"b70042a8a492f7054d480ccdd2be9796510d4327":[],"a4422b331d00607258b0ed3e43934306e67764aa":["b70042a8a492f7054d480ccdd2be9796510d4327","ad60b6945c360ff89899d716d9cdec8dd674e2a0","f592209545c71895260367152601e9200399776d"],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad60b6945c360ff89899d716d9cdec8dd674e2a0":["b70042a8a492f7054d480ccdd2be9796510d4327","f592209545c71895260367152601e9200399776d","e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"f592209545c71895260367152601e9200399776d":[],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b70042a8a492f7054d480ccdd2be9796510d4327","f592209545c71895260367152601e9200399776d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}