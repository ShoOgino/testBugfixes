{"path":"lucene/src/java/org/apache/lucene/index/codecs/DefaultTermVectorsWriter#addRawDocuments(DefaultTermVectorsReader,int[],int[],int).mjava","commits":[{"id":"3cc749c053615f5871f3b95715fe292f34e70a53","date":1321470575,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/DefaultTermVectorsWriter#addRawDocuments(DefaultTermVectorsReader,int[],int[],int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/TermVectorsWriter#addRawDocuments(TermVectorsReader,int[],int[],int).mjava","sourceNew":"  /**\n   * Do a bulk copy of numDocs documents from reader to our\n   * streams.  This is used to expedite merging, if the\n   * field numbers are congruent.\n   */\n  private void addRawDocuments(DefaultTermVectorsReader reader, int[] tvdLengths, int[] tvfLengths, int numDocs) throws IOException {\n    long tvdPosition = tvd.getFilePointer();\n    long tvfPosition = tvf.getFilePointer();\n    long tvdStart = tvdPosition;\n    long tvfStart = tvfPosition;\n    for(int i=0;i<numDocs;i++) {\n      tvx.writeLong(tvdPosition);\n      tvdPosition += tvdLengths[i];\n      tvx.writeLong(tvfPosition);\n      tvfPosition += tvfLengths[i];\n    }\n    tvd.copyBytes(reader.getTvdStream(), tvdPosition-tvdStart);\n    tvf.copyBytes(reader.getTvfStream(), tvfPosition-tvfStart);\n    assert tvd.getFilePointer() == tvdPosition;\n    assert tvf.getFilePointer() == tvfPosition;\n  }\n\n","sourceOld":"  /**\n   * Do a bulk copy of numDocs documents from reader to our\n   * streams.  This is used to expedite merging, if the\n   * field numbers are congruent.\n   */\n  final void addRawDocuments(TermVectorsReader reader, int[] tvdLengths, int[] tvfLengths, int numDocs) throws IOException {\n    long tvdPosition = tvd.getFilePointer();\n    long tvfPosition = tvf.getFilePointer();\n    long tvdStart = tvdPosition;\n    long tvfStart = tvfPosition;\n    for(int i=0;i<numDocs;i++) {\n      tvx.writeLong(tvdPosition);\n      tvdPosition += tvdLengths[i];\n      tvx.writeLong(tvfPosition);\n      tvfPosition += tvfLengths[i];\n    }\n    tvd.copyBytes(reader.getTvdStream(), tvdPosition-tvdStart);\n    tvf.copyBytes(reader.getTvfStream(), tvfPosition-tvfStart);\n    assert tvd.getFilePointer() == tvdPosition;\n    assert tvf.getFilePointer() == tvfPosition;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cfd7f00f3dbc4c50d336540f063493fc0f7d830f","date":1322850565,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/lucene40/Lucene40TermVectorsWriter#addRawDocuments(Lucene40TermVectorsReader,int[],int[],int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/DefaultTermVectorsWriter#addRawDocuments(DefaultTermVectorsReader,int[],int[],int).mjava","sourceNew":"  /**\n   * Do a bulk copy of numDocs documents from reader to our\n   * streams.  This is used to expedite merging, if the\n   * field numbers are congruent.\n   */\n  private void addRawDocuments(Lucene40TermVectorsReader reader, int[] tvdLengths, int[] tvfLengths, int numDocs) throws IOException {\n    long tvdPosition = tvd.getFilePointer();\n    long tvfPosition = tvf.getFilePointer();\n    long tvdStart = tvdPosition;\n    long tvfStart = tvfPosition;\n    for(int i=0;i<numDocs;i++) {\n      tvx.writeLong(tvdPosition);\n      tvdPosition += tvdLengths[i];\n      tvx.writeLong(tvfPosition);\n      tvfPosition += tvfLengths[i];\n    }\n    tvd.copyBytes(reader.getTvdStream(), tvdPosition-tvdStart);\n    tvf.copyBytes(reader.getTvfStream(), tvfPosition-tvfStart);\n    assert tvd.getFilePointer() == tvdPosition;\n    assert tvf.getFilePointer() == tvfPosition;\n  }\n\n","sourceOld":"  /**\n   * Do a bulk copy of numDocs documents from reader to our\n   * streams.  This is used to expedite merging, if the\n   * field numbers are congruent.\n   */\n  private void addRawDocuments(DefaultTermVectorsReader reader, int[] tvdLengths, int[] tvfLengths, int numDocs) throws IOException {\n    long tvdPosition = tvd.getFilePointer();\n    long tvfPosition = tvf.getFilePointer();\n    long tvdStart = tvdPosition;\n    long tvfStart = tvfPosition;\n    for(int i=0;i<numDocs;i++) {\n      tvx.writeLong(tvdPosition);\n      tvdPosition += tvdLengths[i];\n      tvx.writeLong(tvfPosition);\n      tvfPosition += tvfLengths[i];\n    }\n    tvd.copyBytes(reader.getTvdStream(), tvdPosition-tvdStart);\n    tvf.copyBytes(reader.getTvfStream(), tvfPosition-tvfStart);\n    assert tvd.getFilePointer() == tvdPosition;\n    assert tvf.getFilePointer() == tvfPosition;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"cfd7f00f3dbc4c50d336540f063493fc0f7d830f":["3cc749c053615f5871f3b95715fe292f34e70a53"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cc749c053615f5871f3b95715fe292f34e70a53":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cfd7f00f3dbc4c50d336540f063493fc0f7d830f"]},"commit2Childs":{"cfd7f00f3dbc4c50d336540f063493fc0f7d830f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3cc749c053615f5871f3b95715fe292f34e70a53"],"3cc749c053615f5871f3b95715fe292f34e70a53":["cfd7f00f3dbc4c50d336540f063493fc0f7d830f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}