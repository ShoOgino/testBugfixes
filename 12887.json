{"path":"lucene/core/src/java/org/apache/lucene/index/SortedDocValuesTermsEnum#seekExact(BytesRef,boolean).mjava","commits":[{"id":"9869c4b5ef8a83c1000acb3b675e516a116d9061","date":1358794142,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SortedDocValuesTermsEnum#seekExact(BytesRef,boolean).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public boolean seekExact(BytesRef text, boolean useCache) throws IOException {\n    int ord = values.lookupTerm(text, term);\n    if (ord >= 0) {\n      term.copyBytes(text);\n      currentOrd = ord;\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f062bd51bf0f5e04c51d9aa8d5a722d9860421b0","date":1359420014,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SortedDocValuesTermsEnum#seekExact(BytesRef,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SortedDocValuesTermsEnum#seekExact(BytesRef,boolean).mjava","sourceNew":"  @Override\n  public boolean seekExact(BytesRef text, boolean useCache) throws IOException {\n    int ord = values.lookupTerm(text, term);\n    if (ord >= 0) {\n      currentOrd = ord;\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","sourceOld":"  @Override\n  public boolean seekExact(BytesRef text, boolean useCache) throws IOException {\n    int ord = values.lookupTerm(text, term);\n    if (ord >= 0) {\n      term.copyBytes(text);\n      currentOrd = ord;\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3d5a5a419065ad4cdc70485f83fa9fe9373aaa8b","date":1359664357,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SortedDocValuesTermsEnum#seekExact(BytesRef,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SortedDocValuesTermsEnum#seekExact(BytesRef,boolean).mjava","sourceNew":"  @Override\n  public boolean seekExact(BytesRef text, boolean useCache) throws IOException {\n    int ord = values.lookupTerm(text);\n    if (ord >= 0) {\n      currentOrd = ord;\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","sourceOld":"  @Override\n  public boolean seekExact(BytesRef text, boolean useCache) throws IOException {\n    int ord = values.lookupTerm(text, term);\n    if (ord >= 0) {\n      currentOrd = ord;\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SortedDocValuesTermsEnum#seekExact(BytesRef,boolean).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public boolean seekExact(BytesRef text, boolean useCache) throws IOException {\n    int ord = values.lookupTerm(text);\n    if (ord >= 0) {\n      currentOrd = ord;\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c2b6033d1fc841b41dbf56c765ce3dc053ecba6","date":1363054647,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SortedDocValuesTermsEnum#seekExact(BytesRef,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SortedDocValuesTermsEnum#seekExact(BytesRef,boolean).mjava","sourceNew":"  @Override\n  public boolean seekExact(BytesRef text, boolean useCache) throws IOException {\n    int ord = values.lookupTerm(text);\n    if (ord >= 0) {\n      term.offset = 0;\n      // TODO: is there a cleaner way?\n      // term.bytes may be pointing to codec-private byte[]\n      // storage, so we must force new byte[] allocation:\n      term.bytes = new byte[text.length];\n      term.copyBytes(text);\n      currentOrd = ord;\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","sourceOld":"  @Override\n  public boolean seekExact(BytesRef text, boolean useCache) throws IOException {\n    int ord = values.lookupTerm(text);\n    if (ord >= 0) {\n      currentOrd = ord;\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eee5f2a24465d2c9a5f86ab84b7c35041a30fda8","date":1373996650,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SortedDocValuesTermsEnum#seekExact(BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SortedDocValuesTermsEnum#seekExact(BytesRef,boolean).mjava","sourceNew":"  @Override\n  public boolean seekExact(BytesRef text) throws IOException {\n    int ord = values.lookupTerm(text);\n    if (ord >= 0) {\n      term.offset = 0;\n      // TODO: is there a cleaner way?\n      // term.bytes may be pointing to codec-private byte[]\n      // storage, so we must force new byte[] allocation:\n      term.bytes = new byte[text.length];\n      term.copyBytes(text);\n      currentOrd = ord;\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","sourceOld":"  @Override\n  public boolean seekExact(BytesRef text, boolean useCache) throws IOException {\n    int ord = values.lookupTerm(text);\n    if (ord >= 0) {\n      term.offset = 0;\n      // TODO: is there a cleaner way?\n      // term.bytes may be pointing to codec-private byte[]\n      // storage, so we must force new byte[] allocation:\n      term.bytes = new byte[text.length];\n      term.copyBytes(text);\n      currentOrd = ord;\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":5,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SortedDocValuesTermsEnum#seekExact(BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SortedDocValuesTermsEnum#seekExact(BytesRef,boolean).mjava","sourceNew":"  @Override\n  public boolean seekExact(BytesRef text) throws IOException {\n    int ord = values.lookupTerm(text);\n    if (ord >= 0) {\n      term.offset = 0;\n      // TODO: is there a cleaner way?\n      // term.bytes may be pointing to codec-private byte[]\n      // storage, so we must force new byte[] allocation:\n      term.bytes = new byte[text.length];\n      term.copyBytes(text);\n      currentOrd = ord;\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","sourceOld":"  @Override\n  public boolean seekExact(BytesRef text, boolean useCache) throws IOException {\n    int ord = values.lookupTerm(text);\n    if (ord >= 0) {\n      term.offset = 0;\n      // TODO: is there a cleaner way?\n      // term.bytes may be pointing to codec-private byte[]\n      // storage, so we must force new byte[] allocation:\n      term.bytes = new byte[text.length];\n      term.copyBytes(text);\n      currentOrd = ord;\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5c2b6033d1fc841b41dbf56c765ce3dc053ecba6":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3d5a5a419065ad4cdc70485f83fa9fe9373aaa8b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3d5a5a419065ad4cdc70485f83fa9fe9373aaa8b":["f062bd51bf0f5e04c51d9aa8d5a722d9860421b0"],"9869c4b5ef8a83c1000acb3b675e516a116d9061":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["5c2b6033d1fc841b41dbf56c765ce3dc053ecba6"],"f062bd51bf0f5e04c51d9aa8d5a722d9860421b0":["9869c4b5ef8a83c1000acb3b675e516a116d9061"],"eee5f2a24465d2c9a5f86ab84b7c35041a30fda8":["5c2b6033d1fc841b41dbf56c765ce3dc053ecba6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["eee5f2a24465d2c9a5f86ab84b7c35041a30fda8"]},"commit2Childs":{"5c2b6033d1fc841b41dbf56c765ce3dc053ecba6":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","eee5f2a24465d2c9a5f86ab84b7c35041a30fda8"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["5c2b6033d1fc841b41dbf56c765ce3dc053ecba6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d4d69c535930b5cce125cff868d40f6373dc27d4","9869c4b5ef8a83c1000acb3b675e516a116d9061"],"3d5a5a419065ad4cdc70485f83fa9fe9373aaa8b":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"9869c4b5ef8a83c1000acb3b675e516a116d9061":["f062bd51bf0f5e04c51d9aa8d5a722d9860421b0"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"f062bd51bf0f5e04c51d9aa8d5a722d9860421b0":["3d5a5a419065ad4cdc70485f83fa9fe9373aaa8b"],"eee5f2a24465d2c9a5f86ab84b7c35041a30fda8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}