{"path":"solr/core/src/java/org/apache/solr/legacy/LegacyNumericUtils#intToPrefixCoded(int,int,BytesRefBuilder).mjava","commits":[{"id":"a178ac3dec643551e66363c457a9074f55545f86","date":1496133188,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/legacy/LegacyNumericUtils#intToPrefixCoded(int,int,BytesRefBuilder).mjava","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/legacy/LegacyNumericUtils#intToPrefixCoded(int,int,BytesRefBuilder).mjava","sourceNew":"  /**\n   * Returns prefix coded bits after reducing the precision by <code>shift</code> bits.\n   * This is method is used by {@link org.apache.solr.legacy.LegacyNumericTokenStream}.\n   * After encoding, {@code bytes.offset} will always be 0.\n   * @param val the numeric value\n   * @param shift how many bits to strip from the right\n   * @param bytes will contain the encoded value\n   */\n  public static void intToPrefixCoded(final int val, final int shift, final BytesRefBuilder bytes) {\n    // ensure shift is 0..31\n    if ((shift & ~0x1f) != 0) {\n      throw new IllegalArgumentException(\"Illegal shift value, must be 0..31; got shift=\" + shift);\n    }\n    int nChars = (((31-shift)*37)>>8) + 1;    // i/7 is the same as (i*37)>>8 for i in 0..63\n    bytes.setLength(nChars+1);   // one extra for the byte that contains the shift info\n    bytes.grow(LegacyNumericUtils.BUF_SIZE_LONG);  // use the max\n    bytes.setByteAt(0, (byte)(SHIFT_START_INT + shift));\n    int sortableBits = val ^ 0x80000000;\n    sortableBits >>>= shift;\n    while (nChars > 0) {\n      // Store 7 bits per byte for compatibility\n      // with UTF-8 encoding of terms\n      bytes.setByteAt(nChars--, (byte)(sortableBits & 0x7f));\n      sortableBits >>>= 7;\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns prefix coded bits after reducing the precision by <code>shift</code> bits.\n   * This is method is used by {@link org.apache.lucene.legacy.LegacyNumericTokenStream}.\n   * After encoding, {@code bytes.offset} will always be 0.\n   * @param val the numeric value\n   * @param shift how many bits to strip from the right\n   * @param bytes will contain the encoded value\n   */\n  public static void intToPrefixCoded(final int val, final int shift, final BytesRefBuilder bytes) {\n    // ensure shift is 0..31\n    if ((shift & ~0x1f) != 0) {\n      throw new IllegalArgumentException(\"Illegal shift value, must be 0..31; got shift=\" + shift);\n    }\n    int nChars = (((31-shift)*37)>>8) + 1;    // i/7 is the same as (i*37)>>8 for i in 0..63\n    bytes.setLength(nChars+1);   // one extra for the byte that contains the shift info\n    bytes.grow(LegacyNumericUtils.BUF_SIZE_LONG);  // use the max\n    bytes.setByteAt(0, (byte)(SHIFT_START_INT + shift));\n    int sortableBits = val ^ 0x80000000;\n    sortableBits >>>= shift;\n    while (nChars > 0) {\n      // Store 7 bits per byte for compatibility\n      // with UTF-8 encoding of terms\n      bytes.setByteAt(nChars--, (byte)(sortableBits & 0x7f));\n      sortableBits >>>= 7;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1f5728f32a4a256b36cfabd7a2636452f599bb9","date":1496231774,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/legacy/LegacyNumericUtils#intToPrefixCoded(int,int,BytesRefBuilder).mjava","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/legacy/LegacyNumericUtils#intToPrefixCoded(int,int,BytesRefBuilder).mjava","sourceNew":"  /**\n   * Returns prefix coded bits after reducing the precision by <code>shift</code> bits.\n   * This is method is used by {@link org.apache.solr.legacy.LegacyNumericTokenStream}.\n   * After encoding, {@code bytes.offset} will always be 0.\n   * @param val the numeric value\n   * @param shift how many bits to strip from the right\n   * @param bytes will contain the encoded value\n   */\n  public static void intToPrefixCoded(final int val, final int shift, final BytesRefBuilder bytes) {\n    // ensure shift is 0..31\n    if ((shift & ~0x1f) != 0) {\n      throw new IllegalArgumentException(\"Illegal shift value, must be 0..31; got shift=\" + shift);\n    }\n    int nChars = (((31-shift)*37)>>8) + 1;    // i/7 is the same as (i*37)>>8 for i in 0..63\n    bytes.setLength(nChars+1);   // one extra for the byte that contains the shift info\n    bytes.grow(LegacyNumericUtils.BUF_SIZE_LONG);  // use the max\n    bytes.setByteAt(0, (byte)(SHIFT_START_INT + shift));\n    int sortableBits = val ^ 0x80000000;\n    sortableBits >>>= shift;\n    while (nChars > 0) {\n      // Store 7 bits per byte for compatibility\n      // with UTF-8 encoding of terms\n      bytes.setByteAt(nChars--, (byte)(sortableBits & 0x7f));\n      sortableBits >>>= 7;\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns prefix coded bits after reducing the precision by <code>shift</code> bits.\n   * This is method is used by {@link org.apache.lucene.legacy.LegacyNumericTokenStream}.\n   * After encoding, {@code bytes.offset} will always be 0.\n   * @param val the numeric value\n   * @param shift how many bits to strip from the right\n   * @param bytes will contain the encoded value\n   */\n  public static void intToPrefixCoded(final int val, final int shift, final BytesRefBuilder bytes) {\n    // ensure shift is 0..31\n    if ((shift & ~0x1f) != 0) {\n      throw new IllegalArgumentException(\"Illegal shift value, must be 0..31; got shift=\" + shift);\n    }\n    int nChars = (((31-shift)*37)>>8) + 1;    // i/7 is the same as (i*37)>>8 for i in 0..63\n    bytes.setLength(nChars+1);   // one extra for the byte that contains the shift info\n    bytes.grow(LegacyNumericUtils.BUF_SIZE_LONG);  // use the max\n    bytes.setByteAt(0, (byte)(SHIFT_START_INT + shift));\n    int sortableBits = val ^ 0x80000000;\n    sortableBits >>>= shift;\n    while (nChars > 0) {\n      // Store 7 bits per byte for compatibility\n      // with UTF-8 encoding of terms\n      bytes.setByteAt(nChars--, (byte)(sortableBits & 0x7f));\n      sortableBits >>>= 7;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/legacy/LegacyNumericUtils#intToPrefixCoded(int,int,BytesRefBuilder).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns prefix coded bits after reducing the precision by <code>shift</code> bits.\n   * This is method is used by {@link org.apache.solr.legacy.LegacyNumericTokenStream}.\n   * After encoding, {@code bytes.offset} will always be 0.\n   * @param val the numeric value\n   * @param shift how many bits to strip from the right\n   * @param bytes will contain the encoded value\n   */\n  public static void intToPrefixCoded(final int val, final int shift, final BytesRefBuilder bytes) {\n    // ensure shift is 0..31\n    if ((shift & ~0x1f) != 0) {\n      throw new IllegalArgumentException(\"Illegal shift value, must be 0..31; got shift=\" + shift);\n    }\n    int nChars = (((31-shift)*37)>>8) + 1;    // i/7 is the same as (i*37)>>8 for i in 0..63\n    bytes.setLength(nChars+1);   // one extra for the byte that contains the shift info\n    bytes.grow(LegacyNumericUtils.BUF_SIZE_LONG);  // use the max\n    bytes.setByteAt(0, (byte)(SHIFT_START_INT + shift));\n    int sortableBits = val ^ 0x80000000;\n    sortableBits >>>= shift;\n    while (nChars > 0) {\n      // Store 7 bits per byte for compatibility\n      // with UTF-8 encoding of terms\n      bytes.setByteAt(nChars--, (byte)(sortableBits & 0x7f));\n      sortableBits >>>= 7;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a178ac3dec643551e66363c457a9074f55545f86":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a178ac3dec643551e66363c457a9074f55545f86"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d1f5728f32a4a256b36cfabd7a2636452f599bb9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a178ac3dec643551e66363c457a9074f55545f86"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d1f5728f32a4a256b36cfabd7a2636452f599bb9"]},"commit2Childs":{"a178ac3dec643551e66363c457a9074f55545f86":["e9017cf144952056066919f1ebc7897ff9bd71b1","d1f5728f32a4a256b36cfabd7a2636452f599bb9"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a178ac3dec643551e66363c457a9074f55545f86","e9017cf144952056066919f1ebc7897ff9bd71b1","d1f5728f32a4a256b36cfabd7a2636452f599bb9"],"d1f5728f32a4a256b36cfabd7a2636452f599bb9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}