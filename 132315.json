{"path":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#abortThreadState(ThreadState,Set[String]).mjava","commits":[{"id":"7af110b00ea8df9429309d83e38e0533d82e144f","date":1376924768,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#abortThreadState(ThreadState,Set[String]).mjava","pathOld":"/dev/null","sourceNew":"  private final void abortThreadState(final ThreadState perThread, Set<String> newFiles) {\n    assert perThread.isHeldByCurrentThread();\n    if (perThread.isActive()) { // we might be closed\n      if (perThread.isInitialized()) { \n        try {\n          subtractFlushedNumDocs(perThread.dwpt.getNumDocsInRAM());\n          perThread.dwpt.abort(newFiles);\n        } finally {\n          perThread.dwpt.checkAndResetHasAborted();\n          flushControl.doOnAbort(perThread);\n        }\n      } else {\n        flushControl.doOnAbort(perThread);\n      }\n    } else {\n      assert closed;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["98a04f56464afdffd4c430d6c47a0c868a38354e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"31d4861802ca404d78ca1d15f4550eec415b9199","date":1376947894,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#abortThreadState(ThreadState,Set[String]).mjava","pathOld":"/dev/null","sourceNew":"  private final void abortThreadState(final ThreadState perThread, Set<String> newFiles) {\n    assert perThread.isHeldByCurrentThread();\n    if (perThread.isActive()) { // we might be closed\n      if (perThread.isInitialized()) { \n        try {\n          subtractFlushedNumDocs(perThread.dwpt.getNumDocsInRAM());\n          perThread.dwpt.abort(newFiles);\n        } finally {\n          perThread.dwpt.checkAndResetHasAborted();\n          flushControl.doOnAbort(perThread);\n        }\n      } else {\n        flushControl.doOnAbort(perThread);\n      }\n    } else {\n      assert closed;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#abortThreadState(ThreadState,Set[String]).mjava","pathOld":"/dev/null","sourceNew":"  private final void abortThreadState(final ThreadState perThread, Set<String> newFiles) {\n    assert perThread.isHeldByCurrentThread();\n    if (perThread.isActive()) { // we might be closed\n      if (perThread.isInitialized()) { \n        try {\n          subtractFlushedNumDocs(perThread.dwpt.getNumDocsInRAM());\n          perThread.dwpt.abort(newFiles);\n        } finally {\n          perThread.dwpt.checkAndResetHasAborted();\n          flushControl.doOnAbort(perThread);\n        }\n      } else {\n        flushControl.doOnAbort(perThread);\n      }\n    } else {\n      assert closed;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9299079153fd7895bf3cf6835cf7019af2ba89b3","date":1417813477,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#abortThreadState(ThreadState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#abortThreadState(ThreadState,Set[String]).mjava","sourceNew":"  private final void abortThreadState(final ThreadState perThread) {\n    assert perThread.isHeldByCurrentThread();\n    if (perThread.isActive()) { // we might be closed\n      if (perThread.isInitialized()) { \n        try {\n          subtractFlushedNumDocs(perThread.dwpt.getNumDocsInRAM());\n          perThread.dwpt.abort();\n        } finally {\n          flushControl.doOnAbort(perThread);\n        }\n      } else {\n        flushControl.doOnAbort(perThread);\n      }\n    } else {\n      assert closed;\n    }\n  }\n\n","sourceOld":"  private final void abortThreadState(final ThreadState perThread, Set<String> newFiles) {\n    assert perThread.isHeldByCurrentThread();\n    if (perThread.isActive()) { // we might be closed\n      if (perThread.isInitialized()) { \n        try {\n          subtractFlushedNumDocs(perThread.dwpt.getNumDocsInRAM());\n          perThread.dwpt.abort(newFiles);\n        } finally {\n          perThread.dwpt.checkAndResetHasAborted();\n          flushControl.doOnAbort(perThread);\n        }\n      } else {\n        flushControl.doOnAbort(perThread);\n      }\n    } else {\n      assert closed;\n    }\n  }\n\n","bugFix":null,"bugIntro":["98a04f56464afdffd4c430d6c47a0c868a38354e"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"7af110b00ea8df9429309d83e38e0533d82e144f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7af110b00ea8df9429309d83e38e0533d82e144f"],"31d4861802ca404d78ca1d15f4550eec415b9199":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7af110b00ea8df9429309d83e38e0533d82e144f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9299079153fd7895bf3cf6835cf7019af2ba89b3":["7af110b00ea8df9429309d83e38e0533d82e144f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9299079153fd7895bf3cf6835cf7019af2ba89b3"]},"commit2Childs":{"7af110b00ea8df9429309d83e38e0533d82e144f":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","31d4861802ca404d78ca1d15f4550eec415b9199","9299079153fd7895bf3cf6835cf7019af2ba89b3"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"31d4861802ca404d78ca1d15f4550eec415b9199":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7af110b00ea8df9429309d83e38e0533d82e144f","3dffec77fb8f7d0e9ca4869dddd6af94528b4576","31d4861802ca404d78ca1d15f4550eec415b9199"],"9299079153fd7895bf3cf6835cf7019af2ba89b3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","31d4861802ca404d78ca1d15f4550eec415b9199","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}