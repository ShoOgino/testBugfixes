{"path":"lucene/src/test/org/apache/lucene/search/MultiThreadTermVectorsReader[TestMultiThreadTermVectors]#verifyVectors(TermFreqVector[],int).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/MultiThreadTermVectorsReader[TestMultiThreadTermVectors]#verifyVectors(TermFreqVector[],int).mjava","pathOld":"src/test/org/apache/lucene/search/MultiThreadTermVectorsReader[TestMultiThreadTermVectors]#verifyVectors(TermFreqVector[],int).mjava","sourceNew":"  private void verifyVectors(TermFreqVector[] vectors, int num) {\n    StringBuilder temp = new StringBuilder();\n    String[] terms = null;\n    for (int i = 0; i < vectors.length; i++) {\n      terms = vectors[i].getTerms();\n      for (int z = 0; z < terms.length; z++) {\n        temp.append(terms[z]);\n      }\n    }\n    \n    if (!English.intToEnglish(num).trim().equals(temp.toString().trim()))\n        System.out.println(\"wrong term result\");\n  }\n\n","sourceOld":"  private void verifyVectors(TermFreqVector[] vectors, int num) {\n    StringBuilder temp = new StringBuilder();\n    String[] terms = null;\n    for (int i = 0; i < vectors.length; i++) {\n      terms = vectors[i].getTerms();\n      for (int z = 0; z < terms.length; z++) {\n        temp.append(terms[z]);\n      }\n    }\n    \n    if (!English.intToEnglish(num).trim().equals(temp.toString().trim()))\n        System.out.println(\"wrong term result\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4f29ba80b723649f5feb7e37afe1a558dd2c1304","date":1278318805,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/MultiThreadTermVectorsReader[TestMultiThreadTermVectors]#verifyVectors(TermFreqVector[],int).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/MultiThreadTermVectorsReader[TestMultiThreadTermVectors]#verifyVectors(TermFreqVector[],int).mjava","sourceNew":"  private void verifyVectors(TermFreqVector[] vectors, int num) {\n    StringBuilder temp = new StringBuilder();\n    BytesRef[] terms = null;\n    for (int i = 0; i < vectors.length; i++) {\n      terms = vectors[i].getTerms();\n      for (int z = 0; z < terms.length; z++) {\n        temp.append(terms[z].utf8ToString());\n      }\n    }\n    \n    if (!English.intToEnglish(num).trim().equals(temp.toString().trim()))\n        System.out.println(\"wrong term result\");\n  }\n\n","sourceOld":"  private void verifyVectors(TermFreqVector[] vectors, int num) {\n    StringBuilder temp = new StringBuilder();\n    String[] terms = null;\n    for (int i = 0; i < vectors.length; i++) {\n      terms = vectors[i].getTerms();\n      for (int z = 0; z < terms.length; z++) {\n        temp.append(terms[z]);\n      }\n    }\n    \n    if (!English.intToEnglish(num).trim().equals(temp.toString().trim()))\n        System.out.println(\"wrong term result\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/MultiThreadTermVectorsReader[TestMultiThreadTermVectors]#verifyVectors(TermFreqVector[],int).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/MultiThreadTermVectorsReader[TestMultiThreadTermVectors]#verifyVectors(TermFreqVector[],int).mjava","sourceNew":"  private void verifyVectors(TermFreqVector[] vectors, int num) {\n    StringBuilder temp = new StringBuilder();\n    BytesRef[] terms = null;\n    for (int i = 0; i < vectors.length; i++) {\n      terms = vectors[i].getTerms();\n      for (int z = 0; z < terms.length; z++) {\n        temp.append(terms[z].utf8ToString());\n      }\n    }\n    \n    if (!English.intToEnglish(num).trim().equals(temp.toString().trim()))\n        System.out.println(\"wrong term result\");\n  }\n\n","sourceOld":"  private void verifyVectors(TermFreqVector[] vectors, int num) {\n    StringBuilder temp = new StringBuilder();\n    String[] terms = null;\n    for (int i = 0; i < vectors.length; i++) {\n      terms = vectors[i].getTerms();\n      for (int z = 0; z < terms.length; z++) {\n        temp.append(terms[z]);\n      }\n    }\n    \n    if (!English.intToEnglish(num).trim().equals(temp.toString().trim()))\n        System.out.println(\"wrong term result\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc749c053615f5871f3b95715fe292f34e70a53","date":1321470575,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/MultiThreadTermVectorsReader[TestMultiThreadTermVectors]#verifyVector(TermsEnum,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/MultiThreadTermVectorsReader[TestMultiThreadTermVectors]#verifyVectors(TermFreqVector[],int).mjava","sourceNew":"  private void verifyVector(TermsEnum vector, int num) throws IOException {\n    StringBuilder temp = new StringBuilder();\n    while(vector.next() != null) {\n      temp.append(vector.term().utf8ToString());\n    }\n    if (!English.intToEnglish(num).trim().equals(temp.toString().trim()))\n        System.out.println(\"wrong term result\");\n  }\n\n","sourceOld":"  private void verifyVectors(TermFreqVector[] vectors, int num) {\n    StringBuilder temp = new StringBuilder();\n    BytesRef[] terms = null;\n    for (int i = 0; i < vectors.length; i++) {\n      terms = vectors[i].getTerms();\n      for (int z = 0; z < terms.length; z++) {\n        temp.append(terms[z].utf8ToString());\n      }\n    }\n    \n    if (!English.intToEnglish(num).trim().equals(temp.toString().trim()))\n        System.out.println(\"wrong term result\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4f29ba80b723649f5feb7e37afe1a558dd2c1304":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cc749c053615f5871f3b95715fe292f34e70a53":["4f29ba80b723649f5feb7e37afe1a558dd2c1304"],"5f4e87790277826a2aea119328600dfb07761f32":["9454a6510e2db155fb01faa5c049b06ece95fab9","4f29ba80b723649f5feb7e37afe1a558dd2c1304"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc749c053615f5871f3b95715fe292f34e70a53"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"4f29ba80b723649f5feb7e37afe1a558dd2c1304":["3cc749c053615f5871f3b95715fe292f34e70a53","5f4e87790277826a2aea119328600dfb07761f32"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"3cc749c053615f5871f3b95715fe292f34e70a53":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5f4e87790277826a2aea119328600dfb07761f32":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["4f29ba80b723649f5feb7e37afe1a558dd2c1304","5f4e87790277826a2aea119328600dfb07761f32"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5f4e87790277826a2aea119328600dfb07761f32","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}