{"path":"solr/src/common/org/apache/solr/common/util/Hash#lookup3(int[],int,int,int).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/common/org/apache/solr/common/util/Hash#lookup3(int[],int,int,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * A Java implementation of hashword from lookup3.c by Bob Jenkins\n   * (<a href=\"http://burtleburtle.net/bob/c/lookup3.c\">original source</a>).\n   *\n   * @param k   the key to hash\n   * @param offset   offset of the start of the key\n   * @param length   length of the key\n   * @param initval  initial value to fold into the hash\n   * @return  the 32 bit hash code\n   */\n  @SuppressWarnings(\"fallthrough\")\n  public static int lookup3(int[] k, int offset, int length, int initval) {\n    int a,b,c;\n    a = b = c = 0xdeadbeef + (length<<2) + initval;\n\n    int i=offset;\n    while (length > 3)\n    {\n      a += k[i];\n      b += k[i+1];\n      c += k[i+2];\n\n      // mix(a,b,c)... Java needs \"out\" parameters!!!\n      // Note: recent JVMs (Sun JDK6) turn pairs of shifts (needed to do a rotate)\n      // into real x86 rotate instructions.\n      {\n        a -= c;  a ^= (c<<4)|(c>>>-4);   c += b;\n        b -= a;  b ^= (a<<6)|(a>>>-6);   a += c;\n        c -= b;  c ^= (b<<8)|(b>>>-8);   b += a;\n        a -= c;  a ^= (c<<16)|(c>>>-16); c += b;\n        b -= a;  b ^= (a<<19)|(a>>>-19); a += c;\n        c -= b;  c ^= (b<<4)|(b>>>-4);   b += a;\n      }\n\n      length -= 3;\n      i += 3;\n    }\n\n    switch(length) {\n      case 3 : c+=k[i+2];  // fall through\n      case 2 : b+=k[i+1];  // fall through\n      case 1 : a+=k[i+0];  // fall through\n        // final(a,b,c);\n      {\n        c ^= b; c -= (b<<14)|(b>>>-14);\n        a ^= c; a -= (c<<11)|(c>>>-11);\n        b ^= a; b -= (a<<25)|(a>>>-25);\n        c ^= b; c -= (b<<16)|(b>>>-16);\n        a ^= c; a -= (c<<4)|(c>>>-4);\n        b ^= a; b -= (a<<14)|(a>>>-14);\n        c ^= b; c -= (b<<24)|(b>>>-24);\n      }\n      case 0:\n        break;\n    }\n    return c;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/common/org/apache/solr/common/util/Hash#lookup3(int[],int,int,int).mjava","sourceNew":null,"sourceOld":"  /**\n   * A Java implementation of hashword from lookup3.c by Bob Jenkins\n   * (<a href=\"http://burtleburtle.net/bob/c/lookup3.c\">original source</a>).\n   *\n   * @param k   the key to hash\n   * @param offset   offset of the start of the key\n   * @param length   length of the key\n   * @param initval  initial value to fold into the hash\n   * @return  the 32 bit hash code\n   */\n  @SuppressWarnings(\"fallthrough\")\n  public static int lookup3(int[] k, int offset, int length, int initval) {\n    int a,b,c;\n    a = b = c = 0xdeadbeef + (length<<2) + initval;\n\n    int i=offset;\n    while (length > 3)\n    {\n      a += k[i];\n      b += k[i+1];\n      c += k[i+2];\n\n      // mix(a,b,c)... Java needs \"out\" parameters!!!\n      // Note: recent JVMs (Sun JDK6) turn pairs of shifts (needed to do a rotate)\n      // into real x86 rotate instructions.\n      {\n        a -= c;  a ^= (c<<4)|(c>>>-4);   c += b;\n        b -= a;  b ^= (a<<6)|(a>>>-6);   a += c;\n        c -= b;  c ^= (b<<8)|(b>>>-8);   b += a;\n        a -= c;  a ^= (c<<16)|(c>>>-16); c += b;\n        b -= a;  b ^= (a<<19)|(a>>>-19); a += c;\n        c -= b;  c ^= (b<<4)|(b>>>-4);   b += a;\n      }\n\n      length -= 3;\n      i += 3;\n    }\n\n    switch(length) {\n      case 3 : c+=k[i+2];  // fall through\n      case 2 : b+=k[i+1];  // fall through\n      case 1 : a+=k[i+0];  // fall through\n        // final(a,b,c);\n      {\n        c ^= b; c -= (b<<14)|(b>>>-14);\n        a ^= c; a -= (c<<11)|(c>>>-11);\n        b ^= a; b -= (a<<25)|(a>>>-25);\n        c ^= b; c -= (b<<16)|(b>>>-16);\n        a ^= c; a -= (c<<4)|(c>>>-4);\n        b ^= a; b -= (a<<14)|(a>>>-14);\n        c ^= b; c -= (b<<24)|(b>>>-24);\n      }\n      case 0:\n        break;\n    }\n    return c;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/common/org/apache/solr/common/util/Hash#lookup3(int[],int,int,int).mjava","pathOld":"src/common/org/apache/solr/common/util/Hash#lookup3(int[],int,int,int).mjava","sourceNew":"  /**\n   * A Java implementation of hashword from lookup3.c by Bob Jenkins\n   * (<a href=\"http://burtleburtle.net/bob/c/lookup3.c\">original source</a>).\n   *\n   * @param k   the key to hash\n   * @param offset   offset of the start of the key\n   * @param length   length of the key\n   * @param initval  initial value to fold into the hash\n   * @return  the 32 bit hash code\n   */\n  @SuppressWarnings(\"fallthrough\")\n  public static int lookup3(int[] k, int offset, int length, int initval) {\n    int a,b,c;\n    a = b = c = 0xdeadbeef + (length<<2) + initval;\n\n    int i=offset;\n    while (length > 3)\n    {\n      a += k[i];\n      b += k[i+1];\n      c += k[i+2];\n\n      // mix(a,b,c)... Java needs \"out\" parameters!!!\n      // Note: recent JVMs (Sun JDK6) turn pairs of shifts (needed to do a rotate)\n      // into real x86 rotate instructions.\n      {\n        a -= c;  a ^= (c<<4)|(c>>>-4);   c += b;\n        b -= a;  b ^= (a<<6)|(a>>>-6);   a += c;\n        c -= b;  c ^= (b<<8)|(b>>>-8);   b += a;\n        a -= c;  a ^= (c<<16)|(c>>>-16); c += b;\n        b -= a;  b ^= (a<<19)|(a>>>-19); a += c;\n        c -= b;  c ^= (b<<4)|(b>>>-4);   b += a;\n      }\n\n      length -= 3;\n      i += 3;\n    }\n\n    switch(length) {\n      case 3 : c+=k[i+2];  // fall through\n      case 2 : b+=k[i+1];  // fall through\n      case 1 : a+=k[i+0];  // fall through\n        // final(a,b,c);\n      {\n        c ^= b; c -= (b<<14)|(b>>>-14);\n        a ^= c; a -= (c<<11)|(c>>>-11);\n        b ^= a; b -= (a<<25)|(a>>>-25);\n        c ^= b; c -= (b<<16)|(b>>>-16);\n        a ^= c; a -= (c<<4)|(c>>>-4);\n        b ^= a; b -= (a<<14)|(a>>>-14);\n        c ^= b; c -= (b<<24)|(b>>>-24);\n      }\n      case 0:\n        break;\n    }\n    return c;\n  }\n\n","sourceOld":"  /**\n   * A Java implementation of hashword from lookup3.c by Bob Jenkins\n   * (<a href=\"http://burtleburtle.net/bob/c/lookup3.c\">original source</a>).\n   *\n   * @param k   the key to hash\n   * @param offset   offset of the start of the key\n   * @param length   length of the key\n   * @param initval  initial value to fold into the hash\n   * @return  the 32 bit hash code\n   */\n  @SuppressWarnings(\"fallthrough\")\n  public static int lookup3(int[] k, int offset, int length, int initval) {\n    int a,b,c;\n    a = b = c = 0xdeadbeef + (length<<2) + initval;\n\n    int i=offset;\n    while (length > 3)\n    {\n      a += k[i];\n      b += k[i+1];\n      c += k[i+2];\n\n      // mix(a,b,c)... Java needs \"out\" parameters!!!\n      // Note: recent JVMs (Sun JDK6) turn pairs of shifts (needed to do a rotate)\n      // into real x86 rotate instructions.\n      {\n        a -= c;  a ^= (c<<4)|(c>>>-4);   c += b;\n        b -= a;  b ^= (a<<6)|(a>>>-6);   a += c;\n        c -= b;  c ^= (b<<8)|(b>>>-8);   b += a;\n        a -= c;  a ^= (c<<16)|(c>>>-16); c += b;\n        b -= a;  b ^= (a<<19)|(a>>>-19); a += c;\n        c -= b;  c ^= (b<<4)|(b>>>-4);   b += a;\n      }\n\n      length -= 3;\n      i += 3;\n    }\n\n    switch(length) {\n      case 3 : c+=k[i+2];  // fall through\n      case 2 : b+=k[i+1];  // fall through\n      case 1 : a+=k[i+0];  // fall through\n        // final(a,b,c);\n      {\n        c ^= b; c -= (b<<14)|(b>>>-14);\n        a ^= c; a -= (c<<11)|(c>>>-11);\n        b ^= a; b -= (a<<25)|(a>>>-25);\n        c ^= b; c -= (b<<16)|(b>>>-16);\n        a ^= c; a -= (c<<4)|(c>>>-4);\n        b ^= a; b -= (a<<14)|(a>>>-14);\n        c ^= b; c -= (b<<24)|(b>>>-24);\n      }\n      case 0:\n        break;\n    }\n    return c;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/common/org/apache/solr/common/util/Hash#lookup3(int[],int,int,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * A Java implementation of hashword from lookup3.c by Bob Jenkins\n   * (<a href=\"http://burtleburtle.net/bob/c/lookup3.c\">original source</a>).\n   *\n   * @param k   the key to hash\n   * @param offset   offset of the start of the key\n   * @param length   length of the key\n   * @param initval  initial value to fold into the hash\n   * @return  the 32 bit hash code\n   */\n  @SuppressWarnings(\"fallthrough\")\n  public static int lookup3(int[] k, int offset, int length, int initval) {\n    int a,b,c;\n    a = b = c = 0xdeadbeef + (length<<2) + initval;\n\n    int i=offset;\n    while (length > 3)\n    {\n      a += k[i];\n      b += k[i+1];\n      c += k[i+2];\n\n      // mix(a,b,c)... Java needs \"out\" parameters!!!\n      // Note: recent JVMs (Sun JDK6) turn pairs of shifts (needed to do a rotate)\n      // into real x86 rotate instructions.\n      {\n        a -= c;  a ^= (c<<4)|(c>>>-4);   c += b;\n        b -= a;  b ^= (a<<6)|(a>>>-6);   a += c;\n        c -= b;  c ^= (b<<8)|(b>>>-8);   b += a;\n        a -= c;  a ^= (c<<16)|(c>>>-16); c += b;\n        b -= a;  b ^= (a<<19)|(a>>>-19); a += c;\n        c -= b;  c ^= (b<<4)|(b>>>-4);   b += a;\n      }\n\n      length -= 3;\n      i += 3;\n    }\n\n    switch(length) {\n      case 3 : c+=k[i+2];  // fall through\n      case 2 : b+=k[i+1];  // fall through\n      case 1 : a+=k[i+0];  // fall through\n        // final(a,b,c);\n      {\n        c ^= b; c -= (b<<14)|(b>>>-14);\n        a ^= c; a -= (c<<11)|(c>>>-11);\n        b ^= a; b -= (a<<25)|(a>>>-25);\n        c ^= b; c -= (b<<16)|(b>>>-16);\n        a ^= c; a -= (c<<4)|(c>>>-4);\n        b ^= a; b -= (a<<14)|(a>>>-14);\n        c ^= b; c -= (b<<24)|(b>>>-24);\n      }\n      case 0:\n        break;\n    }\n    return c;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/Hash#lookup3(int[],int,int,int).mjava","pathOld":"solr/src/common/org/apache/solr/common/util/Hash#lookup3(int[],int,int,int).mjava","sourceNew":"  /**\n   * A Java implementation of hashword from lookup3.c by Bob Jenkins\n   * (<a href=\"http://burtleburtle.net/bob/c/lookup3.c\">original source</a>).\n   *\n   * @param k   the key to hash\n   * @param offset   offset of the start of the key\n   * @param length   length of the key\n   * @param initval  initial value to fold into the hash\n   * @return  the 32 bit hash code\n   */\n  @SuppressWarnings(\"fallthrough\")\n  public static int lookup3(int[] k, int offset, int length, int initval) {\n    int a,b,c;\n    a = b = c = 0xdeadbeef + (length<<2) + initval;\n\n    int i=offset;\n    while (length > 3)\n    {\n      a += k[i];\n      b += k[i+1];\n      c += k[i+2];\n\n      // mix(a,b,c)... Java needs \"out\" parameters!!!\n      // Note: recent JVMs (Sun JDK6) turn pairs of shifts (needed to do a rotate)\n      // into real x86 rotate instructions.\n      {\n        a -= c;  a ^= (c<<4)|(c>>>-4);   c += b;\n        b -= a;  b ^= (a<<6)|(a>>>-6);   a += c;\n        c -= b;  c ^= (b<<8)|(b>>>-8);   b += a;\n        a -= c;  a ^= (c<<16)|(c>>>-16); c += b;\n        b -= a;  b ^= (a<<19)|(a>>>-19); a += c;\n        c -= b;  c ^= (b<<4)|(b>>>-4);   b += a;\n      }\n\n      length -= 3;\n      i += 3;\n    }\n\n    switch(length) {\n      case 3 : c+=k[i+2];  // fall through\n      case 2 : b+=k[i+1];  // fall through\n      case 1 : a+=k[i+0];  // fall through\n        // final(a,b,c);\n      {\n        c ^= b; c -= (b<<14)|(b>>>-14);\n        a ^= c; a -= (c<<11)|(c>>>-11);\n        b ^= a; b -= (a<<25)|(a>>>-25);\n        c ^= b; c -= (b<<16)|(b>>>-16);\n        a ^= c; a -= (c<<4)|(c>>>-4);\n        b ^= a; b -= (a<<14)|(a>>>-14);\n        c ^= b; c -= (b<<24)|(b>>>-24);\n      }\n      case 0:\n        break;\n    }\n    return c;\n  }\n\n","sourceOld":"  /**\n   * A Java implementation of hashword from lookup3.c by Bob Jenkins\n   * (<a href=\"http://burtleburtle.net/bob/c/lookup3.c\">original source</a>).\n   *\n   * @param k   the key to hash\n   * @param offset   offset of the start of the key\n   * @param length   length of the key\n   * @param initval  initial value to fold into the hash\n   * @return  the 32 bit hash code\n   */\n  @SuppressWarnings(\"fallthrough\")\n  public static int lookup3(int[] k, int offset, int length, int initval) {\n    int a,b,c;\n    a = b = c = 0xdeadbeef + (length<<2) + initval;\n\n    int i=offset;\n    while (length > 3)\n    {\n      a += k[i];\n      b += k[i+1];\n      c += k[i+2];\n\n      // mix(a,b,c)... Java needs \"out\" parameters!!!\n      // Note: recent JVMs (Sun JDK6) turn pairs of shifts (needed to do a rotate)\n      // into real x86 rotate instructions.\n      {\n        a -= c;  a ^= (c<<4)|(c>>>-4);   c += b;\n        b -= a;  b ^= (a<<6)|(a>>>-6);   a += c;\n        c -= b;  c ^= (b<<8)|(b>>>-8);   b += a;\n        a -= c;  a ^= (c<<16)|(c>>>-16); c += b;\n        b -= a;  b ^= (a<<19)|(a>>>-19); a += c;\n        c -= b;  c ^= (b<<4)|(b>>>-4);   b += a;\n      }\n\n      length -= 3;\n      i += 3;\n    }\n\n    switch(length) {\n      case 3 : c+=k[i+2];  // fall through\n      case 2 : b+=k[i+1];  // fall through\n      case 1 : a+=k[i+0];  // fall through\n        // final(a,b,c);\n      {\n        c ^= b; c -= (b<<14)|(b>>>-14);\n        a ^= c; a -= (c<<11)|(c>>>-11);\n        b ^= a; b -= (a<<25)|(a>>>-25);\n        c ^= b; c -= (b<<16)|(b>>>-16);\n        a ^= c; a -= (c<<4)|(c>>>-4);\n        b ^= a; b -= (a<<14)|(a>>>-14);\n        c ^= b; c -= (b<<24)|(b>>>-24);\n      }\n      case 0:\n        break;\n    }\n    return c;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/Hash#lookup3(int[],int,int,int).mjava","pathOld":"solr/src/common/org/apache/solr/common/util/Hash#lookup3(int[],int,int,int).mjava","sourceNew":"  /**\n   * A Java implementation of hashword from lookup3.c by Bob Jenkins\n   * (<a href=\"http://burtleburtle.net/bob/c/lookup3.c\">original source</a>).\n   *\n   * @param k   the key to hash\n   * @param offset   offset of the start of the key\n   * @param length   length of the key\n   * @param initval  initial value to fold into the hash\n   * @return  the 32 bit hash code\n   */\n  @SuppressWarnings(\"fallthrough\")\n  public static int lookup3(int[] k, int offset, int length, int initval) {\n    int a,b,c;\n    a = b = c = 0xdeadbeef + (length<<2) + initval;\n\n    int i=offset;\n    while (length > 3)\n    {\n      a += k[i];\n      b += k[i+1];\n      c += k[i+2];\n\n      // mix(a,b,c)... Java needs \"out\" parameters!!!\n      // Note: recent JVMs (Sun JDK6) turn pairs of shifts (needed to do a rotate)\n      // into real x86 rotate instructions.\n      {\n        a -= c;  a ^= (c<<4)|(c>>>-4);   c += b;\n        b -= a;  b ^= (a<<6)|(a>>>-6);   a += c;\n        c -= b;  c ^= (b<<8)|(b>>>-8);   b += a;\n        a -= c;  a ^= (c<<16)|(c>>>-16); c += b;\n        b -= a;  b ^= (a<<19)|(a>>>-19); a += c;\n        c -= b;  c ^= (b<<4)|(b>>>-4);   b += a;\n      }\n\n      length -= 3;\n      i += 3;\n    }\n\n    switch(length) {\n      case 3 : c+=k[i+2];  // fall through\n      case 2 : b+=k[i+1];  // fall through\n      case 1 : a+=k[i+0];  // fall through\n        // final(a,b,c);\n      {\n        c ^= b; c -= (b<<14)|(b>>>-14);\n        a ^= c; a -= (c<<11)|(c>>>-11);\n        b ^= a; b -= (a<<25)|(a>>>-25);\n        c ^= b; c -= (b<<16)|(b>>>-16);\n        a ^= c; a -= (c<<4)|(c>>>-4);\n        b ^= a; b -= (a<<14)|(a>>>-14);\n        c ^= b; c -= (b<<24)|(b>>>-24);\n      }\n      case 0:\n        break;\n    }\n    return c;\n  }\n\n","sourceOld":"  /**\n   * A Java implementation of hashword from lookup3.c by Bob Jenkins\n   * (<a href=\"http://burtleburtle.net/bob/c/lookup3.c\">original source</a>).\n   *\n   * @param k   the key to hash\n   * @param offset   offset of the start of the key\n   * @param length   length of the key\n   * @param initval  initial value to fold into the hash\n   * @return  the 32 bit hash code\n   */\n  @SuppressWarnings(\"fallthrough\")\n  public static int lookup3(int[] k, int offset, int length, int initval) {\n    int a,b,c;\n    a = b = c = 0xdeadbeef + (length<<2) + initval;\n\n    int i=offset;\n    while (length > 3)\n    {\n      a += k[i];\n      b += k[i+1];\n      c += k[i+2];\n\n      // mix(a,b,c)... Java needs \"out\" parameters!!!\n      // Note: recent JVMs (Sun JDK6) turn pairs of shifts (needed to do a rotate)\n      // into real x86 rotate instructions.\n      {\n        a -= c;  a ^= (c<<4)|(c>>>-4);   c += b;\n        b -= a;  b ^= (a<<6)|(a>>>-6);   a += c;\n        c -= b;  c ^= (b<<8)|(b>>>-8);   b += a;\n        a -= c;  a ^= (c<<16)|(c>>>-16); c += b;\n        b -= a;  b ^= (a<<19)|(a>>>-19); a += c;\n        c -= b;  c ^= (b<<4)|(b>>>-4);   b += a;\n      }\n\n      length -= 3;\n      i += 3;\n    }\n\n    switch(length) {\n      case 3 : c+=k[i+2];  // fall through\n      case 2 : b+=k[i+1];  // fall through\n      case 1 : a+=k[i+0];  // fall through\n        // final(a,b,c);\n      {\n        c ^= b; c -= (b<<14)|(b>>>-14);\n        a ^= c; a -= (c<<11)|(c>>>-11);\n        b ^= a; b -= (a<<25)|(a>>>-25);\n        c ^= b; c -= (b<<16)|(b>>>-16);\n        a ^= c; a -= (c<<4)|(c>>>-4);\n        b ^= a; b -= (a<<14)|(a>>>-14);\n        c ^= b; c -= (b<<24)|(b>>>-24);\n      }\n      case 0:\n        break;\n    }\n    return c;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/Hash#lookup3(int[],int,int,int).mjava","pathOld":"solr/src/common/org/apache/solr/common/util/Hash#lookup3(int[],int,int,int).mjava","sourceNew":"  /**\n   * A Java implementation of hashword from lookup3.c by Bob Jenkins\n   * (<a href=\"http://burtleburtle.net/bob/c/lookup3.c\">original source</a>).\n   *\n   * @param k   the key to hash\n   * @param offset   offset of the start of the key\n   * @param length   length of the key\n   * @param initval  initial value to fold into the hash\n   * @return  the 32 bit hash code\n   */\n  @SuppressWarnings(\"fallthrough\")\n  public static int lookup3(int[] k, int offset, int length, int initval) {\n    int a,b,c;\n    a = b = c = 0xdeadbeef + (length<<2) + initval;\n\n    int i=offset;\n    while (length > 3)\n    {\n      a += k[i];\n      b += k[i+1];\n      c += k[i+2];\n\n      // mix(a,b,c)... Java needs \"out\" parameters!!!\n      // Note: recent JVMs (Sun JDK6) turn pairs of shifts (needed to do a rotate)\n      // into real x86 rotate instructions.\n      {\n        a -= c;  a ^= (c<<4)|(c>>>-4);   c += b;\n        b -= a;  b ^= (a<<6)|(a>>>-6);   a += c;\n        c -= b;  c ^= (b<<8)|(b>>>-8);   b += a;\n        a -= c;  a ^= (c<<16)|(c>>>-16); c += b;\n        b -= a;  b ^= (a<<19)|(a>>>-19); a += c;\n        c -= b;  c ^= (b<<4)|(b>>>-4);   b += a;\n      }\n\n      length -= 3;\n      i += 3;\n    }\n\n    switch(length) {\n      case 3 : c+=k[i+2];  // fall through\n      case 2 : b+=k[i+1];  // fall through\n      case 1 : a+=k[i+0];  // fall through\n        // final(a,b,c);\n      {\n        c ^= b; c -= (b<<14)|(b>>>-14);\n        a ^= c; a -= (c<<11)|(c>>>-11);\n        b ^= a; b -= (a<<25)|(a>>>-25);\n        c ^= b; c -= (b<<16)|(b>>>-16);\n        a ^= c; a -= (c<<4)|(c>>>-4);\n        b ^= a; b -= (a<<14)|(a>>>-14);\n        c ^= b; c -= (b<<24)|(b>>>-24);\n      }\n      case 0:\n        break;\n    }\n    return c;\n  }\n\n","sourceOld":"  /**\n   * A Java implementation of hashword from lookup3.c by Bob Jenkins\n   * (<a href=\"http://burtleburtle.net/bob/c/lookup3.c\">original source</a>).\n   *\n   * @param k   the key to hash\n   * @param offset   offset of the start of the key\n   * @param length   length of the key\n   * @param initval  initial value to fold into the hash\n   * @return  the 32 bit hash code\n   */\n  @SuppressWarnings(\"fallthrough\")\n  public static int lookup3(int[] k, int offset, int length, int initval) {\n    int a,b,c;\n    a = b = c = 0xdeadbeef + (length<<2) + initval;\n\n    int i=offset;\n    while (length > 3)\n    {\n      a += k[i];\n      b += k[i+1];\n      c += k[i+2];\n\n      // mix(a,b,c)... Java needs \"out\" parameters!!!\n      // Note: recent JVMs (Sun JDK6) turn pairs of shifts (needed to do a rotate)\n      // into real x86 rotate instructions.\n      {\n        a -= c;  a ^= (c<<4)|(c>>>-4);   c += b;\n        b -= a;  b ^= (a<<6)|(a>>>-6);   a += c;\n        c -= b;  c ^= (b<<8)|(b>>>-8);   b += a;\n        a -= c;  a ^= (c<<16)|(c>>>-16); c += b;\n        b -= a;  b ^= (a<<19)|(a>>>-19); a += c;\n        c -= b;  c ^= (b<<4)|(b>>>-4);   b += a;\n      }\n\n      length -= 3;\n      i += 3;\n    }\n\n    switch(length) {\n      case 3 : c+=k[i+2];  // fall through\n      case 2 : b+=k[i+1];  // fall through\n      case 1 : a+=k[i+0];  // fall through\n        // final(a,b,c);\n      {\n        c ^= b; c -= (b<<14)|(b>>>-14);\n        a ^= c; a -= (c<<11)|(c>>>-11);\n        b ^= a; b -= (a<<25)|(a>>>-25);\n        c ^= b; c -= (b<<16)|(b>>>-16);\n        a ^= c; a -= (c<<4)|(c>>>-4);\n        b ^= a; b -= (a<<14)|(a>>>-14);\n        c ^= b; c -= (b<<24)|(b>>>-24);\n      }\n      case 0:\n        break;\n    }\n    return c;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["1da8d55113b689b06716246649de6f62430f15c0"],"c26f00b574427b55127e869b935845554afde1fa":["1da8d55113b689b06716246649de6f62430f15c0","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["1da8d55113b689b06716246649de6f62430f15c0"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"1da8d55113b689b06716246649de6f62430f15c0":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}