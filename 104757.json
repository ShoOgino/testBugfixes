{"path":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl#getCacheEntries().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl#getCacheEntries().mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FieldCacheImpl#getCacheEntries().mjava","sourceNew":"  public synchronized CacheEntry[] getCacheEntries() {\n    List<CacheEntry> result = new ArrayList<CacheEntry>(17);\n    for(final Map.Entry<Class<?>,Cache> cacheEntry: caches.entrySet()) {\n      final Cache cache = cacheEntry.getValue();\n      final Class<?> cacheType = cacheEntry.getKey();\n      synchronized(cache.readerCache) {\n        for (final Map.Entry<Object,Map<Entry, Object>> readerCacheEntry : cache.readerCache.entrySet()) {\n          final Object readerKey = readerCacheEntry.getKey();\n          if (readerKey == null) continue;\n          final Map<Entry, Object> innerCache = readerCacheEntry.getValue();\n          for (final Map.Entry<Entry, Object> mapEntry : innerCache.entrySet()) {\n            Entry entry = mapEntry.getKey();\n            result.add(new CacheEntryImpl(readerKey, entry.field,\n                                          cacheType, entry.custom,\n                                          mapEntry.getValue()));\n          }\n        }\n      }\n    }\n    return result.toArray(new CacheEntry[result.size()]);\n  }\n\n","sourceOld":"  public synchronized CacheEntry[] getCacheEntries() {\n    List<CacheEntry> result = new ArrayList<CacheEntry>(17);\n    for(final Map.Entry<Class<?>,Cache> cacheEntry: caches.entrySet()) {\n      final Cache cache = cacheEntry.getValue();\n      final Class<?> cacheType = cacheEntry.getKey();\n      synchronized(cache.readerCache) {\n        for (final Map.Entry<Object,Map<Entry, Object>> readerCacheEntry : cache.readerCache.entrySet()) {\n          final Object readerKey = readerCacheEntry.getKey();\n          if (readerKey == null) continue;\n          final Map<Entry, Object> innerCache = readerCacheEntry.getValue();\n          for (final Map.Entry<Entry, Object> mapEntry : innerCache.entrySet()) {\n            Entry entry = mapEntry.getKey();\n            result.add(new CacheEntryImpl(readerKey, entry.field,\n                                          cacheType, entry.custom,\n                                          mapEntry.getValue()));\n          }\n        }\n      }\n    }\n    return result.toArray(new CacheEntry[result.size()]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"34a3cb4eb36d5e20abde21f4d8fe5442588e7e03","date":1353235561,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl#getCacheEntries().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl#getCacheEntries().mjava","sourceNew":"  @Override\n  public synchronized CacheEntry[] getCacheEntries() {\n    List<CacheEntry> result = new ArrayList<CacheEntry>(17);\n    for(final Map.Entry<Class<?>,Cache> cacheEntry: caches.entrySet()) {\n      final Cache cache = cacheEntry.getValue();\n      final Class<?> cacheType = cacheEntry.getKey();\n      synchronized(cache.readerCache) {\n        for (final Map.Entry<Object,Map<Entry, Object>> readerCacheEntry : cache.readerCache.entrySet()) {\n          final Object readerKey = readerCacheEntry.getKey();\n          if (readerKey == null) continue;\n          final Map<Entry, Object> innerCache = readerCacheEntry.getValue();\n          for (final Map.Entry<Entry, Object> mapEntry : innerCache.entrySet()) {\n            Entry entry = mapEntry.getKey();\n            result.add(new CacheEntry(readerKey, entry.field,\n                                      cacheType, entry.custom,\n                                      mapEntry.getValue()));\n          }\n        }\n      }\n    }\n    return result.toArray(new CacheEntry[result.size()]);\n  }\n\n","sourceOld":"  public synchronized CacheEntry[] getCacheEntries() {\n    List<CacheEntry> result = new ArrayList<CacheEntry>(17);\n    for(final Map.Entry<Class<?>,Cache> cacheEntry: caches.entrySet()) {\n      final Cache cache = cacheEntry.getValue();\n      final Class<?> cacheType = cacheEntry.getKey();\n      synchronized(cache.readerCache) {\n        for (final Map.Entry<Object,Map<Entry, Object>> readerCacheEntry : cache.readerCache.entrySet()) {\n          final Object readerKey = readerCacheEntry.getKey();\n          if (readerKey == null) continue;\n          final Map<Entry, Object> innerCache = readerCacheEntry.getValue();\n          for (final Map.Entry<Entry, Object> mapEntry : innerCache.entrySet()) {\n            Entry entry = mapEntry.getKey();\n            result.add(new CacheEntryImpl(readerKey, entry.field,\n                                          cacheType, entry.custom,\n                                          mapEntry.getValue()));\n          }\n        }\n      }\n    }\n    return result.toArray(new CacheEntry[result.size()]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a4d374b2bebd0d52acaa61038fbf23068620fba7","date":1353240004,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl#getCacheEntries().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl#getCacheEntries().mjava","sourceNew":"  @Override\n  public synchronized CacheEntry[] getCacheEntries() {\n    List<CacheEntry> result = new ArrayList<CacheEntry>(17);\n    for(final Map.Entry<Class<?>,Cache> cacheEntry: caches.entrySet()) {\n      final Cache cache = cacheEntry.getValue();\n      final Class<?> cacheType = cacheEntry.getKey();\n      synchronized(cache.readerCache) {\n        for (final Map.Entry<Object,Map<CacheKey, Object>> readerCacheEntry : cache.readerCache.entrySet()) {\n          final Object readerKey = readerCacheEntry.getKey();\n          if (readerKey == null) continue;\n          final Map<CacheKey, Object> innerCache = readerCacheEntry.getValue();\n          for (final Map.Entry<CacheKey, Object> mapEntry : innerCache.entrySet()) {\n            CacheKey entry = mapEntry.getKey();\n            result.add(new CacheEntry(readerKey, entry.field,\n                                      cacheType, entry.custom,\n                                      mapEntry.getValue()));\n          }\n        }\n      }\n    }\n    return result.toArray(new CacheEntry[result.size()]);\n  }\n\n","sourceOld":"  @Override\n  public synchronized CacheEntry[] getCacheEntries() {\n    List<CacheEntry> result = new ArrayList<CacheEntry>(17);\n    for(final Map.Entry<Class<?>,Cache> cacheEntry: caches.entrySet()) {\n      final Cache cache = cacheEntry.getValue();\n      final Class<?> cacheType = cacheEntry.getKey();\n      synchronized(cache.readerCache) {\n        for (final Map.Entry<Object,Map<Entry, Object>> readerCacheEntry : cache.readerCache.entrySet()) {\n          final Object readerKey = readerCacheEntry.getKey();\n          if (readerKey == null) continue;\n          final Map<Entry, Object> innerCache = readerCacheEntry.getValue();\n          for (final Map.Entry<Entry, Object> mapEntry : innerCache.entrySet()) {\n            Entry entry = mapEntry.getKey();\n            result.add(new CacheEntry(readerKey, entry.field,\n                                      cacheType, entry.custom,\n                                      mapEntry.getValue()));\n          }\n        }\n      }\n    }\n    return result.toArray(new CacheEntry[result.size()]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl#getCacheEntries().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl#getCacheEntries().mjava","sourceNew":"  @Override\n  public synchronized CacheEntry[] getCacheEntries() {\n    List<CacheEntry> result = new ArrayList<CacheEntry>(17);\n    for(final Map.Entry<Class<?>,Cache> cacheEntry: caches.entrySet()) {\n      final Cache cache = cacheEntry.getValue();\n      final Class<?> cacheType = cacheEntry.getKey();\n      synchronized(cache.readerCache) {\n        for (final Map.Entry<Object,Map<Entry, Object>> readerCacheEntry : cache.readerCache.entrySet()) {\n          final Object readerKey = readerCacheEntry.getKey();\n          if (readerKey == null) continue;\n          final Map<Entry, Object> innerCache = readerCacheEntry.getValue();\n          for (final Map.Entry<Entry, Object> mapEntry : innerCache.entrySet()) {\n            Entry entry = mapEntry.getKey();\n            result.add(new CacheEntryImpl(readerKey, entry.field,\n                                          cacheType, entry.custom,\n                                          mapEntry.getValue()));\n          }\n        }\n      }\n    }\n    return result.toArray(new CacheEntry[result.size()]);\n  }\n\n","sourceOld":"  public synchronized CacheEntry[] getCacheEntries() {\n    List<CacheEntry> result = new ArrayList<CacheEntry>(17);\n    for(final Map.Entry<Class<?>,Cache> cacheEntry: caches.entrySet()) {\n      final Cache cache = cacheEntry.getValue();\n      final Class<?> cacheType = cacheEntry.getKey();\n      synchronized(cache.readerCache) {\n        for (final Map.Entry<Object,Map<Entry, Object>> readerCacheEntry : cache.readerCache.entrySet()) {\n          final Object readerKey = readerCacheEntry.getKey();\n          if (readerKey == null) continue;\n          final Map<Entry, Object> innerCache = readerCacheEntry.getValue();\n          for (final Map.Entry<Entry, Object> mapEntry : innerCache.entrySet()) {\n            Entry entry = mapEntry.getKey();\n            result.add(new CacheEntryImpl(readerKey, entry.field,\n                                          cacheType, entry.custom,\n                                          mapEntry.getValue()));\n          }\n        }\n      }\n    }\n    return result.toArray(new CacheEntry[result.size()]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl#getCacheEntries().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl#getCacheEntries().mjava","sourceNew":"  @Override\n  public synchronized CacheEntry[] getCacheEntries() {\n    List<CacheEntry> result = new ArrayList<CacheEntry>(17);\n    for(final Map.Entry<Class<?>,Cache> cacheEntry: caches.entrySet()) {\n      final Cache cache = cacheEntry.getValue();\n      final Class<?> cacheType = cacheEntry.getKey();\n      synchronized(cache.readerCache) {\n        for (final Map.Entry<Object,Map<CacheKey, Object>> readerCacheEntry : cache.readerCache.entrySet()) {\n          final Object readerKey = readerCacheEntry.getKey();\n          if (readerKey == null) continue;\n          final Map<CacheKey, Object> innerCache = readerCacheEntry.getValue();\n          for (final Map.Entry<CacheKey, Object> mapEntry : innerCache.entrySet()) {\n            CacheKey entry = mapEntry.getKey();\n            result.add(new CacheEntry(readerKey, entry.field,\n                                      cacheType, entry.custom,\n                                      mapEntry.getValue()));\n          }\n        }\n      }\n    }\n    return result.toArray(new CacheEntry[result.size()]);\n  }\n\n","sourceOld":"  @Override\n  public synchronized CacheEntry[] getCacheEntries() {\n    List<CacheEntry> result = new ArrayList<CacheEntry>(17);\n    for(final Map.Entry<Class<?>,Cache> cacheEntry: caches.entrySet()) {\n      final Cache cache = cacheEntry.getValue();\n      final Class<?> cacheType = cacheEntry.getKey();\n      synchronized(cache.readerCache) {\n        for (final Map.Entry<Object,Map<Entry, Object>> readerCacheEntry : cache.readerCache.entrySet()) {\n          final Object readerKey = readerCacheEntry.getKey();\n          if (readerKey == null) continue;\n          final Map<Entry, Object> innerCache = readerCacheEntry.getValue();\n          for (final Map.Entry<Entry, Object> mapEntry : innerCache.entrySet()) {\n            Entry entry = mapEntry.getKey();\n            result.add(new CacheEntryImpl(readerKey, entry.field,\n                                          cacheType, entry.custom,\n                                          mapEntry.getValue()));\n          }\n        }\n      }\n    }\n    return result.toArray(new CacheEntry[result.size()]);\n  }\n\n","bugFix":["e69f59b863731d864bf3047235e718f0f88f8841","382fe3a6ca9745891afebda9b9a57cc158305545","63a3cd934de70be8201bb9ab57198e3fb5c8985f"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl#getCacheEntries().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl#getCacheEntries().mjava","sourceNew":"  @Override\n  public synchronized CacheEntry[] getCacheEntries() {\n    List<CacheEntry> result = new ArrayList<>(17);\n    for(final Map.Entry<Class<?>,Cache> cacheEntry: caches.entrySet()) {\n      final Cache cache = cacheEntry.getValue();\n      final Class<?> cacheType = cacheEntry.getKey();\n      synchronized(cache.readerCache) {\n        for (final Map.Entry<Object,Map<CacheKey, Object>> readerCacheEntry : cache.readerCache.entrySet()) {\n          final Object readerKey = readerCacheEntry.getKey();\n          if (readerKey == null) continue;\n          final Map<CacheKey, Object> innerCache = readerCacheEntry.getValue();\n          for (final Map.Entry<CacheKey, Object> mapEntry : innerCache.entrySet()) {\n            CacheKey entry = mapEntry.getKey();\n            result.add(new CacheEntry(readerKey, entry.field,\n                                      cacheType, entry.custom,\n                                      mapEntry.getValue()));\n          }\n        }\n      }\n    }\n    return result.toArray(new CacheEntry[result.size()]);\n  }\n\n","sourceOld":"  @Override\n  public synchronized CacheEntry[] getCacheEntries() {\n    List<CacheEntry> result = new ArrayList<CacheEntry>(17);\n    for(final Map.Entry<Class<?>,Cache> cacheEntry: caches.entrySet()) {\n      final Cache cache = cacheEntry.getValue();\n      final Class<?> cacheType = cacheEntry.getKey();\n      synchronized(cache.readerCache) {\n        for (final Map.Entry<Object,Map<CacheKey, Object>> readerCacheEntry : cache.readerCache.entrySet()) {\n          final Object readerKey = readerCacheEntry.getKey();\n          if (readerKey == null) continue;\n          final Map<CacheKey, Object> innerCache = readerCacheEntry.getValue();\n          for (final Map.Entry<CacheKey, Object> mapEntry : innerCache.entrySet()) {\n            CacheKey entry = mapEntry.getKey();\n            result.add(new CacheEntry(readerKey, entry.field,\n                                      cacheType, entry.custom,\n                                      mapEntry.getValue()));\n          }\n        }\n      }\n    }\n    return result.toArray(new CacheEntry[result.size()]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","date":1399816179,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/uninverting/FieldCacheImpl#getCacheEntries().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl#getCacheEntries().mjava","sourceNew":"  @Override\n  public synchronized CacheEntry[] getCacheEntries() {\n    List<CacheEntry> result = new ArrayList<>(17);\n    for(final Map.Entry<Class<?>,Cache> cacheEntry: caches.entrySet()) {\n      final Cache cache = cacheEntry.getValue();\n      final Class<?> cacheType = cacheEntry.getKey();\n      synchronized(cache.readerCache) {\n        for (final Map.Entry<Object,Map<CacheKey, Object>> readerCacheEntry : cache.readerCache.entrySet()) {\n          final Object readerKey = readerCacheEntry.getKey();\n          if (readerKey == null) continue;\n          final Map<CacheKey, Object> innerCache = readerCacheEntry.getValue();\n          for (final Map.Entry<CacheKey, Object> mapEntry : innerCache.entrySet()) {\n            CacheKey entry = mapEntry.getKey();\n            result.add(new CacheEntry(readerKey, entry.field,\n                                      cacheType, entry.custom,\n                                      mapEntry.getValue()));\n          }\n        }\n      }\n    }\n    return result.toArray(new CacheEntry[result.size()]);\n  }\n\n","sourceOld":"  @Override\n  public synchronized CacheEntry[] getCacheEntries() {\n    List<CacheEntry> result = new ArrayList<>(17);\n    for(final Map.Entry<Class<?>,Cache> cacheEntry: caches.entrySet()) {\n      final Cache cache = cacheEntry.getValue();\n      final Class<?> cacheType = cacheEntry.getKey();\n      synchronized(cache.readerCache) {\n        for (final Map.Entry<Object,Map<CacheKey, Object>> readerCacheEntry : cache.readerCache.entrySet()) {\n          final Object readerKey = readerCacheEntry.getKey();\n          if (readerKey == null) continue;\n          final Map<CacheKey, Object> innerCache = readerCacheEntry.getValue();\n          for (final Map.Entry<CacheKey, Object> mapEntry : innerCache.entrySet()) {\n            CacheKey entry = mapEntry.getKey();\n            result.add(new CacheEntry(readerKey, entry.field,\n                                      cacheType, entry.custom,\n                                      mapEntry.getValue()));\n          }\n        }\n      }\n    }\n    return result.toArray(new CacheEntry[result.size()]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93dd449115a9247533e44bab47e8429e5dccbc6d","date":1400258396,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/misc/src/java/org/apache/lucene/uninverting/FieldCacheImpl#getCacheEntries().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl#getCacheEntries().mjava","sourceNew":"  @Override\n  public synchronized CacheEntry[] getCacheEntries() {\n    List<CacheEntry> result = new ArrayList<>(17);\n    for(final Map.Entry<Class<?>,Cache> cacheEntry: caches.entrySet()) {\n      final Cache cache = cacheEntry.getValue();\n      final Class<?> cacheType = cacheEntry.getKey();\n      synchronized(cache.readerCache) {\n        for (final Map.Entry<Object,Map<CacheKey, Object>> readerCacheEntry : cache.readerCache.entrySet()) {\n          final Object readerKey = readerCacheEntry.getKey();\n          if (readerKey == null) continue;\n          final Map<CacheKey, Object> innerCache = readerCacheEntry.getValue();\n          for (final Map.Entry<CacheKey, Object> mapEntry : innerCache.entrySet()) {\n            CacheKey entry = mapEntry.getKey();\n            result.add(new CacheEntry(readerKey, entry.field,\n                                      cacheType, entry.custom,\n                                      mapEntry.getValue()));\n          }\n        }\n      }\n    }\n    return result.toArray(new CacheEntry[result.size()]);\n  }\n\n","sourceOld":"  @Override\n  public synchronized CacheEntry[] getCacheEntries() {\n    List<CacheEntry> result = new ArrayList<>(17);\n    for(final Map.Entry<Class<?>,Cache> cacheEntry: caches.entrySet()) {\n      final Cache cache = cacheEntry.getValue();\n      final Class<?> cacheType = cacheEntry.getKey();\n      synchronized(cache.readerCache) {\n        for (final Map.Entry<Object,Map<CacheKey, Object>> readerCacheEntry : cache.readerCache.entrySet()) {\n          final Object readerKey = readerCacheEntry.getKey();\n          if (readerKey == null) continue;\n          final Map<CacheKey, Object> innerCache = readerCacheEntry.getValue();\n          for (final Map.Entry<CacheKey, Object> mapEntry : innerCache.entrySet()) {\n            CacheKey entry = mapEntry.getKey();\n            result.add(new CacheEntry(readerKey, entry.field,\n                                      cacheType, entry.custom,\n                                      mapEntry.getValue()));\n          }\n        }\n      }\n    }\n    return result.toArray(new CacheEntry[result.size()]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56572ec06f1407c066d6b7399413178b33176cd8","date":1400495675,"type":5,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/misc/src/java/org/apache/lucene/uninverting/FieldCacheImpl#getCacheEntries().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl#getCacheEntries().mjava","sourceNew":"  @Override\n  public synchronized CacheEntry[] getCacheEntries() {\n    List<CacheEntry> result = new ArrayList<>(17);\n    for(final Map.Entry<Class<?>,Cache> cacheEntry: caches.entrySet()) {\n      final Cache cache = cacheEntry.getValue();\n      final Class<?> cacheType = cacheEntry.getKey();\n      synchronized(cache.readerCache) {\n        for (final Map.Entry<Object,Map<CacheKey, Object>> readerCacheEntry : cache.readerCache.entrySet()) {\n          final Object readerKey = readerCacheEntry.getKey();\n          if (readerKey == null) continue;\n          final Map<CacheKey, Object> innerCache = readerCacheEntry.getValue();\n          for (final Map.Entry<CacheKey, Object> mapEntry : innerCache.entrySet()) {\n            CacheKey entry = mapEntry.getKey();\n            result.add(new CacheEntry(readerKey, entry.field,\n                                      cacheType, entry.custom,\n                                      mapEntry.getValue()));\n          }\n        }\n      }\n    }\n    return result.toArray(new CacheEntry[result.size()]);\n  }\n\n","sourceOld":"  @Override\n  public synchronized CacheEntry[] getCacheEntries() {\n    List<CacheEntry> result = new ArrayList<>(17);\n    for(final Map.Entry<Class<?>,Cache> cacheEntry: caches.entrySet()) {\n      final Cache cache = cacheEntry.getValue();\n      final Class<?> cacheType = cacheEntry.getKey();\n      synchronized(cache.readerCache) {\n        for (final Map.Entry<Object,Map<CacheKey, Object>> readerCacheEntry : cache.readerCache.entrySet()) {\n          final Object readerKey = readerCacheEntry.getKey();\n          if (readerKey == null) continue;\n          final Map<CacheKey, Object> innerCache = readerCacheEntry.getValue();\n          for (final Map.Entry<CacheKey, Object> mapEntry : innerCache.entrySet()) {\n            CacheKey entry = mapEntry.getKey();\n            result.add(new CacheEntry(readerKey, entry.field,\n                                      cacheType, entry.custom,\n                                      mapEntry.getValue()));\n          }\n        }\n      }\n    }\n    return result.toArray(new CacheEntry[result.size()]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["7530de27b87b961b51f01bd1299b7004d46e8823","a4d374b2bebd0d52acaa61038fbf23068620fba7"],"34a3cb4eb36d5e20abde21f4d8fe5442588e7e03":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a4d374b2bebd0d52acaa61038fbf23068620fba7":["34a3cb4eb36d5e20abde21f4d8fe5442588e7e03"],"56572ec06f1407c066d6b7399413178b33176cd8":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","93dd449115a9247533e44bab47e8429e5dccbc6d"],"7530de27b87b961b51f01bd1299b7004d46e8823":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["93dd449115a9247533e44bab47e8429e5dccbc6d"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["93dd449115a9247533e44bab47e8429e5dccbc6d","b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","56572ec06f1407c066d6b7399413178b33176cd8"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"34a3cb4eb36d5e20abde21f4d8fe5442588e7e03":["a4d374b2bebd0d52acaa61038fbf23068620fba7"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["56572ec06f1407c066d6b7399413178b33176cd8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["34a3cb4eb36d5e20abde21f4d8fe5442588e7e03","7530de27b87b961b51f01bd1299b7004d46e8823"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"a4d374b2bebd0d52acaa61038fbf23068620fba7":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"56572ec06f1407c066d6b7399413178b33176cd8":[],"7530de27b87b961b51f01bd1299b7004d46e8823":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["56572ec06f1407c066d6b7399413178b33176cd8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}