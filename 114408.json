{"path":"solr/core/src/java/org/apache/solr/cloud/ZkShardTerms#retryRegisterWatcher().mjava","commits":[{"id":"84f20f331d8001864545c7021812d8c6509c7593","date":1517216128,"type":0,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkShardTerms#retryRegisterWatcher().mjava","pathOld":"/dev/null","sourceNew":"  /**\r\n   * Retry register a watcher to the correspond ZK term node\r\n   */\r\n  private void retryRegisterWatcher() {\r\n    while (!isClosed.get()) {\r\n      try {\r\n        registerWatcher();\r\n        return;\r\n      } catch (KeeperException.SessionExpiredException | KeeperException.AuthFailedException e) {\r\n        isClosed.set(true);\r\n        log.error(\"Failed watching shard term for collection: {} due to unrecoverable exception\", collection, e);\r\n        return;\r\n      } catch (KeeperException e) {\r\n        log.warn(\"Failed watching shard term for collection:{}, retrying!\", collection, e);\r\n        try {\r\n          zkClient.getConnectionManager().waitForConnected(zkClient.getZkClientTimeout());\r\n        } catch (TimeoutException te) {\r\n          if (Thread.interrupted()) {\r\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error watching shard term for collection:\" + collection, te);\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fdaba0a5669b9525668d79c41f87bb5c067c03e4","date":1521113339,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkShardTerms#retryRegisterWatcher().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkShardTerms#retryRegisterWatcher().mjava","sourceNew":"  /**\r\n   * Retry register a watcher to the correspond ZK term node\r\n   */\r\n  private void retryRegisterWatcher() {\r\n    while (!isClosed.get()) {\r\n      try {\r\n        registerWatcher();\r\n        return;\r\n      } catch (KeeperException.SessionExpiredException | KeeperException.AuthFailedException e) {\r\n        isClosed.set(true);\r\n        log.error(\"Failed watching shard term for collection: {} due to unrecoverable exception\", collection, e);\r\n        return;\r\n      } catch (KeeperException e) {\r\n        log.warn(\"Failed watching shard term for collection: {}, retrying!\", collection, e);\r\n        try {\r\n          zkClient.getConnectionManager().waitForConnected(zkClient.getZkClientTimeout());\r\n        } catch (TimeoutException te) {\r\n          if (Thread.interrupted()) {\r\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error watching shard term for collection: \" + collection, te);\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\n","sourceOld":"  /**\r\n   * Retry register a watcher to the correspond ZK term node\r\n   */\r\n  private void retryRegisterWatcher() {\r\n    while (!isClosed.get()) {\r\n      try {\r\n        registerWatcher();\r\n        return;\r\n      } catch (KeeperException.SessionExpiredException | KeeperException.AuthFailedException e) {\r\n        isClosed.set(true);\r\n        log.error(\"Failed watching shard term for collection: {} due to unrecoverable exception\", collection, e);\r\n        return;\r\n      } catch (KeeperException e) {\r\n        log.warn(\"Failed watching shard term for collection:{}, retrying!\", collection, e);\r\n        try {\r\n          zkClient.getConnectionManager().waitForConnected(zkClient.getZkClientTimeout());\r\n        } catch (TimeoutException te) {\r\n          if (Thread.interrupted()) {\r\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error watching shard term for collection:\" + collection, te);\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"14b990ee56c39c454f5c6bc2e645d1286e93acee","date":1579181439,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkShardTerms#retryRegisterWatcher().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkShardTerms#retryRegisterWatcher().mjava","sourceNew":"  /**\n   * Retry register a watcher to the correspond ZK term node\n   */\n  private void retryRegisterWatcher() {\n    while (!isClosed.get()) {\n      try {\n        registerWatcher();\n        return;\n      } catch (KeeperException.SessionExpiredException | KeeperException.AuthFailedException e) {\n        isClosed.set(true);\n        log.error(\"Failed watching shard term for collection: {} due to unrecoverable exception\", collection, e);\n        return;\n      } catch (KeeperException e) {\n        log.warn(\"Failed watching shard term for collection: {}, retrying!\", collection, e);\n        try {\n          zkClient.getConnectionManager().waitForConnected(zkClient.getZkClientTimeout());\n        } catch (TimeoutException te) {\n          if (Thread.interrupted()) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error watching shard term for collection: \" + collection, te);\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\r\n   * Retry register a watcher to the correspond ZK term node\r\n   */\r\n  private void retryRegisterWatcher() {\r\n    while (!isClosed.get()) {\r\n      try {\r\n        registerWatcher();\r\n        return;\r\n      } catch (KeeperException.SessionExpiredException | KeeperException.AuthFailedException e) {\r\n        isClosed.set(true);\r\n        log.error(\"Failed watching shard term for collection: {} due to unrecoverable exception\", collection, e);\r\n        return;\r\n      } catch (KeeperException e) {\r\n        log.warn(\"Failed watching shard term for collection: {}, retrying!\", collection, e);\r\n        try {\r\n          zkClient.getConnectionManager().waitForConnected(zkClient.getZkClientTimeout());\r\n        } catch (TimeoutException te) {\r\n          if (Thread.interrupted()) {\r\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error watching shard term for collection: \" + collection, te);\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fdaba0a5669b9525668d79c41f87bb5c067c03e4":["84f20f331d8001864545c7021812d8c6509c7593"],"14b990ee56c39c454f5c6bc2e645d1286e93acee":["fdaba0a5669b9525668d79c41f87bb5c067c03e4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"84f20f331d8001864545c7021812d8c6509c7593":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["14b990ee56c39c454f5c6bc2e645d1286e93acee"]},"commit2Childs":{"fdaba0a5669b9525668d79c41f87bb5c067c03e4":["14b990ee56c39c454f5c6bc2e645d1286e93acee"],"14b990ee56c39c454f5c6bc2e645d1286e93acee":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["84f20f331d8001864545c7021812d8c6509c7593"],"84f20f331d8001864545c7021812d8c6509c7593":["fdaba0a5669b9525668d79c41f87bb5c067c03e4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}