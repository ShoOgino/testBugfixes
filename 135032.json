{"path":"solr/src/test/org/apache/solr/search/TestSearchPerf#XtestFilteringPerformance().mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/search/TestSearchPerf#XtestFilteringPerformance().mjava","pathOld":"/dev/null","sourceNew":"  /** test range query performance */\n  public void XtestFilteringPerformance() throws Exception {\n    int indexSize=19999;\n    float fractionCovered=.1f;\n\n    String l=t(0);\n    String u=t((int)(indexSize*10*fractionCovered));\n\n    SolrQueryRequest req = lrf.makeRequest();\n\n    QParser parser = QParser.getParser(\"foomany_s:[\" + l + \" TO \" + u + \"]\", null, req);\n    Query rangeQ = parser.parse();\n    List<Query> filters = new ArrayList<Query>();\n    filters.add(rangeQ);\n    req.close();\n\n    parser = QParser.getParser(\"{!dismax qf=t10_100_ws pf=t10_100_ws ps=20}\"+ t(0) + ' ' + t(1) + ' ' + t(2), null, req);\n    Query q= parser.parse();\n\n    // SolrIndexSearcher searcher = req.getSearcher();\n    // DocSet range = searcher.getDocSet(rangeQ, null);\n\n    createIndex2(indexSize, \"foomany_s\", \"t10_100_ws\");\n\n    // doListGen(100, q, filters, false, true);\n    doListGen(500, q, filters, false, true);\n\n    req.close();\n  }  \n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/test/org/apache/solr/search/TestSearchPerf#XtestFilteringPerformance().mjava","sourceNew":null,"sourceOld":"  /** test range query performance */\n  public void XtestFilteringPerformance() throws Exception {\n    int indexSize=19999;\n    float fractionCovered=.1f;\n\n    String l=t(0);\n    String u=t((int)(indexSize*10*fractionCovered));\n\n    SolrQueryRequest req = lrf.makeRequest();\n\n    QParser parser = QParser.getParser(\"foomany_s:[\" + l + \" TO \" + u + \"]\", null, req);\n    Query rangeQ = parser.parse();\n    List<Query> filters = new ArrayList<Query>();\n    filters.add(rangeQ);\n    req.close();\n\n    parser = QParser.getParser(\"{!dismax qf=t10_100_ws pf=t10_100_ws ps=20}\"+ t(0) + ' ' + t(1) + ' ' + t(2), null, req);\n    Query q= parser.parse();\n\n    // SolrIndexSearcher searcher = req.getSearcher();\n    // DocSet range = searcher.getDocSet(rangeQ, null);\n\n    createIndex2(indexSize, \"foomany_s\", \"t10_100_ws\");\n\n    // doListGen(100, q, filters, false, true);\n    doListGen(500, q, filters, false, true);\n\n    req.close();\n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/search/TestSearchPerf#XtestFilteringPerformance().mjava","pathOld":"src/test/org/apache/solr/search/TestSearchPerf#XtestFilteringPerformance().mjava","sourceNew":"  /** test range query performance */\n  public void XtestFilteringPerformance() throws Exception {\n    int indexSize=19999;\n    float fractionCovered=.1f;\n\n    String l=t(0);\n    String u=t((int)(indexSize*10*fractionCovered));\n\n    SolrQueryRequest req = lrf.makeRequest();\n\n    QParser parser = QParser.getParser(\"foomany_s:[\" + l + \" TO \" + u + \"]\", null, req);\n    Query rangeQ = parser.parse();\n    List<Query> filters = new ArrayList<Query>();\n    filters.add(rangeQ);\n    req.close();\n\n    parser = QParser.getParser(\"{!dismax qf=t10_100_ws pf=t10_100_ws ps=20}\"+ t(0) + ' ' + t(1) + ' ' + t(2), null, req);\n    Query q= parser.parse();\n\n    // SolrIndexSearcher searcher = req.getSearcher();\n    // DocSet range = searcher.getDocSet(rangeQ, null);\n\n    createIndex2(indexSize, \"foomany_s\", \"t10_100_ws\");\n\n    // doListGen(100, q, filters, false, true);\n    doListGen(500, q, filters, false, true);\n\n    req.close();\n  }  \n\n","sourceOld":"  /** test range query performance */\n  public void XtestFilteringPerformance() throws Exception {\n    int indexSize=19999;\n    float fractionCovered=.1f;\n\n    String l=t(0);\n    String u=t((int)(indexSize*10*fractionCovered));\n\n    SolrQueryRequest req = lrf.makeRequest();\n\n    QParser parser = QParser.getParser(\"foomany_s:[\" + l + \" TO \" + u + \"]\", null, req);\n    Query rangeQ = parser.parse();\n    List<Query> filters = new ArrayList<Query>();\n    filters.add(rangeQ);\n    req.close();\n\n    parser = QParser.getParser(\"{!dismax qf=t10_100_ws pf=t10_100_ws ps=20}\"+ t(0) + ' ' + t(1) + ' ' + t(2), null, req);\n    Query q= parser.parse();\n\n    // SolrIndexSearcher searcher = req.getSearcher();\n    // DocSet range = searcher.getDocSet(rangeQ, null);\n\n    createIndex2(indexSize, \"foomany_s\", \"t10_100_ws\");\n\n    // doListGen(100, q, filters, false, true);\n    doListGen(500, q, filters, false, true);\n\n    req.close();\n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/search/TestSearchPerf#XtestFilteringPerformance().mjava","pathOld":"/dev/null","sourceNew":"  /** test range query performance */\n  public void XtestFilteringPerformance() throws Exception {\n    int indexSize=19999;\n    float fractionCovered=.1f;\n\n    String l=t(0);\n    String u=t((int)(indexSize*10*fractionCovered));\n\n    SolrQueryRequest req = lrf.makeRequest();\n\n    QParser parser = QParser.getParser(\"foomany_s:[\" + l + \" TO \" + u + \"]\", null, req);\n    Query rangeQ = parser.parse();\n    List<Query> filters = new ArrayList<Query>();\n    filters.add(rangeQ);\n    req.close();\n\n    parser = QParser.getParser(\"{!dismax qf=t10_100_ws pf=t10_100_ws ps=20}\"+ t(0) + ' ' + t(1) + ' ' + t(2), null, req);\n    Query q= parser.parse();\n\n    // SolrIndexSearcher searcher = req.getSearcher();\n    // DocSet range = searcher.getDocSet(rangeQ, null);\n\n    createIndex2(indexSize, \"foomany_s\", \"t10_100_ws\");\n\n    // doListGen(100, q, filters, false, true);\n    doListGen(500, q, filters, false, true);\n\n    req.close();\n  }  \n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8bf47b67b38083a0c4d9d2e3f53b59a48e8db34","date":1309197122,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/search/TestSearchPerf#XtestFilteringPerformance().mjava","pathOld":"solr/src/test/org/apache/solr/search/TestSearchPerf#XtestFilteringPerformance().mjava","sourceNew":"  /** test range query performance */\n  public void XtestFilteringPerformance() throws Exception {\n    int indexSize=19999;\n    float fractionCovered=.1f;\n\n    String l=t(0);\n    String u=t((int)(indexSize*10*fractionCovered));\n\n    SolrQueryRequest req = lrf.makeRequest();\n\n    QParser parser = QParser.getParser(\"foomany_s:[\" + l + \" TO \" + u + \"]\", null, req);\n    Query rangeQ = parser.getQuery();\n    List<Query> filters = new ArrayList<Query>();\n    filters.add(rangeQ);\n    req.close();\n\n    parser = QParser.getParser(\"{!dismax qf=t10_100_ws pf=t10_100_ws ps=20}\"+ t(0) + ' ' + t(1) + ' ' + t(2), null, req);\n    Query q= parser.getQuery();\n\n    // SolrIndexSearcher searcher = req.getSearcher();\n    // DocSet range = searcher.getDocSet(rangeQ, null);\n\n    createIndex2(indexSize, \"foomany_s\", \"t10_100_ws\");\n\n    // doListGen(100, q, filters, false, true);\n    doListGen(500, q, filters, false, true);\n\n    req.close();\n  }  \n\n","sourceOld":"  /** test range query performance */\n  public void XtestFilteringPerformance() throws Exception {\n    int indexSize=19999;\n    float fractionCovered=.1f;\n\n    String l=t(0);\n    String u=t((int)(indexSize*10*fractionCovered));\n\n    SolrQueryRequest req = lrf.makeRequest();\n\n    QParser parser = QParser.getParser(\"foomany_s:[\" + l + \" TO \" + u + \"]\", null, req);\n    Query rangeQ = parser.parse();\n    List<Query> filters = new ArrayList<Query>();\n    filters.add(rangeQ);\n    req.close();\n\n    parser = QParser.getParser(\"{!dismax qf=t10_100_ws pf=t10_100_ws ps=20}\"+ t(0) + ' ' + t(1) + ' ' + t(2), null, req);\n    Query q= parser.parse();\n\n    // SolrIndexSearcher searcher = req.getSearcher();\n    // DocSet range = searcher.getDocSet(rangeQ, null);\n\n    createIndex2(indexSize, \"foomany_s\", \"t10_100_ws\");\n\n    // doListGen(100, q, filters, false, true);\n    doListGen(500, q, filters, false, true);\n\n    req.close();\n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2553b00f699380c64959ccb27991289aae87be2e","date":1309290151,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/search/TestSearchPerf#XtestFilteringPerformance().mjava","pathOld":"solr/src/test/org/apache/solr/search/TestSearchPerf#XtestFilteringPerformance().mjava","sourceNew":"  /** test range query performance */\n  public void XtestFilteringPerformance() throws Exception {\n    int indexSize=19999;\n    float fractionCovered=.1f;\n\n    String l=t(0);\n    String u=t((int)(indexSize*10*fractionCovered));\n\n    SolrQueryRequest req = lrf.makeRequest();\n\n    QParser parser = QParser.getParser(\"foomany_s:[\" + l + \" TO \" + u + \"]\", null, req);\n    Query rangeQ = parser.getQuery();\n    List<Query> filters = new ArrayList<Query>();\n    filters.add(rangeQ);\n    req.close();\n\n    parser = QParser.getParser(\"{!dismax qf=t10_100_ws pf=t10_100_ws ps=20}\"+ t(0) + ' ' + t(1) + ' ' + t(2), null, req);\n    Query q= parser.getQuery();\n\n    // SolrIndexSearcher searcher = req.getSearcher();\n    // DocSet range = searcher.getDocSet(rangeQ, null);\n\n    createIndex2(indexSize, \"foomany_s\", \"t10_100_ws\");\n\n    // doListGen(100, q, filters, false, true);\n    doListGen(500, q, filters, false, true);\n\n    req.close();\n  }  \n\n","sourceOld":"  /** test range query performance */\n  public void XtestFilteringPerformance() throws Exception {\n    int indexSize=19999;\n    float fractionCovered=.1f;\n\n    String l=t(0);\n    String u=t((int)(indexSize*10*fractionCovered));\n\n    SolrQueryRequest req = lrf.makeRequest();\n\n    QParser parser = QParser.getParser(\"foomany_s:[\" + l + \" TO \" + u + \"]\", null, req);\n    Query rangeQ = parser.parse();\n    List<Query> filters = new ArrayList<Query>();\n    filters.add(rangeQ);\n    req.close();\n\n    parser = QParser.getParser(\"{!dismax qf=t10_100_ws pf=t10_100_ws ps=20}\"+ t(0) + ' ' + t(1) + ' ' + t(2), null, req);\n    Query q= parser.parse();\n\n    // SolrIndexSearcher searcher = req.getSearcher();\n    // DocSet range = searcher.getDocSet(rangeQ, null);\n\n    createIndex2(indexSize, \"foomany_s\", \"t10_100_ws\");\n\n    // doListGen(100, q, filters, false, true);\n    doListGen(500, q, filters, false, true);\n\n    req.close();\n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/search/TestSearchPerf#XtestFilteringPerformance().mjava","pathOld":"solr/src/test/org/apache/solr/search/TestSearchPerf#XtestFilteringPerformance().mjava","sourceNew":"  /** test range query performance */\n  public void XtestFilteringPerformance() throws Exception {\n    int indexSize=19999;\n    float fractionCovered=.1f;\n\n    String l=t(0);\n    String u=t((int)(indexSize*10*fractionCovered));\n\n    SolrQueryRequest req = lrf.makeRequest();\n\n    QParser parser = QParser.getParser(\"foomany_s:[\" + l + \" TO \" + u + \"]\", null, req);\n    Query rangeQ = parser.getQuery();\n    List<Query> filters = new ArrayList<Query>();\n    filters.add(rangeQ);\n    req.close();\n\n    parser = QParser.getParser(\"{!dismax qf=t10_100_ws pf=t10_100_ws ps=20}\"+ t(0) + ' ' + t(1) + ' ' + t(2), null, req);\n    Query q= parser.getQuery();\n\n    // SolrIndexSearcher searcher = req.getSearcher();\n    // DocSet range = searcher.getDocSet(rangeQ, null);\n\n    createIndex2(indexSize, \"foomany_s\", \"t10_100_ws\");\n\n    // doListGen(100, q, filters, false, true);\n    doListGen(500, q, filters, false, true);\n\n    req.close();\n  }  \n\n","sourceOld":"  /** test range query performance */\n  public void XtestFilteringPerformance() throws Exception {\n    int indexSize=19999;\n    float fractionCovered=.1f;\n\n    String l=t(0);\n    String u=t((int)(indexSize*10*fractionCovered));\n\n    SolrQueryRequest req = lrf.makeRequest();\n\n    QParser parser = QParser.getParser(\"foomany_s:[\" + l + \" TO \" + u + \"]\", null, req);\n    Query rangeQ = parser.parse();\n    List<Query> filters = new ArrayList<Query>();\n    filters.add(rangeQ);\n    req.close();\n\n    parser = QParser.getParser(\"{!dismax qf=t10_100_ws pf=t10_100_ws ps=20}\"+ t(0) + ' ' + t(1) + ' ' + t(2), null, req);\n    Query q= parser.parse();\n\n    // SolrIndexSearcher searcher = req.getSearcher();\n    // DocSet range = searcher.getDocSet(rangeQ, null);\n\n    createIndex2(indexSize, \"foomany_s\", \"t10_100_ws\");\n\n    // doListGen(100, q, filters, false, true);\n    doListGen(500, q, filters, false, true);\n\n    req.close();\n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSearchPerf#XtestFilteringPerformance().mjava","pathOld":"solr/src/test/org/apache/solr/search/TestSearchPerf#XtestFilteringPerformance().mjava","sourceNew":"  /** test range query performance */\n  public void XtestFilteringPerformance() throws Exception {\n    int indexSize=19999;\n    float fractionCovered=.1f;\n\n    String l=t(0);\n    String u=t((int)(indexSize*10*fractionCovered));\n\n    SolrQueryRequest req = lrf.makeRequest();\n\n    QParser parser = QParser.getParser(\"foomany_s:[\" + l + \" TO \" + u + \"]\", null, req);\n    Query rangeQ = parser.getQuery();\n    List<Query> filters = new ArrayList<Query>();\n    filters.add(rangeQ);\n    req.close();\n\n    parser = QParser.getParser(\"{!dismax qf=t10_100_ws pf=t10_100_ws ps=20}\"+ t(0) + ' ' + t(1) + ' ' + t(2), null, req);\n    Query q= parser.getQuery();\n\n    // SolrIndexSearcher searcher = req.getSearcher();\n    // DocSet range = searcher.getDocSet(rangeQ, null);\n\n    createIndex2(indexSize, \"foomany_s\", \"t10_100_ws\");\n\n    // doListGen(100, q, filters, false, true);\n    doListGen(500, q, filters, false, true);\n\n    req.close();\n  }  \n\n","sourceOld":"  /** test range query performance */\n  public void XtestFilteringPerformance() throws Exception {\n    int indexSize=19999;\n    float fractionCovered=.1f;\n\n    String l=t(0);\n    String u=t((int)(indexSize*10*fractionCovered));\n\n    SolrQueryRequest req = lrf.makeRequest();\n\n    QParser parser = QParser.getParser(\"foomany_s:[\" + l + \" TO \" + u + \"]\", null, req);\n    Query rangeQ = parser.getQuery();\n    List<Query> filters = new ArrayList<Query>();\n    filters.add(rangeQ);\n    req.close();\n\n    parser = QParser.getParser(\"{!dismax qf=t10_100_ws pf=t10_100_ws ps=20}\"+ t(0) + ' ' + t(1) + ' ' + t(2), null, req);\n    Query q= parser.getQuery();\n\n    // SolrIndexSearcher searcher = req.getSearcher();\n    // DocSet range = searcher.getDocSet(rangeQ, null);\n\n    createIndex2(indexSize, \"foomany_s\", \"t10_100_ws\");\n\n    // doListGen(100, q, filters, false, true);\n    doListGen(500, q, filters, false, true);\n\n    req.close();\n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSearchPerf#XtestFilteringPerformance().mjava","pathOld":"solr/src/test/org/apache/solr/search/TestSearchPerf#XtestFilteringPerformance().mjava","sourceNew":"  /** test range query performance */\n  public void XtestFilteringPerformance() throws Exception {\n    int indexSize=19999;\n    float fractionCovered=.1f;\n\n    String l=t(0);\n    String u=t((int)(indexSize*10*fractionCovered));\n\n    SolrQueryRequest req = lrf.makeRequest();\n\n    QParser parser = QParser.getParser(\"foomany_s:[\" + l + \" TO \" + u + \"]\", null, req);\n    Query rangeQ = parser.getQuery();\n    List<Query> filters = new ArrayList<Query>();\n    filters.add(rangeQ);\n    req.close();\n\n    parser = QParser.getParser(\"{!dismax qf=t10_100_ws pf=t10_100_ws ps=20}\"+ t(0) + ' ' + t(1) + ' ' + t(2), null, req);\n    Query q= parser.getQuery();\n\n    // SolrIndexSearcher searcher = req.getSearcher();\n    // DocSet range = searcher.getDocSet(rangeQ, null);\n\n    createIndex2(indexSize, \"foomany_s\", \"t10_100_ws\");\n\n    // doListGen(100, q, filters, false, true);\n    doListGen(500, q, filters, false, true);\n\n    req.close();\n  }  \n\n","sourceOld":"  /** test range query performance */\n  public void XtestFilteringPerformance() throws Exception {\n    int indexSize=19999;\n    float fractionCovered=.1f;\n\n    String l=t(0);\n    String u=t((int)(indexSize*10*fractionCovered));\n\n    SolrQueryRequest req = lrf.makeRequest();\n\n    QParser parser = QParser.getParser(\"foomany_s:[\" + l + \" TO \" + u + \"]\", null, req);\n    Query rangeQ = parser.getQuery();\n    List<Query> filters = new ArrayList<Query>();\n    filters.add(rangeQ);\n    req.close();\n\n    parser = QParser.getParser(\"{!dismax qf=t10_100_ws pf=t10_100_ws ps=20}\"+ t(0) + ' ' + t(1) + ' ' + t(2), null, req);\n    Query q= parser.getQuery();\n\n    // SolrIndexSearcher searcher = req.getSearcher();\n    // DocSet range = searcher.getDocSet(rangeQ, null);\n\n    createIndex2(indexSize, \"foomany_s\", \"t10_100_ws\");\n\n    // doListGen(100, q, filters, false, true);\n    doListGen(500, q, filters, false, true);\n\n    req.close();\n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSearchPerf#XtestFilteringPerformance().mjava","pathOld":"solr/src/test/org/apache/solr/search/TestSearchPerf#XtestFilteringPerformance().mjava","sourceNew":"  /** test range query performance */\n  public void XtestFilteringPerformance() throws Exception {\n    int indexSize=19999;\n    float fractionCovered=.1f;\n\n    String l=t(0);\n    String u=t((int)(indexSize*10*fractionCovered));\n\n    SolrQueryRequest req = lrf.makeRequest();\n\n    QParser parser = QParser.getParser(\"foomany_s:[\" + l + \" TO \" + u + \"]\", null, req);\n    Query rangeQ = parser.getQuery();\n    List<Query> filters = new ArrayList<Query>();\n    filters.add(rangeQ);\n    req.close();\n\n    parser = QParser.getParser(\"{!dismax qf=t10_100_ws pf=t10_100_ws ps=20}\"+ t(0) + ' ' + t(1) + ' ' + t(2), null, req);\n    Query q= parser.getQuery();\n\n    // SolrIndexSearcher searcher = req.getSearcher();\n    // DocSet range = searcher.getDocSet(rangeQ, null);\n\n    createIndex2(indexSize, \"foomany_s\", \"t10_100_ws\");\n\n    // doListGen(100, q, filters, false, true);\n    doListGen(500, q, filters, false, true);\n\n    req.close();\n  }  \n\n","sourceOld":"  /** test range query performance */\n  public void XtestFilteringPerformance() throws Exception {\n    int indexSize=19999;\n    float fractionCovered=.1f;\n\n    String l=t(0);\n    String u=t((int)(indexSize*10*fractionCovered));\n\n    SolrQueryRequest req = lrf.makeRequest();\n\n    QParser parser = QParser.getParser(\"foomany_s:[\" + l + \" TO \" + u + \"]\", null, req);\n    Query rangeQ = parser.getQuery();\n    List<Query> filters = new ArrayList<Query>();\n    filters.add(rangeQ);\n    req.close();\n\n    parser = QParser.getParser(\"{!dismax qf=t10_100_ws pf=t10_100_ws ps=20}\"+ t(0) + ' ' + t(1) + ' ' + t(2), null, req);\n    Query q= parser.getQuery();\n\n    // SolrIndexSearcher searcher = req.getSearcher();\n    // DocSet range = searcher.getDocSet(rangeQ, null);\n\n    createIndex2(indexSize, \"foomany_s\", \"t10_100_ws\");\n\n    // doListGen(100, q, filters, false, true);\n    doListGen(500, q, filters, false, true);\n\n    req.close();\n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c26f00b574427b55127e869b935845554afde1fa":["f8bf47b67b38083a0c4d9d2e3f53b59a48e8db34","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"2553b00f699380c64959ccb27991289aae87be2e":["1da8d55113b689b06716246649de6f62430f15c0","f8bf47b67b38083a0c4d9d2e3f53b59a48e8db34"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["1da8d55113b689b06716246649de6f62430f15c0","f8bf47b67b38083a0c4d9d2e3f53b59a48e8db34"],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["2553b00f699380c64959ccb27991289aae87be2e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["f8bf47b67b38083a0c4d9d2e3f53b59a48e8db34"],"f8bf47b67b38083a0c4d9d2e3f53b59a48e8db34":["1da8d55113b689b06716246649de6f62430f15c0"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"2553b00f699380c64959ccb27991289aae87be2e":["c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"1da8d55113b689b06716246649de6f62430f15c0":["2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c","f8bf47b67b38083a0c4d9d2e3f53b59a48e8db34"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"f8bf47b67b38083a0c4d9d2e3f53b59a48e8db34":["c26f00b574427b55127e869b935845554afde1fa","2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c","a258fbb26824fd104ed795e5d9033d2d040049ee"],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d083e83f225b11e5fdd900e83d26ddb385b6955c","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}