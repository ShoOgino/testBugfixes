{"path":"solr/core/src/java/org/apache/solr/core/SolrCore#initCodec(SolrConfig,IndexSchema).mjava","commits":[{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#initCodec(SolrConfig,IndexSchema).mjava","pathOld":"/dev/null","sourceNew":"  private Codec initCodec(SolrConfig solrConfig, final IndexSchema schema) {\n    final PluginInfo info = solrConfig.getPluginInfo(CodecFactory.class.getName());\n    final CodecFactory factory;\n    if (info != null) {\n      factory = (CodecFactory) schema.getResourceLoader().newInstance(info.className);\n      factory.init(info.initArgs);\n    } else {\n      factory = new DefaultCodecFactory();\n    }\n    return factory.create(schema);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["6d061c6ac0252e445714563a37eb8aa9816ce369"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a7ebf3a5f9e588d0bb564ac30d6dc32056ce9a41","date":1334628185,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#initCodec(SolrConfig,IndexSchema).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#initCodec(SolrConfig,IndexSchema).mjava","sourceNew":"  private Codec initCodec(SolrConfig solrConfig, final IndexSchema schema) {\n    final PluginInfo info = solrConfig.getPluginInfo(CodecFactory.class.getName());\n    final CodecFactory factory;\n    if (info != null) {\n      factory = schema.getResourceLoader().newInstance(info.className, CodecFactory.class);\n      factory.init(info.initArgs);\n    } else {\n      factory = new DefaultCodecFactory();\n    }\n    return factory.create(schema);\n  }\n\n","sourceOld":"  private Codec initCodec(SolrConfig solrConfig, final IndexSchema schema) {\n    final PluginInfo info = solrConfig.getPluginInfo(CodecFactory.class.getName());\n    final CodecFactory factory;\n    if (info != null) {\n      factory = (CodecFactory) schema.getResourceLoader().newInstance(info.className);\n      factory.init(info.initArgs);\n    } else {\n      factory = new DefaultCodecFactory();\n    }\n    return factory.create(schema);\n  }\n\n","bugFix":null,"bugIntro":["df151630bfbea5338a007b97bfd37e4ec94f873f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6d061c6ac0252e445714563a37eb8aa9816ce369","date":1341880528,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#initCodec(SolrConfig,IndexSchema).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#initCodec(SolrConfig,IndexSchema).mjava","sourceNew":"  private Codec initCodec(SolrConfig solrConfig, final IndexSchema schema) {\n    final PluginInfo info = solrConfig.getPluginInfo(CodecFactory.class.getName());\n    final CodecFactory factory;\n    if (info != null) {\n      factory = schema.getResourceLoader().newInstance(info.className, CodecFactory.class);\n      factory.init(info.initArgs);\n    } else {\n      factory = new CodecFactory() {\n        @Override\n        public Codec getCodec() {\n          return Codec.getDefault();\n        }\n      };\n    }\n    if (factory instanceof SchemaAware) {\n      ((SchemaAware)factory).inform(schema);\n    } else {\n      for (FieldType ft : schema.getFieldTypes().values()) {\n        if (null != ft.getPostingsFormat()) {\n          String msg = \"FieldType '\" + ft.getTypeName() + \"' is configured with a postings format, but the codec does not support it: \" + factory.getClass();\n          log.error(msg);\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, msg);\n        }\n      }\n    }\n    return factory.getCodec();\n  }\n\n","sourceOld":"  private Codec initCodec(SolrConfig solrConfig, final IndexSchema schema) {\n    final PluginInfo info = solrConfig.getPluginInfo(CodecFactory.class.getName());\n    final CodecFactory factory;\n    if (info != null) {\n      factory = schema.getResourceLoader().newInstance(info.className, CodecFactory.class);\n      factory.init(info.initArgs);\n    } else {\n      factory = new DefaultCodecFactory();\n    }\n    return factory.create(schema);\n  }\n\n","bugFix":["7b91922b55d15444d554721b352861d028eb8278"],"bugIntro":["96e0d4494fe54b31c7f0151f3a632124ab806351"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#initCodec(SolrConfig,IndexSchema).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#initCodec(SolrConfig,IndexSchema).mjava","sourceNew":"  private Codec initCodec(SolrConfig solrConfig, final IndexSchema schema) {\n    final PluginInfo info = solrConfig.getPluginInfo(CodecFactory.class.getName());\n    final CodecFactory factory;\n    if (info != null) {\n      factory = schema.getResourceLoader().newInstance(info.className, CodecFactory.class);\n      factory.init(info.initArgs);\n    } else {\n      factory = new CodecFactory() {\n        @Override\n        public Codec getCodec() {\n          return Codec.getDefault();\n        }\n      };\n    }\n    if (factory instanceof SchemaAware) {\n      ((SchemaAware)factory).inform(schema);\n    } else {\n      for (FieldType ft : schema.getFieldTypes().values()) {\n        if (null != ft.getPostingsFormat()) {\n          String msg = \"FieldType '\" + ft.getTypeName() + \"' is configured with a postings format, but the codec does not support it: \" + factory.getClass();\n          log.error(msg);\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, msg);\n        }\n      }\n    }\n    return factory.getCodec();\n  }\n\n","sourceOld":"  private Codec initCodec(SolrConfig solrConfig, final IndexSchema schema) {\n    final PluginInfo info = solrConfig.getPluginInfo(CodecFactory.class.getName());\n    final CodecFactory factory;\n    if (info != null) {\n      factory = schema.getResourceLoader().newInstance(info.className, CodecFactory.class);\n      factory.init(info.initArgs);\n    } else {\n      factory = new DefaultCodecFactory();\n    }\n    return factory.create(schema);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#initCodec(SolrConfig,IndexSchema).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#initCodec(SolrConfig,IndexSchema).mjava","sourceNew":"  private Codec initCodec(SolrConfig solrConfig, final IndexSchema schema) {\n    final PluginInfo info = solrConfig.getPluginInfo(CodecFactory.class.getName());\n    final CodecFactory factory;\n    if (info != null) {\n      factory = schema.getResourceLoader().newInstance(info.className, CodecFactory.class);\n      factory.init(info.initArgs);\n    } else {\n      factory = new CodecFactory() {\n        @Override\n        public Codec getCodec() {\n          return Codec.getDefault();\n        }\n      };\n    }\n    if (factory instanceof SchemaAware) {\n      ((SchemaAware)factory).inform(schema);\n    } else {\n      for (FieldType ft : schema.getFieldTypes().values()) {\n        if (null != ft.getPostingsFormat()) {\n          String msg = \"FieldType '\" + ft.getTypeName() + \"' is configured with a postings format, but the codec does not support it: \" + factory.getClass();\n          log.error(msg);\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, msg);\n        }\n      }\n    }\n    return factory.getCodec();\n  }\n\n","sourceOld":"  private Codec initCodec(SolrConfig solrConfig, final IndexSchema schema) {\n    final PluginInfo info = solrConfig.getPluginInfo(CodecFactory.class.getName());\n    final CodecFactory factory;\n    if (info != null) {\n      factory = schema.getResourceLoader().newInstance(info.className, CodecFactory.class);\n      factory.init(info.initArgs);\n    } else {\n      factory = new DefaultCodecFactory();\n    }\n    return factory.create(schema);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"73bb5a57dc75b54a39494f99986599cae7dff417","date":1361040620,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#initCodec(SolrConfig,IndexSchema).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#initCodec(SolrConfig,IndexSchema).mjava","sourceNew":"  private Codec initCodec(SolrConfig solrConfig, final IndexSchema schema) {\n    final PluginInfo info = solrConfig.getPluginInfo(CodecFactory.class.getName());\n    final CodecFactory factory;\n    if (info != null) {\n      factory = schema.getResourceLoader().newInstance(info.className, CodecFactory.class);\n      factory.init(info.initArgs);\n    } else {\n      factory = new CodecFactory() {\n        @Override\n        public Codec getCodec() {\n          return Codec.getDefault();\n        }\n      };\n    }\n    if (factory instanceof SchemaAware) {\n      ((SchemaAware)factory).inform(schema);\n    } else {\n      for (FieldType ft : schema.getFieldTypes().values()) {\n        if (null != ft.getPostingsFormat()) {\n          String msg = \"FieldType '\" + ft.getTypeName() + \"' is configured with a postings format, but the codec does not support it: \" + factory.getClass();\n          log.error(msg);\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, msg);\n        }\n        if (null != ft.getDocValuesFormat()) {\n          String msg = \"FieldType '\" + ft.getTypeName() + \"' is configured with a docValues format, but the codec does not support it: \" + factory.getClass();\n          log.error(msg);\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, msg);\n        }\n      }\n    }\n    return factory.getCodec();\n  }\n\n","sourceOld":"  private Codec initCodec(SolrConfig solrConfig, final IndexSchema schema) {\n    final PluginInfo info = solrConfig.getPluginInfo(CodecFactory.class.getName());\n    final CodecFactory factory;\n    if (info != null) {\n      factory = schema.getResourceLoader().newInstance(info.className, CodecFactory.class);\n      factory.init(info.initArgs);\n    } else {\n      factory = new CodecFactory() {\n        @Override\n        public Codec getCodec() {\n          return Codec.getDefault();\n        }\n      };\n    }\n    if (factory instanceof SchemaAware) {\n      ((SchemaAware)factory).inform(schema);\n    } else {\n      for (FieldType ft : schema.getFieldTypes().values()) {\n        if (null != ft.getPostingsFormat()) {\n          String msg = \"FieldType '\" + ft.getTypeName() + \"' is configured with a postings format, but the codec does not support it: \" + factory.getClass();\n          log.error(msg);\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, msg);\n        }\n      }\n    }\n    return factory.getCodec();\n  }\n\n","bugFix":null,"bugIntro":["96e0d4494fe54b31c7f0151f3a632124ab806351"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"95303ff3749680c743b9425f9cf99e6e4065e8a8","date":1361061922,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#initCodec(SolrConfig,IndexSchema).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#initCodec(SolrConfig,IndexSchema).mjava","sourceNew":"  private Codec initCodec(SolrConfig solrConfig, final IndexSchema schema) {\n    final PluginInfo info = solrConfig.getPluginInfo(CodecFactory.class.getName());\n    final CodecFactory factory;\n    if (info != null) {\n      factory = schema.getResourceLoader().newInstance(info.className, CodecFactory.class);\n      factory.init(info.initArgs);\n    } else {\n      factory = new CodecFactory() {\n        @Override\n        public Codec getCodec() {\n          return Codec.getDefault();\n        }\n      };\n    }\n    if (factory instanceof SchemaAware) {\n      ((SchemaAware)factory).inform(schema);\n    } else {\n      for (FieldType ft : schema.getFieldTypes().values()) {\n        if (null != ft.getPostingsFormat()) {\n          String msg = \"FieldType '\" + ft.getTypeName() + \"' is configured with a postings format, but the codec does not support it: \" + factory.getClass();\n          log.error(msg);\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, msg);\n        }\n        if (null != ft.getDocValuesFormat()) {\n          String msg = \"FieldType '\" + ft.getTypeName() + \"' is configured with a docValues format, but the codec does not support it: \" + factory.getClass();\n          log.error(msg);\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, msg);\n        }\n      }\n    }\n    return factory.getCodec();\n  }\n\n","sourceOld":"  private Codec initCodec(SolrConfig solrConfig, final IndexSchema schema) {\n    final PluginInfo info = solrConfig.getPluginInfo(CodecFactory.class.getName());\n    final CodecFactory factory;\n    if (info != null) {\n      factory = schema.getResourceLoader().newInstance(info.className, CodecFactory.class);\n      factory.init(info.initArgs);\n    } else {\n      factory = new CodecFactory() {\n        @Override\n        public Codec getCodec() {\n          return Codec.getDefault();\n        }\n      };\n    }\n    if (factory instanceof SchemaAware) {\n      ((SchemaAware)factory).inform(schema);\n    } else {\n      for (FieldType ft : schema.getFieldTypes().values()) {\n        if (null != ft.getPostingsFormat()) {\n          String msg = \"FieldType '\" + ft.getTypeName() + \"' is configured with a postings format, but the codec does not support it: \" + factory.getClass();\n          log.error(msg);\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, msg);\n        }\n      }\n    }\n    return factory.getCodec();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"08970e5b8411182a29412c177eff67ec1110095b","date":1366640815,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#initCodec(SolrConfig,IndexSchema).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#initCodec(SolrConfig,IndexSchema).mjava","sourceNew":"  private Codec initCodec(SolrConfig solrConfig, final IndexSchema schema) {\n    final PluginInfo info = solrConfig.getPluginInfo(CodecFactory.class.getName());\n    final CodecFactory factory;\n    if (info != null) {\n      factory = schema.getResourceLoader().newInstance(info.className, CodecFactory.class);\n      factory.init(info.initArgs);\n    } else {\n      factory = new CodecFactory() {\n        @Override\n        public Codec getCodec() {\n          return Codec.getDefault();\n        }\n      };\n    }\n    if (factory instanceof SolrCoreAware) {\n      // CodecFactory needs SolrCore before inform() is called on all registered\n      // SolrCoreAware listeners, at the end of the SolrCore constructor\n      ((SolrCoreAware)factory).inform(this);\n    } else {\n      for (FieldType ft : schema.getFieldTypes().values()) {\n        if (null != ft.getPostingsFormat()) {\n          String msg = \"FieldType '\" + ft.getTypeName() + \"' is configured with a postings format, but the codec does not support it: \" + factory.getClass();\n          log.error(msg);\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, msg);\n        }\n        if (null != ft.getDocValuesFormat()) {\n          String msg = \"FieldType '\" + ft.getTypeName() + \"' is configured with a docValues format, but the codec does not support it: \" + factory.getClass();\n          log.error(msg);\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, msg);\n        }\n      }\n    }\n    return factory.getCodec();\n  }\n\n","sourceOld":"  private Codec initCodec(SolrConfig solrConfig, final IndexSchema schema) {\n    final PluginInfo info = solrConfig.getPluginInfo(CodecFactory.class.getName());\n    final CodecFactory factory;\n    if (info != null) {\n      factory = schema.getResourceLoader().newInstance(info.className, CodecFactory.class);\n      factory.init(info.initArgs);\n    } else {\n      factory = new CodecFactory() {\n        @Override\n        public Codec getCodec() {\n          return Codec.getDefault();\n        }\n      };\n    }\n    if (factory instanceof SchemaAware) {\n      ((SchemaAware)factory).inform(schema);\n    } else {\n      for (FieldType ft : schema.getFieldTypes().values()) {\n        if (null != ft.getPostingsFormat()) {\n          String msg = \"FieldType '\" + ft.getTypeName() + \"' is configured with a postings format, but the codec does not support it: \" + factory.getClass();\n          log.error(msg);\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, msg);\n        }\n        if (null != ft.getDocValuesFormat()) {\n          String msg = \"FieldType '\" + ft.getTypeName() + \"' is configured with a docValues format, but the codec does not support it: \" + factory.getClass();\n          log.error(msg);\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, msg);\n        }\n      }\n    }\n    return factory.getCodec();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"96e0d4494fe54b31c7f0151f3a632124ab806351","date":1512410218,"type":3,"author":"Erick","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#initCodec(SolrConfig,IndexSchema).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#initCodec(SolrConfig,IndexSchema).mjava","sourceNew":"  private Codec initCodec(SolrConfig solrConfig, final IndexSchema schema) {\n    final PluginInfo info = solrConfig.getPluginInfo(CodecFactory.class.getName());\n    final CodecFactory factory;\n    if (info != null) {\n      factory = schema.getResourceLoader().newInstance(info.className, CodecFactory.class);\n      factory.init(info.initArgs);\n    } else {\n      factory = new CodecFactory() {\n        @Override\n        public Codec getCodec() {\n          return Codec.getDefault();\n        }\n      };\n    }\n    if (factory instanceof SolrCoreAware) {\n      // CodecFactory needs SolrCore before inform() is called on all registered\n      // SolrCoreAware listeners, at the end of the SolrCore constructor\n      ((SolrCoreAware)factory).inform(this);\n    } else {\n      for (FieldType ft : schema.getFieldTypes().values()) {\n        if (null != ft.getPostingsFormat()) {\n          String msg = \"FieldType '\" + ft.getTypeName() + \"' is configured with a postings format, but the codec does not support it: \" + factory.getClass();\n          log.error(msg);\n          throw new SolrException(ErrorCode.SERVER_ERROR, msg);\n        }\n        if (null != ft.getDocValuesFormat()) {\n          String msg = \"FieldType '\" + ft.getTypeName() + \"' is configured with a docValues format, but the codec does not support it: \" + factory.getClass();\n          log.error(msg);\n          throw new SolrException(ErrorCode.SERVER_ERROR, msg);\n        }\n      }\n    }\n    return factory.getCodec();\n  }\n\n","sourceOld":"  private Codec initCodec(SolrConfig solrConfig, final IndexSchema schema) {\n    final PluginInfo info = solrConfig.getPluginInfo(CodecFactory.class.getName());\n    final CodecFactory factory;\n    if (info != null) {\n      factory = schema.getResourceLoader().newInstance(info.className, CodecFactory.class);\n      factory.init(info.initArgs);\n    } else {\n      factory = new CodecFactory() {\n        @Override\n        public Codec getCodec() {\n          return Codec.getDefault();\n        }\n      };\n    }\n    if (factory instanceof SolrCoreAware) {\n      // CodecFactory needs SolrCore before inform() is called on all registered\n      // SolrCoreAware listeners, at the end of the SolrCore constructor\n      ((SolrCoreAware)factory).inform(this);\n    } else {\n      for (FieldType ft : schema.getFieldTypes().values()) {\n        if (null != ft.getPostingsFormat()) {\n          String msg = \"FieldType '\" + ft.getTypeName() + \"' is configured with a postings format, but the codec does not support it: \" + factory.getClass();\n          log.error(msg);\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, msg);\n        }\n        if (null != ft.getDocValuesFormat()) {\n          String msg = \"FieldType '\" + ft.getTypeName() + \"' is configured with a docValues format, but the codec does not support it: \" + factory.getClass();\n          log.error(msg);\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, msg);\n        }\n      }\n    }\n    return factory.getCodec();\n  }\n\n","bugFix":["6d061c6ac0252e445714563a37eb8aa9816ce369","73bb5a57dc75b54a39494f99986599cae7dff417"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"df151630bfbea5338a007b97bfd37e4ec94f873f","date":1553017904,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#initCodec(SolrConfig,IndexSchema).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#initCodec(SolrConfig,IndexSchema).mjava","sourceNew":"  private Codec initCodec(SolrConfig solrConfig, final IndexSchema schema) {\n    final PluginInfo info = solrConfig.getPluginInfo(CodecFactory.class.getName());\n    final CodecFactory factory;\n    if (info != null) {\n      factory = resourceLoader.newInstance(info.className, CodecFactory.class);\n      factory.init(info.initArgs);\n    } else {\n      factory = new CodecFactory() {\n        @Override\n        public Codec getCodec() {\n          return Codec.getDefault();\n        }\n      };\n    }\n    if (factory instanceof SolrCoreAware) {\n      // CodecFactory needs SolrCore before inform() is called on all registered\n      // SolrCoreAware listeners, at the end of the SolrCore constructor\n      ((SolrCoreAware)factory).inform(this);\n    } else {\n      for (FieldType ft : schema.getFieldTypes().values()) {\n        if (null != ft.getPostingsFormat()) {\n          String msg = \"FieldType '\" + ft.getTypeName() + \"' is configured with a postings format, but the codec does not support it: \" + factory.getClass();\n          log.error(msg);\n          throw new SolrException(ErrorCode.SERVER_ERROR, msg);\n        }\n        if (null != ft.getDocValuesFormat()) {\n          String msg = \"FieldType '\" + ft.getTypeName() + \"' is configured with a docValues format, but the codec does not support it: \" + factory.getClass();\n          log.error(msg);\n          throw new SolrException(ErrorCode.SERVER_ERROR, msg);\n        }\n      }\n    }\n    return factory.getCodec();\n  }\n\n","sourceOld":"  private Codec initCodec(SolrConfig solrConfig, final IndexSchema schema) {\n    final PluginInfo info = solrConfig.getPluginInfo(CodecFactory.class.getName());\n    final CodecFactory factory;\n    if (info != null) {\n      factory = schema.getResourceLoader().newInstance(info.className, CodecFactory.class);\n      factory.init(info.initArgs);\n    } else {\n      factory = new CodecFactory() {\n        @Override\n        public Codec getCodec() {\n          return Codec.getDefault();\n        }\n      };\n    }\n    if (factory instanceof SolrCoreAware) {\n      // CodecFactory needs SolrCore before inform() is called on all registered\n      // SolrCoreAware listeners, at the end of the SolrCore constructor\n      ((SolrCoreAware)factory).inform(this);\n    } else {\n      for (FieldType ft : schema.getFieldTypes().values()) {\n        if (null != ft.getPostingsFormat()) {\n          String msg = \"FieldType '\" + ft.getTypeName() + \"' is configured with a postings format, but the codec does not support it: \" + factory.getClass();\n          log.error(msg);\n          throw new SolrException(ErrorCode.SERVER_ERROR, msg);\n        }\n        if (null != ft.getDocValuesFormat()) {\n          String msg = \"FieldType '\" + ft.getTypeName() + \"' is configured with a docValues format, but the codec does not support it: \" + factory.getClass();\n          log.error(msg);\n          throw new SolrException(ErrorCode.SERVER_ERROR, msg);\n        }\n      }\n    }\n    return factory.getCodec();\n  }\n\n","bugFix":["a7ebf3a5f9e588d0bb564ac30d6dc32056ce9a41"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2668c99990e4c94a78bac005aa682b7c5986d23a","date":1561446137,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#initCodec(SolrConfig,IndexSchema).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#initCodec(SolrConfig,IndexSchema).mjava","sourceNew":"  private Codec initCodec(SolrConfig solrConfig, final IndexSchema schema) {\n    final PluginInfo info = solrConfig.getPluginInfo(CodecFactory.class.getName());\n    final CodecFactory factory;\n    if (info != null) {\n      factory = resourceLoader.newInstance(info.className, CodecFactory.class);\n      factory.init(info.initArgs);\n    } else {\n      factory = new CodecFactory() {\n        @Override\n        public Codec getCodec() {\n          return Codec.getDefault();\n        }\n      };\n    }\n    if (factory instanceof SolrCoreAware) {\n      // CodecFactory needs SolrCore before inform() is called on all registered\n      // SolrCoreAware listeners, at the end of the SolrCore constructor\n      ((SolrCoreAware) factory).inform(this);\n    } else {\n      for (FieldType ft : schema.getFieldTypes().values()) {\n        if (null != ft.getPostingsFormat()) {\n          String msg = \"FieldType '\" + ft.getTypeName() + \"' is configured with a postings format, but the codec does not support it: \" + factory.getClass();\n          log.error(msg);\n          throw new SolrException(ErrorCode.SERVER_ERROR, msg);\n        }\n        if (null != ft.getDocValuesFormat()) {\n          String msg = \"FieldType '\" + ft.getTypeName() + \"' is configured with a docValues format, but the codec does not support it: \" + factory.getClass();\n          log.error(msg);\n          throw new SolrException(ErrorCode.SERVER_ERROR, msg);\n        }\n      }\n    }\n    return factory.getCodec();\n  }\n\n","sourceOld":"  private Codec initCodec(SolrConfig solrConfig, final IndexSchema schema) {\n    final PluginInfo info = solrConfig.getPluginInfo(CodecFactory.class.getName());\n    final CodecFactory factory;\n    if (info != null) {\n      factory = resourceLoader.newInstance(info.className, CodecFactory.class);\n      factory.init(info.initArgs);\n    } else {\n      factory = new CodecFactory() {\n        @Override\n        public Codec getCodec() {\n          return Codec.getDefault();\n        }\n      };\n    }\n    if (factory instanceof SolrCoreAware) {\n      // CodecFactory needs SolrCore before inform() is called on all registered\n      // SolrCoreAware listeners, at the end of the SolrCore constructor\n      ((SolrCoreAware)factory).inform(this);\n    } else {\n      for (FieldType ft : schema.getFieldTypes().values()) {\n        if (null != ft.getPostingsFormat()) {\n          String msg = \"FieldType '\" + ft.getTypeName() + \"' is configured with a postings format, but the codec does not support it: \" + factory.getClass();\n          log.error(msg);\n          throw new SolrException(ErrorCode.SERVER_ERROR, msg);\n        }\n        if (null != ft.getDocValuesFormat()) {\n          String msg = \"FieldType '\" + ft.getTypeName() + \"' is configured with a docValues format, but the codec does not support it: \" + factory.getClass();\n          log.error(msg);\n          throw new SolrException(ErrorCode.SERVER_ERROR, msg);\n        }\n      }\n    }\n    return factory.getCodec();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"96e0d4494fe54b31c7f0151f3a632124ab806351":["08970e5b8411182a29412c177eff67ec1110095b"],"08970e5b8411182a29412c177eff67ec1110095b":["73bb5a57dc75b54a39494f99986599cae7dff417"],"7b91922b55d15444d554721b352861d028eb8278":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"df151630bfbea5338a007b97bfd37e4ec94f873f":["96e0d4494fe54b31c7f0151f3a632124ab806351"],"aba371508186796cc6151d8223a5b4e16d02e26e":["a7ebf3a5f9e588d0bb564ac30d6dc32056ce9a41","6d061c6ac0252e445714563a37eb8aa9816ce369"],"95303ff3749680c743b9425f9cf99e6e4065e8a8":["6d061c6ac0252e445714563a37eb8aa9816ce369","73bb5a57dc75b54a39494f99986599cae7dff417"],"2668c99990e4c94a78bac005aa682b7c5986d23a":["df151630bfbea5338a007b97bfd37e4ec94f873f"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["a7ebf3a5f9e588d0bb564ac30d6dc32056ce9a41","6d061c6ac0252e445714563a37eb8aa9816ce369"],"a7ebf3a5f9e588d0bb564ac30d6dc32056ce9a41":["7b91922b55d15444d554721b352861d028eb8278"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6d061c6ac0252e445714563a37eb8aa9816ce369":["a7ebf3a5f9e588d0bb564ac30d6dc32056ce9a41"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2668c99990e4c94a78bac005aa682b7c5986d23a"],"73bb5a57dc75b54a39494f99986599cae7dff417":["6d061c6ac0252e445714563a37eb8aa9816ce369"]},"commit2Childs":{"96e0d4494fe54b31c7f0151f3a632124ab806351":["df151630bfbea5338a007b97bfd37e4ec94f873f"],"08970e5b8411182a29412c177eff67ec1110095b":["96e0d4494fe54b31c7f0151f3a632124ab806351"],"7b91922b55d15444d554721b352861d028eb8278":["a7ebf3a5f9e588d0bb564ac30d6dc32056ce9a41"],"df151630bfbea5338a007b97bfd37e4ec94f873f":["2668c99990e4c94a78bac005aa682b7c5986d23a"],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"95303ff3749680c743b9425f9cf99e6e4065e8a8":[],"2668c99990e4c94a78bac005aa682b7c5986d23a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7b91922b55d15444d554721b352861d028eb8278"],"a7ebf3a5f9e588d0bb564ac30d6dc32056ce9a41":["aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424","6d061c6ac0252e445714563a37eb8aa9816ce369"],"6d061c6ac0252e445714563a37eb8aa9816ce369":["aba371508186796cc6151d8223a5b4e16d02e26e","95303ff3749680c743b9425f9cf99e6e4065e8a8","fe33227f6805edab2036cbb80645cc4e2d1fa424","73bb5a57dc75b54a39494f99986599cae7dff417"],"73bb5a57dc75b54a39494f99986599cae7dff417":["08970e5b8411182a29412c177eff67ec1110095b","95303ff3749680c743b9425f9cf99e6e4065e8a8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aba371508186796cc6151d8223a5b4e16d02e26e","95303ff3749680c743b9425f9cf99e6e4065e8a8","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}