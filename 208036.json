{"path":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/ngram/NGramTokenFilter#ngram(Token).mjava","commits":[{"id":"dd745d580729e528151b58aeda87ef82f1b95c9b","date":1248369082,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/ngram/NGramTokenFilter#ngram(Token).mjava","pathOld":"contrib/analyzers/src/java/org/apache/lucene/analysis/ngram/NGramTokenFilter#ngram(Token).mjava","sourceNew":"  private void ngram(Token token) { \n    char[] termBuffer = token.termBuffer();\n    int termLength = token.termLength();\n    int gramSize = minGram;\n    while (gramSize <= maxGram) {\n      int pos = 0;                        // reset to beginning of string\n      while (pos+gramSize <= termLength) {     // while there is input\n        ngrams.add(token.clone(termBuffer, pos, gramSize, pos, pos+gramSize));\n        pos++;\n      }\n      gramSize++;                         // increase n-gram size\n    }\n  }\n\n","sourceOld":"  private void ngram(Token token) { \n    char[] termBuffer = token.termBuffer();\n    int termLength = token.termLength();\n    int gramSize = minGram;\n    while (gramSize <= maxGram) {\n      int pos = 0;                        // reset to beginning of string\n      while (pos+gramSize <= termLength) {     // while there is input\n        ngrams.add(token.clone(termBuffer, pos, gramSize, pos, pos+gramSize));\n        pos++;\n      }\n      gramSize++;                         // increase n-gram size\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9b5756469957918cac40a831acec9cf01c8c2bb3","date":1249167152,"type":4,"author":"Michael Busch","isMerge":false,"pathNew":"/dev/null","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/ngram/NGramTokenFilter#ngram(Token).mjava","sourceNew":null,"sourceOld":"  private void ngram(Token token) { \n    char[] termBuffer = token.termBuffer();\n    int termLength = token.termLength();\n    int gramSize = minGram;\n    while (gramSize <= maxGram) {\n      int pos = 0;                        // reset to beginning of string\n      while (pos+gramSize <= termLength) {     // while there is input\n        ngrams.add(token.clone(termBuffer, pos, gramSize, pos, pos+gramSize));\n        pos++;\n      }\n      gramSize++;                         // increase n-gram size\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"dd745d580729e528151b58aeda87ef82f1b95c9b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9b5756469957918cac40a831acec9cf01c8c2bb3":["dd745d580729e528151b58aeda87ef82f1b95c9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9b5756469957918cac40a831acec9cf01c8c2bb3"]},"commit2Childs":{"dd745d580729e528151b58aeda87ef82f1b95c9b":["9b5756469957918cac40a831acec9cf01c8c2bb3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["dd745d580729e528151b58aeda87ef82f1b95c9b"],"9b5756469957918cac40a831acec9cf01c8c2bb3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}