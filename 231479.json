{"path":"modules/facet/src/java/org/apache/lucene/util/encoding/IntEncoder#reInit(OutputStream).mjava","commits":[{"id":"89f15687f60bd49cd3d9de427e85c17fd9397d61","date":1309381327,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"modules/facet/src/java/org/apache/lucene/util/encoding/IntEncoder#reInit(OutputStream).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Reinitializes the encoder with the give {@link OutputStream}. For\n   * re-usability it can be changed without the need to reconstruct a new\n   * object.\n   * <p>\n   * <b>NOTE:</b> after calling {@link #close()}, one <u><i>must</i></u> call\n   * this method even if the output stream itself hasn't changed. An example\n   * case is that the output stream wraps a byte[], and the output stream itself\n   * is reset, but its instance hasn't changed. Some implementations of\n   * {@link IntEncoder} may write some metadata about themselves to the output\n   * stream, and therefore it is imperative that one calls this method before\n   * encoding any data.\n   */\n  public void reInit(OutputStream out) {\n    this.out = out;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/facet/src/java/org/apache/lucene/util/encoding/IntEncoder#reInit(OutputStream).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Reinitializes the encoder with the give {@link OutputStream}. For\n   * re-usability it can be changed without the need to reconstruct a new\n   * object.\n   * <p>\n   * <b>NOTE:</b> after calling {@link #close()}, one <u><i>must</i></u> call\n   * this method even if the output stream itself hasn't changed. An example\n   * case is that the output stream wraps a byte[], and the output stream itself\n   * is reset, but its instance hasn't changed. Some implementations of\n   * {@link IntEncoder} may write some metadata about themselves to the output\n   * stream, and therefore it is imperative that one calls this method before\n   * encoding any data.\n   */\n  public void reInit(OutputStream out) {\n    this.out = out;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/facet/src/java/org/apache/lucene/util/encoding/IntEncoder#reInit(OutputStream).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Reinitializes the encoder with the give {@link OutputStream}. For\n   * re-usability it can be changed without the need to reconstruct a new\n   * object.\n   * <p>\n   * <b>NOTE:</b> after calling {@link #close()}, one <u><i>must</i></u> call\n   * this method even if the output stream itself hasn't changed. An example\n   * case is that the output stream wraps a byte[], and the output stream itself\n   * is reset, but its instance hasn't changed. Some implementations of\n   * {@link IntEncoder} may write some metadata about themselves to the output\n   * stream, and therefore it is imperative that one calls this method before\n   * encoding any data.\n   */\n  public void reInit(OutputStream out) {\n    this.out = out;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/util/encoding/IntEncoder#reInit(OutputStream).mjava","pathOld":"modules/facet/src/java/org/apache/lucene/util/encoding/IntEncoder#reInit(OutputStream).mjava","sourceNew":"  /**\n   * Reinitializes the encoder with the give {@link OutputStream}. For\n   * re-usability it can be changed without the need to reconstruct a new\n   * object.\n   * <p>\n   * <b>NOTE:</b> after calling {@link #close()}, one <u><i>must</i></u> call\n   * this method even if the output stream itself hasn't changed. An example\n   * case is that the output stream wraps a byte[], and the output stream itself\n   * is reset, but its instance hasn't changed. Some implementations of\n   * {@link IntEncoder} may write some metadata about themselves to the output\n   * stream, and therefore it is imperative that one calls this method before\n   * encoding any data.\n   */\n  public void reInit(OutputStream out) {\n    this.out = out;\n  }\n\n","sourceOld":"  /**\n   * Reinitializes the encoder with the give {@link OutputStream}. For\n   * re-usability it can be changed without the need to reconstruct a new\n   * object.\n   * <p>\n   * <b>NOTE:</b> after calling {@link #close()}, one <u><i>must</i></u> call\n   * this method even if the output stream itself hasn't changed. An example\n   * case is that the output stream wraps a byte[], and the output stream itself\n   * is reset, but its instance hasn't changed. Some implementations of\n   * {@link IntEncoder} may write some metadata about themselves to the output\n   * stream, and therefore it is imperative that one calls this method before\n   * encoding any data.\n   */\n  public void reInit(OutputStream out) {\n    this.out = out;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["89f15687f60bd49cd3d9de427e85c17fd9397d61"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","89f15687f60bd49cd3d9de427e85c17fd9397d61"],"89f15687f60bd49cd3d9de427e85c17fd9397d61":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","89f15687f60bd49cd3d9de427e85c17fd9397d61"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d083e83f225b11e5fdd900e83d26ddb385b6955c","89f15687f60bd49cd3d9de427e85c17fd9397d61","817d8435e9135b756f08ce6710ab0baac51bdf88"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"89f15687f60bd49cd3d9de427e85c17fd9397d61":["b89678825b68eccaf09e6ab71675fc0b0af1e099","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}