{"path":"lucene/core/src/java/org/apache/lucene/util/packed/PackedInts#getMutable(int,int,float).mjava","commits":[{"id":"4a470c93b2b0f8f51241f52705fc110a01f27ad2","date":1337969379,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/PackedInts#getMutable(int,int,float).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Create a packed integer array with the given amount of values initialized\n   * to 0. the valueCount and the bitsPerValue cannot be changed after creation.\n   * All Mutables known by this factory are kept fully in RAM.\n   * \n   * Positive values of <code>acceptableOverheadRatio</code> will trade space\n   * for speed by selecting a faster but potentially less memory-efficient\n   * implementation. An <code>acceptableOverheadRatio</code> of\n   * {@link PackedInts#COMPACT} will make sure that the most memory-efficient\n   * implementation is selected whereas {@link PackedInts#FASTEST} will make sure\n   * that the fastest implementation is selected.\n   *\n   * @param valueCount   the number of elements\n   * @param bitsPerValue the number of bits available for any given value\n   * @param acceptableOverheadRatio an acceptable overhead\n   *        ratio per value\n   * @return a mutable packed integer array\n   * @throws java.io.IOException if the Mutable could not be created. With the\n   *         current implementations, this never happens, but the method\n   *         signature allows for future persistence-backed Mutables.\n   * @lucene.internal\n   */\n  public static Mutable getMutable(int valueCount,\n      int bitsPerValue, float acceptableOverheadRatio) {\n    acceptableOverheadRatio = Math.max(COMPACT, acceptableOverheadRatio);\n    acceptableOverheadRatio = Math.min(FASTEST, acceptableOverheadRatio);\n    float acceptableOverheadPerValue = acceptableOverheadRatio * bitsPerValue; // in bits\n\n    int maxBitsPerValue = bitsPerValue + (int) acceptableOverheadPerValue;\n\n    if (bitsPerValue <= 8 && maxBitsPerValue >= 8) {\n      return new Direct8(valueCount);\n    } else if (bitsPerValue <= 16 && maxBitsPerValue >= 16) {\n      return new Direct16(valueCount);\n    } else if (bitsPerValue <= 32 && maxBitsPerValue >= 32) {\n      return new Direct32(valueCount);\n    } else if (bitsPerValue <= 64 && maxBitsPerValue >= 64) {\n      return new Direct64(valueCount);\n    } else if (valueCount <= Packed8ThreeBlocks.MAX_SIZE && bitsPerValue <= 24 && maxBitsPerValue >= 24) {\n      return new Packed8ThreeBlocks(valueCount);\n    } else if (valueCount <= Packed16ThreeBlocks.MAX_SIZE && bitsPerValue <= 48 && maxBitsPerValue >= 48) {\n      return new Packed16ThreeBlocks(valueCount);\n    } else {\n      for (int bpv = bitsPerValue; bpv <= maxBitsPerValue; ++bpv) {\n        if (Packed64SingleBlock.isSupported(bpv)) {\n          float overhead = Packed64SingleBlock.overheadPerValue(bpv);\n          float acceptableOverhead = acceptableOverheadPerValue + bitsPerValue - bpv;\n          if (overhead <= acceptableOverhead) {\n            return Packed64SingleBlock.create(valueCount, bpv);\n          }\n        }\n      }\n      return new Packed64(valueCount, bitsPerValue);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bd9ddb59e9d33950773d186a8b726b5610ae3aad","date":1341258232,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/PackedInts#getMutable(int,int,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/PackedInts#getMutable(int,int,float).mjava","sourceNew":"  /**\n   * Create a packed integer array with the given amount of values initialized\n   * to 0. the valueCount and the bitsPerValue cannot be changed after creation.\n   * All Mutables known by this factory are kept fully in RAM.\n   * \n   * Positive values of <code>acceptableOverheadRatio</code> will trade space\n   * for speed by selecting a faster but potentially less memory-efficient\n   * implementation. An <code>acceptableOverheadRatio</code> of\n   * {@link PackedInts#COMPACT} will make sure that the most memory-efficient\n   * implementation is selected whereas {@link PackedInts#FASTEST} will make sure\n   * that the fastest implementation is selected.\n   *\n   * @param valueCount   the number of elements\n   * @param bitsPerValue the number of bits available for any given value\n   * @param acceptableOverheadRatio an acceptable overhead\n   *        ratio per value\n   * @return a mutable packed integer array\n   * @lucene.internal\n   */\n  public static Mutable getMutable(int valueCount,\n      int bitsPerValue, float acceptableOverheadRatio) {\n    acceptableOverheadRatio = Math.max(COMPACT, acceptableOverheadRatio);\n    acceptableOverheadRatio = Math.min(FASTEST, acceptableOverheadRatio);\n    float acceptableOverheadPerValue = acceptableOverheadRatio * bitsPerValue; // in bits\n\n    int maxBitsPerValue = bitsPerValue + (int) acceptableOverheadPerValue;\n\n    if (bitsPerValue <= 8 && maxBitsPerValue >= 8) {\n      return new Direct8(valueCount);\n    } else if (bitsPerValue <= 16 && maxBitsPerValue >= 16) {\n      return new Direct16(valueCount);\n    } else if (bitsPerValue <= 32 && maxBitsPerValue >= 32) {\n      return new Direct32(valueCount);\n    } else if (bitsPerValue <= 64 && maxBitsPerValue >= 64) {\n      return new Direct64(valueCount);\n    } else if (valueCount <= Packed8ThreeBlocks.MAX_SIZE && bitsPerValue <= 24 && maxBitsPerValue >= 24) {\n      return new Packed8ThreeBlocks(valueCount);\n    } else if (valueCount <= Packed16ThreeBlocks.MAX_SIZE && bitsPerValue <= 48 && maxBitsPerValue >= 48) {\n      return new Packed16ThreeBlocks(valueCount);\n    } else {\n      for (int bpv = bitsPerValue; bpv <= maxBitsPerValue; ++bpv) {\n        if (Packed64SingleBlock.isSupported(bpv)) {\n          float overhead = Packed64SingleBlock.overheadPerValue(bpv);\n          float acceptableOverhead = acceptableOverheadPerValue + bitsPerValue - bpv;\n          if (overhead <= acceptableOverhead) {\n            return Packed64SingleBlock.create(valueCount, bpv);\n          }\n        }\n      }\n      return new Packed64(valueCount, bitsPerValue);\n    }\n  }\n\n","sourceOld":"  /**\n   * Create a packed integer array with the given amount of values initialized\n   * to 0. the valueCount and the bitsPerValue cannot be changed after creation.\n   * All Mutables known by this factory are kept fully in RAM.\n   * \n   * Positive values of <code>acceptableOverheadRatio</code> will trade space\n   * for speed by selecting a faster but potentially less memory-efficient\n   * implementation. An <code>acceptableOverheadRatio</code> of\n   * {@link PackedInts#COMPACT} will make sure that the most memory-efficient\n   * implementation is selected whereas {@link PackedInts#FASTEST} will make sure\n   * that the fastest implementation is selected.\n   *\n   * @param valueCount   the number of elements\n   * @param bitsPerValue the number of bits available for any given value\n   * @param acceptableOverheadRatio an acceptable overhead\n   *        ratio per value\n   * @return a mutable packed integer array\n   * @throws java.io.IOException if the Mutable could not be created. With the\n   *         current implementations, this never happens, but the method\n   *         signature allows for future persistence-backed Mutables.\n   * @lucene.internal\n   */\n  public static Mutable getMutable(int valueCount,\n      int bitsPerValue, float acceptableOverheadRatio) {\n    acceptableOverheadRatio = Math.max(COMPACT, acceptableOverheadRatio);\n    acceptableOverheadRatio = Math.min(FASTEST, acceptableOverheadRatio);\n    float acceptableOverheadPerValue = acceptableOverheadRatio * bitsPerValue; // in bits\n\n    int maxBitsPerValue = bitsPerValue + (int) acceptableOverheadPerValue;\n\n    if (bitsPerValue <= 8 && maxBitsPerValue >= 8) {\n      return new Direct8(valueCount);\n    } else if (bitsPerValue <= 16 && maxBitsPerValue >= 16) {\n      return new Direct16(valueCount);\n    } else if (bitsPerValue <= 32 && maxBitsPerValue >= 32) {\n      return new Direct32(valueCount);\n    } else if (bitsPerValue <= 64 && maxBitsPerValue >= 64) {\n      return new Direct64(valueCount);\n    } else if (valueCount <= Packed8ThreeBlocks.MAX_SIZE && bitsPerValue <= 24 && maxBitsPerValue >= 24) {\n      return new Packed8ThreeBlocks(valueCount);\n    } else if (valueCount <= Packed16ThreeBlocks.MAX_SIZE && bitsPerValue <= 48 && maxBitsPerValue >= 48) {\n      return new Packed16ThreeBlocks(valueCount);\n    } else {\n      for (int bpv = bitsPerValue; bpv <= maxBitsPerValue; ++bpv) {\n        if (Packed64SingleBlock.isSupported(bpv)) {\n          float overhead = Packed64SingleBlock.overheadPerValue(bpv);\n          float acceptableOverhead = acceptableOverheadPerValue + bitsPerValue - bpv;\n          if (overhead <= acceptableOverhead) {\n            return Packed64SingleBlock.create(valueCount, bpv);\n          }\n        }\n      }\n      return new Packed64(valueCount, bitsPerValue);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55110eb60c5105294fc2ae7912d82b750865aa58","date":1341389822,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/PackedInts#getMutable(int,int,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/PackedInts#getMutable(int,int,float).mjava","sourceNew":"  /**\n   * Create a packed integer array with the given amount of values initialized\n   * to 0. the valueCount and the bitsPerValue cannot be changed after creation.\n   * All Mutables known by this factory are kept fully in RAM.\n   * </p><p>\n   * Positive values of <code>acceptableOverheadRatio</code> will trade space\n   * for speed by selecting a faster but potentially less memory-efficient\n   * implementation. An <code>acceptableOverheadRatio</code> of\n   * {@link PackedInts#COMPACT} will make sure that the most memory-efficient\n   * implementation is selected whereas {@link PackedInts#FASTEST} will make sure\n   * that the fastest implementation is selected.\n   *\n   * @param valueCount   the number of elements\n   * @param bitsPerValue the number of bits available for any given value\n   * @param acceptableOverheadRatio an acceptable overhead\n   *        ratio per value\n   * @return a mutable packed integer array\n   * @lucene.internal\n   */\n  public static Mutable getMutable(int valueCount,\n      int bitsPerValue, float acceptableOverheadRatio) {\n    assert valueCount >= 0;\n\n    final FormatAndBits formatAndBits = fastestFormatAndBits(valueCount, bitsPerValue, acceptableOverheadRatio);\n    switch (formatAndBits.format) {\n      case PACKED_SINGLE_BLOCK:\n        return Packed64SingleBlock.create(valueCount, formatAndBits.bitsPerValue);\n      case PACKED:\n        switch (formatAndBits.bitsPerValue) {\n          case 8:\n            return new Direct8(valueCount);\n          case 16:\n            return new Direct16(valueCount);\n          case 32:\n            return new Direct32(valueCount);\n          case 64:\n            return new Direct64(valueCount);\n          case 24:\n            if (valueCount <= Packed8ThreeBlocks.MAX_SIZE) {\n              return new Packed8ThreeBlocks(valueCount);\n            }\n            break;\n          case 48:\n            if (valueCount <= Packed16ThreeBlocks.MAX_SIZE) {\n              return new Packed16ThreeBlocks(valueCount);\n            }\n            break;\n        }\n        return new Packed64(valueCount, formatAndBits.bitsPerValue);\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","sourceOld":"  /**\n   * Create a packed integer array with the given amount of values initialized\n   * to 0. the valueCount and the bitsPerValue cannot be changed after creation.\n   * All Mutables known by this factory are kept fully in RAM.\n   * \n   * Positive values of <code>acceptableOverheadRatio</code> will trade space\n   * for speed by selecting a faster but potentially less memory-efficient\n   * implementation. An <code>acceptableOverheadRatio</code> of\n   * {@link PackedInts#COMPACT} will make sure that the most memory-efficient\n   * implementation is selected whereas {@link PackedInts#FASTEST} will make sure\n   * that the fastest implementation is selected.\n   *\n   * @param valueCount   the number of elements\n   * @param bitsPerValue the number of bits available for any given value\n   * @param acceptableOverheadRatio an acceptable overhead\n   *        ratio per value\n   * @return a mutable packed integer array\n   * @lucene.internal\n   */\n  public static Mutable getMutable(int valueCount,\n      int bitsPerValue, float acceptableOverheadRatio) {\n    acceptableOverheadRatio = Math.max(COMPACT, acceptableOverheadRatio);\n    acceptableOverheadRatio = Math.min(FASTEST, acceptableOverheadRatio);\n    float acceptableOverheadPerValue = acceptableOverheadRatio * bitsPerValue; // in bits\n\n    int maxBitsPerValue = bitsPerValue + (int) acceptableOverheadPerValue;\n\n    if (bitsPerValue <= 8 && maxBitsPerValue >= 8) {\n      return new Direct8(valueCount);\n    } else if (bitsPerValue <= 16 && maxBitsPerValue >= 16) {\n      return new Direct16(valueCount);\n    } else if (bitsPerValue <= 32 && maxBitsPerValue >= 32) {\n      return new Direct32(valueCount);\n    } else if (bitsPerValue <= 64 && maxBitsPerValue >= 64) {\n      return new Direct64(valueCount);\n    } else if (valueCount <= Packed8ThreeBlocks.MAX_SIZE && bitsPerValue <= 24 && maxBitsPerValue >= 24) {\n      return new Packed8ThreeBlocks(valueCount);\n    } else if (valueCount <= Packed16ThreeBlocks.MAX_SIZE && bitsPerValue <= 48 && maxBitsPerValue >= 48) {\n      return new Packed16ThreeBlocks(valueCount);\n    } else {\n      for (int bpv = bitsPerValue; bpv <= maxBitsPerValue; ++bpv) {\n        if (Packed64SingleBlock.isSupported(bpv)) {\n          float overhead = Packed64SingleBlock.overheadPerValue(bpv);\n          float acceptableOverhead = acceptableOverheadPerValue + bitsPerValue - bpv;\n          if (overhead <= acceptableOverhead) {\n            return Packed64SingleBlock.create(valueCount, bpv);\n          }\n        }\n      }\n      return new Packed64(valueCount, bitsPerValue);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/PackedInts#getMutable(int,int,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/PackedInts#getMutable(int,int,float).mjava","sourceNew":"  /**\n   * Create a packed integer array with the given amount of values initialized\n   * to 0. the valueCount and the bitsPerValue cannot be changed after creation.\n   * All Mutables known by this factory are kept fully in RAM.\n   * </p><p>\n   * Positive values of <code>acceptableOverheadRatio</code> will trade space\n   * for speed by selecting a faster but potentially less memory-efficient\n   * implementation. An <code>acceptableOverheadRatio</code> of\n   * {@link PackedInts#COMPACT} will make sure that the most memory-efficient\n   * implementation is selected whereas {@link PackedInts#FASTEST} will make sure\n   * that the fastest implementation is selected.\n   *\n   * @param valueCount   the number of elements\n   * @param bitsPerValue the number of bits available for any given value\n   * @param acceptableOverheadRatio an acceptable overhead\n   *        ratio per value\n   * @return a mutable packed integer array\n   * @lucene.internal\n   */\n  public static Mutable getMutable(int valueCount,\n      int bitsPerValue, float acceptableOverheadRatio) {\n    assert valueCount >= 0;\n\n    final FormatAndBits formatAndBits = fastestFormatAndBits(valueCount, bitsPerValue, acceptableOverheadRatio);\n    switch (formatAndBits.format) {\n      case PACKED_SINGLE_BLOCK:\n        return Packed64SingleBlock.create(valueCount, formatAndBits.bitsPerValue);\n      case PACKED:\n        switch (formatAndBits.bitsPerValue) {\n          case 8:\n            return new Direct8(valueCount);\n          case 16:\n            return new Direct16(valueCount);\n          case 32:\n            return new Direct32(valueCount);\n          case 64:\n            return new Direct64(valueCount);\n          case 24:\n            if (valueCount <= Packed8ThreeBlocks.MAX_SIZE) {\n              return new Packed8ThreeBlocks(valueCount);\n            }\n            break;\n          case 48:\n            if (valueCount <= Packed16ThreeBlocks.MAX_SIZE) {\n              return new Packed16ThreeBlocks(valueCount);\n            }\n            break;\n        }\n        return new Packed64(valueCount, formatAndBits.bitsPerValue);\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","sourceOld":"  /**\n   * Create a packed integer array with the given amount of values initialized\n   * to 0. the valueCount and the bitsPerValue cannot be changed after creation.\n   * All Mutables known by this factory are kept fully in RAM.\n   * \n   * Positive values of <code>acceptableOverheadRatio</code> will trade space\n   * for speed by selecting a faster but potentially less memory-efficient\n   * implementation. An <code>acceptableOverheadRatio</code> of\n   * {@link PackedInts#COMPACT} will make sure that the most memory-efficient\n   * implementation is selected whereas {@link PackedInts#FASTEST} will make sure\n   * that the fastest implementation is selected.\n   *\n   * @param valueCount   the number of elements\n   * @param bitsPerValue the number of bits available for any given value\n   * @param acceptableOverheadRatio an acceptable overhead\n   *        ratio per value\n   * @return a mutable packed integer array\n   * @throws java.io.IOException if the Mutable could not be created. With the\n   *         current implementations, this never happens, but the method\n   *         signature allows for future persistence-backed Mutables.\n   * @lucene.internal\n   */\n  public static Mutable getMutable(int valueCount,\n      int bitsPerValue, float acceptableOverheadRatio) {\n    acceptableOverheadRatio = Math.max(COMPACT, acceptableOverheadRatio);\n    acceptableOverheadRatio = Math.min(FASTEST, acceptableOverheadRatio);\n    float acceptableOverheadPerValue = acceptableOverheadRatio * bitsPerValue; // in bits\n\n    int maxBitsPerValue = bitsPerValue + (int) acceptableOverheadPerValue;\n\n    if (bitsPerValue <= 8 && maxBitsPerValue >= 8) {\n      return new Direct8(valueCount);\n    } else if (bitsPerValue <= 16 && maxBitsPerValue >= 16) {\n      return new Direct16(valueCount);\n    } else if (bitsPerValue <= 32 && maxBitsPerValue >= 32) {\n      return new Direct32(valueCount);\n    } else if (bitsPerValue <= 64 && maxBitsPerValue >= 64) {\n      return new Direct64(valueCount);\n    } else if (valueCount <= Packed8ThreeBlocks.MAX_SIZE && bitsPerValue <= 24 && maxBitsPerValue >= 24) {\n      return new Packed8ThreeBlocks(valueCount);\n    } else if (valueCount <= Packed16ThreeBlocks.MAX_SIZE && bitsPerValue <= 48 && maxBitsPerValue >= 48) {\n      return new Packed16ThreeBlocks(valueCount);\n    } else {\n      for (int bpv = bitsPerValue; bpv <= maxBitsPerValue; ++bpv) {\n        if (Packed64SingleBlock.isSupported(bpv)) {\n          float overhead = Packed64SingleBlock.overheadPerValue(bpv);\n          float acceptableOverhead = acceptableOverheadPerValue + bitsPerValue - bpv;\n          if (overhead <= acceptableOverhead) {\n            return Packed64SingleBlock.create(valueCount, bpv);\n          }\n        }\n      }\n      return new Packed64(valueCount, bitsPerValue);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c8ee441d3e61e4669e10566a8d028a41333642b7","date":1371579547,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/PackedInts#getMutable(int,int,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/PackedInts#getMutable(int,int,float).mjava","sourceNew":"  /**\n   * Create a packed integer array with the given amount of values initialized\n   * to 0. the valueCount and the bitsPerValue cannot be changed after creation.\n   * All Mutables known by this factory are kept fully in RAM.\n   * </p><p>\n   * Positive values of <code>acceptableOverheadRatio</code> will trade space\n   * for speed by selecting a faster but potentially less memory-efficient\n   * implementation. An <code>acceptableOverheadRatio</code> of\n   * {@link PackedInts#COMPACT} will make sure that the most memory-efficient\n   * implementation is selected whereas {@link PackedInts#FASTEST} will make sure\n   * that the fastest implementation is selected.\n   *\n   * @param valueCount   the number of elements\n   * @param bitsPerValue the number of bits available for any given value\n   * @param acceptableOverheadRatio an acceptable overhead\n   *        ratio per value\n   * @return a mutable packed integer array\n   * @lucene.internal\n   */\n  public static Mutable getMutable(int valueCount,\n      int bitsPerValue, float acceptableOverheadRatio) {\n    final FormatAndBits formatAndBits = fastestFormatAndBits(valueCount, bitsPerValue, acceptableOverheadRatio);\n    return getMutable(valueCount, formatAndBits.bitsPerValue, formatAndBits.format);\n  }\n\n","sourceOld":"  /**\n   * Create a packed integer array with the given amount of values initialized\n   * to 0. the valueCount and the bitsPerValue cannot be changed after creation.\n   * All Mutables known by this factory are kept fully in RAM.\n   * </p><p>\n   * Positive values of <code>acceptableOverheadRatio</code> will trade space\n   * for speed by selecting a faster but potentially less memory-efficient\n   * implementation. An <code>acceptableOverheadRatio</code> of\n   * {@link PackedInts#COMPACT} will make sure that the most memory-efficient\n   * implementation is selected whereas {@link PackedInts#FASTEST} will make sure\n   * that the fastest implementation is selected.\n   *\n   * @param valueCount   the number of elements\n   * @param bitsPerValue the number of bits available for any given value\n   * @param acceptableOverheadRatio an acceptable overhead\n   *        ratio per value\n   * @return a mutable packed integer array\n   * @lucene.internal\n   */\n  public static Mutable getMutable(int valueCount,\n      int bitsPerValue, float acceptableOverheadRatio) {\n    assert valueCount >= 0;\n\n    final FormatAndBits formatAndBits = fastestFormatAndBits(valueCount, bitsPerValue, acceptableOverheadRatio);\n    switch (formatAndBits.format) {\n      case PACKED_SINGLE_BLOCK:\n        return Packed64SingleBlock.create(valueCount, formatAndBits.bitsPerValue);\n      case PACKED:\n        switch (formatAndBits.bitsPerValue) {\n          case 8:\n            return new Direct8(valueCount);\n          case 16:\n            return new Direct16(valueCount);\n          case 32:\n            return new Direct32(valueCount);\n          case 64:\n            return new Direct64(valueCount);\n          case 24:\n            if (valueCount <= Packed8ThreeBlocks.MAX_SIZE) {\n              return new Packed8ThreeBlocks(valueCount);\n            }\n            break;\n          case 48:\n            if (valueCount <= Packed16ThreeBlocks.MAX_SIZE) {\n              return new Packed16ThreeBlocks(valueCount);\n            }\n            break;\n        }\n        return new Packed64(valueCount, formatAndBits.bitsPerValue);\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/PackedInts#getMutable(int,int,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/PackedInts#getMutable(int,int,float).mjava","sourceNew":"  /**\n   * Create a packed integer array with the given amount of values initialized\n   * to 0. the valueCount and the bitsPerValue cannot be changed after creation.\n   * All Mutables known by this factory are kept fully in RAM.\n   * </p><p>\n   * Positive values of <code>acceptableOverheadRatio</code> will trade space\n   * for speed by selecting a faster but potentially less memory-efficient\n   * implementation. An <code>acceptableOverheadRatio</code> of\n   * {@link PackedInts#COMPACT} will make sure that the most memory-efficient\n   * implementation is selected whereas {@link PackedInts#FASTEST} will make sure\n   * that the fastest implementation is selected.\n   *\n   * @param valueCount   the number of elements\n   * @param bitsPerValue the number of bits available for any given value\n   * @param acceptableOverheadRatio an acceptable overhead\n   *        ratio per value\n   * @return a mutable packed integer array\n   * @lucene.internal\n   */\n  public static Mutable getMutable(int valueCount,\n      int bitsPerValue, float acceptableOverheadRatio) {\n    final FormatAndBits formatAndBits = fastestFormatAndBits(valueCount, bitsPerValue, acceptableOverheadRatio);\n    return getMutable(valueCount, formatAndBits.bitsPerValue, formatAndBits.format);\n  }\n\n","sourceOld":"  /**\n   * Create a packed integer array with the given amount of values initialized\n   * to 0. the valueCount and the bitsPerValue cannot be changed after creation.\n   * All Mutables known by this factory are kept fully in RAM.\n   * </p><p>\n   * Positive values of <code>acceptableOverheadRatio</code> will trade space\n   * for speed by selecting a faster but potentially less memory-efficient\n   * implementation. An <code>acceptableOverheadRatio</code> of\n   * {@link PackedInts#COMPACT} will make sure that the most memory-efficient\n   * implementation is selected whereas {@link PackedInts#FASTEST} will make sure\n   * that the fastest implementation is selected.\n   *\n   * @param valueCount   the number of elements\n   * @param bitsPerValue the number of bits available for any given value\n   * @param acceptableOverheadRatio an acceptable overhead\n   *        ratio per value\n   * @return a mutable packed integer array\n   * @lucene.internal\n   */\n  public static Mutable getMutable(int valueCount,\n      int bitsPerValue, float acceptableOverheadRatio) {\n    assert valueCount >= 0;\n\n    final FormatAndBits formatAndBits = fastestFormatAndBits(valueCount, bitsPerValue, acceptableOverheadRatio);\n    switch (formatAndBits.format) {\n      case PACKED_SINGLE_BLOCK:\n        return Packed64SingleBlock.create(valueCount, formatAndBits.bitsPerValue);\n      case PACKED:\n        switch (formatAndBits.bitsPerValue) {\n          case 8:\n            return new Direct8(valueCount);\n          case 16:\n            return new Direct16(valueCount);\n          case 32:\n            return new Direct32(valueCount);\n          case 64:\n            return new Direct64(valueCount);\n          case 24:\n            if (valueCount <= Packed8ThreeBlocks.MAX_SIZE) {\n              return new Packed8ThreeBlocks(valueCount);\n            }\n            break;\n          case 48:\n            if (valueCount <= Packed16ThreeBlocks.MAX_SIZE) {\n              return new Packed16ThreeBlocks(valueCount);\n            }\n            break;\n        }\n        return new Packed64(valueCount, formatAndBits.bitsPerValue);\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"14600834a1fbc7c12faf344466e00cca8cc67de4","date":1423303834,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/PackedInts#getMutable(int,int,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/PackedInts#getMutable(int,int,float).mjava","sourceNew":"  /**\n   * Create a packed integer array with the given amount of values initialized\n   * to 0. the valueCount and the bitsPerValue cannot be changed after creation.\n   * All Mutables known by this factory are kept fully in RAM.\n   * <p>\n   * Positive values of <code>acceptableOverheadRatio</code> will trade space\n   * for speed by selecting a faster but potentially less memory-efficient\n   * implementation. An <code>acceptableOverheadRatio</code> of\n   * {@link PackedInts#COMPACT} will make sure that the most memory-efficient\n   * implementation is selected whereas {@link PackedInts#FASTEST} will make sure\n   * that the fastest implementation is selected.\n   *\n   * @param valueCount   the number of elements\n   * @param bitsPerValue the number of bits available for any given value\n   * @param acceptableOverheadRatio an acceptable overhead\n   *        ratio per value\n   * @return a mutable packed integer array\n   * @lucene.internal\n   */\n  public static Mutable getMutable(int valueCount,\n      int bitsPerValue, float acceptableOverheadRatio) {\n    final FormatAndBits formatAndBits = fastestFormatAndBits(valueCount, bitsPerValue, acceptableOverheadRatio);\n    return getMutable(valueCount, formatAndBits.bitsPerValue, formatAndBits.format);\n  }\n\n","sourceOld":"  /**\n   * Create a packed integer array with the given amount of values initialized\n   * to 0. the valueCount and the bitsPerValue cannot be changed after creation.\n   * All Mutables known by this factory are kept fully in RAM.\n   * </p><p>\n   * Positive values of <code>acceptableOverheadRatio</code> will trade space\n   * for speed by selecting a faster but potentially less memory-efficient\n   * implementation. An <code>acceptableOverheadRatio</code> of\n   * {@link PackedInts#COMPACT} will make sure that the most memory-efficient\n   * implementation is selected whereas {@link PackedInts#FASTEST} will make sure\n   * that the fastest implementation is selected.\n   *\n   * @param valueCount   the number of elements\n   * @param bitsPerValue the number of bits available for any given value\n   * @param acceptableOverheadRatio an acceptable overhead\n   *        ratio per value\n   * @return a mutable packed integer array\n   * @lucene.internal\n   */\n  public static Mutable getMutable(int valueCount,\n      int bitsPerValue, float acceptableOverheadRatio) {\n    final FormatAndBits formatAndBits = fastestFormatAndBits(valueCount, bitsPerValue, acceptableOverheadRatio);\n    return getMutable(valueCount, formatAndBits.bitsPerValue, formatAndBits.format);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bd9ddb59e9d33950773d186a8b726b5610ae3aad":["4a470c93b2b0f8f51241f52705fc110a01f27ad2"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["55110eb60c5105294fc2ae7912d82b750865aa58","c8ee441d3e61e4669e10566a8d028a41333642b7"],"55110eb60c5105294fc2ae7912d82b750865aa58":["bd9ddb59e9d33950773d186a8b726b5610ae3aad"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["4a470c93b2b0f8f51241f52705fc110a01f27ad2","55110eb60c5105294fc2ae7912d82b750865aa58"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"14600834a1fbc7c12faf344466e00cca8cc67de4":["c8ee441d3e61e4669e10566a8d028a41333642b7"],"c8ee441d3e61e4669e10566a8d028a41333642b7":["55110eb60c5105294fc2ae7912d82b750865aa58"],"4a470c93b2b0f8f51241f52705fc110a01f27ad2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["14600834a1fbc7c12faf344466e00cca8cc67de4"]},"commit2Childs":{"bd9ddb59e9d33950773d186a8b726b5610ae3aad":["55110eb60c5105294fc2ae7912d82b750865aa58"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"55110eb60c5105294fc2ae7912d82b750865aa58":["37a0f60745e53927c4c876cfe5b5a58170f0646c","fe33227f6805edab2036cbb80645cc4e2d1fa424","c8ee441d3e61e4669e10566a8d028a41333642b7"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4a470c93b2b0f8f51241f52705fc110a01f27ad2"],"c8ee441d3e61e4669e10566a8d028a41333642b7":["37a0f60745e53927c4c876cfe5b5a58170f0646c","14600834a1fbc7c12faf344466e00cca8cc67de4"],"14600834a1fbc7c12faf344466e00cca8cc67de4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4a470c93b2b0f8f51241f52705fc110a01f27ad2":["bd9ddb59e9d33950773d186a8b726b5610ae3aad","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}