{"path":"lucene/src/java/org/apache/lucene/index/IndexFileDeleter#IndexFileDeleter(Directory,IndexDeletionPolicy,SegmentInfos,InfoStream,IndexWriter).mjava","commits":[{"id":"06584e6e98d592b34e1329b384182f368d2025e8","date":1320850353,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexFileDeleter#IndexFileDeleter(Directory,IndexDeletionPolicy,SegmentInfos,InfoStream,IndexWriter).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexFileDeleter#IndexFileDeleter(Directory,IndexDeletionPolicy,SegmentInfos,PrintStream,IndexWriter).mjava","sourceNew":"  /**\n   * Initialize the deleter: find all previous commits in\n   * the Directory, incref the files they reference, call\n   * the policy to let it delete commits.  This will remove\n   * any files not referenced by any of the commits.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public IndexFileDeleter(Directory directory, IndexDeletionPolicy policy, SegmentInfos segmentInfos,\n                          InfoStream infoStream, IndexWriter writer) throws CorruptIndexException, IOException {\n    this.infoStream = infoStream;\n    this.writer = writer;\n\n    final String currentSegmentsFile = segmentInfos.getCurrentSegmentFileName();\n\n    if (infoStream != null) {\n      infoStream.message(\"IFD\", \"init: current segments file is \\\"\" + currentSegmentsFile + \"\\\"; deletionPolicy=\" + policy);\n    }\n\n    this.policy = policy;\n    this.directory = directory;\n\n    // First pass: walk the files and initialize our ref\n    // counts:\n    long currentGen = segmentInfos.getGeneration();\n\n    CommitPoint currentCommitPoint = null;\n    String[] files = null;\n    try {\n      files = directory.listAll();\n    } catch (NoSuchDirectoryException e) {\n      // it means the directory is empty, so ignore it.\n      files = new String[0];\n    }\n\n    for (String fileName : files) {\n\n      if ((IndexFileNameFilter.INSTANCE.accept(null, fileName)) && !fileName.endsWith(\"write.lock\") && !fileName.equals(IndexFileNames.SEGMENTS_GEN)) {\n\n        // Add this file to refCounts with initial count 0:\n        getRefCount(fileName);\n\n        if (fileName.startsWith(IndexFileNames.SEGMENTS)) {\n\n          // This is a commit (segments or segments_N), and\n          // it's valid (<= the max gen).  Load it, then\n          // incref all files it refers to:\n          if (infoStream != null) {\n            infoStream.message(\"IFD\", \"init: load commit \\\"\" + fileName + \"\\\"\");\n          }\n          SegmentInfos sis = new SegmentInfos();\n          try {\n            sis.read(directory, fileName);\n          } catch (FileNotFoundException e) {\n            // LUCENE-948: on NFS (and maybe others), if\n            // you have writers switching back and forth\n            // between machines, it's very likely that the\n            // dir listing will be stale and will claim a\n            // file segments_X exists when in fact it\n            // doesn't.  So, we catch this and handle it\n            // as if the file does not exist\n            if (infoStream != null) {\n              infoStream.message(\"IFD\", \"init: hit FileNotFoundException when loading commit \\\"\" + fileName + \"\\\"; skipping this commit point\");\n            }\n            sis = null;\n          } catch (IOException e) {\n            if (SegmentInfos.generationFromSegmentsFileName(fileName) <= currentGen) {\n              throw e;\n            } else {\n              // Most likely we are opening an index that\n              // has an aborted \"future\" commit, so suppress\n              // exc in this case\n              sis = null;\n            }\n          }\n          if (sis != null) {\n            final SegmentInfos infos = sis;\n            for (SegmentInfo segmentInfo : infos) {\n              try {\n                /*\n                 * Force FI to load for each segment since we could see a\n                 * segments file and load successfully above if the files are\n                 * still referenced when they are deleted and the os doesn't let\n                 * you delete them. Yet its likely that fnm files are removed\n                 * while seg file is still around Since LUCENE-2984 we need FI\n                 * to find out if a seg has vectors and prox so we need those\n                 * files to be opened for a commit point.\n                 */\n                segmentInfo.getFieldInfos();\n              } catch (FileNotFoundException e) {\n                refresh(segmentInfo.name);\n                sis = null;\n                if (infoStream != null) {\n                  infoStream.message(\"IFD\", \"init: hit FileNotFoundException when loading commit \\\"\" + fileName + \"\\\"; skipping this commit point\");\n                }\n              }\n            }\n           \n          }\n          if (sis != null) {\n            final CommitPoint commitPoint = new CommitPoint(commitsToDelete, directory, sis);\n            if (sis.getGeneration() == segmentInfos.getGeneration()) {\n              currentCommitPoint = commitPoint;\n            }\n            commits.add(commitPoint);\n            incRef(sis, true);\n\n            if (lastSegmentInfos == null || sis.getGeneration() > lastSegmentInfos.getGeneration()) {\n              lastSegmentInfos = sis;\n            }\n          }\n        }\n      }\n    }\n\n    if (currentCommitPoint == null && currentSegmentsFile != null) {\n      // We did not in fact see the segments_N file\n      // corresponding to the segmentInfos that was passed\n      // in.  Yet, it must exist, because our caller holds\n      // the write lock.  This can happen when the directory\n      // listing was stale (eg when index accessed via NFS\n      // client with stale directory listing cache).  So we\n      // try now to explicitly open this commit point:\n      SegmentInfos sis = new SegmentInfos();\n      try {\n        sis.read(directory, currentSegmentsFile);\n      } catch (IOException e) {\n        throw new CorruptIndexException(\"failed to locate current segments_N file\");\n      }\n      if (infoStream != null) {\n        infoStream.message(\"IFD\", \"forced open of current segments file \" + segmentInfos.getCurrentSegmentFileName());\n      }\n      currentCommitPoint = new CommitPoint(commitsToDelete, directory, sis);\n      commits.add(currentCommitPoint);\n      incRef(sis, true);\n    }\n\n    // We keep commits list in sorted order (oldest to newest):\n    CollectionUtil.mergeSort(commits);\n\n    // Now delete anything with ref count at 0.  These are\n    // presumably abandoned files eg due to crash of\n    // IndexWriter.\n    for(Map.Entry<String, RefCount> entry : refCounts.entrySet() ) {\n      RefCount rc = entry.getValue();\n      final String fileName = entry.getKey();\n      if (0 == rc.count) {\n        if (infoStream != null) {\n          infoStream.message(\"IFD\", \"init: removing unreferenced file \\\"\" + fileName + \"\\\"\");\n        }\n        deleteFile(fileName);\n      }\n    }\n\n    // Finally, give policy a chance to remove things on\n    // startup:\n    if (currentSegmentsFile != null) {\n      policy.onInit(commits);\n    }\n\n    // Always protect the incoming segmentInfos since\n    // sometime it may not be the most recent commit\n    checkpoint(segmentInfos, false);\n\n    startingCommitDeleted = currentCommitPoint == null ? false : currentCommitPoint.isDeleted();\n\n    deleteCommits();\n  }\n\n","sourceOld":"  /**\n   * Initialize the deleter: find all previous commits in\n   * the Directory, incref the files they reference, call\n   * the policy to let it delete commits.  This will remove\n   * any files not referenced by any of the commits.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public IndexFileDeleter(Directory directory, IndexDeletionPolicy policy, SegmentInfos segmentInfos,\n                          PrintStream infoStream, IndexWriter writer) throws CorruptIndexException, IOException {\n    this.infoStream = infoStream;\n    this.writer = writer;\n\n    final String currentSegmentsFile = segmentInfos.getCurrentSegmentFileName();\n\n    if (infoStream != null) {\n      message(\"init: current segments file is \\\"\" + currentSegmentsFile + \"\\\"; deletionPolicy=\" + policy);\n    }\n\n    this.policy = policy;\n    this.directory = directory;\n\n    // First pass: walk the files and initialize our ref\n    // counts:\n    long currentGen = segmentInfos.getGeneration();\n\n    CommitPoint currentCommitPoint = null;\n    String[] files = null;\n    try {\n      files = directory.listAll();\n    } catch (NoSuchDirectoryException e) {\n      // it means the directory is empty, so ignore it.\n      files = new String[0];\n    }\n\n    for (String fileName : files) {\n\n      if ((IndexFileNameFilter.INSTANCE.accept(null, fileName)) && !fileName.endsWith(\"write.lock\") && !fileName.equals(IndexFileNames.SEGMENTS_GEN)) {\n\n        // Add this file to refCounts with initial count 0:\n        getRefCount(fileName);\n\n        if (fileName.startsWith(IndexFileNames.SEGMENTS)) {\n\n          // This is a commit (segments or segments_N), and\n          // it's valid (<= the max gen).  Load it, then\n          // incref all files it refers to:\n          if (infoStream != null) {\n            message(\"init: load commit \\\"\" + fileName + \"\\\"\");\n          }\n          SegmentInfos sis = new SegmentInfos();\n          try {\n            sis.read(directory, fileName);\n          } catch (FileNotFoundException e) {\n            // LUCENE-948: on NFS (and maybe others), if\n            // you have writers switching back and forth\n            // between machines, it's very likely that the\n            // dir listing will be stale and will claim a\n            // file segments_X exists when in fact it\n            // doesn't.  So, we catch this and handle it\n            // as if the file does not exist\n            if (infoStream != null) {\n              message(\"init: hit FileNotFoundException when loading commit \\\"\" + fileName + \"\\\"; skipping this commit point\");\n            }\n            sis = null;\n          } catch (IOException e) {\n            if (SegmentInfos.generationFromSegmentsFileName(fileName) <= currentGen) {\n              throw e;\n            } else {\n              // Most likely we are opening an index that\n              // has an aborted \"future\" commit, so suppress\n              // exc in this case\n              sis = null;\n            }\n          }\n          if (sis != null) {\n            final SegmentInfos infos = sis;\n            for (SegmentInfo segmentInfo : infos) {\n              try {\n                /*\n                 * Force FI to load for each segment since we could see a\n                 * segments file and load successfully above if the files are\n                 * still referenced when they are deleted and the os doesn't let\n                 * you delete them. Yet its likely that fnm files are removed\n                 * while seg file is still around Since LUCENE-2984 we need FI\n                 * to find out if a seg has vectors and prox so we need those\n                 * files to be opened for a commit point.\n                 */\n                segmentInfo.getFieldInfos();\n              } catch (FileNotFoundException e) {\n                refresh(segmentInfo.name);\n                sis = null;\n                if (infoStream != null) {\n                  message(\"init: hit FileNotFoundException when loading commit \\\"\" + fileName + \"\\\"; skipping this commit point\");\n                }\n              }\n            }\n           \n          }\n          if (sis != null) {\n            final CommitPoint commitPoint = new CommitPoint(commitsToDelete, directory, sis);\n            if (sis.getGeneration() == segmentInfos.getGeneration()) {\n              currentCommitPoint = commitPoint;\n            }\n            commits.add(commitPoint);\n            incRef(sis, true);\n\n            if (lastSegmentInfos == null || sis.getGeneration() > lastSegmentInfos.getGeneration()) {\n              lastSegmentInfos = sis;\n            }\n          }\n        }\n      }\n    }\n\n    if (currentCommitPoint == null && currentSegmentsFile != null) {\n      // We did not in fact see the segments_N file\n      // corresponding to the segmentInfos that was passed\n      // in.  Yet, it must exist, because our caller holds\n      // the write lock.  This can happen when the directory\n      // listing was stale (eg when index accessed via NFS\n      // client with stale directory listing cache).  So we\n      // try now to explicitly open this commit point:\n      SegmentInfos sis = new SegmentInfos();\n      try {\n        sis.read(directory, currentSegmentsFile);\n      } catch (IOException e) {\n        throw new CorruptIndexException(\"failed to locate current segments_N file\");\n      }\n      if (infoStream != null) {\n        message(\"forced open of current segments file \" + segmentInfos.getCurrentSegmentFileName());\n      }\n      currentCommitPoint = new CommitPoint(commitsToDelete, directory, sis);\n      commits.add(currentCommitPoint);\n      incRef(sis, true);\n    }\n\n    // We keep commits list in sorted order (oldest to newest):\n    CollectionUtil.mergeSort(commits);\n\n    // Now delete anything with ref count at 0.  These are\n    // presumably abandoned files eg due to crash of\n    // IndexWriter.\n    for(Map.Entry<String, RefCount> entry : refCounts.entrySet() ) {\n      RefCount rc = entry.getValue();\n      final String fileName = entry.getKey();\n      if (0 == rc.count) {\n        if (infoStream != null) {\n          message(\"init: removing unreferenced file \\\"\" + fileName + \"\\\"\");\n        }\n        deleteFile(fileName);\n      }\n    }\n\n    // Finally, give policy a chance to remove things on\n    // startup:\n    if (currentSegmentsFile != null) {\n      policy.onInit(commits);\n    }\n\n    // Always protect the incoming segmentInfos since\n    // sometime it may not be the most recent commit\n    checkpoint(segmentInfos, false);\n\n    startingCommitDeleted = currentCommitPoint == null ? false : currentCommitPoint.isDeleted();\n\n    deleteCommits();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"58c6bbc222f074c844e736e6fb23647e3db9cfe3","date":1322743940,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexFileDeleter#IndexFileDeleter(Directory,IndexDeletionPolicy,SegmentInfos,InfoStream,IndexWriter).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexFileDeleter#IndexFileDeleter(Directory,IndexDeletionPolicy,SegmentInfos,InfoStream,IndexWriter).mjava","sourceNew":"  /**\n   * Initialize the deleter: find all previous commits in\n   * the Directory, incref the files they reference, call\n   * the policy to let it delete commits.  This will remove\n   * any files not referenced by any of the commits.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public IndexFileDeleter(Directory directory, IndexDeletionPolicy policy, SegmentInfos segmentInfos,\n                          InfoStream infoStream, IndexWriter writer) throws CorruptIndexException, IOException {\n    this.infoStream = infoStream;\n    this.writer = writer;\n\n    final String currentSegmentsFile = segmentInfos.getCurrentSegmentFileName();\n\n    if (infoStream.isEnabled(\"IFD\")) {\n      infoStream.message(\"IFD\", \"init: current segments file is \\\"\" + currentSegmentsFile + \"\\\"; deletionPolicy=\" + policy);\n    }\n\n    this.policy = policy;\n    this.directory = directory;\n\n    // First pass: walk the files and initialize our ref\n    // counts:\n    long currentGen = segmentInfos.getGeneration();\n\n    CommitPoint currentCommitPoint = null;\n    String[] files = null;\n    try {\n      files = directory.listAll();\n    } catch (NoSuchDirectoryException e) {\n      // it means the directory is empty, so ignore it.\n      files = new String[0];\n    }\n\n    for (String fileName : files) {\n\n      if ((IndexFileNameFilter.INSTANCE.accept(null, fileName)) && !fileName.endsWith(\"write.lock\") && !fileName.equals(IndexFileNames.SEGMENTS_GEN)) {\n\n        // Add this file to refCounts with initial count 0:\n        getRefCount(fileName);\n\n        if (fileName.startsWith(IndexFileNames.SEGMENTS)) {\n\n          // This is a commit (segments or segments_N), and\n          // it's valid (<= the max gen).  Load it, then\n          // incref all files it refers to:\n          if (infoStream.isEnabled(\"IFD\")) {\n            infoStream.message(\"IFD\", \"init: load commit \\\"\" + fileName + \"\\\"\");\n          }\n          SegmentInfos sis = new SegmentInfos();\n          try {\n            sis.read(directory, fileName);\n          } catch (FileNotFoundException e) {\n            // LUCENE-948: on NFS (and maybe others), if\n            // you have writers switching back and forth\n            // between machines, it's very likely that the\n            // dir listing will be stale and will claim a\n            // file segments_X exists when in fact it\n            // doesn't.  So, we catch this and handle it\n            // as if the file does not exist\n            if (infoStream.isEnabled(\"IFD\")) {\n              infoStream.message(\"IFD\", \"init: hit FileNotFoundException when loading commit \\\"\" + fileName + \"\\\"; skipping this commit point\");\n            }\n            sis = null;\n          } catch (IOException e) {\n            if (SegmentInfos.generationFromSegmentsFileName(fileName) <= currentGen) {\n              throw e;\n            } else {\n              // Most likely we are opening an index that\n              // has an aborted \"future\" commit, so suppress\n              // exc in this case\n              sis = null;\n            }\n          }\n          if (sis != null) {\n            final SegmentInfos infos = sis;\n            for (SegmentInfo segmentInfo : infos) {\n              try {\n                /*\n                 * Force FI to load for each segment since we could see a\n                 * segments file and load successfully above if the files are\n                 * still referenced when they are deleted and the os doesn't let\n                 * you delete them. Yet its likely that fnm files are removed\n                 * while seg file is still around Since LUCENE-2984 we need FI\n                 * to find out if a seg has vectors and prox so we need those\n                 * files to be opened for a commit point.\n                 */\n                segmentInfo.getFieldInfos();\n              } catch (FileNotFoundException e) {\n                refresh(segmentInfo.name);\n                sis = null;\n                if (infoStream.isEnabled(\"IFD\")) {\n                  infoStream.message(\"IFD\", \"init: hit FileNotFoundException when loading commit \\\"\" + fileName + \"\\\"; skipping this commit point\");\n                }\n              }\n            }\n           \n          }\n          if (sis != null) {\n            final CommitPoint commitPoint = new CommitPoint(commitsToDelete, directory, sis);\n            if (sis.getGeneration() == segmentInfos.getGeneration()) {\n              currentCommitPoint = commitPoint;\n            }\n            commits.add(commitPoint);\n            incRef(sis, true);\n\n            if (lastSegmentInfos == null || sis.getGeneration() > lastSegmentInfos.getGeneration()) {\n              lastSegmentInfos = sis;\n            }\n          }\n        }\n      }\n    }\n\n    if (currentCommitPoint == null && currentSegmentsFile != null) {\n      // We did not in fact see the segments_N file\n      // corresponding to the segmentInfos that was passed\n      // in.  Yet, it must exist, because our caller holds\n      // the write lock.  This can happen when the directory\n      // listing was stale (eg when index accessed via NFS\n      // client with stale directory listing cache).  So we\n      // try now to explicitly open this commit point:\n      SegmentInfos sis = new SegmentInfos();\n      try {\n        sis.read(directory, currentSegmentsFile);\n      } catch (IOException e) {\n        throw new CorruptIndexException(\"failed to locate current segments_N file\");\n      }\n      if (infoStream.isEnabled(\"IFD\")) {\n        infoStream.message(\"IFD\", \"forced open of current segments file \" + segmentInfos.getCurrentSegmentFileName());\n      }\n      currentCommitPoint = new CommitPoint(commitsToDelete, directory, sis);\n      commits.add(currentCommitPoint);\n      incRef(sis, true);\n    }\n\n    // We keep commits list in sorted order (oldest to newest):\n    CollectionUtil.mergeSort(commits);\n\n    // Now delete anything with ref count at 0.  These are\n    // presumably abandoned files eg due to crash of\n    // IndexWriter.\n    for(Map.Entry<String, RefCount> entry : refCounts.entrySet() ) {\n      RefCount rc = entry.getValue();\n      final String fileName = entry.getKey();\n      if (0 == rc.count) {\n        if (infoStream.isEnabled(\"IFD\")) {\n          infoStream.message(\"IFD\", \"init: removing unreferenced file \\\"\" + fileName + \"\\\"\");\n        }\n        deleteFile(fileName);\n      }\n    }\n\n    // Finally, give policy a chance to remove things on\n    // startup:\n    if (currentSegmentsFile != null) {\n      policy.onInit(commits);\n    }\n\n    // Always protect the incoming segmentInfos since\n    // sometime it may not be the most recent commit\n    checkpoint(segmentInfos, false);\n\n    startingCommitDeleted = currentCommitPoint == null ? false : currentCommitPoint.isDeleted();\n\n    deleteCommits();\n  }\n\n","sourceOld":"  /**\n   * Initialize the deleter: find all previous commits in\n   * the Directory, incref the files they reference, call\n   * the policy to let it delete commits.  This will remove\n   * any files not referenced by any of the commits.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public IndexFileDeleter(Directory directory, IndexDeletionPolicy policy, SegmentInfos segmentInfos,\n                          InfoStream infoStream, IndexWriter writer) throws CorruptIndexException, IOException {\n    this.infoStream = infoStream;\n    this.writer = writer;\n\n    final String currentSegmentsFile = segmentInfos.getCurrentSegmentFileName();\n\n    if (infoStream != null) {\n      infoStream.message(\"IFD\", \"init: current segments file is \\\"\" + currentSegmentsFile + \"\\\"; deletionPolicy=\" + policy);\n    }\n\n    this.policy = policy;\n    this.directory = directory;\n\n    // First pass: walk the files and initialize our ref\n    // counts:\n    long currentGen = segmentInfos.getGeneration();\n\n    CommitPoint currentCommitPoint = null;\n    String[] files = null;\n    try {\n      files = directory.listAll();\n    } catch (NoSuchDirectoryException e) {\n      // it means the directory is empty, so ignore it.\n      files = new String[0];\n    }\n\n    for (String fileName : files) {\n\n      if ((IndexFileNameFilter.INSTANCE.accept(null, fileName)) && !fileName.endsWith(\"write.lock\") && !fileName.equals(IndexFileNames.SEGMENTS_GEN)) {\n\n        // Add this file to refCounts with initial count 0:\n        getRefCount(fileName);\n\n        if (fileName.startsWith(IndexFileNames.SEGMENTS)) {\n\n          // This is a commit (segments or segments_N), and\n          // it's valid (<= the max gen).  Load it, then\n          // incref all files it refers to:\n          if (infoStream != null) {\n            infoStream.message(\"IFD\", \"init: load commit \\\"\" + fileName + \"\\\"\");\n          }\n          SegmentInfos sis = new SegmentInfos();\n          try {\n            sis.read(directory, fileName);\n          } catch (FileNotFoundException e) {\n            // LUCENE-948: on NFS (and maybe others), if\n            // you have writers switching back and forth\n            // between machines, it's very likely that the\n            // dir listing will be stale and will claim a\n            // file segments_X exists when in fact it\n            // doesn't.  So, we catch this and handle it\n            // as if the file does not exist\n            if (infoStream != null) {\n              infoStream.message(\"IFD\", \"init: hit FileNotFoundException when loading commit \\\"\" + fileName + \"\\\"; skipping this commit point\");\n            }\n            sis = null;\n          } catch (IOException e) {\n            if (SegmentInfos.generationFromSegmentsFileName(fileName) <= currentGen) {\n              throw e;\n            } else {\n              // Most likely we are opening an index that\n              // has an aborted \"future\" commit, so suppress\n              // exc in this case\n              sis = null;\n            }\n          }\n          if (sis != null) {\n            final SegmentInfos infos = sis;\n            for (SegmentInfo segmentInfo : infos) {\n              try {\n                /*\n                 * Force FI to load for each segment since we could see a\n                 * segments file and load successfully above if the files are\n                 * still referenced when they are deleted and the os doesn't let\n                 * you delete them. Yet its likely that fnm files are removed\n                 * while seg file is still around Since LUCENE-2984 we need FI\n                 * to find out if a seg has vectors and prox so we need those\n                 * files to be opened for a commit point.\n                 */\n                segmentInfo.getFieldInfos();\n              } catch (FileNotFoundException e) {\n                refresh(segmentInfo.name);\n                sis = null;\n                if (infoStream != null) {\n                  infoStream.message(\"IFD\", \"init: hit FileNotFoundException when loading commit \\\"\" + fileName + \"\\\"; skipping this commit point\");\n                }\n              }\n            }\n           \n          }\n          if (sis != null) {\n            final CommitPoint commitPoint = new CommitPoint(commitsToDelete, directory, sis);\n            if (sis.getGeneration() == segmentInfos.getGeneration()) {\n              currentCommitPoint = commitPoint;\n            }\n            commits.add(commitPoint);\n            incRef(sis, true);\n\n            if (lastSegmentInfos == null || sis.getGeneration() > lastSegmentInfos.getGeneration()) {\n              lastSegmentInfos = sis;\n            }\n          }\n        }\n      }\n    }\n\n    if (currentCommitPoint == null && currentSegmentsFile != null) {\n      // We did not in fact see the segments_N file\n      // corresponding to the segmentInfos that was passed\n      // in.  Yet, it must exist, because our caller holds\n      // the write lock.  This can happen when the directory\n      // listing was stale (eg when index accessed via NFS\n      // client with stale directory listing cache).  So we\n      // try now to explicitly open this commit point:\n      SegmentInfos sis = new SegmentInfos();\n      try {\n        sis.read(directory, currentSegmentsFile);\n      } catch (IOException e) {\n        throw new CorruptIndexException(\"failed to locate current segments_N file\");\n      }\n      if (infoStream != null) {\n        infoStream.message(\"IFD\", \"forced open of current segments file \" + segmentInfos.getCurrentSegmentFileName());\n      }\n      currentCommitPoint = new CommitPoint(commitsToDelete, directory, sis);\n      commits.add(currentCommitPoint);\n      incRef(sis, true);\n    }\n\n    // We keep commits list in sorted order (oldest to newest):\n    CollectionUtil.mergeSort(commits);\n\n    // Now delete anything with ref count at 0.  These are\n    // presumably abandoned files eg due to crash of\n    // IndexWriter.\n    for(Map.Entry<String, RefCount> entry : refCounts.entrySet() ) {\n      RefCount rc = entry.getValue();\n      final String fileName = entry.getKey();\n      if (0 == rc.count) {\n        if (infoStream != null) {\n          infoStream.message(\"IFD\", \"init: removing unreferenced file \\\"\" + fileName + \"\\\"\");\n        }\n        deleteFile(fileName);\n      }\n    }\n\n    // Finally, give policy a chance to remove things on\n    // startup:\n    if (currentSegmentsFile != null) {\n      policy.onInit(commits);\n    }\n\n    // Always protect the incoming segmentInfos since\n    // sometime it may not be the most recent commit\n    checkpoint(segmentInfos, false);\n\n    startingCommitDeleted = currentCommitPoint == null ? false : currentCommitPoint.isDeleted();\n\n    deleteCommits();\n  }\n\n","bugFix":null,"bugIntro":["0ff6d29b386d9d2fe7848cf6a9175ba42276a00b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fb8c6c8b35c7806f1ef4d37d52944b67158db2d1","date":1323375642,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexFileDeleter#IndexFileDeleter(Directory,IndexDeletionPolicy,SegmentInfos,InfoStream,IndexWriter).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexFileDeleter#IndexFileDeleter(Directory,IndexDeletionPolicy,SegmentInfos,InfoStream,IndexWriter).mjava","sourceNew":"  /**\n   * Initialize the deleter: find all previous commits in\n   * the Directory, incref the files they reference, call\n   * the policy to let it delete commits.  This will remove\n   * any files not referenced by any of the commits.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public IndexFileDeleter(Directory directory, IndexDeletionPolicy policy, SegmentInfos segmentInfos,\n                          InfoStream infoStream, IndexWriter writer) throws CorruptIndexException, IOException {\n    this.infoStream = infoStream;\n    this.writer = writer;\n\n    final String currentSegmentsFile = segmentInfos.getCurrentSegmentFileName();\n\n    if (infoStream.isEnabled(\"IFD\")) {\n      infoStream.message(\"IFD\", \"init: current segments file is \\\"\" + currentSegmentsFile + \"\\\"; deletionPolicy=\" + policy);\n    }\n\n    this.policy = policy;\n    this.directory = directory;\n\n    // First pass: walk the files and initialize our ref\n    // counts:\n    long currentGen = segmentInfos.getGeneration();\n\n    CommitPoint currentCommitPoint = null;\n    String[] files = null;\n    try {\n      files = directory.listAll();\n    } catch (NoSuchDirectoryException e) {\n      // it means the directory is empty, so ignore it.\n      files = new String[0];\n    }\n\n    for (String fileName : files) {\n\n      if ((IndexFileNameFilter.INSTANCE.accept(null, fileName)) && !fileName.endsWith(\"write.lock\") && !fileName.equals(IndexFileNames.SEGMENTS_GEN)) {\n\n        // Add this file to refCounts with initial count 0:\n        getRefCount(fileName);\n\n        if (fileName.startsWith(IndexFileNames.SEGMENTS)) {\n\n          // This is a commit (segments or segments_N), and\n          // it's valid (<= the max gen).  Load it, then\n          // incref all files it refers to:\n          if (infoStream.isEnabled(\"IFD\")) {\n            infoStream.message(\"IFD\", \"init: load commit \\\"\" + fileName + \"\\\"\");\n          }\n          SegmentInfos sis = new SegmentInfos();\n          try {\n            sis.read(directory, fileName);\n          } catch (FileNotFoundException e) {\n            // LUCENE-948: on NFS (and maybe others), if\n            // you have writers switching back and forth\n            // between machines, it's very likely that the\n            // dir listing will be stale and will claim a\n            // file segments_X exists when in fact it\n            // doesn't.  So, we catch this and handle it\n            // as if the file does not exist\n            if (infoStream.isEnabled(\"IFD\")) {\n              infoStream.message(\"IFD\", \"init: hit FileNotFoundException when loading commit \\\"\" + fileName + \"\\\"; skipping this commit point\");\n            }\n            sis = null;\n          } catch (IOException e) {\n            if (SegmentInfos.generationFromSegmentsFileName(fileName) <= currentGen && directory.fileLength(fileName) > 0) {\n              throw e;\n            } else {\n              // Most likely we are opening an index that\n              // has an aborted \"future\" commit, so suppress\n              // exc in this case\n              sis = null;\n            }\n          }\n          if (sis != null) {\n            final SegmentInfos infos = sis;\n            for (SegmentInfo segmentInfo : infos) {\n              try {\n                /*\n                 * Force FI to load for each segment since we could see a\n                 * segments file and load successfully above if the files are\n                 * still referenced when they are deleted and the os doesn't let\n                 * you delete them. Yet its likely that fnm files are removed\n                 * while seg file is still around Since LUCENE-2984 we need FI\n                 * to find out if a seg has vectors and prox so we need those\n                 * files to be opened for a commit point.\n                 */\n                segmentInfo.getFieldInfos();\n              } catch (FileNotFoundException e) {\n                refresh(segmentInfo.name);\n                sis = null;\n                if (infoStream.isEnabled(\"IFD\")) {\n                  infoStream.message(\"IFD\", \"init: hit FileNotFoundException when loading commit \\\"\" + fileName + \"\\\"; skipping this commit point\");\n                }\n              }\n            }\n           \n          }\n          if (sis != null) {\n            final CommitPoint commitPoint = new CommitPoint(commitsToDelete, directory, sis);\n            if (sis.getGeneration() == segmentInfos.getGeneration()) {\n              currentCommitPoint = commitPoint;\n            }\n            commits.add(commitPoint);\n            incRef(sis, true);\n\n            if (lastSegmentInfos == null || sis.getGeneration() > lastSegmentInfos.getGeneration()) {\n              lastSegmentInfos = sis;\n            }\n          }\n        }\n      }\n    }\n\n    if (currentCommitPoint == null && currentSegmentsFile != null) {\n      // We did not in fact see the segments_N file\n      // corresponding to the segmentInfos that was passed\n      // in.  Yet, it must exist, because our caller holds\n      // the write lock.  This can happen when the directory\n      // listing was stale (eg when index accessed via NFS\n      // client with stale directory listing cache).  So we\n      // try now to explicitly open this commit point:\n      SegmentInfos sis = new SegmentInfos();\n      try {\n        sis.read(directory, currentSegmentsFile);\n      } catch (IOException e) {\n        throw new CorruptIndexException(\"failed to locate current segments_N file\");\n      }\n      if (infoStream.isEnabled(\"IFD\")) {\n        infoStream.message(\"IFD\", \"forced open of current segments file \" + segmentInfos.getCurrentSegmentFileName());\n      }\n      currentCommitPoint = new CommitPoint(commitsToDelete, directory, sis);\n      commits.add(currentCommitPoint);\n      incRef(sis, true);\n    }\n\n    // We keep commits list in sorted order (oldest to newest):\n    CollectionUtil.mergeSort(commits);\n\n    // Now delete anything with ref count at 0.  These are\n    // presumably abandoned files eg due to crash of\n    // IndexWriter.\n    for(Map.Entry<String, RefCount> entry : refCounts.entrySet() ) {\n      RefCount rc = entry.getValue();\n      final String fileName = entry.getKey();\n      if (0 == rc.count) {\n        if (infoStream.isEnabled(\"IFD\")) {\n          infoStream.message(\"IFD\", \"init: removing unreferenced file \\\"\" + fileName + \"\\\"\");\n        }\n        deleteFile(fileName);\n      }\n    }\n\n    // Finally, give policy a chance to remove things on\n    // startup:\n    if (currentSegmentsFile != null) {\n      policy.onInit(commits);\n    }\n\n    // Always protect the incoming segmentInfos since\n    // sometime it may not be the most recent commit\n    checkpoint(segmentInfos, false);\n\n    startingCommitDeleted = currentCommitPoint == null ? false : currentCommitPoint.isDeleted();\n\n    deleteCommits();\n  }\n\n","sourceOld":"  /**\n   * Initialize the deleter: find all previous commits in\n   * the Directory, incref the files they reference, call\n   * the policy to let it delete commits.  This will remove\n   * any files not referenced by any of the commits.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public IndexFileDeleter(Directory directory, IndexDeletionPolicy policy, SegmentInfos segmentInfos,\n                          InfoStream infoStream, IndexWriter writer) throws CorruptIndexException, IOException {\n    this.infoStream = infoStream;\n    this.writer = writer;\n\n    final String currentSegmentsFile = segmentInfos.getCurrentSegmentFileName();\n\n    if (infoStream.isEnabled(\"IFD\")) {\n      infoStream.message(\"IFD\", \"init: current segments file is \\\"\" + currentSegmentsFile + \"\\\"; deletionPolicy=\" + policy);\n    }\n\n    this.policy = policy;\n    this.directory = directory;\n\n    // First pass: walk the files and initialize our ref\n    // counts:\n    long currentGen = segmentInfos.getGeneration();\n\n    CommitPoint currentCommitPoint = null;\n    String[] files = null;\n    try {\n      files = directory.listAll();\n    } catch (NoSuchDirectoryException e) {\n      // it means the directory is empty, so ignore it.\n      files = new String[0];\n    }\n\n    for (String fileName : files) {\n\n      if ((IndexFileNameFilter.INSTANCE.accept(null, fileName)) && !fileName.endsWith(\"write.lock\") && !fileName.equals(IndexFileNames.SEGMENTS_GEN)) {\n\n        // Add this file to refCounts with initial count 0:\n        getRefCount(fileName);\n\n        if (fileName.startsWith(IndexFileNames.SEGMENTS)) {\n\n          // This is a commit (segments or segments_N), and\n          // it's valid (<= the max gen).  Load it, then\n          // incref all files it refers to:\n          if (infoStream.isEnabled(\"IFD\")) {\n            infoStream.message(\"IFD\", \"init: load commit \\\"\" + fileName + \"\\\"\");\n          }\n          SegmentInfos sis = new SegmentInfos();\n          try {\n            sis.read(directory, fileName);\n          } catch (FileNotFoundException e) {\n            // LUCENE-948: on NFS (and maybe others), if\n            // you have writers switching back and forth\n            // between machines, it's very likely that the\n            // dir listing will be stale and will claim a\n            // file segments_X exists when in fact it\n            // doesn't.  So, we catch this and handle it\n            // as if the file does not exist\n            if (infoStream.isEnabled(\"IFD\")) {\n              infoStream.message(\"IFD\", \"init: hit FileNotFoundException when loading commit \\\"\" + fileName + \"\\\"; skipping this commit point\");\n            }\n            sis = null;\n          } catch (IOException e) {\n            if (SegmentInfos.generationFromSegmentsFileName(fileName) <= currentGen) {\n              throw e;\n            } else {\n              // Most likely we are opening an index that\n              // has an aborted \"future\" commit, so suppress\n              // exc in this case\n              sis = null;\n            }\n          }\n          if (sis != null) {\n            final SegmentInfos infos = sis;\n            for (SegmentInfo segmentInfo : infos) {\n              try {\n                /*\n                 * Force FI to load for each segment since we could see a\n                 * segments file and load successfully above if the files are\n                 * still referenced when they are deleted and the os doesn't let\n                 * you delete them. Yet its likely that fnm files are removed\n                 * while seg file is still around Since LUCENE-2984 we need FI\n                 * to find out if a seg has vectors and prox so we need those\n                 * files to be opened for a commit point.\n                 */\n                segmentInfo.getFieldInfos();\n              } catch (FileNotFoundException e) {\n                refresh(segmentInfo.name);\n                sis = null;\n                if (infoStream.isEnabled(\"IFD\")) {\n                  infoStream.message(\"IFD\", \"init: hit FileNotFoundException when loading commit \\\"\" + fileName + \"\\\"; skipping this commit point\");\n                }\n              }\n            }\n           \n          }\n          if (sis != null) {\n            final CommitPoint commitPoint = new CommitPoint(commitsToDelete, directory, sis);\n            if (sis.getGeneration() == segmentInfos.getGeneration()) {\n              currentCommitPoint = commitPoint;\n            }\n            commits.add(commitPoint);\n            incRef(sis, true);\n\n            if (lastSegmentInfos == null || sis.getGeneration() > lastSegmentInfos.getGeneration()) {\n              lastSegmentInfos = sis;\n            }\n          }\n        }\n      }\n    }\n\n    if (currentCommitPoint == null && currentSegmentsFile != null) {\n      // We did not in fact see the segments_N file\n      // corresponding to the segmentInfos that was passed\n      // in.  Yet, it must exist, because our caller holds\n      // the write lock.  This can happen when the directory\n      // listing was stale (eg when index accessed via NFS\n      // client with stale directory listing cache).  So we\n      // try now to explicitly open this commit point:\n      SegmentInfos sis = new SegmentInfos();\n      try {\n        sis.read(directory, currentSegmentsFile);\n      } catch (IOException e) {\n        throw new CorruptIndexException(\"failed to locate current segments_N file\");\n      }\n      if (infoStream.isEnabled(\"IFD\")) {\n        infoStream.message(\"IFD\", \"forced open of current segments file \" + segmentInfos.getCurrentSegmentFileName());\n      }\n      currentCommitPoint = new CommitPoint(commitsToDelete, directory, sis);\n      commits.add(currentCommitPoint);\n      incRef(sis, true);\n    }\n\n    // We keep commits list in sorted order (oldest to newest):\n    CollectionUtil.mergeSort(commits);\n\n    // Now delete anything with ref count at 0.  These are\n    // presumably abandoned files eg due to crash of\n    // IndexWriter.\n    for(Map.Entry<String, RefCount> entry : refCounts.entrySet() ) {\n      RefCount rc = entry.getValue();\n      final String fileName = entry.getKey();\n      if (0 == rc.count) {\n        if (infoStream.isEnabled(\"IFD\")) {\n          infoStream.message(\"IFD\", \"init: removing unreferenced file \\\"\" + fileName + \"\\\"\");\n        }\n        deleteFile(fileName);\n      }\n    }\n\n    // Finally, give policy a chance to remove things on\n    // startup:\n    if (currentSegmentsFile != null) {\n      policy.onInit(commits);\n    }\n\n    // Always protect the incoming segmentInfos since\n    // sometime it may not be the most recent commit\n    checkpoint(segmentInfos, false);\n\n    startingCommitDeleted = currentCommitPoint == null ? false : currentCommitPoint.isDeleted();\n\n    deleteCommits();\n  }\n\n","bugFix":["7b91922b55d15444d554721b352861d028eb8278"],"bugIntro":["0ff6d29b386d9d2fe7848cf6a9175ba42276a00b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexFileDeleter#IndexFileDeleter(Directory,IndexDeletionPolicy,SegmentInfos,InfoStream,IndexWriter).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexFileDeleter#IndexFileDeleter(Directory,IndexDeletionPolicy,SegmentInfos,InfoStream,IndexWriter).mjava","sourceNew":"  /**\n   * Initialize the deleter: find all previous commits in\n   * the Directory, incref the files they reference, call\n   * the policy to let it delete commits.  This will remove\n   * any files not referenced by any of the commits.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public IndexFileDeleter(Directory directory, IndexDeletionPolicy policy, SegmentInfos segmentInfos,\n                          InfoStream infoStream, IndexWriter writer) throws CorruptIndexException, IOException {\n    this.infoStream = infoStream;\n    this.writer = writer;\n\n    final String currentSegmentsFile = segmentInfos.getCurrentSegmentFileName();\n\n    if (infoStream.isEnabled(\"IFD\")) {\n      infoStream.message(\"IFD\", \"init: current segments file is \\\"\" + currentSegmentsFile + \"\\\"; deletionPolicy=\" + policy);\n    }\n\n    this.policy = policy;\n    this.directory = directory;\n\n    // First pass: walk the files and initialize our ref\n    // counts:\n    long currentGen = segmentInfos.getGeneration();\n\n    CommitPoint currentCommitPoint = null;\n    String[] files = null;\n    try {\n      files = directory.listAll();\n    } catch (NoSuchDirectoryException e) {\n      // it means the directory is empty, so ignore it.\n      files = new String[0];\n    }\n\n    for (String fileName : files) {\n\n      if ((IndexFileNameFilter.INSTANCE.accept(null, fileName)) && !fileName.endsWith(\"write.lock\") && !fileName.equals(IndexFileNames.SEGMENTS_GEN)) {\n\n        // Add this file to refCounts with initial count 0:\n        getRefCount(fileName);\n\n        if (fileName.startsWith(IndexFileNames.SEGMENTS)) {\n\n          // This is a commit (segments or segments_N), and\n          // it's valid (<= the max gen).  Load it, then\n          // incref all files it refers to:\n          if (infoStream.isEnabled(\"IFD\")) {\n            infoStream.message(\"IFD\", \"init: load commit \\\"\" + fileName + \"\\\"\");\n          }\n          SegmentInfos sis = new SegmentInfos();\n          try {\n            sis.read(directory, fileName);\n          } catch (FileNotFoundException e) {\n            // LUCENE-948: on NFS (and maybe others), if\n            // you have writers switching back and forth\n            // between machines, it's very likely that the\n            // dir listing will be stale and will claim a\n            // file segments_X exists when in fact it\n            // doesn't.  So, we catch this and handle it\n            // as if the file does not exist\n            if (infoStream.isEnabled(\"IFD\")) {\n              infoStream.message(\"IFD\", \"init: hit FileNotFoundException when loading commit \\\"\" + fileName + \"\\\"; skipping this commit point\");\n            }\n            sis = null;\n          } catch (IOException e) {\n            if (SegmentInfos.generationFromSegmentsFileName(fileName) <= currentGen && directory.fileLength(fileName) > 0) {\n              throw e;\n            } else {\n              // Most likely we are opening an index that\n              // has an aborted \"future\" commit, so suppress\n              // exc in this case\n              sis = null;\n            }\n          }\n          if (sis != null) {\n            final SegmentInfos infos = sis;\n            for (SegmentInfo segmentInfo : infos) {\n              try {\n                /*\n                 * Force FI to load for each segment since we could see a\n                 * segments file and load successfully above if the files are\n                 * still referenced when they are deleted and the os doesn't let\n                 * you delete them. Yet its likely that fnm files are removed\n                 * while seg file is still around Since LUCENE-2984 we need FI\n                 * to find out if a seg has vectors and prox so we need those\n                 * files to be opened for a commit point.\n                 */\n                segmentInfo.getFieldInfos();\n              } catch (FileNotFoundException e) {\n                refresh(segmentInfo.name);\n                sis = null;\n                if (infoStream.isEnabled(\"IFD\")) {\n                  infoStream.message(\"IFD\", \"init: hit FileNotFoundException when loading commit \\\"\" + fileName + \"\\\"; skipping this commit point\");\n                }\n              }\n            }\n           \n          }\n          if (sis != null) {\n            final CommitPoint commitPoint = new CommitPoint(commitsToDelete, directory, sis);\n            if (sis.getGeneration() == segmentInfos.getGeneration()) {\n              currentCommitPoint = commitPoint;\n            }\n            commits.add(commitPoint);\n            incRef(sis, true);\n\n            if (lastSegmentInfos == null || sis.getGeneration() > lastSegmentInfos.getGeneration()) {\n              lastSegmentInfos = sis;\n            }\n          }\n        }\n      }\n    }\n\n    if (currentCommitPoint == null && currentSegmentsFile != null) {\n      // We did not in fact see the segments_N file\n      // corresponding to the segmentInfos that was passed\n      // in.  Yet, it must exist, because our caller holds\n      // the write lock.  This can happen when the directory\n      // listing was stale (eg when index accessed via NFS\n      // client with stale directory listing cache).  So we\n      // try now to explicitly open this commit point:\n      SegmentInfos sis = new SegmentInfos();\n      try {\n        sis.read(directory, currentSegmentsFile);\n      } catch (IOException e) {\n        throw new CorruptIndexException(\"failed to locate current segments_N file\");\n      }\n      if (infoStream.isEnabled(\"IFD\")) {\n        infoStream.message(\"IFD\", \"forced open of current segments file \" + segmentInfos.getCurrentSegmentFileName());\n      }\n      currentCommitPoint = new CommitPoint(commitsToDelete, directory, sis);\n      commits.add(currentCommitPoint);\n      incRef(sis, true);\n    }\n\n    // We keep commits list in sorted order (oldest to newest):\n    CollectionUtil.mergeSort(commits);\n\n    // Now delete anything with ref count at 0.  These are\n    // presumably abandoned files eg due to crash of\n    // IndexWriter.\n    for(Map.Entry<String, RefCount> entry : refCounts.entrySet() ) {\n      RefCount rc = entry.getValue();\n      final String fileName = entry.getKey();\n      if (0 == rc.count) {\n        if (infoStream.isEnabled(\"IFD\")) {\n          infoStream.message(\"IFD\", \"init: removing unreferenced file \\\"\" + fileName + \"\\\"\");\n        }\n        deleteFile(fileName);\n      }\n    }\n\n    // Finally, give policy a chance to remove things on\n    // startup:\n    if (currentSegmentsFile != null) {\n      policy.onInit(commits);\n    }\n\n    // Always protect the incoming segmentInfos since\n    // sometime it may not be the most recent commit\n    checkpoint(segmentInfos, false);\n\n    startingCommitDeleted = currentCommitPoint == null ? false : currentCommitPoint.isDeleted();\n\n    deleteCommits();\n  }\n\n","sourceOld":"  /**\n   * Initialize the deleter: find all previous commits in\n   * the Directory, incref the files they reference, call\n   * the policy to let it delete commits.  This will remove\n   * any files not referenced by any of the commits.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public IndexFileDeleter(Directory directory, IndexDeletionPolicy policy, SegmentInfos segmentInfos,\n                          InfoStream infoStream, IndexWriter writer) throws CorruptIndexException, IOException {\n    this.infoStream = infoStream;\n    this.writer = writer;\n\n    final String currentSegmentsFile = segmentInfos.getCurrentSegmentFileName();\n\n    if (infoStream.isEnabled(\"IFD\")) {\n      infoStream.message(\"IFD\", \"init: current segments file is \\\"\" + currentSegmentsFile + \"\\\"; deletionPolicy=\" + policy);\n    }\n\n    this.policy = policy;\n    this.directory = directory;\n\n    // First pass: walk the files and initialize our ref\n    // counts:\n    long currentGen = segmentInfos.getGeneration();\n\n    CommitPoint currentCommitPoint = null;\n    String[] files = null;\n    try {\n      files = directory.listAll();\n    } catch (NoSuchDirectoryException e) {\n      // it means the directory is empty, so ignore it.\n      files = new String[0];\n    }\n\n    for (String fileName : files) {\n\n      if ((IndexFileNameFilter.INSTANCE.accept(null, fileName)) && !fileName.endsWith(\"write.lock\") && !fileName.equals(IndexFileNames.SEGMENTS_GEN)) {\n\n        // Add this file to refCounts with initial count 0:\n        getRefCount(fileName);\n\n        if (fileName.startsWith(IndexFileNames.SEGMENTS)) {\n\n          // This is a commit (segments or segments_N), and\n          // it's valid (<= the max gen).  Load it, then\n          // incref all files it refers to:\n          if (infoStream.isEnabled(\"IFD\")) {\n            infoStream.message(\"IFD\", \"init: load commit \\\"\" + fileName + \"\\\"\");\n          }\n          SegmentInfos sis = new SegmentInfos();\n          try {\n            sis.read(directory, fileName);\n          } catch (FileNotFoundException e) {\n            // LUCENE-948: on NFS (and maybe others), if\n            // you have writers switching back and forth\n            // between machines, it's very likely that the\n            // dir listing will be stale and will claim a\n            // file segments_X exists when in fact it\n            // doesn't.  So, we catch this and handle it\n            // as if the file does not exist\n            if (infoStream.isEnabled(\"IFD\")) {\n              infoStream.message(\"IFD\", \"init: hit FileNotFoundException when loading commit \\\"\" + fileName + \"\\\"; skipping this commit point\");\n            }\n            sis = null;\n          } catch (IOException e) {\n            if (SegmentInfos.generationFromSegmentsFileName(fileName) <= currentGen) {\n              throw e;\n            } else {\n              // Most likely we are opening an index that\n              // has an aborted \"future\" commit, so suppress\n              // exc in this case\n              sis = null;\n            }\n          }\n          if (sis != null) {\n            final SegmentInfos infos = sis;\n            for (SegmentInfo segmentInfo : infos) {\n              try {\n                /*\n                 * Force FI to load for each segment since we could see a\n                 * segments file and load successfully above if the files are\n                 * still referenced when they are deleted and the os doesn't let\n                 * you delete them. Yet its likely that fnm files are removed\n                 * while seg file is still around Since LUCENE-2984 we need FI\n                 * to find out if a seg has vectors and prox so we need those\n                 * files to be opened for a commit point.\n                 */\n                segmentInfo.getFieldInfos();\n              } catch (FileNotFoundException e) {\n                refresh(segmentInfo.name);\n                sis = null;\n                if (infoStream.isEnabled(\"IFD\")) {\n                  infoStream.message(\"IFD\", \"init: hit FileNotFoundException when loading commit \\\"\" + fileName + \"\\\"; skipping this commit point\");\n                }\n              }\n            }\n           \n          }\n          if (sis != null) {\n            final CommitPoint commitPoint = new CommitPoint(commitsToDelete, directory, sis);\n            if (sis.getGeneration() == segmentInfos.getGeneration()) {\n              currentCommitPoint = commitPoint;\n            }\n            commits.add(commitPoint);\n            incRef(sis, true);\n\n            if (lastSegmentInfos == null || sis.getGeneration() > lastSegmentInfos.getGeneration()) {\n              lastSegmentInfos = sis;\n            }\n          }\n        }\n      }\n    }\n\n    if (currentCommitPoint == null && currentSegmentsFile != null) {\n      // We did not in fact see the segments_N file\n      // corresponding to the segmentInfos that was passed\n      // in.  Yet, it must exist, because our caller holds\n      // the write lock.  This can happen when the directory\n      // listing was stale (eg when index accessed via NFS\n      // client with stale directory listing cache).  So we\n      // try now to explicitly open this commit point:\n      SegmentInfos sis = new SegmentInfos();\n      try {\n        sis.read(directory, currentSegmentsFile);\n      } catch (IOException e) {\n        throw new CorruptIndexException(\"failed to locate current segments_N file\");\n      }\n      if (infoStream.isEnabled(\"IFD\")) {\n        infoStream.message(\"IFD\", \"forced open of current segments file \" + segmentInfos.getCurrentSegmentFileName());\n      }\n      currentCommitPoint = new CommitPoint(commitsToDelete, directory, sis);\n      commits.add(currentCommitPoint);\n      incRef(sis, true);\n    }\n\n    // We keep commits list in sorted order (oldest to newest):\n    CollectionUtil.mergeSort(commits);\n\n    // Now delete anything with ref count at 0.  These are\n    // presumably abandoned files eg due to crash of\n    // IndexWriter.\n    for(Map.Entry<String, RefCount> entry : refCounts.entrySet() ) {\n      RefCount rc = entry.getValue();\n      final String fileName = entry.getKey();\n      if (0 == rc.count) {\n        if (infoStream.isEnabled(\"IFD\")) {\n          infoStream.message(\"IFD\", \"init: removing unreferenced file \\\"\" + fileName + \"\\\"\");\n        }\n        deleteFile(fileName);\n      }\n    }\n\n    // Finally, give policy a chance to remove things on\n    // startup:\n    if (currentSegmentsFile != null) {\n      policy.onInit(commits);\n    }\n\n    // Always protect the incoming segmentInfos since\n    // sometime it may not be the most recent commit\n    checkpoint(segmentInfos, false);\n\n    startingCommitDeleted = currentCommitPoint == null ? false : currentCommitPoint.isDeleted();\n\n    deleteCommits();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexFileDeleter#IndexFileDeleter(Directory,IndexDeletionPolicy,SegmentInfos,InfoStream,IndexWriter).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexFileDeleter#IndexFileDeleter(Directory,IndexDeletionPolicy,SegmentInfos,InfoStream,IndexWriter).mjava","sourceNew":"  /**\n   * Initialize the deleter: find all previous commits in\n   * the Directory, incref the files they reference, call\n   * the policy to let it delete commits.  This will remove\n   * any files not referenced by any of the commits.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public IndexFileDeleter(Directory directory, IndexDeletionPolicy policy, SegmentInfos segmentInfos,\n                          InfoStream infoStream, IndexWriter writer) throws CorruptIndexException, IOException {\n    this.infoStream = infoStream;\n    this.writer = writer;\n\n    final String currentSegmentsFile = segmentInfos.getCurrentSegmentFileName();\n\n    if (infoStream.isEnabled(\"IFD\")) {\n      infoStream.message(\"IFD\", \"init: current segments file is \\\"\" + currentSegmentsFile + \"\\\"; deletionPolicy=\" + policy);\n    }\n\n    this.policy = policy;\n    this.directory = directory;\n\n    // First pass: walk the files and initialize our ref\n    // counts:\n    long currentGen = segmentInfos.getGeneration();\n\n    CommitPoint currentCommitPoint = null;\n    String[] files = null;\n    try {\n      files = directory.listAll();\n    } catch (NoSuchDirectoryException e) {\n      // it means the directory is empty, so ignore it.\n      files = new String[0];\n    }\n\n    for (String fileName : files) {\n\n      if ((IndexFileNameFilter.INSTANCE.accept(null, fileName)) && !fileName.endsWith(\"write.lock\") && !fileName.equals(IndexFileNames.SEGMENTS_GEN)) {\n\n        // Add this file to refCounts with initial count 0:\n        getRefCount(fileName);\n\n        if (fileName.startsWith(IndexFileNames.SEGMENTS)) {\n\n          // This is a commit (segments or segments_N), and\n          // it's valid (<= the max gen).  Load it, then\n          // incref all files it refers to:\n          if (infoStream.isEnabled(\"IFD\")) {\n            infoStream.message(\"IFD\", \"init: load commit \\\"\" + fileName + \"\\\"\");\n          }\n          SegmentInfos sis = new SegmentInfos();\n          try {\n            sis.read(directory, fileName);\n          } catch (FileNotFoundException e) {\n            // LUCENE-948: on NFS (and maybe others), if\n            // you have writers switching back and forth\n            // between machines, it's very likely that the\n            // dir listing will be stale and will claim a\n            // file segments_X exists when in fact it\n            // doesn't.  So, we catch this and handle it\n            // as if the file does not exist\n            if (infoStream.isEnabled(\"IFD\")) {\n              infoStream.message(\"IFD\", \"init: hit FileNotFoundException when loading commit \\\"\" + fileName + \"\\\"; skipping this commit point\");\n            }\n            sis = null;\n          } catch (IOException e) {\n            if (SegmentInfos.generationFromSegmentsFileName(fileName) <= currentGen && directory.fileLength(fileName) > 0) {\n              throw e;\n            } else {\n              // Most likely we are opening an index that\n              // has an aborted \"future\" commit, so suppress\n              // exc in this case\n              sis = null;\n            }\n          }\n          if (sis != null) {\n            final SegmentInfos infos = sis;\n            for (SegmentInfo segmentInfo : infos) {\n              try {\n                /*\n                 * Force FI to load for each segment since we could see a\n                 * segments file and load successfully above if the files are\n                 * still referenced when they are deleted and the os doesn't let\n                 * you delete them. Yet its likely that fnm files are removed\n                 * while seg file is still around Since LUCENE-2984 we need FI\n                 * to find out if a seg has vectors and prox so we need those\n                 * files to be opened for a commit point.\n                 */\n                segmentInfo.getFieldInfos();\n              } catch (FileNotFoundException e) {\n                refresh(segmentInfo.name);\n                sis = null;\n                if (infoStream.isEnabled(\"IFD\")) {\n                  infoStream.message(\"IFD\", \"init: hit FileNotFoundException when loading commit \\\"\" + fileName + \"\\\"; skipping this commit point\");\n                }\n              }\n            }\n           \n          }\n          if (sis != null) {\n            final CommitPoint commitPoint = new CommitPoint(commitsToDelete, directory, sis);\n            if (sis.getGeneration() == segmentInfos.getGeneration()) {\n              currentCommitPoint = commitPoint;\n            }\n            commits.add(commitPoint);\n            incRef(sis, true);\n\n            if (lastSegmentInfos == null || sis.getGeneration() > lastSegmentInfos.getGeneration()) {\n              lastSegmentInfos = sis;\n            }\n          }\n        }\n      }\n    }\n\n    if (currentCommitPoint == null && currentSegmentsFile != null) {\n      // We did not in fact see the segments_N file\n      // corresponding to the segmentInfos that was passed\n      // in.  Yet, it must exist, because our caller holds\n      // the write lock.  This can happen when the directory\n      // listing was stale (eg when index accessed via NFS\n      // client with stale directory listing cache).  So we\n      // try now to explicitly open this commit point:\n      SegmentInfos sis = new SegmentInfos();\n      try {\n        sis.read(directory, currentSegmentsFile);\n      } catch (IOException e) {\n        throw new CorruptIndexException(\"failed to locate current segments_N file\");\n      }\n      if (infoStream.isEnabled(\"IFD\")) {\n        infoStream.message(\"IFD\", \"forced open of current segments file \" + segmentInfos.getCurrentSegmentFileName());\n      }\n      currentCommitPoint = new CommitPoint(commitsToDelete, directory, sis);\n      commits.add(currentCommitPoint);\n      incRef(sis, true);\n    }\n\n    // We keep commits list in sorted order (oldest to newest):\n    CollectionUtil.mergeSort(commits);\n\n    // Now delete anything with ref count at 0.  These are\n    // presumably abandoned files eg due to crash of\n    // IndexWriter.\n    for(Map.Entry<String, RefCount> entry : refCounts.entrySet() ) {\n      RefCount rc = entry.getValue();\n      final String fileName = entry.getKey();\n      if (0 == rc.count) {\n        if (infoStream.isEnabled(\"IFD\")) {\n          infoStream.message(\"IFD\", \"init: removing unreferenced file \\\"\" + fileName + \"\\\"\");\n        }\n        deleteFile(fileName);\n      }\n    }\n\n    // Finally, give policy a chance to remove things on\n    // startup:\n    if (currentSegmentsFile != null) {\n      policy.onInit(commits);\n    }\n\n    // Always protect the incoming segmentInfos since\n    // sometime it may not be the most recent commit\n    checkpoint(segmentInfos, false);\n\n    startingCommitDeleted = currentCommitPoint == null ? false : currentCommitPoint.isDeleted();\n\n    deleteCommits();\n  }\n\n","sourceOld":"  /**\n   * Initialize the deleter: find all previous commits in\n   * the Directory, incref the files they reference, call\n   * the policy to let it delete commits.  This will remove\n   * any files not referenced by any of the commits.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public IndexFileDeleter(Directory directory, IndexDeletionPolicy policy, SegmentInfos segmentInfos,\n                          InfoStream infoStream, IndexWriter writer) throws CorruptIndexException, IOException {\n    this.infoStream = infoStream;\n    this.writer = writer;\n\n    final String currentSegmentsFile = segmentInfos.getCurrentSegmentFileName();\n\n    if (infoStream.isEnabled(\"IFD\")) {\n      infoStream.message(\"IFD\", \"init: current segments file is \\\"\" + currentSegmentsFile + \"\\\"; deletionPolicy=\" + policy);\n    }\n\n    this.policy = policy;\n    this.directory = directory;\n\n    // First pass: walk the files and initialize our ref\n    // counts:\n    long currentGen = segmentInfos.getGeneration();\n\n    CommitPoint currentCommitPoint = null;\n    String[] files = null;\n    try {\n      files = directory.listAll();\n    } catch (NoSuchDirectoryException e) {\n      // it means the directory is empty, so ignore it.\n      files = new String[0];\n    }\n\n    for (String fileName : files) {\n\n      if ((IndexFileNameFilter.INSTANCE.accept(null, fileName)) && !fileName.endsWith(\"write.lock\") && !fileName.equals(IndexFileNames.SEGMENTS_GEN)) {\n\n        // Add this file to refCounts with initial count 0:\n        getRefCount(fileName);\n\n        if (fileName.startsWith(IndexFileNames.SEGMENTS)) {\n\n          // This is a commit (segments or segments_N), and\n          // it's valid (<= the max gen).  Load it, then\n          // incref all files it refers to:\n          if (infoStream.isEnabled(\"IFD\")) {\n            infoStream.message(\"IFD\", \"init: load commit \\\"\" + fileName + \"\\\"\");\n          }\n          SegmentInfos sis = new SegmentInfos();\n          try {\n            sis.read(directory, fileName);\n          } catch (FileNotFoundException e) {\n            // LUCENE-948: on NFS (and maybe others), if\n            // you have writers switching back and forth\n            // between machines, it's very likely that the\n            // dir listing will be stale and will claim a\n            // file segments_X exists when in fact it\n            // doesn't.  So, we catch this and handle it\n            // as if the file does not exist\n            if (infoStream.isEnabled(\"IFD\")) {\n              infoStream.message(\"IFD\", \"init: hit FileNotFoundException when loading commit \\\"\" + fileName + \"\\\"; skipping this commit point\");\n            }\n            sis = null;\n          } catch (IOException e) {\n            if (SegmentInfos.generationFromSegmentsFileName(fileName) <= currentGen && directory.fileLength(fileName) > 0) {\n              throw e;\n            } else {\n              // Most likely we are opening an index that\n              // has an aborted \"future\" commit, so suppress\n              // exc in this case\n              sis = null;\n            }\n          }\n          if (sis != null) {\n            final SegmentInfos infos = sis;\n            for (SegmentInfo segmentInfo : infos) {\n              try {\n                /*\n                 * Force FI to load for each segment since we could see a\n                 * segments file and load successfully above if the files are\n                 * still referenced when they are deleted and the os doesn't let\n                 * you delete them. Yet its likely that fnm files are removed\n                 * while seg file is still around Since LUCENE-2984 we need FI\n                 * to find out if a seg has vectors and prox so we need those\n                 * files to be opened for a commit point.\n                 */\n                segmentInfo.getFieldInfos();\n              } catch (FileNotFoundException e) {\n                refresh(segmentInfo.name);\n                sis = null;\n                if (infoStream.isEnabled(\"IFD\")) {\n                  infoStream.message(\"IFD\", \"init: hit FileNotFoundException when loading commit \\\"\" + fileName + \"\\\"; skipping this commit point\");\n                }\n              }\n            }\n           \n          }\n          if (sis != null) {\n            final CommitPoint commitPoint = new CommitPoint(commitsToDelete, directory, sis);\n            if (sis.getGeneration() == segmentInfos.getGeneration()) {\n              currentCommitPoint = commitPoint;\n            }\n            commits.add(commitPoint);\n            incRef(sis, true);\n\n            if (lastSegmentInfos == null || sis.getGeneration() > lastSegmentInfos.getGeneration()) {\n              lastSegmentInfos = sis;\n            }\n          }\n        }\n      }\n    }\n\n    if (currentCommitPoint == null && currentSegmentsFile != null) {\n      // We did not in fact see the segments_N file\n      // corresponding to the segmentInfos that was passed\n      // in.  Yet, it must exist, because our caller holds\n      // the write lock.  This can happen when the directory\n      // listing was stale (eg when index accessed via NFS\n      // client with stale directory listing cache).  So we\n      // try now to explicitly open this commit point:\n      SegmentInfos sis = new SegmentInfos();\n      try {\n        sis.read(directory, currentSegmentsFile);\n      } catch (IOException e) {\n        throw new CorruptIndexException(\"failed to locate current segments_N file\");\n      }\n      if (infoStream.isEnabled(\"IFD\")) {\n        infoStream.message(\"IFD\", \"forced open of current segments file \" + segmentInfos.getCurrentSegmentFileName());\n      }\n      currentCommitPoint = new CommitPoint(commitsToDelete, directory, sis);\n      commits.add(currentCommitPoint);\n      incRef(sis, true);\n    }\n\n    // We keep commits list in sorted order (oldest to newest):\n    CollectionUtil.mergeSort(commits);\n\n    // Now delete anything with ref count at 0.  These are\n    // presumably abandoned files eg due to crash of\n    // IndexWriter.\n    for(Map.Entry<String, RefCount> entry : refCounts.entrySet() ) {\n      RefCount rc = entry.getValue();\n      final String fileName = entry.getKey();\n      if (0 == rc.count) {\n        if (infoStream.isEnabled(\"IFD\")) {\n          infoStream.message(\"IFD\", \"init: removing unreferenced file \\\"\" + fileName + \"\\\"\");\n        }\n        deleteFile(fileName);\n      }\n    }\n\n    // Finally, give policy a chance to remove things on\n    // startup:\n    if (currentSegmentsFile != null) {\n      policy.onInit(commits);\n    }\n\n    // Always protect the incoming segmentInfos since\n    // sometime it may not be the most recent commit\n    checkpoint(segmentInfos, false);\n\n    startingCommitDeleted = currentCommitPoint == null ? false : currentCommitPoint.isDeleted();\n\n    deleteCommits();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"fb8c6c8b35c7806f1ef4d37d52944b67158db2d1":["58c6bbc222f074c844e736e6fb23647e3db9cfe3"],"58c6bbc222f074c844e736e6fb23647e3db9cfe3":["06584e6e98d592b34e1329b384182f368d2025e8"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["58c6bbc222f074c844e736e6fb23647e3db9cfe3","fb8c6c8b35c7806f1ef4d37d52944b67158db2d1"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["fb8c6c8b35c7806f1ef4d37d52944b67158db2d1"],"06584e6e98d592b34e1329b384182f368d2025e8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"fb8c6c8b35c7806f1ef4d37d52944b67158db2d1":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"58c6bbc222f074c844e736e6fb23647e3db9cfe3":["fb8c6c8b35c7806f1ef4d37d52944b67158db2d1","ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":[],"06584e6e98d592b34e1329b384182f368d2025e8":["58c6bbc222f074c844e736e6fb23647e3db9cfe3"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["06584e6e98d592b34e1329b384182f368d2025e8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}