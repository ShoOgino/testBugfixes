{"path":"solr/core/src/java/org/apache/solr/update/IndexFingerprint#compare(IndexFingerprint,IndexFingerprint).mjava","commits":[{"id":"979e22aa7c63c9dc651adf861610c7e444d45832","date":1454615713,"type":0,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/IndexFingerprint#compare(IndexFingerprint,IndexFingerprint).mjava","pathOld":"/dev/null","sourceNew":"  /** returns 0 for equal, negative if f1 is less recent than f2, positive if more recent */\n  public static int compare(IndexFingerprint f1, IndexFingerprint f2) {\n    int cmp;\n\n    // NOTE: some way want number of docs in index to take precedence over highest version (add-only systems for sure)\n\n    // if we're comparing all of the versions in the index, then go by the highest encountered.\n    if (f1.maxVersionSpecified == Long.MAX_VALUE) {\n      cmp = Long.compare(f1.maxVersionEncountered, f2.maxVersionEncountered);\n      if (cmp != 0) return cmp;\n    }\n\n    // Go by the highest version under the requested max.\n    cmp = Long.compare(f1.maxInHash, f2.maxInHash);\n    if (cmp != 0) return cmp;\n\n    // go by who has the most documents in the index\n    cmp = Long.compare(f1.numVersions, f2.numVersions);\n    if (cmp != 0) return cmp;\n\n    // both have same number of documents, so go by hash\n    cmp = Long.compare(f1.versionsHash, f2.versionsHash);\n    return cmp;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b1704c078ec59838c9d95d5bf5738b393b537494","date":1454693901,"type":0,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/IndexFingerprint#compare(IndexFingerprint,IndexFingerprint).mjava","pathOld":"/dev/null","sourceNew":"  /** returns 0 for equal, negative if f1 is less recent than f2, positive if more recent */\n  public static int compare(IndexFingerprint f1, IndexFingerprint f2) {\n    int cmp;\n\n    // NOTE: some way want number of docs in index to take precedence over highest version (add-only systems for sure)\n\n    // if we're comparing all of the versions in the index, then go by the highest encountered.\n    if (f1.maxVersionSpecified == Long.MAX_VALUE) {\n      cmp = Long.compare(f1.maxVersionEncountered, f2.maxVersionEncountered);\n      if (cmp != 0) return cmp;\n    }\n\n    // Go by the highest version under the requested max.\n    cmp = Long.compare(f1.maxInHash, f2.maxInHash);\n    if (cmp != 0) return cmp;\n\n    // go by who has the most documents in the index\n    cmp = Long.compare(f1.numVersions, f2.numVersions);\n    if (cmp != 0) return cmp;\n\n    // both have same number of documents, so go by hash\n    cmp = Long.compare(f1.versionsHash, f2.versionsHash);\n    return cmp;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":0,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/IndexFingerprint#compare(IndexFingerprint,IndexFingerprint).mjava","pathOld":"/dev/null","sourceNew":"  /** returns 0 for equal, negative if f1 is less recent than f2, positive if more recent */\n  public static int compare(IndexFingerprint f1, IndexFingerprint f2) {\n    int cmp;\n\n    // NOTE: some way want number of docs in index to take precedence over highest version (add-only systems for sure)\n\n    // if we're comparing all of the versions in the index, then go by the highest encountered.\n    if (f1.maxVersionSpecified == Long.MAX_VALUE) {\n      cmp = Long.compare(f1.maxVersionEncountered, f2.maxVersionEncountered);\n      if (cmp != 0) return cmp;\n    }\n\n    // Go by the highest version under the requested max.\n    cmp = Long.compare(f1.maxInHash, f2.maxInHash);\n    if (cmp != 0) return cmp;\n\n    // go by who has the most documents in the index\n    cmp = Long.compare(f1.numVersions, f2.numVersions);\n    if (cmp != 0) return cmp;\n\n    // both have same number of documents, so go by hash\n    cmp = Long.compare(f1.versionsHash, f2.versionsHash);\n    return cmp;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"40d106815d60946d1ff638c0aaef65ecda4722ca","date":1469429102,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/IndexFingerprint#compare(IndexFingerprint,IndexFingerprint).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/IndexFingerprint#compare(IndexFingerprint,IndexFingerprint).mjava","sourceNew":"  /** returns 0 for equal, negative if f1 is less recent than f2, positive if more recent */\n  public static int compare(IndexFingerprint f1, IndexFingerprint f2) {\n    int cmp;\n\n    // NOTE: some way want number of docs in index to take precedence over highest version (add-only systems for sure)\n\n    // if we're comparing all of the versions in the index, then go by the highest encountered.\n    if (f1.maxVersionSpecified == Long.MAX_VALUE) {\n      cmp = Long.compare(f1.maxVersionEncountered, f2.maxVersionEncountered);\n      if (cmp != 0) return cmp;\n    }\n\n    // Go by the highest version under the requested max.\n    cmp = Long.compare(f1.maxVersionsUsedInHash, f2.maxVersionsUsedInHash);\n    if (cmp != 0) return cmp;\n\n    // go by who has the most documents in the index\n    cmp = Long.compare(f1.numVersions, f2.numVersions);\n    if (cmp != 0) return cmp;\n\n    // both have same number of documents, so go by hash\n    cmp = Long.compare(f1.versionsHash, f2.versionsHash);\n    return cmp;\n  }\n\n","sourceOld":"  /** returns 0 for equal, negative if f1 is less recent than f2, positive if more recent */\n  public static int compare(IndexFingerprint f1, IndexFingerprint f2) {\n    int cmp;\n\n    // NOTE: some way want number of docs in index to take precedence over highest version (add-only systems for sure)\n\n    // if we're comparing all of the versions in the index, then go by the highest encountered.\n    if (f1.maxVersionSpecified == Long.MAX_VALUE) {\n      cmp = Long.compare(f1.maxVersionEncountered, f2.maxVersionEncountered);\n      if (cmp != 0) return cmp;\n    }\n\n    // Go by the highest version under the requested max.\n    cmp = Long.compare(f1.maxInHash, f2.maxInHash);\n    if (cmp != 0) return cmp;\n\n    // go by who has the most documents in the index\n    cmp = Long.compare(f1.numVersions, f2.numVersions);\n    if (cmp != 0) return cmp;\n\n    // both have same number of documents, so go by hash\n    cmp = Long.compare(f1.versionsHash, f2.versionsHash);\n    return cmp;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9dd076b6b2e140fa535b24a16a76ccde5f330322","date":1469429946,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/IndexFingerprint#compare(IndexFingerprint,IndexFingerprint).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/IndexFingerprint#compare(IndexFingerprint,IndexFingerprint).mjava","sourceNew":"  /** returns 0 for equal, negative if f1 is less recent than f2, positive if more recent */\n  public static int compare(IndexFingerprint f1, IndexFingerprint f2) {\n    int cmp;\n\n    // NOTE: some way want number of docs in index to take precedence over highest version (add-only systems for sure)\n\n    // if we're comparing all of the versions in the index, then go by the highest encountered.\n    if (f1.maxVersionSpecified == Long.MAX_VALUE) {\n      cmp = Long.compare(f1.maxVersionEncountered, f2.maxVersionEncountered);\n      if (cmp != 0) return cmp;\n    }\n\n    // Go by the highest version under the requested max.\n    cmp = Long.compare(f1.maxInHash, f2.maxInHash);\n    if (cmp != 0) return cmp;\n\n    // go by who has the most documents in the index\n    cmp = Long.compare(f1.numVersions, f2.numVersions);\n    if (cmp != 0) return cmp;\n\n    // both have same number of documents, so go by hash\n    cmp = Long.compare(f1.versionsHash, f2.versionsHash);\n    return cmp;\n  }\n\n","sourceOld":"  /** returns 0 for equal, negative if f1 is less recent than f2, positive if more recent */\n  public static int compare(IndexFingerprint f1, IndexFingerprint f2) {\n    int cmp;\n\n    // NOTE: some way want number of docs in index to take precedence over highest version (add-only systems for sure)\n\n    // if we're comparing all of the versions in the index, then go by the highest encountered.\n    if (f1.maxVersionSpecified == Long.MAX_VALUE) {\n      cmp = Long.compare(f1.maxVersionEncountered, f2.maxVersionEncountered);\n      if (cmp != 0) return cmp;\n    }\n\n    // Go by the highest version under the requested max.\n    cmp = Long.compare(f1.maxVersionsUsedInHash, f2.maxVersionsUsedInHash);\n    if (cmp != 0) return cmp;\n\n    // go by who has the most documents in the index\n    cmp = Long.compare(f1.numVersions, f2.numVersions);\n    if (cmp != 0) return cmp;\n\n    // both have same number of documents, so go by hash\n    cmp = Long.compare(f1.versionsHash, f2.versionsHash);\n    return cmp;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","979e22aa7c63c9dc651adf861610c7e444d45832"],"979e22aa7c63c9dc651adf861610c7e444d45832":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b1704c078ec59838c9d95d5bf5738b393b537494":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","979e22aa7c63c9dc651adf861610c7e444d45832"],"9dd076b6b2e140fa535b24a16a76ccde5f330322":["40d106815d60946d1ff638c0aaef65ecda4722ca"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9dd076b6b2e140fa535b24a16a76ccde5f330322"],"40d106815d60946d1ff638c0aaef65ecda4722ca":["979e22aa7c63c9dc651adf861610c7e444d45832"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","979e22aa7c63c9dc651adf861610c7e444d45832","b1704c078ec59838c9d95d5bf5738b393b537494"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"979e22aa7c63c9dc651adf861610c7e444d45832":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","b1704c078ec59838c9d95d5bf5738b393b537494","40d106815d60946d1ff638c0aaef65ecda4722ca"],"b1704c078ec59838c9d95d5bf5738b393b537494":[],"9dd076b6b2e140fa535b24a16a76ccde5f330322":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"40d106815d60946d1ff638c0aaef65ecda4722ca":["9dd076b6b2e140fa535b24a16a76ccde5f330322"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","b1704c078ec59838c9d95d5bf5738b393b537494","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}