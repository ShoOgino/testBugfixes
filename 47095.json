{"path":"lucene/src/test/org/apache/lucene/search/TestMultiSearcherRanking#setUp().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiSearcherRanking#setUp().mjava","pathOld":"src/test/org/apache/lucene/search/TestMultiSearcherRanking#setUp().mjava","sourceNew":"  /**\n   * initializes multiSearcher and singleSearcher with the same document set\n   */\n  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    // create MultiSearcher from two seperate searchers\n    Directory d1 = new RAMDirectory();\n    IndexWriter iw1 = new IndexWriter(d1, new IndexWriterConfig(TEST_VERSION_CURRENT, new StandardAnalyzer(TEST_VERSION_CURRENT)));\n    addCollection1(iw1);\n    iw1.close();\n    Directory d2 = new RAMDirectory();\n    IndexWriter iw2 = new IndexWriter(d2, new IndexWriterConfig(TEST_VERSION_CURRENT, new StandardAnalyzer(TEST_VERSION_CURRENT)));\n    addCollection2(iw2);\n    iw2.close();\n\n    Searchable[] s = new Searchable[2];\n    s[0] = new IndexSearcher(d1, true);\n    s[1] = new IndexSearcher(d2, true);\n    multiSearcher = new MultiSearcher(s);\n\n    // create IndexSearcher which contains all documents\n    Directory d = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(d, new IndexWriterConfig(TEST_VERSION_CURRENT, new StandardAnalyzer(TEST_VERSION_CURRENT)));\n    addCollection1(iw);\n    addCollection2(iw);\n    iw.close();\n    singleSearcher = new IndexSearcher(d, true);\n  }\n\n","sourceOld":"  /**\n   * initializes multiSearcher and singleSearcher with the same document set\n   */\n  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    // create MultiSearcher from two seperate searchers\n    Directory d1 = new RAMDirectory();\n    IndexWriter iw1 = new IndexWriter(d1, new IndexWriterConfig(TEST_VERSION_CURRENT, new StandardAnalyzer(TEST_VERSION_CURRENT)));\n    addCollection1(iw1);\n    iw1.close();\n    Directory d2 = new RAMDirectory();\n    IndexWriter iw2 = new IndexWriter(d2, new IndexWriterConfig(TEST_VERSION_CURRENT, new StandardAnalyzer(TEST_VERSION_CURRENT)));\n    addCollection2(iw2);\n    iw2.close();\n\n    Searchable[] s = new Searchable[2];\n    s[0] = new IndexSearcher(d1, true);\n    s[1] = new IndexSearcher(d2, true);\n    multiSearcher = new MultiSearcher(s);\n\n    // create IndexSearcher which contains all documents\n    Directory d = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(d, new IndexWriterConfig(TEST_VERSION_CURRENT, new StandardAnalyzer(TEST_VERSION_CURRENT)));\n    addCollection1(iw);\n    addCollection2(iw);\n    iw.close();\n    singleSearcher = new IndexSearcher(d, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d572389229127c297dd1fa5ce4758e1cec41e799","date":1273610938,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiSearcherRanking#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiSearcherRanking#setUp().mjava","sourceNew":"  /**\n   * initializes multiSearcher and singleSearcher with the same document set\n   */\n  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    // create MultiSearcher from two seperate searchers\n    Directory d1 = new RAMDirectory();\n    IndexWriter iw1 = new IndexWriter(d1, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    addCollection1(iw1);\n    iw1.close();\n    Directory d2 = new RAMDirectory();\n    IndexWriter iw2 = new IndexWriter(d2, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    addCollection2(iw2);\n    iw2.close();\n\n    Searchable[] s = new Searchable[2];\n    s[0] = new IndexSearcher(d1, true);\n    s[1] = new IndexSearcher(d2, true);\n    multiSearcher = new MultiSearcher(s);\n\n    // create IndexSearcher which contains all documents\n    Directory d = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(d, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    addCollection1(iw);\n    addCollection2(iw);\n    iw.close();\n    singleSearcher = new IndexSearcher(d, true);\n  }\n\n","sourceOld":"  /**\n   * initializes multiSearcher and singleSearcher with the same document set\n   */\n  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    // create MultiSearcher from two seperate searchers\n    Directory d1 = new RAMDirectory();\n    IndexWriter iw1 = new IndexWriter(d1, new IndexWriterConfig(TEST_VERSION_CURRENT, new StandardAnalyzer(TEST_VERSION_CURRENT)));\n    addCollection1(iw1);\n    iw1.close();\n    Directory d2 = new RAMDirectory();\n    IndexWriter iw2 = new IndexWriter(d2, new IndexWriterConfig(TEST_VERSION_CURRENT, new StandardAnalyzer(TEST_VERSION_CURRENT)));\n    addCollection2(iw2);\n    iw2.close();\n\n    Searchable[] s = new Searchable[2];\n    s[0] = new IndexSearcher(d1, true);\n    s[1] = new IndexSearcher(d2, true);\n    multiSearcher = new MultiSearcher(s);\n\n    // create IndexSearcher which contains all documents\n    Directory d = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(d, new IndexWriterConfig(TEST_VERSION_CURRENT, new StandardAnalyzer(TEST_VERSION_CURRENT)));\n    addCollection1(iw);\n    addCollection2(iw);\n    iw.close();\n    singleSearcher = new IndexSearcher(d, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c","date":1281477834,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiSearcherRanking#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiSearcherRanking#setUp().mjava","sourceNew":"  /**\n   * initializes multiSearcher and singleSearcher with the same document set\n   */\n  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    // create MultiSearcher from two seperate searchers\n    Directory d1 = new MockRAMDirectory();\n    IndexWriter iw1 = new IndexWriter(d1, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    addCollection1(iw1);\n    iw1.close();\n    Directory d2 = new MockRAMDirectory();\n    IndexWriter iw2 = new IndexWriter(d2, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    addCollection2(iw2);\n    iw2.close();\n\n    Searchable[] s = new Searchable[2];\n    s[0] = new IndexSearcher(d1, true);\n    s[1] = new IndexSearcher(d2, true);\n    multiSearcher = new MultiSearcher(s);\n\n    // create IndexSearcher which contains all documents\n    Directory d = new MockRAMDirectory();\n    IndexWriter iw = new IndexWriter(d, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    addCollection1(iw);\n    addCollection2(iw);\n    iw.close();\n    singleSearcher = new IndexSearcher(d, true);\n  }\n\n","sourceOld":"  /**\n   * initializes multiSearcher and singleSearcher with the same document set\n   */\n  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    // create MultiSearcher from two seperate searchers\n    Directory d1 = new RAMDirectory();\n    IndexWriter iw1 = new IndexWriter(d1, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    addCollection1(iw1);\n    iw1.close();\n    Directory d2 = new RAMDirectory();\n    IndexWriter iw2 = new IndexWriter(d2, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    addCollection2(iw2);\n    iw2.close();\n\n    Searchable[] s = new Searchable[2];\n    s[0] = new IndexSearcher(d1, true);\n    s[1] = new IndexSearcher(d2, true);\n    multiSearcher = new MultiSearcher(s);\n\n    // create IndexSearcher which contains all documents\n    Directory d = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(d, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    addCollection1(iw);\n    addCollection2(iw);\n    iw.close();\n    singleSearcher = new IndexSearcher(d, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiSearcherRanking#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiSearcherRanking#setUp().mjava","sourceNew":"  /**\n   * initializes multiSearcher and singleSearcher with the same document set\n   */\n  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    Random random = newRandom();\n    // create MultiSearcher from two seperate searchers\n    d1 = newDirectory(random);\n    IndexWriter iw1 = new IndexWriter(d1, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n    addCollection1(iw1);\n    iw1.close();\n    d2 = newDirectory(random);\n    IndexWriter iw2 = new IndexWriter(d2, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n    addCollection2(iw2);\n    iw2.close();\n\n    Searchable[] s = new Searchable[2];\n    s[0] = new IndexSearcher(d1, true);\n    s[1] = new IndexSearcher(d2, true);\n    multiSearcher = new MultiSearcher(s);\n\n    // create IndexSearcher which contains all documents\n    d = newDirectory(random);\n    IndexWriter iw = new IndexWriter(d, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n    addCollection1(iw);\n    addCollection2(iw);\n    iw.close();\n    singleSearcher = new IndexSearcher(d, true);\n  }\n\n","sourceOld":"  /**\n   * initializes multiSearcher and singleSearcher with the same document set\n   */\n  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    // create MultiSearcher from two seperate searchers\n    Directory d1 = new MockRAMDirectory();\n    IndexWriter iw1 = new IndexWriter(d1, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    addCollection1(iw1);\n    iw1.close();\n    Directory d2 = new MockRAMDirectory();\n    IndexWriter iw2 = new IndexWriter(d2, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    addCollection2(iw2);\n    iw2.close();\n\n    Searchable[] s = new Searchable[2];\n    s[0] = new IndexSearcher(d1, true);\n    s[1] = new IndexSearcher(d2, true);\n    multiSearcher = new MultiSearcher(s);\n\n    // create IndexSearcher which contains all documents\n    Directory d = new MockRAMDirectory();\n    IndexWriter iw = new IndexWriter(d, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    addCollection1(iw);\n    addCollection2(iw);\n    iw.close();\n    singleSearcher = new IndexSearcher(d, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiSearcherRanking#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiSearcherRanking#setUp().mjava","sourceNew":"  /**\n   * initializes multiSearcher and singleSearcher with the same document set\n   */\n  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    // create MultiSearcher from two seperate searchers\n    d1 = newDirectory();\n    IndexWriter iw1 = new IndexWriter(d1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    addCollection1(iw1);\n    iw1.close();\n    d2 = newDirectory();\n    IndexWriter iw2 = new IndexWriter(d2, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    addCollection2(iw2);\n    iw2.close();\n\n    Searchable[] s = new Searchable[2];\n    s[0] = new IndexSearcher(d1, true);\n    s[1] = new IndexSearcher(d2, true);\n    multiSearcher = new MultiSearcher(s);\n\n    // create IndexSearcher which contains all documents\n    d = newDirectory();\n    IndexWriter iw = new IndexWriter(d, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    addCollection1(iw);\n    addCollection2(iw);\n    iw.close();\n    singleSearcher = new IndexSearcher(d, true);\n  }\n\n","sourceOld":"  /**\n   * initializes multiSearcher and singleSearcher with the same document set\n   */\n  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    Random random = newRandom();\n    // create MultiSearcher from two seperate searchers\n    d1 = newDirectory(random);\n    IndexWriter iw1 = new IndexWriter(d1, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n    addCollection1(iw1);\n    iw1.close();\n    d2 = newDirectory(random);\n    IndexWriter iw2 = new IndexWriter(d2, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n    addCollection2(iw2);\n    iw2.close();\n\n    Searchable[] s = new Searchable[2];\n    s[0] = new IndexSearcher(d1, true);\n    s[1] = new IndexSearcher(d2, true);\n    multiSearcher = new MultiSearcher(s);\n\n    // create IndexSearcher which contains all documents\n    d = newDirectory(random);\n    IndexWriter iw = new IndexWriter(d, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n    addCollection1(iw);\n    addCollection2(iw);\n    iw.close();\n    singleSearcher = new IndexSearcher(d, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43b04c27924fe393e38e9f0986e32c634f261859","date":1284399440,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiSearcherRanking#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiSearcherRanking#setUp().mjava","sourceNew":"  /**\n   * initializes multiSearcher and singleSearcher with the same document set\n   */\n  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    // create MultiSearcher from two seperate searchers\n    d1 = newDirectory();\n    IndexWriter iw1 = new IndexWriter(d1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    addCollection1(iw1);\n    iw1.close();\n    d2 = newDirectory();\n    IndexWriter iw2 = new IndexWriter(d2, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    addCollection2(iw2);\n    iw2.close();\n\n    Searchable[] s = new Searchable[2];\n    s[0] = new IndexSearcher(d1, true);\n    s[1] = new IndexSearcher(d2, true);\n    multiSearcher = new MultiSearcher(s);\n\n    // create IndexSearcher which contains all documents\n    d = newDirectory();\n    IndexWriter iw = new IndexWriter(d, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    addCollection1(iw);\n    addCollection2(iw);\n    iw.close();\n    singleSearcher = new IndexSearcher(d, true);\n  }\n\n","sourceOld":"  /**\n   * initializes multiSearcher and singleSearcher with the same document set\n   */\n  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    // create MultiSearcher from two seperate searchers\n    d1 = newDirectory();\n    IndexWriter iw1 = new IndexWriter(d1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    addCollection1(iw1);\n    iw1.close();\n    d2 = newDirectory();\n    IndexWriter iw2 = new IndexWriter(d2, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    addCollection2(iw2);\n    iw2.close();\n\n    Searchable[] s = new Searchable[2];\n    s[0] = new IndexSearcher(d1, true);\n    s[1] = new IndexSearcher(d2, true);\n    multiSearcher = new MultiSearcher(s);\n\n    // create IndexSearcher which contains all documents\n    d = newDirectory();\n    IndexWriter iw = new IndexWriter(d, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    addCollection1(iw);\n    addCollection2(iw);\n    iw.close();\n    singleSearcher = new IndexSearcher(d, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiSearcherRanking#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiSearcherRanking#setUp().mjava","sourceNew":"  /**\n   * initializes multiSearcher and singleSearcher with the same document set\n   */\n  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    // create MultiSearcher from two seperate searchers\n    d1 = newDirectory();\n    IndexWriter iw1 = new IndexWriter(d1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    addCollection1(iw1);\n    iw1.close();\n    d2 = newDirectory();\n    IndexWriter iw2 = new IndexWriter(d2, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    addCollection2(iw2);\n    iw2.close();\n\n    Searchable[] s = new Searchable[2];\n    s[0] = new IndexSearcher(d1, true);\n    s[1] = new IndexSearcher(d2, true);\n    multiSearcher = new MultiSearcher(s);\n\n    // create IndexSearcher which contains all documents\n    d = newDirectory();\n    IndexWriter iw = new IndexWriter(d, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    addCollection1(iw);\n    addCollection2(iw);\n    iw.close();\n    singleSearcher = new IndexSearcher(d, true);\n  }\n\n","sourceOld":"  /**\n   * initializes multiSearcher and singleSearcher with the same document set\n   */\n  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    // create MultiSearcher from two seperate searchers\n    Directory d1 = new RAMDirectory();\n    IndexWriter iw1 = new IndexWriter(d1, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    addCollection1(iw1);\n    iw1.close();\n    Directory d2 = new RAMDirectory();\n    IndexWriter iw2 = new IndexWriter(d2, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    addCollection2(iw2);\n    iw2.close();\n\n    Searchable[] s = new Searchable[2];\n    s[0] = new IndexSearcher(d1, true);\n    s[1] = new IndexSearcher(d2, true);\n    multiSearcher = new MultiSearcher(s);\n\n    // create IndexSearcher which contains all documents\n    Directory d = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(d, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    addCollection1(iw);\n    addCollection2(iw);\n    iw.close();\n    singleSearcher = new IndexSearcher(d, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b241ea5e635d896cc0af83cd96ffd0322e0aba7","date":1294226200,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiSearcherRanking#setUp().mjava","sourceNew":null,"sourceOld":"  /**\n   * initializes multiSearcher and singleSearcher with the same document set\n   */\n  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    // create MultiSearcher from two seperate searchers\n    d1 = newDirectory();\n    IndexWriter iw1 = new IndexWriter(d1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    addCollection1(iw1);\n    iw1.close();\n    d2 = newDirectory();\n    IndexWriter iw2 = new IndexWriter(d2, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    addCollection2(iw2);\n    iw2.close();\n\n    Searchable[] s = new Searchable[2];\n    s[0] = new IndexSearcher(d1, true);\n    s[1] = new IndexSearcher(d2, true);\n    multiSearcher = new MultiSearcher(s);\n\n    // create IndexSearcher which contains all documents\n    d = newDirectory();\n    IndexWriter iw = new IndexWriter(d, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    addCollection1(iw);\n    addCollection2(iw);\n    iw.close();\n    singleSearcher = new IndexSearcher(d, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiSearcherRanking#setUp().mjava","sourceNew":null,"sourceOld":"  /**\n   * initializes multiSearcher and singleSearcher with the same document set\n   */\n  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    // create MultiSearcher from two seperate searchers\n    d1 = newDirectory();\n    IndexWriter iw1 = new IndexWriter(d1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    addCollection1(iw1);\n    iw1.close();\n    d2 = newDirectory();\n    IndexWriter iw2 = new IndexWriter(d2, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    addCollection2(iw2);\n    iw2.close();\n\n    Searchable[] s = new Searchable[2];\n    s[0] = new IndexSearcher(d1, true);\n    s[1] = new IndexSearcher(d2, true);\n    multiSearcher = new MultiSearcher(s);\n\n    // create IndexSearcher which contains all documents\n    d = newDirectory();\n    IndexWriter iw = new IndexWriter(d, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    addCollection1(iw);\n    addCollection2(iw);\n    iw.close();\n    singleSearcher = new IndexSearcher(d, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiSearcherRanking#setUp().mjava","sourceNew":null,"sourceOld":"  /**\n   * initializes multiSearcher and singleSearcher with the same document set\n   */\n  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    // create MultiSearcher from two seperate searchers\n    d1 = newDirectory();\n    IndexWriter iw1 = new IndexWriter(d1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    addCollection1(iw1);\n    iw1.close();\n    d2 = newDirectory();\n    IndexWriter iw2 = new IndexWriter(d2, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    addCollection2(iw2);\n    iw2.close();\n\n    Searchable[] s = new Searchable[2];\n    s[0] = new IndexSearcher(d1, true);\n    s[1] = new IndexSearcher(d2, true);\n    multiSearcher = new MultiSearcher(s);\n\n    // create IndexSearcher which contains all documents\n    d = newDirectory();\n    IndexWriter iw = new IndexWriter(d, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    addCollection1(iw);\n    addCollection2(iw);\n    iw.close();\n    singleSearcher = new IndexSearcher(d, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["43b04c27924fe393e38e9f0986e32c634f261859","8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"8b241ea5e635d896cc0af83cd96ffd0322e0aba7":["43b04c27924fe393e38e9f0986e32c634f261859"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c":["d572389229127c297dd1fa5ce4758e1cec41e799"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d572389229127c297dd1fa5ce4758e1cec41e799":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["d572389229127c297dd1fa5ce4758e1cec41e799","43b04c27924fe393e38e9f0986e32c634f261859"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"43b04c27924fe393e38e9f0986e32c634f261859":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":[],"8b241ea5e635d896cc0af83cd96ffd0322e0aba7":["70ad682703b8585f5d0a637efec044d57ec05efb","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["43b04c27924fe393e38e9f0986e32c634f261859"],"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"d572389229127c297dd1fa5ce4758e1cec41e799":["1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["868da859b43505d9d2a023bfeae6dd0c795f5295"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"43b04c27924fe393e38e9f0986e32c634f261859":["70ad682703b8585f5d0a637efec044d57ec05efb","8b241ea5e635d896cc0af83cd96ffd0322e0aba7","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["d572389229127c297dd1fa5ce4758e1cec41e799"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["70ad682703b8585f5d0a637efec044d57ec05efb","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}