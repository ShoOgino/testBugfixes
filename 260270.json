{"path":"solr/contrib/map-reduce/src/java/org/apache/solr/hadoop/morphline/MorphlineMapRunner#map(String,Configuration,Context).mjava","commits":[{"id":"70f91c8322fbffe3a3a897ef20ea19119cac10cd","date":1386170124,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/map-reduce/src/java/org/apache/solr/hadoop/morphline/MorphlineMapRunner#map(String,Configuration,Context).mjava","pathOld":"solr/contrib/solr-mr/src/java/org/apache/solr/hadoop/morphline/MorphlineMapRunner#map(String,Configuration,Context).mjava","sourceNew":"  /**\n   * Extract content from the path specified in the value. Key is useless.\n   */\n  public void map(String value, Configuration configuration, Context context) throws IOException {\n    LOG.info(\"Processing file {}\", value);\n    InputStream in = null;\n    Record record = null;\n    Timer.Context timerContext = elapsedTime.time();\n    try {\n      PathParts parts = new PathParts(value.toString(), configuration);\n      record = getRecord(parts);\n      if (record == null) {\n        return; // ignore\n      }\n      for (Map.Entry<String, String> entry : commandLineMorphlineHeaders.entrySet()) {\n        record.replaceValues(entry.getKey(), entry.getValue());\n      }\n      long fileLength = parts.getFileStatus().getLen();\n      if (disableFileOpen) {\n        in = new ByteArrayInputStream(new byte[0]);\n      } else {\n        in = new BufferedInputStream(parts.getFileSystem().open(parts.getUploadPath()));\n      }\n      record.put(Fields.ATTACHMENT_BODY, in);\n      Notifications.notifyStartSession(morphline);\n      if (!morphline.process(record)) {\n        LOG.warn(\"Morphline {} failed to process record: {}\", morphlineFileAndId, record);\n      }\n      if (context != null) {\n        context.getCounter(MorphlineCounters.class.getName(), MorphlineCounters.FILES_READ.toString()).increment(1);\n        context.getCounter(MorphlineCounters.class.getName(), MorphlineCounters.FILE_BYTES_READ.toString()).increment(fileLength);\n      }\n    } catch (Exception e) {\n      LOG.error(\"Unable to process file \" + value, e);\n      if (context != null) {\n        context.getCounter(getClass().getName() + \".errors\", e.getClass().getName()).increment(1);\n      }\n      morphlineContext.getExceptionHandler().handleException(e, record);\n    } finally {\n      timerContext.stop();\n      if (in != null) {\n        in.close();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Extract content from the path specified in the value. Key is useless.\n   */\n  public void map(String value, Configuration configuration, Context context) throws IOException {\n    LOG.info(\"Processing file {}\", value);\n    InputStream in = null;\n    Record record = null;\n    Timer.Context timerContext = elapsedTime.time();\n    try {\n      PathParts parts = new PathParts(value.toString(), configuration);\n      record = getRecord(parts);\n      if (record == null) {\n        return; // ignore\n      }\n      for (Map.Entry<String, String> entry : commandLineMorphlineHeaders.entrySet()) {\n        record.replaceValues(entry.getKey(), entry.getValue());\n      }\n      long fileLength = parts.getFileStatus().getLen();\n      if (disableFileOpen) {\n        in = new ByteArrayInputStream(new byte[0]);\n      } else {\n        in = new BufferedInputStream(parts.getFileSystem().open(parts.getUploadPath()));\n      }\n      record.put(Fields.ATTACHMENT_BODY, in);\n      Notifications.notifyStartSession(morphline);\n      if (!morphline.process(record)) {\n        LOG.warn(\"Morphline {} failed to process record: {}\", morphlineFileAndId, record);\n      }\n      if (context != null) {\n        context.getCounter(MorphlineCounters.class.getName(), MorphlineCounters.FILES_READ.toString()).increment(1);\n        context.getCounter(MorphlineCounters.class.getName(), MorphlineCounters.FILE_BYTES_READ.toString()).increment(fileLength);\n      }\n    } catch (Exception e) {\n      LOG.error(\"Unable to process file \" + value, e);\n      if (context != null) {\n        context.getCounter(getClass().getName() + \".errors\", e.getClass().getName()).increment(1);\n      }\n      morphlineContext.getExceptionHandler().handleException(e, record);\n    } finally {\n      timerContext.stop();\n      if (in != null) {\n        in.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/contrib/map-reduce/src/java/org/apache/solr/hadoop/morphline/MorphlineMapRunner#map(String,Configuration,Context).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Extract content from the path specified in the value. Key is useless.\n   */\n  public void map(String value, Configuration configuration, Context context) throws IOException {\n    LOG.info(\"Processing file {}\", value);\n    InputStream in = null;\n    Record record = null;\n    Timer.Context timerContext = elapsedTime.time();\n    try {\n      PathParts parts = new PathParts(value.toString(), configuration);\n      record = getRecord(parts);\n      if (record == null) {\n        return; // ignore\n      }\n      for (Map.Entry<String, String> entry : commandLineMorphlineHeaders.entrySet()) {\n        record.replaceValues(entry.getKey(), entry.getValue());\n      }\n      long fileLength = parts.getFileStatus().getLen();\n      if (disableFileOpen) {\n        in = new ByteArrayInputStream(new byte[0]);\n      } else {\n        in = new BufferedInputStream(parts.getFileSystem().open(parts.getUploadPath()));\n      }\n      record.put(Fields.ATTACHMENT_BODY, in);\n      Notifications.notifyStartSession(morphline);\n      if (!morphline.process(record)) {\n        LOG.warn(\"Morphline {} failed to process record: {}\", morphlineFileAndId, record);\n      }\n      if (context != null) {\n        context.getCounter(MorphlineCounters.class.getName(), MorphlineCounters.FILES_READ.toString()).increment(1);\n        context.getCounter(MorphlineCounters.class.getName(), MorphlineCounters.FILE_BYTES_READ.toString()).increment(fileLength);\n      }\n    } catch (Exception e) {\n      LOG.error(\"Unable to process file \" + value, e);\n      if (context != null) {\n        context.getCounter(getClass().getName() + \".errors\", e.getClass().getName()).increment(1);\n      }\n      morphlineContext.getExceptionHandler().handleException(e, record);\n    } finally {\n      timerContext.stop();\n      if (in != null) {\n        in.close();\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"12109b652e9210b8d58fca47f6c4a725d058a58e","date":1490373076,"type":4,"author":"Steve Rowe","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/map-reduce/src/java/org/apache/solr/hadoop/morphline/MorphlineMapRunner#map(String,Configuration,Context).mjava","sourceNew":null,"sourceOld":"  /**\n   * Extract content from the path specified in the value. Key is useless.\n   */\n  public void map(String value, Configuration configuration, Context context) throws IOException {\n    LOG.info(\"Processing file {}\", value);\n    InputStream in = null;\n    Record record = null;\n    Timer.Context timerContext = elapsedTime.time();\n    try {\n      PathParts parts = new PathParts(value.toString(), configuration);\n      record = getRecord(parts);\n      if (record == null) {\n        return; // ignore\n      }\n      for (Map.Entry<String, String> entry : commandLineMorphlineHeaders.entrySet()) {\n        record.replaceValues(entry.getKey(), entry.getValue());\n      }\n      long fileLength = parts.getFileStatus().getLen();\n      if (disableFileOpen) {\n        in = new ByteArrayInputStream(new byte[0]);\n      } else {\n        in = new BufferedInputStream(parts.getFileSystem().open(parts.getUploadPath()));\n      }\n      record.put(Fields.ATTACHMENT_BODY, in);\n      Notifications.notifyStartSession(morphline);\n      if (!morphline.process(record)) {\n        LOG.warn(\"Morphline {} failed to process record: {}\", morphlineFileAndId, record);\n      }\n      if (context != null) {\n        context.getCounter(MorphlineCounters.class.getName(), MorphlineCounters.FILES_READ.toString()).increment(1);\n        context.getCounter(MorphlineCounters.class.getName(), MorphlineCounters.FILE_BYTES_READ.toString()).increment(fileLength);\n      }\n    } catch (Exception e) {\n      LOG.error(\"Unable to process file \" + value, e);\n      if (context != null) {\n        context.getCounter(getClass().getName() + \".errors\", e.getClass().getName()).increment(1);\n      }\n      morphlineContext.getExceptionHandler().handleException(e, record);\n    } finally {\n      timerContext.stop();\n      if (in != null) {\n        in.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe1c4aa9af769a38e878f608070f672efbeac27f","date":1490594650,"type":4,"author":"Steve Rowe","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/map-reduce/src/java/org/apache/solr/hadoop/morphline/MorphlineMapRunner#map(String,Configuration,Context).mjava","sourceNew":null,"sourceOld":"  /**\n   * Extract content from the path specified in the value. Key is useless.\n   */\n  public void map(String value, Configuration configuration, Context context) throws IOException {\n    LOG.info(\"Processing file {}\", value);\n    InputStream in = null;\n    Record record = null;\n    Timer.Context timerContext = elapsedTime.time();\n    try {\n      PathParts parts = new PathParts(value.toString(), configuration);\n      record = getRecord(parts);\n      if (record == null) {\n        return; // ignore\n      }\n      for (Map.Entry<String, String> entry : commandLineMorphlineHeaders.entrySet()) {\n        record.replaceValues(entry.getKey(), entry.getValue());\n      }\n      long fileLength = parts.getFileStatus().getLen();\n      if (disableFileOpen) {\n        in = new ByteArrayInputStream(new byte[0]);\n      } else {\n        in = new BufferedInputStream(parts.getFileSystem().open(parts.getUploadPath()));\n      }\n      record.put(Fields.ATTACHMENT_BODY, in);\n      Notifications.notifyStartSession(morphline);\n      if (!morphline.process(record)) {\n        LOG.warn(\"Morphline {} failed to process record: {}\", morphlineFileAndId, record);\n      }\n      if (context != null) {\n        context.getCounter(MorphlineCounters.class.getName(), MorphlineCounters.FILES_READ.toString()).increment(1);\n        context.getCounter(MorphlineCounters.class.getName(), MorphlineCounters.FILE_BYTES_READ.toString()).increment(fileLength);\n      }\n    } catch (Exception e) {\n      LOG.error(\"Unable to process file \" + value, e);\n      if (context != null) {\n        context.getCounter(getClass().getName() + \".errors\", e.getClass().getName()).increment(1);\n      }\n      morphlineContext.getExceptionHandler().handleException(e, record);\n    } finally {\n      timerContext.stop();\n      if (in != null) {\n        in.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70f91c8322fbffe3a3a897ef20ea19119cac10cd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"12109b652e9210b8d58fca47f6c4a725d058a58e":["70f91c8322fbffe3a3a897ef20ea19119cac10cd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","70f91c8322fbffe3a3a897ef20ea19119cac10cd"],"fe1c4aa9af769a38e878f608070f672efbeac27f":["70f91c8322fbffe3a3a897ef20ea19119cac10cd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["12109b652e9210b8d58fca47f6c4a725d058a58e"]},"commit2Childs":{"70f91c8322fbffe3a3a897ef20ea19119cac10cd":["12109b652e9210b8d58fca47f6c4a725d058a58e","74f45af4339b0daf7a95c820ab88c1aea74fbce0","fe1c4aa9af769a38e878f608070f672efbeac27f"],"12109b652e9210b8d58fca47f6c4a725d058a58e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["70f91c8322fbffe3a3a897ef20ea19119cac10cd","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"fe1c4aa9af769a38e878f608070f672efbeac27f":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","fe1c4aa9af769a38e878f608070f672efbeac27f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}