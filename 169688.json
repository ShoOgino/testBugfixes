{"path":"solr/core/src/java/org/apache/solr/handler/SnapPuller.FileFetcher#fetchFile().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller.FileFetcher#fetchFile().mjava","pathOld":"solr/src/java/org/apache/solr/handler/SnapPuller.FileFetcher#fetchFile().mjava","sourceNew":"    /**\n     * The main method which downloads file\n     */\n    void fetchFile() throws Exception {\n      try {\n        while (true) {\n          final FastInputStream is = getStream();\n          int result;\n          try {\n            //fetch packets one by one in a single request\n            result = fetchPackets(is);\n            if (result == 0 || result == NO_CONTENT) {\n              // if the file is downloaded properly set the\n              //  timestamp same as that in the server\n              if (file.exists() && lastmodified > 0)\n                file.setLastModified(lastmodified);\n              return;\n            }\n            //if there is an error continue. But continue from the point where it got broken\n          } finally {\n            IOUtils.closeQuietly(is);\n          }\n        }\n      } finally {\n        cleanup();\n        //if cleanup suceeds . The file is downloaded fully. do an fsync\n        fsyncService.submit(new Runnable(){\n          public void run() {\n            try {\n              FileUtils.sync(file);\n            } catch (IOException e) {\n              fsyncException = e;\n            }\n          }\n        });\n      }\n    }\n\n","sourceOld":"    /**\n     * The main method which downloads file\n     */\n    void fetchFile() throws Exception {\n      try {\n        while (true) {\n          final FastInputStream is = getStream();\n          int result;\n          try {\n            //fetch packets one by one in a single request\n            result = fetchPackets(is);\n            if (result == 0 || result == NO_CONTENT) {\n              // if the file is downloaded properly set the\n              //  timestamp same as that in the server\n              if (file.exists() && lastmodified > 0)\n                file.setLastModified(lastmodified);\n              return;\n            }\n            //if there is an error continue. But continue from the point where it got broken\n          } finally {\n            IOUtils.closeQuietly(is);\n          }\n        }\n      } finally {\n        cleanup();\n        //if cleanup suceeds . The file is downloaded fully. do an fsync\n        fsyncService.submit(new Runnable(){\n          public void run() {\n            try {\n              FileUtils.sync(file);\n            } catch (IOException e) {\n              fsyncException = e;\n            }\n          }\n        });\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller.FileFetcher#fetchFile().mjava","pathOld":"solr/src/java/org/apache/solr/handler/SnapPuller.FileFetcher#fetchFile().mjava","sourceNew":"    /**\n     * The main method which downloads file\n     */\n    void fetchFile() throws Exception {\n      try {\n        while (true) {\n          final FastInputStream is = getStream();\n          int result;\n          try {\n            //fetch packets one by one in a single request\n            result = fetchPackets(is);\n            if (result == 0 || result == NO_CONTENT) {\n              // if the file is downloaded properly set the\n              //  timestamp same as that in the server\n              if (file.exists() && lastmodified > 0)\n                file.setLastModified(lastmodified);\n              return;\n            }\n            //if there is an error continue. But continue from the point where it got broken\n          } finally {\n            IOUtils.closeQuietly(is);\n          }\n        }\n      } finally {\n        cleanup();\n        //if cleanup suceeds . The file is downloaded fully. do an fsync\n        fsyncService.submit(new Runnable(){\n          public void run() {\n            try {\n              FileUtils.sync(file);\n            } catch (IOException e) {\n              fsyncException = e;\n            }\n          }\n        });\n      }\n    }\n\n","sourceOld":"    /**\n     * The main method which downloads file\n     */\n    void fetchFile() throws Exception {\n      try {\n        while (true) {\n          final FastInputStream is = getStream();\n          int result;\n          try {\n            //fetch packets one by one in a single request\n            result = fetchPackets(is);\n            if (result == 0 || result == NO_CONTENT) {\n              // if the file is downloaded properly set the\n              //  timestamp same as that in the server\n              if (file.exists() && lastmodified > 0)\n                file.setLastModified(lastmodified);\n              return;\n            }\n            //if there is an error continue. But continue from the point where it got broken\n          } finally {\n            IOUtils.closeQuietly(is);\n          }\n        }\n      } finally {\n        cleanup();\n        //if cleanup suceeds . The file is downloaded fully. do an fsync\n        fsyncService.submit(new Runnable(){\n          public void run() {\n            try {\n              FileUtils.sync(file);\n            } catch (IOException e) {\n              fsyncException = e;\n            }\n          }\n        });\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller.FileFetcher#fetchFile().mjava","pathOld":"solr/src/java/org/apache/solr/handler/SnapPuller.FileFetcher#fetchFile().mjava","sourceNew":"    /**\n     * The main method which downloads file\n     */\n    void fetchFile() throws Exception {\n      try {\n        while (true) {\n          final FastInputStream is = getStream();\n          int result;\n          try {\n            //fetch packets one by one in a single request\n            result = fetchPackets(is);\n            if (result == 0 || result == NO_CONTENT) {\n              // if the file is downloaded properly set the\n              //  timestamp same as that in the server\n              if (file.exists() && lastmodified > 0)\n                file.setLastModified(lastmodified);\n              return;\n            }\n            //if there is an error continue. But continue from the point where it got broken\n          } finally {\n            IOUtils.closeQuietly(is);\n          }\n        }\n      } finally {\n        cleanup();\n        //if cleanup suceeds . The file is downloaded fully. do an fsync\n        fsyncService.submit(new Runnable(){\n          public void run() {\n            try {\n              FileUtils.sync(file);\n            } catch (IOException e) {\n              fsyncException = e;\n            }\n          }\n        });\n      }\n    }\n\n","sourceOld":"    /**\n     * The main method which downloads file\n     */\n    void fetchFile() throws Exception {\n      try {\n        while (true) {\n          final FastInputStream is = getStream();\n          int result;\n          try {\n            //fetch packets one by one in a single request\n            result = fetchPackets(is);\n            if (result == 0 || result == NO_CONTENT) {\n              // if the file is downloaded properly set the\n              //  timestamp same as that in the server\n              if (file.exists() && lastmodified > 0)\n                file.setLastModified(lastmodified);\n              return;\n            }\n            //if there is an error continue. But continue from the point where it got broken\n          } finally {\n            IOUtils.closeQuietly(is);\n          }\n        }\n      } finally {\n        cleanup();\n        //if cleanup suceeds . The file is downloaded fully. do an fsync\n        fsyncService.submit(new Runnable(){\n          public void run() {\n            try {\n              FileUtils.sync(file);\n            } catch (IOException e) {\n              fsyncException = e;\n            }\n          }\n        });\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d9405f486872f1e416304dfe389741f4ee2f8a4d","date":1351276739,"type":6,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller.DirectoryFileFetcher#fetchFile().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller.FileFetcher#fetchFile().mjava","sourceNew":"    /**\n     * The main method which downloads file\n     */\n    void fetchFile() throws Exception {\n      try {\n        while (true) {\n          final FastInputStream is = getStream();\n          int result;\n          try {\n            //fetch packets one by one in a single request\n            result = fetchPackets(is);\n            if (result == 0 || result == NO_CONTENT) {\n\n              return;\n            }\n            //if there is an error continue. But continue from the point where it got broken\n          } finally {\n            IOUtils.closeQuietly(is);\n          }\n        }\n      } finally {\n        cleanup();\n        //if cleanup suceeds . The file is downloaded fully. do an fsync\n        fsyncService.submit(new Runnable(){\n          public void run() {\n            try {\n              copy2Dir.sync(Collections.singleton(saveAs));\n            } catch (IOException e) {\n              fsyncException = e;\n            }\n          }\n        });\n      }\n    }\n\n","sourceOld":"    /**\n     * The main method which downloads file\n     */\n    void fetchFile() throws Exception {\n      try {\n        while (true) {\n          final FastInputStream is = getStream();\n          int result;\n          try {\n            //fetch packets one by one in a single request\n            result = fetchPackets(is);\n            if (result == 0 || result == NO_CONTENT) {\n              // if the file is downloaded properly set the\n              //  timestamp same as that in the server\n              if (file.exists() && lastmodified > 0)\n                file.setLastModified(lastmodified);\n              return;\n            }\n            //if there is an error continue. But continue from the point where it got broken\n          } finally {\n            IOUtils.closeQuietly(is);\n          }\n        }\n      } finally {\n        cleanup();\n        //if cleanup suceeds . The file is downloaded fully. do an fsync\n        fsyncService.submit(new Runnable(){\n          public void run() {\n            try {\n              FileUtils.sync(file);\n            } catch (IOException e) {\n              fsyncException = e;\n            }\n          }\n        });\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d9405f486872f1e416304dfe389741f4ee2f8a4d","date":1351276739,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller.LocalFsFileFetcher#fetchFile().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller.FileFetcher#fetchFile().mjava","sourceNew":"    /**\n     * The main method which downloads file\n     */\n    void fetchFile() throws Exception {\n      try {\n        while (true) {\n          final FastInputStream is = getStream();\n          int result;\n          try {\n            //fetch packets one by one in a single request\n            result = fetchPackets(is);\n            if (result == 0 || result == NO_CONTENT) {\n              return;\n            }\n            //if there is an error continue. But continue from the point where it got broken\n          } finally {\n            IOUtils.closeQuietly(is);\n          }\n        }\n      } finally {\n        cleanup();\n        //if cleanup suceeds . The file is downloaded fully. do an fsync\n        fsyncService.submit(new Runnable(){\n          public void run() {\n            try {\n              FileUtils.sync(file);\n            } catch (IOException e) {\n              fsyncException = e;\n            }\n          }\n        });\n      }\n    }\n\n","sourceOld":"    /**\n     * The main method which downloads file\n     */\n    void fetchFile() throws Exception {\n      try {\n        while (true) {\n          final FastInputStream is = getStream();\n          int result;\n          try {\n            //fetch packets one by one in a single request\n            result = fetchPackets(is);\n            if (result == 0 || result == NO_CONTENT) {\n              // if the file is downloaded properly set the\n              //  timestamp same as that in the server\n              if (file.exists() && lastmodified > 0)\n                file.setLastModified(lastmodified);\n              return;\n            }\n            //if there is an error continue. But continue from the point where it got broken\n          } finally {\n            IOUtils.closeQuietly(is);\n          }\n        }\n      } finally {\n        cleanup();\n        //if cleanup suceeds . The file is downloaded fully. do an fsync\n        fsyncService.submit(new Runnable(){\n          public void run() {\n            try {\n              FileUtils.sync(file);\n            } catch (IOException e) {\n              fsyncException = e;\n            }\n          }\n        });\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f2126b84bd093fa3d921582a109a0ee578c28126","date":1351522501,"type":6,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller.DirectoryFileFetcher#fetchFile().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller.FileFetcher#fetchFile().mjava","sourceNew":"    /**\n     * The main method which downloads file\n     */\n    void fetchFile() throws Exception {\n      try {\n        while (true) {\n          final FastInputStream is = getStream();\n          int result;\n          try {\n            //fetch packets one by one in a single request\n            result = fetchPackets(is);\n            if (result == 0 || result == NO_CONTENT) {\n\n              return;\n            }\n            //if there is an error continue. But continue from the point where it got broken\n          } finally {\n            IOUtils.closeQuietly(is);\n          }\n        }\n      } finally {\n        cleanup();\n        //if cleanup suceeds . The file is downloaded fully. do an fsync\n        fsyncService.submit(new Runnable(){\n          public void run() {\n            try {\n              copy2Dir.sync(Collections.singleton(saveAs));\n            } catch (IOException e) {\n              fsyncException = e;\n            }\n          }\n        });\n      }\n    }\n\n","sourceOld":"    /**\n     * The main method which downloads file\n     */\n    void fetchFile() throws Exception {\n      try {\n        while (true) {\n          final FastInputStream is = getStream();\n          int result;\n          try {\n            //fetch packets one by one in a single request\n            result = fetchPackets(is);\n            if (result == 0 || result == NO_CONTENT) {\n              // if the file is downloaded properly set the\n              //  timestamp same as that in the server\n              if (file.exists() && lastmodified > 0)\n                file.setLastModified(lastmodified);\n              return;\n            }\n            //if there is an error continue. But continue from the point where it got broken\n          } finally {\n            IOUtils.closeQuietly(is);\n          }\n        }\n      } finally {\n        cleanup();\n        //if cleanup suceeds . The file is downloaded fully. do an fsync\n        fsyncService.submit(new Runnable(){\n          public void run() {\n            try {\n              FileUtils.sync(file);\n            } catch (IOException e) {\n              fsyncException = e;\n            }\n          }\n        });\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2126b84bd093fa3d921582a109a0ee578c28126","date":1351522501,"type":5,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller.LocalFsFileFetcher#fetchFile().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller.FileFetcher#fetchFile().mjava","sourceNew":"    /**\n     * The main method which downloads file\n     */\n    void fetchFile() throws Exception {\n      try {\n        while (true) {\n          final FastInputStream is = getStream();\n          int result;\n          try {\n            //fetch packets one by one in a single request\n            result = fetchPackets(is);\n            if (result == 0 || result == NO_CONTENT) {\n              return;\n            }\n            //if there is an error continue. But continue from the point where it got broken\n          } finally {\n            IOUtils.closeQuietly(is);\n          }\n        }\n      } finally {\n        cleanup();\n        //if cleanup suceeds . The file is downloaded fully. do an fsync\n        fsyncService.submit(new Runnable(){\n          public void run() {\n            try {\n              FileUtils.sync(file);\n            } catch (IOException e) {\n              fsyncException = e;\n            }\n          }\n        });\n      }\n    }\n\n","sourceOld":"    /**\n     * The main method which downloads file\n     */\n    void fetchFile() throws Exception {\n      try {\n        while (true) {\n          final FastInputStream is = getStream();\n          int result;\n          try {\n            //fetch packets one by one in a single request\n            result = fetchPackets(is);\n            if (result == 0 || result == NO_CONTENT) {\n              // if the file is downloaded properly set the\n              //  timestamp same as that in the server\n              if (file.exists() && lastmodified > 0)\n                file.setLastModified(lastmodified);\n              return;\n            }\n            //if there is an error continue. But continue from the point where it got broken\n          } finally {\n            IOUtils.closeQuietly(is);\n          }\n        }\n      } finally {\n        cleanup();\n        //if cleanup suceeds . The file is downloaded fully. do an fsync\n        fsyncService.submit(new Runnable(){\n          public void run() {\n            try {\n              FileUtils.sync(file);\n            } catch (IOException e) {\n              fsyncException = e;\n            }\n          }\n        });\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dea8e36e8c36d610840396c282a5affe3f722f4e","date":1422297045,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller.FileFetcher#fetchFile().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller.LocalFsFileFetcher#fetchFile().mjava","sourceNew":"    /**\n     * The main method which downloads file\n     */\n    public void fetchFile() throws Exception {\n      try {\n        while (true) {\n          final FastInputStream is = getStream();\n          int result;\n          try {\n            //fetch packets one by one in a single request\n            result = fetchPackets(is);\n            if (result == 0 || result == NO_CONTENT) {\n\n              return;\n            }\n            //if there is an error continue. But continue from the point where it got broken\n          } finally {\n            IOUtils.closeQuietly(is);\n          }\n        }\n      } finally {\n        cleanup();\n        //if cleanup succeeds . The file is downloaded fully. do an fsync\n        fsyncService.submit(new Runnable(){\n          @Override\n          public void run() {\n            try {\n              file.sync();\n            } catch (IOException e) {\n              fsyncException = e;\n            }\n          }\n        });\n      }\n    }\n\n","sourceOld":"    /**\n     * The main method which downloads file\n     */\n    void fetchFile() throws Exception {\n      try {\n        while (true) {\n          final FastInputStream is = getStream();\n          int result;\n          try {\n            //fetch packets one by one in a single request\n            result = fetchPackets(is);\n            if (result == 0 || result == NO_CONTENT) {\n              return;\n            }\n            //if there is an error continue. But continue from the point where it got broken\n          } finally {\n            IOUtils.closeQuietly(is);\n          }\n        }\n      } finally {\n        cleanup();\n        //if cleanup suceeds . The file is downloaded fully. do an fsync\n        fsyncService.submit(new Runnable(){\n          @Override\n          public void run() {\n            try {\n              FileUtils.sync(file);\n            } catch (IOException e) {\n              fsyncException = e;\n            }\n          }\n        });\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"20f6b7cff3771384f27af0f059795d7e64aff6b9","date":1425498309,"type":5,"author":"Ramkumar Aiyengar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher.FileFetcher#fetchFile().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller.FileFetcher#fetchFile().mjava","sourceNew":"    /**\n     * The main method which downloads file\n     */\n    public void fetchFile() throws Exception {\n      try {\n        while (true) {\n          final FastInputStream is = getStream();\n          int result;\n          try {\n            //fetch packets one by one in a single request\n            result = fetchPackets(is);\n            if (result == 0 || result == NO_CONTENT) {\n\n              return;\n            }\n            //if there is an error continue. But continue from the point where it got broken\n          } finally {\n            IOUtils.closeQuietly(is);\n          }\n        }\n      } finally {\n        cleanup();\n        //if cleanup succeeds . The file is downloaded fully. do an fsync\n        fsyncService.submit(new Runnable(){\n          @Override\n          public void run() {\n            try {\n              file.sync();\n            } catch (IOException e) {\n              fsyncException = e;\n            }\n          }\n        });\n      }\n    }\n\n","sourceOld":"    /**\n     * The main method which downloads file\n     */\n    public void fetchFile() throws Exception {\n      try {\n        while (true) {\n          final FastInputStream is = getStream();\n          int result;\n          try {\n            //fetch packets one by one in a single request\n            result = fetchPackets(is);\n            if (result == 0 || result == NO_CONTENT) {\n\n              return;\n            }\n            //if there is an error continue. But continue from the point where it got broken\n          } finally {\n            IOUtils.closeQuietly(is);\n          }\n        }\n      } finally {\n        cleanup();\n        //if cleanup succeeds . The file is downloaded fully. do an fsync\n        fsyncService.submit(new Runnable(){\n          @Override\n          public void run() {\n            try {\n              file.sync();\n            } catch (IOException e) {\n              fsyncException = e;\n            }\n          }\n        });\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":5,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher.FileFetcher#fetchFile().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller.FileFetcher#fetchFile().mjava","sourceNew":"    /**\n     * The main method which downloads file\n     */\n    public void fetchFile() throws Exception {\n      try {\n        while (true) {\n          final FastInputStream is = getStream();\n          int result;\n          try {\n            //fetch packets one by one in a single request\n            result = fetchPackets(is);\n            if (result == 0 || result == NO_CONTENT) {\n\n              return;\n            }\n            //if there is an error continue. But continue from the point where it got broken\n          } finally {\n            IOUtils.closeQuietly(is);\n          }\n        }\n      } finally {\n        cleanup();\n        //if cleanup succeeds . The file is downloaded fully. do an fsync\n        fsyncService.submit(new Runnable(){\n          @Override\n          public void run() {\n            try {\n              file.sync();\n            } catch (IOException e) {\n              fsyncException = e;\n            }\n          }\n        });\n      }\n    }\n\n","sourceOld":"    /**\n     * The main method which downloads file\n     */\n    public void fetchFile() throws Exception {\n      try {\n        while (true) {\n          final FastInputStream is = getStream();\n          int result;\n          try {\n            //fetch packets one by one in a single request\n            result = fetchPackets(is);\n            if (result == 0 || result == NO_CONTENT) {\n\n              return;\n            }\n            //if there is an error continue. But continue from the point where it got broken\n          } finally {\n            IOUtils.closeQuietly(is);\n          }\n        }\n      } finally {\n        cleanup();\n        //if cleanup succeeds . The file is downloaded fully. do an fsync\n        fsyncService.submit(new Runnable(){\n          @Override\n          public void run() {\n            try {\n              file.sync();\n            } catch (IOException e) {\n              fsyncException = e;\n            }\n          }\n        });\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["dea8e36e8c36d610840396c282a5affe3f722f4e","20f6b7cff3771384f27af0f059795d7e64aff6b9"],"20f6b7cff3771384f27af0f059795d7e64aff6b9":["dea8e36e8c36d610840396c282a5affe3f722f4e"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"dea8e36e8c36d610840396c282a5affe3f722f4e":["d9405f486872f1e416304dfe389741f4ee2f8a4d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d9405f486872f1e416304dfe389741f4ee2f8a4d":["c26f00b574427b55127e869b935845554afde1fa"],"f2126b84bd093fa3d921582a109a0ee578c28126":["c26f00b574427b55127e869b935845554afde1fa","d9405f486872f1e416304dfe389741f4ee2f8a4d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["20f6b7cff3771384f27af0f059795d7e64aff6b9"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"20f6b7cff3771384f27af0f059795d7e64aff6b9":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["d9405f486872f1e416304dfe389741f4ee2f8a4d","f2126b84bd093fa3d921582a109a0ee578c28126"],"dea8e36e8c36d610840396c282a5affe3f722f4e":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","20f6b7cff3771384f27af0f059795d7e64aff6b9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"d9405f486872f1e416304dfe389741f4ee2f8a4d":["dea8e36e8c36d610840396c282a5affe3f722f4e","f2126b84bd093fa3d921582a109a0ee578c28126"],"f2126b84bd093fa3d921582a109a0ee578c28126":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","a258fbb26824fd104ed795e5d9033d2d040049ee","f2126b84bd093fa3d921582a109a0ee578c28126","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}