{"path":"src/java/org/apache/solr/search/QueryParsing#toString(Query,IndexSchema,Appendable,int).mjava","commits":[{"id":"0c3e228bf650e96f3002a8fb73dd0c13d55af077","date":1138253849,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/search/QueryParsing#toString(Query,IndexSchema,Appendable,int).mjava","pathOld":"/dev/null","sourceNew":"  public static void toString(Query query, IndexSchema schema, Appendable out, int flags) throws IOException {\n    boolean writeBoost=true;\n\n    if (query instanceof TermQuery) {\n      TermQuery q = (TermQuery)query;\n      Term t = q.getTerm();\n      FieldType ft = writeFieldName(t.field(), schema, out, flags);\n      writeFieldVal(t.text(), ft, out, flags);\n    } else if (query instanceof RangeQuery) {\n      RangeQuery q = (RangeQuery)query;\n      String fname = q.getField();\n      FieldType ft = writeFieldName(fname, schema, out, flags);\n      out.append( q.isInclusive() ? '[' : '{' );\n      Term lt = q.getLowerTerm();\n      Term ut = q.getUpperTerm();\n      if (lt==null) {\n        out.append('*');\n      } else {\n        writeFieldVal(lt.text(), ft, out, flags);\n      }\n\n      out.append(\" TO \");\n\n      if (ut==null) {\n        out.append('*');\n      } else {\n        writeFieldVal(ut.text(), ft, out, flags);\n      }\n\n      out.append( q.isInclusive() ? ']' : '}' );\n\n    } else if (query instanceof ConstantScoreRangeQuery) {\n      ConstantScoreRangeQuery q = (ConstantScoreRangeQuery)query;\n      String fname = q.getField();\n      FieldType ft = writeFieldName(fname, schema, out, flags);\n      out.append( q.includesLower() ? '[' : '{' );\n      String lt = q.getLowerVal();\n      String ut = q.getUpperVal();\n      if (lt==null) {\n        out.append('*');\n      } else {\n        writeFieldVal(lt, ft, out, flags);\n      }\n\n      out.append(\" TO \");\n\n      if (ut==null) {\n        out.append('*');\n      } else {\n        writeFieldVal(ut, ft, out, flags);\n      }\n\n      out.append( q.includesUpper() ? ']' : '}' );\n    } else if (query instanceof BooleanQuery) {\n      BooleanQuery q = (BooleanQuery)query;\n      boolean needParens=false;\n\n      if (q.getBoost() != 1.0 || q.getMinimumNumberShouldMatch() != 0) {\n        needParens=true;\n      }\n      if (needParens) {\n        out.append('(');\n      }\n      BooleanClause[] clauses = q.getClauses();\n      boolean first=true;\n      for (BooleanClause c : clauses) {\n        if (!first) {\n          out.append(' ');\n        } else {\n          first=false;\n        }\n\n        if (c.prohibited) {\n          out.append('-');\n        } else if (c.required) {\n          out.append('+');\n        }\n        Query subQuery = c.query;\n        boolean wrapQuery=false;\n\n        // TODO: may need to put parens around other types\n        // of queries too, depending on future syntax.\n        if (subQuery instanceof BooleanQuery) {\n          wrapQuery=true;\n        }\n\n        if (wrapQuery) {\n          out.append('(');\n        }\n\n        toString(subQuery, schema, out, flags);\n\n        if (wrapQuery) {\n          out.append(')');\n        }\n      }\n\n      if (needParens) {\n        out.append(')');\n      }\n      if (q.getMinimumNumberShouldMatch()>0) {\n        out.append('~');\n        out.append(Integer.toString(q.getMinimumNumberShouldMatch()));\n      }\n\n    } else if (query instanceof PrefixQuery) {\n      PrefixQuery q = (PrefixQuery)query;\n      Term prefix = q.getPrefix();\n      FieldType ft = writeFieldName(prefix.field(), schema, out, flags);\n      out.append(prefix.text());\n      out.append('*');\n    } else if (query instanceof ConstantScorePrefixQuery) {\n      ConstantScorePrefixQuery q = (ConstantScorePrefixQuery)query;\n      Term prefix = q.getPrefix();\n      FieldType ft = writeFieldName(prefix.field(), schema, out, flags);\n      out.append(prefix.text());\n      out.append('*');\n    } else if (query instanceof WildcardQuery) {\n      out.append(query.toString());\n      writeBoost=false;\n    } else if (query instanceof FuzzyQuery) {\n      out.append(query.toString());\n      writeBoost=false;      \n    } else if (query instanceof ConstantScoreQuery) {\n      out.append(query.toString());\n      writeBoost=false;\n    } else {\n      out.append(query.getClass().getSimpleName()\n              + '(' + query.toString() + ')' );\n      writeBoost=false;\n    }\n\n    if (writeBoost && query.getBoost() != 1.0f) {\n      out.append(\"^\");\n      out.append(Float.toString(query.getBoost()));\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["7f84d51c90072fcb78a446a4dad288060aca5f94","7f84d51c90072fcb78a446a4dad288060aca5f94","7f84d51c90072fcb78a446a4dad288060aca5f94"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7c7040334a42400ca67824559be90a1f2f2c9e63","date":1142276541,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/search/QueryParsing#toString(Query,IndexSchema,Appendable,int).mjava","pathOld":"src/java/org/apache/solr/search/QueryParsing#toString(Query,IndexSchema,Appendable,int).mjava","sourceNew":"  public static void toString(Query query, IndexSchema schema, Appendable out, int flags) throws IOException {\n    boolean writeBoost=true;\n\n    if (query instanceof TermQuery) {\n      TermQuery q = (TermQuery)query;\n      Term t = q.getTerm();\n      FieldType ft = writeFieldName(t.field(), schema, out, flags);\n      writeFieldVal(t.text(), ft, out, flags);\n    } else if (query instanceof RangeQuery) {\n      RangeQuery q = (RangeQuery)query;\n      String fname = q.getField();\n      FieldType ft = writeFieldName(fname, schema, out, flags);\n      out.append( q.isInclusive() ? '[' : '{' );\n      Term lt = q.getLowerTerm();\n      Term ut = q.getUpperTerm();\n      if (lt==null) {\n        out.append('*');\n      } else {\n        writeFieldVal(lt.text(), ft, out, flags);\n      }\n\n      out.append(\" TO \");\n\n      if (ut==null) {\n        out.append('*');\n      } else {\n        writeFieldVal(ut.text(), ft, out, flags);\n      }\n\n      out.append( q.isInclusive() ? ']' : '}' );\n\n    } else if (query instanceof ConstantScoreRangeQuery) {\n      ConstantScoreRangeQuery q = (ConstantScoreRangeQuery)query;\n      String fname = q.getField();\n      FieldType ft = writeFieldName(fname, schema, out, flags);\n      out.append( q.includesLower() ? '[' : '{' );\n      String lt = q.getLowerVal();\n      String ut = q.getUpperVal();\n      if (lt==null) {\n        out.append('*');\n      } else {\n        writeFieldVal(lt, ft, out, flags);\n      }\n\n      out.append(\" TO \");\n\n      if (ut==null) {\n        out.append('*');\n      } else {\n        writeFieldVal(ut, ft, out, flags);\n      }\n\n      out.append( q.includesUpper() ? ']' : '}' );\n    } else if (query instanceof BooleanQuery) {\n      BooleanQuery q = (BooleanQuery)query;\n      boolean needParens=false;\n\n      if (q.getBoost() != 1.0 || q.getMinimumNumberShouldMatch() != 0) {\n        needParens=true;\n      }\n      if (needParens) {\n        out.append('(');\n      }\n      BooleanClause[] clauses = q.getClauses();\n      boolean first=true;\n      for (BooleanClause c : clauses) {\n        if (!first) {\n          out.append(' ');\n        } else {\n          first=false;\n        }\n\n        if (c.isProhibited()) {\n          out.append('-');\n        } else if (c.isRequired()) {\n          out.append('+');\n        }\n        Query subQuery = c.getQuery();\n        boolean wrapQuery=false;\n\n        // TODO: may need to put parens around other types\n        // of queries too, depending on future syntax.\n        if (subQuery instanceof BooleanQuery) {\n          wrapQuery=true;\n        }\n\n        if (wrapQuery) {\n          out.append('(');\n        }\n\n        toString(subQuery, schema, out, flags);\n\n        if (wrapQuery) {\n          out.append(')');\n        }\n      }\n\n      if (needParens) {\n        out.append(')');\n      }\n      if (q.getMinimumNumberShouldMatch()>0) {\n        out.append('~');\n        out.append(Integer.toString(q.getMinimumNumberShouldMatch()));\n      }\n\n    } else if (query instanceof PrefixQuery) {\n      PrefixQuery q = (PrefixQuery)query;\n      Term prefix = q.getPrefix();\n      FieldType ft = writeFieldName(prefix.field(), schema, out, flags);\n      out.append(prefix.text());\n      out.append('*');\n    } else if (query instanceof ConstantScorePrefixQuery) {\n      ConstantScorePrefixQuery q = (ConstantScorePrefixQuery)query;\n      Term prefix = q.getPrefix();\n      FieldType ft = writeFieldName(prefix.field(), schema, out, flags);\n      out.append(prefix.text());\n      out.append('*');\n    } else if (query instanceof WildcardQuery) {\n      out.append(query.toString());\n      writeBoost=false;\n    } else if (query instanceof FuzzyQuery) {\n      out.append(query.toString());\n      writeBoost=false;      \n    } else if (query instanceof ConstantScoreQuery) {\n      out.append(query.toString());\n      writeBoost=false;\n    } else {\n      out.append(query.getClass().getSimpleName()\n              + '(' + query.toString() + ')' );\n      writeBoost=false;\n    }\n\n    if (writeBoost && query.getBoost() != 1.0f) {\n      out.append(\"^\");\n      out.append(Float.toString(query.getBoost()));\n    }\n\n  }\n\n","sourceOld":"  public static void toString(Query query, IndexSchema schema, Appendable out, int flags) throws IOException {\n    boolean writeBoost=true;\n\n    if (query instanceof TermQuery) {\n      TermQuery q = (TermQuery)query;\n      Term t = q.getTerm();\n      FieldType ft = writeFieldName(t.field(), schema, out, flags);\n      writeFieldVal(t.text(), ft, out, flags);\n    } else if (query instanceof RangeQuery) {\n      RangeQuery q = (RangeQuery)query;\n      String fname = q.getField();\n      FieldType ft = writeFieldName(fname, schema, out, flags);\n      out.append( q.isInclusive() ? '[' : '{' );\n      Term lt = q.getLowerTerm();\n      Term ut = q.getUpperTerm();\n      if (lt==null) {\n        out.append('*');\n      } else {\n        writeFieldVal(lt.text(), ft, out, flags);\n      }\n\n      out.append(\" TO \");\n\n      if (ut==null) {\n        out.append('*');\n      } else {\n        writeFieldVal(ut.text(), ft, out, flags);\n      }\n\n      out.append( q.isInclusive() ? ']' : '}' );\n\n    } else if (query instanceof ConstantScoreRangeQuery) {\n      ConstantScoreRangeQuery q = (ConstantScoreRangeQuery)query;\n      String fname = q.getField();\n      FieldType ft = writeFieldName(fname, schema, out, flags);\n      out.append( q.includesLower() ? '[' : '{' );\n      String lt = q.getLowerVal();\n      String ut = q.getUpperVal();\n      if (lt==null) {\n        out.append('*');\n      } else {\n        writeFieldVal(lt, ft, out, flags);\n      }\n\n      out.append(\" TO \");\n\n      if (ut==null) {\n        out.append('*');\n      } else {\n        writeFieldVal(ut, ft, out, flags);\n      }\n\n      out.append( q.includesUpper() ? ']' : '}' );\n    } else if (query instanceof BooleanQuery) {\n      BooleanQuery q = (BooleanQuery)query;\n      boolean needParens=false;\n\n      if (q.getBoost() != 1.0 || q.getMinimumNumberShouldMatch() != 0) {\n        needParens=true;\n      }\n      if (needParens) {\n        out.append('(');\n      }\n      BooleanClause[] clauses = q.getClauses();\n      boolean first=true;\n      for (BooleanClause c : clauses) {\n        if (!first) {\n          out.append(' ');\n        } else {\n          first=false;\n        }\n\n        if (c.prohibited) {\n          out.append('-');\n        } else if (c.required) {\n          out.append('+');\n        }\n        Query subQuery = c.query;\n        boolean wrapQuery=false;\n\n        // TODO: may need to put parens around other types\n        // of queries too, depending on future syntax.\n        if (subQuery instanceof BooleanQuery) {\n          wrapQuery=true;\n        }\n\n        if (wrapQuery) {\n          out.append('(');\n        }\n\n        toString(subQuery, schema, out, flags);\n\n        if (wrapQuery) {\n          out.append(')');\n        }\n      }\n\n      if (needParens) {\n        out.append(')');\n      }\n      if (q.getMinimumNumberShouldMatch()>0) {\n        out.append('~');\n        out.append(Integer.toString(q.getMinimumNumberShouldMatch()));\n      }\n\n    } else if (query instanceof PrefixQuery) {\n      PrefixQuery q = (PrefixQuery)query;\n      Term prefix = q.getPrefix();\n      FieldType ft = writeFieldName(prefix.field(), schema, out, flags);\n      out.append(prefix.text());\n      out.append('*');\n    } else if (query instanceof ConstantScorePrefixQuery) {\n      ConstantScorePrefixQuery q = (ConstantScorePrefixQuery)query;\n      Term prefix = q.getPrefix();\n      FieldType ft = writeFieldName(prefix.field(), schema, out, flags);\n      out.append(prefix.text());\n      out.append('*');\n    } else if (query instanceof WildcardQuery) {\n      out.append(query.toString());\n      writeBoost=false;\n    } else if (query instanceof FuzzyQuery) {\n      out.append(query.toString());\n      writeBoost=false;      \n    } else if (query instanceof ConstantScoreQuery) {\n      out.append(query.toString());\n      writeBoost=false;\n    } else {\n      out.append(query.getClass().getSimpleName()\n              + '(' + query.toString() + ')' );\n      writeBoost=false;\n    }\n\n    if (writeBoost && query.getBoost() != 1.0f) {\n      out.append(\"^\");\n      out.append(Float.toString(query.getBoost()));\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"79c686ad76bb74d110ec3c727914fb5693a7da23","date":1158901446,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/solr/search/QueryParsing#toString(Query,IndexSchema,Appendable,int).mjava","pathOld":"src/java/org/apache/solr/search/QueryParsing#toString(Query,IndexSchema,Appendable,int).mjava","sourceNew":"  /** @see #toString(Query,IndexSchema) */\n  public static void toString(Query query, IndexSchema schema, Appendable out, int flags) throws IOException {\n    boolean writeBoost=true;\n\n    if (query instanceof TermQuery) {\n      TermQuery q = (TermQuery)query;\n      Term t = q.getTerm();\n      FieldType ft = writeFieldName(t.field(), schema, out, flags);\n      writeFieldVal(t.text(), ft, out, flags);\n    } else if (query instanceof RangeQuery) {\n      RangeQuery q = (RangeQuery)query;\n      String fname = q.getField();\n      FieldType ft = writeFieldName(fname, schema, out, flags);\n      out.append( q.isInclusive() ? '[' : '{' );\n      Term lt = q.getLowerTerm();\n      Term ut = q.getUpperTerm();\n      if (lt==null) {\n        out.append('*');\n      } else {\n        writeFieldVal(lt.text(), ft, out, flags);\n      }\n\n      out.append(\" TO \");\n\n      if (ut==null) {\n        out.append('*');\n      } else {\n        writeFieldVal(ut.text(), ft, out, flags);\n      }\n\n      out.append( q.isInclusive() ? ']' : '}' );\n\n    } else if (query instanceof ConstantScoreRangeQuery) {\n      ConstantScoreRangeQuery q = (ConstantScoreRangeQuery)query;\n      String fname = q.getField();\n      FieldType ft = writeFieldName(fname, schema, out, flags);\n      out.append( q.includesLower() ? '[' : '{' );\n      String lt = q.getLowerVal();\n      String ut = q.getUpperVal();\n      if (lt==null) {\n        out.append('*');\n      } else {\n        writeFieldVal(lt, ft, out, flags);\n      }\n\n      out.append(\" TO \");\n\n      if (ut==null) {\n        out.append('*');\n      } else {\n        writeFieldVal(ut, ft, out, flags);\n      }\n\n      out.append( q.includesUpper() ? ']' : '}' );\n    } else if (query instanceof BooleanQuery) {\n      BooleanQuery q = (BooleanQuery)query;\n      boolean needParens=false;\n\n      if (q.getBoost() != 1.0 || q.getMinimumNumberShouldMatch() != 0) {\n        needParens=true;\n      }\n      if (needParens) {\n        out.append('(');\n      }\n      BooleanClause[] clauses = q.getClauses();\n      boolean first=true;\n      for (BooleanClause c : clauses) {\n        if (!first) {\n          out.append(' ');\n        } else {\n          first=false;\n        }\n\n        if (c.isProhibited()) {\n          out.append('-');\n        } else if (c.isRequired()) {\n          out.append('+');\n        }\n        Query subQuery = c.getQuery();\n        boolean wrapQuery=false;\n\n        // TODO: may need to put parens around other types\n        // of queries too, depending on future syntax.\n        if (subQuery instanceof BooleanQuery) {\n          wrapQuery=true;\n        }\n\n        if (wrapQuery) {\n          out.append('(');\n        }\n\n        toString(subQuery, schema, out, flags);\n\n        if (wrapQuery) {\n          out.append(')');\n        }\n      }\n\n      if (needParens) {\n        out.append(')');\n      }\n      if (q.getMinimumNumberShouldMatch()>0) {\n        out.append('~');\n        out.append(Integer.toString(q.getMinimumNumberShouldMatch()));\n      }\n\n    } else if (query instanceof PrefixQuery) {\n      PrefixQuery q = (PrefixQuery)query;\n      Term prefix = q.getPrefix();\n      FieldType ft = writeFieldName(prefix.field(), schema, out, flags);\n      out.append(prefix.text());\n      out.append('*');\n    } else if (query instanceof ConstantScorePrefixQuery) {\n      ConstantScorePrefixQuery q = (ConstantScorePrefixQuery)query;\n      Term prefix = q.getPrefix();\n      FieldType ft = writeFieldName(prefix.field(), schema, out, flags);\n      out.append(prefix.text());\n      out.append('*');\n    } else if (query instanceof WildcardQuery) {\n      out.append(query.toString());\n      writeBoost=false;\n    } else if (query instanceof FuzzyQuery) {\n      out.append(query.toString());\n      writeBoost=false;      \n    } else if (query instanceof ConstantScoreQuery) {\n      out.append(query.toString());\n      writeBoost=false;\n    } else {\n      out.append(query.getClass().getSimpleName()\n              + '(' + query.toString() + ')' );\n      writeBoost=false;\n    }\n\n    if (writeBoost && query.getBoost() != 1.0f) {\n      out.append(\"^\");\n      out.append(Float.toString(query.getBoost()));\n    }\n\n  }\n\n","sourceOld":"  public static void toString(Query query, IndexSchema schema, Appendable out, int flags) throws IOException {\n    boolean writeBoost=true;\n\n    if (query instanceof TermQuery) {\n      TermQuery q = (TermQuery)query;\n      Term t = q.getTerm();\n      FieldType ft = writeFieldName(t.field(), schema, out, flags);\n      writeFieldVal(t.text(), ft, out, flags);\n    } else if (query instanceof RangeQuery) {\n      RangeQuery q = (RangeQuery)query;\n      String fname = q.getField();\n      FieldType ft = writeFieldName(fname, schema, out, flags);\n      out.append( q.isInclusive() ? '[' : '{' );\n      Term lt = q.getLowerTerm();\n      Term ut = q.getUpperTerm();\n      if (lt==null) {\n        out.append('*');\n      } else {\n        writeFieldVal(lt.text(), ft, out, flags);\n      }\n\n      out.append(\" TO \");\n\n      if (ut==null) {\n        out.append('*');\n      } else {\n        writeFieldVal(ut.text(), ft, out, flags);\n      }\n\n      out.append( q.isInclusive() ? ']' : '}' );\n\n    } else if (query instanceof ConstantScoreRangeQuery) {\n      ConstantScoreRangeQuery q = (ConstantScoreRangeQuery)query;\n      String fname = q.getField();\n      FieldType ft = writeFieldName(fname, schema, out, flags);\n      out.append( q.includesLower() ? '[' : '{' );\n      String lt = q.getLowerVal();\n      String ut = q.getUpperVal();\n      if (lt==null) {\n        out.append('*');\n      } else {\n        writeFieldVal(lt, ft, out, flags);\n      }\n\n      out.append(\" TO \");\n\n      if (ut==null) {\n        out.append('*');\n      } else {\n        writeFieldVal(ut, ft, out, flags);\n      }\n\n      out.append( q.includesUpper() ? ']' : '}' );\n    } else if (query instanceof BooleanQuery) {\n      BooleanQuery q = (BooleanQuery)query;\n      boolean needParens=false;\n\n      if (q.getBoost() != 1.0 || q.getMinimumNumberShouldMatch() != 0) {\n        needParens=true;\n      }\n      if (needParens) {\n        out.append('(');\n      }\n      BooleanClause[] clauses = q.getClauses();\n      boolean first=true;\n      for (BooleanClause c : clauses) {\n        if (!first) {\n          out.append(' ');\n        } else {\n          first=false;\n        }\n\n        if (c.isProhibited()) {\n          out.append('-');\n        } else if (c.isRequired()) {\n          out.append('+');\n        }\n        Query subQuery = c.getQuery();\n        boolean wrapQuery=false;\n\n        // TODO: may need to put parens around other types\n        // of queries too, depending on future syntax.\n        if (subQuery instanceof BooleanQuery) {\n          wrapQuery=true;\n        }\n\n        if (wrapQuery) {\n          out.append('(');\n        }\n\n        toString(subQuery, schema, out, flags);\n\n        if (wrapQuery) {\n          out.append(')');\n        }\n      }\n\n      if (needParens) {\n        out.append(')');\n      }\n      if (q.getMinimumNumberShouldMatch()>0) {\n        out.append('~');\n        out.append(Integer.toString(q.getMinimumNumberShouldMatch()));\n      }\n\n    } else if (query instanceof PrefixQuery) {\n      PrefixQuery q = (PrefixQuery)query;\n      Term prefix = q.getPrefix();\n      FieldType ft = writeFieldName(prefix.field(), schema, out, flags);\n      out.append(prefix.text());\n      out.append('*');\n    } else if (query instanceof ConstantScorePrefixQuery) {\n      ConstantScorePrefixQuery q = (ConstantScorePrefixQuery)query;\n      Term prefix = q.getPrefix();\n      FieldType ft = writeFieldName(prefix.field(), schema, out, flags);\n      out.append(prefix.text());\n      out.append('*');\n    } else if (query instanceof WildcardQuery) {\n      out.append(query.toString());\n      writeBoost=false;\n    } else if (query instanceof FuzzyQuery) {\n      out.append(query.toString());\n      writeBoost=false;      \n    } else if (query instanceof ConstantScoreQuery) {\n      out.append(query.toString());\n      writeBoost=false;\n    } else {\n      out.append(query.getClass().getSimpleName()\n              + '(' + query.toString() + ')' );\n      writeBoost=false;\n    }\n\n    if (writeBoost && query.getBoost() != 1.0f) {\n      out.append(\"^\");\n      out.append(Float.toString(query.getBoost()));\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"27adc06684d74d32d4d07537a81903ffbf816d27","date":1178648148,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/solr/search/QueryParsing#toString(Query,IndexSchema,Appendable,int).mjava","pathOld":"src/java/org/apache/solr/search/QueryParsing#toString(Query,IndexSchema,Appendable,int).mjava","sourceNew":"  /** @see #toString(Query,IndexSchema) */\n  public static void toString(Query query, IndexSchema schema, Appendable out, int flags) throws IOException {\n    boolean writeBoost=true;\n\n    if (query instanceof TermQuery) {\n      TermQuery q = (TermQuery)query;\n      Term t = q.getTerm();\n      FieldType ft = writeFieldName(t.field(), schema, out, flags);\n      writeFieldVal(t.text(), ft, out, flags);\n    } else if (query instanceof RangeQuery) {\n      RangeQuery q = (RangeQuery)query;\n      String fname = q.getField();\n      FieldType ft = writeFieldName(fname, schema, out, flags);\n      out.append( q.isInclusive() ? '[' : '{' );\n      Term lt = q.getLowerTerm();\n      Term ut = q.getUpperTerm();\n      if (lt==null) {\n        out.append('*');\n      } else {\n        writeFieldVal(lt.text(), ft, out, flags);\n      }\n\n      out.append(\" TO \");\n\n      if (ut==null) {\n        out.append('*');\n      } else {\n        writeFieldVal(ut.text(), ft, out, flags);\n      }\n\n      out.append( q.isInclusive() ? ']' : '}' );\n\n    } else if (query instanceof ConstantScoreRangeQuery) {\n      ConstantScoreRangeQuery q = (ConstantScoreRangeQuery)query;\n      String fname = q.getField();\n      FieldType ft = writeFieldName(fname, schema, out, flags);\n      out.append( q.includesLower() ? '[' : '{' );\n      String lt = q.getLowerVal();\n      String ut = q.getUpperVal();\n      if (lt==null) {\n        out.append('*');\n      } else {\n        writeFieldVal(lt, ft, out, flags);\n      }\n\n      out.append(\" TO \");\n\n      if (ut==null) {\n        out.append('*');\n      } else {\n        writeFieldVal(ut, ft, out, flags);\n      }\n\n      out.append( q.includesUpper() ? ']' : '}' );\n    } else if (query instanceof BooleanQuery) {\n      BooleanQuery q = (BooleanQuery)query;\n      boolean needParens=false;\n\n      if (q.getBoost() != 1.0 || q.getMinimumNumberShouldMatch() != 0) {\n        needParens=true;\n      }\n      if (needParens) {\n        out.append('(');\n      }\n      boolean first=true;\n      for (BooleanClause c : (List<BooleanClause>)q.clauses()) {\n        if (!first) {\n          out.append(' ');\n        } else {\n          first=false;\n        }\n\n        if (c.isProhibited()) {\n          out.append('-');\n        } else if (c.isRequired()) {\n          out.append('+');\n        }\n        Query subQuery = c.getQuery();\n        boolean wrapQuery=false;\n\n        // TODO: may need to put parens around other types\n        // of queries too, depending on future syntax.\n        if (subQuery instanceof BooleanQuery) {\n          wrapQuery=true;\n        }\n\n        if (wrapQuery) {\n          out.append('(');\n        }\n\n        toString(subQuery, schema, out, flags);\n\n        if (wrapQuery) {\n          out.append(')');\n        }\n      }\n\n      if (needParens) {\n        out.append(')');\n      }\n      if (q.getMinimumNumberShouldMatch()>0) {\n        out.append('~');\n        out.append(Integer.toString(q.getMinimumNumberShouldMatch()));\n      }\n\n    } else if (query instanceof PrefixQuery) {\n      PrefixQuery q = (PrefixQuery)query;\n      Term prefix = q.getPrefix();\n      FieldType ft = writeFieldName(prefix.field(), schema, out, flags);\n      out.append(prefix.text());\n      out.append('*');\n    } else if (query instanceof ConstantScorePrefixQuery) {\n      ConstantScorePrefixQuery q = (ConstantScorePrefixQuery)query;\n      Term prefix = q.getPrefix();\n      FieldType ft = writeFieldName(prefix.field(), schema, out, flags);\n      out.append(prefix.text());\n      out.append('*');\n    } else if (query instanceof WildcardQuery) {\n      out.append(query.toString());\n      writeBoost=false;\n    } else if (query instanceof FuzzyQuery) {\n      out.append(query.toString());\n      writeBoost=false;      \n    } else if (query instanceof ConstantScoreQuery) {\n      out.append(query.toString());\n      writeBoost=false;\n    } else {\n      out.append(query.getClass().getSimpleName()\n              + '(' + query.toString() + ')' );\n      writeBoost=false;\n    }\n\n    if (writeBoost && query.getBoost() != 1.0f) {\n      out.append(\"^\");\n      out.append(Float.toString(query.getBoost()));\n    }\n\n  }\n\n","sourceOld":"  /** @see #toString(Query,IndexSchema) */\n  public static void toString(Query query, IndexSchema schema, Appendable out, int flags) throws IOException {\n    boolean writeBoost=true;\n\n    if (query instanceof TermQuery) {\n      TermQuery q = (TermQuery)query;\n      Term t = q.getTerm();\n      FieldType ft = writeFieldName(t.field(), schema, out, flags);\n      writeFieldVal(t.text(), ft, out, flags);\n    } else if (query instanceof RangeQuery) {\n      RangeQuery q = (RangeQuery)query;\n      String fname = q.getField();\n      FieldType ft = writeFieldName(fname, schema, out, flags);\n      out.append( q.isInclusive() ? '[' : '{' );\n      Term lt = q.getLowerTerm();\n      Term ut = q.getUpperTerm();\n      if (lt==null) {\n        out.append('*');\n      } else {\n        writeFieldVal(lt.text(), ft, out, flags);\n      }\n\n      out.append(\" TO \");\n\n      if (ut==null) {\n        out.append('*');\n      } else {\n        writeFieldVal(ut.text(), ft, out, flags);\n      }\n\n      out.append( q.isInclusive() ? ']' : '}' );\n\n    } else if (query instanceof ConstantScoreRangeQuery) {\n      ConstantScoreRangeQuery q = (ConstantScoreRangeQuery)query;\n      String fname = q.getField();\n      FieldType ft = writeFieldName(fname, schema, out, flags);\n      out.append( q.includesLower() ? '[' : '{' );\n      String lt = q.getLowerVal();\n      String ut = q.getUpperVal();\n      if (lt==null) {\n        out.append('*');\n      } else {\n        writeFieldVal(lt, ft, out, flags);\n      }\n\n      out.append(\" TO \");\n\n      if (ut==null) {\n        out.append('*');\n      } else {\n        writeFieldVal(ut, ft, out, flags);\n      }\n\n      out.append( q.includesUpper() ? ']' : '}' );\n    } else if (query instanceof BooleanQuery) {\n      BooleanQuery q = (BooleanQuery)query;\n      boolean needParens=false;\n\n      if (q.getBoost() != 1.0 || q.getMinimumNumberShouldMatch() != 0) {\n        needParens=true;\n      }\n      if (needParens) {\n        out.append('(');\n      }\n      BooleanClause[] clauses = q.getClauses();\n      boolean first=true;\n      for (BooleanClause c : clauses) {\n        if (!first) {\n          out.append(' ');\n        } else {\n          first=false;\n        }\n\n        if (c.isProhibited()) {\n          out.append('-');\n        } else if (c.isRequired()) {\n          out.append('+');\n        }\n        Query subQuery = c.getQuery();\n        boolean wrapQuery=false;\n\n        // TODO: may need to put parens around other types\n        // of queries too, depending on future syntax.\n        if (subQuery instanceof BooleanQuery) {\n          wrapQuery=true;\n        }\n\n        if (wrapQuery) {\n          out.append('(');\n        }\n\n        toString(subQuery, schema, out, flags);\n\n        if (wrapQuery) {\n          out.append(')');\n        }\n      }\n\n      if (needParens) {\n        out.append(')');\n      }\n      if (q.getMinimumNumberShouldMatch()>0) {\n        out.append('~');\n        out.append(Integer.toString(q.getMinimumNumberShouldMatch()));\n      }\n\n    } else if (query instanceof PrefixQuery) {\n      PrefixQuery q = (PrefixQuery)query;\n      Term prefix = q.getPrefix();\n      FieldType ft = writeFieldName(prefix.field(), schema, out, flags);\n      out.append(prefix.text());\n      out.append('*');\n    } else if (query instanceof ConstantScorePrefixQuery) {\n      ConstantScorePrefixQuery q = (ConstantScorePrefixQuery)query;\n      Term prefix = q.getPrefix();\n      FieldType ft = writeFieldName(prefix.field(), schema, out, flags);\n      out.append(prefix.text());\n      out.append('*');\n    } else if (query instanceof WildcardQuery) {\n      out.append(query.toString());\n      writeBoost=false;\n    } else if (query instanceof FuzzyQuery) {\n      out.append(query.toString());\n      writeBoost=false;      \n    } else if (query instanceof ConstantScoreQuery) {\n      out.append(query.toString());\n      writeBoost=false;\n    } else {\n      out.append(query.getClass().getSimpleName()\n              + '(' + query.toString() + ')' );\n      writeBoost=false;\n    }\n\n    if (writeBoost && query.getBoost() != 1.0f) {\n      out.append(\"^\");\n      out.append(Float.toString(query.getBoost()));\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fb3488da508a175c9c5b1a6c9a441e268c140807","date":1230792650,"type":3,"author":"Koji Sekiguchi","isMerge":false,"pathNew":"src/java/org/apache/solr/search/QueryParsing#toString(Query,IndexSchema,Appendable,int).mjava","pathOld":"src/java/org/apache/solr/search/QueryParsing#toString(Query,IndexSchema,Appendable,int).mjava","sourceNew":"  /** @see #toString(Query,IndexSchema) */\n  public static void toString(Query query, IndexSchema schema, Appendable out, int flags) throws IOException {\n    boolean writeBoost=true;\n\n    if (query instanceof TermQuery) {\n      TermQuery q = (TermQuery)query;\n      Term t = q.getTerm();\n      FieldType ft = writeFieldName(t.field(), schema, out, flags);\n      writeFieldVal(t.text(), ft, out, flags);\n    } else if (query instanceof ConstantScoreRangeQuery) {\n      ConstantScoreRangeQuery q = (ConstantScoreRangeQuery)query;\n      String fname = q.getField();\n      FieldType ft = writeFieldName(fname, schema, out, flags);\n      out.append( q.includesLower() ? '[' : '{' );\n      String lt = q.getLowerVal();\n      String ut = q.getUpperVal();\n      if (lt==null) {\n        out.append('*');\n      } else {\n        writeFieldVal(lt, ft, out, flags);\n      }\n\n      out.append(\" TO \");\n\n      if (ut==null) {\n        out.append('*');\n      } else {\n        writeFieldVal(ut, ft, out, flags);\n      }\n\n      out.append( q.includesUpper() ? ']' : '}' );\n    } else if (query instanceof RangeQuery) {\n      RangeQuery q = (RangeQuery)query;\n      String fname = q.getField();\n      FieldType ft = writeFieldName(fname, schema, out, flags);\n      out.append( q.isInclusive() ? '[' : '{' );\n      Term lt = q.getLowerTerm();\n      Term ut = q.getUpperTerm();\n      if (lt==null) {\n        out.append('*');\n      } else {\n        writeFieldVal(lt.text(), ft, out, flags);\n      }\n\n      out.append(\" TO \");\n\n      if (ut==null) {\n        out.append('*');\n      } else {\n        writeFieldVal(ut.text(), ft, out, flags);\n      }\n\n      out.append( q.isInclusive() ? ']' : '}' );\n\n    } else if (query instanceof BooleanQuery) {\n      BooleanQuery q = (BooleanQuery)query;\n      boolean needParens=false;\n\n      if (q.getBoost() != 1.0 || q.getMinimumNumberShouldMatch() != 0) {\n        needParens=true;\n      }\n      if (needParens) {\n        out.append('(');\n      }\n      boolean first=true;\n      for (BooleanClause c : (List<BooleanClause>)q.clauses()) {\n        if (!first) {\n          out.append(' ');\n        } else {\n          first=false;\n        }\n\n        if (c.isProhibited()) {\n          out.append('-');\n        } else if (c.isRequired()) {\n          out.append('+');\n        }\n        Query subQuery = c.getQuery();\n        boolean wrapQuery=false;\n\n        // TODO: may need to put parens around other types\n        // of queries too, depending on future syntax.\n        if (subQuery instanceof BooleanQuery) {\n          wrapQuery=true;\n        }\n\n        if (wrapQuery) {\n          out.append('(');\n        }\n\n        toString(subQuery, schema, out, flags);\n\n        if (wrapQuery) {\n          out.append(')');\n        }\n      }\n\n      if (needParens) {\n        out.append(')');\n      }\n      if (q.getMinimumNumberShouldMatch()>0) {\n        out.append('~');\n        out.append(Integer.toString(q.getMinimumNumberShouldMatch()));\n      }\n\n    } else if (query instanceof PrefixQuery) {\n      PrefixQuery q = (PrefixQuery)query;\n      Term prefix = q.getPrefix();\n      FieldType ft = writeFieldName(prefix.field(), schema, out, flags);\n      out.append(prefix.text());\n      out.append('*');\n    } else if (query instanceof ConstantScorePrefixQuery) {\n      ConstantScorePrefixQuery q = (ConstantScorePrefixQuery)query;\n      Term prefix = q.getPrefix();\n      FieldType ft = writeFieldName(prefix.field(), schema, out, flags);\n      out.append(prefix.text());\n      out.append('*');\n    } else if (query instanceof WildcardQuery) {\n      out.append(query.toString());\n      writeBoost=false;\n    } else if (query instanceof FuzzyQuery) {\n      out.append(query.toString());\n      writeBoost=false;      \n    } else if (query instanceof ConstantScoreQuery) {\n      out.append(query.toString());\n      writeBoost=false;\n    } else {\n      out.append(query.getClass().getSimpleName()\n              + '(' + query.toString() + ')' );\n      writeBoost=false;\n    }\n\n    if (writeBoost && query.getBoost() != 1.0f) {\n      out.append(\"^\");\n      out.append(Float.toString(query.getBoost()));\n    }\n\n  }\n\n","sourceOld":"  /** @see #toString(Query,IndexSchema) */\n  public static void toString(Query query, IndexSchema schema, Appendable out, int flags) throws IOException {\n    boolean writeBoost=true;\n\n    if (query instanceof TermQuery) {\n      TermQuery q = (TermQuery)query;\n      Term t = q.getTerm();\n      FieldType ft = writeFieldName(t.field(), schema, out, flags);\n      writeFieldVal(t.text(), ft, out, flags);\n    } else if (query instanceof RangeQuery) {\n      RangeQuery q = (RangeQuery)query;\n      String fname = q.getField();\n      FieldType ft = writeFieldName(fname, schema, out, flags);\n      out.append( q.isInclusive() ? '[' : '{' );\n      Term lt = q.getLowerTerm();\n      Term ut = q.getUpperTerm();\n      if (lt==null) {\n        out.append('*');\n      } else {\n        writeFieldVal(lt.text(), ft, out, flags);\n      }\n\n      out.append(\" TO \");\n\n      if (ut==null) {\n        out.append('*');\n      } else {\n        writeFieldVal(ut.text(), ft, out, flags);\n      }\n\n      out.append( q.isInclusive() ? ']' : '}' );\n\n    } else if (query instanceof ConstantScoreRangeQuery) {\n      ConstantScoreRangeQuery q = (ConstantScoreRangeQuery)query;\n      String fname = q.getField();\n      FieldType ft = writeFieldName(fname, schema, out, flags);\n      out.append( q.includesLower() ? '[' : '{' );\n      String lt = q.getLowerVal();\n      String ut = q.getUpperVal();\n      if (lt==null) {\n        out.append('*');\n      } else {\n        writeFieldVal(lt, ft, out, flags);\n      }\n\n      out.append(\" TO \");\n\n      if (ut==null) {\n        out.append('*');\n      } else {\n        writeFieldVal(ut, ft, out, flags);\n      }\n\n      out.append( q.includesUpper() ? ']' : '}' );\n    } else if (query instanceof BooleanQuery) {\n      BooleanQuery q = (BooleanQuery)query;\n      boolean needParens=false;\n\n      if (q.getBoost() != 1.0 || q.getMinimumNumberShouldMatch() != 0) {\n        needParens=true;\n      }\n      if (needParens) {\n        out.append('(');\n      }\n      boolean first=true;\n      for (BooleanClause c : (List<BooleanClause>)q.clauses()) {\n        if (!first) {\n          out.append(' ');\n        } else {\n          first=false;\n        }\n\n        if (c.isProhibited()) {\n          out.append('-');\n        } else if (c.isRequired()) {\n          out.append('+');\n        }\n        Query subQuery = c.getQuery();\n        boolean wrapQuery=false;\n\n        // TODO: may need to put parens around other types\n        // of queries too, depending on future syntax.\n        if (subQuery instanceof BooleanQuery) {\n          wrapQuery=true;\n        }\n\n        if (wrapQuery) {\n          out.append('(');\n        }\n\n        toString(subQuery, schema, out, flags);\n\n        if (wrapQuery) {\n          out.append(')');\n        }\n      }\n\n      if (needParens) {\n        out.append(')');\n      }\n      if (q.getMinimumNumberShouldMatch()>0) {\n        out.append('~');\n        out.append(Integer.toString(q.getMinimumNumberShouldMatch()));\n      }\n\n    } else if (query instanceof PrefixQuery) {\n      PrefixQuery q = (PrefixQuery)query;\n      Term prefix = q.getPrefix();\n      FieldType ft = writeFieldName(prefix.field(), schema, out, flags);\n      out.append(prefix.text());\n      out.append('*');\n    } else if (query instanceof ConstantScorePrefixQuery) {\n      ConstantScorePrefixQuery q = (ConstantScorePrefixQuery)query;\n      Term prefix = q.getPrefix();\n      FieldType ft = writeFieldName(prefix.field(), schema, out, flags);\n      out.append(prefix.text());\n      out.append('*');\n    } else if (query instanceof WildcardQuery) {\n      out.append(query.toString());\n      writeBoost=false;\n    } else if (query instanceof FuzzyQuery) {\n      out.append(query.toString());\n      writeBoost=false;      \n    } else if (query instanceof ConstantScoreQuery) {\n      out.append(query.toString());\n      writeBoost=false;\n    } else {\n      out.append(query.getClass().getSimpleName()\n              + '(' + query.toString() + ')' );\n      writeBoost=false;\n    }\n\n    if (writeBoost && query.getBoost() != 1.0f) {\n      out.append(\"^\");\n      out.append(Float.toString(query.getBoost()));\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1e77721aaf23393f6ea7926045ae6f8efea0ce8e","date":1247678464,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/search/QueryParsing#toString(Query,IndexSchema,Appendable,int).mjava","pathOld":"src/java/org/apache/solr/search/QueryParsing#toString(Query,IndexSchema,Appendable,int).mjava","sourceNew":"  /** @see #toString(Query,IndexSchema) */\n  public static void toString(Query query, IndexSchema schema, Appendable out, int flags) throws IOException {\n    boolean writeBoost=true;\n\n    if (query instanceof TermQuery) {\n      TermQuery q = (TermQuery)query;\n      Term t = q.getTerm();\n      FieldType ft = writeFieldName(t.field(), schema, out, flags);\n      writeFieldVal(t.text(), ft, out, flags);\n    } else if (query instanceof TermRangeQuery) {\n      TermRangeQuery q = (TermRangeQuery)query;\n      String fname = q.getField();\n      FieldType ft = writeFieldName(fname, schema, out, flags);\n      out.append( q.includesLower() ? '[' : '{' );\n      String lt = q.getLowerTerm();\n      String ut = q.getUpperTerm();\n      if (lt==null) {\n        out.append('*');\n      } else {\n        writeFieldVal(lt, ft, out, flags);\n      }\n\n      out.append(\" TO \");\n\n      if (ut==null) {\n        out.append('*');\n      } else {\n        writeFieldVal(ut, ft, out, flags);\n      }\n\n      out.append( q.includesUpper() ? ']' : '}' );\n    } else if (query instanceof NumericRangeQuery) {\n      NumericRangeQuery q = (NumericRangeQuery)query;\n      String fname = q.getField();\n      FieldType ft = writeFieldName(fname, schema, out, flags);\n      out.append( q.includesMin() ? '[' : '{' );\n      Number lt = q.getMin();\n      Number ut = q.getMax();\n      if (lt==null) {\n        out.append('*');\n      } else {\n        writeFieldVal(lt.toString(), ft, out, flags);\n      }\n\n      out.append(\" TO \");\n\n      if (ut==null) {\n        out.append('*');\n      } else {\n        writeFieldVal(ut.toString(), ft, out, flags);\n      }\n\n      out.append( q.includesMax() ? ']' : '}' );\n    } else if (query instanceof BooleanQuery) {\n      BooleanQuery q = (BooleanQuery)query;\n      boolean needParens=false;\n\n      if (q.getBoost() != 1.0 || q.getMinimumNumberShouldMatch() != 0) {\n        needParens=true;\n      }\n      if (needParens) {\n        out.append('(');\n      }\n      boolean first=true;\n      for (BooleanClause c : (List<BooleanClause>)q.clauses()) {\n        if (!first) {\n          out.append(' ');\n        } else {\n          first=false;\n        }\n\n        if (c.isProhibited()) {\n          out.append('-');\n        } else if (c.isRequired()) {\n          out.append('+');\n        }\n        Query subQuery = c.getQuery();\n        boolean wrapQuery=false;\n\n        // TODO: may need to put parens around other types\n        // of queries too, depending on future syntax.\n        if (subQuery instanceof BooleanQuery) {\n          wrapQuery=true;\n        }\n\n        if (wrapQuery) {\n          out.append('(');\n        }\n\n        toString(subQuery, schema, out, flags);\n\n        if (wrapQuery) {\n          out.append(')');\n        }\n      }\n\n      if (needParens) {\n        out.append(')');\n      }\n      if (q.getMinimumNumberShouldMatch()>0) {\n        out.append('~');\n        out.append(Integer.toString(q.getMinimumNumberShouldMatch()));\n      }\n\n    } else if (query instanceof PrefixQuery) {\n      PrefixQuery q = (PrefixQuery)query;\n      Term prefix = q.getPrefix();\n      FieldType ft = writeFieldName(prefix.field(), schema, out, flags);\n      out.append(prefix.text());\n      out.append('*');\n    } else if (query instanceof ConstantScorePrefixQuery) {\n      ConstantScorePrefixQuery q = (ConstantScorePrefixQuery)query;\n      Term prefix = q.getPrefix();\n      FieldType ft = writeFieldName(prefix.field(), schema, out, flags);\n      out.append(prefix.text());\n      out.append('*');\n    } else if (query instanceof WildcardQuery) {\n      out.append(query.toString());\n      writeBoost=false;\n    } else if (query instanceof FuzzyQuery) {\n      out.append(query.toString());\n      writeBoost=false;      \n    } else if (query instanceof ConstantScoreQuery) {\n      out.append(query.toString());\n      writeBoost=false;\n    } else {\n      out.append(query.getClass().getSimpleName()\n              + '(' + query.toString() + ')' );\n      writeBoost=false;\n    }\n\n    if (writeBoost && query.getBoost() != 1.0f) {\n      out.append(\"^\");\n      out.append(Float.toString(query.getBoost()));\n    }\n\n  }\n\n","sourceOld":"  /** @see #toString(Query,IndexSchema) */\n  public static void toString(Query query, IndexSchema schema, Appendable out, int flags) throws IOException {\n    boolean writeBoost=true;\n\n    if (query instanceof TermQuery) {\n      TermQuery q = (TermQuery)query;\n      Term t = q.getTerm();\n      FieldType ft = writeFieldName(t.field(), schema, out, flags);\n      writeFieldVal(t.text(), ft, out, flags);\n    } else if (query instanceof ConstantScoreRangeQuery) {\n      ConstantScoreRangeQuery q = (ConstantScoreRangeQuery)query;\n      String fname = q.getField();\n      FieldType ft = writeFieldName(fname, schema, out, flags);\n      out.append( q.includesLower() ? '[' : '{' );\n      String lt = q.getLowerVal();\n      String ut = q.getUpperVal();\n      if (lt==null) {\n        out.append('*');\n      } else {\n        writeFieldVal(lt, ft, out, flags);\n      }\n\n      out.append(\" TO \");\n\n      if (ut==null) {\n        out.append('*');\n      } else {\n        writeFieldVal(ut, ft, out, flags);\n      }\n\n      out.append( q.includesUpper() ? ']' : '}' );\n    } else if (query instanceof RangeQuery) {\n      RangeQuery q = (RangeQuery)query;\n      String fname = q.getField();\n      FieldType ft = writeFieldName(fname, schema, out, flags);\n      out.append( q.isInclusive() ? '[' : '{' );\n      Term lt = q.getLowerTerm();\n      Term ut = q.getUpperTerm();\n      if (lt==null) {\n        out.append('*');\n      } else {\n        writeFieldVal(lt.text(), ft, out, flags);\n      }\n\n      out.append(\" TO \");\n\n      if (ut==null) {\n        out.append('*');\n      } else {\n        writeFieldVal(ut.text(), ft, out, flags);\n      }\n\n      out.append( q.isInclusive() ? ']' : '}' );\n\n    } else if (query instanceof BooleanQuery) {\n      BooleanQuery q = (BooleanQuery)query;\n      boolean needParens=false;\n\n      if (q.getBoost() != 1.0 || q.getMinimumNumberShouldMatch() != 0) {\n        needParens=true;\n      }\n      if (needParens) {\n        out.append('(');\n      }\n      boolean first=true;\n      for (BooleanClause c : (List<BooleanClause>)q.clauses()) {\n        if (!first) {\n          out.append(' ');\n        } else {\n          first=false;\n        }\n\n        if (c.isProhibited()) {\n          out.append('-');\n        } else if (c.isRequired()) {\n          out.append('+');\n        }\n        Query subQuery = c.getQuery();\n        boolean wrapQuery=false;\n\n        // TODO: may need to put parens around other types\n        // of queries too, depending on future syntax.\n        if (subQuery instanceof BooleanQuery) {\n          wrapQuery=true;\n        }\n\n        if (wrapQuery) {\n          out.append('(');\n        }\n\n        toString(subQuery, schema, out, flags);\n\n        if (wrapQuery) {\n          out.append(')');\n        }\n      }\n\n      if (needParens) {\n        out.append(')');\n      }\n      if (q.getMinimumNumberShouldMatch()>0) {\n        out.append('~');\n        out.append(Integer.toString(q.getMinimumNumberShouldMatch()));\n      }\n\n    } else if (query instanceof PrefixQuery) {\n      PrefixQuery q = (PrefixQuery)query;\n      Term prefix = q.getPrefix();\n      FieldType ft = writeFieldName(prefix.field(), schema, out, flags);\n      out.append(prefix.text());\n      out.append('*');\n    } else if (query instanceof ConstantScorePrefixQuery) {\n      ConstantScorePrefixQuery q = (ConstantScorePrefixQuery)query;\n      Term prefix = q.getPrefix();\n      FieldType ft = writeFieldName(prefix.field(), schema, out, flags);\n      out.append(prefix.text());\n      out.append('*');\n    } else if (query instanceof WildcardQuery) {\n      out.append(query.toString());\n      writeBoost=false;\n    } else if (query instanceof FuzzyQuery) {\n      out.append(query.toString());\n      writeBoost=false;      \n    } else if (query instanceof ConstantScoreQuery) {\n      out.append(query.toString());\n      writeBoost=false;\n    } else {\n      out.append(query.getClass().getSimpleName()\n              + '(' + query.toString() + ')' );\n      writeBoost=false;\n    }\n\n    if (writeBoost && query.getBoost() != 1.0f) {\n      out.append(\"^\");\n      out.append(Float.toString(query.getBoost()));\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"dbc0ca7104fa6f1d7cc24b05ed50b39ddb7cfa8c","date":1249333745,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/search/QueryParsing#toString(Query,IndexSchema,Appendable,int).mjava","pathOld":"src/java/org/apache/solr/search/QueryParsing#toString(Query,IndexSchema,Appendable,int).mjava","sourceNew":"  /** @see #toString(Query,IndexSchema) */\n  public static void toString(Query query, IndexSchema schema, Appendable out, int flags) throws IOException {\n    boolean writeBoost=true;\n\n    if (query instanceof TermQuery) {\n      TermQuery q = (TermQuery)query;\n      Term t = q.getTerm();\n      FieldType ft = writeFieldName(t.field(), schema, out, flags);\n      writeFieldVal(t.text(), ft, out, flags);\n    } else if (query instanceof TermRangeQuery) {\n      TermRangeQuery q = (TermRangeQuery)query;\n      String fname = q.getField();\n      FieldType ft = writeFieldName(fname, schema, out, flags);\n      out.append( q.includesLower() ? '[' : '{' );\n      String lt = q.getLowerTerm();\n      String ut = q.getUpperTerm();\n      if (lt==null) {\n        out.append('*');\n      } else {\n        writeFieldVal(lt, ft, out, flags);\n      }\n\n      out.append(\" TO \");\n\n      if (ut==null) {\n        out.append('*');\n      } else {\n        writeFieldVal(ut, ft, out, flags);\n      }\n\n      out.append( q.includesUpper() ? ']' : '}' );\n    } else if (query instanceof NumericRangeQuery) {\n      NumericRangeQuery q = (NumericRangeQuery)query;\n      String fname = q.getField();\n      FieldType ft = writeFieldName(fname, schema, out, flags);\n      out.append( q.includesMin() ? '[' : '{' );\n      Number lt = q.getMin();\n      Number ut = q.getMax();\n      if (lt==null) {\n        out.append('*');\n      } else {\n        out.append(lt.toString());\n      }\n\n      out.append(\" TO \");\n\n      if (ut==null) {\n        out.append('*');\n      } else {\n        out.append(ut.toString());\n      }\n\n      out.append( q.includesMax() ? ']' : '}' );\n    } else if (query instanceof BooleanQuery) {\n      BooleanQuery q = (BooleanQuery)query;\n      boolean needParens=false;\n\n      if (q.getBoost() != 1.0 || q.getMinimumNumberShouldMatch() != 0) {\n        needParens=true;\n      }\n      if (needParens) {\n        out.append('(');\n      }\n      boolean first=true;\n      for (BooleanClause c : (List<BooleanClause>)q.clauses()) {\n        if (!first) {\n          out.append(' ');\n        } else {\n          first=false;\n        }\n\n        if (c.isProhibited()) {\n          out.append('-');\n        } else if (c.isRequired()) {\n          out.append('+');\n        }\n        Query subQuery = c.getQuery();\n        boolean wrapQuery=false;\n\n        // TODO: may need to put parens around other types\n        // of queries too, depending on future syntax.\n        if (subQuery instanceof BooleanQuery) {\n          wrapQuery=true;\n        }\n\n        if (wrapQuery) {\n          out.append('(');\n        }\n\n        toString(subQuery, schema, out, flags);\n\n        if (wrapQuery) {\n          out.append(')');\n        }\n      }\n\n      if (needParens) {\n        out.append(')');\n      }\n      if (q.getMinimumNumberShouldMatch()>0) {\n        out.append('~');\n        out.append(Integer.toString(q.getMinimumNumberShouldMatch()));\n      }\n\n    } else if (query instanceof PrefixQuery) {\n      PrefixQuery q = (PrefixQuery)query;\n      Term prefix = q.getPrefix();\n      FieldType ft = writeFieldName(prefix.field(), schema, out, flags);\n      out.append(prefix.text());\n      out.append('*');\n    } else if (query instanceof ConstantScorePrefixQuery) {\n      ConstantScorePrefixQuery q = (ConstantScorePrefixQuery)query;\n      Term prefix = q.getPrefix();\n      FieldType ft = writeFieldName(prefix.field(), schema, out, flags);\n      out.append(prefix.text());\n      out.append('*');\n    } else if (query instanceof WildcardQuery) {\n      out.append(query.toString());\n      writeBoost=false;\n    } else if (query instanceof FuzzyQuery) {\n      out.append(query.toString());\n      writeBoost=false;      \n    } else if (query instanceof ConstantScoreQuery) {\n      out.append(query.toString());\n      writeBoost=false;\n    } else {\n      out.append(query.getClass().getSimpleName()\n              + '(' + query.toString() + ')' );\n      writeBoost=false;\n    }\n\n    if (writeBoost && query.getBoost() != 1.0f) {\n      out.append(\"^\");\n      out.append(Float.toString(query.getBoost()));\n    }\n\n  }\n\n","sourceOld":"  /** @see #toString(Query,IndexSchema) */\n  public static void toString(Query query, IndexSchema schema, Appendable out, int flags) throws IOException {\n    boolean writeBoost=true;\n\n    if (query instanceof TermQuery) {\n      TermQuery q = (TermQuery)query;\n      Term t = q.getTerm();\n      FieldType ft = writeFieldName(t.field(), schema, out, flags);\n      writeFieldVal(t.text(), ft, out, flags);\n    } else if (query instanceof TermRangeQuery) {\n      TermRangeQuery q = (TermRangeQuery)query;\n      String fname = q.getField();\n      FieldType ft = writeFieldName(fname, schema, out, flags);\n      out.append( q.includesLower() ? '[' : '{' );\n      String lt = q.getLowerTerm();\n      String ut = q.getUpperTerm();\n      if (lt==null) {\n        out.append('*');\n      } else {\n        writeFieldVal(lt, ft, out, flags);\n      }\n\n      out.append(\" TO \");\n\n      if (ut==null) {\n        out.append('*');\n      } else {\n        writeFieldVal(ut, ft, out, flags);\n      }\n\n      out.append( q.includesUpper() ? ']' : '}' );\n    } else if (query instanceof NumericRangeQuery) {\n      NumericRangeQuery q = (NumericRangeQuery)query;\n      String fname = q.getField();\n      FieldType ft = writeFieldName(fname, schema, out, flags);\n      out.append( q.includesMin() ? '[' : '{' );\n      Number lt = q.getMin();\n      Number ut = q.getMax();\n      if (lt==null) {\n        out.append('*');\n      } else {\n        writeFieldVal(lt.toString(), ft, out, flags);\n      }\n\n      out.append(\" TO \");\n\n      if (ut==null) {\n        out.append('*');\n      } else {\n        writeFieldVal(ut.toString(), ft, out, flags);\n      }\n\n      out.append( q.includesMax() ? ']' : '}' );\n    } else if (query instanceof BooleanQuery) {\n      BooleanQuery q = (BooleanQuery)query;\n      boolean needParens=false;\n\n      if (q.getBoost() != 1.0 || q.getMinimumNumberShouldMatch() != 0) {\n        needParens=true;\n      }\n      if (needParens) {\n        out.append('(');\n      }\n      boolean first=true;\n      for (BooleanClause c : (List<BooleanClause>)q.clauses()) {\n        if (!first) {\n          out.append(' ');\n        } else {\n          first=false;\n        }\n\n        if (c.isProhibited()) {\n          out.append('-');\n        } else if (c.isRequired()) {\n          out.append('+');\n        }\n        Query subQuery = c.getQuery();\n        boolean wrapQuery=false;\n\n        // TODO: may need to put parens around other types\n        // of queries too, depending on future syntax.\n        if (subQuery instanceof BooleanQuery) {\n          wrapQuery=true;\n        }\n\n        if (wrapQuery) {\n          out.append('(');\n        }\n\n        toString(subQuery, schema, out, flags);\n\n        if (wrapQuery) {\n          out.append(')');\n        }\n      }\n\n      if (needParens) {\n        out.append(')');\n      }\n      if (q.getMinimumNumberShouldMatch()>0) {\n        out.append('~');\n        out.append(Integer.toString(q.getMinimumNumberShouldMatch()));\n      }\n\n    } else if (query instanceof PrefixQuery) {\n      PrefixQuery q = (PrefixQuery)query;\n      Term prefix = q.getPrefix();\n      FieldType ft = writeFieldName(prefix.field(), schema, out, flags);\n      out.append(prefix.text());\n      out.append('*');\n    } else if (query instanceof ConstantScorePrefixQuery) {\n      ConstantScorePrefixQuery q = (ConstantScorePrefixQuery)query;\n      Term prefix = q.getPrefix();\n      FieldType ft = writeFieldName(prefix.field(), schema, out, flags);\n      out.append(prefix.text());\n      out.append('*');\n    } else if (query instanceof WildcardQuery) {\n      out.append(query.toString());\n      writeBoost=false;\n    } else if (query instanceof FuzzyQuery) {\n      out.append(query.toString());\n      writeBoost=false;      \n    } else if (query instanceof ConstantScoreQuery) {\n      out.append(query.toString());\n      writeBoost=false;\n    } else {\n      out.append(query.getClass().getSimpleName()\n              + '(' + query.toString() + ')' );\n      writeBoost=false;\n    }\n\n    if (writeBoost && query.getBoost() != 1.0f) {\n      out.append(\"^\");\n      out.append(Float.toString(query.getBoost()));\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7e00023dc6828d09dbfb05d4dfa4d488cc81ee42","date":1253196493,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/search/QueryParsing#toString(Query,IndexSchema,Appendable,int).mjava","pathOld":"src/java/org/apache/solr/search/QueryParsing#toString(Query,IndexSchema,Appendable,int).mjava","sourceNew":"  /** @see #toString(Query,IndexSchema) */\n  public static void toString(Query query, IndexSchema schema, Appendable out, int flags) throws IOException {\n    boolean writeBoost=true;\n\n    if (query instanceof TermQuery) {\n      TermQuery q = (TermQuery)query;\n      Term t = q.getTerm();\n      FieldType ft = writeFieldName(t.field(), schema, out, flags);\n      writeFieldVal(t.text(), ft, out, flags);\n    } else if (query instanceof TermRangeQuery) {\n      TermRangeQuery q = (TermRangeQuery)query;\n      String fname = q.getField();\n      FieldType ft = writeFieldName(fname, schema, out, flags);\n      out.append( q.includesLower() ? '[' : '{' );\n      String lt = q.getLowerTerm();\n      String ut = q.getUpperTerm();\n      if (lt==null) {\n        out.append('*');\n      } else {\n        writeFieldVal(lt, ft, out, flags);\n      }\n\n      out.append(\" TO \");\n\n      if (ut==null) {\n        out.append('*');\n      } else {\n        writeFieldVal(ut, ft, out, flags);\n      }\n\n      out.append( q.includesUpper() ? ']' : '}' );\n    } else if (query instanceof NumericRangeQuery) {\n      NumericRangeQuery q = (NumericRangeQuery)query;\n      String fname = q.getField();\n      FieldType ft = writeFieldName(fname, schema, out, flags);\n      out.append( q.includesMin() ? '[' : '{' );\n      Number lt = q.getMin();\n      Number ut = q.getMax();\n      if (lt==null) {\n        out.append('*');\n      } else {\n        out.append(lt.toString());\n      }\n\n      out.append(\" TO \");\n\n      if (ut==null) {\n        out.append('*');\n      } else {\n        out.append(ut.toString());\n      }\n\n      out.append( q.includesMax() ? ']' : '}' );\n    } else if (query instanceof BooleanQuery) {\n      BooleanQuery q = (BooleanQuery)query;\n      boolean needParens=false;\n\n      if (q.getBoost() != 1.0 || q.getMinimumNumberShouldMatch() != 0) {\n        needParens=true;\n      }\n      if (needParens) {\n        out.append('(');\n      }\n      boolean first=true;\n      for (BooleanClause c : (List<BooleanClause>)q.clauses()) {\n        if (!first) {\n          out.append(' ');\n        } else {\n          first=false;\n        }\n\n        if (c.isProhibited()) {\n          out.append('-');\n        } else if (c.isRequired()) {\n          out.append('+');\n        }\n        Query subQuery = c.getQuery();\n        boolean wrapQuery=false;\n\n        // TODO: may need to put parens around other types\n        // of queries too, depending on future syntax.\n        if (subQuery instanceof BooleanQuery) {\n          wrapQuery=true;\n        }\n\n        if (wrapQuery) {\n          out.append('(');\n        }\n\n        toString(subQuery, schema, out, flags);\n\n        if (wrapQuery) {\n          out.append(')');\n        }\n      }\n\n      if (needParens) {\n        out.append(')');\n      }\n      if (q.getMinimumNumberShouldMatch()>0) {\n        out.append('~');\n        out.append(Integer.toString(q.getMinimumNumberShouldMatch()));\n      }\n\n    } else if (query instanceof PrefixQuery) {\n      PrefixQuery q = (PrefixQuery)query;\n      Term prefix = q.getPrefix();\n      FieldType ft = writeFieldName(prefix.field(), schema, out, flags);\n      out.append(prefix.text());\n      out.append('*');\n    } else if (query instanceof ConstantScorePrefixQuery) {\n      ConstantScorePrefixQuery q = (ConstantScorePrefixQuery)query;\n      Term prefix = q.getPrefix();\n      FieldType ft = writeFieldName(prefix.field(), schema, out, flags);\n      out.append(prefix.text());\n      out.append('*');\n    } else if (query instanceof WildcardQuery) {\n      out.append(query.toString());\n      writeBoost=false;\n    } else if (query instanceof FuzzyQuery) {\n      out.append(query.toString());\n      writeBoost=false;      \n    } else if (query instanceof SolrConstantScoreQuery) {\n      out.append(query.toString());\n      writeBoost=false;\n    } else {\n      out.append(query.getClass().getSimpleName()\n              + '(' + query.toString() + ')' );\n      writeBoost=false;\n    }\n\n    if (writeBoost && query.getBoost() != 1.0f) {\n      out.append(\"^\");\n      out.append(Float.toString(query.getBoost()));\n    }\n\n  }\n\n","sourceOld":"  /** @see #toString(Query,IndexSchema) */\n  public static void toString(Query query, IndexSchema schema, Appendable out, int flags) throws IOException {\n    boolean writeBoost=true;\n\n    if (query instanceof TermQuery) {\n      TermQuery q = (TermQuery)query;\n      Term t = q.getTerm();\n      FieldType ft = writeFieldName(t.field(), schema, out, flags);\n      writeFieldVal(t.text(), ft, out, flags);\n    } else if (query instanceof TermRangeQuery) {\n      TermRangeQuery q = (TermRangeQuery)query;\n      String fname = q.getField();\n      FieldType ft = writeFieldName(fname, schema, out, flags);\n      out.append( q.includesLower() ? '[' : '{' );\n      String lt = q.getLowerTerm();\n      String ut = q.getUpperTerm();\n      if (lt==null) {\n        out.append('*');\n      } else {\n        writeFieldVal(lt, ft, out, flags);\n      }\n\n      out.append(\" TO \");\n\n      if (ut==null) {\n        out.append('*');\n      } else {\n        writeFieldVal(ut, ft, out, flags);\n      }\n\n      out.append( q.includesUpper() ? ']' : '}' );\n    } else if (query instanceof NumericRangeQuery) {\n      NumericRangeQuery q = (NumericRangeQuery)query;\n      String fname = q.getField();\n      FieldType ft = writeFieldName(fname, schema, out, flags);\n      out.append( q.includesMin() ? '[' : '{' );\n      Number lt = q.getMin();\n      Number ut = q.getMax();\n      if (lt==null) {\n        out.append('*');\n      } else {\n        out.append(lt.toString());\n      }\n\n      out.append(\" TO \");\n\n      if (ut==null) {\n        out.append('*');\n      } else {\n        out.append(ut.toString());\n      }\n\n      out.append( q.includesMax() ? ']' : '}' );\n    } else if (query instanceof BooleanQuery) {\n      BooleanQuery q = (BooleanQuery)query;\n      boolean needParens=false;\n\n      if (q.getBoost() != 1.0 || q.getMinimumNumberShouldMatch() != 0) {\n        needParens=true;\n      }\n      if (needParens) {\n        out.append('(');\n      }\n      boolean first=true;\n      for (BooleanClause c : (List<BooleanClause>)q.clauses()) {\n        if (!first) {\n          out.append(' ');\n        } else {\n          first=false;\n        }\n\n        if (c.isProhibited()) {\n          out.append('-');\n        } else if (c.isRequired()) {\n          out.append('+');\n        }\n        Query subQuery = c.getQuery();\n        boolean wrapQuery=false;\n\n        // TODO: may need to put parens around other types\n        // of queries too, depending on future syntax.\n        if (subQuery instanceof BooleanQuery) {\n          wrapQuery=true;\n        }\n\n        if (wrapQuery) {\n          out.append('(');\n        }\n\n        toString(subQuery, schema, out, flags);\n\n        if (wrapQuery) {\n          out.append(')');\n        }\n      }\n\n      if (needParens) {\n        out.append(')');\n      }\n      if (q.getMinimumNumberShouldMatch()>0) {\n        out.append('~');\n        out.append(Integer.toString(q.getMinimumNumberShouldMatch()));\n      }\n\n    } else if (query instanceof PrefixQuery) {\n      PrefixQuery q = (PrefixQuery)query;\n      Term prefix = q.getPrefix();\n      FieldType ft = writeFieldName(prefix.field(), schema, out, flags);\n      out.append(prefix.text());\n      out.append('*');\n    } else if (query instanceof ConstantScorePrefixQuery) {\n      ConstantScorePrefixQuery q = (ConstantScorePrefixQuery)query;\n      Term prefix = q.getPrefix();\n      FieldType ft = writeFieldName(prefix.field(), schema, out, flags);\n      out.append(prefix.text());\n      out.append('*');\n    } else if (query instanceof WildcardQuery) {\n      out.append(query.toString());\n      writeBoost=false;\n    } else if (query instanceof FuzzyQuery) {\n      out.append(query.toString());\n      writeBoost=false;      \n    } else if (query instanceof ConstantScoreQuery) {\n      out.append(query.toString());\n      writeBoost=false;\n    } else {\n      out.append(query.getClass().getSimpleName()\n              + '(' + query.toString() + ')' );\n      writeBoost=false;\n    }\n\n    if (writeBoost && query.getBoost() != 1.0f) {\n      out.append(\"^\");\n      out.append(Float.toString(query.getBoost()));\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d1d56563658ec3c7d66fba1efe9ef346dd8db440","date":1253212828,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/search/QueryParsing#toString(Query,IndexSchema,Appendable,int).mjava","pathOld":"src/java/org/apache/solr/search/QueryParsing#toString(Query,IndexSchema,Appendable,int).mjava","sourceNew":"  /** @see #toString(Query,IndexSchema) */\n  public static void toString(Query query, IndexSchema schema, Appendable out, int flags) throws IOException {\n    boolean writeBoost=true;\n\n    if (query instanceof TermQuery) {\n      TermQuery q = (TermQuery)query;\n      Term t = q.getTerm();\n      FieldType ft = writeFieldName(t.field(), schema, out, flags);\n      writeFieldVal(t.text(), ft, out, flags);\n    } else if (query instanceof TermRangeQuery) {\n      TermRangeQuery q = (TermRangeQuery)query;\n      String fname = q.getField();\n      FieldType ft = writeFieldName(fname, schema, out, flags);\n      out.append( q.includesLower() ? '[' : '{' );\n      String lt = q.getLowerTerm();\n      String ut = q.getUpperTerm();\n      if (lt==null) {\n        out.append('*');\n      } else {\n        writeFieldVal(lt, ft, out, flags);\n      }\n\n      out.append(\" TO \");\n\n      if (ut==null) {\n        out.append('*');\n      } else {\n        writeFieldVal(ut, ft, out, flags);\n      }\n\n      out.append( q.includesUpper() ? ']' : '}' );\n    } else if (query instanceof NumericRangeQuery) {\n      NumericRangeQuery q = (NumericRangeQuery)query;\n      String fname = q.getField();\n      FieldType ft = writeFieldName(fname, schema, out, flags);\n      out.append( q.includesMin() ? '[' : '{' );\n      Number lt = q.getMin();\n      Number ut = q.getMax();\n      if (lt==null) {\n        out.append('*');\n      } else {\n        out.append(lt.toString());\n      }\n\n      out.append(\" TO \");\n\n      if (ut==null) {\n        out.append('*');\n      } else {\n        out.append(ut.toString());\n      }\n\n      out.append( q.includesMax() ? ']' : '}' );\n    } else if (query instanceof BooleanQuery) {\n      BooleanQuery q = (BooleanQuery)query;\n      boolean needParens=false;\n\n      if (q.getBoost() != 1.0 || q.getMinimumNumberShouldMatch() != 0) {\n        needParens=true;\n      }\n      if (needParens) {\n        out.append('(');\n      }\n      boolean first=true;\n      for (BooleanClause c : (List<BooleanClause>)q.clauses()) {\n        if (!first) {\n          out.append(' ');\n        } else {\n          first=false;\n        }\n\n        if (c.isProhibited()) {\n          out.append('-');\n        } else if (c.isRequired()) {\n          out.append('+');\n        }\n        Query subQuery = c.getQuery();\n        boolean wrapQuery=false;\n\n        // TODO: may need to put parens around other types\n        // of queries too, depending on future syntax.\n        if (subQuery instanceof BooleanQuery) {\n          wrapQuery=true;\n        }\n\n        if (wrapQuery) {\n          out.append('(');\n        }\n\n        toString(subQuery, schema, out, flags);\n\n        if (wrapQuery) {\n          out.append(')');\n        }\n      }\n\n      if (needParens) {\n        out.append(')');\n      }\n      if (q.getMinimumNumberShouldMatch()>0) {\n        out.append('~');\n        out.append(Integer.toString(q.getMinimumNumberShouldMatch()));\n      }\n\n    } else if (query instanceof PrefixQuery) {\n      PrefixQuery q = (PrefixQuery)query;\n      Term prefix = q.getPrefix();\n      FieldType ft = writeFieldName(prefix.field(), schema, out, flags);\n      out.append(prefix.text());\n      out.append('*');\n    } else if (query instanceof ConstantScorePrefixQuery) {\n      ConstantScorePrefixQuery q = (ConstantScorePrefixQuery)query;\n      Term prefix = q.getPrefix();\n      FieldType ft = writeFieldName(prefix.field(), schema, out, flags);\n      out.append(prefix.text());\n      out.append('*');\n    } else if (query instanceof WildcardQuery) {\n      out.append(query.toString());\n      writeBoost=false;\n    } else if (query instanceof FuzzyQuery) {\n      out.append(query.toString());\n      writeBoost=false;      \n    } else if (query instanceof ConstantScoreQuery) {\n      out.append(query.toString());\n      writeBoost=false;\n    } else {\n      out.append(query.getClass().getSimpleName()\n              + '(' + query.toString() + ')' );\n      writeBoost=false;\n    }\n\n    if (writeBoost && query.getBoost() != 1.0f) {\n      out.append(\"^\");\n      out.append(Float.toString(query.getBoost()));\n    }\n\n  }\n\n","sourceOld":"  /** @see #toString(Query,IndexSchema) */\n  public static void toString(Query query, IndexSchema schema, Appendable out, int flags) throws IOException {\n    boolean writeBoost=true;\n\n    if (query instanceof TermQuery) {\n      TermQuery q = (TermQuery)query;\n      Term t = q.getTerm();\n      FieldType ft = writeFieldName(t.field(), schema, out, flags);\n      writeFieldVal(t.text(), ft, out, flags);\n    } else if (query instanceof TermRangeQuery) {\n      TermRangeQuery q = (TermRangeQuery)query;\n      String fname = q.getField();\n      FieldType ft = writeFieldName(fname, schema, out, flags);\n      out.append( q.includesLower() ? '[' : '{' );\n      String lt = q.getLowerTerm();\n      String ut = q.getUpperTerm();\n      if (lt==null) {\n        out.append('*');\n      } else {\n        writeFieldVal(lt, ft, out, flags);\n      }\n\n      out.append(\" TO \");\n\n      if (ut==null) {\n        out.append('*');\n      } else {\n        writeFieldVal(ut, ft, out, flags);\n      }\n\n      out.append( q.includesUpper() ? ']' : '}' );\n    } else if (query instanceof NumericRangeQuery) {\n      NumericRangeQuery q = (NumericRangeQuery)query;\n      String fname = q.getField();\n      FieldType ft = writeFieldName(fname, schema, out, flags);\n      out.append( q.includesMin() ? '[' : '{' );\n      Number lt = q.getMin();\n      Number ut = q.getMax();\n      if (lt==null) {\n        out.append('*');\n      } else {\n        out.append(lt.toString());\n      }\n\n      out.append(\" TO \");\n\n      if (ut==null) {\n        out.append('*');\n      } else {\n        out.append(ut.toString());\n      }\n\n      out.append( q.includesMax() ? ']' : '}' );\n    } else if (query instanceof BooleanQuery) {\n      BooleanQuery q = (BooleanQuery)query;\n      boolean needParens=false;\n\n      if (q.getBoost() != 1.0 || q.getMinimumNumberShouldMatch() != 0) {\n        needParens=true;\n      }\n      if (needParens) {\n        out.append('(');\n      }\n      boolean first=true;\n      for (BooleanClause c : (List<BooleanClause>)q.clauses()) {\n        if (!first) {\n          out.append(' ');\n        } else {\n          first=false;\n        }\n\n        if (c.isProhibited()) {\n          out.append('-');\n        } else if (c.isRequired()) {\n          out.append('+');\n        }\n        Query subQuery = c.getQuery();\n        boolean wrapQuery=false;\n\n        // TODO: may need to put parens around other types\n        // of queries too, depending on future syntax.\n        if (subQuery instanceof BooleanQuery) {\n          wrapQuery=true;\n        }\n\n        if (wrapQuery) {\n          out.append('(');\n        }\n\n        toString(subQuery, schema, out, flags);\n\n        if (wrapQuery) {\n          out.append(')');\n        }\n      }\n\n      if (needParens) {\n        out.append(')');\n      }\n      if (q.getMinimumNumberShouldMatch()>0) {\n        out.append('~');\n        out.append(Integer.toString(q.getMinimumNumberShouldMatch()));\n      }\n\n    } else if (query instanceof PrefixQuery) {\n      PrefixQuery q = (PrefixQuery)query;\n      Term prefix = q.getPrefix();\n      FieldType ft = writeFieldName(prefix.field(), schema, out, flags);\n      out.append(prefix.text());\n      out.append('*');\n    } else if (query instanceof ConstantScorePrefixQuery) {\n      ConstantScorePrefixQuery q = (ConstantScorePrefixQuery)query;\n      Term prefix = q.getPrefix();\n      FieldType ft = writeFieldName(prefix.field(), schema, out, flags);\n      out.append(prefix.text());\n      out.append('*');\n    } else if (query instanceof WildcardQuery) {\n      out.append(query.toString());\n      writeBoost=false;\n    } else if (query instanceof FuzzyQuery) {\n      out.append(query.toString());\n      writeBoost=false;      \n    } else if (query instanceof SolrConstantScoreQuery) {\n      out.append(query.toString());\n      writeBoost=false;\n    } else {\n      out.append(query.getClass().getSimpleName()\n              + '(' + query.toString() + ')' );\n      writeBoost=false;\n    }\n\n    if (writeBoost && query.getBoost() != 1.0f) {\n      out.append(\"^\");\n      out.append(Float.toString(query.getBoost()));\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6b87aae76ff9968dd754e0682d8bc2edfea6b706","date":1254673566,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/java/org/apache/solr/search/QueryParsing#toString(Query,IndexSchema,Appendable,int).mjava","pathOld":"src/java/org/apache/solr/search/QueryParsing#toString(Query,IndexSchema,Appendable,int).mjava","sourceNew":"  /** @see #toString(Query,IndexSchema) */\n  public static void toString(Query query, IndexSchema schema, Appendable out, int flags) throws IOException {\n    boolean writeBoost=true;\n\n    if (query instanceof TermQuery) {\n      TermQuery q = (TermQuery)query;\n      Term t = q.getTerm();\n      FieldType ft = writeFieldName(t.field(), schema, out, flags);\n      writeFieldVal(t.text(), ft, out, flags);\n    } else if (query instanceof TermRangeQuery) {\n      TermRangeQuery q = (TermRangeQuery)query;\n      String fname = q.getField();\n      FieldType ft = writeFieldName(fname, schema, out, flags);\n      out.append( q.includesLower() ? '[' : '{' );\n      String lt = q.getLowerTerm();\n      String ut = q.getUpperTerm();\n      if (lt==null) {\n        out.append('*');\n      } else {\n        writeFieldVal(lt, ft, out, flags);\n      }\n\n      out.append(\" TO \");\n\n      if (ut==null) {\n        out.append('*');\n      } else {\n        writeFieldVal(ut, ft, out, flags);\n      }\n\n      out.append( q.includesUpper() ? ']' : '}' );\n    } else if (query instanceof NumericRangeQuery) {\n      NumericRangeQuery q = (NumericRangeQuery)query;\n      String fname = q.getField();\n      FieldType ft = writeFieldName(fname, schema, out, flags);\n      out.append( q.includesMin() ? '[' : '{' );\n      Number lt = q.getMin();\n      Number ut = q.getMax();\n      if (lt==null) {\n        out.append('*');\n      } else {\n        out.append(lt.toString());\n      }\n\n      out.append(\" TO \");\n\n      if (ut==null) {\n        out.append('*');\n      } else {\n        out.append(ut.toString());\n      }\n\n      out.append( q.includesMax() ? ']' : '}' );\n    } else if (query instanceof BooleanQuery) {\n      BooleanQuery q = (BooleanQuery)query;\n      boolean needParens=false;\n\n      if (q.getBoost() != 1.0 || q.getMinimumNumberShouldMatch() != 0) {\n        needParens=true;\n      }\n      if (needParens) {\n        out.append('(');\n      }\n      boolean first=true;\n      for (BooleanClause c : (List<BooleanClause>)q.clauses()) {\n        if (!first) {\n          out.append(' ');\n        } else {\n          first=false;\n        }\n\n        if (c.isProhibited()) {\n          out.append('-');\n        } else if (c.isRequired()) {\n          out.append('+');\n        }\n        Query subQuery = c.getQuery();\n        boolean wrapQuery=false;\n\n        // TODO: may need to put parens around other types\n        // of queries too, depending on future syntax.\n        if (subQuery instanceof BooleanQuery) {\n          wrapQuery=true;\n        }\n\n        if (wrapQuery) {\n          out.append('(');\n        }\n\n        toString(subQuery, schema, out, flags);\n\n        if (wrapQuery) {\n          out.append(')');\n        }\n      }\n\n      if (needParens) {\n        out.append(')');\n      }\n      if (q.getMinimumNumberShouldMatch()>0) {\n        out.append('~');\n        out.append(Integer.toString(q.getMinimumNumberShouldMatch()));\n      }\n\n    } else if (query instanceof PrefixQuery) {\n      PrefixQuery q = (PrefixQuery)query;\n      Term prefix = q.getPrefix();\n      FieldType ft = writeFieldName(prefix.field(), schema, out, flags);\n      out.append(prefix.text());\n      out.append('*');\n    } else if (query instanceof ConstantScorePrefixQuery) {\n      ConstantScorePrefixQuery q = (ConstantScorePrefixQuery)query;\n      Term prefix = q.getPrefix();\n      FieldType ft = writeFieldName(prefix.field(), schema, out, flags);\n      out.append(prefix.text());\n      out.append('*');\n    } else if (query instanceof WildcardQuery) {\n      out.append(query.toString());\n      writeBoost=false;\n    } else if (query instanceof FuzzyQuery) {\n      out.append(query.toString());\n      writeBoost=false;      \n    } else if (query instanceof ConstantScoreQuery) {\n      out.append(query.toString());\n      writeBoost=false;\n    } else if (query instanceof SolrQueryWrapper) {\n      toString(((SolrQueryWrapper)query).getWrappedQuery(), schema, out, flags);\n      return;\n    } else {\n      out.append(query.getClass().getSimpleName()\n              + '(' + query.toString() + ')' );\n      writeBoost=false;\n    }\n\n    if (writeBoost && query.getBoost() != 1.0f) {\n      out.append(\"^\");\n      out.append(Float.toString(query.getBoost()));\n    }\n\n  }\n\n","sourceOld":"  /** @see #toString(Query,IndexSchema) */\n  public static void toString(Query query, IndexSchema schema, Appendable out, int flags) throws IOException {\n    boolean writeBoost=true;\n\n    if (query instanceof TermQuery) {\n      TermQuery q = (TermQuery)query;\n      Term t = q.getTerm();\n      FieldType ft = writeFieldName(t.field(), schema, out, flags);\n      writeFieldVal(t.text(), ft, out, flags);\n    } else if (query instanceof TermRangeQuery) {\n      TermRangeQuery q = (TermRangeQuery)query;\n      String fname = q.getField();\n      FieldType ft = writeFieldName(fname, schema, out, flags);\n      out.append( q.includesLower() ? '[' : '{' );\n      String lt = q.getLowerTerm();\n      String ut = q.getUpperTerm();\n      if (lt==null) {\n        out.append('*');\n      } else {\n        writeFieldVal(lt, ft, out, flags);\n      }\n\n      out.append(\" TO \");\n\n      if (ut==null) {\n        out.append('*');\n      } else {\n        writeFieldVal(ut, ft, out, flags);\n      }\n\n      out.append( q.includesUpper() ? ']' : '}' );\n    } else if (query instanceof NumericRangeQuery) {\n      NumericRangeQuery q = (NumericRangeQuery)query;\n      String fname = q.getField();\n      FieldType ft = writeFieldName(fname, schema, out, flags);\n      out.append( q.includesMin() ? '[' : '{' );\n      Number lt = q.getMin();\n      Number ut = q.getMax();\n      if (lt==null) {\n        out.append('*');\n      } else {\n        out.append(lt.toString());\n      }\n\n      out.append(\" TO \");\n\n      if (ut==null) {\n        out.append('*');\n      } else {\n        out.append(ut.toString());\n      }\n\n      out.append( q.includesMax() ? ']' : '}' );\n    } else if (query instanceof BooleanQuery) {\n      BooleanQuery q = (BooleanQuery)query;\n      boolean needParens=false;\n\n      if (q.getBoost() != 1.0 || q.getMinimumNumberShouldMatch() != 0) {\n        needParens=true;\n      }\n      if (needParens) {\n        out.append('(');\n      }\n      boolean first=true;\n      for (BooleanClause c : (List<BooleanClause>)q.clauses()) {\n        if (!first) {\n          out.append(' ');\n        } else {\n          first=false;\n        }\n\n        if (c.isProhibited()) {\n          out.append('-');\n        } else if (c.isRequired()) {\n          out.append('+');\n        }\n        Query subQuery = c.getQuery();\n        boolean wrapQuery=false;\n\n        // TODO: may need to put parens around other types\n        // of queries too, depending on future syntax.\n        if (subQuery instanceof BooleanQuery) {\n          wrapQuery=true;\n        }\n\n        if (wrapQuery) {\n          out.append('(');\n        }\n\n        toString(subQuery, schema, out, flags);\n\n        if (wrapQuery) {\n          out.append(')');\n        }\n      }\n\n      if (needParens) {\n        out.append(')');\n      }\n      if (q.getMinimumNumberShouldMatch()>0) {\n        out.append('~');\n        out.append(Integer.toString(q.getMinimumNumberShouldMatch()));\n      }\n\n    } else if (query instanceof PrefixQuery) {\n      PrefixQuery q = (PrefixQuery)query;\n      Term prefix = q.getPrefix();\n      FieldType ft = writeFieldName(prefix.field(), schema, out, flags);\n      out.append(prefix.text());\n      out.append('*');\n    } else if (query instanceof ConstantScorePrefixQuery) {\n      ConstantScorePrefixQuery q = (ConstantScorePrefixQuery)query;\n      Term prefix = q.getPrefix();\n      FieldType ft = writeFieldName(prefix.field(), schema, out, flags);\n      out.append(prefix.text());\n      out.append('*');\n    } else if (query instanceof WildcardQuery) {\n      out.append(query.toString());\n      writeBoost=false;\n    } else if (query instanceof FuzzyQuery) {\n      out.append(query.toString());\n      writeBoost=false;      \n    } else if (query instanceof ConstantScoreQuery) {\n      out.append(query.toString());\n      writeBoost=false;\n    } else {\n      out.append(query.getClass().getSimpleName()\n              + '(' + query.toString() + ')' );\n      writeBoost=false;\n    }\n\n    if (writeBoost && query.getBoost() != 1.0f) {\n      out.append(\"^\");\n      out.append(Float.toString(query.getBoost()));\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"64c43363f86d5933eca7bb7f9c256aba8cf6b9af","date":1258732500,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/java/org/apache/solr/search/QueryParsing#toString(Query,IndexSchema,Appendable,int).mjava","pathOld":"src/java/org/apache/solr/search/QueryParsing#toString(Query,IndexSchema,Appendable,int).mjava","sourceNew":"  /** @see #toString(Query,IndexSchema) */\n  public static void toString(Query query, IndexSchema schema, Appendable out, int flags) throws IOException {\n    boolean writeBoost=true;\n\n    if (query instanceof TermQuery) {\n      TermQuery q = (TermQuery)query;\n      Term t = q.getTerm();\n      FieldType ft = writeFieldName(t.field(), schema, out, flags);\n      writeFieldVal(t.text(), ft, out, flags);\n    } else if (query instanceof TermRangeQuery) {\n      TermRangeQuery q = (TermRangeQuery)query;\n      String fname = q.getField();\n      FieldType ft = writeFieldName(fname, schema, out, flags);\n      out.append( q.includesLower() ? '[' : '{' );\n      String lt = q.getLowerTerm();\n      String ut = q.getUpperTerm();\n      if (lt==null) {\n        out.append('*');\n      } else {\n        writeFieldVal(lt, ft, out, flags);\n      }\n\n      out.append(\" TO \");\n\n      if (ut==null) {\n        out.append('*');\n      } else {\n        writeFieldVal(ut, ft, out, flags);\n      }\n\n      out.append( q.includesUpper() ? ']' : '}' );\n    } else if (query instanceof NumericRangeQuery) {\n      NumericRangeQuery q = (NumericRangeQuery)query;\n      String fname = q.getField();\n      FieldType ft = writeFieldName(fname, schema, out, flags);\n      out.append( q.includesMin() ? '[' : '{' );\n      Number lt = q.getMin();\n      Number ut = q.getMax();\n      if (lt==null) {\n        out.append('*');\n      } else {\n        out.append(lt.toString());\n      }\n\n      out.append(\" TO \");\n\n      if (ut==null) {\n        out.append('*');\n      } else {\n        out.append(ut.toString());\n      }\n\n      out.append( q.includesMax() ? ']' : '}' );\n    } else if (query instanceof BooleanQuery) {\n      BooleanQuery q = (BooleanQuery)query;\n      boolean needParens=false;\n\n      if (q.getBoost() != 1.0 || q.getMinimumNumberShouldMatch() != 0) {\n        needParens=true;\n      }\n      if (needParens) {\n        out.append('(');\n      }\n      boolean first=true;\n      for (BooleanClause c : (List<BooleanClause>)q.clauses()) {\n        if (!first) {\n          out.append(' ');\n        } else {\n          first=false;\n        }\n\n        if (c.isProhibited()) {\n          out.append('-');\n        } else if (c.isRequired()) {\n          out.append('+');\n        }\n        Query subQuery = c.getQuery();\n        boolean wrapQuery=false;\n\n        // TODO: may need to put parens around other types\n        // of queries too, depending on future syntax.\n        if (subQuery instanceof BooleanQuery) {\n          wrapQuery=true;\n        }\n\n        if (wrapQuery) {\n          out.append('(');\n        }\n\n        toString(subQuery, schema, out, flags);\n\n        if (wrapQuery) {\n          out.append(')');\n        }\n      }\n\n      if (needParens) {\n        out.append(')');\n      }\n      if (q.getMinimumNumberShouldMatch()>0) {\n        out.append('~');\n        out.append(Integer.toString(q.getMinimumNumberShouldMatch()));\n      }\n\n    } else if (query instanceof PrefixQuery) {\n      PrefixQuery q = (PrefixQuery)query;\n      Term prefix = q.getPrefix();\n      FieldType ft = writeFieldName(prefix.field(), schema, out, flags);\n      out.append(prefix.text());\n      out.append('*');\n    } else if (query instanceof ConstantScorePrefixQuery) {\n      ConstantScorePrefixQuery q = (ConstantScorePrefixQuery)query;\n      Term prefix = q.getPrefix();\n      FieldType ft = writeFieldName(prefix.field(), schema, out, flags);\n      out.append(prefix.text());\n      out.append('*');\n    } else if (query instanceof WildcardQuery) {\n      out.append(query.toString());\n      writeBoost=false;\n    } else if (query instanceof FuzzyQuery) {\n      out.append(query.toString());\n      writeBoost=false;      \n    } else if (query instanceof ConstantScoreQuery) {\n      out.append(query.toString());\n      writeBoost=false;\n    } else {\n      out.append(query.getClass().getSimpleName()\n              + '(' + query.toString() + ')' );\n      writeBoost=false;\n    }\n\n    if (writeBoost && query.getBoost() != 1.0f) {\n      out.append(\"^\");\n      out.append(Float.toString(query.getBoost()));\n    }\n\n  }\n\n","sourceOld":"  /** @see #toString(Query,IndexSchema) */\n  public static void toString(Query query, IndexSchema schema, Appendable out, int flags) throws IOException {\n    boolean writeBoost=true;\n\n    if (query instanceof TermQuery) {\n      TermQuery q = (TermQuery)query;\n      Term t = q.getTerm();\n      FieldType ft = writeFieldName(t.field(), schema, out, flags);\n      writeFieldVal(t.text(), ft, out, flags);\n    } else if (query instanceof TermRangeQuery) {\n      TermRangeQuery q = (TermRangeQuery)query;\n      String fname = q.getField();\n      FieldType ft = writeFieldName(fname, schema, out, flags);\n      out.append( q.includesLower() ? '[' : '{' );\n      String lt = q.getLowerTerm();\n      String ut = q.getUpperTerm();\n      if (lt==null) {\n        out.append('*');\n      } else {\n        writeFieldVal(lt, ft, out, flags);\n      }\n\n      out.append(\" TO \");\n\n      if (ut==null) {\n        out.append('*');\n      } else {\n        writeFieldVal(ut, ft, out, flags);\n      }\n\n      out.append( q.includesUpper() ? ']' : '}' );\n    } else if (query instanceof NumericRangeQuery) {\n      NumericRangeQuery q = (NumericRangeQuery)query;\n      String fname = q.getField();\n      FieldType ft = writeFieldName(fname, schema, out, flags);\n      out.append( q.includesMin() ? '[' : '{' );\n      Number lt = q.getMin();\n      Number ut = q.getMax();\n      if (lt==null) {\n        out.append('*');\n      } else {\n        out.append(lt.toString());\n      }\n\n      out.append(\" TO \");\n\n      if (ut==null) {\n        out.append('*');\n      } else {\n        out.append(ut.toString());\n      }\n\n      out.append( q.includesMax() ? ']' : '}' );\n    } else if (query instanceof BooleanQuery) {\n      BooleanQuery q = (BooleanQuery)query;\n      boolean needParens=false;\n\n      if (q.getBoost() != 1.0 || q.getMinimumNumberShouldMatch() != 0) {\n        needParens=true;\n      }\n      if (needParens) {\n        out.append('(');\n      }\n      boolean first=true;\n      for (BooleanClause c : (List<BooleanClause>)q.clauses()) {\n        if (!first) {\n          out.append(' ');\n        } else {\n          first=false;\n        }\n\n        if (c.isProhibited()) {\n          out.append('-');\n        } else if (c.isRequired()) {\n          out.append('+');\n        }\n        Query subQuery = c.getQuery();\n        boolean wrapQuery=false;\n\n        // TODO: may need to put parens around other types\n        // of queries too, depending on future syntax.\n        if (subQuery instanceof BooleanQuery) {\n          wrapQuery=true;\n        }\n\n        if (wrapQuery) {\n          out.append('(');\n        }\n\n        toString(subQuery, schema, out, flags);\n\n        if (wrapQuery) {\n          out.append(')');\n        }\n      }\n\n      if (needParens) {\n        out.append(')');\n      }\n      if (q.getMinimumNumberShouldMatch()>0) {\n        out.append('~');\n        out.append(Integer.toString(q.getMinimumNumberShouldMatch()));\n      }\n\n    } else if (query instanceof PrefixQuery) {\n      PrefixQuery q = (PrefixQuery)query;\n      Term prefix = q.getPrefix();\n      FieldType ft = writeFieldName(prefix.field(), schema, out, flags);\n      out.append(prefix.text());\n      out.append('*');\n    } else if (query instanceof ConstantScorePrefixQuery) {\n      ConstantScorePrefixQuery q = (ConstantScorePrefixQuery)query;\n      Term prefix = q.getPrefix();\n      FieldType ft = writeFieldName(prefix.field(), schema, out, flags);\n      out.append(prefix.text());\n      out.append('*');\n    } else if (query instanceof WildcardQuery) {\n      out.append(query.toString());\n      writeBoost=false;\n    } else if (query instanceof FuzzyQuery) {\n      out.append(query.toString());\n      writeBoost=false;      \n    } else if (query instanceof ConstantScoreQuery) {\n      out.append(query.toString());\n      writeBoost=false;\n    } else if (query instanceof SolrQueryWrapper) {\n      toString(((SolrQueryWrapper)query).getWrappedQuery(), schema, out, flags);\n      return;\n    } else {\n      out.append(query.getClass().getSimpleName()\n              + '(' + query.toString() + ')' );\n      writeBoost=false;\n    }\n\n    if (writeBoost && query.getBoost() != 1.0f) {\n      out.append(\"^\");\n      out.append(Float.toString(query.getBoost()));\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"32ef722831135736529762b4b97a13dd58b06f66","date":1260567610,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/solr/search/QueryParsing#toString(Query,IndexSchema,Appendable,int).mjava","pathOld":"src/java/org/apache/solr/search/QueryParsing#toString(Query,IndexSchema,Appendable,int).mjava","sourceNew":"  /**\n   * @see #toString(Query,IndexSchema)\n   */\n  public static void toString(Query query, IndexSchema schema, Appendable out, int flags) throws IOException {\n    boolean writeBoost = true;\n\n    if (query instanceof TermQuery) {\n      TermQuery q = (TermQuery) query;\n      Term t = q.getTerm();\n      FieldType ft = writeFieldName(t.field(), schema, out, flags);\n      writeFieldVal(t.text(), ft, out, flags);\n    } else if (query instanceof TermRangeQuery) {\n      TermRangeQuery q = (TermRangeQuery) query;\n      String fname = q.getField();\n      FieldType ft = writeFieldName(fname, schema, out, flags);\n      out.append(q.includesLower() ? '[' : '{');\n      String lt = q.getLowerTerm();\n      String ut = q.getUpperTerm();\n      if (lt == null) {\n        out.append('*');\n      } else {\n        writeFieldVal(lt, ft, out, flags);\n      }\n\n      out.append(\" TO \");\n\n      if (ut == null) {\n        out.append('*');\n      } else {\n        writeFieldVal(ut, ft, out, flags);\n      }\n\n      out.append(q.includesUpper() ? ']' : '}');\n    } else if (query instanceof NumericRangeQuery) {\n      NumericRangeQuery q = (NumericRangeQuery) query;\n      String fname = q.getField();\n      FieldType ft = writeFieldName(fname, schema, out, flags);\n      out.append(q.includesMin() ? '[' : '{');\n      Number lt = q.getMin();\n      Number ut = q.getMax();\n      if (lt == null) {\n        out.append('*');\n      } else {\n        out.append(lt.toString());\n      }\n\n      out.append(\" TO \");\n\n      if (ut == null) {\n        out.append('*');\n      } else {\n        out.append(ut.toString());\n      }\n\n      out.append(q.includesMax() ? ']' : '}');\n    } else if (query instanceof BooleanQuery) {\n      BooleanQuery q = (BooleanQuery) query;\n      boolean needParens = false;\n\n      if (q.getBoost() != 1.0 || q.getMinimumNumberShouldMatch() != 0) {\n        needParens = true;\n      }\n      if (needParens) {\n        out.append('(');\n      }\n      boolean first = true;\n      for (BooleanClause c : (List<BooleanClause>) q.clauses()) {\n        if (!first) {\n          out.append(' ');\n        } else {\n          first = false;\n        }\n\n        if (c.isProhibited()) {\n          out.append('-');\n        } else if (c.isRequired()) {\n          out.append('+');\n        }\n        Query subQuery = c.getQuery();\n        boolean wrapQuery = false;\n\n        // TODO: may need to put parens around other types\n        // of queries too, depending on future syntax.\n        if (subQuery instanceof BooleanQuery) {\n          wrapQuery = true;\n        }\n\n        if (wrapQuery) {\n          out.append('(');\n        }\n\n        toString(subQuery, schema, out, flags);\n\n        if (wrapQuery) {\n          out.append(')');\n        }\n      }\n\n      if (needParens) {\n        out.append(')');\n      }\n      if (q.getMinimumNumberShouldMatch() > 0) {\n        out.append('~');\n        out.append(Integer.toString(q.getMinimumNumberShouldMatch()));\n      }\n\n    } else if (query instanceof PrefixQuery) {\n      PrefixQuery q = (PrefixQuery) query;\n      Term prefix = q.getPrefix();\n      FieldType ft = writeFieldName(prefix.field(), schema, out, flags);\n      out.append(prefix.text());\n      out.append('*');\n    } else if (query instanceof ConstantScorePrefixQuery) {\n      ConstantScorePrefixQuery q = (ConstantScorePrefixQuery) query;\n      Term prefix = q.getPrefix();\n      FieldType ft = writeFieldName(prefix.field(), schema, out, flags);\n      out.append(prefix.text());\n      out.append('*');\n    } else if (query instanceof WildcardQuery) {\n      out.append(query.toString());\n      writeBoost = false;\n    } else if (query instanceof FuzzyQuery) {\n      out.append(query.toString());\n      writeBoost = false;\n    } else if (query instanceof ConstantScoreQuery) {\n      out.append(query.toString());\n      writeBoost = false;\n    } else {\n      out.append(query.getClass().getSimpleName()\n              + '(' + query.toString() + ')');\n      writeBoost = false;\n    }\n\n    if (writeBoost && query.getBoost() != 1.0f) {\n      out.append(\"^\");\n      out.append(Float.toString(query.getBoost()));\n    }\n\n  }\n\n","sourceOld":"  /** @see #toString(Query,IndexSchema) */\n  public static void toString(Query query, IndexSchema schema, Appendable out, int flags) throws IOException {\n    boolean writeBoost=true;\n\n    if (query instanceof TermQuery) {\n      TermQuery q = (TermQuery)query;\n      Term t = q.getTerm();\n      FieldType ft = writeFieldName(t.field(), schema, out, flags);\n      writeFieldVal(t.text(), ft, out, flags);\n    } else if (query instanceof TermRangeQuery) {\n      TermRangeQuery q = (TermRangeQuery)query;\n      String fname = q.getField();\n      FieldType ft = writeFieldName(fname, schema, out, flags);\n      out.append( q.includesLower() ? '[' : '{' );\n      String lt = q.getLowerTerm();\n      String ut = q.getUpperTerm();\n      if (lt==null) {\n        out.append('*');\n      } else {\n        writeFieldVal(lt, ft, out, flags);\n      }\n\n      out.append(\" TO \");\n\n      if (ut==null) {\n        out.append('*');\n      } else {\n        writeFieldVal(ut, ft, out, flags);\n      }\n\n      out.append( q.includesUpper() ? ']' : '}' );\n    } else if (query instanceof NumericRangeQuery) {\n      NumericRangeQuery q = (NumericRangeQuery)query;\n      String fname = q.getField();\n      FieldType ft = writeFieldName(fname, schema, out, flags);\n      out.append( q.includesMin() ? '[' : '{' );\n      Number lt = q.getMin();\n      Number ut = q.getMax();\n      if (lt==null) {\n        out.append('*');\n      } else {\n        out.append(lt.toString());\n      }\n\n      out.append(\" TO \");\n\n      if (ut==null) {\n        out.append('*');\n      } else {\n        out.append(ut.toString());\n      }\n\n      out.append( q.includesMax() ? ']' : '}' );\n    } else if (query instanceof BooleanQuery) {\n      BooleanQuery q = (BooleanQuery)query;\n      boolean needParens=false;\n\n      if (q.getBoost() != 1.0 || q.getMinimumNumberShouldMatch() != 0) {\n        needParens=true;\n      }\n      if (needParens) {\n        out.append('(');\n      }\n      boolean first=true;\n      for (BooleanClause c : (List<BooleanClause>)q.clauses()) {\n        if (!first) {\n          out.append(' ');\n        } else {\n          first=false;\n        }\n\n        if (c.isProhibited()) {\n          out.append('-');\n        } else if (c.isRequired()) {\n          out.append('+');\n        }\n        Query subQuery = c.getQuery();\n        boolean wrapQuery=false;\n\n        // TODO: may need to put parens around other types\n        // of queries too, depending on future syntax.\n        if (subQuery instanceof BooleanQuery) {\n          wrapQuery=true;\n        }\n\n        if (wrapQuery) {\n          out.append('(');\n        }\n\n        toString(subQuery, schema, out, flags);\n\n        if (wrapQuery) {\n          out.append(')');\n        }\n      }\n\n      if (needParens) {\n        out.append(')');\n      }\n      if (q.getMinimumNumberShouldMatch()>0) {\n        out.append('~');\n        out.append(Integer.toString(q.getMinimumNumberShouldMatch()));\n      }\n\n    } else if (query instanceof PrefixQuery) {\n      PrefixQuery q = (PrefixQuery)query;\n      Term prefix = q.getPrefix();\n      FieldType ft = writeFieldName(prefix.field(), schema, out, flags);\n      out.append(prefix.text());\n      out.append('*');\n    } else if (query instanceof ConstantScorePrefixQuery) {\n      ConstantScorePrefixQuery q = (ConstantScorePrefixQuery)query;\n      Term prefix = q.getPrefix();\n      FieldType ft = writeFieldName(prefix.field(), schema, out, flags);\n      out.append(prefix.text());\n      out.append('*');\n    } else if (query instanceof WildcardQuery) {\n      out.append(query.toString());\n      writeBoost=false;\n    } else if (query instanceof FuzzyQuery) {\n      out.append(query.toString());\n      writeBoost=false;      \n    } else if (query instanceof ConstantScoreQuery) {\n      out.append(query.toString());\n      writeBoost=false;\n    } else {\n      out.append(query.getClass().getSimpleName()\n              + '(' + query.toString() + ')' );\n      writeBoost=false;\n    }\n\n    if (writeBoost && query.getBoost() != 1.0f) {\n      out.append(\"^\");\n      out.append(Float.toString(query.getBoost()));\n    }\n\n  }\n\n","bugFix":null,"bugIntro":["7f84d51c90072fcb78a446a4dad288060aca5f94","7f84d51c90072fcb78a446a4dad288060aca5f94","7f84d51c90072fcb78a446a4dad288060aca5f94"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/QueryParsing#toString(Query,IndexSchema,Appendable,int).mjava","pathOld":"src/java/org/apache/solr/search/QueryParsing#toString(Query,IndexSchema,Appendable,int).mjava","sourceNew":"  /**\n   * @see #toString(Query,IndexSchema)\n   */\n  public static void toString(Query query, IndexSchema schema, Appendable out, int flags) throws IOException {\n    boolean writeBoost = true;\n\n    if (query instanceof TermQuery) {\n      TermQuery q = (TermQuery) query;\n      Term t = q.getTerm();\n      FieldType ft = writeFieldName(t.field(), schema, out, flags);\n      writeFieldVal(t.text(), ft, out, flags);\n    } else if (query instanceof TermRangeQuery) {\n      TermRangeQuery q = (TermRangeQuery) query;\n      String fname = q.getField();\n      FieldType ft = writeFieldName(fname, schema, out, flags);\n      out.append(q.includesLower() ? '[' : '{');\n      String lt = q.getLowerTerm();\n      String ut = q.getUpperTerm();\n      if (lt == null) {\n        out.append('*');\n      } else {\n        writeFieldVal(lt, ft, out, flags);\n      }\n\n      out.append(\" TO \");\n\n      if (ut == null) {\n        out.append('*');\n      } else {\n        writeFieldVal(ut, ft, out, flags);\n      }\n\n      out.append(q.includesUpper() ? ']' : '}');\n    } else if (query instanceof NumericRangeQuery) {\n      NumericRangeQuery q = (NumericRangeQuery) query;\n      String fname = q.getField();\n      FieldType ft = writeFieldName(fname, schema, out, flags);\n      out.append(q.includesMin() ? '[' : '{');\n      Number lt = q.getMin();\n      Number ut = q.getMax();\n      if (lt == null) {\n        out.append('*');\n      } else {\n        out.append(lt.toString());\n      }\n\n      out.append(\" TO \");\n\n      if (ut == null) {\n        out.append('*');\n      } else {\n        out.append(ut.toString());\n      }\n\n      out.append(q.includesMax() ? ']' : '}');\n    } else if (query instanceof BooleanQuery) {\n      BooleanQuery q = (BooleanQuery) query;\n      boolean needParens = false;\n\n      if (q.getBoost() != 1.0 || q.getMinimumNumberShouldMatch() != 0) {\n        needParens = true;\n      }\n      if (needParens) {\n        out.append('(');\n      }\n      boolean first = true;\n      for (BooleanClause c : (List<BooleanClause>) q.clauses()) {\n        if (!first) {\n          out.append(' ');\n        } else {\n          first = false;\n        }\n\n        if (c.isProhibited()) {\n          out.append('-');\n        } else if (c.isRequired()) {\n          out.append('+');\n        }\n        Query subQuery = c.getQuery();\n        boolean wrapQuery = false;\n\n        // TODO: may need to put parens around other types\n        // of queries too, depending on future syntax.\n        if (subQuery instanceof BooleanQuery) {\n          wrapQuery = true;\n        }\n\n        if (wrapQuery) {\n          out.append('(');\n        }\n\n        toString(subQuery, schema, out, flags);\n\n        if (wrapQuery) {\n          out.append(')');\n        }\n      }\n\n      if (needParens) {\n        out.append(')');\n      }\n      if (q.getMinimumNumberShouldMatch() > 0) {\n        out.append('~');\n        out.append(Integer.toString(q.getMinimumNumberShouldMatch()));\n      }\n\n    } else if (query instanceof PrefixQuery) {\n      PrefixQuery q = (PrefixQuery) query;\n      Term prefix = q.getPrefix();\n      FieldType ft = writeFieldName(prefix.field(), schema, out, flags);\n      out.append(prefix.text());\n      out.append('*');\n    } else if (query instanceof ConstantScorePrefixQuery) {\n      ConstantScorePrefixQuery q = (ConstantScorePrefixQuery) query;\n      Term prefix = q.getPrefix();\n      FieldType ft = writeFieldName(prefix.field(), schema, out, flags);\n      out.append(prefix.text());\n      out.append('*');\n    } else if (query instanceof WildcardQuery) {\n      out.append(query.toString());\n      writeBoost = false;\n    } else if (query instanceof FuzzyQuery) {\n      out.append(query.toString());\n      writeBoost = false;\n    } else if (query instanceof ConstantScoreQuery) {\n      out.append(query.toString());\n      writeBoost = false;\n    } else {\n      out.append(query.getClass().getSimpleName()\n              + '(' + query.toString() + ')');\n      writeBoost = false;\n    }\n\n    if (writeBoost && query.getBoost() != 1.0f) {\n      out.append(\"^\");\n      out.append(Float.toString(query.getBoost()));\n    }\n\n  }\n\n","sourceOld":"  /**\n   * @see #toString(Query,IndexSchema)\n   */\n  public static void toString(Query query, IndexSchema schema, Appendable out, int flags) throws IOException {\n    boolean writeBoost = true;\n\n    if (query instanceof TermQuery) {\n      TermQuery q = (TermQuery) query;\n      Term t = q.getTerm();\n      FieldType ft = writeFieldName(t.field(), schema, out, flags);\n      writeFieldVal(t.text(), ft, out, flags);\n    } else if (query instanceof TermRangeQuery) {\n      TermRangeQuery q = (TermRangeQuery) query;\n      String fname = q.getField();\n      FieldType ft = writeFieldName(fname, schema, out, flags);\n      out.append(q.includesLower() ? '[' : '{');\n      String lt = q.getLowerTerm();\n      String ut = q.getUpperTerm();\n      if (lt == null) {\n        out.append('*');\n      } else {\n        writeFieldVal(lt, ft, out, flags);\n      }\n\n      out.append(\" TO \");\n\n      if (ut == null) {\n        out.append('*');\n      } else {\n        writeFieldVal(ut, ft, out, flags);\n      }\n\n      out.append(q.includesUpper() ? ']' : '}');\n    } else if (query instanceof NumericRangeQuery) {\n      NumericRangeQuery q = (NumericRangeQuery) query;\n      String fname = q.getField();\n      FieldType ft = writeFieldName(fname, schema, out, flags);\n      out.append(q.includesMin() ? '[' : '{');\n      Number lt = q.getMin();\n      Number ut = q.getMax();\n      if (lt == null) {\n        out.append('*');\n      } else {\n        out.append(lt.toString());\n      }\n\n      out.append(\" TO \");\n\n      if (ut == null) {\n        out.append('*');\n      } else {\n        out.append(ut.toString());\n      }\n\n      out.append(q.includesMax() ? ']' : '}');\n    } else if (query instanceof BooleanQuery) {\n      BooleanQuery q = (BooleanQuery) query;\n      boolean needParens = false;\n\n      if (q.getBoost() != 1.0 || q.getMinimumNumberShouldMatch() != 0) {\n        needParens = true;\n      }\n      if (needParens) {\n        out.append('(');\n      }\n      boolean first = true;\n      for (BooleanClause c : (List<BooleanClause>) q.clauses()) {\n        if (!first) {\n          out.append(' ');\n        } else {\n          first = false;\n        }\n\n        if (c.isProhibited()) {\n          out.append('-');\n        } else if (c.isRequired()) {\n          out.append('+');\n        }\n        Query subQuery = c.getQuery();\n        boolean wrapQuery = false;\n\n        // TODO: may need to put parens around other types\n        // of queries too, depending on future syntax.\n        if (subQuery instanceof BooleanQuery) {\n          wrapQuery = true;\n        }\n\n        if (wrapQuery) {\n          out.append('(');\n        }\n\n        toString(subQuery, schema, out, flags);\n\n        if (wrapQuery) {\n          out.append(')');\n        }\n      }\n\n      if (needParens) {\n        out.append(')');\n      }\n      if (q.getMinimumNumberShouldMatch() > 0) {\n        out.append('~');\n        out.append(Integer.toString(q.getMinimumNumberShouldMatch()));\n      }\n\n    } else if (query instanceof PrefixQuery) {\n      PrefixQuery q = (PrefixQuery) query;\n      Term prefix = q.getPrefix();\n      FieldType ft = writeFieldName(prefix.field(), schema, out, flags);\n      out.append(prefix.text());\n      out.append('*');\n    } else if (query instanceof ConstantScorePrefixQuery) {\n      ConstantScorePrefixQuery q = (ConstantScorePrefixQuery) query;\n      Term prefix = q.getPrefix();\n      FieldType ft = writeFieldName(prefix.field(), schema, out, flags);\n      out.append(prefix.text());\n      out.append('*');\n    } else if (query instanceof WildcardQuery) {\n      out.append(query.toString());\n      writeBoost = false;\n    } else if (query instanceof FuzzyQuery) {\n      out.append(query.toString());\n      writeBoost = false;\n    } else if (query instanceof ConstantScoreQuery) {\n      out.append(query.toString());\n      writeBoost = false;\n    } else {\n      out.append(query.getClass().getSimpleName()\n              + '(' + query.toString() + ')');\n      writeBoost = false;\n    }\n\n    if (writeBoost && query.getBoost() != 1.0f) {\n      out.append(\"^\");\n      out.append(Float.toString(query.getBoost()));\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"6b87aae76ff9968dd754e0682d8bc2edfea6b706":["d1d56563658ec3c7d66fba1efe9ef346dd8db440"],"32ef722831135736529762b4b97a13dd58b06f66":["64c43363f86d5933eca7bb7f9c256aba8cf6b9af"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"7c7040334a42400ca67824559be90a1f2f2c9e63":["0c3e228bf650e96f3002a8fb73dd0c13d55af077"],"fb3488da508a175c9c5b1a6c9a441e268c140807":["27adc06684d74d32d4d07537a81903ffbf816d27"],"d1d56563658ec3c7d66fba1efe9ef346dd8db440":["7e00023dc6828d09dbfb05d4dfa4d488cc81ee42"],"27adc06684d74d32d4d07537a81903ffbf816d27":["79c686ad76bb74d110ec3c727914fb5693a7da23"],"7e00023dc6828d09dbfb05d4dfa4d488cc81ee42":["dbc0ca7104fa6f1d7cc24b05ed50b39ddb7cfa8c"],"1e77721aaf23393f6ea7926045ae6f8efea0ce8e":["fb3488da508a175c9c5b1a6c9a441e268c140807"],"79c686ad76bb74d110ec3c727914fb5693a7da23":["7c7040334a42400ca67824559be90a1f2f2c9e63"],"0c3e228bf650e96f3002a8fb73dd0c13d55af077":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"dbc0ca7104fa6f1d7cc24b05ed50b39ddb7cfa8c":["1e77721aaf23393f6ea7926045ae6f8efea0ce8e"],"ad94625fb8d088209f46650c8097196fec67f00c":["32ef722831135736529762b4b97a13dd58b06f66"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"64c43363f86d5933eca7bb7f9c256aba8cf6b9af":["6b87aae76ff9968dd754e0682d8bc2edfea6b706"]},"commit2Childs":{"6b87aae76ff9968dd754e0682d8bc2edfea6b706":["64c43363f86d5933eca7bb7f9c256aba8cf6b9af"],"32ef722831135736529762b4b97a13dd58b06f66":["ad94625fb8d088209f46650c8097196fec67f00c"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["0c3e228bf650e96f3002a8fb73dd0c13d55af077"],"7c7040334a42400ca67824559be90a1f2f2c9e63":["79c686ad76bb74d110ec3c727914fb5693a7da23"],"fb3488da508a175c9c5b1a6c9a441e268c140807":["1e77721aaf23393f6ea7926045ae6f8efea0ce8e"],"d1d56563658ec3c7d66fba1efe9ef346dd8db440":["6b87aae76ff9968dd754e0682d8bc2edfea6b706"],"27adc06684d74d32d4d07537a81903ffbf816d27":["fb3488da508a175c9c5b1a6c9a441e268c140807"],"7e00023dc6828d09dbfb05d4dfa4d488cc81ee42":["d1d56563658ec3c7d66fba1efe9ef346dd8db440"],"1e77721aaf23393f6ea7926045ae6f8efea0ce8e":["dbc0ca7104fa6f1d7cc24b05ed50b39ddb7cfa8c"],"79c686ad76bb74d110ec3c727914fb5693a7da23":["27adc06684d74d32d4d07537a81903ffbf816d27"],"0c3e228bf650e96f3002a8fb73dd0c13d55af077":["7c7040334a42400ca67824559be90a1f2f2c9e63"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"dbc0ca7104fa6f1d7cc24b05ed50b39ddb7cfa8c":["7e00023dc6828d09dbfb05d4dfa4d488cc81ee42"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"64c43363f86d5933eca7bb7f9c256aba8cf6b9af":["32ef722831135736529762b4b97a13dd58b06f66"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}