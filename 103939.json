{"path":"lucene/src/java/org/apache/lucene/index/MergePolicy.OneMerge#OneMerge(List[SegmentInfo]).mjava","commits":[{"id":"5270fb4f55a1b77663dda53cb8090c083f0a23b3","date":1305050821,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/MergePolicy.OneMerge#OneMerge(List[SegmentInfo]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/MergePolicy.OneMerge#OneMerge(SegmentInfos).mjava","sourceNew":"    public OneMerge(List<SegmentInfo> segments) {\n      if (0 == segments.size())\n        throw new RuntimeException(\"segments must include at least one segment\");\n      this.segments = segments;\n      int count = 0;\n      for(SegmentInfo info : segments) {\n        count += info.docCount;\n      }\n      totalDocCount = count;\n    }\n\n","sourceOld":"    public OneMerge(SegmentInfos segments) {\n      if (0 == segments.size())\n        throw new RuntimeException(\"segments must include at least one segment\");\n      this.segments = segments;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c700f8d0842d3e52bb2bdfbfdc046a137e836edb","date":1305285499,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/MergePolicy.OneMerge#OneMerge(List[SegmentInfo]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/MergePolicy.OneMerge#OneMerge(SegmentInfos).mjava","sourceNew":"    public OneMerge(List<SegmentInfo> segments) {\n      if (0 == segments.size())\n        throw new RuntimeException(\"segments must include at least one segment\");\n      this.segments = segments;\n      int count = 0;\n      for(SegmentInfo info : segments) {\n        count += info.docCount;\n      }\n      totalDocCount = count;\n    }\n\n","sourceOld":"    public OneMerge(SegmentInfos segments) {\n      if (0 == segments.size())\n        throw new RuntimeException(\"segments must include at least one segment\");\n      this.segments = segments;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"786a4d25ca958a1f315a9d6a74f0441fdafcd522","date":1305734256,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/MergePolicy.OneMerge#OneMerge(List[SegmentInfo]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/MergePolicy.OneMerge#OneMerge(List[SegmentInfo]).mjava","sourceNew":"    public OneMerge(List<SegmentInfo> segments) {\n      if (0 == segments.size())\n        throw new RuntimeException(\"segments must include at least one segment\");\n      // clone the list, as the in list may be based off original SegmentInfos and may be modified\n      this.segments = new ArrayList<SegmentInfo>(segments);\n      int count = 0;\n      for(SegmentInfo info : segments) {\n        count += info.docCount;\n      }\n      totalDocCount = count;\n    }\n\n","sourceOld":"    public OneMerge(List<SegmentInfo> segments) {\n      if (0 == segments.size())\n        throw new RuntimeException(\"segments must include at least one segment\");\n      this.segments = segments;\n      int count = 0;\n      for(SegmentInfo info : segments) {\n        count += info.docCount;\n      }\n      totalDocCount = count;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c3a8a449466c1ff7ce2274fe73dab487256964b4","date":1305735867,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/MergePolicy.OneMerge#OneMerge(List[SegmentInfo]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/MergePolicy.OneMerge#OneMerge(List[SegmentInfo]).mjava","sourceNew":"    public OneMerge(List<SegmentInfo> segments) {\n      if (0 == segments.size())\n        throw new RuntimeException(\"segments must include at least one segment\");\n      // clone the list, as the in list may be based off original SegmentInfos and may be modified\n      this.segments = new ArrayList<SegmentInfo>(segments);\n      int count = 0;\n      for(SegmentInfo info : segments) {\n        count += info.docCount;\n      }\n      totalDocCount = count;\n    }\n\n","sourceOld":"    public OneMerge(List<SegmentInfo> segments) {\n      if (0 == segments.size())\n        throw new RuntimeException(\"segments must include at least one segment\");\n      this.segments = segments;\n      int count = 0;\n      for(SegmentInfo info : segments) {\n        count += info.docCount;\n      }\n      totalDocCount = count;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/MergePolicy.OneMerge#OneMerge(List[SegmentInfo]).mjava","pathOld":"/dev/null","sourceNew":"    public OneMerge(List<SegmentInfo> segments) {\n      if (0 == segments.size())\n        throw new RuntimeException(\"segments must include at least one segment\");\n      // clone the list, as the in list may be based off original SegmentInfos and may be modified\n      this.segments = new ArrayList<SegmentInfo>(segments);\n      int count = 0;\n      for(SegmentInfo info : segments) {\n        count += info.docCount;\n      }\n      totalDocCount = count;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MergePolicy.OneMerge#OneMerge(List[SegmentInfo]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/MergePolicy.OneMerge#OneMerge(List[SegmentInfo]).mjava","sourceNew":"    public OneMerge(List<SegmentInfo> segments) {\n      if (0 == segments.size())\n        throw new RuntimeException(\"segments must include at least one segment\");\n      // clone the list, as the in list may be based off original SegmentInfos and may be modified\n      this.segments = new ArrayList<SegmentInfo>(segments);\n      int count = 0;\n      for(SegmentInfo info : segments) {\n        count += info.docCount;\n      }\n      totalDocCount = count;\n    }\n\n","sourceOld":"    public OneMerge(List<SegmentInfo> segments) {\n      if (0 == segments.size())\n        throw new RuntimeException(\"segments must include at least one segment\");\n      // clone the list, as the in list may be based off original SegmentInfos and may be modified\n      this.segments = new ArrayList<SegmentInfo>(segments);\n      int count = 0;\n      for(SegmentInfo info : segments) {\n        count += info.docCount;\n      }\n      totalDocCount = count;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"786a4d25ca958a1f315a9d6a74f0441fdafcd522":["5270fb4f55a1b77663dda53cb8090c083f0a23b3"],"c3a8a449466c1ff7ce2274fe73dab487256964b4":["c700f8d0842d3e52bb2bdfbfdc046a137e836edb","786a4d25ca958a1f315a9d6a74f0441fdafcd522"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["786a4d25ca958a1f315a9d6a74f0441fdafcd522"],"a3776dccca01c11e7046323cfad46a3b4a471233":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","786a4d25ca958a1f315a9d6a74f0441fdafcd522"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5270fb4f55a1b77663dda53cb8090c083f0a23b3"],"5270fb4f55a1b77663dda53cb8090c083f0a23b3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"786a4d25ca958a1f315a9d6a74f0441fdafcd522":["c3a8a449466c1ff7ce2274fe73dab487256964b4","3a119bbc8703c10faa329ec201c654b3a35a1e3e","a3776dccca01c11e7046323cfad46a3b4a471233"],"c3a8a449466c1ff7ce2274fe73dab487256964b4":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a3776dccca01c11e7046323cfad46a3b4a471233","c700f8d0842d3e52bb2bdfbfdc046a137e836edb","5270fb4f55a1b77663dda53cb8090c083f0a23b3"],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":["c3a8a449466c1ff7ce2274fe73dab487256964b4"],"5270fb4f55a1b77663dda53cb8090c083f0a23b3":["786a4d25ca958a1f315a9d6a74f0441fdafcd522","c700f8d0842d3e52bb2bdfbfdc046a137e836edb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c3a8a449466c1ff7ce2274fe73dab487256964b4","a3776dccca01c11e7046323cfad46a3b4a471233","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}