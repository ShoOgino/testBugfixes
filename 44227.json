{"path":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/LineDocMaker#openFile().mjava","commits":[{"id":"3c528d38c8d9b2452e932321931b11e7c19a96d5","date":1185353698,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/LineDocMaker#openFile().mjava","pathOld":"/dev/null","sourceNew":"  private void openFile() {\n    try {\n      if (fileIn != null)\n        fileIn.close();\n      fileIn = new BufferedReader(new FileReader(fileName), READER_BUFFER_BYTES);\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dbeed263e6233e327186a2d90fd6848347f2883a","date":1186649846,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/LineDocMaker#openFile().mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/LineDocMaker#openFile().mjava","sourceNew":"  void openFile() {\n    try {\n      if (fileIn != null)\n        fileIn.close();\n      fileIS = new FileInputStream(fileName);\n      fileIn = new BufferedReader(new InputStreamReader(fileIS,\"UTF-8\"), READER_BUFFER_BYTES);\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  private void openFile() {\n    try {\n      if (fileIn != null)\n        fileIn.close();\n      fileIn = new BufferedReader(new FileReader(fileName), READER_BUFFER_BYTES);\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ee93bdd695e4b87f4f05de6a7fa42ec9a5923a63","date":1199497913,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/LineDocMaker#openFile().mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/LineDocMaker#openFile().mjava","sourceNew":"  synchronized void openFile() {\n    try {\n      if (fileIn != null)\n        fileIn.close();\n      fileIS = new FileInputStream(fileName);\n      fileIn = new BufferedReader(new InputStreamReader(fileIS,\"UTF-8\"), READER_BUFFER_BYTES);\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  void openFile() {\n    try {\n      if (fileIn != null)\n        fileIn.close();\n      fileIS = new FileInputStream(fileName);\n      fileIn = new BufferedReader(new InputStreamReader(fileIS,\"UTF-8\"), READER_BUFFER_BYTES);\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4bea909b475e3f9d726f4fee3c27d3c870b9027","date":1239875190,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/LineDocMaker#openFile().mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/LineDocMaker#openFile().mjava","sourceNew":"  synchronized void openFile() {\n    try {\n      if (fileIn != null) {\n        fileIn.close();\n      }\n      fileIS = new FileInputStream(fileName);\n      if (bzipCompressionEnabled) {\n        // According to BZip2CompressorInputStream's code, it reads the first \n        // two file header chars ('B' and 'Z'). We only need to wrap the\n        // underlying stream with a BufferedInputStream, since the code uses\n        // the read() method exclusively.\n        fileIS = new BufferedInputStream(fileIS, READER_BUFFER_BYTES);\n        fileIS = csFactory.createCompressorInputStream(\"bzip2\", fileIS);\n      }\n      // Wrap the stream with a BufferedReader for several reasons:\n      // 1. We need the readLine() method.\n      // 2. Even if bzip.compression is enabled, and is wrapped with\n      // BufferedInputStream, wrapping with a buffer can still improve\n      // performance, since the BIS buffer will be used to read from the\n      // compressed stream, while the BR buffer will be used to read from the\n      // uncompressed stream.\n      fileIn = new BufferedReader(new InputStreamReader(fileIS, \"UTF-8\"), READER_BUFFER_BYTES);\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    } catch (CompressorException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  synchronized void openFile() {\n    try {\n      if (fileIn != null)\n        fileIn.close();\n      fileIS = new FileInputStream(fileName);\n      fileIn = new BufferedReader(new InputStreamReader(fileIS,\"UTF-8\"), READER_BUFFER_BYTES);\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6944b9fa6d8ef96b83ae2d3a4332d03b3857355b","date":1245355139,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/LineDocMaker#openFile().mjava","sourceNew":null,"sourceOld":"  synchronized void openFile() {\n    try {\n      if (fileIn != null) {\n        fileIn.close();\n      }\n      fileIS = new FileInputStream(fileName);\n      if (bzipCompressionEnabled) {\n        // According to BZip2CompressorInputStream's code, it reads the first \n        // two file header chars ('B' and 'Z'). We only need to wrap the\n        // underlying stream with a BufferedInputStream, since the code uses\n        // the read() method exclusively.\n        fileIS = new BufferedInputStream(fileIS, READER_BUFFER_BYTES);\n        fileIS = csFactory.createCompressorInputStream(\"bzip2\", fileIS);\n      }\n      // Wrap the stream with a BufferedReader for several reasons:\n      // 1. We need the readLine() method.\n      // 2. Even if bzip.compression is enabled, and is wrapped with\n      // BufferedInputStream, wrapping with a buffer can still improve\n      // performance, since the BIS buffer will be used to read from the\n      // compressed stream, while the BR buffer will be used to read from the\n      // uncompressed stream.\n      fileIn = new BufferedReader(new InputStreamReader(fileIS, \"UTF-8\"), READER_BUFFER_BYTES);\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    } catch (CompressorException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3c528d38c8d9b2452e932321931b11e7c19a96d5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6944b9fa6d8ef96b83ae2d3a4332d03b3857355b":["c4bea909b475e3f9d726f4fee3c27d3c870b9027"],"ee93bdd695e4b87f4f05de6a7fa42ec9a5923a63":["dbeed263e6233e327186a2d90fd6848347f2883a"],"dbeed263e6233e327186a2d90fd6848347f2883a":["3c528d38c8d9b2452e932321931b11e7c19a96d5"],"c4bea909b475e3f9d726f4fee3c27d3c870b9027":["ee93bdd695e4b87f4f05de6a7fa42ec9a5923a63"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6944b9fa6d8ef96b83ae2d3a4332d03b3857355b"]},"commit2Childs":{"3c528d38c8d9b2452e932321931b11e7c19a96d5":["dbeed263e6233e327186a2d90fd6848347f2883a"],"6944b9fa6d8ef96b83ae2d3a4332d03b3857355b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ee93bdd695e4b87f4f05de6a7fa42ec9a5923a63":["c4bea909b475e3f9d726f4fee3c27d3c870b9027"],"dbeed263e6233e327186a2d90fd6848347f2883a":["ee93bdd695e4b87f4f05de6a7fa42ec9a5923a63"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3c528d38c8d9b2452e932321931b11e7c19a96d5"],"c4bea909b475e3f9d726f4fee3c27d3c870b9027":["6944b9fa6d8ef96b83ae2d3a4332d03b3857355b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}