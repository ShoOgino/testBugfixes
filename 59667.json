{"path":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader#BKDReader(IndexInput,int,int,int,long[],byte[],byte[],byte[],long,int).mjava","commits":[{"id":"251c5b33f0a2c8988550b63c78ed22b0e84524e5","date":1456961997,"type":1,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader#BKDReader(IndexInput,int,int,int,long[],byte[],byte[],byte[],long,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader#BKDReader(IndexInput,int,int,int,long[],byte[],byte[],byte[],long).mjava","sourceNew":"  /** Called by consumers that have their own on-disk format for the index (e.g. SimpleText) */\n  protected BKDReader(IndexInput in, int numDims, int maxPointsInLeafNode, int bytesPerDim, long[] leafBlockFPs, byte[] splitPackedValues,\n                      byte[] minPackedValue, byte[] maxPackedValue, long pointCount, int docCount) throws IOException {\n    this.in = in;\n    this.numDims = numDims;\n    this.maxPointsInLeafNode = maxPointsInLeafNode;\n    this.bytesPerDim = bytesPerDim;\n    packedBytesLength = numDims * bytesPerDim;\n    this.leafNodeOffset = leafBlockFPs.length;\n    this.leafBlockFPs = leafBlockFPs;\n    this.splitPackedValues = splitPackedValues;\n    this.minPackedValue = minPackedValue;\n    this.maxPackedValue = maxPackedValue;\n    this.pointCount = pointCount;\n    this.docCount = docCount;\n    assert minPackedValue.length == packedBytesLength;\n    assert maxPackedValue.length == packedBytesLength;\n  }\n\n","sourceOld":"  /** Called by consumers that have their own on-disk format for the index (e.g. SimpleText) */\n  protected BKDReader(IndexInput in, int numDims, int maxPointsInLeafNode, int bytesPerDim, long[] leafBlockFPs, byte[] splitPackedValues,\n                      byte[] minPackedValue, byte[] maxPackedValue, long pointCount) throws IOException {\n    this.in = in;\n    this.numDims = numDims;\n    this.maxPointsInLeafNode = maxPointsInLeafNode;\n    this.bytesPerDim = bytesPerDim;\n    packedBytesLength = numDims * bytesPerDim;\n    this.leafNodeOffset = leafBlockFPs.length;\n    this.leafBlockFPs = leafBlockFPs;\n    this.splitPackedValues = splitPackedValues;\n    this.minPackedValue = minPackedValue;\n    this.maxPackedValue = maxPackedValue;\n    this.pointCount = pointCount;\n    assert minPackedValue.length == packedBytesLength;\n    assert maxPackedValue.length == packedBytesLength;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf1a614098b46c9c22afebd7b898ae4d1d2fc273","date":1457088850,"type":1,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader#BKDReader(IndexInput,int,int,int,long[],byte[],byte[],byte[],long,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader#BKDReader(IndexInput,int,int,int,long[],byte[],byte[],byte[]).mjava","sourceNew":"  /** Called by consumers that have their own on-disk format for the index (e.g. SimpleText) */\n  protected BKDReader(IndexInput in, int numDims, int maxPointsInLeafNode, int bytesPerDim, long[] leafBlockFPs, byte[] splitPackedValues,\n                      byte[] minPackedValue, byte[] maxPackedValue, long pointCount, int docCount) throws IOException {\n    this.in = in;\n    this.numDims = numDims;\n    this.maxPointsInLeafNode = maxPointsInLeafNode;\n    this.bytesPerDim = bytesPerDim;\n    packedBytesLength = numDims * bytesPerDim;\n    this.leafNodeOffset = leafBlockFPs.length;\n    this.leafBlockFPs = leafBlockFPs;\n    this.splitPackedValues = splitPackedValues;\n    this.minPackedValue = minPackedValue;\n    this.maxPackedValue = maxPackedValue;\n    this.pointCount = pointCount;\n    this.docCount = docCount;\n    assert minPackedValue.length == packedBytesLength;\n    assert maxPackedValue.length == packedBytesLength;\n  }\n\n","sourceOld":"  /** Called by consumers that have their own on-disk format for the index (e.g. SimpleText) */\n  protected BKDReader(IndexInput in, int numDims, int maxPointsInLeafNode, int bytesPerDim, long[] leafBlockFPs, byte[] splitPackedValues,\n                      byte[] minPackedValue, byte[] maxPackedValue) throws IOException {\n    this.in = in;\n    this.numDims = numDims;\n    this.maxPointsInLeafNode = maxPointsInLeafNode;\n    this.bytesPerDim = bytesPerDim;\n    packedBytesLength = numDims * bytesPerDim;\n    this.leafNodeOffset = leafBlockFPs.length;\n    this.leafBlockFPs = leafBlockFPs;\n    this.splitPackedValues = splitPackedValues;\n    this.minPackedValue = minPackedValue;\n    this.maxPackedValue = maxPackedValue;\n    assert minPackedValue.length == packedBytesLength;\n    assert maxPackedValue.length == packedBytesLength;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"adc24e961ba2d17d4cc061a9fde65e9059b7f1ee","date":1467616421,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader#BKDReader(IndexInput,int,int,int,long[],byte[],byte[],byte[],long,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader#BKDReader(IndexInput,int,int,int,long[],byte[],byte[],byte[],long,int).mjava","sourceNew":"  /** Called by consumers that have their own on-disk format for the index (e.g. SimpleText) */\n  protected BKDReader(IndexInput in, int numDims, int maxPointsInLeafNode, int bytesPerDim, long[] leafBlockFPs, byte[] splitPackedValues,\n                      byte[] minPackedValue, byte[] maxPackedValue, long pointCount, int docCount) throws IOException {\n    this.in = in;\n    this.numDims = numDims;\n    this.maxPointsInLeafNode = maxPointsInLeafNode;\n    this.bytesPerDim = bytesPerDim;\n    packedBytesLength = numDims * bytesPerDim;\n    this.leafNodeOffset = leafBlockFPs.length;\n    this.leafBlockFPs = leafBlockFPs;\n    this.splitPackedValues = splitPackedValues;\n    this.minPackedValue = minPackedValue;\n    this.maxPackedValue = maxPackedValue;\n    this.pointCount = pointCount;\n    this.docCount = docCount;\n    this.version = BKDWriter.VERSION_CURRENT;\n    assert minPackedValue.length == packedBytesLength;\n    assert maxPackedValue.length == packedBytesLength;\n  }\n\n","sourceOld":"  /** Called by consumers that have their own on-disk format for the index (e.g. SimpleText) */\n  protected BKDReader(IndexInput in, int numDims, int maxPointsInLeafNode, int bytesPerDim, long[] leafBlockFPs, byte[] splitPackedValues,\n                      byte[] minPackedValue, byte[] maxPackedValue, long pointCount, int docCount) throws IOException {\n    this.in = in;\n    this.numDims = numDims;\n    this.maxPointsInLeafNode = maxPointsInLeafNode;\n    this.bytesPerDim = bytesPerDim;\n    packedBytesLength = numDims * bytesPerDim;\n    this.leafNodeOffset = leafBlockFPs.length;\n    this.leafBlockFPs = leafBlockFPs;\n    this.splitPackedValues = splitPackedValues;\n    this.minPackedValue = minPackedValue;\n    this.maxPackedValue = maxPackedValue;\n    this.pointCount = pointCount;\n    this.docCount = docCount;\n    assert minPackedValue.length == packedBytesLength;\n    assert maxPackedValue.length == packedBytesLength;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dd630fded84c5695bd4e07bda0a20634517a4224","date":1476795950,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader#BKDReader(IndexInput,int,int,int,long[],byte[],byte[],byte[],long,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader#BKDReader(IndexInput,int,int,int,long[],byte[],byte[],byte[],long,int).mjava","sourceNew":"  /** Called by consumers that have their own on-disk format for the index (e.g. SimpleText) */\n  protected BKDReader(IndexInput in, int numDims, int maxPointsInLeafNode, int bytesPerDim, long[] leafBlockFPs, byte[] splitPackedValues,\n                      byte[] minPackedValue, byte[] maxPackedValue, long pointCount, int docCount) throws IOException {\n    this.in = in;\n    this.numDims = numDims;\n    this.maxPointsInLeafNode = maxPointsInLeafNode;\n    this.bytesPerDim = bytesPerDim;\n    bytesPerIndexEntry = numDims == 1 ? bytesPerDim : bytesPerDim + 1;\n    packedBytesLength = numDims * bytesPerDim;\n    this.leafNodeOffset = leafBlockFPs.length;\n    this.leafBlockFPs = leafBlockFPs;\n    this.splitPackedValues = splitPackedValues;\n    this.minPackedValue = minPackedValue;\n    this.maxPackedValue = maxPackedValue;\n    this.pointCount = pointCount;\n    this.docCount = docCount;\n    this.version = BKDWriter.VERSION_CURRENT;\n    assert minPackedValue.length == packedBytesLength;\n    assert maxPackedValue.length == packedBytesLength;\n  }\n\n","sourceOld":"  /** Called by consumers that have their own on-disk format for the index (e.g. SimpleText) */\n  protected BKDReader(IndexInput in, int numDims, int maxPointsInLeafNode, int bytesPerDim, long[] leafBlockFPs, byte[] splitPackedValues,\n                      byte[] minPackedValue, byte[] maxPackedValue, long pointCount, int docCount) throws IOException {\n    this.in = in;\n    this.numDims = numDims;\n    this.maxPointsInLeafNode = maxPointsInLeafNode;\n    this.bytesPerDim = bytesPerDim;\n    packedBytesLength = numDims * bytesPerDim;\n    this.leafNodeOffset = leafBlockFPs.length;\n    this.leafBlockFPs = leafBlockFPs;\n    this.splitPackedValues = splitPackedValues;\n    this.minPackedValue = minPackedValue;\n    this.maxPackedValue = maxPackedValue;\n    this.pointCount = pointCount;\n    this.docCount = docCount;\n    this.version = BKDWriter.VERSION_CURRENT;\n    assert minPackedValue.length == packedBytesLength;\n    assert maxPackedValue.length == packedBytesLength;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f177ec0246f5d1788b56d8f5d5c66cb38d66bcef","date":1476800106,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader#BKDReader(IndexInput,int,int,int,long[],byte[],byte[],byte[],long,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader#BKDReader(IndexInput,int,int,int,long[],byte[],byte[],byte[],long,int).mjava","sourceNew":"  /** Called by consumers that have their own on-disk format for the index (e.g. SimpleText) */\n  protected BKDReader(IndexInput in, int numDims, int maxPointsInLeafNode, int bytesPerDim, long[] leafBlockFPs, byte[] splitPackedValues,\n                      byte[] minPackedValue, byte[] maxPackedValue, long pointCount, int docCount) throws IOException {\n    this.in = in;\n    this.numDims = numDims;\n    this.maxPointsInLeafNode = maxPointsInLeafNode;\n    this.bytesPerDim = bytesPerDim;\n    bytesPerIndexEntry = numDims == 1 ? bytesPerDim : bytesPerDim + 1;\n    packedBytesLength = numDims * bytesPerDim;\n    this.leafNodeOffset = leafBlockFPs.length;\n    this.leafBlockFPs = leafBlockFPs;\n    this.splitPackedValues = splitPackedValues;\n    this.minPackedValue = minPackedValue;\n    this.maxPackedValue = maxPackedValue;\n    this.pointCount = pointCount;\n    this.docCount = docCount;\n    this.version = BKDWriter.VERSION_CURRENT;\n    assert minPackedValue.length == packedBytesLength;\n    assert maxPackedValue.length == packedBytesLength;\n  }\n\n","sourceOld":"  /** Called by consumers that have their own on-disk format for the index (e.g. SimpleText) */\n  protected BKDReader(IndexInput in, int numDims, int maxPointsInLeafNode, int bytesPerDim, long[] leafBlockFPs, byte[] splitPackedValues,\n                      byte[] minPackedValue, byte[] maxPackedValue, long pointCount, int docCount) throws IOException {\n    this.in = in;\n    this.numDims = numDims;\n    this.maxPointsInLeafNode = maxPointsInLeafNode;\n    this.bytesPerDim = bytesPerDim;\n    packedBytesLength = numDims * bytesPerDim;\n    this.leafNodeOffset = leafBlockFPs.length;\n    this.leafBlockFPs = leafBlockFPs;\n    this.splitPackedValues = splitPackedValues;\n    this.minPackedValue = minPackedValue;\n    this.maxPackedValue = maxPackedValue;\n    this.pointCount = pointCount;\n    this.docCount = docCount;\n    this.version = BKDWriter.VERSION_CURRENT;\n    assert minPackedValue.length == packedBytesLength;\n    assert maxPackedValue.length == packedBytesLength;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader#BKDReader(IndexInput,int,int,int,long[],byte[],byte[],byte[],long,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader#BKDReader(IndexInput,int,int,int,long[],byte[],byte[],byte[],long,int).mjava","sourceNew":"  /** Called by consumers that have their own on-disk format for the index (e.g. SimpleText) */\n  protected BKDReader(IndexInput in, int numDims, int maxPointsInLeafNode, int bytesPerDim, long[] leafBlockFPs, byte[] splitPackedValues,\n                      byte[] minPackedValue, byte[] maxPackedValue, long pointCount, int docCount) throws IOException {\n    this.in = in;\n    this.numDims = numDims;\n    this.maxPointsInLeafNode = maxPointsInLeafNode;\n    this.bytesPerDim = bytesPerDim;\n    bytesPerIndexEntry = numDims == 1 ? bytesPerDim : bytesPerDim + 1;\n    packedBytesLength = numDims * bytesPerDim;\n    this.leafNodeOffset = leafBlockFPs.length;\n    this.leafBlockFPs = leafBlockFPs;\n    this.splitPackedValues = splitPackedValues;\n    this.minPackedValue = minPackedValue;\n    this.maxPackedValue = maxPackedValue;\n    this.pointCount = pointCount;\n    this.docCount = docCount;\n    this.version = BKDWriter.VERSION_CURRENT;\n    assert minPackedValue.length == packedBytesLength;\n    assert maxPackedValue.length == packedBytesLength;\n  }\n\n","sourceOld":"  /** Called by consumers that have their own on-disk format for the index (e.g. SimpleText) */\n  protected BKDReader(IndexInput in, int numDims, int maxPointsInLeafNode, int bytesPerDim, long[] leafBlockFPs, byte[] splitPackedValues,\n                      byte[] minPackedValue, byte[] maxPackedValue, long pointCount, int docCount) throws IOException {\n    this.in = in;\n    this.numDims = numDims;\n    this.maxPointsInLeafNode = maxPointsInLeafNode;\n    this.bytesPerDim = bytesPerDim;\n    packedBytesLength = numDims * bytesPerDim;\n    this.leafNodeOffset = leafBlockFPs.length;\n    this.leafBlockFPs = leafBlockFPs;\n    this.splitPackedValues = splitPackedValues;\n    this.minPackedValue = minPackedValue;\n    this.maxPackedValue = maxPackedValue;\n    this.pointCount = pointCount;\n    this.docCount = docCount;\n    assert minPackedValue.length == packedBytesLength;\n    assert maxPackedValue.length == packedBytesLength;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"313b9c84057c3a31294cbcd794ea84c4e81646d9","date":1478080099,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader#BKDReader(IndexInput,int,int,int,long[],byte[],byte[],byte[],long,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader#BKDReader(IndexInput,int,int,int,long[],byte[],byte[],byte[],long,int).mjava","sourceNew":"  /** Called by consumers that have their own on-disk format for the index (e.g. SimpleText) */\n  protected BKDReader(IndexInput in, int numDims, int maxPointsInLeafNode, int bytesPerDim, long[] leafBlockFPs, byte[] splitPackedValues,\n                      byte[] minPackedValue, byte[] maxPackedValue, long pointCount, int docCount) throws IOException {\n    this.in = in;\n    this.numDims = numDims;\n    this.maxPointsInLeafNode = maxPointsInLeafNode;\n    this.bytesPerDim = bytesPerDim;\n    // no version check here because callers of this API (SimpleText) have no back compat:\n    bytesPerIndexEntry = numDims == 1 ? bytesPerDim : bytesPerDim + 1;\n    packedBytesLength = numDims * bytesPerDim;\n    this.leafNodeOffset = leafBlockFPs.length;\n    this.leafBlockFPs = leafBlockFPs;\n    this.splitPackedValues = splitPackedValues;\n    this.minPackedValue = minPackedValue;\n    this.maxPackedValue = maxPackedValue;\n    this.pointCount = pointCount;\n    this.docCount = docCount;\n    this.version = BKDWriter.VERSION_CURRENT;\n    assert minPackedValue.length == packedBytesLength;\n    assert maxPackedValue.length == packedBytesLength;\n  }\n\n","sourceOld":"  /** Called by consumers that have their own on-disk format for the index (e.g. SimpleText) */\n  protected BKDReader(IndexInput in, int numDims, int maxPointsInLeafNode, int bytesPerDim, long[] leafBlockFPs, byte[] splitPackedValues,\n                      byte[] minPackedValue, byte[] maxPackedValue, long pointCount, int docCount) throws IOException {\n    this.in = in;\n    this.numDims = numDims;\n    this.maxPointsInLeafNode = maxPointsInLeafNode;\n    this.bytesPerDim = bytesPerDim;\n    bytesPerIndexEntry = numDims == 1 ? bytesPerDim : bytesPerDim + 1;\n    packedBytesLength = numDims * bytesPerDim;\n    this.leafNodeOffset = leafBlockFPs.length;\n    this.leafBlockFPs = leafBlockFPs;\n    this.splitPackedValues = splitPackedValues;\n    this.minPackedValue = minPackedValue;\n    this.maxPackedValue = maxPackedValue;\n    this.pointCount = pointCount;\n    this.docCount = docCount;\n    this.version = BKDWriter.VERSION_CURRENT;\n    assert minPackedValue.length == packedBytesLength;\n    assert maxPackedValue.length == packedBytesLength;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9720b151fde2073f4e401450f4574e5f31c2d0ff","date":1478184029,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader#BKDReader(IndexInput,int,int,int,long[],byte[],byte[],byte[],long,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader#BKDReader(IndexInput,int,int,int,long[],byte[],byte[],byte[],long,int).mjava","sourceNew":"  /** Called by consumers that have their own on-disk format for the index (e.g. SimpleText) */\n  protected BKDReader(IndexInput in, int numDims, int maxPointsInLeafNode, int bytesPerDim, long[] leafBlockFPs, byte[] splitPackedValues,\n                      byte[] minPackedValue, byte[] maxPackedValue, long pointCount, int docCount) throws IOException {\n    this.in = in;\n    this.numDims = numDims;\n    this.maxPointsInLeafNode = maxPointsInLeafNode;\n    this.bytesPerDim = bytesPerDim;\n    // no version check here because callers of this API (SimpleText) have no back compat:\n    bytesPerIndexEntry = numDims == 1 ? bytesPerDim : bytesPerDim + 1;\n    packedBytesLength = numDims * bytesPerDim;\n    this.leafNodeOffset = leafBlockFPs.length;\n    this.leafBlockFPs = leafBlockFPs;\n    this.splitPackedValues = splitPackedValues;\n    this.minPackedValue = minPackedValue;\n    this.maxPackedValue = maxPackedValue;\n    this.pointCount = pointCount;\n    this.docCount = docCount;\n    this.version = BKDWriter.VERSION_CURRENT;\n    assert minPackedValue.length == packedBytesLength;\n    assert maxPackedValue.length == packedBytesLength;\n  }\n\n","sourceOld":"  /** Called by consumers that have their own on-disk format for the index (e.g. SimpleText) */\n  protected BKDReader(IndexInput in, int numDims, int maxPointsInLeafNode, int bytesPerDim, long[] leafBlockFPs, byte[] splitPackedValues,\n                      byte[] minPackedValue, byte[] maxPackedValue, long pointCount, int docCount) throws IOException {\n    this.in = in;\n    this.numDims = numDims;\n    this.maxPointsInLeafNode = maxPointsInLeafNode;\n    this.bytesPerDim = bytesPerDim;\n    bytesPerIndexEntry = numDims == 1 ? bytesPerDim : bytesPerDim + 1;\n    packedBytesLength = numDims * bytesPerDim;\n    this.leafNodeOffset = leafBlockFPs.length;\n    this.leafBlockFPs = leafBlockFPs;\n    this.splitPackedValues = splitPackedValues;\n    this.minPackedValue = minPackedValue;\n    this.maxPackedValue = maxPackedValue;\n    this.pointCount = pointCount;\n    this.docCount = docCount;\n    this.version = BKDWriter.VERSION_CURRENT;\n    assert minPackedValue.length == packedBytesLength;\n    assert maxPackedValue.length == packedBytesLength;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fc0d60683b47b5d922124c31f57c8b34734f9e6","date":1480846684,"type":4,"author":"Mike McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader#BKDReader(IndexInput,int,int,int,long[],byte[],byte[],byte[],long,int).mjava","sourceNew":null,"sourceOld":"  /** Called by consumers that have their own on-disk format for the index (e.g. SimpleText) */\n  protected BKDReader(IndexInput in, int numDims, int maxPointsInLeafNode, int bytesPerDim, long[] leafBlockFPs, byte[] splitPackedValues,\n                      byte[] minPackedValue, byte[] maxPackedValue, long pointCount, int docCount) throws IOException {\n    this.in = in;\n    this.numDims = numDims;\n    this.maxPointsInLeafNode = maxPointsInLeafNode;\n    this.bytesPerDim = bytesPerDim;\n    // no version check here because callers of this API (SimpleText) have no back compat:\n    bytesPerIndexEntry = numDims == 1 ? bytesPerDim : bytesPerDim + 1;\n    packedBytesLength = numDims * bytesPerDim;\n    this.leafNodeOffset = leafBlockFPs.length;\n    this.leafBlockFPs = leafBlockFPs;\n    this.splitPackedValues = splitPackedValues;\n    this.minPackedValue = minPackedValue;\n    this.maxPackedValue = maxPackedValue;\n    this.pointCount = pointCount;\n    this.docCount = docCount;\n    this.version = BKDWriter.VERSION_CURRENT;\n    assert minPackedValue.length == packedBytesLength;\n    assert maxPackedValue.length == packedBytesLength;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9856095f7afb5a607bf5e65077615ed91273508c","date":1481837697,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader#BKDReader(IndexInput,int,int,int,long[],byte[],byte[],byte[],long,int).mjava","sourceNew":null,"sourceOld":"  /** Called by consumers that have their own on-disk format for the index (e.g. SimpleText) */\n  protected BKDReader(IndexInput in, int numDims, int maxPointsInLeafNode, int bytesPerDim, long[] leafBlockFPs, byte[] splitPackedValues,\n                      byte[] minPackedValue, byte[] maxPackedValue, long pointCount, int docCount) throws IOException {\n    this.in = in;\n    this.numDims = numDims;\n    this.maxPointsInLeafNode = maxPointsInLeafNode;\n    this.bytesPerDim = bytesPerDim;\n    // no version check here because callers of this API (SimpleText) have no back compat:\n    bytesPerIndexEntry = numDims == 1 ? bytesPerDim : bytesPerDim + 1;\n    packedBytesLength = numDims * bytesPerDim;\n    this.leafNodeOffset = leafBlockFPs.length;\n    this.leafBlockFPs = leafBlockFPs;\n    this.splitPackedValues = splitPackedValues;\n    this.minPackedValue = minPackedValue;\n    this.maxPackedValue = maxPackedValue;\n    this.pointCount = pointCount;\n    this.docCount = docCount;\n    this.version = BKDWriter.VERSION_CURRENT;\n    assert minPackedValue.length == packedBytesLength;\n    assert maxPackedValue.length == packedBytesLength;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9fc0d60683b47b5d922124c31f57c8b34734f9e6":["313b9c84057c3a31294cbcd794ea84c4e81646d9"],"adc24e961ba2d17d4cc061a9fde65e9059b7f1ee":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"251c5b33f0a2c8988550b63c78ed22b0e84524e5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9720b151fde2073f4e401450f4574e5f31c2d0ff":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","313b9c84057c3a31294cbcd794ea84c4e81646d9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"dd630fded84c5695bd4e07bda0a20634517a4224":["adc24e961ba2d17d4cc061a9fde65e9059b7f1ee"],"9856095f7afb5a607bf5e65077615ed91273508c":["9720b151fde2073f4e401450f4574e5f31c2d0ff","9fc0d60683b47b5d922124c31f57c8b34734f9e6"],"313b9c84057c3a31294cbcd794ea84c4e81646d9":["f177ec0246f5d1788b56d8f5d5c66cb38d66bcef"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","251c5b33f0a2c8988550b63c78ed22b0e84524e5"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273","f177ec0246f5d1788b56d8f5d5c66cb38d66bcef"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9fc0d60683b47b5d922124c31f57c8b34734f9e6"],"f177ec0246f5d1788b56d8f5d5c66cb38d66bcef":["adc24e961ba2d17d4cc061a9fde65e9059b7f1ee","dd630fded84c5695bd4e07bda0a20634517a4224"]},"commit2Childs":{"9fc0d60683b47b5d922124c31f57c8b34734f9e6":["9856095f7afb5a607bf5e65077615ed91273508c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"adc24e961ba2d17d4cc061a9fde65e9059b7f1ee":["dd630fded84c5695bd4e07bda0a20634517a4224","f177ec0246f5d1788b56d8f5d5c66cb38d66bcef"],"251c5b33f0a2c8988550b63c78ed22b0e84524e5":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"9720b151fde2073f4e401450f4574e5f31c2d0ff":["9856095f7afb5a607bf5e65077615ed91273508c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["251c5b33f0a2c8988550b63c78ed22b0e84524e5","cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"dd630fded84c5695bd4e07bda0a20634517a4224":["f177ec0246f5d1788b56d8f5d5c66cb38d66bcef"],"9856095f7afb5a607bf5e65077615ed91273508c":[],"313b9c84057c3a31294cbcd794ea84c4e81646d9":["9fc0d60683b47b5d922124c31f57c8b34734f9e6","9720b151fde2073f4e401450f4574e5f31c2d0ff"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["adc24e961ba2d17d4cc061a9fde65e9059b7f1ee","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["9720b151fde2073f4e401450f4574e5f31c2d0ff"],"f177ec0246f5d1788b56d8f5d5c66cb38d66bcef":["313b9c84057c3a31294cbcd794ea84c4e81646d9","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9856095f7afb5a607bf5e65077615ed91273508c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}