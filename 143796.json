{"path":"modules/analysis/kuromoji/src/java/org/apache/lucene/analysis/kuromoji/Segmenter#getSplitPositions(String).mjava","commits":[{"id":"6ae8b8ec55786d06eb9b03fc7bc86a907e1a3ae2","date":1326399048,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/kuromoji/src/java/org/apache/lucene/analysis/kuromoji/Segmenter#getSplitPositions(String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Split input text at 句読点, which is 。 and 、\n   * @param text\n   * @return list of split position\n   */\n  private List<Integer> getSplitPositions(String text) {\n    ArrayList<Integer> splitPositions = new ArrayList<Integer>();\n    \n    int position = 0;\n    int currentPosition = 0;\n    \n    while(true) {\n      int indexOfMaru = text.indexOf(\"。\", currentPosition);\n      int indexOfTen = text.indexOf(\"、\", currentPosition);\n      \n      if(indexOfMaru < 0 || indexOfTen < 0) {\n        position = Math.max(indexOfMaru, indexOfTen);;\n      } else {\n        position = Math.min(indexOfMaru, indexOfTen);\t\t\t\t\n      }\n      \n      if(position >= 0) {\n        splitPositions.add(position);\n        currentPosition = position + 1;\n      } else {\n        break;\n      }\n    }\n    \n    return splitPositions;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0984ad47974c2d5d354519ddb2aa8358973a6271","date":1330868053,"type":4,"author":"Christian Moen","isMerge":false,"pathNew":"/dev/null","pathOld":"modules/analysis/kuromoji/src/java/org/apache/lucene/analysis/kuromoji/Segmenter#getSplitPositions(String).mjava","sourceNew":null,"sourceOld":"  /**\n   * Split input text at 句読点, which is 。 and 、\n   * @param text\n   * @return list of split position\n   */\n  private List<Integer> getSplitPositions(String text) {\n    ArrayList<Integer> splitPositions = new ArrayList<Integer>();\n    \n    int position = 0;\n    int currentPosition = 0;\n    \n    while(true) {\n      int indexOfMaru = text.indexOf(\"。\", currentPosition);\n      int indexOfTen = text.indexOf(\"、\", currentPosition);\n      \n      if(indexOfMaru < 0 || indexOfTen < 0) {\n        position = Math.max(indexOfMaru, indexOfTen);;\n      } else {\n        position = Math.min(indexOfMaru, indexOfTen);\t\t\t\t\n      }\n      \n      if(position >= 0) {\n        splitPositions.add(position);\n        currentPosition = position + 1;\n      } else {\n        break;\n      }\n    }\n    \n    return splitPositions;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":4,"author":"Ryan McKinley","isMerge":true,"pathNew":"/dev/null","pathOld":"modules/analysis/kuromoji/src/java/org/apache/lucene/analysis/kuromoji/Segmenter#getSplitPositions(String).mjava","sourceNew":null,"sourceOld":"  /**\n   * Split input text at 句読点, which is 。 and 、\n   * @param text\n   * @return list of split position\n   */\n  private List<Integer> getSplitPositions(String text) {\n    ArrayList<Integer> splitPositions = new ArrayList<Integer>();\n    \n    int position = 0;\n    int currentPosition = 0;\n    \n    while(true) {\n      int indexOfMaru = text.indexOf(\"。\", currentPosition);\n      int indexOfTen = text.indexOf(\"、\", currentPosition);\n      \n      if(indexOfMaru < 0 || indexOfTen < 0) {\n        position = Math.max(indexOfMaru, indexOfTen);;\n      } else {\n        position = Math.min(indexOfMaru, indexOfTen);\t\t\t\t\n      }\n      \n      if(position >= 0) {\n        splitPositions.add(position);\n        currentPosition = position + 1;\n      } else {\n        break;\n      }\n    }\n    \n    return splitPositions;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["6ae8b8ec55786d06eb9b03fc7bc86a907e1a3ae2","0984ad47974c2d5d354519ddb2aa8358973a6271"],"0984ad47974c2d5d354519ddb2aa8358973a6271":["6ae8b8ec55786d06eb9b03fc7bc86a907e1a3ae2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6ae8b8ec55786d06eb9b03fc7bc86a907e1a3ae2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0984ad47974c2d5d354519ddb2aa8358973a6271"]},"commit2Childs":{"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"0984ad47974c2d5d354519ddb2aa8358973a6271":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6ae8b8ec55786d06eb9b03fc7bc86a907e1a3ae2"],"6ae8b8ec55786d06eb9b03fc7bc86a907e1a3ae2":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","0984ad47974c2d5d354519ddb2aa8358973a6271"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}