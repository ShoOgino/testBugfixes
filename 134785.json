{"path":"src/java/org/apache/lucene/index/IndexReader#open(String,boolean).mjava","commits":[{"id":"0dabcca520e81aeff96f5c937b7ffb5617ee69d1","date":1243458018,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#open(String,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /** Returns an IndexReader reading the index in an\n   *  FSDirectory in the named path.  You should pass\n   *  readOnly=true, since it gives much better concurrent\n   *  performance, unless you intend to do write operations\n   *  (delete documents or change norms) with the reader.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   * @param path the path to the index directory\n   * @param readOnly true if this should be a readOnly\n   * reader */\n  public static IndexReader open(String path, boolean readOnly) throws CorruptIndexException, IOException {\n    return open(FSDirectory.getDirectory(path), true, null, null, readOnly);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["f658c721de6fbc0c439a5288182c4a6bb53ac21b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f658c721de6fbc0c439a5288182c4a6bb53ac21b","date":1244025537,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#open(String,boolean).mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#open(String,boolean).mjava","sourceNew":"  /** Returns an IndexReader reading the index in an\n   *  FSDirectory in the named path.  You should pass\n   *  readOnly=true, since it gives much better concurrent\n   *  performance, unless you intend to do write operations\n   *  (delete documents or change norms) with the reader.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   * @param path the path to the index directory\n   * @param readOnly true if this should be a readOnly\n   * reader\n   * @deprecated Use {@link #open(Directory, boolean)} instead*/\n  public static IndexReader open(String path, boolean readOnly) throws CorruptIndexException, IOException {\n    return open(FSDirectory.getDirectory(path), true, null, null, readOnly);\n  }\n\n","sourceOld":"  /** Returns an IndexReader reading the index in an\n   *  FSDirectory in the named path.  You should pass\n   *  readOnly=true, since it gives much better concurrent\n   *  performance, unless you intend to do write operations\n   *  (delete documents or change norms) with the reader.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   * @param path the path to the index directory\n   * @param readOnly true if this should be a readOnly\n   * reader */\n  public static IndexReader open(String path, boolean readOnly) throws CorruptIndexException, IOException {\n    return open(FSDirectory.getDirectory(path), true, null, null, readOnly);\n  }\n\n","bugFix":["0dabcca520e81aeff96f5c937b7ffb5617ee69d1"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba712167ee848727018d8b77aa0c273839fbe15c","date":1244411561,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#open(String,boolean).mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#open(String,boolean).mjava","sourceNew":"  /** Returns an IndexReader reading the index in an\n   *  FSDirectory in the named path.  You should pass\n   *  readOnly=true, since it gives much better concurrent\n   *  performance, unless you intend to do write operations\n   *  (delete documents or change norms) with the reader.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   * @param path the path to the index directory\n   * @param readOnly true if this should be a readOnly\n   * reader\n   * @deprecated This method will be removed in the 3.0 release.\n   * Use {@link #open(Directory, boolean)} instead\n   */\n  public static IndexReader open(String path, boolean readOnly) throws CorruptIndexException, IOException {\n    return open(FSDirectory.getDirectory(path), true, null, null, readOnly);\n  }\n\n","sourceOld":"  /** Returns an IndexReader reading the index in an\n   *  FSDirectory in the named path.  You should pass\n   *  readOnly=true, since it gives much better concurrent\n   *  performance, unless you intend to do write operations\n   *  (delete documents or change norms) with the reader.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   * @param path the path to the index directory\n   * @param readOnly true if this should be a readOnly\n   * reader\n   * @deprecated Use {@link #open(Directory, boolean)} instead*/\n  public static IndexReader open(String path, boolean readOnly) throws CorruptIndexException, IOException {\n    return open(FSDirectory.getDirectory(path), true, null, null, readOnly);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e54e4a9a2442944e55f58e835877841cdac1271","date":1244628560,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#open(String,boolean).mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#open(String,boolean).mjava","sourceNew":"  /** Returns an IndexReader reading the index in an\n   *  FSDirectory in the named path.  You should pass\n   *  readOnly=true, since it gives much better concurrent\n   *  performance, unless you intend to do write operations\n   *  (delete documents or change norms) with the reader.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   * @param path the path to the index directory\n   * @param readOnly true if this should be a readOnly\n   * reader\n   * @deprecated This method will be removed in the 3.0 release.\n   * Use {@link #open(Directory, boolean)} instead\n   */\n  public static IndexReader open(String path, boolean readOnly) throws CorruptIndexException, IOException {\n    return new DirectoryOwningReader(open(FSDirectory.getDirectory(path), null, null, readOnly));\n  }\n\n","sourceOld":"  /** Returns an IndexReader reading the index in an\n   *  FSDirectory in the named path.  You should pass\n   *  readOnly=true, since it gives much better concurrent\n   *  performance, unless you intend to do write operations\n   *  (delete documents or change norms) with the reader.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   * @param path the path to the index directory\n   * @param readOnly true if this should be a readOnly\n   * reader\n   * @deprecated This method will be removed in the 3.0 release.\n   * Use {@link #open(Directory, boolean)} instead\n   */\n  public static IndexReader open(String path, boolean readOnly) throws CorruptIndexException, IOException {\n    return open(FSDirectory.getDirectory(path), true, null, null, readOnly);\n  }\n\n","bugFix":null,"bugIntro":["73bc1851682757b5184768cbdf6de3f4f5a5f432"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"73bc1851682757b5184768cbdf6de3f4f5a5f432","date":1244636487,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#open(String,boolean).mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#open(String,boolean).mjava","sourceNew":"  /** Returns an IndexReader reading the index in an\n   *  FSDirectory in the named path.  You should pass\n   *  readOnly=true, since it gives much better concurrent\n   *  performance, unless you intend to do write operations\n   *  (delete documents or change norms) with the reader.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   * @param path the path to the index directory\n   * @param readOnly true if this should be a readOnly\n   * reader\n   * @deprecated This method will be removed in the 3.0 release.\n   * Use {@link #open(Directory, boolean)} instead\n   */\n  public static IndexReader open(String path, boolean readOnly) throws CorruptIndexException, IOException {\n    final Directory dir = FSDirectory.getDirectory(path);\n    IndexReader r = null;\n    try {\n      r = open(dir, null, null, readOnly);\n    } finally {\n      if (r == null)\n        dir.close();\n    }\n    return new DirectoryOwningReader(r);\n  }\n\n","sourceOld":"  /** Returns an IndexReader reading the index in an\n   *  FSDirectory in the named path.  You should pass\n   *  readOnly=true, since it gives much better concurrent\n   *  performance, unless you intend to do write operations\n   *  (delete documents or change norms) with the reader.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   * @param path the path to the index directory\n   * @param readOnly true if this should be a readOnly\n   * reader\n   * @deprecated This method will be removed in the 3.0 release.\n   * Use {@link #open(Directory, boolean)} instead\n   */\n  public static IndexReader open(String path, boolean readOnly) throws CorruptIndexException, IOException {\n    return new DirectoryOwningReader(open(FSDirectory.getDirectory(path), null, null, readOnly));\n  }\n\n","bugFix":["4e54e4a9a2442944e55f58e835877841cdac1271"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"961159f13aece73fbb30aea720e77a2237e8bafd","date":1247258916,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#open(String,boolean).mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#open(String,boolean).mjava","sourceNew":"  /** Returns an IndexReader reading the index in an\n   *  FSDirectory in the named path.  You should pass\n   *  readOnly=true, since it gives much better concurrent\n   *  performance, unless you intend to do write operations\n   *  (delete documents or change norms) with the reader.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   * @param path the path to the index directory\n   * @param readOnly true if this should be a readOnly\n   * reader\n   * @deprecated This method will be removed in the 3.0 release.\n   * Use {@link #open(Directory, boolean)} instead\n   */\n  public static IndexReader open(String path, boolean readOnly) throws CorruptIndexException, IOException {\n    final Directory dir = FSDirectory.getDirectory(path);\n    IndexReader r = null;\n    try {\n      r = open(dir, null, null, readOnly, DEFAULT_TERMS_INDEX_DIVISOR);\n    } finally {\n      if (r == null)\n        dir.close();\n    }\n    return new DirectoryOwningReader(r);\n  }\n\n","sourceOld":"  /** Returns an IndexReader reading the index in an\n   *  FSDirectory in the named path.  You should pass\n   *  readOnly=true, since it gives much better concurrent\n   *  performance, unless you intend to do write operations\n   *  (delete documents or change norms) with the reader.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   * @param path the path to the index directory\n   * @param readOnly true if this should be a readOnly\n   * reader\n   * @deprecated This method will be removed in the 3.0 release.\n   * Use {@link #open(Directory, boolean)} instead\n   */\n  public static IndexReader open(String path, boolean readOnly) throws CorruptIndexException, IOException {\n    final Directory dir = FSDirectory.getDirectory(path);\n    IndexReader r = null;\n    try {\n      r = open(dir, null, null, readOnly);\n    } finally {\n      if (r == null)\n        dir.close();\n    }\n    return new DirectoryOwningReader(r);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"082ab1b8bb93767e8e870fda3638b79d67035d3f","date":1251223359,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#open(String,boolean).mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#open(String,boolean).mjava","sourceNew":"  /** Returns an IndexReader reading the index in an\n   *  FSDirectory in the named path.  You should pass\n   *  readOnly=true, since it gives much better concurrent\n   *  performance, unless you intend to do write operations\n   *  (delete documents or change norms) with the reader.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   * @param path the path to the index directory\n   * @param readOnly true if this should be a readOnly\n   * reader\n   * @deprecated Use {@link #open(Directory, boolean)} instead.\n   *             This method will be removed in the 3.0 release.\n   * \n   */\n  public static IndexReader open(String path, boolean readOnly) throws CorruptIndexException, IOException {\n    final Directory dir = FSDirectory.getDirectory(path);\n    IndexReader r = null;\n    try {\n      r = open(dir, null, null, readOnly, DEFAULT_TERMS_INDEX_DIVISOR);\n    } finally {\n      if (r == null)\n        dir.close();\n    }\n    return new DirectoryOwningReader(r);\n  }\n\n","sourceOld":"  /** Returns an IndexReader reading the index in an\n   *  FSDirectory in the named path.  You should pass\n   *  readOnly=true, since it gives much better concurrent\n   *  performance, unless you intend to do write operations\n   *  (delete documents or change norms) with the reader.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   * @param path the path to the index directory\n   * @param readOnly true if this should be a readOnly\n   * reader\n   * @deprecated This method will be removed in the 3.0 release.\n   * Use {@link #open(Directory, boolean)} instead\n   */\n  public static IndexReader open(String path, boolean readOnly) throws CorruptIndexException, IOException {\n    final Directory dir = FSDirectory.getDirectory(path);\n    IndexReader r = null;\n    try {\n      r = open(dir, null, null, readOnly, DEFAULT_TERMS_INDEX_DIVISOR);\n    } finally {\n      if (r == null)\n        dir.close();\n    }\n    return new DirectoryOwningReader(r);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eaea03be31988a41275d45a429ac71ff0ad740fb","date":1254612554,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/index/IndexReader#open(String,boolean).mjava","sourceNew":null,"sourceOld":"  /** Returns an IndexReader reading the index in an\n   *  FSDirectory in the named path.  You should pass\n   *  readOnly=true, since it gives much better concurrent\n   *  performance, unless you intend to do write operations\n   *  (delete documents or change norms) with the reader.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   * @param path the path to the index directory\n   * @param readOnly true if this should be a readOnly\n   * reader\n   * @deprecated Use {@link #open(Directory, boolean)} instead.\n   *             This method will be removed in the 3.0 release.\n   * \n   */\n  public static IndexReader open(String path, boolean readOnly) throws CorruptIndexException, IOException {\n    final Directory dir = FSDirectory.getDirectory(path);\n    IndexReader r = null;\n    try {\n      r = open(dir, null, null, readOnly, DEFAULT_TERMS_INDEX_DIVISOR);\n    } finally {\n      if (r == null)\n        dir.close();\n    }\n    return new DirectoryOwningReader(r);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"eaea03be31988a41275d45a429ac71ff0ad740fb":["082ab1b8bb93767e8e870fda3638b79d67035d3f"],"082ab1b8bb93767e8e870fda3638b79d67035d3f":["961159f13aece73fbb30aea720e77a2237e8bafd"],"961159f13aece73fbb30aea720e77a2237e8bafd":["73bc1851682757b5184768cbdf6de3f4f5a5f432"],"4e54e4a9a2442944e55f58e835877841cdac1271":["ba712167ee848727018d8b77aa0c273839fbe15c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f658c721de6fbc0c439a5288182c4a6bb53ac21b":["0dabcca520e81aeff96f5c937b7ffb5617ee69d1"],"0dabcca520e81aeff96f5c937b7ffb5617ee69d1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"73bc1851682757b5184768cbdf6de3f4f5a5f432":["4e54e4a9a2442944e55f58e835877841cdac1271"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["eaea03be31988a41275d45a429ac71ff0ad740fb"],"ba712167ee848727018d8b77aa0c273839fbe15c":["f658c721de6fbc0c439a5288182c4a6bb53ac21b"]},"commit2Childs":{"eaea03be31988a41275d45a429ac71ff0ad740fb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"082ab1b8bb93767e8e870fda3638b79d67035d3f":["eaea03be31988a41275d45a429ac71ff0ad740fb"],"961159f13aece73fbb30aea720e77a2237e8bafd":["082ab1b8bb93767e8e870fda3638b79d67035d3f"],"4e54e4a9a2442944e55f58e835877841cdac1271":["73bc1851682757b5184768cbdf6de3f4f5a5f432"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0dabcca520e81aeff96f5c937b7ffb5617ee69d1"],"f658c721de6fbc0c439a5288182c4a6bb53ac21b":["ba712167ee848727018d8b77aa0c273839fbe15c"],"0dabcca520e81aeff96f5c937b7ffb5617ee69d1":["f658c721de6fbc0c439a5288182c4a6bb53ac21b"],"73bc1851682757b5184768cbdf6de3f4f5a5f432":["961159f13aece73fbb30aea720e77a2237e8bafd"],"ba712167ee848727018d8b77aa0c273839fbe15c":["4e54e4a9a2442944e55f58e835877841cdac1271"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}