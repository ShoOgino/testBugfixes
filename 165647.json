{"path":"modules/suggest/src/java/org/apache/lucene/search/suggest/jaspell/JaspellTernarySearchTrie#matchPrefix(String).mjava","commits":[{"id":"e230a61047bc041516c811baa08a7174d6f8322a","date":1306175633,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/suggest/src/java/org/apache/lucene/search/suggest/jaspell/JaspellTernarySearchTrie#matchPrefix(String).mjava","pathOld":"solr/src/java/org/apache/solr/spelling/suggest/jaspell/JaspellTernarySearchTrie#matchPrefix(String).mjava","sourceNew":"  /**\n   * Returns an alphabetical <code>List</code> of all keys in the trie that\n   * begin with a given prefix. Only keys for nodes having non-null data are\n   * included in the <code>List</code>.\n   * \n   *@param prefix\n   *          Each key returned from this method will begin with the characters\n   *          in prefix.\n   *@return A <code>List</code> with the results.\n   */\n  public List<String> matchPrefix(String prefix) {\n    return matchPrefix(prefix, defaultNumReturnValues);\n  }\n\n","sourceOld":"  /**\n   * Returns an alphabetical <code>List</code> of all keys in the trie that\n   * begin with a given prefix. Only keys for nodes having non-null data are\n   * included in the <code>List</code>.\n   * \n   *@param prefix\n   *          Each key returned from this method will begin with the characters\n   *          in prefix.\n   *@return A <code>List</code> with the results.\n   */\n  public List<String> matchPrefix(String prefix) {\n    return matchPrefix(prefix, defaultNumReturnValues);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/suggest/src/java/org/apache/lucene/search/suggest/jaspell/JaspellTernarySearchTrie#matchPrefix(String).mjava","pathOld":"solr/src/java/org/apache/solr/spelling/suggest/jaspell/JaspellTernarySearchTrie#matchPrefix(String).mjava","sourceNew":"  /**\n   * Returns an alphabetical <code>List</code> of all keys in the trie that\n   * begin with a given prefix. Only keys for nodes having non-null data are\n   * included in the <code>List</code>.\n   * \n   *@param prefix\n   *          Each key returned from this method will begin with the characters\n   *          in prefix.\n   *@return A <code>List</code> with the results.\n   */\n  public List<String> matchPrefix(String prefix) {\n    return matchPrefix(prefix, defaultNumReturnValues);\n  }\n\n","sourceOld":"  /**\n   * Returns an alphabetical <code>List</code> of all keys in the trie that\n   * begin with a given prefix. Only keys for nodes having non-null data are\n   * included in the <code>List</code>.\n   * \n   *@param prefix\n   *          Each key returned from this method will begin with the characters\n   *          in prefix.\n   *@return A <code>List</code> with the results.\n   */\n  public List<String> matchPrefix(String prefix) {\n    return matchPrefix(prefix, defaultNumReturnValues);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e10cb22a8bdb44339e282925a29182bb2f3174d","date":1306841137,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/suggest/src/java/org/apache/lucene/search/suggest/jaspell/JaspellTernarySearchTrie#matchPrefix(String).mjava","pathOld":"solr/src/java/org/apache/solr/spelling/suggest/jaspell/JaspellTernarySearchTrie#matchPrefix(String).mjava","sourceNew":"  /**\n   * Returns an alphabetical <code>List</code> of all keys in the trie that\n   * begin with a given prefix. Only keys for nodes having non-null data are\n   * included in the <code>List</code>.\n   * \n   *@param prefix\n   *          Each key returned from this method will begin with the characters\n   *          in prefix.\n   *@return A <code>List</code> with the results.\n   */\n  public List<String> matchPrefix(String prefix) {\n    return matchPrefix(prefix, defaultNumReturnValues);\n  }\n\n","sourceOld":"  /**\n   * Returns an alphabetical <code>List</code> of all keys in the trie that\n   * begin with a given prefix. Only keys for nodes having non-null data are\n   * included in the <code>List</code>.\n   * \n   *@param prefix\n   *          Each key returned from this method will begin with the characters\n   *          in prefix.\n   *@return A <code>List</code> with the results.\n   */\n  public List<String> matchPrefix(String prefix) {\n    return matchPrefix(prefix, defaultNumReturnValues);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/jaspell/JaspellTernarySearchTrie#matchPrefix(String).mjava","pathOld":"modules/suggest/src/java/org/apache/lucene/search/suggest/jaspell/JaspellTernarySearchTrie#matchPrefix(String).mjava","sourceNew":"  /**\n   * Returns an alphabetical <code>List</code> of all keys in the trie that\n   * begin with a given prefix. Only keys for nodes having non-null data are\n   * included in the <code>List</code>.\n   * \n   *@param prefix\n   *          Each key returned from this method will begin with the characters\n   *          in prefix.\n   *@return A <code>List</code> with the results.\n   */\n  public List<String> matchPrefix(String prefix) {\n    return matchPrefix(prefix, defaultNumReturnValues);\n  }\n\n","sourceOld":"  /**\n   * Returns an alphabetical <code>List</code> of all keys in the trie that\n   * begin with a given prefix. Only keys for nodes having non-null data are\n   * included in the <code>List</code>.\n   * \n   *@param prefix\n   *          Each key returned from this method will begin with the characters\n   *          in prefix.\n   *@return A <code>List</code> with the results.\n   */\n  public List<String> matchPrefix(String prefix) {\n    return matchPrefix(prefix, defaultNumReturnValues);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["e230a61047bc041516c811baa08a7174d6f8322a"],"e230a61047bc041516c811baa08a7174d6f8322a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e230a61047bc041516c811baa08a7174d6f8322a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e230a61047bc041516c811baa08a7174d6f8322a"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e230a61047bc041516c811baa08a7174d6f8322a":["b89678825b68eccaf09e6ab71675fc0b0af1e099","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e230a61047bc041516c811baa08a7174d6f8322a","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2e10cb22a8bdb44339e282925a29182bb2f3174d":[]},"heads":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}