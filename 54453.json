{"path":"lucene/core/src/java/org/apache/lucene/search/PointInSetQuery.MergePointVisitor#visit(int,byte[]).mjava","commits":[{"id":"ee299c4e4c019174aa433f564b5de03a7a40e00d","date":1456264115,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/PointInSetQuery.MergePointVisitor#visit(int,byte[]).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void visit(int docID, byte[] packedValue) {\n      scratch.bytes = packedValue;\n      while (nextQueryPoint != null) {\n        int cmp = nextQueryPoint.compareTo(scratch);\n        if (cmp == 0) {\n          // Query point equals index point, so collect and return\n          hitCount[0]++;\n          result.add(docID);\n          break;\n        } else if (cmp < 0) {\n          // Query point is before index point, so we move to next query point\n          nextQueryPoint = iterator.next();\n        } else {\n          // Query point is after index point, so we don't collect and we return:\n          break;\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868f63baffb79407d4b49f3c0be8dc4725ffc6e1","date":1456423715,"type":0,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/PointInSetQuery.MergePointVisitor#visit(int,byte[]).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void visit(int docID, byte[] packedValue) {\n      scratch.bytes = packedValue;\n      while (nextQueryPoint != null) {\n        int cmp = nextQueryPoint.compareTo(scratch);\n        if (cmp == 0) {\n          // Query point equals index point, so collect and return\n          hitCount[0]++;\n          result.add(docID);\n          break;\n        } else if (cmp < 0) {\n          // Query point is before index point, so we move to next query point\n          nextQueryPoint = iterator.next();\n        } else {\n          // Query point is after index point, so we don't collect and we return:\n          break;\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2b63007489248c99b5cdc766ce55938891f5d969","date":1456737032,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/PointInSetQuery.MergePointVisitor#visit(int,byte[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/PointInSetQuery.MergePointVisitor#visit(int,byte[]).mjava","sourceNew":"    @Override\n    public void visit(int docID, byte[] packedValue) {\n      scratch.bytes = packedValue;\n      while (nextQueryPoint != null) {\n        int cmp = nextQueryPoint.compareTo(scratch);\n        if (cmp == 0) {\n          // Query point equals index point, so collect and return\n          result.add(docID);\n          break;\n        } else if (cmp < 0) {\n          // Query point is before index point, so we move to next query point\n          nextQueryPoint = iterator.next();\n        } else {\n          // Query point is after index point, so we don't collect and we return:\n          break;\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void visit(int docID, byte[] packedValue) {\n      scratch.bytes = packedValue;\n      while (nextQueryPoint != null) {\n        int cmp = nextQueryPoint.compareTo(scratch);\n        if (cmp == 0) {\n          // Query point equals index point, so collect and return\n          hitCount[0]++;\n          result.add(docID);\n          break;\n        } else if (cmp < 0) {\n          // Query point is before index point, so we move to next query point\n          nextQueryPoint = iterator.next();\n        } else {\n          // Query point is after index point, so we don't collect and we return:\n          break;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af2638813028b254a88b418ebeafb541afb49653","date":1456804822,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/PointInSetQuery.MergePointVisitor#visit(int,byte[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/PointInSetQuery.MergePointVisitor#visit(int,byte[]).mjava","sourceNew":"    @Override\n    public void visit(int docID, byte[] packedValue) {\n      scratch.bytes = packedValue;\n      while (nextQueryPoint != null) {\n        int cmp = nextQueryPoint.compareTo(scratch);\n        if (cmp == 0) {\n          // Query point equals index point, so collect and return\n          result.add(docID);\n          break;\n        } else if (cmp < 0) {\n          // Query point is before index point, so we move to next query point\n          nextQueryPoint = iterator.next();\n        } else {\n          // Query point is after index point, so we don't collect and we return:\n          break;\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void visit(int docID, byte[] packedValue) {\n      scratch.bytes = packedValue;\n      while (nextQueryPoint != null) {\n        int cmp = nextQueryPoint.compareTo(scratch);\n        if (cmp == 0) {\n          // Query point equals index point, so collect and return\n          hitCount[0]++;\n          result.add(docID);\n          break;\n        } else if (cmp < 0) {\n          // Query point is before index point, so we move to next query point\n          nextQueryPoint = iterator.next();\n        } else {\n          // Query point is after index point, so we don't collect and we return:\n          break;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3d3eccadf4f2a01d2034c96afe1a5c617b2e85af","date":1461918927,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/PointInSetQuery.MergePointVisitor#visit(int,byte[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/PointInSetQuery.MergePointVisitor#visit(int,byte[]).mjava","sourceNew":"    @Override\n    public void visit(int docID, byte[] packedValue) {\n      scratch.bytes = packedValue;\n      while (nextQueryPoint != null) {\n        int cmp = nextQueryPoint.compareTo(scratch);\n        if (cmp == 0) {\n          // Query point equals index point, so collect and return\n          adder.add(docID);\n          break;\n        } else if (cmp < 0) {\n          // Query point is before index point, so we move to next query point\n          nextQueryPoint = iterator.next();\n        } else {\n          // Query point is after index point, so we don't collect and we return:\n          break;\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void visit(int docID, byte[] packedValue) {\n      scratch.bytes = packedValue;\n      while (nextQueryPoint != null) {\n        int cmp = nextQueryPoint.compareTo(scratch);\n        if (cmp == 0) {\n          // Query point equals index point, so collect and return\n          result.add(docID);\n          break;\n        } else if (cmp < 0) {\n          // Query point is before index point, so we move to next query point\n          nextQueryPoint = iterator.next();\n        } else {\n          // Query point is after index point, so we don't collect and we return:\n          break;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8e8d5955830d712186a4beb716e797d505af7981","date":1461951189,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/PointInSetQuery.MergePointVisitor#visit(int,byte[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/PointInSetQuery.MergePointVisitor#visit(int,byte[]).mjava","sourceNew":"    @Override\n    public void visit(int docID, byte[] packedValue) {\n      scratch.bytes = packedValue;\n      while (nextQueryPoint != null) {\n        int cmp = nextQueryPoint.compareTo(scratch);\n        if (cmp == 0) {\n          // Query point equals index point, so collect and return\n          adder.add(docID);\n          break;\n        } else if (cmp < 0) {\n          // Query point is before index point, so we move to next query point\n          nextQueryPoint = iterator.next();\n        } else {\n          // Query point is after index point, so we don't collect and we return:\n          break;\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void visit(int docID, byte[] packedValue) {\n      scratch.bytes = packedValue;\n      while (nextQueryPoint != null) {\n        int cmp = nextQueryPoint.compareTo(scratch);\n        if (cmp == 0) {\n          // Query point equals index point, so collect and return\n          result.add(docID);\n          break;\n        } else if (cmp < 0) {\n          // Query point is before index point, so we move to next query point\n          nextQueryPoint = iterator.next();\n        } else {\n          // Query point is after index point, so we don't collect and we return:\n          break;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55b50463286869f584cf849d1587a0fcd54d1dfa","date":1462378517,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/PointInSetQuery.MergePointVisitor#visit(int,byte[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/PointInSetQuery.MergePointVisitor#visit(int,byte[]).mjava","sourceNew":"    @Override\n    public void visit(int docID, byte[] packedValue) {\n      scratch.bytes = packedValue;\n      while (nextQueryPoint != null) {\n        int cmp = nextQueryPoint.compareTo(scratch);\n        if (cmp == 0) {\n          // Query point equals index point, so collect and return\n          adder.add(docID);\n          break;\n        } else if (cmp < 0) {\n          // Query point is before index point, so we move to next query point\n          nextQueryPoint = iterator.next();\n        } else {\n          // Query point is after index point, so we don't collect and we return:\n          break;\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void visit(int docID, byte[] packedValue) {\n      scratch.bytes = packedValue;\n      while (nextQueryPoint != null) {\n        int cmp = nextQueryPoint.compareTo(scratch);\n        if (cmp == 0) {\n          // Query point equals index point, so collect and return\n          result.add(docID);\n          break;\n        } else if (cmp < 0) {\n          // Query point is before index point, so we move to next query point\n          nextQueryPoint = iterator.next();\n        } else {\n          // Query point is after index point, so we don't collect and we return:\n          break;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"646cad9a0473e40f431299c5d1567d1f4d32f689","date":1562050301,"type":3,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/PointInSetQuery.MergePointVisitor#visit(int,byte[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/PointInSetQuery.MergePointVisitor#visit(int,byte[]).mjava","sourceNew":"    @Override\n    public void visit(int docID, byte[] packedValue) {\n     if (matches(packedValue)) {\n       visit(docID);\n     }\n    }\n\n","sourceOld":"    @Override\n    public void visit(int docID, byte[] packedValue) {\n      scratch.bytes = packedValue;\n      while (nextQueryPoint != null) {\n        int cmp = nextQueryPoint.compareTo(scratch);\n        if (cmp == 0) {\n          // Query point equals index point, so collect and return\n          adder.add(docID);\n          break;\n        } else if (cmp < 0) {\n          // Query point is before index point, so we move to next query point\n          nextQueryPoint = iterator.next();\n        } else {\n          // Query point is after index point, so we don't collect and we return:\n          break;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"af2638813028b254a88b418ebeafb541afb49653":["868f63baffb79407d4b49f3c0be8dc4725ffc6e1","2b63007489248c99b5cdc766ce55938891f5d969"],"3d3eccadf4f2a01d2034c96afe1a5c617b2e85af":["af2638813028b254a88b418ebeafb541afb49653"],"ee299c4e4c019174aa433f564b5de03a7a40e00d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8e8d5955830d712186a4beb716e797d505af7981":["af2638813028b254a88b418ebeafb541afb49653","3d3eccadf4f2a01d2034c96afe1a5c617b2e85af"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"868f63baffb79407d4b49f3c0be8dc4725ffc6e1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ee299c4e4c019174aa433f564b5de03a7a40e00d"],"2b63007489248c99b5cdc766ce55938891f5d969":["868f63baffb79407d4b49f3c0be8dc4725ffc6e1"],"646cad9a0473e40f431299c5d1567d1f4d32f689":["8e8d5955830d712186a4beb716e797d505af7981"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["646cad9a0473e40f431299c5d1567d1f4d32f689"],"55b50463286869f584cf849d1587a0fcd54d1dfa":["af2638813028b254a88b418ebeafb541afb49653","8e8d5955830d712186a4beb716e797d505af7981"]},"commit2Childs":{"af2638813028b254a88b418ebeafb541afb49653":["3d3eccadf4f2a01d2034c96afe1a5c617b2e85af","8e8d5955830d712186a4beb716e797d505af7981","55b50463286869f584cf849d1587a0fcd54d1dfa"],"3d3eccadf4f2a01d2034c96afe1a5c617b2e85af":["8e8d5955830d712186a4beb716e797d505af7981"],"ee299c4e4c019174aa433f564b5de03a7a40e00d":["868f63baffb79407d4b49f3c0be8dc4725ffc6e1"],"8e8d5955830d712186a4beb716e797d505af7981":["646cad9a0473e40f431299c5d1567d1f4d32f689","55b50463286869f584cf849d1587a0fcd54d1dfa"],"868f63baffb79407d4b49f3c0be8dc4725ffc6e1":["af2638813028b254a88b418ebeafb541afb49653","2b63007489248c99b5cdc766ce55938891f5d969"],"2b63007489248c99b5cdc766ce55938891f5d969":["af2638813028b254a88b418ebeafb541afb49653"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ee299c4e4c019174aa433f564b5de03a7a40e00d","868f63baffb79407d4b49f3c0be8dc4725ffc6e1"],"646cad9a0473e40f431299c5d1567d1f4d32f689":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"55b50463286869f584cf849d1587a0fcd54d1dfa":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","55b50463286869f584cf849d1587a0fcd54d1dfa"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}