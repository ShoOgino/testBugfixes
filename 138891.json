{"path":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleAddReplicaProp(SolrQueryRequest,SolrQueryResponse).mjava","commits":[{"id":"dc2bafa00000be70227a04c29e3f885ff41e531d","date":1412182669,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleAddReplicaProp(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"/dev/null","sourceNew":"  private void handleAddReplicaProp(SolrQueryRequest req, SolrQueryResponse rsp) throws KeeperException, InterruptedException {\n    req.getParams().required().check(COLLECTION_PROP, PROPERTY_PROP, SHARD_ID_PROP, REPLICA_PROP, PROPERTY_VALUE_PROP);\n\n\n    Map<String, Object> map = ZkNodeProps.makeMap(Overseer.QUEUE_OPERATION, ADDREPLICAPROP.toLower());\n    copyIfNotNull(req.getParams(), map, COLLECTION_PROP, SHARD_ID_PROP, REPLICA_PROP, PROPERTY_PROP,\n        SLICE_UNIQUE, PROPERTY_VALUE_PROP);\n\n    String property = (String) map.get(PROPERTY_PROP);\n    boolean uniquePerSlice = Boolean.parseBoolean((String) map.get(SLICE_UNIQUE));\n\n    // Check if we're trying to set a property with parameters that allow us to set the property on multiple replicas\n    // in a slice on properties that are known to only be one-per-slice and error out if so.\n    if (StringUtils.isNotBlank((String)map.get(SLICE_UNIQUE)) &&\n        Overseer.sliceUniqueBooleanProperties.contains(property.toLowerCase(Locale.ROOT)) &&\n        uniquePerSlice == false) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Overseer replica property command received for property \" + property +\n              \" with the \" + SLICE_UNIQUE +\n              \" parameter set to something other than 'true'. No action taken.\");\n    }\n    handleResponse(ADDREPLICAPROP.toLower(), new ZkNodeProps(map), rsp);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57517fbf5120ed94888bc0bfb86f9a81094059cf","date":1412273713,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleAddReplicaProp(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleAddReplicaProp(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  private void handleAddReplicaProp(SolrQueryRequest req, SolrQueryResponse rsp) throws KeeperException, InterruptedException {\n    req.getParams().required().check(COLLECTION_PROP, PROPERTY_PROP, SHARD_ID_PROP, REPLICA_PROP, PROPERTY_VALUE_PROP);\n\n\n    Map<String, Object> map = ZkNodeProps.makeMap(Overseer.QUEUE_OPERATION, ADDREPLICAPROP.toLower());\n    copyIfNotNull(req.getParams(), map, COLLECTION_PROP, SHARD_ID_PROP, REPLICA_PROP, PROPERTY_PROP,\n        SLICE_UNIQUE, PROPERTY_VALUE_PROP);\n\n    String property = (String) map.get(PROPERTY_PROP);\n    if (property.startsWith(OverseerCollectionProcessor.COLL_PROP_PREFIX) == false) {\n      property = OverseerCollectionProcessor.COLL_PROP_PREFIX + property;\n    }\n\n    boolean uniquePerSlice = Boolean.parseBoolean((String) map.get(SLICE_UNIQUE));\n\n    // Check if we're trying to set a property with parameters that allow us to set the property on multiple replicas\n    // in a slice on properties that are known to only be one-per-slice and error out if so.\n    if (StringUtils.isNotBlank((String)map.get(SLICE_UNIQUE)) &&\n        Overseer.sliceUniqueBooleanProperties.contains(property.toLowerCase(Locale.ROOT)) &&\n        uniquePerSlice == false) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Overseer replica property command received for property \" + property +\n              \" with the \" + SLICE_UNIQUE +\n              \" parameter set to something other than 'true'. No action taken.\");\n    }\n    handleResponse(ADDREPLICAPROP.toLower(), new ZkNodeProps(map), rsp);\n  }\n\n","sourceOld":"  private void handleAddReplicaProp(SolrQueryRequest req, SolrQueryResponse rsp) throws KeeperException, InterruptedException {\n    req.getParams().required().check(COLLECTION_PROP, PROPERTY_PROP, SHARD_ID_PROP, REPLICA_PROP, PROPERTY_VALUE_PROP);\n\n\n    Map<String, Object> map = ZkNodeProps.makeMap(Overseer.QUEUE_OPERATION, ADDREPLICAPROP.toLower());\n    copyIfNotNull(req.getParams(), map, COLLECTION_PROP, SHARD_ID_PROP, REPLICA_PROP, PROPERTY_PROP,\n        SLICE_UNIQUE, PROPERTY_VALUE_PROP);\n\n    String property = (String) map.get(PROPERTY_PROP);\n    boolean uniquePerSlice = Boolean.parseBoolean((String) map.get(SLICE_UNIQUE));\n\n    // Check if we're trying to set a property with parameters that allow us to set the property on multiple replicas\n    // in a slice on properties that are known to only be one-per-slice and error out if so.\n    if (StringUtils.isNotBlank((String)map.get(SLICE_UNIQUE)) &&\n        Overseer.sliceUniqueBooleanProperties.contains(property.toLowerCase(Locale.ROOT)) &&\n        uniquePerSlice == false) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Overseer replica property command received for property \" + property +\n              \" with the \" + SLICE_UNIQUE +\n              \" parameter set to something other than 'true'. No action taken.\");\n    }\n    handleResponse(ADDREPLICAPROP.toLower(), new ZkNodeProps(map), rsp);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d9a47902d6207303f5ed3e7aaca62ca33433af66","date":1412435312,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleAddReplicaProp(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"/dev/null","sourceNew":"  private void handleAddReplicaProp(SolrQueryRequest req, SolrQueryResponse rsp) throws KeeperException, InterruptedException {\n    req.getParams().required().check(COLLECTION_PROP, PROPERTY_PROP, SHARD_ID_PROP, REPLICA_PROP, PROPERTY_VALUE_PROP);\n\n\n    Map<String, Object> map = ZkNodeProps.makeMap(Overseer.QUEUE_OPERATION, ADDREPLICAPROP.toLower());\n    copyIfNotNull(req.getParams(), map, COLLECTION_PROP, SHARD_ID_PROP, REPLICA_PROP, PROPERTY_PROP,\n        SLICE_UNIQUE, PROPERTY_VALUE_PROP);\n\n    String property = (String) map.get(PROPERTY_PROP);\n    if (property.startsWith(OverseerCollectionProcessor.COLL_PROP_PREFIX) == false) {\n      property = OverseerCollectionProcessor.COLL_PROP_PREFIX + property;\n    }\n\n    boolean uniquePerSlice = Boolean.parseBoolean((String) map.get(SLICE_UNIQUE));\n\n    // Check if we're trying to set a property with parameters that allow us to set the property on multiple replicas\n    // in a slice on properties that are known to only be one-per-slice and error out if so.\n    if (StringUtils.isNotBlank((String)map.get(SLICE_UNIQUE)) &&\n        Overseer.sliceUniqueBooleanProperties.contains(property.toLowerCase(Locale.ROOT)) &&\n        uniquePerSlice == false) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Overseer replica property command received for property \" + property +\n              \" with the \" + SLICE_UNIQUE +\n              \" parameter set to something other than 'true'. No action taken.\");\n    }\n    handleResponse(ADDREPLICAPROP.toLower(), new ZkNodeProps(map), rsp);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cfb61c9baefa8681e40fca3c803f61bf485a9d8d","date":1414979559,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleAddReplicaProp(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleAddReplicaProp(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  private void handleAddReplicaProp(SolrQueryRequest req, SolrQueryResponse rsp) throws KeeperException, InterruptedException {\n    req.getParams().required().check(COLLECTION_PROP, PROPERTY_PROP, SHARD_ID_PROP, REPLICA_PROP, PROPERTY_VALUE_PROP);\n\n\n    Map<String, Object> map = ZkNodeProps.makeMap(Overseer.QUEUE_OPERATION, ADDREPLICAPROP.toLower());\n    copyIfNotNull(req.getParams(), map, COLLECTION_PROP, SHARD_ID_PROP, REPLICA_PROP, PROPERTY_PROP,\n        SHARD_UNIQUE, PROPERTY_VALUE_PROP);\n\n    String property = (String) map.get(PROPERTY_PROP);\n    if (property.startsWith(OverseerCollectionProcessor.COLL_PROP_PREFIX) == false) {\n      property = OverseerCollectionProcessor.COLL_PROP_PREFIX + property;\n    }\n\n    boolean uniquePerSlice = Boolean.parseBoolean((String) map.get(SHARD_UNIQUE));\n\n    // Check if we're trying to set a property with parameters that allow us to set the property on multiple replicas\n    // in a slice on properties that are known to only be one-per-slice and error out if so.\n    if (StringUtils.isNotBlank((String)map.get(SHARD_UNIQUE)) &&\n        Overseer.sliceUniqueBooleanProperties.contains(property.toLowerCase(Locale.ROOT)) &&\n        uniquePerSlice == false) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Overseer replica property command received for property \" + property +\n              \" with the \" + SHARD_UNIQUE +\n              \" parameter set to something other than 'true'. No action taken.\");\n    }\n    handleResponse(ADDREPLICAPROP.toLower(), new ZkNodeProps(map), rsp);\n  }\n\n","sourceOld":"  private void handleAddReplicaProp(SolrQueryRequest req, SolrQueryResponse rsp) throws KeeperException, InterruptedException {\n    req.getParams().required().check(COLLECTION_PROP, PROPERTY_PROP, SHARD_ID_PROP, REPLICA_PROP, PROPERTY_VALUE_PROP);\n\n\n    Map<String, Object> map = ZkNodeProps.makeMap(Overseer.QUEUE_OPERATION, ADDREPLICAPROP.toLower());\n    copyIfNotNull(req.getParams(), map, COLLECTION_PROP, SHARD_ID_PROP, REPLICA_PROP, PROPERTY_PROP,\n        SLICE_UNIQUE, PROPERTY_VALUE_PROP);\n\n    String property = (String) map.get(PROPERTY_PROP);\n    if (property.startsWith(OverseerCollectionProcessor.COLL_PROP_PREFIX) == false) {\n      property = OverseerCollectionProcessor.COLL_PROP_PREFIX + property;\n    }\n\n    boolean uniquePerSlice = Boolean.parseBoolean((String) map.get(SLICE_UNIQUE));\n\n    // Check if we're trying to set a property with parameters that allow us to set the property on multiple replicas\n    // in a slice on properties that are known to only be one-per-slice and error out if so.\n    if (StringUtils.isNotBlank((String)map.get(SLICE_UNIQUE)) &&\n        Overseer.sliceUniqueBooleanProperties.contains(property.toLowerCase(Locale.ROOT)) &&\n        uniquePerSlice == false) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Overseer replica property command received for property \" + property +\n              \" with the \" + SLICE_UNIQUE +\n              \" parameter set to something other than 'true'. No action taken.\");\n    }\n    handleResponse(ADDREPLICAPROP.toLower(), new ZkNodeProps(map), rsp);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"24a5da2a0d397ff29f3de8f6cf451d3412c2509a","date":1417276391,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleAddReplicaProp(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleAddReplicaProp(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  private void handleAddReplicaProp(SolrQueryRequest req, SolrQueryResponse rsp) throws KeeperException, InterruptedException {\n    req.getParams().required().check(COLLECTION_PROP, PROPERTY_PROP, SHARD_ID_PROP, REPLICA_PROP, PROPERTY_VALUE_PROP);\n\n\n    Map<String, Object> map = ZkNodeProps.makeMap(Overseer.QUEUE_OPERATION, ADDREPLICAPROP.toLower());\n    copyIfNotNull(req.getParams(), map, COLLECTION_PROP, SHARD_ID_PROP, REPLICA_PROP, PROPERTY_PROP,\n        SHARD_UNIQUE, PROPERTY_VALUE_PROP);\n\n    String property = (String) map.get(PROPERTY_PROP);\n    if (property.startsWith(OverseerCollectionProcessor.COLL_PROP_PREFIX) == false) {\n      property = OverseerCollectionProcessor.COLL_PROP_PREFIX + property;\n    }\n\n    boolean uniquePerSlice = Boolean.parseBoolean((String) map.get(SHARD_UNIQUE));\n\n    // Check if we're trying to set a property with parameters that allow us to set the property on multiple replicas\n    // in a slice on properties that are known to only be one-per-slice and error out if so.\n    if (StringUtils.isNotBlank((String)map.get(SHARD_UNIQUE)) &&\n        SliceMutator.SLICE_UNIQUE_BOOLEAN_PROPERTIES.contains(property.toLowerCase(Locale.ROOT)) &&\n        uniquePerSlice == false) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Overseer replica property command received for property \" + property +\n              \" with the \" + SHARD_UNIQUE +\n              \" parameter set to something other than 'true'. No action taken.\");\n    }\n    handleResponse(ADDREPLICAPROP.toLower(), new ZkNodeProps(map), rsp);\n  }\n\n","sourceOld":"  private void handleAddReplicaProp(SolrQueryRequest req, SolrQueryResponse rsp) throws KeeperException, InterruptedException {\n    req.getParams().required().check(COLLECTION_PROP, PROPERTY_PROP, SHARD_ID_PROP, REPLICA_PROP, PROPERTY_VALUE_PROP);\n\n\n    Map<String, Object> map = ZkNodeProps.makeMap(Overseer.QUEUE_OPERATION, ADDREPLICAPROP.toLower());\n    copyIfNotNull(req.getParams(), map, COLLECTION_PROP, SHARD_ID_PROP, REPLICA_PROP, PROPERTY_PROP,\n        SHARD_UNIQUE, PROPERTY_VALUE_PROP);\n\n    String property = (String) map.get(PROPERTY_PROP);\n    if (property.startsWith(OverseerCollectionProcessor.COLL_PROP_PREFIX) == false) {\n      property = OverseerCollectionProcessor.COLL_PROP_PREFIX + property;\n    }\n\n    boolean uniquePerSlice = Boolean.parseBoolean((String) map.get(SHARD_UNIQUE));\n\n    // Check if we're trying to set a property with parameters that allow us to set the property on multiple replicas\n    // in a slice on properties that are known to only be one-per-slice and error out if so.\n    if (StringUtils.isNotBlank((String)map.get(SHARD_UNIQUE)) &&\n        Overseer.sliceUniqueBooleanProperties.contains(property.toLowerCase(Locale.ROOT)) &&\n        uniquePerSlice == false) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Overseer replica property command received for property \" + property +\n              \" with the \" + SHARD_UNIQUE +\n              \" parameter set to something other than 'true'. No action taken.\");\n    }\n    handleResponse(ADDREPLICAPROP.toLower(), new ZkNodeProps(map), rsp);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ebd3a557326ef3eab85b73a8cff781f7d801248","date":1431620752,"type":4,"author":"Noble Paul","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleAddReplicaProp(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":null,"sourceOld":"  private void handleAddReplicaProp(SolrQueryRequest req, SolrQueryResponse rsp) throws KeeperException, InterruptedException {\n    req.getParams().required().check(COLLECTION_PROP, PROPERTY_PROP, SHARD_ID_PROP, REPLICA_PROP, PROPERTY_VALUE_PROP);\n\n\n    Map<String, Object> map = ZkNodeProps.makeMap(Overseer.QUEUE_OPERATION, ADDREPLICAPROP.toLower());\n    copyIfNotNull(req.getParams(), map, COLLECTION_PROP, SHARD_ID_PROP, REPLICA_PROP, PROPERTY_PROP,\n        SHARD_UNIQUE, PROPERTY_VALUE_PROP);\n\n    String property = (String) map.get(PROPERTY_PROP);\n    if (property.startsWith(OverseerCollectionProcessor.COLL_PROP_PREFIX) == false) {\n      property = OverseerCollectionProcessor.COLL_PROP_PREFIX + property;\n    }\n\n    boolean uniquePerSlice = Boolean.parseBoolean((String) map.get(SHARD_UNIQUE));\n\n    // Check if we're trying to set a property with parameters that allow us to set the property on multiple replicas\n    // in a slice on properties that are known to only be one-per-slice and error out if so.\n    if (StringUtils.isNotBlank((String)map.get(SHARD_UNIQUE)) &&\n        SliceMutator.SLICE_UNIQUE_BOOLEAN_PROPERTIES.contains(property.toLowerCase(Locale.ROOT)) &&\n        uniquePerSlice == false) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Overseer replica property command received for property \" + property +\n              \" with the \" + SHARD_UNIQUE +\n              \" parameter set to something other than 'true'. No action taken.\");\n    }\n    handleResponse(ADDREPLICAPROP.toLower(), new ZkNodeProps(map), rsp);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"24a5da2a0d397ff29f3de8f6cf451d3412c2509a":["cfb61c9baefa8681e40fca3c803f61bf485a9d8d"],"cfb61c9baefa8681e40fca3c803f61bf485a9d8d":["57517fbf5120ed94888bc0bfb86f9a81094059cf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d9a47902d6207303f5ed3e7aaca62ca33433af66":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","57517fbf5120ed94888bc0bfb86f9a81094059cf"],"9ebd3a557326ef3eab85b73a8cff781f7d801248":["24a5da2a0d397ff29f3de8f6cf451d3412c2509a"],"dc2bafa00000be70227a04c29e3f885ff41e531d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"57517fbf5120ed94888bc0bfb86f9a81094059cf":["dc2bafa00000be70227a04c29e3f885ff41e531d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ebd3a557326ef3eab85b73a8cff781f7d801248"]},"commit2Childs":{"24a5da2a0d397ff29f3de8f6cf451d3412c2509a":["9ebd3a557326ef3eab85b73a8cff781f7d801248"],"cfb61c9baefa8681e40fca3c803f61bf485a9d8d":["24a5da2a0d397ff29f3de8f6cf451d3412c2509a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d9a47902d6207303f5ed3e7aaca62ca33433af66","dc2bafa00000be70227a04c29e3f885ff41e531d"],"d9a47902d6207303f5ed3e7aaca62ca33433af66":[],"9ebd3a557326ef3eab85b73a8cff781f7d801248":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"dc2bafa00000be70227a04c29e3f885ff41e531d":["57517fbf5120ed94888bc0bfb86f9a81094059cf"],"57517fbf5120ed94888bc0bfb86f9a81094059cf":["cfb61c9baefa8681e40fca3c803f61bf485a9d8d","d9a47902d6207303f5ed3e7aaca62ca33433af66"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d9a47902d6207303f5ed3e7aaca62ca33433af66","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}