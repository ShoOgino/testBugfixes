{"path":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestDoubleFloatRangeLimits(String,boolean).mjava","commits":[{"id":"dfa8ee8a03218e801f864cf0ef8171a2fdd06f35","date":1501089160,"type":0,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestDoubleFloatRangeLimits(String,boolean).mjava","pathOld":"/dev/null","sourceNew":"  private void doTestDoubleFloatRangeLimits(String fieldName, boolean testDouble) {\n    // POSITIVE/NEGATIVE_INFINITY toString is the same for Double and Float, it's OK to use this code for both cases\n    String positiveInfinity = String.valueOf(Double.POSITIVE_INFINITY);\n    String negativeInfinity = String.valueOf(Double.NEGATIVE_INFINITY);\n    String minVal = String.valueOf(testDouble?Double.MIN_VALUE:Float.MIN_VALUE);\n    String maxVal = String.valueOf(testDouble?Double.MAX_VALUE:Float.MAX_VALUE);\n    String negativeMinVal = \"-\" + minVal;\n    String negativeMaxVal =  \"-\" + maxVal;\n    clearIndex();\n    assertU(adoc(\"id\", \"1\", fieldName, minVal));\n    assertU(adoc(\"id\", \"2\", fieldName, maxVal));\n    assertU(adoc(\"id\", \"3\", fieldName, negativeInfinity));\n    assertU(adoc(\"id\", \"4\", fieldName, positiveInfinity));\n    assertU(adoc(\"id\", \"5\", fieldName, negativeMinVal));\n    assertU(adoc(\"id\", \"6\", fieldName, negativeMaxVal));\n    assertU(commit());\n    //negative to negative\n    assertAllInclusiveExclusiveVariations(fieldName, \"*\", \"-1\", 2, 2, 2, 2);\n    assertAllInclusiveExclusiveVariations(fieldName, negativeInfinity, \"-1\", 1, 2, 1, 2);\n    assertAllInclusiveExclusiveVariations(fieldName, negativeMaxVal, negativeMinVal, 0, 1, 1, 2);\n    //negative to cero\n    assertAllInclusiveExclusiveVariations(fieldName, \"*\", \"-0.0f\", 3, 3, 3, 3);\n    assertAllInclusiveExclusiveVariations(fieldName, negativeInfinity, \"-0.0f\", 2, 3, 2, 3);\n    assertAllInclusiveExclusiveVariations(fieldName, negativeMinVal, \"-0.0f\", 0, 1, 0, 1);\n    \n    assertAllInclusiveExclusiveVariations(fieldName, \"*\", \"0\", 3, 3, 3, 3);\n    assertAllInclusiveExclusiveVariations(fieldName, negativeInfinity, \"0\", 2, 3, 2, 3);\n    assertAllInclusiveExclusiveVariations(fieldName, negativeMinVal, \"0\", 0, 1, 0, 1);\n    //negative to positive\n    assertAllInclusiveExclusiveVariations(fieldName, \"*\", \"1\", 4, 4, 4, 4);\n    assertAllInclusiveExclusiveVariations(fieldName, \"-1\", \"*\", 4, 4, 4, 4);\n    assertAllInclusiveExclusiveVariations(fieldName, \"-1\", \"1\", 2, 2, 2, 2);\n    assertAllInclusiveExclusiveVariations(fieldName, \"*\", \"*\", 6, 6, 6, 6);\n    \n    assertAllInclusiveExclusiveVariations(fieldName, \"-1\", positiveInfinity, 3, 3, 4, 4);\n    assertAllInclusiveExclusiveVariations(fieldName, negativeInfinity, \"1\", 3, 4, 3, 4);\n    assertAllInclusiveExclusiveVariations(fieldName, negativeInfinity, positiveInfinity, 4, 5, 5, 6);\n    \n    assertAllInclusiveExclusiveVariations(fieldName, negativeMinVal, minVal, 0, 1, 1, 2);\n    assertAllInclusiveExclusiveVariations(fieldName, negativeMaxVal, maxVal, 2, 3, 3, 4);\n    //cero to positive\n    assertAllInclusiveExclusiveVariations(fieldName, \"-0.0f\", \"*\", 3, 3, 3, 3);\n    assertAllInclusiveExclusiveVariations(fieldName, \"-0.0f\", positiveInfinity, 2, 2, 3, 3);\n    assertAllInclusiveExclusiveVariations(fieldName, \"-0.0f\", minVal, 0, 0, 1, 1);\n    \n    assertAllInclusiveExclusiveVariations(fieldName, \"0\", \"*\", 3, 3, 3, 3);\n    assertAllInclusiveExclusiveVariations(fieldName, \"0\", positiveInfinity, 2, 2, 3, 3);\n    assertAllInclusiveExclusiveVariations(fieldName, \"0\", minVal, 0, 0, 1, 1);\n    //positive to positive\n    assertAllInclusiveExclusiveVariations(fieldName, \"1\", \"*\", 2, 2, 2, 2);\n    assertAllInclusiveExclusiveVariations(fieldName, \"1\", positiveInfinity, 1, 1, 2, 2);\n    assertAllInclusiveExclusiveVariations(fieldName, minVal, maxVal, 0, 1, 1, 2);\n    \n    // inverted limits\n    assertAllInclusiveExclusiveVariations(fieldName, \"1\", \"-1\", 0, 0, 0, 0);\n    assertAllInclusiveExclusiveVariations(fieldName, positiveInfinity, negativeInfinity, 0, 0, 0, 0);\n    assertAllInclusiveExclusiveVariations(fieldName, minVal, negativeMinVal, 0, 0, 0, 0);\n    \n    // MatchNoDocs cases\n    assertAllInclusiveExclusiveVariations(fieldName, negativeInfinity, negativeInfinity, 0, 0, 0, 1);\n    assertAllInclusiveExclusiveVariations(fieldName, positiveInfinity, positiveInfinity, 0, 0, 0, 1);\n    \n    clearIndex();\n    assertU(adoc(\"id\", \"1\", fieldName, \"0.0\"));\n    assertU(adoc(\"id\", \"2\", fieldName, \"-0.0\"));\n    assertU(commit());\n    assertAllInclusiveExclusiveVariations(fieldName, \"*\", \"*\", 2, 2, 2, 2);\n    assertAllInclusiveExclusiveVariations(fieldName, \"*\", \"0\", 1, 1, 2, 2);\n    assertAllInclusiveExclusiveVariations(fieldName, \"0\", \"*\", 0, 1, 0, 1);\n    assertAllInclusiveExclusiveVariations(fieldName, \"*\", \"-0.0f\", 0, 0, 1, 1);\n    assertAllInclusiveExclusiveVariations(fieldName, \"-0.0f\", \"*\", 1, 2, 1, 2);\n    assertAllInclusiveExclusiveVariations(fieldName, \"-0.0f\", \"0\", 0, 1, 1, 2);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","date":1502192746,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestDoubleFloatRangeLimits(String,boolean).mjava","pathOld":"/dev/null","sourceNew":"  private void doTestDoubleFloatRangeLimits(String fieldName, boolean testDouble) {\n    // POSITIVE/NEGATIVE_INFINITY toString is the same for Double and Float, it's OK to use this code for both cases\n    String positiveInfinity = String.valueOf(Double.POSITIVE_INFINITY);\n    String negativeInfinity = String.valueOf(Double.NEGATIVE_INFINITY);\n    String minVal = String.valueOf(testDouble?Double.MIN_VALUE:Float.MIN_VALUE);\n    String maxVal = String.valueOf(testDouble?Double.MAX_VALUE:Float.MAX_VALUE);\n    String negativeMinVal = \"-\" + minVal;\n    String negativeMaxVal =  \"-\" + maxVal;\n    clearIndex();\n    assertU(adoc(\"id\", \"1\", fieldName, minVal));\n    assertU(adoc(\"id\", \"2\", fieldName, maxVal));\n    assertU(adoc(\"id\", \"3\", fieldName, negativeInfinity));\n    assertU(adoc(\"id\", \"4\", fieldName, positiveInfinity));\n    assertU(adoc(\"id\", \"5\", fieldName, negativeMinVal));\n    assertU(adoc(\"id\", \"6\", fieldName, negativeMaxVal));\n    assertU(commit());\n    //negative to negative\n    assertAllInclusiveExclusiveVariations(fieldName, \"*\", \"-1\", 2, 2, 2, 2);\n    assertAllInclusiveExclusiveVariations(fieldName, negativeInfinity, \"-1\", 1, 2, 1, 2);\n    assertAllInclusiveExclusiveVariations(fieldName, negativeMaxVal, negativeMinVal, 0, 1, 1, 2);\n    //negative to cero\n    assertAllInclusiveExclusiveVariations(fieldName, \"*\", \"-0.0f\", 3, 3, 3, 3);\n    assertAllInclusiveExclusiveVariations(fieldName, negativeInfinity, \"-0.0f\", 2, 3, 2, 3);\n    assertAllInclusiveExclusiveVariations(fieldName, negativeMinVal, \"-0.0f\", 0, 1, 0, 1);\n    \n    assertAllInclusiveExclusiveVariations(fieldName, \"*\", \"0\", 3, 3, 3, 3);\n    assertAllInclusiveExclusiveVariations(fieldName, negativeInfinity, \"0\", 2, 3, 2, 3);\n    assertAllInclusiveExclusiveVariations(fieldName, negativeMinVal, \"0\", 0, 1, 0, 1);\n    //negative to positive\n    assertAllInclusiveExclusiveVariations(fieldName, \"*\", \"1\", 4, 4, 4, 4);\n    assertAllInclusiveExclusiveVariations(fieldName, \"-1\", \"*\", 4, 4, 4, 4);\n    assertAllInclusiveExclusiveVariations(fieldName, \"-1\", \"1\", 2, 2, 2, 2);\n    assertAllInclusiveExclusiveVariations(fieldName, \"*\", \"*\", 6, 6, 6, 6);\n    \n    assertAllInclusiveExclusiveVariations(fieldName, \"-1\", positiveInfinity, 3, 3, 4, 4);\n    assertAllInclusiveExclusiveVariations(fieldName, negativeInfinity, \"1\", 3, 4, 3, 4);\n    assertAllInclusiveExclusiveVariations(fieldName, negativeInfinity, positiveInfinity, 4, 5, 5, 6);\n    \n    assertAllInclusiveExclusiveVariations(fieldName, negativeMinVal, minVal, 0, 1, 1, 2);\n    assertAllInclusiveExclusiveVariations(fieldName, negativeMaxVal, maxVal, 2, 3, 3, 4);\n    //cero to positive\n    assertAllInclusiveExclusiveVariations(fieldName, \"-0.0f\", \"*\", 3, 3, 3, 3);\n    assertAllInclusiveExclusiveVariations(fieldName, \"-0.0f\", positiveInfinity, 2, 2, 3, 3);\n    assertAllInclusiveExclusiveVariations(fieldName, \"-0.0f\", minVal, 0, 0, 1, 1);\n    \n    assertAllInclusiveExclusiveVariations(fieldName, \"0\", \"*\", 3, 3, 3, 3);\n    assertAllInclusiveExclusiveVariations(fieldName, \"0\", positiveInfinity, 2, 2, 3, 3);\n    assertAllInclusiveExclusiveVariations(fieldName, \"0\", minVal, 0, 0, 1, 1);\n    //positive to positive\n    assertAllInclusiveExclusiveVariations(fieldName, \"1\", \"*\", 2, 2, 2, 2);\n    assertAllInclusiveExclusiveVariations(fieldName, \"1\", positiveInfinity, 1, 1, 2, 2);\n    assertAllInclusiveExclusiveVariations(fieldName, minVal, maxVal, 0, 1, 1, 2);\n    \n    // inverted limits\n    assertAllInclusiveExclusiveVariations(fieldName, \"1\", \"-1\", 0, 0, 0, 0);\n    assertAllInclusiveExclusiveVariations(fieldName, positiveInfinity, negativeInfinity, 0, 0, 0, 0);\n    assertAllInclusiveExclusiveVariations(fieldName, minVal, negativeMinVal, 0, 0, 0, 0);\n    \n    // MatchNoDocs cases\n    assertAllInclusiveExclusiveVariations(fieldName, negativeInfinity, negativeInfinity, 0, 0, 0, 1);\n    assertAllInclusiveExclusiveVariations(fieldName, positiveInfinity, positiveInfinity, 0, 0, 0, 1);\n    \n    clearIndex();\n    assertU(adoc(\"id\", \"1\", fieldName, \"0.0\"));\n    assertU(adoc(\"id\", \"2\", fieldName, \"-0.0\"));\n    assertU(commit());\n    assertAllInclusiveExclusiveVariations(fieldName, \"*\", \"*\", 2, 2, 2, 2);\n    assertAllInclusiveExclusiveVariations(fieldName, \"*\", \"0\", 1, 1, 2, 2);\n    assertAllInclusiveExclusiveVariations(fieldName, \"0\", \"*\", 0, 1, 0, 1);\n    assertAllInclusiveExclusiveVariations(fieldName, \"*\", \"-0.0f\", 0, 0, 1, 1);\n    assertAllInclusiveExclusiveVariations(fieldName, \"-0.0f\", \"*\", 1, 2, 1, 2);\n    assertAllInclusiveExclusiveVariations(fieldName, \"-0.0f\", \"0\", 0, 1, 1, 2);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","dfa8ee8a03218e801f864cf0ef8171a2fdd06f35"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"dfa8ee8a03218e801f864cf0ef8171a2fdd06f35":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["dfa8ee8a03218e801f864cf0ef8171a2fdd06f35"]},"commit2Childs":{"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","dfa8ee8a03218e801f864cf0ef8171a2fdd06f35"],"dfa8ee8a03218e801f864cf0ef8171a2fdd06f35":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}