{"path":"lucene/facet/src/java/org/apache/lucene/facet/search/AdaptiveFacetsAccumulator#appropriateFacetCountingAccumulator(ScoredDocIDs).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/AdaptiveFacetsAccumulator#appropriateFacetCountingAccumulator(ScoredDocIDs).mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/search/AdaptiveFacetsAccumulator#appropriateFacetCountingAccumulator(ScoredDocIDs).mjava","sourceNew":"  /**\n   * Compute the appropriate facet accumulator to use.\n   * If no special/clever adaptation is possible/needed return this (self).\n   */\n  private FacetsAccumulator appropriateFacetCountingAccumulator(ScoredDocIDs docids) {\n    // Verify that searchPareams permit sampling/complement/etc... otherwise do default\n    if (!mayComplement()) {\n      return this;\n    }\n    \n    // Now we're sure we can use the sampling methods as we're in a counting only mode\n    \n    // Verify that sampling is enabled and required ... otherwise do default\n    if (sampler == null || !sampler.shouldSample(docids)) {\n      return this;\n    }\n    \n    SamplingAccumulator samplingAccumulator = new SamplingAccumulator(sampler, searchParams, indexReader, taxonomyReader);\n    samplingAccumulator.setComplementThreshold(getComplementThreshold());\n    return samplingAccumulator;\n  }\n\n","sourceOld":"  /**\n   * Compute the appropriate facet accumulator to use.\n   * If no special/clever adaptation is possible/needed return this (self).\n   */\n  private FacetsAccumulator appropriateFacetCountingAccumulator(ScoredDocIDs docids) {\n    // Verify that searchPareams permit sampling/complement/etc... otherwise do default\n    if (!mayComplement()) {\n      return this;\n    }\n    \n    // Now we're sure we can use the sampling methods as we're in a counting only mode\n    \n    // Verify that sampling is enabled and required ... otherwise do default\n    if (sampler == null || !sampler.shouldSample(docids)) {\n      return this;\n    }\n    \n    SamplingAccumulator samplingAccumulator = new SamplingAccumulator(sampler, searchParams, indexReader, taxonomyReader);\n    samplingAccumulator.setComplementThreshold(getComplementThreshold());\n    return samplingAccumulator;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"571abba77e55fea386a38c0024f72ffa5b37a9ad","date":1360272747,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/AdaptiveFacetsAccumulator#appropriateFacetCountingAccumulator(ScoredDocIDs).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/AdaptiveFacetsAccumulator#appropriateFacetCountingAccumulator(ScoredDocIDs).mjava","sourceNew":"  /**\n   * Compute the appropriate facet accumulator to use.\n   * If no special/clever adaptation is possible/needed return this (self).\n   */\n  private StandardFacetsAccumulator appropriateFacetCountingAccumulator(ScoredDocIDs docids) {\n    // Verify that searchPareams permit sampling/complement/etc... otherwise do default\n    if (!mayComplement()) {\n      return this;\n    }\n    \n    // Now we're sure we can use the sampling methods as we're in a counting only mode\n    \n    // Verify that sampling is enabled and required ... otherwise do default\n    if (sampler == null || !sampler.shouldSample(docids)) {\n      return this;\n    }\n    \n    SamplingAccumulator samplingAccumulator = new SamplingAccumulator(sampler, searchParams, indexReader, taxonomyReader);\n    samplingAccumulator.setComplementThreshold(getComplementThreshold());\n    return samplingAccumulator;\n  }\n\n","sourceOld":"  /**\n   * Compute the appropriate facet accumulator to use.\n   * If no special/clever adaptation is possible/needed return this (self).\n   */\n  private FacetsAccumulator appropriateFacetCountingAccumulator(ScoredDocIDs docids) {\n    // Verify that searchPareams permit sampling/complement/etc... otherwise do default\n    if (!mayComplement()) {\n      return this;\n    }\n    \n    // Now we're sure we can use the sampling methods as we're in a counting only mode\n    \n    // Verify that sampling is enabled and required ... otherwise do default\n    if (sampler == null || !sampler.shouldSample(docids)) {\n      return this;\n    }\n    \n    SamplingAccumulator samplingAccumulator = new SamplingAccumulator(sampler, searchParams, indexReader, taxonomyReader);\n    samplingAccumulator.setComplementThreshold(getComplementThreshold());\n    return samplingAccumulator;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d9b07d1cdffdee4f4bb3cef8670f6066cf6f64e6","date":1375108983,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/old/AdaptiveFacetsAccumulator#appropriateFacetCountingAccumulator(ScoredDocIDs).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/AdaptiveFacetsAccumulator#appropriateFacetCountingAccumulator(ScoredDocIDs).mjava","sourceNew":"  /**\n   * Compute the appropriate facet accumulator to use.\n   * If no special/clever adaptation is possible/needed return this (self).\n   */\n  private OldFacetsAccumulator appropriateFacetCountingAccumulator(ScoredDocIDs docids) {\n    // Verify that searchPareams permit sampling/complement/etc... otherwise do default\n    if (!mayComplement()) {\n      return this;\n    }\n    \n    // Now we're sure we can use the sampling methods as we're in a counting only mode\n    \n    // Verify that sampling is enabled and required ... otherwise do default\n    if (sampler == null || !sampler.shouldSample(docids)) {\n      return this;\n    }\n    \n    SamplingAccumulator samplingAccumulator = new SamplingAccumulator(sampler, searchParams, indexReader, taxonomyReader);\n    samplingAccumulator.setComplementThreshold(getComplementThreshold());\n    return samplingAccumulator;\n  }\n\n","sourceOld":"  /**\n   * Compute the appropriate facet accumulator to use.\n   * If no special/clever adaptation is possible/needed return this (self).\n   */\n  private StandardFacetsAccumulator appropriateFacetCountingAccumulator(ScoredDocIDs docids) {\n    // Verify that searchPareams permit sampling/complement/etc... otherwise do default\n    if (!mayComplement()) {\n      return this;\n    }\n    \n    // Now we're sure we can use the sampling methods as we're in a counting only mode\n    \n    // Verify that sampling is enabled and required ... otherwise do default\n    if (sampler == null || !sampler.shouldSample(docids)) {\n      return this;\n    }\n    \n    SamplingAccumulator samplingAccumulator = new SamplingAccumulator(sampler, searchParams, indexReader, taxonomyReader);\n    samplingAccumulator.setComplementThreshold(getComplementThreshold());\n    return samplingAccumulator;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":5,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/old/AdaptiveFacetsAccumulator#appropriateFacetCountingAccumulator(ScoredDocIDs).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/AdaptiveFacetsAccumulator#appropriateFacetCountingAccumulator(ScoredDocIDs).mjava","sourceNew":"  /**\n   * Compute the appropriate facet accumulator to use.\n   * If no special/clever adaptation is possible/needed return this (self).\n   */\n  private OldFacetsAccumulator appropriateFacetCountingAccumulator(ScoredDocIDs docids) {\n    // Verify that searchPareams permit sampling/complement/etc... otherwise do default\n    if (!mayComplement()) {\n      return this;\n    }\n    \n    // Now we're sure we can use the sampling methods as we're in a counting only mode\n    \n    // Verify that sampling is enabled and required ... otherwise do default\n    if (sampler == null || !sampler.shouldSample(docids)) {\n      return this;\n    }\n    \n    SamplingAccumulator samplingAccumulator = new SamplingAccumulator(sampler, searchParams, indexReader, taxonomyReader);\n    samplingAccumulator.setComplementThreshold(getComplementThreshold());\n    return samplingAccumulator;\n  }\n\n","sourceOld":"  /**\n   * Compute the appropriate facet accumulator to use.\n   * If no special/clever adaptation is possible/needed return this (self).\n   */\n  private StandardFacetsAccumulator appropriateFacetCountingAccumulator(ScoredDocIDs docids) {\n    // Verify that searchPareams permit sampling/complement/etc... otherwise do default\n    if (!mayComplement()) {\n      return this;\n    }\n    \n    // Now we're sure we can use the sampling methods as we're in a counting only mode\n    \n    // Verify that sampling is enabled and required ... otherwise do default\n    if (sampler == null || !sampler.shouldSample(docids)) {\n      return this;\n    }\n    \n    SamplingAccumulator samplingAccumulator = new SamplingAccumulator(sampler, searchParams, indexReader, taxonomyReader);\n    samplingAccumulator.setComplementThreshold(getComplementThreshold());\n    return samplingAccumulator;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d9b07d1cdffdee4f4bb3cef8670f6066cf6f64e6":["571abba77e55fea386a38c0024f72ffa5b37a9ad"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["571abba77e55fea386a38c0024f72ffa5b37a9ad"],"571abba77e55fea386a38c0024f72ffa5b37a9ad":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d9b07d1cdffdee4f4bb3cef8670f6066cf6f64e6"]},"commit2Childs":{"d9b07d1cdffdee4f4bb3cef8670f6066cf6f64e6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["571abba77e55fea386a38c0024f72ffa5b37a9ad"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"571abba77e55fea386a38c0024f72ffa5b37a9ad":["d9b07d1cdffdee4f4bb3cef8670f6066cf6f64e6","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}