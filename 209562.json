{"path":"solr/core/src/java/org/apache/solr/core/ZkContainer#createFromZk(String,CoreDescriptor,SolrResourceLoader).mjava","commits":[{"id":"b29abed5661c7911e4b45d5a3d79a186268e28c4","date":1366675770,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/ZkContainer#createFromZk(String,CoreDescriptor,SolrResourceLoader).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#createFromZk(String,CoreDescriptor).mjava","sourceNew":"  // Helper method to separate out creating a core from ZK as opposed to the\n  // \"usual\" way. See create()\n  SolrCore createFromZk(String instanceDir, CoreDescriptor dcore, SolrResourceLoader loader) {\n    try {\n      SolrResourceLoader solrLoader = null;\n      SolrConfig config = null;\n      String zkConfigName = null;\n      IndexSchema schema;\n      String collection = dcore.getCloudDescriptor().getCollectionName();\n      zkController.createCollectionZkNode(dcore.getCloudDescriptor());\n      \n      zkConfigName = zkController.readConfigName(collection);\n      if (zkConfigName == null) {\n        log.error(\"Could not find config name for collection:\" + collection);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Could not find config name for collection:\" + collection);\n      }\n      solrLoader = new ZkSolrResourceLoader(instanceDir, zkConfigName,\n          loader.getClassLoader(), ConfigSolrXml.getCoreProperties(instanceDir,\n              dcore), zkController);\n      config = getSolrConfigFromZk(zkConfigName, dcore.getConfigName(),\n          solrLoader);\n      schema = IndexSchemaFactory.buildIndexSchema(dcore.getSchemaName(),\n          config);\n      return new SolrCore(dcore.getName(), null, config, schema, dcore);\n      \n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n  }\n\n","sourceOld":"  // Helper method to separate out creating a core from ZK as opposed to the \"usual\" way. See create()\n  private SolrCore createFromZk(String instanceDir, CoreDescriptor dcore)\n  {\n    try {\n      SolrResourceLoader solrLoader = null;\n      SolrConfig config = null;\n      String zkConfigName = null;\n      IndexSchema schema;\n      String collection = dcore.getCloudDescriptor().getCollectionName();\n      zkController.createCollectionZkNode(dcore.getCloudDescriptor());\n\n      zkConfigName = zkController.readConfigName(collection);\n      if (zkConfigName == null) {\n        log.error(\"Could not find config name for collection:\" + collection);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Could not find config name for collection:\" + collection);\n      }\n      solrLoader = new ZkSolrResourceLoader(instanceDir, zkConfigName, loader.getClassLoader(),\n          ConfigSolrXml.getCoreProperties(instanceDir, dcore), zkController);\n      config = getSolrConfigFromZk(zkConfigName, dcore.getConfigName(), solrLoader);\n      schema = IndexSchemaFactory.buildIndexSchema(dcore.getSchemaName(), config);\n      return new SolrCore(dcore.getName(), null, config, schema, dcore);\n\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6e764e9a107f93be9fa3c922bc6a197b3eec387e","date":1373560501,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/ZkContainer#createFromZk(String,CoreDescriptor,SolrResourceLoader).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/ZkContainer#createFromZk(String,CoreDescriptor,SolrResourceLoader).mjava","sourceNew":"  // Helper method to separate out creating a core from ZK as opposed to the\n  // \"usual\" way. See create()\n  SolrCore createFromZk(String instanceDir, CoreDescriptor dcore, SolrResourceLoader loader) {\n    try {\n      SolrResourceLoader solrLoader = null;\n      SolrConfig config = null;\n      String zkConfigName = null;\n      IndexSchema schema;\n      String collection = dcore.getCloudDescriptor().getCollectionName();\n      zkController.createCollectionZkNode(dcore.getCloudDescriptor());\n      \n      zkConfigName = zkController.readConfigName(collection);\n      if (zkConfigName == null) {\n        log.error(\"Could not find config name for collection:\" + collection);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Could not find config name for collection:\" + collection);\n      }\n      solrLoader = new ZkSolrResourceLoader(instanceDir, zkConfigName,\n          loader.getClassLoader(), dcore.getCoreProperties(), zkController);\n      config = getSolrConfigFromZk(zkConfigName, dcore.getConfigName(),\n          solrLoader);\n      schema = IndexSchemaFactory.buildIndexSchema(dcore.getSchemaName(),\n          config);\n      return new SolrCore(dcore.getName(), null, config, schema, dcore);\n      \n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n  }\n\n","sourceOld":"  // Helper method to separate out creating a core from ZK as opposed to the\n  // \"usual\" way. See create()\n  SolrCore createFromZk(String instanceDir, CoreDescriptor dcore, SolrResourceLoader loader) {\n    try {\n      SolrResourceLoader solrLoader = null;\n      SolrConfig config = null;\n      String zkConfigName = null;\n      IndexSchema schema;\n      String collection = dcore.getCloudDescriptor().getCollectionName();\n      zkController.createCollectionZkNode(dcore.getCloudDescriptor());\n      \n      zkConfigName = zkController.readConfigName(collection);\n      if (zkConfigName == null) {\n        log.error(\"Could not find config name for collection:\" + collection);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Could not find config name for collection:\" + collection);\n      }\n      solrLoader = new ZkSolrResourceLoader(instanceDir, zkConfigName,\n          loader.getClassLoader(), ConfigSolrXml.getCoreProperties(instanceDir,\n              dcore), zkController);\n      config = getSolrConfigFromZk(zkConfigName, dcore.getConfigName(),\n          solrLoader);\n      schema = IndexSchemaFactory.buildIndexSchema(dcore.getSchemaName(),\n          config);\n      return new SolrCore(dcore.getName(), null, config, schema, dcore);\n      \n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/ZkContainer#createFromZk(String,CoreDescriptor,SolrResourceLoader).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/ZkContainer#createFromZk(String,CoreDescriptor,SolrResourceLoader).mjava","sourceNew":"  // Helper method to separate out creating a core from ZK as opposed to the\n  // \"usual\" way. See create()\n  SolrCore createFromZk(String instanceDir, CoreDescriptor dcore, SolrResourceLoader loader) {\n    try {\n      SolrResourceLoader solrLoader = null;\n      SolrConfig config = null;\n      String zkConfigName = null;\n      IndexSchema schema;\n      String collection = dcore.getCloudDescriptor().getCollectionName();\n      zkController.createCollectionZkNode(dcore.getCloudDescriptor());\n      \n      zkConfigName = zkController.readConfigName(collection);\n      if (zkConfigName == null) {\n        log.error(\"Could not find config name for collection:\" + collection);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Could not find config name for collection:\" + collection);\n      }\n      solrLoader = new ZkSolrResourceLoader(instanceDir, zkConfigName,\n          loader.getClassLoader(), dcore.getCoreProperties(), zkController);\n      config = getSolrConfigFromZk(zkConfigName, dcore.getConfigName(),\n          solrLoader);\n      schema = IndexSchemaFactory.buildIndexSchema(dcore.getSchemaName(),\n          config);\n      return new SolrCore(dcore.getName(), null, config, schema, dcore);\n      \n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n  }\n\n","sourceOld":"  // Helper method to separate out creating a core from ZK as opposed to the\n  // \"usual\" way. See create()\n  SolrCore createFromZk(String instanceDir, CoreDescriptor dcore, SolrResourceLoader loader) {\n    try {\n      SolrResourceLoader solrLoader = null;\n      SolrConfig config = null;\n      String zkConfigName = null;\n      IndexSchema schema;\n      String collection = dcore.getCloudDescriptor().getCollectionName();\n      zkController.createCollectionZkNode(dcore.getCloudDescriptor());\n      \n      zkConfigName = zkController.readConfigName(collection);\n      if (zkConfigName == null) {\n        log.error(\"Could not find config name for collection:\" + collection);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Could not find config name for collection:\" + collection);\n      }\n      solrLoader = new ZkSolrResourceLoader(instanceDir, zkConfigName,\n          loader.getClassLoader(), ConfigSolrXml.getCoreProperties(instanceDir,\n              dcore), zkController);\n      config = getSolrConfigFromZk(zkConfigName, dcore.getConfigName(),\n          solrLoader);\n      schema = IndexSchemaFactory.buildIndexSchema(dcore.getSchemaName(),\n          config);\n      return new SolrCore(dcore.getName(), null, config, schema, dcore);\n      \n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e9769bcabf28416689da7ec56a0c799b2a66b87","date":1376765390,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/ZkContainer#createFromZk(String,CoreDescriptor,SolrResourceLoader).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/ZkContainer#createFromZk(String,CoreDescriptor,SolrResourceLoader).mjava","sourceNew":"  // Helper method to separate out creating a core from ZK as opposed to the\n  // \"usual\" way. See create()\n  SolrCore createFromZk(String instanceDir, CoreDescriptor dcore, SolrResourceLoader loader) {\n    try {\n      SolrResourceLoader solrLoader = null;\n      SolrConfig config = null;\n      String zkConfigName = null;\n      IndexSchema schema;\n      String collection = dcore.getCloudDescriptor().getCollectionName();\n      zkController.createCollectionZkNode(dcore.getCloudDescriptor());\n      \n      zkConfigName = zkController.readConfigName(collection);\n      if (zkConfigName == null) {\n        log.error(\"Could not find config name for collection:\" + collection);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Could not find config name for collection:\" + collection);\n      }\n      solrLoader = new ZkSolrResourceLoader(instanceDir, zkConfigName,\n          loader.getClassLoader(), dcore.getSubstitutableProperties(), zkController);\n      config = getSolrConfigFromZk(zkConfigName, dcore.getConfigName(),\n          solrLoader);\n      schema = IndexSchemaFactory.buildIndexSchema(dcore.getSchemaName(),\n          config);\n      return new SolrCore(dcore.getName(), null, config, schema, dcore);\n      \n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n  }\n\n","sourceOld":"  // Helper method to separate out creating a core from ZK as opposed to the\n  // \"usual\" way. See create()\n  SolrCore createFromZk(String instanceDir, CoreDescriptor dcore, SolrResourceLoader loader) {\n    try {\n      SolrResourceLoader solrLoader = null;\n      SolrConfig config = null;\n      String zkConfigName = null;\n      IndexSchema schema;\n      String collection = dcore.getCloudDescriptor().getCollectionName();\n      zkController.createCollectionZkNode(dcore.getCloudDescriptor());\n      \n      zkConfigName = zkController.readConfigName(collection);\n      if (zkConfigName == null) {\n        log.error(\"Could not find config name for collection:\" + collection);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Could not find config name for collection:\" + collection);\n      }\n      solrLoader = new ZkSolrResourceLoader(instanceDir, zkConfigName,\n          loader.getClassLoader(), dcore.getCoreProperties(), zkController);\n      config = getSolrConfigFromZk(zkConfigName, dcore.getConfigName(),\n          solrLoader);\n      schema = IndexSchemaFactory.buildIndexSchema(dcore.getSchemaName(),\n          config);\n      return new SolrCore(dcore.getName(), null, config, schema, dcore);\n      \n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"31d4861802ca404d78ca1d15f4550eec415b9199","date":1376947894,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/ZkContainer#createFromZk(String,CoreDescriptor,SolrResourceLoader).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/ZkContainer#createFromZk(String,CoreDescriptor,SolrResourceLoader).mjava","sourceNew":"  // Helper method to separate out creating a core from ZK as opposed to the\n  // \"usual\" way. See create()\n  SolrCore createFromZk(String instanceDir, CoreDescriptor dcore, SolrResourceLoader loader) {\n    try {\n      SolrResourceLoader solrLoader = null;\n      SolrConfig config = null;\n      String zkConfigName = null;\n      IndexSchema schema;\n      String collection = dcore.getCloudDescriptor().getCollectionName();\n      zkController.createCollectionZkNode(dcore.getCloudDescriptor());\n      \n      zkConfigName = zkController.readConfigName(collection);\n      if (zkConfigName == null) {\n        log.error(\"Could not find config name for collection:\" + collection);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Could not find config name for collection:\" + collection);\n      }\n      solrLoader = new ZkSolrResourceLoader(instanceDir, zkConfigName,\n          loader.getClassLoader(), dcore.getSubstitutableProperties(), zkController);\n      config = getSolrConfigFromZk(zkConfigName, dcore.getConfigName(),\n          solrLoader);\n      schema = IndexSchemaFactory.buildIndexSchema(dcore.getSchemaName(),\n          config);\n      return new SolrCore(dcore.getName(), null, config, schema, dcore);\n      \n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n  }\n\n","sourceOld":"  // Helper method to separate out creating a core from ZK as opposed to the\n  // \"usual\" way. See create()\n  SolrCore createFromZk(String instanceDir, CoreDescriptor dcore, SolrResourceLoader loader) {\n    try {\n      SolrResourceLoader solrLoader = null;\n      SolrConfig config = null;\n      String zkConfigName = null;\n      IndexSchema schema;\n      String collection = dcore.getCloudDescriptor().getCollectionName();\n      zkController.createCollectionZkNode(dcore.getCloudDescriptor());\n      \n      zkConfigName = zkController.readConfigName(collection);\n      if (zkConfigName == null) {\n        log.error(\"Could not find config name for collection:\" + collection);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Could not find config name for collection:\" + collection);\n      }\n      solrLoader = new ZkSolrResourceLoader(instanceDir, zkConfigName,\n          loader.getClassLoader(), dcore.getCoreProperties(), zkController);\n      config = getSolrConfigFromZk(zkConfigName, dcore.getConfigName(),\n          solrLoader);\n      schema = IndexSchemaFactory.buildIndexSchema(dcore.getSchemaName(),\n          config);\n      return new SolrCore(dcore.getName(), null, config, schema, dcore);\n      \n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/ZkContainer#createFromZk(String,CoreDescriptor,SolrResourceLoader).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/ZkContainer#createFromZk(String,CoreDescriptor,SolrResourceLoader).mjava","sourceNew":"  // Helper method to separate out creating a core from ZK as opposed to the\n  // \"usual\" way. See create()\n  SolrCore createFromZk(String instanceDir, CoreDescriptor dcore, SolrResourceLoader loader) {\n    try {\n      SolrResourceLoader solrLoader = null;\n      SolrConfig config = null;\n      String zkConfigName = null;\n      IndexSchema schema;\n      String collection = dcore.getCloudDescriptor().getCollectionName();\n      zkController.createCollectionZkNode(dcore.getCloudDescriptor());\n      \n      zkConfigName = zkController.readConfigName(collection);\n      if (zkConfigName == null) {\n        log.error(\"Could not find config name for collection:\" + collection);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Could not find config name for collection:\" + collection);\n      }\n      solrLoader = new ZkSolrResourceLoader(instanceDir, zkConfigName,\n          loader.getClassLoader(), dcore.getSubstitutableProperties(), zkController);\n      config = getSolrConfigFromZk(zkConfigName, dcore.getConfigName(),\n          solrLoader);\n      schema = IndexSchemaFactory.buildIndexSchema(dcore.getSchemaName(),\n          config);\n      return new SolrCore(dcore.getName(), null, config, schema, dcore);\n      \n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n  }\n\n","sourceOld":"  // Helper method to separate out creating a core from ZK as opposed to the\n  // \"usual\" way. See create()\n  SolrCore createFromZk(String instanceDir, CoreDescriptor dcore, SolrResourceLoader loader) {\n    try {\n      SolrResourceLoader solrLoader = null;\n      SolrConfig config = null;\n      String zkConfigName = null;\n      IndexSchema schema;\n      String collection = dcore.getCloudDescriptor().getCollectionName();\n      zkController.createCollectionZkNode(dcore.getCloudDescriptor());\n      \n      zkConfigName = zkController.readConfigName(collection);\n      if (zkConfigName == null) {\n        log.error(\"Could not find config name for collection:\" + collection);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Could not find config name for collection:\" + collection);\n      }\n      solrLoader = new ZkSolrResourceLoader(instanceDir, zkConfigName,\n          loader.getClassLoader(), dcore.getCoreProperties(), zkController);\n      config = getSolrConfigFromZk(zkConfigName, dcore.getConfigName(),\n          solrLoader);\n      schema = IndexSchemaFactory.buildIndexSchema(dcore.getSchemaName(),\n          config);\n      return new SolrCore(dcore.getName(), null, config, schema, dcore);\n      \n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1dca57049fb75fd60d90723d142769094a0402be","date":1385096736,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/ZkContainer#createFromZk(String,CoreDescriptor,SolrResourceLoader).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/ZkContainer#createFromZk(String,CoreDescriptor,SolrResourceLoader).mjava","sourceNew":"  // Helper method to separate out creating a core from ZK as opposed to the\n  // \"usual\" way. See create()\n  SolrCore createFromZk(String instanceDir, CoreDescriptor dcore, SolrResourceLoader loader) {\n    try {\n      SolrResourceLoader solrLoader = null;\n      SolrConfig config = null;\n      String zkConfigName = null;\n      IndexSchema schema;\n      String collection = dcore.getCloudDescriptor().getCollectionName();\n      zkController.createCollectionZkNode(dcore.getCloudDescriptor());\n      \n      zkConfigName = zkController.getZkStateReader().readConfigName(collection);\n      if (zkConfigName == null) {\n        log.error(\"Could not find config name for collection:\" + collection);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Could not find config name for collection:\" + collection);\n      }\n      solrLoader = new ZkSolrResourceLoader(instanceDir, zkConfigName,\n          loader.getClassLoader(), dcore.getSubstitutableProperties(), zkController);\n      config = getSolrConfigFromZk(zkConfigName, dcore.getConfigName(),\n          solrLoader);\n      schema = IndexSchemaFactory.buildIndexSchema(dcore.getSchemaName(),\n          config);\n      return new SolrCore(dcore.getName(), null, config, schema, dcore);\n      \n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n  }\n\n","sourceOld":"  // Helper method to separate out creating a core from ZK as opposed to the\n  // \"usual\" way. See create()\n  SolrCore createFromZk(String instanceDir, CoreDescriptor dcore, SolrResourceLoader loader) {\n    try {\n      SolrResourceLoader solrLoader = null;\n      SolrConfig config = null;\n      String zkConfigName = null;\n      IndexSchema schema;\n      String collection = dcore.getCloudDescriptor().getCollectionName();\n      zkController.createCollectionZkNode(dcore.getCloudDescriptor());\n      \n      zkConfigName = zkController.readConfigName(collection);\n      if (zkConfigName == null) {\n        log.error(\"Could not find config name for collection:\" + collection);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Could not find config name for collection:\" + collection);\n      }\n      solrLoader = new ZkSolrResourceLoader(instanceDir, zkConfigName,\n          loader.getClassLoader(), dcore.getSubstitutableProperties(), zkController);\n      config = getSolrConfigFromZk(zkConfigName, dcore.getConfigName(),\n          solrLoader);\n      schema = IndexSchemaFactory.buildIndexSchema(dcore.getSchemaName(),\n          config);\n      return new SolrCore(dcore.getName(), null, config, schema, dcore);\n      \n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/ZkContainer#createFromZk(String,CoreDescriptor,SolrResourceLoader).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/ZkContainer#createFromZk(String,CoreDescriptor,SolrResourceLoader).mjava","sourceNew":"  // Helper method to separate out creating a core from ZK as opposed to the\n  // \"usual\" way. See create()\n  SolrCore createFromZk(String instanceDir, CoreDescriptor dcore, SolrResourceLoader loader) {\n    try {\n      SolrResourceLoader solrLoader = null;\n      SolrConfig config = null;\n      String zkConfigName = null;\n      IndexSchema schema;\n      String collection = dcore.getCloudDescriptor().getCollectionName();\n      zkController.createCollectionZkNode(dcore.getCloudDescriptor());\n      \n      zkConfigName = zkController.getZkStateReader().readConfigName(collection);\n      if (zkConfigName == null) {\n        log.error(\"Could not find config name for collection:\" + collection);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Could not find config name for collection:\" + collection);\n      }\n      solrLoader = new ZkSolrResourceLoader(instanceDir, zkConfigName,\n          loader.getClassLoader(), dcore.getSubstitutableProperties(), zkController);\n      config = getSolrConfigFromZk(zkConfigName, dcore.getConfigName(),\n          solrLoader);\n      schema = IndexSchemaFactory.buildIndexSchema(dcore.getSchemaName(),\n          config);\n      return new SolrCore(dcore.getName(), null, config, schema, dcore);\n      \n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n  }\n\n","sourceOld":"  // Helper method to separate out creating a core from ZK as opposed to the\n  // \"usual\" way. See create()\n  SolrCore createFromZk(String instanceDir, CoreDescriptor dcore, SolrResourceLoader loader) {\n    try {\n      SolrResourceLoader solrLoader = null;\n      SolrConfig config = null;\n      String zkConfigName = null;\n      IndexSchema schema;\n      String collection = dcore.getCloudDescriptor().getCollectionName();\n      zkController.createCollectionZkNode(dcore.getCloudDescriptor());\n      \n      zkConfigName = zkController.readConfigName(collection);\n      if (zkConfigName == null) {\n        log.error(\"Could not find config name for collection:\" + collection);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Could not find config name for collection:\" + collection);\n      }\n      solrLoader = new ZkSolrResourceLoader(instanceDir, zkConfigName,\n          loader.getClassLoader(), dcore.getSubstitutableProperties(), zkController);\n      config = getSolrConfigFromZk(zkConfigName, dcore.getConfigName(),\n          solrLoader);\n      schema = IndexSchemaFactory.buildIndexSchema(dcore.getSchemaName(),\n          config);\n      return new SolrCore(dcore.getName(), null, config, schema, dcore);\n      \n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2d4e985daefcb892b529223b478c47985fc3c483","date":1395658491,"type":4,"author":"Alan Woodward","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/core/ZkContainer#createFromZk(String,CoreDescriptor,SolrResourceLoader).mjava","sourceNew":null,"sourceOld":"  // Helper method to separate out creating a core from ZK as opposed to the\n  // \"usual\" way. See create()\n  SolrCore createFromZk(String instanceDir, CoreDescriptor dcore, SolrResourceLoader loader) {\n    try {\n      SolrResourceLoader solrLoader = null;\n      SolrConfig config = null;\n      String zkConfigName = null;\n      IndexSchema schema;\n      String collection = dcore.getCloudDescriptor().getCollectionName();\n      zkController.createCollectionZkNode(dcore.getCloudDescriptor());\n      \n      zkConfigName = zkController.getZkStateReader().readConfigName(collection);\n      if (zkConfigName == null) {\n        log.error(\"Could not find config name for collection:\" + collection);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Could not find config name for collection:\" + collection);\n      }\n      solrLoader = new ZkSolrResourceLoader(instanceDir, zkConfigName,\n          loader.getClassLoader(), dcore.getSubstitutableProperties(), zkController);\n      config = getSolrConfigFromZk(zkConfigName, dcore.getConfigName(),\n          solrLoader);\n      schema = IndexSchemaFactory.buildIndexSchema(dcore.getSchemaName(),\n          config);\n      return new SolrCore(dcore.getName(), null, config, schema, dcore);\n      \n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1e9769bcabf28416689da7ec56a0c799b2a66b87":["6e764e9a107f93be9fa3c922bc6a197b3eec387e"],"b29abed5661c7911e4b45d5a3d79a186268e28c4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["b29abed5661c7911e4b45d5a3d79a186268e28c4","6e764e9a107f93be9fa3c922bc6a197b3eec387e"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["37a0f60745e53927c4c876cfe5b5a58170f0646c","1e9769bcabf28416689da7ec56a0c799b2a66b87"],"31d4861802ca404d78ca1d15f4550eec415b9199":["6e764e9a107f93be9fa3c922bc6a197b3eec387e","1e9769bcabf28416689da7ec56a0c799b2a66b87"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1dca57049fb75fd60d90723d142769094a0402be":["1e9769bcabf28416689da7ec56a0c799b2a66b87"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["1e9769bcabf28416689da7ec56a0c799b2a66b87","1dca57049fb75fd60d90723d142769094a0402be"],"2d4e985daefcb892b529223b478c47985fc3c483":["1dca57049fb75fd60d90723d142769094a0402be"],"6e764e9a107f93be9fa3c922bc6a197b3eec387e":["b29abed5661c7911e4b45d5a3d79a186268e28c4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2d4e985daefcb892b529223b478c47985fc3c483"]},"commit2Childs":{"1e9769bcabf28416689da7ec56a0c799b2a66b87":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","31d4861802ca404d78ca1d15f4550eec415b9199","1dca57049fb75fd60d90723d142769094a0402be","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"b29abed5661c7911e4b45d5a3d79a186268e28c4":["37a0f60745e53927c4c876cfe5b5a58170f0646c","6e764e9a107f93be9fa3c922bc6a197b3eec387e"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"31d4861802ca404d78ca1d15f4550eec415b9199":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b29abed5661c7911e4b45d5a3d79a186268e28c4"],"1dca57049fb75fd60d90723d142769094a0402be":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","2d4e985daefcb892b529223b478c47985fc3c483"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"6e764e9a107f93be9fa3c922bc6a197b3eec387e":["1e9769bcabf28416689da7ec56a0c799b2a66b87","37a0f60745e53927c4c876cfe5b5a58170f0646c","31d4861802ca404d78ca1d15f4550eec415b9199"],"2d4e985daefcb892b529223b478c47985fc3c483":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","31d4861802ca404d78ca1d15f4550eec415b9199","74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}