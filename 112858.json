{"path":"src/test/org/apache/lucene/document/TestDateTools#testStringToDate().mjava","commits":[{"id":"8386785ad84675d1c706c94f28f5be23e3d6f711","date":1094419722,"type":0,"author":"Daniel Naber","isMerge":false,"pathNew":"src/test/org/apache/lucene/document/TestDateTools#testStringToDate().mjava","pathOld":"/dev/null","sourceNew":"  public void testStringToDate() throws ParseException {\n    \n    Date d = null;\n    d = DateTools.stringToDate(\"2004\");\n    assertEquals(\"2004-01-01 00:00:00:000\", isoFormat(d));\n    d = DateTools.stringToDate(\"20040705\");\n    assertEquals(\"2004-07-05 00:00:00:000\", isoFormat(d));\n    d = DateTools.stringToDate(\"200407050910\");\n    assertEquals(\"2004-07-05 09:10:00:000\", isoFormat(d));\n    d = DateTools.stringToDate(\"20040705091055990\");\n    assertEquals(\"2004-07-05 09:10:55:990\", isoFormat(d));\n\n    try {\n      d = DateTools.stringToDate(\"97\");    // no date\n      fail();\n    } catch(ParseException e) { /* expected excpetion */ }\n    try {\n      d = DateTools.stringToDate(\"200401011235009999\");    // no date\n      fail();\n    } catch(ParseException e) { /* expected excpetion */ }\n    try {\n      d = DateTools.stringToDate(\"aaaa\");    // no date\n      fail();\n    } catch(ParseException e) { /* expected excpetion */ }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7cecbacd2f253331ff961f96749d7d28ac51bbbf","date":1120322444,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/test/org/apache/lucene/document/TestDateTools#testStringToDate().mjava","pathOld":"src/test/org/apache/lucene/document/TestDateTools#testStringToDate().mjava","sourceNew":"  public void testStringToDate() throws ParseException {\n    \n    Date d = null;\n    d = DateTools.stringToDate(\"2004\");\n    assertEquals(\"2004-01-01 00:00:00:000\", isoFormat(d));\n    d = DateTools.stringToDate(\"20040705\");\n    assertEquals(\"2004-07-05 00:00:00:000\", isoFormat(d));\n    d = DateTools.stringToDate(\"200407050910\");\n    assertEquals(\"2004-07-05 09:10:00:000\", isoFormat(d));\n    d = DateTools.stringToDate(\"20040705091055990\");\n    assertEquals(\"2004-07-05 09:10:55:990\", isoFormat(d));\n\n    try {\n      d = DateTools.stringToDate(\"97\");    // no date\n      fail();\n    } catch(ParseException e) { /* expected exception */ }\n    try {\n      d = DateTools.stringToDate(\"200401011235009999\");    // no date\n      fail();\n    } catch(ParseException e) { /* expected exception */ }\n    try {\n      d = DateTools.stringToDate(\"aaaa\");    // no date\n      fail();\n    } catch(ParseException e) { /* expected exception */ }\n\n  }\n\n","sourceOld":"  public void testStringToDate() throws ParseException {\n    \n    Date d = null;\n    d = DateTools.stringToDate(\"2004\");\n    assertEquals(\"2004-01-01 00:00:00:000\", isoFormat(d));\n    d = DateTools.stringToDate(\"20040705\");\n    assertEquals(\"2004-07-05 00:00:00:000\", isoFormat(d));\n    d = DateTools.stringToDate(\"200407050910\");\n    assertEquals(\"2004-07-05 09:10:00:000\", isoFormat(d));\n    d = DateTools.stringToDate(\"20040705091055990\");\n    assertEquals(\"2004-07-05 09:10:55:990\", isoFormat(d));\n\n    try {\n      d = DateTools.stringToDate(\"97\");    // no date\n      fail();\n    } catch(ParseException e) { /* expected excpetion */ }\n    try {\n      d = DateTools.stringToDate(\"200401011235009999\");    // no date\n      fail();\n    } catch(ParseException e) { /* expected excpetion */ }\n    try {\n      d = DateTools.stringToDate(\"aaaa\");    // no date\n      fail();\n    } catch(ParseException e) { /* expected excpetion */ }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8d1458a2543cbd30cbfe7929be4dcb5c5251659","date":1254582241,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"src/test/org/apache/lucene/document/TestDateTools#testStringToDate().mjava","sourceNew":null,"sourceOld":"  public void testStringToDate() throws ParseException {\n    \n    Date d = null;\n    d = DateTools.stringToDate(\"2004\");\n    assertEquals(\"2004-01-01 00:00:00:000\", isoFormat(d));\n    d = DateTools.stringToDate(\"20040705\");\n    assertEquals(\"2004-07-05 00:00:00:000\", isoFormat(d));\n    d = DateTools.stringToDate(\"200407050910\");\n    assertEquals(\"2004-07-05 09:10:00:000\", isoFormat(d));\n    d = DateTools.stringToDate(\"20040705091055990\");\n    assertEquals(\"2004-07-05 09:10:55:990\", isoFormat(d));\n\n    try {\n      d = DateTools.stringToDate(\"97\");    // no date\n      fail();\n    } catch(ParseException e) { /* expected exception */ }\n    try {\n      d = DateTools.stringToDate(\"200401011235009999\");    // no date\n      fail();\n    } catch(ParseException e) { /* expected exception */ }\n    try {\n      d = DateTools.stringToDate(\"aaaa\");    // no date\n      fail();\n    } catch(ParseException e) { /* expected exception */ }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a046c0c310bc77931fc8441bd920053b607dd14","date":1254584734,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"src/test/org/apache/lucene/document/TestDateTools#testStringToDate().mjava","sourceNew":null,"sourceOld":"  public void testStringToDate() throws ParseException {\n    \n    Date d = null;\n    d = DateTools.stringToDate(\"2004\");\n    assertEquals(\"2004-01-01 00:00:00:000\", isoFormat(d));\n    d = DateTools.stringToDate(\"20040705\");\n    assertEquals(\"2004-07-05 00:00:00:000\", isoFormat(d));\n    d = DateTools.stringToDate(\"200407050910\");\n    assertEquals(\"2004-07-05 09:10:00:000\", isoFormat(d));\n    d = DateTools.stringToDate(\"20040705091055990\");\n    assertEquals(\"2004-07-05 09:10:55:990\", isoFormat(d));\n\n    try {\n      d = DateTools.stringToDate(\"97\");    // no date\n      fail();\n    } catch(ParseException e) { /* expected exception */ }\n    try {\n      d = DateTools.stringToDate(\"200401011235009999\");    // no date\n      fail();\n    } catch(ParseException e) { /* expected exception */ }\n    try {\n      d = DateTools.stringToDate(\"aaaa\");    // no date\n      fail();\n    } catch(ParseException e) { /* expected exception */ }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a61b8e7beed03e44332d4a604c53962e7d34ea17","date":1255278355,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/document/TestDateTools#testStringToDate().mjava","pathOld":"/dev/null","sourceNew":"  public void testStringToDate() throws ParseException {\n    \n    Date d = null;\n    d = DateTools.stringToDate(\"2004\");\n    assertEquals(\"2004-01-01 00:00:00:000\", isoFormat(d));\n    d = DateTools.stringToDate(\"20040705\");\n    assertEquals(\"2004-07-05 00:00:00:000\", isoFormat(d));\n    d = DateTools.stringToDate(\"200407050910\");\n    assertEquals(\"2004-07-05 09:10:00:000\", isoFormat(d));\n    d = DateTools.stringToDate(\"20040705091055990\");\n    assertEquals(\"2004-07-05 09:10:55:990\", isoFormat(d));\n\n    try {\n      d = DateTools.stringToDate(\"97\");    // no date\n      fail();\n    } catch(ParseException e) { /* expected exception */ }\n    try {\n      d = DateTools.stringToDate(\"200401011235009999\");    // no date\n      fail();\n    } catch(ParseException e) { /* expected exception */ }\n    try {\n      d = DateTools.stringToDate(\"aaaa\");    // no date\n      fail();\n    } catch(ParseException e) { /* expected exception */ }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":4,"author":"Dawid Weiss","isMerge":false,"pathNew":"/dev/null","pathOld":"src/test/org/apache/lucene/document/TestDateTools#testStringToDate().mjava","sourceNew":null,"sourceOld":"  public void testStringToDate() throws ParseException {\n    \n    Date d = null;\n    d = DateTools.stringToDate(\"2004\");\n    assertEquals(\"2004-01-01 00:00:00:000\", isoFormat(d));\n    d = DateTools.stringToDate(\"20040705\");\n    assertEquals(\"2004-07-05 00:00:00:000\", isoFormat(d));\n    d = DateTools.stringToDate(\"200407050910\");\n    assertEquals(\"2004-07-05 09:10:00:000\", isoFormat(d));\n    d = DateTools.stringToDate(\"20040705091055990\");\n    assertEquals(\"2004-07-05 09:10:55:990\", isoFormat(d));\n\n    try {\n      d = DateTools.stringToDate(\"97\");    // no date\n      fail();\n    } catch(ParseException e) { /* expected exception */ }\n    try {\n      d = DateTools.stringToDate(\"200401011235009999\");    // no date\n      fail();\n    } catch(ParseException e) { /* expected exception */ }\n    try {\n      d = DateTools.stringToDate(\"aaaa\");    // no date\n      fail();\n    } catch(ParseException e) { /* expected exception */ }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a61b8e7beed03e44332d4a604c53962e7d34ea17":["0a046c0c310bc77931fc8441bd920053b607dd14"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["7cecbacd2f253331ff961f96749d7d28ac51bbbf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0a046c0c310bc77931fc8441bd920053b607dd14":["7cecbacd2f253331ff961f96749d7d28ac51bbbf","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"7cecbacd2f253331ff961f96749d7d28ac51bbbf":["8386785ad84675d1c706c94f28f5be23e3d6f711"],"8386785ad84675d1c706c94f28f5be23e3d6f711":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a61b8e7beed03e44332d4a604c53962e7d34ea17"]},"commit2Childs":{"a61b8e7beed03e44332d4a604c53962e7d34ea17":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["0a046c0c310bc77931fc8441bd920053b607dd14"],"0a046c0c310bc77931fc8441bd920053b607dd14":["a61b8e7beed03e44332d4a604c53962e7d34ea17"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8386785ad84675d1c706c94f28f5be23e3d6f711"],"7cecbacd2f253331ff961f96749d7d28ac51bbbf":["e8d1458a2543cbd30cbfe7929be4dcb5c5251659","0a046c0c310bc77931fc8441bd920053b607dd14"],"8386785ad84675d1c706c94f28f5be23e3d6f711":["7cecbacd2f253331ff961f96749d7d28ac51bbbf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}