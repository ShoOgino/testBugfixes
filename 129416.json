{"path":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempFSTOrdTermsReader.TermsReader.BaseTermsEnum#refillMetadata().mjava","commits":[{"id":"ea1ab130682544cb3361237d60feea30588fe966","date":1375236277,"type":1,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempFSTOrdTermsReader.TermsReader.BaseTermsEnum#refillMetadata().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempFSTOrdTermsReader.TermsReader.SegmentTermsEnum#refillMetadata().mjava","sourceNew":"      /** Load current metadata shard */\n      final void refillMetadata() throws IOException {\n        final int offset = metaBlockOrd * numSkipInfo;\n        final int metaLongsFP = (int)skipInfo[offset + 1];\n        final int metaBytesFP = (int)skipInfo[offset + 2];\n        metaLongsReader.setPosition(metaLongsFP);\n        bytesStart[0] = metaBytesFP; \n        for (int j = 0; j < longsSize; j++) {\n          longs[0][j] = skipInfo[offset + 3 + j] + metaLongsReader.readVLong();\n        }\n        bytesLength[0] = (int)metaLongsReader.readVLong();\n        for (int i = 1; i < INTERVAL && !metaLongsReader.eof(); i++) {\n          bytesStart[i] = bytesStart[i-1] + bytesLength[i-1];\n          for (int j = 0; j < longsSize; j++) {\n            longs[i][j] = longs[i-1][j] + metaLongsReader.readVLong();\n          }\n          bytesLength[i] = (int)metaLongsReader.readVLong();\n        }\n      }\n\n","sourceOld":"      void refillMetadata() throws IOException {\n        final int offset = metaBlockOrd * numSkipInfo;\n        final int metaLongsFP = (int)skipInfo[offset + 1];\n        final int metaBytesFP = (int)skipInfo[offset + 2];\n        metaLongsReader.setPosition(metaLongsFP);\n        bytesStart[0] = metaBytesFP; \n        for (int j = 0; j < longsSize; j++) {\n          longs[0][j] = skipInfo[offset + 3 + j] + metaLongsReader.readVLong();\n        }\n        bytesLength[0] = (int)metaLongsReader.readVLong();\n        for (int i = 1; i < INTERVAL && !metaLongsReader.eof(); i++) {\n          bytesStart[i] = bytesStart[i-1] + bytesLength[i-1];\n          for (int j = 0; j < longsSize; j++) {\n            longs[i][j] = longs[i-1][j] + metaLongsReader.readVLong();\n          }\n          bytesLength[i] = (int)metaLongsReader.readVLong();\n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"646afd4e29139bf4b06a5d88f6dcfdb5c2cd625b","date":1375270956,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempFSTOrdTermsReader.TermsReader.BaseTermsEnum#refillMetadata().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempFSTOrdTermsReader.TermsReader.BaseTermsEnum#refillMetadata().mjava","sourceNew":"      /** Load current metadata shard */\n      final void refillMetadata() throws IOException {\n        final int offset = metaBlockOrd * numSkipInfo;\n        final int metaLongsFP = (int)skipInfo[offset + 1];\n        final int metaBytesFP = (int)skipInfo[offset + 2];\n        metaLongsReader.setPosition(metaLongsFP);\n        for (int j = 0; j < longsSize; j++) {\n          longs[0][j] = skipInfo[offset + 3 + j] + metaLongsReader.readVLong();\n        }\n        bytesStart[0] = metaBytesFP; \n        bytesLength[0] = (int)metaLongsReader.readVLong();\n        for (int i = 1; i < INTERVAL && !metaLongsReader.eof(); i++) {\n          for (int j = 0; j < longsSize; j++) {\n            longs[i][j] = longs[i-1][j] + metaLongsReader.readVLong();\n          }\n          bytesStart[i] = bytesStart[i-1] + bytesLength[i-1];\n          bytesLength[i] = (int)metaLongsReader.readVLong();\n        }\n      }\n\n","sourceOld":"      /** Load current metadata shard */\n      final void refillMetadata() throws IOException {\n        final int offset = metaBlockOrd * numSkipInfo;\n        final int metaLongsFP = (int)skipInfo[offset + 1];\n        final int metaBytesFP = (int)skipInfo[offset + 2];\n        metaLongsReader.setPosition(metaLongsFP);\n        bytesStart[0] = metaBytesFP; \n        for (int j = 0; j < longsSize; j++) {\n          longs[0][j] = skipInfo[offset + 3 + j] + metaLongsReader.readVLong();\n        }\n        bytesLength[0] = (int)metaLongsReader.readVLong();\n        for (int i = 1; i < INTERVAL && !metaLongsReader.eof(); i++) {\n          bytesStart[i] = bytesStart[i-1] + bytesLength[i-1];\n          for (int j = 0; j < longsSize; j++) {\n            longs[i][j] = longs[i-1][j] + metaLongsReader.readVLong();\n          }\n          bytesLength[i] = (int)metaLongsReader.readVLong();\n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e6904bcc97d8afa27bd72ee29ac01e525e327ad4","date":1377958787,"type":5,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/temp/TempFSTOrdTermsReader.TermsReader.BaseTermsEnum#refillMetadata().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempFSTOrdTermsReader.TermsReader.BaseTermsEnum#refillMetadata().mjava","sourceNew":"      /** Load current metadata shard */\n      final void refillMetadata() throws IOException {\n        final int offset = metaBlockOrd * numSkipInfo;\n        final int metaLongsFP = (int)skipInfo[offset + 1];\n        final int metaBytesFP = (int)skipInfo[offset + 2];\n        metaLongsReader.setPosition(metaLongsFP);\n        for (int j = 0; j < longsSize; j++) {\n          longs[0][j] = skipInfo[offset + 3 + j] + metaLongsReader.readVLong();\n        }\n        bytesStart[0] = metaBytesFP; \n        bytesLength[0] = (int)metaLongsReader.readVLong();\n        for (int i = 1; i < INTERVAL && !metaLongsReader.eof(); i++) {\n          for (int j = 0; j < longsSize; j++) {\n            longs[i][j] = longs[i-1][j] + metaLongsReader.readVLong();\n          }\n          bytesStart[i] = bytesStart[i-1] + bytesLength[i-1];\n          bytesLength[i] = (int)metaLongsReader.readVLong();\n        }\n      }\n\n","sourceOld":"      /** Load current metadata shard */\n      final void refillMetadata() throws IOException {\n        final int offset = metaBlockOrd * numSkipInfo;\n        final int metaLongsFP = (int)skipInfo[offset + 1];\n        final int metaBytesFP = (int)skipInfo[offset + 2];\n        metaLongsReader.setPosition(metaLongsFP);\n        for (int j = 0; j < longsSize; j++) {\n          longs[0][j] = skipInfo[offset + 3 + j] + metaLongsReader.readVLong();\n        }\n        bytesStart[0] = metaBytesFP; \n        bytesLength[0] = (int)metaLongsReader.readVLong();\n        for (int i = 1; i < INTERVAL && !metaLongsReader.eof(); i++) {\n          for (int j = 0; j < longsSize; j++) {\n            longs[i][j] = longs[i-1][j] + metaLongsReader.readVLong();\n          }\n          bytesStart[i] = bytesStart[i-1] + bytesLength[i-1];\n          bytesLength[i] = (int)metaLongsReader.readVLong();\n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"646afd4e29139bf4b06a5d88f6dcfdb5c2cd625b":["ea1ab130682544cb3361237d60feea30588fe966"],"ea1ab130682544cb3361237d60feea30588fe966":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e6904bcc97d8afa27bd72ee29ac01e525e327ad4":["646afd4e29139bf4b06a5d88f6dcfdb5c2cd625b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"646afd4e29139bf4b06a5d88f6dcfdb5c2cd625b":["e6904bcc97d8afa27bd72ee29ac01e525e327ad4"],"ea1ab130682544cb3361237d60feea30588fe966":["646afd4e29139bf4b06a5d88f6dcfdb5c2cd625b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ea1ab130682544cb3361237d60feea30588fe966","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e6904bcc97d8afa27bd72ee29ac01e525e327ad4":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e6904bcc97d8afa27bd72ee29ac01e525e327ad4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}