{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/UpdateStream#toExplanation(StreamFactory).mjava","commits":[{"id":"e81b63c9ecb10b3cb98b3cc5e255b8d91021b941","date":1461079048,"type":0,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/UpdateStream#toExplanation(StreamFactory).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Explanation toExplanation(StreamFactory factory) throws IOException {\n\n    // An update stream is backward wrt the order in the explanation. This stream is the \"child\"\n    // while the collection we're updating is the parent.\n    \n    StreamExplanation explanation = new StreamExplanation(getStreamNodeId() + \"-datastore\");\n    \n    explanation.setFunctionName(String.format(Locale.ROOT, \"solr (%s)\", collection));\n    explanation.setImplementingClass(\"Solr/Lucene\");\n    explanation.setExpressionType(ExpressionType.DATASTORE);\n    explanation.setExpression(\"Update into \" + collection);\n    \n    // child is a datastore so add it at this point\n    StreamExplanation child = new StreamExplanation(getStreamNodeId().toString());\n    child.setFunctionName(String.format(Locale.ROOT, factory.getFunctionName(getClass())));\n    child.setImplementingClass(getClass().getName());\n    child.setExpressionType(ExpressionType.STREAM_DECORATOR);\n    child.setExpression(toExpression(factory, false).toString());\n    \n    explanation.addChild(child);\n    \n    return explanation;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b71fe681187ac8552caaff9d5a7f1f3cac47b56","date":1461081992,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/UpdateStream#toExplanation(StreamFactory).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Explanation toExplanation(StreamFactory factory) throws IOException {\n\n    // An update stream is backward wrt the order in the explanation. This stream is the \"child\"\n    // while the collection we're updating is the parent.\n    \n    StreamExplanation explanation = new StreamExplanation(getStreamNodeId() + \"-datastore\");\n    \n    explanation.setFunctionName(String.format(Locale.ROOT, \"solr (%s)\", collection));\n    explanation.setImplementingClass(\"Solr/Lucene\");\n    explanation.setExpressionType(ExpressionType.DATASTORE);\n    explanation.setExpression(\"Update into \" + collection);\n    \n    // child is a datastore so add it at this point\n    StreamExplanation child = new StreamExplanation(getStreamNodeId().toString());\n    child.setFunctionName(String.format(Locale.ROOT, factory.getFunctionName(getClass())));\n    child.setImplementingClass(getClass().getName());\n    child.setExpressionType(ExpressionType.STREAM_DECORATOR);\n    child.setExpression(toExpression(factory, false).toString());\n    \n    explanation.addChild(child);\n    \n    return explanation;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e2457828e7c338180191d4a223f9309298b0aff0","date":1462399032,"type":3,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/UpdateStream#toExplanation(StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/UpdateStream#toExplanation(StreamFactory).mjava","sourceNew":"  @Override\n  public Explanation toExplanation(StreamFactory factory) throws IOException {\n\n    // An update stream is backward wrt the order in the explanation. This stream is the \"child\"\n    // while the collection we're updating is the parent.\n    \n    StreamExplanation explanation = new StreamExplanation(getStreamNodeId() + \"-datastore\");\n    \n    explanation.setFunctionName(String.format(Locale.ROOT, \"solr (%s)\", collection));\n    explanation.setImplementingClass(\"Solr/Lucene\");\n    explanation.setExpressionType(ExpressionType.DATASTORE);\n    explanation.setExpression(\"Update into \" + collection);\n    \n    // child is a datastore so add it at this point\n    StreamExplanation child = new StreamExplanation(getStreamNodeId().toString());\n    child.setFunctionName(String.format(Locale.ROOT, factory.getFunctionName(getClass())));\n    child.setImplementingClass(getClass().getName());\n    child.setExpressionType(ExpressionType.STREAM_DECORATOR);\n    child.setExpression(toExpression(factory, false).toString());\n    child.addChild(tupleSource.toExplanation(factory));\n    \n    explanation.addChild(child);\n    \n    return explanation;\n  }\n\n","sourceOld":"  @Override\n  public Explanation toExplanation(StreamFactory factory) throws IOException {\n\n    // An update stream is backward wrt the order in the explanation. This stream is the \"child\"\n    // while the collection we're updating is the parent.\n    \n    StreamExplanation explanation = new StreamExplanation(getStreamNodeId() + \"-datastore\");\n    \n    explanation.setFunctionName(String.format(Locale.ROOT, \"solr (%s)\", collection));\n    explanation.setImplementingClass(\"Solr/Lucene\");\n    explanation.setExpressionType(ExpressionType.DATASTORE);\n    explanation.setExpression(\"Update into \" + collection);\n    \n    // child is a datastore so add it at this point\n    StreamExplanation child = new StreamExplanation(getStreamNodeId().toString());\n    child.setFunctionName(String.format(Locale.ROOT, factory.getFunctionName(getClass())));\n    child.setImplementingClass(getClass().getName());\n    child.setExpressionType(ExpressionType.STREAM_DECORATOR);\n    child.setExpression(toExpression(factory, false).toString());\n    \n    explanation.addChild(child);\n    \n    return explanation;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"73450c0955930295d34703e7ddbfc6973b7a121a","date":1462431925,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/UpdateStream#toExplanation(StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/UpdateStream#toExplanation(StreamFactory).mjava","sourceNew":"  @Override\n  public Explanation toExplanation(StreamFactory factory) throws IOException {\n\n    // An update stream is backward wrt the order in the explanation. This stream is the \"child\"\n    // while the collection we're updating is the parent.\n    \n    StreamExplanation explanation = new StreamExplanation(getStreamNodeId() + \"-datastore\");\n    \n    explanation.setFunctionName(String.format(Locale.ROOT, \"solr (%s)\", collection));\n    explanation.setImplementingClass(\"Solr/Lucene\");\n    explanation.setExpressionType(ExpressionType.DATASTORE);\n    explanation.setExpression(\"Update into \" + collection);\n    \n    // child is a datastore so add it at this point\n    StreamExplanation child = new StreamExplanation(getStreamNodeId().toString());\n    child.setFunctionName(String.format(Locale.ROOT, factory.getFunctionName(getClass())));\n    child.setImplementingClass(getClass().getName());\n    child.setExpressionType(ExpressionType.STREAM_DECORATOR);\n    child.setExpression(toExpression(factory, false).toString());\n    child.addChild(tupleSource.toExplanation(factory));\n    \n    explanation.addChild(child);\n    \n    return explanation;\n  }\n\n","sourceOld":"  @Override\n  public Explanation toExplanation(StreamFactory factory) throws IOException {\n\n    // An update stream is backward wrt the order in the explanation. This stream is the \"child\"\n    // while the collection we're updating is the parent.\n    \n    StreamExplanation explanation = new StreamExplanation(getStreamNodeId() + \"-datastore\");\n    \n    explanation.setFunctionName(String.format(Locale.ROOT, \"solr (%s)\", collection));\n    explanation.setImplementingClass(\"Solr/Lucene\");\n    explanation.setExpressionType(ExpressionType.DATASTORE);\n    explanation.setExpression(\"Update into \" + collection);\n    \n    // child is a datastore so add it at this point\n    StreamExplanation child = new StreamExplanation(getStreamNodeId().toString());\n    child.setFunctionName(String.format(Locale.ROOT, factory.getFunctionName(getClass())));\n    child.setImplementingClass(getClass().getName());\n    child.setExpressionType(ExpressionType.STREAM_DECORATOR);\n    child.setExpression(toExpression(factory, false).toString());\n    \n    explanation.addChild(child);\n    \n    return explanation;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7dc08f02757dd10637b16a5c65eaaef839a91a9a","date":1462455462,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/UpdateStream#toExplanation(StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/UpdateStream#toExplanation(StreamFactory).mjava","sourceNew":"  @Override\n  public Explanation toExplanation(StreamFactory factory) throws IOException {\n\n    // An update stream is backward wrt the order in the explanation. This stream is the \"child\"\n    // while the collection we're updating is the parent.\n    \n    StreamExplanation explanation = new StreamExplanation(getStreamNodeId() + \"-datastore\");\n    \n    explanation.setFunctionName(String.format(Locale.ROOT, \"solr (%s)\", collection));\n    explanation.setImplementingClass(\"Solr/Lucene\");\n    explanation.setExpressionType(ExpressionType.DATASTORE);\n    explanation.setExpression(\"Update into \" + collection);\n    \n    // child is a datastore so add it at this point\n    StreamExplanation child = new StreamExplanation(getStreamNodeId().toString());\n    child.setFunctionName(String.format(Locale.ROOT, factory.getFunctionName(getClass())));\n    child.setImplementingClass(getClass().getName());\n    child.setExpressionType(ExpressionType.STREAM_DECORATOR);\n    child.setExpression(toExpression(factory, false).toString());\n    child.addChild(tupleSource.toExplanation(factory));\n    \n    explanation.addChild(child);\n    \n    return explanation;\n  }\n\n","sourceOld":"  @Override\n  public Explanation toExplanation(StreamFactory factory) throws IOException {\n\n    // An update stream is backward wrt the order in the explanation. This stream is the \"child\"\n    // while the collection we're updating is the parent.\n    \n    StreamExplanation explanation = new StreamExplanation(getStreamNodeId() + \"-datastore\");\n    \n    explanation.setFunctionName(String.format(Locale.ROOT, \"solr (%s)\", collection));\n    explanation.setImplementingClass(\"Solr/Lucene\");\n    explanation.setExpressionType(ExpressionType.DATASTORE);\n    explanation.setExpression(\"Update into \" + collection);\n    \n    // child is a datastore so add it at this point\n    StreamExplanation child = new StreamExplanation(getStreamNodeId().toString());\n    child.setFunctionName(String.format(Locale.ROOT, factory.getFunctionName(getClass())));\n    child.setImplementingClass(getClass().getName());\n    child.setExpressionType(ExpressionType.STREAM_DECORATOR);\n    child.setExpression(toExpression(factory, false).toString());\n    \n    explanation.addChild(child);\n    \n    return explanation;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","date":1462576651,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/UpdateStream#toExplanation(StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/UpdateStream#toExplanation(StreamFactory).mjava","sourceNew":"  @Override\n  public Explanation toExplanation(StreamFactory factory) throws IOException {\n\n    // An update stream is backward wrt the order in the explanation. This stream is the \"child\"\n    // while the collection we're updating is the parent.\n    \n    StreamExplanation explanation = new StreamExplanation(getStreamNodeId() + \"-datastore\");\n    \n    explanation.setFunctionName(String.format(Locale.ROOT, \"solr (%s)\", collection));\n    explanation.setImplementingClass(\"Solr/Lucene\");\n    explanation.setExpressionType(ExpressionType.DATASTORE);\n    explanation.setExpression(\"Update into \" + collection);\n    \n    // child is a datastore so add it at this point\n    StreamExplanation child = new StreamExplanation(getStreamNodeId().toString());\n    child.setFunctionName(String.format(Locale.ROOT, factory.getFunctionName(getClass())));\n    child.setImplementingClass(getClass().getName());\n    child.setExpressionType(ExpressionType.STREAM_DECORATOR);\n    child.setExpression(toExpression(factory, false).toString());\n    child.addChild(tupleSource.toExplanation(factory));\n    \n    explanation.addChild(child);\n    \n    return explanation;\n  }\n\n","sourceOld":"  @Override\n  public Explanation toExplanation(StreamFactory factory) throws IOException {\n\n    // An update stream is backward wrt the order in the explanation. This stream is the \"child\"\n    // while the collection we're updating is the parent.\n    \n    StreamExplanation explanation = new StreamExplanation(getStreamNodeId() + \"-datastore\");\n    \n    explanation.setFunctionName(String.format(Locale.ROOT, \"solr (%s)\", collection));\n    explanation.setImplementingClass(\"Solr/Lucene\");\n    explanation.setExpressionType(ExpressionType.DATASTORE);\n    explanation.setExpression(\"Update into \" + collection);\n    \n    // child is a datastore so add it at this point\n    StreamExplanation child = new StreamExplanation(getStreamNodeId().toString());\n    child.setFunctionName(String.format(Locale.ROOT, factory.getFunctionName(getClass())));\n    child.setImplementingClass(getClass().getName());\n    child.setExpressionType(ExpressionType.STREAM_DECORATOR);\n    child.setExpression(toExpression(factory, false).toString());\n    \n    explanation.addChild(child);\n    \n    return explanation;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3b71fe681187ac8552caaff9d5a7f1f3cac47b56":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e81b63c9ecb10b3cb98b3cc5e255b8d91021b941"],"73450c0955930295d34703e7ddbfc6973b7a121a":["3b71fe681187ac8552caaff9d5a7f1f3cac47b56","e2457828e7c338180191d4a223f9309298b0aff0"],"7dc08f02757dd10637b16a5c65eaaef839a91a9a":["3b71fe681187ac8552caaff9d5a7f1f3cac47b56","73450c0955930295d34703e7ddbfc6973b7a121a"],"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904":["3b71fe681187ac8552caaff9d5a7f1f3cac47b56","73450c0955930295d34703e7ddbfc6973b7a121a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e81b63c9ecb10b3cb98b3cc5e255b8d91021b941":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e2457828e7c338180191d4a223f9309298b0aff0":["3b71fe681187ac8552caaff9d5a7f1f3cac47b56"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["73450c0955930295d34703e7ddbfc6973b7a121a"]},"commit2Childs":{"3b71fe681187ac8552caaff9d5a7f1f3cac47b56":["73450c0955930295d34703e7ddbfc6973b7a121a","7dc08f02757dd10637b16a5c65eaaef839a91a9a","a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","e2457828e7c338180191d4a223f9309298b0aff0"],"73450c0955930295d34703e7ddbfc6973b7a121a":["7dc08f02757dd10637b16a5c65eaaef839a91a9a","a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7dc08f02757dd10637b16a5c65eaaef839a91a9a":[],"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3b71fe681187ac8552caaff9d5a7f1f3cac47b56","e81b63c9ecb10b3cb98b3cc5e255b8d91021b941"],"e81b63c9ecb10b3cb98b3cc5e255b8d91021b941":["3b71fe681187ac8552caaff9d5a7f1f3cac47b56"],"e2457828e7c338180191d4a223f9309298b0aff0":["73450c0955930295d34703e7ddbfc6973b7a121a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7dc08f02757dd10637b16a5c65eaaef839a91a9a","a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}