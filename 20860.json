{"path":"solr/core/src/test/org/apache/solr/security/hadoop/TestDelegationWithHadoopAuth#testDelegationTokenSolrClient().mjava","commits":[{"id":"29887daf839649150d96855b142b76f5c45d60d2","date":1482160504,"type":0,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/hadoop/TestDelegationWithHadoopAuth#testDelegationTokenSolrClient().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Test HttpSolrServer's delegation token support\n   */\n  @Test\n  public void testDelegationTokenSolrClient() throws Exception {\n    // Get token\n    String token = getDelegationToken(null, USER_1, primarySolrClient);\n    assertNotNull(token);\n\n    SolrRequest request = getAdminRequest(new ModifiableSolrParams());\n\n    // test without token\n    HttpSolrClient ss =\n        new HttpSolrClient.Builder(primarySolrClient.getBaseURL().toString())\n            .withResponseParser(primarySolrClient.getParser())\n            .build();\n    try {\n      doSolrRequest(ss, request, ErrorCode.UNAUTHORIZED.code);\n    } finally {\n      ss.close();\n    }\n\n    ss = new HttpSolrClient.Builder(primarySolrClient.getBaseURL().toString())\n        .withDelegationToken(token)\n        .withResponseParser(primarySolrClient.getParser())\n        .build();\n    try {\n      // test with token via property\n      doSolrRequest(ss, request, HttpStatus.SC_OK);\n\n      // test with param -- should throw an exception\n      ModifiableSolrParams tokenParam = new ModifiableSolrParams();\n      tokenParam.set(\"delegation\", \"invalidToken\");\n      try {\n        doSolrRequest(ss, getAdminRequest(tokenParam), ErrorCode.FORBIDDEN.code);\n        Assert.fail(\"Expected exception\");\n      } catch (IllegalArgumentException ex) {}\n    } finally {\n      ss.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","date":1482251961,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/security/hadoop/TestDelegationWithHadoopAuth#testDelegationTokenSolrClient().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Test HttpSolrServer's delegation token support\n   */\n  @Test\n  public void testDelegationTokenSolrClient() throws Exception {\n    // Get token\n    String token = getDelegationToken(null, USER_1, primarySolrClient);\n    assertNotNull(token);\n\n    SolrRequest request = getAdminRequest(new ModifiableSolrParams());\n\n    // test without token\n    HttpSolrClient ss =\n        new HttpSolrClient.Builder(primarySolrClient.getBaseURL().toString())\n            .withResponseParser(primarySolrClient.getParser())\n            .build();\n    try {\n      doSolrRequest(ss, request, ErrorCode.UNAUTHORIZED.code);\n    } finally {\n      ss.close();\n    }\n\n    ss = new HttpSolrClient.Builder(primarySolrClient.getBaseURL().toString())\n        .withDelegationToken(token)\n        .withResponseParser(primarySolrClient.getParser())\n        .build();\n    try {\n      // test with token via property\n      doSolrRequest(ss, request, HttpStatus.SC_OK);\n\n      // test with param -- should throw an exception\n      ModifiableSolrParams tokenParam = new ModifiableSolrParams();\n      tokenParam.set(\"delegation\", \"invalidToken\");\n      try {\n        doSolrRequest(ss, getAdminRequest(tokenParam), ErrorCode.FORBIDDEN.code);\n        Assert.fail(\"Expected exception\");\n      } catch (IllegalArgumentException ex) {}\n    } finally {\n      ss.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"63a1978c6710c767fa084741e3d6424840003a62","date":1495850671,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/hadoop/TestDelegationWithHadoopAuth#testDelegationTokenSolrClient().mjava","pathOld":"solr/core/src/test/org/apache/solr/security/hadoop/TestDelegationWithHadoopAuth#testDelegationTokenSolrClient().mjava","sourceNew":"  /**\n   * Test HttpSolrServer's delegation token support\n   */\n  @Test\n  public void testDelegationTokenSolrClient() throws Exception {\n    // Get token\n    String token = getDelegationToken(null, USER_1, primarySolrClient);\n    assertNotNull(token);\n\n    SolrRequest request = getAdminRequest(new ModifiableSolrParams());\n\n    // test without token\n    HttpSolrClient ss =\n        new HttpSolrClient.Builder(primarySolrClient.getBaseURL().toString())\n            .withResponseParser(primarySolrClient.getParser())\n            .build();\n    try {\n      doSolrRequest(ss, request, ErrorCode.UNAUTHORIZED.code);\n    } finally {\n      ss.close();\n    }\n\n    ss = new HttpSolrClient.Builder(primarySolrClient.getBaseURL().toString())\n        .withKerberosDelegationToken(token)\n        .withResponseParser(primarySolrClient.getParser())\n        .build();\n    try {\n      // test with token via property\n      doSolrRequest(ss, request, HttpStatus.SC_OK);\n\n      // test with param -- should throw an exception\n      ModifiableSolrParams tokenParam = new ModifiableSolrParams();\n      tokenParam.set(\"delegation\", \"invalidToken\");\n      try {\n        doSolrRequest(ss, getAdminRequest(tokenParam), ErrorCode.FORBIDDEN.code);\n        Assert.fail(\"Expected exception\");\n      } catch (IllegalArgumentException ex) {}\n    } finally {\n      ss.close();\n    }\n  }\n\n","sourceOld":"  /**\n   * Test HttpSolrServer's delegation token support\n   */\n  @Test\n  public void testDelegationTokenSolrClient() throws Exception {\n    // Get token\n    String token = getDelegationToken(null, USER_1, primarySolrClient);\n    assertNotNull(token);\n\n    SolrRequest request = getAdminRequest(new ModifiableSolrParams());\n\n    // test without token\n    HttpSolrClient ss =\n        new HttpSolrClient.Builder(primarySolrClient.getBaseURL().toString())\n            .withResponseParser(primarySolrClient.getParser())\n            .build();\n    try {\n      doSolrRequest(ss, request, ErrorCode.UNAUTHORIZED.code);\n    } finally {\n      ss.close();\n    }\n\n    ss = new HttpSolrClient.Builder(primarySolrClient.getBaseURL().toString())\n        .withDelegationToken(token)\n        .withResponseParser(primarySolrClient.getParser())\n        .build();\n    try {\n      // test with token via property\n      doSolrRequest(ss, request, HttpStatus.SC_OK);\n\n      // test with param -- should throw an exception\n      ModifiableSolrParams tokenParam = new ModifiableSolrParams();\n      tokenParam.set(\"delegation\", \"invalidToken\");\n      try {\n        doSolrRequest(ss, getAdminRequest(tokenParam), ErrorCode.FORBIDDEN.code);\n        Assert.fail(\"Expected exception\");\n      } catch (IllegalArgumentException ex) {}\n    } finally {\n      ss.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1f5728f32a4a256b36cfabd7a2636452f599bb9","date":1496231774,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/security/hadoop/TestDelegationWithHadoopAuth#testDelegationTokenSolrClient().mjava","pathOld":"solr/core/src/test/org/apache/solr/security/hadoop/TestDelegationWithHadoopAuth#testDelegationTokenSolrClient().mjava","sourceNew":"  /**\n   * Test HttpSolrServer's delegation token support\n   */\n  @Test\n  public void testDelegationTokenSolrClient() throws Exception {\n    // Get token\n    String token = getDelegationToken(null, USER_1, primarySolrClient);\n    assertNotNull(token);\n\n    SolrRequest request = getAdminRequest(new ModifiableSolrParams());\n\n    // test without token\n    HttpSolrClient ss =\n        new HttpSolrClient.Builder(primarySolrClient.getBaseURL().toString())\n            .withResponseParser(primarySolrClient.getParser())\n            .build();\n    try {\n      doSolrRequest(ss, request, ErrorCode.UNAUTHORIZED.code);\n    } finally {\n      ss.close();\n    }\n\n    ss = new HttpSolrClient.Builder(primarySolrClient.getBaseURL().toString())\n        .withKerberosDelegationToken(token)\n        .withResponseParser(primarySolrClient.getParser())\n        .build();\n    try {\n      // test with token via property\n      doSolrRequest(ss, request, HttpStatus.SC_OK);\n\n      // test with param -- should throw an exception\n      ModifiableSolrParams tokenParam = new ModifiableSolrParams();\n      tokenParam.set(\"delegation\", \"invalidToken\");\n      try {\n        doSolrRequest(ss, getAdminRequest(tokenParam), ErrorCode.FORBIDDEN.code);\n        Assert.fail(\"Expected exception\");\n      } catch (IllegalArgumentException ex) {}\n    } finally {\n      ss.close();\n    }\n  }\n\n","sourceOld":"  /**\n   * Test HttpSolrServer's delegation token support\n   */\n  @Test\n  public void testDelegationTokenSolrClient() throws Exception {\n    // Get token\n    String token = getDelegationToken(null, USER_1, primarySolrClient);\n    assertNotNull(token);\n\n    SolrRequest request = getAdminRequest(new ModifiableSolrParams());\n\n    // test without token\n    HttpSolrClient ss =\n        new HttpSolrClient.Builder(primarySolrClient.getBaseURL().toString())\n            .withResponseParser(primarySolrClient.getParser())\n            .build();\n    try {\n      doSolrRequest(ss, request, ErrorCode.UNAUTHORIZED.code);\n    } finally {\n      ss.close();\n    }\n\n    ss = new HttpSolrClient.Builder(primarySolrClient.getBaseURL().toString())\n        .withDelegationToken(token)\n        .withResponseParser(primarySolrClient.getParser())\n        .build();\n    try {\n      // test with token via property\n      doSolrRequest(ss, request, HttpStatus.SC_OK);\n\n      // test with param -- should throw an exception\n      ModifiableSolrParams tokenParam = new ModifiableSolrParams();\n      tokenParam.set(\"delegation\", \"invalidToken\");\n      try {\n        doSolrRequest(ss, getAdminRequest(tokenParam), ErrorCode.FORBIDDEN.code);\n        Assert.fail(\"Expected exception\");\n      } catch (IllegalArgumentException ex) {}\n    } finally {\n      ss.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/security/hadoop/TestDelegationWithHadoopAuth#testDelegationTokenSolrClient().mjava","pathOld":"solr/core/src/test/org/apache/solr/security/hadoop/TestDelegationWithHadoopAuth#testDelegationTokenSolrClient().mjava","sourceNew":"  /**\n   * Test HttpSolrServer's delegation token support\n   */\n  @Test\n  public void testDelegationTokenSolrClient() throws Exception {\n    // Get token\n    String token = getDelegationToken(null, USER_1, primarySolrClient);\n    assertNotNull(token);\n\n    SolrRequest request = getAdminRequest(new ModifiableSolrParams());\n\n    // test without token\n    HttpSolrClient ss =\n        new HttpSolrClient.Builder(primarySolrClient.getBaseURL().toString())\n            .withResponseParser(primarySolrClient.getParser())\n            .build();\n    try {\n      doSolrRequest(ss, request, ErrorCode.UNAUTHORIZED.code);\n    } finally {\n      ss.close();\n    }\n\n    ss = new HttpSolrClient.Builder(primarySolrClient.getBaseURL().toString())\n        .withKerberosDelegationToken(token)\n        .withResponseParser(primarySolrClient.getParser())\n        .build();\n    try {\n      // test with token via property\n      doSolrRequest(ss, request, HttpStatus.SC_OK);\n\n      // test with param -- should throw an exception\n      ModifiableSolrParams tokenParam = new ModifiableSolrParams();\n      tokenParam.set(\"delegation\", \"invalidToken\");\n      try {\n        doSolrRequest(ss, getAdminRequest(tokenParam), ErrorCode.FORBIDDEN.code);\n        Assert.fail(\"Expected exception\");\n      } catch (IllegalArgumentException ex) {}\n    } finally {\n      ss.close();\n    }\n  }\n\n","sourceOld":"  /**\n   * Test HttpSolrServer's delegation token support\n   */\n  @Test\n  public void testDelegationTokenSolrClient() throws Exception {\n    // Get token\n    String token = getDelegationToken(null, USER_1, primarySolrClient);\n    assertNotNull(token);\n\n    SolrRequest request = getAdminRequest(new ModifiableSolrParams());\n\n    // test without token\n    HttpSolrClient ss =\n        new HttpSolrClient.Builder(primarySolrClient.getBaseURL().toString())\n            .withResponseParser(primarySolrClient.getParser())\n            .build();\n    try {\n      doSolrRequest(ss, request, ErrorCode.UNAUTHORIZED.code);\n    } finally {\n      ss.close();\n    }\n\n    ss = new HttpSolrClient.Builder(primarySolrClient.getBaseURL().toString())\n        .withDelegationToken(token)\n        .withResponseParser(primarySolrClient.getParser())\n        .build();\n    try {\n      // test with token via property\n      doSolrRequest(ss, request, HttpStatus.SC_OK);\n\n      // test with param -- should throw an exception\n      ModifiableSolrParams tokenParam = new ModifiableSolrParams();\n      tokenParam.set(\"delegation\", \"invalidToken\");\n      try {\n        doSolrRequest(ss, getAdminRequest(tokenParam), ErrorCode.FORBIDDEN.code);\n        Assert.fail(\"Expected exception\");\n      } catch (IllegalArgumentException ex) {}\n    } finally {\n      ss.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1a307447328c95a00248512b40d7a5ff12ecd6a","date":1564817449,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/hadoop/TestDelegationWithHadoopAuth#testDelegationTokenSolrClient().mjava","pathOld":"solr/core/src/test/org/apache/solr/security/hadoop/TestDelegationWithHadoopAuth#testDelegationTokenSolrClient().mjava","sourceNew":"  /**\n   * Test HttpSolrServer's delegation token support\n   */\n  @Test\n  public void testDelegationTokenSolrClient() throws Exception {\n    // Get token\n    String token = getDelegationToken(null, USER_1, primarySolrClient);\n    assertNotNull(token);\n\n    SolrRequest request = getAdminRequest(new ModifiableSolrParams());\n\n    // test without token\n    HttpSolrClient ss =\n        new HttpSolrClient.Builder(primarySolrClient.getBaseURL().toString())\n            .withResponseParser(primarySolrClient.getParser())\n            .build();\n    try {\n      doSolrRequest(ss, request, ErrorCode.UNAUTHORIZED.code);\n    } finally {\n      ss.close();\n    }\n\n    try (HttpSolrClient client = new HttpSolrClient.Builder(primarySolrClient.getBaseURL())\n             .withKerberosDelegationToken(token)\n             .withResponseParser(primarySolrClient.getParser())\n             .build()) {\n      // test with token via property\n      doSolrRequest(client, request, HttpStatus.SC_OK);\n\n      // test with param -- should throw an exception\n      ModifiableSolrParams tokenParam = new ModifiableSolrParams();\n      tokenParam.set(\"delegation\", \"invalidToken\");\n      expectThrows(IllegalArgumentException.class, () -> doSolrRequest(client, getAdminRequest(tokenParam), ErrorCode.FORBIDDEN.code));\n    }\n  }\n\n","sourceOld":"  /**\n   * Test HttpSolrServer's delegation token support\n   */\n  @Test\n  public void testDelegationTokenSolrClient() throws Exception {\n    // Get token\n    String token = getDelegationToken(null, USER_1, primarySolrClient);\n    assertNotNull(token);\n\n    SolrRequest request = getAdminRequest(new ModifiableSolrParams());\n\n    // test without token\n    HttpSolrClient ss =\n        new HttpSolrClient.Builder(primarySolrClient.getBaseURL().toString())\n            .withResponseParser(primarySolrClient.getParser())\n            .build();\n    try {\n      doSolrRequest(ss, request, ErrorCode.UNAUTHORIZED.code);\n    } finally {\n      ss.close();\n    }\n\n    ss = new HttpSolrClient.Builder(primarySolrClient.getBaseURL().toString())\n        .withKerberosDelegationToken(token)\n        .withResponseParser(primarySolrClient.getParser())\n        .build();\n    try {\n      // test with token via property\n      doSolrRequest(ss, request, HttpStatus.SC_OK);\n\n      // test with param -- should throw an exception\n      ModifiableSolrParams tokenParam = new ModifiableSolrParams();\n      tokenParam.set(\"delegation\", \"invalidToken\");\n      try {\n        doSolrRequest(ss, getAdminRequest(tokenParam), ErrorCode.FORBIDDEN.code);\n        Assert.fail(\"Expected exception\");\n      } catch (IllegalArgumentException ex) {}\n    } finally {\n      ss.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/security/hadoop/TestDelegationWithHadoopAuth#testDelegationTokenSolrClient().mjava","pathOld":"solr/core/src/test/org/apache/solr/security/hadoop/TestDelegationWithHadoopAuth#testDelegationTokenSolrClient().mjava","sourceNew":"  /**\n   * Test HttpSolrServer's delegation token support\n   */\n  @Test\n  public void testDelegationTokenSolrClient() throws Exception {\n    // Get token\n    String token = getDelegationToken(null, USER_1, primarySolrClient);\n    assertNotNull(token);\n\n    SolrRequest request = getAdminRequest(new ModifiableSolrParams());\n\n    // test without token\n    HttpSolrClient ss =\n        new HttpSolrClient.Builder(primarySolrClient.getBaseURL().toString())\n            .withResponseParser(primarySolrClient.getParser())\n            .build();\n    try {\n      doSolrRequest(ss, request, ErrorCode.UNAUTHORIZED.code);\n    } finally {\n      ss.close();\n    }\n\n    try (HttpSolrClient client = new HttpSolrClient.Builder(primarySolrClient.getBaseURL())\n             .withKerberosDelegationToken(token)\n             .withResponseParser(primarySolrClient.getParser())\n             .build()) {\n      // test with token via property\n      doSolrRequest(client, request, HttpStatus.SC_OK);\n\n      // test with param -- should throw an exception\n      ModifiableSolrParams tokenParam = new ModifiableSolrParams();\n      tokenParam.set(\"delegation\", \"invalidToken\");\n      expectThrows(IllegalArgumentException.class, () -> doSolrRequest(client, getAdminRequest(tokenParam), ErrorCode.FORBIDDEN.code));\n    }\n  }\n\n","sourceOld":"  /**\n   * Test HttpSolrServer's delegation token support\n   */\n  @Test\n  public void testDelegationTokenSolrClient() throws Exception {\n    // Get token\n    String token = getDelegationToken(null, USER_1, primarySolrClient);\n    assertNotNull(token);\n\n    SolrRequest request = getAdminRequest(new ModifiableSolrParams());\n\n    // test without token\n    HttpSolrClient ss =\n        new HttpSolrClient.Builder(primarySolrClient.getBaseURL().toString())\n            .withResponseParser(primarySolrClient.getParser())\n            .build();\n    try {\n      doSolrRequest(ss, request, ErrorCode.UNAUTHORIZED.code);\n    } finally {\n      ss.close();\n    }\n\n    ss = new HttpSolrClient.Builder(primarySolrClient.getBaseURL().toString())\n        .withKerberosDelegationToken(token)\n        .withResponseParser(primarySolrClient.getParser())\n        .build();\n    try {\n      // test with token via property\n      doSolrRequest(ss, request, HttpStatus.SC_OK);\n\n      // test with param -- should throw an exception\n      ModifiableSolrParams tokenParam = new ModifiableSolrParams();\n      tokenParam.set(\"delegation\", \"invalidToken\");\n      try {\n        doSolrRequest(ss, getAdminRequest(tokenParam), ErrorCode.FORBIDDEN.code);\n        Assert.fail(\"Expected exception\");\n      } catch (IllegalArgumentException ex) {}\n    } finally {\n      ss.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","date":1565097295,"type":3,"author":"Jan Høydahl","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/security/hadoop/TestDelegationWithHadoopAuth#testDelegationTokenSolrClient().mjava","pathOld":"solr/core/src/test/org/apache/solr/security/hadoop/TestDelegationWithHadoopAuth#testDelegationTokenSolrClient().mjava","sourceNew":"  /**\n   * Test HttpSolrServer's delegation token support\n   */\n  @Test\n  public void testDelegationTokenSolrClient() throws Exception {\n    // Get token\n    String token = getDelegationToken(null, USER_1, primarySolrClient);\n    assertNotNull(token);\n\n    SolrRequest request = getAdminRequest(new ModifiableSolrParams());\n\n    // test without token\n    HttpSolrClient ss =\n        new HttpSolrClient.Builder(primarySolrClient.getBaseURL().toString())\n            .withResponseParser(primarySolrClient.getParser())\n            .build();\n    try {\n      doSolrRequest(ss, request, ErrorCode.UNAUTHORIZED.code);\n    } finally {\n      ss.close();\n    }\n\n    try (HttpSolrClient client = new HttpSolrClient.Builder(primarySolrClient.getBaseURL())\n             .withKerberosDelegationToken(token)\n             .withResponseParser(primarySolrClient.getParser())\n             .build()) {\n      // test with token via property\n      doSolrRequest(client, request, HttpStatus.SC_OK);\n\n      // test with param -- should throw an exception\n      ModifiableSolrParams tokenParam = new ModifiableSolrParams();\n      tokenParam.set(\"delegation\", \"invalidToken\");\n      expectThrows(IllegalArgumentException.class, () -> doSolrRequest(client, getAdminRequest(tokenParam), ErrorCode.FORBIDDEN.code));\n    }\n  }\n\n","sourceOld":"  /**\n   * Test HttpSolrServer's delegation token support\n   */\n  @Test\n  public void testDelegationTokenSolrClient() throws Exception {\n    // Get token\n    String token = getDelegationToken(null, USER_1, primarySolrClient);\n    assertNotNull(token);\n\n    SolrRequest request = getAdminRequest(new ModifiableSolrParams());\n\n    // test without token\n    HttpSolrClient ss =\n        new HttpSolrClient.Builder(primarySolrClient.getBaseURL().toString())\n            .withResponseParser(primarySolrClient.getParser())\n            .build();\n    try {\n      doSolrRequest(ss, request, ErrorCode.UNAUTHORIZED.code);\n    } finally {\n      ss.close();\n    }\n\n    ss = new HttpSolrClient.Builder(primarySolrClient.getBaseURL().toString())\n        .withKerberosDelegationToken(token)\n        .withResponseParser(primarySolrClient.getParser())\n        .build();\n    try {\n      // test with token via property\n      doSolrRequest(ss, request, HttpStatus.SC_OK);\n\n      // test with param -- should throw an exception\n      ModifiableSolrParams tokenParam = new ModifiableSolrParams();\n      tokenParam.set(\"delegation\", \"invalidToken\");\n      try {\n        doSolrRequest(ss, getAdminRequest(tokenParam), ErrorCode.FORBIDDEN.code);\n        Assert.fail(\"Expected exception\");\n      } catch (IllegalArgumentException ex) {}\n    } finally {\n      ss.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98520789adb1d5ad05afb4956eca0944a929688","date":1592430701,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/hadoop/TestDelegationWithHadoopAuth#testDelegationTokenSolrClient().mjava","pathOld":"solr/core/src/test/org/apache/solr/security/hadoop/TestDelegationWithHadoopAuth#testDelegationTokenSolrClient().mjava","sourceNew":"  /**\n   * Test HttpSolrServer's delegation token support\n   */\n  @Test\n  public void testDelegationTokenSolrClient() throws Exception {\n    // Get token\n    String token = getDelegationToken(null, USER_1, primarySolrClient);\n    assertNotNull(token);\n\n    @SuppressWarnings({\"rawtypes\"})\n    SolrRequest request = getAdminRequest(new ModifiableSolrParams());\n\n    // test without token\n    HttpSolrClient ss =\n        new HttpSolrClient.Builder(primarySolrClient.getBaseURL().toString())\n            .withResponseParser(primarySolrClient.getParser())\n            .build();\n    try {\n      doSolrRequest(ss, request, ErrorCode.UNAUTHORIZED.code);\n    } finally {\n      ss.close();\n    }\n\n    try (HttpSolrClient client = new HttpSolrClient.Builder(primarySolrClient.getBaseURL())\n             .withKerberosDelegationToken(token)\n             .withResponseParser(primarySolrClient.getParser())\n             .build()) {\n      // test with token via property\n      doSolrRequest(client, request, HttpStatus.SC_OK);\n\n      // test with param -- should throw an exception\n      ModifiableSolrParams tokenParam = new ModifiableSolrParams();\n      tokenParam.set(\"delegation\", \"invalidToken\");\n      expectThrows(IllegalArgumentException.class, () -> doSolrRequest(client, getAdminRequest(tokenParam), ErrorCode.FORBIDDEN.code));\n    }\n  }\n\n","sourceOld":"  /**\n   * Test HttpSolrServer's delegation token support\n   */\n  @Test\n  public void testDelegationTokenSolrClient() throws Exception {\n    // Get token\n    String token = getDelegationToken(null, USER_1, primarySolrClient);\n    assertNotNull(token);\n\n    SolrRequest request = getAdminRequest(new ModifiableSolrParams());\n\n    // test without token\n    HttpSolrClient ss =\n        new HttpSolrClient.Builder(primarySolrClient.getBaseURL().toString())\n            .withResponseParser(primarySolrClient.getParser())\n            .build();\n    try {\n      doSolrRequest(ss, request, ErrorCode.UNAUTHORIZED.code);\n    } finally {\n      ss.close();\n    }\n\n    try (HttpSolrClient client = new HttpSolrClient.Builder(primarySolrClient.getBaseURL())\n             .withKerberosDelegationToken(token)\n             .withResponseParser(primarySolrClient.getParser())\n             .build()) {\n      // test with token via property\n      doSolrRequest(client, request, HttpStatus.SC_OK);\n\n      // test with param -- should throw an exception\n      ModifiableSolrParams tokenParam = new ModifiableSolrParams();\n      tokenParam.set(\"delegation\", \"invalidToken\");\n      expectThrows(IllegalArgumentException.class, () -> doSolrRequest(client, getAdminRequest(tokenParam), ErrorCode.FORBIDDEN.code));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["29887daf839649150d96855b142b76f5c45d60d2","63a1978c6710c767fa084741e3d6424840003a62"],"29887daf839649150d96855b142b76f5c45d60d2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"63a1978c6710c767fa084741e3d6424840003a62":["29887daf839649150d96855b142b76f5c45d60d2"],"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","29887daf839649150d96855b142b76f5c45d60d2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d1a307447328c95a00248512b40d7a5ff12ecd6a":["d1f5728f32a4a256b36cfabd7a2636452f599bb9"],"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693":["d1f5728f32a4a256b36cfabd7a2636452f599bb9","d1a307447328c95a00248512b40d7a5ff12ecd6a"],"d1f5728f32a4a256b36cfabd7a2636452f599bb9":["29887daf839649150d96855b142b76f5c45d60d2","63a1978c6710c767fa084741e3d6424840003a62"],"f8061ddd97f3352007d927dae445884a6f3d857b":["d1f5728f32a4a256b36cfabd7a2636452f599bb9","d1a307447328c95a00248512b40d7a5ff12ecd6a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e98520789adb1d5ad05afb4956eca0944a929688"],"e98520789adb1d5ad05afb4956eca0944a929688":["d1a307447328c95a00248512b40d7a5ff12ecd6a"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"29887daf839649150d96855b142b76f5c45d60d2":["e9017cf144952056066919f1ebc7897ff9bd71b1","63a1978c6710c767fa084741e3d6424840003a62","5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","d1f5728f32a4a256b36cfabd7a2636452f599bb9"],"63a1978c6710c767fa084741e3d6424840003a62":["e9017cf144952056066919f1ebc7897ff9bd71b1","d1f5728f32a4a256b36cfabd7a2636452f599bb9"],"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["29887daf839649150d96855b142b76f5c45d60d2","5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf"],"d1a307447328c95a00248512b40d7a5ff12ecd6a":["d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","f8061ddd97f3352007d927dae445884a6f3d857b","e98520789adb1d5ad05afb4956eca0944a929688"],"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693":[],"d1f5728f32a4a256b36cfabd7a2636452f599bb9":["d1a307447328c95a00248512b40d7a5ff12ecd6a","d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","f8061ddd97f3352007d927dae445884a6f3d857b"],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"e98520789adb1d5ad05afb4956eca0944a929688":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}