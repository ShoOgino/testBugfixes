{"path":"lucene/misc/src/test/org/apache/lucene/index/TestMultiPassIndexSplitter#testSplitRR().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/index/TestMultiPassIndexSplitter#testSplitRR().mjava","pathOld":"lucene/contrib/misc/src/test/org/apache/lucene/index/TestMultiPassIndexSplitter#testSplitRR().mjava","sourceNew":"  /**\n   * Test round-robin splitting.\n   */\n  public void testSplitRR() throws Exception {\n    MultiPassIndexSplitter splitter = new MultiPassIndexSplitter();\n    Directory[] dirs = new Directory[]{\n            newDirectory(),\n            newDirectory(),\n            newDirectory()\n    };\n    splitter.split(TEST_VERSION_CURRENT, input, dirs, false);\n    IndexReader ir;\n    ir = IndexReader.open(dirs[0]);\n    assertTrue(ir.numDocs() - NUM_DOCS / 3 <= 1); // rounding error\n    Document doc = ir.document(0);\n    assertEquals(\"0\", doc.get(\"id\"));\n    TermsEnum te = MultiFields.getTerms(ir, \"id\").iterator(null);\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seekCeil(new BytesRef(\"1\")));\n    assertNotSame(\"1\", te.term().utf8ToString());\n    ir.close();\n    ir = IndexReader.open(dirs[1]);\n    assertTrue(ir.numDocs() - NUM_DOCS / 3 <= 1);\n    doc = ir.document(0);\n    assertEquals(\"1\", doc.get(\"id\"));\n    te = MultiFields.getTerms(ir, \"id\").iterator(null);\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seekCeil(new BytesRef(\"0\")));\n\n    assertNotSame(\"0\", te.term().utf8ToString());\n    ir.close();\n    ir = IndexReader.open(dirs[2]);\n    assertTrue(ir.numDocs() - NUM_DOCS / 3 <= 1);\n    doc = ir.document(0);\n    assertEquals(\"2\", doc.get(\"id\"));\n\n    te = MultiFields.getTerms(ir, \"id\").iterator(null);\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seekCeil(new BytesRef(\"1\")));\n    assertNotSame(\"1\", te.term());\n\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seekCeil(new BytesRef(\"0\")));\n    assertNotSame(\"0\", te.term().utf8ToString());\n    ir.close();\n    for (Directory d : dirs)\n      d.close();\n  }\n\n","sourceOld":"  /**\n   * Test round-robin splitting.\n   */\n  public void testSplitRR() throws Exception {\n    MultiPassIndexSplitter splitter = new MultiPassIndexSplitter();\n    Directory[] dirs = new Directory[]{\n            newDirectory(),\n            newDirectory(),\n            newDirectory()\n    };\n    splitter.split(TEST_VERSION_CURRENT, input, dirs, false);\n    IndexReader ir;\n    ir = IndexReader.open(dirs[0]);\n    assertTrue(ir.numDocs() - NUM_DOCS / 3 <= 1); // rounding error\n    Document doc = ir.document(0);\n    assertEquals(\"0\", doc.get(\"id\"));\n    TermsEnum te = MultiFields.getTerms(ir, \"id\").iterator(null);\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seekCeil(new BytesRef(\"1\")));\n    assertNotSame(\"1\", te.term().utf8ToString());\n    ir.close();\n    ir = IndexReader.open(dirs[1]);\n    assertTrue(ir.numDocs() - NUM_DOCS / 3 <= 1);\n    doc = ir.document(0);\n    assertEquals(\"1\", doc.get(\"id\"));\n    te = MultiFields.getTerms(ir, \"id\").iterator(null);\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seekCeil(new BytesRef(\"0\")));\n\n    assertNotSame(\"0\", te.term().utf8ToString());\n    ir.close();\n    ir = IndexReader.open(dirs[2]);\n    assertTrue(ir.numDocs() - NUM_DOCS / 3 <= 1);\n    doc = ir.document(0);\n    assertEquals(\"2\", doc.get(\"id\"));\n\n    te = MultiFields.getTerms(ir, \"id\").iterator(null);\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seekCeil(new BytesRef(\"1\")));\n    assertNotSame(\"1\", te.term());\n\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seekCeil(new BytesRef(\"0\")));\n    assertNotSame(\"0\", te.term().utf8ToString());\n    ir.close();\n    for (Directory d : dirs)\n      d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","date":1338430031,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/index/TestMultiPassIndexSplitter#testSplitRR().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/index/TestMultiPassIndexSplitter#testSplitRR().mjava","sourceNew":"  /**\n   * Test round-robin splitting.\n   */\n  public void testSplitRR() throws Exception {\n    MultiPassIndexSplitter splitter = new MultiPassIndexSplitter();\n    Directory[] dirs = new Directory[]{\n            newDirectory(),\n            newDirectory(),\n            newDirectory()\n    };\n    splitter.split(TEST_VERSION_CURRENT, input, dirs, false);\n    IndexReader ir;\n    ir = DirectoryReader.open(dirs[0]);\n    assertTrue(ir.numDocs() - NUM_DOCS / 3 <= 1); // rounding error\n    Document doc = ir.document(0);\n    assertEquals(\"0\", doc.get(\"id\"));\n    TermsEnum te = MultiFields.getTerms(ir, \"id\").iterator(null);\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seekCeil(new BytesRef(\"1\")));\n    assertNotSame(\"1\", te.term().utf8ToString());\n    ir.close();\n    ir = DirectoryReader.open(dirs[1]);\n    assertTrue(ir.numDocs() - NUM_DOCS / 3 <= 1);\n    doc = ir.document(0);\n    assertEquals(\"1\", doc.get(\"id\"));\n    te = MultiFields.getTerms(ir, \"id\").iterator(null);\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seekCeil(new BytesRef(\"0\")));\n\n    assertNotSame(\"0\", te.term().utf8ToString());\n    ir.close();\n    ir = DirectoryReader.open(dirs[2]);\n    assertTrue(ir.numDocs() - NUM_DOCS / 3 <= 1);\n    doc = ir.document(0);\n    assertEquals(\"2\", doc.get(\"id\"));\n\n    te = MultiFields.getTerms(ir, \"id\").iterator(null);\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seekCeil(new BytesRef(\"1\")));\n    assertNotSame(\"1\", te.term());\n\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seekCeil(new BytesRef(\"0\")));\n    assertNotSame(\"0\", te.term().utf8ToString());\n    ir.close();\n    for (Directory d : dirs)\n      d.close();\n  }\n\n","sourceOld":"  /**\n   * Test round-robin splitting.\n   */\n  public void testSplitRR() throws Exception {\n    MultiPassIndexSplitter splitter = new MultiPassIndexSplitter();\n    Directory[] dirs = new Directory[]{\n            newDirectory(),\n            newDirectory(),\n            newDirectory()\n    };\n    splitter.split(TEST_VERSION_CURRENT, input, dirs, false);\n    IndexReader ir;\n    ir = IndexReader.open(dirs[0]);\n    assertTrue(ir.numDocs() - NUM_DOCS / 3 <= 1); // rounding error\n    Document doc = ir.document(0);\n    assertEquals(\"0\", doc.get(\"id\"));\n    TermsEnum te = MultiFields.getTerms(ir, \"id\").iterator(null);\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seekCeil(new BytesRef(\"1\")));\n    assertNotSame(\"1\", te.term().utf8ToString());\n    ir.close();\n    ir = IndexReader.open(dirs[1]);\n    assertTrue(ir.numDocs() - NUM_DOCS / 3 <= 1);\n    doc = ir.document(0);\n    assertEquals(\"1\", doc.get(\"id\"));\n    te = MultiFields.getTerms(ir, \"id\").iterator(null);\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seekCeil(new BytesRef(\"0\")));\n\n    assertNotSame(\"0\", te.term().utf8ToString());\n    ir.close();\n    ir = IndexReader.open(dirs[2]);\n    assertTrue(ir.numDocs() - NUM_DOCS / 3 <= 1);\n    doc = ir.document(0);\n    assertEquals(\"2\", doc.get(\"id\"));\n\n    te = MultiFields.getTerms(ir, \"id\").iterator(null);\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seekCeil(new BytesRef(\"1\")));\n    assertNotSame(\"1\", te.term());\n\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seekCeil(new BytesRef(\"0\")));\n    assertNotSame(\"0\", te.term().utf8ToString());\n    ir.close();\n    for (Directory d : dirs)\n      d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a7e4907084808af8fdb14b9809e6dceaccf6867b","date":1343473006,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/index/TestMultiPassIndexSplitter#testSplitRR().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/index/TestMultiPassIndexSplitter#testSplitRR().mjava","sourceNew":"  /**\n   * Test round-robin splitting.\n   */\n  public void testSplitRR() throws Exception {\n    MultiPassIndexSplitter splitter = new MultiPassIndexSplitter();\n    Directory[] dirs = new Directory[]{\n            newDirectory(),\n            newDirectory(),\n            newDirectory()\n    };\n    splitter.split(TEST_VERSION_CURRENT, input, dirs, false);\n    IndexReader ir;\n    ir = DirectoryReader.open(dirs[0]);\n    assertTrue(ir.numDocs() - NUM_DOCS / 3 <= 1); // rounding error\n    StoredDocument doc = ir.document(0);\n    assertEquals(\"0\", doc.get(\"id\"));\n    TermsEnum te = MultiFields.getTerms(ir, \"id\").iterator(null);\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seekCeil(new BytesRef(\"1\")));\n    assertNotSame(\"1\", te.term().utf8ToString());\n    ir.close();\n    ir = DirectoryReader.open(dirs[1]);\n    assertTrue(ir.numDocs() - NUM_DOCS / 3 <= 1);\n    doc = ir.document(0);\n    assertEquals(\"1\", doc.get(\"id\"));\n    te = MultiFields.getTerms(ir, \"id\").iterator(null);\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seekCeil(new BytesRef(\"0\")));\n\n    assertNotSame(\"0\", te.term().utf8ToString());\n    ir.close();\n    ir = DirectoryReader.open(dirs[2]);\n    assertTrue(ir.numDocs() - NUM_DOCS / 3 <= 1);\n    doc = ir.document(0);\n    assertEquals(\"2\", doc.get(\"id\"));\n\n    te = MultiFields.getTerms(ir, \"id\").iterator(null);\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seekCeil(new BytesRef(\"1\")));\n    assertNotSame(\"1\", te.term());\n\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seekCeil(new BytesRef(\"0\")));\n    assertNotSame(\"0\", te.term().utf8ToString());\n    ir.close();\n    for (Directory d : dirs)\n      d.close();\n  }\n\n","sourceOld":"  /**\n   * Test round-robin splitting.\n   */\n  public void testSplitRR() throws Exception {\n    MultiPassIndexSplitter splitter = new MultiPassIndexSplitter();\n    Directory[] dirs = new Directory[]{\n            newDirectory(),\n            newDirectory(),\n            newDirectory()\n    };\n    splitter.split(TEST_VERSION_CURRENT, input, dirs, false);\n    IndexReader ir;\n    ir = DirectoryReader.open(dirs[0]);\n    assertTrue(ir.numDocs() - NUM_DOCS / 3 <= 1); // rounding error\n    Document doc = ir.document(0);\n    assertEquals(\"0\", doc.get(\"id\"));\n    TermsEnum te = MultiFields.getTerms(ir, \"id\").iterator(null);\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seekCeil(new BytesRef(\"1\")));\n    assertNotSame(\"1\", te.term().utf8ToString());\n    ir.close();\n    ir = DirectoryReader.open(dirs[1]);\n    assertTrue(ir.numDocs() - NUM_DOCS / 3 <= 1);\n    doc = ir.document(0);\n    assertEquals(\"1\", doc.get(\"id\"));\n    te = MultiFields.getTerms(ir, \"id\").iterator(null);\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seekCeil(new BytesRef(\"0\")));\n\n    assertNotSame(\"0\", te.term().utf8ToString());\n    ir.close();\n    ir = DirectoryReader.open(dirs[2]);\n    assertTrue(ir.numDocs() - NUM_DOCS / 3 <= 1);\n    doc = ir.document(0);\n    assertEquals(\"2\", doc.get(\"id\"));\n\n    te = MultiFields.getTerms(ir, \"id\").iterator(null);\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seekCeil(new BytesRef(\"1\")));\n    assertNotSame(\"1\", te.term());\n\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seekCeil(new BytesRef(\"0\")));\n    assertNotSame(\"0\", te.term().utf8ToString());\n    ir.close();\n    for (Directory d : dirs)\n      d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d028314cced5858683a1bb4741423d0f934257b","date":1346596535,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/misc/src/test/org/apache/lucene/index/TestMultiPassIndexSplitter#testSplitRR().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/index/TestMultiPassIndexSplitter#testSplitRR().mjava","sourceNew":"  /**\n   * Test round-robin splitting.\n   */\n  public void testSplitRR() throws Exception {\n    MultiPassIndexSplitter splitter = new MultiPassIndexSplitter();\n    Directory[] dirs = new Directory[]{\n            newDirectory(),\n            newDirectory(),\n            newDirectory()\n    };\n    splitter.split(TEST_VERSION_CURRENT, input, dirs, false);\n    IndexReader ir;\n    ir = DirectoryReader.open(dirs[0]);\n    assertTrue(ir.numDocs() - NUM_DOCS / 3 <= 1); // rounding error\n    StoredDocument doc = ir.document(0);\n    assertEquals(\"0\", doc.get(\"id\"));\n    TermsEnum te = MultiFields.getTerms(ir, \"id\").iterator(null);\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seekCeil(new BytesRef(\"1\")));\n    assertNotSame(\"1\", te.term().utf8ToString());\n    ir.close();\n    ir = DirectoryReader.open(dirs[1]);\n    assertTrue(ir.numDocs() - NUM_DOCS / 3 <= 1);\n    doc = ir.document(0);\n    assertEquals(\"1\", doc.get(\"id\"));\n    te = MultiFields.getTerms(ir, \"id\").iterator(null);\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seekCeil(new BytesRef(\"0\")));\n\n    assertNotSame(\"0\", te.term().utf8ToString());\n    ir.close();\n    ir = DirectoryReader.open(dirs[2]);\n    assertTrue(ir.numDocs() - NUM_DOCS / 3 <= 1);\n    doc = ir.document(0);\n    assertEquals(\"2\", doc.get(\"id\"));\n\n    te = MultiFields.getTerms(ir, \"id\").iterator(null);\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seekCeil(new BytesRef(\"1\")));\n    assertNotSame(\"1\", te.term());\n\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seekCeil(new BytesRef(\"0\")));\n    assertNotSame(\"0\", te.term().utf8ToString());\n    ir.close();\n    for (Directory d : dirs)\n      d.close();\n  }\n\n","sourceOld":"  /**\n   * Test round-robin splitting.\n   */\n  public void testSplitRR() throws Exception {\n    MultiPassIndexSplitter splitter = new MultiPassIndexSplitter();\n    Directory[] dirs = new Directory[]{\n            newDirectory(),\n            newDirectory(),\n            newDirectory()\n    };\n    splitter.split(TEST_VERSION_CURRENT, input, dirs, false);\n    IndexReader ir;\n    ir = DirectoryReader.open(dirs[0]);\n    assertTrue(ir.numDocs() - NUM_DOCS / 3 <= 1); // rounding error\n    Document doc = ir.document(0);\n    assertEquals(\"0\", doc.get(\"id\"));\n    TermsEnum te = MultiFields.getTerms(ir, \"id\").iterator(null);\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seekCeil(new BytesRef(\"1\")));\n    assertNotSame(\"1\", te.term().utf8ToString());\n    ir.close();\n    ir = DirectoryReader.open(dirs[1]);\n    assertTrue(ir.numDocs() - NUM_DOCS / 3 <= 1);\n    doc = ir.document(0);\n    assertEquals(\"1\", doc.get(\"id\"));\n    te = MultiFields.getTerms(ir, \"id\").iterator(null);\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seekCeil(new BytesRef(\"0\")));\n\n    assertNotSame(\"0\", te.term().utf8ToString());\n    ir.close();\n    ir = DirectoryReader.open(dirs[2]);\n    assertTrue(ir.numDocs() - NUM_DOCS / 3 <= 1);\n    doc = ir.document(0);\n    assertEquals(\"2\", doc.get(\"id\"));\n\n    te = MultiFields.getTerms(ir, \"id\").iterator(null);\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seekCeil(new BytesRef(\"1\")));\n    assertNotSame(\"1\", te.term());\n\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seekCeil(new BytesRef(\"0\")));\n    assertNotSame(\"0\", te.term().utf8ToString());\n    ir.close();\n    for (Directory d : dirs)\n      d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19e497fe4da591a79332da97681b8017d9c61165","date":1409030374,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/index/TestMultiPassIndexSplitter#testSplitRR().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/index/TestMultiPassIndexSplitter#testSplitRR().mjava","sourceNew":"  /**\n   * Test round-robin splitting.\n   */\n  public void testSplitRR() throws Exception {\n    MultiPassIndexSplitter splitter = new MultiPassIndexSplitter();\n    Directory[] dirs = new Directory[]{\n            newDirectory(),\n            newDirectory(),\n            newDirectory()\n    };\n    splitter.split(Version.LATEST, input, dirs, false);\n    IndexReader ir;\n    ir = DirectoryReader.open(dirs[0]);\n    assertTrue(ir.numDocs() - NUM_DOCS / 3 <= 1); // rounding error\n    StoredDocument doc = ir.document(0);\n    assertEquals(\"0\", doc.get(\"id\"));\n    TermsEnum te = MultiFields.getTerms(ir, \"id\").iterator(null);\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seekCeil(new BytesRef(\"1\")));\n    assertNotSame(\"1\", te.term().utf8ToString());\n    ir.close();\n    ir = DirectoryReader.open(dirs[1]);\n    assertTrue(ir.numDocs() - NUM_DOCS / 3 <= 1);\n    doc = ir.document(0);\n    assertEquals(\"1\", doc.get(\"id\"));\n    te = MultiFields.getTerms(ir, \"id\").iterator(null);\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seekCeil(new BytesRef(\"0\")));\n\n    assertNotSame(\"0\", te.term().utf8ToString());\n    ir.close();\n    ir = DirectoryReader.open(dirs[2]);\n    assertTrue(ir.numDocs() - NUM_DOCS / 3 <= 1);\n    doc = ir.document(0);\n    assertEquals(\"2\", doc.get(\"id\"));\n\n    te = MultiFields.getTerms(ir, \"id\").iterator(null);\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seekCeil(new BytesRef(\"1\")));\n    assertNotSame(\"1\", te.term());\n\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seekCeil(new BytesRef(\"0\")));\n    assertNotSame(\"0\", te.term().utf8ToString());\n    ir.close();\n    for (Directory d : dirs)\n      d.close();\n  }\n\n","sourceOld":"  /**\n   * Test round-robin splitting.\n   */\n  public void testSplitRR() throws Exception {\n    MultiPassIndexSplitter splitter = new MultiPassIndexSplitter();\n    Directory[] dirs = new Directory[]{\n            newDirectory(),\n            newDirectory(),\n            newDirectory()\n    };\n    splitter.split(TEST_VERSION_CURRENT, input, dirs, false);\n    IndexReader ir;\n    ir = DirectoryReader.open(dirs[0]);\n    assertTrue(ir.numDocs() - NUM_DOCS / 3 <= 1); // rounding error\n    StoredDocument doc = ir.document(0);\n    assertEquals(\"0\", doc.get(\"id\"));\n    TermsEnum te = MultiFields.getTerms(ir, \"id\").iterator(null);\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seekCeil(new BytesRef(\"1\")));\n    assertNotSame(\"1\", te.term().utf8ToString());\n    ir.close();\n    ir = DirectoryReader.open(dirs[1]);\n    assertTrue(ir.numDocs() - NUM_DOCS / 3 <= 1);\n    doc = ir.document(0);\n    assertEquals(\"1\", doc.get(\"id\"));\n    te = MultiFields.getTerms(ir, \"id\").iterator(null);\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seekCeil(new BytesRef(\"0\")));\n\n    assertNotSame(\"0\", te.term().utf8ToString());\n    ir.close();\n    ir = DirectoryReader.open(dirs[2]);\n    assertTrue(ir.numDocs() - NUM_DOCS / 3 <= 1);\n    doc = ir.document(0);\n    assertEquals(\"2\", doc.get(\"id\"));\n\n    te = MultiFields.getTerms(ir, \"id\").iterator(null);\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seekCeil(new BytesRef(\"1\")));\n    assertNotSame(\"1\", te.term());\n\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seekCeil(new BytesRef(\"0\")));\n    assertNotSame(\"0\", te.term().utf8ToString());\n    ir.close();\n    for (Directory d : dirs)\n      d.close();\n  }\n\n","bugFix":null,"bugIntro":["505bff044e47a553f461b6f4484d1d08faf4ac85"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"505bff044e47a553f461b6f4484d1d08faf4ac85","date":1420728783,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/index/TestMultiPassIndexSplitter#testSplitRR().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/index/TestMultiPassIndexSplitter#testSplitRR().mjava","sourceNew":"  /**\n   * Test round-robin splitting.\n   */\n  public void testSplitRR() throws Exception {\n    MultiPassIndexSplitter splitter = new MultiPassIndexSplitter();\n    Directory[] dirs = new Directory[]{\n            newDirectory(),\n            newDirectory(),\n            newDirectory()\n    };\n    splitter.split(input, dirs, false);\n    IndexReader ir;\n    ir = DirectoryReader.open(dirs[0]);\n    assertTrue(ir.numDocs() - NUM_DOCS / 3 <= 1); // rounding error\n    StoredDocument doc = ir.document(0);\n    assertEquals(\"0\", doc.get(\"id\"));\n    TermsEnum te = MultiFields.getTerms(ir, \"id\").iterator(null);\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seekCeil(new BytesRef(\"1\")));\n    assertNotSame(\"1\", te.term().utf8ToString());\n    ir.close();\n    ir = DirectoryReader.open(dirs[1]);\n    assertTrue(ir.numDocs() - NUM_DOCS / 3 <= 1);\n    doc = ir.document(0);\n    assertEquals(\"1\", doc.get(\"id\"));\n    te = MultiFields.getTerms(ir, \"id\").iterator(null);\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seekCeil(new BytesRef(\"0\")));\n\n    assertNotSame(\"0\", te.term().utf8ToString());\n    ir.close();\n    ir = DirectoryReader.open(dirs[2]);\n    assertTrue(ir.numDocs() - NUM_DOCS / 3 <= 1);\n    doc = ir.document(0);\n    assertEquals(\"2\", doc.get(\"id\"));\n\n    te = MultiFields.getTerms(ir, \"id\").iterator(null);\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seekCeil(new BytesRef(\"1\")));\n    assertNotSame(\"1\", te.term());\n\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seekCeil(new BytesRef(\"0\")));\n    assertNotSame(\"0\", te.term().utf8ToString());\n    ir.close();\n    for (Directory d : dirs)\n      d.close();\n  }\n\n","sourceOld":"  /**\n   * Test round-robin splitting.\n   */\n  public void testSplitRR() throws Exception {\n    MultiPassIndexSplitter splitter = new MultiPassIndexSplitter();\n    Directory[] dirs = new Directory[]{\n            newDirectory(),\n            newDirectory(),\n            newDirectory()\n    };\n    splitter.split(Version.LATEST, input, dirs, false);\n    IndexReader ir;\n    ir = DirectoryReader.open(dirs[0]);\n    assertTrue(ir.numDocs() - NUM_DOCS / 3 <= 1); // rounding error\n    StoredDocument doc = ir.document(0);\n    assertEquals(\"0\", doc.get(\"id\"));\n    TermsEnum te = MultiFields.getTerms(ir, \"id\").iterator(null);\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seekCeil(new BytesRef(\"1\")));\n    assertNotSame(\"1\", te.term().utf8ToString());\n    ir.close();\n    ir = DirectoryReader.open(dirs[1]);\n    assertTrue(ir.numDocs() - NUM_DOCS / 3 <= 1);\n    doc = ir.document(0);\n    assertEquals(\"1\", doc.get(\"id\"));\n    te = MultiFields.getTerms(ir, \"id\").iterator(null);\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seekCeil(new BytesRef(\"0\")));\n\n    assertNotSame(\"0\", te.term().utf8ToString());\n    ir.close();\n    ir = DirectoryReader.open(dirs[2]);\n    assertTrue(ir.numDocs() - NUM_DOCS / 3 <= 1);\n    doc = ir.document(0);\n    assertEquals(\"2\", doc.get(\"id\"));\n\n    te = MultiFields.getTerms(ir, \"id\").iterator(null);\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seekCeil(new BytesRef(\"1\")));\n    assertNotSame(\"1\", te.term());\n\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seekCeil(new BytesRef(\"0\")));\n    assertNotSame(\"0\", te.term().utf8ToString());\n    ir.close();\n    for (Directory d : dirs)\n      d.close();\n  }\n\n","bugFix":["19e497fe4da591a79332da97681b8017d9c61165"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82","date":1428522487,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/index/TestMultiPassIndexSplitter#testSplitRR().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/index/TestMultiPassIndexSplitter#testSplitRR().mjava","sourceNew":"  /**\n   * Test round-robin splitting.\n   */\n  public void testSplitRR() throws Exception {\n    MultiPassIndexSplitter splitter = new MultiPassIndexSplitter();\n    Directory[] dirs = new Directory[]{\n            newDirectory(),\n            newDirectory(),\n            newDirectory()\n    };\n    splitter.split(input, dirs, false);\n    IndexReader ir;\n    ir = DirectoryReader.open(dirs[0]);\n    assertTrue(ir.numDocs() - NUM_DOCS / 3 <= 1); // rounding error\n    StoredDocument doc = ir.document(0);\n    assertEquals(\"0\", doc.get(\"id\"));\n    TermsEnum te = MultiFields.getTerms(ir, \"id\").iterator();\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seekCeil(new BytesRef(\"1\")));\n    assertNotSame(\"1\", te.term().utf8ToString());\n    ir.close();\n    ir = DirectoryReader.open(dirs[1]);\n    assertTrue(ir.numDocs() - NUM_DOCS / 3 <= 1);\n    doc = ir.document(0);\n    assertEquals(\"1\", doc.get(\"id\"));\n    te = MultiFields.getTerms(ir, \"id\").iterator();\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seekCeil(new BytesRef(\"0\")));\n\n    assertNotSame(\"0\", te.term().utf8ToString());\n    ir.close();\n    ir = DirectoryReader.open(dirs[2]);\n    assertTrue(ir.numDocs() - NUM_DOCS / 3 <= 1);\n    doc = ir.document(0);\n    assertEquals(\"2\", doc.get(\"id\"));\n\n    te = MultiFields.getTerms(ir, \"id\").iterator();\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seekCeil(new BytesRef(\"1\")));\n    assertNotSame(\"1\", te.term());\n\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seekCeil(new BytesRef(\"0\")));\n    assertNotSame(\"0\", te.term().utf8ToString());\n    ir.close();\n    for (Directory d : dirs)\n      d.close();\n  }\n\n","sourceOld":"  /**\n   * Test round-robin splitting.\n   */\n  public void testSplitRR() throws Exception {\n    MultiPassIndexSplitter splitter = new MultiPassIndexSplitter();\n    Directory[] dirs = new Directory[]{\n            newDirectory(),\n            newDirectory(),\n            newDirectory()\n    };\n    splitter.split(input, dirs, false);\n    IndexReader ir;\n    ir = DirectoryReader.open(dirs[0]);\n    assertTrue(ir.numDocs() - NUM_DOCS / 3 <= 1); // rounding error\n    StoredDocument doc = ir.document(0);\n    assertEquals(\"0\", doc.get(\"id\"));\n    TermsEnum te = MultiFields.getTerms(ir, \"id\").iterator(null);\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seekCeil(new BytesRef(\"1\")));\n    assertNotSame(\"1\", te.term().utf8ToString());\n    ir.close();\n    ir = DirectoryReader.open(dirs[1]);\n    assertTrue(ir.numDocs() - NUM_DOCS / 3 <= 1);\n    doc = ir.document(0);\n    assertEquals(\"1\", doc.get(\"id\"));\n    te = MultiFields.getTerms(ir, \"id\").iterator(null);\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seekCeil(new BytesRef(\"0\")));\n\n    assertNotSame(\"0\", te.term().utf8ToString());\n    ir.close();\n    ir = DirectoryReader.open(dirs[2]);\n    assertTrue(ir.numDocs() - NUM_DOCS / 3 <= 1);\n    doc = ir.document(0);\n    assertEquals(\"2\", doc.get(\"id\"));\n\n    te = MultiFields.getTerms(ir, \"id\").iterator(null);\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seekCeil(new BytesRef(\"1\")));\n    assertNotSame(\"1\", te.term());\n\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seekCeil(new BytesRef(\"0\")));\n    assertNotSame(\"0\", te.term().utf8ToString());\n    ir.close();\n    for (Directory d : dirs)\n      d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","date":1453060490,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/index/TestMultiPassIndexSplitter#testSplitRR().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/index/TestMultiPassIndexSplitter#testSplitRR().mjava","sourceNew":"  /**\n   * Test round-robin splitting.\n   */\n  public void testSplitRR() throws Exception {\n    MultiPassIndexSplitter splitter = new MultiPassIndexSplitter();\n    Directory[] dirs = new Directory[]{\n            newDirectory(),\n            newDirectory(),\n            newDirectory()\n    };\n    splitter.split(input, dirs, false);\n    IndexReader ir;\n    ir = DirectoryReader.open(dirs[0]);\n    assertTrue(ir.numDocs() - NUM_DOCS / 3 <= 1); // rounding error\n    Document doc = ir.document(0);\n    assertEquals(\"0\", doc.get(\"id\"));\n    TermsEnum te = MultiFields.getTerms(ir, \"id\").iterator();\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seekCeil(new BytesRef(\"1\")));\n    assertNotSame(\"1\", te.term().utf8ToString());\n    ir.close();\n    ir = DirectoryReader.open(dirs[1]);\n    assertTrue(ir.numDocs() - NUM_DOCS / 3 <= 1);\n    doc = ir.document(0);\n    assertEquals(\"1\", doc.get(\"id\"));\n    te = MultiFields.getTerms(ir, \"id\").iterator();\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seekCeil(new BytesRef(\"0\")));\n\n    assertNotSame(\"0\", te.term().utf8ToString());\n    ir.close();\n    ir = DirectoryReader.open(dirs[2]);\n    assertTrue(ir.numDocs() - NUM_DOCS / 3 <= 1);\n    doc = ir.document(0);\n    assertEquals(\"2\", doc.get(\"id\"));\n\n    te = MultiFields.getTerms(ir, \"id\").iterator();\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seekCeil(new BytesRef(\"1\")));\n    assertNotSame(\"1\", te.term());\n\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seekCeil(new BytesRef(\"0\")));\n    assertNotSame(\"0\", te.term().utf8ToString());\n    ir.close();\n    for (Directory d : dirs)\n      d.close();\n  }\n\n","sourceOld":"  /**\n   * Test round-robin splitting.\n   */\n  public void testSplitRR() throws Exception {\n    MultiPassIndexSplitter splitter = new MultiPassIndexSplitter();\n    Directory[] dirs = new Directory[]{\n            newDirectory(),\n            newDirectory(),\n            newDirectory()\n    };\n    splitter.split(input, dirs, false);\n    IndexReader ir;\n    ir = DirectoryReader.open(dirs[0]);\n    assertTrue(ir.numDocs() - NUM_DOCS / 3 <= 1); // rounding error\n    StoredDocument doc = ir.document(0);\n    assertEquals(\"0\", doc.get(\"id\"));\n    TermsEnum te = MultiFields.getTerms(ir, \"id\").iterator();\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seekCeil(new BytesRef(\"1\")));\n    assertNotSame(\"1\", te.term().utf8ToString());\n    ir.close();\n    ir = DirectoryReader.open(dirs[1]);\n    assertTrue(ir.numDocs() - NUM_DOCS / 3 <= 1);\n    doc = ir.document(0);\n    assertEquals(\"1\", doc.get(\"id\"));\n    te = MultiFields.getTerms(ir, \"id\").iterator();\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seekCeil(new BytesRef(\"0\")));\n\n    assertNotSame(\"0\", te.term().utf8ToString());\n    ir.close();\n    ir = DirectoryReader.open(dirs[2]);\n    assertTrue(ir.numDocs() - NUM_DOCS / 3 <= 1);\n    doc = ir.document(0);\n    assertEquals(\"2\", doc.get(\"id\"));\n\n    te = MultiFields.getTerms(ir, \"id\").iterator();\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seekCeil(new BytesRef(\"1\")));\n    assertNotSame(\"1\", te.term());\n\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seekCeil(new BytesRef(\"0\")));\n    assertNotSame(\"0\", te.term().utf8ToString());\n    ir.close();\n    for (Directory d : dirs)\n      d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"04e775de416dd2d8067b10db1c8af975a1d5017e","date":1539906554,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/index/TestMultiPassIndexSplitter#testSplitRR().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/index/TestMultiPassIndexSplitter#testSplitRR().mjava","sourceNew":"  /**\n   * Test round-robin splitting.\n   */\n  public void testSplitRR() throws Exception {\n    MultiPassIndexSplitter splitter = new MultiPassIndexSplitter();\n    Directory[] dirs = new Directory[]{\n            newDirectory(),\n            newDirectory(),\n            newDirectory()\n    };\n    splitter.split(input, dirs, false);\n    IndexReader ir;\n    ir = DirectoryReader.open(dirs[0]);\n    assertTrue(ir.numDocs() - NUM_DOCS / 3 <= 1); // rounding error\n    Document doc = ir.document(0);\n    assertEquals(\"0\", doc.get(\"id\"));\n    TermsEnum te = MultiTerms.getTerms(ir, \"id\").iterator();\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seekCeil(new BytesRef(\"1\")));\n    assertNotSame(\"1\", te.term().utf8ToString());\n    ir.close();\n    ir = DirectoryReader.open(dirs[1]);\n    assertTrue(ir.numDocs() - NUM_DOCS / 3 <= 1);\n    doc = ir.document(0);\n    assertEquals(\"1\", doc.get(\"id\"));\n    te = MultiTerms.getTerms(ir, \"id\").iterator();\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seekCeil(new BytesRef(\"0\")));\n\n    assertNotSame(\"0\", te.term().utf8ToString());\n    ir.close();\n    ir = DirectoryReader.open(dirs[2]);\n    assertTrue(ir.numDocs() - NUM_DOCS / 3 <= 1);\n    doc = ir.document(0);\n    assertEquals(\"2\", doc.get(\"id\"));\n\n    te = MultiTerms.getTerms(ir, \"id\").iterator();\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seekCeil(new BytesRef(\"1\")));\n    assertNotSame(\"1\", te.term());\n\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seekCeil(new BytesRef(\"0\")));\n    assertNotSame(\"0\", te.term().utf8ToString());\n    ir.close();\n    for (Directory d : dirs)\n      d.close();\n  }\n\n","sourceOld":"  /**\n   * Test round-robin splitting.\n   */\n  public void testSplitRR() throws Exception {\n    MultiPassIndexSplitter splitter = new MultiPassIndexSplitter();\n    Directory[] dirs = new Directory[]{\n            newDirectory(),\n            newDirectory(),\n            newDirectory()\n    };\n    splitter.split(input, dirs, false);\n    IndexReader ir;\n    ir = DirectoryReader.open(dirs[0]);\n    assertTrue(ir.numDocs() - NUM_DOCS / 3 <= 1); // rounding error\n    Document doc = ir.document(0);\n    assertEquals(\"0\", doc.get(\"id\"));\n    TermsEnum te = MultiFields.getTerms(ir, \"id\").iterator();\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seekCeil(new BytesRef(\"1\")));\n    assertNotSame(\"1\", te.term().utf8ToString());\n    ir.close();\n    ir = DirectoryReader.open(dirs[1]);\n    assertTrue(ir.numDocs() - NUM_DOCS / 3 <= 1);\n    doc = ir.document(0);\n    assertEquals(\"1\", doc.get(\"id\"));\n    te = MultiFields.getTerms(ir, \"id\").iterator();\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seekCeil(new BytesRef(\"0\")));\n\n    assertNotSame(\"0\", te.term().utf8ToString());\n    ir.close();\n    ir = DirectoryReader.open(dirs[2]);\n    assertTrue(ir.numDocs() - NUM_DOCS / 3 <= 1);\n    doc = ir.document(0);\n    assertEquals(\"2\", doc.get(\"id\"));\n\n    te = MultiFields.getTerms(ir, \"id\").iterator();\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seekCeil(new BytesRef(\"1\")));\n    assertNotSame(\"1\", te.term());\n\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seekCeil(new BytesRef(\"0\")));\n    assertNotSame(\"0\", te.term().utf8ToString());\n    ir.close();\n    for (Directory d : dirs)\n      d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82":["505bff044e47a553f461b6f4484d1d08faf4ac85"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1d028314cced5858683a1bb4741423d0f934257b":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","a7e4907084808af8fdb14b9809e6dceaccf6867b"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"04e775de416dd2d8067b10db1c8af975a1d5017e":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"505bff044e47a553f461b6f4484d1d08faf4ac85":["19e497fe4da591a79332da97681b8017d9c61165"],"a7e4907084808af8fdb14b9809e6dceaccf6867b":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["04e775de416dd2d8067b10db1c8af975a1d5017e"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82"],"19e497fe4da591a79332da97681b8017d9c61165":["1d028314cced5858683a1bb4741423d0f934257b"]},"commit2Childs":{"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"1d028314cced5858683a1bb4741423d0f934257b":["19e497fe4da591a79332da97681b8017d9c61165"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["1d028314cced5858683a1bb4741423d0f934257b","a7e4907084808af8fdb14b9809e6dceaccf6867b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"04e775de416dd2d8067b10db1c8af975a1d5017e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"505bff044e47a553f461b6f4484d1d08faf4ac85":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82"],"a7e4907084808af8fdb14b9809e6dceaccf6867b":["1d028314cced5858683a1bb4741423d0f934257b"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["04e775de416dd2d8067b10db1c8af975a1d5017e"],"19e497fe4da591a79332da97681b8017d9c61165":["505bff044e47a553f461b6f4484d1d08faf4ac85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}