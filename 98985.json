{"path":"lucene/core/src/java/org/apache/lucene/util/fst/FST#sizeInBytes().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#sizeInBytes().mjava","pathOld":"lucene/src/java/org/apache/lucene/util/fst/FST#sizeInBytes().mjava","sourceNew":"  /** Returns bytes used to represent the FST */\n  public int sizeInBytes() {\n    int size = bytes.length;\n    if (packed) {\n      size += nodeRefToAddress.length * RamUsageEstimator.NUM_BYTES_INT;\n    } else if (nodeAddress != null) {\n      size += nodeAddress.length * RamUsageEstimator.NUM_BYTES_INT;\n      size += inCounts.length * RamUsageEstimator.NUM_BYTES_INT;\n    }\n    return size;\n  }\n\n","sourceOld":"  /** Returns bytes used to represent the FST */\n  public int sizeInBytes() {\n    int size = bytes.length;\n    if (packed) {\n      size += nodeRefToAddress.length * RamUsageEstimator.NUM_BYTES_INT;\n    } else if (nodeAddress != null) {\n      size += nodeAddress.length * RamUsageEstimator.NUM_BYTES_INT;\n      size += inCounts.length * RamUsageEstimator.NUM_BYTES_INT;\n    }\n    return size;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"edb74c83fff94196b864e08ca033d92823252cb7","date":1339593164,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#sizeInBytes().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FST#sizeInBytes().mjava","sourceNew":"  /** Returns bytes used to represent the FST */\n  public int sizeInBytes() {\n    int size = bytes.length;\n    if (packed) {\n      size += nodeRefToAddress.ramBytesUsed();\n    } else if (nodeAddress != null) {\n      size += nodeAddress.ramBytesUsed();\n      size += inCounts.ramBytesUsed();\n    }\n    return size;\n  }\n\n","sourceOld":"  /** Returns bytes used to represent the FST */\n  public int sizeInBytes() {\n    int size = bytes.length;\n    if (packed) {\n      size += nodeRefToAddress.length * RamUsageEstimator.NUM_BYTES_INT;\n    } else if (nodeAddress != null) {\n      size += nodeAddress.length * RamUsageEstimator.NUM_BYTES_INT;\n      size += inCounts.length * RamUsageEstimator.NUM_BYTES_INT;\n    }\n    return size;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"87e78f3c129251e74ecc2ff73a32de0f27cf09d5","date":1358006150,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#sizeInBytes().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FST#sizeInBytes().mjava","sourceNew":"  /** Returns bytes used to represent the FST */\n  public int sizeInBytes() {\n    int size = bytes.getPosition();\n    if (packed) {\n      size += nodeRefToAddress.ramBytesUsed();\n    } else if (nodeAddress != null) {\n      size += nodeAddress.ramBytesUsed();\n      size += inCounts.ramBytesUsed();\n    }\n    return size;\n  }\n\n","sourceOld":"  /** Returns bytes used to represent the FST */\n  public int sizeInBytes() {\n    int size = bytes.length;\n    if (packed) {\n      size += nodeRefToAddress.ramBytesUsed();\n    } else if (nodeAddress != null) {\n      size += nodeAddress.ramBytesUsed();\n      size += inCounts.ramBytesUsed();\n    }\n    return size;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3c397b1515e745d8b12d70edfc0e17cb7eac7f0","date":1358188277,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#sizeInBytes().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FST#sizeInBytes().mjava","sourceNew":"  /** Returns bytes used to represent the FST */\n  public long sizeInBytes() {\n    long size = bytes.getPosition();\n    if (packed) {\n      size += nodeRefToAddress.ramBytesUsed();\n    } else if (nodeAddress != null) {\n      size += nodeAddress.ramBytesUsed();\n      size += inCounts.ramBytesUsed();\n    }\n    return size;\n  }\n\n","sourceOld":"  /** Returns bytes used to represent the FST */\n  public int sizeInBytes() {\n    int size = bytes.getPosition();\n    if (packed) {\n      size += nodeRefToAddress.ramBytesUsed();\n    } else if (nodeAddress != null) {\n      size += nodeAddress.ramBytesUsed();\n      size += inCounts.ramBytesUsed();\n    }\n    return size;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8917bfede3b4ca30f4305c1e391e9218959cd723","date":1358189662,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#sizeInBytes().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FST#sizeInBytes().mjava","sourceNew":"  /** Returns bytes used to represent the FST */\n  public long sizeInBytes() {\n    long size = bytes.getPosition();\n    if (packed) {\n      size += nodeRefToAddress.ramBytesUsed();\n    } else if (nodeAddress != null) {\n      size += nodeAddress.ramBytesUsed();\n      size += inCounts.ramBytesUsed();\n    }\n    return size;\n  }\n\n","sourceOld":"  /** Returns bytes used to represent the FST */\n  public int sizeInBytes() {\n    int size = bytes.length;\n    if (packed) {\n      size += nodeRefToAddress.ramBytesUsed();\n    } else if (nodeAddress != null) {\n      size += nodeAddress.ramBytesUsed();\n      size += inCounts.ramBytesUsed();\n    }\n    return size;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8405d98acebb7e287bf7ac40e937ba05b8661285","date":1401433291,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#ramBytesUsed().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FST#sizeInBytes().mjava","sourceNew":"  @Override\n  public long ramBytesUsed() {\n    long size = bytes.getPosition();\n    if (packed) {\n      size += nodeRefToAddress.ramBytesUsed();\n    } else if (nodeAddress != null) {\n      size += nodeAddress.ramBytesUsed();\n      size += inCounts.ramBytesUsed();\n    }\n    return size;\n  }\n\n","sourceOld":"  /** Returns bytes used to represent the FST */\n  public long sizeInBytes() {\n    long size = bytes.getPosition();\n    if (packed) {\n      size += nodeRefToAddress.ramBytesUsed();\n    } else if (nodeAddress != null) {\n      size += nodeAddress.ramBytesUsed();\n      size += inCounts.ramBytesUsed();\n    }\n    return size;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8405d98acebb7e287bf7ac40e937ba05b8661285":["d3c397b1515e745d8b12d70edfc0e17cb7eac7f0"],"d3c397b1515e745d8b12d70edfc0e17cb7eac7f0":["87e78f3c129251e74ecc2ff73a32de0f27cf09d5"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8917bfede3b4ca30f4305c1e391e9218959cd723":["edb74c83fff94196b864e08ca033d92823252cb7","d3c397b1515e745d8b12d70edfc0e17cb7eac7f0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"edb74c83fff94196b864e08ca033d92823252cb7":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"87e78f3c129251e74ecc2ff73a32de0f27cf09d5":["edb74c83fff94196b864e08ca033d92823252cb7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8405d98acebb7e287bf7ac40e937ba05b8661285"]},"commit2Childs":{"8405d98acebb7e287bf7ac40e937ba05b8661285":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d3c397b1515e745d8b12d70edfc0e17cb7eac7f0":["8405d98acebb7e287bf7ac40e937ba05b8661285","8917bfede3b4ca30f4305c1e391e9218959cd723"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["edb74c83fff94196b864e08ca033d92823252cb7"],"8917bfede3b4ca30f4305c1e391e9218959cd723":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"edb74c83fff94196b864e08ca033d92823252cb7":["8917bfede3b4ca30f4305c1e391e9218959cd723","87e78f3c129251e74ecc2ff73a32de0f27cf09d5"],"87e78f3c129251e74ecc2ff73a32de0f27cf09d5":["d3c397b1515e745d8b12d70edfc0e17cb7eac7f0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8917bfede3b4ca30f4305c1e391e9218959cd723","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}