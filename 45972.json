{"path":"src/java/org/apache/solr/analysis/WordDelimiterFilter#WordDelimiterFilter(TokenStream,int,int,int,int,int,int).mjava","commits":[{"id":"32765564f95f9c4beea3e121f7f8831ce1a89539","date":1181329347,"type":0,"author":"Mike Klaas","isMerge":false,"pathNew":"src/java/org/apache/solr/analysis/WordDelimiterFilter#WordDelimiterFilter(TokenStream,int,int,int,int,int,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * @param in Token stream to be filtered.\n   * @param generateWordParts If 1, causes parts of words to be generated: \"PowerShot\", \"Power-Shot\" => \"Power\" \"Shot\"\n   * @param generateNumberParts If 1, causes number subwords to be generated: \"500-42\" => \"500\" \"42\"\n   * @param catenateWords  1, causes maximum runs of word parts to be catenated: \"wi-fi\" => \"wifi\"\n   * @param catenateNumbers If 1, causes maximum runs of number parts to be catenated: \"500-42\" => \"50042\"\n   * @param catenateAll If 1, causes all subword parts to be catenated: \"wi-fi-4000\" => \"wifi4000\"\n   * @param splitOnCaseChange 1, causes \"PowerShot\" to be two tokens; (\"Power-Shot\" remains two parts regards)\n   */\n  public WordDelimiterFilter(TokenStream in, int generateWordParts, int generateNumberParts, int catenateWords, int catenateNumbers, int catenateAll, int splitOnCaseChange) {\n    this(in, defaultWordDelimTable, generateWordParts, generateNumberParts, catenateWords, catenateNumbers, catenateAll, splitOnCaseChange);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e0d0e8297e9b3e015826cdb7e42404953c339851","date":1215099614,"type":5,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/analysis/WordDelimiterFilter#WordDelimiterFilter(TokenStream,int,int,int,int,int,int,int).mjava","pathOld":"src/java/org/apache/solr/analysis/WordDelimiterFilter#WordDelimiterFilter(TokenStream,int,int,int,int,int,int).mjava","sourceNew":"  /**\n   * @param in Token stream to be filtered.\n   * @param generateWordParts If 1, causes parts of words to be generated: \"PowerShot\", \"Power-Shot\" => \"Power\" \"Shot\"\n   * @param generateNumberParts If 1, causes number subwords to be generated: \"500-42\" => \"500\" \"42\"\n   * @param catenateWords  1, causes maximum runs of word parts to be catenated: \"wi-fi\" => \"wifi\"\n   * @param catenateNumbers If 1, causes maximum runs of number parts to be catenated: \"500-42\" => \"50042\"\n   * @param catenateAll If 1, causes all subword parts to be catenated: \"wi-fi-4000\" => \"wifi4000\"\n   * @param splitOnCaseChange 1, causes \"PowerShot\" to be two tokens; (\"Power-Shot\" remains two parts regards)\n   * @param preserveOriginal If 1, includes original words in subwords: \"500-42\" => \"500\" \"42\" \"500-42\"\n   */\n  public WordDelimiterFilter(TokenStream in, int generateWordParts, int generateNumberParts, int catenateWords, int catenateNumbers, int catenateAll, int splitOnCaseChange, int preserveOriginal) {\n    this(in, defaultWordDelimTable, generateWordParts, generateNumberParts, catenateWords, catenateNumbers, catenateAll, splitOnCaseChange, preserveOriginal);\n  }\n\n","sourceOld":"  /**\n   * @param in Token stream to be filtered.\n   * @param generateWordParts If 1, causes parts of words to be generated: \"PowerShot\", \"Power-Shot\" => \"Power\" \"Shot\"\n   * @param generateNumberParts If 1, causes number subwords to be generated: \"500-42\" => \"500\" \"42\"\n   * @param catenateWords  1, causes maximum runs of word parts to be catenated: \"wi-fi\" => \"wifi\"\n   * @param catenateNumbers If 1, causes maximum runs of number parts to be catenated: \"500-42\" => \"50042\"\n   * @param catenateAll If 1, causes all subword parts to be catenated: \"wi-fi-4000\" => \"wifi4000\"\n   * @param splitOnCaseChange 1, causes \"PowerShot\" to be two tokens; (\"Power-Shot\" remains two parts regards)\n   */\n  public WordDelimiterFilter(TokenStream in, int generateWordParts, int generateNumberParts, int catenateWords, int catenateNumbers, int catenateAll, int splitOnCaseChange) {\n    this(in, defaultWordDelimTable, generateWordParts, generateNumberParts, catenateWords, catenateNumbers, catenateAll, splitOnCaseChange);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e0d0e8297e9b3e015826cdb7e42404953c339851":["32765564f95f9c4beea3e121f7f8831ce1a89539"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"32765564f95f9c4beea3e121f7f8831ce1a89539":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"e0d0e8297e9b3e015826cdb7e42404953c339851":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["32765564f95f9c4beea3e121f7f8831ce1a89539"],"32765564f95f9c4beea3e121f7f8831ce1a89539":["e0d0e8297e9b3e015826cdb7e42404953c339851"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e0d0e8297e9b3e015826cdb7e42404953c339851","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}