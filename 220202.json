{"path":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexReader#testGetFieldNames().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexReader#testGetFieldNames().mjava","pathOld":"backwards/src/test/org/apache/lucene/index/TestIndexReader#testGetFieldNames().mjava","sourceNew":"    /**\n     * Tests the IndexReader.getFieldNames implementation\n     * @throws Exception on error\n     */\n    public void testGetFieldNames() throws Exception\n    {\n        RAMDirectory d = new MockRAMDirectory();\n        // set up writer\n        IndexWriter writer = new IndexWriter(d, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n        addDocumentWithFields(writer);\n        writer.close();\n        // set up reader\n        IndexReader reader = IndexReader.open(d, false);\n        Collection fieldNames = reader.getFieldNames(IndexReader.FieldOption.ALL);\n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        reader.close();\n        // add more documents\n        writer = new IndexWriter(d, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), false, IndexWriter.MaxFieldLength.LIMITED);\n        // want to get some more segments here\n        for (int i = 0; i < 5*writer.getMergeFactor(); i++)\n        {\n            addDocumentWithFields(writer);\n        }\n        // new fields are in some different segments (we hope)\n        for (int i = 0; i < 5*writer.getMergeFactor(); i++)\n        {\n            addDocumentWithDifferentFields(writer);\n        }\n        // new termvector fields\n        for (int i = 0; i < 5*writer.getMergeFactor(); i++)\n        {\n          addDocumentWithTermVectorFields(writer);\n        }\n        \n        writer.close();\n        // verify fields again\n        reader = IndexReader.open(d, false);\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.ALL);\n        assertEquals(13, fieldNames.size());    // the following fields\n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        assertTrue(fieldNames.contains(\"keyword2\"));\n        assertTrue(fieldNames.contains(\"text2\"));\n        assertTrue(fieldNames.contains(\"unindexed2\"));\n        assertTrue(fieldNames.contains(\"unstored2\"));\n        assertTrue(fieldNames.contains(\"tvnot\"));\n        assertTrue(fieldNames.contains(\"termvector\"));\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        \n        // verify that only indexed fields were returned\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.INDEXED);\n        assertEquals(11, fieldNames.size());    // 6 original + the 5 termvector fields \n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        assertTrue(fieldNames.contains(\"keyword2\"));\n        assertTrue(fieldNames.contains(\"text2\"));\n        assertTrue(fieldNames.contains(\"unstored2\"));\n        assertTrue(fieldNames.contains(\"tvnot\"));\n        assertTrue(fieldNames.contains(\"termvector\"));\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        \n        // verify that only unindexed fields were returned\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.UNINDEXED);\n        assertEquals(2, fieldNames.size());    // the following fields\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unindexed2\"));\n                \n        // verify index term vector fields  \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR);\n        assertEquals(1, fieldNames.size());    // 1 field has term vector only\n        assertTrue(fieldNames.contains(\"termvector\"));\n        \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_OFFSET);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n                \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION_OFFSET);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        reader.close();\n        d.close();\n    }\n\n","sourceOld":"    /**\n     * Tests the IndexReader.getFieldNames implementation\n     * @throws Exception on error\n     */\n    public void testGetFieldNames() throws Exception\n    {\n        RAMDirectory d = new MockRAMDirectory();\n        // set up writer\n        IndexWriter writer = new IndexWriter(d, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n        addDocumentWithFields(writer);\n        writer.close();\n        // set up reader\n        IndexReader reader = IndexReader.open(d, false);\n        Collection fieldNames = reader.getFieldNames(IndexReader.FieldOption.ALL);\n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        reader.close();\n        // add more documents\n        writer = new IndexWriter(d, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), false, IndexWriter.MaxFieldLength.LIMITED);\n        // want to get some more segments here\n        for (int i = 0; i < 5*writer.getMergeFactor(); i++)\n        {\n            addDocumentWithFields(writer);\n        }\n        // new fields are in some different segments (we hope)\n        for (int i = 0; i < 5*writer.getMergeFactor(); i++)\n        {\n            addDocumentWithDifferentFields(writer);\n        }\n        // new termvector fields\n        for (int i = 0; i < 5*writer.getMergeFactor(); i++)\n        {\n          addDocumentWithTermVectorFields(writer);\n        }\n        \n        writer.close();\n        // verify fields again\n        reader = IndexReader.open(d, false);\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.ALL);\n        assertEquals(13, fieldNames.size());    // the following fields\n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        assertTrue(fieldNames.contains(\"keyword2\"));\n        assertTrue(fieldNames.contains(\"text2\"));\n        assertTrue(fieldNames.contains(\"unindexed2\"));\n        assertTrue(fieldNames.contains(\"unstored2\"));\n        assertTrue(fieldNames.contains(\"tvnot\"));\n        assertTrue(fieldNames.contains(\"termvector\"));\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        \n        // verify that only indexed fields were returned\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.INDEXED);\n        assertEquals(11, fieldNames.size());    // 6 original + the 5 termvector fields \n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        assertTrue(fieldNames.contains(\"keyword2\"));\n        assertTrue(fieldNames.contains(\"text2\"));\n        assertTrue(fieldNames.contains(\"unstored2\"));\n        assertTrue(fieldNames.contains(\"tvnot\"));\n        assertTrue(fieldNames.contains(\"termvector\"));\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        \n        // verify that only unindexed fields were returned\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.UNINDEXED);\n        assertEquals(2, fieldNames.size());    // the following fields\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unindexed2\"));\n                \n        // verify index term vector fields  \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR);\n        assertEquals(1, fieldNames.size());    // 1 field has term vector only\n        assertTrue(fieldNames.contains(\"termvector\"));\n        \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_OFFSET);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n                \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION_OFFSET);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        reader.close();\n        d.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexReader#testGetFieldNames().mjava","sourceNew":null,"sourceOld":"    /**\n     * Tests the IndexReader.getFieldNames implementation\n     * @throws Exception on error\n     */\n    public void testGetFieldNames() throws Exception\n    {\n        RAMDirectory d = new MockRAMDirectory();\n        // set up writer\n        IndexWriter writer = new IndexWriter(d, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n        addDocumentWithFields(writer);\n        writer.close();\n        // set up reader\n        IndexReader reader = IndexReader.open(d, false);\n        Collection fieldNames = reader.getFieldNames(IndexReader.FieldOption.ALL);\n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        reader.close();\n        // add more documents\n        writer = new IndexWriter(d, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), false, IndexWriter.MaxFieldLength.LIMITED);\n        // want to get some more segments here\n        for (int i = 0; i < 5*writer.getMergeFactor(); i++)\n        {\n            addDocumentWithFields(writer);\n        }\n        // new fields are in some different segments (we hope)\n        for (int i = 0; i < 5*writer.getMergeFactor(); i++)\n        {\n            addDocumentWithDifferentFields(writer);\n        }\n        // new termvector fields\n        for (int i = 0; i < 5*writer.getMergeFactor(); i++)\n        {\n          addDocumentWithTermVectorFields(writer);\n        }\n        \n        writer.close();\n        // verify fields again\n        reader = IndexReader.open(d, false);\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.ALL);\n        assertEquals(13, fieldNames.size());    // the following fields\n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        assertTrue(fieldNames.contains(\"keyword2\"));\n        assertTrue(fieldNames.contains(\"text2\"));\n        assertTrue(fieldNames.contains(\"unindexed2\"));\n        assertTrue(fieldNames.contains(\"unstored2\"));\n        assertTrue(fieldNames.contains(\"tvnot\"));\n        assertTrue(fieldNames.contains(\"termvector\"));\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        \n        // verify that only indexed fields were returned\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.INDEXED);\n        assertEquals(11, fieldNames.size());    // 6 original + the 5 termvector fields \n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        assertTrue(fieldNames.contains(\"keyword2\"));\n        assertTrue(fieldNames.contains(\"text2\"));\n        assertTrue(fieldNames.contains(\"unstored2\"));\n        assertTrue(fieldNames.contains(\"tvnot\"));\n        assertTrue(fieldNames.contains(\"termvector\"));\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        \n        // verify that only unindexed fields were returned\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.UNINDEXED);\n        assertEquals(2, fieldNames.size());    // the following fields\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unindexed2\"));\n                \n        // verify index term vector fields  \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR);\n        assertEquals(1, fieldNames.size());    // 1 field has term vector only\n        assertTrue(fieldNames.contains(\"termvector\"));\n        \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_OFFSET);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n                \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION_OFFSET);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        reader.close();\n        d.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}