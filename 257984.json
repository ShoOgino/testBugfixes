{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50CompoundFormat#write(Directory,SegmentInfo,Collection[String],CheckAbort,IOContext).mjava","commits":[{"id":"989d940c4bf402188f4f0ae13736836885227383","date":1412263633,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50CompoundFormat#write(Directory,SegmentInfo,Collection[String],CheckAbort,IOContext).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void write(Directory dir, SegmentInfo si, Collection<String> files, CheckAbort checkAbort, IOContext context) throws IOException {\n    String fileName = IndexFileNames.segmentFileName(si.name, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION);\n    try (CompoundFileDirectory cfs = new CompoundFileDirectory(si.getId(), dir, fileName, context, true)) {\n      for (String file : files) {\n        dir.copy(cfs, file, file, context);\n        checkAbort.work(dir.fileLength(file));\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f936b67ab4a872d22231aae4f63608e7f411071","date":1412266152,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50CompoundFormat#write(Directory,SegmentInfo,Collection[String],CheckAbort,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50CompoundFormat#write(Directory,SegmentInfo,Collection[String],CheckAbort,IOContext).mjava","sourceNew":"  @Override\n  public void write(Directory dir, SegmentInfo si, Collection<String> files, CheckAbort checkAbort, IOContext context) throws IOException {\n    String dataFile = IndexFileNames.segmentFileName(si.name, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION);\n    String entriesFile = IndexFileNames.segmentFileName(si.name, \"\", IndexFileNames.COMPOUND_FILE_ENTRIES_EXTENSION);\n    \n    try (IndexOutput data =    dir.createOutput(dataFile, context);\n         IndexOutput entries = dir.createOutput(entriesFile, context)) {\n      CodecUtil.writeSegmentHeader(data,    DATA_CODEC, VERSION_CURRENT, si.getId(), \"\");\n      CodecUtil.writeSegmentHeader(entries, ENTRY_CODEC, VERSION_CURRENT, si.getId(), \"\");\n      \n      // write number of files\n      entries.writeVInt(files.size());\n      for (String file : files) {\n        \n        // write bytes for file\n        long startOffset = data.getFilePointer();\n        try (IndexInput in = dir.openInput(file, IOContext.READONCE)) {\n          data.copyBytes(in, in.length());\n        }\n        long endOffset = data.getFilePointer();\n        \n        long length = endOffset - startOffset;\n        \n        // write entry for file\n        entries.writeString(IndexFileNames.stripSegmentName(file));\n        entries.writeLong(startOffset);\n        entries.writeLong(length);\n        \n        checkAbort.work(length);\n      }\n      \n      CodecUtil.writeFooter(data);\n      CodecUtil.writeFooter(entries);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void write(Directory dir, SegmentInfo si, Collection<String> files, CheckAbort checkAbort, IOContext context) throws IOException {\n    String fileName = IndexFileNames.segmentFileName(si.name, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION);\n    try (CompoundFileDirectory cfs = new CompoundFileDirectory(si.getId(), dir, fileName, context, true)) {\n      for (String file : files) {\n        dir.copy(cfs, file, file, context);\n        checkAbort.work(dir.fileLength(file));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9c34e07420c03a037d73169b35f349c2ad6fd8c7","date":1412304383,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50CompoundFormat#write(Directory,SegmentInfo,Collection[String],CheckAbort,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50CompoundFormat#write(Directory,SegmentInfo,Collection[String],CheckAbort,IOContext).mjava","sourceNew":"  @Override\n  public void write(Directory dir, SegmentInfo si, Collection<String> files, CheckAbort checkAbort, IOContext context) throws IOException {\n    String dataFile = IndexFileNames.segmentFileName(si.name, \"\", DATA_EXTENSION);\n    String entriesFile = IndexFileNames.segmentFileName(si.name, \"\", ENTRIES_EXTENSION);\n    \n    try (IndexOutput data =    dir.createOutput(dataFile, context);\n         IndexOutput entries = dir.createOutput(entriesFile, context)) {\n      CodecUtil.writeSegmentHeader(data,    DATA_CODEC, VERSION_CURRENT, si.getId(), \"\");\n      CodecUtil.writeSegmentHeader(entries, ENTRY_CODEC, VERSION_CURRENT, si.getId(), \"\");\n      \n      // write number of files\n      entries.writeVInt(files.size());\n      for (String file : files) {\n        \n        // write bytes for file\n        long startOffset = data.getFilePointer();\n        try (IndexInput in = dir.openInput(file, IOContext.READONCE)) {\n          data.copyBytes(in, in.length());\n        }\n        long endOffset = data.getFilePointer();\n        \n        long length = endOffset - startOffset;\n        \n        // write entry for file\n        entries.writeString(IndexFileNames.stripSegmentName(file));\n        entries.writeLong(startOffset);\n        entries.writeLong(length);\n        \n        checkAbort.work(length);\n      }\n      \n      CodecUtil.writeFooter(data);\n      CodecUtil.writeFooter(entries);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void write(Directory dir, SegmentInfo si, Collection<String> files, CheckAbort checkAbort, IOContext context) throws IOException {\n    String dataFile = IndexFileNames.segmentFileName(si.name, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION);\n    String entriesFile = IndexFileNames.segmentFileName(si.name, \"\", IndexFileNames.COMPOUND_FILE_ENTRIES_EXTENSION);\n    \n    try (IndexOutput data =    dir.createOutput(dataFile, context);\n         IndexOutput entries = dir.createOutput(entriesFile, context)) {\n      CodecUtil.writeSegmentHeader(data,    DATA_CODEC, VERSION_CURRENT, si.getId(), \"\");\n      CodecUtil.writeSegmentHeader(entries, ENTRY_CODEC, VERSION_CURRENT, si.getId(), \"\");\n      \n      // write number of files\n      entries.writeVInt(files.size());\n      for (String file : files) {\n        \n        // write bytes for file\n        long startOffset = data.getFilePointer();\n        try (IndexInput in = dir.openInput(file, IOContext.READONCE)) {\n          data.copyBytes(in, in.length());\n        }\n        long endOffset = data.getFilePointer();\n        \n        long length = endOffset - startOffset;\n        \n        // write entry for file\n        entries.writeString(IndexFileNames.stripSegmentName(file));\n        entries.writeLong(startOffset);\n        entries.writeLong(length);\n        \n        checkAbort.work(length);\n      }\n      \n      CodecUtil.writeFooter(data);\n      CodecUtil.writeFooter(entries);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9bb9a29a5e71a90295f175df8919802993142c9a","date":1412517673,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50CompoundFormat#write(Directory,SegmentInfo,Collection[String],CheckAbort,IOContext).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void write(Directory dir, SegmentInfo si, Collection<String> files, CheckAbort checkAbort, IOContext context) throws IOException {\n    String dataFile = IndexFileNames.segmentFileName(si.name, \"\", DATA_EXTENSION);\n    String entriesFile = IndexFileNames.segmentFileName(si.name, \"\", ENTRIES_EXTENSION);\n    \n    try (IndexOutput data =    dir.createOutput(dataFile, context);\n         IndexOutput entries = dir.createOutput(entriesFile, context)) {\n      CodecUtil.writeSegmentHeader(data,    DATA_CODEC, VERSION_CURRENT, si.getId(), \"\");\n      CodecUtil.writeSegmentHeader(entries, ENTRY_CODEC, VERSION_CURRENT, si.getId(), \"\");\n      \n      // write number of files\n      entries.writeVInt(files.size());\n      for (String file : files) {\n        \n        // write bytes for file\n        long startOffset = data.getFilePointer();\n        try (IndexInput in = dir.openInput(file, IOContext.READONCE)) {\n          data.copyBytes(in, in.length());\n        }\n        long endOffset = data.getFilePointer();\n        \n        long length = endOffset - startOffset;\n        \n        // write entry for file\n        entries.writeString(IndexFileNames.stripSegmentName(file));\n        entries.writeLong(startOffset);\n        entries.writeLong(length);\n        \n        checkAbort.work(length);\n      }\n      \n      CodecUtil.writeFooter(data);\n      CodecUtil.writeFooter(entries);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3384e6013a93e4d11b7d75388693f8d0388602bf","date":1413951663,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50CompoundFormat#write(Directory,SegmentInfo,Collection[String],CheckAbort,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50CompoundFormat#write(Directory,SegmentInfo,Collection[String],CheckAbort,IOContext).mjava","sourceNew":"  @Override\n  public void write(Directory dir, SegmentInfo si, Collection<String> files, CheckAbort checkAbort, IOContext context) throws IOException {\n    String dataFile = IndexFileNames.segmentFileName(si.name, \"\", DATA_EXTENSION);\n    String entriesFile = IndexFileNames.segmentFileName(si.name, \"\", ENTRIES_EXTENSION);\n    \n    try (IndexOutput data =    dir.createOutput(dataFile, context);\n         IndexOutput entries = dir.createOutput(entriesFile, context)) {\n      CodecUtil.writeIndexHeader(data,    DATA_CODEC, VERSION_CURRENT, si.getId(), \"\");\n      CodecUtil.writeIndexHeader(entries, ENTRY_CODEC, VERSION_CURRENT, si.getId(), \"\");\n      \n      // write number of files\n      entries.writeVInt(files.size());\n      for (String file : files) {\n        \n        // write bytes for file\n        long startOffset = data.getFilePointer();\n        try (IndexInput in = dir.openInput(file, IOContext.READONCE)) {\n          data.copyBytes(in, in.length());\n        }\n        long endOffset = data.getFilePointer();\n        \n        long length = endOffset - startOffset;\n        \n        // write entry for file\n        entries.writeString(IndexFileNames.stripSegmentName(file));\n        entries.writeLong(startOffset);\n        entries.writeLong(length);\n        \n        checkAbort.work(length);\n      }\n      \n      CodecUtil.writeFooter(data);\n      CodecUtil.writeFooter(entries);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void write(Directory dir, SegmentInfo si, Collection<String> files, CheckAbort checkAbort, IOContext context) throws IOException {\n    String dataFile = IndexFileNames.segmentFileName(si.name, \"\", DATA_EXTENSION);\n    String entriesFile = IndexFileNames.segmentFileName(si.name, \"\", ENTRIES_EXTENSION);\n    \n    try (IndexOutput data =    dir.createOutput(dataFile, context);\n         IndexOutput entries = dir.createOutput(entriesFile, context)) {\n      CodecUtil.writeSegmentHeader(data,    DATA_CODEC, VERSION_CURRENT, si.getId(), \"\");\n      CodecUtil.writeSegmentHeader(entries, ENTRY_CODEC, VERSION_CURRENT, si.getId(), \"\");\n      \n      // write number of files\n      entries.writeVInt(files.size());\n      for (String file : files) {\n        \n        // write bytes for file\n        long startOffset = data.getFilePointer();\n        try (IndexInput in = dir.openInput(file, IOContext.READONCE)) {\n          data.copyBytes(in, in.length());\n        }\n        long endOffset = data.getFilePointer();\n        \n        long length = endOffset - startOffset;\n        \n        // write entry for file\n        entries.writeString(IndexFileNames.stripSegmentName(file));\n        entries.writeLong(startOffset);\n        entries.writeLong(length);\n        \n        checkAbort.work(length);\n      }\n      \n      CodecUtil.writeFooter(data);\n      CodecUtil.writeFooter(entries);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db68c63cbfaa8698b9c4475f75ed2b9c9696d238","date":1414118621,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50CompoundFormat#write(Directory,SegmentInfo,Collection[String],CheckAbort,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50CompoundFormat#write(Directory,SegmentInfo,Collection[String],CheckAbort,IOContext).mjava","sourceNew":"  @Override\n  public void write(Directory dir, SegmentInfo si, Collection<String> files, CheckAbort checkAbort, IOContext context) throws IOException {\n    String dataFile = IndexFileNames.segmentFileName(si.name, \"\", DATA_EXTENSION);\n    String entriesFile = IndexFileNames.segmentFileName(si.name, \"\", ENTRIES_EXTENSION);\n    \n    try (IndexOutput data =    dir.createOutput(dataFile, context);\n         IndexOutput entries = dir.createOutput(entriesFile, context)) {\n      CodecUtil.writeIndexHeader(data,    DATA_CODEC, VERSION_CURRENT, si.getId(), \"\");\n      CodecUtil.writeIndexHeader(entries, ENTRY_CODEC, VERSION_CURRENT, si.getId(), \"\");\n      \n      // write number of files\n      entries.writeVInt(files.size());\n      for (String file : files) {\n        \n        // write bytes for file\n        long startOffset = data.getFilePointer();\n        try (IndexInput in = dir.openInput(file, IOContext.READONCE)) {\n          data.copyBytes(in, in.length());\n        }\n        long endOffset = data.getFilePointer();\n        \n        long length = endOffset - startOffset;\n        \n        // write entry for file\n        entries.writeString(IndexFileNames.stripSegmentName(file));\n        entries.writeLong(startOffset);\n        entries.writeLong(length);\n        \n        checkAbort.work(length);\n      }\n      \n      CodecUtil.writeFooter(data);\n      CodecUtil.writeFooter(entries);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void write(Directory dir, SegmentInfo si, Collection<String> files, CheckAbort checkAbort, IOContext context) throws IOException {\n    String dataFile = IndexFileNames.segmentFileName(si.name, \"\", DATA_EXTENSION);\n    String entriesFile = IndexFileNames.segmentFileName(si.name, \"\", ENTRIES_EXTENSION);\n    \n    try (IndexOutput data =    dir.createOutput(dataFile, context);\n         IndexOutput entries = dir.createOutput(entriesFile, context)) {\n      CodecUtil.writeSegmentHeader(data,    DATA_CODEC, VERSION_CURRENT, si.getId(), \"\");\n      CodecUtil.writeSegmentHeader(entries, ENTRY_CODEC, VERSION_CURRENT, si.getId(), \"\");\n      \n      // write number of files\n      entries.writeVInt(files.size());\n      for (String file : files) {\n        \n        // write bytes for file\n        long startOffset = data.getFilePointer();\n        try (IndexInput in = dir.openInput(file, IOContext.READONCE)) {\n          data.copyBytes(in, in.length());\n        }\n        long endOffset = data.getFilePointer();\n        \n        long length = endOffset - startOffset;\n        \n        // write entry for file\n        entries.writeString(IndexFileNames.stripSegmentName(file));\n        entries.writeLong(startOffset);\n        entries.writeLong(length);\n        \n        checkAbort.work(length);\n      }\n      \n      CodecUtil.writeFooter(data);\n      CodecUtil.writeFooter(entries);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5faf65b6692f15cca0f87bf8666c87899afc619f","date":1420468108,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50CompoundFormat#write(Directory,SegmentInfo,Collection[String],IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50CompoundFormat#write(Directory,SegmentInfo,Collection[String],CheckAbort,IOContext).mjava","sourceNew":"  @Override\n  public void write(Directory dir, SegmentInfo si, Collection<String> files, IOContext context) throws IOException {\n    String dataFile = IndexFileNames.segmentFileName(si.name, \"\", DATA_EXTENSION);\n    String entriesFile = IndexFileNames.segmentFileName(si.name, \"\", ENTRIES_EXTENSION);\n    \n    try (IndexOutput data =    dir.createOutput(dataFile, context);\n         IndexOutput entries = dir.createOutput(entriesFile, context)) {\n      CodecUtil.writeIndexHeader(data,    DATA_CODEC, VERSION_CURRENT, si.getId(), \"\");\n      CodecUtil.writeIndexHeader(entries, ENTRY_CODEC, VERSION_CURRENT, si.getId(), \"\");\n      \n      // write number of files\n      entries.writeVInt(files.size());\n      for (String file : files) {\n        \n        // write bytes for file\n        long startOffset = data.getFilePointer();\n        try (IndexInput in = dir.openInput(file, IOContext.READONCE)) {\n          data.copyBytes(in, in.length());\n        }\n        long endOffset = data.getFilePointer();\n        \n        long length = endOffset - startOffset;\n        \n        // write entry for file\n        entries.writeString(IndexFileNames.stripSegmentName(file));\n        entries.writeLong(startOffset);\n        entries.writeLong(length);\n      }\n      \n      CodecUtil.writeFooter(data);\n      CodecUtil.writeFooter(entries);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void write(Directory dir, SegmentInfo si, Collection<String> files, CheckAbort checkAbort, IOContext context) throws IOException {\n    String dataFile = IndexFileNames.segmentFileName(si.name, \"\", DATA_EXTENSION);\n    String entriesFile = IndexFileNames.segmentFileName(si.name, \"\", ENTRIES_EXTENSION);\n    \n    try (IndexOutput data =    dir.createOutput(dataFile, context);\n         IndexOutput entries = dir.createOutput(entriesFile, context)) {\n      CodecUtil.writeIndexHeader(data,    DATA_CODEC, VERSION_CURRENT, si.getId(), \"\");\n      CodecUtil.writeIndexHeader(entries, ENTRY_CODEC, VERSION_CURRENT, si.getId(), \"\");\n      \n      // write number of files\n      entries.writeVInt(files.size());\n      for (String file : files) {\n        \n        // write bytes for file\n        long startOffset = data.getFilePointer();\n        try (IndexInput in = dir.openInput(file, IOContext.READONCE)) {\n          data.copyBytes(in, in.length());\n        }\n        long endOffset = data.getFilePointer();\n        \n        long length = endOffset - startOffset;\n        \n        // write entry for file\n        entries.writeString(IndexFileNames.stripSegmentName(file));\n        entries.writeLong(startOffset);\n        entries.writeLong(length);\n        \n        checkAbort.work(length);\n      }\n      \n      CodecUtil.writeFooter(data);\n      CodecUtil.writeFooter(entries);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"989d940c4bf402188f4f0ae13736836885227383":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9bb9a29a5e71a90295f175df8919802993142c9a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9c34e07420c03a037d73169b35f349c2ad6fd8c7"],"9c34e07420c03a037d73169b35f349c2ad6fd8c7":["7f936b67ab4a872d22231aae4f63608e7f411071"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3384e6013a93e4d11b7d75388693f8d0388602bf":["9c34e07420c03a037d73169b35f349c2ad6fd8c7"],"5faf65b6692f15cca0f87bf8666c87899afc619f":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["9bb9a29a5e71a90295f175df8919802993142c9a","3384e6013a93e4d11b7d75388693f8d0388602bf"],"7f936b67ab4a872d22231aae4f63608e7f411071":["989d940c4bf402188f4f0ae13736836885227383"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5faf65b6692f15cca0f87bf8666c87899afc619f"]},"commit2Childs":{"989d940c4bf402188f4f0ae13736836885227383":["7f936b67ab4a872d22231aae4f63608e7f411071"],"9bb9a29a5e71a90295f175df8919802993142c9a":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"9c34e07420c03a037d73169b35f349c2ad6fd8c7":["9bb9a29a5e71a90295f175df8919802993142c9a","3384e6013a93e4d11b7d75388693f8d0388602bf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["989d940c4bf402188f4f0ae13736836885227383","9bb9a29a5e71a90295f175df8919802993142c9a"],"3384e6013a93e4d11b7d75388693f8d0388602bf":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"5faf65b6692f15cca0f87bf8666c87899afc619f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["5faf65b6692f15cca0f87bf8666c87899afc619f"],"7f936b67ab4a872d22231aae4f63608e7f411071":["9c34e07420c03a037d73169b35f349c2ad6fd8c7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}