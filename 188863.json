{"path":"solr/core/src/test/org/apache/solr/schema/DocValuesTest#testDocValuesMatch().mjava","commits":[{"id":"ffced88b5e83e2ec0a42723404a647e766d96b8c","date":1361398349,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/DocValuesTest#testDocValuesMatch().mjava","pathOld":"/dev/null","sourceNew":"  /** Tests the ability to do basic queries (without scoring, just match-only) on\n   *  docvalues fields that are not inverted (indexed \"forward\" only)\n   */\n  public void testDocValuesMatch() throws Exception {\n    assertU(adoc(\"id\", \"1\", \"floatdv\", \"2\", \"intdv\", \"3\", \"doubledv\", \"4\", \"longdv\", \"5\", \"datedv\", \"1995-12-31T23:59:59.999Z\", \"stringdv\", \"b\"));\n    assertU(adoc(\"id\", \"2\", \"floatdv\", \"5\", \"intdv\", \"4\", \"doubledv\", \"3\", \"longdv\", \"2\", \"datedv\", \"1997-12-31T23:59:59.999Z\", \"stringdv\", \"a\"));\n    assertU(adoc(\"id\", \"3\", \"floatdv\", \"3\", \"intdv\", \"1\", \"doubledv\", \"2\", \"longdv\", \"1\", \"datedv\", \"1996-12-31T23:59:59.999Z\", \"stringdv\", \"c\"));\n    assertU(adoc(\"id\", \"4\", \"floatdv\", \"3\", \"intdv\", \"1\", \"doubledv\", \"2\", \"longdv\", \"1\", \"datedv\", \"1996-12-31T23:59:59.999Z\", \"stringdv\", \"car\"));\n    assertU(commit());\n    \n    // string: termquery\n    assertQ(req(\"q\", \"stringdv:car\", \"sort\", \"id asc\"),\n        \"//*[@numFound='1']\",\n        \"//result/doc[1]/str[@name='id'][.=4]\"\n    );\n    \n    // string: range query\n    assertQ(req(\"q\", \"stringdv:[b TO d]\", \"sort\", \"id asc\"),\n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/str[@name='id'][.=1]\",\n        \"//result/doc[2]/str[@name='id'][.=3]\",\n        \"//result/doc[3]/str[@name='id'][.=4]\"\n    );\n    \n    // string: prefix query\n    assertQ(req(\"q\", \"stringdv:c*\", \"sort\", \"id asc\"),\n        \"//*[@numFound='2']\",\n        \"//result/doc[1]/str[@name='id'][.=3]\",\n        \"//result/doc[2]/str[@name='id'][.=4]\"\n    );\n    \n    // string: wildcard query\n    assertQ(req(\"q\", \"stringdv:c?r\", \"sort\", \"id asc\"),\n        \"//*[@numFound='1']\",\n        \"//result/doc[1]/str[@name='id'][.=4]\"\n    );\n    \n    // string: regexp query\n    assertQ(req(\"q\", \"stringdv:/c[a-b]r/\", \"sort\", \"id asc\"),\n        \"//*[@numFound='1']\",\n        \"//result/doc[1]/str[@name='id'][.=4]\"\n    );\n    \n    // float: termquery\n    assertQ(req(\"q\", \"floatdv:3\", \"sort\", \"id asc\"),\n        \"//*[@numFound='2']\",\n        \"//result/doc[1]/str[@name='id'][.=3]\",\n        \"//result/doc[2]/str[@name='id'][.=4]\"\n    );\n    \n    // float: rangequery\n    assertQ(req(\"q\", \"floatdv:[2 TO 3]\", \"sort\", \"id asc\"),\n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/str[@name='id'][.=1]\",\n        \"//result/doc[2]/str[@name='id'][.=3]\",\n        \"//result/doc[3]/str[@name='id'][.=4]\"\n    );\n    \n    // int: termquery\n    assertQ(req(\"q\", \"intdv:1\", \"sort\", \"id asc\"),\n        \"//*[@numFound='2']\",\n        \"//result/doc[1]/str[@name='id'][.=3]\",\n        \"//result/doc[2]/str[@name='id'][.=4]\"\n    );\n    \n    // int: rangequery\n    assertQ(req(\"q\", \"intdv:[3 TO 4]\", \"sort\", \"id asc\"),\n        \"//*[@numFound='2']\",\n        \"//result/doc[1]/str[@name='id'][.=1]\",\n        \"//result/doc[2]/str[@name='id'][.=2]\"\n    );\n    \n    // long: termquery\n    assertQ(req(\"q\", \"longdv:1\", \"sort\", \"id asc\"),\n        \"//*[@numFound='2']\",\n        \"//result/doc[1]/str[@name='id'][.=3]\",\n        \"//result/doc[2]/str[@name='id'][.=4]\"\n    );\n    \n    // long: rangequery\n    assertQ(req(\"q\", \"longdv:[1 TO 2]\", \"sort\", \"id asc\"),\n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/str[@name='id'][.=2]\",\n        \"//result/doc[2]/str[@name='id'][.=3]\",\n        \"//result/doc[3]/str[@name='id'][.=4]\"\n    );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c5cc22ce99f9ec86f1d1e55d36aaefac498ada97","date":1458507332,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/DocValuesTest#testDocValuesMatch().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/DocValuesTest#testDocValuesMatch().mjava","sourceNew":"  /** Tests the ability to do basic queries (without scoring, just match-only) on\n   *  docvalues fields that are not inverted (indexed \"forward\" only)\n   */\n  public void testDocValuesMatch() throws Exception {\n    assertU(adoc(\"id\", \"1\", \"floatdv\", \"2\", \"intdv\", \"3\", \"doubledv\", \"3.1\", \"longdv\", \"5\", \"datedv\", \"1995-12-31T23:59:59.999Z\", \"stringdv\", \"b\"));\n    assertU(adoc(\"id\", \"2\", \"floatdv\", \"-5\", \"intdv\", \"4\", \"doubledv\", \"-4.3\", \"longdv\", \"2\", \"datedv\", \"1997-12-31T23:59:59.999Z\", \"stringdv\", \"a\"));\n    assertU(adoc(\"id\", \"3\", \"floatdv\", \"3\", \"intdv\", \"1\", \"doubledv\", \"2.1\", \"longdv\", \"1\", \"datedv\", \"1996-12-31T23:59:59.999Z\", \"stringdv\", \"c\"));\n    assertU(adoc(\"id\", \"4\", \"floatdv\", \"3\", \"intdv\", \"-1\", \"doubledv\", \"1.5\", \"longdv\", \"1\", \"datedv\", \"1996-12-31T23:59:59.999Z\", \"stringdv\", \"car\"));\n    assertU(commit());\n\n    // string: termquery\n    assertQ(req(\"q\", \"stringdv:car\", \"sort\", \"id asc\"),\n        \"//*[@numFound='1']\",\n        \"//result/doc[1]/int[@name='id'][.=4]\"\n    );\n    \n    // string: range query\n    assertQ(req(\"q\", \"stringdv:[b TO d]\", \"sort\", \"id asc\"),\n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/int[@name='id'][.=1]\",\n        \"//result/doc[2]/int[@name='id'][.=3]\",\n        \"//result/doc[3]/int[@name='id'][.=4]\"\n    );\n    \n    // string: prefix query\n    assertQ(req(\"q\", \"stringdv:c*\", \"sort\", \"id asc\"),\n        \"//*[@numFound='2']\",\n        \"//result/doc[1]/int[@name='id'][.=3]\",\n        \"//result/doc[2]/int[@name='id'][.=4]\"\n    );\n    \n    // string: wildcard query\n    assertQ(req(\"q\", \"stringdv:c?r\", \"sort\", \"id asc\"),\n        \"//*[@numFound='1']\",\n        \"//result/doc[1]/int[@name='id'][.=4]\"\n    );\n    \n    // string: regexp query\n    assertQ(req(\"q\", \"stringdv:/c[a-b]r/\", \"sort\", \"id asc\"),\n        \"//*[@numFound='1']\",\n        \"//result/doc[1]/int[@name='id'][.=4]\"\n    );\n    \n    // float: termquery\n    assertQ(req(\"q\", \"floatdv:3\", \"sort\", \"id asc\"),\n        \"//*[@numFound='2']\",\n        \"//result/doc[1]/int[@name='id'][.=3]\",\n        \"//result/doc[2]/int[@name='id'][.=4]\"\n    );\n    \n    // float: rangequery\n    assertQ(req(\"q\", \"floatdv:[2 TO 3]\", \"sort\", \"id asc\"),\n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/int[@name='id'][.=1]\",\n        \"//result/doc[2]/int[@name='id'][.=3]\",\n        \"//result/doc[3]/int[@name='id'][.=4]\"\n    );\n    \n    // (neg) float: termquery\n    assertQ(req(\"q\", \"floatdv:\\\"-5\\\"\", \"sort\", \"id asc\"),\n            \"//*[@numFound='1']\",\n            \"//result/doc[1]/int[@name='id'][.=2]\"\n            );\n\n    // (neg) float: rangequery\n    assertQ(req(\"q\", \"floatdv:[-6 TO -4]\", \"sort\", \"id asc\"),\n            \"//*[@numFound='1']\",\n            \"//result/doc[1]/int[@name='id'][.=2]\"\n            );\n    \n    // (cross zero bounds) float: rangequery\n    assertQ(req(\"q\", \"floatdv:[-6 TO 2.1]\", \"sort\", \"id asc\"),\n            \"//*[@numFound='2']\",\n            \"//result/doc[1]/int[@name='id'][.=1]\",\n            \"//result/doc[2]/int[@name='id'][.=2]\"\n            );\n    \n    // int: termquery\n    assertQ(req(\"q\", \"intdv:1\", \"sort\", \"id asc\"),\n            \"//*[@numFound='1']\",\n            \"//result/doc[1]/int[@name='id'][.=3]\"\n            );\n    \n    // int: rangequery\n    assertQ(req(\"q\", \"intdv:[3 TO 4]\", \"sort\", \"id asc\"),\n            \"//*[@numFound='2']\",\n            \"//result/doc[1]/int[@name='id'][.=1]\",\n            \"//result/doc[2]/int[@name='id'][.=2]\"\n            );\n    \n    // (neg) int: termquery\n    assertQ(req(\"q\", \"intdv:\\\"-1\\\"\", \"sort\", \"id asc\"),\n            \"//*[@numFound='1']\",\n            \"//result/doc[1]/int[@name='id'][.=4]\"\n            );\n    \n    // (neg) int: rangequery\n    assertQ(req(\"q\", \"intdv:[-1 TO 1]\", \"sort\", \"id asc\"),\n            \"//*[@numFound='2']\",\n            \"//result/doc[1]/int[@name='id'][.=3]\",\n            \"//result/doc[2]/int[@name='id'][.=4]\"\n            );\n\n    // long: termquery\n    assertQ(req(\"q\", \"longdv:1\", \"sort\", \"id asc\"),\n        \"//*[@numFound='2']\",\n        \"//result/doc[1]/int[@name='id'][.=3]\",\n        \"//result/doc[2]/int[@name='id'][.=4]\"\n    );\n    \n    // long: rangequery\n    assertQ(req(\"q\", \"longdv:[1 TO 2]\", \"sort\", \"id asc\"),\n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/int[@name='id'][.=2]\",\n        \"//result/doc[2]/int[@name='id'][.=3]\",\n        \"//result/doc[3]/int[@name='id'][.=4]\"\n    );\n    \n    // double: termquery\n    assertQ(req(\"q\", \"doubledv:3.1\", \"sort\", \"id asc\"),\n            \"//*[@numFound='1']\",\n            \"//result/doc[1]/int[@name='id'][.=1]\"\n            );\n    \n    // double: rangequery\n    assertQ(req(\"q\", \"doubledv:[2 TO 3.3]\", \"sort\", \"id asc\"),\n            \"//*[@numFound='2']\",\n            \"//result/doc[1]/int[@name='id'][.=1]\",\n            \"//result/doc[2]/int[@name='id'][.=3]\"\n            );\n    \n    // (neg) double: termquery\n    assertQ(req(\"q\", \"doubledv:\\\"-4.3\\\"\", \"sort\", \"id asc\"),\n            \"//*[@numFound='1']\",\n            \"//result/doc[1]/int[@name='id'][.=2]\"\n            );\n    \n    // (neg) double: rangequery\n    assertQ(req(\"q\", \"doubledv:[-6 TO -4]\", \"sort\", \"id asc\"),\n            \"//*[@numFound='1']\",\n            \"//result/doc[1]/int[@name='id'][.=2]\"\n            );\n    \n    // (cross zero bounds) double: rangequery\n    assertQ(req(\"q\", \"doubledv:[-6 TO 2.0]\", \"sort\", \"id asc\"),\n            \"//*[@numFound='2']\",\n            \"//result/doc[1]/int[@name='id'][.=2]\",\n            \"//result/doc[2]/int[@name='id'][.=4]\"\n            );\n  }\n\n","sourceOld":"  /** Tests the ability to do basic queries (without scoring, just match-only) on\n   *  docvalues fields that are not inverted (indexed \"forward\" only)\n   */\n  public void testDocValuesMatch() throws Exception {\n    assertU(adoc(\"id\", \"1\", \"floatdv\", \"2\", \"intdv\", \"3\", \"doubledv\", \"4\", \"longdv\", \"5\", \"datedv\", \"1995-12-31T23:59:59.999Z\", \"stringdv\", \"b\"));\n    assertU(adoc(\"id\", \"2\", \"floatdv\", \"5\", \"intdv\", \"4\", \"doubledv\", \"3\", \"longdv\", \"2\", \"datedv\", \"1997-12-31T23:59:59.999Z\", \"stringdv\", \"a\"));\n    assertU(adoc(\"id\", \"3\", \"floatdv\", \"3\", \"intdv\", \"1\", \"doubledv\", \"2\", \"longdv\", \"1\", \"datedv\", \"1996-12-31T23:59:59.999Z\", \"stringdv\", \"c\"));\n    assertU(adoc(\"id\", \"4\", \"floatdv\", \"3\", \"intdv\", \"1\", \"doubledv\", \"2\", \"longdv\", \"1\", \"datedv\", \"1996-12-31T23:59:59.999Z\", \"stringdv\", \"car\"));\n    assertU(commit());\n    \n    // string: termquery\n    assertQ(req(\"q\", \"stringdv:car\", \"sort\", \"id asc\"),\n        \"//*[@numFound='1']\",\n        \"//result/doc[1]/str[@name='id'][.=4]\"\n    );\n    \n    // string: range query\n    assertQ(req(\"q\", \"stringdv:[b TO d]\", \"sort\", \"id asc\"),\n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/str[@name='id'][.=1]\",\n        \"//result/doc[2]/str[@name='id'][.=3]\",\n        \"//result/doc[3]/str[@name='id'][.=4]\"\n    );\n    \n    // string: prefix query\n    assertQ(req(\"q\", \"stringdv:c*\", \"sort\", \"id asc\"),\n        \"//*[@numFound='2']\",\n        \"//result/doc[1]/str[@name='id'][.=3]\",\n        \"//result/doc[2]/str[@name='id'][.=4]\"\n    );\n    \n    // string: wildcard query\n    assertQ(req(\"q\", \"stringdv:c?r\", \"sort\", \"id asc\"),\n        \"//*[@numFound='1']\",\n        \"//result/doc[1]/str[@name='id'][.=4]\"\n    );\n    \n    // string: regexp query\n    assertQ(req(\"q\", \"stringdv:/c[a-b]r/\", \"sort\", \"id asc\"),\n        \"//*[@numFound='1']\",\n        \"//result/doc[1]/str[@name='id'][.=4]\"\n    );\n    \n    // float: termquery\n    assertQ(req(\"q\", \"floatdv:3\", \"sort\", \"id asc\"),\n        \"//*[@numFound='2']\",\n        \"//result/doc[1]/str[@name='id'][.=3]\",\n        \"//result/doc[2]/str[@name='id'][.=4]\"\n    );\n    \n    // float: rangequery\n    assertQ(req(\"q\", \"floatdv:[2 TO 3]\", \"sort\", \"id asc\"),\n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/str[@name='id'][.=1]\",\n        \"//result/doc[2]/str[@name='id'][.=3]\",\n        \"//result/doc[3]/str[@name='id'][.=4]\"\n    );\n    \n    // int: termquery\n    assertQ(req(\"q\", \"intdv:1\", \"sort\", \"id asc\"),\n        \"//*[@numFound='2']\",\n        \"//result/doc[1]/str[@name='id'][.=3]\",\n        \"//result/doc[2]/str[@name='id'][.=4]\"\n    );\n    \n    // int: rangequery\n    assertQ(req(\"q\", \"intdv:[3 TO 4]\", \"sort\", \"id asc\"),\n        \"//*[@numFound='2']\",\n        \"//result/doc[1]/str[@name='id'][.=1]\",\n        \"//result/doc[2]/str[@name='id'][.=2]\"\n    );\n    \n    // long: termquery\n    assertQ(req(\"q\", \"longdv:1\", \"sort\", \"id asc\"),\n        \"//*[@numFound='2']\",\n        \"//result/doc[1]/str[@name='id'][.=3]\",\n        \"//result/doc[2]/str[@name='id'][.=4]\"\n    );\n    \n    // long: rangequery\n    assertQ(req(\"q\", \"longdv:[1 TO 2]\", \"sort\", \"id asc\"),\n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/str[@name='id'][.=2]\",\n        \"//result/doc[2]/str[@name='id'][.=3]\",\n        \"//result/doc[3]/str[@name='id'][.=4]\"\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f1f5e4b31ec44927335e2ad6eebc4c1f8c0abf5","date":1465691899,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/DocValuesTest#testDocValuesMatch().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/DocValuesTest#testDocValuesMatch().mjava","sourceNew":"  /** Tests the ability to do basic queries (without scoring, just match-only) on\n   *  docvalues fields that are not inverted (indexed \"forward\" only)\n   */\n  @Test\n  public void testDocValuesMatch() throws Exception {\n    assertU(adoc(\"id\", \"1\", \"floatdv\", \"2\", \"intdv\", \"3\", \"doubledv\", \"3.1\", \"longdv\", \"5\", \"datedv\", \"1995-12-31T23:59:59.999Z\", \"stringdv\", \"b\", \"booldv\", \"false\"));\n    assertU(adoc(\"id\", \"2\", \"floatdv\", \"-5\", \"intdv\", \"4\", \"doubledv\", \"-4.3\", \"longdv\", \"2\", \"datedv\", \"1997-12-31T23:59:59.999Z\", \"stringdv\", \"a\", \"booldv\", \"true\"));\n    assertU(adoc(\"id\", \"3\", \"floatdv\", \"3\", \"intdv\", \"1\", \"doubledv\", \"2.1\", \"longdv\", \"1\", \"datedv\", \"1996-12-31T23:59:59.999Z\", \"stringdv\", \"c\", \"booldv\", \"false\"));\n    assertU(adoc(\"id\", \"4\", \"floatdv\", \"3\", \"intdv\", \"-1\", \"doubledv\", \"1.5\", \"longdv\", \"1\", \"datedv\", \"1996-12-31T23:59:59.999Z\", \"stringdv\", \"car\"));\n    assertU(commit());\n\n    // string: termquery\n    assertQ(req(\"q\", \"stringdv:car\", \"sort\", \"id asc\"),\n        \"//*[@numFound='1']\",\n        \"//result/doc[1]/int[@name='id'][.=4]\"\n    );\n    \n    // string: range query\n    assertQ(req(\"q\", \"stringdv:[b TO d]\", \"sort\", \"id asc\"),\n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/int[@name='id'][.=1]\",\n        \"//result/doc[2]/int[@name='id'][.=3]\",\n        \"//result/doc[3]/int[@name='id'][.=4]\"\n    );\n    \n    // string: prefix query\n    assertQ(req(\"q\", \"stringdv:c*\", \"sort\", \"id asc\"),\n        \"//*[@numFound='2']\",\n        \"//result/doc[1]/int[@name='id'][.=3]\",\n        \"//result/doc[2]/int[@name='id'][.=4]\"\n    );\n    \n    // string: wildcard query\n    assertQ(req(\"q\", \"stringdv:c?r\", \"sort\", \"id asc\"),\n        \"//*[@numFound='1']\",\n        \"//result/doc[1]/int[@name='id'][.=4]\"\n    );\n    \n    // string: regexp query\n    assertQ(req(\"q\", \"stringdv:/c[a-b]r/\", \"sort\", \"id asc\"),\n        \"//*[@numFound='1']\",\n        \"//result/doc[1]/int[@name='id'][.=4]\"\n    );\n    \n    // float: termquery\n    assertQ(req(\"q\", \"floatdv:3\", \"sort\", \"id asc\"),\n        \"//*[@numFound='2']\",\n        \"//result/doc[1]/int[@name='id'][.=3]\",\n        \"//result/doc[2]/int[@name='id'][.=4]\"\n    );\n    \n    // float: rangequery\n    assertQ(req(\"q\", \"floatdv:[2 TO 3]\", \"sort\", \"id asc\"),\n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/int[@name='id'][.=1]\",\n        \"//result/doc[2]/int[@name='id'][.=3]\",\n        \"//result/doc[3]/int[@name='id'][.=4]\"\n    );\n    \n    // (neg) float: termquery\n    assertQ(req(\"q\", \"floatdv:\\\"-5\\\"\", \"sort\", \"id asc\"),\n            \"//*[@numFound='1']\",\n            \"//result/doc[1]/int[@name='id'][.=2]\"\n            );\n\n    // (neg) float: rangequery\n    assertQ(req(\"q\", \"floatdv:[-6 TO -4]\", \"sort\", \"id asc\"),\n            \"//*[@numFound='1']\",\n            \"//result/doc[1]/int[@name='id'][.=2]\"\n            );\n    \n    // (cross zero bounds) float: rangequery\n    assertQ(req(\"q\", \"floatdv:[-6 TO 2.1]\", \"sort\", \"id asc\"),\n            \"//*[@numFound='2']\",\n            \"//result/doc[1]/int[@name='id'][.=1]\",\n            \"//result/doc[2]/int[@name='id'][.=2]\"\n            );\n    \n    // int: termquery\n    assertQ(req(\"q\", \"intdv:1\", \"sort\", \"id asc\"),\n            \"//*[@numFound='1']\",\n            \"//result/doc[1]/int[@name='id'][.=3]\"\n            );\n    \n    // int: rangequery\n    assertQ(req(\"q\", \"intdv:[3 TO 4]\", \"sort\", \"id asc\"),\n            \"//*[@numFound='2']\",\n            \"//result/doc[1]/int[@name='id'][.=1]\",\n            \"//result/doc[2]/int[@name='id'][.=2]\"\n            );\n    \n    // (neg) int: termquery\n    assertQ(req(\"q\", \"intdv:\\\"-1\\\"\", \"sort\", \"id asc\"),\n            \"//*[@numFound='1']\",\n            \"//result/doc[1]/int[@name='id'][.=4]\"\n            );\n    \n    // (neg) int: rangequery\n    assertQ(req(\"q\", \"intdv:[-1 TO 1]\", \"sort\", \"id asc\"),\n            \"//*[@numFound='2']\",\n            \"//result/doc[1]/int[@name='id'][.=3]\",\n            \"//result/doc[2]/int[@name='id'][.=4]\"\n            );\n\n    // long: termquery\n    assertQ(req(\"q\", \"longdv:1\", \"sort\", \"id asc\"),\n        \"//*[@numFound='2']\",\n        \"//result/doc[1]/int[@name='id'][.=3]\",\n        \"//result/doc[2]/int[@name='id'][.=4]\"\n    );\n    \n    // long: rangequery\n    assertQ(req(\"q\", \"longdv:[1 TO 2]\", \"sort\", \"id asc\"),\n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/int[@name='id'][.=2]\",\n        \"//result/doc[2]/int[@name='id'][.=3]\",\n        \"//result/doc[3]/int[@name='id'][.=4]\"\n    );\n    \n    // double: termquery\n    assertQ(req(\"q\", \"doubledv:3.1\", \"sort\", \"id asc\"),\n            \"//*[@numFound='1']\",\n            \"//result/doc[1]/int[@name='id'][.=1]\"\n            );\n    \n    // double: rangequery\n    assertQ(req(\"q\", \"doubledv:[2 TO 3.3]\", \"sort\", \"id asc\"),\n            \"//*[@numFound='2']\",\n            \"//result/doc[1]/int[@name='id'][.=1]\",\n            \"//result/doc[2]/int[@name='id'][.=3]\"\n            );\n    \n    // (neg) double: termquery\n    assertQ(req(\"q\", \"doubledv:\\\"-4.3\\\"\", \"sort\", \"id asc\"),\n            \"//*[@numFound='1']\",\n            \"//result/doc[1]/int[@name='id'][.=2]\"\n            );\n    \n    // (neg) double: rangequery\n    assertQ(req(\"q\", \"doubledv:[-6 TO -4]\", \"sort\", \"id asc\"),\n            \"//*[@numFound='1']\",\n            \"//result/doc[1]/int[@name='id'][.=2]\"\n            );\n    \n    // (cross zero bounds) double: rangequery\n    assertQ(req(\"q\", \"doubledv:[-6 TO 2.0]\", \"sort\", \"id asc\"),\n            \"//*[@numFound='2']\",\n            \"//result/doc[1]/int[@name='id'][.=2]\",\n            \"//result/doc[2]/int[@name='id'][.=4]\"\n            );\n    // boolean basic queries:\n\n    assertQ(req(\"q\", \"booldv:false\", \"sort\", \"id asc\"),\n        \"//*[@numFound='2']\",\n        \"//result/doc[1]/int[@name='id'][.=1]\",\n        \"//result/doc[2]/int[@name='id'][.=3]\"\n    );\n\n    assertQ(req(\"q\", \"booldv:true\", \"sort\", \"id asc\"),\n        \"//*[@numFound='2']\",\n        \"//result/doc[1]/int[@name='id'][.=2]\",\n        \"//result/doc[2]/int[@name='id'][.=4]\"\n    );\n\n  }\n\n","sourceOld":"  /** Tests the ability to do basic queries (without scoring, just match-only) on\n   *  docvalues fields that are not inverted (indexed \"forward\" only)\n   */\n  public void testDocValuesMatch() throws Exception {\n    assertU(adoc(\"id\", \"1\", \"floatdv\", \"2\", \"intdv\", \"3\", \"doubledv\", \"3.1\", \"longdv\", \"5\", \"datedv\", \"1995-12-31T23:59:59.999Z\", \"stringdv\", \"b\"));\n    assertU(adoc(\"id\", \"2\", \"floatdv\", \"-5\", \"intdv\", \"4\", \"doubledv\", \"-4.3\", \"longdv\", \"2\", \"datedv\", \"1997-12-31T23:59:59.999Z\", \"stringdv\", \"a\"));\n    assertU(adoc(\"id\", \"3\", \"floatdv\", \"3\", \"intdv\", \"1\", \"doubledv\", \"2.1\", \"longdv\", \"1\", \"datedv\", \"1996-12-31T23:59:59.999Z\", \"stringdv\", \"c\"));\n    assertU(adoc(\"id\", \"4\", \"floatdv\", \"3\", \"intdv\", \"-1\", \"doubledv\", \"1.5\", \"longdv\", \"1\", \"datedv\", \"1996-12-31T23:59:59.999Z\", \"stringdv\", \"car\"));\n    assertU(commit());\n\n    // string: termquery\n    assertQ(req(\"q\", \"stringdv:car\", \"sort\", \"id asc\"),\n        \"//*[@numFound='1']\",\n        \"//result/doc[1]/int[@name='id'][.=4]\"\n    );\n    \n    // string: range query\n    assertQ(req(\"q\", \"stringdv:[b TO d]\", \"sort\", \"id asc\"),\n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/int[@name='id'][.=1]\",\n        \"//result/doc[2]/int[@name='id'][.=3]\",\n        \"//result/doc[3]/int[@name='id'][.=4]\"\n    );\n    \n    // string: prefix query\n    assertQ(req(\"q\", \"stringdv:c*\", \"sort\", \"id asc\"),\n        \"//*[@numFound='2']\",\n        \"//result/doc[1]/int[@name='id'][.=3]\",\n        \"//result/doc[2]/int[@name='id'][.=4]\"\n    );\n    \n    // string: wildcard query\n    assertQ(req(\"q\", \"stringdv:c?r\", \"sort\", \"id asc\"),\n        \"//*[@numFound='1']\",\n        \"//result/doc[1]/int[@name='id'][.=4]\"\n    );\n    \n    // string: regexp query\n    assertQ(req(\"q\", \"stringdv:/c[a-b]r/\", \"sort\", \"id asc\"),\n        \"//*[@numFound='1']\",\n        \"//result/doc[1]/int[@name='id'][.=4]\"\n    );\n    \n    // float: termquery\n    assertQ(req(\"q\", \"floatdv:3\", \"sort\", \"id asc\"),\n        \"//*[@numFound='2']\",\n        \"//result/doc[1]/int[@name='id'][.=3]\",\n        \"//result/doc[2]/int[@name='id'][.=4]\"\n    );\n    \n    // float: rangequery\n    assertQ(req(\"q\", \"floatdv:[2 TO 3]\", \"sort\", \"id asc\"),\n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/int[@name='id'][.=1]\",\n        \"//result/doc[2]/int[@name='id'][.=3]\",\n        \"//result/doc[3]/int[@name='id'][.=4]\"\n    );\n    \n    // (neg) float: termquery\n    assertQ(req(\"q\", \"floatdv:\\\"-5\\\"\", \"sort\", \"id asc\"),\n            \"//*[@numFound='1']\",\n            \"//result/doc[1]/int[@name='id'][.=2]\"\n            );\n\n    // (neg) float: rangequery\n    assertQ(req(\"q\", \"floatdv:[-6 TO -4]\", \"sort\", \"id asc\"),\n            \"//*[@numFound='1']\",\n            \"//result/doc[1]/int[@name='id'][.=2]\"\n            );\n    \n    // (cross zero bounds) float: rangequery\n    assertQ(req(\"q\", \"floatdv:[-6 TO 2.1]\", \"sort\", \"id asc\"),\n            \"//*[@numFound='2']\",\n            \"//result/doc[1]/int[@name='id'][.=1]\",\n            \"//result/doc[2]/int[@name='id'][.=2]\"\n            );\n    \n    // int: termquery\n    assertQ(req(\"q\", \"intdv:1\", \"sort\", \"id asc\"),\n            \"//*[@numFound='1']\",\n            \"//result/doc[1]/int[@name='id'][.=3]\"\n            );\n    \n    // int: rangequery\n    assertQ(req(\"q\", \"intdv:[3 TO 4]\", \"sort\", \"id asc\"),\n            \"//*[@numFound='2']\",\n            \"//result/doc[1]/int[@name='id'][.=1]\",\n            \"//result/doc[2]/int[@name='id'][.=2]\"\n            );\n    \n    // (neg) int: termquery\n    assertQ(req(\"q\", \"intdv:\\\"-1\\\"\", \"sort\", \"id asc\"),\n            \"//*[@numFound='1']\",\n            \"//result/doc[1]/int[@name='id'][.=4]\"\n            );\n    \n    // (neg) int: rangequery\n    assertQ(req(\"q\", \"intdv:[-1 TO 1]\", \"sort\", \"id asc\"),\n            \"//*[@numFound='2']\",\n            \"//result/doc[1]/int[@name='id'][.=3]\",\n            \"//result/doc[2]/int[@name='id'][.=4]\"\n            );\n\n    // long: termquery\n    assertQ(req(\"q\", \"longdv:1\", \"sort\", \"id asc\"),\n        \"//*[@numFound='2']\",\n        \"//result/doc[1]/int[@name='id'][.=3]\",\n        \"//result/doc[2]/int[@name='id'][.=4]\"\n    );\n    \n    // long: rangequery\n    assertQ(req(\"q\", \"longdv:[1 TO 2]\", \"sort\", \"id asc\"),\n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/int[@name='id'][.=2]\",\n        \"//result/doc[2]/int[@name='id'][.=3]\",\n        \"//result/doc[3]/int[@name='id'][.=4]\"\n    );\n    \n    // double: termquery\n    assertQ(req(\"q\", \"doubledv:3.1\", \"sort\", \"id asc\"),\n            \"//*[@numFound='1']\",\n            \"//result/doc[1]/int[@name='id'][.=1]\"\n            );\n    \n    // double: rangequery\n    assertQ(req(\"q\", \"doubledv:[2 TO 3.3]\", \"sort\", \"id asc\"),\n            \"//*[@numFound='2']\",\n            \"//result/doc[1]/int[@name='id'][.=1]\",\n            \"//result/doc[2]/int[@name='id'][.=3]\"\n            );\n    \n    // (neg) double: termquery\n    assertQ(req(\"q\", \"doubledv:\\\"-4.3\\\"\", \"sort\", \"id asc\"),\n            \"//*[@numFound='1']\",\n            \"//result/doc[1]/int[@name='id'][.=2]\"\n            );\n    \n    // (neg) double: rangequery\n    assertQ(req(\"q\", \"doubledv:[-6 TO -4]\", \"sort\", \"id asc\"),\n            \"//*[@numFound='1']\",\n            \"//result/doc[1]/int[@name='id'][.=2]\"\n            );\n    \n    // (cross zero bounds) double: rangequery\n    assertQ(req(\"q\", \"doubledv:[-6 TO 2.0]\", \"sort\", \"id asc\"),\n            \"//*[@numFound='2']\",\n            \"//result/doc[1]/int[@name='id'][.=2]\",\n            \"//result/doc[2]/int[@name='id'][.=4]\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/DocValuesTest#testDocValuesMatch().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/DocValuesTest#testDocValuesMatch().mjava","sourceNew":"  /** Tests the ability to do basic queries (without scoring, just match-only) on\n   *  docvalues fields that are not inverted (indexed \"forward\" only)\n   */\n  @Test\n  public void testDocValuesMatch() throws Exception {\n    assertU(adoc(\"id\", \"1\", \"floatdv\", \"2\", \"intdv\", \"3\", \"doubledv\", \"3.1\", \"longdv\", \"5\", \"datedv\", \"1995-12-31T23:59:59.999Z\", \"stringdv\", \"b\", \"booldv\", \"false\"));\n    assertU(adoc(\"id\", \"2\", \"floatdv\", \"-5\", \"intdv\", \"4\", \"doubledv\", \"-4.3\", \"longdv\", \"2\", \"datedv\", \"1997-12-31T23:59:59.999Z\", \"stringdv\", \"a\", \"booldv\", \"true\"));\n    assertU(adoc(\"id\", \"3\", \"floatdv\", \"3\", \"intdv\", \"1\", \"doubledv\", \"2.1\", \"longdv\", \"1\", \"datedv\", \"1996-12-31T23:59:59.999Z\", \"stringdv\", \"c\", \"booldv\", \"false\"));\n    assertU(adoc(\"id\", \"4\", \"floatdv\", \"3\", \"intdv\", \"-1\", \"doubledv\", \"1.5\", \"longdv\", \"1\", \"datedv\", \"1996-12-31T23:59:59.999Z\", \"stringdv\", \"car\"));\n    assertU(commit());\n\n    // string: termquery\n    assertQ(req(\"q\", \"stringdv:car\", \"sort\", \"id asc\"),\n        \"//*[@numFound='1']\",\n        \"//result/doc[1]/int[@name='id'][.=4]\"\n    );\n    \n    // string: range query\n    assertQ(req(\"q\", \"stringdv:[b TO d]\", \"sort\", \"id asc\"),\n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/int[@name='id'][.=1]\",\n        \"//result/doc[2]/int[@name='id'][.=3]\",\n        \"//result/doc[3]/int[@name='id'][.=4]\"\n    );\n    \n    // string: prefix query\n    assertQ(req(\"q\", \"stringdv:c*\", \"sort\", \"id asc\"),\n        \"//*[@numFound='2']\",\n        \"//result/doc[1]/int[@name='id'][.=3]\",\n        \"//result/doc[2]/int[@name='id'][.=4]\"\n    );\n    \n    // string: wildcard query\n    assertQ(req(\"q\", \"stringdv:c?r\", \"sort\", \"id asc\"),\n        \"//*[@numFound='1']\",\n        \"//result/doc[1]/int[@name='id'][.=4]\"\n    );\n    \n    // string: regexp query\n    assertQ(req(\"q\", \"stringdv:/c[a-b]r/\", \"sort\", \"id asc\"),\n        \"//*[@numFound='1']\",\n        \"//result/doc[1]/int[@name='id'][.=4]\"\n    );\n    \n    // float: termquery\n    assertQ(req(\"q\", \"floatdv:3\", \"sort\", \"id asc\"),\n        \"//*[@numFound='2']\",\n        \"//result/doc[1]/int[@name='id'][.=3]\",\n        \"//result/doc[2]/int[@name='id'][.=4]\"\n    );\n    \n    // float: rangequery\n    assertQ(req(\"q\", \"floatdv:[2 TO 3]\", \"sort\", \"id asc\"),\n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/int[@name='id'][.=1]\",\n        \"//result/doc[2]/int[@name='id'][.=3]\",\n        \"//result/doc[3]/int[@name='id'][.=4]\"\n    );\n    \n    // (neg) float: termquery\n    assertQ(req(\"q\", \"floatdv:\\\"-5\\\"\", \"sort\", \"id asc\"),\n            \"//*[@numFound='1']\",\n            \"//result/doc[1]/int[@name='id'][.=2]\"\n            );\n\n    // (neg) float: rangequery\n    assertQ(req(\"q\", \"floatdv:[-6 TO -4]\", \"sort\", \"id asc\"),\n            \"//*[@numFound='1']\",\n            \"//result/doc[1]/int[@name='id'][.=2]\"\n            );\n    \n    // (cross zero bounds) float: rangequery\n    assertQ(req(\"q\", \"floatdv:[-6 TO 2.1]\", \"sort\", \"id asc\"),\n            \"//*[@numFound='2']\",\n            \"//result/doc[1]/int[@name='id'][.=1]\",\n            \"//result/doc[2]/int[@name='id'][.=2]\"\n            );\n    \n    // int: termquery\n    assertQ(req(\"q\", \"intdv:1\", \"sort\", \"id asc\"),\n            \"//*[@numFound='1']\",\n            \"//result/doc[1]/int[@name='id'][.=3]\"\n            );\n    \n    // int: rangequery\n    assertQ(req(\"q\", \"intdv:[3 TO 4]\", \"sort\", \"id asc\"),\n            \"//*[@numFound='2']\",\n            \"//result/doc[1]/int[@name='id'][.=1]\",\n            \"//result/doc[2]/int[@name='id'][.=2]\"\n            );\n    \n    // (neg) int: termquery\n    assertQ(req(\"q\", \"intdv:\\\"-1\\\"\", \"sort\", \"id asc\"),\n            \"//*[@numFound='1']\",\n            \"//result/doc[1]/int[@name='id'][.=4]\"\n            );\n    \n    // (neg) int: rangequery\n    assertQ(req(\"q\", \"intdv:[-1 TO 1]\", \"sort\", \"id asc\"),\n            \"//*[@numFound='2']\",\n            \"//result/doc[1]/int[@name='id'][.=3]\",\n            \"//result/doc[2]/int[@name='id'][.=4]\"\n            );\n\n    // long: termquery\n    assertQ(req(\"q\", \"longdv:1\", \"sort\", \"id asc\"),\n        \"//*[@numFound='2']\",\n        \"//result/doc[1]/int[@name='id'][.=3]\",\n        \"//result/doc[2]/int[@name='id'][.=4]\"\n    );\n    \n    // long: rangequery\n    assertQ(req(\"q\", \"longdv:[1 TO 2]\", \"sort\", \"id asc\"),\n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/int[@name='id'][.=2]\",\n        \"//result/doc[2]/int[@name='id'][.=3]\",\n        \"//result/doc[3]/int[@name='id'][.=4]\"\n    );\n    \n    // double: termquery\n    assertQ(req(\"q\", \"doubledv:3.1\", \"sort\", \"id asc\"),\n            \"//*[@numFound='1']\",\n            \"//result/doc[1]/int[@name='id'][.=1]\"\n            );\n    \n    // double: rangequery\n    assertQ(req(\"q\", \"doubledv:[2 TO 3.3]\", \"sort\", \"id asc\"),\n            \"//*[@numFound='2']\",\n            \"//result/doc[1]/int[@name='id'][.=1]\",\n            \"//result/doc[2]/int[@name='id'][.=3]\"\n            );\n    \n    // (neg) double: termquery\n    assertQ(req(\"q\", \"doubledv:\\\"-4.3\\\"\", \"sort\", \"id asc\"),\n            \"//*[@numFound='1']\",\n            \"//result/doc[1]/int[@name='id'][.=2]\"\n            );\n    \n    // (neg) double: rangequery\n    assertQ(req(\"q\", \"doubledv:[-6 TO -4]\", \"sort\", \"id asc\"),\n            \"//*[@numFound='1']\",\n            \"//result/doc[1]/int[@name='id'][.=2]\"\n            );\n    \n    // (cross zero bounds) double: rangequery\n    assertQ(req(\"q\", \"doubledv:[-6 TO 2.0]\", \"sort\", \"id asc\"),\n            \"//*[@numFound='2']\",\n            \"//result/doc[1]/int[@name='id'][.=2]\",\n            \"//result/doc[2]/int[@name='id'][.=4]\"\n            );\n    // boolean basic queries:\n\n    assertQ(req(\"q\", \"booldv:false\", \"sort\", \"id asc\"),\n        \"//*[@numFound='2']\",\n        \"//result/doc[1]/int[@name='id'][.=1]\",\n        \"//result/doc[2]/int[@name='id'][.=3]\"\n    );\n\n    assertQ(req(\"q\", \"booldv:true\", \"sort\", \"id asc\"),\n        \"//*[@numFound='2']\",\n        \"//result/doc[1]/int[@name='id'][.=2]\",\n        \"//result/doc[2]/int[@name='id'][.=4]\"\n    );\n\n  }\n\n","sourceOld":"  /** Tests the ability to do basic queries (without scoring, just match-only) on\n   *  docvalues fields that are not inverted (indexed \"forward\" only)\n   */\n  public void testDocValuesMatch() throws Exception {\n    assertU(adoc(\"id\", \"1\", \"floatdv\", \"2\", \"intdv\", \"3\", \"doubledv\", \"3.1\", \"longdv\", \"5\", \"datedv\", \"1995-12-31T23:59:59.999Z\", \"stringdv\", \"b\"));\n    assertU(adoc(\"id\", \"2\", \"floatdv\", \"-5\", \"intdv\", \"4\", \"doubledv\", \"-4.3\", \"longdv\", \"2\", \"datedv\", \"1997-12-31T23:59:59.999Z\", \"stringdv\", \"a\"));\n    assertU(adoc(\"id\", \"3\", \"floatdv\", \"3\", \"intdv\", \"1\", \"doubledv\", \"2.1\", \"longdv\", \"1\", \"datedv\", \"1996-12-31T23:59:59.999Z\", \"stringdv\", \"c\"));\n    assertU(adoc(\"id\", \"4\", \"floatdv\", \"3\", \"intdv\", \"-1\", \"doubledv\", \"1.5\", \"longdv\", \"1\", \"datedv\", \"1996-12-31T23:59:59.999Z\", \"stringdv\", \"car\"));\n    assertU(commit());\n\n    // string: termquery\n    assertQ(req(\"q\", \"stringdv:car\", \"sort\", \"id asc\"),\n        \"//*[@numFound='1']\",\n        \"//result/doc[1]/int[@name='id'][.=4]\"\n    );\n    \n    // string: range query\n    assertQ(req(\"q\", \"stringdv:[b TO d]\", \"sort\", \"id asc\"),\n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/int[@name='id'][.=1]\",\n        \"//result/doc[2]/int[@name='id'][.=3]\",\n        \"//result/doc[3]/int[@name='id'][.=4]\"\n    );\n    \n    // string: prefix query\n    assertQ(req(\"q\", \"stringdv:c*\", \"sort\", \"id asc\"),\n        \"//*[@numFound='2']\",\n        \"//result/doc[1]/int[@name='id'][.=3]\",\n        \"//result/doc[2]/int[@name='id'][.=4]\"\n    );\n    \n    // string: wildcard query\n    assertQ(req(\"q\", \"stringdv:c?r\", \"sort\", \"id asc\"),\n        \"//*[@numFound='1']\",\n        \"//result/doc[1]/int[@name='id'][.=4]\"\n    );\n    \n    // string: regexp query\n    assertQ(req(\"q\", \"stringdv:/c[a-b]r/\", \"sort\", \"id asc\"),\n        \"//*[@numFound='1']\",\n        \"//result/doc[1]/int[@name='id'][.=4]\"\n    );\n    \n    // float: termquery\n    assertQ(req(\"q\", \"floatdv:3\", \"sort\", \"id asc\"),\n        \"//*[@numFound='2']\",\n        \"//result/doc[1]/int[@name='id'][.=3]\",\n        \"//result/doc[2]/int[@name='id'][.=4]\"\n    );\n    \n    // float: rangequery\n    assertQ(req(\"q\", \"floatdv:[2 TO 3]\", \"sort\", \"id asc\"),\n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/int[@name='id'][.=1]\",\n        \"//result/doc[2]/int[@name='id'][.=3]\",\n        \"//result/doc[3]/int[@name='id'][.=4]\"\n    );\n    \n    // (neg) float: termquery\n    assertQ(req(\"q\", \"floatdv:\\\"-5\\\"\", \"sort\", \"id asc\"),\n            \"//*[@numFound='1']\",\n            \"//result/doc[1]/int[@name='id'][.=2]\"\n            );\n\n    // (neg) float: rangequery\n    assertQ(req(\"q\", \"floatdv:[-6 TO -4]\", \"sort\", \"id asc\"),\n            \"//*[@numFound='1']\",\n            \"//result/doc[1]/int[@name='id'][.=2]\"\n            );\n    \n    // (cross zero bounds) float: rangequery\n    assertQ(req(\"q\", \"floatdv:[-6 TO 2.1]\", \"sort\", \"id asc\"),\n            \"//*[@numFound='2']\",\n            \"//result/doc[1]/int[@name='id'][.=1]\",\n            \"//result/doc[2]/int[@name='id'][.=2]\"\n            );\n    \n    // int: termquery\n    assertQ(req(\"q\", \"intdv:1\", \"sort\", \"id asc\"),\n            \"//*[@numFound='1']\",\n            \"//result/doc[1]/int[@name='id'][.=3]\"\n            );\n    \n    // int: rangequery\n    assertQ(req(\"q\", \"intdv:[3 TO 4]\", \"sort\", \"id asc\"),\n            \"//*[@numFound='2']\",\n            \"//result/doc[1]/int[@name='id'][.=1]\",\n            \"//result/doc[2]/int[@name='id'][.=2]\"\n            );\n    \n    // (neg) int: termquery\n    assertQ(req(\"q\", \"intdv:\\\"-1\\\"\", \"sort\", \"id asc\"),\n            \"//*[@numFound='1']\",\n            \"//result/doc[1]/int[@name='id'][.=4]\"\n            );\n    \n    // (neg) int: rangequery\n    assertQ(req(\"q\", \"intdv:[-1 TO 1]\", \"sort\", \"id asc\"),\n            \"//*[@numFound='2']\",\n            \"//result/doc[1]/int[@name='id'][.=3]\",\n            \"//result/doc[2]/int[@name='id'][.=4]\"\n            );\n\n    // long: termquery\n    assertQ(req(\"q\", \"longdv:1\", \"sort\", \"id asc\"),\n        \"//*[@numFound='2']\",\n        \"//result/doc[1]/int[@name='id'][.=3]\",\n        \"//result/doc[2]/int[@name='id'][.=4]\"\n    );\n    \n    // long: rangequery\n    assertQ(req(\"q\", \"longdv:[1 TO 2]\", \"sort\", \"id asc\"),\n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/int[@name='id'][.=2]\",\n        \"//result/doc[2]/int[@name='id'][.=3]\",\n        \"//result/doc[3]/int[@name='id'][.=4]\"\n    );\n    \n    // double: termquery\n    assertQ(req(\"q\", \"doubledv:3.1\", \"sort\", \"id asc\"),\n            \"//*[@numFound='1']\",\n            \"//result/doc[1]/int[@name='id'][.=1]\"\n            );\n    \n    // double: rangequery\n    assertQ(req(\"q\", \"doubledv:[2 TO 3.3]\", \"sort\", \"id asc\"),\n            \"//*[@numFound='2']\",\n            \"//result/doc[1]/int[@name='id'][.=1]\",\n            \"//result/doc[2]/int[@name='id'][.=3]\"\n            );\n    \n    // (neg) double: termquery\n    assertQ(req(\"q\", \"doubledv:\\\"-4.3\\\"\", \"sort\", \"id asc\"),\n            \"//*[@numFound='1']\",\n            \"//result/doc[1]/int[@name='id'][.=2]\"\n            );\n    \n    // (neg) double: rangequery\n    assertQ(req(\"q\", \"doubledv:[-6 TO -4]\", \"sort\", \"id asc\"),\n            \"//*[@numFound='1']\",\n            \"//result/doc[1]/int[@name='id'][.=2]\"\n            );\n    \n    // (cross zero bounds) double: rangequery\n    assertQ(req(\"q\", \"doubledv:[-6 TO 2.0]\", \"sort\", \"id asc\"),\n            \"//*[@numFound='2']\",\n            \"//result/doc[1]/int[@name='id'][.=2]\",\n            \"//result/doc[2]/int[@name='id'][.=4]\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a71f63026529f3c1f03cfdd664910873ab2369ae","date":1497543264,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/DocValuesTest#testDocValuesMatch().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/DocValuesTest#testDocValuesMatch().mjava","sourceNew":"  /** Tests the ability to do basic queries (without scoring, just match-only) on\n   *  docvalues fields that are not inverted (indexed \"forward\" only)\n   */\n  @Test\n  public void testDocValuesMatch() throws Exception {\n    assertU(adoc(\"id\", \"1\", \"floatdv\", \"2\", \"intdv\", \"3\", \"doubledv\", \"3.1\", \"longdv\", \"5\", \"datedv\", \"1995-12-31T23:59:59.999Z\", \"stringdv\", \"b\", \"booldv\", \"false\"));\n    assertU(adoc(\"id\", \"2\", \"floatdv\", \"-5\", \"intdv\", \"4\", \"doubledv\", \"-4.3\", \"longdv\", \"2\", \"datedv\", \"1997-12-31T23:59:59.999Z\", \"stringdv\", \"a\", \"booldv\", \"true\"));\n    assertU(adoc(\"id\", \"3\", \"floatdv\", \"3\", \"intdv\", \"1\", \"doubledv\", \"2.1\", \"longdv\", \"1\", \"datedv\", \"1996-12-31T23:59:59.999Z\", \"stringdv\", \"c\", \"booldv\", \"false\"));\n    assertU(adoc(\"id\", \"4\", \"floatdv\", \"3\", \"intdv\", \"-1\", \"doubledv\", \"1.5\", \"longdv\", \"1\", \"datedv\", \"1996-12-31T23:59:59.999Z\", \"stringdv\", \"car\"));\n    assertU(commit());\n\n    // string: termquery\n    assertQ(req(\"q\", \"stringdv:car\", \"sort\", \"id_i asc\"),\n        \"//*[@numFound='1']\",\n        \"//result/doc[1]/str[@name='id'][.=4]\"\n    );\n    \n    // string: range query\n    assertQ(req(\"q\", \"stringdv:[b TO d]\", \"sort\", \"id_i asc\"),\n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/str[@name='id'][.=1]\",\n        \"//result/doc[2]/str[@name='id'][.=3]\",\n        \"//result/doc[3]/str[@name='id'][.=4]\"\n    );\n    \n    // string: prefix query\n    assertQ(req(\"q\", \"stringdv:c*\", \"sort\", \"id_i asc\"),\n        \"//*[@numFound='2']\",\n        \"//result/doc[1]/str[@name='id'][.=3]\",\n        \"//result/doc[2]/str[@name='id'][.=4]\"\n    );\n    \n    // string: wildcard query\n    assertQ(req(\"q\", \"stringdv:c?r\", \"sort\", \"id_i asc\"),\n        \"//*[@numFound='1']\",\n        \"//result/doc[1]/str[@name='id'][.=4]\"\n    );\n    \n    // string: regexp query\n    assertQ(req(\"q\", \"stringdv:/c[a-b]r/\", \"sort\", \"id_i asc\"),\n        \"//*[@numFound='1']\",\n        \"//result/doc[1]/str[@name='id'][.=4]\"\n    );\n    \n    // float: termquery\n    assertQ(req(\"q\", \"floatdv:3\", \"sort\", \"id_i asc\"),\n        \"//*[@numFound='2']\",\n        \"//result/doc[1]/str[@name='id'][.=3]\",\n        \"//result/doc[2]/str[@name='id'][.=4]\"\n    );\n    \n    // float: rangequery\n    assertQ(req(\"q\", \"floatdv:[2 TO 3]\", \"sort\", \"id_i asc\"),\n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/str[@name='id'][.=1]\",\n        \"//result/doc[2]/str[@name='id'][.=3]\",\n        \"//result/doc[3]/str[@name='id'][.=4]\"\n    );\n    \n    // (neg) float: termquery\n    assertQ(req(\"q\", \"floatdv:\\\"-5\\\"\", \"sort\", \"id_i asc\"),\n            \"//*[@numFound='1']\",\n            \"//result/doc[1]/str[@name='id'][.=2]\"\n            );\n\n    // (neg) float: rangequery\n    assertQ(req(\"q\", \"floatdv:[-6 TO -4]\", \"sort\", \"id_i asc\"),\n            \"//*[@numFound='1']\",\n            \"//result/doc[1]/str[@name='id'][.=2]\"\n            );\n    \n    // (cross zero bounds) float: rangequery\n    assertQ(req(\"q\", \"floatdv:[-6 TO 2.1]\", \"sort\", \"id_i asc\"),\n            \"//*[@numFound='2']\",\n            \"//result/doc[1]/str[@name='id'][.=1]\",\n            \"//result/doc[2]/str[@name='id'][.=2]\"\n            );\n    \n    // int: termquery\n    assertQ(req(\"q\", \"intdv:1\", \"sort\", \"id_i asc\"),\n            \"//*[@numFound='1']\",\n            \"//result/doc[1]/str[@name='id'][.=3]\"\n            );\n    \n    // int: rangequery\n    assertQ(req(\"q\", \"intdv:[3 TO 4]\", \"sort\", \"id_i asc\"),\n            \"//*[@numFound='2']\",\n            \"//result/doc[1]/str[@name='id'][.=1]\",\n            \"//result/doc[2]/str[@name='id'][.=2]\"\n            );\n    \n    // (neg) int: termquery\n    assertQ(req(\"q\", \"intdv:\\\"-1\\\"\", \"sort\", \"id_i asc\"),\n            \"//*[@numFound='1']\",\n            \"//result/doc[1]/str[@name='id'][.=4]\"\n            );\n    \n    // (neg) int: rangequery\n    assertQ(req(\"q\", \"intdv:[-1 TO 1]\", \"sort\", \"id_i asc\"),\n            \"//*[@numFound='2']\",\n            \"//result/doc[1]/str[@name='id'][.=3]\",\n            \"//result/doc[2]/str[@name='id'][.=4]\"\n            );\n\n    // long: termquery\n    assertQ(req(\"q\", \"longdv:1\", \"sort\", \"id_i asc\"),\n        \"//*[@numFound='2']\",\n        \"//result/doc[1]/str[@name='id'][.=3]\",\n        \"//result/doc[2]/str[@name='id'][.=4]\"\n    );\n    \n    // long: rangequery\n    assertQ(req(\"q\", \"longdv:[1 TO 2]\", \"sort\", \"id_i asc\"),\n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/str[@name='id'][.=2]\",\n        \"//result/doc[2]/str[@name='id'][.=3]\",\n        \"//result/doc[3]/str[@name='id'][.=4]\"\n    );\n    \n    // double: termquery\n    assertQ(req(\"q\", \"doubledv:3.1\", \"sort\", \"id_i asc\"),\n            \"//*[@numFound='1']\",\n            \"//result/doc[1]/str[@name='id'][.=1]\"\n            );\n    \n    // double: rangequery\n    assertQ(req(\"q\", \"doubledv:[2 TO 3.3]\", \"sort\", \"id_i asc\"),\n            \"//*[@numFound='2']\",\n            \"//result/doc[1]/str[@name='id'][.=1]\",\n            \"//result/doc[2]/str[@name='id'][.=3]\"\n            );\n    \n    // (neg) double: termquery\n    assertQ(req(\"q\", \"doubledv:\\\"-4.3\\\"\", \"sort\", \"id_i asc\"),\n            \"//*[@numFound='1']\",\n            \"//result/doc[1]/str[@name='id'][.=2]\"\n            );\n    \n    // (neg) double: rangequery\n    assertQ(req(\"q\", \"doubledv:[-6 TO -4]\", \"sort\", \"id_i asc\"),\n            \"//*[@numFound='1']\",\n            \"//result/doc[1]/str[@name='id'][.=2]\"\n            );\n    \n    // (cross zero bounds) double: rangequery\n    assertQ(req(\"q\", \"doubledv:[-6 TO 2.0]\", \"sort\", \"id_i asc\"),\n            \"//*[@numFound='2']\",\n            \"//result/doc[1]/str[@name='id'][.=2]\",\n            \"//result/doc[2]/str[@name='id'][.=4]\"\n            );\n    // boolean basic queries:\n\n    assertQ(req(\"q\", \"booldv:false\", \"sort\", \"id_i asc\"),\n        \"//*[@numFound='2']\",\n        \"//result/doc[1]/str[@name='id'][.=1]\",\n        \"//result/doc[2]/str[@name='id'][.=3]\"\n    );\n\n    assertQ(req(\"q\", \"booldv:true\", \"sort\", \"id_i asc\"),\n        \"//*[@numFound='2']\",\n        \"//result/doc[1]/str[@name='id'][.=2]\",\n        \"//result/doc[2]/str[@name='id'][.=4]\"\n    );\n\n  }\n\n","sourceOld":"  /** Tests the ability to do basic queries (without scoring, just match-only) on\n   *  docvalues fields that are not inverted (indexed \"forward\" only)\n   */\n  @Test\n  public void testDocValuesMatch() throws Exception {\n    assertU(adoc(\"id\", \"1\", \"floatdv\", \"2\", \"intdv\", \"3\", \"doubledv\", \"3.1\", \"longdv\", \"5\", \"datedv\", \"1995-12-31T23:59:59.999Z\", \"stringdv\", \"b\", \"booldv\", \"false\"));\n    assertU(adoc(\"id\", \"2\", \"floatdv\", \"-5\", \"intdv\", \"4\", \"doubledv\", \"-4.3\", \"longdv\", \"2\", \"datedv\", \"1997-12-31T23:59:59.999Z\", \"stringdv\", \"a\", \"booldv\", \"true\"));\n    assertU(adoc(\"id\", \"3\", \"floatdv\", \"3\", \"intdv\", \"1\", \"doubledv\", \"2.1\", \"longdv\", \"1\", \"datedv\", \"1996-12-31T23:59:59.999Z\", \"stringdv\", \"c\", \"booldv\", \"false\"));\n    assertU(adoc(\"id\", \"4\", \"floatdv\", \"3\", \"intdv\", \"-1\", \"doubledv\", \"1.5\", \"longdv\", \"1\", \"datedv\", \"1996-12-31T23:59:59.999Z\", \"stringdv\", \"car\"));\n    assertU(commit());\n\n    // string: termquery\n    assertQ(req(\"q\", \"stringdv:car\", \"sort\", \"id asc\"),\n        \"//*[@numFound='1']\",\n        \"//result/doc[1]/int[@name='id'][.=4]\"\n    );\n    \n    // string: range query\n    assertQ(req(\"q\", \"stringdv:[b TO d]\", \"sort\", \"id asc\"),\n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/int[@name='id'][.=1]\",\n        \"//result/doc[2]/int[@name='id'][.=3]\",\n        \"//result/doc[3]/int[@name='id'][.=4]\"\n    );\n    \n    // string: prefix query\n    assertQ(req(\"q\", \"stringdv:c*\", \"sort\", \"id asc\"),\n        \"//*[@numFound='2']\",\n        \"//result/doc[1]/int[@name='id'][.=3]\",\n        \"//result/doc[2]/int[@name='id'][.=4]\"\n    );\n    \n    // string: wildcard query\n    assertQ(req(\"q\", \"stringdv:c?r\", \"sort\", \"id asc\"),\n        \"//*[@numFound='1']\",\n        \"//result/doc[1]/int[@name='id'][.=4]\"\n    );\n    \n    // string: regexp query\n    assertQ(req(\"q\", \"stringdv:/c[a-b]r/\", \"sort\", \"id asc\"),\n        \"//*[@numFound='1']\",\n        \"//result/doc[1]/int[@name='id'][.=4]\"\n    );\n    \n    // float: termquery\n    assertQ(req(\"q\", \"floatdv:3\", \"sort\", \"id asc\"),\n        \"//*[@numFound='2']\",\n        \"//result/doc[1]/int[@name='id'][.=3]\",\n        \"//result/doc[2]/int[@name='id'][.=4]\"\n    );\n    \n    // float: rangequery\n    assertQ(req(\"q\", \"floatdv:[2 TO 3]\", \"sort\", \"id asc\"),\n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/int[@name='id'][.=1]\",\n        \"//result/doc[2]/int[@name='id'][.=3]\",\n        \"//result/doc[3]/int[@name='id'][.=4]\"\n    );\n    \n    // (neg) float: termquery\n    assertQ(req(\"q\", \"floatdv:\\\"-5\\\"\", \"sort\", \"id asc\"),\n            \"//*[@numFound='1']\",\n            \"//result/doc[1]/int[@name='id'][.=2]\"\n            );\n\n    // (neg) float: rangequery\n    assertQ(req(\"q\", \"floatdv:[-6 TO -4]\", \"sort\", \"id asc\"),\n            \"//*[@numFound='1']\",\n            \"//result/doc[1]/int[@name='id'][.=2]\"\n            );\n    \n    // (cross zero bounds) float: rangequery\n    assertQ(req(\"q\", \"floatdv:[-6 TO 2.1]\", \"sort\", \"id asc\"),\n            \"//*[@numFound='2']\",\n            \"//result/doc[1]/int[@name='id'][.=1]\",\n            \"//result/doc[2]/int[@name='id'][.=2]\"\n            );\n    \n    // int: termquery\n    assertQ(req(\"q\", \"intdv:1\", \"sort\", \"id asc\"),\n            \"//*[@numFound='1']\",\n            \"//result/doc[1]/int[@name='id'][.=3]\"\n            );\n    \n    // int: rangequery\n    assertQ(req(\"q\", \"intdv:[3 TO 4]\", \"sort\", \"id asc\"),\n            \"//*[@numFound='2']\",\n            \"//result/doc[1]/int[@name='id'][.=1]\",\n            \"//result/doc[2]/int[@name='id'][.=2]\"\n            );\n    \n    // (neg) int: termquery\n    assertQ(req(\"q\", \"intdv:\\\"-1\\\"\", \"sort\", \"id asc\"),\n            \"//*[@numFound='1']\",\n            \"//result/doc[1]/int[@name='id'][.=4]\"\n            );\n    \n    // (neg) int: rangequery\n    assertQ(req(\"q\", \"intdv:[-1 TO 1]\", \"sort\", \"id asc\"),\n            \"//*[@numFound='2']\",\n            \"//result/doc[1]/int[@name='id'][.=3]\",\n            \"//result/doc[2]/int[@name='id'][.=4]\"\n            );\n\n    // long: termquery\n    assertQ(req(\"q\", \"longdv:1\", \"sort\", \"id asc\"),\n        \"//*[@numFound='2']\",\n        \"//result/doc[1]/int[@name='id'][.=3]\",\n        \"//result/doc[2]/int[@name='id'][.=4]\"\n    );\n    \n    // long: rangequery\n    assertQ(req(\"q\", \"longdv:[1 TO 2]\", \"sort\", \"id asc\"),\n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/int[@name='id'][.=2]\",\n        \"//result/doc[2]/int[@name='id'][.=3]\",\n        \"//result/doc[3]/int[@name='id'][.=4]\"\n    );\n    \n    // double: termquery\n    assertQ(req(\"q\", \"doubledv:3.1\", \"sort\", \"id asc\"),\n            \"//*[@numFound='1']\",\n            \"//result/doc[1]/int[@name='id'][.=1]\"\n            );\n    \n    // double: rangequery\n    assertQ(req(\"q\", \"doubledv:[2 TO 3.3]\", \"sort\", \"id asc\"),\n            \"//*[@numFound='2']\",\n            \"//result/doc[1]/int[@name='id'][.=1]\",\n            \"//result/doc[2]/int[@name='id'][.=3]\"\n            );\n    \n    // (neg) double: termquery\n    assertQ(req(\"q\", \"doubledv:\\\"-4.3\\\"\", \"sort\", \"id asc\"),\n            \"//*[@numFound='1']\",\n            \"//result/doc[1]/int[@name='id'][.=2]\"\n            );\n    \n    // (neg) double: rangequery\n    assertQ(req(\"q\", \"doubledv:[-6 TO -4]\", \"sort\", \"id asc\"),\n            \"//*[@numFound='1']\",\n            \"//result/doc[1]/int[@name='id'][.=2]\"\n            );\n    \n    // (cross zero bounds) double: rangequery\n    assertQ(req(\"q\", \"doubledv:[-6 TO 2.0]\", \"sort\", \"id asc\"),\n            \"//*[@numFound='2']\",\n            \"//result/doc[1]/int[@name='id'][.=2]\",\n            \"//result/doc[2]/int[@name='id'][.=4]\"\n            );\n    // boolean basic queries:\n\n    assertQ(req(\"q\", \"booldv:false\", \"sort\", \"id asc\"),\n        \"//*[@numFound='2']\",\n        \"//result/doc[1]/int[@name='id'][.=1]\",\n        \"//result/doc[2]/int[@name='id'][.=3]\"\n    );\n\n    assertQ(req(\"q\", \"booldv:true\", \"sort\", \"id asc\"),\n        \"//*[@numFound='2']\",\n        \"//result/doc[1]/int[@name='id'][.=2]\",\n        \"//result/doc[2]/int[@name='id'][.=4]\"\n    );\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/DocValuesTest#testDocValuesMatch().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/DocValuesTest#testDocValuesMatch().mjava","sourceNew":"  /** Tests the ability to do basic queries (without scoring, just match-only) on\n   *  docvalues fields that are not inverted (indexed \"forward\" only)\n   */\n  @Test\n  public void testDocValuesMatch() throws Exception {\n    assertU(adoc(\"id\", \"1\", \"floatdv\", \"2\", \"intdv\", \"3\", \"doubledv\", \"3.1\", \"longdv\", \"5\", \"datedv\", \"1995-12-31T23:59:59.999Z\", \"stringdv\", \"b\", \"booldv\", \"false\"));\n    assertU(adoc(\"id\", \"2\", \"floatdv\", \"-5\", \"intdv\", \"4\", \"doubledv\", \"-4.3\", \"longdv\", \"2\", \"datedv\", \"1997-12-31T23:59:59.999Z\", \"stringdv\", \"a\", \"booldv\", \"true\"));\n    assertU(adoc(\"id\", \"3\", \"floatdv\", \"3\", \"intdv\", \"1\", \"doubledv\", \"2.1\", \"longdv\", \"1\", \"datedv\", \"1996-12-31T23:59:59.999Z\", \"stringdv\", \"c\", \"booldv\", \"false\"));\n    assertU(adoc(\"id\", \"4\", \"floatdv\", \"3\", \"intdv\", \"-1\", \"doubledv\", \"1.5\", \"longdv\", \"1\", \"datedv\", \"1996-12-31T23:59:59.999Z\", \"stringdv\", \"car\"));\n    assertU(commit());\n\n    // string: termquery\n    assertQ(req(\"q\", \"stringdv:car\", \"sort\", \"id_i asc\"),\n        \"//*[@numFound='1']\",\n        \"//result/doc[1]/str[@name='id'][.=4]\"\n    );\n    \n    // string: range query\n    assertQ(req(\"q\", \"stringdv:[b TO d]\", \"sort\", \"id_i asc\"),\n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/str[@name='id'][.=1]\",\n        \"//result/doc[2]/str[@name='id'][.=3]\",\n        \"//result/doc[3]/str[@name='id'][.=4]\"\n    );\n    \n    // string: prefix query\n    assertQ(req(\"q\", \"stringdv:c*\", \"sort\", \"id_i asc\"),\n        \"//*[@numFound='2']\",\n        \"//result/doc[1]/str[@name='id'][.=3]\",\n        \"//result/doc[2]/str[@name='id'][.=4]\"\n    );\n    \n    // string: wildcard query\n    assertQ(req(\"q\", \"stringdv:c?r\", \"sort\", \"id_i asc\"),\n        \"//*[@numFound='1']\",\n        \"//result/doc[1]/str[@name='id'][.=4]\"\n    );\n    \n    // string: regexp query\n    assertQ(req(\"q\", \"stringdv:/c[a-b]r/\", \"sort\", \"id_i asc\"),\n        \"//*[@numFound='1']\",\n        \"//result/doc[1]/str[@name='id'][.=4]\"\n    );\n    \n    // float: termquery\n    assertQ(req(\"q\", \"floatdv:3\", \"sort\", \"id_i asc\"),\n        \"//*[@numFound='2']\",\n        \"//result/doc[1]/str[@name='id'][.=3]\",\n        \"//result/doc[2]/str[@name='id'][.=4]\"\n    );\n    \n    // float: rangequery\n    assertQ(req(\"q\", \"floatdv:[2 TO 3]\", \"sort\", \"id_i asc\"),\n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/str[@name='id'][.=1]\",\n        \"//result/doc[2]/str[@name='id'][.=3]\",\n        \"//result/doc[3]/str[@name='id'][.=4]\"\n    );\n    \n    // (neg) float: termquery\n    assertQ(req(\"q\", \"floatdv:\\\"-5\\\"\", \"sort\", \"id_i asc\"),\n            \"//*[@numFound='1']\",\n            \"//result/doc[1]/str[@name='id'][.=2]\"\n            );\n\n    // (neg) float: rangequery\n    assertQ(req(\"q\", \"floatdv:[-6 TO -4]\", \"sort\", \"id_i asc\"),\n            \"//*[@numFound='1']\",\n            \"//result/doc[1]/str[@name='id'][.=2]\"\n            );\n    \n    // (cross zero bounds) float: rangequery\n    assertQ(req(\"q\", \"floatdv:[-6 TO 2.1]\", \"sort\", \"id_i asc\"),\n            \"//*[@numFound='2']\",\n            \"//result/doc[1]/str[@name='id'][.=1]\",\n            \"//result/doc[2]/str[@name='id'][.=2]\"\n            );\n    \n    // int: termquery\n    assertQ(req(\"q\", \"intdv:1\", \"sort\", \"id_i asc\"),\n            \"//*[@numFound='1']\",\n            \"//result/doc[1]/str[@name='id'][.=3]\"\n            );\n    \n    // int: rangequery\n    assertQ(req(\"q\", \"intdv:[3 TO 4]\", \"sort\", \"id_i asc\"),\n            \"//*[@numFound='2']\",\n            \"//result/doc[1]/str[@name='id'][.=1]\",\n            \"//result/doc[2]/str[@name='id'][.=2]\"\n            );\n    \n    // (neg) int: termquery\n    assertQ(req(\"q\", \"intdv:\\\"-1\\\"\", \"sort\", \"id_i asc\"),\n            \"//*[@numFound='1']\",\n            \"//result/doc[1]/str[@name='id'][.=4]\"\n            );\n    \n    // (neg) int: rangequery\n    assertQ(req(\"q\", \"intdv:[-1 TO 1]\", \"sort\", \"id_i asc\"),\n            \"//*[@numFound='2']\",\n            \"//result/doc[1]/str[@name='id'][.=3]\",\n            \"//result/doc[2]/str[@name='id'][.=4]\"\n            );\n\n    // long: termquery\n    assertQ(req(\"q\", \"longdv:1\", \"sort\", \"id_i asc\"),\n        \"//*[@numFound='2']\",\n        \"//result/doc[1]/str[@name='id'][.=3]\",\n        \"//result/doc[2]/str[@name='id'][.=4]\"\n    );\n    \n    // long: rangequery\n    assertQ(req(\"q\", \"longdv:[1 TO 2]\", \"sort\", \"id_i asc\"),\n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/str[@name='id'][.=2]\",\n        \"//result/doc[2]/str[@name='id'][.=3]\",\n        \"//result/doc[3]/str[@name='id'][.=4]\"\n    );\n    \n    // double: termquery\n    assertQ(req(\"q\", \"doubledv:3.1\", \"sort\", \"id_i asc\"),\n            \"//*[@numFound='1']\",\n            \"//result/doc[1]/str[@name='id'][.=1]\"\n            );\n    \n    // double: rangequery\n    assertQ(req(\"q\", \"doubledv:[2 TO 3.3]\", \"sort\", \"id_i asc\"),\n            \"//*[@numFound='2']\",\n            \"//result/doc[1]/str[@name='id'][.=1]\",\n            \"//result/doc[2]/str[@name='id'][.=3]\"\n            );\n    \n    // (neg) double: termquery\n    assertQ(req(\"q\", \"doubledv:\\\"-4.3\\\"\", \"sort\", \"id_i asc\"),\n            \"//*[@numFound='1']\",\n            \"//result/doc[1]/str[@name='id'][.=2]\"\n            );\n    \n    // (neg) double: rangequery\n    assertQ(req(\"q\", \"doubledv:[-6 TO -4]\", \"sort\", \"id_i asc\"),\n            \"//*[@numFound='1']\",\n            \"//result/doc[1]/str[@name='id'][.=2]\"\n            );\n    \n    // (cross zero bounds) double: rangequery\n    assertQ(req(\"q\", \"doubledv:[-6 TO 2.0]\", \"sort\", \"id_i asc\"),\n            \"//*[@numFound='2']\",\n            \"//result/doc[1]/str[@name='id'][.=2]\",\n            \"//result/doc[2]/str[@name='id'][.=4]\"\n            );\n    // boolean basic queries:\n\n    assertQ(req(\"q\", \"booldv:false\", \"sort\", \"id_i asc\"),\n        \"//*[@numFound='2']\",\n        \"//result/doc[1]/str[@name='id'][.=1]\",\n        \"//result/doc[2]/str[@name='id'][.=3]\"\n    );\n\n    assertQ(req(\"q\", \"booldv:true\", \"sort\", \"id_i asc\"),\n        \"//*[@numFound='2']\",\n        \"//result/doc[1]/str[@name='id'][.=2]\",\n        \"//result/doc[2]/str[@name='id'][.=4]\"\n    );\n\n  }\n\n","sourceOld":"  /** Tests the ability to do basic queries (without scoring, just match-only) on\n   *  docvalues fields that are not inverted (indexed \"forward\" only)\n   */\n  @Test\n  public void testDocValuesMatch() throws Exception {\n    assertU(adoc(\"id\", \"1\", \"floatdv\", \"2\", \"intdv\", \"3\", \"doubledv\", \"3.1\", \"longdv\", \"5\", \"datedv\", \"1995-12-31T23:59:59.999Z\", \"stringdv\", \"b\", \"booldv\", \"false\"));\n    assertU(adoc(\"id\", \"2\", \"floatdv\", \"-5\", \"intdv\", \"4\", \"doubledv\", \"-4.3\", \"longdv\", \"2\", \"datedv\", \"1997-12-31T23:59:59.999Z\", \"stringdv\", \"a\", \"booldv\", \"true\"));\n    assertU(adoc(\"id\", \"3\", \"floatdv\", \"3\", \"intdv\", \"1\", \"doubledv\", \"2.1\", \"longdv\", \"1\", \"datedv\", \"1996-12-31T23:59:59.999Z\", \"stringdv\", \"c\", \"booldv\", \"false\"));\n    assertU(adoc(\"id\", \"4\", \"floatdv\", \"3\", \"intdv\", \"-1\", \"doubledv\", \"1.5\", \"longdv\", \"1\", \"datedv\", \"1996-12-31T23:59:59.999Z\", \"stringdv\", \"car\"));\n    assertU(commit());\n\n    // string: termquery\n    assertQ(req(\"q\", \"stringdv:car\", \"sort\", \"id asc\"),\n        \"//*[@numFound='1']\",\n        \"//result/doc[1]/int[@name='id'][.=4]\"\n    );\n    \n    // string: range query\n    assertQ(req(\"q\", \"stringdv:[b TO d]\", \"sort\", \"id asc\"),\n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/int[@name='id'][.=1]\",\n        \"//result/doc[2]/int[@name='id'][.=3]\",\n        \"//result/doc[3]/int[@name='id'][.=4]\"\n    );\n    \n    // string: prefix query\n    assertQ(req(\"q\", \"stringdv:c*\", \"sort\", \"id asc\"),\n        \"//*[@numFound='2']\",\n        \"//result/doc[1]/int[@name='id'][.=3]\",\n        \"//result/doc[2]/int[@name='id'][.=4]\"\n    );\n    \n    // string: wildcard query\n    assertQ(req(\"q\", \"stringdv:c?r\", \"sort\", \"id asc\"),\n        \"//*[@numFound='1']\",\n        \"//result/doc[1]/int[@name='id'][.=4]\"\n    );\n    \n    // string: regexp query\n    assertQ(req(\"q\", \"stringdv:/c[a-b]r/\", \"sort\", \"id asc\"),\n        \"//*[@numFound='1']\",\n        \"//result/doc[1]/int[@name='id'][.=4]\"\n    );\n    \n    // float: termquery\n    assertQ(req(\"q\", \"floatdv:3\", \"sort\", \"id asc\"),\n        \"//*[@numFound='2']\",\n        \"//result/doc[1]/int[@name='id'][.=3]\",\n        \"//result/doc[2]/int[@name='id'][.=4]\"\n    );\n    \n    // float: rangequery\n    assertQ(req(\"q\", \"floatdv:[2 TO 3]\", \"sort\", \"id asc\"),\n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/int[@name='id'][.=1]\",\n        \"//result/doc[2]/int[@name='id'][.=3]\",\n        \"//result/doc[3]/int[@name='id'][.=4]\"\n    );\n    \n    // (neg) float: termquery\n    assertQ(req(\"q\", \"floatdv:\\\"-5\\\"\", \"sort\", \"id asc\"),\n            \"//*[@numFound='1']\",\n            \"//result/doc[1]/int[@name='id'][.=2]\"\n            );\n\n    // (neg) float: rangequery\n    assertQ(req(\"q\", \"floatdv:[-6 TO -4]\", \"sort\", \"id asc\"),\n            \"//*[@numFound='1']\",\n            \"//result/doc[1]/int[@name='id'][.=2]\"\n            );\n    \n    // (cross zero bounds) float: rangequery\n    assertQ(req(\"q\", \"floatdv:[-6 TO 2.1]\", \"sort\", \"id asc\"),\n            \"//*[@numFound='2']\",\n            \"//result/doc[1]/int[@name='id'][.=1]\",\n            \"//result/doc[2]/int[@name='id'][.=2]\"\n            );\n    \n    // int: termquery\n    assertQ(req(\"q\", \"intdv:1\", \"sort\", \"id asc\"),\n            \"//*[@numFound='1']\",\n            \"//result/doc[1]/int[@name='id'][.=3]\"\n            );\n    \n    // int: rangequery\n    assertQ(req(\"q\", \"intdv:[3 TO 4]\", \"sort\", \"id asc\"),\n            \"//*[@numFound='2']\",\n            \"//result/doc[1]/int[@name='id'][.=1]\",\n            \"//result/doc[2]/int[@name='id'][.=2]\"\n            );\n    \n    // (neg) int: termquery\n    assertQ(req(\"q\", \"intdv:\\\"-1\\\"\", \"sort\", \"id asc\"),\n            \"//*[@numFound='1']\",\n            \"//result/doc[1]/int[@name='id'][.=4]\"\n            );\n    \n    // (neg) int: rangequery\n    assertQ(req(\"q\", \"intdv:[-1 TO 1]\", \"sort\", \"id asc\"),\n            \"//*[@numFound='2']\",\n            \"//result/doc[1]/int[@name='id'][.=3]\",\n            \"//result/doc[2]/int[@name='id'][.=4]\"\n            );\n\n    // long: termquery\n    assertQ(req(\"q\", \"longdv:1\", \"sort\", \"id asc\"),\n        \"//*[@numFound='2']\",\n        \"//result/doc[1]/int[@name='id'][.=3]\",\n        \"//result/doc[2]/int[@name='id'][.=4]\"\n    );\n    \n    // long: rangequery\n    assertQ(req(\"q\", \"longdv:[1 TO 2]\", \"sort\", \"id asc\"),\n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/int[@name='id'][.=2]\",\n        \"//result/doc[2]/int[@name='id'][.=3]\",\n        \"//result/doc[3]/int[@name='id'][.=4]\"\n    );\n    \n    // double: termquery\n    assertQ(req(\"q\", \"doubledv:3.1\", \"sort\", \"id asc\"),\n            \"//*[@numFound='1']\",\n            \"//result/doc[1]/int[@name='id'][.=1]\"\n            );\n    \n    // double: rangequery\n    assertQ(req(\"q\", \"doubledv:[2 TO 3.3]\", \"sort\", \"id asc\"),\n            \"//*[@numFound='2']\",\n            \"//result/doc[1]/int[@name='id'][.=1]\",\n            \"//result/doc[2]/int[@name='id'][.=3]\"\n            );\n    \n    // (neg) double: termquery\n    assertQ(req(\"q\", \"doubledv:\\\"-4.3\\\"\", \"sort\", \"id asc\"),\n            \"//*[@numFound='1']\",\n            \"//result/doc[1]/int[@name='id'][.=2]\"\n            );\n    \n    // (neg) double: rangequery\n    assertQ(req(\"q\", \"doubledv:[-6 TO -4]\", \"sort\", \"id asc\"),\n            \"//*[@numFound='1']\",\n            \"//result/doc[1]/int[@name='id'][.=2]\"\n            );\n    \n    // (cross zero bounds) double: rangequery\n    assertQ(req(\"q\", \"doubledv:[-6 TO 2.0]\", \"sort\", \"id asc\"),\n            \"//*[@numFound='2']\",\n            \"//result/doc[1]/int[@name='id'][.=2]\",\n            \"//result/doc[2]/int[@name='id'][.=4]\"\n            );\n    // boolean basic queries:\n\n    assertQ(req(\"q\", \"booldv:false\", \"sort\", \"id asc\"),\n        \"//*[@numFound='2']\",\n        \"//result/doc[1]/int[@name='id'][.=1]\",\n        \"//result/doc[2]/int[@name='id'][.=3]\"\n    );\n\n    assertQ(req(\"q\", \"booldv:true\", \"sort\", \"id asc\"),\n        \"//*[@numFound='2']\",\n        \"//result/doc[1]/int[@name='id'][.=2]\",\n        \"//result/doc[2]/int[@name='id'][.=4]\"\n    );\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/DocValuesTest#testDocValuesMatch().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/DocValuesTest#testDocValuesMatch().mjava","sourceNew":"  /** Tests the ability to do basic queries (without scoring, just match-only) on\n   *  docvalues fields that are not inverted (indexed \"forward\" only)\n   */\n  @Test\n  public void testDocValuesMatch() throws Exception {\n    assertU(adoc(\"id\", \"1\", \"floatdv\", \"2\", \"intdv\", \"3\", \"doubledv\", \"3.1\", \"longdv\", \"5\", \"datedv\", \"1995-12-31T23:59:59.999Z\", \"stringdv\", \"b\", \"booldv\", \"false\"));\n    assertU(adoc(\"id\", \"2\", \"floatdv\", \"-5\", \"intdv\", \"4\", \"doubledv\", \"-4.3\", \"longdv\", \"2\", \"datedv\", \"1997-12-31T23:59:59.999Z\", \"stringdv\", \"a\", \"booldv\", \"true\"));\n    assertU(adoc(\"id\", \"3\", \"floatdv\", \"3\", \"intdv\", \"1\", \"doubledv\", \"2.1\", \"longdv\", \"1\", \"datedv\", \"1996-12-31T23:59:59.999Z\", \"stringdv\", \"c\", \"booldv\", \"false\"));\n    assertU(adoc(\"id\", \"4\", \"floatdv\", \"3\", \"intdv\", \"-1\", \"doubledv\", \"1.5\", \"longdv\", \"1\", \"datedv\", \"1996-12-31T23:59:59.999Z\", \"stringdv\", \"car\"));\n    assertU(commit());\n\n    // string: termquery\n    assertQ(req(\"q\", \"stringdv:car\", \"sort\", \"id_i asc\"),\n        \"//*[@numFound='1']\",\n        \"//result/doc[1]/str[@name='id'][.=4]\"\n    );\n    \n    // string: range query\n    assertQ(req(\"q\", \"stringdv:[b TO d]\", \"sort\", \"id_i asc\"),\n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/str[@name='id'][.=1]\",\n        \"//result/doc[2]/str[@name='id'][.=3]\",\n        \"//result/doc[3]/str[@name='id'][.=4]\"\n    );\n    \n    // string: prefix query\n    assertQ(req(\"q\", \"stringdv:c*\", \"sort\", \"id_i asc\"),\n        \"//*[@numFound='2']\",\n        \"//result/doc[1]/str[@name='id'][.=3]\",\n        \"//result/doc[2]/str[@name='id'][.=4]\"\n    );\n    \n    // string: wildcard query\n    assertQ(req(\"q\", \"stringdv:c?r\", \"sort\", \"id_i asc\"),\n        \"//*[@numFound='1']\",\n        \"//result/doc[1]/str[@name='id'][.=4]\"\n    );\n    \n    // string: regexp query\n    assertQ(req(\"q\", \"stringdv:/c[a-b]r/\", \"sort\", \"id_i asc\"),\n        \"//*[@numFound='1']\",\n        \"//result/doc[1]/str[@name='id'][.=4]\"\n    );\n    \n    // float: termquery\n    assertQ(req(\"q\", \"floatdv:3\", \"sort\", \"id_i asc\"),\n        \"//*[@numFound='2']\",\n        \"//result/doc[1]/str[@name='id'][.=3]\",\n        \"//result/doc[2]/str[@name='id'][.=4]\"\n    );\n    \n    // float: rangequery\n    assertQ(req(\"q\", \"floatdv:[2 TO 3]\", \"sort\", \"id_i asc\"),\n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/str[@name='id'][.=1]\",\n        \"//result/doc[2]/str[@name='id'][.=3]\",\n        \"//result/doc[3]/str[@name='id'][.=4]\"\n    );\n    \n    // (neg) float: termquery\n    assertQ(req(\"q\", \"floatdv:\\\"-5\\\"\", \"sort\", \"id_i asc\"),\n            \"//*[@numFound='1']\",\n            \"//result/doc[1]/str[@name='id'][.=2]\"\n            );\n\n    // (neg) float: rangequery\n    assertQ(req(\"q\", \"floatdv:[-6 TO -4]\", \"sort\", \"id_i asc\"),\n            \"//*[@numFound='1']\",\n            \"//result/doc[1]/str[@name='id'][.=2]\"\n            );\n    \n    // (cross zero bounds) float: rangequery\n    assertQ(req(\"q\", \"floatdv:[-6 TO 2.1]\", \"sort\", \"id_i asc\"),\n            \"//*[@numFound='2']\",\n            \"//result/doc[1]/str[@name='id'][.=1]\",\n            \"//result/doc[2]/str[@name='id'][.=2]\"\n            );\n    \n    // int: termquery\n    assertQ(req(\"q\", \"intdv:1\", \"sort\", \"id_i asc\"),\n            \"//*[@numFound='1']\",\n            \"//result/doc[1]/str[@name='id'][.=3]\"\n            );\n    \n    // int: rangequery\n    assertQ(req(\"q\", \"intdv:[3 TO 4]\", \"sort\", \"id_i asc\"),\n            \"//*[@numFound='2']\",\n            \"//result/doc[1]/str[@name='id'][.=1]\",\n            \"//result/doc[2]/str[@name='id'][.=2]\"\n            );\n    \n    // (neg) int: termquery\n    assertQ(req(\"q\", \"intdv:\\\"-1\\\"\", \"sort\", \"id_i asc\"),\n            \"//*[@numFound='1']\",\n            \"//result/doc[1]/str[@name='id'][.=4]\"\n            );\n    \n    // (neg) int: rangequery\n    assertQ(req(\"q\", \"intdv:[-1 TO 1]\", \"sort\", \"id_i asc\"),\n            \"//*[@numFound='2']\",\n            \"//result/doc[1]/str[@name='id'][.=3]\",\n            \"//result/doc[2]/str[@name='id'][.=4]\"\n            );\n\n    // long: termquery\n    assertQ(req(\"q\", \"longdv:1\", \"sort\", \"id_i asc\"),\n        \"//*[@numFound='2']\",\n        \"//result/doc[1]/str[@name='id'][.=3]\",\n        \"//result/doc[2]/str[@name='id'][.=4]\"\n    );\n    \n    // long: rangequery\n    assertQ(req(\"q\", \"longdv:[1 TO 2]\", \"sort\", \"id_i asc\"),\n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/str[@name='id'][.=2]\",\n        \"//result/doc[2]/str[@name='id'][.=3]\",\n        \"//result/doc[3]/str[@name='id'][.=4]\"\n    );\n    \n    // double: termquery\n    assertQ(req(\"q\", \"doubledv:3.1\", \"sort\", \"id_i asc\"),\n            \"//*[@numFound='1']\",\n            \"//result/doc[1]/str[@name='id'][.=1]\"\n            );\n    \n    // double: rangequery\n    assertQ(req(\"q\", \"doubledv:[2 TO 3.3]\", \"sort\", \"id_i asc\"),\n            \"//*[@numFound='2']\",\n            \"//result/doc[1]/str[@name='id'][.=1]\",\n            \"//result/doc[2]/str[@name='id'][.=3]\"\n            );\n    \n    // (neg) double: termquery\n    assertQ(req(\"q\", \"doubledv:\\\"-4.3\\\"\", \"sort\", \"id_i asc\"),\n            \"//*[@numFound='1']\",\n            \"//result/doc[1]/str[@name='id'][.=2]\"\n            );\n    \n    // (neg) double: rangequery\n    assertQ(req(\"q\", \"doubledv:[-6 TO -4]\", \"sort\", \"id_i asc\"),\n            \"//*[@numFound='1']\",\n            \"//result/doc[1]/str[@name='id'][.=2]\"\n            );\n    \n    // (cross zero bounds) double: rangequery\n    assertQ(req(\"q\", \"doubledv:[-6 TO 2.0]\", \"sort\", \"id_i asc\"),\n            \"//*[@numFound='2']\",\n            \"//result/doc[1]/str[@name='id'][.=2]\",\n            \"//result/doc[2]/str[@name='id'][.=4]\"\n            );\n    // boolean basic queries:\n\n    assertQ(req(\"q\", \"booldv:false\", \"sort\", \"id_i asc\"),\n        \"//*[@numFound='2']\",\n        \"//result/doc[1]/str[@name='id'][.=1]\",\n        \"//result/doc[2]/str[@name='id'][.=3]\"\n    );\n\n    assertQ(req(\"q\", \"booldv:true\", \"sort\", \"id_i asc\"),\n        \"//*[@numFound='2']\",\n        \"//result/doc[1]/str[@name='id'][.=2]\",\n        \"//result/doc[2]/str[@name='id'][.=4]\"\n    );\n\n  }\n\n","sourceOld":"  /** Tests the ability to do basic queries (without scoring, just match-only) on\n   *  docvalues fields that are not inverted (indexed \"forward\" only)\n   */\n  @Test\n  public void testDocValuesMatch() throws Exception {\n    assertU(adoc(\"id\", \"1\", \"floatdv\", \"2\", \"intdv\", \"3\", \"doubledv\", \"3.1\", \"longdv\", \"5\", \"datedv\", \"1995-12-31T23:59:59.999Z\", \"stringdv\", \"b\", \"booldv\", \"false\"));\n    assertU(adoc(\"id\", \"2\", \"floatdv\", \"-5\", \"intdv\", \"4\", \"doubledv\", \"-4.3\", \"longdv\", \"2\", \"datedv\", \"1997-12-31T23:59:59.999Z\", \"stringdv\", \"a\", \"booldv\", \"true\"));\n    assertU(adoc(\"id\", \"3\", \"floatdv\", \"3\", \"intdv\", \"1\", \"doubledv\", \"2.1\", \"longdv\", \"1\", \"datedv\", \"1996-12-31T23:59:59.999Z\", \"stringdv\", \"c\", \"booldv\", \"false\"));\n    assertU(adoc(\"id\", \"4\", \"floatdv\", \"3\", \"intdv\", \"-1\", \"doubledv\", \"1.5\", \"longdv\", \"1\", \"datedv\", \"1996-12-31T23:59:59.999Z\", \"stringdv\", \"car\"));\n    assertU(commit());\n\n    // string: termquery\n    assertQ(req(\"q\", \"stringdv:car\", \"sort\", \"id asc\"),\n        \"//*[@numFound='1']\",\n        \"//result/doc[1]/int[@name='id'][.=4]\"\n    );\n    \n    // string: range query\n    assertQ(req(\"q\", \"stringdv:[b TO d]\", \"sort\", \"id asc\"),\n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/int[@name='id'][.=1]\",\n        \"//result/doc[2]/int[@name='id'][.=3]\",\n        \"//result/doc[3]/int[@name='id'][.=4]\"\n    );\n    \n    // string: prefix query\n    assertQ(req(\"q\", \"stringdv:c*\", \"sort\", \"id asc\"),\n        \"//*[@numFound='2']\",\n        \"//result/doc[1]/int[@name='id'][.=3]\",\n        \"//result/doc[2]/int[@name='id'][.=4]\"\n    );\n    \n    // string: wildcard query\n    assertQ(req(\"q\", \"stringdv:c?r\", \"sort\", \"id asc\"),\n        \"//*[@numFound='1']\",\n        \"//result/doc[1]/int[@name='id'][.=4]\"\n    );\n    \n    // string: regexp query\n    assertQ(req(\"q\", \"stringdv:/c[a-b]r/\", \"sort\", \"id asc\"),\n        \"//*[@numFound='1']\",\n        \"//result/doc[1]/int[@name='id'][.=4]\"\n    );\n    \n    // float: termquery\n    assertQ(req(\"q\", \"floatdv:3\", \"sort\", \"id asc\"),\n        \"//*[@numFound='2']\",\n        \"//result/doc[1]/int[@name='id'][.=3]\",\n        \"//result/doc[2]/int[@name='id'][.=4]\"\n    );\n    \n    // float: rangequery\n    assertQ(req(\"q\", \"floatdv:[2 TO 3]\", \"sort\", \"id asc\"),\n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/int[@name='id'][.=1]\",\n        \"//result/doc[2]/int[@name='id'][.=3]\",\n        \"//result/doc[3]/int[@name='id'][.=4]\"\n    );\n    \n    // (neg) float: termquery\n    assertQ(req(\"q\", \"floatdv:\\\"-5\\\"\", \"sort\", \"id asc\"),\n            \"//*[@numFound='1']\",\n            \"//result/doc[1]/int[@name='id'][.=2]\"\n            );\n\n    // (neg) float: rangequery\n    assertQ(req(\"q\", \"floatdv:[-6 TO -4]\", \"sort\", \"id asc\"),\n            \"//*[@numFound='1']\",\n            \"//result/doc[1]/int[@name='id'][.=2]\"\n            );\n    \n    // (cross zero bounds) float: rangequery\n    assertQ(req(\"q\", \"floatdv:[-6 TO 2.1]\", \"sort\", \"id asc\"),\n            \"//*[@numFound='2']\",\n            \"//result/doc[1]/int[@name='id'][.=1]\",\n            \"//result/doc[2]/int[@name='id'][.=2]\"\n            );\n    \n    // int: termquery\n    assertQ(req(\"q\", \"intdv:1\", \"sort\", \"id asc\"),\n            \"//*[@numFound='1']\",\n            \"//result/doc[1]/int[@name='id'][.=3]\"\n            );\n    \n    // int: rangequery\n    assertQ(req(\"q\", \"intdv:[3 TO 4]\", \"sort\", \"id asc\"),\n            \"//*[@numFound='2']\",\n            \"//result/doc[1]/int[@name='id'][.=1]\",\n            \"//result/doc[2]/int[@name='id'][.=2]\"\n            );\n    \n    // (neg) int: termquery\n    assertQ(req(\"q\", \"intdv:\\\"-1\\\"\", \"sort\", \"id asc\"),\n            \"//*[@numFound='1']\",\n            \"//result/doc[1]/int[@name='id'][.=4]\"\n            );\n    \n    // (neg) int: rangequery\n    assertQ(req(\"q\", \"intdv:[-1 TO 1]\", \"sort\", \"id asc\"),\n            \"//*[@numFound='2']\",\n            \"//result/doc[1]/int[@name='id'][.=3]\",\n            \"//result/doc[2]/int[@name='id'][.=4]\"\n            );\n\n    // long: termquery\n    assertQ(req(\"q\", \"longdv:1\", \"sort\", \"id asc\"),\n        \"//*[@numFound='2']\",\n        \"//result/doc[1]/int[@name='id'][.=3]\",\n        \"//result/doc[2]/int[@name='id'][.=4]\"\n    );\n    \n    // long: rangequery\n    assertQ(req(\"q\", \"longdv:[1 TO 2]\", \"sort\", \"id asc\"),\n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/int[@name='id'][.=2]\",\n        \"//result/doc[2]/int[@name='id'][.=3]\",\n        \"//result/doc[3]/int[@name='id'][.=4]\"\n    );\n    \n    // double: termquery\n    assertQ(req(\"q\", \"doubledv:3.1\", \"sort\", \"id asc\"),\n            \"//*[@numFound='1']\",\n            \"//result/doc[1]/int[@name='id'][.=1]\"\n            );\n    \n    // double: rangequery\n    assertQ(req(\"q\", \"doubledv:[2 TO 3.3]\", \"sort\", \"id asc\"),\n            \"//*[@numFound='2']\",\n            \"//result/doc[1]/int[@name='id'][.=1]\",\n            \"//result/doc[2]/int[@name='id'][.=3]\"\n            );\n    \n    // (neg) double: termquery\n    assertQ(req(\"q\", \"doubledv:\\\"-4.3\\\"\", \"sort\", \"id asc\"),\n            \"//*[@numFound='1']\",\n            \"//result/doc[1]/int[@name='id'][.=2]\"\n            );\n    \n    // (neg) double: rangequery\n    assertQ(req(\"q\", \"doubledv:[-6 TO -4]\", \"sort\", \"id asc\"),\n            \"//*[@numFound='1']\",\n            \"//result/doc[1]/int[@name='id'][.=2]\"\n            );\n    \n    // (cross zero bounds) double: rangequery\n    assertQ(req(\"q\", \"doubledv:[-6 TO 2.0]\", \"sort\", \"id asc\"),\n            \"//*[@numFound='2']\",\n            \"//result/doc[1]/int[@name='id'][.=2]\",\n            \"//result/doc[2]/int[@name='id'][.=4]\"\n            );\n    // boolean basic queries:\n\n    assertQ(req(\"q\", \"booldv:false\", \"sort\", \"id asc\"),\n        \"//*[@numFound='2']\",\n        \"//result/doc[1]/int[@name='id'][.=1]\",\n        \"//result/doc[2]/int[@name='id'][.=3]\"\n    );\n\n    assertQ(req(\"q\", \"booldv:true\", \"sort\", \"id asc\"),\n        \"//*[@numFound='2']\",\n        \"//result/doc[1]/int[@name='id'][.=2]\",\n        \"//result/doc[2]/int[@name='id'][.=4]\"\n    );\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7f1f5e4b31ec44927335e2ad6eebc4c1f8c0abf5":["c5cc22ce99f9ec86f1d1e55d36aaefac498ada97"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a71f63026529f3c1f03cfdd664910873ab2369ae":["7f1f5e4b31ec44927335e2ad6eebc4c1f8c0abf5"],"c5cc22ce99f9ec86f1d1e55d36aaefac498ada97":["ffced88b5e83e2ec0a42723404a647e766d96b8c"],"ffced88b5e83e2ec0a42723404a647e766d96b8c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"28288370235ed02234a64753cdbf0c6ec096304a":["7f1f5e4b31ec44927335e2ad6eebc4c1f8c0abf5","a71f63026529f3c1f03cfdd664910873ab2369ae"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["7f1f5e4b31ec44927335e2ad6eebc4c1f8c0abf5","a71f63026529f3c1f03cfdd664910873ab2369ae"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["c5cc22ce99f9ec86f1d1e55d36aaefac498ada97","7f1f5e4b31ec44927335e2ad6eebc4c1f8c0abf5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"7f1f5e4b31ec44927335e2ad6eebc4c1f8c0abf5":["a71f63026529f3c1f03cfdd664910873ab2369ae","28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ffced88b5e83e2ec0a42723404a647e766d96b8c"],"a71f63026529f3c1f03cfdd664910873ab2369ae":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"c5cc22ce99f9ec86f1d1e55d36aaefac498ada97":["7f1f5e4b31ec44927335e2ad6eebc4c1f8c0abf5","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"ffced88b5e83e2ec0a42723404a647e766d96b8c":["c5cc22ce99f9ec86f1d1e55d36aaefac498ada97"],"28288370235ed02234a64753cdbf0c6ec096304a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}