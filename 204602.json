{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/blocktreeords/OrdsBlockTreeTermsWriter.PendingBlock#compileIndex(List[PendingBlock],RAMOutputStream,IntsRefBuilder).mjava","commits":[{"id":"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","date":1407854805,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/blocktreeords/OrdsBlockTreeTermsWriter.PendingBlock#compileIndex(List[PendingBlock],RAMOutputStream,IntsRefBuilder).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/blocktreeords/OrdsBlockTreeTermsWriter.PendingBlock#compileIndex(List[PendingBlock],RAMOutputStream,IntsRef).mjava","sourceNew":"    public void compileIndex(List<PendingBlock> blocks, RAMOutputStream scratchBytes, IntsRefBuilder scratchIntsRef) throws IOException {\n\n      assert (isFloor && blocks.size() > 1) || (isFloor == false && blocks.size() == 1): \"isFloor=\" + isFloor + \" blocks=\" + blocks;\n      assert this == blocks.get(0);\n\n      assert scratchBytes.getFilePointer() == 0;\n\n      // TODO: try writing the leading vLong in MSB order\n      // (opposite of what Lucene does today), for better\n      // outputs sharing in the FST\n      long lastSumTotalTermCount = 0;\n      long sumTotalTermCount = totalTermCount;\n      scratchBytes.writeVLong(encodeOutput(fp, hasTerms, isFloor));\n      if (isFloor) {\n        scratchBytes.writeVInt(blocks.size()-1);\n        for (int i=1;i<blocks.size();i++) {\n          PendingBlock sub = blocks.get(i);\n          assert sub.floorLeadByte != -1;\n          //if (DEBUG) {\n          //  System.out.println(\"    write floorLeadByte=\" + Integer.toHexString(sub.floorLeadByte&0xff));\n          //}\n          scratchBytes.writeByte((byte) sub.floorLeadByte);\n          // System.out.println(\"  write floor byte=\" + (byte) sub.floorLeadByte + \" ordShift=\" + sumTotalTermCount);\n          scratchBytes.writeVLong(sumTotalTermCount - lastSumTotalTermCount);\n          lastSumTotalTermCount = sumTotalTermCount;\n          sumTotalTermCount += sub.totalTermCount;\n          assert sub.fp > fp;\n          scratchBytes.writeVLong((sub.fp - fp) << 1 | (sub.hasTerms ? 1 : 0));\n        }\n      }\n\n      final Builder<Output> indexBuilder = new Builder<>(FST.INPUT_TYPE.BYTE1,\n                                                         0, 0, true, false, Integer.MAX_VALUE,\n                                                         FST_OUTPUTS, false,\n                                                         PackedInts.COMPACT, true, 15);\n      //if (DEBUG) {\n      //  System.out.println(\"  compile index for prefix=\" + prefix);\n      //}\n      //indexBuilder.DEBUG = false;\n      final byte[] bytes = new byte[(int) scratchBytes.getFilePointer()];\n      assert bytes.length > 0;\n      // System.out.println(\"  bytes=\" + bytes.length);\n      scratchBytes.writeTo(bytes, 0);\n      indexBuilder.add(Util.toIntsRef(prefix, scratchIntsRef),\n                       FST_OUTPUTS.newOutput(new BytesRef(bytes, 0, bytes.length),\n                                             0, Long.MAX_VALUE-(sumTotalTermCount-1)));\n      scratchBytes.reset();\n\n      // Copy over index for all sub-blocks\n\n      long termOrdOffset = 0;\n      for(PendingBlock block : blocks) {\n        if (block.subIndices != null) {\n          for(SubIndex subIndex : block.subIndices) {\n            append(indexBuilder, subIndex.index, termOrdOffset + subIndex.termOrdStart, scratchIntsRef);\n          }\n          block.subIndices = null;\n        }\n        termOrdOffset += block.totalTermCount;\n      }\n      totFloorTermCount = termOrdOffset;\n\n      assert sumTotalTermCount == totFloorTermCount;\n\n      index = indexBuilder.finish();\n      assert subIndices == null;\n\n      /*\n      Writer w = new OutputStreamWriter(new FileOutputStream(\"out.dot\"));\n      Util.toDot(index, w, false, false);\n      System.out.println(\"SAVED to out.dot\");\n      w.close();\n      */\n    }\n\n","sourceOld":"    public void compileIndex(List<PendingBlock> blocks, RAMOutputStream scratchBytes, IntsRef scratchIntsRef) throws IOException {\n\n      assert (isFloor && blocks.size() > 1) || (isFloor == false && blocks.size() == 1): \"isFloor=\" + isFloor + \" blocks=\" + blocks;\n      assert this == blocks.get(0);\n\n      assert scratchBytes.getFilePointer() == 0;\n\n      // TODO: try writing the leading vLong in MSB order\n      // (opposite of what Lucene does today), for better\n      // outputs sharing in the FST\n      long lastSumTotalTermCount = 0;\n      long sumTotalTermCount = totalTermCount;\n      scratchBytes.writeVLong(encodeOutput(fp, hasTerms, isFloor));\n      if (isFloor) {\n        scratchBytes.writeVInt(blocks.size()-1);\n        for (int i=1;i<blocks.size();i++) {\n          PendingBlock sub = blocks.get(i);\n          assert sub.floorLeadByte != -1;\n          //if (DEBUG) {\n          //  System.out.println(\"    write floorLeadByte=\" + Integer.toHexString(sub.floorLeadByte&0xff));\n          //}\n          scratchBytes.writeByte((byte) sub.floorLeadByte);\n          // System.out.println(\"  write floor byte=\" + (byte) sub.floorLeadByte + \" ordShift=\" + sumTotalTermCount);\n          scratchBytes.writeVLong(sumTotalTermCount - lastSumTotalTermCount);\n          lastSumTotalTermCount = sumTotalTermCount;\n          sumTotalTermCount += sub.totalTermCount;\n          assert sub.fp > fp;\n          scratchBytes.writeVLong((sub.fp - fp) << 1 | (sub.hasTerms ? 1 : 0));\n        }\n      }\n\n      final Builder<Output> indexBuilder = new Builder<>(FST.INPUT_TYPE.BYTE1,\n                                                         0, 0, true, false, Integer.MAX_VALUE,\n                                                         FST_OUTPUTS, false,\n                                                         PackedInts.COMPACT, true, 15);\n      //if (DEBUG) {\n      //  System.out.println(\"  compile index for prefix=\" + prefix);\n      //}\n      //indexBuilder.DEBUG = false;\n      final byte[] bytes = new byte[(int) scratchBytes.getFilePointer()];\n      assert bytes.length > 0;\n      // System.out.println(\"  bytes=\" + bytes.length);\n      scratchBytes.writeTo(bytes, 0);\n      indexBuilder.add(Util.toIntsRef(prefix, scratchIntsRef),\n                       FST_OUTPUTS.newOutput(new BytesRef(bytes, 0, bytes.length),\n                                             0, Long.MAX_VALUE-(sumTotalTermCount-1)));\n      scratchBytes.reset();\n\n      // Copy over index for all sub-blocks\n\n      long termOrdOffset = 0;\n      for(PendingBlock block : blocks) {\n        if (block.subIndices != null) {\n          for(SubIndex subIndex : block.subIndices) {\n            append(indexBuilder, subIndex.index, termOrdOffset + subIndex.termOrdStart, scratchIntsRef);\n          }\n          block.subIndices = null;\n        }\n        termOrdOffset += block.totalTermCount;\n      }\n      totFloorTermCount = termOrdOffset;\n\n      assert sumTotalTermCount == totFloorTermCount;\n\n      index = indexBuilder.finish();\n      assert subIndices == null;\n\n      /*\n      Writer w = new OutputStreamWriter(new FileOutputStream(\"out.dot\"));\n      Util.toDot(index, w, false, false);\n      System.out.println(\"SAVED to out.dot\");\n      w.close();\n      */\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6244579a467d5f2673ac98265d74bddbea1a8114","date":1478786509,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/blocktreeords/OrdsBlockTreeTermsWriter.PendingBlock#compileIndex(List[PendingBlock],RAMOutputStream,IntsRefBuilder).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/blocktreeords/OrdsBlockTreeTermsWriter.PendingBlock#compileIndex(List[PendingBlock],RAMOutputStream,IntsRefBuilder).mjava","sourceNew":"    public void compileIndex(List<PendingBlock> blocks, RAMOutputStream scratchBytes, IntsRefBuilder scratchIntsRef) throws IOException {\n\n      assert (isFloor && blocks.size() > 1) || (isFloor == false && blocks.size() == 1): \"isFloor=\" + isFloor + \" blocks=\" + blocks;\n      assert this == blocks.get(0);\n\n      assert scratchBytes.getFilePointer() == 0;\n\n      // TODO: try writing the leading vLong in MSB order\n      // (opposite of what Lucene does today), for better\n      // outputs sharing in the FST\n      long lastSumTotalTermCount = 0;\n      long sumTotalTermCount = totalTermCount;\n      scratchBytes.writeVLong(encodeOutput(fp, hasTerms, isFloor));\n      if (isFloor) {\n        scratchBytes.writeVInt(blocks.size()-1);\n        for (int i=1;i<blocks.size();i++) {\n          PendingBlock sub = blocks.get(i);\n          assert sub.floorLeadByte != -1;\n          //if (DEBUG) {\n          //  System.out.println(\"    write floorLeadByte=\" + Integer.toHexString(sub.floorLeadByte&0xff));\n          //}\n          scratchBytes.writeByte((byte) sub.floorLeadByte);\n          // System.out.println(\"  write floor byte=\" + (byte) sub.floorLeadByte + \" ordShift=\" + sumTotalTermCount);\n          scratchBytes.writeVLong(sumTotalTermCount - lastSumTotalTermCount);\n          lastSumTotalTermCount = sumTotalTermCount;\n          sumTotalTermCount += sub.totalTermCount;\n          assert sub.fp > fp;\n          scratchBytes.writeVLong((sub.fp - fp) << 1 | (sub.hasTerms ? 1 : 0));\n        }\n      }\n\n      final Builder<Output> indexBuilder = new Builder<>(FST.INPUT_TYPE.BYTE1,\n                                                         0, 0, true, false, Integer.MAX_VALUE,\n                                                         FST_OUTPUTS, true, 15);\n      //if (DEBUG) {\n      //  System.out.println(\"  compile index for prefix=\" + prefix);\n      //}\n      //indexBuilder.DEBUG = false;\n      final byte[] bytes = new byte[(int) scratchBytes.getFilePointer()];\n      assert bytes.length > 0;\n      // System.out.println(\"  bytes=\" + bytes.length);\n      scratchBytes.writeTo(bytes, 0);\n      indexBuilder.add(Util.toIntsRef(prefix, scratchIntsRef),\n                       FST_OUTPUTS.newOutput(new BytesRef(bytes, 0, bytes.length),\n                                             0, Long.MAX_VALUE-(sumTotalTermCount-1)));\n      scratchBytes.reset();\n\n      // Copy over index for all sub-blocks\n\n      long termOrdOffset = 0;\n      for(PendingBlock block : blocks) {\n        if (block.subIndices != null) {\n          for(SubIndex subIndex : block.subIndices) {\n            append(indexBuilder, subIndex.index, termOrdOffset + subIndex.termOrdStart, scratchIntsRef);\n          }\n          block.subIndices = null;\n        }\n        termOrdOffset += block.totalTermCount;\n      }\n      totFloorTermCount = termOrdOffset;\n\n      assert sumTotalTermCount == totFloorTermCount;\n\n      index = indexBuilder.finish();\n      assert subIndices == null;\n\n      /*\n      Writer w = new OutputStreamWriter(new FileOutputStream(\"out.dot\"));\n      Util.toDot(index, w, false, false);\n      System.out.println(\"SAVED to out.dot\");\n      w.close();\n      */\n    }\n\n","sourceOld":"    public void compileIndex(List<PendingBlock> blocks, RAMOutputStream scratchBytes, IntsRefBuilder scratchIntsRef) throws IOException {\n\n      assert (isFloor && blocks.size() > 1) || (isFloor == false && blocks.size() == 1): \"isFloor=\" + isFloor + \" blocks=\" + blocks;\n      assert this == blocks.get(0);\n\n      assert scratchBytes.getFilePointer() == 0;\n\n      // TODO: try writing the leading vLong in MSB order\n      // (opposite of what Lucene does today), for better\n      // outputs sharing in the FST\n      long lastSumTotalTermCount = 0;\n      long sumTotalTermCount = totalTermCount;\n      scratchBytes.writeVLong(encodeOutput(fp, hasTerms, isFloor));\n      if (isFloor) {\n        scratchBytes.writeVInt(blocks.size()-1);\n        for (int i=1;i<blocks.size();i++) {\n          PendingBlock sub = blocks.get(i);\n          assert sub.floorLeadByte != -1;\n          //if (DEBUG) {\n          //  System.out.println(\"    write floorLeadByte=\" + Integer.toHexString(sub.floorLeadByte&0xff));\n          //}\n          scratchBytes.writeByte((byte) sub.floorLeadByte);\n          // System.out.println(\"  write floor byte=\" + (byte) sub.floorLeadByte + \" ordShift=\" + sumTotalTermCount);\n          scratchBytes.writeVLong(sumTotalTermCount - lastSumTotalTermCount);\n          lastSumTotalTermCount = sumTotalTermCount;\n          sumTotalTermCount += sub.totalTermCount;\n          assert sub.fp > fp;\n          scratchBytes.writeVLong((sub.fp - fp) << 1 | (sub.hasTerms ? 1 : 0));\n        }\n      }\n\n      final Builder<Output> indexBuilder = new Builder<>(FST.INPUT_TYPE.BYTE1,\n                                                         0, 0, true, false, Integer.MAX_VALUE,\n                                                         FST_OUTPUTS, false,\n                                                         PackedInts.COMPACT, true, 15);\n      //if (DEBUG) {\n      //  System.out.println(\"  compile index for prefix=\" + prefix);\n      //}\n      //indexBuilder.DEBUG = false;\n      final byte[] bytes = new byte[(int) scratchBytes.getFilePointer()];\n      assert bytes.length > 0;\n      // System.out.println(\"  bytes=\" + bytes.length);\n      scratchBytes.writeTo(bytes, 0);\n      indexBuilder.add(Util.toIntsRef(prefix, scratchIntsRef),\n                       FST_OUTPUTS.newOutput(new BytesRef(bytes, 0, bytes.length),\n                                             0, Long.MAX_VALUE-(sumTotalTermCount-1)));\n      scratchBytes.reset();\n\n      // Copy over index for all sub-blocks\n\n      long termOrdOffset = 0;\n      for(PendingBlock block : blocks) {\n        if (block.subIndices != null) {\n          for(SubIndex subIndex : block.subIndices) {\n            append(indexBuilder, subIndex.index, termOrdOffset + subIndex.termOrdStart, scratchIntsRef);\n          }\n          block.subIndices = null;\n        }\n        termOrdOffset += block.totalTermCount;\n      }\n      totFloorTermCount = termOrdOffset;\n\n      assert sumTotalTermCount == totFloorTermCount;\n\n      index = indexBuilder.finish();\n      assert subIndices == null;\n\n      /*\n      Writer w = new OutputStreamWriter(new FileOutputStream(\"out.dot\"));\n      Util.toDot(index, w, false, false);\n      System.out.println(\"SAVED to out.dot\");\n      w.close();\n      */\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"199dfa410f1fdbfd3294106b04096cce5ed34b21","date":1478812506,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/blocktreeords/OrdsBlockTreeTermsWriter.PendingBlock#compileIndex(List[PendingBlock],RAMOutputStream,IntsRefBuilder).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/blocktreeords/OrdsBlockTreeTermsWriter.PendingBlock#compileIndex(List[PendingBlock],RAMOutputStream,IntsRefBuilder).mjava","sourceNew":"    public void compileIndex(List<PendingBlock> blocks, RAMOutputStream scratchBytes, IntsRefBuilder scratchIntsRef) throws IOException {\n\n      assert (isFloor && blocks.size() > 1) || (isFloor == false && blocks.size() == 1): \"isFloor=\" + isFloor + \" blocks=\" + blocks;\n      assert this == blocks.get(0);\n\n      assert scratchBytes.getFilePointer() == 0;\n\n      // TODO: try writing the leading vLong in MSB order\n      // (opposite of what Lucene does today), for better\n      // outputs sharing in the FST\n      long lastSumTotalTermCount = 0;\n      long sumTotalTermCount = totalTermCount;\n      scratchBytes.writeVLong(encodeOutput(fp, hasTerms, isFloor));\n      if (isFloor) {\n        scratchBytes.writeVInt(blocks.size()-1);\n        for (int i=1;i<blocks.size();i++) {\n          PendingBlock sub = blocks.get(i);\n          assert sub.floorLeadByte != -1;\n          //if (DEBUG) {\n          //  System.out.println(\"    write floorLeadByte=\" + Integer.toHexString(sub.floorLeadByte&0xff));\n          //}\n          scratchBytes.writeByte((byte) sub.floorLeadByte);\n          // System.out.println(\"  write floor byte=\" + (byte) sub.floorLeadByte + \" ordShift=\" + sumTotalTermCount);\n          scratchBytes.writeVLong(sumTotalTermCount - lastSumTotalTermCount);\n          lastSumTotalTermCount = sumTotalTermCount;\n          sumTotalTermCount += sub.totalTermCount;\n          assert sub.fp > fp;\n          scratchBytes.writeVLong((sub.fp - fp) << 1 | (sub.hasTerms ? 1 : 0));\n        }\n      }\n\n      final Builder<Output> indexBuilder = new Builder<>(FST.INPUT_TYPE.BYTE1,\n                                                         0, 0, true, false, Integer.MAX_VALUE,\n                                                         FST_OUTPUTS, true, 15);\n      //if (DEBUG) {\n      //  System.out.println(\"  compile index for prefix=\" + prefix);\n      //}\n      //indexBuilder.DEBUG = false;\n      final byte[] bytes = new byte[(int) scratchBytes.getFilePointer()];\n      assert bytes.length > 0;\n      // System.out.println(\"  bytes=\" + bytes.length);\n      scratchBytes.writeTo(bytes, 0);\n      indexBuilder.add(Util.toIntsRef(prefix, scratchIntsRef),\n                       FST_OUTPUTS.newOutput(new BytesRef(bytes, 0, bytes.length),\n                                             0, Long.MAX_VALUE-(sumTotalTermCount-1)));\n      scratchBytes.reset();\n\n      // Copy over index for all sub-blocks\n\n      long termOrdOffset = 0;\n      for(PendingBlock block : blocks) {\n        if (block.subIndices != null) {\n          for(SubIndex subIndex : block.subIndices) {\n            append(indexBuilder, subIndex.index, termOrdOffset + subIndex.termOrdStart, scratchIntsRef);\n          }\n          block.subIndices = null;\n        }\n        termOrdOffset += block.totalTermCount;\n      }\n      totFloorTermCount = termOrdOffset;\n\n      assert sumTotalTermCount == totFloorTermCount;\n\n      index = indexBuilder.finish();\n      assert subIndices == null;\n\n      /*\n      Writer w = new OutputStreamWriter(new FileOutputStream(\"out.dot\"));\n      Util.toDot(index, w, false, false);\n      System.out.println(\"SAVED to out.dot\");\n      w.close();\n      */\n    }\n\n","sourceOld":"    public void compileIndex(List<PendingBlock> blocks, RAMOutputStream scratchBytes, IntsRefBuilder scratchIntsRef) throws IOException {\n\n      assert (isFloor && blocks.size() > 1) || (isFloor == false && blocks.size() == 1): \"isFloor=\" + isFloor + \" blocks=\" + blocks;\n      assert this == blocks.get(0);\n\n      assert scratchBytes.getFilePointer() == 0;\n\n      // TODO: try writing the leading vLong in MSB order\n      // (opposite of what Lucene does today), for better\n      // outputs sharing in the FST\n      long lastSumTotalTermCount = 0;\n      long sumTotalTermCount = totalTermCount;\n      scratchBytes.writeVLong(encodeOutput(fp, hasTerms, isFloor));\n      if (isFloor) {\n        scratchBytes.writeVInt(blocks.size()-1);\n        for (int i=1;i<blocks.size();i++) {\n          PendingBlock sub = blocks.get(i);\n          assert sub.floorLeadByte != -1;\n          //if (DEBUG) {\n          //  System.out.println(\"    write floorLeadByte=\" + Integer.toHexString(sub.floorLeadByte&0xff));\n          //}\n          scratchBytes.writeByte((byte) sub.floorLeadByte);\n          // System.out.println(\"  write floor byte=\" + (byte) sub.floorLeadByte + \" ordShift=\" + sumTotalTermCount);\n          scratchBytes.writeVLong(sumTotalTermCount - lastSumTotalTermCount);\n          lastSumTotalTermCount = sumTotalTermCount;\n          sumTotalTermCount += sub.totalTermCount;\n          assert sub.fp > fp;\n          scratchBytes.writeVLong((sub.fp - fp) << 1 | (sub.hasTerms ? 1 : 0));\n        }\n      }\n\n      final Builder<Output> indexBuilder = new Builder<>(FST.INPUT_TYPE.BYTE1,\n                                                         0, 0, true, false, Integer.MAX_VALUE,\n                                                         FST_OUTPUTS, false,\n                                                         PackedInts.COMPACT, true, 15);\n      //if (DEBUG) {\n      //  System.out.println(\"  compile index for prefix=\" + prefix);\n      //}\n      //indexBuilder.DEBUG = false;\n      final byte[] bytes = new byte[(int) scratchBytes.getFilePointer()];\n      assert bytes.length > 0;\n      // System.out.println(\"  bytes=\" + bytes.length);\n      scratchBytes.writeTo(bytes, 0);\n      indexBuilder.add(Util.toIntsRef(prefix, scratchIntsRef),\n                       FST_OUTPUTS.newOutput(new BytesRef(bytes, 0, bytes.length),\n                                             0, Long.MAX_VALUE-(sumTotalTermCount-1)));\n      scratchBytes.reset();\n\n      // Copy over index for all sub-blocks\n\n      long termOrdOffset = 0;\n      for(PendingBlock block : blocks) {\n        if (block.subIndices != null) {\n          for(SubIndex subIndex : block.subIndices) {\n            append(indexBuilder, subIndex.index, termOrdOffset + subIndex.termOrdStart, scratchIntsRef);\n          }\n          block.subIndices = null;\n        }\n        termOrdOffset += block.totalTermCount;\n      }\n      totFloorTermCount = termOrdOffset;\n\n      assert sumTotalTermCount == totFloorTermCount;\n\n      index = indexBuilder.finish();\n      assert subIndices == null;\n\n      /*\n      Writer w = new OutputStreamWriter(new FileOutputStream(\"out.dot\"));\n      Util.toDot(index, w, false, false);\n      System.out.println(\"SAVED to out.dot\");\n      w.close();\n      */\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"409da428f28953cf35fddd5c9ff5c7e4f5439863","date":1547556145,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/blocktreeords/OrdsBlockTreeTermsWriter.PendingBlock#compileIndex(List[PendingBlock],ByteBuffersDataOutput,IntsRefBuilder).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/blocktreeords/OrdsBlockTreeTermsWriter.PendingBlock#compileIndex(List[PendingBlock],RAMOutputStream,IntsRefBuilder).mjava","sourceNew":"    public void compileIndex(List<PendingBlock> blocks, ByteBuffersDataOutput scratchBytes, IntsRefBuilder scratchIntsRef) throws IOException {\n\n      assert (isFloor && blocks.size() > 1) || (isFloor == false && blocks.size() == 1): \"isFloor=\" + isFloor + \" blocks=\" + blocks;\n      assert this == blocks.get(0);\n\n      assert scratchBytes.size() == 0;\n\n      // TODO: try writing the leading vLong in MSB order\n      // (opposite of what Lucene does today), for better\n      // outputs sharing in the FST\n      long lastSumTotalTermCount = 0;\n      long sumTotalTermCount = totalTermCount;\n      scratchBytes.writeVLong(encodeOutput(fp, hasTerms, isFloor));\n      if (isFloor) {\n        scratchBytes.writeVInt(blocks.size()-1);\n        for (int i=1;i<blocks.size();i++) {\n          PendingBlock sub = blocks.get(i);\n          assert sub.floorLeadByte != -1;\n          //if (DEBUG) {\n          //  System.out.println(\"    write floorLeadByte=\" + Integer.toHexString(sub.floorLeadByte&0xff));\n          //}\n          scratchBytes.writeByte((byte) sub.floorLeadByte);\n          // System.out.println(\"  write floor byte=\" + (byte) sub.floorLeadByte + \" ordShift=\" + sumTotalTermCount);\n          scratchBytes.writeVLong(sumTotalTermCount - lastSumTotalTermCount);\n          lastSumTotalTermCount = sumTotalTermCount;\n          sumTotalTermCount += sub.totalTermCount;\n          assert sub.fp > fp;\n          scratchBytes.writeVLong((sub.fp - fp) << 1 | (sub.hasTerms ? 1 : 0));\n        }\n      }\n\n      final Builder<Output> indexBuilder = new Builder<>(FST.INPUT_TYPE.BYTE1,\n                                                         0, 0, true, false, Integer.MAX_VALUE,\n                                                         FST_OUTPUTS, true, 15);\n      //if (DEBUG) {\n      //  System.out.println(\"  compile index for prefix=\" + prefix);\n      //}\n      //indexBuilder.DEBUG = false;\n      final byte[] bytes = scratchBytes.toArrayCopy();\n      assert bytes.length > 0;\n      indexBuilder.add(Util.toIntsRef(prefix, scratchIntsRef),\n                       FST_OUTPUTS.newOutput(new BytesRef(bytes, 0, bytes.length),\n                                             0, Long.MAX_VALUE-(sumTotalTermCount-1)));\n      scratchBytes.reset();\n\n      // Copy over index for all sub-blocks\n\n      long termOrdOffset = 0;\n      for(PendingBlock block : blocks) {\n        if (block.subIndices != null) {\n          for(SubIndex subIndex : block.subIndices) {\n            append(indexBuilder, subIndex.index, termOrdOffset + subIndex.termOrdStart, scratchIntsRef);\n          }\n          block.subIndices = null;\n        }\n        termOrdOffset += block.totalTermCount;\n      }\n      totFloorTermCount = termOrdOffset;\n\n      assert sumTotalTermCount == totFloorTermCount;\n\n      index = indexBuilder.finish();\n      assert subIndices == null;\n\n      /*\n      Writer w = new OutputStreamWriter(new FileOutputStream(\"out.dot\"));\n      Util.toDot(index, w, false, false);\n      System.out.println(\"SAVED to out.dot\");\n      w.close();\n      */\n    }\n\n","sourceOld":"    public void compileIndex(List<PendingBlock> blocks, RAMOutputStream scratchBytes, IntsRefBuilder scratchIntsRef) throws IOException {\n\n      assert (isFloor && blocks.size() > 1) || (isFloor == false && blocks.size() == 1): \"isFloor=\" + isFloor + \" blocks=\" + blocks;\n      assert this == blocks.get(0);\n\n      assert scratchBytes.getFilePointer() == 0;\n\n      // TODO: try writing the leading vLong in MSB order\n      // (opposite of what Lucene does today), for better\n      // outputs sharing in the FST\n      long lastSumTotalTermCount = 0;\n      long sumTotalTermCount = totalTermCount;\n      scratchBytes.writeVLong(encodeOutput(fp, hasTerms, isFloor));\n      if (isFloor) {\n        scratchBytes.writeVInt(blocks.size()-1);\n        for (int i=1;i<blocks.size();i++) {\n          PendingBlock sub = blocks.get(i);\n          assert sub.floorLeadByte != -1;\n          //if (DEBUG) {\n          //  System.out.println(\"    write floorLeadByte=\" + Integer.toHexString(sub.floorLeadByte&0xff));\n          //}\n          scratchBytes.writeByte((byte) sub.floorLeadByte);\n          // System.out.println(\"  write floor byte=\" + (byte) sub.floorLeadByte + \" ordShift=\" + sumTotalTermCount);\n          scratchBytes.writeVLong(sumTotalTermCount - lastSumTotalTermCount);\n          lastSumTotalTermCount = sumTotalTermCount;\n          sumTotalTermCount += sub.totalTermCount;\n          assert sub.fp > fp;\n          scratchBytes.writeVLong((sub.fp - fp) << 1 | (sub.hasTerms ? 1 : 0));\n        }\n      }\n\n      final Builder<Output> indexBuilder = new Builder<>(FST.INPUT_TYPE.BYTE1,\n                                                         0, 0, true, false, Integer.MAX_VALUE,\n                                                         FST_OUTPUTS, true, 15);\n      //if (DEBUG) {\n      //  System.out.println(\"  compile index for prefix=\" + prefix);\n      //}\n      //indexBuilder.DEBUG = false;\n      final byte[] bytes = new byte[(int) scratchBytes.getFilePointer()];\n      assert bytes.length > 0;\n      // System.out.println(\"  bytes=\" + bytes.length);\n      scratchBytes.writeTo(bytes, 0);\n      indexBuilder.add(Util.toIntsRef(prefix, scratchIntsRef),\n                       FST_OUTPUTS.newOutput(new BytesRef(bytes, 0, bytes.length),\n                                             0, Long.MAX_VALUE-(sumTotalTermCount-1)));\n      scratchBytes.reset();\n\n      // Copy over index for all sub-blocks\n\n      long termOrdOffset = 0;\n      for(PendingBlock block : blocks) {\n        if (block.subIndices != null) {\n          for(SubIndex subIndex : block.subIndices) {\n            append(indexBuilder, subIndex.index, termOrdOffset + subIndex.termOrdStart, scratchIntsRef);\n          }\n          block.subIndices = null;\n        }\n        termOrdOffset += block.totalTermCount;\n      }\n      totFloorTermCount = termOrdOffset;\n\n      assert sumTotalTermCount == totFloorTermCount;\n\n      index = indexBuilder.finish();\n      assert subIndices == null;\n\n      /*\n      Writer w = new OutputStreamWriter(new FileOutputStream(\"out.dot\"));\n      Util.toDot(index, w, false, false);\n      System.out.println(\"SAVED to out.dot\");\n      w.close();\n      */\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"409da428f28953cf35fddd5c9ff5c7e4f5439863":["6244579a467d5f2673ac98265d74bddbea1a8114"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6244579a467d5f2673ac98265d74bddbea1a8114":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"199dfa410f1fdbfd3294106b04096cce5ed34b21":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","6244579a467d5f2673ac98265d74bddbea1a8114"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["409da428f28953cf35fddd5c9ff5c7e4f5439863"]},"commit2Childs":{"409da428f28953cf35fddd5c9ff5c7e4f5439863":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"6244579a467d5f2673ac98265d74bddbea1a8114":["409da428f28953cf35fddd5c9ff5c7e4f5439863","199dfa410f1fdbfd3294106b04096cce5ed34b21"],"199dfa410f1fdbfd3294106b04096cce5ed34b21":[],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["6244579a467d5f2673ac98265d74bddbea1a8114","199dfa410f1fdbfd3294106b04096cce5ed34b21"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["199dfa410f1fdbfd3294106b04096cce5ed34b21","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}