{"path":"lucene/core/src/test/org/apache/lucene/index/TestIndexReaderClose#testCoreListenerOnWrapper().mjava","commits":[{"id":"7704e64a78bc9f245268f5c002d1e66b6c9f309f","date":1400878491,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexReaderClose#testCoreListenerOnWrapper().mjava","pathOld":"/dev/null","sourceNew":"  public void testCoreListenerOnWrapper() throws IOException {\n    RandomIndexWriter w = new RandomIndexWriter(random(), newDirectory());\n    final int numDocs = TestUtil.nextInt(random(), 1, 5);\n    for (int i = 0; i < numDocs; ++i) {\n      w.addDocument(new Document());\n      if (random().nextBoolean()) {\n        w.commit();\n      }\n    }\n    w.commit();\n    w.close();\n\n    final IndexReader reader = DirectoryReader.open(w.w.getDirectory());\n    final AtomicReader atomicReader = SlowCompositeReaderWrapper.wrap(reader);\n    \n    final int numListeners = TestUtil.nextInt(random(), 1, 10);\n    final List<AtomicReader.CoreClosedListener> listeners = new ArrayList<>();\n    AtomicInteger counter = new AtomicInteger(numListeners);\n    \n    for (int i = 0; i < numListeners; ++i) {\n      CountCoreListener listener = new CountCoreListener(counter);\n      listeners.add(listener);\n      atomicReader.addCoreClosedListener(listener);\n    }\n    for (int i = 0; i < 100; ++i) {\n      atomicReader.addCoreClosedListener(listeners.get(random().nextInt(listeners.size())));\n    }\n    final int removed = random().nextInt(numListeners);\n    Collections.shuffle(listeners);\n    for (int i = 0; i < removed; ++i) {\n      atomicReader.removeCoreClosedListener(listeners.get(i));\n    }\n    assertEquals(numListeners, counter.get());\n    // make sure listeners are registered on the wrapped reader and that closing any of them has the same effect\n    if (random().nextBoolean()) {\n      reader.close();\n    } else {\n      atomicReader.close();\n    }\n    assertEquals(removed, counter.get());\n    w.w.getDirectory().close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["103857ec20f79f31c7a00310a91ed001b9a6ef17"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexReaderClose#testCoreListenerOnWrapper().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexReaderClose#testCoreListenerOnWrapper().mjava","sourceNew":"  public void testCoreListenerOnWrapper() throws IOException {\n    RandomIndexWriter w = new RandomIndexWriter(random(), newDirectory());\n    final int numDocs = TestUtil.nextInt(random(), 1, 5);\n    for (int i = 0; i < numDocs; ++i) {\n      w.addDocument(new Document());\n      if (random().nextBoolean()) {\n        w.commit();\n      }\n    }\n    w.commit();\n    w.close();\n\n    final IndexReader reader = DirectoryReader.open(w.w.getDirectory());\n    final LeafReader leafReader = SlowCompositeReaderWrapper.wrap(reader);\n    \n    final int numListeners = TestUtil.nextInt(random(), 1, 10);\n    final List<LeafReader.CoreClosedListener> listeners = new ArrayList<>();\n    AtomicInteger counter = new AtomicInteger(numListeners);\n    \n    for (int i = 0; i < numListeners; ++i) {\n      CountCoreListener listener = new CountCoreListener(counter);\n      listeners.add(listener);\n      leafReader.addCoreClosedListener(listener);\n    }\n    for (int i = 0; i < 100; ++i) {\n      leafReader.addCoreClosedListener(listeners.get(random().nextInt(listeners.size())));\n    }\n    final int removed = random().nextInt(numListeners);\n    Collections.shuffle(listeners);\n    for (int i = 0; i < removed; ++i) {\n      leafReader.removeCoreClosedListener(listeners.get(i));\n    }\n    assertEquals(numListeners, counter.get());\n    // make sure listeners are registered on the wrapped reader and that closing any of them has the same effect\n    if (random().nextBoolean()) {\n      reader.close();\n    } else {\n      leafReader.close();\n    }\n    assertEquals(removed, counter.get());\n    w.w.getDirectory().close();\n  }\n\n","sourceOld":"  public void testCoreListenerOnWrapper() throws IOException {\n    RandomIndexWriter w = new RandomIndexWriter(random(), newDirectory());\n    final int numDocs = TestUtil.nextInt(random(), 1, 5);\n    for (int i = 0; i < numDocs; ++i) {\n      w.addDocument(new Document());\n      if (random().nextBoolean()) {\n        w.commit();\n      }\n    }\n    w.commit();\n    w.close();\n\n    final IndexReader reader = DirectoryReader.open(w.w.getDirectory());\n    final AtomicReader atomicReader = SlowCompositeReaderWrapper.wrap(reader);\n    \n    final int numListeners = TestUtil.nextInt(random(), 1, 10);\n    final List<AtomicReader.CoreClosedListener> listeners = new ArrayList<>();\n    AtomicInteger counter = new AtomicInteger(numListeners);\n    \n    for (int i = 0; i < numListeners; ++i) {\n      CountCoreListener listener = new CountCoreListener(counter);\n      listeners.add(listener);\n      atomicReader.addCoreClosedListener(listener);\n    }\n    for (int i = 0; i < 100; ++i) {\n      atomicReader.addCoreClosedListener(listeners.get(random().nextInt(listeners.size())));\n    }\n    final int removed = random().nextInt(numListeners);\n    Collections.shuffle(listeners);\n    for (int i = 0; i < removed; ++i) {\n      atomicReader.removeCoreClosedListener(listeners.get(i));\n    }\n    assertEquals(numListeners, counter.get());\n    // make sure listeners are registered on the wrapped reader and that closing any of them has the same effect\n    if (random().nextBoolean()) {\n      reader.close();\n    } else {\n      atomicReader.close();\n    }\n    assertEquals(removed, counter.get());\n    w.w.getDirectory().close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"103857ec20f79f31c7a00310a91ed001b9a6ef17","date":1412698959,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexReaderClose#testCoreListenerOnWrapper().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexReaderClose#testCoreListenerOnWrapper().mjava","sourceNew":"  public void testCoreListenerOnWrapper() throws IOException {\n    RandomIndexWriter w = new RandomIndexWriter(random(), newDirectory());\n    final int numDocs = TestUtil.nextInt(random(), 1, 5);\n    for (int i = 0; i < numDocs; ++i) {\n      w.addDocument(new Document());\n      if (random().nextBoolean()) {\n        w.commit();\n      }\n    }\n    w.commit();\n    w.close();\n\n    final IndexReader reader = DirectoryReader.open(w.w.getDirectory());\n    final LeafReader leafReader = SlowCompositeReaderWrapper.wrap(reader);\n    \n    final int numListeners = TestUtil.nextInt(random(), 1, 10);\n    final List<LeafReader.CoreClosedListener> listeners = new ArrayList<>();\n    AtomicInteger counter = new AtomicInteger(numListeners);\n    \n    for (int i = 0; i < numListeners; ++i) {\n      CountCoreListener listener = new CountCoreListener(counter);\n      listeners.add(listener);\n      leafReader.addCoreClosedListener(listener);\n    }\n    for (int i = 0; i < 100; ++i) {\n      leafReader.addCoreClosedListener(listeners.get(random().nextInt(listeners.size())));\n    }\n    final int removed = random().nextInt(numListeners);\n    Collections.shuffle(listeners, random());\n    for (int i = 0; i < removed; ++i) {\n      leafReader.removeCoreClosedListener(listeners.get(i));\n    }\n    assertEquals(numListeners, counter.get());\n    // make sure listeners are registered on the wrapped reader and that closing any of them has the same effect\n    if (random().nextBoolean()) {\n      reader.close();\n    } else {\n      leafReader.close();\n    }\n    assertEquals(removed, counter.get());\n    w.w.getDirectory().close();\n  }\n\n","sourceOld":"  public void testCoreListenerOnWrapper() throws IOException {\n    RandomIndexWriter w = new RandomIndexWriter(random(), newDirectory());\n    final int numDocs = TestUtil.nextInt(random(), 1, 5);\n    for (int i = 0; i < numDocs; ++i) {\n      w.addDocument(new Document());\n      if (random().nextBoolean()) {\n        w.commit();\n      }\n    }\n    w.commit();\n    w.close();\n\n    final IndexReader reader = DirectoryReader.open(w.w.getDirectory());\n    final LeafReader leafReader = SlowCompositeReaderWrapper.wrap(reader);\n    \n    final int numListeners = TestUtil.nextInt(random(), 1, 10);\n    final List<LeafReader.CoreClosedListener> listeners = new ArrayList<>();\n    AtomicInteger counter = new AtomicInteger(numListeners);\n    \n    for (int i = 0; i < numListeners; ++i) {\n      CountCoreListener listener = new CountCoreListener(counter);\n      listeners.add(listener);\n      leafReader.addCoreClosedListener(listener);\n    }\n    for (int i = 0; i < 100; ++i) {\n      leafReader.addCoreClosedListener(listeners.get(random().nextInt(listeners.size())));\n    }\n    final int removed = random().nextInt(numListeners);\n    Collections.shuffle(listeners);\n    for (int i = 0; i < removed; ++i) {\n      leafReader.removeCoreClosedListener(listeners.get(i));\n    }\n    assertEquals(numListeners, counter.get());\n    // make sure listeners are registered on the wrapped reader and that closing any of them has the same effect\n    if (random().nextBoolean()) {\n      reader.close();\n    } else {\n      leafReader.close();\n    }\n    assertEquals(removed, counter.get());\n    w.w.getDirectory().close();\n  }\n\n","bugFix":["7704e64a78bc9f245268f5c002d1e66b6c9f309f"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55980207f1977bd1463465de1659b821347e2fa8","date":1413336386,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexReaderClose#testCoreListenerOnWrapper().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexReaderClose#testCoreListenerOnWrapper().mjava","sourceNew":"  public void testCoreListenerOnWrapper() throws IOException {\n    RandomIndexWriter w = new RandomIndexWriter(random(), newDirectory());\n    final int numDocs = TestUtil.nextInt(random(), 1, 5);\n    for (int i = 0; i < numDocs; ++i) {\n      w.addDocument(new Document());\n      if (random().nextBoolean()) {\n        w.commit();\n      }\n    }\n    w.commit();\n    w.close();\n\n    final IndexReader reader = DirectoryReader.open(w.w.getDirectory());\n    final LeafReader leafReader = SlowCompositeReaderWrapper.wrap(reader);\n    \n    final int numListeners = TestUtil.nextInt(random(), 1, 10);\n    final List<LeafReader.CoreClosedListener> listeners = new ArrayList<>();\n    AtomicInteger counter = new AtomicInteger(numListeners);\n    \n    for (int i = 0; i < numListeners; ++i) {\n      CountCoreListener listener = new CountCoreListener(counter);\n      listeners.add(listener);\n      leafReader.addCoreClosedListener(listener);\n    }\n    for (int i = 0; i < 100; ++i) {\n      leafReader.addCoreClosedListener(listeners.get(random().nextInt(listeners.size())));\n    }\n    final int removed = random().nextInt(numListeners);\n    Collections.shuffle(listeners, random());\n    for (int i = 0; i < removed; ++i) {\n      leafReader.removeCoreClosedListener(listeners.get(i));\n    }\n    assertEquals(numListeners, counter.get());\n    // make sure listeners are registered on the wrapped reader and that closing any of them has the same effect\n    if (random().nextBoolean()) {\n      reader.close();\n    } else {\n      leafReader.close();\n    }\n    assertEquals(removed, counter.get());\n    w.w.getDirectory().close();\n  }\n\n","sourceOld":"  public void testCoreListenerOnWrapper() throws IOException {\n    RandomIndexWriter w = new RandomIndexWriter(random(), newDirectory());\n    final int numDocs = TestUtil.nextInt(random(), 1, 5);\n    for (int i = 0; i < numDocs; ++i) {\n      w.addDocument(new Document());\n      if (random().nextBoolean()) {\n        w.commit();\n      }\n    }\n    w.commit();\n    w.close();\n\n    final IndexReader reader = DirectoryReader.open(w.w.getDirectory());\n    final LeafReader leafReader = SlowCompositeReaderWrapper.wrap(reader);\n    \n    final int numListeners = TestUtil.nextInt(random(), 1, 10);\n    final List<LeafReader.CoreClosedListener> listeners = new ArrayList<>();\n    AtomicInteger counter = new AtomicInteger(numListeners);\n    \n    for (int i = 0; i < numListeners; ++i) {\n      CountCoreListener listener = new CountCoreListener(counter);\n      listeners.add(listener);\n      leafReader.addCoreClosedListener(listener);\n    }\n    for (int i = 0; i < 100; ++i) {\n      leafReader.addCoreClosedListener(listeners.get(random().nextInt(listeners.size())));\n    }\n    final int removed = random().nextInt(numListeners);\n    Collections.shuffle(listeners);\n    for (int i = 0; i < removed; ++i) {\n      leafReader.removeCoreClosedListener(listeners.get(i));\n    }\n    assertEquals(numListeners, counter.get());\n    // make sure listeners are registered on the wrapped reader and that closing any of them has the same effect\n    if (random().nextBoolean()) {\n      reader.close();\n    } else {\n      leafReader.close();\n    }\n    assertEquals(removed, counter.get());\n    w.w.getDirectory().close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c1e9b5fc0abfd22167fc144d6a55b290bdc331dc","date":1431966006,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexReaderClose#testCoreListenerOnSlowCompositeReaderWrapper().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexReaderClose#testCoreListenerOnWrapper().mjava","sourceNew":"  public void testCoreListenerOnSlowCompositeReaderWrapper() throws IOException {\n    RandomIndexWriter w = new RandomIndexWriter(random(), newDirectory());\n    final int numDocs = TestUtil.nextInt(random(), 1, 5);\n    for (int i = 0; i < numDocs; ++i) {\n      w.addDocument(new Document());\n      if (random().nextBoolean()) {\n        w.commit();\n      }\n    }\n    w.commit();\n    w.close();\n\n    final IndexReader reader = DirectoryReader.open(w.w.getDirectory());\n    final LeafReader leafReader = SlowCompositeReaderWrapper.wrap(reader);\n    \n    final int numListeners = TestUtil.nextInt(random(), 1, 10);\n    final List<LeafReader.CoreClosedListener> listeners = new ArrayList<>();\n    AtomicInteger counter = new AtomicInteger(numListeners);\n    \n    for (int i = 0; i < numListeners; ++i) {\n      CountCoreListener listener = new CountCoreListener(counter, leafReader.getCoreCacheKey());\n      listeners.add(listener);\n      leafReader.addCoreClosedListener(listener);\n    }\n    for (int i = 0; i < 100; ++i) {\n      leafReader.addCoreClosedListener(listeners.get(random().nextInt(listeners.size())));\n    }\n    final int removed = random().nextInt(numListeners);\n    Collections.shuffle(listeners, random());\n    for (int i = 0; i < removed; ++i) {\n      leafReader.removeCoreClosedListener(listeners.get(i));\n    }\n    assertEquals(numListeners, counter.get());\n    // make sure listeners are registered on the wrapped reader and that closing any of them has the same effect\n    if (random().nextBoolean()) {\n      reader.close();\n    } else {\n      leafReader.close();\n    }\n    assertEquals(removed, counter.get());\n    w.w.getDirectory().close();\n  }\n\n","sourceOld":"  public void testCoreListenerOnWrapper() throws IOException {\n    RandomIndexWriter w = new RandomIndexWriter(random(), newDirectory());\n    final int numDocs = TestUtil.nextInt(random(), 1, 5);\n    for (int i = 0; i < numDocs; ++i) {\n      w.addDocument(new Document());\n      if (random().nextBoolean()) {\n        w.commit();\n      }\n    }\n    w.commit();\n    w.close();\n\n    final IndexReader reader = DirectoryReader.open(w.w.getDirectory());\n    final LeafReader leafReader = SlowCompositeReaderWrapper.wrap(reader);\n    \n    final int numListeners = TestUtil.nextInt(random(), 1, 10);\n    final List<LeafReader.CoreClosedListener> listeners = new ArrayList<>();\n    AtomicInteger counter = new AtomicInteger(numListeners);\n    \n    for (int i = 0; i < numListeners; ++i) {\n      CountCoreListener listener = new CountCoreListener(counter);\n      listeners.add(listener);\n      leafReader.addCoreClosedListener(listener);\n    }\n    for (int i = 0; i < 100; ++i) {\n      leafReader.addCoreClosedListener(listeners.get(random().nextInt(listeners.size())));\n    }\n    final int removed = random().nextInt(numListeners);\n    Collections.shuffle(listeners, random());\n    for (int i = 0; i < removed; ++i) {\n      leafReader.removeCoreClosedListener(listeners.get(i));\n    }\n    assertEquals(numListeners, counter.get());\n    // make sure listeners are registered on the wrapped reader and that closing any of them has the same effect\n    if (random().nextBoolean()) {\n      reader.close();\n    } else {\n      leafReader.close();\n    }\n    assertEquals(removed, counter.get());\n    w.w.getDirectory().close();\n  }\n\n","bugFix":null,"bugIntro":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c1e9b5fc0abfd22167fc144d6a55b290bdc331dc","date":1431966006,"type":6,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexReaderClose#testCoreListenerOnWrapperWithDifferentCacheKey().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexReaderClose#testCoreListenerOnWrapper().mjava","sourceNew":"  public void testCoreListenerOnWrapperWithDifferentCacheKey() throws IOException {\n    RandomIndexWriter w = new RandomIndexWriter(random(), newDirectory());\n    final int numDocs = TestUtil.nextInt(random(), 1, 5);\n    for (int i = 0; i < numDocs; ++i) {\n      w.addDocument(new Document());\n      if (random().nextBoolean()) {\n        w.commit();\n      }\n    }\n    w.commit();\n    w.close();\n\n    final IndexReader reader = DirectoryReader.open(w.w.getDirectory());\n    // We explicitly define a different cache key\n    final Object coreCacheKey = new Object();\n    final LeafReader leafReader = new FilterLeafReader(SlowCompositeReaderWrapper.wrap(reader)) {\n      @Override\n      public Object getCoreCacheKey() {\n        return coreCacheKey;\n      }\n    };\n\n    final int numListeners = TestUtil.nextInt(random(), 1, 10);\n    final List<LeafReader.CoreClosedListener> listeners = new ArrayList<>();\n    AtomicInteger counter = new AtomicInteger(numListeners);\n    \n    for (int i = 0; i < numListeners; ++i) {\n      CountCoreListener listener = new CountCoreListener(counter, coreCacheKey);\n      listeners.add(listener);\n      leafReader.addCoreClosedListener(listener);\n    }\n    for (int i = 0; i < 100; ++i) {\n      leafReader.addCoreClosedListener(listeners.get(random().nextInt(listeners.size())));\n    }\n    final int removed = random().nextInt(numListeners);\n    Collections.shuffle(listeners, random());\n    for (int i = 0; i < removed; ++i) {\n      leafReader.removeCoreClosedListener(listeners.get(i));\n    }\n    assertEquals(numListeners, counter.get());\n    // make sure listeners are registered on the wrapped reader and that closing any of them has the same effect\n    if (random().nextBoolean()) {\n      reader.close();\n    } else {\n      leafReader.close();\n    }\n    assertEquals(removed, counter.get());\n    w.w.getDirectory().close();\n  }\n\n","sourceOld":"  public void testCoreListenerOnWrapper() throws IOException {\n    RandomIndexWriter w = new RandomIndexWriter(random(), newDirectory());\n    final int numDocs = TestUtil.nextInt(random(), 1, 5);\n    for (int i = 0; i < numDocs; ++i) {\n      w.addDocument(new Document());\n      if (random().nextBoolean()) {\n        w.commit();\n      }\n    }\n    w.commit();\n    w.close();\n\n    final IndexReader reader = DirectoryReader.open(w.w.getDirectory());\n    final LeafReader leafReader = SlowCompositeReaderWrapper.wrap(reader);\n    \n    final int numListeners = TestUtil.nextInt(random(), 1, 10);\n    final List<LeafReader.CoreClosedListener> listeners = new ArrayList<>();\n    AtomicInteger counter = new AtomicInteger(numListeners);\n    \n    for (int i = 0; i < numListeners; ++i) {\n      CountCoreListener listener = new CountCoreListener(counter);\n      listeners.add(listener);\n      leafReader.addCoreClosedListener(listener);\n    }\n    for (int i = 0; i < 100; ++i) {\n      leafReader.addCoreClosedListener(listeners.get(random().nextInt(listeners.size())));\n    }\n    final int removed = random().nextInt(numListeners);\n    Collections.shuffle(listeners, random());\n    for (int i = 0; i < removed; ++i) {\n      leafReader.removeCoreClosedListener(listeners.get(i));\n    }\n    assertEquals(numListeners, counter.get());\n    // make sure listeners are registered on the wrapped reader and that closing any of them has the same effect\n    if (random().nextBoolean()) {\n      reader.close();\n    } else {\n      leafReader.close();\n    }\n    assertEquals(removed, counter.get());\n    w.w.getDirectory().close();\n  }\n\n","bugFix":null,"bugIntro":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"55980207f1977bd1463465de1659b821347e2fa8":["c9fb5f46e264daf5ba3860defe623a89d202dd87","103857ec20f79f31c7a00310a91ed001b9a6ef17"],"7704e64a78bc9f245268f5c002d1e66b6c9f309f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c1e9b5fc0abfd22167fc144d6a55b290bdc331dc":["103857ec20f79f31c7a00310a91ed001b9a6ef17"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"103857ec20f79f31c7a00310a91ed001b9a6ef17":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["7704e64a78bc9f245268f5c002d1e66b6c9f309f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c1e9b5fc0abfd22167fc144d6a55b290bdc331dc"]},"commit2Childs":{"55980207f1977bd1463465de1659b821347e2fa8":[],"7704e64a78bc9f245268f5c002d1e66b6c9f309f":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"c1e9b5fc0abfd22167fc144d6a55b290bdc331dc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7704e64a78bc9f245268f5c002d1e66b6c9f309f"],"103857ec20f79f31c7a00310a91ed001b9a6ef17":["55980207f1977bd1463465de1659b821347e2fa8","c1e9b5fc0abfd22167fc144d6a55b290bdc331dc"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["55980207f1977bd1463465de1659b821347e2fa8","103857ec20f79f31c7a00310a91ed001b9a6ef17"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["55980207f1977bd1463465de1659b821347e2fa8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}