{"path":"lucene/src/java/org/apache/lucene/index/StoredFieldsWriterPerThread#addField(Fieldable,FieldInfo).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/StoredFieldsWriterPerThread#addField(Fieldable,FieldInfo).mjava","pathOld":"src/java/org/apache/lucene/index/StoredFieldsWriterPerThread#addField(Fieldable,FieldInfo).mjava","sourceNew":"  public void addField(Fieldable field, FieldInfo fieldInfo) throws IOException {\n    if (doc == null) {\n      doc = storedFieldsWriter.getPerDoc();\n      doc.docID = docState.docID;\n      localFieldsWriter.setFieldsStream(doc.fdt);\n      assert doc.numStoredFields == 0: \"doc.numStoredFields=\" + doc.numStoredFields;\n      assert 0 == doc.fdt.length();\n      assert 0 == doc.fdt.getFilePointer();\n    }\n\n    localFieldsWriter.writeField(fieldInfo, field);\n    assert docState.testPoint(\"StoredFieldsWriterPerThread.processFields.writeField\");\n    doc.numStoredFields++;\n  }\n\n","sourceOld":"  public void addField(Fieldable field, FieldInfo fieldInfo) throws IOException {\n    if (doc == null) {\n      doc = storedFieldsWriter.getPerDoc();\n      doc.docID = docState.docID;\n      localFieldsWriter.setFieldsStream(doc.fdt);\n      assert doc.numStoredFields == 0: \"doc.numStoredFields=\" + doc.numStoredFields;\n      assert 0 == doc.fdt.length();\n      assert 0 == doc.fdt.getFilePointer();\n    }\n\n    localFieldsWriter.writeField(fieldInfo, field);\n    assert docState.testPoint(\"StoredFieldsWriterPerThread.processFields.writeField\");\n    doc.numStoredFields++;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6c18273ea5b3974d2f30117f46f1ae416c28f727","date":1279708040,"type":5,"author":"Michael Busch","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/StoredFieldsWriter#addField(Fieldable,FieldInfo).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/StoredFieldsWriterPerThread#addField(Fieldable,FieldInfo).mjava","sourceNew":"  public void addField(Fieldable field, FieldInfo fieldInfo) throws IOException {\n    if (doc == null) {\n      doc = getPerDoc();\n      doc.docID = docState.docID;\n      localFieldsWriter.setFieldsStream(doc.fdt);\n      assert doc.numStoredFields == 0: \"doc.numStoredFields=\" + doc.numStoredFields;\n      assert 0 == doc.fdt.length();\n      assert 0 == doc.fdt.getFilePointer();\n    }\n\n    localFieldsWriter.writeField(fieldInfo, field);\n    assert docState.testPoint(\"StoredFieldsWriterPerThread.processFields.writeField\");\n    doc.numStoredFields++;\n  }\n\n","sourceOld":"  public void addField(Fieldable field, FieldInfo fieldInfo) throws IOException {\n    if (doc == null) {\n      doc = storedFieldsWriter.getPerDoc();\n      doc.docID = docState.docID;\n      localFieldsWriter.setFieldsStream(doc.fdt);\n      assert doc.numStoredFields == 0: \"doc.numStoredFields=\" + doc.numStoredFields;\n      assert 0 == doc.fdt.length();\n      assert 0 == doc.fdt.getFilePointer();\n    }\n\n    localFieldsWriter.writeField(fieldInfo, field);\n    assert docState.testPoint(\"StoredFieldsWriterPerThread.processFields.writeField\");\n    doc.numStoredFields++;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b3e06be49006ecac364d39d12b9c9f74882f9b9f","date":1304289513,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/StoredFieldsWriterPerThread#addField(Fieldable,FieldInfo).mjava","sourceNew":null,"sourceOld":"  public void addField(Fieldable field, FieldInfo fieldInfo) throws IOException {\n    if (doc == null) {\n      doc = storedFieldsWriter.getPerDoc();\n      doc.docID = docState.docID;\n      localFieldsWriter.setFieldsStream(doc.fdt);\n      assert doc.numStoredFields == 0: \"doc.numStoredFields=\" + doc.numStoredFields;\n      assert 0 == doc.fdt.length();\n      assert 0 == doc.fdt.getFilePointer();\n    }\n\n    localFieldsWriter.writeField(fieldInfo, field);\n    assert docState.testPoint(\"StoredFieldsWriterPerThread.processFields.writeField\");\n    doc.numStoredFields++;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/StoredFieldsWriterPerThread#addField(Fieldable,FieldInfo).mjava","sourceNew":null,"sourceOld":"  public void addField(Fieldable field, FieldInfo fieldInfo) throws IOException {\n    if (doc == null) {\n      doc = storedFieldsWriter.getPerDoc();\n      doc.docID = docState.docID;\n      localFieldsWriter.setFieldsStream(doc.fdt);\n      assert doc.numStoredFields == 0: \"doc.numStoredFields=\" + doc.numStoredFields;\n      assert 0 == doc.fdt.length();\n      assert 0 == doc.fdt.getFilePointer();\n    }\n\n    localFieldsWriter.writeField(fieldInfo, field);\n    assert docState.testPoint(\"StoredFieldsWriterPerThread.processFields.writeField\");\n    doc.numStoredFields++;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":4,"author":"Steven Rowe","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/StoredFieldsWriterPerThread#addField(Fieldable,FieldInfo).mjava","sourceNew":null,"sourceOld":"  public void addField(Fieldable field, FieldInfo fieldInfo) throws IOException {\n    if (doc == null) {\n      doc = storedFieldsWriter.getPerDoc();\n      doc.docID = docState.docID;\n      localFieldsWriter.setFieldsStream(doc.fdt);\n      assert doc.numStoredFields == 0: \"doc.numStoredFields=\" + doc.numStoredFields;\n      assert 0 == doc.fdt.length();\n      assert 0 == doc.fdt.getFilePointer();\n    }\n\n    localFieldsWriter.writeField(fieldInfo, field);\n    assert docState.testPoint(\"StoredFieldsWriterPerThread.processFields.writeField\");\n    doc.numStoredFields++;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6c18273ea5b3974d2f30117f46f1ae416c28f727":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a3776dccca01c11e7046323cfad46a3b4a471233":["9454a6510e2db155fb01faa5c049b06ece95fab9","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["9454a6510e2db155fb01faa5c049b06ece95fab9","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["9454a6510e2db155fb01faa5c049b06ece95fab9","6c18273ea5b3974d2f30117f46f1ae416c28f727"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"6c18273ea5b3974d2f30117f46f1ae416c28f727":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["6c18273ea5b3974d2f30117f46f1ae416c28f727","a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}