{"path":"src/java/org/apache/lucene/index/TermVectorsReader#get(int,String).mjava","commits":[{"id":"770281b8a8459cafcdd2354b6a06078fea2d83c9","date":1077308096,"type":0,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/TermVectorsReader#get(int,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Retrieve the term vector for the given document and field\n   * @param docNum The document number to retrieve the vector for\n   * @param field The field within the document to retrieve\n   * @return The TermFreqVector for the document and field or null\n   */ \n  synchronized TermFreqVector get(int docNum, String field) {\n    // Check if no term vectors are available for this segment at all\n    int fieldNumber = fieldInfos.fieldNumber(field);\n    TermFreqVector result = null;\n    if (tvx != null) {\n      try {\n        //We need to account for the FORMAT_SIZE at when seeking in the tvx\n        //We don't need to do this in other seeks because we already have the file pointer\n        //that was written in another file\n        tvx.seek((docNum * 8L) + TermVectorsWriter.FORMAT_SIZE);\n        //System.out.println(\"TVX Pointer: \" + tvx.getFilePointer());\n        long position = tvx.readLong();\n\n        tvd.seek(position);\n        int fieldCount = tvd.readVInt();\n        //System.out.println(\"Num Fields: \" + fieldCount);\n        // There are only a few fields per document. We opt for a full scan\n        // rather then requiring that they be ordered. We need to read through\n        // all of the fields anyway to get to the tvf pointers.\n        int number = 0;\n        int found = -1;\n        for (int i = 0; i < fieldCount; i++) {\n          number += tvd.readVInt();\n          if (number == fieldNumber) found = i;\n        }\n  \n        // This field, although valid in the segment, was not found in this document\n        if (found != -1) {\n          // Compute position in the tvf file\n          position = 0;\n          for (int i = 0; i <= found; i++)\n          {\n            position += tvd.readVLong();\n          }\n          result = readTermVector(field, position);\n        }\n        else {\n          //System.out.println(\"Field not found\");\n        }\n          \n      } catch (Exception e) {\n        //e.printStackTrace();\n      }\n    }\n    else\n    {\n      System.out.println(\"No tvx file\");\n    }\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6177f0f28ace66d1538b1e6ac5f1773e5449a0b0","date":1096997448,"type":3,"author":"Christoph Goller","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/TermVectorsReader#get(int,String).mjava","pathOld":"src/java/org/apache/lucene/index/TermVectorsReader#get(int,String).mjava","sourceNew":"  /**\n   * Retrieve the term vector for the given document and field\n   * @param docNum The document number to retrieve the vector for\n   * @param field The field within the document to retrieve\n   * @return The TermFreqVector for the document and field or null if there is no termVector for this field.\n   * @throws IOException\n   */ \n  synchronized TermFreqVector get(int docNum, String field) throws IOException {\n    // Check if no term vectors are available for this segment at all\n    int fieldNumber = fieldInfos.fieldNumber(field);\n    TermFreqVector result = null;\n    if (tvx != null) {\n      //We need to account for the FORMAT_SIZE at when seeking in the tvx\n      //We don't need to do this in other seeks because we already have the\n      // file pointer\n      //that was written in another file\n      tvx.seek((docNum * 8L) + TermVectorsWriter.FORMAT_SIZE);\n      //System.out.println(\"TVX Pointer: \" + tvx.getFilePointer());\n      long position = tvx.readLong();\n\n      tvd.seek(position);\n      int fieldCount = tvd.readVInt();\n      //System.out.println(\"Num Fields: \" + fieldCount);\n      // There are only a few fields per document. We opt for a full scan\n      // rather then requiring that they be ordered. We need to read through\n      // all of the fields anyway to get to the tvf pointers.\n      int number = 0;\n      int found = -1;\n      for (int i = 0; i < fieldCount; i++) {\n        if(tvdFormat == TermVectorsWriter.FORMAT_VERSION)\n          number = tvd.readVInt();\n        else\n          number += tvd.readVInt();\n        \n        if (number == fieldNumber)\n          found = i;\n      }\n\n      // This field, although valid in the segment, was not found in this\n      // document\n      if (found != -1) {\n        // Compute position in the tvf file\n        position = 0;\n        for (int i = 0; i <= found; i++)\n          position += tvd.readVLong();\n\n        result = readTermVector(field, position);\n      } else {\n        //System.out.println(\"Field not found\");\n      }\n    } else {\n      //System.out.println(\"No tvx file\");\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Retrieve the term vector for the given document and field\n   * @param docNum The document number to retrieve the vector for\n   * @param field The field within the document to retrieve\n   * @return The TermFreqVector for the document and field or null\n   */ \n  synchronized TermFreqVector get(int docNum, String field) {\n    // Check if no term vectors are available for this segment at all\n    int fieldNumber = fieldInfos.fieldNumber(field);\n    TermFreqVector result = null;\n    if (tvx != null) {\n      try {\n        //We need to account for the FORMAT_SIZE at when seeking in the tvx\n        //We don't need to do this in other seeks because we already have the file pointer\n        //that was written in another file\n        tvx.seek((docNum * 8L) + TermVectorsWriter.FORMAT_SIZE);\n        //System.out.println(\"TVX Pointer: \" + tvx.getFilePointer());\n        long position = tvx.readLong();\n\n        tvd.seek(position);\n        int fieldCount = tvd.readVInt();\n        //System.out.println(\"Num Fields: \" + fieldCount);\n        // There are only a few fields per document. We opt for a full scan\n        // rather then requiring that they be ordered. We need to read through\n        // all of the fields anyway to get to the tvf pointers.\n        int number = 0;\n        int found = -1;\n        for (int i = 0; i < fieldCount; i++) {\n          number += tvd.readVInt();\n          if (number == fieldNumber) found = i;\n        }\n  \n        // This field, although valid in the segment, was not found in this document\n        if (found != -1) {\n          // Compute position in the tvf file\n          position = 0;\n          for (int i = 0; i <= found; i++)\n          {\n            position += tvd.readVLong();\n          }\n          result = readTermVector(field, position);\n        }\n        else {\n          //System.out.println(\"Field not found\");\n        }\n          \n      } catch (Exception e) {\n        //e.printStackTrace();\n      }\n    }\n    else\n    {\n      System.out.println(\"No tvx file\");\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9e98927024757b7944e3ab5bf88134d5f7f30600","date":1097059223,"type":3,"author":"Christoph Goller","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/TermVectorsReader#get(int,String).mjava","pathOld":"src/java/org/apache/lucene/index/TermVectorsReader#get(int,String).mjava","sourceNew":"  /**\n   * Retrieve the term vector for the given document and field\n   * @param docNum The document number to retrieve the vector for\n   * @param field The field within the document to retrieve\n   * @return The TermFreqVector for the document and field or null if there is no termVector for this field.\n   * @throws IOException if there is an error reading the term vector files\n   */ \n  TermFreqVector get(int docNum, String field) throws IOException {\n    // Check if no term vectors are available for this segment at all\n    int fieldNumber = fieldInfos.fieldNumber(field);\n    TermFreqVector result = null;\n    if (tvx != null) {\n      //We need to account for the FORMAT_SIZE at when seeking in the tvx\n      //We don't need to do this in other seeks because we already have the\n      // file pointer\n      //that was written in another file\n      tvx.seek((docNum * 8L) + TermVectorsWriter.FORMAT_SIZE);\n      //System.out.println(\"TVX Pointer: \" + tvx.getFilePointer());\n      long position = tvx.readLong();\n\n      tvd.seek(position);\n      int fieldCount = tvd.readVInt();\n      //System.out.println(\"Num Fields: \" + fieldCount);\n      // There are only a few fields per document. We opt for a full scan\n      // rather then requiring that they be ordered. We need to read through\n      // all of the fields anyway to get to the tvf pointers.\n      int number = 0;\n      int found = -1;\n      for (int i = 0; i < fieldCount; i++) {\n        if(tvdFormat == TermVectorsWriter.FORMAT_VERSION)\n          number = tvd.readVInt();\n        else\n          number += tvd.readVInt();\n        \n        if (number == fieldNumber)\n          found = i;\n      }\n\n      // This field, although valid in the segment, was not found in this\n      // document\n      if (found != -1) {\n        // Compute position in the tvf file\n        position = 0;\n        for (int i = 0; i <= found; i++)\n          position += tvd.readVLong();\n\n        result = readTermVector(field, position);\n      } else {\n        //System.out.println(\"Field not found\");\n      }\n    } else {\n      //System.out.println(\"No tvx file\");\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Retrieve the term vector for the given document and field\n   * @param docNum The document number to retrieve the vector for\n   * @param field The field within the document to retrieve\n   * @return The TermFreqVector for the document and field or null if there is no termVector for this field.\n   * @throws IOException\n   */ \n  synchronized TermFreqVector get(int docNum, String field) throws IOException {\n    // Check if no term vectors are available for this segment at all\n    int fieldNumber = fieldInfos.fieldNumber(field);\n    TermFreqVector result = null;\n    if (tvx != null) {\n      //We need to account for the FORMAT_SIZE at when seeking in the tvx\n      //We don't need to do this in other seeks because we already have the\n      // file pointer\n      //that was written in another file\n      tvx.seek((docNum * 8L) + TermVectorsWriter.FORMAT_SIZE);\n      //System.out.println(\"TVX Pointer: \" + tvx.getFilePointer());\n      long position = tvx.readLong();\n\n      tvd.seek(position);\n      int fieldCount = tvd.readVInt();\n      //System.out.println(\"Num Fields: \" + fieldCount);\n      // There are only a few fields per document. We opt for a full scan\n      // rather then requiring that they be ordered. We need to read through\n      // all of the fields anyway to get to the tvf pointers.\n      int number = 0;\n      int found = -1;\n      for (int i = 0; i < fieldCount; i++) {\n        if(tvdFormat == TermVectorsWriter.FORMAT_VERSION)\n          number = tvd.readVInt();\n        else\n          number += tvd.readVInt();\n        \n        if (number == fieldNumber)\n          found = i;\n      }\n\n      // This field, although valid in the segment, was not found in this\n      // document\n      if (found != -1) {\n        // Compute position in the tvf file\n        position = 0;\n        for (int i = 0; i <= found; i++)\n          position += tvd.readVLong();\n\n        result = readTermVector(field, position);\n      } else {\n        //System.out.println(\"Field not found\");\n      }\n    } else {\n      //System.out.println(\"No tvx file\");\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"12d40284fd9481f79444bc63bc5d13847caddd3d","date":1149902602,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/TermVectorsReader#get(int,String).mjava","pathOld":"src/java/org/apache/lucene/index/TermVectorsReader#get(int,String).mjava","sourceNew":"  /**\n   * Retrieve the term vector for the given document and field\n   * @param docNum The document number to retrieve the vector for\n   * @param field The field within the document to retrieve\n   * @return The TermFreqVector for the document and field or null if there is no termVector for this field.\n   * @throws IOException if there is an error reading the term vector files\n   */ \n  TermFreqVector get(int docNum, String field) throws IOException {\n    // Check if no term vectors are available for this segment at all\n    int fieldNumber = fieldInfos.fieldNumber(field);\n    TermFreqVector result = null;\n    if (tvx != null) {\n      //We need to account for the FORMAT_SIZE at when seeking in the tvx\n      //We don't need to do this in other seeks because we already have the\n      // file pointer\n      //that was written in another file\n      tvx.seek((docNum * 8L) + TermVectorsWriter.FORMAT_SIZE);\n      //System.out.println(\"TVX Pointer: \" + tvx.getFilePointer());\n      long position = tvx.readLong();\n\n      tvd.seek(position);\n      int fieldCount = tvd.readVInt();\n      //System.out.println(\"Num Fields: \" + fieldCount);\n      // There are only a few fields per document. We opt for a full scan\n      // rather then requiring that they be ordered. We need to read through\n      // all of the fields anyway to get to the tvf pointers.\n      int number = 0;\n      int found = -1;\n      for (int i = 0; i < fieldCount; i++) {\n        if(tvdFormat == TermVectorsWriter.FORMAT_VERSION)\n          number = tvd.readVInt();\n        else\n          number += tvd.readVInt();\n        \n        if (number == fieldNumber)\n          found = i;\n      }\n\n      // This field, although valid in the segment, was not found in this\n      // document\n      if (found != -1) {\n        // Compute position in the tvf file\n        position = 0;\n        for (int i = 0; i <= found; i++)\n          position += tvd.readVLong();\n\n        result = readTermVector(field, position);\n      } else {\n        //System.out.println(\"Fieldable not found\");\n      }\n    } else {\n      //System.out.println(\"No tvx file\");\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Retrieve the term vector for the given document and field\n   * @param docNum The document number to retrieve the vector for\n   * @param field The field within the document to retrieve\n   * @return The TermFreqVector for the document and field or null if there is no termVector for this field.\n   * @throws IOException if there is an error reading the term vector files\n   */ \n  TermFreqVector get(int docNum, String field) throws IOException {\n    // Check if no term vectors are available for this segment at all\n    int fieldNumber = fieldInfos.fieldNumber(field);\n    TermFreqVector result = null;\n    if (tvx != null) {\n      //We need to account for the FORMAT_SIZE at when seeking in the tvx\n      //We don't need to do this in other seeks because we already have the\n      // file pointer\n      //that was written in another file\n      tvx.seek((docNum * 8L) + TermVectorsWriter.FORMAT_SIZE);\n      //System.out.println(\"TVX Pointer: \" + tvx.getFilePointer());\n      long position = tvx.readLong();\n\n      tvd.seek(position);\n      int fieldCount = tvd.readVInt();\n      //System.out.println(\"Num Fields: \" + fieldCount);\n      // There are only a few fields per document. We opt for a full scan\n      // rather then requiring that they be ordered. We need to read through\n      // all of the fields anyway to get to the tvf pointers.\n      int number = 0;\n      int found = -1;\n      for (int i = 0; i < fieldCount; i++) {\n        if(tvdFormat == TermVectorsWriter.FORMAT_VERSION)\n          number = tvd.readVInt();\n        else\n          number += tvd.readVInt();\n        \n        if (number == fieldNumber)\n          found = i;\n      }\n\n      // This field, although valid in the segment, was not found in this\n      // document\n      if (found != -1) {\n        // Compute position in the tvf file\n        position = 0;\n        for (int i = 0; i <= found; i++)\n          position += tvd.readVLong();\n\n        result = readTermVector(field, position);\n      } else {\n        //System.out.println(\"Field not found\");\n      }\n    } else {\n      //System.out.println(\"No tvx file\");\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4350b17bd363cd13a95171b8df1ca62ea4c3e71c","date":1183562198,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/TermVectorsReader#get(int,String).mjava","pathOld":"src/java/org/apache/lucene/index/TermVectorsReader#get(int,String).mjava","sourceNew":"  /**\n   * Retrieve the term vector for the given document and field\n   * @param docNum The document number to retrieve the vector for\n   * @param field The field within the document to retrieve\n   * @return The TermFreqVector for the document and field or null if there is no termVector for this field.\n   * @throws IOException if there is an error reading the term vector files\n   */ \n  TermFreqVector get(int docNum, String field) throws IOException {\n    // Check if no term vectors are available for this segment at all\n    int fieldNumber = fieldInfos.fieldNumber(field);\n    TermFreqVector result = null;\n    if (tvx != null) {\n      //We need to account for the FORMAT_SIZE at when seeking in the tvx\n      //We don't need to do this in other seeks because we already have the\n      // file pointer\n      //that was written in another file\n      tvx.seek(((docNum + docStoreOffset) * 8L) + TermVectorsWriter.FORMAT_SIZE);\n      //System.out.println(\"TVX Pointer: \" + tvx.getFilePointer());\n      long position = tvx.readLong();\n\n      tvd.seek(position);\n      int fieldCount = tvd.readVInt();\n      //System.out.println(\"Num Fields: \" + fieldCount);\n      // There are only a few fields per document. We opt for a full scan\n      // rather then requiring that they be ordered. We need to read through\n      // all of the fields anyway to get to the tvf pointers.\n      int number = 0;\n      int found = -1;\n      for (int i = 0; i < fieldCount; i++) {\n        if(tvdFormat == TermVectorsWriter.FORMAT_VERSION)\n          number = tvd.readVInt();\n        else\n          number += tvd.readVInt();\n        \n        if (number == fieldNumber)\n          found = i;\n      }\n\n      // This field, although valid in the segment, was not found in this\n      // document\n      if (found != -1) {\n        // Compute position in the tvf file\n        position = 0;\n        for (int i = 0; i <= found; i++)\n          position += tvd.readVLong();\n\n        result = readTermVector(field, position);\n      } else {\n        //System.out.println(\"Fieldable not found\");\n      }\n    } else {\n      //System.out.println(\"No tvx file\");\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Retrieve the term vector for the given document and field\n   * @param docNum The document number to retrieve the vector for\n   * @param field The field within the document to retrieve\n   * @return The TermFreqVector for the document and field or null if there is no termVector for this field.\n   * @throws IOException if there is an error reading the term vector files\n   */ \n  TermFreqVector get(int docNum, String field) throws IOException {\n    // Check if no term vectors are available for this segment at all\n    int fieldNumber = fieldInfos.fieldNumber(field);\n    TermFreqVector result = null;\n    if (tvx != null) {\n      //We need to account for the FORMAT_SIZE at when seeking in the tvx\n      //We don't need to do this in other seeks because we already have the\n      // file pointer\n      //that was written in another file\n      tvx.seek((docNum * 8L) + TermVectorsWriter.FORMAT_SIZE);\n      //System.out.println(\"TVX Pointer: \" + tvx.getFilePointer());\n      long position = tvx.readLong();\n\n      tvd.seek(position);\n      int fieldCount = tvd.readVInt();\n      //System.out.println(\"Num Fields: \" + fieldCount);\n      // There are only a few fields per document. We opt for a full scan\n      // rather then requiring that they be ordered. We need to read through\n      // all of the fields anyway to get to the tvf pointers.\n      int number = 0;\n      int found = -1;\n      for (int i = 0; i < fieldCount; i++) {\n        if(tvdFormat == TermVectorsWriter.FORMAT_VERSION)\n          number = tvd.readVInt();\n        else\n          number += tvd.readVInt();\n        \n        if (number == fieldNumber)\n          found = i;\n      }\n\n      // This field, although valid in the segment, was not found in this\n      // document\n      if (found != -1) {\n        // Compute position in the tvf file\n        position = 0;\n        for (int i = 0; i <= found; i++)\n          position += tvd.readVLong();\n\n        result = readTermVector(field, position);\n      } else {\n        //System.out.println(\"Fieldable not found\");\n      }\n    } else {\n      //System.out.println(\"No tvx file\");\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"352bfe1fae83b92d1562f01c057bfbe6f5af3ddb","date":1185160645,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/TermVectorsReader#get(int,String).mjava","pathOld":"src/java/org/apache/lucene/index/TermVectorsReader#get(int,String).mjava","sourceNew":"  /**\n   * Retrieve the term vector for the given document and field\n   * @param docNum The document number to retrieve the vector for\n   * @param field The field within the document to retrieve\n   * @return The TermFreqVector for the document and field or null if there is no termVector for this field.\n   * @throws IOException if there is an error reading the term vector files\n   */ \n  TermFreqVector get(int docNum, String field) throws IOException {\n    // Check if no term vectors are available for this segment at all\n    ParallelArrayTermVectorMapper mapper = new ParallelArrayTermVectorMapper();\n    get(docNum, field, mapper);\n\n    return mapper.materializeVector();\n  }\n\n","sourceOld":"  /**\n   * Retrieve the term vector for the given document and field\n   * @param docNum The document number to retrieve the vector for\n   * @param field The field within the document to retrieve\n   * @return The TermFreqVector for the document and field or null if there is no termVector for this field.\n   * @throws IOException if there is an error reading the term vector files\n   */ \n  TermFreqVector get(int docNum, String field) throws IOException {\n    // Check if no term vectors are available for this segment at all\n    int fieldNumber = fieldInfos.fieldNumber(field);\n    TermFreqVector result = null;\n    if (tvx != null) {\n      //We need to account for the FORMAT_SIZE at when seeking in the tvx\n      //We don't need to do this in other seeks because we already have the\n      // file pointer\n      //that was written in another file\n      tvx.seek(((docNum + docStoreOffset) * 8L) + TermVectorsWriter.FORMAT_SIZE);\n      //System.out.println(\"TVX Pointer: \" + tvx.getFilePointer());\n      long position = tvx.readLong();\n\n      tvd.seek(position);\n      int fieldCount = tvd.readVInt();\n      //System.out.println(\"Num Fields: \" + fieldCount);\n      // There are only a few fields per document. We opt for a full scan\n      // rather then requiring that they be ordered. We need to read through\n      // all of the fields anyway to get to the tvf pointers.\n      int number = 0;\n      int found = -1;\n      for (int i = 0; i < fieldCount; i++) {\n        if(tvdFormat == TermVectorsWriter.FORMAT_VERSION)\n          number = tvd.readVInt();\n        else\n          number += tvd.readVInt();\n        \n        if (number == fieldNumber)\n          found = i;\n      }\n\n      // This field, although valid in the segment, was not found in this\n      // document\n      if (found != -1) {\n        // Compute position in the tvf file\n        position = 0;\n        for (int i = 0; i <= found; i++)\n          position += tvd.readVLong();\n\n        result = readTermVector(field, position);\n      } else {\n        //System.out.println(\"Fieldable not found\");\n      }\n    } else {\n      //System.out.println(\"No tvx file\");\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/TermVectorsReader#get(int,String).mjava","pathOld":"src/java/org/apache/lucene/index/TermVectorsReader#get(int,String).mjava","sourceNew":"  /**\n   * Retrieve the term vector for the given document and field\n   * @param docNum The document number to retrieve the vector for\n   * @param field The field within the document to retrieve\n   * @return The TermFreqVector for the document and field or null if there is no termVector for this field.\n   * @throws IOException if there is an error reading the term vector files\n   */ \n  TermFreqVector get(int docNum, String field) throws IOException {\n    // Check if no term vectors are available for this segment at all\n    ParallelArrayTermVectorMapper mapper = new ParallelArrayTermVectorMapper();\n    get(docNum, field, mapper);\n\n    return mapper.materializeVector();\n  }\n\n","sourceOld":"  /**\n   * Retrieve the term vector for the given document and field\n   * @param docNum The document number to retrieve the vector for\n   * @param field The field within the document to retrieve\n   * @return The TermFreqVector for the document and field or null if there is no termVector for this field.\n   * @throws IOException if there is an error reading the term vector files\n   */ \n  TermFreqVector get(int docNum, String field) throws IOException {\n    // Check if no term vectors are available for this segment at all\n    ParallelArrayTermVectorMapper mapper = new ParallelArrayTermVectorMapper();\n    get(docNum, field, mapper);\n\n    return mapper.materializeVector();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"770281b8a8459cafcdd2354b6a06078fea2d83c9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9e98927024757b7944e3ab5bf88134d5f7f30600":["6177f0f28ace66d1538b1e6ac5f1773e5449a0b0"],"352bfe1fae83b92d1562f01c057bfbe6f5af3ddb":["4350b17bd363cd13a95171b8df1ca62ea4c3e71c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6177f0f28ace66d1538b1e6ac5f1773e5449a0b0":["770281b8a8459cafcdd2354b6a06078fea2d83c9"],"12d40284fd9481f79444bc63bc5d13847caddd3d":["9e98927024757b7944e3ab5bf88134d5f7f30600"],"4350b17bd363cd13a95171b8df1ca62ea4c3e71c":["12d40284fd9481f79444bc63bc5d13847caddd3d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["352bfe1fae83b92d1562f01c057bfbe6f5af3ddb"]},"commit2Childs":{"770281b8a8459cafcdd2354b6a06078fea2d83c9":["6177f0f28ace66d1538b1e6ac5f1773e5449a0b0"],"9e98927024757b7944e3ab5bf88134d5f7f30600":["12d40284fd9481f79444bc63bc5d13847caddd3d"],"352bfe1fae83b92d1562f01c057bfbe6f5af3ddb":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["770281b8a8459cafcdd2354b6a06078fea2d83c9"],"6177f0f28ace66d1538b1e6ac5f1773e5449a0b0":["9e98927024757b7944e3ab5bf88134d5f7f30600"],"12d40284fd9481f79444bc63bc5d13847caddd3d":["4350b17bd363cd13a95171b8df1ca62ea4c3e71c"],"4350b17bd363cd13a95171b8df1ca62ea4c3e71c":["352bfe1fae83b92d1562f01c057bfbe6f5af3ddb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}