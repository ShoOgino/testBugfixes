{"path":"lucene/core/src/test/org/apache/lucene/search/TestSubScorerFreqs.CountingCollector#getLeafCollector(AtomicReaderContext).mjava","commits":[{"id":"ae73da626f97850c922c42736f808d0378e165f0","date":1396625460,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSubScorerFreqs.CountingCollector#getLeafCollector(AtomicReaderContext).mjava","pathOld":"/dev/null","sourceNew":"    public LeafCollector getLeafCollector(AtomicReaderContext context)\n        throws IOException {\n      final int docBase = context.docBase;\n      return new FilterLeafCollector(super.getLeafCollector(context)) {\n        \n        @Override\n        public void collect(int doc) throws IOException {\n          final Map<Query, Float> freqs = new HashMap<Query, Float>();\n          for (Map.Entry<Query, Scorer> ent : subScorers.entrySet()) {\n            Scorer value = ent.getValue();\n            int matchId = value.docID();\n            freqs.put(ent.getKey(), matchId == doc ? value.freq() : 0.0f);\n          }\n          docCounts.put(doc + docBase, freqs);\n          super.collect(doc);\n        }\n        \n        @Override\n        public void setScorer(Scorer scorer) throws IOException {\n          super.setScorer(scorer);\n          subScorers.clear();\n          setSubScorers(scorer, \"TOP\");\n        }\n        \n      };\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15e323346eac5e4685c0a9f2df85eb96b4239bbb","date":1396688577,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSubScorerFreqs.CountingCollector#getLeafCollector(AtomicReaderContext).mjava","pathOld":"/dev/null","sourceNew":"    public LeafCollector getLeafCollector(AtomicReaderContext context)\n        throws IOException {\n      final int docBase = context.docBase;\n      return new FilterLeafCollector(super.getLeafCollector(context)) {\n        \n        @Override\n        public void collect(int doc) throws IOException {\n          final Map<Query, Float> freqs = new HashMap<Query, Float>();\n          for (Map.Entry<Query, Scorer> ent : subScorers.entrySet()) {\n            Scorer value = ent.getValue();\n            int matchId = value.docID();\n            freqs.put(ent.getKey(), matchId == doc ? value.freq() : 0.0f);\n          }\n          docCounts.put(doc + docBase, freqs);\n          super.collect(doc);\n        }\n        \n        @Override\n        public void setScorer(Scorer scorer) throws IOException {\n          super.setScorer(scorer);\n          subScorers.clear();\n          setSubScorers(scorer, \"TOP\");\n        }\n        \n      };\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":4,"author":"Ryan Ernst","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSubScorerFreqs.CountingCollector#getLeafCollector(AtomicReaderContext).mjava","sourceNew":null,"sourceOld":"    public LeafCollector getLeafCollector(AtomicReaderContext context)\n        throws IOException {\n      final int docBase = context.docBase;\n      return new FilterLeafCollector(super.getLeafCollector(context)) {\n        \n        @Override\n        public void collect(int doc) throws IOException {\n          final Map<Query, Float> freqs = new HashMap<Query, Float>();\n          for (Map.Entry<Query, Scorer> ent : subScorers.entrySet()) {\n            Scorer value = ent.getValue();\n            int matchId = value.docID();\n            freqs.put(ent.getKey(), matchId == doc ? value.freq() : 0.0f);\n          }\n          docCounts.put(doc + docBase, freqs);\n          super.collect(doc);\n        }\n        \n        @Override\n        public void setScorer(Scorer scorer) throws IOException {\n          super.setScorer(scorer);\n          subScorers.clear();\n          setSubScorers(scorer, \"TOP\");\n        }\n        \n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"15e323346eac5e4685c0a9f2df85eb96b4239bbb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ae73da626f97850c922c42736f808d0378e165f0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ae73da626f97850c922c42736f808d0378e165f0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["ae73da626f97850c922c42736f808d0378e165f0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c9fb5f46e264daf5ba3860defe623a89d202dd87"]},"commit2Childs":{"15e323346eac5e4685c0a9f2df85eb96b4239bbb":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["15e323346eac5e4685c0a9f2df85eb96b4239bbb","ae73da626f97850c922c42736f808d0378e165f0"],"ae73da626f97850c922c42736f808d0378e165f0":["15e323346eac5e4685c0a9f2df85eb96b4239bbb","c9fb5f46e264daf5ba3860defe623a89d202dd87"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["15e323346eac5e4685c0a9f2df85eb96b4239bbb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}