{"path":"lucene/src/java/org/apache/lucene/analysis/ReusableAnalyzerBase.TokenStreamComponents#reset(Reader).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/analysis/ReusableAnalyzerBase.TokenStreamComponents#reset(Reader).mjava","pathOld":"src/java/org/apache/lucene/analysis/ReusableAnalyzerBase.TokenStreamComponents#reset(Reader).mjava","sourceNew":"    /**\n     * Resets the encapsulated components with the given reader. This method by\n     * default returns <code>true</code> indicating that the components have\n     * been reset successfully. Subclasses of {@link ReusableAnalyzerBase} might use\n     * their own {@link TokenStreamComponents} returning <code>false</code> if\n     * the components cannot be reset.\n     * \n     * @param reader\n     *          a reader to reset the source component\n     * @return <code>true</code> if the components were reset, otherwise\n     *         <code>false</code>\n     * @throws IOException\n     *           if the component's reset method throws an {@link IOException}\n     */\n    protected boolean reset(final Reader reader) throws IOException {\n      source.reset(reader);\n      if(sink != source)\n        sink.reset(); // only reset if the sink reference is different from source\n      return true;\n    }\n\n","sourceOld":"    /**\n     * Resets the encapsulated components with the given reader. This method by\n     * default returns <code>true</code> indicating that the components have\n     * been reset successfully. Subclasses of {@link ReusableAnalyzerBase} might use\n     * their own {@link TokenStreamComponents} returning <code>false</code> if\n     * the components cannot be reset.\n     * \n     * @param reader\n     *          a reader to reset the source component\n     * @return <code>true</code> if the components were reset, otherwise\n     *         <code>false</code>\n     * @throws IOException\n     *           if the component's reset method throws an {@link IOException}\n     */\n    protected boolean reset(final Reader reader) throws IOException {\n      source.reset(reader);\n      if(sink != source)\n        sink.reset(); // only reset if the sink reference is different from source\n      return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"790c3f61c9b891d66d919c5d10db9fa5216eb0f1","date":1274818604,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/util/ReusableAnalyzerBase.TokenStreamComponents#reset(Reader).mjava","pathOld":"lucene/src/java/org/apache/lucene/analysis/ReusableAnalyzerBase.TokenStreamComponents#reset(Reader).mjava","sourceNew":"    /**\n     * Resets the encapsulated components with the given reader. This method by\n     * default returns <code>true</code> indicating that the components have\n     * been reset successfully. Subclasses of {@link ReusableAnalyzerBase} might use\n     * their own {@link TokenStreamComponents} returning <code>false</code> if\n     * the components cannot be reset.\n     * \n     * @param reader\n     *          a reader to reset the source component\n     * @return <code>true</code> if the components were reset, otherwise\n     *         <code>false</code>\n     * @throws IOException\n     *           if the component's reset method throws an {@link IOException}\n     */\n    protected boolean reset(final Reader reader) throws IOException {\n      source.reset(reader);\n      if(sink != source)\n        sink.reset(); // only reset if the sink reference is different from source\n      return true;\n    }\n\n","sourceOld":"    /**\n     * Resets the encapsulated components with the given reader. This method by\n     * default returns <code>true</code> indicating that the components have\n     * been reset successfully. Subclasses of {@link ReusableAnalyzerBase} might use\n     * their own {@link TokenStreamComponents} returning <code>false</code> if\n     * the components cannot be reset.\n     * \n     * @param reader\n     *          a reader to reset the source component\n     * @return <code>true</code> if the components were reset, otherwise\n     *         <code>false</code>\n     * @throws IOException\n     *           if the component's reset method throws an {@link IOException}\n     */\n    protected boolean reset(final Reader reader) throws IOException {\n      source.reset(reader);\n      if(sink != source)\n        sink.reset(); // only reset if the sink reference is different from source\n      return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b8f1fd760e2a7a87de661158ca069c8dacab8360","date":1313992891,"type":1,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/analysis/ReusableAnalyzerBase.TokenStreamComponents#reset(Reader).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/util/ReusableAnalyzerBase.TokenStreamComponents#reset(Reader).mjava","sourceNew":"    /**\n     * Resets the encapsulated components with the given reader. This method by\n     * default returns <code>true</code> indicating that the components have\n     * been reset successfully. Subclasses of {@link ReusableAnalyzerBase} might use\n     * their own {@link TokenStreamComponents} returning <code>false</code> if\n     * the components cannot be reset.\n     * \n     * @param reader\n     *          a reader to reset the source component\n     * @return <code>true</code> if the components were reset, otherwise\n     *         <code>false</code>\n     * @throws IOException\n     *           if the component's reset method throws an {@link IOException}\n     */\n    protected boolean reset(final Reader reader) throws IOException {\n      source.reset(reader);\n      return true;\n    }\n\n","sourceOld":"    /**\n     * Resets the encapsulated components with the given reader. This method by\n     * default returns <code>true</code> indicating that the components have\n     * been reset successfully. Subclasses of {@link ReusableAnalyzerBase} might use\n     * their own {@link TokenStreamComponents} returning <code>false</code> if\n     * the components cannot be reset.\n     * \n     * @param reader\n     *          a reader to reset the source component\n     * @return <code>true</code> if the components were reset, otherwise\n     *         <code>false</code>\n     * @throws IOException\n     *           if the component's reset method throws an {@link IOException}\n     */\n    protected boolean reset(final Reader reader) throws IOException {\n      source.reset(reader);\n      return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"53ae89cd75b0acbdfb8890710c6742f3fb80e65d","date":1315806626,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/analysis/ReusableAnalyzerBase.TokenStreamComponents#reset(Reader).mjava","pathOld":"lucene/src/java/org/apache/lucene/analysis/ReusableAnalyzerBase.TokenStreamComponents#reset(Reader).mjava","sourceNew":"    /**\n     * Resets the encapsulated components with the given reader. If the components\n     * cannot be reset, an Exception should be thrown.\n     * \n     * @param reader\n     *          a reader to reset the source component\n     * @throws IOException\n     *           if the component's reset method throws an {@link IOException}\n     */\n    protected void reset(final Reader reader) throws IOException {\n      source.reset(reader);\n    }\n\n","sourceOld":"    /**\n     * Resets the encapsulated components with the given reader. This method by\n     * default returns <code>true</code> indicating that the components have\n     * been reset successfully. Subclasses of {@link ReusableAnalyzerBase} might use\n     * their own {@link TokenStreamComponents} returning <code>false</code> if\n     * the components cannot be reset.\n     * \n     * @param reader\n     *          a reader to reset the source component\n     * @return <code>true</code> if the components were reset, otherwise\n     *         <code>false</code>\n     * @throws IOException\n     *           if the component's reset method throws an {@link IOException}\n     */\n    protected boolean reset(final Reader reader) throws IOException {\n      source.reset(reader);\n      return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2f49143da0a5d278a72f741432047fcfa6da996e","date":1316927425,"type":5,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/analysis/Analyzer.TokenStreamComponents#reset(Reader).mjava","pathOld":"lucene/src/java/org/apache/lucene/analysis/ReusableAnalyzerBase.TokenStreamComponents#reset(Reader).mjava","sourceNew":"    /**\n     * Resets the encapsulated components with the given reader. If the components\n     * cannot be reset, an Exception should be thrown.\n     * \n     * @param reader\n     *          a reader to reset the source component\n     * @throws IOException\n     *           if the component's reset method throws an {@link IOException}\n     */\n    protected void reset(final Reader reader) throws IOException {\n      source.reset(reader);\n    }\n\n","sourceOld":"    /**\n     * Resets the encapsulated components with the given reader. If the components\n     * cannot be reset, an Exception should be thrown.\n     * \n     * @param reader\n     *          a reader to reset the source component\n     * @throws IOException\n     *           if the component's reset method throws an {@link IOException}\n     */\n    protected void reset(final Reader reader) throws IOException {\n      source.reset(reader);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2f49143da0a5d278a72f741432047fcfa6da996e":["53ae89cd75b0acbdfb8890710c6742f3fb80e65d"],"b8f1fd760e2a7a87de661158ca069c8dacab8360":["790c3f61c9b891d66d919c5d10db9fa5216eb0f1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2f49143da0a5d278a72f741432047fcfa6da996e"],"53ae89cd75b0acbdfb8890710c6742f3fb80e65d":["b8f1fd760e2a7a87de661158ca069c8dacab8360"],"790c3f61c9b891d66d919c5d10db9fa5216eb0f1":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"2f49143da0a5d278a72f741432047fcfa6da996e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b8f1fd760e2a7a87de661158ca069c8dacab8360":["53ae89cd75b0acbdfb8890710c6742f3fb80e65d"],"53ae89cd75b0acbdfb8890710c6742f3fb80e65d":["2f49143da0a5d278a72f741432047fcfa6da996e"],"790c3f61c9b891d66d919c5d10db9fa5216eb0f1":["b8f1fd760e2a7a87de661158ca069c8dacab8360"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["790c3f61c9b891d66d919c5d10db9fa5216eb0f1"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}