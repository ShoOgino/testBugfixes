{"path":"lucene/demo/src/java/org/apache/lucene/demo/facet/RangeFacetsExample#search().mjava","commits":[{"id":"2062967ab57824b59d116b38d53d2058ac7e4592","date":1367320813,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/demo/src/java/org/apache/lucene/demo/facet/RangeFacetsExample#search().mjava","pathOld":"/dev/null","sourceNew":"  /** User runs a query and counts facets. */\n  public List<FacetResult> search() throws IOException {\n\n    FacetSearchParams fsp = new FacetSearchParams(\n                                new RangeFacetRequest<LongRange>(\"timestamp\",\n                                                                 new LongRange(\"Past hour\", nowSec-3600, true, nowSec, true),\n                                                                 new LongRange(\"Past six hours\", nowSec-6*3600, true, nowSec, true),\n                                                                 new LongRange(\"Past day\", nowSec-24*3600, true, nowSec, true)));\n    // Aggregatses the facet counts\n    FacetsCollector fc = FacetsCollector.create(new RangeAccumulator(fsp, searcher.getIndexReader()));\n\n    // MatchAllDocsQuery is for \"browsing\" (counts facets\n    // for all non-deleted docs in the index); normally\n    // you'd use a \"normal\" query, and use MultiCollector to\n    // wrap collecting the \"normal\" hits and also facets:\n    searcher.search(new MatchAllDocsQuery(), fc);\n\n    // Retrieve results\n    return fc.getFacetResults();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6249cba93d7ad1bf6f5a225c34fbe3d547ed9f49","date":1375103250,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/demo/src/java/org/apache/lucene/demo/facet/RangeFacetsExample#search().mjava","pathOld":"lucene/demo/src/java/org/apache/lucene/demo/facet/RangeFacetsExample#search().mjava","sourceNew":"  /** User runs a query and counts facets. */\n  public List<FacetResult> search() throws IOException {\n\n    RangeFacetRequest<LongRange> rangeFacetRequest = new RangeFacetRequest<LongRange>(\"timestamp\",\n                                     new LongRange(\"Past hour\", nowSec-3600, true, nowSec, true),\n                                     new LongRange(\"Past six hours\", nowSec-6*3600, true, nowSec, true),\n                                     new LongRange(\"Past day\", nowSec-24*3600, true, nowSec, true));\n    // Aggregatses the facet counts\n    FacetsCollector fc = FacetsCollector.create(new RangeAccumulator(rangeFacetRequest));\n\n    // MatchAllDocsQuery is for \"browsing\" (counts facets\n    // for all non-deleted docs in the index); normally\n    // you'd use a \"normal\" query, and use MultiCollector to\n    // wrap collecting the \"normal\" hits and also facets:\n    searcher.search(new MatchAllDocsQuery(), fc);\n\n    // Retrieve results\n    return fc.getFacetResults();\n  }\n\n","sourceOld":"  /** User runs a query and counts facets. */\n  public List<FacetResult> search() throws IOException {\n\n    FacetSearchParams fsp = new FacetSearchParams(\n                                new RangeFacetRequest<LongRange>(\"timestamp\",\n                                                                 new LongRange(\"Past hour\", nowSec-3600, true, nowSec, true),\n                                                                 new LongRange(\"Past six hours\", nowSec-6*3600, true, nowSec, true),\n                                                                 new LongRange(\"Past day\", nowSec-24*3600, true, nowSec, true)));\n    // Aggregatses the facet counts\n    FacetsCollector fc = FacetsCollector.create(new RangeAccumulator(fsp, searcher.getIndexReader()));\n\n    // MatchAllDocsQuery is for \"browsing\" (counts facets\n    // for all non-deleted docs in the index); normally\n    // you'd use a \"normal\" query, and use MultiCollector to\n    // wrap collecting the \"normal\" hits and also facets:\n    searcher.search(new MatchAllDocsQuery(), fc);\n\n    // Retrieve results\n    return fc.getFacetResults();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/demo/src/java/org/apache/lucene/demo/facet/RangeFacetsExample#search().mjava","pathOld":"lucene/demo/src/java/org/apache/lucene/demo/facet/RangeFacetsExample#search().mjava","sourceNew":"  /** User runs a query and counts facets. */\n  public List<FacetResult> search() throws IOException {\n\n    RangeFacetRequest<LongRange> rangeFacetRequest = new RangeFacetRequest<LongRange>(\"timestamp\",\n                                     new LongRange(\"Past hour\", nowSec-3600, true, nowSec, true),\n                                     new LongRange(\"Past six hours\", nowSec-6*3600, true, nowSec, true),\n                                     new LongRange(\"Past day\", nowSec-24*3600, true, nowSec, true));\n    // Aggregatses the facet counts\n    FacetsCollector fc = FacetsCollector.create(new RangeAccumulator(rangeFacetRequest));\n\n    // MatchAllDocsQuery is for \"browsing\" (counts facets\n    // for all non-deleted docs in the index); normally\n    // you'd use a \"normal\" query, and use MultiCollector to\n    // wrap collecting the \"normal\" hits and also facets:\n    searcher.search(new MatchAllDocsQuery(), fc);\n\n    // Retrieve results\n    return fc.getFacetResults();\n  }\n\n","sourceOld":"  /** User runs a query and counts facets. */\n  public List<FacetResult> search() throws IOException {\n\n    FacetSearchParams fsp = new FacetSearchParams(\n                                new RangeFacetRequest<LongRange>(\"timestamp\",\n                                                                 new LongRange(\"Past hour\", nowSec-3600, true, nowSec, true),\n                                                                 new LongRange(\"Past six hours\", nowSec-6*3600, true, nowSec, true),\n                                                                 new LongRange(\"Past day\", nowSec-24*3600, true, nowSec, true)));\n    // Aggregatses the facet counts\n    FacetsCollector fc = FacetsCollector.create(new RangeAccumulator(fsp, searcher.getIndexReader()));\n\n    // MatchAllDocsQuery is for \"browsing\" (counts facets\n    // for all non-deleted docs in the index); normally\n    // you'd use a \"normal\" query, and use MultiCollector to\n    // wrap collecting the \"normal\" hits and also facets:\n    searcher.search(new MatchAllDocsQuery(), fc);\n\n    // Retrieve results\n    return fc.getFacetResults();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d899affd3c008feba40d1405b7a38972ce2005b4","date":1385469973,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/demo/src/java/org/apache/lucene/demo/facet/RangeFacetsExample#search().mjava","pathOld":"lucene/demo/src/java/org/apache/lucene/demo/facet/RangeFacetsExample#search().mjava","sourceNew":"  /** User runs a query and counts facets. */\n  public SimpleFacetResult search() throws IOException {\n\n    // Aggregates the facet counts\n    SimpleFacetsCollector sfc = new SimpleFacetsCollector();\n\n    // MatchAllDocsQuery is for \"browsing\" (counts facets\n    // for all non-deleted docs in the index); normally\n    // you'd use a \"normal\" query, and use MultiCollector to\n    // wrap collecting the \"normal\" hits and also facets:\n    searcher.search(new MatchAllDocsQuery(), sfc);\n\n    Facets facets = new RangeFacetCounts(\"timestamp\", sfc,\n                                         PAST_HOUR,\n                                         PAST_SIX_HOURS,\n                                         PAST_DAY);\n    return facets.getTopChildren(10, \"timestamp\");\n  }\n\n","sourceOld":"  /** User runs a query and counts facets. */\n  public List<FacetResult> search() throws IOException {\n\n    RangeFacetRequest<LongRange> rangeFacetRequest = new RangeFacetRequest<LongRange>(\"timestamp\",\n                                     new LongRange(\"Past hour\", nowSec-3600, true, nowSec, true),\n                                     new LongRange(\"Past six hours\", nowSec-6*3600, true, nowSec, true),\n                                     new LongRange(\"Past day\", nowSec-24*3600, true, nowSec, true));\n    // Aggregatses the facet counts\n    FacetsCollector fc = FacetsCollector.create(new RangeAccumulator(rangeFacetRequest));\n\n    // MatchAllDocsQuery is for \"browsing\" (counts facets\n    // for all non-deleted docs in the index); normally\n    // you'd use a \"normal\" query, and use MultiCollector to\n    // wrap collecting the \"normal\" hits and also facets:\n    searcher.search(new MatchAllDocsQuery(), fc);\n\n    // Retrieve results\n    return fc.getFacetResults();\n  }\n\n","bugFix":null,"bugIntro":["3e1de378515e2ab9bcfd5b80901238a3f9078a7c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"21d36d0db865f7b84026b447bec653469a6e66df","date":1385495602,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/demo/src/java/org/apache/lucene/demo/facet/RangeFacetsExample#search().mjava","pathOld":"lucene/demo/src/java/org/apache/lucene/demo/facet/RangeFacetsExample#search().mjava","sourceNew":"  /** User runs a query and counts facets. */\n  public FacetResult search() throws IOException {\n\n    // Aggregates the facet counts\n    FacetsCollector sfc = new FacetsCollector();\n\n    // MatchAllDocsQuery is for \"browsing\" (counts facets\n    // for all non-deleted docs in the index); normally\n    // you'd use a \"normal\" query, and use MultiCollector to\n    // wrap collecting the \"normal\" hits and also facets:\n    searcher.search(new MatchAllDocsQuery(), sfc);\n\n    Facets facets = new RangeFacetCounts(\"timestamp\", sfc,\n                                         PAST_HOUR,\n                                         PAST_SIX_HOURS,\n                                         PAST_DAY);\n    return facets.getTopChildren(10, \"timestamp\");\n  }\n\n","sourceOld":"  /** User runs a query and counts facets. */\n  public SimpleFacetResult search() throws IOException {\n\n    // Aggregates the facet counts\n    SimpleFacetsCollector sfc = new SimpleFacetsCollector();\n\n    // MatchAllDocsQuery is for \"browsing\" (counts facets\n    // for all non-deleted docs in the index); normally\n    // you'd use a \"normal\" query, and use MultiCollector to\n    // wrap collecting the \"normal\" hits and also facets:\n    searcher.search(new MatchAllDocsQuery(), sfc);\n\n    Facets facets = new RangeFacetCounts(\"timestamp\", sfc,\n                                         PAST_HOUR,\n                                         PAST_SIX_HOURS,\n                                         PAST_DAY);\n    return facets.getTopChildren(10, \"timestamp\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"78522aad83283ca58fae08fd89406b65429d0229","date":1385573562,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/demo/src/java/org/apache/lucene/demo/facet/RangeFacetsExample#search().mjava","pathOld":"lucene/demo/src/java/org/apache/lucene/demo/facet/RangeFacetsExample#search().mjava","sourceNew":"  /** User runs a query and counts facets. */\n  public FacetResult search() throws IOException {\n\n    // Aggregates the facet counts\n    FacetsCollector fc = new FacetsCollector();\n\n    // MatchAllDocsQuery is for \"browsing\" (counts facets\n    // for all non-deleted docs in the index); normally\n    // you'd use a \"normal\" query:\n    Facets.search(searcher, new MatchAllDocsQuery(), 10, fc);\n\n    Facets facets = new RangeFacetCounts(\"timestamp\", fc,\n                                         PAST_HOUR,\n                                         PAST_SIX_HOURS,\n                                         PAST_DAY);\n    return facets.getTopChildren(10, \"timestamp\");\n  }\n\n","sourceOld":"  /** User runs a query and counts facets. */\n  public FacetResult search() throws IOException {\n\n    // Aggregates the facet counts\n    FacetsCollector sfc = new FacetsCollector();\n\n    // MatchAllDocsQuery is for \"browsing\" (counts facets\n    // for all non-deleted docs in the index); normally\n    // you'd use a \"normal\" query, and use MultiCollector to\n    // wrap collecting the \"normal\" hits and also facets:\n    searcher.search(new MatchAllDocsQuery(), sfc);\n\n    Facets facets = new RangeFacetCounts(\"timestamp\", sfc,\n                                         PAST_HOUR,\n                                         PAST_SIX_HOURS,\n                                         PAST_DAY);\n    return facets.getTopChildren(10, \"timestamp\");\n  }\n\n","bugFix":null,"bugIntro":["3e1de378515e2ab9bcfd5b80901238a3f9078a7c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fd83550e4b0bdd36e7d9dca9273264100782440b","date":1385761753,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/demo/src/java/org/apache/lucene/demo/facet/RangeFacetsExample#search().mjava","pathOld":"lucene/demo/src/java/org/apache/lucene/demo/facet/RangeFacetsExample#search().mjava","sourceNew":"  /** User runs a query and counts facets. */\n  public FacetResult search() throws IOException {\n\n    // Aggregates the facet counts\n    FacetsCollector fc = new FacetsCollector();\n\n    // MatchAllDocsQuery is for \"browsing\" (counts facets\n    // for all non-deleted docs in the index); normally\n    // you'd use a \"normal\" query:\n    FacetsCollector.search(searcher, new MatchAllDocsQuery(), 10, fc);\n\n    Facets facets = new RangeFacetCounts(\"timestamp\", fc,\n                                         PAST_HOUR,\n                                         PAST_SIX_HOURS,\n                                         PAST_DAY);\n    return facets.getTopChildren(10, \"timestamp\");\n  }\n\n","sourceOld":"  /** User runs a query and counts facets. */\n  public FacetResult search() throws IOException {\n\n    // Aggregates the facet counts\n    FacetsCollector fc = new FacetsCollector();\n\n    // MatchAllDocsQuery is for \"browsing\" (counts facets\n    // for all non-deleted docs in the index); normally\n    // you'd use a \"normal\" query:\n    Facets.search(searcher, new MatchAllDocsQuery(), 10, fc);\n\n    Facets facets = new RangeFacetCounts(\"timestamp\", fc,\n                                         PAST_HOUR,\n                                         PAST_SIX_HOURS,\n                                         PAST_DAY);\n    return facets.getTopChildren(10, \"timestamp\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3e1de378515e2ab9bcfd5b80901238a3f9078a7c","date":1385904665,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/demo/src/java/org/apache/lucene/demo/facet/RangeFacetsExample#search().mjava","pathOld":"lucene/demo/src/java/org/apache/lucene/demo/facet/RangeFacetsExample#search().mjava","sourceNew":"  /** User runs a query and counts facets. */\n  public FacetResult search() throws IOException {\n\n    // Aggregates the facet counts\n    FacetsCollector fc = new FacetsCollector();\n\n    // MatchAllDocsQuery is for \"browsing\" (counts facets\n    // for all non-deleted docs in the index); normally\n    // you'd use a \"normal\" query:\n    FacetsCollector.search(searcher, new MatchAllDocsQuery(), 10, fc);\n\n    Facets facets = new LongRangeFacetCounts(\"timestamp\", fc,\n                                             PAST_HOUR,\n                                             PAST_SIX_HOURS,\n                                             PAST_DAY);\n    return facets.getTopChildren(10, \"timestamp\");\n  }\n\n","sourceOld":"  /** User runs a query and counts facets. */\n  public FacetResult search() throws IOException {\n\n    // Aggregates the facet counts\n    FacetsCollector fc = new FacetsCollector();\n\n    // MatchAllDocsQuery is for \"browsing\" (counts facets\n    // for all non-deleted docs in the index); normally\n    // you'd use a \"normal\" query:\n    FacetsCollector.search(searcher, new MatchAllDocsQuery(), 10, fc);\n\n    Facets facets = new RangeFacetCounts(\"timestamp\", fc,\n                                         PAST_HOUR,\n                                         PAST_SIX_HOURS,\n                                         PAST_DAY);\n    return facets.getTopChildren(10, \"timestamp\");\n  }\n\n","bugFix":["d899affd3c008feba40d1405b7a38972ce2005b4","78522aad83283ca58fae08fd89406b65429d0229"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/demo/src/java/org/apache/lucene/demo/facet/RangeFacetsExample#search().mjava","pathOld":"lucene/demo/src/java/org/apache/lucene/demo/facet/RangeFacetsExample#search().mjava","sourceNew":"  /** User runs a query and counts facets. */\n  public FacetResult search() throws IOException {\n\n    // Aggregates the facet counts\n    FacetsCollector fc = new FacetsCollector();\n\n    // MatchAllDocsQuery is for \"browsing\" (counts facets\n    // for all non-deleted docs in the index); normally\n    // you'd use a \"normal\" query:\n    FacetsCollector.search(searcher, new MatchAllDocsQuery(), 10, fc);\n\n    Facets facets = new LongRangeFacetCounts(\"timestamp\", fc,\n                                             PAST_HOUR,\n                                             PAST_SIX_HOURS,\n                                             PAST_DAY);\n    return facets.getTopChildren(10, \"timestamp\");\n  }\n\n","sourceOld":"  /** User runs a query and counts facets. */\n  public List<FacetResult> search() throws IOException {\n\n    RangeFacetRequest<LongRange> rangeFacetRequest = new RangeFacetRequest<LongRange>(\"timestamp\",\n                                     new LongRange(\"Past hour\", nowSec-3600, true, nowSec, true),\n                                     new LongRange(\"Past six hours\", nowSec-6*3600, true, nowSec, true),\n                                     new LongRange(\"Past day\", nowSec-24*3600, true, nowSec, true));\n    // Aggregatses the facet counts\n    FacetsCollector fc = FacetsCollector.create(new RangeAccumulator(rangeFacetRequest));\n\n    // MatchAllDocsQuery is for \"browsing\" (counts facets\n    // for all non-deleted docs in the index); normally\n    // you'd use a \"normal\" query, and use MultiCollector to\n    // wrap collecting the \"normal\" hits and also facets:\n    searcher.search(new MatchAllDocsQuery(), fc);\n\n    // Retrieve results\n    return fc.getFacetResults();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2062967ab57824b59d116b38d53d2058ac7e4592":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"21d36d0db865f7b84026b447bec653469a6e66df":["d899affd3c008feba40d1405b7a38972ce2005b4"],"d899affd3c008feba40d1405b7a38972ce2005b4":["6249cba93d7ad1bf6f5a225c34fbe3d547ed9f49"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["2062967ab57824b59d116b38d53d2058ac7e4592"],"fd83550e4b0bdd36e7d9dca9273264100782440b":["78522aad83283ca58fae08fd89406b65429d0229"],"78522aad83283ca58fae08fd89406b65429d0229":["21d36d0db865f7b84026b447bec653469a6e66df"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["6249cba93d7ad1bf6f5a225c34fbe3d547ed9f49","3e1de378515e2ab9bcfd5b80901238a3f9078a7c"],"3e1de378515e2ab9bcfd5b80901238a3f9078a7c":["fd83550e4b0bdd36e7d9dca9273264100782440b"],"6249cba93d7ad1bf6f5a225c34fbe3d547ed9f49":["2062967ab57824b59d116b38d53d2058ac7e4592"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc728b07df73b197e6d940d27f9b08b63918f13"]},"commit2Childs":{"2062967ab57824b59d116b38d53d2058ac7e4592":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","6249cba93d7ad1bf6f5a225c34fbe3d547ed9f49"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2062967ab57824b59d116b38d53d2058ac7e4592"],"21d36d0db865f7b84026b447bec653469a6e66df":["78522aad83283ca58fae08fd89406b65429d0229"],"d899affd3c008feba40d1405b7a38972ce2005b4":["21d36d0db865f7b84026b447bec653469a6e66df"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"fd83550e4b0bdd36e7d9dca9273264100782440b":["3e1de378515e2ab9bcfd5b80901238a3f9078a7c"],"78522aad83283ca58fae08fd89406b65429d0229":["fd83550e4b0bdd36e7d9dca9273264100782440b"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3e1de378515e2ab9bcfd5b80901238a3f9078a7c":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"6249cba93d7ad1bf6f5a225c34fbe3d547ed9f49":["d899affd3c008feba40d1405b7a38972ce2005b4","3cc728b07df73b197e6d940d27f9b08b63918f13"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}