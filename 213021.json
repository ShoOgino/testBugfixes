{"path":"solr/core/src/test/org/apache/solr/core/TestLazyCores#testBadConfigsGenerateErrors().mjava","commits":[{"id":"83fbfcaab6a6cd5daf32752c0c35f0e0c15380e0","date":1377955248,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestLazyCores#testBadConfigsGenerateErrors().mjava","pathOld":"/dev/null","sourceNew":"  // Test that transient cores\n  // 1> produce errors as appropriate when the config or schema files are foo'd\n  // 2> \"self heal\". That is, if the problem is corrected can the core be reloaded and used?\n  // 3> that OK cores can be searched even when some cores failed to load.\n  @Test\n  public void testBadConfigsGenerateErrors() throws Exception {\n    final CoreContainer cc = initGoodAndBad(Arrays.asList(\"core1\", \"core2\"),\n        Arrays.asList(\"badSchema1\", \"badSchema2\"),\n        Arrays.asList(\"badConfig1\", \"badConfig2\"));\n    try {\n      // first, did the two good cores load successfully?\n      checkInCores(cc, \"core1\", \"core2\");\n\n      // Did the bad cores fail to load?\n      checkNotInCores(cc, \"badSchema1\", \"badSchema2\", \"badConfig1\", \"badConfig2\");\n\n      //  Can we still search the \"good\" cores even though there were core init failures?\n      SolrCore core1 = cc.getCore(\"core1\");\n      checkSearch(core1);\n\n      // Did we get the expected message for each of the cores that failed to load? Make sure we don't run afoul of\n      // the dreaded slash/backslash difference on Windows and *nix machines.\n      testMessage(cc.getCoreInitFailures(),\n          \"TestLazyCores\" + File.separator + \"badConfig1\" + File.separator + \"solrconfig.xml\");\n      testMessage(cc.getCoreInitFailures(),\n          \"TestLazyCores\" + File.separator + \"badConfig2\" + File.separator + \"solrconfig.xml\");\n      testMessage(cc.getCoreInitFailures(),\n          \"TestLazyCores\" + File.separator + \"badSchema1\" + File.separator + \"schema.xml\");\n      testMessage(cc.getCoreInitFailures(),\n          \"TestLazyCores\" + File.separator + \"badSchema2\" + File.separator + \"schema.xml\");\n\n      // Status should report that there are failure messages for the bad cores and none for the good cores.\n      checkStatus(cc, true, \"core1\");\n      checkStatus(cc, true, \"core2\");\n      checkStatus(cc, false, \"badSchema1\");\n      checkStatus(cc, false, \"badSchema2\");\n      checkStatus(cc, false, \"badConfig1\");\n      checkStatus(cc, false, \"badConfig2\");\n\n      // Copy good config and schema files in and see if you can then load them (they are transient after all)\n      copyGoodConf(\"badConfig1\", \"solrconfig-minimal.xml\", \"solrconfig.xml\");\n      copyGoodConf(\"badConfig2\", \"solrconfig-minimal.xml\", \"solrconfig.xml\");\n      copyGoodConf(\"badSchema1\", \"schema-tiny.xml\", \"schema.xml\");\n      copyGoodConf(\"badSchema2\", \"schema-tiny.xml\", \"schema.xml\");\n\n      // This should force a reload of the cores.\n      SolrCore bc1 = cc.getCore(\"badConfig1\");\n      SolrCore bc2 = cc.getCore(\"badConfig2\");\n      SolrCore bs1 = cc.getCore(\"badSchema1\");\n      SolrCore bs2 = cc.getCore(\"badSchema2\");\n\n      // all the cores should be found in the list now.\n      checkInCores(cc, \"core1\", \"core2\", \"badSchema1\", \"badSchema2\", \"badConfig1\", \"badConfig2\");\n\n      // Did we clear out the errors by putting good files in place? And the cores that never were bad should be OK too.\n      checkStatus(cc, true, \"core1\");\n      checkStatus(cc, true, \"core2\");\n      checkStatus(cc, true, \"badSchema1\");\n      checkStatus(cc, true, \"badSchema2\");\n      checkStatus(cc, true, \"badConfig1\");\n      checkStatus(cc, true, \"badConfig2\");\n\n      // Are the formerly bad cores now searchable? Testing one of each should do.\n      checkSearch(core1);\n      checkSearch(bc1);\n      checkSearch(bs1);\n\n      core1.close();\n      bc1.close();\n      bc2.close();\n      bs1.close();\n      bs2.close();\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["f52362fa746c58f10354f9454bed2b89f59c06b2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb1f22cfa77230b5f05b7784feae5367f6bbb488","date":1395968145,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestLazyCores#testBadConfigsGenerateErrors().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestLazyCores#testBadConfigsGenerateErrors().mjava","sourceNew":"  // Test that transient cores\n  // 1> produce errors as appropriate when the config or schema files are foo'd\n  // 2> \"self heal\". That is, if the problem is corrected can the core be reloaded and used?\n  // 3> that OK cores can be searched even when some cores failed to load.\n  @Test\n  public void testBadConfigsGenerateErrors() throws Exception {\n    final CoreContainer cc = initGoodAndBad(Arrays.asList(\"core1\", \"core2\"),\n        Arrays.asList(\"badSchema1\", \"badSchema2\"),\n        Arrays.asList(\"badConfig1\", \"badConfig2\"));\n    try {\n      // first, did the two good cores load successfully?\n      checkInCores(cc, \"core1\", \"core2\");\n\n      // Did the bad cores fail to load?\n      checkNotInCores(cc, \"badSchema1\", \"badSchema2\", \"badConfig1\", \"badConfig2\");\n\n      //  Can we still search the \"good\" cores even though there were core init failures?\n      SolrCore core1 = cc.getCore(\"core1\");\n      checkSearch(core1);\n\n      // Did we get the expected message for each of the cores that failed to load? Make sure we don't run afoul of\n      // the dreaded slash/backslash difference on Windows and *nix machines.\n      testMessage(cc.getCoreInitFailures(),\n          \"badConfig1\" + File.separator + \"solrconfig.xml\");\n      testMessage(cc.getCoreInitFailures(),\n          \"badConfig2\" + File.separator + \"solrconfig.xml\");\n      testMessage(cc.getCoreInitFailures(),\n          \"badSchema1\" + File.separator + \"schema.xml\");\n      testMessage(cc.getCoreInitFailures(),\n          \"badSchema2\" + File.separator + \"schema.xml\");\n\n      // Status should report that there are failure messages for the bad cores and none for the good cores.\n      checkStatus(cc, true, \"core1\");\n      checkStatus(cc, true, \"core2\");\n      checkStatus(cc, false, \"badSchema1\");\n      checkStatus(cc, false, \"badSchema2\");\n      checkStatus(cc, false, \"badConfig1\");\n      checkStatus(cc, false, \"badConfig2\");\n\n      // Copy good config and schema files in and see if you can then load them (they are transient after all)\n      copyGoodConf(\"badConfig1\", \"solrconfig-minimal.xml\", \"solrconfig.xml\");\n      copyGoodConf(\"badConfig2\", \"solrconfig-minimal.xml\", \"solrconfig.xml\");\n      copyGoodConf(\"badSchema1\", \"schema-tiny.xml\", \"schema.xml\");\n      copyGoodConf(\"badSchema2\", \"schema-tiny.xml\", \"schema.xml\");\n\n      // This should force a reload of the cores.\n      SolrCore bc1 = cc.getCore(\"badConfig1\");\n      SolrCore bc2 = cc.getCore(\"badConfig2\");\n      SolrCore bs1 = cc.getCore(\"badSchema1\");\n      SolrCore bs2 = cc.getCore(\"badSchema2\");\n\n      // all the cores should be found in the list now.\n      checkInCores(cc, \"core1\", \"core2\", \"badSchema1\", \"badSchema2\", \"badConfig1\", \"badConfig2\");\n\n      // Did we clear out the errors by putting good files in place? And the cores that never were bad should be OK too.\n      checkStatus(cc, true, \"core1\");\n      checkStatus(cc, true, \"core2\");\n      checkStatus(cc, true, \"badSchema1\");\n      checkStatus(cc, true, \"badSchema2\");\n      checkStatus(cc, true, \"badConfig1\");\n      checkStatus(cc, true, \"badConfig2\");\n\n      // Are the formerly bad cores now searchable? Testing one of each should do.\n      checkSearch(core1);\n      checkSearch(bc1);\n      checkSearch(bs1);\n\n      core1.close();\n      bc1.close();\n      bc2.close();\n      bs1.close();\n      bs2.close();\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","sourceOld":"  // Test that transient cores\n  // 1> produce errors as appropriate when the config or schema files are foo'd\n  // 2> \"self heal\". That is, if the problem is corrected can the core be reloaded and used?\n  // 3> that OK cores can be searched even when some cores failed to load.\n  @Test\n  public void testBadConfigsGenerateErrors() throws Exception {\n    final CoreContainer cc = initGoodAndBad(Arrays.asList(\"core1\", \"core2\"),\n        Arrays.asList(\"badSchema1\", \"badSchema2\"),\n        Arrays.asList(\"badConfig1\", \"badConfig2\"));\n    try {\n      // first, did the two good cores load successfully?\n      checkInCores(cc, \"core1\", \"core2\");\n\n      // Did the bad cores fail to load?\n      checkNotInCores(cc, \"badSchema1\", \"badSchema2\", \"badConfig1\", \"badConfig2\");\n\n      //  Can we still search the \"good\" cores even though there were core init failures?\n      SolrCore core1 = cc.getCore(\"core1\");\n      checkSearch(core1);\n\n      // Did we get the expected message for each of the cores that failed to load? Make sure we don't run afoul of\n      // the dreaded slash/backslash difference on Windows and *nix machines.\n      testMessage(cc.getCoreInitFailures(),\n          \"TestLazyCores\" + File.separator + \"badConfig1\" + File.separator + \"solrconfig.xml\");\n      testMessage(cc.getCoreInitFailures(),\n          \"TestLazyCores\" + File.separator + \"badConfig2\" + File.separator + \"solrconfig.xml\");\n      testMessage(cc.getCoreInitFailures(),\n          \"TestLazyCores\" + File.separator + \"badSchema1\" + File.separator + \"schema.xml\");\n      testMessage(cc.getCoreInitFailures(),\n          \"TestLazyCores\" + File.separator + \"badSchema2\" + File.separator + \"schema.xml\");\n\n      // Status should report that there are failure messages for the bad cores and none for the good cores.\n      checkStatus(cc, true, \"core1\");\n      checkStatus(cc, true, \"core2\");\n      checkStatus(cc, false, \"badSchema1\");\n      checkStatus(cc, false, \"badSchema2\");\n      checkStatus(cc, false, \"badConfig1\");\n      checkStatus(cc, false, \"badConfig2\");\n\n      // Copy good config and schema files in and see if you can then load them (they are transient after all)\n      copyGoodConf(\"badConfig1\", \"solrconfig-minimal.xml\", \"solrconfig.xml\");\n      copyGoodConf(\"badConfig2\", \"solrconfig-minimal.xml\", \"solrconfig.xml\");\n      copyGoodConf(\"badSchema1\", \"schema-tiny.xml\", \"schema.xml\");\n      copyGoodConf(\"badSchema2\", \"schema-tiny.xml\", \"schema.xml\");\n\n      // This should force a reload of the cores.\n      SolrCore bc1 = cc.getCore(\"badConfig1\");\n      SolrCore bc2 = cc.getCore(\"badConfig2\");\n      SolrCore bs1 = cc.getCore(\"badSchema1\");\n      SolrCore bs2 = cc.getCore(\"badSchema2\");\n\n      // all the cores should be found in the list now.\n      checkInCores(cc, \"core1\", \"core2\", \"badSchema1\", \"badSchema2\", \"badConfig1\", \"badConfig2\");\n\n      // Did we clear out the errors by putting good files in place? And the cores that never were bad should be OK too.\n      checkStatus(cc, true, \"core1\");\n      checkStatus(cc, true, \"core2\");\n      checkStatus(cc, true, \"badSchema1\");\n      checkStatus(cc, true, \"badSchema2\");\n      checkStatus(cc, true, \"badConfig1\");\n      checkStatus(cc, true, \"badConfig2\");\n\n      // Are the formerly bad cores now searchable? Testing one of each should do.\n      checkSearch(core1);\n      checkSearch(bc1);\n      checkSearch(bs1);\n\n      core1.close();\n      bc1.close();\n      bc2.close();\n      bs1.close();\n      bs2.close();\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":["f52362fa746c58f10354f9454bed2b89f59c06b2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2a0f5bb79c600763ffe7b8141df59a3169d31e48","date":1396689440,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestLazyCores#testBadConfigsGenerateErrors().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestLazyCores#testBadConfigsGenerateErrors().mjava","sourceNew":"  // Test that transient cores\n  // 1> produce errors as appropriate when the config or schema files are foo'd\n  // 2> \"self heal\". That is, if the problem is corrected can the core be reloaded and used?\n  // 3> that OK cores can be searched even when some cores failed to load.\n  @Test\n  public void testBadConfigsGenerateErrors() throws Exception {\n    final CoreContainer cc = initGoodAndBad(Arrays.asList(\"core1\", \"core2\"),\n        Arrays.asList(\"badSchema1\", \"badSchema2\"),\n        Arrays.asList(\"badConfig1\", \"badConfig2\"));\n    try {\n      // first, did the two good cores load successfully?\n      checkInCores(cc, \"core1\", \"core2\");\n\n      // Did the bad cores fail to load?\n      checkNotInCores(cc, \"badSchema1\", \"badSchema2\", \"badConfig1\", \"badConfig2\");\n\n      //  Can we still search the \"good\" cores even though there were core init failures?\n      SolrCore core1 = cc.getCore(\"core1\");\n      checkSearch(core1);\n\n      // Did we get the expected message for each of the cores that failed to load? Make sure we don't run afoul of\n      // the dreaded slash/backslash difference on Windows and *nix machines.\n      testMessage(cc.getCoreInitFailures(),\n          \"badConfig1\" + File.separator + \"solrconfig.xml\");\n      testMessage(cc.getCoreInitFailures(),\n          \"badConfig2\" + File.separator + \"solrconfig.xml\");\n      testMessage(cc.getCoreInitFailures(),\n          \"badSchema1\" + File.separator + \"schema.xml\");\n      testMessage(cc.getCoreInitFailures(),\n          \"badSchema2\" + File.separator + \"schema.xml\");\n\n      // Status should report that there are failure messages for the bad cores and none for the good cores.\n      checkStatus(cc, true, \"core1\");\n      checkStatus(cc, true, \"core2\");\n      checkStatus(cc, false, \"badSchema1\");\n      checkStatus(cc, false, \"badSchema2\");\n      checkStatus(cc, false, \"badConfig1\");\n      checkStatus(cc, false, \"badConfig2\");\n\n      // Copy good config and schema files in and see if you can then load them (they are transient after all)\n      copyGoodConf(\"badConfig1\", \"solrconfig-minimal.xml\", \"solrconfig.xml\");\n      copyGoodConf(\"badConfig2\", \"solrconfig-minimal.xml\", \"solrconfig.xml\");\n      copyGoodConf(\"badSchema1\", \"schema-tiny.xml\", \"schema.xml\");\n      copyGoodConf(\"badSchema2\", \"schema-tiny.xml\", \"schema.xml\");\n\n      // This should force a reload of the cores.\n      SolrCore bc1 = cc.getCore(\"badConfig1\");\n      SolrCore bc2 = cc.getCore(\"badConfig2\");\n      SolrCore bs1 = cc.getCore(\"badSchema1\");\n      SolrCore bs2 = cc.getCore(\"badSchema2\");\n\n      // all the cores should be found in the list now.\n      checkInCores(cc, \"core1\", \"core2\", \"badSchema1\", \"badSchema2\", \"badConfig1\", \"badConfig2\");\n\n      // Did we clear out the errors by putting good files in place? And the cores that never were bad should be OK too.\n      checkStatus(cc, true, \"core1\");\n      checkStatus(cc, true, \"core2\");\n      checkStatus(cc, true, \"badSchema1\");\n      checkStatus(cc, true, \"badSchema2\");\n      checkStatus(cc, true, \"badConfig1\");\n      checkStatus(cc, true, \"badConfig2\");\n\n      // Are the formerly bad cores now searchable? Testing one of each should do.\n      checkSearch(core1);\n      checkSearch(bc1);\n      checkSearch(bs1);\n\n      core1.close();\n      bc1.close();\n      bc2.close();\n      bs1.close();\n      bs2.close();\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","sourceOld":"  // Test that transient cores\n  // 1> produce errors as appropriate when the config or schema files are foo'd\n  // 2> \"self heal\". That is, if the problem is corrected can the core be reloaded and used?\n  // 3> that OK cores can be searched even when some cores failed to load.\n  @Test\n  public void testBadConfigsGenerateErrors() throws Exception {\n    final CoreContainer cc = initGoodAndBad(Arrays.asList(\"core1\", \"core2\"),\n        Arrays.asList(\"badSchema1\", \"badSchema2\"),\n        Arrays.asList(\"badConfig1\", \"badConfig2\"));\n    try {\n      // first, did the two good cores load successfully?\n      checkInCores(cc, \"core1\", \"core2\");\n\n      // Did the bad cores fail to load?\n      checkNotInCores(cc, \"badSchema1\", \"badSchema2\", \"badConfig1\", \"badConfig2\");\n\n      //  Can we still search the \"good\" cores even though there were core init failures?\n      SolrCore core1 = cc.getCore(\"core1\");\n      checkSearch(core1);\n\n      // Did we get the expected message for each of the cores that failed to load? Make sure we don't run afoul of\n      // the dreaded slash/backslash difference on Windows and *nix machines.\n      testMessage(cc.getCoreInitFailures(),\n          \"TestLazyCores\" + File.separator + \"badConfig1\" + File.separator + \"solrconfig.xml\");\n      testMessage(cc.getCoreInitFailures(),\n          \"TestLazyCores\" + File.separator + \"badConfig2\" + File.separator + \"solrconfig.xml\");\n      testMessage(cc.getCoreInitFailures(),\n          \"TestLazyCores\" + File.separator + \"badSchema1\" + File.separator + \"schema.xml\");\n      testMessage(cc.getCoreInitFailures(),\n          \"TestLazyCores\" + File.separator + \"badSchema2\" + File.separator + \"schema.xml\");\n\n      // Status should report that there are failure messages for the bad cores and none for the good cores.\n      checkStatus(cc, true, \"core1\");\n      checkStatus(cc, true, \"core2\");\n      checkStatus(cc, false, \"badSchema1\");\n      checkStatus(cc, false, \"badSchema2\");\n      checkStatus(cc, false, \"badConfig1\");\n      checkStatus(cc, false, \"badConfig2\");\n\n      // Copy good config and schema files in and see if you can then load them (they are transient after all)\n      copyGoodConf(\"badConfig1\", \"solrconfig-minimal.xml\", \"solrconfig.xml\");\n      copyGoodConf(\"badConfig2\", \"solrconfig-minimal.xml\", \"solrconfig.xml\");\n      copyGoodConf(\"badSchema1\", \"schema-tiny.xml\", \"schema.xml\");\n      copyGoodConf(\"badSchema2\", \"schema-tiny.xml\", \"schema.xml\");\n\n      // This should force a reload of the cores.\n      SolrCore bc1 = cc.getCore(\"badConfig1\");\n      SolrCore bc2 = cc.getCore(\"badConfig2\");\n      SolrCore bs1 = cc.getCore(\"badSchema1\");\n      SolrCore bs2 = cc.getCore(\"badSchema2\");\n\n      // all the cores should be found in the list now.\n      checkInCores(cc, \"core1\", \"core2\", \"badSchema1\", \"badSchema2\", \"badConfig1\", \"badConfig2\");\n\n      // Did we clear out the errors by putting good files in place? And the cores that never were bad should be OK too.\n      checkStatus(cc, true, \"core1\");\n      checkStatus(cc, true, \"core2\");\n      checkStatus(cc, true, \"badSchema1\");\n      checkStatus(cc, true, \"badSchema2\");\n      checkStatus(cc, true, \"badConfig1\");\n      checkStatus(cc, true, \"badConfig2\");\n\n      // Are the formerly bad cores now searchable? Testing one of each should do.\n      checkSearch(core1);\n      checkSearch(bc1);\n      checkSearch(bs1);\n\n      core1.close();\n      bc1.close();\n      bc2.close();\n      bs1.close();\n      bs2.close();\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f52362fa746c58f10354f9454bed2b89f59c06b2","date":1409868448,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestLazyCores#testBadConfigsGenerateErrors().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestLazyCores#testBadConfigsGenerateErrors().mjava","sourceNew":"  // Test that transient cores\n  // 1> produce errors as appropriate when the config or schema files are foo'd\n  // 2> \"self heal\". That is, if the problem is corrected can the core be reloaded and used?\n  // 3> that OK cores can be searched even when some cores failed to load.\n  @Test\n  public void testBadConfigsGenerateErrors() throws Exception {\n    final CoreContainer cc = initGoodAndBad(Arrays.asList(\"core1\", \"core2\"),\n        Arrays.asList(\"badSchema1\", \"badSchema2\"),\n        Arrays.asList(\"badConfig1\", \"badConfig2\"));\n    try {\n      // first, did the two good cores load successfully?\n      checkInCores(cc, \"core1\", \"core2\");\n\n      // Did the bad cores fail to load?\n      checkNotInCores(cc, \"badSchema1\", \"badSchema2\", \"badConfig1\", \"badConfig2\");\n\n      //  Can we still search the \"good\" cores even though there were core init failures?\n      SolrCore core1 = cc.getCore(\"core1\");\n      checkSearch(core1);\n\n      // Did we get the expected message for each of the cores that failed to load? Make sure we don't run afoul of\n      // the dreaded slash/backslash difference on Windows and *nix machines.\n      testMessage(cc.getCoreInitFailures(), makePath(\"badConfig1\", \"conf\", \"solrconfig.xml\"));\n      testMessage(cc.getCoreInitFailures(), makePath(\"badConfig2\", \"conf\", \"solrconfig.xml\"));\n      testMessage(cc.getCoreInitFailures(), makePath(\"badSchema1\", \"conf\", \"schema.xml\"));\n      testMessage(cc.getCoreInitFailures(), makePath(\"badSchema2\", \"conf\", \"schema.xml\"));\n\n      // Status should report that there are failure messages for the bad cores and none for the good cores.\n      checkStatus(cc, true, \"core1\");\n      checkStatus(cc, true, \"core2\");\n      checkStatus(cc, false, \"badSchema1\");\n      checkStatus(cc, false, \"badSchema2\");\n      checkStatus(cc, false, \"badConfig1\");\n      checkStatus(cc, false, \"badConfig2\");\n\n      // Copy good config and schema files in and see if you can then load them (they are transient after all)\n      copyGoodConf(\"badConfig1\", \"solrconfig-minimal.xml\", \"solrconfig.xml\");\n      copyGoodConf(\"badConfig2\", \"solrconfig-minimal.xml\", \"solrconfig.xml\");\n      copyGoodConf(\"badSchema1\", \"schema-tiny.xml\", \"schema.xml\");\n      copyGoodConf(\"badSchema2\", \"schema-tiny.xml\", \"schema.xml\");\n\n      // This should force a reload of the cores.\n      SolrCore bc1 = cc.getCore(\"badConfig1\");\n      SolrCore bc2 = cc.getCore(\"badConfig2\");\n      SolrCore bs1 = cc.getCore(\"badSchema1\");\n      SolrCore bs2 = cc.getCore(\"badSchema2\");\n\n      // all the cores should be found in the list now.\n      checkInCores(cc, \"core1\", \"core2\", \"badSchema1\", \"badSchema2\", \"badConfig1\", \"badConfig2\");\n\n      // Did we clear out the errors by putting good files in place? And the cores that never were bad should be OK too.\n      checkStatus(cc, true, \"core1\");\n      checkStatus(cc, true, \"core2\");\n      checkStatus(cc, true, \"badSchema1\");\n      checkStatus(cc, true, \"badSchema2\");\n      checkStatus(cc, true, \"badConfig1\");\n      checkStatus(cc, true, \"badConfig2\");\n\n      // Are the formerly bad cores now searchable? Testing one of each should do.\n      checkSearch(core1);\n      checkSearch(bc1);\n      checkSearch(bs1);\n\n      core1.close();\n      bc1.close();\n      bc2.close();\n      bs1.close();\n      bs2.close();\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","sourceOld":"  // Test that transient cores\n  // 1> produce errors as appropriate when the config or schema files are foo'd\n  // 2> \"self heal\". That is, if the problem is corrected can the core be reloaded and used?\n  // 3> that OK cores can be searched even when some cores failed to load.\n  @Test\n  public void testBadConfigsGenerateErrors() throws Exception {\n    final CoreContainer cc = initGoodAndBad(Arrays.asList(\"core1\", \"core2\"),\n        Arrays.asList(\"badSchema1\", \"badSchema2\"),\n        Arrays.asList(\"badConfig1\", \"badConfig2\"));\n    try {\n      // first, did the two good cores load successfully?\n      checkInCores(cc, \"core1\", \"core2\");\n\n      // Did the bad cores fail to load?\n      checkNotInCores(cc, \"badSchema1\", \"badSchema2\", \"badConfig1\", \"badConfig2\");\n\n      //  Can we still search the \"good\" cores even though there were core init failures?\n      SolrCore core1 = cc.getCore(\"core1\");\n      checkSearch(core1);\n\n      // Did we get the expected message for each of the cores that failed to load? Make sure we don't run afoul of\n      // the dreaded slash/backslash difference on Windows and *nix machines.\n      testMessage(cc.getCoreInitFailures(),\n          \"badConfig1\" + File.separator + \"solrconfig.xml\");\n      testMessage(cc.getCoreInitFailures(),\n          \"badConfig2\" + File.separator + \"solrconfig.xml\");\n      testMessage(cc.getCoreInitFailures(),\n          \"badSchema1\" + File.separator + \"schema.xml\");\n      testMessage(cc.getCoreInitFailures(),\n          \"badSchema2\" + File.separator + \"schema.xml\");\n\n      // Status should report that there are failure messages for the bad cores and none for the good cores.\n      checkStatus(cc, true, \"core1\");\n      checkStatus(cc, true, \"core2\");\n      checkStatus(cc, false, \"badSchema1\");\n      checkStatus(cc, false, \"badSchema2\");\n      checkStatus(cc, false, \"badConfig1\");\n      checkStatus(cc, false, \"badConfig2\");\n\n      // Copy good config and schema files in and see if you can then load them (they are transient after all)\n      copyGoodConf(\"badConfig1\", \"solrconfig-minimal.xml\", \"solrconfig.xml\");\n      copyGoodConf(\"badConfig2\", \"solrconfig-minimal.xml\", \"solrconfig.xml\");\n      copyGoodConf(\"badSchema1\", \"schema-tiny.xml\", \"schema.xml\");\n      copyGoodConf(\"badSchema2\", \"schema-tiny.xml\", \"schema.xml\");\n\n      // This should force a reload of the cores.\n      SolrCore bc1 = cc.getCore(\"badConfig1\");\n      SolrCore bc2 = cc.getCore(\"badConfig2\");\n      SolrCore bs1 = cc.getCore(\"badSchema1\");\n      SolrCore bs2 = cc.getCore(\"badSchema2\");\n\n      // all the cores should be found in the list now.\n      checkInCores(cc, \"core1\", \"core2\", \"badSchema1\", \"badSchema2\", \"badConfig1\", \"badConfig2\");\n\n      // Did we clear out the errors by putting good files in place? And the cores that never were bad should be OK too.\n      checkStatus(cc, true, \"core1\");\n      checkStatus(cc, true, \"core2\");\n      checkStatus(cc, true, \"badSchema1\");\n      checkStatus(cc, true, \"badSchema2\");\n      checkStatus(cc, true, \"badConfig1\");\n      checkStatus(cc, true, \"badConfig2\");\n\n      // Are the formerly bad cores now searchable? Testing one of each should do.\n      checkSearch(core1);\n      checkSearch(bc1);\n      checkSearch(bs1);\n\n      core1.close();\n      bc1.close();\n      bc2.close();\n      bs1.close();\n      bs2.close();\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","bugFix":["bb1f22cfa77230b5f05b7784feae5367f6bbb488","83fbfcaab6a6cd5daf32752c0c35f0e0c15380e0"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9435d55e3ea95c5d94406d3affc36f9505b6a736","date":1491251232,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestLazyCores#testBadConfigsGenerateErrors().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestLazyCores#testBadConfigsGenerateErrors().mjava","sourceNew":"  // Test that transient cores\n  // 1> produce errors as appropriate when the config or schema files are foo'd\n  // 2> \"self heal\". That is, if the problem is corrected can the core be reloaded and used?\n  // 3> that OK cores can be searched even when some cores failed to load.\n  // 4> that having no solr.xml entry for transient chache handler correctly uses the default.\n  @Test\n  public void testBadConfigsGenerateErrors() throws Exception {\n    final CoreContainer cc = initGoodAndBad(Arrays.asList(\"core1\", \"core2\"),\n        Arrays.asList(\"badSchema1\", \"badSchema2\"),\n        Arrays.asList(\"badConfig1\", \"badConfig2\"));\n    \n    \n    try {\n      // first, did the two good cores load successfully?\n      checkInCores(cc, \"core1\", \"core2\");\n\n      // Did the bad cores fail to load?\n      checkNotInCores(cc, \"badSchema1\", \"badSchema2\", \"badConfig1\", \"badConfig2\");\n\n      //  Can we still search the \"good\" cores even though there were core init failures?\n      SolrCore core1 = cc.getCore(\"core1\");\n      checkSearch(core1);\n\n      // Did we get the expected message for each of the cores that failed to load? Make sure we don't run afoul of\n      // the dreaded slash/backslash difference on Windows and *nix machines.\n      testMessage(cc.getCoreInitFailures(), makePath(\"badConfig1\", \"conf\", \"solrconfig.xml\"));\n      testMessage(cc.getCoreInitFailures(), makePath(\"badConfig2\", \"conf\", \"solrconfig.xml\"));\n      testMessage(cc.getCoreInitFailures(), makePath(\"badSchema1\", \"conf\", \"schema.xml\"));\n      testMessage(cc.getCoreInitFailures(), makePath(\"badSchema2\", \"conf\", \"schema.xml\"));\n\n      // Status should report that there are failure messages for the bad cores and none for the good cores.\n      checkStatus(cc, true, \"core1\");\n      checkStatus(cc, true, \"core2\");\n      checkStatus(cc, false, \"badSchema1\");\n      checkStatus(cc, false, \"badSchema2\");\n      checkStatus(cc, false, \"badConfig1\");\n      checkStatus(cc, false, \"badConfig2\");\n\n      // Copy good config and schema files in and see if you can then load them (they are transient after all)\n      copyGoodConf(\"badConfig1\", \"solrconfig-minimal.xml\", \"solrconfig.xml\");\n      copyGoodConf(\"badConfig2\", \"solrconfig-minimal.xml\", \"solrconfig.xml\");\n      copyGoodConf(\"badSchema1\", \"schema-tiny.xml\", \"schema.xml\");\n      copyGoodConf(\"badSchema2\", \"schema-tiny.xml\", \"schema.xml\");\n\n      \n      // This should force a reload of the cores.\n      SolrCore bc1 = cc.getCore(\"badConfig1\");;\n      SolrCore bc2 = cc.getCore(\"badConfig2\");\n      SolrCore bs1 = cc.getCore(\"badSchema1\");\n      SolrCore bs2 = cc.getCore(\"badSchema2\");\n\n      // all the cores should be found in the list now.\n      checkInCores(cc, \"core1\", \"core2\", \"badSchema1\", \"badSchema2\", \"badConfig1\", \"badConfig2\");\n\n      // Did we clear out the errors by putting good files in place? And the cores that never were bad should be OK too.\n      checkStatus(cc, true, \"core1\");\n      checkStatus(cc, true, \"core2\");\n      checkStatus(cc, true, \"badSchema1\");\n      checkStatus(cc, true, \"badSchema2\");\n      checkStatus(cc, true, \"badConfig1\");\n      checkStatus(cc, true, \"badConfig2\");\n\n      // Are the formerly bad cores now searchable? Testing one of each should do.\n      checkSearch(core1);\n      checkSearch(bc1);\n      checkSearch(bs1);\n\n      core1.close();\n      bc1.close();\n      bc2.close();\n      bs1.close();\n      bs2.close();\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","sourceOld":"  // Test that transient cores\n  // 1> produce errors as appropriate when the config or schema files are foo'd\n  // 2> \"self heal\". That is, if the problem is corrected can the core be reloaded and used?\n  // 3> that OK cores can be searched even when some cores failed to load.\n  @Test\n  public void testBadConfigsGenerateErrors() throws Exception {\n    final CoreContainer cc = initGoodAndBad(Arrays.asList(\"core1\", \"core2\"),\n        Arrays.asList(\"badSchema1\", \"badSchema2\"),\n        Arrays.asList(\"badConfig1\", \"badConfig2\"));\n    try {\n      // first, did the two good cores load successfully?\n      checkInCores(cc, \"core1\", \"core2\");\n\n      // Did the bad cores fail to load?\n      checkNotInCores(cc, \"badSchema1\", \"badSchema2\", \"badConfig1\", \"badConfig2\");\n\n      //  Can we still search the \"good\" cores even though there were core init failures?\n      SolrCore core1 = cc.getCore(\"core1\");\n      checkSearch(core1);\n\n      // Did we get the expected message for each of the cores that failed to load? Make sure we don't run afoul of\n      // the dreaded slash/backslash difference on Windows and *nix machines.\n      testMessage(cc.getCoreInitFailures(), makePath(\"badConfig1\", \"conf\", \"solrconfig.xml\"));\n      testMessage(cc.getCoreInitFailures(), makePath(\"badConfig2\", \"conf\", \"solrconfig.xml\"));\n      testMessage(cc.getCoreInitFailures(), makePath(\"badSchema1\", \"conf\", \"schema.xml\"));\n      testMessage(cc.getCoreInitFailures(), makePath(\"badSchema2\", \"conf\", \"schema.xml\"));\n\n      // Status should report that there are failure messages for the bad cores and none for the good cores.\n      checkStatus(cc, true, \"core1\");\n      checkStatus(cc, true, \"core2\");\n      checkStatus(cc, false, \"badSchema1\");\n      checkStatus(cc, false, \"badSchema2\");\n      checkStatus(cc, false, \"badConfig1\");\n      checkStatus(cc, false, \"badConfig2\");\n\n      // Copy good config and schema files in and see if you can then load them (they are transient after all)\n      copyGoodConf(\"badConfig1\", \"solrconfig-minimal.xml\", \"solrconfig.xml\");\n      copyGoodConf(\"badConfig2\", \"solrconfig-minimal.xml\", \"solrconfig.xml\");\n      copyGoodConf(\"badSchema1\", \"schema-tiny.xml\", \"schema.xml\");\n      copyGoodConf(\"badSchema2\", \"schema-tiny.xml\", \"schema.xml\");\n\n      // This should force a reload of the cores.\n      SolrCore bc1 = cc.getCore(\"badConfig1\");\n      SolrCore bc2 = cc.getCore(\"badConfig2\");\n      SolrCore bs1 = cc.getCore(\"badSchema1\");\n      SolrCore bs2 = cc.getCore(\"badSchema2\");\n\n      // all the cores should be found in the list now.\n      checkInCores(cc, \"core1\", \"core2\", \"badSchema1\", \"badSchema2\", \"badConfig1\", \"badConfig2\");\n\n      // Did we clear out the errors by putting good files in place? And the cores that never were bad should be OK too.\n      checkStatus(cc, true, \"core1\");\n      checkStatus(cc, true, \"core2\");\n      checkStatus(cc, true, \"badSchema1\");\n      checkStatus(cc, true, \"badSchema2\");\n      checkStatus(cc, true, \"badConfig1\");\n      checkStatus(cc, true, \"badConfig2\");\n\n      // Are the formerly bad cores now searchable? Testing one of each should do.\n      checkSearch(core1);\n      checkSearch(bc1);\n      checkSearch(bs1);\n\n      core1.close();\n      bc1.close();\n      bc2.close();\n      bs1.close();\n      bs2.close();\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b6a4b585aed7660a589375f6a09b90efd29c961","date":1491296430,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestLazyCores#testBadConfigsGenerateErrors().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestLazyCores#testBadConfigsGenerateErrors().mjava","sourceNew":"  // Test that transient cores\n  // 1> produce errors as appropriate when the config or schema files are foo'd\n  // 2> \"self heal\". That is, if the problem is corrected can the core be reloaded and used?\n  // 3> that OK cores can be searched even when some cores failed to load.\n  // 4> that having no solr.xml entry for transient chache handler correctly uses the default.\n  @Test\n  public void testBadConfigsGenerateErrors() throws Exception {\n    final CoreContainer cc = initGoodAndBad(Arrays.asList(\"core1\", \"core2\"),\n        Arrays.asList(\"badSchema1\", \"badSchema2\"),\n        Arrays.asList(\"badConfig1\", \"badConfig2\"));\n    \n    \n    try {\n      // first, did the two good cores load successfully?\n      checkInCores(cc, \"core1\", \"core2\");\n\n      // Did the bad cores fail to load?\n      checkNotInCores(cc, \"badSchema1\", \"badSchema2\", \"badConfig1\", \"badConfig2\");\n\n      //  Can we still search the \"good\" cores even though there were core init failures?\n      SolrCore core1 = cc.getCore(\"core1\");\n      checkSearch(core1);\n\n      // Did we get the expected message for each of the cores that failed to load? Make sure we don't run afoul of\n      // the dreaded slash/backslash difference on Windows and *nix machines.\n      testMessage(cc.getCoreInitFailures(), makePath(\"badConfig1\", \"conf\", \"solrconfig.xml\"));\n      testMessage(cc.getCoreInitFailures(), makePath(\"badConfig2\", \"conf\", \"solrconfig.xml\"));\n      testMessage(cc.getCoreInitFailures(), makePath(\"badSchema1\", \"conf\", \"schema.xml\"));\n      testMessage(cc.getCoreInitFailures(), makePath(\"badSchema2\", \"conf\", \"schema.xml\"));\n\n      // Status should report that there are failure messages for the bad cores and none for the good cores.\n      checkStatus(cc, true, \"core1\");\n      checkStatus(cc, true, \"core2\");\n      checkStatus(cc, false, \"badSchema1\");\n      checkStatus(cc, false, \"badSchema2\");\n      checkStatus(cc, false, \"badConfig1\");\n      checkStatus(cc, false, \"badConfig2\");\n\n      // Copy good config and schema files in and see if you can then load them (they are transient after all)\n      copyGoodConf(\"badConfig1\", \"solrconfig-minimal.xml\", \"solrconfig.xml\");\n      copyGoodConf(\"badConfig2\", \"solrconfig-minimal.xml\", \"solrconfig.xml\");\n      copyGoodConf(\"badSchema1\", \"schema-tiny.xml\", \"schema.xml\");\n      copyGoodConf(\"badSchema2\", \"schema-tiny.xml\", \"schema.xml\");\n\n      \n      // This should force a reload of the cores.\n      SolrCore bc1 = cc.getCore(\"badConfig1\");;\n      SolrCore bc2 = cc.getCore(\"badConfig2\");\n      SolrCore bs1 = cc.getCore(\"badSchema1\");\n      SolrCore bs2 = cc.getCore(\"badSchema2\");\n\n      // all the cores should be found in the list now.\n      checkInCores(cc, \"core1\", \"core2\", \"badSchema1\", \"badSchema2\", \"badConfig1\", \"badConfig2\");\n\n      // Did we clear out the errors by putting good files in place? And the cores that never were bad should be OK too.\n      checkStatus(cc, true, \"core1\");\n      checkStatus(cc, true, \"core2\");\n      checkStatus(cc, true, \"badSchema1\");\n      checkStatus(cc, true, \"badSchema2\");\n      checkStatus(cc, true, \"badConfig1\");\n      checkStatus(cc, true, \"badConfig2\");\n\n      // Are the formerly bad cores now searchable? Testing one of each should do.\n      checkSearch(core1);\n      checkSearch(bc1);\n      checkSearch(bs1);\n\n      core1.close();\n      bc1.close();\n      bc2.close();\n      bs1.close();\n      bs2.close();\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","sourceOld":"  // Test that transient cores\n  // 1> produce errors as appropriate when the config or schema files are foo'd\n  // 2> \"self heal\". That is, if the problem is corrected can the core be reloaded and used?\n  // 3> that OK cores can be searched even when some cores failed to load.\n  @Test\n  public void testBadConfigsGenerateErrors() throws Exception {\n    final CoreContainer cc = initGoodAndBad(Arrays.asList(\"core1\", \"core2\"),\n        Arrays.asList(\"badSchema1\", \"badSchema2\"),\n        Arrays.asList(\"badConfig1\", \"badConfig2\"));\n    try {\n      // first, did the two good cores load successfully?\n      checkInCores(cc, \"core1\", \"core2\");\n\n      // Did the bad cores fail to load?\n      checkNotInCores(cc, \"badSchema1\", \"badSchema2\", \"badConfig1\", \"badConfig2\");\n\n      //  Can we still search the \"good\" cores even though there were core init failures?\n      SolrCore core1 = cc.getCore(\"core1\");\n      checkSearch(core1);\n\n      // Did we get the expected message for each of the cores that failed to load? Make sure we don't run afoul of\n      // the dreaded slash/backslash difference on Windows and *nix machines.\n      testMessage(cc.getCoreInitFailures(), makePath(\"badConfig1\", \"conf\", \"solrconfig.xml\"));\n      testMessage(cc.getCoreInitFailures(), makePath(\"badConfig2\", \"conf\", \"solrconfig.xml\"));\n      testMessage(cc.getCoreInitFailures(), makePath(\"badSchema1\", \"conf\", \"schema.xml\"));\n      testMessage(cc.getCoreInitFailures(), makePath(\"badSchema2\", \"conf\", \"schema.xml\"));\n\n      // Status should report that there are failure messages for the bad cores and none for the good cores.\n      checkStatus(cc, true, \"core1\");\n      checkStatus(cc, true, \"core2\");\n      checkStatus(cc, false, \"badSchema1\");\n      checkStatus(cc, false, \"badSchema2\");\n      checkStatus(cc, false, \"badConfig1\");\n      checkStatus(cc, false, \"badConfig2\");\n\n      // Copy good config and schema files in and see if you can then load them (they are transient after all)\n      copyGoodConf(\"badConfig1\", \"solrconfig-minimal.xml\", \"solrconfig.xml\");\n      copyGoodConf(\"badConfig2\", \"solrconfig-minimal.xml\", \"solrconfig.xml\");\n      copyGoodConf(\"badSchema1\", \"schema-tiny.xml\", \"schema.xml\");\n      copyGoodConf(\"badSchema2\", \"schema-tiny.xml\", \"schema.xml\");\n\n      // This should force a reload of the cores.\n      SolrCore bc1 = cc.getCore(\"badConfig1\");\n      SolrCore bc2 = cc.getCore(\"badConfig2\");\n      SolrCore bs1 = cc.getCore(\"badSchema1\");\n      SolrCore bs2 = cc.getCore(\"badSchema2\");\n\n      // all the cores should be found in the list now.\n      checkInCores(cc, \"core1\", \"core2\", \"badSchema1\", \"badSchema2\", \"badConfig1\", \"badConfig2\");\n\n      // Did we clear out the errors by putting good files in place? And the cores that never were bad should be OK too.\n      checkStatus(cc, true, \"core1\");\n      checkStatus(cc, true, \"core2\");\n      checkStatus(cc, true, \"badSchema1\");\n      checkStatus(cc, true, \"badSchema2\");\n      checkStatus(cc, true, \"badConfig1\");\n      checkStatus(cc, true, \"badConfig2\");\n\n      // Are the formerly bad cores now searchable? Testing one of each should do.\n      checkSearch(core1);\n      checkSearch(bc1);\n      checkSearch(bs1);\n\n      core1.close();\n      bc1.close();\n      bc2.close();\n      bs1.close();\n      bs2.close();\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"729cb470f975115d4c60517b2cb7c42e37a7a2e1","date":1492041760,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestLazyCores#testBadConfigsGenerateErrors().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestLazyCores#testBadConfigsGenerateErrors().mjava","sourceNew":"  // Test that transient cores\n  // 1> produce errors as appropriate when the config or schema files are foo'd\n  // 2> \"self heal\". That is, if the problem is corrected can the core be reloaded and used?\n  // 3> that OK cores can be searched even when some cores failed to load.\n  // 4> that having no solr.xml entry for transient chache handler correctly uses the default.\n  @Test\n  public void testBadConfigsGenerateErrors() throws Exception {\n    final CoreContainer cc = initGoodAndBad(Arrays.asList(\"core1\", \"core2\"),\n        Arrays.asList(\"badSchema1\", \"badSchema2\"),\n        Arrays.asList(\"badConfig1\", \"badConfig2\"));\n    \n    \n    try {\n      // first, did the two good cores load successfully?\n      checkInCores(cc, \"core1\", \"core2\");\n\n      // Did the bad cores fail to load?\n      checkNotInCores(cc, \"badSchema1\", \"badSchema2\", \"badConfig1\", \"badConfig2\");\n\n      //  Can we still search the \"good\" cores even though there were core init failures?\n      SolrCore core1 = cc.getCore(\"core1\");\n      checkSearch(core1);\n\n      // Did we get the expected message for each of the cores that failed to load? Make sure we don't run afoul of\n      // the dreaded slash/backslash difference on Windows and *nix machines.\n      testMessage(cc.getCoreInitFailures(), makePath(\"badConfig1\", \"conf\", \"solrconfig.xml\"));\n      testMessage(cc.getCoreInitFailures(), makePath(\"badConfig2\", \"conf\", \"solrconfig.xml\"));\n      testMessage(cc.getCoreInitFailures(), makePath(\"badSchema1\", \"conf\", \"schema.xml\"));\n      testMessage(cc.getCoreInitFailures(), makePath(\"badSchema2\", \"conf\", \"schema.xml\"));\n\n      // Status should report that there are failure messages for the bad cores and none for the good cores.\n      checkStatus(cc, true, \"core1\");\n      checkStatus(cc, true, \"core2\");\n      checkStatus(cc, false, \"badSchema1\");\n      checkStatus(cc, false, \"badSchema2\");\n      checkStatus(cc, false, \"badConfig1\");\n      checkStatus(cc, false, \"badConfig2\");\n\n      // Copy good config and schema files in and see if you can then load them (they are transient after all)\n      copyGoodConf(\"badConfig1\", \"solrconfig-minimal.xml\", \"solrconfig.xml\");\n      copyGoodConf(\"badConfig2\", \"solrconfig-minimal.xml\", \"solrconfig.xml\");\n      copyGoodConf(\"badSchema1\", \"schema-tiny.xml\", \"schema.xml\");\n      copyGoodConf(\"badSchema2\", \"schema-tiny.xml\", \"schema.xml\");\n\n      \n      // Reload the cores and insure that\n      // 1> they pick up the new configs\n      // 2> they don't fail again b/c they still have entries in loadFailure in core container.\n      cc.reload(\"badConfig1\");\n      cc.reload(\"badConfig2\");\n      cc.reload(\"badSchema1\");\n      cc.reload(\"badSchema2\");\n      SolrCore bc1 = cc.getCore(\"badConfig1\");;\n      SolrCore bc2 = cc.getCore(\"badConfig2\");\n      SolrCore bs1 = cc.getCore(\"badSchema1\");\n      SolrCore bs2 = cc.getCore(\"badSchema2\");\n\n      // all the cores should be found in the list now.\n      checkInCores(cc, \"core1\", \"core2\", \"badSchema1\", \"badSchema2\", \"badConfig1\", \"badConfig2\");\n\n      // Did we clear out the errors by putting good files in place? And the cores that never were bad should be OK too.\n      checkStatus(cc, true, \"core1\");\n      checkStatus(cc, true, \"core2\");\n      checkStatus(cc, true, \"badSchema1\");\n      checkStatus(cc, true, \"badSchema2\");\n      checkStatus(cc, true, \"badConfig1\");\n      checkStatus(cc, true, \"badConfig2\");\n\n      // Are the formerly bad cores now searchable? Testing one of each should do.\n      checkSearch(core1);\n      checkSearch(bc1);\n      checkSearch(bs1);\n\n      core1.close();\n      bc1.close();\n      bc2.close();\n      bs1.close();\n      bs2.close();\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","sourceOld":"  // Test that transient cores\n  // 1> produce errors as appropriate when the config or schema files are foo'd\n  // 2> \"self heal\". That is, if the problem is corrected can the core be reloaded and used?\n  // 3> that OK cores can be searched even when some cores failed to load.\n  // 4> that having no solr.xml entry for transient chache handler correctly uses the default.\n  @Test\n  public void testBadConfigsGenerateErrors() throws Exception {\n    final CoreContainer cc = initGoodAndBad(Arrays.asList(\"core1\", \"core2\"),\n        Arrays.asList(\"badSchema1\", \"badSchema2\"),\n        Arrays.asList(\"badConfig1\", \"badConfig2\"));\n    \n    \n    try {\n      // first, did the two good cores load successfully?\n      checkInCores(cc, \"core1\", \"core2\");\n\n      // Did the bad cores fail to load?\n      checkNotInCores(cc, \"badSchema1\", \"badSchema2\", \"badConfig1\", \"badConfig2\");\n\n      //  Can we still search the \"good\" cores even though there were core init failures?\n      SolrCore core1 = cc.getCore(\"core1\");\n      checkSearch(core1);\n\n      // Did we get the expected message for each of the cores that failed to load? Make sure we don't run afoul of\n      // the dreaded slash/backslash difference on Windows and *nix machines.\n      testMessage(cc.getCoreInitFailures(), makePath(\"badConfig1\", \"conf\", \"solrconfig.xml\"));\n      testMessage(cc.getCoreInitFailures(), makePath(\"badConfig2\", \"conf\", \"solrconfig.xml\"));\n      testMessage(cc.getCoreInitFailures(), makePath(\"badSchema1\", \"conf\", \"schema.xml\"));\n      testMessage(cc.getCoreInitFailures(), makePath(\"badSchema2\", \"conf\", \"schema.xml\"));\n\n      // Status should report that there are failure messages for the bad cores and none for the good cores.\n      checkStatus(cc, true, \"core1\");\n      checkStatus(cc, true, \"core2\");\n      checkStatus(cc, false, \"badSchema1\");\n      checkStatus(cc, false, \"badSchema2\");\n      checkStatus(cc, false, \"badConfig1\");\n      checkStatus(cc, false, \"badConfig2\");\n\n      // Copy good config and schema files in and see if you can then load them (they are transient after all)\n      copyGoodConf(\"badConfig1\", \"solrconfig-minimal.xml\", \"solrconfig.xml\");\n      copyGoodConf(\"badConfig2\", \"solrconfig-minimal.xml\", \"solrconfig.xml\");\n      copyGoodConf(\"badSchema1\", \"schema-tiny.xml\", \"schema.xml\");\n      copyGoodConf(\"badSchema2\", \"schema-tiny.xml\", \"schema.xml\");\n\n      \n      // This should force a reload of the cores.\n      SolrCore bc1 = cc.getCore(\"badConfig1\");;\n      SolrCore bc2 = cc.getCore(\"badConfig2\");\n      SolrCore bs1 = cc.getCore(\"badSchema1\");\n      SolrCore bs2 = cc.getCore(\"badSchema2\");\n\n      // all the cores should be found in the list now.\n      checkInCores(cc, \"core1\", \"core2\", \"badSchema1\", \"badSchema2\", \"badConfig1\", \"badConfig2\");\n\n      // Did we clear out the errors by putting good files in place? And the cores that never were bad should be OK too.\n      checkStatus(cc, true, \"core1\");\n      checkStatus(cc, true, \"core2\");\n      checkStatus(cc, true, \"badSchema1\");\n      checkStatus(cc, true, \"badSchema2\");\n      checkStatus(cc, true, \"badConfig1\");\n      checkStatus(cc, true, \"badConfig2\");\n\n      // Are the formerly bad cores now searchable? Testing one of each should do.\n      checkSearch(core1);\n      checkSearch(bc1);\n      checkSearch(bs1);\n\n      core1.close();\n      bc1.close();\n      bc2.close();\n      bs1.close();\n      bs2.close();\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestLazyCores#testBadConfigsGenerateErrors().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestLazyCores#testBadConfigsGenerateErrors().mjava","sourceNew":"  // Test that transient cores\n  // 1> produce errors as appropriate when the config or schema files are foo'd\n  // 2> \"self heal\". That is, if the problem is corrected can the core be reloaded and used?\n  // 3> that OK cores can be searched even when some cores failed to load.\n  // 4> that having no solr.xml entry for transient chache handler correctly uses the default.\n  @Test\n  public void testBadConfigsGenerateErrors() throws Exception {\n    final CoreContainer cc = initGoodAndBad(Arrays.asList(\"core1\", \"core2\"),\n        Arrays.asList(\"badSchema1\", \"badSchema2\"),\n        Arrays.asList(\"badConfig1\", \"badConfig2\"));\n    \n    \n    try {\n      // first, did the two good cores load successfully?\n      checkInCores(cc, \"core1\", \"core2\");\n\n      // Did the bad cores fail to load?\n      checkNotInCores(cc, \"badSchema1\", \"badSchema2\", \"badConfig1\", \"badConfig2\");\n\n      //  Can we still search the \"good\" cores even though there were core init failures?\n      SolrCore core1 = cc.getCore(\"core1\");\n      checkSearch(core1);\n\n      // Did we get the expected message for each of the cores that failed to load? Make sure we don't run afoul of\n      // the dreaded slash/backslash difference on Windows and *nix machines.\n      testMessage(cc.getCoreInitFailures(), makePath(\"badConfig1\", \"conf\", \"solrconfig.xml\"));\n      testMessage(cc.getCoreInitFailures(), makePath(\"badConfig2\", \"conf\", \"solrconfig.xml\"));\n      testMessage(cc.getCoreInitFailures(), makePath(\"badSchema1\", \"conf\", \"schema.xml\"));\n      testMessage(cc.getCoreInitFailures(), makePath(\"badSchema2\", \"conf\", \"schema.xml\"));\n\n      // Status should report that there are failure messages for the bad cores and none for the good cores.\n      checkStatus(cc, true, \"core1\");\n      checkStatus(cc, true, \"core2\");\n      checkStatus(cc, false, \"badSchema1\");\n      checkStatus(cc, false, \"badSchema2\");\n      checkStatus(cc, false, \"badConfig1\");\n      checkStatus(cc, false, \"badConfig2\");\n\n      // Copy good config and schema files in and see if you can then load them (they are transient after all)\n      copyGoodConf(\"badConfig1\", \"solrconfig-minimal.xml\", \"solrconfig.xml\");\n      copyGoodConf(\"badConfig2\", \"solrconfig-minimal.xml\", \"solrconfig.xml\");\n      copyGoodConf(\"badSchema1\", \"schema-tiny.xml\", \"schema.xml\");\n      copyGoodConf(\"badSchema2\", \"schema-tiny.xml\", \"schema.xml\");\n\n      \n      // Reload the cores and insure that\n      // 1> they pick up the new configs\n      // 2> they don't fail again b/c they still have entries in loadFailure in core container.\n      cc.reload(\"badConfig1\");\n      cc.reload(\"badConfig2\");\n      cc.reload(\"badSchema1\");\n      cc.reload(\"badSchema2\");\n      SolrCore bc1 = cc.getCore(\"badConfig1\");;\n      SolrCore bc2 = cc.getCore(\"badConfig2\");\n      SolrCore bs1 = cc.getCore(\"badSchema1\");\n      SolrCore bs2 = cc.getCore(\"badSchema2\");\n\n      // all the cores should be found in the list now.\n      checkInCores(cc, \"core1\", \"core2\", \"badSchema1\", \"badSchema2\", \"badConfig1\", \"badConfig2\");\n\n      // Did we clear out the errors by putting good files in place? And the cores that never were bad should be OK too.\n      checkStatus(cc, true, \"core1\");\n      checkStatus(cc, true, \"core2\");\n      checkStatus(cc, true, \"badSchema1\");\n      checkStatus(cc, true, \"badSchema2\");\n      checkStatus(cc, true, \"badConfig1\");\n      checkStatus(cc, true, \"badConfig2\");\n\n      // Are the formerly bad cores now searchable? Testing one of each should do.\n      checkSearch(core1);\n      checkSearch(bc1);\n      checkSearch(bs1);\n\n      core1.close();\n      bc1.close();\n      bc2.close();\n      bs1.close();\n      bs2.close();\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","sourceOld":"  // Test that transient cores\n  // 1> produce errors as appropriate when the config or schema files are foo'd\n  // 2> \"self heal\". That is, if the problem is corrected can the core be reloaded and used?\n  // 3> that OK cores can be searched even when some cores failed to load.\n  // 4> that having no solr.xml entry for transient chache handler correctly uses the default.\n  @Test\n  public void testBadConfigsGenerateErrors() throws Exception {\n    final CoreContainer cc = initGoodAndBad(Arrays.asList(\"core1\", \"core2\"),\n        Arrays.asList(\"badSchema1\", \"badSchema2\"),\n        Arrays.asList(\"badConfig1\", \"badConfig2\"));\n    \n    \n    try {\n      // first, did the two good cores load successfully?\n      checkInCores(cc, \"core1\", \"core2\");\n\n      // Did the bad cores fail to load?\n      checkNotInCores(cc, \"badSchema1\", \"badSchema2\", \"badConfig1\", \"badConfig2\");\n\n      //  Can we still search the \"good\" cores even though there were core init failures?\n      SolrCore core1 = cc.getCore(\"core1\");\n      checkSearch(core1);\n\n      // Did we get the expected message for each of the cores that failed to load? Make sure we don't run afoul of\n      // the dreaded slash/backslash difference on Windows and *nix machines.\n      testMessage(cc.getCoreInitFailures(), makePath(\"badConfig1\", \"conf\", \"solrconfig.xml\"));\n      testMessage(cc.getCoreInitFailures(), makePath(\"badConfig2\", \"conf\", \"solrconfig.xml\"));\n      testMessage(cc.getCoreInitFailures(), makePath(\"badSchema1\", \"conf\", \"schema.xml\"));\n      testMessage(cc.getCoreInitFailures(), makePath(\"badSchema2\", \"conf\", \"schema.xml\"));\n\n      // Status should report that there are failure messages for the bad cores and none for the good cores.\n      checkStatus(cc, true, \"core1\");\n      checkStatus(cc, true, \"core2\");\n      checkStatus(cc, false, \"badSchema1\");\n      checkStatus(cc, false, \"badSchema2\");\n      checkStatus(cc, false, \"badConfig1\");\n      checkStatus(cc, false, \"badConfig2\");\n\n      // Copy good config and schema files in and see if you can then load them (they are transient after all)\n      copyGoodConf(\"badConfig1\", \"solrconfig-minimal.xml\", \"solrconfig.xml\");\n      copyGoodConf(\"badConfig2\", \"solrconfig-minimal.xml\", \"solrconfig.xml\");\n      copyGoodConf(\"badSchema1\", \"schema-tiny.xml\", \"schema.xml\");\n      copyGoodConf(\"badSchema2\", \"schema-tiny.xml\", \"schema.xml\");\n\n      \n      // This should force a reload of the cores.\n      SolrCore bc1 = cc.getCore(\"badConfig1\");;\n      SolrCore bc2 = cc.getCore(\"badConfig2\");\n      SolrCore bs1 = cc.getCore(\"badSchema1\");\n      SolrCore bs2 = cc.getCore(\"badSchema2\");\n\n      // all the cores should be found in the list now.\n      checkInCores(cc, \"core1\", \"core2\", \"badSchema1\", \"badSchema2\", \"badConfig1\", \"badConfig2\");\n\n      // Did we clear out the errors by putting good files in place? And the cores that never were bad should be OK too.\n      checkStatus(cc, true, \"core1\");\n      checkStatus(cc, true, \"core2\");\n      checkStatus(cc, true, \"badSchema1\");\n      checkStatus(cc, true, \"badSchema2\");\n      checkStatus(cc, true, \"badConfig1\");\n      checkStatus(cc, true, \"badConfig2\");\n\n      // Are the formerly bad cores now searchable? Testing one of each should do.\n      checkSearch(core1);\n      checkSearch(bc1);\n      checkSearch(bs1);\n\n      core1.close();\n      bc1.close();\n      bc2.close();\n      bs1.close();\n      bs2.close();\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7871f9c286dce2a9370bcf517a3e7d12e3bd9602","date":1498708934,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestLazyCores#testBadConfigsGenerateErrors().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestLazyCores#testBadConfigsGenerateErrors().mjava","sourceNew":"  // Test that transient cores\n  // 1> produce errors as appropriate when the config or schema files are foo'd\n  // 2> \"self heal\". That is, if the problem is corrected can the core be reloaded and used?\n  // 3> that OK cores can be searched even when some cores failed to load.\n  // 4> that having no solr.xml entry for transient chache handler correctly uses the default.\n  @Test\n  public void testBadConfigsGenerateErrors() throws Exception {\n    final CoreContainer cc = initGoodAndBad(Arrays.asList(\"core1\", \"core2\"),\n        Arrays.asList(\"badSchema1\", \"badSchema2\"),\n        Arrays.asList(\"badConfig1\", \"badConfig2\"));\n    \n    \n    try {\n      // first, did the two good cores load successfully?\n      checkInCores(cc, \"core1\", \"core2\");\n\n      // Did the bad cores fail to load?\n      checkNotInCores(cc, Collections.emptyList(), Arrays.asList(\"badSchema1\", \"badSchema2\", \"badConfig1\", \"badConfig2\"));\n\n      //  Can we still search the \"good\" cores even though there were core init failures?\n      SolrCore core1 = cc.getCore(\"core1\");\n      checkSearch(core1);\n\n      // Did we get the expected message for each of the cores that failed to load? Make sure we don't run afoul of\n      // the dreaded slash/backslash difference on Windows and *nix machines.\n      testMessage(cc.getCoreInitFailures(), makePath(\"badConfig1\", \"conf\", \"solrconfig.xml\"));\n      testMessage(cc.getCoreInitFailures(), makePath(\"badConfig2\", \"conf\", \"solrconfig.xml\"));\n      testMessage(cc.getCoreInitFailures(), makePath(\"badSchema1\", \"conf\", \"schema.xml\"));\n      testMessage(cc.getCoreInitFailures(), makePath(\"badSchema2\", \"conf\", \"schema.xml\"));\n\n      // Status should report that there are failure messages for the bad cores and none for the good cores.\n      checkStatus(cc, true, \"core1\");\n      checkStatus(cc, true, \"core2\");\n      checkStatus(cc, false, \"badSchema1\");\n      checkStatus(cc, false, \"badSchema2\");\n      checkStatus(cc, false, \"badConfig1\");\n      checkStatus(cc, false, \"badConfig2\");\n\n      // Copy good config and schema files in and see if you can then load them (they are transient after all)\n      copyGoodConf(\"badConfig1\", \"solrconfig-minimal.xml\", \"solrconfig.xml\");\n      copyGoodConf(\"badConfig2\", \"solrconfig-minimal.xml\", \"solrconfig.xml\");\n      copyGoodConf(\"badSchema1\", \"schema-tiny.xml\", \"schema.xml\");\n      copyGoodConf(\"badSchema2\", \"schema-tiny.xml\", \"schema.xml\");\n\n      \n      // Reload the cores and insure that\n      // 1> they pick up the new configs\n      // 2> they don't fail again b/c they still have entries in loadFailure in core container.\n      cc.reload(\"badConfig1\");\n      cc.reload(\"badConfig2\");\n      cc.reload(\"badSchema1\");\n      cc.reload(\"badSchema2\");\n      SolrCore bc1 = cc.getCore(\"badConfig1\");;\n      SolrCore bc2 = cc.getCore(\"badConfig2\");\n      SolrCore bs1 = cc.getCore(\"badSchema1\");\n      SolrCore bs2 = cc.getCore(\"badSchema2\");\n\n      // all the cores should be found in the list now.\n      checkInCores(cc, \"core1\", \"core2\", \"badSchema1\", \"badSchema2\", \"badConfig1\", \"badConfig2\");\n\n      // Did we clear out the errors by putting good files in place? And the cores that never were bad should be OK too.\n      checkStatus(cc, true, \"core1\");\n      checkStatus(cc, true, \"core2\");\n      checkStatus(cc, true, \"badSchema1\");\n      checkStatus(cc, true, \"badSchema2\");\n      checkStatus(cc, true, \"badConfig1\");\n      checkStatus(cc, true, \"badConfig2\");\n\n      // Are the formerly bad cores now searchable? Testing one of each should do.\n      checkSearch(core1);\n      checkSearch(bc1);\n      checkSearch(bs1);\n\n      core1.close();\n      bc1.close();\n      bc2.close();\n      bs1.close();\n      bs2.close();\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","sourceOld":"  // Test that transient cores\n  // 1> produce errors as appropriate when the config or schema files are foo'd\n  // 2> \"self heal\". That is, if the problem is corrected can the core be reloaded and used?\n  // 3> that OK cores can be searched even when some cores failed to load.\n  // 4> that having no solr.xml entry for transient chache handler correctly uses the default.\n  @Test\n  public void testBadConfigsGenerateErrors() throws Exception {\n    final CoreContainer cc = initGoodAndBad(Arrays.asList(\"core1\", \"core2\"),\n        Arrays.asList(\"badSchema1\", \"badSchema2\"),\n        Arrays.asList(\"badConfig1\", \"badConfig2\"));\n    \n    \n    try {\n      // first, did the two good cores load successfully?\n      checkInCores(cc, \"core1\", \"core2\");\n\n      // Did the bad cores fail to load?\n      checkNotInCores(cc, \"badSchema1\", \"badSchema2\", \"badConfig1\", \"badConfig2\");\n\n      //  Can we still search the \"good\" cores even though there were core init failures?\n      SolrCore core1 = cc.getCore(\"core1\");\n      checkSearch(core1);\n\n      // Did we get the expected message for each of the cores that failed to load? Make sure we don't run afoul of\n      // the dreaded slash/backslash difference on Windows and *nix machines.\n      testMessage(cc.getCoreInitFailures(), makePath(\"badConfig1\", \"conf\", \"solrconfig.xml\"));\n      testMessage(cc.getCoreInitFailures(), makePath(\"badConfig2\", \"conf\", \"solrconfig.xml\"));\n      testMessage(cc.getCoreInitFailures(), makePath(\"badSchema1\", \"conf\", \"schema.xml\"));\n      testMessage(cc.getCoreInitFailures(), makePath(\"badSchema2\", \"conf\", \"schema.xml\"));\n\n      // Status should report that there are failure messages for the bad cores and none for the good cores.\n      checkStatus(cc, true, \"core1\");\n      checkStatus(cc, true, \"core2\");\n      checkStatus(cc, false, \"badSchema1\");\n      checkStatus(cc, false, \"badSchema2\");\n      checkStatus(cc, false, \"badConfig1\");\n      checkStatus(cc, false, \"badConfig2\");\n\n      // Copy good config and schema files in and see if you can then load them (they are transient after all)\n      copyGoodConf(\"badConfig1\", \"solrconfig-minimal.xml\", \"solrconfig.xml\");\n      copyGoodConf(\"badConfig2\", \"solrconfig-minimal.xml\", \"solrconfig.xml\");\n      copyGoodConf(\"badSchema1\", \"schema-tiny.xml\", \"schema.xml\");\n      copyGoodConf(\"badSchema2\", \"schema-tiny.xml\", \"schema.xml\");\n\n      \n      // Reload the cores and insure that\n      // 1> they pick up the new configs\n      // 2> they don't fail again b/c they still have entries in loadFailure in core container.\n      cc.reload(\"badConfig1\");\n      cc.reload(\"badConfig2\");\n      cc.reload(\"badSchema1\");\n      cc.reload(\"badSchema2\");\n      SolrCore bc1 = cc.getCore(\"badConfig1\");;\n      SolrCore bc2 = cc.getCore(\"badConfig2\");\n      SolrCore bs1 = cc.getCore(\"badSchema1\");\n      SolrCore bs2 = cc.getCore(\"badSchema2\");\n\n      // all the cores should be found in the list now.\n      checkInCores(cc, \"core1\", \"core2\", \"badSchema1\", \"badSchema2\", \"badConfig1\", \"badConfig2\");\n\n      // Did we clear out the errors by putting good files in place? And the cores that never were bad should be OK too.\n      checkStatus(cc, true, \"core1\");\n      checkStatus(cc, true, \"core2\");\n      checkStatus(cc, true, \"badSchema1\");\n      checkStatus(cc, true, \"badSchema2\");\n      checkStatus(cc, true, \"badConfig1\");\n      checkStatus(cc, true, \"badConfig2\");\n\n      // Are the formerly bad cores now searchable? Testing one of each should do.\n      checkSearch(core1);\n      checkSearch(bc1);\n      checkSearch(bs1);\n\n      core1.close();\n      bc1.close();\n      bc2.close();\n      bs1.close();\n      bs2.close();\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestLazyCores#testBadConfigsGenerateErrors().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestLazyCores#testBadConfigsGenerateErrors().mjava","sourceNew":"  // Test that transient cores\n  // 1> produce errors as appropriate when the config or schema files are foo'd\n  // 2> \"self heal\". That is, if the problem is corrected can the core be reloaded and used?\n  // 3> that OK cores can be searched even when some cores failed to load.\n  // 4> that having no solr.xml entry for transient chache handler correctly uses the default.\n  @Test\n  public void testBadConfigsGenerateErrors() throws Exception {\n    final CoreContainer cc = initGoodAndBad(Arrays.asList(\"core1\", \"core2\"),\n        Arrays.asList(\"badSchema1\", \"badSchema2\"),\n        Arrays.asList(\"badConfig1\", \"badConfig2\"));\n    \n    \n    try {\n      // first, did the two good cores load successfully?\n      checkInCores(cc, \"core1\", \"core2\");\n\n      // Did the bad cores fail to load?\n      checkNotInCores(cc, Collections.emptyList(), Arrays.asList(\"badSchema1\", \"badSchema2\", \"badConfig1\", \"badConfig2\"));\n\n      //  Can we still search the \"good\" cores even though there were core init failures?\n      SolrCore core1 = cc.getCore(\"core1\");\n      checkSearch(core1);\n\n      // Did we get the expected message for each of the cores that failed to load? Make sure we don't run afoul of\n      // the dreaded slash/backslash difference on Windows and *nix machines.\n      testMessage(cc.getCoreInitFailures(), makePath(\"badConfig1\", \"conf\", \"solrconfig.xml\"));\n      testMessage(cc.getCoreInitFailures(), makePath(\"badConfig2\", \"conf\", \"solrconfig.xml\"));\n      testMessage(cc.getCoreInitFailures(), makePath(\"badSchema1\", \"conf\", \"schema.xml\"));\n      testMessage(cc.getCoreInitFailures(), makePath(\"badSchema2\", \"conf\", \"schema.xml\"));\n\n      // Status should report that there are failure messages for the bad cores and none for the good cores.\n      checkStatus(cc, true, \"core1\");\n      checkStatus(cc, true, \"core2\");\n      checkStatus(cc, false, \"badSchema1\");\n      checkStatus(cc, false, \"badSchema2\");\n      checkStatus(cc, false, \"badConfig1\");\n      checkStatus(cc, false, \"badConfig2\");\n\n      // Copy good config and schema files in and see if you can then load them (they are transient after all)\n      copyGoodConf(\"badConfig1\", \"solrconfig-minimal.xml\", \"solrconfig.xml\");\n      copyGoodConf(\"badConfig2\", \"solrconfig-minimal.xml\", \"solrconfig.xml\");\n      copyGoodConf(\"badSchema1\", \"schema-tiny.xml\", \"schema.xml\");\n      copyGoodConf(\"badSchema2\", \"schema-tiny.xml\", \"schema.xml\");\n\n      \n      // Reload the cores and insure that\n      // 1> they pick up the new configs\n      // 2> they don't fail again b/c they still have entries in loadFailure in core container.\n      cc.reload(\"badConfig1\");\n      cc.reload(\"badConfig2\");\n      cc.reload(\"badSchema1\");\n      cc.reload(\"badSchema2\");\n      SolrCore bc1 = cc.getCore(\"badConfig1\");;\n      SolrCore bc2 = cc.getCore(\"badConfig2\");\n      SolrCore bs1 = cc.getCore(\"badSchema1\");\n      SolrCore bs2 = cc.getCore(\"badSchema2\");\n\n      // all the cores should be found in the list now.\n      checkInCores(cc, \"core1\", \"core2\", \"badSchema1\", \"badSchema2\", \"badConfig1\", \"badConfig2\");\n\n      // Did we clear out the errors by putting good files in place? And the cores that never were bad should be OK too.\n      checkStatus(cc, true, \"core1\");\n      checkStatus(cc, true, \"core2\");\n      checkStatus(cc, true, \"badSchema1\");\n      checkStatus(cc, true, \"badSchema2\");\n      checkStatus(cc, true, \"badConfig1\");\n      checkStatus(cc, true, \"badConfig2\");\n\n      // Are the formerly bad cores now searchable? Testing one of each should do.\n      checkSearch(core1);\n      checkSearch(bc1);\n      checkSearch(bs1);\n\n      core1.close();\n      bc1.close();\n      bc2.close();\n      bs1.close();\n      bs2.close();\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","sourceOld":"  // Test that transient cores\n  // 1> produce errors as appropriate when the config or schema files are foo'd\n  // 2> \"self heal\". That is, if the problem is corrected can the core be reloaded and used?\n  // 3> that OK cores can be searched even when some cores failed to load.\n  // 4> that having no solr.xml entry for transient chache handler correctly uses the default.\n  @Test\n  public void testBadConfigsGenerateErrors() throws Exception {\n    final CoreContainer cc = initGoodAndBad(Arrays.asList(\"core1\", \"core2\"),\n        Arrays.asList(\"badSchema1\", \"badSchema2\"),\n        Arrays.asList(\"badConfig1\", \"badConfig2\"));\n    \n    \n    try {\n      // first, did the two good cores load successfully?\n      checkInCores(cc, \"core1\", \"core2\");\n\n      // Did the bad cores fail to load?\n      checkNotInCores(cc, \"badSchema1\", \"badSchema2\", \"badConfig1\", \"badConfig2\");\n\n      //  Can we still search the \"good\" cores even though there were core init failures?\n      SolrCore core1 = cc.getCore(\"core1\");\n      checkSearch(core1);\n\n      // Did we get the expected message for each of the cores that failed to load? Make sure we don't run afoul of\n      // the dreaded slash/backslash difference on Windows and *nix machines.\n      testMessage(cc.getCoreInitFailures(), makePath(\"badConfig1\", \"conf\", \"solrconfig.xml\"));\n      testMessage(cc.getCoreInitFailures(), makePath(\"badConfig2\", \"conf\", \"solrconfig.xml\"));\n      testMessage(cc.getCoreInitFailures(), makePath(\"badSchema1\", \"conf\", \"schema.xml\"));\n      testMessage(cc.getCoreInitFailures(), makePath(\"badSchema2\", \"conf\", \"schema.xml\"));\n\n      // Status should report that there are failure messages for the bad cores and none for the good cores.\n      checkStatus(cc, true, \"core1\");\n      checkStatus(cc, true, \"core2\");\n      checkStatus(cc, false, \"badSchema1\");\n      checkStatus(cc, false, \"badSchema2\");\n      checkStatus(cc, false, \"badConfig1\");\n      checkStatus(cc, false, \"badConfig2\");\n\n      // Copy good config and schema files in and see if you can then load them (they are transient after all)\n      copyGoodConf(\"badConfig1\", \"solrconfig-minimal.xml\", \"solrconfig.xml\");\n      copyGoodConf(\"badConfig2\", \"solrconfig-minimal.xml\", \"solrconfig.xml\");\n      copyGoodConf(\"badSchema1\", \"schema-tiny.xml\", \"schema.xml\");\n      copyGoodConf(\"badSchema2\", \"schema-tiny.xml\", \"schema.xml\");\n\n      \n      // Reload the cores and insure that\n      // 1> they pick up the new configs\n      // 2> they don't fail again b/c they still have entries in loadFailure in core container.\n      cc.reload(\"badConfig1\");\n      cc.reload(\"badConfig2\");\n      cc.reload(\"badSchema1\");\n      cc.reload(\"badSchema2\");\n      SolrCore bc1 = cc.getCore(\"badConfig1\");;\n      SolrCore bc2 = cc.getCore(\"badConfig2\");\n      SolrCore bs1 = cc.getCore(\"badSchema1\");\n      SolrCore bs2 = cc.getCore(\"badSchema2\");\n\n      // all the cores should be found in the list now.\n      checkInCores(cc, \"core1\", \"core2\", \"badSchema1\", \"badSchema2\", \"badConfig1\", \"badConfig2\");\n\n      // Did we clear out the errors by putting good files in place? And the cores that never were bad should be OK too.\n      checkStatus(cc, true, \"core1\");\n      checkStatus(cc, true, \"core2\");\n      checkStatus(cc, true, \"badSchema1\");\n      checkStatus(cc, true, \"badSchema2\");\n      checkStatus(cc, true, \"badConfig1\");\n      checkStatus(cc, true, \"badConfig2\");\n\n      // Are the formerly bad cores now searchable? Testing one of each should do.\n      checkSearch(core1);\n      checkSearch(bc1);\n      checkSearch(bs1);\n\n      core1.close();\n      bc1.close();\n      bc2.close();\n      bs1.close();\n      bs2.close();\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30c8e5574b55d57947e989443dfde611646530ee","date":1499131153,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestLazyCores#testBadConfigsGenerateErrors().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestLazyCores#testBadConfigsGenerateErrors().mjava","sourceNew":"  // Test that transient cores\n  // 1> produce errors as appropriate when the config or schema files are foo'd\n  // 2> \"self heal\". That is, if the problem is corrected can the core be reloaded and used?\n  // 3> that OK cores can be searched even when some cores failed to load.\n  // 4> that having no solr.xml entry for transient chache handler correctly uses the default.\n  @Test\n  public void testBadConfigsGenerateErrors() throws Exception {\n    final CoreContainer cc = initGoodAndBad(Arrays.asList(\"core1\", \"core2\"),\n        Arrays.asList(\"badSchema1\", \"badSchema2\"),\n        Arrays.asList(\"badConfig1\", \"badConfig2\"));\n    \n    \n    try {\n      // first, did the two good cores load successfully?\n      checkInCores(cc, \"core1\", \"core2\");\n\n      // Did the bad cores fail to load?\n      checkNotInCores(cc, Collections.emptyList(), Arrays.asList(\"badSchema1\", \"badSchema2\", \"badConfig1\", \"badConfig2\"));\n\n      //  Can we still search the \"good\" cores even though there were core init failures?\n      SolrCore core1 = cc.getCore(\"core1\");\n      checkSearch(core1);\n\n      // Did we get the expected message for each of the cores that failed to load? Make sure we don't run afoul of\n      // the dreaded slash/backslash difference on Windows and *nix machines.\n      testMessage(cc.getCoreInitFailures(), makePath(\"badConfig1\", \"conf\", \"solrconfig.xml\"));\n      testMessage(cc.getCoreInitFailures(), makePath(\"badConfig2\", \"conf\", \"solrconfig.xml\"));\n      testMessage(cc.getCoreInitFailures(), makePath(\"badSchema1\", \"conf\", \"schema.xml\"));\n      testMessage(cc.getCoreInitFailures(), makePath(\"badSchema2\", \"conf\", \"schema.xml\"));\n\n      // Status should report that there are failure messages for the bad cores and none for the good cores.\n      checkStatus(cc, true, \"core1\");\n      checkStatus(cc, true, \"core2\");\n      checkStatus(cc, false, \"badSchema1\");\n      checkStatus(cc, false, \"badSchema2\");\n      checkStatus(cc, false, \"badConfig1\");\n      checkStatus(cc, false, \"badConfig2\");\n\n      // Copy good config and schema files in and see if you can then load them (they are transient after all)\n      copyGoodConf(\"badConfig1\", \"solrconfig-minimal.xml\", \"solrconfig.xml\");\n      copyGoodConf(\"badConfig2\", \"solrconfig-minimal.xml\", \"solrconfig.xml\");\n      copyGoodConf(\"badSchema1\", \"schema-tiny.xml\", \"schema.xml\");\n      copyGoodConf(\"badSchema2\", \"schema-tiny.xml\", \"schema.xml\");\n\n      \n      // Reload the cores and insure that\n      // 1> they pick up the new configs\n      // 2> they don't fail again b/c they still have entries in loadFailure in core container.\n      cc.reload(\"badConfig1\");\n      cc.reload(\"badConfig2\");\n      cc.reload(\"badSchema1\");\n      cc.reload(\"badSchema2\");\n      SolrCore bc1 = cc.getCore(\"badConfig1\");;\n      SolrCore bc2 = cc.getCore(\"badConfig2\");\n      SolrCore bs1 = cc.getCore(\"badSchema1\");\n      SolrCore bs2 = cc.getCore(\"badSchema2\");\n\n      // all the cores should be found in the list now.\n      checkInCores(cc, \"core1\", \"core2\", \"badSchema1\", \"badSchema2\", \"badConfig1\", \"badConfig2\");\n\n      // Did we clear out the errors by putting good files in place? And the cores that never were bad should be OK too.\n      checkStatus(cc, true, \"core1\");\n      checkStatus(cc, true, \"core2\");\n      checkStatus(cc, true, \"badSchema1\");\n      checkStatus(cc, true, \"badSchema2\");\n      checkStatus(cc, true, \"badConfig1\");\n      checkStatus(cc, true, \"badConfig2\");\n\n      // Are the formerly bad cores now searchable? Testing one of each should do.\n      checkSearch(core1);\n      checkSearch(bc1);\n      checkSearch(bs1);\n\n      core1.close();\n      bc1.close();\n      bc2.close();\n      bs1.close();\n      bs2.close();\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","sourceOld":"  // Test that transient cores\n  // 1> produce errors as appropriate when the config or schema files are foo'd\n  // 2> \"self heal\". That is, if the problem is corrected can the core be reloaded and used?\n  // 3> that OK cores can be searched even when some cores failed to load.\n  // 4> that having no solr.xml entry for transient chache handler correctly uses the default.\n  @Test\n  public void testBadConfigsGenerateErrors() throws Exception {\n    final CoreContainer cc = initGoodAndBad(Arrays.asList(\"core1\", \"core2\"),\n        Arrays.asList(\"badSchema1\", \"badSchema2\"),\n        Arrays.asList(\"badConfig1\", \"badConfig2\"));\n    \n    \n    try {\n      // first, did the two good cores load successfully?\n      checkInCores(cc, \"core1\", \"core2\");\n\n      // Did the bad cores fail to load?\n      checkNotInCores(cc, \"badSchema1\", \"badSchema2\", \"badConfig1\", \"badConfig2\");\n\n      //  Can we still search the \"good\" cores even though there were core init failures?\n      SolrCore core1 = cc.getCore(\"core1\");\n      checkSearch(core1);\n\n      // Did we get the expected message for each of the cores that failed to load? Make sure we don't run afoul of\n      // the dreaded slash/backslash difference on Windows and *nix machines.\n      testMessage(cc.getCoreInitFailures(), makePath(\"badConfig1\", \"conf\", \"solrconfig.xml\"));\n      testMessage(cc.getCoreInitFailures(), makePath(\"badConfig2\", \"conf\", \"solrconfig.xml\"));\n      testMessage(cc.getCoreInitFailures(), makePath(\"badSchema1\", \"conf\", \"schema.xml\"));\n      testMessage(cc.getCoreInitFailures(), makePath(\"badSchema2\", \"conf\", \"schema.xml\"));\n\n      // Status should report that there are failure messages for the bad cores and none for the good cores.\n      checkStatus(cc, true, \"core1\");\n      checkStatus(cc, true, \"core2\");\n      checkStatus(cc, false, \"badSchema1\");\n      checkStatus(cc, false, \"badSchema2\");\n      checkStatus(cc, false, \"badConfig1\");\n      checkStatus(cc, false, \"badConfig2\");\n\n      // Copy good config and schema files in and see if you can then load them (they are transient after all)\n      copyGoodConf(\"badConfig1\", \"solrconfig-minimal.xml\", \"solrconfig.xml\");\n      copyGoodConf(\"badConfig2\", \"solrconfig-minimal.xml\", \"solrconfig.xml\");\n      copyGoodConf(\"badSchema1\", \"schema-tiny.xml\", \"schema.xml\");\n      copyGoodConf(\"badSchema2\", \"schema-tiny.xml\", \"schema.xml\");\n\n      \n      // Reload the cores and insure that\n      // 1> they pick up the new configs\n      // 2> they don't fail again b/c they still have entries in loadFailure in core container.\n      cc.reload(\"badConfig1\");\n      cc.reload(\"badConfig2\");\n      cc.reload(\"badSchema1\");\n      cc.reload(\"badSchema2\");\n      SolrCore bc1 = cc.getCore(\"badConfig1\");;\n      SolrCore bc2 = cc.getCore(\"badConfig2\");\n      SolrCore bs1 = cc.getCore(\"badSchema1\");\n      SolrCore bs2 = cc.getCore(\"badSchema2\");\n\n      // all the cores should be found in the list now.\n      checkInCores(cc, \"core1\", \"core2\", \"badSchema1\", \"badSchema2\", \"badConfig1\", \"badConfig2\");\n\n      // Did we clear out the errors by putting good files in place? And the cores that never were bad should be OK too.\n      checkStatus(cc, true, \"core1\");\n      checkStatus(cc, true, \"core2\");\n      checkStatus(cc, true, \"badSchema1\");\n      checkStatus(cc, true, \"badSchema2\");\n      checkStatus(cc, true, \"badConfig1\");\n      checkStatus(cc, true, \"badConfig2\");\n\n      // Are the formerly bad cores now searchable? Testing one of each should do.\n      checkSearch(core1);\n      checkSearch(bc1);\n      checkSearch(bs1);\n\n      core1.close();\n      bc1.close();\n      bc2.close();\n      bs1.close();\n      bs2.close();\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad026d488f8fbf9ab33e5232d3343395c19b6cc8","date":1507308872,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestLazyCores#testBadConfigsGenerateErrors().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestLazyCores#testBadConfigsGenerateErrors().mjava","sourceNew":"  // Test that transient cores\n  // 1> produce errors as appropriate when the config or schema files are foo'd\n  // 2> \"self heal\". That is, if the problem is corrected can the core be reloaded and used?\n  // 3> that OK cores can be searched even when some cores failed to load.\n  // 4> that having no solr.xml entry for transient chache handler correctly uses the default.\n  @Test\n  public void testBadConfigsGenerateErrors() throws Exception {\n    final CoreContainer cc = initGoodAndBad(Arrays.asList(\"core1\", \"core2\"),\n        Arrays.asList(\"badSchema1\", \"badSchema2\"),\n        Arrays.asList(\"badConfig1\", \"badConfig2\"));\n\n\n    try {\n      // first, did the two good cores load successfully?\n      checkInCores(cc, \"core1\", \"core2\");\n\n      // Did the bad cores fail to load?\n      checkNotInCores(cc, Collections.emptyList(), Arrays.asList(\"badSchema1\", \"badSchema2\", \"badConfig1\", \"badConfig2\"));\n\n      //  Can we still search the \"good\" cores even though there were core init failures?\n      SolrCore core1 = cc.getCore(\"core1\");\n      checkSearch(core1);\n\n      // Did we get the expected message for each of the cores that failed to load? Make sure we don't run afoul of\n      // the dreaded slash/backslash difference on Windows and *nix machines.\n      testMessage(cc.getCoreInitFailures(), makePath(\"badConfig1\", \"conf\", \"solrconfig.xml\"));\n      testMessage(cc.getCoreInitFailures(), makePath(\"badConfig2\", \"conf\", \"solrconfig.xml\"));\n      testMessage(cc.getCoreInitFailures(), makePath(\"badSchema1\", \"conf\", \"schema.xml\"));\n      testMessage(cc.getCoreInitFailures(), makePath(\"badSchema2\", \"conf\", \"schema.xml\"));\n\n      // Status should report that there are failure messages for the bad cores and none for the good cores.\n      checkStatus(cc, true, \"core1\");\n      checkStatus(cc, true, \"core2\");\n      checkStatus(cc, false, \"badSchema1\");\n      checkStatus(cc, false, \"badSchema2\");\n      checkStatus(cc, false, \"badConfig1\");\n      checkStatus(cc, false, \"badConfig2\");\n\n      // Copy good config and schema files in and see if you can then load them (they are transient after all)\n      copyGoodConf(\"badConfig1\", \"solrconfig-minimal.xml\", \"solrconfig.xml\");\n      copyGoodConf(\"badConfig2\", \"solrconfig-minimal.xml\", \"solrconfig.xml\");\n      copyGoodConf(\"badSchema1\", \"schema-tiny.xml\", \"schema.xml\");\n      copyGoodConf(\"badSchema2\", \"schema-tiny.xml\", \"schema.xml\");\n\n\n      // Reload the cores and insure that\n      // 1> they pick up the new configs\n      // 2> they don't fail again b/c they still have entries in loadFailure in core container.\n      cc.reload(\"badConfig1\");\n      cc.reload(\"badConfig2\");\n      cc.reload(\"badSchema1\");\n      cc.reload(\"badSchema2\");\n      SolrCore bc1 = cc.getCore(\"badConfig1\");\n      ;\n      SolrCore bc2 = cc.getCore(\"badConfig2\");\n      SolrCore bs1 = cc.getCore(\"badSchema1\");\n      SolrCore bs2 = cc.getCore(\"badSchema2\");\n\n      // all the cores should be found in the list now.\n      checkInCores(cc, \"core1\", \"core2\", \"badSchema1\", \"badSchema2\", \"badConfig1\", \"badConfig2\");\n\n      // Did we clear out the errors by putting good files in place? And the cores that never were bad should be OK too.\n      checkStatus(cc, true, \"core1\");\n      checkStatus(cc, true, \"core2\");\n      checkStatus(cc, true, \"badSchema1\");\n      checkStatus(cc, true, \"badSchema2\");\n      checkStatus(cc, true, \"badConfig1\");\n      checkStatus(cc, true, \"badConfig2\");\n\n      // Are the formerly bad cores now searchable? Testing one of each should do.\n      checkSearch(core1);\n      checkSearch(bc1);\n      checkSearch(bs1);\n\n      core1.close();\n      bc1.close();\n      bc2.close();\n      bs1.close();\n      bs2.close();\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","sourceOld":"  // Test that transient cores\n  // 1> produce errors as appropriate when the config or schema files are foo'd\n  // 2> \"self heal\". That is, if the problem is corrected can the core be reloaded and used?\n  // 3> that OK cores can be searched even when some cores failed to load.\n  // 4> that having no solr.xml entry for transient chache handler correctly uses the default.\n  @Test\n  public void testBadConfigsGenerateErrors() throws Exception {\n    final CoreContainer cc = initGoodAndBad(Arrays.asList(\"core1\", \"core2\"),\n        Arrays.asList(\"badSchema1\", \"badSchema2\"),\n        Arrays.asList(\"badConfig1\", \"badConfig2\"));\n    \n    \n    try {\n      // first, did the two good cores load successfully?\n      checkInCores(cc, \"core1\", \"core2\");\n\n      // Did the bad cores fail to load?\n      checkNotInCores(cc, Collections.emptyList(), Arrays.asList(\"badSchema1\", \"badSchema2\", \"badConfig1\", \"badConfig2\"));\n\n      //  Can we still search the \"good\" cores even though there were core init failures?\n      SolrCore core1 = cc.getCore(\"core1\");\n      checkSearch(core1);\n\n      // Did we get the expected message for each of the cores that failed to load? Make sure we don't run afoul of\n      // the dreaded slash/backslash difference on Windows and *nix machines.\n      testMessage(cc.getCoreInitFailures(), makePath(\"badConfig1\", \"conf\", \"solrconfig.xml\"));\n      testMessage(cc.getCoreInitFailures(), makePath(\"badConfig2\", \"conf\", \"solrconfig.xml\"));\n      testMessage(cc.getCoreInitFailures(), makePath(\"badSchema1\", \"conf\", \"schema.xml\"));\n      testMessage(cc.getCoreInitFailures(), makePath(\"badSchema2\", \"conf\", \"schema.xml\"));\n\n      // Status should report that there are failure messages for the bad cores and none for the good cores.\n      checkStatus(cc, true, \"core1\");\n      checkStatus(cc, true, \"core2\");\n      checkStatus(cc, false, \"badSchema1\");\n      checkStatus(cc, false, \"badSchema2\");\n      checkStatus(cc, false, \"badConfig1\");\n      checkStatus(cc, false, \"badConfig2\");\n\n      // Copy good config and schema files in and see if you can then load them (they are transient after all)\n      copyGoodConf(\"badConfig1\", \"solrconfig-minimal.xml\", \"solrconfig.xml\");\n      copyGoodConf(\"badConfig2\", \"solrconfig-minimal.xml\", \"solrconfig.xml\");\n      copyGoodConf(\"badSchema1\", \"schema-tiny.xml\", \"schema.xml\");\n      copyGoodConf(\"badSchema2\", \"schema-tiny.xml\", \"schema.xml\");\n\n      \n      // Reload the cores and insure that\n      // 1> they pick up the new configs\n      // 2> they don't fail again b/c they still have entries in loadFailure in core container.\n      cc.reload(\"badConfig1\");\n      cc.reload(\"badConfig2\");\n      cc.reload(\"badSchema1\");\n      cc.reload(\"badSchema2\");\n      SolrCore bc1 = cc.getCore(\"badConfig1\");;\n      SolrCore bc2 = cc.getCore(\"badConfig2\");\n      SolrCore bs1 = cc.getCore(\"badSchema1\");\n      SolrCore bs2 = cc.getCore(\"badSchema2\");\n\n      // all the cores should be found in the list now.\n      checkInCores(cc, \"core1\", \"core2\", \"badSchema1\", \"badSchema2\", \"badConfig1\", \"badConfig2\");\n\n      // Did we clear out the errors by putting good files in place? And the cores that never were bad should be OK too.\n      checkStatus(cc, true, \"core1\");\n      checkStatus(cc, true, \"core2\");\n      checkStatus(cc, true, \"badSchema1\");\n      checkStatus(cc, true, \"badSchema2\");\n      checkStatus(cc, true, \"badConfig1\");\n      checkStatus(cc, true, \"badConfig2\");\n\n      // Are the formerly bad cores now searchable? Testing one of each should do.\n      checkSearch(core1);\n      checkSearch(bc1);\n      checkSearch(bs1);\n\n      core1.close();\n      bc1.close();\n      bc2.close();\n      bs1.close();\n      bs2.close();\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"48e6317c36b128552eaed2363bb069267defb0e0","date":1507335877,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestLazyCores#testBadConfigsGenerateErrors().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestLazyCores#testBadConfigsGenerateErrors().mjava","sourceNew":"  // Test that transient cores\n  // 1> produce errors as appropriate when the config or schema files are foo'd\n  // 2> \"self heal\". That is, if the problem is corrected can the core be reloaded and used?\n  // 3> that OK cores can be searched even when some cores failed to load.\n  // 4> that having no solr.xml entry for transient chache handler correctly uses the default.\n  @Test\n  public void testBadConfigsGenerateErrors() throws Exception {\n    final CoreContainer cc = initGoodAndBad(Arrays.asList(\"core1\", \"core2\"),\n        Arrays.asList(\"badSchema1\", \"badSchema2\"),\n        Arrays.asList(\"badConfig1\", \"badConfig2\"));\n    \n    \n    try {\n      // first, did the two good cores load successfully?\n      checkInCores(cc, \"core1\", \"core2\");\n\n      // Did the bad cores fail to load?\n      checkNotInCores(cc, Collections.emptyList(), Arrays.asList(\"badSchema1\", \"badSchema2\", \"badConfig1\", \"badConfig2\"));\n\n      //  Can we still search the \"good\" cores even though there were core init failures?\n      SolrCore core1 = cc.getCore(\"core1\");\n      checkSearch(core1);\n\n      // Did we get the expected message for each of the cores that failed to load? Make sure we don't run afoul of\n      // the dreaded slash/backslash difference on Windows and *nix machines.\n      testMessage(cc.getCoreInitFailures(), makePath(\"badConfig1\", \"conf\", \"solrconfig.xml\"));\n      testMessage(cc.getCoreInitFailures(), makePath(\"badConfig2\", \"conf\", \"solrconfig.xml\"));\n      testMessage(cc.getCoreInitFailures(), makePath(\"badSchema1\", \"conf\", \"schema.xml\"));\n      testMessage(cc.getCoreInitFailures(), makePath(\"badSchema2\", \"conf\", \"schema.xml\"));\n\n      // Status should report that there are failure messages for the bad cores and none for the good cores.\n      checkStatus(cc, true, \"core1\");\n      checkStatus(cc, true, \"core2\");\n      checkStatus(cc, false, \"badSchema1\");\n      checkStatus(cc, false, \"badSchema2\");\n      checkStatus(cc, false, \"badConfig1\");\n      checkStatus(cc, false, \"badConfig2\");\n\n      // Copy good config and schema files in and see if you can then load them (they are transient after all)\n      copyGoodConf(\"badConfig1\", \"solrconfig-minimal.xml\", \"solrconfig.xml\");\n      copyGoodConf(\"badConfig2\", \"solrconfig-minimal.xml\", \"solrconfig.xml\");\n      copyGoodConf(\"badSchema1\", \"schema-tiny.xml\", \"schema.xml\");\n      copyGoodConf(\"badSchema2\", \"schema-tiny.xml\", \"schema.xml\");\n\n      \n      // Reload the cores and insure that\n      // 1> they pick up the new configs\n      // 2> they don't fail again b/c they still have entries in loadFailure in core container.\n      cc.reload(\"badConfig1\");\n      cc.reload(\"badConfig2\");\n      cc.reload(\"badSchema1\");\n      cc.reload(\"badSchema2\");\n      SolrCore bc1 = cc.getCore(\"badConfig1\");;\n      SolrCore bc2 = cc.getCore(\"badConfig2\");\n      SolrCore bs1 = cc.getCore(\"badSchema1\");\n      SolrCore bs2 = cc.getCore(\"badSchema2\");\n\n      // all the cores should be found in the list now.\n      checkInCores(cc, \"core1\", \"core2\", \"badSchema1\", \"badSchema2\", \"badConfig1\", \"badConfig2\");\n\n      // Did we clear out the errors by putting good files in place? And the cores that never were bad should be OK too.\n      checkStatus(cc, true, \"core1\");\n      checkStatus(cc, true, \"core2\");\n      checkStatus(cc, true, \"badSchema1\");\n      checkStatus(cc, true, \"badSchema2\");\n      checkStatus(cc, true, \"badConfig1\");\n      checkStatus(cc, true, \"badConfig2\");\n\n      // Are the formerly bad cores now searchable? Testing one of each should do.\n      checkSearch(core1);\n      checkSearch(bc1);\n      checkSearch(bs1);\n\n      core1.close();\n      bc1.close();\n      bc2.close();\n      bs1.close();\n      bs2.close();\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","sourceOld":"  // Test that transient cores\n  // 1> produce errors as appropriate when the config or schema files are foo'd\n  // 2> \"self heal\". That is, if the problem is corrected can the core be reloaded and used?\n  // 3> that OK cores can be searched even when some cores failed to load.\n  // 4> that having no solr.xml entry for transient chache handler correctly uses the default.\n  @Test\n  public void testBadConfigsGenerateErrors() throws Exception {\n    final CoreContainer cc = initGoodAndBad(Arrays.asList(\"core1\", \"core2\"),\n        Arrays.asList(\"badSchema1\", \"badSchema2\"),\n        Arrays.asList(\"badConfig1\", \"badConfig2\"));\n\n\n    try {\n      // first, did the two good cores load successfully?\n      checkInCores(cc, \"core1\", \"core2\");\n\n      // Did the bad cores fail to load?\n      checkNotInCores(cc, Collections.emptyList(), Arrays.asList(\"badSchema1\", \"badSchema2\", \"badConfig1\", \"badConfig2\"));\n\n      //  Can we still search the \"good\" cores even though there were core init failures?\n      SolrCore core1 = cc.getCore(\"core1\");\n      checkSearch(core1);\n\n      // Did we get the expected message for each of the cores that failed to load? Make sure we don't run afoul of\n      // the dreaded slash/backslash difference on Windows and *nix machines.\n      testMessage(cc.getCoreInitFailures(), makePath(\"badConfig1\", \"conf\", \"solrconfig.xml\"));\n      testMessage(cc.getCoreInitFailures(), makePath(\"badConfig2\", \"conf\", \"solrconfig.xml\"));\n      testMessage(cc.getCoreInitFailures(), makePath(\"badSchema1\", \"conf\", \"schema.xml\"));\n      testMessage(cc.getCoreInitFailures(), makePath(\"badSchema2\", \"conf\", \"schema.xml\"));\n\n      // Status should report that there are failure messages for the bad cores and none for the good cores.\n      checkStatus(cc, true, \"core1\");\n      checkStatus(cc, true, \"core2\");\n      checkStatus(cc, false, \"badSchema1\");\n      checkStatus(cc, false, \"badSchema2\");\n      checkStatus(cc, false, \"badConfig1\");\n      checkStatus(cc, false, \"badConfig2\");\n\n      // Copy good config and schema files in and see if you can then load them (they are transient after all)\n      copyGoodConf(\"badConfig1\", \"solrconfig-minimal.xml\", \"solrconfig.xml\");\n      copyGoodConf(\"badConfig2\", \"solrconfig-minimal.xml\", \"solrconfig.xml\");\n      copyGoodConf(\"badSchema1\", \"schema-tiny.xml\", \"schema.xml\");\n      copyGoodConf(\"badSchema2\", \"schema-tiny.xml\", \"schema.xml\");\n\n\n      // Reload the cores and insure that\n      // 1> they pick up the new configs\n      // 2> they don't fail again b/c they still have entries in loadFailure in core container.\n      cc.reload(\"badConfig1\");\n      cc.reload(\"badConfig2\");\n      cc.reload(\"badSchema1\");\n      cc.reload(\"badSchema2\");\n      SolrCore bc1 = cc.getCore(\"badConfig1\");\n      ;\n      SolrCore bc2 = cc.getCore(\"badConfig2\");\n      SolrCore bs1 = cc.getCore(\"badSchema1\");\n      SolrCore bs2 = cc.getCore(\"badSchema2\");\n\n      // all the cores should be found in the list now.\n      checkInCores(cc, \"core1\", \"core2\", \"badSchema1\", \"badSchema2\", \"badConfig1\", \"badConfig2\");\n\n      // Did we clear out the errors by putting good files in place? And the cores that never were bad should be OK too.\n      checkStatus(cc, true, \"core1\");\n      checkStatus(cc, true, \"core2\");\n      checkStatus(cc, true, \"badSchema1\");\n      checkStatus(cc, true, \"badSchema2\");\n      checkStatus(cc, true, \"badConfig1\");\n      checkStatus(cc, true, \"badConfig2\");\n\n      // Are the formerly bad cores now searchable? Testing one of each should do.\n      checkSearch(core1);\n      checkSearch(bc1);\n      checkSearch(bs1);\n\n      core1.close();\n      bc1.close();\n      bc2.close();\n      bs1.close();\n      bs2.close();\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["8b6a4b585aed7660a589375f6a09b90efd29c961"],"9435d55e3ea95c5d94406d3affc36f9505b6a736":["f52362fa746c58f10354f9454bed2b89f59c06b2"],"83fbfcaab6a6cd5daf32752c0c35f0e0c15380e0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bb1f22cfa77230b5f05b7784feae5367f6bbb488":["83fbfcaab6a6cd5daf32752c0c35f0e0c15380e0"],"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["83fbfcaab6a6cd5daf32752c0c35f0e0c15380e0","bb1f22cfa77230b5f05b7784feae5367f6bbb488"],"f52362fa746c58f10354f9454bed2b89f59c06b2":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"7871f9c286dce2a9370bcf517a3e7d12e3bd9602":["729cb470f975115d4c60517b2cb7c42e37a7a2e1"],"30c8e5574b55d57947e989443dfde611646530ee":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","28288370235ed02234a64753cdbf0c6ec096304a"],"ad026d488f8fbf9ab33e5232d3343395c19b6cc8":["28288370235ed02234a64753cdbf0c6ec096304a"],"8b6a4b585aed7660a589375f6a09b90efd29c961":["f52362fa746c58f10354f9454bed2b89f59c06b2"],"729cb470f975115d4c60517b2cb7c42e37a7a2e1":["9435d55e3ea95c5d94406d3affc36f9505b6a736"],"28288370235ed02234a64753cdbf0c6ec096304a":["729cb470f975115d4c60517b2cb7c42e37a7a2e1","7871f9c286dce2a9370bcf517a3e7d12e3bd9602"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["48e6317c36b128552eaed2363bb069267defb0e0"],"48e6317c36b128552eaed2363bb069267defb0e0":["ad026d488f8fbf9ab33e5232d3343395c19b6cc8"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["30c8e5574b55d57947e989443dfde611646530ee"],"9435d55e3ea95c5d94406d3affc36f9505b6a736":["729cb470f975115d4c60517b2cb7c42e37a7a2e1"],"83fbfcaab6a6cd5daf32752c0c35f0e0c15380e0":["bb1f22cfa77230b5f05b7784feae5367f6bbb488","2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"bb1f22cfa77230b5f05b7784feae5367f6bbb488":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["f52362fa746c58f10354f9454bed2b89f59c06b2"],"f52362fa746c58f10354f9454bed2b89f59c06b2":["9435d55e3ea95c5d94406d3affc36f9505b6a736","8b6a4b585aed7660a589375f6a09b90efd29c961"],"7871f9c286dce2a9370bcf517a3e7d12e3bd9602":["28288370235ed02234a64753cdbf0c6ec096304a"],"30c8e5574b55d57947e989443dfde611646530ee":[],"8b6a4b585aed7660a589375f6a09b90efd29c961":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb"],"ad026d488f8fbf9ab33e5232d3343395c19b6cc8":["48e6317c36b128552eaed2363bb069267defb0e0"],"729cb470f975115d4c60517b2cb7c42e37a7a2e1":["7871f9c286dce2a9370bcf517a3e7d12e3bd9602","28288370235ed02234a64753cdbf0c6ec096304a"],"28288370235ed02234a64753cdbf0c6ec096304a":["30c8e5574b55d57947e989443dfde611646530ee","ad026d488f8fbf9ab33e5232d3343395c19b6cc8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["83fbfcaab6a6cd5daf32752c0c35f0e0c15380e0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"48e6317c36b128552eaed2363bb069267defb0e0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["30c8e5574b55d57947e989443dfde611646530ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}