{"path":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicAutomata#between(String,String,int,Collection[State],boolean).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicAutomata#between(String,String,int,Collection[State],boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/BasicAutomata#between(String,String,int,Collection[State],boolean).mjava","sourceNew":"  /**\n   * Constructs sub-automaton corresponding to decimal numbers of value between\n   * x.substring(n) and y.substring(n) and of length x.substring(n).length()\n   * (which must be equal to y.substring(n).length()).\n   */\n  private static State between(String x, String y, int n,\n      Collection<State> initials, boolean zeros) {\n    State s = new State();\n    if (x.length() == n) s.setAccept(true);\n    else {\n      if (zeros) initials.add(s);\n      char cx = x.charAt(n);\n      char cy = y.charAt(n);\n      if (cx == cy) s.addTransition(new Transition(cx, between(x, y, n + 1,\n          initials, zeros && cx == '0')));\n      else { // cx<cy\n        s.addTransition(new Transition(cx, atLeast(x, n + 1, initials, zeros\n            && cx == '0')));\n        s.addTransition(new Transition(cy, atMost(y, n + 1)));\n        if (cx + 1 < cy) s.addTransition(new Transition((char) (cx + 1),\n            (char) (cy - 1), anyOfRightLength(x, n + 1)));\n      }\n    }\n    return s;\n  }\n\n","sourceOld":"  /**\n   * Constructs sub-automaton corresponding to decimal numbers of value between\n   * x.substring(n) and y.substring(n) and of length x.substring(n).length()\n   * (which must be equal to y.substring(n).length()).\n   */\n  private static State between(String x, String y, int n,\n      Collection<State> initials, boolean zeros) {\n    State s = new State();\n    if (x.length() == n) s.setAccept(true);\n    else {\n      if (zeros) initials.add(s);\n      char cx = x.charAt(n);\n      char cy = y.charAt(n);\n      if (cx == cy) s.addTransition(new Transition(cx, between(x, y, n + 1,\n          initials, zeros && cx == '0')));\n      else { // cx<cy\n        s.addTransition(new Transition(cx, atLeast(x, n + 1, initials, zeros\n            && cx == '0')));\n        s.addTransition(new Transition(cy, atMost(y, n + 1)));\n        if (cx + 1 < cy) s.addTransition(new Transition((char) (cx + 1),\n            (char) (cy - 1), anyOfRightLength(x, n + 1)));\n      }\n    }\n    return s;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f4ef381bf0c2d618c6db830d3dd668c6901c05a","date":1402592253,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicAutomata#between(String,String,int,Collection[State],boolean).mjava","sourceNew":null,"sourceOld":"  /**\n   * Constructs sub-automaton corresponding to decimal numbers of value between\n   * x.substring(n) and y.substring(n) and of length x.substring(n).length()\n   * (which must be equal to y.substring(n).length()).\n   */\n  private static State between(String x, String y, int n,\n      Collection<State> initials, boolean zeros) {\n    State s = new State();\n    if (x.length() == n) s.setAccept(true);\n    else {\n      if (zeros) initials.add(s);\n      char cx = x.charAt(n);\n      char cy = y.charAt(n);\n      if (cx == cy) s.addTransition(new Transition(cx, between(x, y, n + 1,\n          initials, zeros && cx == '0')));\n      else { // cx<cy\n        s.addTransition(new Transition(cx, atLeast(x, n + 1, initials, zeros\n            && cx == '0')));\n        s.addTransition(new Transition(cy, atMost(y, n + 1)));\n        if (cx + 1 < cy) s.addTransition(new Transition((char) (cx + 1),\n            (char) (cy - 1), anyOfRightLength(x, n + 1)));\n      }\n    }\n    return s;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c84485629d80d203608e8975a1139de9933cc38","date":1403166128,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicAutomata#between(String,String,int,Collection[State],boolean).mjava","sourceNew":null,"sourceOld":"  /**\n   * Constructs sub-automaton corresponding to decimal numbers of value between\n   * x.substring(n) and y.substring(n) and of length x.substring(n).length()\n   * (which must be equal to y.substring(n).length()).\n   */\n  private static State between(String x, String y, int n,\n      Collection<State> initials, boolean zeros) {\n    State s = new State();\n    if (x.length() == n) s.setAccept(true);\n    else {\n      if (zeros) initials.add(s);\n      char cx = x.charAt(n);\n      char cy = y.charAt(n);\n      if (cx == cy) s.addTransition(new Transition(cx, between(x, y, n + 1,\n          initials, zeros && cx == '0')));\n      else { // cx<cy\n        s.addTransition(new Transition(cx, atLeast(x, n + 1, initials, zeros\n            && cx == '0')));\n        s.addTransition(new Transition(cy, atMost(y, n + 1)));\n        if (cx + 1 < cy) s.addTransition(new Transition((char) (cx + 1),\n            (char) (cy - 1), anyOfRightLength(x, n + 1)));\n      }\n    }\n    return s;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7f4ef381bf0c2d618c6db830d3dd668c6901c05a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"5c84485629d80d203608e8975a1139de9933cc38":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","7f4ef381bf0c2d618c6db830d3dd668c6901c05a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5c84485629d80d203608e8975a1139de9933cc38"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["7f4ef381bf0c2d618c6db830d3dd668c6901c05a","5c84485629d80d203608e8975a1139de9933cc38"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"7f4ef381bf0c2d618c6db830d3dd668c6901c05a":["5c84485629d80d203608e8975a1139de9933cc38"],"5c84485629d80d203608e8975a1139de9933cc38":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}