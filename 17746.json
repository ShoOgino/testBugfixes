{"path":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testBasicFSA().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testBasicFSA().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/fst/TestFSTs#testBasicFSA().mjava","sourceNew":"  public void testBasicFSA() throws IOException {\n    String[] strings = new String[] {\"station\", \"commotion\", \"elation\", \"elastic\", \"plastic\", \"stop\", \"ftop\", \"ftation\", \"stat\"};\n    String[] strings2 = new String[] {\"station\", \"commotion\", \"elation\", \"elastic\", \"plastic\", \"stop\", \"ftop\", \"ftation\"};\n    IntsRef[] terms = new IntsRef[strings.length];\n    IntsRef[] terms2 = new IntsRef[strings2.length];\n    for(int inputMode=0;inputMode<2;inputMode++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: inputMode=\" + inputModeToString(inputMode));\n      }\n\n      for(int idx=0;idx<strings.length;idx++) {\n        terms[idx] = toIntsRef(strings[idx], inputMode);\n      }\n      for(int idx=0;idx<strings2.length;idx++) {\n        terms2[idx] = toIntsRef(strings2[idx], inputMode);\n      }\n      Arrays.sort(terms2);\n\n      doTest(inputMode, terms);\n    \n      // Test pre-determined FST sizes to make sure we haven't lost minimality (at least on this trivial set of terms):\n\n      // FSA\n      {\n        final Outputs<Object> outputs = NoOutputs.getSingleton();\n        final Object NO_OUTPUT = outputs.getNoOutput();      \n        final List<FSTTester.InputOutput<Object>> pairs = new ArrayList<FSTTester.InputOutput<Object>>(terms2.length);\n        for(IntsRef term : terms2) {\n          pairs.add(new FSTTester.InputOutput<Object>(term, NO_OUTPUT));\n        }\n        FST<Object> fst = new FSTTester<Object>(random, dir, inputMode, pairs, outputs, false).doTest(0, 0, false);\n        assertNotNull(fst);\n        assertEquals(22, fst.getNodeCount());\n        assertEquals(27, fst.getArcCount());\n      }\n\n      // FST ord pos int\n      {\n        final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n        final List<FSTTester.InputOutput<Long>> pairs = new ArrayList<FSTTester.InputOutput<Long>>(terms2.length);\n        for(int idx=0;idx<terms2.length;idx++) {\n          pairs.add(new FSTTester.InputOutput<Long>(terms2[idx], (long) idx));\n        }\n        final FST<Long> fst = new FSTTester<Long>(random, dir, inputMode, pairs, outputs, true).doTest(0, 0, false);\n        assertNotNull(fst);\n        assertEquals(22, fst.getNodeCount());\n        assertEquals(27, fst.getArcCount());\n      }\n\n      // FST byte sequence ord\n      {\n        final ByteSequenceOutputs outputs = ByteSequenceOutputs.getSingleton();\n        final BytesRef NO_OUTPUT = outputs.getNoOutput();      \n        final List<FSTTester.InputOutput<BytesRef>> pairs = new ArrayList<FSTTester.InputOutput<BytesRef>>(terms2.length);\n        for(int idx=0;idx<terms2.length;idx++) {\n          final BytesRef output = random.nextInt(30) == 17 ? NO_OUTPUT : new BytesRef(Integer.toString(idx));\n          pairs.add(new FSTTester.InputOutput<BytesRef>(terms2[idx], output));\n        }\n        final FST<BytesRef> fst = new FSTTester<BytesRef>(random, dir, inputMode, pairs, outputs, false).doTest(0, 0, false);\n        assertNotNull(fst);\n        assertEquals(24, fst.getNodeCount());\n        assertEquals(30, fst.getArcCount());\n      }\n    }\n  }\n\n","sourceOld":"  public void testBasicFSA() throws IOException {\n    String[] strings = new String[] {\"station\", \"commotion\", \"elation\", \"elastic\", \"plastic\", \"stop\", \"ftop\", \"ftation\", \"stat\"};\n    String[] strings2 = new String[] {\"station\", \"commotion\", \"elation\", \"elastic\", \"plastic\", \"stop\", \"ftop\", \"ftation\"};\n    IntsRef[] terms = new IntsRef[strings.length];\n    IntsRef[] terms2 = new IntsRef[strings2.length];\n    for(int inputMode=0;inputMode<2;inputMode++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: inputMode=\" + inputModeToString(inputMode));\n      }\n\n      for(int idx=0;idx<strings.length;idx++) {\n        terms[idx] = toIntsRef(strings[idx], inputMode);\n      }\n      for(int idx=0;idx<strings2.length;idx++) {\n        terms2[idx] = toIntsRef(strings2[idx], inputMode);\n      }\n      Arrays.sort(terms2);\n\n      doTest(inputMode, terms);\n    \n      // Test pre-determined FST sizes to make sure we haven't lost minimality (at least on this trivial set of terms):\n\n      // FSA\n      {\n        final Outputs<Object> outputs = NoOutputs.getSingleton();\n        final Object NO_OUTPUT = outputs.getNoOutput();      \n        final List<FSTTester.InputOutput<Object>> pairs = new ArrayList<FSTTester.InputOutput<Object>>(terms2.length);\n        for(IntsRef term : terms2) {\n          pairs.add(new FSTTester.InputOutput<Object>(term, NO_OUTPUT));\n        }\n        FST<Object> fst = new FSTTester<Object>(random, dir, inputMode, pairs, outputs, false).doTest(0, 0, false);\n        assertNotNull(fst);\n        assertEquals(22, fst.getNodeCount());\n        assertEquals(27, fst.getArcCount());\n      }\n\n      // FST ord pos int\n      {\n        final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n        final List<FSTTester.InputOutput<Long>> pairs = new ArrayList<FSTTester.InputOutput<Long>>(terms2.length);\n        for(int idx=0;idx<terms2.length;idx++) {\n          pairs.add(new FSTTester.InputOutput<Long>(terms2[idx], (long) idx));\n        }\n        final FST<Long> fst = new FSTTester<Long>(random, dir, inputMode, pairs, outputs, true).doTest(0, 0, false);\n        assertNotNull(fst);\n        assertEquals(22, fst.getNodeCount());\n        assertEquals(27, fst.getArcCount());\n      }\n\n      // FST byte sequence ord\n      {\n        final ByteSequenceOutputs outputs = ByteSequenceOutputs.getSingleton();\n        final BytesRef NO_OUTPUT = outputs.getNoOutput();      \n        final List<FSTTester.InputOutput<BytesRef>> pairs = new ArrayList<FSTTester.InputOutput<BytesRef>>(terms2.length);\n        for(int idx=0;idx<terms2.length;idx++) {\n          final BytesRef output = random.nextInt(30) == 17 ? NO_OUTPUT : new BytesRef(Integer.toString(idx));\n          pairs.add(new FSTTester.InputOutput<BytesRef>(terms2[idx], output));\n        }\n        final FST<BytesRef> fst = new FSTTester<BytesRef>(random, dir, inputMode, pairs, outputs, false).doTest(0, 0, false);\n        assertNotNull(fst);\n        assertEquals(24, fst.getNodeCount());\n        assertEquals(30, fst.getArcCount());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testBasicFSA().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testBasicFSA().mjava","sourceNew":"  public void testBasicFSA() throws IOException {\n    String[] strings = new String[] {\"station\", \"commotion\", \"elation\", \"elastic\", \"plastic\", \"stop\", \"ftop\", \"ftation\", \"stat\"};\n    String[] strings2 = new String[] {\"station\", \"commotion\", \"elation\", \"elastic\", \"plastic\", \"stop\", \"ftop\", \"ftation\"};\n    IntsRef[] terms = new IntsRef[strings.length];\n    IntsRef[] terms2 = new IntsRef[strings2.length];\n    for(int inputMode=0;inputMode<2;inputMode++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: inputMode=\" + inputModeToString(inputMode));\n      }\n\n      for(int idx=0;idx<strings.length;idx++) {\n        terms[idx] = toIntsRef(strings[idx], inputMode);\n      }\n      for(int idx=0;idx<strings2.length;idx++) {\n        terms2[idx] = toIntsRef(strings2[idx], inputMode);\n      }\n      Arrays.sort(terms2);\n\n      doTest(inputMode, terms);\n    \n      // Test pre-determined FST sizes to make sure we haven't lost minimality (at least on this trivial set of terms):\n\n      // FSA\n      {\n        final Outputs<Object> outputs = NoOutputs.getSingleton();\n        final Object NO_OUTPUT = outputs.getNoOutput();      \n        final List<FSTTester.InputOutput<Object>> pairs = new ArrayList<FSTTester.InputOutput<Object>>(terms2.length);\n        for(IntsRef term : terms2) {\n          pairs.add(new FSTTester.InputOutput<Object>(term, NO_OUTPUT));\n        }\n        FST<Object> fst = new FSTTester<Object>(random(), dir, inputMode, pairs, outputs, false).doTest(0, 0, false);\n        assertNotNull(fst);\n        assertEquals(22, fst.getNodeCount());\n        assertEquals(27, fst.getArcCount());\n      }\n\n      // FST ord pos int\n      {\n        final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n        final List<FSTTester.InputOutput<Long>> pairs = new ArrayList<FSTTester.InputOutput<Long>>(terms2.length);\n        for(int idx=0;idx<terms2.length;idx++) {\n          pairs.add(new FSTTester.InputOutput<Long>(terms2[idx], (long) idx));\n        }\n        final FST<Long> fst = new FSTTester<Long>(random(), dir, inputMode, pairs, outputs, true).doTest(0, 0, false);\n        assertNotNull(fst);\n        assertEquals(22, fst.getNodeCount());\n        assertEquals(27, fst.getArcCount());\n      }\n\n      // FST byte sequence ord\n      {\n        final ByteSequenceOutputs outputs = ByteSequenceOutputs.getSingleton();\n        final BytesRef NO_OUTPUT = outputs.getNoOutput();      \n        final List<FSTTester.InputOutput<BytesRef>> pairs = new ArrayList<FSTTester.InputOutput<BytesRef>>(terms2.length);\n        for(int idx=0;idx<terms2.length;idx++) {\n          final BytesRef output = random().nextInt(30) == 17 ? NO_OUTPUT : new BytesRef(Integer.toString(idx));\n          pairs.add(new FSTTester.InputOutput<BytesRef>(terms2[idx], output));\n        }\n        final FST<BytesRef> fst = new FSTTester<BytesRef>(random(), dir, inputMode, pairs, outputs, false).doTest(0, 0, false);\n        assertNotNull(fst);\n        assertEquals(24, fst.getNodeCount());\n        assertEquals(30, fst.getArcCount());\n      }\n    }\n  }\n\n","sourceOld":"  public void testBasicFSA() throws IOException {\n    String[] strings = new String[] {\"station\", \"commotion\", \"elation\", \"elastic\", \"plastic\", \"stop\", \"ftop\", \"ftation\", \"stat\"};\n    String[] strings2 = new String[] {\"station\", \"commotion\", \"elation\", \"elastic\", \"plastic\", \"stop\", \"ftop\", \"ftation\"};\n    IntsRef[] terms = new IntsRef[strings.length];\n    IntsRef[] terms2 = new IntsRef[strings2.length];\n    for(int inputMode=0;inputMode<2;inputMode++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: inputMode=\" + inputModeToString(inputMode));\n      }\n\n      for(int idx=0;idx<strings.length;idx++) {\n        terms[idx] = toIntsRef(strings[idx], inputMode);\n      }\n      for(int idx=0;idx<strings2.length;idx++) {\n        terms2[idx] = toIntsRef(strings2[idx], inputMode);\n      }\n      Arrays.sort(terms2);\n\n      doTest(inputMode, terms);\n    \n      // Test pre-determined FST sizes to make sure we haven't lost minimality (at least on this trivial set of terms):\n\n      // FSA\n      {\n        final Outputs<Object> outputs = NoOutputs.getSingleton();\n        final Object NO_OUTPUT = outputs.getNoOutput();      \n        final List<FSTTester.InputOutput<Object>> pairs = new ArrayList<FSTTester.InputOutput<Object>>(terms2.length);\n        for(IntsRef term : terms2) {\n          pairs.add(new FSTTester.InputOutput<Object>(term, NO_OUTPUT));\n        }\n        FST<Object> fst = new FSTTester<Object>(random, dir, inputMode, pairs, outputs, false).doTest(0, 0, false);\n        assertNotNull(fst);\n        assertEquals(22, fst.getNodeCount());\n        assertEquals(27, fst.getArcCount());\n      }\n\n      // FST ord pos int\n      {\n        final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n        final List<FSTTester.InputOutput<Long>> pairs = new ArrayList<FSTTester.InputOutput<Long>>(terms2.length);\n        for(int idx=0;idx<terms2.length;idx++) {\n          pairs.add(new FSTTester.InputOutput<Long>(terms2[idx], (long) idx));\n        }\n        final FST<Long> fst = new FSTTester<Long>(random, dir, inputMode, pairs, outputs, true).doTest(0, 0, false);\n        assertNotNull(fst);\n        assertEquals(22, fst.getNodeCount());\n        assertEquals(27, fst.getArcCount());\n      }\n\n      // FST byte sequence ord\n      {\n        final ByteSequenceOutputs outputs = ByteSequenceOutputs.getSingleton();\n        final BytesRef NO_OUTPUT = outputs.getNoOutput();      \n        final List<FSTTester.InputOutput<BytesRef>> pairs = new ArrayList<FSTTester.InputOutput<BytesRef>>(terms2.length);\n        for(int idx=0;idx<terms2.length;idx++) {\n          final BytesRef output = random.nextInt(30) == 17 ? NO_OUTPUT : new BytesRef(Integer.toString(idx));\n          pairs.add(new FSTTester.InputOutput<BytesRef>(terms2[idx], output));\n        }\n        final FST<BytesRef> fst = new FSTTester<BytesRef>(random, dir, inputMode, pairs, outputs, false).doTest(0, 0, false);\n        assertNotNull(fst);\n        assertEquals(24, fst.getNodeCount());\n        assertEquals(30, fst.getArcCount());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["585f03dd733a01882787148aac088213ca2bf838"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6b1e6a1c51433ebaa34dc0b76d7ab1876072be39","date":1370266419,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testBasicFSA().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testBasicFSA().mjava","sourceNew":"  public void testBasicFSA() throws IOException {\n    String[] strings = new String[] {\"station\", \"commotion\", \"elation\", \"elastic\", \"plastic\", \"stop\", \"ftop\", \"ftation\", \"stat\"};\n    String[] strings2 = new String[] {\"station\", \"commotion\", \"elation\", \"elastic\", \"plastic\", \"stop\", \"ftop\", \"ftation\"};\n    IntsRef[] terms = new IntsRef[strings.length];\n    IntsRef[] terms2 = new IntsRef[strings2.length];\n    for(int inputMode=0;inputMode<2;inputMode++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: inputMode=\" + inputModeToString(inputMode));\n      }\n\n      for(int idx=0;idx<strings.length;idx++) {\n        terms[idx] = toIntsRef(strings[idx], inputMode);\n      }\n      for(int idx=0;idx<strings2.length;idx++) {\n        terms2[idx] = toIntsRef(strings2[idx], inputMode);\n      }\n      Arrays.sort(terms2);\n\n      doTest(inputMode, terms);\n    \n      // Test pre-determined FST sizes to make sure we haven't lost minimality (at least on this trivial set of terms):\n\n      // FSA\n      {\n        final Outputs<Object> outputs = NoOutputs.getSingleton();\n        final Object NO_OUTPUT = outputs.getNoOutput();      \n        final List<FSTTester.InputOutput<Object>> pairs = new ArrayList<FSTTester.InputOutput<Object>>(terms2.length);\n        for(IntsRef term : terms2) {\n          pairs.add(new FSTTester.InputOutput<Object>(term, NO_OUTPUT));\n        }\n        FST<Object> fst = new FSTTester<Object>(random(), dir, inputMode, pairs, outputs, false).doTest(0, 0, false);\n        assertNotNull(fst);\n        assertEquals(22, fst.getNodeCount());\n        assertEquals(27, fst.getArcCount());\n      }\n\n      // FST ord pos int\n      {\n        final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton();\n        final List<FSTTester.InputOutput<Long>> pairs = new ArrayList<FSTTester.InputOutput<Long>>(terms2.length);\n        for(int idx=0;idx<terms2.length;idx++) {\n          pairs.add(new FSTTester.InputOutput<Long>(terms2[idx], (long) idx));\n        }\n        final FST<Long> fst = new FSTTester<Long>(random(), dir, inputMode, pairs, outputs, true).doTest(0, 0, false);\n        assertNotNull(fst);\n        assertEquals(22, fst.getNodeCount());\n        assertEquals(27, fst.getArcCount());\n      }\n\n      // FST byte sequence ord\n      {\n        final ByteSequenceOutputs outputs = ByteSequenceOutputs.getSingleton();\n        final BytesRef NO_OUTPUT = outputs.getNoOutput();      \n        final List<FSTTester.InputOutput<BytesRef>> pairs = new ArrayList<FSTTester.InputOutput<BytesRef>>(terms2.length);\n        for(int idx=0;idx<terms2.length;idx++) {\n          final BytesRef output = random().nextInt(30) == 17 ? NO_OUTPUT : new BytesRef(Integer.toString(idx));\n          pairs.add(new FSTTester.InputOutput<BytesRef>(terms2[idx], output));\n        }\n        final FST<BytesRef> fst = new FSTTester<BytesRef>(random(), dir, inputMode, pairs, outputs, false).doTest(0, 0, false);\n        assertNotNull(fst);\n        assertEquals(24, fst.getNodeCount());\n        assertEquals(30, fst.getArcCount());\n      }\n    }\n  }\n\n","sourceOld":"  public void testBasicFSA() throws IOException {\n    String[] strings = new String[] {\"station\", \"commotion\", \"elation\", \"elastic\", \"plastic\", \"stop\", \"ftop\", \"ftation\", \"stat\"};\n    String[] strings2 = new String[] {\"station\", \"commotion\", \"elation\", \"elastic\", \"plastic\", \"stop\", \"ftop\", \"ftation\"};\n    IntsRef[] terms = new IntsRef[strings.length];\n    IntsRef[] terms2 = new IntsRef[strings2.length];\n    for(int inputMode=0;inputMode<2;inputMode++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: inputMode=\" + inputModeToString(inputMode));\n      }\n\n      for(int idx=0;idx<strings.length;idx++) {\n        terms[idx] = toIntsRef(strings[idx], inputMode);\n      }\n      for(int idx=0;idx<strings2.length;idx++) {\n        terms2[idx] = toIntsRef(strings2[idx], inputMode);\n      }\n      Arrays.sort(terms2);\n\n      doTest(inputMode, terms);\n    \n      // Test pre-determined FST sizes to make sure we haven't lost minimality (at least on this trivial set of terms):\n\n      // FSA\n      {\n        final Outputs<Object> outputs = NoOutputs.getSingleton();\n        final Object NO_OUTPUT = outputs.getNoOutput();      \n        final List<FSTTester.InputOutput<Object>> pairs = new ArrayList<FSTTester.InputOutput<Object>>(terms2.length);\n        for(IntsRef term : terms2) {\n          pairs.add(new FSTTester.InputOutput<Object>(term, NO_OUTPUT));\n        }\n        FST<Object> fst = new FSTTester<Object>(random(), dir, inputMode, pairs, outputs, false).doTest(0, 0, false);\n        assertNotNull(fst);\n        assertEquals(22, fst.getNodeCount());\n        assertEquals(27, fst.getArcCount());\n      }\n\n      // FST ord pos int\n      {\n        final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n        final List<FSTTester.InputOutput<Long>> pairs = new ArrayList<FSTTester.InputOutput<Long>>(terms2.length);\n        for(int idx=0;idx<terms2.length;idx++) {\n          pairs.add(new FSTTester.InputOutput<Long>(terms2[idx], (long) idx));\n        }\n        final FST<Long> fst = new FSTTester<Long>(random(), dir, inputMode, pairs, outputs, true).doTest(0, 0, false);\n        assertNotNull(fst);\n        assertEquals(22, fst.getNodeCount());\n        assertEquals(27, fst.getArcCount());\n      }\n\n      // FST byte sequence ord\n      {\n        final ByteSequenceOutputs outputs = ByteSequenceOutputs.getSingleton();\n        final BytesRef NO_OUTPUT = outputs.getNoOutput();      \n        final List<FSTTester.InputOutput<BytesRef>> pairs = new ArrayList<FSTTester.InputOutput<BytesRef>>(terms2.length);\n        for(int idx=0;idx<terms2.length;idx++) {\n          final BytesRef output = random().nextInt(30) == 17 ? NO_OUTPUT : new BytesRef(Integer.toString(idx));\n          pairs.add(new FSTTester.InputOutput<BytesRef>(terms2[idx], output));\n        }\n        final FST<BytesRef> fst = new FSTTester<BytesRef>(random(), dir, inputMode, pairs, outputs, false).doTest(0, 0, false);\n        assertNotNull(fst);\n        assertEquals(24, fst.getNodeCount());\n        assertEquals(30, fst.getArcCount());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testBasicFSA().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testBasicFSA().mjava","sourceNew":"  public void testBasicFSA() throws IOException {\n    String[] strings = new String[] {\"station\", \"commotion\", \"elation\", \"elastic\", \"plastic\", \"stop\", \"ftop\", \"ftation\", \"stat\"};\n    String[] strings2 = new String[] {\"station\", \"commotion\", \"elation\", \"elastic\", \"plastic\", \"stop\", \"ftop\", \"ftation\"};\n    IntsRef[] terms = new IntsRef[strings.length];\n    IntsRef[] terms2 = new IntsRef[strings2.length];\n    for(int inputMode=0;inputMode<2;inputMode++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: inputMode=\" + inputModeToString(inputMode));\n      }\n\n      for(int idx=0;idx<strings.length;idx++) {\n        terms[idx] = toIntsRef(strings[idx], inputMode);\n      }\n      for(int idx=0;idx<strings2.length;idx++) {\n        terms2[idx] = toIntsRef(strings2[idx], inputMode);\n      }\n      Arrays.sort(terms2);\n\n      doTest(inputMode, terms);\n    \n      // Test pre-determined FST sizes to make sure we haven't lost minimality (at least on this trivial set of terms):\n\n      // FSA\n      {\n        final Outputs<Object> outputs = NoOutputs.getSingleton();\n        final Object NO_OUTPUT = outputs.getNoOutput();      \n        final List<FSTTester.InputOutput<Object>> pairs = new ArrayList<>(terms2.length);\n        for(IntsRef term : terms2) {\n          pairs.add(new FSTTester.InputOutput<>(term, NO_OUTPUT));\n        }\n        FST<Object> fst = new FSTTester<>(random(), dir, inputMode, pairs, outputs, false).doTest(0, 0, false);\n        assertNotNull(fst);\n        assertEquals(22, fst.getNodeCount());\n        assertEquals(27, fst.getArcCount());\n      }\n\n      // FST ord pos int\n      {\n        final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton();\n        final List<FSTTester.InputOutput<Long>> pairs = new ArrayList<>(terms2.length);\n        for(int idx=0;idx<terms2.length;idx++) {\n          pairs.add(new FSTTester.InputOutput<>(terms2[idx], (long) idx));\n        }\n        final FST<Long> fst = new FSTTester<>(random(), dir, inputMode, pairs, outputs, true).doTest(0, 0, false);\n        assertNotNull(fst);\n        assertEquals(22, fst.getNodeCount());\n        assertEquals(27, fst.getArcCount());\n      }\n\n      // FST byte sequence ord\n      {\n        final ByteSequenceOutputs outputs = ByteSequenceOutputs.getSingleton();\n        final BytesRef NO_OUTPUT = outputs.getNoOutput();      \n        final List<FSTTester.InputOutput<BytesRef>> pairs = new ArrayList<>(terms2.length);\n        for(int idx=0;idx<terms2.length;idx++) {\n          final BytesRef output = random().nextInt(30) == 17 ? NO_OUTPUT : new BytesRef(Integer.toString(idx));\n          pairs.add(new FSTTester.InputOutput<>(terms2[idx], output));\n        }\n        final FST<BytesRef> fst = new FSTTester<>(random(), dir, inputMode, pairs, outputs, false).doTest(0, 0, false);\n        assertNotNull(fst);\n        assertEquals(24, fst.getNodeCount());\n        assertEquals(30, fst.getArcCount());\n      }\n    }\n  }\n\n","sourceOld":"  public void testBasicFSA() throws IOException {\n    String[] strings = new String[] {\"station\", \"commotion\", \"elation\", \"elastic\", \"plastic\", \"stop\", \"ftop\", \"ftation\", \"stat\"};\n    String[] strings2 = new String[] {\"station\", \"commotion\", \"elation\", \"elastic\", \"plastic\", \"stop\", \"ftop\", \"ftation\"};\n    IntsRef[] terms = new IntsRef[strings.length];\n    IntsRef[] terms2 = new IntsRef[strings2.length];\n    for(int inputMode=0;inputMode<2;inputMode++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: inputMode=\" + inputModeToString(inputMode));\n      }\n\n      for(int idx=0;idx<strings.length;idx++) {\n        terms[idx] = toIntsRef(strings[idx], inputMode);\n      }\n      for(int idx=0;idx<strings2.length;idx++) {\n        terms2[idx] = toIntsRef(strings2[idx], inputMode);\n      }\n      Arrays.sort(terms2);\n\n      doTest(inputMode, terms);\n    \n      // Test pre-determined FST sizes to make sure we haven't lost minimality (at least on this trivial set of terms):\n\n      // FSA\n      {\n        final Outputs<Object> outputs = NoOutputs.getSingleton();\n        final Object NO_OUTPUT = outputs.getNoOutput();      \n        final List<FSTTester.InputOutput<Object>> pairs = new ArrayList<FSTTester.InputOutput<Object>>(terms2.length);\n        for(IntsRef term : terms2) {\n          pairs.add(new FSTTester.InputOutput<Object>(term, NO_OUTPUT));\n        }\n        FST<Object> fst = new FSTTester<Object>(random(), dir, inputMode, pairs, outputs, false).doTest(0, 0, false);\n        assertNotNull(fst);\n        assertEquals(22, fst.getNodeCount());\n        assertEquals(27, fst.getArcCount());\n      }\n\n      // FST ord pos int\n      {\n        final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton();\n        final List<FSTTester.InputOutput<Long>> pairs = new ArrayList<FSTTester.InputOutput<Long>>(terms2.length);\n        for(int idx=0;idx<terms2.length;idx++) {\n          pairs.add(new FSTTester.InputOutput<Long>(terms2[idx], (long) idx));\n        }\n        final FST<Long> fst = new FSTTester<Long>(random(), dir, inputMode, pairs, outputs, true).doTest(0, 0, false);\n        assertNotNull(fst);\n        assertEquals(22, fst.getNodeCount());\n        assertEquals(27, fst.getArcCount());\n      }\n\n      // FST byte sequence ord\n      {\n        final ByteSequenceOutputs outputs = ByteSequenceOutputs.getSingleton();\n        final BytesRef NO_OUTPUT = outputs.getNoOutput();      \n        final List<FSTTester.InputOutput<BytesRef>> pairs = new ArrayList<FSTTester.InputOutput<BytesRef>>(terms2.length);\n        for(int idx=0;idx<terms2.length;idx++) {\n          final BytesRef output = random().nextInt(30) == 17 ? NO_OUTPUT : new BytesRef(Integer.toString(idx));\n          pairs.add(new FSTTester.InputOutput<BytesRef>(terms2[idx], output));\n        }\n        final FST<BytesRef> fst = new FSTTester<BytesRef>(random(), dir, inputMode, pairs, outputs, false).doTest(0, 0, false);\n        assertNotNull(fst);\n        assertEquals(24, fst.getNodeCount());\n        assertEquals(30, fst.getArcCount());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1abb939fb41b2fe4f89fd518f3da288c0213341d","date":1435657417,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testBasicFSA().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testBasicFSA().mjava","sourceNew":"  public void testBasicFSA() throws IOException {\n    String[] strings = new String[] {\"station\", \"commotion\", \"elation\", \"elastic\", \"plastic\", \"stop\", \"ftop\", \"ftation\", \"stat\"};\n    String[] strings2 = new String[] {\"station\", \"commotion\", \"elation\", \"elastic\", \"plastic\", \"stop\", \"ftop\", \"ftation\"};\n    IntsRef[] terms = new IntsRef[strings.length];\n    IntsRef[] terms2 = new IntsRef[strings2.length];\n    for(int inputMode=0;inputMode<2;inputMode++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: inputMode=\" + inputModeToString(inputMode));\n      }\n\n      for(int idx=0;idx<strings.length;idx++) {\n        terms[idx] = toIntsRef(strings[idx], inputMode);\n      }\n      for(int idx=0;idx<strings2.length;idx++) {\n        terms2[idx] = toIntsRef(strings2[idx], inputMode);\n      }\n      Arrays.sort(terms2);\n\n      doTest(inputMode, terms);\n    \n      // Test pre-determined FST sizes to make sure we haven't lost minimality (at least on this trivial set of terms):\n\n      // FSA\n      {\n        final Outputs<Object> outputs = NoOutputs.getSingleton();\n        final Object NO_OUTPUT = outputs.getNoOutput();      \n        final List<FSTTester.InputOutput<Object>> pairs = new ArrayList<>(terms2.length);\n        for(IntsRef term : terms2) {\n          pairs.add(new FSTTester.InputOutput<>(term, NO_OUTPUT));\n        }\n        FSTTester<Object> tester = new FSTTester<>(random(), dir, inputMode, pairs, outputs, false);\n        FST<Object> fst = tester.doTest(0, 0, false);\n        assertNotNull(fst);\n        assertEquals(22, tester.nodeCount);\n        assertEquals(27, tester.arcCount);\n      }\n\n      // FST ord pos int\n      {\n        final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton();\n        final List<FSTTester.InputOutput<Long>> pairs = new ArrayList<>(terms2.length);\n        for(int idx=0;idx<terms2.length;idx++) {\n          pairs.add(new FSTTester.InputOutput<>(terms2[idx], (long) idx));\n        }\n        FSTTester<Long> tester = new FSTTester<>(random(), dir, inputMode, pairs, outputs, true);\n        final FST<Long> fst = tester.doTest(0, 0, false);\n        assertNotNull(fst);\n        assertEquals(22, tester.nodeCount);\n        assertEquals(27, tester.arcCount);\n      }\n\n      // FST byte sequence ord\n      {\n        final ByteSequenceOutputs outputs = ByteSequenceOutputs.getSingleton();\n        final BytesRef NO_OUTPUT = outputs.getNoOutput();      \n        final List<FSTTester.InputOutput<BytesRef>> pairs = new ArrayList<>(terms2.length);\n        for(int idx=0;idx<terms2.length;idx++) {\n          final BytesRef output = random().nextInt(30) == 17 ? NO_OUTPUT : new BytesRef(Integer.toString(idx));\n          pairs.add(new FSTTester.InputOutput<>(terms2[idx], output));\n        }\n        FSTTester<BytesRef> tester = new FSTTester<>(random(), dir, inputMode, pairs, outputs, false);\n        final FST<BytesRef> fst = tester.doTest(0, 0, false);\n        assertNotNull(fst);\n        assertEquals(24, tester.nodeCount);\n        assertEquals(30, tester.arcCount);\n      }\n    }\n  }\n\n","sourceOld":"  public void testBasicFSA() throws IOException {\n    String[] strings = new String[] {\"station\", \"commotion\", \"elation\", \"elastic\", \"plastic\", \"stop\", \"ftop\", \"ftation\", \"stat\"};\n    String[] strings2 = new String[] {\"station\", \"commotion\", \"elation\", \"elastic\", \"plastic\", \"stop\", \"ftop\", \"ftation\"};\n    IntsRef[] terms = new IntsRef[strings.length];\n    IntsRef[] terms2 = new IntsRef[strings2.length];\n    for(int inputMode=0;inputMode<2;inputMode++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: inputMode=\" + inputModeToString(inputMode));\n      }\n\n      for(int idx=0;idx<strings.length;idx++) {\n        terms[idx] = toIntsRef(strings[idx], inputMode);\n      }\n      for(int idx=0;idx<strings2.length;idx++) {\n        terms2[idx] = toIntsRef(strings2[idx], inputMode);\n      }\n      Arrays.sort(terms2);\n\n      doTest(inputMode, terms);\n    \n      // Test pre-determined FST sizes to make sure we haven't lost minimality (at least on this trivial set of terms):\n\n      // FSA\n      {\n        final Outputs<Object> outputs = NoOutputs.getSingleton();\n        final Object NO_OUTPUT = outputs.getNoOutput();      \n        final List<FSTTester.InputOutput<Object>> pairs = new ArrayList<>(terms2.length);\n        for(IntsRef term : terms2) {\n          pairs.add(new FSTTester.InputOutput<>(term, NO_OUTPUT));\n        }\n        FST<Object> fst = new FSTTester<>(random(), dir, inputMode, pairs, outputs, false).doTest(0, 0, false);\n        assertNotNull(fst);\n        assertEquals(22, fst.getNodeCount());\n        assertEquals(27, fst.getArcCount());\n      }\n\n      // FST ord pos int\n      {\n        final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton();\n        final List<FSTTester.InputOutput<Long>> pairs = new ArrayList<>(terms2.length);\n        for(int idx=0;idx<terms2.length;idx++) {\n          pairs.add(new FSTTester.InputOutput<>(terms2[idx], (long) idx));\n        }\n        final FST<Long> fst = new FSTTester<>(random(), dir, inputMode, pairs, outputs, true).doTest(0, 0, false);\n        assertNotNull(fst);\n        assertEquals(22, fst.getNodeCount());\n        assertEquals(27, fst.getArcCount());\n      }\n\n      // FST byte sequence ord\n      {\n        final ByteSequenceOutputs outputs = ByteSequenceOutputs.getSingleton();\n        final BytesRef NO_OUTPUT = outputs.getNoOutput();      \n        final List<FSTTester.InputOutput<BytesRef>> pairs = new ArrayList<>(terms2.length);\n        for(int idx=0;idx<terms2.length;idx++) {\n          final BytesRef output = random().nextInt(30) == 17 ? NO_OUTPUT : new BytesRef(Integer.toString(idx));\n          pairs.add(new FSTTester.InputOutput<>(terms2[idx], output));\n        }\n        final FST<BytesRef> fst = new FSTTester<>(random(), dir, inputMode, pairs, outputs, false).doTest(0, 0, false);\n        assertNotNull(fst);\n        assertEquals(24, fst.getNodeCount());\n        assertEquals(30, fst.getArcCount());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"585f03dd733a01882787148aac088213ca2bf838","date":1539604388,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testBasicFSA().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testBasicFSA().mjava","sourceNew":"  public void testBasicFSA() throws IOException {\n    String[] strings = new String[] {\"station\", \"commotion\", \"elation\", \"elastic\", \"plastic\", \"stop\", \"ftop\", \"ftation\", \"stat\"};\n    String[] strings2 = new String[] {\"station\", \"commotion\", \"elation\", \"elastic\", \"plastic\", \"stop\", \"ftop\", \"ftation\"};\n    IntsRef[] terms = new IntsRef[strings.length];\n    IntsRef[] terms2 = new IntsRef[strings2.length];\n    for(int inputMode=0;inputMode<2;inputMode++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: inputMode=\" + inputModeToString(inputMode));\n      }\n\n      for(int idx=0;idx<strings.length;idx++) {\n        terms[idx] = toIntsRef(strings[idx], inputMode);\n      }\n      for(int idx=0;idx<strings2.length;idx++) {\n        terms2[idx] = toIntsRef(strings2[idx], inputMode);\n      }\n      Arrays.sort(terms2);\n\n      doTest(inputMode, terms);\n    \n      // Test pre-determined FST sizes to make sure we haven't lost minimality (at least on this trivial set of terms):\n\n      // FSA\n      {\n        final Outputs<Object> outputs = NoOutputs.getSingleton();\n        final Object NO_OUTPUT = outputs.getNoOutput();      \n        final List<FSTTester.InputOutput<Object>> pairs = new ArrayList<>(terms2.length);\n        for(IntsRef term : terms2) {\n          pairs.add(new FSTTester.InputOutput<>(term, NO_OUTPUT));\n        }\n        FSTTester<Object> tester = new FSTTester<>(random(), dir, inputMode, pairs, outputs, false);\n        FST<Object> fst = tester.doTest(0, 0, false);\n        assertNotNull(fst);\n        assertEquals(22, tester.nodeCount);\n        assertEquals(27, tester.arcCount);\n      }\n\n      // FST ord pos int\n      {\n        final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton();\n        final List<FSTTester.InputOutput<Long>> pairs = new ArrayList<>(terms2.length);\n        for(int idx=0;idx<terms2.length;idx++) {\n          pairs.add(new FSTTester.InputOutput<>(terms2[idx], (long) idx));\n        }\n        FSTTester<Long> tester = new FSTTester<>(random(), dir, inputMode, pairs, outputs, true);\n        final FST<Long> fst = tester.doTest(0, 0, false);\n        assertNotNull(fst);\n        assertEquals(22, tester.nodeCount);\n        assertEquals(27, tester.arcCount);\n      }\n\n      // FST byte sequence ord\n      {\n        final ByteSequenceOutputs outputs = ByteSequenceOutputs.getSingleton();\n        final BytesRef NO_OUTPUT = outputs.getNoOutput();      \n        final List<FSTTester.InputOutput<BytesRef>> pairs = new ArrayList<>(terms2.length);\n        for(int idx=0;idx<terms2.length;idx++) {\n          final BytesRef output = idx == 17 ? NO_OUTPUT : new BytesRef(Integer.toString(idx));\n          pairs.add(new FSTTester.InputOutput<>(terms2[idx], output));\n        }\n        FSTTester<BytesRef> tester = new FSTTester<>(random(), dir, inputMode, pairs, outputs, false);\n        final FST<BytesRef> fst = tester.doTest(0, 0, false);\n        assertNotNull(fst);\n        assertEquals(24, tester.nodeCount);\n        assertEquals(30, tester.arcCount);\n      }\n    }\n  }\n\n","sourceOld":"  public void testBasicFSA() throws IOException {\n    String[] strings = new String[] {\"station\", \"commotion\", \"elation\", \"elastic\", \"plastic\", \"stop\", \"ftop\", \"ftation\", \"stat\"};\n    String[] strings2 = new String[] {\"station\", \"commotion\", \"elation\", \"elastic\", \"plastic\", \"stop\", \"ftop\", \"ftation\"};\n    IntsRef[] terms = new IntsRef[strings.length];\n    IntsRef[] terms2 = new IntsRef[strings2.length];\n    for(int inputMode=0;inputMode<2;inputMode++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: inputMode=\" + inputModeToString(inputMode));\n      }\n\n      for(int idx=0;idx<strings.length;idx++) {\n        terms[idx] = toIntsRef(strings[idx], inputMode);\n      }\n      for(int idx=0;idx<strings2.length;idx++) {\n        terms2[idx] = toIntsRef(strings2[idx], inputMode);\n      }\n      Arrays.sort(terms2);\n\n      doTest(inputMode, terms);\n    \n      // Test pre-determined FST sizes to make sure we haven't lost minimality (at least on this trivial set of terms):\n\n      // FSA\n      {\n        final Outputs<Object> outputs = NoOutputs.getSingleton();\n        final Object NO_OUTPUT = outputs.getNoOutput();      \n        final List<FSTTester.InputOutput<Object>> pairs = new ArrayList<>(terms2.length);\n        for(IntsRef term : terms2) {\n          pairs.add(new FSTTester.InputOutput<>(term, NO_OUTPUT));\n        }\n        FSTTester<Object> tester = new FSTTester<>(random(), dir, inputMode, pairs, outputs, false);\n        FST<Object> fst = tester.doTest(0, 0, false);\n        assertNotNull(fst);\n        assertEquals(22, tester.nodeCount);\n        assertEquals(27, tester.arcCount);\n      }\n\n      // FST ord pos int\n      {\n        final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton();\n        final List<FSTTester.InputOutput<Long>> pairs = new ArrayList<>(terms2.length);\n        for(int idx=0;idx<terms2.length;idx++) {\n          pairs.add(new FSTTester.InputOutput<>(terms2[idx], (long) idx));\n        }\n        FSTTester<Long> tester = new FSTTester<>(random(), dir, inputMode, pairs, outputs, true);\n        final FST<Long> fst = tester.doTest(0, 0, false);\n        assertNotNull(fst);\n        assertEquals(22, tester.nodeCount);\n        assertEquals(27, tester.arcCount);\n      }\n\n      // FST byte sequence ord\n      {\n        final ByteSequenceOutputs outputs = ByteSequenceOutputs.getSingleton();\n        final BytesRef NO_OUTPUT = outputs.getNoOutput();      \n        final List<FSTTester.InputOutput<BytesRef>> pairs = new ArrayList<>(terms2.length);\n        for(int idx=0;idx<terms2.length;idx++) {\n          final BytesRef output = random().nextInt(30) == 17 ? NO_OUTPUT : new BytesRef(Integer.toString(idx));\n          pairs.add(new FSTTester.InputOutput<>(terms2[idx], output));\n        }\n        FSTTester<BytesRef> tester = new FSTTester<>(random(), dir, inputMode, pairs, outputs, false);\n        final FST<BytesRef> fst = tester.doTest(0, 0, false);\n        assertNotNull(fst);\n        assertEquals(24, tester.nodeCount);\n        assertEquals(30, tester.arcCount);\n      }\n    }\n  }\n\n","bugFix":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1abb939fb41b2fe4f89fd518f3da288c0213341d":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["6b1e6a1c51433ebaa34dc0b76d7ab1876072be39"],"585f03dd733a01882787148aac088213ca2bf838":["1abb939fb41b2fe4f89fd518f3da288c0213341d"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["585f03dd733a01882787148aac088213ca2bf838"],"6b1e6a1c51433ebaa34dc0b76d7ab1876072be39":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"]},"commit2Childs":{"1abb939fb41b2fe4f89fd518f3da288c0213341d":["585f03dd733a01882787148aac088213ca2bf838"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["1abb939fb41b2fe4f89fd518f3da288c0213341d"],"585f03dd733a01882787148aac088213ca2bf838":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["6b1e6a1c51433ebaa34dc0b76d7ab1876072be39"],"6b1e6a1c51433ebaa34dc0b76d7ab1876072be39":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}