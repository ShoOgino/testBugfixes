{"path":"solr/core/src/java/org/apache/solr/update/AddUpdateCommand#getIndexedId(IndexSchema).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/AddUpdateCommand#getIndexedId(IndexSchema).mjava","pathOld":"solr/src/java/org/apache/solr/update/AddUpdateCommand#getIndexedId(IndexSchema).mjava","sourceNew":"   public String getIndexedId(IndexSchema schema) {\n     if (indexedId == null) {\n       SchemaField sf = schema.getUniqueKeyField();\n       if (sf != null) {\n         if (doc != null) {\n           schema.getUniqueKeyField();\n           Fieldable storedId = doc.getFieldable(sf.getName());\n           indexedId = sf.getType().storedToIndexed(storedId);\n         }\n         if (solrDoc != null) {\n           SolrInputField field = solrDoc.getField(sf.getName());\n           if (field != null) {\n             indexedId = sf.getType().toInternal( field.getFirstValue().toString() );\n           }\n         }\n       }\n     }\n     return indexedId;\n   }\n\n","sourceOld":"   public String getIndexedId(IndexSchema schema) {\n     if (indexedId == null) {\n       SchemaField sf = schema.getUniqueKeyField();\n       if (sf != null) {\n         if (doc != null) {\n           schema.getUniqueKeyField();\n           Fieldable storedId = doc.getFieldable(sf.getName());\n           indexedId = sf.getType().storedToIndexed(storedId);\n         }\n         if (solrDoc != null) {\n           SolrInputField field = solrDoc.getField(sf.getName());\n           if (field != null) {\n             indexedId = sf.getType().toInternal( field.getFirstValue().toString() );\n           }\n         }\n       }\n     }\n     return indexedId;\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/AddUpdateCommand#getIndexedId(IndexSchema).mjava","pathOld":"solr/src/java/org/apache/solr/update/AddUpdateCommand#getIndexedId(IndexSchema).mjava","sourceNew":"   public String getIndexedId(IndexSchema schema) {\n     if (indexedId == null) {\n       SchemaField sf = schema.getUniqueKeyField();\n       if (sf != null) {\n         if (doc != null) {\n           schema.getUniqueKeyField();\n           Fieldable storedId = doc.getFieldable(sf.getName());\n           indexedId = sf.getType().storedToIndexed(storedId);\n         }\n         if (solrDoc != null) {\n           SolrInputField field = solrDoc.getField(sf.getName());\n           if (field != null) {\n             indexedId = sf.getType().toInternal( field.getFirstValue().toString() );\n           }\n         }\n       }\n     }\n     return indexedId;\n   }\n\n","sourceOld":"   public String getIndexedId(IndexSchema schema) {\n     if (indexedId == null) {\n       SchemaField sf = schema.getUniqueKeyField();\n       if (sf != null) {\n         if (doc != null) {\n           schema.getUniqueKeyField();\n           Fieldable storedId = doc.getFieldable(sf.getName());\n           indexedId = sf.getType().storedToIndexed(storedId);\n         }\n         if (solrDoc != null) {\n           SolrInputField field = solrDoc.getField(sf.getName());\n           if (field != null) {\n             indexedId = sf.getType().toInternal( field.getFirstValue().toString() );\n           }\n         }\n       }\n     }\n     return indexedId;\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/AddUpdateCommand#getIndexedId(IndexSchema).mjava","pathOld":"solr/src/java/org/apache/solr/update/AddUpdateCommand#getIndexedId(IndexSchema).mjava","sourceNew":"   public String getIndexedId(IndexSchema schema) {\n     if (indexedId == null) {\n       SchemaField sf = schema.getUniqueKeyField();\n       if (sf != null) {\n         if (doc != null) {\n           schema.getUniqueKeyField();\n           Fieldable storedId = doc.getFieldable(sf.getName());\n           indexedId = sf.getType().storedToIndexed(storedId);\n         }\n         if (solrDoc != null) {\n           SolrInputField field = solrDoc.getField(sf.getName());\n           if (field != null) {\n             indexedId = sf.getType().toInternal( field.getFirstValue().toString() );\n           }\n         }\n       }\n     }\n     return indexedId;\n   }\n\n","sourceOld":"   public String getIndexedId(IndexSchema schema) {\n     if (indexedId == null) {\n       SchemaField sf = schema.getUniqueKeyField();\n       if (sf != null) {\n         if (doc != null) {\n           schema.getUniqueKeyField();\n           Fieldable storedId = doc.getFieldable(sf.getName());\n           indexedId = sf.getType().storedToIndexed(storedId);\n         }\n         if (solrDoc != null) {\n           SolrInputField field = solrDoc.getField(sf.getName());\n           if (field != null) {\n             indexedId = sf.getType().toInternal( field.getFirstValue().toString() );\n           }\n         }\n       }\n     }\n     return indexedId;\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"671279fa1676e7f2755c2745a25abd77a169f992","date":1312053489,"type":4,"author":"Yonik Seeley","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/update/AddUpdateCommand#getIndexedId(IndexSchema).mjava","sourceNew":null,"sourceOld":"   public String getIndexedId(IndexSchema schema) {\n     if (indexedId == null) {\n       SchemaField sf = schema.getUniqueKeyField();\n       if (sf != null) {\n         if (doc != null) {\n           schema.getUniqueKeyField();\n           Fieldable storedId = doc.getFieldable(sf.getName());\n           indexedId = sf.getType().storedToIndexed(storedId);\n         }\n         if (solrDoc != null) {\n           SolrInputField field = solrDoc.getField(sf.getName());\n           if (field != null) {\n             indexedId = sf.getType().toInternal( field.getFirstValue().toString() );\n           }\n         }\n       }\n     }\n     return indexedId;\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"671279fa1676e7f2755c2745a25abd77a169f992":["c26f00b574427b55127e869b935845554afde1fa"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["671279fa1676e7f2755c2745a25abd77a169f992"]},"commit2Childs":{"671279fa1676e7f2755c2745a25abd77a169f992":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["671279fa1676e7f2755c2745a25abd77a169f992"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}