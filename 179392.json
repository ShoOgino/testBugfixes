{"path":"solr/core/src/test/org/apache/solr/TestRandomFaceting#init().mjava","commits":[{"id":"e6ed55563ddbb365606dd561360472978ec2115f","date":1335981033,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/TestRandomFaceting#init().mjava","pathOld":"/dev/null","sourceNew":"  void init() {\n    Random rand = random();\n    clearIndex();\n    model = null;\n    indexSize = rand.nextBoolean() ? (rand.nextInt(10) + 1) : (rand.nextInt(100) + 10);\n\n    types = new ArrayList<FldType>();\n    types.add(new FldType(\"id\",ONE_ONE, new SVal('A','Z',4,4)));\n    types.add(new FldType(\"score_f\",ONE_ONE, new FVal(1,100)));\n    types.add(new FldType(\"foo_i\",ZERO_ONE, new IRange(0,indexSize)));\n    types.add(new FldType(\"small_s\",ZERO_ONE, new SVal('a',(char)('c'+indexSize/3),1,1)));\n    types.add(new FldType(\"small2_s\",ZERO_ONE, new SVal('a',(char)('c'+indexSize/3),1,1)));\n    types.add(new FldType(\"small2_ss\",ZERO_TWO, new SVal('a',(char)('c'+indexSize/3),1,1)));\n    types.add(new FldType(\"small3_ss\",new IRange(0,25), new SVal('A','z',1,1)));\n    types.add(new FldType(\"small_i\",ZERO_ONE, new IRange(0,5+indexSize/3)));\n    types.add(new FldType(\"small2_i\",ZERO_ONE, new IRange(0,5+indexSize/3)));\n    types.add(new FldType(\"small2_is\",ZERO_TWO, new IRange(0,5+indexSize/3)));\n    types.add(new FldType(\"small3_is\",new IRange(0,25), new IRange(0,100)));\n\n    types.add(new FldType(\"missing_i\",new IRange(0,0), new IRange(0,100)));\n    types.add(new FldType(\"missing_is\",new IRange(0,0), new IRange(0,100)));\n    types.add(new FldType(\"missing_s\",new IRange(0,0), new SVal('a','b',1,1)));\n    types.add(new FldType(\"missing_ss\",new IRange(0,0), new SVal('a','b',1,1)));\n\n    // TODO: doubles, multi-floats, ints with precisionStep>0, booleans\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["9328857b6413a6142e4cf01276887353c23898ed"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3843030812a29d2e692ce26b4a8b6972fc7a7964","date":1365529315,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/TestRandomFaceting#init().mjava","pathOld":"solr/core/src/test/org/apache/solr/TestRandomFaceting#init().mjava","sourceNew":"  void init() {\n    Random rand = random();\n    clearIndex();\n    model = null;\n    indexSize = rand.nextBoolean() ? (rand.nextInt(10) + 1) : (rand.nextInt(100) + 10);\n\n    types = new ArrayList<FldType>();\n    types.add(new FldType(\"id\",ONE_ONE, new SVal('A','Z',4,4)));\n    types.add(new FldType(\"score_f\",ONE_ONE, new FVal(1,100)));\n    types.add(new FldType(\"small_f\",ONE_ONE, new FVal(-4,5)));\n    types.add(new FldType(\"small_d\",ONE_ONE, new FVal(-4,5)));\n    types.add(new FldType(\"foo_i\",ZERO_ONE, new IRange(-2,indexSize)));\n    types.add(new FldType(\"small_s\",ZERO_ONE, new SVal('a',(char)('c'+indexSize/3),1,1)));\n    types.add(new FldType(\"small2_s\",ZERO_ONE, new SVal('a',(char)('c'+indexSize/3),1,1)));\n    types.add(new FldType(\"small2_ss\",ZERO_TWO, new SVal('a',(char)('c'+indexSize/3),1,1)));\n    types.add(new FldType(\"small3_ss\",new IRange(0,25), new SVal('A','z',1,1)));\n    types.add(new FldType(\"small_i\",ZERO_ONE, new IRange(-2,5+indexSize/3)));\n    types.add(new FldType(\"small2_i\",ZERO_ONE, new IRange(-1,5+indexSize/3)));\n    types.add(new FldType(\"small2_is\",ZERO_TWO, new IRange(-2,5+indexSize/3)));\n    types.add(new FldType(\"small3_is\",new IRange(0,25), new IRange(-50,50)));\n\n    types.add(new FldType(\"missing_i\",new IRange(0,0), new IRange(0,100)));\n    types.add(new FldType(\"missing_is\",new IRange(0,0), new IRange(0,100)));\n    types.add(new FldType(\"missing_s\",new IRange(0,0), new SVal('a','b',1,1)));\n    types.add(new FldType(\"missing_ss\",new IRange(0,0), new SVal('a','b',1,1)));\n\n    // TODO: doubles, multi-floats, ints with precisionStep>0, booleans\n  }\n\n","sourceOld":"  void init() {\n    Random rand = random();\n    clearIndex();\n    model = null;\n    indexSize = rand.nextBoolean() ? (rand.nextInt(10) + 1) : (rand.nextInt(100) + 10);\n\n    types = new ArrayList<FldType>();\n    types.add(new FldType(\"id\",ONE_ONE, new SVal('A','Z',4,4)));\n    types.add(new FldType(\"score_f\",ONE_ONE, new FVal(1,100)));\n    types.add(new FldType(\"foo_i\",ZERO_ONE, new IRange(0,indexSize)));\n    types.add(new FldType(\"small_s\",ZERO_ONE, new SVal('a',(char)('c'+indexSize/3),1,1)));\n    types.add(new FldType(\"small2_s\",ZERO_ONE, new SVal('a',(char)('c'+indexSize/3),1,1)));\n    types.add(new FldType(\"small2_ss\",ZERO_TWO, new SVal('a',(char)('c'+indexSize/3),1,1)));\n    types.add(new FldType(\"small3_ss\",new IRange(0,25), new SVal('A','z',1,1)));\n    types.add(new FldType(\"small_i\",ZERO_ONE, new IRange(0,5+indexSize/3)));\n    types.add(new FldType(\"small2_i\",ZERO_ONE, new IRange(0,5+indexSize/3)));\n    types.add(new FldType(\"small2_is\",ZERO_TWO, new IRange(0,5+indexSize/3)));\n    types.add(new FldType(\"small3_is\",new IRange(0,25), new IRange(0,100)));\n\n    types.add(new FldType(\"missing_i\",new IRange(0,0), new IRange(0,100)));\n    types.add(new FldType(\"missing_is\",new IRange(0,0), new IRange(0,100)));\n    types.add(new FldType(\"missing_s\",new IRange(0,0), new SVal('a','b',1,1)));\n    types.add(new FldType(\"missing_ss\",new IRange(0,0), new SVal('a','b',1,1)));\n\n    // TODO: doubles, multi-floats, ints with precisionStep>0, booleans\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9328857b6413a6142e4cf01276887353c23898ed","date":1381956348,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/TestRandomFaceting#init().mjava","pathOld":"solr/core/src/test/org/apache/solr/TestRandomFaceting#init().mjava","sourceNew":"  void init() {\n    Random rand = random();\n    clearIndex();\n    model = null;\n    indexSize = rand.nextBoolean() ? (rand.nextInt(10) + 1) : (rand.nextInt(100) + 10);\n\n    types = new ArrayList<FldType>();\n    types.add(new FldType(\"id\",ONE_ONE, new SVal('A','Z',4,4)));\n    types.add(new FldType(\"score_f\",ONE_ONE, new FVal(1,100)));\n    types.add(new FldType(\"small_f\",ONE_ONE, new FVal(-4,5)));\n    types.add(new FldType(\"small_d\",ONE_ONE, new FVal(-4,5)));\n    types.add(new FldType(\"foo_i\",ZERO_ONE, new IRange(-2,indexSize)));\n    types.add(new FldType(\"rare_s1\",new IValsPercent(95,0,5,1), new SVal('a','b',1,5)));\n    types.add(new FldType(\"str_s1\",ZERO_ONE, new SVal('a','z',1,2)));\n    types.add(new FldType(\"long_s1\",ZERO_ONE, new SVal('a','b',1,5)));\n    types.add(new FldType(\"small_s1\",ZERO_ONE, new SVal('a',(char)('c'+indexSize/3),1,1)));\n    types.add(new FldType(\"small2_s1\",ZERO_ONE, new SVal('a',(char)('c'+indexSize/3),1,1)));\n    types.add(new FldType(\"small2_ss\",ZERO_TWO, new SVal('a',(char)('c'+indexSize/3),1,1)));\n    types.add(new FldType(\"small3_ss\",new IRange(0,25), new SVal('A','z',1,1)));\n    types.add(new FldType(\"small_i\",ZERO_ONE, new IRange(-2,5+indexSize/3)));\n    types.add(new FldType(\"small2_i\",ZERO_ONE, new IRange(-1,5+indexSize/3)));\n    types.add(new FldType(\"small2_is\",ZERO_TWO, new IRange(-2,5+indexSize/3)));\n    types.add(new FldType(\"small3_is\",new IRange(0,25), new IRange(-50,50)));\n\n    types.add(new FldType(\"missing_i\",new IRange(0,0), new IRange(0,100)));\n    types.add(new FldType(\"missing_is\",new IRange(0,0), new IRange(0,100)));\n    types.add(new FldType(\"missing_s1\",new IRange(0,0), new SVal('a','b',1,1)));\n    types.add(new FldType(\"missing_ss\",new IRange(0,0), new SVal('a','b',1,1)));\n\n    // TODO: doubles, multi-floats, ints with precisionStep>0, booleans\n  }\n\n","sourceOld":"  void init() {\n    Random rand = random();\n    clearIndex();\n    model = null;\n    indexSize = rand.nextBoolean() ? (rand.nextInt(10) + 1) : (rand.nextInt(100) + 10);\n\n    types = new ArrayList<FldType>();\n    types.add(new FldType(\"id\",ONE_ONE, new SVal('A','Z',4,4)));\n    types.add(new FldType(\"score_f\",ONE_ONE, new FVal(1,100)));\n    types.add(new FldType(\"small_f\",ONE_ONE, new FVal(-4,5)));\n    types.add(new FldType(\"small_d\",ONE_ONE, new FVal(-4,5)));\n    types.add(new FldType(\"foo_i\",ZERO_ONE, new IRange(-2,indexSize)));\n    types.add(new FldType(\"small_s\",ZERO_ONE, new SVal('a',(char)('c'+indexSize/3),1,1)));\n    types.add(new FldType(\"small2_s\",ZERO_ONE, new SVal('a',(char)('c'+indexSize/3),1,1)));\n    types.add(new FldType(\"small2_ss\",ZERO_TWO, new SVal('a',(char)('c'+indexSize/3),1,1)));\n    types.add(new FldType(\"small3_ss\",new IRange(0,25), new SVal('A','z',1,1)));\n    types.add(new FldType(\"small_i\",ZERO_ONE, new IRange(-2,5+indexSize/3)));\n    types.add(new FldType(\"small2_i\",ZERO_ONE, new IRange(-1,5+indexSize/3)));\n    types.add(new FldType(\"small2_is\",ZERO_TWO, new IRange(-2,5+indexSize/3)));\n    types.add(new FldType(\"small3_is\",new IRange(0,25), new IRange(-50,50)));\n\n    types.add(new FldType(\"missing_i\",new IRange(0,0), new IRange(0,100)));\n    types.add(new FldType(\"missing_is\",new IRange(0,0), new IRange(0,100)));\n    types.add(new FldType(\"missing_s\",new IRange(0,0), new SVal('a','b',1,1)));\n    types.add(new FldType(\"missing_ss\",new IRange(0,0), new SVal('a','b',1,1)));\n\n    // TODO: doubles, multi-floats, ints with precisionStep>0, booleans\n  }\n\n","bugFix":["e6ed55563ddbb365606dd561360472978ec2115f"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/TestRandomFaceting#init().mjava","pathOld":"solr/core/src/test/org/apache/solr/TestRandomFaceting#init().mjava","sourceNew":"  void init() {\n    Random rand = random();\n    clearIndex();\n    model = null;\n    indexSize = rand.nextBoolean() ? (rand.nextInt(10) + 1) : (rand.nextInt(100) + 10);\n\n    types = new ArrayList<>();\n    types.add(new FldType(\"id\",ONE_ONE, new SVal('A','Z',4,4)));\n    types.add(new FldType(\"score_f\",ONE_ONE, new FVal(1,100)));\n    types.add(new FldType(\"small_f\",ONE_ONE, new FVal(-4,5)));\n    types.add(new FldType(\"small_d\",ONE_ONE, new FVal(-4,5)));\n    types.add(new FldType(\"foo_i\",ZERO_ONE, new IRange(-2,indexSize)));\n    types.add(new FldType(\"rare_s1\",new IValsPercent(95,0,5,1), new SVal('a','b',1,5)));\n    types.add(new FldType(\"str_s1\",ZERO_ONE, new SVal('a','z',1,2)));\n    types.add(new FldType(\"long_s1\",ZERO_ONE, new SVal('a','b',1,5)));\n    types.add(new FldType(\"small_s1\",ZERO_ONE, new SVal('a',(char)('c'+indexSize/3),1,1)));\n    types.add(new FldType(\"small2_s1\",ZERO_ONE, new SVal('a',(char)('c'+indexSize/3),1,1)));\n    types.add(new FldType(\"small2_ss\",ZERO_TWO, new SVal('a',(char)('c'+indexSize/3),1,1)));\n    types.add(new FldType(\"small3_ss\",new IRange(0,25), new SVal('A','z',1,1)));\n    types.add(new FldType(\"small_i\",ZERO_ONE, new IRange(-2,5+indexSize/3)));\n    types.add(new FldType(\"small2_i\",ZERO_ONE, new IRange(-1,5+indexSize/3)));\n    types.add(new FldType(\"small2_is\",ZERO_TWO, new IRange(-2,5+indexSize/3)));\n    types.add(new FldType(\"small3_is\",new IRange(0,25), new IRange(-50,50)));\n\n    types.add(new FldType(\"missing_i\",new IRange(0,0), new IRange(0,100)));\n    types.add(new FldType(\"missing_is\",new IRange(0,0), new IRange(0,100)));\n    types.add(new FldType(\"missing_s1\",new IRange(0,0), new SVal('a','b',1,1)));\n    types.add(new FldType(\"missing_ss\",new IRange(0,0), new SVal('a','b',1,1)));\n\n    // TODO: doubles, multi-floats, ints with precisionStep>0, booleans\n  }\n\n","sourceOld":"  void init() {\n    Random rand = random();\n    clearIndex();\n    model = null;\n    indexSize = rand.nextBoolean() ? (rand.nextInt(10) + 1) : (rand.nextInt(100) + 10);\n\n    types = new ArrayList<FldType>();\n    types.add(new FldType(\"id\",ONE_ONE, new SVal('A','Z',4,4)));\n    types.add(new FldType(\"score_f\",ONE_ONE, new FVal(1,100)));\n    types.add(new FldType(\"small_f\",ONE_ONE, new FVal(-4,5)));\n    types.add(new FldType(\"small_d\",ONE_ONE, new FVal(-4,5)));\n    types.add(new FldType(\"foo_i\",ZERO_ONE, new IRange(-2,indexSize)));\n    types.add(new FldType(\"rare_s1\",new IValsPercent(95,0,5,1), new SVal('a','b',1,5)));\n    types.add(new FldType(\"str_s1\",ZERO_ONE, new SVal('a','z',1,2)));\n    types.add(new FldType(\"long_s1\",ZERO_ONE, new SVal('a','b',1,5)));\n    types.add(new FldType(\"small_s1\",ZERO_ONE, new SVal('a',(char)('c'+indexSize/3),1,1)));\n    types.add(new FldType(\"small2_s1\",ZERO_ONE, new SVal('a',(char)('c'+indexSize/3),1,1)));\n    types.add(new FldType(\"small2_ss\",ZERO_TWO, new SVal('a',(char)('c'+indexSize/3),1,1)));\n    types.add(new FldType(\"small3_ss\",new IRange(0,25), new SVal('A','z',1,1)));\n    types.add(new FldType(\"small_i\",ZERO_ONE, new IRange(-2,5+indexSize/3)));\n    types.add(new FldType(\"small2_i\",ZERO_ONE, new IRange(-1,5+indexSize/3)));\n    types.add(new FldType(\"small2_is\",ZERO_TWO, new IRange(-2,5+indexSize/3)));\n    types.add(new FldType(\"small3_is\",new IRange(0,25), new IRange(-50,50)));\n\n    types.add(new FldType(\"missing_i\",new IRange(0,0), new IRange(0,100)));\n    types.add(new FldType(\"missing_is\",new IRange(0,0), new IRange(0,100)));\n    types.add(new FldType(\"missing_s1\",new IRange(0,0), new SVal('a','b',1,1)));\n    types.add(new FldType(\"missing_ss\",new IRange(0,0), new SVal('a','b',1,1)));\n\n    // TODO: doubles, multi-floats, ints with precisionStep>0, booleans\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"39342cb658ac11dfcbf4459807fb00eb9ada0218","date":1472876688,"type":3,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/TestRandomFaceting#init().mjava","pathOld":"solr/core/src/test/org/apache/solr/TestRandomFaceting#init().mjava","sourceNew":"  void init() {\n    Random rand = random();\n    clearIndex();\n    model = null;\n    indexSize = rand.nextBoolean() ? (rand.nextInt(10) + 1) : (rand.nextInt(100) + 10);\n\n    types = new ArrayList<>();\n    types.add(new FldType(\"id\",ONE_ONE, new SVal('A','Z',4,4)));\n    types.add(new FldType(\"score_f\",ONE_ONE, new FVal(1,100)));\n    types.add(new FldType(\"small_f\",ONE_ONE, new FVal(-4,5)));\n    types.add(new FldType(\"small_d\",ONE_ONE, new FVal(-4,5)));\n    types.add(new FldType(\"foo_i\",ZERO_ONE, new IRange(-2,indexSize)));\n    types.add(new FldType(\"rare_s1\",new IValsPercent(95,0,5,1), new SVal('a','b',1,5)));\n    types.add(new FldType(\"str_s1\",ZERO_ONE, new SVal('a','z',1,2)));\n    types.add(new FldType(\"long_s1\",ZERO_ONE, new SVal('a','b',1,5)));\n    types.add(new FldType(\"small_s1\",ZERO_ONE, new SVal('a',(char)('c'+indexSize/3),1,1)));\n    types.add(new FldType(\"small2_s1\",ZERO_ONE, new SVal('a',(char)('c'+indexSize/3),1,1)));\n    types.add(new FldType(\"small2_ss\",ZERO_TWO, new SVal('a',(char)('c'+indexSize/3),1,1)));\n    types.add(new FldType(\"small3_ss\",new IRange(0,25), new SVal('A','z',1,1)));\n    types.add(new FldType(\"small_i\",ZERO_ONE, new IRange(-2,5+indexSize/3)));\n    types.add(new FldType(\"small2_i\",ZERO_ONE, new IRange(-1,5+indexSize/3)));\n    types.add(new FldType(\"small2_is\",ZERO_TWO, new IRange(-2,5+indexSize/3)));\n    types.add(new FldType(\"small3_is\",new IRange(0,25), new IRange(-50,50)));\n\n    types.add(new FldType(\"missing_i\",new IRange(0,0), new IRange(0,100)));\n    types.add(new FldType(\"missing_is\",new IRange(0,0), new IRange(0,100)));\n    types.add(new FldType(\"missing_s1\",new IRange(0,0), new SVal('a','b',1,1)));\n    types.add(new FldType(\"missing_ss\",new IRange(0,0), new SVal('a','b',1,1)));\n\n    // TODO: doubles, multi-floats, ints with precisionStep>0, booleans\n    types.add(new FldType(\"small_tf\",ZERO_ONE, new FVal(-4,5)));\n    assert trieFields.matcher(\"small_tf\").matches();\n    assert !trieFields.matcher(\"small_f\").matches();\n    \n    types.add(new FldType(\"foo_ti\",ZERO_ONE, new IRange(-2,indexSize)));\n    assert trieFields.matcher(\"foo_ti\").matches();\n    assert !trieFields.matcher(\"foo_i\").matches();\n    \n    types.add(new FldType(\"bool_b\",ZERO_ONE, new Vals(){\n      @Override\n      public Comparable get() {\n        return random().nextBoolean();\n      }\n      \n    }));\n  }\n\n","sourceOld":"  void init() {\n    Random rand = random();\n    clearIndex();\n    model = null;\n    indexSize = rand.nextBoolean() ? (rand.nextInt(10) + 1) : (rand.nextInt(100) + 10);\n\n    types = new ArrayList<>();\n    types.add(new FldType(\"id\",ONE_ONE, new SVal('A','Z',4,4)));\n    types.add(new FldType(\"score_f\",ONE_ONE, new FVal(1,100)));\n    types.add(new FldType(\"small_f\",ONE_ONE, new FVal(-4,5)));\n    types.add(new FldType(\"small_d\",ONE_ONE, new FVal(-4,5)));\n    types.add(new FldType(\"foo_i\",ZERO_ONE, new IRange(-2,indexSize)));\n    types.add(new FldType(\"rare_s1\",new IValsPercent(95,0,5,1), new SVal('a','b',1,5)));\n    types.add(new FldType(\"str_s1\",ZERO_ONE, new SVal('a','z',1,2)));\n    types.add(new FldType(\"long_s1\",ZERO_ONE, new SVal('a','b',1,5)));\n    types.add(new FldType(\"small_s1\",ZERO_ONE, new SVal('a',(char)('c'+indexSize/3),1,1)));\n    types.add(new FldType(\"small2_s1\",ZERO_ONE, new SVal('a',(char)('c'+indexSize/3),1,1)));\n    types.add(new FldType(\"small2_ss\",ZERO_TWO, new SVal('a',(char)('c'+indexSize/3),1,1)));\n    types.add(new FldType(\"small3_ss\",new IRange(0,25), new SVal('A','z',1,1)));\n    types.add(new FldType(\"small_i\",ZERO_ONE, new IRange(-2,5+indexSize/3)));\n    types.add(new FldType(\"small2_i\",ZERO_ONE, new IRange(-1,5+indexSize/3)));\n    types.add(new FldType(\"small2_is\",ZERO_TWO, new IRange(-2,5+indexSize/3)));\n    types.add(new FldType(\"small3_is\",new IRange(0,25), new IRange(-50,50)));\n\n    types.add(new FldType(\"missing_i\",new IRange(0,0), new IRange(0,100)));\n    types.add(new FldType(\"missing_is\",new IRange(0,0), new IRange(0,100)));\n    types.add(new FldType(\"missing_s1\",new IRange(0,0), new SVal('a','b',1,1)));\n    types.add(new FldType(\"missing_ss\",new IRange(0,0), new SVal('a','b',1,1)));\n\n    // TODO: doubles, multi-floats, ints with precisionStep>0, booleans\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bc8f206328a706450934717bec7ccc22ad166fc0","date":1473142172,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/TestRandomFaceting#init().mjava","pathOld":"solr/core/src/test/org/apache/solr/TestRandomFaceting#init().mjava","sourceNew":"  void init() {\n    Random rand = random();\n    clearIndex();\n    model = null;\n    indexSize = rand.nextBoolean() ? (rand.nextInt(10) + 1) : (rand.nextInt(100) + 10);\n\n    types = new ArrayList<>();\n    types.add(new FldType(\"id\",ONE_ONE, new SVal('A','Z',4,4)));\n    types.add(new FldType(\"score_f\",ONE_ONE, new FVal(1,100)));\n    types.add(new FldType(\"small_f\",ONE_ONE, new FVal(-4,5)));\n    types.add(new FldType(\"small_d\",ONE_ONE, new FVal(-4,5)));\n    types.add(new FldType(\"foo_i\",ZERO_ONE, new IRange(-2,indexSize)));\n    types.add(new FldType(\"rare_s1\",new IValsPercent(95,0,5,1), new SVal('a','b',1,5)));\n    types.add(new FldType(\"str_s1\",ZERO_ONE, new SVal('a','z',1,2)));\n    types.add(new FldType(\"long_s1\",ZERO_ONE, new SVal('a','b',1,5)));\n    types.add(new FldType(\"small_s1\",ZERO_ONE, new SVal('a',(char)('c'+indexSize/3),1,1)));\n    types.add(new FldType(\"small2_s1\",ZERO_ONE, new SVal('a',(char)('c'+indexSize/3),1,1)));\n    types.add(new FldType(\"small2_ss\",ZERO_TWO, new SVal('a',(char)('c'+indexSize/3),1,1)));\n    types.add(new FldType(\"small3_ss\",new IRange(0,25), new SVal('A','z',1,1)));\n    types.add(new FldType(\"small_i\",ZERO_ONE, new IRange(-2,5+indexSize/3)));\n    types.add(new FldType(\"small2_i\",ZERO_ONE, new IRange(-1,5+indexSize/3)));\n    types.add(new FldType(\"small2_is\",ZERO_TWO, new IRange(-2,5+indexSize/3)));\n    types.add(new FldType(\"small3_is\",new IRange(0,25), new IRange(-50,50)));\n\n    types.add(new FldType(\"missing_i\",new IRange(0,0), new IRange(0,100)));\n    types.add(new FldType(\"missing_is\",new IRange(0,0), new IRange(0,100)));\n    types.add(new FldType(\"missing_s1\",new IRange(0,0), new SVal('a','b',1,1)));\n    types.add(new FldType(\"missing_ss\",new IRange(0,0), new SVal('a','b',1,1)));\n\n    // TODO: doubles, multi-floats, ints with precisionStep>0, booleans\n    types.add(new FldType(\"small_tf\",ZERO_ONE, new FVal(-4,5)));\n    assert trieFields.matcher(\"small_tf\").matches();\n    assert !trieFields.matcher(\"small_f\").matches();\n    \n    types.add(new FldType(\"foo_ti\",ZERO_ONE, new IRange(-2,indexSize)));\n    assert trieFields.matcher(\"foo_ti\").matches();\n    assert !trieFields.matcher(\"foo_i\").matches();\n    \n    types.add(new FldType(\"bool_b\",ZERO_ONE, new Vals(){\n      @Override\n      public Comparable get() {\n        return random().nextBoolean();\n      }\n      \n    }));\n  }\n\n","sourceOld":"  void init() {\n    Random rand = random();\n    clearIndex();\n    model = null;\n    indexSize = rand.nextBoolean() ? (rand.nextInt(10) + 1) : (rand.nextInt(100) + 10);\n\n    types = new ArrayList<>();\n    types.add(new FldType(\"id\",ONE_ONE, new SVal('A','Z',4,4)));\n    types.add(new FldType(\"score_f\",ONE_ONE, new FVal(1,100)));\n    types.add(new FldType(\"small_f\",ONE_ONE, new FVal(-4,5)));\n    types.add(new FldType(\"small_d\",ONE_ONE, new FVal(-4,5)));\n    types.add(new FldType(\"foo_i\",ZERO_ONE, new IRange(-2,indexSize)));\n    types.add(new FldType(\"rare_s1\",new IValsPercent(95,0,5,1), new SVal('a','b',1,5)));\n    types.add(new FldType(\"str_s1\",ZERO_ONE, new SVal('a','z',1,2)));\n    types.add(new FldType(\"long_s1\",ZERO_ONE, new SVal('a','b',1,5)));\n    types.add(new FldType(\"small_s1\",ZERO_ONE, new SVal('a',(char)('c'+indexSize/3),1,1)));\n    types.add(new FldType(\"small2_s1\",ZERO_ONE, new SVal('a',(char)('c'+indexSize/3),1,1)));\n    types.add(new FldType(\"small2_ss\",ZERO_TWO, new SVal('a',(char)('c'+indexSize/3),1,1)));\n    types.add(new FldType(\"small3_ss\",new IRange(0,25), new SVal('A','z',1,1)));\n    types.add(new FldType(\"small_i\",ZERO_ONE, new IRange(-2,5+indexSize/3)));\n    types.add(new FldType(\"small2_i\",ZERO_ONE, new IRange(-1,5+indexSize/3)));\n    types.add(new FldType(\"small2_is\",ZERO_TWO, new IRange(-2,5+indexSize/3)));\n    types.add(new FldType(\"small3_is\",new IRange(0,25), new IRange(-50,50)));\n\n    types.add(new FldType(\"missing_i\",new IRange(0,0), new IRange(0,100)));\n    types.add(new FldType(\"missing_is\",new IRange(0,0), new IRange(0,100)));\n    types.add(new FldType(\"missing_s1\",new IRange(0,0), new SVal('a','b',1,1)));\n    types.add(new FldType(\"missing_ss\",new IRange(0,0), new SVal('a','b',1,1)));\n\n    // TODO: doubles, multi-floats, ints with precisionStep>0, booleans\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89424def13674ea17829b41c5883c54ecc31a132","date":1473767373,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/TestRandomFaceting#init().mjava","pathOld":"solr/core/src/test/org/apache/solr/TestRandomFaceting#init().mjava","sourceNew":"  void init() {\n    Random rand = random();\n    clearIndex();\n    model = null;\n    indexSize = rand.nextBoolean() ? (rand.nextInt(10) + 1) : (rand.nextInt(100) + 10);\n\n    types = new ArrayList<>();\n    types.add(new FldType(\"id\",ONE_ONE, new SVal('A','Z',4,4)));\n    types.add(new FldType(\"score_f\",ONE_ONE, new FVal(1,100)));\n    types.add(new FldType(\"small_f\",ONE_ONE, new FVal(-4,5)));\n    types.add(new FldType(\"small_d\",ONE_ONE, new FVal(-4,5)));\n    types.add(new FldType(\"foo_i\",ZERO_ONE, new IRange(-2,indexSize)));\n    types.add(new FldType(\"rare_s1\",new IValsPercent(95,0,5,1), new SVal('a','b',1,5)));\n    types.add(new FldType(\"str_s1\",ZERO_ONE, new SVal('a','z',1,2)));\n    types.add(new FldType(\"long_s1\",ZERO_ONE, new SVal('a','b',1,5)));\n    types.add(new FldType(\"small_s1\",ZERO_ONE, new SVal('a',(char)('c'+indexSize/3),1,1)));\n    types.add(new FldType(\"small2_s1\",ZERO_ONE, new SVal('a',(char)('c'+indexSize/3),1,1)));\n    types.add(new FldType(\"small2_ss\",ZERO_TWO, new SVal('a',(char)('c'+indexSize/3),1,1)));\n    types.add(new FldType(\"small3_ss\",new IRange(0,25), new SVal('A','z',1,1)));\n    types.add(new FldType(\"small_i\",ZERO_ONE, new IRange(-2,5+indexSize/3)));\n    types.add(new FldType(\"small2_i\",ZERO_ONE, new IRange(-1,5+indexSize/3)));\n    types.add(new FldType(\"small2_is\",ZERO_TWO, new IRange(-2,5+indexSize/3)));\n    types.add(new FldType(\"small3_is\",new IRange(0,25), new IRange(-50,50)));\n\n    types.add(new FldType(\"missing_i\",new IRange(0,0), new IRange(0,100)));\n    types.add(new FldType(\"missing_is\",new IRange(0,0), new IRange(0,100)));\n    types.add(new FldType(\"missing_s1\",new IRange(0,0), new SVal('a','b',1,1)));\n    types.add(new FldType(\"missing_ss\",new IRange(0,0), new SVal('a','b',1,1)));\n\n    // TODO: doubles, multi-floats, ints with precisionStep>0, booleans\n    types.add(new FldType(\"small_tf\",ZERO_ONE, new FVal(-4,5)));\n    assert trieFields.matcher(\"small_tf\").matches();\n    assert !trieFields.matcher(\"small_f\").matches();\n    \n    types.add(new FldType(\"foo_ti\",ZERO_ONE, new IRange(-2,indexSize)));\n    assert trieFields.matcher(\"foo_ti\").matches();\n    assert !trieFields.matcher(\"foo_i\").matches();\n    \n    types.add(new FldType(\"bool_b\",ZERO_ONE, new Vals(){\n      @Override\n      public Comparable get() {\n        return random().nextBoolean();\n      }\n      \n    }));\n  }\n\n","sourceOld":"  void init() {\n    Random rand = random();\n    clearIndex();\n    model = null;\n    indexSize = rand.nextBoolean() ? (rand.nextInt(10) + 1) : (rand.nextInt(100) + 10);\n\n    types = new ArrayList<>();\n    types.add(new FldType(\"id\",ONE_ONE, new SVal('A','Z',4,4)));\n    types.add(new FldType(\"score_f\",ONE_ONE, new FVal(1,100)));\n    types.add(new FldType(\"small_f\",ONE_ONE, new FVal(-4,5)));\n    types.add(new FldType(\"small_d\",ONE_ONE, new FVal(-4,5)));\n    types.add(new FldType(\"foo_i\",ZERO_ONE, new IRange(-2,indexSize)));\n    types.add(new FldType(\"rare_s1\",new IValsPercent(95,0,5,1), new SVal('a','b',1,5)));\n    types.add(new FldType(\"str_s1\",ZERO_ONE, new SVal('a','z',1,2)));\n    types.add(new FldType(\"long_s1\",ZERO_ONE, new SVal('a','b',1,5)));\n    types.add(new FldType(\"small_s1\",ZERO_ONE, new SVal('a',(char)('c'+indexSize/3),1,1)));\n    types.add(new FldType(\"small2_s1\",ZERO_ONE, new SVal('a',(char)('c'+indexSize/3),1,1)));\n    types.add(new FldType(\"small2_ss\",ZERO_TWO, new SVal('a',(char)('c'+indexSize/3),1,1)));\n    types.add(new FldType(\"small3_ss\",new IRange(0,25), new SVal('A','z',1,1)));\n    types.add(new FldType(\"small_i\",ZERO_ONE, new IRange(-2,5+indexSize/3)));\n    types.add(new FldType(\"small2_i\",ZERO_ONE, new IRange(-1,5+indexSize/3)));\n    types.add(new FldType(\"small2_is\",ZERO_TWO, new IRange(-2,5+indexSize/3)));\n    types.add(new FldType(\"small3_is\",new IRange(0,25), new IRange(-50,50)));\n\n    types.add(new FldType(\"missing_i\",new IRange(0,0), new IRange(0,100)));\n    types.add(new FldType(\"missing_is\",new IRange(0,0), new IRange(0,100)));\n    types.add(new FldType(\"missing_s1\",new IRange(0,0), new SVal('a','b',1,1)));\n    types.add(new FldType(\"missing_ss\",new IRange(0,0), new SVal('a','b',1,1)));\n\n    // TODO: doubles, multi-floats, ints with precisionStep>0, booleans\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/TestRandomFaceting#init().mjava","pathOld":"solr/core/src/test/org/apache/solr/TestRandomFaceting#init().mjava","sourceNew":"  void init() {\n    Random rand = random();\n    clearIndex();\n    model = null;\n    indexSize = rand.nextBoolean() ? (rand.nextInt(10) + 1) : (rand.nextInt(100) + 10);\n\n    types = new ArrayList<>();\n    types.add(new FldType(\"id\",ONE_ONE, new SVal('A','Z',4,4)));\n    types.add(new FldType(\"score_f\",ONE_ONE, new FVal(1,100)));\n    types.add(new FldType(\"small_f\",ONE_ONE, new FVal(-4,5)));\n    types.add(new FldType(\"small_d\",ONE_ONE, new FVal(-4,5)));\n    types.add(new FldType(\"foo_i\",ZERO_ONE, new IRange(-2,indexSize)));\n    types.add(new FldType(\"rare_s1\",new IValsPercent(95,0,5,1), new SVal('a','b',1,5)));\n    types.add(new FldType(\"str_s1\",ZERO_ONE, new SVal('a','z',1,2)));\n    types.add(new FldType(\"long_s1\",ZERO_ONE, new SVal('a','b',1,5)));\n    types.add(new FldType(\"small_s1\",ZERO_ONE, new SVal('a',(char)('c'+indexSize/3),1,1)));\n    types.add(new FldType(\"small2_s1\",ZERO_ONE, new SVal('a',(char)('c'+indexSize/3),1,1)));\n    types.add(new FldType(\"small2_ss\",ZERO_TWO, new SVal('a',(char)('c'+indexSize/3),1,1)));\n    types.add(new FldType(\"small3_ss\",new IRange(0,25), new SVal('A','z',1,1)));\n    types.add(new FldType(\"small_i\",ZERO_ONE, new IRange(-2,5+indexSize/3)));\n    types.add(new FldType(\"small2_i\",ZERO_ONE, new IRange(-1,5+indexSize/3)));\n    types.add(new FldType(\"small2_is\",ZERO_TWO, new IRange(-2,5+indexSize/3)));\n    types.add(new FldType(\"small3_is\",new IRange(0,25), new IRange(-50,50)));\n\n    types.add(new FldType(\"missing_i\",new IRange(0,0), new IRange(0,100)));\n    types.add(new FldType(\"missing_is\",new IRange(0,0), new IRange(0,100)));\n    types.add(new FldType(\"missing_s1\",new IRange(0,0), new SVal('a','b',1,1)));\n    types.add(new FldType(\"missing_ss\",new IRange(0,0), new SVal('a','b',1,1)));\n\n    // TODO: doubles, multi-floats, ints with precisionStep>0, booleans\n    types.add(new FldType(\"small_tf\",ZERO_ONE, new FVal(-4,5)));\n    assert trieFields.matcher(\"small_tf\").matches();\n    assert !trieFields.matcher(\"small_f\").matches();\n    \n    types.add(new FldType(\"foo_ti\",ZERO_ONE, new IRange(-2,indexSize)));\n    assert trieFields.matcher(\"foo_ti\").matches();\n    assert !trieFields.matcher(\"foo_i\").matches();\n    \n    types.add(new FldType(\"bool_b\",ZERO_ONE, new Vals(){\n      @Override\n      public Comparable get() {\n        return random().nextBoolean();\n      }\n      \n    }));\n  }\n\n","sourceOld":"  void init() {\n    Random rand = random();\n    clearIndex();\n    model = null;\n    indexSize = rand.nextBoolean() ? (rand.nextInt(10) + 1) : (rand.nextInt(100) + 10);\n\n    types = new ArrayList<>();\n    types.add(new FldType(\"id\",ONE_ONE, new SVal('A','Z',4,4)));\n    types.add(new FldType(\"score_f\",ONE_ONE, new FVal(1,100)));\n    types.add(new FldType(\"small_f\",ONE_ONE, new FVal(-4,5)));\n    types.add(new FldType(\"small_d\",ONE_ONE, new FVal(-4,5)));\n    types.add(new FldType(\"foo_i\",ZERO_ONE, new IRange(-2,indexSize)));\n    types.add(new FldType(\"rare_s1\",new IValsPercent(95,0,5,1), new SVal('a','b',1,5)));\n    types.add(new FldType(\"str_s1\",ZERO_ONE, new SVal('a','z',1,2)));\n    types.add(new FldType(\"long_s1\",ZERO_ONE, new SVal('a','b',1,5)));\n    types.add(new FldType(\"small_s1\",ZERO_ONE, new SVal('a',(char)('c'+indexSize/3),1,1)));\n    types.add(new FldType(\"small2_s1\",ZERO_ONE, new SVal('a',(char)('c'+indexSize/3),1,1)));\n    types.add(new FldType(\"small2_ss\",ZERO_TWO, new SVal('a',(char)('c'+indexSize/3),1,1)));\n    types.add(new FldType(\"small3_ss\",new IRange(0,25), new SVal('A','z',1,1)));\n    types.add(new FldType(\"small_i\",ZERO_ONE, new IRange(-2,5+indexSize/3)));\n    types.add(new FldType(\"small2_i\",ZERO_ONE, new IRange(-1,5+indexSize/3)));\n    types.add(new FldType(\"small2_is\",ZERO_TWO, new IRange(-2,5+indexSize/3)));\n    types.add(new FldType(\"small3_is\",new IRange(0,25), new IRange(-50,50)));\n\n    types.add(new FldType(\"missing_i\",new IRange(0,0), new IRange(0,100)));\n    types.add(new FldType(\"missing_is\",new IRange(0,0), new IRange(0,100)));\n    types.add(new FldType(\"missing_s1\",new IRange(0,0), new SVal('a','b',1,1)));\n    types.add(new FldType(\"missing_ss\",new IRange(0,0), new SVal('a','b',1,1)));\n\n    // TODO: doubles, multi-floats, ints with precisionStep>0, booleans\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/TestRandomFaceting#init().mjava","pathOld":"solr/core/src/test/org/apache/solr/TestRandomFaceting#init().mjava","sourceNew":"  void init() {\n    Random rand = random();\n    clearIndex();\n    model = null;\n    indexSize = rand.nextBoolean() ? (rand.nextInt(10) + 1) : (rand.nextInt(100) + 10);\n\n    types = new ArrayList<>();\n    types.add(new FldType(\"id\",ONE_ONE, new SVal('A','Z',4,4)));\n    types.add(new FldType(\"score_f\",ONE_ONE, new FVal(1,100)));\n    types.add(new FldType(\"small_f\",ONE_ONE, new FVal(-4,5)));\n    types.add(new FldType(\"small_d\",ONE_ONE, new FVal(-4,5)));\n    types.add(new FldType(\"foo_i\",ZERO_ONE, new IRange(-2,indexSize)));\n    types.add(new FldType(\"rare_s1\",new IValsPercent(95,0,5,1), new SVal('a','b',1,5)));\n    types.add(new FldType(\"str_s1\",ZERO_ONE, new SVal('a','z',1,2)));\n    types.add(new FldType(\"long_s1\",ZERO_ONE, new SVal('a','b',1,5)));\n    types.add(new FldType(\"small_s1\",ZERO_ONE, new SVal('a',(char)('c'+indexSize/3),1,1)));\n    types.add(new FldType(\"small2_s1\",ZERO_ONE, new SVal('a',(char)('c'+indexSize/3),1,1)));\n    types.add(new FldType(\"small2_ss\",ZERO_TWO, new SVal('a',(char)('c'+indexSize/3),1,1)));\n    types.add(new FldType(\"small3_ss\",new IRange(0,25), new SVal('A','z',1,1)));\n    types.add(new FldType(\"small_i\",ZERO_ONE, new IRange(-2,5+indexSize/3)));\n    types.add(new FldType(\"small2_i\",ZERO_ONE, new IRange(-1,5+indexSize/3)));\n    types.add(new FldType(\"small2_is\",ZERO_TWO, new IRange(-2,5+indexSize/3)));\n    types.add(new FldType(\"small3_is\",new IRange(0,25), new IRange(-50,50)));\n\n    types.add(new FldType(\"missing_i\",new IRange(0,0), new IRange(0,100)));\n    types.add(new FldType(\"missing_is\",new IRange(0,0), new IRange(0,100)));\n    types.add(new FldType(\"missing_s1\",new IRange(0,0), new SVal('a','b',1,1)));\n    types.add(new FldType(\"missing_ss\",new IRange(0,0), new SVal('a','b',1,1)));\n\n    // TODO: doubles, multi-floats, ints with precisionStep>0, booleans\n    types.add(new FldType(\"small_tf\",ZERO_ONE, new FVal(-4,5)));\n    assert trieFields.matcher(\"small_tf\").matches();\n    assert !trieFields.matcher(\"small_f\").matches();\n    \n    types.add(new FldType(\"foo_ti\",ZERO_ONE, new IRange(-2,indexSize)));\n    assert trieFields.matcher(\"foo_ti\").matches();\n    assert !trieFields.matcher(\"foo_i\").matches();\n    \n    types.add(new FldType(\"bool_b\",ZERO_ONE, new Vals(){\n      @Override\n      public Comparable get() {\n        return random().nextBoolean();\n      }\n      \n    }));\n  }\n\n","sourceOld":"  void init() {\n    Random rand = random();\n    clearIndex();\n    model = null;\n    indexSize = rand.nextBoolean() ? (rand.nextInt(10) + 1) : (rand.nextInt(100) + 10);\n\n    types = new ArrayList<>();\n    types.add(new FldType(\"id\",ONE_ONE, new SVal('A','Z',4,4)));\n    types.add(new FldType(\"score_f\",ONE_ONE, new FVal(1,100)));\n    types.add(new FldType(\"small_f\",ONE_ONE, new FVal(-4,5)));\n    types.add(new FldType(\"small_d\",ONE_ONE, new FVal(-4,5)));\n    types.add(new FldType(\"foo_i\",ZERO_ONE, new IRange(-2,indexSize)));\n    types.add(new FldType(\"rare_s1\",new IValsPercent(95,0,5,1), new SVal('a','b',1,5)));\n    types.add(new FldType(\"str_s1\",ZERO_ONE, new SVal('a','z',1,2)));\n    types.add(new FldType(\"long_s1\",ZERO_ONE, new SVal('a','b',1,5)));\n    types.add(new FldType(\"small_s1\",ZERO_ONE, new SVal('a',(char)('c'+indexSize/3),1,1)));\n    types.add(new FldType(\"small2_s1\",ZERO_ONE, new SVal('a',(char)('c'+indexSize/3),1,1)));\n    types.add(new FldType(\"small2_ss\",ZERO_TWO, new SVal('a',(char)('c'+indexSize/3),1,1)));\n    types.add(new FldType(\"small3_ss\",new IRange(0,25), new SVal('A','z',1,1)));\n    types.add(new FldType(\"small_i\",ZERO_ONE, new IRange(-2,5+indexSize/3)));\n    types.add(new FldType(\"small2_i\",ZERO_ONE, new IRange(-1,5+indexSize/3)));\n    types.add(new FldType(\"small2_is\",ZERO_TWO, new IRange(-2,5+indexSize/3)));\n    types.add(new FldType(\"small3_is\",new IRange(0,25), new IRange(-50,50)));\n\n    types.add(new FldType(\"missing_i\",new IRange(0,0), new IRange(0,100)));\n    types.add(new FldType(\"missing_is\",new IRange(0,0), new IRange(0,100)));\n    types.add(new FldType(\"missing_s1\",new IRange(0,0), new SVal('a','b',1,1)));\n    types.add(new FldType(\"missing_ss\",new IRange(0,0), new SVal('a','b',1,1)));\n\n    // TODO: doubles, multi-floats, ints with precisionStep>0, booleans\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98520789adb1d5ad05afb4956eca0944a929688","date":1592430701,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/TestRandomFaceting#init().mjava","pathOld":"solr/core/src/test/org/apache/solr/TestRandomFaceting#init().mjava","sourceNew":"  void init() {\n    Random rand = random();\n    clearIndex();\n    model = null;\n    indexSize = rand.nextBoolean() ? (rand.nextInt(10) + 1) : (rand.nextInt(100) + 10);\n\n    types = new ArrayList<>();\n    types.add(new FldType(\"id\",ONE_ONE, new SVal('A','Z',4,4)));\n    types.add(new FldType(\"score_f\",ONE_ONE, new FVal(1,100)));\n    types.add(new FldType(\"small_f\",ONE_ONE, new FVal(-4,5)));\n    types.add(new FldType(\"small_d\",ONE_ONE, new FVal(-4,5)));\n    types.add(new FldType(\"foo_i\",ZERO_ONE, new IRange(-2,indexSize)));\n    types.add(new FldType(\"rare_s1\",new IValsPercent(95,0,5,1), new SVal('a','b',1,5)));\n    types.add(new FldType(\"str_s1\",ZERO_ONE, new SVal('a','z',1,2)));\n    types.add(new FldType(\"long_s1\",ZERO_ONE, new SVal('a','b',1,5)));\n    types.add(new FldType(\"small_s1\",ZERO_ONE, new SVal('a',(char)('c'+indexSize/3),1,1)));\n    types.add(new FldType(\"small2_s1\",ZERO_ONE, new SVal('a',(char)('c'+indexSize/3),1,1)));\n    types.add(new FldType(\"small2_ss\",ZERO_TWO, new SVal('a',(char)('c'+indexSize/3),1,1)));\n    types.add(new FldType(\"small3_ss\",new IRange(0,25), new SVal('A','z',1,1)));\n    types.add(new FldType(\"small_i\",ZERO_ONE, new IRange(-2,5+indexSize/3)));\n    types.add(new FldType(\"small2_i\",ZERO_ONE, new IRange(-1,5+indexSize/3)));\n    types.add(new FldType(\"small2_is\",ZERO_TWO, new IRange(-2,5+indexSize/3)));\n    types.add(new FldType(\"small3_is\",new IRange(0,25), new IRange(-50,50)));\n\n    types.add(new FldType(\"missing_i\",new IRange(0,0), new IRange(0,100)));\n    types.add(new FldType(\"missing_is\",new IRange(0,0), new IRange(0,100)));\n    types.add(new FldType(\"missing_s1\",new IRange(0,0), new SVal('a','b',1,1)));\n    types.add(new FldType(\"missing_ss\",new IRange(0,0), new SVal('a','b',1,1)));\n\n    // TODO: doubles, multi-floats, ints with precisionStep>0, booleans\n    types.add(new FldType(\"small_tf\",ZERO_ONE, new FVal(-4,5)));\n    assert trieFields.matcher(\"small_tf\").matches();\n    assert !trieFields.matcher(\"small_f\").matches();\n    \n    types.add(new FldType(\"foo_ti\",ZERO_ONE, new IRange(-2,indexSize)));\n    assert trieFields.matcher(\"foo_ti\").matches();\n    assert !trieFields.matcher(\"foo_i\").matches();\n    \n    types.add(new FldType(\"bool_b\",ZERO_ONE, new Vals(){\n      @Override\n      @SuppressWarnings({\"rawtypes\"})\n      public Comparable get() {\n        return random().nextBoolean();\n      }\n      \n    }));\n  }\n\n","sourceOld":"  void init() {\n    Random rand = random();\n    clearIndex();\n    model = null;\n    indexSize = rand.nextBoolean() ? (rand.nextInt(10) + 1) : (rand.nextInt(100) + 10);\n\n    types = new ArrayList<>();\n    types.add(new FldType(\"id\",ONE_ONE, new SVal('A','Z',4,4)));\n    types.add(new FldType(\"score_f\",ONE_ONE, new FVal(1,100)));\n    types.add(new FldType(\"small_f\",ONE_ONE, new FVal(-4,5)));\n    types.add(new FldType(\"small_d\",ONE_ONE, new FVal(-4,5)));\n    types.add(new FldType(\"foo_i\",ZERO_ONE, new IRange(-2,indexSize)));\n    types.add(new FldType(\"rare_s1\",new IValsPercent(95,0,5,1), new SVal('a','b',1,5)));\n    types.add(new FldType(\"str_s1\",ZERO_ONE, new SVal('a','z',1,2)));\n    types.add(new FldType(\"long_s1\",ZERO_ONE, new SVal('a','b',1,5)));\n    types.add(new FldType(\"small_s1\",ZERO_ONE, new SVal('a',(char)('c'+indexSize/3),1,1)));\n    types.add(new FldType(\"small2_s1\",ZERO_ONE, new SVal('a',(char)('c'+indexSize/3),1,1)));\n    types.add(new FldType(\"small2_ss\",ZERO_TWO, new SVal('a',(char)('c'+indexSize/3),1,1)));\n    types.add(new FldType(\"small3_ss\",new IRange(0,25), new SVal('A','z',1,1)));\n    types.add(new FldType(\"small_i\",ZERO_ONE, new IRange(-2,5+indexSize/3)));\n    types.add(new FldType(\"small2_i\",ZERO_ONE, new IRange(-1,5+indexSize/3)));\n    types.add(new FldType(\"small2_is\",ZERO_TWO, new IRange(-2,5+indexSize/3)));\n    types.add(new FldType(\"small3_is\",new IRange(0,25), new IRange(-50,50)));\n\n    types.add(new FldType(\"missing_i\",new IRange(0,0), new IRange(0,100)));\n    types.add(new FldType(\"missing_is\",new IRange(0,0), new IRange(0,100)));\n    types.add(new FldType(\"missing_s1\",new IRange(0,0), new SVal('a','b',1,1)));\n    types.add(new FldType(\"missing_ss\",new IRange(0,0), new SVal('a','b',1,1)));\n\n    // TODO: doubles, multi-floats, ints with precisionStep>0, booleans\n    types.add(new FldType(\"small_tf\",ZERO_ONE, new FVal(-4,5)));\n    assert trieFields.matcher(\"small_tf\").matches();\n    assert !trieFields.matcher(\"small_f\").matches();\n    \n    types.add(new FldType(\"foo_ti\",ZERO_ONE, new IRange(-2,indexSize)));\n    assert trieFields.matcher(\"foo_ti\").matches();\n    assert !trieFields.matcher(\"foo_i\").matches();\n    \n    types.add(new FldType(\"bool_b\",ZERO_ONE, new Vals(){\n      @Override\n      public Comparable get() {\n        return random().nextBoolean();\n      }\n      \n    }));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["9328857b6413a6142e4cf01276887353c23898ed"],"3843030812a29d2e692ce26b4a8b6972fc7a7964":["e6ed55563ddbb365606dd561360472978ec2115f"],"9328857b6413a6142e4cf01276887353c23898ed":["3843030812a29d2e692ce26b4a8b6972fc7a7964"],"e6ed55563ddbb365606dd561360472978ec2115f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","89424def13674ea17829b41c5883c54ecc31a132"],"bc8f206328a706450934717bec7ccc22ad166fc0":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","39342cb658ac11dfcbf4459807fb00eb9ada0218"],"39342cb658ac11dfcbf4459807fb00eb9ada0218":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e98520789adb1d5ad05afb4956eca0944a929688"],"e98520789adb1d5ad05afb4956eca0944a929688":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"89424def13674ea17829b41c5883c54ecc31a132":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","bc8f206328a706450934717bec7ccc22ad166fc0"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","bc8f206328a706450934717bec7ccc22ad166fc0","39342cb658ac11dfcbf4459807fb00eb9ada0218","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","89424def13674ea17829b41c5883c54ecc31a132"],"3843030812a29d2e692ce26b4a8b6972fc7a7964":["9328857b6413a6142e4cf01276887353c23898ed"],"9328857b6413a6142e4cf01276887353c23898ed":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"e6ed55563ddbb365606dd561360472978ec2115f":["3843030812a29d2e692ce26b4a8b6972fc7a7964"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e6ed55563ddbb365606dd561360472978ec2115f"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","e98520789adb1d5ad05afb4956eca0944a929688"],"bc8f206328a706450934717bec7ccc22ad166fc0":["89424def13674ea17829b41c5883c54ecc31a132"],"39342cb658ac11dfcbf4459807fb00eb9ada0218":["bc8f206328a706450934717bec7ccc22ad166fc0"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"89424def13674ea17829b41c5883c54ecc31a132":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"e98520789adb1d5ad05afb4956eca0944a929688":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}