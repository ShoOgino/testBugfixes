{"path":"solr/core/src/test/org/apache/solr/cloud/cdcr/BaseCdcrDistributedZkTest#createCollection(Map[String,List[Integer]],String,Map[String,Object],SolrClient,String).mjava","commits":[{"id":"e7da9d8536c11576df10e348efa79d2739170936","date":1509475399,"type":1,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/cdcr/BaseCdcrDistributedZkTest#createCollection(Map[String,List[Integer]],String,Map[String,Object],SolrClient,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BaseCdcrDistributedZkTest#createCollection(Map[String,List[Integer]],String,Map[String,Object],SolrClient,String).mjava","sourceNew":"  private CollectionAdminResponse createCollection(Map<String, List<Integer>> collectionInfos, String collectionName,\n                                                   Map<String, Object> collectionProps, SolrClient client,\n                                                   String confSetName)\n      throws SolrServerException, IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionParams.CollectionAction.CREATE.toString());\n    for (Map.Entry<String, Object> entry : collectionProps.entrySet()) {\n      if (entry.getValue() != null) params.set(entry.getKey(), String.valueOf(entry.getValue()));\n    }\n    Integer numShards = (Integer) collectionProps.get(NUM_SLICES);\n    if (numShards == null) {\n      String shardNames = (String) collectionProps.get(SHARDS_PROP);\n      numShards = StrUtils.splitSmart(shardNames, ',').size();\n    }\n    Integer replicationFactor = (Integer) collectionProps.get(REPLICATION_FACTOR);\n    if (replicationFactor == null) {\n      replicationFactor = (Integer) OverseerCollectionMessageHandler.COLL_PROPS.get(REPLICATION_FACTOR);\n    }\n\n    if (confSetName != null) {\n      params.set(\"collection.configName\", confSetName);\n    }\n\n    List<Integer> list = new ArrayList<>();\n    list.add(numShards);\n    list.add(replicationFactor);\n    if (collectionInfos != null) {\n      collectionInfos.put(collectionName, list);\n    }\n    params.set(\"name\", collectionName);\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    CollectionAdminResponse res = new CollectionAdminResponse();\n    res.setResponse(client.request(request));\n    return res;\n  }\n\n","sourceOld":"  private CollectionAdminResponse createCollection(Map<String, List<Integer>> collectionInfos, String collectionName,\n                                                   Map<String, Object> collectionProps, SolrClient client,\n                                                   String confSetName)\n      throws SolrServerException, IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionParams.CollectionAction.CREATE.toString());\n    for (Map.Entry<String, Object> entry : collectionProps.entrySet()) {\n      if (entry.getValue() != null) params.set(entry.getKey(), String.valueOf(entry.getValue()));\n    }\n    Integer numShards = (Integer) collectionProps.get(NUM_SLICES);\n    if (numShards == null) {\n      String shardNames = (String) collectionProps.get(SHARDS_PROP);\n      numShards = StrUtils.splitSmart(shardNames, ',').size();\n    }\n    Integer replicationFactor = (Integer) collectionProps.get(REPLICATION_FACTOR);\n    if (replicationFactor == null) {\n      replicationFactor = (Integer) OverseerCollectionMessageHandler.COLL_PROPS.get(REPLICATION_FACTOR);\n    }\n\n    if (confSetName != null) {\n      params.set(\"collection.configName\", confSetName);\n    }\n\n    List<Integer> list = new ArrayList<>();\n    list.add(numShards);\n    list.add(replicationFactor);\n    if (collectionInfos != null) {\n      collectionInfos.put(collectionName, list);\n    }\n    params.set(\"name\", collectionName);\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    CollectionAdminResponse res = new CollectionAdminResponse();\n    res.setResponse(client.request(request));\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a885a9bb91342e3cf8bfcf53610ab8d6307ef3d","date":1509475828,"type":5,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BaseCdcrDistributedZkTest#createCollection(Map[String,List[Integer]],String,Map[String,Object],SolrClient,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/cdcr/BaseCdcrDistributedZkTest#createCollection(Map[String,List[Integer]],String,Map[String,Object],SolrClient,String).mjava","sourceNew":"  private CollectionAdminResponse createCollection(Map<String, List<Integer>> collectionInfos, String collectionName,\n                                                   Map<String, Object> collectionProps, SolrClient client,\n                                                   String confSetName)\n      throws SolrServerException, IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionParams.CollectionAction.CREATE.toString());\n    for (Map.Entry<String, Object> entry : collectionProps.entrySet()) {\n      if (entry.getValue() != null) params.set(entry.getKey(), String.valueOf(entry.getValue()));\n    }\n    Integer numShards = (Integer) collectionProps.get(NUM_SLICES);\n    if (numShards == null) {\n      String shardNames = (String) collectionProps.get(SHARDS_PROP);\n      numShards = StrUtils.splitSmart(shardNames, ',').size();\n    }\n    Integer replicationFactor = (Integer) collectionProps.get(REPLICATION_FACTOR);\n    if (replicationFactor == null) {\n      replicationFactor = (Integer) OverseerCollectionMessageHandler.COLL_PROPS.get(REPLICATION_FACTOR);\n    }\n\n    if (confSetName != null) {\n      params.set(\"collection.configName\", confSetName);\n    }\n\n    List<Integer> list = new ArrayList<>();\n    list.add(numShards);\n    list.add(replicationFactor);\n    if (collectionInfos != null) {\n      collectionInfos.put(collectionName, list);\n    }\n    params.set(\"name\", collectionName);\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    CollectionAdminResponse res = new CollectionAdminResponse();\n    res.setResponse(client.request(request));\n    return res;\n  }\n\n","sourceOld":"  private CollectionAdminResponse createCollection(Map<String, List<Integer>> collectionInfos, String collectionName,\n                                                   Map<String, Object> collectionProps, SolrClient client,\n                                                   String confSetName)\n      throws SolrServerException, IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionParams.CollectionAction.CREATE.toString());\n    for (Map.Entry<String, Object> entry : collectionProps.entrySet()) {\n      if (entry.getValue() != null) params.set(entry.getKey(), String.valueOf(entry.getValue()));\n    }\n    Integer numShards = (Integer) collectionProps.get(NUM_SLICES);\n    if (numShards == null) {\n      String shardNames = (String) collectionProps.get(SHARDS_PROP);\n      numShards = StrUtils.splitSmart(shardNames, ',').size();\n    }\n    Integer replicationFactor = (Integer) collectionProps.get(REPLICATION_FACTOR);\n    if (replicationFactor == null) {\n      replicationFactor = (Integer) OverseerCollectionMessageHandler.COLL_PROPS.get(REPLICATION_FACTOR);\n    }\n\n    if (confSetName != null) {\n      params.set(\"collection.configName\", confSetName);\n    }\n\n    List<Integer> list = new ArrayList<>();\n    list.add(numShards);\n    list.add(replicationFactor);\n    if (collectionInfos != null) {\n      collectionInfos.put(collectionName, list);\n    }\n    params.set(\"name\", collectionName);\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    CollectionAdminResponse res = new CollectionAdminResponse();\n    res.setResponse(client.request(request));\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fba58147c9753bb58bbfbd2ebbbf02aecc1eafde","date":1509748659,"type":1,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/cdcr/BaseCdcrDistributedZkTest#createCollection(Map[String,List[Integer]],String,Map[String,Object],SolrClient,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BaseCdcrDistributedZkTest#createCollection(Map[String,List[Integer]],String,Map[String,Object],SolrClient,String).mjava","sourceNew":"  private CollectionAdminResponse createCollection(Map<String, List<Integer>> collectionInfos, String collectionName,\n                                                   Map<String, Object> collectionProps, SolrClient client,\n                                                   String confSetName)\n      throws SolrServerException, IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionParams.CollectionAction.CREATE.toString());\n    for (Map.Entry<String, Object> entry : collectionProps.entrySet()) {\n      if (entry.getValue() != null) params.set(entry.getKey(), String.valueOf(entry.getValue()));\n    }\n    Integer numShards = (Integer) collectionProps.get(NUM_SLICES);\n    if (numShards == null) {\n      String shardNames = (String) collectionProps.get(SHARDS_PROP);\n      numShards = StrUtils.splitSmart(shardNames, ',').size();\n    }\n    Integer replicationFactor = (Integer) collectionProps.get(REPLICATION_FACTOR);\n    if (replicationFactor == null) {\n      replicationFactor = (Integer) OverseerCollectionMessageHandler.COLL_PROPS.get(REPLICATION_FACTOR);\n    }\n\n    if (confSetName != null) {\n      params.set(\"collection.configName\", confSetName);\n    }\n\n    List<Integer> list = new ArrayList<>();\n    list.add(numShards);\n    list.add(replicationFactor);\n    if (collectionInfos != null) {\n      collectionInfos.put(collectionName, list);\n    }\n    params.set(\"name\", collectionName);\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    CollectionAdminResponse res = new CollectionAdminResponse();\n    res.setResponse(client.request(request));\n    return res;\n  }\n\n","sourceOld":"  private CollectionAdminResponse createCollection(Map<String, List<Integer>> collectionInfos, String collectionName,\n                                                   Map<String, Object> collectionProps, SolrClient client,\n                                                   String confSetName)\n      throws SolrServerException, IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionParams.CollectionAction.CREATE.toString());\n    for (Map.Entry<String, Object> entry : collectionProps.entrySet()) {\n      if (entry.getValue() != null) params.set(entry.getKey(), String.valueOf(entry.getValue()));\n    }\n    Integer numShards = (Integer) collectionProps.get(NUM_SLICES);\n    if (numShards == null) {\n      String shardNames = (String) collectionProps.get(SHARDS_PROP);\n      numShards = StrUtils.splitSmart(shardNames, ',').size();\n    }\n    Integer replicationFactor = (Integer) collectionProps.get(REPLICATION_FACTOR);\n    if (replicationFactor == null) {\n      replicationFactor = (Integer) OverseerCollectionMessageHandler.COLL_PROPS.get(REPLICATION_FACTOR);\n    }\n\n    if (confSetName != null) {\n      params.set(\"collection.configName\", confSetName);\n    }\n\n    List<Integer> list = new ArrayList<>();\n    list.add(numShards);\n    list.add(replicationFactor);\n    if (collectionInfos != null) {\n      collectionInfos.put(collectionName, list);\n    }\n    params.set(\"name\", collectionName);\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    CollectionAdminResponse res = new CollectionAdminResponse();\n    res.setResponse(client.request(request));\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d523b8189b211dd1630166aa77b8c88bb48b3fcc","date":1510144168,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/cdcr/BaseCdcrDistributedZkTest#createCollection(Map[String,List[Integer]],String,Map[String,Object],SolrClient,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BaseCdcrDistributedZkTest#createCollection(Map[String,List[Integer]],String,Map[String,Object],SolrClient,String).mjava","sourceNew":"  private CollectionAdminResponse createCollection(Map<String, List<Integer>> collectionInfos, String collectionName,\n                                                   Map<String, Object> collectionProps, SolrClient client,\n                                                   String confSetName)\n      throws SolrServerException, IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionParams.CollectionAction.CREATE.toString());\n    for (Map.Entry<String, Object> entry : collectionProps.entrySet()) {\n      if (entry.getValue() != null) params.set(entry.getKey(), String.valueOf(entry.getValue()));\n    }\n    Integer numShards = (Integer) collectionProps.get(NUM_SLICES);\n    if (numShards == null) {\n      String shardNames = (String) collectionProps.get(SHARDS_PROP);\n      numShards = StrUtils.splitSmart(shardNames, ',').size();\n    }\n    Integer replicationFactor = (Integer) collectionProps.get(REPLICATION_FACTOR);\n    if (replicationFactor == null) {\n      replicationFactor = (Integer) OverseerCollectionMessageHandler.COLL_PROPS.get(REPLICATION_FACTOR);\n    }\n\n    if (confSetName != null) {\n      params.set(\"collection.configName\", confSetName);\n    }\n\n    List<Integer> list = new ArrayList<>();\n    list.add(numShards);\n    list.add(replicationFactor);\n    if (collectionInfos != null) {\n      collectionInfos.put(collectionName, list);\n    }\n    params.set(\"name\", collectionName);\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    CollectionAdminResponse res = new CollectionAdminResponse();\n    res.setResponse(client.request(request));\n    return res;\n  }\n\n","sourceOld":"  private CollectionAdminResponse createCollection(Map<String, List<Integer>> collectionInfos, String collectionName,\n                                                   Map<String, Object> collectionProps, SolrClient client,\n                                                   String confSetName)\n      throws SolrServerException, IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionParams.CollectionAction.CREATE.toString());\n    for (Map.Entry<String, Object> entry : collectionProps.entrySet()) {\n      if (entry.getValue() != null) params.set(entry.getKey(), String.valueOf(entry.getValue()));\n    }\n    Integer numShards = (Integer) collectionProps.get(NUM_SLICES);\n    if (numShards == null) {\n      String shardNames = (String) collectionProps.get(SHARDS_PROP);\n      numShards = StrUtils.splitSmart(shardNames, ',').size();\n    }\n    Integer replicationFactor = (Integer) collectionProps.get(REPLICATION_FACTOR);\n    if (replicationFactor == null) {\n      replicationFactor = (Integer) OverseerCollectionMessageHandler.COLL_PROPS.get(REPLICATION_FACTOR);\n    }\n\n    if (confSetName != null) {\n      params.set(\"collection.configName\", confSetName);\n    }\n\n    List<Integer> list = new ArrayList<>();\n    list.add(numShards);\n    list.add(replicationFactor);\n    if (collectionInfos != null) {\n      collectionInfos.put(collectionName, list);\n    }\n    params.set(\"name\", collectionName);\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    CollectionAdminResponse res = new CollectionAdminResponse();\n    res.setResponse(client.request(request));\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6146c07c0dee1ae1e42926167acd127fed5ef59d","date":1516129420,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/cdcr/BaseCdcrDistributedZkTest#createCollection(Map[String,List[Integer]],String,Map[String,Object],SolrClient,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/cdcr/BaseCdcrDistributedZkTest#createCollection(Map[String,List[Integer]],String,Map[String,Object],SolrClient,String).mjava","sourceNew":"  private CollectionAdminResponse createCollection(Map<String, List<Integer>> collectionInfos, String collectionName,\n                                                   Map<String, Object> collectionProps, SolrClient client,\n                                                   String confSetName)\n      throws SolrServerException, IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionParams.CollectionAction.CREATE.toString());\n    for (Map.Entry<String, Object> entry : collectionProps.entrySet()) {\n      if (entry.getValue() != null) params.set(entry.getKey(), String.valueOf(entry.getValue()));\n    }\n    Integer numShards = (Integer) collectionProps.get(OverseerCollectionMessageHandler.NUM_SLICES);\n    if (numShards == null) {\n      String shardNames = (String) collectionProps.get(OverseerCollectionMessageHandler.SHARDS_PROP);\n      numShards = StrUtils.splitSmart(shardNames, ',').size();\n    }\n    Integer replicationFactor = (Integer) collectionProps.get(REPLICATION_FACTOR);\n    if (replicationFactor == null) {\n      replicationFactor = (Integer) OverseerCollectionMessageHandler.COLL_PROPS.get(REPLICATION_FACTOR);\n    }\n\n    if (confSetName != null) {\n      params.set(\"collection.configName\", confSetName);\n    }\n\n    List<Integer> list = new ArrayList<>();\n    list.add(numShards);\n    list.add(replicationFactor);\n    if (collectionInfos != null) {\n      collectionInfos.put(collectionName, list);\n    }\n    params.set(\"name\", collectionName);\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    CollectionAdminResponse res = new CollectionAdminResponse();\n    res.setResponse(client.request(request));\n    return res;\n  }\n\n","sourceOld":"  private CollectionAdminResponse createCollection(Map<String, List<Integer>> collectionInfos, String collectionName,\n                                                   Map<String, Object> collectionProps, SolrClient client,\n                                                   String confSetName)\n      throws SolrServerException, IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionParams.CollectionAction.CREATE.toString());\n    for (Map.Entry<String, Object> entry : collectionProps.entrySet()) {\n      if (entry.getValue() != null) params.set(entry.getKey(), String.valueOf(entry.getValue()));\n    }\n    Integer numShards = (Integer) collectionProps.get(NUM_SLICES);\n    if (numShards == null) {\n      String shardNames = (String) collectionProps.get(SHARDS_PROP);\n      numShards = StrUtils.splitSmart(shardNames, ',').size();\n    }\n    Integer replicationFactor = (Integer) collectionProps.get(REPLICATION_FACTOR);\n    if (replicationFactor == null) {\n      replicationFactor = (Integer) OverseerCollectionMessageHandler.COLL_PROPS.get(REPLICATION_FACTOR);\n    }\n\n    if (confSetName != null) {\n      params.set(\"collection.configName\", confSetName);\n    }\n\n    List<Integer> list = new ArrayList<>();\n    list.add(numShards);\n    list.add(replicationFactor);\n    if (collectionInfos != null) {\n      collectionInfos.put(collectionName, list);\n    }\n    params.set(\"name\", collectionName);\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    CollectionAdminResponse res = new CollectionAdminResponse();\n    res.setResponse(client.request(request));\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/cdcr/BaseCdcrDistributedZkTest#createCollection(Map[String,List[Integer]],String,Map[String,Object],SolrClient,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/cdcr/BaseCdcrDistributedZkTest#createCollection(Map[String,List[Integer]],String,Map[String,Object],SolrClient,String).mjava","sourceNew":"  private CollectionAdminResponse createCollection(Map<String, List<Integer>> collectionInfos, String collectionName,\n                                                   Map<String, Object> collectionProps, SolrClient client,\n                                                   String confSetName)\n      throws SolrServerException, IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionParams.CollectionAction.CREATE.toString());\n    for (Map.Entry<String, Object> entry : collectionProps.entrySet()) {\n      if (entry.getValue() != null) params.set(entry.getKey(), String.valueOf(entry.getValue()));\n    }\n    Integer numShards = (Integer) collectionProps.get(OverseerCollectionMessageHandler.NUM_SLICES);\n    if (numShards == null) {\n      String shardNames = (String) collectionProps.get(OverseerCollectionMessageHandler.SHARDS_PROP);\n      numShards = StrUtils.splitSmart(shardNames, ',').size();\n    }\n    Integer replicationFactor = (Integer) collectionProps.get(REPLICATION_FACTOR);\n    if (replicationFactor == null) {\n      replicationFactor = (Integer) OverseerCollectionMessageHandler.COLL_PROPS.get(REPLICATION_FACTOR);\n    }\n\n    if (confSetName != null) {\n      params.set(\"collection.configName\", confSetName);\n    }\n\n    List<Integer> list = new ArrayList<>();\n    list.add(numShards);\n    list.add(replicationFactor);\n    if (collectionInfos != null) {\n      collectionInfos.put(collectionName, list);\n    }\n    params.set(\"name\", collectionName);\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    CollectionAdminResponse res = new CollectionAdminResponse();\n    res.setResponse(client.request(request));\n    return res;\n  }\n\n","sourceOld":"  private CollectionAdminResponse createCollection(Map<String, List<Integer>> collectionInfos, String collectionName,\n                                                   Map<String, Object> collectionProps, SolrClient client,\n                                                   String confSetName)\n      throws SolrServerException, IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionParams.CollectionAction.CREATE.toString());\n    for (Map.Entry<String, Object> entry : collectionProps.entrySet()) {\n      if (entry.getValue() != null) params.set(entry.getKey(), String.valueOf(entry.getValue()));\n    }\n    Integer numShards = (Integer) collectionProps.get(NUM_SLICES);\n    if (numShards == null) {\n      String shardNames = (String) collectionProps.get(SHARDS_PROP);\n      numShards = StrUtils.splitSmart(shardNames, ',').size();\n    }\n    Integer replicationFactor = (Integer) collectionProps.get(REPLICATION_FACTOR);\n    if (replicationFactor == null) {\n      replicationFactor = (Integer) OverseerCollectionMessageHandler.COLL_PROPS.get(REPLICATION_FACTOR);\n    }\n\n    if (confSetName != null) {\n      params.set(\"collection.configName\", confSetName);\n    }\n\n    List<Integer> list = new ArrayList<>();\n    list.add(numShards);\n    list.add(replicationFactor);\n    if (collectionInfos != null) {\n      collectionInfos.put(collectionName, list);\n    }\n    params.set(\"name\", collectionName);\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    CollectionAdminResponse res = new CollectionAdminResponse();\n    res.setResponse(client.request(request));\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"82b686ab2904b3e81184ecea0d238b4ab0885376","date":1529576124,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/cdcr/BaseCdcrDistributedZkTest#createCollection(Map[String,List[Integer]],String,Map[String,Object],SolrClient,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/cdcr/BaseCdcrDistributedZkTest#createCollection(Map[String,List[Integer]],String,Map[String,Object],SolrClient,String).mjava","sourceNew":"  private CollectionAdminResponse createCollection(Map<String, List<Integer>> collectionInfos, String collectionName,\n                                                   Map<String, Object> collectionProps, SolrClient client,\n                                                   String confSetName)\n      throws SolrServerException, IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionParams.CollectionAction.CREATE.toString());\n    for (Map.Entry<String, Object> entry : collectionProps.entrySet()) {\n      if (entry.getValue() != null) params.set(entry.getKey(), String.valueOf(entry.getValue()));\n    }\n    Integer numShards = (Integer) collectionProps.get(OverseerCollectionMessageHandler.NUM_SLICES);\n    if (numShards == null) {\n      String shardNames = (String) collectionProps.get(OverseerCollectionMessageHandler.SHARDS_PROP);\n      numShards = StrUtils.splitSmart(shardNames, ',').size();\n    }\n    Integer replicationFactor = (Integer) collectionProps.get(REPLICATION_FACTOR);\n    if (replicationFactor == null) {\n      replicationFactor = (Integer) OverseerCollectionMessageHandler.COLLECTION_PROPS_AND_DEFAULTS.get(REPLICATION_FACTOR);\n    }\n\n    if (confSetName != null) {\n      params.set(\"collection.configName\", confSetName);\n    }\n\n    List<Integer> list = new ArrayList<>();\n    list.add(numShards);\n    list.add(replicationFactor);\n    if (collectionInfos != null) {\n      collectionInfos.put(collectionName, list);\n    }\n    params.set(\"name\", collectionName);\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    CollectionAdminResponse res = new CollectionAdminResponse();\n    res.setResponse(client.request(request));\n    return res;\n  }\n\n","sourceOld":"  private CollectionAdminResponse createCollection(Map<String, List<Integer>> collectionInfos, String collectionName,\n                                                   Map<String, Object> collectionProps, SolrClient client,\n                                                   String confSetName)\n      throws SolrServerException, IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionParams.CollectionAction.CREATE.toString());\n    for (Map.Entry<String, Object> entry : collectionProps.entrySet()) {\n      if (entry.getValue() != null) params.set(entry.getKey(), String.valueOf(entry.getValue()));\n    }\n    Integer numShards = (Integer) collectionProps.get(OverseerCollectionMessageHandler.NUM_SLICES);\n    if (numShards == null) {\n      String shardNames = (String) collectionProps.get(OverseerCollectionMessageHandler.SHARDS_PROP);\n      numShards = StrUtils.splitSmart(shardNames, ',').size();\n    }\n    Integer replicationFactor = (Integer) collectionProps.get(REPLICATION_FACTOR);\n    if (replicationFactor == null) {\n      replicationFactor = (Integer) OverseerCollectionMessageHandler.COLL_PROPS.get(REPLICATION_FACTOR);\n    }\n\n    if (confSetName != null) {\n      params.set(\"collection.configName\", confSetName);\n    }\n\n    List<Integer> list = new ArrayList<>();\n    list.add(numShards);\n    list.add(replicationFactor);\n    if (collectionInfos != null) {\n      collectionInfos.put(collectionName, list);\n    }\n    params.set(\"name\", collectionName);\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    CollectionAdminResponse res = new CollectionAdminResponse();\n    res.setResponse(client.request(request));\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/cdcr/BaseCdcrDistributedZkTest#createCollection(Map[String,List[Integer]],String,Map[String,Object],SolrClient,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/cdcr/BaseCdcrDistributedZkTest#createCollection(Map[String,List[Integer]],String,Map[String,Object],SolrClient,String).mjava","sourceNew":"  private CollectionAdminResponse createCollection(Map<String, List<Integer>> collectionInfos, String collectionName,\n                                                   Map<String, Object> collectionProps, SolrClient client,\n                                                   String confSetName)\n      throws SolrServerException, IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionParams.CollectionAction.CREATE.toString());\n    for (Map.Entry<String, Object> entry : collectionProps.entrySet()) {\n      if (entry.getValue() != null) params.set(entry.getKey(), String.valueOf(entry.getValue()));\n    }\n    Integer numShards = (Integer) collectionProps.get(OverseerCollectionMessageHandler.NUM_SLICES);\n    if (numShards == null) {\n      String shardNames = (String) collectionProps.get(OverseerCollectionMessageHandler.SHARDS_PROP);\n      numShards = StrUtils.splitSmart(shardNames, ',').size();\n    }\n    Integer replicationFactor = (Integer) collectionProps.get(REPLICATION_FACTOR);\n    if (replicationFactor == null) {\n      replicationFactor = (Integer) OverseerCollectionMessageHandler.COLLECTION_PROPS_AND_DEFAULTS.get(REPLICATION_FACTOR);\n    }\n\n    if (confSetName != null) {\n      params.set(\"collection.configName\", confSetName);\n    }\n\n    List<Integer> list = new ArrayList<>();\n    list.add(numShards);\n    list.add(replicationFactor);\n    if (collectionInfos != null) {\n      collectionInfos.put(collectionName, list);\n    }\n    params.set(\"name\", collectionName);\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    CollectionAdminResponse res = new CollectionAdminResponse();\n    res.setResponse(client.request(request));\n    return res;\n  }\n\n","sourceOld":"  private CollectionAdminResponse createCollection(Map<String, List<Integer>> collectionInfos, String collectionName,\n                                                   Map<String, Object> collectionProps, SolrClient client,\n                                                   String confSetName)\n      throws SolrServerException, IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionParams.CollectionAction.CREATE.toString());\n    for (Map.Entry<String, Object> entry : collectionProps.entrySet()) {\n      if (entry.getValue() != null) params.set(entry.getKey(), String.valueOf(entry.getValue()));\n    }\n    Integer numShards = (Integer) collectionProps.get(OverseerCollectionMessageHandler.NUM_SLICES);\n    if (numShards == null) {\n      String shardNames = (String) collectionProps.get(OverseerCollectionMessageHandler.SHARDS_PROP);\n      numShards = StrUtils.splitSmart(shardNames, ',').size();\n    }\n    Integer replicationFactor = (Integer) collectionProps.get(REPLICATION_FACTOR);\n    if (replicationFactor == null) {\n      replicationFactor = (Integer) OverseerCollectionMessageHandler.COLL_PROPS.get(REPLICATION_FACTOR);\n    }\n\n    if (confSetName != null) {\n      params.set(\"collection.configName\", confSetName);\n    }\n\n    List<Integer> list = new ArrayList<>();\n    list.add(numShards);\n    list.add(replicationFactor);\n    if (collectionInfos != null) {\n      collectionInfos.put(collectionName, list);\n    }\n    params.set(\"name\", collectionName);\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    CollectionAdminResponse res = new CollectionAdminResponse();\n    res.setResponse(client.request(request));\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/cdcr/BaseCdcrDistributedZkTest#createCollection(Map[String,List[Integer]],String,Map[String,Object],SolrClient,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/cdcr/BaseCdcrDistributedZkTest#createCollection(Map[String,List[Integer]],String,Map[String,Object],SolrClient,String).mjava","sourceNew":"  private CollectionAdminResponse createCollection(Map<String, List<Integer>> collectionInfos, String collectionName,\n                                                   Map<String, Object> collectionProps, SolrClient client,\n                                                   String confSetName)\n      throws SolrServerException, IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionParams.CollectionAction.CREATE.toString());\n    for (Map.Entry<String, Object> entry : collectionProps.entrySet()) {\n      if (entry.getValue() != null) params.set(entry.getKey(), String.valueOf(entry.getValue()));\n    }\n    Integer numShards = (Integer) collectionProps.get(OverseerCollectionMessageHandler.NUM_SLICES);\n    if (numShards == null) {\n      String shardNames = (String) collectionProps.get(OverseerCollectionMessageHandler.SHARDS_PROP);\n      numShards = StrUtils.splitSmart(shardNames, ',').size();\n    }\n    Integer replicationFactor = (Integer) collectionProps.get(REPLICATION_FACTOR);\n    if (replicationFactor == null) {\n      replicationFactor = (Integer) OverseerCollectionMessageHandler.COLLECTION_PROPS_AND_DEFAULTS.get(REPLICATION_FACTOR);\n    }\n\n    if (confSetName != null) {\n      params.set(\"collection.configName\", confSetName);\n    }\n\n    List<Integer> list = new ArrayList<>();\n    list.add(numShards);\n    list.add(replicationFactor);\n    if (collectionInfos != null) {\n      collectionInfos.put(collectionName, list);\n    }\n    params.set(\"name\", collectionName);\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    CollectionAdminResponse res = new CollectionAdminResponse();\n    res.setResponse(client.request(request));\n    return res;\n  }\n\n","sourceOld":"  private CollectionAdminResponse createCollection(Map<String, List<Integer>> collectionInfos, String collectionName,\n                                                   Map<String, Object> collectionProps, SolrClient client,\n                                                   String confSetName)\n      throws SolrServerException, IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionParams.CollectionAction.CREATE.toString());\n    for (Map.Entry<String, Object> entry : collectionProps.entrySet()) {\n      if (entry.getValue() != null) params.set(entry.getKey(), String.valueOf(entry.getValue()));\n    }\n    Integer numShards = (Integer) collectionProps.get(OverseerCollectionMessageHandler.NUM_SLICES);\n    if (numShards == null) {\n      String shardNames = (String) collectionProps.get(OverseerCollectionMessageHandler.SHARDS_PROP);\n      numShards = StrUtils.splitSmart(shardNames, ',').size();\n    }\n    Integer replicationFactor = (Integer) collectionProps.get(REPLICATION_FACTOR);\n    if (replicationFactor == null) {\n      replicationFactor = (Integer) OverseerCollectionMessageHandler.COLL_PROPS.get(REPLICATION_FACTOR);\n    }\n\n    if (confSetName != null) {\n      params.set(\"collection.configName\", confSetName);\n    }\n\n    List<Integer> list = new ArrayList<>();\n    list.add(numShards);\n    list.add(replicationFactor);\n    if (collectionInfos != null) {\n      collectionInfos.put(collectionName, list);\n    }\n    params.set(\"name\", collectionName);\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    CollectionAdminResponse res = new CollectionAdminResponse();\n    res.setResponse(client.request(request));\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa2585c33d5d66a1c837c312221eb55ddb3c4300","date":1592493170,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/cdcr/BaseCdcrDistributedZkTest#createCollection(Map[String,List[Integer]],String,Map[String,Object],SolrClient,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/cdcr/BaseCdcrDistributedZkTest#createCollection(Map[String,List[Integer]],String,Map[String,Object],SolrClient,String).mjava","sourceNew":"  private CollectionAdminResponse createCollection(Map<String, List<Integer>> collectionInfos, String collectionName,\n                                                   Map<String, Object> collectionProps, SolrClient client,\n                                                   String confSetName)\n      throws SolrServerException, IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionParams.CollectionAction.CREATE.toString());\n    for (Map.Entry<String, Object> entry : collectionProps.entrySet()) {\n      if (entry.getValue() != null) params.set(entry.getKey(), String.valueOf(entry.getValue()));\n    }\n    Integer numShards = (Integer) collectionProps.get(OverseerCollectionMessageHandler.NUM_SLICES);\n    if (numShards == null) {\n      String shardNames = (String) collectionProps.get(OverseerCollectionMessageHandler.SHARDS_PROP);\n      numShards = StrUtils.splitSmart(shardNames, ',').size();\n    }\n    Integer replicationFactor = (Integer) collectionProps.get(REPLICATION_FACTOR);\n    if (replicationFactor == null) {\n      replicationFactor = (Integer) OverseerCollectionMessageHandler.COLLECTION_PROPS_AND_DEFAULTS.get(REPLICATION_FACTOR);\n    }\n\n    if (confSetName != null) {\n      params.set(\"collection.configName\", confSetName);\n    }\n\n    List<Integer> list = new ArrayList<>();\n    list.add(numShards);\n    list.add(replicationFactor);\n    if (collectionInfos != null) {\n      collectionInfos.put(collectionName, list);\n    }\n    params.set(\"name\", collectionName);\n    @SuppressWarnings({\"rawtypes\"})\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    CollectionAdminResponse res = new CollectionAdminResponse();\n    res.setResponse(client.request(request));\n    return res;\n  }\n\n","sourceOld":"  private CollectionAdminResponse createCollection(Map<String, List<Integer>> collectionInfos, String collectionName,\n                                                   Map<String, Object> collectionProps, SolrClient client,\n                                                   String confSetName)\n      throws SolrServerException, IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionParams.CollectionAction.CREATE.toString());\n    for (Map.Entry<String, Object> entry : collectionProps.entrySet()) {\n      if (entry.getValue() != null) params.set(entry.getKey(), String.valueOf(entry.getValue()));\n    }\n    Integer numShards = (Integer) collectionProps.get(OverseerCollectionMessageHandler.NUM_SLICES);\n    if (numShards == null) {\n      String shardNames = (String) collectionProps.get(OverseerCollectionMessageHandler.SHARDS_PROP);\n      numShards = StrUtils.splitSmart(shardNames, ',').size();\n    }\n    Integer replicationFactor = (Integer) collectionProps.get(REPLICATION_FACTOR);\n    if (replicationFactor == null) {\n      replicationFactor = (Integer) OverseerCollectionMessageHandler.COLLECTION_PROPS_AND_DEFAULTS.get(REPLICATION_FACTOR);\n    }\n\n    if (confSetName != null) {\n      params.set(\"collection.configName\", confSetName);\n    }\n\n    List<Integer> list = new ArrayList<>();\n    list.add(numShards);\n    list.add(replicationFactor);\n    if (collectionInfos != null) {\n      collectionInfos.put(collectionName, list);\n    }\n    params.set(\"name\", collectionName);\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    CollectionAdminResponse res = new CollectionAdminResponse();\n    res.setResponse(client.request(request));\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1","date":1598647393,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/cdcr/BaseCdcrDistributedZkTest#createCollection(Map[String,List[Integer]],String,Map[String,Object],SolrClient,String).mjava","sourceNew":null,"sourceOld":"  private CollectionAdminResponse createCollection(Map<String, List<Integer>> collectionInfos, String collectionName,\n                                                   Map<String, Object> collectionProps, SolrClient client,\n                                                   String confSetName)\n      throws SolrServerException, IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionParams.CollectionAction.CREATE.toString());\n    for (Map.Entry<String, Object> entry : collectionProps.entrySet()) {\n      if (entry.getValue() != null) params.set(entry.getKey(), String.valueOf(entry.getValue()));\n    }\n    Integer numShards = (Integer) collectionProps.get(OverseerCollectionMessageHandler.NUM_SLICES);\n    if (numShards == null) {\n      String shardNames = (String) collectionProps.get(OverseerCollectionMessageHandler.SHARDS_PROP);\n      numShards = StrUtils.splitSmart(shardNames, ',').size();\n    }\n    Integer replicationFactor = (Integer) collectionProps.get(REPLICATION_FACTOR);\n    if (replicationFactor == null) {\n      replicationFactor = (Integer) OverseerCollectionMessageHandler.COLLECTION_PROPS_AND_DEFAULTS.get(REPLICATION_FACTOR);\n    }\n\n    if (confSetName != null) {\n      params.set(\"collection.configName\", confSetName);\n    }\n\n    List<Integer> list = new ArrayList<>();\n    list.add(numShards);\n    list.add(replicationFactor);\n    if (collectionInfos != null) {\n      collectionInfos.put(collectionName, list);\n    }\n    params.set(\"name\", collectionName);\n    @SuppressWarnings({\"rawtypes\"})\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    CollectionAdminResponse res = new CollectionAdminResponse();\n    res.setResponse(client.request(request));\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fba58147c9753bb58bbfbd2ebbbf02aecc1eafde":["1a885a9bb91342e3cf8bfcf53610ab8d6307ef3d"],"b94236357aaa22b76c10629851fe4e376e0cea82":["d523b8189b211dd1630166aa77b8c88bb48b3fcc","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"e7da9d8536c11576df10e348efa79d2739170936":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["1a885a9bb91342e3cf8bfcf53610ab8d6307ef3d","fba58147c9753bb58bbfbd2ebbbf02aecc1eafde"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"82b686ab2904b3e81184ecea0d238b4ab0885376":["b94236357aaa22b76c10629851fe4e376e0cea82"],"1a885a9bb91342e3cf8bfcf53610ab8d6307ef3d":["e7da9d8536c11576df10e348efa79d2739170936"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["b94236357aaa22b76c10629851fe4e376e0cea82","82b686ab2904b3e81184ecea0d238b4ab0885376"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["82b686ab2904b3e81184ecea0d238b4ab0885376"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["b94236357aaa22b76c10629851fe4e376e0cea82","82b686ab2904b3e81184ecea0d238b4ab0885376"]},"commit2Childs":{"fba58147c9753bb58bbfbd2ebbbf02aecc1eafde":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"b94236357aaa22b76c10629851fe4e376e0cea82":["82b686ab2904b3e81184ecea0d238b4ab0885376","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"e7da9d8536c11576df10e348efa79d2739170936":["1a885a9bb91342e3cf8bfcf53610ab8d6307ef3d"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["b94236357aaa22b76c10629851fe4e376e0cea82","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["b94236357aaa22b76c10629851fe4e376e0cea82"],"82b686ab2904b3e81184ecea0d238b4ab0885376":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","aa2585c33d5d66a1c837c312221eb55ddb3c4300","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"1a885a9bb91342e3cf8bfcf53610ab8d6307ef3d":["fba58147c9753bb58bbfbd2ebbbf02aecc1eafde","d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e7da9d8536c11576df10e348efa79d2739170936"],"23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}