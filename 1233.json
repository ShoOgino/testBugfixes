{"path":"solr/src/java/org/apache/solr/handler/ReplicationHandler#getStatistics().mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/ReplicationHandler#getStatistics().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public NamedList getStatistics() {\n    NamedList list = super.getStatistics();\n    if (core != null) {\n      list.add(\"indexSize\", readableSize(getIndexSize()));\n      long[] versionGen = getIndexVersion();\n      list.add(\"indexVersion\", versionGen[0]);\n      list.add(GENERATION, versionGen[1]);\n\n      list.add(\"indexPath\", core.getIndexDir());\n      list.add(\"isMaster\", String.valueOf(isMaster));\n      list.add(\"isSlave\", String.valueOf(isSlave));\n\n      SnapPuller snapPuller = tempSnapPuller;\n      if (snapPuller != null) {\n        list.add(MASTER_URL, snapPuller.getMasterUrl());\n        if (snapPuller.getPollInterval() != null) {\n          list.add(SnapPuller.POLL_INTERVAL, snapPuller.getPollInterval());\n        }\n        list.add(\"isPollingDisabled\", String.valueOf(isPollingDisabled()));\n        list.add(\"isReplicating\", String.valueOf(isReplicating()));\n        long elapsed = getTimeElapsed(snapPuller);\n        long val = SnapPuller.getTotalBytesDownloaded(snapPuller);\n        if (elapsed > 0) {\n          list.add(\"timeElapsed\", elapsed);\n          list.add(\"bytesDownloaded\", val);\n          list.add(\"downloadSpeed\", val / elapsed);\n        }\n        Properties props = loadReplicationProperties();\n        addVal(list, SnapPuller.PREVIOUS_CYCLE_TIME_TAKEN, props, Long.class);\n        addVal(list, SnapPuller.INDEX_REPLICATED_AT, props, Date.class);\n        addVal(list, SnapPuller.CONF_FILES_REPLICATED_AT, props, Date.class);\n        addVal(list, SnapPuller.REPLICATION_FAILED_AT, props, Date.class);\n        addVal(list, SnapPuller.TIMES_FAILED, props, Integer.class);\n        addVal(list, SnapPuller.TIMES_INDEX_REPLICATED, props, Integer.class);\n        addVal(list, SnapPuller.LAST_CYCLE_BYTES_DOWNLOADED, props, Long.class);\n        addVal(list, SnapPuller.TIMES_CONFIG_REPLICATED, props, Integer.class);\n        addVal(list, SnapPuller.CONF_FILES_REPLICATED, props, String.class);\n      }\n      if (isMaster) {\n        if (includeConfFiles != null) list.add(\"confFilesToReplicate\", includeConfFiles);\n        list.add(REPLICATE_AFTER, getReplicateAfterStrings());\n        list.add(\"replicationEnabled\", String.valueOf(replicationEnabled.get()));\n      }\n    }\n    return list;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/handler/ReplicationHandler#getStatistics().mjava","sourceNew":null,"sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public NamedList getStatistics() {\n    NamedList list = super.getStatistics();\n    if (core != null) {\n      list.add(\"indexSize\", readableSize(getIndexSize()));\n      long[] versionGen = getIndexVersion();\n      list.add(\"indexVersion\", versionGen[0]);\n      list.add(GENERATION, versionGen[1]);\n\n      list.add(\"indexPath\", core.getIndexDir());\n      list.add(\"isMaster\", String.valueOf(isMaster));\n      list.add(\"isSlave\", String.valueOf(isSlave));\n\n      SnapPuller snapPuller = tempSnapPuller;\n      if (snapPuller != null) {\n        list.add(MASTER_URL, snapPuller.getMasterUrl());\n        if (snapPuller.getPollInterval() != null) {\n          list.add(SnapPuller.POLL_INTERVAL, snapPuller.getPollInterval());\n        }\n        list.add(\"isPollingDisabled\", String.valueOf(isPollingDisabled()));\n        list.add(\"isReplicating\", String.valueOf(isReplicating()));\n        long elapsed = getTimeElapsed(snapPuller);\n        long val = SnapPuller.getTotalBytesDownloaded(snapPuller);\n        if (elapsed > 0) {\n          list.add(\"timeElapsed\", elapsed);\n          list.add(\"bytesDownloaded\", val);\n          list.add(\"downloadSpeed\", val / elapsed);\n        }\n        Properties props = loadReplicationProperties();\n        addVal(list, SnapPuller.PREVIOUS_CYCLE_TIME_TAKEN, props, Long.class);\n        addVal(list, SnapPuller.INDEX_REPLICATED_AT, props, Date.class);\n        addVal(list, SnapPuller.CONF_FILES_REPLICATED_AT, props, Date.class);\n        addVal(list, SnapPuller.REPLICATION_FAILED_AT, props, Date.class);\n        addVal(list, SnapPuller.TIMES_FAILED, props, Integer.class);\n        addVal(list, SnapPuller.TIMES_INDEX_REPLICATED, props, Integer.class);\n        addVal(list, SnapPuller.LAST_CYCLE_BYTES_DOWNLOADED, props, Long.class);\n        addVal(list, SnapPuller.TIMES_CONFIG_REPLICATED, props, Integer.class);\n        addVal(list, SnapPuller.CONF_FILES_REPLICATED, props, String.class);\n      }\n      if (isMaster) {\n        if (includeConfFiles != null) list.add(\"confFilesToReplicate\", includeConfFiles);\n        list.add(REPLICATE_AFTER, getReplicateAfterStrings());\n        list.add(\"replicationEnabled\", String.valueOf(replicationEnabled.get()));\n      }\n    }\n    return list;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/ReplicationHandler#getStatistics().mjava","pathOld":"src/java/org/apache/solr/handler/ReplicationHandler#getStatistics().mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public NamedList getStatistics() {\n    NamedList list = super.getStatistics();\n    if (core != null) {\n      list.add(\"indexSize\", readableSize(getIndexSize()));\n      long[] versionGen = getIndexVersion();\n      list.add(\"indexVersion\", versionGen[0]);\n      list.add(GENERATION, versionGen[1]);\n\n      list.add(\"indexPath\", core.getIndexDir());\n      list.add(\"isMaster\", String.valueOf(isMaster));\n      list.add(\"isSlave\", String.valueOf(isSlave));\n\n      SnapPuller snapPuller = tempSnapPuller;\n      if (snapPuller != null) {\n        list.add(MASTER_URL, snapPuller.getMasterUrl());\n        if (snapPuller.getPollInterval() != null) {\n          list.add(SnapPuller.POLL_INTERVAL, snapPuller.getPollInterval());\n        }\n        list.add(\"isPollingDisabled\", String.valueOf(isPollingDisabled()));\n        list.add(\"isReplicating\", String.valueOf(isReplicating()));\n        long elapsed = getTimeElapsed(snapPuller);\n        long val = SnapPuller.getTotalBytesDownloaded(snapPuller);\n        if (elapsed > 0) {\n          list.add(\"timeElapsed\", elapsed);\n          list.add(\"bytesDownloaded\", val);\n          list.add(\"downloadSpeed\", val / elapsed);\n        }\n        Properties props = loadReplicationProperties();\n        addVal(list, SnapPuller.PREVIOUS_CYCLE_TIME_TAKEN, props, Long.class);\n        addVal(list, SnapPuller.INDEX_REPLICATED_AT, props, Date.class);\n        addVal(list, SnapPuller.CONF_FILES_REPLICATED_AT, props, Date.class);\n        addVal(list, SnapPuller.REPLICATION_FAILED_AT, props, Date.class);\n        addVal(list, SnapPuller.TIMES_FAILED, props, Integer.class);\n        addVal(list, SnapPuller.TIMES_INDEX_REPLICATED, props, Integer.class);\n        addVal(list, SnapPuller.LAST_CYCLE_BYTES_DOWNLOADED, props, Long.class);\n        addVal(list, SnapPuller.TIMES_CONFIG_REPLICATED, props, Integer.class);\n        addVal(list, SnapPuller.CONF_FILES_REPLICATED, props, String.class);\n      }\n      if (isMaster) {\n        if (includeConfFiles != null) list.add(\"confFilesToReplicate\", includeConfFiles);\n        list.add(REPLICATE_AFTER, getReplicateAfterStrings());\n        list.add(\"replicationEnabled\", String.valueOf(replicationEnabled.get()));\n      }\n    }\n    return list;\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public NamedList getStatistics() {\n    NamedList list = super.getStatistics();\n    if (core != null) {\n      list.add(\"indexSize\", readableSize(getIndexSize()));\n      long[] versionGen = getIndexVersion();\n      list.add(\"indexVersion\", versionGen[0]);\n      list.add(GENERATION, versionGen[1]);\n\n      list.add(\"indexPath\", core.getIndexDir());\n      list.add(\"isMaster\", String.valueOf(isMaster));\n      list.add(\"isSlave\", String.valueOf(isSlave));\n\n      SnapPuller snapPuller = tempSnapPuller;\n      if (snapPuller != null) {\n        list.add(MASTER_URL, snapPuller.getMasterUrl());\n        if (snapPuller.getPollInterval() != null) {\n          list.add(SnapPuller.POLL_INTERVAL, snapPuller.getPollInterval());\n        }\n        list.add(\"isPollingDisabled\", String.valueOf(isPollingDisabled()));\n        list.add(\"isReplicating\", String.valueOf(isReplicating()));\n        long elapsed = getTimeElapsed(snapPuller);\n        long val = SnapPuller.getTotalBytesDownloaded(snapPuller);\n        if (elapsed > 0) {\n          list.add(\"timeElapsed\", elapsed);\n          list.add(\"bytesDownloaded\", val);\n          list.add(\"downloadSpeed\", val / elapsed);\n        }\n        Properties props = loadReplicationProperties();\n        addVal(list, SnapPuller.PREVIOUS_CYCLE_TIME_TAKEN, props, Long.class);\n        addVal(list, SnapPuller.INDEX_REPLICATED_AT, props, Date.class);\n        addVal(list, SnapPuller.CONF_FILES_REPLICATED_AT, props, Date.class);\n        addVal(list, SnapPuller.REPLICATION_FAILED_AT, props, Date.class);\n        addVal(list, SnapPuller.TIMES_FAILED, props, Integer.class);\n        addVal(list, SnapPuller.TIMES_INDEX_REPLICATED, props, Integer.class);\n        addVal(list, SnapPuller.LAST_CYCLE_BYTES_DOWNLOADED, props, Long.class);\n        addVal(list, SnapPuller.TIMES_CONFIG_REPLICATED, props, Integer.class);\n        addVal(list, SnapPuller.CONF_FILES_REPLICATED, props, String.class);\n      }\n      if (isMaster) {\n        if (includeConfFiles != null) list.add(\"confFilesToReplicate\", includeConfFiles);\n        list.add(REPLICATE_AFTER, getReplicateAfterStrings());\n        list.add(\"replicationEnabled\", String.valueOf(replicationEnabled.get()));\n      }\n    }\n    return list;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/ReplicationHandler#getStatistics().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public NamedList getStatistics() {\n    NamedList list = super.getStatistics();\n    if (core != null) {\n      list.add(\"indexSize\", readableSize(getIndexSize()));\n      long[] versionGen = getIndexVersion();\n      list.add(\"indexVersion\", versionGen[0]);\n      list.add(GENERATION, versionGen[1]);\n\n      list.add(\"indexPath\", core.getIndexDir());\n      list.add(\"isMaster\", String.valueOf(isMaster));\n      list.add(\"isSlave\", String.valueOf(isSlave));\n\n      SnapPuller snapPuller = tempSnapPuller;\n      if (snapPuller != null) {\n        list.add(MASTER_URL, snapPuller.getMasterUrl());\n        if (snapPuller.getPollInterval() != null) {\n          list.add(SnapPuller.POLL_INTERVAL, snapPuller.getPollInterval());\n        }\n        list.add(\"isPollingDisabled\", String.valueOf(isPollingDisabled()));\n        list.add(\"isReplicating\", String.valueOf(isReplicating()));\n        long elapsed = getTimeElapsed(snapPuller);\n        long val = SnapPuller.getTotalBytesDownloaded(snapPuller);\n        if (elapsed > 0) {\n          list.add(\"timeElapsed\", elapsed);\n          list.add(\"bytesDownloaded\", val);\n          list.add(\"downloadSpeed\", val / elapsed);\n        }\n        Properties props = loadReplicationProperties();\n        addVal(list, SnapPuller.PREVIOUS_CYCLE_TIME_TAKEN, props, Long.class);\n        addVal(list, SnapPuller.INDEX_REPLICATED_AT, props, Date.class);\n        addVal(list, SnapPuller.CONF_FILES_REPLICATED_AT, props, Date.class);\n        addVal(list, SnapPuller.REPLICATION_FAILED_AT, props, Date.class);\n        addVal(list, SnapPuller.TIMES_FAILED, props, Integer.class);\n        addVal(list, SnapPuller.TIMES_INDEX_REPLICATED, props, Integer.class);\n        addVal(list, SnapPuller.LAST_CYCLE_BYTES_DOWNLOADED, props, Long.class);\n        addVal(list, SnapPuller.TIMES_CONFIG_REPLICATED, props, Integer.class);\n        addVal(list, SnapPuller.CONF_FILES_REPLICATED, props, String.class);\n      }\n      if (isMaster) {\n        if (includeConfFiles != null) list.add(\"confFilesToReplicate\", includeConfFiles);\n        list.add(REPLICATE_AFTER, getReplicateAfterStrings());\n        list.add(\"replicationEnabled\", String.valueOf(replicationEnabled.get()));\n      }\n    }\n    return list;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#getStatistics().mjava","pathOld":"solr/src/java/org/apache/solr/handler/ReplicationHandler#getStatistics().mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public NamedList getStatistics() {\n    NamedList list = super.getStatistics();\n    if (core != null) {\n      list.add(\"indexSize\", readableSize(getIndexSize()));\n      long[] versionGen = getIndexVersion();\n      list.add(\"indexVersion\", versionGen[0]);\n      list.add(GENERATION, versionGen[1]);\n\n      list.add(\"indexPath\", core.getIndexDir());\n      list.add(\"isMaster\", String.valueOf(isMaster));\n      list.add(\"isSlave\", String.valueOf(isSlave));\n\n      SnapPuller snapPuller = tempSnapPuller;\n      if (snapPuller != null) {\n        list.add(MASTER_URL, snapPuller.getMasterUrl());\n        if (snapPuller.getPollInterval() != null) {\n          list.add(SnapPuller.POLL_INTERVAL, snapPuller.getPollInterval());\n        }\n        list.add(\"isPollingDisabled\", String.valueOf(isPollingDisabled()));\n        list.add(\"isReplicating\", String.valueOf(isReplicating()));\n        long elapsed = getTimeElapsed(snapPuller);\n        long val = SnapPuller.getTotalBytesDownloaded(snapPuller);\n        if (elapsed > 0) {\n          list.add(\"timeElapsed\", elapsed);\n          list.add(\"bytesDownloaded\", val);\n          list.add(\"downloadSpeed\", val / elapsed);\n        }\n        Properties props = loadReplicationProperties();\n        addVal(list, SnapPuller.PREVIOUS_CYCLE_TIME_TAKEN, props, Long.class);\n        addVal(list, SnapPuller.INDEX_REPLICATED_AT, props, Date.class);\n        addVal(list, SnapPuller.CONF_FILES_REPLICATED_AT, props, Date.class);\n        addVal(list, SnapPuller.REPLICATION_FAILED_AT, props, Date.class);\n        addVal(list, SnapPuller.TIMES_FAILED, props, Integer.class);\n        addVal(list, SnapPuller.TIMES_INDEX_REPLICATED, props, Integer.class);\n        addVal(list, SnapPuller.LAST_CYCLE_BYTES_DOWNLOADED, props, Long.class);\n        addVal(list, SnapPuller.TIMES_CONFIG_REPLICATED, props, Integer.class);\n        addVal(list, SnapPuller.CONF_FILES_REPLICATED, props, String.class);\n      }\n      if (isMaster) {\n        if (includeConfFiles != null) list.add(\"confFilesToReplicate\", includeConfFiles);\n        list.add(REPLICATE_AFTER, getReplicateAfterStrings());\n        list.add(\"replicationEnabled\", String.valueOf(replicationEnabled.get()));\n      }\n    }\n    return list;\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public NamedList getStatistics() {\n    NamedList list = super.getStatistics();\n    if (core != null) {\n      list.add(\"indexSize\", readableSize(getIndexSize()));\n      long[] versionGen = getIndexVersion();\n      list.add(\"indexVersion\", versionGen[0]);\n      list.add(GENERATION, versionGen[1]);\n\n      list.add(\"indexPath\", core.getIndexDir());\n      list.add(\"isMaster\", String.valueOf(isMaster));\n      list.add(\"isSlave\", String.valueOf(isSlave));\n\n      SnapPuller snapPuller = tempSnapPuller;\n      if (snapPuller != null) {\n        list.add(MASTER_URL, snapPuller.getMasterUrl());\n        if (snapPuller.getPollInterval() != null) {\n          list.add(SnapPuller.POLL_INTERVAL, snapPuller.getPollInterval());\n        }\n        list.add(\"isPollingDisabled\", String.valueOf(isPollingDisabled()));\n        list.add(\"isReplicating\", String.valueOf(isReplicating()));\n        long elapsed = getTimeElapsed(snapPuller);\n        long val = SnapPuller.getTotalBytesDownloaded(snapPuller);\n        if (elapsed > 0) {\n          list.add(\"timeElapsed\", elapsed);\n          list.add(\"bytesDownloaded\", val);\n          list.add(\"downloadSpeed\", val / elapsed);\n        }\n        Properties props = loadReplicationProperties();\n        addVal(list, SnapPuller.PREVIOUS_CYCLE_TIME_TAKEN, props, Long.class);\n        addVal(list, SnapPuller.INDEX_REPLICATED_AT, props, Date.class);\n        addVal(list, SnapPuller.CONF_FILES_REPLICATED_AT, props, Date.class);\n        addVal(list, SnapPuller.REPLICATION_FAILED_AT, props, Date.class);\n        addVal(list, SnapPuller.TIMES_FAILED, props, Integer.class);\n        addVal(list, SnapPuller.TIMES_INDEX_REPLICATED, props, Integer.class);\n        addVal(list, SnapPuller.LAST_CYCLE_BYTES_DOWNLOADED, props, Long.class);\n        addVal(list, SnapPuller.TIMES_CONFIG_REPLICATED, props, Integer.class);\n        addVal(list, SnapPuller.CONF_FILES_REPLICATED, props, String.class);\n      }\n      if (isMaster) {\n        if (includeConfFiles != null) list.add(\"confFilesToReplicate\", includeConfFiles);\n        list.add(REPLICATE_AFTER, getReplicateAfterStrings());\n        list.add(\"replicationEnabled\", String.valueOf(replicationEnabled.get()));\n      }\n    }\n    return list;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#getStatistics().mjava","pathOld":"solr/src/java/org/apache/solr/handler/ReplicationHandler#getStatistics().mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public NamedList getStatistics() {\n    NamedList list = super.getStatistics();\n    if (core != null) {\n      list.add(\"indexSize\", readableSize(getIndexSize()));\n      long[] versionGen = getIndexVersion();\n      list.add(\"indexVersion\", versionGen[0]);\n      list.add(GENERATION, versionGen[1]);\n\n      list.add(\"indexPath\", core.getIndexDir());\n      list.add(\"isMaster\", String.valueOf(isMaster));\n      list.add(\"isSlave\", String.valueOf(isSlave));\n\n      SnapPuller snapPuller = tempSnapPuller;\n      if (snapPuller != null) {\n        list.add(MASTER_URL, snapPuller.getMasterUrl());\n        if (snapPuller.getPollInterval() != null) {\n          list.add(SnapPuller.POLL_INTERVAL, snapPuller.getPollInterval());\n        }\n        list.add(\"isPollingDisabled\", String.valueOf(isPollingDisabled()));\n        list.add(\"isReplicating\", String.valueOf(isReplicating()));\n        long elapsed = getTimeElapsed(snapPuller);\n        long val = SnapPuller.getTotalBytesDownloaded(snapPuller);\n        if (elapsed > 0) {\n          list.add(\"timeElapsed\", elapsed);\n          list.add(\"bytesDownloaded\", val);\n          list.add(\"downloadSpeed\", val / elapsed);\n        }\n        Properties props = loadReplicationProperties();\n        addVal(list, SnapPuller.PREVIOUS_CYCLE_TIME_TAKEN, props, Long.class);\n        addVal(list, SnapPuller.INDEX_REPLICATED_AT, props, Date.class);\n        addVal(list, SnapPuller.CONF_FILES_REPLICATED_AT, props, Date.class);\n        addVal(list, SnapPuller.REPLICATION_FAILED_AT, props, Date.class);\n        addVal(list, SnapPuller.TIMES_FAILED, props, Integer.class);\n        addVal(list, SnapPuller.TIMES_INDEX_REPLICATED, props, Integer.class);\n        addVal(list, SnapPuller.LAST_CYCLE_BYTES_DOWNLOADED, props, Long.class);\n        addVal(list, SnapPuller.TIMES_CONFIG_REPLICATED, props, Integer.class);\n        addVal(list, SnapPuller.CONF_FILES_REPLICATED, props, String.class);\n      }\n      if (isMaster) {\n        if (includeConfFiles != null) list.add(\"confFilesToReplicate\", includeConfFiles);\n        list.add(REPLICATE_AFTER, getReplicateAfterStrings());\n        list.add(\"replicationEnabled\", String.valueOf(replicationEnabled.get()));\n      }\n    }\n    return list;\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public NamedList getStatistics() {\n    NamedList list = super.getStatistics();\n    if (core != null) {\n      list.add(\"indexSize\", readableSize(getIndexSize()));\n      long[] versionGen = getIndexVersion();\n      list.add(\"indexVersion\", versionGen[0]);\n      list.add(GENERATION, versionGen[1]);\n\n      list.add(\"indexPath\", core.getIndexDir());\n      list.add(\"isMaster\", String.valueOf(isMaster));\n      list.add(\"isSlave\", String.valueOf(isSlave));\n\n      SnapPuller snapPuller = tempSnapPuller;\n      if (snapPuller != null) {\n        list.add(MASTER_URL, snapPuller.getMasterUrl());\n        if (snapPuller.getPollInterval() != null) {\n          list.add(SnapPuller.POLL_INTERVAL, snapPuller.getPollInterval());\n        }\n        list.add(\"isPollingDisabled\", String.valueOf(isPollingDisabled()));\n        list.add(\"isReplicating\", String.valueOf(isReplicating()));\n        long elapsed = getTimeElapsed(snapPuller);\n        long val = SnapPuller.getTotalBytesDownloaded(snapPuller);\n        if (elapsed > 0) {\n          list.add(\"timeElapsed\", elapsed);\n          list.add(\"bytesDownloaded\", val);\n          list.add(\"downloadSpeed\", val / elapsed);\n        }\n        Properties props = loadReplicationProperties();\n        addVal(list, SnapPuller.PREVIOUS_CYCLE_TIME_TAKEN, props, Long.class);\n        addVal(list, SnapPuller.INDEX_REPLICATED_AT, props, Date.class);\n        addVal(list, SnapPuller.CONF_FILES_REPLICATED_AT, props, Date.class);\n        addVal(list, SnapPuller.REPLICATION_FAILED_AT, props, Date.class);\n        addVal(list, SnapPuller.TIMES_FAILED, props, Integer.class);\n        addVal(list, SnapPuller.TIMES_INDEX_REPLICATED, props, Integer.class);\n        addVal(list, SnapPuller.LAST_CYCLE_BYTES_DOWNLOADED, props, Long.class);\n        addVal(list, SnapPuller.TIMES_CONFIG_REPLICATED, props, Integer.class);\n        addVal(list, SnapPuller.CONF_FILES_REPLICATED, props, String.class);\n      }\n      if (isMaster) {\n        if (includeConfFiles != null) list.add(\"confFilesToReplicate\", includeConfFiles);\n        list.add(REPLICATE_AFTER, getReplicateAfterStrings());\n        list.add(\"replicationEnabled\", String.valueOf(replicationEnabled.get()));\n      }\n    }\n    return list;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#getStatistics().mjava","pathOld":"solr/src/java/org/apache/solr/handler/ReplicationHandler#getStatistics().mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public NamedList getStatistics() {\n    NamedList list = super.getStatistics();\n    if (core != null) {\n      list.add(\"indexSize\", readableSize(getIndexSize()));\n      long[] versionGen = getIndexVersion();\n      list.add(\"indexVersion\", versionGen[0]);\n      list.add(GENERATION, versionGen[1]);\n\n      list.add(\"indexPath\", core.getIndexDir());\n      list.add(\"isMaster\", String.valueOf(isMaster));\n      list.add(\"isSlave\", String.valueOf(isSlave));\n\n      SnapPuller snapPuller = tempSnapPuller;\n      if (snapPuller != null) {\n        list.add(MASTER_URL, snapPuller.getMasterUrl());\n        if (snapPuller.getPollInterval() != null) {\n          list.add(SnapPuller.POLL_INTERVAL, snapPuller.getPollInterval());\n        }\n        list.add(\"isPollingDisabled\", String.valueOf(isPollingDisabled()));\n        list.add(\"isReplicating\", String.valueOf(isReplicating()));\n        long elapsed = getTimeElapsed(snapPuller);\n        long val = SnapPuller.getTotalBytesDownloaded(snapPuller);\n        if (elapsed > 0) {\n          list.add(\"timeElapsed\", elapsed);\n          list.add(\"bytesDownloaded\", val);\n          list.add(\"downloadSpeed\", val / elapsed);\n        }\n        Properties props = loadReplicationProperties();\n        addVal(list, SnapPuller.PREVIOUS_CYCLE_TIME_TAKEN, props, Long.class);\n        addVal(list, SnapPuller.INDEX_REPLICATED_AT, props, Date.class);\n        addVal(list, SnapPuller.CONF_FILES_REPLICATED_AT, props, Date.class);\n        addVal(list, SnapPuller.REPLICATION_FAILED_AT, props, Date.class);\n        addVal(list, SnapPuller.TIMES_FAILED, props, Integer.class);\n        addVal(list, SnapPuller.TIMES_INDEX_REPLICATED, props, Integer.class);\n        addVal(list, SnapPuller.LAST_CYCLE_BYTES_DOWNLOADED, props, Long.class);\n        addVal(list, SnapPuller.TIMES_CONFIG_REPLICATED, props, Integer.class);\n        addVal(list, SnapPuller.CONF_FILES_REPLICATED, props, String.class);\n      }\n      if (isMaster) {\n        if (includeConfFiles != null) list.add(\"confFilesToReplicate\", includeConfFiles);\n        list.add(REPLICATE_AFTER, getReplicateAfterStrings());\n        list.add(\"replicationEnabled\", String.valueOf(replicationEnabled.get()));\n      }\n    }\n    return list;\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public NamedList getStatistics() {\n    NamedList list = super.getStatistics();\n    if (core != null) {\n      list.add(\"indexSize\", readableSize(getIndexSize()));\n      long[] versionGen = getIndexVersion();\n      list.add(\"indexVersion\", versionGen[0]);\n      list.add(GENERATION, versionGen[1]);\n\n      list.add(\"indexPath\", core.getIndexDir());\n      list.add(\"isMaster\", String.valueOf(isMaster));\n      list.add(\"isSlave\", String.valueOf(isSlave));\n\n      SnapPuller snapPuller = tempSnapPuller;\n      if (snapPuller != null) {\n        list.add(MASTER_URL, snapPuller.getMasterUrl());\n        if (snapPuller.getPollInterval() != null) {\n          list.add(SnapPuller.POLL_INTERVAL, snapPuller.getPollInterval());\n        }\n        list.add(\"isPollingDisabled\", String.valueOf(isPollingDisabled()));\n        list.add(\"isReplicating\", String.valueOf(isReplicating()));\n        long elapsed = getTimeElapsed(snapPuller);\n        long val = SnapPuller.getTotalBytesDownloaded(snapPuller);\n        if (elapsed > 0) {\n          list.add(\"timeElapsed\", elapsed);\n          list.add(\"bytesDownloaded\", val);\n          list.add(\"downloadSpeed\", val / elapsed);\n        }\n        Properties props = loadReplicationProperties();\n        addVal(list, SnapPuller.PREVIOUS_CYCLE_TIME_TAKEN, props, Long.class);\n        addVal(list, SnapPuller.INDEX_REPLICATED_AT, props, Date.class);\n        addVal(list, SnapPuller.CONF_FILES_REPLICATED_AT, props, Date.class);\n        addVal(list, SnapPuller.REPLICATION_FAILED_AT, props, Date.class);\n        addVal(list, SnapPuller.TIMES_FAILED, props, Integer.class);\n        addVal(list, SnapPuller.TIMES_INDEX_REPLICATED, props, Integer.class);\n        addVal(list, SnapPuller.LAST_CYCLE_BYTES_DOWNLOADED, props, Long.class);\n        addVal(list, SnapPuller.TIMES_CONFIG_REPLICATED, props, Integer.class);\n        addVal(list, SnapPuller.CONF_FILES_REPLICATED, props, String.class);\n      }\n      if (isMaster) {\n        if (includeConfFiles != null) list.add(\"confFilesToReplicate\", includeConfFiles);\n        list.add(REPLICATE_AFTER, getReplicateAfterStrings());\n        list.add(\"replicationEnabled\", String.valueOf(replicationEnabled.get()));\n      }\n    }\n    return list;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["1da8d55113b689b06716246649de6f62430f15c0"],"c26f00b574427b55127e869b935845554afde1fa":["1da8d55113b689b06716246649de6f62430f15c0","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["1da8d55113b689b06716246649de6f62430f15c0"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"1da8d55113b689b06716246649de6f62430f15c0":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}