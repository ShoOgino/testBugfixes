{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testStatistics().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testStatistics().mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/SolrExampleTests#testStatistics().mjava","sourceNew":" @Test\n public void testStatistics() throws Exception\n  {    \n    SolrServer server = getSolrServer();\n    \n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n\n    String f = \"val_pi\";\n    \n    int i=0;               // 0   1   2   3   4   5   6   7   8   9 \n    int[] nums = new int[] { 23, 26, 38, 46, 55, 63, 77, 84, 92, 94 };\n    for( int num : nums ) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField( \"id\", \"doc\"+i++ );\n      doc.setField( \"name\", \"doc: \"+num );\n      doc.setField( f, num );\n      server.add( doc );\n    }\n    server.commit();\n    assertNumFound( \"*:*\", nums.length ); // make sure they all got in\n    \n    SolrQuery query = new SolrQuery( \"*:*\" );\n    query.setRows( 0 );\n    query.setGetFieldStatistics( f );\n    \n    QueryResponse rsp = server.query( query );\n    FieldStatsInfo stats = rsp.getFieldStatsInfo().get( f );\n    assertNotNull( stats );\n    \n    assertEquals( 23.0, stats.getMin().doubleValue(), 0 );\n    assertEquals( 94.0, stats.getMax().doubleValue(), 0 );\n    assertEquals( new Long(nums.length), stats.getCount() );\n    assertEquals( new Long(0), stats.getMissing() );\n    assertEquals( \"26.4\", stats.getStddev().toString().substring(0,4) );\n    \n    // now lets try again with a new set...  (odd median)\n    //----------------------------------------------------\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n    nums = new int[] { 5, 7, 10, 19, 20 };\n    for( int num : nums ) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField( \"id\", \"doc\"+i++ );\n      doc.setField( \"name\", \"doc: \"+num );\n      doc.setField( f, num );\n      server.add( doc );\n    }\n    server.commit();\n    assertNumFound( \"*:*\", nums.length ); // make sure they all got in\n    \n    rsp = server.query( query );\n    stats = rsp.getFieldStatsInfo().get( f );\n    assertNotNull( stats );\n    \n    assertEquals( 5.0, stats.getMin().doubleValue(), 0 );\n    assertEquals( 20.0, stats.getMax().doubleValue(), 0 );\n    assertEquals( new Long(nums.length), stats.getCount() );\n    assertEquals( new Long(0), stats.getMissing() );\n    \n    // Now try again with faceting\n    //---------------------------------\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n    nums = new int[] { 1, 2, 3, 4, 5, 10, 11, 12, 13, 14 };\n    for( i=0; i<nums.length; i++ ) {\n      int num = nums[i];\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField( \"id\", \"doc\"+i );\n      doc.setField( \"name\", \"doc: \"+num );\n      doc.setField( f, num );\n      doc.setField( \"inStock\", i < 5 );\n      server.add( doc );\n    }\n    server.commit();\n    assertNumFound( \"inStock:true\",  5 ); // make sure they all got in\n    assertNumFound( \"inStock:false\", 5 ); // make sure they all got in\n\n    // facet on 'inStock'\n    query.addStatsFieldFacets( f, \"inStock\" );\n    rsp = server.query( query );\n    stats = rsp.getFieldStatsInfo().get( f );\n    assertNotNull( stats );\n    \n    List<FieldStatsInfo> facets = stats.getFacets().get( \"inStock\" );\n    assertNotNull( facets );\n    assertEquals( 2, facets.size() );\n    FieldStatsInfo inStockF = facets.get(0);\n    FieldStatsInfo inStockT = facets.get(1);\n    if( \"true\".equals( inStockF.getName() ) ) {\n      FieldStatsInfo tmp = inStockF;\n      inStockF = inStockT;\n      inStockT = tmp;\n    }\n\n    // make sure half went to each\n    assertEquals( inStockF.getCount(), inStockT.getCount() );\n    assertEquals( stats.getCount().longValue(), inStockF.getCount()+inStockT.getCount() );\n\n    assertTrue( \"check that min max faceted ok\", inStockF.getMin() > inStockT.getMax() );\n    assertEquals( \"they have the same distribution\", inStockF.getStddev(), inStockT.getStddev() );\n  }\n\n","sourceOld":" @Test\n public void testStatistics() throws Exception\n  {    \n    SolrServer server = getSolrServer();\n    \n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n\n    String f = \"val_pi\";\n    \n    int i=0;               // 0   1   2   3   4   5   6   7   8   9 \n    int[] nums = new int[] { 23, 26, 38, 46, 55, 63, 77, 84, 92, 94 };\n    for( int num : nums ) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField( \"id\", \"doc\"+i++ );\n      doc.setField( \"name\", \"doc: \"+num );\n      doc.setField( f, num );\n      server.add( doc );\n    }\n    server.commit();\n    assertNumFound( \"*:*\", nums.length ); // make sure they all got in\n    \n    SolrQuery query = new SolrQuery( \"*:*\" );\n    query.setRows( 0 );\n    query.setGetFieldStatistics( f );\n    \n    QueryResponse rsp = server.query( query );\n    FieldStatsInfo stats = rsp.getFieldStatsInfo().get( f );\n    assertNotNull( stats );\n    \n    assertEquals( 23.0, stats.getMin().doubleValue(), 0 );\n    assertEquals( 94.0, stats.getMax().doubleValue(), 0 );\n    assertEquals( new Long(nums.length), stats.getCount() );\n    assertEquals( new Long(0), stats.getMissing() );\n    assertEquals( \"26.4\", stats.getStddev().toString().substring(0,4) );\n    \n    // now lets try again with a new set...  (odd median)\n    //----------------------------------------------------\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n    nums = new int[] { 5, 7, 10, 19, 20 };\n    for( int num : nums ) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField( \"id\", \"doc\"+i++ );\n      doc.setField( \"name\", \"doc: \"+num );\n      doc.setField( f, num );\n      server.add( doc );\n    }\n    server.commit();\n    assertNumFound( \"*:*\", nums.length ); // make sure they all got in\n    \n    rsp = server.query( query );\n    stats = rsp.getFieldStatsInfo().get( f );\n    assertNotNull( stats );\n    \n    assertEquals( 5.0, stats.getMin().doubleValue(), 0 );\n    assertEquals( 20.0, stats.getMax().doubleValue(), 0 );\n    assertEquals( new Long(nums.length), stats.getCount() );\n    assertEquals( new Long(0), stats.getMissing() );\n    \n    // Now try again with faceting\n    //---------------------------------\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n    nums = new int[] { 1, 2, 3, 4, 5, 10, 11, 12, 13, 14 };\n    for( i=0; i<nums.length; i++ ) {\n      int num = nums[i];\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField( \"id\", \"doc\"+i );\n      doc.setField( \"name\", \"doc: \"+num );\n      doc.setField( f, num );\n      doc.setField( \"inStock\", i < 5 );\n      server.add( doc );\n    }\n    server.commit();\n    assertNumFound( \"inStock:true\",  5 ); // make sure they all got in\n    assertNumFound( \"inStock:false\", 5 ); // make sure they all got in\n\n    // facet on 'inStock'\n    query.addStatsFieldFacets( f, \"inStock\" );\n    rsp = server.query( query );\n    stats = rsp.getFieldStatsInfo().get( f );\n    assertNotNull( stats );\n    \n    List<FieldStatsInfo> facets = stats.getFacets().get( \"inStock\" );\n    assertNotNull( facets );\n    assertEquals( 2, facets.size() );\n    FieldStatsInfo inStockF = facets.get(0);\n    FieldStatsInfo inStockT = facets.get(1);\n    if( \"true\".equals( inStockF.getName() ) ) {\n      FieldStatsInfo tmp = inStockF;\n      inStockF = inStockT;\n      inStockT = tmp;\n    }\n\n    // make sure half went to each\n    assertEquals( inStockF.getCount(), inStockT.getCount() );\n    assertEquals( stats.getCount().longValue(), inStockF.getCount()+inStockT.getCount() );\n\n    assertTrue( \"check that min max faceted ok\", inStockF.getMin() > inStockT.getMax() );\n    assertEquals( \"they have the same distribution\", inStockF.getStddev(), inStockT.getStddev() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testStatistics().mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/SolrExampleTests#testStatistics().mjava","sourceNew":" @Test\n public void testStatistics() throws Exception\n  {    \n    SolrServer server = getSolrServer();\n    \n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n\n    String f = \"val_pi\";\n    \n    int i=0;               // 0   1   2   3   4   5   6   7   8   9 \n    int[] nums = new int[] { 23, 26, 38, 46, 55, 63, 77, 84, 92, 94 };\n    for( int num : nums ) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField( \"id\", \"doc\"+i++ );\n      doc.setField( \"name\", \"doc: \"+num );\n      doc.setField( f, num );\n      server.add( doc );\n    }\n    server.commit();\n    assertNumFound( \"*:*\", nums.length ); // make sure they all got in\n    \n    SolrQuery query = new SolrQuery( \"*:*\" );\n    query.setRows( 0 );\n    query.setGetFieldStatistics( f );\n    \n    QueryResponse rsp = server.query( query );\n    FieldStatsInfo stats = rsp.getFieldStatsInfo().get( f );\n    assertNotNull( stats );\n    \n    assertEquals( 23.0, stats.getMin().doubleValue(), 0 );\n    assertEquals( 94.0, stats.getMax().doubleValue(), 0 );\n    assertEquals( new Long(nums.length), stats.getCount() );\n    assertEquals( new Long(0), stats.getMissing() );\n    assertEquals( \"26.4\", stats.getStddev().toString().substring(0,4) );\n    \n    // now lets try again with a new set...  (odd median)\n    //----------------------------------------------------\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n    nums = new int[] { 5, 7, 10, 19, 20 };\n    for( int num : nums ) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField( \"id\", \"doc\"+i++ );\n      doc.setField( \"name\", \"doc: \"+num );\n      doc.setField( f, num );\n      server.add( doc );\n    }\n    server.commit();\n    assertNumFound( \"*:*\", nums.length ); // make sure they all got in\n    \n    rsp = server.query( query );\n    stats = rsp.getFieldStatsInfo().get( f );\n    assertNotNull( stats );\n    \n    assertEquals( 5.0, stats.getMin().doubleValue(), 0 );\n    assertEquals( 20.0, stats.getMax().doubleValue(), 0 );\n    assertEquals( new Long(nums.length), stats.getCount() );\n    assertEquals( new Long(0), stats.getMissing() );\n    \n    // Now try again with faceting\n    //---------------------------------\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n    nums = new int[] { 1, 2, 3, 4, 5, 10, 11, 12, 13, 14 };\n    for( i=0; i<nums.length; i++ ) {\n      int num = nums[i];\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField( \"id\", \"doc\"+i );\n      doc.setField( \"name\", \"doc: \"+num );\n      doc.setField( f, num );\n      doc.setField( \"inStock\", i < 5 );\n      server.add( doc );\n    }\n    server.commit();\n    assertNumFound( \"inStock:true\",  5 ); // make sure they all got in\n    assertNumFound( \"inStock:false\", 5 ); // make sure they all got in\n\n    // facet on 'inStock'\n    query.addStatsFieldFacets( f, \"inStock\" );\n    rsp = server.query( query );\n    stats = rsp.getFieldStatsInfo().get( f );\n    assertNotNull( stats );\n    \n    List<FieldStatsInfo> facets = stats.getFacets().get( \"inStock\" );\n    assertNotNull( facets );\n    assertEquals( 2, facets.size() );\n    FieldStatsInfo inStockF = facets.get(0);\n    FieldStatsInfo inStockT = facets.get(1);\n    if( \"true\".equals( inStockF.getName() ) ) {\n      FieldStatsInfo tmp = inStockF;\n      inStockF = inStockT;\n      inStockT = tmp;\n    }\n\n    // make sure half went to each\n    assertEquals( inStockF.getCount(), inStockT.getCount() );\n    assertEquals( stats.getCount().longValue(), inStockF.getCount()+inStockT.getCount() );\n\n    assertTrue( \"check that min max faceted ok\", inStockF.getMin() > inStockT.getMax() );\n    assertEquals( \"they have the same distribution\", inStockF.getStddev(), inStockT.getStddev() );\n  }\n\n","sourceOld":" @Test\n public void testStatistics() throws Exception\n  {    \n    SolrServer server = getSolrServer();\n    \n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n\n    String f = \"val_pi\";\n    \n    int i=0;               // 0   1   2   3   4   5   6   7   8   9 \n    int[] nums = new int[] { 23, 26, 38, 46, 55, 63, 77, 84, 92, 94 };\n    for( int num : nums ) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField( \"id\", \"doc\"+i++ );\n      doc.setField( \"name\", \"doc: \"+num );\n      doc.setField( f, num );\n      server.add( doc );\n    }\n    server.commit();\n    assertNumFound( \"*:*\", nums.length ); // make sure they all got in\n    \n    SolrQuery query = new SolrQuery( \"*:*\" );\n    query.setRows( 0 );\n    query.setGetFieldStatistics( f );\n    \n    QueryResponse rsp = server.query( query );\n    FieldStatsInfo stats = rsp.getFieldStatsInfo().get( f );\n    assertNotNull( stats );\n    \n    assertEquals( 23.0, stats.getMin().doubleValue(), 0 );\n    assertEquals( 94.0, stats.getMax().doubleValue(), 0 );\n    assertEquals( new Long(nums.length), stats.getCount() );\n    assertEquals( new Long(0), stats.getMissing() );\n    assertEquals( \"26.4\", stats.getStddev().toString().substring(0,4) );\n    \n    // now lets try again with a new set...  (odd median)\n    //----------------------------------------------------\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n    nums = new int[] { 5, 7, 10, 19, 20 };\n    for( int num : nums ) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField( \"id\", \"doc\"+i++ );\n      doc.setField( \"name\", \"doc: \"+num );\n      doc.setField( f, num );\n      server.add( doc );\n    }\n    server.commit();\n    assertNumFound( \"*:*\", nums.length ); // make sure they all got in\n    \n    rsp = server.query( query );\n    stats = rsp.getFieldStatsInfo().get( f );\n    assertNotNull( stats );\n    \n    assertEquals( 5.0, stats.getMin().doubleValue(), 0 );\n    assertEquals( 20.0, stats.getMax().doubleValue(), 0 );\n    assertEquals( new Long(nums.length), stats.getCount() );\n    assertEquals( new Long(0), stats.getMissing() );\n    \n    // Now try again with faceting\n    //---------------------------------\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n    nums = new int[] { 1, 2, 3, 4, 5, 10, 11, 12, 13, 14 };\n    for( i=0; i<nums.length; i++ ) {\n      int num = nums[i];\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField( \"id\", \"doc\"+i );\n      doc.setField( \"name\", \"doc: \"+num );\n      doc.setField( f, num );\n      doc.setField( \"inStock\", i < 5 );\n      server.add( doc );\n    }\n    server.commit();\n    assertNumFound( \"inStock:true\",  5 ); // make sure they all got in\n    assertNumFound( \"inStock:false\", 5 ); // make sure they all got in\n\n    // facet on 'inStock'\n    query.addStatsFieldFacets( f, \"inStock\" );\n    rsp = server.query( query );\n    stats = rsp.getFieldStatsInfo().get( f );\n    assertNotNull( stats );\n    \n    List<FieldStatsInfo> facets = stats.getFacets().get( \"inStock\" );\n    assertNotNull( facets );\n    assertEquals( 2, facets.size() );\n    FieldStatsInfo inStockF = facets.get(0);\n    FieldStatsInfo inStockT = facets.get(1);\n    if( \"true\".equals( inStockF.getName() ) ) {\n      FieldStatsInfo tmp = inStockF;\n      inStockF = inStockT;\n      inStockT = tmp;\n    }\n\n    // make sure half went to each\n    assertEquals( inStockF.getCount(), inStockT.getCount() );\n    assertEquals( stats.getCount().longValue(), inStockF.getCount()+inStockT.getCount() );\n\n    assertTrue( \"check that min max faceted ok\", inStockF.getMin() > inStockT.getMax() );\n    assertEquals( \"they have the same distribution\", inStockF.getStddev(), inStockT.getStddev() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testStatistics().mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/SolrExampleTests#testStatistics().mjava","sourceNew":" @Test\n public void testStatistics() throws Exception\n  {    \n    SolrServer server = getSolrServer();\n    \n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n\n    String f = \"val_pi\";\n    \n    int i=0;               // 0   1   2   3   4   5   6   7   8   9 \n    int[] nums = new int[] { 23, 26, 38, 46, 55, 63, 77, 84, 92, 94 };\n    for( int num : nums ) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField( \"id\", \"doc\"+i++ );\n      doc.setField( \"name\", \"doc: \"+num );\n      doc.setField( f, num );\n      server.add( doc );\n    }\n    server.commit();\n    assertNumFound( \"*:*\", nums.length ); // make sure they all got in\n    \n    SolrQuery query = new SolrQuery( \"*:*\" );\n    query.setRows( 0 );\n    query.setGetFieldStatistics( f );\n    \n    QueryResponse rsp = server.query( query );\n    FieldStatsInfo stats = rsp.getFieldStatsInfo().get( f );\n    assertNotNull( stats );\n    \n    assertEquals( 23.0, stats.getMin().doubleValue(), 0 );\n    assertEquals( 94.0, stats.getMax().doubleValue(), 0 );\n    assertEquals( new Long(nums.length), stats.getCount() );\n    assertEquals( new Long(0), stats.getMissing() );\n    assertEquals( \"26.4\", stats.getStddev().toString().substring(0,4) );\n    \n    // now lets try again with a new set...  (odd median)\n    //----------------------------------------------------\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n    nums = new int[] { 5, 7, 10, 19, 20 };\n    for( int num : nums ) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField( \"id\", \"doc\"+i++ );\n      doc.setField( \"name\", \"doc: \"+num );\n      doc.setField( f, num );\n      server.add( doc );\n    }\n    server.commit();\n    assertNumFound( \"*:*\", nums.length ); // make sure they all got in\n    \n    rsp = server.query( query );\n    stats = rsp.getFieldStatsInfo().get( f );\n    assertNotNull( stats );\n    \n    assertEquals( 5.0, stats.getMin().doubleValue(), 0 );\n    assertEquals( 20.0, stats.getMax().doubleValue(), 0 );\n    assertEquals( new Long(nums.length), stats.getCount() );\n    assertEquals( new Long(0), stats.getMissing() );\n    \n    // Now try again with faceting\n    //---------------------------------\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n    nums = new int[] { 1, 2, 3, 4, 5, 10, 11, 12, 13, 14 };\n    for( i=0; i<nums.length; i++ ) {\n      int num = nums[i];\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField( \"id\", \"doc\"+i );\n      doc.setField( \"name\", \"doc: \"+num );\n      doc.setField( f, num );\n      doc.setField( \"inStock\", i < 5 );\n      server.add( doc );\n    }\n    server.commit();\n    assertNumFound( \"inStock:true\",  5 ); // make sure they all got in\n    assertNumFound( \"inStock:false\", 5 ); // make sure they all got in\n\n    // facet on 'inStock'\n    query.addStatsFieldFacets( f, \"inStock\" );\n    rsp = server.query( query );\n    stats = rsp.getFieldStatsInfo().get( f );\n    assertNotNull( stats );\n    \n    List<FieldStatsInfo> facets = stats.getFacets().get( \"inStock\" );\n    assertNotNull( facets );\n    assertEquals( 2, facets.size() );\n    FieldStatsInfo inStockF = facets.get(0);\n    FieldStatsInfo inStockT = facets.get(1);\n    if( \"true\".equals( inStockF.getName() ) ) {\n      FieldStatsInfo tmp = inStockF;\n      inStockF = inStockT;\n      inStockT = tmp;\n    }\n\n    // make sure half went to each\n    assertEquals( inStockF.getCount(), inStockT.getCount() );\n    assertEquals( stats.getCount().longValue(), inStockF.getCount()+inStockT.getCount() );\n\n    assertTrue( \"check that min max faceted ok\", inStockF.getMin() > inStockT.getMax() );\n    assertEquals( \"they have the same distribution\", inStockF.getStddev(), inStockT.getStddev() );\n  }\n\n","sourceOld":" @Test\n public void testStatistics() throws Exception\n  {    \n    SolrServer server = getSolrServer();\n    \n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n\n    String f = \"val_pi\";\n    \n    int i=0;               // 0   1   2   3   4   5   6   7   8   9 \n    int[] nums = new int[] { 23, 26, 38, 46, 55, 63, 77, 84, 92, 94 };\n    for( int num : nums ) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField( \"id\", \"doc\"+i++ );\n      doc.setField( \"name\", \"doc: \"+num );\n      doc.setField( f, num );\n      server.add( doc );\n    }\n    server.commit();\n    assertNumFound( \"*:*\", nums.length ); // make sure they all got in\n    \n    SolrQuery query = new SolrQuery( \"*:*\" );\n    query.setRows( 0 );\n    query.setGetFieldStatistics( f );\n    \n    QueryResponse rsp = server.query( query );\n    FieldStatsInfo stats = rsp.getFieldStatsInfo().get( f );\n    assertNotNull( stats );\n    \n    assertEquals( 23.0, stats.getMin().doubleValue(), 0 );\n    assertEquals( 94.0, stats.getMax().doubleValue(), 0 );\n    assertEquals( new Long(nums.length), stats.getCount() );\n    assertEquals( new Long(0), stats.getMissing() );\n    assertEquals( \"26.4\", stats.getStddev().toString().substring(0,4) );\n    \n    // now lets try again with a new set...  (odd median)\n    //----------------------------------------------------\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n    nums = new int[] { 5, 7, 10, 19, 20 };\n    for( int num : nums ) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField( \"id\", \"doc\"+i++ );\n      doc.setField( \"name\", \"doc: \"+num );\n      doc.setField( f, num );\n      server.add( doc );\n    }\n    server.commit();\n    assertNumFound( \"*:*\", nums.length ); // make sure they all got in\n    \n    rsp = server.query( query );\n    stats = rsp.getFieldStatsInfo().get( f );\n    assertNotNull( stats );\n    \n    assertEquals( 5.0, stats.getMin().doubleValue(), 0 );\n    assertEquals( 20.0, stats.getMax().doubleValue(), 0 );\n    assertEquals( new Long(nums.length), stats.getCount() );\n    assertEquals( new Long(0), stats.getMissing() );\n    \n    // Now try again with faceting\n    //---------------------------------\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n    nums = new int[] { 1, 2, 3, 4, 5, 10, 11, 12, 13, 14 };\n    for( i=0; i<nums.length; i++ ) {\n      int num = nums[i];\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField( \"id\", \"doc\"+i );\n      doc.setField( \"name\", \"doc: \"+num );\n      doc.setField( f, num );\n      doc.setField( \"inStock\", i < 5 );\n      server.add( doc );\n    }\n    server.commit();\n    assertNumFound( \"inStock:true\",  5 ); // make sure they all got in\n    assertNumFound( \"inStock:false\", 5 ); // make sure they all got in\n\n    // facet on 'inStock'\n    query.addStatsFieldFacets( f, \"inStock\" );\n    rsp = server.query( query );\n    stats = rsp.getFieldStatsInfo().get( f );\n    assertNotNull( stats );\n    \n    List<FieldStatsInfo> facets = stats.getFacets().get( \"inStock\" );\n    assertNotNull( facets );\n    assertEquals( 2, facets.size() );\n    FieldStatsInfo inStockF = facets.get(0);\n    FieldStatsInfo inStockT = facets.get(1);\n    if( \"true\".equals( inStockF.getName() ) ) {\n      FieldStatsInfo tmp = inStockF;\n      inStockF = inStockT;\n      inStockT = tmp;\n    }\n\n    // make sure half went to each\n    assertEquals( inStockF.getCount(), inStockT.getCount() );\n    assertEquals( stats.getCount().longValue(), inStockF.getCount()+inStockT.getCount() );\n\n    assertTrue( \"check that min max faceted ok\", inStockF.getMin() > inStockT.getMax() );\n    assertEquals( \"they have the same distribution\", inStockF.getStddev(), inStockT.getStddev() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a4469b796ffbb01ca57a182e25a95de21fb4538","date":1331234730,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testStatistics().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testStatistics().mjava","sourceNew":" @Test\n public void testStatistics() throws Exception\n  {    \n    SolrServer server = getSolrServer();\n    \n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n\n    String f = \"val_pi\";\n    \n    int i=0;               // 0   1   2   3   4   5   6   7   8   9 \n    int[] nums = new int[] { 23, 26, 38, 46, 55, 63, 77, 84, 92, 94 };\n    for( int num : nums ) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField( \"id\", \"doc\"+i++ );\n      doc.setField( \"name\", \"doc: \"+num );\n      doc.setField( f, num );\n      server.add( doc );\n    }\n    server.commit();\n    assertNumFound( \"*:*\", nums.length ); // make sure they all got in\n    \n    SolrQuery query = new SolrQuery( \"*:*\" );\n    query.setRows( 0 );\n    query.setGetFieldStatistics( f );\n    \n    QueryResponse rsp = server.query( query );\n    FieldStatsInfo stats = rsp.getFieldStatsInfo().get( f );\n    assertNotNull( stats );\n    \n    assertEquals( 23.0, ((Double)stats.getMin()).doubleValue(), 0 );\n    assertEquals( 94.0, ((Double)stats.getMax()).doubleValue(), 0 );\n    assertEquals( new Long(nums.length), stats.getCount() );\n    assertEquals( new Long(0), stats.getMissing() );\n    assertEquals( \"26.4\", stats.getStddev().toString().substring(0,4) );\n    \n    // now lets try again with a new set...  (odd median)\n    //----------------------------------------------------\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n    nums = new int[] { 5, 7, 10, 19, 20 };\n    for( int num : nums ) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField( \"id\", \"doc\"+i++ );\n      doc.setField( \"name\", \"doc: \"+num );\n      doc.setField( f, num );\n      server.add( doc );\n    }\n    server.commit();\n    assertNumFound( \"*:*\", nums.length ); // make sure they all got in\n    \n    rsp = server.query( query );\n    stats = rsp.getFieldStatsInfo().get( f );\n    assertNotNull( stats );\n    \n    assertEquals( 5.0, ((Double)stats.getMin()).doubleValue(), 0 );\n    assertEquals( 20.0, ((Double)stats.getMin()).doubleValue(), 0 );\n    assertEquals( new Long(nums.length), stats.getCount() );\n    assertEquals( new Long(0), stats.getMissing() );\n    \n    // Now try again with faceting\n    //---------------------------------\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n    nums = new int[] { 1, 2, 3, 4, 5, 10, 11, 12, 13, 14 };\n    for( i=0; i<nums.length; i++ ) {\n      int num = nums[i];\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField( \"id\", \"doc\"+i );\n      doc.setField( \"name\", \"doc: \"+num );\n      doc.setField( f, num );\n      doc.setField( \"inStock\", i < 5 );\n      server.add( doc );\n    }\n    server.commit();\n    assertNumFound( \"inStock:true\",  5 ); // make sure they all got in\n    assertNumFound( \"inStock:false\", 5 ); // make sure they all got in\n\n    // facet on 'inStock'\n    query.addStatsFieldFacets( f, \"inStock\" );\n    rsp = server.query( query );\n    stats = rsp.getFieldStatsInfo().get( f );\n    assertNotNull( stats );\n    \n    List<FieldStatsInfo> facets = stats.getFacets().get( \"inStock\" );\n    assertNotNull( facets );\n    assertEquals( 2, facets.size() );\n    FieldStatsInfo inStockF = facets.get(0);\n    FieldStatsInfo inStockT = facets.get(1);\n    if( \"true\".equals( inStockF.getName() ) ) {\n      FieldStatsInfo tmp = inStockF;\n      inStockF = inStockT;\n      inStockT = tmp;\n    }\n\n    // make sure half went to each\n    assertEquals( inStockF.getCount(), inStockT.getCount() );\n    assertEquals( stats.getCount().longValue(), inStockF.getCount()+inStockT.getCount() );\n\n    assertTrue( \"check that min max faceted ok\", ((Double)inStockF.getMin()).doubleValue() > ((Double)inStockF.getMax()).doubleValue() );\n    assertEquals( \"they have the same distribution\", inStockF.getStddev(), inStockT.getStddev() );\n  }\n\n","sourceOld":" @Test\n public void testStatistics() throws Exception\n  {    \n    SolrServer server = getSolrServer();\n    \n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n\n    String f = \"val_pi\";\n    \n    int i=0;               // 0   1   2   3   4   5   6   7   8   9 \n    int[] nums = new int[] { 23, 26, 38, 46, 55, 63, 77, 84, 92, 94 };\n    for( int num : nums ) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField( \"id\", \"doc\"+i++ );\n      doc.setField( \"name\", \"doc: \"+num );\n      doc.setField( f, num );\n      server.add( doc );\n    }\n    server.commit();\n    assertNumFound( \"*:*\", nums.length ); // make sure they all got in\n    \n    SolrQuery query = new SolrQuery( \"*:*\" );\n    query.setRows( 0 );\n    query.setGetFieldStatistics( f );\n    \n    QueryResponse rsp = server.query( query );\n    FieldStatsInfo stats = rsp.getFieldStatsInfo().get( f );\n    assertNotNull( stats );\n    \n    assertEquals( 23.0, stats.getMin().doubleValue(), 0 );\n    assertEquals( 94.0, stats.getMax().doubleValue(), 0 );\n    assertEquals( new Long(nums.length), stats.getCount() );\n    assertEquals( new Long(0), stats.getMissing() );\n    assertEquals( \"26.4\", stats.getStddev().toString().substring(0,4) );\n    \n    // now lets try again with a new set...  (odd median)\n    //----------------------------------------------------\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n    nums = new int[] { 5, 7, 10, 19, 20 };\n    for( int num : nums ) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField( \"id\", \"doc\"+i++ );\n      doc.setField( \"name\", \"doc: \"+num );\n      doc.setField( f, num );\n      server.add( doc );\n    }\n    server.commit();\n    assertNumFound( \"*:*\", nums.length ); // make sure they all got in\n    \n    rsp = server.query( query );\n    stats = rsp.getFieldStatsInfo().get( f );\n    assertNotNull( stats );\n    \n    assertEquals( 5.0, stats.getMin().doubleValue(), 0 );\n    assertEquals( 20.0, stats.getMax().doubleValue(), 0 );\n    assertEquals( new Long(nums.length), stats.getCount() );\n    assertEquals( new Long(0), stats.getMissing() );\n    \n    // Now try again with faceting\n    //---------------------------------\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n    nums = new int[] { 1, 2, 3, 4, 5, 10, 11, 12, 13, 14 };\n    for( i=0; i<nums.length; i++ ) {\n      int num = nums[i];\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField( \"id\", \"doc\"+i );\n      doc.setField( \"name\", \"doc: \"+num );\n      doc.setField( f, num );\n      doc.setField( \"inStock\", i < 5 );\n      server.add( doc );\n    }\n    server.commit();\n    assertNumFound( \"inStock:true\",  5 ); // make sure they all got in\n    assertNumFound( \"inStock:false\", 5 ); // make sure they all got in\n\n    // facet on 'inStock'\n    query.addStatsFieldFacets( f, \"inStock\" );\n    rsp = server.query( query );\n    stats = rsp.getFieldStatsInfo().get( f );\n    assertNotNull( stats );\n    \n    List<FieldStatsInfo> facets = stats.getFacets().get( \"inStock\" );\n    assertNotNull( facets );\n    assertEquals( 2, facets.size() );\n    FieldStatsInfo inStockF = facets.get(0);\n    FieldStatsInfo inStockT = facets.get(1);\n    if( \"true\".equals( inStockF.getName() ) ) {\n      FieldStatsInfo tmp = inStockF;\n      inStockF = inStockT;\n      inStockT = tmp;\n    }\n\n    // make sure half went to each\n    assertEquals( inStockF.getCount(), inStockT.getCount() );\n    assertEquals( stats.getCount().longValue(), inStockF.getCount()+inStockT.getCount() );\n\n    assertTrue( \"check that min max faceted ok\", inStockF.getMin() > inStockT.getMax() );\n    assertEquals( \"they have the same distribution\", inStockF.getStddev(), inStockT.getStddev() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb7013a9f6816d571709782a1cf4e1b6a15ddd81","date":1331251174,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testStatistics().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testStatistics().mjava","sourceNew":" @Test\n public void testStatistics() throws Exception\n  {    \n    SolrServer server = getSolrServer();\n    \n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n\n    String f = \"val_pi\";\n    \n    int i=0;               // 0   1   2   3   4   5   6   7   8   9 \n    int[] nums = new int[] { 23, 26, 38, 46, 55, 63, 77, 84, 92, 94 };\n    for( int num : nums ) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField( \"id\", \"doc\"+i++ );\n      doc.setField( \"name\", \"doc: \"+num );\n      doc.setField( f, num );\n      server.add( doc );\n    }\n    server.commit();\n    assertNumFound( \"*:*\", nums.length ); // make sure they all got in\n    \n    SolrQuery query = new SolrQuery( \"*:*\" );\n    query.setRows( 0 );\n    query.setGetFieldStatistics( f );\n    \n    QueryResponse rsp = server.query( query );\n    FieldStatsInfo stats = rsp.getFieldStatsInfo().get( f );\n    assertNotNull( stats );\n    \n    assertEquals( 23.0, ((Double)stats.getMin()).doubleValue(), 0 );\n    assertEquals( 94.0, ((Double)stats.getMax()).doubleValue(), 0 );\n    assertEquals( new Long(nums.length), stats.getCount() );\n    assertEquals( new Long(0), stats.getMissing() );\n    assertEquals( \"26.4\", stats.getStddev().toString().substring(0,4) );\n    \n    // now lets try again with a new set...  (odd median)\n    //----------------------------------------------------\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n    nums = new int[] { 5, 7, 10, 19, 20 };\n    for( int num : nums ) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField( \"id\", \"doc\"+i++ );\n      doc.setField( \"name\", \"doc: \"+num );\n      doc.setField( f, num );\n      server.add( doc );\n    }\n    server.commit();\n    assertNumFound( \"*:*\", nums.length ); // make sure they all got in\n    \n    rsp = server.query( query );\n    stats = rsp.getFieldStatsInfo().get( f );\n    assertNotNull( stats );\n    \n    assertEquals( 5.0, ((Double)stats.getMin()).doubleValue(), 0 );\n    assertEquals( 20.0, ((Double)stats.getMax()).doubleValue(), 0 );\n    assertEquals( new Long(nums.length), stats.getCount() );\n    assertEquals( new Long(0), stats.getMissing() );\n    \n    // Now try again with faceting\n    //---------------------------------\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n    nums = new int[] { 1, 2, 3, 4, 5, 10, 11, 12, 13, 14 };\n    for( i=0; i<nums.length; i++ ) {\n      int num = nums[i];\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField( \"id\", \"doc\"+i );\n      doc.setField( \"name\", \"doc: \"+num );\n      doc.setField( f, num );\n      doc.setField( \"inStock\", i < 5 );\n      server.add( doc );\n    }\n    server.commit();\n    assertNumFound( \"inStock:true\",  5 ); // make sure they all got in\n    assertNumFound( \"inStock:false\", 5 ); // make sure they all got in\n\n    // facet on 'inStock'\n    query.addStatsFieldFacets( f, \"inStock\" );\n    rsp = server.query( query );\n    stats = rsp.getFieldStatsInfo().get( f );\n    assertNotNull( stats );\n    \n    List<FieldStatsInfo> facets = stats.getFacets().get( \"inStock\" );\n    assertNotNull( facets );\n    assertEquals( 2, facets.size() );\n    FieldStatsInfo inStockF = facets.get(0);\n    FieldStatsInfo inStockT = facets.get(1);\n    if( \"true\".equals( inStockF.getName() ) ) {\n      FieldStatsInfo tmp = inStockF;\n      inStockF = inStockT;\n      inStockT = tmp;\n    }\n\n    // make sure half went to each\n    assertEquals( inStockF.getCount(), inStockT.getCount() );\n    assertEquals( stats.getCount().longValue(), inStockF.getCount()+inStockT.getCount() );\n\n    assertTrue( \"check that min max faceted ok\", ((Double)inStockF.getMin()).doubleValue() < ((Double)inStockF.getMax()).doubleValue() );\n    assertEquals( \"they have the same distribution\", inStockF.getStddev(), inStockT.getStddev() );\n  }\n\n","sourceOld":" @Test\n public void testStatistics() throws Exception\n  {    \n    SolrServer server = getSolrServer();\n    \n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n\n    String f = \"val_pi\";\n    \n    int i=0;               // 0   1   2   3   4   5   6   7   8   9 \n    int[] nums = new int[] { 23, 26, 38, 46, 55, 63, 77, 84, 92, 94 };\n    for( int num : nums ) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField( \"id\", \"doc\"+i++ );\n      doc.setField( \"name\", \"doc: \"+num );\n      doc.setField( f, num );\n      server.add( doc );\n    }\n    server.commit();\n    assertNumFound( \"*:*\", nums.length ); // make sure they all got in\n    \n    SolrQuery query = new SolrQuery( \"*:*\" );\n    query.setRows( 0 );\n    query.setGetFieldStatistics( f );\n    \n    QueryResponse rsp = server.query( query );\n    FieldStatsInfo stats = rsp.getFieldStatsInfo().get( f );\n    assertNotNull( stats );\n    \n    assertEquals( 23.0, ((Double)stats.getMin()).doubleValue(), 0 );\n    assertEquals( 94.0, ((Double)stats.getMax()).doubleValue(), 0 );\n    assertEquals( new Long(nums.length), stats.getCount() );\n    assertEquals( new Long(0), stats.getMissing() );\n    assertEquals( \"26.4\", stats.getStddev().toString().substring(0,4) );\n    \n    // now lets try again with a new set...  (odd median)\n    //----------------------------------------------------\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n    nums = new int[] { 5, 7, 10, 19, 20 };\n    for( int num : nums ) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField( \"id\", \"doc\"+i++ );\n      doc.setField( \"name\", \"doc: \"+num );\n      doc.setField( f, num );\n      server.add( doc );\n    }\n    server.commit();\n    assertNumFound( \"*:*\", nums.length ); // make sure they all got in\n    \n    rsp = server.query( query );\n    stats = rsp.getFieldStatsInfo().get( f );\n    assertNotNull( stats );\n    \n    assertEquals( 5.0, ((Double)stats.getMin()).doubleValue(), 0 );\n    assertEquals( 20.0, ((Double)stats.getMin()).doubleValue(), 0 );\n    assertEquals( new Long(nums.length), stats.getCount() );\n    assertEquals( new Long(0), stats.getMissing() );\n    \n    // Now try again with faceting\n    //---------------------------------\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n    nums = new int[] { 1, 2, 3, 4, 5, 10, 11, 12, 13, 14 };\n    for( i=0; i<nums.length; i++ ) {\n      int num = nums[i];\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField( \"id\", \"doc\"+i );\n      doc.setField( \"name\", \"doc: \"+num );\n      doc.setField( f, num );\n      doc.setField( \"inStock\", i < 5 );\n      server.add( doc );\n    }\n    server.commit();\n    assertNumFound( \"inStock:true\",  5 ); // make sure they all got in\n    assertNumFound( \"inStock:false\", 5 ); // make sure they all got in\n\n    // facet on 'inStock'\n    query.addStatsFieldFacets( f, \"inStock\" );\n    rsp = server.query( query );\n    stats = rsp.getFieldStatsInfo().get( f );\n    assertNotNull( stats );\n    \n    List<FieldStatsInfo> facets = stats.getFacets().get( \"inStock\" );\n    assertNotNull( facets );\n    assertEquals( 2, facets.size() );\n    FieldStatsInfo inStockF = facets.get(0);\n    FieldStatsInfo inStockT = facets.get(1);\n    if( \"true\".equals( inStockF.getName() ) ) {\n      FieldStatsInfo tmp = inStockF;\n      inStockF = inStockT;\n      inStockT = tmp;\n    }\n\n    // make sure half went to each\n    assertEquals( inStockF.getCount(), inStockT.getCount() );\n    assertEquals( stats.getCount().longValue(), inStockF.getCount()+inStockT.getCount() );\n\n    assertTrue( \"check that min max faceted ok\", ((Double)inStockF.getMin()).doubleValue() > ((Double)inStockF.getMax()).doubleValue() );\n    assertEquals( \"they have the same distribution\", inStockF.getStddev(), inStockT.getStddev() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"38e3b736c7ca086d61b7dbb841c905ee115490da","date":1331657018,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testStatistics().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testStatistics().mjava","sourceNew":" @Test\n public void testStatistics() throws Exception\n  {    \n    SolrServer server = getSolrServer();\n    \n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n\n    String f = \"val_pi\";\n    \n    int i=0;               // 0   1   2   3   4   5   6   7   8   9 \n    int[] nums = new int[] { 23, 26, 38, 46, 55, 63, 77, 84, 92, 94 };\n    for( int num : nums ) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField( \"id\", \"doc\"+i++ );\n      doc.setField( \"name\", \"doc: \"+num );\n      doc.setField( f, num );\n      server.add( doc );\n    }\n    server.commit();\n    assertNumFound( \"*:*\", nums.length ); // make sure they all got in\n    \n    SolrQuery query = new SolrQuery( \"*:*\" );\n    query.setRows( 0 );\n    query.setGetFieldStatistics( f );\n    \n    QueryResponse rsp = server.query( query );\n    FieldStatsInfo stats = rsp.getFieldStatsInfo().get( f );\n    assertNotNull( stats );\n    \n    assertEquals( 23.0, ((Double)stats.getMin()).doubleValue(), 0 );\n    assertEquals( 94.0, ((Double)stats.getMax()).doubleValue(), 0 );\n    assertEquals( new Long(nums.length), stats.getCount() );\n    assertEquals( new Long(0), stats.getMissing() );\n    assertEquals( \"26.4\", stats.getStddev().toString().substring(0,4) );\n    \n    // now lets try again with a new set...  (odd median)\n    //----------------------------------------------------\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n    nums = new int[] { 5, 7, 10, 19, 20 };\n    for( int num : nums ) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField( \"id\", \"doc\"+i++ );\n      doc.setField( \"name\", \"doc: \"+num );\n      doc.setField( f, num );\n      server.add( doc );\n    }\n    server.commit();\n    assertNumFound( \"*:*\", nums.length ); // make sure they all got in\n    \n    rsp = server.query( query );\n    stats = rsp.getFieldStatsInfo().get( f );\n    assertNotNull( stats );\n    \n    assertEquals( 5.0, ((Double)stats.getMin()).doubleValue(), 0 );\n    assertEquals( 20.0, ((Double)stats.getMax()).doubleValue(), 0 );\n    assertEquals( new Long(nums.length), stats.getCount() );\n    assertEquals( new Long(0), stats.getMissing() );\n    \n    // Now try again with faceting\n    //---------------------------------\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n    nums = new int[] { 1, 2, 3, 4, 5, 10, 11, 12, 13, 14 };\n    for( i=0; i<nums.length; i++ ) {\n      int num = nums[i];\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField( \"id\", \"doc\"+i );\n      doc.setField( \"name\", \"doc: \"+num );\n      doc.setField( f, num );\n      doc.setField( \"inStock\", i < 5 );\n      server.add( doc );\n    }\n    server.commit();\n    assertNumFound( \"inStock:true\",  5 ); // make sure they all got in\n    assertNumFound( \"inStock:false\", 5 ); // make sure they all got in\n\n    // facet on 'inStock'\n    query.addStatsFieldFacets( f, \"inStock\" );\n    rsp = server.query( query );\n    stats = rsp.getFieldStatsInfo().get( f );\n    assertNotNull( stats );\n    \n    List<FieldStatsInfo> facets = stats.getFacets().get( \"inStock\" );\n    assertNotNull( facets );\n    assertEquals( 2, facets.size() );\n    FieldStatsInfo inStockF = facets.get(0);\n    FieldStatsInfo inStockT = facets.get(1);\n    if( \"true\".equals( inStockF.getName() ) ) {\n      FieldStatsInfo tmp = inStockF;\n      inStockF = inStockT;\n      inStockT = tmp;\n    }\n\n    // make sure half went to each\n    assertEquals( inStockF.getCount(), inStockT.getCount() );\n    assertEquals( stats.getCount().longValue(), inStockF.getCount()+inStockT.getCount() );\n\n    assertTrue( \"check that min max faceted ok\", ((Double)inStockF.getMin()).doubleValue() < ((Double)inStockF.getMax()).doubleValue() );\n    assertEquals( \"they have the same distribution\", inStockF.getStddev(), inStockT.getStddev() );\n  }\n\n","sourceOld":" @Test\n public void testStatistics() throws Exception\n  {    \n    SolrServer server = getSolrServer();\n    \n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n\n    String f = \"val_pi\";\n    \n    int i=0;               // 0   1   2   3   4   5   6   7   8   9 \n    int[] nums = new int[] { 23, 26, 38, 46, 55, 63, 77, 84, 92, 94 };\n    for( int num : nums ) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField( \"id\", \"doc\"+i++ );\n      doc.setField( \"name\", \"doc: \"+num );\n      doc.setField( f, num );\n      server.add( doc );\n    }\n    server.commit();\n    assertNumFound( \"*:*\", nums.length ); // make sure they all got in\n    \n    SolrQuery query = new SolrQuery( \"*:*\" );\n    query.setRows( 0 );\n    query.setGetFieldStatistics( f );\n    \n    QueryResponse rsp = server.query( query );\n    FieldStatsInfo stats = rsp.getFieldStatsInfo().get( f );\n    assertNotNull( stats );\n    \n    assertEquals( 23.0, stats.getMin().doubleValue(), 0 );\n    assertEquals( 94.0, stats.getMax().doubleValue(), 0 );\n    assertEquals( new Long(nums.length), stats.getCount() );\n    assertEquals( new Long(0), stats.getMissing() );\n    assertEquals( \"26.4\", stats.getStddev().toString().substring(0,4) );\n    \n    // now lets try again with a new set...  (odd median)\n    //----------------------------------------------------\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n    nums = new int[] { 5, 7, 10, 19, 20 };\n    for( int num : nums ) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField( \"id\", \"doc\"+i++ );\n      doc.setField( \"name\", \"doc: \"+num );\n      doc.setField( f, num );\n      server.add( doc );\n    }\n    server.commit();\n    assertNumFound( \"*:*\", nums.length ); // make sure they all got in\n    \n    rsp = server.query( query );\n    stats = rsp.getFieldStatsInfo().get( f );\n    assertNotNull( stats );\n    \n    assertEquals( 5.0, stats.getMin().doubleValue(), 0 );\n    assertEquals( 20.0, stats.getMax().doubleValue(), 0 );\n    assertEquals( new Long(nums.length), stats.getCount() );\n    assertEquals( new Long(0), stats.getMissing() );\n    \n    // Now try again with faceting\n    //---------------------------------\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n    nums = new int[] { 1, 2, 3, 4, 5, 10, 11, 12, 13, 14 };\n    for( i=0; i<nums.length; i++ ) {\n      int num = nums[i];\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField( \"id\", \"doc\"+i );\n      doc.setField( \"name\", \"doc: \"+num );\n      doc.setField( f, num );\n      doc.setField( \"inStock\", i < 5 );\n      server.add( doc );\n    }\n    server.commit();\n    assertNumFound( \"inStock:true\",  5 ); // make sure they all got in\n    assertNumFound( \"inStock:false\", 5 ); // make sure they all got in\n\n    // facet on 'inStock'\n    query.addStatsFieldFacets( f, \"inStock\" );\n    rsp = server.query( query );\n    stats = rsp.getFieldStatsInfo().get( f );\n    assertNotNull( stats );\n    \n    List<FieldStatsInfo> facets = stats.getFacets().get( \"inStock\" );\n    assertNotNull( facets );\n    assertEquals( 2, facets.size() );\n    FieldStatsInfo inStockF = facets.get(0);\n    FieldStatsInfo inStockT = facets.get(1);\n    if( \"true\".equals( inStockF.getName() ) ) {\n      FieldStatsInfo tmp = inStockF;\n      inStockF = inStockT;\n      inStockT = tmp;\n    }\n\n    // make sure half went to each\n    assertEquals( inStockF.getCount(), inStockT.getCount() );\n    assertEquals( stats.getCount().longValue(), inStockF.getCount()+inStockT.getCount() );\n\n    assertTrue( \"check that min max faceted ok\", inStockF.getMin() > inStockT.getMax() );\n    assertEquals( \"they have the same distribution\", inStockF.getStddev(), inStockT.getStddev() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2106271e380c198349e0f6eac0395bb462913fab","date":1397072894,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testStatistics().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testStatistics().mjava","sourceNew":" @Test\n public void testStatistics() throws Exception\n  {    \n    SolrServer server = getSolrServer();\n    \n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n\n    String f = \"val_i\";\n    \n    int i=0;               // 0   1   2   3   4   5   6   7   8   9 \n    int[] nums = new int[] { 23, 26, 38, 46, 55, 63, 77, 84, 92, 94 };\n    for( int num : nums ) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField( \"id\", \"doc\"+i++ );\n      doc.setField( \"name\", \"doc: \"+num );\n      doc.setField( f, num );\n      server.add( doc );\n    }\n    server.commit();\n    assertNumFound( \"*:*\", nums.length ); // make sure they all got in\n    \n    SolrQuery query = new SolrQuery( \"*:*\" );\n    query.setRows( 0 );\n    query.setGetFieldStatistics( f );\n    \n    QueryResponse rsp = server.query( query );\n    FieldStatsInfo stats = rsp.getFieldStatsInfo().get( f );\n    assertNotNull( stats );\n    \n    assertEquals( 23.0, ((Double)stats.getMin()).doubleValue(), 0 );\n    assertEquals( 94.0, ((Double)stats.getMax()).doubleValue(), 0 );\n    assertEquals( new Long(nums.length), stats.getCount() );\n    assertEquals( new Long(0), stats.getMissing() );\n    assertEquals( \"26.4\", stats.getStddev().toString().substring(0,4) );\n    \n    // now lets try again with a new set...  (odd median)\n    //----------------------------------------------------\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n    nums = new int[] { 5, 7, 10, 19, 20 };\n    for( int num : nums ) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField( \"id\", \"doc\"+i++ );\n      doc.setField( \"name\", \"doc: \"+num );\n      doc.setField( f, num );\n      server.add( doc );\n    }\n    server.commit();\n    assertNumFound( \"*:*\", nums.length ); // make sure they all got in\n    \n    rsp = server.query( query );\n    stats = rsp.getFieldStatsInfo().get( f );\n    assertNotNull( stats );\n    \n    assertEquals( 5.0, ((Double)stats.getMin()).doubleValue(), 0 );\n    assertEquals( 20.0, ((Double)stats.getMax()).doubleValue(), 0 );\n    assertEquals( new Long(nums.length), stats.getCount() );\n    assertEquals( new Long(0), stats.getMissing() );\n    \n    // Now try again with faceting\n    //---------------------------------\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n    nums = new int[] { 1, 2, 3, 4, 5, 10, 11, 12, 13, 14 };\n    for( i=0; i<nums.length; i++ ) {\n      int num = nums[i];\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField( \"id\", \"doc\"+i );\n      doc.setField( \"name\", \"doc: \"+num );\n      doc.setField( f, num );\n      doc.setField( \"inStock\", i < 5 );\n      server.add( doc );\n    }\n    server.commit();\n    assertNumFound( \"inStock:true\",  5 ); // make sure they all got in\n    assertNumFound( \"inStock:false\", 5 ); // make sure they all got in\n\n    // facet on 'inStock'\n    query.addStatsFieldFacets( f, \"inStock\" );\n    rsp = server.query( query );\n    stats = rsp.getFieldStatsInfo().get( f );\n    assertNotNull( stats );\n    \n    List<FieldStatsInfo> facets = stats.getFacets().get( \"inStock\" );\n    assertNotNull( facets );\n    assertEquals( 2, facets.size() );\n    FieldStatsInfo inStockF = facets.get(0);\n    FieldStatsInfo inStockT = facets.get(1);\n    if( \"true\".equals( inStockF.getName() ) ) {\n      FieldStatsInfo tmp = inStockF;\n      inStockF = inStockT;\n      inStockT = tmp;\n    }\n\n    // make sure half went to each\n    assertEquals( inStockF.getCount(), inStockT.getCount() );\n    assertEquals( stats.getCount().longValue(), inStockF.getCount()+inStockT.getCount() );\n\n    assertTrue( \"check that min max faceted ok\", ((Double)inStockF.getMin()).doubleValue() < ((Double)inStockF.getMax()).doubleValue() );\n    assertEquals( \"they have the same distribution\", inStockF.getStddev(), inStockT.getStddev() );\n  }\n\n","sourceOld":" @Test\n public void testStatistics() throws Exception\n  {    \n    SolrServer server = getSolrServer();\n    \n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n\n    String f = \"val_pi\";\n    \n    int i=0;               // 0   1   2   3   4   5   6   7   8   9 \n    int[] nums = new int[] { 23, 26, 38, 46, 55, 63, 77, 84, 92, 94 };\n    for( int num : nums ) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField( \"id\", \"doc\"+i++ );\n      doc.setField( \"name\", \"doc: \"+num );\n      doc.setField( f, num );\n      server.add( doc );\n    }\n    server.commit();\n    assertNumFound( \"*:*\", nums.length ); // make sure they all got in\n    \n    SolrQuery query = new SolrQuery( \"*:*\" );\n    query.setRows( 0 );\n    query.setGetFieldStatistics( f );\n    \n    QueryResponse rsp = server.query( query );\n    FieldStatsInfo stats = rsp.getFieldStatsInfo().get( f );\n    assertNotNull( stats );\n    \n    assertEquals( 23.0, ((Double)stats.getMin()).doubleValue(), 0 );\n    assertEquals( 94.0, ((Double)stats.getMax()).doubleValue(), 0 );\n    assertEquals( new Long(nums.length), stats.getCount() );\n    assertEquals( new Long(0), stats.getMissing() );\n    assertEquals( \"26.4\", stats.getStddev().toString().substring(0,4) );\n    \n    // now lets try again with a new set...  (odd median)\n    //----------------------------------------------------\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n    nums = new int[] { 5, 7, 10, 19, 20 };\n    for( int num : nums ) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField( \"id\", \"doc\"+i++ );\n      doc.setField( \"name\", \"doc: \"+num );\n      doc.setField( f, num );\n      server.add( doc );\n    }\n    server.commit();\n    assertNumFound( \"*:*\", nums.length ); // make sure they all got in\n    \n    rsp = server.query( query );\n    stats = rsp.getFieldStatsInfo().get( f );\n    assertNotNull( stats );\n    \n    assertEquals( 5.0, ((Double)stats.getMin()).doubleValue(), 0 );\n    assertEquals( 20.0, ((Double)stats.getMax()).doubleValue(), 0 );\n    assertEquals( new Long(nums.length), stats.getCount() );\n    assertEquals( new Long(0), stats.getMissing() );\n    \n    // Now try again with faceting\n    //---------------------------------\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n    nums = new int[] { 1, 2, 3, 4, 5, 10, 11, 12, 13, 14 };\n    for( i=0; i<nums.length; i++ ) {\n      int num = nums[i];\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField( \"id\", \"doc\"+i );\n      doc.setField( \"name\", \"doc: \"+num );\n      doc.setField( f, num );\n      doc.setField( \"inStock\", i < 5 );\n      server.add( doc );\n    }\n    server.commit();\n    assertNumFound( \"inStock:true\",  5 ); // make sure they all got in\n    assertNumFound( \"inStock:false\", 5 ); // make sure they all got in\n\n    // facet on 'inStock'\n    query.addStatsFieldFacets( f, \"inStock\" );\n    rsp = server.query( query );\n    stats = rsp.getFieldStatsInfo().get( f );\n    assertNotNull( stats );\n    \n    List<FieldStatsInfo> facets = stats.getFacets().get( \"inStock\" );\n    assertNotNull( facets );\n    assertEquals( 2, facets.size() );\n    FieldStatsInfo inStockF = facets.get(0);\n    FieldStatsInfo inStockT = facets.get(1);\n    if( \"true\".equals( inStockF.getName() ) ) {\n      FieldStatsInfo tmp = inStockF;\n      inStockF = inStockT;\n      inStockT = tmp;\n    }\n\n    // make sure half went to each\n    assertEquals( inStockF.getCount(), inStockT.getCount() );\n    assertEquals( stats.getCount().longValue(), inStockF.getCount()+inStockT.getCount() );\n\n    assertTrue( \"check that min max faceted ok\", ((Double)inStockF.getMin()).doubleValue() < ((Double)inStockF.getMax()).doubleValue() );\n    assertEquals( \"they have the same distribution\", inStockF.getStddev(), inStockT.getStddev() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testStatistics().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testStatistics().mjava","sourceNew":" @Test\n public void testStatistics() throws Exception\n  {    \n    SolrClient client = getSolrClient();\n    \n    // Empty the database...\n    client.deleteByQuery(\"*:*\");// delete everything!\n    client.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n\n    String f = \"val_i\";\n    \n    int i=0;               // 0   1   2   3   4   5   6   7   8   9 \n    int[] nums = new int[] { 23, 26, 38, 46, 55, 63, 77, 84, 92, 94 };\n    for( int num : nums ) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField( \"id\", \"doc\"+i++ );\n      doc.setField( \"name\", \"doc: \"+num );\n      doc.setField( f, num );\n      client.add(doc);\n    }\n    client.commit();\n    assertNumFound( \"*:*\", nums.length ); // make sure they all got in\n    \n    SolrQuery query = new SolrQuery( \"*:*\" );\n    query.setRows( 0 );\n    query.setGetFieldStatistics( f );\n    \n    QueryResponse rsp = client.query( query );\n    FieldStatsInfo stats = rsp.getFieldStatsInfo().get( f );\n    assertNotNull(stats);\n    \n    assertEquals( 23.0, ((Double)stats.getMin()).doubleValue(), 0 );\n    assertEquals(94.0, ((Double) stats.getMax()).doubleValue(), 0);\n    assertEquals( new Long(nums.length), stats.getCount() );\n    assertEquals( new Long(0), stats.getMissing() );\n    assertEquals( \"26.4\", stats.getStddev().toString().substring(0, 4) );\n    \n    // now lets try again with a new set...  (odd median)\n    //----------------------------------------------------\n    client.deleteByQuery( \"*:*\" );// delete everything!\n    client.commit();\n    assertNumFound(\"*:*\", 0); // make sure it got in\n    nums = new int[] { 5, 7, 10, 19, 20 };\n    for( int num : nums ) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField( \"id\", \"doc\"+i++ );\n      doc.setField( \"name\", \"doc: \"+num );\n      doc.setField( f, num );\n      client.add( doc );\n    }\n    client.commit();\n    assertNumFound( \"*:*\", nums.length ); // make sure they all got in\n    \n    rsp = client.query( query );\n    stats = rsp.getFieldStatsInfo().get( f );\n    assertNotNull( stats );\n    \n    assertEquals(5.0, ((Double) stats.getMin()).doubleValue(), 0);\n    assertEquals( 20.0, ((Double)stats.getMax()).doubleValue(), 0 );\n    assertEquals(new Long(nums.length), stats.getCount());\n    assertEquals( new Long(0), stats.getMissing() );\n    \n    // Now try again with faceting\n    //---------------------------------\n    client.deleteByQuery(\"*:*\");// delete everything!\n    client.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n    nums = new int[] { 1, 2, 3, 4, 5, 10, 11, 12, 13, 14 };\n    for( i=0; i<nums.length; i++ ) {\n      int num = nums[i];\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField( \"id\", \"doc\"+i );\n      doc.setField( \"name\", \"doc: \"+num );\n      doc.setField( f, num );\n      doc.setField( \"inStock\", i < 5 );\n      client.add( doc );\n    }\n    client.commit();\n    assertNumFound( \"inStock:true\",  5 ); // make sure they all got in\n    assertNumFound( \"inStock:false\", 5 ); // make sure they all got in\n\n    // facet on 'inStock'\n    query.addStatsFieldFacets(f, \"inStock\");\n    rsp = client.query( query );\n    stats = rsp.getFieldStatsInfo().get( f );\n    assertNotNull( stats );\n    \n    List<FieldStatsInfo> facets = stats.getFacets().get( \"inStock\" );\n    assertNotNull( facets );\n    assertEquals( 2, facets.size() );\n    FieldStatsInfo inStockF = facets.get(0);\n    FieldStatsInfo inStockT = facets.get(1);\n    if( \"true\".equals( inStockF.getName() ) ) {\n      FieldStatsInfo tmp = inStockF;\n      inStockF = inStockT;\n      inStockT = tmp;\n    }\n\n    // make sure half went to each\n    assertEquals( inStockF.getCount(), inStockT.getCount() );\n    assertEquals( stats.getCount().longValue(), inStockF.getCount()+inStockT.getCount() );\n\n    assertTrue( \"check that min max faceted ok\", ((Double)inStockF.getMin()).doubleValue() < ((Double)inStockF.getMax()).doubleValue() );\n    assertEquals( \"they have the same distribution\", inStockF.getStddev(), inStockT.getStddev() );\n  }\n\n","sourceOld":" @Test\n public void testStatistics() throws Exception\n  {    \n    SolrServer server = getSolrServer();\n    \n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n\n    String f = \"val_i\";\n    \n    int i=0;               // 0   1   2   3   4   5   6   7   8   9 \n    int[] nums = new int[] { 23, 26, 38, 46, 55, 63, 77, 84, 92, 94 };\n    for( int num : nums ) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField( \"id\", \"doc\"+i++ );\n      doc.setField( \"name\", \"doc: \"+num );\n      doc.setField( f, num );\n      server.add( doc );\n    }\n    server.commit();\n    assertNumFound( \"*:*\", nums.length ); // make sure they all got in\n    \n    SolrQuery query = new SolrQuery( \"*:*\" );\n    query.setRows( 0 );\n    query.setGetFieldStatistics( f );\n    \n    QueryResponse rsp = server.query( query );\n    FieldStatsInfo stats = rsp.getFieldStatsInfo().get( f );\n    assertNotNull( stats );\n    \n    assertEquals( 23.0, ((Double)stats.getMin()).doubleValue(), 0 );\n    assertEquals( 94.0, ((Double)stats.getMax()).doubleValue(), 0 );\n    assertEquals( new Long(nums.length), stats.getCount() );\n    assertEquals( new Long(0), stats.getMissing() );\n    assertEquals( \"26.4\", stats.getStddev().toString().substring(0,4) );\n    \n    // now lets try again with a new set...  (odd median)\n    //----------------------------------------------------\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n    nums = new int[] { 5, 7, 10, 19, 20 };\n    for( int num : nums ) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField( \"id\", \"doc\"+i++ );\n      doc.setField( \"name\", \"doc: \"+num );\n      doc.setField( f, num );\n      server.add( doc );\n    }\n    server.commit();\n    assertNumFound( \"*:*\", nums.length ); // make sure they all got in\n    \n    rsp = server.query( query );\n    stats = rsp.getFieldStatsInfo().get( f );\n    assertNotNull( stats );\n    \n    assertEquals( 5.0, ((Double)stats.getMin()).doubleValue(), 0 );\n    assertEquals( 20.0, ((Double)stats.getMax()).doubleValue(), 0 );\n    assertEquals( new Long(nums.length), stats.getCount() );\n    assertEquals( new Long(0), stats.getMissing() );\n    \n    // Now try again with faceting\n    //---------------------------------\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n    nums = new int[] { 1, 2, 3, 4, 5, 10, 11, 12, 13, 14 };\n    for( i=0; i<nums.length; i++ ) {\n      int num = nums[i];\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField( \"id\", \"doc\"+i );\n      doc.setField( \"name\", \"doc: \"+num );\n      doc.setField( f, num );\n      doc.setField( \"inStock\", i < 5 );\n      server.add( doc );\n    }\n    server.commit();\n    assertNumFound( \"inStock:true\",  5 ); // make sure they all got in\n    assertNumFound( \"inStock:false\", 5 ); // make sure they all got in\n\n    // facet on 'inStock'\n    query.addStatsFieldFacets( f, \"inStock\" );\n    rsp = server.query( query );\n    stats = rsp.getFieldStatsInfo().get( f );\n    assertNotNull( stats );\n    \n    List<FieldStatsInfo> facets = stats.getFacets().get( \"inStock\" );\n    assertNotNull( facets );\n    assertEquals( 2, facets.size() );\n    FieldStatsInfo inStockF = facets.get(0);\n    FieldStatsInfo inStockT = facets.get(1);\n    if( \"true\".equals( inStockF.getName() ) ) {\n      FieldStatsInfo tmp = inStockF;\n      inStockF = inStockT;\n      inStockT = tmp;\n    }\n\n    // make sure half went to each\n    assertEquals( inStockF.getCount(), inStockT.getCount() );\n    assertEquals( stats.getCount().longValue(), inStockF.getCount()+inStockT.getCount() );\n\n    assertTrue( \"check that min max faceted ok\", ((Double)inStockF.getMin()).doubleValue() < ((Double)inStockF.getMax()).doubleValue() );\n    assertEquals( \"they have the same distribution\", inStockF.getStddev(), inStockT.getStddev() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6a269c1ddba3f8c9fa9a40572ecc538eddda41a","date":1528054850,"type":3,"author":"Michael Braun","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testStatistics().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testStatistics().mjava","sourceNew":" @Test\n public void testStatistics() throws Exception\n  {    \n    SolrClient client = getSolrClient();\n    \n    // Empty the database...\n    client.deleteByQuery(\"*:*\");// delete everything!\n    client.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n\n    String f = \"val_i\";\n    \n    int i=0;               // 0   1   2   3   4   5   6   7   8   9 \n    int[] nums = new int[] { 23, 26, 38, 46, 55, 63, 77, 84, 92, 94 };\n    for( int num : nums ) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField( \"id\", \"doc\"+i++ );\n      doc.setField( \"name\", \"doc: \"+num );\n      doc.setField( f, num );\n      client.add(doc);\n    }\n    client.commit();\n    assertNumFound( \"*:*\", nums.length ); // make sure they all got in\n    \n    SolrQuery query = new SolrQuery( \"*:*\" );\n    query.setRows( 0 );\n    query.setGetFieldStatistics( f );\n    \n    QueryResponse rsp = client.query( query );\n    FieldStatsInfo stats = rsp.getFieldStatsInfo().get( f );\n    assertNotNull(stats);\n    \n    assertEquals( 23.0, ((Double)stats.getMin()).doubleValue(), 0 );\n    assertEquals(94.0, ((Double) stats.getMax()).doubleValue(), 0);\n    assertEquals(Long.valueOf(nums.length), stats.getCount() );\n    assertEquals(Long.valueOf(0), stats.getMissing() );\n    assertEquals( \"26.4\", stats.getStddev().toString().substring(0, 4) );\n    \n    // now lets try again with a new set...  (odd median)\n    //----------------------------------------------------\n    client.deleteByQuery( \"*:*\" );// delete everything!\n    client.commit();\n    assertNumFound(\"*:*\", 0); // make sure it got in\n    nums = new int[] { 5, 7, 10, 19, 20 };\n    for( int num : nums ) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField( \"id\", \"doc\"+i++ );\n      doc.setField( \"name\", \"doc: \"+num );\n      doc.setField( f, num );\n      client.add( doc );\n    }\n    client.commit();\n    assertNumFound( \"*:*\", nums.length ); // make sure they all got in\n    \n    rsp = client.query( query );\n    stats = rsp.getFieldStatsInfo().get( f );\n    assertNotNull( stats );\n    \n    assertEquals(5.0, ((Double) stats.getMin()).doubleValue(), 0);\n    assertEquals( 20.0, ((Double)stats.getMax()).doubleValue(), 0 );\n    assertEquals(Long.valueOf(nums.length), stats.getCount());\n    assertEquals(Long.valueOf(0), stats.getMissing() );\n    \n    // Now try again with faceting\n    //---------------------------------\n    client.deleteByQuery(\"*:*\");// delete everything!\n    client.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n    nums = new int[] { 1, 2, 3, 4, 5, 10, 11, 12, 13, 14 };\n    for( i=0; i<nums.length; i++ ) {\n      int num = nums[i];\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField( \"id\", \"doc\"+i );\n      doc.setField( \"name\", \"doc: \"+num );\n      doc.setField( f, num );\n      doc.setField( \"inStock\", i < 5 );\n      client.add( doc );\n    }\n    client.commit();\n    assertNumFound( \"inStock:true\",  5 ); // make sure they all got in\n    assertNumFound( \"inStock:false\", 5 ); // make sure they all got in\n\n    // facet on 'inStock'\n    query.addStatsFieldFacets(f, \"inStock\");\n    rsp = client.query( query );\n    stats = rsp.getFieldStatsInfo().get( f );\n    assertNotNull( stats );\n    \n    List<FieldStatsInfo> facets = stats.getFacets().get( \"inStock\" );\n    assertNotNull( facets );\n    assertEquals( 2, facets.size() );\n    FieldStatsInfo inStockF = facets.get(0);\n    FieldStatsInfo inStockT = facets.get(1);\n    if( \"true\".equals( inStockF.getName() ) ) {\n      FieldStatsInfo tmp = inStockF;\n      inStockF = inStockT;\n      inStockT = tmp;\n    }\n\n    // make sure half went to each\n    assertEquals( inStockF.getCount(), inStockT.getCount() );\n    assertEquals( stats.getCount().longValue(), inStockF.getCount()+inStockT.getCount() );\n\n    assertTrue( \"check that min max faceted ok\", ((Double)inStockF.getMin()).doubleValue() < ((Double)inStockF.getMax()).doubleValue() );\n    assertEquals( \"they have the same distribution\", inStockF.getStddev(), inStockT.getStddev() );\n  }\n\n","sourceOld":" @Test\n public void testStatistics() throws Exception\n  {    \n    SolrClient client = getSolrClient();\n    \n    // Empty the database...\n    client.deleteByQuery(\"*:*\");// delete everything!\n    client.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n\n    String f = \"val_i\";\n    \n    int i=0;               // 0   1   2   3   4   5   6   7   8   9 \n    int[] nums = new int[] { 23, 26, 38, 46, 55, 63, 77, 84, 92, 94 };\n    for( int num : nums ) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField( \"id\", \"doc\"+i++ );\n      doc.setField( \"name\", \"doc: \"+num );\n      doc.setField( f, num );\n      client.add(doc);\n    }\n    client.commit();\n    assertNumFound( \"*:*\", nums.length ); // make sure they all got in\n    \n    SolrQuery query = new SolrQuery( \"*:*\" );\n    query.setRows( 0 );\n    query.setGetFieldStatistics( f );\n    \n    QueryResponse rsp = client.query( query );\n    FieldStatsInfo stats = rsp.getFieldStatsInfo().get( f );\n    assertNotNull(stats);\n    \n    assertEquals( 23.0, ((Double)stats.getMin()).doubleValue(), 0 );\n    assertEquals(94.0, ((Double) stats.getMax()).doubleValue(), 0);\n    assertEquals( new Long(nums.length), stats.getCount() );\n    assertEquals( new Long(0), stats.getMissing() );\n    assertEquals( \"26.4\", stats.getStddev().toString().substring(0, 4) );\n    \n    // now lets try again with a new set...  (odd median)\n    //----------------------------------------------------\n    client.deleteByQuery( \"*:*\" );// delete everything!\n    client.commit();\n    assertNumFound(\"*:*\", 0); // make sure it got in\n    nums = new int[] { 5, 7, 10, 19, 20 };\n    for( int num : nums ) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField( \"id\", \"doc\"+i++ );\n      doc.setField( \"name\", \"doc: \"+num );\n      doc.setField( f, num );\n      client.add( doc );\n    }\n    client.commit();\n    assertNumFound( \"*:*\", nums.length ); // make sure they all got in\n    \n    rsp = client.query( query );\n    stats = rsp.getFieldStatsInfo().get( f );\n    assertNotNull( stats );\n    \n    assertEquals(5.0, ((Double) stats.getMin()).doubleValue(), 0);\n    assertEquals( 20.0, ((Double)stats.getMax()).doubleValue(), 0 );\n    assertEquals(new Long(nums.length), stats.getCount());\n    assertEquals( new Long(0), stats.getMissing() );\n    \n    // Now try again with faceting\n    //---------------------------------\n    client.deleteByQuery(\"*:*\");// delete everything!\n    client.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n    nums = new int[] { 1, 2, 3, 4, 5, 10, 11, 12, 13, 14 };\n    for( i=0; i<nums.length; i++ ) {\n      int num = nums[i];\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField( \"id\", \"doc\"+i );\n      doc.setField( \"name\", \"doc: \"+num );\n      doc.setField( f, num );\n      doc.setField( \"inStock\", i < 5 );\n      client.add( doc );\n    }\n    client.commit();\n    assertNumFound( \"inStock:true\",  5 ); // make sure they all got in\n    assertNumFound( \"inStock:false\", 5 ); // make sure they all got in\n\n    // facet on 'inStock'\n    query.addStatsFieldFacets(f, \"inStock\");\n    rsp = client.query( query );\n    stats = rsp.getFieldStatsInfo().get( f );\n    assertNotNull( stats );\n    \n    List<FieldStatsInfo> facets = stats.getFacets().get( \"inStock\" );\n    assertNotNull( facets );\n    assertEquals( 2, facets.size() );\n    FieldStatsInfo inStockF = facets.get(0);\n    FieldStatsInfo inStockT = facets.get(1);\n    if( \"true\".equals( inStockF.getName() ) ) {\n      FieldStatsInfo tmp = inStockF;\n      inStockF = inStockT;\n      inStockT = tmp;\n    }\n\n    // make sure half went to each\n    assertEquals( inStockF.getCount(), inStockT.getCount() );\n    assertEquals( stats.getCount().longValue(), inStockF.getCount()+inStockT.getCount() );\n\n    assertTrue( \"check that min max faceted ok\", ((Double)inStockF.getMin()).doubleValue() < ((Double)inStockF.getMax()).doubleValue() );\n    assertEquals( \"they have the same distribution\", inStockF.getStddev(), inStockT.getStddev() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"628903f37b6c442da0d390db1c6af9a0e74d41a7","date":1531736685,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testStatistics().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testStatistics().mjava","sourceNew":" @Test\n public void testStatistics() throws Exception\n  {    \n    SolrClient client = getSolrClient();\n    \n    // Empty the database...\n    client.deleteByQuery(\"*:*\");// delete everything!\n    client.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n\n    String f = \"val_i\";\n    \n    int i=0;               // 0   1   2   3   4   5   6   7   8   9 \n    int[] nums = new int[] { 23, 26, 38, 46, 55, 63, 77, 84, 92, 94 };\n    for( int num : nums ) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField( \"id\", \"doc\"+i++ );\n      doc.setField( \"name\", \"doc: \"+num );\n      doc.setField( f, num );\n      client.add(doc);\n    }\n    client.commit();\n    assertNumFound( \"*:*\", nums.length ); // make sure they all got in\n    \n    SolrQuery query = new SolrQuery( \"*:*\" );\n    query.setRows( 0 );\n    query.setGetFieldStatistics( f );\n    \n    QueryResponse rsp = client.query( query );\n    FieldStatsInfo stats = rsp.getFieldStatsInfo().get( f );\n    assertNotNull(stats);\n    \n    assertEquals( 23.0, ((Double)stats.getMin()).doubleValue(), 0 );\n    assertEquals(94.0, ((Double) stats.getMax()).doubleValue(), 0);\n    assertEquals(Long.valueOf(nums.length), stats.getCount() );\n    assertEquals(Long.valueOf(0), stats.getMissing() );\n    assertEquals( \"26.4\", stats.getStddev().toString().substring(0, 4) );\n    \n    // now lets try again with a new set...  (odd median)\n    //----------------------------------------------------\n    client.deleteByQuery( \"*:*\" );// delete everything!\n    client.commit();\n    assertNumFound(\"*:*\", 0); // make sure it got in\n    nums = new int[] { 5, 7, 10, 19, 20 };\n    for( int num : nums ) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField( \"id\", \"doc\"+i++ );\n      doc.setField( \"name\", \"doc: \"+num );\n      doc.setField( f, num );\n      client.add( doc );\n    }\n    client.commit();\n    assertNumFound( \"*:*\", nums.length ); // make sure they all got in\n    \n    rsp = client.query( query );\n    stats = rsp.getFieldStatsInfo().get( f );\n    assertNotNull( stats );\n    \n    assertEquals(5.0, ((Double) stats.getMin()).doubleValue(), 0);\n    assertEquals( 20.0, ((Double)stats.getMax()).doubleValue(), 0 );\n    assertEquals(Long.valueOf(nums.length), stats.getCount());\n    assertEquals(Long.valueOf(0), stats.getMissing() );\n    \n    // Now try again with faceting\n    //---------------------------------\n    client.deleteByQuery(\"*:*\");// delete everything!\n    client.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n    nums = new int[] { 1, 2, 3, 4, 5, 10, 11, 12, 13, 14 };\n    for( i=0; i<nums.length; i++ ) {\n      int num = nums[i];\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField( \"id\", \"doc\"+i );\n      doc.setField( \"name\", \"doc: \"+num );\n      doc.setField( f, num );\n      doc.setField( \"inStock\", i < 5 );\n      client.add( doc );\n    }\n    client.commit();\n    assertNumFound( \"inStock:true\",  5 ); // make sure they all got in\n    assertNumFound( \"inStock:false\", 5 ); // make sure they all got in\n\n    // facet on 'inStock'\n    query.addStatsFieldFacets(f, \"inStock\");\n    rsp = client.query( query );\n    stats = rsp.getFieldStatsInfo().get( f );\n    assertNotNull( stats );\n    \n    List<FieldStatsInfo> facets = stats.getFacets().get( \"inStock\" );\n    assertNotNull( facets );\n    assertEquals( 2, facets.size() );\n    FieldStatsInfo inStockF = facets.get(0);\n    FieldStatsInfo inStockT = facets.get(1);\n    if( \"true\".equals( inStockF.getName() ) ) {\n      FieldStatsInfo tmp = inStockF;\n      inStockF = inStockT;\n      inStockT = tmp;\n    }\n\n    // make sure half went to each\n    assertEquals( inStockF.getCount(), inStockT.getCount() );\n    assertEquals( stats.getCount().longValue(), inStockF.getCount()+inStockT.getCount() );\n\n    assertTrue( \"check that min max faceted ok\", ((Double)inStockF.getMin()).doubleValue() < ((Double)inStockF.getMax()).doubleValue() );\n    assertEquals( \"they have the same distribution\", inStockF.getStddev(), inStockT.getStddev() );\n  }\n\n","sourceOld":" @Test\n public void testStatistics() throws Exception\n  {    \n    SolrClient client = getSolrClient();\n    \n    // Empty the database...\n    client.deleteByQuery(\"*:*\");// delete everything!\n    client.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n\n    String f = \"val_i\";\n    \n    int i=0;               // 0   1   2   3   4   5   6   7   8   9 \n    int[] nums = new int[] { 23, 26, 38, 46, 55, 63, 77, 84, 92, 94 };\n    for( int num : nums ) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField( \"id\", \"doc\"+i++ );\n      doc.setField( \"name\", \"doc: \"+num );\n      doc.setField( f, num );\n      client.add(doc);\n    }\n    client.commit();\n    assertNumFound( \"*:*\", nums.length ); // make sure they all got in\n    \n    SolrQuery query = new SolrQuery( \"*:*\" );\n    query.setRows( 0 );\n    query.setGetFieldStatistics( f );\n    \n    QueryResponse rsp = client.query( query );\n    FieldStatsInfo stats = rsp.getFieldStatsInfo().get( f );\n    assertNotNull(stats);\n    \n    assertEquals( 23.0, ((Double)stats.getMin()).doubleValue(), 0 );\n    assertEquals(94.0, ((Double) stats.getMax()).doubleValue(), 0);\n    assertEquals( new Long(nums.length), stats.getCount() );\n    assertEquals( new Long(0), stats.getMissing() );\n    assertEquals( \"26.4\", stats.getStddev().toString().substring(0, 4) );\n    \n    // now lets try again with a new set...  (odd median)\n    //----------------------------------------------------\n    client.deleteByQuery( \"*:*\" );// delete everything!\n    client.commit();\n    assertNumFound(\"*:*\", 0); // make sure it got in\n    nums = new int[] { 5, 7, 10, 19, 20 };\n    for( int num : nums ) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField( \"id\", \"doc\"+i++ );\n      doc.setField( \"name\", \"doc: \"+num );\n      doc.setField( f, num );\n      client.add( doc );\n    }\n    client.commit();\n    assertNumFound( \"*:*\", nums.length ); // make sure they all got in\n    \n    rsp = client.query( query );\n    stats = rsp.getFieldStatsInfo().get( f );\n    assertNotNull( stats );\n    \n    assertEquals(5.0, ((Double) stats.getMin()).doubleValue(), 0);\n    assertEquals( 20.0, ((Double)stats.getMax()).doubleValue(), 0 );\n    assertEquals(new Long(nums.length), stats.getCount());\n    assertEquals( new Long(0), stats.getMissing() );\n    \n    // Now try again with faceting\n    //---------------------------------\n    client.deleteByQuery(\"*:*\");// delete everything!\n    client.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n    nums = new int[] { 1, 2, 3, 4, 5, 10, 11, 12, 13, 14 };\n    for( i=0; i<nums.length; i++ ) {\n      int num = nums[i];\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField( \"id\", \"doc\"+i );\n      doc.setField( \"name\", \"doc: \"+num );\n      doc.setField( f, num );\n      doc.setField( \"inStock\", i < 5 );\n      client.add( doc );\n    }\n    client.commit();\n    assertNumFound( \"inStock:true\",  5 ); // make sure they all got in\n    assertNumFound( \"inStock:false\", 5 ); // make sure they all got in\n\n    // facet on 'inStock'\n    query.addStatsFieldFacets(f, \"inStock\");\n    rsp = client.query( query );\n    stats = rsp.getFieldStatsInfo().get( f );\n    assertNotNull( stats );\n    \n    List<FieldStatsInfo> facets = stats.getFacets().get( \"inStock\" );\n    assertNotNull( facets );\n    assertEquals( 2, facets.size() );\n    FieldStatsInfo inStockF = facets.get(0);\n    FieldStatsInfo inStockT = facets.get(1);\n    if( \"true\".equals( inStockF.getName() ) ) {\n      FieldStatsInfo tmp = inStockF;\n      inStockF = inStockT;\n      inStockT = tmp;\n    }\n\n    // make sure half went to each\n    assertEquals( inStockF.getCount(), inStockT.getCount() );\n    assertEquals( stats.getCount().longValue(), inStockF.getCount()+inStockT.getCount() );\n\n    assertTrue( \"check that min max faceted ok\", ((Double)inStockF.getMin()).doubleValue() < ((Double)inStockF.getMax()).doubleValue() );\n    assertEquals( \"they have the same distribution\", inStockF.getStddev(), inStockT.getStddev() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testStatistics().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testStatistics().mjava","sourceNew":" @Test\n public void testStatistics() throws Exception\n  {    \n    SolrClient client = getSolrClient();\n    \n    // Empty the database...\n    client.deleteByQuery(\"*:*\");// delete everything!\n    client.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n\n    String f = \"val_i\";\n    \n    int i=0;               // 0   1   2   3   4   5   6   7   8   9 \n    int[] nums = new int[] { 23, 26, 38, 46, 55, 63, 77, 84, 92, 94 };\n    for( int num : nums ) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField( \"id\", \"doc\"+i++ );\n      doc.setField( \"name\", \"doc: \"+num );\n      doc.setField( f, num );\n      client.add(doc);\n    }\n    client.commit();\n    assertNumFound( \"*:*\", nums.length ); // make sure they all got in\n    \n    SolrQuery query = new SolrQuery( \"*:*\" );\n    query.setRows( 0 );\n    query.setGetFieldStatistics( f );\n    \n    QueryResponse rsp = client.query( query );\n    FieldStatsInfo stats = rsp.getFieldStatsInfo().get( f );\n    assertNotNull(stats);\n    \n    assertEquals( 23.0, ((Double)stats.getMin()).doubleValue(), 0 );\n    assertEquals(94.0, ((Double) stats.getMax()).doubleValue(), 0);\n    assertEquals(Long.valueOf(nums.length), stats.getCount() );\n    assertEquals(Long.valueOf(0), stats.getMissing() );\n    assertEquals( \"26.4\", stats.getStddev().toString().substring(0, 4) );\n    \n    // now lets try again with a new set...  (odd median)\n    //----------------------------------------------------\n    client.deleteByQuery( \"*:*\" );// delete everything!\n    client.commit();\n    assertNumFound(\"*:*\", 0); // make sure it got in\n    nums = new int[] { 5, 7, 10, 19, 20 };\n    for( int num : nums ) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField( \"id\", \"doc\"+i++ );\n      doc.setField( \"name\", \"doc: \"+num );\n      doc.setField( f, num );\n      client.add( doc );\n    }\n    client.commit();\n    assertNumFound( \"*:*\", nums.length ); // make sure they all got in\n    \n    rsp = client.query( query );\n    stats = rsp.getFieldStatsInfo().get( f );\n    assertNotNull( stats );\n    \n    assertEquals(5.0, ((Double) stats.getMin()).doubleValue(), 0);\n    assertEquals( 20.0, ((Double)stats.getMax()).doubleValue(), 0 );\n    assertEquals(Long.valueOf(nums.length), stats.getCount());\n    assertEquals(Long.valueOf(0), stats.getMissing() );\n    \n    // Now try again with faceting\n    //---------------------------------\n    client.deleteByQuery(\"*:*\");// delete everything!\n    client.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n    nums = new int[] { 1, 2, 3, 4, 5, 10, 11, 12, 13, 14 };\n    for( i=0; i<nums.length; i++ ) {\n      int num = nums[i];\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField( \"id\", \"doc\"+i );\n      doc.setField( \"name\", \"doc: \"+num );\n      doc.setField( f, num );\n      doc.setField( \"inStock\", i < 5 );\n      client.add( doc );\n    }\n    client.commit();\n    assertNumFound( \"inStock:true\",  5 ); // make sure they all got in\n    assertNumFound( \"inStock:false\", 5 ); // make sure they all got in\n\n    // facet on 'inStock'\n    query.addStatsFieldFacets(f, \"inStock\");\n    rsp = client.query( query );\n    stats = rsp.getFieldStatsInfo().get( f );\n    assertNotNull( stats );\n    \n    List<FieldStatsInfo> facets = stats.getFacets().get( \"inStock\" );\n    assertNotNull( facets );\n    assertEquals( 2, facets.size() );\n    FieldStatsInfo inStockF = facets.get(0);\n    FieldStatsInfo inStockT = facets.get(1);\n    if( \"true\".equals( inStockF.getName() ) ) {\n      FieldStatsInfo tmp = inStockF;\n      inStockF = inStockT;\n      inStockT = tmp;\n    }\n\n    // make sure half went to each\n    assertEquals( inStockF.getCount(), inStockT.getCount() );\n    assertEquals( stats.getCount().longValue(), inStockF.getCount()+inStockT.getCount() );\n\n    assertTrue( \"check that min max faceted ok\", ((Double)inStockF.getMin()).doubleValue() < ((Double)inStockF.getMax()).doubleValue() );\n    assertEquals( \"they have the same distribution\", inStockF.getStddev(), inStockT.getStddev() );\n  }\n\n","sourceOld":" @Test\n public void testStatistics() throws Exception\n  {    \n    SolrClient client = getSolrClient();\n    \n    // Empty the database...\n    client.deleteByQuery(\"*:*\");// delete everything!\n    client.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n\n    String f = \"val_i\";\n    \n    int i=0;               // 0   1   2   3   4   5   6   7   8   9 \n    int[] nums = new int[] { 23, 26, 38, 46, 55, 63, 77, 84, 92, 94 };\n    for( int num : nums ) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField( \"id\", \"doc\"+i++ );\n      doc.setField( \"name\", \"doc: \"+num );\n      doc.setField( f, num );\n      client.add(doc);\n    }\n    client.commit();\n    assertNumFound( \"*:*\", nums.length ); // make sure they all got in\n    \n    SolrQuery query = new SolrQuery( \"*:*\" );\n    query.setRows( 0 );\n    query.setGetFieldStatistics( f );\n    \n    QueryResponse rsp = client.query( query );\n    FieldStatsInfo stats = rsp.getFieldStatsInfo().get( f );\n    assertNotNull(stats);\n    \n    assertEquals( 23.0, ((Double)stats.getMin()).doubleValue(), 0 );\n    assertEquals(94.0, ((Double) stats.getMax()).doubleValue(), 0);\n    assertEquals( new Long(nums.length), stats.getCount() );\n    assertEquals( new Long(0), stats.getMissing() );\n    assertEquals( \"26.4\", stats.getStddev().toString().substring(0, 4) );\n    \n    // now lets try again with a new set...  (odd median)\n    //----------------------------------------------------\n    client.deleteByQuery( \"*:*\" );// delete everything!\n    client.commit();\n    assertNumFound(\"*:*\", 0); // make sure it got in\n    nums = new int[] { 5, 7, 10, 19, 20 };\n    for( int num : nums ) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField( \"id\", \"doc\"+i++ );\n      doc.setField( \"name\", \"doc: \"+num );\n      doc.setField( f, num );\n      client.add( doc );\n    }\n    client.commit();\n    assertNumFound( \"*:*\", nums.length ); // make sure they all got in\n    \n    rsp = client.query( query );\n    stats = rsp.getFieldStatsInfo().get( f );\n    assertNotNull( stats );\n    \n    assertEquals(5.0, ((Double) stats.getMin()).doubleValue(), 0);\n    assertEquals( 20.0, ((Double)stats.getMax()).doubleValue(), 0 );\n    assertEquals(new Long(nums.length), stats.getCount());\n    assertEquals( new Long(0), stats.getMissing() );\n    \n    // Now try again with faceting\n    //---------------------------------\n    client.deleteByQuery(\"*:*\");// delete everything!\n    client.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n    nums = new int[] { 1, 2, 3, 4, 5, 10, 11, 12, 13, 14 };\n    for( i=0; i<nums.length; i++ ) {\n      int num = nums[i];\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField( \"id\", \"doc\"+i );\n      doc.setField( \"name\", \"doc: \"+num );\n      doc.setField( f, num );\n      doc.setField( \"inStock\", i < 5 );\n      client.add( doc );\n    }\n    client.commit();\n    assertNumFound( \"inStock:true\",  5 ); // make sure they all got in\n    assertNumFound( \"inStock:false\", 5 ); // make sure they all got in\n\n    // facet on 'inStock'\n    query.addStatsFieldFacets(f, \"inStock\");\n    rsp = client.query( query );\n    stats = rsp.getFieldStatsInfo().get( f );\n    assertNotNull( stats );\n    \n    List<FieldStatsInfo> facets = stats.getFacets().get( \"inStock\" );\n    assertNotNull( facets );\n    assertEquals( 2, facets.size() );\n    FieldStatsInfo inStockF = facets.get(0);\n    FieldStatsInfo inStockT = facets.get(1);\n    if( \"true\".equals( inStockF.getName() ) ) {\n      FieldStatsInfo tmp = inStockF;\n      inStockF = inStockT;\n      inStockT = tmp;\n    }\n\n    // make sure half went to each\n    assertEquals( inStockF.getCount(), inStockT.getCount() );\n    assertEquals( stats.getCount().longValue(), inStockF.getCount()+inStockT.getCount() );\n\n    assertTrue( \"check that min max faceted ok\", ((Double)inStockF.getMin()).doubleValue() < ((Double)inStockF.getMax()).doubleValue() );\n    assertEquals( \"they have the same distribution\", inStockF.getStddev(), inStockT.getStddev() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"38e3b736c7ca086d61b7dbb841c905ee115490da":["c26f00b574427b55127e869b935845554afde1fa","bb7013a9f6816d571709782a1cf4e1b6a15ddd81"],"b6a269c1ddba3f8c9fa9a40572ecc538eddda41a":["bafca15d8e408346a67f4282ad1143b88023893b"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"bafca15d8e408346a67f4282ad1143b88023893b":["2106271e380c198349e0f6eac0395bb462913fab"],"628903f37b6c442da0d390db1c6af9a0e74d41a7":["bafca15d8e408346a67f4282ad1143b88023893b","b6a269c1ddba3f8c9fa9a40572ecc538eddda41a"],"1a4469b796ffbb01ca57a182e25a95de21fb4538":["c26f00b574427b55127e869b935845554afde1fa"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["bafca15d8e408346a67f4282ad1143b88023893b","628903f37b6c442da0d390db1c6af9a0e74d41a7"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2106271e380c198349e0f6eac0395bb462913fab":["bb7013a9f6816d571709782a1cf4e1b6a15ddd81"],"bb7013a9f6816d571709782a1cf4e1b6a15ddd81":["1a4469b796ffbb01ca57a182e25a95de21fb4538"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["628903f37b6c442da0d390db1c6af9a0e74d41a7"]},"commit2Childs":{"38e3b736c7ca086d61b7dbb841c905ee115490da":[],"b6a269c1ddba3f8c9fa9a40572ecc538eddda41a":["628903f37b6c442da0d390db1c6af9a0e74d41a7"],"c26f00b574427b55127e869b935845554afde1fa":["38e3b736c7ca086d61b7dbb841c905ee115490da","1a4469b796ffbb01ca57a182e25a95de21fb4538"],"bafca15d8e408346a67f4282ad1143b88023893b":["b6a269c1ddba3f8c9fa9a40572ecc538eddda41a","628903f37b6c442da0d390db1c6af9a0e74d41a7","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5"],"628903f37b6c442da0d390db1c6af9a0e74d41a7":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1a4469b796ffbb01ca57a182e25a95de21fb4538":["bb7013a9f6816d571709782a1cf4e1b6a15ddd81"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"bb7013a9f6816d571709782a1cf4e1b6a15ddd81":["38e3b736c7ca086d61b7dbb841c905ee115490da","2106271e380c198349e0f6eac0395bb462913fab"],"2106271e380c198349e0f6eac0395bb462913fab":["bafca15d8e408346a67f4282ad1143b88023893b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["38e3b736c7ca086d61b7dbb841c905ee115490da","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}