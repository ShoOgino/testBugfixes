{"path":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThreadPool#clone().mjava","commits":[{"id":"0791b41f65aecff2e75db0c1ebf95d745a5ab1b1","date":1338332414,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThreadPool#clone().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public DocumentsWriterPerThreadPool clone() {\n    // We should only be cloned before being used:\n    assert numThreadStatesActive == 0;\n    DocumentsWriterPerThreadPool clone;\n    try {\n      clone = (DocumentsWriterPerThreadPool) super.clone();\n    } catch (CloneNotSupportedException e) {\n      // should not happen\n      throw new RuntimeException(e);\n    }\n    clone.documentsWriter = new SetOnce<DocumentsWriter>();\n    clone.globalFieldMap = new SetOnce<FieldNumbers>();\n    clone.threadStates = new ThreadState[threadStates.length];\n    return clone;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["4ce24aa081e44190692bbebc8aead342ad7060e8"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4ce24aa081e44190692bbebc8aead342ad7060e8","date":1374951664,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThreadPool#clone().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThreadPool#clone().mjava","sourceNew":"  @Override\n  public DocumentsWriterPerThreadPool clone() {\n    // We should only be cloned before being used:\n    if (numThreadStatesActive != 0) {\n      throw new IllegalStateException(\"clone this object before it is used!\");\n    }\n    \n    DocumentsWriterPerThreadPool clone;\n    try {\n      clone = (DocumentsWriterPerThreadPool) super.clone();\n    } catch (CloneNotSupportedException e) {\n      // should not happen\n      throw new RuntimeException(e);\n    }\n    clone.documentsWriter = new SetOnce<DocumentsWriter>();\n    clone.globalFieldMap = new SetOnce<FieldNumbers>();\n    clone.threadStates = new ThreadState[threadStates.length];\n    return clone;\n  }\n\n","sourceOld":"  @Override\n  public DocumentsWriterPerThreadPool clone() {\n    // We should only be cloned before being used:\n    assert numThreadStatesActive == 0;\n    DocumentsWriterPerThreadPool clone;\n    try {\n      clone = (DocumentsWriterPerThreadPool) super.clone();\n    } catch (CloneNotSupportedException e) {\n      // should not happen\n      throw new RuntimeException(e);\n    }\n    clone.documentsWriter = new SetOnce<DocumentsWriter>();\n    clone.globalFieldMap = new SetOnce<FieldNumbers>();\n    clone.threadStates = new ThreadState[threadStates.length];\n    return clone;\n  }\n\n","bugFix":["0791b41f65aecff2e75db0c1ebf95d745a5ab1b1"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThreadPool#clone().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThreadPool#clone().mjava","sourceNew":"  @Override\n  public DocumentsWriterPerThreadPool clone() {\n    // We should only be cloned before being used:\n    if (numThreadStatesActive != 0) {\n      throw new IllegalStateException(\"clone this object before it is used!\");\n    }\n    \n    DocumentsWriterPerThreadPool clone;\n    try {\n      clone = (DocumentsWriterPerThreadPool) super.clone();\n    } catch (CloneNotSupportedException e) {\n      // should not happen\n      throw new RuntimeException(e);\n    }\n    clone.documentsWriter = new SetOnce<DocumentsWriter>();\n    clone.globalFieldMap = new SetOnce<FieldNumbers>();\n    clone.threadStates = new ThreadState[threadStates.length];\n    return clone;\n  }\n\n","sourceOld":"  @Override\n  public DocumentsWriterPerThreadPool clone() {\n    // We should only be cloned before being used:\n    assert numThreadStatesActive == 0;\n    DocumentsWriterPerThreadPool clone;\n    try {\n      clone = (DocumentsWriterPerThreadPool) super.clone();\n    } catch (CloneNotSupportedException e) {\n      // should not happen\n      throw new RuntimeException(e);\n    }\n    clone.documentsWriter = new SetOnce<DocumentsWriter>();\n    clone.globalFieldMap = new SetOnce<FieldNumbers>();\n    clone.threadStates = new ThreadState[threadStates.length];\n    return clone;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7af110b00ea8df9429309d83e38e0533d82e144f","date":1376924768,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThreadPool#clone().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThreadPool#clone().mjava","sourceNew":"  @Override\n  public DocumentsWriterPerThreadPool clone() {\n    // We should only be cloned before being used:\n    if (numThreadStatesActive != 0) {\n      throw new IllegalStateException(\"clone this object before it is used!\");\n    }\n    \n    DocumentsWriterPerThreadPool clone;\n    try {\n      clone = (DocumentsWriterPerThreadPool) super.clone();\n    } catch (CloneNotSupportedException e) {\n      // should not happen\n      throw new RuntimeException(e);\n    }\n    clone.threadStates = new ThreadState[threadStates.length];\n    for (int i = 0; i < threadStates.length; i++) {\n      clone.threadStates[i] = new ThreadState(null);\n    }\n    return clone;\n  }\n\n","sourceOld":"  @Override\n  public DocumentsWriterPerThreadPool clone() {\n    // We should only be cloned before being used:\n    if (numThreadStatesActive != 0) {\n      throw new IllegalStateException(\"clone this object before it is used!\");\n    }\n    \n    DocumentsWriterPerThreadPool clone;\n    try {\n      clone = (DocumentsWriterPerThreadPool) super.clone();\n    } catch (CloneNotSupportedException e) {\n      // should not happen\n      throw new RuntimeException(e);\n    }\n    clone.documentsWriter = new SetOnce<DocumentsWriter>();\n    clone.globalFieldMap = new SetOnce<FieldNumbers>();\n    clone.threadStates = new ThreadState[threadStates.length];\n    return clone;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"31d4861802ca404d78ca1d15f4550eec415b9199","date":1376947894,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThreadPool#clone().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThreadPool#clone().mjava","sourceNew":"  @Override\n  public DocumentsWriterPerThreadPool clone() {\n    // We should only be cloned before being used:\n    if (numThreadStatesActive != 0) {\n      throw new IllegalStateException(\"clone this object before it is used!\");\n    }\n    \n    DocumentsWriterPerThreadPool clone;\n    try {\n      clone = (DocumentsWriterPerThreadPool) super.clone();\n    } catch (CloneNotSupportedException e) {\n      // should not happen\n      throw new RuntimeException(e);\n    }\n    clone.threadStates = new ThreadState[threadStates.length];\n    for (int i = 0; i < threadStates.length; i++) {\n      clone.threadStates[i] = new ThreadState(null);\n    }\n    return clone;\n  }\n\n","sourceOld":"  @Override\n  public DocumentsWriterPerThreadPool clone() {\n    // We should only be cloned before being used:\n    if (numThreadStatesActive != 0) {\n      throw new IllegalStateException(\"clone this object before it is used!\");\n    }\n    \n    DocumentsWriterPerThreadPool clone;\n    try {\n      clone = (DocumentsWriterPerThreadPool) super.clone();\n    } catch (CloneNotSupportedException e) {\n      // should not happen\n      throw new RuntimeException(e);\n    }\n    clone.documentsWriter = new SetOnce<DocumentsWriter>();\n    clone.globalFieldMap = new SetOnce<FieldNumbers>();\n    clone.threadStates = new ThreadState[threadStates.length];\n    return clone;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThreadPool#clone().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThreadPool#clone().mjava","sourceNew":"  @Override\n  public DocumentsWriterPerThreadPool clone() {\n    // We should only be cloned before being used:\n    if (numThreadStatesActive != 0) {\n      throw new IllegalStateException(\"clone this object before it is used!\");\n    }\n    \n    DocumentsWriterPerThreadPool clone;\n    try {\n      clone = (DocumentsWriterPerThreadPool) super.clone();\n    } catch (CloneNotSupportedException e) {\n      // should not happen\n      throw new RuntimeException(e);\n    }\n    clone.threadStates = new ThreadState[threadStates.length];\n    for (int i = 0; i < threadStates.length; i++) {\n      clone.threadStates[i] = new ThreadState(null);\n    }\n    return clone;\n  }\n\n","sourceOld":"  @Override\n  public DocumentsWriterPerThreadPool clone() {\n    // We should only be cloned before being used:\n    if (numThreadStatesActive != 0) {\n      throw new IllegalStateException(\"clone this object before it is used!\");\n    }\n    \n    DocumentsWriterPerThreadPool clone;\n    try {\n      clone = (DocumentsWriterPerThreadPool) super.clone();\n    } catch (CloneNotSupportedException e) {\n      // should not happen\n      throw new RuntimeException(e);\n    }\n    clone.documentsWriter = new SetOnce<DocumentsWriter>();\n    clone.globalFieldMap = new SetOnce<FieldNumbers>();\n    clone.threadStates = new ThreadState[threadStates.length];\n    return clone;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"839ca1793cd9a8eb5bd7c7c62918192d47972f73","date":1399544004,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThreadPool#clone().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThreadPool#clone().mjava","sourceNew":"  @Override\n  public DocumentsWriterPerThreadPool clone() {\n    // We should only be cloned before being used:\n    if (numThreadStatesActive != 0) {\n      throw new IllegalStateException(\"clone this object before it is used!\");\n    }\n\n    return new DocumentsWriterPerThreadPool(threadStates.length);\n  }\n\n","sourceOld":"  @Override\n  public DocumentsWriterPerThreadPool clone() {\n    // We should only be cloned before being used:\n    if (numThreadStatesActive != 0) {\n      throw new IllegalStateException(\"clone this object before it is used!\");\n    }\n    \n    DocumentsWriterPerThreadPool clone;\n    try {\n      clone = (DocumentsWriterPerThreadPool) super.clone();\n    } catch (CloneNotSupportedException e) {\n      // should not happen\n      throw new RuntimeException(e);\n    }\n    clone.threadStates = new ThreadState[threadStates.length];\n    for (int i = 0; i < threadStates.length; i++) {\n      clone.threadStates[i] = new ThreadState(null);\n    }\n    return clone;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cfc45818441587d8004ff1a119fb60ac9ecb9a14","date":1401437797,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThreadPool#clone().mjava","sourceNew":null,"sourceOld":"  @Override\n  public DocumentsWriterPerThreadPool clone() {\n    // We should only be cloned before being used:\n    if (numThreadStatesActive != 0) {\n      throw new IllegalStateException(\"clone this object before it is used!\");\n    }\n\n    return new DocumentsWriterPerThreadPool(threadStates.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7af110b00ea8df9429309d83e38e0533d82e144f":["4ce24aa081e44190692bbebc8aead342ad7060e8"],"4ce24aa081e44190692bbebc8aead342ad7060e8":["0791b41f65aecff2e75db0c1ebf95d745a5ab1b1"],"cfc45818441587d8004ff1a119fb60ac9ecb9a14":["839ca1793cd9a8eb5bd7c7c62918192d47972f73"],"839ca1793cd9a8eb5bd7c7c62918192d47972f73":["7af110b00ea8df9429309d83e38e0533d82e144f"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","7af110b00ea8df9429309d83e38e0533d82e144f"],"31d4861802ca404d78ca1d15f4550eec415b9199":["4ce24aa081e44190692bbebc8aead342ad7060e8","7af110b00ea8df9429309d83e38e0533d82e144f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["0791b41f65aecff2e75db0c1ebf95d745a5ab1b1"],"0791b41f65aecff2e75db0c1ebf95d745a5ab1b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cfc45818441587d8004ff1a119fb60ac9ecb9a14"]},"commit2Childs":{"7af110b00ea8df9429309d83e38e0533d82e144f":["839ca1793cd9a8eb5bd7c7c62918192d47972f73","3dffec77fb8f7d0e9ca4869dddd6af94528b4576","31d4861802ca404d78ca1d15f4550eec415b9199"],"4ce24aa081e44190692bbebc8aead342ad7060e8":["7af110b00ea8df9429309d83e38e0533d82e144f","31d4861802ca404d78ca1d15f4550eec415b9199"],"cfc45818441587d8004ff1a119fb60ac9ecb9a14":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"839ca1793cd9a8eb5bd7c7c62918192d47972f73":["cfc45818441587d8004ff1a119fb60ac9ecb9a14"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"31d4861802ca404d78ca1d15f4550eec415b9199":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0791b41f65aecff2e75db0c1ebf95d745a5ab1b1"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576"],"0791b41f65aecff2e75db0c1ebf95d745a5ab1b1":["4ce24aa081e44190692bbebc8aead342ad7060e8","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","31d4861802ca404d78ca1d15f4550eec415b9199","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}