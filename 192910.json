{"path":"solr/core/src/test/org/apache/solr/cloud/RoutingToNodesWithPropertiesTest#setupCluster().mjava","commits":[{"id":"033183e9e2da4609614733f0226a38c88c49ed36","date":1557334549,"type":0,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/RoutingToNodesWithPropertiesTest#setupCluster().mjava","pathOld":"/dev/null","sourceNew":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    TestInjection.additionalSystemProps = ImmutableMap.of(\"zone\", \"us-west1\");\n    configureCluster(2)\n        .withSolrXml(TEST_PATH().resolve(\"solr-trackingshardhandler.xml\"))\n        .addConfig(\"config\", TEST_PATH().resolve(\"configsets\").resolve(\"cloud-minimal\").resolve(\"conf\"))\n        .configure();\n\n    ZONE1_NODES.addAll(cluster.getJettySolrRunners().stream().map(JettySolrRunner::getNodeName).collect(Collectors.toSet()));\n    TestInjection.additionalSystemProps = ImmutableMap.of(\"zone\", \"us-west2\");\n    ZONE2_NODES.add(cluster.startJettySolrRunner().getNodeName());\n    ZONE2_NODES.add(cluster.startJettySolrRunner().getNodeName());\n\n    String commands =  \"{set-cluster-policy :[{\" +\n        \"    'replica':'#EQUAL',\" +\n        \"    'shard':'#EACH',\" +\n        \"    'sysprop.zone':'#EACH'}]}\";\n\n    SolrRequest req = CloudTestUtils.AutoScalingRequest.create(SolrRequest.METHOD.POST, commands);\n    NamedList<Object> response = cluster.getSolrClient().request(req);\n\n    CollectionAdminRequest.createCollection(COLLECTION, 2, 2)\n        .process(cluster.getSolrClient());\n    cluster.waitForActiveCollection(COLLECTION, 2, 4);\n\n    // Checking putting replicas\n    for (Slice slice : getCollectionState(COLLECTION).getSlices()) {\n      int numReplicaInZone1 = 0;\n      int numReplicaInZone2 = 0;\n      for (Replica replica : slice.getReplicas()) {\n        if (ZONE1_NODES.contains(replica.getNodeName()))\n          numReplicaInZone1++;\n        if (ZONE2_NODES.contains(replica.getNodeName()))\n          numReplicaInZone2++;\n      }\n\n      assertEquals(1, numReplicaInZone1);\n      assertEquals(1, numReplicaInZone2);\n    }\n\n    // check inject props\n    SolrCloudManager cloudManager = new SolrClientCloudManager(new ZkDistributedQueueFactory(cluster.getZkClient()),\n        cluster.getSolrClient());\n    for (String zone1Node: ZONE1_NODES) {\n      NodeStateProvider nodeStateProvider = cloudManager.getNodeStateProvider();\n      Map<String, Object> map  = nodeStateProvider.getNodeValues(zone1Node, Collections.singletonList(PROP_NAME));\n      assertEquals(\"us-west1\", map.get(PROP_NAME));\n    }\n\n    for (String zone1Node: ZONE2_NODES) {\n      NodeStateProvider nodeStateProvider = cloudManager.getNodeStateProvider();\n      Map<String, Object> map = nodeStateProvider.getNodeValues(zone1Node, Collections.singletonList(PROP_NAME));\n      assertEquals(\"us-west2\", map.get(PROP_NAME));\n    }\n\n    for (JettySolrRunner jetty : cluster.getJettySolrRunners()) {\n      if (ZONE1_NODES.contains(jetty.getNodeName())) {\n        ((TrackingShardHandlerFactory)jetty.getCoreContainer().getShardHandlerFactory()).setTrackingQueue(ZONE1_QUEUE);\n      } else {\n        ((TrackingShardHandlerFactory)jetty.getCoreContainer().getShardHandlerFactory()).setTrackingQueue(ZONE2_QUEUE);\n      }\n    }\n\n    for (int i = 0; i < 20; i++) {\n      new UpdateRequest()\n          .add(\"id\", String.valueOf(i))\n          .process(cluster.getSolrClient(), COLLECTION);\n    }\n\n    new UpdateRequest()\n        .commit(cluster.getSolrClient(), COLLECTION);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f120dbe10eed66dd9e9db199ba0195a55ba2507","date":1557498354,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/RoutingToNodesWithPropertiesTest#setupCluster().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/RoutingToNodesWithPropertiesTest#setupCluster().mjava","sourceNew":"  @Before\n  public void setupCluster() throws Exception {\n    TestInjection.additionalSystemProps = ImmutableMap.of(\"zone\", \"us-west1\");\n    configureCluster(2)\n        .withSolrXml(TEST_PATH().resolve(\"solr-trackingshardhandler.xml\"))\n        .addConfig(\"config\", TEST_PATH().resolve(\"configsets\").resolve(\"cloud-minimal\").resolve(\"conf\"))\n        .configure();\n\n    zone1Nodes.addAll(cluster.getJettySolrRunners().stream().map(JettySolrRunner::getNodeName).collect(Collectors.toSet()));\n    TestInjection.additionalSystemProps = ImmutableMap.of(\"zone\", \"us-west2\");\n    zone2Nodes.add(cluster.startJettySolrRunner().getNodeName());\n    zone2Nodes.add(cluster.startJettySolrRunner().getNodeName());\n\n    String commands =  \"{set-cluster-policy :[{\" +\n        \"    'replica':'#EQUAL',\" +\n        \"    'shard':'#EACH',\" +\n        \"    'sysprop.zone':'#EACH'}]}\";\n\n    SolrRequest req = CloudTestUtils.AutoScalingRequest.create(SolrRequest.METHOD.POST, commands);\n    NamedList<Object> response = cluster.getSolrClient().request(req);\n\n    CollectionAdminRequest.createCollection(COLLECTION, 2, 2)\n        .process(cluster.getSolrClient());\n    cluster.waitForActiveCollection(COLLECTION, 2, 4);\n\n    // Checking putting replicas\n    for (Slice slice : getCollectionState(COLLECTION).getSlices()) {\n      int numReplicaInZone1 = 0;\n      int numReplicaInZone2 = 0;\n      for (Replica replica : slice.getReplicas()) {\n        if (zone1Nodes.contains(replica.getNodeName()))\n          numReplicaInZone1++;\n        if (zone2Nodes.contains(replica.getNodeName()))\n          numReplicaInZone2++;\n      }\n\n      assertEquals(1, numReplicaInZone1);\n      assertEquals(1, numReplicaInZone2);\n    }\n\n    // check inject props\n    SolrCloudManager cloudManager = new SolrClientCloudManager(new ZkDistributedQueueFactory(cluster.getZkClient()),\n        cluster.getSolrClient());\n    for (String zone1Node: zone1Nodes) {\n      NodeStateProvider nodeStateProvider = cloudManager.getNodeStateProvider();\n      Map<String, Object> map  = nodeStateProvider.getNodeValues(zone1Node, Collections.singletonList(PROP_NAME));\n      assertEquals(\"us-west1\", map.get(PROP_NAME));\n    }\n\n    for (String zone1Node: zone2Nodes) {\n      NodeStateProvider nodeStateProvider = cloudManager.getNodeStateProvider();\n      Map<String, Object> map = nodeStateProvider.getNodeValues(zone1Node, Collections.singletonList(PROP_NAME));\n      assertEquals(\"us-west2\", map.get(PROP_NAME));\n    }\n\n    for (JettySolrRunner jetty : cluster.getJettySolrRunners()) {\n      if (zone1Nodes.contains(jetty.getNodeName())) {\n        ((TrackingShardHandlerFactory)jetty.getCoreContainer().getShardHandlerFactory()).setTrackingQueue(zone1Queue);\n      } else {\n        ((TrackingShardHandlerFactory)jetty.getCoreContainer().getShardHandlerFactory()).setTrackingQueue(zone2Queue);\n      }\n    }\n\n    for (int i = 0; i < 20; i++) {\n      new UpdateRequest()\n          .add(\"id\", String.valueOf(i))\n          .process(cluster.getSolrClient(), COLLECTION);\n    }\n\n    new UpdateRequest()\n        .commit(cluster.getSolrClient(), COLLECTION);\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    TestInjection.additionalSystemProps = ImmutableMap.of(\"zone\", \"us-west1\");\n    configureCluster(2)\n        .withSolrXml(TEST_PATH().resolve(\"solr-trackingshardhandler.xml\"))\n        .addConfig(\"config\", TEST_PATH().resolve(\"configsets\").resolve(\"cloud-minimal\").resolve(\"conf\"))\n        .configure();\n\n    ZONE1_NODES.addAll(cluster.getJettySolrRunners().stream().map(JettySolrRunner::getNodeName).collect(Collectors.toSet()));\n    TestInjection.additionalSystemProps = ImmutableMap.of(\"zone\", \"us-west2\");\n    ZONE2_NODES.add(cluster.startJettySolrRunner().getNodeName());\n    ZONE2_NODES.add(cluster.startJettySolrRunner().getNodeName());\n\n    String commands =  \"{set-cluster-policy :[{\" +\n        \"    'replica':'#EQUAL',\" +\n        \"    'shard':'#EACH',\" +\n        \"    'sysprop.zone':'#EACH'}]}\";\n\n    SolrRequest req = CloudTestUtils.AutoScalingRequest.create(SolrRequest.METHOD.POST, commands);\n    NamedList<Object> response = cluster.getSolrClient().request(req);\n\n    CollectionAdminRequest.createCollection(COLLECTION, 2, 2)\n        .process(cluster.getSolrClient());\n    cluster.waitForActiveCollection(COLLECTION, 2, 4);\n\n    // Checking putting replicas\n    for (Slice slice : getCollectionState(COLLECTION).getSlices()) {\n      int numReplicaInZone1 = 0;\n      int numReplicaInZone2 = 0;\n      for (Replica replica : slice.getReplicas()) {\n        if (ZONE1_NODES.contains(replica.getNodeName()))\n          numReplicaInZone1++;\n        if (ZONE2_NODES.contains(replica.getNodeName()))\n          numReplicaInZone2++;\n      }\n\n      assertEquals(1, numReplicaInZone1);\n      assertEquals(1, numReplicaInZone2);\n    }\n\n    // check inject props\n    SolrCloudManager cloudManager = new SolrClientCloudManager(new ZkDistributedQueueFactory(cluster.getZkClient()),\n        cluster.getSolrClient());\n    for (String zone1Node: ZONE1_NODES) {\n      NodeStateProvider nodeStateProvider = cloudManager.getNodeStateProvider();\n      Map<String, Object> map  = nodeStateProvider.getNodeValues(zone1Node, Collections.singletonList(PROP_NAME));\n      assertEquals(\"us-west1\", map.get(PROP_NAME));\n    }\n\n    for (String zone1Node: ZONE2_NODES) {\n      NodeStateProvider nodeStateProvider = cloudManager.getNodeStateProvider();\n      Map<String, Object> map = nodeStateProvider.getNodeValues(zone1Node, Collections.singletonList(PROP_NAME));\n      assertEquals(\"us-west2\", map.get(PROP_NAME));\n    }\n\n    for (JettySolrRunner jetty : cluster.getJettySolrRunners()) {\n      if (ZONE1_NODES.contains(jetty.getNodeName())) {\n        ((TrackingShardHandlerFactory)jetty.getCoreContainer().getShardHandlerFactory()).setTrackingQueue(ZONE1_QUEUE);\n      } else {\n        ((TrackingShardHandlerFactory)jetty.getCoreContainer().getShardHandlerFactory()).setTrackingQueue(ZONE2_QUEUE);\n      }\n    }\n\n    for (int i = 0; i < 20; i++) {\n      new UpdateRequest()\n          .add(\"id\", String.valueOf(i))\n          .process(cluster.getSolrClient(), COLLECTION);\n    }\n\n    new UpdateRequest()\n        .commit(cluster.getSolrClient(), COLLECTION);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"833432c363468a5df50f87446a68015404b1fbcf","date":1572302961,"type":3,"author":"Houston Putman","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/RoutingToNodesWithPropertiesTest#setupCluster().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/RoutingToNodesWithPropertiesTest#setupCluster().mjava","sourceNew":"  @Before\n  public void setupCluster() throws Exception {\n    CommonTestInjection.setAdditionalProps(ImmutableMap.of(\"zone\", \"us-west1\"));\n    configureCluster(2)\n        .withSolrXml(TEST_PATH().resolve(\"solr-trackingshardhandler.xml\"))\n        .addConfig(\"config\", TEST_PATH().resolve(\"configsets\").resolve(\"cloud-minimal\").resolve(\"conf\"))\n        .configure();\n\n    zone1Nodes.addAll(cluster.getJettySolrRunners().stream().map(JettySolrRunner::getNodeName).collect(Collectors.toSet()));\n    CommonTestInjection.setAdditionalProps(ImmutableMap.of(\"zone\", \"us-west2\"));\n    zone2Nodes.add(cluster.startJettySolrRunner().getNodeName());\n    zone2Nodes.add(cluster.startJettySolrRunner().getNodeName());\n\n    String commands =  \"{set-cluster-policy :[{\" +\n        \"    'replica':'#EQUAL',\" +\n        \"    'shard':'#EACH',\" +\n        \"    'sysprop.zone':'#EACH'}]}\";\n\n    SolrRequest req = CloudTestUtils.AutoScalingRequest.create(SolrRequest.METHOD.POST, commands);\n    NamedList<Object> response = cluster.getSolrClient().request(req);\n\n    CollectionAdminRequest.createCollection(COLLECTION, 2, 2)\n        .process(cluster.getSolrClient());\n    cluster.waitForActiveCollection(COLLECTION, 2, 4);\n\n    // Checking putting replicas\n    for (Slice slice : getCollectionState(COLLECTION).getSlices()) {\n      int numReplicaInZone1 = 0;\n      int numReplicaInZone2 = 0;\n      for (Replica replica : slice.getReplicas()) {\n        if (zone1Nodes.contains(replica.getNodeName()))\n          numReplicaInZone1++;\n        if (zone2Nodes.contains(replica.getNodeName()))\n          numReplicaInZone2++;\n      }\n\n      assertEquals(1, numReplicaInZone1);\n      assertEquals(1, numReplicaInZone2);\n    }\n\n    // check inject props\n    SolrCloudManager cloudManager = new SolrClientCloudManager(new ZkDistributedQueueFactory(cluster.getZkClient()),\n        cluster.getSolrClient());\n    for (String zone1Node: zone1Nodes) {\n      NodeStateProvider nodeStateProvider = cloudManager.getNodeStateProvider();\n      Map<String, Object> map  = nodeStateProvider.getNodeValues(zone1Node, Collections.singletonList(PROP_NAME));\n      assertEquals(\"us-west1\", map.get(PROP_NAME));\n    }\n\n    for (String zone2Node: zone2Nodes) {\n      NodeStateProvider nodeStateProvider = cloudManager.getNodeStateProvider();\n      Map<String, Object> map = nodeStateProvider.getNodeValues(zone2Node, Collections.singletonList(PROP_NAME));\n      assertEquals(\"us-west2\", map.get(PROP_NAME));\n    }\n\n    for (JettySolrRunner jetty : cluster.getJettySolrRunners()) {\n      if (zone1Nodes.contains(jetty.getNodeName())) {\n        ((TrackingShardHandlerFactory)jetty.getCoreContainer().getShardHandlerFactory()).setTrackingQueue(zone1Queue);\n      } else {\n        ((TrackingShardHandlerFactory)jetty.getCoreContainer().getShardHandlerFactory()).setTrackingQueue(zone2Queue);\n      }\n    }\n\n    for (int i = 0; i < 20; i++) {\n      new UpdateRequest()\n          .add(\"id\", String.valueOf(i))\n          .process(cluster.getSolrClient(), COLLECTION);\n    }\n\n    new UpdateRequest()\n        .commit(cluster.getSolrClient(), COLLECTION);\n  }\n\n","sourceOld":"  @Before\n  public void setupCluster() throws Exception {\n    TestInjection.additionalSystemProps = ImmutableMap.of(\"zone\", \"us-west1\");\n    configureCluster(2)\n        .withSolrXml(TEST_PATH().resolve(\"solr-trackingshardhandler.xml\"))\n        .addConfig(\"config\", TEST_PATH().resolve(\"configsets\").resolve(\"cloud-minimal\").resolve(\"conf\"))\n        .configure();\n\n    zone1Nodes.addAll(cluster.getJettySolrRunners().stream().map(JettySolrRunner::getNodeName).collect(Collectors.toSet()));\n    TestInjection.additionalSystemProps = ImmutableMap.of(\"zone\", \"us-west2\");\n    zone2Nodes.add(cluster.startJettySolrRunner().getNodeName());\n    zone2Nodes.add(cluster.startJettySolrRunner().getNodeName());\n\n    String commands =  \"{set-cluster-policy :[{\" +\n        \"    'replica':'#EQUAL',\" +\n        \"    'shard':'#EACH',\" +\n        \"    'sysprop.zone':'#EACH'}]}\";\n\n    SolrRequest req = CloudTestUtils.AutoScalingRequest.create(SolrRequest.METHOD.POST, commands);\n    NamedList<Object> response = cluster.getSolrClient().request(req);\n\n    CollectionAdminRequest.createCollection(COLLECTION, 2, 2)\n        .process(cluster.getSolrClient());\n    cluster.waitForActiveCollection(COLLECTION, 2, 4);\n\n    // Checking putting replicas\n    for (Slice slice : getCollectionState(COLLECTION).getSlices()) {\n      int numReplicaInZone1 = 0;\n      int numReplicaInZone2 = 0;\n      for (Replica replica : slice.getReplicas()) {\n        if (zone1Nodes.contains(replica.getNodeName()))\n          numReplicaInZone1++;\n        if (zone2Nodes.contains(replica.getNodeName()))\n          numReplicaInZone2++;\n      }\n\n      assertEquals(1, numReplicaInZone1);\n      assertEquals(1, numReplicaInZone2);\n    }\n\n    // check inject props\n    SolrCloudManager cloudManager = new SolrClientCloudManager(new ZkDistributedQueueFactory(cluster.getZkClient()),\n        cluster.getSolrClient());\n    for (String zone1Node: zone1Nodes) {\n      NodeStateProvider nodeStateProvider = cloudManager.getNodeStateProvider();\n      Map<String, Object> map  = nodeStateProvider.getNodeValues(zone1Node, Collections.singletonList(PROP_NAME));\n      assertEquals(\"us-west1\", map.get(PROP_NAME));\n    }\n\n    for (String zone1Node: zone2Nodes) {\n      NodeStateProvider nodeStateProvider = cloudManager.getNodeStateProvider();\n      Map<String, Object> map = nodeStateProvider.getNodeValues(zone1Node, Collections.singletonList(PROP_NAME));\n      assertEquals(\"us-west2\", map.get(PROP_NAME));\n    }\n\n    for (JettySolrRunner jetty : cluster.getJettySolrRunners()) {\n      if (zone1Nodes.contains(jetty.getNodeName())) {\n        ((TrackingShardHandlerFactory)jetty.getCoreContainer().getShardHandlerFactory()).setTrackingQueue(zone1Queue);\n      } else {\n        ((TrackingShardHandlerFactory)jetty.getCoreContainer().getShardHandlerFactory()).setTrackingQueue(zone2Queue);\n      }\n    }\n\n    for (int i = 0; i < 20; i++) {\n      new UpdateRequest()\n          .add(\"id\", String.valueOf(i))\n          .process(cluster.getSolrClient(), COLLECTION);\n    }\n\n    new UpdateRequest()\n        .commit(cluster.getSolrClient(), COLLECTION);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0906682f4fba42a1c91862d7451b0f41ba539aa","date":1583357564,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/RoutingToNodesWithPropertiesTest#setupCluster().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/RoutingToNodesWithPropertiesTest#setupCluster().mjava","sourceNew":"  @Before\n  public void setupCluster() throws Exception {\n    CommonTestInjection.setAdditionalProps(ImmutableMap.of(\"zone\", \"us-west1\"));\n    configureCluster(2)\n        .withSolrXml(TEST_PATH().resolve(\"solr-trackingshardhandler.xml\"))\n        .addConfig(\"config\", TEST_PATH().resolve(\"configsets\").resolve(\"cloud-minimal\").resolve(\"conf\"))\n        .configure();\n\n    zone1Nodes.addAll(cluster.getJettySolrRunners().stream().map(JettySolrRunner::getNodeName).collect(Collectors.toSet()));\n    CommonTestInjection.setAdditionalProps(ImmutableMap.of(\"zone\", \"us-west2\"));\n    zone2Nodes.add(cluster.startJettySolrRunner().getNodeName());\n    zone2Nodes.add(cluster.startJettySolrRunner().getNodeName());\n\n    String commands =  \"{set-cluster-policy :[{\" +\n        \"    'replica':'#EQUAL',\" +\n        \"    'shard':'#EACH',\" +\n        \"    'sysprop.zone':'#EACH'}]}\";\n\n    SolrRequest req = CloudTestUtils.AutoScalingRequest.create(SolrRequest.METHOD.POST, commands);\n    cluster.getSolrClient().request(req);\n\n    CollectionAdminRequest.createCollection(COLLECTION, 2, 2)\n        .process(cluster.getSolrClient());\n    cluster.waitForActiveCollection(COLLECTION, 2, 4);\n\n    // Checking putting replicas\n    for (Slice slice : getCollectionState(COLLECTION).getSlices()) {\n      int numReplicaInZone1 = 0;\n      int numReplicaInZone2 = 0;\n      for (Replica replica : slice.getReplicas()) {\n        if (zone1Nodes.contains(replica.getNodeName()))\n          numReplicaInZone1++;\n        if (zone2Nodes.contains(replica.getNodeName()))\n          numReplicaInZone2++;\n      }\n\n      assertEquals(1, numReplicaInZone1);\n      assertEquals(1, numReplicaInZone2);\n    }\n\n    // check inject props\n    try (SolrCloudManager cloudManager = new SolrClientCloudManager(new ZkDistributedQueueFactory(cluster.getZkClient()),\n        cluster.getSolrClient())) {\n      for (String zone1Node: zone1Nodes) {\n        NodeStateProvider nodeStateProvider = cloudManager.getNodeStateProvider();\n        Map<String, Object> map  = nodeStateProvider.getNodeValues(zone1Node, Collections.singletonList(PROP_NAME));\n        assertEquals(\"us-west1\", map.get(PROP_NAME));\n      }\n\n      for (String zone2Node: zone2Nodes) {\n        NodeStateProvider nodeStateProvider = cloudManager.getNodeStateProvider();\n        Map<String, Object> map = nodeStateProvider.getNodeValues(zone2Node, Collections.singletonList(PROP_NAME));\n        assertEquals(\"us-west2\", map.get(PROP_NAME));\n      }\n\n      for (JettySolrRunner jetty : cluster.getJettySolrRunners()) {\n        if (zone1Nodes.contains(jetty.getNodeName())) {\n          ((TrackingShardHandlerFactory)jetty.getCoreContainer().getShardHandlerFactory()).setTrackingQueue(zone1Queue);\n        } else {\n          ((TrackingShardHandlerFactory)jetty.getCoreContainer().getShardHandlerFactory()).setTrackingQueue(zone2Queue);\n        }\n      }\n\n      for (int i = 0; i < 20; i++) {\n        new UpdateRequest()\n            .add(\"id\", String.valueOf(i))\n            .process(cluster.getSolrClient(), COLLECTION);\n      }\n\n      new UpdateRequest()\n          .commit(cluster.getSolrClient(), COLLECTION);\n    }\n  }\n\n","sourceOld":"  @Before\n  public void setupCluster() throws Exception {\n    CommonTestInjection.setAdditionalProps(ImmutableMap.of(\"zone\", \"us-west1\"));\n    configureCluster(2)\n        .withSolrXml(TEST_PATH().resolve(\"solr-trackingshardhandler.xml\"))\n        .addConfig(\"config\", TEST_PATH().resolve(\"configsets\").resolve(\"cloud-minimal\").resolve(\"conf\"))\n        .configure();\n\n    zone1Nodes.addAll(cluster.getJettySolrRunners().stream().map(JettySolrRunner::getNodeName).collect(Collectors.toSet()));\n    CommonTestInjection.setAdditionalProps(ImmutableMap.of(\"zone\", \"us-west2\"));\n    zone2Nodes.add(cluster.startJettySolrRunner().getNodeName());\n    zone2Nodes.add(cluster.startJettySolrRunner().getNodeName());\n\n    String commands =  \"{set-cluster-policy :[{\" +\n        \"    'replica':'#EQUAL',\" +\n        \"    'shard':'#EACH',\" +\n        \"    'sysprop.zone':'#EACH'}]}\";\n\n    SolrRequest req = CloudTestUtils.AutoScalingRequest.create(SolrRequest.METHOD.POST, commands);\n    NamedList<Object> response = cluster.getSolrClient().request(req);\n\n    CollectionAdminRequest.createCollection(COLLECTION, 2, 2)\n        .process(cluster.getSolrClient());\n    cluster.waitForActiveCollection(COLLECTION, 2, 4);\n\n    // Checking putting replicas\n    for (Slice slice : getCollectionState(COLLECTION).getSlices()) {\n      int numReplicaInZone1 = 0;\n      int numReplicaInZone2 = 0;\n      for (Replica replica : slice.getReplicas()) {\n        if (zone1Nodes.contains(replica.getNodeName()))\n          numReplicaInZone1++;\n        if (zone2Nodes.contains(replica.getNodeName()))\n          numReplicaInZone2++;\n      }\n\n      assertEquals(1, numReplicaInZone1);\n      assertEquals(1, numReplicaInZone2);\n    }\n\n    // check inject props\n    SolrCloudManager cloudManager = new SolrClientCloudManager(new ZkDistributedQueueFactory(cluster.getZkClient()),\n        cluster.getSolrClient());\n    for (String zone1Node: zone1Nodes) {\n      NodeStateProvider nodeStateProvider = cloudManager.getNodeStateProvider();\n      Map<String, Object> map  = nodeStateProvider.getNodeValues(zone1Node, Collections.singletonList(PROP_NAME));\n      assertEquals(\"us-west1\", map.get(PROP_NAME));\n    }\n\n    for (String zone2Node: zone2Nodes) {\n      NodeStateProvider nodeStateProvider = cloudManager.getNodeStateProvider();\n      Map<String, Object> map = nodeStateProvider.getNodeValues(zone2Node, Collections.singletonList(PROP_NAME));\n      assertEquals(\"us-west2\", map.get(PROP_NAME));\n    }\n\n    for (JettySolrRunner jetty : cluster.getJettySolrRunners()) {\n      if (zone1Nodes.contains(jetty.getNodeName())) {\n        ((TrackingShardHandlerFactory)jetty.getCoreContainer().getShardHandlerFactory()).setTrackingQueue(zone1Queue);\n      } else {\n        ((TrackingShardHandlerFactory)jetty.getCoreContainer().getShardHandlerFactory()).setTrackingQueue(zone2Queue);\n      }\n    }\n\n    for (int i = 0; i < 20; i++) {\n      new UpdateRequest()\n          .add(\"id\", String.valueOf(i))\n          .process(cluster.getSolrClient(), COLLECTION);\n    }\n\n    new UpdateRequest()\n        .commit(cluster.getSolrClient(), COLLECTION);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa2585c33d5d66a1c837c312221eb55ddb3c4300","date":1592493170,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/RoutingToNodesWithPropertiesTest#setupCluster().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/RoutingToNodesWithPropertiesTest#setupCluster().mjava","sourceNew":"  @Before\n  public void setupCluster() throws Exception {\n    CommonTestInjection.setAdditionalProps(ImmutableMap.of(\"zone\", \"us-west1\"));\n    configureCluster(2)\n        .withSolrXml(TEST_PATH().resolve(\"solr-trackingshardhandler.xml\"))\n        .addConfig(\"config\", TEST_PATH().resolve(\"configsets\").resolve(\"cloud-minimal\").resolve(\"conf\"))\n        .configure();\n\n    zone1Nodes.addAll(cluster.getJettySolrRunners().stream().map(JettySolrRunner::getNodeName).collect(Collectors.toSet()));\n    CommonTestInjection.setAdditionalProps(ImmutableMap.of(\"zone\", \"us-west2\"));\n    zone2Nodes.add(cluster.startJettySolrRunner().getNodeName());\n    zone2Nodes.add(cluster.startJettySolrRunner().getNodeName());\n\n    String commands =  \"{set-cluster-policy :[{\" +\n        \"    'replica':'#EQUAL',\" +\n        \"    'shard':'#EACH',\" +\n        \"    'sysprop.zone':'#EACH'}]}\";\n\n    @SuppressWarnings({\"rawtypes\"})\n    SolrRequest req = CloudTestUtils.AutoScalingRequest.create(SolrRequest.METHOD.POST, commands);\n    cluster.getSolrClient().request(req);\n\n    CollectionAdminRequest.createCollection(COLLECTION, 2, 2)\n        .process(cluster.getSolrClient());\n    cluster.waitForActiveCollection(COLLECTION, 2, 4);\n\n    // Checking putting replicas\n    for (Slice slice : getCollectionState(COLLECTION).getSlices()) {\n      int numReplicaInZone1 = 0;\n      int numReplicaInZone2 = 0;\n      for (Replica replica : slice.getReplicas()) {\n        if (zone1Nodes.contains(replica.getNodeName()))\n          numReplicaInZone1++;\n        if (zone2Nodes.contains(replica.getNodeName()))\n          numReplicaInZone2++;\n      }\n\n      assertEquals(1, numReplicaInZone1);\n      assertEquals(1, numReplicaInZone2);\n    }\n\n    // check inject props\n    try (SolrCloudManager cloudManager = new SolrClientCloudManager(new ZkDistributedQueueFactory(cluster.getZkClient()),\n        cluster.getSolrClient())) {\n      for (String zone1Node: zone1Nodes) {\n        NodeStateProvider nodeStateProvider = cloudManager.getNodeStateProvider();\n        Map<String, Object> map  = nodeStateProvider.getNodeValues(zone1Node, Collections.singletonList(PROP_NAME));\n        assertEquals(\"us-west1\", map.get(PROP_NAME));\n      }\n\n      for (String zone2Node: zone2Nodes) {\n        NodeStateProvider nodeStateProvider = cloudManager.getNodeStateProvider();\n        Map<String, Object> map = nodeStateProvider.getNodeValues(zone2Node, Collections.singletonList(PROP_NAME));\n        assertEquals(\"us-west2\", map.get(PROP_NAME));\n      }\n\n      for (JettySolrRunner jetty : cluster.getJettySolrRunners()) {\n        if (zone1Nodes.contains(jetty.getNodeName())) {\n          ((TrackingShardHandlerFactory)jetty.getCoreContainer().getShardHandlerFactory()).setTrackingQueue(zone1Queue);\n        } else {\n          ((TrackingShardHandlerFactory)jetty.getCoreContainer().getShardHandlerFactory()).setTrackingQueue(zone2Queue);\n        }\n      }\n\n      for (int i = 0; i < 20; i++) {\n        new UpdateRequest()\n            .add(\"id\", String.valueOf(i))\n            .process(cluster.getSolrClient(), COLLECTION);\n      }\n\n      new UpdateRequest()\n          .commit(cluster.getSolrClient(), COLLECTION);\n    }\n  }\n\n","sourceOld":"  @Before\n  public void setupCluster() throws Exception {\n    CommonTestInjection.setAdditionalProps(ImmutableMap.of(\"zone\", \"us-west1\"));\n    configureCluster(2)\n        .withSolrXml(TEST_PATH().resolve(\"solr-trackingshardhandler.xml\"))\n        .addConfig(\"config\", TEST_PATH().resolve(\"configsets\").resolve(\"cloud-minimal\").resolve(\"conf\"))\n        .configure();\n\n    zone1Nodes.addAll(cluster.getJettySolrRunners().stream().map(JettySolrRunner::getNodeName).collect(Collectors.toSet()));\n    CommonTestInjection.setAdditionalProps(ImmutableMap.of(\"zone\", \"us-west2\"));\n    zone2Nodes.add(cluster.startJettySolrRunner().getNodeName());\n    zone2Nodes.add(cluster.startJettySolrRunner().getNodeName());\n\n    String commands =  \"{set-cluster-policy :[{\" +\n        \"    'replica':'#EQUAL',\" +\n        \"    'shard':'#EACH',\" +\n        \"    'sysprop.zone':'#EACH'}]}\";\n\n    SolrRequest req = CloudTestUtils.AutoScalingRequest.create(SolrRequest.METHOD.POST, commands);\n    cluster.getSolrClient().request(req);\n\n    CollectionAdminRequest.createCollection(COLLECTION, 2, 2)\n        .process(cluster.getSolrClient());\n    cluster.waitForActiveCollection(COLLECTION, 2, 4);\n\n    // Checking putting replicas\n    for (Slice slice : getCollectionState(COLLECTION).getSlices()) {\n      int numReplicaInZone1 = 0;\n      int numReplicaInZone2 = 0;\n      for (Replica replica : slice.getReplicas()) {\n        if (zone1Nodes.contains(replica.getNodeName()))\n          numReplicaInZone1++;\n        if (zone2Nodes.contains(replica.getNodeName()))\n          numReplicaInZone2++;\n      }\n\n      assertEquals(1, numReplicaInZone1);\n      assertEquals(1, numReplicaInZone2);\n    }\n\n    // check inject props\n    try (SolrCloudManager cloudManager = new SolrClientCloudManager(new ZkDistributedQueueFactory(cluster.getZkClient()),\n        cluster.getSolrClient())) {\n      for (String zone1Node: zone1Nodes) {\n        NodeStateProvider nodeStateProvider = cloudManager.getNodeStateProvider();\n        Map<String, Object> map  = nodeStateProvider.getNodeValues(zone1Node, Collections.singletonList(PROP_NAME));\n        assertEquals(\"us-west1\", map.get(PROP_NAME));\n      }\n\n      for (String zone2Node: zone2Nodes) {\n        NodeStateProvider nodeStateProvider = cloudManager.getNodeStateProvider();\n        Map<String, Object> map = nodeStateProvider.getNodeValues(zone2Node, Collections.singletonList(PROP_NAME));\n        assertEquals(\"us-west2\", map.get(PROP_NAME));\n      }\n\n      for (JettySolrRunner jetty : cluster.getJettySolrRunners()) {\n        if (zone1Nodes.contains(jetty.getNodeName())) {\n          ((TrackingShardHandlerFactory)jetty.getCoreContainer().getShardHandlerFactory()).setTrackingQueue(zone1Queue);\n        } else {\n          ((TrackingShardHandlerFactory)jetty.getCoreContainer().getShardHandlerFactory()).setTrackingQueue(zone2Queue);\n        }\n      }\n\n      for (int i = 0; i < 20; i++) {\n        new UpdateRequest()\n            .add(\"id\", String.valueOf(i))\n            .process(cluster.getSolrClient(), COLLECTION);\n      }\n\n      new UpdateRequest()\n          .commit(cluster.getSolrClient(), COLLECTION);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/RoutingToNodesWithPropertiesTest#setupCluster().mjava","sourceNew":null,"sourceOld":"  @Before\n  public void setupCluster() throws Exception {\n    CommonTestInjection.setAdditionalProps(ImmutableMap.of(\"zone\", \"us-west1\"));\n    configureCluster(2)\n        .withSolrXml(TEST_PATH().resolve(\"solr-trackingshardhandler.xml\"))\n        .addConfig(\"config\", TEST_PATH().resolve(\"configsets\").resolve(\"cloud-minimal\").resolve(\"conf\"))\n        .configure();\n\n    zone1Nodes.addAll(cluster.getJettySolrRunners().stream().map(JettySolrRunner::getNodeName).collect(Collectors.toSet()));\n    CommonTestInjection.setAdditionalProps(ImmutableMap.of(\"zone\", \"us-west2\"));\n    zone2Nodes.add(cluster.startJettySolrRunner().getNodeName());\n    zone2Nodes.add(cluster.startJettySolrRunner().getNodeName());\n\n    String commands =  \"{set-cluster-policy :[{\" +\n        \"    'replica':'#EQUAL',\" +\n        \"    'shard':'#EACH',\" +\n        \"    'sysprop.zone':'#EACH'}]}\";\n\n    @SuppressWarnings({\"rawtypes\"})\n    SolrRequest req = CloudTestUtils.AutoScalingRequest.create(SolrRequest.METHOD.POST, commands);\n    cluster.getSolrClient().request(req);\n\n    CollectionAdminRequest.createCollection(COLLECTION, 2, 2)\n        .process(cluster.getSolrClient());\n    cluster.waitForActiveCollection(COLLECTION, 2, 4);\n\n    // Checking putting replicas\n    for (Slice slice : getCollectionState(COLLECTION).getSlices()) {\n      int numReplicaInZone1 = 0;\n      int numReplicaInZone2 = 0;\n      for (Replica replica : slice.getReplicas()) {\n        if (zone1Nodes.contains(replica.getNodeName()))\n          numReplicaInZone1++;\n        if (zone2Nodes.contains(replica.getNodeName()))\n          numReplicaInZone2++;\n      }\n\n      assertEquals(1, numReplicaInZone1);\n      assertEquals(1, numReplicaInZone2);\n    }\n\n    // check inject props\n    try (SolrCloudManager cloudManager = new SolrClientCloudManager(new ZkDistributedQueueFactory(cluster.getZkClient()),\n        cluster.getSolrClient())) {\n      for (String zone1Node: zone1Nodes) {\n        NodeStateProvider nodeStateProvider = cloudManager.getNodeStateProvider();\n        Map<String, Object> map  = nodeStateProvider.getNodeValues(zone1Node, Collections.singletonList(PROP_NAME));\n        assertEquals(\"us-west1\", map.get(PROP_NAME));\n      }\n\n      for (String zone2Node: zone2Nodes) {\n        NodeStateProvider nodeStateProvider = cloudManager.getNodeStateProvider();\n        Map<String, Object> map = nodeStateProvider.getNodeValues(zone2Node, Collections.singletonList(PROP_NAME));\n        assertEquals(\"us-west2\", map.get(PROP_NAME));\n      }\n\n      for (JettySolrRunner jetty : cluster.getJettySolrRunners()) {\n        if (zone1Nodes.contains(jetty.getNodeName())) {\n          ((TrackingShardHandlerFactory)jetty.getCoreContainer().getShardHandlerFactory()).setTrackingQueue(zone1Queue);\n        } else {\n          ((TrackingShardHandlerFactory)jetty.getCoreContainer().getShardHandlerFactory()).setTrackingQueue(zone2Queue);\n        }\n      }\n\n      for (int i = 0; i < 20; i++) {\n        new UpdateRequest()\n            .add(\"id\", String.valueOf(i))\n            .process(cluster.getSolrClient(), COLLECTION);\n      }\n\n      new UpdateRequest()\n          .commit(cluster.getSolrClient(), COLLECTION);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"833432c363468a5df50f87446a68015404b1fbcf":["1f120dbe10eed66dd9e9db199ba0195a55ba2507"],"d0906682f4fba42a1c91862d7451b0f41ba539aa":["833432c363468a5df50f87446a68015404b1fbcf"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["d0906682f4fba42a1c91862d7451b0f41ba539aa"],"3f504512a03d978990cbff30db0522b354e846db":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1f120dbe10eed66dd9e9db199ba0195a55ba2507":["033183e9e2da4609614733f0226a38c88c49ed36"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"],"033183e9e2da4609614733f0226a38c88c49ed36":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"833432c363468a5df50f87446a68015404b1fbcf":["d0906682f4fba42a1c91862d7451b0f41ba539aa"],"d0906682f4fba42a1c91862d7451b0f41ba539aa":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["3f504512a03d978990cbff30db0522b354e846db"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["033183e9e2da4609614733f0226a38c88c49ed36"],"1f120dbe10eed66dd9e9db199ba0195a55ba2507":["833432c363468a5df50f87446a68015404b1fbcf"],"033183e9e2da4609614733f0226a38c88c49ed36":["1f120dbe10eed66dd9e9db199ba0195a55ba2507"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}