{"path":"lucene/core/src/java/org/apache/lucene/util/FixedBitSet#nextSetBit(int).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/FixedBitSet#nextSetBit(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/FixedBitSet#nextSetBit(int).mjava","sourceNew":"  /** Returns the index of the first set bit starting at the index specified.\n   *  -1 is returned if there are no more set bits.\n   */\n  public int nextSetBit(int index) {\n    assert index >= 0 && index < numBits;\n    int i = index >> 6;\n    final int subIndex = index & 0x3f;      // index within the word\n    long word = bits[i] >> subIndex;  // skip all the bits to the right of index\n\n    if (word!=0) {\n      return (i<<6) + subIndex + BitUtil.ntz(word);\n    }\n\n    while(++i < bits.length) {\n      word = bits[i];\n      if (word != 0) {\n        return (i<<6) + BitUtil.ntz(word);\n      }\n    }\n\n    return -1;\n  }\n\n","sourceOld":"  /** Returns the index of the first set bit starting at the index specified.\n   *  -1 is returned if there are no more set bits.\n   */\n  public int nextSetBit(int index) {\n    assert index >= 0 && index < numBits;\n    int i = index >> 6;\n    final int subIndex = index & 0x3f;      // index within the word\n    long word = bits[i] >> subIndex;  // skip all the bits to the right of index\n\n    if (word!=0) {\n      return (i<<6) + subIndex + BitUtil.ntz(word);\n    }\n\n    while(++i < bits.length) {\n      word = bits[i];\n      if (word != 0) {\n        return (i<<6) + BitUtil.ntz(word);\n      }\n    }\n\n    return -1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"95f83654246556082000bded885bde27a521bb31","date":1353427179,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/FixedBitSet#nextSetBit(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/FixedBitSet#nextSetBit(int).mjava","sourceNew":"  /** Returns the index of the first set bit starting at the index specified.\n   *  -1 is returned if there are no more set bits.\n   */\n  public int nextSetBit(int index) {\n    assert index >= 0 && index < numBits;\n    int i = index >> 6;\n    final int subIndex = index & 0x3f;      // index within the word\n    long word = bits[i] >> subIndex;  // skip all the bits to the right of index\n\n    if (word!=0) {\n      return (i<<6) + subIndex + Long.numberOfTrailingZeros(word);\n    }\n\n    while(++i < bits.length) {\n      word = bits[i];\n      if (word != 0) {\n        return (i<<6) + Long.numberOfTrailingZeros(word);\n      }\n    }\n\n    return -1;\n  }\n\n","sourceOld":"  /** Returns the index of the first set bit starting at the index specified.\n   *  -1 is returned if there are no more set bits.\n   */\n  public int nextSetBit(int index) {\n    assert index >= 0 && index < numBits;\n    int i = index >> 6;\n    final int subIndex = index & 0x3f;      // index within the word\n    long word = bits[i] >> subIndex;  // skip all the bits to the right of index\n\n    if (word!=0) {\n      return (i<<6) + subIndex + BitUtil.ntz(word);\n    }\n\n    while(++i < bits.length) {\n      word = bits[i];\n      if (word != 0) {\n        return (i<<6) + BitUtil.ntz(word);\n      }\n    }\n\n    return -1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/FixedBitSet#nextSetBit(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/FixedBitSet#nextSetBit(int).mjava","sourceNew":"  /** Returns the index of the first set bit starting at the index specified.\n   *  -1 is returned if there are no more set bits.\n   */\n  public int nextSetBit(int index) {\n    assert index >= 0 && index < numBits;\n    int i = index >> 6;\n    final int subIndex = index & 0x3f;      // index within the word\n    long word = bits[i] >> subIndex;  // skip all the bits to the right of index\n\n    if (word!=0) {\n      return (i<<6) + subIndex + Long.numberOfTrailingZeros(word);\n    }\n\n    while(++i < bits.length) {\n      word = bits[i];\n      if (word != 0) {\n        return (i<<6) + Long.numberOfTrailingZeros(word);\n      }\n    }\n\n    return -1;\n  }\n\n","sourceOld":"  /** Returns the index of the first set bit starting at the index specified.\n   *  -1 is returned if there are no more set bits.\n   */\n  public int nextSetBit(int index) {\n    assert index >= 0 && index < numBits;\n    int i = index >> 6;\n    final int subIndex = index & 0x3f;      // index within the word\n    long word = bits[i] >> subIndex;  // skip all the bits to the right of index\n\n    if (word!=0) {\n      return (i<<6) + subIndex + BitUtil.ntz(word);\n    }\n\n    while(++i < bits.length) {\n      word = bits[i];\n      if (word != 0) {\n        return (i<<6) + BitUtil.ntz(word);\n      }\n    }\n\n    return -1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4e991ef3a1dcc08cddb533f26f17a958fd64f982","date":1358522758,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/FixedBitSet#nextSetBit(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/FixedBitSet#nextSetBit(int).mjava","sourceNew":"  /** Returns the index of the first set bit starting at the index specified.\n   *  -1 is returned if there are no more set bits.\n   */\n  public int nextSetBit(int index) {\n    assert index >= 0 && index < numBits;\n    int i = index >> 6;\n    final int subIndex = index & 0x3f;      // index within the word\n    long word = bits[i] >> subIndex;  // skip all the bits to the right of index\n\n    if (word!=0) {\n      return (i<<6) + subIndex + Long.numberOfTrailingZeros(word);\n    }\n\n    while(++i < wordLength) {\n      word = bits[i];\n      if (word != 0) {\n        return (i<<6) + Long.numberOfTrailingZeros(word);\n      }\n    }\n\n    return -1;\n  }\n\n","sourceOld":"  /** Returns the index of the first set bit starting at the index specified.\n   *  -1 is returned if there are no more set bits.\n   */\n  public int nextSetBit(int index) {\n    assert index >= 0 && index < numBits;\n    int i = index >> 6;\n    final int subIndex = index & 0x3f;      // index within the word\n    long word = bits[i] >> subIndex;  // skip all the bits to the right of index\n\n    if (word!=0) {\n      return (i<<6) + subIndex + Long.numberOfTrailingZeros(word);\n    }\n\n    while(++i < bits.length) {\n      word = bits[i];\n      if (word != 0) {\n        return (i<<6) + Long.numberOfTrailingZeros(word);\n      }\n    }\n\n    return -1;\n  }\n\n","bugFix":["c0d520cd04d39f8caa0a53ed23e60beb30e8fb9f"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4015cd39dff8d4dec562d909f9766debac53aa6","date":1358548736,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/FixedBitSet#nextSetBit(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/FixedBitSet#nextSetBit(int).mjava","sourceNew":"  /** Returns the index of the first set bit starting at the index specified.\n   *  -1 is returned if there are no more set bits.\n   */\n  public int nextSetBit(int index) {\n    assert index >= 0 && index < numBits;\n    int i = index >> 6;\n    final int subIndex = index & 0x3f;      // index within the word\n    long word = bits[i] >> subIndex;  // skip all the bits to the right of index\n\n    if (word!=0) {\n      return (i<<6) + subIndex + Long.numberOfTrailingZeros(word);\n    }\n\n    while(++i < wordLength) {\n      word = bits[i];\n      if (word != 0) {\n        return (i<<6) + Long.numberOfTrailingZeros(word);\n      }\n    }\n\n    return -1;\n  }\n\n","sourceOld":"  /** Returns the index of the first set bit starting at the index specified.\n   *  -1 is returned if there are no more set bits.\n   */\n  public int nextSetBit(int index) {\n    assert index >= 0 && index < numBits;\n    int i = index >> 6;\n    final int subIndex = index & 0x3f;      // index within the word\n    long word = bits[i] >> subIndex;  // skip all the bits to the right of index\n\n    if (word!=0) {\n      return (i<<6) + subIndex + Long.numberOfTrailingZeros(word);\n    }\n\n    while(++i < bits.length) {\n      word = bits[i];\n      if (word != 0) {\n        return (i<<6) + Long.numberOfTrailingZeros(word);\n      }\n    }\n\n    return -1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0732a1e488deedeceef7f601e066085e7ac655a","date":1391629546,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/FixedBitSet#nextSetBit(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/FixedBitSet#nextSetBit(int).mjava","sourceNew":"  /** Returns the index of the first set bit starting at the index specified.\n   *  -1 is returned if there are no more set bits.\n   */\n  public int nextSetBit(int index) {\n    assert index >= 0 && index < numBits;\n    int i = index >> 6;\n    final int subIndex = index & 0x3f;      // index within the word\n    long word = bits[i] >> subIndex;  // skip all the bits to the right of index\n\n    if (word!=0) {\n      return index + Long.numberOfTrailingZeros(word);\n    }\n\n    while(++i < wordLength) {\n      word = bits[i];\n      if (word != 0) {\n        return (i<<6) + Long.numberOfTrailingZeros(word);\n      }\n    }\n\n    return -1;\n  }\n\n","sourceOld":"  /** Returns the index of the first set bit starting at the index specified.\n   *  -1 is returned if there are no more set bits.\n   */\n  public int nextSetBit(int index) {\n    assert index >= 0 && index < numBits;\n    int i = index >> 6;\n    final int subIndex = index & 0x3f;      // index within the word\n    long word = bits[i] >> subIndex;  // skip all the bits to the right of index\n\n    if (word!=0) {\n      return (i<<6) + subIndex + Long.numberOfTrailingZeros(word);\n    }\n\n    while(++i < wordLength) {\n      word = bits[i];\n      if (word != 0) {\n        return (i<<6) + Long.numberOfTrailingZeros(word);\n      }\n    }\n\n    return -1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a69cf7f1b4cac5d5b1363402b565cd535f13e6a1","date":1392536197,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/FixedBitSet#nextSetBit(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/FixedBitSet#nextSetBit(int).mjava","sourceNew":"  /** Returns the index of the first set bit starting at the index specified.\n   *  -1 is returned if there are no more set bits.\n   */\n  public int nextSetBit(int index) {\n    assert index >= 0 && index < numBits : \"index=\" + index + \", numBits=\" + numBits;\n    int i = index >> 6;\n    final int subIndex = index & 0x3f;      // index within the word\n    long word = bits[i] >> subIndex;  // skip all the bits to the right of index\n\n    if (word!=0) {\n      return index + Long.numberOfTrailingZeros(word);\n    }\n\n    while(++i < numWords) {\n      word = bits[i];\n      if (word != 0) {\n        return (i<<6) + Long.numberOfTrailingZeros(word);\n      }\n    }\n\n    return -1;\n  }\n\n","sourceOld":"  /** Returns the index of the first set bit starting at the index specified.\n   *  -1 is returned if there are no more set bits.\n   */\n  public int nextSetBit(int index) {\n    assert index >= 0 && index < numBits;\n    int i = index >> 6;\n    final int subIndex = index & 0x3f;      // index within the word\n    long word = bits[i] >> subIndex;  // skip all the bits to the right of index\n\n    if (word!=0) {\n      return index + Long.numberOfTrailingZeros(word);\n    }\n\n    while(++i < wordLength) {\n      word = bits[i];\n      if (word != 0) {\n        return (i<<6) + Long.numberOfTrailingZeros(word);\n      }\n    }\n\n    return -1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55cd30e9e9e71e141455bae8e74401676f036658","date":1406760593,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/FixedBitSet#nextSetBit(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/FixedBitSet#nextSetBit(int).mjava","sourceNew":"  /** Returns the index of the first set bit starting at the index specified.\n   *  -1 is returned if there are no more set bits.\n   */\n  public int nextSetBit(int index) {\n    assert index >= 0 && index < numBits : \"index=\" + index + \", numBits=\" + numBits;\n    int i = index >> 6;\n    long word = bits[i] >> index;  // skip all the bits to the right of index\n\n    if (word!=0) {\n      return index + Long.numberOfTrailingZeros(word);\n    }\n\n    while(++i < numWords) {\n      word = bits[i];\n      if (word != 0) {\n        return (i<<6) + Long.numberOfTrailingZeros(word);\n      }\n    }\n\n    return -1;\n  }\n\n","sourceOld":"  /** Returns the index of the first set bit starting at the index specified.\n   *  -1 is returned if there are no more set bits.\n   */\n  public int nextSetBit(int index) {\n    assert index >= 0 && index < numBits : \"index=\" + index + \", numBits=\" + numBits;\n    int i = index >> 6;\n    final int subIndex = index & 0x3f;      // index within the word\n    long word = bits[i] >> subIndex;  // skip all the bits to the right of index\n\n    if (word!=0) {\n      return index + Long.numberOfTrailingZeros(word);\n    }\n\n    while(++i < numWords) {\n      word = bits[i];\n      if (word != 0) {\n        return (i<<6) + Long.numberOfTrailingZeros(word);\n      }\n    }\n\n    return -1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0abcec02c9851c46c70a75bd42fb6e4d5348ac9e","date":1414135939,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/FixedBitSet#nextSetBit(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/FixedBitSet#nextSetBit(int).mjava","sourceNew":"  @Override\n  public int nextSetBit(int index) {\n    assert index >= 0 && index < numBits : \"index=\" + index + \", numBits=\" + numBits;\n    int i = index >> 6;\n    long word = bits[i] >> index;  // skip all the bits to the right of index\n\n    if (word!=0) {\n      return index + Long.numberOfTrailingZeros(word);\n    }\n\n    while(++i < numWords) {\n      word = bits[i];\n      if (word != 0) {\n        return (i<<6) + Long.numberOfTrailingZeros(word);\n      }\n    }\n\n    return DocIdSetIterator.NO_MORE_DOCS;\n  }\n\n","sourceOld":"  /** Returns the index of the first set bit starting at the index specified.\n   *  -1 is returned if there are no more set bits.\n   */\n  public int nextSetBit(int index) {\n    assert index >= 0 && index < numBits : \"index=\" + index + \", numBits=\" + numBits;\n    int i = index >> 6;\n    long word = bits[i] >> index;  // skip all the bits to the right of index\n\n    if (word!=0) {\n      return index + Long.numberOfTrailingZeros(word);\n    }\n\n    while(++i < numWords) {\n      word = bits[i];\n      if (word != 0) {\n        return (i<<6) + Long.numberOfTrailingZeros(word);\n      }\n    }\n\n    return -1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af918c7c328775f9fadd5870c21f0fafc2a059cc","date":1430253435,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/FixedBitSet#nextSetBit(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/FixedBitSet#nextSetBit(int).mjava","sourceNew":"  @Override\n  public int nextSetBit(int index) {\n    // Depends on the ghost bits being clear!\n    assert index >= 0 && index < numBits : \"index=\" + index + \", numBits=\" + numBits;\n    int i = index >> 6;\n    long word = bits[i] >> index;  // skip all the bits to the right of index\n\n    if (word!=0) {\n      return index + Long.numberOfTrailingZeros(word);\n    }\n\n    while(++i < numWords) {\n      word = bits[i];\n      if (word != 0) {\n        return (i<<6) + Long.numberOfTrailingZeros(word);\n      }\n    }\n\n    return DocIdSetIterator.NO_MORE_DOCS;\n  }\n\n","sourceOld":"  @Override\n  public int nextSetBit(int index) {\n    assert index >= 0 && index < numBits : \"index=\" + index + \", numBits=\" + numBits;\n    int i = index >> 6;\n    long word = bits[i] >> index;  // skip all the bits to the right of index\n\n    if (word!=0) {\n      return index + Long.numberOfTrailingZeros(word);\n    }\n\n    while(++i < numWords) {\n      word = bits[i];\n      if (word != 0) {\n        return (i<<6) + Long.numberOfTrailingZeros(word);\n      }\n    }\n\n    return DocIdSetIterator.NO_MORE_DOCS;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"95f83654246556082000bded885bde27a521bb31":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"c4015cd39dff8d4dec562d909f9766debac53aa6":["407687e67faf6e1f02a211ca078d8e3eed631027","4e991ef3a1dcc08cddb533f26f17a958fd64f982"],"a69cf7f1b4cac5d5b1363402b565cd535f13e6a1":["a0732a1e488deedeceef7f601e066085e7ac655a"],"a0732a1e488deedeceef7f601e066085e7ac655a":["4e991ef3a1dcc08cddb533f26f17a958fd64f982"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","95f83654246556082000bded885bde27a521bb31"],"af918c7c328775f9fadd5870c21f0fafc2a059cc":["0abcec02c9851c46c70a75bd42fb6e4d5348ac9e"],"4e991ef3a1dcc08cddb533f26f17a958fd64f982":["95f83654246556082000bded885bde27a521bb31"],"0abcec02c9851c46c70a75bd42fb6e4d5348ac9e":["55cd30e9e9e71e141455bae8e74401676f036658"],"55cd30e9e9e71e141455bae8e74401676f036658":["a69cf7f1b4cac5d5b1363402b565cd535f13e6a1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["af918c7c328775f9fadd5870c21f0fafc2a059cc"]},"commit2Childs":{"95f83654246556082000bded885bde27a521bb31":["407687e67faf6e1f02a211ca078d8e3eed631027","4e991ef3a1dcc08cddb533f26f17a958fd64f982"],"c4015cd39dff8d4dec562d909f9766debac53aa6":[],"a69cf7f1b4cac5d5b1363402b565cd535f13e6a1":["55cd30e9e9e71e141455bae8e74401676f036658"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["95f83654246556082000bded885bde27a521bb31","407687e67faf6e1f02a211ca078d8e3eed631027"],"a0732a1e488deedeceef7f601e066085e7ac655a":["a69cf7f1b4cac5d5b1363402b565cd535f13e6a1"],"407687e67faf6e1f02a211ca078d8e3eed631027":["c4015cd39dff8d4dec562d909f9766debac53aa6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"af918c7c328775f9fadd5870c21f0fafc2a059cc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4e991ef3a1dcc08cddb533f26f17a958fd64f982":["c4015cd39dff8d4dec562d909f9766debac53aa6","a0732a1e488deedeceef7f601e066085e7ac655a"],"0abcec02c9851c46c70a75bd42fb6e4d5348ac9e":["af918c7c328775f9fadd5870c21f0fafc2a059cc"],"55cd30e9e9e71e141455bae8e74401676f036658":["0abcec02c9851c46c70a75bd42fb6e4d5348ac9e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c4015cd39dff8d4dec562d909f9766debac53aa6","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}