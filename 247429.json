{"path":"solr/core/src/test/org/apache/solr/security/JWTAuthPluginIntegrationTest#testMetrics().mjava","commits":[{"id":"bb3e075eaa5788b2762ec235bf72b069cefe3f50","date":1548244981,"type":0,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/JWTAuthPluginIntegrationTest#testMetrics().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testMetrics() throws Exception {\n    boolean isUseV2Api = random().nextBoolean();\n    String authcPrefix = \"/admin/authentication\";\n    String authzPrefix = \"/admin/authorization\";\n    if(isUseV2Api){\n      authcPrefix = \"/____v2/cluster/security/authentication\";\n      authzPrefix = \"/____v2/cluster/security/authorization\";\n    }\n    String baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n    CloseableHttpClient cl = HttpClientUtil.createClient(null);\n    \n    createCollection(COLLECTION);\n    \n    // Missing token\n    getAndFail(baseUrl + \"/\" + COLLECTION + \"/query?q=*:*\", null);\n    assertAuthMetricsMinimums(2, 1, 0, 0, 1, 0);\n    executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: false}}\", jws);\n    verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/blockUnknown\", \"false\", 20, jws);\n    // Pass through\n    verifySecurityStatus(cl, baseUrl + \"/admin/info/key\", \"key\", NOT_NULL_PREDICATE, 20);\n    // Now succeeds since blockUnknown=false \n    get(baseUrl + \"/\" + COLLECTION + \"/query?q=*:*\", null);\n    executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: true}}\", null);\n    verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/blockUnknown\", \"true\", 20, jws);\n\n    assertAuthMetricsMinimums(9, 4, 4, 0, 1, 0);\n    \n    // Wrong Credentials\n    getAndFail(baseUrl + \"/\" + COLLECTION + \"/query?q=*:*\", jwtTokenWrongSignature);\n    assertAuthMetricsMinimums(10, 4, 4, 1, 1, 0);\n\n    // JWT parse error\n    getAndFail(baseUrl + \"/\" + COLLECTION + \"/query?q=*:*\", \"foozzz\");\n    assertAuthMetricsMinimums(11, 4, 4, 1, 1, 1);\n    \n    HttpClientUtil.close(cl);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2682a1cd25864ccdc1b44bf047bd08700f28ba06","date":1548321910,"type":0,"author":"Tommaso Teofili","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/security/JWTAuthPluginIntegrationTest#testMetrics().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testMetrics() throws Exception {\n    boolean isUseV2Api = random().nextBoolean();\n    String authcPrefix = \"/admin/authentication\";\n    String authzPrefix = \"/admin/authorization\";\n    if(isUseV2Api){\n      authcPrefix = \"/____v2/cluster/security/authentication\";\n      authzPrefix = \"/____v2/cluster/security/authorization\";\n    }\n    String baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n    CloseableHttpClient cl = HttpClientUtil.createClient(null);\n    \n    createCollection(COLLECTION);\n    \n    // Missing token\n    getAndFail(baseUrl + \"/\" + COLLECTION + \"/query?q=*:*\", null);\n    assertAuthMetricsMinimums(2, 1, 0, 0, 1, 0);\n    executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: false}}\", jws);\n    verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/blockUnknown\", \"false\", 20, jws);\n    // Pass through\n    verifySecurityStatus(cl, baseUrl + \"/admin/info/key\", \"key\", NOT_NULL_PREDICATE, 20);\n    // Now succeeds since blockUnknown=false \n    get(baseUrl + \"/\" + COLLECTION + \"/query?q=*:*\", null);\n    executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: true}}\", null);\n    verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/blockUnknown\", \"true\", 20, jws);\n\n    assertAuthMetricsMinimums(9, 4, 4, 0, 1, 0);\n    \n    // Wrong Credentials\n    getAndFail(baseUrl + \"/\" + COLLECTION + \"/query?q=*:*\", jwtTokenWrongSignature);\n    assertAuthMetricsMinimums(10, 4, 4, 1, 1, 0);\n\n    // JWT parse error\n    getAndFail(baseUrl + \"/\" + COLLECTION + \"/query?q=*:*\", \"foozzz\");\n    assertAuthMetricsMinimums(11, 4, 4, 1, 1, 1);\n    \n    HttpClientUtil.close(cl);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85091c28b30918e3b853626fb144d3de27b1cda8","date":1548330207,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/JWTAuthPluginIntegrationTest#testMetrics().mjava","pathOld":"solr/core/src/test/org/apache/solr/security/JWTAuthPluginIntegrationTest#testMetrics().mjava","sourceNew":"  @Test\n  public void testMetrics() throws Exception {\n    boolean isUseV2Api = random().nextBoolean();\n    String authcPrefix = \"/admin/authentication\";\n    if(isUseV2Api){\n      authcPrefix = \"/____v2/cluster/security/authentication\";\n    }\n    String baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n    CloseableHttpClient cl = HttpClientUtil.createClient(null);\n    \n    createCollection(COLLECTION);\n    \n    // Missing token\n    getAndFail(baseUrl + \"/\" + COLLECTION + \"/query?q=*:*\", null);\n    assertAuthMetricsMinimums(2, 1, 0, 0, 1, 0);\n    executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: false}}\", jws);\n    verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/blockUnknown\", \"false\", 20, jws);\n    // Pass through\n    verifySecurityStatus(cl, baseUrl + \"/admin/info/key\", \"key\", NOT_NULL_PREDICATE, 20);\n    // Now succeeds since blockUnknown=false \n    get(baseUrl + \"/\" + COLLECTION + \"/query?q=*:*\", null);\n    executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: true}}\", null);\n    verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/blockUnknown\", \"true\", 20, jws);\n\n    assertAuthMetricsMinimums(9, 4, 4, 0, 1, 0);\n    \n    // Wrong Credentials\n    getAndFail(baseUrl + \"/\" + COLLECTION + \"/query?q=*:*\", jwtTokenWrongSignature);\n    assertAuthMetricsMinimums(10, 4, 4, 1, 1, 0);\n\n    // JWT parse error\n    getAndFail(baseUrl + \"/\" + COLLECTION + \"/query?q=*:*\", \"foozzz\");\n    assertAuthMetricsMinimums(11, 4, 4, 1, 1, 1);\n    \n    HttpClientUtil.close(cl);\n  }\n\n","sourceOld":"  @Test\n  public void testMetrics() throws Exception {\n    boolean isUseV2Api = random().nextBoolean();\n    String authcPrefix = \"/admin/authentication\";\n    String authzPrefix = \"/admin/authorization\";\n    if(isUseV2Api){\n      authcPrefix = \"/____v2/cluster/security/authentication\";\n      authzPrefix = \"/____v2/cluster/security/authorization\";\n    }\n    String baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n    CloseableHttpClient cl = HttpClientUtil.createClient(null);\n    \n    createCollection(COLLECTION);\n    \n    // Missing token\n    getAndFail(baseUrl + \"/\" + COLLECTION + \"/query?q=*:*\", null);\n    assertAuthMetricsMinimums(2, 1, 0, 0, 1, 0);\n    executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: false}}\", jws);\n    verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/blockUnknown\", \"false\", 20, jws);\n    // Pass through\n    verifySecurityStatus(cl, baseUrl + \"/admin/info/key\", \"key\", NOT_NULL_PREDICATE, 20);\n    // Now succeeds since blockUnknown=false \n    get(baseUrl + \"/\" + COLLECTION + \"/query?q=*:*\", null);\n    executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: true}}\", null);\n    verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/blockUnknown\", \"true\", 20, jws);\n\n    assertAuthMetricsMinimums(9, 4, 4, 0, 1, 0);\n    \n    // Wrong Credentials\n    getAndFail(baseUrl + \"/\" + COLLECTION + \"/query?q=*:*\", jwtTokenWrongSignature);\n    assertAuthMetricsMinimums(10, 4, 4, 1, 1, 0);\n\n    // JWT parse error\n    getAndFail(baseUrl + \"/\" + COLLECTION + \"/query?q=*:*\", \"foozzz\");\n    assertAuthMetricsMinimums(11, 4, 4, 1, 1, 1);\n    \n    HttpClientUtil.close(cl);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"85091c28b30918e3b853626fb144d3de27b1cda8":["bb3e075eaa5788b2762ec235bf72b069cefe3f50"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["85091c28b30918e3b853626fb144d3de27b1cda8"],"bb3e075eaa5788b2762ec235bf72b069cefe3f50":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2682a1cd25864ccdc1b44bf047bd08700f28ba06":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","bb3e075eaa5788b2762ec235bf72b069cefe3f50"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bb3e075eaa5788b2762ec235bf72b069cefe3f50","2682a1cd25864ccdc1b44bf047bd08700f28ba06"],"85091c28b30918e3b853626fb144d3de27b1cda8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bb3e075eaa5788b2762ec235bf72b069cefe3f50":["85091c28b30918e3b853626fb144d3de27b1cda8","2682a1cd25864ccdc1b44bf047bd08700f28ba06"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2682a1cd25864ccdc1b44bf047bd08700f28ba06":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","2682a1cd25864ccdc1b44bf047bd08700f28ba06"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}