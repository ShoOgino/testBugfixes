{"path":"lucene/src/java/org/apache/lucene/index/IndexWriter#updatePendingMerges(int,boolean).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#updatePendingMerges(int,boolean).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#updatePendingMerges(int,boolean).mjava","sourceNew":"  private synchronized void updatePendingMerges(int maxNumSegmentsOptimize, boolean optimize)\n    throws CorruptIndexException, IOException {\n    assert !optimize || maxNumSegmentsOptimize > 0;\n\n    if (stopMerges)\n      return;\n\n    // Do not start new merges if we've hit OOME\n    if (hitOOM) {\n      return;\n    }\n\n    final MergePolicy.MergeSpecification spec;\n    if (optimize) {\n      spec = mergePolicy.findMergesForOptimize(segmentInfos, maxNumSegmentsOptimize, segmentsToOptimize);\n\n      if (spec != null) {\n        final int numMerges = spec.merges.size();\n        for(int i=0;i<numMerges;i++) {\n          final MergePolicy.OneMerge merge = ( spec.merges.get(i));\n          merge.optimize = true;\n          merge.maxNumSegmentsOptimize = maxNumSegmentsOptimize;\n        }\n      }\n\n    } else\n      spec = mergePolicy.findMerges(segmentInfos);\n\n    if (spec != null) {\n      final int numMerges = spec.merges.size();\n      for(int i=0;i<numMerges;i++)\n        registerMerge(spec.merges.get(i));\n    }\n  }\n\n","sourceOld":"  private synchronized void updatePendingMerges(int maxNumSegmentsOptimize, boolean optimize)\n    throws CorruptIndexException, IOException {\n    assert !optimize || maxNumSegmentsOptimize > 0;\n\n    if (stopMerges)\n      return;\n\n    // Do not start new merges if we've hit OOME\n    if (hitOOM) {\n      return;\n    }\n\n    final MergePolicy.MergeSpecification spec;\n    if (optimize) {\n      spec = mergePolicy.findMergesForOptimize(segmentInfos, maxNumSegmentsOptimize, segmentsToOptimize);\n\n      if (spec != null) {\n        final int numMerges = spec.merges.size();\n        for(int i=0;i<numMerges;i++) {\n          final MergePolicy.OneMerge merge = ( spec.merges.get(i));\n          merge.optimize = true;\n          merge.maxNumSegmentsOptimize = maxNumSegmentsOptimize;\n        }\n      }\n\n    } else\n      spec = mergePolicy.findMerges(segmentInfos);\n\n    if (spec != null) {\n      final int numMerges = spec.merges.size();\n      for(int i=0;i<numMerges;i++)\n        registerMerge(spec.merges.get(i));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"53a31399f2471493d67b19a95c028a74e0113b6a","date":1289817072,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#updatePendingMerges(int,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#updatePendingMerges(int,boolean).mjava","sourceNew":"  private synchronized void updatePendingMerges(int maxNumSegmentsOptimize, boolean optimize)\n    throws CorruptIndexException, IOException {\n    assert !optimize || maxNumSegmentsOptimize > 0;\n\n    if (stopMerges) {\n      return;\n    }\n\n    // Do not start new merges if we've hit OOME\n    if (hitOOM) {\n      return;\n    }\n\n    final MergePolicy.MergeSpecification spec;\n    if (optimize) {\n      spec = mergePolicy.findMergesForOptimize(segmentInfos, maxNumSegmentsOptimize, segmentsToOptimize);\n\n      if (spec != null) {\n        final int numMerges = spec.merges.size();\n        for(int i=0;i<numMerges;i++) {\n          final MergePolicy.OneMerge merge = spec.merges.get(i);\n          merge.optimize = true;\n          merge.maxNumSegmentsOptimize = maxNumSegmentsOptimize;\n        }\n      }\n\n    } else {\n      spec = mergePolicy.findMerges(segmentInfos);\n    }\n\n    if (spec != null) {\n      final int numMerges = spec.merges.size();\n      for(int i=0;i<numMerges;i++) {\n        registerMerge(spec.merges.get(i));\n      }\n    }\n  }\n\n","sourceOld":"  private synchronized void updatePendingMerges(int maxNumSegmentsOptimize, boolean optimize)\n    throws CorruptIndexException, IOException {\n    assert !optimize || maxNumSegmentsOptimize > 0;\n\n    if (stopMerges)\n      return;\n\n    // Do not start new merges if we've hit OOME\n    if (hitOOM) {\n      return;\n    }\n\n    final MergePolicy.MergeSpecification spec;\n    if (optimize) {\n      spec = mergePolicy.findMergesForOptimize(segmentInfos, maxNumSegmentsOptimize, segmentsToOptimize);\n\n      if (spec != null) {\n        final int numMerges = spec.merges.size();\n        for(int i=0;i<numMerges;i++) {\n          final MergePolicy.OneMerge merge = ( spec.merges.get(i));\n          merge.optimize = true;\n          merge.maxNumSegmentsOptimize = maxNumSegmentsOptimize;\n        }\n      }\n\n    } else\n      spec = mergePolicy.findMerges(segmentInfos);\n\n    if (spec != null) {\n      final int numMerges = spec.merges.size();\n      for(int i=0;i<numMerges;i++)\n        registerMerge(spec.merges.get(i));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9ab1f5591dc05f1f2b5407d809c9699f75554a32","date":1290008586,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#updatePendingMerges(int,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#updatePendingMerges(int,boolean).mjava","sourceNew":"  private synchronized void updatePendingMerges(int maxNumSegmentsOptimize, boolean optimize)\n    throws CorruptIndexException, IOException {\n    assert !optimize || maxNumSegmentsOptimize > 0;\n\n    if (stopMerges) {\n      return;\n    }\n\n    // Do not start new merges if we've hit OOME\n    if (hitOOM) {\n      return;\n    }\n\n    final MergePolicy.MergeSpecification spec;\n    if (optimize) {\n      spec = mergePolicy.findMergesForOptimize(segmentInfos, maxNumSegmentsOptimize, segmentsToOptimize);\n\n      if (spec != null) {\n        final int numMerges = spec.merges.size();\n        for(int i=0;i<numMerges;i++) {\n          final MergePolicy.OneMerge merge = spec.merges.get(i);\n          merge.optimize = true;\n          merge.maxNumSegmentsOptimize = maxNumSegmentsOptimize;\n        }\n      }\n\n    } else {\n      spec = mergePolicy.findMerges(segmentInfos);\n    }\n\n    if (spec != null) {\n      final int numMerges = spec.merges.size();\n      for(int i=0;i<numMerges;i++) {\n        registerMerge(spec.merges.get(i));\n      }\n    }\n  }\n\n","sourceOld":"  private synchronized void updatePendingMerges(int maxNumSegmentsOptimize, boolean optimize)\n    throws CorruptIndexException, IOException {\n    assert !optimize || maxNumSegmentsOptimize > 0;\n\n    if (stopMerges)\n      return;\n\n    // Do not start new merges if we've hit OOME\n    if (hitOOM) {\n      return;\n    }\n\n    final MergePolicy.MergeSpecification spec;\n    if (optimize) {\n      spec = mergePolicy.findMergesForOptimize(segmentInfos, maxNumSegmentsOptimize, segmentsToOptimize);\n\n      if (spec != null) {\n        final int numMerges = spec.merges.size();\n        for(int i=0;i<numMerges;i++) {\n          final MergePolicy.OneMerge merge = ( spec.merges.get(i));\n          merge.optimize = true;\n          merge.maxNumSegmentsOptimize = maxNumSegmentsOptimize;\n        }\n      }\n\n    } else\n      spec = mergePolicy.findMerges(segmentInfos);\n\n    if (spec != null) {\n      final int numMerges = spec.merges.size();\n      for(int i=0;i<numMerges;i++)\n        registerMerge(spec.merges.get(i));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#updatePendingMerges(int,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#updatePendingMerges(int,boolean).mjava","sourceNew":"  private synchronized void updatePendingMerges(int maxNumSegmentsOptimize, boolean optimize)\n    throws CorruptIndexException, IOException {\n    assert !optimize || maxNumSegmentsOptimize > 0;\n\n    if (stopMerges) {\n      return;\n    }\n\n    // Do not start new merges if we've hit OOME\n    if (hitOOM) {\n      return;\n    }\n\n    final MergePolicy.MergeSpecification spec;\n    if (optimize) {\n      spec = mergePolicy.findMergesForOptimize(segmentInfos, maxNumSegmentsOptimize, segmentsToOptimize);\n\n      if (spec != null) {\n        final int numMerges = spec.merges.size();\n        for(int i=0;i<numMerges;i++) {\n          final MergePolicy.OneMerge merge = spec.merges.get(i);\n          merge.optimize = true;\n          merge.maxNumSegmentsOptimize = maxNumSegmentsOptimize;\n        }\n      }\n\n    } else {\n      spec = mergePolicy.findMerges(segmentInfos);\n    }\n\n    if (spec != null) {\n      final int numMerges = spec.merges.size();\n      for(int i=0;i<numMerges;i++) {\n        registerMerge(spec.merges.get(i));\n      }\n    }\n  }\n\n","sourceOld":"  private synchronized void updatePendingMerges(int maxNumSegmentsOptimize, boolean optimize)\n    throws CorruptIndexException, IOException {\n    assert !optimize || maxNumSegmentsOptimize > 0;\n\n    if (stopMerges)\n      return;\n\n    // Do not start new merges if we've hit OOME\n    if (hitOOM) {\n      return;\n    }\n\n    final MergePolicy.MergeSpecification spec;\n    if (optimize) {\n      spec = mergePolicy.findMergesForOptimize(segmentInfos, maxNumSegmentsOptimize, segmentsToOptimize);\n\n      if (spec != null) {\n        final int numMerges = spec.merges.size();\n        for(int i=0;i<numMerges;i++) {\n          final MergePolicy.OneMerge merge = ( spec.merges.get(i));\n          merge.optimize = true;\n          merge.maxNumSegmentsOptimize = maxNumSegmentsOptimize;\n        }\n      }\n\n    } else\n      spec = mergePolicy.findMerges(segmentInfos);\n\n    if (spec != null) {\n      final int numMerges = spec.merges.size();\n      for(int i=0;i<numMerges;i++)\n        registerMerge(spec.merges.get(i));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"786a4d25ca958a1f315a9d6a74f0441fdafcd522","date":1305734256,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#updatePendingMerges(int,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#updatePendingMerges(int,boolean).mjava","sourceNew":"  private synchronized void updatePendingMerges(int maxNumSegmentsOptimize, boolean optimize)\n    throws CorruptIndexException, IOException {\n    assert !optimize || maxNumSegmentsOptimize > 0;\n\n    if (stopMerges) {\n      return;\n    }\n\n    // Do not start new merges if we've hit OOME\n    if (hitOOM) {\n      return;\n    }\n\n    final MergePolicy.MergeSpecification spec;\n    if (optimize) {\n      spec = mergePolicy.findMergesForOptimize(segmentInfos, maxNumSegmentsOptimize, Collections.unmodifiableSet(segmentsToOptimize));\n\n      if (spec != null) {\n        final int numMerges = spec.merges.size();\n        for(int i=0;i<numMerges;i++) {\n          final MergePolicy.OneMerge merge = spec.merges.get(i);\n          merge.optimize = true;\n          merge.maxNumSegmentsOptimize = maxNumSegmentsOptimize;\n        }\n      }\n\n    } else {\n      spec = mergePolicy.findMerges(segmentInfos);\n    }\n\n    if (spec != null) {\n      final int numMerges = spec.merges.size();\n      for(int i=0;i<numMerges;i++) {\n        registerMerge(spec.merges.get(i));\n      }\n    }\n  }\n\n","sourceOld":"  private synchronized void updatePendingMerges(int maxNumSegmentsOptimize, boolean optimize)\n    throws CorruptIndexException, IOException {\n    assert !optimize || maxNumSegmentsOptimize > 0;\n\n    if (stopMerges) {\n      return;\n    }\n\n    // Do not start new merges if we've hit OOME\n    if (hitOOM) {\n      return;\n    }\n\n    final MergePolicy.MergeSpecification spec;\n    if (optimize) {\n      spec = mergePolicy.findMergesForOptimize(segmentInfos, maxNumSegmentsOptimize, segmentsToOptimize);\n\n      if (spec != null) {\n        final int numMerges = spec.merges.size();\n        for(int i=0;i<numMerges;i++) {\n          final MergePolicy.OneMerge merge = spec.merges.get(i);\n          merge.optimize = true;\n          merge.maxNumSegmentsOptimize = maxNumSegmentsOptimize;\n        }\n      }\n\n    } else {\n      spec = mergePolicy.findMerges(segmentInfos);\n    }\n\n    if (spec != null) {\n      final int numMerges = spec.merges.size();\n      for(int i=0;i<numMerges;i++) {\n        registerMerge(spec.merges.get(i));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c3a8a449466c1ff7ce2274fe73dab487256964b4","date":1305735867,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#updatePendingMerges(int,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#updatePendingMerges(int,boolean).mjava","sourceNew":"  private synchronized void updatePendingMerges(int maxNumSegmentsOptimize, boolean optimize)\n    throws CorruptIndexException, IOException {\n    assert !optimize || maxNumSegmentsOptimize > 0;\n\n    if (stopMerges) {\n      return;\n    }\n\n    // Do not start new merges if we've hit OOME\n    if (hitOOM) {\n      return;\n    }\n\n    final MergePolicy.MergeSpecification spec;\n    if (optimize) {\n      spec = mergePolicy.findMergesForOptimize(segmentInfos, maxNumSegmentsOptimize, Collections.unmodifiableSet(segmentsToOptimize));\n\n      if (spec != null) {\n        final int numMerges = spec.merges.size();\n        for(int i=0;i<numMerges;i++) {\n          final MergePolicy.OneMerge merge = spec.merges.get(i);\n          merge.optimize = true;\n          merge.maxNumSegmentsOptimize = maxNumSegmentsOptimize;\n        }\n      }\n\n    } else {\n      spec = mergePolicy.findMerges(segmentInfos);\n    }\n\n    if (spec != null) {\n      final int numMerges = spec.merges.size();\n      for(int i=0;i<numMerges;i++) {\n        registerMerge(spec.merges.get(i));\n      }\n    }\n  }\n\n","sourceOld":"  private synchronized void updatePendingMerges(int maxNumSegmentsOptimize, boolean optimize)\n    throws CorruptIndexException, IOException {\n    assert !optimize || maxNumSegmentsOptimize > 0;\n\n    if (stopMerges) {\n      return;\n    }\n\n    // Do not start new merges if we've hit OOME\n    if (hitOOM) {\n      return;\n    }\n\n    final MergePolicy.MergeSpecification spec;\n    if (optimize) {\n      spec = mergePolicy.findMergesForOptimize(segmentInfos, maxNumSegmentsOptimize, segmentsToOptimize);\n\n      if (spec != null) {\n        final int numMerges = spec.merges.size();\n        for(int i=0;i<numMerges;i++) {\n          final MergePolicy.OneMerge merge = spec.merges.get(i);\n          merge.optimize = true;\n          merge.maxNumSegmentsOptimize = maxNumSegmentsOptimize;\n        }\n      }\n\n    } else {\n      spec = mergePolicy.findMerges(segmentInfos);\n    }\n\n    if (spec != null) {\n      final int numMerges = spec.merges.size();\n      for(int i=0;i<numMerges;i++) {\n        registerMerge(spec.merges.get(i));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#updatePendingMerges(int,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#updatePendingMerges(int,boolean).mjava","sourceNew":"  private synchronized void updatePendingMerges(int maxNumSegmentsOptimize, boolean optimize)\n    throws CorruptIndexException, IOException {\n    assert !optimize || maxNumSegmentsOptimize > 0;\n\n    if (stopMerges) {\n      return;\n    }\n\n    // Do not start new merges if we've hit OOME\n    if (hitOOM) {\n      return;\n    }\n\n    final MergePolicy.MergeSpecification spec;\n    if (optimize) {\n      spec = mergePolicy.findMergesForOptimize(segmentInfos, maxNumSegmentsOptimize, Collections.unmodifiableSet(segmentsToOptimize));\n\n      if (spec != null) {\n        final int numMerges = spec.merges.size();\n        for(int i=0;i<numMerges;i++) {\n          final MergePolicy.OneMerge merge = spec.merges.get(i);\n          merge.optimize = true;\n          merge.maxNumSegmentsOptimize = maxNumSegmentsOptimize;\n        }\n      }\n\n    } else {\n      spec = mergePolicy.findMerges(segmentInfos);\n    }\n\n    if (spec != null) {\n      final int numMerges = spec.merges.size();\n      for(int i=0;i<numMerges;i++) {\n        registerMerge(spec.merges.get(i));\n      }\n    }\n  }\n\n","sourceOld":"  private synchronized void updatePendingMerges(int maxNumSegmentsOptimize, boolean optimize)\n    throws CorruptIndexException, IOException {\n    assert !optimize || maxNumSegmentsOptimize > 0;\n\n    if (stopMerges) {\n      return;\n    }\n\n    // Do not start new merges if we've hit OOME\n    if (hitOOM) {\n      return;\n    }\n\n    final MergePolicy.MergeSpecification spec;\n    if (optimize) {\n      spec = mergePolicy.findMergesForOptimize(segmentInfos, maxNumSegmentsOptimize, segmentsToOptimize);\n\n      if (spec != null) {\n        final int numMerges = spec.merges.size();\n        for(int i=0;i<numMerges;i++) {\n          final MergePolicy.OneMerge merge = spec.merges.get(i);\n          merge.optimize = true;\n          merge.maxNumSegmentsOptimize = maxNumSegmentsOptimize;\n        }\n      }\n\n    } else {\n      spec = mergePolicy.findMerges(segmentInfos);\n    }\n\n    if (spec != null) {\n      final int numMerges = spec.merges.size();\n      for(int i=0;i<numMerges;i++) {\n        registerMerge(spec.merges.get(i));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09b6beb7329eb1b75a38c94b1c5ab4e840743c59","date":1308413204,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#updatePendingMerges(int,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#updatePendingMerges(int,boolean).mjava","sourceNew":"  private synchronized void updatePendingMerges(int maxNumSegmentsOptimize, boolean optimize)\n    throws CorruptIndexException, IOException {\n    assert !optimize || maxNumSegmentsOptimize > 0;\n\n    if (stopMerges) {\n      return;\n    }\n\n    // Do not start new merges if we've hit OOME\n    if (hitOOM) {\n      return;\n    }\n\n    final MergePolicy.MergeSpecification spec;\n    if (optimize) {\n      spec = mergePolicy.findMergesForOptimize(segmentInfos, maxNumSegmentsOptimize, Collections.unmodifiableMap(segmentsToOptimize));\n\n      if (spec != null) {\n        final int numMerges = spec.merges.size();\n        for(int i=0;i<numMerges;i++) {\n          final MergePolicy.OneMerge merge = spec.merges.get(i);\n          merge.optimize = true;\n          merge.maxNumSegmentsOptimize = maxNumSegmentsOptimize;\n        }\n      }\n\n    } else {\n      spec = mergePolicy.findMerges(segmentInfos);\n    }\n\n    if (spec != null) {\n      final int numMerges = spec.merges.size();\n      for(int i=0;i<numMerges;i++) {\n        registerMerge(spec.merges.get(i));\n      }\n    }\n  }\n\n","sourceOld":"  private synchronized void updatePendingMerges(int maxNumSegmentsOptimize, boolean optimize)\n    throws CorruptIndexException, IOException {\n    assert !optimize || maxNumSegmentsOptimize > 0;\n\n    if (stopMerges) {\n      return;\n    }\n\n    // Do not start new merges if we've hit OOME\n    if (hitOOM) {\n      return;\n    }\n\n    final MergePolicy.MergeSpecification spec;\n    if (optimize) {\n      spec = mergePolicy.findMergesForOptimize(segmentInfos, maxNumSegmentsOptimize, Collections.unmodifiableSet(segmentsToOptimize));\n\n      if (spec != null) {\n        final int numMerges = spec.merges.size();\n        for(int i=0;i<numMerges;i++) {\n          final MergePolicy.OneMerge merge = spec.merges.get(i);\n          merge.optimize = true;\n          merge.maxNumSegmentsOptimize = maxNumSegmentsOptimize;\n        }\n      }\n\n    } else {\n      spec = mergePolicy.findMerges(segmentInfos);\n    }\n\n    if (spec != null) {\n      final int numMerges = spec.merges.size();\n      for(int i=0;i<numMerges;i++) {\n        registerMerge(spec.merges.get(i));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d1ded5d4f5b5e3e5f32bff69cd6fe5e64322a886","date":1308439813,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#updatePendingMerges(int,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#updatePendingMerges(int,boolean).mjava","sourceNew":"  private synchronized void updatePendingMerges(int maxNumSegmentsOptimize, boolean optimize)\n    throws CorruptIndexException, IOException {\n    assert !optimize || maxNumSegmentsOptimize > 0;\n\n    if (stopMerges) {\n      return;\n    }\n\n    // Do not start new merges if we've hit OOME\n    if (hitOOM) {\n      return;\n    }\n\n    final MergePolicy.MergeSpecification spec;\n    if (optimize) {\n      spec = mergePolicy.findMergesForOptimize(segmentInfos, maxNumSegmentsOptimize, Collections.unmodifiableMap(segmentsToOptimize));\n\n      if (spec != null) {\n        final int numMerges = spec.merges.size();\n        for(int i=0;i<numMerges;i++) {\n          final MergePolicy.OneMerge merge = spec.merges.get(i);\n          merge.optimize = true;\n          merge.maxNumSegmentsOptimize = maxNumSegmentsOptimize;\n        }\n      }\n\n    } else {\n      spec = mergePolicy.findMerges(segmentInfos);\n    }\n\n    if (spec != null) {\n      final int numMerges = spec.merges.size();\n      for(int i=0;i<numMerges;i++) {\n        registerMerge(spec.merges.get(i));\n      }\n    }\n  }\n\n","sourceOld":"  private synchronized void updatePendingMerges(int maxNumSegmentsOptimize, boolean optimize)\n    throws CorruptIndexException, IOException {\n    assert !optimize || maxNumSegmentsOptimize > 0;\n\n    if (stopMerges) {\n      return;\n    }\n\n    // Do not start new merges if we've hit OOME\n    if (hitOOM) {\n      return;\n    }\n\n    final MergePolicy.MergeSpecification spec;\n    if (optimize) {\n      spec = mergePolicy.findMergesForOptimize(segmentInfos, maxNumSegmentsOptimize, Collections.unmodifiableSet(segmentsToOptimize));\n\n      if (spec != null) {\n        final int numMerges = spec.merges.size();\n        for(int i=0;i<numMerges;i++) {\n          final MergePolicy.OneMerge merge = spec.merges.get(i);\n          merge.optimize = true;\n          merge.maxNumSegmentsOptimize = maxNumSegmentsOptimize;\n        }\n      }\n\n    } else {\n      spec = mergePolicy.findMerges(segmentInfos);\n    }\n\n    if (spec != null) {\n      final int numMerges = spec.merges.size();\n      for(int i=0;i<numMerges;i++) {\n        registerMerge(spec.merges.get(i));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9f8b6801dbaf49c247119734f6e4516cce94e49a","date":1308478532,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#updatePendingMerges(int,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#updatePendingMerges(int,boolean).mjava","sourceNew":"  private synchronized void updatePendingMerges(int maxNumSegmentsOptimize, boolean optimize)\n    throws CorruptIndexException, IOException {\n    assert !optimize || maxNumSegmentsOptimize > 0;\n\n    if (stopMerges) {\n      return;\n    }\n\n    // Do not start new merges if we've hit OOME\n    if (hitOOM) {\n      return;\n    }\n\n    final MergePolicy.MergeSpecification spec;\n    if (optimize) {\n      spec = mergePolicy.findMergesForOptimize(segmentInfos, maxNumSegmentsOptimize, Collections.unmodifiableMap(segmentsToOptimize));\n      if (spec != null) {\n        final int numMerges = spec.merges.size();\n        for(int i=0;i<numMerges;i++) {\n          final MergePolicy.OneMerge merge = spec.merges.get(i);\n          merge.optimize = true;\n          merge.maxNumSegmentsOptimize = maxNumSegmentsOptimize;\n        }\n      }\n\n    } else {\n      spec = mergePolicy.findMerges(segmentInfos);\n    }\n\n    if (spec != null) {\n      final int numMerges = spec.merges.size();\n      for(int i=0;i<numMerges;i++) {\n        registerMerge(spec.merges.get(i));\n      }\n    }\n  }\n\n","sourceOld":"  private synchronized void updatePendingMerges(int maxNumSegmentsOptimize, boolean optimize)\n    throws CorruptIndexException, IOException {\n    assert !optimize || maxNumSegmentsOptimize > 0;\n\n    if (stopMerges) {\n      return;\n    }\n\n    // Do not start new merges if we've hit OOME\n    if (hitOOM) {\n      return;\n    }\n\n    final MergePolicy.MergeSpecification spec;\n    if (optimize) {\n      spec = mergePolicy.findMergesForOptimize(segmentInfos, maxNumSegmentsOptimize, Collections.unmodifiableMap(segmentsToOptimize));\n\n      if (spec != null) {\n        final int numMerges = spec.merges.size();\n        for(int i=0;i<numMerges;i++) {\n          final MergePolicy.OneMerge merge = spec.merges.get(i);\n          merge.optimize = true;\n          merge.maxNumSegmentsOptimize = maxNumSegmentsOptimize;\n        }\n      }\n\n    } else {\n      spec = mergePolicy.findMerges(segmentInfos);\n    }\n\n    if (spec != null) {\n      final int numMerges = spec.merges.size();\n      for(int i=0;i<numMerges;i++) {\n        registerMerge(spec.merges.get(i));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f902dca0fec763317e17fa91ff6543fc8120c609","date":1308553979,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#updatePendingMerges(int,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#updatePendingMerges(int,boolean).mjava","sourceNew":"  private synchronized void updatePendingMerges(int maxNumSegmentsOptimize, boolean optimize)\n    throws CorruptIndexException, IOException {\n    assert !optimize || maxNumSegmentsOptimize > 0;\n\n    if (stopMerges) {\n      return;\n    }\n\n    // Do not start new merges if we've hit OOME\n    if (hitOOM) {\n      return;\n    }\n\n    final MergePolicy.MergeSpecification spec;\n    if (optimize) {\n      spec = mergePolicy.findMergesForOptimize(segmentInfos, maxNumSegmentsOptimize, Collections.unmodifiableMap(segmentsToOptimize));\n      if (spec != null) {\n        final int numMerges = spec.merges.size();\n        for(int i=0;i<numMerges;i++) {\n          final MergePolicy.OneMerge merge = spec.merges.get(i);\n          merge.optimize = true;\n          merge.maxNumSegmentsOptimize = maxNumSegmentsOptimize;\n        }\n      }\n\n    } else {\n      spec = mergePolicy.findMerges(segmentInfos);\n    }\n\n    if (spec != null) {\n      final int numMerges = spec.merges.size();\n      for(int i=0;i<numMerges;i++) {\n        registerMerge(spec.merges.get(i));\n      }\n    }\n  }\n\n","sourceOld":"  private synchronized void updatePendingMerges(int maxNumSegmentsOptimize, boolean optimize)\n    throws CorruptIndexException, IOException {\n    assert !optimize || maxNumSegmentsOptimize > 0;\n\n    if (stopMerges) {\n      return;\n    }\n\n    // Do not start new merges if we've hit OOME\n    if (hitOOM) {\n      return;\n    }\n\n    final MergePolicy.MergeSpecification spec;\n    if (optimize) {\n      spec = mergePolicy.findMergesForOptimize(segmentInfos, maxNumSegmentsOptimize, Collections.unmodifiableMap(segmentsToOptimize));\n\n      if (spec != null) {\n        final int numMerges = spec.merges.size();\n        for(int i=0;i<numMerges;i++) {\n          final MergePolicy.OneMerge merge = spec.merges.get(i);\n          merge.optimize = true;\n          merge.maxNumSegmentsOptimize = maxNumSegmentsOptimize;\n        }\n      }\n\n    } else {\n      spec = mergePolicy.findMerges(segmentInfos);\n    }\n\n    if (spec != null) {\n      final int numMerges = spec.merges.size();\n      for(int i=0;i<numMerges;i++) {\n        registerMerge(spec.merges.get(i));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d14e8d18c0e3970c20354dbeeb49da11bd587fbd","date":1321041051,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#updatePendingMerges(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#updatePendingMerges(int,boolean).mjava","sourceNew":"  private synchronized void updatePendingMerges(int maxNumSegments)\n    throws CorruptIndexException, IOException {\n    assert maxNumSegments == -1 || maxNumSegments > 0;\n\n    if (stopMerges) {\n      return;\n    }\n\n    // Do not start new merges if we've hit OOME\n    if (hitOOM) {\n      return;\n    }\n\n    final MergePolicy.MergeSpecification spec;\n    if (maxNumSegments != -1) {\n      spec = mergePolicy.findForcedMerges(segmentInfos, maxNumSegments, Collections.unmodifiableMap(segmentsToMerge));\n      if (spec != null) {\n        final int numMerges = spec.merges.size();\n        for(int i=0;i<numMerges;i++) {\n          final MergePolicy.OneMerge merge = spec.merges.get(i);\n          merge.maxNumSegments = maxNumSegments;\n        }\n      }\n\n    } else {\n      spec = mergePolicy.findMerges(segmentInfos);\n    }\n\n    if (spec != null) {\n      final int numMerges = spec.merges.size();\n      for(int i=0;i<numMerges;i++) {\n        registerMerge(spec.merges.get(i));\n      }\n    }\n  }\n\n","sourceOld":"  private synchronized void updatePendingMerges(int maxNumSegmentsOptimize, boolean optimize)\n    throws CorruptIndexException, IOException {\n    assert !optimize || maxNumSegmentsOptimize > 0;\n\n    if (stopMerges) {\n      return;\n    }\n\n    // Do not start new merges if we've hit OOME\n    if (hitOOM) {\n      return;\n    }\n\n    final MergePolicy.MergeSpecification spec;\n    if (optimize) {\n      spec = mergePolicy.findMergesForOptimize(segmentInfos, maxNumSegmentsOptimize, Collections.unmodifiableMap(segmentsToOptimize));\n      if (spec != null) {\n        final int numMerges = spec.merges.size();\n        for(int i=0;i<numMerges;i++) {\n          final MergePolicy.OneMerge merge = spec.merges.get(i);\n          merge.optimize = true;\n          merge.maxNumSegmentsOptimize = maxNumSegmentsOptimize;\n        }\n      }\n\n    } else {\n      spec = mergePolicy.findMerges(segmentInfos);\n    }\n\n    if (spec != null) {\n      final int numMerges = spec.merges.size();\n      for(int i=0;i<numMerges;i++) {\n        registerMerge(spec.merges.get(i));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"9ab1f5591dc05f1f2b5407d809c9699f75554a32":["9454a6510e2db155fb01faa5c049b06ece95fab9","53a31399f2471493d67b19a95c028a74e0113b6a"],"f902dca0fec763317e17fa91ff6543fc8120c609":["d1ded5d4f5b5e3e5f32bff69cd6fe5e64322a886","9f8b6801dbaf49c247119734f6e4516cce94e49a"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["9f8b6801dbaf49c247119734f6e4516cce94e49a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["9454a6510e2db155fb01faa5c049b06ece95fab9","53a31399f2471493d67b19a95c028a74e0113b6a"],"9f8b6801dbaf49c247119734f6e4516cce94e49a":["09b6beb7329eb1b75a38c94b1c5ab4e840743c59"],"786a4d25ca958a1f315a9d6a74f0441fdafcd522":["53a31399f2471493d67b19a95c028a74e0113b6a"],"d1ded5d4f5b5e3e5f32bff69cd6fe5e64322a886":["a3776dccca01c11e7046323cfad46a3b4a471233","09b6beb7329eb1b75a38c94b1c5ab4e840743c59"],"53a31399f2471493d67b19a95c028a74e0113b6a":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"c3a8a449466c1ff7ce2274fe73dab487256964b4":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","786a4d25ca958a1f315a9d6a74f0441fdafcd522"],"a3776dccca01c11e7046323cfad46a3b4a471233":["53a31399f2471493d67b19a95c028a74e0113b6a","786a4d25ca958a1f315a9d6a74f0441fdafcd522"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"09b6beb7329eb1b75a38c94b1c5ab4e840743c59":["786a4d25ca958a1f315a9d6a74f0441fdafcd522"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"9ab1f5591dc05f1f2b5407d809c9699f75554a32":["c3a8a449466c1ff7ce2274fe73dab487256964b4"],"f902dca0fec763317e17fa91ff6543fc8120c609":[],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"9f8b6801dbaf49c247119734f6e4516cce94e49a":["f902dca0fec763317e17fa91ff6543fc8120c609","d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"d1ded5d4f5b5e3e5f32bff69cd6fe5e64322a886":["f902dca0fec763317e17fa91ff6543fc8120c609"],"786a4d25ca958a1f315a9d6a74f0441fdafcd522":["c3a8a449466c1ff7ce2274fe73dab487256964b4","a3776dccca01c11e7046323cfad46a3b4a471233","09b6beb7329eb1b75a38c94b1c5ab4e840743c59"],"53a31399f2471493d67b19a95c028a74e0113b6a":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","786a4d25ca958a1f315a9d6a74f0441fdafcd522","a3776dccca01c11e7046323cfad46a3b4a471233"],"c3a8a449466c1ff7ce2274fe73dab487256964b4":[],"a3776dccca01c11e7046323cfad46a3b4a471233":["d1ded5d4f5b5e3e5f32bff69cd6fe5e64322a886"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","53a31399f2471493d67b19a95c028a74e0113b6a"],"09b6beb7329eb1b75a38c94b1c5ab4e840743c59":["9f8b6801dbaf49c247119734f6e4516cce94e49a","d1ded5d4f5b5e3e5f32bff69cd6fe5e64322a886"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["f902dca0fec763317e17fa91ff6543fc8120c609","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","c3a8a449466c1ff7ce2274fe73dab487256964b4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}