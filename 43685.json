{"path":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/ContainsPrefixTreeFilter.ContainsVisitor#getDocs(Cell,Bits).mjava","commits":[{"id":"69da1c397a55d488a19e555c8da635417e2dfd47","date":1365020983,"type":0,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/ContainsPrefixTreeFilter.ContainsVisitor#getDocs(Cell,Bits).mjava","pathOld":"/dev/null","sourceNew":"    private SmallDocSet getDocs(Cell cell, Bits acceptContains) throws IOException {\n      assert new BytesRef(cell.getTokenBytes()).equals(termBytes);\n\n      return collectDocs(acceptContains);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4de14be4bd1b857ba37ca138b61c4661c6d1bed3","date":1396628861,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/ContainsPrefixTreeFilter.ContainsVisitor#getDocs(Cell,Bits).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/ContainsPrefixTreeFilter.ContainsVisitor#getDocs(Cell,Bits).mjava","sourceNew":"    private SmallDocSet getDocs(Cell cell, Bits acceptContains) throws IOException {\n      assert cell.getTokenBytesNoLeaf(null).equals(termBytes);\n\n      return collectDocs(acceptContains);\n    }\n\n","sourceOld":"    private SmallDocSet getDocs(Cell cell, Bits acceptContains) throws IOException {\n      assert new BytesRef(cell.getTokenBytes()).equals(termBytes);\n\n      return collectDocs(acceptContains);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15e323346eac5e4685c0a9f2df85eb96b4239bbb","date":1396688577,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/ContainsPrefixTreeFilter.ContainsVisitor#getDocs(Cell,Bits).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/ContainsPrefixTreeFilter.ContainsVisitor#getDocs(Cell,Bits).mjava","sourceNew":"    private SmallDocSet getDocs(Cell cell, Bits acceptContains) throws IOException {\n      assert cell.getTokenBytesNoLeaf(null).equals(termBytes);\n\n      return collectDocs(acceptContains);\n    }\n\n","sourceOld":"    private SmallDocSet getDocs(Cell cell, Bits acceptContains) throws IOException {\n      assert new BytesRef(cell.getTokenBytes()).equals(termBytes);\n\n      return collectDocs(acceptContains);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"11ac40ec1cc2f6d61b8c8f0cd9b306dfcef5aaf0","date":1426015524,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/ContainsPrefixTreeFilter.ContainsVisitor#getDocs(Cell,Bits).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/ContainsPrefixTreeFilter.ContainsVisitor#getDocs(Cell,Bits).mjava","sourceNew":"    /** Get prefix & leaf docs at this cell. */\n    private SmallDocSet getDocs(Cell cell, Bits acceptContains) throws IOException {\n      assert indexedCell.compareToNoLeaf(cell) == 0;\n      //called when we've reached detailLevel.\n      if (indexedCell.isLeaf()) {//only a leaf\n        SmallDocSet result = collectDocs(acceptContains);\n        nextTerm();\n        return result;\n      } else {\n        SmallDocSet docsAtPrefix = collectDocs(acceptContains);\n        if (!nextTerm()) {\n          return docsAtPrefix;\n        }\n        //collect leaf too\n        if (indexedCell.isLeaf() && indexedCell.compareToNoLeaf(cell) == 0) {\n          SmallDocSet docsAtLeaf = collectDocs(acceptContains);\n          nextTerm();\n          return union(docsAtPrefix, docsAtLeaf);\n        } else {\n          return docsAtPrefix;\n        }\n      }\n    }\n\n","sourceOld":"    private SmallDocSet getDocs(Cell cell, Bits acceptContains) throws IOException {\n      assert cell.getTokenBytesNoLeaf(null).equals(termBytes);\n\n      return collectDocs(acceptContains);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/ContainsPrefixTreeFilter.ContainsVisitor#getDocs(Cell,Bits).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/ContainsPrefixTreeFilter.ContainsVisitor#getDocs(Cell,Bits).mjava","sourceNew":"    /** Get prefix & leaf docs at this cell. */\n    private SmallDocSet getDocs(Cell cell, Bits acceptContains) throws IOException {\n      assert indexedCell.compareToNoLeaf(cell) == 0;\n      //called when we've reached detailLevel.\n      if (indexedCell.isLeaf()) {//only a leaf\n        SmallDocSet result = collectDocs(acceptContains);\n        nextTerm();\n        return result;\n      } else {\n        SmallDocSet docsAtPrefix = collectDocs(acceptContains);\n        if (!nextTerm()) {\n          return docsAtPrefix;\n        }\n        //collect leaf too\n        if (indexedCell.isLeaf() && indexedCell.compareToNoLeaf(cell) == 0) {\n          SmallDocSet docsAtLeaf = collectDocs(acceptContains);\n          nextTerm();\n          return union(docsAtPrefix, docsAtLeaf);\n        } else {\n          return docsAtPrefix;\n        }\n      }\n    }\n\n","sourceOld":"    private SmallDocSet getDocs(Cell cell, Bits acceptContains) throws IOException {\n      assert cell.getTokenBytesNoLeaf(null).equals(termBytes);\n\n      return collectDocs(acceptContains);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"672b198fc3dce868916c727917cae58c2906763d","date":1443669960,"type":5,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/ContainsPrefixTreeQuery.ContainsVisitor#getDocs(Cell,Bits).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/ContainsPrefixTreeFilter.ContainsVisitor#getDocs(Cell,Bits).mjava","sourceNew":"    /** Get prefix & leaf docs at this cell. */\n    private SmallDocSet getDocs(Cell cell, Bits acceptContains) throws IOException {\n      assert indexedCell.compareToNoLeaf(cell) == 0;\n      //called when we've reached detailLevel.\n      if (indexedCell.isLeaf()) {//only a leaf\n        SmallDocSet result = collectDocs(acceptContains);\n        nextTerm();\n        return result;\n      } else {\n        SmallDocSet docsAtPrefix = collectDocs(acceptContains);\n        if (!nextTerm()) {\n          return docsAtPrefix;\n        }\n        //collect leaf too\n        if (indexedCell.isLeaf() && indexedCell.compareToNoLeaf(cell) == 0) {\n          SmallDocSet docsAtLeaf = collectDocs(acceptContains);\n          nextTerm();\n          return union(docsAtPrefix, docsAtLeaf);\n        } else {\n          return docsAtPrefix;\n        }\n      }\n    }\n\n","sourceOld":"    /** Get prefix & leaf docs at this cell. */\n    private SmallDocSet getDocs(Cell cell, Bits acceptContains) throws IOException {\n      assert indexedCell.compareToNoLeaf(cell) == 0;\n      //called when we've reached detailLevel.\n      if (indexedCell.isLeaf()) {//only a leaf\n        SmallDocSet result = collectDocs(acceptContains);\n        nextTerm();\n        return result;\n      } else {\n        SmallDocSet docsAtPrefix = collectDocs(acceptContains);\n        if (!nextTerm()) {\n          return docsAtPrefix;\n        }\n        //collect leaf too\n        if (indexedCell.isLeaf() && indexedCell.compareToNoLeaf(cell) == 0) {\n          SmallDocSet docsAtLeaf = collectDocs(acceptContains);\n          nextTerm();\n          return union(docsAtPrefix, docsAtLeaf);\n        } else {\n          return docsAtPrefix;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["4de14be4bd1b857ba37ca138b61c4661c6d1bed3","11ac40ec1cc2f6d61b8c8f0cd9b306dfcef5aaf0"],"672b198fc3dce868916c727917cae58c2906763d":["11ac40ec1cc2f6d61b8c8f0cd9b306dfcef5aaf0"],"69da1c397a55d488a19e555c8da635417e2dfd47":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"15e323346eac5e4685c0a9f2df85eb96b4239bbb":["69da1c397a55d488a19e555c8da635417e2dfd47","4de14be4bd1b857ba37ca138b61c4661c6d1bed3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4de14be4bd1b857ba37ca138b61c4661c6d1bed3":["69da1c397a55d488a19e555c8da635417e2dfd47"],"11ac40ec1cc2f6d61b8c8f0cd9b306dfcef5aaf0":["4de14be4bd1b857ba37ca138b61c4661c6d1bed3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["672b198fc3dce868916c727917cae58c2906763d"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"672b198fc3dce868916c727917cae58c2906763d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"69da1c397a55d488a19e555c8da635417e2dfd47":["15e323346eac5e4685c0a9f2df85eb96b4239bbb","4de14be4bd1b857ba37ca138b61c4661c6d1bed3"],"15e323346eac5e4685c0a9f2df85eb96b4239bbb":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["69da1c397a55d488a19e555c8da635417e2dfd47"],"4de14be4bd1b857ba37ca138b61c4661c6d1bed3":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","15e323346eac5e4685c0a9f2df85eb96b4239bbb","11ac40ec1cc2f6d61b8c8f0cd9b306dfcef5aaf0"],"11ac40ec1cc2f6d61b8c8f0cd9b306dfcef5aaf0":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","672b198fc3dce868916c727917cae58c2906763d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","15e323346eac5e4685c0a9f2df85eb96b4239bbb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}