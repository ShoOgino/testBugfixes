{"path":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testCreateWithDefaultConfigSet().mjava","commits":[{"id":"197bbedf08450ade98a11f4a0001448059666bec","date":1498534625,"type":0,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testCreateWithDefaultConfigSet().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * When a config name is not specified during collection creation, the _default should\n   * be used.\n   */\n  @Test\n  public void testCreateWithDefaultConfigSet() throws Exception {\n    String collectionName = \"solrj_default_configset\";\n    CollectionAdminResponse response = CollectionAdminRequest.createCollection(collectionName, 2, 2) // no configset specified\n        .process(cluster.getSolrClient());\n\n    // The _default configset (for the tests) is designed to error out upon collection creation,\n    // so we just ensure that the correct error message was obtained.\n    assertFalse(response.isSuccess());\n    System.out.println(\"Errors are: \"+response.getErrorMessages());\n    assertTrue(response.getErrorMessages() != null && response.getErrorMessages().size() > 0);\n    assertTrue(response.getErrorMessages().getVal(0).contains(\"This is the _default configset, which is designed\"\n        + \" to throw error upon collection creation.\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4","date":1498540685,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testCreateWithDefaultConfigSet().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * When a config name is not specified during collection creation, the _default should\n   * be used.\n   */\n  @Test\n  public void testCreateWithDefaultConfigSet() throws Exception {\n    String collectionName = \"solrj_default_configset\";\n    CollectionAdminResponse response = CollectionAdminRequest.createCollection(collectionName, 2, 2) // no configset specified\n        .process(cluster.getSolrClient());\n\n    // The _default configset (for the tests) is designed to error out upon collection creation,\n    // so we just ensure that the correct error message was obtained.\n    assertFalse(response.isSuccess());\n    System.out.println(\"Errors are: \"+response.getErrorMessages());\n    assertTrue(response.getErrorMessages() != null && response.getErrorMessages().size() > 0);\n    assertTrue(response.getErrorMessages().getVal(0).contains(\"This is the _default configset, which is designed\"\n        + \" to throw error upon collection creation.\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"13fad8390e046d8580c54beb990a4f25c9123536","date":1498567995,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testCreateWithDefaultConfigSet().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testCreateWithDefaultConfigSet().mjava","sourceNew":"  /**\n   * When a config name is not specified during collection creation, the _default should\n   * be used.\n   */\n  @Test\n  public void testCreateWithDefaultConfigSet() throws Exception {\n    String collectionName = \"solrj_default_configset\";\n    CollectionAdminResponse response = CollectionAdminRequest.createCollection(collectionName, 2, 2) // no configset specified\n        .process(cluster.getSolrClient());\n\n    // The _default configset (for the tests) is designed to error out upon collection creation,\n    // so we just ensure that the correct error message was obtained.\n    assertFalse(response.isSuccess());\n    System.out.println(\"Errors are: \"+response.getErrorMessages());\n    assertTrue(response.getErrorMessages() != null && response.getErrorMessages().size() > 0);\n    assertTrue(response.getErrorMessages().getVal(0).contains(\"This is the _default configset, which is designed\"\n        + \" to throw error upon collection creation\"));\n  }\n\n","sourceOld":"  /**\n   * When a config name is not specified during collection creation, the _default should\n   * be used.\n   */\n  @Test\n  public void testCreateWithDefaultConfigSet() throws Exception {\n    String collectionName = \"solrj_default_configset\";\n    CollectionAdminResponse response = CollectionAdminRequest.createCollection(collectionName, 2, 2) // no configset specified\n        .process(cluster.getSolrClient());\n\n    // The _default configset (for the tests) is designed to error out upon collection creation,\n    // so we just ensure that the correct error message was obtained.\n    assertFalse(response.isSuccess());\n    System.out.println(\"Errors are: \"+response.getErrorMessages());\n    assertTrue(response.getErrorMessages() != null && response.getErrorMessages().size() > 0);\n    assertTrue(response.getErrorMessages().getVal(0).contains(\"This is the _default configset, which is designed\"\n        + \" to throw error upon collection creation.\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"98f11c416d30e556e0004a9a84960702d12d35b1","date":1498628359,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testCreateWithDefaultConfigSet().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testCreateWithDefaultConfigSet().mjava","sourceNew":"  /**\n   * When a config name is not specified during collection creation, the _default should\n   * be used.\n   */\n  @Test\n  public void testCreateWithDefaultConfigSet() throws Exception {\n    String collectionName = \"solrj_default_configset\";\n    CollectionAdminResponse response = CollectionAdminRequest.createCollection(collectionName, 2, 2) // no configset specified\n        .process(cluster.getSolrClient());\n\n    // The _default configset (for the tests) is designed to error out upon collection creation,\n    // so we just ensure that the correct error message was obtained.\n    assertFalse(response.isSuccess());\n    System.out.println(\"Errors are: \"+response.getErrorMessages());\n    assertTrue(response.getErrorMessages() != null && response.getErrorMessages().size() > 0);\n    assertTrue(response.getErrorMessages().getVal(0).contains(\"This is the _default configset, which is designed\"\n        + \" to throw error upon collection creation\"));\n  }\n\n","sourceOld":"  /**\n   * When a config name is not specified during collection creation, the _default should\n   * be used.\n   */\n  @Test\n  public void testCreateWithDefaultConfigSet() throws Exception {\n    String collectionName = \"solrj_default_configset\";\n    CollectionAdminResponse response = CollectionAdminRequest.createCollection(collectionName, 2, 2) // no configset specified\n        .process(cluster.getSolrClient());\n\n    // The _default configset (for the tests) is designed to error out upon collection creation,\n    // so we just ensure that the correct error message was obtained.\n    assertFalse(response.isSuccess());\n    System.out.println(\"Errors are: \"+response.getErrorMessages());\n    assertTrue(response.getErrorMessages() != null && response.getErrorMessages().size() > 0);\n    assertTrue(response.getErrorMessages().getVal(0).contains(\"This is the _default configset, which is designed\"\n        + \" to throw error upon collection creation.\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3dc9e1a7a552fea4325daea83bc538ea4a481aad","date":1498713374,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testCreateWithDefaultConfigSet().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testCreateWithDefaultConfigSet().mjava","sourceNew":"  /**\n   * When a config name is not specified during collection creation, the _default should\n   * be used.\n   */\n  @Test\n  public void testCreateWithDefaultConfigSet() throws Exception {\n    String collectionName = \"solrj_default_configset\";\n    CollectionAdminResponse response = CollectionAdminRequest.createCollection(collectionName, 2, 2)\n        .process(cluster.getSolrClient());\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String, NamedList<Integer>> coresStatus = response.getCollectionCoresStatus();\n    assertEquals(4, coresStatus.size());\n    for (int i=0; i<4; i++) {\n      NamedList<Integer> status = coresStatus.get(Assign.buildCoreName(collectionName, \"shard\" + (i/2+1), Replica.Type.NRT, (i%2+1)));\n      assertEquals(0, (int)status.get(\"status\"));\n      assertTrue(status.get(\"QTime\") > 0);\n    }\n\n    response = CollectionAdminRequest.deleteCollection(collectionName).process(cluster.getSolrClient());\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String,NamedList<Integer>> nodesStatus = response.getCollectionNodesStatus();\n    assertEquals(4, nodesStatus.size());\n\n    waitForState(\"Expected \" + collectionName + \" to disappear from cluster state\", collectionName, (n, c) -> c == null);\n  }\n\n","sourceOld":"  /**\n   * When a config name is not specified during collection creation, the _default should\n   * be used.\n   */\n  @Test\n  public void testCreateWithDefaultConfigSet() throws Exception {\n    String collectionName = \"solrj_default_configset\";\n    CollectionAdminResponse response = CollectionAdminRequest.createCollection(collectionName, 2, 2) // no configset specified\n        .process(cluster.getSolrClient());\n\n    // The _default configset (for the tests) is designed to error out upon collection creation,\n    // so we just ensure that the correct error message was obtained.\n    assertFalse(response.isSuccess());\n    System.out.println(\"Errors are: \"+response.getErrorMessages());\n    assertTrue(response.getErrorMessages() != null && response.getErrorMessages().size() > 0);\n    assertTrue(response.getErrorMessages().getVal(0).contains(\"This is the _default configset, which is designed\"\n        + \" to throw error upon collection creation\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testCreateWithDefaultConfigSet().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * When a config name is not specified during collection creation, the _default should\n   * be used.\n   */\n  @Test\n  public void testCreateWithDefaultConfigSet() throws Exception {\n    String collectionName = \"solrj_default_configset\";\n    CollectionAdminResponse response = CollectionAdminRequest.createCollection(collectionName, 2, 2)\n        .process(cluster.getSolrClient());\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String, NamedList<Integer>> coresStatus = response.getCollectionCoresStatus();\n    assertEquals(4, coresStatus.size());\n    for (int i=0; i<4; i++) {\n      NamedList<Integer> status = coresStatus.get(Assign.buildCoreName(collectionName, \"shard\" + (i/2+1), Replica.Type.NRT, (i%2+1)));\n      assertEquals(0, (int)status.get(\"status\"));\n      assertTrue(status.get(\"QTime\") > 0);\n    }\n\n    response = CollectionAdminRequest.deleteCollection(collectionName).process(cluster.getSolrClient());\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String,NamedList<Integer>> nodesStatus = response.getCollectionNodesStatus();\n    assertEquals(4, nodesStatus.size());\n\n    waitForState(\"Expected \" + collectionName + \" to disappear from cluster state\", collectionName, (n, c) -> c == null);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30c8e5574b55d57947e989443dfde611646530ee","date":1499131153,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testCreateWithDefaultConfigSet().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testCreateWithDefaultConfigSet().mjava","sourceNew":"  /**\n   * When a config name is not specified during collection creation, the _default should\n   * be used.\n   */\n  @Test\n  public void testCreateWithDefaultConfigSet() throws Exception {\n    String collectionName = \"solrj_default_configset\";\n    CollectionAdminResponse response = CollectionAdminRequest.createCollection(collectionName, 2, 2)\n        .process(cluster.getSolrClient());\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String, NamedList<Integer>> coresStatus = response.getCollectionCoresStatus();\n    assertEquals(4, coresStatus.size());\n    for (int i=0; i<4; i++) {\n      NamedList<Integer> status = coresStatus.get(Assign.buildCoreName(collectionName, \"shard\" + (i/2+1), Replica.Type.NRT, (i%2+1)));\n      assertEquals(0, (int)status.get(\"status\"));\n      assertTrue(status.get(\"QTime\") > 0);\n    }\n\n    response = CollectionAdminRequest.deleteCollection(collectionName).process(cluster.getSolrClient());\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String,NamedList<Integer>> nodesStatus = response.getCollectionNodesStatus();\n    assertEquals(4, nodesStatus.size());\n\n    waitForState(\"Expected \" + collectionName + \" to disappear from cluster state\", collectionName, (n, c) -> c == null);\n  }\n\n","sourceOld":"  /**\n   * When a config name is not specified during collection creation, the _default should\n   * be used.\n   */\n  @Test\n  public void testCreateWithDefaultConfigSet() throws Exception {\n    String collectionName = \"solrj_default_configset\";\n    CollectionAdminResponse response = CollectionAdminRequest.createCollection(collectionName, 2, 2) // no configset specified\n        .process(cluster.getSolrClient());\n\n    // The _default configset (for the tests) is designed to error out upon collection creation,\n    // so we just ensure that the correct error message was obtained.\n    assertFalse(response.isSuccess());\n    System.out.println(\"Errors are: \"+response.getErrorMessages());\n    assertTrue(response.getErrorMessages() != null && response.getErrorMessages().size() > 0);\n    assertTrue(response.getErrorMessages().getVal(0).contains(\"This is the _default configset, which is designed\"\n        + \" to throw error upon collection creation\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"091980700f1c5c53946291e7fa2b9024b586b288","date":1499600138,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testCreateWithDefaultConfigSet().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testCreateWithDefaultConfigSet().mjava","sourceNew":"  /**\n   * When a config name is not specified during collection creation, the _default should\n   * be used.\n   */\n  @Test\n  public void testCreateWithDefaultConfigSet() throws Exception {\n    String collectionName = \"solrj_default_configset\";\n    CollectionAdminResponse response = CollectionAdminRequest.createCollection(collectionName, 2, 2)\n        .process(cluster.getSolrClient());\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String, NamedList<Integer>> coresStatus = response.getCollectionCoresStatus();\n    assertEquals(4, coresStatus.size());\n    for (int i=0; i<4; i++) {\n      NamedList<Integer> status = coresStatus.get(Assign.buildCoreName(collectionName, \"shard\" + (i/2+1), Replica.Type.NRT, (i%2+1)));\n      assertEquals(0, (int)status.get(\"status\"));\n      assertTrue(status.get(\"QTime\") > 0);\n    }\n    // Use of _default configset should generate a warning for data-driven functionality in production use\n    assertTrue(response.getWarning() != null && response.getWarning().contains(\"NOT RECOMMENDED for production use\"));\n\n    response = CollectionAdminRequest.deleteCollection(collectionName).process(cluster.getSolrClient());\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String,NamedList<Integer>> nodesStatus = response.getCollectionNodesStatus();\n    assertEquals(4, nodesStatus.size());\n\n    waitForState(\"Expected \" + collectionName + \" to disappear from cluster state\", collectionName, (n, c) -> c == null);\n  }\n\n","sourceOld":"  /**\n   * When a config name is not specified during collection creation, the _default should\n   * be used.\n   */\n  @Test\n  public void testCreateWithDefaultConfigSet() throws Exception {\n    String collectionName = \"solrj_default_configset\";\n    CollectionAdminResponse response = CollectionAdminRequest.createCollection(collectionName, 2, 2)\n        .process(cluster.getSolrClient());\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String, NamedList<Integer>> coresStatus = response.getCollectionCoresStatus();\n    assertEquals(4, coresStatus.size());\n    for (int i=0; i<4; i++) {\n      NamedList<Integer> status = coresStatus.get(Assign.buildCoreName(collectionName, \"shard\" + (i/2+1), Replica.Type.NRT, (i%2+1)));\n      assertEquals(0, (int)status.get(\"status\"));\n      assertTrue(status.get(\"QTime\") > 0);\n    }\n\n    response = CollectionAdminRequest.deleteCollection(collectionName).process(cluster.getSolrClient());\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String,NamedList<Integer>> nodesStatus = response.getCollectionNodesStatus();\n    assertEquals(4, nodesStatus.size());\n\n    waitForState(\"Expected \" + collectionName + \" to disappear from cluster state\", collectionName, (n, c) -> c == null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f9a989a32a073c55e3aef6f807a3474184bbcf49","date":1499930209,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testCreateWithDefaultConfigSet().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testCreateWithDefaultConfigSet().mjava","sourceNew":"  /**\n   * When a config name is not specified during collection creation, the _default should\n   * be used.\n   */\n  @Test\n  public void testCreateWithDefaultConfigSet() throws Exception {\n    String collectionName = \"solrj_default_configset\";\n    CollectionAdminResponse response = CollectionAdminRequest.createCollection(collectionName, 2, 2)\n        .process(cluster.getSolrClient());\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String, NamedList<Integer>> coresStatus = response.getCollectionCoresStatus();\n    assertEquals(4, coresStatus.size());\n    for (int i=0; i<4; i++) {\n      NamedList<Integer> status = coresStatus.get(Assign.buildCoreName(collectionName, \"shard\" + (i/2+1), Replica.Type.NRT, (i%2+1)));\n      assertEquals(0, (int)status.get(\"status\"));\n      assertTrue(status.get(\"QTime\") > 0);\n    }\n    // Use of _default configset should generate a warning for data-driven functionality in production use\n    assertTrue(response.getWarning() != null && response.getWarning().contains(\"NOT RECOMMENDED for production use\"));\n\n    response = CollectionAdminRequest.deleteCollection(collectionName).process(cluster.getSolrClient());\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String,NamedList<Integer>> nodesStatus = response.getCollectionNodesStatus();\n    assertEquals(4, nodesStatus.size());\n\n    waitForState(\"Expected \" + collectionName + \" to disappear from cluster state\", collectionName, (n, c) -> c == null);\n  }\n\n","sourceOld":"  /**\n   * When a config name is not specified during collection creation, the _default should\n   * be used.\n   */\n  @Test\n  public void testCreateWithDefaultConfigSet() throws Exception {\n    String collectionName = \"solrj_default_configset\";\n    CollectionAdminResponse response = CollectionAdminRequest.createCollection(collectionName, 2, 2)\n        .process(cluster.getSolrClient());\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String, NamedList<Integer>> coresStatus = response.getCollectionCoresStatus();\n    assertEquals(4, coresStatus.size());\n    for (int i=0; i<4; i++) {\n      NamedList<Integer> status = coresStatus.get(Assign.buildCoreName(collectionName, \"shard\" + (i/2+1), Replica.Type.NRT, (i%2+1)));\n      assertEquals(0, (int)status.get(\"status\"));\n      assertTrue(status.get(\"QTime\") > 0);\n    }\n\n    response = CollectionAdminRequest.deleteCollection(collectionName).process(cluster.getSolrClient());\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String,NamedList<Integer>> nodesStatus = response.getCollectionNodesStatus();\n    assertEquals(4, nodesStatus.size());\n\n    waitForState(\"Expected \" + collectionName + \" to disappear from cluster state\", collectionName, (n, c) -> c == null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb569fd721c41eafc2a2d788499a7df490c7f1a5","date":1499930871,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testCreateWithDefaultConfigSet().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testCreateWithDefaultConfigSet().mjava","sourceNew":"  /**\n   * When a config name is not specified during collection creation, the _default should\n   * be used.\n   */\n  @Test\n  public void testCreateWithDefaultConfigSet() throws Exception {\n    String collectionName = \"solrj_default_configset\";\n    CollectionAdminResponse response = CollectionAdminRequest.createCollection(collectionName, 2, 2)\n        .process(cluster.getSolrClient());\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String, NamedList<Integer>> coresStatus = response.getCollectionCoresStatus();\n    assertEquals(4, coresStatus.size());\n    for (int i=0; i<4; i++) {\n      NamedList<Integer> status = coresStatus.get(Assign.buildCoreName(collectionName, \"shard\" + (i/2+1), Replica.Type.NRT, (i%2+1)));\n      assertEquals(0, (int)status.get(\"status\"));\n      assertTrue(status.get(\"QTime\") > 0);\n    }\n    // Use of _default configset should generate a warning for data-driven functionality in production use\n    assertTrue(response.getWarning() != null && response.getWarning().contains(\"NOT RECOMMENDED for production use\"));\n\n    response = CollectionAdminRequest.deleteCollection(collectionName).process(cluster.getSolrClient());\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String,NamedList<Integer>> nodesStatus = response.getCollectionNodesStatus();\n    assertEquals(4, nodesStatus.size());\n\n    waitForState(\"Expected \" + collectionName + \" to disappear from cluster state\", collectionName, (n, c) -> c == null);\n  }\n\n","sourceOld":"  /**\n   * When a config name is not specified during collection creation, the _default should\n   * be used.\n   */\n  @Test\n  public void testCreateWithDefaultConfigSet() throws Exception {\n    String collectionName = \"solrj_default_configset\";\n    CollectionAdminResponse response = CollectionAdminRequest.createCollection(collectionName, 2, 2)\n        .process(cluster.getSolrClient());\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String, NamedList<Integer>> coresStatus = response.getCollectionCoresStatus();\n    assertEquals(4, coresStatus.size());\n    for (int i=0; i<4; i++) {\n      NamedList<Integer> status = coresStatus.get(Assign.buildCoreName(collectionName, \"shard\" + (i/2+1), Replica.Type.NRT, (i%2+1)));\n      assertEquals(0, (int)status.get(\"status\"));\n      assertTrue(status.get(\"QTime\") > 0);\n    }\n\n    response = CollectionAdminRequest.deleteCollection(collectionName).process(cluster.getSolrClient());\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String,NamedList<Integer>> nodesStatus = response.getCollectionNodesStatus();\n    assertEquals(4, nodesStatus.size());\n\n    waitForState(\"Expected \" + collectionName + \" to disappear from cluster state\", collectionName, (n, c) -> c == null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"651c3ddf5bc1266d9de0a972ec05e59d77099a4c","date":1500969855,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testCreateWithDefaultConfigSet().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testCreateWithDefaultConfigSet().mjava","sourceNew":"  /**\n   * When a config name is not specified during collection creation, the _default should\n   * be used.\n   */\n  @Test\n  public void testCreateWithDefaultConfigSet() throws Exception {\n    String collectionName = \"solrj_default_configset\";\n    CollectionAdminResponse response = CollectionAdminRequest.createCollection(collectionName, 2, 2)\n        .process(cluster.getSolrClient());\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String, NamedList<Integer>> coresStatus = response.getCollectionCoresStatus();\n    assertEquals(4, coresStatus.size());\n    for (String coreName : coresStatus.keySet()) {\n      NamedList<Integer> status = coresStatus.get(coreName);\n      assertEquals(0, (int)status.get(\"status\"));\n      assertTrue(status.get(\"QTime\") > 0);\n    }\n    // Use of _default configset should generate a warning for data-driven functionality in production use\n    assertTrue(response.getWarning() != null && response.getWarning().contains(\"NOT RECOMMENDED for production use\"));\n\n    response = CollectionAdminRequest.deleteCollection(collectionName).process(cluster.getSolrClient());\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String,NamedList<Integer>> nodesStatus = response.getCollectionNodesStatus();\n    assertEquals(4, nodesStatus.size());\n\n    waitForState(\"Expected \" + collectionName + \" to disappear from cluster state\", collectionName, (n, c) -> c == null);\n  }\n\n","sourceOld":"  /**\n   * When a config name is not specified during collection creation, the _default should\n   * be used.\n   */\n  @Test\n  public void testCreateWithDefaultConfigSet() throws Exception {\n    String collectionName = \"solrj_default_configset\";\n    CollectionAdminResponse response = CollectionAdminRequest.createCollection(collectionName, 2, 2)\n        .process(cluster.getSolrClient());\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String, NamedList<Integer>> coresStatus = response.getCollectionCoresStatus();\n    assertEquals(4, coresStatus.size());\n    for (int i=0; i<4; i++) {\n      NamedList<Integer> status = coresStatus.get(Assign.buildCoreName(collectionName, \"shard\" + (i/2+1), Replica.Type.NRT, (i%2+1)));\n      assertEquals(0, (int)status.get(\"status\"));\n      assertTrue(status.get(\"QTime\") > 0);\n    }\n    // Use of _default configset should generate a warning for data-driven functionality in production use\n    assertTrue(response.getWarning() != null && response.getWarning().contains(\"NOT RECOMMENDED for production use\"));\n\n    response = CollectionAdminRequest.deleteCollection(collectionName).process(cluster.getSolrClient());\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String,NamedList<Integer>> nodesStatus = response.getCollectionNodesStatus();\n    assertEquals(4, nodesStatus.size());\n\n    waitForState(\"Expected \" + collectionName + \" to disappear from cluster state\", collectionName, (n, c) -> c == null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"936cdd5882761db3b844afd6f84ab81cbb011a75","date":1500973524,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testCreateWithDefaultConfigSet().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testCreateWithDefaultConfigSet().mjava","sourceNew":"  /**\n   * When a config name is not specified during collection creation, the _default should\n   * be used.\n   */\n  @Test\n  public void testCreateWithDefaultConfigSet() throws Exception {\n    String collectionName = \"solrj_default_configset\";\n    CollectionAdminResponse response = CollectionAdminRequest.createCollection(collectionName, 2, 2)\n        .process(cluster.getSolrClient());\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String, NamedList<Integer>> coresStatus = response.getCollectionCoresStatus();\n    assertEquals(4, coresStatus.size());\n    for (String coreName : coresStatus.keySet()) {\n      NamedList<Integer> status = coresStatus.get(coreName);\n      assertEquals(0, (int)status.get(\"status\"));\n      assertTrue(status.get(\"QTime\") > 0);\n    }\n    // Use of _default configset should generate a warning for data-driven functionality in production use\n    assertTrue(response.getWarning() != null && response.getWarning().contains(\"NOT RECOMMENDED for production use\"));\n\n    response = CollectionAdminRequest.deleteCollection(collectionName).process(cluster.getSolrClient());\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String,NamedList<Integer>> nodesStatus = response.getCollectionNodesStatus();\n    assertEquals(4, nodesStatus.size());\n\n    waitForState(\"Expected \" + collectionName + \" to disappear from cluster state\", collectionName, (n, c) -> c == null);\n  }\n\n","sourceOld":"  /**\n   * When a config name is not specified during collection creation, the _default should\n   * be used.\n   */\n  @Test\n  public void testCreateWithDefaultConfigSet() throws Exception {\n    String collectionName = \"solrj_default_configset\";\n    CollectionAdminResponse response = CollectionAdminRequest.createCollection(collectionName, 2, 2)\n        .process(cluster.getSolrClient());\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String, NamedList<Integer>> coresStatus = response.getCollectionCoresStatus();\n    assertEquals(4, coresStatus.size());\n    for (int i=0; i<4; i++) {\n      NamedList<Integer> status = coresStatus.get(Assign.buildCoreName(collectionName, \"shard\" + (i/2+1), Replica.Type.NRT, (i%2+1)));\n      assertEquals(0, (int)status.get(\"status\"));\n      assertTrue(status.get(\"QTime\") > 0);\n    }\n    // Use of _default configset should generate a warning for data-driven functionality in production use\n    assertTrue(response.getWarning() != null && response.getWarning().contains(\"NOT RECOMMENDED for production use\"));\n\n    response = CollectionAdminRequest.deleteCollection(collectionName).process(cluster.getSolrClient());\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String,NamedList<Integer>> nodesStatus = response.getCollectionNodesStatus();\n    assertEquals(4, nodesStatus.size());\n\n    waitForState(\"Expected \" + collectionName + \" to disappear from cluster state\", collectionName, (n, c) -> c == null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a52341299179de5479672f7cf518bf4b173f34b3","date":1501079746,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testCreateWithDefaultConfigSet().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testCreateWithDefaultConfigSet().mjava","sourceNew":"  /**\n   * When a config name is not specified during collection creation, the _default should\n   * be used.\n   */\n  @Test\n  public void testCreateWithDefaultConfigSet() throws Exception {\n    String collectionName = \"solrj_default_configset\";\n    CollectionAdminResponse response = CollectionAdminRequest.createCollection(collectionName, 2, 2)\n        .process(cluster.getSolrClient());\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String, NamedList<Integer>> coresStatus = response.getCollectionCoresStatus();\n    assertEquals(4, coresStatus.size());\n    for (String coreName : coresStatus.keySet()) {\n      NamedList<Integer> status = coresStatus.get(coreName);\n      assertEquals(0, (int)status.get(\"status\"));\n      assertTrue(status.get(\"QTime\") > 0);\n    }\n    // Use of _default configset should generate a warning for data-driven functionality in production use\n    assertTrue(response.getWarning() != null && response.getWarning().contains(\"NOT RECOMMENDED for production use\"));\n\n    response = CollectionAdminRequest.deleteCollection(collectionName).process(cluster.getSolrClient());\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String,NamedList<Integer>> nodesStatus = response.getCollectionNodesStatus();\n    assertEquals(4, nodesStatus.size());\n\n    waitForState(\"Expected \" + collectionName + \" to disappear from cluster state\", collectionName, (n, c) -> c == null);\n  }\n\n","sourceOld":"  /**\n   * When a config name is not specified during collection creation, the _default should\n   * be used.\n   */\n  @Test\n  public void testCreateWithDefaultConfigSet() throws Exception {\n    String collectionName = \"solrj_default_configset\";\n    CollectionAdminResponse response = CollectionAdminRequest.createCollection(collectionName, 2, 2)\n        .process(cluster.getSolrClient());\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String, NamedList<Integer>> coresStatus = response.getCollectionCoresStatus();\n    assertEquals(4, coresStatus.size());\n    for (int i=0; i<4; i++) {\n      NamedList<Integer> status = coresStatus.get(Assign.buildCoreName(collectionName, \"shard\" + (i/2+1), Replica.Type.NRT, (i%2+1)));\n      assertEquals(0, (int)status.get(\"status\"));\n      assertTrue(status.get(\"QTime\") > 0);\n    }\n    // Use of _default configset should generate a warning for data-driven functionality in production use\n    assertTrue(response.getWarning() != null && response.getWarning().contains(\"NOT RECOMMENDED for production use\"));\n\n    response = CollectionAdminRequest.deleteCollection(collectionName).process(cluster.getSolrClient());\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String,NamedList<Integer>> nodesStatus = response.getCollectionNodesStatus();\n    assertEquals(4, nodesStatus.size());\n\n    waitForState(\"Expected \" + collectionName + \" to disappear from cluster state\", collectionName, (n, c) -> c == null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testCreateWithDefaultConfigSet().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testCreateWithDefaultConfigSet().mjava","sourceNew":"  /**\n   * When a config name is not specified during collection creation, the _default should\n   * be used.\n   */\n  @Test\n  public void testCreateWithDefaultConfigSet() throws Exception {\n    String collectionName = \"solrj_default_configset\";\n    CollectionAdminResponse response = CollectionAdminRequest.createCollection(collectionName, 2, 2)\n        .process(cluster.getSolrClient());\n    \n    cluster.waitForActiveCollection(collectionName, 2, 4);\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String, NamedList<Integer>> coresStatus = response.getCollectionCoresStatus();\n    assertEquals(4, coresStatus.size());\n    for (String coreName : coresStatus.keySet()) {\n      NamedList<Integer> status = coresStatus.get(coreName);\n      assertEquals(0, (int)status.get(\"status\"));\n      assertTrue(status.get(\"QTime\") > 0);\n    }\n    // Use of _default configset should generate a warning for data-driven functionality in production use\n    assertTrue(response.getWarning() != null && response.getWarning().contains(\"NOT RECOMMENDED for production use\"));\n\n    response = CollectionAdminRequest.deleteCollection(collectionName).process(cluster.getSolrClient());\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String,NamedList<Integer>> nodesStatus = response.getCollectionNodesStatus();\n    assertEquals(4, nodesStatus.size());\n\n    waitForState(\"Expected \" + collectionName + \" to disappear from cluster state\", collectionName, (n, c) -> c == null);\n  }\n\n","sourceOld":"  /**\n   * When a config name is not specified during collection creation, the _default should\n   * be used.\n   */\n  @Test\n  public void testCreateWithDefaultConfigSet() throws Exception {\n    String collectionName = \"solrj_default_configset\";\n    CollectionAdminResponse response = CollectionAdminRequest.createCollection(collectionName, 2, 2)\n        .process(cluster.getSolrClient());\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String, NamedList<Integer>> coresStatus = response.getCollectionCoresStatus();\n    assertEquals(4, coresStatus.size());\n    for (String coreName : coresStatus.keySet()) {\n      NamedList<Integer> status = coresStatus.get(coreName);\n      assertEquals(0, (int)status.get(\"status\"));\n      assertTrue(status.get(\"QTime\") > 0);\n    }\n    // Use of _default configset should generate a warning for data-driven functionality in production use\n    assertTrue(response.getWarning() != null && response.getWarning().contains(\"NOT RECOMMENDED for production use\"));\n\n    response = CollectionAdminRequest.deleteCollection(collectionName).process(cluster.getSolrClient());\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String,NamedList<Integer>> nodesStatus = response.getCollectionNodesStatus();\n    assertEquals(4, nodesStatus.size());\n\n    waitForState(\"Expected \" + collectionName + \" to disappear from cluster state\", collectionName, (n, c) -> c == null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"651c3ddf5bc1266d9de0a972ec05e59d77099a4c":["091980700f1c5c53946291e7fa2b9024b586b288"],"197bbedf08450ade98a11f4a0001448059666bec":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["a52341299179de5479672f7cf518bf4b173f34b3"],"fb569fd721c41eafc2a2d788499a7df490c7f1a5":["30c8e5574b55d57947e989443dfde611646530ee","f9a989a32a073c55e3aef6f807a3474184bbcf49"],"13fad8390e046d8580c54beb990a4f25c9123536":["197bbedf08450ade98a11f4a0001448059666bec"],"936cdd5882761db3b844afd6f84ab81cbb011a75":["fb569fd721c41eafc2a2d788499a7df490c7f1a5","651c3ddf5bc1266d9de0a972ec05e59d77099a4c"],"30c8e5574b55d57947e989443dfde611646530ee":["98f11c416d30e556e0004a9a84960702d12d35b1","28288370235ed02234a64753cdbf0c6ec096304a"],"28288370235ed02234a64753cdbf0c6ec096304a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3dc9e1a7a552fea4325daea83bc538ea4a481aad"],"f9a989a32a073c55e3aef6f807a3474184bbcf49":["30c8e5574b55d57947e989443dfde611646530ee","091980700f1c5c53946291e7fa2b9024b586b288"],"091980700f1c5c53946291e7fa2b9024b586b288":["28288370235ed02234a64753cdbf0c6ec096304a"],"3dc9e1a7a552fea4325daea83bc538ea4a481aad":["13fad8390e046d8580c54beb990a4f25c9123536"],"a52341299179de5479672f7cf518bf4b173f34b3":["091980700f1c5c53946291e7fa2b9024b586b288","651c3ddf5bc1266d9de0a972ec05e59d77099a4c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","197bbedf08450ade98a11f4a0001448059666bec"],"98f11c416d30e556e0004a9a84960702d12d35b1":["fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4","13fad8390e046d8580c54beb990a4f25c9123536"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"]},"commit2Childs":{"651c3ddf5bc1266d9de0a972ec05e59d77099a4c":["936cdd5882761db3b844afd6f84ab81cbb011a75","a52341299179de5479672f7cf518bf4b173f34b3"],"197bbedf08450ade98a11f4a0001448059666bec":["13fad8390e046d8580c54beb990a4f25c9123536","fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fb569fd721c41eafc2a2d788499a7df490c7f1a5":["936cdd5882761db3b844afd6f84ab81cbb011a75"],"13fad8390e046d8580c54beb990a4f25c9123536":["3dc9e1a7a552fea4325daea83bc538ea4a481aad","98f11c416d30e556e0004a9a84960702d12d35b1"],"936cdd5882761db3b844afd6f84ab81cbb011a75":[],"30c8e5574b55d57947e989443dfde611646530ee":["fb569fd721c41eafc2a2d788499a7df490c7f1a5","f9a989a32a073c55e3aef6f807a3474184bbcf49"],"f9a989a32a073c55e3aef6f807a3474184bbcf49":["fb569fd721c41eafc2a2d788499a7df490c7f1a5"],"28288370235ed02234a64753cdbf0c6ec096304a":["30c8e5574b55d57947e989443dfde611646530ee","091980700f1c5c53946291e7fa2b9024b586b288"],"091980700f1c5c53946291e7fa2b9024b586b288":["651c3ddf5bc1266d9de0a972ec05e59d77099a4c","f9a989a32a073c55e3aef6f807a3474184bbcf49","a52341299179de5479672f7cf518bf4b173f34b3"],"3dc9e1a7a552fea4325daea83bc538ea4a481aad":["28288370235ed02234a64753cdbf0c6ec096304a"],"a52341299179de5479672f7cf518bf4b173f34b3":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["197bbedf08450ade98a11f4a0001448059666bec","28288370235ed02234a64753cdbf0c6ec096304a","fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4"],"fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4":["98f11c416d30e556e0004a9a84960702d12d35b1"],"98f11c416d30e556e0004a9a84960702d12d35b1":["30c8e5574b55d57947e989443dfde611646530ee"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["936cdd5882761db3b844afd6f84ab81cbb011a75","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}