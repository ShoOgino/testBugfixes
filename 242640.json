{"path":"lucene/monitor/src/java/org/apache/lucene/monitor/QueryDecomposer#decomposeBoolean(BooleanQuery).mjava","commits":[{"id":"7c529b189e09de25455d82ebd7260748cf11ee14","date":1560415257,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/monitor/src/java/org/apache/lucene/monitor/QueryDecomposer#decomposeBoolean(BooleanQuery).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Decompose a {@link org.apache.lucene.search.BooleanQuery}\n   *\n   * @param q the boolean query\n   * @return a collection of subqueries\n   */\n  public Set<Query> decomposeBoolean(BooleanQuery q) {\n    if (q.getMinimumNumberShouldMatch() > 1)\n      return Collections.singleton(q);\n\n    Set<Query> subqueries = new HashSet<>();\n    Set<Query> exclusions = new HashSet<>();\n    Set<Query> mandatory = new HashSet<>();\n\n    for (BooleanClause clause : q) {\n      if (clause.getOccur() == BooleanClause.Occur.MUST || clause.getOccur() == BooleanClause.Occur.FILTER)\n        mandatory.add(clause.getQuery());\n      else if (clause.getOccur() == BooleanClause.Occur.MUST_NOT)\n        exclusions.add(clause.getQuery());\n      else {\n        subqueries.addAll(decompose(clause.getQuery()));\n      }\n    }\n\n    // More than one MUST clause, or a single MUST clause with disjunctions\n    if (mandatory.size() > 1 || (mandatory.size() == 1 && subqueries.size() > 0))\n      return Collections.singleton(q);\n\n    // If we only have a single MUST clause and no SHOULD clauses, then we can\n    // decompose the MUST clause instead\n    if (mandatory.size() == 1) {\n      subqueries.addAll(decompose(mandatory.iterator().next()));\n    }\n\n    if (exclusions.size() == 0)\n      return subqueries;\n\n    // If there are exclusions, then we need to add them to all the decomposed\n    // queries\n    Set<Query> rewrittenSubqueries = new HashSet<>(subqueries.size());\n    for (Query subquery : subqueries) {\n      BooleanQuery.Builder bq = new BooleanQuery.Builder();\n      bq.add(subquery, BooleanClause.Occur.MUST);\n      for (Query ex : exclusions) {\n        bq.add(ex, BooleanClause.Occur.MUST_NOT);\n      }\n      rewrittenSubqueries.add(bq.build());\n    }\n    return rewrittenSubqueries;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7c529b189e09de25455d82ebd7260748cf11ee14":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7c529b189e09de25455d82ebd7260748cf11ee14"]},"commit2Childs":{"7c529b189e09de25455d82ebd7260748cf11ee14":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7c529b189e09de25455d82ebd7260748cf11ee14"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}