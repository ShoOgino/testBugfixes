{"path":"contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestRegexTransformer#groupNames().mjava","commits":[{"id":"fee52c628145c8dc485fb7902217fd0b96d7a237","date":1237276690,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestRegexTransformer#groupNames().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void groupNames() {\n    List<Map<String, String>> fields = new ArrayList<Map<String, String>>();\n    // <field column=\"col1\" regex=\"(\\w*)(\\w*) (\\w*)\" groupNames=\",firstName,lastName\"/>\n    Map<String ,String > m = new HashMap<String, String>();\n    m.put(COLUMN,\"fullName\");\n    m.put(GROUP_NAMES,\",firstName,lastName\");\n    m.put(REGEX,\"(\\\\w*) (\\\\w*) (\\\\w*)\");\n    fields.add(m);\n    Context context = AbstractDataImportHandlerTest.getContext(null, null, null, 0, fields, null);\n    Map<String, Object> src = new HashMap<String, Object>();\n    src.put(\"fullName\", \"Mr Noble Paul\");\n\n    Map<String, Object> result = new RegexTransformer().transformRow(src, context);\n    Assert.assertEquals(\"Noble\", result.get(\"firstName\"));\n    Assert.assertEquals(\"Paul\", result.get(\"lastName\"));\n    src= new HashMap<String, Object>();\n    List<String> l= new ArrayList();\n    l.add(\"Mr Noble Paul\") ;\n    l.add(\"Mr Shalin Mangar\") ;\n    src.put(\"fullName\", l);\n    result = new RegexTransformer().transformRow(src, context);    \n    List l1 = (List) result.get(\"firstName\");\n    List l2 = (List) result.get(\"lastName\");\n    Assert.assertEquals(\"Noble\", l1.get(0));\n    Assert.assertEquals(\"Shalin\", l1.get(1));\n    Assert.assertEquals(\"Paul\", l2.get(0));\n    Assert.assertEquals(\"Mangar\", l2.get(1));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"594d4ee17b3d941ed34827ca6646e378cf7d8d2a","date":1239868870,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestRegexTransformer#groupNames().mjava","pathOld":"contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestRegexTransformer#groupNames().mjava","sourceNew":"  @Test\n  public void groupNames() {\n    List<Map<String, String>> fields = new ArrayList<Map<String, String>>();\n    // <field column=\"col1\" regex=\"(\\w*)(\\w*) (\\w*)\" groupNames=\",firstName,lastName\"/>\n    Map<String ,String > m = new HashMap<String, String>();\n    m.put(COLUMN,\"fullName\");\n    m.put(GROUP_NAMES,\",firstName,lastName\");\n    m.put(REGEX,\"(\\\\w*) (\\\\w*) (\\\\w*)\");\n    fields.add(m);\n    Context context = AbstractDataImportHandlerTest.getContext(null, null, null, Context.FULL_DUMP, fields, null);\n    Map<String, Object> src = new HashMap<String, Object>();\n    src.put(\"fullName\", \"Mr Noble Paul\");\n\n    Map<String, Object> result = new RegexTransformer().transformRow(src, context);\n    Assert.assertEquals(\"Noble\", result.get(\"firstName\"));\n    Assert.assertEquals(\"Paul\", result.get(\"lastName\"));\n    src= new HashMap<String, Object>();\n    List<String> l= new ArrayList();\n    l.add(\"Mr Noble Paul\") ;\n    l.add(\"Mr Shalin Mangar\") ;\n    src.put(\"fullName\", l);\n    result = new RegexTransformer().transformRow(src, context);    \n    List l1 = (List) result.get(\"firstName\");\n    List l2 = (List) result.get(\"lastName\");\n    Assert.assertEquals(\"Noble\", l1.get(0));\n    Assert.assertEquals(\"Shalin\", l1.get(1));\n    Assert.assertEquals(\"Paul\", l2.get(0));\n    Assert.assertEquals(\"Mangar\", l2.get(1));\n  }\n\n","sourceOld":"  @Test\n  public void groupNames() {\n    List<Map<String, String>> fields = new ArrayList<Map<String, String>>();\n    // <field column=\"col1\" regex=\"(\\w*)(\\w*) (\\w*)\" groupNames=\",firstName,lastName\"/>\n    Map<String ,String > m = new HashMap<String, String>();\n    m.put(COLUMN,\"fullName\");\n    m.put(GROUP_NAMES,\",firstName,lastName\");\n    m.put(REGEX,\"(\\\\w*) (\\\\w*) (\\\\w*)\");\n    fields.add(m);\n    Context context = AbstractDataImportHandlerTest.getContext(null, null, null, 0, fields, null);\n    Map<String, Object> src = new HashMap<String, Object>();\n    src.put(\"fullName\", \"Mr Noble Paul\");\n\n    Map<String, Object> result = new RegexTransformer().transformRow(src, context);\n    Assert.assertEquals(\"Noble\", result.get(\"firstName\"));\n    Assert.assertEquals(\"Paul\", result.get(\"lastName\"));\n    src= new HashMap<String, Object>();\n    List<String> l= new ArrayList();\n    l.add(\"Mr Noble Paul\") ;\n    l.add(\"Mr Shalin Mangar\") ;\n    src.put(\"fullName\", l);\n    result = new RegexTransformer().transformRow(src, context);    \n    List l1 = (List) result.get(\"firstName\");\n    List l2 = (List) result.get(\"lastName\");\n    Assert.assertEquals(\"Noble\", l1.get(0));\n    Assert.assertEquals(\"Shalin\", l1.get(1));\n    Assert.assertEquals(\"Paul\", l2.get(0));\n    Assert.assertEquals(\"Mangar\", l2.get(1));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"72f7cca1d9eaf9232fb247ff10b18fb6e94d3250","date":1239876954,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestRegexTransformer#groupNames().mjava","pathOld":"contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestRegexTransformer#groupNames().mjava","sourceNew":"  @Test\n  public void groupNames() {\n    List<Map<String, String>> fields = new ArrayList<Map<String, String>>();\n    // <field column=\"col1\" regex=\"(\\w*)(\\w*) (\\w*)\" groupNames=\",firstName,lastName\"/>\n    Map<String ,String > m = new HashMap<String, String>();\n    m.put(COLUMN,\"fullName\");\n    m.put(GROUP_NAMES,\",firstName,lastName\");\n    m.put(REGEX,\"(\\\\w*) (\\\\w*) (\\\\w*)\");\n    fields.add(m);\n    Context context = AbstractDataImportHandlerTest.getContext(null, null, null, Context.FULL_DUMP, fields, null);\n    Map<String, Object> src = new HashMap<String, Object>();\n    src.put(\"fullName\", \"Mr Noble Paul\");\n\n    Map<String, Object> result = new RegexTransformer().transformRow(src, context);\n    Assert.assertEquals(\"Noble\", result.get(\"firstName\"));\n    Assert.assertEquals(\"Paul\", result.get(\"lastName\"));\n    src= new HashMap<String, Object>();\n    List<String> l= new ArrayList();\n    l.add(\"Mr Noble Paul\") ;\n    l.add(\"Mr Shalin Mangar\") ;\n    src.put(\"fullName\", l);\n    result = new RegexTransformer().transformRow(src, context);\n    List l1 = (List) result.get(\"firstName\");\n    List l2 = (List) result.get(\"lastName\");\n    Assert.assertEquals(\"Noble\", l1.get(0));\n    Assert.assertEquals(\"Shalin\", l1.get(1));\n    Assert.assertEquals(\"Paul\", l2.get(0));\n    Assert.assertEquals(\"Mangar\", l2.get(1));\n  }\n\n","sourceOld":"  @Test\n  public void groupNames() {\n    List<Map<String, String>> fields = new ArrayList<Map<String, String>>();\n    // <field column=\"col1\" regex=\"(\\w*)(\\w*) (\\w*)\" groupNames=\",firstName,lastName\"/>\n    Map<String ,String > m = new HashMap<String, String>();\n    m.put(COLUMN,\"fullName\");\n    m.put(GROUP_NAMES,\",firstName,lastName\");\n    m.put(REGEX,\"(\\\\w*) (\\\\w*) (\\\\w*)\");\n    fields.add(m);\n    Context context = AbstractDataImportHandlerTest.getContext(null, null, null, Context.FULL_DUMP, fields, null);\n    Map<String, Object> src = new HashMap<String, Object>();\n    src.put(\"fullName\", \"Mr Noble Paul\");\n\n    Map<String, Object> result = new RegexTransformer().transformRow(src, context);\n    Assert.assertEquals(\"Noble\", result.get(\"firstName\"));\n    Assert.assertEquals(\"Paul\", result.get(\"lastName\"));\n    src= new HashMap<String, Object>();\n    List<String> l= new ArrayList();\n    l.add(\"Mr Noble Paul\") ;\n    l.add(\"Mr Shalin Mangar\") ;\n    src.put(\"fullName\", l);\n    result = new RegexTransformer().transformRow(src, context);    \n    List l1 = (List) result.get(\"firstName\");\n    List l2 = (List) result.get(\"lastName\");\n    Assert.assertEquals(\"Noble\", l1.get(0));\n    Assert.assertEquals(\"Shalin\", l1.get(1));\n    Assert.assertEquals(\"Paul\", l2.get(0));\n    Assert.assertEquals(\"Mangar\", l2.get(1));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestRegexTransformer#groupNames().mjava","pathOld":"contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestRegexTransformer#groupNames().mjava","sourceNew":"  @Test\n  public void groupNames() {\n    List<Map<String, String>> fields = new ArrayList<Map<String, String>>();\n    // <field column=\"col1\" regex=\"(\\w*)(\\w*) (\\w*)\" groupNames=\",firstName,lastName\"/>\n    Map<String ,String > m = new HashMap<String, String>();\n    m.put(COLUMN,\"fullName\");\n    m.put(GROUP_NAMES,\",firstName,lastName\");\n    m.put(REGEX,\"(\\\\w*) (\\\\w*) (\\\\w*)\");\n    fields.add(m);\n    Context context = AbstractDataImportHandlerTest.getContext(null, null, null, Context.FULL_DUMP, fields, null);\n    Map<String, Object> src = new HashMap<String, Object>();\n    src.put(\"fullName\", \"Mr Noble Paul\");\n\n    Map<String, Object> result = new RegexTransformer().transformRow(src, context);\n    Assert.assertEquals(\"Noble\", result.get(\"firstName\"));\n    Assert.assertEquals(\"Paul\", result.get(\"lastName\"));\n    src= new HashMap<String, Object>();\n    List<String> l= new ArrayList();\n    l.add(\"Mr Noble Paul\") ;\n    l.add(\"Mr Shalin Mangar\") ;\n    src.put(\"fullName\", l);\n    result = new RegexTransformer().transformRow(src, context);\n    List l1 = (List) result.get(\"firstName\");\n    List l2 = (List) result.get(\"lastName\");\n    Assert.assertEquals(\"Noble\", l1.get(0));\n    Assert.assertEquals(\"Shalin\", l1.get(1));\n    Assert.assertEquals(\"Paul\", l2.get(0));\n    Assert.assertEquals(\"Mangar\", l2.get(1));\n  }\n\n","sourceOld":"  @Test\n  public void groupNames() {\n    List<Map<String, String>> fields = new ArrayList<Map<String, String>>();\n    // <field column=\"col1\" regex=\"(\\w*)(\\w*) (\\w*)\" groupNames=\",firstName,lastName\"/>\n    Map<String ,String > m = new HashMap<String, String>();\n    m.put(COLUMN,\"fullName\");\n    m.put(GROUP_NAMES,\",firstName,lastName\");\n    m.put(REGEX,\"(\\\\w*) (\\\\w*) (\\\\w*)\");\n    fields.add(m);\n    Context context = AbstractDataImportHandlerTest.getContext(null, null, null, Context.FULL_DUMP, fields, null);\n    Map<String, Object> src = new HashMap<String, Object>();\n    src.put(\"fullName\", \"Mr Noble Paul\");\n\n    Map<String, Object> result = new RegexTransformer().transformRow(src, context);\n    Assert.assertEquals(\"Noble\", result.get(\"firstName\"));\n    Assert.assertEquals(\"Paul\", result.get(\"lastName\"));\n    src= new HashMap<String, Object>();\n    List<String> l= new ArrayList();\n    l.add(\"Mr Noble Paul\") ;\n    l.add(\"Mr Shalin Mangar\") ;\n    src.put(\"fullName\", l);\n    result = new RegexTransformer().transformRow(src, context);\n    List l1 = (List) result.get(\"firstName\");\n    List l2 = (List) result.get(\"lastName\");\n    Assert.assertEquals(\"Noble\", l1.get(0));\n    Assert.assertEquals(\"Shalin\", l1.get(1));\n    Assert.assertEquals(\"Paul\", l2.get(0));\n    Assert.assertEquals(\"Mangar\", l2.get(1));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["72f7cca1d9eaf9232fb247ff10b18fb6e94d3250"],"594d4ee17b3d941ed34827ca6646e378cf7d8d2a":["fee52c628145c8dc485fb7902217fd0b96d7a237"],"72f7cca1d9eaf9232fb247ff10b18fb6e94d3250":["594d4ee17b3d941ed34827ca6646e378cf7d8d2a"],"fee52c628145c8dc485fb7902217fd0b96d7a237":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["fee52c628145c8dc485fb7902217fd0b96d7a237"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"594d4ee17b3d941ed34827ca6646e378cf7d8d2a":["72f7cca1d9eaf9232fb247ff10b18fb6e94d3250"],"72f7cca1d9eaf9232fb247ff10b18fb6e94d3250":["ad94625fb8d088209f46650c8097196fec67f00c"],"fee52c628145c8dc485fb7902217fd0b96d7a237":["594d4ee17b3d941ed34827ca6646e378cf7d8d2a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}