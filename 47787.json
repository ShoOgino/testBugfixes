{"path":"src/java/org/apache/lucene/queryParser/MultiFieldQueryParser#parse(Version,String[],String[],BooleanClause.Occur[],Analyzer).mjava","commits":[{"id":"ba1116b3450a9c1642c89445d131b37344055245","date":1256329517,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/queryParser/MultiFieldQueryParser#parse(Version,String[],String[],BooleanClause.Occur[],Analyzer).mjava","pathOld":"src/java/org/apache/lucene/queryParser/MultiFieldQueryParser#parse(String[],String[],BooleanClause.Occur[],Analyzer).mjava","sourceNew":"  /**\n   * Parses a query, searching on the fields specified.\n   * Use this if you need to specify certain fields as required,\n   * and others as prohibited.\n   * <p><pre>\n   * Usage:\n   * <code>\n   * String[] query = {\"query1\", \"query2\", \"query3\"};\n   * String[] fields = {\"filename\", \"contents\", \"description\"};\n   * BooleanClause.Occur[] flags = {BooleanClause.Occur.SHOULD,\n   *                BooleanClause.Occur.MUST,\n   *                BooleanClause.Occur.MUST_NOT};\n   * MultiFieldQueryParser.parse(query, fields, flags, analyzer);\n   * </code>\n   * </pre>\n   *<p>\n   * The code above would construct a query:\n   * <pre>\n   * <code>\n   * (filename:query1) +(contents:query2) -(description:query3)\n   * </code>\n   * </pre>\n   *\n   * @param matchVersion Lucene version to match; this is passed through to QueryParser.\n   * @param queries Queries string to parse\n   * @param fields Fields to search on\n   * @param flags Flags describing the fields\n   * @param analyzer Analyzer to use\n   * @throws ParseException if query parsing fails\n   * @throws IllegalArgumentException if the length of the queries, fields,\n   *  and flags array differ\n   */\n  public static Query parse(Version matchVersion, String[] queries, String[] fields, BooleanClause.Occur[] flags,\n      Analyzer analyzer) throws ParseException\n  {\n    if (!(queries.length == fields.length && queries.length == flags.length))\n      throw new IllegalArgumentException(\"queries, fields, and flags array have have different length\");\n    BooleanQuery bQuery = new BooleanQuery();\n    for (int i = 0; i < fields.length; i++)\n    {\n      QueryParser qp = new QueryParser(matchVersion, fields[i], analyzer);\n      Query q = qp.parse(queries[i]);\n      if (q!=null && // q never null, just being defensive\n          (!(q instanceof BooleanQuery) || ((BooleanQuery)q).getClauses().length>0)) {\n        bQuery.add(q, flags[i]);\n      }\n    }\n    return bQuery;\n  }\n\n","sourceOld":"  /**\n   * Parses a query, searching on the fields specified.\n   * Use this if you need to specify certain fields as required,\n   * and others as prohibited.\n   * <p><pre>\n   * Usage:\n   * <code>\n   * String[] query = {\"query1\", \"query2\", \"query3\"};\n   * String[] fields = {\"filename\", \"contents\", \"description\"};\n   * BooleanClause.Occur[] flags = {BooleanClause.Occur.SHOULD,\n   *                BooleanClause.Occur.MUST,\n   *                BooleanClause.Occur.MUST_NOT};\n   * MultiFieldQueryParser.parse(query, fields, flags, analyzer);\n   * </code>\n   * </pre>\n   *<p>\n   * The code above would construct a query:\n   * <pre>\n   * <code>\n   * (filename:query1) +(contents:query2) -(description:query3)\n   * </code>\n   * </pre>\n   *\n   * @param queries Queries string to parse\n   * @param fields Fields to search on\n   * @param flags Flags describing the fields\n   * @param analyzer Analyzer to use\n   * @throws ParseException if query parsing fails\n   * @throws IllegalArgumentException if the length of the queries, fields,\n   *  and flags array differ\n   */\n  public static Query parse(String[] queries, String[] fields, BooleanClause.Occur[] flags,\n      Analyzer analyzer) throws ParseException\n  {\n    if (!(queries.length == fields.length && queries.length == flags.length))\n      throw new IllegalArgumentException(\"queries, fields, and flags array have have different length\");\n    BooleanQuery bQuery = new BooleanQuery();\n    for (int i = 0; i < fields.length; i++)\n    {\n      QueryParser qp = new QueryParser(fields[i], analyzer);\n      Query q = qp.parse(queries[i]);\n      if (q!=null && // q never null, just being defensive\n          (!(q instanceof BooleanQuery) || ((BooleanQuery)q).getClauses().length>0)) {\n        bQuery.add(q, flags[i]);\n      }\n    }\n    return bQuery;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/queryParser/MultiFieldQueryParser#parse(Version,String[],String[],BooleanClause.Occur[],Analyzer).mjava","pathOld":"src/java/org/apache/lucene/queryParser/MultiFieldQueryParser#parse(Version,String[],String[],BooleanClause.Occur[],Analyzer).mjava","sourceNew":"  /**\n   * Parses a query, searching on the fields specified.\n   * Use this if you need to specify certain fields as required,\n   * and others as prohibited.\n   * <p><pre>\n   * Usage:\n   * <code>\n   * String[] query = {\"query1\", \"query2\", \"query3\"};\n   * String[] fields = {\"filename\", \"contents\", \"description\"};\n   * BooleanClause.Occur[] flags = {BooleanClause.Occur.SHOULD,\n   *                BooleanClause.Occur.MUST,\n   *                BooleanClause.Occur.MUST_NOT};\n   * MultiFieldQueryParser.parse(query, fields, flags, analyzer);\n   * </code>\n   * </pre>\n   *<p>\n   * The code above would construct a query:\n   * <pre>\n   * <code>\n   * (filename:query1) +(contents:query2) -(description:query3)\n   * </code>\n   * </pre>\n   *\n   * @param matchVersion Lucene version to match; this is passed through to QueryParser.\n   * @param queries Queries string to parse\n   * @param fields Fields to search on\n   * @param flags Flags describing the fields\n   * @param analyzer Analyzer to use\n   * @throws ParseException if query parsing fails\n   * @throws IllegalArgumentException if the length of the queries, fields,\n   *  and flags array differ\n   */\n  public static Query parse(Version matchVersion, String[] queries, String[] fields, BooleanClause.Occur[] flags,\n      Analyzer analyzer) throws ParseException\n  {\n    if (!(queries.length == fields.length && queries.length == flags.length))\n      throw new IllegalArgumentException(\"queries, fields, and flags array have have different length\");\n    BooleanQuery bQuery = new BooleanQuery();\n    for (int i = 0; i < fields.length; i++)\n    {\n      QueryParser qp = new QueryParser(matchVersion, fields[i], analyzer);\n      Query q = qp.parse(queries[i]);\n      if (q!=null && // q never null, just being defensive\n          (!(q instanceof BooleanQuery) || ((BooleanQuery)q).getClauses().length>0)) {\n        bQuery.add(q, flags[i]);\n      }\n    }\n    return bQuery;\n  }\n\n","sourceOld":"  /**\n   * Parses a query, searching on the fields specified.\n   * Use this if you need to specify certain fields as required,\n   * and others as prohibited.\n   * <p><pre>\n   * Usage:\n   * <code>\n   * String[] query = {\"query1\", \"query2\", \"query3\"};\n   * String[] fields = {\"filename\", \"contents\", \"description\"};\n   * BooleanClause.Occur[] flags = {BooleanClause.Occur.SHOULD,\n   *                BooleanClause.Occur.MUST,\n   *                BooleanClause.Occur.MUST_NOT};\n   * MultiFieldQueryParser.parse(query, fields, flags, analyzer);\n   * </code>\n   * </pre>\n   *<p>\n   * The code above would construct a query:\n   * <pre>\n   * <code>\n   * (filename:query1) +(contents:query2) -(description:query3)\n   * </code>\n   * </pre>\n   *\n   * @param matchVersion Lucene version to match; this is passed through to QueryParser.\n   * @param queries Queries string to parse\n   * @param fields Fields to search on\n   * @param flags Flags describing the fields\n   * @param analyzer Analyzer to use\n   * @throws ParseException if query parsing fails\n   * @throws IllegalArgumentException if the length of the queries, fields,\n   *  and flags array differ\n   */\n  public static Query parse(Version matchVersion, String[] queries, String[] fields, BooleanClause.Occur[] flags,\n      Analyzer analyzer) throws ParseException\n  {\n    if (!(queries.length == fields.length && queries.length == flags.length))\n      throw new IllegalArgumentException(\"queries, fields, and flags array have have different length\");\n    BooleanQuery bQuery = new BooleanQuery();\n    for (int i = 0; i < fields.length; i++)\n    {\n      QueryParser qp = new QueryParser(matchVersion, fields[i], analyzer);\n      Query q = qp.parse(queries[i]);\n      if (q!=null && // q never null, just being defensive\n          (!(q instanceof BooleanQuery) || ((BooleanQuery)q).getClauses().length>0)) {\n        bQuery.add(q, flags[i]);\n      }\n    }\n    return bQuery;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["ba1116b3450a9c1642c89445d131b37344055245"],"ba1116b3450a9c1642c89445d131b37344055245":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ba1116b3450a9c1642c89445d131b37344055245"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ba1116b3450a9c1642c89445d131b37344055245":["9454a6510e2db155fb01faa5c049b06ece95fab9"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}