{"path":"contrib/highlighter/src/java/org/apache/lucene/search/highlight/SpanScorer#getTokenScore(Token).mjava","commits":[{"id":"296b8b38a87feb478921f77834a2302dfe77641c","date":1209506838,"type":0,"author":"Mark Harwood","isMerge":false,"pathNew":"contrib/highlighter/src/java/org/apache/lucene/search/highlight/SpanScorer#getTokenScore(Token).mjava","pathOld":"/dev/null","sourceNew":"  /*\r\n   * (non-Javadoc)\r\n   *\r\n   * @see org.apache.lucene.search.highlight.Scorer#getTokenScore(org.apache.lucene.analysis.Token,\r\n   *      int)\r\n   */\r\n  public float getTokenScore(Token token) {\r\n    position += token.getPositionIncrement();\r\n    String termText = new String(token.termBuffer(), 0, token.termLength());\r\n\r\n    WeightedSpanTerm weightedSpanTerm;\r\n\r\n    if ((weightedSpanTerm = (WeightedSpanTerm) fieldWeightedSpanTerms.get(\r\n              termText)) == null) {\r\n      return 0;\r\n    }\r\n\r\n    if (weightedSpanTerm.positionSensitive &&\r\n          !weightedSpanTerm.checkPosition(position)) {\r\n      return 0;\r\n    }\r\n\r\n    float score = weightedSpanTerm.getWeight();\r\n\r\n    // found a query term - is it unique in this doc?\r\n    if (!foundTerms.contains(termText)) {\r\n      totalScore += score;\r\n      foundTerms.add(termText);\r\n    }\r\n\r\n    return score;\r\n  }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e2cb543b41c145f33390f460ee743d6693c9c6c","date":1219243087,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/highlighter/src/java/org/apache/lucene/search/highlight/SpanScorer#getTokenScore(Token).mjava","pathOld":"contrib/highlighter/src/java/org/apache/lucene/search/highlight/SpanScorer#getTokenScore(Token).mjava","sourceNew":"  /*\r\n   * (non-Javadoc)\r\n   *\r\n   * @see org.apache.lucene.search.highlight.Scorer#getTokenScore(org.apache.lucene.analysis.Token,\r\n   *      int)\r\n   */\r\n  public float getTokenScore(Token token) {\r\n    position += token.getPositionIncrement();\r\n    String termText = token.term();\r\n\r\n    WeightedSpanTerm weightedSpanTerm;\r\n\r\n    if ((weightedSpanTerm = (WeightedSpanTerm) fieldWeightedSpanTerms.get(\r\n              termText)) == null) {\r\n      return 0;\r\n    }\r\n\r\n    if (weightedSpanTerm.positionSensitive &&\r\n          !weightedSpanTerm.checkPosition(position)) {\r\n      return 0;\r\n    }\r\n\r\n    float score = weightedSpanTerm.getWeight();\r\n\r\n    // found a query term - is it unique in this doc?\r\n    if (!foundTerms.contains(termText)) {\r\n      totalScore += score;\r\n      foundTerms.add(termText);\r\n    }\r\n\r\n    return score;\r\n  }\r\n\n","sourceOld":"  /*\r\n   * (non-Javadoc)\r\n   *\r\n   * @see org.apache.lucene.search.highlight.Scorer#getTokenScore(org.apache.lucene.analysis.Token,\r\n   *      int)\r\n   */\r\n  public float getTokenScore(Token token) {\r\n    position += token.getPositionIncrement();\r\n    String termText = new String(token.termBuffer(), 0, token.termLength());\r\n\r\n    WeightedSpanTerm weightedSpanTerm;\r\n\r\n    if ((weightedSpanTerm = (WeightedSpanTerm) fieldWeightedSpanTerms.get(\r\n              termText)) == null) {\r\n      return 0;\r\n    }\r\n\r\n    if (weightedSpanTerm.positionSensitive &&\r\n          !weightedSpanTerm.checkPosition(position)) {\r\n      return 0;\r\n    }\r\n\r\n    float score = weightedSpanTerm.getWeight();\r\n\r\n    // found a query term - is it unique in this doc?\r\n    if (!foundTerms.contains(termText)) {\r\n      totalScore += score;\r\n      foundTerms.add(termText);\r\n    }\r\n\r\n    return score;\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6a361a621b184d9b73c9c9a37323a9845b8f8260","date":1226370946,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"contrib/highlighter/src/java/org/apache/lucene/search/highlight/SpanScorer#getTokenScore(Token).mjava","pathOld":"contrib/highlighter/src/java/org/apache/lucene/search/highlight/SpanScorer#getTokenScore(Token).mjava","sourceNew":"  /*\n   * (non-Javadoc)\n   *\n   * @see org.apache.lucene.search.highlight.Scorer#getTokenScore(org.apache.lucene.analysis.Token,\n   *      int)\n   */\n  public float getTokenScore(Token token) {\n    position += token.getPositionIncrement();\n    String termText = token.term();\n\n    WeightedSpanTerm weightedSpanTerm;\n\n    if ((weightedSpanTerm = (WeightedSpanTerm) fieldWeightedSpanTerms.get(\n              termText)) == null) {\n      return 0;\n    }\n\n    if (weightedSpanTerm.positionSensitive &&\n          !weightedSpanTerm.checkPosition(position)) {\n      return 0;\n    }\n\n    float score = weightedSpanTerm.getWeight();\n\n    // found a query term - is it unique in this doc?\n    if (!foundTerms.contains(termText)) {\n      totalScore += score;\n      foundTerms.add(termText);\n    }\n\n    return score;\n  }\n\n","sourceOld":"  /*\r\n   * (non-Javadoc)\r\n   *\r\n   * @see org.apache.lucene.search.highlight.Scorer#getTokenScore(org.apache.lucene.analysis.Token,\r\n   *      int)\r\n   */\r\n  public float getTokenScore(Token token) {\r\n    position += token.getPositionIncrement();\r\n    String termText = token.term();\r\n\r\n    WeightedSpanTerm weightedSpanTerm;\r\n\r\n    if ((weightedSpanTerm = (WeightedSpanTerm) fieldWeightedSpanTerms.get(\r\n              termText)) == null) {\r\n      return 0;\r\n    }\r\n\r\n    if (weightedSpanTerm.positionSensitive &&\r\n          !weightedSpanTerm.checkPosition(position)) {\r\n      return 0;\r\n    }\r\n\r\n    float score = weightedSpanTerm.getWeight();\r\n\r\n    // found a query term - is it unique in this doc?\r\n    if (!foundTerms.contains(termText)) {\r\n      totalScore += score;\r\n      foundTerms.add(termText);\r\n    }\r\n\r\n    return score;\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b4471b2ef75c0e11869f60b23cabe292b895c3ee","date":1248991247,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"contrib/highlighter/src/java/org/apache/lucene/search/highlight/SpanScorer#getTokenScore().mjava","pathOld":"contrib/highlighter/src/java/org/apache/lucene/search/highlight/SpanScorer#getTokenScore(Token).mjava","sourceNew":"  /*\n   * (non-Javadoc)\n   *\n   * @see org.apache.lucene.search.highlight.Scorer#getTokenScore(org.apache.lucene.analysis.Token,\n   *      int)\n   */\n  public float getTokenScore() {\n    position += posIncAtt.getPositionIncrement();\n    String termText = termAtt.term();\n\n    WeightedSpanTerm weightedSpanTerm;\n\n    if ((weightedSpanTerm = (WeightedSpanTerm) fieldWeightedSpanTerms.get(\n              termText)) == null) {\n      return 0;\n    }\n\n    if (weightedSpanTerm.positionSensitive &&\n          !weightedSpanTerm.checkPosition(position)) {\n      return 0;\n    }\n\n    float score = weightedSpanTerm.getWeight();\n\n    // found a query term - is it unique in this doc?\n    if (!foundTerms.contains(termText)) {\n      totalScore += score;\n      foundTerms.add(termText);\n    }\n\n    return score;\n  }\n\n","sourceOld":"  /*\n   * (non-Javadoc)\n   *\n   * @see org.apache.lucene.search.highlight.Scorer#getTokenScore(org.apache.lucene.analysis.Token,\n   *      int)\n   */\n  public float getTokenScore(Token token) {\n    position += token.getPositionIncrement();\n    String termText = token.term();\n\n    WeightedSpanTerm weightedSpanTerm;\n\n    if ((weightedSpanTerm = (WeightedSpanTerm) fieldWeightedSpanTerms.get(\n              termText)) == null) {\n      return 0;\n    }\n\n    if (weightedSpanTerm.positionSensitive &&\n          !weightedSpanTerm.checkPosition(position)) {\n      return 0;\n    }\n\n    float score = weightedSpanTerm.getWeight();\n\n    // found a query term - is it unique in this doc?\n    if (!foundTerms.contains(termText)) {\n      totalScore += score;\n      foundTerms.add(termText);\n    }\n\n    return score;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7e2cb543b41c145f33390f460ee743d6693c9c6c":["296b8b38a87feb478921f77834a2302dfe77641c"],"b4471b2ef75c0e11869f60b23cabe292b895c3ee":["6a361a621b184d9b73c9c9a37323a9845b8f8260"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6a361a621b184d9b73c9c9a37323a9845b8f8260":["7e2cb543b41c145f33390f460ee743d6693c9c6c"],"296b8b38a87feb478921f77834a2302dfe77641c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b4471b2ef75c0e11869f60b23cabe292b895c3ee"]},"commit2Childs":{"7e2cb543b41c145f33390f460ee743d6693c9c6c":["6a361a621b184d9b73c9c9a37323a9845b8f8260"],"b4471b2ef75c0e11869f60b23cabe292b895c3ee":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["296b8b38a87feb478921f77834a2302dfe77641c"],"6a361a621b184d9b73c9c9a37323a9845b8f8260":["b4471b2ef75c0e11869f60b23cabe292b895c3ee"],"296b8b38a87feb478921f77834a2302dfe77641c":["7e2cb543b41c145f33390f460ee743d6693c9c6c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}