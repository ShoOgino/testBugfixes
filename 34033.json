{"path":"lucene/test-framework/src/java/org/apache/lucene/store/BaseDirectoryTestCase#testCopyBytesWithThreads().mjava","commits":[{"id":"c15a75016387504d70a40cba6e9314b8885307f0","date":1397542349,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/BaseDirectoryTestCase#testCopyBytesWithThreads().mjava","pathOld":"/dev/null","sourceNew":"  // LUCENE-3541\n  public void testCopyBytesWithThreads() throws Exception {\n    testCopyBytesWithThreads(getDirectory(createTempDir(\"testCopyBytesWithThreads\")));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f3adea0022cffaaa592081efed775a7b8bf86b51","date":1532414870,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/BaseDirectoryTestCase#testCopyBytesWithThreads().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/BaseDirectoryTestCase#testCopyBytesWithThreads().mjava","sourceNew":"  // LUCENE-3541\n  public void testCopyBytesWithThreads() throws Exception {\n    try (Directory d = getDirectory(createTempDir(\"testCopyBytesWithThreads\"))) {\n      byte data[] = RandomBytes.randomBytesOfLengthBetween(random(), 101, 10000);\n\n      IndexOutput output = d.createOutput(\"data\", IOContext.DEFAULT);\n      output.writeBytes(data, 0, data.length);\n      output.close();\n\n      IndexInput input = d.openInput(\"data\", IOContext.DEFAULT);\n      IndexOutput outputHeader = d.createOutput(\"header\", IOContext.DEFAULT);\n      // copy our 100-byte header\n      outputHeader.copyBytes(input, 100);\n      outputHeader.close();\n\n      // now make N copies of the remaining bytes\n      int threads = 10;\n      CyclicBarrier start = new CyclicBarrier(threads);\n      Thread copies [] = IntStream.range(0, threads)\n          .mapToObj((i) -> {\n            IndexInput src = input.clone();\n            Thread t = new Thread(() -> {\n              try {\n                start.await();\n                IndexOutput dst = d.createOutput(\"copy\" + i, IOContext.DEFAULT);\n                dst.copyBytes(src, src.length() - 100);\n                dst.close();\n              } catch (Exception e) {\n                throw new RuntimeException(e);\n              }\n            });\n            t.start();\n            return t;\n          })\n          .toArray(Thread[]::new);\n\n      for (Thread t : copies) {\n        t.join();\n      }\n\n      for (int i = 0; i < threads; i++) {\n        try (IndexInput copiedData = d.openInput(\"copy\" + i, IOContext.DEFAULT)) {\n          byte[] dataCopy = new byte[data.length];\n          System.arraycopy(data, 0, dataCopy, 0, 100);\n          copiedData.readBytes(dataCopy, 100, data.length - 100);\n          assertArrayEquals(data, dataCopy);\n        }\n      }\n      input.close();\n    }\n  }\n\n","sourceOld":"  // LUCENE-3541\n  public void testCopyBytesWithThreads() throws Exception {\n    testCopyBytesWithThreads(getDirectory(createTempDir(\"testCopyBytesWithThreads\")));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"409da428f28953cf35fddd5c9ff5c7e4f5439863","date":1547556145,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/BaseDirectoryTestCase#testCopyBytesWithThreads().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/BaseDirectoryTestCase#testCopyBytesWithThreads().mjava","sourceNew":"  // LUCENE-3541\n  public void testCopyBytesWithThreads() throws Exception {\n    try (Directory d = getDirectory(createTempDir(\"testCopyBytesWithThreads\"))) {\n      int headerLen = 100;\n      byte data[] = RandomBytes.randomBytesOfLengthBetween(random(), headerLen + 1, 10000);\n\n      IndexOutput output = d.createOutput(\"data\", IOContext.DEFAULT);\n      output.writeBytes(data, 0, data.length);\n      output.close();\n\n      IndexInput input = d.openInput(\"data\", IOContext.DEFAULT);\n      IndexOutput outputHeader = d.createOutput(\"header\", IOContext.DEFAULT);\n      // copy our header\n      outputHeader.copyBytes(input, headerLen);\n      outputHeader.close();\n\n      // now make N copies of the remaining bytes\n      int threads = 10;\n      CyclicBarrier start = new CyclicBarrier(threads);\n      Thread copies [] = IntStream.range(0, threads)\n          .mapToObj((i) -> {\n            IndexInput src = input.clone();\n            Thread t = new Thread(() -> {\n              try {\n                start.await();\n                IndexOutput dst = d.createOutput(\"copy\" + i, IOContext.DEFAULT);\n                dst.copyBytes(src, src.length() - headerLen);\n                dst.close();\n              } catch (Exception e) {\n                throw new RuntimeException(e);\n              }\n            });\n            t.start();\n            return t;\n          })\n          .toArray(Thread[]::new);\n\n      for (Thread t : copies) {\n        t.join();\n      }\n\n      for (int i = 0; i < threads; i++) {\n        try (IndexInput copiedData = d.openInput(\"copy\" + i, IOContext.DEFAULT)) {\n          byte[] dataCopy = new byte[data.length];\n          System.arraycopy(data, 0, dataCopy, 0, headerLen);\n          copiedData.readBytes(dataCopy, headerLen, data.length - headerLen);\n          assertArrayEquals(data, dataCopy);\n        }\n      }\n      input.close();\n    }\n  }\n\n","sourceOld":"  // LUCENE-3541\n  public void testCopyBytesWithThreads() throws Exception {\n    try (Directory d = getDirectory(createTempDir(\"testCopyBytesWithThreads\"))) {\n      byte data[] = RandomBytes.randomBytesOfLengthBetween(random(), 101, 10000);\n\n      IndexOutput output = d.createOutput(\"data\", IOContext.DEFAULT);\n      output.writeBytes(data, 0, data.length);\n      output.close();\n\n      IndexInput input = d.openInput(\"data\", IOContext.DEFAULT);\n      IndexOutput outputHeader = d.createOutput(\"header\", IOContext.DEFAULT);\n      // copy our 100-byte header\n      outputHeader.copyBytes(input, 100);\n      outputHeader.close();\n\n      // now make N copies of the remaining bytes\n      int threads = 10;\n      CyclicBarrier start = new CyclicBarrier(threads);\n      Thread copies [] = IntStream.range(0, threads)\n          .mapToObj((i) -> {\n            IndexInput src = input.clone();\n            Thread t = new Thread(() -> {\n              try {\n                start.await();\n                IndexOutput dst = d.createOutput(\"copy\" + i, IOContext.DEFAULT);\n                dst.copyBytes(src, src.length() - 100);\n                dst.close();\n              } catch (Exception e) {\n                throw new RuntimeException(e);\n              }\n            });\n            t.start();\n            return t;\n          })\n          .toArray(Thread[]::new);\n\n      for (Thread t : copies) {\n        t.join();\n      }\n\n      for (int i = 0; i < threads; i++) {\n        try (IndexInput copiedData = d.openInput(\"copy\" + i, IOContext.DEFAULT)) {\n          byte[] dataCopy = new byte[data.length];\n          System.arraycopy(data, 0, dataCopy, 0, 100);\n          copiedData.readBytes(dataCopy, 100, data.length - 100);\n          assertArrayEquals(data, dataCopy);\n        }\n      }\n      input.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"409da428f28953cf35fddd5c9ff5c7e4f5439863":["f3adea0022cffaaa592081efed775a7b8bf86b51"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c15a75016387504d70a40cba6e9314b8885307f0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f3adea0022cffaaa592081efed775a7b8bf86b51":["c15a75016387504d70a40cba6e9314b8885307f0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["409da428f28953cf35fddd5c9ff5c7e4f5439863"]},"commit2Childs":{"409da428f28953cf35fddd5c9ff5c7e4f5439863":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c15a75016387504d70a40cba6e9314b8885307f0"],"c15a75016387504d70a40cba6e9314b8885307f0":["f3adea0022cffaaa592081efed775a7b8bf86b51"],"f3adea0022cffaaa592081efed775a7b8bf86b51":["409da428f28953cf35fddd5c9ff5c7e4f5439863"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}