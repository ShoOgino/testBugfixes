{"path":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testPostings(AtomicReader,PrintStream,boolean).mjava","commits":[{"id":"e99275efa2c9c9ae3bdba986218af82f2bf3dc30","date":1354658499,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testPostings(AtomicReader,PrintStream,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testPostings(FieldInfos,SegmentReader).mjava","sourceNew":"  /**\n   * Test the term index.\n   * @lucene.experimental\n   */\n  public static Status.TermIndexStatus testPostings(AtomicReader reader, PrintStream infoStream, boolean verbose) {\n\n    // TODO: we should go and verify term vectors match, if\n    // crossCheckTermVectors is on...\n\n    Status.TermIndexStatus status;\n    final int maxDoc = reader.maxDoc();\n    final Bits liveDocs = reader.getLiveDocs();\n\n    try {\n      if (infoStream != null) {\n        infoStream.print(\"    test: terms, freq, prox...\");\n      }\n\n      final Fields fields = reader.fields();\n      final FieldInfos fieldInfos = reader.getFieldInfos();\n      status = checkFields(fields, liveDocs, maxDoc, fieldInfos, true, false, infoStream, verbose);\n      if (liveDocs != null) {\n        if (infoStream != null) {\n          infoStream.print(\"    test (ignoring deletes): terms, freq, prox...\");\n        }\n        checkFields(fields, null, maxDoc, fieldInfos, true, false, infoStream, verbose);\n      }\n    } catch (Throwable e) {\n      msg(infoStream, \"ERROR: \" + e);\n      status = new Status.TermIndexStatus();\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","sourceOld":"  /**\n   * Test the term index.\n   */\n  private Status.TermIndexStatus testPostings(FieldInfos fieldInfos, SegmentReader reader) {\n\n    // TODO: we should go and verify term vectors match, if\n    // crossCheckTermVectors is on...\n\n    Status.TermIndexStatus status;\n    final int maxDoc = reader.maxDoc();\n    final Bits liveDocs = reader.getLiveDocs();\n\n    try {\n      if (infoStream != null) {\n        infoStream.print(\"    test: terms, freq, prox...\");\n      }\n\n      final Fields fields = reader.fields();\n      status = checkFields(fields, liveDocs, maxDoc, fieldInfos, true, false);\n      if (liveDocs != null) {\n        if (infoStream != null) {\n          infoStream.print(\"    test (ignoring deletes): terms, freq, prox...\");\n        }\n        checkFields(fields, null, maxDoc, fieldInfos, true, false);\n      }\n    } catch (Throwable e) {\n      msg(\"ERROR: \" + e);\n      status = new Status.TermIndexStatus();\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testPostings(AtomicReader,PrintStream,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Test the term index.\n   * @lucene.experimental\n   */\n  public static Status.TermIndexStatus testPostings(AtomicReader reader, PrintStream infoStream, boolean verbose) {\n\n    // TODO: we should go and verify term vectors match, if\n    // crossCheckTermVectors is on...\n\n    Status.TermIndexStatus status;\n    final int maxDoc = reader.maxDoc();\n    final Bits liveDocs = reader.getLiveDocs();\n\n    try {\n      if (infoStream != null) {\n        infoStream.print(\"    test: terms, freq, prox...\");\n      }\n\n      final Fields fields = reader.fields();\n      final FieldInfos fieldInfos = reader.getFieldInfos();\n      status = checkFields(fields, liveDocs, maxDoc, fieldInfos, true, false, infoStream, verbose);\n      if (liveDocs != null) {\n        if (infoStream != null) {\n          infoStream.print(\"    test (ignoring deletes): terms, freq, prox...\");\n        }\n        checkFields(fields, null, maxDoc, fieldInfos, true, false, infoStream, verbose);\n      }\n    } catch (Throwable e) {\n      msg(infoStream, \"ERROR: \" + e);\n      status = new Status.TermIndexStatus();\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0cdf9cc6702d60334a616bd7db3ae91501d1dce7","date":1405858112,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testPostings(AtomicReader,PrintStream,boolean,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testPostings(AtomicReader,PrintStream,boolean).mjava","sourceNew":"  /**\n   * Test the term index.\n   * @lucene.experimental\n   */\n  public static Status.TermIndexStatus testPostings(AtomicReader reader, PrintStream infoStream, boolean verbose, boolean failFast) throws IOException {\n\n    // TODO: we should go and verify term vectors match, if\n    // crossCheckTermVectors is on...\n\n    Status.TermIndexStatus status;\n    final int maxDoc = reader.maxDoc();\n    final Bits liveDocs = reader.getLiveDocs();\n\n    try {\n      if (infoStream != null) {\n        infoStream.print(\"    test: terms, freq, prox...\");\n      }\n\n      final Fields fields = reader.fields();\n      final FieldInfos fieldInfos = reader.getFieldInfos();\n      status = checkFields(fields, liveDocs, maxDoc, fieldInfos, true, false, infoStream, verbose);\n      if (liveDocs != null) {\n        if (infoStream != null) {\n          infoStream.print(\"    test (ignoring deletes): terms, freq, prox...\");\n        }\n        checkFields(fields, null, maxDoc, fieldInfos, true, false, infoStream, verbose);\n      }\n    } catch (Throwable e) {\n      if (failFast) {\n        IOUtils.reThrow(e);\n      }\n      msg(infoStream, \"ERROR: \" + e);\n      status = new Status.TermIndexStatus();\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","sourceOld":"  /**\n   * Test the term index.\n   * @lucene.experimental\n   */\n  public static Status.TermIndexStatus testPostings(AtomicReader reader, PrintStream infoStream, boolean verbose) {\n\n    // TODO: we should go and verify term vectors match, if\n    // crossCheckTermVectors is on...\n\n    Status.TermIndexStatus status;\n    final int maxDoc = reader.maxDoc();\n    final Bits liveDocs = reader.getLiveDocs();\n\n    try {\n      if (infoStream != null) {\n        infoStream.print(\"    test: terms, freq, prox...\");\n      }\n\n      final Fields fields = reader.fields();\n      final FieldInfos fieldInfos = reader.getFieldInfos();\n      status = checkFields(fields, liveDocs, maxDoc, fieldInfos, true, false, infoStream, verbose);\n      if (liveDocs != null) {\n        if (infoStream != null) {\n          infoStream.print(\"    test (ignoring deletes): terms, freq, prox...\");\n        }\n        checkFields(fields, null, maxDoc, fieldInfos, true, false, infoStream, verbose);\n      }\n    } catch (Throwable e) {\n      msg(infoStream, \"ERROR: \" + e);\n      status = new Status.TermIndexStatus();\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0cdf9cc6702d60334a616bd7db3ae91501d1dce7":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e99275efa2c9c9ae3bdba986218af82f2bf3dc30"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e99275efa2c9c9ae3bdba986218af82f2bf3dc30":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0cdf9cc6702d60334a616bd7db3ae91501d1dce7"]},"commit2Childs":{"0cdf9cc6702d60334a616bd7db3ae91501d1dce7":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["0cdf9cc6702d60334a616bd7db3ae91501d1dce7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d4d69c535930b5cce125cff868d40f6373dc27d4","e99275efa2c9c9ae3bdba986218af82f2bf3dc30"],"e99275efa2c9c9ae3bdba986218af82f2bf3dc30":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}