{"path":"src/webapp/src/org/apache/solr/servlet/cache/HttpCacheHeaderUtil#calcLastModified(SolrQueryRequest).mjava","commits":[{"id":"b920ba0b6285c3aaa7a64d1677f5b4ee58b0779d","date":1203633859,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/webapp/src/org/apache/solr/servlet/cache/HttpCacheHeaderUtil#calcLastModified(SolrQueryRequest).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Calculate the appropriate last-modified time for Solr relative the current request.\n   * \n   * @param solrReq\n   * @return the timestamp to use as a last modified time.\n   */\n  public static long calcLastModified(final SolrQueryRequest solrReq) {\n    final SolrCore core = solrReq.getCore();\n    final SolrIndexSearcher searcher = solrReq.getSearcher();\n    \n    final LastModFrom lastModFrom\n      = core.getSolrConfig().getHttpCachingConfig().getLastModFrom();\n\n    long lastMod;\n    try {\n      // assume default, change if needed (getOpenTime() should be fast)\n      lastMod =\n        LastModFrom.DIRLASTMOD == lastModFrom\n        ? IndexReader.lastModified(searcher.getReader().directory())\n        : searcher.getOpenTime();\n    } catch (IOException e) {\n      // we're pretty freaking screwed if this happens\n      throw new SolrException(ErrorCode.SERVER_ERROR, e);\n    }\n    // Get the time where the searcher has been opened\n    // We get rid of the milliseconds because the HTTP header has only\n    // second granularity\n    return lastMod - (lastMod % 1000L);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/webapp/src/org/apache/solr/servlet/cache/HttpCacheHeaderUtil#calcLastModified(SolrQueryRequest).mjava","pathOld":"src/webapp/src/org/apache/solr/servlet/cache/HttpCacheHeaderUtil#calcLastModified(SolrQueryRequest).mjava","sourceNew":"  /**\n   * Calculate the appropriate last-modified time for Solr relative the current request.\n   * \n   * @param solrReq\n   * @return the timestamp to use as a last modified time.\n   */\n  public static long calcLastModified(final SolrQueryRequest solrReq) {\n    final SolrCore core = solrReq.getCore();\n    final SolrIndexSearcher searcher = solrReq.getSearcher();\n    \n    final LastModFrom lastModFrom\n      = core.getSolrConfig().getHttpCachingConfig().getLastModFrom();\n\n    long lastMod;\n    try {\n      // assume default, change if needed (getOpenTime() should be fast)\n      lastMod =\n        LastModFrom.DIRLASTMOD == lastModFrom\n        ? IndexReader.lastModified(searcher.getReader().directory())\n        : searcher.getOpenTime();\n    } catch (IOException e) {\n      // we're pretty freaking screwed if this happens\n      throw new SolrException(ErrorCode.SERVER_ERROR, e);\n    }\n    // Get the time where the searcher has been opened\n    // We get rid of the milliseconds because the HTTP header has only\n    // second granularity\n    return lastMod - (lastMod % 1000L);\n  }\n\n","sourceOld":"  /**\n   * Calculate the appropriate last-modified time for Solr relative the current request.\n   * \n   * @param solrReq\n   * @return the timestamp to use as a last modified time.\n   */\n  public static long calcLastModified(final SolrQueryRequest solrReq) {\n    final SolrCore core = solrReq.getCore();\n    final SolrIndexSearcher searcher = solrReq.getSearcher();\n    \n    final LastModFrom lastModFrom\n      = core.getSolrConfig().getHttpCachingConfig().getLastModFrom();\n\n    long lastMod;\n    try {\n      // assume default, change if needed (getOpenTime() should be fast)\n      lastMod =\n        LastModFrom.DIRLASTMOD == lastModFrom\n        ? IndexReader.lastModified(searcher.getReader().directory())\n        : searcher.getOpenTime();\n    } catch (IOException e) {\n      // we're pretty freaking screwed if this happens\n      throw new SolrException(ErrorCode.SERVER_ERROR, e);\n    }\n    // Get the time where the searcher has been opened\n    // We get rid of the milliseconds because the HTTP header has only\n    // second granularity\n    return lastMod - (lastMod % 1000L);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"b920ba0b6285c3aaa7a64d1677f5b4ee58b0779d":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"ad94625fb8d088209f46650c8097196fec67f00c":["b920ba0b6285c3aaa7a64d1677f5b4ee58b0779d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["b920ba0b6285c3aaa7a64d1677f5b4ee58b0779d"],"b920ba0b6285c3aaa7a64d1677f5b4ee58b0779d":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}