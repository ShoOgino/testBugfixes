{"path":"lucene/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#testImmediateDiskFullWithThreads().mjava","commits":[{"id":"84b590669deb3d3a471cec6cb13b104b2ee94418","date":1288889547,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#testImmediateDiskFullWithThreads().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testImmediateDiskFullWithThreads().mjava","sourceNew":"  // LUCENE-1130: make sure immediate disk full on creating\n  // an IndexWriter (hit during DW.ThreadState.init()), with\n  // multiple threads, is OK:\n  public void testImmediateDiskFullWithThreads() throws Exception {\n\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<10;iter++) {\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriterConfig conf = newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(2).setMergeScheduler(new ConcurrentMergeScheduler());\n      // We expect disk full exceptions in the merge threads\n      ((ConcurrentMergeScheduler) conf.getMergeScheduler()).setSuppressExceptions();\n      IndexWriter writer = new IndexWriter(dir, conf);\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(4);\n      dir.setMaxSizeInBytes(4*1024+20*iter);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, true);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        // Without fix for LUCENE-1130: one of the\n        // threads will hang\n        threads[i].join();\n        assertTrue(\"hit unexpected Throwable\", threads[i].error == null);\n      }\n\n      // Make sure once disk space is avail again, we can\n      // cleanly close:\n      dir.setMaxSizeInBytes(0);\n      writer.close(false);\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // LUCENE-1130: make sure immediate disk full on creating\n  // an IndexWriter (hit during DW.ThreadState.init()), with\n  // multiple threads, is OK:\n  public void testImmediateDiskFullWithThreads() throws Exception {\n\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<10;iter++) {\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriterConfig conf = newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(2).setMergeScheduler(new ConcurrentMergeScheduler());\n      // We expect disk full exceptions in the merge threads\n      ((ConcurrentMergeScheduler) conf.getMergeScheduler()).setSuppressExceptions();\n      IndexWriter writer = new IndexWriter(dir, conf);\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(4);\n      dir.setMaxSizeInBytes(4*1024+20*iter);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, true);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        // Without fix for LUCENE-1130: one of the\n        // threads will hang\n        threads[i].join();\n        assertTrue(\"hit unexpected Throwable\", threads[i].error == null);\n      }\n\n      // Make sure once disk space is avail again, we can\n      // cleanly close:\n      dir.setMaxSizeInBytes(0);\n      writer.close(false);\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85a883878c0af761245ab048babc63d099f835f3","date":1289553330,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#testImmediateDiskFullWithThreads().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testImmediateDiskFullWithThreads().mjava","sourceNew":"  // LUCENE-1130: make sure immediate disk full on creating\n  // an IndexWriter (hit during DW.ThreadState.init()), with\n  // multiple threads, is OK:\n  public void testImmediateDiskFullWithThreads() throws Exception {\n\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<10;iter++) {\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriterConfig conf = newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(2).setMergeScheduler(new ConcurrentMergeScheduler());\n      // We expect disk full exceptions in the merge threads\n      ((ConcurrentMergeScheduler) conf.getMergeScheduler()).setSuppressExceptions();\n      IndexWriter writer = new IndexWriter(dir, conf);\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(4);\n      dir.setMaxSizeInBytes(4*1024+20*iter);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, true);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        // Without fix for LUCENE-1130: one of the\n        // threads will hang\n        threads[i].join();\n        assertTrue(\"hit unexpected Throwable\", threads[i].error == null);\n      }\n\n      // Make sure once disk space is avail again, we can\n      // cleanly close:\n      dir.setMaxSizeInBytes(0);\n      writer.close(false);\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // LUCENE-1130: make sure immediate disk full on creating\n  // an IndexWriter (hit during DW.ThreadState.init()), with\n  // multiple threads, is OK:\n  public void testImmediateDiskFullWithThreads() throws Exception {\n\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<10;iter++) {\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriterConfig conf = newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(2).setMergeScheduler(new ConcurrentMergeScheduler());\n      // We expect disk full exceptions in the merge threads\n      ((ConcurrentMergeScheduler) conf.getMergeScheduler()).setSuppressExceptions();\n      IndexWriter writer = new IndexWriter(dir, conf);\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(4);\n      dir.setMaxSizeInBytes(4*1024+20*iter);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, true);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        // Without fix for LUCENE-1130: one of the\n        // threads will hang\n        threads[i].join();\n        assertTrue(\"hit unexpected Throwable\", threads[i].error == null);\n      }\n\n      // Make sure once disk space is avail again, we can\n      // cleanly close:\n      dir.setMaxSizeInBytes(0);\n      writer.close(false);\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e8cc373c801e54cec75daf9f52792cb4b17f536","date":1291116159,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#testImmediateDiskFullWithThreads().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#testImmediateDiskFullWithThreads().mjava","sourceNew":"  // LUCENE-1130: make sure immediate disk full on creating\n  // an IndexWriter (hit during DW.ThreadState.init()), with\n  // multiple threads, is OK:\n  public void testImmediateDiskFullWithThreads() throws Exception {\n\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<10;iter++) {\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n              setMaxBufferedDocs(2).\n              setMergeScheduler(new ConcurrentMergeScheduler()).\n              setMergePolicy(newLogMergePolicy(4))\n      );\n      ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n      dir.setMaxSizeInBytes(4*1024+20*iter);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, true);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        // Without fix for LUCENE-1130: one of the\n        // threads will hang\n        threads[i].join();\n        assertTrue(\"hit unexpected Throwable\", threads[i].error == null);\n      }\n\n      // Make sure once disk space is avail again, we can\n      // cleanly close:\n      dir.setMaxSizeInBytes(0);\n      writer.close(false);\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // LUCENE-1130: make sure immediate disk full on creating\n  // an IndexWriter (hit during DW.ThreadState.init()), with\n  // multiple threads, is OK:\n  public void testImmediateDiskFullWithThreads() throws Exception {\n\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<10;iter++) {\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriterConfig conf = newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(2).setMergeScheduler(new ConcurrentMergeScheduler());\n      // We expect disk full exceptions in the merge threads\n      ((ConcurrentMergeScheduler) conf.getMergeScheduler()).setSuppressExceptions();\n      IndexWriter writer = new IndexWriter(dir, conf);\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(4);\n      dir.setMaxSizeInBytes(4*1024+20*iter);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, true);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        // Without fix for LUCENE-1130: one of the\n        // threads will hang\n        threads[i].join();\n        assertTrue(\"hit unexpected Throwable\", threads[i].error == null);\n      }\n\n      // Make sure once disk space is avail again, we can\n      // cleanly close:\n      dir.setMaxSizeInBytes(0);\n      writer.close(false);\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#testImmediateDiskFullWithThreads().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#testImmediateDiskFullWithThreads().mjava","sourceNew":"  // LUCENE-1130: make sure immediate disk full on creating\n  // an IndexWriter (hit during DW.ThreadState.init()), with\n  // multiple threads, is OK:\n  public void testImmediateDiskFullWithThreads() throws Exception {\n\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<10;iter++) {\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n              setMaxBufferedDocs(2).\n              setMergeScheduler(new ConcurrentMergeScheduler()).\n              setMergePolicy(newLogMergePolicy(4))\n      );\n      ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n      dir.setMaxSizeInBytes(4*1024+20*iter);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, true);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        // Without fix for LUCENE-1130: one of the\n        // threads will hang\n        threads[i].join();\n        assertTrue(\"hit unexpected Throwable\", threads[i].error == null);\n      }\n\n      // Make sure once disk space is avail again, we can\n      // cleanly close:\n      dir.setMaxSizeInBytes(0);\n      writer.close(false);\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // LUCENE-1130: make sure immediate disk full on creating\n  // an IndexWriter (hit during DW.ThreadState.init()), with\n  // multiple threads, is OK:\n  public void testImmediateDiskFullWithThreads() throws Exception {\n\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<10;iter++) {\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriterConfig conf = newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(2).setMergeScheduler(new ConcurrentMergeScheduler());\n      // We expect disk full exceptions in the merge threads\n      ((ConcurrentMergeScheduler) conf.getMergeScheduler()).setSuppressExceptions();\n      IndexWriter writer = new IndexWriter(dir, conf);\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(4);\n      dir.setMaxSizeInBytes(4*1024+20*iter);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, true);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        // Without fix for LUCENE-1130: one of the\n        // threads will hang\n        threads[i].join();\n        assertTrue(\"hit unexpected Throwable\", threads[i].error == null);\n      }\n\n      // Make sure once disk space is avail again, we can\n      // cleanly close:\n      dir.setMaxSizeInBytes(0);\n      writer.close(false);\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"44fcbde6fb2ac44ee3b45e013e54a42911e689ff","date":1292065621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#testImmediateDiskFullWithThreads().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#testImmediateDiskFullWithThreads().mjava","sourceNew":"  // LUCENE-1130: make sure immediate disk full on creating\n  // an IndexWriter (hit during DW.ThreadState.init()), with\n  // multiple threads, is OK:\n  public void testImmediateDiskFullWithThreads() throws Exception {\n\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<10;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter);\n      }\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n              setMaxBufferedDocs(2).\n              setMergeScheduler(new ConcurrentMergeScheduler()).\n              setMergePolicy(newLogMergePolicy(4))\n      );\n      ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n      dir.setMaxSizeInBytes(4*1024+20*iter);\n      writer.setInfoStream(VERBOSE ? System.out : null);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, true);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        // Without fix for LUCENE-1130: one of the\n        // threads will hang\n        threads[i].join();\n        assertTrue(\"hit unexpected Throwable\", threads[i].error == null);\n      }\n\n      // Make sure once disk space is avail again, we can\n      // cleanly close:\n      dir.setMaxSizeInBytes(0);\n      writer.close(false);\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // LUCENE-1130: make sure immediate disk full on creating\n  // an IndexWriter (hit during DW.ThreadState.init()), with\n  // multiple threads, is OK:\n  public void testImmediateDiskFullWithThreads() throws Exception {\n\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<10;iter++) {\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n              setMaxBufferedDocs(2).\n              setMergeScheduler(new ConcurrentMergeScheduler()).\n              setMergePolicy(newLogMergePolicy(4))\n      );\n      ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n      dir.setMaxSizeInBytes(4*1024+20*iter);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, true);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        // Without fix for LUCENE-1130: one of the\n        // threads will hang\n        threads[i].join();\n        assertTrue(\"hit unexpected Throwable\", threads[i].error == null);\n      }\n\n      // Make sure once disk space is avail again, we can\n      // cleanly close:\n      dir.setMaxSizeInBytes(0);\n      writer.close(false);\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ab5cb6a74aefb78aa0569857970b9151dfe2e787","date":1292842407,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#testImmediateDiskFullWithThreads().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#testImmediateDiskFullWithThreads().mjava","sourceNew":"  // LUCENE-1130: make sure immediate disk full on creating\n  // an IndexWriter (hit during DW.ThreadState.init()), with\n  // multiple threads, is OK:\n  public void testImmediateDiskFullWithThreads() throws Exception {\n\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<10;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter);\n      }\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n              setMaxBufferedDocs(2).\n              setMergeScheduler(new ConcurrentMergeScheduler()).\n              setMergePolicy(newLogMergePolicy(4))\n      );\n      ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n      dir.setMaxSizeInBytes(4*1024+20*iter);\n      writer.setInfoStream(VERBOSE ? System.out : null);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, true);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        // Without fix for LUCENE-1130: one of the\n        // threads will hang\n        threads[i].join();\n        assertTrue(\"hit unexpected Throwable\", threads[i].error == null);\n      }\n\n      // Make sure once disk space is avail again, we can\n      // cleanly close:\n      dir.setMaxSizeInBytes(0);\n      writer.close(false);\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // LUCENE-1130: make sure immediate disk full on creating\n  // an IndexWriter (hit during DW.ThreadState.init()), with\n  // multiple threads, is OK:\n  public void testImmediateDiskFullWithThreads() throws Exception {\n\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<10;iter++) {\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n              setMaxBufferedDocs(2).\n              setMergeScheduler(new ConcurrentMergeScheduler()).\n              setMergePolicy(newLogMergePolicy(4))\n      );\n      ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n      dir.setMaxSizeInBytes(4*1024+20*iter);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, true);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        // Without fix for LUCENE-1130: one of the\n        // threads will hang\n        threads[i].join();\n        assertTrue(\"hit unexpected Throwable\", threads[i].error == null);\n      }\n\n      // Make sure once disk space is avail again, we can\n      // cleanly close:\n      dir.setMaxSizeInBytes(0);\n      writer.close(false);\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#testImmediateDiskFullWithThreads().mjava","pathOld":"/dev/null","sourceNew":"  // LUCENE-1130: make sure immediate disk full on creating\n  // an IndexWriter (hit during DW.ThreadState.init()), with\n  // multiple threads, is OK:\n  public void testImmediateDiskFullWithThreads() throws Exception {\n\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<10;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter);\n      }\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n              setMaxBufferedDocs(2).\n              setMergeScheduler(new ConcurrentMergeScheduler()).\n              setMergePolicy(newLogMergePolicy(4))\n      );\n      ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n      dir.setMaxSizeInBytes(4*1024+20*iter);\n      writer.setInfoStream(VERBOSE ? System.out : null);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, true);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        // Without fix for LUCENE-1130: one of the\n        // threads will hang\n        threads[i].join();\n        assertTrue(\"hit unexpected Throwable\", threads[i].error == null);\n      }\n\n      // Make sure once disk space is avail again, we can\n      // cleanly close:\n      dir.setMaxSizeInBytes(0);\n      writer.close(false);\n      dir.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#testImmediateDiskFullWithThreads().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#testImmediateDiskFullWithThreads().mjava","sourceNew":"  // LUCENE-1130: make sure immediate disk full on creating\n  // an IndexWriter (hit during DW.ThreadState.init()), with\n  // multiple threads, is OK:\n  public void testImmediateDiskFullWithThreads() throws Exception {\n\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<10;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter);\n      }\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setMaxBufferedDocs(2).\n              setMergeScheduler(new ConcurrentMergeScheduler()).\n              setMergePolicy(newLogMergePolicy(4))\n      );\n      ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n      dir.setMaxSizeInBytes(4*1024+20*iter);\n      writer.setInfoStream(VERBOSE ? System.out : null);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, true);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        // Without fix for LUCENE-1130: one of the\n        // threads will hang\n        threads[i].join();\n        assertTrue(\"hit unexpected Throwable\", threads[i].error == null);\n      }\n\n      // Make sure once disk space is avail again, we can\n      // cleanly close:\n      dir.setMaxSizeInBytes(0);\n      writer.close(false);\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // LUCENE-1130: make sure immediate disk full on creating\n  // an IndexWriter (hit during DW.ThreadState.init()), with\n  // multiple threads, is OK:\n  public void testImmediateDiskFullWithThreads() throws Exception {\n\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<10;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter);\n      }\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n              setMaxBufferedDocs(2).\n              setMergeScheduler(new ConcurrentMergeScheduler()).\n              setMergePolicy(newLogMergePolicy(4))\n      );\n      ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n      dir.setMaxSizeInBytes(4*1024+20*iter);\n      writer.setInfoStream(VERBOSE ? System.out : null);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, true);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        // Without fix for LUCENE-1130: one of the\n        // threads will hang\n        threads[i].join();\n        assertTrue(\"hit unexpected Throwable\", threads[i].error == null);\n      }\n\n      // Make sure once disk space is avail again, we can\n      // cleanly close:\n      dir.setMaxSizeInBytes(0);\n      writer.close(false);\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#testImmediateDiskFullWithThreads().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#testImmediateDiskFullWithThreads().mjava","sourceNew":"  // LUCENE-1130: make sure immediate disk full on creating\n  // an IndexWriter (hit during DW.ThreadState.init()), with\n  // multiple threads, is OK:\n  public void testImmediateDiskFullWithThreads() throws Exception {\n\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<10;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter);\n      }\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setMaxBufferedDocs(2).\n              setMergeScheduler(new ConcurrentMergeScheduler()).\n              setMergePolicy(newLogMergePolicy(4))\n      );\n      ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n      dir.setMaxSizeInBytes(4*1024+20*iter);\n      writer.setInfoStream(VERBOSE ? System.out : null);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, true);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        // Without fix for LUCENE-1130: one of the\n        // threads will hang\n        threads[i].join();\n        assertTrue(\"hit unexpected Throwable\", threads[i].error == null);\n      }\n\n      // Make sure once disk space is avail again, we can\n      // cleanly close:\n      dir.setMaxSizeInBytes(0);\n      writer.close(false);\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // LUCENE-1130: make sure immediate disk full on creating\n  // an IndexWriter (hit during DW.ThreadState.init()), with\n  // multiple threads, is OK:\n  public void testImmediateDiskFullWithThreads() throws Exception {\n\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<10;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter);\n      }\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n              setMaxBufferedDocs(2).\n              setMergeScheduler(new ConcurrentMergeScheduler()).\n              setMergePolicy(newLogMergePolicy(4))\n      );\n      ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n      dir.setMaxSizeInBytes(4*1024+20*iter);\n      writer.setInfoStream(VERBOSE ? System.out : null);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, true);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        // Without fix for LUCENE-1130: one of the\n        // threads will hang\n        threads[i].join();\n        assertTrue(\"hit unexpected Throwable\", threads[i].error == null);\n      }\n\n      // Make sure once disk space is avail again, we can\n      // cleanly close:\n      dir.setMaxSizeInBytes(0);\n      writer.close(false);\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#testImmediateDiskFullWithThreads().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#testImmediateDiskFullWithThreads().mjava","sourceNew":"  // LUCENE-1130: make sure immediate disk full on creating\n  // an IndexWriter (hit during DW.ThreadState.init()), with\n  // multiple threads, is OK:\n  public void testImmediateDiskFullWithThreads() throws Exception {\n\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<10;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter);\n      }\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setMaxBufferedDocs(2).\n              setMergeScheduler(new ConcurrentMergeScheduler()).\n              setMergePolicy(newLogMergePolicy(4))\n      );\n      ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n      dir.setMaxSizeInBytes(4*1024+20*iter);\n      writer.setInfoStream(VERBOSE ? System.out : null);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, true);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        // Without fix for LUCENE-1130: one of the\n        // threads will hang\n        threads[i].join();\n        assertTrue(\"hit unexpected Throwable\", threads[i].error == null);\n      }\n\n      // Make sure once disk space is avail again, we can\n      // cleanly close:\n      dir.setMaxSizeInBytes(0);\n      writer.close(false);\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // LUCENE-1130: make sure immediate disk full on creating\n  // an IndexWriter (hit during DW.ThreadState.init()), with\n  // multiple threads, is OK:\n  public void testImmediateDiskFullWithThreads() throws Exception {\n\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<10;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter);\n      }\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n              setMaxBufferedDocs(2).\n              setMergeScheduler(new ConcurrentMergeScheduler()).\n              setMergePolicy(newLogMergePolicy(4))\n      );\n      ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n      dir.setMaxSizeInBytes(4*1024+20*iter);\n      writer.setInfoStream(VERBOSE ? System.out : null);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, true);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        // Without fix for LUCENE-1130: one of the\n        // threads will hang\n        threads[i].join();\n        assertTrue(\"hit unexpected Throwable\", threads[i].error == null);\n      }\n\n      // Make sure once disk space is avail again, we can\n      // cleanly close:\n      dir.setMaxSizeInBytes(0);\n      writer.close(false);\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#testImmediateDiskFullWithThreads().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#testImmediateDiskFullWithThreads().mjava","sourceNew":"  // LUCENE-1130: make sure immediate disk full on creating\n  // an IndexWriter (hit during DW.ThreadState.init()), with\n  // multiple threads, is OK:\n  public void testImmediateDiskFullWithThreads() throws Exception {\n\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<10;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter);\n      }\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setMaxBufferedDocs(2).\n              setMergeScheduler(new ConcurrentMergeScheduler()).\n              setMergePolicy(newLogMergePolicy(4))\n      );\n      ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n      dir.setMaxSizeInBytes(4*1024+20*iter);\n      writer.setInfoStream(VERBOSE ? System.out : null);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, true);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        // Without fix for LUCENE-1130: one of the\n        // threads will hang\n        threads[i].join();\n        assertTrue(\"hit unexpected Throwable\", threads[i].error == null);\n      }\n\n      // Make sure once disk space is avail again, we can\n      // cleanly close:\n      dir.setMaxSizeInBytes(0);\n      writer.close(false);\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // LUCENE-1130: make sure immediate disk full on creating\n  // an IndexWriter (hit during DW.ThreadState.init()), with\n  // multiple threads, is OK:\n  public void testImmediateDiskFullWithThreads() throws Exception {\n\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<10;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter);\n      }\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n              setMaxBufferedDocs(2).\n              setMergeScheduler(new ConcurrentMergeScheduler()).\n              setMergePolicy(newLogMergePolicy(4))\n      );\n      ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n      dir.setMaxSizeInBytes(4*1024+20*iter);\n      writer.setInfoStream(VERBOSE ? System.out : null);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, true);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        // Without fix for LUCENE-1130: one of the\n        // threads will hang\n        threads[i].join();\n        assertTrue(\"hit unexpected Throwable\", threads[i].error == null);\n      }\n\n      // Make sure once disk space is avail again, we can\n      // cleanly close:\n      dir.setMaxSizeInBytes(0);\n      writer.close(false);\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a37d7952ff54064a735708748444570f9963683e","date":1309331473,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#testImmediateDiskFullWithThreads().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#testImmediateDiskFullWithThreads().mjava","sourceNew":"  // LUCENE-1130: make sure immediate disk full on creating\n  // an IndexWriter (hit during DW.ThreadState.init()), with\n  // multiple threads, is OK:\n  public void testImmediateDiskFullWithThreads() throws Exception {\n\n    int NUM_THREADS = 3;\n    final int numIterations = TEST_NIGHTLY ? 10 : 3;\n    for(int iter=0;iter<numIterations;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter);\n      }\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setMaxBufferedDocs(2).\n              setMergeScheduler(new ConcurrentMergeScheduler()).\n              setMergePolicy(newLogMergePolicy(4))\n      );\n      ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n      dir.setMaxSizeInBytes(4*1024+20*iter);\n      writer.setInfoStream(VERBOSE ? System.out : null);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, true);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        // Without fix for LUCENE-1130: one of the\n        // threads will hang\n        threads[i].join();\n        assertTrue(\"hit unexpected Throwable\", threads[i].error == null);\n      }\n\n      // Make sure once disk space is avail again, we can\n      // cleanly close:\n      dir.setMaxSizeInBytes(0);\n      writer.close(false);\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // LUCENE-1130: make sure immediate disk full on creating\n  // an IndexWriter (hit during DW.ThreadState.init()), with\n  // multiple threads, is OK:\n  public void testImmediateDiskFullWithThreads() throws Exception {\n\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<10;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter);\n      }\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setMaxBufferedDocs(2).\n              setMergeScheduler(new ConcurrentMergeScheduler()).\n              setMergePolicy(newLogMergePolicy(4))\n      );\n      ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n      dir.setMaxSizeInBytes(4*1024+20*iter);\n      writer.setInfoStream(VERBOSE ? System.out : null);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, true);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        // Without fix for LUCENE-1130: one of the\n        // threads will hang\n        threads[i].join();\n        assertTrue(\"hit unexpected Throwable\", threads[i].error == null);\n      }\n\n      // Make sure once disk space is avail again, we can\n      // cleanly close:\n      dir.setMaxSizeInBytes(0);\n      writer.close(false);\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":["71da933d30aea361ccc224d6544c451cbf49916d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#testImmediateDiskFullWithThreads().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#testImmediateDiskFullWithThreads().mjava","sourceNew":"  // LUCENE-1130: make sure immediate disk full on creating\n  // an IndexWriter (hit during DW.ThreadState.init()), with\n  // multiple threads, is OK:\n  public void testImmediateDiskFullWithThreads() throws Exception {\n\n    int NUM_THREADS = 3;\n    final int numIterations = TEST_NIGHTLY ? 10 : 3;\n    for(int iter=0;iter<numIterations;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter);\n      }\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setMaxBufferedDocs(2).\n              setMergeScheduler(new ConcurrentMergeScheduler()).\n              setMergePolicy(newLogMergePolicy(4))\n      );\n      ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n      dir.setMaxSizeInBytes(4*1024+20*iter);\n      writer.setInfoStream(VERBOSE ? System.out : null);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, true);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        // Without fix for LUCENE-1130: one of the\n        // threads will hang\n        threads[i].join();\n        assertTrue(\"hit unexpected Throwable\", threads[i].error == null);\n      }\n\n      // Make sure once disk space is avail again, we can\n      // cleanly close:\n      dir.setMaxSizeInBytes(0);\n      writer.close(false);\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // LUCENE-1130: make sure immediate disk full on creating\n  // an IndexWriter (hit during DW.ThreadState.init()), with\n  // multiple threads, is OK:\n  public void testImmediateDiskFullWithThreads() throws Exception {\n\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<10;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter);\n      }\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setMaxBufferedDocs(2).\n              setMergeScheduler(new ConcurrentMergeScheduler()).\n              setMergePolicy(newLogMergePolicy(4))\n      );\n      ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n      dir.setMaxSizeInBytes(4*1024+20*iter);\n      writer.setInfoStream(VERBOSE ? System.out : null);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, true);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        // Without fix for LUCENE-1130: one of the\n        // threads will hang\n        threads[i].join();\n        assertTrue(\"hit unexpected Throwable\", threads[i].error == null);\n      }\n\n      // Make sure once disk space is avail again, we can\n      // cleanly close:\n      dir.setMaxSizeInBytes(0);\n      writer.close(false);\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#testImmediateDiskFullWithThreads().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#testImmediateDiskFullWithThreads().mjava","sourceNew":"  // LUCENE-1130: make sure immediate disk full on creating\n  // an IndexWriter (hit during DW.ThreadState.init()), with\n  // multiple threads, is OK:\n  public void testImmediateDiskFullWithThreads() throws Exception {\n\n    int NUM_THREADS = 3;\n    final int numIterations = TEST_NIGHTLY ? 10 : 3;\n    for(int iter=0;iter<numIterations;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter);\n      }\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setMaxBufferedDocs(2).\n              setMergeScheduler(new ConcurrentMergeScheduler()).\n              setMergePolicy(newLogMergePolicy(4))\n      );\n      ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n      dir.setMaxSizeInBytes(4*1024+20*iter);\n      writer.setInfoStream(VERBOSE ? System.out : null);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, true);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        // Without fix for LUCENE-1130: one of the\n        // threads will hang\n        threads[i].join();\n        assertTrue(\"hit unexpected Throwable\", threads[i].error == null);\n      }\n\n      // Make sure once disk space is avail again, we can\n      // cleanly close:\n      dir.setMaxSizeInBytes(0);\n      writer.close(false);\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // LUCENE-1130: make sure immediate disk full on creating\n  // an IndexWriter (hit during DW.ThreadState.init()), with\n  // multiple threads, is OK:\n  public void testImmediateDiskFullWithThreads() throws Exception {\n\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<10;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter);\n      }\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setMaxBufferedDocs(2).\n              setMergeScheduler(new ConcurrentMergeScheduler()).\n              setMergePolicy(newLogMergePolicy(4))\n      );\n      ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n      dir.setMaxSizeInBytes(4*1024+20*iter);\n      writer.setInfoStream(VERBOSE ? System.out : null);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, true);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        // Without fix for LUCENE-1130: one of the\n        // threads will hang\n        threads[i].join();\n        assertTrue(\"hit unexpected Throwable\", threads[i].error == null);\n      }\n\n      // Make sure once disk space is avail again, we can\n      // cleanly close:\n      dir.setMaxSizeInBytes(0);\n      writer.close(false);\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06584e6e98d592b34e1329b384182f368d2025e8","date":1320850353,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#testImmediateDiskFullWithThreads().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#testImmediateDiskFullWithThreads().mjava","sourceNew":"  // LUCENE-1130: make sure immediate disk full on creating\n  // an IndexWriter (hit during DW.ThreadState.init()), with\n  // multiple threads, is OK:\n  public void testImmediateDiskFullWithThreads() throws Exception {\n\n    int NUM_THREADS = 3;\n    final int numIterations = TEST_NIGHTLY ? 10 : 3;\n    for(int iter=0;iter<numIterations;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter);\n      }\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setMaxBufferedDocs(2).\n              setMergeScheduler(new ConcurrentMergeScheduler()).\n              setMergePolicy(newLogMergePolicy(4))\n      );\n      ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n      dir.setMaxSizeInBytes(4*1024+20*iter);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, true);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        // Without fix for LUCENE-1130: one of the\n        // threads will hang\n        threads[i].join();\n        assertTrue(\"hit unexpected Throwable\", threads[i].error == null);\n      }\n\n      // Make sure once disk space is avail again, we can\n      // cleanly close:\n      dir.setMaxSizeInBytes(0);\n      writer.close(false);\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // LUCENE-1130: make sure immediate disk full on creating\n  // an IndexWriter (hit during DW.ThreadState.init()), with\n  // multiple threads, is OK:\n  public void testImmediateDiskFullWithThreads() throws Exception {\n\n    int NUM_THREADS = 3;\n    final int numIterations = TEST_NIGHTLY ? 10 : 3;\n    for(int iter=0;iter<numIterations;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter);\n      }\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setMaxBufferedDocs(2).\n              setMergeScheduler(new ConcurrentMergeScheduler()).\n              setMergePolicy(newLogMergePolicy(4))\n      );\n      ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n      dir.setMaxSizeInBytes(4*1024+20*iter);\n      writer.setInfoStream(VERBOSE ? System.out : null);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, true);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        // Without fix for LUCENE-1130: one of the\n        // threads will hang\n        threads[i].join();\n        assertTrue(\"hit unexpected Throwable\", threads[i].error == null);\n      }\n\n      // Make sure once disk space is avail again, we can\n      // cleanly close:\n      dir.setMaxSizeInBytes(0);\n      writer.close(false);\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#testImmediateDiskFullWithThreads().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#testImmediateDiskFullWithThreads().mjava","sourceNew":"  // LUCENE-1130: make sure immediate disk full on creating\n  // an IndexWriter (hit during DW.ThreadState.init()), with\n  // multiple threads, is OK:\n  public void testImmediateDiskFullWithThreads() throws Exception {\n\n    int NUM_THREADS = 3;\n    final int numIterations = TEST_NIGHTLY ? 10 : 3;\n    for(int iter=0;iter<numIterations;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter);\n      }\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setMaxBufferedDocs(2).\n              setMergeScheduler(new ConcurrentMergeScheduler()).\n              setMergePolicy(newLogMergePolicy(4))\n      );\n      ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n      dir.setMaxSizeInBytes(4*1024+20*iter);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, true);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        // Without fix for LUCENE-1130: one of the\n        // threads will hang\n        threads[i].join();\n        assertTrue(\"hit unexpected Throwable\", threads[i].error == null);\n      }\n\n      // Make sure once disk space is avail again, we can\n      // cleanly close:\n      dir.setMaxSizeInBytes(0);\n      writer.close(false);\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // LUCENE-1130: make sure immediate disk full on creating\n  // an IndexWriter (hit during DW.ThreadState.init()), with\n  // multiple threads, is OK:\n  public void testImmediateDiskFullWithThreads() throws Exception {\n\n    int NUM_THREADS = 3;\n    final int numIterations = TEST_NIGHTLY ? 10 : 3;\n    for(int iter=0;iter<numIterations;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter);\n      }\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setMaxBufferedDocs(2).\n              setMergeScheduler(new ConcurrentMergeScheduler()).\n              setMergePolicy(newLogMergePolicy(4))\n      );\n      ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n      dir.setMaxSizeInBytes(4*1024+20*iter);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, true);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        // Without fix for LUCENE-1130: one of the\n        // threads will hang\n        threads[i].join();\n        assertTrue(\"hit unexpected Throwable\", threads[i].error == null);\n      }\n\n      // Make sure once disk space is avail again, we can\n      // cleanly close:\n      dir.setMaxSizeInBytes(0);\n      writer.close(false);\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"44fcbde6fb2ac44ee3b45e013e54a42911e689ff":["4e8cc373c801e54cec75daf9f52792cb4b17f536"],"a37d7952ff54064a735708748444570f9963683e":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["06584e6e98d592b34e1329b384182f368d2025e8"],"06584e6e98d592b34e1329b384182f368d2025e8":["a37d7952ff54064a735708748444570f9963683e"],"85a883878c0af761245ab048babc63d099f835f3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","84b590669deb3d3a471cec6cb13b104b2ee94418"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["3bb13258feba31ab676502787ab2e1779f129b7a","44fcbde6fb2ac44ee3b45e013e54a42911e689ff"],"962d04139994fce5193143ef35615499a9a96d78":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","44fcbde6fb2ac44ee3b45e013e54a42911e689ff"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["f2c5f0cb44df114db4228c8f77861714b5cabaea","a37d7952ff54064a735708748444570f9963683e"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["a3776dccca01c11e7046323cfad46a3b4a471233","a37d7952ff54064a735708748444570f9963683e"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["44fcbde6fb2ac44ee3b45e013e54a42911e689ff"],"84b590669deb3d3a471cec6cb13b104b2ee94418":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a3776dccca01c11e7046323cfad46a3b4a471233":["44fcbde6fb2ac44ee3b45e013e54a42911e689ff","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3bb13258feba31ab676502787ab2e1779f129b7a":["85a883878c0af761245ab048babc63d099f835f3","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["84b590669deb3d3a471cec6cb13b104b2ee94418"]},"commit2Childs":{"44fcbde6fb2ac44ee3b45e013e54a42911e689ff":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f2c5f0cb44df114db4228c8f77861714b5cabaea","a3776dccca01c11e7046323cfad46a3b4a471233"],"a37d7952ff54064a735708748444570f9963683e":["06584e6e98d592b34e1329b384182f368d2025e8","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"06584e6e98d592b34e1329b384182f368d2025e8":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"85a883878c0af761245ab048babc63d099f835f3":["3bb13258feba31ab676502787ab2e1779f129b7a"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"962d04139994fce5193143ef35615499a9a96d78":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["962d04139994fce5193143ef35615499a9a96d78"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["a37d7952ff54064a735708748444570f9963683e","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","d083e83f225b11e5fdd900e83d26ddb385b6955c","a3776dccca01c11e7046323cfad46a3b4a471233"],"84b590669deb3d3a471cec6cb13b104b2ee94418":["85a883878c0af761245ab048babc63d099f835f3","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"a3776dccca01c11e7046323cfad46a3b4a471233":["817d8435e9135b756f08ce6710ab0baac51bdf88"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["85a883878c0af761245ab048babc63d099f835f3","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","84b590669deb3d3a471cec6cb13b104b2ee94418"],"3bb13258feba31ab676502787ab2e1779f129b7a":["ab5cb6a74aefb78aa0569857970b9151dfe2e787"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["44fcbde6fb2ac44ee3b45e013e54a42911e689ff","3bb13258feba31ab676502787ab2e1779f129b7a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}