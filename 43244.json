{"path":"solr/src/test/org/apache/solr/client/solrj/request/TestUpdateRequestCodec#compareDocs(String,SolrInputDocument,SolrInputDocument).mjava","commits":[{"id":"75ed70ebff903842ce0bf09b37df09f11f89ad4f","date":1276477396,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/client/solrj/request/TestUpdateRequestCodec#compareDocs(String,SolrInputDocument,SolrInputDocument).mjava","pathOld":"/dev/null","sourceNew":"  private void compareDocs(String m, \n                           SolrInputDocument expectedDoc, \n                           SolrInputDocument actualDoc) {\n    Assert.assertEquals(expectedDoc.getDocumentBoost(), \n                        actualDoc.getDocumentBoost());\n\n    for (String s : expectedDoc.getFieldNames()) {\n      SolrInputField expectedField = expectedDoc.getField(s);\n      SolrInputField actualField = actualDoc.getField(s);\n      Assert.assertEquals(m + \": diff boosts for field: \" + s,\n                          expectedField.getBoost(), actualField.getBoost());\n      Object expectedVal = expectedField.getValue();\n      Object actualVal = actualField.getValue();\n      if (expectedVal instanceof Set &&\n          actualVal instanceof Collection) {\n        // unmarshaled documents never contain Sets, they are just a \n        // List in an arbitrary order based on what the iterator of \n        // hte original Set returned, so we need a comparison that is \n        // order agnostic.\n        actualVal = new HashSet((Collection) actualVal);\n        m += \" (Set comparison)\";\n      }\n\n      Assert.assertEquals(m + \" diff values for field: \" + s,\n                          expectedVal, actualVal);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/client/solrj/request/TestUpdateRequestCodec#compareDocs(String,SolrInputDocument,SolrInputDocument).mjava","pathOld":"/dev/null","sourceNew":"  private void compareDocs(String m, \n                           SolrInputDocument expectedDoc, \n                           SolrInputDocument actualDoc) {\n    Assert.assertEquals(expectedDoc.getDocumentBoost(), \n                        actualDoc.getDocumentBoost());\n\n    for (String s : expectedDoc.getFieldNames()) {\n      SolrInputField expectedField = expectedDoc.getField(s);\n      SolrInputField actualField = actualDoc.getField(s);\n      Assert.assertEquals(m + \": diff boosts for field: \" + s,\n                          expectedField.getBoost(), actualField.getBoost());\n      Object expectedVal = expectedField.getValue();\n      Object actualVal = actualField.getValue();\n      if (expectedVal instanceof Set &&\n          actualVal instanceof Collection) {\n        // unmarshaled documents never contain Sets, they are just a \n        // List in an arbitrary order based on what the iterator of \n        // hte original Set returned, so we need a comparison that is \n        // order agnostic.\n        actualVal = new HashSet((Collection) actualVal);\n        m += \" (Set comparison)\";\n      }\n\n      Assert.assertEquals(m + \" diff values for field: \" + s,\n                          expectedVal, actualVal);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/request/TestUpdateRequestCodec#compareDocs(String,SolrInputDocument,SolrInputDocument).mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/request/TestUpdateRequestCodec#compareDocs(String,SolrInputDocument,SolrInputDocument).mjava","sourceNew":"  private void compareDocs(String m, \n                           SolrInputDocument expectedDoc, \n                           SolrInputDocument actualDoc) {\n    Assert.assertEquals(expectedDoc.getDocumentBoost(), \n                        actualDoc.getDocumentBoost());\n\n    for (String s : expectedDoc.getFieldNames()) {\n      SolrInputField expectedField = expectedDoc.getField(s);\n      SolrInputField actualField = actualDoc.getField(s);\n      Assert.assertEquals(m + \": diff boosts for field: \" + s,\n                          expectedField.getBoost(), actualField.getBoost());\n      Object expectedVal = expectedField.getValue();\n      Object actualVal = actualField.getValue();\n      if (expectedVal instanceof Set &&\n          actualVal instanceof Collection) {\n        // unmarshaled documents never contain Sets, they are just a \n        // List in an arbitrary order based on what the iterator of \n        // hte original Set returned, so we need a comparison that is \n        // order agnostic.\n        actualVal = new HashSet((Collection) actualVal);\n        m += \" (Set comparison)\";\n      }\n\n      Assert.assertEquals(m + \" diff values for field: \" + s,\n                          expectedVal, actualVal);\n    }\n  }\n\n","sourceOld":"  private void compareDocs(String m, \n                           SolrInputDocument expectedDoc, \n                           SolrInputDocument actualDoc) {\n    Assert.assertEquals(expectedDoc.getDocumentBoost(), \n                        actualDoc.getDocumentBoost());\n\n    for (String s : expectedDoc.getFieldNames()) {\n      SolrInputField expectedField = expectedDoc.getField(s);\n      SolrInputField actualField = actualDoc.getField(s);\n      Assert.assertEquals(m + \": diff boosts for field: \" + s,\n                          expectedField.getBoost(), actualField.getBoost());\n      Object expectedVal = expectedField.getValue();\n      Object actualVal = actualField.getValue();\n      if (expectedVal instanceof Set &&\n          actualVal instanceof Collection) {\n        // unmarshaled documents never contain Sets, they are just a \n        // List in an arbitrary order based on what the iterator of \n        // hte original Set returned, so we need a comparison that is \n        // order agnostic.\n        actualVal = new HashSet((Collection) actualVal);\n        m += \" (Set comparison)\";\n      }\n\n      Assert.assertEquals(m + \" diff values for field: \" + s,\n                          expectedVal, actualVal);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/request/TestUpdateRequestCodec#compareDocs(String,SolrInputDocument,SolrInputDocument).mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/request/TestUpdateRequestCodec#compareDocs(String,SolrInputDocument,SolrInputDocument).mjava","sourceNew":"  private void compareDocs(String m, \n                           SolrInputDocument expectedDoc, \n                           SolrInputDocument actualDoc) {\n    Assert.assertEquals(expectedDoc.getDocumentBoost(), \n                        actualDoc.getDocumentBoost());\n\n    for (String s : expectedDoc.getFieldNames()) {\n      SolrInputField expectedField = expectedDoc.getField(s);\n      SolrInputField actualField = actualDoc.getField(s);\n      Assert.assertEquals(m + \": diff boosts for field: \" + s,\n                          expectedField.getBoost(), actualField.getBoost());\n      Object expectedVal = expectedField.getValue();\n      Object actualVal = actualField.getValue();\n      if (expectedVal instanceof Set &&\n          actualVal instanceof Collection) {\n        // unmarshaled documents never contain Sets, they are just a \n        // List in an arbitrary order based on what the iterator of \n        // hte original Set returned, so we need a comparison that is \n        // order agnostic.\n        actualVal = new HashSet((Collection) actualVal);\n        m += \" (Set comparison)\";\n      }\n\n      Assert.assertEquals(m + \" diff values for field: \" + s,\n                          expectedVal, actualVal);\n    }\n  }\n\n","sourceOld":"  private void compareDocs(String m, \n                           SolrInputDocument expectedDoc, \n                           SolrInputDocument actualDoc) {\n    Assert.assertEquals(expectedDoc.getDocumentBoost(), \n                        actualDoc.getDocumentBoost());\n\n    for (String s : expectedDoc.getFieldNames()) {\n      SolrInputField expectedField = expectedDoc.getField(s);\n      SolrInputField actualField = actualDoc.getField(s);\n      Assert.assertEquals(m + \": diff boosts for field: \" + s,\n                          expectedField.getBoost(), actualField.getBoost());\n      Object expectedVal = expectedField.getValue();\n      Object actualVal = actualField.getValue();\n      if (expectedVal instanceof Set &&\n          actualVal instanceof Collection) {\n        // unmarshaled documents never contain Sets, they are just a \n        // List in an arbitrary order based on what the iterator of \n        // hte original Set returned, so we need a comparison that is \n        // order agnostic.\n        actualVal = new HashSet((Collection) actualVal);\n        m += \" (Set comparison)\";\n      }\n\n      Assert.assertEquals(m + \" diff values for field: \" + s,\n                          expectedVal, actualVal);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/request/TestUpdateRequestCodec#compareDocs(String,SolrInputDocument,SolrInputDocument).mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/request/TestUpdateRequestCodec#compareDocs(String,SolrInputDocument,SolrInputDocument).mjava","sourceNew":"  private void compareDocs(String m, \n                           SolrInputDocument expectedDoc, \n                           SolrInputDocument actualDoc) {\n    Assert.assertEquals(expectedDoc.getDocumentBoost(), \n                        actualDoc.getDocumentBoost());\n\n    for (String s : expectedDoc.getFieldNames()) {\n      SolrInputField expectedField = expectedDoc.getField(s);\n      SolrInputField actualField = actualDoc.getField(s);\n      Assert.assertEquals(m + \": diff boosts for field: \" + s,\n                          expectedField.getBoost(), actualField.getBoost());\n      Object expectedVal = expectedField.getValue();\n      Object actualVal = actualField.getValue();\n      if (expectedVal instanceof Set &&\n          actualVal instanceof Collection) {\n        // unmarshaled documents never contain Sets, they are just a \n        // List in an arbitrary order based on what the iterator of \n        // hte original Set returned, so we need a comparison that is \n        // order agnostic.\n        actualVal = new HashSet((Collection) actualVal);\n        m += \" (Set comparison)\";\n      }\n\n      Assert.assertEquals(m + \" diff values for field: \" + s,\n                          expectedVal, actualVal);\n    }\n  }\n\n","sourceOld":"  private void compareDocs(String m, \n                           SolrInputDocument expectedDoc, \n                           SolrInputDocument actualDoc) {\n    Assert.assertEquals(expectedDoc.getDocumentBoost(), \n                        actualDoc.getDocumentBoost());\n\n    for (String s : expectedDoc.getFieldNames()) {\n      SolrInputField expectedField = expectedDoc.getField(s);\n      SolrInputField actualField = actualDoc.getField(s);\n      Assert.assertEquals(m + \": diff boosts for field: \" + s,\n                          expectedField.getBoost(), actualField.getBoost());\n      Object expectedVal = expectedField.getValue();\n      Object actualVal = actualField.getValue();\n      if (expectedVal instanceof Set &&\n          actualVal instanceof Collection) {\n        // unmarshaled documents never contain Sets, they are just a \n        // List in an arbitrary order based on what the iterator of \n        // hte original Set returned, so we need a comparison that is \n        // order agnostic.\n        actualVal = new HashSet((Collection) actualVal);\n        m += \" (Set comparison)\";\n      }\n\n      Assert.assertEquals(m + \" diff values for field: \" + s,\n                          expectedVal, actualVal);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"75ed70ebff903842ce0bf09b37df09f11f89ad4f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["75ed70ebff903842ce0bf09b37df09f11f89ad4f"],"c26f00b574427b55127e869b935845554afde1fa":["75ed70ebff903842ce0bf09b37df09f11f89ad4f","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["75ed70ebff903842ce0bf09b37df09f11f89ad4f"],"5f4e87790277826a2aea119328600dfb07761f32":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","75ed70ebff903842ce0bf09b37df09f11f89ad4f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"75ed70ebff903842ce0bf09b37df09f11f89ad4f":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee","5f4e87790277826a2aea119328600dfb07761f32"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["75ed70ebff903842ce0bf09b37df09f11f89ad4f","5f4e87790277826a2aea119328600dfb07761f32"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"5f4e87790277826a2aea119328600dfb07761f32":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","5f4e87790277826a2aea119328600dfb07761f32","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}