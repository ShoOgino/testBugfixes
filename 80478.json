{"path":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testSimpleSpanPhraseHighlighting3().mjava","commits":[{"id":"296b8b38a87feb478921f77834a2302dfe77641c","date":1209506838,"type":0,"author":"Mark Harwood","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testSimpleSpanPhraseHighlighting3().mjava","pathOld":"/dev/null","sourceNew":"  public void testSimpleSpanPhraseHighlighting3() throws Exception {\n    doSearching(\"\\\"x y z\\\"\");\n\n    int maxNumFragmentsRequired = 2;\n\n    for (int i = 0; i < hits.length(); i++) {\n      String text = hits.doc(i).get(FIELD_NAME);\n      CachingTokenFilter tokenStream = new CachingTokenFilter(analyzer.tokenStream(FIELD_NAME,\n          new StringReader(text)));\n      Highlighter highlighter = new Highlighter(this,\n          new SpanScorer(query, FIELD_NAME, tokenStream));\n      highlighter.setTextFragmenter(new SimpleFragmenter(40));\n      tokenStream.reset();\n\n      String result = highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,\n          \"...\");\n      System.out.println(\"\\t\" + result);\n\n      assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n          numHighlights == 3);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"943c3f9cf96b8df37f4273d66a66182e2a669467","date":1249394171,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testSimpleSpanPhraseHighlighting3().mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testSimpleSpanPhraseHighlighting3().mjava","sourceNew":"  public void testSimpleSpanPhraseHighlighting3() throws Exception {\n    doSearching(\"\\\"x y z\\\"\");\n\n    int maxNumFragmentsRequired = 2;\n\n    for (int i = 0; i < hits.length(); i++) {\n      String text = hits.doc(i).get(FIELD_NAME);\n      CachingTokenFilter tokenStream = new CachingTokenFilter(analyzer.tokenStream(FIELD_NAME,\n          new StringReader(text)));\n      QueryScorer scorer = new QueryScorer(query, FIELD_NAME);\n      Highlighter highlighter = new Highlighter(this, scorer);\n\n      highlighter.setTextFragmenter(new SimpleFragmenter(40));\n\n      String result = highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,\n          \"...\");\n      System.out.println(\"\\t\" + result);\n\n      assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n          numHighlights == 3);\n    }\n  }\n\n","sourceOld":"  public void testSimpleSpanPhraseHighlighting3() throws Exception {\n    doSearching(\"\\\"x y z\\\"\");\n\n    int maxNumFragmentsRequired = 2;\n\n    for (int i = 0; i < hits.length(); i++) {\n      String text = hits.doc(i).get(FIELD_NAME);\n      CachingTokenFilter tokenStream = new CachingTokenFilter(analyzer.tokenStream(FIELD_NAME,\n          new StringReader(text)));\n      Highlighter highlighter = new Highlighter(this,\n          new SpanScorer(query, FIELD_NAME, tokenStream));\n      highlighter.setTextFragmenter(new SimpleFragmenter(40));\n      tokenStream.reset();\n\n      String result = highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,\n          \"...\");\n      System.out.println(\"\\t\" + result);\n\n      assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n          numHighlights == 3);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c16ba100a31d292b7b4c893a3cdf1994e75a3201","date":1249608645,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testSimpleQueryScorerPhraseHighlighting3().mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testSimpleSpanPhraseHighlighting3().mjava","sourceNew":"  public void testSimpleQueryScorerPhraseHighlighting3() throws Exception {\n    doSearching(\"\\\"x y z\\\"\");\n\n    int maxNumFragmentsRequired = 2;\n\n    for (int i = 0; i < hits.length(); i++) {\n      String text = hits.doc(i).get(FIELD_NAME);\n      TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(text));\n      QueryScorer scorer = new QueryScorer(query, FIELD_NAME);\n      Highlighter highlighter = new Highlighter(this, scorer);\n\n      highlighter.setTextFragmenter(new SimpleFragmenter(40));\n\n      String result = highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,\n          \"...\");\n      System.out.println(\"\\t\" + result);\n\n      assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n          numHighlights == 3);\n    }\n  }\n\n","sourceOld":"  public void testSimpleSpanPhraseHighlighting3() throws Exception {\n    doSearching(\"\\\"x y z\\\"\");\n\n    int maxNumFragmentsRequired = 2;\n\n    for (int i = 0; i < hits.length(); i++) {\n      String text = hits.doc(i).get(FIELD_NAME);\n      CachingTokenFilter tokenStream = new CachingTokenFilter(analyzer.tokenStream(FIELD_NAME,\n          new StringReader(text)));\n      QueryScorer scorer = new QueryScorer(query, FIELD_NAME);\n      Highlighter highlighter = new Highlighter(this, scorer);\n\n      highlighter.setTextFragmenter(new SimpleFragmenter(40));\n\n      String result = highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,\n          \"...\");\n      System.out.println(\"\\t\" + result);\n\n      assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n          numHighlights == 3);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c16ba100a31d292b7b4c893a3cdf1994e75a3201":["943c3f9cf96b8df37f4273d66a66182e2a669467"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"943c3f9cf96b8df37f4273d66a66182e2a669467":["296b8b38a87feb478921f77834a2302dfe77641c"],"296b8b38a87feb478921f77834a2302dfe77641c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c16ba100a31d292b7b4c893a3cdf1994e75a3201"]},"commit2Childs":{"c16ba100a31d292b7b4c893a3cdf1994e75a3201":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["296b8b38a87feb478921f77834a2302dfe77641c"],"943c3f9cf96b8df37f4273d66a66182e2a669467":["c16ba100a31d292b7b4c893a3cdf1994e75a3201"],"296b8b38a87feb478921f77834a2302dfe77641c":["943c3f9cf96b8df37f4273d66a66182e2a669467"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}