{"path":"lucene/queries/src/test/org/apache/lucene/queries/intervals/TestIntervals#testMaxGaps().mjava","commits":[{"id":"97ee2282ff806e9bc9d705f389cf40451ab81c3e","date":1561721333,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/intervals/TestIntervals#testMaxGaps().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/search/intervals/TestIntervals#testMaxGaps().mjava","sourceNew":"  public void testMaxGaps() throws IOException {\n\n    IntervalsSource source = Intervals.maxgaps(1,\n        Intervals.unordered(Intervals.term(\"w1\"), Intervals.term(\"w3\"), Intervals.term(\"w4\")));\n    checkIntervals(source, \"field2\", 1, new int[][]{\n        {}, {}, {}, {}, {},\n        { 0, 3, 2, 4, 3, 6 }\n    });\n\n    MatchesIterator mi = getMatches(source, 5, \"field2\");\n    assertMatch(mi, 0, 3, 0, 11);\n\n    assertEquals(3, source.minExtent());\n\n  }\n\n","sourceOld":"  public void testMaxGaps() throws IOException {\n\n    IntervalsSource source = Intervals.maxgaps(1,\n        Intervals.unordered(Intervals.term(\"w1\"), Intervals.term(\"w3\"), Intervals.term(\"w4\")));\n    checkIntervals(source, \"field2\", 1, new int[][]{\n        {}, {}, {}, {}, {},\n        { 0, 3, 2, 4, 3, 6 }\n    });\n\n    MatchesIterator mi = getMatches(source, 5, \"field2\");\n    assertMatch(mi, 0, 3, 0, 11);\n\n    assertEquals(3, source.minExtent());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2860a36112126062c0e208cc328871412f61501f","date":1593504835,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/intervals/TestIntervals#testMaxGaps().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/intervals/TestIntervals#testMaxGaps().mjava","sourceNew":"  public void testMaxGaps() throws IOException {\n\n    IntervalsSource source = Intervals.maxgaps(1,\n        Intervals.unordered(Intervals.term(\"w1\"), Intervals.term(\"w3\"), Intervals.term(\"w4\")));\n    checkIntervals(source, \"field2\", 1, new int[][]{\n        {}, {}, {}, {}, {},\n        { 0, 3, 2, 4, 3, 6 }\n    });\n\n    MatchesIterator mi = getMatches(source, 5, \"field2\");\n    assertMatch(mi, 0, 3, 0, 11);\n\n    assertEquals(3, source.minExtent());\n    assertEquals(source, source);\n    assertEquals(source, Intervals.maxgaps(1,\n            Intervals.unordered(Intervals.term(\"w1\"), Intervals.term(\"w3\"), Intervals.term(\"w4\"))));\n    assertNotEquals(source, Intervals.maxgaps(2,\n            Intervals.unordered(Intervals.term(\"w1\"), Intervals.term(\"w3\"), Intervals.term(\"w4\"))));\n\n  }\n\n","sourceOld":"  public void testMaxGaps() throws IOException {\n\n    IntervalsSource source = Intervals.maxgaps(1,\n        Intervals.unordered(Intervals.term(\"w1\"), Intervals.term(\"w3\"), Intervals.term(\"w4\")));\n    checkIntervals(source, \"field2\", 1, new int[][]{\n        {}, {}, {}, {}, {},\n        { 0, 3, 2, 4, 3, 6 }\n    });\n\n    MatchesIterator mi = getMatches(source, 5, \"field2\");\n    assertMatch(mi, 0, 3, 0, 11);\n\n    assertEquals(3, source.minExtent());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"97ee2282ff806e9bc9d705f389cf40451ab81c3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2860a36112126062c0e208cc328871412f61501f":["97ee2282ff806e9bc9d705f389cf40451ab81c3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2860a36112126062c0e208cc328871412f61501f"]},"commit2Childs":{"97ee2282ff806e9bc9d705f389cf40451ab81c3e":["2860a36112126062c0e208cc328871412f61501f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["97ee2282ff806e9bc9d705f389cf40451ab81c3e"],"2860a36112126062c0e208cc328871412f61501f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}