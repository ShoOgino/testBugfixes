{"path":"src/test/org/apache/lucene/search/TestMultiSearcher#testCustomSimilarity().mjava","commits":[{"id":"94b168f99ebebb8d23639b67c3f4f8939cd4f5be","date":1177535443,"type":0,"author":"Doron Cohen","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestMultiSearcher#testCustomSimilarity().mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * test that custom similarity is in effect when using MultiSearcher (LUCENE-789).\n     * @throws IOException \n     */\n    public void testCustomSimilarity () throws IOException {\n        RAMDirectory dir = new RAMDirectory();\n        initIndex(dir, 10, true, \"x\"); // documents with two tokens \"doc0\" and \"x\", \"doc1\" and x, etc...\n        IndexSearcher srchr = new IndexSearcher(dir);\n        MultiSearcher msrchr = getMultiSearcherInstance(new Searcher[]{srchr});\n        \n        Similarity customSimilarity = new DefaultSimilarity() {\n            // overide all\n            public float idf(int docFreq, int numDocs) { return 100.0f; }\n            public float coord(int overlap, int maxOverlap) { return 1.0f; }\n            public float lengthNorm(String fieldName, int numTokens) { return 1.0f; }\n            public float queryNorm(float sumOfSquaredWeights) { return 1.0f; }\n            public float sloppyFreq(int distance) { return 1.0f; }\n            public float tf(float freq) { return 1.0f; }\n        };\n        \n        srchr.setSimilarity(customSimilarity);\n        msrchr.setSimilarity(customSimilarity);\n  \n        Query query=new TermQuery(new Term(\"contents\", \"doc0\"));\n  \n        // Get a score from IndexSearcher\n        TopDocs topDocs = srchr.search(query, null, 1);\n        float score1 = topDocs.getMaxScore();\n        \n        // Get the score from MultiSearcher\n        topDocs = msrchr.search(query, null, 1);\n        float scoreN = topDocs.getMaxScore();\n        \n        // The scores from the IndexSearcher and Multisearcher should be the same\n        // if the same similarity is used.\n        assertEquals(\"MultiSearcher score must be equal to single esrcher score!\", score1, scoreN, 1e-6);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8d1458a2543cbd30cbfe7929be4dcb5c5251659","date":1254582241,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestMultiSearcher#testCustomSimilarity().mjava","pathOld":"src/test/org/apache/lucene/search/TestMultiSearcher#testCustomSimilarity().mjava","sourceNew":"    /**\n     * test that custom similarity is in effect when using MultiSearcher (LUCENE-789).\n     * @throws IOException \n     */\n    public void testCustomSimilarity () throws IOException {\n        RAMDirectory dir = new RAMDirectory();\n        initIndex(dir, 10, true, \"x\"); // documents with two tokens \"doc0\" and \"x\", \"doc1\" and x, etc...\n        IndexSearcher srchr = new IndexSearcher(dir, true);\n        MultiSearcher msrchr = getMultiSearcherInstance(new Searcher[]{srchr});\n        \n        Similarity customSimilarity = new DefaultSimilarity() {\n            // overide all\n            public float idf(int docFreq, int numDocs) { return 100.0f; }\n            public float coord(int overlap, int maxOverlap) { return 1.0f; }\n            public float lengthNorm(String fieldName, int numTokens) { return 1.0f; }\n            public float queryNorm(float sumOfSquaredWeights) { return 1.0f; }\n            public float sloppyFreq(int distance) { return 1.0f; }\n            public float tf(float freq) { return 1.0f; }\n        };\n        \n        srchr.setSimilarity(customSimilarity);\n        msrchr.setSimilarity(customSimilarity);\n  \n        Query query=new TermQuery(new Term(\"contents\", \"doc0\"));\n  \n        // Get a score from IndexSearcher\n        TopDocs topDocs = srchr.search(query, null, 1);\n        float score1 = topDocs.getMaxScore();\n        \n        // Get the score from MultiSearcher\n        topDocs = msrchr.search(query, null, 1);\n        float scoreN = topDocs.getMaxScore();\n        \n        // The scores from the IndexSearcher and Multisearcher should be the same\n        // if the same similarity is used.\n        assertEquals(\"MultiSearcher score must be equal to single esrcher score!\", score1, scoreN, 1e-6);\n    }\n\n","sourceOld":"    /**\n     * test that custom similarity is in effect when using MultiSearcher (LUCENE-789).\n     * @throws IOException \n     */\n    public void testCustomSimilarity () throws IOException {\n        RAMDirectory dir = new RAMDirectory();\n        initIndex(dir, 10, true, \"x\"); // documents with two tokens \"doc0\" and \"x\", \"doc1\" and x, etc...\n        IndexSearcher srchr = new IndexSearcher(dir);\n        MultiSearcher msrchr = getMultiSearcherInstance(new Searcher[]{srchr});\n        \n        Similarity customSimilarity = new DefaultSimilarity() {\n            // overide all\n            public float idf(int docFreq, int numDocs) { return 100.0f; }\n            public float coord(int overlap, int maxOverlap) { return 1.0f; }\n            public float lengthNorm(String fieldName, int numTokens) { return 1.0f; }\n            public float queryNorm(float sumOfSquaredWeights) { return 1.0f; }\n            public float sloppyFreq(int distance) { return 1.0f; }\n            public float tf(float freq) { return 1.0f; }\n        };\n        \n        srchr.setSimilarity(customSimilarity);\n        msrchr.setSimilarity(customSimilarity);\n  \n        Query query=new TermQuery(new Term(\"contents\", \"doc0\"));\n  \n        // Get a score from IndexSearcher\n        TopDocs topDocs = srchr.search(query, null, 1);\n        float score1 = topDocs.getMaxScore();\n        \n        // Get the score from MultiSearcher\n        topDocs = msrchr.search(query, null, 1);\n        float scoreN = topDocs.getMaxScore();\n        \n        // The scores from the IndexSearcher and Multisearcher should be the same\n        // if the same similarity is used.\n        assertEquals(\"MultiSearcher score must be equal to single esrcher score!\", score1, scoreN, 1e-6);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a046c0c310bc77931fc8441bd920053b607dd14","date":1254584734,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"src/test/org/apache/lucene/search/TestMultiSearcher#testCustomSimilarity().mjava","pathOld":"src/test/org/apache/lucene/search/TestMultiSearcher#testCustomSimilarity().mjava","sourceNew":"    /**\n     * test that custom similarity is in effect when using MultiSearcher (LUCENE-789).\n     * @throws IOException \n     */\n    public void testCustomSimilarity () throws IOException {\n        RAMDirectory dir = new RAMDirectory();\n        initIndex(dir, 10, true, \"x\"); // documents with two tokens \"doc0\" and \"x\", \"doc1\" and x, etc...\n        IndexSearcher srchr = new IndexSearcher(dir, true);\n        MultiSearcher msrchr = getMultiSearcherInstance(new Searcher[]{srchr});\n        \n        Similarity customSimilarity = new DefaultSimilarity() {\n            // overide all\n            public float idf(int docFreq, int numDocs) { return 100.0f; }\n            public float coord(int overlap, int maxOverlap) { return 1.0f; }\n            public float lengthNorm(String fieldName, int numTokens) { return 1.0f; }\n            public float queryNorm(float sumOfSquaredWeights) { return 1.0f; }\n            public float sloppyFreq(int distance) { return 1.0f; }\n            public float tf(float freq) { return 1.0f; }\n        };\n        \n        srchr.setSimilarity(customSimilarity);\n        msrchr.setSimilarity(customSimilarity);\n  \n        Query query=new TermQuery(new Term(\"contents\", \"doc0\"));\n  \n        // Get a score from IndexSearcher\n        TopDocs topDocs = srchr.search(query, null, 1);\n        float score1 = topDocs.getMaxScore();\n        \n        // Get the score from MultiSearcher\n        topDocs = msrchr.search(query, null, 1);\n        float scoreN = topDocs.getMaxScore();\n        \n        // The scores from the IndexSearcher and Multisearcher should be the same\n        // if the same similarity is used.\n        assertEquals(\"MultiSearcher score must be equal to single esrcher score!\", score1, scoreN, 1e-6);\n    }\n\n","sourceOld":"    /**\n     * test that custom similarity is in effect when using MultiSearcher (LUCENE-789).\n     * @throws IOException \n     */\n    public void testCustomSimilarity () throws IOException {\n        RAMDirectory dir = new RAMDirectory();\n        initIndex(dir, 10, true, \"x\"); // documents with two tokens \"doc0\" and \"x\", \"doc1\" and x, etc...\n        IndexSearcher srchr = new IndexSearcher(dir);\n        MultiSearcher msrchr = getMultiSearcherInstance(new Searcher[]{srchr});\n        \n        Similarity customSimilarity = new DefaultSimilarity() {\n            // overide all\n            public float idf(int docFreq, int numDocs) { return 100.0f; }\n            public float coord(int overlap, int maxOverlap) { return 1.0f; }\n            public float lengthNorm(String fieldName, int numTokens) { return 1.0f; }\n            public float queryNorm(float sumOfSquaredWeights) { return 1.0f; }\n            public float sloppyFreq(int distance) { return 1.0f; }\n            public float tf(float freq) { return 1.0f; }\n        };\n        \n        srchr.setSimilarity(customSimilarity);\n        msrchr.setSimilarity(customSimilarity);\n  \n        Query query=new TermQuery(new Term(\"contents\", \"doc0\"));\n  \n        // Get a score from IndexSearcher\n        TopDocs topDocs = srchr.search(query, null, 1);\n        float score1 = topDocs.getMaxScore();\n        \n        // Get the score from MultiSearcher\n        topDocs = msrchr.search(query, null, 1);\n        float scoreN = topDocs.getMaxScore();\n        \n        // The scores from the IndexSearcher and Multisearcher should be the same\n        // if the same similarity is used.\n        assertEquals(\"MultiSearcher score must be equal to single esrcher score!\", score1, scoreN, 1e-6);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1326054a8d3aa66382d49decc7f330955c9c6f71","date":1257386139,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestMultiSearcher#testCustomSimilarity().mjava","pathOld":"src/test/org/apache/lucene/search/TestMultiSearcher#testCustomSimilarity().mjava","sourceNew":"    /**\n     * test that custom similarity is in effect when using MultiSearcher (LUCENE-789).\n     * @throws IOException \n     */\n    public void testCustomSimilarity () throws IOException {\n        RAMDirectory dir = new RAMDirectory();\n        initIndex(dir, 10, true, \"x\"); // documents with two tokens \"doc0\" and \"x\", \"doc1\" and x, etc...\n        IndexSearcher srchr = new IndexSearcher(dir, true);\n        MultiSearcher msrchr = getMultiSearcherInstance(new Searcher[]{srchr});\n        \n        Similarity customSimilarity = new DefaultSimilarity() {\n            // overide all\n            @Override\n            public float idf(int docFreq, int numDocs) { return 100.0f; }\n            @Override\n            public float coord(int overlap, int maxOverlap) { return 1.0f; }\n            @Override\n            public float lengthNorm(String fieldName, int numTokens) { return 1.0f; }\n            @Override\n            public float queryNorm(float sumOfSquaredWeights) { return 1.0f; }\n            @Override\n            public float sloppyFreq(int distance) { return 1.0f; }\n            @Override\n            public float tf(float freq) { return 1.0f; }\n        };\n        \n        srchr.setSimilarity(customSimilarity);\n        msrchr.setSimilarity(customSimilarity);\n  \n        Query query=new TermQuery(new Term(\"contents\", \"doc0\"));\n  \n        // Get a score from IndexSearcher\n        TopDocs topDocs = srchr.search(query, null, 1);\n        float score1 = topDocs.getMaxScore();\n        \n        // Get the score from MultiSearcher\n        topDocs = msrchr.search(query, null, 1);\n        float scoreN = topDocs.getMaxScore();\n        \n        // The scores from the IndexSearcher and Multisearcher should be the same\n        // if the same similarity is used.\n        assertEquals(\"MultiSearcher score must be equal to single esrcher score!\", score1, scoreN, 1e-6);\n    }\n\n","sourceOld":"    /**\n     * test that custom similarity is in effect when using MultiSearcher (LUCENE-789).\n     * @throws IOException \n     */\n    public void testCustomSimilarity () throws IOException {\n        RAMDirectory dir = new RAMDirectory();\n        initIndex(dir, 10, true, \"x\"); // documents with two tokens \"doc0\" and \"x\", \"doc1\" and x, etc...\n        IndexSearcher srchr = new IndexSearcher(dir, true);\n        MultiSearcher msrchr = getMultiSearcherInstance(new Searcher[]{srchr});\n        \n        Similarity customSimilarity = new DefaultSimilarity() {\n            // overide all\n            public float idf(int docFreq, int numDocs) { return 100.0f; }\n            public float coord(int overlap, int maxOverlap) { return 1.0f; }\n            public float lengthNorm(String fieldName, int numTokens) { return 1.0f; }\n            public float queryNorm(float sumOfSquaredWeights) { return 1.0f; }\n            public float sloppyFreq(int distance) { return 1.0f; }\n            public float tf(float freq) { return 1.0f; }\n        };\n        \n        srchr.setSimilarity(customSimilarity);\n        msrchr.setSimilarity(customSimilarity);\n  \n        Query query=new TermQuery(new Term(\"contents\", \"doc0\"));\n  \n        // Get a score from IndexSearcher\n        TopDocs topDocs = srchr.search(query, null, 1);\n        float score1 = topDocs.getMaxScore();\n        \n        // Get the score from MultiSearcher\n        topDocs = msrchr.search(query, null, 1);\n        float scoreN = topDocs.getMaxScore();\n        \n        // The scores from the IndexSearcher and Multisearcher should be the same\n        // if the same similarity is used.\n        assertEquals(\"MultiSearcher score must be equal to single esrcher score!\", score1, scoreN, 1e-6);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7325af1b9f607a9e8e30785e8de8ffd1d4c08ddf","date":1257873376,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestMultiSearcher#testCustomSimilarity().mjava","pathOld":"src/test/org/apache/lucene/search/TestMultiSearcher#testCustomSimilarity().mjava","sourceNew":"    /**\n     * test that custom similarity is in effect when using MultiSearcher (LUCENE-789).\n     * @throws IOException \n     */\n    public void testCustomSimilarity () throws IOException {\n        RAMDirectory dir = new RAMDirectory();\n        initIndex(dir, 10, true, \"x\"); // documents with two tokens \"doc0\" and \"x\", \"doc1\" and x, etc...\n        IndexSearcher srchr = new IndexSearcher(dir, true);\n        MultiSearcher msrchr = getMultiSearcherInstance(new Searcher[]{srchr});\n        \n        Similarity customSimilarity = new DefaultSimilarity() {\n            // overide all\n            @Override\n            public float idf(int docFreq, int numDocs) { return 100.0f; }\n            @Override\n            public float coord(int overlap, int maxOverlap) { return 1.0f; }\n            @Override\n            public float lengthNorm(String fieldName, int numTokens) { return 1.0f; }\n            @Override\n            public float queryNorm(float sumOfSquaredWeights) { return 1.0f; }\n            @Override\n            public float sloppyFreq(int distance) { return 1.0f; }\n            @Override\n            public float tf(float freq) { return 1.0f; }\n        };\n        \n        srchr.setSimilarity(customSimilarity);\n        msrchr.setSimilarity(customSimilarity);\n  \n        Query query=new TermQuery(new Term(\"contents\", \"doc0\"));\n  \n        // Get a score from IndexSearcher\n        TopDocs topDocs = srchr.search(query, null, 1);\n        float score1 = topDocs.getMaxScore();\n        \n        // Get the score from MultiSearcher\n        topDocs = msrchr.search(query, null, 1);\n        float scoreN = topDocs.getMaxScore();\n        \n        // The scores from the IndexSearcher and Multisearcher should be the same\n        // if the same similarity is used.\n        assertEquals(\"MultiSearcher score must be equal to single searcher score!\", score1, scoreN, 1e-6);\n    }\n\n","sourceOld":"    /**\n     * test that custom similarity is in effect when using MultiSearcher (LUCENE-789).\n     * @throws IOException \n     */\n    public void testCustomSimilarity () throws IOException {\n        RAMDirectory dir = new RAMDirectory();\n        initIndex(dir, 10, true, \"x\"); // documents with two tokens \"doc0\" and \"x\", \"doc1\" and x, etc...\n        IndexSearcher srchr = new IndexSearcher(dir, true);\n        MultiSearcher msrchr = getMultiSearcherInstance(new Searcher[]{srchr});\n        \n        Similarity customSimilarity = new DefaultSimilarity() {\n            // overide all\n            @Override\n            public float idf(int docFreq, int numDocs) { return 100.0f; }\n            @Override\n            public float coord(int overlap, int maxOverlap) { return 1.0f; }\n            @Override\n            public float lengthNorm(String fieldName, int numTokens) { return 1.0f; }\n            @Override\n            public float queryNorm(float sumOfSquaredWeights) { return 1.0f; }\n            @Override\n            public float sloppyFreq(int distance) { return 1.0f; }\n            @Override\n            public float tf(float freq) { return 1.0f; }\n        };\n        \n        srchr.setSimilarity(customSimilarity);\n        msrchr.setSimilarity(customSimilarity);\n  \n        Query query=new TermQuery(new Term(\"contents\", \"doc0\"));\n  \n        // Get a score from IndexSearcher\n        TopDocs topDocs = srchr.search(query, null, 1);\n        float score1 = topDocs.getMaxScore();\n        \n        // Get the score from MultiSearcher\n        topDocs = msrchr.search(query, null, 1);\n        float scoreN = topDocs.getMaxScore();\n        \n        // The scores from the IndexSearcher and Multisearcher should be the same\n        // if the same similarity is used.\n        assertEquals(\"MultiSearcher score must be equal to single esrcher score!\", score1, scoreN, 1e-6);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiSearcher#testCustomSimilarity().mjava","pathOld":"src/test/org/apache/lucene/search/TestMultiSearcher#testCustomSimilarity().mjava","sourceNew":"    /**\n     * test that custom similarity is in effect when using MultiSearcher (LUCENE-789).\n     * @throws IOException \n     */\n    public void testCustomSimilarity () throws IOException {\n        RAMDirectory dir = new RAMDirectory();\n        initIndex(dir, 10, true, \"x\"); // documents with two tokens \"doc0\" and \"x\", \"doc1\" and x, etc...\n        IndexSearcher srchr = new IndexSearcher(dir, true);\n        MultiSearcher msrchr = getMultiSearcherInstance(new Searcher[]{srchr});\n        \n        Similarity customSimilarity = new DefaultSimilarity() {\n            // overide all\n            @Override\n            public float idf(int docFreq, int numDocs) { return 100.0f; }\n            @Override\n            public float coord(int overlap, int maxOverlap) { return 1.0f; }\n            @Override\n            public float lengthNorm(String fieldName, int numTokens) { return 1.0f; }\n            @Override\n            public float queryNorm(float sumOfSquaredWeights) { return 1.0f; }\n            @Override\n            public float sloppyFreq(int distance) { return 1.0f; }\n            @Override\n            public float tf(float freq) { return 1.0f; }\n        };\n        \n        srchr.setSimilarity(customSimilarity);\n        msrchr.setSimilarity(customSimilarity);\n  \n        Query query=new TermQuery(new Term(\"contents\", \"doc0\"));\n  \n        // Get a score from IndexSearcher\n        TopDocs topDocs = srchr.search(query, null, 1);\n        float score1 = topDocs.getMaxScore();\n        \n        // Get the score from MultiSearcher\n        topDocs = msrchr.search(query, null, 1);\n        float scoreN = topDocs.getMaxScore();\n        \n        // The scores from the IndexSearcher and Multisearcher should be the same\n        // if the same similarity is used.\n        assertEquals(\"MultiSearcher score must be equal to single searcher score!\", score1, scoreN, 1e-6);\n    }\n\n","sourceOld":"    /**\n     * test that custom similarity is in effect when using MultiSearcher (LUCENE-789).\n     * @throws IOException \n     */\n    public void testCustomSimilarity () throws IOException {\n        RAMDirectory dir = new RAMDirectory();\n        initIndex(dir, 10, true, \"x\"); // documents with two tokens \"doc0\" and \"x\", \"doc1\" and x, etc...\n        IndexSearcher srchr = new IndexSearcher(dir, true);\n        MultiSearcher msrchr = getMultiSearcherInstance(new Searcher[]{srchr});\n        \n        Similarity customSimilarity = new DefaultSimilarity() {\n            // overide all\n            @Override\n            public float idf(int docFreq, int numDocs) { return 100.0f; }\n            @Override\n            public float coord(int overlap, int maxOverlap) { return 1.0f; }\n            @Override\n            public float lengthNorm(String fieldName, int numTokens) { return 1.0f; }\n            @Override\n            public float queryNorm(float sumOfSquaredWeights) { return 1.0f; }\n            @Override\n            public float sloppyFreq(int distance) { return 1.0f; }\n            @Override\n            public float tf(float freq) { return 1.0f; }\n        };\n        \n        srchr.setSimilarity(customSimilarity);\n        msrchr.setSimilarity(customSimilarity);\n  \n        Query query=new TermQuery(new Term(\"contents\", \"doc0\"));\n  \n        // Get a score from IndexSearcher\n        TopDocs topDocs = srchr.search(query, null, 1);\n        float score1 = topDocs.getMaxScore();\n        \n        // Get the score from MultiSearcher\n        topDocs = msrchr.search(query, null, 1);\n        float scoreN = topDocs.getMaxScore();\n        \n        // The scores from the IndexSearcher and Multisearcher should be the same\n        // if the same similarity is used.\n        assertEquals(\"MultiSearcher score must be equal to single searcher score!\", score1, scoreN, 1e-6);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1326054a8d3aa66382d49decc7f330955c9c6f71":["0a046c0c310bc77931fc8441bd920053b607dd14"],"94b168f99ebebb8d23639b67c3f4f8939cd4f5be":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["94b168f99ebebb8d23639b67c3f4f8939cd4f5be"],"7325af1b9f607a9e8e30785e8de8ffd1d4c08ddf":["1326054a8d3aa66382d49decc7f330955c9c6f71"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0a046c0c310bc77931fc8441bd920053b607dd14":["94b168f99ebebb8d23639b67c3f4f8939cd4f5be","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["7325af1b9f607a9e8e30785e8de8ffd1d4c08ddf"]},"commit2Childs":{"1326054a8d3aa66382d49decc7f330955c9c6f71":["7325af1b9f607a9e8e30785e8de8ffd1d4c08ddf"],"94b168f99ebebb8d23639b67c3f4f8939cd4f5be":["e8d1458a2543cbd30cbfe7929be4dcb5c5251659","0a046c0c310bc77931fc8441bd920053b607dd14"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["0a046c0c310bc77931fc8441bd920053b607dd14"],"7325af1b9f607a9e8e30785e8de8ffd1d4c08ddf":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"0a046c0c310bc77931fc8441bd920053b607dd14":["1326054a8d3aa66382d49decc7f330955c9c6f71"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["94b168f99ebebb8d23639b67c3f4f8939cd4f5be"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}