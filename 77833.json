{"path":"contrib/gdata-server/src/core/java/org/apache/lucene/gdata/storage/lucenestorage/StorageEntryWrapper#StorageEntryWrapper(ServerBaseEntry,StorageOperation).mjava","commits":[{"id":"5824af871ba6863399636aa5989bfc0ef2ea448c","date":1166013128,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/gdata-server/src/core/java/org/apache/lucene/gdata/storage/lucenestorage/StorageEntryWrapper#StorageEntryWrapper(ServerBaseEntry,StorageOperation).mjava","pathOld":"contrib/gdata-server/src/java/org/apache/lucene/gdata/storage/lucenestorage/StorageEntryWrapper#StorageEntryWrapper(ServerBaseEntry,StorageOperation).mjava","sourceNew":"    /**\n     * Creates a new StorageEntryWrapper.\n     * \n     * @param entry -\n     *            the entry to wrap\n     * \n     * @param operation -\n     *            the StorageOperation\n     * \n     * @throws IOException -\n     *             if the entry content can not be generated\n     */\n    public StorageEntryWrapper(final ServerBaseEntry entry,\n            StorageOperation operation) throws IOException {\n        this.entry = entry;\n        this.operation = operation;\n        this.entryId = entry.getId();\n        this.feedId = entry.getFeedId();\n        this.version = entry.getVersion();\n        if (operation != StorageOperation.DELETE) {\n            this.config = entry.getServiceConfig();\n            this.content = buildContent();\n            \n         \n        }\n        this.timestamp = new Long(\n                this.entry.getUpdated() != null ? this.entry.getUpdated()\n                        .getValue() : System.currentTimeMillis());\n            \n\n    }\n\n","sourceOld":"    /**\n     * Creates a new StorageEntryWrapper.\n     * \n     * @param entry -\n     *            the entry to wrap\n     * \n     * @param operation -\n     *            the StorageOperation\n     * \n     * @throws IOException -\n     *             if the entry content can not be generated\n     */\n    public StorageEntryWrapper(final ServerBaseEntry entry,\n            StorageOperation operation) throws IOException {\n        this.entry = entry;\n        this.operation = operation;\n        this.entryId = entry.getId();\n        this.feedId = entry.getFeedId();\n        this.version = entry.getVersion();\n        if (operation != StorageOperation.DELETE) {\n            this.config = entry.getServiceConfig();\n            this.content = buildContent();\n            \n         \n        }\n        this.timestamp = new Long(\n                this.entry.getUpdated() != null ? this.entry.getUpdated()\n                        .getValue() : System.currentTimeMillis());\n            \n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe","date":1166036663,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/gdata-server/src/core/src/java/org/apache/lucene/gdata/storage/lucenestorage/StorageEntryWrapper#StorageEntryWrapper(ServerBaseEntry,StorageOperation).mjava","pathOld":"contrib/gdata-server/src/core/java/org/apache/lucene/gdata/storage/lucenestorage/StorageEntryWrapper#StorageEntryWrapper(ServerBaseEntry,StorageOperation).mjava","sourceNew":"    /**\n     * Creates a new StorageEntryWrapper.\n     * \n     * @param entry -\n     *            the entry to wrap\n     * \n     * @param operation -\n     *            the StorageOperation\n     * \n     * @throws IOException -\n     *             if the entry content can not be generated\n     */\n    public StorageEntryWrapper(final ServerBaseEntry entry,\n            StorageOperation operation) throws IOException {\n        this.entry = entry;\n        this.operation = operation;\n        this.entryId = entry.getId();\n        this.feedId = entry.getFeedId();\n        this.version = entry.getVersion();\n        if (operation != StorageOperation.DELETE) {\n            this.config = entry.getServiceConfig();\n            this.content = buildContent();\n            \n         \n        }\n        this.timestamp = new Long(\n                this.entry.getUpdated() != null ? this.entry.getUpdated()\n                        .getValue() : System.currentTimeMillis());\n            \n\n    }\n\n","sourceOld":"    /**\n     * Creates a new StorageEntryWrapper.\n     * \n     * @param entry -\n     *            the entry to wrap\n     * \n     * @param operation -\n     *            the StorageOperation\n     * \n     * @throws IOException -\n     *             if the entry content can not be generated\n     */\n    public StorageEntryWrapper(final ServerBaseEntry entry,\n            StorageOperation operation) throws IOException {\n        this.entry = entry;\n        this.operation = operation;\n        this.entryId = entry.getId();\n        this.feedId = entry.getFeedId();\n        this.version = entry.getVersion();\n        if (operation != StorageOperation.DELETE) {\n            this.config = entry.getServiceConfig();\n            this.content = buildContent();\n            \n         \n        }\n        this.timestamp = new Long(\n                this.entry.getUpdated() != null ? this.entry.getUpdated()\n                        .getValue() : System.currentTimeMillis());\n            \n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe":["5824af871ba6863399636aa5989bfc0ef2ea448c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5824af871ba6863399636aa5989bfc0ef2ea448c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe"]},"commit2Childs":{"4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5824af871ba6863399636aa5989bfc0ef2ea448c"],"5824af871ba6863399636aa5989bfc0ef2ea448c":["4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}