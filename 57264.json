{"path":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#doTestSortedVsStoredFields(int,double,Supplier[byte[]]).mjava","commits":[{"id":"11134e449dabe11d6d0ff6a564d84b82cbe93722","date":1477299083,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#doTestSortedVsStoredFields(int,double,Supplier[byte[]]).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#doTestSortedVsStoredFields(int,int,int).mjava","sourceNew":"  protected void doTestSortedVsStoredFields(int numDocs, double density, Supplier<byte[]> bytes) throws Exception {\n    Directory dir = newFSDirectory(createTempDir(\"dvduel\"));\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    Document doc = new Document();\n    Field idField = new StringField(\"id\", \"\", Field.Store.NO);\n    Field storedField = new StoredField(\"stored\", new byte[0]);\n    Field dvField = new SortedDocValuesField(\"dv\", new BytesRef());\n    doc.add(idField);\n    doc.add(storedField);\n    doc.add(dvField);\n    \n    // index some docs\n    for (int i = 0; i < numDocs; i++) {\n      if (random().nextDouble() > density) {\n        writer.addDocument(new Document());\n        continue;\n      }\n      idField.setStringValue(Integer.toString(i));\n      byte[] buffer = bytes.get();\n      storedField.setBytesValue(buffer);\n      dvField.setBytesValue(buffer);\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    \n    // compare\n    DirectoryReader ir = writer.getReader();\n    TestUtil.checkReader(ir);\n    for (LeafReaderContext context : ir.leaves()) {\n      LeafReader r = context.reader();\n      BinaryDocValues docValues = DocValues.getBinary(r, \"dv\");\n      docValues.nextDoc();\n      for (int i = 0; i < r.maxDoc(); i++) {\n        BytesRef binaryValue = r.document(i).getBinaryValue(\"stored\");\n        if (binaryValue == null) {\n          assertTrue(docValues.docID() > i);\n        } else {\n          assertEquals(i, docValues.docID());\n          assertEquals(binaryValue, docValues.binaryValue());\n          docValues.nextDoc();\n        }\n      }\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, docValues.docID());\n    }\n    ir.close();\n    writer.forceMerge(1);\n    \n    // compare again\n    ir = writer.getReader();\n    TestUtil.checkReader(ir);\n    for (LeafReaderContext context : ir.leaves()) {\n      LeafReader r = context.reader();\n      BinaryDocValues docValues = DocValues.getBinary(r, \"dv\");\n      docValues.nextDoc();\n      for (int i = 0; i < r.maxDoc(); i++) {\n        BytesRef binaryValue = r.document(i).getBinaryValue(\"stored\");\n        if (binaryValue == null) {\n          assertTrue(docValues.docID() > i);\n        } else {\n          assertEquals(i, docValues.docID());\n          assertEquals(binaryValue, docValues.binaryValue());\n          docValues.nextDoc();\n        }\n      }\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, docValues.docID());\n    }\n    ir.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  protected void doTestSortedVsStoredFields(int numDocs, int minLength, int maxLength) throws Exception {\n    Directory dir = newFSDirectory(createTempDir(\"dvduel\"));\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    Document doc = new Document();\n    Field idField = new StringField(\"id\", \"\", Field.Store.NO);\n    Field storedField = new StoredField(\"stored\", new byte[0]);\n    Field dvField = new SortedDocValuesField(\"dv\", new BytesRef());\n    doc.add(idField);\n    doc.add(storedField);\n    doc.add(dvField);\n    \n    // index some docs\n    for (int i = 0; i < numDocs; i++) {\n      idField.setStringValue(Integer.toString(i));\n      final int length;\n      if (minLength == maxLength) {\n        length = minLength; // fixed length\n      } else {\n        length = TestUtil.nextInt(random(), minLength, maxLength);\n      }\n      byte buffer[] = new byte[length];\n      random().nextBytes(buffer);\n      storedField.setBytesValue(buffer);\n      dvField.setBytesValue(buffer);\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    \n    // compare\n    DirectoryReader ir = writer.getReader();\n    for (LeafReaderContext context : ir.leaves()) {\n      LeafReader r = context.reader();\n      BinaryDocValues docValues = DocValues.getBinary(r, \"dv\");\n      for (int i = 0; i < r.maxDoc(); i++) {\n        BytesRef binaryValue = r.document(i).getBinaryValue(\"stored\");\n        assertEquals(i, docValues.nextDoc());\n        assertEquals(binaryValue, docValues.binaryValue());\n      }\n    }\n    ir.close();\n    writer.forceMerge(1);\n    \n    // compare again\n    ir = writer.getReader();\n    for (LeafReaderContext context : ir.leaves()) {\n      LeafReader r = context.reader();\n      BinaryDocValues docValues = DocValues.getBinary(r, \"dv\");\n      for (int i = 0; i < r.maxDoc(); i++) {\n        BytesRef binaryValue = r.document(i).getBinaryValue(\"stored\");\n        assertEquals(i, docValues.nextDoc());\n        assertEquals(binaryValue, docValues.binaryValue());\n      }\n    }\n    ir.close();\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2714c85633b642b29871cf5ff8d17d3ba7bfd76","date":1477307753,"type":1,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#doTestSortedVsStoredFields(int,double,Supplier[byte[]]).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#doTestSortedVsStoredFields(int,int,int).mjava","sourceNew":"  protected void doTestSortedVsStoredFields(int numDocs, double density, Supplier<byte[]> bytes) throws Exception {\n    Directory dir = newFSDirectory(createTempDir(\"dvduel\"));\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    Document doc = new Document();\n    Field idField = new StringField(\"id\", \"\", Field.Store.NO);\n    Field storedField = new StoredField(\"stored\", new byte[0]);\n    Field dvField = new SortedDocValuesField(\"dv\", new BytesRef());\n    doc.add(idField);\n    doc.add(storedField);\n    doc.add(dvField);\n    \n    // index some docs\n    for (int i = 0; i < numDocs; i++) {\n      if (random().nextDouble() > density) {\n        writer.addDocument(new Document());\n        continue;\n      }\n      idField.setStringValue(Integer.toString(i));\n      byte[] buffer = bytes.get();\n      storedField.setBytesValue(buffer);\n      dvField.setBytesValue(buffer);\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    \n    // compare\n    DirectoryReader ir = writer.getReader();\n    TestUtil.checkReader(ir);\n    for (LeafReaderContext context : ir.leaves()) {\n      LeafReader r = context.reader();\n      BinaryDocValues docValues = DocValues.getBinary(r, \"dv\");\n      docValues.nextDoc();\n      for (int i = 0; i < r.maxDoc(); i++) {\n        BytesRef binaryValue = r.document(i).getBinaryValue(\"stored\");\n        if (binaryValue == null) {\n          assertTrue(docValues.docID() > i);\n        } else {\n          assertEquals(i, docValues.docID());\n          assertEquals(binaryValue, docValues.binaryValue());\n          docValues.nextDoc();\n        }\n      }\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, docValues.docID());\n    }\n    ir.close();\n    writer.forceMerge(1);\n    \n    // compare again\n    ir = writer.getReader();\n    TestUtil.checkReader(ir);\n    for (LeafReaderContext context : ir.leaves()) {\n      LeafReader r = context.reader();\n      BinaryDocValues docValues = DocValues.getBinary(r, \"dv\");\n      docValues.nextDoc();\n      for (int i = 0; i < r.maxDoc(); i++) {\n        BytesRef binaryValue = r.document(i).getBinaryValue(\"stored\");\n        if (binaryValue == null) {\n          assertTrue(docValues.docID() > i);\n        } else {\n          assertEquals(i, docValues.docID());\n          assertEquals(binaryValue, docValues.binaryValue());\n          docValues.nextDoc();\n        }\n      }\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, docValues.docID());\n    }\n    ir.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  protected void doTestSortedVsStoredFields(int numDocs, int minLength, int maxLength) throws Exception {\n    Directory dir = newFSDirectory(createTempDir(\"dvduel\"));\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    Document doc = new Document();\n    Field idField = new StringField(\"id\", \"\", Field.Store.NO);\n    Field storedField = new StoredField(\"stored\", new byte[0]);\n    Field dvField = new SortedDocValuesField(\"dv\", new BytesRef());\n    doc.add(idField);\n    doc.add(storedField);\n    doc.add(dvField);\n    \n    // index some docs\n    for (int i = 0; i < numDocs; i++) {\n      idField.setStringValue(Integer.toString(i));\n      final int length;\n      if (minLength == maxLength) {\n        length = minLength; // fixed length\n      } else {\n        length = TestUtil.nextInt(random(), minLength, maxLength);\n      }\n      byte buffer[] = new byte[length];\n      random().nextBytes(buffer);\n      storedField.setBytesValue(buffer);\n      dvField.setBytesValue(buffer);\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    \n    // compare\n    DirectoryReader ir = writer.getReader();\n    for (LeafReaderContext context : ir.leaves()) {\n      LeafReader r = context.reader();\n      BinaryDocValues docValues = DocValues.getBinary(r, \"dv\");\n      for (int i = 0; i < r.maxDoc(); i++) {\n        BytesRef binaryValue = r.document(i).getBinaryValue(\"stored\");\n        assertEquals(i, docValues.nextDoc());\n        assertEquals(binaryValue, docValues.binaryValue());\n      }\n    }\n    ir.close();\n    writer.forceMerge(1);\n    \n    // compare again\n    ir = writer.getReader();\n    for (LeafReaderContext context : ir.leaves()) {\n      LeafReader r = context.reader();\n      BinaryDocValues docValues = DocValues.getBinary(r, \"dv\");\n      for (int i = 0; i < r.maxDoc(); i++) {\n        BytesRef binaryValue = r.document(i).getBinaryValue(\"stored\");\n        assertEquals(i, docValues.nextDoc());\n        assertEquals(binaryValue, docValues.binaryValue());\n      }\n    }\n    ir.close();\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"80d0e6d59ae23f4a6f30eaf40bfb40742300287f","date":1477598926,"type":1,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#doTestSortedVsStoredFields(int,double,Supplier[byte[]]).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#doTestSortedVsStoredFields(int,int,int).mjava","sourceNew":"  protected void doTestSortedVsStoredFields(int numDocs, double density, Supplier<byte[]> bytes) throws Exception {\n    Directory dir = newFSDirectory(createTempDir(\"dvduel\"));\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    Document doc = new Document();\n    Field idField = new StringField(\"id\", \"\", Field.Store.NO);\n    Field storedField = new StoredField(\"stored\", new byte[0]);\n    Field dvField = new SortedDocValuesField(\"dv\", new BytesRef());\n    doc.add(idField);\n    doc.add(storedField);\n    doc.add(dvField);\n    \n    // index some docs\n    for (int i = 0; i < numDocs; i++) {\n      if (random().nextDouble() > density) {\n        writer.addDocument(new Document());\n        continue;\n      }\n      idField.setStringValue(Integer.toString(i));\n      byte[] buffer = bytes.get();\n      storedField.setBytesValue(buffer);\n      dvField.setBytesValue(buffer);\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    \n    // compare\n    DirectoryReader ir = writer.getReader();\n    TestUtil.checkReader(ir);\n    for (LeafReaderContext context : ir.leaves()) {\n      LeafReader r = context.reader();\n      BinaryDocValues docValues = DocValues.getBinary(r, \"dv\");\n      docValues.nextDoc();\n      for (int i = 0; i < r.maxDoc(); i++) {\n        BytesRef binaryValue = r.document(i).getBinaryValue(\"stored\");\n        if (binaryValue == null) {\n          assertTrue(docValues.docID() > i);\n        } else {\n          assertEquals(i, docValues.docID());\n          assertEquals(binaryValue, docValues.binaryValue());\n          docValues.nextDoc();\n        }\n      }\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, docValues.docID());\n    }\n    ir.close();\n    writer.forceMerge(1);\n    \n    // compare again\n    ir = writer.getReader();\n    TestUtil.checkReader(ir);\n    for (LeafReaderContext context : ir.leaves()) {\n      LeafReader r = context.reader();\n      BinaryDocValues docValues = DocValues.getBinary(r, \"dv\");\n      docValues.nextDoc();\n      for (int i = 0; i < r.maxDoc(); i++) {\n        BytesRef binaryValue = r.document(i).getBinaryValue(\"stored\");\n        if (binaryValue == null) {\n          assertTrue(docValues.docID() > i);\n        } else {\n          assertEquals(i, docValues.docID());\n          assertEquals(binaryValue, docValues.binaryValue());\n          docValues.nextDoc();\n        }\n      }\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, docValues.docID());\n    }\n    ir.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  protected void doTestSortedVsStoredFields(int numDocs, int minLength, int maxLength) throws Exception {\n    Directory dir = newFSDirectory(createTempDir(\"dvduel\"));\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    Document doc = new Document();\n    Field idField = new StringField(\"id\", \"\", Field.Store.NO);\n    Field storedField = new StoredField(\"stored\", new byte[0]);\n    Field dvField = new SortedDocValuesField(\"dv\", new BytesRef());\n    doc.add(idField);\n    doc.add(storedField);\n    doc.add(dvField);\n    \n    // index some docs\n    for (int i = 0; i < numDocs; i++) {\n      idField.setStringValue(Integer.toString(i));\n      final int length;\n      if (minLength == maxLength) {\n        length = minLength; // fixed length\n      } else {\n        length = TestUtil.nextInt(random(), minLength, maxLength);\n      }\n      byte buffer[] = new byte[length];\n      random().nextBytes(buffer);\n      storedField.setBytesValue(buffer);\n      dvField.setBytesValue(buffer);\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    \n    // compare\n    DirectoryReader ir = writer.getReader();\n    for (LeafReaderContext context : ir.leaves()) {\n      LeafReader r = context.reader();\n      BinaryDocValues docValues = DocValues.getBinary(r, \"dv\");\n      for (int i = 0; i < r.maxDoc(); i++) {\n        BytesRef binaryValue = r.document(i).getBinaryValue(\"stored\");\n        assertEquals(i, docValues.nextDoc());\n        assertEquals(binaryValue, docValues.binaryValue());\n      }\n    }\n    ir.close();\n    writer.forceMerge(1);\n    \n    // compare again\n    ir = writer.getReader();\n    for (LeafReaderContext context : ir.leaves()) {\n      LeafReader r = context.reader();\n      BinaryDocValues docValues = DocValues.getBinary(r, \"dv\");\n      for (int i = 0; i < r.maxDoc(); i++) {\n        BytesRef binaryValue = r.document(i).getBinaryValue(\"stored\");\n        assertEquals(i, docValues.nextDoc());\n        assertEquals(binaryValue, docValues.binaryValue());\n      }\n    }\n    ir.close();\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"11134e449dabe11d6d0ff6a564d84b82cbe93722":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d2714c85633b642b29871cf5ff8d17d3ba7bfd76"],"d2714c85633b642b29871cf5ff8d17d3ba7bfd76":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","11134e449dabe11d6d0ff6a564d84b82cbe93722"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d2714c85633b642b29871cf5ff8d17d3ba7bfd76"]},"commit2Childs":{"11134e449dabe11d6d0ff6a564d84b82cbe93722":["d2714c85633b642b29871cf5ff8d17d3ba7bfd76"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["11134e449dabe11d6d0ff6a564d84b82cbe93722","80d0e6d59ae23f4a6f30eaf40bfb40742300287f","d2714c85633b642b29871cf5ff8d17d3ba7bfd76"],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":[],"d2714c85633b642b29871cf5ff8d17d3ba7bfd76":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}