{"path":"lucene/analysis/nori/src/tools/java/org/apache/lucene/analysis/ko/util/BinaryDictionaryWriter#writePosDict(String).mjava","commits":[{"id":"8493925b2e70246f0961df584c01a8c2e61ee52f","date":1523611602,"type":0,"author":"Jim Ferenczi","isMerge":false,"pathNew":"lucene/analysis/nori/src/tools/java/org/apache/lucene/analysis/ko/util/BinaryDictionaryWriter#writePosDict(String).mjava","pathOld":"/dev/null","sourceNew":"  protected void writePosDict(String filename) throws IOException {\n    new File(filename).getParentFile().mkdirs();\n    OutputStream os = new FileOutputStream(filename);\n    try {\n      os = new BufferedOutputStream(os);\n      final DataOutput out = new OutputStreamDataOutput(os);\n      CodecUtil.writeHeader(out, BinaryDictionary.POSDICT_HEADER, BinaryDictionary.VERSION);\n      out.writeVInt(posDict.size());\n      for (String s : posDict) {\n        if (s == null) {\n          out.writeByte((byte) POS.Tag.UNKNOWN.ordinal());\n        } else {\n          String data[] = CSVUtil.parse(s);\n          assert data.length == 2 : \"malformed pos/semanticClass: \" + s;\n          out.writeByte((byte) POS.Tag.valueOf(data[0]).ordinal());\n        }\n      }\n    } finally {\n      os.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c6453827f947004a68ad9db7418781e9df2f660","date":1523626811,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/analysis/nori/src/tools/java/org/apache/lucene/analysis/ko/util/BinaryDictionaryWriter#writePosDict(String).mjava","pathOld":"/dev/null","sourceNew":"  protected void writePosDict(String filename) throws IOException {\n    new File(filename).getParentFile().mkdirs();\n    OutputStream os = new FileOutputStream(filename);\n    try {\n      os = new BufferedOutputStream(os);\n      final DataOutput out = new OutputStreamDataOutput(os);\n      CodecUtil.writeHeader(out, BinaryDictionary.POSDICT_HEADER, BinaryDictionary.VERSION);\n      out.writeVInt(posDict.size());\n      for (String s : posDict) {\n        if (s == null) {\n          out.writeByte((byte) POS.Tag.UNKNOWN.ordinal());\n        } else {\n          String data[] = CSVUtil.parse(s);\n          assert data.length == 2 : \"malformed pos/semanticClass: \" + s;\n          out.writeByte((byte) POS.Tag.valueOf(data[0]).ordinal());\n        }\n      }\n    } finally {\n      os.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c149f6975379ebb860e93139126a8aabf8e2b66d","date":1562857174,"type":3,"author":"Namgyu Kim","isMerge":false,"pathNew":"lucene/analysis/nori/src/tools/java/org/apache/lucene/analysis/ko/util/BinaryDictionaryWriter#writePosDict(String).mjava","pathOld":"lucene/analysis/nori/src/tools/java/org/apache/lucene/analysis/ko/util/BinaryDictionaryWriter#writePosDict(String).mjava","sourceNew":"  protected void writePosDict(String filename) throws IOException {\n    new File(filename).getParentFile().mkdirs();\n    OutputStream os = new FileOutputStream(filename);\n    try {\n      os = new BufferedOutputStream(os);\n      final DataOutput out = new OutputStreamDataOutput(os);\n      CodecUtil.writeHeader(out, BinaryDictionary.POSDICT_HEADER, BinaryDictionary.VERSION);\n      out.writeVInt(posDict.size());\n      for (String s : posDict) {\n        if (s == null) {\n          out.writeByte((byte) POS.Tag.UNKNOWN.ordinal());\n        } else {\n          String[] data = CSVUtil.parse(s);\n          if (data.length != 2) {\n            throw new IllegalArgumentException(\"Malformed pos/inflection: \" + s + \"; expected 2 characters\");\n          }\n          out.writeByte((byte) POS.Tag.valueOf(data[0]).ordinal());\n        }\n      }\n    } finally {\n      os.close();\n    }\n  }\n\n","sourceOld":"  protected void writePosDict(String filename) throws IOException {\n    new File(filename).getParentFile().mkdirs();\n    OutputStream os = new FileOutputStream(filename);\n    try {\n      os = new BufferedOutputStream(os);\n      final DataOutput out = new OutputStreamDataOutput(os);\n      CodecUtil.writeHeader(out, BinaryDictionary.POSDICT_HEADER, BinaryDictionary.VERSION);\n      out.writeVInt(posDict.size());\n      for (String s : posDict) {\n        if (s == null) {\n          out.writeByte((byte) POS.Tag.UNKNOWN.ordinal());\n        } else {\n          String data[] = CSVUtil.parse(s);\n          assert data.length == 2 : \"malformed pos/semanticClass: \" + s;\n          out.writeByte((byte) POS.Tag.valueOf(data[0]).ordinal());\n        }\n      }\n    } finally {\n      os.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3010cab237afb0b81c042f263115756e3cc6d67","date":1564503244,"type":5,"author":"Namgyu Kim","isMerge":false,"pathNew":"lucene/analysis/nori/src/java/org/apache/lucene/analysis/ko/util/BinaryDictionaryWriter#writePosDict(Path).mjava","pathOld":"lucene/analysis/nori/src/tools/java/org/apache/lucene/analysis/ko/util/BinaryDictionaryWriter#writePosDict(String).mjava","sourceNew":"  private void writePosDict(Path path) throws IOException {\n    Files.createDirectories(path.getParent());\n    try (OutputStream os = Files.newOutputStream(path);\n         OutputStream bos = new BufferedOutputStream(os)) {\n      final DataOutput out = new OutputStreamDataOutput(bos);\n      CodecUtil.writeHeader(out, BinaryDictionary.POSDICT_HEADER, BinaryDictionary.VERSION);\n      out.writeVInt(posDict.size());\n      for (String s : posDict) {\n        if (s == null) {\n          out.writeByte((byte) POS.Tag.UNKNOWN.ordinal());\n        } else {\n          String[] data = CSVUtil.parse(s);\n          if (data.length != 2) {\n            throw new IllegalArgumentException(\"Malformed pos/inflection: \" + s + \"; expected 2 characters\");\n          }\n          out.writeByte((byte) POS.Tag.valueOf(data[0]).ordinal());\n        }\n      }\n    }\n  }\n\n","sourceOld":"  protected void writePosDict(String filename) throws IOException {\n    new File(filename).getParentFile().mkdirs();\n    OutputStream os = new FileOutputStream(filename);\n    try {\n      os = new BufferedOutputStream(os);\n      final DataOutput out = new OutputStreamDataOutput(os);\n      CodecUtil.writeHeader(out, BinaryDictionary.POSDICT_HEADER, BinaryDictionary.VERSION);\n      out.writeVInt(posDict.size());\n      for (String s : posDict) {\n        if (s == null) {\n          out.writeByte((byte) POS.Tag.UNKNOWN.ordinal());\n        } else {\n          String[] data = CSVUtil.parse(s);\n          if (data.length != 2) {\n            throw new IllegalArgumentException(\"Malformed pos/inflection: \" + s + \"; expected 2 characters\");\n          }\n          out.writeByte((byte) POS.Tag.valueOf(data[0]).ordinal());\n        }\n      }\n    } finally {\n      os.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":5,"author":"Atri Sharma","isMerge":true,"pathNew":"lucene/analysis/nori/src/java/org/apache/lucene/analysis/ko/util/BinaryDictionaryWriter#writePosDict(Path).mjava","pathOld":"lucene/analysis/nori/src/tools/java/org/apache/lucene/analysis/ko/util/BinaryDictionaryWriter#writePosDict(String).mjava","sourceNew":"  private void writePosDict(Path path) throws IOException {\n    Files.createDirectories(path.getParent());\n    try (OutputStream os = Files.newOutputStream(path);\n         OutputStream bos = new BufferedOutputStream(os)) {\n      final DataOutput out = new OutputStreamDataOutput(bos);\n      CodecUtil.writeHeader(out, BinaryDictionary.POSDICT_HEADER, BinaryDictionary.VERSION);\n      out.writeVInt(posDict.size());\n      for (String s : posDict) {\n        if (s == null) {\n          out.writeByte((byte) POS.Tag.UNKNOWN.ordinal());\n        } else {\n          String[] data = CSVUtil.parse(s);\n          if (data.length != 2) {\n            throw new IllegalArgumentException(\"Malformed pos/inflection: \" + s + \"; expected 2 characters\");\n          }\n          out.writeByte((byte) POS.Tag.valueOf(data[0]).ordinal());\n        }\n      }\n    }\n  }\n\n","sourceOld":"  protected void writePosDict(String filename) throws IOException {\n    new File(filename).getParentFile().mkdirs();\n    OutputStream os = new FileOutputStream(filename);\n    try {\n      os = new BufferedOutputStream(os);\n      final DataOutput out = new OutputStreamDataOutput(os);\n      CodecUtil.writeHeader(out, BinaryDictionary.POSDICT_HEADER, BinaryDictionary.VERSION);\n      out.writeVInt(posDict.size());\n      for (String s : posDict) {\n        if (s == null) {\n          out.writeByte((byte) POS.Tag.UNKNOWN.ordinal());\n        } else {\n          String[] data = CSVUtil.parse(s);\n          if (data.length != 2) {\n            throw new IllegalArgumentException(\"Malformed pos/inflection: \" + s + \"; expected 2 characters\");\n          }\n          out.writeByte((byte) POS.Tag.valueOf(data[0]).ordinal());\n        }\n      }\n    } finally {\n      os.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c149f6975379ebb860e93139126a8aabf8e2b66d":["5c6453827f947004a68ad9db7418781e9df2f660"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8493925b2e70246f0961df584c01a8c2e61ee52f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e3010cab237afb0b81c042f263115756e3cc6d67":["c149f6975379ebb860e93139126a8aabf8e2b66d"],"f8061ddd97f3352007d927dae445884a6f3d857b":["c149f6975379ebb860e93139126a8aabf8e2b66d","e3010cab237afb0b81c042f263115756e3cc6d67"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e3010cab237afb0b81c042f263115756e3cc6d67"],"5c6453827f947004a68ad9db7418781e9df2f660":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8493925b2e70246f0961df584c01a8c2e61ee52f"]},"commit2Childs":{"c149f6975379ebb860e93139126a8aabf8e2b66d":["e3010cab237afb0b81c042f263115756e3cc6d67","f8061ddd97f3352007d927dae445884a6f3d857b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8493925b2e70246f0961df584c01a8c2e61ee52f","5c6453827f947004a68ad9db7418781e9df2f660"],"8493925b2e70246f0961df584c01a8c2e61ee52f":["5c6453827f947004a68ad9db7418781e9df2f660"],"e3010cab237afb0b81c042f263115756e3cc6d67":["f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"5c6453827f947004a68ad9db7418781e9df2f660":["c149f6975379ebb860e93139126a8aabf8e2b66d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}