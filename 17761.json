{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/request/json/JsonQueryRequest#withParam(String,Object).mjava","commits":[{"id":"a1f685bdd8a6bd0db4f9fb53514bf80b6b1fe8f6","date":1541507693,"type":0,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/json/JsonQueryRequest#withParam(String,Object).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Add a property to the \"params\" block supported by the JSON query DSL\n   *\n   * The JSON query DSL has special support for a few query parameters (limit/rows, offset/start, filter/fq, etc.).  But\n   * many other query parameters are not explicitly covered by the query DSL.  This method can be used to add any of\n   * these other parameters to the JSON request.\n   * <p>\n   * This method may be called multiple times; each call with a different {@code name} will add a new param name/value\n   * to the params subtree. Invocations that repeat a {@code name} will overwrite the previously specified parameter\n   * values associated with that name.\n   *\n   * @param name the name of the parameter to add\n   * @param value the value of the parameter to add.  Usually a String, Number (Integer, Long, Double), or Boolean.\n   *\n   * @throws IllegalArgumentException if either {@code name} or {@code value} are null\n   */\n  public JsonQueryRequest withParam(String name, Object value) {\n    if (name == null) {\n      throw new IllegalArgumentException(\"'name' parameter must be non-null\");\n    }\n    if (value == null) {\n      throw new IllegalArgumentException(\"'value' parameter must be non-null\");\n    }\n\n    jsonRequestMap.putIfAbsent(\"params\", new HashMap<String, Object>());\n    final Map<String, Object> miscParamsMap = (Map<String, Object>) jsonRequestMap.get(\"params\");\n    miscParamsMap.put(name, value);\n    return this;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a686e6ef1736c0d9ac3804b6a0f520e5982657de","date":1541787308,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/json/JsonQueryRequest#withParam(String,Object).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/json/JsonQueryRequest#withParam(String,Object).mjava","sourceNew":"  /**\n   * Add a property to the \"params\" block supported by the JSON query DSL\n   *\n   * The JSON query DSL has special support for a few query parameters (limit/rows, offset/start, filter/fq, etc.).  But\n   * many other query parameters are not explicitly covered by the query DSL.  This method can be used to add any of\n   * these other parameters to the JSON request.\n   * <p>\n   * This method may be called multiple times; each call with a different {@code name} will add a new param name/value\n   * to the params subtree. Invocations that repeat a {@code name} will overwrite the previously specified parameter\n   * values associated with that name.\n   *\n   * @param name the name of the parameter to add\n   * @param value the value of the parameter to add.  Usually a String, Number (Integer, Long, Double), or Boolean.\n   *\n   * @throws IllegalArgumentException if either {@code name} or {@code value} are null\n   */\n  public JsonQueryRequest withParam(String name, Object value) {\n    if (name == null) {\n      throw new IllegalArgumentException(\"'name' parameter must be non-null\");\n    }\n    if (value == null) {\n      throw new IllegalArgumentException(\"'value' parameter must be non-null\");\n    }\n\n    ((Map<String, Object>)jsonRequestMap.computeIfAbsent(\"params\", s -> new HashMap<String, Object>())).put(name, value);\n    return this;\n  }\n\n","sourceOld":"  /**\n   * Add a property to the \"params\" block supported by the JSON query DSL\n   *\n   * The JSON query DSL has special support for a few query parameters (limit/rows, offset/start, filter/fq, etc.).  But\n   * many other query parameters are not explicitly covered by the query DSL.  This method can be used to add any of\n   * these other parameters to the JSON request.\n   * <p>\n   * This method may be called multiple times; each call with a different {@code name} will add a new param name/value\n   * to the params subtree. Invocations that repeat a {@code name} will overwrite the previously specified parameter\n   * values associated with that name.\n   *\n   * @param name the name of the parameter to add\n   * @param value the value of the parameter to add.  Usually a String, Number (Integer, Long, Double), or Boolean.\n   *\n   * @throws IllegalArgumentException if either {@code name} or {@code value} are null\n   */\n  public JsonQueryRequest withParam(String name, Object value) {\n    if (name == null) {\n      throw new IllegalArgumentException(\"'name' parameter must be non-null\");\n    }\n    if (value == null) {\n      throw new IllegalArgumentException(\"'value' parameter must be non-null\");\n    }\n\n    jsonRequestMap.putIfAbsent(\"params\", new HashMap<String, Object>());\n    final Map<String, Object> miscParamsMap = (Map<String, Object>) jsonRequestMap.get(\"params\");\n    miscParamsMap.put(name, value);\n    return this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a7dfea4f7c80813344b0152e37fc18b31369e8ff","date":1592136683,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/json/JsonQueryRequest#withParam(String,Object).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/json/JsonQueryRequest#withParam(String,Object).mjava","sourceNew":"  /**\n   * Add a property to the \"params\" block supported by the JSON query DSL\n   *\n   * The JSON query DSL has special support for a few query parameters (limit/rows, offset/start, filter/fq, etc.).  But\n   * many other query parameters are not explicitly covered by the query DSL.  This method can be used to add any of\n   * these other parameters to the JSON request.\n   * <p>\n   * This method may be called multiple times; each call with a different {@code name} will add a new param name/value\n   * to the params subtree. Invocations that repeat a {@code name} will overwrite the previously specified parameter\n   * values associated with that name.\n   *\n   * @param name the name of the parameter to add\n   * @param value the value of the parameter to add.  Usually a String, Number (Integer, Long, Double), or Boolean.\n   *\n   * @throws IllegalArgumentException if either {@code name} or {@code value} are null\n   */\n  @SuppressWarnings({\"unchecked\"})\n  public JsonQueryRequest withParam(String name, Object value) {\n    if (name == null) {\n      throw new IllegalArgumentException(\"'name' parameter must be non-null\");\n    }\n    if (value == null) {\n      throw new IllegalArgumentException(\"'value' parameter must be non-null\");\n    }\n\n    ((Map<String, Object>)jsonRequestMap.computeIfAbsent(\"params\", s -> new HashMap<String, Object>())).put(name, value);\n    return this;\n  }\n\n","sourceOld":"  /**\n   * Add a property to the \"params\" block supported by the JSON query DSL\n   *\n   * The JSON query DSL has special support for a few query parameters (limit/rows, offset/start, filter/fq, etc.).  But\n   * many other query parameters are not explicitly covered by the query DSL.  This method can be used to add any of\n   * these other parameters to the JSON request.\n   * <p>\n   * This method may be called multiple times; each call with a different {@code name} will add a new param name/value\n   * to the params subtree. Invocations that repeat a {@code name} will overwrite the previously specified parameter\n   * values associated with that name.\n   *\n   * @param name the name of the parameter to add\n   * @param value the value of the parameter to add.  Usually a String, Number (Integer, Long, Double), or Boolean.\n   *\n   * @throws IllegalArgumentException if either {@code name} or {@code value} are null\n   */\n  public JsonQueryRequest withParam(String name, Object value) {\n    if (name == null) {\n      throw new IllegalArgumentException(\"'name' parameter must be non-null\");\n    }\n    if (value == null) {\n      throw new IllegalArgumentException(\"'value' parameter must be non-null\");\n    }\n\n    ((Map<String, Object>)jsonRequestMap.computeIfAbsent(\"params\", s -> new HashMap<String, Object>())).put(name, value);\n    return this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a7dfea4f7c80813344b0152e37fc18b31369e8ff":["a686e6ef1736c0d9ac3804b6a0f520e5982657de"],"a686e6ef1736c0d9ac3804b6a0f520e5982657de":["a1f685bdd8a6bd0db4f9fb53514bf80b6b1fe8f6"],"a1f685bdd8a6bd0db4f9fb53514bf80b6b1fe8f6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a7dfea4f7c80813344b0152e37fc18b31369e8ff"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a1f685bdd8a6bd0db4f9fb53514bf80b6b1fe8f6"],"a7dfea4f7c80813344b0152e37fc18b31369e8ff":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a686e6ef1736c0d9ac3804b6a0f520e5982657de":["a7dfea4f7c80813344b0152e37fc18b31369e8ff"],"a1f685bdd8a6bd0db4f9fb53514bf80b6b1fe8f6":["a686e6ef1736c0d9ac3804b6a0f520e5982657de"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}