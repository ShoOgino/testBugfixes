{"path":"solr/core/src/java/org/apache/solr/core/DirectoryFactory#cleanupOldIndexDirectories(String,String,boolean).mjava","commits":[{"id":"ad28156288ac00b91352582904d97e6653205757","date":1486850922,"type":1,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/DirectoryFactory#cleanupOldIndexDirectories(String,String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/DirectoryFactory#cleanupOldIndexDirectories(String,String).mjava","sourceNew":"  public void cleanupOldIndexDirectories(final String dataDirPath, final String currentIndexDirPath, boolean afterCoreReload) {\n    File dataDir = new File(dataDirPath);\n    if (!dataDir.isDirectory()) {\n      log.debug(\"{} does not point to a valid data directory; skipping clean-up of old index directories.\", dataDirPath);\n      return;\n    }\n\n    final File currentIndexDir = new File(currentIndexDirPath);\n    File[] oldIndexDirs = dataDir.listFiles(new FileFilter() {\n      @Override\n      public boolean accept(File file) {\n        String fileName = file.getName();\n        return file.isDirectory() &&\n               !file.equals(currentIndexDir) &&\n               (fileName.equals(\"index\") || fileName.matches(INDEX_W_TIMESTAMP_REGEX));\n      }\n    });\n\n    if (oldIndexDirs == null || oldIndexDirs.length == 0)\n      return; // nothing to do (no log message needed)\n\n    List<File> dirsList = Arrays.asList(oldIndexDirs);\n    Collections.sort(dirsList, Collections.reverseOrder());\n    \n    int i = 0;\n    if (afterCoreReload) {\n      log.info(\"Will not remove most recent old directory after reload {}\", oldIndexDirs[0]);\n      i = 1;\n    }\n    log.info(\"Found {} old index directories to clean-up under {} afterReload={}\", oldIndexDirs.length - i, dataDirPath, afterCoreReload);\n    for (; i < dirsList.size(); i++) {\n      File dir = dirsList.get(i);\n      String dirToRmPath = dir.getAbsolutePath();\n      try {\n        if (deleteOldIndexDirectory(dirToRmPath)) {\n          log.info(\"Deleted old index directory: {}\", dirToRmPath);\n        } else {\n          log.warn(\"Delete old index directory {} failed.\", dirToRmPath);\n        }\n      } catch (IOException ioExc) {\n        log.error(\"Failed to delete old directory {} due to: {}\", dir.getAbsolutePath(), ioExc.toString());\n      }\n    }\n  }\n\n","sourceOld":"  public void cleanupOldIndexDirectories(final String dataDirPath, final String currentIndexDirPath) {\n    File dataDir = new File(dataDirPath);\n    if (!dataDir.isDirectory()) {\n      log.debug(\"{} does not point to a valid data directory; skipping clean-up of old index directories.\", dataDirPath);\n      return;\n    }\n\n    final File currentIndexDir = new File(currentIndexDirPath);\n    File[] oldIndexDirs = dataDir.listFiles(new FileFilter() {\n      @Override\n      public boolean accept(File file) {\n        String fileName = file.getName();\n        return file.isDirectory() &&\n               !file.equals(currentIndexDir) &&\n               (fileName.equals(\"index\") || fileName.matches(INDEX_W_TIMESTAMP_REGEX));\n      }\n    });\n\n    if (oldIndexDirs == null || oldIndexDirs.length == 0)\n      return; // nothing to do (no log message needed)\n\n    log.info(\"Found {} old index directories to clean-up under {}\", oldIndexDirs.length, dataDirPath);\n    for (File dir : oldIndexDirs) {\n\n      String dirToRmPath = dir.getAbsolutePath();\n      try {\n        if (deleteOldIndexDirectory(dirToRmPath)) {\n          log.info(\"Deleted old index directory: {}\", dirToRmPath);\n        } else {\n          log.warn(\"Delete old index directory {} failed.\", dirToRmPath);\n        }\n      } catch (IOException ioExc) {\n        log.error(\"Failed to delete old directory {} due to: {}\", dir.getAbsolutePath(), ioExc.toString());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"575e66bd4b2349209027f6801184da7fc3cba13f","date":1587609169,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/DirectoryFactory#cleanupOldIndexDirectories(String,String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/DirectoryFactory#cleanupOldIndexDirectories(String,String,boolean).mjava","sourceNew":"  public void cleanupOldIndexDirectories(final String dataDirPath, final String currentIndexDirPath, boolean afterCoreReload) {\n    File dataDir = new File(dataDirPath);\n    if (!dataDir.isDirectory()) {\n      log.debug(\"{} does not point to a valid data directory; skipping clean-up of old index directories.\", dataDirPath);\n      return;\n    }\n\n    final File currentIndexDir = new File(currentIndexDirPath);\n    File[] oldIndexDirs = dataDir.listFiles(new FileFilter() {\n      @Override\n      public boolean accept(File file) {\n        String fileName = file.getName();\n        return file.isDirectory() &&\n               !file.equals(currentIndexDir) &&\n               (fileName.equals(\"index\") || fileName.matches(INDEX_W_TIMESTAMP_REGEX));\n      }\n    });\n\n    if (oldIndexDirs == null || oldIndexDirs.length == 0)\n      return; // nothing to do (no log message needed)\n\n    List<File> dirsList = Arrays.asList(oldIndexDirs);\n    Collections.sort(dirsList, Collections.reverseOrder());\n    \n    int i = 0;\n    if (afterCoreReload) {\n      log.info(\"Will not remove most recent old directory after reload {}\", oldIndexDirs[0]);\n      i = 1;\n    }\n    log.info(\"Found {} old index directories to clean-up under {} afterReload={}\", oldIndexDirs.length - i, dataDirPath, afterCoreReload);\n    for (; i < dirsList.size(); i++) {\n      File dir = dirsList.get(i);\n      String dirToRmPath = dir.getAbsolutePath();\n      try {\n        if (deleteOldIndexDirectory(dirToRmPath)) {\n          log.info(\"Deleted old index directory: {}\", dirToRmPath);\n        } else {\n          log.warn(\"Delete old index directory {} failed.\", dirToRmPath);\n        }\n      } catch (IOException ioExc) {\n        log.error(\"Failed to delete old directory {} due to: \", dir.getAbsolutePath(), ioExc);\n      }\n    }\n  }\n\n","sourceOld":"  public void cleanupOldIndexDirectories(final String dataDirPath, final String currentIndexDirPath, boolean afterCoreReload) {\n    File dataDir = new File(dataDirPath);\n    if (!dataDir.isDirectory()) {\n      log.debug(\"{} does not point to a valid data directory; skipping clean-up of old index directories.\", dataDirPath);\n      return;\n    }\n\n    final File currentIndexDir = new File(currentIndexDirPath);\n    File[] oldIndexDirs = dataDir.listFiles(new FileFilter() {\n      @Override\n      public boolean accept(File file) {\n        String fileName = file.getName();\n        return file.isDirectory() &&\n               !file.equals(currentIndexDir) &&\n               (fileName.equals(\"index\") || fileName.matches(INDEX_W_TIMESTAMP_REGEX));\n      }\n    });\n\n    if (oldIndexDirs == null || oldIndexDirs.length == 0)\n      return; // nothing to do (no log message needed)\n\n    List<File> dirsList = Arrays.asList(oldIndexDirs);\n    Collections.sort(dirsList, Collections.reverseOrder());\n    \n    int i = 0;\n    if (afterCoreReload) {\n      log.info(\"Will not remove most recent old directory after reload {}\", oldIndexDirs[0]);\n      i = 1;\n    }\n    log.info(\"Found {} old index directories to clean-up under {} afterReload={}\", oldIndexDirs.length - i, dataDirPath, afterCoreReload);\n    for (; i < dirsList.size(); i++) {\n      File dir = dirsList.get(i);\n      String dirToRmPath = dir.getAbsolutePath();\n      try {\n        if (deleteOldIndexDirectory(dirToRmPath)) {\n          log.info(\"Deleted old index directory: {}\", dirToRmPath);\n        } else {\n          log.warn(\"Delete old index directory {} failed.\", dirToRmPath);\n        }\n      } catch (IOException ioExc) {\n        log.error(\"Failed to delete old directory {} due to: {}\", dir.getAbsolutePath(), ioExc.toString());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ad28156288ac00b91352582904d97e6653205757":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"575e66bd4b2349209027f6801184da7fc3cba13f":["ad28156288ac00b91352582904d97e6653205757"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["575e66bd4b2349209027f6801184da7fc3cba13f"]},"commit2Childs":{"ad28156288ac00b91352582904d97e6653205757":["575e66bd4b2349209027f6801184da7fc3cba13f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ad28156288ac00b91352582904d97e6653205757"],"575e66bd4b2349209027f6801184da7fc3cba13f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}