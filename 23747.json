{"path":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/IntersectTermsEnumFrame#setState(int).mjava","commits":[{"id":"f5c96ee46366b5feece8b0b328368c6237fc087a","date":1400184255,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/IntersectTermsEnumFrame#setState(int).mjava","pathOld":"/dev/null","sourceNew":"  public void setState(int state) {\n    this.state = state;\n    transitionIndex = 0;\n    transitions = ite.compiledAutomaton.sortedTransitions[state];\n    if (transitions.length != 0) {\n      curTransitionMax = transitions[0].getMax();\n    } else {\n      curTransitionMax = -1;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d637064d608752565d4f9f41b2497dfdfdde50e","date":1400798123,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/IntersectTermsEnumFrame#setState(int).mjava","pathOld":"/dev/null","sourceNew":"  public void setState(int state) {\n    this.state = state;\n    transitionIndex = 0;\n    transitions = ite.compiledAutomaton.sortedTransitions[state];\n    if (transitions.length != 0) {\n      curTransitionMax = transitions[0].getMax();\n    } else {\n      curTransitionMax = -1;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac34f0c5bb9274821fb0cb18075234e02002e9bf","date":1402508126,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/IntersectTermsEnumFrame#setState(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/IntersectTermsEnumFrame#setState(int).mjava","sourceNew":"  public void setState(int state) {\n    this.state = state;\n    transitionIndex = 0;\n    transitionCount = ite.compiledAutomaton.lightAutomaton.getNumTransitions(state);\n    if (transitionCount != 0) {\n      ite.compiledAutomaton.lightAutomaton.initTransition(state, transition);\n      ite.compiledAutomaton.lightAutomaton.getNextTransition(transition);\n      curTransitionMax = transition.max;\n    } else {\n      curTransitionMax = -1;\n    }\n  }\n\n","sourceOld":"  public void setState(int state) {\n    this.state = state;\n    transitionIndex = 0;\n    transitions = ite.compiledAutomaton.sortedTransitions[state];\n    if (transitions.length != 0) {\n      curTransitionMax = transitions[0].getMax();\n    } else {\n      curTransitionMax = -1;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ca1c732df8923f5624f6c06b1dcca9e69d98c96","date":1402957391,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/IntersectTermsEnumFrame#setState(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/IntersectTermsEnumFrame#setState(int).mjava","sourceNew":"  public void setState(int state) {\n    this.state = state;\n    transitionIndex = 0;\n    transitionCount = ite.compiledAutomaton.automaton.getNumTransitions(state);\n    if (transitionCount != 0) {\n      ite.compiledAutomaton.automaton.initTransition(state, transition);\n      ite.compiledAutomaton.automaton.getNextTransition(transition);\n      curTransitionMax = transition.max;\n    } else {\n      curTransitionMax = -1;\n    }\n  }\n\n","sourceOld":"  public void setState(int state) {\n    this.state = state;\n    transitionIndex = 0;\n    transitionCount = ite.compiledAutomaton.lightAutomaton.getNumTransitions(state);\n    if (transitionCount != 0) {\n      ite.compiledAutomaton.lightAutomaton.initTransition(state, transition);\n      ite.compiledAutomaton.lightAutomaton.getNextTransition(transition);\n      curTransitionMax = transition.max;\n    } else {\n      curTransitionMax = -1;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c84485629d80d203608e8975a1139de9933cc38","date":1403166128,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/IntersectTermsEnumFrame#setState(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/IntersectTermsEnumFrame#setState(int).mjava","sourceNew":"  public void setState(int state) {\n    this.state = state;\n    transitionIndex = 0;\n    transitionCount = ite.compiledAutomaton.automaton.getNumTransitions(state);\n    if (transitionCount != 0) {\n      ite.compiledAutomaton.automaton.initTransition(state, transition);\n      ite.compiledAutomaton.automaton.getNextTransition(transition);\n      curTransitionMax = transition.max;\n    } else {\n      curTransitionMax = -1;\n    }\n  }\n\n","sourceOld":"  public void setState(int state) {\n    this.state = state;\n    transitionIndex = 0;\n    transitions = ite.compiledAutomaton.sortedTransitions[state];\n    if (transitions.length != 0) {\n      curTransitionMax = transitions[0].getMax();\n    } else {\n      curTransitionMax = -1;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e8715d826e588419327562287d5d6a8040d63d6","date":1427987148,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/IntersectTermsEnumFrame#setState(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/IntersectTermsEnumFrame#setState(int).mjava","sourceNew":"  public void setState(int state) {\n    this.state = state;\n    transitionIndex = 0;\n    transitionCount = ite.automaton.getNumTransitions(state);\n    if (transitionCount != 0) {\n      ite.automaton.initTransition(state, transition);\n      ite.automaton.getNextTransition(transition);\n      curTransitionMax = transition.max;\n      //if (DEBUG) System.out.println(\"    after setState state=\" + state + \" trans: \" + transition + \" transCount=\" + transitionCount);\n    } else {\n      curTransitionMax = -1;\n    }\n  }\n\n","sourceOld":"  public void setState(int state) {\n    this.state = state;\n    transitionIndex = 0;\n    transitionCount = ite.compiledAutomaton.automaton.getNumTransitions(state);\n    if (transitionCount != 0) {\n      ite.compiledAutomaton.automaton.initTransition(state, transition);\n      ite.compiledAutomaton.automaton.getNextTransition(transition);\n      curTransitionMax = transition.max;\n    } else {\n      curTransitionMax = -1;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2638f781be724518ff6c2263d14a48cf6e68017","date":1427989059,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/IntersectTermsEnumFrame#setState(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/IntersectTermsEnumFrame#setState(int).mjava","sourceNew":"  public void setState(int state) {\n    this.state = state;\n    transitionIndex = 0;\n    transitionCount = ite.automaton.getNumTransitions(state);\n    if (transitionCount != 0) {\n      ite.automaton.initTransition(state, transition);\n      ite.automaton.getNextTransition(transition);\n      curTransitionMax = transition.max;\n      //if (DEBUG) System.out.println(\"    after setState state=\" + state + \" trans: \" + transition + \" transCount=\" + transitionCount);\n    } else {\n      curTransitionMax = -1;\n    }\n  }\n\n","sourceOld":"  public void setState(int state) {\n    this.state = state;\n    transitionIndex = 0;\n    transitionCount = ite.compiledAutomaton.automaton.getNumTransitions(state);\n    if (transitionCount != 0) {\n      ite.compiledAutomaton.automaton.initTransition(state, transition);\n      ite.compiledAutomaton.automaton.getNextTransition(transition);\n      curTransitionMax = transition.max;\n    } else {\n      curTransitionMax = -1;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"59db5e5f780185e0155d296a323e440a6ecfd3b6","date":1435089559,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/IntersectTermsEnumFrame#setState(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/IntersectTermsEnumFrame#setState(int).mjava","sourceNew":"  public void setState(int state) {\n    this.state = state;\n    transitionIndex = 0;\n    transitionCount = ite.automaton.getNumTransitions(state);\n    if (transitionCount != 0) {\n      ite.automaton.initTransition(state, transition);\n      ite.automaton.getNextTransition(transition);\n    } else {\n\n      // Must set min to -1 so the \"label < min\" check never falsely triggers:\n      transition.min = -1;\n\n      // Must set max to -1 so we immediately realize we need to step to the next transition and then pop this frame:\n      transition.max = -1;\n    }\n  }\n\n","sourceOld":"  public void setState(int state) {\n    this.state = state;\n    transitionIndex = 0;\n    transitionCount = ite.automaton.getNumTransitions(state);\n    if (transitionCount != 0) {\n      ite.automaton.initTransition(state, transition);\n      ite.automaton.getNextTransition(transition);\n      curTransitionMax = transition.max;\n      //if (DEBUG) System.out.println(\"    after setState state=\" + state + \" trans: \" + transition + \" transCount=\" + transitionCount);\n    } else {\n      curTransitionMax = -1;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4d637064d608752565d4f9f41b2497dfdfdde50e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f5c96ee46366b5feece8b0b328368c6237fc087a"],"59db5e5f780185e0155d296a323e440a6ecfd3b6":["3e8715d826e588419327562287d5d6a8040d63d6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["ac34f0c5bb9274821fb0cb18075234e02002e9bf"],"d2638f781be724518ff6c2263d14a48cf6e68017":["5c84485629d80d203608e8975a1139de9933cc38","3e8715d826e588419327562287d5d6a8040d63d6"],"3e8715d826e588419327562287d5d6a8040d63d6":["5c84485629d80d203608e8975a1139de9933cc38"],"f5c96ee46366b5feece8b0b328368c6237fc087a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5c84485629d80d203608e8975a1139de9933cc38":["4d637064d608752565d4f9f41b2497dfdfdde50e","4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"ac34f0c5bb9274821fb0cb18075234e02002e9bf":["4d637064d608752565d4f9f41b2497dfdfdde50e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["59db5e5f780185e0155d296a323e440a6ecfd3b6"]},"commit2Childs":{"4d637064d608752565d4f9f41b2497dfdfdde50e":["5c84485629d80d203608e8975a1139de9933cc38","ac34f0c5bb9274821fb0cb18075234e02002e9bf"],"59db5e5f780185e0155d296a323e440a6ecfd3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4d637064d608752565d4f9f41b2497dfdfdde50e","f5c96ee46366b5feece8b0b328368c6237fc087a"],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["5c84485629d80d203608e8975a1139de9933cc38"],"d2638f781be724518ff6c2263d14a48cf6e68017":[],"f5c96ee46366b5feece8b0b328368c6237fc087a":["4d637064d608752565d4f9f41b2497dfdfdde50e"],"3e8715d826e588419327562287d5d6a8040d63d6":["59db5e5f780185e0155d296a323e440a6ecfd3b6","d2638f781be724518ff6c2263d14a48cf6e68017"],"5c84485629d80d203608e8975a1139de9933cc38":["d2638f781be724518ff6c2263d14a48cf6e68017","3e8715d826e588419327562287d5d6a8040d63d6"],"ac34f0c5bb9274821fb0cb18075234e02002e9bf":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d2638f781be724518ff6c2263d14a48cf6e68017","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}