{"path":"modules/suggest/src/test/org/apache/lucene/search/spell/TestSpellChecker#setUp().mjava","commits":[{"id":"e230a61047bc041516c811baa08a7174d6f8322a","date":1306175633,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/suggest/src/test/org/apache/lucene/search/spell/TestSpellChecker#setUp().mjava","pathOld":"lucene/contrib/spellchecker/src/test/org/apache/lucene/search/spell/TestSpellChecker#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    \n    //create a user index\n    userindex = newDirectory();\n    IndexWriter writer = new IndexWriter(userindex, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n    for (int i = 0; i < 1000; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"field1\", English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      doc.add(newField(\"field2\", English.intToEnglish(i + 1), Field.Store.YES, Field.Index.ANALYZED)); // + word thousand\n      doc.add(newField(\"field3\", \"fvei\" + (i % 2 == 0 ? \" five\" : \"\"), Field.Store.YES, Field.Index.ANALYZED)); // + word thousand\n      writer.addDocument(doc);\n    }\n    writer.close();\n    searchers = Collections.synchronizedList(new ArrayList<IndexSearcher>());\n    // create the spellChecker\n    spellindex = newDirectory();\n    spellChecker = new SpellCheckerMock(spellindex);\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    \n    //create a user index\n    userindex = newDirectory();\n    IndexWriter writer = new IndexWriter(userindex, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n    for (int i = 0; i < 1000; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"field1\", English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      doc.add(newField(\"field2\", English.intToEnglish(i + 1), Field.Store.YES, Field.Index.ANALYZED)); // + word thousand\n      doc.add(newField(\"field3\", \"fvei\" + (i % 2 == 0 ? \" five\" : \"\"), Field.Store.YES, Field.Index.ANALYZED)); // + word thousand\n      writer.addDocument(doc);\n    }\n    writer.close();\n    searchers = Collections.synchronizedList(new ArrayList<IndexSearcher>());\n    // create the spellChecker\n    spellindex = newDirectory();\n    spellChecker = new SpellCheckerMock(spellindex);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/suggest/src/test/org/apache/lucene/search/spell/TestSpellChecker#setUp().mjava","pathOld":"lucene/contrib/spellchecker/src/test/org/apache/lucene/search/spell/TestSpellChecker#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    \n    //create a user index\n    userindex = newDirectory();\n    IndexWriter writer = new IndexWriter(userindex, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n    for (int i = 0; i < 1000; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"field1\", English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      doc.add(newField(\"field2\", English.intToEnglish(i + 1), Field.Store.YES, Field.Index.ANALYZED)); // + word thousand\n      doc.add(newField(\"field3\", \"fvei\" + (i % 2 == 0 ? \" five\" : \"\"), Field.Store.YES, Field.Index.ANALYZED)); // + word thousand\n      writer.addDocument(doc);\n    }\n    writer.close();\n    searchers = Collections.synchronizedList(new ArrayList<IndexSearcher>());\n    // create the spellChecker\n    spellindex = newDirectory();\n    spellChecker = new SpellCheckerMock(spellindex);\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    \n    //create a user index\n    userindex = newDirectory();\n    IndexWriter writer = new IndexWriter(userindex, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n    for (int i = 0; i < 1000; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"field1\", English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      doc.add(newField(\"field2\", English.intToEnglish(i + 1), Field.Store.YES, Field.Index.ANALYZED)); // + word thousand\n      doc.add(newField(\"field3\", \"fvei\" + (i % 2 == 0 ? \" five\" : \"\"), Field.Store.YES, Field.Index.ANALYZED)); // + word thousand\n      writer.addDocument(doc);\n    }\n    writer.close();\n    searchers = Collections.synchronizedList(new ArrayList<IndexSearcher>());\n    // create the spellChecker\n    spellindex = newDirectory();\n    spellChecker = new SpellCheckerMock(spellindex);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e10cb22a8bdb44339e282925a29182bb2f3174d","date":1306841137,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/suggest/src/test/org/apache/lucene/search/spell/TestSpellChecker#setUp().mjava","pathOld":"lucene/contrib/spellchecker/src/test/org/apache/lucene/search/spell/TestSpellChecker#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    \n    //create a user index\n    userindex = newDirectory();\n    IndexWriter writer = new IndexWriter(userindex, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n    for (int i = 0; i < 1000; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"field1\", English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      doc.add(newField(\"field2\", English.intToEnglish(i + 1), Field.Store.YES, Field.Index.ANALYZED)); // + word thousand\n      doc.add(newField(\"field3\", \"fvei\" + (i % 2 == 0 ? \" five\" : \"\"), Field.Store.YES, Field.Index.ANALYZED)); // + word thousand\n      writer.addDocument(doc);\n    }\n    writer.close();\n    searchers = Collections.synchronizedList(new ArrayList<IndexSearcher>());\n    // create the spellChecker\n    spellindex = newDirectory();\n    spellChecker = new SpellCheckerMock(spellindex);\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    \n    //create a user index\n    userindex = newDirectory();\n    IndexWriter writer = new IndexWriter(userindex, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n    for (int i = 0; i < 1000; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"field1\", English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      doc.add(newField(\"field2\", English.intToEnglish(i + 1), Field.Store.YES, Field.Index.ANALYZED)); // + word thousand\n      doc.add(newField(\"field3\", \"fvei\" + (i % 2 == 0 ? \" five\" : \"\"), Field.Store.YES, Field.Index.ANALYZED)); // + word thousand\n      writer.addDocument(doc);\n    }\n    writer.close();\n    searchers = Collections.synchronizedList(new ArrayList<IndexSearcher>());\n    // create the spellChecker\n    spellindex = newDirectory();\n    spellChecker = new SpellCheckerMock(spellindex);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"modules/suggest/src/test/org/apache/lucene/search/spell/TestSpellChecker#setUp().mjava","pathOld":"modules/suggest/src/test/org/apache/lucene/search/spell/TestSpellChecker#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    \n    //create a user index\n    userindex = newDirectory();\n    IndexWriter writer = new IndexWriter(userindex, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n    for (int i = 0; i < 1000; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"field1\", English.intToEnglish(i), TextField.TYPE_STORED));\n      doc.add(newField(\"field2\", English.intToEnglish(i + 1), TextField.TYPE_STORED)); // + word thousand\n      doc.add(newField(\"field3\", \"fvei\" + (i % 2 == 0 ? \" five\" : \"\"), TextField.TYPE_STORED)); // + word thousand\n      writer.addDocument(doc);\n    }\n    writer.close();\n    searchers = Collections.synchronizedList(new ArrayList<IndexSearcher>());\n    // create the spellChecker\n    spellindex = newDirectory();\n    spellChecker = new SpellCheckerMock(spellindex);\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    \n    //create a user index\n    userindex = newDirectory();\n    IndexWriter writer = new IndexWriter(userindex, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n    for (int i = 0; i < 1000; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"field1\", English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      doc.add(newField(\"field2\", English.intToEnglish(i + 1), Field.Store.YES, Field.Index.ANALYZED)); // + word thousand\n      doc.add(newField(\"field3\", \"fvei\" + (i % 2 == 0 ? \" five\" : \"\"), Field.Store.YES, Field.Index.ANALYZED)); // + word thousand\n      writer.addDocument(doc);\n    }\n    writer.close();\n    searchers = Collections.synchronizedList(new ArrayList<IndexSearcher>());\n    // create the spellChecker\n    spellindex = newDirectory();\n    spellChecker = new SpellCheckerMock(spellindex);\n  }\n\n","bugFix":null,"bugIntro":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b0f2476332da483dc2ea1fdd80b5968380653166","date":1316180489,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/suggest/src/test/org/apache/lucene/search/spell/TestSpellChecker#setUp().mjava","pathOld":"modules/suggest/src/test/org/apache/lucene/search/spell/TestSpellChecker#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    \n    //create a user index\n    userindex = newDirectory();\n    IndexWriter writer = new IndexWriter(userindex, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n    for (int i = 0; i < 1000; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"field1\", English.intToEnglish(i), TextField.TYPE_STORED));\n      doc.add(newField(\"field2\", English.intToEnglish(i + 1), TextField.TYPE_STORED)); // + word thousand\n      doc.add(newField(\"field3\", \"fvei\" + (i % 2 == 0 ? \" five\" : \"\"), TextField.TYPE_STORED)); // + word thousand\n      writer.addDocument(doc);\n    }\n    {\n      Document doc = new Document();\n      doc.add(newField(\"field1\", \"eight\", TextField.TYPE_STORED)); // \"eight\" in\n                                                                   // the index\n                                                                   // twice\n      writer.addDocument(doc);\n    }\n    {\n      Document doc = new Document();\n      doc\n          .add(newField(\"field1\", \"twenty-one twenty-one\",\n              TextField.TYPE_STORED)); // \"twenty-one\" in the index thrice\n      writer.addDocument(doc);\n    }\n    {\n      Document doc = new Document();\n      doc.add(newField(\"field1\", \"twenty\", TextField.TYPE_STORED)); // \"twenty\"\n                                                                    // in the\n                                                                    // index\n                                                                    // twice\n      writer.addDocument(doc);\n    }\n    \n    writer.close();\n    searchers = Collections.synchronizedList(new ArrayList<IndexSearcher>());\n    // create the spellChecker\n    spellindex = newDirectory();\n    spellChecker = new SpellCheckerMock(spellindex);\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    \n    //create a user index\n    userindex = newDirectory();\n    IndexWriter writer = new IndexWriter(userindex, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n    for (int i = 0; i < 1000; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"field1\", English.intToEnglish(i), TextField.TYPE_STORED));\n      doc.add(newField(\"field2\", English.intToEnglish(i + 1), TextField.TYPE_STORED)); // + word thousand\n      doc.add(newField(\"field3\", \"fvei\" + (i % 2 == 0 ? \" five\" : \"\"), TextField.TYPE_STORED)); // + word thousand\n      writer.addDocument(doc);\n    }\n    writer.close();\n    searchers = Collections.synchronizedList(new ArrayList<IndexSearcher>());\n    // create the spellChecker\n    spellindex = newDirectory();\n    spellChecker = new SpellCheckerMock(spellindex);\n  }\n\n","bugFix":null,"bugIntro":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"modules/suggest/src/test/org/apache/lucene/search/spell/TestSpellChecker#setUp().mjava","pathOld":"modules/suggest/src/test/org/apache/lucene/search/spell/TestSpellChecker#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    \n    //create a user index\n    userindex = newDirectory();\n    IndexWriter writer = new IndexWriter(userindex, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n\n    for (int i = 0; i < 1000; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"field1\", English.intToEnglish(i), TextField.TYPE_STORED));\n      doc.add(newField(\"field2\", English.intToEnglish(i + 1), TextField.TYPE_STORED)); // + word thousand\n      doc.add(newField(\"field3\", \"fvei\" + (i % 2 == 0 ? \" five\" : \"\"), TextField.TYPE_STORED)); // + word thousand\n      writer.addDocument(doc);\n    }\n    {\n      Document doc = new Document();\n      doc.add(newField(\"field1\", \"eight\", TextField.TYPE_STORED)); // \"eight\" in\n                                                                   // the index\n                                                                   // twice\n      writer.addDocument(doc);\n    }\n    {\n      Document doc = new Document();\n      doc\n          .add(newField(\"field1\", \"twenty-one twenty-one\",\n              TextField.TYPE_STORED)); // \"twenty-one\" in the index thrice\n      writer.addDocument(doc);\n    }\n    {\n      Document doc = new Document();\n      doc.add(newField(\"field1\", \"twenty\", TextField.TYPE_STORED)); // \"twenty\"\n                                                                    // in the\n                                                                    // index\n                                                                    // twice\n      writer.addDocument(doc);\n    }\n    \n    writer.close();\n    searchers = Collections.synchronizedList(new ArrayList<IndexSearcher>());\n    // create the spellChecker\n    spellindex = newDirectory();\n    spellChecker = new SpellCheckerMock(spellindex);\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    \n    //create a user index\n    userindex = newDirectory();\n    IndexWriter writer = new IndexWriter(userindex, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n    for (int i = 0; i < 1000; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"field1\", English.intToEnglish(i), TextField.TYPE_STORED));\n      doc.add(newField(\"field2\", English.intToEnglish(i + 1), TextField.TYPE_STORED)); // + word thousand\n      doc.add(newField(\"field3\", \"fvei\" + (i % 2 == 0 ? \" five\" : \"\"), TextField.TYPE_STORED)); // + word thousand\n      writer.addDocument(doc);\n    }\n    {\n      Document doc = new Document();\n      doc.add(newField(\"field1\", \"eight\", TextField.TYPE_STORED)); // \"eight\" in\n                                                                   // the index\n                                                                   // twice\n      writer.addDocument(doc);\n    }\n    {\n      Document doc = new Document();\n      doc\n          .add(newField(\"field1\", \"twenty-one twenty-one\",\n              TextField.TYPE_STORED)); // \"twenty-one\" in the index thrice\n      writer.addDocument(doc);\n    }\n    {\n      Document doc = new Document();\n      doc.add(newField(\"field1\", \"twenty\", TextField.TYPE_STORED)); // \"twenty\"\n                                                                    // in the\n                                                                    // index\n                                                                    // twice\n      writer.addDocument(doc);\n    }\n    \n    writer.close();\n    searchers = Collections.synchronizedList(new ArrayList<IndexSearcher>());\n    // create the spellChecker\n    spellindex = newDirectory();\n    spellChecker = new SpellCheckerMock(spellindex);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/spell/TestSpellChecker#setUp().mjava","pathOld":"modules/suggest/src/test/org/apache/lucene/search/spell/TestSpellChecker#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    \n    //create a user index\n    userindex = newDirectory();\n    IndexWriter writer = new IndexWriter(userindex, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n\n    for (int i = 0; i < 1000; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"field1\", English.intToEnglish(i), TextField.TYPE_STORED));\n      doc.add(newField(\"field2\", English.intToEnglish(i + 1), TextField.TYPE_STORED)); // + word thousand\n      doc.add(newField(\"field3\", \"fvei\" + (i % 2 == 0 ? \" five\" : \"\"), TextField.TYPE_STORED)); // + word thousand\n      writer.addDocument(doc);\n    }\n    {\n      Document doc = new Document();\n      doc.add(newField(\"field1\", \"eight\", TextField.TYPE_STORED)); // \"eight\" in\n                                                                   // the index\n                                                                   // twice\n      writer.addDocument(doc);\n    }\n    {\n      Document doc = new Document();\n      doc\n          .add(newField(\"field1\", \"twenty-one twenty-one\",\n              TextField.TYPE_STORED)); // \"twenty-one\" in the index thrice\n      writer.addDocument(doc);\n    }\n    {\n      Document doc = new Document();\n      doc.add(newField(\"field1\", \"twenty\", TextField.TYPE_STORED)); // \"twenty\"\n                                                                    // in the\n                                                                    // index\n                                                                    // twice\n      writer.addDocument(doc);\n    }\n    \n    writer.close();\n    searchers = Collections.synchronizedList(new ArrayList<IndexSearcher>());\n    // create the spellChecker\n    spellindex = newDirectory();\n    spellChecker = new SpellCheckerMock(spellindex);\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    \n    //create a user index\n    userindex = newDirectory();\n    IndexWriter writer = new IndexWriter(userindex, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n\n    for (int i = 0; i < 1000; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"field1\", English.intToEnglish(i), TextField.TYPE_STORED));\n      doc.add(newField(\"field2\", English.intToEnglish(i + 1), TextField.TYPE_STORED)); // + word thousand\n      doc.add(newField(\"field3\", \"fvei\" + (i % 2 == 0 ? \" five\" : \"\"), TextField.TYPE_STORED)); // + word thousand\n      writer.addDocument(doc);\n    }\n    {\n      Document doc = new Document();\n      doc.add(newField(\"field1\", \"eight\", TextField.TYPE_STORED)); // \"eight\" in\n                                                                   // the index\n                                                                   // twice\n      writer.addDocument(doc);\n    }\n    {\n      Document doc = new Document();\n      doc\n          .add(newField(\"field1\", \"twenty-one twenty-one\",\n              TextField.TYPE_STORED)); // \"twenty-one\" in the index thrice\n      writer.addDocument(doc);\n    }\n    {\n      Document doc = new Document();\n      doc.add(newField(\"field1\", \"twenty\", TextField.TYPE_STORED)); // \"twenty\"\n                                                                    // in the\n                                                                    // index\n                                                                    // twice\n      writer.addDocument(doc);\n    }\n    \n    writer.close();\n    searchers = Collections.synchronizedList(new ArrayList<IndexSearcher>());\n    // create the spellChecker\n    spellindex = newDirectory();\n    spellChecker = new SpellCheckerMock(spellindex);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"b0f2476332da483dc2ea1fdd80b5968380653166":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"e230a61047bc041516c811baa08a7174d6f8322a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e230a61047bc041516c811baa08a7174d6f8322a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["b0f2476332da483dc2ea1fdd80b5968380653166"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["e230a61047bc041516c811baa08a7174d6f8322a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e230a61047bc041516c811baa08a7174d6f8322a"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b0f2476332da483dc2ea1fdd80b5968380653166":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"e230a61047bc041516c811baa08a7174d6f8322a":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","1509f151d7692d84fae414b2b799ac06ba60fcb4","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e230a61047bc041516c811baa08a7174d6f8322a","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["b0f2476332da483dc2ea1fdd80b5968380653166"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2e10cb22a8bdb44339e282925a29182bb2f3174d":[]},"heads":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}