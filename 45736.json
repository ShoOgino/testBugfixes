{"path":"solr/core/src/test/org/apache/solr/handler/JsonLoaderTest#testSimpleFormatInAdd().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/JsonLoaderTest#testSimpleFormatInAdd().mjava","pathOld":"solr/src/test/org/apache/solr/handler/JsonLoaderTest#testSimpleFormatInAdd().mjava","sourceNew":"  public void testSimpleFormatInAdd() throws Exception\n  {\n    String str = \"{'add':[{'id':'1'},{'id':'2'}]}\".replace('\\'', '\"');\n    SolrQueryRequest req = req();\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    BufferingRequestProcessor p = new BufferingRequestProcessor(null);\n    JsonLoader loader = new JsonLoader( req, p );\n    loader.load(req, rsp, new ContentStreamBase.StringStream(str));\n\n    assertEquals( 2, p.addCommands.size() );\n\n    AddUpdateCommand add = p.addCommands.get(0);\n    SolrInputDocument d = add.solrDoc;\n    SolrInputField f = d.getField( \"id\" );\n    assertEquals(\"1\", f.getValue());\n    assertEquals(add.commitWithin, -1);\n    assertEquals(add.overwrite, true);\n\n    add = p.addCommands.get(1);\n    d = add.solrDoc;\n    f = d.getField( \"id\" );\n    assertEquals(\"2\", f.getValue());\n    assertEquals(add.commitWithin, -1);\n    assertEquals(add.overwrite, true);\n\n    req.close();\n  }\n\n","sourceOld":"  public void testSimpleFormatInAdd() throws Exception\n  {\n    String str = \"{'add':[{'id':'1'},{'id':'2'}]}\".replace('\\'', '\"');\n    SolrQueryRequest req = req();\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    BufferingRequestProcessor p = new BufferingRequestProcessor(null);\n    JsonLoader loader = new JsonLoader( req, p );\n    loader.load(req, rsp, new ContentStreamBase.StringStream(str));\n\n    assertEquals( 2, p.addCommands.size() );\n\n    AddUpdateCommand add = p.addCommands.get(0);\n    SolrInputDocument d = add.solrDoc;\n    SolrInputField f = d.getField( \"id\" );\n    assertEquals(\"1\", f.getValue());\n    assertEquals(add.commitWithin, -1);\n    assertEquals(add.overwrite, true);\n\n    add = p.addCommands.get(1);\n    d = add.solrDoc;\n    f = d.getField( \"id\" );\n    assertEquals(\"2\", f.getValue());\n    assertEquals(add.commitWithin, -1);\n    assertEquals(add.overwrite, true);\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/JsonLoaderTest#testSimpleFormatInAdd().mjava","pathOld":"solr/src/test/org/apache/solr/handler/JsonLoaderTest#testSimpleFormatInAdd().mjava","sourceNew":"  public void testSimpleFormatInAdd() throws Exception\n  {\n    String str = \"{'add':[{'id':'1'},{'id':'2'}]}\".replace('\\'', '\"');\n    SolrQueryRequest req = req();\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    BufferingRequestProcessor p = new BufferingRequestProcessor(null);\n    JsonLoader loader = new JsonLoader( req, p );\n    loader.load(req, rsp, new ContentStreamBase.StringStream(str));\n\n    assertEquals( 2, p.addCommands.size() );\n\n    AddUpdateCommand add = p.addCommands.get(0);\n    SolrInputDocument d = add.solrDoc;\n    SolrInputField f = d.getField( \"id\" );\n    assertEquals(\"1\", f.getValue());\n    assertEquals(add.commitWithin, -1);\n    assertEquals(add.overwrite, true);\n\n    add = p.addCommands.get(1);\n    d = add.solrDoc;\n    f = d.getField( \"id\" );\n    assertEquals(\"2\", f.getValue());\n    assertEquals(add.commitWithin, -1);\n    assertEquals(add.overwrite, true);\n\n    req.close();\n  }\n\n","sourceOld":"  public void testSimpleFormatInAdd() throws Exception\n  {\n    String str = \"{'add':[{'id':'1'},{'id':'2'}]}\".replace('\\'', '\"');\n    SolrQueryRequest req = req();\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    BufferingRequestProcessor p = new BufferingRequestProcessor(null);\n    JsonLoader loader = new JsonLoader( req, p );\n    loader.load(req, rsp, new ContentStreamBase.StringStream(str));\n\n    assertEquals( 2, p.addCommands.size() );\n\n    AddUpdateCommand add = p.addCommands.get(0);\n    SolrInputDocument d = add.solrDoc;\n    SolrInputField f = d.getField( \"id\" );\n    assertEquals(\"1\", f.getValue());\n    assertEquals(add.commitWithin, -1);\n    assertEquals(add.overwrite, true);\n\n    add = p.addCommands.get(1);\n    d = add.solrDoc;\n    f = d.getField( \"id\" );\n    assertEquals(\"2\", f.getValue());\n    assertEquals(add.commitWithin, -1);\n    assertEquals(add.overwrite, true);\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/JsonLoaderTest#testSimpleFormatInAdd().mjava","pathOld":"solr/src/test/org/apache/solr/handler/JsonLoaderTest#testSimpleFormatInAdd().mjava","sourceNew":"  public void testSimpleFormatInAdd() throws Exception\n  {\n    String str = \"{'add':[{'id':'1'},{'id':'2'}]}\".replace('\\'', '\"');\n    SolrQueryRequest req = req();\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    BufferingRequestProcessor p = new BufferingRequestProcessor(null);\n    JsonLoader loader = new JsonLoader( req, p );\n    loader.load(req, rsp, new ContentStreamBase.StringStream(str));\n\n    assertEquals( 2, p.addCommands.size() );\n\n    AddUpdateCommand add = p.addCommands.get(0);\n    SolrInputDocument d = add.solrDoc;\n    SolrInputField f = d.getField( \"id\" );\n    assertEquals(\"1\", f.getValue());\n    assertEquals(add.commitWithin, -1);\n    assertEquals(add.overwrite, true);\n\n    add = p.addCommands.get(1);\n    d = add.solrDoc;\n    f = d.getField( \"id\" );\n    assertEquals(\"2\", f.getValue());\n    assertEquals(add.commitWithin, -1);\n    assertEquals(add.overwrite, true);\n\n    req.close();\n  }\n\n","sourceOld":"  public void testSimpleFormatInAdd() throws Exception\n  {\n    String str = \"{'add':[{'id':'1'},{'id':'2'}]}\".replace('\\'', '\"');\n    SolrQueryRequest req = req();\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    BufferingRequestProcessor p = new BufferingRequestProcessor(null);\n    JsonLoader loader = new JsonLoader( req, p );\n    loader.load(req, rsp, new ContentStreamBase.StringStream(str));\n\n    assertEquals( 2, p.addCommands.size() );\n\n    AddUpdateCommand add = p.addCommands.get(0);\n    SolrInputDocument d = add.solrDoc;\n    SolrInputField f = d.getField( \"id\" );\n    assertEquals(\"1\", f.getValue());\n    assertEquals(add.commitWithin, -1);\n    assertEquals(add.overwrite, true);\n\n    add = p.addCommands.get(1);\n    d = add.solrDoc;\n    f = d.getField( \"id\" );\n    assertEquals(\"2\", f.getValue());\n    assertEquals(add.commitWithin, -1);\n    assertEquals(add.overwrite, true);\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"042e4d934397657ba04c82b46cc5665076bc5c58","date":1336511170,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/JsonLoaderTest#testSimpleFormatInAdd().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/JsonLoaderTest#testSimpleFormatInAdd().mjava","sourceNew":"  public void testSimpleFormatInAdd() throws Exception\n  {\n    String str = \"{'add':[{'id':'1'},{'id':'2'}]}\".replace('\\'', '\"');\n    SolrQueryRequest req = req();\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    BufferingRequestProcessor p = new BufferingRequestProcessor(null);\n    JsonLoader loader = new JsonLoader();\n    loader.load(req, rsp, new ContentStreamBase.StringStream(str), p);\n\n    assertEquals( 2, p.addCommands.size() );\n\n    AddUpdateCommand add = p.addCommands.get(0);\n    SolrInputDocument d = add.solrDoc;\n    SolrInputField f = d.getField( \"id\" );\n    assertEquals(\"1\", f.getValue());\n    assertEquals(add.commitWithin, -1);\n    assertEquals(add.overwrite, true);\n\n    add = p.addCommands.get(1);\n    d = add.solrDoc;\n    f = d.getField( \"id\" );\n    assertEquals(\"2\", f.getValue());\n    assertEquals(add.commitWithin, -1);\n    assertEquals(add.overwrite, true);\n\n    req.close();\n  }\n\n","sourceOld":"  public void testSimpleFormatInAdd() throws Exception\n  {\n    String str = \"{'add':[{'id':'1'},{'id':'2'}]}\".replace('\\'', '\"');\n    SolrQueryRequest req = req();\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    BufferingRequestProcessor p = new BufferingRequestProcessor(null);\n    JsonLoader loader = new JsonLoader( req, p );\n    loader.load(req, rsp, new ContentStreamBase.StringStream(str));\n\n    assertEquals( 2, p.addCommands.size() );\n\n    AddUpdateCommand add = p.addCommands.get(0);\n    SolrInputDocument d = add.solrDoc;\n    SolrInputField f = d.getField( \"id\" );\n    assertEquals(\"1\", f.getValue());\n    assertEquals(add.commitWithin, -1);\n    assertEquals(add.overwrite, true);\n\n    add = p.addCommands.get(1);\n    d = add.solrDoc;\n    f = d.getField( \"id\" );\n    assertEquals(\"2\", f.getValue());\n    assertEquals(add.commitWithin, -1);\n    assertEquals(add.overwrite, true);\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1a307447328c95a00248512b40d7a5ff12ecd6a","date":1564817449,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/JsonLoaderTest#testSimpleFormatInAdd().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/JsonLoaderTest#testSimpleFormatInAdd().mjava","sourceNew":"  public void testSimpleFormatInAdd() throws Exception\n  {\n    String str = \"{'add':[{'id':'1'},{'id':'2'}]}\".replace('\\'', '\"');\n    SolrQueryRequest req = req();\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    BufferingRequestProcessor p = new BufferingRequestProcessor(null);\n    JsonLoader loader = new JsonLoader();\n    loader.load(req, rsp, new ContentStreamBase.StringStream(str), p);\n\n    assertEquals( 2, p.addCommands.size() );\n\n    AddUpdateCommand add = p.addCommands.get(0);\n    SolrInputDocument d = add.solrDoc;\n    SolrInputField f = d.getField( \"id\" );\n    assertEquals(\"1\", f.getValue());\n    assertEquals(add.commitWithin, -1);\n    assertTrue(add.overwrite);\n\n    add = p.addCommands.get(1);\n    d = add.solrDoc;\n    f = d.getField( \"id\" );\n    assertEquals(\"2\", f.getValue());\n    assertEquals(add.commitWithin, -1);\n    assertTrue(add.overwrite);\n\n    req.close();\n  }\n\n","sourceOld":"  public void testSimpleFormatInAdd() throws Exception\n  {\n    String str = \"{'add':[{'id':'1'},{'id':'2'}]}\".replace('\\'', '\"');\n    SolrQueryRequest req = req();\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    BufferingRequestProcessor p = new BufferingRequestProcessor(null);\n    JsonLoader loader = new JsonLoader();\n    loader.load(req, rsp, new ContentStreamBase.StringStream(str), p);\n\n    assertEquals( 2, p.addCommands.size() );\n\n    AddUpdateCommand add = p.addCommands.get(0);\n    SolrInputDocument d = add.solrDoc;\n    SolrInputField f = d.getField( \"id\" );\n    assertEquals(\"1\", f.getValue());\n    assertEquals(add.commitWithin, -1);\n    assertEquals(add.overwrite, true);\n\n    add = p.addCommands.get(1);\n    d = add.solrDoc;\n    f = d.getField( \"id\" );\n    assertEquals(\"2\", f.getValue());\n    assertEquals(add.commitWithin, -1);\n    assertEquals(add.overwrite, true);\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/JsonLoaderTest#testSimpleFormatInAdd().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/JsonLoaderTest#testSimpleFormatInAdd().mjava","sourceNew":"  public void testSimpleFormatInAdd() throws Exception\n  {\n    String str = \"{'add':[{'id':'1'},{'id':'2'}]}\".replace('\\'', '\"');\n    SolrQueryRequest req = req();\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    BufferingRequestProcessor p = new BufferingRequestProcessor(null);\n    JsonLoader loader = new JsonLoader();\n    loader.load(req, rsp, new ContentStreamBase.StringStream(str), p);\n\n    assertEquals( 2, p.addCommands.size() );\n\n    AddUpdateCommand add = p.addCommands.get(0);\n    SolrInputDocument d = add.solrDoc;\n    SolrInputField f = d.getField( \"id\" );\n    assertEquals(\"1\", f.getValue());\n    assertEquals(add.commitWithin, -1);\n    assertTrue(add.overwrite);\n\n    add = p.addCommands.get(1);\n    d = add.solrDoc;\n    f = d.getField( \"id\" );\n    assertEquals(\"2\", f.getValue());\n    assertEquals(add.commitWithin, -1);\n    assertTrue(add.overwrite);\n\n    req.close();\n  }\n\n","sourceOld":"  public void testSimpleFormatInAdd() throws Exception\n  {\n    String str = \"{'add':[{'id':'1'},{'id':'2'}]}\".replace('\\'', '\"');\n    SolrQueryRequest req = req();\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    BufferingRequestProcessor p = new BufferingRequestProcessor(null);\n    JsonLoader loader = new JsonLoader();\n    loader.load(req, rsp, new ContentStreamBase.StringStream(str), p);\n\n    assertEquals( 2, p.addCommands.size() );\n\n    AddUpdateCommand add = p.addCommands.get(0);\n    SolrInputDocument d = add.solrDoc;\n    SolrInputField f = d.getField( \"id\" );\n    assertEquals(\"1\", f.getValue());\n    assertEquals(add.commitWithin, -1);\n    assertEquals(add.overwrite, true);\n\n    add = p.addCommands.get(1);\n    d = add.solrDoc;\n    f = d.getField( \"id\" );\n    assertEquals(\"2\", f.getValue());\n    assertEquals(add.commitWithin, -1);\n    assertEquals(add.overwrite, true);\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","date":1565097295,"type":3,"author":"Jan Høydahl","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/JsonLoaderTest#testSimpleFormatInAdd().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/JsonLoaderTest#testSimpleFormatInAdd().mjava","sourceNew":"  public void testSimpleFormatInAdd() throws Exception\n  {\n    String str = \"{'add':[{'id':'1'},{'id':'2'}]}\".replace('\\'', '\"');\n    SolrQueryRequest req = req();\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    BufferingRequestProcessor p = new BufferingRequestProcessor(null);\n    JsonLoader loader = new JsonLoader();\n    loader.load(req, rsp, new ContentStreamBase.StringStream(str), p);\n\n    assertEquals( 2, p.addCommands.size() );\n\n    AddUpdateCommand add = p.addCommands.get(0);\n    SolrInputDocument d = add.solrDoc;\n    SolrInputField f = d.getField( \"id\" );\n    assertEquals(\"1\", f.getValue());\n    assertEquals(add.commitWithin, -1);\n    assertTrue(add.overwrite);\n\n    add = p.addCommands.get(1);\n    d = add.solrDoc;\n    f = d.getField( \"id\" );\n    assertEquals(\"2\", f.getValue());\n    assertEquals(add.commitWithin, -1);\n    assertTrue(add.overwrite);\n\n    req.close();\n  }\n\n","sourceOld":"  public void testSimpleFormatInAdd() throws Exception\n  {\n    String str = \"{'add':[{'id':'1'},{'id':'2'}]}\".replace('\\'', '\"');\n    SolrQueryRequest req = req();\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    BufferingRequestProcessor p = new BufferingRequestProcessor(null);\n    JsonLoader loader = new JsonLoader();\n    loader.load(req, rsp, new ContentStreamBase.StringStream(str), p);\n\n    assertEquals( 2, p.addCommands.size() );\n\n    AddUpdateCommand add = p.addCommands.get(0);\n    SolrInputDocument d = add.solrDoc;\n    SolrInputField f = d.getField( \"id\" );\n    assertEquals(\"1\", f.getValue());\n    assertEquals(add.commitWithin, -1);\n    assertEquals(add.overwrite, true);\n\n    add = p.addCommands.get(1);\n    d = add.solrDoc;\n    f = d.getField( \"id\" );\n    assertEquals(\"2\", f.getValue());\n    assertEquals(add.commitWithin, -1);\n    assertEquals(add.overwrite, true);\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"042e4d934397657ba04c82b46cc5665076bc5c58":["c26f00b574427b55127e869b935845554afde1fa"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d1a307447328c95a00248512b40d7a5ff12ecd6a":["042e4d934397657ba04c82b46cc5665076bc5c58"],"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693":["042e4d934397657ba04c82b46cc5665076bc5c58","d1a307447328c95a00248512b40d7a5ff12ecd6a"],"f8061ddd97f3352007d927dae445884a6f3d857b":["042e4d934397657ba04c82b46cc5665076bc5c58","d1a307447328c95a00248512b40d7a5ff12ecd6a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d1a307447328c95a00248512b40d7a5ff12ecd6a"]},"commit2Childs":{"042e4d934397657ba04c82b46cc5665076bc5c58":["d1a307447328c95a00248512b40d7a5ff12ecd6a","d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","f8061ddd97f3352007d927dae445884a6f3d857b"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["042e4d934397657ba04c82b46cc5665076bc5c58"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"d1a307447328c95a00248512b40d7a5ff12ecd6a":["d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693":[],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}