{"path":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkDocValues(FieldInfo,DocValuesProducer,int,PrintStream,DocValuesStatus).mjava","commits":[{"id":"8eb2b2b0fce1c4d4ca3b6c6eaa30498066be47d6","date":1425345513,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkDocValues(FieldInfo,DocValuesProducer,int,PrintStream,DocValuesStatus).mjava","pathOld":"/dev/null","sourceNew":"  private static void checkDocValues(FieldInfo fi, DocValuesProducer dvReader, int maxDoc, PrintStream infoStream, DocValuesStatus status) throws Exception {\n    Bits docsWithField = dvReader.getDocsWithField(fi);\n    if (docsWithField == null) {\n      throw new RuntimeException(fi.name + \" docsWithField does not exist\");\n    } else if (docsWithField.length() != maxDoc) {\n      throw new RuntimeException(fi.name + \" docsWithField has incorrect length: \" + docsWithField.length() + \",expected: \" + maxDoc);\n    }\n    switch(fi.getDocValuesType()) {\n      case SORTED:\n        status.totalSortedFields++;\n        checkSortedDocValues(fi.name, maxDoc, dvReader.getSorted(fi), docsWithField);\n        break;\n      case SORTED_NUMERIC:\n        status.totalSortedNumericFields++;\n        checkSortedNumericDocValues(fi.name, maxDoc, dvReader.getSortedNumeric(fi), docsWithField);\n        break;\n      case SORTED_SET:\n        status.totalSortedSetFields++;\n        checkSortedSetDocValues(fi.name, maxDoc, dvReader.getSortedSet(fi), docsWithField);\n        break;\n      case BINARY:\n        status.totalBinaryFields++;\n        checkBinaryDocValues(fi.name, maxDoc, dvReader.getBinary(fi), docsWithField);\n        break;\n      case NUMERIC:\n        status.totalNumericFields++;\n        checkNumericDocValues(fi.name, maxDoc, dvReader.getNumeric(fi), docsWithField);\n        break;\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkDocValues(FieldInfo,DocValuesProducer,int,PrintStream,DocValuesStatus).mjava","pathOld":"/dev/null","sourceNew":"  private static void checkDocValues(FieldInfo fi, DocValuesProducer dvReader, int maxDoc, PrintStream infoStream, DocValuesStatus status) throws Exception {\n    Bits docsWithField = dvReader.getDocsWithField(fi);\n    if (docsWithField == null) {\n      throw new RuntimeException(fi.name + \" docsWithField does not exist\");\n    } else if (docsWithField.length() != maxDoc) {\n      throw new RuntimeException(fi.name + \" docsWithField has incorrect length: \" + docsWithField.length() + \",expected: \" + maxDoc);\n    }\n    switch(fi.getDocValuesType()) {\n      case SORTED:\n        status.totalSortedFields++;\n        checkSortedDocValues(fi.name, maxDoc, dvReader.getSorted(fi), docsWithField);\n        break;\n      case SORTED_NUMERIC:\n        status.totalSortedNumericFields++;\n        checkSortedNumericDocValues(fi.name, maxDoc, dvReader.getSortedNumeric(fi), docsWithField);\n        break;\n      case SORTED_SET:\n        status.totalSortedSetFields++;\n        checkSortedSetDocValues(fi.name, maxDoc, dvReader.getSortedSet(fi), docsWithField);\n        break;\n      case BINARY:\n        status.totalBinaryFields++;\n        checkBinaryDocValues(fi.name, maxDoc, dvReader.getBinary(fi), docsWithField);\n        break;\n      case NUMERIC:\n        status.totalNumericFields++;\n        checkNumericDocValues(fi.name, maxDoc, dvReader.getNumeric(fi), docsWithField);\n        break;\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkDocValues(FieldInfo,DocValuesProducer,int,PrintStream,DocValuesStatus).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkDocValues(FieldInfo,DocValuesProducer,int,PrintStream,DocValuesStatus).mjava","sourceNew":"  private static void checkDocValues(FieldInfo fi, DocValuesProducer dvReader, int maxDoc, PrintStream infoStream, DocValuesStatus status) throws Exception {\n    switch(fi.getDocValuesType()) {\n      case SORTED:\n        status.totalSortedFields++;\n        checkBinaryDocValues(fi.name, maxDoc, dvReader.getSorted(fi));\n        checkSortedDocValues(fi.name, maxDoc, dvReader.getSorted(fi));\n        break;\n      case SORTED_NUMERIC:\n        status.totalSortedNumericFields++;\n        checkSortedNumericDocValues(fi.name, maxDoc, dvReader.getSortedNumeric(fi));\n        break;\n      case SORTED_SET:\n        status.totalSortedSetFields++;\n        checkSortedSetDocValues(fi.name, maxDoc, dvReader.getSortedSet(fi));\n        break;\n      case BINARY:\n        status.totalBinaryFields++;\n        checkBinaryDocValues(fi.name, maxDoc, dvReader.getBinary(fi));\n        break;\n      case NUMERIC:\n        status.totalNumericFields++;\n        checkNumericDocValues(fi.name, dvReader.getNumeric(fi));\n        break;\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","sourceOld":"  private static void checkDocValues(FieldInfo fi, DocValuesProducer dvReader, int maxDoc, PrintStream infoStream, DocValuesStatus status) throws Exception {\n    Bits docsWithField = dvReader.getDocsWithField(fi);\n    if (docsWithField == null) {\n      throw new RuntimeException(fi.name + \" docsWithField does not exist\");\n    } else if (docsWithField.length() != maxDoc) {\n      throw new RuntimeException(fi.name + \" docsWithField has incorrect length: \" + docsWithField.length() + \",expected: \" + maxDoc);\n    }\n    switch(fi.getDocValuesType()) {\n      case SORTED:\n        status.totalSortedFields++;\n        checkSortedDocValues(fi.name, maxDoc, dvReader.getSorted(fi), docsWithField);\n        break;\n      case SORTED_NUMERIC:\n        status.totalSortedNumericFields++;\n        checkSortedNumericDocValues(fi.name, maxDoc, dvReader.getSortedNumeric(fi), docsWithField);\n        break;\n      case SORTED_SET:\n        status.totalSortedSetFields++;\n        checkSortedSetDocValues(fi.name, maxDoc, dvReader.getSortedSet(fi), docsWithField);\n        break;\n      case BINARY:\n        status.totalBinaryFields++;\n        checkBinaryDocValues(fi.name, maxDoc, dvReader.getBinary(fi), docsWithField);\n        break;\n      case NUMERIC:\n        status.totalNumericFields++;\n        checkNumericDocValues(fi.name, maxDoc, dvReader.getNumeric(fi), docsWithField);\n        break;\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkDocValues(FieldInfo,DocValuesProducer,int,PrintStream,DocValuesStatus).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkDocValues(FieldInfo,DocValuesProducer,int,PrintStream,DocValuesStatus).mjava","sourceNew":"  private static void checkDocValues(FieldInfo fi, DocValuesProducer dvReader, int maxDoc, PrintStream infoStream, DocValuesStatus status) throws Exception {\n    switch(fi.getDocValuesType()) {\n      case SORTED:\n        status.totalSortedFields++;\n        checkBinaryDocValues(fi.name, maxDoc, dvReader.getSorted(fi));\n        checkSortedDocValues(fi.name, maxDoc, dvReader.getSorted(fi));\n        break;\n      case SORTED_NUMERIC:\n        status.totalSortedNumericFields++;\n        checkSortedNumericDocValues(fi.name, maxDoc, dvReader.getSortedNumeric(fi));\n        break;\n      case SORTED_SET:\n        status.totalSortedSetFields++;\n        checkSortedSetDocValues(fi.name, maxDoc, dvReader.getSortedSet(fi));\n        break;\n      case BINARY:\n        status.totalBinaryFields++;\n        checkBinaryDocValues(fi.name, maxDoc, dvReader.getBinary(fi));\n        break;\n      case NUMERIC:\n        status.totalNumericFields++;\n        checkNumericDocValues(fi.name, dvReader.getNumeric(fi));\n        break;\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","sourceOld":"  private static void checkDocValues(FieldInfo fi, DocValuesProducer dvReader, int maxDoc, PrintStream infoStream, DocValuesStatus status) throws Exception {\n    Bits docsWithField = dvReader.getDocsWithField(fi);\n    if (docsWithField == null) {\n      throw new RuntimeException(fi.name + \" docsWithField does not exist\");\n    } else if (docsWithField.length() != maxDoc) {\n      throw new RuntimeException(fi.name + \" docsWithField has incorrect length: \" + docsWithField.length() + \",expected: \" + maxDoc);\n    }\n    switch(fi.getDocValuesType()) {\n      case SORTED:\n        status.totalSortedFields++;\n        checkSortedDocValues(fi.name, maxDoc, dvReader.getSorted(fi), docsWithField);\n        break;\n      case SORTED_NUMERIC:\n        status.totalSortedNumericFields++;\n        checkSortedNumericDocValues(fi.name, maxDoc, dvReader.getSortedNumeric(fi), docsWithField);\n        break;\n      case SORTED_SET:\n        status.totalSortedSetFields++;\n        checkSortedSetDocValues(fi.name, maxDoc, dvReader.getSortedSet(fi), docsWithField);\n        break;\n      case BINARY:\n        status.totalBinaryFields++;\n        checkBinaryDocValues(fi.name, maxDoc, dvReader.getBinary(fi), docsWithField);\n        break;\n      case NUMERIC:\n        status.totalNumericFields++;\n        checkNumericDocValues(fi.name, maxDoc, dvReader.getNumeric(fi), docsWithField);\n        break;\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkDocValues(FieldInfo,DocValuesProducer,int,PrintStream,DocValuesStatus).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkDocValues(FieldInfo,DocValuesProducer,int,PrintStream,DocValuesStatus).mjava","sourceNew":"  private static void checkDocValues(FieldInfo fi, DocValuesProducer dvReader, int maxDoc, PrintStream infoStream, DocValuesStatus status) throws Exception {\n    switch(fi.getDocValuesType()) {\n      case SORTED:\n        status.totalSortedFields++;\n        checkBinaryDocValues(fi.name, maxDoc, dvReader.getSorted(fi));\n        checkSortedDocValues(fi.name, maxDoc, dvReader.getSorted(fi));\n        break;\n      case SORTED_NUMERIC:\n        status.totalSortedNumericFields++;\n        checkSortedNumericDocValues(fi.name, maxDoc, dvReader.getSortedNumeric(fi));\n        break;\n      case SORTED_SET:\n        status.totalSortedSetFields++;\n        checkSortedSetDocValues(fi.name, maxDoc, dvReader.getSortedSet(fi));\n        break;\n      case BINARY:\n        status.totalBinaryFields++;\n        checkBinaryDocValues(fi.name, maxDoc, dvReader.getBinary(fi));\n        break;\n      case NUMERIC:\n        status.totalNumericFields++;\n        checkNumericDocValues(fi.name, dvReader.getNumeric(fi));\n        break;\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","sourceOld":"  private static void checkDocValues(FieldInfo fi, DocValuesProducer dvReader, int maxDoc, PrintStream infoStream, DocValuesStatus status) throws Exception {\n    Bits docsWithField = dvReader.getDocsWithField(fi);\n    if (docsWithField == null) {\n      throw new RuntimeException(fi.name + \" docsWithField does not exist\");\n    } else if (docsWithField.length() != maxDoc) {\n      throw new RuntimeException(fi.name + \" docsWithField has incorrect length: \" + docsWithField.length() + \",expected: \" + maxDoc);\n    }\n    switch(fi.getDocValuesType()) {\n      case SORTED:\n        status.totalSortedFields++;\n        checkSortedDocValues(fi.name, maxDoc, dvReader.getSorted(fi), docsWithField);\n        break;\n      case SORTED_NUMERIC:\n        status.totalSortedNumericFields++;\n        checkSortedNumericDocValues(fi.name, maxDoc, dvReader.getSortedNumeric(fi), docsWithField);\n        break;\n      case SORTED_SET:\n        status.totalSortedSetFields++;\n        checkSortedSetDocValues(fi.name, maxDoc, dvReader.getSortedSet(fi), docsWithField);\n        break;\n      case BINARY:\n        status.totalBinaryFields++;\n        checkBinaryDocValues(fi.name, maxDoc, dvReader.getBinary(fi), docsWithField);\n        break;\n      case NUMERIC:\n        status.totalNumericFields++;\n        checkNumericDocValues(fi.name, maxDoc, dvReader.getNumeric(fi), docsWithField);\n        break;\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"11134e449dabe11d6d0ff6a564d84b82cbe93722","date":1477299083,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkDocValues(FieldInfo,DocValuesProducer,int,PrintStream,DocValuesStatus).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkDocValues(FieldInfo,DocValuesProducer,int,PrintStream,DocValuesStatus).mjava","sourceNew":"  private static void checkDocValues(FieldInfo fi, DocValuesProducer dvReader, int maxDoc, PrintStream infoStream, DocValuesStatus status) throws Exception {\n    switch(fi.getDocValuesType()) {\n      case SORTED:\n        status.totalSortedFields++;\n        checkDVIterator(fi, maxDoc, dvReader::getSorted);\n        checkBinaryDocValues(fi.name, maxDoc, dvReader.getSorted(fi));\n        checkSortedDocValues(fi.name, maxDoc, dvReader.getSorted(fi));\n        break;\n      case SORTED_NUMERIC:\n        status.totalSortedNumericFields++;\n        checkDVIterator(fi, maxDoc, dvReader::getSortedNumeric);\n        checkSortedNumericDocValues(fi.name, maxDoc, dvReader.getSortedNumeric(fi));\n        break;\n      case SORTED_SET:\n        status.totalSortedSetFields++;\n        checkDVIterator(fi, maxDoc, dvReader::getSortedSet);\n        checkSortedSetDocValues(fi.name, maxDoc, dvReader.getSortedSet(fi));\n        break;\n      case BINARY:\n        status.totalBinaryFields++;\n        checkDVIterator(fi, maxDoc, dvReader::getBinary);\n        checkBinaryDocValues(fi.name, maxDoc, dvReader.getBinary(fi));\n        break;\n      case NUMERIC:\n        status.totalNumericFields++;\n        checkDVIterator(fi, maxDoc, dvReader::getNumeric);\n        checkNumericDocValues(fi.name, dvReader.getNumeric(fi));\n        break;\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","sourceOld":"  private static void checkDocValues(FieldInfo fi, DocValuesProducer dvReader, int maxDoc, PrintStream infoStream, DocValuesStatus status) throws Exception {\n    switch(fi.getDocValuesType()) {\n      case SORTED:\n        status.totalSortedFields++;\n        checkBinaryDocValues(fi.name, maxDoc, dvReader.getSorted(fi));\n        checkSortedDocValues(fi.name, maxDoc, dvReader.getSorted(fi));\n        break;\n      case SORTED_NUMERIC:\n        status.totalSortedNumericFields++;\n        checkSortedNumericDocValues(fi.name, maxDoc, dvReader.getSortedNumeric(fi));\n        break;\n      case SORTED_SET:\n        status.totalSortedSetFields++;\n        checkSortedSetDocValues(fi.name, maxDoc, dvReader.getSortedSet(fi));\n        break;\n      case BINARY:\n        status.totalBinaryFields++;\n        checkBinaryDocValues(fi.name, maxDoc, dvReader.getBinary(fi));\n        break;\n      case NUMERIC:\n        status.totalNumericFields++;\n        checkNumericDocValues(fi.name, dvReader.getNumeric(fi));\n        break;\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2714c85633b642b29871cf5ff8d17d3ba7bfd76","date":1477307753,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkDocValues(FieldInfo,DocValuesProducer,int,PrintStream,DocValuesStatus).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkDocValues(FieldInfo,DocValuesProducer,int,PrintStream,DocValuesStatus).mjava","sourceNew":"  private static void checkDocValues(FieldInfo fi, DocValuesProducer dvReader, int maxDoc, PrintStream infoStream, DocValuesStatus status) throws Exception {\n    switch(fi.getDocValuesType()) {\n      case SORTED:\n        status.totalSortedFields++;\n        checkDVIterator(fi, maxDoc, dvReader::getSorted);\n        checkBinaryDocValues(fi.name, maxDoc, dvReader.getSorted(fi));\n        checkSortedDocValues(fi.name, maxDoc, dvReader.getSorted(fi));\n        break;\n      case SORTED_NUMERIC:\n        status.totalSortedNumericFields++;\n        checkDVIterator(fi, maxDoc, dvReader::getSortedNumeric);\n        checkSortedNumericDocValues(fi.name, maxDoc, dvReader.getSortedNumeric(fi));\n        break;\n      case SORTED_SET:\n        status.totalSortedSetFields++;\n        checkDVIterator(fi, maxDoc, dvReader::getSortedSet);\n        checkSortedSetDocValues(fi.name, maxDoc, dvReader.getSortedSet(fi));\n        break;\n      case BINARY:\n        status.totalBinaryFields++;\n        checkDVIterator(fi, maxDoc, dvReader::getBinary);\n        checkBinaryDocValues(fi.name, maxDoc, dvReader.getBinary(fi));\n        break;\n      case NUMERIC:\n        status.totalNumericFields++;\n        checkDVIterator(fi, maxDoc, dvReader::getNumeric);\n        checkNumericDocValues(fi.name, dvReader.getNumeric(fi));\n        break;\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","sourceOld":"  private static void checkDocValues(FieldInfo fi, DocValuesProducer dvReader, int maxDoc, PrintStream infoStream, DocValuesStatus status) throws Exception {\n    switch(fi.getDocValuesType()) {\n      case SORTED:\n        status.totalSortedFields++;\n        checkBinaryDocValues(fi.name, maxDoc, dvReader.getSorted(fi));\n        checkSortedDocValues(fi.name, maxDoc, dvReader.getSorted(fi));\n        break;\n      case SORTED_NUMERIC:\n        status.totalSortedNumericFields++;\n        checkSortedNumericDocValues(fi.name, maxDoc, dvReader.getSortedNumeric(fi));\n        break;\n      case SORTED_SET:\n        status.totalSortedSetFields++;\n        checkSortedSetDocValues(fi.name, maxDoc, dvReader.getSortedSet(fi));\n        break;\n      case BINARY:\n        status.totalBinaryFields++;\n        checkBinaryDocValues(fi.name, maxDoc, dvReader.getBinary(fi));\n        break;\n      case NUMERIC:\n        status.totalNumericFields++;\n        checkNumericDocValues(fi.name, dvReader.getNumeric(fi));\n        break;\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"80d0e6d59ae23f4a6f30eaf40bfb40742300287f","date":1477598926,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkDocValues(FieldInfo,DocValuesProducer,int,PrintStream,DocValuesStatus).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkDocValues(FieldInfo,DocValuesProducer,int,PrintStream,DocValuesStatus).mjava","sourceNew":"  private static void checkDocValues(FieldInfo fi, DocValuesProducer dvReader, int maxDoc, PrintStream infoStream, DocValuesStatus status) throws Exception {\n    switch(fi.getDocValuesType()) {\n      case SORTED:\n        status.totalSortedFields++;\n        checkDVIterator(fi, maxDoc, dvReader::getSorted);\n        checkBinaryDocValues(fi.name, maxDoc, dvReader.getSorted(fi));\n        checkSortedDocValues(fi.name, maxDoc, dvReader.getSorted(fi));\n        break;\n      case SORTED_NUMERIC:\n        status.totalSortedNumericFields++;\n        checkDVIterator(fi, maxDoc, dvReader::getSortedNumeric);\n        checkSortedNumericDocValues(fi.name, maxDoc, dvReader.getSortedNumeric(fi));\n        break;\n      case SORTED_SET:\n        status.totalSortedSetFields++;\n        checkDVIterator(fi, maxDoc, dvReader::getSortedSet);\n        checkSortedSetDocValues(fi.name, maxDoc, dvReader.getSortedSet(fi));\n        break;\n      case BINARY:\n        status.totalBinaryFields++;\n        checkDVIterator(fi, maxDoc, dvReader::getBinary);\n        checkBinaryDocValues(fi.name, maxDoc, dvReader.getBinary(fi));\n        break;\n      case NUMERIC:\n        status.totalNumericFields++;\n        checkDVIterator(fi, maxDoc, dvReader::getNumeric);\n        checkNumericDocValues(fi.name, dvReader.getNumeric(fi));\n        break;\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","sourceOld":"  private static void checkDocValues(FieldInfo fi, DocValuesProducer dvReader, int maxDoc, PrintStream infoStream, DocValuesStatus status) throws Exception {\n    switch(fi.getDocValuesType()) {\n      case SORTED:\n        status.totalSortedFields++;\n        checkBinaryDocValues(fi.name, maxDoc, dvReader.getSorted(fi));\n        checkSortedDocValues(fi.name, maxDoc, dvReader.getSorted(fi));\n        break;\n      case SORTED_NUMERIC:\n        status.totalSortedNumericFields++;\n        checkSortedNumericDocValues(fi.name, maxDoc, dvReader.getSortedNumeric(fi));\n        break;\n      case SORTED_SET:\n        status.totalSortedSetFields++;\n        checkSortedSetDocValues(fi.name, maxDoc, dvReader.getSortedSet(fi));\n        break;\n      case BINARY:\n        status.totalBinaryFields++;\n        checkBinaryDocValues(fi.name, maxDoc, dvReader.getBinary(fi));\n        break;\n      case NUMERIC:\n        status.totalNumericFields++;\n        checkNumericDocValues(fi.name, dvReader.getNumeric(fi));\n        break;\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f3d2a33d17fc14a585ce28e167b1bb1c31946b0","date":1552989190,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkDocValues(FieldInfo,DocValuesProducer,int,PrintStream,DocValuesStatus).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkDocValues(FieldInfo,DocValuesProducer,int,PrintStream,DocValuesStatus).mjava","sourceNew":"  private static void checkDocValues(FieldInfo fi, DocValuesProducer dvReader, int maxDoc, PrintStream infoStream, DocValuesStatus status) throws Exception {\n    switch(fi.getDocValuesType()) {\n      case SORTED:\n        status.totalSortedFields++;\n        checkDVIterator(fi, maxDoc, dvReader::getSorted);\n        checkBinaryDocValues(fi.name, maxDoc, dvReader.getSorted(fi), dvReader.getSorted(fi));\n        checkSortedDocValues(fi.name, maxDoc, dvReader.getSorted(fi), dvReader.getSorted(fi));\n        break;\n      case SORTED_NUMERIC:\n        status.totalSortedNumericFields++;\n        checkDVIterator(fi, maxDoc, dvReader::getSortedNumeric);\n        checkSortedNumericDocValues(fi.name, maxDoc, dvReader.getSortedNumeric(fi), dvReader.getSortedNumeric(fi));\n        break;\n      case SORTED_SET:\n        status.totalSortedSetFields++;\n        checkDVIterator(fi, maxDoc, dvReader::getSortedSet);\n        checkSortedSetDocValues(fi.name, maxDoc, dvReader.getSortedSet(fi), dvReader.getSortedSet(fi));\n        break;\n      case BINARY:\n        status.totalBinaryFields++;\n        checkDVIterator(fi, maxDoc, dvReader::getBinary);\n        checkBinaryDocValues(fi.name, maxDoc, dvReader.getBinary(fi), dvReader.getBinary(fi));\n        break;\n      case NUMERIC:\n        status.totalNumericFields++;\n        checkDVIterator(fi, maxDoc, dvReader::getNumeric);\n        checkNumericDocValues(fi.name, dvReader.getNumeric(fi), dvReader.getNumeric(fi));\n        break;\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","sourceOld":"  private static void checkDocValues(FieldInfo fi, DocValuesProducer dvReader, int maxDoc, PrintStream infoStream, DocValuesStatus status) throws Exception {\n    switch(fi.getDocValuesType()) {\n      case SORTED:\n        status.totalSortedFields++;\n        checkDVIterator(fi, maxDoc, dvReader::getSorted);\n        checkBinaryDocValues(fi.name, maxDoc, dvReader.getSorted(fi));\n        checkSortedDocValues(fi.name, maxDoc, dvReader.getSorted(fi));\n        break;\n      case SORTED_NUMERIC:\n        status.totalSortedNumericFields++;\n        checkDVIterator(fi, maxDoc, dvReader::getSortedNumeric);\n        checkSortedNumericDocValues(fi.name, maxDoc, dvReader.getSortedNumeric(fi));\n        break;\n      case SORTED_SET:\n        status.totalSortedSetFields++;\n        checkDVIterator(fi, maxDoc, dvReader::getSortedSet);\n        checkSortedSetDocValues(fi.name, maxDoc, dvReader.getSortedSet(fi));\n        break;\n      case BINARY:\n        status.totalBinaryFields++;\n        checkDVIterator(fi, maxDoc, dvReader::getBinary);\n        checkBinaryDocValues(fi.name, maxDoc, dvReader.getBinary(fi));\n        break;\n      case NUMERIC:\n        status.totalNumericFields++;\n        checkDVIterator(fi, maxDoc, dvReader::getNumeric);\n        checkNumericDocValues(fi.name, dvReader.getNumeric(fi));\n        break;\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8eb2b2b0fce1c4d4ca3b6c6eaa30498066be47d6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8eb2b2b0fce1c4d4ca3b6c6eaa30498066be47d6"],"11134e449dabe11d6d0ff6a564d84b82cbe93722":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["8eb2b2b0fce1c4d4ca3b6c6eaa30498066be47d6","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["8eb2b2b0fce1c4d4ca3b6c6eaa30498066be47d6"],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d2714c85633b642b29871cf5ff8d17d3ba7bfd76"],"7f3d2a33d17fc14a585ce28e167b1bb1c31946b0":["d2714c85633b642b29871cf5ff8d17d3ba7bfd76"],"d2714c85633b642b29871cf5ff8d17d3ba7bfd76":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","11134e449dabe11d6d0ff6a564d84b82cbe93722"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["8eb2b2b0fce1c4d4ca3b6c6eaa30498066be47d6","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7f3d2a33d17fc14a585ce28e167b1bb1c31946b0"]},"commit2Childs":{"8eb2b2b0fce1c4d4ca3b6c6eaa30498066be47d6":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"11134e449dabe11d6d0ff6a564d84b82cbe93722":["d2714c85633b642b29871cf5ff8d17d3ba7bfd76"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8eb2b2b0fce1c4d4ca3b6c6eaa30498066be47d6","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["11134e449dabe11d6d0ff6a564d84b82cbe93722","d2714c85633b642b29871cf5ff8d17d3ba7bfd76","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":[],"7f3d2a33d17fc14a585ce28e167b1bb1c31946b0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d2714c85633b642b29871cf5ff8d17d3ba7bfd76":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f","7f3d2a33d17fc14a585ce28e167b1bb1c31946b0"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","80d0e6d59ae23f4a6f30eaf40bfb40742300287f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}