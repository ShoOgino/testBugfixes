{"path":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxQuery.DisjunctionMaxWeight#scorer(AtomicReaderContext,Bits).mjava","commits":[{"id":"2e18c86f811939bfa8cd24046c96ed026f2e9b34","date":1393893071,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxQuery.DisjunctionMaxWeight#scorer(AtomicReaderContext,Bits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxQuery.DisjunctionMaxWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","sourceNew":"    /** Create the scorer used to score our associated DisjunctionMaxQuery */\n    @Override\n    public Scorer scorer(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n      List<Scorer> scorers = new ArrayList<Scorer>();\n      for (Weight w : weights) {\n        // we will advance() subscorers\n        Scorer subScorer = w.scorer(context, acceptDocs);\n        if (subScorer != null) {\n          scorers.add(subScorer);\n\n        }\n      }\n      if (scorers.isEmpty()) {\n        // no sub-scorers had any documents\n        return null;\n      }\n      DisjunctionMaxScorer result = new DisjunctionMaxScorer(this, tieBreakerMultiplier, scorers.toArray(new Scorer[scorers.size()]));\n      return result;\n    }\n\n","sourceOld":"    /** Create the scorer used to score our associated DisjunctionMaxQuery */\n    @Override\n    public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n        boolean topScorer, Bits acceptDocs) throws IOException {\n      List<Scorer> scorers = new ArrayList<Scorer>();\n      for (Weight w : weights) {\n        // we will advance() subscorers\n        Scorer subScorer = w.scorer(context, true, false, acceptDocs);\n        if (subScorer != null) {\n          scorers.add(subScorer);\n\n        }\n      }\n      if (scorers.isEmpty()) {\n        // no sub-scorers had any documents\n        return null;\n      }\n      DisjunctionMaxScorer result = new DisjunctionMaxScorer(this, tieBreakerMultiplier, scorers.toArray(new Scorer[scorers.size()]));\n      return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"acf00221f44c5f08ccea014f2492b53af15ecd66","date":1394568293,"type":1,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxQuery.DisjunctionMaxWeight#scorer(AtomicReaderContext,Bits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxQuery.DisjunctionMaxWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","sourceNew":"    /** Create the scorer used to score our associated DisjunctionMaxQuery */\n    @Override\n    public Scorer scorer(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n      List<Scorer> scorers = new ArrayList<Scorer>();\n      for (Weight w : weights) {\n        // we will advance() subscorers\n        Scorer subScorer = w.scorer(context, acceptDocs);\n        if (subScorer != null) {\n          scorers.add(subScorer);\n\n        }\n      }\n      if (scorers.isEmpty()) {\n        // no sub-scorers had any documents\n        return null;\n      }\n      DisjunctionMaxScorer result = new DisjunctionMaxScorer(this, tieBreakerMultiplier, scorers.toArray(new Scorer[scorers.size()]));\n      return result;\n    }\n\n","sourceOld":"    /** Create the scorer used to score our associated DisjunctionMaxQuery */\n    @Override\n    public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n        boolean topScorer, Bits acceptDocs) throws IOException {\n      List<Scorer> scorers = new ArrayList<Scorer>();\n      for (Weight w : weights) {\n        // we will advance() subscorers\n        Scorer subScorer = w.scorer(context, true, false, acceptDocs);\n        if (subScorer != null) {\n          scorers.add(subScorer);\n\n        }\n      }\n      if (scorers.isEmpty()) {\n        // no sub-scorers had any documents\n        return null;\n      }\n      DisjunctionMaxScorer result = new DisjunctionMaxScorer(this, tieBreakerMultiplier, scorers.toArray(new Scorer[scorers.size()]));\n      return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxQuery.DisjunctionMaxWeight#scorer(AtomicReaderContext,Bits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxQuery.DisjunctionMaxWeight#scorer(AtomicReaderContext,Bits).mjava","sourceNew":"    /** Create the scorer used to score our associated DisjunctionMaxQuery */\n    @Override\n    public Scorer scorer(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n      List<Scorer> scorers = new ArrayList<>();\n      for (Weight w : weights) {\n        // we will advance() subscorers\n        Scorer subScorer = w.scorer(context, acceptDocs);\n        if (subScorer != null) {\n          scorers.add(subScorer);\n\n        }\n      }\n      if (scorers.isEmpty()) {\n        // no sub-scorers had any documents\n        return null;\n      }\n      DisjunctionMaxScorer result = new DisjunctionMaxScorer(this, tieBreakerMultiplier, scorers.toArray(new Scorer[scorers.size()]));\n      return result;\n    }\n\n","sourceOld":"    /** Create the scorer used to score our associated DisjunctionMaxQuery */\n    @Override\n    public Scorer scorer(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n      List<Scorer> scorers = new ArrayList<Scorer>();\n      for (Weight w : weights) {\n        // we will advance() subscorers\n        Scorer subScorer = w.scorer(context, acceptDocs);\n        if (subScorer != null) {\n          scorers.add(subScorer);\n\n        }\n      }\n      if (scorers.isEmpty()) {\n        // no sub-scorers had any documents\n        return null;\n      }\n      DisjunctionMaxScorer result = new DisjunctionMaxScorer(this, tieBreakerMultiplier, scorers.toArray(new Scorer[scorers.size()]));\n      return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a74e723ad6f1491f36039f9fe6af13a530f8135d","date":1400774466,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxQuery.DisjunctionMaxWeight#scorer(AtomicReaderContext,Bits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxQuery.DisjunctionMaxWeight#scorer(AtomicReaderContext,Bits).mjava","sourceNew":"    /** Create the scorer used to score our associated DisjunctionMaxQuery */\n    @Override\n    public Scorer scorer(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n      List<Scorer> scorers = new ArrayList<>();\n      for (Weight w : weights) {\n        // we will advance() subscorers\n        Scorer subScorer = w.scorer(context, acceptDocs);\n        if (subScorer != null) {\n          scorers.add(subScorer);\n        }\n      }\n      if (scorers.isEmpty()) {\n        // no sub-scorers had any documents\n        return null;\n      } else if (scorers.size() == 1) {\n        // only one sub-scorer in this segment\n        return scorers.get(0);\n      } else {\n        return new DisjunctionMaxScorer(this, tieBreakerMultiplier, scorers.toArray(new Scorer[scorers.size()]));\n      }\n    }\n\n","sourceOld":"    /** Create the scorer used to score our associated DisjunctionMaxQuery */\n    @Override\n    public Scorer scorer(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n      List<Scorer> scorers = new ArrayList<>();\n      for (Weight w : weights) {\n        // we will advance() subscorers\n        Scorer subScorer = w.scorer(context, acceptDocs);\n        if (subScorer != null) {\n          scorers.add(subScorer);\n\n        }\n      }\n      if (scorers.isEmpty()) {\n        // no sub-scorers had any documents\n        return null;\n      }\n      DisjunctionMaxScorer result = new DisjunctionMaxScorer(this, tieBreakerMultiplier, scorers.toArray(new Scorer[scorers.size()]));\n      return result;\n    }\n\n","bugFix":["2123bddbd65dea198cac380540636ce43a880403","56374313ec4613df1f728772dedcff8bb3cd419d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":4,"author":"Ryan Ernst","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxQuery.DisjunctionMaxWeight#scorer(AtomicReaderContext,Bits).mjava","sourceNew":null,"sourceOld":"    /** Create the scorer used to score our associated DisjunctionMaxQuery */\n    @Override\n    public Scorer scorer(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n      List<Scorer> scorers = new ArrayList<>();\n      for (Weight w : weights) {\n        // we will advance() subscorers\n        Scorer subScorer = w.scorer(context, acceptDocs);\n        if (subScorer != null) {\n          scorers.add(subScorer);\n        }\n      }\n      if (scorers.isEmpty()) {\n        // no sub-scorers had any documents\n        return null;\n      } else if (scorers.size() == 1) {\n        // only one sub-scorer in this segment\n        return scorers.get(0);\n      } else {\n        return new DisjunctionMaxScorer(this, tieBreakerMultiplier, scorers.toArray(new Scorer[scorers.size()]));\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2e18c86f811939bfa8cd24046c96ed026f2e9b34":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["acf00221f44c5f08ccea014f2492b53af15ecd66"],"a74e723ad6f1491f36039f9fe6af13a530f8135d":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"acf00221f44c5f08ccea014f2492b53af15ecd66":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2e18c86f811939bfa8cd24046c96ed026f2e9b34"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["a74e723ad6f1491f36039f9fe6af13a530f8135d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c9fb5f46e264daf5ba3860defe623a89d202dd87"]},"commit2Childs":{"2e18c86f811939bfa8cd24046c96ed026f2e9b34":["acf00221f44c5f08ccea014f2492b53af15ecd66"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["a74e723ad6f1491f36039f9fe6af13a530f8135d"],"a74e723ad6f1491f36039f9fe6af13a530f8135d":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2e18c86f811939bfa8cd24046c96ed026f2e9b34","acf00221f44c5f08ccea014f2492b53af15ecd66"],"acf00221f44c5f08ccea014f2492b53af15ecd66":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}