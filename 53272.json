{"path":"lucene/src/java/org/apache/lucene/util/BitVector#BitVector(Directory,String).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/BitVector#BitVector(Directory,String).mjava","pathOld":"src/java/org/apache/lucene/util/BitVector#BitVector(Directory,String).mjava","sourceNew":"  /** Constructs a bit vector from the file <code>name</code> in Directory\n    <code>d</code>, as written by the {@link #write} method.\n    */\n  public BitVector(Directory d, String name) throws IOException {\n    IndexInput input = d.openInput(name);\n    try {\n      size = input.readInt();       // read size\n      if (size == -1) {\n        readDgaps(input);\n      } else {\n        readBits(input);\n      }\n    } finally {\n      input.close();\n    }\n  }\n\n","sourceOld":"  /** Constructs a bit vector from the file <code>name</code> in Directory\n    <code>d</code>, as written by the {@link #write} method.\n    */\n  public BitVector(Directory d, String name) throws IOException {\n    IndexInput input = d.openInput(name);\n    try {\n      size = input.readInt();       // read size\n      if (size == -1) {\n        readDgaps(input);\n      } else {\n        readBits(input);\n      }\n    } finally {\n      input.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"639c36565ce03aed5b0fce7c9e4448e53a1f7efd","date":1308580104,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/BitVector#BitVector(Directory,String,IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/BitVector#BitVector(Directory,String).mjava","sourceNew":"  /** Constructs a bit vector from the file <code>name</code> in Directory\n    <code>d</code>, as written by the {@link #write} method.\n    */\n  public BitVector(Directory d, String name, IOContext context) throws IOException {\n    IndexInput input = d.openInput(name, context);\n    try {\n      size = input.readInt();       // read size\n      if (size == -1) {\n        readDgaps(input);\n      } else {\n        readBits(input);\n      }\n    } finally {\n      input.close();\n    }\n  }\n\n","sourceOld":"  /** Constructs a bit vector from the file <code>name</code> in Directory\n    <code>d</code>, as written by the {@link #write} method.\n    */\n  public BitVector(Directory d, String name) throws IOException {\n    IndexInput input = d.openInput(name);\n    try {\n      size = input.readInt();       // read size\n      if (size == -1) {\n        readDgaps(input);\n      } else {\n        readBits(input);\n      }\n    } finally {\n      input.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ffa56322f560268d9e8c21373d8a84a9bbbbb7e2","date":1309279617,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/BitVector#BitVector(Directory,String).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/BitVector#BitVector(Directory,String).mjava","sourceNew":"  /** Constructs a bit vector from the file <code>name</code> in Directory\n    <code>d</code>, as written by the {@link #write} method.\n    */\n  public BitVector(Directory d, String name) throws IOException {\n    IndexInput input = d.openInput(name);\n\n    try {\n      final int firstInt = input.readInt();\n      final int version;\n      if (firstInt == -2) {\n        // New format, with full header & version:\n        version = CodecUtil.checkHeader(input, CODEC, VERSION_START, VERSION_START);\n        size = input.readInt();\n      } else {\n        version = VERSION_PRE;\n        size = firstInt;\n      }\n      if (size == -1) {\n        readDgaps(input);\n      } else {\n        readBits(input);\n      }\n    } finally {\n      input.close();\n    }\n  }\n\n","sourceOld":"  /** Constructs a bit vector from the file <code>name</code> in Directory\n    <code>d</code>, as written by the {@link #write} method.\n    */\n  public BitVector(Directory d, String name) throws IOException {\n    IndexInput input = d.openInput(name);\n    try {\n      size = input.readInt();       // read size\n      if (size == -1) {\n        readDgaps(input);\n      } else {\n        readBits(input);\n      }\n    } finally {\n      input.close();\n    }\n  }\n\n","bugFix":["5e9c92541487f346938eae718677aac806afcdab"],"bugIntro":["9a70ce9bddc6f985feb8e5e182aebe20872328d4","9a70ce9bddc6f985feb8e5e182aebe20872328d4","9a70ce9bddc6f985feb8e5e182aebe20872328d4","9a70ce9bddc6f985feb8e5e182aebe20872328d4","9a70ce9bddc6f985feb8e5e182aebe20872328d4","9a70ce9bddc6f985feb8e5e182aebe20872328d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2553b00f699380c64959ccb27991289aae87be2e","date":1309290151,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/BitVector#BitVector(Directory,String).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/BitVector#BitVector(Directory,String).mjava","sourceNew":"  /** Constructs a bit vector from the file <code>name</code> in Directory\n    <code>d</code>, as written by the {@link #write} method.\n    */\n  public BitVector(Directory d, String name) throws IOException {\n    IndexInput input = d.openInput(name);\n\n    try {\n      final int firstInt = input.readInt();\n      final int version;\n      if (firstInt == -2) {\n        // New format, with full header & version:\n        version = CodecUtil.checkHeader(input, CODEC, VERSION_START, VERSION_START);\n        size = input.readInt();\n      } else {\n        version = VERSION_PRE;\n        size = firstInt;\n      }\n      if (size == -1) {\n        readDgaps(input);\n      } else {\n        readBits(input);\n      }\n    } finally {\n      input.close();\n    }\n  }\n\n","sourceOld":"  /** Constructs a bit vector from the file <code>name</code> in Directory\n    <code>d</code>, as written by the {@link #write} method.\n    */\n  public BitVector(Directory d, String name) throws IOException {\n    IndexInput input = d.openInput(name);\n    try {\n      size = input.readInt();       // read size\n      if (size == -1) {\n        readDgaps(input);\n      } else {\n        readBits(input);\n      }\n    } finally {\n      input.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","date":1309960478,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/BitVector#BitVector(Directory,String).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/BitVector#BitVector(Directory,String).mjava","sourceNew":"  /** Constructs a bit vector from the file <code>name</code> in Directory\n    <code>d</code>, as written by the {@link #write} method.\n    */\n  public BitVector(Directory d, String name) throws IOException {\n    IndexInput input = d.openInput(name);\n\n    try {\n      final int firstInt = input.readInt();\n\n      if (firstInt == -2) {\n        // New format, with full header & version:\n        version = CodecUtil.checkHeader(input, CODEC, VERSION_START, VERSION_CURRENT);\n        size = input.readInt();\n      } else {\n        version = VERSION_PRE;\n        size = firstInt;\n      }\n      if (size == -1) {\n        if (version >= VERSION_DGAPS_CLEARED) {\n          readClearedDgaps(input);\n        } else {\n          readSetDgaps(input);\n        }\n      } else {\n        readBits(input);\n      }\n    } finally {\n      input.close();\n    }\n  }\n\n","sourceOld":"  /** Constructs a bit vector from the file <code>name</code> in Directory\n    <code>d</code>, as written by the {@link #write} method.\n    */\n  public BitVector(Directory d, String name) throws IOException {\n    IndexInput input = d.openInput(name);\n\n    try {\n      final int firstInt = input.readInt();\n      final int version;\n      if (firstInt == -2) {\n        // New format, with full header & version:\n        version = CodecUtil.checkHeader(input, CODEC, VERSION_START, VERSION_START);\n        size = input.readInt();\n      } else {\n        version = VERSION_PRE;\n        size = firstInt;\n      }\n      if (size == -1) {\n        readDgaps(input);\n      } else {\n        readBits(input);\n      }\n    } finally {\n      input.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/BitVector#BitVector(Directory,String).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/BitVector#BitVector(Directory,String).mjava","sourceNew":"  /** Constructs a bit vector from the file <code>name</code> in Directory\n    <code>d</code>, as written by the {@link #write} method.\n    */\n  public BitVector(Directory d, String name) throws IOException {\n    IndexInput input = d.openInput(name);\n\n    try {\n      final int firstInt = input.readInt();\n\n      if (firstInt == -2) {\n        // New format, with full header & version:\n        version = CodecUtil.checkHeader(input, CODEC, VERSION_START, VERSION_CURRENT);\n        size = input.readInt();\n      } else {\n        version = VERSION_PRE;\n        size = firstInt;\n      }\n      if (size == -1) {\n        if (version >= VERSION_DGAPS_CLEARED) {\n          readClearedDgaps(input);\n        } else {\n          readSetDgaps(input);\n        }\n      } else {\n        readBits(input);\n      }\n    } finally {\n      input.close();\n    }\n  }\n\n","sourceOld":"  /** Constructs a bit vector from the file <code>name</code> in Directory\n    <code>d</code>, as written by the {@link #write} method.\n    */\n  public BitVector(Directory d, String name) throws IOException {\n    IndexInput input = d.openInput(name);\n\n    try {\n      final int firstInt = input.readInt();\n      final int version;\n      if (firstInt == -2) {\n        // New format, with full header & version:\n        version = CodecUtil.checkHeader(input, CODEC, VERSION_START, VERSION_START);\n        size = input.readInt();\n      } else {\n        version = VERSION_PRE;\n        size = firstInt;\n      }\n      if (size == -1) {\n        readDgaps(input);\n      } else {\n        readBits(input);\n      }\n    } finally {\n      input.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ddc4c914be86e34b54f70023f45a60fa7f04e929","date":1310115160,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/BitVector#BitVector(Directory,String,IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/BitVector#BitVector(Directory,String).mjava","sourceNew":"  /** Constructs a bit vector from the file <code>name</code> in Directory\n    <code>d</code>, as written by the {@link #write} method.\n    */\n  public BitVector(Directory d, String name, IOContext context) throws IOException {\n    IndexInput input = d.openInput(name, context);\n\n    try {\n      final int firstInt = input.readInt();\n\n      if (firstInt == -2) {\n        // New format, with full header & version:\n        version = CodecUtil.checkHeader(input, CODEC, VERSION_START, VERSION_CURRENT);\n        size = input.readInt();\n      } else {\n        version = VERSION_PRE;\n        size = firstInt;\n      }\n      if (size == -1) {\n        if (version >= VERSION_DGAPS_CLEARED) {\n          readClearedDgaps(input);\n        } else {\n          readSetDgaps(input);\n        }\n      } else {\n        readBits(input);\n      }\n    } finally {\n      input.close();\n    }\n  }\n\n","sourceOld":"  /** Constructs a bit vector from the file <code>name</code> in Directory\n    <code>d</code>, as written by the {@link #write} method.\n    */\n  public BitVector(Directory d, String name) throws IOException {\n    IndexInput input = d.openInput(name);\n\n    try {\n      final int firstInt = input.readInt();\n\n      if (firstInt == -2) {\n        // New format, with full header & version:\n        version = CodecUtil.checkHeader(input, CODEC, VERSION_START, VERSION_CURRENT);\n        size = input.readInt();\n      } else {\n        version = VERSION_PRE;\n        size = firstInt;\n      }\n      if (size == -1) {\n        if (version >= VERSION_DGAPS_CLEARED) {\n          readClearedDgaps(input);\n        } else {\n          readSetDgaps(input);\n        }\n      } else {\n        readBits(input);\n      }\n    } finally {\n      input.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5d004d0e0b3f65bb40da76d476d659d7888270e8","date":1310158940,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/BitVector#BitVector(Directory,String,IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/BitVector#BitVector(Directory,String).mjava","sourceNew":"  /** Constructs a bit vector from the file <code>name</code> in Directory\n    <code>d</code>, as written by the {@link #write} method.\n    */\n  public BitVector(Directory d, String name, IOContext context) throws IOException {\n    IndexInput input = d.openInput(name, context);\n\n    try {\n      final int firstInt = input.readInt();\n\n      if (firstInt == -2) {\n        // New format, with full header & version:\n        version = CodecUtil.checkHeader(input, CODEC, VERSION_START, VERSION_CURRENT);\n        size = input.readInt();\n      } else {\n        version = VERSION_PRE;\n        size = firstInt;\n      }\n      if (size == -1) {\n        if (version >= VERSION_DGAPS_CLEARED) {\n          readClearedDgaps(input);\n        } else {\n          readSetDgaps(input);\n        }\n      } else {\n        readBits(input);\n      }\n    } finally {\n      input.close();\n    }\n  }\n\n","sourceOld":"  /** Constructs a bit vector from the file <code>name</code> in Directory\n    <code>d</code>, as written by the {@link #write} method.\n    */\n  public BitVector(Directory d, String name) throws IOException {\n    IndexInput input = d.openInput(name);\n\n    try {\n      final int firstInt = input.readInt();\n\n      if (firstInt == -2) {\n        // New format, with full header & version:\n        version = CodecUtil.checkHeader(input, CODEC, VERSION_START, VERSION_CURRENT);\n        size = input.readInt();\n      } else {\n        version = VERSION_PRE;\n        size = firstInt;\n      }\n      if (size == -1) {\n        if (version >= VERSION_DGAPS_CLEARED) {\n          readClearedDgaps(input);\n        } else {\n          readSetDgaps(input);\n        }\n      } else {\n        readBits(input);\n      }\n    } finally {\n      input.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb":["ffa56322f560268d9e8c21373d8a84a9bbbbb7e2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"639c36565ce03aed5b0fce7c9e4448e53a1f7efd":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":["817d8435e9135b756f08ce6710ab0baac51bdf88","ddc4c914be86e34b54f70023f45a60fa7f04e929"],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","639c36565ce03aed5b0fce7c9e4448e53a1f7efd"],"2553b00f699380c64959ccb27991289aae87be2e":["9454a6510e2db155fb01faa5c049b06ece95fab9","ffa56322f560268d9e8c21373d8a84a9bbbbb7e2"],"ffa56322f560268d9e8c21373d8a84a9bbbbb7e2":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["2553b00f699380c64959ccb27991289aae87be2e","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb":["ddc4c914be86e34b54f70023f45a60fa7f04e929","817d8435e9135b756f08ce6710ab0baac51bdf88"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"639c36565ce03aed5b0fce7c9e4448e53a1f7efd":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":[],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["5d004d0e0b3f65bb40da76d476d659d7888270e8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2553b00f699380c64959ccb27991289aae87be2e":["817d8435e9135b756f08ce6710ab0baac51bdf88"],"ffa56322f560268d9e8c21373d8a84a9bbbbb7e2":["e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","2553b00f699380c64959ccb27991289aae87be2e"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["5d004d0e0b3f65bb40da76d476d659d7888270e8"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["639c36565ce03aed5b0fce7c9e4448e53a1f7efd","2553b00f699380c64959ccb27991289aae87be2e","ffa56322f560268d9e8c21373d8a84a9bbbbb7e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5d004d0e0b3f65bb40da76d476d659d7888270e8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}