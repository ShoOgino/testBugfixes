{"path":"lucene/core/src/test/org/apache/lucene/geo/TestPolygon2D#testIntersectsSameEdge().mjava","commits":[{"id":"b73ab989727307be90eb75c2ce4ef41d383974f3","date":1580322291,"type":0,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/geo/TestPolygon2D#testIntersectsSameEdge().mjava","pathOld":"/dev/null","sourceNew":"  /** Tests edge case behavior with respect to insideness */\n  public void testIntersectsSameEdge() {\n    Component2D poly = Polygon2D.create(new Polygon(new double[] { -2, -2, 2, 2, -2 }, new double[] { -2, 2, 2, -2, -2 }));\n    // line inside edge\n    assertEquals(Relation.CELL_INSIDE_QUERY, poly.relateTriangle(-1, -1, 1, 1, -1, -1));\n    assertEquals(Relation.CELL_INSIDE_QUERY, poly.relateTriangle(-2, -2, 2, 2, -2, -2));\n    // line over edge\n    assertEquals(Relation.CELL_CROSSES_QUERY, poly.relateTriangle(-4, -4, 4, 4, -4, -4));\n    assertEquals(Relation.CELL_CROSSES_QUERY, poly.relateTriangle(-2, -2, 4, 4, 4, 4));\n    // line inside edge\n    assertEquals(Relation.CELL_CROSSES_QUERY, poly.relateTriangle(-1, -1, 3, 3, 1, 1));\n    assertEquals(Relation.CELL_CROSSES_QUERY, poly.relateTriangle(-2, -2, 3, 3, 2, 2));\n    // line over edge\n    assertEquals(Relation.CELL_CROSSES_QUERY, poly.relateTriangle(-4, -4, 7, 7, 4, 4));\n    assertEquals(Relation.CELL_CROSSES_QUERY, poly.relateTriangle(-2, -2, 7, 7, 4, 4));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c568a1e2a5125c2245150eebb030a81baa158b31","date":1587403489,"type":3,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/geo/TestPolygon2D#testIntersectsSameEdge().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/geo/TestPolygon2D#testIntersectsSameEdge().mjava","sourceNew":"  /** Tests edge case behavior with respect to insideness */\n  public void testIntersectsSameEdge() {\n    Component2D poly = Polygon2D.create(new Polygon(new double[] { -2, -2, 2, 2, -2 }, new double[] { -2, 2, 2, -2, -2 }));\n    // line inside edge\n    assertTrue(poly.containsTriangle(-1, -1, 1, 1, -1, -1));\n    assertTrue(poly.containsTriangle(-2, -2, 2, 2, -2, -2));\n    assertTrue(poly.intersectsTriangle(-1, -1, 1, 1, -1, -1));\n    assertTrue(poly.intersectsTriangle(-2, -2, 2, 2, -2, -2));\n    // line over edge\n    assertFalse(poly.containsTriangle(-4, -4, 4, 4, -4, -4));\n    assertFalse(poly.containsTriangle(-2, -2, 4, 4, 4, 4));\n    assertTrue(poly.intersectsTriangle(-4, -4, 4, 4, -4, -4));\n    assertTrue(poly.intersectsTriangle(-2, -2, 4, 4, 4, 4));\n    // line inside edge\n    assertFalse(poly.containsTriangle(-1, -1, 3, 3, 1, 1));\n    assertFalse(poly.containsTriangle(-2, -2, 3, 3, 2, 2));\n    assertTrue(poly.intersectsTriangle(-1, -1, 3, 3, 1, 1));\n    assertTrue(poly.intersectsTriangle(-2, -2, 3, 3, 2, 2));\n    // line over edge\n    assertFalse(poly.containsTriangle(-4, -4, 7, 7, 4, 4));\n    assertFalse(poly.containsTriangle(-2, -2, 7, 7, 4, 4));\n    assertTrue(poly.intersectsTriangle(-4, -4, 7, 7, 4, 4));\n    assertTrue(poly.intersectsTriangle(-2, -2, 7, 7, 4, 4));\n  }\n\n","sourceOld":"  /** Tests edge case behavior with respect to insideness */\n  public void testIntersectsSameEdge() {\n    Component2D poly = Polygon2D.create(new Polygon(new double[] { -2, -2, 2, 2, -2 }, new double[] { -2, 2, 2, -2, -2 }));\n    // line inside edge\n    assertEquals(Relation.CELL_INSIDE_QUERY, poly.relateTriangle(-1, -1, 1, 1, -1, -1));\n    assertEquals(Relation.CELL_INSIDE_QUERY, poly.relateTriangle(-2, -2, 2, 2, -2, -2));\n    // line over edge\n    assertEquals(Relation.CELL_CROSSES_QUERY, poly.relateTriangle(-4, -4, 4, 4, -4, -4));\n    assertEquals(Relation.CELL_CROSSES_QUERY, poly.relateTriangle(-2, -2, 4, 4, 4, 4));\n    // line inside edge\n    assertEquals(Relation.CELL_CROSSES_QUERY, poly.relateTriangle(-1, -1, 3, 3, 1, 1));\n    assertEquals(Relation.CELL_CROSSES_QUERY, poly.relateTriangle(-2, -2, 3, 3, 2, 2));\n    // line over edge\n    assertEquals(Relation.CELL_CROSSES_QUERY, poly.relateTriangle(-4, -4, 7, 7, 4, 4));\n    assertEquals(Relation.CELL_CROSSES_QUERY, poly.relateTriangle(-2, -2, 7, 7, 4, 4));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b73ab989727307be90eb75c2ce4ef41d383974f3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c568a1e2a5125c2245150eebb030a81baa158b31":["b73ab989727307be90eb75c2ce4ef41d383974f3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c568a1e2a5125c2245150eebb030a81baa158b31"]},"commit2Childs":{"b73ab989727307be90eb75c2ce4ef41d383974f3":["c568a1e2a5125c2245150eebb030a81baa158b31"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b73ab989727307be90eb75c2ce4ef41d383974f3"],"c568a1e2a5125c2245150eebb030a81baa158b31":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}