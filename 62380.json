{"path":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent.IdsRequsted#parseParams(SolrQueryRequest).mjava","commits":[{"id":"4c58bab35e821e15dc6b8669d2f15c2e3cc6d9ce","date":1468951909,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent.IdsRequsted#parseParams(SolrQueryRequest).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Parsers the <code>id</code> and <code>ids</code> params attached to the specified request object, \n     * and returns an <code>IdsRequsted</code> struct to use for this request.\n     * The <code>IdsRequsted</code> is cached in the {@link SolrQueryRequest#getContext} so subsequent \n     * method calls on the same request will not re-parse the params.\n     */\n    public static IdsRequsted parseParams(SolrQueryRequest req) {\n      final String contextKey = IdsRequsted.class.toString() + \"_PARSED_ID_PARAMS\";\n      if (req.getContext().containsKey(contextKey)) {\n        return (IdsRequsted)req.getContext().get(contextKey);\n      }\n      final SolrParams params = req.getParams();\n      final String id[] = params.getParams(\"id\");\n      final String ids[] = params.getParams(\"ids\");\n      \n      if (id == null && ids == null) {\n        IdsRequsted result = new IdsRequsted(Collections.<String>emptyList(), true);\n        req.getContext().put(contextKey, result);\n        return result;\n      }\n      final List<String> allIds = new ArrayList<>((null == id ? 0 : id.length)\n                                                  + (null == ids ? 0 : (2 * ids.length)));\n      if (null != id) {\n        for (String singleId : id) {\n          allIds.add(singleId);\n        }\n      }\n      if (null != ids) {\n        for (String idList : ids) {\n          allIds.addAll( StrUtils.splitSmart(idList, \",\", true) );\n        }\n      }\n      // if the client specified a single id=foo, then use \"doc\":{\n      // otherwise use a standard doclist\n      IdsRequsted result = new IdsRequsted(allIds, (ids == null && allIds.size() <= 1));\n      req.getContext().put(contextKey, result);\n      return result;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent.IdsRequsted#parseParams(SolrQueryRequest).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Parsers the <code>id</code> and <code>ids</code> params attached to the specified request object, \n     * and returns an <code>IdsRequsted</code> struct to use for this request.\n     * The <code>IdsRequsted</code> is cached in the {@link SolrQueryRequest#getContext} so subsequent \n     * method calls on the same request will not re-parse the params.\n     */\n    public static IdsRequsted parseParams(SolrQueryRequest req) {\n      final String contextKey = IdsRequsted.class.toString() + \"_PARSED_ID_PARAMS\";\n      if (req.getContext().containsKey(contextKey)) {\n        return (IdsRequsted)req.getContext().get(contextKey);\n      }\n      final SolrParams params = req.getParams();\n      final String id[] = params.getParams(\"id\");\n      final String ids[] = params.getParams(\"ids\");\n      \n      if (id == null && ids == null) {\n        IdsRequsted result = new IdsRequsted(Collections.<String>emptyList(), true);\n        req.getContext().put(contextKey, result);\n        return result;\n      }\n      final List<String> allIds = new ArrayList<>((null == id ? 0 : id.length)\n                                                  + (null == ids ? 0 : (2 * ids.length)));\n      if (null != id) {\n        for (String singleId : id) {\n          allIds.add(singleId);\n        }\n      }\n      if (null != ids) {\n        for (String idList : ids) {\n          allIds.addAll( StrUtils.splitSmart(idList, \",\", true) );\n        }\n      }\n      // if the client specified a single id=foo, then use \"doc\":{\n      // otherwise use a standard doclist\n      IdsRequsted result = new IdsRequsted(allIds, (ids == null && allIds.size() <= 1));\n      req.getContext().put(contextKey, result);\n      return result;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6d2dadc1f5ca8703d8659f4964961f9967935d75","date":1490231750,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent.IdsRequsted#parseParams(SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent.IdsRequsted#parseParams(SolrQueryRequest).mjava","sourceNew":"    /**\n     * Parsers the <code>id</code> and <code>ids</code> params attached to the specified request object, \n     * and returns an <code>IdsRequsted</code> struct to use for this request.\n     * The <code>IdsRequsted</code> is cached in the {@link SolrQueryRequest#getContext} so subsequent \n     * method calls on the same request will not re-parse the params.\n     */\n    public static IdsRequsted parseParams(SolrQueryRequest req) {\n      final String contextKey = IdsRequsted.class.toString() + \"_PARSED_ID_PARAMS\";\n      if (req.getContext().containsKey(contextKey)) {\n        return (IdsRequsted)req.getContext().get(contextKey);\n      }\n      final SolrParams params = req.getParams();\n      final String id[] = params.getParams(ID);\n      final String ids[] = params.getParams(\"ids\");\n      \n      if (id == null && ids == null) {\n        IdsRequsted result = new IdsRequsted(Collections.<String>emptyList(), true);\n        req.getContext().put(contextKey, result);\n        return result;\n      }\n      final List<String> allIds = new ArrayList<>((null == id ? 0 : id.length)\n                                                  + (null == ids ? 0 : (2 * ids.length)));\n      if (null != id) {\n        for (String singleId : id) {\n          allIds.add(singleId);\n        }\n      }\n      if (null != ids) {\n        for (String idList : ids) {\n          allIds.addAll( StrUtils.splitSmart(idList, \",\", true) );\n        }\n      }\n      // if the client specified a single id=foo, then use \"doc\":{\n      // otherwise use a standard doclist\n      IdsRequsted result = new IdsRequsted(allIds, (ids == null && allIds.size() <= 1));\n      req.getContext().put(contextKey, result);\n      return result;\n    }\n\n","sourceOld":"    /**\n     * Parsers the <code>id</code> and <code>ids</code> params attached to the specified request object, \n     * and returns an <code>IdsRequsted</code> struct to use for this request.\n     * The <code>IdsRequsted</code> is cached in the {@link SolrQueryRequest#getContext} so subsequent \n     * method calls on the same request will not re-parse the params.\n     */\n    public static IdsRequsted parseParams(SolrQueryRequest req) {\n      final String contextKey = IdsRequsted.class.toString() + \"_PARSED_ID_PARAMS\";\n      if (req.getContext().containsKey(contextKey)) {\n        return (IdsRequsted)req.getContext().get(contextKey);\n      }\n      final SolrParams params = req.getParams();\n      final String id[] = params.getParams(\"id\");\n      final String ids[] = params.getParams(\"ids\");\n      \n      if (id == null && ids == null) {\n        IdsRequsted result = new IdsRequsted(Collections.<String>emptyList(), true);\n        req.getContext().put(contextKey, result);\n        return result;\n      }\n      final List<String> allIds = new ArrayList<>((null == id ? 0 : id.length)\n                                                  + (null == ids ? 0 : (2 * ids.length)));\n      if (null != id) {\n        for (String singleId : id) {\n          allIds.add(singleId);\n        }\n      }\n      if (null != ids) {\n        for (String idList : ids) {\n          allIds.addAll( StrUtils.splitSmart(idList, \",\", true) );\n        }\n      }\n      // if the client specified a single id=foo, then use \"doc\":{\n      // otherwise use a standard doclist\n      IdsRequsted result = new IdsRequsted(allIds, (ids == null && allIds.size() <= 1));\n      req.getContext().put(contextKey, result);\n      return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e5fa6615014cd2288fe930f8c8bb726f9504961d","date":1490280013,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent.IdsRequsted#parseParams(SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent.IdsRequsted#parseParams(SolrQueryRequest).mjava","sourceNew":"    /**\n     * Parsers the <code>id</code> and <code>ids</code> params attached to the specified request object, \n     * and returns an <code>IdsRequsted</code> struct to use for this request.\n     * The <code>IdsRequsted</code> is cached in the {@link SolrQueryRequest#getContext} so subsequent \n     * method calls on the same request will not re-parse the params.\n     */\n    public static IdsRequsted parseParams(SolrQueryRequest req) {\n      final String contextKey = IdsRequsted.class.toString() + \"_PARSED_ID_PARAMS\";\n      if (req.getContext().containsKey(contextKey)) {\n        return (IdsRequsted)req.getContext().get(contextKey);\n      }\n      final SolrParams params = req.getParams();\n      final String id[] = params.getParams(ID);\n      final String ids[] = params.getParams(\"ids\");\n      \n      if (id == null && ids == null) {\n        IdsRequsted result = new IdsRequsted(Collections.<String>emptyList(), true);\n        req.getContext().put(contextKey, result);\n        return result;\n      }\n      final List<String> allIds = new ArrayList<>((null == id ? 0 : id.length)\n                                                  + (null == ids ? 0 : (2 * ids.length)));\n      if (null != id) {\n        for (String singleId : id) {\n          allIds.add(singleId);\n        }\n      }\n      if (null != ids) {\n        for (String idList : ids) {\n          allIds.addAll( StrUtils.splitSmart(idList, \",\", true) );\n        }\n      }\n      // if the client specified a single id=foo, then use \"doc\":{\n      // otherwise use a standard doclist\n      IdsRequsted result = new IdsRequsted(allIds, (ids == null && allIds.size() <= 1));\n      req.getContext().put(contextKey, result);\n      return result;\n    }\n\n","sourceOld":"    /**\n     * Parsers the <code>id</code> and <code>ids</code> params attached to the specified request object, \n     * and returns an <code>IdsRequsted</code> struct to use for this request.\n     * The <code>IdsRequsted</code> is cached in the {@link SolrQueryRequest#getContext} so subsequent \n     * method calls on the same request will not re-parse the params.\n     */\n    public static IdsRequsted parseParams(SolrQueryRequest req) {\n      final String contextKey = IdsRequsted.class.toString() + \"_PARSED_ID_PARAMS\";\n      if (req.getContext().containsKey(contextKey)) {\n        return (IdsRequsted)req.getContext().get(contextKey);\n      }\n      final SolrParams params = req.getParams();\n      final String id[] = params.getParams(\"id\");\n      final String ids[] = params.getParams(\"ids\");\n      \n      if (id == null && ids == null) {\n        IdsRequsted result = new IdsRequsted(Collections.<String>emptyList(), true);\n        req.getContext().put(contextKey, result);\n        return result;\n      }\n      final List<String> allIds = new ArrayList<>((null == id ? 0 : id.length)\n                                                  + (null == ids ? 0 : (2 * ids.length)));\n      if (null != id) {\n        for (String singleId : id) {\n          allIds.add(singleId);\n        }\n      }\n      if (null != ids) {\n        for (String idList : ids) {\n          allIds.addAll( StrUtils.splitSmart(idList, \",\", true) );\n        }\n      }\n      // if the client specified a single id=foo, then use \"doc\":{\n      // otherwise use a standard doclist\n      IdsRequsted result = new IdsRequsted(allIds, (ids == null && allIds.size() <= 1));\n      req.getContext().put(contextKey, result);\n      return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e5fa6615014cd2288fe930f8c8bb726f9504961d":["4c58bab35e821e15dc6b8669d2f15c2e3cc6d9ce"],"6d2dadc1f5ca8703d8659f4964961f9967935d75":["4c58bab35e821e15dc6b8669d2f15c2e3cc6d9ce"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4c58bab35e821e15dc6b8669d2f15c2e3cc6d9ce":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4c58bab35e821e15dc6b8669d2f15c2e3cc6d9ce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6d2dadc1f5ca8703d8659f4964961f9967935d75"]},"commit2Childs":{"e5fa6615014cd2288fe930f8c8bb726f9504961d":[],"6d2dadc1f5ca8703d8659f4964961f9967935d75":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4c58bab35e821e15dc6b8669d2f15c2e3cc6d9ce","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4c58bab35e821e15dc6b8669d2f15c2e3cc6d9ce":["e5fa6615014cd2288fe930f8c8bb726f9504961d","6d2dadc1f5ca8703d8659f4964961f9967935d75","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e5fa6615014cd2288fe930f8c8bb726f9504961d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}