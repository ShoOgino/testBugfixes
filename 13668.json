{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextBKDReader#visitCompressedDocValues(int[],byte[],IndexInput,int[],int,IntersectVisitor,int).mjava","commits":[{"id":"9fc0d60683b47b5d922124c31f57c8b34734f9e6","date":1480846684,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextBKDReader#visitCompressedDocValues(int[],byte[],IndexInput,int[],int,IntersectVisitor,int).mjava","pathOld":"/dev/null","sourceNew":"  private void visitCompressedDocValues(int[] commonPrefixLengths, byte[] scratchPackedValue, IndexInput in, int[] docIDs, int count, IntersectVisitor visitor, int compressedDim) throws IOException {\n    // the byte at `compressedByteOffset` is compressed using run-length compression,\n    // other suffix bytes are stored verbatim\n    final int compressedByteOffset = compressedDim * bytesPerDim + commonPrefixLengths[compressedDim];\n    commonPrefixLengths[compressedDim]++;\n    int i;\n    for (i = 0; i < count; ) {\n      scratchPackedValue[compressedByteOffset] = in.readByte();\n      final int runLen = Byte.toUnsignedInt(in.readByte());\n      for (int j = 0; j < runLen; ++j) {\n        for(int dim=0;dim<numDims;dim++) {\n          int prefix = commonPrefixLengths[dim];\n          in.readBytes(scratchPackedValue, dim*bytesPerDim + prefix, bytesPerDim - prefix);\n        }\n        visitor.visit(docIDs[i+j], scratchPackedValue);\n      }\n      i += runLen;\n    }\n    if (i != count) {\n      throw new CorruptIndexException(\"Sub blocks do not add up to the expected count: \" + count + \" != \" + i, in);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9856095f7afb5a607bf5e65077615ed91273508c","date":1481837697,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextBKDReader#visitCompressedDocValues(int[],byte[],IndexInput,int[],int,IntersectVisitor,int).mjava","pathOld":"/dev/null","sourceNew":"  private void visitCompressedDocValues(int[] commonPrefixLengths, byte[] scratchPackedValue, IndexInput in, int[] docIDs, int count, IntersectVisitor visitor, int compressedDim) throws IOException {\n    // the byte at `compressedByteOffset` is compressed using run-length compression,\n    // other suffix bytes are stored verbatim\n    final int compressedByteOffset = compressedDim * bytesPerDim + commonPrefixLengths[compressedDim];\n    commonPrefixLengths[compressedDim]++;\n    int i;\n    for (i = 0; i < count; ) {\n      scratchPackedValue[compressedByteOffset] = in.readByte();\n      final int runLen = Byte.toUnsignedInt(in.readByte());\n      for (int j = 0; j < runLen; ++j) {\n        for(int dim=0;dim<numDims;dim++) {\n          int prefix = commonPrefixLengths[dim];\n          in.readBytes(scratchPackedValue, dim*bytesPerDim + prefix, bytesPerDim - prefix);\n        }\n        visitor.visit(docIDs[i+j], scratchPackedValue);\n      }\n      i += runLen;\n    }\n    if (i != count) {\n      throw new CorruptIndexException(\"Sub blocks do not add up to the expected count: \" + count + \" != \" + i, in);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f6652c943595e92c187ee904c382863013eae28f","date":1539042663,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextBKDReader#visitCompressedDocValues(int[],byte[],IndexInput,int[],int,IntersectVisitor,int).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextBKDReader#visitCompressedDocValues(int[],byte[],IndexInput,int[],int,IntersectVisitor,int).mjava","sourceNew":"  private void visitCompressedDocValues(int[] commonPrefixLengths, byte[] scratchPackedValue, IndexInput in, int[] docIDs, int count, IntersectVisitor visitor, int compressedDim) throws IOException {\n    // the byte at `compressedByteOffset` is compressed using run-length compression,\n    // other suffix bytes are stored verbatim\n    final int compressedByteOffset = compressedDim * bytesPerDim + commonPrefixLengths[compressedDim];\n    commonPrefixLengths[compressedDim]++;\n    int i;\n    for (i = 0; i < count; ) {\n      scratchPackedValue[compressedByteOffset] = in.readByte();\n      final int runLen = Byte.toUnsignedInt(in.readByte());\n      for (int j = 0; j < runLen; ++j) {\n        for(int dim=0;dim<numDataDims;dim++) {\n          int prefix = commonPrefixLengths[dim];\n          in.readBytes(scratchPackedValue, dim*bytesPerDim + prefix, bytesPerDim - prefix);\n        }\n        visitor.visit(docIDs[i+j], scratchPackedValue);\n      }\n      i += runLen;\n    }\n    if (i != count) {\n      throw new CorruptIndexException(\"Sub blocks do not add up to the expected count: \" + count + \" != \" + i, in);\n    }\n  }\n\n","sourceOld":"  private void visitCompressedDocValues(int[] commonPrefixLengths, byte[] scratchPackedValue, IndexInput in, int[] docIDs, int count, IntersectVisitor visitor, int compressedDim) throws IOException {\n    // the byte at `compressedByteOffset` is compressed using run-length compression,\n    // other suffix bytes are stored verbatim\n    final int compressedByteOffset = compressedDim * bytesPerDim + commonPrefixLengths[compressedDim];\n    commonPrefixLengths[compressedDim]++;\n    int i;\n    for (i = 0; i < count; ) {\n      scratchPackedValue[compressedByteOffset] = in.readByte();\n      final int runLen = Byte.toUnsignedInt(in.readByte());\n      for (int j = 0; j < runLen; ++j) {\n        for(int dim=0;dim<numDims;dim++) {\n          int prefix = commonPrefixLengths[dim];\n          in.readBytes(scratchPackedValue, dim*bytesPerDim + prefix, bytesPerDim - prefix);\n        }\n        visitor.visit(docIDs[i+j], scratchPackedValue);\n      }\n      i += runLen;\n    }\n    if (i != count) {\n      throw new CorruptIndexException(\"Sub blocks do not add up to the expected count: \" + count + \" != \" + i, in);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"59ed8c026ba85e3c42fb89605b2032dc6f9cc241","date":1581113294,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextBKDReader#visitCompressedDocValues(int[],byte[],IndexInput,int[],int,IntersectVisitor,int).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextBKDReader#visitCompressedDocValues(int[],byte[],IndexInput,int[],int,IntersectVisitor,int).mjava","sourceNew":"  private void visitCompressedDocValues(int[] commonPrefixLengths, byte[] scratchPackedValue, IndexInput in, int[] docIDs, int count, IntersectVisitor visitor, int compressedDim) throws IOException {\n    // the byte at `compressedByteOffset` is compressed using run-length compression,\n    // other suffix bytes are stored verbatim\n    final int compressedByteOffset = compressedDim * bytesPerDim + commonPrefixLengths[compressedDim];\n    commonPrefixLengths[compressedDim]++;\n    int i;\n    for (i = 0; i < count; ) {\n      scratchPackedValue[compressedByteOffset] = in.readByte();\n      final int runLen = Byte.toUnsignedInt(in.readByte());\n      for (int j = 0; j < runLen; ++j) {\n        for(int dim = 0; dim< numDims; dim++) {\n          int prefix = commonPrefixLengths[dim];\n          in.readBytes(scratchPackedValue, dim*bytesPerDim + prefix, bytesPerDim - prefix);\n        }\n        visitor.visit(docIDs[i+j], scratchPackedValue);\n      }\n      i += runLen;\n    }\n    if (i != count) {\n      throw new CorruptIndexException(\"Sub blocks do not add up to the expected count: \" + count + \" != \" + i, in);\n    }\n  }\n\n","sourceOld":"  private void visitCompressedDocValues(int[] commonPrefixLengths, byte[] scratchPackedValue, IndexInput in, int[] docIDs, int count, IntersectVisitor visitor, int compressedDim) throws IOException {\n    // the byte at `compressedByteOffset` is compressed using run-length compression,\n    // other suffix bytes are stored verbatim\n    final int compressedByteOffset = compressedDim * bytesPerDim + commonPrefixLengths[compressedDim];\n    commonPrefixLengths[compressedDim]++;\n    int i;\n    for (i = 0; i < count; ) {\n      scratchPackedValue[compressedByteOffset] = in.readByte();\n      final int runLen = Byte.toUnsignedInt(in.readByte());\n      for (int j = 0; j < runLen; ++j) {\n        for(int dim=0;dim<numDataDims;dim++) {\n          int prefix = commonPrefixLengths[dim];\n          in.readBytes(scratchPackedValue, dim*bytesPerDim + prefix, bytesPerDim - prefix);\n        }\n        visitor.visit(docIDs[i+j], scratchPackedValue);\n      }\n      i += runLen;\n    }\n    if (i != count) {\n      throw new CorruptIndexException(\"Sub blocks do not add up to the expected count: \" + count + \" != \" + i, in);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9fc0d60683b47b5d922124c31f57c8b34734f9e6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"59ed8c026ba85e3c42fb89605b2032dc6f9cc241":["f6652c943595e92c187ee904c382863013eae28f"],"f6652c943595e92c187ee904c382863013eae28f":["9fc0d60683b47b5d922124c31f57c8b34734f9e6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9856095f7afb5a607bf5e65077615ed91273508c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9fc0d60683b47b5d922124c31f57c8b34734f9e6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["59ed8c026ba85e3c42fb89605b2032dc6f9cc241"]},"commit2Childs":{"9fc0d60683b47b5d922124c31f57c8b34734f9e6":["f6652c943595e92c187ee904c382863013eae28f","9856095f7afb5a607bf5e65077615ed91273508c"],"59ed8c026ba85e3c42fb89605b2032dc6f9cc241":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f6652c943595e92c187ee904c382863013eae28f":["59ed8c026ba85e3c42fb89605b2032dc6f9cc241"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9fc0d60683b47b5d922124c31f57c8b34734f9e6","9856095f7afb5a607bf5e65077615ed91273508c"],"9856095f7afb5a607bf5e65077615ed91273508c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9856095f7afb5a607bf5e65077615ed91273508c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}