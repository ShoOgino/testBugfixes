{"path":"src/java/org/apache/lucene/index/IndexWriter#deleteDocuments(Term).mjava","commits":[{"id":"42a18cb0bca2c4ac9747f31c7a74fac90c661f39","date":1171363388,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#deleteDocuments(Term).mjava","pathOld":"src/java/org/apache/lucene/index/NewIndexModifier#deleteDocuments(Term).mjava","sourceNew":"  /**\n   * Deletes the document(s) containing <code>term</code>.\n   * @param term the term to identify the documents to be deleted\n   */\n  public synchronized void deleteDocuments(Term term) throws IOException {\n    bufferDeleteTerm(term);\n    maybeFlushRamSegments();\n  }\n\n","sourceOld":"  /**\n   * Deletes all documents containing <code>term</code>.\n   */\n  public synchronized void deleteDocuments(Term term) throws IOException {\n    bufferDeleteTerm(term);\n    maybeFlushRamSegments();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1b54a9bc667895a2095a886184bf69a3179e63df","date":1172088096,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#deleteDocuments(Term).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#deleteDocuments(Term).mjava","sourceNew":"  /**\n   * Deletes the document(s) containing <code>term</code>.\n   * @param term the term to identify the documents to be deleted\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public synchronized void deleteDocuments(Term term) throws CorruptIndexException, IOException {\n    bufferDeleteTerm(term);\n    maybeFlushRamSegments();\n  }\n\n","sourceOld":"  /**\n   * Deletes the document(s) containing <code>term</code>.\n   * @param term the term to identify the documents to be deleted\n   */\n  public synchronized void deleteDocuments(Term term) throws IOException {\n    bufferDeleteTerm(term);\n    maybeFlushRamSegments();\n  }\n\n","bugFix":["42a18cb0bca2c4ac9747f31c7a74fac90c661f39"],"bugIntro":["fde68de507dbf344495d7b5e8052866fe5f254ab"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"328c1568e471f0c6eaa49ec00334ca59e573710f","date":1173897963,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#deleteDocuments(Term).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#deleteDocuments(Term).mjava","sourceNew":"  /**\n   * Deletes the document(s) containing <code>term</code>.\n   * @param term the term to identify the documents to be deleted\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public synchronized void deleteDocuments(Term term) throws CorruptIndexException, IOException {\n    ensureOpen();\n    bufferDeleteTerm(term);\n    maybeFlushRamSegments();\n  }\n\n","sourceOld":"  /**\n   * Deletes the document(s) containing <code>term</code>.\n   * @param term the term to identify the documents to be deleted\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public synchronized void deleteDocuments(Term term) throws CorruptIndexException, IOException {\n    bufferDeleteTerm(term);\n    maybeFlushRamSegments();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4350b17bd363cd13a95171b8df1ca62ea4c3e71c","date":1183562198,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#deleteDocuments(Term).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#deleteDocuments(Term).mjava","sourceNew":"  /**\n   * Deletes the document(s) containing <code>term</code>.\n   * @param term the term to identify the documents to be deleted\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public synchronized void deleteDocuments(Term term) throws CorruptIndexException, IOException {\n    ensureOpen();\n    bufferDeleteTerm(term);\n    maybeFlush();\n  }\n\n","sourceOld":"  /**\n   * Deletes the document(s) containing <code>term</code>.\n   * @param term the term to identify the documents to be deleted\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public synchronized void deleteDocuments(Term term) throws CorruptIndexException, IOException {\n    ensureOpen();\n    bufferDeleteTerm(term);\n    maybeFlushRamSegments();\n  }\n\n","bugFix":null,"bugIntro":["fde68de507dbf344495d7b5e8052866fe5f254ab"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fde68de507dbf344495d7b5e8052866fe5f254ab","date":1189434831,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#deleteDocuments(Term).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#deleteDocuments(Term).mjava","sourceNew":"  /**\n   * Deletes the document(s) containing <code>term</code>.\n   * @param term the term to identify the documents to be deleted\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void deleteDocuments(Term term) throws CorruptIndexException, IOException {\n    ensureOpen();\n    boolean doFlush = docWriter.bufferDeleteTerm(term);\n    if (doFlush)\n      flush(true, false);\n  }\n\n","sourceOld":"  /**\n   * Deletes the document(s) containing <code>term</code>.\n   * @param term the term to identify the documents to be deleted\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public synchronized void deleteDocuments(Term term) throws CorruptIndexException, IOException {\n    ensureOpen();\n    bufferDeleteTerm(term);\n    maybeFlush();\n  }\n\n","bugFix":["4350b17bd363cd13a95171b8df1ca62ea4c3e71c","1b54a9bc667895a2095a886184bf69a3179e63df","42a18cb0bca2c4ac9747f31c7a74fac90c661f39"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"01deb9e9fb9dbd5fddce32a5fcd952bbb611fe63","date":1204234542,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#deleteDocuments(Term).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#deleteDocuments(Term).mjava","sourceNew":"  /**\n   * Deletes the document(s) containing <code>term</code>.\n   * @param term the term to identify the documents to be deleted\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void deleteDocuments(Term term) throws CorruptIndexException, IOException {\n    ensureOpen();\n    try {\n      boolean doFlush = docWriter.bufferDeleteTerm(term);\n      if (doFlush)\n        flush(true, false);\n    } catch (OutOfMemoryError oom) {\n      hitOOM = true;\n      throw oom;\n    }\n  }\n\n","sourceOld":"  /**\n   * Deletes the document(s) containing <code>term</code>.\n   * @param term the term to identify the documents to be deleted\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void deleteDocuments(Term term) throws CorruptIndexException, IOException {\n    ensureOpen();\n    boolean doFlush = docWriter.bufferDeleteTerm(term);\n    if (doFlush)\n      flush(true, false);\n  }\n\n","bugFix":null,"bugIntro":["cd488f50316362b01a7f67b11a96796b9652e3e5"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a2fc4b864a5dc2c630bb1fa94091e89e69f8f8be","date":1204801324,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#deleteDocuments(Term).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#deleteDocuments(Term).mjava","sourceNew":"  /**\n   * Deletes the document(s) containing <code>term</code>.\n   * @param term the term to identify the documents to be deleted\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void deleteDocuments(Term term) throws CorruptIndexException, IOException {\n    ensureOpen();\n    try {\n      boolean doFlush = docWriter.bufferDeleteTerm(term);\n      if (doFlush)\n        flush(true, false, false);\n    } catch (OutOfMemoryError oom) {\n      hitOOM = true;\n      throw oom;\n    }\n  }\n\n","sourceOld":"  /**\n   * Deletes the document(s) containing <code>term</code>.\n   * @param term the term to identify the documents to be deleted\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void deleteDocuments(Term term) throws CorruptIndexException, IOException {\n    ensureOpen();\n    try {\n      boolean doFlush = docWriter.bufferDeleteTerm(term);\n      if (doFlush)\n        flush(true, false);\n    } catch (OutOfMemoryError oom) {\n      hitOOM = true;\n      throw oom;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e9665d17707cc21b1db995118ff36129723139ab","date":1225384420,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#deleteDocuments(Term).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#deleteDocuments(Term).mjava","sourceNew":"  /**\n   * Deletes the document(s) containing <code>term</code>.\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @param term the term to identify the documents to be deleted\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void deleteDocuments(Term term) throws CorruptIndexException, IOException {\n    ensureOpen();\n    try {\n      boolean doFlush = docWriter.bufferDeleteTerm(term);\n      if (doFlush)\n        flush(true, false, false);\n    } catch (OutOfMemoryError oom) {\n      hitOOM = true;\n      throw oom;\n    }\n  }\n\n","sourceOld":"  /**\n   * Deletes the document(s) containing <code>term</code>.\n   * @param term the term to identify the documents to be deleted\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void deleteDocuments(Term term) throws CorruptIndexException, IOException {\n    ensureOpen();\n    try {\n      boolean doFlush = docWriter.bufferDeleteTerm(term);\n      if (doFlush)\n        flush(true, false, false);\n    } catch (OutOfMemoryError oom) {\n      hitOOM = true;\n      throw oom;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cd488f50316362b01a7f67b11a96796b9652e3e5","date":1241121034,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#deleteDocuments(Term).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#deleteDocuments(Term).mjava","sourceNew":"  /**\n   * Deletes the document(s) containing <code>term</code>.\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @param term the term to identify the documents to be deleted\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void deleteDocuments(Term term) throws CorruptIndexException, IOException {\n    ensureOpen();\n    try {\n      boolean doFlush = docWriter.bufferDeleteTerm(term);\n      if (doFlush)\n        flush(true, false, false);\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"deleteDocuments(Term)\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Deletes the document(s) containing <code>term</code>.\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @param term the term to identify the documents to be deleted\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void deleteDocuments(Term term) throws CorruptIndexException, IOException {\n    ensureOpen();\n    try {\n      boolean doFlush = docWriter.bufferDeleteTerm(term);\n      if (doFlush)\n        flush(true, false, false);\n    } catch (OutOfMemoryError oom) {\n      hitOOM = true;\n      throw oom;\n    }\n  }\n\n","bugFix":["01deb9e9fb9dbd5fddce32a5fcd952bbb611fe63"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#deleteDocuments(Term).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#deleteDocuments(Term).mjava","sourceNew":"  /**\n   * Deletes the document(s) containing <code>term</code>.\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @param term the term to identify the documents to be deleted\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void deleteDocuments(Term term) throws CorruptIndexException, IOException {\n    ensureOpen();\n    try {\n      boolean doFlush = docWriter.bufferDeleteTerm(term);\n      if (doFlush)\n        flush(true, false, false);\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"deleteDocuments(Term)\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Deletes the document(s) containing <code>term</code>.\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @param term the term to identify the documents to be deleted\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void deleteDocuments(Term term) throws CorruptIndexException, IOException {\n    ensureOpen();\n    try {\n      boolean doFlush = docWriter.bufferDeleteTerm(term);\n      if (doFlush)\n        flush(true, false, false);\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"deleteDocuments(Term)\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9665d17707cc21b1db995118ff36129723139ab":["a2fc4b864a5dc2c630bb1fa94091e89e69f8f8be"],"328c1568e471f0c6eaa49ec00334ca59e573710f":["1b54a9bc667895a2095a886184bf69a3179e63df"],"cd488f50316362b01a7f67b11a96796b9652e3e5":["e9665d17707cc21b1db995118ff36129723139ab"],"01deb9e9fb9dbd5fddce32a5fcd952bbb611fe63":["fde68de507dbf344495d7b5e8052866fe5f254ab"],"fde68de507dbf344495d7b5e8052866fe5f254ab":["4350b17bd363cd13a95171b8df1ca62ea4c3e71c"],"42a18cb0bca2c4ac9747f31c7a74fac90c661f39":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1b54a9bc667895a2095a886184bf69a3179e63df":["42a18cb0bca2c4ac9747f31c7a74fac90c661f39"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a2fc4b864a5dc2c630bb1fa94091e89e69f8f8be":["01deb9e9fb9dbd5fddce32a5fcd952bbb611fe63"],"4350b17bd363cd13a95171b8df1ca62ea4c3e71c":["328c1568e471f0c6eaa49ec00334ca59e573710f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd488f50316362b01a7f67b11a96796b9652e3e5"]},"commit2Childs":{"e9665d17707cc21b1db995118ff36129723139ab":["cd488f50316362b01a7f67b11a96796b9652e3e5"],"328c1568e471f0c6eaa49ec00334ca59e573710f":["4350b17bd363cd13a95171b8df1ca62ea4c3e71c"],"cd488f50316362b01a7f67b11a96796b9652e3e5":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"01deb9e9fb9dbd5fddce32a5fcd952bbb611fe63":["a2fc4b864a5dc2c630bb1fa94091e89e69f8f8be"],"fde68de507dbf344495d7b5e8052866fe5f254ab":["01deb9e9fb9dbd5fddce32a5fcd952bbb611fe63"],"42a18cb0bca2c4ac9747f31c7a74fac90c661f39":["1b54a9bc667895a2095a886184bf69a3179e63df"],"1b54a9bc667895a2095a886184bf69a3179e63df":["328c1568e471f0c6eaa49ec00334ca59e573710f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["42a18cb0bca2c4ac9747f31c7a74fac90c661f39"],"a2fc4b864a5dc2c630bb1fa94091e89e69f8f8be":["e9665d17707cc21b1db995118ff36129723139ab"],"4350b17bd363cd13a95171b8df1ca62ea4c3e71c":["fde68de507dbf344495d7b5e8052866fe5f254ab"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}