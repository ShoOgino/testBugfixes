{"path":"solr/core/src/java/org/apache/solr/uninverting/FieldCache#getNumerics(LeafReader,String,Parser,boolean).mjava","commits":[{"id":"a076c3c721f685b7559308fdc2cd72d91bba67e5","date":1464168992,"type":1,"author":"Mike McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/uninverting/FieldCache#getNumerics(LeafReader,String,Parser,boolean).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/uninverting/FieldCache#getNumerics(LeafReader,String,Parser,boolean).mjava","sourceNew":"  /**\n   * Returns a {@link NumericDocValues} over the values found in documents in the given\n   * field. If the field was indexed as {@link NumericDocValuesField}, it simply\n   * uses {@link org.apache.lucene.index.LeafReader#getNumericDocValues(String)} to read the values.\n   * Otherwise, it checks the internal cache for an appropriate entry, and if\n   * none is found, reads the terms/points in <code>field</code> as longs and returns\n   * an array of size <code>reader.maxDoc()</code> of the value each document\n   * has in the given field.\n   * \n   * @param reader\n   *          Used to get field values.\n   * @param field\n   *          Which field contains the longs.\n   * @param parser\n   *          Computes long for string values. May be {@code null} if the\n   *          requested field was indexed as {@link NumericDocValuesField} or\n   *          {@link org.apache.lucene.document.LegacyLongField}.\n   * @param setDocsWithField\n   *          If true then {@link #getDocsWithField} will also be computed and\n   *          stored in the FieldCache.\n   * @return The values in the given field for each document.\n   * @throws IOException\n   *           If any error occurs.\n   */\n  public NumericDocValues getNumerics(LeafReader reader, String field, Parser parser, boolean setDocsWithField) throws IOException;\n\n","sourceOld":"  /**\n   * Returns a {@link NumericDocValues} over the values found in documents in the given\n   * field. If the field was indexed as {@link NumericDocValuesField}, it simply\n   * uses {@link org.apache.lucene.index.LeafReader#getNumericDocValues(String)} to read the values.\n   * Otherwise, it checks the internal cache for an appropriate entry, and if\n   * none is found, reads the terms/points in <code>field</code> as longs and returns\n   * an array of size <code>reader.maxDoc()</code> of the value each document\n   * has in the given field.\n   * \n   * @param reader\n   *          Used to get field values.\n   * @param field\n   *          Which field contains the longs.\n   * @param parser\n   *          Computes long for string values. May be {@code null} if the\n   *          requested field was indexed as {@link NumericDocValuesField} or\n   *          {@link org.apache.lucene.document.LegacyLongField}.\n   * @param setDocsWithField\n   *          If true then {@link #getDocsWithField} will also be computed and\n   *          stored in the FieldCache.\n   * @return The values in the given field for each document.\n   * @throws IOException\n   *           If any error occurs.\n   */\n  public NumericDocValues getNumerics(LeafReader reader, String field, Parser parser, boolean setDocsWithField) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e121d43b5a10f2df530f406f935102656e9c4e8","date":1464198131,"type":1,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/uninverting/FieldCache#getNumerics(LeafReader,String,Parser,boolean).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/uninverting/FieldCache#getNumerics(LeafReader,String,Parser,boolean).mjava","sourceNew":"  /**\n   * Returns a {@link NumericDocValues} over the values found in documents in the given\n   * field. If the field was indexed as {@link NumericDocValuesField}, it simply\n   * uses {@link org.apache.lucene.index.LeafReader#getNumericDocValues(String)} to read the values.\n   * Otherwise, it checks the internal cache for an appropriate entry, and if\n   * none is found, reads the terms/points in <code>field</code> as longs and returns\n   * an array of size <code>reader.maxDoc()</code> of the value each document\n   * has in the given field.\n   * \n   * @param reader\n   *          Used to get field values.\n   * @param field\n   *          Which field contains the longs.\n   * @param parser\n   *          Computes long for string values. May be {@code null} if the\n   *          requested field was indexed as {@link NumericDocValuesField} or\n   *          {@link org.apache.lucene.document.LegacyLongField}.\n   * @param setDocsWithField\n   *          If true then {@link #getDocsWithField} will also be computed and\n   *          stored in the FieldCache.\n   * @return The values in the given field for each document.\n   * @throws IOException\n   *           If any error occurs.\n   */\n  public NumericDocValues getNumerics(LeafReader reader, String field, Parser parser, boolean setDocsWithField) throws IOException;\n\n","sourceOld":"  /**\n   * Returns a {@link NumericDocValues} over the values found in documents in the given\n   * field. If the field was indexed as {@link NumericDocValuesField}, it simply\n   * uses {@link org.apache.lucene.index.LeafReader#getNumericDocValues(String)} to read the values.\n   * Otherwise, it checks the internal cache for an appropriate entry, and if\n   * none is found, reads the terms/points in <code>field</code> as longs and returns\n   * an array of size <code>reader.maxDoc()</code> of the value each document\n   * has in the given field.\n   * \n   * @param reader\n   *          Used to get field values.\n   * @param field\n   *          Which field contains the longs.\n   * @param parser\n   *          Computes long for string values. May be {@code null} if the\n   *          requested field was indexed as {@link NumericDocValuesField} or\n   *          {@link org.apache.lucene.document.LegacyLongField}.\n   * @param setDocsWithField\n   *          If true then {@link #getDocsWithField} will also be computed and\n   *          stored in the FieldCache.\n   * @return The values in the given field for each document.\n   * @throws IOException\n   *           If any error occurs.\n   */\n  public NumericDocValues getNumerics(LeafReader reader, String field, Parser parser, boolean setDocsWithField) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83870855d82aba6819217abeff5a40779dbb28b4","date":1464291012,"type":1,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/uninverting/FieldCache#getNumerics(LeafReader,String,Parser,boolean).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/uninverting/FieldCache#getNumerics(LeafReader,String,Parser,boolean).mjava","sourceNew":"  /**\n   * Returns a {@link NumericDocValues} over the values found in documents in the given\n   * field. If the field was indexed as {@link NumericDocValuesField}, it simply\n   * uses {@link org.apache.lucene.index.LeafReader#getNumericDocValues(String)} to read the values.\n   * Otherwise, it checks the internal cache for an appropriate entry, and if\n   * none is found, reads the terms/points in <code>field</code> as longs and returns\n   * an array of size <code>reader.maxDoc()</code> of the value each document\n   * has in the given field.\n   * \n   * @param reader\n   *          Used to get field values.\n   * @param field\n   *          Which field contains the longs.\n   * @param parser\n   *          Computes long for string values. May be {@code null} if the\n   *          requested field was indexed as {@link NumericDocValuesField} or\n   *          {@link org.apache.lucene.document.LegacyLongField}.\n   * @param setDocsWithField\n   *          If true then {@link #getDocsWithField} will also be computed and\n   *          stored in the FieldCache.\n   * @return The values in the given field for each document.\n   * @throws IOException\n   *           If any error occurs.\n   */\n  public NumericDocValues getNumerics(LeafReader reader, String field, Parser parser, boolean setDocsWithField) throws IOException;\n\n","sourceOld":"  /**\n   * Returns a {@link NumericDocValues} over the values found in documents in the given\n   * field. If the field was indexed as {@link NumericDocValuesField}, it simply\n   * uses {@link org.apache.lucene.index.LeafReader#getNumericDocValues(String)} to read the values.\n   * Otherwise, it checks the internal cache for an appropriate entry, and if\n   * none is found, reads the terms/points in <code>field</code> as longs and returns\n   * an array of size <code>reader.maxDoc()</code> of the value each document\n   * has in the given field.\n   * \n   * @param reader\n   *          Used to get field values.\n   * @param field\n   *          Which field contains the longs.\n   * @param parser\n   *          Computes long for string values. May be {@code null} if the\n   *          requested field was indexed as {@link NumericDocValuesField} or\n   *          {@link org.apache.lucene.document.LegacyLongField}.\n   * @param setDocsWithField\n   *          If true then {@link #getDocsWithField} will also be computed and\n   *          stored in the FieldCache.\n   * @return The values in the given field for each document.\n   * @throws IOException\n   *           If any error occurs.\n   */\n  public NumericDocValues getNumerics(LeafReader reader, String field, Parser parser, boolean setDocsWithField) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5af5ba0166322092193d4c29880b0f7670fc7ca0","date":1471440525,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/uninverting/FieldCache#getNumerics(LeafReader,String,Parser,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/uninverting/FieldCache#getNumerics(LeafReader,String,Parser,boolean).mjava","sourceNew":"  /**\n   * Returns a {@link NumericDocValues} over the values found in documents in the given\n   * field. If the field was indexed as {@link NumericDocValuesField}, it simply\n   * uses {@link org.apache.lucene.index.LeafReader#getNumericDocValues(String)} to read the values.\n   * Otherwise, it checks the internal cache for an appropriate entry, and if\n   * none is found, reads the terms/points in <code>field</code> as longs and returns\n   * an array of size <code>reader.maxDoc()</code> of the value each document\n   * has in the given field.\n   * \n   * @param reader\n   *          Used to get field values.\n   * @param field\n   *          Which field contains the longs.\n   * @param parser\n   *          Computes long for string values. May be {@code null} if the\n   *          requested field was indexed as {@link NumericDocValuesField} or\n   *          {@link org.apache.lucene.legacy.LegacyLongField}.\n   * @param setDocsWithField\n   *          If true then {@link #getDocsWithField} will also be computed and\n   *          stored in the FieldCache.\n   * @return The values in the given field for each document.\n   * @throws IOException\n   *           If any error occurs.\n   */\n  public NumericDocValues getNumerics(LeafReader reader, String field, Parser parser, boolean setDocsWithField) throws IOException;\n\n","sourceOld":"  /**\n   * Returns a {@link NumericDocValues} over the values found in documents in the given\n   * field. If the field was indexed as {@link NumericDocValuesField}, it simply\n   * uses {@link org.apache.lucene.index.LeafReader#getNumericDocValues(String)} to read the values.\n   * Otherwise, it checks the internal cache for an appropriate entry, and if\n   * none is found, reads the terms/points in <code>field</code> as longs and returns\n   * an array of size <code>reader.maxDoc()</code> of the value each document\n   * has in the given field.\n   * \n   * @param reader\n   *          Used to get field values.\n   * @param field\n   *          Which field contains the longs.\n   * @param parser\n   *          Computes long for string values. May be {@code null} if the\n   *          requested field was indexed as {@link NumericDocValuesField} or\n   *          {@link org.apache.lucene.document.LegacyLongField}.\n   * @param setDocsWithField\n   *          If true then {@link #getDocsWithField} will also be computed and\n   *          stored in the FieldCache.\n   * @return The values in the given field for each document.\n   * @throws IOException\n   *           If any error occurs.\n   */\n  public NumericDocValues getNumerics(LeafReader reader, String field, Parser parser, boolean setDocsWithField) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6","date":1471496851,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/uninverting/FieldCache#getNumerics(LeafReader,String,Parser,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/uninverting/FieldCache#getNumerics(LeafReader,String,Parser,boolean).mjava","sourceNew":"  /**\n   * Returns a {@link NumericDocValues} over the values found in documents in the given\n   * field. If the field was indexed as {@link NumericDocValuesField}, it simply\n   * uses {@link org.apache.lucene.index.LeafReader#getNumericDocValues(String)} to read the values.\n   * Otherwise, it checks the internal cache for an appropriate entry, and if\n   * none is found, reads the terms/points in <code>field</code> as longs and returns\n   * an array of size <code>reader.maxDoc()</code> of the value each document\n   * has in the given field.\n   * \n   * @param reader\n   *          Used to get field values.\n   * @param field\n   *          Which field contains the longs.\n   * @param parser\n   *          Computes long for string values. May be {@code null} if the\n   *          requested field was indexed as {@link NumericDocValuesField} or\n   *          {@link org.apache.lucene.legacy.LegacyLongField}.\n   * @param setDocsWithField\n   *          If true then {@link #getDocsWithField} will also be computed and\n   *          stored in the FieldCache.\n   * @return The values in the given field for each document.\n   * @throws IOException\n   *           If any error occurs.\n   */\n  public NumericDocValues getNumerics(LeafReader reader, String field, Parser parser, boolean setDocsWithField) throws IOException;\n\n","sourceOld":"  /**\n   * Returns a {@link NumericDocValues} over the values found in documents in the given\n   * field. If the field was indexed as {@link NumericDocValuesField}, it simply\n   * uses {@link org.apache.lucene.index.LeafReader#getNumericDocValues(String)} to read the values.\n   * Otherwise, it checks the internal cache for an appropriate entry, and if\n   * none is found, reads the terms/points in <code>field</code> as longs and returns\n   * an array of size <code>reader.maxDoc()</code> of the value each document\n   * has in the given field.\n   * \n   * @param reader\n   *          Used to get field values.\n   * @param field\n   *          Which field contains the longs.\n   * @param parser\n   *          Computes long for string values. May be {@code null} if the\n   *          requested field was indexed as {@link NumericDocValuesField} or\n   *          {@link org.apache.lucene.document.LegacyLongField}.\n   * @param setDocsWithField\n   *          If true then {@link #getDocsWithField} will also be computed and\n   *          stored in the FieldCache.\n   * @return The values in the given field for each document.\n   * @throws IOException\n   *           If any error occurs.\n   */\n  public NumericDocValues getNumerics(LeafReader reader, String field, Parser parser, boolean setDocsWithField) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"403d05f7f8d69b65659157eff1bc1d2717f04c66","date":1471692961,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/uninverting/FieldCache#getNumerics(LeafReader,String,Parser,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/uninverting/FieldCache#getNumerics(LeafReader,String,Parser,boolean).mjava","sourceNew":"  /**\n   * Returns a {@link NumericDocValues} over the values found in documents in the given\n   * field. If the field was indexed as {@link NumericDocValuesField}, it simply\n   * uses {@link org.apache.lucene.index.LeafReader#getNumericDocValues(String)} to read the values.\n   * Otherwise, it checks the internal cache for an appropriate entry, and if\n   * none is found, reads the terms/points in <code>field</code> as longs and returns\n   * an array of size <code>reader.maxDoc()</code> of the value each document\n   * has in the given field.\n   * \n   * @param reader\n   *          Used to get field values.\n   * @param field\n   *          Which field contains the longs.\n   * @param parser\n   *          Computes long for string values. May be {@code null} if the\n   *          requested field was indexed as {@link NumericDocValuesField} or\n   *          {@link org.apache.lucene.legacy.LegacyLongField}.\n   * @param setDocsWithField\n   *          If true then {@link #getDocsWithField} will also be computed and\n   *          stored in the FieldCache.\n   * @return The values in the given field for each document.\n   * @throws IOException\n   *           If any error occurs.\n   */\n  public NumericDocValues getNumerics(LeafReader reader, String field, Parser parser, boolean setDocsWithField) throws IOException;\n\n","sourceOld":"  /**\n   * Returns a {@link NumericDocValues} over the values found in documents in the given\n   * field. If the field was indexed as {@link NumericDocValuesField}, it simply\n   * uses {@link org.apache.lucene.index.LeafReader#getNumericDocValues(String)} to read the values.\n   * Otherwise, it checks the internal cache for an appropriate entry, and if\n   * none is found, reads the terms/points in <code>field</code> as longs and returns\n   * an array of size <code>reader.maxDoc()</code> of the value each document\n   * has in the given field.\n   * \n   * @param reader\n   *          Used to get field values.\n   * @param field\n   *          Which field contains the longs.\n   * @param parser\n   *          Computes long for string values. May be {@code null} if the\n   *          requested field was indexed as {@link NumericDocValuesField} or\n   *          {@link org.apache.lucene.document.LegacyLongField}.\n   * @param setDocsWithField\n   *          If true then {@link #getDocsWithField} will also be computed and\n   *          stored in the FieldCache.\n   * @return The values in the given field for each document.\n   * @throws IOException\n   *           If any error occurs.\n   */\n  public NumericDocValues getNumerics(LeafReader reader, String field, Parser parser, boolean setDocsWithField) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":5,"author":"Mike McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/uninverting/FieldCache#getNumerics(LeafReader,String,Parser).mjava","pathOld":"solr/core/src/java/org/apache/solr/uninverting/FieldCache#getNumerics(LeafReader,String,Parser,boolean).mjava","sourceNew":"  /**\n   * Returns a {@link NumericDocValues} over the values found in documents in the given\n   * field. If the field was indexed as {@link NumericDocValuesField}, it simply\n   * uses {@link org.apache.lucene.index.LeafReader#getNumericDocValues(String)} to read the values.\n   * Otherwise, it checks the internal cache for an appropriate entry, and if\n   * none is found, reads the terms/points in <code>field</code> as longs and returns\n   * an array of size <code>reader.maxDoc()</code> of the value each document\n   * has in the given field.\n   * \n   * @param reader\n   *          Used to get field values.\n   * @param field\n   *          Which field contains the longs.\n   * @param parser\n   *          Computes long for string values. May be {@code null} if the\n   *          requested field was indexed as {@link NumericDocValuesField} or\n   *          {@link org.apache.lucene.legacy.LegacyLongField}.\n   * @return The values in the given field for each document.\n   * @throws IOException\n   *           If any error occurs.\n   */\n  public NumericDocValues getNumerics(LeafReader reader, String field, Parser parser) throws IOException;\n\n","sourceOld":"  /**\n   * Returns a {@link NumericDocValues} over the values found in documents in the given\n   * field. If the field was indexed as {@link NumericDocValuesField}, it simply\n   * uses {@link org.apache.lucene.index.LeafReader#getNumericDocValues(String)} to read the values.\n   * Otherwise, it checks the internal cache for an appropriate entry, and if\n   * none is found, reads the terms/points in <code>field</code> as longs and returns\n   * an array of size <code>reader.maxDoc()</code> of the value each document\n   * has in the given field.\n   * \n   * @param reader\n   *          Used to get field values.\n   * @param field\n   *          Which field contains the longs.\n   * @param parser\n   *          Computes long for string values. May be {@code null} if the\n   *          requested field was indexed as {@link NumericDocValuesField} or\n   *          {@link org.apache.lucene.legacy.LegacyLongField}.\n   * @param setDocsWithField\n   *          If true then {@link #getDocsWithField} will also be computed and\n   *          stored in the FieldCache.\n   * @return The values in the given field for each document.\n   * @throws IOException\n   *           If any error occurs.\n   */\n  public NumericDocValues getNumerics(LeafReader reader, String field, Parser parser, boolean setDocsWithField) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/uninverting/FieldCache#getNumerics(LeafReader,String,Parser,boolean).mjava","sourceNew":null,"sourceOld":"  /**\n   * Returns a {@link NumericDocValues} over the values found in documents in the given\n   * field. If the field was indexed as {@link NumericDocValuesField}, it simply\n   * uses {@link org.apache.lucene.index.LeafReader#getNumericDocValues(String)} to read the values.\n   * Otherwise, it checks the internal cache for an appropriate entry, and if\n   * none is found, reads the terms/points in <code>field</code> as longs and returns\n   * an array of size <code>reader.maxDoc()</code> of the value each document\n   * has in the given field.\n   * \n   * @param reader\n   *          Used to get field values.\n   * @param field\n   *          Which field contains the longs.\n   * @param parser\n   *          Computes long for string values. May be {@code null} if the\n   *          requested field was indexed as {@link NumericDocValuesField} or\n   *          {@link org.apache.lucene.legacy.LegacyLongField}.\n   * @param setDocsWithField\n   *          If true then {@link #getDocsWithField} will also be computed and\n   *          stored in the FieldCache.\n   * @return The values in the given field for each document.\n   * @throws IOException\n   *           If any error occurs.\n   */\n  public NumericDocValues getNumerics(LeafReader reader, String field, Parser parser, boolean setDocsWithField) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a076c3c721f685b7559308fdc2cd72d91bba67e5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"403d05f7f8d69b65659157eff1bc1d2717f04c66":["0e121d43b5a10f2df530f406f935102656e9c4e8","2c8bedceb91e64a3f0e831450058fc4a76d2c0a6"],"0e121d43b5a10f2df530f406f935102656e9c4e8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a076c3c721f685b7559308fdc2cd72d91bba67e5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["403d05f7f8d69b65659157eff1bc1d2717f04c66","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"5af5ba0166322092193d4c29880b0f7670fc7ca0":["0e121d43b5a10f2df530f406f935102656e9c4e8"],"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6":["0e121d43b5a10f2df530f406f935102656e9c4e8","5af5ba0166322092193d4c29880b0f7670fc7ca0"],"83870855d82aba6819217abeff5a40779dbb28b4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0e121d43b5a10f2df530f406f935102656e9c4e8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"]},"commit2Childs":{"a076c3c721f685b7559308fdc2cd72d91bba67e5":["0e121d43b5a10f2df530f406f935102656e9c4e8"],"403d05f7f8d69b65659157eff1bc1d2717f04c66":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"0e121d43b5a10f2df530f406f935102656e9c4e8":["403d05f7f8d69b65659157eff1bc1d2717f04c66","5af5ba0166322092193d4c29880b0f7670fc7ca0","2c8bedceb91e64a3f0e831450058fc4a76d2c0a6","83870855d82aba6819217abeff5a40779dbb28b4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a076c3c721f685b7559308fdc2cd72d91bba67e5","0e121d43b5a10f2df530f406f935102656e9c4e8","83870855d82aba6819217abeff5a40779dbb28b4"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"5af5ba0166322092193d4c29880b0f7670fc7ca0":["2c8bedceb91e64a3f0e831450058fc4a76d2c0a6"],"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"83870855d82aba6819217abeff5a40779dbb28b4":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["83870855d82aba6819217abeff5a40779dbb28b4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}