{"path":"lucene/grouping/src/java/org/apache/lucene/search/grouping/term/TermAllGroupHeadsCollector.OrdScoreAllGroupHeadsCollector#doSetNextReader(LeafReaderContext).mjava","commits":[{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":0,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/term/TermAllGroupHeadsCollector.OrdScoreAllGroupHeadsCollector#doSetNextReader(LeafReaderContext).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    protected void doSetNextReader(LeafReaderContext context) throws IOException {\n      this.readerContext = context;\n      groupIndex = DocValues.getSorted(context.reader(), groupField);\n      for (int i = 0; i < fields.length; i++) {\n        if (fields[i].getType() == SortField.Type.SCORE) {\n          continue;\n        }\n\n        sortsIndex[i] = DocValues.getSorted(context.reader(), fields[i].getField());\n      }\n\n      // Clear ordSet and fill it with previous encountered groups that can occur in the current segment.\n      ordSet.clear();\n      segmentGroupHeads = new GroupHead[groupIndex.getValueCount()+1];\n      for (GroupHead collectedGroup : collectedGroups) {\n        int ord;\n        if (collectedGroup.groupValue == null) {\n          ord = -1;\n        } else {\n          ord = groupIndex.lookupTerm(collectedGroup.groupValue);\n        }\n        if (collectedGroup.groupValue == null || ord >= 0) {\n          ordSet.put(ord);\n          segmentGroupHeads[ord+1] = collectedGroup;\n\n          for (int i = 0; i < sortsIndex.length; i++) {\n            if (fields[i].getType() == SortField.Type.SCORE) {\n              continue;\n            }\n            int sortOrd;\n            if (collectedGroup.sortValues[i] == null) {\n              sortOrd = -1;\n            } else {\n              sortOrd = sortsIndex[i].lookupTerm(collectedGroup.sortValues[i].get());\n            }\n            collectedGroup.sortOrds[i] = sortOrd;\n          }\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7ae958a739da1866696f442384393ba2f13e33e5","date":1491819018,"type":4,"author":"Alan Woodward","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/grouping/src/java/org/apache/lucene/search/grouping/term/TermAllGroupHeadsCollector.OrdScoreAllGroupHeadsCollector#doSetNextReader(LeafReaderContext).mjava","sourceNew":null,"sourceOld":"    @Override\n    protected void doSetNextReader(LeafReaderContext context) throws IOException {\n      this.readerContext = context;\n      groupIndex = DocValues.getSorted(context.reader(), groupField);\n      for (int i = 0; i < fields.length; i++) {\n        if (fields[i].getType() == SortField.Type.SCORE) {\n          continue;\n        }\n\n        sortsIndex[i] = DocValues.getSorted(context.reader(), fields[i].getField());\n      }\n\n      // Clear ordSet and fill it with previous encountered groups that can occur in the current segment.\n      ordSet.clear();\n      segmentGroupHeads = new GroupHead[groupIndex.getValueCount()+1];\n      for (GroupHead collectedGroup : collectedGroups) {\n        int ord;\n        if (collectedGroup.groupValue == null) {\n          ord = -1;\n        } else {\n          ord = groupIndex.lookupTerm(collectedGroup.groupValue);\n        }\n        if (collectedGroup.groupValue == null || ord >= 0) {\n          ordSet.put(ord);\n          segmentGroupHeads[ord+1] = collectedGroup;\n\n          for (int i = 0; i < sortsIndex.length; i++) {\n            if (fields[i].getType() == SortField.Type.SCORE) {\n              continue;\n            }\n            int sortOrd;\n            if (collectedGroup.sortValues[i] == null) {\n              sortOrd = -1;\n            } else {\n              sortOrd = sortsIndex[i].lookupTerm(collectedGroup.sortValues[i].get());\n            }\n            collectedGroup.sortOrds[i] = sortOrd;\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":4,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/grouping/src/java/org/apache/lucene/search/grouping/term/TermAllGroupHeadsCollector.OrdScoreAllGroupHeadsCollector#doSetNextReader(LeafReaderContext).mjava","sourceNew":null,"sourceOld":"    @Override\n    protected void doSetNextReader(LeafReaderContext context) throws IOException {\n      this.readerContext = context;\n      groupIndex = DocValues.getSorted(context.reader(), groupField);\n      for (int i = 0; i < fields.length; i++) {\n        if (fields[i].getType() == SortField.Type.SCORE) {\n          continue;\n        }\n\n        sortsIndex[i] = DocValues.getSorted(context.reader(), fields[i].getField());\n      }\n\n      // Clear ordSet and fill it with previous encountered groups that can occur in the current segment.\n      ordSet.clear();\n      segmentGroupHeads = new GroupHead[groupIndex.getValueCount()+1];\n      for (GroupHead collectedGroup : collectedGroups) {\n        int ord;\n        if (collectedGroup.groupValue == null) {\n          ord = -1;\n        } else {\n          ord = groupIndex.lookupTerm(collectedGroup.groupValue);\n        }\n        if (collectedGroup.groupValue == null || ord >= 0) {\n          ordSet.put(ord);\n          segmentGroupHeads[ord+1] = collectedGroup;\n\n          for (int i = 0; i < sortsIndex.length; i++) {\n            if (fields[i].getType() == SortField.Type.SCORE) {\n              continue;\n            }\n            int sortOrd;\n            if (collectedGroup.sortValues[i] == null) {\n              sortOrd = -1;\n            } else {\n              sortOrd = sortsIndex[i].lookupTerm(collectedGroup.sortValues[i].get());\n            }\n            collectedGroup.sortOrds[i] = sortOrd;\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7ae958a739da1866696f442384393ba2f13e33e5"],"7ae958a739da1866696f442384393ba2f13e33e5":["c9fb5f46e264daf5ba3860defe623a89d202dd87"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","7ae958a739da1866696f442384393ba2f13e33e5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7ae958a739da1866696f442384393ba2f13e33e5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}