{"path":"solr/core/src/java/org/apache/solr/handler/SortingResponseWriter[ExportWriter].MultiFieldWriter#write(int,LeafReader,Writer,int).mjava","commits":[{"id":"50f05d6b69cfaabd51b5d26cba4e3122f51fff83","date":1478603228,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SortingResponseWriter[ExportWriter].MultiFieldWriter#write(int,LeafReader,Writer,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/SortingResponseWriter.MultiFieldWriter#write(int,LeafReader,Writer,int).mjava","sourceNew":"    public boolean write(int docId, LeafReader reader, Writer out, int fieldIndex) throws IOException {\n      SortedSetDocValues vals = DocValues.getSortedSet(reader, this.field);\n      List<Long> ords;\n      if (vals.advance(docId) == docId) {\n        ords = new ArrayList();\n        long o = -1;\n        while((o = vals.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n          ords.add(o);\n        }\n        assert ords.size() > 0;\n      } else {\n        return false;\n      }\n\n\n      if(fieldIndex>0) {\n        out.write(',');\n      }\n      out.write('\"');\n      out.write(this.field);\n      out.write('\"');\n      out.write(':');\n      out.write('[');\n      int v = 0;\n      for(long ord : ords) {\n        BytesRef ref = vals.lookupOrd(ord);\n        fieldType.indexedToReadable(ref, cref);\n        if(v > 0) {\n          out.write(',');\n        }\n\n        if(!numeric) {\n          out.write('\"');\n        }\n\n        writeStr(cref.toString(), out);\n\n        if(!numeric) {\n          out.write('\"');\n        }\n        ++v;\n      }\n      out.write(\"]\");\n      return true;\n    }\n\n","sourceOld":"    public boolean write(int docId, LeafReader reader, Writer out, int fieldIndex) throws IOException {\n      SortedSetDocValues vals = DocValues.getSortedSet(reader, this.field);\n      List<Long> ords;\n      if (vals.advance(docId) == docId) {\n        ords = new ArrayList();\n        long o = -1;\n        while((o = vals.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n          ords.add(o);\n        }\n        assert ords.size() > 0;\n      } else {\n        return false;\n      }\n\n\n      if(fieldIndex>0) {\n        out.write(',');\n      }\n      out.write('\"');\n      out.write(this.field);\n      out.write('\"');\n      out.write(':');\n      out.write('[');\n      int v = 0;\n      for(long ord : ords) {\n        BytesRef ref = vals.lookupOrd(ord);\n        fieldType.indexedToReadable(ref, cref);\n        if(v > 0) {\n          out.write(',');\n        }\n\n        if(!numeric) {\n          out.write('\"');\n        }\n\n        writeStr(cref.toString(), out);\n\n        if(!numeric) {\n          out.write('\"');\n        }\n        ++v;\n      }\n      out.write(\"]\");\n      return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cbb7f1f4cf1e9a820364c090bb7e9a590f351339","date":1478603266,"type":4,"author":"Noble Paul","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/handler/SortingResponseWriter[ExportWriter].MultiFieldWriter#write(int,LeafReader,Writer,int).mjava","sourceNew":null,"sourceOld":"    public boolean write(int docId, LeafReader reader, Writer out, int fieldIndex) throws IOException {\n      SortedSetDocValues vals = DocValues.getSortedSet(reader, this.field);\n      List<Long> ords;\n      if (vals.advance(docId) == docId) {\n        ords = new ArrayList();\n        long o = -1;\n        while((o = vals.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n          ords.add(o);\n        }\n        assert ords.size() > 0;\n      } else {\n        return false;\n      }\n\n\n      if(fieldIndex>0) {\n        out.write(',');\n      }\n      out.write('\"');\n      out.write(this.field);\n      out.write('\"');\n      out.write(':');\n      out.write('[');\n      int v = 0;\n      for(long ord : ords) {\n        BytesRef ref = vals.lookupOrd(ord);\n        fieldType.indexedToReadable(ref, cref);\n        if(v > 0) {\n          out.write(',');\n        }\n\n        if(!numeric) {\n          out.write('\"');\n        }\n\n        writeStr(cref.toString(), out);\n\n        if(!numeric) {\n          out.write('\"');\n        }\n        ++v;\n      }\n      out.write(\"]\");\n      return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"50f05d6b69cfaabd51b5d26cba4e3122f51fff83":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cbb7f1f4cf1e9a820364c090bb7e9a590f351339":["50f05d6b69cfaabd51b5d26cba4e3122f51fff83"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cbb7f1f4cf1e9a820364c090bb7e9a590f351339"]},"commit2Childs":{"50f05d6b69cfaabd51b5d26cba4e3122f51fff83":["cbb7f1f4cf1e9a820364c090bb7e9a590f351339"],"cbb7f1f4cf1e9a820364c090bb7e9a590f351339":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["50f05d6b69cfaabd51b5d26cba4e3122f51fff83"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}