{"path":"solr/core/src/java/org/apache/solr/update/processor/LogUpdateProcessor[LogUpdateProcessorFactory]#finish().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/LogUpdateProcessor[LogUpdateProcessorFactory]#finish().mjava","pathOld":"solr/src/java/org/apache/solr/update/processor/LogUpdateProcessor[LogUpdateProcessorFactory]#finish().mjava","sourceNew":"  @Override\n  public void finish() throws IOException {\n    if (next != null) next.finish();\n    \n    // TODO: right now, update requests are logged twice...\n    // this will slow down things compared to Solr 1.2\n    // we should have extra log info on the SolrQueryResponse, to\n    // be logged by SolrCore\n    \n    // if id lists were truncated, show how many more there were\n    if (adds != null && numAdds > maxNumToLog) {\n      adds.add(\"... (\" + numAdds + \" adds)\");\n    }\n    if (deletes != null && numDeletes > maxNumToLog) {\n      deletes.add(\"... (\" + numDeletes + \" deletes)\");\n    }\n    long elapsed = rsp.getEndTime() - req.getStartTime();\n    log.info( \"\"+toLog + \" 0 \" + (elapsed) );\n  }\n\n","sourceOld":"  @Override\n  public void finish() throws IOException {\n    if (next != null) next.finish();\n    \n    // TODO: right now, update requests are logged twice...\n    // this will slow down things compared to Solr 1.2\n    // we should have extra log info on the SolrQueryResponse, to\n    // be logged by SolrCore\n    \n    // if id lists were truncated, show how many more there were\n    if (adds != null && numAdds > maxNumToLog) {\n      adds.add(\"... (\" + numAdds + \" adds)\");\n    }\n    if (deletes != null && numDeletes > maxNumToLog) {\n      deletes.add(\"... (\" + numDeletes + \" deletes)\");\n    }\n    long elapsed = rsp.getEndTime() - req.getStartTime();\n    log.info( \"\"+toLog + \" 0 \" + (elapsed) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/LogUpdateProcessor[LogUpdateProcessorFactory]#finish().mjava","pathOld":"solr/src/java/org/apache/solr/update/processor/LogUpdateProcessor[LogUpdateProcessorFactory]#finish().mjava","sourceNew":"  @Override\n  public void finish() throws IOException {\n    if (next != null) next.finish();\n    \n    // TODO: right now, update requests are logged twice...\n    // this will slow down things compared to Solr 1.2\n    // we should have extra log info on the SolrQueryResponse, to\n    // be logged by SolrCore\n    \n    // if id lists were truncated, show how many more there were\n    if (adds != null && numAdds > maxNumToLog) {\n      adds.add(\"... (\" + numAdds + \" adds)\");\n    }\n    if (deletes != null && numDeletes > maxNumToLog) {\n      deletes.add(\"... (\" + numDeletes + \" deletes)\");\n    }\n    long elapsed = rsp.getEndTime() - req.getStartTime();\n    log.info( \"\"+toLog + \" 0 \" + (elapsed) );\n  }\n\n","sourceOld":"  @Override\n  public void finish() throws IOException {\n    if (next != null) next.finish();\n    \n    // TODO: right now, update requests are logged twice...\n    // this will slow down things compared to Solr 1.2\n    // we should have extra log info on the SolrQueryResponse, to\n    // be logged by SolrCore\n    \n    // if id lists were truncated, show how many more there were\n    if (adds != null && numAdds > maxNumToLog) {\n      adds.add(\"... (\" + numAdds + \" adds)\");\n    }\n    if (deletes != null && numDeletes > maxNumToLog) {\n      deletes.add(\"... (\" + numDeletes + \" deletes)\");\n    }\n    long elapsed = rsp.getEndTime() - req.getStartTime();\n    log.info( \"\"+toLog + \" 0 \" + (elapsed) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/LogUpdateProcessor[LogUpdateProcessorFactory]#finish().mjava","pathOld":"solr/src/java/org/apache/solr/update/processor/LogUpdateProcessor[LogUpdateProcessorFactory]#finish().mjava","sourceNew":"  @Override\n  public void finish() throws IOException {\n    if (next != null) next.finish();\n    \n    // TODO: right now, update requests are logged twice...\n    // this will slow down things compared to Solr 1.2\n    // we should have extra log info on the SolrQueryResponse, to\n    // be logged by SolrCore\n    \n    // if id lists were truncated, show how many more there were\n    if (adds != null && numAdds > maxNumToLog) {\n      adds.add(\"... (\" + numAdds + \" adds)\");\n    }\n    if (deletes != null && numDeletes > maxNumToLog) {\n      deletes.add(\"... (\" + numDeletes + \" deletes)\");\n    }\n    long elapsed = rsp.getEndTime() - req.getStartTime();\n    log.info( \"\"+toLog + \" 0 \" + (elapsed) );\n  }\n\n","sourceOld":"  @Override\n  public void finish() throws IOException {\n    if (next != null) next.finish();\n    \n    // TODO: right now, update requests are logged twice...\n    // this will slow down things compared to Solr 1.2\n    // we should have extra log info on the SolrQueryResponse, to\n    // be logged by SolrCore\n    \n    // if id lists were truncated, show how many more there were\n    if (adds != null && numAdds > maxNumToLog) {\n      adds.add(\"... (\" + numAdds + \" adds)\");\n    }\n    if (deletes != null && numDeletes > maxNumToLog) {\n      deletes.add(\"... (\" + numDeletes + \" deletes)\");\n    }\n    long elapsed = rsp.getEndTime() - req.getStartTime();\n    log.info( \"\"+toLog + \" 0 \" + (elapsed) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"48ca93fd0adba286887078680f889a3ac95dc9b1","date":1310396563,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/LogUpdateProcessor[LogUpdateProcessorFactory]#finish().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/LogUpdateProcessor[LogUpdateProcessorFactory]#finish().mjava","sourceNew":"  @Override\n  public void finish() throws IOException {\n    if (next != null) next.finish();\n\n    // LOG A SUMMARY WHEN ALL DONE (INFO LEVEL)\n    \n    // TODO: right now, update requests are logged twice...\n    // this will slow down things compared to Solr 1.2\n    // we should have extra log info on the SolrQueryResponse, to\n    // be logged by SolrCore\n    \n    // if id lists were truncated, show how many more there were\n    if (adds != null && numAdds > maxNumToLog) {\n      adds.add(\"... (\" + numAdds + \" adds)\");\n    }\n    if (deletes != null && numDeletes > maxNumToLog) {\n      deletes.add(\"... (\" + numDeletes + \" deletes)\");\n    }\n    long elapsed = rsp.getEndTime() - req.getStartTime();\n    log.info( \"\"+toLog + \" 0 \" + (elapsed) );\n  }\n\n","sourceOld":"  @Override\n  public void finish() throws IOException {\n    if (next != null) next.finish();\n    \n    // TODO: right now, update requests are logged twice...\n    // this will slow down things compared to Solr 1.2\n    // we should have extra log info on the SolrQueryResponse, to\n    // be logged by SolrCore\n    \n    // if id lists were truncated, show how many more there were\n    if (adds != null && numAdds > maxNumToLog) {\n      adds.add(\"... (\" + numAdds + \" adds)\");\n    }\n    if (deletes != null && numDeletes > maxNumToLog) {\n      deletes.add(\"... (\" + numDeletes + \" deletes)\");\n    }\n    long elapsed = rsp.getEndTime() - req.getStartTime();\n    log.info( \"\"+toLog + \" 0 \" + (elapsed) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6a5ba68d45a5ef4a6777115f56d95504aa4e66b1","date":1330047610,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/LogUpdateProcessor[LogUpdateProcessorFactory]#finish().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/LogUpdateProcessor[LogUpdateProcessorFactory]#finish().mjava","sourceNew":"  @Override\n  public void finish() throws IOException {\n    if (next != null) next.finish();\n    if (logDebug) { log.debug(\"finish\"); }\n\n    // LOG A SUMMARY WHEN ALL DONE (INFO LEVEL)\n    \n    // TODO: right now, update requests are logged twice...\n    // this will slow down things compared to Solr 1.2\n    // we should have extra log info on the SolrQueryResponse, to\n    // be logged by SolrCore\n    \n    // if id lists were truncated, show how many more there were\n    if (adds != null && numAdds > maxNumToLog) {\n      adds.add(\"... (\" + numAdds + \" adds)\");\n    }\n    if (deletes != null && numDeletes > maxNumToLog) {\n      deletes.add(\"... (\" + numDeletes + \" deletes)\");\n    }\n    long elapsed = rsp.getEndTime() - req.getStartTime();\n    log.info( \"\"+toLog + \" 0 \" + (elapsed) );\n  }\n\n","sourceOld":"  @Override\n  public void finish() throws IOException {\n    if (next != null) next.finish();\n\n    // LOG A SUMMARY WHEN ALL DONE (INFO LEVEL)\n    \n    // TODO: right now, update requests are logged twice...\n    // this will slow down things compared to Solr 1.2\n    // we should have extra log info on the SolrQueryResponse, to\n    // be logged by SolrCore\n    \n    // if id lists were truncated, show how many more there were\n    if (adds != null && numAdds > maxNumToLog) {\n      adds.add(\"... (\" + numAdds + \" adds)\");\n    }\n    if (deletes != null && numDeletes > maxNumToLog) {\n      deletes.add(\"... (\" + numDeletes + \" deletes)\");\n    }\n    long elapsed = rsp.getEndTime() - req.getStartTime();\n    log.info( \"\"+toLog + \" 0 \" + (elapsed) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8f7907798e0c730e9ab37681c6e8dfbde0e4173","date":1330361299,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/LogUpdateProcessor[LogUpdateProcessorFactory]#finish().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/LogUpdateProcessor[LogUpdateProcessorFactory]#finish().mjava","sourceNew":"  @Override\n  public void finish() throws IOException {\n    if (next != null) next.finish();\n    if (logDebug) { log.debug(\"finish\"); }\n\n    // LOG A SUMMARY WHEN ALL DONE (INFO LEVEL)\n    \n    // TODO: right now, update requests are logged twice...\n    // this will slow down things compared to Solr 1.2\n    // we should have extra log info on the SolrQueryResponse, to\n    // be logged by SolrCore\n    \n    // if id lists were truncated, show how many more there were\n\n    NamedList<Object> stdLog = rsp.getToLog();\n\n    StringBuilder sb = new StringBuilder();\n    for (int i=0; i<stdLog.size(); i++) {\n      String name = stdLog.getName(i);\n      Object val = stdLog.getVal(i);\n      if (\"path\"==name || \"params\"==name) {    //equals OK here\n        sb.append(val).append(' ');\n      } else {\n        sb.append(name).append('=').append(val).append(' ');\n      }\n    }\n    stdLog.clear();   // make it so SolrCore.exec won't log this again\n\n    if (adds != null && numAdds > maxNumToLog) {\n      adds.add(\"... (\" + numAdds + \" adds)\");\n    }\n    if (deletes != null && numDeletes > maxNumToLog) {\n      deletes.add(\"... (\" + numDeletes + \" deletes)\");\n    }\n    long elapsed = rsp.getEndTime() - req.getStartTime();\n\n    sb.append(toLog).append(\" 0 \").append(elapsed);\n    log.info(sb.toString());\n  }\n\n","sourceOld":"  @Override\n  public void finish() throws IOException {\n    if (next != null) next.finish();\n    if (logDebug) { log.debug(\"finish\"); }\n\n    // LOG A SUMMARY WHEN ALL DONE (INFO LEVEL)\n    \n    // TODO: right now, update requests are logged twice...\n    // this will slow down things compared to Solr 1.2\n    // we should have extra log info on the SolrQueryResponse, to\n    // be logged by SolrCore\n    \n    // if id lists were truncated, show how many more there were\n    if (adds != null && numAdds > maxNumToLog) {\n      adds.add(\"... (\" + numAdds + \" adds)\");\n    }\n    if (deletes != null && numDeletes > maxNumToLog) {\n      deletes.add(\"... (\" + numDeletes + \" deletes)\");\n    }\n    long elapsed = rsp.getEndTime() - req.getStartTime();\n    log.info( \"\"+toLog + \" 0 \" + (elapsed) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff2d7326b1f013c8da9bad45b1e98a3d16c38575","date":1330406992,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/LogUpdateProcessor[LogUpdateProcessorFactory]#finish().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/LogUpdateProcessor[LogUpdateProcessorFactory]#finish().mjava","sourceNew":"  @Override\n  public void finish() throws IOException {\n    if (logDebug) { log.debug(\"PRE_UPDATE finish()\"); }\n    if (next != null) next.finish();\n\n    // LOG A SUMMARY WHEN ALL DONE (INFO LEVEL)\n    \n\n\n    NamedList<Object> stdLog = rsp.getToLog();\n\n    StringBuilder sb = new StringBuilder();\n    for (int i=0; i<stdLog.size(); i++) {\n      String name = stdLog.getName(i);\n      Object val = stdLog.getVal(i);\n      if (\"path\"==name || \"params\"==name) {    //equals OK here\n        sb.append(val).append(' ');\n      } else {\n        sb.append(name).append('=').append(val).append(' ');\n      }\n    }\n    stdLog.clear();   // make it so SolrCore.exec won't log this again\n\n    // if id lists were truncated, show how many more there were\n    if (adds != null && numAdds > maxNumToLog) {\n      adds.add(\"... (\" + numAdds + \" adds)\");\n    }\n    if (deletes != null && numDeletes > maxNumToLog) {\n      deletes.add(\"... (\" + numDeletes + \" deletes)\");\n    }\n    long elapsed = rsp.getEndTime() - req.getStartTime();\n\n    sb.append(toLog).append(\" 0 \").append(elapsed);\n    log.info(sb.toString());\n  }\n\n","sourceOld":"  @Override\n  public void finish() throws IOException {\n    if (next != null) next.finish();\n    if (logDebug) { log.debug(\"finish\"); }\n\n    // LOG A SUMMARY WHEN ALL DONE (INFO LEVEL)\n    \n    // TODO: right now, update requests are logged twice...\n    // this will slow down things compared to Solr 1.2\n    // we should have extra log info on the SolrQueryResponse, to\n    // be logged by SolrCore\n    \n    // if id lists were truncated, show how many more there were\n\n    NamedList<Object> stdLog = rsp.getToLog();\n\n    StringBuilder sb = new StringBuilder();\n    for (int i=0; i<stdLog.size(); i++) {\n      String name = stdLog.getName(i);\n      Object val = stdLog.getVal(i);\n      if (\"path\"==name || \"params\"==name) {    //equals OK here\n        sb.append(val).append(' ');\n      } else {\n        sb.append(name).append('=').append(val).append(' ');\n      }\n    }\n    stdLog.clear();   // make it so SolrCore.exec won't log this again\n\n    if (adds != null && numAdds > maxNumToLog) {\n      adds.add(\"... (\" + numAdds + \" adds)\");\n    }\n    if (deletes != null && numDeletes > maxNumToLog) {\n      deletes.add(\"... (\" + numDeletes + \" deletes)\");\n    }\n    long elapsed = rsp.getEndTime() - req.getStartTime();\n\n    sb.append(toLog).append(\" 0 \").append(elapsed);\n    log.info(sb.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"caab9a24cde56bead0787370f9f58bee12b4856c","date":1330474364,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/LogUpdateProcessor[LogUpdateProcessorFactory]#finish().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/LogUpdateProcessor[LogUpdateProcessorFactory]#finish().mjava","sourceNew":"  @Override\n  public void finish() throws IOException {\n    if (logDebug) { log.debug(\"PRE_UPDATE finish()\"); }\n    if (next != null) next.finish();\n\n    // LOG A SUMMARY WHEN ALL DONE (INFO LEVEL)\n    \n\n\n    NamedList<Object> stdLog = rsp.getToLog();\n\n    StringBuilder sb = new StringBuilder();\n\n    for (int i=0; i<toLog.size(); i++) {\n      String name = toLog.getName(i);\n      Object val = toLog.getVal(i);\n      if (name != null) {\n        sb.append(name).append('=');\n      }\n      sb.append(val).append(' ');\n    }\n\n    stdLog.clear();   // make it so SolrCore.exec won't log this again\n\n    // if id lists were truncated, show how many more there were\n    if (adds != null && numAdds > maxNumToLog) {\n      adds.add(\"... (\" + numAdds + \" adds)\");\n    }\n    if (deletes != null && numDeletes > maxNumToLog) {\n      deletes.add(\"... (\" + numDeletes + \" deletes)\");\n    }\n    long elapsed = rsp.getEndTime() - req.getStartTime();\n\n    sb.append(\" 0 \").append(elapsed);\n    log.info(sb.toString());\n  }\n\n","sourceOld":"  @Override\n  public void finish() throws IOException {\n    if (logDebug) { log.debug(\"PRE_UPDATE finish()\"); }\n    if (next != null) next.finish();\n\n    // LOG A SUMMARY WHEN ALL DONE (INFO LEVEL)\n    \n\n\n    NamedList<Object> stdLog = rsp.getToLog();\n\n    StringBuilder sb = new StringBuilder();\n    for (int i=0; i<stdLog.size(); i++) {\n      String name = stdLog.getName(i);\n      Object val = stdLog.getVal(i);\n      if (\"path\"==name || \"params\"==name) {    //equals OK here\n        sb.append(val).append(' ');\n      } else {\n        sb.append(name).append('=').append(val).append(' ');\n      }\n    }\n    stdLog.clear();   // make it so SolrCore.exec won't log this again\n\n    // if id lists were truncated, show how many more there were\n    if (adds != null && numAdds > maxNumToLog) {\n      adds.add(\"... (\" + numAdds + \" adds)\");\n    }\n    if (deletes != null && numDeletes > maxNumToLog) {\n      deletes.add(\"... (\" + numDeletes + \" deletes)\");\n    }\n    long elapsed = rsp.getEndTime() - req.getStartTime();\n\n    sb.append(toLog).append(\" 0 \").append(elapsed);\n    log.info(sb.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d781af8f274e3323eeea6f761a3f6f5fa1843e4f","date":1330475896,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/LogUpdateProcessor[LogUpdateProcessorFactory]#finish().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/LogUpdateProcessor[LogUpdateProcessorFactory]#finish().mjava","sourceNew":"  @Override\n  public void finish() throws IOException {\n    if (logDebug) { log.debug(\"PRE_UPDATE finish()\"); }\n    if (next != null) next.finish();\n\n    // LOG A SUMMARY WHEN ALL DONE (INFO LEVEL)\n    \n\n\n    NamedList<Object> stdLog = rsp.getToLog();\n\n    StringBuilder sb = new StringBuilder();\n\n    for (int i=0; i<stdLog.size(); i++) {\n      String name = stdLog.getName(i);\n      Object val = stdLog.getVal(i);\n      if (name != null) {\n        sb.append(name).append('=');\n      }\n      sb.append(val).append(' ');\n    }\n\n    stdLog.clear();   // make it so SolrCore.exec won't log this again\n\n    // if id lists were truncated, show how many more there were\n    if (adds != null && numAdds > maxNumToLog) {\n      adds.add(\"... (\" + numAdds + \" adds)\");\n    }\n    if (deletes != null && numDeletes > maxNumToLog) {\n      deletes.add(\"... (\" + numDeletes + \" deletes)\");\n    }\n    long elapsed = rsp.getEndTime() - req.getStartTime();\n\n    sb.append(toLog).append(\" 0 \").append(elapsed);\n    log.info(sb.toString());\n  }\n\n","sourceOld":"  @Override\n  public void finish() throws IOException {\n    if (logDebug) { log.debug(\"PRE_UPDATE finish()\"); }\n    if (next != null) next.finish();\n\n    // LOG A SUMMARY WHEN ALL DONE (INFO LEVEL)\n    \n\n\n    NamedList<Object> stdLog = rsp.getToLog();\n\n    StringBuilder sb = new StringBuilder();\n\n    for (int i=0; i<toLog.size(); i++) {\n      String name = toLog.getName(i);\n      Object val = toLog.getVal(i);\n      if (name != null) {\n        sb.append(name).append('=');\n      }\n      sb.append(val).append(' ');\n    }\n\n    stdLog.clear();   // make it so SolrCore.exec won't log this again\n\n    // if id lists were truncated, show how many more there were\n    if (adds != null && numAdds > maxNumToLog) {\n      adds.add(\"... (\" + numAdds + \" adds)\");\n    }\n    if (deletes != null && numDeletes > maxNumToLog) {\n      deletes.add(\"... (\" + numDeletes + \" deletes)\");\n    }\n    long elapsed = rsp.getEndTime() - req.getStartTime();\n\n    sb.append(\" 0 \").append(elapsed);\n    log.info(sb.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d58ecafc00c643b390421a6e26dedc8556e75456","date":1330488755,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/LogUpdateProcessor[LogUpdateProcessorFactory]#finish().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/LogUpdateProcessor[LogUpdateProcessorFactory]#finish().mjava","sourceNew":"  @Override\n  public void finish() throws IOException {\n    if (logDebug) { log.debug(\"PRE_UPDATE finish()\"); }\n    if (next != null) next.finish();\n\n    // LOG A SUMMARY WHEN ALL DONE (INFO LEVEL)\n    \n\n\n    NamedList<Object> stdLog = rsp.getToLog();\n\n    StringBuilder sb = new StringBuilder(req.getCore().getLogId());\n\n    for (int i=0; i<stdLog.size(); i++) {\n      String name = stdLog.getName(i);\n      Object val = stdLog.getVal(i);\n      if (name != null) {\n        sb.append(name).append('=');\n      }\n      sb.append(val).append(' ');\n    }\n\n    stdLog.clear();   // make it so SolrCore.exec won't log this again\n\n    // if id lists were truncated, show how many more there were\n    if (adds != null && numAdds > maxNumToLog) {\n      adds.add(\"... (\" + numAdds + \" adds)\");\n    }\n    if (deletes != null && numDeletes > maxNumToLog) {\n      deletes.add(\"... (\" + numDeletes + \" deletes)\");\n    }\n    long elapsed = rsp.getEndTime() - req.getStartTime();\n\n    sb.append(toLog).append(\" 0 \").append(elapsed);\n    log.info(sb.toString());\n  }\n\n","sourceOld":"  @Override\n  public void finish() throws IOException {\n    if (logDebug) { log.debug(\"PRE_UPDATE finish()\"); }\n    if (next != null) next.finish();\n\n    // LOG A SUMMARY WHEN ALL DONE (INFO LEVEL)\n    \n\n\n    NamedList<Object> stdLog = rsp.getToLog();\n\n    StringBuilder sb = new StringBuilder();\n\n    for (int i=0; i<stdLog.size(); i++) {\n      String name = stdLog.getName(i);\n      Object val = stdLog.getVal(i);\n      if (name != null) {\n        sb.append(name).append('=');\n      }\n      sb.append(val).append(' ');\n    }\n\n    stdLog.clear();   // make it so SolrCore.exec won't log this again\n\n    // if id lists were truncated, show how many more there were\n    if (adds != null && numAdds > maxNumToLog) {\n      adds.add(\"... (\" + numAdds + \" adds)\");\n    }\n    if (deletes != null && numDeletes > maxNumToLog) {\n      deletes.add(\"... (\" + numDeletes + \" deletes)\");\n    }\n    long elapsed = rsp.getEndTime() - req.getStartTime();\n\n    sb.append(toLog).append(\" 0 \").append(elapsed);\n    log.info(sb.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/LogUpdateProcessor[LogUpdateProcessorFactory]#finish().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/LogUpdateProcessor[LogUpdateProcessorFactory]#finish().mjava","sourceNew":"  @Override\n  public void finish() throws IOException {\n    if (logDebug) { log.debug(\"PRE_UPDATE finish()\"); }\n    if (next != null) next.finish();\n\n    // LOG A SUMMARY WHEN ALL DONE (INFO LEVEL)\n    \n\n\n    NamedList<Object> stdLog = rsp.getToLog();\n\n    StringBuilder sb = new StringBuilder(req.getCore().getLogId());\n\n    for (int i=0; i<stdLog.size(); i++) {\n      String name = stdLog.getName(i);\n      Object val = stdLog.getVal(i);\n      if (name != null) {\n        sb.append(name).append('=');\n      }\n      sb.append(val).append(' ');\n    }\n\n    stdLog.clear();   // make it so SolrCore.exec won't log this again\n\n    // if id lists were truncated, show how many more there were\n    if (adds != null && numAdds > maxNumToLog) {\n      adds.add(\"... (\" + numAdds + \" adds)\");\n    }\n    if (deletes != null && numDeletes > maxNumToLog) {\n      deletes.add(\"... (\" + numDeletes + \" deletes)\");\n    }\n    long elapsed = rsp.getEndTime() - req.getStartTime();\n\n    sb.append(toLog).append(\" 0 \").append(elapsed);\n    log.info(sb.toString());\n  }\n\n","sourceOld":"  @Override\n  public void finish() throws IOException {\n    if (next != null) next.finish();\n\n    // LOG A SUMMARY WHEN ALL DONE (INFO LEVEL)\n    \n    // TODO: right now, update requests are logged twice...\n    // this will slow down things compared to Solr 1.2\n    // we should have extra log info on the SolrQueryResponse, to\n    // be logged by SolrCore\n    \n    // if id lists were truncated, show how many more there were\n    if (adds != null && numAdds > maxNumToLog) {\n      adds.add(\"... (\" + numAdds + \" adds)\");\n    }\n    if (deletes != null && numDeletes > maxNumToLog) {\n      deletes.add(\"... (\" + numDeletes + \" deletes)\");\n    }\n    long elapsed = rsp.getEndTime() - req.getStartTime();\n    log.info( \"\"+toLog + \" 0 \" + (elapsed) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3ad3cc14db22043cdeb3c36e3dc1065c2406fc24","date":1357262117,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/LogUpdateProcessor[LogUpdateProcessorFactory]#finish().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/LogUpdateProcessor[LogUpdateProcessorFactory]#finish().mjava","sourceNew":"  @Override\n  public void finish() throws IOException {\n    if (logDebug) { log.debug(\"PRE_UPDATE FINISH \" + req); }\n    if (next != null) next.finish();\n\n    // LOG A SUMMARY WHEN ALL DONE (INFO LEVEL)\n    \n\n\n    NamedList<Object> stdLog = rsp.getToLog();\n\n    StringBuilder sb = new StringBuilder(req.getCore().getLogId());\n\n    for (int i=0; i<stdLog.size(); i++) {\n      String name = stdLog.getName(i);\n      Object val = stdLog.getVal(i);\n      if (name != null) {\n        sb.append(name).append('=');\n      }\n      sb.append(val).append(' ');\n    }\n\n    stdLog.clear();   // make it so SolrCore.exec won't log this again\n\n    // if id lists were truncated, show how many more there were\n    if (adds != null && numAdds > maxNumToLog) {\n      adds.add(\"... (\" + numAdds + \" adds)\");\n    }\n    if (deletes != null && numDeletes > maxNumToLog) {\n      deletes.add(\"... (\" + numDeletes + \" deletes)\");\n    }\n    long elapsed = rsp.getEndTime() - req.getStartTime();\n\n    sb.append(toLog).append(\" 0 \").append(elapsed);\n    log.info(sb.toString());\n  }\n\n","sourceOld":"  @Override\n  public void finish() throws IOException {\n    if (logDebug) { log.debug(\"PRE_UPDATE finish()\"); }\n    if (next != null) next.finish();\n\n    // LOG A SUMMARY WHEN ALL DONE (INFO LEVEL)\n    \n\n\n    NamedList<Object> stdLog = rsp.getToLog();\n\n    StringBuilder sb = new StringBuilder(req.getCore().getLogId());\n\n    for (int i=0; i<stdLog.size(); i++) {\n      String name = stdLog.getName(i);\n      Object val = stdLog.getVal(i);\n      if (name != null) {\n        sb.append(name).append('=');\n      }\n      sb.append(val).append(' ');\n    }\n\n    stdLog.clear();   // make it so SolrCore.exec won't log this again\n\n    // if id lists were truncated, show how many more there were\n    if (adds != null && numAdds > maxNumToLog) {\n      adds.add(\"... (\" + numAdds + \" adds)\");\n    }\n    if (deletes != null && numDeletes > maxNumToLog) {\n      deletes.add(\"... (\" + numDeletes + \" deletes)\");\n    }\n    long elapsed = rsp.getEndTime() - req.getStartTime();\n\n    sb.append(toLog).append(\" 0 \").append(elapsed);\n    log.info(sb.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/LogUpdateProcessor[LogUpdateProcessorFactory]#finish().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/LogUpdateProcessor[LogUpdateProcessorFactory]#finish().mjava","sourceNew":"  @Override\n  public void finish() throws IOException {\n    if (logDebug) { log.debug(\"PRE_UPDATE FINISH \" + req); }\n    if (next != null) next.finish();\n\n    // LOG A SUMMARY WHEN ALL DONE (INFO LEVEL)\n    \n\n\n    NamedList<Object> stdLog = rsp.getToLog();\n\n    StringBuilder sb = new StringBuilder(req.getCore().getLogId());\n\n    for (int i=0; i<stdLog.size(); i++) {\n      String name = stdLog.getName(i);\n      Object val = stdLog.getVal(i);\n      if (name != null) {\n        sb.append(name).append('=');\n      }\n      sb.append(val).append(' ');\n    }\n\n    stdLog.clear();   // make it so SolrCore.exec won't log this again\n\n    // if id lists were truncated, show how many more there were\n    if (adds != null && numAdds > maxNumToLog) {\n      adds.add(\"... (\" + numAdds + \" adds)\");\n    }\n    if (deletes != null && numDeletes > maxNumToLog) {\n      deletes.add(\"... (\" + numDeletes + \" deletes)\");\n    }\n    long elapsed = rsp.getEndTime() - req.getStartTime();\n\n    sb.append(toLog).append(\" 0 \").append(elapsed);\n    log.info(sb.toString());\n  }\n\n","sourceOld":"  @Override\n  public void finish() throws IOException {\n    if (logDebug) { log.debug(\"PRE_UPDATE finish()\"); }\n    if (next != null) next.finish();\n\n    // LOG A SUMMARY WHEN ALL DONE (INFO LEVEL)\n    \n\n\n    NamedList<Object> stdLog = rsp.getToLog();\n\n    StringBuilder sb = new StringBuilder(req.getCore().getLogId());\n\n    for (int i=0; i<stdLog.size(); i++) {\n      String name = stdLog.getName(i);\n      Object val = stdLog.getVal(i);\n      if (name != null) {\n        sb.append(name).append('=');\n      }\n      sb.append(val).append(' ');\n    }\n\n    stdLog.clear();   // make it so SolrCore.exec won't log this again\n\n    // if id lists were truncated, show how many more there were\n    if (adds != null && numAdds > maxNumToLog) {\n      adds.add(\"... (\" + numAdds + \" adds)\");\n    }\n    if (deletes != null && numDeletes > maxNumToLog) {\n      deletes.add(\"... (\" + numDeletes + \" deletes)\");\n    }\n    long elapsed = rsp.getEndTime() - req.getStartTime();\n\n    sb.append(toLog).append(\" 0 \").append(elapsed);\n    log.info(sb.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"054c04cf724f73ebdd3b16e3a86ce802c0ba5e37","date":1362545433,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/LogUpdateProcessor[LogUpdateProcessorFactory]#finish().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/LogUpdateProcessor[LogUpdateProcessorFactory]#finish().mjava","sourceNew":"  @Override\n  public void finish() throws IOException {\n    if (logDebug) { log.debug(\"PRE_UPDATE FINISH \" + req); }\n    if (next != null) next.finish();\n\n    // LOG A SUMMARY WHEN ALL DONE (INFO LEVEL)\n\n    if (log.isInfoEnabled()) {\n      StringBuilder sb = new StringBuilder(rsp.getToLogAsString(req.getCore().getLogId()));\n\n      rsp.getToLog().clear();   // make it so SolrCore.exec won't log this again\n\n      // if id lists were truncated, show how many more there were\n      if (adds != null && numAdds > maxNumToLog) {\n        adds.add(\"... (\" + numAdds + \" adds)\");\n      }\n      if (deletes != null && numDeletes > maxNumToLog) {\n        deletes.add(\"... (\" + numDeletes + \" deletes)\");\n      }\n      long elapsed = rsp.getEndTime() - req.getStartTime();\n\n      sb.append(toLog).append(\" 0 \").append(elapsed);\n      log.info(sb.toString());\n    }\n  }\n\n","sourceOld":"  @Override\n  public void finish() throws IOException {\n    if (logDebug) { log.debug(\"PRE_UPDATE FINISH \" + req); }\n    if (next != null) next.finish();\n\n    // LOG A SUMMARY WHEN ALL DONE (INFO LEVEL)\n    \n\n\n    NamedList<Object> stdLog = rsp.getToLog();\n\n    StringBuilder sb = new StringBuilder(req.getCore().getLogId());\n\n    for (int i=0; i<stdLog.size(); i++) {\n      String name = stdLog.getName(i);\n      Object val = stdLog.getVal(i);\n      if (name != null) {\n        sb.append(name).append('=');\n      }\n      sb.append(val).append(' ');\n    }\n\n    stdLog.clear();   // make it so SolrCore.exec won't log this again\n\n    // if id lists were truncated, show how many more there were\n    if (adds != null && numAdds > maxNumToLog) {\n      adds.add(\"... (\" + numAdds + \" adds)\");\n    }\n    if (deletes != null && numDeletes > maxNumToLog) {\n      deletes.add(\"... (\" + numDeletes + \" deletes)\");\n    }\n    long elapsed = rsp.getEndTime() - req.getStartTime();\n\n    sb.append(toLog).append(\" 0 \").append(elapsed);\n    log.info(sb.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eb55f6c347c48c2f7a9fb29b2e6dfe819b1a56f9","date":1414167719,"type":3,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/LogUpdateProcessor[LogUpdateProcessorFactory]#finish().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/LogUpdateProcessor[LogUpdateProcessorFactory]#finish().mjava","sourceNew":"  @Override\n  public void finish() throws IOException {\n    if (logDebug) { log.debug(\"PRE_UPDATE FINISH \" + req); }\n    if (next != null) next.finish();\n\n    // LOG A SUMMARY WHEN ALL DONE (INFO LEVEL)\n\n    if (log.isInfoEnabled()) {\n      log.info(getLogStringAndClearRspToLog());\n    } else if (log.isWarnEnabled()) {\n      long elapsed = rsp.getEndTime() - req.getStartTime();\n      if (elapsed >= slowUpdateThresholdMillis) {\n        log.warn(getLogStringAndClearRspToLog());\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void finish() throws IOException {\n    if (logDebug) { log.debug(\"PRE_UPDATE FINISH \" + req); }\n    if (next != null) next.finish();\n\n    // LOG A SUMMARY WHEN ALL DONE (INFO LEVEL)\n\n    if (log.isInfoEnabled()) {\n      StringBuilder sb = new StringBuilder(rsp.getToLogAsString(req.getCore().getLogId()));\n\n      rsp.getToLog().clear();   // make it so SolrCore.exec won't log this again\n\n      // if id lists were truncated, show how many more there were\n      if (adds != null && numAdds > maxNumToLog) {\n        adds.add(\"... (\" + numAdds + \" adds)\");\n      }\n      if (deletes != null && numDeletes > maxNumToLog) {\n        deletes.add(\"... (\" + numDeletes + \" deletes)\");\n      }\n      long elapsed = rsp.getEndTime() - req.getStartTime();\n\n      sb.append(toLog).append(\" 0 \").append(elapsed);\n      log.info(sb.toString());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3ab63427379c12859d6d1de312037b877f5148a9","date":1414432324,"type":3,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/LogUpdateProcessor[LogUpdateProcessorFactory]#finish().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/LogUpdateProcessor[LogUpdateProcessorFactory]#finish().mjava","sourceNew":"  @Override\n  public void finish() throws IOException {\n    if (logDebug) { log.debug(\"PRE_UPDATE FINISH \" + req); }\n    if (next != null) next.finish();\n\n    // LOG A SUMMARY WHEN ALL DONE (INFO LEVEL)\n\n    if (log.isInfoEnabled()) {\n      log.info(getLogStringAndClearRspToLog());\n    }\n\n    if (log.isWarnEnabled()) {\n      long elapsed = rsp.getEndTime() - req.getStartTime();\n      if (slowUpdateThresholdMillis >= 0 && elapsed >= slowUpdateThresholdMillis) {\n        log.warn(\"slow: \" + getLogStringAndClearRspToLog());\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void finish() throws IOException {\n    if (logDebug) { log.debug(\"PRE_UPDATE FINISH \" + req); }\n    if (next != null) next.finish();\n\n    // LOG A SUMMARY WHEN ALL DONE (INFO LEVEL)\n\n    if (log.isInfoEnabled()) {\n      log.info(getLogStringAndClearRspToLog());\n    } else if (log.isWarnEnabled()) {\n      long elapsed = rsp.getEndTime() - req.getStartTime();\n      if (elapsed >= slowUpdateThresholdMillis) {\n        log.warn(getLogStringAndClearRspToLog());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"da41004e1997059b4d0549fbeb56bf0858d14689","date":1425425090,"type":3,"author":"Ramkumar Aiyengar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/LogUpdateProcessor[LogUpdateProcessorFactory]#finish().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/LogUpdateProcessor[LogUpdateProcessorFactory]#finish().mjava","sourceNew":"  @Override\n  public void finish() throws IOException {\n    if (logDebug) { log.debug(\"PRE_UPDATE FINISH \" + req); }\n    if (next != null) next.finish();\n\n    // LOG A SUMMARY WHEN ALL DONE (INFO LEVEL)\n\n    if (log.isInfoEnabled()) {\n      log.info(getLogStringAndClearRspToLog());\n    }\n\n    if (log.isWarnEnabled() && slowUpdateThresholdMillis >= 0) {\n      final long elapsed = (long) req.getRequestTimer().getTime();\n      if (elapsed >= slowUpdateThresholdMillis) {\n        log.warn(\"slow: \" + getLogStringAndClearRspToLog());\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void finish() throws IOException {\n    if (logDebug) { log.debug(\"PRE_UPDATE FINISH \" + req); }\n    if (next != null) next.finish();\n\n    // LOG A SUMMARY WHEN ALL DONE (INFO LEVEL)\n\n    if (log.isInfoEnabled()) {\n      log.info(getLogStringAndClearRspToLog());\n    }\n\n    if (log.isWarnEnabled()) {\n      long elapsed = rsp.getEndTime() - req.getStartTime();\n      if (slowUpdateThresholdMillis >= 0 && elapsed >= slowUpdateThresholdMillis) {\n        log.warn(\"slow: \" + getLogStringAndClearRspToLog());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/LogUpdateProcessor[LogUpdateProcessorFactory]#finish().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/LogUpdateProcessor[LogUpdateProcessorFactory]#finish().mjava","sourceNew":"  @Override\n  public void finish() throws IOException {\n    if (logDebug) { log.debug(\"PRE_UPDATE FINISH \" + req); }\n    if (next != null) next.finish();\n\n    // LOG A SUMMARY WHEN ALL DONE (INFO LEVEL)\n\n    if (log.isInfoEnabled()) {\n      log.info(getLogStringAndClearRspToLog());\n    }\n\n    if (log.isWarnEnabled() && slowUpdateThresholdMillis >= 0) {\n      final long elapsed = (long) req.getRequestTimer().getTime();\n      if (elapsed >= slowUpdateThresholdMillis) {\n        log.warn(\"slow: \" + getLogStringAndClearRspToLog());\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void finish() throws IOException {\n    if (logDebug) { log.debug(\"PRE_UPDATE FINISH \" + req); }\n    if (next != null) next.finish();\n\n    // LOG A SUMMARY WHEN ALL DONE (INFO LEVEL)\n\n    if (log.isInfoEnabled()) {\n      log.info(getLogStringAndClearRspToLog());\n    }\n\n    if (log.isWarnEnabled()) {\n      long elapsed = rsp.getEndTime() - req.getStartTime();\n      if (slowUpdateThresholdMillis >= 0 && elapsed >= slowUpdateThresholdMillis) {\n        log.warn(\"slow: \" + getLogStringAndClearRspToLog());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9367dbf5b00d7764583d991c1888f4acc9c9991a","date":1449048142,"type":4,"author":"Anshum Gupta","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/update/processor/LogUpdateProcessor[LogUpdateProcessorFactory]#finish().mjava","sourceNew":null,"sourceOld":"  @Override\n  public void finish() throws IOException {\n    if (logDebug) { log.debug(\"PRE_UPDATE FINISH \" + req); }\n    if (next != null) next.finish();\n\n    // LOG A SUMMARY WHEN ALL DONE (INFO LEVEL)\n\n    if (log.isInfoEnabled()) {\n      log.info(getLogStringAndClearRspToLog());\n    }\n\n    if (log.isWarnEnabled() && slowUpdateThresholdMillis >= 0) {\n      final long elapsed = (long) req.getRequestTimer().getTime();\n      if (elapsed >= slowUpdateThresholdMillis) {\n        log.warn(\"slow: \" + getLogStringAndClearRspToLog());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["d58ecafc00c643b390421a6e26dedc8556e75456","3ad3cc14db22043cdeb3c36e3dc1065c2406fc24"],"eb55f6c347c48c2f7a9fb29b2e6dfe819b1a56f9":["054c04cf724f73ebdd3b16e3a86ce802c0ba5e37"],"f8f7907798e0c730e9ab37681c6e8dfbde0e4173":["6a5ba68d45a5ef4a6777115f56d95504aa4e66b1"],"ff2d7326b1f013c8da9bad45b1e98a3d16c38575":["f8f7907798e0c730e9ab37681c6e8dfbde0e4173"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["48ca93fd0adba286887078680f889a3ac95dc9b1","d58ecafc00c643b390421a6e26dedc8556e75456"],"3ab63427379c12859d6d1de312037b877f5148a9":["eb55f6c347c48c2f7a9fb29b2e6dfe819b1a56f9"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"da41004e1997059b4d0549fbeb56bf0858d14689":["3ab63427379c12859d6d1de312037b877f5148a9"],"d58ecafc00c643b390421a6e26dedc8556e75456":["d781af8f274e3323eeea6f761a3f6f5fa1843e4f"],"9367dbf5b00d7764583d991c1888f4acc9c9991a":["da41004e1997059b4d0549fbeb56bf0858d14689"],"d781af8f274e3323eeea6f761a3f6f5fa1843e4f":["caab9a24cde56bead0787370f9f58bee12b4856c"],"3ad3cc14db22043cdeb3c36e3dc1065c2406fc24":["d58ecafc00c643b390421a6e26dedc8556e75456"],"caab9a24cde56bead0787370f9f58bee12b4856c":["ff2d7326b1f013c8da9bad45b1e98a3d16c38575"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["3ab63427379c12859d6d1de312037b877f5148a9","da41004e1997059b4d0549fbeb56bf0858d14689"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6a5ba68d45a5ef4a6777115f56d95504aa4e66b1":["48ca93fd0adba286887078680f889a3ac95dc9b1"],"48ca93fd0adba286887078680f889a3ac95dc9b1":["c26f00b574427b55127e869b935845554afde1fa"],"054c04cf724f73ebdd3b16e3a86ce802c0ba5e37":["3ad3cc14db22043cdeb3c36e3dc1065c2406fc24"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9367dbf5b00d7764583d991c1888f4acc9c9991a"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"eb55f6c347c48c2f7a9fb29b2e6dfe819b1a56f9":["3ab63427379c12859d6d1de312037b877f5148a9"],"f8f7907798e0c730e9ab37681c6e8dfbde0e4173":["ff2d7326b1f013c8da9bad45b1e98a3d16c38575"],"ff2d7326b1f013c8da9bad45b1e98a3d16c38575":["caab9a24cde56bead0787370f9f58bee12b4856c"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"3ab63427379c12859d6d1de312037b877f5148a9":["da41004e1997059b4d0549fbeb56bf0858d14689","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"c26f00b574427b55127e869b935845554afde1fa":["48ca93fd0adba286887078680f889a3ac95dc9b1"],"da41004e1997059b4d0549fbeb56bf0858d14689":["9367dbf5b00d7764583d991c1888f4acc9c9991a","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"d58ecafc00c643b390421a6e26dedc8556e75456":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","3ad3cc14db22043cdeb3c36e3dc1065c2406fc24"],"d781af8f274e3323eeea6f761a3f6f5fa1843e4f":["d58ecafc00c643b390421a6e26dedc8556e75456"],"9367dbf5b00d7764583d991c1888f4acc9c9991a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3ad3cc14db22043cdeb3c36e3dc1065c2406fc24":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","054c04cf724f73ebdd3b16e3a86ce802c0ba5e37"],"caab9a24cde56bead0787370f9f58bee12b4856c":["d781af8f274e3323eeea6f761a3f6f5fa1843e4f"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"6a5ba68d45a5ef4a6777115f56d95504aa4e66b1":["f8f7907798e0c730e9ab37681c6e8dfbde0e4173"],"48ca93fd0adba286887078680f889a3ac95dc9b1":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","6a5ba68d45a5ef4a6777115f56d95504aa4e66b1"],"054c04cf724f73ebdd3b16e3a86ce802c0ba5e37":["eb55f6c347c48c2f7a9fb29b2e6dfe819b1a56f9"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}