{"path":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene54/Lucene54DocValuesProducer#readNumericEntry(FieldInfo,IndexInput).mjava","commits":[{"id":"7f3090f7e0cab5b1f5acf12d21f31f00fe74a262","date":1475755647,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene54/Lucene54DocValuesProducer#readNumericEntry(FieldInfo,IndexInput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene54/Lucene54DocValuesProducer#readNumericEntry(FieldInfo,IndexInput).mjava","sourceNew":"  private NumericEntry readNumericEntry(FieldInfo info, IndexInput meta) throws IOException {\n    NumericEntry entry = new NumericEntry();\n    entry.format = meta.readVInt();\n    entry.missingOffset = meta.readLong();\n    if (entry.format == SPARSE_COMPRESSED) {\n      // sparse bits need a bit more metadata\n      entry.numDocsWithValue = meta.readVLong();\n      final int blockShift = meta.readVInt();\n      entry.monotonicMeta = DirectMonotonicReader.loadMeta(meta, entry.numDocsWithValue, blockShift);\n      ramBytesUsed.addAndGet(entry.monotonicMeta.ramBytesUsed());\n      directAddressesMeta.put(info.name, entry.monotonicMeta);\n    }\n    entry.offset = meta.readLong();\n    entry.count = meta.readVLong();\n    switch(entry.format) {\n      case CONST_COMPRESSED:\n        entry.minValue = meta.readLong();\n        if (entry.count > Integer.MAX_VALUE) {\n          // currently just a limitation e.g. of bits interface and so on.\n          throw new CorruptIndexException(\"illegal CONST_COMPRESSED count: \" + entry.count, meta);\n        }\n        break;\n      case GCD_COMPRESSED:\n        entry.minValue = meta.readLong();\n        entry.gcd = meta.readLong();\n        entry.bitsPerValue = meta.readVInt();\n        break;\n      case TABLE_COMPRESSED:\n        final int uniqueValues = meta.readVInt();\n        if (uniqueValues > 256) {\n          throw new CorruptIndexException(\"TABLE_COMPRESSED cannot have more than 256 distinct values, got=\" + uniqueValues, meta);\n        }\n        entry.table = new long[uniqueValues];\n        for (int i = 0; i < uniqueValues; ++i) {\n          entry.table[i] = meta.readLong();\n        }\n        ramBytesUsed.addAndGet(RamUsageEstimator.sizeOf(entry.table));\n        entry.bitsPerValue = meta.readVInt();\n        break;\n      case DELTA_COMPRESSED:\n        entry.minValue = meta.readLong();\n        entry.bitsPerValue = meta.readVInt();\n        break;\n      case MONOTONIC_COMPRESSED:\n        final int blockShift = meta.readVInt();\n        entry.monotonicMeta = DirectMonotonicReader.loadMeta(meta, maxDoc + 1, blockShift);\n        ramBytesUsed.addAndGet(entry.monotonicMeta.ramBytesUsed());\n        directAddressesMeta.put(info.name, entry.monotonicMeta);\n        break;\n      case SPARSE_COMPRESSED:\n        final byte numberType = meta.readByte();\n        switch (numberType) {\n          case 0:\n            entry.numberType = NumberType.VALUE;\n            break;\n          case 1:\n            entry.numberType = NumberType.ORDINAL;\n            break;\n          default:\n            throw new CorruptIndexException(\"Number type can only be 0 or 1, got=\" + numberType, meta);\n        }\n\n        // now read the numeric entry for non-missing values\n        final int fieldNumber = meta.readVInt();\n        if (fieldNumber != info.number) {\n          throw new CorruptIndexException(\"Field numbers mistmatch: \" + fieldNumber + \" != \" + info.number, meta);\n        }\n        final int dvFormat = meta.readByte();\n        if (dvFormat != NUMERIC) {\n          throw new CorruptIndexException(\"Formats mistmatch: \" + dvFormat + \" != \" + NUMERIC, meta);\n        }\n        entry.nonMissingValues = readNumericEntry(info, meta);\n        break;\n      default:\n        throw new CorruptIndexException(\"Unknown format: \" + entry.format + \", input=\", meta);\n    }\n    entry.endOffset = meta.readLong();\n    return entry;\n  }\n\n","sourceOld":"  private NumericEntry readNumericEntry(FieldInfo info, IndexInput meta) throws IOException {\n    NumericEntry entry = new NumericEntry();\n    entry.format = meta.readVInt();\n    entry.missingOffset = meta.readLong();\n    if (entry.format == SPARSE_COMPRESSED) {\n      // sparse bits need a bit more metadata\n      entry.numDocsWithValue = meta.readVLong();\n      final int blockShift = meta.readVInt();\n      entry.monotonicMeta = DirectMonotonicReader.loadMeta(meta, entry.numDocsWithValue, blockShift);\n      ramBytesUsed.addAndGet(entry.monotonicMeta.ramBytesUsed());\n      directAddressesMeta.put(info.name, entry.monotonicMeta);\n    }\n    entry.offset = meta.readLong();\n    entry.count = meta.readVLong();\n    switch(entry.format) {\n      case CONST_COMPRESSED:\n        entry.minValue = meta.readLong();\n        if (entry.count > Integer.MAX_VALUE) {\n          // currently just a limitation e.g. of bits interface and so on.\n          throw new CorruptIndexException(\"illegal CONST_COMPRESSED count: \" + entry.count, meta);\n        }\n        break;\n      case GCD_COMPRESSED:\n        entry.minValue = meta.readLong();\n        entry.gcd = meta.readLong();\n        entry.bitsPerValue = meta.readVInt();\n        break;\n      case TABLE_COMPRESSED:\n        final int uniqueValues = meta.readVInt();\n        if (uniqueValues > 256) {\n          throw new CorruptIndexException(\"TABLE_COMPRESSED cannot have more than 256 distinct values, got=\" + uniqueValues, meta);\n        }\n        entry.table = new long[uniqueValues];\n        for (int i = 0; i < uniqueValues; ++i) {\n          entry.table[i] = meta.readLong();\n        }\n        ramBytesUsed.addAndGet(RamUsageEstimator.sizeOf(entry.table));\n        entry.bitsPerValue = meta.readVInt();\n        break;\n      case DELTA_COMPRESSED:\n        entry.minValue = meta.readLong();\n        entry.bitsPerValue = meta.readVInt();\n        break;\n      case MONOTONIC_COMPRESSED:\n        final int blockShift = meta.readVInt();\n        entry.monotonicMeta = DirectMonotonicReader.loadMeta(meta, maxDoc + 1, blockShift);\n        ramBytesUsed.addAndGet(entry.monotonicMeta.ramBytesUsed());\n        directAddressesMeta.put(info.name, entry.monotonicMeta);\n        break;\n      case SPARSE_COMPRESSED:\n        final byte numberType = meta.readByte();\n        switch (numberType) {\n          case 0:\n            entry.numberType = NumberType.VALUE;\n            break;\n          case 1:\n            entry.numberType = NumberType.ORDINAL;\n            break;\n          default:\n            throw new CorruptIndexException(\"Number type can only be 0 or 1, got=\" + numberType, meta);\n        }\n\n        // now read the numeric entry for non-missing values\n        final int fieldNumber = meta.readVInt();\n        if (fieldNumber != info.number) {\n          throw new CorruptIndexException(\"Field numbers mistmatch: \" + fieldNumber + \" != \" + info.number, meta);\n        }\n        final int dvFormat = meta.readByte();\n        if (dvFormat != NUMERIC) {\n          throw new CorruptIndexException(\"Formats mistmatch: \" + dvFormat + \" != \" + NUMERIC, meta);\n        }\n        entry.nonMissingValues = readNumericEntry(info, meta);\n        break;\n      default:\n        throw new CorruptIndexException(\"Unknown format: \" + entry.format + \", input=\", meta);\n    }\n    entry.endOffset = meta.readLong();\n    return entry;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":1,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene54/Lucene54DocValuesProducer#readNumericEntry(FieldInfo,IndexInput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene54/Lucene54DocValuesProducer#readNumericEntry(FieldInfo,IndexInput).mjava","sourceNew":"  private NumericEntry readNumericEntry(FieldInfo info, IndexInput meta) throws IOException {\n    NumericEntry entry = new NumericEntry();\n    entry.format = meta.readVInt();\n    entry.missingOffset = meta.readLong();\n    if (entry.format == SPARSE_COMPRESSED) {\n      // sparse bits need a bit more metadata\n      entry.numDocsWithValue = meta.readVLong();\n      final int blockShift = meta.readVInt();\n      entry.monotonicMeta = DirectMonotonicReader.loadMeta(meta, entry.numDocsWithValue, blockShift);\n      ramBytesUsed.addAndGet(entry.monotonicMeta.ramBytesUsed());\n      directAddressesMeta.put(info.name, entry.monotonicMeta);\n    }\n    entry.offset = meta.readLong();\n    entry.count = meta.readVLong();\n    switch(entry.format) {\n      case CONST_COMPRESSED:\n        entry.minValue = meta.readLong();\n        if (entry.count > Integer.MAX_VALUE) {\n          // currently just a limitation e.g. of bits interface and so on.\n          throw new CorruptIndexException(\"illegal CONST_COMPRESSED count: \" + entry.count, meta);\n        }\n        break;\n      case GCD_COMPRESSED:\n        entry.minValue = meta.readLong();\n        entry.gcd = meta.readLong();\n        entry.bitsPerValue = meta.readVInt();\n        break;\n      case TABLE_COMPRESSED:\n        final int uniqueValues = meta.readVInt();\n        if (uniqueValues > 256) {\n          throw new CorruptIndexException(\"TABLE_COMPRESSED cannot have more than 256 distinct values, got=\" + uniqueValues, meta);\n        }\n        entry.table = new long[uniqueValues];\n        for (int i = 0; i < uniqueValues; ++i) {\n          entry.table[i] = meta.readLong();\n        }\n        ramBytesUsed.addAndGet(RamUsageEstimator.sizeOf(entry.table));\n        entry.bitsPerValue = meta.readVInt();\n        break;\n      case DELTA_COMPRESSED:\n        entry.minValue = meta.readLong();\n        entry.bitsPerValue = meta.readVInt();\n        break;\n      case MONOTONIC_COMPRESSED:\n        final int blockShift = meta.readVInt();\n        entry.monotonicMeta = DirectMonotonicReader.loadMeta(meta, maxDoc + 1, blockShift);\n        ramBytesUsed.addAndGet(entry.monotonicMeta.ramBytesUsed());\n        directAddressesMeta.put(info.name, entry.monotonicMeta);\n        break;\n      case SPARSE_COMPRESSED:\n        final byte numberType = meta.readByte();\n        switch (numberType) {\n          case 0:\n            entry.numberType = NumberType.VALUE;\n            break;\n          case 1:\n            entry.numberType = NumberType.ORDINAL;\n            break;\n          default:\n            throw new CorruptIndexException(\"Number type can only be 0 or 1, got=\" + numberType, meta);\n        }\n\n        // now read the numeric entry for non-missing values\n        final int fieldNumber = meta.readVInt();\n        if (fieldNumber != info.number) {\n          throw new CorruptIndexException(\"Field numbers mistmatch: \" + fieldNumber + \" != \" + info.number, meta);\n        }\n        final int dvFormat = meta.readByte();\n        if (dvFormat != NUMERIC) {\n          throw new CorruptIndexException(\"Formats mistmatch: \" + dvFormat + \" != \" + NUMERIC, meta);\n        }\n        entry.nonMissingValues = readNumericEntry(info, meta);\n        break;\n      default:\n        throw new CorruptIndexException(\"Unknown format: \" + entry.format + \", input=\", meta);\n    }\n    entry.endOffset = meta.readLong();\n    return entry;\n  }\n\n","sourceOld":"  private NumericEntry readNumericEntry(FieldInfo info, IndexInput meta) throws IOException {\n    NumericEntry entry = new NumericEntry();\n    entry.format = meta.readVInt();\n    entry.missingOffset = meta.readLong();\n    if (entry.format == SPARSE_COMPRESSED) {\n      // sparse bits need a bit more metadata\n      entry.numDocsWithValue = meta.readVLong();\n      final int blockShift = meta.readVInt();\n      entry.monotonicMeta = DirectMonotonicReader.loadMeta(meta, entry.numDocsWithValue, blockShift);\n      ramBytesUsed.addAndGet(entry.monotonicMeta.ramBytesUsed());\n      directAddressesMeta.put(info.name, entry.monotonicMeta);\n    }\n    entry.offset = meta.readLong();\n    entry.count = meta.readVLong();\n    switch(entry.format) {\n      case CONST_COMPRESSED:\n        entry.minValue = meta.readLong();\n        if (entry.count > Integer.MAX_VALUE) {\n          // currently just a limitation e.g. of bits interface and so on.\n          throw new CorruptIndexException(\"illegal CONST_COMPRESSED count: \" + entry.count, meta);\n        }\n        break;\n      case GCD_COMPRESSED:\n        entry.minValue = meta.readLong();\n        entry.gcd = meta.readLong();\n        entry.bitsPerValue = meta.readVInt();\n        break;\n      case TABLE_COMPRESSED:\n        final int uniqueValues = meta.readVInt();\n        if (uniqueValues > 256) {\n          throw new CorruptIndexException(\"TABLE_COMPRESSED cannot have more than 256 distinct values, got=\" + uniqueValues, meta);\n        }\n        entry.table = new long[uniqueValues];\n        for (int i = 0; i < uniqueValues; ++i) {\n          entry.table[i] = meta.readLong();\n        }\n        ramBytesUsed.addAndGet(RamUsageEstimator.sizeOf(entry.table));\n        entry.bitsPerValue = meta.readVInt();\n        break;\n      case DELTA_COMPRESSED:\n        entry.minValue = meta.readLong();\n        entry.bitsPerValue = meta.readVInt();\n        break;\n      case MONOTONIC_COMPRESSED:\n        final int blockShift = meta.readVInt();\n        entry.monotonicMeta = DirectMonotonicReader.loadMeta(meta, maxDoc + 1, blockShift);\n        ramBytesUsed.addAndGet(entry.monotonicMeta.ramBytesUsed());\n        directAddressesMeta.put(info.name, entry.monotonicMeta);\n        break;\n      case SPARSE_COMPRESSED:\n        final byte numberType = meta.readByte();\n        switch (numberType) {\n          case 0:\n            entry.numberType = NumberType.VALUE;\n            break;\n          case 1:\n            entry.numberType = NumberType.ORDINAL;\n            break;\n          default:\n            throw new CorruptIndexException(\"Number type can only be 0 or 1, got=\" + numberType, meta);\n        }\n\n        // now read the numeric entry for non-missing values\n        final int fieldNumber = meta.readVInt();\n        if (fieldNumber != info.number) {\n          throw new CorruptIndexException(\"Field numbers mistmatch: \" + fieldNumber + \" != \" + info.number, meta);\n        }\n        final int dvFormat = meta.readByte();\n        if (dvFormat != NUMERIC) {\n          throw new CorruptIndexException(\"Formats mistmatch: \" + dvFormat + \" != \" + NUMERIC, meta);\n        }\n        entry.nonMissingValues = readNumericEntry(info, meta);\n        break;\n      default:\n        throw new CorruptIndexException(\"Unknown format: \" + entry.format + \", input=\", meta);\n    }\n    entry.endOffset = meta.readLong();\n    return entry;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85b9829d27224bda451a373a47f081afb1c664b8","date":1498846708,"type":4,"author":"Anshum Gupta","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene54/Lucene54DocValuesProducer#readNumericEntry(FieldInfo,IndexInput).mjava","sourceNew":null,"sourceOld":"  private NumericEntry readNumericEntry(FieldInfo info, IndexInput meta) throws IOException {\n    NumericEntry entry = new NumericEntry();\n    entry.format = meta.readVInt();\n    entry.missingOffset = meta.readLong();\n    if (entry.format == SPARSE_COMPRESSED) {\n      // sparse bits need a bit more metadata\n      entry.numDocsWithValue = meta.readVLong();\n      final int blockShift = meta.readVInt();\n      entry.monotonicMeta = DirectMonotonicReader.loadMeta(meta, entry.numDocsWithValue, blockShift);\n      ramBytesUsed.addAndGet(entry.monotonicMeta.ramBytesUsed());\n      directAddressesMeta.put(info.name, entry.monotonicMeta);\n    }\n    entry.offset = meta.readLong();\n    entry.count = meta.readVLong();\n    switch(entry.format) {\n      case CONST_COMPRESSED:\n        entry.minValue = meta.readLong();\n        if (entry.count > Integer.MAX_VALUE) {\n          // currently just a limitation e.g. of bits interface and so on.\n          throw new CorruptIndexException(\"illegal CONST_COMPRESSED count: \" + entry.count, meta);\n        }\n        break;\n      case GCD_COMPRESSED:\n        entry.minValue = meta.readLong();\n        entry.gcd = meta.readLong();\n        entry.bitsPerValue = meta.readVInt();\n        break;\n      case TABLE_COMPRESSED:\n        final int uniqueValues = meta.readVInt();\n        if (uniqueValues > 256) {\n          throw new CorruptIndexException(\"TABLE_COMPRESSED cannot have more than 256 distinct values, got=\" + uniqueValues, meta);\n        }\n        entry.table = new long[uniqueValues];\n        for (int i = 0; i < uniqueValues; ++i) {\n          entry.table[i] = meta.readLong();\n        }\n        ramBytesUsed.addAndGet(RamUsageEstimator.sizeOf(entry.table));\n        entry.bitsPerValue = meta.readVInt();\n        break;\n      case DELTA_COMPRESSED:\n        entry.minValue = meta.readLong();\n        entry.bitsPerValue = meta.readVInt();\n        break;\n      case MONOTONIC_COMPRESSED:\n        final int blockShift = meta.readVInt();\n        entry.monotonicMeta = DirectMonotonicReader.loadMeta(meta, maxDoc + 1, blockShift);\n        ramBytesUsed.addAndGet(entry.monotonicMeta.ramBytesUsed());\n        directAddressesMeta.put(info.name, entry.monotonicMeta);\n        break;\n      case SPARSE_COMPRESSED:\n        final byte numberType = meta.readByte();\n        switch (numberType) {\n          case 0:\n            entry.numberType = NumberType.VALUE;\n            break;\n          case 1:\n            entry.numberType = NumberType.ORDINAL;\n            break;\n          default:\n            throw new CorruptIndexException(\"Number type can only be 0 or 1, got=\" + numberType, meta);\n        }\n\n        // now read the numeric entry for non-missing values\n        final int fieldNumber = meta.readVInt();\n        if (fieldNumber != info.number) {\n          throw new CorruptIndexException(\"Field numbers mistmatch: \" + fieldNumber + \" != \" + info.number, meta);\n        }\n        final int dvFormat = meta.readByte();\n        if (dvFormat != NUMERIC) {\n          throw new CorruptIndexException(\"Formats mistmatch: \" + dvFormat + \" != \" + NUMERIC, meta);\n        }\n        entry.nonMissingValues = readNumericEntry(info, meta);\n        break;\n      default:\n        throw new CorruptIndexException(\"Unknown format: \" + entry.format + \", input=\", meta);\n    }\n    entry.endOffset = meta.readLong();\n    return entry;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cc018b79379c67835b40b1259cd3dc931df60944","date":1499109112,"type":4,"author":"Anshum Gupta","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene54/Lucene54DocValuesProducer#readNumericEntry(FieldInfo,IndexInput).mjava","sourceNew":null,"sourceOld":"  private NumericEntry readNumericEntry(FieldInfo info, IndexInput meta) throws IOException {\n    NumericEntry entry = new NumericEntry();\n    entry.format = meta.readVInt();\n    entry.missingOffset = meta.readLong();\n    if (entry.format == SPARSE_COMPRESSED) {\n      // sparse bits need a bit more metadata\n      entry.numDocsWithValue = meta.readVLong();\n      final int blockShift = meta.readVInt();\n      entry.monotonicMeta = DirectMonotonicReader.loadMeta(meta, entry.numDocsWithValue, blockShift);\n      ramBytesUsed.addAndGet(entry.monotonicMeta.ramBytesUsed());\n      directAddressesMeta.put(info.name, entry.monotonicMeta);\n    }\n    entry.offset = meta.readLong();\n    entry.count = meta.readVLong();\n    switch(entry.format) {\n      case CONST_COMPRESSED:\n        entry.minValue = meta.readLong();\n        if (entry.count > Integer.MAX_VALUE) {\n          // currently just a limitation e.g. of bits interface and so on.\n          throw new CorruptIndexException(\"illegal CONST_COMPRESSED count: \" + entry.count, meta);\n        }\n        break;\n      case GCD_COMPRESSED:\n        entry.minValue = meta.readLong();\n        entry.gcd = meta.readLong();\n        entry.bitsPerValue = meta.readVInt();\n        break;\n      case TABLE_COMPRESSED:\n        final int uniqueValues = meta.readVInt();\n        if (uniqueValues > 256) {\n          throw new CorruptIndexException(\"TABLE_COMPRESSED cannot have more than 256 distinct values, got=\" + uniqueValues, meta);\n        }\n        entry.table = new long[uniqueValues];\n        for (int i = 0; i < uniqueValues; ++i) {\n          entry.table[i] = meta.readLong();\n        }\n        ramBytesUsed.addAndGet(RamUsageEstimator.sizeOf(entry.table));\n        entry.bitsPerValue = meta.readVInt();\n        break;\n      case DELTA_COMPRESSED:\n        entry.minValue = meta.readLong();\n        entry.bitsPerValue = meta.readVInt();\n        break;\n      case MONOTONIC_COMPRESSED:\n        final int blockShift = meta.readVInt();\n        entry.monotonicMeta = DirectMonotonicReader.loadMeta(meta, maxDoc + 1, blockShift);\n        ramBytesUsed.addAndGet(entry.monotonicMeta.ramBytesUsed());\n        directAddressesMeta.put(info.name, entry.monotonicMeta);\n        break;\n      case SPARSE_COMPRESSED:\n        final byte numberType = meta.readByte();\n        switch (numberType) {\n          case 0:\n            entry.numberType = NumberType.VALUE;\n            break;\n          case 1:\n            entry.numberType = NumberType.ORDINAL;\n            break;\n          default:\n            throw new CorruptIndexException(\"Number type can only be 0 or 1, got=\" + numberType, meta);\n        }\n\n        // now read the numeric entry for non-missing values\n        final int fieldNumber = meta.readVInt();\n        if (fieldNumber != info.number) {\n          throw new CorruptIndexException(\"Field numbers mistmatch: \" + fieldNumber + \" != \" + info.number, meta);\n        }\n        final int dvFormat = meta.readByte();\n        if (dvFormat != NUMERIC) {\n          throw new CorruptIndexException(\"Formats mistmatch: \" + dvFormat + \" != \" + NUMERIC, meta);\n        }\n        entry.nonMissingValues = readNumericEntry(info, meta);\n        break;\n      default:\n        throw new CorruptIndexException(\"Unknown format: \" + entry.format + \", input=\", meta);\n    }\n    entry.endOffset = meta.readLong();\n    return entry;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30c8e5574b55d57947e989443dfde611646530ee","date":1499131153,"type":4,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene54/Lucene54DocValuesProducer#readNumericEntry(FieldInfo,IndexInput).mjava","sourceNew":null,"sourceOld":"  private NumericEntry readNumericEntry(FieldInfo info, IndexInput meta) throws IOException {\n    NumericEntry entry = new NumericEntry();\n    entry.format = meta.readVInt();\n    entry.missingOffset = meta.readLong();\n    if (entry.format == SPARSE_COMPRESSED) {\n      // sparse bits need a bit more metadata\n      entry.numDocsWithValue = meta.readVLong();\n      final int blockShift = meta.readVInt();\n      entry.monotonicMeta = DirectMonotonicReader.loadMeta(meta, entry.numDocsWithValue, blockShift);\n      ramBytesUsed.addAndGet(entry.monotonicMeta.ramBytesUsed());\n      directAddressesMeta.put(info.name, entry.monotonicMeta);\n    }\n    entry.offset = meta.readLong();\n    entry.count = meta.readVLong();\n    switch(entry.format) {\n      case CONST_COMPRESSED:\n        entry.minValue = meta.readLong();\n        if (entry.count > Integer.MAX_VALUE) {\n          // currently just a limitation e.g. of bits interface and so on.\n          throw new CorruptIndexException(\"illegal CONST_COMPRESSED count: \" + entry.count, meta);\n        }\n        break;\n      case GCD_COMPRESSED:\n        entry.minValue = meta.readLong();\n        entry.gcd = meta.readLong();\n        entry.bitsPerValue = meta.readVInt();\n        break;\n      case TABLE_COMPRESSED:\n        final int uniqueValues = meta.readVInt();\n        if (uniqueValues > 256) {\n          throw new CorruptIndexException(\"TABLE_COMPRESSED cannot have more than 256 distinct values, got=\" + uniqueValues, meta);\n        }\n        entry.table = new long[uniqueValues];\n        for (int i = 0; i < uniqueValues; ++i) {\n          entry.table[i] = meta.readLong();\n        }\n        ramBytesUsed.addAndGet(RamUsageEstimator.sizeOf(entry.table));\n        entry.bitsPerValue = meta.readVInt();\n        break;\n      case DELTA_COMPRESSED:\n        entry.minValue = meta.readLong();\n        entry.bitsPerValue = meta.readVInt();\n        break;\n      case MONOTONIC_COMPRESSED:\n        final int blockShift = meta.readVInt();\n        entry.monotonicMeta = DirectMonotonicReader.loadMeta(meta, maxDoc + 1, blockShift);\n        ramBytesUsed.addAndGet(entry.monotonicMeta.ramBytesUsed());\n        directAddressesMeta.put(info.name, entry.monotonicMeta);\n        break;\n      case SPARSE_COMPRESSED:\n        final byte numberType = meta.readByte();\n        switch (numberType) {\n          case 0:\n            entry.numberType = NumberType.VALUE;\n            break;\n          case 1:\n            entry.numberType = NumberType.ORDINAL;\n            break;\n          default:\n            throw new CorruptIndexException(\"Number type can only be 0 or 1, got=\" + numberType, meta);\n        }\n\n        // now read the numeric entry for non-missing values\n        final int fieldNumber = meta.readVInt();\n        if (fieldNumber != info.number) {\n          throw new CorruptIndexException(\"Field numbers mistmatch: \" + fieldNumber + \" != \" + info.number, meta);\n        }\n        final int dvFormat = meta.readByte();\n        if (dvFormat != NUMERIC) {\n          throw new CorruptIndexException(\"Formats mistmatch: \" + dvFormat + \" != \" + NUMERIC, meta);\n        }\n        entry.nonMissingValues = readNumericEntry(info, meta);\n        break;\n      default:\n        throw new CorruptIndexException(\"Unknown format: \" + entry.format + \", input=\", meta);\n    }\n    entry.endOffset = meta.readLong();\n    return entry;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7f3090f7e0cab5b1f5acf12d21f31f00fe74a262":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cc018b79379c67835b40b1259cd3dc931df60944":["7f3090f7e0cab5b1f5acf12d21f31f00fe74a262","85b9829d27224bda451a373a47f081afb1c664b8"],"30c8e5574b55d57947e989443dfde611646530ee":["7f3090f7e0cab5b1f5acf12d21f31f00fe74a262","cc018b79379c67835b40b1259cd3dc931df60944"],"85b9829d27224bda451a373a47f081afb1c664b8":["7f3090f7e0cab5b1f5acf12d21f31f00fe74a262"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7f3090f7e0cab5b1f5acf12d21f31f00fe74a262"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cc018b79379c67835b40b1259cd3dc931df60944"]},"commit2Childs":{"7f3090f7e0cab5b1f5acf12d21f31f00fe74a262":["cc018b79379c67835b40b1259cd3dc931df60944","30c8e5574b55d57947e989443dfde611646530ee","85b9829d27224bda451a373a47f081afb1c664b8","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7f3090f7e0cab5b1f5acf12d21f31f00fe74a262","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"cc018b79379c67835b40b1259cd3dc931df60944":["30c8e5574b55d57947e989443dfde611646530ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"30c8e5574b55d57947e989443dfde611646530ee":[],"85b9829d27224bda451a373a47f081afb1c664b8":["cc018b79379c67835b40b1259cd3dc931df60944"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["30c8e5574b55d57947e989443dfde611646530ee","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}