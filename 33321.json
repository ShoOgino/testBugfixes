{"path":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellDictionary#readAffixFile(InputStream,CharsetDecoder,boolean).mjava","commits":[{"id":"74fe524b3f952dcace4fd46ad5e69b16d5090c57","date":1338527592,"type":1,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellDictionary#readAffixFile(InputStream,CharsetDecoder,boolean).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellDictionary#readAffixFile(InputStream,CharsetDecoder).mjava","sourceNew":"  /**\n   * Reads the affix file through the provided InputStream, building up the prefix and suffix maps\n   *\n   * @param affixStream InputStream to read the content of the affix file from\n   * @param decoder CharsetDecoder to decode the content of the file\n   * @throws IOException Can be thrown while reading from the InputStream\n   */\n  private void readAffixFile(InputStream affixStream, CharsetDecoder decoder, boolean strict) throws IOException, ParseException {\n    prefixes = new CharArrayMap<List<HunspellAffix>>(version, 8, ignoreCase);\n    suffixes = new CharArrayMap<List<HunspellAffix>>(version, 8, ignoreCase);\n\n    LineNumberReader reader = new LineNumberReader(new InputStreamReader(affixStream, decoder));\n    String line = null;\n    while ((line = reader.readLine()) != null) {\n      if (line.startsWith(ALIAS_KEY)) {\n        parseAlias(line);\n      } else if (line.startsWith(PREFIX_KEY)) {\n        parseAffix(prefixes, line, reader, PREFIX_CONDITION_REGEX_PATTERN, strict);\n      } else if (line.startsWith(SUFFIX_KEY)) {\n        parseAffix(suffixes, line, reader, SUFFIX_CONDITION_REGEX_PATTERN, strict);\n      } else if (line.startsWith(FLAG_KEY)) {\n        // Assume that the FLAG line comes before any prefix or suffixes\n        // Store the strategy so it can be used when parsing the dic file\n        flagParsingStrategy = getFlagParsingStrategy(line);\n      }\n    }\n    reader.close();\n  }\n\n","sourceOld":"  /**\n   * Reads the affix file through the provided InputStream, building up the prefix and suffix maps\n   *\n   * @param affixStream InputStream to read the content of the affix file from\n   * @param decoder CharsetDecoder to decode the content of the file\n   * @throws IOException Can be thrown while reading from the InputStream\n   */\n  private void readAffixFile(InputStream affixStream, CharsetDecoder decoder) throws IOException {\n    prefixes = new CharArrayMap<List<HunspellAffix>>(version, 8, ignoreCase);\n    suffixes = new CharArrayMap<List<HunspellAffix>>(version, 8, ignoreCase);\n    \n    BufferedReader reader = new BufferedReader(new InputStreamReader(affixStream, decoder));\n    String line = null;\n    while ((line = reader.readLine()) != null) {\n      if (line.startsWith(ALIAS_KEY)) {\n        parseAlias(line);\n      } else if (line.startsWith(PREFIX_KEY)) {\n        parseAffix(prefixes, line, reader, PREFIX_CONDITION_REGEX_PATTERN);\n      } else if (line.startsWith(SUFFIX_KEY)) {\n        parseAffix(suffixes, line, reader, SUFFIX_CONDITION_REGEX_PATTERN);\n      } else if (line.startsWith(FLAG_KEY)) {\n        // Assume that the FLAG line comes before any prefix or suffixes\n        // Store the strategy so it can be used when parsing the dic file\n        flagParsingStrategy = getFlagParsingStrategy(line);\n      }\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"558d0b2765fb22e5c20304b1e85c6cc7b9bba359","date":1342503992,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellDictionary#readAffixFile(InputStream,CharsetDecoder,boolean).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellDictionary#readAffixFile(InputStream,CharsetDecoder,boolean).mjava","sourceNew":"  /**\n   * Reads the affix file through the provided InputStream, building up the prefix and suffix maps\n   *\n   * @param affixStream InputStream to read the content of the affix file from\n   * @param decoder CharsetDecoder to decode the content of the file\n   * @throws IOException Can be thrown while reading from the InputStream\n   */\n  private void readAffixFile(InputStream affixStream, CharsetDecoder decoder, boolean strict) throws IOException, ParseException {\n    prefixes = new CharArrayMap<List<HunspellAffix>>(version, 8, ignoreCase);\n    suffixes = new CharArrayMap<List<HunspellAffix>>(version, 8, ignoreCase);\n\n    LineNumberReader reader = new LineNumberReader(new InputStreamReader(affixStream, decoder));\n    String line = null;\n    while ((line = reader.readLine()) != null) {\n      if (line.startsWith(ALIAS_KEY)) {\n        parseAlias(line);\n      } else if (line.startsWith(PREFIX_KEY)) {\n        parseAffix(prefixes, line, reader, PREFIX_CONDITION_REGEX_PATTERN, strict);\n      } else if (line.startsWith(SUFFIX_KEY)) {\n        parseAffix(suffixes, line, reader, SUFFIX_CONDITION_REGEX_PATTERN, strict);\n      } else if (line.startsWith(FLAG_KEY)) {\n        // Assume that the FLAG line comes before any prefix or suffixes\n        // Store the strategy so it can be used when parsing the dic file\n        flagParsingStrategy = getFlagParsingStrategy(line);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Reads the affix file through the provided InputStream, building up the prefix and suffix maps\n   *\n   * @param affixStream InputStream to read the content of the affix file from\n   * @param decoder CharsetDecoder to decode the content of the file\n   * @throws IOException Can be thrown while reading from the InputStream\n   */\n  private void readAffixFile(InputStream affixStream, CharsetDecoder decoder, boolean strict) throws IOException, ParseException {\n    prefixes = new CharArrayMap<List<HunspellAffix>>(version, 8, ignoreCase);\n    suffixes = new CharArrayMap<List<HunspellAffix>>(version, 8, ignoreCase);\n\n    LineNumberReader reader = new LineNumberReader(new InputStreamReader(affixStream, decoder));\n    String line = null;\n    while ((line = reader.readLine()) != null) {\n      if (line.startsWith(ALIAS_KEY)) {\n        parseAlias(line);\n      } else if (line.startsWith(PREFIX_KEY)) {\n        parseAffix(prefixes, line, reader, PREFIX_CONDITION_REGEX_PATTERN, strict);\n      } else if (line.startsWith(SUFFIX_KEY)) {\n        parseAffix(suffixes, line, reader, SUFFIX_CONDITION_REGEX_PATTERN, strict);\n      } else if (line.startsWith(FLAG_KEY)) {\n        // Assume that the FLAG line comes before any prefix or suffixes\n        // Store the strategy so it can be used when parsing the dic file\n        flagParsingStrategy = getFlagParsingStrategy(line);\n      }\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellDictionary#readAffixFile(InputStream,CharsetDecoder,boolean).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellDictionary#readAffixFile(InputStream,CharsetDecoder,boolean).mjava","sourceNew":"  /**\n   * Reads the affix file through the provided InputStream, building up the prefix and suffix maps\n   *\n   * @param affixStream InputStream to read the content of the affix file from\n   * @param decoder CharsetDecoder to decode the content of the file\n   * @throws IOException Can be thrown while reading from the InputStream\n   */\n  private void readAffixFile(InputStream affixStream, CharsetDecoder decoder, boolean strict) throws IOException, ParseException {\n    prefixes = new CharArrayMap<List<HunspellAffix>>(version, 8, ignoreCase);\n    suffixes = new CharArrayMap<List<HunspellAffix>>(version, 8, ignoreCase);\n\n    LineNumberReader reader = new LineNumberReader(new InputStreamReader(affixStream, decoder));\n    String line = null;\n    while ((line = reader.readLine()) != null) {\n      if (line.startsWith(ALIAS_KEY)) {\n        parseAlias(line);\n      } else if (line.startsWith(PREFIX_KEY)) {\n        parseAffix(prefixes, line, reader, PREFIX_CONDITION_REGEX_PATTERN, strict);\n      } else if (line.startsWith(SUFFIX_KEY)) {\n        parseAffix(suffixes, line, reader, SUFFIX_CONDITION_REGEX_PATTERN, strict);\n      } else if (line.startsWith(FLAG_KEY)) {\n        // Assume that the FLAG line comes before any prefix or suffixes\n        // Store the strategy so it can be used when parsing the dic file\n        flagParsingStrategy = getFlagParsingStrategy(line);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Reads the affix file through the provided InputStream, building up the prefix and suffix maps\n   *\n   * @param affixStream InputStream to read the content of the affix file from\n   * @param decoder CharsetDecoder to decode the content of the file\n   * @throws IOException Can be thrown while reading from the InputStream\n   */\n  private void readAffixFile(InputStream affixStream, CharsetDecoder decoder, boolean strict) throws IOException, ParseException {\n    prefixes = new CharArrayMap<List<HunspellAffix>>(version, 8, ignoreCase);\n    suffixes = new CharArrayMap<List<HunspellAffix>>(version, 8, ignoreCase);\n\n    LineNumberReader reader = new LineNumberReader(new InputStreamReader(affixStream, decoder));\n    String line = null;\n    while ((line = reader.readLine()) != null) {\n      if (line.startsWith(ALIAS_KEY)) {\n        parseAlias(line);\n      } else if (line.startsWith(PREFIX_KEY)) {\n        parseAffix(prefixes, line, reader, PREFIX_CONDITION_REGEX_PATTERN, strict);\n      } else if (line.startsWith(SUFFIX_KEY)) {\n        parseAffix(suffixes, line, reader, SUFFIX_CONDITION_REGEX_PATTERN, strict);\n      } else if (line.startsWith(FLAG_KEY)) {\n        // Assume that the FLAG line comes before any prefix or suffixes\n        // Store the strategy so it can be used when parsing the dic file\n        flagParsingStrategy = getFlagParsingStrategy(line);\n      }\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellDictionary#readAffixFile(InputStream,CharsetDecoder,boolean).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellDictionary#readAffixFile(InputStream,CharsetDecoder,boolean).mjava","sourceNew":"  /**\n   * Reads the affix file through the provided InputStream, building up the prefix and suffix maps\n   *\n   * @param affixStream InputStream to read the content of the affix file from\n   * @param decoder CharsetDecoder to decode the content of the file\n   * @throws IOException Can be thrown while reading from the InputStream\n   */\n  private void readAffixFile(InputStream affixStream, CharsetDecoder decoder, boolean strict) throws IOException, ParseException {\n    prefixes = new CharArrayMap<List<HunspellAffix>>(version, 8, ignoreCase);\n    suffixes = new CharArrayMap<List<HunspellAffix>>(version, 8, ignoreCase);\n\n    LineNumberReader reader = new LineNumberReader(new InputStreamReader(affixStream, decoder));\n    String line = null;\n    while ((line = reader.readLine()) != null) {\n      if (line.startsWith(ALIAS_KEY)) {\n        parseAlias(line);\n      } else if (line.startsWith(PREFIX_KEY)) {\n        parseAffix(prefixes, line, reader, PREFIX_CONDITION_REGEX_PATTERN, strict);\n      } else if (line.startsWith(SUFFIX_KEY)) {\n        parseAffix(suffixes, line, reader, SUFFIX_CONDITION_REGEX_PATTERN, strict);\n      } else if (line.startsWith(FLAG_KEY)) {\n        // Assume that the FLAG line comes before any prefix or suffixes\n        // Store the strategy so it can be used when parsing the dic file\n        flagParsingStrategy = getFlagParsingStrategy(line);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Reads the affix file through the provided InputStream, building up the prefix and suffix maps\n   *\n   * @param affixStream InputStream to read the content of the affix file from\n   * @param decoder CharsetDecoder to decode the content of the file\n   * @throws IOException Can be thrown while reading from the InputStream\n   */\n  private void readAffixFile(InputStream affixStream, CharsetDecoder decoder, boolean strict) throws IOException, ParseException {\n    prefixes = new CharArrayMap<List<HunspellAffix>>(version, 8, ignoreCase);\n    suffixes = new CharArrayMap<List<HunspellAffix>>(version, 8, ignoreCase);\n\n    LineNumberReader reader = new LineNumberReader(new InputStreamReader(affixStream, decoder));\n    String line = null;\n    while ((line = reader.readLine()) != null) {\n      if (line.startsWith(ALIAS_KEY)) {\n        parseAlias(line);\n      } else if (line.startsWith(PREFIX_KEY)) {\n        parseAffix(prefixes, line, reader, PREFIX_CONDITION_REGEX_PATTERN, strict);\n      } else if (line.startsWith(SUFFIX_KEY)) {\n        parseAffix(suffixes, line, reader, SUFFIX_CONDITION_REGEX_PATTERN, strict);\n      } else if (line.startsWith(FLAG_KEY)) {\n        // Assume that the FLAG line comes before any prefix or suffixes\n        // Store the strategy so it can be used when parsing the dic file\n        flagParsingStrategy = getFlagParsingStrategy(line);\n      }\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dc3f094cafa4a87b4066e1d6710fa4e6afe6260e","date":1393532367,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellDictionary#readAffixFile(InputStream,CharsetDecoder,boolean).mjava","sourceNew":null,"sourceOld":"  /**\n   * Reads the affix file through the provided InputStream, building up the prefix and suffix maps\n   *\n   * @param affixStream InputStream to read the content of the affix file from\n   * @param decoder CharsetDecoder to decode the content of the file\n   * @throws IOException Can be thrown while reading from the InputStream\n   */\n  private void readAffixFile(InputStream affixStream, CharsetDecoder decoder, boolean strict) throws IOException, ParseException {\n    prefixes = new CharArrayMap<List<HunspellAffix>>(version, 8, ignoreCase);\n    suffixes = new CharArrayMap<List<HunspellAffix>>(version, 8, ignoreCase);\n\n    LineNumberReader reader = new LineNumberReader(new InputStreamReader(affixStream, decoder));\n    String line = null;\n    while ((line = reader.readLine()) != null) {\n      if (line.startsWith(ALIAS_KEY)) {\n        parseAlias(line);\n      } else if (line.startsWith(PREFIX_KEY)) {\n        parseAffix(prefixes, line, reader, PREFIX_CONDITION_REGEX_PATTERN, strict);\n      } else if (line.startsWith(SUFFIX_KEY)) {\n        parseAffix(suffixes, line, reader, SUFFIX_CONDITION_REGEX_PATTERN, strict);\n      } else if (line.startsWith(FLAG_KEY)) {\n        // Assume that the FLAG line comes before any prefix or suffixes\n        // Store the strategy so it can be used when parsing the dic file\n        flagParsingStrategy = getFlagParsingStrategy(line);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ba791bce8103c79e38f957e9c5a53a75871bd918","date":1393539206,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Dictionary#readAffixFile(InputStream,CharsetDecoder).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellDictionary#readAffixFile(InputStream,CharsetDecoder,boolean).mjava","sourceNew":"  /**\n   * Reads the affix file through the provided InputStream, building up the prefix and suffix maps\n   *\n   * @param affixStream InputStream to read the content of the affix file from\n   * @param decoder CharsetDecoder to decode the content of the file\n   * @throws IOException Can be thrown while reading from the InputStream\n   */\n  private void readAffixFile(InputStream affixStream, CharsetDecoder decoder) throws IOException, ParseException {\n    TreeMap<String, List<Character>> prefixes = new TreeMap<>();\n    TreeMap<String, List<Character>> suffixes = new TreeMap<>();\n    Map<String,Integer> seenPatterns = new HashMap<>();\n\n    LineNumberReader reader = new LineNumberReader(new InputStreamReader(affixStream, decoder));\n    String line = null;\n    while ((line = reader.readLine()) != null) {\n      if (line.startsWith(ALIAS_KEY)) {\n        parseAlias(line);\n      } else if (line.startsWith(PREFIX_KEY)) {\n        parseAffix(prefixes, line, reader, PREFIX_CONDITION_REGEX_PATTERN, seenPatterns);\n      } else if (line.startsWith(SUFFIX_KEY)) {\n        parseAffix(suffixes, line, reader, SUFFIX_CONDITION_REGEX_PATTERN, seenPatterns);\n      } else if (line.startsWith(FLAG_KEY)) {\n        // Assume that the FLAG line comes before any prefix or suffixes\n        // Store the strategy so it can be used when parsing the dic file\n        flagParsingStrategy = getFlagParsingStrategy(line);\n      }\n    }\n    \n    this.prefixes = affixFST(prefixes);\n    this.suffixes = affixFST(suffixes);\n  }\n\n","sourceOld":"  /**\n   * Reads the affix file through the provided InputStream, building up the prefix and suffix maps\n   *\n   * @param affixStream InputStream to read the content of the affix file from\n   * @param decoder CharsetDecoder to decode the content of the file\n   * @throws IOException Can be thrown while reading from the InputStream\n   */\n  private void readAffixFile(InputStream affixStream, CharsetDecoder decoder, boolean strict) throws IOException, ParseException {\n    prefixes = new CharArrayMap<List<HunspellAffix>>(version, 8, ignoreCase);\n    suffixes = new CharArrayMap<List<HunspellAffix>>(version, 8, ignoreCase);\n\n    LineNumberReader reader = new LineNumberReader(new InputStreamReader(affixStream, decoder));\n    String line = null;\n    while ((line = reader.readLine()) != null) {\n      if (line.startsWith(ALIAS_KEY)) {\n        parseAlias(line);\n      } else if (line.startsWith(PREFIX_KEY)) {\n        parseAffix(prefixes, line, reader, PREFIX_CONDITION_REGEX_PATTERN, strict);\n      } else if (line.startsWith(SUFFIX_KEY)) {\n        parseAffix(suffixes, line, reader, SUFFIX_CONDITION_REGEX_PATTERN, strict);\n      } else if (line.startsWith(FLAG_KEY)) {\n        // Assume that the FLAG line comes before any prefix or suffixes\n        // Store the strategy so it can be used when parsing the dic file\n        flagParsingStrategy = getFlagParsingStrategy(line);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"aba371508186796cc6151d8223a5b4e16d02e26e":["74fe524b3f952dcace4fd46ad5e69b16d5090c57","558d0b2765fb22e5c20304b1e85c6cc7b9bba359"],"ba791bce8103c79e38f957e9c5a53a75871bd918":["558d0b2765fb22e5c20304b1e85c6cc7b9bba359","dc3f094cafa4a87b4066e1d6710fa4e6afe6260e"],"dc3f094cafa4a87b4066e1d6710fa4e6afe6260e":["558d0b2765fb22e5c20304b1e85c6cc7b9bba359"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["74fe524b3f952dcace4fd46ad5e69b16d5090c57","558d0b2765fb22e5c20304b1e85c6cc7b9bba359"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"558d0b2765fb22e5c20304b1e85c6cc7b9bba359":["74fe524b3f952dcace4fd46ad5e69b16d5090c57"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ba791bce8103c79e38f957e9c5a53a75871bd918"],"74fe524b3f952dcace4fd46ad5e69b16d5090c57":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"aba371508186796cc6151d8223a5b4e16d02e26e":[],"ba791bce8103c79e38f957e9c5a53a75871bd918":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"dc3f094cafa4a87b4066e1d6710fa4e6afe6260e":["ba791bce8103c79e38f957e9c5a53a75871bd918"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["74fe524b3f952dcace4fd46ad5e69b16d5090c57"],"558d0b2765fb22e5c20304b1e85c6cc7b9bba359":["aba371508186796cc6151d8223a5b4e16d02e26e","ba791bce8103c79e38f957e9c5a53a75871bd918","dc3f094cafa4a87b4066e1d6710fa4e6afe6260e","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"74fe524b3f952dcace4fd46ad5e69b16d5090c57":["aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424","558d0b2765fb22e5c20304b1e85c6cc7b9bba359"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}