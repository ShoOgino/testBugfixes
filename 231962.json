{"path":"contrib/gdata-server/src/java/org/apache/lucene/gdata/storage/lucenestorage/StorageCoreController#close().mjava","commits":[{"id":"5d43e216d757e2276d180eba8a192e300c4bfadb","date":1149717385,"type":0,"author":"Doug Cutting","isMerge":false,"pathNew":"contrib/gdata-server/src/java/org/apache/lucene/gdata/storage/lucenestorage/StorageCoreController#close().mjava","pathOld":"/dev/null","sourceNew":"    private void close() throws IOException{ \n        synchronized (this.storageControllerLock) { \n        if(LOG.isInfoEnabled()) \n            LOG.info(\"StorageController has been closed -- server is shutting down -- release all resources\"); \n        if(this.storageQuery != null) \n            this.storageQuery.decrementRef(); \n        coreController = null; \n        this.modifier.close(); \n        //TODO make sure all resources will be released \n        } \n    } \n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"52754a40a1550056d5637c8992b4076b5ed77328","date":1151345693,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"contrib/gdata-server/src/java/org/apache/lucene/gdata/storage/lucenestorage/StorageCoreController#close().mjava","pathOld":"contrib/gdata-server/src/java/org/apache/lucene/gdata/storage/lucenestorage/StorageCoreController#close().mjava","sourceNew":"    private void close() throws IOException {\n        synchronized (this.storageControllerLock) {\n            if (LOG.isInfoEnabled())\n                LOG\n                        .info(\"StorageController has been closed -- server is shutting down -- release all resources\");\n            if (this.storageQuery != null)\n                this.storageQuery.decrementRef();\n            this.modifier.close();\n            // TODO make sure all resources will be released\n        }\n    }\n\n","sourceOld":"    private void close() throws IOException{ \n        synchronized (this.storageControllerLock) { \n        if(LOG.isInfoEnabled()) \n            LOG.info(\"StorageController has been closed -- server is shutting down -- release all resources\"); \n        if(this.storageQuery != null) \n            this.storageQuery.decrementRef(); \n        coreController = null; \n        this.modifier.close(); \n        //TODO make sure all resources will be released \n        } \n    } \n\n","bugFix":null,"bugIntro":["02a7f04a7293ea604e17892ba0bded7341adf3af"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"02a7f04a7293ea604e17892ba0bded7341adf3af","date":1151695892,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"contrib/gdata-server/src/java/org/apache/lucene/gdata/storage/lucenestorage/StorageCoreController#close().mjava","pathOld":"contrib/gdata-server/src/java/org/apache/lucene/gdata/storage/lucenestorage/StorageCoreController#close().mjava","sourceNew":"    private void close() throws IOException {\n    \tif(this.isClosed.get())\n    \t\tthrow new IllegalStateException(\"StorageController is already closed -- server is shutting down\");\n    \t\n        this.storageControllerLock.lock();\n        try{\n        \tif(this.isClosed.get())\n        \t\tthrow new IllegalStateException(\"StorageController is already closed -- server is shutting down\");\n        \tthis.isClosed.set(true);\n        \twhile(this.storageControllerLock.getQueueLength()>0)\n        \t\ttry{\n        \t\tthis.closeCondition.await();\n        \t\t}catch (Exception e) {\n\t\t\t\t\t//\n\t\t\t\t}\n            if (LOG.isInfoEnabled())\n                LOG.info(\"StorageController has been closed -- server is shutting down -- release all resources\");\n            if (this.storageQuery != null)\n                this.storageQuery.decrementRef();\n            this.modifier.close();\n\t\t}finally{\n        \tthis.storageControllerLock.unlock();\n        }\n    }\n\n","sourceOld":"    private void close() throws IOException {\n        synchronized (this.storageControllerLock) {\n            if (LOG.isInfoEnabled())\n                LOG\n                        .info(\"StorageController has been closed -- server is shutting down -- release all resources\");\n            if (this.storageQuery != null)\n                this.storageQuery.decrementRef();\n            this.modifier.close();\n            // TODO make sure all resources will be released\n        }\n    }\n\n","bugFix":["52754a40a1550056d5637c8992b4076b5ed77328"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"303ca293666286b4ae2b0b4dbf10d3bf60ed727c","date":1153866181,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"contrib/gdata-server/src/java/org/apache/lucene/gdata/storage/lucenestorage/StorageCoreController#close().mjava","pathOld":"contrib/gdata-server/src/java/org/apache/lucene/gdata/storage/lucenestorage/StorageCoreController#close().mjava","sourceNew":"    private void close() throws IOException {\n    \tif(this.isClosed.get())\n    \t\tthrow new IllegalStateException(\"StorageController is already closed -- server is shutting down\");\n    \t\n        this.storageControllerLock.lock();\n        try{\n        \tif(this.isClosed.get())\n        \t\tthrow new IllegalStateException(\"StorageController is already closed -- server is shutting down\");\n        \tthis.isClosed.set(true);\n        \twhile(this.storageControllerLock.getQueueLength()>0)\n        \t\ttry{\n        \t\tthis.closeCondition.await();\n        \t\t}catch (Exception e) {\n\t\t\t\t\t//\n\t\t\t\t}\n            if (LOG.isInfoEnabled())\n                LOG.info(\"StorageController has been closed -- server is shutting down -- release all resources\");\n            if (this.storageQuery != null)\n                this.storageQuery.decrementRef();\n            if(this.recoverController != null)\n                this.recoverController.destroy();\n            this.storageLock.close();\n            this.modifier.close();\n            this.idGenerator.stopIDGenerator();\n\t\t}finally{\n        \tthis.storageControllerLock.unlock();\n        }\n    }\n\n","sourceOld":"    private void close() throws IOException {\n    \tif(this.isClosed.get())\n    \t\tthrow new IllegalStateException(\"StorageController is already closed -- server is shutting down\");\n    \t\n        this.storageControllerLock.lock();\n        try{\n        \tif(this.isClosed.get())\n        \t\tthrow new IllegalStateException(\"StorageController is already closed -- server is shutting down\");\n        \tthis.isClosed.set(true);\n        \twhile(this.storageControllerLock.getQueueLength()>0)\n        \t\ttry{\n        \t\tthis.closeCondition.await();\n        \t\t}catch (Exception e) {\n\t\t\t\t\t//\n\t\t\t\t}\n            if (LOG.isInfoEnabled())\n                LOG.info(\"StorageController has been closed -- server is shutting down -- release all resources\");\n            if (this.storageQuery != null)\n                this.storageQuery.decrementRef();\n            this.modifier.close();\n\t\t}finally{\n        \tthis.storageControllerLock.unlock();\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5824af871ba6863399636aa5989bfc0ef2ea448c","date":1166013128,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/gdata-server/src/core/java/org/apache/lucene/gdata/storage/lucenestorage/StorageCoreController#close().mjava","pathOld":"contrib/gdata-server/src/java/org/apache/lucene/gdata/storage/lucenestorage/StorageCoreController#close().mjava","sourceNew":"    private void close() throws IOException {\n    \tif(this.isClosed.get())\n    \t\tthrow new IllegalStateException(\"StorageController is already closed -- server is shutting down\");\n    \t\n        this.storageControllerLock.lock();\n        try{\n        \tif(this.isClosed.get())\n        \t\tthrow new IllegalStateException(\"StorageController is already closed -- server is shutting down\");\n        \tthis.isClosed.set(true);\n        \twhile(this.storageControllerLock.getQueueLength()>0)\n        \t\ttry{\n        \t\tthis.closeCondition.await();\n        \t\t}catch (Exception e) {\n\t\t\t\t\t//\n\t\t\t\t}\n            if (LOG.isInfoEnabled())\n                LOG.info(\"StorageController has been closed -- server is shutting down -- release all resources\");\n            if (this.storageQuery != null)\n                this.storageQuery.decrementRef();\n            if(this.recoverController != null)\n                this.recoverController.destroy();\n            this.storageLock.close();\n            this.modifier.close();\n            this.idGenerator.stopIDGenerator();\n\t\t}finally{\n        \tthis.storageControllerLock.unlock();\n        }\n    }\n\n","sourceOld":"    private void close() throws IOException {\n    \tif(this.isClosed.get())\n    \t\tthrow new IllegalStateException(\"StorageController is already closed -- server is shutting down\");\n    \t\n        this.storageControllerLock.lock();\n        try{\n        \tif(this.isClosed.get())\n        \t\tthrow new IllegalStateException(\"StorageController is already closed -- server is shutting down\");\n        \tthis.isClosed.set(true);\n        \twhile(this.storageControllerLock.getQueueLength()>0)\n        \t\ttry{\n        \t\tthis.closeCondition.await();\n        \t\t}catch (Exception e) {\n\t\t\t\t\t//\n\t\t\t\t}\n            if (LOG.isInfoEnabled())\n                LOG.info(\"StorageController has been closed -- server is shutting down -- release all resources\");\n            if (this.storageQuery != null)\n                this.storageQuery.decrementRef();\n            if(this.recoverController != null)\n                this.recoverController.destroy();\n            this.storageLock.close();\n            this.modifier.close();\n            this.idGenerator.stopIDGenerator();\n\t\t}finally{\n        \tthis.storageControllerLock.unlock();\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"02a7f04a7293ea604e17892ba0bded7341adf3af":["52754a40a1550056d5637c8992b4076b5ed77328"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5824af871ba6863399636aa5989bfc0ef2ea448c":["303ca293666286b4ae2b0b4dbf10d3bf60ed727c"],"303ca293666286b4ae2b0b4dbf10d3bf60ed727c":["02a7f04a7293ea604e17892ba0bded7341adf3af"],"5d43e216d757e2276d180eba8a192e300c4bfadb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5824af871ba6863399636aa5989bfc0ef2ea448c"],"52754a40a1550056d5637c8992b4076b5ed77328":["5d43e216d757e2276d180eba8a192e300c4bfadb"]},"commit2Childs":{"02a7f04a7293ea604e17892ba0bded7341adf3af":["303ca293666286b4ae2b0b4dbf10d3bf60ed727c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5d43e216d757e2276d180eba8a192e300c4bfadb"],"5824af871ba6863399636aa5989bfc0ef2ea448c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"303ca293666286b4ae2b0b4dbf10d3bf60ed727c":["5824af871ba6863399636aa5989bfc0ef2ea448c"],"5d43e216d757e2276d180eba8a192e300c4bfadb":["52754a40a1550056d5637c8992b4076b5ed77328"],"52754a40a1550056d5637c8992b4076b5ed77328":["02a7f04a7293ea604e17892ba0bded7341adf3af"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}