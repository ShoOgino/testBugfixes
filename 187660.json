{"path":"solr/solrj/src/java/org/apache/solr/recipe/Preference#compare(Row,Row,boolean).mjava","commits":[{"id":"c09a89337c5a3688436fd158575e28cdbb4fe28e","date":1490706842,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/recipe/Preference#compare(Row,Row,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/recipe/Preference#compare(RuleSorter.Row,RuleSorter.Row,boolean).mjava","sourceNew":"  // there are 2 modes of compare.\n  // recursive, it uses the precision to tie & when there is a tie use the next preference to compare\n  // in non-recursive mode, precision is not taken into consideration and sort is done on actual value\n  int compare(Row r1, Row r2, boolean recursive) {\n    Object o1 = recursive ? r1.cells[idx].val_ : r1.cells[idx].val;\n    Object o2 = recursive ? r2.cells[idx].val_ : r2.cells[idx].val;\n    int result = 0;\n    if (o1 instanceof Integer && o2 instanceof Integer) result = ((Integer) o1).compareTo((Integer) o2);\n    if (o1 instanceof Long && o2 instanceof Long) result = ((Long) o1).compareTo((Long) o2);\n    if (o1 instanceof Float && o2 instanceof Float) result = ((Float) o1).compareTo((Float) o2);\n    if (o1 instanceof Double && o2 instanceof Double) result = ((Double) o1).compareTo((Double) o2);\n    return result == 0 ? next == null ? 0 : next.compare(r1, r2, recursive) : sort.sortval * result;\n  }\n\n","sourceOld":"  // there are 2 modes of compare.\n  // recursive, it uses the precision to tie & when there is a tie use the next preference to compare\n  // in non-recursive mode, precision is not taken into consideration and sort is done on actual value\n  int compare(RuleSorter.Row r1, RuleSorter.Row r2, boolean recursive) {\n    Object o1 = recursive ? r1.cells[idx].val_ : r1.cells[idx].val;\n    Object o2 = recursive ? r2.cells[idx].val_ : r2.cells[idx].val;\n    int result = 0;\n    if (o1 instanceof Integer && o2 instanceof Integer) result = ((Integer) o1).compareTo((Integer) o2);\n    if (o1 instanceof Long && o2 instanceof Long) result = ((Long) o1).compareTo((Long) o2);\n    if (o1 instanceof Float && o2 instanceof Float) result = ((Float) o1).compareTo((Float) o2);\n    if (o1 instanceof Double && o2 instanceof Double) result = ((Double) o1).compareTo((Double) o2);\n    return result == 0 ? next == null ? 0 : next.compare(r1, r2, recursive) : sort.sortval * result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"653c1ca305e0065ee988a09e59c8316b8cde02fd","date":1492506780,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Preference#compare(Row,Row,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/recipe/Preference#compare(Row,Row,boolean).mjava","sourceNew":"  // there are 2 modes of compare.\n  // recursive, it uses the precision to tie & when there is a tie use the next preference to compare\n  // in non-recursive mode, precision is not taken into consideration and sort is done on actual value\n  int compare(Row r1, Row r2, boolean recursive) {\n    Object o1 = recursive ? r1.cells[idx].val_ : r1.cells[idx].val;\n    Object o2 = recursive ? r2.cells[idx].val_ : r2.cells[idx].val;\n    int result = 0;\n    if (o1 instanceof Integer && o2 instanceof Integer) result = ((Integer) o1).compareTo((Integer) o2);\n    if (o1 instanceof Long && o2 instanceof Long) result = ((Long) o1).compareTo((Long) o2);\n    if (o1 instanceof Float && o2 instanceof Float) result = ((Float) o1).compareTo((Float) o2);\n    if (o1 instanceof Double && o2 instanceof Double) result = ((Double) o1).compareTo((Double) o2);\n    return result == 0 ? next == null ? 0 : next.compare(r1, r2, recursive) : sort.sortval * result;\n  }\n\n","sourceOld":"  // there are 2 modes of compare.\n  // recursive, it uses the precision to tie & when there is a tie use the next preference to compare\n  // in non-recursive mode, precision is not taken into consideration and sort is done on actual value\n  int compare(Row r1, Row r2, boolean recursive) {\n    Object o1 = recursive ? r1.cells[idx].val_ : r1.cells[idx].val;\n    Object o2 = recursive ? r2.cells[idx].val_ : r2.cells[idx].val;\n    int result = 0;\n    if (o1 instanceof Integer && o2 instanceof Integer) result = ((Integer) o1).compareTo((Integer) o2);\n    if (o1 instanceof Long && o2 instanceof Long) result = ((Long) o1).compareTo((Long) o2);\n    if (o1 instanceof Float && o2 instanceof Float) result = ((Float) o1).compareTo((Float) o2);\n    if (o1 instanceof Double && o2 instanceof Double) result = ((Double) o1).compareTo((Double) o2);\n    return result == 0 ? next == null ? 0 : next.compare(r1, r2, recursive) : sort.sortval * result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"653c1ca305e0065ee988a09e59c8316b8cde02fd":["c09a89337c5a3688436fd158575e28cdbb4fe28e"],"c09a89337c5a3688436fd158575e28cdbb4fe28e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c09a89337c5a3688436fd158575e28cdbb4fe28e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"653c1ca305e0065ee988a09e59c8316b8cde02fd":[],"c09a89337c5a3688436fd158575e28cdbb4fe28e":["653c1ca305e0065ee988a09e59c8316b8cde02fd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["653c1ca305e0065ee988a09e59c8316b8cde02fd","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}