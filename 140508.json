{"path":"lucene/core/src/java/org/apache/lucene/util/PagedBytes#copy(BytesRef,BytesRef).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/PagedBytes#copy(BytesRef,BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/PagedBytes#copy(BytesRef,BytesRef).mjava","sourceNew":"  /** Copy BytesRef in, setting BytesRef out to the result.\n   * Do not use this if you will use freeze(true).\n   * This only supports bytes.length <= blockSize */\n  public void copy(BytesRef bytes, BytesRef out) throws IOException {\n    int left = blockSize - upto;\n    if (bytes.length > left || currentBlock==null) {\n      if (currentBlock != null) {\n        blocks.add(currentBlock);\n        blockEnd.add(upto);\n        didSkipBytes = true;\n      }\n      currentBlock = new byte[blockSize];\n      upto = 0;\n      left = blockSize;\n      assert bytes.length <= blockSize;\n      // TODO: we could also support variable block sizes\n    }\n\n    out.bytes = currentBlock;\n    out.offset = upto;\n    out.length = bytes.length;\n\n    System.arraycopy(bytes.bytes, bytes.offset, currentBlock, upto, bytes.length);\n    upto += bytes.length;\n  }\n\n","sourceOld":"  /** Copy BytesRef in, setting BytesRef out to the result.\n   * Do not use this if you will use freeze(true).\n   * This only supports bytes.length <= blockSize */\n  public void copy(BytesRef bytes, BytesRef out) throws IOException {\n    int left = blockSize - upto;\n    if (bytes.length > left || currentBlock==null) {\n      if (currentBlock != null) {\n        blocks.add(currentBlock);\n        blockEnd.add(upto);\n        didSkipBytes = true;\n      }\n      currentBlock = new byte[blockSize];\n      upto = 0;\n      left = blockSize;\n      assert bytes.length <= blockSize;\n      // TODO: we could also support variable block sizes\n    }\n\n    out.bytes = currentBlock;\n    out.offset = upto;\n    out.length = bytes.length;\n\n    System.arraycopy(bytes.bytes, bytes.offset, currentBlock, upto, bytes.length);\n    upto += bytes.length;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/PagedBytes#copy(BytesRef,BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/PagedBytes#copy(BytesRef,BytesRef).mjava","sourceNew":"  /** Copy BytesRef in, setting BytesRef out to the result.\n   * Do not use this if you will use freeze(true).\n   * This only supports bytes.length <= blockSize */\n  public void copy(BytesRef bytes, BytesRef out) {\n    int left = blockSize - upto;\n    if (bytes.length > left || currentBlock==null) {\n      if (currentBlock != null) {\n        blocks.add(currentBlock);\n        blockEnd.add(upto);\n        didSkipBytes = true;\n      }\n      currentBlock = new byte[blockSize];\n      upto = 0;\n      left = blockSize;\n      assert bytes.length <= blockSize;\n      // TODO: we could also support variable block sizes\n    }\n\n    out.bytes = currentBlock;\n    out.offset = upto;\n    out.length = bytes.length;\n\n    System.arraycopy(bytes.bytes, bytes.offset, currentBlock, upto, bytes.length);\n    upto += bytes.length;\n  }\n\n","sourceOld":"  /** Copy BytesRef in, setting BytesRef out to the result.\n   * Do not use this if you will use freeze(true).\n   * This only supports bytes.length <= blockSize */\n  public void copy(BytesRef bytes, BytesRef out) throws IOException {\n    int left = blockSize - upto;\n    if (bytes.length > left || currentBlock==null) {\n      if (currentBlock != null) {\n        blocks.add(currentBlock);\n        blockEnd.add(upto);\n        didSkipBytes = true;\n      }\n      currentBlock = new byte[blockSize];\n      upto = 0;\n      left = blockSize;\n      assert bytes.length <= blockSize;\n      // TODO: we could also support variable block sizes\n    }\n\n    out.bytes = currentBlock;\n    out.offset = upto;\n    out.length = bytes.length;\n\n    System.arraycopy(bytes.bytes, bytes.offset, currentBlock, upto, bytes.length);\n    upto += bytes.length;\n  }\n\n","bugFix":["87697f76828e4cfc6dc898262de8898e5010703f"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/PagedBytes#copy(BytesRef,BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/PagedBytes#copy(BytesRef,BytesRef).mjava","sourceNew":"  /** Copy BytesRef in, setting BytesRef out to the result.\n   * Do not use this if you will use freeze(true).\n   * This only supports bytes.length <= blockSize */\n  public void copy(BytesRef bytes, BytesRef out) {\n    int left = blockSize - upto;\n    if (bytes.length > left || currentBlock==null) {\n      if (currentBlock != null) {\n        blocks.add(currentBlock);\n        blockEnd.add(upto);\n        didSkipBytes = true;\n      }\n      currentBlock = new byte[blockSize];\n      upto = 0;\n      left = blockSize;\n      assert bytes.length <= blockSize;\n      // TODO: we could also support variable block sizes\n    }\n\n    out.bytes = currentBlock;\n    out.offset = upto;\n    out.length = bytes.length;\n\n    System.arraycopy(bytes.bytes, bytes.offset, currentBlock, upto, bytes.length);\n    upto += bytes.length;\n  }\n\n","sourceOld":"  /** Copy BytesRef in, setting BytesRef out to the result.\n   * Do not use this if you will use freeze(true).\n   * This only supports bytes.length <= blockSize */\n  public void copy(BytesRef bytes, BytesRef out) throws IOException {\n    int left = blockSize - upto;\n    if (bytes.length > left || currentBlock==null) {\n      if (currentBlock != null) {\n        blocks.add(currentBlock);\n        blockEnd.add(upto);\n        didSkipBytes = true;\n      }\n      currentBlock = new byte[blockSize];\n      upto = 0;\n      left = blockSize;\n      assert bytes.length <= blockSize;\n      // TODO: we could also support variable block sizes\n    }\n\n    out.bytes = currentBlock;\n    out.offset = upto;\n    out.length = bytes.length;\n\n    System.arraycopy(bytes.bytes, bytes.offset, currentBlock, upto, bytes.length);\n    upto += bytes.length;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d943163030bbd7a9caf93cb5fea92257390a2a99","date":1403094254,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/PagedBytes#copy(BytesRef,BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/PagedBytes#copy(BytesRef,BytesRef).mjava","sourceNew":"  /** Copy BytesRef in, setting BytesRef out to the result.\n   * Do not use this if you will use freeze(true).\n   * This only supports bytes.length <= blockSize */\n  public void copy(BytesRef bytes, BytesRef out) {\n    int left = blockSize - upto;\n    if (bytes.length > left || currentBlock==null) {\n      if (currentBlock != null) {\n        addBlock(currentBlock);\n        didSkipBytes = true;\n      }\n      currentBlock = new byte[blockSize];\n      upto = 0;\n      left = blockSize;\n      assert bytes.length <= blockSize;\n      // TODO: we could also support variable block sizes\n    }\n\n    out.bytes = currentBlock;\n    out.offset = upto;\n    out.length = bytes.length;\n\n    System.arraycopy(bytes.bytes, bytes.offset, currentBlock, upto, bytes.length);\n    upto += bytes.length;\n  }\n\n","sourceOld":"  /** Copy BytesRef in, setting BytesRef out to the result.\n   * Do not use this if you will use freeze(true).\n   * This only supports bytes.length <= blockSize */\n  public void copy(BytesRef bytes, BytesRef out) {\n    int left = blockSize - upto;\n    if (bytes.length > left || currentBlock==null) {\n      if (currentBlock != null) {\n        blocks.add(currentBlock);\n        blockEnd.add(upto);\n        didSkipBytes = true;\n      }\n      currentBlock = new byte[blockSize];\n      upto = 0;\n      left = blockSize;\n      assert bytes.length <= blockSize;\n      // TODO: we could also support variable block sizes\n    }\n\n    out.bytes = currentBlock;\n    out.offset = upto;\n    out.length = bytes.length;\n\n    System.arraycopy(bytes.bytes, bytes.offset, currentBlock, upto, bytes.length);\n    upto += bytes.length;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e57c73924f3b8c19defa62e96bfa34a4922d49c2","date":1403106358,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/PagedBytes#copy(BytesRef,BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/PagedBytes#copy(BytesRef,BytesRef).mjava","sourceNew":"  /** Copy BytesRef in, setting BytesRef out to the result.\n   * Do not use this if you will use freeze(true).\n   * This only supports bytes.length <= blockSize */\n  public void copy(BytesRef bytes, BytesRef out) {\n    int left = blockSize - upto;\n    if (bytes.length > left || currentBlock==null) {\n      if (currentBlock != null) {\n        addBlock(currentBlock);\n        didSkipBytes = true;\n      }\n      currentBlock = new byte[blockSize];\n      upto = 0;\n      left = blockSize;\n      assert bytes.length <= blockSize;\n      // TODO: we could also support variable block sizes\n    }\n\n    out.bytes = currentBlock;\n    out.offset = upto;\n    out.length = bytes.length;\n\n    System.arraycopy(bytes.bytes, bytes.offset, currentBlock, upto, bytes.length);\n    upto += bytes.length;\n  }\n\n","sourceOld":"  /** Copy BytesRef in, setting BytesRef out to the result.\n   * Do not use this if you will use freeze(true).\n   * This only supports bytes.length <= blockSize */\n  public void copy(BytesRef bytes, BytesRef out) {\n    int left = blockSize - upto;\n    if (bytes.length > left || currentBlock==null) {\n      if (currentBlock != null) {\n        blocks.add(currentBlock);\n        blockEnd.add(upto);\n        didSkipBytes = true;\n      }\n      currentBlock = new byte[blockSize];\n      upto = 0;\n      left = blockSize;\n      assert bytes.length <= blockSize;\n      // TODO: we could also support variable block sizes\n    }\n\n    out.bytes = currentBlock;\n    out.offset = upto;\n    out.length = bytes.length;\n\n    System.arraycopy(bytes.bytes, bytes.offset, currentBlock, upto, bytes.length);\n    upto += bytes.length;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b1eb427f2c6beed80d1724555fc1db003ccf3030","date":1417137397,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/PagedBytes#copy(BytesRef,BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/PagedBytes#copy(BytesRef,BytesRef).mjava","sourceNew":"  /** Copy BytesRef in, setting BytesRef out to the result.\n   * Do not use this if you will use freeze(true).\n   * This only supports bytes.length &lt;= blockSize */\n  public void copy(BytesRef bytes, BytesRef out) {\n    int left = blockSize - upto;\n    if (bytes.length > left || currentBlock==null) {\n      if (currentBlock != null) {\n        addBlock(currentBlock);\n        didSkipBytes = true;\n      }\n      currentBlock = new byte[blockSize];\n      upto = 0;\n      left = blockSize;\n      assert bytes.length <= blockSize;\n      // TODO: we could also support variable block sizes\n    }\n\n    out.bytes = currentBlock;\n    out.offset = upto;\n    out.length = bytes.length;\n\n    System.arraycopy(bytes.bytes, bytes.offset, currentBlock, upto, bytes.length);\n    upto += bytes.length;\n  }\n\n","sourceOld":"  /** Copy BytesRef in, setting BytesRef out to the result.\n   * Do not use this if you will use freeze(true).\n   * This only supports bytes.length <= blockSize */\n  public void copy(BytesRef bytes, BytesRef out) {\n    int left = blockSize - upto;\n    if (bytes.length > left || currentBlock==null) {\n      if (currentBlock != null) {\n        addBlock(currentBlock);\n        didSkipBytes = true;\n      }\n      currentBlock = new byte[blockSize];\n      upto = 0;\n      left = blockSize;\n      assert bytes.length <= blockSize;\n      // TODO: we could also support variable block sizes\n    }\n\n    out.bytes = currentBlock;\n    out.offset = upto;\n    out.length = bytes.length;\n\n    System.arraycopy(bytes.bytes, bytes.offset, currentBlock, upto, bytes.length);\n    upto += bytes.length;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b1eb427f2c6beed80d1724555fc1db003ccf3030":["d943163030bbd7a9caf93cb5fea92257390a2a99"],"e57c73924f3b8c19defa62e96bfa34a4922d49c2":["4d3e8520fd031bab31fd0e4d480e55958bc45efe","d943163030bbd7a9caf93cb5fea92257390a2a99"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d943163030bbd7a9caf93cb5fea92257390a2a99":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b1eb427f2c6beed80d1724555fc1db003ccf3030"]},"commit2Childs":{"b1eb427f2c6beed80d1724555fc1db003ccf3030":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e57c73924f3b8c19defa62e96bfa34a4922d49c2":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d943163030bbd7a9caf93cb5fea92257390a2a99":["b1eb427f2c6beed80d1724555fc1db003ccf3030","e57c73924f3b8c19defa62e96bfa34a4922d49c2"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["e57c73924f3b8c19defa62e96bfa34a4922d49c2","fe33227f6805edab2036cbb80645cc4e2d1fa424","d943163030bbd7a9caf93cb5fea92257390a2a99"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e57c73924f3b8c19defa62e96bfa34a4922d49c2","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}