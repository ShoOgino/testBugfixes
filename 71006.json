{"path":"lucene/core/src/java/org/apache/lucene/index/LogMergePolicy#isMerged(SegmentInfoPerCommit).mjava","commits":[{"id":"9d153abcf92dc5329d98571a8c3035df9bd80648","date":1337702630,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/LogMergePolicy#isMerged(SegmentInfoPerCommit).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/LogMergePolicy#isMerged(SegmentInfo).mjava","sourceNew":"  /** Returns true if this single info is already fully merged (has no\n   *  pending norms or deletes, is in the same dir as the\n   *  writer, and matches the current compound file setting */\n  protected boolean isMerged(SegmentInfoPerCommit info)\n    throws IOException {\n    IndexWriter w = writer.get();\n    assert w != null;\n    boolean hasDeletions = w.numDeletedDocs(info) > 0;\n    return !hasDeletions &&\n      !info.info.hasSeparateNorms() &&\n      info.info.dir == w.getDirectory() &&\n      (info.info.getUseCompoundFile() == useCompoundFile || noCFSRatio < 1.0);\n  }\n\n","sourceOld":"  /** Returns true if this single info is already fully merged (has no\n   *  pending norms or deletes, is in the same dir as the\n   *  writer, and matches the current compound file setting */\n  protected boolean isMerged(SegmentInfo info)\n    throws IOException {\n    IndexWriter w = writer.get();\n    assert w != null;\n    boolean hasDeletions = w.numDeletedDocs(info) > 0;\n    return !hasDeletions &&\n      !info.hasSeparateNorms() &&\n      info.dir == w.getDirectory() &&\n      (info.getUseCompoundFile() == useCompoundFile || noCFSRatio < 1.0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"615ddbd81799980d0fdd95e0238e1c498b6f47b0","date":1338233290,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/LogMergePolicy#isMerged(SegmentInfoPerCommit).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/LogMergePolicy#isMerged(SegmentInfo).mjava","sourceNew":"  /** Returns true if this single info is already fully merged (has no\n   *  pending norms or deletes, is in the same dir as the\n   *  writer, and matches the current compound file setting */\n  protected boolean isMerged(SegmentInfoPerCommit info)\n    throws IOException {\n    IndexWriter w = writer.get();\n    assert w != null;\n    boolean hasDeletions = w.numDeletedDocs(info) > 0;\n    return !hasDeletions &&\n      !info.info.hasSeparateNorms() &&\n      info.info.dir == w.getDirectory() &&\n      (info.info.getUseCompoundFile() == useCompoundFile || noCFSRatio < 1.0);\n  }\n\n","sourceOld":"  /** Returns true if this single info is already fully merged (has no\n   *  pending norms or deletes, is in the same dir as the\n   *  writer, and matches the current compound file setting */\n  protected boolean isMerged(SegmentInfo info)\n    throws IOException {\n    IndexWriter w = writer.get();\n    assert w != null;\n    boolean hasDeletions = w.numDeletedDocs(info) > 0;\n    return !hasDeletions &&\n      !info.hasSeparateNorms() &&\n      info.dir == w.getDirectory() &&\n      (info.getUseCompoundFile() == useCompoundFile || noCFSRatio < 1.0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57ae3024996ccdb3c36c42cb890e1efb37df4ce8","date":1338343651,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/LogMergePolicy#isMerged(SegmentInfoPerCommit).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/LogMergePolicy#isMerged(SegmentInfoPerCommit).mjava","sourceNew":"  /** Returns true if this single info is already fully merged (has no\n   *  pending norms or deletes, is in the same dir as the\n   *  writer, and matches the current compound file setting */\n  protected boolean isMerged(SegmentInfoPerCommit info)\n    throws IOException {\n    IndexWriter w = writer.get();\n    assert w != null;\n    boolean hasDeletions = w.numDeletedDocs(info) > 0;\n    return !hasDeletions &&\n      info.info.dir == w.getDirectory() &&\n      (info.info.getUseCompoundFile() == useCompoundFile || noCFSRatio < 1.0);\n  }\n\n","sourceOld":"  /** Returns true if this single info is already fully merged (has no\n   *  pending norms or deletes, is in the same dir as the\n   *  writer, and matches the current compound file setting */\n  protected boolean isMerged(SegmentInfoPerCommit info)\n    throws IOException {\n    IndexWriter w = writer.get();\n    assert w != null;\n    boolean hasDeletions = w.numDeletedDocs(info) > 0;\n    return !hasDeletions &&\n      !info.info.hasSeparateNorms() &&\n      info.info.dir == w.getDirectory() &&\n      (info.info.getUseCompoundFile() == useCompoundFile || noCFSRatio < 1.0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"088a7ef694fd43d5d9a4d200c4005865f773d1e7","date":1371136274,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MergePolicy#isMerged(SegmentInfoPerCommit).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/LogMergePolicy#isMerged(SegmentInfoPerCommit).mjava","sourceNew":"  /** Returns true if this single info is already fully merged (has no\n   *  pending deletes, is in the same dir as the\n   *  writer, and matches the current compound file setting */\n  protected final boolean isMerged(SegmentInfoPerCommit info) {\n    IndexWriter w = writer.get();\n    assert w != null;\n    boolean hasDeletions = w.numDeletedDocs(info) > 0;\n    return !hasDeletions &&\n      info.info.dir == w.getDirectory() &&\n      ((noCFSRatio > 0.0 && noCFSRatio < 1.0) || maxCFSSegmentSize < Long.MAX_VALUE);\n  }\n\n","sourceOld":"  /** Returns true if this single info is already fully merged (has no\n   *  pending norms or deletes, is in the same dir as the\n   *  writer, and matches the current compound file setting */\n  protected boolean isMerged(SegmentInfoPerCommit info)\n    throws IOException {\n    IndexWriter w = writer.get();\n    assert w != null;\n    boolean hasDeletions = w.numDeletedDocs(info) > 0;\n    return !hasDeletions &&\n      info.info.dir == w.getDirectory() &&\n      (info.info.getUseCompoundFile() == useCompoundFile || noCFSRatio < 1.0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"57ae3024996ccdb3c36c42cb890e1efb37df4ce8":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"088a7ef694fd43d5d9a4d200c4005865f773d1e7":["57ae3024996ccdb3c36c42cb890e1efb37df4ce8"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9d153abcf92dc5329d98571a8c3035df9bd80648"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9d153abcf92dc5329d98571a8c3035df9bd80648":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["088a7ef694fd43d5d9a4d200c4005865f773d1e7"]},"commit2Childs":{"57ae3024996ccdb3c36c42cb890e1efb37df4ce8":["088a7ef694fd43d5d9a4d200c4005865f773d1e7"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["57ae3024996ccdb3c36c42cb890e1efb37df4ce8"],"088a7ef694fd43d5d9a4d200c4005865f773d1e7":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["615ddbd81799980d0fdd95e0238e1c498b6f47b0","9d153abcf92dc5329d98571a8c3035df9bd80648"],"9d153abcf92dc5329d98571a8c3035df9bd80648":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}