{"path":"lucene/expressions/src/test/org/apache/lucene/expressions/js/TestJavascriptCompiler#testWrongArity().mjava","commits":[{"id":"3cec7370ef0f1263efcc38f7d9835d1f6e8f4136","date":1379198899,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/expressions/src/test/org/apache/lucene/expressions/js/TestJavascriptCompiler#testWrongArity().mjava","pathOld":"/dev/null","sourceNew":"  public void testWrongArity() throws Exception {\n    try {\n      JavascriptCompiler.compile(\"tan()\");\n      fail();\n    } catch (IllegalArgumentException expected) {\n      assertTrue(expected.getMessage().contains(\"arguments for method call\"));\n    }\n    \n    try {\n      JavascriptCompiler.compile(\"tan(1, 1)\");\n      fail();\n    } catch (IllegalArgumentException expected) {\n      assertTrue(expected.getMessage().contains(\"arguments for method call\"));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["05fe562aa248790944d43cdd478f512572835ba0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5f0e44787cffbb978aa2182761e3f9b184545a1e","date":1379265303,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/expressions/src/test/org/apache/lucene/expressions/js/TestJavascriptCompiler#testWrongArity().mjava","pathOld":"/dev/null","sourceNew":"  public void testWrongArity() throws Exception {\n    try {\n      JavascriptCompiler.compile(\"tan()\");\n      fail();\n    } catch (IllegalArgumentException expected) {\n      assertTrue(expected.getMessage().contains(\"arguments for method call\"));\n    }\n    \n    try {\n      JavascriptCompiler.compile(\"tan(1, 1)\");\n      fail();\n    } catch (IllegalArgumentException expected) {\n      assertTrue(expected.getMessage().contains(\"arguments for method call\"));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bc8344f9e8b303df6f90068c5dc0bcfaccc0f74a","date":1429899342,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/expressions/src/test/org/apache/lucene/expressions/js/TestJavascriptCompiler#testWrongArity().mjava","pathOld":"lucene/expressions/src/test/org/apache/lucene/expressions/js/TestJavascriptCompiler#testWrongArity().mjava","sourceNew":"  public void testWrongArity() throws Exception {\n    try {\n      JavascriptCompiler.compile(\"tan()\");\n      fail();\n    } catch (IllegalArgumentException expected) {\n      assertTrue(expected.getMessage().contains(\"arguments for function call\"));\n    }\n    \n    try {\n      JavascriptCompiler.compile(\"tan(1, 1)\");\n      fail();\n    } catch (IllegalArgumentException expected) {\n      assertTrue(expected.getMessage().contains(\"arguments for function call\"));\n    }\n  }\n\n","sourceOld":"  public void testWrongArity() throws Exception {\n    try {\n      JavascriptCompiler.compile(\"tan()\");\n      fail();\n    } catch (IllegalArgumentException expected) {\n      assertTrue(expected.getMessage().contains(\"arguments for method call\"));\n    }\n    \n    try {\n      JavascriptCompiler.compile(\"tan(1, 1)\");\n      fail();\n    } catch (IllegalArgumentException expected) {\n      assertTrue(expected.getMessage().contains(\"arguments for method call\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":["05fe562aa248790944d43cdd478f512572835ba0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"10fcb49fe038c75fa2e8f8029db57203be947728","date":1452203404,"type":3,"author":"Tomas Eduardo Fernandez Lobbe","isMerge":false,"pathNew":"lucene/expressions/src/test/org/apache/lucene/expressions/js/TestJavascriptCompiler#testWrongArity().mjava","pathOld":"lucene/expressions/src/test/org/apache/lucene/expressions/js/TestJavascriptCompiler#testWrongArity().mjava","sourceNew":"  public void testWrongArity() throws Exception {\n    try {\n      JavascriptCompiler.compile(\"tan()\");\n      fail();\n    } catch (ParseException expected) {\n      assertEquals(\"Invalid expression 'tan()': Expected (1) arguments for function call (tan), but found (0).\", expected.getMessage());\n      assertEquals(expected.getErrorOffset(), 0);\n    }\n    \n    try {\n      JavascriptCompiler.compile(\"tan(1, 1)\");\n      fail();\n    } catch (ParseException expected) {\n      assertTrue(expected.getMessage().contains(\"arguments for function call\"));\n    }\n    \n    try {\n      JavascriptCompiler.compile(\" tan()\");\n      fail();\n    } catch (ParseException expected) {\n      assertEquals(\"Invalid expression ' tan()': Expected (1) arguments for function call (tan), but found (0).\", expected.getMessage());\n      assertEquals(expected.getErrorOffset(), 1);\n    }\n    \n    try {\n      JavascriptCompiler.compile(\"1 + tan()\");\n      fail();\n    } catch (ParseException expected) {\n      assertEquals(\"Invalid expression '1 + tan()': Expected (1) arguments for function call (tan), but found (0).\", expected.getMessage());\n      assertEquals(expected.getErrorOffset(), 4);\n    }\n  }\n\n","sourceOld":"  public void testWrongArity() throws Exception {\n    try {\n      JavascriptCompiler.compile(\"tan()\");\n      fail();\n    } catch (IllegalArgumentException expected) {\n      assertTrue(expected.getMessage().contains(\"arguments for function call\"));\n    }\n    \n    try {\n      JavascriptCompiler.compile(\"tan(1, 1)\");\n      fail();\n    } catch (IllegalArgumentException expected) {\n      assertTrue(expected.getMessage().contains(\"arguments for function call\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":["05fe562aa248790944d43cdd478f512572835ba0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"05fe562aa248790944d43cdd478f512572835ba0","date":1455901667,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/expressions/src/test/org/apache/lucene/expressions/js/TestJavascriptCompiler#testWrongArity().mjava","pathOld":"lucene/expressions/src/test/org/apache/lucene/expressions/js/TestJavascriptCompiler#testWrongArity().mjava","sourceNew":"  public void testWrongArity() throws Exception {\n    ParseException expected = expectThrows(ParseException.class, () -> {\n      JavascriptCompiler.compile(\"tan()\");\n      fail();\n    });\n    assertEquals(\"Invalid expression 'tan()': Expected (1) arguments for function call (tan), but found (0).\", expected.getMessage());\n    assertEquals(expected.getErrorOffset(), 0);\n    \n    expected = expectThrows(ParseException.class, () -> {\n      JavascriptCompiler.compile(\"tan(1, 1)\");\n    });\n    assertTrue(expected.getMessage().contains(\"arguments for function call\"));\n    \n    expected = expectThrows(ParseException.class, () -> {\n      JavascriptCompiler.compile(\" tan()\");\n    });\n    assertEquals(\"Invalid expression ' tan()': Expected (1) arguments for function call (tan), but found (0).\", expected.getMessage());\n    assertEquals(expected.getErrorOffset(), 1);\n    \n    expected = expectThrows(ParseException.class, () -> {\n      JavascriptCompiler.compile(\"1 + tan()\");\n    });\n    assertEquals(\"Invalid expression '1 + tan()': Expected (1) arguments for function call (tan), but found (0).\", expected.getMessage());\n    assertEquals(expected.getErrorOffset(), 4);\n  }\n\n","sourceOld":"  public void testWrongArity() throws Exception {\n    try {\n      JavascriptCompiler.compile(\"tan()\");\n      fail();\n    } catch (ParseException expected) {\n      assertEquals(\"Invalid expression 'tan()': Expected (1) arguments for function call (tan), but found (0).\", expected.getMessage());\n      assertEquals(expected.getErrorOffset(), 0);\n    }\n    \n    try {\n      JavascriptCompiler.compile(\"tan(1, 1)\");\n      fail();\n    } catch (ParseException expected) {\n      assertTrue(expected.getMessage().contains(\"arguments for function call\"));\n    }\n    \n    try {\n      JavascriptCompiler.compile(\" tan()\");\n      fail();\n    } catch (ParseException expected) {\n      assertEquals(\"Invalid expression ' tan()': Expected (1) arguments for function call (tan), but found (0).\", expected.getMessage());\n      assertEquals(expected.getErrorOffset(), 1);\n    }\n    \n    try {\n      JavascriptCompiler.compile(\"1 + tan()\");\n      fail();\n    } catch (ParseException expected) {\n      assertEquals(\"Invalid expression '1 + tan()': Expected (1) arguments for function call (tan), but found (0).\", expected.getMessage());\n      assertEquals(expected.getErrorOffset(), 4);\n    }\n  }\n\n","bugFix":["10fcb49fe038c75fa2e8f8029db57203be947728","3cec7370ef0f1263efcc38f7d9835d1f6e8f4136","bc8344f9e8b303df6f90068c5dc0bcfaccc0f74a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"10fcb49fe038c75fa2e8f8029db57203be947728":["bc8344f9e8b303df6f90068c5dc0bcfaccc0f74a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"05fe562aa248790944d43cdd478f512572835ba0":["10fcb49fe038c75fa2e8f8029db57203be947728"],"3cec7370ef0f1263efcc38f7d9835d1f6e8f4136":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["05fe562aa248790944d43cdd478f512572835ba0"],"bc8344f9e8b303df6f90068c5dc0bcfaccc0f74a":["5f0e44787cffbb978aa2182761e3f9b184545a1e"],"5f0e44787cffbb978aa2182761e3f9b184545a1e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cec7370ef0f1263efcc38f7d9835d1f6e8f4136"]},"commit2Childs":{"10fcb49fe038c75fa2e8f8029db57203be947728":["05fe562aa248790944d43cdd478f512572835ba0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3cec7370ef0f1263efcc38f7d9835d1f6e8f4136","5f0e44787cffbb978aa2182761e3f9b184545a1e"],"05fe562aa248790944d43cdd478f512572835ba0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cec7370ef0f1263efcc38f7d9835d1f6e8f4136":["5f0e44787cffbb978aa2182761e3f9b184545a1e"],"bc8344f9e8b303df6f90068c5dc0bcfaccc0f74a":["10fcb49fe038c75fa2e8f8029db57203be947728"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"5f0e44787cffbb978aa2182761e3f9b184545a1e":["bc8344f9e8b303df6f90068c5dc0bcfaccc0f74a"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}