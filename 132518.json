{"path":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#getCloudSolrClient(String,boolean,HttpClient).mjava","commits":[{"id":"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","date":1460069869,"type":0,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#getCloudSolrClient(String,boolean,HttpClient).mjava","pathOld":"/dev/null","sourceNew":"  public static CloudSolrClient getCloudSolrClient(String zkHost, boolean shardLeadersOnly, HttpClient httpClient) {\n    if (random().nextBoolean()) {\n      return new CloudSolrClient(zkHost, shardLeadersOnly, httpClient);\n    }\n    \n    if (shardLeadersOnly) {\n      return new CloudSolrClient.Builder()\n          .withZkHost(zkHost)\n          .withHttpClient(httpClient)\n          .sendUpdatesOnlyToShardLeaders()\n          .build();\n    }\n    return new CloudSolrClient.Builder()\n        .withZkHost(zkHost)\n        .withHttpClient(httpClient)\n        .sendUpdatesToAllReplicasInShard()\n        .build();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["c7d763eff38c4e1702b60d626f9c8d39f9ad8af8"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","date":1460110033,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#getCloudSolrClient(String,boolean,HttpClient).mjava","pathOld":"/dev/null","sourceNew":"  public static CloudSolrClient getCloudSolrClient(String zkHost, boolean shardLeadersOnly, HttpClient httpClient) {\n    if (random().nextBoolean()) {\n      return new CloudSolrClient(zkHost, shardLeadersOnly, httpClient);\n    }\n    \n    if (shardLeadersOnly) {\n      return new CloudSolrClient.Builder()\n          .withZkHost(zkHost)\n          .withHttpClient(httpClient)\n          .sendUpdatesOnlyToShardLeaders()\n          .build();\n    }\n    return new CloudSolrClient.Builder()\n        .withZkHost(zkHost)\n        .withHttpClient(httpClient)\n        .sendUpdatesToAllReplicasInShard()\n        .build();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"291857aeee5ec20518ddce131ac4362c0075ebe1","date":1467882201,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#getCloudSolrClient(String,boolean,HttpClient).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#getCloudSolrClient(String,boolean,HttpClient).mjava","sourceNew":"  public static CloudSolrClient getCloudSolrClient(String zkHost, boolean shardLeadersOnly, HttpClient httpClient) {\n    if (random().nextBoolean()) {\n      return new CloudSolrClient(zkHost, shardLeadersOnly, httpClient);\n    }\n    \n    if (shardLeadersOnly) {\n      return new CloudSolrClientBuilder()\n          .withZkHost(zkHost)\n          .withHttpClient(httpClient)\n          .sendUpdatesOnlyToShardLeaders()\n          .build();\n    }\n    return new CloudSolrClientBuilder()\n        .withZkHost(zkHost)\n        .withHttpClient(httpClient)\n        .sendUpdatesToAllReplicasInShard()\n        .build();\n  }\n\n","sourceOld":"  public static CloudSolrClient getCloudSolrClient(String zkHost, boolean shardLeadersOnly, HttpClient httpClient) {\n    if (random().nextBoolean()) {\n      return new CloudSolrClient(zkHost, shardLeadersOnly, httpClient);\n    }\n    \n    if (shardLeadersOnly) {\n      return new CloudSolrClient.Builder()\n          .withZkHost(zkHost)\n          .withHttpClient(httpClient)\n          .sendUpdatesOnlyToShardLeaders()\n          .build();\n    }\n    return new CloudSolrClient.Builder()\n        .withZkHost(zkHost)\n        .withHttpClient(httpClient)\n        .sendUpdatesToAllReplicasInShard()\n        .build();\n  }\n\n","bugFix":null,"bugIntro":["c7d763eff38c4e1702b60d626f9c8d39f9ad8af8"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#getCloudSolrClient(String,boolean,HttpClient).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#getCloudSolrClient(String,boolean,HttpClient).mjava","sourceNew":"  public static CloudSolrClient getCloudSolrClient(String zkHost, boolean shardLeadersOnly, HttpClient httpClient) {\n    if (random().nextBoolean()) {\n      return new CloudSolrClient(zkHost, shardLeadersOnly, httpClient);\n    }\n    \n    if (shardLeadersOnly) {\n      return new CloudSolrClientBuilder()\n          .withZkHost(zkHost)\n          .withHttpClient(httpClient)\n          .sendUpdatesOnlyToShardLeaders()\n          .build();\n    }\n    return new CloudSolrClientBuilder()\n        .withZkHost(zkHost)\n        .withHttpClient(httpClient)\n        .sendUpdatesToAllReplicasInShard()\n        .build();\n  }\n\n","sourceOld":"  public static CloudSolrClient getCloudSolrClient(String zkHost, boolean shardLeadersOnly, HttpClient httpClient) {\n    if (random().nextBoolean()) {\n      return new CloudSolrClient(zkHost, shardLeadersOnly, httpClient);\n    }\n    \n    if (shardLeadersOnly) {\n      return new CloudSolrClient.Builder()\n          .withZkHost(zkHost)\n          .withHttpClient(httpClient)\n          .sendUpdatesOnlyToShardLeaders()\n          .build();\n    }\n    return new CloudSolrClient.Builder()\n        .withZkHost(zkHost)\n        .withHttpClient(httpClient)\n        .sendUpdatesToAllReplicasInShard()\n        .build();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"63a1978c6710c767fa084741e3d6424840003a62","date":1495850671,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#getCloudSolrClient(String,boolean,HttpClient).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#getCloudSolrClient(String,boolean,HttpClient).mjava","sourceNew":"  /**\n   * This method <i>may</i> randomize unspecified aspects of the resulting SolrClient.\n   * Tests that do not wish to have any randomized behavior should use the \n   * {@link org.apache.solr.client.solrj.impl.CloudSolrClient.Builder} class directly\n   */ \n  public static CloudSolrClient getCloudSolrClient(String zkHost, boolean shardLeadersOnly, HttpClient httpClient) {\n    if (shardLeadersOnly) {\n      return new CloudSolrClientBuilder()\n          .withZkHost(zkHost)\n          .withHttpClient(httpClient)\n          .sendUpdatesOnlyToShardLeaders()\n          .build();\n    }\n    return new CloudSolrClientBuilder()\n        .withZkHost(zkHost)\n        .withHttpClient(httpClient)\n        .sendUpdatesToAllReplicasInShard()\n        .build();\n  }\n\n","sourceOld":"  public static CloudSolrClient getCloudSolrClient(String zkHost, boolean shardLeadersOnly, HttpClient httpClient) {\n    if (random().nextBoolean()) {\n      return new CloudSolrClient(zkHost, shardLeadersOnly, httpClient);\n    }\n    \n    if (shardLeadersOnly) {\n      return new CloudSolrClientBuilder()\n          .withZkHost(zkHost)\n          .withHttpClient(httpClient)\n          .sendUpdatesOnlyToShardLeaders()\n          .build();\n    }\n    return new CloudSolrClientBuilder()\n        .withZkHost(zkHost)\n        .withHttpClient(httpClient)\n        .sendUpdatesToAllReplicasInShard()\n        .build();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d1f5728f32a4a256b36cfabd7a2636452f599bb9","date":1496231774,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#getCloudSolrClient(String,boolean,HttpClient).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#getCloudSolrClient(String,boolean,HttpClient).mjava","sourceNew":"  /**\n   * This method <i>may</i> randomize unspecified aspects of the resulting SolrClient.\n   * Tests that do not wish to have any randomized behavior should use the \n   * {@link org.apache.solr.client.solrj.impl.CloudSolrClient.Builder} class directly\n   */ \n  public static CloudSolrClient getCloudSolrClient(String zkHost, boolean shardLeadersOnly, HttpClient httpClient) {\n    if (shardLeadersOnly) {\n      return new CloudSolrClientBuilder()\n          .withZkHost(zkHost)\n          .withHttpClient(httpClient)\n          .sendUpdatesOnlyToShardLeaders()\n          .build();\n    }\n    return new CloudSolrClientBuilder()\n        .withZkHost(zkHost)\n        .withHttpClient(httpClient)\n        .sendUpdatesToAllReplicasInShard()\n        .build();\n  }\n\n","sourceOld":"  public static CloudSolrClient getCloudSolrClient(String zkHost, boolean shardLeadersOnly, HttpClient httpClient) {\n    if (random().nextBoolean()) {\n      return new CloudSolrClient(zkHost, shardLeadersOnly, httpClient);\n    }\n    \n    if (shardLeadersOnly) {\n      return new CloudSolrClientBuilder()\n          .withZkHost(zkHost)\n          .withHttpClient(httpClient)\n          .sendUpdatesOnlyToShardLeaders()\n          .build();\n    }\n    return new CloudSolrClientBuilder()\n        .withZkHost(zkHost)\n        .withHttpClient(httpClient)\n        .sendUpdatesToAllReplicasInShard()\n        .build();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#getCloudSolrClient(String,boolean,HttpClient).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#getCloudSolrClient(String,boolean,HttpClient).mjava","sourceNew":"  /**\n   * This method <i>may</i> randomize unspecified aspects of the resulting SolrClient.\n   * Tests that do not wish to have any randomized behavior should use the \n   * {@link org.apache.solr.client.solrj.impl.CloudSolrClient.Builder} class directly\n   */ \n  public static CloudSolrClient getCloudSolrClient(String zkHost, boolean shardLeadersOnly, HttpClient httpClient) {\n    if (shardLeadersOnly) {\n      return new CloudSolrClientBuilder()\n          .withZkHost(zkHost)\n          .withHttpClient(httpClient)\n          .sendUpdatesOnlyToShardLeaders()\n          .build();\n    }\n    return new CloudSolrClientBuilder()\n        .withZkHost(zkHost)\n        .withHttpClient(httpClient)\n        .sendUpdatesToAllReplicasInShard()\n        .build();\n  }\n\n","sourceOld":"  public static CloudSolrClient getCloudSolrClient(String zkHost, boolean shardLeadersOnly, HttpClient httpClient) {\n    if (random().nextBoolean()) {\n      return new CloudSolrClient(zkHost, shardLeadersOnly, httpClient);\n    }\n    \n    if (shardLeadersOnly) {\n      return new CloudSolrClientBuilder()\n          .withZkHost(zkHost)\n          .withHttpClient(httpClient)\n          .sendUpdatesOnlyToShardLeaders()\n          .build();\n    }\n    return new CloudSolrClientBuilder()\n        .withZkHost(zkHost)\n        .withHttpClient(httpClient)\n        .sendUpdatesToAllReplicasInShard()\n        .build();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7d763eff38c4e1702b60d626f9c8d39f9ad8af8","date":1520696743,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#getCloudSolrClient(String,boolean,HttpClient).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#getCloudSolrClient(String,boolean,HttpClient).mjava","sourceNew":"  /**\n   * This method <i>may</i> randomize unspecified aspects of the resulting SolrClient.\n   * Tests that do not wish to have any randomized behavior should use the \n   * {@link org.apache.solr.client.solrj.impl.CloudSolrClient.Builder} class directly\n   */ \n  public static CloudSolrClient getCloudSolrClient(String zkHost, boolean shardLeadersOnly, HttpClient httpClient) {\n    if (shardLeadersOnly) {\n      return new CloudSolrClientBuilder(Collections.singletonList(zkHost), Optional.empty())\n          .withHttpClient(httpClient)\n          .sendUpdatesOnlyToShardLeaders()\n          .build();\n    }\n    return new CloudSolrClientBuilder(Collections.singletonList(zkHost), Optional.empty())\n        .withHttpClient(httpClient)\n        .sendUpdatesToAllReplicasInShard()\n        .build();\n  }\n\n","sourceOld":"  /**\n   * This method <i>may</i> randomize unspecified aspects of the resulting SolrClient.\n   * Tests that do not wish to have any randomized behavior should use the \n   * {@link org.apache.solr.client.solrj.impl.CloudSolrClient.Builder} class directly\n   */ \n  public static CloudSolrClient getCloudSolrClient(String zkHost, boolean shardLeadersOnly, HttpClient httpClient) {\n    if (shardLeadersOnly) {\n      return new CloudSolrClientBuilder()\n          .withZkHost(zkHost)\n          .withHttpClient(httpClient)\n          .sendUpdatesOnlyToShardLeaders()\n          .build();\n    }\n    return new CloudSolrClientBuilder()\n        .withZkHost(zkHost)\n        .withHttpClient(httpClient)\n        .sendUpdatesToAllReplicasInShard()\n        .build();\n  }\n\n","bugFix":["e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","291857aeee5ec20518ddce131ac4362c0075ebe1"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["291857aeee5ec20518ddce131ac4362c0075ebe1","63a1978c6710c767fa084741e3d6424840003a62"],"63a1978c6710c767fa084741e3d6424840003a62":["291857aeee5ec20518ddce131ac4362c0075ebe1"],"c7d763eff38c4e1702b60d626f9c8d39f9ad8af8":["d1f5728f32a4a256b36cfabd7a2636452f599bb9"],"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e3c94a8b8bf47db4f968d9ae510ec8bbe1372088"],"291857aeee5ec20518ddce131ac4362c0075ebe1":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"d1f5728f32a4a256b36cfabd7a2636452f599bb9":["291857aeee5ec20518ddce131ac4362c0075ebe1","63a1978c6710c767fa084741e3d6424840003a62"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","291857aeee5ec20518ddce131ac4362c0075ebe1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c7d763eff38c4e1702b60d626f9c8d39f9ad8af8"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"63a1978c6710c767fa084741e3d6424840003a62":["e9017cf144952056066919f1ebc7897ff9bd71b1","d1f5728f32a4a256b36cfabd7a2636452f599bb9"],"c7d763eff38c4e1702b60d626f9c8d39f9ad8af8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["291857aeee5ec20518ddce131ac4362c0075ebe1","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"291857aeee5ec20518ddce131ac4362c0075ebe1":["e9017cf144952056066919f1ebc7897ff9bd71b1","63a1978c6710c767fa084741e3d6424840003a62","d1f5728f32a4a256b36cfabd7a2636452f599bb9","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"d1f5728f32a4a256b36cfabd7a2636452f599bb9":["c7d763eff38c4e1702b60d626f9c8d39f9ad8af8"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}