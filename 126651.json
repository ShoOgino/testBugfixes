{"path":"lucene/core/src/test/org/apache/lucene/search/TestControlledRealTimeReopenThread#doAfterWriter(ExecutorService).mjava","commits":[{"id":"c2045b132a2396bb23dff28d2d9f349a6907d36e","date":1367513076,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestControlledRealTimeReopenThread#doAfterWriter(ExecutorService).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestNRTManager#doAfterWriter(ExecutorService).mjava","sourceNew":"  @Override\n  protected void doAfterWriter(final ExecutorService es) throws Exception {\n    final double minReopenSec = 0.01 + 0.05 * random().nextDouble();\n    final double maxReopenSec = minReopenSec * (1.0 + 10 * random().nextDouble());\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: make SearcherManager maxReopenSec=\" + maxReopenSec + \" minReopenSec=\" + minReopenSec);\n    }\n\n    genWriter = new TrackingIndexWriter(writer);\n\n    final SearcherFactory sf = new SearcherFactory() {\n        @Override\n        public IndexSearcher newSearcher(IndexReader r) throws IOException {\n          TestControlledRealTimeReopenThread.this.warmCalled = true;\n          IndexSearcher s = new IndexSearcher(r, es);\n          s.search(new TermQuery(new Term(\"body\", \"united\")), 10);\n          return s;\n        }\n      };\n\n    nrtNoDeletes = new SearcherManager(writer, false, sf);\n    nrtDeletes = new SearcherManager(writer, true, sf);\n                         \n    nrtDeletesThread = new ControlledRealTimeReopenThread<IndexSearcher>(genWriter, nrtDeletes, maxReopenSec, minReopenSec);\n    nrtDeletesThread.setName(\"NRTDeletes Reopen Thread\");\n    nrtDeletesThread.setPriority(Math.min(Thread.currentThread().getPriority()+2, Thread.MAX_PRIORITY));\n    nrtDeletesThread.setDaemon(true);\n    nrtDeletesThread.start();\n\n    nrtNoDeletesThread = new ControlledRealTimeReopenThread<IndexSearcher>(genWriter, nrtNoDeletes, maxReopenSec, minReopenSec);\n    nrtNoDeletesThread.setName(\"NRTNoDeletes Reopen Thread\");\n    nrtNoDeletesThread.setPriority(Math.min(Thread.currentThread().getPriority()+2, Thread.MAX_PRIORITY));\n    nrtNoDeletesThread.setDaemon(true);\n    nrtNoDeletesThread.start();\n  }\n\n","sourceOld":"  @Override\n  protected void doAfterWriter(final ExecutorService es) throws Exception {\n    final double minReopenSec = 0.01 + 0.05 * random().nextDouble();\n    final double maxReopenSec = minReopenSec * (1.0 + 10 * random().nextDouble());\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: make NRTManager maxReopenSec=\" + maxReopenSec + \" minReopenSec=\" + minReopenSec);\n    }\n\n    genWriter = new NRTManager.TrackingIndexWriter(writer);\n\n    final SearcherFactory sf = new SearcherFactory() {\n        @Override\n        public IndexSearcher newSearcher(IndexReader r) throws IOException {\n          TestNRTManager.this.warmCalled = true;\n          IndexSearcher s = new IndexSearcher(r, es);\n          s.search(new TermQuery(new Term(\"body\", \"united\")), 10);\n          return s;\n        }\n      };\n\n    nrtNoDeletes = new NRTManager(genWriter, sf, false);\n    nrtDeletes = new NRTManager(genWriter, sf, true);\n                         \n    nrtDeletesThread = new NRTManagerReopenThread(nrtDeletes, maxReopenSec, minReopenSec);\n    nrtDeletesThread.setName(\"NRTDeletes Reopen Thread\");\n    nrtDeletesThread.setPriority(Math.min(Thread.currentThread().getPriority()+2, Thread.MAX_PRIORITY));\n    nrtDeletesThread.setDaemon(true);\n    nrtDeletesThread.start();\n\n    nrtNoDeletesThread = new NRTManagerReopenThread(nrtNoDeletes, maxReopenSec, minReopenSec);\n    nrtNoDeletesThread.setName(\"NRTNoDeletes Reopen Thread\");\n    nrtNoDeletesThread.setPriority(Math.min(Thread.currentThread().getPriority()+2, Thread.MAX_PRIORITY));\n    nrtNoDeletesThread.setDaemon(true);\n    nrtNoDeletesThread.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestControlledRealTimeReopenThread#doAfterWriter(ExecutorService).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestControlledRealTimeReopenThread#doAfterWriter(ExecutorService).mjava","sourceNew":"  @Override\n  protected void doAfterWriter(final ExecutorService es) throws Exception {\n    final double minReopenSec = 0.01 + 0.05 * random().nextDouble();\n    final double maxReopenSec = minReopenSec * (1.0 + 10 * random().nextDouble());\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: make SearcherManager maxReopenSec=\" + maxReopenSec + \" minReopenSec=\" + minReopenSec);\n    }\n\n    genWriter = new TrackingIndexWriter(writer);\n\n    final SearcherFactory sf = new SearcherFactory() {\n        @Override\n        public IndexSearcher newSearcher(IndexReader r) throws IOException {\n          TestControlledRealTimeReopenThread.this.warmCalled = true;\n          IndexSearcher s = new IndexSearcher(r, es);\n          s.search(new TermQuery(new Term(\"body\", \"united\")), 10);\n          return s;\n        }\n      };\n\n    nrtNoDeletes = new SearcherManager(writer, false, sf);\n    nrtDeletes = new SearcherManager(writer, true, sf);\n                         \n    nrtDeletesThread = new ControlledRealTimeReopenThread<>(genWriter, nrtDeletes, maxReopenSec, minReopenSec);\n    nrtDeletesThread.setName(\"NRTDeletes Reopen Thread\");\n    nrtDeletesThread.setPriority(Math.min(Thread.currentThread().getPriority()+2, Thread.MAX_PRIORITY));\n    nrtDeletesThread.setDaemon(true);\n    nrtDeletesThread.start();\n\n    nrtNoDeletesThread = new ControlledRealTimeReopenThread<>(genWriter, nrtNoDeletes, maxReopenSec, minReopenSec);\n    nrtNoDeletesThread.setName(\"NRTNoDeletes Reopen Thread\");\n    nrtNoDeletesThread.setPriority(Math.min(Thread.currentThread().getPriority()+2, Thread.MAX_PRIORITY));\n    nrtNoDeletesThread.setDaemon(true);\n    nrtNoDeletesThread.start();\n  }\n\n","sourceOld":"  @Override\n  protected void doAfterWriter(final ExecutorService es) throws Exception {\n    final double minReopenSec = 0.01 + 0.05 * random().nextDouble();\n    final double maxReopenSec = minReopenSec * (1.0 + 10 * random().nextDouble());\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: make SearcherManager maxReopenSec=\" + maxReopenSec + \" minReopenSec=\" + minReopenSec);\n    }\n\n    genWriter = new TrackingIndexWriter(writer);\n\n    final SearcherFactory sf = new SearcherFactory() {\n        @Override\n        public IndexSearcher newSearcher(IndexReader r) throws IOException {\n          TestControlledRealTimeReopenThread.this.warmCalled = true;\n          IndexSearcher s = new IndexSearcher(r, es);\n          s.search(new TermQuery(new Term(\"body\", \"united\")), 10);\n          return s;\n        }\n      };\n\n    nrtNoDeletes = new SearcherManager(writer, false, sf);\n    nrtDeletes = new SearcherManager(writer, true, sf);\n                         \n    nrtDeletesThread = new ControlledRealTimeReopenThread<IndexSearcher>(genWriter, nrtDeletes, maxReopenSec, minReopenSec);\n    nrtDeletesThread.setName(\"NRTDeletes Reopen Thread\");\n    nrtDeletesThread.setPriority(Math.min(Thread.currentThread().getPriority()+2, Thread.MAX_PRIORITY));\n    nrtDeletesThread.setDaemon(true);\n    nrtDeletesThread.start();\n\n    nrtNoDeletesThread = new ControlledRealTimeReopenThread<IndexSearcher>(genWriter, nrtNoDeletes, maxReopenSec, minReopenSec);\n    nrtNoDeletesThread.setName(\"NRTNoDeletes Reopen Thread\");\n    nrtNoDeletesThread.setPriority(Math.min(Thread.currentThread().getPriority()+2, Thread.MAX_PRIORITY));\n    nrtNoDeletesThread.setDaemon(true);\n    nrtNoDeletesThread.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e0dfae671422e7453a9199aa320f91427cd80d60","date":1427895926,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestControlledRealTimeReopenThread#doAfterWriter(ExecutorService).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestControlledRealTimeReopenThread#doAfterWriter(ExecutorService).mjava","sourceNew":"  @Override\n  protected void doAfterWriter(final ExecutorService es) throws Exception {\n    final double minReopenSec = 0.01 + 0.05 * random().nextDouble();\n    final double maxReopenSec = minReopenSec * (1.0 + 10 * random().nextDouble());\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: make SearcherManager maxReopenSec=\" + maxReopenSec + \" minReopenSec=\" + minReopenSec);\n    }\n\n    genWriter = new TrackingIndexWriter(writer);\n\n    final SearcherFactory sf = new SearcherFactory() {\n        @Override\n        public IndexSearcher newSearcher(IndexReader r, IndexReader previous) throws IOException {\n          TestControlledRealTimeReopenThread.this.warmCalled = true;\n          IndexSearcher s = new IndexSearcher(r, es);\n          s.search(new TermQuery(new Term(\"body\", \"united\")), 10);\n          return s;\n        }\n      };\n\n    nrtNoDeletes = new SearcherManager(writer, false, sf);\n    nrtDeletes = new SearcherManager(writer, true, sf);\n                         \n    nrtDeletesThread = new ControlledRealTimeReopenThread<>(genWriter, nrtDeletes, maxReopenSec, minReopenSec);\n    nrtDeletesThread.setName(\"NRTDeletes Reopen Thread\");\n    nrtDeletesThread.setPriority(Math.min(Thread.currentThread().getPriority()+2, Thread.MAX_PRIORITY));\n    nrtDeletesThread.setDaemon(true);\n    nrtDeletesThread.start();\n\n    nrtNoDeletesThread = new ControlledRealTimeReopenThread<>(genWriter, nrtNoDeletes, maxReopenSec, minReopenSec);\n    nrtNoDeletesThread.setName(\"NRTNoDeletes Reopen Thread\");\n    nrtNoDeletesThread.setPriority(Math.min(Thread.currentThread().getPriority()+2, Thread.MAX_PRIORITY));\n    nrtNoDeletesThread.setDaemon(true);\n    nrtNoDeletesThread.start();\n  }\n\n","sourceOld":"  @Override\n  protected void doAfterWriter(final ExecutorService es) throws Exception {\n    final double minReopenSec = 0.01 + 0.05 * random().nextDouble();\n    final double maxReopenSec = minReopenSec * (1.0 + 10 * random().nextDouble());\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: make SearcherManager maxReopenSec=\" + maxReopenSec + \" minReopenSec=\" + minReopenSec);\n    }\n\n    genWriter = new TrackingIndexWriter(writer);\n\n    final SearcherFactory sf = new SearcherFactory() {\n        @Override\n        public IndexSearcher newSearcher(IndexReader r) throws IOException {\n          TestControlledRealTimeReopenThread.this.warmCalled = true;\n          IndexSearcher s = new IndexSearcher(r, es);\n          s.search(new TermQuery(new Term(\"body\", \"united\")), 10);\n          return s;\n        }\n      };\n\n    nrtNoDeletes = new SearcherManager(writer, false, sf);\n    nrtDeletes = new SearcherManager(writer, true, sf);\n                         \n    nrtDeletesThread = new ControlledRealTimeReopenThread<>(genWriter, nrtDeletes, maxReopenSec, minReopenSec);\n    nrtDeletesThread.setName(\"NRTDeletes Reopen Thread\");\n    nrtDeletesThread.setPriority(Math.min(Thread.currentThread().getPriority()+2, Thread.MAX_PRIORITY));\n    nrtDeletesThread.setDaemon(true);\n    nrtDeletesThread.start();\n\n    nrtNoDeletesThread = new ControlledRealTimeReopenThread<>(genWriter, nrtNoDeletes, maxReopenSec, minReopenSec);\n    nrtNoDeletesThread.setName(\"NRTNoDeletes Reopen Thread\");\n    nrtNoDeletesThread.setPriority(Math.min(Thread.currentThread().getPriority()+2, Thread.MAX_PRIORITY));\n    nrtNoDeletesThread.setDaemon(true);\n    nrtNoDeletesThread.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0c924d4069ef5a5bc479a493befe0121aada6896","date":1427901860,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestControlledRealTimeReopenThread#doAfterWriter(ExecutorService).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestControlledRealTimeReopenThread#doAfterWriter(ExecutorService).mjava","sourceNew":"  @Override\n  protected void doAfterWriter(final ExecutorService es) throws Exception {\n    final double minReopenSec = 0.01 + 0.05 * random().nextDouble();\n    final double maxReopenSec = minReopenSec * (1.0 + 10 * random().nextDouble());\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: make SearcherManager maxReopenSec=\" + maxReopenSec + \" minReopenSec=\" + minReopenSec);\n    }\n\n    genWriter = new TrackingIndexWriter(writer);\n\n    final SearcherFactory sf = new SearcherFactory() {\n        @Override\n        public IndexSearcher newSearcher(IndexReader r, IndexReader previous) throws IOException {\n          TestControlledRealTimeReopenThread.this.warmCalled = true;\n          IndexSearcher s = new IndexSearcher(r, es);\n          s.search(new TermQuery(new Term(\"body\", \"united\")), 10);\n          return s;\n        }\n      };\n\n    nrtNoDeletes = new SearcherManager(writer, false, sf);\n    nrtDeletes = new SearcherManager(writer, true, sf);\n                         \n    nrtDeletesThread = new ControlledRealTimeReopenThread<>(genWriter, nrtDeletes, maxReopenSec, minReopenSec);\n    nrtDeletesThread.setName(\"NRTDeletes Reopen Thread\");\n    nrtDeletesThread.setPriority(Math.min(Thread.currentThread().getPriority()+2, Thread.MAX_PRIORITY));\n    nrtDeletesThread.setDaemon(true);\n    nrtDeletesThread.start();\n\n    nrtNoDeletesThread = new ControlledRealTimeReopenThread<>(genWriter, nrtNoDeletes, maxReopenSec, minReopenSec);\n    nrtNoDeletesThread.setName(\"NRTNoDeletes Reopen Thread\");\n    nrtNoDeletesThread.setPriority(Math.min(Thread.currentThread().getPriority()+2, Thread.MAX_PRIORITY));\n    nrtNoDeletesThread.setDaemon(true);\n    nrtNoDeletesThread.start();\n  }\n\n","sourceOld":"  @Override\n  protected void doAfterWriter(final ExecutorService es) throws Exception {\n    final double minReopenSec = 0.01 + 0.05 * random().nextDouble();\n    final double maxReopenSec = minReopenSec * (1.0 + 10 * random().nextDouble());\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: make SearcherManager maxReopenSec=\" + maxReopenSec + \" minReopenSec=\" + minReopenSec);\n    }\n\n    genWriter = new TrackingIndexWriter(writer);\n\n    final SearcherFactory sf = new SearcherFactory() {\n        @Override\n        public IndexSearcher newSearcher(IndexReader r) throws IOException {\n          TestControlledRealTimeReopenThread.this.warmCalled = true;\n          IndexSearcher s = new IndexSearcher(r, es);\n          s.search(new TermQuery(new Term(\"body\", \"united\")), 10);\n          return s;\n        }\n      };\n\n    nrtNoDeletes = new SearcherManager(writer, false, sf);\n    nrtDeletes = new SearcherManager(writer, true, sf);\n                         \n    nrtDeletesThread = new ControlledRealTimeReopenThread<>(genWriter, nrtDeletes, maxReopenSec, minReopenSec);\n    nrtDeletesThread.setName(\"NRTDeletes Reopen Thread\");\n    nrtDeletesThread.setPriority(Math.min(Thread.currentThread().getPriority()+2, Thread.MAX_PRIORITY));\n    nrtDeletesThread.setDaemon(true);\n    nrtDeletesThread.start();\n\n    nrtNoDeletesThread = new ControlledRealTimeReopenThread<>(genWriter, nrtNoDeletes, maxReopenSec, minReopenSec);\n    nrtNoDeletesThread.setName(\"NRTNoDeletes Reopen Thread\");\n    nrtNoDeletesThread.setPriority(Math.min(Thread.currentThread().getPriority()+2, Thread.MAX_PRIORITY));\n    nrtNoDeletesThread.setDaemon(true);\n    nrtNoDeletesThread.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b516a692d03225c8f0e81a13ceed2dc32bb457d","date":1453411951,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestControlledRealTimeReopenThread#doAfterWriter(ExecutorService).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestControlledRealTimeReopenThread#doAfterWriter(ExecutorService).mjava","sourceNew":"  @Override\n  protected void doAfterWriter(final ExecutorService es) throws Exception {\n    final double minReopenSec = 0.01 + 0.05 * random().nextDouble();\n    final double maxReopenSec = minReopenSec * (1.0 + 10 * random().nextDouble());\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: make SearcherManager maxReopenSec=\" + maxReopenSec + \" minReopenSec=\" + minReopenSec);\n    }\n\n    genWriter = new TrackingIndexWriter(writer);\n\n    final SearcherFactory sf = new SearcherFactory() {\n        @Override\n        public IndexSearcher newSearcher(IndexReader r, IndexReader previous) throws IOException {\n          TestControlledRealTimeReopenThread.this.warmCalled = true;\n          IndexSearcher s = new IndexSearcher(r, es);\n          s.search(new TermQuery(new Term(\"body\", \"united\")), 10);\n          return s;\n        }\n      };\n\n    nrtNoDeletes = new SearcherManager(writer, false, sf);\n    nrtDeletes = new SearcherManager(writer, sf);\n                         \n    nrtDeletesThread = new ControlledRealTimeReopenThread<>(genWriter, nrtDeletes, maxReopenSec, minReopenSec);\n    nrtDeletesThread.setName(\"NRTDeletes Reopen Thread\");\n    nrtDeletesThread.setPriority(Math.min(Thread.currentThread().getPriority()+2, Thread.MAX_PRIORITY));\n    nrtDeletesThread.setDaemon(true);\n    nrtDeletesThread.start();\n\n    nrtNoDeletesThread = new ControlledRealTimeReopenThread<>(genWriter, nrtNoDeletes, maxReopenSec, minReopenSec);\n    nrtNoDeletesThread.setName(\"NRTNoDeletes Reopen Thread\");\n    nrtNoDeletesThread.setPriority(Math.min(Thread.currentThread().getPriority()+2, Thread.MAX_PRIORITY));\n    nrtNoDeletesThread.setDaemon(true);\n    nrtNoDeletesThread.start();\n  }\n\n","sourceOld":"  @Override\n  protected void doAfterWriter(final ExecutorService es) throws Exception {\n    final double minReopenSec = 0.01 + 0.05 * random().nextDouble();\n    final double maxReopenSec = minReopenSec * (1.0 + 10 * random().nextDouble());\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: make SearcherManager maxReopenSec=\" + maxReopenSec + \" minReopenSec=\" + minReopenSec);\n    }\n\n    genWriter = new TrackingIndexWriter(writer);\n\n    final SearcherFactory sf = new SearcherFactory() {\n        @Override\n        public IndexSearcher newSearcher(IndexReader r, IndexReader previous) throws IOException {\n          TestControlledRealTimeReopenThread.this.warmCalled = true;\n          IndexSearcher s = new IndexSearcher(r, es);\n          s.search(new TermQuery(new Term(\"body\", \"united\")), 10);\n          return s;\n        }\n      };\n\n    nrtNoDeletes = new SearcherManager(writer, false, sf);\n    nrtDeletes = new SearcherManager(writer, true, sf);\n                         \n    nrtDeletesThread = new ControlledRealTimeReopenThread<>(genWriter, nrtDeletes, maxReopenSec, minReopenSec);\n    nrtDeletesThread.setName(\"NRTDeletes Reopen Thread\");\n    nrtDeletesThread.setPriority(Math.min(Thread.currentThread().getPriority()+2, Thread.MAX_PRIORITY));\n    nrtDeletesThread.setDaemon(true);\n    nrtDeletesThread.start();\n\n    nrtNoDeletesThread = new ControlledRealTimeReopenThread<>(genWriter, nrtNoDeletes, maxReopenSec, minReopenSec);\n    nrtNoDeletesThread.setName(\"NRTNoDeletes Reopen Thread\");\n    nrtNoDeletesThread.setPriority(Math.min(Thread.currentThread().getPriority()+2, Thread.MAX_PRIORITY));\n    nrtNoDeletesThread.setDaemon(true);\n    nrtNoDeletesThread.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d49a158012a8ff48f328a4558e4bfcffbaed16f","date":1453677440,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestControlledRealTimeReopenThread#doAfterWriter(ExecutorService).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestControlledRealTimeReopenThread#doAfterWriter(ExecutorService).mjava","sourceNew":"  @Override\n  protected void doAfterWriter(final ExecutorService es) throws Exception {\n    final double minReopenSec = 0.01 + 0.05 * random().nextDouble();\n    final double maxReopenSec = minReopenSec * (1.0 + 10 * random().nextDouble());\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: make SearcherManager maxReopenSec=\" + maxReopenSec + \" minReopenSec=\" + minReopenSec);\n    }\n\n    genWriter = new TrackingIndexWriter(writer);\n\n    final SearcherFactory sf = new SearcherFactory() {\n        @Override\n        public IndexSearcher newSearcher(IndexReader r, IndexReader previous) throws IOException {\n          TestControlledRealTimeReopenThread.this.warmCalled = true;\n          IndexSearcher s = new IndexSearcher(r, es);\n          s.search(new TermQuery(new Term(\"body\", \"united\")), 10);\n          return s;\n        }\n      };\n\n    nrtNoDeletes = new SearcherManager(writer, false, false, sf);\n    nrtDeletes = new SearcherManager(writer, sf);\n                         \n    nrtDeletesThread = new ControlledRealTimeReopenThread<>(genWriter, nrtDeletes, maxReopenSec, minReopenSec);\n    nrtDeletesThread.setName(\"NRTDeletes Reopen Thread\");\n    nrtDeletesThread.setPriority(Math.min(Thread.currentThread().getPriority()+2, Thread.MAX_PRIORITY));\n    nrtDeletesThread.setDaemon(true);\n    nrtDeletesThread.start();\n\n    nrtNoDeletesThread = new ControlledRealTimeReopenThread<>(genWriter, nrtNoDeletes, maxReopenSec, minReopenSec);\n    nrtNoDeletesThread.setName(\"NRTNoDeletes Reopen Thread\");\n    nrtNoDeletesThread.setPriority(Math.min(Thread.currentThread().getPriority()+2, Thread.MAX_PRIORITY));\n    nrtNoDeletesThread.setDaemon(true);\n    nrtNoDeletesThread.start();\n  }\n\n","sourceOld":"  @Override\n  protected void doAfterWriter(final ExecutorService es) throws Exception {\n    final double minReopenSec = 0.01 + 0.05 * random().nextDouble();\n    final double maxReopenSec = minReopenSec * (1.0 + 10 * random().nextDouble());\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: make SearcherManager maxReopenSec=\" + maxReopenSec + \" minReopenSec=\" + minReopenSec);\n    }\n\n    genWriter = new TrackingIndexWriter(writer);\n\n    final SearcherFactory sf = new SearcherFactory() {\n        @Override\n        public IndexSearcher newSearcher(IndexReader r, IndexReader previous) throws IOException {\n          TestControlledRealTimeReopenThread.this.warmCalled = true;\n          IndexSearcher s = new IndexSearcher(r, es);\n          s.search(new TermQuery(new Term(\"body\", \"united\")), 10);\n          return s;\n        }\n      };\n\n    nrtNoDeletes = new SearcherManager(writer, false, sf);\n    nrtDeletes = new SearcherManager(writer, sf);\n                         \n    nrtDeletesThread = new ControlledRealTimeReopenThread<>(genWriter, nrtDeletes, maxReopenSec, minReopenSec);\n    nrtDeletesThread.setName(\"NRTDeletes Reopen Thread\");\n    nrtDeletesThread.setPriority(Math.min(Thread.currentThread().getPriority()+2, Thread.MAX_PRIORITY));\n    nrtDeletesThread.setDaemon(true);\n    nrtDeletesThread.start();\n\n    nrtNoDeletesThread = new ControlledRealTimeReopenThread<>(genWriter, nrtNoDeletes, maxReopenSec, minReopenSec);\n    nrtNoDeletesThread.setName(\"NRTNoDeletes Reopen Thread\");\n    nrtNoDeletesThread.setPriority(Math.min(Thread.currentThread().getPriority()+2, Thread.MAX_PRIORITY));\n    nrtNoDeletesThread.setDaemon(true);\n    nrtNoDeletesThread.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"68496c2200e559fb7802f7575427b7a482659afb","date":1455207618,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestControlledRealTimeReopenThread#doAfterWriter(ExecutorService).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestControlledRealTimeReopenThread#doAfterWriter(ExecutorService).mjava","sourceNew":"  @Override\n  protected void doAfterWriter(final ExecutorService es) throws Exception {\n    final double minReopenSec = 0.01 + 0.05 * random().nextDouble();\n    final double maxReopenSec = minReopenSec * (1.0 + 10 * random().nextDouble());\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: make SearcherManager maxReopenSec=\" + maxReopenSec + \" minReopenSec=\" + minReopenSec);\n    }\n\n    genWriter = new TrackingIndexWriter(writer);\n\n    final SearcherFactory sf = new SearcherFactory() {\n        @Override\n        public IndexSearcher newSearcher(IndexReader r, IndexReader previous) throws IOException {\n          TestControlledRealTimeReopenThread.this.warmCalled = true;\n          IndexSearcher s = new IndexSearcher(r, es);\n          s.search(new TermQuery(new Term(\"body\", \"united\")), 10);\n          return s;\n        }\n      };\n\n    nrtNoDeletes = new SearcherManager(writer, false, false, sf);\n    nrtDeletes = new SearcherManager(writer, sf);\n                         \n    nrtDeletesThread = new ControlledRealTimeReopenThread<>(genWriter, nrtDeletes, maxReopenSec, minReopenSec);\n    nrtDeletesThread.setName(\"NRTDeletes Reopen Thread\");\n    nrtDeletesThread.setPriority(Math.min(Thread.currentThread().getPriority()+2, Thread.MAX_PRIORITY));\n    nrtDeletesThread.setDaemon(true);\n    nrtDeletesThread.start();\n\n    nrtNoDeletesThread = new ControlledRealTimeReopenThread<>(genWriter, nrtNoDeletes, maxReopenSec, minReopenSec);\n    nrtNoDeletesThread.setName(\"NRTNoDeletes Reopen Thread\");\n    nrtNoDeletesThread.setPriority(Math.min(Thread.currentThread().getPriority()+2, Thread.MAX_PRIORITY));\n    nrtNoDeletesThread.setDaemon(true);\n    nrtNoDeletesThread.start();\n  }\n\n","sourceOld":"  @Override\n  protected void doAfterWriter(final ExecutorService es) throws Exception {\n    final double minReopenSec = 0.01 + 0.05 * random().nextDouble();\n    final double maxReopenSec = minReopenSec * (1.0 + 10 * random().nextDouble());\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: make SearcherManager maxReopenSec=\" + maxReopenSec + \" minReopenSec=\" + minReopenSec);\n    }\n\n    genWriter = new TrackingIndexWriter(writer);\n\n    final SearcherFactory sf = new SearcherFactory() {\n        @Override\n        public IndexSearcher newSearcher(IndexReader r, IndexReader previous) throws IOException {\n          TestControlledRealTimeReopenThread.this.warmCalled = true;\n          IndexSearcher s = new IndexSearcher(r, es);\n          s.search(new TermQuery(new Term(\"body\", \"united\")), 10);\n          return s;\n        }\n      };\n\n    nrtNoDeletes = new SearcherManager(writer, false, sf);\n    nrtDeletes = new SearcherManager(writer, sf);\n                         \n    nrtDeletesThread = new ControlledRealTimeReopenThread<>(genWriter, nrtDeletes, maxReopenSec, minReopenSec);\n    nrtDeletesThread.setName(\"NRTDeletes Reopen Thread\");\n    nrtDeletesThread.setPriority(Math.min(Thread.currentThread().getPriority()+2, Thread.MAX_PRIORITY));\n    nrtDeletesThread.setDaemon(true);\n    nrtDeletesThread.start();\n\n    nrtNoDeletesThread = new ControlledRealTimeReopenThread<>(genWriter, nrtNoDeletes, maxReopenSec, minReopenSec);\n    nrtNoDeletesThread.setName(\"NRTNoDeletes Reopen Thread\");\n    nrtNoDeletesThread.setPriority(Math.min(Thread.currentThread().getPriority()+2, Thread.MAX_PRIORITY));\n    nrtNoDeletesThread.setDaemon(true);\n    nrtNoDeletesThread.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"427bf5b96e9aacef8f01879bc1b93c3619c43439","date":1464134313,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestControlledRealTimeReopenThread#doAfterWriter(ExecutorService).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestControlledRealTimeReopenThread#doAfterWriter(ExecutorService).mjava","sourceNew":"  @Override\n  protected void doAfterWriter(final ExecutorService es) throws Exception {\n    final double minReopenSec = 0.01 + 0.05 * random().nextDouble();\n    final double maxReopenSec = minReopenSec * (1.0 + 10 * random().nextDouble());\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: make SearcherManager maxReopenSec=\" + maxReopenSec + \" minReopenSec=\" + minReopenSec);\n    }\n\n    genWriter = writer;\n\n    final SearcherFactory sf = new SearcherFactory() {\n        @Override\n        public IndexSearcher newSearcher(IndexReader r, IndexReader previous) throws IOException {\n          TestControlledRealTimeReopenThread.this.warmCalled = true;\n          IndexSearcher s = new IndexSearcher(r, es);\n          s.search(new TermQuery(new Term(\"body\", \"united\")), 10);\n          return s;\n        }\n      };\n\n    nrtNoDeletes = new SearcherManager(writer, false, false, sf);\n    nrtDeletes = new SearcherManager(writer, sf);\n                         \n    nrtDeletesThread = new ControlledRealTimeReopenThread<>(genWriter, nrtDeletes, maxReopenSec, minReopenSec);\n    nrtDeletesThread.setName(\"NRTDeletes Reopen Thread\");\n    nrtDeletesThread.setPriority(Math.min(Thread.currentThread().getPriority()+2, Thread.MAX_PRIORITY));\n    nrtDeletesThread.setDaemon(true);\n    nrtDeletesThread.start();\n\n    nrtNoDeletesThread = new ControlledRealTimeReopenThread<>(genWriter, nrtNoDeletes, maxReopenSec, minReopenSec);\n    nrtNoDeletesThread.setName(\"NRTNoDeletes Reopen Thread\");\n    nrtNoDeletesThread.setPriority(Math.min(Thread.currentThread().getPriority()+2, Thread.MAX_PRIORITY));\n    nrtNoDeletesThread.setDaemon(true);\n    nrtNoDeletesThread.start();\n  }\n\n","sourceOld":"  @Override\n  protected void doAfterWriter(final ExecutorService es) throws Exception {\n    final double minReopenSec = 0.01 + 0.05 * random().nextDouble();\n    final double maxReopenSec = minReopenSec * (1.0 + 10 * random().nextDouble());\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: make SearcherManager maxReopenSec=\" + maxReopenSec + \" minReopenSec=\" + minReopenSec);\n    }\n\n    genWriter = new TrackingIndexWriter(writer);\n\n    final SearcherFactory sf = new SearcherFactory() {\n        @Override\n        public IndexSearcher newSearcher(IndexReader r, IndexReader previous) throws IOException {\n          TestControlledRealTimeReopenThread.this.warmCalled = true;\n          IndexSearcher s = new IndexSearcher(r, es);\n          s.search(new TermQuery(new Term(\"body\", \"united\")), 10);\n          return s;\n        }\n      };\n\n    nrtNoDeletes = new SearcherManager(writer, false, false, sf);\n    nrtDeletes = new SearcherManager(writer, sf);\n                         \n    nrtDeletesThread = new ControlledRealTimeReopenThread<>(genWriter, nrtDeletes, maxReopenSec, minReopenSec);\n    nrtDeletesThread.setName(\"NRTDeletes Reopen Thread\");\n    nrtDeletesThread.setPriority(Math.min(Thread.currentThread().getPriority()+2, Thread.MAX_PRIORITY));\n    nrtDeletesThread.setDaemon(true);\n    nrtDeletesThread.start();\n\n    nrtNoDeletesThread = new ControlledRealTimeReopenThread<>(genWriter, nrtNoDeletes, maxReopenSec, minReopenSec);\n    nrtNoDeletesThread.setName(\"NRTNoDeletes Reopen Thread\");\n    nrtNoDeletesThread.setPriority(Math.min(Thread.currentThread().getPriority()+2, Thread.MAX_PRIORITY));\n    nrtNoDeletesThread.setDaemon(true);\n    nrtNoDeletesThread.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6483e4260c08168709c02238ae083a51519a28dd","date":1465117546,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestControlledRealTimeReopenThread#doAfterWriter(ExecutorService).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestControlledRealTimeReopenThread#doAfterWriter(ExecutorService).mjava","sourceNew":"  @Override\n  protected void doAfterWriter(final ExecutorService es) throws Exception {\n    final double minReopenSec = 0.01 + 0.05 * random().nextDouble();\n    final double maxReopenSec = minReopenSec * (1.0 + 10 * random().nextDouble());\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: make SearcherManager maxReopenSec=\" + maxReopenSec + \" minReopenSec=\" + minReopenSec);\n    }\n\n    genWriter = writer;\n\n    final SearcherFactory sf = new SearcherFactory() {\n        @Override\n        public IndexSearcher newSearcher(IndexReader r, IndexReader previous) throws IOException {\n          TestControlledRealTimeReopenThread.this.warmCalled = true;\n          IndexSearcher s = new IndexSearcher(r, es);\n          s.search(new TermQuery(new Term(\"body\", \"united\")), 10);\n          return s;\n        }\n      };\n\n    nrtNoDeletes = new SearcherManager(writer, false, false, sf);\n    nrtDeletes = new SearcherManager(writer, sf);\n                         \n    nrtDeletesThread = new ControlledRealTimeReopenThread<>(genWriter, nrtDeletes, maxReopenSec, minReopenSec);\n    nrtDeletesThread.setName(\"NRTDeletes Reopen Thread\");\n    nrtDeletesThread.setPriority(Math.min(Thread.currentThread().getPriority()+2, Thread.MAX_PRIORITY));\n    nrtDeletesThread.setDaemon(true);\n    nrtDeletesThread.start();\n\n    nrtNoDeletesThread = new ControlledRealTimeReopenThread<>(genWriter, nrtNoDeletes, maxReopenSec, minReopenSec);\n    nrtNoDeletesThread.setName(\"NRTNoDeletes Reopen Thread\");\n    nrtNoDeletesThread.setPriority(Math.min(Thread.currentThread().getPriority()+2, Thread.MAX_PRIORITY));\n    nrtNoDeletesThread.setDaemon(true);\n    nrtNoDeletesThread.start();\n  }\n\n","sourceOld":"  @Override\n  protected void doAfterWriter(final ExecutorService es) throws Exception {\n    final double minReopenSec = 0.01 + 0.05 * random().nextDouble();\n    final double maxReopenSec = minReopenSec * (1.0 + 10 * random().nextDouble());\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: make SearcherManager maxReopenSec=\" + maxReopenSec + \" minReopenSec=\" + minReopenSec);\n    }\n\n    genWriter = new TrackingIndexWriter(writer);\n\n    final SearcherFactory sf = new SearcherFactory() {\n        @Override\n        public IndexSearcher newSearcher(IndexReader r, IndexReader previous) throws IOException {\n          TestControlledRealTimeReopenThread.this.warmCalled = true;\n          IndexSearcher s = new IndexSearcher(r, es);\n          s.search(new TermQuery(new Term(\"body\", \"united\")), 10);\n          return s;\n        }\n      };\n\n    nrtNoDeletes = new SearcherManager(writer, false, false, sf);\n    nrtDeletes = new SearcherManager(writer, sf);\n                         \n    nrtDeletesThread = new ControlledRealTimeReopenThread<>(genWriter, nrtDeletes, maxReopenSec, minReopenSec);\n    nrtDeletesThread.setName(\"NRTDeletes Reopen Thread\");\n    nrtDeletesThread.setPriority(Math.min(Thread.currentThread().getPriority()+2, Thread.MAX_PRIORITY));\n    nrtDeletesThread.setDaemon(true);\n    nrtDeletesThread.start();\n\n    nrtNoDeletesThread = new ControlledRealTimeReopenThread<>(genWriter, nrtNoDeletes, maxReopenSec, minReopenSec);\n    nrtNoDeletesThread.setName(\"NRTNoDeletes Reopen Thread\");\n    nrtNoDeletesThread.setPriority(Math.min(Thread.currentThread().getPriority()+2, Thread.MAX_PRIORITY));\n    nrtNoDeletesThread.setDaemon(true);\n    nrtNoDeletesThread.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"191128ac5b85671b1671e2c857437694283b6ebf","date":1465297861,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestControlledRealTimeReopenThread#doAfterWriter(ExecutorService).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestControlledRealTimeReopenThread#doAfterWriter(ExecutorService).mjava","sourceNew":"  @Override\n  protected void doAfterWriter(final ExecutorService es) throws Exception {\n    final double minReopenSec = 0.01 + 0.05 * random().nextDouble();\n    final double maxReopenSec = minReopenSec * (1.0 + 10 * random().nextDouble());\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: make SearcherManager maxReopenSec=\" + maxReopenSec + \" minReopenSec=\" + minReopenSec);\n    }\n\n    genWriter = writer;\n\n    final SearcherFactory sf = new SearcherFactory() {\n        @Override\n        public IndexSearcher newSearcher(IndexReader r, IndexReader previous) throws IOException {\n          TestControlledRealTimeReopenThread.this.warmCalled = true;\n          IndexSearcher s = new IndexSearcher(r, es);\n          s.search(new TermQuery(new Term(\"body\", \"united\")), 10);\n          return s;\n        }\n      };\n\n    nrtNoDeletes = new SearcherManager(writer, false, false, sf);\n    nrtDeletes = new SearcherManager(writer, sf);\n                         \n    nrtDeletesThread = new ControlledRealTimeReopenThread<>(genWriter, nrtDeletes, maxReopenSec, minReopenSec);\n    nrtDeletesThread.setName(\"NRTDeletes Reopen Thread\");\n    nrtDeletesThread.setPriority(Math.min(Thread.currentThread().getPriority()+2, Thread.MAX_PRIORITY));\n    nrtDeletesThread.setDaemon(true);\n    nrtDeletesThread.start();\n\n    nrtNoDeletesThread = new ControlledRealTimeReopenThread<>(genWriter, nrtNoDeletes, maxReopenSec, minReopenSec);\n    nrtNoDeletesThread.setName(\"NRTNoDeletes Reopen Thread\");\n    nrtNoDeletesThread.setPriority(Math.min(Thread.currentThread().getPriority()+2, Thread.MAX_PRIORITY));\n    nrtNoDeletesThread.setDaemon(true);\n    nrtNoDeletesThread.start();\n  }\n\n","sourceOld":"  @Override\n  protected void doAfterWriter(final ExecutorService es) throws Exception {\n    final double minReopenSec = 0.01 + 0.05 * random().nextDouble();\n    final double maxReopenSec = minReopenSec * (1.0 + 10 * random().nextDouble());\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: make SearcherManager maxReopenSec=\" + maxReopenSec + \" minReopenSec=\" + minReopenSec);\n    }\n\n    genWriter = new TrackingIndexWriter(writer);\n\n    final SearcherFactory sf = new SearcherFactory() {\n        @Override\n        public IndexSearcher newSearcher(IndexReader r, IndexReader previous) throws IOException {\n          TestControlledRealTimeReopenThread.this.warmCalled = true;\n          IndexSearcher s = new IndexSearcher(r, es);\n          s.search(new TermQuery(new Term(\"body\", \"united\")), 10);\n          return s;\n        }\n      };\n\n    nrtNoDeletes = new SearcherManager(writer, false, false, sf);\n    nrtDeletes = new SearcherManager(writer, sf);\n                         \n    nrtDeletesThread = new ControlledRealTimeReopenThread<>(genWriter, nrtDeletes, maxReopenSec, minReopenSec);\n    nrtDeletesThread.setName(\"NRTDeletes Reopen Thread\");\n    nrtDeletesThread.setPriority(Math.min(Thread.currentThread().getPriority()+2, Thread.MAX_PRIORITY));\n    nrtDeletesThread.setDaemon(true);\n    nrtDeletesThread.start();\n\n    nrtNoDeletesThread = new ControlledRealTimeReopenThread<>(genWriter, nrtNoDeletes, maxReopenSec, minReopenSec);\n    nrtNoDeletesThread.setName(\"NRTNoDeletes Reopen Thread\");\n    nrtNoDeletesThread.setPriority(Math.min(Thread.currentThread().getPriority()+2, Thread.MAX_PRIORITY));\n    nrtNoDeletesThread.setDaemon(true);\n    nrtNoDeletesThread.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestControlledRealTimeReopenThread#doAfterWriter(ExecutorService).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestControlledRealTimeReopenThread#doAfterWriter(ExecutorService).mjava","sourceNew":"  @Override\n  protected void doAfterWriter(final ExecutorService es) throws Exception {\n    final double minReopenSec = 0.01 + 0.05 * random().nextDouble();\n    final double maxReopenSec = minReopenSec * (1.0 + 10 * random().nextDouble());\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: make SearcherManager maxReopenSec=\" + maxReopenSec + \" minReopenSec=\" + minReopenSec);\n    }\n\n    genWriter = writer;\n\n    final SearcherFactory sf = new SearcherFactory() {\n        @Override\n        public IndexSearcher newSearcher(IndexReader r, IndexReader previous) throws IOException {\n          TestControlledRealTimeReopenThread.this.warmCalled = true;\n          IndexSearcher s = new IndexSearcher(r, es);\n          s.search(new TermQuery(new Term(\"body\", \"united\")), 10);\n          return s;\n        }\n      };\n\n    nrtNoDeletes = new SearcherManager(writer, false, false, sf);\n    nrtDeletes = new SearcherManager(writer, sf);\n                         \n    nrtDeletesThread = new ControlledRealTimeReopenThread<>(genWriter, nrtDeletes, maxReopenSec, minReopenSec);\n    nrtDeletesThread.setName(\"NRTDeletes Reopen Thread\");\n    nrtDeletesThread.setPriority(Math.min(Thread.currentThread().getPriority()+2, Thread.MAX_PRIORITY));\n    nrtDeletesThread.setDaemon(true);\n    nrtDeletesThread.start();\n\n    nrtNoDeletesThread = new ControlledRealTimeReopenThread<>(genWriter, nrtNoDeletes, maxReopenSec, minReopenSec);\n    nrtNoDeletesThread.setName(\"NRTNoDeletes Reopen Thread\");\n    nrtNoDeletesThread.setPriority(Math.min(Thread.currentThread().getPriority()+2, Thread.MAX_PRIORITY));\n    nrtNoDeletesThread.setDaemon(true);\n    nrtNoDeletesThread.start();\n  }\n\n","sourceOld":"  @Override\n  protected void doAfterWriter(final ExecutorService es) throws Exception {\n    final double minReopenSec = 0.01 + 0.05 * random().nextDouble();\n    final double maxReopenSec = minReopenSec * (1.0 + 10 * random().nextDouble());\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: make SearcherManager maxReopenSec=\" + maxReopenSec + \" minReopenSec=\" + minReopenSec);\n    }\n\n    genWriter = new TrackingIndexWriter(writer);\n\n    final SearcherFactory sf = new SearcherFactory() {\n        @Override\n        public IndexSearcher newSearcher(IndexReader r, IndexReader previous) throws IOException {\n          TestControlledRealTimeReopenThread.this.warmCalled = true;\n          IndexSearcher s = new IndexSearcher(r, es);\n          s.search(new TermQuery(new Term(\"body\", \"united\")), 10);\n          return s;\n        }\n      };\n\n    nrtNoDeletes = new SearcherManager(writer, false, false, sf);\n    nrtDeletes = new SearcherManager(writer, sf);\n                         \n    nrtDeletesThread = new ControlledRealTimeReopenThread<>(genWriter, nrtDeletes, maxReopenSec, minReopenSec);\n    nrtDeletesThread.setName(\"NRTDeletes Reopen Thread\");\n    nrtDeletesThread.setPriority(Math.min(Thread.currentThread().getPriority()+2, Thread.MAX_PRIORITY));\n    nrtDeletesThread.setDaemon(true);\n    nrtDeletesThread.start();\n\n    nrtNoDeletesThread = new ControlledRealTimeReopenThread<>(genWriter, nrtNoDeletes, maxReopenSec, minReopenSec);\n    nrtNoDeletesThread.setName(\"NRTNoDeletes Reopen Thread\");\n    nrtNoDeletesThread.setPriority(Math.min(Thread.currentThread().getPriority()+2, Thread.MAX_PRIORITY));\n    nrtNoDeletesThread.setDaemon(true);\n    nrtNoDeletesThread.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["c2045b132a2396bb23dff28d2d9f349a6907d36e"],"c2045b132a2396bb23dff28d2d9f349a6907d36e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7b516a692d03225c8f0e81a13ceed2dc32bb457d":["e0dfae671422e7453a9199aa320f91427cd80d60"],"6483e4260c08168709c02238ae083a51519a28dd":["68496c2200e559fb7802f7575427b7a482659afb","427bf5b96e9aacef8f01879bc1b93c3619c43439"],"191128ac5b85671b1671e2c857437694283b6ebf":["68496c2200e559fb7802f7575427b7a482659afb","6483e4260c08168709c02238ae083a51519a28dd"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["68496c2200e559fb7802f7575427b7a482659afb","191128ac5b85671b1671e2c857437694283b6ebf"],"0c924d4069ef5a5bc479a493befe0121aada6896":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","e0dfae671422e7453a9199aa320f91427cd80d60"],"e0dfae671422e7453a9199aa320f91427cd80d60":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"68496c2200e559fb7802f7575427b7a482659afb":["7b516a692d03225c8f0e81a13ceed2dc32bb457d","0d49a158012a8ff48f328a4558e4bfcffbaed16f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["191128ac5b85671b1671e2c857437694283b6ebf"],"0d49a158012a8ff48f328a4558e4bfcffbaed16f":["7b516a692d03225c8f0e81a13ceed2dc32bb457d"],"427bf5b96e9aacef8f01879bc1b93c3619c43439":["68496c2200e559fb7802f7575427b7a482659afb"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["0c924d4069ef5a5bc479a493befe0121aada6896","e0dfae671422e7453a9199aa320f91427cd80d60"],"c2045b132a2396bb23dff28d2d9f349a6907d36e":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"7b516a692d03225c8f0e81a13ceed2dc32bb457d":["68496c2200e559fb7802f7575427b7a482659afb","0d49a158012a8ff48f328a4558e4bfcffbaed16f"],"6483e4260c08168709c02238ae083a51519a28dd":["191128ac5b85671b1671e2c857437694283b6ebf"],"191128ac5b85671b1671e2c857437694283b6ebf":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"0c924d4069ef5a5bc479a493befe0121aada6896":[],"e0dfae671422e7453a9199aa320f91427cd80d60":["7b516a692d03225c8f0e81a13ceed2dc32bb457d","0c924d4069ef5a5bc479a493befe0121aada6896"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c2045b132a2396bb23dff28d2d9f349a6907d36e"],"68496c2200e559fb7802f7575427b7a482659afb":["6483e4260c08168709c02238ae083a51519a28dd","191128ac5b85671b1671e2c857437694283b6ebf","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","427bf5b96e9aacef8f01879bc1b93c3619c43439"],"427bf5b96e9aacef8f01879bc1b93c3619c43439":["6483e4260c08168709c02238ae083a51519a28dd"],"0d49a158012a8ff48f328a4558e4bfcffbaed16f":["68496c2200e559fb7802f7575427b7a482659afb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","0c924d4069ef5a5bc479a493befe0121aada6896","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}