{"path":"lucene/core/src/java/org/apache/lucene/util/automaton/DaciukMihovAutomatonBuilder#addSuffix(State,CharSequence,int).mjava","commits":[{"id":"8d94feb02e9c604630d8a6758abcb40cbfa91f5d","date":1340964157,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/DaciukMihovAutomatonBuilder#addSuffix(State,CharSequence,int).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/automaton/DaciukMihovAutomatonBuilder#addSuffix(State,CharSequence,int).mjava","sourceNew":"  /**\n   * Add a suffix of <code>current</code> starting at <code>fromIndex</code>\n   * (inclusive) to state <code>state</code>.\n   */\n  private void addSuffix(State state, CharSequence current, int fromIndex) {\n    final int len = current.length();\n    while (fromIndex < len) {\n      int cp = Character.codePointAt(current, fromIndex);\n      state = state.newState(cp);\n      fromIndex += Character.charCount(cp);\n    }\n    state.is_final = true;\n  }\n\n","sourceOld":"  /**\n   * Add a suffix of <code>current</code> starting at <code>fromIndex</code>\n   * (inclusive) to state <code>state</code>.\n   */\n  private void addSuffix(State state, CharSequence current, int fromIndex) {\n    final int len = current.length();\n    while (fromIndex < len) {\n      int cp = Character.codePointAt(current, fromIndex);\n      state = state.newState(cp);\n      fromIndex += Character.charCount(cp);\n    }\n    state.is_final = true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":1,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/DaciukMihovAutomatonBuilder#addSuffix(State,CharSequence,int).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/automaton/DaciukMihovAutomatonBuilder#addSuffix(State,CharSequence,int).mjava","sourceNew":"  /**\n   * Add a suffix of <code>current</code> starting at <code>fromIndex</code>\n   * (inclusive) to state <code>state</code>.\n   */\n  private void addSuffix(State state, CharSequence current, int fromIndex) {\n    final int len = current.length();\n    while (fromIndex < len) {\n      int cp = Character.codePointAt(current, fromIndex);\n      state = state.newState(cp);\n      fromIndex += Character.charCount(cp);\n    }\n    state.is_final = true;\n  }\n\n","sourceOld":"  /**\n   * Add a suffix of <code>current</code> starting at <code>fromIndex</code>\n   * (inclusive) to state <code>state</code>.\n   */\n  private void addSuffix(State state, CharSequence current, int fromIndex) {\n    final int len = current.length();\n    while (fromIndex < len) {\n      int cp = Character.codePointAt(current, fromIndex);\n      state = state.newState(cp);\n      fromIndex += Character.charCount(cp);\n    }\n    state.is_final = true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f4ef381bf0c2d618c6db830d3dd668c6901c05a","date":1402592253,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/DaciukMihovAutomatonBuilder#addSuffix(State,CharSequence,int).mjava","sourceNew":null,"sourceOld":"  /**\n   * Add a suffix of <code>current</code> starting at <code>fromIndex</code>\n   * (inclusive) to state <code>state</code>.\n   */\n  private void addSuffix(State state, CharSequence current, int fromIndex) {\n    final int len = current.length();\n    while (fromIndex < len) {\n      int cp = Character.codePointAt(current, fromIndex);\n      state = state.newState(cp);\n      fromIndex += Character.charCount(cp);\n    }\n    state.is_final = true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ca1c732df8923f5624f6c06b1dcca9e69d98c96","date":1402957391,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/DaciukMihovAutomatonBuilder#addSuffix(State,CharSequence,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/DaciukMihovAutomatonBuilderLight#addSuffix(State,CharSequence,int).mjava","sourceNew":"  /**\n   * Add a suffix of <code>current</code> starting at <code>fromIndex</code>\n   * (inclusive) to state <code>state</code>.\n   */\n  private void addSuffix(State state, CharSequence current, int fromIndex) {\n    final int len = current.length();\n    while (fromIndex < len) {\n      int cp = Character.codePointAt(current, fromIndex);\n      state = state.newState(cp);\n      fromIndex += Character.charCount(cp);\n    }\n    state.is_final = true;\n  }\n\n","sourceOld":"  /**\n   * Add a suffix of <code>current</code> starting at <code>fromIndex</code>\n   * (inclusive) to state <code>state</code>.\n   */\n  private void addSuffix(State state, CharSequence current, int fromIndex) {\n    final int len = current.length();\n    while (fromIndex < len) {\n      int cp = Character.codePointAt(current, fromIndex);\n      state = state.newState(cp);\n      fromIndex += Character.charCount(cp);\n    }\n    state.is_final = true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fe33227f6805edab2036cbb80645cc4e2d1fa424":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8d94feb02e9c604630d8a6758abcb40cbfa91f5d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["7f4ef381bf0c2d618c6db830d3dd668c6901c05a"],"8d94feb02e9c604630d8a6758abcb40cbfa91f5d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7f4ef381bf0c2d618c6db830d3dd668c6901c05a":["8d94feb02e9c604630d8a6758abcb40cbfa91f5d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8d94feb02e9c604630d8a6758abcb40cbfa91f5d"]},"commit2Childs":{"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fe33227f6805edab2036cbb80645cc4e2d1fa424","8d94feb02e9c604630d8a6758abcb40cbfa91f5d"],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":[],"8d94feb02e9c604630d8a6758abcb40cbfa91f5d":["fe33227f6805edab2036cbb80645cc4e2d1fa424","7f4ef381bf0c2d618c6db830d3dd668c6901c05a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7f4ef381bf0c2d618c6db830d3dd668c6901c05a":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4ca1c732df8923f5624f6c06b1dcca9e69d98c96","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}