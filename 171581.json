{"path":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/Cell#setLeaf().mjava","commits":[{"id":"8259c159da2de2e8528524fb76b244b46cbded59","date":1364478249,"type":1,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/Cell#setLeaf().mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/Node#setLeaf().mjava","sourceNew":"  /** Note: not supported at level 0. */\n  public void setLeaf() {\n    assert getLevel() != 0;\n    leaf = true;\n  }\n\n","sourceOld":"  /** Note: not supported at level 0. */\n  public void setLeaf() {\n    assert getLevel() != 0;\n    leaf = true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4de14be4bd1b857ba37ca138b61c4661c6d1bed3","date":1396628861,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/Cell#setLeaf().mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/Cell#setLeaf().mjava","sourceNew":"  /** Modifies the bytes to reflect that this is a leaf. Warning: never invoke from a cell\n   * initialized to reference the same bytes from termsEnum, which should be treated as immutable.\n   * Note: not supported at level 0. */\n  public void setLeaf() {\n    assert getLevel() != 0;\n    if (isLeaf())\n      return;\n    //if isn't big enough, we have to copy\n    if (bytes.length < b_off + b_len) {\n      //hopefully this copying doesn't happen too much (DWS: I checked and it doesn't seem to happen)\n      byte[] copy = new byte[b_len + 1];\n      System.arraycopy(bytes, b_off, copy, 0, b_len);\n      copy[b_len++] = LEAF_BYTE;\n      bytes = copy;\n      b_off = 0;\n    } else {\n      bytes[b_off + b_len++] = LEAF_BYTE;\n    }\n  }\n\n","sourceOld":"  /** Note: not supported at level 0. */\n  public void setLeaf() {\n    assert getLevel() != 0;\n    leaf = true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15e323346eac5e4685c0a9f2df85eb96b4239bbb","date":1396688577,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/Cell#setLeaf().mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/Cell#setLeaf().mjava","sourceNew":"  /** Modifies the bytes to reflect that this is a leaf. Warning: never invoke from a cell\n   * initialized to reference the same bytes from termsEnum, which should be treated as immutable.\n   * Note: not supported at level 0. */\n  public void setLeaf() {\n    assert getLevel() != 0;\n    if (isLeaf())\n      return;\n    //if isn't big enough, we have to copy\n    if (bytes.length < b_off + b_len) {\n      //hopefully this copying doesn't happen too much (DWS: I checked and it doesn't seem to happen)\n      byte[] copy = new byte[b_len + 1];\n      System.arraycopy(bytes, b_off, copy, 0, b_len);\n      copy[b_len++] = LEAF_BYTE;\n      bytes = copy;\n      b_off = 0;\n    } else {\n      bytes[b_off + b_len++] = LEAF_BYTE;\n    }\n  }\n\n","sourceOld":"  /** Note: not supported at level 0. */\n  public void setLeaf() {\n    assert getLevel() != 0;\n    leaf = true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8cbeee6a8b7dcd5efc02f4d24cef933a45e065e6","date":1397789149,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/Cell#setLeaf().mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/Cell#setLeaf().mjava","sourceNew":"  /** Set this cell to be a leaf. Warning: never call on a cell\n   * initialized to reference the same bytes from termsEnum, which should be treated as immutable.\n   * Note: not supported at level 0.\n   * @lucene.internal */\n  void setLeaf();\n\n","sourceOld":"  /** Modifies the bytes to reflect that this is a leaf. Warning: never invoke from a cell\n   * initialized to reference the same bytes from termsEnum, which should be treated as immutable.\n   * Note: not supported at level 0. */\n  public void setLeaf() {\n    assert getLevel() != 0;\n    if (isLeaf())\n      return;\n    //if isn't big enough, we have to copy\n    if (bytes.length < b_off + b_len) {\n      //hopefully this copying doesn't happen too much (DWS: I checked and it doesn't seem to happen)\n      byte[] copy = new byte[b_len + 1];\n      System.arraycopy(bytes, b_off, copy, 0, b_len);\n      copy[b_len++] = LEAF_BYTE;\n      bytes = copy;\n      b_off = 0;\n    } else {\n      bytes[b_off + b_len++] = LEAF_BYTE;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"112d77ac8d3e10a362516ad834c9a11d35c94234","date":1456784319,"type":5,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/tree/Cell#setLeaf().mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/Cell#setLeaf().mjava","sourceNew":"  /** Set this cell to be a leaf. Warning: never call on a cell\n   * initialized to reference the same bytes from termsEnum, which should be treated as immutable.\n   * Note: not supported at level 0.\n   * @lucene.internal */\n  void setLeaf();\n\n","sourceOld":"  /** Set this cell to be a leaf. Warning: never call on a cell\n   * initialized to reference the same bytes from termsEnum, which should be treated as immutable.\n   * Note: not supported at level 0.\n   * @lucene.internal */\n  void setLeaf();\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af2638813028b254a88b418ebeafb541afb49653","date":1456804822,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/tree/Cell#setLeaf().mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/Cell#setLeaf().mjava","sourceNew":"  /** Set this cell to be a leaf. Warning: never call on a cell\n   * initialized to reference the same bytes from termsEnum, which should be treated as immutable.\n   * Note: not supported at level 0.\n   * @lucene.internal */\n  void setLeaf();\n\n","sourceOld":"  /** Set this cell to be a leaf. Warning: never call on a cell\n   * initialized to reference the same bytes from termsEnum, which should be treated as immutable.\n   * Note: not supported at level 0.\n   * @lucene.internal */\n  void setLeaf();\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"af2638813028b254a88b418ebeafb541afb49653":["8cbeee6a8b7dcd5efc02f4d24cef933a45e065e6","112d77ac8d3e10a362516ad834c9a11d35c94234"],"15e323346eac5e4685c0a9f2df85eb96b4239bbb":["8259c159da2de2e8528524fb76b244b46cbded59","4de14be4bd1b857ba37ca138b61c4661c6d1bed3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"112d77ac8d3e10a362516ad834c9a11d35c94234":["8cbeee6a8b7dcd5efc02f4d24cef933a45e065e6"],"4de14be4bd1b857ba37ca138b61c4661c6d1bed3":["8259c159da2de2e8528524fb76b244b46cbded59"],"8cbeee6a8b7dcd5efc02f4d24cef933a45e065e6":["4de14be4bd1b857ba37ca138b61c4661c6d1bed3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["af2638813028b254a88b418ebeafb541afb49653"],"8259c159da2de2e8528524fb76b244b46cbded59":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"af2638813028b254a88b418ebeafb541afb49653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"15e323346eac5e4685c0a9f2df85eb96b4239bbb":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8259c159da2de2e8528524fb76b244b46cbded59"],"112d77ac8d3e10a362516ad834c9a11d35c94234":["af2638813028b254a88b418ebeafb541afb49653"],"4de14be4bd1b857ba37ca138b61c4661c6d1bed3":["15e323346eac5e4685c0a9f2df85eb96b4239bbb","8cbeee6a8b7dcd5efc02f4d24cef933a45e065e6"],"8cbeee6a8b7dcd5efc02f4d24cef933a45e065e6":["af2638813028b254a88b418ebeafb541afb49653","112d77ac8d3e10a362516ad834c9a11d35c94234"],"8259c159da2de2e8528524fb76b244b46cbded59":["15e323346eac5e4685c0a9f2df85eb96b4239bbb","4de14be4bd1b857ba37ca138b61c4661c6d1bed3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["15e323346eac5e4685c0a9f2df85eb96b4239bbb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}