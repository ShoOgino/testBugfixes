{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/EBEAddEvaluator#doWork(Object,Object).mjava","commits":[{"id":"a9850a2db59025ba8cb15c4fd7ab3bb1faa151f1","date":1504564803,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/EBEAddEvaluator#doWork(Object,Object).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Object doWork(Object first, Object second) throws IOException{\n    if(null == first){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the first value\",toExpression(constructingFactory)));\n    }\n    if(null == second){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the second value\",toExpression(constructingFactory)));\n    }\n    if(!(first instanceof List<?>)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the first value, expecting a list of numbers\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n    if(!(second instanceof List<?>)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the second value, expecting a list of numbers\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n\n    double[] result =  MathArrays.ebeAdd(\n        ((List) first).stream().mapToDouble(value -> ((BigDecimal) value).doubleValue()).toArray(),\n        ((List) second).stream().mapToDouble(value -> ((BigDecimal) value).doubleValue()).toArray()\n    );\n\n    List<Number> numbers = new ArrayList();\n    for(double d : result) {\n      numbers.add(d);\n    }\n\n    return numbers;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b21283ed01203901a7257aa4b7f0a0899c86e56e","date":1504689720,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/EBEAddEvaluator#doWork(Object,Object).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Object doWork(Object first, Object second) throws IOException{\n    if(null == first){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the first value\",toExpression(constructingFactory)));\n    }\n    if(null == second){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the second value\",toExpression(constructingFactory)));\n    }\n    if(!(first instanceof List<?>)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the first value, expecting a list of numbers\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n    if(!(second instanceof List<?>)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the second value, expecting a list of numbers\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n\n    double[] result =  MathArrays.ebeAdd(\n        ((List) first).stream().mapToDouble(value -> ((BigDecimal) value).doubleValue()).toArray(),\n        ((List) second).stream().mapToDouble(value -> ((BigDecimal) value).doubleValue()).toArray()\n    );\n\n    List<Number> numbers = new ArrayList();\n    for(double d : result) {\n      numbers.add(d);\n    }\n\n    return numbers;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"104a3f62ee393d48b5596de76ed4d9a4e0ea6de7","date":1504848000,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/EBEAddEvaluator#doWork(Object,Object).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Object doWork(Object first, Object second) throws IOException{\n    if(null == first){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the first value\",toExpression(constructingFactory)));\n    }\n    if(null == second){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the second value\",toExpression(constructingFactory)));\n    }\n    if(!(first instanceof List<?>)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the first value, expecting a list of numbers\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n    if(!(second instanceof List<?>)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the second value, expecting a list of numbers\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n\n    double[] result =  MathArrays.ebeAdd(\n        ((List) first).stream().mapToDouble(value -> ((BigDecimal) value).doubleValue()).toArray(),\n        ((List) second).stream().mapToDouble(value -> ((BigDecimal) value).doubleValue()).toArray()\n    );\n\n    List<Number> numbers = new ArrayList();\n    for(double d : result) {\n      numbers.add(d);\n    }\n\n    return numbers;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"685bd38810c206c93e9058f3c2cfa9827c086c27","date":1505751821,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/EBEAddEvaluator#doWork(Object,Object).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Object doWork(Object first, Object second) throws IOException{\n    if(null == first){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the first value\",toExpression(constructingFactory)));\n    }\n    if(null == second){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the second value\",toExpression(constructingFactory)));\n    }\n    if(!(first instanceof List<?>)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the first value, expecting a list of numbers\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n    if(!(second instanceof List<?>)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the second value, expecting a list of numbers\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n\n    double[] result =  MathArrays.ebeAdd(\n        ((List) first).stream().mapToDouble(value -> ((BigDecimal) value).doubleValue()).toArray(),\n        ((List) second).stream().mapToDouble(value -> ((BigDecimal) value).doubleValue()).toArray()\n    );\n\n    List<Number> numbers = new ArrayList();\n    for(double d : result) {\n      numbers.add(d);\n    }\n\n    return numbers;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bbe7f5e9d90420c7fc8cd235dd8fb33fa9befe54","date":1512439781,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/EBEAddEvaluator#doWork(Object,Object).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/EBEAddEvaluator#doWork(Object,Object).mjava","sourceNew":"  @Override\n  public Object doWork(Object first, Object second) throws IOException{\n    if(null == first){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the first value\",toExpression(constructingFactory)));\n    }\n    if(null == second){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the second value\",toExpression(constructingFactory)));\n    }\n    if(!(first instanceof List<?>)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the first value, expecting a list of numbers\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n    if(!(second instanceof List<?>)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the second value, expecting a list of numbers\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n\n    double[] result =  MathArrays.ebeAdd(\n        ((List) first).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray(),\n        ((List) second).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray()\n    );\n\n    List<Number> numbers = new ArrayList();\n    for(double d : result) {\n      numbers.add(d);\n    }\n\n    return numbers;\n  }\n\n","sourceOld":"  @Override\n  public Object doWork(Object first, Object second) throws IOException{\n    if(null == first){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the first value\",toExpression(constructingFactory)));\n    }\n    if(null == second){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the second value\",toExpression(constructingFactory)));\n    }\n    if(!(first instanceof List<?>)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the first value, expecting a list of numbers\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n    if(!(second instanceof List<?>)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the second value, expecting a list of numbers\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n\n    double[] result =  MathArrays.ebeAdd(\n        ((List) first).stream().mapToDouble(value -> ((BigDecimal) value).doubleValue()).toArray(),\n        ((List) second).stream().mapToDouble(value -> ((BigDecimal) value).doubleValue()).toArray()\n    );\n\n    List<Number> numbers = new ArrayList();\n    for(double d : result) {\n      numbers.add(d);\n    }\n\n    return numbers;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b78a448aeee9df343bca8f8c7be779c0185a2fa0","date":1520212953,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/EBEAddEvaluator#doWork(Object,Object).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/EBEAddEvaluator#doWork(Object,Object).mjava","sourceNew":"  @Override\n  public Object doWork(Object first, Object second) throws IOException{\n    if(null == first){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the first value\",toExpression(constructingFactory)));\n    }\n    if(null == second){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the second value\",toExpression(constructingFactory)));\n    }\n\n    if(first instanceof List && second instanceof List) {\n      double[] result = MathArrays.ebeAdd(\n          ((List) first).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray(),\n          ((List) second).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray()\n      );\n\n      List<Number> numbers = new ArrayList();\n      for (double d : result) {\n        numbers.add(d);\n      }\n\n      return numbers;\n    } else if(first instanceof Matrix && second instanceof Matrix) {\n      double[][] data1 = ((Matrix) first).getData();\n      double[][] data2 = ((Matrix) second).getData();\n      Array2DRowRealMatrix matrix1 = new Array2DRowRealMatrix(data1);\n      Array2DRowRealMatrix matrix2 = new Array2DRowRealMatrix(data2);\n      RealMatrix matrix3 = matrix1.add(matrix2);\n      return new Matrix(matrix3.getData());\n    } else {\n      throw new IOException(\"Parameters for ebeAdd must either be two numeric arrays or two matrices. \");\n    }\n  }\n\n","sourceOld":"  @Override\n  public Object doWork(Object first, Object second) throws IOException{\n    if(null == first){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the first value\",toExpression(constructingFactory)));\n    }\n    if(null == second){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the second value\",toExpression(constructingFactory)));\n    }\n    if(!(first instanceof List<?>)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the first value, expecting a list of numbers\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n    if(!(second instanceof List<?>)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the second value, expecting a list of numbers\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n\n    double[] result =  MathArrays.ebeAdd(\n        ((List) first).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray(),\n        ((List) second).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray()\n    );\n\n    List<Number> numbers = new ArrayList();\n    for(double d : result) {\n      numbers.add(d);\n    }\n\n    return numbers;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c1832e2a2126bdb6cf9f50b59b7a9add0b0d29ac","date":1523323495,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/EBEAddEvaluator#doWork(Object,Object).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/EBEAddEvaluator#doWork(Object,Object).mjava","sourceNew":"  @Override\n  public Object doWork(Object first, Object second) throws IOException{\n    if(null == first){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the first value\",toExpression(constructingFactory)));\n    }\n    if(null == second){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the second value\",toExpression(constructingFactory)));\n    }\n\n    if(first instanceof List && second instanceof List) {\n      double[] result = MathArrays.ebeAdd(\n          ((List) first).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray(),\n          ((List) second).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray()\n      );\n\n      List<Number> numbers = new ArrayList();\n      for (double d : result) {\n        numbers.add(d);\n      }\n\n      return numbers;\n    } else if(first instanceof Matrix && second instanceof Matrix) {\n      double[][] data1 = ((Matrix) first).getData();\n      double[][] data2 = ((Matrix) second).getData();\n      Array2DRowRealMatrix matrix1 = new Array2DRowRealMatrix(data1, false);\n      Array2DRowRealMatrix matrix2 = new Array2DRowRealMatrix(data2, false);\n      Array2DRowRealMatrix matrix3 = matrix1.add(matrix2);\n      return new Matrix(matrix3.getDataRef());\n    } else {\n      throw new IOException(\"Parameters for ebeAdd must either be two numeric arrays or two matrices. \");\n    }\n  }\n\n","sourceOld":"  @Override\n  public Object doWork(Object first, Object second) throws IOException{\n    if(null == first){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the first value\",toExpression(constructingFactory)));\n    }\n    if(null == second){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the second value\",toExpression(constructingFactory)));\n    }\n\n    if(first instanceof List && second instanceof List) {\n      double[] result = MathArrays.ebeAdd(\n          ((List) first).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray(),\n          ((List) second).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray()\n      );\n\n      List<Number> numbers = new ArrayList();\n      for (double d : result) {\n        numbers.add(d);\n      }\n\n      return numbers;\n    } else if(first instanceof Matrix && second instanceof Matrix) {\n      double[][] data1 = ((Matrix) first).getData();\n      double[][] data2 = ((Matrix) second).getData();\n      Array2DRowRealMatrix matrix1 = new Array2DRowRealMatrix(data1);\n      Array2DRowRealMatrix matrix2 = new Array2DRowRealMatrix(data2);\n      RealMatrix matrix3 = matrix1.add(matrix2);\n      return new Matrix(matrix3.getData());\n    } else {\n      throw new IOException(\"Parameters for ebeAdd must either be two numeric arrays or two matrices. \");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"431c2627ab600554864fa78f5e76abef81faa42d","date":1523357854,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/EBEAddEvaluator#doWork(Object,Object).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/EBEAddEvaluator#doWork(Object,Object).mjava","sourceNew":"  @Override\n  public Object doWork(Object first, Object second) throws IOException{\n    if(null == first){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the first value\",toExpression(constructingFactory)));\n    }\n    if(null == second){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the second value\",toExpression(constructingFactory)));\n    }\n\n    if(first instanceof List && second instanceof List) {\n      double[] result = MathArrays.ebeAdd(\n          ((List) first).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray(),\n          ((List) second).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray()\n      );\n\n      List<Number> numbers = new ArrayList();\n      for (double d : result) {\n        numbers.add(d);\n      }\n\n      return numbers;\n    } else if(first instanceof Matrix && second instanceof Matrix) {\n      double[][] data1 = ((Matrix) first).getData();\n      double[][] data2 = ((Matrix) second).getData();\n      Array2DRowRealMatrix matrix1 = new Array2DRowRealMatrix(data1, false);\n      Array2DRowRealMatrix matrix2 = new Array2DRowRealMatrix(data2, false);\n      Array2DRowRealMatrix matrix3 = matrix1.add(matrix2);\n      return new Matrix(matrix3.getDataRef());\n    } else {\n      throw new IOException(\"Parameters for ebeAdd must either be two numeric arrays or two matrices. \");\n    }\n  }\n\n","sourceOld":"  @Override\n  public Object doWork(Object first, Object second) throws IOException{\n    if(null == first){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the first value\",toExpression(constructingFactory)));\n    }\n    if(null == second){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the second value\",toExpression(constructingFactory)));\n    }\n\n    if(first instanceof List && second instanceof List) {\n      double[] result = MathArrays.ebeAdd(\n          ((List) first).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray(),\n          ((List) second).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray()\n      );\n\n      List<Number> numbers = new ArrayList();\n      for (double d : result) {\n        numbers.add(d);\n      }\n\n      return numbers;\n    } else if(first instanceof Matrix && second instanceof Matrix) {\n      double[][] data1 = ((Matrix) first).getData();\n      double[][] data2 = ((Matrix) second).getData();\n      Array2DRowRealMatrix matrix1 = new Array2DRowRealMatrix(data1);\n      Array2DRowRealMatrix matrix2 = new Array2DRowRealMatrix(data2);\n      RealMatrix matrix3 = matrix1.add(matrix2);\n      return new Matrix(matrix3.getData());\n    } else {\n      throw new IOException(\"Parameters for ebeAdd must either be two numeric arrays or two matrices. \");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885","date":1591579911,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/EBEAddEvaluator#doWork(Object,Object).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/EBEAddEvaluator#doWork(Object,Object).mjava","sourceNew":"  @Override\n  @SuppressWarnings({\"unchecked\"})\n  public Object doWork(Object first, Object second) throws IOException{\n    if(null == first){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the first value\",toExpression(constructingFactory)));\n    }\n    if(null == second){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the second value\",toExpression(constructingFactory)));\n    }\n\n    if(first instanceof List && second instanceof List) {\n      double[] result = MathArrays.ebeAdd(\n          ((List) first).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray(),\n          ((List) second).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray()\n      );\n\n      List<Number> numbers = new ArrayList<>();\n      for (double d : result) {\n        numbers.add(d);\n      }\n\n      return numbers;\n    } else if(first instanceof Matrix && second instanceof Matrix) {\n      double[][] data1 = ((Matrix) first).getData();\n      double[][] data2 = ((Matrix) second).getData();\n      Array2DRowRealMatrix matrix1 = new Array2DRowRealMatrix(data1, false);\n      Array2DRowRealMatrix matrix2 = new Array2DRowRealMatrix(data2, false);\n      Array2DRowRealMatrix matrix3 = matrix1.add(matrix2);\n      return new Matrix(matrix3.getDataRef());\n    } else {\n      throw new IOException(\"Parameters for ebeAdd must either be two numeric arrays or two matrices. \");\n    }\n  }\n\n","sourceOld":"  @Override\n  public Object doWork(Object first, Object second) throws IOException{\n    if(null == first){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the first value\",toExpression(constructingFactory)));\n    }\n    if(null == second){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the second value\",toExpression(constructingFactory)));\n    }\n\n    if(first instanceof List && second instanceof List) {\n      double[] result = MathArrays.ebeAdd(\n          ((List) first).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray(),\n          ((List) second).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray()\n      );\n\n      List<Number> numbers = new ArrayList();\n      for (double d : result) {\n        numbers.add(d);\n      }\n\n      return numbers;\n    } else if(first instanceof Matrix && second instanceof Matrix) {\n      double[][] data1 = ((Matrix) first).getData();\n      double[][] data2 = ((Matrix) second).getData();\n      Array2DRowRealMatrix matrix1 = new Array2DRowRealMatrix(data1, false);\n      Array2DRowRealMatrix matrix2 = new Array2DRowRealMatrix(data2, false);\n      Array2DRowRealMatrix matrix3 = matrix1.add(matrix2);\n      return new Matrix(matrix3.getDataRef());\n    } else {\n      throw new IOException(\"Parameters for ebeAdd must either be two numeric arrays or two matrices. \");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b21283ed01203901a7257aa4b7f0a0899c86e56e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a9850a2db59025ba8cb15c4fd7ab3bb1faa151f1"],"685bd38810c206c93e9058f3c2cfa9827c086c27":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","104a3f62ee393d48b5596de76ed4d9a4e0ea6de7"],"df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885":["431c2627ab600554864fa78f5e76abef81faa42d"],"104a3f62ee393d48b5596de76ed4d9a4e0ea6de7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b21283ed01203901a7257aa4b7f0a0899c86e56e"],"a9850a2db59025ba8cb15c4fd7ab3bb1faa151f1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bbe7f5e9d90420c7fc8cd235dd8fb33fa9befe54":["104a3f62ee393d48b5596de76ed4d9a4e0ea6de7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b78a448aeee9df343bca8f8c7be779c0185a2fa0":["bbe7f5e9d90420c7fc8cd235dd8fb33fa9befe54"],"431c2627ab600554864fa78f5e76abef81faa42d":["b78a448aeee9df343bca8f8c7be779c0185a2fa0","c1832e2a2126bdb6cf9f50b59b7a9add0b0d29ac"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885"],"c1832e2a2126bdb6cf9f50b59b7a9add0b0d29ac":["b78a448aeee9df343bca8f8c7be779c0185a2fa0"]},"commit2Childs":{"b21283ed01203901a7257aa4b7f0a0899c86e56e":["104a3f62ee393d48b5596de76ed4d9a4e0ea6de7"],"685bd38810c206c93e9058f3c2cfa9827c086c27":[],"df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"104a3f62ee393d48b5596de76ed4d9a4e0ea6de7":["685bd38810c206c93e9058f3c2cfa9827c086c27","bbe7f5e9d90420c7fc8cd235dd8fb33fa9befe54"],"a9850a2db59025ba8cb15c4fd7ab3bb1faa151f1":["b21283ed01203901a7257aa4b7f0a0899c86e56e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b21283ed01203901a7257aa4b7f0a0899c86e56e","685bd38810c206c93e9058f3c2cfa9827c086c27","104a3f62ee393d48b5596de76ed4d9a4e0ea6de7","a9850a2db59025ba8cb15c4fd7ab3bb1faa151f1"],"bbe7f5e9d90420c7fc8cd235dd8fb33fa9befe54":["b78a448aeee9df343bca8f8c7be779c0185a2fa0"],"b78a448aeee9df343bca8f8c7be779c0185a2fa0":["431c2627ab600554864fa78f5e76abef81faa42d","c1832e2a2126bdb6cf9f50b59b7a9add0b0d29ac"],"431c2627ab600554864fa78f5e76abef81faa42d":["df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885"],"c1832e2a2126bdb6cf9f50b59b7a9add0b0d29ac":["431c2627ab600554864fa78f5e76abef81faa42d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["685bd38810c206c93e9058f3c2cfa9827c086c27","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}