{"path":"modules/analysis/icu/src/test/org/apache/lucene/analysis/icu/TestICUNormalizer2Filter#testAlternate().mjava","commits":[{"id":"b441220ceb933f50f32318ab45acc05d5943f3aa","date":1274352360,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/icu/src/test/org/apache/lucene/analysis/icu/TestICUNormalizer2Filter#testAlternate().mjava","pathOld":"lucene/contrib/icu/src/test/org/apache/lucene/analysis/icu/TestICUNormalizer2Filter#testAlternate().mjava","sourceNew":"  public void testAlternate() throws IOException {\n    Analyzer a = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new ICUNormalizer2Filter(\n            new WhitespaceTokenizer(TEST_VERSION_CURRENT, reader),\n            /* specify nfc with decompose to get nfd */\n            Normalizer2.getInstance(null, \"nfc\", Normalizer2.Mode.DECOMPOSE));\n      }\n    };\n    \n    // decompose EAcute into E + combining Acute\n    assertAnalyzesTo(a, \"\\u00E9\", new String[] { \"\\u0065\\u0301\" });\n  }\n\n","sourceOld":"  public void testAlternate() throws IOException {\n    Analyzer a = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new ICUNormalizer2Filter(\n            new WhitespaceTokenizer(TEST_VERSION_CURRENT, reader),\n            /* specify nfc with decompose to get nfd */\n            Normalizer2.getInstance(null, \"nfc\", Normalizer2.Mode.DECOMPOSE));\n      }\n    };\n    \n    // decompose EAcute into E + combining Acute\n    assertAnalyzesTo(a, \"\\u00E9\", new String[] { \"\\u0065\\u0301\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"53ae89cd75b0acbdfb8890710c6742f3fb80e65d","date":1315806626,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/analysis/icu/src/test/org/apache/lucene/analysis/icu/TestICUNormalizer2Filter#testAlternate().mjava","pathOld":"modules/analysis/icu/src/test/org/apache/lucene/analysis/icu/TestICUNormalizer2Filter#testAlternate().mjava","sourceNew":"  public void testAlternate() throws IOException {\n    Analyzer a = new ReusableAnalyzerBase() {\n      @Override\n      public TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new WhitespaceTokenizer(TEST_VERSION_CURRENT, reader);\n        return new TokenStreamComponents(tokenizer, new ICUNormalizer2Filter(\n            tokenizer,\n            /* specify nfc with decompose to get nfd */\n            Normalizer2.getInstance(null, \"nfc\", Normalizer2.Mode.DECOMPOSE)));\n      }\n    };\n    \n    // decompose EAcute into E + combining Acute\n    assertAnalyzesTo(a, \"\\u00E9\", new String[] { \"\\u0065\\u0301\" });\n  }\n\n","sourceOld":"  public void testAlternate() throws IOException {\n    Analyzer a = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new ICUNormalizer2Filter(\n            new WhitespaceTokenizer(TEST_VERSION_CURRENT, reader),\n            /* specify nfc with decompose to get nfd */\n            Normalizer2.getInstance(null, \"nfc\", Normalizer2.Mode.DECOMPOSE));\n      }\n    };\n    \n    // decompose EAcute into E + combining Acute\n    assertAnalyzesTo(a, \"\\u00E9\", new String[] { \"\\u0065\\u0301\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2f49143da0a5d278a72f741432047fcfa6da996e","date":1316927425,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/analysis/icu/src/test/org/apache/lucene/analysis/icu/TestICUNormalizer2Filter#testAlternate().mjava","pathOld":"modules/analysis/icu/src/test/org/apache/lucene/analysis/icu/TestICUNormalizer2Filter#testAlternate().mjava","sourceNew":"  public void testAlternate() throws IOException {\n    Analyzer a = new Analyzer() {\n      @Override\n      public TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new WhitespaceTokenizer(TEST_VERSION_CURRENT, reader);\n        return new TokenStreamComponents(tokenizer, new ICUNormalizer2Filter(\n            tokenizer,\n            /* specify nfc with decompose to get nfd */\n            Normalizer2.getInstance(null, \"nfc\", Normalizer2.Mode.DECOMPOSE)));\n      }\n    };\n    \n    // decompose EAcute into E + combining Acute\n    assertAnalyzesTo(a, \"\\u00E9\", new String[] { \"\\u0065\\u0301\" });\n  }\n\n","sourceOld":"  public void testAlternate() throws IOException {\n    Analyzer a = new ReusableAnalyzerBase() {\n      @Override\n      public TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new WhitespaceTokenizer(TEST_VERSION_CURRENT, reader);\n        return new TokenStreamComponents(tokenizer, new ICUNormalizer2Filter(\n            tokenizer,\n            /* specify nfc with decompose to get nfd */\n            Normalizer2.getInstance(null, \"nfc\", Normalizer2.Mode.DECOMPOSE)));\n      }\n    };\n    \n    // decompose EAcute into E + combining Acute\n    assertAnalyzesTo(a, \"\\u00E9\", new String[] { \"\\u0065\\u0301\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30c7f0405bc6c1c9f30fb3518be63051899f142d","date":1332335438,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/icu/src/test/org/apache/lucene/analysis/icu/TestICUNormalizer2Filter#testAlternate().mjava","pathOld":"modules/analysis/icu/src/test/org/apache/lucene/analysis/icu/TestICUNormalizer2Filter#testAlternate().mjava","sourceNew":"  public void testAlternate() throws IOException {\n    Analyzer a = new Analyzer() {\n      @Override\n      public TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, new ICUNormalizer2Filter(\n            tokenizer,\n            /* specify nfc with decompose to get nfd */\n            Normalizer2.getInstance(null, \"nfc\", Normalizer2.Mode.DECOMPOSE)));\n      }\n    };\n    \n    // decompose EAcute into E + combining Acute\n    assertAnalyzesTo(a, \"\\u00E9\", new String[] { \"\\u0065\\u0301\" });\n  }\n\n","sourceOld":"  public void testAlternate() throws IOException {\n    Analyzer a = new Analyzer() {\n      @Override\n      public TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new WhitespaceTokenizer(TEST_VERSION_CURRENT, reader);\n        return new TokenStreamComponents(tokenizer, new ICUNormalizer2Filter(\n            tokenizer,\n            /* specify nfc with decompose to get nfd */\n            Normalizer2.getInstance(null, \"nfc\", Normalizer2.Mode.DECOMPOSE)));\n      }\n    };\n    \n    // decompose EAcute into E + combining Acute\n    assertAnalyzesTo(a, \"\\u00E9\", new String[] { \"\\u0065\\u0301\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/icu/src/test/org/apache/lucene/analysis/icu/TestICUNormalizer2Filter#testAlternate().mjava","pathOld":"modules/analysis/icu/src/test/org/apache/lucene/analysis/icu/TestICUNormalizer2Filter#testAlternate().mjava","sourceNew":"  public void testAlternate() throws IOException {\n    Analyzer a = new Analyzer() {\n      @Override\n      public TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, new ICUNormalizer2Filter(\n            tokenizer,\n            /* specify nfc with decompose to get nfd */\n            Normalizer2.getInstance(null, \"nfc\", Normalizer2.Mode.DECOMPOSE)));\n      }\n    };\n    \n    // decompose EAcute into E + combining Acute\n    assertAnalyzesTo(a, \"\\u00E9\", new String[] { \"\\u0065\\u0301\" });\n  }\n\n","sourceOld":"  public void testAlternate() throws IOException {\n    Analyzer a = new Analyzer() {\n      @Override\n      public TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, new ICUNormalizer2Filter(\n            tokenizer,\n            /* specify nfc with decompose to get nfd */\n            Normalizer2.getInstance(null, \"nfc\", Normalizer2.Mode.DECOMPOSE)));\n      }\n    };\n    \n    // decompose EAcute into E + combining Acute\n    assertAnalyzesTo(a, \"\\u00E9\", new String[] { \"\\u0065\\u0301\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["30c7f0405bc6c1c9f30fb3518be63051899f142d"],"30c7f0405bc6c1c9f30fb3518be63051899f142d":["2f49143da0a5d278a72f741432047fcfa6da996e"],"b441220ceb933f50f32318ab45acc05d5943f3aa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2f49143da0a5d278a72f741432047fcfa6da996e":["53ae89cd75b0acbdfb8890710c6742f3fb80e65d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"53ae89cd75b0acbdfb8890710c6742f3fb80e65d":["b441220ceb933f50f32318ab45acc05d5943f3aa"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"30c7f0405bc6c1c9f30fb3518be63051899f142d":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b441220ceb933f50f32318ab45acc05d5943f3aa":["53ae89cd75b0acbdfb8890710c6742f3fb80e65d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b441220ceb933f50f32318ab45acc05d5943f3aa"],"2f49143da0a5d278a72f741432047fcfa6da996e":["30c7f0405bc6c1c9f30fb3518be63051899f142d"],"53ae89cd75b0acbdfb8890710c6742f3fb80e65d":["2f49143da0a5d278a72f741432047fcfa6da996e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}