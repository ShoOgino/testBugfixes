{"path":"solr/src/java/org/apache/solr/update/DirectUpdateHandler2.CommitTracker#run().mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/update/DirectUpdateHandler2.CommitTracker#run().mjava","pathOld":"/dev/null","sourceNew":"    /** This is the worker part for the ScheduledFuture **/\n    public synchronized void run() {\n      long started = System.currentTimeMillis();\n      try {\n        CommitUpdateCommand command = new CommitUpdateCommand( false );\n        command.waitFlush = true;\n        command.waitSearcher = true;\n        //no need for command.maxOptimizeSegments = 1;  since it is not optimizing\n        commit( command );\n        autoCommitCount++;\n      }\n      catch (Exception e) {\n        log.error( \"auto commit error...\" );\n        e.printStackTrace();\n      }\n      finally {\n        pending = null;\n      }\n\n      // check if docs have been submitted since the commit started\n      if( lastAddedTime > started ) {\n        if( docsUpperBound > 0 && docsSinceCommit > docsUpperBound ) {\n          pending = scheduler.schedule( this, 100, TimeUnit.MILLISECONDS );\n        }\n        else if( timeUpperBound > 0 ) {\n          pending = scheduler.schedule( this, timeUpperBound, TimeUnit.MILLISECONDS );\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/update/DirectUpdateHandler2.CommitTracker#run().mjava","sourceNew":null,"sourceOld":"    /** This is the worker part for the ScheduledFuture **/\n    public synchronized void run() {\n      long started = System.currentTimeMillis();\n      try {\n        CommitUpdateCommand command = new CommitUpdateCommand( false );\n        command.waitFlush = true;\n        command.waitSearcher = true;\n        //no need for command.maxOptimizeSegments = 1;  since it is not optimizing\n        commit( command );\n        autoCommitCount++;\n      }\n      catch (Exception e) {\n        log.error( \"auto commit error...\" );\n        e.printStackTrace();\n      }\n      finally {\n        pending = null;\n      }\n\n      // check if docs have been submitted since the commit started\n      if( lastAddedTime > started ) {\n        if( docsUpperBound > 0 && docsSinceCommit > docsUpperBound ) {\n          pending = scheduler.schedule( this, 100, TimeUnit.MILLISECONDS );\n        }\n        else if( timeUpperBound > 0 ) {\n          pending = scheduler.schedule( this, timeUpperBound, TimeUnit.MILLISECONDS );\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/update/DirectUpdateHandler2.CommitTracker#run().mjava","pathOld":"src/java/org/apache/solr/update/DirectUpdateHandler2.CommitTracker#run().mjava","sourceNew":"    /** This is the worker part for the ScheduledFuture **/\n    public synchronized void run() {\n      long started = System.currentTimeMillis();\n      try {\n        CommitUpdateCommand command = new CommitUpdateCommand( false );\n        command.waitFlush = true;\n        command.waitSearcher = true;\n        //no need for command.maxOptimizeSegments = 1;  since it is not optimizing\n        commit( command );\n        autoCommitCount++;\n      }\n      catch (Exception e) {\n        log.error( \"auto commit error...\" );\n        e.printStackTrace();\n      }\n      finally {\n        pending = null;\n      }\n\n      // check if docs have been submitted since the commit started\n      if( lastAddedTime > started ) {\n        if( docsUpperBound > 0 && docsSinceCommit > docsUpperBound ) {\n          pending = scheduler.schedule( this, 100, TimeUnit.MILLISECONDS );\n        }\n        else if( timeUpperBound > 0 ) {\n          pending = scheduler.schedule( this, timeUpperBound, TimeUnit.MILLISECONDS );\n        }\n      }\n    }\n\n","sourceOld":"    /** This is the worker part for the ScheduledFuture **/\n    public synchronized void run() {\n      long started = System.currentTimeMillis();\n      try {\n        CommitUpdateCommand command = new CommitUpdateCommand( false );\n        command.waitFlush = true;\n        command.waitSearcher = true;\n        //no need for command.maxOptimizeSegments = 1;  since it is not optimizing\n        commit( command );\n        autoCommitCount++;\n      }\n      catch (Exception e) {\n        log.error( \"auto commit error...\" );\n        e.printStackTrace();\n      }\n      finally {\n        pending = null;\n      }\n\n      // check if docs have been submitted since the commit started\n      if( lastAddedTime > started ) {\n        if( docsUpperBound > 0 && docsSinceCommit > docsUpperBound ) {\n          pending = scheduler.schedule( this, 100, TimeUnit.MILLISECONDS );\n        }\n        else if( timeUpperBound > 0 ) {\n          pending = scheduler.schedule( this, timeUpperBound, TimeUnit.MILLISECONDS );\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/update/DirectUpdateHandler2.CommitTracker#run().mjava","pathOld":"/dev/null","sourceNew":"    /** This is the worker part for the ScheduledFuture **/\n    public synchronized void run() {\n      long started = System.currentTimeMillis();\n      try {\n        CommitUpdateCommand command = new CommitUpdateCommand( false );\n        command.waitFlush = true;\n        command.waitSearcher = true;\n        //no need for command.maxOptimizeSegments = 1;  since it is not optimizing\n        commit( command );\n        autoCommitCount++;\n      }\n      catch (Exception e) {\n        log.error( \"auto commit error...\" );\n        e.printStackTrace();\n      }\n      finally {\n        pending = null;\n      }\n\n      // check if docs have been submitted since the commit started\n      if( lastAddedTime > started ) {\n        if( docsUpperBound > 0 && docsSinceCommit > docsUpperBound ) {\n          pending = scheduler.schedule( this, 100, TimeUnit.MILLISECONDS );\n        }\n        else if( timeUpperBound > 0 ) {\n          pending = scheduler.schedule( this, timeUpperBound, TimeUnit.MILLISECONDS );\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5ae62bcdfd4a0689a745ab1d38c6bd1c7c390cfa","date":1293733647,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/update/DirectUpdateHandler2.CommitTracker#run().mjava","pathOld":"solr/src/java/org/apache/solr/update/DirectUpdateHandler2.CommitTracker#run().mjava","sourceNew":"    /** This is the worker part for the ScheduledFuture **/\n    public synchronized void run() {\n      long started = System.currentTimeMillis();\n      SolrQueryRequest req = new LocalSolrQueryRequest(core, new ModifiableSolrParams());\n      try {\n        CommitUpdateCommand command = new CommitUpdateCommand(req, false );\n        command.waitFlush = true;\n        command.waitSearcher = true;\n        //no need for command.maxOptimizeSegments = 1;  since it is not optimizing\n        commit( command );\n        autoCommitCount++;\n      }\n      catch (Exception e) {\n        log.error( \"auto commit error...\" );\n        e.printStackTrace();\n      }\n      finally {\n        pending = null;\n        req.close();\n      }\n\n      // check if docs have been submitted since the commit started\n      if( lastAddedTime > started ) {\n        if( docsUpperBound > 0 && docsSinceCommit > docsUpperBound ) {\n          pending = scheduler.schedule( this, 100, TimeUnit.MILLISECONDS );\n        }\n        else if( timeUpperBound > 0 ) {\n          pending = scheduler.schedule( this, timeUpperBound, TimeUnit.MILLISECONDS );\n        }\n      }\n    }\n\n","sourceOld":"    /** This is the worker part for the ScheduledFuture **/\n    public synchronized void run() {\n      long started = System.currentTimeMillis();\n      try {\n        CommitUpdateCommand command = new CommitUpdateCommand( false );\n        command.waitFlush = true;\n        command.waitSearcher = true;\n        //no need for command.maxOptimizeSegments = 1;  since it is not optimizing\n        commit( command );\n        autoCommitCount++;\n      }\n      catch (Exception e) {\n        log.error( \"auto commit error...\" );\n        e.printStackTrace();\n      }\n      finally {\n        pending = null;\n      }\n\n      // check if docs have been submitted since the commit started\n      if( lastAddedTime > started ) {\n        if( docsUpperBound > 0 && docsSinceCommit > docsUpperBound ) {\n          pending = scheduler.schedule( this, 100, TimeUnit.MILLISECONDS );\n        }\n        else if( timeUpperBound > 0 ) {\n          pending = scheduler.schedule( this, timeUpperBound, TimeUnit.MILLISECONDS );\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c","date":1294014627,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/update/DirectUpdateHandler2.CommitTracker#run().mjava","pathOld":"solr/src/java/org/apache/solr/update/DirectUpdateHandler2.CommitTracker#run().mjava","sourceNew":"    /** This is the worker part for the ScheduledFuture **/\n    public synchronized void run() {\n      long started = System.currentTimeMillis();\n      SolrQueryRequest req = new LocalSolrQueryRequest(core, new ModifiableSolrParams());\n      try {\n        CommitUpdateCommand command = new CommitUpdateCommand(req, false );\n        command.waitFlush = true;\n        command.waitSearcher = true;\n        //no need for command.maxOptimizeSegments = 1;  since it is not optimizing\n        commit( command );\n        autoCommitCount++;\n      }\n      catch (Exception e) {\n        log.error( \"auto commit error...\" );\n        e.printStackTrace();\n      }\n      finally {\n        pending = null;\n        req.close();\n      }\n\n      // check if docs have been submitted since the commit started\n      if( lastAddedTime > started ) {\n        if( docsUpperBound > 0 && docsSinceCommit > docsUpperBound ) {\n          pending = scheduler.schedule( this, 100, TimeUnit.MILLISECONDS );\n        }\n        else if( timeUpperBound > 0 ) {\n          pending = scheduler.schedule( this, timeUpperBound, TimeUnit.MILLISECONDS );\n        }\n      }\n    }\n\n","sourceOld":"    /** This is the worker part for the ScheduledFuture **/\n    public synchronized void run() {\n      long started = System.currentTimeMillis();\n      try {\n        CommitUpdateCommand command = new CommitUpdateCommand( false );\n        command.waitFlush = true;\n        command.waitSearcher = true;\n        //no need for command.maxOptimizeSegments = 1;  since it is not optimizing\n        commit( command );\n        autoCommitCount++;\n      }\n      catch (Exception e) {\n        log.error( \"auto commit error...\" );\n        e.printStackTrace();\n      }\n      finally {\n        pending = null;\n      }\n\n      // check if docs have been submitted since the commit started\n      if( lastAddedTime > started ) {\n        if( docsUpperBound > 0 && docsSinceCommit > docsUpperBound ) {\n          pending = scheduler.schedule( this, 100, TimeUnit.MILLISECONDS );\n        }\n        else if( timeUpperBound > 0 ) {\n          pending = scheduler.schedule( this, timeUpperBound, TimeUnit.MILLISECONDS );\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/update/DirectUpdateHandler2.CommitTracker#run().mjava","pathOld":"solr/src/java/org/apache/solr/update/DirectUpdateHandler2.CommitTracker#run().mjava","sourceNew":"    /** This is the worker part for the ScheduledFuture **/\n    public synchronized void run() {\n      long started = System.currentTimeMillis();\n      SolrQueryRequest req = new LocalSolrQueryRequest(core, new ModifiableSolrParams());\n      try {\n        CommitUpdateCommand command = new CommitUpdateCommand(req, false );\n        command.waitFlush = true;\n        command.waitSearcher = true;\n        //no need for command.maxOptimizeSegments = 1;  since it is not optimizing\n        commit( command );\n        autoCommitCount++;\n      }\n      catch (Exception e) {\n        log.error( \"auto commit error...\" );\n        e.printStackTrace();\n      }\n      finally {\n        pending = null;\n        req.close();\n      }\n\n      // check if docs have been submitted since the commit started\n      if( lastAddedTime > started ) {\n        if( docsUpperBound > 0 && docsSinceCommit > docsUpperBound ) {\n          pending = scheduler.schedule( this, 100, TimeUnit.MILLISECONDS );\n        }\n        else if( timeUpperBound > 0 ) {\n          pending = scheduler.schedule( this, timeUpperBound, TimeUnit.MILLISECONDS );\n        }\n      }\n    }\n\n","sourceOld":"    /** This is the worker part for the ScheduledFuture **/\n    public synchronized void run() {\n      long started = System.currentTimeMillis();\n      try {\n        CommitUpdateCommand command = new CommitUpdateCommand( false );\n        command.waitFlush = true;\n        command.waitSearcher = true;\n        //no need for command.maxOptimizeSegments = 1;  since it is not optimizing\n        commit( command );\n        autoCommitCount++;\n      }\n      catch (Exception e) {\n        log.error( \"auto commit error...\" );\n        e.printStackTrace();\n      }\n      finally {\n        pending = null;\n      }\n\n      // check if docs have been submitted since the commit started\n      if( lastAddedTime > started ) {\n        if( docsUpperBound > 0 && docsSinceCommit > docsUpperBound ) {\n          pending = scheduler.schedule( this, 100, TimeUnit.MILLISECONDS );\n        }\n        else if( timeUpperBound > 0 ) {\n          pending = scheduler.schedule( this, timeUpperBound, TimeUnit.MILLISECONDS );\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a71a0b2d4be2299a163f60626729852d81a8e02","date":1309442399,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/update/DirectUpdateHandler2.CommitTracker#run().mjava","sourceNew":null,"sourceOld":"    /** This is the worker part for the ScheduledFuture **/\n    public synchronized void run() {\n      long started = System.currentTimeMillis();\n      SolrQueryRequest req = new LocalSolrQueryRequest(core, new ModifiableSolrParams());\n      try {\n        CommitUpdateCommand command = new CommitUpdateCommand(req, false );\n        command.waitFlush = true;\n        command.waitSearcher = true;\n        //no need for command.maxOptimizeSegments = 1;  since it is not optimizing\n        commit( command );\n        autoCommitCount++;\n      }\n      catch (Exception e) {\n        log.error( \"auto commit error...\" );\n        e.printStackTrace();\n      }\n      finally {\n        pending = null;\n        req.close();\n      }\n\n      // check if docs have been submitted since the commit started\n      if( lastAddedTime > started ) {\n        if( docsUpperBound > 0 && docsSinceCommit > docsUpperBound ) {\n          pending = scheduler.schedule( this, 100, TimeUnit.MILLISECONDS );\n        }\n        else if( timeUpperBound > 0 ) {\n          pending = scheduler.schedule( this, timeUpperBound, TimeUnit.MILLISECONDS );\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":4,"author":"Steven Rowe","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/update/DirectUpdateHandler2.CommitTracker#run().mjava","sourceNew":null,"sourceOld":"    /** This is the worker part for the ScheduledFuture **/\n    public synchronized void run() {\n      long started = System.currentTimeMillis();\n      SolrQueryRequest req = new LocalSolrQueryRequest(core, new ModifiableSolrParams());\n      try {\n        CommitUpdateCommand command = new CommitUpdateCommand(req, false );\n        command.waitFlush = true;\n        command.waitSearcher = true;\n        //no need for command.maxOptimizeSegments = 1;  since it is not optimizing\n        commit( command );\n        autoCommitCount++;\n      }\n      catch (Exception e) {\n        log.error( \"auto commit error...\" );\n        e.printStackTrace();\n      }\n      finally {\n        pending = null;\n        req.close();\n      }\n\n      // check if docs have been submitted since the commit started\n      if( lastAddedTime > started ) {\n        if( docsUpperBound > 0 && docsSinceCommit > docsUpperBound ) {\n          pending = scheduler.schedule( this, 100, TimeUnit.MILLISECONDS );\n        }\n        else if( timeUpperBound > 0 ) {\n          pending = scheduler.schedule( this, timeUpperBound, TimeUnit.MILLISECONDS );\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/update/DirectUpdateHandler2.CommitTracker#run().mjava","sourceNew":null,"sourceOld":"    /** This is the worker part for the ScheduledFuture **/\n    public synchronized void run() {\n      long started = System.currentTimeMillis();\n      SolrQueryRequest req = new LocalSolrQueryRequest(core, new ModifiableSolrParams());\n      try {\n        CommitUpdateCommand command = new CommitUpdateCommand(req, false );\n        command.waitFlush = true;\n        command.waitSearcher = true;\n        //no need for command.maxOptimizeSegments = 1;  since it is not optimizing\n        commit( command );\n        autoCommitCount++;\n      }\n      catch (Exception e) {\n        log.error( \"auto commit error...\" );\n        e.printStackTrace();\n      }\n      finally {\n        pending = null;\n        req.close();\n      }\n\n      // check if docs have been submitted since the commit started\n      if( lastAddedTime > started ) {\n        if( docsUpperBound > 0 && docsSinceCommit > docsUpperBound ) {\n          pending = scheduler.schedule( this, 100, TimeUnit.MILLISECONDS );\n        }\n        else if( timeUpperBound > 0 ) {\n          pending = scheduler.schedule( this, timeUpperBound, TimeUnit.MILLISECONDS );\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["1da8d55113b689b06716246649de6f62430f15c0","5ae62bcdfd4a0689a745ab1d38c6bd1c7c390cfa"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["5ae62bcdfd4a0689a745ab1d38c6bd1c7c390cfa","7a71a0b2d4be2299a163f60626729852d81a8e02"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["5ae62bcdfd4a0689a745ab1d38c6bd1c7c390cfa","7a71a0b2d4be2299a163f60626729852d81a8e02"],"7a71a0b2d4be2299a163f60626729852d81a8e02":["5ae62bcdfd4a0689a745ab1d38c6bd1c7c390cfa"],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c":["1da8d55113b689b06716246649de6f62430f15c0","5ae62bcdfd4a0689a745ab1d38c6bd1c7c390cfa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"5ae62bcdfd4a0689a745ab1d38c6bd1c7c390cfa":["1da8d55113b689b06716246649de6f62430f15c0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7a71a0b2d4be2299a163f60626729852d81a8e02"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":[],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"7a71a0b2d4be2299a163f60626729852d81a8e02":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1da8d55113b689b06716246649de6f62430f15c0":["70ad682703b8585f5d0a637efec044d57ec05efb","ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c","5ae62bcdfd4a0689a745ab1d38c6bd1c7c390cfa"],"ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"5ae62bcdfd4a0689a745ab1d38c6bd1c7c390cfa":["70ad682703b8585f5d0a637efec044d57ec05efb","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","7a71a0b2d4be2299a163f60626729852d81a8e02","ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["70ad682703b8585f5d0a637efec044d57ec05efb","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}