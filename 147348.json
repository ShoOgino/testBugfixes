{"path":"lucene/core/src/java/org/apache/lucene/util/fst/NodeHash#hash(int).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/NodeHash#hash(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/fst/NodeHash#hash(int).mjava","sourceNew":"  // hash code for a frozen node\n  private int hash(int node) throws IOException {\n    final int PRIME = 31;\n    final FST.BytesReader in = fst.getBytesReader(0);\n    //System.out.println(\"hash frozen node=\" + node);\n    int h = 0;\n    fst.readFirstRealTargetArc(node, scratchArc, in);\n    while(true) {\n      //System.out.println(\"  label=\" + scratchArc.label + \" target=\" + scratchArc.target + \" h=\" + h + \" output=\" + fst.outputs.outputToString(scratchArc.output) + \" next?=\" + scratchArc.flag(4) + \" final?=\" + scratchArc.isFinal());\n      h = PRIME * h + scratchArc.label;\n      h = PRIME * h + scratchArc.target;\n      h = PRIME * h + scratchArc.output.hashCode();\n      h = PRIME * h + scratchArc.nextFinalOutput.hashCode();\n      if (scratchArc.isFinal()) {\n        h += 17;\n      }\n      if (scratchArc.isLast()) {\n        break;\n      }\n      fst.readNextRealArc(scratchArc, in);\n    }\n    //System.out.println(\"  ret \" + (h&Integer.MAX_VALUE));\n    return h & Integer.MAX_VALUE;\n  }\n\n","sourceOld":"  // hash code for a frozen node\n  private int hash(int node) throws IOException {\n    final int PRIME = 31;\n    final FST.BytesReader in = fst.getBytesReader(0);\n    //System.out.println(\"hash frozen node=\" + node);\n    int h = 0;\n    fst.readFirstRealTargetArc(node, scratchArc, in);\n    while(true) {\n      //System.out.println(\"  label=\" + scratchArc.label + \" target=\" + scratchArc.target + \" h=\" + h + \" output=\" + fst.outputs.outputToString(scratchArc.output) + \" next?=\" + scratchArc.flag(4) + \" final?=\" + scratchArc.isFinal());\n      h = PRIME * h + scratchArc.label;\n      h = PRIME * h + scratchArc.target;\n      h = PRIME * h + scratchArc.output.hashCode();\n      h = PRIME * h + scratchArc.nextFinalOutput.hashCode();\n      if (scratchArc.isFinal()) {\n        h += 17;\n      }\n      if (scratchArc.isLast()) {\n        break;\n      }\n      fst.readNextRealArc(scratchArc, in);\n    }\n    //System.out.println(\"  ret \" + (h&Integer.MAX_VALUE));\n    return h & Integer.MAX_VALUE;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"87e78f3c129251e74ecc2ff73a32de0f27cf09d5","date":1358006150,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/NodeHash#hash(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/NodeHash#hash(int).mjava","sourceNew":"  // hash code for a frozen node\n  private int hash(int node) throws IOException {\n    final int PRIME = 31;\n    final FST.BytesReader in = fst.getBytesReader(0);\n    //System.out.println(\"hash frozen node=\" + node);\n    int h = 0;\n    fst.readFirstRealTargetArc(node, scratchArc, in);\n    while(true) {\n      //System.out.println(\"  label=\" + scratchArc.label + \" target=\" + scratchArc.target + \" h=\" + h + \" output=\" + fst.outputs.outputToString(scratchArc.output) + \" next?=\" + scratchArc.flag(4) + \" final?=\" + scratchArc.isFinal() + \" pos=\" + in.getPosition());\n      h = PRIME * h + scratchArc.label;\n      h = PRIME * h + scratchArc.target;\n      h = PRIME * h + scratchArc.output.hashCode();\n      h = PRIME * h + scratchArc.nextFinalOutput.hashCode();\n      if (scratchArc.isFinal()) {\n        h += 17;\n      }\n      if (scratchArc.isLast()) {\n        break;\n      }\n      fst.readNextRealArc(scratchArc, in);\n    }\n    //System.out.println(\"  ret \" + (h&Integer.MAX_VALUE));\n    return h & Integer.MAX_VALUE;\n  }\n\n","sourceOld":"  // hash code for a frozen node\n  private int hash(int node) throws IOException {\n    final int PRIME = 31;\n    final FST.BytesReader in = fst.getBytesReader(0);\n    //System.out.println(\"hash frozen node=\" + node);\n    int h = 0;\n    fst.readFirstRealTargetArc(node, scratchArc, in);\n    while(true) {\n      //System.out.println(\"  label=\" + scratchArc.label + \" target=\" + scratchArc.target + \" h=\" + h + \" output=\" + fst.outputs.outputToString(scratchArc.output) + \" next?=\" + scratchArc.flag(4) + \" final?=\" + scratchArc.isFinal());\n      h = PRIME * h + scratchArc.label;\n      h = PRIME * h + scratchArc.target;\n      h = PRIME * h + scratchArc.output.hashCode();\n      h = PRIME * h + scratchArc.nextFinalOutput.hashCode();\n      if (scratchArc.isFinal()) {\n        h += 17;\n      }\n      if (scratchArc.isLast()) {\n        break;\n      }\n      fst.readNextRealArc(scratchArc, in);\n    }\n    //System.out.println(\"  ret \" + (h&Integer.MAX_VALUE));\n    return h & Integer.MAX_VALUE;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4612a1625257c97ec7983c15cbc6289689e42fed","date":1358010116,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/NodeHash#hash(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/NodeHash#hash(int).mjava","sourceNew":"  // hash code for a frozen node\n  private int hash(int node) throws IOException {\n    final int PRIME = 31;\n    //System.out.println(\"hash frozen node=\" + node);\n    int h = 0;\n    fst.readFirstRealTargetArc(node, scratchArc, in);\n    while(true) {\n      //System.out.println(\"  label=\" + scratchArc.label + \" target=\" + scratchArc.target + \" h=\" + h + \" output=\" + fst.outputs.outputToString(scratchArc.output) + \" next?=\" + scratchArc.flag(4) + \" final?=\" + scratchArc.isFinal() + \" pos=\" + in.getPosition());\n      h = PRIME * h + scratchArc.label;\n      h = PRIME * h + scratchArc.target;\n      h = PRIME * h + scratchArc.output.hashCode();\n      h = PRIME * h + scratchArc.nextFinalOutput.hashCode();\n      if (scratchArc.isFinal()) {\n        h += 17;\n      }\n      if (scratchArc.isLast()) {\n        break;\n      }\n      fst.readNextRealArc(scratchArc, in);\n    }\n    //System.out.println(\"  ret \" + (h&Integer.MAX_VALUE));\n    return h & Integer.MAX_VALUE;\n  }\n\n","sourceOld":"  // hash code for a frozen node\n  private int hash(int node) throws IOException {\n    final int PRIME = 31;\n    final FST.BytesReader in = fst.getBytesReader(0);\n    //System.out.println(\"hash frozen node=\" + node);\n    int h = 0;\n    fst.readFirstRealTargetArc(node, scratchArc, in);\n    while(true) {\n      //System.out.println(\"  label=\" + scratchArc.label + \" target=\" + scratchArc.target + \" h=\" + h + \" output=\" + fst.outputs.outputToString(scratchArc.output) + \" next?=\" + scratchArc.flag(4) + \" final?=\" + scratchArc.isFinal() + \" pos=\" + in.getPosition());\n      h = PRIME * h + scratchArc.label;\n      h = PRIME * h + scratchArc.target;\n      h = PRIME * h + scratchArc.output.hashCode();\n      h = PRIME * h + scratchArc.nextFinalOutput.hashCode();\n      if (scratchArc.isFinal()) {\n        h += 17;\n      }\n      if (scratchArc.isLast()) {\n        break;\n      }\n      fst.readNextRealArc(scratchArc, in);\n    }\n    //System.out.println(\"  ret \" + (h&Integer.MAX_VALUE));\n    return h & Integer.MAX_VALUE;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3c397b1515e745d8b12d70edfc0e17cb7eac7f0","date":1358188277,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/NodeHash#hash(long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/NodeHash#hash(int).mjava","sourceNew":"  // hash code for a frozen node\n  private int hash(long node) throws IOException {\n    final int PRIME = 31;\n    //System.out.println(\"hash frozen node=\" + node);\n    int h = 0;\n    fst.readFirstRealTargetArc(node, scratchArc, in);\n    while(true) {\n      //System.out.println(\"  label=\" + scratchArc.label + \" target=\" + scratchArc.target + \" h=\" + h + \" output=\" + fst.outputs.outputToString(scratchArc.output) + \" next?=\" + scratchArc.flag(4) + \" final?=\" + scratchArc.isFinal() + \" pos=\" + in.getPosition());\n      h = PRIME * h + scratchArc.label;\n      h = PRIME * h + (int) (scratchArc.target^(scratchArc.target>>32));\n      h = PRIME * h + scratchArc.output.hashCode();\n      h = PRIME * h + scratchArc.nextFinalOutput.hashCode();\n      if (scratchArc.isFinal()) {\n        h += 17;\n      }\n      if (scratchArc.isLast()) {\n        break;\n      }\n      fst.readNextRealArc(scratchArc, in);\n    }\n    //System.out.println(\"  ret \" + (h&Integer.MAX_VALUE));\n    return h & Integer.MAX_VALUE;\n  }\n\n","sourceOld":"  // hash code for a frozen node\n  private int hash(int node) throws IOException {\n    final int PRIME = 31;\n    //System.out.println(\"hash frozen node=\" + node);\n    int h = 0;\n    fst.readFirstRealTargetArc(node, scratchArc, in);\n    while(true) {\n      //System.out.println(\"  label=\" + scratchArc.label + \" target=\" + scratchArc.target + \" h=\" + h + \" output=\" + fst.outputs.outputToString(scratchArc.output) + \" next?=\" + scratchArc.flag(4) + \" final?=\" + scratchArc.isFinal() + \" pos=\" + in.getPosition());\n      h = PRIME * h + scratchArc.label;\n      h = PRIME * h + scratchArc.target;\n      h = PRIME * h + scratchArc.output.hashCode();\n      h = PRIME * h + scratchArc.nextFinalOutput.hashCode();\n      if (scratchArc.isFinal()) {\n        h += 17;\n      }\n      if (scratchArc.isLast()) {\n        break;\n      }\n      fst.readNextRealArc(scratchArc, in);\n    }\n    //System.out.println(\"  ret \" + (h&Integer.MAX_VALUE));\n    return h & Integer.MAX_VALUE;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8917bfede3b4ca30f4305c1e391e9218959cd723","date":1358189662,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/NodeHash#hash(long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/NodeHash#hash(int).mjava","sourceNew":"  // hash code for a frozen node\n  private int hash(long node) throws IOException {\n    final int PRIME = 31;\n    //System.out.println(\"hash frozen node=\" + node);\n    int h = 0;\n    fst.readFirstRealTargetArc(node, scratchArc, in);\n    while(true) {\n      //System.out.println(\"  label=\" + scratchArc.label + \" target=\" + scratchArc.target + \" h=\" + h + \" output=\" + fst.outputs.outputToString(scratchArc.output) + \" next?=\" + scratchArc.flag(4) + \" final?=\" + scratchArc.isFinal() + \" pos=\" + in.getPosition());\n      h = PRIME * h + scratchArc.label;\n      h = PRIME * h + (int) (scratchArc.target^(scratchArc.target>>32));\n      h = PRIME * h + scratchArc.output.hashCode();\n      h = PRIME * h + scratchArc.nextFinalOutput.hashCode();\n      if (scratchArc.isFinal()) {\n        h += 17;\n      }\n      if (scratchArc.isLast()) {\n        break;\n      }\n      fst.readNextRealArc(scratchArc, in);\n    }\n    //System.out.println(\"  ret \" + (h&Integer.MAX_VALUE));\n    return h & Integer.MAX_VALUE;\n  }\n\n","sourceOld":"  // hash code for a frozen node\n  private int hash(int node) throws IOException {\n    final int PRIME = 31;\n    final FST.BytesReader in = fst.getBytesReader(0);\n    //System.out.println(\"hash frozen node=\" + node);\n    int h = 0;\n    fst.readFirstRealTargetArc(node, scratchArc, in);\n    while(true) {\n      //System.out.println(\"  label=\" + scratchArc.label + \" target=\" + scratchArc.target + \" h=\" + h + \" output=\" + fst.outputs.outputToString(scratchArc.output) + \" next?=\" + scratchArc.flag(4) + \" final?=\" + scratchArc.isFinal());\n      h = PRIME * h + scratchArc.label;\n      h = PRIME * h + scratchArc.target;\n      h = PRIME * h + scratchArc.output.hashCode();\n      h = PRIME * h + scratchArc.nextFinalOutput.hashCode();\n      if (scratchArc.isFinal()) {\n        h += 17;\n      }\n      if (scratchArc.isLast()) {\n        break;\n      }\n      fst.readNextRealArc(scratchArc, in);\n    }\n    //System.out.println(\"  ret \" + (h&Integer.MAX_VALUE));\n    return h & Integer.MAX_VALUE;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3c397b1515e745d8b12d70edfc0e17cb7eac7f0":["4612a1625257c97ec7983c15cbc6289689e42fed"],"4612a1625257c97ec7983c15cbc6289689e42fed":["87e78f3c129251e74ecc2ff73a32de0f27cf09d5"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8917bfede3b4ca30f4305c1e391e9218959cd723":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","d3c397b1515e745d8b12d70edfc0e17cb7eac7f0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"87e78f3c129251e74ecc2ff73a32de0f27cf09d5":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d3c397b1515e745d8b12d70edfc0e17cb7eac7f0"]},"commit2Childs":{"d3c397b1515e745d8b12d70edfc0e17cb7eac7f0":["8917bfede3b4ca30f4305c1e391e9218959cd723","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4612a1625257c97ec7983c15cbc6289689e42fed":["d3c397b1515e745d8b12d70edfc0e17cb7eac7f0"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["8917bfede3b4ca30f4305c1e391e9218959cd723","87e78f3c129251e74ecc2ff73a32de0f27cf09d5"],"8917bfede3b4ca30f4305c1e391e9218959cd723":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"87e78f3c129251e74ecc2ff73a32de0f27cf09d5":["4612a1625257c97ec7983c15cbc6289689e42fed"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8917bfede3b4ca30f4305c1e391e9218959cd723","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}