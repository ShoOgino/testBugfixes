{"path":"contrib/queryparser/src/test/org/apache/lucene/queryParser/original/TestQueryParserWrapper#testRange().mjava","commits":[{"id":"b955a87bc7c5daeda1ed56821ec0bec2e8789e44","date":1249270724,"type":0,"author":"Michael Busch","isMerge":false,"pathNew":"contrib/queryparser/src/test/org/apache/lucene/queryParser/original/TestQueryParserWrapper#testRange().mjava","pathOld":"/dev/null","sourceNew":"  public void testRange() throws Exception {\n    assertQueryEquals(\"[ a TO z]\", null, \"[a TO z]\");\n    assertEquals(MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT, ((TermRangeQuery)getQuery(\"[ a TO z]\", null)).getRewriteMethod());\n\n    QueryParserWrapper qp = new QueryParserWrapper(\"field\",\n        new SimpleAnalyzer());\n    \n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    assertEquals(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE,((TermRangeQuery)qp.parse(\"[ a TO z]\")).getRewriteMethod());\n\n    assertQueryEquals(\"[ a TO z ]\", null, \"[a TO z]\");\n    assertQueryEquals(\"{ a TO z}\", null, \"{a TO z}\");\n    assertQueryEquals(\"{ a TO z }\", null, \"{a TO z}\");\n    assertQueryEquals(\"{ a TO z }^2.0\", null, \"{a TO z}^2.0\");\n    assertQueryEquals(\"[ a TO z] OR bar\", null, \"[a TO z] bar\");\n    assertQueryEquals(\"[ a TO z] AND bar\", null, \"+[a TO z] +bar\");\n    assertQueryEquals(\"( bar blar { a TO z}) \", null, \"bar blar {a TO z}\");\n    assertQueryEquals(\"gack ( bar blar { a TO z}) \", null,\n        \"gack (bar blar {a TO z})\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8a848e758754282137f42bf85793c278e250390","date":1249640668,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQueryParserWrapper#testRange().mjava","pathOld":"contrib/queryparser/src/test/org/apache/lucene/queryParser/original/TestQueryParserWrapper#testRange().mjava","sourceNew":"  public void testRange() throws Exception {\n    assertQueryEquals(\"[ a TO z]\", null, \"[a TO z]\");\n    assertEquals(MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT, ((TermRangeQuery)getQuery(\"[ a TO z]\", null)).getRewriteMethod());\n\n    QueryParserWrapper qp = new QueryParserWrapper(\"field\",\n        new SimpleAnalyzer());\n    \n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    assertEquals(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE,((TermRangeQuery)qp.parse(\"[ a TO z]\")).getRewriteMethod());\n\n    assertQueryEquals(\"[ a TO z ]\", null, \"[a TO z]\");\n    assertQueryEquals(\"{ a TO z}\", null, \"{a TO z}\");\n    assertQueryEquals(\"{ a TO z }\", null, \"{a TO z}\");\n    assertQueryEquals(\"{ a TO z }^2.0\", null, \"{a TO z}^2.0\");\n    assertQueryEquals(\"[ a TO z] OR bar\", null, \"[a TO z] bar\");\n    assertQueryEquals(\"[ a TO z] AND bar\", null, \"+[a TO z] +bar\");\n    assertQueryEquals(\"( bar blar { a TO z}) \", null, \"bar blar {a TO z}\");\n    assertQueryEquals(\"gack ( bar blar { a TO z}) \", null,\n        \"gack (bar blar {a TO z})\");\n  }\n\n","sourceOld":"  public void testRange() throws Exception {\n    assertQueryEquals(\"[ a TO z]\", null, \"[a TO z]\");\n    assertEquals(MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT, ((TermRangeQuery)getQuery(\"[ a TO z]\", null)).getRewriteMethod());\n\n    QueryParserWrapper qp = new QueryParserWrapper(\"field\",\n        new SimpleAnalyzer());\n    \n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    assertEquals(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE,((TermRangeQuery)qp.parse(\"[ a TO z]\")).getRewriteMethod());\n\n    assertQueryEquals(\"[ a TO z ]\", null, \"[a TO z]\");\n    assertQueryEquals(\"{ a TO z}\", null, \"{a TO z}\");\n    assertQueryEquals(\"{ a TO z }\", null, \"{a TO z}\");\n    assertQueryEquals(\"{ a TO z }^2.0\", null, \"{a TO z}^2.0\");\n    assertQueryEquals(\"[ a TO z] OR bar\", null, \"[a TO z] bar\");\n    assertQueryEquals(\"[ a TO z] AND bar\", null, \"+[a TO z] +bar\");\n    assertQueryEquals(\"( bar blar { a TO z}) \", null, \"bar blar {a TO z}\");\n    assertQueryEquals(\"gack ( bar blar { a TO z}) \", null,\n        \"gack (bar blar {a TO z})\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e8a848e758754282137f42bf85793c278e250390":["b955a87bc7c5daeda1ed56821ec0bec2e8789e44"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b955a87bc7c5daeda1ed56821ec0bec2e8789e44":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e8a848e758754282137f42bf85793c278e250390"]},"commit2Childs":{"e8a848e758754282137f42bf85793c278e250390":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b955a87bc7c5daeda1ed56821ec0bec2e8789e44"],"b955a87bc7c5daeda1ed56821ec0bec2e8789e44":["e8a848e758754282137f42bf85793c278e250390"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}