{"path":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Config#newRound().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Config#newRound().mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Config#newRound().mjava","sourceNew":"  /**\n   * Increment the round number, for config values that are extracted by round number.\n   *\n   * @return the new round number.\n   */\n  public int newRound() {\n    roundNumber++;\n\n    StringBuilder sb = new StringBuilder(\"--> Round \").append(roundNumber - 1).append(\"-->\").append(roundNumber);\n\n    // log changes in values\n    if (valByRound.size() > 0) {\n      sb.append(\": \");\n      for (final String name : valByRound.keySet()) {\n        Object a = valByRound.get(name);\n        if (a instanceof int[]) {\n          int ai[] = (int[]) a;\n          int n1 = (roundNumber - 1) % ai.length;\n          int n2 = roundNumber % ai.length;\n          sb.append(\"  \").append(name).append(\":\").append(ai[n1]).append(\"-->\").append(ai[n2]);\n        } else if (a instanceof double[]) {\n          double ad[] = (double[]) a;\n          int n1 = (roundNumber - 1) % ad.length;\n          int n2 = roundNumber % ad.length;\n          sb.append(\"  \").append(name).append(\":\").append(ad[n1]).append(\"-->\").append(ad[n2]);\n        } else if (a instanceof String[]) {\n          String ad[] = (String[]) a;\n          int n1 = (roundNumber - 1) % ad.length;\n          int n2 = roundNumber % ad.length;\n          sb.append(\"  \").append(name).append(\":\").append(ad[n1]).append(\"-->\").append(ad[n2]);\n        } else {\n          boolean ab[] = (boolean[]) a;\n          int n1 = (roundNumber - 1) % ab.length;\n          int n2 = roundNumber % ab.length;\n          sb.append(\"  \").append(name).append(\":\").append(ab[n1]).append(\"-->\").append(ab[n2]);\n        }\n      }\n    }\n\n    System.out.println();\n    System.out.println(sb.toString());\n    System.out.println();\n\n    return roundNumber;\n  }\n\n","sourceOld":"  /**\n   * Increment the round number, for config values that are extracted by round number.\n   *\n   * @return the new round number.\n   */\n  public int newRound() {\n    roundNumber++;\n\n    StringBuilder sb = new StringBuilder(\"--> Round \").append(roundNumber - 1).append(\"-->\").append(roundNumber);\n\n    // log changes in values\n    if (valByRound.size() > 0) {\n      sb.append(\": \");\n      for (final String name : valByRound.keySet()) {\n        Object a = valByRound.get(name);\n        if (a instanceof int[]) {\n          int ai[] = (int[]) a;\n          int n1 = (roundNumber - 1) % ai.length;\n          int n2 = roundNumber % ai.length;\n          sb.append(\"  \").append(name).append(\":\").append(ai[n1]).append(\"-->\").append(ai[n2]);\n        } else if (a instanceof double[]) {\n          double ad[] = (double[]) a;\n          int n1 = (roundNumber - 1) % ad.length;\n          int n2 = roundNumber % ad.length;\n          sb.append(\"  \").append(name).append(\":\").append(ad[n1]).append(\"-->\").append(ad[n2]);\n        } else if (a instanceof String[]) {\n          String ad[] = (String[]) a;\n          int n1 = (roundNumber - 1) % ad.length;\n          int n2 = roundNumber % ad.length;\n          sb.append(\"  \").append(name).append(\":\").append(ad[n1]).append(\"-->\").append(ad[n2]);\n        } else {\n          boolean ab[] = (boolean[]) a;\n          int n1 = (roundNumber - 1) % ab.length;\n          int n2 = roundNumber % ab.length;\n          sb.append(\"  \").append(name).append(\":\").append(ab[n1]).append(\"-->\").append(ab[n2]);\n        }\n      }\n    }\n\n    System.out.println();\n    System.out.println(sb.toString());\n    System.out.println();\n\n    return roundNumber;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b22e06bed98cf8dceb4f71c4d5265e798e7fbd0","date":1571070979,"type":3,"author":"Koen De Groote","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Config#newRound().mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Config#newRound().mjava","sourceNew":"  /**\n   * Increment the round number, for config values that are extracted by round number.\n   *\n   * @return the new round number.\n   */\n  public int newRound() {\n    roundNumber++;\n\n    StringBuilder sb = new StringBuilder(\"--> Round \").append(roundNumber - 1).append(\"-->\").append(roundNumber);\n\n    // log changes in values\n    if (valByRound.size() > 0) {\n      sb.append(\": \");\n      for (final Map.Entry<String, Object> entry : valByRound.entrySet()) {\n        final String name = entry.getKey();\n        Object a = entry.getValue();\n        if (a instanceof int[]) {\n          int ai[] = (int[]) a;\n          int n1 = (roundNumber - 1) % ai.length;\n          int n2 = roundNumber % ai.length;\n          sb.append(\"  \").append(name).append(\":\").append(ai[n1]).append(\"-->\").append(ai[n2]);\n        } else if (a instanceof double[]) {\n          double ad[] = (double[]) a;\n          int n1 = (roundNumber - 1) % ad.length;\n          int n2 = roundNumber % ad.length;\n          sb.append(\"  \").append(name).append(\":\").append(ad[n1]).append(\"-->\").append(ad[n2]);\n        } else if (a instanceof String[]) {\n          String ad[] = (String[]) a;\n          int n1 = (roundNumber - 1) % ad.length;\n          int n2 = roundNumber % ad.length;\n          sb.append(\"  \").append(name).append(\":\").append(ad[n1]).append(\"-->\").append(ad[n2]);\n        } else {\n          boolean ab[] = (boolean[]) a;\n          int n1 = (roundNumber - 1) % ab.length;\n          int n2 = roundNumber % ab.length;\n          sb.append(\"  \").append(name).append(\":\").append(ab[n1]).append(\"-->\").append(ab[n2]);\n        }\n      }\n    }\n\n    System.out.println();\n    System.out.println(sb.toString());\n    System.out.println();\n\n    return roundNumber;\n  }\n\n","sourceOld":"  /**\n   * Increment the round number, for config values that are extracted by round number.\n   *\n   * @return the new round number.\n   */\n  public int newRound() {\n    roundNumber++;\n\n    StringBuilder sb = new StringBuilder(\"--> Round \").append(roundNumber - 1).append(\"-->\").append(roundNumber);\n\n    // log changes in values\n    if (valByRound.size() > 0) {\n      sb.append(\": \");\n      for (final String name : valByRound.keySet()) {\n        Object a = valByRound.get(name);\n        if (a instanceof int[]) {\n          int ai[] = (int[]) a;\n          int n1 = (roundNumber - 1) % ai.length;\n          int n2 = roundNumber % ai.length;\n          sb.append(\"  \").append(name).append(\":\").append(ai[n1]).append(\"-->\").append(ai[n2]);\n        } else if (a instanceof double[]) {\n          double ad[] = (double[]) a;\n          int n1 = (roundNumber - 1) % ad.length;\n          int n2 = roundNumber % ad.length;\n          sb.append(\"  \").append(name).append(\":\").append(ad[n1]).append(\"-->\").append(ad[n2]);\n        } else if (a instanceof String[]) {\n          String ad[] = (String[]) a;\n          int n1 = (roundNumber - 1) % ad.length;\n          int n2 = roundNumber % ad.length;\n          sb.append(\"  \").append(name).append(\":\").append(ad[n1]).append(\"-->\").append(ad[n2]);\n        } else {\n          boolean ab[] = (boolean[]) a;\n          int n1 = (roundNumber - 1) % ab.length;\n          int n2 = roundNumber % ab.length;\n          sb.append(\"  \").append(name).append(\":\").append(ab[n1]).append(\"-->\").append(ab[n2]);\n        }\n      }\n    }\n\n    System.out.println();\n    System.out.println(sb.toString());\n    System.out.println();\n\n    return roundNumber;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":3,"author":"jimczi","isMerge":true,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Config#newRound().mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Config#newRound().mjava","sourceNew":"  /**\n   * Increment the round number, for config values that are extracted by round number.\n   *\n   * @return the new round number.\n   */\n  public int newRound() {\n    roundNumber++;\n\n    StringBuilder sb = new StringBuilder(\"--> Round \").append(roundNumber - 1).append(\"-->\").append(roundNumber);\n\n    // log changes in values\n    if (valByRound.size() > 0) {\n      sb.append(\": \");\n      for (final Map.Entry<String, Object> entry : valByRound.entrySet()) {\n        final String name = entry.getKey();\n        Object a = entry.getValue();\n        if (a instanceof int[]) {\n          int ai[] = (int[]) a;\n          int n1 = (roundNumber - 1) % ai.length;\n          int n2 = roundNumber % ai.length;\n          sb.append(\"  \").append(name).append(\":\").append(ai[n1]).append(\"-->\").append(ai[n2]);\n        } else if (a instanceof double[]) {\n          double ad[] = (double[]) a;\n          int n1 = (roundNumber - 1) % ad.length;\n          int n2 = roundNumber % ad.length;\n          sb.append(\"  \").append(name).append(\":\").append(ad[n1]).append(\"-->\").append(ad[n2]);\n        } else if (a instanceof String[]) {\n          String ad[] = (String[]) a;\n          int n1 = (roundNumber - 1) % ad.length;\n          int n2 = roundNumber % ad.length;\n          sb.append(\"  \").append(name).append(\":\").append(ad[n1]).append(\"-->\").append(ad[n2]);\n        } else {\n          boolean ab[] = (boolean[]) a;\n          int n1 = (roundNumber - 1) % ab.length;\n          int n2 = roundNumber % ab.length;\n          sb.append(\"  \").append(name).append(\":\").append(ab[n1]).append(\"-->\").append(ab[n2]);\n        }\n      }\n    }\n\n    System.out.println();\n    System.out.println(sb.toString());\n    System.out.println();\n\n    return roundNumber;\n  }\n\n","sourceOld":"  /**\n   * Increment the round number, for config values that are extracted by round number.\n   *\n   * @return the new round number.\n   */\n  public int newRound() {\n    roundNumber++;\n\n    StringBuilder sb = new StringBuilder(\"--> Round \").append(roundNumber - 1).append(\"-->\").append(roundNumber);\n\n    // log changes in values\n    if (valByRound.size() > 0) {\n      sb.append(\": \");\n      for (final String name : valByRound.keySet()) {\n        Object a = valByRound.get(name);\n        if (a instanceof int[]) {\n          int ai[] = (int[]) a;\n          int n1 = (roundNumber - 1) % ai.length;\n          int n2 = roundNumber % ai.length;\n          sb.append(\"  \").append(name).append(\":\").append(ai[n1]).append(\"-->\").append(ai[n2]);\n        } else if (a instanceof double[]) {\n          double ad[] = (double[]) a;\n          int n1 = (roundNumber - 1) % ad.length;\n          int n2 = roundNumber % ad.length;\n          sb.append(\"  \").append(name).append(\":\").append(ad[n1]).append(\"-->\").append(ad[n2]);\n        } else if (a instanceof String[]) {\n          String ad[] = (String[]) a;\n          int n1 = (roundNumber - 1) % ad.length;\n          int n2 = roundNumber % ad.length;\n          sb.append(\"  \").append(name).append(\":\").append(ad[n1]).append(\"-->\").append(ad[n2]);\n        } else {\n          boolean ab[] = (boolean[]) a;\n          int n1 = (roundNumber - 1) % ab.length;\n          int n2 = roundNumber % ab.length;\n          sb.append(\"  \").append(name).append(\":\").append(ab[n1]).append(\"-->\").append(ab[n2]);\n        }\n      }\n    }\n\n    System.out.println();\n    System.out.println(sb.toString());\n    System.out.println();\n\n    return roundNumber;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7b22e06bed98cf8dceb4f71c4d5265e798e7fbd0":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7b22e06bed98cf8dceb4f71c4d5265e798e7fbd0"],"b0b597c65628ca9e73913a07e81691f8229bae35":["b89678825b68eccaf09e6ab71675fc0b0af1e099","7b22e06bed98cf8dceb4f71c4d5265e798e7fbd0"]},"commit2Childs":{"7b22e06bed98cf8dceb4f71c4d5265e798e7fbd0":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["7b22e06bed98cf8dceb4f71c4d5265e798e7fbd0","b0b597c65628ca9e73913a07e81691f8229bae35"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}