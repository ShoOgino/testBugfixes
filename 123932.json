{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testWithCollectionMoveReplica().mjava","commits":[{"id":"27639bb5e041490ce599065875dd2f6d8beef62a","date":1532829373,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testWithCollectionMoveReplica().mjava","pathOld":"/dev/null","sourceNew":"  public void testWithCollectionMoveReplica() {\n    String clusterStateStr = \"{\" +\n        \"  'comments_coll':{\" +\n        \"    'router': {\" +\n        \"      'name': 'compositeId'\" +\n        \"    },\" +\n        \"    'shards':{\" +\n        \"       'shard1' : {\" +\n        \"        'range': '80000000-ffffffff',\" +\n        \"        'replicas': {\" +\n        \"          'r1': {\" +\n        \"            'core': 'r1',\" +\n        \"            'base_url': 'http://10.0.0.4:8983/solr',\" +\n        \"            'node_name': 'node1',\" +\n        \"            'state': 'active',\" +\n        \"            'leader': 'true'\" +\n        \"          }\" +\n        \"         }\" +\n        \"       }\" +\n        \"     },\" +\n        \"    'withCollection' :'articles_coll'\" +\n        \"  },\" +\n        \"  'articles_coll': {\" +\n        \"    'router': {\" +\n        \"      'name': 'compositeId'\" +\n        \"    },\" +\n        \"    'shards': {\" +\n        \"      'shard1': {\" +\n        \"        'range': '80000000-ffffffff',\" +\n        \"        'replicas': {\" +\n        \"          'r1': {\" +\n        \"            'core': 'r1',\" +\n        \"            'base_url': 'http://10.0.0.4:8983/solr',\" +\n        \"            'node_name': 'node1',\" +\n        \"            'state': 'active',\" +\n        \"            'leader': 'true'\" +\n        \"          },\" +\n        \"          'r2': {\" +\n        \"            'core': 'r2',\" +\n        \"            'base_url': 'http://10.0.0.4:7574/solr',\" +\n        \"            'node_name': 'node2',\" +\n        \"            'state': 'active'\" +\n        \"          }\" +\n        \"        }\" +\n        \"      }\" +\n        \"    }\" +\n        \"  }\" +\n        \"}\";\n    ClusterState clusterState = ClusterState.load(1, clusterStateStr.getBytes(UTF_8),\n        ImmutableSet.of(\"node2\", \"node3\", \"node4\", \"node5\"));\n    DelegatingClusterStateProvider clusterStateProvider = new DelegatingClusterStateProvider(null) {\n      @Override\n      public ClusterState getClusterState() throws IOException {\n        return clusterState;\n      }\n\n      @Override\n      public Set<String> getLiveNodes() {\n        return clusterState.getLiveNodes();\n      }\n    };\n\n    SolrClientNodeStateProvider solrClientNodeStateProvider = new SolrClientNodeStateProvider(null) {\n      @Override\n      protected Map<String, Object> fetchTagValues(String node, Collection<String> tags) {\n        Map<String, Object> result = new HashMap<>();\n        AtomicInteger cores = new AtomicInteger();\n        forEachReplica(node, replicaInfo -> cores.incrementAndGet());\n        if (tags.contains(ImplicitSnitch.CORES)) result.put(ImplicitSnitch.CORES, cores.get());\n        if (tags.contains(ImplicitSnitch.DISK)) result.put(ImplicitSnitch.DISK, 100);\n        return result;\n      }\n\n      @Override\n      protected Map<String, Object> fetchReplicaMetrics(String solrNode, Map<String, Pair<String, ReplicaInfo>> metricsKeyVsTagReplica) {\n        //e.g: solr.core.perReplicaDataColl.shard1.replica_n4:INDEX.sizeInBytes\n        Map<String, Object> result = new HashMap<>();\n        metricsKeyVsTagReplica.forEach((k, v) -> {\n          if (k.endsWith(\":INDEX.sizeInBytes\")) result.put(k, 100);\n        });\n        return result;\n      }\n\n      @Override\n      protected ClusterStateProvider getClusterStateProvider() {\n        return clusterStateProvider;\n      }\n    };\n    Map m = solrClientNodeStateProvider.getNodeValues(\"node1\", ImmutableSet.of(\"cores\", \"withCollection\"));\n    assertNotNull(m.get(\"withCollection\"));\n\n    Map policies = (Map) Utils.fromJSONString(\"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'minimize': 'cores'},\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, 'nodeRole': 'overseer'}\" +\n        \"    { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"  ]\" +\n        \"}\");\n    AutoScalingConfig config = new AutoScalingConfig(policies);\n    Policy policy = config.getPolicy();\n    Policy.Session session = policy.createSession(new DelegatingCloudManager(null) {\n      @Override\n      public ClusterStateProvider getClusterStateProvider() {\n        return clusterStateProvider;\n      }\n\n      @Override\n      public NodeStateProvider getNodeStateProvider() {\n        return solrClientNodeStateProvider;\n      }\n    });\n    Suggester suggester = session.getSuggester(CollectionAction.MOVEREPLICA);\n    suggester.hint(Hint.COLL_SHARD, new Pair<>(\"comments_coll\", \"shard1\"));\n    suggester.hint(Hint.SRC_NODE, \"node1\");\n    SolrRequest op = suggester.getSuggestion();\n    assertNotNull(op);\n    assertEquals(\"node2 should have been selected by move replica\",\"node2\",\n        op.getParams().get(\"targetNode\"));\n\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA);\n    suggester.hint(Hint.COLL_SHARD, new Pair<>(\"comments_coll\", \"shard1\"));\n    suggester.hint(Hint.SRC_NODE, \"node1\");\n    op = suggester.getSuggestion();\n    assertNull(op);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb4df98176b6dd0ae6ceba71eaa59c9bcb8fe2eb","date":1533364463,"type":3,"author":"noble","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testWithCollectionMoveReplica().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testWithCollectionMoveReplica().mjava","sourceNew":"  public void testWithCollectionMoveReplica() {\n    String clusterStateStr = \"{\" +\n        \"  'comments_coll':{\" +\n        \"    'router': {\" +\n        \"      'name': 'compositeId'\" +\n        \"    },\" +\n        \"    'shards':{\" +\n        \"       'shard1' : {\" +\n        \"        'range': '80000000-ffffffff',\" +\n        \"        'replicas': {\" +\n        \"          'r1': {\" +\n        \"            'core': 'r1',\" +\n        \"            'base_url': 'http://10.0.0.4:8983/solr',\" +\n        \"            'node_name': 'node1',\" +\n        \"            'state': 'active',\" +\n        \"            'leader': 'true'\" +\n        \"          }\" +\n        \"         }\" +\n        \"       }\" +\n        \"     },\" +\n        \"    'withCollection' :'articles_coll'\" +\n        \"  },\" +\n        \"  'articles_coll': {\" +\n        \"    'router': {\" +\n        \"      'name': 'compositeId'\" +\n        \"    },\" +\n        \"    'shards': {\" +\n        \"      'shard1': {\" +\n        \"        'range': '80000000-ffffffff',\" +\n        \"        'replicas': {\" +\n        \"          'r1': {\" +\n        \"            'core': 'r1',\" +\n        \"            'base_url': 'http://10.0.0.4:8983/solr',\" +\n        \"            'node_name': 'node1',\" +\n        \"            'state': 'active',\" +\n        \"            'leader': 'true'\" +\n        \"          },\" +\n        \"          'r2': {\" +\n        \"            'core': 'r2',\" +\n        \"            'base_url': 'http://10.0.0.4:7574/solr',\" +\n        \"            'node_name': 'node2',\" +\n        \"            'state': 'active'\" +\n        \"          }\" +\n        \"        }\" +\n        \"      }\" +\n        \"    }\" +\n        \"  }\" +\n        \"}\";\n    ClusterState clusterState = ClusterState.load(1, clusterStateStr.getBytes(UTF_8),\n        ImmutableSet.of(\"node2\", \"node3\", \"node4\", \"node5\"));\n    DelegatingClusterStateProvider clusterStateProvider = new DelegatingClusterStateProvider(null) {\n      @Override\n      public ClusterState getClusterState() throws IOException {\n        return clusterState;\n      }\n\n      @Override\n      public Set<String> getLiveNodes() {\n        return clusterState.getLiveNodes();\n      }\n    };\n\n    SolrClientNodeStateProvider solrClientNodeStateProvider = new SolrClientNodeStateProvider(null) {\n      @Override\n      protected Map<String, Object> fetchTagValues(String node, Collection<String> tags) {\n        Map<String, Object> result = new HashMap<>();\n        AtomicInteger cores = new AtomicInteger();\n        forEachReplica(node, replicaInfo -> cores.incrementAndGet());\n        if (tags.contains(ImplicitSnitch.CORES)) result.put(ImplicitSnitch.CORES, cores.get());\n        if (tags.contains(ImplicitSnitch.DISK)) result.put(ImplicitSnitch.DISK, 100);\n        return result;\n      }\n\n      @Override\n      protected Map<String, Object> fetchReplicaMetrics(String solrNode, Map<String, Pair<String, ReplicaInfo>> metricsKeyVsTagReplica) {\n        //e.g: solr.core.perReplicaDataColl.shard1.replica_n4:INDEX.sizeInBytes\n        Map<String, Object> result = new HashMap<>();\n        metricsKeyVsTagReplica.forEach((k, v) -> {\n          if (k.endsWith(\":INDEX.sizeInBytes\")) result.put(k, 100);\n        });\n        return result;\n      }\n\n      @Override\n      protected ClusterStateProvider getClusterStateProvider() {\n        return clusterStateProvider;\n      }\n    };\n    Map m = solrClientNodeStateProvider.getNodeValues(\"node1\", ImmutableSet.of(\"cores\", \"withCollection\"));\n    assertNotNull(m.get(\"withCollection\"));\n\n    Map policies = (Map) Utils.fromJSONString(\"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'minimize': 'cores'},\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, 'nodeRole': 'overseer'}\" +\n        \"    { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"  ]\" +\n        \"}\");\n    AutoScalingConfig config = new AutoScalingConfig(policies);\n    Policy policy = config.getPolicy();\n    Policy.Session session = policy.createSession(new DelegatingCloudManager(null) {\n      @Override\n      public ClusterStateProvider getClusterStateProvider() {\n        return clusterStateProvider;\n      }\n\n      @Override\n      public NodeStateProvider getNodeStateProvider() {\n        return solrClientNodeStateProvider;\n      }\n    });\n    Suggester suggester = session.getSuggester(CollectionAction.MOVEREPLICA);\n    suggester.hint(Hint.COLL_SHARD, new Pair<>(\"comments_coll\", \"shard1\"));\n    suggester.hint(Hint.SRC_NODE, \"node1\");\n    SolrRequest op = suggester.getSuggestion();\n    assertNotNull(op);\n    assertEquals(\"node2 should have been selected by move replica\", \"node2\",\n        op.getParams().get(\"targetNode\"));\n\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA);\n    suggester.hint(Hint.COLL_SHARD, new Pair<>(\"comments_coll\", \"shard1\"));\n    suggester.hint(Hint.SRC_NODE, \"node1\");\n    op = suggester.getSuggestion();\n    assertNull(op);\n  }\n\n","sourceOld":"  public void testWithCollectionMoveReplica() {\n    String clusterStateStr = \"{\" +\n        \"  'comments_coll':{\" +\n        \"    'router': {\" +\n        \"      'name': 'compositeId'\" +\n        \"    },\" +\n        \"    'shards':{\" +\n        \"       'shard1' : {\" +\n        \"        'range': '80000000-ffffffff',\" +\n        \"        'replicas': {\" +\n        \"          'r1': {\" +\n        \"            'core': 'r1',\" +\n        \"            'base_url': 'http://10.0.0.4:8983/solr',\" +\n        \"            'node_name': 'node1',\" +\n        \"            'state': 'active',\" +\n        \"            'leader': 'true'\" +\n        \"          }\" +\n        \"         }\" +\n        \"       }\" +\n        \"     },\" +\n        \"    'withCollection' :'articles_coll'\" +\n        \"  },\" +\n        \"  'articles_coll': {\" +\n        \"    'router': {\" +\n        \"      'name': 'compositeId'\" +\n        \"    },\" +\n        \"    'shards': {\" +\n        \"      'shard1': {\" +\n        \"        'range': '80000000-ffffffff',\" +\n        \"        'replicas': {\" +\n        \"          'r1': {\" +\n        \"            'core': 'r1',\" +\n        \"            'base_url': 'http://10.0.0.4:8983/solr',\" +\n        \"            'node_name': 'node1',\" +\n        \"            'state': 'active',\" +\n        \"            'leader': 'true'\" +\n        \"          },\" +\n        \"          'r2': {\" +\n        \"            'core': 'r2',\" +\n        \"            'base_url': 'http://10.0.0.4:7574/solr',\" +\n        \"            'node_name': 'node2',\" +\n        \"            'state': 'active'\" +\n        \"          }\" +\n        \"        }\" +\n        \"      }\" +\n        \"    }\" +\n        \"  }\" +\n        \"}\";\n    ClusterState clusterState = ClusterState.load(1, clusterStateStr.getBytes(UTF_8),\n        ImmutableSet.of(\"node2\", \"node3\", \"node4\", \"node5\"));\n    DelegatingClusterStateProvider clusterStateProvider = new DelegatingClusterStateProvider(null) {\n      @Override\n      public ClusterState getClusterState() throws IOException {\n        return clusterState;\n      }\n\n      @Override\n      public Set<String> getLiveNodes() {\n        return clusterState.getLiveNodes();\n      }\n    };\n\n    SolrClientNodeStateProvider solrClientNodeStateProvider = new SolrClientNodeStateProvider(null) {\n      @Override\n      protected Map<String, Object> fetchTagValues(String node, Collection<String> tags) {\n        Map<String, Object> result = new HashMap<>();\n        AtomicInteger cores = new AtomicInteger();\n        forEachReplica(node, replicaInfo -> cores.incrementAndGet());\n        if (tags.contains(ImplicitSnitch.CORES)) result.put(ImplicitSnitch.CORES, cores.get());\n        if (tags.contains(ImplicitSnitch.DISK)) result.put(ImplicitSnitch.DISK, 100);\n        return result;\n      }\n\n      @Override\n      protected Map<String, Object> fetchReplicaMetrics(String solrNode, Map<String, Pair<String, ReplicaInfo>> metricsKeyVsTagReplica) {\n        //e.g: solr.core.perReplicaDataColl.shard1.replica_n4:INDEX.sizeInBytes\n        Map<String, Object> result = new HashMap<>();\n        metricsKeyVsTagReplica.forEach((k, v) -> {\n          if (k.endsWith(\":INDEX.sizeInBytes\")) result.put(k, 100);\n        });\n        return result;\n      }\n\n      @Override\n      protected ClusterStateProvider getClusterStateProvider() {\n        return clusterStateProvider;\n      }\n    };\n    Map m = solrClientNodeStateProvider.getNodeValues(\"node1\", ImmutableSet.of(\"cores\", \"withCollection\"));\n    assertNotNull(m.get(\"withCollection\"));\n\n    Map policies = (Map) Utils.fromJSONString(\"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'minimize': 'cores'},\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, 'nodeRole': 'overseer'}\" +\n        \"    { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"  ]\" +\n        \"}\");\n    AutoScalingConfig config = new AutoScalingConfig(policies);\n    Policy policy = config.getPolicy();\n    Policy.Session session = policy.createSession(new DelegatingCloudManager(null) {\n      @Override\n      public ClusterStateProvider getClusterStateProvider() {\n        return clusterStateProvider;\n      }\n\n      @Override\n      public NodeStateProvider getNodeStateProvider() {\n        return solrClientNodeStateProvider;\n      }\n    });\n    Suggester suggester = session.getSuggester(CollectionAction.MOVEREPLICA);\n    suggester.hint(Hint.COLL_SHARD, new Pair<>(\"comments_coll\", \"shard1\"));\n    suggester.hint(Hint.SRC_NODE, \"node1\");\n    SolrRequest op = suggester.getSuggestion();\n    assertNotNull(op);\n    assertEquals(\"node2 should have been selected by move replica\",\"node2\",\n        op.getParams().get(\"targetNode\"));\n\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA);\n    suggester.hint(Hint.COLL_SHARD, new Pair<>(\"comments_coll\", \"shard1\"));\n    suggester.hint(Hint.SRC_NODE, \"node1\");\n    op = suggester.getSuggestion();\n    assertNull(op);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f5a27e78e3d29dee02bab19ded25336471e96882","date":1539677468,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testWithCollectionMoveReplica().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testWithCollectionMoveReplica().mjava","sourceNew":"  public void testWithCollectionMoveReplica() {\n    ClusterState clusterState = ClusterState.load(1,\n        (Map) loadFromResource(\"testWithCollectionMoveReplica.json\"),\n        ImmutableSet.of(\"node2\", \"node3\", \"node4\", \"node5\"), CLUSTER_STATE);\n    DelegatingClusterStateProvider clusterStateProvider = new DelegatingClusterStateProvider(null) {\n      @Override\n      public ClusterState getClusterState() throws IOException {\n        return clusterState;\n      }\n\n      @Override\n      public Set<String> getLiveNodes() {\n        return clusterState.getLiveNodes();\n      }\n    };\n\n    SolrClientNodeStateProvider solrClientNodeStateProvider = new SolrClientNodeStateProvider(null) {\n      @Override\n      protected Map<String, Object> fetchTagValues(String node, Collection<String> tags) {\n        Map<String, Object> result = new HashMap<>();\n        AtomicInteger cores = new AtomicInteger();\n        forEachReplica(node, replicaInfo -> cores.incrementAndGet());\n        if (tags.contains(ImplicitSnitch.CORES)) result.put(ImplicitSnitch.CORES, cores.get());\n        if (tags.contains(ImplicitSnitch.DISK)) result.put(ImplicitSnitch.DISK, 100);\n        return result;\n      }\n\n      @Override\n      protected Map<String, Object> fetchReplicaMetrics(String solrNode, Map<String, Pair<String, ReplicaInfo>> metricsKeyVsTagReplica) {\n        //e.g: solr.core.perReplicaDataColl.shard1.replica_n4:INDEX.sizeInBytes\n        Map<String, Object> result = new HashMap<>();\n        metricsKeyVsTagReplica.forEach((k, v) -> {\n          if (k.endsWith(\":INDEX.sizeInBytes\")) result.put(k, 100);\n        });\n        return result;\n      }\n\n      @Override\n      protected ClusterStateProvider getClusterStateProvider() {\n        return clusterStateProvider;\n      }\n    };\n    Map m = solrClientNodeStateProvider.getNodeValues(\"node1\", ImmutableSet.of(\"cores\", \"withCollection\"));\n    assertNotNull(m.get(\"withCollection\"));\n\n    Map policies = (Map) Utils.fromJSONString(\"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'minimize': 'cores'},\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, 'nodeRole': 'overseer'}\" +\n        \"    { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"  ]\" +\n        \"}\");\n    AutoScalingConfig config = new AutoScalingConfig(policies);\n    Policy policy = config.getPolicy();\n    Policy.Session session = policy.createSession(new DelegatingCloudManager(null) {\n      @Override\n      public ClusterStateProvider getClusterStateProvider() {\n        return clusterStateProvider;\n      }\n\n      @Override\n      public NodeStateProvider getNodeStateProvider() {\n        return solrClientNodeStateProvider;\n      }\n    });\n    Suggester suggester = session.getSuggester(CollectionAction.MOVEREPLICA);\n    suggester.hint(Hint.COLL_SHARD, new Pair<>(\"comments_coll\", \"shard1\"));\n    suggester.hint(Hint.SRC_NODE, \"node1\");\n    SolrRequest op = suggester.getSuggestion();\n    assertNotNull(op);\n    assertEquals(\"node2 should have been selected by move replica\", \"node2\",\n        op.getParams().get(\"targetNode\"));\n\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA);\n    suggester.hint(Hint.COLL_SHARD, new Pair<>(\"comments_coll\", \"shard1\"));\n    suggester.hint(Hint.SRC_NODE, \"node1\");\n    op = suggester.getSuggestion();\n    assertNull(op);\n  }\n\n","sourceOld":"  public void testWithCollectionMoveReplica() {\n    String clusterStateStr = \"{\" +\n        \"  'comments_coll':{\" +\n        \"    'router': {\" +\n        \"      'name': 'compositeId'\" +\n        \"    },\" +\n        \"    'shards':{\" +\n        \"       'shard1' : {\" +\n        \"        'range': '80000000-ffffffff',\" +\n        \"        'replicas': {\" +\n        \"          'r1': {\" +\n        \"            'core': 'r1',\" +\n        \"            'base_url': 'http://10.0.0.4:8983/solr',\" +\n        \"            'node_name': 'node1',\" +\n        \"            'state': 'active',\" +\n        \"            'leader': 'true'\" +\n        \"          }\" +\n        \"         }\" +\n        \"       }\" +\n        \"     },\" +\n        \"    'withCollection' :'articles_coll'\" +\n        \"  },\" +\n        \"  'articles_coll': {\" +\n        \"    'router': {\" +\n        \"      'name': 'compositeId'\" +\n        \"    },\" +\n        \"    'shards': {\" +\n        \"      'shard1': {\" +\n        \"        'range': '80000000-ffffffff',\" +\n        \"        'replicas': {\" +\n        \"          'r1': {\" +\n        \"            'core': 'r1',\" +\n        \"            'base_url': 'http://10.0.0.4:8983/solr',\" +\n        \"            'node_name': 'node1',\" +\n        \"            'state': 'active',\" +\n        \"            'leader': 'true'\" +\n        \"          },\" +\n        \"          'r2': {\" +\n        \"            'core': 'r2',\" +\n        \"            'base_url': 'http://10.0.0.4:7574/solr',\" +\n        \"            'node_name': 'node2',\" +\n        \"            'state': 'active'\" +\n        \"          }\" +\n        \"        }\" +\n        \"      }\" +\n        \"    }\" +\n        \"  }\" +\n        \"}\";\n    ClusterState clusterState = ClusterState.load(1, clusterStateStr.getBytes(UTF_8),\n        ImmutableSet.of(\"node2\", \"node3\", \"node4\", \"node5\"));\n    DelegatingClusterStateProvider clusterStateProvider = new DelegatingClusterStateProvider(null) {\n      @Override\n      public ClusterState getClusterState() throws IOException {\n        return clusterState;\n      }\n\n      @Override\n      public Set<String> getLiveNodes() {\n        return clusterState.getLiveNodes();\n      }\n    };\n\n    SolrClientNodeStateProvider solrClientNodeStateProvider = new SolrClientNodeStateProvider(null) {\n      @Override\n      protected Map<String, Object> fetchTagValues(String node, Collection<String> tags) {\n        Map<String, Object> result = new HashMap<>();\n        AtomicInteger cores = new AtomicInteger();\n        forEachReplica(node, replicaInfo -> cores.incrementAndGet());\n        if (tags.contains(ImplicitSnitch.CORES)) result.put(ImplicitSnitch.CORES, cores.get());\n        if (tags.contains(ImplicitSnitch.DISK)) result.put(ImplicitSnitch.DISK, 100);\n        return result;\n      }\n\n      @Override\n      protected Map<String, Object> fetchReplicaMetrics(String solrNode, Map<String, Pair<String, ReplicaInfo>> metricsKeyVsTagReplica) {\n        //e.g: solr.core.perReplicaDataColl.shard1.replica_n4:INDEX.sizeInBytes\n        Map<String, Object> result = new HashMap<>();\n        metricsKeyVsTagReplica.forEach((k, v) -> {\n          if (k.endsWith(\":INDEX.sizeInBytes\")) result.put(k, 100);\n        });\n        return result;\n      }\n\n      @Override\n      protected ClusterStateProvider getClusterStateProvider() {\n        return clusterStateProvider;\n      }\n    };\n    Map m = solrClientNodeStateProvider.getNodeValues(\"node1\", ImmutableSet.of(\"cores\", \"withCollection\"));\n    assertNotNull(m.get(\"withCollection\"));\n\n    Map policies = (Map) Utils.fromJSONString(\"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'minimize': 'cores'},\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, 'nodeRole': 'overseer'}\" +\n        \"    { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"  ]\" +\n        \"}\");\n    AutoScalingConfig config = new AutoScalingConfig(policies);\n    Policy policy = config.getPolicy();\n    Policy.Session session = policy.createSession(new DelegatingCloudManager(null) {\n      @Override\n      public ClusterStateProvider getClusterStateProvider() {\n        return clusterStateProvider;\n      }\n\n      @Override\n      public NodeStateProvider getNodeStateProvider() {\n        return solrClientNodeStateProvider;\n      }\n    });\n    Suggester suggester = session.getSuggester(CollectionAction.MOVEREPLICA);\n    suggester.hint(Hint.COLL_SHARD, new Pair<>(\"comments_coll\", \"shard1\"));\n    suggester.hint(Hint.SRC_NODE, \"node1\");\n    SolrRequest op = suggester.getSuggestion();\n    assertNotNull(op);\n    assertEquals(\"node2 should have been selected by move replica\", \"node2\",\n        op.getParams().get(\"targetNode\"));\n\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA);\n    suggester.hint(Hint.COLL_SHARD, new Pair<>(\"comments_coll\", \"shard1\"));\n    suggester.hint(Hint.SRC_NODE, \"node1\");\n    op = suggester.getSuggestion();\n    assertNull(op);\n  }\n\n","bugFix":null,"bugIntro":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5ad9c35f926b4bf8da0336d1300efc709c8d5a56","date":1591729157,"type":3,"author":"murblanc","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testWithCollectionMoveReplica().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testWithCollectionMoveReplica().mjava","sourceNew":"  public void testWithCollectionMoveReplica() {\n    ClusterState clusterState = ClusterState.createFromCollectionMap(1,\n        (Map) loadFromResource(\"testWithCollectionMoveReplica.json\"),\n        ImmutableSet.of(\"node2\", \"node3\", \"node4\", \"node5\"));\n    DelegatingClusterStateProvider clusterStateProvider = new DelegatingClusterStateProvider(null) {\n      @Override\n      public ClusterState getClusterState() throws IOException {\n        return clusterState;\n      }\n\n      @Override\n      public Set<String> getLiveNodes() {\n        return clusterState.getLiveNodes();\n      }\n    };\n\n    SolrClientNodeStateProvider solrClientNodeStateProvider = new SolrClientNodeStateProvider(null) {\n      @Override\n      protected Map<String, Object> fetchTagValues(String node, Collection<String> tags) {\n        Map<String, Object> result = new HashMap<>();\n        AtomicInteger cores = new AtomicInteger();\n        forEachReplica(node, replicaInfo -> cores.incrementAndGet());\n        if (tags.contains(ImplicitSnitch.CORES)) result.put(ImplicitSnitch.CORES, cores.get());\n        if (tags.contains(ImplicitSnitch.DISK)) result.put(ImplicitSnitch.DISK, 100);\n        return result;\n      }\n\n      @Override\n      protected Map<String, Object> fetchReplicaMetrics(String solrNode, Map<String, Pair<String, ReplicaInfo>> metricsKeyVsTagReplica) {\n        //e.g: solr.core.perReplicaDataColl.shard1.replica_n4:INDEX.sizeInBytes\n        Map<String, Object> result = new HashMap<>();\n        metricsKeyVsTagReplica.forEach((k, v) -> {\n          if (k.endsWith(\":INDEX.sizeInBytes\")) result.put(k, 100);\n        });\n        return result;\n      }\n\n      @Override\n      protected ClusterStateProvider getClusterStateProvider() {\n        return clusterStateProvider;\n      }\n    };\n    Map m = solrClientNodeStateProvider.getNodeValues(\"node1\", ImmutableSet.of(\"cores\", \"withCollection\"));\n    assertNotNull(m.get(\"withCollection\"));\n\n    Map policies = (Map) Utils.fromJSONString(\"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'minimize': 'cores'},\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, 'nodeRole': 'overseer'}\" +\n        \"    { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"  ]\" +\n        \"}\");\n    AutoScalingConfig config = new AutoScalingConfig(policies);\n    Policy policy = config.getPolicy();\n    Policy.Session session = policy.createSession(new DelegatingCloudManager(null) {\n      @Override\n      public ClusterStateProvider getClusterStateProvider() {\n        return clusterStateProvider;\n      }\n\n      @Override\n      public NodeStateProvider getNodeStateProvider() {\n        return solrClientNodeStateProvider;\n      }\n    });\n    Suggester suggester = session.getSuggester(CollectionAction.MOVEREPLICA);\n    suggester.hint(Hint.COLL_SHARD, new Pair<>(\"comments_coll\", \"shard1\"));\n    suggester.hint(Hint.SRC_NODE, \"node1\");\n    SolrRequest op = suggester.getSuggestion();\n    assertNotNull(op);\n    assertEquals(\"node2 should have been selected by move replica\", \"node2\",\n        op.getParams().get(\"targetNode\"));\n\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA);\n    suggester.hint(Hint.COLL_SHARD, new Pair<>(\"comments_coll\", \"shard1\"));\n    suggester.hint(Hint.SRC_NODE, \"node1\");\n    op = suggester.getSuggestion();\n    assertNull(op);\n  }\n\n","sourceOld":"  public void testWithCollectionMoveReplica() {\n    ClusterState clusterState = ClusterState.load(1,\n        (Map) loadFromResource(\"testWithCollectionMoveReplica.json\"),\n        ImmutableSet.of(\"node2\", \"node3\", \"node4\", \"node5\"), CLUSTER_STATE);\n    DelegatingClusterStateProvider clusterStateProvider = new DelegatingClusterStateProvider(null) {\n      @Override\n      public ClusterState getClusterState() throws IOException {\n        return clusterState;\n      }\n\n      @Override\n      public Set<String> getLiveNodes() {\n        return clusterState.getLiveNodes();\n      }\n    };\n\n    SolrClientNodeStateProvider solrClientNodeStateProvider = new SolrClientNodeStateProvider(null) {\n      @Override\n      protected Map<String, Object> fetchTagValues(String node, Collection<String> tags) {\n        Map<String, Object> result = new HashMap<>();\n        AtomicInteger cores = new AtomicInteger();\n        forEachReplica(node, replicaInfo -> cores.incrementAndGet());\n        if (tags.contains(ImplicitSnitch.CORES)) result.put(ImplicitSnitch.CORES, cores.get());\n        if (tags.contains(ImplicitSnitch.DISK)) result.put(ImplicitSnitch.DISK, 100);\n        return result;\n      }\n\n      @Override\n      protected Map<String, Object> fetchReplicaMetrics(String solrNode, Map<String, Pair<String, ReplicaInfo>> metricsKeyVsTagReplica) {\n        //e.g: solr.core.perReplicaDataColl.shard1.replica_n4:INDEX.sizeInBytes\n        Map<String, Object> result = new HashMap<>();\n        metricsKeyVsTagReplica.forEach((k, v) -> {\n          if (k.endsWith(\":INDEX.sizeInBytes\")) result.put(k, 100);\n        });\n        return result;\n      }\n\n      @Override\n      protected ClusterStateProvider getClusterStateProvider() {\n        return clusterStateProvider;\n      }\n    };\n    Map m = solrClientNodeStateProvider.getNodeValues(\"node1\", ImmutableSet.of(\"cores\", \"withCollection\"));\n    assertNotNull(m.get(\"withCollection\"));\n\n    Map policies = (Map) Utils.fromJSONString(\"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'minimize': 'cores'},\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, 'nodeRole': 'overseer'}\" +\n        \"    { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"  ]\" +\n        \"}\");\n    AutoScalingConfig config = new AutoScalingConfig(policies);\n    Policy policy = config.getPolicy();\n    Policy.Session session = policy.createSession(new DelegatingCloudManager(null) {\n      @Override\n      public ClusterStateProvider getClusterStateProvider() {\n        return clusterStateProvider;\n      }\n\n      @Override\n      public NodeStateProvider getNodeStateProvider() {\n        return solrClientNodeStateProvider;\n      }\n    });\n    Suggester suggester = session.getSuggester(CollectionAction.MOVEREPLICA);\n    suggester.hint(Hint.COLL_SHARD, new Pair<>(\"comments_coll\", \"shard1\"));\n    suggester.hint(Hint.SRC_NODE, \"node1\");\n    SolrRequest op = suggester.getSuggestion();\n    assertNotNull(op);\n    assertEquals(\"node2 should have been selected by move replica\", \"node2\",\n        op.getParams().get(\"targetNode\"));\n\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA);\n    suggester.hint(Hint.COLL_SHARD, new Pair<>(\"comments_coll\", \"shard1\"));\n    suggester.hint(Hint.SRC_NODE, \"node1\");\n    op = suggester.getSuggestion();\n    assertNull(op);\n  }\n\n","bugFix":["f5a27e78e3d29dee02bab19ded25336471e96882"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ba1b632c041956c93c41aa1143d16a567014891","date":1592328473,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testWithCollectionMoveReplica().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testWithCollectionMoveReplica().mjava","sourceNew":"  public void testWithCollectionMoveReplica() {\n    @SuppressWarnings({\"unchecked\"})\n    ClusterState clusterState = ClusterState.createFromCollectionMap(1,\n        (Map) loadFromResource(\"testWithCollectionMoveReplica.json\"),\n        ImmutableSet.of(\"node2\", \"node3\", \"node4\", \"node5\"));\n    DelegatingClusterStateProvider clusterStateProvider = new DelegatingClusterStateProvider(null) {\n      @Override\n      public ClusterState getClusterState() throws IOException {\n        return clusterState;\n      }\n\n      @Override\n      public Set<String> getLiveNodes() {\n        return clusterState.getLiveNodes();\n      }\n    };\n\n    SolrClientNodeStateProvider solrClientNodeStateProvider = new SolrClientNodeStateProvider(null) {\n      @Override\n      protected Map<String, Object> fetchTagValues(String node, Collection<String> tags) {\n        Map<String, Object> result = new HashMap<>();\n        AtomicInteger cores = new AtomicInteger();\n        forEachReplica(node, replicaInfo -> cores.incrementAndGet());\n        if (tags.contains(ImplicitSnitch.CORES)) result.put(ImplicitSnitch.CORES, cores.get());\n        if (tags.contains(ImplicitSnitch.DISK)) result.put(ImplicitSnitch.DISK, 100);\n        return result;\n      }\n\n      @Override\n      protected Map<String, Object> fetchReplicaMetrics(String solrNode, Map<String, Pair<String, ReplicaInfo>> metricsKeyVsTagReplica) {\n        //e.g: solr.core.perReplicaDataColl.shard1.replica_n4:INDEX.sizeInBytes\n        Map<String, Object> result = new HashMap<>();\n        metricsKeyVsTagReplica.forEach((k, v) -> {\n          if (k.endsWith(\":INDEX.sizeInBytes\")) result.put(k, 100);\n        });\n        return result;\n      }\n\n      @Override\n      protected ClusterStateProvider getClusterStateProvider() {\n        return clusterStateProvider;\n      }\n    };\n    @SuppressWarnings({\"rawtypes\"})\n    Map m = solrClientNodeStateProvider.getNodeValues(\"node1\", ImmutableSet.of(\"cores\", \"withCollection\"));\n    assertNotNull(m.get(\"withCollection\"));\n\n    @SuppressWarnings({\"rawtypes\"})\n    Map policies = (Map) Utils.fromJSONString(\"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'minimize': 'cores'},\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, 'nodeRole': 'overseer'}\" +\n        \"    { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"  ]\" +\n        \"}\");\n    @SuppressWarnings({\"unchecked\"})\n    AutoScalingConfig config = new AutoScalingConfig(policies);\n    Policy policy = config.getPolicy();\n    Policy.Session session = policy.createSession(new DelegatingCloudManager(null) {\n      @Override\n      public ClusterStateProvider getClusterStateProvider() {\n        return clusterStateProvider;\n      }\n\n      @Override\n      public NodeStateProvider getNodeStateProvider() {\n        return solrClientNodeStateProvider;\n      }\n    });\n    Suggester suggester = session.getSuggester(CollectionAction.MOVEREPLICA);\n    suggester.hint(Hint.COLL_SHARD, new Pair<>(\"comments_coll\", \"shard1\"));\n    suggester.hint(Hint.SRC_NODE, \"node1\");\n    @SuppressWarnings({\"rawtypes\"})\n    SolrRequest op = suggester.getSuggestion();\n    assertNotNull(op);\n    assertEquals(\"node2 should have been selected by move replica\", \"node2\",\n        op.getParams().get(\"targetNode\"));\n\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA);\n    suggester.hint(Hint.COLL_SHARD, new Pair<>(\"comments_coll\", \"shard1\"));\n    suggester.hint(Hint.SRC_NODE, \"node1\");\n    op = suggester.getSuggestion();\n    assertNull(op);\n  }\n\n","sourceOld":"  public void testWithCollectionMoveReplica() {\n    ClusterState clusterState = ClusterState.createFromCollectionMap(1,\n        (Map) loadFromResource(\"testWithCollectionMoveReplica.json\"),\n        ImmutableSet.of(\"node2\", \"node3\", \"node4\", \"node5\"));\n    DelegatingClusterStateProvider clusterStateProvider = new DelegatingClusterStateProvider(null) {\n      @Override\n      public ClusterState getClusterState() throws IOException {\n        return clusterState;\n      }\n\n      @Override\n      public Set<String> getLiveNodes() {\n        return clusterState.getLiveNodes();\n      }\n    };\n\n    SolrClientNodeStateProvider solrClientNodeStateProvider = new SolrClientNodeStateProvider(null) {\n      @Override\n      protected Map<String, Object> fetchTagValues(String node, Collection<String> tags) {\n        Map<String, Object> result = new HashMap<>();\n        AtomicInteger cores = new AtomicInteger();\n        forEachReplica(node, replicaInfo -> cores.incrementAndGet());\n        if (tags.contains(ImplicitSnitch.CORES)) result.put(ImplicitSnitch.CORES, cores.get());\n        if (tags.contains(ImplicitSnitch.DISK)) result.put(ImplicitSnitch.DISK, 100);\n        return result;\n      }\n\n      @Override\n      protected Map<String, Object> fetchReplicaMetrics(String solrNode, Map<String, Pair<String, ReplicaInfo>> metricsKeyVsTagReplica) {\n        //e.g: solr.core.perReplicaDataColl.shard1.replica_n4:INDEX.sizeInBytes\n        Map<String, Object> result = new HashMap<>();\n        metricsKeyVsTagReplica.forEach((k, v) -> {\n          if (k.endsWith(\":INDEX.sizeInBytes\")) result.put(k, 100);\n        });\n        return result;\n      }\n\n      @Override\n      protected ClusterStateProvider getClusterStateProvider() {\n        return clusterStateProvider;\n      }\n    };\n    Map m = solrClientNodeStateProvider.getNodeValues(\"node1\", ImmutableSet.of(\"cores\", \"withCollection\"));\n    assertNotNull(m.get(\"withCollection\"));\n\n    Map policies = (Map) Utils.fromJSONString(\"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'minimize': 'cores'},\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, 'nodeRole': 'overseer'}\" +\n        \"    { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"  ]\" +\n        \"}\");\n    AutoScalingConfig config = new AutoScalingConfig(policies);\n    Policy policy = config.getPolicy();\n    Policy.Session session = policy.createSession(new DelegatingCloudManager(null) {\n      @Override\n      public ClusterStateProvider getClusterStateProvider() {\n        return clusterStateProvider;\n      }\n\n      @Override\n      public NodeStateProvider getNodeStateProvider() {\n        return solrClientNodeStateProvider;\n      }\n    });\n    Suggester suggester = session.getSuggester(CollectionAction.MOVEREPLICA);\n    suggester.hint(Hint.COLL_SHARD, new Pair<>(\"comments_coll\", \"shard1\"));\n    suggester.hint(Hint.SRC_NODE, \"node1\");\n    SolrRequest op = suggester.getSuggestion();\n    assertNotNull(op);\n    assertEquals(\"node2 should have been selected by move replica\", \"node2\",\n        op.getParams().get(\"targetNode\"));\n\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA);\n    suggester.hint(Hint.COLL_SHARD, new Pair<>(\"comments_coll\", \"shard1\"));\n    suggester.hint(Hint.SRC_NODE, \"node1\");\n    op = suggester.getSuggestion();\n    assertNull(op);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd","date":1594731683,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testWithCollectionMoveReplica().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testWithCollectionMoveReplica().mjava","sourceNew":"  public void testWithCollectionMoveReplica() {\n    @SuppressWarnings({\"unchecked\"})\n    ClusterState clusterState = ClusterState.createFromCollectionMap(1,\n        (Map) loadFromResource(\"testWithCollectionMoveReplica.json\"),\n        ImmutableSet.of(\"node2\", \"node3\", \"node4\", \"node5\"));\n    DelegatingClusterStateProvider clusterStateProvider = new DelegatingClusterStateProvider(null) {\n      @Override\n      public ClusterState getClusterState() throws IOException {\n        return clusterState;\n      }\n\n      @Override\n      public Set<String> getLiveNodes() {\n        return clusterState.getLiveNodes();\n      }\n    };\n\n    SolrClientNodeStateProvider solrClientNodeStateProvider = new SolrClientNodeStateProvider(null) {\n      @Override\n      protected Map<String, Object> fetchTagValues(String node, Collection<String> tags) {\n        Map<String, Object> result = new HashMap<>();\n        AtomicInteger cores = new AtomicInteger();\n        forEachReplica(node, replicaInfo -> cores.incrementAndGet());\n        if (tags.contains(ImplicitSnitch.CORES)) result.put(ImplicitSnitch.CORES, cores.get());\n        if (tags.contains(ImplicitSnitch.DISK)) result.put(ImplicitSnitch.DISK, 100);\n        return result;\n      }\n\n      @Override\n      protected Map<String, Object> fetchReplicaMetrics(String solrNode, Map<String, Pair<String, Replica>> metricsKeyVsTagReplica) {\n        //e.g: solr.core.perReplicaDataColl.shard1.replica_n4:INDEX.sizeInBytes\n        Map<String, Object> result = new HashMap<>();\n        metricsKeyVsTagReplica.forEach((k, v) -> {\n          if (k.endsWith(\":INDEX.sizeInBytes\")) result.put(k, 100);\n        });\n        return result;\n      }\n\n      @Override\n      protected ClusterStateProvider getClusterStateProvider() {\n        return clusterStateProvider;\n      }\n    };\n    @SuppressWarnings({\"rawtypes\"})\n    Map m = solrClientNodeStateProvider.getNodeValues(\"node1\", ImmutableSet.of(\"cores\", \"withCollection\"));\n    assertNotNull(m.get(\"withCollection\"));\n\n    @SuppressWarnings({\"rawtypes\"})\n    Map policies = (Map) Utils.fromJSONString(\"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'minimize': 'cores'},\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, 'nodeRole': 'overseer'}\" +\n        \"    { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"  ]\" +\n        \"}\");\n    @SuppressWarnings({\"unchecked\"})\n    AutoScalingConfig config = new AutoScalingConfig(policies);\n    Policy policy = config.getPolicy();\n    Policy.Session session = policy.createSession(new DelegatingCloudManager(null) {\n      @Override\n      public ClusterStateProvider getClusterStateProvider() {\n        return clusterStateProvider;\n      }\n\n      @Override\n      public NodeStateProvider getNodeStateProvider() {\n        return solrClientNodeStateProvider;\n      }\n    });\n    Suggester suggester = session.getSuggester(CollectionAction.MOVEREPLICA);\n    suggester.hint(Hint.COLL_SHARD, new Pair<>(\"comments_coll\", \"shard1\"));\n    suggester.hint(Hint.SRC_NODE, \"node1\");\n    @SuppressWarnings({\"rawtypes\"})\n    SolrRequest op = suggester.getSuggestion();\n    assertNotNull(op);\n    assertEquals(\"node2 should have been selected by move replica\", \"node2\",\n        op.getParams().get(\"targetNode\"));\n\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA);\n    suggester.hint(Hint.COLL_SHARD, new Pair<>(\"comments_coll\", \"shard1\"));\n    suggester.hint(Hint.SRC_NODE, \"node1\");\n    op = suggester.getSuggestion();\n    assertNull(op);\n  }\n\n","sourceOld":"  public void testWithCollectionMoveReplica() {\n    @SuppressWarnings({\"unchecked\"})\n    ClusterState clusterState = ClusterState.createFromCollectionMap(1,\n        (Map) loadFromResource(\"testWithCollectionMoveReplica.json\"),\n        ImmutableSet.of(\"node2\", \"node3\", \"node4\", \"node5\"));\n    DelegatingClusterStateProvider clusterStateProvider = new DelegatingClusterStateProvider(null) {\n      @Override\n      public ClusterState getClusterState() throws IOException {\n        return clusterState;\n      }\n\n      @Override\n      public Set<String> getLiveNodes() {\n        return clusterState.getLiveNodes();\n      }\n    };\n\n    SolrClientNodeStateProvider solrClientNodeStateProvider = new SolrClientNodeStateProvider(null) {\n      @Override\n      protected Map<String, Object> fetchTagValues(String node, Collection<String> tags) {\n        Map<String, Object> result = new HashMap<>();\n        AtomicInteger cores = new AtomicInteger();\n        forEachReplica(node, replicaInfo -> cores.incrementAndGet());\n        if (tags.contains(ImplicitSnitch.CORES)) result.put(ImplicitSnitch.CORES, cores.get());\n        if (tags.contains(ImplicitSnitch.DISK)) result.put(ImplicitSnitch.DISK, 100);\n        return result;\n      }\n\n      @Override\n      protected Map<String, Object> fetchReplicaMetrics(String solrNode, Map<String, Pair<String, ReplicaInfo>> metricsKeyVsTagReplica) {\n        //e.g: solr.core.perReplicaDataColl.shard1.replica_n4:INDEX.sizeInBytes\n        Map<String, Object> result = new HashMap<>();\n        metricsKeyVsTagReplica.forEach((k, v) -> {\n          if (k.endsWith(\":INDEX.sizeInBytes\")) result.put(k, 100);\n        });\n        return result;\n      }\n\n      @Override\n      protected ClusterStateProvider getClusterStateProvider() {\n        return clusterStateProvider;\n      }\n    };\n    @SuppressWarnings({\"rawtypes\"})\n    Map m = solrClientNodeStateProvider.getNodeValues(\"node1\", ImmutableSet.of(\"cores\", \"withCollection\"));\n    assertNotNull(m.get(\"withCollection\"));\n\n    @SuppressWarnings({\"rawtypes\"})\n    Map policies = (Map) Utils.fromJSONString(\"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'minimize': 'cores'},\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, 'nodeRole': 'overseer'}\" +\n        \"    { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"  ]\" +\n        \"}\");\n    @SuppressWarnings({\"unchecked\"})\n    AutoScalingConfig config = new AutoScalingConfig(policies);\n    Policy policy = config.getPolicy();\n    Policy.Session session = policy.createSession(new DelegatingCloudManager(null) {\n      @Override\n      public ClusterStateProvider getClusterStateProvider() {\n        return clusterStateProvider;\n      }\n\n      @Override\n      public NodeStateProvider getNodeStateProvider() {\n        return solrClientNodeStateProvider;\n      }\n    });\n    Suggester suggester = session.getSuggester(CollectionAction.MOVEREPLICA);\n    suggester.hint(Hint.COLL_SHARD, new Pair<>(\"comments_coll\", \"shard1\"));\n    suggester.hint(Hint.SRC_NODE, \"node1\");\n    @SuppressWarnings({\"rawtypes\"})\n    SolrRequest op = suggester.getSuggestion();\n    assertNotNull(op);\n    assertEquals(\"node2 should have been selected by move replica\", \"node2\",\n        op.getParams().get(\"targetNode\"));\n\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA);\n    suggester.hint(Hint.COLL_SHARD, new Pair<>(\"comments_coll\", \"shard1\"));\n    suggester.hint(Hint.SRC_NODE, \"node1\");\n    op = suggester.getSuggestion();\n    assertNull(op);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testWithCollectionMoveReplica().mjava","sourceNew":null,"sourceOld":"  public void testWithCollectionMoveReplica() {\n    @SuppressWarnings({\"unchecked\"})\n    ClusterState clusterState = ClusterState.createFromCollectionMap(1,\n        (Map) loadFromResource(\"testWithCollectionMoveReplica.json\"),\n        ImmutableSet.of(\"node2\", \"node3\", \"node4\", \"node5\"));\n    DelegatingClusterStateProvider clusterStateProvider = new DelegatingClusterStateProvider(null) {\n      @Override\n      public ClusterState getClusterState() throws IOException {\n        return clusterState;\n      }\n\n      @Override\n      public Set<String> getLiveNodes() {\n        return clusterState.getLiveNodes();\n      }\n    };\n\n    SolrClientNodeStateProvider solrClientNodeStateProvider = new SolrClientNodeStateProvider(null) {\n      @Override\n      protected Map<String, Object> fetchTagValues(String node, Collection<String> tags) {\n        Map<String, Object> result = new HashMap<>();\n        AtomicInteger cores = new AtomicInteger();\n        forEachReplica(node, replicaInfo -> cores.incrementAndGet());\n        if (tags.contains(ImplicitSnitch.CORES)) result.put(ImplicitSnitch.CORES, cores.get());\n        if (tags.contains(ImplicitSnitch.DISK)) result.put(ImplicitSnitch.DISK, 100);\n        return result;\n      }\n\n      @Override\n      protected Map<String, Object> fetchReplicaMetrics(String solrNode, Map<String, Pair<String, Replica>> metricsKeyVsTagReplica) {\n        //e.g: solr.core.perReplicaDataColl.shard1.replica_n4:INDEX.sizeInBytes\n        Map<String, Object> result = new HashMap<>();\n        metricsKeyVsTagReplica.forEach((k, v) -> {\n          if (k.endsWith(\":INDEX.sizeInBytes\")) result.put(k, 100);\n        });\n        return result;\n      }\n\n      @Override\n      protected ClusterStateProvider getClusterStateProvider() {\n        return clusterStateProvider;\n      }\n    };\n    @SuppressWarnings({\"rawtypes\"})\n    Map m = solrClientNodeStateProvider.getNodeValues(\"node1\", ImmutableSet.of(\"cores\", \"withCollection\"));\n    assertNotNull(m.get(\"withCollection\"));\n\n    @SuppressWarnings({\"rawtypes\"})\n    Map policies = (Map) Utils.fromJSONString(\"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'minimize': 'cores'},\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, 'nodeRole': 'overseer'}\" +\n        \"    { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"  ]\" +\n        \"}\");\n    @SuppressWarnings({\"unchecked\"})\n    AutoScalingConfig config = new AutoScalingConfig(policies);\n    Policy policy = config.getPolicy();\n    Policy.Session session = policy.createSession(new DelegatingCloudManager(null) {\n      @Override\n      public ClusterStateProvider getClusterStateProvider() {\n        return clusterStateProvider;\n      }\n\n      @Override\n      public NodeStateProvider getNodeStateProvider() {\n        return solrClientNodeStateProvider;\n      }\n    });\n    Suggester suggester = session.getSuggester(CollectionAction.MOVEREPLICA);\n    suggester.hint(Hint.COLL_SHARD, new Pair<>(\"comments_coll\", \"shard1\"));\n    suggester.hint(Hint.SRC_NODE, \"node1\");\n    @SuppressWarnings({\"rawtypes\"})\n    SolrRequest op = suggester.getSuggestion();\n    assertNotNull(op);\n    assertEquals(\"node2 should have been selected by move replica\", \"node2\",\n        op.getParams().get(\"targetNode\"));\n\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA);\n    suggester.hint(Hint.COLL_SHARD, new Pair<>(\"comments_coll\", \"shard1\"));\n    suggester.hint(Hint.SRC_NODE, \"node1\");\n    op = suggester.getSuggestion();\n    assertNull(op);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9ba1b632c041956c93c41aa1143d16a567014891":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"5ad9c35f926b4bf8da0336d1300efc709c8d5a56":["f5a27e78e3d29dee02bab19ded25336471e96882"],"7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd":["9ba1b632c041956c93c41aa1143d16a567014891"],"3f504512a03d978990cbff30db0522b354e846db":["7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cb4df98176b6dd0ae6ceba71eaa59c9bcb8fe2eb":["27639bb5e041490ce599065875dd2f6d8beef62a"],"f5a27e78e3d29dee02bab19ded25336471e96882":["cb4df98176b6dd0ae6ceba71eaa59c9bcb8fe2eb"],"27639bb5e041490ce599065875dd2f6d8beef62a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"9ba1b632c041956c93c41aa1143d16a567014891":["7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd"],"5ad9c35f926b4bf8da0336d1300efc709c8d5a56":["9ba1b632c041956c93c41aa1143d16a567014891"],"7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd":["3f504512a03d978990cbff30db0522b354e846db"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["27639bb5e041490ce599065875dd2f6d8beef62a"],"cb4df98176b6dd0ae6ceba71eaa59c9bcb8fe2eb":["f5a27e78e3d29dee02bab19ded25336471e96882"],"f5a27e78e3d29dee02bab19ded25336471e96882":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"27639bb5e041490ce599065875dd2f6d8beef62a":["cb4df98176b6dd0ae6ceba71eaa59c9bcb8fe2eb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}