{"path":"lucene/core/src/java/org/apache/lucene/store/FSDirectory#renameFile(String,String).mjava","commits":[{"id":"46e4a8bdfbafda795ef9c39a2bc2d47095770299","date":1410411846,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/FSDirectory#renameFile(String,String).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void renameFile(String source, String dest) throws IOException {\n    ensureOpen();\n    Files.move(new File(directory, source).toPath(), new File(directory, dest).toPath(), StandardCopyOption.ATOMIC_MOVE);\n    // TODO: should we move directory fsync to a separate 'syncMetadata' method?\n    // for example, to improve listCommits(), IndexFileDeleter could also call that after deleting segments_Ns\n    IOUtils.fsync(directory, true);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4abec28b874149a7223e32cc7a01704c27790de","date":1410644789,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/FSDirectory#renameFile(String,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/FSDirectory#renameFile(String,String).mjava","sourceNew":"  @Override\n  public void renameFile(String source, String dest) throws IOException {\n    ensureOpen();\n    Files.move(directory.resolve(source), directory.resolve(dest), StandardCopyOption.ATOMIC_MOVE);\n    // TODO: should we move directory fsync to a separate 'syncMetadata' method?\n    // for example, to improve listCommits(), IndexFileDeleter could also call that after deleting segments_Ns\n    IOUtils.fsync(directory, true);\n  }\n\n","sourceOld":"  @Override\n  public void renameFile(String source, String dest) throws IOException {\n    ensureOpen();\n    Files.move(new File(directory, source).toPath(), new File(directory, dest).toPath(), StandardCopyOption.ATOMIC_MOVE);\n    // TODO: should we move directory fsync to a separate 'syncMetadata' method?\n    // for example, to improve listCommits(), IndexFileDeleter could also call that after deleting segments_Ns\n    IOUtils.fsync(directory, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"240cd0f67652ccfb87d7c5f8b2486d0f42012daa","date":1454536570,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/FSDirectory#renameFile(String,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/FSDirectory#renameFile(String,String).mjava","sourceNew":"  @Override\n  public void renameFile(String source, String dest) throws IOException {\n    ensureOpen();\n    maybeDeletePendingFiles();\n    Files.move(directory.resolve(source), directory.resolve(dest), StandardCopyOption.ATOMIC_MOVE);\n    // TODO: should we move directory fsync to a separate 'syncMetadata' method?\n    // for example, to improve listCommits(), IndexFileDeleter could also call that after deleting segments_Ns\n    IOUtils.fsync(directory, true);\n  }\n\n","sourceOld":"  @Override\n  public void renameFile(String source, String dest) throws IOException {\n    ensureOpen();\n    Files.move(directory.resolve(source), directory.resolve(dest), StandardCopyOption.ATOMIC_MOVE);\n    // TODO: should we move directory fsync to a separate 'syncMetadata' method?\n    // for example, to improve listCommits(), IndexFileDeleter could also call that after deleting segments_Ns\n    IOUtils.fsync(directory, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"34d6426cef006e0c3625cabe7a7ec1c2b08bc501","date":1454683374,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/FSDirectory#renameFile(String,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/FSDirectory#renameFile(String,String).mjava","sourceNew":"  @Override\n  public void renameFile(String source, String dest) throws IOException {\n    ensureOpen();\n    if (pendingDeletes.contains(source)) {\n      throw new NoSuchFileException(\"file \\\"\" + source + \"\\\" is pending delete and cannot be moved\");\n    }\n    maybeDeletePendingFiles();\n    Files.move(directory.resolve(source), directory.resolve(dest), StandardCopyOption.ATOMIC_MOVE);\n    // TODO: should we move directory fsync to a separate 'syncMetadata' method?\n    // for example, to improve listCommits(), IndexFileDeleter could also call that after deleting segments_Ns\n    IOUtils.fsync(directory, true);\n  }\n\n","sourceOld":"  @Override\n  public void renameFile(String source, String dest) throws IOException {\n    ensureOpen();\n    maybeDeletePendingFiles();\n    Files.move(directory.resolve(source), directory.resolve(dest), StandardCopyOption.ATOMIC_MOVE);\n    // TODO: should we move directory fsync to a separate 'syncMetadata' method?\n    // for example, to improve listCommits(), IndexFileDeleter could also call that after deleting segments_Ns\n    IOUtils.fsync(directory, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6105d385afcbf42689e171e9bcea48d0c9ff6c","date":1454692764,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/FSDirectory#renameFile(String,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/FSDirectory#renameFile(String,String).mjava","sourceNew":"  @Override\n  public void renameFile(String source, String dest) throws IOException {\n    ensureOpen();\n    if (pendingDeletes.contains(source)) {\n      throw new NoSuchFileException(\"file \\\"\" + source + \"\\\" is pending delete and cannot be moved\");\n    }\n    pendingDeletes.remove(dest);\n    Files.move(directory.resolve(source), directory.resolve(dest), StandardCopyOption.ATOMIC_MOVE);\n    // TODO: should we move directory fsync to a separate 'syncMetadata' method?\n    // for example, to improve listCommits(), IndexFileDeleter could also call that after deleting segments_Ns\n    IOUtils.fsync(directory, true);\n    maybeDeletePendingFiles();\n  }\n\n","sourceOld":"  @Override\n  public void renameFile(String source, String dest) throws IOException {\n    ensureOpen();\n    if (pendingDeletes.contains(source)) {\n      throw new NoSuchFileException(\"file \\\"\" + source + \"\\\" is pending delete and cannot be moved\");\n    }\n    maybeDeletePendingFiles();\n    Files.move(directory.resolve(source), directory.resolve(dest), StandardCopyOption.ATOMIC_MOVE);\n    // TODO: should we move directory fsync to a separate 'syncMetadata' method?\n    // for example, to improve listCommits(), IndexFileDeleter could also call that after deleting segments_Ns\n    IOUtils.fsync(directory, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b470f36a9372c97283360b1304eacbde22df6c0d","date":1454765175,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/store/FSDirectory#renameFile(String,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/FSDirectory#renameFile(String,String).mjava","sourceNew":"  @Override\n  public void renameFile(String source, String dest) throws IOException {\n    ensureOpen();\n    if (pendingDeletes.contains(source)) {\n      throw new NoSuchFileException(\"file \\\"\" + source + \"\\\" is pending delete and cannot be moved\");\n    }\n    pendingDeletes.remove(dest);\n    Files.move(directory.resolve(source), directory.resolve(dest), StandardCopyOption.ATOMIC_MOVE);\n    // TODO: should we move directory fsync to a separate 'syncMetadata' method?\n    // for example, to improve listCommits(), IndexFileDeleter could also call that after deleting segments_Ns\n    IOUtils.fsync(directory, true);\n    maybeDeletePendingFiles();\n  }\n\n","sourceOld":"  @Override\n  public void renameFile(String source, String dest) throws IOException {\n    ensureOpen();\n    Files.move(directory.resolve(source), directory.resolve(dest), StandardCopyOption.ATOMIC_MOVE);\n    // TODO: should we move directory fsync to a separate 'syncMetadata' method?\n    // for example, to improve listCommits(), IndexFileDeleter could also call that after deleting segments_Ns\n    IOUtils.fsync(directory, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/store/FSDirectory#renameFile(String,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/FSDirectory#renameFile(String,String).mjava","sourceNew":"  @Override\n  public void renameFile(String source, String dest) throws IOException {\n    ensureOpen();\n    if (pendingDeletes.contains(source)) {\n      throw new NoSuchFileException(\"file \\\"\" + source + \"\\\" is pending delete and cannot be moved\");\n    }\n    pendingDeletes.remove(dest);\n    Files.move(directory.resolve(source), directory.resolve(dest), StandardCopyOption.ATOMIC_MOVE);\n    // TODO: should we move directory fsync to a separate 'syncMetadata' method?\n    // for example, to improve listCommits(), IndexFileDeleter could also call that after deleting segments_Ns\n    IOUtils.fsync(directory, true);\n    maybeDeletePendingFiles();\n  }\n\n","sourceOld":"  @Override\n  public void renameFile(String source, String dest) throws IOException {\n    ensureOpen();\n    Files.move(directory.resolve(source), directory.resolve(dest), StandardCopyOption.ATOMIC_MOVE);\n    // TODO: should we move directory fsync to a separate 'syncMetadata' method?\n    // for example, to improve listCommits(), IndexFileDeleter could also call that after deleting segments_Ns\n    IOUtils.fsync(directory, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a207d19eac354d649c3f0e2cce070017c78125e","date":1454776470,"type":3,"author":"Erick Erickson","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/store/FSDirectory#renameFile(String,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/FSDirectory#renameFile(String,String).mjava","sourceNew":"  @Override\n  public void renameFile(String source, String dest) throws IOException {\n    ensureOpen();\n    if (pendingDeletes.contains(source)) {\n      throw new NoSuchFileException(\"file \\\"\" + source + \"\\\" is pending delete and cannot be moved\");\n    }\n    pendingDeletes.remove(dest);\n    Files.move(directory.resolve(source), directory.resolve(dest), StandardCopyOption.ATOMIC_MOVE);\n    // TODO: should we move directory fsync to a separate 'syncMetadata' method?\n    // for example, to improve listCommits(), IndexFileDeleter could also call that after deleting segments_Ns\n    IOUtils.fsync(directory, true);\n    maybeDeletePendingFiles();\n  }\n\n","sourceOld":"  @Override\n  public void renameFile(String source, String dest) throws IOException {\n    ensureOpen();\n    Files.move(directory.resolve(source), directory.resolve(dest), StandardCopyOption.ATOMIC_MOVE);\n    // TODO: should we move directory fsync to a separate 'syncMetadata' method?\n    // for example, to improve listCommits(), IndexFileDeleter could also call that after deleting segments_Ns\n    IOUtils.fsync(directory, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"214256b5eeeaba88b8293b37d30460b462b19562","date":1468250146,"type":5,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/FSDirectory#rename(String,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/FSDirectory#renameFile(String,String).mjava","sourceNew":"  @Override\n  public void rename(String source, String dest) throws IOException {\n    ensureOpen();\n    if (pendingDeletes.contains(source)) {\n      throw new NoSuchFileException(\"file \\\"\" + source + \"\\\" is pending delete and cannot be moved\");\n    }\n    pendingDeletes.remove(dest);\n    Files.move(directory.resolve(source), directory.resolve(dest), StandardCopyOption.ATOMIC_MOVE);\n    maybeDeletePendingFiles();\n  }\n\n","sourceOld":"  @Override\n  public void renameFile(String source, String dest) throws IOException {\n    ensureOpen();\n    if (pendingDeletes.contains(source)) {\n      throw new NoSuchFileException(\"file \\\"\" + source + \"\\\" is pending delete and cannot be moved\");\n    }\n    pendingDeletes.remove(dest);\n    Files.move(directory.resolve(source), directory.resolve(dest), StandardCopyOption.ATOMIC_MOVE);\n    // TODO: should we move directory fsync to a separate 'syncMetadata' method?\n    // for example, to improve listCommits(), IndexFileDeleter could also call that after deleting segments_Ns\n    IOUtils.fsync(directory, true);\n    maybeDeletePendingFiles();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/store/FSDirectory#renameFile(String,String).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void renameFile(String source, String dest) throws IOException {\n    ensureOpen();\n    if (pendingDeletes.contains(source)) {\n      throw new NoSuchFileException(\"file \\\"\" + source + \"\\\" is pending delete and cannot be moved\");\n    }\n    pendingDeletes.remove(dest);\n    Files.move(directory.resolve(source), directory.resolve(dest), StandardCopyOption.ATOMIC_MOVE);\n    // TODO: should we move directory fsync to a separate 'syncMetadata' method?\n    // for example, to improve listCommits(), IndexFileDeleter could also call that after deleting segments_Ns\n    IOUtils.fsync(directory, true);\n    maybeDeletePendingFiles();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"34d6426cef006e0c3625cabe7a7ec1c2b08bc501":["240cd0f67652ccfb87d7c5f8b2486d0f42012daa"],"46e4a8bdfbafda795ef9c39a2bc2d47095770299":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1e6105d385afcbf42689e171e9bcea48d0c9ff6c":["34d6426cef006e0c3625cabe7a7ec1c2b08bc501"],"214256b5eeeaba88b8293b37d30460b462b19562":["5a207d19eac354d649c3f0e2cce070017c78125e"],"240cd0f67652ccfb87d7c5f8b2486d0f42012daa":["f4abec28b874149a7223e32cc7a01704c27790de"],"5a207d19eac354d649c3f0e2cce070017c78125e":["f4abec28b874149a7223e32cc7a01704c27790de","b470f36a9372c97283360b1304eacbde22df6c0d"],"b470f36a9372c97283360b1304eacbde22df6c0d":["f4abec28b874149a7223e32cc7a01704c27790de","1e6105d385afcbf42689e171e9bcea48d0c9ff6c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["f4abec28b874149a7223e32cc7a01704c27790de","b470f36a9372c97283360b1304eacbde22df6c0d"],"f4abec28b874149a7223e32cc7a01704c27790de":["46e4a8bdfbafda795ef9c39a2bc2d47095770299"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["5a207d19eac354d649c3f0e2cce070017c78125e","214256b5eeeaba88b8293b37d30460b462b19562"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["214256b5eeeaba88b8293b37d30460b462b19562"]},"commit2Childs":{"34d6426cef006e0c3625cabe7a7ec1c2b08bc501":["1e6105d385afcbf42689e171e9bcea48d0c9ff6c"],"46e4a8bdfbafda795ef9c39a2bc2d47095770299":["f4abec28b874149a7223e32cc7a01704c27790de"],"1e6105d385afcbf42689e171e9bcea48d0c9ff6c":["b470f36a9372c97283360b1304eacbde22df6c0d"],"214256b5eeeaba88b8293b37d30460b462b19562":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"240cd0f67652ccfb87d7c5f8b2486d0f42012daa":["34d6426cef006e0c3625cabe7a7ec1c2b08bc501"],"5a207d19eac354d649c3f0e2cce070017c78125e":["214256b5eeeaba88b8293b37d30460b462b19562","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"b470f36a9372c97283360b1304eacbde22df6c0d":["5a207d19eac354d649c3f0e2cce070017c78125e","1e6acbaae7af722f17204ceccf0f7db5753eccf3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["46e4a8bdfbafda795ef9c39a2bc2d47095770299"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"f4abec28b874149a7223e32cc7a01704c27790de":["240cd0f67652ccfb87d7c5f8b2486d0f42012daa","5a207d19eac354d649c3f0e2cce070017c78125e","b470f36a9372c97283360b1304eacbde22df6c0d","1e6acbaae7af722f17204ceccf0f7db5753eccf3"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}