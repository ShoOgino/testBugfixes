{"path":"lucene/core/src/test/org/apache/lucene/index/TestBackwardsCompatibility#assertNumericDocValues(AtomicReader,String,String).mjava","commits":[{"id":"e664a9c629e1fab2078175a4d54ef6228ccea437","date":1400070981,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestBackwardsCompatibility#assertNumericDocValues(AtomicReader,String,String).mjava","pathOld":"/dev/null","sourceNew":"  private void assertNumericDocValues(AtomicReader r, String f, String cf) throws IOException {\n    NumericDocValues ndvf = r.getNumericDocValues(f);\n    NumericDocValues ndvcf = r.getNumericDocValues(cf);\n    for (int i = 0; i < r.maxDoc(); i++) {\n      assertEquals(ndvcf.get(i), ndvf.get(i)*2);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ccc69a67d5c846a04c7f71e28cb1914e3af895f3","date":1400252660,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestBackwardsCompatibility#assertNumericDocValues(AtomicReader,String,String).mjava","pathOld":"/dev/null","sourceNew":"  private void assertNumericDocValues(AtomicReader r, String f, String cf) throws IOException {\n    NumericDocValues ndvf = r.getNumericDocValues(f);\n    NumericDocValues ndvcf = r.getNumericDocValues(cf);\n    for (int i = 0; i < r.maxDoc(); i++) {\n      assertEquals(ndvcf.get(i), ndvf.get(i)*2);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cc45c615dbb82bf79d5f9550286098367874fbf","date":1409571423,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#assertNumericDocValues(AtomicReader,String,String).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestBackwardsCompatibility#assertNumericDocValues(AtomicReader,String,String).mjava","sourceNew":"  private void assertNumericDocValues(AtomicReader r, String f, String cf) throws IOException {\n    NumericDocValues ndvf = r.getNumericDocValues(f);\n    NumericDocValues ndvcf = r.getNumericDocValues(cf);\n    for (int i = 0; i < r.maxDoc(); i++) {\n      assertEquals(ndvcf.get(i), ndvf.get(i)*2);\n    }\n  }\n\n","sourceOld":"  private void assertNumericDocValues(AtomicReader r, String f, String cf) throws IOException {\n    NumericDocValues ndvf = r.getNumericDocValues(f);\n    NumericDocValues ndvcf = r.getNumericDocValues(cf);\n    for (int i = 0; i < r.maxDoc(); i++) {\n      assertEquals(ndvcf.get(i), ndvf.get(i)*2);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"402ad3ddc9da7b70da1b167667a60ece6a1381fb","date":1409656478,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#assertNumericDocValues(AtomicReader,String,String).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestBackwardsCompatibility#assertNumericDocValues(AtomicReader,String,String).mjava","sourceNew":"  private void assertNumericDocValues(AtomicReader r, String f, String cf) throws IOException {\n    NumericDocValues ndvf = r.getNumericDocValues(f);\n    NumericDocValues ndvcf = r.getNumericDocValues(cf);\n    for (int i = 0; i < r.maxDoc(); i++) {\n      assertEquals(ndvcf.get(i), ndvf.get(i)*2);\n    }\n  }\n\n","sourceOld":"  private void assertNumericDocValues(AtomicReader r, String f, String cf) throws IOException {\n    NumericDocValues ndvf = r.getNumericDocValues(f);\n    NumericDocValues ndvcf = r.getNumericDocValues(cf);\n    for (int i = 0; i < r.maxDoc(); i++) {\n      assertEquals(ndvcf.get(i), ndvf.get(i)*2);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e664a9c629e1fab2078175a4d54ef6228ccea437":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cc45c615dbb82bf79d5f9550286098367874fbf":["e664a9c629e1fab2078175a4d54ef6228ccea437"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["e664a9c629e1fab2078175a4d54ef6228ccea437","4cc45c615dbb82bf79d5f9550286098367874fbf"],"ccc69a67d5c846a04c7f71e28cb1914e3af895f3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e664a9c629e1fab2078175a4d54ef6228ccea437"]},"commit2Childs":{"e664a9c629e1fab2078175a4d54ef6228ccea437":["4cc45c615dbb82bf79d5f9550286098367874fbf","402ad3ddc9da7b70da1b167667a60ece6a1381fb","ccc69a67d5c846a04c7f71e28cb1914e3af895f3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e664a9c629e1fab2078175a4d54ef6228ccea437","ccc69a67d5c846a04c7f71e28cb1914e3af895f3"],"4cc45c615dbb82bf79d5f9550286098367874fbf":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ccc69a67d5c846a04c7f71e28cb1914e3af895f3":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","ccc69a67d5c846a04c7f71e28cb1914e3af895f3"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}