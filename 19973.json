{"path":"solr/src/test/org/apache/solr/client/solrj/SolrExampleTests#testStreamingRequest().mjava","commits":[{"id":"e5ac9c2d15e75a72c2c461039fb6789654439323","date":1284413428,"type":0,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/client/solrj/SolrExampleTests#testStreamingRequest().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testStreamingRequest() throws Exception {\n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n   \n   // Add some docs to the index\n   UpdateRequest req = new UpdateRequest();\n   for( int i=0; i<10; i++ ) {\n     SolrInputDocument doc = new SolrInputDocument();\n     doc.addField(\"id\", \"\" + i );\n     doc.addField(\"cat\", \"foocat\");\n     req.add( doc );\n   }\n   req.setAction(ACTION.COMMIT, true, true );\n   req.process( server );\n   \n   // Make sure it ran OK\n   SolrQuery query = new SolrQuery(\"*:*\");\n   QueryResponse response = server.query(query);\n   assertEquals(0, response.getStatus());\n   assertEquals(10, response.getResults().getNumFound());\n   \n   // Now make sure each document gets output\n     final AtomicInteger cnt = new AtomicInteger( 0 );\n     server.queryAndStreamResponse(query, new StreamingResponseCallback() {\n  \n       @Override\n       public void streamDocListInfo(long numFound, long start, Float maxScore) {\n         assertEquals(10, numFound );\n       }\n  \n       @Override\n       public void streamSolrDocument(SolrDocument doc) {\n         cnt.incrementAndGet();\n       }\n       \n     });\n     assertEquals(10, cnt.get() );\n   }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a10edefec1f3260f7f0504d545e21438a0e99bc8","date":1284415722,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/client/solrj/SolrExampleTests#testStreamingRequest().mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/SolrExampleTests#testStreamingRequest().mjava","sourceNew":"  @Test\n  public void testStreamingRequest() throws Exception {\n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n   \n    // Add some docs to the index\n    UpdateRequest req = new UpdateRequest();\n    for( int i=0; i<10; i++ ) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"\" + i );\n      doc.addField(\"cat\", \"foocat\");\n      req.add( doc );\n    }\n    req.setAction(ACTION.COMMIT, true, true );\n    req.process( server );\n   \n    // Make sure it ran OK\n    SolrQuery query = new SolrQuery(\"*:*\");\n    QueryResponse response = server.query(query);\n    assertEquals(0, response.getStatus());\n    assertEquals(10, response.getResults().getNumFound());\n   \n    // Now make sure each document gets output\n    final AtomicInteger cnt = new AtomicInteger( 0 );\n    server.queryAndStreamResponse(query, new StreamingResponseCallback() {\n\n      @Override\n      public void streamDocListInfo(long numFound, long start, Float maxScore) {\n        assertEquals(10, numFound );\n      }\n\n      @Override\n      public void streamSolrDocument(SolrDocument doc) {\n        cnt.incrementAndGet();\n      }\n     \n    });\n    assertEquals(10, cnt.get() );\n  }\n\n","sourceOld":"  @Test\n  public void testStreamingRequest() throws Exception {\n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n   \n   // Add some docs to the index\n   UpdateRequest req = new UpdateRequest();\n   for( int i=0; i<10; i++ ) {\n     SolrInputDocument doc = new SolrInputDocument();\n     doc.addField(\"id\", \"\" + i );\n     doc.addField(\"cat\", \"foocat\");\n     req.add( doc );\n   }\n   req.setAction(ACTION.COMMIT, true, true );\n   req.process( server );\n   \n   // Make sure it ran OK\n   SolrQuery query = new SolrQuery(\"*:*\");\n   QueryResponse response = server.query(query);\n   assertEquals(0, response.getStatus());\n   assertEquals(10, response.getResults().getNumFound());\n   \n   // Now make sure each document gets output\n     final AtomicInteger cnt = new AtomicInteger( 0 );\n     server.queryAndStreamResponse(query, new StreamingResponseCallback() {\n  \n       @Override\n       public void streamDocListInfo(long numFound, long start, Float maxScore) {\n         assertEquals(10, numFound );\n       }\n  \n       @Override\n       public void streamSolrDocument(SolrDocument doc) {\n         cnt.incrementAndGet();\n       }\n       \n     });\n     assertEquals(10, cnt.get() );\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/client/solrj/SolrExampleTests#testStreamingRequest().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testStreamingRequest() throws Exception {\n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n   \n    // Add some docs to the index\n    UpdateRequest req = new UpdateRequest();\n    for( int i=0; i<10; i++ ) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"\" + i );\n      doc.addField(\"cat\", \"foocat\");\n      req.add( doc );\n    }\n    req.setAction(ACTION.COMMIT, true, true );\n    req.process( server );\n   \n    // Make sure it ran OK\n    SolrQuery query = new SolrQuery(\"*:*\");\n    QueryResponse response = server.query(query);\n    assertEquals(0, response.getStatus());\n    assertEquals(10, response.getResults().getNumFound());\n   \n    // Now make sure each document gets output\n    final AtomicInteger cnt = new AtomicInteger( 0 );\n    server.queryAndStreamResponse(query, new StreamingResponseCallback() {\n\n      @Override\n      public void streamDocListInfo(long numFound, long start, Float maxScore) {\n        assertEquals(10, numFound );\n      }\n\n      @Override\n      public void streamSolrDocument(SolrDocument doc) {\n        cnt.incrementAndGet();\n      }\n     \n    });\n    assertEquals(10, cnt.get() );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6aedf81f068e430dec27d94310415cc6ff52731c","date":1301070261,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/client/solrj/SolrExampleTests#testStreamingRequest().mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/SolrExampleTests#testStreamingRequest().mjava","sourceNew":"  @Test\n  public void testStreamingRequest() throws Exception {\n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n   \n    // Add some docs to the index\n    UpdateRequest req = new UpdateRequest();\n    for( int i=0; i<10; i++ ) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"\" + i );\n      doc.addField(\"cat\", \"foocat\");\n      req.add( doc );\n    }\n    req.setAction(ACTION.COMMIT, true, true );\n    req.process( server );\n   \n    // Make sure it ran OK\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set( CommonParams.FL, \"id,score,_docid_\" );\n    QueryResponse response = server.query(query);\n    assertEquals(0, response.getStatus());\n    assertEquals(10, response.getResults().getNumFound());\n   \n    // Now make sure each document gets output\n    final AtomicInteger cnt = new AtomicInteger( 0 );\n    server.queryAndStreamResponse(query, new StreamingResponseCallback() {\n\n      @Override\n      public void streamDocListInfo(long numFound, long start, Float maxScore) {\n        assertEquals(10, numFound );\n      }\n\n      @Override\n      public void streamSolrDocument(SolrDocument doc) {\n        cnt.incrementAndGet();\n        \n        // Make sure the transformer works for streaming\n        Float score = (Float)doc.get( \"score\" );\n        Integer docid = (Integer)doc.get( \"_docid_\" );\n        assertEquals( \"should have score\", new Float(1.0), score );\n      }\n     \n    });\n    assertEquals(10, cnt.get() );\n  }\n\n","sourceOld":"  @Test\n  public void testStreamingRequest() throws Exception {\n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n   \n    // Add some docs to the index\n    UpdateRequest req = new UpdateRequest();\n    for( int i=0; i<10; i++ ) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"\" + i );\n      doc.addField(\"cat\", \"foocat\");\n      req.add( doc );\n    }\n    req.setAction(ACTION.COMMIT, true, true );\n    req.process( server );\n   \n    // Make sure it ran OK\n    SolrQuery query = new SolrQuery(\"*:*\");\n    QueryResponse response = server.query(query);\n    assertEquals(0, response.getStatus());\n    assertEquals(10, response.getResults().getNumFound());\n   \n    // Now make sure each document gets output\n    final AtomicInteger cnt = new AtomicInteger( 0 );\n    server.queryAndStreamResponse(query, new StreamingResponseCallback() {\n\n      @Override\n      public void streamDocListInfo(long numFound, long start, Float maxScore) {\n        assertEquals(10, numFound );\n      }\n\n      @Override\n      public void streamSolrDocument(SolrDocument doc) {\n        cnt.incrementAndGet();\n      }\n     \n    });\n    assertEquals(10, cnt.get() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/client/solrj/SolrExampleTests#testStreamingRequest().mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/SolrExampleTests#testStreamingRequest().mjava","sourceNew":"  @Test\n  public void testStreamingRequest() throws Exception {\n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n   \n    // Add some docs to the index\n    UpdateRequest req = new UpdateRequest();\n    for( int i=0; i<10; i++ ) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"\" + i );\n      doc.addField(\"cat\", \"foocat\");\n      req.add( doc );\n    }\n    req.setAction(ACTION.COMMIT, true, true );\n    req.process( server );\n   \n    // Make sure it ran OK\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set( CommonParams.FL, \"id,score,_docid_\" );\n    QueryResponse response = server.query(query);\n    assertEquals(0, response.getStatus());\n    assertEquals(10, response.getResults().getNumFound());\n   \n    // Now make sure each document gets output\n    final AtomicInteger cnt = new AtomicInteger( 0 );\n    server.queryAndStreamResponse(query, new StreamingResponseCallback() {\n\n      @Override\n      public void streamDocListInfo(long numFound, long start, Float maxScore) {\n        assertEquals(10, numFound );\n      }\n\n      @Override\n      public void streamSolrDocument(SolrDocument doc) {\n        cnt.incrementAndGet();\n        \n        // Make sure the transformer works for streaming\n        Float score = (Float)doc.get( \"score\" );\n        Integer docid = (Integer)doc.get( \"_docid_\" );\n        assertEquals( \"should have score\", new Float(1.0), score );\n      }\n     \n    });\n    assertEquals(10, cnt.get() );\n  }\n\n","sourceOld":"  @Test\n  public void testStreamingRequest() throws Exception {\n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n   \n    // Add some docs to the index\n    UpdateRequest req = new UpdateRequest();\n    for( int i=0; i<10; i++ ) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"\" + i );\n      doc.addField(\"cat\", \"foocat\");\n      req.add( doc );\n    }\n    req.setAction(ACTION.COMMIT, true, true );\n    req.process( server );\n   \n    // Make sure it ran OK\n    SolrQuery query = new SolrQuery(\"*:*\");\n    QueryResponse response = server.query(query);\n    assertEquals(0, response.getStatus());\n    assertEquals(10, response.getResults().getNumFound());\n   \n    // Now make sure each document gets output\n    final AtomicInteger cnt = new AtomicInteger( 0 );\n    server.queryAndStreamResponse(query, new StreamingResponseCallback() {\n\n      @Override\n      public void streamDocListInfo(long numFound, long start, Float maxScore) {\n        assertEquals(10, numFound );\n      }\n\n      @Override\n      public void streamSolrDocument(SolrDocument doc) {\n        cnt.incrementAndGet();\n      }\n     \n    });\n    assertEquals(10, cnt.get() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/client/solrj/SolrExampleTests#testStreamingRequest().mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/SolrExampleTests#testStreamingRequest().mjava","sourceNew":"  @Test\n  public void testStreamingRequest() throws Exception {\n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n   \n    // Add some docs to the index\n    UpdateRequest req = new UpdateRequest();\n    for( int i=0; i<10; i++ ) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"\" + i );\n      doc.addField(\"cat\", \"foocat\");\n      req.add( doc );\n    }\n    req.setAction(ACTION.COMMIT, true, true );\n    req.process( server );\n   \n    // Make sure it ran OK\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set( CommonParams.FL, \"id,score,_docid_\" );\n    QueryResponse response = server.query(query);\n    assertEquals(0, response.getStatus());\n    assertEquals(10, response.getResults().getNumFound());\n   \n    // Now make sure each document gets output\n    final AtomicInteger cnt = new AtomicInteger( 0 );\n    server.queryAndStreamResponse(query, new StreamingResponseCallback() {\n\n      @Override\n      public void streamDocListInfo(long numFound, long start, Float maxScore) {\n        assertEquals(10, numFound );\n      }\n\n      @Override\n      public void streamSolrDocument(SolrDocument doc) {\n        cnt.incrementAndGet();\n        \n        // Make sure the transformer works for streaming\n        Float score = (Float)doc.get( \"score\" );\n        Integer docid = (Integer)doc.get( \"_docid_\" );\n        assertEquals( \"should have score\", new Float(1.0), score );\n      }\n     \n    });\n    assertEquals(10, cnt.get() );\n  }\n\n","sourceOld":"  @Test\n  public void testStreamingRequest() throws Exception {\n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n   \n    // Add some docs to the index\n    UpdateRequest req = new UpdateRequest();\n    for( int i=0; i<10; i++ ) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"\" + i );\n      doc.addField(\"cat\", \"foocat\");\n      req.add( doc );\n    }\n    req.setAction(ACTION.COMMIT, true, true );\n    req.process( server );\n   \n    // Make sure it ran OK\n    SolrQuery query = new SolrQuery(\"*:*\");\n    QueryResponse response = server.query(query);\n    assertEquals(0, response.getStatus());\n    assertEquals(10, response.getResults().getNumFound());\n   \n    // Now make sure each document gets output\n    final AtomicInteger cnt = new AtomicInteger( 0 );\n    server.queryAndStreamResponse(query, new StreamingResponseCallback() {\n\n      @Override\n      public void streamDocListInfo(long numFound, long start, Float maxScore) {\n        assertEquals(10, numFound );\n      }\n\n      @Override\n      public void streamSolrDocument(SolrDocument doc) {\n        cnt.incrementAndGet();\n      }\n     \n    });\n    assertEquals(10, cnt.get() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"00aaee1492907b0fd5421b6cf854a9eee5cd1326","date":1306664843,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/client/solrj/SolrExampleTests#testStreamingRequest().mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/SolrExampleTests#testStreamingRequest().mjava","sourceNew":"  @Test\n  public void testStreamingRequest() throws Exception {\n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n   \n    // Add some docs to the index\n    UpdateRequest req = new UpdateRequest();\n    for( int i=0; i<10; i++ ) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"\" + i );\n      doc.addField(\"cat\", \"foocat\");\n      req.add( doc );\n    }\n    req.setAction(ACTION.COMMIT, true, true );\n    req.process( server );\n   \n    // Make sure it ran OK\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set( CommonParams.FL, \"id,score,_docid_\" );\n    QueryResponse response = server.query(query);\n    assertEquals(0, response.getStatus());\n    assertEquals(10, response.getResults().getNumFound());\n   \n    // Now make sure each document gets output\n    final AtomicInteger cnt = new AtomicInteger( 0 );\n    server.queryAndStreamResponse(query, new StreamingResponseCallback() {\n\n      @Override\n      public void streamDocListInfo(long numFound, long start, Float maxScore) {\n        assertEquals(10, numFound );\n      }\n\n      @Override\n      public void streamSolrDocument(SolrDocument doc) {\n        cnt.incrementAndGet();\n        \n        // Make sure the transformer works for streaming\n        Float score = (Float)doc.get( \"score\" );\n        assertEquals( \"should have score\", new Float(1.0), score );\n      }\n     \n    });\n    assertEquals(10, cnt.get() );\n  }\n\n","sourceOld":"  @Test\n  public void testStreamingRequest() throws Exception {\n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n   \n    // Add some docs to the index\n    UpdateRequest req = new UpdateRequest();\n    for( int i=0; i<10; i++ ) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"\" + i );\n      doc.addField(\"cat\", \"foocat\");\n      req.add( doc );\n    }\n    req.setAction(ACTION.COMMIT, true, true );\n    req.process( server );\n   \n    // Make sure it ran OK\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set( CommonParams.FL, \"id,score,_docid_\" );\n    QueryResponse response = server.query(query);\n    assertEquals(0, response.getStatus());\n    assertEquals(10, response.getResults().getNumFound());\n   \n    // Now make sure each document gets output\n    final AtomicInteger cnt = new AtomicInteger( 0 );\n    server.queryAndStreamResponse(query, new StreamingResponseCallback() {\n\n      @Override\n      public void streamDocListInfo(long numFound, long start, Float maxScore) {\n        assertEquals(10, numFound );\n      }\n\n      @Override\n      public void streamSolrDocument(SolrDocument doc) {\n        cnt.incrementAndGet();\n        \n        // Make sure the transformer works for streaming\n        Float score = (Float)doc.get( \"score\" );\n        Integer docid = (Integer)doc.get( \"_docid_\" );\n        assertEquals( \"should have score\", new Float(1.0), score );\n      }\n     \n    });\n    assertEquals(10, cnt.get() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/client/solrj/SolrExampleTests#testStreamingRequest().mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/SolrExampleTests#testStreamingRequest().mjava","sourceNew":"  @Test\n  public void testStreamingRequest() throws Exception {\n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n   \n    // Add some docs to the index\n    UpdateRequest req = new UpdateRequest();\n    for( int i=0; i<10; i++ ) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"\" + i );\n      doc.addField(\"cat\", \"foocat\");\n      req.add( doc );\n    }\n    req.setAction(ACTION.COMMIT, true, true );\n    req.process( server );\n   \n    // Make sure it ran OK\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set( CommonParams.FL, \"id,score,_docid_\" );\n    QueryResponse response = server.query(query);\n    assertEquals(0, response.getStatus());\n    assertEquals(10, response.getResults().getNumFound());\n   \n    // Now make sure each document gets output\n    final AtomicInteger cnt = new AtomicInteger( 0 );\n    server.queryAndStreamResponse(query, new StreamingResponseCallback() {\n\n      @Override\n      public void streamDocListInfo(long numFound, long start, Float maxScore) {\n        assertEquals(10, numFound );\n      }\n\n      @Override\n      public void streamSolrDocument(SolrDocument doc) {\n        cnt.incrementAndGet();\n        \n        // Make sure the transformer works for streaming\n        Float score = (Float)doc.get( \"score\" );\n        assertEquals( \"should have score\", new Float(1.0), score );\n      }\n     \n    });\n    assertEquals(10, cnt.get() );\n  }\n\n","sourceOld":"  @Test\n  public void testStreamingRequest() throws Exception {\n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n   \n    // Add some docs to the index\n    UpdateRequest req = new UpdateRequest();\n    for( int i=0; i<10; i++ ) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"\" + i );\n      doc.addField(\"cat\", \"foocat\");\n      req.add( doc );\n    }\n    req.setAction(ACTION.COMMIT, true, true );\n    req.process( server );\n   \n    // Make sure it ran OK\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set( CommonParams.FL, \"id,score,_docid_\" );\n    QueryResponse response = server.query(query);\n    assertEquals(0, response.getStatus());\n    assertEquals(10, response.getResults().getNumFound());\n   \n    // Now make sure each document gets output\n    final AtomicInteger cnt = new AtomicInteger( 0 );\n    server.queryAndStreamResponse(query, new StreamingResponseCallback() {\n\n      @Override\n      public void streamDocListInfo(long numFound, long start, Float maxScore) {\n        assertEquals(10, numFound );\n      }\n\n      @Override\n      public void streamSolrDocument(SolrDocument doc) {\n        cnt.incrementAndGet();\n        \n        // Make sure the transformer works for streaming\n        Float score = (Float)doc.get( \"score\" );\n        Integer docid = (Integer)doc.get( \"_docid_\" );\n        assertEquals( \"should have score\", new Float(1.0), score );\n      }\n     \n    });\n    assertEquals(10, cnt.get() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e10cb22a8bdb44339e282925a29182bb2f3174d","date":1306841137,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/client/solrj/SolrExampleTests#testStreamingRequest().mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/SolrExampleTests#testStreamingRequest().mjava","sourceNew":"  @Test\n  public void testStreamingRequest() throws Exception {\n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n   \n    // Add some docs to the index\n    UpdateRequest req = new UpdateRequest();\n    for( int i=0; i<10; i++ ) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"\" + i );\n      doc.addField(\"cat\", \"foocat\");\n      req.add( doc );\n    }\n    req.setAction(ACTION.COMMIT, true, true );\n    req.process( server );\n   \n    // Make sure it ran OK\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set( CommonParams.FL, \"id,score,_docid_\" );\n    QueryResponse response = server.query(query);\n    assertEquals(0, response.getStatus());\n    assertEquals(10, response.getResults().getNumFound());\n   \n    // Now make sure each document gets output\n    final AtomicInteger cnt = new AtomicInteger( 0 );\n    server.queryAndStreamResponse(query, new StreamingResponseCallback() {\n\n      @Override\n      public void streamDocListInfo(long numFound, long start, Float maxScore) {\n        assertEquals(10, numFound );\n      }\n\n      @Override\n      public void streamSolrDocument(SolrDocument doc) {\n        cnt.incrementAndGet();\n        \n        // Make sure the transformer works for streaming\n        Float score = (Float)doc.get( \"score\" );\n        assertEquals( \"should have score\", new Float(1.0), score );\n      }\n     \n    });\n    assertEquals(10, cnt.get() );\n  }\n\n","sourceOld":"  @Test\n  public void testStreamingRequest() throws Exception {\n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n   \n    // Add some docs to the index\n    UpdateRequest req = new UpdateRequest();\n    for( int i=0; i<10; i++ ) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"\" + i );\n      doc.addField(\"cat\", \"foocat\");\n      req.add( doc );\n    }\n    req.setAction(ACTION.COMMIT, true, true );\n    req.process( server );\n   \n    // Make sure it ran OK\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set( CommonParams.FL, \"id,score,_docid_\" );\n    QueryResponse response = server.query(query);\n    assertEquals(0, response.getStatus());\n    assertEquals(10, response.getResults().getNumFound());\n   \n    // Now make sure each document gets output\n    final AtomicInteger cnt = new AtomicInteger( 0 );\n    server.queryAndStreamResponse(query, new StreamingResponseCallback() {\n\n      @Override\n      public void streamDocListInfo(long numFound, long start, Float maxScore) {\n        assertEquals(10, numFound );\n      }\n\n      @Override\n      public void streamSolrDocument(SolrDocument doc) {\n        cnt.incrementAndGet();\n        \n        // Make sure the transformer works for streaming\n        Float score = (Float)doc.get( \"score\" );\n        Integer docid = (Integer)doc.get( \"_docid_\" );\n        assertEquals( \"should have score\", new Float(1.0), score );\n      }\n     \n    });\n    assertEquals(10, cnt.get() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testStreamingRequest().mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/SolrExampleTests#testStreamingRequest().mjava","sourceNew":"  @Test\n  public void testStreamingRequest() throws Exception {\n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n   \n    // Add some docs to the index\n    UpdateRequest req = new UpdateRequest();\n    for( int i=0; i<10; i++ ) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"\" + i );\n      doc.addField(\"cat\", \"foocat\");\n      req.add( doc );\n    }\n    req.setAction(ACTION.COMMIT, true, true );\n    req.process( server );\n   \n    // Make sure it ran OK\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set( CommonParams.FL, \"id,score,_docid_\" );\n    QueryResponse response = server.query(query);\n    assertEquals(0, response.getStatus());\n    assertEquals(10, response.getResults().getNumFound());\n   \n    // Now make sure each document gets output\n    final AtomicInteger cnt = new AtomicInteger( 0 );\n    server.queryAndStreamResponse(query, new StreamingResponseCallback() {\n\n      @Override\n      public void streamDocListInfo(long numFound, long start, Float maxScore) {\n        assertEquals(10, numFound );\n      }\n\n      @Override\n      public void streamSolrDocument(SolrDocument doc) {\n        cnt.incrementAndGet();\n        \n        // Make sure the transformer works for streaming\n        Float score = (Float)doc.get( \"score\" );\n        assertEquals( \"should have score\", new Float(1.0), score );\n      }\n     \n    });\n    assertEquals(10, cnt.get() );\n  }\n\n","sourceOld":"  @Test\n  public void testStreamingRequest() throws Exception {\n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n   \n    // Add some docs to the index\n    UpdateRequest req = new UpdateRequest();\n    for( int i=0; i<10; i++ ) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"\" + i );\n      doc.addField(\"cat\", \"foocat\");\n      req.add( doc );\n    }\n    req.setAction(ACTION.COMMIT, true, true );\n    req.process( server );\n   \n    // Make sure it ran OK\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set( CommonParams.FL, \"id,score,_docid_\" );\n    QueryResponse response = server.query(query);\n    assertEquals(0, response.getStatus());\n    assertEquals(10, response.getResults().getNumFound());\n   \n    // Now make sure each document gets output\n    final AtomicInteger cnt = new AtomicInteger( 0 );\n    server.queryAndStreamResponse(query, new StreamingResponseCallback() {\n\n      @Override\n      public void streamDocListInfo(long numFound, long start, Float maxScore) {\n        assertEquals(10, numFound );\n      }\n\n      @Override\n      public void streamSolrDocument(SolrDocument doc) {\n        cnt.incrementAndGet();\n        \n        // Make sure the transformer works for streaming\n        Float score = (Float)doc.get( \"score\" );\n        assertEquals( \"should have score\", new Float(1.0), score );\n      }\n     \n    });\n    assertEquals(10, cnt.get() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testStreamingRequest().mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/SolrExampleTests#testStreamingRequest().mjava","sourceNew":"  @Test\n  public void testStreamingRequest() throws Exception {\n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n   \n    // Add some docs to the index\n    UpdateRequest req = new UpdateRequest();\n    for( int i=0; i<10; i++ ) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"\" + i );\n      doc.addField(\"cat\", \"foocat\");\n      req.add( doc );\n    }\n    req.setAction(ACTION.COMMIT, true, true );\n    req.process( server );\n   \n    // Make sure it ran OK\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set( CommonParams.FL, \"id,score,_docid_\" );\n    QueryResponse response = server.query(query);\n    assertEquals(0, response.getStatus());\n    assertEquals(10, response.getResults().getNumFound());\n   \n    // Now make sure each document gets output\n    final AtomicInteger cnt = new AtomicInteger( 0 );\n    server.queryAndStreamResponse(query, new StreamingResponseCallback() {\n\n      @Override\n      public void streamDocListInfo(long numFound, long start, Float maxScore) {\n        assertEquals(10, numFound );\n      }\n\n      @Override\n      public void streamSolrDocument(SolrDocument doc) {\n        cnt.incrementAndGet();\n        \n        // Make sure the transformer works for streaming\n        Float score = (Float)doc.get( \"score\" );\n        assertEquals( \"should have score\", new Float(1.0), score );\n      }\n     \n    });\n    assertEquals(10, cnt.get() );\n  }\n\n","sourceOld":"  @Test\n  public void testStreamingRequest() throws Exception {\n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n   \n    // Add some docs to the index\n    UpdateRequest req = new UpdateRequest();\n    for( int i=0; i<10; i++ ) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"\" + i );\n      doc.addField(\"cat\", \"foocat\");\n      req.add( doc );\n    }\n    req.setAction(ACTION.COMMIT, true, true );\n    req.process( server );\n   \n    // Make sure it ran OK\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set( CommonParams.FL, \"id,score,_docid_\" );\n    QueryResponse response = server.query(query);\n    assertEquals(0, response.getStatus());\n    assertEquals(10, response.getResults().getNumFound());\n   \n    // Now make sure each document gets output\n    final AtomicInteger cnt = new AtomicInteger( 0 );\n    server.queryAndStreamResponse(query, new StreamingResponseCallback() {\n\n      @Override\n      public void streamDocListInfo(long numFound, long start, Float maxScore) {\n        assertEquals(10, numFound );\n      }\n\n      @Override\n      public void streamSolrDocument(SolrDocument doc) {\n        cnt.incrementAndGet();\n        \n        // Make sure the transformer works for streaming\n        Float score = (Float)doc.get( \"score\" );\n        assertEquals( \"should have score\", new Float(1.0), score );\n      }\n     \n    });\n    assertEquals(10, cnt.get() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testStreamingRequest().mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/SolrExampleTests#testStreamingRequest().mjava","sourceNew":"  @Test\n  public void testStreamingRequest() throws Exception {\n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n   \n    // Add some docs to the index\n    UpdateRequest req = new UpdateRequest();\n    for( int i=0; i<10; i++ ) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"\" + i );\n      doc.addField(\"cat\", \"foocat\");\n      req.add( doc );\n    }\n    req.setAction(ACTION.COMMIT, true, true );\n    req.process( server );\n   \n    // Make sure it ran OK\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set( CommonParams.FL, \"id,score,_docid_\" );\n    QueryResponse response = server.query(query);\n    assertEquals(0, response.getStatus());\n    assertEquals(10, response.getResults().getNumFound());\n   \n    // Now make sure each document gets output\n    final AtomicInteger cnt = new AtomicInteger( 0 );\n    server.queryAndStreamResponse(query, new StreamingResponseCallback() {\n\n      @Override\n      public void streamDocListInfo(long numFound, long start, Float maxScore) {\n        assertEquals(10, numFound );\n      }\n\n      @Override\n      public void streamSolrDocument(SolrDocument doc) {\n        cnt.incrementAndGet();\n        \n        // Make sure the transformer works for streaming\n        Float score = (Float)doc.get( \"score\" );\n        assertEquals( \"should have score\", new Float(1.0), score );\n      }\n     \n    });\n    assertEquals(10, cnt.get() );\n  }\n\n","sourceOld":"  @Test\n  public void testStreamingRequest() throws Exception {\n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n   \n    // Add some docs to the index\n    UpdateRequest req = new UpdateRequest();\n    for( int i=0; i<10; i++ ) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"\" + i );\n      doc.addField(\"cat\", \"foocat\");\n      req.add( doc );\n    }\n    req.setAction(ACTION.COMMIT, true, true );\n    req.process( server );\n   \n    // Make sure it ran OK\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set( CommonParams.FL, \"id,score,_docid_\" );\n    QueryResponse response = server.query(query);\n    assertEquals(0, response.getStatus());\n    assertEquals(10, response.getResults().getNumFound());\n   \n    // Now make sure each document gets output\n    final AtomicInteger cnt = new AtomicInteger( 0 );\n    server.queryAndStreamResponse(query, new StreamingResponseCallback() {\n\n      @Override\n      public void streamDocListInfo(long numFound, long start, Float maxScore) {\n        assertEquals(10, numFound );\n      }\n\n      @Override\n      public void streamSolrDocument(SolrDocument doc) {\n        cnt.incrementAndGet();\n        \n        // Make sure the transformer works for streaming\n        Float score = (Float)doc.get( \"score\" );\n        assertEquals( \"should have score\", new Float(1.0), score );\n      }\n     \n    });\n    assertEquals(10, cnt.get() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e5ac9c2d15e75a72c2c461039fb6789654439323":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["00aaee1492907b0fd5421b6cf854a9eee5cd1326","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a10edefec1f3260f7f0504d545e21438a0e99bc8"],"a10edefec1f3260f7f0504d545e21438a0e99bc8":["e5ac9c2d15e75a72c2c461039fb6789654439323"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","6aedf81f068e430dec27d94310415cc6ff52731c"],"00aaee1492907b0fd5421b6cf854a9eee5cd1326":["6aedf81f068e430dec27d94310415cc6ff52731c"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["6aedf81f068e430dec27d94310415cc6ff52731c","00aaee1492907b0fd5421b6cf854a9eee5cd1326"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["a10edefec1f3260f7f0504d545e21438a0e99bc8","6aedf81f068e430dec27d94310415cc6ff52731c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["00aaee1492907b0fd5421b6cf854a9eee5cd1326"],"6aedf81f068e430dec27d94310415cc6ff52731c":["a10edefec1f3260f7f0504d545e21438a0e99bc8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["d619839baa8ce5503e496b94a9e42ad6f079293f","00aaee1492907b0fd5421b6cf854a9eee5cd1326"]},"commit2Childs":{"e5ac9c2d15e75a72c2c461039fb6789654439323":["a10edefec1f3260f7f0504d545e21438a0e99bc8"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df"],"a10edefec1f3260f7f0504d545e21438a0e99bc8":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","d619839baa8ce5503e496b94a9e42ad6f079293f","6aedf81f068e430dec27d94310415cc6ff52731c"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":[],"00aaee1492907b0fd5421b6cf854a9eee5cd1326":["c26f00b574427b55127e869b935845554afde1fa","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","a258fbb26824fd104ed795e5d9033d2d040049ee","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["2e10cb22a8bdb44339e282925a29182bb2f3174d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e5ac9c2d15e75a72c2c461039fb6789654439323","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"6aedf81f068e430dec27d94310415cc6ff52731c":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","00aaee1492907b0fd5421b6cf854a9eee5cd1326","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","d619839baa8ce5503e496b94a9e42ad6f079293f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2e10cb22a8bdb44339e282925a29182bb2f3174d":[]},"heads":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}