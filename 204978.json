{"path":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#newFieldQuery(Analyzer,String,String,boolean).mjava","commits":[{"id":"3cdb67100dc016748799a77218aa409478372d79","date":1353699950,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#newFieldQuery(Analyzer,String,String,boolean).mjava","pathOld":"/dev/null","sourceNew":"  protected Query newFieldQuery(Analyzer analyzer, String field, String queryText, boolean quoted)  throws SyntaxError {\n    // Use the analyzer to get all the tokens, and then build a TermQuery,\n    // PhraseQuery, or nothing based on the term count\n\n    TokenStream source;\n    try {\n      source = analyzer.tokenStream(field, new StringReader(queryText));\n      source.reset();\n    } catch (IOException e) {\n      throw new SyntaxError(\"Unable to initialize TokenStream to analyze query text\", e);\n    }\n    CachingTokenFilter buffer = new CachingTokenFilter(source);\n    TermToBytesRefAttribute termAtt = null;\n    PositionIncrementAttribute posIncrAtt = null;\n    int numTokens = 0;\n\n    buffer.reset();\n\n    if (buffer.hasAttribute(TermToBytesRefAttribute.class)) {\n      termAtt = buffer.getAttribute(TermToBytesRefAttribute.class);\n    }\n    if (buffer.hasAttribute(PositionIncrementAttribute.class)) {\n      posIncrAtt = buffer.getAttribute(PositionIncrementAttribute.class);\n    }\n\n    int positionCount = 0;\n    boolean severalTokensAtSamePosition = false;\n\n    boolean hasMoreTokens = false;\n    if (termAtt != null) {\n      try {\n        hasMoreTokens = buffer.incrementToken();\n        while (hasMoreTokens) {\n          numTokens++;\n          int positionIncrement = (posIncrAtt != null) ? posIncrAtt.getPositionIncrement() : 1;\n          if (positionIncrement != 0) {\n            positionCount += positionIncrement;\n          } else {\n            severalTokensAtSamePosition = true;\n          }\n          hasMoreTokens = buffer.incrementToken();\n        }\n      } catch (IOException e) {\n        // ignore\n      }\n    }\n    try {\n      // rewind the buffer stream\n      buffer.reset();\n\n      // close original stream - all tokens buffered\n      source.close();\n    }\n    catch (IOException e) {\n      throw new SyntaxError(\"Cannot close TokenStream analyzing query text\", e);\n    }\n\n    BytesRef bytes = termAtt == null ? null : termAtt.getBytesRef();\n\n    if (numTokens == 0)\n      return null;\n    else if (numTokens == 1) {\n      try {\n        boolean hasNext = buffer.incrementToken();\n        assert hasNext == true;\n        termAtt.fillBytesRef();\n      } catch (IOException e) {\n        // safe to ignore, because we know the number of tokens\n      }\n      return newTermQuery(new Term(field, BytesRef.deepCopyOf(bytes)));\n    } else {\n      if (severalTokensAtSamePosition || (!quoted && !autoGeneratePhraseQueries)) {\n        if (positionCount == 1 || (!quoted && !autoGeneratePhraseQueries)) {\n          // no phrase query:\n          BooleanQuery q = newBooleanQuery(positionCount == 1);\n\n          BooleanClause.Occur occur = positionCount > 1 && operator == AND_OPERATOR ?\n            BooleanClause.Occur.MUST : BooleanClause.Occur.SHOULD;\n\n          for (int i = 0; i < numTokens; i++) {\n            try {\n              boolean hasNext = buffer.incrementToken();\n              assert hasNext == true;\n              termAtt.fillBytesRef();\n            } catch (IOException e) {\n              // safe to ignore, because we know the number of tokens\n            }\n            Query currentQuery = newTermQuery(\n                new Term(field, BytesRef.deepCopyOf(bytes)));\n            q.add(currentQuery, occur);\n          }\n          return q;\n        }\n        else {\n          // phrase query:\n          MultiPhraseQuery mpq = newMultiPhraseQuery();\n          mpq.setSlop(phraseSlop);\n          List<Term> multiTerms = new ArrayList<Term>();\n          int position = -1;\n          for (int i = 0; i < numTokens; i++) {\n            int positionIncrement = 1;\n            try {\n              boolean hasNext = buffer.incrementToken();\n              assert hasNext == true;\n              termAtt.fillBytesRef();\n              if (posIncrAtt != null) {\n                positionIncrement = posIncrAtt.getPositionIncrement();\n              }\n            } catch (IOException e) {\n              // safe to ignore, because we know the number of tokens\n            }\n\n            if (positionIncrement > 0 && multiTerms.size() > 0) {\n              if (enablePositionIncrements) {\n                mpq.add(multiTerms.toArray(new Term[0]),position);\n              } else {\n                mpq.add(multiTerms.toArray(new Term[0]));\n              }\n              multiTerms.clear();\n            }\n            position += positionIncrement;\n            multiTerms.add(new Term(field, BytesRef.deepCopyOf(bytes)));\n          }\n          if (enablePositionIncrements) {\n            mpq.add(multiTerms.toArray(new Term[0]),position);\n          } else {\n            mpq.add(multiTerms.toArray(new Term[0]));\n          }\n          return mpq;\n        }\n      }\n      else {\n        PhraseQuery pq = newPhraseQuery();\n        pq.setSlop(phraseSlop);\n        int position = -1;\n\n        for (int i = 0; i < numTokens; i++) {\n          int positionIncrement = 1;\n\n          try {\n            boolean hasNext = buffer.incrementToken();\n            assert hasNext == true;\n            termAtt.fillBytesRef();\n            if (posIncrAtt != null) {\n              positionIncrement = posIncrAtt.getPositionIncrement();\n            }\n          } catch (IOException e) {\n            // safe to ignore, because we know the number of tokens\n          }\n\n          if (enablePositionIncrements) {\n            position += positionIncrement;\n            pq.add(new Term(field, BytesRef.deepCopyOf(bytes)),position);\n          } else {\n            pq.add(new Term(field, BytesRef.deepCopyOf(bytes)));\n          }\n        }\n        return pq;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["c83d6c4335f31cae14f625a222bc842f20073dcd","782ed6a4b4ba50ec19734fc8db4e570ee193d627"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#newFieldQuery(Analyzer,String,String,boolean).mjava","pathOld":"/dev/null","sourceNew":"  protected Query newFieldQuery(Analyzer analyzer, String field, String queryText, boolean quoted)  throws SyntaxError {\n    // Use the analyzer to get all the tokens, and then build a TermQuery,\n    // PhraseQuery, or nothing based on the term count\n\n    TokenStream source;\n    try {\n      source = analyzer.tokenStream(field, new StringReader(queryText));\n      source.reset();\n    } catch (IOException e) {\n      throw new SyntaxError(\"Unable to initialize TokenStream to analyze query text\", e);\n    }\n    CachingTokenFilter buffer = new CachingTokenFilter(source);\n    TermToBytesRefAttribute termAtt = null;\n    PositionIncrementAttribute posIncrAtt = null;\n    int numTokens = 0;\n\n    buffer.reset();\n\n    if (buffer.hasAttribute(TermToBytesRefAttribute.class)) {\n      termAtt = buffer.getAttribute(TermToBytesRefAttribute.class);\n    }\n    if (buffer.hasAttribute(PositionIncrementAttribute.class)) {\n      posIncrAtt = buffer.getAttribute(PositionIncrementAttribute.class);\n    }\n\n    int positionCount = 0;\n    boolean severalTokensAtSamePosition = false;\n\n    boolean hasMoreTokens = false;\n    if (termAtt != null) {\n      try {\n        hasMoreTokens = buffer.incrementToken();\n        while (hasMoreTokens) {\n          numTokens++;\n          int positionIncrement = (posIncrAtt != null) ? posIncrAtt.getPositionIncrement() : 1;\n          if (positionIncrement != 0) {\n            positionCount += positionIncrement;\n          } else {\n            severalTokensAtSamePosition = true;\n          }\n          hasMoreTokens = buffer.incrementToken();\n        }\n      } catch (IOException e) {\n        // ignore\n      }\n    }\n    try {\n      // rewind the buffer stream\n      buffer.reset();\n\n      // close original stream - all tokens buffered\n      source.close();\n    }\n    catch (IOException e) {\n      throw new SyntaxError(\"Cannot close TokenStream analyzing query text\", e);\n    }\n\n    BytesRef bytes = termAtt == null ? null : termAtt.getBytesRef();\n\n    if (numTokens == 0)\n      return null;\n    else if (numTokens == 1) {\n      try {\n        boolean hasNext = buffer.incrementToken();\n        assert hasNext == true;\n        termAtt.fillBytesRef();\n      } catch (IOException e) {\n        // safe to ignore, because we know the number of tokens\n      }\n      return newTermQuery(new Term(field, BytesRef.deepCopyOf(bytes)));\n    } else {\n      if (severalTokensAtSamePosition || (!quoted && !autoGeneratePhraseQueries)) {\n        if (positionCount == 1 || (!quoted && !autoGeneratePhraseQueries)) {\n          // no phrase query:\n          BooleanQuery q = newBooleanQuery(positionCount == 1);\n\n          BooleanClause.Occur occur = positionCount > 1 && operator == AND_OPERATOR ?\n            BooleanClause.Occur.MUST : BooleanClause.Occur.SHOULD;\n\n          for (int i = 0; i < numTokens; i++) {\n            try {\n              boolean hasNext = buffer.incrementToken();\n              assert hasNext == true;\n              termAtt.fillBytesRef();\n            } catch (IOException e) {\n              // safe to ignore, because we know the number of tokens\n            }\n            Query currentQuery = newTermQuery(\n                new Term(field, BytesRef.deepCopyOf(bytes)));\n            q.add(currentQuery, occur);\n          }\n          return q;\n        }\n        else {\n          // phrase query:\n          MultiPhraseQuery mpq = newMultiPhraseQuery();\n          mpq.setSlop(phraseSlop);\n          List<Term> multiTerms = new ArrayList<Term>();\n          int position = -1;\n          for (int i = 0; i < numTokens; i++) {\n            int positionIncrement = 1;\n            try {\n              boolean hasNext = buffer.incrementToken();\n              assert hasNext == true;\n              termAtt.fillBytesRef();\n              if (posIncrAtt != null) {\n                positionIncrement = posIncrAtt.getPositionIncrement();\n              }\n            } catch (IOException e) {\n              // safe to ignore, because we know the number of tokens\n            }\n\n            if (positionIncrement > 0 && multiTerms.size() > 0) {\n              if (enablePositionIncrements) {\n                mpq.add(multiTerms.toArray(new Term[0]),position);\n              } else {\n                mpq.add(multiTerms.toArray(new Term[0]));\n              }\n              multiTerms.clear();\n            }\n            position += positionIncrement;\n            multiTerms.add(new Term(field, BytesRef.deepCopyOf(bytes)));\n          }\n          if (enablePositionIncrements) {\n            mpq.add(multiTerms.toArray(new Term[0]),position);\n          } else {\n            mpq.add(multiTerms.toArray(new Term[0]));\n          }\n          return mpq;\n        }\n      }\n      else {\n        PhraseQuery pq = newPhraseQuery();\n        pq.setSlop(phraseSlop);\n        int position = -1;\n\n        for (int i = 0; i < numTokens; i++) {\n          int positionIncrement = 1;\n\n          try {\n            boolean hasNext = buffer.incrementToken();\n            assert hasNext == true;\n            termAtt.fillBytesRef();\n            if (posIncrAtt != null) {\n              positionIncrement = posIncrAtt.getPositionIncrement();\n            }\n          } catch (IOException e) {\n            // safe to ignore, because we know the number of tokens\n          }\n\n          if (enablePositionIncrements) {\n            position += positionIncrement;\n            pq.add(new Term(field, BytesRef.deepCopyOf(bytes)),position);\n          } else {\n            pq.add(new Term(field, BytesRef.deepCopyOf(bytes)));\n          }\n        }\n        return pq;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c83d6c4335f31cae14f625a222bc842f20073dcd","date":1373306148,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#newFieldQuery(Analyzer,String,String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#newFieldQuery(Analyzer,String,String,boolean).mjava","sourceNew":"  protected Query newFieldQuery(Analyzer analyzer, String field, String queryText, boolean quoted)  throws SyntaxError {\n    // Use the analyzer to get all the tokens, and then build a TermQuery,\n    // PhraseQuery, or nothing based on the term count\n\n    TokenStream source;\n    try {\n      source = analyzer.tokenStream(field, queryText);\n      source.reset();\n    } catch (IOException e) {\n      throw new SyntaxError(\"Unable to initialize TokenStream to analyze query text\", e);\n    }\n    CachingTokenFilter buffer = new CachingTokenFilter(source);\n    TermToBytesRefAttribute termAtt = null;\n    PositionIncrementAttribute posIncrAtt = null;\n    int numTokens = 0;\n\n    buffer.reset();\n\n    if (buffer.hasAttribute(TermToBytesRefAttribute.class)) {\n      termAtt = buffer.getAttribute(TermToBytesRefAttribute.class);\n    }\n    if (buffer.hasAttribute(PositionIncrementAttribute.class)) {\n      posIncrAtt = buffer.getAttribute(PositionIncrementAttribute.class);\n    }\n\n    int positionCount = 0;\n    boolean severalTokensAtSamePosition = false;\n\n    boolean hasMoreTokens = false;\n    if (termAtt != null) {\n      try {\n        hasMoreTokens = buffer.incrementToken();\n        while (hasMoreTokens) {\n          numTokens++;\n          int positionIncrement = (posIncrAtt != null) ? posIncrAtt.getPositionIncrement() : 1;\n          if (positionIncrement != 0) {\n            positionCount += positionIncrement;\n          } else {\n            severalTokensAtSamePosition = true;\n          }\n          hasMoreTokens = buffer.incrementToken();\n        }\n      } catch (IOException e) {\n        // ignore\n      }\n    }\n    try {\n      // rewind the buffer stream\n      buffer.reset();\n\n      // close original stream - all tokens buffered\n      source.close();\n    }\n    catch (IOException e) {\n      throw new SyntaxError(\"Cannot close TokenStream analyzing query text\", e);\n    }\n\n    BytesRef bytes = termAtt == null ? null : termAtt.getBytesRef();\n\n    if (numTokens == 0)\n      return null;\n    else if (numTokens == 1) {\n      try {\n        boolean hasNext = buffer.incrementToken();\n        assert hasNext == true;\n        termAtt.fillBytesRef();\n      } catch (IOException e) {\n        // safe to ignore, because we know the number of tokens\n      }\n      return newTermQuery(new Term(field, BytesRef.deepCopyOf(bytes)));\n    } else {\n      if (severalTokensAtSamePosition || (!quoted && !autoGeneratePhraseQueries)) {\n        if (positionCount == 1 || (!quoted && !autoGeneratePhraseQueries)) {\n          // no phrase query:\n          BooleanQuery q = newBooleanQuery(positionCount == 1);\n\n          BooleanClause.Occur occur = positionCount > 1 && operator == AND_OPERATOR ?\n            BooleanClause.Occur.MUST : BooleanClause.Occur.SHOULD;\n\n          for (int i = 0; i < numTokens; i++) {\n            try {\n              boolean hasNext = buffer.incrementToken();\n              assert hasNext == true;\n              termAtt.fillBytesRef();\n            } catch (IOException e) {\n              // safe to ignore, because we know the number of tokens\n            }\n            Query currentQuery = newTermQuery(\n                new Term(field, BytesRef.deepCopyOf(bytes)));\n            q.add(currentQuery, occur);\n          }\n          return q;\n        }\n        else {\n          // phrase query:\n          MultiPhraseQuery mpq = newMultiPhraseQuery();\n          mpq.setSlop(phraseSlop);\n          List<Term> multiTerms = new ArrayList<Term>();\n          int position = -1;\n          for (int i = 0; i < numTokens; i++) {\n            int positionIncrement = 1;\n            try {\n              boolean hasNext = buffer.incrementToken();\n              assert hasNext == true;\n              termAtt.fillBytesRef();\n              if (posIncrAtt != null) {\n                positionIncrement = posIncrAtt.getPositionIncrement();\n              }\n            } catch (IOException e) {\n              // safe to ignore, because we know the number of tokens\n            }\n\n            if (positionIncrement > 0 && multiTerms.size() > 0) {\n              if (enablePositionIncrements) {\n                mpq.add(multiTerms.toArray(new Term[0]),position);\n              } else {\n                mpq.add(multiTerms.toArray(new Term[0]));\n              }\n              multiTerms.clear();\n            }\n            position += positionIncrement;\n            multiTerms.add(new Term(field, BytesRef.deepCopyOf(bytes)));\n          }\n          if (enablePositionIncrements) {\n            mpq.add(multiTerms.toArray(new Term[0]),position);\n          } else {\n            mpq.add(multiTerms.toArray(new Term[0]));\n          }\n          return mpq;\n        }\n      }\n      else {\n        PhraseQuery pq = newPhraseQuery();\n        pq.setSlop(phraseSlop);\n        int position = -1;\n\n        for (int i = 0; i < numTokens; i++) {\n          int positionIncrement = 1;\n\n          try {\n            boolean hasNext = buffer.incrementToken();\n            assert hasNext == true;\n            termAtt.fillBytesRef();\n            if (posIncrAtt != null) {\n              positionIncrement = posIncrAtt.getPositionIncrement();\n            }\n          } catch (IOException e) {\n            // safe to ignore, because we know the number of tokens\n          }\n\n          if (enablePositionIncrements) {\n            position += positionIncrement;\n            pq.add(new Term(field, BytesRef.deepCopyOf(bytes)),position);\n          } else {\n            pq.add(new Term(field, BytesRef.deepCopyOf(bytes)));\n          }\n        }\n        return pq;\n      }\n    }\n  }\n\n","sourceOld":"  protected Query newFieldQuery(Analyzer analyzer, String field, String queryText, boolean quoted)  throws SyntaxError {\n    // Use the analyzer to get all the tokens, and then build a TermQuery,\n    // PhraseQuery, or nothing based on the term count\n\n    TokenStream source;\n    try {\n      source = analyzer.tokenStream(field, new StringReader(queryText));\n      source.reset();\n    } catch (IOException e) {\n      throw new SyntaxError(\"Unable to initialize TokenStream to analyze query text\", e);\n    }\n    CachingTokenFilter buffer = new CachingTokenFilter(source);\n    TermToBytesRefAttribute termAtt = null;\n    PositionIncrementAttribute posIncrAtt = null;\n    int numTokens = 0;\n\n    buffer.reset();\n\n    if (buffer.hasAttribute(TermToBytesRefAttribute.class)) {\n      termAtt = buffer.getAttribute(TermToBytesRefAttribute.class);\n    }\n    if (buffer.hasAttribute(PositionIncrementAttribute.class)) {\n      posIncrAtt = buffer.getAttribute(PositionIncrementAttribute.class);\n    }\n\n    int positionCount = 0;\n    boolean severalTokensAtSamePosition = false;\n\n    boolean hasMoreTokens = false;\n    if (termAtt != null) {\n      try {\n        hasMoreTokens = buffer.incrementToken();\n        while (hasMoreTokens) {\n          numTokens++;\n          int positionIncrement = (posIncrAtt != null) ? posIncrAtt.getPositionIncrement() : 1;\n          if (positionIncrement != 0) {\n            positionCount += positionIncrement;\n          } else {\n            severalTokensAtSamePosition = true;\n          }\n          hasMoreTokens = buffer.incrementToken();\n        }\n      } catch (IOException e) {\n        // ignore\n      }\n    }\n    try {\n      // rewind the buffer stream\n      buffer.reset();\n\n      // close original stream - all tokens buffered\n      source.close();\n    }\n    catch (IOException e) {\n      throw new SyntaxError(\"Cannot close TokenStream analyzing query text\", e);\n    }\n\n    BytesRef bytes = termAtt == null ? null : termAtt.getBytesRef();\n\n    if (numTokens == 0)\n      return null;\n    else if (numTokens == 1) {\n      try {\n        boolean hasNext = buffer.incrementToken();\n        assert hasNext == true;\n        termAtt.fillBytesRef();\n      } catch (IOException e) {\n        // safe to ignore, because we know the number of tokens\n      }\n      return newTermQuery(new Term(field, BytesRef.deepCopyOf(bytes)));\n    } else {\n      if (severalTokensAtSamePosition || (!quoted && !autoGeneratePhraseQueries)) {\n        if (positionCount == 1 || (!quoted && !autoGeneratePhraseQueries)) {\n          // no phrase query:\n          BooleanQuery q = newBooleanQuery(positionCount == 1);\n\n          BooleanClause.Occur occur = positionCount > 1 && operator == AND_OPERATOR ?\n            BooleanClause.Occur.MUST : BooleanClause.Occur.SHOULD;\n\n          for (int i = 0; i < numTokens; i++) {\n            try {\n              boolean hasNext = buffer.incrementToken();\n              assert hasNext == true;\n              termAtt.fillBytesRef();\n            } catch (IOException e) {\n              // safe to ignore, because we know the number of tokens\n            }\n            Query currentQuery = newTermQuery(\n                new Term(field, BytesRef.deepCopyOf(bytes)));\n            q.add(currentQuery, occur);\n          }\n          return q;\n        }\n        else {\n          // phrase query:\n          MultiPhraseQuery mpq = newMultiPhraseQuery();\n          mpq.setSlop(phraseSlop);\n          List<Term> multiTerms = new ArrayList<Term>();\n          int position = -1;\n          for (int i = 0; i < numTokens; i++) {\n            int positionIncrement = 1;\n            try {\n              boolean hasNext = buffer.incrementToken();\n              assert hasNext == true;\n              termAtt.fillBytesRef();\n              if (posIncrAtt != null) {\n                positionIncrement = posIncrAtt.getPositionIncrement();\n              }\n            } catch (IOException e) {\n              // safe to ignore, because we know the number of tokens\n            }\n\n            if (positionIncrement > 0 && multiTerms.size() > 0) {\n              if (enablePositionIncrements) {\n                mpq.add(multiTerms.toArray(new Term[0]),position);\n              } else {\n                mpq.add(multiTerms.toArray(new Term[0]));\n              }\n              multiTerms.clear();\n            }\n            position += positionIncrement;\n            multiTerms.add(new Term(field, BytesRef.deepCopyOf(bytes)));\n          }\n          if (enablePositionIncrements) {\n            mpq.add(multiTerms.toArray(new Term[0]),position);\n          } else {\n            mpq.add(multiTerms.toArray(new Term[0]));\n          }\n          return mpq;\n        }\n      }\n      else {\n        PhraseQuery pq = newPhraseQuery();\n        pq.setSlop(phraseSlop);\n        int position = -1;\n\n        for (int i = 0; i < numTokens; i++) {\n          int positionIncrement = 1;\n\n          try {\n            boolean hasNext = buffer.incrementToken();\n            assert hasNext == true;\n            termAtt.fillBytesRef();\n            if (posIncrAtt != null) {\n              positionIncrement = posIncrAtt.getPositionIncrement();\n            }\n          } catch (IOException e) {\n            // safe to ignore, because we know the number of tokens\n          }\n\n          if (enablePositionIncrements) {\n            position += positionIncrement;\n            pq.add(new Term(field, BytesRef.deepCopyOf(bytes)),position);\n          } else {\n            pq.add(new Term(field, BytesRef.deepCopyOf(bytes)));\n          }\n        }\n        return pq;\n      }\n    }\n  }\n\n","bugFix":["3cdb67100dc016748799a77218aa409478372d79"],"bugIntro":["782ed6a4b4ba50ec19734fc8db4e570ee193d627"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#newFieldQuery(Analyzer,String,String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#newFieldQuery(Analyzer,String,String,boolean).mjava","sourceNew":"  protected Query newFieldQuery(Analyzer analyzer, String field, String queryText, boolean quoted)  throws SyntaxError {\n    // Use the analyzer to get all the tokens, and then build a TermQuery,\n    // PhraseQuery, or nothing based on the term count\n\n    TokenStream source;\n    try {\n      source = analyzer.tokenStream(field, queryText);\n      source.reset();\n    } catch (IOException e) {\n      throw new SyntaxError(\"Unable to initialize TokenStream to analyze query text\", e);\n    }\n    CachingTokenFilter buffer = new CachingTokenFilter(source);\n    TermToBytesRefAttribute termAtt = null;\n    PositionIncrementAttribute posIncrAtt = null;\n    int numTokens = 0;\n\n    buffer.reset();\n\n    if (buffer.hasAttribute(TermToBytesRefAttribute.class)) {\n      termAtt = buffer.getAttribute(TermToBytesRefAttribute.class);\n    }\n    if (buffer.hasAttribute(PositionIncrementAttribute.class)) {\n      posIncrAtt = buffer.getAttribute(PositionIncrementAttribute.class);\n    }\n\n    int positionCount = 0;\n    boolean severalTokensAtSamePosition = false;\n\n    boolean hasMoreTokens = false;\n    if (termAtt != null) {\n      try {\n        hasMoreTokens = buffer.incrementToken();\n        while (hasMoreTokens) {\n          numTokens++;\n          int positionIncrement = (posIncrAtt != null) ? posIncrAtt.getPositionIncrement() : 1;\n          if (positionIncrement != 0) {\n            positionCount += positionIncrement;\n          } else {\n            severalTokensAtSamePosition = true;\n          }\n          hasMoreTokens = buffer.incrementToken();\n        }\n      } catch (IOException e) {\n        // ignore\n      }\n    }\n    try {\n      // rewind the buffer stream\n      buffer.reset();\n\n      // close original stream - all tokens buffered\n      source.close();\n    }\n    catch (IOException e) {\n      throw new SyntaxError(\"Cannot close TokenStream analyzing query text\", e);\n    }\n\n    BytesRef bytes = termAtt == null ? null : termAtt.getBytesRef();\n\n    if (numTokens == 0)\n      return null;\n    else if (numTokens == 1) {\n      try {\n        boolean hasNext = buffer.incrementToken();\n        assert hasNext == true;\n        termAtt.fillBytesRef();\n      } catch (IOException e) {\n        // safe to ignore, because we know the number of tokens\n      }\n      return newTermQuery(new Term(field, BytesRef.deepCopyOf(bytes)));\n    } else {\n      if (severalTokensAtSamePosition || (!quoted && !autoGeneratePhraseQueries)) {\n        if (positionCount == 1 || (!quoted && !autoGeneratePhraseQueries)) {\n          // no phrase query:\n          BooleanQuery q = newBooleanQuery(positionCount == 1);\n\n          BooleanClause.Occur occur = positionCount > 1 && operator == AND_OPERATOR ?\n            BooleanClause.Occur.MUST : BooleanClause.Occur.SHOULD;\n\n          for (int i = 0; i < numTokens; i++) {\n            try {\n              boolean hasNext = buffer.incrementToken();\n              assert hasNext == true;\n              termAtt.fillBytesRef();\n            } catch (IOException e) {\n              // safe to ignore, because we know the number of tokens\n            }\n            Query currentQuery = newTermQuery(\n                new Term(field, BytesRef.deepCopyOf(bytes)));\n            q.add(currentQuery, occur);\n          }\n          return q;\n        }\n        else {\n          // phrase query:\n          MultiPhraseQuery mpq = newMultiPhraseQuery();\n          mpq.setSlop(phraseSlop);\n          List<Term> multiTerms = new ArrayList<Term>();\n          int position = -1;\n          for (int i = 0; i < numTokens; i++) {\n            int positionIncrement = 1;\n            try {\n              boolean hasNext = buffer.incrementToken();\n              assert hasNext == true;\n              termAtt.fillBytesRef();\n              if (posIncrAtt != null) {\n                positionIncrement = posIncrAtt.getPositionIncrement();\n              }\n            } catch (IOException e) {\n              // safe to ignore, because we know the number of tokens\n            }\n\n            if (positionIncrement > 0 && multiTerms.size() > 0) {\n              if (enablePositionIncrements) {\n                mpq.add(multiTerms.toArray(new Term[0]),position);\n              } else {\n                mpq.add(multiTerms.toArray(new Term[0]));\n              }\n              multiTerms.clear();\n            }\n            position += positionIncrement;\n            multiTerms.add(new Term(field, BytesRef.deepCopyOf(bytes)));\n          }\n          if (enablePositionIncrements) {\n            mpq.add(multiTerms.toArray(new Term[0]),position);\n          } else {\n            mpq.add(multiTerms.toArray(new Term[0]));\n          }\n          return mpq;\n        }\n      }\n      else {\n        PhraseQuery pq = newPhraseQuery();\n        pq.setSlop(phraseSlop);\n        int position = -1;\n\n        for (int i = 0; i < numTokens; i++) {\n          int positionIncrement = 1;\n\n          try {\n            boolean hasNext = buffer.incrementToken();\n            assert hasNext == true;\n            termAtt.fillBytesRef();\n            if (posIncrAtt != null) {\n              positionIncrement = posIncrAtt.getPositionIncrement();\n            }\n          } catch (IOException e) {\n            // safe to ignore, because we know the number of tokens\n          }\n\n          if (enablePositionIncrements) {\n            position += positionIncrement;\n            pq.add(new Term(field, BytesRef.deepCopyOf(bytes)),position);\n          } else {\n            pq.add(new Term(field, BytesRef.deepCopyOf(bytes)));\n          }\n        }\n        return pq;\n      }\n    }\n  }\n\n","sourceOld":"  protected Query newFieldQuery(Analyzer analyzer, String field, String queryText, boolean quoted)  throws SyntaxError {\n    // Use the analyzer to get all the tokens, and then build a TermQuery,\n    // PhraseQuery, or nothing based on the term count\n\n    TokenStream source;\n    try {\n      source = analyzer.tokenStream(field, new StringReader(queryText));\n      source.reset();\n    } catch (IOException e) {\n      throw new SyntaxError(\"Unable to initialize TokenStream to analyze query text\", e);\n    }\n    CachingTokenFilter buffer = new CachingTokenFilter(source);\n    TermToBytesRefAttribute termAtt = null;\n    PositionIncrementAttribute posIncrAtt = null;\n    int numTokens = 0;\n\n    buffer.reset();\n\n    if (buffer.hasAttribute(TermToBytesRefAttribute.class)) {\n      termAtt = buffer.getAttribute(TermToBytesRefAttribute.class);\n    }\n    if (buffer.hasAttribute(PositionIncrementAttribute.class)) {\n      posIncrAtt = buffer.getAttribute(PositionIncrementAttribute.class);\n    }\n\n    int positionCount = 0;\n    boolean severalTokensAtSamePosition = false;\n\n    boolean hasMoreTokens = false;\n    if (termAtt != null) {\n      try {\n        hasMoreTokens = buffer.incrementToken();\n        while (hasMoreTokens) {\n          numTokens++;\n          int positionIncrement = (posIncrAtt != null) ? posIncrAtt.getPositionIncrement() : 1;\n          if (positionIncrement != 0) {\n            positionCount += positionIncrement;\n          } else {\n            severalTokensAtSamePosition = true;\n          }\n          hasMoreTokens = buffer.incrementToken();\n        }\n      } catch (IOException e) {\n        // ignore\n      }\n    }\n    try {\n      // rewind the buffer stream\n      buffer.reset();\n\n      // close original stream - all tokens buffered\n      source.close();\n    }\n    catch (IOException e) {\n      throw new SyntaxError(\"Cannot close TokenStream analyzing query text\", e);\n    }\n\n    BytesRef bytes = termAtt == null ? null : termAtt.getBytesRef();\n\n    if (numTokens == 0)\n      return null;\n    else if (numTokens == 1) {\n      try {\n        boolean hasNext = buffer.incrementToken();\n        assert hasNext == true;\n        termAtt.fillBytesRef();\n      } catch (IOException e) {\n        // safe to ignore, because we know the number of tokens\n      }\n      return newTermQuery(new Term(field, BytesRef.deepCopyOf(bytes)));\n    } else {\n      if (severalTokensAtSamePosition || (!quoted && !autoGeneratePhraseQueries)) {\n        if (positionCount == 1 || (!quoted && !autoGeneratePhraseQueries)) {\n          // no phrase query:\n          BooleanQuery q = newBooleanQuery(positionCount == 1);\n\n          BooleanClause.Occur occur = positionCount > 1 && operator == AND_OPERATOR ?\n            BooleanClause.Occur.MUST : BooleanClause.Occur.SHOULD;\n\n          for (int i = 0; i < numTokens; i++) {\n            try {\n              boolean hasNext = buffer.incrementToken();\n              assert hasNext == true;\n              termAtt.fillBytesRef();\n            } catch (IOException e) {\n              // safe to ignore, because we know the number of tokens\n            }\n            Query currentQuery = newTermQuery(\n                new Term(field, BytesRef.deepCopyOf(bytes)));\n            q.add(currentQuery, occur);\n          }\n          return q;\n        }\n        else {\n          // phrase query:\n          MultiPhraseQuery mpq = newMultiPhraseQuery();\n          mpq.setSlop(phraseSlop);\n          List<Term> multiTerms = new ArrayList<Term>();\n          int position = -1;\n          for (int i = 0; i < numTokens; i++) {\n            int positionIncrement = 1;\n            try {\n              boolean hasNext = buffer.incrementToken();\n              assert hasNext == true;\n              termAtt.fillBytesRef();\n              if (posIncrAtt != null) {\n                positionIncrement = posIncrAtt.getPositionIncrement();\n              }\n            } catch (IOException e) {\n              // safe to ignore, because we know the number of tokens\n            }\n\n            if (positionIncrement > 0 && multiTerms.size() > 0) {\n              if (enablePositionIncrements) {\n                mpq.add(multiTerms.toArray(new Term[0]),position);\n              } else {\n                mpq.add(multiTerms.toArray(new Term[0]));\n              }\n              multiTerms.clear();\n            }\n            position += positionIncrement;\n            multiTerms.add(new Term(field, BytesRef.deepCopyOf(bytes)));\n          }\n          if (enablePositionIncrements) {\n            mpq.add(multiTerms.toArray(new Term[0]),position);\n          } else {\n            mpq.add(multiTerms.toArray(new Term[0]));\n          }\n          return mpq;\n        }\n      }\n      else {\n        PhraseQuery pq = newPhraseQuery();\n        pq.setSlop(phraseSlop);\n        int position = -1;\n\n        for (int i = 0; i < numTokens; i++) {\n          int positionIncrement = 1;\n\n          try {\n            boolean hasNext = buffer.incrementToken();\n            assert hasNext == true;\n            termAtt.fillBytesRef();\n            if (posIncrAtt != null) {\n              positionIncrement = posIncrAtt.getPositionIncrement();\n            }\n          } catch (IOException e) {\n            // safe to ignore, because we know the number of tokens\n          }\n\n          if (enablePositionIncrements) {\n            position += positionIncrement;\n            pq.add(new Term(field, BytesRef.deepCopyOf(bytes)),position);\n          } else {\n            pq.add(new Term(field, BytesRef.deepCopyOf(bytes)));\n          }\n        }\n        return pq;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"782ed6a4b4ba50ec19734fc8db4e570ee193d627","date":1381127065,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#newFieldQuery(Analyzer,String,String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#newFieldQuery(Analyzer,String,String,boolean).mjava","sourceNew":"  protected Query newFieldQuery(Analyzer analyzer, String field, String queryText, boolean quoted)  throws SyntaxError {\n    // Use the analyzer to get all the tokens, and then build a TermQuery,\n    // PhraseQuery, or nothing based on the term count\n\n    CachingTokenFilter buffer = null;\n    TermToBytesRefAttribute termAtt = null;\n    PositionIncrementAttribute posIncrAtt = null;\n    int numTokens = 0;\n    int positionCount = 0;\n    boolean severalTokensAtSamePosition = false;\n    \n    try (TokenStream source = analyzer.tokenStream(field, queryText)) {\n      source.reset();\n      buffer = new CachingTokenFilter(source);\n      buffer.reset();\n\n      if (buffer.hasAttribute(TermToBytesRefAttribute.class)) {\n        termAtt = buffer.getAttribute(TermToBytesRefAttribute.class);\n      }\n      if (buffer.hasAttribute(PositionIncrementAttribute.class)) {\n        posIncrAtt = buffer.getAttribute(PositionIncrementAttribute.class);\n      }\n\n      boolean hasMoreTokens = false;\n      if (termAtt != null) {\n        try {\n          hasMoreTokens = buffer.incrementToken();\n          while (hasMoreTokens) {\n            numTokens++;\n            int positionIncrement = (posIncrAtt != null) ? posIncrAtt.getPositionIncrement() : 1;\n            if (positionIncrement != 0) {\n              positionCount += positionIncrement;\n            } else {\n              severalTokensAtSamePosition = true;\n            }\n            hasMoreTokens = buffer.incrementToken();\n          }\n        } catch (IOException e) {\n          // ignore\n        }\n      }\n    } catch (IOException e) {\n      throw new SyntaxError(\"Error analyzing query text\", e);\n    }\n    \n    // rewind the buffer stream\n    buffer.reset();\n\n    BytesRef bytes = termAtt == null ? null : termAtt.getBytesRef();\n\n    if (numTokens == 0)\n      return null;\n    else if (numTokens == 1) {\n      try {\n        boolean hasNext = buffer.incrementToken();\n        assert hasNext == true;\n        termAtt.fillBytesRef();\n      } catch (IOException e) {\n        // safe to ignore, because we know the number of tokens\n      }\n      return newTermQuery(new Term(field, BytesRef.deepCopyOf(bytes)));\n    } else {\n      if (severalTokensAtSamePosition || (!quoted && !autoGeneratePhraseQueries)) {\n        if (positionCount == 1 || (!quoted && !autoGeneratePhraseQueries)) {\n          // no phrase query:\n          BooleanQuery q = newBooleanQuery(positionCount == 1);\n\n          BooleanClause.Occur occur = positionCount > 1 && operator == AND_OPERATOR ?\n            BooleanClause.Occur.MUST : BooleanClause.Occur.SHOULD;\n\n          for (int i = 0; i < numTokens; i++) {\n            try {\n              boolean hasNext = buffer.incrementToken();\n              assert hasNext == true;\n              termAtt.fillBytesRef();\n            } catch (IOException e) {\n              // safe to ignore, because we know the number of tokens\n            }\n            Query currentQuery = newTermQuery(\n                new Term(field, BytesRef.deepCopyOf(bytes)));\n            q.add(currentQuery, occur);\n          }\n          return q;\n        }\n        else {\n          // phrase query:\n          MultiPhraseQuery mpq = newMultiPhraseQuery();\n          mpq.setSlop(phraseSlop);\n          List<Term> multiTerms = new ArrayList<Term>();\n          int position = -1;\n          for (int i = 0; i < numTokens; i++) {\n            int positionIncrement = 1;\n            try {\n              boolean hasNext = buffer.incrementToken();\n              assert hasNext == true;\n              termAtt.fillBytesRef();\n              if (posIncrAtt != null) {\n                positionIncrement = posIncrAtt.getPositionIncrement();\n              }\n            } catch (IOException e) {\n              // safe to ignore, because we know the number of tokens\n            }\n\n            if (positionIncrement > 0 && multiTerms.size() > 0) {\n              if (enablePositionIncrements) {\n                mpq.add(multiTerms.toArray(new Term[0]),position);\n              } else {\n                mpq.add(multiTerms.toArray(new Term[0]));\n              }\n              multiTerms.clear();\n            }\n            position += positionIncrement;\n            multiTerms.add(new Term(field, BytesRef.deepCopyOf(bytes)));\n          }\n          if (enablePositionIncrements) {\n            mpq.add(multiTerms.toArray(new Term[0]),position);\n          } else {\n            mpq.add(multiTerms.toArray(new Term[0]));\n          }\n          return mpq;\n        }\n      }\n      else {\n        PhraseQuery pq = newPhraseQuery();\n        pq.setSlop(phraseSlop);\n        int position = -1;\n\n        for (int i = 0; i < numTokens; i++) {\n          int positionIncrement = 1;\n\n          try {\n            boolean hasNext = buffer.incrementToken();\n            assert hasNext == true;\n            termAtt.fillBytesRef();\n            if (posIncrAtt != null) {\n              positionIncrement = posIncrAtt.getPositionIncrement();\n            }\n          } catch (IOException e) {\n            // safe to ignore, because we know the number of tokens\n          }\n\n          if (enablePositionIncrements) {\n            position += positionIncrement;\n            pq.add(new Term(field, BytesRef.deepCopyOf(bytes)),position);\n          } else {\n            pq.add(new Term(field, BytesRef.deepCopyOf(bytes)));\n          }\n        }\n        return pq;\n      }\n    }\n  }\n\n","sourceOld":"  protected Query newFieldQuery(Analyzer analyzer, String field, String queryText, boolean quoted)  throws SyntaxError {\n    // Use the analyzer to get all the tokens, and then build a TermQuery,\n    // PhraseQuery, or nothing based on the term count\n\n    TokenStream source;\n    try {\n      source = analyzer.tokenStream(field, queryText);\n      source.reset();\n    } catch (IOException e) {\n      throw new SyntaxError(\"Unable to initialize TokenStream to analyze query text\", e);\n    }\n    CachingTokenFilter buffer = new CachingTokenFilter(source);\n    TermToBytesRefAttribute termAtt = null;\n    PositionIncrementAttribute posIncrAtt = null;\n    int numTokens = 0;\n\n    buffer.reset();\n\n    if (buffer.hasAttribute(TermToBytesRefAttribute.class)) {\n      termAtt = buffer.getAttribute(TermToBytesRefAttribute.class);\n    }\n    if (buffer.hasAttribute(PositionIncrementAttribute.class)) {\n      posIncrAtt = buffer.getAttribute(PositionIncrementAttribute.class);\n    }\n\n    int positionCount = 0;\n    boolean severalTokensAtSamePosition = false;\n\n    boolean hasMoreTokens = false;\n    if (termAtt != null) {\n      try {\n        hasMoreTokens = buffer.incrementToken();\n        while (hasMoreTokens) {\n          numTokens++;\n          int positionIncrement = (posIncrAtt != null) ? posIncrAtt.getPositionIncrement() : 1;\n          if (positionIncrement != 0) {\n            positionCount += positionIncrement;\n          } else {\n            severalTokensAtSamePosition = true;\n          }\n          hasMoreTokens = buffer.incrementToken();\n        }\n      } catch (IOException e) {\n        // ignore\n      }\n    }\n    try {\n      // rewind the buffer stream\n      buffer.reset();\n\n      // close original stream - all tokens buffered\n      source.close();\n    }\n    catch (IOException e) {\n      throw new SyntaxError(\"Cannot close TokenStream analyzing query text\", e);\n    }\n\n    BytesRef bytes = termAtt == null ? null : termAtt.getBytesRef();\n\n    if (numTokens == 0)\n      return null;\n    else if (numTokens == 1) {\n      try {\n        boolean hasNext = buffer.incrementToken();\n        assert hasNext == true;\n        termAtt.fillBytesRef();\n      } catch (IOException e) {\n        // safe to ignore, because we know the number of tokens\n      }\n      return newTermQuery(new Term(field, BytesRef.deepCopyOf(bytes)));\n    } else {\n      if (severalTokensAtSamePosition || (!quoted && !autoGeneratePhraseQueries)) {\n        if (positionCount == 1 || (!quoted && !autoGeneratePhraseQueries)) {\n          // no phrase query:\n          BooleanQuery q = newBooleanQuery(positionCount == 1);\n\n          BooleanClause.Occur occur = positionCount > 1 && operator == AND_OPERATOR ?\n            BooleanClause.Occur.MUST : BooleanClause.Occur.SHOULD;\n\n          for (int i = 0; i < numTokens; i++) {\n            try {\n              boolean hasNext = buffer.incrementToken();\n              assert hasNext == true;\n              termAtt.fillBytesRef();\n            } catch (IOException e) {\n              // safe to ignore, because we know the number of tokens\n            }\n            Query currentQuery = newTermQuery(\n                new Term(field, BytesRef.deepCopyOf(bytes)));\n            q.add(currentQuery, occur);\n          }\n          return q;\n        }\n        else {\n          // phrase query:\n          MultiPhraseQuery mpq = newMultiPhraseQuery();\n          mpq.setSlop(phraseSlop);\n          List<Term> multiTerms = new ArrayList<Term>();\n          int position = -1;\n          for (int i = 0; i < numTokens; i++) {\n            int positionIncrement = 1;\n            try {\n              boolean hasNext = buffer.incrementToken();\n              assert hasNext == true;\n              termAtt.fillBytesRef();\n              if (posIncrAtt != null) {\n                positionIncrement = posIncrAtt.getPositionIncrement();\n              }\n            } catch (IOException e) {\n              // safe to ignore, because we know the number of tokens\n            }\n\n            if (positionIncrement > 0 && multiTerms.size() > 0) {\n              if (enablePositionIncrements) {\n                mpq.add(multiTerms.toArray(new Term[0]),position);\n              } else {\n                mpq.add(multiTerms.toArray(new Term[0]));\n              }\n              multiTerms.clear();\n            }\n            position += positionIncrement;\n            multiTerms.add(new Term(field, BytesRef.deepCopyOf(bytes)));\n          }\n          if (enablePositionIncrements) {\n            mpq.add(multiTerms.toArray(new Term[0]),position);\n          } else {\n            mpq.add(multiTerms.toArray(new Term[0]));\n          }\n          return mpq;\n        }\n      }\n      else {\n        PhraseQuery pq = newPhraseQuery();\n        pq.setSlop(phraseSlop);\n        int position = -1;\n\n        for (int i = 0; i < numTokens; i++) {\n          int positionIncrement = 1;\n\n          try {\n            boolean hasNext = buffer.incrementToken();\n            assert hasNext == true;\n            termAtt.fillBytesRef();\n            if (posIncrAtt != null) {\n              positionIncrement = posIncrAtt.getPositionIncrement();\n            }\n          } catch (IOException e) {\n            // safe to ignore, because we know the number of tokens\n          }\n\n          if (enablePositionIncrements) {\n            position += positionIncrement;\n            pq.add(new Term(field, BytesRef.deepCopyOf(bytes)),position);\n          } else {\n            pq.add(new Term(field, BytesRef.deepCopyOf(bytes)));\n          }\n        }\n        return pq;\n      }\n    }\n  }\n\n","bugFix":["3cdb67100dc016748799a77218aa409478372d79","c83d6c4335f31cae14f625a222bc842f20073dcd"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c1c1dd5dce93e4fa48898dabc7e012560acda425","date":1381334364,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#newFieldQuery(Analyzer,String,String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#newFieldQuery(Analyzer,String,String,boolean).mjava","sourceNew":"  protected Query newFieldQuery(Analyzer analyzer, String field, String queryText, boolean quoted)  throws SyntaxError {\n    BooleanClause.Occur occur = operator == Operator.AND ? BooleanClause.Occur.MUST : BooleanClause.Occur.SHOULD;\n    return createFieldQuery(analyzer, occur, field, queryText, quoted || autoGeneratePhraseQueries, phraseSlop);\n  }\n\n","sourceOld":"  protected Query newFieldQuery(Analyzer analyzer, String field, String queryText, boolean quoted)  throws SyntaxError {\n    // Use the analyzer to get all the tokens, and then build a TermQuery,\n    // PhraseQuery, or nothing based on the term count\n\n    CachingTokenFilter buffer = null;\n    TermToBytesRefAttribute termAtt = null;\n    PositionIncrementAttribute posIncrAtt = null;\n    int numTokens = 0;\n    int positionCount = 0;\n    boolean severalTokensAtSamePosition = false;\n    \n    try (TokenStream source = analyzer.tokenStream(field, queryText)) {\n      source.reset();\n      buffer = new CachingTokenFilter(source);\n      buffer.reset();\n\n      if (buffer.hasAttribute(TermToBytesRefAttribute.class)) {\n        termAtt = buffer.getAttribute(TermToBytesRefAttribute.class);\n      }\n      if (buffer.hasAttribute(PositionIncrementAttribute.class)) {\n        posIncrAtt = buffer.getAttribute(PositionIncrementAttribute.class);\n      }\n\n      boolean hasMoreTokens = false;\n      if (termAtt != null) {\n        try {\n          hasMoreTokens = buffer.incrementToken();\n          while (hasMoreTokens) {\n            numTokens++;\n            int positionIncrement = (posIncrAtt != null) ? posIncrAtt.getPositionIncrement() : 1;\n            if (positionIncrement != 0) {\n              positionCount += positionIncrement;\n            } else {\n              severalTokensAtSamePosition = true;\n            }\n            hasMoreTokens = buffer.incrementToken();\n          }\n        } catch (IOException e) {\n          // ignore\n        }\n      }\n    } catch (IOException e) {\n      throw new SyntaxError(\"Error analyzing query text\", e);\n    }\n    \n    // rewind the buffer stream\n    buffer.reset();\n\n    BytesRef bytes = termAtt == null ? null : termAtt.getBytesRef();\n\n    if (numTokens == 0)\n      return null;\n    else if (numTokens == 1) {\n      try {\n        boolean hasNext = buffer.incrementToken();\n        assert hasNext == true;\n        termAtt.fillBytesRef();\n      } catch (IOException e) {\n        // safe to ignore, because we know the number of tokens\n      }\n      return newTermQuery(new Term(field, BytesRef.deepCopyOf(bytes)));\n    } else {\n      if (severalTokensAtSamePosition || (!quoted && !autoGeneratePhraseQueries)) {\n        if (positionCount == 1 || (!quoted && !autoGeneratePhraseQueries)) {\n          // no phrase query:\n          BooleanQuery q = newBooleanQuery(positionCount == 1);\n\n          BooleanClause.Occur occur = positionCount > 1 && operator == AND_OPERATOR ?\n            BooleanClause.Occur.MUST : BooleanClause.Occur.SHOULD;\n\n          for (int i = 0; i < numTokens; i++) {\n            try {\n              boolean hasNext = buffer.incrementToken();\n              assert hasNext == true;\n              termAtt.fillBytesRef();\n            } catch (IOException e) {\n              // safe to ignore, because we know the number of tokens\n            }\n            Query currentQuery = newTermQuery(\n                new Term(field, BytesRef.deepCopyOf(bytes)));\n            q.add(currentQuery, occur);\n          }\n          return q;\n        }\n        else {\n          // phrase query:\n          MultiPhraseQuery mpq = newMultiPhraseQuery();\n          mpq.setSlop(phraseSlop);\n          List<Term> multiTerms = new ArrayList<Term>();\n          int position = -1;\n          for (int i = 0; i < numTokens; i++) {\n            int positionIncrement = 1;\n            try {\n              boolean hasNext = buffer.incrementToken();\n              assert hasNext == true;\n              termAtt.fillBytesRef();\n              if (posIncrAtt != null) {\n                positionIncrement = posIncrAtt.getPositionIncrement();\n              }\n            } catch (IOException e) {\n              // safe to ignore, because we know the number of tokens\n            }\n\n            if (positionIncrement > 0 && multiTerms.size() > 0) {\n              if (enablePositionIncrements) {\n                mpq.add(multiTerms.toArray(new Term[0]),position);\n              } else {\n                mpq.add(multiTerms.toArray(new Term[0]));\n              }\n              multiTerms.clear();\n            }\n            position += positionIncrement;\n            multiTerms.add(new Term(field, BytesRef.deepCopyOf(bytes)));\n          }\n          if (enablePositionIncrements) {\n            mpq.add(multiTerms.toArray(new Term[0]),position);\n          } else {\n            mpq.add(multiTerms.toArray(new Term[0]));\n          }\n          return mpq;\n        }\n      }\n      else {\n        PhraseQuery pq = newPhraseQuery();\n        pq.setSlop(phraseSlop);\n        int position = -1;\n\n        for (int i = 0; i < numTokens; i++) {\n          int positionIncrement = 1;\n\n          try {\n            boolean hasNext = buffer.incrementToken();\n            assert hasNext == true;\n            termAtt.fillBytesRef();\n            if (posIncrAtt != null) {\n              positionIncrement = posIncrAtt.getPositionIncrement();\n            }\n          } catch (IOException e) {\n            // safe to ignore, because we know the number of tokens\n          }\n\n          if (enablePositionIncrements) {\n            position += positionIncrement;\n            pq.add(new Term(field, BytesRef.deepCopyOf(bytes)),position);\n          } else {\n            pq.add(new Term(field, BytesRef.deepCopyOf(bytes)));\n          }\n        }\n        return pq;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e55782fb51a6e9789542818eb2161a3247f39ace","date":1489707707,"type":5,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#newFieldQuery(Analyzer,String,String,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#newFieldQuery(Analyzer,String,String,boolean).mjava","sourceNew":"  protected Query newFieldQuery(Analyzer analyzer, String field, String queryText,\n                                boolean quoted, boolean fieldAutoGenPhraseQueries)  throws SyntaxError {\n    BooleanClause.Occur occur = operator == Operator.AND ? BooleanClause.Occur.MUST : BooleanClause.Occur.SHOULD;\n    return createFieldQuery(analyzer, occur, field, queryText,\n        quoted || fieldAutoGenPhraseQueries || autoGeneratePhraseQueries, phraseSlop);\n  }\n\n","sourceOld":"  protected Query newFieldQuery(Analyzer analyzer, String field, String queryText, boolean quoted)  throws SyntaxError {\n    BooleanClause.Occur occur = operator == Operator.AND ? BooleanClause.Occur.MUST : BooleanClause.Occur.SHOULD;\n    return createFieldQuery(analyzer, occur, field, queryText, quoted || autoGeneratePhraseQueries, phraseSlop);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c03778630c4604270d88c148afb8c7de35b51d3c","date":1490280010,"type":5,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#newFieldQuery(Analyzer,String,String,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#newFieldQuery(Analyzer,String,String,boolean).mjava","sourceNew":"  protected Query newFieldQuery(Analyzer analyzer, String field, String queryText,\n                                boolean quoted, boolean fieldAutoGenPhraseQueries)  throws SyntaxError {\n    BooleanClause.Occur occur = operator == Operator.AND ? BooleanClause.Occur.MUST : BooleanClause.Occur.SHOULD;\n    return createFieldQuery(analyzer, occur, field, queryText,\n        quoted || fieldAutoGenPhraseQueries || autoGeneratePhraseQueries, phraseSlop);\n  }\n\n","sourceOld":"  protected Query newFieldQuery(Analyzer analyzer, String field, String queryText, boolean quoted)  throws SyntaxError {\n    BooleanClause.Occur occur = operator == Operator.AND ? BooleanClause.Occur.MUST : BooleanClause.Occur.SHOULD;\n    return createFieldQuery(analyzer, occur, field, queryText, quoted || autoGeneratePhraseQueries, phraseSlop);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c1c1dd5dce93e4fa48898dabc7e012560acda425":["782ed6a4b4ba50ec19734fc8db4e570ee193d627"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["3cdb67100dc016748799a77218aa409478372d79","c83d6c4335f31cae14f625a222bc842f20073dcd"],"c83d6c4335f31cae14f625a222bc842f20073dcd":["3cdb67100dc016748799a77218aa409478372d79"],"3cdb67100dc016748799a77218aa409478372d79":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb67100dc016748799a77218aa409478372d79"],"782ed6a4b4ba50ec19734fc8db4e570ee193d627":["c83d6c4335f31cae14f625a222bc842f20073dcd"],"c03778630c4604270d88c148afb8c7de35b51d3c":["c1c1dd5dce93e4fa48898dabc7e012560acda425"],"e55782fb51a6e9789542818eb2161a3247f39ace":["c1c1dd5dce93e4fa48898dabc7e012560acda425"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e55782fb51a6e9789542818eb2161a3247f39ace"]},"commit2Childs":{"c1c1dd5dce93e4fa48898dabc7e012560acda425":["c03778630c4604270d88c148afb8c7de35b51d3c","e55782fb51a6e9789542818eb2161a3247f39ace"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"3cdb67100dc016748799a77218aa409478372d79":["37a0f60745e53927c4c876cfe5b5a58170f0646c","c83d6c4335f31cae14f625a222bc842f20073dcd","407687e67faf6e1f02a211ca078d8e3eed631027"],"c83d6c4335f31cae14f625a222bc842f20073dcd":["37a0f60745e53927c4c876cfe5b5a58170f0646c","782ed6a4b4ba50ec19734fc8db4e570ee193d627"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3cdb67100dc016748799a77218aa409478372d79","407687e67faf6e1f02a211ca078d8e3eed631027"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"782ed6a4b4ba50ec19734fc8db4e570ee193d627":["c1c1dd5dce93e4fa48898dabc7e012560acda425"],"c03778630c4604270d88c148afb8c7de35b51d3c":[],"e55782fb51a6e9789542818eb2161a3247f39ace":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","407687e67faf6e1f02a211ca078d8e3eed631027","c03778630c4604270d88c148afb8c7de35b51d3c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}