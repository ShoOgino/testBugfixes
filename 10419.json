{"path":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexWriter#testAddDocumentOnDiskFull().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexWriter#testAddDocumentOnDiskFull().mjava","pathOld":"backwards/src/test/org/apache/lucene/index/TestIndexWriter#testAddDocumentOnDiskFull().mjava","sourceNew":"    /*\n     * Make sure IndexWriter cleans up on hitting a disk\n     * full exception in addDocument.\n     */\n    public void testAddDocumentOnDiskFull() throws IOException {\n\n      boolean debug = false;\n\n      for(int pass=0;pass<2;pass++) {\n        if (debug)\n          System.out.println(\"TEST: pass=\" + pass);\n        boolean doAbort = pass == 1;\n        long diskFree = 200;\n        while(true) {\n          if (debug)\n            System.out.println(\"TEST: cycle: diskFree=\" + diskFree);\n          MockRAMDirectory dir = new MockRAMDirectory();\n          dir.setMaxSizeInBytes(diskFree);\n          IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.UNLIMITED);\n\n          MergeScheduler ms = writer.getMergeScheduler();\n          if (ms instanceof ConcurrentMergeScheduler)\n            // This test intentionally produces exceptions\n            // in the threads that CMS launches; we don't\n            // want to pollute test output with these.\n            ((ConcurrentMergeScheduler) ms).setSuppressExceptions();\n\n          boolean hitError = false;\n          try {\n            for(int i=0;i<200;i++) {\n              addDoc(writer);\n            }\n          } catch (IOException e) {\n            if (debug) {\n              System.out.println(\"TEST: exception on addDoc\");\n              e.printStackTrace(System.out);\n            }\n            hitError = true;\n          }\n\n          if (hitError) {\n            if (doAbort) {\n              writer.rollback();\n            } else {\n              try {\n                writer.close();\n              } catch (IOException e) {\n                if (debug) {\n                  System.out.println(\"TEST: exception on close\");\n                  e.printStackTrace(System.out);\n                }\n                dir.setMaxSizeInBytes(0);\n                writer.close();\n              }\n            }\n\n            _TestUtil.syncConcurrentMerges(ms);\n\n            assertNoUnreferencedFiles(dir, \"after disk full during addDocument\");\n\n            // Make sure reader can open the index:\n            IndexReader.open(dir, true).close();\n\n            dir.close();\n\n            // Now try again w/ more space:\n            diskFree += 500;\n          } else {\n            _TestUtil.syncConcurrentMerges(writer);\n            dir.close();\n            break;\n          }\n        }\n      }\n    }                                               \n\n","sourceOld":"    /*\n     * Make sure IndexWriter cleans up on hitting a disk\n     * full exception in addDocument.\n     */\n    public void testAddDocumentOnDiskFull() throws IOException {\n\n      boolean debug = false;\n\n      for(int pass=0;pass<2;pass++) {\n        if (debug)\n          System.out.println(\"TEST: pass=\" + pass);\n        boolean doAbort = pass == 1;\n        long diskFree = 200;\n        while(true) {\n          if (debug)\n            System.out.println(\"TEST: cycle: diskFree=\" + diskFree);\n          MockRAMDirectory dir = new MockRAMDirectory();\n          dir.setMaxSizeInBytes(diskFree);\n          IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.UNLIMITED);\n\n          MergeScheduler ms = writer.getMergeScheduler();\n          if (ms instanceof ConcurrentMergeScheduler)\n            // This test intentionally produces exceptions\n            // in the threads that CMS launches; we don't\n            // want to pollute test output with these.\n            ((ConcurrentMergeScheduler) ms).setSuppressExceptions();\n\n          boolean hitError = false;\n          try {\n            for(int i=0;i<200;i++) {\n              addDoc(writer);\n            }\n          } catch (IOException e) {\n            if (debug) {\n              System.out.println(\"TEST: exception on addDoc\");\n              e.printStackTrace(System.out);\n            }\n            hitError = true;\n          }\n\n          if (hitError) {\n            if (doAbort) {\n              writer.rollback();\n            } else {\n              try {\n                writer.close();\n              } catch (IOException e) {\n                if (debug) {\n                  System.out.println(\"TEST: exception on close\");\n                  e.printStackTrace(System.out);\n                }\n                dir.setMaxSizeInBytes(0);\n                writer.close();\n              }\n            }\n\n            _TestUtil.syncConcurrentMerges(ms);\n\n            assertNoUnreferencedFiles(dir, \"after disk full during addDocument\");\n\n            // Make sure reader can open the index:\n            IndexReader.open(dir, true).close();\n\n            dir.close();\n\n            // Now try again w/ more space:\n            diskFree += 500;\n          } else {\n            _TestUtil.syncConcurrentMerges(writer);\n            dir.close();\n            break;\n          }\n        }\n      }\n    }                                               \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexWriter#testAddDocumentOnDiskFull().mjava","sourceNew":null,"sourceOld":"    /*\n     * Make sure IndexWriter cleans up on hitting a disk\n     * full exception in addDocument.\n     */\n    public void testAddDocumentOnDiskFull() throws IOException {\n\n      boolean debug = false;\n\n      for(int pass=0;pass<2;pass++) {\n        if (debug)\n          System.out.println(\"TEST: pass=\" + pass);\n        boolean doAbort = pass == 1;\n        long diskFree = 200;\n        while(true) {\n          if (debug)\n            System.out.println(\"TEST: cycle: diskFree=\" + diskFree);\n          MockRAMDirectory dir = new MockRAMDirectory();\n          dir.setMaxSizeInBytes(diskFree);\n          IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.UNLIMITED);\n\n          MergeScheduler ms = writer.getMergeScheduler();\n          if (ms instanceof ConcurrentMergeScheduler)\n            // This test intentionally produces exceptions\n            // in the threads that CMS launches; we don't\n            // want to pollute test output with these.\n            ((ConcurrentMergeScheduler) ms).setSuppressExceptions();\n\n          boolean hitError = false;\n          try {\n            for(int i=0;i<200;i++) {\n              addDoc(writer);\n            }\n          } catch (IOException e) {\n            if (debug) {\n              System.out.println(\"TEST: exception on addDoc\");\n              e.printStackTrace(System.out);\n            }\n            hitError = true;\n          }\n\n          if (hitError) {\n            if (doAbort) {\n              writer.rollback();\n            } else {\n              try {\n                writer.close();\n              } catch (IOException e) {\n                if (debug) {\n                  System.out.println(\"TEST: exception on close\");\n                  e.printStackTrace(System.out);\n                }\n                dir.setMaxSizeInBytes(0);\n                writer.close();\n              }\n            }\n\n            _TestUtil.syncConcurrentMerges(ms);\n\n            assertNoUnreferencedFiles(dir, \"after disk full during addDocument\");\n\n            // Make sure reader can open the index:\n            IndexReader.open(dir, true).close();\n\n            dir.close();\n\n            // Now try again w/ more space:\n            diskFree += 500;\n          } else {\n            _TestUtil.syncConcurrentMerges(writer);\n            dir.close();\n            break;\n          }\n        }\n      }\n    }                                               \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}