{"path":"solr/core/src/java/org/apache/solr/handler/SnapPuller#doCommit(boolean).mjava","commits":[{"id":"b6d2d51ff0b489e2d7ddc42a63f0d6cb69326469","date":1345037674,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#doCommit(boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#doCommit().mjava","sourceNew":"  private void doCommit(boolean isFullCopyNeeded) throws IOException {\n    SolrQueryRequest req = new LocalSolrQueryRequest(solrCore,\n        new ModifiableSolrParams());\n    // reboot the writer on the new index and get a new searcher\n    solrCore.getUpdateHandler().newIndexWriter(isFullCopyNeeded);\n    \n    try {\n      // first try to open an NRT searcher so that the new \n      // IndexWriter is registered with the reader\n      Future[] waitSearcher = new Future[1];\n      solrCore.getSearcher(true, false, waitSearcher, true);\n      if (waitSearcher[0] != null) {\n        try {\n         waitSearcher[0].get();\n       } catch (InterruptedException e) {\n         SolrException.log(LOG,e);\n       } catch (ExecutionException e) {\n         SolrException.log(LOG,e);\n       }\n     }\n\n      // update our commit point to the right dir\n      solrCore.getUpdateHandler().commit(new CommitUpdateCommand(req, false));\n\n    } finally {\n      req.close();\n    }\n  }\n\n","sourceOld":"  private void doCommit() throws IOException {\n    SolrQueryRequest req = new LocalSolrQueryRequest(solrCore,\n        new ModifiableSolrParams());\n    // reboot the writer on the new index and get a new searcher\n    solrCore.getUpdateHandler().newIndexWriter(true);\n    \n    try {\n      // first try to open an NRT searcher so that the new \n      // IndexWriter is registered with the reader\n      Future[] waitSearcher = new Future[1];\n      solrCore.getSearcher(true, false, waitSearcher, true);\n      if (waitSearcher[0] != null) {\n        try {\n         waitSearcher[0].get();\n       } catch (InterruptedException e) {\n         SolrException.log(LOG,e);\n       } catch (ExecutionException e) {\n         SolrException.log(LOG,e);\n       }\n     }\n\n      // update our commit point to the right dir\n      solrCore.getUpdateHandler().commit(new CommitUpdateCommand(req, false));\n\n    } finally {\n      req.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70fa1c0f4d75735ff2e1485e059d9bc5efa50598","date":1345296911,"type":1,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#doCommit(boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#doCommit().mjava","sourceNew":"  private void doCommit(boolean isFullCopyNeeded) throws IOException {\n    SolrQueryRequest req = new LocalSolrQueryRequest(solrCore,\n        new ModifiableSolrParams());\n    // reboot the writer on the new index and get a new searcher\n    solrCore.getUpdateHandler().newIndexWriter(isFullCopyNeeded);\n    \n    try {\n      // first try to open an NRT searcher so that the new \n      // IndexWriter is registered with the reader\n      Future[] waitSearcher = new Future[1];\n      solrCore.getSearcher(true, false, waitSearcher, true);\n      if (waitSearcher[0] != null) {\n        try {\n         waitSearcher[0].get();\n       } catch (InterruptedException e) {\n         SolrException.log(LOG,e);\n       } catch (ExecutionException e) {\n         SolrException.log(LOG,e);\n       }\n     }\n\n      // update our commit point to the right dir\n      solrCore.getUpdateHandler().commit(new CommitUpdateCommand(req, false));\n\n    } finally {\n      req.close();\n    }\n  }\n\n","sourceOld":"  private void doCommit() throws IOException {\n    SolrQueryRequest req = new LocalSolrQueryRequest(solrCore,\n        new ModifiableSolrParams());\n    // reboot the writer on the new index and get a new searcher\n    solrCore.getUpdateHandler().newIndexWriter(true);\n    \n    try {\n      // first try to open an NRT searcher so that the new \n      // IndexWriter is registered with the reader\n      Future[] waitSearcher = new Future[1];\n      solrCore.getSearcher(true, false, waitSearcher, true);\n      if (waitSearcher[0] != null) {\n        try {\n         waitSearcher[0].get();\n       } catch (InterruptedException e) {\n         SolrException.log(LOG,e);\n       } catch (ExecutionException e) {\n         SolrException.log(LOG,e);\n       }\n     }\n\n      // update our commit point to the right dir\n      solrCore.getUpdateHandler().commit(new CommitUpdateCommand(req, false));\n\n    } finally {\n      req.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"616c1830142ff5c1ddedec1ed898733b73c8e23b","date":1345368925,"type":1,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#doCommit(boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#doCommit().mjava","sourceNew":"  private void doCommit(boolean isFullCopyNeeded) throws IOException {\n    SolrQueryRequest req = new LocalSolrQueryRequest(solrCore,\n        new ModifiableSolrParams());\n    // reboot the writer on the new index and get a new searcher\n    solrCore.getUpdateHandler().newIndexWriter(isFullCopyNeeded);\n    \n    try {\n      // first try to open an NRT searcher so that the new \n      // IndexWriter is registered with the reader\n      Future[] waitSearcher = new Future[1];\n      solrCore.getSearcher(true, false, waitSearcher, true);\n      if (waitSearcher[0] != null) {\n        try {\n         waitSearcher[0].get();\n       } catch (InterruptedException e) {\n         SolrException.log(LOG,e);\n       } catch (ExecutionException e) {\n         SolrException.log(LOG,e);\n       }\n     }\n\n      // update our commit point to the right dir\n      solrCore.getUpdateHandler().commit(new CommitUpdateCommand(req, false));\n\n    } finally {\n      req.close();\n    }\n  }\n\n","sourceOld":"  private void doCommit() throws IOException {\n    SolrQueryRequest req = new LocalSolrQueryRequest(solrCore,\n        new ModifiableSolrParams());\n    // reboot the writer on the new index and get a new searcher\n    solrCore.getUpdateHandler().newIndexWriter(true);\n    \n    try {\n      // first try to open an NRT searcher so that the new \n      // IndexWriter is registered with the reader\n      Future[] waitSearcher = new Future[1];\n      solrCore.getSearcher(true, false, waitSearcher, true);\n      if (waitSearcher[0] != null) {\n        try {\n         waitSearcher[0].get();\n       } catch (InterruptedException e) {\n         SolrException.log(LOG,e);\n       } catch (ExecutionException e) {\n         SolrException.log(LOG,e);\n       }\n     }\n\n      // update our commit point to the right dir\n      solrCore.getUpdateHandler().commit(new CommitUpdateCommand(req, false));\n\n    } finally {\n      req.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a9750a6c46ff39b790de4d219e59b8647310d00","date":1347732871,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#doCommit(boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#doCommit(boolean).mjava","sourceNew":"  private void doCommit(boolean isFullCopyNeeded) throws IOException {\n    SolrQueryRequest req = new LocalSolrQueryRequest(solrCore,\n        new ModifiableSolrParams());\n    // reboot the writer on the new index and get a new searcher\n    solrCore.getUpdateHandler().newIndexWriter(isFullCopyNeeded);\n    \n    try {\n      // first try to open an NRT searcher so that the new \n      // IndexWriter is registered with the reader\n      Future[] waitSearcher = new Future[1];\n      solrCore.getSearcher(true, false, waitSearcher, true);\n      if (waitSearcher[0] != null) {\n        try {\n         waitSearcher[0].get();\n       } catch (InterruptedException e) {\n         SolrException.log(LOG,e);\n       } catch (ExecutionException e) {\n         SolrException.log(LOG,e);\n       }\n     }\n\n      // update our commit point to the right dir\n      CommitUpdateCommand cuc = new CommitUpdateCommand(req, false);\n      cuc.waitSearcher = false;\n      cuc.openSearcher = false;\n      solrCore.getUpdateHandler().commit(cuc);\n\n    } finally {\n      req.close();\n    }\n  }\n\n","sourceOld":"  private void doCommit(boolean isFullCopyNeeded) throws IOException {\n    SolrQueryRequest req = new LocalSolrQueryRequest(solrCore,\n        new ModifiableSolrParams());\n    // reboot the writer on the new index and get a new searcher\n    solrCore.getUpdateHandler().newIndexWriter(isFullCopyNeeded);\n    \n    try {\n      // first try to open an NRT searcher so that the new \n      // IndexWriter is registered with the reader\n      Future[] waitSearcher = new Future[1];\n      solrCore.getSearcher(true, false, waitSearcher, true);\n      if (waitSearcher[0] != null) {\n        try {\n         waitSearcher[0].get();\n       } catch (InterruptedException e) {\n         SolrException.log(LOG,e);\n       } catch (ExecutionException e) {\n         SolrException.log(LOG,e);\n       }\n     }\n\n      // update our commit point to the right dir\n      solrCore.getUpdateHandler().commit(new CommitUpdateCommand(req, false));\n\n    } finally {\n      req.close();\n    }\n  }\n\n","bugFix":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"bugIntro":["43e5779eeb016d5b6980fbf3437f3e8ff4dbf1d6"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d9405f486872f1e416304dfe389741f4ee2f8a4d","date":1351276739,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#doCommit(boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#doCommit(boolean).mjava","sourceNew":"  private void doCommit(boolean isFullCopyNeeded) throws IOException {\n    SolrQueryRequest req = new LocalSolrQueryRequest(solrCore,\n        new ModifiableSolrParams());\n    // reboot the writer on the new index and get a new searcher\n    solrCore.getUpdateHandler().newIndexWriter(isFullCopyNeeded, false);\n    \n    try {\n      // first try to open an NRT searcher so that the new \n      // IndexWriter is registered with the reader\n      Future[] waitSearcher = new Future[1];\n      solrCore.getSearcher(true, false, waitSearcher, true);\n      if (waitSearcher[0] != null) {\n        try {\n         waitSearcher[0].get();\n       } catch (InterruptedException e) {\n         SolrException.log(LOG,e);\n       } catch (ExecutionException e) {\n         SolrException.log(LOG,e);\n       }\n     }\n\n      // update our commit point to the right dir\n      CommitUpdateCommand cuc = new CommitUpdateCommand(req, false);\n      cuc.waitSearcher = false;\n      cuc.openSearcher = false;\n      solrCore.getUpdateHandler().commit(cuc);\n\n    } finally {\n      req.close();\n    }\n  }\n\n","sourceOld":"  private void doCommit(boolean isFullCopyNeeded) throws IOException {\n    SolrQueryRequest req = new LocalSolrQueryRequest(solrCore,\n        new ModifiableSolrParams());\n    // reboot the writer on the new index and get a new searcher\n    solrCore.getUpdateHandler().newIndexWriter(isFullCopyNeeded);\n    \n    try {\n      // first try to open an NRT searcher so that the new \n      // IndexWriter is registered with the reader\n      Future[] waitSearcher = new Future[1];\n      solrCore.getSearcher(true, false, waitSearcher, true);\n      if (waitSearcher[0] != null) {\n        try {\n         waitSearcher[0].get();\n       } catch (InterruptedException e) {\n         SolrException.log(LOG,e);\n       } catch (ExecutionException e) {\n         SolrException.log(LOG,e);\n       }\n     }\n\n      // update our commit point to the right dir\n      CommitUpdateCommand cuc = new CommitUpdateCommand(req, false);\n      cuc.waitSearcher = false;\n      cuc.openSearcher = false;\n      solrCore.getUpdateHandler().commit(cuc);\n\n    } finally {\n      req.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f2126b84bd093fa3d921582a109a0ee578c28126","date":1351522501,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#doCommit(boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#doCommit(boolean).mjava","sourceNew":"  private void doCommit(boolean isFullCopyNeeded) throws IOException {\n    SolrQueryRequest req = new LocalSolrQueryRequest(solrCore,\n        new ModifiableSolrParams());\n    // reboot the writer on the new index and get a new searcher\n    solrCore.getUpdateHandler().newIndexWriter(isFullCopyNeeded, false);\n    \n    try {\n      // first try to open an NRT searcher so that the new \n      // IndexWriter is registered with the reader\n      Future[] waitSearcher = new Future[1];\n      solrCore.getSearcher(true, false, waitSearcher, true);\n      if (waitSearcher[0] != null) {\n        try {\n         waitSearcher[0].get();\n       } catch (InterruptedException e) {\n         SolrException.log(LOG,e);\n       } catch (ExecutionException e) {\n         SolrException.log(LOG,e);\n       }\n     }\n\n      // update our commit point to the right dir\n      CommitUpdateCommand cuc = new CommitUpdateCommand(req, false);\n      cuc.waitSearcher = false;\n      cuc.openSearcher = false;\n      solrCore.getUpdateHandler().commit(cuc);\n\n    } finally {\n      req.close();\n    }\n  }\n\n","sourceOld":"  private void doCommit(boolean isFullCopyNeeded) throws IOException {\n    SolrQueryRequest req = new LocalSolrQueryRequest(solrCore,\n        new ModifiableSolrParams());\n    // reboot the writer on the new index and get a new searcher\n    solrCore.getUpdateHandler().newIndexWriter(isFullCopyNeeded);\n    \n    try {\n      // first try to open an NRT searcher so that the new \n      // IndexWriter is registered with the reader\n      Future[] waitSearcher = new Future[1];\n      solrCore.getSearcher(true, false, waitSearcher, true);\n      if (waitSearcher[0] != null) {\n        try {\n         waitSearcher[0].get();\n       } catch (InterruptedException e) {\n         SolrException.log(LOG,e);\n       } catch (ExecutionException e) {\n         SolrException.log(LOG,e);\n       }\n     }\n\n      // update our commit point to the right dir\n      CommitUpdateCommand cuc = new CommitUpdateCommand(req, false);\n      cuc.waitSearcher = false;\n      cuc.openSearcher = false;\n      solrCore.getUpdateHandler().commit(cuc);\n\n    } finally {\n      req.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43e5779eeb016d5b6980fbf3437f3e8ff4dbf1d6","date":1361552322,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#doCommit(boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#doCommit(boolean).mjava","sourceNew":"  private void doCommit(boolean isFullCopyNeeded) throws IOException {\n    SolrQueryRequest req = new LocalSolrQueryRequest(solrCore,\n        new ModifiableSolrParams());\n    // reboot the writer on the new index and get a new searcher\n    solrCore.getUpdateHandler().newIndexWriter(isFullCopyNeeded, false);\n    \n    try {\n      // first try to open an NRT searcher so that the new\n      // IndexWriter is registered with the reader\n      Future[] waitSearcher = new Future[1];\n      solrCore.getSearcher(true, false, waitSearcher, true);\n      if (waitSearcher[0] != null) {\n        try {\n          waitSearcher[0].get();\n        } catch (InterruptedException e) {\n          SolrException.log(LOG, e);\n        } catch (ExecutionException e) {\n          SolrException.log(LOG, e);\n        }\n      }\n      \n    } finally {\n      req.close();\n    }\n  }\n\n","sourceOld":"  private void doCommit(boolean isFullCopyNeeded) throws IOException {\n    SolrQueryRequest req = new LocalSolrQueryRequest(solrCore,\n        new ModifiableSolrParams());\n    // reboot the writer on the new index and get a new searcher\n    solrCore.getUpdateHandler().newIndexWriter(isFullCopyNeeded, false);\n    \n    try {\n      // first try to open an NRT searcher so that the new \n      // IndexWriter is registered with the reader\n      Future[] waitSearcher = new Future[1];\n      solrCore.getSearcher(true, false, waitSearcher, true);\n      if (waitSearcher[0] != null) {\n        try {\n         waitSearcher[0].get();\n       } catch (InterruptedException e) {\n         SolrException.log(LOG,e);\n       } catch (ExecutionException e) {\n         SolrException.log(LOG,e);\n       }\n     }\n\n      // update our commit point to the right dir\n      CommitUpdateCommand cuc = new CommitUpdateCommand(req, false);\n      cuc.waitSearcher = false;\n      cuc.openSearcher = false;\n      solrCore.getUpdateHandler().commit(cuc);\n\n    } finally {\n      req.close();\n    }\n  }\n\n","bugFix":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f","0a9750a6c46ff39b790de4d219e59b8647310d00","3a3d37067b41c348decf3e202f352c90ef307686"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bd8bc29700397ec1886e73bae0a67ff536bad223","date":1362159450,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#openNewWriterAndSearcher(boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#doCommit(boolean).mjava","sourceNew":"  private void openNewWriterAndSearcher(boolean isFullCopyNeeded) throws IOException {\n    SolrQueryRequest req = new LocalSolrQueryRequest(solrCore,\n        new ModifiableSolrParams());\n    // reboot the writer on the new index and get a new searcher\n    solrCore.getUpdateHandler().newIndexWriter(isFullCopyNeeded, false);\n    \n    RefCounted<SolrIndexSearcher> searcher = null;\n    IndexCommit commitPoint;\n    try {\n      // first try to open an NRT searcher so that the new\n      // IndexWriter is registered with the reader\n      Future[] waitSearcher = new Future[1];\n      searcher = solrCore.getSearcher(true, true, waitSearcher, true);\n      if (waitSearcher[0] != null) {\n        try {\n          waitSearcher[0].get();\n        } catch (InterruptedException e) {\n          SolrException.log(LOG, e);\n        } catch (ExecutionException e) {\n          SolrException.log(LOG, e);\n        }\n      }\n      commitPoint = searcher.get().getIndexReader().getIndexCommit();\n    } finally {\n      req.close();\n      if (searcher != null) {\n        searcher.decref();\n      }\n    }\n\n    // update the commit point in replication handler\n    replicationHandler.indexCommitPoint = commitPoint;\n    \n  }\n\n","sourceOld":"  private void doCommit(boolean isFullCopyNeeded) throws IOException {\n    SolrQueryRequest req = new LocalSolrQueryRequest(solrCore,\n        new ModifiableSolrParams());\n    // reboot the writer on the new index and get a new searcher\n    solrCore.getUpdateHandler().newIndexWriter(isFullCopyNeeded, false);\n    \n    try {\n      // first try to open an NRT searcher so that the new\n      // IndexWriter is registered with the reader\n      Future[] waitSearcher = new Future[1];\n      solrCore.getSearcher(true, false, waitSearcher, true);\n      if (waitSearcher[0] != null) {\n        try {\n          waitSearcher[0].get();\n        } catch (InterruptedException e) {\n          SolrException.log(LOG, e);\n        } catch (ExecutionException e) {\n          SolrException.log(LOG, e);\n        }\n      }\n      \n    } finally {\n      req.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":["058801f8673d53a5abac8088204860ec29a40f0d","11fa6b3c54740236744aa64f1a29954b1cf172a5"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"0a9750a6c46ff39b790de4d219e59b8647310d00":["b6d2d51ff0b489e2d7ddc42a63f0d6cb69326469"],"616c1830142ff5c1ddedec1ed898733b73c8e23b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b6d2d51ff0b489e2d7ddc42a63f0d6cb69326469"],"70fa1c0f4d75735ff2e1485e059d9bc5efa50598":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b6d2d51ff0b489e2d7ddc42a63f0d6cb69326469"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"43e5779eeb016d5b6980fbf3437f3e8ff4dbf1d6":["d9405f486872f1e416304dfe389741f4ee2f8a4d"],"d9405f486872f1e416304dfe389741f4ee2f8a4d":["0a9750a6c46ff39b790de4d219e59b8647310d00"],"f2126b84bd093fa3d921582a109a0ee578c28126":["0a9750a6c46ff39b790de4d219e59b8647310d00","d9405f486872f1e416304dfe389741f4ee2f8a4d"],"bd8bc29700397ec1886e73bae0a67ff536bad223":["43e5779eeb016d5b6980fbf3437f3e8ff4dbf1d6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bd8bc29700397ec1886e73bae0a67ff536bad223"],"b6d2d51ff0b489e2d7ddc42a63f0d6cb69326469":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"0a9750a6c46ff39b790de4d219e59b8647310d00":["d9405f486872f1e416304dfe389741f4ee2f8a4d","f2126b84bd093fa3d921582a109a0ee578c28126"],"616c1830142ff5c1ddedec1ed898733b73c8e23b":[],"70fa1c0f4d75735ff2e1485e059d9bc5efa50598":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["616c1830142ff5c1ddedec1ed898733b73c8e23b","70fa1c0f4d75735ff2e1485e059d9bc5efa50598","b6d2d51ff0b489e2d7ddc42a63f0d6cb69326469"],"43e5779eeb016d5b6980fbf3437f3e8ff4dbf1d6":["bd8bc29700397ec1886e73bae0a67ff536bad223"],"d9405f486872f1e416304dfe389741f4ee2f8a4d":["43e5779eeb016d5b6980fbf3437f3e8ff4dbf1d6","f2126b84bd093fa3d921582a109a0ee578c28126"],"f2126b84bd093fa3d921582a109a0ee578c28126":[],"bd8bc29700397ec1886e73bae0a67ff536bad223":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b6d2d51ff0b489e2d7ddc42a63f0d6cb69326469":["0a9750a6c46ff39b790de4d219e59b8647310d00","616c1830142ff5c1ddedec1ed898733b73c8e23b","70fa1c0f4d75735ff2e1485e059d9bc5efa50598"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["616c1830142ff5c1ddedec1ed898733b73c8e23b","70fa1c0f4d75735ff2e1485e059d9bc5efa50598","f2126b84bd093fa3d921582a109a0ee578c28126","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}