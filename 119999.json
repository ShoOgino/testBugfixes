{"path":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#maxNumSegmentsMergesPending().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#maxNumSegmentsMergesPending().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#maxNumSegmentsMergesPending().mjava","sourceNew":"  /** Returns true if any merges in pendingMerges or\n   *  runningMerges are maxNumSegments merges. */\n  private synchronized boolean maxNumSegmentsMergesPending() {\n    for (final MergePolicy.OneMerge merge : pendingMerges) {\n      if (merge.maxNumSegments != -1)\n        return true;\n    }\n\n    for (final MergePolicy.OneMerge merge : runningMerges) {\n      if (merge.maxNumSegments != -1)\n        return true;\n    }\n\n    return false;\n  }\n\n","sourceOld":"  /** Returns true if any merges in pendingMerges or\n   *  runningMerges are maxNumSegments merges. */\n  private synchronized boolean maxNumSegmentsMergesPending() {\n    for (final MergePolicy.OneMerge merge : pendingMerges) {\n      if (merge.maxNumSegments != -1)\n        return true;\n    }\n\n    for (final MergePolicy.OneMerge merge : runningMerges) {\n      if (merge.maxNumSegments != -1)\n        return true;\n    }\n\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6b53db710c6b8fb48bb3a2bab4df8d1dfbd7906c","date":1477166077,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#maxNumSegmentsMergesPending().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#maxNumSegmentsMergesPending().mjava","sourceNew":"  /** Returns true if any merges in pendingMerges or\n   *  runningMerges are maxNumSegments merges. */\n  private synchronized boolean maxNumSegmentsMergesPending() {\n    for (final MergePolicy.OneMerge merge : pendingMerges) {\n      if (merge.maxNumSegments != UNBOUNDED_MAX_MERGE_SEGMENTS)\n        return true;\n    }\n\n    for (final MergePolicy.OneMerge merge : runningMerges) {\n      if (merge.maxNumSegments != UNBOUNDED_MAX_MERGE_SEGMENTS)\n        return true;\n    }\n\n    return false;\n  }\n\n","sourceOld":"  /** Returns true if any merges in pendingMerges or\n   *  runningMerges are maxNumSegments merges. */\n  private synchronized boolean maxNumSegmentsMergesPending() {\n    for (final MergePolicy.OneMerge merge : pendingMerges) {\n      if (merge.maxNumSegments != -1)\n        return true;\n    }\n\n    for (final MergePolicy.OneMerge merge : runningMerges) {\n      if (merge.maxNumSegments != -1)\n        return true;\n    }\n\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"80d0e6d59ae23f4a6f30eaf40bfb40742300287f","date":1477598926,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#maxNumSegmentsMergesPending().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#maxNumSegmentsMergesPending().mjava","sourceNew":"  /** Returns true if any merges in pendingMerges or\n   *  runningMerges are maxNumSegments merges. */\n  private synchronized boolean maxNumSegmentsMergesPending() {\n    for (final MergePolicy.OneMerge merge : pendingMerges) {\n      if (merge.maxNumSegments != UNBOUNDED_MAX_MERGE_SEGMENTS)\n        return true;\n    }\n\n    for (final MergePolicy.OneMerge merge : runningMerges) {\n      if (merge.maxNumSegments != UNBOUNDED_MAX_MERGE_SEGMENTS)\n        return true;\n    }\n\n    return false;\n  }\n\n","sourceOld":"  /** Returns true if any merges in pendingMerges or\n   *  runningMerges are maxNumSegments merges. */\n  private synchronized boolean maxNumSegmentsMergesPending() {\n    for (final MergePolicy.OneMerge merge : pendingMerges) {\n      if (merge.maxNumSegments != -1)\n        return true;\n    }\n\n    for (final MergePolicy.OneMerge merge : runningMerges) {\n      if (merge.maxNumSegments != -1)\n        return true;\n    }\n\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6b53db710c6b8fb48bb3a2bab4df8d1dfbd7906c":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","6b53db710c6b8fb48bb3a2bab4df8d1dfbd7906c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6b53db710c6b8fb48bb3a2bab4df8d1dfbd7906c"]},"commit2Childs":{"6b53db710c6b8fb48bb3a2bab4df8d1dfbd7906c":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["6b53db710c6b8fb48bb3a2bab4df8d1dfbd7906c","80d0e6d59ae23f4a6f30eaf40bfb40742300287f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}