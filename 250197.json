{"path":"lucene/core/src/test/org/apache/lucene/search/TestMatchesIterator#checkTerms(TermMatch[][],MatchesIterator).mjava","commits":[{"id":"165c3432cb3c4fcfc8e859af24323bbbd12084af","date":1532292166,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMatchesIterator#checkTerms(TermMatch[][],MatchesIterator).mjava","pathOld":"/dev/null","sourceNew":"  private void checkTerms(TermMatch[][] expected, MatchesIterator it) throws IOException {\n    int upTo = 0;\n    while (it.next()) {\n      Set<TermMatch> expectedMatches = new HashSet<>(Arrays.asList(expected[upTo]));\n      MatchesIterator submatches = it.getSubMatches();\n      while (submatches.next()) {\n        TermMatch tm = new TermMatch(submatches.startPosition(), submatches.startOffset(), submatches.endOffset());\n        if (expectedMatches.remove(tm) == false) {\n          fail(\"Unexpected term match: \" + tm);\n        }\n      }\n      if (expectedMatches.size() != 0) {\n        fail(\"Missing term matches: \" + expectedMatches.stream().map(Object::toString).collect(Collectors.joining(\", \")));\n      }\n      upTo++;\n    }\n    if (upTo < expected.length - 1) {\n      fail(\"Missing expected match\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"62ba8124694976baa3b03705351de238ec5d4352","date":1532295406,"type":4,"author":"Alan Woodward","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestMatchesIterator#checkTerms(TermMatch[][],MatchesIterator).mjava","sourceNew":null,"sourceOld":"  private void checkTerms(TermMatch[][] expected, MatchesIterator it) throws IOException {\n    int upTo = 0;\n    while (it.next()) {\n      Set<TermMatch> expectedMatches = new HashSet<>(Arrays.asList(expected[upTo]));\n      MatchesIterator submatches = it.getSubMatches();\n      while (submatches.next()) {\n        TermMatch tm = new TermMatch(submatches.startPosition(), submatches.startOffset(), submatches.endOffset());\n        if (expectedMatches.remove(tm) == false) {\n          fail(\"Unexpected term match: \" + tm);\n        }\n      }\n      if (expectedMatches.size() != 0) {\n        fail(\"Missing term matches: \" + expectedMatches.stream().map(Object::toString).collect(Collectors.joining(\", \")));\n      }\n      upTo++;\n    }\n    if (upTo < expected.length - 1) {\n      fail(\"Missing expected match\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"41ebc07bccf12a902ca6a0077910d18ee38b695f","date":1532336521,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMatchesIterator#checkTerms(TermMatch[][],MatchesIterator).mjava","pathOld":"/dev/null","sourceNew":"  private void checkTerms(TermMatch[][] expected, MatchesIterator it) throws IOException {\n    int upTo = 0;\n    while (it.next()) {\n      Set<TermMatch> expectedMatches = new HashSet<>(Arrays.asList(expected[upTo]));\n      MatchesIterator submatches = it.getSubMatches();\n      while (submatches.next()) {\n        TermMatch tm = new TermMatch(submatches.startPosition(), submatches.startOffset(), submatches.endOffset());\n        if (expectedMatches.remove(tm) == false) {\n          fail(\"Unexpected term match: \" + tm);\n        }\n      }\n      if (expectedMatches.size() != 0) {\n        fail(\"Missing term matches: \" + expectedMatches.stream().map(Object::toString).collect(Collectors.joining(\", \")));\n      }\n      upTo++;\n    }\n    if (upTo < expected.length - 1) {\n      fail(\"Missing expected match\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"165c3432cb3c4fcfc8e859af24323bbbd12084af":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"62ba8124694976baa3b03705351de238ec5d4352":["165c3432cb3c4fcfc8e859af24323bbbd12084af"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["41ebc07bccf12a902ca6a0077910d18ee38b695f"],"41ebc07bccf12a902ca6a0077910d18ee38b695f":["62ba8124694976baa3b03705351de238ec5d4352"]},"commit2Childs":{"165c3432cb3c4fcfc8e859af24323bbbd12084af":["62ba8124694976baa3b03705351de238ec5d4352"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["165c3432cb3c4fcfc8e859af24323bbbd12084af"],"62ba8124694976baa3b03705351de238ec5d4352":["41ebc07bccf12a902ca6a0077910d18ee38b695f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"41ebc07bccf12a902ca6a0077910d18ee38b695f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}