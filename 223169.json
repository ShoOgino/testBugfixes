{"path":"lucene/highlighter/src/java/org/apache/lucene/search/postingshighlight/PassageFormatter#format(Passage[],String).mjava","commits":[{"id":"4b3d16cba9355e2e97962eb1c441bbd0b6735c15","date":1357426290,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/postingshighlight/PassageFormatter#format(Passage[],String).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/sandbox/postingshighlight/PassageFormatter#format(Passage[],String).mjava","sourceNew":"  /**\n   * Formats the top <code>passages</code> from <code>content</code>\n   * into a human-readable text snippet.\n   * \n   * @param passages top-N passages for the field. Note these are sorted in\n   *        the order that they appear in the document for convenience.\n   * @param content content for the field.\n   * @return formatted highlight\n   */\n  public String format(Passage passages[], String content) {\n    StringBuilder sb = new StringBuilder();\n    int pos = 0;\n    for (Passage passage : passages) {\n      // don't add ellipsis if its the first one, or if its connected.\n      if (passage.startOffset > pos && pos > 0) {\n        sb.append(ellipsis);\n      }\n      pos = passage.startOffset;\n      for (int i = 0; i < passage.numMatches; i++) {\n        int start = passage.matchStarts[i];\n        int end = passage.matchEnds[i];\n        // its possible to have overlapping terms\n        if (start > pos) {\n          sb.append(content.substring(pos, start));\n        }\n        if (end > pos) {\n          sb.append(preTag);\n          sb.append(content.substring(Math.max(pos, start), end));\n          sb.append(postTag);\n          pos = end;\n        }\n      }\n      // its possible a \"term\" from the analyzer could span a sentence boundary.\n      sb.append(content.substring(pos, Math.max(pos, passage.endOffset)));\n      pos = passage.endOffset;\n    }\n    return sb.toString();\n  }\n\n","sourceOld":"  /**\n   * Formats the top <code>passages</code> from <code>content</code>\n   * into a human-readable text snippet.\n   * \n   * @param passages top-N passages for the field. Note these are sorted in\n   *        the order that they appear in the document for convenience.\n   * @param content content for the field.\n   * @return formatted highlight\n   */\n  public String format(Passage passages[], String content) {\n    StringBuilder sb = new StringBuilder();\n    int pos = 0;\n    for (Passage passage : passages) {\n      // don't add ellipsis if its the first one, or if its connected.\n      if (passage.startOffset > pos && pos > 0) {\n        sb.append(\"... \");\n      }\n      pos = passage.startOffset;\n      for (int i = 0; i < passage.numMatches; i++) {\n        int start = passage.matchStarts[i];\n        int end = passage.matchEnds[i];\n        // its possible to have overlapping terms\n        if (start > pos) {\n          sb.append(content.substring(pos, start));\n        }\n        if (end > pos) {\n          sb.append(\"<b>\");\n          sb.append(content.substring(Math.max(pos, start), end));\n          sb.append(\"</b>\");\n          pos = end;\n        }\n      }\n      // its possible a \"term\" from the analyzer could span a sentence boundary.\n      sb.append(content.substring(pos, Math.max(pos, passage.endOffset)));\n      pos = passage.endOffset;\n    }\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/postingshighlight/PassageFormatter#format(Passage[],String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Formats the top <code>passages</code> from <code>content</code>\n   * into a human-readable text snippet.\n   * \n   * @param passages top-N passages for the field. Note these are sorted in\n   *        the order that they appear in the document for convenience.\n   * @param content content for the field.\n   * @return formatted highlight\n   */\n  public String format(Passage passages[], String content) {\n    StringBuilder sb = new StringBuilder();\n    int pos = 0;\n    for (Passage passage : passages) {\n      // don't add ellipsis if its the first one, or if its connected.\n      if (passage.startOffset > pos && pos > 0) {\n        sb.append(ellipsis);\n      }\n      pos = passage.startOffset;\n      for (int i = 0; i < passage.numMatches; i++) {\n        int start = passage.matchStarts[i];\n        int end = passage.matchEnds[i];\n        // its possible to have overlapping terms\n        if (start > pos) {\n          sb.append(content.substring(pos, start));\n        }\n        if (end > pos) {\n          sb.append(preTag);\n          sb.append(content.substring(Math.max(pos, start), end));\n          sb.append(postTag);\n          pos = end;\n        }\n      }\n      // its possible a \"term\" from the analyzer could span a sentence boundary.\n      sb.append(content.substring(pos, Math.max(pos, passage.endOffset)));\n      pos = passage.endOffset;\n    }\n    return sb.toString();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"de75ff011665b8661eefbff2954ce4fbe8b6b791","date":1365261286,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/postingshighlight/PassageFormatter#format(Passage[],String).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/postingshighlight/PassageFormatter#format(Passage[],String).mjava","sourceNew":"  /**\n   * Formats the top <code>passages</code> from <code>content</code>\n   * into a human-readable text snippet.\n   * \n   * @param passages top-N passages for the field. Note these are sorted in\n   *        the order that they appear in the document for convenience.\n   * @param content content for the field.\n   * @return formatted highlight\n   */\n  public String format(Passage passages[], String content) {\n    StringBuilder sb = new StringBuilder();\n    int pos = 0;\n    for (Passage passage : passages) {\n      // don't add ellipsis if its the first one, or if its connected.\n      if (passage.startOffset > pos && pos > 0) {\n        sb.append(ellipsis);\n      }\n      pos = passage.startOffset;\n      for (int i = 0; i < passage.numMatches; i++) {\n        int start = passage.matchStarts[i];\n        int end = passage.matchEnds[i];\n        // its possible to have overlapping terms\n        if (start > pos) {\n          append(sb, content, pos, start);\n        }\n        if (end > pos) {\n          sb.append(preTag);\n          append(sb, content, Math.max(pos, start), end);\n          sb.append(postTag);\n          pos = end;\n        }\n      }\n      // its possible a \"term\" from the analyzer could span a sentence boundary.\n      append(sb, content, pos, Math.max(pos, passage.endOffset));\n      pos = passage.endOffset;\n    }\n    return sb.toString();\n  }\n\n","sourceOld":"  /**\n   * Formats the top <code>passages</code> from <code>content</code>\n   * into a human-readable text snippet.\n   * \n   * @param passages top-N passages for the field. Note these are sorted in\n   *        the order that they appear in the document for convenience.\n   * @param content content for the field.\n   * @return formatted highlight\n   */\n  public String format(Passage passages[], String content) {\n    StringBuilder sb = new StringBuilder();\n    int pos = 0;\n    for (Passage passage : passages) {\n      // don't add ellipsis if its the first one, or if its connected.\n      if (passage.startOffset > pos && pos > 0) {\n        sb.append(ellipsis);\n      }\n      pos = passage.startOffset;\n      for (int i = 0; i < passage.numMatches; i++) {\n        int start = passage.matchStarts[i];\n        int end = passage.matchEnds[i];\n        // its possible to have overlapping terms\n        if (start > pos) {\n          sb.append(content.substring(pos, start));\n        }\n        if (end > pos) {\n          sb.append(preTag);\n          sb.append(content.substring(Math.max(pos, start), end));\n          sb.append(postTag);\n          pos = end;\n        }\n      }\n      // its possible a \"term\" from the analyzer could span a sentence boundary.\n      sb.append(content.substring(pos, Math.max(pos, passage.endOffset)));\n      pos = passage.endOffset;\n    }\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"116a468ed771d87fd94eb1350dd2d42bbf0b262f","date":1365791134,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/postingshighlight/PassageFormatter#format(Passage[],String).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/postingshighlight/PassageFormatter#format(Passage[],String).mjava","sourceNew":"  /**\n   * Formats the top <code>passages</code> from <code>content</code>\n   * into a human-readable text snippet.\n   *\n   * @param passages top-N passages for the field. Note these are sorted in\n   *        the order that they appear in the document for convenience.\n   * @param content content for the field.\n   * @return formatted highlight\n   */\n  public abstract String format(Passage passages[], String content);\n\n","sourceOld":"  /**\n   * Formats the top <code>passages</code> from <code>content</code>\n   * into a human-readable text snippet.\n   * \n   * @param passages top-N passages for the field. Note these are sorted in\n   *        the order that they appear in the document for convenience.\n   * @param content content for the field.\n   * @return formatted highlight\n   */\n  public String format(Passage passages[], String content) {\n    StringBuilder sb = new StringBuilder();\n    int pos = 0;\n    for (Passage passage : passages) {\n      // don't add ellipsis if its the first one, or if its connected.\n      if (passage.startOffset > pos && pos > 0) {\n        sb.append(ellipsis);\n      }\n      pos = passage.startOffset;\n      for (int i = 0; i < passage.numMatches; i++) {\n        int start = passage.matchStarts[i];\n        int end = passage.matchEnds[i];\n        // its possible to have overlapping terms\n        if (start > pos) {\n          append(sb, content, pos, start);\n        }\n        if (end > pos) {\n          sb.append(preTag);\n          append(sb, content, Math.max(pos, start), end);\n          sb.append(postTag);\n          pos = end;\n        }\n      }\n      // its possible a \"term\" from the analyzer could span a sentence boundary.\n      append(sb, content, pos, Math.max(pos, passage.endOffset));\n      pos = passage.endOffset;\n    }\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b93d3a9b49519a58eab214c690c3df946003b9b5","date":1379000095,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/postingshighlight/PassageFormatter#format(Passage[],String).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/postingshighlight/PassageFormatter#format(Passage[],String).mjava","sourceNew":"  /**\n   * Formats the top <code>passages</code> from <code>content</code>\n   * into a human-readable text snippet.\n   *\n   * @param passages top-N passages for the field. Note these are sorted in\n   *        the order that they appear in the document for convenience.\n   * @param content content for the field.\n   * @return formatted highlight.  Note that for the\n   * non-expert APIs in {@link PostingsHighlighter} that\n   * return String, the toString method on the Object\n   * returned by this method is used to compute the string.\n   */\n  public abstract Object format(Passage passages[], String content);\n\n","sourceOld":"  /**\n   * Formats the top <code>passages</code> from <code>content</code>\n   * into a human-readable text snippet.\n   *\n   * @param passages top-N passages for the field. Note these are sorted in\n   *        the order that they appear in the document for convenience.\n   * @param content content for the field.\n   * @return formatted highlight\n   */\n  public abstract String format(Passage passages[], String content);\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"381618eac2691bb34ab9a3fca76ad55c6274517e","date":1495564791,"type":4,"author":"David Smiley","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/postingshighlight/PassageFormatter#format(Passage[],String).mjava","sourceNew":null,"sourceOld":"  /**\n   * Formats the top <code>passages</code> from <code>content</code>\n   * into a human-readable text snippet.\n   *\n   * @param passages top-N passages for the field. Note these are sorted in\n   *        the order that they appear in the document for convenience.\n   * @param content content for the field.\n   * @return formatted highlight.  Note that for the\n   * non-expert APIs in {@link PostingsHighlighter} that\n   * return String, the toString method on the Object\n   * returned by this method is used to compute the string.\n   */\n  public abstract Object format(Passage passages[], String content);\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":4,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/postingshighlight/PassageFormatter#format(Passage[],String).mjava","sourceNew":null,"sourceOld":"  /**\n   * Formats the top <code>passages</code> from <code>content</code>\n   * into a human-readable text snippet.\n   *\n   * @param passages top-N passages for the field. Note these are sorted in\n   *        the order that they appear in the document for convenience.\n   * @param content content for the field.\n   * @return formatted highlight.  Note that for the\n   * non-expert APIs in {@link PostingsHighlighter} that\n   * return String, the toString method on the Object\n   * returned by this method is used to compute the string.\n   */\n  public abstract Object format(Passage passages[], String content);\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"381618eac2691bb34ab9a3fca76ad55c6274517e":["b93d3a9b49519a58eab214c690c3df946003b9b5"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4b3d16cba9355e2e97962eb1c441bbd0b6735c15"],"4b3d16cba9355e2e97962eb1c441bbd0b6735c15":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["b93d3a9b49519a58eab214c690c3df946003b9b5","381618eac2691bb34ab9a3fca76ad55c6274517e"],"de75ff011665b8661eefbff2954ce4fbe8b6b791":["4b3d16cba9355e2e97962eb1c441bbd0b6735c15"],"b93d3a9b49519a58eab214c690c3df946003b9b5":["116a468ed771d87fd94eb1350dd2d42bbf0b262f"],"116a468ed771d87fd94eb1350dd2d42bbf0b262f":["de75ff011665b8661eefbff2954ce4fbe8b6b791"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["381618eac2691bb34ab9a3fca76ad55c6274517e"]},"commit2Childs":{"381618eac2691bb34ab9a3fca76ad55c6274517e":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"4b3d16cba9355e2e97962eb1c441bbd0b6735c15":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","de75ff011665b8661eefbff2954ce4fbe8b6b791"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"de75ff011665b8661eefbff2954ce4fbe8b6b791":["116a468ed771d87fd94eb1350dd2d42bbf0b262f"],"b93d3a9b49519a58eab214c690c3df946003b9b5":["381618eac2691bb34ab9a3fca76ad55c6274517e","e9017cf144952056066919f1ebc7897ff9bd71b1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","4b3d16cba9355e2e97962eb1c441bbd0b6735c15"],"116a468ed771d87fd94eb1350dd2d42bbf0b262f":["b93d3a9b49519a58eab214c690c3df946003b9b5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}