{"path":"src/test/org/apache/solr/core/TestJmxIntegration#testJmxRegistration().mjava","commits":[{"id":"6ec2a01e62b7b206d9466aafaf04d8a9d6aee77b","date":1217355237,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/test/org/apache/solr/core/TestJmxIntegration#testJmxRegistration().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testJmxRegistration() throws Exception {\n    List<MBeanServer> servers = MBeanServerFactory.findMBeanServer(null);\n    System.out.println(\"Servers: \" + servers);\n    assertNotNull(\"MBeanServers were null\", servers);\n    assertFalse(\"No MBeanServer was found\", servers.isEmpty());\n\n    MBeanServer mbeanServer = servers.get(0);\n    assertTrue(\"No MBeans found in server\", mbeanServer.getMBeanCount() > 0);\n\n    Set<ObjectInstance> objects = mbeanServer.queryMBeans(null, null);\n    assertFalse(\"No SolrInfoMBean objects found in mbean server\", objects\n            .isEmpty());\n    for (ObjectInstance o : objects) {\n      MBeanInfo mbeanInfo = mbeanServer.getMBeanInfo(o.getObjectName());\n      if (mbeanInfo.getClassName().endsWith(SolrDynamicMBean.class.getName())) {\n        assertTrue(\"No Attributes found for mbean: \" + mbeanInfo, mbeanInfo\n                .getAttributes().length > 0);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["a5b5c8b6fe2f63b35d03b80574e5899f76bc54ea","a5b5c8b6fe2f63b35d03b80574e5899f76bc54ea","a5b5c8b6fe2f63b35d03b80574e5899f76bc54ea","c1d6d844f3b4061aedc283b5e71ff1d19aeae291","c1d6d844f3b4061aedc283b5e71ff1d19aeae291","c1d6d844f3b4061aedc283b5e71ff1d19aeae291"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b87b35762c441ede36091e69fd4a3b6f99dfecd1","date":1217573088,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/test/org/apache/solr/core/TestJmxIntegration#testJmxRegistration().mjava","pathOld":"src/test/org/apache/solr/core/TestJmxIntegration#testJmxRegistration().mjava","sourceNew":"  @Test\n  public void testJmxRegistration() throws Exception {\n    List<MBeanServer> servers = MBeanServerFactory.findMBeanServer(null);\n    System.out.println(\"Servers in testJmxRegistration: \" + servers);\n    assertNotNull(\"MBeanServers were null\", servers);\n    assertFalse(\"No MBeanServer was found\", servers.isEmpty());\n\n    MBeanServer mbeanServer = servers.get(0);\n    assertTrue(\"No MBeans found in server\", mbeanServer.getMBeanCount() > 0);\n\n    Set<ObjectInstance> objects = mbeanServer.queryMBeans(null, null);\n    assertFalse(\"No SolrInfoMBean objects found in mbean server\", objects\n            .isEmpty());\n    for (ObjectInstance o : objects) {\n      MBeanInfo mbeanInfo = mbeanServer.getMBeanInfo(o.getObjectName());\n      if (mbeanInfo.getClassName().endsWith(SolrDynamicMBean.class.getName())) {\n        assertTrue(\"No Attributes found for mbean: \" + mbeanInfo, mbeanInfo\n                .getAttributes().length > 0);\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testJmxRegistration() throws Exception {\n    List<MBeanServer> servers = MBeanServerFactory.findMBeanServer(null);\n    System.out.println(\"Servers: \" + servers);\n    assertNotNull(\"MBeanServers were null\", servers);\n    assertFalse(\"No MBeanServer was found\", servers.isEmpty());\n\n    MBeanServer mbeanServer = servers.get(0);\n    assertTrue(\"No MBeans found in server\", mbeanServer.getMBeanCount() > 0);\n\n    Set<ObjectInstance> objects = mbeanServer.queryMBeans(null, null);\n    assertFalse(\"No SolrInfoMBean objects found in mbean server\", objects\n            .isEmpty());\n    for (ObjectInstance o : objects) {\n      MBeanInfo mbeanInfo = mbeanServer.getMBeanInfo(o.getObjectName());\n      if (mbeanInfo.getClassName().endsWith(SolrDynamicMBean.class.getName())) {\n        assertTrue(\"No Attributes found for mbean: \" + mbeanInfo, mbeanInfo\n                .getAttributes().length > 0);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/core/TestJmxIntegration#testJmxRegistration().mjava","pathOld":"src/test/org/apache/solr/core/TestJmxIntegration#testJmxRegistration().mjava","sourceNew":"  @Test\n  public void testJmxRegistration() throws Exception {\n    List<MBeanServer> servers = MBeanServerFactory.findMBeanServer(null);\n    System.out.println(\"Servers in testJmxRegistration: \" + servers);\n    assertNotNull(\"MBeanServers were null\", servers);\n    assertFalse(\"No MBeanServer was found\", servers.isEmpty());\n\n    MBeanServer mbeanServer = servers.get(0);\n    assertTrue(\"No MBeans found in server\", mbeanServer.getMBeanCount() > 0);\n\n    Set<ObjectInstance> objects = mbeanServer.queryMBeans(null, null);\n    assertFalse(\"No SolrInfoMBean objects found in mbean server\", objects\n            .isEmpty());\n    for (ObjectInstance o : objects) {\n      MBeanInfo mbeanInfo = mbeanServer.getMBeanInfo(o.getObjectName());\n      if (mbeanInfo.getClassName().endsWith(SolrDynamicMBean.class.getName())) {\n        assertTrue(\"No Attributes found for mbean: \" + mbeanInfo, mbeanInfo\n                .getAttributes().length > 0);\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testJmxRegistration() throws Exception {\n    List<MBeanServer> servers = MBeanServerFactory.findMBeanServer(null);\n    System.out.println(\"Servers in testJmxRegistration: \" + servers);\n    assertNotNull(\"MBeanServers were null\", servers);\n    assertFalse(\"No MBeanServer was found\", servers.isEmpty());\n\n    MBeanServer mbeanServer = servers.get(0);\n    assertTrue(\"No MBeans found in server\", mbeanServer.getMBeanCount() > 0);\n\n    Set<ObjectInstance> objects = mbeanServer.queryMBeans(null, null);\n    assertFalse(\"No SolrInfoMBean objects found in mbean server\", objects\n            .isEmpty());\n    for (ObjectInstance o : objects) {\n      MBeanInfo mbeanInfo = mbeanServer.getMBeanInfo(o.getObjectName());\n      if (mbeanInfo.getClassName().endsWith(SolrDynamicMBean.class.getName())) {\n        assertTrue(\"No Attributes found for mbean: \" + mbeanInfo, mbeanInfo\n                .getAttributes().length > 0);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"b87b35762c441ede36091e69fd4a3b6f99dfecd1":["6ec2a01e62b7b206d9466aafaf04d8a9d6aee77b"],"6ec2a01e62b7b206d9466aafaf04d8a9d6aee77b":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"ad94625fb8d088209f46650c8097196fec67f00c":["b87b35762c441ede36091e69fd4a3b6f99dfecd1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["6ec2a01e62b7b206d9466aafaf04d8a9d6aee77b"],"b87b35762c441ede36091e69fd4a3b6f99dfecd1":["ad94625fb8d088209f46650c8097196fec67f00c"],"6ec2a01e62b7b206d9466aafaf04d8a9d6aee77b":["b87b35762c441ede36091e69fd4a3b6f99dfecd1"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}