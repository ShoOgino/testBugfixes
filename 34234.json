{"path":"src/java/org/apache/lucene/index/MergePolicy#findMergesForOptimize(SegmentInfos,IndexWriter,int,Set).mjava","commits":[{"id":"b1405362241b561f5590ff4a87d5d6e173bcd9cf","date":1190107634,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/MergePolicy#findMergesForOptimize(SegmentInfos,IndexWriter,int,Set).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Determine what set of merge operations are necessary in\n   * order to optimize the index.  The IndexWriter calls\n   * this when its optimize() method is called.  This call\n   * is always synchronized on the IndexWriter instance so\n   * only one thread at a time will call this method.\n   *\n   * @param segmentInfos the total set of segments in the index\n   * @param writer IndexWriter instance\n   * @param maxSegmentCount requested maximum number of\n   *   segments in the index (currently this is always 1)\n   * @param segmentsToOptimize contains the specific\n   *   SegmentInfo instances that must be merged away.  This\n   *   may be a subset of all SegmentInfos.\n   */\n  MergeSpecification findMergesForOptimize(SegmentInfos segmentInfos,\n                                           IndexWriter writer,\n                                           int maxSegmentCount,\n                                           Set segmentsToOptimize)\n     throws CorruptIndexException, IOException;\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d7036b32db049656b535bc2c66bc8512f24c307","date":1194517289,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/MergePolicy#findMergesForOptimize(SegmentInfos,IndexWriter,int,Set).mjava","pathOld":"src/java/org/apache/lucene/index/MergePolicy#findMergesForOptimize(SegmentInfos,IndexWriter,int,Set).mjava","sourceNew":"  /**\n   * Determine what set of merge operations are necessary in\n   * order to optimize the index.  The IndexWriter calls\n   * this when its optimize() method is called.  This call\n   * is always synchronized on the IndexWriter instance so\n   * only one thread at a time will call this method.\n   *\n   * @param segmentInfos the total set of segments in the index\n   * @param writer IndexWriter instance\n   * @param maxSegmentCount requested maximum number of\n   *   segments in the index (currently this is always 1)\n   * @param segmentsToOptimize contains the specific\n   *   SegmentInfo instances that must be merged away.  This\n   *   may be a subset of all SegmentInfos.\n   */\n  abstract MergeSpecification findMergesForOptimize(SegmentInfos segmentInfos,\n                                                    IndexWriter writer,\n                                                    int maxSegmentCount,\n                                                    Set segmentsToOptimize)\n    throws CorruptIndexException, IOException;\n\n","sourceOld":"  /**\n   * Determine what set of merge operations are necessary in\n   * order to optimize the index.  The IndexWriter calls\n   * this when its optimize() method is called.  This call\n   * is always synchronized on the IndexWriter instance so\n   * only one thread at a time will call this method.\n   *\n   * @param segmentInfos the total set of segments in the index\n   * @param writer IndexWriter instance\n   * @param maxSegmentCount requested maximum number of\n   *   segments in the index (currently this is always 1)\n   * @param segmentsToOptimize contains the specific\n   *   SegmentInfo instances that must be merged away.  This\n   *   may be a subset of all SegmentInfos.\n   */\n  MergeSpecification findMergesForOptimize(SegmentInfos segmentInfos,\n                                           IndexWriter writer,\n                                           int maxSegmentCount,\n                                           Set segmentsToOptimize)\n     throws CorruptIndexException, IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"51cd38b90c674ebecc798654e3574d5790a9aced","date":1202762089,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/MergePolicy#findMergesForOptimize(SegmentInfos,IndexWriter,int,Set).mjava","pathOld":"src/java/org/apache/lucene/index/MergePolicy#findMergesForOptimize(SegmentInfos,IndexWriter,int,Set).mjava","sourceNew":"  /**\n   * Determine what set of merge operations is necessary in\n   * order to optimize the index.  The IndexWriter calls\n   * this when its optimize() method is called.  This call\n   * is always synchronized on the IndexWriter instance so\n   * only one thread at a time will call this method.\n   *\n   * @param segmentInfos the total set of segments in the index\n   * @param writer IndexWriter instance\n   * @param maxSegmentCount requested maximum number of\n   *   segments in the index (currently this is always 1)\n   * @param segmentsToOptimize contains the specific\n   *   SegmentInfo instances that must be merged away.  This\n   *   may be a subset of all SegmentInfos.\n   */\n  abstract MergeSpecification findMergesForOptimize(SegmentInfos segmentInfos,\n                                                    IndexWriter writer,\n                                                    int maxSegmentCount,\n                                                    Set segmentsToOptimize)\n    throws CorruptIndexException, IOException;\n\n","sourceOld":"  /**\n   * Determine what set of merge operations are necessary in\n   * order to optimize the index.  The IndexWriter calls\n   * this when its optimize() method is called.  This call\n   * is always synchronized on the IndexWriter instance so\n   * only one thread at a time will call this method.\n   *\n   * @param segmentInfos the total set of segments in the index\n   * @param writer IndexWriter instance\n   * @param maxSegmentCount requested maximum number of\n   *   segments in the index (currently this is always 1)\n   * @param segmentsToOptimize contains the specific\n   *   SegmentInfo instances that must be merged away.  This\n   *   may be a subset of all SegmentInfos.\n   */\n  abstract MergeSpecification findMergesForOptimize(SegmentInfos segmentInfos,\n                                                    IndexWriter writer,\n                                                    int maxSegmentCount,\n                                                    Set segmentsToOptimize)\n    throws CorruptIndexException, IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"13eaef7d286f35b5c850a1c2eb7b337679aa6453","date":1249118545,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/index/MergePolicy#findMergesForOptimize(SegmentInfos,IndexWriter,int,Set).mjava","sourceNew":null,"sourceOld":"  /**\n   * Determine what set of merge operations is necessary in\n   * order to optimize the index.  The IndexWriter calls\n   * this when its optimize() method is called.  This call\n   * is always synchronized on the IndexWriter instance so\n   * only one thread at a time will call this method.\n   *\n   * @param segmentInfos the total set of segments in the index\n   * @param writer IndexWriter instance\n   * @param maxSegmentCount requested maximum number of\n   *   segments in the index (currently this is always 1)\n   * @param segmentsToOptimize contains the specific\n   *   SegmentInfo instances that must be merged away.  This\n   *   may be a subset of all SegmentInfos.\n   */\n  abstract MergeSpecification findMergesForOptimize(SegmentInfos segmentInfos,\n                                                    IndexWriter writer,\n                                                    int maxSegmentCount,\n                                                    Set segmentsToOptimize)\n    throws CorruptIndexException, IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b1405362241b561f5590ff4a87d5d6e173bcd9cf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"51cd38b90c674ebecc798654e3574d5790a9aced":["1d7036b32db049656b535bc2c66bc8512f24c307"],"13eaef7d286f35b5c850a1c2eb7b337679aa6453":["51cd38b90c674ebecc798654e3574d5790a9aced"],"1d7036b32db049656b535bc2c66bc8512f24c307":["b1405362241b561f5590ff4a87d5d6e173bcd9cf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["13eaef7d286f35b5c850a1c2eb7b337679aa6453"]},"commit2Childs":{"b1405362241b561f5590ff4a87d5d6e173bcd9cf":["1d7036b32db049656b535bc2c66bc8512f24c307"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b1405362241b561f5590ff4a87d5d6e173bcd9cf"],"51cd38b90c674ebecc798654e3574d5790a9aced":["13eaef7d286f35b5c850a1c2eb7b337679aa6453"],"13eaef7d286f35b5c850a1c2eb7b337679aa6453":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1d7036b32db049656b535bc2c66bc8512f24c307":["51cd38b90c674ebecc798654e3574d5790a9aced"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}