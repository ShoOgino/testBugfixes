{"path":"solr/src/java/org/apache/solr/update/DirectUpdateHandler2#deleteByQuery(DeleteUpdateCommand).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/update/DirectUpdateHandler2#deleteByQuery(DeleteUpdateCommand).mjava","pathOld":"/dev/null","sourceNew":"  // why not return number of docs deleted?\n  // Depending on implementation, we may not be able to immediately determine the num...\n   public void deleteByQuery(DeleteUpdateCommand cmd) throws IOException {\n     deleteByQueryCommands.incrementAndGet();\n     deleteByQueryCommandsCumulative.incrementAndGet();\n\n     if (!cmd.fromPending && !cmd.fromCommitted) {\n       numErrors.incrementAndGet();\n       numErrorsCumulative.incrementAndGet();\n       throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"meaningless command: \" + cmd);\n     }\n     if (!cmd.fromPending || !cmd.fromCommitted) {\n       numErrors.incrementAndGet();\n       numErrorsCumulative.incrementAndGet();\n       throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"operation not supported\" + cmd);\n     }\n\n    boolean madeIt=false;\n    boolean delAll=false;\n    try {\n     Query q = QueryParsing.parseQuery(cmd.query, schema);\n     delAll = MatchAllDocsQuery.class == q.getClass();\n\n     iwCommit.lock();\n     try {\n       if (delAll) {\n         deleteAll();\n       } else {\n        openWriter();\n        writer.deleteDocuments(q);\n       }\n     } finally {\n       iwCommit.unlock();\n     }\n\n     madeIt=true;\n\n     if( tracker.timeUpperBound > 0 ) {\n       tracker.scheduleCommitWithin( tracker.timeUpperBound );\n     }\n    } finally {\n      if (!madeIt) {\n        numErrors.incrementAndGet();\n        numErrorsCumulative.incrementAndGet();\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/update/DirectUpdateHandler2#deleteByQuery(DeleteUpdateCommand).mjava","sourceNew":null,"sourceOld":"  // why not return number of docs deleted?\n  // Depending on implementation, we may not be able to immediately determine the num...\n   public void deleteByQuery(DeleteUpdateCommand cmd) throws IOException {\n     deleteByQueryCommands.incrementAndGet();\n     deleteByQueryCommandsCumulative.incrementAndGet();\n\n     if (!cmd.fromPending && !cmd.fromCommitted) {\n       numErrors.incrementAndGet();\n       numErrorsCumulative.incrementAndGet();\n       throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"meaningless command: \" + cmd);\n     }\n     if (!cmd.fromPending || !cmd.fromCommitted) {\n       numErrors.incrementAndGet();\n       numErrorsCumulative.incrementAndGet();\n       throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"operation not supported\" + cmd);\n     }\n\n    boolean madeIt=false;\n    boolean delAll=false;\n    try {\n     Query q = QueryParsing.parseQuery(cmd.query, schema);\n     delAll = MatchAllDocsQuery.class == q.getClass();\n\n     iwCommit.lock();\n     try {\n       if (delAll) {\n         deleteAll();\n       } else {\n        openWriter();\n        writer.deleteDocuments(q);\n       }\n     } finally {\n       iwCommit.unlock();\n     }\n\n     madeIt=true;\n\n     if( tracker.timeUpperBound > 0 ) {\n       tracker.scheduleCommitWithin( tracker.timeUpperBound );\n     }\n    } finally {\n      if (!madeIt) {\n        numErrors.incrementAndGet();\n        numErrorsCumulative.incrementAndGet();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/update/DirectUpdateHandler2#deleteByQuery(DeleteUpdateCommand).mjava","pathOld":"src/java/org/apache/solr/update/DirectUpdateHandler2#deleteByQuery(DeleteUpdateCommand).mjava","sourceNew":"  // why not return number of docs deleted?\n  // Depending on implementation, we may not be able to immediately determine the num...\n   public void deleteByQuery(DeleteUpdateCommand cmd) throws IOException {\n     deleteByQueryCommands.incrementAndGet();\n     deleteByQueryCommandsCumulative.incrementAndGet();\n\n     if (!cmd.fromPending && !cmd.fromCommitted) {\n       numErrors.incrementAndGet();\n       numErrorsCumulative.incrementAndGet();\n       throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"meaningless command: \" + cmd);\n     }\n     if (!cmd.fromPending || !cmd.fromCommitted) {\n       numErrors.incrementAndGet();\n       numErrorsCumulative.incrementAndGet();\n       throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"operation not supported\" + cmd);\n     }\n\n    boolean madeIt=false;\n    boolean delAll=false;\n    try {\n     Query q = QueryParsing.parseQuery(cmd.query, schema);\n     delAll = MatchAllDocsQuery.class == q.getClass();\n\n     iwCommit.lock();\n     try {\n       if (delAll) {\n         deleteAll();\n       } else {\n        openWriter();\n        writer.deleteDocuments(q);\n       }\n     } finally {\n       iwCommit.unlock();\n     }\n\n     madeIt=true;\n\n     if( tracker.timeUpperBound > 0 ) {\n       tracker.scheduleCommitWithin( tracker.timeUpperBound );\n     }\n    } finally {\n      if (!madeIt) {\n        numErrors.incrementAndGet();\n        numErrorsCumulative.incrementAndGet();\n      }\n    }\n  }\n\n","sourceOld":"  // why not return number of docs deleted?\n  // Depending on implementation, we may not be able to immediately determine the num...\n   public void deleteByQuery(DeleteUpdateCommand cmd) throws IOException {\n     deleteByQueryCommands.incrementAndGet();\n     deleteByQueryCommandsCumulative.incrementAndGet();\n\n     if (!cmd.fromPending && !cmd.fromCommitted) {\n       numErrors.incrementAndGet();\n       numErrorsCumulative.incrementAndGet();\n       throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"meaningless command: \" + cmd);\n     }\n     if (!cmd.fromPending || !cmd.fromCommitted) {\n       numErrors.incrementAndGet();\n       numErrorsCumulative.incrementAndGet();\n       throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"operation not supported\" + cmd);\n     }\n\n    boolean madeIt=false;\n    boolean delAll=false;\n    try {\n     Query q = QueryParsing.parseQuery(cmd.query, schema);\n     delAll = MatchAllDocsQuery.class == q.getClass();\n\n     iwCommit.lock();\n     try {\n       if (delAll) {\n         deleteAll();\n       } else {\n        openWriter();\n        writer.deleteDocuments(q);\n       }\n     } finally {\n       iwCommit.unlock();\n     }\n\n     madeIt=true;\n\n     if( tracker.timeUpperBound > 0 ) {\n       tracker.scheduleCommitWithin( tracker.timeUpperBound );\n     }\n    } finally {\n      if (!madeIt) {\n        numErrors.incrementAndGet();\n        numErrorsCumulative.incrementAndGet();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/update/DirectUpdateHandler2#deleteByQuery(DeleteUpdateCommand).mjava","pathOld":"/dev/null","sourceNew":"  // why not return number of docs deleted?\n  // Depending on implementation, we may not be able to immediately determine the num...\n   public void deleteByQuery(DeleteUpdateCommand cmd) throws IOException {\n     deleteByQueryCommands.incrementAndGet();\n     deleteByQueryCommandsCumulative.incrementAndGet();\n\n     if (!cmd.fromPending && !cmd.fromCommitted) {\n       numErrors.incrementAndGet();\n       numErrorsCumulative.incrementAndGet();\n       throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"meaningless command: \" + cmd);\n     }\n     if (!cmd.fromPending || !cmd.fromCommitted) {\n       numErrors.incrementAndGet();\n       numErrorsCumulative.incrementAndGet();\n       throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"operation not supported\" + cmd);\n     }\n\n    boolean madeIt=false;\n    boolean delAll=false;\n    try {\n     Query q = QueryParsing.parseQuery(cmd.query, schema);\n     delAll = MatchAllDocsQuery.class == q.getClass();\n\n     iwCommit.lock();\n     try {\n       if (delAll) {\n         deleteAll();\n       } else {\n        openWriter();\n        writer.deleteDocuments(q);\n       }\n     } finally {\n       iwCommit.unlock();\n     }\n\n     madeIt=true;\n\n     if( tracker.timeUpperBound > 0 ) {\n       tracker.scheduleCommitWithin( tracker.timeUpperBound );\n     }\n    } finally {\n      if (!madeIt) {\n        numErrors.incrementAndGet();\n        numErrorsCumulative.incrementAndGet();\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ed933d2b081552e6023045460dbf1b1be599a819","date":1293378535,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/update/DirectUpdateHandler2#deleteByQuery(DeleteUpdateCommand).mjava","pathOld":"solr/src/java/org/apache/solr/update/DirectUpdateHandler2#deleteByQuery(DeleteUpdateCommand).mjava","sourceNew":"  // why not return number of docs deleted?\n  // Depending on implementation, we may not be able to immediately determine the num...\n   public void deleteByQuery(DeleteUpdateCommand cmd) throws IOException {\n     deleteByQueryCommands.incrementAndGet();\n     deleteByQueryCommandsCumulative.incrementAndGet();\n\n    boolean madeIt=false;\n    boolean delAll=false;\n    try {\n     Query q = QueryParsing.parseQuery(cmd.query, schema);\n     delAll = MatchAllDocsQuery.class == q.getClass();\n\n     iwCommit.lock();\n     try {\n       if (delAll) {\n         deleteAll();\n       } else {\n        openWriter();\n        writer.deleteDocuments(q);\n       }\n     } finally {\n       iwCommit.unlock();\n     }\n\n     madeIt=true;\n\n     if( tracker.timeUpperBound > 0 ) {\n       tracker.scheduleCommitWithin( tracker.timeUpperBound );\n     }\n    } finally {\n      if (!madeIt) {\n        numErrors.incrementAndGet();\n        numErrorsCumulative.incrementAndGet();\n      }\n    }\n  }\n\n","sourceOld":"  // why not return number of docs deleted?\n  // Depending on implementation, we may not be able to immediately determine the num...\n   public void deleteByQuery(DeleteUpdateCommand cmd) throws IOException {\n     deleteByQueryCommands.incrementAndGet();\n     deleteByQueryCommandsCumulative.incrementAndGet();\n\n     if (!cmd.fromPending && !cmd.fromCommitted) {\n       numErrors.incrementAndGet();\n       numErrorsCumulative.incrementAndGet();\n       throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"meaningless command: \" + cmd);\n     }\n     if (!cmd.fromPending || !cmd.fromCommitted) {\n       numErrors.incrementAndGet();\n       numErrorsCumulative.incrementAndGet();\n       throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"operation not supported\" + cmd);\n     }\n\n    boolean madeIt=false;\n    boolean delAll=false;\n    try {\n     Query q = QueryParsing.parseQuery(cmd.query, schema);\n     delAll = MatchAllDocsQuery.class == q.getClass();\n\n     iwCommit.lock();\n     try {\n       if (delAll) {\n         deleteAll();\n       } else {\n        openWriter();\n        writer.deleteDocuments(q);\n       }\n     } finally {\n       iwCommit.unlock();\n     }\n\n     madeIt=true;\n\n     if( tracker.timeUpperBound > 0 ) {\n       tracker.scheduleCommitWithin( tracker.timeUpperBound );\n     }\n    } finally {\n      if (!madeIt) {\n        numErrors.incrementAndGet();\n        numErrorsCumulative.incrementAndGet();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e48ed0466fe2d4f8ba58a47caef1174d9e856d13","date":1293745585,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/update/DirectUpdateHandler2#deleteByQuery(DeleteUpdateCommand).mjava","pathOld":"solr/src/java/org/apache/solr/update/DirectUpdateHandler2#deleteByQuery(DeleteUpdateCommand).mjava","sourceNew":"  // why not return number of docs deleted?\n  // Depending on implementation, we may not be able to immediately determine the num...\n  public void deleteByQuery(DeleteUpdateCommand cmd) throws IOException {\n    deleteByQueryCommands.incrementAndGet();\n    deleteByQueryCommandsCumulative.incrementAndGet();\n\n    boolean madeIt=false;\n    boolean delAll=false;\n    try {\n      Query q = null;\n      try {\n        QParser parser = QParser.getParser(cmd.query, \"lucene\", cmd.req);\n        q = parser.getQuery();\n      } catch (ParseException e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n      }\n\n      delAll = MatchAllDocsQuery.class == q.getClass();\n\n      iwCommit.lock();\n      try {\n        if (delAll) {\n          deleteAll();\n        } else {\n          openWriter();\n          writer.deleteDocuments(q);\n        }\n      } finally {\n        iwCommit.unlock();\n      }\n\n      madeIt=true;\n\n      if( tracker.timeUpperBound > 0 ) {\n        tracker.scheduleCommitWithin( tracker.timeUpperBound );\n      }\n    } finally {\n      if (!madeIt) {\n        numErrors.incrementAndGet();\n        numErrorsCumulative.incrementAndGet();\n      }\n    }\n  }\n\n","sourceOld":"  // why not return number of docs deleted?\n  // Depending on implementation, we may not be able to immediately determine the num...\n   public void deleteByQuery(DeleteUpdateCommand cmd) throws IOException {\n     deleteByQueryCommands.incrementAndGet();\n     deleteByQueryCommandsCumulative.incrementAndGet();\n\n    boolean madeIt=false;\n    boolean delAll=false;\n    try {\n     Query q = QueryParsing.parseQuery(cmd.query, schema);\n     delAll = MatchAllDocsQuery.class == q.getClass();\n\n     iwCommit.lock();\n     try {\n       if (delAll) {\n         deleteAll();\n       } else {\n        openWriter();\n        writer.deleteDocuments(q);\n       }\n     } finally {\n       iwCommit.unlock();\n     }\n\n     madeIt=true;\n\n     if( tracker.timeUpperBound > 0 ) {\n       tracker.scheduleCommitWithin( tracker.timeUpperBound );\n     }\n    } finally {\n      if (!madeIt) {\n        numErrors.incrementAndGet();\n        numErrorsCumulative.incrementAndGet();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c","date":1294014627,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/update/DirectUpdateHandler2#deleteByQuery(DeleteUpdateCommand).mjava","pathOld":"solr/src/java/org/apache/solr/update/DirectUpdateHandler2#deleteByQuery(DeleteUpdateCommand).mjava","sourceNew":"  // why not return number of docs deleted?\n  // Depending on implementation, we may not be able to immediately determine the num...\n  public void deleteByQuery(DeleteUpdateCommand cmd) throws IOException {\n    deleteByQueryCommands.incrementAndGet();\n    deleteByQueryCommandsCumulative.incrementAndGet();\n\n    boolean madeIt=false;\n    boolean delAll=false;\n    try {\n      Query q = null;\n      try {\n        QParser parser = QParser.getParser(cmd.query, \"lucene\", cmd.req);\n        q = parser.getQuery();\n      } catch (ParseException e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n      }\n\n      delAll = MatchAllDocsQuery.class == q.getClass();\n\n      iwCommit.lock();\n      try {\n        if (delAll) {\n          deleteAll();\n        } else {\n          openWriter();\n          writer.deleteDocuments(q);\n        }\n      } finally {\n        iwCommit.unlock();\n      }\n\n      madeIt=true;\n\n      if( tracker.timeUpperBound > 0 ) {\n        tracker.scheduleCommitWithin( tracker.timeUpperBound );\n      }\n    } finally {\n      if (!madeIt) {\n        numErrors.incrementAndGet();\n        numErrorsCumulative.incrementAndGet();\n      }\n    }\n  }\n\n","sourceOld":"  // why not return number of docs deleted?\n  // Depending on implementation, we may not be able to immediately determine the num...\n   public void deleteByQuery(DeleteUpdateCommand cmd) throws IOException {\n     deleteByQueryCommands.incrementAndGet();\n     deleteByQueryCommandsCumulative.incrementAndGet();\n\n     if (!cmd.fromPending && !cmd.fromCommitted) {\n       numErrors.incrementAndGet();\n       numErrorsCumulative.incrementAndGet();\n       throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"meaningless command: \" + cmd);\n     }\n     if (!cmd.fromPending || !cmd.fromCommitted) {\n       numErrors.incrementAndGet();\n       numErrorsCumulative.incrementAndGet();\n       throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"operation not supported\" + cmd);\n     }\n\n    boolean madeIt=false;\n    boolean delAll=false;\n    try {\n     Query q = QueryParsing.parseQuery(cmd.query, schema);\n     delAll = MatchAllDocsQuery.class == q.getClass();\n\n     iwCommit.lock();\n     try {\n       if (delAll) {\n         deleteAll();\n       } else {\n        openWriter();\n        writer.deleteDocuments(q);\n       }\n     } finally {\n       iwCommit.unlock();\n     }\n\n     madeIt=true;\n\n     if( tracker.timeUpperBound > 0 ) {\n       tracker.scheduleCommitWithin( tracker.timeUpperBound );\n     }\n    } finally {\n      if (!madeIt) {\n        numErrors.incrementAndGet();\n        numErrorsCumulative.incrementAndGet();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/update/DirectUpdateHandler2#deleteByQuery(DeleteUpdateCommand).mjava","pathOld":"solr/src/java/org/apache/solr/update/DirectUpdateHandler2#deleteByQuery(DeleteUpdateCommand).mjava","sourceNew":"  // why not return number of docs deleted?\n  // Depending on implementation, we may not be able to immediately determine the num...\n  public void deleteByQuery(DeleteUpdateCommand cmd) throws IOException {\n    deleteByQueryCommands.incrementAndGet();\n    deleteByQueryCommandsCumulative.incrementAndGet();\n\n    boolean madeIt=false;\n    boolean delAll=false;\n    try {\n      Query q = null;\n      try {\n        QParser parser = QParser.getParser(cmd.query, \"lucene\", cmd.req);\n        q = parser.getQuery();\n      } catch (ParseException e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n      }\n\n      delAll = MatchAllDocsQuery.class == q.getClass();\n\n      iwCommit.lock();\n      try {\n        if (delAll) {\n          deleteAll();\n        } else {\n          openWriter();\n          writer.deleteDocuments(q);\n        }\n      } finally {\n        iwCommit.unlock();\n      }\n\n      madeIt=true;\n\n      if( tracker.timeUpperBound > 0 ) {\n        tracker.scheduleCommitWithin( tracker.timeUpperBound );\n      }\n    } finally {\n      if (!madeIt) {\n        numErrors.incrementAndGet();\n        numErrorsCumulative.incrementAndGet();\n      }\n    }\n  }\n\n","sourceOld":"  // why not return number of docs deleted?\n  // Depending on implementation, we may not be able to immediately determine the num...\n   public void deleteByQuery(DeleteUpdateCommand cmd) throws IOException {\n     deleteByQueryCommands.incrementAndGet();\n     deleteByQueryCommandsCumulative.incrementAndGet();\n\n     if (!cmd.fromPending && !cmd.fromCommitted) {\n       numErrors.incrementAndGet();\n       numErrorsCumulative.incrementAndGet();\n       throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"meaningless command: \" + cmd);\n     }\n     if (!cmd.fromPending || !cmd.fromCommitted) {\n       numErrors.incrementAndGet();\n       numErrorsCumulative.incrementAndGet();\n       throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"operation not supported\" + cmd);\n     }\n\n    boolean madeIt=false;\n    boolean delAll=false;\n    try {\n     Query q = QueryParsing.parseQuery(cmd.query, schema);\n     delAll = MatchAllDocsQuery.class == q.getClass();\n\n     iwCommit.lock();\n     try {\n       if (delAll) {\n         deleteAll();\n       } else {\n        openWriter();\n        writer.deleteDocuments(q);\n       }\n     } finally {\n       iwCommit.unlock();\n     }\n\n     madeIt=true;\n\n     if( tracker.timeUpperBound > 0 ) {\n       tracker.scheduleCommitWithin( tracker.timeUpperBound );\n     }\n    } finally {\n      if (!madeIt) {\n        numErrors.incrementAndGet();\n        numErrorsCumulative.incrementAndGet();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01","date":1296400215,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/update/DirectUpdateHandler2#deleteByQuery(DeleteUpdateCommand).mjava","pathOld":"solr/src/java/org/apache/solr/update/DirectUpdateHandler2#deleteByQuery(DeleteUpdateCommand).mjava","sourceNew":"  // why not return number of docs deleted?\n  // Depending on implementation, we may not be able to immediately determine the num...\n  @Override\n  public void deleteByQuery(DeleteUpdateCommand cmd) throws IOException {\n    deleteByQueryCommands.incrementAndGet();\n    deleteByQueryCommandsCumulative.incrementAndGet();\n\n    boolean madeIt=false;\n    boolean delAll=false;\n    try {\n      Query q = null;\n      try {\n        QParser parser = QParser.getParser(cmd.query, \"lucene\", cmd.req);\n        q = parser.getQuery();\n      } catch (ParseException e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n      }\n\n      delAll = MatchAllDocsQuery.class == q.getClass();\n\n      iwCommit.lock();\n      try {\n        if (delAll) {\n          deleteAll();\n        } else {\n          openWriter();\n          writer.deleteDocuments(q);\n        }\n      } finally {\n        iwCommit.unlock();\n      }\n\n      madeIt=true;\n\n      if( tracker.timeUpperBound > 0 ) {\n        tracker.scheduleCommitWithin( tracker.timeUpperBound );\n      }\n    } finally {\n      if (!madeIt) {\n        numErrors.incrementAndGet();\n        numErrorsCumulative.incrementAndGet();\n      }\n    }\n  }\n\n","sourceOld":"  // why not return number of docs deleted?\n  // Depending on implementation, we may not be able to immediately determine the num...\n  public void deleteByQuery(DeleteUpdateCommand cmd) throws IOException {\n    deleteByQueryCommands.incrementAndGet();\n    deleteByQueryCommandsCumulative.incrementAndGet();\n\n    boolean madeIt=false;\n    boolean delAll=false;\n    try {\n      Query q = null;\n      try {\n        QParser parser = QParser.getParser(cmd.query, \"lucene\", cmd.req);\n        q = parser.getQuery();\n      } catch (ParseException e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n      }\n\n      delAll = MatchAllDocsQuery.class == q.getClass();\n\n      iwCommit.lock();\n      try {\n        if (delAll) {\n          deleteAll();\n        } else {\n          openWriter();\n          writer.deleteDocuments(q);\n        }\n      } finally {\n        iwCommit.unlock();\n      }\n\n      madeIt=true;\n\n      if( tracker.timeUpperBound > 0 ) {\n        tracker.scheduleCommitWithin( tracker.timeUpperBound );\n      }\n    } finally {\n      if (!madeIt) {\n        numErrors.incrementAndGet();\n        numErrorsCumulative.incrementAndGet();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/update/DirectUpdateHandler2#deleteByQuery(DeleteUpdateCommand).mjava","pathOld":"solr/src/java/org/apache/solr/update/DirectUpdateHandler2#deleteByQuery(DeleteUpdateCommand).mjava","sourceNew":"  // why not return number of docs deleted?\n  // Depending on implementation, we may not be able to immediately determine the num...\n  @Override\n  public void deleteByQuery(DeleteUpdateCommand cmd) throws IOException {\n    deleteByQueryCommands.incrementAndGet();\n    deleteByQueryCommandsCumulative.incrementAndGet();\n\n    boolean madeIt=false;\n    boolean delAll=false;\n    try {\n      Query q = null;\n      try {\n        QParser parser = QParser.getParser(cmd.query, \"lucene\", cmd.req);\n        q = parser.getQuery();\n      } catch (ParseException e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n      }\n\n      delAll = MatchAllDocsQuery.class == q.getClass();\n\n      iwCommit.lock();\n      try {\n        if (delAll) {\n          deleteAll();\n        } else {\n          openWriter();\n          writer.deleteDocuments(q);\n        }\n      } finally {\n        iwCommit.unlock();\n      }\n\n      madeIt=true;\n\n      if( tracker.timeUpperBound > 0 ) {\n        tracker.scheduleCommitWithin( tracker.timeUpperBound );\n      }\n    } finally {\n      if (!madeIt) {\n        numErrors.incrementAndGet();\n        numErrorsCumulative.incrementAndGet();\n      }\n    }\n  }\n\n","sourceOld":"  // why not return number of docs deleted?\n  // Depending on implementation, we may not be able to immediately determine the num...\n  public void deleteByQuery(DeleteUpdateCommand cmd) throws IOException {\n    deleteByQueryCommands.incrementAndGet();\n    deleteByQueryCommandsCumulative.incrementAndGet();\n\n    boolean madeIt=false;\n    boolean delAll=false;\n    try {\n      Query q = null;\n      try {\n        QParser parser = QParser.getParser(cmd.query, \"lucene\", cmd.req);\n        q = parser.getQuery();\n      } catch (ParseException e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n      }\n\n      delAll = MatchAllDocsQuery.class == q.getClass();\n\n      iwCommit.lock();\n      try {\n        if (delAll) {\n          deleteAll();\n        } else {\n          openWriter();\n          writer.deleteDocuments(q);\n        }\n      } finally {\n        iwCommit.unlock();\n      }\n\n      madeIt=true;\n\n      if( tracker.timeUpperBound > 0 ) {\n        tracker.scheduleCommitWithin( tracker.timeUpperBound );\n      }\n    } finally {\n      if (!madeIt) {\n        numErrors.incrementAndGet();\n        numErrorsCumulative.incrementAndGet();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/update/DirectUpdateHandler2#deleteByQuery(DeleteUpdateCommand).mjava","pathOld":"solr/src/java/org/apache/solr/update/DirectUpdateHandler2#deleteByQuery(DeleteUpdateCommand).mjava","sourceNew":"  // why not return number of docs deleted?\n  // Depending on implementation, we may not be able to immediately determine the num...\n  @Override\n  public void deleteByQuery(DeleteUpdateCommand cmd) throws IOException {\n    deleteByQueryCommands.incrementAndGet();\n    deleteByQueryCommandsCumulative.incrementAndGet();\n\n    boolean madeIt=false;\n    boolean delAll=false;\n    try {\n      Query q = null;\n      try {\n        QParser parser = QParser.getParser(cmd.query, \"lucene\", cmd.req);\n        q = parser.getQuery();\n      } catch (ParseException e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n      }\n\n      delAll = MatchAllDocsQuery.class == q.getClass();\n\n      iwCommit.lock();\n      try {\n        if (delAll) {\n          deleteAll();\n        } else {\n          openWriter();\n          writer.deleteDocuments(q);\n        }\n      } finally {\n        iwCommit.unlock();\n      }\n\n      madeIt=true;\n\n      if( tracker.timeUpperBound > 0 ) {\n        tracker.scheduleCommitWithin( tracker.timeUpperBound );\n      }\n    } finally {\n      if (!madeIt) {\n        numErrors.incrementAndGet();\n        numErrorsCumulative.incrementAndGet();\n      }\n    }\n  }\n\n","sourceOld":"  // why not return number of docs deleted?\n  // Depending on implementation, we may not be able to immediately determine the num...\n  public void deleteByQuery(DeleteUpdateCommand cmd) throws IOException {\n    deleteByQueryCommands.incrementAndGet();\n    deleteByQueryCommandsCumulative.incrementAndGet();\n\n    boolean madeIt=false;\n    boolean delAll=false;\n    try {\n      Query q = null;\n      try {\n        QParser parser = QParser.getParser(cmd.query, \"lucene\", cmd.req);\n        q = parser.getQuery();\n      } catch (ParseException e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n      }\n\n      delAll = MatchAllDocsQuery.class == q.getClass();\n\n      iwCommit.lock();\n      try {\n        if (delAll) {\n          deleteAll();\n        } else {\n          openWriter();\n          writer.deleteDocuments(q);\n        }\n      } finally {\n        iwCommit.unlock();\n      }\n\n      madeIt=true;\n\n      if( tracker.timeUpperBound > 0 ) {\n        tracker.scheduleCommitWithin( tracker.timeUpperBound );\n      }\n    } finally {\n      if (!madeIt) {\n        numErrors.incrementAndGet();\n        numErrorsCumulative.incrementAndGet();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a71a0b2d4be2299a163f60626729852d81a8e02","date":1309442399,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/update/DirectUpdateHandler2#deleteByQuery(DeleteUpdateCommand).mjava","pathOld":"solr/src/java/org/apache/solr/update/DirectUpdateHandler2#deleteByQuery(DeleteUpdateCommand).mjava","sourceNew":"  // why not return number of docs deleted?\n  // Depending on implementation, we may not be able to immediately determine the num...\n  @Override\n  public void deleteByQuery(DeleteUpdateCommand cmd) throws IOException {\n    deleteByQueryCommands.incrementAndGet();\n    deleteByQueryCommandsCumulative.incrementAndGet();\n    boolean madeIt=false;\n    boolean delAll=false;\n    try {\n      Query q = null;\n      try {\n        QParser parser = QParser.getParser(cmd.query, \"lucene\", cmd.req);\n        q = parser.getQuery();\n      } catch (ParseException e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n      }\n      \n      delAll = MatchAllDocsQuery.class == q.getClass();\n      \n      if (delAll) {\n        deleteAll();\n      } else {\n        indexWriterProvider.getIndexWriter().deleteDocuments(q);\n      }\n      \n      madeIt = true;\n      \n      if (commitTracker.timeUpperBound > 0) {\n        commitTracker.scheduleCommitWithin(commitTracker.timeUpperBound);\n      } else if (softCommitTracker.timeUpperBound > 0) {\n        softCommitTracker.scheduleCommitWithin(softCommitTracker.timeUpperBound);\n      }\n      \n    } finally {\n      if (!madeIt) {\n        numErrors.incrementAndGet();\n        numErrorsCumulative.incrementAndGet();\n      }\n    }\n  }\n\n","sourceOld":"  // why not return number of docs deleted?\n  // Depending on implementation, we may not be able to immediately determine the num...\n  @Override\n  public void deleteByQuery(DeleteUpdateCommand cmd) throws IOException {\n    deleteByQueryCommands.incrementAndGet();\n    deleteByQueryCommandsCumulative.incrementAndGet();\n\n    boolean madeIt=false;\n    boolean delAll=false;\n    try {\n      Query q = null;\n      try {\n        QParser parser = QParser.getParser(cmd.query, \"lucene\", cmd.req);\n        q = parser.getQuery();\n      } catch (ParseException e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n      }\n\n      delAll = MatchAllDocsQuery.class == q.getClass();\n\n      iwCommit.lock();\n      try {\n        if (delAll) {\n          deleteAll();\n        } else {\n          openWriter();\n          writer.deleteDocuments(q);\n        }\n      } finally {\n        iwCommit.unlock();\n      }\n\n      madeIt=true;\n\n      if( tracker.timeUpperBound > 0 ) {\n        tracker.scheduleCommitWithin( tracker.timeUpperBound );\n      }\n    } finally {\n      if (!madeIt) {\n        numErrors.incrementAndGet();\n        numErrorsCumulative.incrementAndGet();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/update/DirectUpdateHandler2#deleteByQuery(DeleteUpdateCommand).mjava","pathOld":"solr/src/java/org/apache/solr/update/DirectUpdateHandler2#deleteByQuery(DeleteUpdateCommand).mjava","sourceNew":"  // why not return number of docs deleted?\n  // Depending on implementation, we may not be able to immediately determine the num...\n  @Override\n  public void deleteByQuery(DeleteUpdateCommand cmd) throws IOException {\n    deleteByQueryCommands.incrementAndGet();\n    deleteByQueryCommandsCumulative.incrementAndGet();\n    boolean madeIt=false;\n    boolean delAll=false;\n    try {\n      Query q = null;\n      try {\n        QParser parser = QParser.getParser(cmd.query, \"lucene\", cmd.req);\n        q = parser.getQuery();\n      } catch (ParseException e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n      }\n      \n      delAll = MatchAllDocsQuery.class == q.getClass();\n      \n      if (delAll) {\n        deleteAll();\n      } else {\n        indexWriterProvider.getIndexWriter().deleteDocuments(q);\n      }\n      \n      madeIt = true;\n      \n      if (commitTracker.timeUpperBound > 0) {\n        commitTracker.scheduleCommitWithin(commitTracker.timeUpperBound);\n      } else if (softCommitTracker.timeUpperBound > 0) {\n        softCommitTracker.scheduleCommitWithin(softCommitTracker.timeUpperBound);\n      }\n      \n    } finally {\n      if (!madeIt) {\n        numErrors.incrementAndGet();\n        numErrorsCumulative.incrementAndGet();\n      }\n    }\n  }\n\n","sourceOld":"  // why not return number of docs deleted?\n  // Depending on implementation, we may not be able to immediately determine the num...\n  @Override\n  public void deleteByQuery(DeleteUpdateCommand cmd) throws IOException {\n    deleteByQueryCommands.incrementAndGet();\n    deleteByQueryCommandsCumulative.incrementAndGet();\n\n    boolean madeIt=false;\n    boolean delAll=false;\n    try {\n      Query q = null;\n      try {\n        QParser parser = QParser.getParser(cmd.query, \"lucene\", cmd.req);\n        q = parser.getQuery();\n      } catch (ParseException e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n      }\n\n      delAll = MatchAllDocsQuery.class == q.getClass();\n\n      iwCommit.lock();\n      try {\n        if (delAll) {\n          deleteAll();\n        } else {\n          openWriter();\n          writer.deleteDocuments(q);\n        }\n      } finally {\n        iwCommit.unlock();\n      }\n\n      madeIt=true;\n\n      if( tracker.timeUpperBound > 0 ) {\n        tracker.scheduleCommitWithin( tracker.timeUpperBound );\n      }\n    } finally {\n      if (!madeIt) {\n        numErrors.incrementAndGet();\n        numErrorsCumulative.incrementAndGet();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/update/DirectUpdateHandler2#deleteByQuery(DeleteUpdateCommand).mjava","pathOld":"solr/src/java/org/apache/solr/update/DirectUpdateHandler2#deleteByQuery(DeleteUpdateCommand).mjava","sourceNew":"  // why not return number of docs deleted?\n  // Depending on implementation, we may not be able to immediately determine the num...\n  @Override\n  public void deleteByQuery(DeleteUpdateCommand cmd) throws IOException {\n    deleteByQueryCommands.incrementAndGet();\n    deleteByQueryCommandsCumulative.incrementAndGet();\n    boolean madeIt=false;\n    boolean delAll=false;\n    try {\n      Query q = null;\n      try {\n        QParser parser = QParser.getParser(cmd.query, \"lucene\", cmd.req);\n        q = parser.getQuery();\n      } catch (ParseException e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n      }\n      \n      delAll = MatchAllDocsQuery.class == q.getClass();\n      \n      if (delAll) {\n        deleteAll();\n      } else {\n        indexWriterProvider.getIndexWriter().deleteDocuments(q);\n      }\n      \n      madeIt = true;\n      \n      if (commitTracker.timeUpperBound > 0) {\n        commitTracker.scheduleCommitWithin(commitTracker.timeUpperBound);\n      } else if (softCommitTracker.timeUpperBound > 0) {\n        softCommitTracker.scheduleCommitWithin(softCommitTracker.timeUpperBound);\n      }\n      \n    } finally {\n      if (!madeIt) {\n        numErrors.incrementAndGet();\n        numErrorsCumulative.incrementAndGet();\n      }\n    }\n  }\n\n","sourceOld":"  // why not return number of docs deleted?\n  // Depending on implementation, we may not be able to immediately determine the num...\n  @Override\n  public void deleteByQuery(DeleteUpdateCommand cmd) throws IOException {\n    deleteByQueryCommands.incrementAndGet();\n    deleteByQueryCommandsCumulative.incrementAndGet();\n\n    boolean madeIt=false;\n    boolean delAll=false;\n    try {\n      Query q = null;\n      try {\n        QParser parser = QParser.getParser(cmd.query, \"lucene\", cmd.req);\n        q = parser.getQuery();\n      } catch (ParseException e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n      }\n\n      delAll = MatchAllDocsQuery.class == q.getClass();\n\n      iwCommit.lock();\n      try {\n        if (delAll) {\n          deleteAll();\n        } else {\n          openWriter();\n          writer.deleteDocuments(q);\n        }\n      } finally {\n        iwCommit.unlock();\n      }\n\n      madeIt=true;\n\n      if( tracker.timeUpperBound > 0 ) {\n        tracker.scheduleCommitWithin( tracker.timeUpperBound );\n      }\n    } finally {\n      if (!madeIt) {\n        numErrors.incrementAndGet();\n        numErrorsCumulative.incrementAndGet();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#deleteByQuery(DeleteUpdateCommand).mjava","pathOld":"solr/src/java/org/apache/solr/update/DirectUpdateHandler2#deleteByQuery(DeleteUpdateCommand).mjava","sourceNew":"  // why not return number of docs deleted?\n  // Depending on implementation, we may not be able to immediately determine the num...\n  @Override\n  public void deleteByQuery(DeleteUpdateCommand cmd) throws IOException {\n    deleteByQueryCommands.incrementAndGet();\n    deleteByQueryCommandsCumulative.incrementAndGet();\n    boolean madeIt=false;\n    boolean delAll=false;\n    try {\n      Query q = null;\n      try {\n        QParser parser = QParser.getParser(cmd.query, \"lucene\", cmd.req);\n        q = parser.getQuery();\n      } catch (ParseException e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n      }\n      \n      delAll = MatchAllDocsQuery.class == q.getClass();\n      \n      if (delAll) {\n        deleteAll();\n      } else {\n        indexWriterProvider.getIndexWriter().deleteDocuments(q);\n      }\n      \n      madeIt = true;\n      \n      if (commitTracker.timeUpperBound > 0) {\n        commitTracker.scheduleCommitWithin(commitTracker.timeUpperBound);\n      } else if (softCommitTracker.timeUpperBound > 0) {\n        softCommitTracker.scheduleCommitWithin(softCommitTracker.timeUpperBound);\n      }\n      \n    } finally {\n      if (!madeIt) {\n        numErrors.incrementAndGet();\n        numErrorsCumulative.incrementAndGet();\n      }\n    }\n  }\n\n","sourceOld":"  // why not return number of docs deleted?\n  // Depending on implementation, we may not be able to immediately determine the num...\n  @Override\n  public void deleteByQuery(DeleteUpdateCommand cmd) throws IOException {\n    deleteByQueryCommands.incrementAndGet();\n    deleteByQueryCommandsCumulative.incrementAndGet();\n    boolean madeIt=false;\n    boolean delAll=false;\n    try {\n      Query q = null;\n      try {\n        QParser parser = QParser.getParser(cmd.query, \"lucene\", cmd.req);\n        q = parser.getQuery();\n      } catch (ParseException e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n      }\n      \n      delAll = MatchAllDocsQuery.class == q.getClass();\n      \n      if (delAll) {\n        deleteAll();\n      } else {\n        indexWriterProvider.getIndexWriter().deleteDocuments(q);\n      }\n      \n      madeIt = true;\n      \n      if (commitTracker.timeUpperBound > 0) {\n        commitTracker.scheduleCommitWithin(commitTracker.timeUpperBound);\n      } else if (softCommitTracker.timeUpperBound > 0) {\n        softCommitTracker.scheduleCommitWithin(softCommitTracker.timeUpperBound);\n      }\n      \n    } finally {\n      if (!madeIt) {\n        numErrors.incrementAndGet();\n        numErrorsCumulative.incrementAndGet();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#deleteByQuery(DeleteUpdateCommand).mjava","pathOld":"solr/src/java/org/apache/solr/update/DirectUpdateHandler2#deleteByQuery(DeleteUpdateCommand).mjava","sourceNew":"  // why not return number of docs deleted?\n  // Depending on implementation, we may not be able to immediately determine the num...\n  @Override\n  public void deleteByQuery(DeleteUpdateCommand cmd) throws IOException {\n    deleteByQueryCommands.incrementAndGet();\n    deleteByQueryCommandsCumulative.incrementAndGet();\n    boolean madeIt=false;\n    boolean delAll=false;\n    try {\n      Query q = null;\n      try {\n        QParser parser = QParser.getParser(cmd.query, \"lucene\", cmd.req);\n        q = parser.getQuery();\n      } catch (ParseException e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n      }\n      \n      delAll = MatchAllDocsQuery.class == q.getClass();\n      \n      if (delAll) {\n        deleteAll();\n      } else {\n        indexWriterProvider.getIndexWriter().deleteDocuments(q);\n      }\n      \n      madeIt = true;\n      \n      if (commitTracker.timeUpperBound > 0) {\n        commitTracker.scheduleCommitWithin(commitTracker.timeUpperBound);\n      } else if (softCommitTracker.timeUpperBound > 0) {\n        softCommitTracker.scheduleCommitWithin(softCommitTracker.timeUpperBound);\n      }\n      \n    } finally {\n      if (!madeIt) {\n        numErrors.incrementAndGet();\n        numErrorsCumulative.incrementAndGet();\n      }\n    }\n  }\n\n","sourceOld":"  // why not return number of docs deleted?\n  // Depending on implementation, we may not be able to immediately determine the num...\n  @Override\n  public void deleteByQuery(DeleteUpdateCommand cmd) throws IOException {\n    deleteByQueryCommands.incrementAndGet();\n    deleteByQueryCommandsCumulative.incrementAndGet();\n    boolean madeIt=false;\n    boolean delAll=false;\n    try {\n      Query q = null;\n      try {\n        QParser parser = QParser.getParser(cmd.query, \"lucene\", cmd.req);\n        q = parser.getQuery();\n      } catch (ParseException e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n      }\n      \n      delAll = MatchAllDocsQuery.class == q.getClass();\n      \n      if (delAll) {\n        deleteAll();\n      } else {\n        indexWriterProvider.getIndexWriter().deleteDocuments(q);\n      }\n      \n      madeIt = true;\n      \n      if (commitTracker.timeUpperBound > 0) {\n        commitTracker.scheduleCommitWithin(commitTracker.timeUpperBound);\n      } else if (softCommitTracker.timeUpperBound > 0) {\n        softCommitTracker.scheduleCommitWithin(softCommitTracker.timeUpperBound);\n      }\n      \n    } finally {\n      if (!madeIt) {\n        numErrors.incrementAndGet();\n        numErrorsCumulative.incrementAndGet();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#deleteByQuery(DeleteUpdateCommand).mjava","pathOld":"solr/src/java/org/apache/solr/update/DirectUpdateHandler2#deleteByQuery(DeleteUpdateCommand).mjava","sourceNew":"  // why not return number of docs deleted?\n  // Depending on implementation, we may not be able to immediately determine the num...\n  @Override\n  public void deleteByQuery(DeleteUpdateCommand cmd) throws IOException {\n    deleteByQueryCommands.incrementAndGet();\n    deleteByQueryCommandsCumulative.incrementAndGet();\n    boolean madeIt=false;\n    boolean delAll=false;\n    try {\n      Query q = null;\n      try {\n        QParser parser = QParser.getParser(cmd.query, \"lucene\", cmd.req);\n        q = parser.getQuery();\n      } catch (ParseException e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n      }\n      \n      delAll = MatchAllDocsQuery.class == q.getClass();\n      \n      if (delAll) {\n        deleteAll();\n      } else {\n        indexWriterProvider.getIndexWriter().deleteDocuments(q);\n      }\n      \n      madeIt = true;\n      \n      if (commitTracker.timeUpperBound > 0) {\n        commitTracker.scheduleCommitWithin(commitTracker.timeUpperBound);\n      } else if (softCommitTracker.timeUpperBound > 0) {\n        softCommitTracker.scheduleCommitWithin(softCommitTracker.timeUpperBound);\n      }\n      \n    } finally {\n      if (!madeIt) {\n        numErrors.incrementAndGet();\n        numErrorsCumulative.incrementAndGet();\n      }\n    }\n  }\n\n","sourceOld":"  // why not return number of docs deleted?\n  // Depending on implementation, we may not be able to immediately determine the num...\n  @Override\n  public void deleteByQuery(DeleteUpdateCommand cmd) throws IOException {\n    deleteByQueryCommands.incrementAndGet();\n    deleteByQueryCommandsCumulative.incrementAndGet();\n    boolean madeIt=false;\n    boolean delAll=false;\n    try {\n      Query q = null;\n      try {\n        QParser parser = QParser.getParser(cmd.query, \"lucene\", cmd.req);\n        q = parser.getQuery();\n      } catch (ParseException e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n      }\n      \n      delAll = MatchAllDocsQuery.class == q.getClass();\n      \n      if (delAll) {\n        deleteAll();\n      } else {\n        indexWriterProvider.getIndexWriter().deleteDocuments(q);\n      }\n      \n      madeIt = true;\n      \n      if (commitTracker.timeUpperBound > 0) {\n        commitTracker.scheduleCommitWithin(commitTracker.timeUpperBound);\n      } else if (softCommitTracker.timeUpperBound > 0) {\n        softCommitTracker.scheduleCommitWithin(softCommitTracker.timeUpperBound);\n      }\n      \n    } finally {\n      if (!madeIt) {\n        numErrors.incrementAndGet();\n        numErrorsCumulative.incrementAndGet();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01":["e48ed0466fe2d4f8ba58a47caef1174d9e856d13"],"70ad682703b8585f5d0a637efec044d57ec05efb":["1da8d55113b689b06716246649de6f62430f15c0","e48ed0466fe2d4f8ba58a47caef1174d9e856d13"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c26f00b574427b55127e869b935845554afde1fa":["7a71a0b2d4be2299a163f60626729852d81a8e02","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"e48ed0466fe2d4f8ba58a47caef1174d9e856d13":["ed933d2b081552e6023045460dbf1b1be599a819"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01","7a71a0b2d4be2299a163f60626729852d81a8e02"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01","7a71a0b2d4be2299a163f60626729852d81a8e02"],"7a71a0b2d4be2299a163f60626729852d81a8e02":["70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01"],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c":["1da8d55113b689b06716246649de6f62430f15c0","e48ed0466fe2d4f8ba58a47caef1174d9e856d13"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["817d8435e9135b756f08ce6710ab0baac51bdf88"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["70ad682703b8585f5d0a637efec044d57ec05efb","70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["7a71a0b2d4be2299a163f60626729852d81a8e02"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"ed933d2b081552e6023045460dbf1b1be599a819":["1da8d55113b689b06716246649de6f62430f15c0"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c","70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","7a71a0b2d4be2299a163f60626729852d81a8e02","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"70ad682703b8585f5d0a637efec044d57ec05efb":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"e48ed0466fe2d4f8ba58a47caef1174d9e856d13":["70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01","70ad682703b8585f5d0a637efec044d57ec05efb","ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"817d8435e9135b756f08ce6710ab0baac51bdf88":["c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"7a71a0b2d4be2299a163f60626729852d81a8e02":["c26f00b574427b55127e869b935845554afde1fa","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","a258fbb26824fd104ed795e5d9033d2d040049ee"],"1da8d55113b689b06716246649de6f62430f15c0":["70ad682703b8585f5d0a637efec044d57ec05efb","ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c","ed933d2b081552e6023045460dbf1b1be599a819"],"ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"ed933d2b081552e6023045460dbf1b1be599a819":["e48ed0466fe2d4f8ba58a47caef1174d9e856d13"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d083e83f225b11e5fdd900e83d26ddb385b6955c","29ef99d61cda9641b6250bf9567329a6e65f901d","a258fbb26824fd104ed795e5d9033d2d040049ee","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}