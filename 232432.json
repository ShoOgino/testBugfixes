{"path":"contrib/clustering/src/test/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngineTest#checkEngine(CarrotClusteringEngine,int,int,Query,SolrParams).mjava","commits":[{"id":"10c9bc7c61bddaf04f5dbf85f69baec5209200d1","date":1262615339,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"contrib/clustering/src/test/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngineTest#checkEngine(CarrotClusteringEngine,int,int,Query,SolrParams).mjava","pathOld":"/dev/null","sourceNew":"  private List checkEngine(CarrotClusteringEngine engine, int expectedNumDocs,\n                           int expectedNumClusters, Query query, SolrParams clusteringParams) throws IOException {\n    // Get all documents to cluster\n    RefCounted<SolrIndexSearcher> ref = h.getCore().getSearcher();\n\n    DocList docList;\n    try {\n      SolrIndexSearcher searcher = ref.get();\n      docList = searcher.getDocList(query, (Query) null, new Sort(), 0,\n              numberOfDocs);\n      assertEquals(\"docList size\", expectedNumDocs, docList.matches());\n    } finally {\n      ref.decref();\n    }\n\n    ModifiableSolrParams solrParams = new ModifiableSolrParams();\n    solrParams.add(CarrotParams.PRODUCE_SUMMARY, \"true\");\n    solrParams.add(clusteringParams);\n\n    // Perform clustering\n    LocalSolrQueryRequest req = new LocalSolrQueryRequest(h.getCore(), solrParams);\n    List results = (List) engine.cluster(query, docList, req);\n    req.close();\n    assertEquals(\"number of clusters: \" + results, expectedNumClusters, results.size());\n    checkClusters(results, false);\n    return results;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/clustering/src/test/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngineTest#checkEngine(CarrotClusteringEngine,int,int,Query,SolrParams).mjava","pathOld":"contrib/clustering/src/test/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngineTest#checkEngine(CarrotClusteringEngine,int,int,Query,SolrParams).mjava","sourceNew":"  private List checkEngine(CarrotClusteringEngine engine, int expectedNumDocs,\n                           int expectedNumClusters, Query query, SolrParams clusteringParams) throws IOException {\n    // Get all documents to cluster\n    RefCounted<SolrIndexSearcher> ref = h.getCore().getSearcher();\n\n    DocList docList;\n    try {\n      SolrIndexSearcher searcher = ref.get();\n      docList = searcher.getDocList(query, (Query) null, new Sort(), 0,\n              numberOfDocs);\n      assertEquals(\"docList size\", expectedNumDocs, docList.matches());\n    } finally {\n      ref.decref();\n    }\n\n    ModifiableSolrParams solrParams = new ModifiableSolrParams();\n    solrParams.add(CarrotParams.PRODUCE_SUMMARY, \"true\");\n    solrParams.add(clusteringParams);\n\n    // Perform clustering\n    LocalSolrQueryRequest req = new LocalSolrQueryRequest(h.getCore(), solrParams);\n    List results = (List) engine.cluster(query, docList, req);\n    req.close();\n    assertEquals(\"number of clusters: \" + results, expectedNumClusters, results.size());\n    checkClusters(results, false);\n    return results;\n  }\n\n","sourceOld":"  private List checkEngine(CarrotClusteringEngine engine, int expectedNumDocs,\n                           int expectedNumClusters, Query query, SolrParams clusteringParams) throws IOException {\n    // Get all documents to cluster\n    RefCounted<SolrIndexSearcher> ref = h.getCore().getSearcher();\n\n    DocList docList;\n    try {\n      SolrIndexSearcher searcher = ref.get();\n      docList = searcher.getDocList(query, (Query) null, new Sort(), 0,\n              numberOfDocs);\n      assertEquals(\"docList size\", expectedNumDocs, docList.matches());\n    } finally {\n      ref.decref();\n    }\n\n    ModifiableSolrParams solrParams = new ModifiableSolrParams();\n    solrParams.add(CarrotParams.PRODUCE_SUMMARY, \"true\");\n    solrParams.add(clusteringParams);\n\n    // Perform clustering\n    LocalSolrQueryRequest req = new LocalSolrQueryRequest(h.getCore(), solrParams);\n    List results = (List) engine.cluster(query, docList, req);\n    req.close();\n    assertEquals(\"number of clusters: \" + results, expectedNumClusters, results.size());\n    checkClusters(results, false);\n    return results;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"10c9bc7c61bddaf04f5dbf85f69baec5209200d1":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["10c9bc7c61bddaf04f5dbf85f69baec5209200d1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"10c9bc7c61bddaf04f5dbf85f69baec5209200d1":["ad94625fb8d088209f46650c8097196fec67f00c"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["10c9bc7c61bddaf04f5dbf85f69baec5209200d1"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}