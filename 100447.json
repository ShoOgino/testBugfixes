{"path":"solr/core/src/test/org/apache/solr/util/SimplePostToolTest#testDoWebMode().mjava","commits":[{"id":"c2c3a504730329ae644b009dee43024116605d47","date":1345253449,"type":0,"author":"Jan HÃ¸ydahl","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/SimplePostToolTest#testDoWebMode().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testDoWebMode() {\n    // Uses mock pageFetcher\n    t_web.delay = 0;\n    t_web.recursive = 5;\n    int num = t_web.postWebPages(new String[] {\"http://example.com/#removeme\"}, 0, null);\n    assertEquals(5, num);\n    \n    t_web.recursive = 1;\n    num = t_web.postWebPages(new String[] {\"http://example.com/\"}, 0, null);\n    assertEquals(3, num);\n    \n    // Without respecting robots.txt\n    SimplePostTool.pageFetcher.robotsCache.clear();\n    t_web.recursive = 5;\n    num = t_web.postWebPages(new String[] {\"http://example.com/#removeme\"}, 0, null);\n    assertEquals(6, num);\n}\n\n","sourceOld":null,"bugFix":null,"bugIntro":["8d6b048fe8a7a019151795a23d29c94fa805684d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"70fa1c0f4d75735ff2e1485e059d9bc5efa50598","date":1345296911,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/util/SimplePostToolTest#testDoWebMode().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testDoWebMode() {\n    // Uses mock pageFetcher\n    t_web.delay = 0;\n    t_web.recursive = 5;\n    int num = t_web.postWebPages(new String[] {\"http://example.com/#removeme\"}, 0, null);\n    assertEquals(5, num);\n    \n    t_web.recursive = 1;\n    num = t_web.postWebPages(new String[] {\"http://example.com/\"}, 0, null);\n    assertEquals(3, num);\n    \n    // Without respecting robots.txt\n    SimplePostTool.pageFetcher.robotsCache.clear();\n    t_web.recursive = 5;\n    num = t_web.postWebPages(new String[] {\"http://example.com/#removeme\"}, 0, null);\n    assertEquals(6, num);\n}\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"616c1830142ff5c1ddedec1ed898733b73c8e23b","date":1345368925,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/util/SimplePostToolTest#testDoWebMode().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testDoWebMode() {\n    // Uses mock pageFetcher\n    t_web.delay = 0;\n    t_web.recursive = 5;\n    int num = t_web.postWebPages(new String[] {\"http://example.com/#removeme\"}, 0, null);\n    assertEquals(5, num);\n    \n    t_web.recursive = 1;\n    num = t_web.postWebPages(new String[] {\"http://example.com/\"}, 0, null);\n    assertEquals(3, num);\n    \n    // Without respecting robots.txt\n    SimplePostTool.pageFetcher.robotsCache.clear();\n    t_web.recursive = 5;\n    num = t_web.postWebPages(new String[] {\"http://example.com/#removeme\"}, 0, null);\n    assertEquals(6, num);\n}\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8d6b048fe8a7a019151795a23d29c94fa805684d","date":1379349569,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/SimplePostToolTest#testDoWebMode().mjava","pathOld":"solr/core/src/test/org/apache/solr/util/SimplePostToolTest#testDoWebMode().mjava","sourceNew":"  @Test\n  public void testDoWebMode() {\n    // Uses mock pageFetcher\n    t_web.delay = 0;\n    t_web.recursive = 5;\n    int num = t_web.postWebPages(new String[] {\"http://[ff01::114]/#removeme\"}, 0, null);\n    assertEquals(5, num);\n    \n    t_web.recursive = 1;\n    num = t_web.postWebPages(new String[] {\"http://[ff01::114]/\"}, 0, null);\n    assertEquals(3, num);\n    \n    // Without respecting robots.txt\n    SimplePostTool.pageFetcher.robotsCache.clear();\n    t_web.recursive = 5;\n    num = t_web.postWebPages(new String[] {\"http://[ff01::114]/#removeme\"}, 0, null);\n    assertEquals(6, num);\n}\n\n","sourceOld":"  @Test\n  public void testDoWebMode() {\n    // Uses mock pageFetcher\n    t_web.delay = 0;\n    t_web.recursive = 5;\n    int num = t_web.postWebPages(new String[] {\"http://example.com/#removeme\"}, 0, null);\n    assertEquals(5, num);\n    \n    t_web.recursive = 1;\n    num = t_web.postWebPages(new String[] {\"http://example.com/\"}, 0, null);\n    assertEquals(3, num);\n    \n    // Without respecting robots.txt\n    SimplePostTool.pageFetcher.robotsCache.clear();\n    t_web.recursive = 5;\n    num = t_web.postWebPages(new String[] {\"http://example.com/#removeme\"}, 0, null);\n    assertEquals(6, num);\n}\n\n","bugFix":["c2c3a504730329ae644b009dee43024116605d47"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06c53fdb787c249799e6655451c48ef29c717557","date":1494098950,"type":3,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/SimplePostToolTest#testDoWebMode().mjava","pathOld":"solr/core/src/test/org/apache/solr/util/SimplePostToolTest#testDoWebMode().mjava","sourceNew":"  @Test\n  public void testDoWebMode() {\n    // Uses mock pageFetcher\n    t_web.delay = 0;\n    t_web.recursive = 5;\n    int num = t_web.postWebPages(new String[] {\"http://[ff01::114]/#removeme\"}, 0, null);\n    assertEquals(5, num);\n    \n    t_web.recursive = 1;\n    num = t_web.postWebPages(new String[] {\"http://[ff01::114]/\"}, 0, null);\n    assertEquals(3, num);\n    \n    // Without respecting robots.txt\n    t_web.pageFetcher.robotsCache.clear();\n    t_web.recursive = 5;\n    num = t_web.postWebPages(new String[] {\"http://[ff01::114]/#removeme\"}, 0, null);\n    assertEquals(6, num);\n}\n\n","sourceOld":"  @Test\n  public void testDoWebMode() {\n    // Uses mock pageFetcher\n    t_web.delay = 0;\n    t_web.recursive = 5;\n    int num = t_web.postWebPages(new String[] {\"http://[ff01::114]/#removeme\"}, 0, null);\n    assertEquals(5, num);\n    \n    t_web.recursive = 1;\n    num = t_web.postWebPages(new String[] {\"http://[ff01::114]/\"}, 0, null);\n    assertEquals(3, num);\n    \n    // Without respecting robots.txt\n    SimplePostTool.pageFetcher.robotsCache.clear();\n    t_web.recursive = 5;\n    num = t_web.postWebPages(new String[] {\"http://[ff01::114]/#removeme\"}, 0, null);\n    assertEquals(6, num);\n}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/util/SimplePostToolTest#testDoWebMode().mjava","pathOld":"solr/core/src/test/org/apache/solr/util/SimplePostToolTest#testDoWebMode().mjava","sourceNew":"  @Test\n  public void testDoWebMode() {\n    // Uses mock pageFetcher\n    t_web.delay = 0;\n    t_web.recursive = 5;\n    int num = t_web.postWebPages(new String[] {\"http://[ff01::114]/#removeme\"}, 0, null);\n    assertEquals(5, num);\n    \n    t_web.recursive = 1;\n    num = t_web.postWebPages(new String[] {\"http://[ff01::114]/\"}, 0, null);\n    assertEquals(3, num);\n    \n    // Without respecting robots.txt\n    t_web.pageFetcher.robotsCache.clear();\n    t_web.recursive = 5;\n    num = t_web.postWebPages(new String[] {\"http://[ff01::114]/#removeme\"}, 0, null);\n    assertEquals(6, num);\n}\n\n","sourceOld":"  @Test\n  public void testDoWebMode() {\n    // Uses mock pageFetcher\n    t_web.delay = 0;\n    t_web.recursive = 5;\n    int num = t_web.postWebPages(new String[] {\"http://[ff01::114]/#removeme\"}, 0, null);\n    assertEquals(5, num);\n    \n    t_web.recursive = 1;\n    num = t_web.postWebPages(new String[] {\"http://[ff01::114]/\"}, 0, null);\n    assertEquals(3, num);\n    \n    // Without respecting robots.txt\n    SimplePostTool.pageFetcher.robotsCache.clear();\n    t_web.recursive = 5;\n    num = t_web.postWebPages(new String[] {\"http://[ff01::114]/#removeme\"}, 0, null);\n    assertEquals(6, num);\n}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bc78b7d15e7b8627fa6d1b946da3a39f0225508d","date":1576086705,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/SimplePostToolTest#testDoWebMode().mjava","pathOld":"solr/core/src/test/org/apache/solr/util/SimplePostToolTest#testDoWebMode().mjava","sourceNew":"  @Test\n  public void testDoWebMode() {\n    // Uses mock pageFetcher\n    t_web.delay = 0;\n    t_web.recursive = 5;\n    int num = t_web.postWebPages(new String[] {\"http://[ff01::114]/#removeme\"}, 0, null);\n    assertEquals(5, num);\n    \n    t_web.recursive = 1;\n    num = t_web.postWebPages(new String[] {\"http://[ff01::114]/\"}, 0, null);\n    assertEquals(3, num);\n    \n    // Without respecting robots.txt\n    t_web.pageFetcher.robotsCache.put(\"[ff01::114]\", Collections.emptyList());\n    t_web.recursive = 5;\n    num = t_web.postWebPages(new String[] {\"http://[ff01::114]/#removeme\"}, 0, null);\n    assertEquals(6, num);\n}\n\n","sourceOld":"  @Test\n  public void testDoWebMode() {\n    // Uses mock pageFetcher\n    t_web.delay = 0;\n    t_web.recursive = 5;\n    int num = t_web.postWebPages(new String[] {\"http://[ff01::114]/#removeme\"}, 0, null);\n    assertEquals(5, num);\n    \n    t_web.recursive = 1;\n    num = t_web.postWebPages(new String[] {\"http://[ff01::114]/\"}, 0, null);\n    assertEquals(3, num);\n    \n    // Without respecting robots.txt\n    t_web.pageFetcher.robotsCache.clear();\n    t_web.recursive = 5;\n    num = t_web.postWebPages(new String[] {\"http://[ff01::114]/#removeme\"}, 0, null);\n    assertEquals(6, num);\n}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"df724d84dab24a0cc54bec95a8680867adc7f171","date":1576156608,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/util/SimplePostToolTest#testDoWebMode().mjava","pathOld":"solr/core/src/test/org/apache/solr/util/SimplePostToolTest#testDoWebMode().mjava","sourceNew":"  @Test\n  public void testDoWebMode() {\n    // Uses mock pageFetcher\n    t_web.delay = 0;\n    t_web.recursive = 5;\n    int num = t_web.postWebPages(new String[] {\"http://[ff01::114]/#removeme\"}, 0, null);\n    assertEquals(5, num);\n    \n    t_web.recursive = 1;\n    num = t_web.postWebPages(new String[] {\"http://[ff01::114]/\"}, 0, null);\n    assertEquals(3, num);\n    \n    // Without respecting robots.txt\n    t_web.pageFetcher.robotsCache.put(\"[ff01::114]\", Collections.emptyList());\n    t_web.recursive = 5;\n    num = t_web.postWebPages(new String[] {\"http://[ff01::114]/#removeme\"}, 0, null);\n    assertEquals(6, num);\n}\n\n","sourceOld":"  @Test\n  public void testDoWebMode() {\n    // Uses mock pageFetcher\n    t_web.delay = 0;\n    t_web.recursive = 5;\n    int num = t_web.postWebPages(new String[] {\"http://[ff01::114]/#removeme\"}, 0, null);\n    assertEquals(5, num);\n    \n    t_web.recursive = 1;\n    num = t_web.postWebPages(new String[] {\"http://[ff01::114]/\"}, 0, null);\n    assertEquals(3, num);\n    \n    // Without respecting robots.txt\n    t_web.pageFetcher.robotsCache.clear();\n    t_web.recursive = 5;\n    num = t_web.postWebPages(new String[] {\"http://[ff01::114]/#removeme\"}, 0, null);\n    assertEquals(6, num);\n}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"df724d84dab24a0cc54bec95a8680867adc7f171":["06c53fdb787c249799e6655451c48ef29c717557","bc78b7d15e7b8627fa6d1b946da3a39f0225508d"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["8d6b048fe8a7a019151795a23d29c94fa805684d","06c53fdb787c249799e6655451c48ef29c717557"],"616c1830142ff5c1ddedec1ed898733b73c8e23b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c2c3a504730329ae644b009dee43024116605d47"],"70fa1c0f4d75735ff2e1485e059d9bc5efa50598":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c2c3a504730329ae644b009dee43024116605d47"],"c2c3a504730329ae644b009dee43024116605d47":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8d6b048fe8a7a019151795a23d29c94fa805684d":["c2c3a504730329ae644b009dee43024116605d47"],"06c53fdb787c249799e6655451c48ef29c717557":["8d6b048fe8a7a019151795a23d29c94fa805684d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bc78b7d15e7b8627fa6d1b946da3a39f0225508d"],"bc78b7d15e7b8627fa6d1b946da3a39f0225508d":["06c53fdb787c249799e6655451c48ef29c717557"]},"commit2Childs":{"df724d84dab24a0cc54bec95a8680867adc7f171":[],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"616c1830142ff5c1ddedec1ed898733b73c8e23b":[],"70fa1c0f4d75735ff2e1485e059d9bc5efa50598":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["616c1830142ff5c1ddedec1ed898733b73c8e23b","70fa1c0f4d75735ff2e1485e059d9bc5efa50598","c2c3a504730329ae644b009dee43024116605d47"],"c2c3a504730329ae644b009dee43024116605d47":["616c1830142ff5c1ddedec1ed898733b73c8e23b","70fa1c0f4d75735ff2e1485e059d9bc5efa50598","8d6b048fe8a7a019151795a23d29c94fa805684d"],"8d6b048fe8a7a019151795a23d29c94fa805684d":["e9017cf144952056066919f1ebc7897ff9bd71b1","06c53fdb787c249799e6655451c48ef29c717557"],"06c53fdb787c249799e6655451c48ef29c717557":["df724d84dab24a0cc54bec95a8680867adc7f171","e9017cf144952056066919f1ebc7897ff9bd71b1","bc78b7d15e7b8627fa6d1b946da3a39f0225508d"],"bc78b7d15e7b8627fa6d1b946da3a39f0225508d":["df724d84dab24a0cc54bec95a8680867adc7f171","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["df724d84dab24a0cc54bec95a8680867adc7f171","e9017cf144952056066919f1ebc7897ff9bd71b1","616c1830142ff5c1ddedec1ed898733b73c8e23b","70fa1c0f4d75735ff2e1485e059d9bc5efa50598","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}