{"path":"lucene/core/src/java/org/apache/lucene/index/DefaultIndexingChain#verifyFieldType(String,IndexableFieldType).mjava","commits":[{"id":"52c7e49be259508735752fba88085255014a6ecf","date":1398706273,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DefaultIndexingChain#verifyFieldType(String,IndexableFieldType).mjava","pathOld":"/dev/null","sourceNew":"  private static void verifyFieldType(String name, IndexableFieldType ft) {\n    if (ft.indexed() == false) {\n      if (ft.storeTermVectors()) {\n        throw new IllegalArgumentException(\"cannot store term vectors \"\n                                           + \"for a field that is not indexed (field=\\\"\" + name + \"\\\")\");\n      }\n      if (ft.storeTermVectorPositions()) {\n        throw new IllegalArgumentException(\"cannot store term vector positions \"\n                                           + \"for a field that is not indexed (field=\\\"\" + name + \"\\\")\");\n      }\n      if (ft.storeTermVectorOffsets()) {\n        throw new IllegalArgumentException(\"cannot store term vector offsets \"\n                                           + \"for a field that is not indexed (field=\\\"\" + name + \"\\\")\");\n      }\n      if (ft.storeTermVectorPayloads()) {\n        throw new IllegalArgumentException(\"cannot store term vector payloads \"\n                                           + \"for a field that is not indexed (field=\\\"\" + name + \"\\\")\");\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3394716f52b34ab259ad5247e7595d9f9db6e935","date":1398791921,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DefaultIndexingChain#verifyFieldType(String,IndexableFieldType).mjava","pathOld":"/dev/null","sourceNew":"  private static void verifyFieldType(String name, IndexableFieldType ft) {\n    if (ft.indexed() == false) {\n      if (ft.storeTermVectors()) {\n        throw new IllegalArgumentException(\"cannot store term vectors \"\n                                           + \"for a field that is not indexed (field=\\\"\" + name + \"\\\")\");\n      }\n      if (ft.storeTermVectorPositions()) {\n        throw new IllegalArgumentException(\"cannot store term vector positions \"\n                                           + \"for a field that is not indexed (field=\\\"\" + name + \"\\\")\");\n      }\n      if (ft.storeTermVectorOffsets()) {\n        throw new IllegalArgumentException(\"cannot store term vector offsets \"\n                                           + \"for a field that is not indexed (field=\\\"\" + name + \"\\\")\");\n      }\n      if (ft.storeTermVectorPayloads()) {\n        throw new IllegalArgumentException(\"cannot store term vector payloads \"\n                                           + \"for a field that is not indexed (field=\\\"\" + name + \"\\\")\");\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","date":1398844771,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DefaultIndexingChain#verifyFieldType(String,IndexableFieldType).mjava","pathOld":"/dev/null","sourceNew":"  private static void verifyFieldType(String name, IndexableFieldType ft) {\n    if (ft.indexed() == false) {\n      if (ft.storeTermVectors()) {\n        throw new IllegalArgumentException(\"cannot store term vectors \"\n                                           + \"for a field that is not indexed (field=\\\"\" + name + \"\\\")\");\n      }\n      if (ft.storeTermVectorPositions()) {\n        throw new IllegalArgumentException(\"cannot store term vector positions \"\n                                           + \"for a field that is not indexed (field=\\\"\" + name + \"\\\")\");\n      }\n      if (ft.storeTermVectorOffsets()) {\n        throw new IllegalArgumentException(\"cannot store term vector offsets \"\n                                           + \"for a field that is not indexed (field=\\\"\" + name + \"\\\")\");\n      }\n      if (ft.storeTermVectorPayloads()) {\n        throw new IllegalArgumentException(\"cannot store term vector payloads \"\n                                           + \"for a field that is not indexed (field=\\\"\" + name + \"\\\")\");\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3184874f7f3aca850248483485b4995343066875","date":1413876758,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DefaultIndexingChain#verifyFieldType(String,IndexableFieldType).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DefaultIndexingChain#verifyFieldType(String,IndexableFieldType).mjava","sourceNew":"  private static void verifyFieldType(String name, IndexableFieldType ft) {\n    if (ft.indexOptions() == null) {\n      if (ft.storeTermVectors()) {\n        throw new IllegalArgumentException(\"cannot store term vectors \"\n                                           + \"for a field that is not indexed (field=\\\"\" + name + \"\\\")\");\n      }\n      if (ft.storeTermVectorPositions()) {\n        throw new IllegalArgumentException(\"cannot store term vector positions \"\n                                           + \"for a field that is not indexed (field=\\\"\" + name + \"\\\")\");\n      }\n      if (ft.storeTermVectorOffsets()) {\n        throw new IllegalArgumentException(\"cannot store term vector offsets \"\n                                           + \"for a field that is not indexed (field=\\\"\" + name + \"\\\")\");\n      }\n      if (ft.storeTermVectorPayloads()) {\n        throw new IllegalArgumentException(\"cannot store term vector payloads \"\n                                           + \"for a field that is not indexed (field=\\\"\" + name + \"\\\")\");\n      }\n    }\n  }\n\n","sourceOld":"  private static void verifyFieldType(String name, IndexableFieldType ft) {\n    if (ft.indexed() == false) {\n      if (ft.storeTermVectors()) {\n        throw new IllegalArgumentException(\"cannot store term vectors \"\n                                           + \"for a field that is not indexed (field=\\\"\" + name + \"\\\")\");\n      }\n      if (ft.storeTermVectorPositions()) {\n        throw new IllegalArgumentException(\"cannot store term vector positions \"\n                                           + \"for a field that is not indexed (field=\\\"\" + name + \"\\\")\");\n      }\n      if (ft.storeTermVectorOffsets()) {\n        throw new IllegalArgumentException(\"cannot store term vector offsets \"\n                                           + \"for a field that is not indexed (field=\\\"\" + name + \"\\\")\");\n      }\n      if (ft.storeTermVectorPayloads()) {\n        throw new IllegalArgumentException(\"cannot store term vector payloads \"\n                                           + \"for a field that is not indexed (field=\\\"\" + name + \"\\\")\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a22eafe3f72a4c2945eaad9547e6c78816978f4","date":1413956657,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DefaultIndexingChain#verifyFieldType(String,IndexableFieldType).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DefaultIndexingChain#verifyFieldType(String,IndexableFieldType).mjava","sourceNew":"  private static void verifyFieldType(String name, IndexableFieldType ft) {\n    if (ft.indexOptions() == null) {\n      if (ft.storeTermVectors()) {\n        throw new IllegalArgumentException(\"cannot store term vectors \"\n                                           + \"for a field that is not indexed (field=\\\"\" + name + \"\\\")\");\n      }\n      if (ft.storeTermVectorPositions()) {\n        throw new IllegalArgumentException(\"cannot store term vector positions \"\n                                           + \"for a field that is not indexed (field=\\\"\" + name + \"\\\")\");\n      }\n      if (ft.storeTermVectorOffsets()) {\n        throw new IllegalArgumentException(\"cannot store term vector offsets \"\n                                           + \"for a field that is not indexed (field=\\\"\" + name + \"\\\")\");\n      }\n      if (ft.storeTermVectorPayloads()) {\n        throw new IllegalArgumentException(\"cannot store term vector payloads \"\n                                           + \"for a field that is not indexed (field=\\\"\" + name + \"\\\")\");\n      }\n    }\n  }\n\n","sourceOld":"  private static void verifyFieldType(String name, IndexableFieldType ft) {\n    if (ft.indexed() == false) {\n      if (ft.storeTermVectors()) {\n        throw new IllegalArgumentException(\"cannot store term vectors \"\n                                           + \"for a field that is not indexed (field=\\\"\" + name + \"\\\")\");\n      }\n      if (ft.storeTermVectorPositions()) {\n        throw new IllegalArgumentException(\"cannot store term vector positions \"\n                                           + \"for a field that is not indexed (field=\\\"\" + name + \"\\\")\");\n      }\n      if (ft.storeTermVectorOffsets()) {\n        throw new IllegalArgumentException(\"cannot store term vector offsets \"\n                                           + \"for a field that is not indexed (field=\\\"\" + name + \"\\\")\");\n      }\n      if (ft.storeTermVectorPayloads()) {\n        throw new IllegalArgumentException(\"cannot store term vector payloads \"\n                                           + \"for a field that is not indexed (field=\\\"\" + name + \"\\\")\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2bb2842e561df4e8e9ad89010605fc86ac265465","date":1414768208,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DefaultIndexingChain#verifyFieldType(String,IndexableFieldType).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DefaultIndexingChain#verifyFieldType(String,IndexableFieldType).mjava","sourceNew":"  private static void verifyFieldType(String name, IndexableFieldType ft) {\n    if (ft.indexOptions() == IndexOptions.NO) {\n      if (ft.storeTermVectors()) {\n        throw new IllegalArgumentException(\"cannot store term vectors \"\n                                           + \"for a field that is not indexed (field=\\\"\" + name + \"\\\")\");\n      }\n      if (ft.storeTermVectorPositions()) {\n        throw new IllegalArgumentException(\"cannot store term vector positions \"\n                                           + \"for a field that is not indexed (field=\\\"\" + name + \"\\\")\");\n      }\n      if (ft.storeTermVectorOffsets()) {\n        throw new IllegalArgumentException(\"cannot store term vector offsets \"\n                                           + \"for a field that is not indexed (field=\\\"\" + name + \"\\\")\");\n      }\n      if (ft.storeTermVectorPayloads()) {\n        throw new IllegalArgumentException(\"cannot store term vector payloads \"\n                                           + \"for a field that is not indexed (field=\\\"\" + name + \"\\\")\");\n      }\n    }\n  }\n\n","sourceOld":"  private static void verifyFieldType(String name, IndexableFieldType ft) {\n    if (ft.indexOptions() == null) {\n      if (ft.storeTermVectors()) {\n        throw new IllegalArgumentException(\"cannot store term vectors \"\n                                           + \"for a field that is not indexed (field=\\\"\" + name + \"\\\")\");\n      }\n      if (ft.storeTermVectorPositions()) {\n        throw new IllegalArgumentException(\"cannot store term vector positions \"\n                                           + \"for a field that is not indexed (field=\\\"\" + name + \"\\\")\");\n      }\n      if (ft.storeTermVectorOffsets()) {\n        throw new IllegalArgumentException(\"cannot store term vector offsets \"\n                                           + \"for a field that is not indexed (field=\\\"\" + name + \"\\\")\");\n      }\n      if (ft.storeTermVectorPayloads()) {\n        throw new IllegalArgumentException(\"cannot store term vector payloads \"\n                                           + \"for a field that is not indexed (field=\\\"\" + name + \"\\\")\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1edd0fe3b3915bf01160dfd544ab0c18cb77e45","date":1414773150,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DefaultIndexingChain#verifyFieldType(String,IndexableFieldType).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DefaultIndexingChain#verifyFieldType(String,IndexableFieldType).mjava","sourceNew":"  private static void verifyFieldType(String name, IndexableFieldType ft) {\n    if (ft.indexOptions() == null) {\n      throw new NullPointerException(\"IndexOptions must not be null (field: \\\"\" + name + \"\\\")\");\n    }\n    if (ft.indexOptions() == IndexOptions.NO) {\n      if (ft.storeTermVectors()) {\n        throw new IllegalArgumentException(\"cannot store term vectors \"\n                                           + \"for a field that is not indexed (field=\\\"\" + name + \"\\\")\");\n      }\n      if (ft.storeTermVectorPositions()) {\n        throw new IllegalArgumentException(\"cannot store term vector positions \"\n                                           + \"for a field that is not indexed (field=\\\"\" + name + \"\\\")\");\n      }\n      if (ft.storeTermVectorOffsets()) {\n        throw new IllegalArgumentException(\"cannot store term vector offsets \"\n                                           + \"for a field that is not indexed (field=\\\"\" + name + \"\\\")\");\n      }\n      if (ft.storeTermVectorPayloads()) {\n        throw new IllegalArgumentException(\"cannot store term vector payloads \"\n                                           + \"for a field that is not indexed (field=\\\"\" + name + \"\\\")\");\n      }\n    }\n  }\n\n","sourceOld":"  private static void verifyFieldType(String name, IndexableFieldType ft) {\n    if (ft.indexOptions() == IndexOptions.NO) {\n      if (ft.storeTermVectors()) {\n        throw new IllegalArgumentException(\"cannot store term vectors \"\n                                           + \"for a field that is not indexed (field=\\\"\" + name + \"\\\")\");\n      }\n      if (ft.storeTermVectorPositions()) {\n        throw new IllegalArgumentException(\"cannot store term vector positions \"\n                                           + \"for a field that is not indexed (field=\\\"\" + name + \"\\\")\");\n      }\n      if (ft.storeTermVectorOffsets()) {\n        throw new IllegalArgumentException(\"cannot store term vector offsets \"\n                                           + \"for a field that is not indexed (field=\\\"\" + name + \"\\\")\");\n      }\n      if (ft.storeTermVectorPayloads()) {\n        throw new IllegalArgumentException(\"cannot store term vector payloads \"\n                                           + \"for a field that is not indexed (field=\\\"\" + name + \"\\\")\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f95ce1375367b92d411a06175eab3915fe93c6bc","date":1414788502,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DefaultIndexingChain#verifyFieldType(String,IndexableFieldType).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DefaultIndexingChain#verifyFieldType(String,IndexableFieldType).mjava","sourceNew":"  private static void verifyFieldType(String name, IndexableFieldType ft) {\n    if (ft.indexOptions() == null) {\n      throw new NullPointerException(\"IndexOptions must not be null (field: \\\"\" + name + \"\\\")\");\n    }\n    if (ft.indexOptions() == IndexOptions.NONE) {\n      if (ft.storeTermVectors()) {\n        throw new IllegalArgumentException(\"cannot store term vectors \"\n                                           + \"for a field that is not indexed (field=\\\"\" + name + \"\\\")\");\n      }\n      if (ft.storeTermVectorPositions()) {\n        throw new IllegalArgumentException(\"cannot store term vector positions \"\n                                           + \"for a field that is not indexed (field=\\\"\" + name + \"\\\")\");\n      }\n      if (ft.storeTermVectorOffsets()) {\n        throw new IllegalArgumentException(\"cannot store term vector offsets \"\n                                           + \"for a field that is not indexed (field=\\\"\" + name + \"\\\")\");\n      }\n      if (ft.storeTermVectorPayloads()) {\n        throw new IllegalArgumentException(\"cannot store term vector payloads \"\n                                           + \"for a field that is not indexed (field=\\\"\" + name + \"\\\")\");\n      }\n    }\n  }\n\n","sourceOld":"  private static void verifyFieldType(String name, IndexableFieldType ft) {\n    if (ft.indexOptions() == null) {\n      throw new NullPointerException(\"IndexOptions must not be null (field: \\\"\" + name + \"\\\")\");\n    }\n    if (ft.indexOptions() == IndexOptions.NO) {\n      if (ft.storeTermVectors()) {\n        throw new IllegalArgumentException(\"cannot store term vectors \"\n                                           + \"for a field that is not indexed (field=\\\"\" + name + \"\\\")\");\n      }\n      if (ft.storeTermVectorPositions()) {\n        throw new IllegalArgumentException(\"cannot store term vector positions \"\n                                           + \"for a field that is not indexed (field=\\\"\" + name + \"\\\")\");\n      }\n      if (ft.storeTermVectorOffsets()) {\n        throw new IllegalArgumentException(\"cannot store term vector offsets \"\n                                           + \"for a field that is not indexed (field=\\\"\" + name + \"\\\")\");\n      }\n      if (ft.storeTermVectorPayloads()) {\n        throw new IllegalArgumentException(\"cannot store term vector payloads \"\n                                           + \"for a field that is not indexed (field=\\\"\" + name + \"\\\")\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","date":1453060490,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/DefaultIndexingChain#verifyFieldType(String,IndexableFieldType).mjava","sourceNew":null,"sourceOld":"  private static void verifyFieldType(String name, IndexableFieldType ft) {\n    if (ft.indexOptions() == null) {\n      throw new NullPointerException(\"IndexOptions must not be null (field: \\\"\" + name + \"\\\")\");\n    }\n    if (ft.indexOptions() == IndexOptions.NONE) {\n      if (ft.storeTermVectors()) {\n        throw new IllegalArgumentException(\"cannot store term vectors \"\n                                           + \"for a field that is not indexed (field=\\\"\" + name + \"\\\")\");\n      }\n      if (ft.storeTermVectorPositions()) {\n        throw new IllegalArgumentException(\"cannot store term vector positions \"\n                                           + \"for a field that is not indexed (field=\\\"\" + name + \"\\\")\");\n      }\n      if (ft.storeTermVectorOffsets()) {\n        throw new IllegalArgumentException(\"cannot store term vector offsets \"\n                                           + \"for a field that is not indexed (field=\\\"\" + name + \"\\\")\");\n      }\n      if (ft.storeTermVectorPayloads()) {\n        throw new IllegalArgumentException(\"cannot store term vector payloads \"\n                                           + \"for a field that is not indexed (field=\\\"\" + name + \"\\\")\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3394716f52b34ab259ad5247e7595d9f9db6e935":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","52c7e49be259508735752fba88085255014a6ecf"],"0a22eafe3f72a4c2945eaad9547e6c78816978f4":["3394716f52b34ab259ad5247e7595d9f9db6e935","3184874f7f3aca850248483485b4995343066875"],"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3394716f52b34ab259ad5247e7595d9f9db6e935"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2bb2842e561df4e8e9ad89010605fc86ac265465":["3184874f7f3aca850248483485b4995343066875"],"d1edd0fe3b3915bf01160dfd544ab0c18cb77e45":["2bb2842e561df4e8e9ad89010605fc86ac265465"],"52c7e49be259508735752fba88085255014a6ecf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f95ce1375367b92d411a06175eab3915fe93c6bc":["d1edd0fe3b3915bf01160dfd544ab0c18cb77e45"],"3184874f7f3aca850248483485b4995343066875":["3394716f52b34ab259ad5247e7595d9f9db6e935"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["f95ce1375367b92d411a06175eab3915fe93c6bc"]},"commit2Childs":{"3394716f52b34ab259ad5247e7595d9f9db6e935":["0a22eafe3f72a4c2945eaad9547e6c78816978f4","c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","3184874f7f3aca850248483485b4995343066875"],"0a22eafe3f72a4c2945eaad9547e6c78816978f4":[],"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3394716f52b34ab259ad5247e7595d9f9db6e935","c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","52c7e49be259508735752fba88085255014a6ecf"],"2bb2842e561df4e8e9ad89010605fc86ac265465":["d1edd0fe3b3915bf01160dfd544ab0c18cb77e45"],"d1edd0fe3b3915bf01160dfd544ab0c18cb77e45":["f95ce1375367b92d411a06175eab3915fe93c6bc"],"52c7e49be259508735752fba88085255014a6ecf":["3394716f52b34ab259ad5247e7595d9f9db6e935"],"3184874f7f3aca850248483485b4995343066875":["0a22eafe3f72a4c2945eaad9547e6c78816978f4","2bb2842e561df4e8e9ad89010605fc86ac265465"],"f95ce1375367b92d411a06175eab3915fe93c6bc":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["0a22eafe3f72a4c2945eaad9547e6c78816978f4","c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}