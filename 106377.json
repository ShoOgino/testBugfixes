{"path":"lucene/src/test/org/apache/lucene/index/TestPerFieldCodecSupport#assertHybridCodecPerField(Status,String,Codec...).mjava","commits":[{"id":"a493e6d0c3ad86bd55c0a1360d110142e948f2bd","date":1289406991,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestPerFieldCodecSupport#assertHybridCodecPerField(Status,String,Codec...).mjava","pathOld":"/dev/null","sourceNew":"  public void assertHybridCodecPerField(Status checkIndex, String field,\n      Codec... codec) throws IOException {\n    List<SegmentInfoStatus> segmentInfos = checkIndex.segmentInfos;\n    assertEquals(segmentInfos.size(), codec.length);\n    for (int i = 0; i < codec.length; i++) {\n      SegmentCodecs codecInfo = segmentInfos.get(i).codec;\n      FieldInfos fieldInfos = new FieldInfos(checkIndex.dir, IndexFileNames\n          .segmentFileName(segmentInfos.get(i).name, \"\",\n              IndexFileNames.FIELD_INFOS_EXTENSION));\n      FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n      assertEquals(\"faild for segment index: \" + i, codec[i],\n          codecInfo.codecs[fieldInfo.codecId]);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85a883878c0af761245ab048babc63d099f835f3","date":1289553330,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestPerFieldCodecSupport#assertHybridCodecPerField(Status,String,Codec...).mjava","pathOld":"/dev/null","sourceNew":"  public void assertHybridCodecPerField(Status checkIndex, String field,\n      Codec... codec) throws IOException {\n    List<SegmentInfoStatus> segmentInfos = checkIndex.segmentInfos;\n    assertEquals(segmentInfos.size(), codec.length);\n    for (int i = 0; i < codec.length; i++) {\n      SegmentCodecs codecInfo = segmentInfos.get(i).codec;\n      FieldInfos fieldInfos = new FieldInfos(checkIndex.dir, IndexFileNames\n          .segmentFileName(segmentInfos.get(i).name, \"\",\n              IndexFileNames.FIELD_INFOS_EXTENSION));\n      FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n      assertEquals(\"faild for segment index: \" + i, codec[i],\n          codecInfo.codecs[fieldInfo.codecId]);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestPerFieldCodecSupport#assertHybridCodecPerField(Status,String,Codec...).mjava","pathOld":"/dev/null","sourceNew":"  public void assertHybridCodecPerField(Status checkIndex, String field,\n      Codec... codec) throws IOException {\n    List<SegmentInfoStatus> segmentInfos = checkIndex.segmentInfos;\n    assertEquals(segmentInfos.size(), codec.length);\n    for (int i = 0; i < codec.length; i++) {\n      SegmentCodecs codecInfo = segmentInfos.get(i).codec;\n      FieldInfos fieldInfos = new FieldInfos(checkIndex.dir, IndexFileNames\n          .segmentFileName(segmentInfos.get(i).name, \"\",\n              IndexFileNames.FIELD_INFOS_EXTENSION));\n      FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n      assertEquals(\"faild for segment index: \" + i, codec[i],\n          codecInfo.codecs[fieldInfo.codecId]);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0c7a8f7304b75b1528814c5820fa23a96816c27","date":1298314239,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestPerFieldCodecSupport#assertHybridCodecPerField(Status,String,Codec...).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestPerFieldCodecSupport#assertHybridCodecPerField(Status,String,Codec...).mjava","sourceNew":"  public void assertHybridCodecPerField(Status checkIndex, String field,\n      Codec... codec) throws IOException {\n    List<SegmentInfoStatus> segmentInfos = checkIndex.segmentInfos;\n    assertEquals(segmentInfos.size(), codec.length);\n    for (int i = 0; i < codec.length; i++) {\n      SegmentCodecs codecInfo = segmentInfos.get(i).codec;\n      FieldInfos fieldInfos = new FieldInfos(checkIndex.dir, IndexFileNames\n          .segmentFileName(segmentInfos.get(i).name, \"\",\n              IndexFileNames.FIELD_INFOS_EXTENSION));\n      FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n      assertEquals(\"faild for segment index: \" + i, codec[i],\n          codecInfo.codecs[fieldInfo.getCodecId()]);\n    }\n  }\n\n","sourceOld":"  public void assertHybridCodecPerField(Status checkIndex, String field,\n      Codec... codec) throws IOException {\n    List<SegmentInfoStatus> segmentInfos = checkIndex.segmentInfos;\n    assertEquals(segmentInfos.size(), codec.length);\n    for (int i = 0; i < codec.length; i++) {\n      SegmentCodecs codecInfo = segmentInfos.get(i).codec;\n      FieldInfos fieldInfos = new FieldInfos(checkIndex.dir, IndexFileNames\n          .segmentFileName(segmentInfos.get(i).name, \"\",\n              IndexFileNames.FIELD_INFOS_EXTENSION));\n      FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n      assertEquals(\"faild for segment index: \" + i, codec[i],\n          codecInfo.codecs[fieldInfo.codecId]);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestPerFieldCodecSupport#assertHybridCodecPerField(Status,String,Codec...).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestPerFieldCodecSupport#assertHybridCodecPerField(Status,String,Codec...).mjava","sourceNew":"  public void assertHybridCodecPerField(Status checkIndex, String field,\n      Codec... codec) throws IOException {\n    List<SegmentInfoStatus> segmentInfos = checkIndex.segmentInfos;\n    assertEquals(segmentInfos.size(), codec.length);\n    for (int i = 0; i < codec.length; i++) {\n      SegmentCodecs codecInfo = segmentInfos.get(i).codec;\n      FieldInfos fieldInfos = new FieldInfos(checkIndex.dir, IndexFileNames\n          .segmentFileName(segmentInfos.get(i).name, \"\",\n              IndexFileNames.FIELD_INFOS_EXTENSION));\n      FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n      assertEquals(\"faild for segment index: \" + i, codec[i],\n          codecInfo.codecs[fieldInfo.getCodecId()]);\n    }\n  }\n\n","sourceOld":"  public void assertHybridCodecPerField(Status checkIndex, String field,\n      Codec... codec) throws IOException {\n    List<SegmentInfoStatus> segmentInfos = checkIndex.segmentInfos;\n    assertEquals(segmentInfos.size(), codec.length);\n    for (int i = 0; i < codec.length; i++) {\n      SegmentCodecs codecInfo = segmentInfos.get(i).codec;\n      FieldInfos fieldInfos = new FieldInfos(checkIndex.dir, IndexFileNames\n          .segmentFileName(segmentInfos.get(i).name, \"\",\n              IndexFileNames.FIELD_INFOS_EXTENSION));\n      FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n      assertEquals(\"faild for segment index: \" + i, codec[i],\n          codecInfo.codecs[fieldInfo.codecId]);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"14ec33385f6fbb6ce172882d14605790418a5d31","date":1298910796,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestPerFieldCodecSupport#assertHybridCodecPerField(Status,String,Codec...).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestPerFieldCodecSupport#assertHybridCodecPerField(Status,String,Codec...).mjava","sourceNew":"  public void assertHybridCodecPerField(Status checkIndex, String field,\n      Codec... codec) throws IOException {\n    List<SegmentInfoStatus> segmentInfos = checkIndex.segmentInfos;\n    assertEquals(segmentInfos.size(), codec.length);\n    for (int i = 0; i < codec.length; i++) {\n      SegmentCodecs codecInfo = segmentInfos.get(i).codec;\n      FieldInfos fieldInfos = new FieldInfos(checkIndex.dir, IndexFileNames\n          .segmentFileName(segmentInfos.get(i).name, \"\",\n              IndexFileNames.FIELD_INFOS_EXTENSION));\n      FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n      assertEquals(\"faild for segment index: \" + i, codec[i],\n          codecInfo.codecs[fieldInfo.codecId]);\n    }\n  }\n\n","sourceOld":"  public void assertHybridCodecPerField(Status checkIndex, String field,\n      Codec... codec) throws IOException {\n    List<SegmentInfoStatus> segmentInfos = checkIndex.segmentInfos;\n    assertEquals(segmentInfos.size(), codec.length);\n    for (int i = 0; i < codec.length; i++) {\n      SegmentCodecs codecInfo = segmentInfos.get(i).codec;\n      FieldInfos fieldInfos = new FieldInfos(checkIndex.dir, IndexFileNames\n          .segmentFileName(segmentInfos.get(i).name, \"\",\n              IndexFileNames.FIELD_INFOS_EXTENSION));\n      FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n      assertEquals(\"faild for segment index: \" + i, codec[i],\n          codecInfo.codecs[fieldInfo.getCodecId()]);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1224a4027481acce15495b03bce9b48b93b42722","date":1300792329,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestPerFieldCodecSupport#assertHybridCodecPerField(Status,String,Codec...).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestPerFieldCodecSupport#assertHybridCodecPerField(Status,String,Codec...).mjava","sourceNew":"  public void assertHybridCodecPerField(Status checkIndex, String field,\n      Codec... codec) throws IOException {\n    List<SegmentInfoStatus> segmentInfos = checkIndex.segmentInfos;\n    assertEquals(segmentInfos.size(), codec.length);\n    for (int i = 0; i < codec.length; i++) {\n      SegmentCodecs codecInfo = segmentInfos.get(i).codec;\n      FieldInfos fieldInfos = new FieldInfos(checkIndex.dir, IndexFileNames\n          .segmentFileName(segmentInfos.get(i).name, \"\",\n              IndexFileNames.FIELD_INFOS_EXTENSION));\n      FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n      assertEquals(\"faild for segment index: \" + i, codec[i],\n          codecInfo.codecs[fieldInfo.getCodecId()]);\n    }\n  }\n\n","sourceOld":"  public void assertHybridCodecPerField(Status checkIndex, String field,\n      Codec... codec) throws IOException {\n    List<SegmentInfoStatus> segmentInfos = checkIndex.segmentInfos;\n    assertEquals(segmentInfos.size(), codec.length);\n    for (int i = 0; i < codec.length; i++) {\n      SegmentCodecs codecInfo = segmentInfos.get(i).codec;\n      FieldInfos fieldInfos = new FieldInfos(checkIndex.dir, IndexFileNames\n          .segmentFileName(segmentInfos.get(i).name, \"\",\n              IndexFileNames.FIELD_INFOS_EXTENSION));\n      FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n      assertEquals(\"faild for segment index: \" + i, codec[i],\n          codecInfo.codecs[fieldInfo.codecId]);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestPerFieldCodecSupport#assertHybridCodecPerField(Status,String,Codec...).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestPerFieldCodecSupport#assertHybridCodecPerField(Status,String,Codec...).mjava","sourceNew":"  public void assertHybridCodecPerField(Status checkIndex, String field,\n      Codec... codec) throws IOException {\n    List<SegmentInfoStatus> segmentInfos = checkIndex.segmentInfos;\n    assertEquals(segmentInfos.size(), codec.length);\n    for (int i = 0; i < codec.length; i++) {\n      SegmentCodecs codecInfo = segmentInfos.get(i).codec;\n      FieldInfos fieldInfos = new FieldInfos(checkIndex.dir, IndexFileNames\n          .segmentFileName(segmentInfos.get(i).name, \"\",\n              IndexFileNames.FIELD_INFOS_EXTENSION));\n      FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n      assertEquals(\"faild for segment index: \" + i, codec[i],\n          codecInfo.codecs[fieldInfo.getCodecId()]);\n    }\n  }\n\n","sourceOld":"  public void assertHybridCodecPerField(Status checkIndex, String field,\n      Codec... codec) throws IOException {\n    List<SegmentInfoStatus> segmentInfos = checkIndex.segmentInfos;\n    assertEquals(segmentInfos.size(), codec.length);\n    for (int i = 0; i < codec.length; i++) {\n      SegmentCodecs codecInfo = segmentInfos.get(i).codec;\n      FieldInfos fieldInfos = new FieldInfos(checkIndex.dir, IndexFileNames\n          .segmentFileName(segmentInfos.get(i).name, \"\",\n              IndexFileNames.FIELD_INFOS_EXTENSION));\n      FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n      assertEquals(\"faild for segment index: \" + i, codec[i],\n          codecInfo.codecs[fieldInfo.codecId]);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/index/TestPerFieldCodecSupport#assertHybridCodecPerField(Status,String,Codec...).mjava","sourceNew":null,"sourceOld":"  public void assertHybridCodecPerField(Status checkIndex, String field,\n      Codec... codec) throws IOException {\n    List<SegmentInfoStatus> segmentInfos = checkIndex.segmentInfos;\n    assertEquals(segmentInfos.size(), codec.length);\n    for (int i = 0; i < codec.length; i++) {\n      SegmentCodecs codecInfo = segmentInfos.get(i).codec;\n      FieldInfos fieldInfos = new FieldInfos(checkIndex.dir, IndexFileNames\n          .segmentFileName(segmentInfos.get(i).name, \"\",\n              IndexFileNames.FIELD_INFOS_EXTENSION));\n      FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n      assertEquals(\"faild for segment index: \" + i, codec[i],\n          codecInfo.codecs[fieldInfo.getCodecId()]);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7b91922b55d15444d554721b352861d028eb8278":["1224a4027481acce15495b03bce9b48b93b42722"],"14ec33385f6fbb6ce172882d14605790418a5d31":["b0c7a8f7304b75b1528814c5820fa23a96816c27"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["85a883878c0af761245ab048babc63d099f835f3","1224a4027481acce15495b03bce9b48b93b42722"],"b0c7a8f7304b75b1528814c5820fa23a96816c27":["a493e6d0c3ad86bd55c0a1360d110142e948f2bd"],"a493e6d0c3ad86bd55c0a1360d110142e948f2bd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"85a883878c0af761245ab048babc63d099f835f3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a493e6d0c3ad86bd55c0a1360d110142e948f2bd"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a493e6d0c3ad86bd55c0a1360d110142e948f2bd"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","b0c7a8f7304b75b1528814c5820fa23a96816c27"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7b91922b55d15444d554721b352861d028eb8278"],"1224a4027481acce15495b03bce9b48b93b42722":["14ec33385f6fbb6ce172882d14605790418a5d31"]},"commit2Childs":{"7b91922b55d15444d554721b352861d028eb8278":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"14ec33385f6fbb6ce172882d14605790418a5d31":["1224a4027481acce15495b03bce9b48b93b42722"],"d619839baa8ce5503e496b94a9e42ad6f079293f":[],"b0c7a8f7304b75b1528814c5820fa23a96816c27":["14ec33385f6fbb6ce172882d14605790418a5d31","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"85a883878c0af761245ab048babc63d099f835f3":["d619839baa8ce5503e496b94a9e42ad6f079293f"],"a493e6d0c3ad86bd55c0a1360d110142e948f2bd":["b0c7a8f7304b75b1528814c5820fa23a96816c27","85a883878c0af761245ab048babc63d099f835f3","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a493e6d0c3ad86bd55c0a1360d110142e948f2bd","85a883878c0af761245ab048babc63d099f835f3","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"1224a4027481acce15495b03bce9b48b93b42722":["7b91922b55d15444d554721b352861d028eb8278","d619839baa8ce5503e496b94a9e42ad6f079293f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d619839baa8ce5503e496b94a9e42ad6f079293f","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}