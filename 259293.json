{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsReader.EverythingEnum#advance(int).mjava","commits":[{"id":"cf8086c7e11dc41303ef1b8050bd355ddfaee76d","date":1350007219,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsReader.EverythingEnum#advance(int).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/block/BlockPostingsReader.EverythingEnum#advance(int).mjava","sourceNew":"    @Override\n    public int advance(int target) throws IOException {\n      // TODO: make frq block load lazy/skippable\n      // if (DEBUG) {\n      //   System.out.println(\"  FPR.advance target=\" + target);\n      // }\n\n      if (docFreq > BLOCK_SIZE && target > nextSkipDoc) {\n\n        // if (DEBUG) {\n        //   System.out.println(\"    try skipper\");\n        // }\n\n        if (skipper == null) {\n          // Lazy init: first time this enum has ever been used for skipping\n          // if (DEBUG) {\n          //   System.out.println(\"    create skipper\");\n          // }\n          skipper = new Lucene41SkipReader(docIn.clone(),\n                                        Lucene41PostingsWriter.maxSkipLevels,\n                                        BLOCK_SIZE,\n                                        true,\n                                        indexHasOffsets,\n                                        indexHasPayloads);\n        }\n\n        if (!skipped) {\n          assert skipOffset != -1;\n          // This is the first time this enum has skipped\n          // since reset() was called; load the skip data:\n          // if (DEBUG) {\n          //   System.out.println(\"    init skipper\");\n          // }\n          skipper.init(docTermStartFP+skipOffset, docTermStartFP, posTermStartFP, payTermStartFP, docFreq);\n          skipped = true;\n        }\n\n        final int newDocUpto = skipper.skipTo(target) + 1; \n\n        if (newDocUpto > docUpto) {\n          // Skipper moved\n          // if (DEBUG) {\n          //   System.out.println(\"    skipper moved to docUpto=\" + newDocUpto + \" vs current=\" + docUpto + \"; docID=\" + skipper.getDoc() + \" fp=\" + skipper.getDocPointer() + \" pos.fp=\" + skipper.getPosPointer() + \" pos.bufferUpto=\" + skipper.getPosBufferUpto() + \" pay.fp=\" + skipper.getPayPointer() + \" lastStartOffset=\" + lastStartOffset);\n          // }\n          assert newDocUpto % BLOCK_SIZE == 0 : \"got \" + newDocUpto;\n          docUpto = newDocUpto;\n\n          // Force to read next block\n          docBufferUpto = BLOCK_SIZE;\n          accum = skipper.getDoc();\n          docIn.seek(skipper.getDocPointer());\n          posPendingFP = skipper.getPosPointer();\n          payPendingFP = skipper.getPayPointer();\n          posPendingCount = skipper.getPosBufferUpto();\n          lastStartOffset = 0; // new document\n          payloadByteUpto = skipper.getPayloadByteUpto();\n        }\n        nextSkipDoc = skipper.getNextSkipDoc();\n      }\n      if (docUpto == docFreq) {\n        return doc = NO_MORE_DOCS;\n      }\n      if (docBufferUpto == BLOCK_SIZE) {\n        refillDocs();\n      }\n\n      // Now scan:\n      while (true) {\n        // if (DEBUG) {\n        //   System.out.println(\"  scan doc=\" + accum + \" docBufferUpto=\" + docBufferUpto);\n        // }\n        accum += docDeltaBuffer[docBufferUpto];\n        freq = freqBuffer[docBufferUpto];\n        posPendingCount += freq;\n        docBufferUpto++;\n        docUpto++;\n\n        if (accum >= target) {\n          break;\n        }\n        if (docUpto == docFreq) {\n          return doc = NO_MORE_DOCS;\n        }\n      }\n\n      if (liveDocs == null || liveDocs.get(accum)) {\n        // if (DEBUG) {\n        //   System.out.println(\"  return doc=\" + accum);\n        // }\n        position = 0;\n        lastStartOffset = 0;\n        return doc = accum;\n      } else {\n        // if (DEBUG) {\n        //   System.out.println(\"  now do nextDoc()\");\n        // }\n        return nextDoc();\n      }\n    }\n\n","sourceOld":"    @Override\n    public int advance(int target) throws IOException {\n      // TODO: make frq block load lazy/skippable\n      // if (DEBUG) {\n      //   System.out.println(\"  FPR.advance target=\" + target);\n      // }\n\n      if (docFreq > BLOCK_SIZE && target > nextSkipDoc) {\n\n        // if (DEBUG) {\n        //   System.out.println(\"    try skipper\");\n        // }\n\n        if (skipper == null) {\n          // Lazy init: first time this enum has ever been used for skipping\n          // if (DEBUG) {\n          //   System.out.println(\"    create skipper\");\n          // }\n          skipper = new BlockSkipReader(docIn.clone(),\n                                        BlockPostingsWriter.maxSkipLevels,\n                                        BLOCK_SIZE,\n                                        true,\n                                        indexHasOffsets,\n                                        indexHasPayloads);\n        }\n\n        if (!skipped) {\n          assert skipOffset != -1;\n          // This is the first time this enum has skipped\n          // since reset() was called; load the skip data:\n          // if (DEBUG) {\n          //   System.out.println(\"    init skipper\");\n          // }\n          skipper.init(docTermStartFP+skipOffset, docTermStartFP, posTermStartFP, payTermStartFP, docFreq);\n          skipped = true;\n        }\n\n        final int newDocUpto = skipper.skipTo(target) + 1; \n\n        if (newDocUpto > docUpto) {\n          // Skipper moved\n          // if (DEBUG) {\n          //   System.out.println(\"    skipper moved to docUpto=\" + newDocUpto + \" vs current=\" + docUpto + \"; docID=\" + skipper.getDoc() + \" fp=\" + skipper.getDocPointer() + \" pos.fp=\" + skipper.getPosPointer() + \" pos.bufferUpto=\" + skipper.getPosBufferUpto() + \" pay.fp=\" + skipper.getPayPointer() + \" lastStartOffset=\" + lastStartOffset);\n          // }\n          assert newDocUpto % BLOCK_SIZE == 0 : \"got \" + newDocUpto;\n          docUpto = newDocUpto;\n\n          // Force to read next block\n          docBufferUpto = BLOCK_SIZE;\n          accum = skipper.getDoc();\n          docIn.seek(skipper.getDocPointer());\n          posPendingFP = skipper.getPosPointer();\n          payPendingFP = skipper.getPayPointer();\n          posPendingCount = skipper.getPosBufferUpto();\n          lastStartOffset = 0; // new document\n          payloadByteUpto = skipper.getPayloadByteUpto();\n        }\n        nextSkipDoc = skipper.getNextSkipDoc();\n      }\n      if (docUpto == docFreq) {\n        return doc = NO_MORE_DOCS;\n      }\n      if (docBufferUpto == BLOCK_SIZE) {\n        refillDocs();\n      }\n\n      // Now scan:\n      while (true) {\n        // if (DEBUG) {\n        //   System.out.println(\"  scan doc=\" + accum + \" docBufferUpto=\" + docBufferUpto);\n        // }\n        accum += docDeltaBuffer[docBufferUpto];\n        freq = freqBuffer[docBufferUpto];\n        posPendingCount += freq;\n        docBufferUpto++;\n        docUpto++;\n\n        if (accum >= target) {\n          break;\n        }\n        if (docUpto == docFreq) {\n          return doc = NO_MORE_DOCS;\n        }\n      }\n\n      if (liveDocs == null || liveDocs.get(accum)) {\n        // if (DEBUG) {\n        //   System.out.println(\"  return doc=\" + accum);\n        // }\n        position = 0;\n        lastStartOffset = 0;\n        return doc = accum;\n      } else {\n        // if (DEBUG) {\n        //   System.out.println(\"  now do nextDoc()\");\n        // }\n        return nextDoc();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7492bcb52be51e55d596134b95b2e53cc4ffb91","date":1350223278,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsReader.EverythingEnum#advance(int).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/block/BlockPostingsReader.EverythingEnum#advance(int).mjava","sourceNew":"    @Override\n    public int advance(int target) throws IOException {\n      // TODO: make frq block load lazy/skippable\n      // if (DEBUG) {\n      //   System.out.println(\"  FPR.advance target=\" + target);\n      // }\n\n      if (docFreq > BLOCK_SIZE && target > nextSkipDoc) {\n\n        // if (DEBUG) {\n        //   System.out.println(\"    try skipper\");\n        // }\n\n        if (skipper == null) {\n          // Lazy init: first time this enum has ever been used for skipping\n          // if (DEBUG) {\n          //   System.out.println(\"    create skipper\");\n          // }\n          skipper = new Lucene41SkipReader(docIn.clone(),\n                                        Lucene41PostingsWriter.maxSkipLevels,\n                                        BLOCK_SIZE,\n                                        true,\n                                        indexHasOffsets,\n                                        indexHasPayloads);\n        }\n\n        if (!skipped) {\n          assert skipOffset != -1;\n          // This is the first time this enum has skipped\n          // since reset() was called; load the skip data:\n          // if (DEBUG) {\n          //   System.out.println(\"    init skipper\");\n          // }\n          skipper.init(docTermStartFP+skipOffset, docTermStartFP, posTermStartFP, payTermStartFP, docFreq);\n          skipped = true;\n        }\n\n        final int newDocUpto = skipper.skipTo(target) + 1; \n\n        if (newDocUpto > docUpto) {\n          // Skipper moved\n          // if (DEBUG) {\n          //   System.out.println(\"    skipper moved to docUpto=\" + newDocUpto + \" vs current=\" + docUpto + \"; docID=\" + skipper.getDoc() + \" fp=\" + skipper.getDocPointer() + \" pos.fp=\" + skipper.getPosPointer() + \" pos.bufferUpto=\" + skipper.getPosBufferUpto() + \" pay.fp=\" + skipper.getPayPointer() + \" lastStartOffset=\" + lastStartOffset);\n          // }\n          assert newDocUpto % BLOCK_SIZE == 0 : \"got \" + newDocUpto;\n          docUpto = newDocUpto;\n\n          // Force to read next block\n          docBufferUpto = BLOCK_SIZE;\n          accum = skipper.getDoc();\n          docIn.seek(skipper.getDocPointer());\n          posPendingFP = skipper.getPosPointer();\n          payPendingFP = skipper.getPayPointer();\n          posPendingCount = skipper.getPosBufferUpto();\n          lastStartOffset = 0; // new document\n          payloadByteUpto = skipper.getPayloadByteUpto();\n        }\n        nextSkipDoc = skipper.getNextSkipDoc();\n      }\n      if (docUpto == docFreq) {\n        return doc = NO_MORE_DOCS;\n      }\n      if (docBufferUpto == BLOCK_SIZE) {\n        refillDocs();\n      }\n\n      // Now scan:\n      while (true) {\n        // if (DEBUG) {\n        //   System.out.println(\"  scan doc=\" + accum + \" docBufferUpto=\" + docBufferUpto);\n        // }\n        accum += docDeltaBuffer[docBufferUpto];\n        freq = freqBuffer[docBufferUpto];\n        posPendingCount += freq;\n        docBufferUpto++;\n        docUpto++;\n\n        if (accum >= target) {\n          break;\n        }\n        if (docUpto == docFreq) {\n          return doc = NO_MORE_DOCS;\n        }\n      }\n\n      if (liveDocs == null || liveDocs.get(accum)) {\n        // if (DEBUG) {\n        //   System.out.println(\"  return doc=\" + accum);\n        // }\n        position = 0;\n        lastStartOffset = 0;\n        return doc = accum;\n      } else {\n        // if (DEBUG) {\n        //   System.out.println(\"  now do nextDoc()\");\n        // }\n        return nextDoc();\n      }\n    }\n\n","sourceOld":"    @Override\n    public int advance(int target) throws IOException {\n      // TODO: make frq block load lazy/skippable\n      // if (DEBUG) {\n      //   System.out.println(\"  FPR.advance target=\" + target);\n      // }\n\n      if (docFreq > BLOCK_SIZE && target > nextSkipDoc) {\n\n        // if (DEBUG) {\n        //   System.out.println(\"    try skipper\");\n        // }\n\n        if (skipper == null) {\n          // Lazy init: first time this enum has ever been used for skipping\n          // if (DEBUG) {\n          //   System.out.println(\"    create skipper\");\n          // }\n          skipper = new BlockSkipReader(docIn.clone(),\n                                        BlockPostingsWriter.maxSkipLevels,\n                                        BLOCK_SIZE,\n                                        true,\n                                        indexHasOffsets,\n                                        indexHasPayloads);\n        }\n\n        if (!skipped) {\n          assert skipOffset != -1;\n          // This is the first time this enum has skipped\n          // since reset() was called; load the skip data:\n          // if (DEBUG) {\n          //   System.out.println(\"    init skipper\");\n          // }\n          skipper.init(docTermStartFP+skipOffset, docTermStartFP, posTermStartFP, payTermStartFP, docFreq);\n          skipped = true;\n        }\n\n        final int newDocUpto = skipper.skipTo(target) + 1; \n\n        if (newDocUpto > docUpto) {\n          // Skipper moved\n          // if (DEBUG) {\n          //   System.out.println(\"    skipper moved to docUpto=\" + newDocUpto + \" vs current=\" + docUpto + \"; docID=\" + skipper.getDoc() + \" fp=\" + skipper.getDocPointer() + \" pos.fp=\" + skipper.getPosPointer() + \" pos.bufferUpto=\" + skipper.getPosBufferUpto() + \" pay.fp=\" + skipper.getPayPointer() + \" lastStartOffset=\" + lastStartOffset);\n          // }\n          assert newDocUpto % BLOCK_SIZE == 0 : \"got \" + newDocUpto;\n          docUpto = newDocUpto;\n\n          // Force to read next block\n          docBufferUpto = BLOCK_SIZE;\n          accum = skipper.getDoc();\n          docIn.seek(skipper.getDocPointer());\n          posPendingFP = skipper.getPosPointer();\n          payPendingFP = skipper.getPayPointer();\n          posPendingCount = skipper.getPosBufferUpto();\n          lastStartOffset = 0; // new document\n          payloadByteUpto = skipper.getPayloadByteUpto();\n        }\n        nextSkipDoc = skipper.getNextSkipDoc();\n      }\n      if (docUpto == docFreq) {\n        return doc = NO_MORE_DOCS;\n      }\n      if (docBufferUpto == BLOCK_SIZE) {\n        refillDocs();\n      }\n\n      // Now scan:\n      while (true) {\n        // if (DEBUG) {\n        //   System.out.println(\"  scan doc=\" + accum + \" docBufferUpto=\" + docBufferUpto);\n        // }\n        accum += docDeltaBuffer[docBufferUpto];\n        freq = freqBuffer[docBufferUpto];\n        posPendingCount += freq;\n        docBufferUpto++;\n        docUpto++;\n\n        if (accum >= target) {\n          break;\n        }\n        if (docUpto == docFreq) {\n          return doc = NO_MORE_DOCS;\n        }\n      }\n\n      if (liveDocs == null || liveDocs.get(accum)) {\n        // if (DEBUG) {\n        //   System.out.println(\"  return doc=\" + accum);\n        // }\n        position = 0;\n        lastStartOffset = 0;\n        return doc = accum;\n      } else {\n        // if (DEBUG) {\n        //   System.out.println(\"  now do nextDoc()\");\n        // }\n        return nextDoc();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db4fdbf3d262768eabc027cd8321edca0cd11fa8","date":1350574784,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsReader.EverythingEnum#advance(int).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/block/BlockPostingsReader.EverythingEnum#advance(int).mjava","sourceNew":"    @Override\n    public int advance(int target) throws IOException {\n      // TODO: make frq block load lazy/skippable\n      // if (DEBUG) {\n      //   System.out.println(\"  FPR.advance target=\" + target);\n      // }\n\n      if (docFreq > BLOCK_SIZE && target > nextSkipDoc) {\n\n        // if (DEBUG) {\n        //   System.out.println(\"    try skipper\");\n        // }\n\n        if (skipper == null) {\n          // Lazy init: first time this enum has ever been used for skipping\n          // if (DEBUG) {\n          //   System.out.println(\"    create skipper\");\n          // }\n          skipper = new Lucene41SkipReader(docIn.clone(),\n                                        Lucene41PostingsWriter.maxSkipLevels,\n                                        BLOCK_SIZE,\n                                        true,\n                                        indexHasOffsets,\n                                        indexHasPayloads);\n        }\n\n        if (!skipped) {\n          assert skipOffset != -1;\n          // This is the first time this enum has skipped\n          // since reset() was called; load the skip data:\n          // if (DEBUG) {\n          //   System.out.println(\"    init skipper\");\n          // }\n          skipper.init(docTermStartFP+skipOffset, docTermStartFP, posTermStartFP, payTermStartFP, docFreq);\n          skipped = true;\n        }\n\n        final int newDocUpto = skipper.skipTo(target) + 1; \n\n        if (newDocUpto > docUpto) {\n          // Skipper moved\n          // if (DEBUG) {\n          //   System.out.println(\"    skipper moved to docUpto=\" + newDocUpto + \" vs current=\" + docUpto + \"; docID=\" + skipper.getDoc() + \" fp=\" + skipper.getDocPointer() + \" pos.fp=\" + skipper.getPosPointer() + \" pos.bufferUpto=\" + skipper.getPosBufferUpto() + \" pay.fp=\" + skipper.getPayPointer() + \" lastStartOffset=\" + lastStartOffset);\n          // }\n          assert newDocUpto % BLOCK_SIZE == 0 : \"got \" + newDocUpto;\n          docUpto = newDocUpto;\n\n          // Force to read next block\n          docBufferUpto = BLOCK_SIZE;\n          accum = skipper.getDoc();\n          docIn.seek(skipper.getDocPointer());\n          posPendingFP = skipper.getPosPointer();\n          payPendingFP = skipper.getPayPointer();\n          posPendingCount = skipper.getPosBufferUpto();\n          lastStartOffset = 0; // new document\n          payloadByteUpto = skipper.getPayloadByteUpto();\n        }\n        nextSkipDoc = skipper.getNextSkipDoc();\n      }\n      if (docUpto == docFreq) {\n        return doc = NO_MORE_DOCS;\n      }\n      if (docBufferUpto == BLOCK_SIZE) {\n        refillDocs();\n      }\n\n      // Now scan:\n      while (true) {\n        // if (DEBUG) {\n        //   System.out.println(\"  scan doc=\" + accum + \" docBufferUpto=\" + docBufferUpto);\n        // }\n        accum += docDeltaBuffer[docBufferUpto];\n        freq = freqBuffer[docBufferUpto];\n        posPendingCount += freq;\n        docBufferUpto++;\n        docUpto++;\n\n        if (accum >= target) {\n          break;\n        }\n        if (docUpto == docFreq) {\n          return doc = NO_MORE_DOCS;\n        }\n      }\n\n      if (liveDocs == null || liveDocs.get(accum)) {\n        // if (DEBUG) {\n        //   System.out.println(\"  return doc=\" + accum);\n        // }\n        position = 0;\n        lastStartOffset = 0;\n        return doc = accum;\n      } else {\n        // if (DEBUG) {\n        //   System.out.println(\"  now do nextDoc()\");\n        // }\n        return nextDoc();\n      }\n    }\n\n","sourceOld":"    @Override\n    public int advance(int target) throws IOException {\n      // TODO: make frq block load lazy/skippable\n      // if (DEBUG) {\n      //   System.out.println(\"  FPR.advance target=\" + target);\n      // }\n\n      if (docFreq > BLOCK_SIZE && target > nextSkipDoc) {\n\n        // if (DEBUG) {\n        //   System.out.println(\"    try skipper\");\n        // }\n\n        if (skipper == null) {\n          // Lazy init: first time this enum has ever been used for skipping\n          // if (DEBUG) {\n          //   System.out.println(\"    create skipper\");\n          // }\n          skipper = new BlockSkipReader(docIn.clone(),\n                                        BlockPostingsWriter.maxSkipLevels,\n                                        BLOCK_SIZE,\n                                        true,\n                                        indexHasOffsets,\n                                        indexHasPayloads);\n        }\n\n        if (!skipped) {\n          assert skipOffset != -1;\n          // This is the first time this enum has skipped\n          // since reset() was called; load the skip data:\n          // if (DEBUG) {\n          //   System.out.println(\"    init skipper\");\n          // }\n          skipper.init(docTermStartFP+skipOffset, docTermStartFP, posTermStartFP, payTermStartFP, docFreq);\n          skipped = true;\n        }\n\n        final int newDocUpto = skipper.skipTo(target) + 1; \n\n        if (newDocUpto > docUpto) {\n          // Skipper moved\n          // if (DEBUG) {\n          //   System.out.println(\"    skipper moved to docUpto=\" + newDocUpto + \" vs current=\" + docUpto + \"; docID=\" + skipper.getDoc() + \" fp=\" + skipper.getDocPointer() + \" pos.fp=\" + skipper.getPosPointer() + \" pos.bufferUpto=\" + skipper.getPosBufferUpto() + \" pay.fp=\" + skipper.getPayPointer() + \" lastStartOffset=\" + lastStartOffset);\n          // }\n          assert newDocUpto % BLOCK_SIZE == 0 : \"got \" + newDocUpto;\n          docUpto = newDocUpto;\n\n          // Force to read next block\n          docBufferUpto = BLOCK_SIZE;\n          accum = skipper.getDoc();\n          docIn.seek(skipper.getDocPointer());\n          posPendingFP = skipper.getPosPointer();\n          payPendingFP = skipper.getPayPointer();\n          posPendingCount = skipper.getPosBufferUpto();\n          lastStartOffset = 0; // new document\n          payloadByteUpto = skipper.getPayloadByteUpto();\n        }\n        nextSkipDoc = skipper.getNextSkipDoc();\n      }\n      if (docUpto == docFreq) {\n        return doc = NO_MORE_DOCS;\n      }\n      if (docBufferUpto == BLOCK_SIZE) {\n        refillDocs();\n      }\n\n      // Now scan:\n      while (true) {\n        // if (DEBUG) {\n        //   System.out.println(\"  scan doc=\" + accum + \" docBufferUpto=\" + docBufferUpto);\n        // }\n        accum += docDeltaBuffer[docBufferUpto];\n        freq = freqBuffer[docBufferUpto];\n        posPendingCount += freq;\n        docBufferUpto++;\n        docUpto++;\n\n        if (accum >= target) {\n          break;\n        }\n        if (docUpto == docFreq) {\n          return doc = NO_MORE_DOCS;\n        }\n      }\n\n      if (liveDocs == null || liveDocs.get(accum)) {\n        // if (DEBUG) {\n        //   System.out.println(\"  return doc=\" + accum);\n        // }\n        position = 0;\n        lastStartOffset = 0;\n        return doc = accum;\n      } else {\n        // if (DEBUG) {\n        //   System.out.println(\"  now do nextDoc()\");\n        // }\n        return nextDoc();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3d4e5ccb1c589a2962235f13b65cc725050818d9","date":1404995758,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsReader.EverythingEnum#advance(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsReader.EverythingEnum#advance(int).mjava","sourceNew":"    @Override\n    public int advance(int target) throws IOException {\n      // TODO: make frq block load lazy/skippable\n      // if (DEBUG) {\n      //   System.out.println(\"  FPR.advance target=\" + target);\n      // }\n\n      if (target > nextSkipDoc) {\n\n        // if (DEBUG) {\n        //   System.out.println(\"    try skipper\");\n        // }\n\n        if (skipper == null) {\n          // Lazy init: first time this enum has ever been used for skipping\n          // if (DEBUG) {\n          //   System.out.println(\"    create skipper\");\n          // }\n          skipper = new Lucene41SkipReader(docIn.clone(),\n                                        Lucene41PostingsWriter.maxSkipLevels,\n                                        BLOCK_SIZE,\n                                        true,\n                                        indexHasOffsets,\n                                        indexHasPayloads);\n        }\n\n        if (!skipped) {\n          assert skipOffset != -1;\n          // This is the first time this enum has skipped\n          // since reset() was called; load the skip data:\n          // if (DEBUG) {\n          //   System.out.println(\"    init skipper\");\n          // }\n          skipper.init(docTermStartFP+skipOffset, docTermStartFP, posTermStartFP, payTermStartFP, docFreq);\n          skipped = true;\n        }\n\n        final int newDocUpto = skipper.skipTo(target) + 1; \n\n        if (newDocUpto > docUpto) {\n          // Skipper moved\n          // if (DEBUG) {\n          //   System.out.println(\"    skipper moved to docUpto=\" + newDocUpto + \" vs current=\" + docUpto + \"; docID=\" + skipper.getDoc() + \" fp=\" + skipper.getDocPointer() + \" pos.fp=\" + skipper.getPosPointer() + \" pos.bufferUpto=\" + skipper.getPosBufferUpto() + \" pay.fp=\" + skipper.getPayPointer() + \" lastStartOffset=\" + lastStartOffset);\n          // }\n          assert newDocUpto % BLOCK_SIZE == 0 : \"got \" + newDocUpto;\n          docUpto = newDocUpto;\n\n          // Force to read next block\n          docBufferUpto = BLOCK_SIZE;\n          accum = skipper.getDoc();\n          docIn.seek(skipper.getDocPointer());\n          posPendingFP = skipper.getPosPointer();\n          payPendingFP = skipper.getPayPointer();\n          posPendingCount = skipper.getPosBufferUpto();\n          lastStartOffset = 0; // new document\n          payloadByteUpto = skipper.getPayloadByteUpto();\n        }\n        nextSkipDoc = skipper.getNextSkipDoc();\n      }\n      if (docUpto == docFreq) {\n        return doc = NO_MORE_DOCS;\n      }\n      if (docBufferUpto == BLOCK_SIZE) {\n        refillDocs();\n      }\n\n      // Now scan:\n      while (true) {\n        // if (DEBUG) {\n        //   System.out.println(\"  scan doc=\" + accum + \" docBufferUpto=\" + docBufferUpto);\n        // }\n        accum += docDeltaBuffer[docBufferUpto];\n        freq = freqBuffer[docBufferUpto];\n        posPendingCount += freq;\n        docBufferUpto++;\n        docUpto++;\n\n        if (accum >= target) {\n          break;\n        }\n        if (docUpto == docFreq) {\n          return doc = NO_MORE_DOCS;\n        }\n      }\n\n      if (liveDocs == null || liveDocs.get(accum)) {\n        // if (DEBUG) {\n        //   System.out.println(\"  return doc=\" + accum);\n        // }\n        position = 0;\n        lastStartOffset = 0;\n        return doc = accum;\n      } else {\n        // if (DEBUG) {\n        //   System.out.println(\"  now do nextDoc()\");\n        // }\n        return nextDoc();\n      }\n    }\n\n","sourceOld":"    @Override\n    public int advance(int target) throws IOException {\n      // TODO: make frq block load lazy/skippable\n      // if (DEBUG) {\n      //   System.out.println(\"  FPR.advance target=\" + target);\n      // }\n\n      if (docFreq > BLOCK_SIZE && target > nextSkipDoc) {\n\n        // if (DEBUG) {\n        //   System.out.println(\"    try skipper\");\n        // }\n\n        if (skipper == null) {\n          // Lazy init: first time this enum has ever been used for skipping\n          // if (DEBUG) {\n          //   System.out.println(\"    create skipper\");\n          // }\n          skipper = new Lucene41SkipReader(docIn.clone(),\n                                        Lucene41PostingsWriter.maxSkipLevels,\n                                        BLOCK_SIZE,\n                                        true,\n                                        indexHasOffsets,\n                                        indexHasPayloads);\n        }\n\n        if (!skipped) {\n          assert skipOffset != -1;\n          // This is the first time this enum has skipped\n          // since reset() was called; load the skip data:\n          // if (DEBUG) {\n          //   System.out.println(\"    init skipper\");\n          // }\n          skipper.init(docTermStartFP+skipOffset, docTermStartFP, posTermStartFP, payTermStartFP, docFreq);\n          skipped = true;\n        }\n\n        final int newDocUpto = skipper.skipTo(target) + 1; \n\n        if (newDocUpto > docUpto) {\n          // Skipper moved\n          // if (DEBUG) {\n          //   System.out.println(\"    skipper moved to docUpto=\" + newDocUpto + \" vs current=\" + docUpto + \"; docID=\" + skipper.getDoc() + \" fp=\" + skipper.getDocPointer() + \" pos.fp=\" + skipper.getPosPointer() + \" pos.bufferUpto=\" + skipper.getPosBufferUpto() + \" pay.fp=\" + skipper.getPayPointer() + \" lastStartOffset=\" + lastStartOffset);\n          // }\n          assert newDocUpto % BLOCK_SIZE == 0 : \"got \" + newDocUpto;\n          docUpto = newDocUpto;\n\n          // Force to read next block\n          docBufferUpto = BLOCK_SIZE;\n          accum = skipper.getDoc();\n          docIn.seek(skipper.getDocPointer());\n          posPendingFP = skipper.getPosPointer();\n          payPendingFP = skipper.getPayPointer();\n          posPendingCount = skipper.getPosBufferUpto();\n          lastStartOffset = 0; // new document\n          payloadByteUpto = skipper.getPayloadByteUpto();\n        }\n        nextSkipDoc = skipper.getNextSkipDoc();\n      }\n      if (docUpto == docFreq) {\n        return doc = NO_MORE_DOCS;\n      }\n      if (docBufferUpto == BLOCK_SIZE) {\n        refillDocs();\n      }\n\n      // Now scan:\n      while (true) {\n        // if (DEBUG) {\n        //   System.out.println(\"  scan doc=\" + accum + \" docBufferUpto=\" + docBufferUpto);\n        // }\n        accum += docDeltaBuffer[docBufferUpto];\n        freq = freqBuffer[docBufferUpto];\n        posPendingCount += freq;\n        docBufferUpto++;\n        docUpto++;\n\n        if (accum >= target) {\n          break;\n        }\n        if (docUpto == docFreq) {\n          return doc = NO_MORE_DOCS;\n        }\n      }\n\n      if (liveDocs == null || liveDocs.get(accum)) {\n        // if (DEBUG) {\n        //   System.out.println(\"  return doc=\" + accum);\n        // }\n        position = 0;\n        lastStartOffset = 0;\n        return doc = accum;\n      } else {\n        // if (DEBUG) {\n        //   System.out.println(\"  now do nextDoc()\");\n        // }\n        return nextDoc();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"99eb4a732d1a908f4636ace52928876136bf1896","date":1413829552,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsReader.EverythingEnum#advance(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsReader.EverythingEnum#advance(int).mjava","sourceNew":"    @Override\n    public int advance(int target) throws IOException {\n      // TODO: make frq block load lazy/skippable\n      // if (DEBUG) {\n      //   System.out.println(\"  FPR.advance target=\" + target);\n      // }\n\n      if (target > nextSkipDoc) {\n\n        // if (DEBUG) {\n        //   System.out.println(\"    try skipper\");\n        // }\n\n        if (skipper == null) {\n          // Lazy init: first time this enum has ever been used for skipping\n          // if (DEBUG) {\n          //   System.out.println(\"    create skipper\");\n          // }\n          skipper = new Lucene41SkipReader(docIn.clone(),\n                                        Lucene41PostingsFormat.maxSkipLevels,\n                                        BLOCK_SIZE,\n                                        true,\n                                        indexHasOffsets,\n                                        indexHasPayloads);\n        }\n\n        if (!skipped) {\n          assert skipOffset != -1;\n          // This is the first time this enum has skipped\n          // since reset() was called; load the skip data:\n          // if (DEBUG) {\n          //   System.out.println(\"    init skipper\");\n          // }\n          skipper.init(docTermStartFP+skipOffset, docTermStartFP, posTermStartFP, payTermStartFP, docFreq);\n          skipped = true;\n        }\n\n        final int newDocUpto = skipper.skipTo(target) + 1; \n\n        if (newDocUpto > docUpto) {\n          // Skipper moved\n          // if (DEBUG) {\n          //   System.out.println(\"    skipper moved to docUpto=\" + newDocUpto + \" vs current=\" + docUpto + \"; docID=\" + skipper.getDoc() + \" fp=\" + skipper.getDocPointer() + \" pos.fp=\" + skipper.getPosPointer() + \" pos.bufferUpto=\" + skipper.getPosBufferUpto() + \" pay.fp=\" + skipper.getPayPointer() + \" lastStartOffset=\" + lastStartOffset);\n          // }\n          assert newDocUpto % BLOCK_SIZE == 0 : \"got \" + newDocUpto;\n          docUpto = newDocUpto;\n\n          // Force to read next block\n          docBufferUpto = BLOCK_SIZE;\n          accum = skipper.getDoc();\n          docIn.seek(skipper.getDocPointer());\n          posPendingFP = skipper.getPosPointer();\n          payPendingFP = skipper.getPayPointer();\n          posPendingCount = skipper.getPosBufferUpto();\n          lastStartOffset = 0; // new document\n          payloadByteUpto = skipper.getPayloadByteUpto();\n        }\n        nextSkipDoc = skipper.getNextSkipDoc();\n      }\n      if (docUpto == docFreq) {\n        return doc = NO_MORE_DOCS;\n      }\n      if (docBufferUpto == BLOCK_SIZE) {\n        refillDocs();\n      }\n\n      // Now scan:\n      while (true) {\n        // if (DEBUG) {\n        //   System.out.println(\"  scan doc=\" + accum + \" docBufferUpto=\" + docBufferUpto);\n        // }\n        accum += docDeltaBuffer[docBufferUpto];\n        freq = freqBuffer[docBufferUpto];\n        posPendingCount += freq;\n        docBufferUpto++;\n        docUpto++;\n\n        if (accum >= target) {\n          break;\n        }\n        if (docUpto == docFreq) {\n          return doc = NO_MORE_DOCS;\n        }\n      }\n\n      if (liveDocs == null || liveDocs.get(accum)) {\n        // if (DEBUG) {\n        //   System.out.println(\"  return doc=\" + accum);\n        // }\n        position = 0;\n        lastStartOffset = 0;\n        return doc = accum;\n      } else {\n        // if (DEBUG) {\n        //   System.out.println(\"  now do nextDoc()\");\n        // }\n        return nextDoc();\n      }\n    }\n\n","sourceOld":"    @Override\n    public int advance(int target) throws IOException {\n      // TODO: make frq block load lazy/skippable\n      // if (DEBUG) {\n      //   System.out.println(\"  FPR.advance target=\" + target);\n      // }\n\n      if (target > nextSkipDoc) {\n\n        // if (DEBUG) {\n        //   System.out.println(\"    try skipper\");\n        // }\n\n        if (skipper == null) {\n          // Lazy init: first time this enum has ever been used for skipping\n          // if (DEBUG) {\n          //   System.out.println(\"    create skipper\");\n          // }\n          skipper = new Lucene41SkipReader(docIn.clone(),\n                                        Lucene41PostingsWriter.maxSkipLevels,\n                                        BLOCK_SIZE,\n                                        true,\n                                        indexHasOffsets,\n                                        indexHasPayloads);\n        }\n\n        if (!skipped) {\n          assert skipOffset != -1;\n          // This is the first time this enum has skipped\n          // since reset() was called; load the skip data:\n          // if (DEBUG) {\n          //   System.out.println(\"    init skipper\");\n          // }\n          skipper.init(docTermStartFP+skipOffset, docTermStartFP, posTermStartFP, payTermStartFP, docFreq);\n          skipped = true;\n        }\n\n        final int newDocUpto = skipper.skipTo(target) + 1; \n\n        if (newDocUpto > docUpto) {\n          // Skipper moved\n          // if (DEBUG) {\n          //   System.out.println(\"    skipper moved to docUpto=\" + newDocUpto + \" vs current=\" + docUpto + \"; docID=\" + skipper.getDoc() + \" fp=\" + skipper.getDocPointer() + \" pos.fp=\" + skipper.getPosPointer() + \" pos.bufferUpto=\" + skipper.getPosBufferUpto() + \" pay.fp=\" + skipper.getPayPointer() + \" lastStartOffset=\" + lastStartOffset);\n          // }\n          assert newDocUpto % BLOCK_SIZE == 0 : \"got \" + newDocUpto;\n          docUpto = newDocUpto;\n\n          // Force to read next block\n          docBufferUpto = BLOCK_SIZE;\n          accum = skipper.getDoc();\n          docIn.seek(skipper.getDocPointer());\n          posPendingFP = skipper.getPosPointer();\n          payPendingFP = skipper.getPayPointer();\n          posPendingCount = skipper.getPosBufferUpto();\n          lastStartOffset = 0; // new document\n          payloadByteUpto = skipper.getPayloadByteUpto();\n        }\n        nextSkipDoc = skipper.getNextSkipDoc();\n      }\n      if (docUpto == docFreq) {\n        return doc = NO_MORE_DOCS;\n      }\n      if (docBufferUpto == BLOCK_SIZE) {\n        refillDocs();\n      }\n\n      // Now scan:\n      while (true) {\n        // if (DEBUG) {\n        //   System.out.println(\"  scan doc=\" + accum + \" docBufferUpto=\" + docBufferUpto);\n        // }\n        accum += docDeltaBuffer[docBufferUpto];\n        freq = freqBuffer[docBufferUpto];\n        posPendingCount += freq;\n        docBufferUpto++;\n        docUpto++;\n\n        if (accum >= target) {\n          break;\n        }\n        if (docUpto == docFreq) {\n          return doc = NO_MORE_DOCS;\n        }\n      }\n\n      if (liveDocs == null || liveDocs.get(accum)) {\n        // if (DEBUG) {\n        //   System.out.println(\"  return doc=\" + accum);\n        // }\n        position = 0;\n        lastStartOffset = 0;\n        return doc = accum;\n      } else {\n        // if (DEBUG) {\n        //   System.out.println(\"  now do nextDoc()\");\n        // }\n        return nextDoc();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"99eb4a732d1a908f4636ace52928876136bf1896","date":1413829552,"type":6,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsReader.EverythingEnum#advance(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsReader.EverythingEnum#advance(int).mjava","sourceNew":"    @Override\n    public int advance(int target) throws IOException {\n      // TODO: make frq block load lazy/skippable\n\n      if (target > nextSkipDoc) {\n        if (skipper == null) {\n          // Lazy init: first time this enum has ever been used for skipping\n          skipper = new Lucene50SkipReader(docIn.clone(),\n                                        Lucene50PostingsWriter.MAX_SKIP_LEVELS,\n                                        BLOCK_SIZE,\n                                        true,\n                                        indexHasOffsets,\n                                        indexHasPayloads);\n        }\n\n        if (!skipped) {\n          assert skipOffset != -1;\n          // This is the first time this enum has skipped\n          // since reset() was called; load the skip data:\n          skipper.init(docTermStartFP+skipOffset, docTermStartFP, posTermStartFP, payTermStartFP, docFreq);\n          skipped = true;\n        }\n\n        final int newDocUpto = skipper.skipTo(target) + 1; \n\n        if (newDocUpto > docUpto) {\n          // Skipper moved\n          assert newDocUpto % BLOCK_SIZE == 0 : \"got \" + newDocUpto;\n          docUpto = newDocUpto;\n\n          // Force to read next block\n          docBufferUpto = BLOCK_SIZE;\n          accum = skipper.getDoc();\n          docIn.seek(skipper.getDocPointer());\n          posPendingFP = skipper.getPosPointer();\n          payPendingFP = skipper.getPayPointer();\n          posPendingCount = skipper.getPosBufferUpto();\n          lastStartOffset = 0; // new document\n          payloadByteUpto = skipper.getPayloadByteUpto();\n        }\n        nextSkipDoc = skipper.getNextSkipDoc();\n      }\n      if (docUpto == docFreq) {\n        return doc = NO_MORE_DOCS;\n      }\n      if (docBufferUpto == BLOCK_SIZE) {\n        refillDocs();\n      }\n\n      // Now scan:\n      while (true) {\n        accum += docDeltaBuffer[docBufferUpto];\n        freq = freqBuffer[docBufferUpto];\n        posPendingCount += freq;\n        docBufferUpto++;\n        docUpto++;\n\n        if (accum >= target) {\n          break;\n        }\n        if (docUpto == docFreq) {\n          return doc = NO_MORE_DOCS;\n        }\n      }\n\n      if (liveDocs == null || liveDocs.get(accum)) {\n        position = 0;\n        lastStartOffset = 0;\n        return doc = accum;\n      } else {\n        return nextDoc();\n      }\n    }\n\n","sourceOld":"    @Override\n    public int advance(int target) throws IOException {\n      // TODO: make frq block load lazy/skippable\n      // if (DEBUG) {\n      //   System.out.println(\"  FPR.advance target=\" + target);\n      // }\n\n      if (target > nextSkipDoc) {\n\n        // if (DEBUG) {\n        //   System.out.println(\"    try skipper\");\n        // }\n\n        if (skipper == null) {\n          // Lazy init: first time this enum has ever been used for skipping\n          // if (DEBUG) {\n          //   System.out.println(\"    create skipper\");\n          // }\n          skipper = new Lucene41SkipReader(docIn.clone(),\n                                        Lucene41PostingsWriter.maxSkipLevels,\n                                        BLOCK_SIZE,\n                                        true,\n                                        indexHasOffsets,\n                                        indexHasPayloads);\n        }\n\n        if (!skipped) {\n          assert skipOffset != -1;\n          // This is the first time this enum has skipped\n          // since reset() was called; load the skip data:\n          // if (DEBUG) {\n          //   System.out.println(\"    init skipper\");\n          // }\n          skipper.init(docTermStartFP+skipOffset, docTermStartFP, posTermStartFP, payTermStartFP, docFreq);\n          skipped = true;\n        }\n\n        final int newDocUpto = skipper.skipTo(target) + 1; \n\n        if (newDocUpto > docUpto) {\n          // Skipper moved\n          // if (DEBUG) {\n          //   System.out.println(\"    skipper moved to docUpto=\" + newDocUpto + \" vs current=\" + docUpto + \"; docID=\" + skipper.getDoc() + \" fp=\" + skipper.getDocPointer() + \" pos.fp=\" + skipper.getPosPointer() + \" pos.bufferUpto=\" + skipper.getPosBufferUpto() + \" pay.fp=\" + skipper.getPayPointer() + \" lastStartOffset=\" + lastStartOffset);\n          // }\n          assert newDocUpto % BLOCK_SIZE == 0 : \"got \" + newDocUpto;\n          docUpto = newDocUpto;\n\n          // Force to read next block\n          docBufferUpto = BLOCK_SIZE;\n          accum = skipper.getDoc();\n          docIn.seek(skipper.getDocPointer());\n          posPendingFP = skipper.getPosPointer();\n          payPendingFP = skipper.getPayPointer();\n          posPendingCount = skipper.getPosBufferUpto();\n          lastStartOffset = 0; // new document\n          payloadByteUpto = skipper.getPayloadByteUpto();\n        }\n        nextSkipDoc = skipper.getNextSkipDoc();\n      }\n      if (docUpto == docFreq) {\n        return doc = NO_MORE_DOCS;\n      }\n      if (docBufferUpto == BLOCK_SIZE) {\n        refillDocs();\n      }\n\n      // Now scan:\n      while (true) {\n        // if (DEBUG) {\n        //   System.out.println(\"  scan doc=\" + accum + \" docBufferUpto=\" + docBufferUpto);\n        // }\n        accum += docDeltaBuffer[docBufferUpto];\n        freq = freqBuffer[docBufferUpto];\n        posPendingCount += freq;\n        docBufferUpto++;\n        docUpto++;\n\n        if (accum >= target) {\n          break;\n        }\n        if (docUpto == docFreq) {\n          return doc = NO_MORE_DOCS;\n        }\n      }\n\n      if (liveDocs == null || liveDocs.get(accum)) {\n        // if (DEBUG) {\n        //   System.out.println(\"  return doc=\" + accum);\n        // }\n        position = 0;\n        lastStartOffset = 0;\n        return doc = accum;\n      } else {\n        // if (DEBUG) {\n        //   System.out.println(\"  now do nextDoc()\");\n        // }\n        return nextDoc();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db68c63cbfaa8698b9c4475f75ed2b9c9696d238","date":1414118621,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsReader.EverythingEnum#advance(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsReader.EverythingEnum#advance(int).mjava","sourceNew":"    @Override\n    public int advance(int target) throws IOException {\n      // TODO: make frq block load lazy/skippable\n      // if (DEBUG) {\n      //   System.out.println(\"  FPR.advance target=\" + target);\n      // }\n\n      if (target > nextSkipDoc) {\n\n        // if (DEBUG) {\n        //   System.out.println(\"    try skipper\");\n        // }\n\n        if (skipper == null) {\n          // Lazy init: first time this enum has ever been used for skipping\n          // if (DEBUG) {\n          //   System.out.println(\"    create skipper\");\n          // }\n          skipper = new Lucene41SkipReader(docIn.clone(),\n                                        Lucene41PostingsFormat.maxSkipLevels,\n                                        BLOCK_SIZE,\n                                        true,\n                                        indexHasOffsets,\n                                        indexHasPayloads);\n        }\n\n        if (!skipped) {\n          assert skipOffset != -1;\n          // This is the first time this enum has skipped\n          // since reset() was called; load the skip data:\n          // if (DEBUG) {\n          //   System.out.println(\"    init skipper\");\n          // }\n          skipper.init(docTermStartFP+skipOffset, docTermStartFP, posTermStartFP, payTermStartFP, docFreq);\n          skipped = true;\n        }\n\n        final int newDocUpto = skipper.skipTo(target) + 1; \n\n        if (newDocUpto > docUpto) {\n          // Skipper moved\n          // if (DEBUG) {\n          //   System.out.println(\"    skipper moved to docUpto=\" + newDocUpto + \" vs current=\" + docUpto + \"; docID=\" + skipper.getDoc() + \" fp=\" + skipper.getDocPointer() + \" pos.fp=\" + skipper.getPosPointer() + \" pos.bufferUpto=\" + skipper.getPosBufferUpto() + \" pay.fp=\" + skipper.getPayPointer() + \" lastStartOffset=\" + lastStartOffset);\n          // }\n          assert newDocUpto % BLOCK_SIZE == 0 : \"got \" + newDocUpto;\n          docUpto = newDocUpto;\n\n          // Force to read next block\n          docBufferUpto = BLOCK_SIZE;\n          accum = skipper.getDoc();\n          docIn.seek(skipper.getDocPointer());\n          posPendingFP = skipper.getPosPointer();\n          payPendingFP = skipper.getPayPointer();\n          posPendingCount = skipper.getPosBufferUpto();\n          lastStartOffset = 0; // new document\n          payloadByteUpto = skipper.getPayloadByteUpto();\n        }\n        nextSkipDoc = skipper.getNextSkipDoc();\n      }\n      if (docUpto == docFreq) {\n        return doc = NO_MORE_DOCS;\n      }\n      if (docBufferUpto == BLOCK_SIZE) {\n        refillDocs();\n      }\n\n      // Now scan:\n      while (true) {\n        // if (DEBUG) {\n        //   System.out.println(\"  scan doc=\" + accum + \" docBufferUpto=\" + docBufferUpto);\n        // }\n        accum += docDeltaBuffer[docBufferUpto];\n        freq = freqBuffer[docBufferUpto];\n        posPendingCount += freq;\n        docBufferUpto++;\n        docUpto++;\n\n        if (accum >= target) {\n          break;\n        }\n        if (docUpto == docFreq) {\n          return doc = NO_MORE_DOCS;\n        }\n      }\n\n      if (liveDocs == null || liveDocs.get(accum)) {\n        // if (DEBUG) {\n        //   System.out.println(\"  return doc=\" + accum);\n        // }\n        position = 0;\n        lastStartOffset = 0;\n        return doc = accum;\n      } else {\n        // if (DEBUG) {\n        //   System.out.println(\"  now do nextDoc()\");\n        // }\n        return nextDoc();\n      }\n    }\n\n","sourceOld":"    @Override\n    public int advance(int target) throws IOException {\n      // TODO: make frq block load lazy/skippable\n      // if (DEBUG) {\n      //   System.out.println(\"  FPR.advance target=\" + target);\n      // }\n\n      if (target > nextSkipDoc) {\n\n        // if (DEBUG) {\n        //   System.out.println(\"    try skipper\");\n        // }\n\n        if (skipper == null) {\n          // Lazy init: first time this enum has ever been used for skipping\n          // if (DEBUG) {\n          //   System.out.println(\"    create skipper\");\n          // }\n          skipper = new Lucene41SkipReader(docIn.clone(),\n                                        Lucene41PostingsWriter.maxSkipLevels,\n                                        BLOCK_SIZE,\n                                        true,\n                                        indexHasOffsets,\n                                        indexHasPayloads);\n        }\n\n        if (!skipped) {\n          assert skipOffset != -1;\n          // This is the first time this enum has skipped\n          // since reset() was called; load the skip data:\n          // if (DEBUG) {\n          //   System.out.println(\"    init skipper\");\n          // }\n          skipper.init(docTermStartFP+skipOffset, docTermStartFP, posTermStartFP, payTermStartFP, docFreq);\n          skipped = true;\n        }\n\n        final int newDocUpto = skipper.skipTo(target) + 1; \n\n        if (newDocUpto > docUpto) {\n          // Skipper moved\n          // if (DEBUG) {\n          //   System.out.println(\"    skipper moved to docUpto=\" + newDocUpto + \" vs current=\" + docUpto + \"; docID=\" + skipper.getDoc() + \" fp=\" + skipper.getDocPointer() + \" pos.fp=\" + skipper.getPosPointer() + \" pos.bufferUpto=\" + skipper.getPosBufferUpto() + \" pay.fp=\" + skipper.getPayPointer() + \" lastStartOffset=\" + lastStartOffset);\n          // }\n          assert newDocUpto % BLOCK_SIZE == 0 : \"got \" + newDocUpto;\n          docUpto = newDocUpto;\n\n          // Force to read next block\n          docBufferUpto = BLOCK_SIZE;\n          accum = skipper.getDoc();\n          docIn.seek(skipper.getDocPointer());\n          posPendingFP = skipper.getPosPointer();\n          payPendingFP = skipper.getPayPointer();\n          posPendingCount = skipper.getPosBufferUpto();\n          lastStartOffset = 0; // new document\n          payloadByteUpto = skipper.getPayloadByteUpto();\n        }\n        nextSkipDoc = skipper.getNextSkipDoc();\n      }\n      if (docUpto == docFreq) {\n        return doc = NO_MORE_DOCS;\n      }\n      if (docBufferUpto == BLOCK_SIZE) {\n        refillDocs();\n      }\n\n      // Now scan:\n      while (true) {\n        // if (DEBUG) {\n        //   System.out.println(\"  scan doc=\" + accum + \" docBufferUpto=\" + docBufferUpto);\n        // }\n        accum += docDeltaBuffer[docBufferUpto];\n        freq = freqBuffer[docBufferUpto];\n        posPendingCount += freq;\n        docBufferUpto++;\n        docUpto++;\n\n        if (accum >= target) {\n          break;\n        }\n        if (docUpto == docFreq) {\n          return doc = NO_MORE_DOCS;\n        }\n      }\n\n      if (liveDocs == null || liveDocs.get(accum)) {\n        // if (DEBUG) {\n        //   System.out.println(\"  return doc=\" + accum);\n        // }\n        position = 0;\n        lastStartOffset = 0;\n        return doc = accum;\n      } else {\n        // if (DEBUG) {\n        //   System.out.println(\"  now do nextDoc()\");\n        // }\n        return nextDoc();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db68c63cbfaa8698b9c4475f75ed2b9c9696d238","date":1414118621,"type":6,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsReader.EverythingEnum#advance(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsReader.EverythingEnum#advance(int).mjava","sourceNew":"    @Override\n    public int advance(int target) throws IOException {\n      // TODO: make frq block load lazy/skippable\n\n      if (target > nextSkipDoc) {\n        if (skipper == null) {\n          // Lazy init: first time this enum has ever been used for skipping\n          skipper = new Lucene50SkipReader(docIn.clone(),\n                                        MAX_SKIP_LEVELS,\n                                        BLOCK_SIZE,\n                                        true,\n                                        indexHasOffsets,\n                                        indexHasPayloads);\n        }\n\n        if (!skipped) {\n          assert skipOffset != -1;\n          // This is the first time this enum has skipped\n          // since reset() was called; load the skip data:\n          skipper.init(docTermStartFP+skipOffset, docTermStartFP, posTermStartFP, payTermStartFP, docFreq);\n          skipped = true;\n        }\n\n        final int newDocUpto = skipper.skipTo(target) + 1; \n\n        if (newDocUpto > docUpto) {\n          // Skipper moved\n          assert newDocUpto % BLOCK_SIZE == 0 : \"got \" + newDocUpto;\n          docUpto = newDocUpto;\n\n          // Force to read next block\n          docBufferUpto = BLOCK_SIZE;\n          accum = skipper.getDoc();\n          docIn.seek(skipper.getDocPointer());\n          posPendingFP = skipper.getPosPointer();\n          payPendingFP = skipper.getPayPointer();\n          posPendingCount = skipper.getPosBufferUpto();\n          lastStartOffset = 0; // new document\n          payloadByteUpto = skipper.getPayloadByteUpto();\n        }\n        nextSkipDoc = skipper.getNextSkipDoc();\n      }\n      if (docUpto == docFreq) {\n        return doc = NO_MORE_DOCS;\n      }\n      if (docBufferUpto == BLOCK_SIZE) {\n        refillDocs();\n      }\n\n      // Now scan:\n      while (true) {\n        accum += docDeltaBuffer[docBufferUpto];\n        freq = freqBuffer[docBufferUpto];\n        posPendingCount += freq;\n        docBufferUpto++;\n        docUpto++;\n\n        if (accum >= target) {\n          break;\n        }\n        if (docUpto == docFreq) {\n          return doc = NO_MORE_DOCS;\n        }\n      }\n\n      if (liveDocs == null || liveDocs.get(accum)) {\n        position = 0;\n        lastStartOffset = 0;\n        return doc = accum;\n      } else {\n        return nextDoc();\n      }\n    }\n\n","sourceOld":"    @Override\n    public int advance(int target) throws IOException {\n      // TODO: make frq block load lazy/skippable\n      // if (DEBUG) {\n      //   System.out.println(\"  FPR.advance target=\" + target);\n      // }\n\n      if (target > nextSkipDoc) {\n\n        // if (DEBUG) {\n        //   System.out.println(\"    try skipper\");\n        // }\n\n        if (skipper == null) {\n          // Lazy init: first time this enum has ever been used for skipping\n          // if (DEBUG) {\n          //   System.out.println(\"    create skipper\");\n          // }\n          skipper = new Lucene41SkipReader(docIn.clone(),\n                                        Lucene41PostingsWriter.maxSkipLevels,\n                                        BLOCK_SIZE,\n                                        true,\n                                        indexHasOffsets,\n                                        indexHasPayloads);\n        }\n\n        if (!skipped) {\n          assert skipOffset != -1;\n          // This is the first time this enum has skipped\n          // since reset() was called; load the skip data:\n          // if (DEBUG) {\n          //   System.out.println(\"    init skipper\");\n          // }\n          skipper.init(docTermStartFP+skipOffset, docTermStartFP, posTermStartFP, payTermStartFP, docFreq);\n          skipped = true;\n        }\n\n        final int newDocUpto = skipper.skipTo(target) + 1; \n\n        if (newDocUpto > docUpto) {\n          // Skipper moved\n          // if (DEBUG) {\n          //   System.out.println(\"    skipper moved to docUpto=\" + newDocUpto + \" vs current=\" + docUpto + \"; docID=\" + skipper.getDoc() + \" fp=\" + skipper.getDocPointer() + \" pos.fp=\" + skipper.getPosPointer() + \" pos.bufferUpto=\" + skipper.getPosBufferUpto() + \" pay.fp=\" + skipper.getPayPointer() + \" lastStartOffset=\" + lastStartOffset);\n          // }\n          assert newDocUpto % BLOCK_SIZE == 0 : \"got \" + newDocUpto;\n          docUpto = newDocUpto;\n\n          // Force to read next block\n          docBufferUpto = BLOCK_SIZE;\n          accum = skipper.getDoc();\n          docIn.seek(skipper.getDocPointer());\n          posPendingFP = skipper.getPosPointer();\n          payPendingFP = skipper.getPayPointer();\n          posPendingCount = skipper.getPosBufferUpto();\n          lastStartOffset = 0; // new document\n          payloadByteUpto = skipper.getPayloadByteUpto();\n        }\n        nextSkipDoc = skipper.getNextSkipDoc();\n      }\n      if (docUpto == docFreq) {\n        return doc = NO_MORE_DOCS;\n      }\n      if (docBufferUpto == BLOCK_SIZE) {\n        refillDocs();\n      }\n\n      // Now scan:\n      while (true) {\n        // if (DEBUG) {\n        //   System.out.println(\"  scan doc=\" + accum + \" docBufferUpto=\" + docBufferUpto);\n        // }\n        accum += docDeltaBuffer[docBufferUpto];\n        freq = freqBuffer[docBufferUpto];\n        posPendingCount += freq;\n        docBufferUpto++;\n        docUpto++;\n\n        if (accum >= target) {\n          break;\n        }\n        if (docUpto == docFreq) {\n          return doc = NO_MORE_DOCS;\n        }\n      }\n\n      if (liveDocs == null || liveDocs.get(accum)) {\n        // if (DEBUG) {\n        //   System.out.println(\"  return doc=\" + accum);\n        // }\n        position = 0;\n        lastStartOffset = 0;\n        return doc = accum;\n      } else {\n        // if (DEBUG) {\n        //   System.out.println(\"  now do nextDoc()\");\n        // }\n        return nextDoc();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7492bcb52be51e55d596134b95b2e53cc4ffb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","cf8086c7e11dc41303ef1b8050bd355ddfaee76d"],"99eb4a732d1a908f4636ace52928876136bf1896":["3d4e5ccb1c589a2962235f13b65cc725050818d9"],"3d4e5ccb1c589a2962235f13b65cc725050818d9":["c7492bcb52be51e55d596134b95b2e53cc4ffb91"],"cf8086c7e11dc41303ef1b8050bd355ddfaee76d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"db4fdbf3d262768eabc027cd8321edca0cd11fa8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c7492bcb52be51e55d596134b95b2e53cc4ffb91"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["3d4e5ccb1c589a2962235f13b65cc725050818d9","99eb4a732d1a908f4636ace52928876136bf1896"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"]},"commit2Childs":{"c7492bcb52be51e55d596134b95b2e53cc4ffb91":["3d4e5ccb1c589a2962235f13b65cc725050818d9","db4fdbf3d262768eabc027cd8321edca0cd11fa8"],"99eb4a732d1a908f4636ace52928876136bf1896":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"3d4e5ccb1c589a2962235f13b65cc725050818d9":["99eb4a732d1a908f4636ace52928876136bf1896","db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"cf8086c7e11dc41303ef1b8050bd355ddfaee76d":["c7492bcb52be51e55d596134b95b2e53cc4ffb91"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c7492bcb52be51e55d596134b95b2e53cc4ffb91","cf8086c7e11dc41303ef1b8050bd355ddfaee76d","db4fdbf3d262768eabc027cd8321edca0cd11fa8"],"db4fdbf3d262768eabc027cd8321edca0cd11fa8":[],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["db4fdbf3d262768eabc027cd8321edca0cd11fa8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}