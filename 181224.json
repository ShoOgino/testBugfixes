{"path":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexReader#deleteReaderWriterConflict(boolean).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexReader#deleteReaderWriterConflict(boolean).mjava","pathOld":"backwards/src/test/org/apache/lucene/index/TestIndexReader#deleteReaderWriterConflict(boolean).mjava","sourceNew":"    private void deleteReaderWriterConflict(boolean optimize) throws IOException\n    {\n        //Directory dir = new RAMDirectory();\n        Directory dir = getDirectory();\n\n        Term searchTerm = new Term(\"content\", \"aaa\");\n        Term searchTerm2 = new Term(\"content\", \"bbb\");\n\n        //  add 100 documents with term : aaa\n        IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        for (int i = 0; i < 100; i++)\n        {\n            addDoc(writer, searchTerm.text());\n        }\n        writer.close();\n\n        // OPEN READER AT THIS POINT - this should fix the view of the\n        // index at the point of having 100 \"aaa\" documents and 0 \"bbb\"\n        IndexReader reader = IndexReader.open(dir, false);\n        assertEquals(\"first docFreq\", 100, reader.docFreq(searchTerm));\n        assertEquals(\"first docFreq\", 0, reader.docFreq(searchTerm2));\n        assertTermDocsCount(\"first reader\", reader, searchTerm, 100);\n        assertTermDocsCount(\"first reader\", reader, searchTerm2, 0);\n\n        // add 100 documents with term : bbb\n        writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n        for (int i = 0; i < 100; i++)\n        {\n            addDoc(writer, searchTerm2.text());\n        }\n\n        // REQUEST OPTIMIZATION\n        // This causes a new segment to become current for all subsequent\n        // searchers. Because of this, deletions made via a previously open\n        // reader, which would be applied to that reader's segment, are lost\n        // for subsequent searchers/readers\n        if(optimize)\n          writer.optimize();\n        writer.close();\n\n        // The reader should not see the new data\n        assertEquals(\"first docFreq\", 100, reader.docFreq(searchTerm));\n        assertEquals(\"first docFreq\", 0, reader.docFreq(searchTerm2));\n        assertTermDocsCount(\"first reader\", reader, searchTerm, 100);\n        assertTermDocsCount(\"first reader\", reader, searchTerm2, 0);\n\n\n        // DELETE DOCUMENTS CONTAINING TERM: aaa\n        // NOTE: the reader was created when only \"aaa\" documents were in\n        int deleted = 0;\n        try {\n            deleted = reader.deleteDocuments(searchTerm);\n            fail(\"Delete allowed on an index reader with stale segment information\");\n        } catch (StaleReaderException e) {\n            /* success */\n        }\n\n        // Re-open index reader and try again. This time it should see\n        // the new data.\n        reader.close();\n        reader = IndexReader.open(dir, false);\n        assertEquals(\"first docFreq\", 100, reader.docFreq(searchTerm));\n        assertEquals(\"first docFreq\", 100, reader.docFreq(searchTerm2));\n        assertTermDocsCount(\"first reader\", reader, searchTerm, 100);\n        assertTermDocsCount(\"first reader\", reader, searchTerm2, 100);\n\n        deleted = reader.deleteDocuments(searchTerm);\n        assertEquals(\"deleted count\", 100, deleted);\n        assertEquals(\"deleted docFreq\", 100, reader.docFreq(searchTerm));\n        assertEquals(\"deleted docFreq\", 100, reader.docFreq(searchTerm2));\n        assertTermDocsCount(\"deleted termDocs\", reader, searchTerm, 0);\n        assertTermDocsCount(\"deleted termDocs\", reader, searchTerm2, 100);\n        reader.close();\n\n        // CREATE A NEW READER and re-test\n        reader = IndexReader.open(dir, false);\n        assertEquals(\"deleted docFreq\", 100, reader.docFreq(searchTerm));\n        assertEquals(\"deleted docFreq\", 100, reader.docFreq(searchTerm2));\n        assertTermDocsCount(\"deleted termDocs\", reader, searchTerm, 0);\n        assertTermDocsCount(\"deleted termDocs\", reader, searchTerm2, 100);\n        reader.close();\n    }\n\n","sourceOld":"    private void deleteReaderWriterConflict(boolean optimize) throws IOException\n    {\n        //Directory dir = new RAMDirectory();\n        Directory dir = getDirectory();\n\n        Term searchTerm = new Term(\"content\", \"aaa\");\n        Term searchTerm2 = new Term(\"content\", \"bbb\");\n\n        //  add 100 documents with term : aaa\n        IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        for (int i = 0; i < 100; i++)\n        {\n            addDoc(writer, searchTerm.text());\n        }\n        writer.close();\n\n        // OPEN READER AT THIS POINT - this should fix the view of the\n        // index at the point of having 100 \"aaa\" documents and 0 \"bbb\"\n        IndexReader reader = IndexReader.open(dir, false);\n        assertEquals(\"first docFreq\", 100, reader.docFreq(searchTerm));\n        assertEquals(\"first docFreq\", 0, reader.docFreq(searchTerm2));\n        assertTermDocsCount(\"first reader\", reader, searchTerm, 100);\n        assertTermDocsCount(\"first reader\", reader, searchTerm2, 0);\n\n        // add 100 documents with term : bbb\n        writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n        for (int i = 0; i < 100; i++)\n        {\n            addDoc(writer, searchTerm2.text());\n        }\n\n        // REQUEST OPTIMIZATION\n        // This causes a new segment to become current for all subsequent\n        // searchers. Because of this, deletions made via a previously open\n        // reader, which would be applied to that reader's segment, are lost\n        // for subsequent searchers/readers\n        if(optimize)\n          writer.optimize();\n        writer.close();\n\n        // The reader should not see the new data\n        assertEquals(\"first docFreq\", 100, reader.docFreq(searchTerm));\n        assertEquals(\"first docFreq\", 0, reader.docFreq(searchTerm2));\n        assertTermDocsCount(\"first reader\", reader, searchTerm, 100);\n        assertTermDocsCount(\"first reader\", reader, searchTerm2, 0);\n\n\n        // DELETE DOCUMENTS CONTAINING TERM: aaa\n        // NOTE: the reader was created when only \"aaa\" documents were in\n        int deleted = 0;\n        try {\n            deleted = reader.deleteDocuments(searchTerm);\n            fail(\"Delete allowed on an index reader with stale segment information\");\n        } catch (StaleReaderException e) {\n            /* success */\n        }\n\n        // Re-open index reader and try again. This time it should see\n        // the new data.\n        reader.close();\n        reader = IndexReader.open(dir, false);\n        assertEquals(\"first docFreq\", 100, reader.docFreq(searchTerm));\n        assertEquals(\"first docFreq\", 100, reader.docFreq(searchTerm2));\n        assertTermDocsCount(\"first reader\", reader, searchTerm, 100);\n        assertTermDocsCount(\"first reader\", reader, searchTerm2, 100);\n\n        deleted = reader.deleteDocuments(searchTerm);\n        assertEquals(\"deleted count\", 100, deleted);\n        assertEquals(\"deleted docFreq\", 100, reader.docFreq(searchTerm));\n        assertEquals(\"deleted docFreq\", 100, reader.docFreq(searchTerm2));\n        assertTermDocsCount(\"deleted termDocs\", reader, searchTerm, 0);\n        assertTermDocsCount(\"deleted termDocs\", reader, searchTerm2, 100);\n        reader.close();\n\n        // CREATE A NEW READER and re-test\n        reader = IndexReader.open(dir, false);\n        assertEquals(\"deleted docFreq\", 100, reader.docFreq(searchTerm));\n        assertEquals(\"deleted docFreq\", 100, reader.docFreq(searchTerm2));\n        assertTermDocsCount(\"deleted termDocs\", reader, searchTerm, 0);\n        assertTermDocsCount(\"deleted termDocs\", reader, searchTerm2, 100);\n        reader.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexReader#deleteReaderWriterConflict(boolean).mjava","sourceNew":null,"sourceOld":"    private void deleteReaderWriterConflict(boolean optimize) throws IOException\n    {\n        //Directory dir = new RAMDirectory();\n        Directory dir = getDirectory();\n\n        Term searchTerm = new Term(\"content\", \"aaa\");\n        Term searchTerm2 = new Term(\"content\", \"bbb\");\n\n        //  add 100 documents with term : aaa\n        IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        for (int i = 0; i < 100; i++)\n        {\n            addDoc(writer, searchTerm.text());\n        }\n        writer.close();\n\n        // OPEN READER AT THIS POINT - this should fix the view of the\n        // index at the point of having 100 \"aaa\" documents and 0 \"bbb\"\n        IndexReader reader = IndexReader.open(dir, false);\n        assertEquals(\"first docFreq\", 100, reader.docFreq(searchTerm));\n        assertEquals(\"first docFreq\", 0, reader.docFreq(searchTerm2));\n        assertTermDocsCount(\"first reader\", reader, searchTerm, 100);\n        assertTermDocsCount(\"first reader\", reader, searchTerm2, 0);\n\n        // add 100 documents with term : bbb\n        writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n        for (int i = 0; i < 100; i++)\n        {\n            addDoc(writer, searchTerm2.text());\n        }\n\n        // REQUEST OPTIMIZATION\n        // This causes a new segment to become current for all subsequent\n        // searchers. Because of this, deletions made via a previously open\n        // reader, which would be applied to that reader's segment, are lost\n        // for subsequent searchers/readers\n        if(optimize)\n          writer.optimize();\n        writer.close();\n\n        // The reader should not see the new data\n        assertEquals(\"first docFreq\", 100, reader.docFreq(searchTerm));\n        assertEquals(\"first docFreq\", 0, reader.docFreq(searchTerm2));\n        assertTermDocsCount(\"first reader\", reader, searchTerm, 100);\n        assertTermDocsCount(\"first reader\", reader, searchTerm2, 0);\n\n\n        // DELETE DOCUMENTS CONTAINING TERM: aaa\n        // NOTE: the reader was created when only \"aaa\" documents were in\n        int deleted = 0;\n        try {\n            deleted = reader.deleteDocuments(searchTerm);\n            fail(\"Delete allowed on an index reader with stale segment information\");\n        } catch (StaleReaderException e) {\n            /* success */\n        }\n\n        // Re-open index reader and try again. This time it should see\n        // the new data.\n        reader.close();\n        reader = IndexReader.open(dir, false);\n        assertEquals(\"first docFreq\", 100, reader.docFreq(searchTerm));\n        assertEquals(\"first docFreq\", 100, reader.docFreq(searchTerm2));\n        assertTermDocsCount(\"first reader\", reader, searchTerm, 100);\n        assertTermDocsCount(\"first reader\", reader, searchTerm2, 100);\n\n        deleted = reader.deleteDocuments(searchTerm);\n        assertEquals(\"deleted count\", 100, deleted);\n        assertEquals(\"deleted docFreq\", 100, reader.docFreq(searchTerm));\n        assertEquals(\"deleted docFreq\", 100, reader.docFreq(searchTerm2));\n        assertTermDocsCount(\"deleted termDocs\", reader, searchTerm, 0);\n        assertTermDocsCount(\"deleted termDocs\", reader, searchTerm2, 100);\n        reader.close();\n\n        // CREATE A NEW READER and re-test\n        reader = IndexReader.open(dir, false);\n        assertEquals(\"deleted docFreq\", 100, reader.docFreq(searchTerm));\n        assertEquals(\"deleted docFreq\", 100, reader.docFreq(searchTerm2));\n        assertTermDocsCount(\"deleted termDocs\", reader, searchTerm, 0);\n        assertTermDocsCount(\"deleted termDocs\", reader, searchTerm2, 100);\n        reader.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}