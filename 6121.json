{"path":"lucene/core/src/java/org/apache/lucene/index/CompositeReaderContext.Builder#build(CompositeReaderContext,IndexReader,int,int).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CompositeReaderContext.Builder#build(CompositeReaderContext,IndexReader,int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/CompositeReaderContext.Builder#build(CompositeReaderContext,IndexReader,int,int).mjava","sourceNew":"    private IndexReaderContext build(CompositeReaderContext parent, IndexReader reader, int ord, int docBase) {\n      if (reader instanceof AtomicReader) {\n        final AtomicReader ar = (AtomicReader) reader;\n        final AtomicReaderContext atomic = new AtomicReaderContext(parent, ar, ord, docBase, leafOrd, leafDocBase);\n        leaves[leafOrd++] = atomic;\n        leafDocBase += reader.maxDoc();\n        return atomic;\n      } else {\n        final CompositeReader cr = (CompositeReader) reader;\n        final IndexReader[] sequentialSubReaders = cr.getSequentialSubReaders();\n        final IndexReaderContext[] children = new IndexReaderContext[sequentialSubReaders.length];\n        final CompositeReaderContext newParent;\n        if (parent == null) {\n          newParent = new CompositeReaderContext(cr, children, leaves);\n        } else {\n          newParent = new CompositeReaderContext(parent, cr, ord, docBase, children);\n        }\n        int newDocBase = 0;\n        for (int i = 0; i < sequentialSubReaders.length; i++) {\n          children[i] = build(newParent, sequentialSubReaders[i], i, newDocBase);\n          newDocBase += sequentialSubReaders[i].maxDoc();\n        }\n        return newParent;\n      }\n    }\n\n","sourceOld":"    private IndexReaderContext build(CompositeReaderContext parent, IndexReader reader, int ord, int docBase) {\n      if (reader instanceof AtomicReader) {\n        final AtomicReader ar = (AtomicReader) reader;\n        final AtomicReaderContext atomic = new AtomicReaderContext(parent, ar, ord, docBase, leafOrd, leafDocBase);\n        leaves[leafOrd++] = atomic;\n        leafDocBase += reader.maxDoc();\n        return atomic;\n      } else {\n        final CompositeReader cr = (CompositeReader) reader;\n        final IndexReader[] sequentialSubReaders = cr.getSequentialSubReaders();\n        final IndexReaderContext[] children = new IndexReaderContext[sequentialSubReaders.length];\n        final CompositeReaderContext newParent;\n        if (parent == null) {\n          newParent = new CompositeReaderContext(cr, children, leaves);\n        } else {\n          newParent = new CompositeReaderContext(parent, cr, ord, docBase, children);\n        }\n        int newDocBase = 0;\n        for (int i = 0; i < sequentialSubReaders.length; i++) {\n          children[i] = build(newParent, sequentialSubReaders[i], i, newDocBase);\n          newDocBase += sequentialSubReaders[i].maxDoc();\n        }\n        return newParent;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"64e0262a0996adcb51ed5f435abc59085900345e","date":1339953748,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CompositeReaderContext.Builder#build(CompositeReaderContext,IndexReader,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CompositeReaderContext.Builder#build(CompositeReaderContext,IndexReader,int,int).mjava","sourceNew":"    private IndexReaderContext build(CompositeReaderContext parent, IndexReader reader, int ord, int docBase) {\n      if (reader instanceof AtomicReader) {\n        final AtomicReader ar = (AtomicReader) reader;\n        final AtomicReaderContext atomic = new AtomicReaderContext(parent, ar, ord, docBase, leafOrd, leafDocBase);\n        leaves[leafOrd++] = atomic;\n        leafDocBase += reader.maxDoc();\n        return atomic;\n      } else {\n        final CompositeReader cr = (CompositeReader) reader;\n        final IndexReader[] sequentialSubReaders = cr.getSequentialSubReaders();\n        final IndexReaderContext[] children = new IndexReaderContext[sequentialSubReaders.length];\n        final CompositeReaderContext newParent;\n        if (parent == null) {\n          newParent = new CompositeReaderContext(cr, children, leaves);\n        } else {\n          newParent = new CompositeReaderContext(parent, cr, ord, docBase, children);\n        }\n        int newDocBase = 0;\n        for (int i = 0; i < sequentialSubReaders.length; i++) {\n          children[i] = build(newParent, sequentialSubReaders[i], i, newDocBase);\n          newDocBase += sequentialSubReaders[i].maxDoc();\n        }\n        assert newDocBase == cr.maxDoc();\n        return newParent;\n      }\n    }\n\n","sourceOld":"    private IndexReaderContext build(CompositeReaderContext parent, IndexReader reader, int ord, int docBase) {\n      if (reader instanceof AtomicReader) {\n        final AtomicReader ar = (AtomicReader) reader;\n        final AtomicReaderContext atomic = new AtomicReaderContext(parent, ar, ord, docBase, leafOrd, leafDocBase);\n        leaves[leafOrd++] = atomic;\n        leafDocBase += reader.maxDoc();\n        return atomic;\n      } else {\n        final CompositeReader cr = (CompositeReader) reader;\n        final IndexReader[] sequentialSubReaders = cr.getSequentialSubReaders();\n        final IndexReaderContext[] children = new IndexReaderContext[sequentialSubReaders.length];\n        final CompositeReaderContext newParent;\n        if (parent == null) {\n          newParent = new CompositeReaderContext(cr, children, leaves);\n        } else {\n          newParent = new CompositeReaderContext(parent, cr, ord, docBase, children);\n        }\n        int newDocBase = 0;\n        for (int i = 0; i < sequentialSubReaders.length; i++) {\n          children[i] = build(newParent, sequentialSubReaders[i], i, newDocBase);\n          newDocBase += sequentialSubReaders[i].maxDoc();\n        }\n        return newParent;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c","date":1340090669,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CompositeReaderContext.Builder#build(CompositeReaderContext,IndexReader,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CompositeReaderContext.Builder#build(CompositeReaderContext,IndexReader,int,int).mjava","sourceNew":"    private IndexReaderContext build(CompositeReaderContext parent, IndexReader reader, int ord, int docBase) {\n      if (reader instanceof AtomicReader) {\n        final AtomicReader ar = (AtomicReader) reader;\n        final AtomicReaderContext atomic = new AtomicReaderContext(parent, ar, ord, docBase, leaves.size(), leafDocBase);\n        leaves.add(atomic);\n        leafDocBase += reader.maxDoc();\n        return atomic;\n      } else {\n        final CompositeReader cr = (CompositeReader) reader;\n        final List<? extends IndexReader> sequentialSubReaders = cr.getSequentialSubReaders();\n        final List<IndexReaderContext> children = Arrays.asList(new IndexReaderContext[sequentialSubReaders.size()]);\n        final CompositeReaderContext newParent;\n        if (parent == null) {\n          newParent = new CompositeReaderContext(cr, children, leaves);\n        } else {\n          newParent = new CompositeReaderContext(parent, cr, ord, docBase, children);\n        }\n        int newDocBase = 0;\n        for (int i = 0, c = sequentialSubReaders.size(); i < c; i++) {\n          final IndexReader r = sequentialSubReaders.get(i);\n          children.set(i, build(newParent, r, i, newDocBase));\n          newDocBase += r.maxDoc();\n        }\n        assert newDocBase == cr.maxDoc();\n        return newParent;\n      }\n    }\n\n","sourceOld":"    private IndexReaderContext build(CompositeReaderContext parent, IndexReader reader, int ord, int docBase) {\n      if (reader instanceof AtomicReader) {\n        final AtomicReader ar = (AtomicReader) reader;\n        final AtomicReaderContext atomic = new AtomicReaderContext(parent, ar, ord, docBase, leafOrd, leafDocBase);\n        leaves[leafOrd++] = atomic;\n        leafDocBase += reader.maxDoc();\n        return atomic;\n      } else {\n        final CompositeReader cr = (CompositeReader) reader;\n        final IndexReader[] sequentialSubReaders = cr.getSequentialSubReaders();\n        final IndexReaderContext[] children = new IndexReaderContext[sequentialSubReaders.length];\n        final CompositeReaderContext newParent;\n        if (parent == null) {\n          newParent = new CompositeReaderContext(cr, children, leaves);\n        } else {\n          newParent = new CompositeReaderContext(parent, cr, ord, docBase, children);\n        }\n        int newDocBase = 0;\n        for (int i = 0; i < sequentialSubReaders.length; i++) {\n          children[i] = build(newParent, sequentialSubReaders[i], i, newDocBase);\n          newDocBase += sequentialSubReaders[i].maxDoc();\n        }\n        assert newDocBase == cr.maxDoc();\n        return newParent;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CompositeReaderContext.Builder#build(CompositeReaderContext,IndexReader,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CompositeReaderContext.Builder#build(CompositeReaderContext,IndexReader,int,int).mjava","sourceNew":"    private IndexReaderContext build(CompositeReaderContext parent, IndexReader reader, int ord, int docBase) {\n      if (reader instanceof LeafReader) {\n        final LeafReader ar = (LeafReader) reader;\n        final LeafReaderContext atomic = new LeafReaderContext(parent, ar, ord, docBase, leaves.size(), leafDocBase);\n        leaves.add(atomic);\n        leafDocBase += reader.maxDoc();\n        return atomic;\n      } else {\n        final CompositeReader cr = (CompositeReader) reader;\n        final List<? extends IndexReader> sequentialSubReaders = cr.getSequentialSubReaders();\n        final List<IndexReaderContext> children = Arrays.asList(new IndexReaderContext[sequentialSubReaders.size()]);\n        final CompositeReaderContext newParent;\n        if (parent == null) {\n          newParent = new CompositeReaderContext(cr, children, leaves);\n        } else {\n          newParent = new CompositeReaderContext(parent, cr, ord, docBase, children);\n        }\n        int newDocBase = 0;\n        for (int i = 0, c = sequentialSubReaders.size(); i < c; i++) {\n          final IndexReader r = sequentialSubReaders.get(i);\n          children.set(i, build(newParent, r, i, newDocBase));\n          newDocBase += r.maxDoc();\n        }\n        assert newDocBase == cr.maxDoc();\n        return newParent;\n      }\n    }\n\n","sourceOld":"    private IndexReaderContext build(CompositeReaderContext parent, IndexReader reader, int ord, int docBase) {\n      if (reader instanceof AtomicReader) {\n        final AtomicReader ar = (AtomicReader) reader;\n        final AtomicReaderContext atomic = new AtomicReaderContext(parent, ar, ord, docBase, leaves.size(), leafDocBase);\n        leaves.add(atomic);\n        leafDocBase += reader.maxDoc();\n        return atomic;\n      } else {\n        final CompositeReader cr = (CompositeReader) reader;\n        final List<? extends IndexReader> sequentialSubReaders = cr.getSequentialSubReaders();\n        final List<IndexReaderContext> children = Arrays.asList(new IndexReaderContext[sequentialSubReaders.size()]);\n        final CompositeReaderContext newParent;\n        if (parent == null) {\n          newParent = new CompositeReaderContext(cr, children, leaves);\n        } else {\n          newParent = new CompositeReaderContext(parent, cr, ord, docBase, children);\n        }\n        int newDocBase = 0;\n        for (int i = 0, c = sequentialSubReaders.size(); i < c; i++) {\n          final IndexReader r = sequentialSubReaders.get(i);\n          children.set(i, build(newParent, r, i, newDocBase));\n          newDocBase += r.maxDoc();\n        }\n        assert newDocBase == cr.maxDoc();\n        return newParent;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c":["64e0262a0996adcb51ed5f435abc59085900345e"],"64e0262a0996adcb51ed5f435abc59085900345e":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c9fb5f46e264daf5ba3860defe623a89d202dd87"]},"commit2Childs":{"4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"64e0262a0996adcb51ed5f435abc59085900345e":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["64e0262a0996adcb51ed5f435abc59085900345e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}