{"path":"solr/core/src/test/org/apache/solr/handler/JsonLoaderTest#testJsonDocFormat().mjava","commits":[{"id":"2336740b200d02b6a5fb18b70454dd9aa26f5b47","date":1407004842,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/JsonLoaderTest#testJsonDocFormat().mjava","pathOld":"/dev/null","sourceNew":"  public void testJsonDocFormat() throws Exception{\n    String doc = \"\\n\" +\n        \"\\n\" +\n        \"{\\\"bool\\\": true,\\n\" +\n        \" \\\"f0\\\": \\\"v0\\\",\\n\" +\n        \" \\\"f2\\\": {\\n\" +\n        \"    \\t  \\\"boost\\\": 2.3,\\n\" +\n        \"    \\t  \\\"value\\\": \\\"test\\\"\\n\" +\n        \"    \\t   },\\n\" +\n        \"\\\"array\\\": [ \\\"aaa\\\", \\\"bbb\\\" ],\\n\" +\n        \"\\\"boosted\\\": {\\n\" +\n        \"    \\t      \\\"boost\\\": 6.7,\\n\" +\n        \"    \\t      \\\"value\\\": [ \\\"aaa\\\", \\\"bbb\\\" ]\\n\" +\n        \"    \\t    }\\n\" +\n        \" }\\n\" +\n        \"\\n\" +\n        \"\\n\" +\n        \" {\\\"f1\\\": \\\"v1\\\",\\n\" +\n        \"  \\\"f1\\\": \\\"v2\\\",\\n\" +\n        \"   \\\"f2\\\": null\\n\" +\n        \"  }\\n\";\n    SolrQueryRequest req = req(\"json.command\",\"false\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    BufferingRequestProcessor p = new BufferingRequestProcessor(null);\n    JsonLoader loader = new JsonLoader();\n    loader.load(req, rsp, new ContentStreamBase.StringStream(doc), p);\n\n\n    assertEquals( 2, p.addCommands.size() );\n\n\n    doc = \"[{'id':'1'},{'id':'2'}]\".replace('\\'', '\"');\n    req = req(\"json.command\",\"false\");\n    rsp = new SolrQueryResponse();\n    p = new BufferingRequestProcessor(null);\n    loader = new JsonLoader();\n    loader.load(req, rsp, new ContentStreamBase.StringStream(doc), p);\n    assertEquals( 2, p.addCommands.size() );\n\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e784c17397f1969ef38227c111d76d156ed43fbd","date":1409641491,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/JsonLoaderTest#testJsonDocFormat().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/JsonLoaderTest#testJsonDocFormat().mjava","sourceNew":"  public void testJsonDocFormat() throws Exception{\n    String doc = \"\\n\" +\n        \"\\n\" +\n        \"{\\\"bool\\\": true,\\n\" +\n        \" \\\"f0\\\": \\\"v0\\\",\\n\" +\n        \" \\\"f2\\\": {\\n\" +\n        \"    \\t  \\\"boost\\\": 2.3,\\n\" +\n        \"    \\t  \\\"value\\\": \\\"test\\\"\\n\" +\n        \"    \\t   },\\n\" +\n        \"\\\"array\\\": [ \\\"aaa\\\", \\\"bbb\\\" ],\\n\" +\n        \"\\\"boosted\\\": {\\n\" +\n        \"    \\t      \\\"boost\\\": 6.7,\\n\" +\n        \"    \\t      \\\"value\\\": [ \\\"aaa\\\", \\\"bbb\\\" ]\\n\" +\n        \"    \\t    }\\n\" +\n        \" }\\n\" +\n        \"\\n\" +\n        \"\\n\" +\n        \" {\\\"f1\\\": \\\"v1\\\",\\n\" +\n        \"  \\\"f1\\\": \\\"v2\\\",\\n\" +\n        \"   \\\"f2\\\": null\\n\" +\n        \"  }\\n\";\n    SolrQueryRequest req = req(\"json.command\",\"false\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    BufferingRequestProcessor p = new BufferingRequestProcessor(null);\n    JsonLoader loader = new JsonLoader();\n    loader.load(req, rsp, new ContentStreamBase.StringStream(doc), p);\n    assertEquals( 2, p.addCommands.size() );\n     doc = \"\\n\" +\n        \"\\n\" +\n        \"{bool: true,\\n\" +\n        \" f0: \\\"v0\\\",\\n\" +\n        \" f2: {\\n\" +\n        \"    \\t  \\\"boost\\\": 2.3,\\n\" +\n        \"    \\t  \\\"value\\\": \\\"test\\\"\\n\" +\n        \"    \\t   },\\n\" +\n        \"array: [ \\\"aaa\\\", \\\"bbb\\\" ],\\n\" +\n        \"boosted: {\\n\" +\n        \"    \\t      \\\"boost\\\": 6.7,\\n\" +\n        \"    \\t      \\\"value\\\": [ \\\"aaa\\\", \\\"bbb\\\" ]\\n\" +\n        \"    \\t    }\\n\" +\n        \" }\\n\" +\n        \"\\n\" +\n        \"\\n\" +\n        \" {f1: \\\"v1\\\",\\n\" +\n        \"  f1: \\\"v2\\\",\\n\" +\n        \"   f2: null\\n\" +\n        \"  }\\n\";\n    req = req(\"json.command\",\"false\");\n    rsp = new SolrQueryResponse();\n    p = new BufferingRequestProcessor(null);\n    loader = new JsonLoader();\n    loader.load(req, rsp, new ContentStreamBase.StringStream(doc), p);\n\n    assertEquals( 2, p.addCommands.size() );\n\n\n    doc = \"[{'id':'1'},{'id':'2'}]\".replace('\\'', '\"');\n    req = req(\"json.command\",\"false\");\n    rsp = new SolrQueryResponse();\n    p = new BufferingRequestProcessor(null);\n    loader = new JsonLoader();\n    loader.load(req, rsp, new ContentStreamBase.StringStream(doc), p);\n    assertEquals( 2, p.addCommands.size() );\n\n\n  }\n\n","sourceOld":"  public void testJsonDocFormat() throws Exception{\n    String doc = \"\\n\" +\n        \"\\n\" +\n        \"{\\\"bool\\\": true,\\n\" +\n        \" \\\"f0\\\": \\\"v0\\\",\\n\" +\n        \" \\\"f2\\\": {\\n\" +\n        \"    \\t  \\\"boost\\\": 2.3,\\n\" +\n        \"    \\t  \\\"value\\\": \\\"test\\\"\\n\" +\n        \"    \\t   },\\n\" +\n        \"\\\"array\\\": [ \\\"aaa\\\", \\\"bbb\\\" ],\\n\" +\n        \"\\\"boosted\\\": {\\n\" +\n        \"    \\t      \\\"boost\\\": 6.7,\\n\" +\n        \"    \\t      \\\"value\\\": [ \\\"aaa\\\", \\\"bbb\\\" ]\\n\" +\n        \"    \\t    }\\n\" +\n        \" }\\n\" +\n        \"\\n\" +\n        \"\\n\" +\n        \" {\\\"f1\\\": \\\"v1\\\",\\n\" +\n        \"  \\\"f1\\\": \\\"v2\\\",\\n\" +\n        \"   \\\"f2\\\": null\\n\" +\n        \"  }\\n\";\n    SolrQueryRequest req = req(\"json.command\",\"false\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    BufferingRequestProcessor p = new BufferingRequestProcessor(null);\n    JsonLoader loader = new JsonLoader();\n    loader.load(req, rsp, new ContentStreamBase.StringStream(doc), p);\n\n\n    assertEquals( 2, p.addCommands.size() );\n\n\n    doc = \"[{'id':'1'},{'id':'2'}]\".replace('\\'', '\"');\n    req = req(\"json.command\",\"false\");\n    rsp = new SolrQueryResponse();\n    p = new BufferingRequestProcessor(null);\n    loader = new JsonLoader();\n    loader.load(req, rsp, new ContentStreamBase.StringStream(doc), p);\n    assertEquals( 2, p.addCommands.size() );\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf37ee1c40027de1b0be9d687aebe8f34d274ae3","date":1409655762,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/JsonLoaderTest#testJsonDocFormat().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/JsonLoaderTest#testJsonDocFormat().mjava","sourceNew":"  public void testJsonDocFormat() throws Exception{\n    String doc = \"\\n\" +\n        \"\\n\" +\n        \"{\\\"bool\\\": true,\\n\" +\n        \" \\\"f0\\\": \\\"v0\\\",\\n\" +\n        \" \\\"f2\\\": {\\n\" +\n        \"    \\t  \\\"boost\\\": 2.3,\\n\" +\n        \"    \\t  \\\"value\\\": \\\"test\\\"\\n\" +\n        \"    \\t   },\\n\" +\n        \"\\\"array\\\": [ \\\"aaa\\\", \\\"bbb\\\" ],\\n\" +\n        \"\\\"boosted\\\": {\\n\" +\n        \"    \\t      \\\"boost\\\": 6.7,\\n\" +\n        \"    \\t      \\\"value\\\": [ \\\"aaa\\\", \\\"bbb\\\" ]\\n\" +\n        \"    \\t    }\\n\" +\n        \" }\\n\" +\n        \"\\n\" +\n        \"\\n\" +\n        \" {\\\"f1\\\": \\\"v1\\\",\\n\" +\n        \"  \\\"f1\\\": \\\"v2\\\",\\n\" +\n        \"   \\\"f2\\\": null\\n\" +\n        \"  }\\n\";\n    SolrQueryRequest req = req(\"json.command\",\"false\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    BufferingRequestProcessor p = new BufferingRequestProcessor(null);\n    JsonLoader loader = new JsonLoader();\n    loader.load(req, rsp, new ContentStreamBase.StringStream(doc), p);\n    assertEquals( 2, p.addCommands.size() );\n     doc = \"\\n\" +\n        \"\\n\" +\n        \"{bool: true,\\n\" +\n        \" f0: \\\"v0\\\",\\n\" +\n        \" f2: {\\n\" +\n        \"    \\t  \\\"boost\\\": 2.3,\\n\" +\n        \"    \\t  \\\"value\\\": \\\"test\\\"\\n\" +\n        \"    \\t   },\\n\" +\n        \"array: [ \\\"aaa\\\", \\\"bbb\\\" ],\\n\" +\n        \"boosted: {\\n\" +\n        \"    \\t      \\\"boost\\\": 6.7,\\n\" +\n        \"    \\t      \\\"value\\\": [ \\\"aaa\\\", \\\"bbb\\\" ]\\n\" +\n        \"    \\t    }\\n\" +\n        \" }\\n\" +\n        \"\\n\" +\n        \"\\n\" +\n        \" {f1: \\\"v1\\\",\\n\" +\n        \"  f1: \\\"v2\\\",\\n\" +\n        \"   f2: null\\n\" +\n        \"  }\\n\";\n    req = req(\"json.command\",\"false\");\n    rsp = new SolrQueryResponse();\n    p = new BufferingRequestProcessor(null);\n    loader = new JsonLoader();\n    loader.load(req, rsp, new ContentStreamBase.StringStream(doc), p);\n\n    assertEquals( 2, p.addCommands.size() );\n\n\n    doc = \"[{'id':'1'},{'id':'2'}]\".replace('\\'', '\"');\n    req = req(\"json.command\",\"false\");\n    rsp = new SolrQueryResponse();\n    p = new BufferingRequestProcessor(null);\n    loader = new JsonLoader();\n    loader.load(req, rsp, new ContentStreamBase.StringStream(doc), p);\n    assertEquals( 2, p.addCommands.size() );\n\n\n  }\n\n","sourceOld":"  public void testJsonDocFormat() throws Exception{\n    String doc = \"\\n\" +\n        \"\\n\" +\n        \"{\\\"bool\\\": true,\\n\" +\n        \" \\\"f0\\\": \\\"v0\\\",\\n\" +\n        \" \\\"f2\\\": {\\n\" +\n        \"    \\t  \\\"boost\\\": 2.3,\\n\" +\n        \"    \\t  \\\"value\\\": \\\"test\\\"\\n\" +\n        \"    \\t   },\\n\" +\n        \"\\\"array\\\": [ \\\"aaa\\\", \\\"bbb\\\" ],\\n\" +\n        \"\\\"boosted\\\": {\\n\" +\n        \"    \\t      \\\"boost\\\": 6.7,\\n\" +\n        \"    \\t      \\\"value\\\": [ \\\"aaa\\\", \\\"bbb\\\" ]\\n\" +\n        \"    \\t    }\\n\" +\n        \" }\\n\" +\n        \"\\n\" +\n        \"\\n\" +\n        \" {\\\"f1\\\": \\\"v1\\\",\\n\" +\n        \"  \\\"f1\\\": \\\"v2\\\",\\n\" +\n        \"   \\\"f2\\\": null\\n\" +\n        \"  }\\n\";\n    SolrQueryRequest req = req(\"json.command\",\"false\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    BufferingRequestProcessor p = new BufferingRequestProcessor(null);\n    JsonLoader loader = new JsonLoader();\n    loader.load(req, rsp, new ContentStreamBase.StringStream(doc), p);\n\n\n    assertEquals( 2, p.addCommands.size() );\n\n\n    doc = \"[{'id':'1'},{'id':'2'}]\".replace('\\'', '\"');\n    req = req(\"json.command\",\"false\");\n    rsp = new SolrQueryResponse();\n    p = new BufferingRequestProcessor(null);\n    loader = new JsonLoader();\n    loader.load(req, rsp, new ContentStreamBase.StringStream(doc), p);\n    assertEquals( 2, p.addCommands.size() );\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab10d7c14ce9f8db61956611a57a5a377362a633","date":1413903184,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/JsonLoaderTest#testJsonDocFormat().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/JsonLoaderTest#testJsonDocFormat().mjava","sourceNew":"  public void testJsonDocFormat() throws Exception{\n    String doc = \"\\n\" +\n        \"\\n\" +\n        \"{\\\"bool\\\": true,\\n\" +\n        \" \\\"f0\\\": \\\"v0\\\",\\n\" +\n        \" \\\"f2\\\": {\\n\" +\n        \"    \\t  \\\"boost\\\": 2.3,\\n\" +\n        \"    \\t  \\\"value\\\": \\\"test\\\"\\n\" +\n        \"    \\t   },\\n\" +\n        \"\\\"array\\\": [ \\\"aaa\\\", \\\"bbb\\\" ],\\n\" +\n        \"\\\"boosted\\\": {\\n\" +\n        \"    \\t      \\\"boost\\\": 6.7,\\n\" +\n        \"    \\t      \\\"value\\\": [ \\\"aaa\\\", \\\"bbb\\\" ]\\n\" +\n        \"    \\t    }\\n\" +\n        \" }\\n\" +\n        \"\\n\" +\n        \"\\n\" +\n        \" {\\\"f1\\\": \\\"v1\\\",\\n\" +\n        \"  \\\"f1\\\": \\\"v2\\\",\\n\" +\n        \"   \\\"f2\\\": null\\n\" +\n        \"  }\\n\";\n    SolrQueryRequest req = req(\"srcField\",\"_src\");\n    req.getContext().put(\"path\",\"/update/json/docs\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    BufferingRequestProcessor p = new BufferingRequestProcessor(null);\n    JsonLoader loader = new JsonLoader();\n    loader.load(req, rsp, new ContentStreamBase.StringStream(doc), p);\n    assertEquals( 2, p.addCommands.size() );\n     doc = \"\\n\" +\n        \"\\n\" +\n        \"{\\\"bool\\\": true,\\n\" +\n        \" \\\"f0\\\": \\\"v0\\\",\\n\" +\n        \" \\\"f2\\\": {\\n\" +\n        \"    \\t  \\\"boost\\\": 2.3,\\n\" +\n        \"    \\t  \\\"value\\\": \\\"test\\\"\\n\" +\n        \"    \\t   },\\n\" +\n        \"\\\"array\\\": [ \\\"aaa\\\", \\\"bbb\\\" ],\\n\" +\n        \"\\\"boosted\\\": {\\n\" +\n        \"    \\t      \\\"boost\\\": 6.7,\\n\" +\n        \"    \\t      \\\"value\\\": [ \\\"aaa\\\", \\\"bbb\\\" ]\\n\" +\n        \"    \\t    }\\n\" +\n        \" }\\n\" +\n        \"\\n\" +\n        \"\\n\" +\n        \" {\\\"f1\\\": \\\"v1\\\",\\n\" +\n        \"  \\\"f2\\\": \\\"v2\\\",\\n\" +\n        \"   \\\"f3\\\": null\\n\" +\n        \"  }\\n\";\n    req = req(\"srcField\",\"_src\");\n    req.getContext().put(\"path\",\"/update/json/docs\");\n    rsp = new SolrQueryResponse();\n    p = new BufferingRequestProcessor(null);\n    loader = new JsonLoader();\n    loader.load(req, rsp, new ContentStreamBase.StringStream(doc), p);\n\n    assertEquals( 2, p.addCommands.size() );\n\n    String content = (String) p.addCommands.get(0).solrDoc.getFieldValue(\"_src\");\n    assertNotNull(content);\n    Map obj = (Map) ObjectBuilder.fromJSON(content);\n    assertEquals(Boolean.TRUE, obj.get(\"bool\"));\n    assertEquals(\"v0\", obj.get(\"f0\"));\n    assertNotNull(obj.get(\"f0\"));\n    assertNotNull(obj.get(\"array\"));\n    assertNotNull(obj.get(\"boosted\"));\n\n    content = (String) p.addCommands.get(1).solrDoc.getFieldValue(\"_src\");\n    assertNotNull(content);\n    obj = (Map) ObjectBuilder.fromJSON(content);\n    assertEquals(\"v1\", obj.get(\"f1\"));\n    assertEquals(\"v2\", obj.get(\"f2\"));\n    assertTrue(obj.containsKey(\"f3\"));\n\n    doc = \"[{'id':'1'},{'id':'2'}]\".replace('\\'', '\"');\n    req = req(\"srcField\",\"_src\");\n    req.getContext().put(\"path\",\"/update/json/docs\");\n    rsp = new SolrQueryResponse();\n    p = new BufferingRequestProcessor(null);\n    loader = new JsonLoader();\n    loader.load(req, rsp, new ContentStreamBase.StringStream(doc), p);\n    assertEquals( 2, p.addCommands.size() );\n\n    content = (String) p.addCommands.get(0).solrDoc.getFieldValue(\"_src\");\n    assertNotNull(content);\n    obj = (Map) ObjectBuilder.fromJSON(content);\n    assertEquals(\"1\", obj.get(\"id\"));\n    content = (String) p.addCommands.get(1).solrDoc.getFieldValue(\"_src\");\n    assertNotNull(content);\n    obj = (Map) ObjectBuilder.fromJSON(content);\n    assertEquals(\"2\", obj.get(\"id\"));\n\n\n  }\n\n","sourceOld":"  public void testJsonDocFormat() throws Exception{\n    String doc = \"\\n\" +\n        \"\\n\" +\n        \"{\\\"bool\\\": true,\\n\" +\n        \" \\\"f0\\\": \\\"v0\\\",\\n\" +\n        \" \\\"f2\\\": {\\n\" +\n        \"    \\t  \\\"boost\\\": 2.3,\\n\" +\n        \"    \\t  \\\"value\\\": \\\"test\\\"\\n\" +\n        \"    \\t   },\\n\" +\n        \"\\\"array\\\": [ \\\"aaa\\\", \\\"bbb\\\" ],\\n\" +\n        \"\\\"boosted\\\": {\\n\" +\n        \"    \\t      \\\"boost\\\": 6.7,\\n\" +\n        \"    \\t      \\\"value\\\": [ \\\"aaa\\\", \\\"bbb\\\" ]\\n\" +\n        \"    \\t    }\\n\" +\n        \" }\\n\" +\n        \"\\n\" +\n        \"\\n\" +\n        \" {\\\"f1\\\": \\\"v1\\\",\\n\" +\n        \"  \\\"f1\\\": \\\"v2\\\",\\n\" +\n        \"   \\\"f2\\\": null\\n\" +\n        \"  }\\n\";\n    SolrQueryRequest req = req(\"json.command\",\"false\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    BufferingRequestProcessor p = new BufferingRequestProcessor(null);\n    JsonLoader loader = new JsonLoader();\n    loader.load(req, rsp, new ContentStreamBase.StringStream(doc), p);\n    assertEquals( 2, p.addCommands.size() );\n     doc = \"\\n\" +\n        \"\\n\" +\n        \"{bool: true,\\n\" +\n        \" f0: \\\"v0\\\",\\n\" +\n        \" f2: {\\n\" +\n        \"    \\t  \\\"boost\\\": 2.3,\\n\" +\n        \"    \\t  \\\"value\\\": \\\"test\\\"\\n\" +\n        \"    \\t   },\\n\" +\n        \"array: [ \\\"aaa\\\", \\\"bbb\\\" ],\\n\" +\n        \"boosted: {\\n\" +\n        \"    \\t      \\\"boost\\\": 6.7,\\n\" +\n        \"    \\t      \\\"value\\\": [ \\\"aaa\\\", \\\"bbb\\\" ]\\n\" +\n        \"    \\t    }\\n\" +\n        \" }\\n\" +\n        \"\\n\" +\n        \"\\n\" +\n        \" {f1: \\\"v1\\\",\\n\" +\n        \"  f1: \\\"v2\\\",\\n\" +\n        \"   f2: null\\n\" +\n        \"  }\\n\";\n    req = req(\"json.command\",\"false\");\n    rsp = new SolrQueryResponse();\n    p = new BufferingRequestProcessor(null);\n    loader = new JsonLoader();\n    loader.load(req, rsp, new ContentStreamBase.StringStream(doc), p);\n\n    assertEquals( 2, p.addCommands.size() );\n\n\n    doc = \"[{'id':'1'},{'id':'2'}]\".replace('\\'', '\"');\n    req = req(\"json.command\",\"false\");\n    rsp = new SolrQueryResponse();\n    p = new BufferingRequestProcessor(null);\n    loader = new JsonLoader();\n    loader.load(req, rsp, new ContentStreamBase.StringStream(doc), p);\n    assertEquals( 2, p.addCommands.size() );\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a22eafe3f72a4c2945eaad9547e6c78816978f4","date":1413956657,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/JsonLoaderTest#testJsonDocFormat().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/JsonLoaderTest#testJsonDocFormat().mjava","sourceNew":"  public void testJsonDocFormat() throws Exception{\n    String doc = \"\\n\" +\n        \"\\n\" +\n        \"{\\\"bool\\\": true,\\n\" +\n        \" \\\"f0\\\": \\\"v0\\\",\\n\" +\n        \" \\\"f2\\\": {\\n\" +\n        \"    \\t  \\\"boost\\\": 2.3,\\n\" +\n        \"    \\t  \\\"value\\\": \\\"test\\\"\\n\" +\n        \"    \\t   },\\n\" +\n        \"\\\"array\\\": [ \\\"aaa\\\", \\\"bbb\\\" ],\\n\" +\n        \"\\\"boosted\\\": {\\n\" +\n        \"    \\t      \\\"boost\\\": 6.7,\\n\" +\n        \"    \\t      \\\"value\\\": [ \\\"aaa\\\", \\\"bbb\\\" ]\\n\" +\n        \"    \\t    }\\n\" +\n        \" }\\n\" +\n        \"\\n\" +\n        \"\\n\" +\n        \" {\\\"f1\\\": \\\"v1\\\",\\n\" +\n        \"  \\\"f1\\\": \\\"v2\\\",\\n\" +\n        \"   \\\"f2\\\": null\\n\" +\n        \"  }\\n\";\n    SolrQueryRequest req = req(\"srcField\",\"_src\");\n    req.getContext().put(\"path\",\"/update/json/docs\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    BufferingRequestProcessor p = new BufferingRequestProcessor(null);\n    JsonLoader loader = new JsonLoader();\n    loader.load(req, rsp, new ContentStreamBase.StringStream(doc), p);\n    assertEquals( 2, p.addCommands.size() );\n     doc = \"\\n\" +\n        \"\\n\" +\n        \"{\\\"bool\\\": true,\\n\" +\n        \" \\\"f0\\\": \\\"v0\\\",\\n\" +\n        \" \\\"f2\\\": {\\n\" +\n        \"    \\t  \\\"boost\\\": 2.3,\\n\" +\n        \"    \\t  \\\"value\\\": \\\"test\\\"\\n\" +\n        \"    \\t   },\\n\" +\n        \"\\\"array\\\": [ \\\"aaa\\\", \\\"bbb\\\" ],\\n\" +\n        \"\\\"boosted\\\": {\\n\" +\n        \"    \\t      \\\"boost\\\": 6.7,\\n\" +\n        \"    \\t      \\\"value\\\": [ \\\"aaa\\\", \\\"bbb\\\" ]\\n\" +\n        \"    \\t    }\\n\" +\n        \" }\\n\" +\n        \"\\n\" +\n        \"\\n\" +\n        \" {\\\"f1\\\": \\\"v1\\\",\\n\" +\n        \"  \\\"f2\\\": \\\"v2\\\",\\n\" +\n        \"   \\\"f3\\\": null\\n\" +\n        \"  }\\n\";\n    req = req(\"srcField\",\"_src\");\n    req.getContext().put(\"path\",\"/update/json/docs\");\n    rsp = new SolrQueryResponse();\n    p = new BufferingRequestProcessor(null);\n    loader = new JsonLoader();\n    loader.load(req, rsp, new ContentStreamBase.StringStream(doc), p);\n\n    assertEquals( 2, p.addCommands.size() );\n\n    String content = (String) p.addCommands.get(0).solrDoc.getFieldValue(\"_src\");\n    assertNotNull(content);\n    Map obj = (Map) ObjectBuilder.fromJSON(content);\n    assertEquals(Boolean.TRUE, obj.get(\"bool\"));\n    assertEquals(\"v0\", obj.get(\"f0\"));\n    assertNotNull(obj.get(\"f0\"));\n    assertNotNull(obj.get(\"array\"));\n    assertNotNull(obj.get(\"boosted\"));\n\n    content = (String) p.addCommands.get(1).solrDoc.getFieldValue(\"_src\");\n    assertNotNull(content);\n    obj = (Map) ObjectBuilder.fromJSON(content);\n    assertEquals(\"v1\", obj.get(\"f1\"));\n    assertEquals(\"v2\", obj.get(\"f2\"));\n    assertTrue(obj.containsKey(\"f3\"));\n\n    doc = \"[{'id':'1'},{'id':'2'}]\".replace('\\'', '\"');\n    req = req(\"srcField\",\"_src\");\n    req.getContext().put(\"path\",\"/update/json/docs\");\n    rsp = new SolrQueryResponse();\n    p = new BufferingRequestProcessor(null);\n    loader = new JsonLoader();\n    loader.load(req, rsp, new ContentStreamBase.StringStream(doc), p);\n    assertEquals( 2, p.addCommands.size() );\n\n    content = (String) p.addCommands.get(0).solrDoc.getFieldValue(\"_src\");\n    assertNotNull(content);\n    obj = (Map) ObjectBuilder.fromJSON(content);\n    assertEquals(\"1\", obj.get(\"id\"));\n    content = (String) p.addCommands.get(1).solrDoc.getFieldValue(\"_src\");\n    assertNotNull(content);\n    obj = (Map) ObjectBuilder.fromJSON(content);\n    assertEquals(\"2\", obj.get(\"id\"));\n\n\n  }\n\n","sourceOld":"  public void testJsonDocFormat() throws Exception{\n    String doc = \"\\n\" +\n        \"\\n\" +\n        \"{\\\"bool\\\": true,\\n\" +\n        \" \\\"f0\\\": \\\"v0\\\",\\n\" +\n        \" \\\"f2\\\": {\\n\" +\n        \"    \\t  \\\"boost\\\": 2.3,\\n\" +\n        \"    \\t  \\\"value\\\": \\\"test\\\"\\n\" +\n        \"    \\t   },\\n\" +\n        \"\\\"array\\\": [ \\\"aaa\\\", \\\"bbb\\\" ],\\n\" +\n        \"\\\"boosted\\\": {\\n\" +\n        \"    \\t      \\\"boost\\\": 6.7,\\n\" +\n        \"    \\t      \\\"value\\\": [ \\\"aaa\\\", \\\"bbb\\\" ]\\n\" +\n        \"    \\t    }\\n\" +\n        \" }\\n\" +\n        \"\\n\" +\n        \"\\n\" +\n        \" {\\\"f1\\\": \\\"v1\\\",\\n\" +\n        \"  \\\"f1\\\": \\\"v2\\\",\\n\" +\n        \"   \\\"f2\\\": null\\n\" +\n        \"  }\\n\";\n    SolrQueryRequest req = req(\"json.command\",\"false\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    BufferingRequestProcessor p = new BufferingRequestProcessor(null);\n    JsonLoader loader = new JsonLoader();\n    loader.load(req, rsp, new ContentStreamBase.StringStream(doc), p);\n    assertEquals( 2, p.addCommands.size() );\n     doc = \"\\n\" +\n        \"\\n\" +\n        \"{bool: true,\\n\" +\n        \" f0: \\\"v0\\\",\\n\" +\n        \" f2: {\\n\" +\n        \"    \\t  \\\"boost\\\": 2.3,\\n\" +\n        \"    \\t  \\\"value\\\": \\\"test\\\"\\n\" +\n        \"    \\t   },\\n\" +\n        \"array: [ \\\"aaa\\\", \\\"bbb\\\" ],\\n\" +\n        \"boosted: {\\n\" +\n        \"    \\t      \\\"boost\\\": 6.7,\\n\" +\n        \"    \\t      \\\"value\\\": [ \\\"aaa\\\", \\\"bbb\\\" ]\\n\" +\n        \"    \\t    }\\n\" +\n        \" }\\n\" +\n        \"\\n\" +\n        \"\\n\" +\n        \" {f1: \\\"v1\\\",\\n\" +\n        \"  f1: \\\"v2\\\",\\n\" +\n        \"   f2: null\\n\" +\n        \"  }\\n\";\n    req = req(\"json.command\",\"false\");\n    rsp = new SolrQueryResponse();\n    p = new BufferingRequestProcessor(null);\n    loader = new JsonLoader();\n    loader.load(req, rsp, new ContentStreamBase.StringStream(doc), p);\n\n    assertEquals( 2, p.addCommands.size() );\n\n\n    doc = \"[{'id':'1'},{'id':'2'}]\".replace('\\'', '\"');\n    req = req(\"json.command\",\"false\");\n    rsp = new SolrQueryResponse();\n    p = new BufferingRequestProcessor(null);\n    loader = new JsonLoader();\n    loader.load(req, rsp, new ContentStreamBase.StringStream(doc), p);\n    assertEquals( 2, p.addCommands.size() );\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"192b186234a9fb0a5aef6db66eeb49ccab1d867c","date":1418141638,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/JsonLoaderTest#testJsonDocFormat().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/JsonLoaderTest#testJsonDocFormat().mjava","sourceNew":"  public void testJsonDocFormat() throws Exception{\n    String doc = \"\\n\" +\n        \"\\n\" +\n        \"{\\\"bool\\\": true,\\n\" +\n        \" \\\"f0\\\": \\\"v0\\\",\\n\" +\n        \" \\\"f2\\\": {\\n\" +\n        \"    \\t  \\\"boost\\\": 2.3,\\n\" +\n        \"    \\t  \\\"value\\\": \\\"test\\\"\\n\" +\n        \"    \\t   },\\n\" +\n        \"\\\"array\\\": [ \\\"aaa\\\", \\\"bbb\\\" ],\\n\" +\n        \"\\\"boosted\\\": {\\n\" +\n        \"    \\t      \\\"boost\\\": 6.7,\\n\" +\n        \"    \\t      \\\"value\\\": [ \\\"aaa\\\", \\\"bbb\\\" ]\\n\" +\n        \"    \\t    }\\n\" +\n        \" }\\n\" +\n        \"\\n\" +\n        \"\\n\" +\n        \" {\\\"f1\\\": \\\"v1\\\",\\n\" +\n        \"  \\\"f1\\\": \\\"v2\\\",\\n\" +\n        \"   \\\"f2\\\": null\\n\" +\n        \"  }\\n\";\n    SolrQueryRequest req = req(\"srcField\",\"_src_\");\n    req.getContext().put(\"path\",\"/update/json/docs\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    BufferingRequestProcessor p = new BufferingRequestProcessor(null);\n    JsonLoader loader = new JsonLoader();\n    loader.load(req, rsp, new ContentStreamBase.StringStream(doc), p);\n    assertEquals( 2, p.addCommands.size() );\n     doc = \"\\n\" +\n        \"\\n\" +\n        \"{\\\"bool\\\": true,\\n\" +\n        \" \\\"f0\\\": \\\"v0\\\",\\n\" +\n        \" \\\"f2\\\": {\\n\" +\n        \"    \\t  \\\"boost\\\": 2.3,\\n\" +\n        \"    \\t  \\\"value\\\": \\\"test\\\"\\n\" +\n        \"    \\t   },\\n\" +\n        \"\\\"array\\\": [ \\\"aaa\\\", \\\"bbb\\\" ],\\n\" +\n        \"\\\"boosted\\\": {\\n\" +\n        \"    \\t      \\\"boost\\\": 6.7,\\n\" +\n        \"    \\t      \\\"value\\\": [ \\\"aaa\\\", \\\"bbb\\\" ]\\n\" +\n        \"    \\t    }\\n\" +\n        \" }\\n\" +\n        \"\\n\" +\n        \"\\n\" +\n        \" {\\\"f1\\\": \\\"v1\\\",\\n\" +\n        \"  \\\"f2\\\": \\\"v2\\\",\\n\" +\n        \"   \\\"f3\\\": null\\n\" +\n        \"  }\\n\";\n    req = req(\"srcField\",\"_src_\");\n    req.getContext().put(\"path\",\"/update/json/docs\");\n    rsp = new SolrQueryResponse();\n    p = new BufferingRequestProcessor(null);\n    loader = new JsonLoader();\n    loader.load(req, rsp, new ContentStreamBase.StringStream(doc), p);\n\n    assertEquals( 2, p.addCommands.size() );\n\n    String content = (String) p.addCommands.get(0).solrDoc.getFieldValue(\"_src_\");\n    assertNotNull(content);\n    Map obj = (Map) ObjectBuilder.fromJSON(content);\n    assertEquals(Boolean.TRUE, obj.get(\"bool\"));\n    assertEquals(\"v0\", obj.get(\"f0\"));\n    assertNotNull(obj.get(\"f0\"));\n    assertNotNull(obj.get(\"array\"));\n    assertNotNull(obj.get(\"boosted\"));\n\n    content = (String) p.addCommands.get(1).solrDoc.getFieldValue(\"_src_\");\n    assertNotNull(content);\n    obj = (Map) ObjectBuilder.fromJSON(content);\n    assertEquals(\"v1\", obj.get(\"f1\"));\n    assertEquals(\"v2\", obj.get(\"f2\"));\n    assertTrue(obj.containsKey(\"f3\"));\n\n    doc = \"[{'id':'1'},{'id':'2'}]\".replace('\\'', '\"');\n    req = req(\"srcField\",\"_src_\");\n    req.getContext().put(\"path\",\"/update/json/docs\");\n    rsp = new SolrQueryResponse();\n    p = new BufferingRequestProcessor(null);\n    loader = new JsonLoader();\n    loader.load(req, rsp, new ContentStreamBase.StringStream(doc), p);\n    assertEquals( 2, p.addCommands.size() );\n\n    content = (String) p.addCommands.get(0).solrDoc.getFieldValue(\"_src_\");\n    assertNotNull(content);\n    obj = (Map) ObjectBuilder.fromJSON(content);\n    assertEquals(\"1\", obj.get(\"id\"));\n    content = (String) p.addCommands.get(1).solrDoc.getFieldValue(\"_src_\");\n    assertNotNull(content);\n    obj = (Map) ObjectBuilder.fromJSON(content);\n    assertEquals(\"2\", obj.get(\"id\"));\n\n\n  }\n\n","sourceOld":"  public void testJsonDocFormat() throws Exception{\n    String doc = \"\\n\" +\n        \"\\n\" +\n        \"{\\\"bool\\\": true,\\n\" +\n        \" \\\"f0\\\": \\\"v0\\\",\\n\" +\n        \" \\\"f2\\\": {\\n\" +\n        \"    \\t  \\\"boost\\\": 2.3,\\n\" +\n        \"    \\t  \\\"value\\\": \\\"test\\\"\\n\" +\n        \"    \\t   },\\n\" +\n        \"\\\"array\\\": [ \\\"aaa\\\", \\\"bbb\\\" ],\\n\" +\n        \"\\\"boosted\\\": {\\n\" +\n        \"    \\t      \\\"boost\\\": 6.7,\\n\" +\n        \"    \\t      \\\"value\\\": [ \\\"aaa\\\", \\\"bbb\\\" ]\\n\" +\n        \"    \\t    }\\n\" +\n        \" }\\n\" +\n        \"\\n\" +\n        \"\\n\" +\n        \" {\\\"f1\\\": \\\"v1\\\",\\n\" +\n        \"  \\\"f1\\\": \\\"v2\\\",\\n\" +\n        \"   \\\"f2\\\": null\\n\" +\n        \"  }\\n\";\n    SolrQueryRequest req = req(\"srcField\",\"_src\");\n    req.getContext().put(\"path\",\"/update/json/docs\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    BufferingRequestProcessor p = new BufferingRequestProcessor(null);\n    JsonLoader loader = new JsonLoader();\n    loader.load(req, rsp, new ContentStreamBase.StringStream(doc), p);\n    assertEquals( 2, p.addCommands.size() );\n     doc = \"\\n\" +\n        \"\\n\" +\n        \"{\\\"bool\\\": true,\\n\" +\n        \" \\\"f0\\\": \\\"v0\\\",\\n\" +\n        \" \\\"f2\\\": {\\n\" +\n        \"    \\t  \\\"boost\\\": 2.3,\\n\" +\n        \"    \\t  \\\"value\\\": \\\"test\\\"\\n\" +\n        \"    \\t   },\\n\" +\n        \"\\\"array\\\": [ \\\"aaa\\\", \\\"bbb\\\" ],\\n\" +\n        \"\\\"boosted\\\": {\\n\" +\n        \"    \\t      \\\"boost\\\": 6.7,\\n\" +\n        \"    \\t      \\\"value\\\": [ \\\"aaa\\\", \\\"bbb\\\" ]\\n\" +\n        \"    \\t    }\\n\" +\n        \" }\\n\" +\n        \"\\n\" +\n        \"\\n\" +\n        \" {\\\"f1\\\": \\\"v1\\\",\\n\" +\n        \"  \\\"f2\\\": \\\"v2\\\",\\n\" +\n        \"   \\\"f3\\\": null\\n\" +\n        \"  }\\n\";\n    req = req(\"srcField\",\"_src\");\n    req.getContext().put(\"path\",\"/update/json/docs\");\n    rsp = new SolrQueryResponse();\n    p = new BufferingRequestProcessor(null);\n    loader = new JsonLoader();\n    loader.load(req, rsp, new ContentStreamBase.StringStream(doc), p);\n\n    assertEquals( 2, p.addCommands.size() );\n\n    String content = (String) p.addCommands.get(0).solrDoc.getFieldValue(\"_src\");\n    assertNotNull(content);\n    Map obj = (Map) ObjectBuilder.fromJSON(content);\n    assertEquals(Boolean.TRUE, obj.get(\"bool\"));\n    assertEquals(\"v0\", obj.get(\"f0\"));\n    assertNotNull(obj.get(\"f0\"));\n    assertNotNull(obj.get(\"array\"));\n    assertNotNull(obj.get(\"boosted\"));\n\n    content = (String) p.addCommands.get(1).solrDoc.getFieldValue(\"_src\");\n    assertNotNull(content);\n    obj = (Map) ObjectBuilder.fromJSON(content);\n    assertEquals(\"v1\", obj.get(\"f1\"));\n    assertEquals(\"v2\", obj.get(\"f2\"));\n    assertTrue(obj.containsKey(\"f3\"));\n\n    doc = \"[{'id':'1'},{'id':'2'}]\".replace('\\'', '\"');\n    req = req(\"srcField\",\"_src\");\n    req.getContext().put(\"path\",\"/update/json/docs\");\n    rsp = new SolrQueryResponse();\n    p = new BufferingRequestProcessor(null);\n    loader = new JsonLoader();\n    loader.load(req, rsp, new ContentStreamBase.StringStream(doc), p);\n    assertEquals( 2, p.addCommands.size() );\n\n    content = (String) p.addCommands.get(0).solrDoc.getFieldValue(\"_src\");\n    assertNotNull(content);\n    obj = (Map) ObjectBuilder.fromJSON(content);\n    assertEquals(\"1\", obj.get(\"id\"));\n    content = (String) p.addCommands.get(1).solrDoc.getFieldValue(\"_src\");\n    assertNotNull(content);\n    obj = (Map) ObjectBuilder.fromJSON(content);\n    assertEquals(\"2\", obj.get(\"id\"));\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b4e08e2b6886d78c91752d82ea2b436c4324cd55","date":1464786234,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/JsonLoaderTest#testJsonDocFormat().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/JsonLoaderTest#testJsonDocFormat().mjava","sourceNew":"  public void testJsonDocFormat() throws Exception{\n    String doc = \"\\n\" +\n        \"\\n\" +\n        \"{\\\"bool\\\": true,\\n\" +\n        \" \\\"f0\\\": \\\"v0\\\",\\n\" +\n        \" \\\"f2\\\": {\\n\" +\n        \"    \\t  \\\"boost\\\": 2.3,\\n\" +\n        \"    \\t  \\\"value\\\": \\\"test\\\"\\n\" +\n        \"    \\t   },\\n\" +\n        \"\\\"array\\\": [ \\\"aaa\\\", \\\"bbb\\\" ],\\n\" +\n        \"\\\"boosted\\\": {\\n\" +\n        \"    \\t      \\\"boost\\\": 6.7,\\n\" +\n        \"    \\t      \\\"value\\\": [ \\\"aaa\\\", \\\"bbb\\\" ]\\n\" +\n        \"    \\t    }\\n\" +\n        \" }\\n\" +\n        \"\\n\" +\n        \"\\n\" +\n        \" {\\\"f1\\\": \\\"v1\\\",\\n\" +\n        \"  \\\"f1\\\": \\\"v2\\\",\\n\" +\n        \"   \\\"f2\\\": null\\n\" +\n        \"  }\\n\";\n    SolrQueryRequest req = req(\"srcField\",\"_src_\");\n    req.getContext().put(\"path\",\"/update/json/docs\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    BufferingRequestProcessor p = new BufferingRequestProcessor(null);\n    JsonLoader loader = new JsonLoader();\n    loader.load(req, rsp, new ContentStreamBase.StringStream(doc), p);\n    assertEquals( 2, p.addCommands.size() );\n     doc = \"\\n\" +\n        \"\\n\" +\n        \"{\\\"bool\\\": true,\\n\" +\n        \" \\\"f0\\\": \\\"v0\\\",\\n\" +\n        \" \\\"f2\\\": {\\n\" +\n        \"    \\t  \\\"boost\\\": 2.3,\\n\" +\n        \"    \\t  \\\"value\\\": \\\"test\\\"\\n\" +\n        \"    \\t   },\\n\" +\n        \"\\\"array\\\": [ \\\"aaa\\\", \\\"bbb\\\" ],\\n\" +\n        \"\\\"boosted\\\": {\\n\" +\n        \"    \\t      \\\"boost\\\": 6.7,\\n\" +\n        \"    \\t      \\\"value\\\": [ \\\"aaa\\\", \\\"bbb\\\" ]\\n\" +\n        \"    \\t    }\\n\" +\n        \" }\\n\" +\n        \"\\n\" +\n        \"\\n\" +\n        \" {\\\"f1\\\": \\\"v1\\\",\\n\" +\n        \"  \\\"f2\\\": \\\"v2\\\",\\n\" +\n        \"   \\\"f3\\\": null\\n\" +\n        \"  }\\n\";\n    req = req(\"srcField\",\"_src_\");\n    req.getContext().put(\"path\",\"/update/json/docs\");\n    rsp = new SolrQueryResponse();\n    p = new BufferingRequestProcessor(null);\n    loader = new JsonLoader();\n    loader.load(req, rsp, new ContentStreamBase.StringStream(doc), p);\n\n    assertEquals( 2, p.addCommands.size() );\n\n    String content = (String) p.addCommands.get(0).solrDoc.getFieldValue(\"_src_\");\n    assertNotNull(content);\n    Map obj = (Map) ObjectBuilder.fromJSON(content);\n    assertEquals(Boolean.TRUE, obj.get(\"bool\"));\n    assertEquals(\"v0\", obj.get(\"f0\"));\n    assertNotNull(obj.get(\"f0\"));\n    assertNotNull(obj.get(\"array\"));\n    assertNotNull(obj.get(\"boosted\"));\n\n    content = (String) p.addCommands.get(1).solrDoc.getFieldValue(\"_src_\");\n    assertNotNull(content);\n    obj = (Map) ObjectBuilder.fromJSON(content);\n    assertEquals(\"v1\", obj.get(\"f1\"));\n    assertEquals(\"v2\", obj.get(\"f2\"));\n    assertTrue(obj.containsKey(\"f3\"));\n\n    doc = \"[{'id':'1'},{'id':'2'}]\".replace('\\'', '\"');\n    req = req(\"srcField\",\"_src_\");\n    req.getContext().put(\"path\",\"/update/json/docs\");\n    rsp = new SolrQueryResponse();\n    p = new BufferingRequestProcessor(null);\n    loader = new JsonLoader();\n    loader.load(req, rsp, new ContentStreamBase.StringStream(doc), p);\n    assertEquals( 2, p.addCommands.size() );\n\n    content = (String) p.addCommands.get(0).solrDoc.getFieldValue(\"_src_\");\n    assertNotNull(content);\n    obj = (Map) ObjectBuilder.fromJSON(content);\n    assertEquals(\"1\", obj.get(\"id\"));\n    content = (String) p.addCommands.get(1).solrDoc.getFieldValue(\"_src_\");\n    assertNotNull(content);\n    obj = (Map) ObjectBuilder.fromJSON(content);\n    assertEquals(\"2\", obj.get(\"id\"));\n\n    String json = \"{a:{\" +\n        \"b:[{c:c1, e:e1},{c:c2, e :e2, d:{p:q}}],\" +\n        \"x:y\" +\n        \"}}\";\n    req = req(\"split\", \"/\", \"child.split\" , \"/a/b\"   );\n    req.getContext().put(\"path\",\"/update/json/docs\");\n    rsp = new SolrQueryResponse();\n    p = new BufferingRequestProcessor(null);\n    loader = new JsonLoader();\n    loader.load(req, rsp, new ContentStreamBase.StringStream(json), p);\n\n    assertEquals( 1, p.addCommands.size() );\n    assertEquals(\"y\",  p.addCommands.get(0).solrDoc.getFieldValue(\"a.x\"));\n    List<SolrInputDocument> children = p.addCommands.get(0).solrDoc.getChildDocuments();\n    assertEquals(2, children.size());\n    SolrInputDocument d = children.get(0);\n    assertEquals(d.getFieldValue(\"c\"), \"c1\");\n    assertEquals(d.getFieldValue(\"e\"), \"e1\");\n    d = children.get(1);\n    assertEquals(d.getFieldValue(\"c\"), \"c2\");\n    assertEquals(d.getFieldValue(\"e\"), \"e2\");\n    assertEquals(d.getFieldValue(\"d.p\"), \"q\");\n  }\n\n","sourceOld":"  public void testJsonDocFormat() throws Exception{\n    String doc = \"\\n\" +\n        \"\\n\" +\n        \"{\\\"bool\\\": true,\\n\" +\n        \" \\\"f0\\\": \\\"v0\\\",\\n\" +\n        \" \\\"f2\\\": {\\n\" +\n        \"    \\t  \\\"boost\\\": 2.3,\\n\" +\n        \"    \\t  \\\"value\\\": \\\"test\\\"\\n\" +\n        \"    \\t   },\\n\" +\n        \"\\\"array\\\": [ \\\"aaa\\\", \\\"bbb\\\" ],\\n\" +\n        \"\\\"boosted\\\": {\\n\" +\n        \"    \\t      \\\"boost\\\": 6.7,\\n\" +\n        \"    \\t      \\\"value\\\": [ \\\"aaa\\\", \\\"bbb\\\" ]\\n\" +\n        \"    \\t    }\\n\" +\n        \" }\\n\" +\n        \"\\n\" +\n        \"\\n\" +\n        \" {\\\"f1\\\": \\\"v1\\\",\\n\" +\n        \"  \\\"f1\\\": \\\"v2\\\",\\n\" +\n        \"   \\\"f2\\\": null\\n\" +\n        \"  }\\n\";\n    SolrQueryRequest req = req(\"srcField\",\"_src_\");\n    req.getContext().put(\"path\",\"/update/json/docs\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    BufferingRequestProcessor p = new BufferingRequestProcessor(null);\n    JsonLoader loader = new JsonLoader();\n    loader.load(req, rsp, new ContentStreamBase.StringStream(doc), p);\n    assertEquals( 2, p.addCommands.size() );\n     doc = \"\\n\" +\n        \"\\n\" +\n        \"{\\\"bool\\\": true,\\n\" +\n        \" \\\"f0\\\": \\\"v0\\\",\\n\" +\n        \" \\\"f2\\\": {\\n\" +\n        \"    \\t  \\\"boost\\\": 2.3,\\n\" +\n        \"    \\t  \\\"value\\\": \\\"test\\\"\\n\" +\n        \"    \\t   },\\n\" +\n        \"\\\"array\\\": [ \\\"aaa\\\", \\\"bbb\\\" ],\\n\" +\n        \"\\\"boosted\\\": {\\n\" +\n        \"    \\t      \\\"boost\\\": 6.7,\\n\" +\n        \"    \\t      \\\"value\\\": [ \\\"aaa\\\", \\\"bbb\\\" ]\\n\" +\n        \"    \\t    }\\n\" +\n        \" }\\n\" +\n        \"\\n\" +\n        \"\\n\" +\n        \" {\\\"f1\\\": \\\"v1\\\",\\n\" +\n        \"  \\\"f2\\\": \\\"v2\\\",\\n\" +\n        \"   \\\"f3\\\": null\\n\" +\n        \"  }\\n\";\n    req = req(\"srcField\",\"_src_\");\n    req.getContext().put(\"path\",\"/update/json/docs\");\n    rsp = new SolrQueryResponse();\n    p = new BufferingRequestProcessor(null);\n    loader = new JsonLoader();\n    loader.load(req, rsp, new ContentStreamBase.StringStream(doc), p);\n\n    assertEquals( 2, p.addCommands.size() );\n\n    String content = (String) p.addCommands.get(0).solrDoc.getFieldValue(\"_src_\");\n    assertNotNull(content);\n    Map obj = (Map) ObjectBuilder.fromJSON(content);\n    assertEquals(Boolean.TRUE, obj.get(\"bool\"));\n    assertEquals(\"v0\", obj.get(\"f0\"));\n    assertNotNull(obj.get(\"f0\"));\n    assertNotNull(obj.get(\"array\"));\n    assertNotNull(obj.get(\"boosted\"));\n\n    content = (String) p.addCommands.get(1).solrDoc.getFieldValue(\"_src_\");\n    assertNotNull(content);\n    obj = (Map) ObjectBuilder.fromJSON(content);\n    assertEquals(\"v1\", obj.get(\"f1\"));\n    assertEquals(\"v2\", obj.get(\"f2\"));\n    assertTrue(obj.containsKey(\"f3\"));\n\n    doc = \"[{'id':'1'},{'id':'2'}]\".replace('\\'', '\"');\n    req = req(\"srcField\",\"_src_\");\n    req.getContext().put(\"path\",\"/update/json/docs\");\n    rsp = new SolrQueryResponse();\n    p = new BufferingRequestProcessor(null);\n    loader = new JsonLoader();\n    loader.load(req, rsp, new ContentStreamBase.StringStream(doc), p);\n    assertEquals( 2, p.addCommands.size() );\n\n    content = (String) p.addCommands.get(0).solrDoc.getFieldValue(\"_src_\");\n    assertNotNull(content);\n    obj = (Map) ObjectBuilder.fromJSON(content);\n    assertEquals(\"1\", obj.get(\"id\"));\n    content = (String) p.addCommands.get(1).solrDoc.getFieldValue(\"_src_\");\n    assertNotNull(content);\n    obj = (Map) ObjectBuilder.fromJSON(content);\n    assertEquals(\"2\", obj.get(\"id\"));\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"611f7ea4eee5babadf4129bfa5fbae964738cd7c","date":1464787051,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/JsonLoaderTest#testJsonDocFormat().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/JsonLoaderTest#testJsonDocFormat().mjava","sourceNew":"  public void testJsonDocFormat() throws Exception{\n    String doc = \"\\n\" +\n        \"\\n\" +\n        \"{\\\"bool\\\": true,\\n\" +\n        \" \\\"f0\\\": \\\"v0\\\",\\n\" +\n        \" \\\"f2\\\": {\\n\" +\n        \"    \\t  \\\"boost\\\": 2.3,\\n\" +\n        \"    \\t  \\\"value\\\": \\\"test\\\"\\n\" +\n        \"    \\t   },\\n\" +\n        \"\\\"array\\\": [ \\\"aaa\\\", \\\"bbb\\\" ],\\n\" +\n        \"\\\"boosted\\\": {\\n\" +\n        \"    \\t      \\\"boost\\\": 6.7,\\n\" +\n        \"    \\t      \\\"value\\\": [ \\\"aaa\\\", \\\"bbb\\\" ]\\n\" +\n        \"    \\t    }\\n\" +\n        \" }\\n\" +\n        \"\\n\" +\n        \"\\n\" +\n        \" {\\\"f1\\\": \\\"v1\\\",\\n\" +\n        \"  \\\"f1\\\": \\\"v2\\\",\\n\" +\n        \"   \\\"f2\\\": null\\n\" +\n        \"  }\\n\";\n    SolrQueryRequest req = req(\"srcField\",\"_src_\");\n    req.getContext().put(\"path\",\"/update/json/docs\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    BufferingRequestProcessor p = new BufferingRequestProcessor(null);\n    JsonLoader loader = new JsonLoader();\n    loader.load(req, rsp, new ContentStreamBase.StringStream(doc), p);\n    assertEquals( 2, p.addCommands.size() );\n     doc = \"\\n\" +\n        \"\\n\" +\n        \"{\\\"bool\\\": true,\\n\" +\n        \" \\\"f0\\\": \\\"v0\\\",\\n\" +\n        \" \\\"f2\\\": {\\n\" +\n        \"    \\t  \\\"boost\\\": 2.3,\\n\" +\n        \"    \\t  \\\"value\\\": \\\"test\\\"\\n\" +\n        \"    \\t   },\\n\" +\n        \"\\\"array\\\": [ \\\"aaa\\\", \\\"bbb\\\" ],\\n\" +\n        \"\\\"boosted\\\": {\\n\" +\n        \"    \\t      \\\"boost\\\": 6.7,\\n\" +\n        \"    \\t      \\\"value\\\": [ \\\"aaa\\\", \\\"bbb\\\" ]\\n\" +\n        \"    \\t    }\\n\" +\n        \" }\\n\" +\n        \"\\n\" +\n        \"\\n\" +\n        \" {\\\"f1\\\": \\\"v1\\\",\\n\" +\n        \"  \\\"f2\\\": \\\"v2\\\",\\n\" +\n        \"   \\\"f3\\\": null\\n\" +\n        \"  }\\n\";\n    req = req(\"srcField\",\"_src_\");\n    req.getContext().put(\"path\",\"/update/json/docs\");\n    rsp = new SolrQueryResponse();\n    p = new BufferingRequestProcessor(null);\n    loader = new JsonLoader();\n    loader.load(req, rsp, new ContentStreamBase.StringStream(doc), p);\n\n    assertEquals( 2, p.addCommands.size() );\n\n    String content = (String) p.addCommands.get(0).solrDoc.getFieldValue(\"_src_\");\n    assertNotNull(content);\n    Map obj = (Map) ObjectBuilder.fromJSON(content);\n    assertEquals(Boolean.TRUE, obj.get(\"bool\"));\n    assertEquals(\"v0\", obj.get(\"f0\"));\n    assertNotNull(obj.get(\"f0\"));\n    assertNotNull(obj.get(\"array\"));\n    assertNotNull(obj.get(\"boosted\"));\n\n    content = (String) p.addCommands.get(1).solrDoc.getFieldValue(\"_src_\");\n    assertNotNull(content);\n    obj = (Map) ObjectBuilder.fromJSON(content);\n    assertEquals(\"v1\", obj.get(\"f1\"));\n    assertEquals(\"v2\", obj.get(\"f2\"));\n    assertTrue(obj.containsKey(\"f3\"));\n\n    doc = \"[{'id':'1'},{'id':'2'}]\".replace('\\'', '\"');\n    req = req(\"srcField\",\"_src_\");\n    req.getContext().put(\"path\",\"/update/json/docs\");\n    rsp = new SolrQueryResponse();\n    p = new BufferingRequestProcessor(null);\n    loader = new JsonLoader();\n    loader.load(req, rsp, new ContentStreamBase.StringStream(doc), p);\n    assertEquals( 2, p.addCommands.size() );\n\n    content = (String) p.addCommands.get(0).solrDoc.getFieldValue(\"_src_\");\n    assertNotNull(content);\n    obj = (Map) ObjectBuilder.fromJSON(content);\n    assertEquals(\"1\", obj.get(\"id\"));\n    content = (String) p.addCommands.get(1).solrDoc.getFieldValue(\"_src_\");\n    assertNotNull(content);\n    obj = (Map) ObjectBuilder.fromJSON(content);\n    assertEquals(\"2\", obj.get(\"id\"));\n\n    String json = \"{a:{\" +\n        \"b:[{c:c1, e:e1},{c:c2, e :e2, d:{p:q}}],\" +\n        \"x:y\" +\n        \"}}\";\n    req = req(\"split\", \"/\", \"child.split\" , \"/a/b\"   );\n    req.getContext().put(\"path\",\"/update/json/docs\");\n    rsp = new SolrQueryResponse();\n    p = new BufferingRequestProcessor(null);\n    loader = new JsonLoader();\n    loader.load(req, rsp, new ContentStreamBase.StringStream(json), p);\n\n    assertEquals( 1, p.addCommands.size() );\n    assertEquals(\"y\",  p.addCommands.get(0).solrDoc.getFieldValue(\"a.x\"));\n    List<SolrInputDocument> children = p.addCommands.get(0).solrDoc.getChildDocuments();\n    assertEquals(2, children.size());\n    SolrInputDocument d = children.get(0);\n    assertEquals(d.getFieldValue(\"c\"), \"c1\");\n    assertEquals(d.getFieldValue(\"e\"), \"e1\");\n    d = children.get(1);\n    assertEquals(d.getFieldValue(\"c\"), \"c2\");\n    assertEquals(d.getFieldValue(\"e\"), \"e2\");\n    assertEquals(d.getFieldValue(\"d.p\"), \"q\");\n  }\n\n","sourceOld":"  public void testJsonDocFormat() throws Exception{\n    String doc = \"\\n\" +\n        \"\\n\" +\n        \"{\\\"bool\\\": true,\\n\" +\n        \" \\\"f0\\\": \\\"v0\\\",\\n\" +\n        \" \\\"f2\\\": {\\n\" +\n        \"    \\t  \\\"boost\\\": 2.3,\\n\" +\n        \"    \\t  \\\"value\\\": \\\"test\\\"\\n\" +\n        \"    \\t   },\\n\" +\n        \"\\\"array\\\": [ \\\"aaa\\\", \\\"bbb\\\" ],\\n\" +\n        \"\\\"boosted\\\": {\\n\" +\n        \"    \\t      \\\"boost\\\": 6.7,\\n\" +\n        \"    \\t      \\\"value\\\": [ \\\"aaa\\\", \\\"bbb\\\" ]\\n\" +\n        \"    \\t    }\\n\" +\n        \" }\\n\" +\n        \"\\n\" +\n        \"\\n\" +\n        \" {\\\"f1\\\": \\\"v1\\\",\\n\" +\n        \"  \\\"f1\\\": \\\"v2\\\",\\n\" +\n        \"   \\\"f2\\\": null\\n\" +\n        \"  }\\n\";\n    SolrQueryRequest req = req(\"srcField\",\"_src_\");\n    req.getContext().put(\"path\",\"/update/json/docs\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    BufferingRequestProcessor p = new BufferingRequestProcessor(null);\n    JsonLoader loader = new JsonLoader();\n    loader.load(req, rsp, new ContentStreamBase.StringStream(doc), p);\n    assertEquals( 2, p.addCommands.size() );\n     doc = \"\\n\" +\n        \"\\n\" +\n        \"{\\\"bool\\\": true,\\n\" +\n        \" \\\"f0\\\": \\\"v0\\\",\\n\" +\n        \" \\\"f2\\\": {\\n\" +\n        \"    \\t  \\\"boost\\\": 2.3,\\n\" +\n        \"    \\t  \\\"value\\\": \\\"test\\\"\\n\" +\n        \"    \\t   },\\n\" +\n        \"\\\"array\\\": [ \\\"aaa\\\", \\\"bbb\\\" ],\\n\" +\n        \"\\\"boosted\\\": {\\n\" +\n        \"    \\t      \\\"boost\\\": 6.7,\\n\" +\n        \"    \\t      \\\"value\\\": [ \\\"aaa\\\", \\\"bbb\\\" ]\\n\" +\n        \"    \\t    }\\n\" +\n        \" }\\n\" +\n        \"\\n\" +\n        \"\\n\" +\n        \" {\\\"f1\\\": \\\"v1\\\",\\n\" +\n        \"  \\\"f2\\\": \\\"v2\\\",\\n\" +\n        \"   \\\"f3\\\": null\\n\" +\n        \"  }\\n\";\n    req = req(\"srcField\",\"_src_\");\n    req.getContext().put(\"path\",\"/update/json/docs\");\n    rsp = new SolrQueryResponse();\n    p = new BufferingRequestProcessor(null);\n    loader = new JsonLoader();\n    loader.load(req, rsp, new ContentStreamBase.StringStream(doc), p);\n\n    assertEquals( 2, p.addCommands.size() );\n\n    String content = (String) p.addCommands.get(0).solrDoc.getFieldValue(\"_src_\");\n    assertNotNull(content);\n    Map obj = (Map) ObjectBuilder.fromJSON(content);\n    assertEquals(Boolean.TRUE, obj.get(\"bool\"));\n    assertEquals(\"v0\", obj.get(\"f0\"));\n    assertNotNull(obj.get(\"f0\"));\n    assertNotNull(obj.get(\"array\"));\n    assertNotNull(obj.get(\"boosted\"));\n\n    content = (String) p.addCommands.get(1).solrDoc.getFieldValue(\"_src_\");\n    assertNotNull(content);\n    obj = (Map) ObjectBuilder.fromJSON(content);\n    assertEquals(\"v1\", obj.get(\"f1\"));\n    assertEquals(\"v2\", obj.get(\"f2\"));\n    assertTrue(obj.containsKey(\"f3\"));\n\n    doc = \"[{'id':'1'},{'id':'2'}]\".replace('\\'', '\"');\n    req = req(\"srcField\",\"_src_\");\n    req.getContext().put(\"path\",\"/update/json/docs\");\n    rsp = new SolrQueryResponse();\n    p = new BufferingRequestProcessor(null);\n    loader = new JsonLoader();\n    loader.load(req, rsp, new ContentStreamBase.StringStream(doc), p);\n    assertEquals( 2, p.addCommands.size() );\n\n    content = (String) p.addCommands.get(0).solrDoc.getFieldValue(\"_src_\");\n    assertNotNull(content);\n    obj = (Map) ObjectBuilder.fromJSON(content);\n    assertEquals(\"1\", obj.get(\"id\"));\n    content = (String) p.addCommands.get(1).solrDoc.getFieldValue(\"_src_\");\n    assertNotNull(content);\n    obj = (Map) ObjectBuilder.fromJSON(content);\n    assertEquals(\"2\", obj.get(\"id\"));\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5b8ee93140fd0efef7e101786e3ed5160a700b5f","date":1464820111,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/JsonLoaderTest#testJsonDocFormat().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/JsonLoaderTest#testJsonDocFormat().mjava","sourceNew":"  public void testJsonDocFormat() throws Exception{\n    String doc = \"\\n\" +\n        \"\\n\" +\n        \"{\\\"bool\\\": true,\\n\" +\n        \" \\\"f0\\\": \\\"v0\\\",\\n\" +\n        \" \\\"f2\\\": {\\n\" +\n        \"    \\t  \\\"boost\\\": 2.3,\\n\" +\n        \"    \\t  \\\"value\\\": \\\"test\\\"\\n\" +\n        \"    \\t   },\\n\" +\n        \"\\\"array\\\": [ \\\"aaa\\\", \\\"bbb\\\" ],\\n\" +\n        \"\\\"boosted\\\": {\\n\" +\n        \"    \\t      \\\"boost\\\": 6.7,\\n\" +\n        \"    \\t      \\\"value\\\": [ \\\"aaa\\\", \\\"bbb\\\" ]\\n\" +\n        \"    \\t    }\\n\" +\n        \" }\\n\" +\n        \"\\n\" +\n        \"\\n\" +\n        \" {\\\"f1\\\": \\\"v1\\\",\\n\" +\n        \"  \\\"f1\\\": \\\"v2\\\",\\n\" +\n        \"   \\\"f2\\\": null\\n\" +\n        \"  }\\n\";\n    SolrQueryRequest req = req(\"srcField\",\"_src_\");\n    req.getContext().put(\"path\",\"/update/json/docs\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    BufferingRequestProcessor p = new BufferingRequestProcessor(null);\n    JsonLoader loader = new JsonLoader();\n    loader.load(req, rsp, new ContentStreamBase.StringStream(doc), p);\n    assertEquals( 2, p.addCommands.size() );\n     doc = \"\\n\" +\n        \"\\n\" +\n        \"{\\\"bool\\\": true,\\n\" +\n        \" \\\"f0\\\": \\\"v0\\\",\\n\" +\n        \" \\\"f2\\\": {\\n\" +\n        \"    \\t  \\\"boost\\\": 2.3,\\n\" +\n        \"    \\t  \\\"value\\\": \\\"test\\\"\\n\" +\n        \"    \\t   },\\n\" +\n        \"\\\"array\\\": [ \\\"aaa\\\", \\\"bbb\\\" ],\\n\" +\n        \"\\\"boosted\\\": {\\n\" +\n        \"    \\t      \\\"boost\\\": 6.7,\\n\" +\n        \"    \\t      \\\"value\\\": [ \\\"aaa\\\", \\\"bbb\\\" ]\\n\" +\n        \"    \\t    }\\n\" +\n        \" }\\n\" +\n        \"\\n\" +\n        \"\\n\" +\n        \" {\\\"f1\\\": \\\"v1\\\",\\n\" +\n        \"  \\\"f2\\\": \\\"v2\\\",\\n\" +\n        \"   \\\"f3\\\": null\\n\" +\n        \"  }\\n\";\n    req = req(\"srcField\",\"_src_\");\n    req.getContext().put(\"path\",\"/update/json/docs\");\n    rsp = new SolrQueryResponse();\n    p = new BufferingRequestProcessor(null);\n    loader = new JsonLoader();\n    loader.load(req, rsp, new ContentStreamBase.StringStream(doc), p);\n\n    assertEquals( 2, p.addCommands.size() );\n\n    String content = (String) p.addCommands.get(0).solrDoc.getFieldValue(\"_src_\");\n    assertNotNull(content);\n    Map obj = (Map) ObjectBuilder.fromJSON(content);\n    assertEquals(Boolean.TRUE, obj.get(\"bool\"));\n    assertEquals(\"v0\", obj.get(\"f0\"));\n    assertNotNull(obj.get(\"f0\"));\n    assertNotNull(obj.get(\"array\"));\n    assertNotNull(obj.get(\"boosted\"));\n\n    content = (String) p.addCommands.get(1).solrDoc.getFieldValue(\"_src_\");\n    assertNotNull(content);\n    obj = (Map) ObjectBuilder.fromJSON(content);\n    assertEquals(\"v1\", obj.get(\"f1\"));\n    assertEquals(\"v2\", obj.get(\"f2\"));\n    assertTrue(obj.containsKey(\"f3\"));\n\n    doc = \"[{'id':'1'},{'id':'2'}]\".replace('\\'', '\"');\n    req = req(\"srcField\",\"_src_\");\n    req.getContext().put(\"path\",\"/update/json/docs\");\n    rsp = new SolrQueryResponse();\n    p = new BufferingRequestProcessor(null);\n    loader = new JsonLoader();\n    loader.load(req, rsp, new ContentStreamBase.StringStream(doc), p);\n    assertEquals( 2, p.addCommands.size() );\n\n    content = (String) p.addCommands.get(0).solrDoc.getFieldValue(\"_src_\");\n    assertNotNull(content);\n    obj = (Map) ObjectBuilder.fromJSON(content);\n    assertEquals(\"1\", obj.get(\"id\"));\n    content = (String) p.addCommands.get(1).solrDoc.getFieldValue(\"_src_\");\n    assertNotNull(content);\n    obj = (Map) ObjectBuilder.fromJSON(content);\n    assertEquals(\"2\", obj.get(\"id\"));\n\n    String json = \"{a:{\" +\n        \"b:[{c:c1, e:e1},{c:c2, e :e2, d:{p:q}}],\" +\n        \"x:y\" +\n        \"}}\";\n    req = req(\"split\", \"/\", \"child.split\" , \"/a/b\"   );\n    req.getContext().put(\"path\",\"/update/json/docs\");\n    rsp = new SolrQueryResponse();\n    p = new BufferingRequestProcessor(null);\n    loader = new JsonLoader();\n    loader.load(req, rsp, new ContentStreamBase.StringStream(json), p);\n\n    assertEquals( 1, p.addCommands.size() );\n    assertEquals(\"y\",  p.addCommands.get(0).solrDoc.getFieldValue(\"a.x\"));\n    List<SolrInputDocument> children = p.addCommands.get(0).solrDoc.getChildDocuments();\n    assertEquals(2, children.size());\n    SolrInputDocument d = children.get(0);\n    assertEquals(d.getFieldValue(\"c\"), \"c1\");\n    assertEquals(d.getFieldValue(\"e\"), \"e1\");\n    d = children.get(1);\n    assertEquals(d.getFieldValue(\"c\"), \"c2\");\n    assertEquals(d.getFieldValue(\"e\"), \"e2\");\n    assertEquals(d.getFieldValue(\"d.p\"), \"q\");\n  }\n\n","sourceOld":"  public void testJsonDocFormat() throws Exception{\n    String doc = \"\\n\" +\n        \"\\n\" +\n        \"{\\\"bool\\\": true,\\n\" +\n        \" \\\"f0\\\": \\\"v0\\\",\\n\" +\n        \" \\\"f2\\\": {\\n\" +\n        \"    \\t  \\\"boost\\\": 2.3,\\n\" +\n        \"    \\t  \\\"value\\\": \\\"test\\\"\\n\" +\n        \"    \\t   },\\n\" +\n        \"\\\"array\\\": [ \\\"aaa\\\", \\\"bbb\\\" ],\\n\" +\n        \"\\\"boosted\\\": {\\n\" +\n        \"    \\t      \\\"boost\\\": 6.7,\\n\" +\n        \"    \\t      \\\"value\\\": [ \\\"aaa\\\", \\\"bbb\\\" ]\\n\" +\n        \"    \\t    }\\n\" +\n        \" }\\n\" +\n        \"\\n\" +\n        \"\\n\" +\n        \" {\\\"f1\\\": \\\"v1\\\",\\n\" +\n        \"  \\\"f1\\\": \\\"v2\\\",\\n\" +\n        \"   \\\"f2\\\": null\\n\" +\n        \"  }\\n\";\n    SolrQueryRequest req = req(\"srcField\",\"_src_\");\n    req.getContext().put(\"path\",\"/update/json/docs\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    BufferingRequestProcessor p = new BufferingRequestProcessor(null);\n    JsonLoader loader = new JsonLoader();\n    loader.load(req, rsp, new ContentStreamBase.StringStream(doc), p);\n    assertEquals( 2, p.addCommands.size() );\n     doc = \"\\n\" +\n        \"\\n\" +\n        \"{\\\"bool\\\": true,\\n\" +\n        \" \\\"f0\\\": \\\"v0\\\",\\n\" +\n        \" \\\"f2\\\": {\\n\" +\n        \"    \\t  \\\"boost\\\": 2.3,\\n\" +\n        \"    \\t  \\\"value\\\": \\\"test\\\"\\n\" +\n        \"    \\t   },\\n\" +\n        \"\\\"array\\\": [ \\\"aaa\\\", \\\"bbb\\\" ],\\n\" +\n        \"\\\"boosted\\\": {\\n\" +\n        \"    \\t      \\\"boost\\\": 6.7,\\n\" +\n        \"    \\t      \\\"value\\\": [ \\\"aaa\\\", \\\"bbb\\\" ]\\n\" +\n        \"    \\t    }\\n\" +\n        \" }\\n\" +\n        \"\\n\" +\n        \"\\n\" +\n        \" {\\\"f1\\\": \\\"v1\\\",\\n\" +\n        \"  \\\"f2\\\": \\\"v2\\\",\\n\" +\n        \"   \\\"f3\\\": null\\n\" +\n        \"  }\\n\";\n    req = req(\"srcField\",\"_src_\");\n    req.getContext().put(\"path\",\"/update/json/docs\");\n    rsp = new SolrQueryResponse();\n    p = new BufferingRequestProcessor(null);\n    loader = new JsonLoader();\n    loader.load(req, rsp, new ContentStreamBase.StringStream(doc), p);\n\n    assertEquals( 2, p.addCommands.size() );\n\n    String content = (String) p.addCommands.get(0).solrDoc.getFieldValue(\"_src_\");\n    assertNotNull(content);\n    Map obj = (Map) ObjectBuilder.fromJSON(content);\n    assertEquals(Boolean.TRUE, obj.get(\"bool\"));\n    assertEquals(\"v0\", obj.get(\"f0\"));\n    assertNotNull(obj.get(\"f0\"));\n    assertNotNull(obj.get(\"array\"));\n    assertNotNull(obj.get(\"boosted\"));\n\n    content = (String) p.addCommands.get(1).solrDoc.getFieldValue(\"_src_\");\n    assertNotNull(content);\n    obj = (Map) ObjectBuilder.fromJSON(content);\n    assertEquals(\"v1\", obj.get(\"f1\"));\n    assertEquals(\"v2\", obj.get(\"f2\"));\n    assertTrue(obj.containsKey(\"f3\"));\n\n    doc = \"[{'id':'1'},{'id':'2'}]\".replace('\\'', '\"');\n    req = req(\"srcField\",\"_src_\");\n    req.getContext().put(\"path\",\"/update/json/docs\");\n    rsp = new SolrQueryResponse();\n    p = new BufferingRequestProcessor(null);\n    loader = new JsonLoader();\n    loader.load(req, rsp, new ContentStreamBase.StringStream(doc), p);\n    assertEquals( 2, p.addCommands.size() );\n\n    content = (String) p.addCommands.get(0).solrDoc.getFieldValue(\"_src_\");\n    assertNotNull(content);\n    obj = (Map) ObjectBuilder.fromJSON(content);\n    assertEquals(\"1\", obj.get(\"id\"));\n    content = (String) p.addCommands.get(1).solrDoc.getFieldValue(\"_src_\");\n    assertNotNull(content);\n    obj = (Map) ObjectBuilder.fromJSON(content);\n    assertEquals(\"2\", obj.get(\"id\"));\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77","date":1464821470,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/JsonLoaderTest#testJsonDocFormat().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/JsonLoaderTest#testJsonDocFormat().mjava","sourceNew":"  public void testJsonDocFormat() throws Exception{\n    String doc = \"\\n\" +\n        \"\\n\" +\n        \"{\\\"bool\\\": true,\\n\" +\n        \" \\\"f0\\\": \\\"v0\\\",\\n\" +\n        \" \\\"f2\\\": {\\n\" +\n        \"    \\t  \\\"boost\\\": 2.3,\\n\" +\n        \"    \\t  \\\"value\\\": \\\"test\\\"\\n\" +\n        \"    \\t   },\\n\" +\n        \"\\\"array\\\": [ \\\"aaa\\\", \\\"bbb\\\" ],\\n\" +\n        \"\\\"boosted\\\": {\\n\" +\n        \"    \\t      \\\"boost\\\": 6.7,\\n\" +\n        \"    \\t      \\\"value\\\": [ \\\"aaa\\\", \\\"bbb\\\" ]\\n\" +\n        \"    \\t    }\\n\" +\n        \" }\\n\" +\n        \"\\n\" +\n        \"\\n\" +\n        \" {\\\"f1\\\": \\\"v1\\\",\\n\" +\n        \"  \\\"f1\\\": \\\"v2\\\",\\n\" +\n        \"   \\\"f2\\\": null\\n\" +\n        \"  }\\n\";\n    SolrQueryRequest req = req(\"srcField\",\"_src_\");\n    req.getContext().put(\"path\",\"/update/json/docs\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    BufferingRequestProcessor p = new BufferingRequestProcessor(null);\n    JsonLoader loader = new JsonLoader();\n    loader.load(req, rsp, new ContentStreamBase.StringStream(doc), p);\n    assertEquals( 2, p.addCommands.size() );\n     doc = \"\\n\" +\n        \"\\n\" +\n        \"{\\\"bool\\\": true,\\n\" +\n        \" \\\"f0\\\": \\\"v0\\\",\\n\" +\n        \" \\\"f2\\\": {\\n\" +\n        \"    \\t  \\\"boost\\\": 2.3,\\n\" +\n        \"    \\t  \\\"value\\\": \\\"test\\\"\\n\" +\n        \"    \\t   },\\n\" +\n        \"\\\"array\\\": [ \\\"aaa\\\", \\\"bbb\\\" ],\\n\" +\n        \"\\\"boosted\\\": {\\n\" +\n        \"    \\t      \\\"boost\\\": 6.7,\\n\" +\n        \"    \\t      \\\"value\\\": [ \\\"aaa\\\", \\\"bbb\\\" ]\\n\" +\n        \"    \\t    }\\n\" +\n        \" }\\n\" +\n        \"\\n\" +\n        \"\\n\" +\n        \" {\\\"f1\\\": \\\"v1\\\",\\n\" +\n        \"  \\\"f2\\\": \\\"v2\\\",\\n\" +\n        \"   \\\"f3\\\": null\\n\" +\n        \"  }\\n\";\n    req = req(\"srcField\",\"_src_\");\n    req.getContext().put(\"path\",\"/update/json/docs\");\n    rsp = new SolrQueryResponse();\n    p = new BufferingRequestProcessor(null);\n    loader = new JsonLoader();\n    loader.load(req, rsp, new ContentStreamBase.StringStream(doc), p);\n\n    assertEquals( 2, p.addCommands.size() );\n\n    String content = (String) p.addCommands.get(0).solrDoc.getFieldValue(\"_src_\");\n    assertNotNull(content);\n    Map obj = (Map) ObjectBuilder.fromJSON(content);\n    assertEquals(Boolean.TRUE, obj.get(\"bool\"));\n    assertEquals(\"v0\", obj.get(\"f0\"));\n    assertNotNull(obj.get(\"f0\"));\n    assertNotNull(obj.get(\"array\"));\n    assertNotNull(obj.get(\"boosted\"));\n\n    content = (String) p.addCommands.get(1).solrDoc.getFieldValue(\"_src_\");\n    assertNotNull(content);\n    obj = (Map) ObjectBuilder.fromJSON(content);\n    assertEquals(\"v1\", obj.get(\"f1\"));\n    assertEquals(\"v2\", obj.get(\"f2\"));\n    assertTrue(obj.containsKey(\"f3\"));\n\n    doc = \"[{'id':'1'},{'id':'2'}]\".replace('\\'', '\"');\n    req = req(\"srcField\",\"_src_\");\n    req.getContext().put(\"path\",\"/update/json/docs\");\n    rsp = new SolrQueryResponse();\n    p = new BufferingRequestProcessor(null);\n    loader = new JsonLoader();\n    loader.load(req, rsp, new ContentStreamBase.StringStream(doc), p);\n    assertEquals( 2, p.addCommands.size() );\n\n    content = (String) p.addCommands.get(0).solrDoc.getFieldValue(\"_src_\");\n    assertNotNull(content);\n    obj = (Map) ObjectBuilder.fromJSON(content);\n    assertEquals(\"1\", obj.get(\"id\"));\n    content = (String) p.addCommands.get(1).solrDoc.getFieldValue(\"_src_\");\n    assertNotNull(content);\n    obj = (Map) ObjectBuilder.fromJSON(content);\n    assertEquals(\"2\", obj.get(\"id\"));\n\n    String json = \"{a:{\" +\n        \"b:[{c:c1, e:e1},{c:c2, e :e2, d:{p:q}}],\" +\n        \"x:y\" +\n        \"}}\";\n    req = req(\"split\", \"/\", \"child.split\" , \"/a/b\"   );\n    req.getContext().put(\"path\",\"/update/json/docs\");\n    rsp = new SolrQueryResponse();\n    p = new BufferingRequestProcessor(null);\n    loader = new JsonLoader();\n    loader.load(req, rsp, new ContentStreamBase.StringStream(json), p);\n\n    assertEquals( 1, p.addCommands.size() );\n    assertEquals(\"y\",  p.addCommands.get(0).solrDoc.getFieldValue(\"a.x\"));\n    List<SolrInputDocument> children = p.addCommands.get(0).solrDoc.getChildDocuments();\n    assertEquals(2, children.size());\n    SolrInputDocument d = children.get(0);\n    assertEquals(d.getFieldValue(\"c\"), \"c1\");\n    assertEquals(d.getFieldValue(\"e\"), \"e1\");\n    d = children.get(1);\n    assertEquals(d.getFieldValue(\"c\"), \"c2\");\n    assertEquals(d.getFieldValue(\"e\"), \"e2\");\n    assertEquals(d.getFieldValue(\"d.p\"), \"q\");\n  }\n\n","sourceOld":"  public void testJsonDocFormat() throws Exception{\n    String doc = \"\\n\" +\n        \"\\n\" +\n        \"{\\\"bool\\\": true,\\n\" +\n        \" \\\"f0\\\": \\\"v0\\\",\\n\" +\n        \" \\\"f2\\\": {\\n\" +\n        \"    \\t  \\\"boost\\\": 2.3,\\n\" +\n        \"    \\t  \\\"value\\\": \\\"test\\\"\\n\" +\n        \"    \\t   },\\n\" +\n        \"\\\"array\\\": [ \\\"aaa\\\", \\\"bbb\\\" ],\\n\" +\n        \"\\\"boosted\\\": {\\n\" +\n        \"    \\t      \\\"boost\\\": 6.7,\\n\" +\n        \"    \\t      \\\"value\\\": [ \\\"aaa\\\", \\\"bbb\\\" ]\\n\" +\n        \"    \\t    }\\n\" +\n        \" }\\n\" +\n        \"\\n\" +\n        \"\\n\" +\n        \" {\\\"f1\\\": \\\"v1\\\",\\n\" +\n        \"  \\\"f1\\\": \\\"v2\\\",\\n\" +\n        \"   \\\"f2\\\": null\\n\" +\n        \"  }\\n\";\n    SolrQueryRequest req = req(\"srcField\",\"_src_\");\n    req.getContext().put(\"path\",\"/update/json/docs\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    BufferingRequestProcessor p = new BufferingRequestProcessor(null);\n    JsonLoader loader = new JsonLoader();\n    loader.load(req, rsp, new ContentStreamBase.StringStream(doc), p);\n    assertEquals( 2, p.addCommands.size() );\n     doc = \"\\n\" +\n        \"\\n\" +\n        \"{\\\"bool\\\": true,\\n\" +\n        \" \\\"f0\\\": \\\"v0\\\",\\n\" +\n        \" \\\"f2\\\": {\\n\" +\n        \"    \\t  \\\"boost\\\": 2.3,\\n\" +\n        \"    \\t  \\\"value\\\": \\\"test\\\"\\n\" +\n        \"    \\t   },\\n\" +\n        \"\\\"array\\\": [ \\\"aaa\\\", \\\"bbb\\\" ],\\n\" +\n        \"\\\"boosted\\\": {\\n\" +\n        \"    \\t      \\\"boost\\\": 6.7,\\n\" +\n        \"    \\t      \\\"value\\\": [ \\\"aaa\\\", \\\"bbb\\\" ]\\n\" +\n        \"    \\t    }\\n\" +\n        \" }\\n\" +\n        \"\\n\" +\n        \"\\n\" +\n        \" {\\\"f1\\\": \\\"v1\\\",\\n\" +\n        \"  \\\"f2\\\": \\\"v2\\\",\\n\" +\n        \"   \\\"f3\\\": null\\n\" +\n        \"  }\\n\";\n    req = req(\"srcField\",\"_src_\");\n    req.getContext().put(\"path\",\"/update/json/docs\");\n    rsp = new SolrQueryResponse();\n    p = new BufferingRequestProcessor(null);\n    loader = new JsonLoader();\n    loader.load(req, rsp, new ContentStreamBase.StringStream(doc), p);\n\n    assertEquals( 2, p.addCommands.size() );\n\n    String content = (String) p.addCommands.get(0).solrDoc.getFieldValue(\"_src_\");\n    assertNotNull(content);\n    Map obj = (Map) ObjectBuilder.fromJSON(content);\n    assertEquals(Boolean.TRUE, obj.get(\"bool\"));\n    assertEquals(\"v0\", obj.get(\"f0\"));\n    assertNotNull(obj.get(\"f0\"));\n    assertNotNull(obj.get(\"array\"));\n    assertNotNull(obj.get(\"boosted\"));\n\n    content = (String) p.addCommands.get(1).solrDoc.getFieldValue(\"_src_\");\n    assertNotNull(content);\n    obj = (Map) ObjectBuilder.fromJSON(content);\n    assertEquals(\"v1\", obj.get(\"f1\"));\n    assertEquals(\"v2\", obj.get(\"f2\"));\n    assertTrue(obj.containsKey(\"f3\"));\n\n    doc = \"[{'id':'1'},{'id':'2'}]\".replace('\\'', '\"');\n    req = req(\"srcField\",\"_src_\");\n    req.getContext().put(\"path\",\"/update/json/docs\");\n    rsp = new SolrQueryResponse();\n    p = new BufferingRequestProcessor(null);\n    loader = new JsonLoader();\n    loader.load(req, rsp, new ContentStreamBase.StringStream(doc), p);\n    assertEquals( 2, p.addCommands.size() );\n\n    content = (String) p.addCommands.get(0).solrDoc.getFieldValue(\"_src_\");\n    assertNotNull(content);\n    obj = (Map) ObjectBuilder.fromJSON(content);\n    assertEquals(\"1\", obj.get(\"id\"));\n    content = (String) p.addCommands.get(1).solrDoc.getFieldValue(\"_src_\");\n    assertNotNull(content);\n    obj = (Map) ObjectBuilder.fromJSON(content);\n    assertEquals(\"2\", obj.get(\"id\"));\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d8d9512babbd72795eb013cdd392dad2e2b2313e","date":1465331500,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/JsonLoaderTest#testJsonDocFormat().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/JsonLoaderTest#testJsonDocFormat().mjava","sourceNew":"  public void testJsonDocFormat() throws Exception{\n    String doc = \"\\n\" +\n        \"\\n\" +\n        \"{\\\"bool\\\": true,\\n\" +\n        \" \\\"f0\\\": \\\"v0\\\",\\n\" +\n        \" \\\"f2\\\": {\\n\" +\n        \"    \\t  \\\"boost\\\": 2.3,\\n\" +\n        \"    \\t  \\\"value\\\": \\\"test\\\"\\n\" +\n        \"    \\t   },\\n\" +\n        \"\\\"array\\\": [ \\\"aaa\\\", \\\"bbb\\\" ],\\n\" +\n        \"\\\"boosted\\\": {\\n\" +\n        \"    \\t      \\\"boost\\\": 6.7,\\n\" +\n        \"    \\t      \\\"value\\\": [ \\\"aaa\\\", \\\"bbb\\\" ]\\n\" +\n        \"    \\t    }\\n\" +\n        \" }\\n\" +\n        \"\\n\" +\n        \"\\n\" +\n        \" {\\\"f1\\\": \\\"v1\\\",\\n\" +\n        \"  \\\"f1\\\": \\\"v2\\\",\\n\" +\n        \"   \\\"f2\\\": null\\n\" +\n        \"  }\\n\";\n    SolrQueryRequest req = req(\"srcField\",\"_src_\");\n    req.getContext().put(\"path\",\"/update/json/docs\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    BufferingRequestProcessor p = new BufferingRequestProcessor(null);\n    JsonLoader loader = new JsonLoader();\n    loader.load(req, rsp, new ContentStreamBase.StringStream(doc), p);\n    assertEquals( 2, p.addCommands.size() );\n     doc = \"\\n\" +\n        \"\\n\" +\n        \"{\\\"bool\\\": true,\\n\" +\n        \" \\\"f0\\\": \\\"v0\\\",\\n\" +\n        \" \\\"f2\\\": {\\n\" +\n        \"    \\t  \\\"boost\\\": 2.3,\\n\" +\n        \"    \\t  \\\"value\\\": \\\"test\\\"\\n\" +\n        \"    \\t   },\\n\" +\n        \"\\\"array\\\": [ \\\"aaa\\\", \\\"bbb\\\" ],\\n\" +\n        \"\\\"boosted\\\": {\\n\" +\n        \"    \\t      \\\"boost\\\": 6.7,\\n\" +\n        \"    \\t      \\\"value\\\": [ \\\"aaa\\\", \\\"bbb\\\" ]\\n\" +\n        \"    \\t    }\\n\" +\n        \" }\\n\" +\n        \"\\n\" +\n        \"\\n\" +\n        \" {\\\"f1\\\": \\\"v1\\\",\\n\" +\n        \"  \\\"f2\\\": \\\"v2\\\",\\n\" +\n        \"   \\\"f3\\\": null\\n\" +\n        \"  }\\n\";\n    req = req(\"srcField\",\"_src_\");\n    req.getContext().put(\"path\",\"/update/json/docs\");\n    rsp = new SolrQueryResponse();\n    p = new BufferingRequestProcessor(null);\n    loader = new JsonLoader();\n    loader.load(req, rsp, new ContentStreamBase.StringStream(doc), p);\n\n    assertEquals( 2, p.addCommands.size() );\n\n    String content = (String) p.addCommands.get(0).solrDoc.getFieldValue(\"_src_\");\n    assertNotNull(content);\n    Map obj = (Map) ObjectBuilder.fromJSON(content);\n    assertEquals(Boolean.TRUE, obj.get(\"bool\"));\n    assertEquals(\"v0\", obj.get(\"f0\"));\n    assertNotNull(obj.get(\"f0\"));\n    assertNotNull(obj.get(\"array\"));\n    assertNotNull(obj.get(\"boosted\"));\n\n    content = (String) p.addCommands.get(1).solrDoc.getFieldValue(\"_src_\");\n    assertNotNull(content);\n    obj = (Map) ObjectBuilder.fromJSON(content);\n    assertEquals(\"v1\", obj.get(\"f1\"));\n    assertEquals(\"v2\", obj.get(\"f2\"));\n    assertTrue(obj.containsKey(\"f3\"));\n\n    doc = \"[{'id':'1'},{'id':'2'}]\".replace('\\'', '\"');\n    req = req(\"srcField\",\"_src_\");\n    req.getContext().put(\"path\",\"/update/json/docs\");\n    rsp = new SolrQueryResponse();\n    p = new BufferingRequestProcessor(null);\n    loader = new JsonLoader();\n    loader.load(req, rsp, new ContentStreamBase.StringStream(doc), p);\n    assertEquals( 2, p.addCommands.size() );\n\n    content = (String) p.addCommands.get(0).solrDoc.getFieldValue(\"_src_\");\n    assertNotNull(content);\n    obj = (Map) ObjectBuilder.fromJSON(content);\n    assertEquals(\"1\", obj.get(\"id\"));\n    content = (String) p.addCommands.get(1).solrDoc.getFieldValue(\"_src_\");\n    assertNotNull(content);\n    obj = (Map) ObjectBuilder.fromJSON(content);\n    assertEquals(\"2\", obj.get(\"id\"));\n\n    String json = \"{a:{\" +\n        \"b:[{c:c1, e:e1},{c:c2, e :e2, d:{p:q}}],\" +\n        \"x:y\" +\n        \"}}\";\n    req = req(\"split\", \"/|/a/b\"   );\n    req.getContext().put(\"path\",\"/update/json/docs\");\n    rsp = new SolrQueryResponse();\n    p = new BufferingRequestProcessor(null);\n    loader = new JsonLoader();\n    loader.load(req, rsp, new ContentStreamBase.StringStream(json), p);\n\n    assertEquals( 1, p.addCommands.size() );\n    assertEquals(\"y\",  p.addCommands.get(0).solrDoc.getFieldValue(\"a.x\"));\n    List<SolrInputDocument> children = p.addCommands.get(0).solrDoc.getChildDocuments();\n    assertEquals(2, children.size());\n    SolrInputDocument d = children.get(0);\n    assertEquals(d.getFieldValue(\"c\"), \"c1\");\n    assertEquals(d.getFieldValue(\"e\"), \"e1\");\n    d = children.get(1);\n    assertEquals(d.getFieldValue(\"c\"), \"c2\");\n    assertEquals(d.getFieldValue(\"e\"), \"e2\");\n    assertEquals(d.getFieldValue(\"d.p\"), \"q\");\n  }\n\n","sourceOld":"  public void testJsonDocFormat() throws Exception{\n    String doc = \"\\n\" +\n        \"\\n\" +\n        \"{\\\"bool\\\": true,\\n\" +\n        \" \\\"f0\\\": \\\"v0\\\",\\n\" +\n        \" \\\"f2\\\": {\\n\" +\n        \"    \\t  \\\"boost\\\": 2.3,\\n\" +\n        \"    \\t  \\\"value\\\": \\\"test\\\"\\n\" +\n        \"    \\t   },\\n\" +\n        \"\\\"array\\\": [ \\\"aaa\\\", \\\"bbb\\\" ],\\n\" +\n        \"\\\"boosted\\\": {\\n\" +\n        \"    \\t      \\\"boost\\\": 6.7,\\n\" +\n        \"    \\t      \\\"value\\\": [ \\\"aaa\\\", \\\"bbb\\\" ]\\n\" +\n        \"    \\t    }\\n\" +\n        \" }\\n\" +\n        \"\\n\" +\n        \"\\n\" +\n        \" {\\\"f1\\\": \\\"v1\\\",\\n\" +\n        \"  \\\"f1\\\": \\\"v2\\\",\\n\" +\n        \"   \\\"f2\\\": null\\n\" +\n        \"  }\\n\";\n    SolrQueryRequest req = req(\"srcField\",\"_src_\");\n    req.getContext().put(\"path\",\"/update/json/docs\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    BufferingRequestProcessor p = new BufferingRequestProcessor(null);\n    JsonLoader loader = new JsonLoader();\n    loader.load(req, rsp, new ContentStreamBase.StringStream(doc), p);\n    assertEquals( 2, p.addCommands.size() );\n     doc = \"\\n\" +\n        \"\\n\" +\n        \"{\\\"bool\\\": true,\\n\" +\n        \" \\\"f0\\\": \\\"v0\\\",\\n\" +\n        \" \\\"f2\\\": {\\n\" +\n        \"    \\t  \\\"boost\\\": 2.3,\\n\" +\n        \"    \\t  \\\"value\\\": \\\"test\\\"\\n\" +\n        \"    \\t   },\\n\" +\n        \"\\\"array\\\": [ \\\"aaa\\\", \\\"bbb\\\" ],\\n\" +\n        \"\\\"boosted\\\": {\\n\" +\n        \"    \\t      \\\"boost\\\": 6.7,\\n\" +\n        \"    \\t      \\\"value\\\": [ \\\"aaa\\\", \\\"bbb\\\" ]\\n\" +\n        \"    \\t    }\\n\" +\n        \" }\\n\" +\n        \"\\n\" +\n        \"\\n\" +\n        \" {\\\"f1\\\": \\\"v1\\\",\\n\" +\n        \"  \\\"f2\\\": \\\"v2\\\",\\n\" +\n        \"   \\\"f3\\\": null\\n\" +\n        \"  }\\n\";\n    req = req(\"srcField\",\"_src_\");\n    req.getContext().put(\"path\",\"/update/json/docs\");\n    rsp = new SolrQueryResponse();\n    p = new BufferingRequestProcessor(null);\n    loader = new JsonLoader();\n    loader.load(req, rsp, new ContentStreamBase.StringStream(doc), p);\n\n    assertEquals( 2, p.addCommands.size() );\n\n    String content = (String) p.addCommands.get(0).solrDoc.getFieldValue(\"_src_\");\n    assertNotNull(content);\n    Map obj = (Map) ObjectBuilder.fromJSON(content);\n    assertEquals(Boolean.TRUE, obj.get(\"bool\"));\n    assertEquals(\"v0\", obj.get(\"f0\"));\n    assertNotNull(obj.get(\"f0\"));\n    assertNotNull(obj.get(\"array\"));\n    assertNotNull(obj.get(\"boosted\"));\n\n    content = (String) p.addCommands.get(1).solrDoc.getFieldValue(\"_src_\");\n    assertNotNull(content);\n    obj = (Map) ObjectBuilder.fromJSON(content);\n    assertEquals(\"v1\", obj.get(\"f1\"));\n    assertEquals(\"v2\", obj.get(\"f2\"));\n    assertTrue(obj.containsKey(\"f3\"));\n\n    doc = \"[{'id':'1'},{'id':'2'}]\".replace('\\'', '\"');\n    req = req(\"srcField\",\"_src_\");\n    req.getContext().put(\"path\",\"/update/json/docs\");\n    rsp = new SolrQueryResponse();\n    p = new BufferingRequestProcessor(null);\n    loader = new JsonLoader();\n    loader.load(req, rsp, new ContentStreamBase.StringStream(doc), p);\n    assertEquals( 2, p.addCommands.size() );\n\n    content = (String) p.addCommands.get(0).solrDoc.getFieldValue(\"_src_\");\n    assertNotNull(content);\n    obj = (Map) ObjectBuilder.fromJSON(content);\n    assertEquals(\"1\", obj.get(\"id\"));\n    content = (String) p.addCommands.get(1).solrDoc.getFieldValue(\"_src_\");\n    assertNotNull(content);\n    obj = (Map) ObjectBuilder.fromJSON(content);\n    assertEquals(\"2\", obj.get(\"id\"));\n\n    String json = \"{a:{\" +\n        \"b:[{c:c1, e:e1},{c:c2, e :e2, d:{p:q}}],\" +\n        \"x:y\" +\n        \"}}\";\n    req = req(\"split\", \"/\", \"child.split\" , \"/a/b\"   );\n    req.getContext().put(\"path\",\"/update/json/docs\");\n    rsp = new SolrQueryResponse();\n    p = new BufferingRequestProcessor(null);\n    loader = new JsonLoader();\n    loader.load(req, rsp, new ContentStreamBase.StringStream(json), p);\n\n    assertEquals( 1, p.addCommands.size() );\n    assertEquals(\"y\",  p.addCommands.get(0).solrDoc.getFieldValue(\"a.x\"));\n    List<SolrInputDocument> children = p.addCommands.get(0).solrDoc.getChildDocuments();\n    assertEquals(2, children.size());\n    SolrInputDocument d = children.get(0);\n    assertEquals(d.getFieldValue(\"c\"), \"c1\");\n    assertEquals(d.getFieldValue(\"e\"), \"e1\");\n    d = children.get(1);\n    assertEquals(d.getFieldValue(\"c\"), \"c2\");\n    assertEquals(d.getFieldValue(\"e\"), \"e2\");\n    assertEquals(d.getFieldValue(\"d.p\"), \"q\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9dbf1742cf31777011ef976c17df1c8507c3de9f","date":1465452246,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/JsonLoaderTest#testJsonDocFormat().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/JsonLoaderTest#testJsonDocFormat().mjava","sourceNew":"  public void testJsonDocFormat() throws Exception{\n    String doc = \"\\n\" +\n        \"\\n\" +\n        \"{\\\"bool\\\": true,\\n\" +\n        \" \\\"f0\\\": \\\"v0\\\",\\n\" +\n        \" \\\"f2\\\": {\\n\" +\n        \"    \\t  \\\"boost\\\": 2.3,\\n\" +\n        \"    \\t  \\\"value\\\": \\\"test\\\"\\n\" +\n        \"    \\t   },\\n\" +\n        \"\\\"array\\\": [ \\\"aaa\\\", \\\"bbb\\\" ],\\n\" +\n        \"\\\"boosted\\\": {\\n\" +\n        \"    \\t      \\\"boost\\\": 6.7,\\n\" +\n        \"    \\t      \\\"value\\\": [ \\\"aaa\\\", \\\"bbb\\\" ]\\n\" +\n        \"    \\t    }\\n\" +\n        \" }\\n\" +\n        \"\\n\" +\n        \"\\n\" +\n        \" {\\\"f1\\\": \\\"v1\\\",\\n\" +\n        \"  \\\"f1\\\": \\\"v2\\\",\\n\" +\n        \"   \\\"f2\\\": null\\n\" +\n        \"  }\\n\";\n    SolrQueryRequest req = req(\"srcField\",\"_src_\");\n    req.getContext().put(\"path\",\"/update/json/docs\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    BufferingRequestProcessor p = new BufferingRequestProcessor(null);\n    JsonLoader loader = new JsonLoader();\n    loader.load(req, rsp, new ContentStreamBase.StringStream(doc), p);\n    assertEquals( 2, p.addCommands.size() );\n     doc = \"\\n\" +\n        \"\\n\" +\n        \"{\\\"bool\\\": true,\\n\" +\n        \" \\\"f0\\\": \\\"v0\\\",\\n\" +\n        \" \\\"f2\\\": {\\n\" +\n        \"    \\t  \\\"boost\\\": 2.3,\\n\" +\n        \"    \\t  \\\"value\\\": \\\"test\\\"\\n\" +\n        \"    \\t   },\\n\" +\n        \"\\\"array\\\": [ \\\"aaa\\\", \\\"bbb\\\" ],\\n\" +\n        \"\\\"boosted\\\": {\\n\" +\n        \"    \\t      \\\"boost\\\": 6.7,\\n\" +\n        \"    \\t      \\\"value\\\": [ \\\"aaa\\\", \\\"bbb\\\" ]\\n\" +\n        \"    \\t    }\\n\" +\n        \" }\\n\" +\n        \"\\n\" +\n        \"\\n\" +\n        \" {\\\"f1\\\": \\\"v1\\\",\\n\" +\n        \"  \\\"f2\\\": \\\"v2\\\",\\n\" +\n        \"   \\\"f3\\\": null\\n\" +\n        \"  }\\n\";\n    req = req(\"srcField\",\"_src_\");\n    req.getContext().put(\"path\",\"/update/json/docs\");\n    rsp = new SolrQueryResponse();\n    p = new BufferingRequestProcessor(null);\n    loader = new JsonLoader();\n    loader.load(req, rsp, new ContentStreamBase.StringStream(doc), p);\n\n    assertEquals( 2, p.addCommands.size() );\n\n    String content = (String) p.addCommands.get(0).solrDoc.getFieldValue(\"_src_\");\n    assertNotNull(content);\n    Map obj = (Map) ObjectBuilder.fromJSON(content);\n    assertEquals(Boolean.TRUE, obj.get(\"bool\"));\n    assertEquals(\"v0\", obj.get(\"f0\"));\n    assertNotNull(obj.get(\"f0\"));\n    assertNotNull(obj.get(\"array\"));\n    assertNotNull(obj.get(\"boosted\"));\n\n    content = (String) p.addCommands.get(1).solrDoc.getFieldValue(\"_src_\");\n    assertNotNull(content);\n    obj = (Map) ObjectBuilder.fromJSON(content);\n    assertEquals(\"v1\", obj.get(\"f1\"));\n    assertEquals(\"v2\", obj.get(\"f2\"));\n    assertTrue(obj.containsKey(\"f3\"));\n\n    doc = \"[{'id':'1'},{'id':'2'}]\".replace('\\'', '\"');\n    req = req(\"srcField\",\"_src_\");\n    req.getContext().put(\"path\",\"/update/json/docs\");\n    rsp = new SolrQueryResponse();\n    p = new BufferingRequestProcessor(null);\n    loader = new JsonLoader();\n    loader.load(req, rsp, new ContentStreamBase.StringStream(doc), p);\n    assertEquals( 2, p.addCommands.size() );\n\n    content = (String) p.addCommands.get(0).solrDoc.getFieldValue(\"_src_\");\n    assertNotNull(content);\n    obj = (Map) ObjectBuilder.fromJSON(content);\n    assertEquals(\"1\", obj.get(\"id\"));\n    content = (String) p.addCommands.get(1).solrDoc.getFieldValue(\"_src_\");\n    assertNotNull(content);\n    obj = (Map) ObjectBuilder.fromJSON(content);\n    assertEquals(\"2\", obj.get(\"id\"));\n\n    String json = \"{a:{\" +\n        \"b:[{c:c1, e:e1},{c:c2, e :e2, d:{p:q}}],\" +\n        \"x:y\" +\n        \"}}\";\n    req = req(\"split\", \"/|/a/b\"   );\n    req.getContext().put(\"path\",\"/update/json/docs\");\n    rsp = new SolrQueryResponse();\n    p = new BufferingRequestProcessor(null);\n    loader = new JsonLoader();\n    loader.load(req, rsp, new ContentStreamBase.StringStream(json), p);\n\n    assertEquals( 1, p.addCommands.size() );\n    assertEquals(\"y\",  p.addCommands.get(0).solrDoc.getFieldValue(\"a.x\"));\n    List<SolrInputDocument> children = p.addCommands.get(0).solrDoc.getChildDocuments();\n    assertEquals(2, children.size());\n    SolrInputDocument d = children.get(0);\n    assertEquals(d.getFieldValue(\"c\"), \"c1\");\n    assertEquals(d.getFieldValue(\"e\"), \"e1\");\n    d = children.get(1);\n    assertEquals(d.getFieldValue(\"c\"), \"c2\");\n    assertEquals(d.getFieldValue(\"e\"), \"e2\");\n    assertEquals(d.getFieldValue(\"d.p\"), \"q\");\n\n    json = \"{\\n\" +\n        \"  \\\"id\\\": \\\"1\\\",\\n\" +\n        \"  \\\"name\\\": \\\"i am the parent\\\",\\n\" +\n        \"  \\\"cat\\\": \\\"parent\\\",\\n\" +\n        \"  \\\"children\\\": [\\n\" +\n        \"    {\\n\" +\n        \"      \\\"id\\\": \\\"1.1\\\",\\n\" +\n        \"      \\\"name\\\": \\\"i am the 1st child\\\",\\n\" +\n        \"      \\\"cat\\\": \\\"child\\\"\\n\" +\n        \"    },\\n\" +\n        \"    {\\n\" +\n        \"      \\\"id\\\": \\\"1.2\\\",\\n\" +\n        \"      \\\"name\\\": \\\"i am the 2nd child\\\",\\n\" +\n        \"      \\\"cat\\\": \\\"child\\\",\\n\" +\n        \"      \\\"grandchildren\\\": [\\n\" +\n        \"        {\\n\" +\n        \"          \\\"id\\\": \\\"1.2.1\\\",\\n\" +\n        \"          \\\"name\\\": \\\"i am the grandchild\\\",\\n\" +\n        \"          \\\"cat\\\": \\\"grandchild\\\"\\n\" +\n        \"        }\\n\" +\n        \"      ]\\n\" +\n        \"    }\\n\" +\n        \"  ]\\n\" +\n        \"}\";\n    req = req(\n        \"split\", \"/|/children|/children/grandchildren\",\n        \"f\",\"$FQN:/**\",\n        \"f\", \"id:/children/id\",\n        \"f\", \"/name\",\n        \"f\", \"/children/name\",\n        \"f\", \"cat:/children/cat\",\n        \"f\", \"id:/children/grandchildren/id\",\n        \"f\", \"name:/children/grandchildren/name\",\n        \"f\", \"cat:/children/grandchildren/cat\");\n    req.getContext().put(\"path\", \"/update/json/docs\");\n    rsp = new SolrQueryResponse();\n    p = new BufferingRequestProcessor(null);\n    loader = new JsonLoader();\n    loader.load(req, rsp, new ContentStreamBase.StringStream(json), p);\n    assertEquals(2, p.addCommands.get(0).solrDoc.getChildDocuments().size());\n    assertEquals(1, p.addCommands.get(0).solrDoc.getChildDocuments().get(1).getChildDocuments().size());\n\n  }\n\n","sourceOld":"  public void testJsonDocFormat() throws Exception{\n    String doc = \"\\n\" +\n        \"\\n\" +\n        \"{\\\"bool\\\": true,\\n\" +\n        \" \\\"f0\\\": \\\"v0\\\",\\n\" +\n        \" \\\"f2\\\": {\\n\" +\n        \"    \\t  \\\"boost\\\": 2.3,\\n\" +\n        \"    \\t  \\\"value\\\": \\\"test\\\"\\n\" +\n        \"    \\t   },\\n\" +\n        \"\\\"array\\\": [ \\\"aaa\\\", \\\"bbb\\\" ],\\n\" +\n        \"\\\"boosted\\\": {\\n\" +\n        \"    \\t      \\\"boost\\\": 6.7,\\n\" +\n        \"    \\t      \\\"value\\\": [ \\\"aaa\\\", \\\"bbb\\\" ]\\n\" +\n        \"    \\t    }\\n\" +\n        \" }\\n\" +\n        \"\\n\" +\n        \"\\n\" +\n        \" {\\\"f1\\\": \\\"v1\\\",\\n\" +\n        \"  \\\"f1\\\": \\\"v2\\\",\\n\" +\n        \"   \\\"f2\\\": null\\n\" +\n        \"  }\\n\";\n    SolrQueryRequest req = req(\"srcField\",\"_src_\");\n    req.getContext().put(\"path\",\"/update/json/docs\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    BufferingRequestProcessor p = new BufferingRequestProcessor(null);\n    JsonLoader loader = new JsonLoader();\n    loader.load(req, rsp, new ContentStreamBase.StringStream(doc), p);\n    assertEquals( 2, p.addCommands.size() );\n     doc = \"\\n\" +\n        \"\\n\" +\n        \"{\\\"bool\\\": true,\\n\" +\n        \" \\\"f0\\\": \\\"v0\\\",\\n\" +\n        \" \\\"f2\\\": {\\n\" +\n        \"    \\t  \\\"boost\\\": 2.3,\\n\" +\n        \"    \\t  \\\"value\\\": \\\"test\\\"\\n\" +\n        \"    \\t   },\\n\" +\n        \"\\\"array\\\": [ \\\"aaa\\\", \\\"bbb\\\" ],\\n\" +\n        \"\\\"boosted\\\": {\\n\" +\n        \"    \\t      \\\"boost\\\": 6.7,\\n\" +\n        \"    \\t      \\\"value\\\": [ \\\"aaa\\\", \\\"bbb\\\" ]\\n\" +\n        \"    \\t    }\\n\" +\n        \" }\\n\" +\n        \"\\n\" +\n        \"\\n\" +\n        \" {\\\"f1\\\": \\\"v1\\\",\\n\" +\n        \"  \\\"f2\\\": \\\"v2\\\",\\n\" +\n        \"   \\\"f3\\\": null\\n\" +\n        \"  }\\n\";\n    req = req(\"srcField\",\"_src_\");\n    req.getContext().put(\"path\",\"/update/json/docs\");\n    rsp = new SolrQueryResponse();\n    p = new BufferingRequestProcessor(null);\n    loader = new JsonLoader();\n    loader.load(req, rsp, new ContentStreamBase.StringStream(doc), p);\n\n    assertEquals( 2, p.addCommands.size() );\n\n    String content = (String) p.addCommands.get(0).solrDoc.getFieldValue(\"_src_\");\n    assertNotNull(content);\n    Map obj = (Map) ObjectBuilder.fromJSON(content);\n    assertEquals(Boolean.TRUE, obj.get(\"bool\"));\n    assertEquals(\"v0\", obj.get(\"f0\"));\n    assertNotNull(obj.get(\"f0\"));\n    assertNotNull(obj.get(\"array\"));\n    assertNotNull(obj.get(\"boosted\"));\n\n    content = (String) p.addCommands.get(1).solrDoc.getFieldValue(\"_src_\");\n    assertNotNull(content);\n    obj = (Map) ObjectBuilder.fromJSON(content);\n    assertEquals(\"v1\", obj.get(\"f1\"));\n    assertEquals(\"v2\", obj.get(\"f2\"));\n    assertTrue(obj.containsKey(\"f3\"));\n\n    doc = \"[{'id':'1'},{'id':'2'}]\".replace('\\'', '\"');\n    req = req(\"srcField\",\"_src_\");\n    req.getContext().put(\"path\",\"/update/json/docs\");\n    rsp = new SolrQueryResponse();\n    p = new BufferingRequestProcessor(null);\n    loader = new JsonLoader();\n    loader.load(req, rsp, new ContentStreamBase.StringStream(doc), p);\n    assertEquals( 2, p.addCommands.size() );\n\n    content = (String) p.addCommands.get(0).solrDoc.getFieldValue(\"_src_\");\n    assertNotNull(content);\n    obj = (Map) ObjectBuilder.fromJSON(content);\n    assertEquals(\"1\", obj.get(\"id\"));\n    content = (String) p.addCommands.get(1).solrDoc.getFieldValue(\"_src_\");\n    assertNotNull(content);\n    obj = (Map) ObjectBuilder.fromJSON(content);\n    assertEquals(\"2\", obj.get(\"id\"));\n\n    String json = \"{a:{\" +\n        \"b:[{c:c1, e:e1},{c:c2, e :e2, d:{p:q}}],\" +\n        \"x:y\" +\n        \"}}\";\n    req = req(\"split\", \"/|/a/b\"   );\n    req.getContext().put(\"path\",\"/update/json/docs\");\n    rsp = new SolrQueryResponse();\n    p = new BufferingRequestProcessor(null);\n    loader = new JsonLoader();\n    loader.load(req, rsp, new ContentStreamBase.StringStream(json), p);\n\n    assertEquals( 1, p.addCommands.size() );\n    assertEquals(\"y\",  p.addCommands.get(0).solrDoc.getFieldValue(\"a.x\"));\n    List<SolrInputDocument> children = p.addCommands.get(0).solrDoc.getChildDocuments();\n    assertEquals(2, children.size());\n    SolrInputDocument d = children.get(0);\n    assertEquals(d.getFieldValue(\"c\"), \"c1\");\n    assertEquals(d.getFieldValue(\"e\"), \"e1\");\n    d = children.get(1);\n    assertEquals(d.getFieldValue(\"c\"), \"c2\");\n    assertEquals(d.getFieldValue(\"e\"), \"e2\");\n    assertEquals(d.getFieldValue(\"d.p\"), \"q\");\n  }\n\n","bugFix":null,"bugIntro":["8ca2a5b85f19f987ca3b1a0aafd41ab4b9e7bfd8"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/JsonLoaderTest#testJsonDocFormat().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/JsonLoaderTest#testJsonDocFormat().mjava","sourceNew":"  public void testJsonDocFormat() throws Exception{\n    String doc = \"\\n\" +\n        \"\\n\" +\n        \"{\\\"bool\\\": true,\\n\" +\n        \" \\\"f0\\\": \\\"v0\\\",\\n\" +\n        \" \\\"f2\\\": {\\n\" +\n        \"    \\t  \\\"boost\\\": 2.3,\\n\" +\n        \"    \\t  \\\"value\\\": \\\"test\\\"\\n\" +\n        \"    \\t   },\\n\" +\n        \"\\\"array\\\": [ \\\"aaa\\\", \\\"bbb\\\" ],\\n\" +\n        \"\\\"boosted\\\": {\\n\" +\n        \"    \\t      \\\"boost\\\": 6.7,\\n\" +\n        \"    \\t      \\\"value\\\": [ \\\"aaa\\\", \\\"bbb\\\" ]\\n\" +\n        \"    \\t    }\\n\" +\n        \" }\\n\" +\n        \"\\n\" +\n        \"\\n\" +\n        \" {\\\"f1\\\": \\\"v1\\\",\\n\" +\n        \"  \\\"f1\\\": \\\"v2\\\",\\n\" +\n        \"   \\\"f2\\\": null\\n\" +\n        \"  }\\n\";\n    SolrQueryRequest req = req(\"srcField\",\"_src_\");\n    req.getContext().put(\"path\",\"/update/json/docs\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    BufferingRequestProcessor p = new BufferingRequestProcessor(null);\n    JsonLoader loader = new JsonLoader();\n    loader.load(req, rsp, new ContentStreamBase.StringStream(doc), p);\n    assertEquals( 2, p.addCommands.size() );\n     doc = \"\\n\" +\n        \"\\n\" +\n        \"{\\\"bool\\\": true,\\n\" +\n        \" \\\"f0\\\": \\\"v0\\\",\\n\" +\n        \" \\\"f2\\\": {\\n\" +\n        \"    \\t  \\\"boost\\\": 2.3,\\n\" +\n        \"    \\t  \\\"value\\\": \\\"test\\\"\\n\" +\n        \"    \\t   },\\n\" +\n        \"\\\"array\\\": [ \\\"aaa\\\", \\\"bbb\\\" ],\\n\" +\n        \"\\\"boosted\\\": {\\n\" +\n        \"    \\t      \\\"boost\\\": 6.7,\\n\" +\n        \"    \\t      \\\"value\\\": [ \\\"aaa\\\", \\\"bbb\\\" ]\\n\" +\n        \"    \\t    }\\n\" +\n        \" }\\n\" +\n        \"\\n\" +\n        \"\\n\" +\n        \" {\\\"f1\\\": \\\"v1\\\",\\n\" +\n        \"  \\\"f2\\\": \\\"v2\\\",\\n\" +\n        \"   \\\"f3\\\": null\\n\" +\n        \"  }\\n\";\n    req = req(\"srcField\",\"_src_\");\n    req.getContext().put(\"path\",\"/update/json/docs\");\n    rsp = new SolrQueryResponse();\n    p = new BufferingRequestProcessor(null);\n    loader = new JsonLoader();\n    loader.load(req, rsp, new ContentStreamBase.StringStream(doc), p);\n\n    assertEquals( 2, p.addCommands.size() );\n\n    String content = (String) p.addCommands.get(0).solrDoc.getFieldValue(\"_src_\");\n    assertNotNull(content);\n    Map obj = (Map) ObjectBuilder.fromJSON(content);\n    assertEquals(Boolean.TRUE, obj.get(\"bool\"));\n    assertEquals(\"v0\", obj.get(\"f0\"));\n    assertNotNull(obj.get(\"f0\"));\n    assertNotNull(obj.get(\"array\"));\n    assertNotNull(obj.get(\"boosted\"));\n\n    content = (String) p.addCommands.get(1).solrDoc.getFieldValue(\"_src_\");\n    assertNotNull(content);\n    obj = (Map) ObjectBuilder.fromJSON(content);\n    assertEquals(\"v1\", obj.get(\"f1\"));\n    assertEquals(\"v2\", obj.get(\"f2\"));\n    assertTrue(obj.containsKey(\"f3\"));\n\n    doc = \"[{'id':'1'},{'id':'2'}]\".replace('\\'', '\"');\n    req = req(\"srcField\",\"_src_\");\n    req.getContext().put(\"path\",\"/update/json/docs\");\n    rsp = new SolrQueryResponse();\n    p = new BufferingRequestProcessor(null);\n    loader = new JsonLoader();\n    loader.load(req, rsp, new ContentStreamBase.StringStream(doc), p);\n    assertEquals( 2, p.addCommands.size() );\n\n    content = (String) p.addCommands.get(0).solrDoc.getFieldValue(\"_src_\");\n    assertNotNull(content);\n    obj = (Map) ObjectBuilder.fromJSON(content);\n    assertEquals(\"1\", obj.get(\"id\"));\n    content = (String) p.addCommands.get(1).solrDoc.getFieldValue(\"_src_\");\n    assertNotNull(content);\n    obj = (Map) ObjectBuilder.fromJSON(content);\n    assertEquals(\"2\", obj.get(\"id\"));\n\n    String json = \"{a:{\" +\n        \"b:[{c:c1, e:e1},{c:c2, e :e2, d:{p:q}}],\" +\n        \"x:y\" +\n        \"}}\";\n    req = req(\"split\", \"/|/a/b\"   );\n    req.getContext().put(\"path\",\"/update/json/docs\");\n    rsp = new SolrQueryResponse();\n    p = new BufferingRequestProcessor(null);\n    loader = new JsonLoader();\n    loader.load(req, rsp, new ContentStreamBase.StringStream(json), p);\n\n    assertEquals( 1, p.addCommands.size() );\n    assertEquals(\"y\",  p.addCommands.get(0).solrDoc.getFieldValue(\"a.x\"));\n    List<SolrInputDocument> children = p.addCommands.get(0).solrDoc.getChildDocuments();\n    assertEquals(2, children.size());\n    SolrInputDocument d = children.get(0);\n    assertEquals(d.getFieldValue(\"c\"), \"c1\");\n    assertEquals(d.getFieldValue(\"e\"), \"e1\");\n    d = children.get(1);\n    assertEquals(d.getFieldValue(\"c\"), \"c2\");\n    assertEquals(d.getFieldValue(\"e\"), \"e2\");\n    assertEquals(d.getFieldValue(\"d.p\"), \"q\");\n\n    json = \"{\\n\" +\n        \"  \\\"id\\\": \\\"1\\\",\\n\" +\n        \"  \\\"name\\\": \\\"i am the parent\\\",\\n\" +\n        \"  \\\"cat\\\": \\\"parent\\\",\\n\" +\n        \"  \\\"children\\\": [\\n\" +\n        \"    {\\n\" +\n        \"      \\\"id\\\": \\\"1.1\\\",\\n\" +\n        \"      \\\"name\\\": \\\"i am the 1st child\\\",\\n\" +\n        \"      \\\"cat\\\": \\\"child\\\"\\n\" +\n        \"    },\\n\" +\n        \"    {\\n\" +\n        \"      \\\"id\\\": \\\"1.2\\\",\\n\" +\n        \"      \\\"name\\\": \\\"i am the 2nd child\\\",\\n\" +\n        \"      \\\"cat\\\": \\\"child\\\",\\n\" +\n        \"      \\\"grandchildren\\\": [\\n\" +\n        \"        {\\n\" +\n        \"          \\\"id\\\": \\\"1.2.1\\\",\\n\" +\n        \"          \\\"name\\\": \\\"i am the grandchild\\\",\\n\" +\n        \"          \\\"cat\\\": \\\"grandchild\\\"\\n\" +\n        \"        }\\n\" +\n        \"      ]\\n\" +\n        \"    }\\n\" +\n        \"  ]\\n\" +\n        \"}\";\n    req = req(\n        \"split\", \"/|/children|/children/grandchildren\",\n        \"f\",\"$FQN:/**\",\n        \"f\", \"id:/children/id\",\n        \"f\", \"/name\",\n        \"f\", \"/children/name\",\n        \"f\", \"cat:/children/cat\",\n        \"f\", \"id:/children/grandchildren/id\",\n        \"f\", \"name:/children/grandchildren/name\",\n        \"f\", \"cat:/children/grandchildren/cat\");\n    req.getContext().put(\"path\", \"/update/json/docs\");\n    rsp = new SolrQueryResponse();\n    p = new BufferingRequestProcessor(null);\n    loader = new JsonLoader();\n    loader.load(req, rsp, new ContentStreamBase.StringStream(json), p);\n    assertEquals(2, p.addCommands.get(0).solrDoc.getChildDocuments().size());\n    assertEquals(1, p.addCommands.get(0).solrDoc.getChildDocuments().get(1).getChildDocuments().size());\n\n  }\n\n","sourceOld":"  public void testJsonDocFormat() throws Exception{\n    String doc = \"\\n\" +\n        \"\\n\" +\n        \"{\\\"bool\\\": true,\\n\" +\n        \" \\\"f0\\\": \\\"v0\\\",\\n\" +\n        \" \\\"f2\\\": {\\n\" +\n        \"    \\t  \\\"boost\\\": 2.3,\\n\" +\n        \"    \\t  \\\"value\\\": \\\"test\\\"\\n\" +\n        \"    \\t   },\\n\" +\n        \"\\\"array\\\": [ \\\"aaa\\\", \\\"bbb\\\" ],\\n\" +\n        \"\\\"boosted\\\": {\\n\" +\n        \"    \\t      \\\"boost\\\": 6.7,\\n\" +\n        \"    \\t      \\\"value\\\": [ \\\"aaa\\\", \\\"bbb\\\" ]\\n\" +\n        \"    \\t    }\\n\" +\n        \" }\\n\" +\n        \"\\n\" +\n        \"\\n\" +\n        \" {\\\"f1\\\": \\\"v1\\\",\\n\" +\n        \"  \\\"f1\\\": \\\"v2\\\",\\n\" +\n        \"   \\\"f2\\\": null\\n\" +\n        \"  }\\n\";\n    SolrQueryRequest req = req(\"srcField\",\"_src_\");\n    req.getContext().put(\"path\",\"/update/json/docs\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    BufferingRequestProcessor p = new BufferingRequestProcessor(null);\n    JsonLoader loader = new JsonLoader();\n    loader.load(req, rsp, new ContentStreamBase.StringStream(doc), p);\n    assertEquals( 2, p.addCommands.size() );\n     doc = \"\\n\" +\n        \"\\n\" +\n        \"{\\\"bool\\\": true,\\n\" +\n        \" \\\"f0\\\": \\\"v0\\\",\\n\" +\n        \" \\\"f2\\\": {\\n\" +\n        \"    \\t  \\\"boost\\\": 2.3,\\n\" +\n        \"    \\t  \\\"value\\\": \\\"test\\\"\\n\" +\n        \"    \\t   },\\n\" +\n        \"\\\"array\\\": [ \\\"aaa\\\", \\\"bbb\\\" ],\\n\" +\n        \"\\\"boosted\\\": {\\n\" +\n        \"    \\t      \\\"boost\\\": 6.7,\\n\" +\n        \"    \\t      \\\"value\\\": [ \\\"aaa\\\", \\\"bbb\\\" ]\\n\" +\n        \"    \\t    }\\n\" +\n        \" }\\n\" +\n        \"\\n\" +\n        \"\\n\" +\n        \" {\\\"f1\\\": \\\"v1\\\",\\n\" +\n        \"  \\\"f2\\\": \\\"v2\\\",\\n\" +\n        \"   \\\"f3\\\": null\\n\" +\n        \"  }\\n\";\n    req = req(\"srcField\",\"_src_\");\n    req.getContext().put(\"path\",\"/update/json/docs\");\n    rsp = new SolrQueryResponse();\n    p = new BufferingRequestProcessor(null);\n    loader = new JsonLoader();\n    loader.load(req, rsp, new ContentStreamBase.StringStream(doc), p);\n\n    assertEquals( 2, p.addCommands.size() );\n\n    String content = (String) p.addCommands.get(0).solrDoc.getFieldValue(\"_src_\");\n    assertNotNull(content);\n    Map obj = (Map) ObjectBuilder.fromJSON(content);\n    assertEquals(Boolean.TRUE, obj.get(\"bool\"));\n    assertEquals(\"v0\", obj.get(\"f0\"));\n    assertNotNull(obj.get(\"f0\"));\n    assertNotNull(obj.get(\"array\"));\n    assertNotNull(obj.get(\"boosted\"));\n\n    content = (String) p.addCommands.get(1).solrDoc.getFieldValue(\"_src_\");\n    assertNotNull(content);\n    obj = (Map) ObjectBuilder.fromJSON(content);\n    assertEquals(\"v1\", obj.get(\"f1\"));\n    assertEquals(\"v2\", obj.get(\"f2\"));\n    assertTrue(obj.containsKey(\"f3\"));\n\n    doc = \"[{'id':'1'},{'id':'2'}]\".replace('\\'', '\"');\n    req = req(\"srcField\",\"_src_\");\n    req.getContext().put(\"path\",\"/update/json/docs\");\n    rsp = new SolrQueryResponse();\n    p = new BufferingRequestProcessor(null);\n    loader = new JsonLoader();\n    loader.load(req, rsp, new ContentStreamBase.StringStream(doc), p);\n    assertEquals( 2, p.addCommands.size() );\n\n    content = (String) p.addCommands.get(0).solrDoc.getFieldValue(\"_src_\");\n    assertNotNull(content);\n    obj = (Map) ObjectBuilder.fromJSON(content);\n    assertEquals(\"1\", obj.get(\"id\"));\n    content = (String) p.addCommands.get(1).solrDoc.getFieldValue(\"_src_\");\n    assertNotNull(content);\n    obj = (Map) ObjectBuilder.fromJSON(content);\n    assertEquals(\"2\", obj.get(\"id\"));\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8ca2a5b85f19f987ca3b1a0aafd41ab4b9e7bfd8","date":1493287267,"type":3,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/JsonLoaderTest#testJsonDocFormat().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/JsonLoaderTest#testJsonDocFormat().mjava","sourceNew":"  public void testJsonDocFormat() throws Exception{\n    String doc = \"\\n\" +\n        \"\\n\" +\n        \"{\\\"bool\\\": true,\\n\" +\n        \" \\\"f0\\\": \\\"v0\\\",\\n\" +\n        \" \\\"f2\\\": {\\n\" +\n        \"    \\t  \\\"boost\\\": 2.3,\\n\" +\n        \"    \\t  \\\"value\\\": \\\"test\\\"\\n\" +\n        \"    \\t   },\\n\" +\n        \"\\\"array\\\": [ \\\"aaa\\\", \\\"bbb\\\" ],\\n\" +\n        \"\\\"boosted\\\": {\\n\" +\n        \"    \\t      \\\"boost\\\": 6.7,\\n\" +\n        \"    \\t      \\\"value\\\": [ \\\"aaa\\\", \\\"bbb\\\" ]\\n\" +\n        \"    \\t    }\\n\" +\n        \" }\\n\" +\n        \"\\n\" +\n        \"\\n\" +\n        \" {\\\"f1\\\": \\\"v1\\\",\\n\" +\n        \"  \\\"f1\\\": \\\"v2\\\",\\n\" +\n        \"   \\\"f2\\\": null\\n\" +\n        \"  }\\n\";\n    SolrQueryRequest req = req(\"srcField\",\"_src_\");\n    req.getContext().put(\"path\",\"/update/json/docs\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    BufferingRequestProcessor p = new BufferingRequestProcessor(null);\n    JsonLoader loader = new JsonLoader();\n    loader.load(req, rsp, new ContentStreamBase.StringStream(doc), p);\n    assertEquals( 2, p.addCommands.size() );\n     doc = \"\\n\" +\n        \"\\n\" +\n        \"{\\\"bool\\\": true,\\n\" +\n        \" \\\"f0\\\": \\\"v0\\\",\\n\" +\n        \" \\\"f2\\\": {\\n\" +\n        \"    \\t  \\\"boost\\\": 2.3,\\n\" +\n        \"    \\t  \\\"value\\\": \\\"test\\\"\\n\" +\n        \"    \\t   },\\n\" +\n        \"\\\"array\\\": [ \\\"aaa\\\", \\\"bbb\\\" ],\\n\" +\n        \"\\\"boosted\\\": {\\n\" +\n        \"    \\t      \\\"boost\\\": 6.7,\\n\" +\n        \"    \\t      \\\"value\\\": [ \\\"aaa\\\", \\\"bbb\\\" ]\\n\" +\n        \"    \\t    }\\n\" +\n        \" }\\n\" +\n        \"\\n\" +\n        \"\\n\" +\n        \" {\\\"f1\\\": \\\"v1\\\",\\n\" +\n        \"  \\\"f2\\\": \\\"v2\\\",\\n\" +\n        \"   \\\"f3\\\": null\\n\" +\n        \"  }\\n\";\n    req = req(\"srcField\",\"_src_\");\n    req.getContext().put(\"path\",\"/update/json/docs\");\n    rsp = new SolrQueryResponse();\n    p = new BufferingRequestProcessor(null);\n    loader = new JsonLoader();\n    loader.load(req, rsp, new ContentStreamBase.StringStream(doc), p);\n\n    assertEquals( 2, p.addCommands.size() );\n\n    String content = (String) p.addCommands.get(0).solrDoc.getFieldValue(\"_src_\");\n    assertNotNull(content);\n    Map obj = (Map) ObjectBuilder.fromJSON(content);\n    assertEquals(Boolean.TRUE, obj.get(\"bool\"));\n    assertEquals(\"v0\", obj.get(\"f0\"));\n    assertNotNull(obj.get(\"f0\"));\n    assertNotNull(obj.get(\"array\"));\n    assertNotNull(obj.get(\"boosted\"));\n\n    content = (String) p.addCommands.get(1).solrDoc.getFieldValue(\"_src_\");\n    assertNotNull(content);\n    obj = (Map) ObjectBuilder.fromJSON(content);\n    assertEquals(\"v1\", obj.get(\"f1\"));\n    assertEquals(\"v2\", obj.get(\"f2\"));\n    assertTrue(obj.containsKey(\"f3\"));\n\n    doc = \"[{'id':'1'},{'id':'2'}]\".replace('\\'', '\"');\n    req = req(\"srcField\",\"_src_\");\n    req.getContext().put(\"path\",\"/update/json/docs\");\n    rsp = new SolrQueryResponse();\n    p = new BufferingRequestProcessor(null);\n    loader = new JsonLoader();\n    loader.load(req, rsp, new ContentStreamBase.StringStream(doc), p);\n    assertEquals( 2, p.addCommands.size() );\n\n    content = (String) p.addCommands.get(0).solrDoc.getFieldValue(\"_src_\");\n    assertNotNull(content);\n    obj = (Map) ObjectBuilder.fromJSON(content);\n    assertEquals(\"1\", obj.get(\"id\"));\n    content = (String) p.addCommands.get(1).solrDoc.getFieldValue(\"_src_\");\n    assertNotNull(content);\n    obj = (Map) ObjectBuilder.fromJSON(content);\n    assertEquals(\"2\", obj.get(\"id\"));\n\n    String json = \"{a:{\" +\n        \"b:[{c:c1, e:e1},{c:c2, e :e2, d:{p:q}}],\" +\n        \"x:y\" +\n        \"}}\";\n    req = req(\"split\", \"/|/a/b\"   );\n    req.getContext().put(\"path\",\"/update/json/docs\");\n    rsp = new SolrQueryResponse();\n    p = new BufferingRequestProcessor(null);\n    loader = new JsonLoader();\n    loader.load(req, rsp, new ContentStreamBase.StringStream(json), p);\n\n    assertEquals( 1, p.addCommands.size() );\n    assertEquals(\"y\",  p.addCommands.get(0).solrDoc.getFieldValue(\"a.x\"));\n    List<SolrInputDocument> children = p.addCommands.get(0).solrDoc.getChildDocuments();\n    assertEquals(2, children.size());\n    SolrInputDocument d = children.get(0);\n    assertEquals(d.getFieldValue(\"c\"), \"c1\");\n    assertEquals(d.getFieldValue(\"e\"), \"e1\");\n    d = children.get(1);\n    assertEquals(d.getFieldValue(\"c\"), \"c2\");\n    assertEquals(d.getFieldValue(\"e\"), \"e2\");\n    assertEquals(d.getFieldValue(\"d.p\"), \"q\");\n\n    req = req(PARENT_TWO_CHILDREN_PARAMS);\n    req.getContext().put(\"path\", \"/update/json/docs\");\n    rsp = new SolrQueryResponse();\n    p = new BufferingRequestProcessor(null);\n    loader = new JsonLoader();\n    loader.load(req, rsp, new ContentStreamBase.StringStream(PARENT_TWO_CHILDREN_JSON), p);\n    assertEquals(2, p.addCommands.get(0).solrDoc.getChildDocuments().size());\n    assertEquals(1, p.addCommands.get(0).solrDoc.getChildDocuments().get(1).getChildDocuments().size());\n\n  }\n\n","sourceOld":"  public void testJsonDocFormat() throws Exception{\n    String doc = \"\\n\" +\n        \"\\n\" +\n        \"{\\\"bool\\\": true,\\n\" +\n        \" \\\"f0\\\": \\\"v0\\\",\\n\" +\n        \" \\\"f2\\\": {\\n\" +\n        \"    \\t  \\\"boost\\\": 2.3,\\n\" +\n        \"    \\t  \\\"value\\\": \\\"test\\\"\\n\" +\n        \"    \\t   },\\n\" +\n        \"\\\"array\\\": [ \\\"aaa\\\", \\\"bbb\\\" ],\\n\" +\n        \"\\\"boosted\\\": {\\n\" +\n        \"    \\t      \\\"boost\\\": 6.7,\\n\" +\n        \"    \\t      \\\"value\\\": [ \\\"aaa\\\", \\\"bbb\\\" ]\\n\" +\n        \"    \\t    }\\n\" +\n        \" }\\n\" +\n        \"\\n\" +\n        \"\\n\" +\n        \" {\\\"f1\\\": \\\"v1\\\",\\n\" +\n        \"  \\\"f1\\\": \\\"v2\\\",\\n\" +\n        \"   \\\"f2\\\": null\\n\" +\n        \"  }\\n\";\n    SolrQueryRequest req = req(\"srcField\",\"_src_\");\n    req.getContext().put(\"path\",\"/update/json/docs\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    BufferingRequestProcessor p = new BufferingRequestProcessor(null);\n    JsonLoader loader = new JsonLoader();\n    loader.load(req, rsp, new ContentStreamBase.StringStream(doc), p);\n    assertEquals( 2, p.addCommands.size() );\n     doc = \"\\n\" +\n        \"\\n\" +\n        \"{\\\"bool\\\": true,\\n\" +\n        \" \\\"f0\\\": \\\"v0\\\",\\n\" +\n        \" \\\"f2\\\": {\\n\" +\n        \"    \\t  \\\"boost\\\": 2.3,\\n\" +\n        \"    \\t  \\\"value\\\": \\\"test\\\"\\n\" +\n        \"    \\t   },\\n\" +\n        \"\\\"array\\\": [ \\\"aaa\\\", \\\"bbb\\\" ],\\n\" +\n        \"\\\"boosted\\\": {\\n\" +\n        \"    \\t      \\\"boost\\\": 6.7,\\n\" +\n        \"    \\t      \\\"value\\\": [ \\\"aaa\\\", \\\"bbb\\\" ]\\n\" +\n        \"    \\t    }\\n\" +\n        \" }\\n\" +\n        \"\\n\" +\n        \"\\n\" +\n        \" {\\\"f1\\\": \\\"v1\\\",\\n\" +\n        \"  \\\"f2\\\": \\\"v2\\\",\\n\" +\n        \"   \\\"f3\\\": null\\n\" +\n        \"  }\\n\";\n    req = req(\"srcField\",\"_src_\");\n    req.getContext().put(\"path\",\"/update/json/docs\");\n    rsp = new SolrQueryResponse();\n    p = new BufferingRequestProcessor(null);\n    loader = new JsonLoader();\n    loader.load(req, rsp, new ContentStreamBase.StringStream(doc), p);\n\n    assertEquals( 2, p.addCommands.size() );\n\n    String content = (String) p.addCommands.get(0).solrDoc.getFieldValue(\"_src_\");\n    assertNotNull(content);\n    Map obj = (Map) ObjectBuilder.fromJSON(content);\n    assertEquals(Boolean.TRUE, obj.get(\"bool\"));\n    assertEquals(\"v0\", obj.get(\"f0\"));\n    assertNotNull(obj.get(\"f0\"));\n    assertNotNull(obj.get(\"array\"));\n    assertNotNull(obj.get(\"boosted\"));\n\n    content = (String) p.addCommands.get(1).solrDoc.getFieldValue(\"_src_\");\n    assertNotNull(content);\n    obj = (Map) ObjectBuilder.fromJSON(content);\n    assertEquals(\"v1\", obj.get(\"f1\"));\n    assertEquals(\"v2\", obj.get(\"f2\"));\n    assertTrue(obj.containsKey(\"f3\"));\n\n    doc = \"[{'id':'1'},{'id':'2'}]\".replace('\\'', '\"');\n    req = req(\"srcField\",\"_src_\");\n    req.getContext().put(\"path\",\"/update/json/docs\");\n    rsp = new SolrQueryResponse();\n    p = new BufferingRequestProcessor(null);\n    loader = new JsonLoader();\n    loader.load(req, rsp, new ContentStreamBase.StringStream(doc), p);\n    assertEquals( 2, p.addCommands.size() );\n\n    content = (String) p.addCommands.get(0).solrDoc.getFieldValue(\"_src_\");\n    assertNotNull(content);\n    obj = (Map) ObjectBuilder.fromJSON(content);\n    assertEquals(\"1\", obj.get(\"id\"));\n    content = (String) p.addCommands.get(1).solrDoc.getFieldValue(\"_src_\");\n    assertNotNull(content);\n    obj = (Map) ObjectBuilder.fromJSON(content);\n    assertEquals(\"2\", obj.get(\"id\"));\n\n    String json = \"{a:{\" +\n        \"b:[{c:c1, e:e1},{c:c2, e :e2, d:{p:q}}],\" +\n        \"x:y\" +\n        \"}}\";\n    req = req(\"split\", \"/|/a/b\"   );\n    req.getContext().put(\"path\",\"/update/json/docs\");\n    rsp = new SolrQueryResponse();\n    p = new BufferingRequestProcessor(null);\n    loader = new JsonLoader();\n    loader.load(req, rsp, new ContentStreamBase.StringStream(json), p);\n\n    assertEquals( 1, p.addCommands.size() );\n    assertEquals(\"y\",  p.addCommands.get(0).solrDoc.getFieldValue(\"a.x\"));\n    List<SolrInputDocument> children = p.addCommands.get(0).solrDoc.getChildDocuments();\n    assertEquals(2, children.size());\n    SolrInputDocument d = children.get(0);\n    assertEquals(d.getFieldValue(\"c\"), \"c1\");\n    assertEquals(d.getFieldValue(\"e\"), \"e1\");\n    d = children.get(1);\n    assertEquals(d.getFieldValue(\"c\"), \"c2\");\n    assertEquals(d.getFieldValue(\"e\"), \"e2\");\n    assertEquals(d.getFieldValue(\"d.p\"), \"q\");\n\n    json = \"{\\n\" +\n        \"  \\\"id\\\": \\\"1\\\",\\n\" +\n        \"  \\\"name\\\": \\\"i am the parent\\\",\\n\" +\n        \"  \\\"cat\\\": \\\"parent\\\",\\n\" +\n        \"  \\\"children\\\": [\\n\" +\n        \"    {\\n\" +\n        \"      \\\"id\\\": \\\"1.1\\\",\\n\" +\n        \"      \\\"name\\\": \\\"i am the 1st child\\\",\\n\" +\n        \"      \\\"cat\\\": \\\"child\\\"\\n\" +\n        \"    },\\n\" +\n        \"    {\\n\" +\n        \"      \\\"id\\\": \\\"1.2\\\",\\n\" +\n        \"      \\\"name\\\": \\\"i am the 2nd child\\\",\\n\" +\n        \"      \\\"cat\\\": \\\"child\\\",\\n\" +\n        \"      \\\"grandchildren\\\": [\\n\" +\n        \"        {\\n\" +\n        \"          \\\"id\\\": \\\"1.2.1\\\",\\n\" +\n        \"          \\\"name\\\": \\\"i am the grandchild\\\",\\n\" +\n        \"          \\\"cat\\\": \\\"grandchild\\\"\\n\" +\n        \"        }\\n\" +\n        \"      ]\\n\" +\n        \"    }\\n\" +\n        \"  ]\\n\" +\n        \"}\";\n    req = req(\n        \"split\", \"/|/children|/children/grandchildren\",\n        \"f\",\"$FQN:/**\",\n        \"f\", \"id:/children/id\",\n        \"f\", \"/name\",\n        \"f\", \"/children/name\",\n        \"f\", \"cat:/children/cat\",\n        \"f\", \"id:/children/grandchildren/id\",\n        \"f\", \"name:/children/grandchildren/name\",\n        \"f\", \"cat:/children/grandchildren/cat\");\n    req.getContext().put(\"path\", \"/update/json/docs\");\n    rsp = new SolrQueryResponse();\n    p = new BufferingRequestProcessor(null);\n    loader = new JsonLoader();\n    loader.load(req, rsp, new ContentStreamBase.StringStream(json), p);\n    assertEquals(2, p.addCommands.get(0).solrDoc.getChildDocuments().size());\n    assertEquals(1, p.addCommands.get(0).solrDoc.getChildDocuments().get(1).getChildDocuments().size());\n\n  }\n\n","bugFix":["9dbf1742cf31777011ef976c17df1c8507c3de9f"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/JsonLoaderTest#testJsonDocFormat().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/JsonLoaderTest#testJsonDocFormat().mjava","sourceNew":"  public void testJsonDocFormat() throws Exception{\n    String doc = \"\\n\" +\n        \"\\n\" +\n        \"{\\\"bool\\\": true,\\n\" +\n        \" \\\"f0\\\": \\\"v0\\\",\\n\" +\n        \" \\\"f2\\\": {\\n\" +\n        \"    \\t  \\\"boost\\\": 2.3,\\n\" +\n        \"    \\t  \\\"value\\\": \\\"test\\\"\\n\" +\n        \"    \\t   },\\n\" +\n        \"\\\"array\\\": [ \\\"aaa\\\", \\\"bbb\\\" ],\\n\" +\n        \"\\\"boosted\\\": {\\n\" +\n        \"    \\t      \\\"boost\\\": 6.7,\\n\" +\n        \"    \\t      \\\"value\\\": [ \\\"aaa\\\", \\\"bbb\\\" ]\\n\" +\n        \"    \\t    }\\n\" +\n        \" }\\n\" +\n        \"\\n\" +\n        \"\\n\" +\n        \" {\\\"f1\\\": \\\"v1\\\",\\n\" +\n        \"  \\\"f1\\\": \\\"v2\\\",\\n\" +\n        \"   \\\"f2\\\": null\\n\" +\n        \"  }\\n\";\n    SolrQueryRequest req = req(\"srcField\",\"_src_\");\n    req.getContext().put(\"path\",\"/update/json/docs\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    BufferingRequestProcessor p = new BufferingRequestProcessor(null);\n    JsonLoader loader = new JsonLoader();\n    loader.load(req, rsp, new ContentStreamBase.StringStream(doc), p);\n    assertEquals( 2, p.addCommands.size() );\n     doc = \"\\n\" +\n        \"\\n\" +\n        \"{\\\"bool\\\": true,\\n\" +\n        \" \\\"f0\\\": \\\"v0\\\",\\n\" +\n        \" \\\"f2\\\": {\\n\" +\n        \"    \\t  \\\"boost\\\": 2.3,\\n\" +\n        \"    \\t  \\\"value\\\": \\\"test\\\"\\n\" +\n        \"    \\t   },\\n\" +\n        \"\\\"array\\\": [ \\\"aaa\\\", \\\"bbb\\\" ],\\n\" +\n        \"\\\"boosted\\\": {\\n\" +\n        \"    \\t      \\\"boost\\\": 6.7,\\n\" +\n        \"    \\t      \\\"value\\\": [ \\\"aaa\\\", \\\"bbb\\\" ]\\n\" +\n        \"    \\t    }\\n\" +\n        \" }\\n\" +\n        \"\\n\" +\n        \"\\n\" +\n        \" {\\\"f1\\\": \\\"v1\\\",\\n\" +\n        \"  \\\"f2\\\": \\\"v2\\\",\\n\" +\n        \"   \\\"f3\\\": null\\n\" +\n        \"  }\\n\";\n    req = req(\"srcField\",\"_src_\");\n    req.getContext().put(\"path\",\"/update/json/docs\");\n    rsp = new SolrQueryResponse();\n    p = new BufferingRequestProcessor(null);\n    loader = new JsonLoader();\n    loader.load(req, rsp, new ContentStreamBase.StringStream(doc), p);\n\n    assertEquals( 2, p.addCommands.size() );\n\n    String content = (String) p.addCommands.get(0).solrDoc.getFieldValue(\"_src_\");\n    assertNotNull(content);\n    Map obj = (Map) ObjectBuilder.fromJSON(content);\n    assertEquals(Boolean.TRUE, obj.get(\"bool\"));\n    assertEquals(\"v0\", obj.get(\"f0\"));\n    assertNotNull(obj.get(\"f0\"));\n    assertNotNull(obj.get(\"array\"));\n    assertNotNull(obj.get(\"boosted\"));\n\n    content = (String) p.addCommands.get(1).solrDoc.getFieldValue(\"_src_\");\n    assertNotNull(content);\n    obj = (Map) ObjectBuilder.fromJSON(content);\n    assertEquals(\"v1\", obj.get(\"f1\"));\n    assertEquals(\"v2\", obj.get(\"f2\"));\n    assertTrue(obj.containsKey(\"f3\"));\n\n    doc = \"[{'id':'1'},{'id':'2'}]\".replace('\\'', '\"');\n    req = req(\"srcField\",\"_src_\");\n    req.getContext().put(\"path\",\"/update/json/docs\");\n    rsp = new SolrQueryResponse();\n    p = new BufferingRequestProcessor(null);\n    loader = new JsonLoader();\n    loader.load(req, rsp, new ContentStreamBase.StringStream(doc), p);\n    assertEquals( 2, p.addCommands.size() );\n\n    content = (String) p.addCommands.get(0).solrDoc.getFieldValue(\"_src_\");\n    assertNotNull(content);\n    obj = (Map) ObjectBuilder.fromJSON(content);\n    assertEquals(\"1\", obj.get(\"id\"));\n    content = (String) p.addCommands.get(1).solrDoc.getFieldValue(\"_src_\");\n    assertNotNull(content);\n    obj = (Map) ObjectBuilder.fromJSON(content);\n    assertEquals(\"2\", obj.get(\"id\"));\n\n    String json = \"{a:{\" +\n        \"b:[{c:c1, e:e1},{c:c2, e :e2, d:{p:q}}],\" +\n        \"x:y\" +\n        \"}}\";\n    req = req(\"split\", \"/|/a/b\"   );\n    req.getContext().put(\"path\",\"/update/json/docs\");\n    rsp = new SolrQueryResponse();\n    p = new BufferingRequestProcessor(null);\n    loader = new JsonLoader();\n    loader.load(req, rsp, new ContentStreamBase.StringStream(json), p);\n\n    assertEquals( 1, p.addCommands.size() );\n    assertEquals(\"y\",  p.addCommands.get(0).solrDoc.getFieldValue(\"a.x\"));\n    List<SolrInputDocument> children = p.addCommands.get(0).solrDoc.getChildDocuments();\n    assertEquals(2, children.size());\n    SolrInputDocument d = children.get(0);\n    assertEquals(d.getFieldValue(\"c\"), \"c1\");\n    assertEquals(d.getFieldValue(\"e\"), \"e1\");\n    d = children.get(1);\n    assertEquals(d.getFieldValue(\"c\"), \"c2\");\n    assertEquals(d.getFieldValue(\"e\"), \"e2\");\n    assertEquals(d.getFieldValue(\"d.p\"), \"q\");\n\n    req = req(PARENT_TWO_CHILDREN_PARAMS);\n    req.getContext().put(\"path\", \"/update/json/docs\");\n    rsp = new SolrQueryResponse();\n    p = new BufferingRequestProcessor(null);\n    loader = new JsonLoader();\n    loader.load(req, rsp, new ContentStreamBase.StringStream(PARENT_TWO_CHILDREN_JSON), p);\n    assertEquals(2, p.addCommands.get(0).solrDoc.getChildDocuments().size());\n    assertEquals(1, p.addCommands.get(0).solrDoc.getChildDocuments().get(1).getChildDocuments().size());\n\n  }\n\n","sourceOld":"  public void testJsonDocFormat() throws Exception{\n    String doc = \"\\n\" +\n        \"\\n\" +\n        \"{\\\"bool\\\": true,\\n\" +\n        \" \\\"f0\\\": \\\"v0\\\",\\n\" +\n        \" \\\"f2\\\": {\\n\" +\n        \"    \\t  \\\"boost\\\": 2.3,\\n\" +\n        \"    \\t  \\\"value\\\": \\\"test\\\"\\n\" +\n        \"    \\t   },\\n\" +\n        \"\\\"array\\\": [ \\\"aaa\\\", \\\"bbb\\\" ],\\n\" +\n        \"\\\"boosted\\\": {\\n\" +\n        \"    \\t      \\\"boost\\\": 6.7,\\n\" +\n        \"    \\t      \\\"value\\\": [ \\\"aaa\\\", \\\"bbb\\\" ]\\n\" +\n        \"    \\t    }\\n\" +\n        \" }\\n\" +\n        \"\\n\" +\n        \"\\n\" +\n        \" {\\\"f1\\\": \\\"v1\\\",\\n\" +\n        \"  \\\"f1\\\": \\\"v2\\\",\\n\" +\n        \"   \\\"f2\\\": null\\n\" +\n        \"  }\\n\";\n    SolrQueryRequest req = req(\"srcField\",\"_src_\");\n    req.getContext().put(\"path\",\"/update/json/docs\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    BufferingRequestProcessor p = new BufferingRequestProcessor(null);\n    JsonLoader loader = new JsonLoader();\n    loader.load(req, rsp, new ContentStreamBase.StringStream(doc), p);\n    assertEquals( 2, p.addCommands.size() );\n     doc = \"\\n\" +\n        \"\\n\" +\n        \"{\\\"bool\\\": true,\\n\" +\n        \" \\\"f0\\\": \\\"v0\\\",\\n\" +\n        \" \\\"f2\\\": {\\n\" +\n        \"    \\t  \\\"boost\\\": 2.3,\\n\" +\n        \"    \\t  \\\"value\\\": \\\"test\\\"\\n\" +\n        \"    \\t   },\\n\" +\n        \"\\\"array\\\": [ \\\"aaa\\\", \\\"bbb\\\" ],\\n\" +\n        \"\\\"boosted\\\": {\\n\" +\n        \"    \\t      \\\"boost\\\": 6.7,\\n\" +\n        \"    \\t      \\\"value\\\": [ \\\"aaa\\\", \\\"bbb\\\" ]\\n\" +\n        \"    \\t    }\\n\" +\n        \" }\\n\" +\n        \"\\n\" +\n        \"\\n\" +\n        \" {\\\"f1\\\": \\\"v1\\\",\\n\" +\n        \"  \\\"f2\\\": \\\"v2\\\",\\n\" +\n        \"   \\\"f3\\\": null\\n\" +\n        \"  }\\n\";\n    req = req(\"srcField\",\"_src_\");\n    req.getContext().put(\"path\",\"/update/json/docs\");\n    rsp = new SolrQueryResponse();\n    p = new BufferingRequestProcessor(null);\n    loader = new JsonLoader();\n    loader.load(req, rsp, new ContentStreamBase.StringStream(doc), p);\n\n    assertEquals( 2, p.addCommands.size() );\n\n    String content = (String) p.addCommands.get(0).solrDoc.getFieldValue(\"_src_\");\n    assertNotNull(content);\n    Map obj = (Map) ObjectBuilder.fromJSON(content);\n    assertEquals(Boolean.TRUE, obj.get(\"bool\"));\n    assertEquals(\"v0\", obj.get(\"f0\"));\n    assertNotNull(obj.get(\"f0\"));\n    assertNotNull(obj.get(\"array\"));\n    assertNotNull(obj.get(\"boosted\"));\n\n    content = (String) p.addCommands.get(1).solrDoc.getFieldValue(\"_src_\");\n    assertNotNull(content);\n    obj = (Map) ObjectBuilder.fromJSON(content);\n    assertEquals(\"v1\", obj.get(\"f1\"));\n    assertEquals(\"v2\", obj.get(\"f2\"));\n    assertTrue(obj.containsKey(\"f3\"));\n\n    doc = \"[{'id':'1'},{'id':'2'}]\".replace('\\'', '\"');\n    req = req(\"srcField\",\"_src_\");\n    req.getContext().put(\"path\",\"/update/json/docs\");\n    rsp = new SolrQueryResponse();\n    p = new BufferingRequestProcessor(null);\n    loader = new JsonLoader();\n    loader.load(req, rsp, new ContentStreamBase.StringStream(doc), p);\n    assertEquals( 2, p.addCommands.size() );\n\n    content = (String) p.addCommands.get(0).solrDoc.getFieldValue(\"_src_\");\n    assertNotNull(content);\n    obj = (Map) ObjectBuilder.fromJSON(content);\n    assertEquals(\"1\", obj.get(\"id\"));\n    content = (String) p.addCommands.get(1).solrDoc.getFieldValue(\"_src_\");\n    assertNotNull(content);\n    obj = (Map) ObjectBuilder.fromJSON(content);\n    assertEquals(\"2\", obj.get(\"id\"));\n\n    String json = \"{a:{\" +\n        \"b:[{c:c1, e:e1},{c:c2, e :e2, d:{p:q}}],\" +\n        \"x:y\" +\n        \"}}\";\n    req = req(\"split\", \"/|/a/b\"   );\n    req.getContext().put(\"path\",\"/update/json/docs\");\n    rsp = new SolrQueryResponse();\n    p = new BufferingRequestProcessor(null);\n    loader = new JsonLoader();\n    loader.load(req, rsp, new ContentStreamBase.StringStream(json), p);\n\n    assertEquals( 1, p.addCommands.size() );\n    assertEquals(\"y\",  p.addCommands.get(0).solrDoc.getFieldValue(\"a.x\"));\n    List<SolrInputDocument> children = p.addCommands.get(0).solrDoc.getChildDocuments();\n    assertEquals(2, children.size());\n    SolrInputDocument d = children.get(0);\n    assertEquals(d.getFieldValue(\"c\"), \"c1\");\n    assertEquals(d.getFieldValue(\"e\"), \"e1\");\n    d = children.get(1);\n    assertEquals(d.getFieldValue(\"c\"), \"c2\");\n    assertEquals(d.getFieldValue(\"e\"), \"e2\");\n    assertEquals(d.getFieldValue(\"d.p\"), \"q\");\n\n    json = \"{\\n\" +\n        \"  \\\"id\\\": \\\"1\\\",\\n\" +\n        \"  \\\"name\\\": \\\"i am the parent\\\",\\n\" +\n        \"  \\\"cat\\\": \\\"parent\\\",\\n\" +\n        \"  \\\"children\\\": [\\n\" +\n        \"    {\\n\" +\n        \"      \\\"id\\\": \\\"1.1\\\",\\n\" +\n        \"      \\\"name\\\": \\\"i am the 1st child\\\",\\n\" +\n        \"      \\\"cat\\\": \\\"child\\\"\\n\" +\n        \"    },\\n\" +\n        \"    {\\n\" +\n        \"      \\\"id\\\": \\\"1.2\\\",\\n\" +\n        \"      \\\"name\\\": \\\"i am the 2nd child\\\",\\n\" +\n        \"      \\\"cat\\\": \\\"child\\\",\\n\" +\n        \"      \\\"grandchildren\\\": [\\n\" +\n        \"        {\\n\" +\n        \"          \\\"id\\\": \\\"1.2.1\\\",\\n\" +\n        \"          \\\"name\\\": \\\"i am the grandchild\\\",\\n\" +\n        \"          \\\"cat\\\": \\\"grandchild\\\"\\n\" +\n        \"        }\\n\" +\n        \"      ]\\n\" +\n        \"    }\\n\" +\n        \"  ]\\n\" +\n        \"}\";\n    req = req(\n        \"split\", \"/|/children|/children/grandchildren\",\n        \"f\",\"$FQN:/**\",\n        \"f\", \"id:/children/id\",\n        \"f\", \"/name\",\n        \"f\", \"/children/name\",\n        \"f\", \"cat:/children/cat\",\n        \"f\", \"id:/children/grandchildren/id\",\n        \"f\", \"name:/children/grandchildren/name\",\n        \"f\", \"cat:/children/grandchildren/cat\");\n    req.getContext().put(\"path\", \"/update/json/docs\");\n    rsp = new SolrQueryResponse();\n    p = new BufferingRequestProcessor(null);\n    loader = new JsonLoader();\n    loader.load(req, rsp, new ContentStreamBase.StringStream(json), p);\n    assertEquals(2, p.addCommands.get(0).solrDoc.getChildDocuments().size());\n    assertEquals(1, p.addCommands.get(0).solrDoc.getChildDocuments().get(1).getChildDocuments().size());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"263caed1e020aa6ed422c9243c9b1759ab27e703","date":1546531139,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/JsonLoaderTest#testJsonDocFormat().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/JsonLoaderTest#testJsonDocFormat().mjava","sourceNew":"  public void testJsonDocFormat() throws Exception{\n    String doc;\n    SolrQueryRequest req;\n    SolrQueryResponse rsp;\n    BufferingRequestProcessor p;\n    JsonLoader loader;\n\n    doc = \"\\n\" +\n        \"\\n\" +\n        \"{\\\"bool\\\": true,\\n\" +\n        \" \\\"f0\\\": \\\"v0\\\",\\n\" +\n        \" \\\"f2\\\": {\\n\" +\n        \"    \\t  \\\"boost\\\": 2.3,\\n\" +\n        \"    \\t  \\\"value\\\": \\\"test\\\"\\n\" +\n        \"    \\t   },\\n\" +\n        \"\\\"array\\\": [ \\\"aaa\\\", \\\"bbb\\\" ],\\n\" +\n        \"\\\"boosted\\\": {\\n\" +\n        \"    \\t      \\\"boost\\\": 6.7,\\n\" +\n        \"    \\t      \\\"value\\\": [ \\\"aaa\\\", \\\"bbb\\\" ]\\n\" +\n        \"    \\t    }\\n\" +\n        \" }\\n\" +\n        \"\\n\" +\n        \"\\n\" +\n        \" {\\\"f1\\\": \\\"v1\\\",\\n\" +\n        \"  \\\"f2\\\": \\\"v2\\\",\\n\" +\n        \"   \\\"f3\\\": null\\n\" +\n        \"  }\\n\";\n    req = req(\"srcField\",\"_src_\");\n    req.getContext().put(\"path\",\"/update/json/docs\");\n    rsp = new SolrQueryResponse();\n    p = new BufferingRequestProcessor(null);\n    loader = new JsonLoader();\n    loader.load(req, rsp, new ContentStreamBase.StringStream(doc), p);\n\n    assertEquals( 2, p.addCommands.size() );\n\n    String content = (String) p.addCommands.get(0).solrDoc.getFieldValue(\"_src_\");\n    assertNotNull(content);\n    Map obj = (Map) ObjectBuilder.fromJSON(content);\n    assertEquals(Boolean.TRUE, obj.get(\"bool\"));\n    assertEquals(\"v0\", obj.get(\"f0\"));\n    assertNotNull(obj.get(\"f0\"));\n    assertNotNull(obj.get(\"array\"));\n    assertNotNull(obj.get(\"boosted\"));\n\n    content = (String) p.addCommands.get(1).solrDoc.getFieldValue(\"_src_\");\n    assertNotNull(content);\n    obj = (Map) ObjectBuilder.fromJSON(content);\n    assertEquals(\"v1\", obj.get(\"f1\"));\n    assertEquals(\"v2\", obj.get(\"f2\"));\n    assertTrue(obj.containsKey(\"f3\"));\n\n    //TODO new test method\n    doc = \"[{'id':'1'},{'id':'2'}]\".replace('\\'', '\"');\n    req = req(\"srcField\",\"_src_\");\n    req.getContext().put(\"path\",\"/update/json/docs\");\n    rsp = new SolrQueryResponse();\n    p = new BufferingRequestProcessor(null);\n    loader = new JsonLoader();\n    loader.load(req, rsp, new ContentStreamBase.StringStream(doc), p);\n    assertEquals( 2, p.addCommands.size() );\n\n    content = (String) p.addCommands.get(0).solrDoc.getFieldValue(\"_src_\");\n    assertNotNull(content);\n    obj = (Map) ObjectBuilder.fromJSON(content);\n    assertEquals(\"1\", obj.get(\"id\"));\n    content = (String) p.addCommands.get(1).solrDoc.getFieldValue(\"_src_\");\n    assertNotNull(content);\n    obj = (Map) ObjectBuilder.fromJSON(content);\n    assertEquals(\"2\", obj.get(\"id\"));\n\n    //TODO new test method\n    String json = \"{a:{\" +\n        \"b:[{c:c1, e:e1},{c:c2, e :e2, d:{p:q}}],\" +\n        \"x:y\" +\n        \"}}\";\n    req = req(\"split\", \"/|/a/b\"   );\n    req.getContext().put(\"path\",\"/update/json/docs\");\n    rsp = new SolrQueryResponse();\n    p = new BufferingRequestProcessor(null);\n    loader = new JsonLoader();\n    loader.load(req, rsp, new ContentStreamBase.StringStream(json), p);\n    assertEquals( 1, p.addCommands.size() );\n    assertEquals(\"SolrInputDocument(fields: [\" +\n        \"b=[\" +\n          \"SolrInputDocument(fields: [c=c1, e=e1]), \" +\n          \"SolrInputDocument(fields: [c=c2, e=e2, d.p=q])], \" +\n        \"a.x=y\" +\n        \"])\",  p.addCommands.get(0).solrDoc.toString());\n  }\n\n","sourceOld":"  public void testJsonDocFormat() throws Exception{\n    String doc = \"\\n\" +\n        \"\\n\" +\n        \"{\\\"bool\\\": true,\\n\" +\n        \" \\\"f0\\\": \\\"v0\\\",\\n\" +\n        \" \\\"f2\\\": {\\n\" +\n        \"    \\t  \\\"boost\\\": 2.3,\\n\" +\n        \"    \\t  \\\"value\\\": \\\"test\\\"\\n\" +\n        \"    \\t   },\\n\" +\n        \"\\\"array\\\": [ \\\"aaa\\\", \\\"bbb\\\" ],\\n\" +\n        \"\\\"boosted\\\": {\\n\" +\n        \"    \\t      \\\"boost\\\": 6.7,\\n\" +\n        \"    \\t      \\\"value\\\": [ \\\"aaa\\\", \\\"bbb\\\" ]\\n\" +\n        \"    \\t    }\\n\" +\n        \" }\\n\" +\n        \"\\n\" +\n        \"\\n\" +\n        \" {\\\"f1\\\": \\\"v1\\\",\\n\" +\n        \"  \\\"f1\\\": \\\"v2\\\",\\n\" +\n        \"   \\\"f2\\\": null\\n\" +\n        \"  }\\n\";\n    SolrQueryRequest req = req(\"srcField\",\"_src_\");\n    req.getContext().put(\"path\",\"/update/json/docs\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    BufferingRequestProcessor p = new BufferingRequestProcessor(null);\n    JsonLoader loader = new JsonLoader();\n    loader.load(req, rsp, new ContentStreamBase.StringStream(doc), p);\n    assertEquals( 2, p.addCommands.size() );\n     doc = \"\\n\" +\n        \"\\n\" +\n        \"{\\\"bool\\\": true,\\n\" +\n        \" \\\"f0\\\": \\\"v0\\\",\\n\" +\n        \" \\\"f2\\\": {\\n\" +\n        \"    \\t  \\\"boost\\\": 2.3,\\n\" +\n        \"    \\t  \\\"value\\\": \\\"test\\\"\\n\" +\n        \"    \\t   },\\n\" +\n        \"\\\"array\\\": [ \\\"aaa\\\", \\\"bbb\\\" ],\\n\" +\n        \"\\\"boosted\\\": {\\n\" +\n        \"    \\t      \\\"boost\\\": 6.7,\\n\" +\n        \"    \\t      \\\"value\\\": [ \\\"aaa\\\", \\\"bbb\\\" ]\\n\" +\n        \"    \\t    }\\n\" +\n        \" }\\n\" +\n        \"\\n\" +\n        \"\\n\" +\n        \" {\\\"f1\\\": \\\"v1\\\",\\n\" +\n        \"  \\\"f2\\\": \\\"v2\\\",\\n\" +\n        \"   \\\"f3\\\": null\\n\" +\n        \"  }\\n\";\n    req = req(\"srcField\",\"_src_\");\n    req.getContext().put(\"path\",\"/update/json/docs\");\n    rsp = new SolrQueryResponse();\n    p = new BufferingRequestProcessor(null);\n    loader = new JsonLoader();\n    loader.load(req, rsp, new ContentStreamBase.StringStream(doc), p);\n\n    assertEquals( 2, p.addCommands.size() );\n\n    String content = (String) p.addCommands.get(0).solrDoc.getFieldValue(\"_src_\");\n    assertNotNull(content);\n    Map obj = (Map) ObjectBuilder.fromJSON(content);\n    assertEquals(Boolean.TRUE, obj.get(\"bool\"));\n    assertEquals(\"v0\", obj.get(\"f0\"));\n    assertNotNull(obj.get(\"f0\"));\n    assertNotNull(obj.get(\"array\"));\n    assertNotNull(obj.get(\"boosted\"));\n\n    content = (String) p.addCommands.get(1).solrDoc.getFieldValue(\"_src_\");\n    assertNotNull(content);\n    obj = (Map) ObjectBuilder.fromJSON(content);\n    assertEquals(\"v1\", obj.get(\"f1\"));\n    assertEquals(\"v2\", obj.get(\"f2\"));\n    assertTrue(obj.containsKey(\"f3\"));\n\n    doc = \"[{'id':'1'},{'id':'2'}]\".replace('\\'', '\"');\n    req = req(\"srcField\",\"_src_\");\n    req.getContext().put(\"path\",\"/update/json/docs\");\n    rsp = new SolrQueryResponse();\n    p = new BufferingRequestProcessor(null);\n    loader = new JsonLoader();\n    loader.load(req, rsp, new ContentStreamBase.StringStream(doc), p);\n    assertEquals( 2, p.addCommands.size() );\n\n    content = (String) p.addCommands.get(0).solrDoc.getFieldValue(\"_src_\");\n    assertNotNull(content);\n    obj = (Map) ObjectBuilder.fromJSON(content);\n    assertEquals(\"1\", obj.get(\"id\"));\n    content = (String) p.addCommands.get(1).solrDoc.getFieldValue(\"_src_\");\n    assertNotNull(content);\n    obj = (Map) ObjectBuilder.fromJSON(content);\n    assertEquals(\"2\", obj.get(\"id\"));\n\n    String json = \"{a:{\" +\n        \"b:[{c:c1, e:e1},{c:c2, e :e2, d:{p:q}}],\" +\n        \"x:y\" +\n        \"}}\";\n    req = req(\"split\", \"/|/a/b\"   );\n    req.getContext().put(\"path\",\"/update/json/docs\");\n    rsp = new SolrQueryResponse();\n    p = new BufferingRequestProcessor(null);\n    loader = new JsonLoader();\n    loader.load(req, rsp, new ContentStreamBase.StringStream(json), p);\n\n    assertEquals( 1, p.addCommands.size() );\n    assertEquals(\"y\",  p.addCommands.get(0).solrDoc.getFieldValue(\"a.x\"));\n    List<SolrInputDocument> children = p.addCommands.get(0).solrDoc.getChildDocuments();\n    assertEquals(2, children.size());\n    SolrInputDocument d = children.get(0);\n    assertEquals(d.getFieldValue(\"c\"), \"c1\");\n    assertEquals(d.getFieldValue(\"e\"), \"e1\");\n    d = children.get(1);\n    assertEquals(d.getFieldValue(\"c\"), \"c2\");\n    assertEquals(d.getFieldValue(\"e\"), \"e2\");\n    assertEquals(d.getFieldValue(\"d.p\"), \"q\");\n\n    req = req(PARENT_TWO_CHILDREN_PARAMS);\n    req.getContext().put(\"path\", \"/update/json/docs\");\n    rsp = new SolrQueryResponse();\n    p = new BufferingRequestProcessor(null);\n    loader = new JsonLoader();\n    loader.load(req, rsp, new ContentStreamBase.StringStream(PARENT_TWO_CHILDREN_JSON), p);\n    assertEquals(2, p.addCommands.get(0).solrDoc.getChildDocuments().size());\n    assertEquals(1, p.addCommands.get(0).solrDoc.getChildDocuments().get(1).getChildDocuments().size());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3714bcf66a68a1600e9dd11442fc1b33b62ef088","date":1556832005,"type":3,"author":"noble","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/JsonLoaderTest#testJsonDocFormat().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/JsonLoaderTest#testJsonDocFormat().mjava","sourceNew":"  public void testJsonDocFormat() throws Exception{\n    String doc;\n    SolrQueryRequest req;\n    SolrQueryResponse rsp;\n    BufferingRequestProcessor p;\n    JsonLoader loader;\n\n    doc = \"\\n\" +\n        \"\\n\" +\n        \"{\\\"bool\\\": true,\\n\" +\n        \" \\\"f0\\\": \\\"v0\\\",\\n\" +\n        \" \\\"f2\\\": {\\n\" +\n        \"    \\t  \\\"boost\\\": 2.3,\\n\" +\n        \"    \\t  \\\"value\\\": \\\"test\\\"\\n\" +\n        \"    \\t   },\\n\" +\n        \"\\\"array\\\": [ \\\"aaa\\\", \\\"bbb\\\" ],\\n\" +\n        \"\\\"boosted\\\": {\\n\" +\n        \"    \\t      \\\"boost\\\": 6.7,\\n\" +\n        \"    \\t      \\\"value\\\": [ \\\"aaa\\\", \\\"bbb\\\" ]\\n\" +\n        \"    \\t    }\\n\" +\n        \" }\\n\" +\n        \"\\n\" +\n        \"\\n\" +\n        \" {\\\"f1\\\": \\\"v1\\\",\\n\" +\n        \"  \\\"f2\\\": \\\"v2\\\",\\n\" +\n        \"   \\\"f3\\\": null\\n\" +\n        \"  }\\n\";\n    req = req(\"srcField\",\"_src_\");\n    req.getContext().put(\"path\",\"/update/json/docs\");\n    rsp = new SolrQueryResponse();\n    p = new BufferingRequestProcessor(null);\n    loader = new JsonLoader();\n    loader.load(req, rsp, new ContentStreamBase.StringStream(doc), p);\n\n    assertEquals( 2, p.addCommands.size() );\n\n    String content = (String) p.addCommands.get(0).solrDoc.getFieldValue(\"_src_\");\n    assertNotNull(content);\n    Map obj = (Map) Utils.fromJSONString(content);\n    assertEquals(Boolean.TRUE, obj.get(\"bool\"));\n    assertEquals(\"v0\", obj.get(\"f0\"));\n    assertNotNull(obj.get(\"f0\"));\n    assertNotNull(obj.get(\"array\"));\n    assertNotNull(obj.get(\"boosted\"));\n\n    content = (String) p.addCommands.get(1).solrDoc.getFieldValue(\"_src_\");\n    assertNotNull(content);\n    obj = (Map) Utils.fromJSONString(content);\n    assertEquals(\"v1\", obj.get(\"f1\"));\n    assertEquals(\"v2\", obj.get(\"f2\"));\n    assertTrue(obj.containsKey(\"f3\"));\n\n    //TODO new test method\n    doc = \"[{'id':'1'},{'id':'2'}]\".replace('\\'', '\"');\n    req = req(\"srcField\",\"_src_\");\n    req.getContext().put(\"path\",\"/update/json/docs\");\n    rsp = new SolrQueryResponse();\n    p = new BufferingRequestProcessor(null);\n    loader = new JsonLoader();\n    loader.load(req, rsp, new ContentStreamBase.StringStream(doc), p);\n    assertEquals( 2, p.addCommands.size() );\n\n    content = (String) p.addCommands.get(0).solrDoc.getFieldValue(\"_src_\");\n    assertNotNull(content);\n    obj = (Map) Utils.fromJSONString(content);\n    assertEquals(\"1\", obj.get(\"id\"));\n    content = (String) p.addCommands.get(1).solrDoc.getFieldValue(\"_src_\");\n    assertNotNull(content);\n    obj = (Map) Utils.fromJSONString(content);\n    assertEquals(\"2\", obj.get(\"id\"));\n\n    //TODO new test method\n    String json = \"{a:{\" +\n        \"b:[{c:c1, e:e1},{c:c2, e :e2, d:{p:q}}],\" +\n        \"x:y\" +\n        \"}}\";\n    req = req(\"split\", \"/|/a/b\"   );\n    req.getContext().put(\"path\",\"/update/json/docs\");\n    rsp = new SolrQueryResponse();\n    p = new BufferingRequestProcessor(null);\n    loader = new JsonLoader();\n    loader.load(req, rsp, new ContentStreamBase.StringStream(json), p);\n    assertEquals( 1, p.addCommands.size() );\n    assertEquals(\"SolrInputDocument(fields: [\" +\n        \"b=[\" +\n          \"SolrInputDocument(fields: [c=c1, e=e1]), \" +\n          \"SolrInputDocument(fields: [c=c2, e=e2, d.p=q])], \" +\n        \"a.x=y\" +\n        \"])\",  p.addCommands.get(0).solrDoc.toString());\n  }\n\n","sourceOld":"  public void testJsonDocFormat() throws Exception{\n    String doc;\n    SolrQueryRequest req;\n    SolrQueryResponse rsp;\n    BufferingRequestProcessor p;\n    JsonLoader loader;\n\n    doc = \"\\n\" +\n        \"\\n\" +\n        \"{\\\"bool\\\": true,\\n\" +\n        \" \\\"f0\\\": \\\"v0\\\",\\n\" +\n        \" \\\"f2\\\": {\\n\" +\n        \"    \\t  \\\"boost\\\": 2.3,\\n\" +\n        \"    \\t  \\\"value\\\": \\\"test\\\"\\n\" +\n        \"    \\t   },\\n\" +\n        \"\\\"array\\\": [ \\\"aaa\\\", \\\"bbb\\\" ],\\n\" +\n        \"\\\"boosted\\\": {\\n\" +\n        \"    \\t      \\\"boost\\\": 6.7,\\n\" +\n        \"    \\t      \\\"value\\\": [ \\\"aaa\\\", \\\"bbb\\\" ]\\n\" +\n        \"    \\t    }\\n\" +\n        \" }\\n\" +\n        \"\\n\" +\n        \"\\n\" +\n        \" {\\\"f1\\\": \\\"v1\\\",\\n\" +\n        \"  \\\"f2\\\": \\\"v2\\\",\\n\" +\n        \"   \\\"f3\\\": null\\n\" +\n        \"  }\\n\";\n    req = req(\"srcField\",\"_src_\");\n    req.getContext().put(\"path\",\"/update/json/docs\");\n    rsp = new SolrQueryResponse();\n    p = new BufferingRequestProcessor(null);\n    loader = new JsonLoader();\n    loader.load(req, rsp, new ContentStreamBase.StringStream(doc), p);\n\n    assertEquals( 2, p.addCommands.size() );\n\n    String content = (String) p.addCommands.get(0).solrDoc.getFieldValue(\"_src_\");\n    assertNotNull(content);\n    Map obj = (Map) ObjectBuilder.fromJSON(content);\n    assertEquals(Boolean.TRUE, obj.get(\"bool\"));\n    assertEquals(\"v0\", obj.get(\"f0\"));\n    assertNotNull(obj.get(\"f0\"));\n    assertNotNull(obj.get(\"array\"));\n    assertNotNull(obj.get(\"boosted\"));\n\n    content = (String) p.addCommands.get(1).solrDoc.getFieldValue(\"_src_\");\n    assertNotNull(content);\n    obj = (Map) ObjectBuilder.fromJSON(content);\n    assertEquals(\"v1\", obj.get(\"f1\"));\n    assertEquals(\"v2\", obj.get(\"f2\"));\n    assertTrue(obj.containsKey(\"f3\"));\n\n    //TODO new test method\n    doc = \"[{'id':'1'},{'id':'2'}]\".replace('\\'', '\"');\n    req = req(\"srcField\",\"_src_\");\n    req.getContext().put(\"path\",\"/update/json/docs\");\n    rsp = new SolrQueryResponse();\n    p = new BufferingRequestProcessor(null);\n    loader = new JsonLoader();\n    loader.load(req, rsp, new ContentStreamBase.StringStream(doc), p);\n    assertEquals( 2, p.addCommands.size() );\n\n    content = (String) p.addCommands.get(0).solrDoc.getFieldValue(\"_src_\");\n    assertNotNull(content);\n    obj = (Map) ObjectBuilder.fromJSON(content);\n    assertEquals(\"1\", obj.get(\"id\"));\n    content = (String) p.addCommands.get(1).solrDoc.getFieldValue(\"_src_\");\n    assertNotNull(content);\n    obj = (Map) ObjectBuilder.fromJSON(content);\n    assertEquals(\"2\", obj.get(\"id\"));\n\n    //TODO new test method\n    String json = \"{a:{\" +\n        \"b:[{c:c1, e:e1},{c:c2, e :e2, d:{p:q}}],\" +\n        \"x:y\" +\n        \"}}\";\n    req = req(\"split\", \"/|/a/b\"   );\n    req.getContext().put(\"path\",\"/update/json/docs\");\n    rsp = new SolrQueryResponse();\n    p = new BufferingRequestProcessor(null);\n    loader = new JsonLoader();\n    loader.load(req, rsp, new ContentStreamBase.StringStream(json), p);\n    assertEquals( 1, p.addCommands.size() );\n    assertEquals(\"SolrInputDocument(fields: [\" +\n        \"b=[\" +\n          \"SolrInputDocument(fields: [c=c1, e=e1]), \" +\n          \"SolrInputDocument(fields: [c=c2, e=e2, d.p=q])], \" +\n        \"a.x=y\" +\n        \"])\",  p.addCommands.get(0).solrDoc.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98520789adb1d5ad05afb4956eca0944a929688","date":1592430701,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/JsonLoaderTest#testJsonDocFormat().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/JsonLoaderTest#testJsonDocFormat().mjava","sourceNew":"  public void testJsonDocFormat() throws Exception{\n    String doc;\n    SolrQueryRequest req;\n    SolrQueryResponse rsp;\n    BufferingRequestProcessor p;\n    JsonLoader loader;\n\n    doc = \"\\n\" +\n        \"\\n\" +\n        \"{\\\"bool\\\": true,\\n\" +\n        \" \\\"f0\\\": \\\"v0\\\",\\n\" +\n        \" \\\"f2\\\": {\\n\" +\n        \"    \\t  \\\"boost\\\": 2.3,\\n\" +\n        \"    \\t  \\\"value\\\": \\\"test\\\"\\n\" +\n        \"    \\t   },\\n\" +\n        \"\\\"array\\\": [ \\\"aaa\\\", \\\"bbb\\\" ],\\n\" +\n        \"\\\"boosted\\\": {\\n\" +\n        \"    \\t      \\\"boost\\\": 6.7,\\n\" +\n        \"    \\t      \\\"value\\\": [ \\\"aaa\\\", \\\"bbb\\\" ]\\n\" +\n        \"    \\t    }\\n\" +\n        \" }\\n\" +\n        \"\\n\" +\n        \"\\n\" +\n        \" {\\\"f1\\\": \\\"v1\\\",\\n\" +\n        \"  \\\"f2\\\": \\\"v2\\\",\\n\" +\n        \"   \\\"f3\\\": null\\n\" +\n        \"  }\\n\";\n    req = req(\"srcField\",\"_src_\");\n    req.getContext().put(\"path\",\"/update/json/docs\");\n    rsp = new SolrQueryResponse();\n    p = new BufferingRequestProcessor(null);\n    loader = new JsonLoader();\n    loader.load(req, rsp, new ContentStreamBase.StringStream(doc), p);\n\n    assertEquals( 2, p.addCommands.size() );\n\n    String content = (String) p.addCommands.get(0).solrDoc.getFieldValue(\"_src_\");\n    assertNotNull(content);\n    @SuppressWarnings({\"rawtypes\"})\n    Map obj = (Map) Utils.fromJSONString(content);\n    assertEquals(Boolean.TRUE, obj.get(\"bool\"));\n    assertEquals(\"v0\", obj.get(\"f0\"));\n    assertNotNull(obj.get(\"f0\"));\n    assertNotNull(obj.get(\"array\"));\n    assertNotNull(obj.get(\"boosted\"));\n\n    content = (String) p.addCommands.get(1).solrDoc.getFieldValue(\"_src_\");\n    assertNotNull(content);\n    obj = (Map) Utils.fromJSONString(content);\n    assertEquals(\"v1\", obj.get(\"f1\"));\n    assertEquals(\"v2\", obj.get(\"f2\"));\n    assertTrue(obj.containsKey(\"f3\"));\n\n    //TODO new test method\n    doc = \"[{'id':'1'},{'id':'2'}]\".replace('\\'', '\"');\n    req = req(\"srcField\",\"_src_\");\n    req.getContext().put(\"path\",\"/update/json/docs\");\n    rsp = new SolrQueryResponse();\n    p = new BufferingRequestProcessor(null);\n    loader = new JsonLoader();\n    loader.load(req, rsp, new ContentStreamBase.StringStream(doc), p);\n    assertEquals( 2, p.addCommands.size() );\n\n    content = (String) p.addCommands.get(0).solrDoc.getFieldValue(\"_src_\");\n    assertNotNull(content);\n    obj = (Map) Utils.fromJSONString(content);\n    assertEquals(\"1\", obj.get(\"id\"));\n    content = (String) p.addCommands.get(1).solrDoc.getFieldValue(\"_src_\");\n    assertNotNull(content);\n    obj = (Map) Utils.fromJSONString(content);\n    assertEquals(\"2\", obj.get(\"id\"));\n\n    //TODO new test method\n    String json = \"{a:{\" +\n        \"b:[{c:c1, e:e1},{c:c2, e :e2, d:{p:q}}],\" +\n        \"x:y\" +\n        \"}}\";\n    req = req(\"split\", \"/|/a/b\"   );\n    req.getContext().put(\"path\",\"/update/json/docs\");\n    rsp = new SolrQueryResponse();\n    p = new BufferingRequestProcessor(null);\n    loader = new JsonLoader();\n    loader.load(req, rsp, new ContentStreamBase.StringStream(json), p);\n    assertEquals( 1, p.addCommands.size() );\n    assertEquals(\"SolrInputDocument(fields: [\" +\n        \"b=[\" +\n          \"SolrInputDocument(fields: [c=c1, e=e1]), \" +\n          \"SolrInputDocument(fields: [c=c2, e=e2, d.p=q])], \" +\n        \"a.x=y\" +\n        \"])\",  p.addCommands.get(0).solrDoc.toString());\n  }\n\n","sourceOld":"  public void testJsonDocFormat() throws Exception{\n    String doc;\n    SolrQueryRequest req;\n    SolrQueryResponse rsp;\n    BufferingRequestProcessor p;\n    JsonLoader loader;\n\n    doc = \"\\n\" +\n        \"\\n\" +\n        \"{\\\"bool\\\": true,\\n\" +\n        \" \\\"f0\\\": \\\"v0\\\",\\n\" +\n        \" \\\"f2\\\": {\\n\" +\n        \"    \\t  \\\"boost\\\": 2.3,\\n\" +\n        \"    \\t  \\\"value\\\": \\\"test\\\"\\n\" +\n        \"    \\t   },\\n\" +\n        \"\\\"array\\\": [ \\\"aaa\\\", \\\"bbb\\\" ],\\n\" +\n        \"\\\"boosted\\\": {\\n\" +\n        \"    \\t      \\\"boost\\\": 6.7,\\n\" +\n        \"    \\t      \\\"value\\\": [ \\\"aaa\\\", \\\"bbb\\\" ]\\n\" +\n        \"    \\t    }\\n\" +\n        \" }\\n\" +\n        \"\\n\" +\n        \"\\n\" +\n        \" {\\\"f1\\\": \\\"v1\\\",\\n\" +\n        \"  \\\"f2\\\": \\\"v2\\\",\\n\" +\n        \"   \\\"f3\\\": null\\n\" +\n        \"  }\\n\";\n    req = req(\"srcField\",\"_src_\");\n    req.getContext().put(\"path\",\"/update/json/docs\");\n    rsp = new SolrQueryResponse();\n    p = new BufferingRequestProcessor(null);\n    loader = new JsonLoader();\n    loader.load(req, rsp, new ContentStreamBase.StringStream(doc), p);\n\n    assertEquals( 2, p.addCommands.size() );\n\n    String content = (String) p.addCommands.get(0).solrDoc.getFieldValue(\"_src_\");\n    assertNotNull(content);\n    Map obj = (Map) Utils.fromJSONString(content);\n    assertEquals(Boolean.TRUE, obj.get(\"bool\"));\n    assertEquals(\"v0\", obj.get(\"f0\"));\n    assertNotNull(obj.get(\"f0\"));\n    assertNotNull(obj.get(\"array\"));\n    assertNotNull(obj.get(\"boosted\"));\n\n    content = (String) p.addCommands.get(1).solrDoc.getFieldValue(\"_src_\");\n    assertNotNull(content);\n    obj = (Map) Utils.fromJSONString(content);\n    assertEquals(\"v1\", obj.get(\"f1\"));\n    assertEquals(\"v2\", obj.get(\"f2\"));\n    assertTrue(obj.containsKey(\"f3\"));\n\n    //TODO new test method\n    doc = \"[{'id':'1'},{'id':'2'}]\".replace('\\'', '\"');\n    req = req(\"srcField\",\"_src_\");\n    req.getContext().put(\"path\",\"/update/json/docs\");\n    rsp = new SolrQueryResponse();\n    p = new BufferingRequestProcessor(null);\n    loader = new JsonLoader();\n    loader.load(req, rsp, new ContentStreamBase.StringStream(doc), p);\n    assertEquals( 2, p.addCommands.size() );\n\n    content = (String) p.addCommands.get(0).solrDoc.getFieldValue(\"_src_\");\n    assertNotNull(content);\n    obj = (Map) Utils.fromJSONString(content);\n    assertEquals(\"1\", obj.get(\"id\"));\n    content = (String) p.addCommands.get(1).solrDoc.getFieldValue(\"_src_\");\n    assertNotNull(content);\n    obj = (Map) Utils.fromJSONString(content);\n    assertEquals(\"2\", obj.get(\"id\"));\n\n    //TODO new test method\n    String json = \"{a:{\" +\n        \"b:[{c:c1, e:e1},{c:c2, e :e2, d:{p:q}}],\" +\n        \"x:y\" +\n        \"}}\";\n    req = req(\"split\", \"/|/a/b\"   );\n    req.getContext().put(\"path\",\"/update/json/docs\");\n    rsp = new SolrQueryResponse();\n    p = new BufferingRequestProcessor(null);\n    loader = new JsonLoader();\n    loader.load(req, rsp, new ContentStreamBase.StringStream(json), p);\n    assertEquals( 1, p.addCommands.size() );\n    assertEquals(\"SolrInputDocument(fields: [\" +\n        \"b=[\" +\n          \"SolrInputDocument(fields: [c=c1, e=e1]), \" +\n          \"SolrInputDocument(fields: [c=c2, e=e2, d.p=q])], \" +\n        \"a.x=y\" +\n        \"])\",  p.addCommands.get(0).solrDoc.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2336740b200d02b6a5fb18b70454dd9aa26f5b47":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b4e08e2b6886d78c91752d82ea2b436c4324cd55":["192b186234a9fb0a5aef6db66eeb49ccab1d867c"],"cf37ee1c40027de1b0be9d687aebe8f34d274ae3":["2336740b200d02b6a5fb18b70454dd9aa26f5b47","e784c17397f1969ef38227c111d76d156ed43fbd"],"8ca2a5b85f19f987ca3b1a0aafd41ab4b9e7bfd8":["9dbf1742cf31777011ef976c17df1c8507c3de9f"],"3714bcf66a68a1600e9dd11442fc1b33b62ef088":["263caed1e020aa6ed422c9243c9b1759ab27e703"],"5b8ee93140fd0efef7e101786e3ed5160a700b5f":["192b186234a9fb0a5aef6db66eeb49ccab1d867c","611f7ea4eee5babadf4129bfa5fbae964738cd7c"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["192b186234a9fb0a5aef6db66eeb49ccab1d867c","9dbf1742cf31777011ef976c17df1c8507c3de9f"],"b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77":["192b186234a9fb0a5aef6db66eeb49ccab1d867c","5b8ee93140fd0efef7e101786e3ed5160a700b5f"],"e98520789adb1d5ad05afb4956eca0944a929688":["3714bcf66a68a1600e9dd11442fc1b33b62ef088"],"d8d9512babbd72795eb013cdd392dad2e2b2313e":["b4e08e2b6886d78c91752d82ea2b436c4324cd55"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["9dbf1742cf31777011ef976c17df1c8507c3de9f","8ca2a5b85f19f987ca3b1a0aafd41ab4b9e7bfd8"],"0a22eafe3f72a4c2945eaad9547e6c78816978f4":["e784c17397f1969ef38227c111d76d156ed43fbd","ab10d7c14ce9f8db61956611a57a5a377362a633"],"9dbf1742cf31777011ef976c17df1c8507c3de9f":["d8d9512babbd72795eb013cdd392dad2e2b2313e"],"ab10d7c14ce9f8db61956611a57a5a377362a633":["e784c17397f1969ef38227c111d76d156ed43fbd"],"e784c17397f1969ef38227c111d76d156ed43fbd":["2336740b200d02b6a5fb18b70454dd9aa26f5b47"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"611f7ea4eee5babadf4129bfa5fbae964738cd7c":["192b186234a9fb0a5aef6db66eeb49ccab1d867c","b4e08e2b6886d78c91752d82ea2b436c4324cd55"],"192b186234a9fb0a5aef6db66eeb49ccab1d867c":["ab10d7c14ce9f8db61956611a57a5a377362a633"],"263caed1e020aa6ed422c9243c9b1759ab27e703":["8ca2a5b85f19f987ca3b1a0aafd41ab4b9e7bfd8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e98520789adb1d5ad05afb4956eca0944a929688"]},"commit2Childs":{"2336740b200d02b6a5fb18b70454dd9aa26f5b47":["cf37ee1c40027de1b0be9d687aebe8f34d274ae3","e784c17397f1969ef38227c111d76d156ed43fbd"],"b4e08e2b6886d78c91752d82ea2b436c4324cd55":["d8d9512babbd72795eb013cdd392dad2e2b2313e","611f7ea4eee5babadf4129bfa5fbae964738cd7c"],"cf37ee1c40027de1b0be9d687aebe8f34d274ae3":[],"8ca2a5b85f19f987ca3b1a0aafd41ab4b9e7bfd8":["e9017cf144952056066919f1ebc7897ff9bd71b1","263caed1e020aa6ed422c9243c9b1759ab27e703"],"3714bcf66a68a1600e9dd11442fc1b33b62ef088":["e98520789adb1d5ad05afb4956eca0944a929688"],"5b8ee93140fd0efef7e101786e3ed5160a700b5f":["b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77":[],"e98520789adb1d5ad05afb4956eca0944a929688":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d8d9512babbd72795eb013cdd392dad2e2b2313e":["9dbf1742cf31777011ef976c17df1c8507c3de9f"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"0a22eafe3f72a4c2945eaad9547e6c78816978f4":[],"9dbf1742cf31777011ef976c17df1c8507c3de9f":["8ca2a5b85f19f987ca3b1a0aafd41ab4b9e7bfd8","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","e9017cf144952056066919f1ebc7897ff9bd71b1"],"ab10d7c14ce9f8db61956611a57a5a377362a633":["0a22eafe3f72a4c2945eaad9547e6c78816978f4","192b186234a9fb0a5aef6db66eeb49ccab1d867c"],"e784c17397f1969ef38227c111d76d156ed43fbd":["cf37ee1c40027de1b0be9d687aebe8f34d274ae3","0a22eafe3f72a4c2945eaad9547e6c78816978f4","ab10d7c14ce9f8db61956611a57a5a377362a633"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2336740b200d02b6a5fb18b70454dd9aa26f5b47"],"611f7ea4eee5babadf4129bfa5fbae964738cd7c":["5b8ee93140fd0efef7e101786e3ed5160a700b5f"],"192b186234a9fb0a5aef6db66eeb49ccab1d867c":["b4e08e2b6886d78c91752d82ea2b436c4324cd55","5b8ee93140fd0efef7e101786e3ed5160a700b5f","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77","611f7ea4eee5babadf4129bfa5fbae964738cd7c"],"263caed1e020aa6ed422c9243c9b1759ab27e703":["3714bcf66a68a1600e9dd11442fc1b33b62ef088"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cf37ee1c40027de1b0be9d687aebe8f34d274ae3","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77","e9017cf144952056066919f1ebc7897ff9bd71b1","0a22eafe3f72a4c2945eaad9547e6c78816978f4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}