{"path":"solr/solrj/src/test/org/apache/solr/client/ref_guide_examples/JsonRequestApiTest#testJsonQueryDslBoostEquivalents().mjava","commits":[{"id":"890d9da8d20886190a080e375f93341a779474e4","date":1549505353,"type":0,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/ref_guide_examples/JsonRequestApiTest#testJsonQueryDslBoostEquivalents().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testJsonQueryDslBoostEquivalents() throws Exception {\n    SolrClient solrClient = cluster.getSolrClient();\n    QueryResponse[] responses = new QueryResponse[3];\n\n    {\n      //tag::solrj-ipod-query-boosted-basic[]\n      final SolrQuery query = new SolrQuery(\"{!boost b=log(popularity) v=\\'{!lucene df=name}iPod\\'}\");\n      final QueryResponse response = solrClient.query(COLLECTION_NAME, query);\n      //end::solrj-ipod-query-boosted-basic[]\n\n      responses[0] = response;\n    }\n\n    {\n      //tag::solrj-ipod-query-boosted-dsl-1[]\n      final Map<String, Object> queryTopLevel = new HashMap<>();\n      final Map<String, Object> boostQuery = new HashMap<>();\n      queryTopLevel.put(\"boost\", boostQuery);\n      boostQuery.put(\"b\", \"log(popularity)\");\n      boostQuery.put(\"query\", \"{!lucene df=name}iPod\");\n      final JsonQueryRequest query = new JsonQueryRequest()\n          .setQuery(queryTopLevel);\n      final QueryResponse response = query.process(solrClient, COLLECTION_NAME);\n      //end::solrj-ipod-query-boosted-dsl-1[]\n\n      responses[1] = response;\n    }\n\n    {\n      //tag::solrj-ipod-query-boosted-dsl-2[]\n      final Map<String, Object> queryTopLevel = new HashMap<>();\n      final Map<String, Object> boostProperties = new HashMap<>();\n      final Map<String, Object> luceneTopLevel = new HashMap();\n      final Map<String, Object> luceneProperties = new HashMap<>();\n      queryTopLevel.put(\"boost\", boostProperties);\n      boostProperties.put(\"b\", \"log(popularity)\");\n      boostProperties.put(\"query\", luceneTopLevel);\n      luceneTopLevel.put(\"lucene\", luceneProperties);\n      luceneProperties.put(\"df\", \"name\");\n      luceneProperties.put(\"query\", \"iPod\");\n      final JsonQueryRequest query = new JsonQueryRequest()\n          .setQuery(queryTopLevel);\n      final QueryResponse response = query.process(solrClient, COLLECTION_NAME);\n      //end::solrj-ipod-query-boosted-dsl-2[]\n\n      responses[2] = response;\n    }\n\n    for (QueryResponse response : responses) {\n      assertResponseFoundNumDocs(response, 3);\n      assertEquals(\"MA147LL/A\", response.getResults().get(0).get(\"id\"));\n      assertEquals(\"F8V7067-APL-KIT\", response.getResults().get(1).get(\"id\"));\n      assertEquals(\"IW-02\", response.getResults().get(2).get(\"id\"));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9","date":1574619880,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/ref_guide_examples/JsonRequestApiTest#testJsonQueryDslBoostEquivalents().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/ref_guide_examples/JsonRequestApiTest#testJsonQueryDslBoostEquivalents().mjava","sourceNew":"  @Test\n  public void testJsonQueryDslBoostEquivalents() throws Exception {\n    SolrClient solrClient = cluster.getSolrClient();\n    QueryResponse[] responses = new QueryResponse[3];\n\n    {\n      //tag::solrj-ipod-query-boosted-basic[]\n      final SolrQuery query = new SolrQuery(\"{!boost b=log(popularity) v=\\'{!lucene df=name}iPod\\'}\");\n      final QueryResponse response = solrClient.query(COLLECTION_NAME, query);\n      //end::solrj-ipod-query-boosted-basic[]\n\n      responses[0] = response;\n    }\n\n    {\n      //tag::solrj-ipod-query-boosted-dsl-1[]\n      final Map<String, Object> queryTopLevel = new HashMap<>();\n      final Map<String, Object> boostQuery = new HashMap<>();\n      queryTopLevel.put(\"boost\", boostQuery);\n      boostQuery.put(\"b\", \"log(popularity)\");\n      boostQuery.put(\"query\", \"{!lucene df=name}iPod\");\n      final JsonQueryRequest query = new JsonQueryRequest()\n          .setQuery(queryTopLevel);\n      final QueryResponse response = query.process(solrClient, COLLECTION_NAME);\n      //end::solrj-ipod-query-boosted-dsl-1[]\n\n      responses[1] = response;\n    }\n\n    {\n      //tag::solrj-ipod-query-boosted-dsl-2[]\n      final Map<String, Object> queryTopLevel = new HashMap<>();\n      final Map<String, Object> boostProperties = new HashMap<>();\n      final Map<String, Object> luceneTopLevel = new HashMap<>();\n      final Map<String, Object> luceneProperties = new HashMap<>();\n      queryTopLevel.put(\"boost\", boostProperties);\n      boostProperties.put(\"b\", \"log(popularity)\");\n      boostProperties.put(\"query\", luceneTopLevel);\n      luceneTopLevel.put(\"lucene\", luceneProperties);\n      luceneProperties.put(\"df\", \"name\");\n      luceneProperties.put(\"query\", \"iPod\");\n      final JsonQueryRequest query = new JsonQueryRequest()\n          .setQuery(queryTopLevel);\n      final QueryResponse response = query.process(solrClient, COLLECTION_NAME);\n      //end::solrj-ipod-query-boosted-dsl-2[]\n\n      responses[2] = response;\n    }\n\n    for (QueryResponse response : responses) {\n      assertResponseFoundNumDocs(response, 3);\n      assertEquals(\"MA147LL/A\", response.getResults().get(0).get(\"id\"));\n      assertEquals(\"F8V7067-APL-KIT\", response.getResults().get(1).get(\"id\"));\n      assertEquals(\"IW-02\", response.getResults().get(2).get(\"id\"));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testJsonQueryDslBoostEquivalents() throws Exception {\n    SolrClient solrClient = cluster.getSolrClient();\n    QueryResponse[] responses = new QueryResponse[3];\n\n    {\n      //tag::solrj-ipod-query-boosted-basic[]\n      final SolrQuery query = new SolrQuery(\"{!boost b=log(popularity) v=\\'{!lucene df=name}iPod\\'}\");\n      final QueryResponse response = solrClient.query(COLLECTION_NAME, query);\n      //end::solrj-ipod-query-boosted-basic[]\n\n      responses[0] = response;\n    }\n\n    {\n      //tag::solrj-ipod-query-boosted-dsl-1[]\n      final Map<String, Object> queryTopLevel = new HashMap<>();\n      final Map<String, Object> boostQuery = new HashMap<>();\n      queryTopLevel.put(\"boost\", boostQuery);\n      boostQuery.put(\"b\", \"log(popularity)\");\n      boostQuery.put(\"query\", \"{!lucene df=name}iPod\");\n      final JsonQueryRequest query = new JsonQueryRequest()\n          .setQuery(queryTopLevel);\n      final QueryResponse response = query.process(solrClient, COLLECTION_NAME);\n      //end::solrj-ipod-query-boosted-dsl-1[]\n\n      responses[1] = response;\n    }\n\n    {\n      //tag::solrj-ipod-query-boosted-dsl-2[]\n      final Map<String, Object> queryTopLevel = new HashMap<>();\n      final Map<String, Object> boostProperties = new HashMap<>();\n      final Map<String, Object> luceneTopLevel = new HashMap();\n      final Map<String, Object> luceneProperties = new HashMap<>();\n      queryTopLevel.put(\"boost\", boostProperties);\n      boostProperties.put(\"b\", \"log(popularity)\");\n      boostProperties.put(\"query\", luceneTopLevel);\n      luceneTopLevel.put(\"lucene\", luceneProperties);\n      luceneProperties.put(\"df\", \"name\");\n      luceneProperties.put(\"query\", \"iPod\");\n      final JsonQueryRequest query = new JsonQueryRequest()\n          .setQuery(queryTopLevel);\n      final QueryResponse response = query.process(solrClient, COLLECTION_NAME);\n      //end::solrj-ipod-query-boosted-dsl-2[]\n\n      responses[2] = response;\n    }\n\n    for (QueryResponse response : responses) {\n      assertResponseFoundNumDocs(response, 3);\n      assertEquals(\"MA147LL/A\", response.getResults().get(0).get(\"id\"));\n      assertEquals(\"F8V7067-APL-KIT\", response.getResults().get(1).get(\"id\"));\n      assertEquals(\"IW-02\", response.getResults().get(2).get(\"id\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb9c3baacabd473e8ecd6c4948aabacead49b88e","date":1574700980,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/ref_guide_examples/JsonRequestApiTest#testJsonQueryDslBoostEquivalents().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/ref_guide_examples/JsonRequestApiTest#testJsonQueryDslBoostEquivalents().mjava","sourceNew":"  @Test\n  public void testJsonQueryDslBoostEquivalents() throws Exception {\n    SolrClient solrClient = cluster.getSolrClient();\n    QueryResponse[] responses = new QueryResponse[3];\n\n    {\n      //tag::solrj-ipod-query-boosted-basic[]\n      final SolrQuery query = new SolrQuery(\"{!boost b=log(popularity) v=\\'{!lucene df=name}iPod\\'}\");\n      final QueryResponse response = solrClient.query(COLLECTION_NAME, query);\n      //end::solrj-ipod-query-boosted-basic[]\n\n      responses[0] = response;\n    }\n\n    {\n      //tag::solrj-ipod-query-boosted-dsl-1[]\n      final Map<String, Object> queryTopLevel = new HashMap<>();\n      final Map<String, Object> boostQuery = new HashMap<>();\n      queryTopLevel.put(\"boost\", boostQuery);\n      boostQuery.put(\"b\", \"log(popularity)\");\n      boostQuery.put(\"query\", \"{!lucene df=name}iPod\");\n      final JsonQueryRequest query = new JsonQueryRequest()\n          .setQuery(queryTopLevel);\n      final QueryResponse response = query.process(solrClient, COLLECTION_NAME);\n      //end::solrj-ipod-query-boosted-dsl-1[]\n\n      responses[1] = response;\n    }\n\n    {\n      //tag::solrj-ipod-query-boosted-dsl-2[]\n      final Map<String, Object> queryTopLevel = new HashMap<>();\n      final Map<String, Object> boostProperties = new HashMap<>();\n      final Map<String, Object> luceneTopLevel = new HashMap();\n      final Map<String, Object> luceneProperties = new HashMap<>();\n      queryTopLevel.put(\"boost\", boostProperties);\n      boostProperties.put(\"b\", \"log(popularity)\");\n      boostProperties.put(\"query\", luceneTopLevel);\n      luceneTopLevel.put(\"lucene\", luceneProperties);\n      luceneProperties.put(\"df\", \"name\");\n      luceneProperties.put(\"query\", \"iPod\");\n      final JsonQueryRequest query = new JsonQueryRequest()\n          .setQuery(queryTopLevel);\n      final QueryResponse response = query.process(solrClient, COLLECTION_NAME);\n      //end::solrj-ipod-query-boosted-dsl-2[]\n\n      responses[2] = response;\n    }\n\n    for (QueryResponse response : responses) {\n      assertResponseFoundNumDocs(response, 3);\n      assertEquals(\"MA147LL/A\", response.getResults().get(0).get(\"id\"));\n      assertEquals(\"F8V7067-APL-KIT\", response.getResults().get(1).get(\"id\"));\n      assertEquals(\"IW-02\", response.getResults().get(2).get(\"id\"));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testJsonQueryDslBoostEquivalents() throws Exception {\n    SolrClient solrClient = cluster.getSolrClient();\n    QueryResponse[] responses = new QueryResponse[3];\n\n    {\n      //tag::solrj-ipod-query-boosted-basic[]\n      final SolrQuery query = new SolrQuery(\"{!boost b=log(popularity) v=\\'{!lucene df=name}iPod\\'}\");\n      final QueryResponse response = solrClient.query(COLLECTION_NAME, query);\n      //end::solrj-ipod-query-boosted-basic[]\n\n      responses[0] = response;\n    }\n\n    {\n      //tag::solrj-ipod-query-boosted-dsl-1[]\n      final Map<String, Object> queryTopLevel = new HashMap<>();\n      final Map<String, Object> boostQuery = new HashMap<>();\n      queryTopLevel.put(\"boost\", boostQuery);\n      boostQuery.put(\"b\", \"log(popularity)\");\n      boostQuery.put(\"query\", \"{!lucene df=name}iPod\");\n      final JsonQueryRequest query = new JsonQueryRequest()\n          .setQuery(queryTopLevel);\n      final QueryResponse response = query.process(solrClient, COLLECTION_NAME);\n      //end::solrj-ipod-query-boosted-dsl-1[]\n\n      responses[1] = response;\n    }\n\n    {\n      //tag::solrj-ipod-query-boosted-dsl-2[]\n      final Map<String, Object> queryTopLevel = new HashMap<>();\n      final Map<String, Object> boostProperties = new HashMap<>();\n      final Map<String, Object> luceneTopLevel = new HashMap<>();\n      final Map<String, Object> luceneProperties = new HashMap<>();\n      queryTopLevel.put(\"boost\", boostProperties);\n      boostProperties.put(\"b\", \"log(popularity)\");\n      boostProperties.put(\"query\", luceneTopLevel);\n      luceneTopLevel.put(\"lucene\", luceneProperties);\n      luceneProperties.put(\"df\", \"name\");\n      luceneProperties.put(\"query\", \"iPod\");\n      final JsonQueryRequest query = new JsonQueryRequest()\n          .setQuery(queryTopLevel);\n      final QueryResponse response = query.process(solrClient, COLLECTION_NAME);\n      //end::solrj-ipod-query-boosted-dsl-2[]\n\n      responses[2] = response;\n    }\n\n    for (QueryResponse response : responses) {\n      assertResponseFoundNumDocs(response, 3);\n      assertEquals(\"MA147LL/A\", response.getResults().get(0).get(\"id\"));\n      assertEquals(\"F8V7067-APL-KIT\", response.getResults().get(1).get(\"id\"));\n      assertEquals(\"IW-02\", response.getResults().get(2).get(\"id\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ba1b632c041956c93c41aa1143d16a567014891","date":1592328473,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/ref_guide_examples/JsonRequestApiTest#testJsonQueryDslBoostEquivalents().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/ref_guide_examples/JsonRequestApiTest#testJsonQueryDslBoostEquivalents().mjava","sourceNew":"  @Test\n  public void testJsonQueryDslBoostEquivalents() throws Exception {\n    SolrClient solrClient = cluster.getSolrClient();\n    QueryResponse[] responses = new QueryResponse[3];\n\n    {\n      //tag::solrj-ipod-query-boosted-basic[]\n      final SolrQuery query = new SolrQuery(\"{!boost b=log(popularity) v=\\'{!lucene df=name}iPod\\'}\");\n      final QueryResponse response = solrClient.query(COLLECTION_NAME, query);\n      //end::solrj-ipod-query-boosted-basic[]\n\n      responses[0] = response;\n    }\n\n    {\n      //tag::solrj-ipod-query-boosted-dsl-1[]\n      final Map<String, Object> queryTopLevel = new HashMap<>();\n      final Map<String, Object> boostQuery = new HashMap<>();\n      queryTopLevel.put(\"boost\", boostQuery);\n      boostQuery.put(\"b\", \"log(popularity)\");\n      boostQuery.put(\"query\", \"{!lucene df=name}iPod\");\n      final JsonQueryRequest query = new JsonQueryRequest()\n          .setQuery(queryTopLevel);\n      final QueryResponse response = query.process(solrClient, COLLECTION_NAME);\n      //end::solrj-ipod-query-boosted-dsl-1[]\n\n      responses[1] = response;\n    }\n\n    {\n      //tag::solrj-ipod-query-boosted-dsl-2[]\n      final Map<String, Object> queryTopLevel = new HashMap<>();\n      final Map<String, Object> boostProperties = new HashMap<>();\n      final Map<String, Object> luceneTopLevel = new HashMap<>();\n      final Map<String, Object> luceneProperties = new HashMap<>();\n      queryTopLevel.put(\"boost\", boostProperties);\n      boostProperties.put(\"b\", \"log(popularity)\");\n      boostProperties.put(\"query\", luceneTopLevel);\n      luceneTopLevel.put(\"lucene\", luceneProperties);\n      luceneProperties.put(\"df\", \"name\");\n      luceneProperties.put(\"query\", \"iPod\");\n      final JsonQueryRequest query = new JsonQueryRequest()\n          .setQuery(queryTopLevel);\n      final QueryResponse response = query.process(solrClient, COLLECTION_NAME);\n      //end::solrj-ipod-query-boosted-dsl-2[]\n\n      responses[2] = response;\n    }\n\n    for (QueryResponse response : responses) {\n      assertResponseFoundNumDocs(response, 3);\n      assertEquals(\"MA147LL/A\", response.getResults().get(0).get(\"id\"));\n      assertEquals(\"F8V7067-APL-KIT\", response.getResults().get(1).get(\"id\"));\n      assertEquals(\"IW-02\", response.getResults().get(2).get(\"id\"));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testJsonQueryDslBoostEquivalents() throws Exception {\n    SolrClient solrClient = cluster.getSolrClient();\n    QueryResponse[] responses = new QueryResponse[3];\n\n    {\n      //tag::solrj-ipod-query-boosted-basic[]\n      final SolrQuery query = new SolrQuery(\"{!boost b=log(popularity) v=\\'{!lucene df=name}iPod\\'}\");\n      final QueryResponse response = solrClient.query(COLLECTION_NAME, query);\n      //end::solrj-ipod-query-boosted-basic[]\n\n      responses[0] = response;\n    }\n\n    {\n      //tag::solrj-ipod-query-boosted-dsl-1[]\n      final Map<String, Object> queryTopLevel = new HashMap<>();\n      final Map<String, Object> boostQuery = new HashMap<>();\n      queryTopLevel.put(\"boost\", boostQuery);\n      boostQuery.put(\"b\", \"log(popularity)\");\n      boostQuery.put(\"query\", \"{!lucene df=name}iPod\");\n      final JsonQueryRequest query = new JsonQueryRequest()\n          .setQuery(queryTopLevel);\n      final QueryResponse response = query.process(solrClient, COLLECTION_NAME);\n      //end::solrj-ipod-query-boosted-dsl-1[]\n\n      responses[1] = response;\n    }\n\n    {\n      //tag::solrj-ipod-query-boosted-dsl-2[]\n      final Map<String, Object> queryTopLevel = new HashMap<>();\n      final Map<String, Object> boostProperties = new HashMap<>();\n      final Map<String, Object> luceneTopLevel = new HashMap();\n      final Map<String, Object> luceneProperties = new HashMap<>();\n      queryTopLevel.put(\"boost\", boostProperties);\n      boostProperties.put(\"b\", \"log(popularity)\");\n      boostProperties.put(\"query\", luceneTopLevel);\n      luceneTopLevel.put(\"lucene\", luceneProperties);\n      luceneProperties.put(\"df\", \"name\");\n      luceneProperties.put(\"query\", \"iPod\");\n      final JsonQueryRequest query = new JsonQueryRequest()\n          .setQuery(queryTopLevel);\n      final QueryResponse response = query.process(solrClient, COLLECTION_NAME);\n      //end::solrj-ipod-query-boosted-dsl-2[]\n\n      responses[2] = response;\n    }\n\n    for (QueryResponse response : responses) {\n      assertResponseFoundNumDocs(response, 3);\n      assertEquals(\"MA147LL/A\", response.getResults().get(0).get(\"id\"));\n      assertEquals(\"F8V7067-APL-KIT\", response.getResults().get(1).get(\"id\"));\n      assertEquals(\"IW-02\", response.getResults().get(2).get(\"id\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9ba1b632c041956c93c41aa1143d16a567014891":["bb9c3baacabd473e8ecd6c4948aabacead49b88e"],"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9":["890d9da8d20886190a080e375f93341a779474e4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bb9c3baacabd473e8ecd6c4948aabacead49b88e":["a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9"],"890d9da8d20886190a080e375f93341a779474e4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ba1b632c041956c93c41aa1143d16a567014891"]},"commit2Childs":{"9ba1b632c041956c93c41aa1143d16a567014891":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9":["bb9c3baacabd473e8ecd6c4948aabacead49b88e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["890d9da8d20886190a080e375f93341a779474e4"],"bb9c3baacabd473e8ecd6c4948aabacead49b88e":["9ba1b632c041956c93c41aa1143d16a567014891"],"890d9da8d20886190a080e375f93341a779474e4":["a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}