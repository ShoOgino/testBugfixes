{"path":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#loadReporter(String,SolrResourceLoader,PluginInfo).mjava","commits":[{"id":"0265144286422ad99682a00904cc2536b79c8535","date":1482222684,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#loadReporter(String,SolrResourceLoader,PluginInfo).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Create and register an instance of {@link SolrMetricReporter}.\n   * @param registry reporter is associated with this registry\n   * @param loader loader to use when creating an instance of the reporter\n   * @param pluginInfo plugin configuration. Plugin \"name\" and \"class\" attributes are required.\n   * @throws Exception if any argument is missing or invalid\n   */\n  public void loadReporter(String registry, SolrResourceLoader loader, PluginInfo pluginInfo) throws Exception {\n    if (registry == null || pluginInfo == null || pluginInfo.name == null || pluginInfo.className == null) {\n      throw new IllegalArgumentException(\"loadReporter called with missing arguments: \" +\n          \"registry=\" + registry + \", loader=\" + loader + \", pluginInfo=\" + pluginInfo);\n    }\n    // make sure we use a name with prefix, with overrides\n    registry = overridableRegistryName(registry);\n    SolrMetricReporter reporter = loader.newInstance(\n        pluginInfo.className,\n        SolrMetricReporter.class,\n        new String[0],\n        new Class[] { SolrMetricManager.class, String.class },\n        new Object[] { this, registry }\n    );\n    try {\n      reporter.init(pluginInfo);\n    } catch (IllegalStateException e) {\n      throw new IllegalArgumentException(\"reporter init failed: \" + pluginInfo, e);\n    }\n    try {\n      if (!reportersLock.tryLock(10, TimeUnit.SECONDS)) {\n        throw new Exception(\"Could not obtain lock to modify reporters registry: \" + registry);\n      }\n    } catch (InterruptedException e) {\n      throw new Exception(\"Interrupted while trying to obtain lock to modify reporters registry: \" + registry);\n    }\n    try {\n      Map<String, SolrMetricReporter> perRegistry = reporters.get(registry);\n      if (perRegistry == null) {\n        perRegistry = new HashMap<>();\n        reporters.put(registry, perRegistry);\n      }\n      SolrMetricReporter oldReporter = perRegistry.get(pluginInfo.name);\n      if (oldReporter != null) { // close it\n        log.info(\"Replacing existing reporter '\" + pluginInfo.name + \"' in registry '\" + registry + \"': \" + oldReporter.toString());\n        oldReporter.close();\n      }\n      perRegistry.put(pluginInfo.name, reporter);\n\n    } finally {\n      reportersLock.unlock();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","date":1482251961,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#loadReporter(String,SolrResourceLoader,PluginInfo).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Create and register an instance of {@link SolrMetricReporter}.\n   * @param registry reporter is associated with this registry\n   * @param loader loader to use when creating an instance of the reporter\n   * @param pluginInfo plugin configuration. Plugin \"name\" and \"class\" attributes are required.\n   * @throws Exception if any argument is missing or invalid\n   */\n  public void loadReporter(String registry, SolrResourceLoader loader, PluginInfo pluginInfo) throws Exception {\n    if (registry == null || pluginInfo == null || pluginInfo.name == null || pluginInfo.className == null) {\n      throw new IllegalArgumentException(\"loadReporter called with missing arguments: \" +\n          \"registry=\" + registry + \", loader=\" + loader + \", pluginInfo=\" + pluginInfo);\n    }\n    // make sure we use a name with prefix, with overrides\n    registry = overridableRegistryName(registry);\n    SolrMetricReporter reporter = loader.newInstance(\n        pluginInfo.className,\n        SolrMetricReporter.class,\n        new String[0],\n        new Class[] { SolrMetricManager.class, String.class },\n        new Object[] { this, registry }\n    );\n    try {\n      reporter.init(pluginInfo);\n    } catch (IllegalStateException e) {\n      throw new IllegalArgumentException(\"reporter init failed: \" + pluginInfo, e);\n    }\n    try {\n      if (!reportersLock.tryLock(10, TimeUnit.SECONDS)) {\n        throw new Exception(\"Could not obtain lock to modify reporters registry: \" + registry);\n      }\n    } catch (InterruptedException e) {\n      throw new Exception(\"Interrupted while trying to obtain lock to modify reporters registry: \" + registry);\n    }\n    try {\n      Map<String, SolrMetricReporter> perRegistry = reporters.get(registry);\n      if (perRegistry == null) {\n        perRegistry = new HashMap<>();\n        reporters.put(registry, perRegistry);\n      }\n      SolrMetricReporter oldReporter = perRegistry.get(pluginInfo.name);\n      if (oldReporter != null) { // close it\n        log.info(\"Replacing existing reporter '\" + pluginInfo.name + \"' in registry '\" + registry + \"': \" + oldReporter.toString());\n        oldReporter.close();\n      }\n      perRegistry.put(pluginInfo.name, reporter);\n\n    } finally {\n      reportersLock.unlock();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"073f1aa70444ec64f3e216816af2a3b43fa38fe7","date":1488920481,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#loadReporter(String,SolrResourceLoader,PluginInfo,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#loadReporter(String,SolrResourceLoader,PluginInfo).mjava","sourceNew":"  /**\n   * Create and register an instance of {@link SolrMetricReporter}.\n   * @param registry reporter is associated with this registry\n   * @param loader loader to use when creating an instance of the reporter\n   * @param pluginInfo plugin configuration. Plugin \"name\" and \"class\" attributes are required.\n   * @param tag optional tag for the reporter, to distinguish reporters logically created for different parent\n   *            component instances.\n   * @return instance of newly created and registered reporter\n   * @throws Exception if any argument is missing or invalid\n   */\n  public SolrMetricReporter loadReporter(String registry, SolrResourceLoader loader, PluginInfo pluginInfo, String tag) throws Exception {\n    if (registry == null || pluginInfo == null || pluginInfo.name == null || pluginInfo.className == null) {\n      throw new IllegalArgumentException(\"loadReporter called with missing arguments: \" +\n          \"registry=\" + registry + \", loader=\" + loader + \", pluginInfo=\" + pluginInfo);\n    }\n    // make sure we use a name with prefix, with overrides\n    registry = overridableRegistryName(registry);\n    SolrMetricReporter reporter = loader.newInstance(\n        pluginInfo.className,\n        SolrMetricReporter.class,\n        new String[0],\n        new Class[]{SolrMetricManager.class, String.class},\n        new Object[]{this, registry}\n    );\n    try {\n      reporter.init(pluginInfo);\n    } catch (IllegalStateException e) {\n      throw new IllegalArgumentException(\"reporter init failed: \" + pluginInfo, e);\n    }\n    registerReporter(registry, pluginInfo.name, tag, reporter);\n    return reporter;\n  }\n\n","sourceOld":"  /**\n   * Create and register an instance of {@link SolrMetricReporter}.\n   * @param registry reporter is associated with this registry\n   * @param loader loader to use when creating an instance of the reporter\n   * @param pluginInfo plugin configuration. Plugin \"name\" and \"class\" attributes are required.\n   * @throws Exception if any argument is missing or invalid\n   */\n  public void loadReporter(String registry, SolrResourceLoader loader, PluginInfo pluginInfo) throws Exception {\n    if (registry == null || pluginInfo == null || pluginInfo.name == null || pluginInfo.className == null) {\n      throw new IllegalArgumentException(\"loadReporter called with missing arguments: \" +\n          \"registry=\" + registry + \", loader=\" + loader + \", pluginInfo=\" + pluginInfo);\n    }\n    // make sure we use a name with prefix, with overrides\n    registry = overridableRegistryName(registry);\n    SolrMetricReporter reporter = loader.newInstance(\n        pluginInfo.className,\n        SolrMetricReporter.class,\n        new String[0],\n        new Class[] { SolrMetricManager.class, String.class },\n        new Object[] { this, registry }\n    );\n    try {\n      reporter.init(pluginInfo);\n    } catch (IllegalStateException e) {\n      throw new IllegalArgumentException(\"reporter init failed: \" + pluginInfo, e);\n    }\n    try {\n      if (!reportersLock.tryLock(10, TimeUnit.SECONDS)) {\n        throw new Exception(\"Could not obtain lock to modify reporters registry: \" + registry);\n      }\n    } catch (InterruptedException e) {\n      throw new Exception(\"Interrupted while trying to obtain lock to modify reporters registry: \" + registry);\n    }\n    try {\n      Map<String, SolrMetricReporter> perRegistry = reporters.get(registry);\n      if (perRegistry == null) {\n        perRegistry = new HashMap<>();\n        reporters.put(registry, perRegistry);\n      }\n      SolrMetricReporter oldReporter = perRegistry.get(pluginInfo.name);\n      if (oldReporter != null) { // close it\n        log.info(\"Replacing existing reporter '\" + pluginInfo.name + \"' in registry '\" + registry + \"': \" + oldReporter.toString());\n        oldReporter.close();\n      }\n      perRegistry.put(pluginInfo.name, reporter);\n\n    } finally {\n      reportersLock.unlock();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"073f1aa70444ec64f3e216816af2a3b43fa38fe7","date":1488920481,"type":6,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#registerReporter(String,String,String,SolrMetricReporter).mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#loadReporter(String,SolrResourceLoader,PluginInfo).mjava","sourceNew":"  private void registerReporter(String registry, String name, String tag, SolrMetricReporter reporter) throws Exception {\n    try {\n      if (!reportersLock.tryLock(10, TimeUnit.SECONDS)) {\n        throw new Exception(\"Could not obtain lock to modify reporters registry: \" + registry);\n      }\n    } catch (InterruptedException e) {\n      throw new Exception(\"Interrupted while trying to obtain lock to modify reporters registry: \" + registry);\n    }\n    try {\n      Map<String, SolrMetricReporter> perRegistry = reporters.get(registry);\n      if (perRegistry == null) {\n        perRegistry = new HashMap<>();\n        reporters.put(registry, perRegistry);\n      }\n      if (tag != null && !tag.isEmpty()) {\n        name = name + \"@\" + tag;\n      }\n      SolrMetricReporter oldReporter = perRegistry.get(name);\n      if (oldReporter != null) { // close it\n        log.info(\"Replacing existing reporter '\" + name + \"' in registry '\" + registry + \"': \" + oldReporter.toString());\n        oldReporter.close();\n      }\n      perRegistry.put(name, reporter);\n\n    } finally {\n      reportersLock.unlock();\n    }\n  }\n\n","sourceOld":"  /**\n   * Create and register an instance of {@link SolrMetricReporter}.\n   * @param registry reporter is associated with this registry\n   * @param loader loader to use when creating an instance of the reporter\n   * @param pluginInfo plugin configuration. Plugin \"name\" and \"class\" attributes are required.\n   * @throws Exception if any argument is missing or invalid\n   */\n  public void loadReporter(String registry, SolrResourceLoader loader, PluginInfo pluginInfo) throws Exception {\n    if (registry == null || pluginInfo == null || pluginInfo.name == null || pluginInfo.className == null) {\n      throw new IllegalArgumentException(\"loadReporter called with missing arguments: \" +\n          \"registry=\" + registry + \", loader=\" + loader + \", pluginInfo=\" + pluginInfo);\n    }\n    // make sure we use a name with prefix, with overrides\n    registry = overridableRegistryName(registry);\n    SolrMetricReporter reporter = loader.newInstance(\n        pluginInfo.className,\n        SolrMetricReporter.class,\n        new String[0],\n        new Class[] { SolrMetricManager.class, String.class },\n        new Object[] { this, registry }\n    );\n    try {\n      reporter.init(pluginInfo);\n    } catch (IllegalStateException e) {\n      throw new IllegalArgumentException(\"reporter init failed: \" + pluginInfo, e);\n    }\n    try {\n      if (!reportersLock.tryLock(10, TimeUnit.SECONDS)) {\n        throw new Exception(\"Could not obtain lock to modify reporters registry: \" + registry);\n      }\n    } catch (InterruptedException e) {\n      throw new Exception(\"Interrupted while trying to obtain lock to modify reporters registry: \" + registry);\n    }\n    try {\n      Map<String, SolrMetricReporter> perRegistry = reporters.get(registry);\n      if (perRegistry == null) {\n        perRegistry = new HashMap<>();\n        reporters.put(registry, perRegistry);\n      }\n      SolrMetricReporter oldReporter = perRegistry.get(pluginInfo.name);\n      if (oldReporter != null) { // close it\n        log.info(\"Replacing existing reporter '\" + pluginInfo.name + \"' in registry '\" + registry + \"': \" + oldReporter.toString());\n        oldReporter.close();\n      }\n      perRegistry.put(pluginInfo.name, reporter);\n\n    } finally {\n      reportersLock.unlock();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0265144286422ad99682a00904cc2536b79c8535":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0265144286422ad99682a00904cc2536b79c8535"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"073f1aa70444ec64f3e216816af2a3b43fa38fe7":["0265144286422ad99682a00904cc2536b79c8535"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["073f1aa70444ec64f3e216816af2a3b43fa38fe7"]},"commit2Childs":{"0265144286422ad99682a00904cc2536b79c8535":["5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","073f1aa70444ec64f3e216816af2a3b43fa38fe7"],"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0265144286422ad99682a00904cc2536b79c8535","5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf"],"073f1aa70444ec64f3e216816af2a3b43fa38fe7":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}