{"path":"solr/test-framework/src/java/org/apache/solr/cloud/StopableIndexingThread#run().mjava","commits":[{"id":"19389fe47925b510b2811e2b385a75f7ad19dcca","date":1393903127,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/StopableIndexingThread#run().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void run() {\n    int i = 0;\n    int numDone = 0;\n    numDeletes = 0;\n    numAdds = 0;\n    \n    while (true && !stop) {\n      if (numCycles != -1) {\n        if (numDone > numCycles) {\n          break;\n        }\n      }\n      ++numDone;\n      String id = this.id + \"-\" + i;\n      ++i;\n      boolean addFailed = false;\n      \n      if (doDeletes && AbstractFullDistribZkTestBase.random().nextBoolean() && deletes.size() > 0) {\n        String delete = deletes.remove(0);\n        try {\n          numDeletes++;\n          if (controlClient != null) {\n            UpdateRequest req = new UpdateRequest();\n            req.deleteById(delete);\n            req.setParam(\"CONTROL\", \"TRUE\");\n            req.process(controlClient);\n          }\n          \n          cloudClient.deleteById(delete);\n        } catch (Exception e) {\n          System.err.println(\"REQUEST FAILED:\");\n          e.printStackTrace();\n          if (e instanceof SolrServerException) {\n            System.err.println(\"ROOT CAUSE:\");\n            ((SolrServerException) e).getRootCause().printStackTrace();\n          }\n          deleteFails.add(id);\n        }\n      }\n      \n      try {\n        numAdds++;\n        indexr(\"id\", id, i1, 50, t1,\n            \"to come to the aid of their country.\");\n      } catch (Exception e) {\n        addFailed = true;\n        System.err.println(\"REQUEST FAILED:\");\n        e.printStackTrace();\n        if (e instanceof SolrServerException) {\n          System.err.println(\"ROOT CAUSE:\");\n          ((SolrServerException) e).getRootCause().printStackTrace();\n        }\n        addFails.add(id);\n      }\n      \n      if (!addFailed && doDeletes && AbstractFullDistribZkTestBase.random().nextBoolean()) {\n        deletes.add(id);\n      }\n      \n      try {\n        Thread.currentThread().sleep(AbstractFullDistribZkTestBase.random().nextInt(100));\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n      }\n    }\n    \n    System.err.println(\"added docs:\" + numAdds + \" with \" + (addFails.size() + deleteFails.size()) + \" fails\"\n        + \" deletes:\" + numDeletes);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["6c94d2661bc1c14426980ec7882e951fdcff08d0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"96ea64d994d340044e0d57aeb6a5871539d10ca5","date":1394225445,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/StopableIndexingThread#run().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void run() {\n    int i = 0;\n    int numDone = 0;\n    numDeletes = 0;\n    numAdds = 0;\n    \n    while (true && !stop) {\n      if (numCycles != -1) {\n        if (numDone > numCycles) {\n          break;\n        }\n      }\n      ++numDone;\n      String id = this.id + \"-\" + i;\n      ++i;\n      boolean addFailed = false;\n      \n      if (doDeletes && AbstractFullDistribZkTestBase.random().nextBoolean() && deletes.size() > 0) {\n        String delete = deletes.remove(0);\n        try {\n          numDeletes++;\n          if (controlClient != null) {\n            UpdateRequest req = new UpdateRequest();\n            req.deleteById(delete);\n            req.setParam(\"CONTROL\", \"TRUE\");\n            req.process(controlClient);\n          }\n          \n          cloudClient.deleteById(delete);\n        } catch (Exception e) {\n          System.err.println(\"REQUEST FAILED:\");\n          e.printStackTrace();\n          if (e instanceof SolrServerException) {\n            System.err.println(\"ROOT CAUSE:\");\n            ((SolrServerException) e).getRootCause().printStackTrace();\n          }\n          deleteFails.add(id);\n        }\n      }\n      \n      try {\n        numAdds++;\n        indexr(\"id\", id, i1, 50, t1,\n            \"to come to the aid of their country.\");\n      } catch (Exception e) {\n        addFailed = true;\n        System.err.println(\"REQUEST FAILED:\");\n        e.printStackTrace();\n        if (e instanceof SolrServerException) {\n          System.err.println(\"ROOT CAUSE:\");\n          ((SolrServerException) e).getRootCause().printStackTrace();\n        }\n        addFails.add(id);\n      }\n      \n      if (!addFailed && doDeletes && AbstractFullDistribZkTestBase.random().nextBoolean()) {\n        deletes.add(id);\n      }\n      \n      try {\n        Thread.currentThread().sleep(AbstractFullDistribZkTestBase.random().nextInt(100));\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n      }\n    }\n    \n    System.err.println(\"added docs:\" + numAdds + \" with \" + (addFails.size() + deleteFails.size()) + \" fails\"\n        + \" deletes:\" + numDeletes);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e88f1cdc013337c30e653e8b0a6632fe8546695c","date":1398049443,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/StopableIndexingThread#run().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/StopableIndexingThread#run().mjava","sourceNew":"  @Override\n  public void run() {\n    int i = 0;\n    int numDone = 0;\n    numDeletes = 0;\n    numAdds = 0;\n    \n    while (true && !stop) {\n      if (numCycles != -1) {\n        if (numDone > numCycles) {\n          break;\n        }\n      }\n      ++numDone;\n      String id = this.id + \"-\" + i;\n      ++i;\n      boolean addFailed = false;\n      \n      if (doDeletes && AbstractFullDistribZkTestBase.random().nextBoolean() && deletes.size() > 0) {\n        String deleteId = deletes.remove(0);\n        try {\n          numDeletes++;\n          if (controlClient != null) {\n            UpdateRequest req = new UpdateRequest();\n            req.deleteById(deleteId);\n            req.setParam(\"CONTROL\", \"TRUE\");\n            req.process(controlClient);\n          }\n          \n          cloudClient.deleteById(deleteId);\n        } catch (Exception e) {\n          System.err.println(\"REQUEST FAILED for id=\" + deleteId);\n          e.printStackTrace();\n          if (e instanceof SolrServerException) {\n            System.err.println(\"ROOT CAUSE for id=\" + deleteId);\n            ((SolrServerException) e).getRootCause().printStackTrace();\n          }\n          deleteFails.add(id);\n        }\n      }\n      \n      try {\n        numAdds++;\n        indexr(\"id\", id, i1, 50, t1,\n            \"to come to the aid of their country.\");\n      } catch (Exception e) {\n        addFailed = true;\n        System.err.println(\"REQUEST FAILED for id=\" + id);\n        e.printStackTrace();\n        if (e instanceof SolrServerException) {\n          System.err.println(\"ROOT CAUSE for id=\" + id);\n          ((SolrServerException) e).getRootCause().printStackTrace();\n        }\n        addFails.add(id);\n      }\n      \n      if (!addFailed && doDeletes && AbstractFullDistribZkTestBase.random().nextBoolean()) {\n        deletes.add(id);\n      }\n      \n      try {\n        Thread.currentThread().sleep(AbstractFullDistribZkTestBase.random().nextInt(100));\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n      }\n    }\n    \n    System.err.println(\"added docs:\" + numAdds + \" with \" + (addFails.size() + deleteFails.size()) + \" fails\"\n        + \" deletes:\" + numDeletes);\n  }\n\n","sourceOld":"  @Override\n  public void run() {\n    int i = 0;\n    int numDone = 0;\n    numDeletes = 0;\n    numAdds = 0;\n    \n    while (true && !stop) {\n      if (numCycles != -1) {\n        if (numDone > numCycles) {\n          break;\n        }\n      }\n      ++numDone;\n      String id = this.id + \"-\" + i;\n      ++i;\n      boolean addFailed = false;\n      \n      if (doDeletes && AbstractFullDistribZkTestBase.random().nextBoolean() && deletes.size() > 0) {\n        String delete = deletes.remove(0);\n        try {\n          numDeletes++;\n          if (controlClient != null) {\n            UpdateRequest req = new UpdateRequest();\n            req.deleteById(delete);\n            req.setParam(\"CONTROL\", \"TRUE\");\n            req.process(controlClient);\n          }\n          \n          cloudClient.deleteById(delete);\n        } catch (Exception e) {\n          System.err.println(\"REQUEST FAILED:\");\n          e.printStackTrace();\n          if (e instanceof SolrServerException) {\n            System.err.println(\"ROOT CAUSE:\");\n            ((SolrServerException) e).getRootCause().printStackTrace();\n          }\n          deleteFails.add(id);\n        }\n      }\n      \n      try {\n        numAdds++;\n        indexr(\"id\", id, i1, 50, t1,\n            \"to come to the aid of their country.\");\n      } catch (Exception e) {\n        addFailed = true;\n        System.err.println(\"REQUEST FAILED:\");\n        e.printStackTrace();\n        if (e instanceof SolrServerException) {\n          System.err.println(\"ROOT CAUSE:\");\n          ((SolrServerException) e).getRootCause().printStackTrace();\n        }\n        addFails.add(id);\n      }\n      \n      if (!addFailed && doDeletes && AbstractFullDistribZkTestBase.random().nextBoolean()) {\n        deletes.add(id);\n      }\n      \n      try {\n        Thread.currentThread().sleep(AbstractFullDistribZkTestBase.random().nextInt(100));\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n      }\n    }\n    \n    System.err.println(\"added docs:\" + numAdds + \" with \" + (addFails.size() + deleteFails.size()) + \" fails\"\n        + \" deletes:\" + numDeletes);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7e2f2708ab95215a8c962643a92043bf92cc99e2","date":1398174459,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/StopableIndexingThread#run().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/StopableIndexingThread#run().mjava","sourceNew":"  @Override\n  public void run() {\n    int i = 0;\n    int numDone = 0;\n    numDeletes = 0;\n    numAdds = 0;\n    \n    while (true && !stop) {\n      if (numCycles != -1) {\n        if (numDone > numCycles) {\n          break;\n        }\n      }\n      ++numDone;\n      String id = this.id + \"-\" + i;\n      ++i;\n      boolean addFailed = false;\n      \n      if (doDeletes && AbstractFullDistribZkTestBase.random().nextBoolean() && deletes.size() > 0) {\n        String deleteId = deletes.remove(0);\n        try {\n          numDeletes++;\n          if (controlClient != null) {\n            UpdateRequest req = new UpdateRequest();\n            req.deleteById(deleteId);\n            req.setParam(\"CONTROL\", \"TRUE\");\n            req.process(controlClient);\n          }\n          \n          cloudClient.deleteById(deleteId);\n        } catch (Exception e) {\n          System.err.println(\"REQUEST FAILED for id=\" + deleteId);\n          e.printStackTrace();\n          if (e instanceof SolrServerException) {\n            System.err.println(\"ROOT CAUSE for id=\" + deleteId);\n            ((SolrServerException) e).getRootCause().printStackTrace();\n          }\n          deleteFails.add(deleteId);\n        }\n      }\n      \n      try {\n        numAdds++;\n        indexr(\"id\", id, i1, 50, t1,\n            \"to come to the aid of their country.\");\n      } catch (Exception e) {\n        addFailed = true;\n        System.err.println(\"REQUEST FAILED for id=\" + id);\n        e.printStackTrace();\n        if (e instanceof SolrServerException) {\n          System.err.println(\"ROOT CAUSE for id=\" + id);\n          ((SolrServerException) e).getRootCause().printStackTrace();\n        }\n        addFails.add(id);\n      }\n      \n      if (!addFailed && doDeletes && AbstractFullDistribZkTestBase.random().nextBoolean()) {\n        deletes.add(id);\n      }\n      \n      try {\n        Thread.currentThread().sleep(AbstractFullDistribZkTestBase.random().nextInt(100));\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n      }\n    }\n    \n    System.err.println(\"added docs:\" + numAdds + \" with \" + (addFails.size() + deleteFails.size()) + \" fails\"\n        + \" deletes:\" + numDeletes);\n  }\n\n","sourceOld":"  @Override\n  public void run() {\n    int i = 0;\n    int numDone = 0;\n    numDeletes = 0;\n    numAdds = 0;\n    \n    while (true && !stop) {\n      if (numCycles != -1) {\n        if (numDone > numCycles) {\n          break;\n        }\n      }\n      ++numDone;\n      String id = this.id + \"-\" + i;\n      ++i;\n      boolean addFailed = false;\n      \n      if (doDeletes && AbstractFullDistribZkTestBase.random().nextBoolean() && deletes.size() > 0) {\n        String deleteId = deletes.remove(0);\n        try {\n          numDeletes++;\n          if (controlClient != null) {\n            UpdateRequest req = new UpdateRequest();\n            req.deleteById(deleteId);\n            req.setParam(\"CONTROL\", \"TRUE\");\n            req.process(controlClient);\n          }\n          \n          cloudClient.deleteById(deleteId);\n        } catch (Exception e) {\n          System.err.println(\"REQUEST FAILED for id=\" + deleteId);\n          e.printStackTrace();\n          if (e instanceof SolrServerException) {\n            System.err.println(\"ROOT CAUSE for id=\" + deleteId);\n            ((SolrServerException) e).getRootCause().printStackTrace();\n          }\n          deleteFails.add(id);\n        }\n      }\n      \n      try {\n        numAdds++;\n        indexr(\"id\", id, i1, 50, t1,\n            \"to come to the aid of their country.\");\n      } catch (Exception e) {\n        addFailed = true;\n        System.err.println(\"REQUEST FAILED for id=\" + id);\n        e.printStackTrace();\n        if (e instanceof SolrServerException) {\n          System.err.println(\"ROOT CAUSE for id=\" + id);\n          ((SolrServerException) e).getRootCause().printStackTrace();\n        }\n        addFails.add(id);\n      }\n      \n      if (!addFailed && doDeletes && AbstractFullDistribZkTestBase.random().nextBoolean()) {\n        deletes.add(id);\n      }\n      \n      try {\n        Thread.currentThread().sleep(AbstractFullDistribZkTestBase.random().nextInt(100));\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n      }\n    }\n    \n    System.err.println(\"added docs:\" + numAdds + \" with \" + (addFails.size() + deleteFails.size()) + \" fails\"\n        + \" deletes:\" + numDeletes);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","date":1398844771,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/StopableIndexingThread#run().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/StopableIndexingThread#run().mjava","sourceNew":"  @Override\n  public void run() {\n    int i = 0;\n    int numDone = 0;\n    numDeletes = 0;\n    numAdds = 0;\n    \n    while (true && !stop) {\n      if (numCycles != -1) {\n        if (numDone > numCycles) {\n          break;\n        }\n      }\n      ++numDone;\n      String id = this.id + \"-\" + i;\n      ++i;\n      boolean addFailed = false;\n      \n      if (doDeletes && AbstractFullDistribZkTestBase.random().nextBoolean() && deletes.size() > 0) {\n        String deleteId = deletes.remove(0);\n        try {\n          numDeletes++;\n          if (controlClient != null) {\n            UpdateRequest req = new UpdateRequest();\n            req.deleteById(deleteId);\n            req.setParam(\"CONTROL\", \"TRUE\");\n            req.process(controlClient);\n          }\n          \n          cloudClient.deleteById(deleteId);\n        } catch (Exception e) {\n          System.err.println(\"REQUEST FAILED for id=\" + deleteId);\n          e.printStackTrace();\n          if (e instanceof SolrServerException) {\n            System.err.println(\"ROOT CAUSE for id=\" + deleteId);\n            ((SolrServerException) e).getRootCause().printStackTrace();\n          }\n          deleteFails.add(deleteId);\n        }\n      }\n      \n      try {\n        numAdds++;\n        indexr(\"id\", id, i1, 50, t1,\n            \"to come to the aid of their country.\");\n      } catch (Exception e) {\n        addFailed = true;\n        System.err.println(\"REQUEST FAILED for id=\" + id);\n        e.printStackTrace();\n        if (e instanceof SolrServerException) {\n          System.err.println(\"ROOT CAUSE for id=\" + id);\n          ((SolrServerException) e).getRootCause().printStackTrace();\n        }\n        addFails.add(id);\n      }\n      \n      if (!addFailed && doDeletes && AbstractFullDistribZkTestBase.random().nextBoolean()) {\n        deletes.add(id);\n      }\n      \n      try {\n        Thread.currentThread().sleep(AbstractFullDistribZkTestBase.random().nextInt(100));\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n      }\n    }\n    \n    System.err.println(\"added docs:\" + numAdds + \" with \" + (addFails.size() + deleteFails.size()) + \" fails\"\n        + \" deletes:\" + numDeletes);\n  }\n\n","sourceOld":"  @Override\n  public void run() {\n    int i = 0;\n    int numDone = 0;\n    numDeletes = 0;\n    numAdds = 0;\n    \n    while (true && !stop) {\n      if (numCycles != -1) {\n        if (numDone > numCycles) {\n          break;\n        }\n      }\n      ++numDone;\n      String id = this.id + \"-\" + i;\n      ++i;\n      boolean addFailed = false;\n      \n      if (doDeletes && AbstractFullDistribZkTestBase.random().nextBoolean() && deletes.size() > 0) {\n        String deleteId = deletes.remove(0);\n        try {\n          numDeletes++;\n          if (controlClient != null) {\n            UpdateRequest req = new UpdateRequest();\n            req.deleteById(deleteId);\n            req.setParam(\"CONTROL\", \"TRUE\");\n            req.process(controlClient);\n          }\n          \n          cloudClient.deleteById(deleteId);\n        } catch (Exception e) {\n          System.err.println(\"REQUEST FAILED for id=\" + deleteId);\n          e.printStackTrace();\n          if (e instanceof SolrServerException) {\n            System.err.println(\"ROOT CAUSE for id=\" + deleteId);\n            ((SolrServerException) e).getRootCause().printStackTrace();\n          }\n          deleteFails.add(id);\n        }\n      }\n      \n      try {\n        numAdds++;\n        indexr(\"id\", id, i1, 50, t1,\n            \"to come to the aid of their country.\");\n      } catch (Exception e) {\n        addFailed = true;\n        System.err.println(\"REQUEST FAILED for id=\" + id);\n        e.printStackTrace();\n        if (e instanceof SolrServerException) {\n          System.err.println(\"ROOT CAUSE for id=\" + id);\n          ((SolrServerException) e).getRootCause().printStackTrace();\n        }\n        addFails.add(id);\n      }\n      \n      if (!addFailed && doDeletes && AbstractFullDistribZkTestBase.random().nextBoolean()) {\n        deletes.add(id);\n      }\n      \n      try {\n        Thread.currentThread().sleep(AbstractFullDistribZkTestBase.random().nextInt(100));\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n      }\n    }\n    \n    System.err.println(\"added docs:\" + numAdds + \" with \" + (addFails.size() + deleteFails.size()) + \" fails\"\n        + \" deletes:\" + numDeletes);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6c94d2661bc1c14426980ec7882e951fdcff08d0","date":1427167177,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/StopableIndexingThread#run().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/StopableIndexingThread#run().mjava","sourceNew":"  @Override\n  public void run() {\n    int i = 0;\n    int numDone = 0;\n    numDeletes = 0;\n    numAdds = 0;\n    \n    while (true && !stop) {\n      if (numCycles != -1) {\n        if (numDone > numCycles) {\n          break;\n        }\n      }\n      ++numDone;\n      String id = this.id + \"-\" + i;\n      ++i;\n      boolean addFailed = false;\n      \n      if (doDeletes && AbstractFullDistribZkTestBase.random().nextBoolean() && deletes.size() > 0) {\n        String deleteId = deletes.remove(0);\n        try {\n          numDeletes++;\n          if (controlClient != null) {\n            UpdateRequest req = new UpdateRequest();\n            req.deleteById(deleteId);\n            req.setParam(\"CONTROL\", \"TRUE\");\n            req.process(controlClient);\n          }\n          \n          cloudClient.deleteById(deleteId);\n        } catch (Exception e) {\n          System.err.println(\"REQUEST FAILED for id=\" + deleteId);\n          e.printStackTrace();\n          if (e instanceof SolrServerException) {\n            System.err.println(\"ROOT CAUSE for id=\" + deleteId);\n            ((SolrServerException) e).getRootCause().printStackTrace();\n          }\n          deleteFails.add(deleteId);\n        }\n      }\n      \n      try {\n        numAdds++;\n        SolrInputDocument doc = new SolrInputDocument();\n        addFields(doc, \"id\", id, i1, 50, t1,\n            \"to come to the aid of their country.\");\n        addFields(doc, \"rnd_b\", true);\n        \n        docs.add(doc);\n        \n        if (docs.size() >= batchSize)  {\n          indexDocs(docs);\n          docs.clear();\n        }\n      } catch (Exception e) {\n        addFailed = true;\n        System.err.println(\"REQUEST FAILED for id=\" + id);\n        e.printStackTrace();\n        if (e instanceof SolrServerException) {\n          System.err.println(\"ROOT CAUSE for id=\" + id);\n          ((SolrServerException) e).getRootCause().printStackTrace();\n        }\n        addFails.add(id);\n      }\n      \n      if (!addFailed && doDeletes && AbstractFullDistribZkTestBase.random().nextBoolean()) {\n        deletes.add(id);\n      }\n      \n      if (docs.size() > 0 && pauseBetweenUpdates) {\n        try {\n          Thread.currentThread().sleep(AbstractFullDistribZkTestBase.random().nextInt(500) + 50);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n        }\n      }\n    }\n    \n    System.err.println(\"added docs:\" + numAdds + \" with \" + (addFails.size() + deleteFails.size()) + \" fails\"\n        + \" deletes:\" + numDeletes);\n  }\n\n","sourceOld":"  @Override\n  public void run() {\n    int i = 0;\n    int numDone = 0;\n    numDeletes = 0;\n    numAdds = 0;\n    \n    while (true && !stop) {\n      if (numCycles != -1) {\n        if (numDone > numCycles) {\n          break;\n        }\n      }\n      ++numDone;\n      String id = this.id + \"-\" + i;\n      ++i;\n      boolean addFailed = false;\n      \n      if (doDeletes && AbstractFullDistribZkTestBase.random().nextBoolean() && deletes.size() > 0) {\n        String deleteId = deletes.remove(0);\n        try {\n          numDeletes++;\n          if (controlClient != null) {\n            UpdateRequest req = new UpdateRequest();\n            req.deleteById(deleteId);\n            req.setParam(\"CONTROL\", \"TRUE\");\n            req.process(controlClient);\n          }\n          \n          cloudClient.deleteById(deleteId);\n        } catch (Exception e) {\n          System.err.println(\"REQUEST FAILED for id=\" + deleteId);\n          e.printStackTrace();\n          if (e instanceof SolrServerException) {\n            System.err.println(\"ROOT CAUSE for id=\" + deleteId);\n            ((SolrServerException) e).getRootCause().printStackTrace();\n          }\n          deleteFails.add(deleteId);\n        }\n      }\n      \n      try {\n        numAdds++;\n        indexr(\"id\", id, i1, 50, t1,\n            \"to come to the aid of their country.\");\n      } catch (Exception e) {\n        addFailed = true;\n        System.err.println(\"REQUEST FAILED for id=\" + id);\n        e.printStackTrace();\n        if (e instanceof SolrServerException) {\n          System.err.println(\"ROOT CAUSE for id=\" + id);\n          ((SolrServerException) e).getRootCause().printStackTrace();\n        }\n        addFails.add(id);\n      }\n      \n      if (!addFailed && doDeletes && AbstractFullDistribZkTestBase.random().nextBoolean()) {\n        deletes.add(id);\n      }\n      \n      try {\n        Thread.currentThread().sleep(AbstractFullDistribZkTestBase.random().nextInt(100));\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n      }\n    }\n    \n    System.err.println(\"added docs:\" + numAdds + \" with \" + (addFails.size() + deleteFails.size()) + \" fails\"\n        + \" deletes:\" + numDeletes);\n  }\n\n","bugFix":["19389fe47925b510b2811e2b385a75f7ad19dcca"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"98287baa2c8d136e801f366a73e27a23285b7b98","date":1427241813,"type":5,"author":"Ramkumar Aiyengar","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/StoppableIndexingThread#run().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/StopableIndexingThread#run().mjava","sourceNew":"  @Override\n  public void run() {\n    int i = 0;\n    int numDone = 0;\n    numDeletes = 0;\n    numAdds = 0;\n    \n    while (true && !stop) {\n      if (numCycles != -1) {\n        if (numDone > numCycles) {\n          break;\n        }\n      }\n      ++numDone;\n      String id = this.id + \"-\" + i;\n      ++i;\n      boolean addFailed = false;\n      \n      if (doDeletes && AbstractFullDistribZkTestBase.random().nextBoolean() && deletes.size() > 0) {\n        String deleteId = deletes.remove(0);\n        try {\n          numDeletes++;\n          if (controlClient != null) {\n            UpdateRequest req = new UpdateRequest();\n            req.deleteById(deleteId);\n            req.setParam(\"CONTROL\", \"TRUE\");\n            req.process(controlClient);\n          }\n          \n          cloudClient.deleteById(deleteId);\n        } catch (Exception e) {\n          System.err.println(\"REQUEST FAILED for id=\" + deleteId);\n          e.printStackTrace();\n          if (e instanceof SolrServerException) {\n            System.err.println(\"ROOT CAUSE for id=\" + deleteId);\n            ((SolrServerException) e).getRootCause().printStackTrace();\n          }\n          deleteFails.add(deleteId);\n        }\n      }\n      \n      try {\n        numAdds++;\n        SolrInputDocument doc = new SolrInputDocument();\n        addFields(doc, \"id\", id, i1, 50, t1,\n            \"to come to the aid of their country.\");\n        addFields(doc, \"rnd_b\", true);\n        \n        docs.add(doc);\n        \n        if (docs.size() >= batchSize)  {\n          indexDocs(docs);\n          docs.clear();\n        }\n      } catch (Exception e) {\n        addFailed = true;\n        System.err.println(\"REQUEST FAILED for id=\" + id);\n        e.printStackTrace();\n        if (e instanceof SolrServerException) {\n          System.err.println(\"ROOT CAUSE for id=\" + id);\n          ((SolrServerException) e).getRootCause().printStackTrace();\n        }\n        addFails.add(id);\n      }\n      \n      if (!addFailed && doDeletes && AbstractFullDistribZkTestBase.random().nextBoolean()) {\n        deletes.add(id);\n      }\n      \n      if (docs.size() > 0 && pauseBetweenUpdates) {\n        try {\n          Thread.currentThread().sleep(AbstractFullDistribZkTestBase.random().nextInt(500) + 50);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n        }\n      }\n    }\n    \n    System.err.println(\"added docs:\" + numAdds + \" with \" + (addFails.size() + deleteFails.size()) + \" fails\"\n        + \" deletes:\" + numDeletes);\n  }\n\n","sourceOld":"  @Override\n  public void run() {\n    int i = 0;\n    int numDone = 0;\n    numDeletes = 0;\n    numAdds = 0;\n    \n    while (true && !stop) {\n      if (numCycles != -1) {\n        if (numDone > numCycles) {\n          break;\n        }\n      }\n      ++numDone;\n      String id = this.id + \"-\" + i;\n      ++i;\n      boolean addFailed = false;\n      \n      if (doDeletes && AbstractFullDistribZkTestBase.random().nextBoolean() && deletes.size() > 0) {\n        String deleteId = deletes.remove(0);\n        try {\n          numDeletes++;\n          if (controlClient != null) {\n            UpdateRequest req = new UpdateRequest();\n            req.deleteById(deleteId);\n            req.setParam(\"CONTROL\", \"TRUE\");\n            req.process(controlClient);\n          }\n          \n          cloudClient.deleteById(deleteId);\n        } catch (Exception e) {\n          System.err.println(\"REQUEST FAILED for id=\" + deleteId);\n          e.printStackTrace();\n          if (e instanceof SolrServerException) {\n            System.err.println(\"ROOT CAUSE for id=\" + deleteId);\n            ((SolrServerException) e).getRootCause().printStackTrace();\n          }\n          deleteFails.add(deleteId);\n        }\n      }\n      \n      try {\n        numAdds++;\n        SolrInputDocument doc = new SolrInputDocument();\n        addFields(doc, \"id\", id, i1, 50, t1,\n            \"to come to the aid of their country.\");\n        addFields(doc, \"rnd_b\", true);\n        \n        docs.add(doc);\n        \n        if (docs.size() >= batchSize)  {\n          indexDocs(docs);\n          docs.clear();\n        }\n      } catch (Exception e) {\n        addFailed = true;\n        System.err.println(\"REQUEST FAILED for id=\" + id);\n        e.printStackTrace();\n        if (e instanceof SolrServerException) {\n          System.err.println(\"ROOT CAUSE for id=\" + id);\n          ((SolrServerException) e).getRootCause().printStackTrace();\n        }\n        addFails.add(id);\n      }\n      \n      if (!addFailed && doDeletes && AbstractFullDistribZkTestBase.random().nextBoolean()) {\n        deletes.add(id);\n      }\n      \n      if (docs.size() > 0 && pauseBetweenUpdates) {\n        try {\n          Thread.currentThread().sleep(AbstractFullDistribZkTestBase.random().nextInt(500) + 50);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n        }\n      }\n    }\n    \n    System.err.println(\"added docs:\" + numAdds + \" with \" + (addFails.size() + deleteFails.size()) + \" fails\"\n        + \" deletes:\" + numDeletes);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":4,"author":"Ryan Ernst","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/StopableIndexingThread#run().mjava","sourceNew":null,"sourceOld":"  @Override\n  public void run() {\n    int i = 0;\n    int numDone = 0;\n    numDeletes = 0;\n    numAdds = 0;\n    \n    while (true && !stop) {\n      if (numCycles != -1) {\n        if (numDone > numCycles) {\n          break;\n        }\n      }\n      ++numDone;\n      String id = this.id + \"-\" + i;\n      ++i;\n      boolean addFailed = false;\n      \n      if (doDeletes && AbstractFullDistribZkTestBase.random().nextBoolean() && deletes.size() > 0) {\n        String deleteId = deletes.remove(0);\n        try {\n          numDeletes++;\n          if (controlClient != null) {\n            UpdateRequest req = new UpdateRequest();\n            req.deleteById(deleteId);\n            req.setParam(\"CONTROL\", \"TRUE\");\n            req.process(controlClient);\n          }\n          \n          cloudClient.deleteById(deleteId);\n        } catch (Exception e) {\n          System.err.println(\"REQUEST FAILED for id=\" + deleteId);\n          e.printStackTrace();\n          if (e instanceof SolrServerException) {\n            System.err.println(\"ROOT CAUSE for id=\" + deleteId);\n            ((SolrServerException) e).getRootCause().printStackTrace();\n          }\n          deleteFails.add(deleteId);\n        }\n      }\n      \n      try {\n        numAdds++;\n        indexr(\"id\", id, i1, 50, t1,\n            \"to come to the aid of their country.\");\n      } catch (Exception e) {\n        addFailed = true;\n        System.err.println(\"REQUEST FAILED for id=\" + id);\n        e.printStackTrace();\n        if (e instanceof SolrServerException) {\n          System.err.println(\"ROOT CAUSE for id=\" + id);\n          ((SolrServerException) e).getRootCause().printStackTrace();\n        }\n        addFails.add(id);\n      }\n      \n      if (!addFailed && doDeletes && AbstractFullDistribZkTestBase.random().nextBoolean()) {\n        deletes.add(id);\n      }\n      \n      try {\n        Thread.currentThread().sleep(AbstractFullDistribZkTestBase.random().nextInt(100));\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n      }\n    }\n    \n    System.err.println(\"added docs:\" + numAdds + \" with \" + (addFails.size() + deleteFails.size()) + \" fails\"\n        + \" deletes:\" + numDeletes);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"19389fe47925b510b2811e2b385a75f7ad19dcca":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["7e2f2708ab95215a8c962643a92043bf92cc99e2","98287baa2c8d136e801f366a73e27a23285b7b98"],"96ea64d994d340044e0d57aeb6a5871539d10ca5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","19389fe47925b510b2811e2b385a75f7ad19dcca"],"e88f1cdc013337c30e653e8b0a6632fe8546695c":["19389fe47925b510b2811e2b385a75f7ad19dcca"],"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe":["e88f1cdc013337c30e653e8b0a6632fe8546695c","7e2f2708ab95215a8c962643a92043bf92cc99e2"],"6c94d2661bc1c14426980ec7882e951fdcff08d0":["7e2f2708ab95215a8c962643a92043bf92cc99e2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"98287baa2c8d136e801f366a73e27a23285b7b98":["6c94d2661bc1c14426980ec7882e951fdcff08d0"],"7e2f2708ab95215a8c962643a92043bf92cc99e2":["e88f1cdc013337c30e653e8b0a6632fe8546695c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["98287baa2c8d136e801f366a73e27a23285b7b98"]},"commit2Childs":{"19389fe47925b510b2811e2b385a75f7ad19dcca":["96ea64d994d340044e0d57aeb6a5871539d10ca5","e88f1cdc013337c30e653e8b0a6632fe8546695c"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"96ea64d994d340044e0d57aeb6a5871539d10ca5":[],"e88f1cdc013337c30e653e8b0a6632fe8546695c":["c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","7e2f2708ab95215a8c962643a92043bf92cc99e2"],"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe":[],"6c94d2661bc1c14426980ec7882e951fdcff08d0":["98287baa2c8d136e801f366a73e27a23285b7b98"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["19389fe47925b510b2811e2b385a75f7ad19dcca","96ea64d994d340044e0d57aeb6a5871539d10ca5"],"98287baa2c8d136e801f366a73e27a23285b7b98":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7e2f2708ab95215a8c962643a92043bf92cc99e2":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","6c94d2661bc1c14426980ec7882e951fdcff08d0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","96ea64d994d340044e0d57aeb6a5871539d10ca5","c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}