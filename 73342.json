{"path":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecContentSource#getNextDocData(DocData).mjava","commits":[{"id":"ecc11368dc265bfdad90214f8bf5da99016ab1e2","date":1294144090,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecContentSource#getNextDocData(DocData).mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecContentSource#getNextDocData(DocData).mjava","sourceNew":"  @Override\n  public DocData getNextDocData(DocData docData) throws NoMoreDataException, IOException {\n    String dateStr = null, name = null;\n    Reader r = null;\n    // protect reading from the TREC files by multiple threads. The rest of the\n    // method, i.e., parsing the content and returning the DocData can run\n    // unprotected.\n    synchronized (lock) {\n      if (reader == null) {\n        openNextFile();\n      }\n\n      StringBuilder docBuf = getDocBuffer();\n      \n      // 1. skip until doc start\n      docBuf.setLength(0);\n      read(docBuf, DOC, false, false, null);\n\n      // 2. name\n      docBuf.setLength(0);\n      read(docBuf, DOCNO, true, false, null);\n      name = docBuf.substring(DOCNO.length(), docBuf.indexOf(TERMINATING_DOCNO,\n          DOCNO.length()));\n      if (!excludeDocnameIteration)\n        name = name + \"_\" + iteration;\n\n      // 3. skip until doc header\n      docBuf.setLength(0);\n      read(docBuf, DOCHDR, false, false, null);\n\n      boolean findTerminatingDocHdr = false;\n\n      // 4. date - look for the date only until /DOCHDR\n      docBuf.setLength(0);\n      read(docBuf, DATE, true, false, TERMINATING_DOCHDR);\n      if (docBuf.length() != 0) {\n        // Date found.\n        dateStr = docBuf.substring(DATE.length());\n        findTerminatingDocHdr = true;\n      }\n\n      // 5. skip until end of doc header\n      if (findTerminatingDocHdr) {\n        docBuf.setLength(0);\n        read(docBuf, TERMINATING_DOCHDR, false, false, null);\n      }\n\n      // 6. collect until end of doc\n      docBuf.setLength(0);\n      read(docBuf, TERMINATING_DOC, false, true, null);\n      \n      // 7. Set up a Reader over the read content\n      r = getTrecDocReader(docBuf);\n      // Resetting the thread's reader means it will reuse the instance\n      // allocated as well as re-read from docBuf.\n      r.reset();\n      \n      // count char length of parsed html text (larger than the plain doc body text).\n      addBytes(docBuf.length()); \n    }\n\n    // This code segment relies on HtmlParser being thread safe. When we get \n    // here, everything else is already private to that thread, so we're safe.\n    Date date = dateStr != null ? parseDate(dateStr) : null;\n    try {\n      docData = htmlParser.parse(docData, name, date, r, null);\n      addDoc();\n    } catch (InterruptedException ie) {\n      throw new ThreadInterruptedException(ie);\n    }\n\n    return docData;\n  }\n\n","sourceOld":"  @Override\n  public DocData getNextDocData(DocData docData) throws NoMoreDataException, IOException {\n    String dateStr = null, name = null;\n    Reader r = null;\n    // protect reading from the TREC files by multiple threads. The rest of the\n    // method, i.e., parsing the content and returning the DocData can run\n    // unprotected.\n    synchronized (lock) {\n      if (reader == null) {\n        openNextFile();\n      }\n\n      StringBuilder docBuf = getDocBuffer();\n      \n      // 1. skip until doc start\n      docBuf.setLength(0);\n      read(docBuf, DOC, false, false, null);\n\n      // 2. name\n      docBuf.setLength(0);\n      read(docBuf, DOCNO, true, false, null);\n      name = docBuf.substring(DOCNO.length(), docBuf.indexOf(TERMINATING_DOCNO,\n          DOCNO.length()));\n      if (!excludeDocnameIteration)\n        name = name + \"_\" + iteration;\n\n      // 3. skip until doc header\n      docBuf.setLength(0);\n      read(docBuf, DOCHDR, false, false, null);\n\n      boolean findTerminatingDocHdr = false;\n\n      // 4. date - look for the date only until /DOCHDR\n      docBuf.setLength(0);\n      read(docBuf, DATE, true, false, TERMINATING_DOCHDR);\n      if (docBuf.length() != 0) {\n        // Date found.\n        dateStr = docBuf.substring(DATE.length());\n        findTerminatingDocHdr = true;\n      }\n\n      // 5. skip until end of doc header\n      if (findTerminatingDocHdr) {\n        docBuf.setLength(0);\n        read(docBuf, TERMINATING_DOCHDR, false, false, null);\n      }\n\n      // 6. collect until end of doc\n      docBuf.setLength(0);\n      read(docBuf, TERMINATING_DOC, false, true, null);\n      \n      // 7. Set up a Reader over the read content\n      r = getTrecDocReader(docBuf);\n      // Resetting the thread's reader means it will reuse the instance\n      // allocated as well as re-read from docBuf.\n      r.reset();\n      \n      // count char length of parsed html text (larger than the plain doc body text).\n      addBytes(docBuf.length()); \n    }\n\n    // This code segment relies on HtmlParser being thread safe. When we get \n    // here, everything else is already private to that thread, so we're safe.\n    Date date = dateStr != null ? parseDate(dateStr) : null;\n    try {\n      docData = htmlParser.parse(docData, name, date, r, null);\n      addDoc();\n    } catch (InterruptedException ie) {\n      throw new ThreadInterruptedException(ie);\n    }\n\n    return docData;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecContentSource#getNextDocData(DocData).mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecContentSource#getNextDocData(DocData).mjava","sourceNew":"  @Override\n  public DocData getNextDocData(DocData docData) throws NoMoreDataException, IOException {\n    String dateStr = null, name = null;\n    Reader r = null;\n    // protect reading from the TREC files by multiple threads. The rest of the\n    // method, i.e., parsing the content and returning the DocData can run\n    // unprotected.\n    synchronized (lock) {\n      if (reader == null) {\n        openNextFile();\n      }\n\n      StringBuilder docBuf = getDocBuffer();\n      \n      // 1. skip until doc start\n      docBuf.setLength(0);\n      read(docBuf, DOC, false, false, null);\n\n      // 2. name\n      docBuf.setLength(0);\n      read(docBuf, DOCNO, true, false, null);\n      name = docBuf.substring(DOCNO.length(), docBuf.indexOf(TERMINATING_DOCNO,\n          DOCNO.length()));\n      if (!excludeDocnameIteration)\n        name = name + \"_\" + iteration;\n\n      // 3. skip until doc header\n      docBuf.setLength(0);\n      read(docBuf, DOCHDR, false, false, null);\n\n      boolean findTerminatingDocHdr = false;\n\n      // 4. date - look for the date only until /DOCHDR\n      docBuf.setLength(0);\n      read(docBuf, DATE, true, false, TERMINATING_DOCHDR);\n      if (docBuf.length() != 0) {\n        // Date found.\n        dateStr = docBuf.substring(DATE.length());\n        findTerminatingDocHdr = true;\n      }\n\n      // 5. skip until end of doc header\n      if (findTerminatingDocHdr) {\n        docBuf.setLength(0);\n        read(docBuf, TERMINATING_DOCHDR, false, false, null);\n      }\n\n      // 6. collect until end of doc\n      docBuf.setLength(0);\n      read(docBuf, TERMINATING_DOC, false, true, null);\n      \n      // 7. Set up a Reader over the read content\n      r = getTrecDocReader(docBuf);\n      // Resetting the thread's reader means it will reuse the instance\n      // allocated as well as re-read from docBuf.\n      r.reset();\n      \n      // count char length of parsed html text (larger than the plain doc body text).\n      addBytes(docBuf.length()); \n    }\n\n    // This code segment relies on HtmlParser being thread safe. When we get \n    // here, everything else is already private to that thread, so we're safe.\n    Date date = dateStr != null ? parseDate(dateStr) : null;\n    try {\n      docData = htmlParser.parse(docData, name, date, r, null);\n      addDoc();\n    } catch (InterruptedException ie) {\n      throw new ThreadInterruptedException(ie);\n    }\n\n    return docData;\n  }\n\n","sourceOld":"  @Override\n  public DocData getNextDocData(DocData docData) throws NoMoreDataException, IOException {\n    String dateStr = null, name = null;\n    Reader r = null;\n    // protect reading from the TREC files by multiple threads. The rest of the\n    // method, i.e., parsing the content and returning the DocData can run\n    // unprotected.\n    synchronized (lock) {\n      if (reader == null) {\n        openNextFile();\n      }\n\n      StringBuilder docBuf = getDocBuffer();\n      \n      // 1. skip until doc start\n      docBuf.setLength(0);\n      read(docBuf, DOC, false, false, null);\n\n      // 2. name\n      docBuf.setLength(0);\n      read(docBuf, DOCNO, true, false, null);\n      name = docBuf.substring(DOCNO.length(), docBuf.indexOf(TERMINATING_DOCNO,\n          DOCNO.length()));\n      if (!excludeDocnameIteration)\n        name = name + \"_\" + iteration;\n\n      // 3. skip until doc header\n      docBuf.setLength(0);\n      read(docBuf, DOCHDR, false, false, null);\n\n      boolean findTerminatingDocHdr = false;\n\n      // 4. date - look for the date only until /DOCHDR\n      docBuf.setLength(0);\n      read(docBuf, DATE, true, false, TERMINATING_DOCHDR);\n      if (docBuf.length() != 0) {\n        // Date found.\n        dateStr = docBuf.substring(DATE.length());\n        findTerminatingDocHdr = true;\n      }\n\n      // 5. skip until end of doc header\n      if (findTerminatingDocHdr) {\n        docBuf.setLength(0);\n        read(docBuf, TERMINATING_DOCHDR, false, false, null);\n      }\n\n      // 6. collect until end of doc\n      docBuf.setLength(0);\n      read(docBuf, TERMINATING_DOC, false, true, null);\n      \n      // 7. Set up a Reader over the read content\n      r = getTrecDocReader(docBuf);\n      // Resetting the thread's reader means it will reuse the instance\n      // allocated as well as re-read from docBuf.\n      r.reset();\n      \n      // count char length of parsed html text (larger than the plain doc body text).\n      addBytes(docBuf.length()); \n    }\n\n    // This code segment relies on HtmlParser being thread safe. When we get \n    // here, everything else is already private to that thread, so we're safe.\n    Date date = dateStr != null ? parseDate(dateStr) : null;\n    try {\n      docData = htmlParser.parse(docData, name, date, r, null);\n      addDoc();\n    } catch (InterruptedException ie) {\n      throw new ThreadInterruptedException(ie);\n    }\n\n    return docData;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":1,"author":"Michael Busch","isMerge":true,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecContentSource#getNextDocData(DocData).mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecContentSource#getNextDocData(DocData).mjava","sourceNew":"  @Override\n  public DocData getNextDocData(DocData docData) throws NoMoreDataException, IOException {\n    String dateStr = null, name = null;\n    Reader r = null;\n    // protect reading from the TREC files by multiple threads. The rest of the\n    // method, i.e., parsing the content and returning the DocData can run\n    // unprotected.\n    synchronized (lock) {\n      if (reader == null) {\n        openNextFile();\n      }\n\n      StringBuilder docBuf = getDocBuffer();\n      \n      // 1. skip until doc start\n      docBuf.setLength(0);\n      read(docBuf, DOC, false, false, null);\n\n      // 2. name\n      docBuf.setLength(0);\n      read(docBuf, DOCNO, true, false, null);\n      name = docBuf.substring(DOCNO.length(), docBuf.indexOf(TERMINATING_DOCNO,\n          DOCNO.length()));\n      if (!excludeDocnameIteration)\n        name = name + \"_\" + iteration;\n\n      // 3. skip until doc header\n      docBuf.setLength(0);\n      read(docBuf, DOCHDR, false, false, null);\n\n      boolean findTerminatingDocHdr = false;\n\n      // 4. date - look for the date only until /DOCHDR\n      docBuf.setLength(0);\n      read(docBuf, DATE, true, false, TERMINATING_DOCHDR);\n      if (docBuf.length() != 0) {\n        // Date found.\n        dateStr = docBuf.substring(DATE.length());\n        findTerminatingDocHdr = true;\n      }\n\n      // 5. skip until end of doc header\n      if (findTerminatingDocHdr) {\n        docBuf.setLength(0);\n        read(docBuf, TERMINATING_DOCHDR, false, false, null);\n      }\n\n      // 6. collect until end of doc\n      docBuf.setLength(0);\n      read(docBuf, TERMINATING_DOC, false, true, null);\n      \n      // 7. Set up a Reader over the read content\n      r = getTrecDocReader(docBuf);\n      // Resetting the thread's reader means it will reuse the instance\n      // allocated as well as re-read from docBuf.\n      r.reset();\n      \n      // count char length of parsed html text (larger than the plain doc body text).\n      addBytes(docBuf.length()); \n    }\n\n    // This code segment relies on HtmlParser being thread safe. When we get \n    // here, everything else is already private to that thread, so we're safe.\n    Date date = dateStr != null ? parseDate(dateStr) : null;\n    try {\n      docData = htmlParser.parse(docData, name, date, r, null);\n      addDoc();\n    } catch (InterruptedException ie) {\n      throw new ThreadInterruptedException(ie);\n    }\n\n    return docData;\n  }\n\n","sourceOld":"  @Override\n  public DocData getNextDocData(DocData docData) throws NoMoreDataException, IOException {\n    String dateStr = null, name = null;\n    Reader r = null;\n    // protect reading from the TREC files by multiple threads. The rest of the\n    // method, i.e., parsing the content and returning the DocData can run\n    // unprotected.\n    synchronized (lock) {\n      if (reader == null) {\n        openNextFile();\n      }\n\n      StringBuilder docBuf = getDocBuffer();\n      \n      // 1. skip until doc start\n      docBuf.setLength(0);\n      read(docBuf, DOC, false, false, null);\n\n      // 2. name\n      docBuf.setLength(0);\n      read(docBuf, DOCNO, true, false, null);\n      name = docBuf.substring(DOCNO.length(), docBuf.indexOf(TERMINATING_DOCNO,\n          DOCNO.length()));\n      if (!excludeDocnameIteration)\n        name = name + \"_\" + iteration;\n\n      // 3. skip until doc header\n      docBuf.setLength(0);\n      read(docBuf, DOCHDR, false, false, null);\n\n      boolean findTerminatingDocHdr = false;\n\n      // 4. date - look for the date only until /DOCHDR\n      docBuf.setLength(0);\n      read(docBuf, DATE, true, false, TERMINATING_DOCHDR);\n      if (docBuf.length() != 0) {\n        // Date found.\n        dateStr = docBuf.substring(DATE.length());\n        findTerminatingDocHdr = true;\n      }\n\n      // 5. skip until end of doc header\n      if (findTerminatingDocHdr) {\n        docBuf.setLength(0);\n        read(docBuf, TERMINATING_DOCHDR, false, false, null);\n      }\n\n      // 6. collect until end of doc\n      docBuf.setLength(0);\n      read(docBuf, TERMINATING_DOC, false, true, null);\n      \n      // 7. Set up a Reader over the read content\n      r = getTrecDocReader(docBuf);\n      // Resetting the thread's reader means it will reuse the instance\n      // allocated as well as re-read from docBuf.\n      r.reset();\n      \n      // count char length of parsed html text (larger than the plain doc body text).\n      addBytes(docBuf.length()); \n    }\n\n    // This code segment relies on HtmlParser being thread safe. When we get \n    // here, everything else is already private to that thread, so we're safe.\n    Date date = dateStr != null ? parseDate(dateStr) : null;\n    try {\n      docData = htmlParser.parse(docData, name, date, r, null);\n      addDoc();\n    } catch (InterruptedException ie) {\n      throw new ThreadInterruptedException(ie);\n    }\n\n    return docData;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cdad2c6b6234338031bcc1f24c001a5ad66f714","date":1296866109,"type":3,"author":"Doron Cohen","isMerge":false,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecContentSource#getNextDocData(DocData).mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecContentSource#getNextDocData(DocData).mjava","sourceNew":"  @Override\n  public DocData getNextDocData(DocData docData) throws NoMoreDataException, IOException {\n    String name = null;\n    StringBuilder docBuf = getDocBuffer();\n    ParsePathType parsedPathType;\n    \n    // protect reading from the TREC files by multiple threads. The rest of the\n    // method, i.e., parsing the content and returning the DocData can run unprotected.\n    synchronized (lock) {\n      if (reader == null) {\n        openNextFile();\n      }\n      \n      // 1. skip until doc start - required for all TREC formats\n      docBuf.setLength(0);\n      read(docBuf, DOC, false, false);\n      \n      // save parsedFile for passing trecDataParser after the sync block, in \n      // case another thread will open another file in between.\n      parsedPathType = currPathType;\n      \n      // 2. name - required for all TREC formats\n      docBuf.setLength(0);\n      read(docBuf, DOCNO, true, false);\n      name = docBuf.substring(DOCNO.length(), docBuf.indexOf(TERMINATING_DOCNO,\n          DOCNO.length())).trim();\n      \n      if (!excludeDocnameIteration) {\n        name = name + \"_\" + iteration;\n      }\n\n      // 3. read all until end of doc\n      docBuf.setLength(0);\n      read(docBuf, TERMINATING_DOC, false, true);\n    }\n      \n    // count char length of text to be parsed (may be larger than the resulted plain doc body text).\n    addBytes(docBuf.length()); \n\n    // This code segment relies on HtmlParser being thread safe. When we get \n    // here, everything else is already private to that thread, so we're safe.\n    try {\n      docData = trecDocParser.parse(docData, name, this, docBuf, parsedPathType);\n      addDoc();\n    } catch (InterruptedException ie) {\n      throw new ThreadInterruptedException(ie);\n    }\n\n    return docData;\n  }\n\n","sourceOld":"  @Override\n  public DocData getNextDocData(DocData docData) throws NoMoreDataException, IOException {\n    String dateStr = null, name = null;\n    Reader r = null;\n    // protect reading from the TREC files by multiple threads. The rest of the\n    // method, i.e., parsing the content and returning the DocData can run\n    // unprotected.\n    synchronized (lock) {\n      if (reader == null) {\n        openNextFile();\n      }\n\n      StringBuilder docBuf = getDocBuffer();\n      \n      // 1. skip until doc start\n      docBuf.setLength(0);\n      read(docBuf, DOC, false, false, null);\n\n      // 2. name\n      docBuf.setLength(0);\n      read(docBuf, DOCNO, true, false, null);\n      name = docBuf.substring(DOCNO.length(), docBuf.indexOf(TERMINATING_DOCNO,\n          DOCNO.length()));\n      if (!excludeDocnameIteration)\n        name = name + \"_\" + iteration;\n\n      // 3. skip until doc header\n      docBuf.setLength(0);\n      read(docBuf, DOCHDR, false, false, null);\n\n      boolean findTerminatingDocHdr = false;\n\n      // 4. date - look for the date only until /DOCHDR\n      docBuf.setLength(0);\n      read(docBuf, DATE, true, false, TERMINATING_DOCHDR);\n      if (docBuf.length() != 0) {\n        // Date found.\n        dateStr = docBuf.substring(DATE.length());\n        findTerminatingDocHdr = true;\n      }\n\n      // 5. skip until end of doc header\n      if (findTerminatingDocHdr) {\n        docBuf.setLength(0);\n        read(docBuf, TERMINATING_DOCHDR, false, false, null);\n      }\n\n      // 6. collect until end of doc\n      docBuf.setLength(0);\n      read(docBuf, TERMINATING_DOC, false, true, null);\n      \n      // 7. Set up a Reader over the read content\n      r = getTrecDocReader(docBuf);\n      // Resetting the thread's reader means it will reuse the instance\n      // allocated as well as re-read from docBuf.\n      r.reset();\n      \n      // count char length of parsed html text (larger than the plain doc body text).\n      addBytes(docBuf.length()); \n    }\n\n    // This code segment relies on HtmlParser being thread safe. When we get \n    // here, everything else is already private to that thread, so we're safe.\n    Date date = dateStr != null ? parseDate(dateStr) : null;\n    try {\n      docData = htmlParser.parse(docData, name, date, r, null);\n      addDoc();\n    } catch (InterruptedException ie) {\n      throw new ThreadInterruptedException(ie);\n    }\n\n    return docData;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecContentSource#getNextDocData(DocData).mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecContentSource#getNextDocData(DocData).mjava","sourceNew":"  @Override\n  public DocData getNextDocData(DocData docData) throws NoMoreDataException, IOException {\n    String name = null;\n    StringBuilder docBuf = getDocBuffer();\n    ParsePathType parsedPathType;\n    \n    // protect reading from the TREC files by multiple threads. The rest of the\n    // method, i.e., parsing the content and returning the DocData can run unprotected.\n    synchronized (lock) {\n      if (reader == null) {\n        openNextFile();\n      }\n      \n      // 1. skip until doc start - required for all TREC formats\n      docBuf.setLength(0);\n      read(docBuf, DOC, false, false);\n      \n      // save parsedFile for passing trecDataParser after the sync block, in \n      // case another thread will open another file in between.\n      parsedPathType = currPathType;\n      \n      // 2. name - required for all TREC formats\n      docBuf.setLength(0);\n      read(docBuf, DOCNO, true, false);\n      name = docBuf.substring(DOCNO.length(), docBuf.indexOf(TERMINATING_DOCNO,\n          DOCNO.length())).trim();\n      \n      if (!excludeDocnameIteration) {\n        name = name + \"_\" + iteration;\n      }\n\n      // 3. read all until end of doc\n      docBuf.setLength(0);\n      read(docBuf, TERMINATING_DOC, false, true);\n    }\n      \n    // count char length of text to be parsed (may be larger than the resulted plain doc body text).\n    addBytes(docBuf.length()); \n\n    // This code segment relies on HtmlParser being thread safe. When we get \n    // here, everything else is already private to that thread, so we're safe.\n    try {\n      docData = trecDocParser.parse(docData, name, this, docBuf, parsedPathType);\n      addDoc();\n    } catch (InterruptedException ie) {\n      throw new ThreadInterruptedException(ie);\n    }\n\n    return docData;\n  }\n\n","sourceOld":"  @Override\n  public DocData getNextDocData(DocData docData) throws NoMoreDataException, IOException {\n    String dateStr = null, name = null;\n    Reader r = null;\n    // protect reading from the TREC files by multiple threads. The rest of the\n    // method, i.e., parsing the content and returning the DocData can run\n    // unprotected.\n    synchronized (lock) {\n      if (reader == null) {\n        openNextFile();\n      }\n\n      StringBuilder docBuf = getDocBuffer();\n      \n      // 1. skip until doc start\n      docBuf.setLength(0);\n      read(docBuf, DOC, false, false, null);\n\n      // 2. name\n      docBuf.setLength(0);\n      read(docBuf, DOCNO, true, false, null);\n      name = docBuf.substring(DOCNO.length(), docBuf.indexOf(TERMINATING_DOCNO,\n          DOCNO.length()));\n      if (!excludeDocnameIteration)\n        name = name + \"_\" + iteration;\n\n      // 3. skip until doc header\n      docBuf.setLength(0);\n      read(docBuf, DOCHDR, false, false, null);\n\n      boolean findTerminatingDocHdr = false;\n\n      // 4. date - look for the date only until /DOCHDR\n      docBuf.setLength(0);\n      read(docBuf, DATE, true, false, TERMINATING_DOCHDR);\n      if (docBuf.length() != 0) {\n        // Date found.\n        dateStr = docBuf.substring(DATE.length());\n        findTerminatingDocHdr = true;\n      }\n\n      // 5. skip until end of doc header\n      if (findTerminatingDocHdr) {\n        docBuf.setLength(0);\n        read(docBuf, TERMINATING_DOCHDR, false, false, null);\n      }\n\n      // 6. collect until end of doc\n      docBuf.setLength(0);\n      read(docBuf, TERMINATING_DOC, false, true, null);\n      \n      // 7. Set up a Reader over the read content\n      r = getTrecDocReader(docBuf);\n      // Resetting the thread's reader means it will reuse the instance\n      // allocated as well as re-read from docBuf.\n      r.reset();\n      \n      // count char length of parsed html text (larger than the plain doc body text).\n      addBytes(docBuf.length()); \n    }\n\n    // This code segment relies on HtmlParser being thread safe. When we get \n    // here, everything else is already private to that thread, so we're safe.\n    Date date = dateStr != null ? parseDate(dateStr) : null;\n    try {\n      docData = htmlParser.parse(docData, name, date, r, null);\n      addDoc();\n    } catch (InterruptedException ie) {\n      throw new ThreadInterruptedException(ie);\n    }\n\n    return docData;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecContentSource#getNextDocData(DocData).mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecContentSource#getNextDocData(DocData).mjava","sourceNew":"  @Override\n  public DocData getNextDocData(DocData docData) throws NoMoreDataException, IOException {\n    String name = null;\n    StringBuilder docBuf = getDocBuffer();\n    ParsePathType parsedPathType;\n    \n    // protect reading from the TREC files by multiple threads. The rest of the\n    // method, i.e., parsing the content and returning the DocData can run unprotected.\n    synchronized (lock) {\n      if (reader == null) {\n        openNextFile();\n      }\n      \n      // 1. skip until doc start - required for all TREC formats\n      docBuf.setLength(0);\n      read(docBuf, DOC, false, false);\n      \n      // save parsedFile for passing trecDataParser after the sync block, in \n      // case another thread will open another file in between.\n      parsedPathType = currPathType;\n      \n      // 2. name - required for all TREC formats\n      docBuf.setLength(0);\n      read(docBuf, DOCNO, true, false);\n      name = docBuf.substring(DOCNO.length(), docBuf.indexOf(TERMINATING_DOCNO,\n          DOCNO.length())).trim();\n      \n      if (!excludeDocnameIteration) {\n        name = name + \"_\" + iteration;\n      }\n\n      // 3. read all until end of doc\n      docBuf.setLength(0);\n      read(docBuf, TERMINATING_DOC, false, true);\n    }\n      \n    // count char length of text to be parsed (may be larger than the resulted plain doc body text).\n    addBytes(docBuf.length()); \n\n    // This code segment relies on HtmlParser being thread safe. When we get \n    // here, everything else is already private to that thread, so we're safe.\n    try {\n      docData = trecDocParser.parse(docData, name, this, docBuf, parsedPathType);\n      addDoc();\n    } catch (InterruptedException ie) {\n      throw new ThreadInterruptedException(ie);\n    }\n\n    return docData;\n  }\n\n","sourceOld":"  @Override\n  public DocData getNextDocData(DocData docData) throws NoMoreDataException, IOException {\n    String dateStr = null, name = null;\n    Reader r = null;\n    // protect reading from the TREC files by multiple threads. The rest of the\n    // method, i.e., parsing the content and returning the DocData can run\n    // unprotected.\n    synchronized (lock) {\n      if (reader == null) {\n        openNextFile();\n      }\n\n      StringBuilder docBuf = getDocBuffer();\n      \n      // 1. skip until doc start\n      docBuf.setLength(0);\n      read(docBuf, DOC, false, false, null);\n\n      // 2. name\n      docBuf.setLength(0);\n      read(docBuf, DOCNO, true, false, null);\n      name = docBuf.substring(DOCNO.length(), docBuf.indexOf(TERMINATING_DOCNO,\n          DOCNO.length()));\n      if (!excludeDocnameIteration)\n        name = name + \"_\" + iteration;\n\n      // 3. skip until doc header\n      docBuf.setLength(0);\n      read(docBuf, DOCHDR, false, false, null);\n\n      boolean findTerminatingDocHdr = false;\n\n      // 4. date - look for the date only until /DOCHDR\n      docBuf.setLength(0);\n      read(docBuf, DATE, true, false, TERMINATING_DOCHDR);\n      if (docBuf.length() != 0) {\n        // Date found.\n        dateStr = docBuf.substring(DATE.length());\n        findTerminatingDocHdr = true;\n      }\n\n      // 5. skip until end of doc header\n      if (findTerminatingDocHdr) {\n        docBuf.setLength(0);\n        read(docBuf, TERMINATING_DOCHDR, false, false, null);\n      }\n\n      // 6. collect until end of doc\n      docBuf.setLength(0);\n      read(docBuf, TERMINATING_DOC, false, true, null);\n      \n      // 7. Set up a Reader over the read content\n      r = getTrecDocReader(docBuf);\n      // Resetting the thread's reader means it will reuse the instance\n      // allocated as well as re-read from docBuf.\n      r.reset();\n      \n      // count char length of parsed html text (larger than the plain doc body text).\n      addBytes(docBuf.length()); \n    }\n\n    // This code segment relies on HtmlParser being thread safe. When we get \n    // here, everything else is already private to that thread, so we're safe.\n    Date date = dateStr != null ? parseDate(dateStr) : null;\n    try {\n      docData = htmlParser.parse(docData, name, date, r, null);\n      addDoc();\n    } catch (InterruptedException ie) {\n      throw new ThreadInterruptedException(ie);\n    }\n\n    return docData;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5b25dd09e9e2bbeca84aceaf74e1df8ad1bff80","date":1318183296,"type":3,"author":"Doron Cohen","isMerge":false,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecContentSource#getNextDocData(DocData).mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecContentSource#getNextDocData(DocData).mjava","sourceNew":"  @Override\n  public DocData getNextDocData(DocData docData) throws NoMoreDataException, IOException {\n    String name = null;\n    StringBuilder docBuf = getDocBuffer();\n    ParsePathType parsedPathType;\n    \n    // protect reading from the TREC files by multiple threads. The rest of the\n    // method, i.e., parsing the content and returning the DocData can run unprotected.\n    synchronized (lock) {\n      if (reader == null) {\n        openNextFile();\n      }\n      \n      // 1. skip until doc start - required for all TREC formats\n      docBuf.setLength(0);\n      read(docBuf, DOC, false, false);\n      \n      // save parsedFile for passing trecDataParser after the sync block, in \n      // case another thread will open another file in between.\n      parsedPathType = currPathType;\n      \n      // 2. name - required for all TREC formats\n      docBuf.setLength(0);\n      read(docBuf, DOCNO, true, false);\n      name = docBuf.substring(DOCNO.length(), docBuf.indexOf(TERMINATING_DOCNO,\n          DOCNO.length())).trim();\n      \n      if (!excludeDocnameIteration) {\n        name = name + \"_\" + iteration;\n      }\n\n      // 3. read all until end of doc\n      docBuf.setLength(0);\n      read(docBuf, TERMINATING_DOC, false, true);\n    }\n      \n    // count char length of text to be parsed (may be larger than the resulted plain doc body text).\n    addBytes(docBuf.length()); \n\n    // This code segment relies on HtmlParser being thread safe. When we get \n    // here, everything else is already private to that thread, so we're safe.\n    try {\n      docData = trecDocParser.parse(docData, name, this, docBuf, parsedPathType);\n      addItem();\n    } catch (InterruptedException ie) {\n      throw new ThreadInterruptedException(ie);\n    }\n\n    return docData;\n  }\n\n","sourceOld":"  @Override\n  public DocData getNextDocData(DocData docData) throws NoMoreDataException, IOException {\n    String name = null;\n    StringBuilder docBuf = getDocBuffer();\n    ParsePathType parsedPathType;\n    \n    // protect reading from the TREC files by multiple threads. The rest of the\n    // method, i.e., parsing the content and returning the DocData can run unprotected.\n    synchronized (lock) {\n      if (reader == null) {\n        openNextFile();\n      }\n      \n      // 1. skip until doc start - required for all TREC formats\n      docBuf.setLength(0);\n      read(docBuf, DOC, false, false);\n      \n      // save parsedFile for passing trecDataParser after the sync block, in \n      // case another thread will open another file in between.\n      parsedPathType = currPathType;\n      \n      // 2. name - required for all TREC formats\n      docBuf.setLength(0);\n      read(docBuf, DOCNO, true, false);\n      name = docBuf.substring(DOCNO.length(), docBuf.indexOf(TERMINATING_DOCNO,\n          DOCNO.length())).trim();\n      \n      if (!excludeDocnameIteration) {\n        name = name + \"_\" + iteration;\n      }\n\n      // 3. read all until end of doc\n      docBuf.setLength(0);\n      read(docBuf, TERMINATING_DOC, false, true);\n    }\n      \n    // count char length of text to be parsed (may be larger than the resulted plain doc body text).\n    addBytes(docBuf.length()); \n\n    // This code segment relies on HtmlParser being thread safe. When we get \n    // here, everything else is already private to that thread, so we're safe.\n    try {\n      docData = trecDocParser.parse(docData, name, this, docBuf, parsedPathType);\n      addDoc();\n    } catch (InterruptedException ie) {\n      throw new ThreadInterruptedException(ie);\n    }\n\n    return docData;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecContentSource#getNextDocData(DocData).mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecContentSource#getNextDocData(DocData).mjava","sourceNew":"  @Override\n  public DocData getNextDocData(DocData docData) throws NoMoreDataException, IOException {\n    String name = null;\n    StringBuilder docBuf = getDocBuffer();\n    ParsePathType parsedPathType;\n    \n    // protect reading from the TREC files by multiple threads. The rest of the\n    // method, i.e., parsing the content and returning the DocData can run unprotected.\n    synchronized (lock) {\n      if (reader == null) {\n        openNextFile();\n      }\n      \n      // 1. skip until doc start - required for all TREC formats\n      docBuf.setLength(0);\n      read(docBuf, DOC, false, false);\n      \n      // save parsedFile for passing trecDataParser after the sync block, in \n      // case another thread will open another file in between.\n      parsedPathType = currPathType;\n      \n      // 2. name - required for all TREC formats\n      docBuf.setLength(0);\n      read(docBuf, DOCNO, true, false);\n      name = docBuf.substring(DOCNO.length(), docBuf.indexOf(TERMINATING_DOCNO,\n          DOCNO.length())).trim();\n      \n      if (!excludeDocnameIteration) {\n        name = name + \"_\" + iteration;\n      }\n\n      // 3. read all until end of doc\n      docBuf.setLength(0);\n      read(docBuf, TERMINATING_DOC, false, true);\n    }\n      \n    // count char length of text to be parsed (may be larger than the resulted plain doc body text).\n    addBytes(docBuf.length()); \n\n    // This code segment relies on HtmlParser being thread safe. When we get \n    // here, everything else is already private to that thread, so we're safe.\n    try {\n      docData = trecDocParser.parse(docData, name, this, docBuf, parsedPathType);\n      addItem();\n    } catch (InterruptedException ie) {\n      throw new ThreadInterruptedException(ie);\n    }\n\n    return docData;\n  }\n\n","sourceOld":"  @Override\n  public DocData getNextDocData(DocData docData) throws NoMoreDataException, IOException {\n    String name = null;\n    StringBuilder docBuf = getDocBuffer();\n    ParsePathType parsedPathType;\n    \n    // protect reading from the TREC files by multiple threads. The rest of the\n    // method, i.e., parsing the content and returning the DocData can run unprotected.\n    synchronized (lock) {\n      if (reader == null) {\n        openNextFile();\n      }\n      \n      // 1. skip until doc start - required for all TREC formats\n      docBuf.setLength(0);\n      read(docBuf, DOC, false, false);\n      \n      // save parsedFile for passing trecDataParser after the sync block, in \n      // case another thread will open another file in between.\n      parsedPathType = currPathType;\n      \n      // 2. name - required for all TREC formats\n      docBuf.setLength(0);\n      read(docBuf, DOCNO, true, false);\n      name = docBuf.substring(DOCNO.length(), docBuf.indexOf(TERMINATING_DOCNO,\n          DOCNO.length())).trim();\n      \n      if (!excludeDocnameIteration) {\n        name = name + \"_\" + iteration;\n      }\n\n      // 3. read all until end of doc\n      docBuf.setLength(0);\n      read(docBuf, TERMINATING_DOC, false, true);\n    }\n      \n    // count char length of text to be parsed (may be larger than the resulted plain doc body text).\n    addBytes(docBuf.length()); \n\n    // This code segment relies on HtmlParser being thread safe. When we get \n    // here, everything else is already private to that thread, so we're safe.\n    try {\n      docData = trecDocParser.parse(docData, name, this, docBuf, parsedPathType);\n      addItem();\n    } catch (InterruptedException ie) {\n      throw new ThreadInterruptedException(ie);\n    }\n\n    return docData;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["b5b25dd09e9e2bbeca84aceaf74e1df8ad1bff80"],"b5b25dd09e9e2bbeca84aceaf74e1df8ad1bff80":["3cdad2c6b6234338031bcc1f24c001a5ad66f714"],"ecc11368dc265bfdad90214f8bf5da99016ab1e2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["70ad682703b8585f5d0a637efec044d57ec05efb","3cdad2c6b6234338031bcc1f24c001a5ad66f714"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdad2c6b6234338031bcc1f24c001a5ad66f714":["ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["868da859b43505d9d2a023bfeae6dd0c795f5295","3cdad2c6b6234338031bcc1f24c001a5ad66f714"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"ecc11368dc265bfdad90214f8bf5da99016ab1e2":["70ad682703b8585f5d0a637efec044d57ec05efb","3cdad2c6b6234338031bcc1f24c001a5ad66f714","868da859b43505d9d2a023bfeae6dd0c795f5295"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b5b25dd09e9e2bbeca84aceaf74e1df8ad1bff80":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["70ad682703b8585f5d0a637efec044d57ec05efb","ecc11368dc265bfdad90214f8bf5da99016ab1e2","868da859b43505d9d2a023bfeae6dd0c795f5295"],"3cdad2c6b6234338031bcc1f24c001a5ad66f714":["b5b25dd09e9e2bbeca84aceaf74e1df8ad1bff80","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}