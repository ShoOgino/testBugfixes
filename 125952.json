{"path":"lucene/src/java/org/apache/lucene/index/codecs/memory/MemoryPostingsFormat.TermsWriter#finishTerm(BytesRef,TermStats).mjava","commits":[{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/memory/MemoryPostingsFormat.TermsWriter#finishTerm(BytesRef,TermStats).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/memory/MemoryCodec.TermsWriter#finishTerm(BytesRef,TermStats).mjava","sourceNew":"    @Override\n    public void finishTerm(BytesRef text, TermStats stats) throws IOException {\n\n      assert postingsWriter.docCount == stats.docFreq;\n\n      assert buffer2.getFilePointer() == 0;\n\n      buffer2.writeVInt(stats.docFreq);\n      if (field.indexOptions != IndexOptions.DOCS_ONLY) {\n        buffer2.writeVLong(stats.totalTermFreq-stats.docFreq);\n      }\n      int pos = (int) buffer2.getFilePointer();\n      buffer2.writeTo(finalBuffer, 0);\n      buffer2.reset();\n\n      final int totalBytes = pos + (int) postingsWriter.buffer.getFilePointer();\n      if (totalBytes > finalBuffer.length) {\n        finalBuffer = ArrayUtil.grow(finalBuffer, totalBytes);\n      }\n      postingsWriter.buffer.writeTo(finalBuffer, pos);\n      postingsWriter.buffer.reset();\n\n      spare.bytes = finalBuffer;\n      spare.length = totalBytes;\n      if (VERBOSE) {\n        System.out.println(\"    finishTerm term=\" + text.utf8ToString() + \" \" + totalBytes + \" bytes totalTF=\" + stats.totalTermFreq);\n        for(int i=0;i<totalBytes;i++) {\n          System.out.println(\"      \" + Integer.toHexString(finalBuffer[i]&0xFF));\n        }\n      }\n      builder.add(text, new BytesRef(spare));\n      termCount++;\n    }\n\n","sourceOld":"    @Override\n    public void finishTerm(BytesRef text, TermStats stats) throws IOException {\n\n      assert postingsWriter.docCount == stats.docFreq;\n\n      assert buffer2.getFilePointer() == 0;\n\n      buffer2.writeVInt(stats.docFreq);\n      if (field.indexOptions != IndexOptions.DOCS_ONLY) {\n        buffer2.writeVLong(stats.totalTermFreq-stats.docFreq);\n      }\n      int pos = (int) buffer2.getFilePointer();\n      buffer2.writeTo(finalBuffer, 0);\n      buffer2.reset();\n\n      final int totalBytes = pos + (int) postingsWriter.buffer.getFilePointer();\n      if (totalBytes > finalBuffer.length) {\n        finalBuffer = ArrayUtil.grow(finalBuffer, totalBytes);\n      }\n      postingsWriter.buffer.writeTo(finalBuffer, pos);\n      postingsWriter.buffer.reset();\n\n      spare.bytes = finalBuffer;\n      spare.length = totalBytes;\n      if (VERBOSE) {\n        System.out.println(\"    finishTerm term=\" + text.utf8ToString() + \" \" + totalBytes + \" bytes totalTF=\" + stats.totalTermFreq);\n        for(int i=0;i<totalBytes;i++) {\n          System.out.println(\"      \" + Integer.toHexString(finalBuffer[i]&0xFF));\n        }\n      }\n      builder.add(text, new BytesRef(spare));\n      termCount++;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e6e919043fa85ee891123768dd655a98edbbf63c","date":1322225413,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/memory/MemoryPostingsFormat.TermsWriter#finishTerm(BytesRef,TermStats).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/memory/MemoryPostingsFormat.TermsWriter#finishTerm(BytesRef,TermStats).mjava","sourceNew":"    @Override\n    public void finishTerm(BytesRef text, TermStats stats) throws IOException {\n\n      assert postingsWriter.docCount == stats.docFreq;\n\n      assert buffer2.getFilePointer() == 0;\n\n      buffer2.writeVInt(stats.docFreq);\n      if (field.indexOptions != IndexOptions.DOCS_ONLY) {\n        buffer2.writeVLong(stats.totalTermFreq-stats.docFreq);\n      }\n      int pos = (int) buffer2.getFilePointer();\n      buffer2.writeTo(finalBuffer, 0);\n      buffer2.reset();\n\n      final int totalBytes = pos + (int) postingsWriter.buffer.getFilePointer();\n      if (totalBytes > finalBuffer.length) {\n        finalBuffer = ArrayUtil.grow(finalBuffer, totalBytes);\n      }\n      postingsWriter.buffer.writeTo(finalBuffer, pos);\n      postingsWriter.buffer.reset();\n\n      spare.bytes = finalBuffer;\n      spare.length = totalBytes;\n      if (VERBOSE) {\n        System.out.println(\"    finishTerm term=\" + text.utf8ToString() + \" \" + totalBytes + \" bytes totalTF=\" + stats.totalTermFreq);\n        for(int i=0;i<totalBytes;i++) {\n          System.out.println(\"      \" + Integer.toHexString(finalBuffer[i]&0xFF));\n        }\n      }\n      builder.add(text, BytesRef.deepCopyOf(spare));\n      termCount++;\n    }\n\n","sourceOld":"    @Override\n    public void finishTerm(BytesRef text, TermStats stats) throws IOException {\n\n      assert postingsWriter.docCount == stats.docFreq;\n\n      assert buffer2.getFilePointer() == 0;\n\n      buffer2.writeVInt(stats.docFreq);\n      if (field.indexOptions != IndexOptions.DOCS_ONLY) {\n        buffer2.writeVLong(stats.totalTermFreq-stats.docFreq);\n      }\n      int pos = (int) buffer2.getFilePointer();\n      buffer2.writeTo(finalBuffer, 0);\n      buffer2.reset();\n\n      final int totalBytes = pos + (int) postingsWriter.buffer.getFilePointer();\n      if (totalBytes > finalBuffer.length) {\n        finalBuffer = ArrayUtil.grow(finalBuffer, totalBytes);\n      }\n      postingsWriter.buffer.writeTo(finalBuffer, pos);\n      postingsWriter.buffer.reset();\n\n      spare.bytes = finalBuffer;\n      spare.length = totalBytes;\n      if (VERBOSE) {\n        System.out.println(\"    finishTerm term=\" + text.utf8ToString() + \" \" + totalBytes + \" bytes totalTF=\" + stats.totalTermFreq);\n        for(int i=0;i<totalBytes;i++) {\n          System.out.println(\"      \" + Integer.toHexString(finalBuffer[i]&0xFF));\n        }\n      }\n      builder.add(text, new BytesRef(spare));\n      termCount++;\n    }\n\n","bugFix":null,"bugIntro":["1ec890fad2ea96317f4429e0aa0085bb25673641"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0ae5e3ed1232483b7b8a014f175a5fe43595982","date":1324062192,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.TermsWriter#finishTerm(BytesRef,TermStats).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/memory/MemoryPostingsFormat.TermsWriter#finishTerm(BytesRef,TermStats).mjava","sourceNew":"    @Override\n    public void finishTerm(BytesRef text, TermStats stats) throws IOException {\n\n      assert postingsWriter.docCount == stats.docFreq;\n\n      assert buffer2.getFilePointer() == 0;\n\n      buffer2.writeVInt(stats.docFreq);\n      if (field.indexOptions != IndexOptions.DOCS_ONLY) {\n        buffer2.writeVLong(stats.totalTermFreq-stats.docFreq);\n      }\n      int pos = (int) buffer2.getFilePointer();\n      buffer2.writeTo(finalBuffer, 0);\n      buffer2.reset();\n\n      final int totalBytes = pos + (int) postingsWriter.buffer.getFilePointer();\n      if (totalBytes > finalBuffer.length) {\n        finalBuffer = ArrayUtil.grow(finalBuffer, totalBytes);\n      }\n      postingsWriter.buffer.writeTo(finalBuffer, pos);\n      postingsWriter.buffer.reset();\n\n      spare.bytes = finalBuffer;\n      spare.length = totalBytes;\n      if (VERBOSE) {\n        System.out.println(\"    finishTerm term=\" + text.utf8ToString() + \" \" + totalBytes + \" bytes totalTF=\" + stats.totalTermFreq);\n        for(int i=0;i<totalBytes;i++) {\n          System.out.println(\"      \" + Integer.toHexString(finalBuffer[i]&0xFF));\n        }\n      }\n      builder.add(text, BytesRef.deepCopyOf(spare));\n      termCount++;\n    }\n\n","sourceOld":"    @Override\n    public void finishTerm(BytesRef text, TermStats stats) throws IOException {\n\n      assert postingsWriter.docCount == stats.docFreq;\n\n      assert buffer2.getFilePointer() == 0;\n\n      buffer2.writeVInt(stats.docFreq);\n      if (field.indexOptions != IndexOptions.DOCS_ONLY) {\n        buffer2.writeVLong(stats.totalTermFreq-stats.docFreq);\n      }\n      int pos = (int) buffer2.getFilePointer();\n      buffer2.writeTo(finalBuffer, 0);\n      buffer2.reset();\n\n      final int totalBytes = pos + (int) postingsWriter.buffer.getFilePointer();\n      if (totalBytes > finalBuffer.length) {\n        finalBuffer = ArrayUtil.grow(finalBuffer, totalBytes);\n      }\n      postingsWriter.buffer.writeTo(finalBuffer, pos);\n      postingsWriter.buffer.reset();\n\n      spare.bytes = finalBuffer;\n      spare.length = totalBytes;\n      if (VERBOSE) {\n        System.out.println(\"    finishTerm term=\" + text.utf8ToString() + \" \" + totalBytes + \" bytes totalTF=\" + stats.totalTermFreq);\n        for(int i=0;i<totalBytes;i++) {\n          System.out.println(\"      \" + Integer.toHexString(finalBuffer[i]&0xFF));\n        }\n      }\n      builder.add(text, BytesRef.deepCopyOf(spare));\n      termCount++;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"7b91922b55d15444d554721b352861d028eb8278":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["e6e919043fa85ee891123768dd655a98edbbf63c"],"e6e919043fa85ee891123768dd655a98edbbf63c":["7b91922b55d15444d554721b352861d028eb8278"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"]},"commit2Childs":{"7b91922b55d15444d554721b352861d028eb8278":["e6e919043fa85ee891123768dd655a98edbbf63c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7b91922b55d15444d554721b352861d028eb8278"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e6e919043fa85ee891123768dd655a98edbbf63c":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}