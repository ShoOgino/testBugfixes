{"path":"lucene/contrib/xml-query-parser/src/demo/java/org/apache/lucene/xmlparser/webdemo/FormBasedXmlQueryDemo#doPost(HttpServletRequest,HttpServletResponse).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/xml-query-parser/src/demo/java/org/apache/lucene/xmlparser/webdemo/FormBasedXmlQueryDemo#doPost(HttpServletRequest,HttpServletResponse).mjava","pathOld":"contrib/xml-query-parser/src/demo/java/org/apache/lucene/xmlparser/webdemo/FormBasedXmlQueryDemo#doPost(HttpServletRequest,HttpServletResponse).mjava","sourceNew":"\t@Override\n\tprotected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n\t\t//Take all completed form fields and add to a Properties object\n\t\tProperties completedFormFields=new Properties();\n\t\tEnumeration pNames = request.getParameterNames();\n\t\twhile(pNames.hasMoreElements()){\n\t\t\tString propName=(String) pNames.nextElement();\n\t\t\tString value=request.getParameter(propName);\n\t\t\tif((value!=null)&&(value.trim().length()>0)){\n\t\t\t\tcompletedFormFields.setProperty(propName, value);\n\t\t\t}\n\t\t}\n\n\t\ttry{\n\n\t\t\t//Create an XML query by populating template with given user criteria\n\t\t\torg.w3c.dom.Document xmlQuery=queryTemplateManager.getQueryAsDOM(completedFormFields);\n\n\t\t\t//Parse the XML to produce a Lucene query\n\t\t\tQuery query=xmlParser.getQuery(xmlQuery.getDocumentElement());\n\n\t\t\t//Run the query\n\t\t\tTopDocs topDocs = searcher.search(query,10);\n\n\t\t\t//and package the results and forward to JSP\n\t\t\tif(topDocs!=null)\t{\n\t\t\t\tScoreDoc[] sd = topDocs.scoreDocs;\n\t\t\t\tDocument[] results=new Document[sd.length];\n\t\t\t\tfor (int i = 0; i < results.length; i++) {\n\t\t\t\t\tresults[i]=searcher.doc(sd[i].doc);\n\t\t\t\t\trequest.setAttribute(\"results\", results);\n\t\t\t\t}\n\t\t\t}\n\t\t\tRequestDispatcher dispatcher = getServletContext().getRequestDispatcher(\"/index.jsp\");\n\t\t\tdispatcher.forward(request,response);\n\t\t}\n\t\tcatch(Exception e){\n\t\t\tthrow new ServletException(\"Error processing query\",e);\n\t\t}\n\t}\n\n","sourceOld":"\t@Override\n\tprotected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n\t\t//Take all completed form fields and add to a Properties object\n\t\tProperties completedFormFields=new Properties();\n\t\tEnumeration pNames = request.getParameterNames();\n\t\twhile(pNames.hasMoreElements()){\n\t\t\tString propName=(String) pNames.nextElement();\n\t\t\tString value=request.getParameter(propName);\n\t\t\tif((value!=null)&&(value.trim().length()>0)){\n\t\t\t\tcompletedFormFields.setProperty(propName, value);\n\t\t\t}\n\t\t}\n\n\t\ttry{\n\n\t\t\t//Create an XML query by populating template with given user criteria\n\t\t\torg.w3c.dom.Document xmlQuery=queryTemplateManager.getQueryAsDOM(completedFormFields);\n\n\t\t\t//Parse the XML to produce a Lucene query\n\t\t\tQuery query=xmlParser.getQuery(xmlQuery.getDocumentElement());\n\n\t\t\t//Run the query\n\t\t\tTopDocs topDocs = searcher.search(query,10);\n\n\t\t\t//and package the results and forward to JSP\n\t\t\tif(topDocs!=null)\t{\n\t\t\t\tScoreDoc[] sd = topDocs.scoreDocs;\n\t\t\t\tDocument[] results=new Document[sd.length];\n\t\t\t\tfor (int i = 0; i < results.length; i++) {\n\t\t\t\t\tresults[i]=searcher.doc(sd[i].doc);\n\t\t\t\t\trequest.setAttribute(\"results\", results);\n\t\t\t\t}\n\t\t\t}\n\t\t\tRequestDispatcher dispatcher = getServletContext().getRequestDispatcher(\"/index.jsp\");\n\t\t\tdispatcher.forward(request,response);\n\t\t}\n\t\tcatch(Exception e){\n\t\t\tthrow new ServletException(\"Error processing query\",e);\n\t\t}\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b68b0aeb05de4dd5b24fc5ffd51e2fbd5d571df2","date":1313460667,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/contrib/xml-query-parser/src/demo/java/org/apache/lucene/xmlparser/webdemo/FormBasedXmlQueryDemo#doPost(HttpServletRequest,HttpServletResponse).mjava","pathOld":"lucene/contrib/xml-query-parser/src/demo/java/org/apache/lucene/xmlparser/webdemo/FormBasedXmlQueryDemo#doPost(HttpServletRequest,HttpServletResponse).mjava","sourceNew":"  @Override\n  protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n    //Take all completed form fields and add to a Properties object\n    Properties completedFormFields = new Properties();\n    Enumeration pNames = request.getParameterNames();\n    while (pNames.hasMoreElements()) {\n      String propName = (String) pNames.nextElement();\n      String value = request.getParameter(propName);\n      if ((value != null) && (value.trim().length() > 0)) {\n        completedFormFields.setProperty(propName, value);\n      }\n    }\n\n    try {\n      //Create an XML query by populating template with given user criteria\n      org.w3c.dom.Document xmlQuery = queryTemplateManager.getQueryAsDOM(completedFormFields);\n\n      //Parse the XML to produce a Lucene query\n      Query query = xmlParser.getQuery(xmlQuery.getDocumentElement());\n\n      //Run the query\n      TopDocs topDocs = searcher.search(query, 10);\n\n      //and package the results and forward to JSP\n      if (topDocs != null) {\n        ScoreDoc[] sd = topDocs.scoreDocs;\n        Document[] results = new Document[sd.length];\n        for (int i = 0; i < results.length; i++) {\n          results[i] = searcher.doc(sd[i].doc);\n          request.setAttribute(\"results\", results);\n        }\n      }\n      RequestDispatcher dispatcher = getServletContext().getRequestDispatcher(\"/index.jsp\");\n      dispatcher.forward(request, response);\n    }\n    catch (Exception e) {\n      throw new ServletException(\"Error processing query\", e);\n    }\n  }\n\n","sourceOld":"\t@Override\n\tprotected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n\t\t//Take all completed form fields and add to a Properties object\n\t\tProperties completedFormFields=new Properties();\n\t\tEnumeration pNames = request.getParameterNames();\n\t\twhile(pNames.hasMoreElements()){\n\t\t\tString propName=(String) pNames.nextElement();\n\t\t\tString value=request.getParameter(propName);\n\t\t\tif((value!=null)&&(value.trim().length()>0)){\n\t\t\t\tcompletedFormFields.setProperty(propName, value);\n\t\t\t}\n\t\t}\n\n\t\ttry{\n\n\t\t\t//Create an XML query by populating template with given user criteria\n\t\t\torg.w3c.dom.Document xmlQuery=queryTemplateManager.getQueryAsDOM(completedFormFields);\n\n\t\t\t//Parse the XML to produce a Lucene query\n\t\t\tQuery query=xmlParser.getQuery(xmlQuery.getDocumentElement());\n\n\t\t\t//Run the query\n\t\t\tTopDocs topDocs = searcher.search(query,10);\n\n\t\t\t//and package the results and forward to JSP\n\t\t\tif(topDocs!=null)\t{\n\t\t\t\tScoreDoc[] sd = topDocs.scoreDocs;\n\t\t\t\tDocument[] results=new Document[sd.length];\n\t\t\t\tfor (int i = 0; i < results.length; i++) {\n\t\t\t\t\tresults[i]=searcher.doc(sd[i].doc);\n\t\t\t\t\trequest.setAttribute(\"results\", results);\n\t\t\t\t}\n\t\t\t}\n\t\t\tRequestDispatcher dispatcher = getServletContext().getRequestDispatcher(\"/index.jsp\");\n\t\t\tdispatcher.forward(request,response);\n\t\t}\n\t\tcatch(Exception e){\n\t\t\tthrow new ServletException(\"Error processing query\",e);\n\t\t}\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90b5983cf0959ba2f206e3f7864b45d4e73384dd","date":1313636220,"type":5,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/contrib/demo/src/java/org/apache/lucene/demo/xmlparser/FormBasedXmlQueryDemo#doPost(HttpServletRequest,HttpServletResponse).mjava","pathOld":"lucene/contrib/xml-query-parser/src/demo/java/org/apache/lucene/xmlparser/webdemo/FormBasedXmlQueryDemo#doPost(HttpServletRequest,HttpServletResponse).mjava","sourceNew":"  @Override\n  protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n    //Take all completed form fields and add to a Properties object\n    Properties completedFormFields = new Properties();\n    Enumeration pNames = request.getParameterNames();\n    while (pNames.hasMoreElements()) {\n      String propName = (String) pNames.nextElement();\n      String value = request.getParameter(propName);\n      if ((value != null) && (value.trim().length() > 0)) {\n        completedFormFields.setProperty(propName, value);\n      }\n    }\n\n    try {\n      //Create an XML query by populating template with given user criteria\n      org.w3c.dom.Document xmlQuery = queryTemplateManager.getQueryAsDOM(completedFormFields);\n\n      //Parse the XML to produce a Lucene query\n      Query query = xmlParser.getQuery(xmlQuery.getDocumentElement());\n\n      //Run the query\n      TopDocs topDocs = searcher.search(query, 10);\n\n      //and package the results and forward to JSP\n      if (topDocs != null) {\n        ScoreDoc[] sd = topDocs.scoreDocs;\n        Document[] results = new Document[sd.length];\n        for (int i = 0; i < results.length; i++) {\n          results[i] = searcher.doc(sd[i].doc);\n          request.setAttribute(\"results\", results);\n        }\n      }\n      RequestDispatcher dispatcher = getServletContext().getRequestDispatcher(\"/index.jsp\");\n      dispatcher.forward(request, response);\n    }\n    catch (Exception e) {\n      throw new ServletException(\"Error processing query\", e);\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n    //Take all completed form fields and add to a Properties object\n    Properties completedFormFields = new Properties();\n    Enumeration pNames = request.getParameterNames();\n    while (pNames.hasMoreElements()) {\n      String propName = (String) pNames.nextElement();\n      String value = request.getParameter(propName);\n      if ((value != null) && (value.trim().length() > 0)) {\n        completedFormFields.setProperty(propName, value);\n      }\n    }\n\n    try {\n      //Create an XML query by populating template with given user criteria\n      org.w3c.dom.Document xmlQuery = queryTemplateManager.getQueryAsDOM(completedFormFields);\n\n      //Parse the XML to produce a Lucene query\n      Query query = xmlParser.getQuery(xmlQuery.getDocumentElement());\n\n      //Run the query\n      TopDocs topDocs = searcher.search(query, 10);\n\n      //and package the results and forward to JSP\n      if (topDocs != null) {\n        ScoreDoc[] sd = topDocs.scoreDocs;\n        Document[] results = new Document[sd.length];\n        for (int i = 0; i < results.length; i++) {\n          results[i] = searcher.doc(sd[i].doc);\n          request.setAttribute(\"results\", results);\n        }\n      }\n      RequestDispatcher dispatcher = getServletContext().getRequestDispatcher(\"/index.jsp\");\n      dispatcher.forward(request, response);\n    }\n    catch (Exception e) {\n      throw new ServletException(\"Error processing query\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90b5983cf0959ba2f206e3f7864b45d4e73384dd":["b68b0aeb05de4dd5b24fc5ffd51e2fbd5d571df2"],"b68b0aeb05de4dd5b24fc5ffd51e2fbd5d571df2":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90b5983cf0959ba2f206e3f7864b45d4e73384dd"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90b5983cf0959ba2f206e3f7864b45d4e73384dd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b68b0aeb05de4dd5b24fc5ffd51e2fbd5d571df2":["90b5983cf0959ba2f206e3f7864b45d4e73384dd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["b68b0aeb05de4dd5b24fc5ffd51e2fbd5d571df2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}