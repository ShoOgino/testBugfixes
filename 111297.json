{"path":"lucene/src/test/org/apache/lucene/index/TestDocumentsWriterDeleteQueue#testUpdateDelteSlices().mjava","commits":[{"id":"327863a2fd61e831028b6c56c8fef6b00a44eb0b","date":1302686439,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDocumentsWriterDeleteQueue#testUpdateDelteSlices().mjava","pathOld":"/dev/null","sourceNew":"  public void testUpdateDelteSlices() {\n    DocumentsWriterDeleteQueue queue = new DocumentsWriterDeleteQueue(\n        new BufferedDeletes(false));\n    final int size = 200 + random.nextInt(500) * RANDOM_MULTIPLIER;\n    Integer[] ids = new Integer[size];\n    for (int i = 0; i < ids.length; i++) {\n      ids[i] = random.nextInt();\n    }\n    Term template = new Term(\"id\");\n    DeleteSlice slice1 = queue.newSlice();\n    DeleteSlice slice2 = queue.newSlice();\n    BufferedDeletes bd1 = new BufferedDeletes(false);\n    BufferedDeletes bd2 = new BufferedDeletes(false);\n    int last1 = 0;\n    int last2 = 0;\n    Set<Term> uniqueValues = new HashSet<Term>();\n    for (int j = 0; j < ids.length; j++) {\n      Integer i = ids[j];\n      // create an array here since we compare identity below against tailItem\n      Term[] term = new Term[] {template.createTerm(i.toString())};\n      uniqueValues.add(term[0]);\n      queue.addDelete(term);\n      if (random.nextInt(20) == 0 || j == ids.length - 1) {\n        queue.updateSlice(slice1);\n        assertTrue(slice1.isTailItem(term));\n        slice1.apply(bd1, j);\n        assertAllBetween(last1, j, bd1, ids);\n        last1 = j + 1;\n      }\n      if (random.nextInt(10) == 5 || j == ids.length - 1) {\n        queue.updateSlice(slice2);\n        assertTrue(slice2.isTailItem(term));\n        slice2.apply(bd2, j);\n        assertAllBetween(last2, j, bd2, ids);\n        last2 = j + 1;\n      }\n      assertEquals(uniqueValues.size(), queue.numGlobalTermDeletes());\n    }\n    assertEquals(uniqueValues, bd1.terms.keySet());\n    assertEquals(uniqueValues, bd2.terms.keySet());\n    assertEquals(uniqueValues, new HashSet<Term>(Arrays.asList(queue\n        .freezeGlobalBuffer(null).terms)));\n    assertEquals(\"num deletes must be 0 after freeze\", 0, queue\n        .numGlobalTermDeletes());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["50301463ed2a4d5eeea61244ab806b2064df022e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"78248211b373c5a9b53071bf888805d4fab51bd3","date":1303919265,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDocumentsWriterDeleteQueue#testUpdateDelteSlices().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDocumentsWriterDeleteQueue#testUpdateDelteSlices().mjava","sourceNew":"  public void testUpdateDelteSlices() {\n    DocumentsWriterDeleteQueue queue = new DocumentsWriterDeleteQueue();\n    final int size = 200 + random.nextInt(500) * RANDOM_MULTIPLIER;\n    Integer[] ids = new Integer[size];\n    for (int i = 0; i < ids.length; i++) {\n      ids[i] = random.nextInt();\n    }\n    Term template = new Term(\"id\");\n    DeleteSlice slice1 = queue.newSlice();\n    DeleteSlice slice2 = queue.newSlice();\n    BufferedDeletes bd1 = new BufferedDeletes(false);\n    BufferedDeletes bd2 = new BufferedDeletes(false);\n    int last1 = 0;\n    int last2 = 0;\n    Set<Term> uniqueValues = new HashSet<Term>();\n    for (int j = 0; j < ids.length; j++) {\n      Integer i = ids[j];\n      // create an array here since we compare identity below against tailItem\n      Term[] term = new Term[] {template.createTerm(i.toString())};\n      uniqueValues.add(term[0]);\n      queue.addDelete(term);\n      if (random.nextInt(20) == 0 || j == ids.length - 1) {\n        queue.updateSlice(slice1);\n        assertTrue(slice1.isTailItem(term));\n        slice1.apply(bd1, j);\n        assertAllBetween(last1, j, bd1, ids);\n        last1 = j + 1;\n      }\n      if (random.nextInt(10) == 5 || j == ids.length - 1) {\n        queue.updateSlice(slice2);\n        assertTrue(slice2.isTailItem(term));\n        slice2.apply(bd2, j);\n        assertAllBetween(last2, j, bd2, ids);\n        last2 = j + 1;\n      }\n      assertEquals(uniqueValues.size(), queue.numGlobalTermDeletes());\n    }\n    assertEquals(uniqueValues, bd1.terms.keySet());\n    assertEquals(uniqueValues, bd2.terms.keySet());\n    assertEquals(uniqueValues, new HashSet<Term>(Arrays.asList(queue\n        .freezeGlobalBuffer(null).terms)));\n    assertEquals(\"num deletes must be 0 after freeze\", 0, queue\n        .numGlobalTermDeletes());\n  }\n\n","sourceOld":"  public void testUpdateDelteSlices() {\n    DocumentsWriterDeleteQueue queue = new DocumentsWriterDeleteQueue(\n        new BufferedDeletes(false));\n    final int size = 200 + random.nextInt(500) * RANDOM_MULTIPLIER;\n    Integer[] ids = new Integer[size];\n    for (int i = 0; i < ids.length; i++) {\n      ids[i] = random.nextInt();\n    }\n    Term template = new Term(\"id\");\n    DeleteSlice slice1 = queue.newSlice();\n    DeleteSlice slice2 = queue.newSlice();\n    BufferedDeletes bd1 = new BufferedDeletes(false);\n    BufferedDeletes bd2 = new BufferedDeletes(false);\n    int last1 = 0;\n    int last2 = 0;\n    Set<Term> uniqueValues = new HashSet<Term>();\n    for (int j = 0; j < ids.length; j++) {\n      Integer i = ids[j];\n      // create an array here since we compare identity below against tailItem\n      Term[] term = new Term[] {template.createTerm(i.toString())};\n      uniqueValues.add(term[0]);\n      queue.addDelete(term);\n      if (random.nextInt(20) == 0 || j == ids.length - 1) {\n        queue.updateSlice(slice1);\n        assertTrue(slice1.isTailItem(term));\n        slice1.apply(bd1, j);\n        assertAllBetween(last1, j, bd1, ids);\n        last1 = j + 1;\n      }\n      if (random.nextInt(10) == 5 || j == ids.length - 1) {\n        queue.updateSlice(slice2);\n        assertTrue(slice2.isTailItem(term));\n        slice2.apply(bd2, j);\n        assertAllBetween(last2, j, bd2, ids);\n        last2 = j + 1;\n      }\n      assertEquals(uniqueValues.size(), queue.numGlobalTermDeletes());\n    }\n    assertEquals(uniqueValues, bd1.terms.keySet());\n    assertEquals(uniqueValues, bd2.terms.keySet());\n    assertEquals(uniqueValues, new HashSet<Term>(Arrays.asList(queue\n        .freezeGlobalBuffer(null).terms)));\n    assertEquals(\"num deletes must be 0 after freeze\", 0, queue\n        .numGlobalTermDeletes());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b3e06be49006ecac364d39d12b9c9f74882f9b9f","date":1304289513,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDocumentsWriterDeleteQueue#testUpdateDelteSlices().mjava","pathOld":"/dev/null","sourceNew":"  public void testUpdateDelteSlices() {\n    DocumentsWriterDeleteQueue queue = new DocumentsWriterDeleteQueue();\n    final int size = 200 + random.nextInt(500) * RANDOM_MULTIPLIER;\n    Integer[] ids = new Integer[size];\n    for (int i = 0; i < ids.length; i++) {\n      ids[i] = random.nextInt();\n    }\n    Term template = new Term(\"id\");\n    DeleteSlice slice1 = queue.newSlice();\n    DeleteSlice slice2 = queue.newSlice();\n    BufferedDeletes bd1 = new BufferedDeletes(false);\n    BufferedDeletes bd2 = new BufferedDeletes(false);\n    int last1 = 0;\n    int last2 = 0;\n    Set<Term> uniqueValues = new HashSet<Term>();\n    for (int j = 0; j < ids.length; j++) {\n      Integer i = ids[j];\n      // create an array here since we compare identity below against tailItem\n      Term[] term = new Term[] {template.createTerm(i.toString())};\n      uniqueValues.add(term[0]);\n      queue.addDelete(term);\n      if (random.nextInt(20) == 0 || j == ids.length - 1) {\n        queue.updateSlice(slice1);\n        assertTrue(slice1.isTailItem(term));\n        slice1.apply(bd1, j);\n        assertAllBetween(last1, j, bd1, ids);\n        last1 = j + 1;\n      }\n      if (random.nextInt(10) == 5 || j == ids.length - 1) {\n        queue.updateSlice(slice2);\n        assertTrue(slice2.isTailItem(term));\n        slice2.apply(bd2, j);\n        assertAllBetween(last2, j, bd2, ids);\n        last2 = j + 1;\n      }\n      assertEquals(uniqueValues.size(), queue.numGlobalTermDeletes());\n    }\n    assertEquals(uniqueValues, bd1.terms.keySet());\n    assertEquals(uniqueValues, bd2.terms.keySet());\n    assertEquals(uniqueValues, new HashSet<Term>(Arrays.asList(queue\n        .freezeGlobalBuffer(null).terms)));\n    assertEquals(\"num deletes must be 0 after freeze\", 0, queue\n        .numGlobalTermDeletes());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDocumentsWriterDeleteQueue#testUpdateDelteSlices().mjava","pathOld":"/dev/null","sourceNew":"  public void testUpdateDelteSlices() {\n    DocumentsWriterDeleteQueue queue = new DocumentsWriterDeleteQueue();\n    final int size = 200 + random.nextInt(500) * RANDOM_MULTIPLIER;\n    Integer[] ids = new Integer[size];\n    for (int i = 0; i < ids.length; i++) {\n      ids[i] = random.nextInt();\n    }\n    Term template = new Term(\"id\");\n    DeleteSlice slice1 = queue.newSlice();\n    DeleteSlice slice2 = queue.newSlice();\n    BufferedDeletes bd1 = new BufferedDeletes(false);\n    BufferedDeletes bd2 = new BufferedDeletes(false);\n    int last1 = 0;\n    int last2 = 0;\n    Set<Term> uniqueValues = new HashSet<Term>();\n    for (int j = 0; j < ids.length; j++) {\n      Integer i = ids[j];\n      // create an array here since we compare identity below against tailItem\n      Term[] term = new Term[] {template.createTerm(i.toString())};\n      uniqueValues.add(term[0]);\n      queue.addDelete(term);\n      if (random.nextInt(20) == 0 || j == ids.length - 1) {\n        queue.updateSlice(slice1);\n        assertTrue(slice1.isTailItem(term));\n        slice1.apply(bd1, j);\n        assertAllBetween(last1, j, bd1, ids);\n        last1 = j + 1;\n      }\n      if (random.nextInt(10) == 5 || j == ids.length - 1) {\n        queue.updateSlice(slice2);\n        assertTrue(slice2.isTailItem(term));\n        slice2.apply(bd2, j);\n        assertAllBetween(last2, j, bd2, ids);\n        last2 = j + 1;\n      }\n      assertEquals(uniqueValues.size(), queue.numGlobalTermDeletes());\n    }\n    assertEquals(uniqueValues, bd1.terms.keySet());\n    assertEquals(uniqueValues, bd2.terms.keySet());\n    assertEquals(uniqueValues, new HashSet<Term>(Arrays.asList(queue\n        .freezeGlobalBuffer(null).terms)));\n    assertEquals(\"num deletes must be 0 after freeze\", 0, queue\n        .numGlobalTermDeletes());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDocumentsWriterDeleteQueue#testUpdateDelteSlices().mjava","pathOld":"/dev/null","sourceNew":"  public void testUpdateDelteSlices() {\n    DocumentsWriterDeleteQueue queue = new DocumentsWriterDeleteQueue();\n    final int size = 200 + random.nextInt(500) * RANDOM_MULTIPLIER;\n    Integer[] ids = new Integer[size];\n    for (int i = 0; i < ids.length; i++) {\n      ids[i] = random.nextInt();\n    }\n    Term template = new Term(\"id\");\n    DeleteSlice slice1 = queue.newSlice();\n    DeleteSlice slice2 = queue.newSlice();\n    BufferedDeletes bd1 = new BufferedDeletes(false);\n    BufferedDeletes bd2 = new BufferedDeletes(false);\n    int last1 = 0;\n    int last2 = 0;\n    Set<Term> uniqueValues = new HashSet<Term>();\n    for (int j = 0; j < ids.length; j++) {\n      Integer i = ids[j];\n      // create an array here since we compare identity below against tailItem\n      Term[] term = new Term[] {template.createTerm(i.toString())};\n      uniqueValues.add(term[0]);\n      queue.addDelete(term);\n      if (random.nextInt(20) == 0 || j == ids.length - 1) {\n        queue.updateSlice(slice1);\n        assertTrue(slice1.isTailItem(term));\n        slice1.apply(bd1, j);\n        assertAllBetween(last1, j, bd1, ids);\n        last1 = j + 1;\n      }\n      if (random.nextInt(10) == 5 || j == ids.length - 1) {\n        queue.updateSlice(slice2);\n        assertTrue(slice2.isTailItem(term));\n        slice2.apply(bd2, j);\n        assertAllBetween(last2, j, bd2, ids);\n        last2 = j + 1;\n      }\n      assertEquals(uniqueValues.size(), queue.numGlobalTermDeletes());\n    }\n    assertEquals(uniqueValues, bd1.terms.keySet());\n    assertEquals(uniqueValues, bd2.terms.keySet());\n    assertEquals(uniqueValues, new HashSet<Term>(Arrays.asList(queue\n        .freezeGlobalBuffer(null).terms)));\n    assertEquals(\"num deletes must be 0 after freeze\", 0, queue\n        .numGlobalTermDeletes());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fafef7c83fe8e0b3ca9298d5d75d6b943dc28153","date":1308670974,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDocumentsWriterDeleteQueue#testUpdateDelteSlices().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDocumentsWriterDeleteQueue#testUpdateDelteSlices().mjava","sourceNew":"  public void testUpdateDelteSlices() {\n    DocumentsWriterDeleteQueue queue = new DocumentsWriterDeleteQueue();\n    final int size = 200 + random.nextInt(500) * RANDOM_MULTIPLIER;\n    Integer[] ids = new Integer[size];\n    for (int i = 0; i < ids.length; i++) {\n      ids[i] = random.nextInt();\n    }\n    DeleteSlice slice1 = queue.newSlice();\n    DeleteSlice slice2 = queue.newSlice();\n    BufferedDeletes bd1 = new BufferedDeletes(false);\n    BufferedDeletes bd2 = new BufferedDeletes(false);\n    int last1 = 0;\n    int last2 = 0;\n    Set<Term> uniqueValues = new HashSet<Term>();\n    for (int j = 0; j < ids.length; j++) {\n      Integer i = ids[j];\n      // create an array here since we compare identity below against tailItem\n      Term[] term = new Term[] {new Term(\"id\", i.toString())};\n      uniqueValues.add(term[0]);\n      queue.addDelete(term);\n      if (random.nextInt(20) == 0 || j == ids.length - 1) {\n        queue.updateSlice(slice1);\n        assertTrue(slice1.isTailItem(term));\n        slice1.apply(bd1, j);\n        assertAllBetween(last1, j, bd1, ids);\n        last1 = j + 1;\n      }\n      if (random.nextInt(10) == 5 || j == ids.length - 1) {\n        queue.updateSlice(slice2);\n        assertTrue(slice2.isTailItem(term));\n        slice2.apply(bd2, j);\n        assertAllBetween(last2, j, bd2, ids);\n        last2 = j + 1;\n      }\n      assertEquals(uniqueValues.size(), queue.numGlobalTermDeletes());\n    }\n    assertEquals(uniqueValues, bd1.terms.keySet());\n    assertEquals(uniqueValues, bd2.terms.keySet());\n    assertEquals(uniqueValues, new HashSet<Term>(Arrays.asList(queue\n        .freezeGlobalBuffer(null).terms)));\n    assertEquals(\"num deletes must be 0 after freeze\", 0, queue\n        .numGlobalTermDeletes());\n  }\n\n","sourceOld":"  public void testUpdateDelteSlices() {\n    DocumentsWriterDeleteQueue queue = new DocumentsWriterDeleteQueue();\n    final int size = 200 + random.nextInt(500) * RANDOM_MULTIPLIER;\n    Integer[] ids = new Integer[size];\n    for (int i = 0; i < ids.length; i++) {\n      ids[i] = random.nextInt();\n    }\n    Term template = new Term(\"id\");\n    DeleteSlice slice1 = queue.newSlice();\n    DeleteSlice slice2 = queue.newSlice();\n    BufferedDeletes bd1 = new BufferedDeletes(false);\n    BufferedDeletes bd2 = new BufferedDeletes(false);\n    int last1 = 0;\n    int last2 = 0;\n    Set<Term> uniqueValues = new HashSet<Term>();\n    for (int j = 0; j < ids.length; j++) {\n      Integer i = ids[j];\n      // create an array here since we compare identity below against tailItem\n      Term[] term = new Term[] {template.createTerm(i.toString())};\n      uniqueValues.add(term[0]);\n      queue.addDelete(term);\n      if (random.nextInt(20) == 0 || j == ids.length - 1) {\n        queue.updateSlice(slice1);\n        assertTrue(slice1.isTailItem(term));\n        slice1.apply(bd1, j);\n        assertAllBetween(last1, j, bd1, ids);\n        last1 = j + 1;\n      }\n      if (random.nextInt(10) == 5 || j == ids.length - 1) {\n        queue.updateSlice(slice2);\n        assertTrue(slice2.isTailItem(term));\n        slice2.apply(bd2, j);\n        assertAllBetween(last2, j, bd2, ids);\n        last2 = j + 1;\n      }\n      assertEquals(uniqueValues.size(), queue.numGlobalTermDeletes());\n    }\n    assertEquals(uniqueValues, bd1.terms.keySet());\n    assertEquals(uniqueValues, bd2.terms.keySet());\n    assertEquals(uniqueValues, new HashSet<Term>(Arrays.asList(queue\n        .freezeGlobalBuffer(null).terms)));\n    assertEquals(\"num deletes must be 0 after freeze\", 0, queue\n        .numGlobalTermDeletes());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2553b00f699380c64959ccb27991289aae87be2e","date":1309290151,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDocumentsWriterDeleteQueue#testUpdateDelteSlices().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDocumentsWriterDeleteQueue#testUpdateDelteSlices().mjava","sourceNew":"  public void testUpdateDelteSlices() {\n    DocumentsWriterDeleteQueue queue = new DocumentsWriterDeleteQueue();\n    final int size = 200 + random.nextInt(500) * RANDOM_MULTIPLIER;\n    Integer[] ids = new Integer[size];\n    for (int i = 0; i < ids.length; i++) {\n      ids[i] = random.nextInt();\n    }\n    DeleteSlice slice1 = queue.newSlice();\n    DeleteSlice slice2 = queue.newSlice();\n    BufferedDeletes bd1 = new BufferedDeletes(false);\n    BufferedDeletes bd2 = new BufferedDeletes(false);\n    int last1 = 0;\n    int last2 = 0;\n    Set<Term> uniqueValues = new HashSet<Term>();\n    for (int j = 0; j < ids.length; j++) {\n      Integer i = ids[j];\n      // create an array here since we compare identity below against tailItem\n      Term[] term = new Term[] {new Term(\"id\", i.toString())};\n      uniqueValues.add(term[0]);\n      queue.addDelete(term);\n      if (random.nextInt(20) == 0 || j == ids.length - 1) {\n        queue.updateSlice(slice1);\n        assertTrue(slice1.isTailItem(term));\n        slice1.apply(bd1, j);\n        assertAllBetween(last1, j, bd1, ids);\n        last1 = j + 1;\n      }\n      if (random.nextInt(10) == 5 || j == ids.length - 1) {\n        queue.updateSlice(slice2);\n        assertTrue(slice2.isTailItem(term));\n        slice2.apply(bd2, j);\n        assertAllBetween(last2, j, bd2, ids);\n        last2 = j + 1;\n      }\n      assertEquals(uniqueValues.size(), queue.numGlobalTermDeletes());\n    }\n    assertEquals(uniqueValues, bd1.terms.keySet());\n    assertEquals(uniqueValues, bd2.terms.keySet());\n    assertEquals(uniqueValues, new HashSet<Term>(Arrays.asList(queue\n        .freezeGlobalBuffer(null).terms)));\n    assertEquals(\"num deletes must be 0 after freeze\", 0, queue\n        .numGlobalTermDeletes());\n  }\n\n","sourceOld":"  public void testUpdateDelteSlices() {\n    DocumentsWriterDeleteQueue queue = new DocumentsWriterDeleteQueue();\n    final int size = 200 + random.nextInt(500) * RANDOM_MULTIPLIER;\n    Integer[] ids = new Integer[size];\n    for (int i = 0; i < ids.length; i++) {\n      ids[i] = random.nextInt();\n    }\n    Term template = new Term(\"id\");\n    DeleteSlice slice1 = queue.newSlice();\n    DeleteSlice slice2 = queue.newSlice();\n    BufferedDeletes bd1 = new BufferedDeletes(false);\n    BufferedDeletes bd2 = new BufferedDeletes(false);\n    int last1 = 0;\n    int last2 = 0;\n    Set<Term> uniqueValues = new HashSet<Term>();\n    for (int j = 0; j < ids.length; j++) {\n      Integer i = ids[j];\n      // create an array here since we compare identity below against tailItem\n      Term[] term = new Term[] {template.createTerm(i.toString())};\n      uniqueValues.add(term[0]);\n      queue.addDelete(term);\n      if (random.nextInt(20) == 0 || j == ids.length - 1) {\n        queue.updateSlice(slice1);\n        assertTrue(slice1.isTailItem(term));\n        slice1.apply(bd1, j);\n        assertAllBetween(last1, j, bd1, ids);\n        last1 = j + 1;\n      }\n      if (random.nextInt(10) == 5 || j == ids.length - 1) {\n        queue.updateSlice(slice2);\n        assertTrue(slice2.isTailItem(term));\n        slice2.apply(bd2, j);\n        assertAllBetween(last2, j, bd2, ids);\n        last2 = j + 1;\n      }\n      assertEquals(uniqueValues.size(), queue.numGlobalTermDeletes());\n    }\n    assertEquals(uniqueValues, bd1.terms.keySet());\n    assertEquals(uniqueValues, bd2.terms.keySet());\n    assertEquals(uniqueValues, new HashSet<Term>(Arrays.asList(queue\n        .freezeGlobalBuffer(null).terms)));\n    assertEquals(\"num deletes must be 0 after freeze\", 0, queue\n        .numGlobalTermDeletes());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDocumentsWriterDeleteQueue#testUpdateDelteSlices().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDocumentsWriterDeleteQueue#testUpdateDelteSlices().mjava","sourceNew":"  public void testUpdateDelteSlices() {\n    DocumentsWriterDeleteQueue queue = new DocumentsWriterDeleteQueue();\n    final int size = 200 + random.nextInt(500) * RANDOM_MULTIPLIER;\n    Integer[] ids = new Integer[size];\n    for (int i = 0; i < ids.length; i++) {\n      ids[i] = random.nextInt();\n    }\n    DeleteSlice slice1 = queue.newSlice();\n    DeleteSlice slice2 = queue.newSlice();\n    BufferedDeletes bd1 = new BufferedDeletes(false);\n    BufferedDeletes bd2 = new BufferedDeletes(false);\n    int last1 = 0;\n    int last2 = 0;\n    Set<Term> uniqueValues = new HashSet<Term>();\n    for (int j = 0; j < ids.length; j++) {\n      Integer i = ids[j];\n      // create an array here since we compare identity below against tailItem\n      Term[] term = new Term[] {new Term(\"id\", i.toString())};\n      uniqueValues.add(term[0]);\n      queue.addDelete(term);\n      if (random.nextInt(20) == 0 || j == ids.length - 1) {\n        queue.updateSlice(slice1);\n        assertTrue(slice1.isTailItem(term));\n        slice1.apply(bd1, j);\n        assertAllBetween(last1, j, bd1, ids);\n        last1 = j + 1;\n      }\n      if (random.nextInt(10) == 5 || j == ids.length - 1) {\n        queue.updateSlice(slice2);\n        assertTrue(slice2.isTailItem(term));\n        slice2.apply(bd2, j);\n        assertAllBetween(last2, j, bd2, ids);\n        last2 = j + 1;\n      }\n      assertEquals(uniqueValues.size(), queue.numGlobalTermDeletes());\n    }\n    assertEquals(uniqueValues, bd1.terms.keySet());\n    assertEquals(uniqueValues, bd2.terms.keySet());\n    assertEquals(uniqueValues, new HashSet<Term>(Arrays.asList(queue\n        .freezeGlobalBuffer(null).terms)));\n    assertEquals(\"num deletes must be 0 after freeze\", 0, queue\n        .numGlobalTermDeletes());\n  }\n\n","sourceOld":"  public void testUpdateDelteSlices() {\n    DocumentsWriterDeleteQueue queue = new DocumentsWriterDeleteQueue();\n    final int size = 200 + random.nextInt(500) * RANDOM_MULTIPLIER;\n    Integer[] ids = new Integer[size];\n    for (int i = 0; i < ids.length; i++) {\n      ids[i] = random.nextInt();\n    }\n    Term template = new Term(\"id\");\n    DeleteSlice slice1 = queue.newSlice();\n    DeleteSlice slice2 = queue.newSlice();\n    BufferedDeletes bd1 = new BufferedDeletes(false);\n    BufferedDeletes bd2 = new BufferedDeletes(false);\n    int last1 = 0;\n    int last2 = 0;\n    Set<Term> uniqueValues = new HashSet<Term>();\n    for (int j = 0; j < ids.length; j++) {\n      Integer i = ids[j];\n      // create an array here since we compare identity below against tailItem\n      Term[] term = new Term[] {template.createTerm(i.toString())};\n      uniqueValues.add(term[0]);\n      queue.addDelete(term);\n      if (random.nextInt(20) == 0 || j == ids.length - 1) {\n        queue.updateSlice(slice1);\n        assertTrue(slice1.isTailItem(term));\n        slice1.apply(bd1, j);\n        assertAllBetween(last1, j, bd1, ids);\n        last1 = j + 1;\n      }\n      if (random.nextInt(10) == 5 || j == ids.length - 1) {\n        queue.updateSlice(slice2);\n        assertTrue(slice2.isTailItem(term));\n        slice2.apply(bd2, j);\n        assertAllBetween(last2, j, bd2, ids);\n        last2 = j + 1;\n      }\n      assertEquals(uniqueValues.size(), queue.numGlobalTermDeletes());\n    }\n    assertEquals(uniqueValues, bd1.terms.keySet());\n    assertEquals(uniqueValues, bd2.terms.keySet());\n    assertEquals(uniqueValues, new HashSet<Term>(Arrays.asList(queue\n        .freezeGlobalBuffer(null).terms)));\n    assertEquals(\"num deletes must be 0 after freeze\", 0, queue\n        .numGlobalTermDeletes());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fa5ed548a2e7179ad03d6dfef30e19b8c06a8e2","date":1311898374,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDocumentsWriterDeleteQueue#testUpdateDelteSlices().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDocumentsWriterDeleteQueue#testUpdateDelteSlices().mjava","sourceNew":"  public void testUpdateDelteSlices() {\n    DocumentsWriterDeleteQueue queue = new DocumentsWriterDeleteQueue();\n    final int size = 200 + random.nextInt(500) * RANDOM_MULTIPLIER;\n    Integer[] ids = new Integer[size];\n    for (int i = 0; i < ids.length; i++) {\n      ids[i] = random.nextInt();\n    }\n    DeleteSlice slice1 = queue.newSlice();\n    DeleteSlice slice2 = queue.newSlice();\n    BufferedDeletes bd1 = new BufferedDeletes();\n    BufferedDeletes bd2 = new BufferedDeletes();\n    int last1 = 0;\n    int last2 = 0;\n    Set<Term> uniqueValues = new HashSet<Term>();\n    for (int j = 0; j < ids.length; j++) {\n      Integer i = ids[j];\n      // create an array here since we compare identity below against tailItem\n      Term[] term = new Term[] {new Term(\"id\", i.toString())};\n      uniqueValues.add(term[0]);\n      queue.addDelete(term);\n      if (random.nextInt(20) == 0 || j == ids.length - 1) {\n        queue.updateSlice(slice1);\n        assertTrue(slice1.isTailItem(term));\n        slice1.apply(bd1, j);\n        assertAllBetween(last1, j, bd1, ids);\n        last1 = j + 1;\n      }\n      if (random.nextInt(10) == 5 || j == ids.length - 1) {\n        queue.updateSlice(slice2);\n        assertTrue(slice2.isTailItem(term));\n        slice2.apply(bd2, j);\n        assertAllBetween(last2, j, bd2, ids);\n        last2 = j + 1;\n      }\n      assertEquals(uniqueValues.size(), queue.numGlobalTermDeletes());\n    }\n    assertEquals(uniqueValues, bd1.terms.keySet());\n    assertEquals(uniqueValues, bd2.terms.keySet());\n    HashSet<Term> frozenSet = new HashSet<Term>();\n    for (Term t : queue.freezeGlobalBuffer(null).termsIterable()) {\n      frozenSet.add(t);\n    }\n    assertEquals(uniqueValues, frozenSet);\n    assertEquals(\"num deletes must be 0 after freeze\", 0, queue\n        .numGlobalTermDeletes());\n  }\n\n","sourceOld":"  public void testUpdateDelteSlices() {\n    DocumentsWriterDeleteQueue queue = new DocumentsWriterDeleteQueue();\n    final int size = 200 + random.nextInt(500) * RANDOM_MULTIPLIER;\n    Integer[] ids = new Integer[size];\n    for (int i = 0; i < ids.length; i++) {\n      ids[i] = random.nextInt();\n    }\n    DeleteSlice slice1 = queue.newSlice();\n    DeleteSlice slice2 = queue.newSlice();\n    BufferedDeletes bd1 = new BufferedDeletes(false);\n    BufferedDeletes bd2 = new BufferedDeletes(false);\n    int last1 = 0;\n    int last2 = 0;\n    Set<Term> uniqueValues = new HashSet<Term>();\n    for (int j = 0; j < ids.length; j++) {\n      Integer i = ids[j];\n      // create an array here since we compare identity below against tailItem\n      Term[] term = new Term[] {new Term(\"id\", i.toString())};\n      uniqueValues.add(term[0]);\n      queue.addDelete(term);\n      if (random.nextInt(20) == 0 || j == ids.length - 1) {\n        queue.updateSlice(slice1);\n        assertTrue(slice1.isTailItem(term));\n        slice1.apply(bd1, j);\n        assertAllBetween(last1, j, bd1, ids);\n        last1 = j + 1;\n      }\n      if (random.nextInt(10) == 5 || j == ids.length - 1) {\n        queue.updateSlice(slice2);\n        assertTrue(slice2.isTailItem(term));\n        slice2.apply(bd2, j);\n        assertAllBetween(last2, j, bd2, ids);\n        last2 = j + 1;\n      }\n      assertEquals(uniqueValues.size(), queue.numGlobalTermDeletes());\n    }\n    assertEquals(uniqueValues, bd1.terms.keySet());\n    assertEquals(uniqueValues, bd2.terms.keySet());\n    assertEquals(uniqueValues, new HashSet<Term>(Arrays.asList(queue\n        .freezeGlobalBuffer(null).terms)));\n    assertEquals(\"num deletes must be 0 after freeze\", 0, queue\n        .numGlobalTermDeletes());\n  }\n\n","bugFix":null,"bugIntro":["7e4c214a1f904dde76f5611b56d4081533055b3b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"21a62a863ced88734bdbffa17760bc6ed7e42ff8","date":1311954690,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDocumentsWriterDeleteQueue#testUpdateDelteSlices().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDocumentsWriterDeleteQueue#testUpdateDelteSlices().mjava","sourceNew":"  public void testUpdateDelteSlices() {\n    DocumentsWriterDeleteQueue queue = new DocumentsWriterDeleteQueue();\n    final int size = 200 + random.nextInt(500) * RANDOM_MULTIPLIER;\n    Integer[] ids = new Integer[size];\n    for (int i = 0; i < ids.length; i++) {\n      ids[i] = random.nextInt();\n    }\n    DeleteSlice slice1 = queue.newSlice();\n    DeleteSlice slice2 = queue.newSlice();\n    BufferedDeletes bd1 = new BufferedDeletes();\n    BufferedDeletes bd2 = new BufferedDeletes();\n    int last1 = 0;\n    int last2 = 0;\n    Set<Term> uniqueValues = new HashSet<Term>();\n    for (int j = 0; j < ids.length; j++) {\n      Integer i = ids[j];\n      // create an array here since we compare identity below against tailItem\n      Term[] term = new Term[] {new Term(\"id\", i.toString())};\n      uniqueValues.add(term[0]);\n      queue.addDelete(term);\n      if (random.nextInt(20) == 0 || j == ids.length - 1) {\n        queue.updateSlice(slice1);\n        assertTrue(slice1.isTailItem(term));\n        slice1.apply(bd1, j);\n        assertAllBetween(last1, j, bd1, ids);\n        last1 = j + 1;\n      }\n      if (random.nextInt(10) == 5 || j == ids.length - 1) {\n        queue.updateSlice(slice2);\n        assertTrue(slice2.isTailItem(term));\n        slice2.apply(bd2, j);\n        assertAllBetween(last2, j, bd2, ids);\n        last2 = j + 1;\n      }\n      assertEquals(uniqueValues.size(), queue.numGlobalTermDeletes());\n    }\n    assertEquals(uniqueValues, bd1.terms.keySet());\n    assertEquals(uniqueValues, bd2.terms.keySet());\n    HashSet<Term> frozenSet = new HashSet<Term>();\n    for (Term t : queue.freezeGlobalBuffer(null).termsIterable()) {\n      BytesRef bytesRef = new BytesRef();\n      bytesRef.copy(t.bytes);\n      frozenSet.add(new Term(t.field, bytesRef));\n    }\n    assertEquals(uniqueValues, frozenSet);\n    assertEquals(\"num deletes must be 0 after freeze\", 0, queue\n        .numGlobalTermDeletes());\n  }\n\n","sourceOld":"  public void testUpdateDelteSlices() {\n    DocumentsWriterDeleteQueue queue = new DocumentsWriterDeleteQueue();\n    final int size = 200 + random.nextInt(500) * RANDOM_MULTIPLIER;\n    Integer[] ids = new Integer[size];\n    for (int i = 0; i < ids.length; i++) {\n      ids[i] = random.nextInt();\n    }\n    DeleteSlice slice1 = queue.newSlice();\n    DeleteSlice slice2 = queue.newSlice();\n    BufferedDeletes bd1 = new BufferedDeletes();\n    BufferedDeletes bd2 = new BufferedDeletes();\n    int last1 = 0;\n    int last2 = 0;\n    Set<Term> uniqueValues = new HashSet<Term>();\n    for (int j = 0; j < ids.length; j++) {\n      Integer i = ids[j];\n      // create an array here since we compare identity below against tailItem\n      Term[] term = new Term[] {new Term(\"id\", i.toString())};\n      uniqueValues.add(term[0]);\n      queue.addDelete(term);\n      if (random.nextInt(20) == 0 || j == ids.length - 1) {\n        queue.updateSlice(slice1);\n        assertTrue(slice1.isTailItem(term));\n        slice1.apply(bd1, j);\n        assertAllBetween(last1, j, bd1, ids);\n        last1 = j + 1;\n      }\n      if (random.nextInt(10) == 5 || j == ids.length - 1) {\n        queue.updateSlice(slice2);\n        assertTrue(slice2.isTailItem(term));\n        slice2.apply(bd2, j);\n        assertAllBetween(last2, j, bd2, ids);\n        last2 = j + 1;\n      }\n      assertEquals(uniqueValues.size(), queue.numGlobalTermDeletes());\n    }\n    assertEquals(uniqueValues, bd1.terms.keySet());\n    assertEquals(uniqueValues, bd2.terms.keySet());\n    HashSet<Term> frozenSet = new HashSet<Term>();\n    for (Term t : queue.freezeGlobalBuffer(null).termsIterable()) {\n      frozenSet.add(t);\n    }\n    assertEquals(uniqueValues, frozenSet);\n    assertEquals(\"num deletes must be 0 after freeze\", 0, queue\n        .numGlobalTermDeletes());\n  }\n\n","bugFix":null,"bugIntro":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e6e919043fa85ee891123768dd655a98edbbf63c","date":1322225413,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDocumentsWriterDeleteQueue#testUpdateDelteSlices().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDocumentsWriterDeleteQueue#testUpdateDelteSlices().mjava","sourceNew":"  public void testUpdateDelteSlices() {\n    DocumentsWriterDeleteQueue queue = new DocumentsWriterDeleteQueue();\n    final int size = 200 + random.nextInt(500) * RANDOM_MULTIPLIER;\n    Integer[] ids = new Integer[size];\n    for (int i = 0; i < ids.length; i++) {\n      ids[i] = random.nextInt();\n    }\n    DeleteSlice slice1 = queue.newSlice();\n    DeleteSlice slice2 = queue.newSlice();\n    BufferedDeletes bd1 = new BufferedDeletes();\n    BufferedDeletes bd2 = new BufferedDeletes();\n    int last1 = 0;\n    int last2 = 0;\n    Set<Term> uniqueValues = new HashSet<Term>();\n    for (int j = 0; j < ids.length; j++) {\n      Integer i = ids[j];\n      // create an array here since we compare identity below against tailItem\n      Term[] term = new Term[] {new Term(\"id\", i.toString())};\n      uniqueValues.add(term[0]);\n      queue.addDelete(term);\n      if (random.nextInt(20) == 0 || j == ids.length - 1) {\n        queue.updateSlice(slice1);\n        assertTrue(slice1.isTailItem(term));\n        slice1.apply(bd1, j);\n        assertAllBetween(last1, j, bd1, ids);\n        last1 = j + 1;\n      }\n      if (random.nextInt(10) == 5 || j == ids.length - 1) {\n        queue.updateSlice(slice2);\n        assertTrue(slice2.isTailItem(term));\n        slice2.apply(bd2, j);\n        assertAllBetween(last2, j, bd2, ids);\n        last2 = j + 1;\n      }\n      assertEquals(uniqueValues.size(), queue.numGlobalTermDeletes());\n    }\n    assertEquals(uniqueValues, bd1.terms.keySet());\n    assertEquals(uniqueValues, bd2.terms.keySet());\n    HashSet<Term> frozenSet = new HashSet<Term>();\n    for (Term t : queue.freezeGlobalBuffer(null).termsIterable()) {\n      BytesRef bytesRef = new BytesRef();\n      bytesRef.copyBytes(t.bytes);\n      frozenSet.add(new Term(t.field, bytesRef));\n    }\n    assertEquals(uniqueValues, frozenSet);\n    assertEquals(\"num deletes must be 0 after freeze\", 0, queue\n        .numGlobalTermDeletes());\n  }\n\n","sourceOld":"  public void testUpdateDelteSlices() {\n    DocumentsWriterDeleteQueue queue = new DocumentsWriterDeleteQueue();\n    final int size = 200 + random.nextInt(500) * RANDOM_MULTIPLIER;\n    Integer[] ids = new Integer[size];\n    for (int i = 0; i < ids.length; i++) {\n      ids[i] = random.nextInt();\n    }\n    DeleteSlice slice1 = queue.newSlice();\n    DeleteSlice slice2 = queue.newSlice();\n    BufferedDeletes bd1 = new BufferedDeletes();\n    BufferedDeletes bd2 = new BufferedDeletes();\n    int last1 = 0;\n    int last2 = 0;\n    Set<Term> uniqueValues = new HashSet<Term>();\n    for (int j = 0; j < ids.length; j++) {\n      Integer i = ids[j];\n      // create an array here since we compare identity below against tailItem\n      Term[] term = new Term[] {new Term(\"id\", i.toString())};\n      uniqueValues.add(term[0]);\n      queue.addDelete(term);\n      if (random.nextInt(20) == 0 || j == ids.length - 1) {\n        queue.updateSlice(slice1);\n        assertTrue(slice1.isTailItem(term));\n        slice1.apply(bd1, j);\n        assertAllBetween(last1, j, bd1, ids);\n        last1 = j + 1;\n      }\n      if (random.nextInt(10) == 5 || j == ids.length - 1) {\n        queue.updateSlice(slice2);\n        assertTrue(slice2.isTailItem(term));\n        slice2.apply(bd2, j);\n        assertAllBetween(last2, j, bd2, ids);\n        last2 = j + 1;\n      }\n      assertEquals(uniqueValues.size(), queue.numGlobalTermDeletes());\n    }\n    assertEquals(uniqueValues, bd1.terms.keySet());\n    assertEquals(uniqueValues, bd2.terms.keySet());\n    HashSet<Term> frozenSet = new HashSet<Term>();\n    for (Term t : queue.freezeGlobalBuffer(null).termsIterable()) {\n      BytesRef bytesRef = new BytesRef();\n      bytesRef.copy(t.bytes);\n      frozenSet.add(new Term(t.field, bytesRef));\n    }\n    assertEquals(uniqueValues, frozenSet);\n    assertEquals(\"num deletes must be 0 after freeze\", 0, queue\n        .numGlobalTermDeletes());\n  }\n\n","bugFix":null,"bugIntro":["7e4c214a1f904dde76f5611b56d4081533055b3b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocumentsWriterDeleteQueue#testUpdateDelteSlices().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDocumentsWriterDeleteQueue#testUpdateDelteSlices().mjava","sourceNew":"  public void testUpdateDelteSlices() {\n    DocumentsWriterDeleteQueue queue = new DocumentsWriterDeleteQueue();\n    final int size = 200 + random.nextInt(500) * RANDOM_MULTIPLIER;\n    Integer[] ids = new Integer[size];\n    for (int i = 0; i < ids.length; i++) {\n      ids[i] = random.nextInt();\n    }\n    DeleteSlice slice1 = queue.newSlice();\n    DeleteSlice slice2 = queue.newSlice();\n    BufferedDeletes bd1 = new BufferedDeletes();\n    BufferedDeletes bd2 = new BufferedDeletes();\n    int last1 = 0;\n    int last2 = 0;\n    Set<Term> uniqueValues = new HashSet<Term>();\n    for (int j = 0; j < ids.length; j++) {\n      Integer i = ids[j];\n      // create an array here since we compare identity below against tailItem\n      Term[] term = new Term[] {new Term(\"id\", i.toString())};\n      uniqueValues.add(term[0]);\n      queue.addDelete(term);\n      if (random.nextInt(20) == 0 || j == ids.length - 1) {\n        queue.updateSlice(slice1);\n        assertTrue(slice1.isTailItem(term));\n        slice1.apply(bd1, j);\n        assertAllBetween(last1, j, bd1, ids);\n        last1 = j + 1;\n      }\n      if (random.nextInt(10) == 5 || j == ids.length - 1) {\n        queue.updateSlice(slice2);\n        assertTrue(slice2.isTailItem(term));\n        slice2.apply(bd2, j);\n        assertAllBetween(last2, j, bd2, ids);\n        last2 = j + 1;\n      }\n      assertEquals(uniqueValues.size(), queue.numGlobalTermDeletes());\n    }\n    assertEquals(uniqueValues, bd1.terms.keySet());\n    assertEquals(uniqueValues, bd2.terms.keySet());\n    HashSet<Term> frozenSet = new HashSet<Term>();\n    for (Term t : queue.freezeGlobalBuffer(null).termsIterable()) {\n      BytesRef bytesRef = new BytesRef();\n      bytesRef.copyBytes(t.bytes);\n      frozenSet.add(new Term(t.field, bytesRef));\n    }\n    assertEquals(uniqueValues, frozenSet);\n    assertEquals(\"num deletes must be 0 after freeze\", 0, queue\n        .numGlobalTermDeletes());\n  }\n\n","sourceOld":"  public void testUpdateDelteSlices() {\n    DocumentsWriterDeleteQueue queue = new DocumentsWriterDeleteQueue();\n    final int size = 200 + random.nextInt(500) * RANDOM_MULTIPLIER;\n    Integer[] ids = new Integer[size];\n    for (int i = 0; i < ids.length; i++) {\n      ids[i] = random.nextInt();\n    }\n    DeleteSlice slice1 = queue.newSlice();\n    DeleteSlice slice2 = queue.newSlice();\n    BufferedDeletes bd1 = new BufferedDeletes();\n    BufferedDeletes bd2 = new BufferedDeletes();\n    int last1 = 0;\n    int last2 = 0;\n    Set<Term> uniqueValues = new HashSet<Term>();\n    for (int j = 0; j < ids.length; j++) {\n      Integer i = ids[j];\n      // create an array here since we compare identity below against tailItem\n      Term[] term = new Term[] {new Term(\"id\", i.toString())};\n      uniqueValues.add(term[0]);\n      queue.addDelete(term);\n      if (random.nextInt(20) == 0 || j == ids.length - 1) {\n        queue.updateSlice(slice1);\n        assertTrue(slice1.isTailItem(term));\n        slice1.apply(bd1, j);\n        assertAllBetween(last1, j, bd1, ids);\n        last1 = j + 1;\n      }\n      if (random.nextInt(10) == 5 || j == ids.length - 1) {\n        queue.updateSlice(slice2);\n        assertTrue(slice2.isTailItem(term));\n        slice2.apply(bd2, j);\n        assertAllBetween(last2, j, bd2, ids);\n        last2 = j + 1;\n      }\n      assertEquals(uniqueValues.size(), queue.numGlobalTermDeletes());\n    }\n    assertEquals(uniqueValues, bd1.terms.keySet());\n    assertEquals(uniqueValues, bd2.terms.keySet());\n    HashSet<Term> frozenSet = new HashSet<Term>();\n    for (Term t : queue.freezeGlobalBuffer(null).termsIterable()) {\n      BytesRef bytesRef = new BytesRef();\n      bytesRef.copyBytes(t.bytes);\n      frozenSet.add(new Term(t.field, bytesRef));\n    }\n    assertEquals(uniqueValues, frozenSet);\n    assertEquals(\"num deletes must be 0 after freeze\", 0, queue\n        .numGlobalTermDeletes());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["e6e919043fa85ee891123768dd655a98edbbf63c"],"fafef7c83fe8e0b3ca9298d5d75d6b943dc28153":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","78248211b373c5a9b53071bf888805d4fab51bd3"],"327863a2fd61e831028b6c56c8fef6b00a44eb0b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2553b00f699380c64959ccb27991289aae87be2e":["a3776dccca01c11e7046323cfad46a3b4a471233","fafef7c83fe8e0b3ca9298d5d75d6b943dc28153"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["b3e06be49006ecac364d39d12b9c9f74882f9b9f","fafef7c83fe8e0b3ca9298d5d75d6b943dc28153"],"9fa5ed548a2e7179ad03d6dfef30e19b8c06a8e2":["fafef7c83fe8e0b3ca9298d5d75d6b943dc28153"],"a3776dccca01c11e7046323cfad46a3b4a471233":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"78248211b373c5a9b53071bf888805d4fab51bd3":["327863a2fd61e831028b6c56c8fef6b00a44eb0b"],"21a62a863ced88734bdbffa17760bc6ed7e42ff8":["9fa5ed548a2e7179ad03d6dfef30e19b8c06a8e2"],"e6e919043fa85ee891123768dd655a98edbbf63c":["21a62a863ced88734bdbffa17760bc6ed7e42ff8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fafef7c83fe8e0b3ca9298d5d75d6b943dc28153":["2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c","9fa5ed548a2e7179ad03d6dfef30e19b8c06a8e2"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["fafef7c83fe8e0b3ca9298d5d75d6b943dc28153","135621f3a0670a9394eb563224a3b76cc4dddc0f","d083e83f225b11e5fdd900e83d26ddb385b6955c","a3776dccca01c11e7046323cfad46a3b4a471233"],"327863a2fd61e831028b6c56c8fef6b00a44eb0b":["78248211b373c5a9b53071bf888805d4fab51bd3"],"2553b00f699380c64959ccb27991289aae87be2e":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"9fa5ed548a2e7179ad03d6dfef30e19b8c06a8e2":["21a62a863ced88734bdbffa17760bc6ed7e42ff8"],"a3776dccca01c11e7046323cfad46a3b4a471233":["2553b00f699380c64959ccb27991289aae87be2e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["135621f3a0670a9394eb563224a3b76cc4dddc0f","b3e06be49006ecac364d39d12b9c9f74882f9b9f","327863a2fd61e831028b6c56c8fef6b00a44eb0b","a3776dccca01c11e7046323cfad46a3b4a471233"],"78248211b373c5a9b53071bf888805d4fab51bd3":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"21a62a863ced88734bdbffa17760bc6ed7e42ff8":["e6e919043fa85ee891123768dd655a98edbbf63c"],"e6e919043fa85ee891123768dd655a98edbbf63c":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["135621f3a0670a9394eb563224a3b76cc4dddc0f","2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}