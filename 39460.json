{"path":"modules/analysis/common/src/java/org/apache/lucene/analysis/ga/IrishAnalyzer#createComponents(String,Reader).mjava","commits":[{"id":"32da00b9d965f816447f049c40b5ca9536061de6","date":1332604744,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/ga/IrishAnalyzer#createComponents(String,Reader).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Creates a\n   * {@link org.apache.lucene.analysis.Analyzer.TokenStreamComponents}\n   * which tokenizes all the text in the provided {@link Reader}.\n   * \n   * @return A\n   *         {@link org.apache.lucene.analysis.Analyzer.TokenStreamComponents}\n   *         built from an {@link StandardTokenizer} filtered with\n   *         {@link StandardFilter}, {@link IrishLowerCaseFilter}, {@link StopFilter}\n   *         , {@link KeywordMarkerFilter} if a stem exclusion set is\n   *         provided and {@link SnowballFilter}.\n   */\n  @Override\n  protected TokenStreamComponents createComponents(String fieldName,\n      Reader reader) {\n    final Tokenizer source = new StandardTokenizer(matchVersion, reader);\n    TokenStream result = new StandardFilter(matchVersion, source);\n    StopFilter s = new StopFilter(matchVersion, result, HYPHENATIONS);\n    s.setEnablePositionIncrements(false);\n    result = s;\n    result = new ElisionFilter(matchVersion, result, DEFAULT_ARTICLES);\n    result = new IrishLowerCaseFilter(result);\n    result = new StopFilter(matchVersion, result, stopwords);\n    if(!stemExclusionSet.isEmpty())\n      result = new KeywordMarkerFilter(result, stemExclusionSet);\n    result = new SnowballFilter(result, new IrishStemmer());\n    return new TokenStreamComponents(source, result);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/ga/IrishAnalyzer#createComponents(String,Reader).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/ga/IrishAnalyzer#createComponents(String,Reader).mjava","sourceNew":"  /**\n   * Creates a\n   * {@link org.apache.lucene.analysis.Analyzer.TokenStreamComponents}\n   * which tokenizes all the text in the provided {@link Reader}.\n   * \n   * @return A\n   *         {@link org.apache.lucene.analysis.Analyzer.TokenStreamComponents}\n   *         built from an {@link StandardTokenizer} filtered with\n   *         {@link StandardFilter}, {@link IrishLowerCaseFilter}, {@link StopFilter}\n   *         , {@link KeywordMarkerFilter} if a stem exclusion set is\n   *         provided and {@link SnowballFilter}.\n   */\n  @Override\n  protected TokenStreamComponents createComponents(String fieldName,\n      Reader reader) {\n    final Tokenizer source = new StandardTokenizer(matchVersion, reader);\n    TokenStream result = new StandardFilter(matchVersion, source);\n    StopFilter s = new StopFilter(matchVersion, result, HYPHENATIONS);\n    s.setEnablePositionIncrements(false);\n    result = s;\n    result = new ElisionFilter(matchVersion, result, DEFAULT_ARTICLES);\n    result = new IrishLowerCaseFilter(result);\n    result = new StopFilter(matchVersion, result, stopwords);\n    if(!stemExclusionSet.isEmpty())\n      result = new KeywordMarkerFilter(result, stemExclusionSet);\n    result = new SnowballFilter(result, new IrishStemmer());\n    return new TokenStreamComponents(source, result);\n  }\n\n","sourceOld":"  /**\n   * Creates a\n   * {@link org.apache.lucene.analysis.Analyzer.TokenStreamComponents}\n   * which tokenizes all the text in the provided {@link Reader}.\n   * \n   * @return A\n   *         {@link org.apache.lucene.analysis.Analyzer.TokenStreamComponents}\n   *         built from an {@link StandardTokenizer} filtered with\n   *         {@link StandardFilter}, {@link IrishLowerCaseFilter}, {@link StopFilter}\n   *         , {@link KeywordMarkerFilter} if a stem exclusion set is\n   *         provided and {@link SnowballFilter}.\n   */\n  @Override\n  protected TokenStreamComponents createComponents(String fieldName,\n      Reader reader) {\n    final Tokenizer source = new StandardTokenizer(matchVersion, reader);\n    TokenStream result = new StandardFilter(matchVersion, source);\n    StopFilter s = new StopFilter(matchVersion, result, HYPHENATIONS);\n    s.setEnablePositionIncrements(false);\n    result = s;\n    result = new ElisionFilter(matchVersion, result, DEFAULT_ARTICLES);\n    result = new IrishLowerCaseFilter(result);\n    result = new StopFilter(matchVersion, result, stopwords);\n    if(!stemExclusionSet.isEmpty())\n      result = new KeywordMarkerFilter(result, stemExclusionSet);\n    result = new SnowballFilter(result, new IrishStemmer());\n    return new TokenStreamComponents(source, result);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["32da00b9d965f816447f049c40b5ca9536061de6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"32da00b9d965f816447f049c40b5ca9536061de6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["32da00b9d965f816447f049c40b5ca9536061de6"],"32da00b9d965f816447f049c40b5ca9536061de6":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}