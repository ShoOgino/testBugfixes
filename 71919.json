{"path":"lucene/test-framework/src/java/org/apache/lucene/store/BaseDirectoryTestCase#testMapOfStrings().mjava","commits":[{"id":"79700663e164dece87bed4adfd3e28bab6cb1385","date":1425241849,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/BaseDirectoryTestCase#testMapOfStrings().mjava","pathOld":"/dev/null","sourceNew":"  public void testMapOfStrings() throws Exception {\n    Map<String,String> m = new HashMap<>();\n    m.put(\"test1\", \"value1\");\n    m.put(\"test2\", \"value2\");\n    \n    Directory dir = getDirectory(createTempDir(\"testMapOfStrings\"));\n    IndexOutput output = dir.createOutput(\"stringmap\", newIOContext(random()));\n    output.writeMapOfStrings(m);\n    output.writeMapOfStrings(Collections.emptyMap());\n    output.writeMapOfStrings(Collections.singletonMap(\"key\", \"value\"));\n    output.close();\n    \n    IndexInput input = dir.openInput(\"stringmap\", newIOContext(random()));\n    Map<String,String> map = input.readMapOfStrings();\n    assertEquals(m, map);\n    try {\n      map.put(\"bogus1\", \"bogus2\");\n      fail(\"map should be immutable\");\n    } catch (UnsupportedOperationException expected) {\n      // ok\n    }\n    \n    map = input.readMapOfStrings();\n    assertEquals(Collections.emptyMap(), map);\n    try {\n      map.put(\"bogus1\", \"bogus2\");\n      fail(\"map should be immutable\");\n    } catch (UnsupportedOperationException expected) {\n      // ok\n    }\n    \n    map = input.readMapOfStrings();\n    assertEquals(Collections.singletonMap(\"key\", \"value\"), map);\n    try {\n      map.put(\"bogus1\", \"bogus2\");\n      fail(\"map should be immutable\");\n    } catch (UnsupportedOperationException expected) {\n      // ok\n    }\n    \n    assertEquals(input.length(), input.getFilePointer());\n    input.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["05fe562aa248790944d43cdd478f512572835ba0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"299a2348fa24151d150182211b6208a38e5e3450","date":1425304608,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/BaseDirectoryTestCase#testMapOfStrings().mjava","pathOld":"/dev/null","sourceNew":"  public void testMapOfStrings() throws Exception {\n    Map<String,String> m = new HashMap<>();\n    m.put(\"test1\", \"value1\");\n    m.put(\"test2\", \"value2\");\n    \n    Directory dir = getDirectory(createTempDir(\"testMapOfStrings\"));\n    IndexOutput output = dir.createOutput(\"stringmap\", newIOContext(random()));\n    output.writeMapOfStrings(m);\n    output.writeMapOfStrings(Collections.emptyMap());\n    output.writeMapOfStrings(Collections.singletonMap(\"key\", \"value\"));\n    output.close();\n    \n    IndexInput input = dir.openInput(\"stringmap\", newIOContext(random()));\n    Map<String,String> map = input.readMapOfStrings();\n    assertEquals(m, map);\n    try {\n      map.put(\"bogus1\", \"bogus2\");\n      fail(\"map should be immutable\");\n    } catch (UnsupportedOperationException expected) {\n      // ok\n    }\n    \n    map = input.readMapOfStrings();\n    assertEquals(Collections.emptyMap(), map);\n    try {\n      map.put(\"bogus1\", \"bogus2\");\n      fail(\"map should be immutable\");\n    } catch (UnsupportedOperationException expected) {\n      // ok\n    }\n    \n    map = input.readMapOfStrings();\n    assertEquals(Collections.singletonMap(\"key\", \"value\"), map);\n    try {\n      map.put(\"bogus1\", \"bogus2\");\n      fail(\"map should be immutable\");\n    } catch (UnsupportedOperationException expected) {\n      // ok\n    }\n    \n    assertEquals(input.length(), input.getFilePointer());\n    input.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/BaseDirectoryTestCase#testMapOfStrings().mjava","pathOld":"/dev/null","sourceNew":"  public void testMapOfStrings() throws Exception {\n    Map<String,String> m = new HashMap<>();\n    m.put(\"test1\", \"value1\");\n    m.put(\"test2\", \"value2\");\n    \n    Directory dir = getDirectory(createTempDir(\"testMapOfStrings\"));\n    IndexOutput output = dir.createOutput(\"stringmap\", newIOContext(random()));\n    output.writeMapOfStrings(m);\n    output.writeMapOfStrings(Collections.emptyMap());\n    output.writeMapOfStrings(Collections.singletonMap(\"key\", \"value\"));\n    output.close();\n    \n    IndexInput input = dir.openInput(\"stringmap\", newIOContext(random()));\n    Map<String,String> map = input.readMapOfStrings();\n    assertEquals(m, map);\n    try {\n      map.put(\"bogus1\", \"bogus2\");\n      fail(\"map should be immutable\");\n    } catch (UnsupportedOperationException expected) {\n      // ok\n    }\n    \n    map = input.readMapOfStrings();\n    assertEquals(Collections.emptyMap(), map);\n    try {\n      map.put(\"bogus1\", \"bogus2\");\n      fail(\"map should be immutable\");\n    } catch (UnsupportedOperationException expected) {\n      // ok\n    }\n    \n    map = input.readMapOfStrings();\n    assertEquals(Collections.singletonMap(\"key\", \"value\"), map);\n    try {\n      map.put(\"bogus1\", \"bogus2\");\n      fail(\"map should be immutable\");\n    } catch (UnsupportedOperationException expected) {\n      // ok\n    }\n    \n    assertEquals(input.length(), input.getFilePointer());\n    input.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"05fe562aa248790944d43cdd478f512572835ba0","date":1455901667,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/BaseDirectoryTestCase#testMapOfStrings().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/BaseDirectoryTestCase#testMapOfStrings().mjava","sourceNew":"  public void testMapOfStrings() throws Exception {\n    Map<String,String> m = new HashMap<>();\n    m.put(\"test1\", \"value1\");\n    m.put(\"test2\", \"value2\");\n    \n    Directory dir = getDirectory(createTempDir(\"testMapOfStrings\"));\n    IndexOutput output = dir.createOutput(\"stringmap\", newIOContext(random()));\n    output.writeMapOfStrings(m);\n    output.writeMapOfStrings(Collections.emptyMap());\n    output.writeMapOfStrings(Collections.singletonMap(\"key\", \"value\"));\n    output.close();\n    \n    IndexInput input = dir.openInput(\"stringmap\", newIOContext(random()));\n    Map<String,String> map1 = input.readMapOfStrings();\n    assertEquals(m, map1);\n    // map should be immutable\n    expectThrows(UnsupportedOperationException.class, () -> {\n      map1.put(\"bogus1\", \"bogus2\");\n    });\n    \n    Map<String,String> map2 = input.readMapOfStrings();\n    assertEquals(Collections.emptyMap(), map2);\n    // map should be immutable\n    expectThrows(UnsupportedOperationException.class, () -> {\n      map2.put(\"bogus1\", \"bogus2\");\n    });\n    \n    Map<String,String> map3 = input.readMapOfStrings();\n    assertEquals(Collections.singletonMap(\"key\", \"value\"), map3);\n    // map should be immutable\n    expectThrows(UnsupportedOperationException.class, () -> {\n      map3.put(\"bogus1\", \"bogus2\");\n    });\n    \n    assertEquals(input.length(), input.getFilePointer());\n    input.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testMapOfStrings() throws Exception {\n    Map<String,String> m = new HashMap<>();\n    m.put(\"test1\", \"value1\");\n    m.put(\"test2\", \"value2\");\n    \n    Directory dir = getDirectory(createTempDir(\"testMapOfStrings\"));\n    IndexOutput output = dir.createOutput(\"stringmap\", newIOContext(random()));\n    output.writeMapOfStrings(m);\n    output.writeMapOfStrings(Collections.emptyMap());\n    output.writeMapOfStrings(Collections.singletonMap(\"key\", \"value\"));\n    output.close();\n    \n    IndexInput input = dir.openInput(\"stringmap\", newIOContext(random()));\n    Map<String,String> map = input.readMapOfStrings();\n    assertEquals(m, map);\n    try {\n      map.put(\"bogus1\", \"bogus2\");\n      fail(\"map should be immutable\");\n    } catch (UnsupportedOperationException expected) {\n      // ok\n    }\n    \n    map = input.readMapOfStrings();\n    assertEquals(Collections.emptyMap(), map);\n    try {\n      map.put(\"bogus1\", \"bogus2\");\n      fail(\"map should be immutable\");\n    } catch (UnsupportedOperationException expected) {\n      // ok\n    }\n    \n    map = input.readMapOfStrings();\n    assertEquals(Collections.singletonMap(\"key\", \"value\"), map);\n    try {\n      map.put(\"bogus1\", \"bogus2\");\n      fail(\"map should be immutable\");\n    } catch (UnsupportedOperationException expected) {\n      // ok\n    }\n    \n    assertEquals(input.length(), input.getFilePointer());\n    input.close();\n    dir.close();\n  }\n\n","bugFix":["79700663e164dece87bed4adfd3e28bab6cb1385"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f3adea0022cffaaa592081efed775a7b8bf86b51","date":1532414870,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/BaseDirectoryTestCase#testMapOfStrings().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/BaseDirectoryTestCase#testMapOfStrings().mjava","sourceNew":"  public void testMapOfStrings() throws Exception {\n    Map<String,String> m = new HashMap<>();\n    m.put(\"test1\", \"value1\");\n    m.put(\"test2\", \"value2\");\n\n    try (Directory dir = getDirectory(createTempDir(\"testMapOfStrings\"))) {\n      IndexOutput output = dir.createOutput(\"stringmap\", newIOContext(random()));\n      output.writeMapOfStrings(m);\n      output.writeMapOfStrings(Collections.emptyMap());\n      output.writeMapOfStrings(Collections.singletonMap(\"key\", \"value\"));\n      output.close();\n\n      IndexInput input = dir.openInput(\"stringmap\", newIOContext(random()));\n      Map<String, String> map1 = input.readMapOfStrings();\n      assertEquals(m, map1);\n      // map should be immutable\n      expectThrows(UnsupportedOperationException.class, () -> {\n        map1.put(\"bogus1\", \"bogus2\");\n      });\n\n      Map<String, String> map2 = input.readMapOfStrings();\n      assertEquals(Collections.emptyMap(), map2);\n      // map should be immutable\n      expectThrows(UnsupportedOperationException.class, () -> {\n        map2.put(\"bogus1\", \"bogus2\");\n      });\n\n      Map<String, String> map3 = input.readMapOfStrings();\n      assertEquals(Collections.singletonMap(\"key\", \"value\"), map3);\n      // map should be immutable\n      expectThrows(UnsupportedOperationException.class, () -> {\n        map3.put(\"bogus1\", \"bogus2\");\n      });\n\n      assertEquals(input.length(), input.getFilePointer());\n      input.close();\n    }\n  }\n\n","sourceOld":"  public void testMapOfStrings() throws Exception {\n    Map<String,String> m = new HashMap<>();\n    m.put(\"test1\", \"value1\");\n    m.put(\"test2\", \"value2\");\n    \n    Directory dir = getDirectory(createTempDir(\"testMapOfStrings\"));\n    IndexOutput output = dir.createOutput(\"stringmap\", newIOContext(random()));\n    output.writeMapOfStrings(m);\n    output.writeMapOfStrings(Collections.emptyMap());\n    output.writeMapOfStrings(Collections.singletonMap(\"key\", \"value\"));\n    output.close();\n    \n    IndexInput input = dir.openInput(\"stringmap\", newIOContext(random()));\n    Map<String,String> map1 = input.readMapOfStrings();\n    assertEquals(m, map1);\n    // map should be immutable\n    expectThrows(UnsupportedOperationException.class, () -> {\n      map1.put(\"bogus1\", \"bogus2\");\n    });\n    \n    Map<String,String> map2 = input.readMapOfStrings();\n    assertEquals(Collections.emptyMap(), map2);\n    // map should be immutable\n    expectThrows(UnsupportedOperationException.class, () -> {\n      map2.put(\"bogus1\", \"bogus2\");\n    });\n    \n    Map<String,String> map3 = input.readMapOfStrings();\n    assertEquals(Collections.singletonMap(\"key\", \"value\"), map3);\n    // map should be immutable\n    expectThrows(UnsupportedOperationException.class, () -> {\n      map3.put(\"bogus1\", \"bogus2\");\n    });\n    \n    assertEquals(input.length(), input.getFilePointer());\n    input.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","79700663e164dece87bed4adfd3e28bab6cb1385"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"05fe562aa248790944d43cdd478f512572835ba0":["79700663e164dece87bed4adfd3e28bab6cb1385"],"79700663e164dece87bed4adfd3e28bab6cb1385":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"299a2348fa24151d150182211b6208a38e5e3450":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","79700663e164dece87bed4adfd3e28bab6cb1385"],"f3adea0022cffaaa592081efed775a7b8bf86b51":["05fe562aa248790944d43cdd478f512572835ba0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f3adea0022cffaaa592081efed775a7b8bf86b51"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","79700663e164dece87bed4adfd3e28bab6cb1385","299a2348fa24151d150182211b6208a38e5e3450"],"79700663e164dece87bed4adfd3e28bab6cb1385":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","05fe562aa248790944d43cdd478f512572835ba0","299a2348fa24151d150182211b6208a38e5e3450"],"05fe562aa248790944d43cdd478f512572835ba0":["f3adea0022cffaaa592081efed775a7b8bf86b51"],"299a2348fa24151d150182211b6208a38e5e3450":[],"f3adea0022cffaaa592081efed775a7b8bf86b51":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","299a2348fa24151d150182211b6208a38e5e3450","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}