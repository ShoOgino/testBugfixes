{"path":"solr/core/src/test/org/apache/solr/security/BasicAuthIntegrationTest#verifySecurityStatus(HttpClient,String,String,Object,int).mjava","commits":[{"id":"ccfb40e1834cac1619556a0becf198bb7bad5d63","date":1438887805,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/BasicAuthIntegrationTest#verifySecurityStatus(HttpClient,String,String,Object,int).mjava","pathOld":"/dev/null","sourceNew":"  public static void verifySecurityStatus(HttpClient cl, String url, String objPath, Object expected, int count) throws Exception {\n    boolean success = false;\n    String s = null;\n    List<String> hierarchy = StrUtils.splitSmart(objPath, '/');\n    for (int i = 0; i < count; i++) {\n      HttpGet get = new HttpGet(url);\n      s = EntityUtils.toString(cl.execute(get).getEntity());\n      Map m = (Map) Utils.fromJSONString(s);\n\n      Object actual = Utils.getObjectByPath(m, true, hierarchy);\n      if (expected instanceof Predicate) {\n        Predicate predicate = (Predicate) expected;\n        if (predicate.test(actual)) {\n          success = true;\n          break;\n        }\n      } else if (Objects.equals(String.valueOf(actual), expected)) {\n        success = true;\n        break;\n      }\n      Thread.sleep(50);\n    }\n    assertTrue(\"No match for \" + objPath + \" = \" + expected + \", full response = \" + s, success);\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["77aad0f26236c97028aecb0fcc76de2b13edf1a0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"77aad0f26236c97028aecb0fcc76de2b13edf1a0","date":1441298393,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/BasicAuthIntegrationTest#verifySecurityStatus(HttpClient,String,String,Object,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/security/BasicAuthIntegrationTest#verifySecurityStatus(HttpClient,String,String,Object,int).mjava","sourceNew":"  public static void verifySecurityStatus(HttpClient cl, String url, String objPath, Object expected, int count) throws Exception {\n    boolean success = false;\n    String s = null;\n    List<String> hierarchy = StrUtils.splitSmart(objPath, '/');\n    for (int i = 0; i < count; i++) {\n      HttpGet get = new HttpGet(url);\n      s = EntityUtils.toString(cl.execute(get).getEntity());\n      Map m = (Map) Utils.fromJSONString(s);\n\n      Object actual = Utils.getObjectByPath(m, true, hierarchy);\n      if (expected instanceof Predicate) {\n        Predicate predicate = (Predicate) expected;\n        if (predicate.test(actual)) {\n          success = true;\n          break;\n        }\n      } else if (Objects.equals(actual == null ? null : String.valueOf(actual), expected)) {\n        success = true;\n        break;\n      }\n      Thread.sleep(50);\n    }\n    assertTrue(\"No match for \" + objPath + \" = \" + expected + \", full response = \" + s, success);\n\n  }\n\n","sourceOld":"  public static void verifySecurityStatus(HttpClient cl, String url, String objPath, Object expected, int count) throws Exception {\n    boolean success = false;\n    String s = null;\n    List<String> hierarchy = StrUtils.splitSmart(objPath, '/');\n    for (int i = 0; i < count; i++) {\n      HttpGet get = new HttpGet(url);\n      s = EntityUtils.toString(cl.execute(get).getEntity());\n      Map m = (Map) Utils.fromJSONString(s);\n\n      Object actual = Utils.getObjectByPath(m, true, hierarchy);\n      if (expected instanceof Predicate) {\n        Predicate predicate = (Predicate) expected;\n        if (predicate.test(actual)) {\n          success = true;\n          break;\n        }\n      } else if (Objects.equals(String.valueOf(actual), expected)) {\n        success = true;\n        break;\n      }\n      Thread.sleep(50);\n    }\n    assertTrue(\"No match for \" + objPath + \" = \" + expected + \", full response = \" + s, success);\n\n  }\n\n","bugFix":["ccfb40e1834cac1619556a0becf198bb7bad5d63"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"859081acf00749f5dd462772c571d611d4a4d2db","date":1459527719,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/BasicAuthIntegrationTest#verifySecurityStatus(HttpClient,String,String,Object,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/security/BasicAuthIntegrationTest#verifySecurityStatus(HttpClient,String,String,Object,int).mjava","sourceNew":"  public static void verifySecurityStatus(HttpClient cl, String url, String objPath, Object expected, int count) throws Exception {\n    boolean success = false;\n    String s = null;\n    List<String> hierarchy = StrUtils.splitSmart(objPath, '/');\n    for (int i = 0; i < count; i++) {\n      HttpGet get = new HttpGet(url);\n      HttpResponse rsp = cl.execute(get);\n      s = EntityUtils.toString(rsp.getEntity());\n      Map m = (Map) Utils.fromJSONString(s);\n      Utils.consumeFully(rsp.getEntity());\n      Object actual = Utils.getObjectByPath(m, true, hierarchy);\n      if (expected instanceof Predicate) {\n        Predicate predicate = (Predicate) expected;\n        if (predicate.test(actual)) {\n          success = true;\n          break;\n        }\n      } else if (Objects.equals(actual == null ? null : String.valueOf(actual), expected)) {\n        success = true;\n        break;\n      }\n      Thread.sleep(50);\n    }\n    assertTrue(\"No match for \" + objPath + \" = \" + expected + \", full response = \" + s, success);\n\n  }\n\n","sourceOld":"  public static void verifySecurityStatus(HttpClient cl, String url, String objPath, Object expected, int count) throws Exception {\n    boolean success = false;\n    String s = null;\n    List<String> hierarchy = StrUtils.splitSmart(objPath, '/');\n    for (int i = 0; i < count; i++) {\n      HttpGet get = new HttpGet(url);\n      s = EntityUtils.toString(cl.execute(get).getEntity());\n      Map m = (Map) Utils.fromJSONString(s);\n\n      Object actual = Utils.getObjectByPath(m, true, hierarchy);\n      if (expected instanceof Predicate) {\n        Predicate predicate = (Predicate) expected;\n        if (predicate.test(actual)) {\n          success = true;\n          break;\n        }\n      } else if (Objects.equals(actual == null ? null : String.valueOf(actual), expected)) {\n        success = true;\n        break;\n      }\n      Thread.sleep(50);\n    }\n    assertTrue(\"No match for \" + objPath + \" = \" + expected + \", full response = \" + s, success);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b6b27adfd0ae23a874c905f6003b09606641f5f","date":1472324778,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/BasicAuthIntegrationTest#verifySecurityStatus(HttpClient,String,String,Object,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/security/BasicAuthIntegrationTest#verifySecurityStatus(HttpClient,String,String,Object,int).mjava","sourceNew":"  public static void verifySecurityStatus(HttpClient cl, String url, String objPath,\n                                          Object expected, int count) throws Exception {\n    verifySecurityStatus(cl, url, objPath, expected, count, null, null);\n  }\n\n","sourceOld":"  public static void verifySecurityStatus(HttpClient cl, String url, String objPath, Object expected, int count) throws Exception {\n    boolean success = false;\n    String s = null;\n    List<String> hierarchy = StrUtils.splitSmart(objPath, '/');\n    for (int i = 0; i < count; i++) {\n      HttpGet get = new HttpGet(url);\n      HttpResponse rsp = cl.execute(get);\n      s = EntityUtils.toString(rsp.getEntity());\n      Map m = (Map) Utils.fromJSONString(s);\n      Utils.consumeFully(rsp.getEntity());\n      Object actual = Utils.getObjectByPath(m, true, hierarchy);\n      if (expected instanceof Predicate) {\n        Predicate predicate = (Predicate) expected;\n        if (predicate.test(actual)) {\n          success = true;\n          break;\n        }\n      } else if (Objects.equals(actual == null ? null : String.valueOf(actual), expected)) {\n        success = true;\n        break;\n      }\n      Thread.sleep(50);\n    }\n    assertTrue(\"No match for \" + objPath + \" = \" + expected + \", full response = \" + s, success);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/security/BasicAuthIntegrationTest#verifySecurityStatus(HttpClient,String,String,Object,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/security/BasicAuthIntegrationTest#verifySecurityStatus(HttpClient,String,String,Object,int).mjava","sourceNew":"  public static void verifySecurityStatus(HttpClient cl, String url, String objPath,\n                                          Object expected, int count) throws Exception {\n    verifySecurityStatus(cl, url, objPath, expected, count, null, null);\n  }\n\n","sourceOld":"  public static void verifySecurityStatus(HttpClient cl, String url, String objPath, Object expected, int count) throws Exception {\n    boolean success = false;\n    String s = null;\n    List<String> hierarchy = StrUtils.splitSmart(objPath, '/');\n    for (int i = 0; i < count; i++) {\n      HttpGet get = new HttpGet(url);\n      HttpResponse rsp = cl.execute(get);\n      s = EntityUtils.toString(rsp.getEntity());\n      Map m = (Map) Utils.fromJSONString(s);\n      Utils.consumeFully(rsp.getEntity());\n      Object actual = Utils.getObjectByPath(m, true, hierarchy);\n      if (expected instanceof Predicate) {\n        Predicate predicate = (Predicate) expected;\n        if (predicate.test(actual)) {\n          success = true;\n          break;\n        }\n      } else if (Objects.equals(actual == null ? null : String.valueOf(actual), expected)) {\n        success = true;\n        break;\n      }\n      Thread.sleep(50);\n    }\n    assertTrue(\"No match for \" + objPath + \" = \" + expected + \", full response = \" + s, success);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/security/BasicAuthIntegrationTest#verifySecurityStatus(HttpClient,String,String,Object,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/security/BasicAuthIntegrationTest#verifySecurityStatus(HttpClient,String,String,Object,int).mjava","sourceNew":"  public static void verifySecurityStatus(HttpClient cl, String url, String objPath,\n                                          Object expected, int count) throws Exception {\n    verifySecurityStatus(cl, url, objPath, expected, count, null, null);\n  }\n\n","sourceOld":"  public static void verifySecurityStatus(HttpClient cl, String url, String objPath, Object expected, int count) throws Exception {\n    boolean success = false;\n    String s = null;\n    List<String> hierarchy = StrUtils.splitSmart(objPath, '/');\n    for (int i = 0; i < count; i++) {\n      HttpGet get = new HttpGet(url);\n      HttpResponse rsp = cl.execute(get);\n      s = EntityUtils.toString(rsp.getEntity());\n      Map m = (Map) Utils.fromJSONString(s);\n      Utils.consumeFully(rsp.getEntity());\n      Object actual = Utils.getObjectByPath(m, true, hierarchy);\n      if (expected instanceof Predicate) {\n        Predicate predicate = (Predicate) expected;\n        if (predicate.test(actual)) {\n          success = true;\n          break;\n        }\n      } else if (Objects.equals(actual == null ? null : String.valueOf(actual), expected)) {\n        success = true;\n        break;\n      }\n      Thread.sleep(50);\n    }\n    assertTrue(\"No match for \" + objPath + \" = \" + expected + \", full response = \" + s, success);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb3e075eaa5788b2762ec235bf72b069cefe3f50","date":1548244981,"type":6,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/SolrCloudAuthTestCase#verifySecurityStatus(HttpClient,String,String,Object,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/security/BasicAuthIntegrationTest#verifySecurityStatus(HttpClient,String,String,Object,int).mjava","sourceNew":"  public static void verifySecurityStatus(HttpClient cl, String url, String objPath,\n                                            Object expected, int count) throws Exception {\n    verifySecurityStatus(cl, url, objPath, expected, count, (String)null);\n  }\n\n","sourceOld":"  public static void verifySecurityStatus(HttpClient cl, String url, String objPath,\n                                          Object expected, int count) throws Exception {\n    verifySecurityStatus(cl, url, objPath, expected, count, null, null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb3e075eaa5788b2762ec235bf72b069cefe3f50","date":1548244981,"type":5,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/SolrCloudAuthTestCase#verifySecurityStatus(HttpClient,String,String,Object,int,String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/security/BasicAuthIntegrationTest#verifySecurityStatus(HttpClient,String,String,Object,int).mjava","sourceNew":"  public static void verifySecurityStatus(HttpClient cl, String url, String objPath,\n                                          Object expected, int count, String user, String pwd)\n      throws Exception {\n    verifySecurityStatus(cl, url, objPath, expected, count, makeBasicAuthHeader(user, pwd));\n  }\n\n","sourceOld":"  public static void verifySecurityStatus(HttpClient cl, String url, String objPath,\n                                          Object expected, int count) throws Exception {\n    verifySecurityStatus(cl, url, objPath, expected, count, null, null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2682a1cd25864ccdc1b44bf047bd08700f28ba06","date":1548321910,"type":6,"author":"Tommaso Teofili","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/SolrCloudAuthTestCase#verifySecurityStatus(HttpClient,String,String,Object,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/security/BasicAuthIntegrationTest#verifySecurityStatus(HttpClient,String,String,Object,int).mjava","sourceNew":"  public static void verifySecurityStatus(HttpClient cl, String url, String objPath,\n                                            Object expected, int count) throws Exception {\n    verifySecurityStatus(cl, url, objPath, expected, count, (String)null);\n  }\n\n","sourceOld":"  public static void verifySecurityStatus(HttpClient cl, String url, String objPath,\n                                          Object expected, int count) throws Exception {\n    verifySecurityStatus(cl, url, objPath, expected, count, null, null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2682a1cd25864ccdc1b44bf047bd08700f28ba06","date":1548321910,"type":5,"author":"Tommaso Teofili","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/SolrCloudAuthTestCase#verifySecurityStatus(HttpClient,String,String,Object,int,String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/security/BasicAuthIntegrationTest#verifySecurityStatus(HttpClient,String,String,Object,int).mjava","sourceNew":"  public static void verifySecurityStatus(HttpClient cl, String url, String objPath,\n                                          Object expected, int count, String user, String pwd)\n      throws Exception {\n    verifySecurityStatus(cl, url, objPath, expected, count, makeBasicAuthHeader(user, pwd));\n  }\n\n","sourceOld":"  public static void verifySecurityStatus(HttpClient cl, String url, String objPath,\n                                          Object expected, int count) throws Exception {\n    verifySecurityStatus(cl, url, objPath, expected, count, null, null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"859081acf00749f5dd462772c571d611d4a4d2db":["77aad0f26236c97028aecb0fcc76de2b13edf1a0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["859081acf00749f5dd462772c571d611d4a4d2db","7b6b27adfd0ae23a874c905f6003b09606641f5f"],"7b6b27adfd0ae23a874c905f6003b09606641f5f":["859081acf00749f5dd462772c571d611d4a4d2db"],"77aad0f26236c97028aecb0fcc76de2b13edf1a0":["ccfb40e1834cac1619556a0becf198bb7bad5d63"],"ccfb40e1834cac1619556a0becf198bb7bad5d63":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["859081acf00749f5dd462772c571d611d4a4d2db","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bb3e075eaa5788b2762ec235bf72b069cefe3f50"],"bb3e075eaa5788b2762ec235bf72b069cefe3f50":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"2682a1cd25864ccdc1b44bf047bd08700f28ba06":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","bb3e075eaa5788b2762ec235bf72b069cefe3f50"]},"commit2Childs":{"859081acf00749f5dd462772c571d611d4a4d2db":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","7b6b27adfd0ae23a874c905f6003b09606641f5f","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ccfb40e1834cac1619556a0becf198bb7bad5d63"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","bb3e075eaa5788b2762ec235bf72b069cefe3f50","2682a1cd25864ccdc1b44bf047bd08700f28ba06"],"7b6b27adfd0ae23a874c905f6003b09606641f5f":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"77aad0f26236c97028aecb0fcc76de2b13edf1a0":["859081acf00749f5dd462772c571d611d4a4d2db"],"ccfb40e1834cac1619556a0becf198bb7bad5d63":["77aad0f26236c97028aecb0fcc76de2b13edf1a0"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"bb3e075eaa5788b2762ec235bf72b069cefe3f50":["cd5edd1f2b162a5cfa08efd17851a07373a96817","2682a1cd25864ccdc1b44bf047bd08700f28ba06"],"2682a1cd25864ccdc1b44bf047bd08700f28ba06":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817","2682a1cd25864ccdc1b44bf047bd08700f28ba06"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}