{"path":"lucene/sandbox/src/java/org/apache/lucene/util/GeoUtils#llaToECF(double,double,double,double[]).mjava","commits":[{"id":"e91b7d9f5000faefb0e81b98e76ad5b9463283e8","date":1433799348,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/util/GeoUtils#llaToECF(double,double,double,double[]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Converts from geodesic lon lat alt to geocentric earth-centered earth-fixed\n   * @param lon geodesic longitude\n   * @param lat geodesic latitude\n   * @param alt geodesic altitude\n   * @param ecf reusable earth-centered earth-fixed result\n   * @return either a new ecef array or the reusable ecf parameter\n   */\n  public static final double[] llaToECF(double lon, double lat, double alt, double[] ecf) {\n    lon = StrictMath.toRadians(lon);\n    lat = StrictMath.toRadians(lat);\n\n    final double sl = StrictMath.sin(lat);\n    final double s2 = sl*sl;\n    final double cl = StrictMath.cos(lat);\n    final double ge2 = (SEMIMAJOR_AXIS2 - SEMIMINOR_AXIS2)/(SEMIMAJOR_AXIS2);\n\n    if (ecf == null)\n      ecf = new double[3];\n\n    if (lat < -PI_OVER_2 && lat > -1.001D * PI_OVER_2) {\n      lat = -PI_OVER_2;\n    } else if (lat > PI_OVER_2 && lat < 1.001D * PI_OVER_2) {\n      lat = PI_OVER_2;\n    }\n    assert ((lat >= -PI_OVER_2) || (lat <= PI_OVER_2));\n\n    if (lon > StrictMath.PI) {\n      lon -= (2*StrictMath.PI);\n    }\n\n    final double rn = SEMIMAJOR_AXIS / StrictMath.sqrt(1.0D - ge2 * s2);\n    ecf[0] = (rn+alt) * cl * StrictMath.cos(lon);\n    ecf[1] = (rn+alt) * cl * StrictMath.sin(lon);\n    ecf[2] = ((rn*(1.0-ge2))+alt)*sl;\n\n    return ecf;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a4c5421d43870949fb33be27fc9cba0f8f3a7c8d","date":1437181221,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/util/GeoProjectionUtils#llaToECF(double,double,double,double[]).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/util/GeoUtils#llaToECF(double,double,double,double[]).mjava","sourceNew":"  /**\n   * Converts from geodesic lon lat alt to geocentric earth-centered earth-fixed\n   * @param lon geodesic longitude\n   * @param lat geodesic latitude\n   * @param alt geodesic altitude\n   * @param ecf reusable earth-centered earth-fixed result\n   * @return either a new ecef array or the reusable ecf parameter\n   */\n  public static final double[] llaToECF(double lon, double lat, double alt, double[] ecf) {\n    lon = StrictMath.toRadians(lon);\n    lat = StrictMath.toRadians(lat);\n\n    final double sl = StrictMath.sin(lat);\n    final double s2 = sl*sl;\n    final double cl = StrictMath.cos(lat);\n    final double ge2 = (SEMIMAJOR_AXIS2 - SEMIMINOR_AXIS2)/(SEMIMAJOR_AXIS2);\n\n    if (ecf == null) {\n      ecf = new double[3];\n    }\n\n    if (lat < -PI_OVER_2 && lat > -1.001D * PI_OVER_2) {\n      lat = -PI_OVER_2;\n    } else if (lat > PI_OVER_2 && lat < 1.001D * PI_OVER_2) {\n      lat = PI_OVER_2;\n    }\n    assert (lat >= -PI_OVER_2) || (lat <= PI_OVER_2);\n\n    if (lon > StrictMath.PI) {\n      lon -= (2*StrictMath.PI);\n    }\n\n    final double rn = SEMIMAJOR_AXIS / StrictMath.sqrt(1.0D - ge2 * s2);\n    ecf[0] = (rn+alt) * cl * StrictMath.cos(lon);\n    ecf[1] = (rn+alt) * cl * StrictMath.sin(lon);\n    ecf[2] = ((rn*(1.0-ge2))+alt)*sl;\n\n    return ecf;\n  }\n\n","sourceOld":"  /**\n   * Converts from geodesic lon lat alt to geocentric earth-centered earth-fixed\n   * @param lon geodesic longitude\n   * @param lat geodesic latitude\n   * @param alt geodesic altitude\n   * @param ecf reusable earth-centered earth-fixed result\n   * @return either a new ecef array or the reusable ecf parameter\n   */\n  public static final double[] llaToECF(double lon, double lat, double alt, double[] ecf) {\n    lon = StrictMath.toRadians(lon);\n    lat = StrictMath.toRadians(lat);\n\n    final double sl = StrictMath.sin(lat);\n    final double s2 = sl*sl;\n    final double cl = StrictMath.cos(lat);\n    final double ge2 = (SEMIMAJOR_AXIS2 - SEMIMINOR_AXIS2)/(SEMIMAJOR_AXIS2);\n\n    if (ecf == null)\n      ecf = new double[3];\n\n    if (lat < -PI_OVER_2 && lat > -1.001D * PI_OVER_2) {\n      lat = -PI_OVER_2;\n    } else if (lat > PI_OVER_2 && lat < 1.001D * PI_OVER_2) {\n      lat = PI_OVER_2;\n    }\n    assert ((lat >= -PI_OVER_2) || (lat <= PI_OVER_2));\n\n    if (lon > StrictMath.PI) {\n      lon -= (2*StrictMath.PI);\n    }\n\n    final double rn = SEMIMAJOR_AXIS / StrictMath.sqrt(1.0D - ge2 * s2);\n    ecf[0] = (rn+alt) * cl * StrictMath.cos(lon);\n    ecf[1] = (rn+alt) * cl * StrictMath.sin(lon);\n    ecf[2] = ((rn*(1.0-ge2))+alt)*sl;\n\n    return ecf;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a4c5421d43870949fb33be27fc9cba0f8f3a7c8d":["e91b7d9f5000faefb0e81b98e76ad5b9463283e8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e91b7d9f5000faefb0e81b98e76ad5b9463283e8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a4c5421d43870949fb33be27fc9cba0f8f3a7c8d"]},"commit2Childs":{"a4c5421d43870949fb33be27fc9cba0f8f3a7c8d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e91b7d9f5000faefb0e81b98e76ad5b9463283e8"],"e91b7d9f5000faefb0e81b98e76ad5b9463283e8":["a4c5421d43870949fb33be27fc9cba0f8f3a7c8d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}