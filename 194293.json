{"path":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter.TermsWriter#finish().mjava","commits":[{"id":"31c8c009cea52067b0cf34f2ea666147e80b1461","date":1406233016,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter.TermsWriter#finish().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter.TermsWriter#finish(BytesRef,BytesRef).mjava","sourceNew":"    // Finishes all terms in this field\n    public void finish() throws IOException {\n      if (numTerms > 0) {\n        // if (DEBUG) System.out.println(\"BTTW: finish prefixStarts=\" + Arrays.toString(prefixStarts));\n\n        // TODO: if pending.size() is already 1 with a non-zero prefix length\n        // we can save writing a \"degenerate\" root block, but we have to\n        // fix all the places that assume the root block's prefix is the empty string:\n        writeBlocks(0, pending.size());\n\n        // We better have one final \"root\" block:\n        assert pending.size() == 1 && !pending.get(0).isTerm: \"pending.size()=\" + pending.size() + \" pending=\" + pending;\n        final PendingBlock root = (PendingBlock) pending.get(0);\n        assert root.prefix.length == 0;\n        assert root.index.getEmptyOutput() != null;\n\n        // Write FST to index\n        indexStartFP = indexOut.getFilePointer();\n        root.index.save(indexOut);\n        //System.out.println(\"  write FST \" + indexStartFP + \" field=\" + fieldInfo.name);\n\n        /*\n        if (DEBUG) {\n          final String dotFileName = segment + \"_\" + fieldInfo.name + \".dot\";\n          Writer w = new OutputStreamWriter(new FileOutputStream(dotFileName));\n          Util.toDot(root.index, w, false, false);\n          System.out.println(\"SAVED to \" + dotFileName);\n          w.close();\n        }\n        */\n        assert firstPendingTerm != null;\n        BytesRef minTerm = new BytesRef(firstPendingTerm.termBytes);\n\n        assert lastPendingTerm != null;\n        BytesRef maxTerm = new BytesRef(lastPendingTerm.termBytes);\n\n        fields.add(new FieldMetaData(fieldInfo,\n                                     ((PendingBlock) pending.get(0)).index.getEmptyOutput(),\n                                     numTerms,\n                                     indexStartFP,\n                                     sumTotalTermFreq,\n                                     sumDocFreq,\n                                     docsSeen.cardinality(),\n                                     longsSize,\n                                     minTerm, maxTerm));\n      } else {\n        assert sumTotalTermFreq == 0 || fieldInfo.getIndexOptions() == IndexOptions.DOCS_ONLY && sumTotalTermFreq == -1;\n        assert sumDocFreq == 0;\n        assert docsSeen.cardinality() == 0;\n      }\n    }\n\n","sourceOld":"    // Finishes all terms in this field\n    public void finish(BytesRef minTerm, BytesRef maxTerm) throws IOException {\n      if (numTerms > 0) {\n        // if (DEBUG) System.out.println(\"BTTW: finish prefixStarts=\" + Arrays.toString(prefixStarts));\n\n        // TODO: if pending.size() is already 1 with a non-zero prefix length\n        // we can save writing a \"degenerate\" root block, but we have to\n        // fix all the places that assume the root block's prefix is the empty string:\n        writeBlocks(0, pending.size());\n\n        // We better have one final \"root\" block:\n        assert pending.size() == 1 && !pending.get(0).isTerm: \"pending.size()=\" + pending.size() + \" pending=\" + pending;\n        final PendingBlock root = (PendingBlock) pending.get(0);\n        assert root.prefix.length == 0;\n        assert root.index.getEmptyOutput() != null;\n\n        // Write FST to index\n        indexStartFP = indexOut.getFilePointer();\n        root.index.save(indexOut);\n        //System.out.println(\"  write FST \" + indexStartFP + \" field=\" + fieldInfo.name);\n\n        /*\n        if (DEBUG) {\n          final String dotFileName = segment + \"_\" + fieldInfo.name + \".dot\";\n          Writer w = new OutputStreamWriter(new FileOutputStream(dotFileName));\n          Util.toDot(root.index, w, false, false);\n          System.out.println(\"SAVED to \" + dotFileName);\n          w.close();\n        }\n        */\n\n        fields.add(new FieldMetaData(fieldInfo,\n                                     ((PendingBlock) pending.get(0)).index.getEmptyOutput(),\n                                     numTerms,\n                                     indexStartFP,\n                                     sumTotalTermFreq,\n                                     sumDocFreq,\n                                     docsSeen.cardinality(),\n                                     longsSize,\n                                     minTerm, maxTerm));\n      } else {\n        assert sumTotalTermFreq == 0 || fieldInfo.getIndexOptions() == IndexOptions.DOCS_ONLY && sumTotalTermFreq == -1;\n        assert sumDocFreq == 0;\n        assert docsSeen.cardinality() == 0;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"acca9f933f2900f374b672072ea9c159c5d72e83","date":1407403886,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter.TermsWriter#finish().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter.TermsWriter#finish().mjava","sourceNew":"    // Finishes all terms in this field\n    public void finish() throws IOException {\n      if (numTerms > 0) {\n        // if (DEBUG) System.out.println(\"BTTW: finish prefixStarts=\" + Arrays.toString(prefixStarts));\n\n        // Add empty term to force closing of all final blocks:\n        pushTerm(new BytesRef());\n\n        // TODO: if pending.size() is already 1 with a non-zero prefix length\n        // we can save writing a \"degenerate\" root block, but we have to\n        // fix all the places that assume the root block's prefix is the empty string:\n        writeBlocks(0, pending.size());\n\n        // We better have one final \"root\" block:\n        assert pending.size() == 1 && !pending.get(0).isTerm: \"pending.size()=\" + pending.size() + \" pending=\" + pending;\n        final PendingBlock root = (PendingBlock) pending.get(0);\n        assert root.prefix.length == 0;\n        assert root.index.getEmptyOutput() != null;\n\n        // Write FST to index\n        indexStartFP = indexOut.getFilePointer();\n        root.index.save(indexOut);\n        //System.out.println(\"  write FST \" + indexStartFP + \" field=\" + fieldInfo.name);\n\n        /*\n        if (DEBUG) {\n          final String dotFileName = segment + \"_\" + fieldInfo.name + \".dot\";\n          Writer w = new OutputStreamWriter(new FileOutputStream(dotFileName));\n          Util.toDot(root.index, w, false, false);\n          System.out.println(\"SAVED to \" + dotFileName);\n          w.close();\n        }\n        */\n        assert firstPendingTerm != null;\n        BytesRef minTerm = new BytesRef(firstPendingTerm.termBytes);\n\n        assert lastPendingTerm != null;\n        BytesRef maxTerm = new BytesRef(lastPendingTerm.termBytes);\n\n        fields.add(new FieldMetaData(fieldInfo,\n                                     ((PendingBlock) pending.get(0)).index.getEmptyOutput(),\n                                     numTerms,\n                                     indexStartFP,\n                                     sumTotalTermFreq,\n                                     sumDocFreq,\n                                     docsSeen.cardinality(),\n                                     longsSize,\n                                     minTerm, maxTerm));\n      } else {\n        assert sumTotalTermFreq == 0 || fieldInfo.getIndexOptions() == IndexOptions.DOCS_ONLY && sumTotalTermFreq == -1;\n        assert sumDocFreq == 0;\n        assert docsSeen.cardinality() == 0;\n      }\n    }\n\n","sourceOld":"    // Finishes all terms in this field\n    public void finish() throws IOException {\n      if (numTerms > 0) {\n        // if (DEBUG) System.out.println(\"BTTW: finish prefixStarts=\" + Arrays.toString(prefixStarts));\n\n        // TODO: if pending.size() is already 1 with a non-zero prefix length\n        // we can save writing a \"degenerate\" root block, but we have to\n        // fix all the places that assume the root block's prefix is the empty string:\n        writeBlocks(0, pending.size());\n\n        // We better have one final \"root\" block:\n        assert pending.size() == 1 && !pending.get(0).isTerm: \"pending.size()=\" + pending.size() + \" pending=\" + pending;\n        final PendingBlock root = (PendingBlock) pending.get(0);\n        assert root.prefix.length == 0;\n        assert root.index.getEmptyOutput() != null;\n\n        // Write FST to index\n        indexStartFP = indexOut.getFilePointer();\n        root.index.save(indexOut);\n        //System.out.println(\"  write FST \" + indexStartFP + \" field=\" + fieldInfo.name);\n\n        /*\n        if (DEBUG) {\n          final String dotFileName = segment + \"_\" + fieldInfo.name + \".dot\";\n          Writer w = new OutputStreamWriter(new FileOutputStream(dotFileName));\n          Util.toDot(root.index, w, false, false);\n          System.out.println(\"SAVED to \" + dotFileName);\n          w.close();\n        }\n        */\n        assert firstPendingTerm != null;\n        BytesRef minTerm = new BytesRef(firstPendingTerm.termBytes);\n\n        assert lastPendingTerm != null;\n        BytesRef maxTerm = new BytesRef(lastPendingTerm.termBytes);\n\n        fields.add(new FieldMetaData(fieldInfo,\n                                     ((PendingBlock) pending.get(0)).index.getEmptyOutput(),\n                                     numTerms,\n                                     indexStartFP,\n                                     sumTotalTermFreq,\n                                     sumDocFreq,\n                                     docsSeen.cardinality(),\n                                     longsSize,\n                                     minTerm, maxTerm));\n      } else {\n        assert sumTotalTermFreq == 0 || fieldInfo.getIndexOptions() == IndexOptions.DOCS_ONLY && sumTotalTermFreq == -1;\n        assert sumDocFreq == 0;\n        assert docsSeen.cardinality() == 0;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2bb2842e561df4e8e9ad89010605fc86ac265465","date":1414768208,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter.TermsWriter#finish().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter.TermsWriter#finish().mjava","sourceNew":"    // Finishes all terms in this field\n    public void finish() throws IOException {\n      if (numTerms > 0) {\n        // if (DEBUG) System.out.println(\"BTTW: finish prefixStarts=\" + Arrays.toString(prefixStarts));\n\n        // Add empty term to force closing of all final blocks:\n        pushTerm(new BytesRef());\n\n        // TODO: if pending.size() is already 1 with a non-zero prefix length\n        // we can save writing a \"degenerate\" root block, but we have to\n        // fix all the places that assume the root block's prefix is the empty string:\n        writeBlocks(0, pending.size());\n\n        // We better have one final \"root\" block:\n        assert pending.size() == 1 && !pending.get(0).isTerm: \"pending.size()=\" + pending.size() + \" pending=\" + pending;\n        final PendingBlock root = (PendingBlock) pending.get(0);\n        assert root.prefix.length == 0;\n        assert root.index.getEmptyOutput() != null;\n\n        // Write FST to index\n        indexStartFP = indexOut.getFilePointer();\n        root.index.save(indexOut);\n        //System.out.println(\"  write FST \" + indexStartFP + \" field=\" + fieldInfo.name);\n\n        /*\n        if (DEBUG) {\n          final String dotFileName = segment + \"_\" + fieldInfo.name + \".dot\";\n          Writer w = new OutputStreamWriter(new FileOutputStream(dotFileName));\n          Util.toDot(root.index, w, false, false);\n          System.out.println(\"SAVED to \" + dotFileName);\n          w.close();\n        }\n        */\n        assert firstPendingTerm != null;\n        BytesRef minTerm = new BytesRef(firstPendingTerm.termBytes);\n\n        assert lastPendingTerm != null;\n        BytesRef maxTerm = new BytesRef(lastPendingTerm.termBytes);\n\n        fields.add(new FieldMetaData(fieldInfo,\n                                     ((PendingBlock) pending.get(0)).index.getEmptyOutput(),\n                                     numTerms,\n                                     indexStartFP,\n                                     sumTotalTermFreq,\n                                     sumDocFreq,\n                                     docsSeen.cardinality(),\n                                     longsSize,\n                                     minTerm, maxTerm));\n      } else {\n        assert sumTotalTermFreq == 0 || fieldInfo.getIndexOptions() == IndexOptions.DOCS && sumTotalTermFreq == -1;\n        assert sumDocFreq == 0;\n        assert docsSeen.cardinality() == 0;\n      }\n    }\n\n","sourceOld":"    // Finishes all terms in this field\n    public void finish() throws IOException {\n      if (numTerms > 0) {\n        // if (DEBUG) System.out.println(\"BTTW: finish prefixStarts=\" + Arrays.toString(prefixStarts));\n\n        // Add empty term to force closing of all final blocks:\n        pushTerm(new BytesRef());\n\n        // TODO: if pending.size() is already 1 with a non-zero prefix length\n        // we can save writing a \"degenerate\" root block, but we have to\n        // fix all the places that assume the root block's prefix is the empty string:\n        writeBlocks(0, pending.size());\n\n        // We better have one final \"root\" block:\n        assert pending.size() == 1 && !pending.get(0).isTerm: \"pending.size()=\" + pending.size() + \" pending=\" + pending;\n        final PendingBlock root = (PendingBlock) pending.get(0);\n        assert root.prefix.length == 0;\n        assert root.index.getEmptyOutput() != null;\n\n        // Write FST to index\n        indexStartFP = indexOut.getFilePointer();\n        root.index.save(indexOut);\n        //System.out.println(\"  write FST \" + indexStartFP + \" field=\" + fieldInfo.name);\n\n        /*\n        if (DEBUG) {\n          final String dotFileName = segment + \"_\" + fieldInfo.name + \".dot\";\n          Writer w = new OutputStreamWriter(new FileOutputStream(dotFileName));\n          Util.toDot(root.index, w, false, false);\n          System.out.println(\"SAVED to \" + dotFileName);\n          w.close();\n        }\n        */\n        assert firstPendingTerm != null;\n        BytesRef minTerm = new BytesRef(firstPendingTerm.termBytes);\n\n        assert lastPendingTerm != null;\n        BytesRef maxTerm = new BytesRef(lastPendingTerm.termBytes);\n\n        fields.add(new FieldMetaData(fieldInfo,\n                                     ((PendingBlock) pending.get(0)).index.getEmptyOutput(),\n                                     numTerms,\n                                     indexStartFP,\n                                     sumTotalTermFreq,\n                                     sumDocFreq,\n                                     docsSeen.cardinality(),\n                                     longsSize,\n                                     minTerm, maxTerm));\n      } else {\n        assert sumTotalTermFreq == 0 || fieldInfo.getIndexOptions() == IndexOptions.DOCS_ONLY && sumTotalTermFreq == -1;\n        assert sumDocFreq == 0;\n        assert docsSeen.cardinality() == 0;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e8715d826e588419327562287d5d6a8040d63d6","date":1427987148,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter.TermsWriter#finish().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter.TermsWriter#finish().mjava","sourceNew":"    // Finishes all terms in this field\n    public void finish() throws IOException {\n      if (numTerms > 0) {\n        // if (DEBUG) System.out.println(\"BTTW: finish prefixStarts=\" + Arrays.toString(prefixStarts));\n\n        // Add empty term to force closing of all final blocks:\n        pushTerm(new BytesRef());\n\n        // TODO: if pending.size() is already 1 with a non-zero prefix length\n        // we can save writing a \"degenerate\" root block, but we have to\n        // fix all the places that assume the root block's prefix is the empty string:\n        pushTerm(new BytesRef());\n        writeBlocks(0, pending.size());\n\n        // We better have one final \"root\" block:\n        assert pending.size() == 1 && !pending.get(0).isTerm: \"pending.size()=\" + pending.size() + \" pending=\" + pending;\n        final PendingBlock root = (PendingBlock) pending.get(0);\n        assert root.prefix.length == 0;\n        assert root.index.getEmptyOutput() != null;\n\n        // Write FST to index\n        indexStartFP = indexOut.getFilePointer();\n        root.index.save(indexOut);\n        //System.out.println(\"  write FST \" + indexStartFP + \" field=\" + fieldInfo.name);\n\n        /*\n        if (DEBUG) {\n          final String dotFileName = segment + \"_\" + fieldInfo.name + \".dot\";\n          Writer w = new OutputStreamWriter(new FileOutputStream(dotFileName));\n          Util.toDot(root.index, w, false, false);\n          System.out.println(\"SAVED to \" + dotFileName);\n          w.close();\n        }\n        */\n        assert firstPendingTerm != null;\n        BytesRef minTerm = new BytesRef(firstPendingTerm.termBytes);\n\n        assert lastPendingTerm != null;\n        BytesRef maxTerm = new BytesRef(lastPendingTerm.termBytes);\n\n        fields.add(new FieldMetaData(fieldInfo,\n                                     ((PendingBlock) pending.get(0)).index.getEmptyOutput(),\n                                     numTerms,\n                                     indexStartFP,\n                                     sumTotalTermFreq,\n                                     sumDocFreq,\n                                     docsSeen.cardinality(),\n                                     longsSize,\n                                     minTerm, maxTerm));\n      } else {\n        assert sumTotalTermFreq == 0 || fieldInfo.getIndexOptions() == IndexOptions.DOCS && sumTotalTermFreq == -1;\n        assert sumDocFreq == 0;\n        assert docsSeen.cardinality() == 0;\n      }\n    }\n\n","sourceOld":"    // Finishes all terms in this field\n    public void finish() throws IOException {\n      if (numTerms > 0) {\n        // if (DEBUG) System.out.println(\"BTTW: finish prefixStarts=\" + Arrays.toString(prefixStarts));\n\n        // Add empty term to force closing of all final blocks:\n        pushTerm(new BytesRef());\n\n        // TODO: if pending.size() is already 1 with a non-zero prefix length\n        // we can save writing a \"degenerate\" root block, but we have to\n        // fix all the places that assume the root block's prefix is the empty string:\n        writeBlocks(0, pending.size());\n\n        // We better have one final \"root\" block:\n        assert pending.size() == 1 && !pending.get(0).isTerm: \"pending.size()=\" + pending.size() + \" pending=\" + pending;\n        final PendingBlock root = (PendingBlock) pending.get(0);\n        assert root.prefix.length == 0;\n        assert root.index.getEmptyOutput() != null;\n\n        // Write FST to index\n        indexStartFP = indexOut.getFilePointer();\n        root.index.save(indexOut);\n        //System.out.println(\"  write FST \" + indexStartFP + \" field=\" + fieldInfo.name);\n\n        /*\n        if (DEBUG) {\n          final String dotFileName = segment + \"_\" + fieldInfo.name + \".dot\";\n          Writer w = new OutputStreamWriter(new FileOutputStream(dotFileName));\n          Util.toDot(root.index, w, false, false);\n          System.out.println(\"SAVED to \" + dotFileName);\n          w.close();\n        }\n        */\n        assert firstPendingTerm != null;\n        BytesRef minTerm = new BytesRef(firstPendingTerm.termBytes);\n\n        assert lastPendingTerm != null;\n        BytesRef maxTerm = new BytesRef(lastPendingTerm.termBytes);\n\n        fields.add(new FieldMetaData(fieldInfo,\n                                     ((PendingBlock) pending.get(0)).index.getEmptyOutput(),\n                                     numTerms,\n                                     indexStartFP,\n                                     sumTotalTermFreq,\n                                     sumDocFreq,\n                                     docsSeen.cardinality(),\n                                     longsSize,\n                                     minTerm, maxTerm));\n      } else {\n        assert sumTotalTermFreq == 0 || fieldInfo.getIndexOptions() == IndexOptions.DOCS && sumTotalTermFreq == -1;\n        assert sumDocFreq == 0;\n        assert docsSeen.cardinality() == 0;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2638f781be724518ff6c2263d14a48cf6e68017","date":1427989059,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter.TermsWriter#finish().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter.TermsWriter#finish().mjava","sourceNew":"    // Finishes all terms in this field\n    public void finish() throws IOException {\n      if (numTerms > 0) {\n        // if (DEBUG) System.out.println(\"BTTW: finish prefixStarts=\" + Arrays.toString(prefixStarts));\n\n        // Add empty term to force closing of all final blocks:\n        pushTerm(new BytesRef());\n\n        // TODO: if pending.size() is already 1 with a non-zero prefix length\n        // we can save writing a \"degenerate\" root block, but we have to\n        // fix all the places that assume the root block's prefix is the empty string:\n        pushTerm(new BytesRef());\n        writeBlocks(0, pending.size());\n\n        // We better have one final \"root\" block:\n        assert pending.size() == 1 && !pending.get(0).isTerm: \"pending.size()=\" + pending.size() + \" pending=\" + pending;\n        final PendingBlock root = (PendingBlock) pending.get(0);\n        assert root.prefix.length == 0;\n        assert root.index.getEmptyOutput() != null;\n\n        // Write FST to index\n        indexStartFP = indexOut.getFilePointer();\n        root.index.save(indexOut);\n        //System.out.println(\"  write FST \" + indexStartFP + \" field=\" + fieldInfo.name);\n\n        /*\n        if (DEBUG) {\n          final String dotFileName = segment + \"_\" + fieldInfo.name + \".dot\";\n          Writer w = new OutputStreamWriter(new FileOutputStream(dotFileName));\n          Util.toDot(root.index, w, false, false);\n          System.out.println(\"SAVED to \" + dotFileName);\n          w.close();\n        }\n        */\n        assert firstPendingTerm != null;\n        BytesRef minTerm = new BytesRef(firstPendingTerm.termBytes);\n\n        assert lastPendingTerm != null;\n        BytesRef maxTerm = new BytesRef(lastPendingTerm.termBytes);\n\n        fields.add(new FieldMetaData(fieldInfo,\n                                     ((PendingBlock) pending.get(0)).index.getEmptyOutput(),\n                                     numTerms,\n                                     indexStartFP,\n                                     sumTotalTermFreq,\n                                     sumDocFreq,\n                                     docsSeen.cardinality(),\n                                     longsSize,\n                                     minTerm, maxTerm));\n      } else {\n        assert sumTotalTermFreq == 0 || fieldInfo.getIndexOptions() == IndexOptions.DOCS && sumTotalTermFreq == -1;\n        assert sumDocFreq == 0;\n        assert docsSeen.cardinality() == 0;\n      }\n    }\n\n","sourceOld":"    // Finishes all terms in this field\n    public void finish() throws IOException {\n      if (numTerms > 0) {\n        // if (DEBUG) System.out.println(\"BTTW: finish prefixStarts=\" + Arrays.toString(prefixStarts));\n\n        // Add empty term to force closing of all final blocks:\n        pushTerm(new BytesRef());\n\n        // TODO: if pending.size() is already 1 with a non-zero prefix length\n        // we can save writing a \"degenerate\" root block, but we have to\n        // fix all the places that assume the root block's prefix is the empty string:\n        writeBlocks(0, pending.size());\n\n        // We better have one final \"root\" block:\n        assert pending.size() == 1 && !pending.get(0).isTerm: \"pending.size()=\" + pending.size() + \" pending=\" + pending;\n        final PendingBlock root = (PendingBlock) pending.get(0);\n        assert root.prefix.length == 0;\n        assert root.index.getEmptyOutput() != null;\n\n        // Write FST to index\n        indexStartFP = indexOut.getFilePointer();\n        root.index.save(indexOut);\n        //System.out.println(\"  write FST \" + indexStartFP + \" field=\" + fieldInfo.name);\n\n        /*\n        if (DEBUG) {\n          final String dotFileName = segment + \"_\" + fieldInfo.name + \".dot\";\n          Writer w = new OutputStreamWriter(new FileOutputStream(dotFileName));\n          Util.toDot(root.index, w, false, false);\n          System.out.println(\"SAVED to \" + dotFileName);\n          w.close();\n        }\n        */\n        assert firstPendingTerm != null;\n        BytesRef minTerm = new BytesRef(firstPendingTerm.termBytes);\n\n        assert lastPendingTerm != null;\n        BytesRef maxTerm = new BytesRef(lastPendingTerm.termBytes);\n\n        fields.add(new FieldMetaData(fieldInfo,\n                                     ((PendingBlock) pending.get(0)).index.getEmptyOutput(),\n                                     numTerms,\n                                     indexStartFP,\n                                     sumTotalTermFreq,\n                                     sumDocFreq,\n                                     docsSeen.cardinality(),\n                                     longsSize,\n                                     minTerm, maxTerm));\n      } else {\n        assert sumTotalTermFreq == 0 || fieldInfo.getIndexOptions() == IndexOptions.DOCS && sumTotalTermFreq == -1;\n        assert sumDocFreq == 0;\n        assert docsSeen.cardinality() == 0;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb77022ef17ff655c519a3f6ecd393747ac88bcf","date":1578579386,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter.TermsWriter#finish().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter.TermsWriter#finish().mjava","sourceNew":"    // Finishes all terms in this field\n    public void finish() throws IOException {\n      if (numTerms > 0) {\n        // if (DEBUG) System.out.println(\"BTTW: finish prefixStarts=\" + Arrays.toString(prefixStarts));\n\n        // Add empty term to force closing of all final blocks:\n        pushTerm(new BytesRef());\n\n        // TODO: if pending.size() is already 1 with a non-zero prefix length\n        // we can save writing a \"degenerate\" root block, but we have to\n        // fix all the places that assume the root block's prefix is the empty string:\n        pushTerm(new BytesRef());\n        writeBlocks(0, pending.size());\n\n        // We better have one final \"root\" block:\n        assert pending.size() == 1 && !pending.get(0).isTerm: \"pending.size()=\" + pending.size() + \" pending=\" + pending;\n        final PendingBlock root = (PendingBlock) pending.get(0);\n        assert root.prefix.length == 0;\n        assert root.index.getEmptyOutput() != null;\n\n        // Write FST to index\n        indexStartFP = indexOut.getFilePointer();\n        root.index.save(indexOut);\n        //System.out.println(\"  write FST \" + indexStartFP + \" field=\" + fieldInfo.name);\n\n        /*\n        if (DEBUG) {\n          final String dotFileName = segment + \"_\" + fieldInfo.name + \".dot\";\n          Writer w = new OutputStreamWriter(new FileOutputStream(dotFileName));\n          Util.toDot(root.index, w, false, false);\n          System.out.println(\"SAVED to \" + dotFileName);\n          w.close();\n        }\n        */\n        assert firstPendingTerm != null;\n        BytesRef minTerm = new BytesRef(firstPendingTerm.termBytes);\n\n        assert lastPendingTerm != null;\n        BytesRef maxTerm = new BytesRef(lastPendingTerm.termBytes);\n\n        fields.add(new FieldMetaData(fieldInfo,\n                                     ((PendingBlock) pending.get(0)).index.getEmptyOutput(),\n                                     numTerms,\n                                     indexStartFP,\n                                     sumTotalTermFreq,\n                                     sumDocFreq,\n                                     docsSeen.cardinality(),\n                                     minTerm, maxTerm));\n      } else {\n        assert sumTotalTermFreq == 0 || fieldInfo.getIndexOptions() == IndexOptions.DOCS && sumTotalTermFreq == -1;\n        assert sumDocFreq == 0;\n        assert docsSeen.cardinality() == 0;\n      }\n    }\n\n","sourceOld":"    // Finishes all terms in this field\n    public void finish() throws IOException {\n      if (numTerms > 0) {\n        // if (DEBUG) System.out.println(\"BTTW: finish prefixStarts=\" + Arrays.toString(prefixStarts));\n\n        // Add empty term to force closing of all final blocks:\n        pushTerm(new BytesRef());\n\n        // TODO: if pending.size() is already 1 with a non-zero prefix length\n        // we can save writing a \"degenerate\" root block, but we have to\n        // fix all the places that assume the root block's prefix is the empty string:\n        pushTerm(new BytesRef());\n        writeBlocks(0, pending.size());\n\n        // We better have one final \"root\" block:\n        assert pending.size() == 1 && !pending.get(0).isTerm: \"pending.size()=\" + pending.size() + \" pending=\" + pending;\n        final PendingBlock root = (PendingBlock) pending.get(0);\n        assert root.prefix.length == 0;\n        assert root.index.getEmptyOutput() != null;\n\n        // Write FST to index\n        indexStartFP = indexOut.getFilePointer();\n        root.index.save(indexOut);\n        //System.out.println(\"  write FST \" + indexStartFP + \" field=\" + fieldInfo.name);\n\n        /*\n        if (DEBUG) {\n          final String dotFileName = segment + \"_\" + fieldInfo.name + \".dot\";\n          Writer w = new OutputStreamWriter(new FileOutputStream(dotFileName));\n          Util.toDot(root.index, w, false, false);\n          System.out.println(\"SAVED to \" + dotFileName);\n          w.close();\n        }\n        */\n        assert firstPendingTerm != null;\n        BytesRef minTerm = new BytesRef(firstPendingTerm.termBytes);\n\n        assert lastPendingTerm != null;\n        BytesRef maxTerm = new BytesRef(lastPendingTerm.termBytes);\n\n        fields.add(new FieldMetaData(fieldInfo,\n                                     ((PendingBlock) pending.get(0)).index.getEmptyOutput(),\n                                     numTerms,\n                                     indexStartFP,\n                                     sumTotalTermFreq,\n                                     sumDocFreq,\n                                     docsSeen.cardinality(),\n                                     longsSize,\n                                     minTerm, maxTerm));\n      } else {\n        assert sumTotalTermFreq == 0 || fieldInfo.getIndexOptions() == IndexOptions.DOCS && sumTotalTermFreq == -1;\n        assert sumDocFreq == 0;\n        assert docsSeen.cardinality() == 0;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06ab276a5660cb79daae8c5ede063531c700a03a","date":1578587874,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter.TermsWriter#finish().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter.TermsWriter#finish().mjava","sourceNew":"    // Finishes all terms in this field\n    public void finish() throws IOException {\n      if (numTerms > 0) {\n        // if (DEBUG) System.out.println(\"BTTW: finish prefixStarts=\" + Arrays.toString(prefixStarts));\n\n        // Add empty term to force closing of all final blocks:\n        pushTerm(new BytesRef());\n\n        // TODO: if pending.size() is already 1 with a non-zero prefix length\n        // we can save writing a \"degenerate\" root block, but we have to\n        // fix all the places that assume the root block's prefix is the empty string:\n        pushTerm(new BytesRef());\n        writeBlocks(0, pending.size());\n\n        // We better have one final \"root\" block:\n        assert pending.size() == 1 && !pending.get(0).isTerm: \"pending.size()=\" + pending.size() + \" pending=\" + pending;\n        final PendingBlock root = (PendingBlock) pending.get(0);\n        assert root.prefix.length == 0;\n        assert root.index.getEmptyOutput() != null;\n\n        // Write FST to index\n        indexStartFP = indexOut.getFilePointer();\n        root.index.save(indexOut);\n        //System.out.println(\"  write FST \" + indexStartFP + \" field=\" + fieldInfo.name);\n\n        /*\n        if (DEBUG) {\n          final String dotFileName = segment + \"_\" + fieldInfo.name + \".dot\";\n          Writer w = new OutputStreamWriter(new FileOutputStream(dotFileName));\n          Util.toDot(root.index, w, false, false);\n          System.out.println(\"SAVED to \" + dotFileName);\n          w.close();\n        }\n        */\n        assert firstPendingTerm != null;\n        BytesRef minTerm = new BytesRef(firstPendingTerm.termBytes);\n\n        assert lastPendingTerm != null;\n        BytesRef maxTerm = new BytesRef(lastPendingTerm.termBytes);\n\n        fields.add(new FieldMetaData(fieldInfo,\n                                     ((PendingBlock) pending.get(0)).index.getEmptyOutput(),\n                                     numTerms,\n                                     indexStartFP,\n                                     sumTotalTermFreq,\n                                     sumDocFreq,\n                                     docsSeen.cardinality(),\n                                     longsSize,\n                                     minTerm, maxTerm));\n      } else {\n        assert sumTotalTermFreq == 0 || fieldInfo.getIndexOptions() == IndexOptions.DOCS && sumTotalTermFreq == -1;\n        assert sumDocFreq == 0;\n        assert docsSeen.cardinality() == 0;\n      }\n    }\n\n","sourceOld":"    // Finishes all terms in this field\n    public void finish() throws IOException {\n      if (numTerms > 0) {\n        // if (DEBUG) System.out.println(\"BTTW: finish prefixStarts=\" + Arrays.toString(prefixStarts));\n\n        // Add empty term to force closing of all final blocks:\n        pushTerm(new BytesRef());\n\n        // TODO: if pending.size() is already 1 with a non-zero prefix length\n        // we can save writing a \"degenerate\" root block, but we have to\n        // fix all the places that assume the root block's prefix is the empty string:\n        pushTerm(new BytesRef());\n        writeBlocks(0, pending.size());\n\n        // We better have one final \"root\" block:\n        assert pending.size() == 1 && !pending.get(0).isTerm: \"pending.size()=\" + pending.size() + \" pending=\" + pending;\n        final PendingBlock root = (PendingBlock) pending.get(0);\n        assert root.prefix.length == 0;\n        assert root.index.getEmptyOutput() != null;\n\n        // Write FST to index\n        indexStartFP = indexOut.getFilePointer();\n        root.index.save(indexOut);\n        //System.out.println(\"  write FST \" + indexStartFP + \" field=\" + fieldInfo.name);\n\n        /*\n        if (DEBUG) {\n          final String dotFileName = segment + \"_\" + fieldInfo.name + \".dot\";\n          Writer w = new OutputStreamWriter(new FileOutputStream(dotFileName));\n          Util.toDot(root.index, w, false, false);\n          System.out.println(\"SAVED to \" + dotFileName);\n          w.close();\n        }\n        */\n        assert firstPendingTerm != null;\n        BytesRef minTerm = new BytesRef(firstPendingTerm.termBytes);\n\n        assert lastPendingTerm != null;\n        BytesRef maxTerm = new BytesRef(lastPendingTerm.termBytes);\n\n        fields.add(new FieldMetaData(fieldInfo,\n                                     ((PendingBlock) pending.get(0)).index.getEmptyOutput(),\n                                     numTerms,\n                                     indexStartFP,\n                                     sumTotalTermFreq,\n                                     sumDocFreq,\n                                     docsSeen.cardinality(),\n                                     minTerm, maxTerm));\n      } else {\n        assert sumTotalTermFreq == 0 || fieldInfo.getIndexOptions() == IndexOptions.DOCS && sumTotalTermFreq == -1;\n        assert sumDocFreq == 0;\n        assert docsSeen.cardinality() == 0;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"08a5168e06e037794c0aba7f94f76ff3c09704d2","date":1579264785,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter.TermsWriter#finish().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter.TermsWriter#finish().mjava","sourceNew":"    // Finishes all terms in this field\n    public void finish() throws IOException {\n      if (numTerms > 0) {\n        // if (DEBUG) System.out.println(\"BTTW: finish prefixStarts=\" + Arrays.toString(prefixStarts));\n\n        // Add empty term to force closing of all final blocks:\n        pushTerm(new BytesRef());\n\n        // TODO: if pending.size() is already 1 with a non-zero prefix length\n        // we can save writing a \"degenerate\" root block, but we have to\n        // fix all the places that assume the root block's prefix is the empty string:\n        pushTerm(new BytesRef());\n        writeBlocks(0, pending.size());\n\n        // We better have one final \"root\" block:\n        assert pending.size() == 1 && !pending.get(0).isTerm: \"pending.size()=\" + pending.size() + \" pending=\" + pending;\n        final PendingBlock root = (PendingBlock) pending.get(0);\n        assert root.prefix.length == 0;\n        assert root.index.getEmptyOutput() != null;\n\n        // Write FST to index\n        indexStartFP = indexOut.getFilePointer();\n        root.index.save(indexOut);\n        //System.out.println(\"  write FST \" + indexStartFP + \" field=\" + fieldInfo.name);\n\n        /*\n        if (DEBUG) {\n          final String dotFileName = segment + \"_\" + fieldInfo.name + \".dot\";\n          Writer w = new OutputStreamWriter(new FileOutputStream(dotFileName));\n          Util.toDot(root.index, w, false, false);\n          System.out.println(\"SAVED to \" + dotFileName);\n          w.close();\n        }\n        */\n        assert firstPendingTerm != null;\n        BytesRef minTerm = new BytesRef(firstPendingTerm.termBytes);\n\n        assert lastPendingTerm != null;\n        BytesRef maxTerm = new BytesRef(lastPendingTerm.termBytes);\n\n        fields.add(new FieldMetaData(fieldInfo,\n                                     ((PendingBlock) pending.get(0)).index.getEmptyOutput(),\n                                     numTerms,\n                                     indexStartFP,\n                                     sumTotalTermFreq,\n                                     sumDocFreq,\n                                     docsSeen.cardinality(),\n                                     minTerm, maxTerm));\n      } else {\n        assert sumTotalTermFreq == 0 || fieldInfo.getIndexOptions() == IndexOptions.DOCS && sumTotalTermFreq == -1;\n        assert sumDocFreq == 0;\n        assert docsSeen.cardinality() == 0;\n      }\n    }\n\n","sourceOld":"    // Finishes all terms in this field\n    public void finish() throws IOException {\n      if (numTerms > 0) {\n        // if (DEBUG) System.out.println(\"BTTW: finish prefixStarts=\" + Arrays.toString(prefixStarts));\n\n        // Add empty term to force closing of all final blocks:\n        pushTerm(new BytesRef());\n\n        // TODO: if pending.size() is already 1 with a non-zero prefix length\n        // we can save writing a \"degenerate\" root block, but we have to\n        // fix all the places that assume the root block's prefix is the empty string:\n        pushTerm(new BytesRef());\n        writeBlocks(0, pending.size());\n\n        // We better have one final \"root\" block:\n        assert pending.size() == 1 && !pending.get(0).isTerm: \"pending.size()=\" + pending.size() + \" pending=\" + pending;\n        final PendingBlock root = (PendingBlock) pending.get(0);\n        assert root.prefix.length == 0;\n        assert root.index.getEmptyOutput() != null;\n\n        // Write FST to index\n        indexStartFP = indexOut.getFilePointer();\n        root.index.save(indexOut);\n        //System.out.println(\"  write FST \" + indexStartFP + \" field=\" + fieldInfo.name);\n\n        /*\n        if (DEBUG) {\n          final String dotFileName = segment + \"_\" + fieldInfo.name + \".dot\";\n          Writer w = new OutputStreamWriter(new FileOutputStream(dotFileName));\n          Util.toDot(root.index, w, false, false);\n          System.out.println(\"SAVED to \" + dotFileName);\n          w.close();\n        }\n        */\n        assert firstPendingTerm != null;\n        BytesRef minTerm = new BytesRef(firstPendingTerm.termBytes);\n\n        assert lastPendingTerm != null;\n        BytesRef maxTerm = new BytesRef(lastPendingTerm.termBytes);\n\n        fields.add(new FieldMetaData(fieldInfo,\n                                     ((PendingBlock) pending.get(0)).index.getEmptyOutput(),\n                                     numTerms,\n                                     indexStartFP,\n                                     sumTotalTermFreq,\n                                     sumDocFreq,\n                                     docsSeen.cardinality(),\n                                     longsSize,\n                                     minTerm, maxTerm));\n      } else {\n        assert sumTotalTermFreq == 0 || fieldInfo.getIndexOptions() == IndexOptions.DOCS && sumTotalTermFreq == -1;\n        assert sumDocFreq == 0;\n        assert docsSeen.cardinality() == 0;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"99f06f5dd087b1829e7b4139e4d014c786b92572","date":1592312728,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter.TermsWriter#finish().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter.TermsWriter#finish().mjava","sourceNew":"    // Finishes all terms in this field\n    public void finish() throws IOException {\n      if (numTerms > 0) {\n        // if (DEBUG) System.out.println(\"BTTW: finish prefixStarts=\" + Arrays.toString(prefixStarts));\n\n        // Add empty term to force closing of all final blocks:\n        pushTerm(new BytesRef());\n\n        // TODO: if pending.size() is already 1 with a non-zero prefix length\n        // we can save writing a \"degenerate\" root block, but we have to\n        // fix all the places that assume the root block's prefix is the empty string:\n        pushTerm(new BytesRef());\n        writeBlocks(0, pending.size());\n\n        // We better have one final \"root\" block:\n        assert pending.size() == 1 && !pending.get(0).isTerm: \"pending.size()=\" + pending.size() + \" pending=\" + pending;\n        final PendingBlock root = (PendingBlock) pending.get(0);\n        assert root.prefix.length == 0;\n        final BytesRef rootCode = root.index.getEmptyOutput();\n        assert rootCode != null;\n\n        ByteBuffersDataOutput metaOut = new ByteBuffersDataOutput();\n        fields.add(metaOut);\n\n        metaOut.writeVInt(fieldInfo.number);\n        metaOut.writeVLong(numTerms);\n        metaOut.writeVInt(rootCode.length);\n        metaOut.writeBytes(rootCode.bytes, rootCode.offset, rootCode.length);\n        assert fieldInfo.getIndexOptions() != IndexOptions.NONE;\n        if (fieldInfo.getIndexOptions() != IndexOptions.DOCS) {\n          metaOut.writeVLong(sumTotalTermFreq);\n        }\n        metaOut.writeVLong(sumDocFreq);\n        metaOut.writeVInt(docsSeen.cardinality());\n        writeBytesRef(metaOut, new BytesRef(firstPendingTerm.termBytes));\n        writeBytesRef(metaOut, new BytesRef(lastPendingTerm.termBytes));\n        metaOut.writeVLong(indexOut.getFilePointer());\n        // Write FST to index\n        root.index.save(metaOut, indexOut);\n        //System.out.println(\"  write FST \" + indexStartFP + \" field=\" + fieldInfo.name);\n\n        /*\n        if (DEBUG) {\n          final String dotFileName = segment + \"_\" + fieldInfo.name + \".dot\";\n          Writer w = new OutputStreamWriter(new FileOutputStream(dotFileName));\n          Util.toDot(root.index, w, false, false);\n          System.out.println(\"SAVED to \" + dotFileName);\n          w.close();\n        }\n        */\n\n      } else {\n        assert sumTotalTermFreq == 0 || fieldInfo.getIndexOptions() == IndexOptions.DOCS && sumTotalTermFreq == -1;\n        assert sumDocFreq == 0;\n        assert docsSeen.cardinality() == 0;\n      }\n    }\n\n","sourceOld":"    // Finishes all terms in this field\n    public void finish() throws IOException {\n      if (numTerms > 0) {\n        // if (DEBUG) System.out.println(\"BTTW: finish prefixStarts=\" + Arrays.toString(prefixStarts));\n\n        // Add empty term to force closing of all final blocks:\n        pushTerm(new BytesRef());\n\n        // TODO: if pending.size() is already 1 with a non-zero prefix length\n        // we can save writing a \"degenerate\" root block, but we have to\n        // fix all the places that assume the root block's prefix is the empty string:\n        pushTerm(new BytesRef());\n        writeBlocks(0, pending.size());\n\n        // We better have one final \"root\" block:\n        assert pending.size() == 1 && !pending.get(0).isTerm: \"pending.size()=\" + pending.size() + \" pending=\" + pending;\n        final PendingBlock root = (PendingBlock) pending.get(0);\n        assert root.prefix.length == 0;\n        assert root.index.getEmptyOutput() != null;\n\n        // Write FST to index\n        indexStartFP = indexOut.getFilePointer();\n        root.index.save(indexOut);\n        //System.out.println(\"  write FST \" + indexStartFP + \" field=\" + fieldInfo.name);\n\n        /*\n        if (DEBUG) {\n          final String dotFileName = segment + \"_\" + fieldInfo.name + \".dot\";\n          Writer w = new OutputStreamWriter(new FileOutputStream(dotFileName));\n          Util.toDot(root.index, w, false, false);\n          System.out.println(\"SAVED to \" + dotFileName);\n          w.close();\n        }\n        */\n        assert firstPendingTerm != null;\n        BytesRef minTerm = new BytesRef(firstPendingTerm.termBytes);\n\n        assert lastPendingTerm != null;\n        BytesRef maxTerm = new BytesRef(lastPendingTerm.termBytes);\n\n        fields.add(new FieldMetaData(fieldInfo,\n                                     ((PendingBlock) pending.get(0)).index.getEmptyOutput(),\n                                     numTerms,\n                                     indexStartFP,\n                                     sumTotalTermFreq,\n                                     sumDocFreq,\n                                     docsSeen.cardinality(),\n                                     minTerm, maxTerm));\n      } else {\n        assert sumTotalTermFreq == 0 || fieldInfo.getIndexOptions() == IndexOptions.DOCS && sumTotalTermFreq == -1;\n        assert sumDocFreq == 0;\n        assert docsSeen.cardinality() == 0;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"99f06f5dd087b1829e7b4139e4d014c786b92572":["08a5168e06e037794c0aba7f94f76ff3c09704d2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d2638f781be724518ff6c2263d14a48cf6e68017":["2bb2842e561df4e8e9ad89010605fc86ac265465","3e8715d826e588419327562287d5d6a8040d63d6"],"cb77022ef17ff655c519a3f6ecd393747ac88bcf":["3e8715d826e588419327562287d5d6a8040d63d6"],"31c8c009cea52067b0cf34f2ea666147e80b1461":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"08a5168e06e037794c0aba7f94f76ff3c09704d2":["06ab276a5660cb79daae8c5ede063531c700a03a"],"2bb2842e561df4e8e9ad89010605fc86ac265465":["acca9f933f2900f374b672072ea9c159c5d72e83"],"3e8715d826e588419327562287d5d6a8040d63d6":["2bb2842e561df4e8e9ad89010605fc86ac265465"],"acca9f933f2900f374b672072ea9c159c5d72e83":["31c8c009cea52067b0cf34f2ea666147e80b1461"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["99f06f5dd087b1829e7b4139e4d014c786b92572"],"06ab276a5660cb79daae8c5ede063531c700a03a":["cb77022ef17ff655c519a3f6ecd393747ac88bcf"]},"commit2Childs":{"99f06f5dd087b1829e7b4139e4d014c786b92572":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["31c8c009cea52067b0cf34f2ea666147e80b1461"],"d2638f781be724518ff6c2263d14a48cf6e68017":[],"cb77022ef17ff655c519a3f6ecd393747ac88bcf":["06ab276a5660cb79daae8c5ede063531c700a03a"],"31c8c009cea52067b0cf34f2ea666147e80b1461":["acca9f933f2900f374b672072ea9c159c5d72e83"],"08a5168e06e037794c0aba7f94f76ff3c09704d2":["99f06f5dd087b1829e7b4139e4d014c786b92572"],"2bb2842e561df4e8e9ad89010605fc86ac265465":["d2638f781be724518ff6c2263d14a48cf6e68017","3e8715d826e588419327562287d5d6a8040d63d6"],"3e8715d826e588419327562287d5d6a8040d63d6":["d2638f781be724518ff6c2263d14a48cf6e68017","cb77022ef17ff655c519a3f6ecd393747ac88bcf"],"acca9f933f2900f374b672072ea9c159c5d72e83":["2bb2842e561df4e8e9ad89010605fc86ac265465"],"06ab276a5660cb79daae8c5ede063531c700a03a":["08a5168e06e037794c0aba7f94f76ff3c09704d2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d2638f781be724518ff6c2263d14a48cf6e68017","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}