{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/RegressionEvaluator#doWork(Object,Object).mjava","commits":[{"id":"ba1e7de64990e3928b90142a52fb92eeff556475","date":1503713257,"type":1,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/RegressionEvaluator#doWork(Object,Object).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/RegressionEvaluator#evaluate(Tuple).mjava","sourceNew":"  @Override\n  public Object doWork(Object first, Object second) throws IOException{\n    if(null == first){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the first value\",toExpression(constructingFactory)));\n    }\n    if(null == second){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the second value\",toExpression(constructingFactory)));\n    }\n    if(!(first instanceof List<?>)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the first value, expecting a list of numbers\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n    if(!(second instanceof List<?>)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the second value, expecting a list of numbers\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n    \n    List<?> l1 = (List<?>)first;\n    List<?> l2 = (List<?>)second;\n    \n    if(l2.size() < l1.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - first list (%d) has more values than the second list (%d)\",toExpression(constructingFactory), l1.size(), l2.size()));      \n    }\n\n    SimpleRegression regression = new SimpleRegression();\n    for(int idx = 0; idx < l1.size(); ++idx){\n      regression.addData(((BigDecimal)l1.get(idx)).doubleValue(), ((BigDecimal)l2.get(idx)).doubleValue());\n    }\n    \n    Map<String,Number> map = new HashMap<>();\n    map.put(\"slope\", regression.getSlope());\n    map.put(\"intercept\", regression.getIntercept());\n    map.put(\"R\", regression.getR());\n    map.put(\"N\", regression.getN());\n    map.put(\"RSquare\", regression.getRSquare());\n    map.put(\"regressionSumSquares\", regression.getRegressionSumSquares());\n    map.put(\"slopeConfidenceInterval\", regression.getSlopeConfidenceInterval());\n    map.put(\"interceptStdErr\", regression.getInterceptStdErr());\n    map.put(\"totalSumSquares\", regression.getTotalSumSquares());\n    map.put(\"significance\", regression.getSignificance());\n    map.put(\"meanSquareError\", regression.getMeanSquareError());\n    \n    return new RegressionTuple(regression, map);\n  }\n\n","sourceOld":"  public Tuple evaluate(Tuple tuple) throws IOException {\n\n    StreamEvaluator colEval1 = subEvaluators.get(0);\n    StreamEvaluator colEval2 = subEvaluators.get(1);\n\n    List<Number> numbers1 = (List<Number>)colEval1.evaluate(tuple);\n    List<Number> numbers2 = (List<Number>)colEval2.evaluate(tuple);\n    double[] column1 = new double[numbers1.size()];\n    double[] column2 = new double[numbers2.size()];\n\n    for(int i=0; i<numbers1.size(); i++) {\n      column1[i] = numbers1.get(i).doubleValue();\n    }\n\n    for(int i=0; i<numbers2.size(); i++) {\n      column2[i] = numbers2.get(i).doubleValue();\n    }\n\n    SimpleRegression regression = new SimpleRegression();\n    for(int i=0; i<column1.length; i++) {\n      regression.addData(column1[i], column2[i]);\n    }\n\n    Map map = new HashMap();\n    map.put(\"slope\", regression.getSlope());\n    map.put(\"intercept\", regression.getIntercept());\n    map.put(\"R\", regression.getR());\n    map.put(\"N\", regression.getN());\n    map.put(\"RSquare\", regression.getRSquare());\n    map.put(\"regressionSumSquares\", regression.getRegressionSumSquares());\n    map.put(\"slopeConfidenceInterval\", regression.getSlopeConfidenceInterval());\n    map.put(\"interceptStdErr\", regression.getInterceptStdErr());\n    map.put(\"totalSumSquares\", regression.getTotalSumSquares());\n    map.put(\"significance\", regression.getSignificance());\n    map.put(\"meanSquareError\", regression.getMeanSquareError());\n    return new RegressionTuple(regression, map);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"45c28dbb559366e1f4ef8077346552bfb3f7ecf6","date":1503738439,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/RegressionEvaluator#doWork(Object,Object).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/RegressionEvaluator#evaluate(Tuple).mjava","sourceNew":"  @Override\n  public Object doWork(Object first, Object second) throws IOException{\n    if(null == first){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the first value\",toExpression(constructingFactory)));\n    }\n    if(null == second){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the second value\",toExpression(constructingFactory)));\n    }\n    if(!(first instanceof List<?>)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the first value, expecting a list of numbers\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n    if(!(second instanceof List<?>)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the second value, expecting a list of numbers\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n    \n    List<?> l1 = (List<?>)first;\n    List<?> l2 = (List<?>)second;\n    \n    if(l2.size() < l1.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - first list (%d) has more values than the second list (%d)\",toExpression(constructingFactory), l1.size(), l2.size()));      \n    }\n\n    SimpleRegression regression = new SimpleRegression();\n    for(int idx = 0; idx < l1.size(); ++idx){\n      regression.addData(((BigDecimal)l1.get(idx)).doubleValue(), ((BigDecimal)l2.get(idx)).doubleValue());\n    }\n    \n    Map<String,Number> map = new HashMap<>();\n    map.put(\"slope\", regression.getSlope());\n    map.put(\"intercept\", regression.getIntercept());\n    map.put(\"R\", regression.getR());\n    map.put(\"N\", regression.getN());\n    map.put(\"RSquare\", regression.getRSquare());\n    map.put(\"regressionSumSquares\", regression.getRegressionSumSquares());\n    map.put(\"slopeConfidenceInterval\", regression.getSlopeConfidenceInterval());\n    map.put(\"interceptStdErr\", regression.getInterceptStdErr());\n    map.put(\"totalSumSquares\", regression.getTotalSumSquares());\n    map.put(\"significance\", regression.getSignificance());\n    map.put(\"meanSquareError\", regression.getMeanSquareError());\n    \n    return new RegressionTuple(regression, map);\n  }\n\n","sourceOld":"  public Tuple evaluate(Tuple tuple) throws IOException {\n\n    StreamEvaluator colEval1 = subEvaluators.get(0);\n    StreamEvaluator colEval2 = subEvaluators.get(1);\n\n    List<Number> numbers1 = (List<Number>)colEval1.evaluate(tuple);\n    List<Number> numbers2 = (List<Number>)colEval2.evaluate(tuple);\n    double[] column1 = new double[numbers1.size()];\n    double[] column2 = new double[numbers2.size()];\n\n    for(int i=0; i<numbers1.size(); i++) {\n      column1[i] = numbers1.get(i).doubleValue();\n    }\n\n    for(int i=0; i<numbers2.size(); i++) {\n      column2[i] = numbers2.get(i).doubleValue();\n    }\n\n    SimpleRegression regression = new SimpleRegression();\n    for(int i=0; i<column1.length; i++) {\n      regression.addData(column1[i], column2[i]);\n    }\n\n    Map map = new HashMap();\n    map.put(\"slope\", regression.getSlope());\n    map.put(\"intercept\", regression.getIntercept());\n    map.put(\"R\", regression.getR());\n    map.put(\"N\", regression.getN());\n    map.put(\"RSquare\", regression.getRSquare());\n    map.put(\"regressionSumSquares\", regression.getRegressionSumSquares());\n    map.put(\"slopeConfidenceInterval\", regression.getSlopeConfidenceInterval());\n    map.put(\"interceptStdErr\", regression.getInterceptStdErr());\n    map.put(\"totalSumSquares\", regression.getTotalSumSquares());\n    map.put(\"significance\", regression.getSignificance());\n    map.put(\"meanSquareError\", regression.getMeanSquareError());\n    return new RegressionTuple(regression, map);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a7809d1d753b67f48b1a706e17034bf8b624ea3","date":1504366927,"type":1,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/RegressionEvaluator#doWork(Object,Object).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/RegressionEvaluator#evaluate(Tuple).mjava","sourceNew":"  @Override\n  public Object doWork(Object first, Object second) throws IOException{\n    if(null == first){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the first value\",toExpression(constructingFactory)));\n    }\n    if(null == second){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the second value\",toExpression(constructingFactory)));\n    }\n    if(!(first instanceof List<?>)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the first value, expecting a list of numbers\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n    if(!(second instanceof List<?>)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the second value, expecting a list of numbers\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n    \n    List<?> l1 = (List<?>)first;\n    List<?> l2 = (List<?>)second;\n    \n    if(l2.size() < l1.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - first list (%d) has more values than the second list (%d)\",toExpression(constructingFactory), l1.size(), l2.size()));      \n    }\n\n    SimpleRegression regression = new SimpleRegression();\n    for(int idx = 0; idx < l1.size(); ++idx){\n      regression.addData(((BigDecimal)l1.get(idx)).doubleValue(), ((BigDecimal)l2.get(idx)).doubleValue());\n    }\n    \n    Map<String,Number> map = new HashMap<>();\n    map.put(\"slope\", regression.getSlope());\n    map.put(\"intercept\", regression.getIntercept());\n    map.put(\"R\", regression.getR());\n    map.put(\"N\", regression.getN());\n    map.put(\"RSquare\", regression.getRSquare());\n    map.put(\"regressionSumSquares\", regression.getRegressionSumSquares());\n    map.put(\"slopeConfidenceInterval\", regression.getSlopeConfidenceInterval());\n    map.put(\"interceptStdErr\", regression.getInterceptStdErr());\n    map.put(\"totalSumSquares\", regression.getTotalSumSquares());\n    map.put(\"significance\", regression.getSignificance());\n    map.put(\"meanSquareError\", regression.getMeanSquareError());\n    \n    return new RegressionTuple(regression, map);\n  }\n\n","sourceOld":"  public Tuple evaluate(Tuple tuple) throws IOException {\n\n    StreamEvaluator colEval1 = subEvaluators.get(0);\n    StreamEvaluator colEval2 = subEvaluators.get(1);\n\n    List<Number> numbers1 = (List<Number>)colEval1.evaluate(tuple);\n    List<Number> numbers2 = (List<Number>)colEval2.evaluate(tuple);\n    double[] column1 = new double[numbers1.size()];\n    double[] column2 = new double[numbers2.size()];\n\n    for(int i=0; i<numbers1.size(); i++) {\n      column1[i] = numbers1.get(i).doubleValue();\n    }\n\n    for(int i=0; i<numbers2.size(); i++) {\n      column2[i] = numbers2.get(i).doubleValue();\n    }\n\n    SimpleRegression regression = new SimpleRegression();\n    for(int i=0; i<column1.length; i++) {\n      regression.addData(column1[i], column2[i]);\n    }\n\n    Map map = new HashMap();\n    map.put(\"slope\", regression.getSlope());\n    map.put(\"intercept\", regression.getIntercept());\n    map.put(\"R\", regression.getR());\n    map.put(\"N\", regression.getN());\n    map.put(\"RSquare\", regression.getRSquare());\n    map.put(\"regressionSumSquares\", regression.getRegressionSumSquares());\n    map.put(\"slopeConfidenceInterval\", regression.getSlopeConfidenceInterval());\n    map.put(\"interceptStdErr\", regression.getInterceptStdErr());\n    map.put(\"totalSumSquares\", regression.getTotalSumSquares());\n    map.put(\"significance\", regression.getSignificance());\n    map.put(\"meanSquareError\", regression.getMeanSquareError());\n    return new RegressionTuple(regression, map);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bbe7f5e9d90420c7fc8cd235dd8fb33fa9befe54","date":1512439781,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/RegressionEvaluator#doWork(Object,Object).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/RegressionEvaluator#doWork(Object,Object).mjava","sourceNew":"  @Override\n  public Object doWork(Object first, Object second) throws IOException{\n    if(null == first){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the first value\",toExpression(constructingFactory)));\n    }\n    if(null == second){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the second value\",toExpression(constructingFactory)));\n    }\n    if(!(first instanceof List<?>)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the first value, expecting a list of numbers\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n    if(!(second instanceof List<?>)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the second value, expecting a list of numbers\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n    \n    List<Number> l1 = (List<Number>)first;\n    List<Number> l2 = (List<Number>)second;\n    \n    if(l2.size() < l1.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - first list (%d) has more values than the second list (%d)\",toExpression(constructingFactory), l1.size(), l2.size()));      \n    }\n\n    SimpleRegression regression = new SimpleRegression();\n    for(int idx = 0; idx < l1.size(); ++idx){\n      regression.addData(l1.get(idx).doubleValue(), l2.get(idx).doubleValue());\n    }\n    \n    Map<String, Object> map = new HashMap<>();\n    map.put(\"slope\", regression.getSlope());\n    map.put(\"intercept\", regression.getIntercept());\n    map.put(\"R\", regression.getR());\n    map.put(\"N\", regression.getN());\n    map.put(\"RSquared\", regression.getRSquare());\n    map.put(\"regressionSumSquares\", regression.getRegressionSumSquares());\n    map.put(\"slopeConfidenceInterval\", regression.getSlopeConfidenceInterval());\n    map.put(\"interceptStdErr\", regression.getInterceptStdErr());\n    map.put(\"totalSumSquares\", regression.getTotalSumSquares());\n    map.put(\"significance\", regression.getSignificance());\n    map.put(\"meanSquareError\", regression.getMeanSquareError());\n\n    return new RegressionTuple(regression, map);\n  }\n\n","sourceOld":"  @Override\n  public Object doWork(Object first, Object second) throws IOException{\n    if(null == first){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the first value\",toExpression(constructingFactory)));\n    }\n    if(null == second){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the second value\",toExpression(constructingFactory)));\n    }\n    if(!(first instanceof List<?>)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the first value, expecting a list of numbers\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n    if(!(second instanceof List<?>)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the second value, expecting a list of numbers\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n    \n    List<?> l1 = (List<?>)first;\n    List<?> l2 = (List<?>)second;\n    \n    if(l2.size() < l1.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - first list (%d) has more values than the second list (%d)\",toExpression(constructingFactory), l1.size(), l2.size()));      \n    }\n\n    SimpleRegression regression = new SimpleRegression();\n    for(int idx = 0; idx < l1.size(); ++idx){\n      regression.addData(((BigDecimal)l1.get(idx)).doubleValue(), ((BigDecimal)l2.get(idx)).doubleValue());\n    }\n    \n    Map<String,Number> map = new HashMap<>();\n    map.put(\"slope\", regression.getSlope());\n    map.put(\"intercept\", regression.getIntercept());\n    map.put(\"R\", regression.getR());\n    map.put(\"N\", regression.getN());\n    map.put(\"RSquare\", regression.getRSquare());\n    map.put(\"regressionSumSquares\", regression.getRegressionSumSquares());\n    map.put(\"slopeConfidenceInterval\", regression.getSlopeConfidenceInterval());\n    map.put(\"interceptStdErr\", regression.getInterceptStdErr());\n    map.put(\"totalSumSquares\", regression.getTotalSumSquares());\n    map.put(\"significance\", regression.getSignificance());\n    map.put(\"meanSquareError\", regression.getMeanSquareError());\n    \n    return new RegressionTuple(regression, map);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885","date":1591579911,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/RegressionEvaluator#doWork(Object,Object).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/RegressionEvaluator#doWork(Object,Object).mjava","sourceNew":"  @Override\n  public Object doWork(Object first, Object second) throws IOException{\n    if(null == first){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the first value\",toExpression(constructingFactory)));\n    }\n    if(null == second){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the second value\",toExpression(constructingFactory)));\n    }\n    if(!(first instanceof List<?>)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the first value, expecting a list of numbers\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n    if(!(second instanceof List<?>)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the second value, expecting a list of numbers\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n    \n    @SuppressWarnings({\"unchecked\"})\n    List<Number> l1 = (List<Number>)first;\n    @SuppressWarnings({\"unchecked\"})\n    List<Number> l2 = (List<Number>)second;\n    \n    if(l2.size() < l1.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - first list (%d) has more values than the second list (%d)\",toExpression(constructingFactory), l1.size(), l2.size()));      \n    }\n\n    SimpleRegression regression = new SimpleRegression();\n    for(int idx = 0; idx < l1.size(); ++idx){\n      regression.addData(l1.get(idx).doubleValue(), l2.get(idx).doubleValue());\n    }\n    \n    Map<String, Object> map = new HashMap<>();\n    map.put(\"slope\", regression.getSlope());\n    map.put(\"intercept\", regression.getIntercept());\n    map.put(\"R\", regression.getR());\n    map.put(\"N\", regression.getN());\n    map.put(\"RSquared\", regression.getRSquare());\n    map.put(\"regressionSumSquares\", regression.getRegressionSumSquares());\n    map.put(\"slopeConfidenceInterval\", regression.getSlopeConfidenceInterval());\n    map.put(\"interceptStdErr\", regression.getInterceptStdErr());\n    map.put(\"totalSumSquares\", regression.getTotalSumSquares());\n    map.put(\"significance\", regression.getSignificance());\n    map.put(\"meanSquareError\", regression.getMeanSquareError());\n\n    return new RegressionTuple(regression, map);\n  }\n\n","sourceOld":"  @Override\n  public Object doWork(Object first, Object second) throws IOException{\n    if(null == first){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the first value\",toExpression(constructingFactory)));\n    }\n    if(null == second){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the second value\",toExpression(constructingFactory)));\n    }\n    if(!(first instanceof List<?>)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the first value, expecting a list of numbers\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n    if(!(second instanceof List<?>)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the second value, expecting a list of numbers\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n    \n    List<Number> l1 = (List<Number>)first;\n    List<Number> l2 = (List<Number>)second;\n    \n    if(l2.size() < l1.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - first list (%d) has more values than the second list (%d)\",toExpression(constructingFactory), l1.size(), l2.size()));      \n    }\n\n    SimpleRegression regression = new SimpleRegression();\n    for(int idx = 0; idx < l1.size(); ++idx){\n      regression.addData(l1.get(idx).doubleValue(), l2.get(idx).doubleValue());\n    }\n    \n    Map<String, Object> map = new HashMap<>();\n    map.put(\"slope\", regression.getSlope());\n    map.put(\"intercept\", regression.getIntercept());\n    map.put(\"R\", regression.getR());\n    map.put(\"N\", regression.getN());\n    map.put(\"RSquared\", regression.getRSquare());\n    map.put(\"regressionSumSquares\", regression.getRegressionSumSquares());\n    map.put(\"slopeConfidenceInterval\", regression.getSlopeConfidenceInterval());\n    map.put(\"interceptStdErr\", regression.getInterceptStdErr());\n    map.put(\"totalSumSquares\", regression.getTotalSumSquares());\n    map.put(\"significance\", regression.getSignificance());\n    map.put(\"meanSquareError\", regression.getMeanSquareError());\n\n    return new RegressionTuple(regression, map);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885":["bbe7f5e9d90420c7fc8cd235dd8fb33fa9befe54"],"3a7809d1d753b67f48b1a706e17034bf8b624ea3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","45c28dbb559366e1f4ef8077346552bfb3f7ecf6"],"bbe7f5e9d90420c7fc8cd235dd8fb33fa9befe54":["45c28dbb559366e1f4ef8077346552bfb3f7ecf6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"45c28dbb559366e1f4ef8077346552bfb3f7ecf6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ba1e7de64990e3928b90142a52fb92eeff556475"],"ba1e7de64990e3928b90142a52fb92eeff556475":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885"]},"commit2Childs":{"df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a7809d1d753b67f48b1a706e17034bf8b624ea3":[],"bbe7f5e9d90420c7fc8cd235dd8fb33fa9befe54":["df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","45c28dbb559366e1f4ef8077346552bfb3f7ecf6","ba1e7de64990e3928b90142a52fb92eeff556475"],"45c28dbb559366e1f4ef8077346552bfb3f7ecf6":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","bbe7f5e9d90420c7fc8cd235dd8fb33fa9befe54"],"ba1e7de64990e3928b90142a52fb92eeff556475":["45c28dbb559366e1f4ef8077346552bfb3f7ecf6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}