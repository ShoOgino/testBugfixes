{"path":"solr/core/src/java/org/apache/solr/update/UpdateHandler#UpdateHandler(SolrCore,UpdateLog).mjava","commits":[{"id":"28d656aaac42f919a3a7e8a859407018d75fed41","date":1363584435,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateHandler#UpdateHandler(SolrCore,UpdateLog).mjava","pathOld":"/dev/null","sourceNew":"  public UpdateHandler(SolrCore core, UpdateLog updateLog)  {\n    this.core=core;\n    schema = core.getSchema();\n    idField = schema.getUniqueKeyField();\n    idFieldType = idField!=null ? idField.getType() : null;\n    parseEventListeners();\n    PluginInfo ulogPluginInfo = core.getSolrConfig().getPluginInfo(UpdateLog.class.getName());\n    if (!core.isReloaded() && !core.getDirectoryFactory().isPersistent()) {\n      clearLog(ulogPluginInfo);\n    }\n    if (updateLog == null) {\n      initLog(ulogPluginInfo);\n    } else {\n      this.ulog = updateLog;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"08970e5b8411182a29412c177eff67ec1110095b","date":1366640815,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateHandler#UpdateHandler(SolrCore,UpdateLog).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateHandler#UpdateHandler(SolrCore,UpdateLog).mjava","sourceNew":"  public UpdateHandler(SolrCore core, UpdateLog updateLog)  {\n    this.core=core;\n    idField = core.getLatestSchema().getUniqueKeyField();\n    idFieldType = idField!=null ? idField.getType() : null;\n    parseEventListeners();\n    PluginInfo ulogPluginInfo = core.getSolrConfig().getPluginInfo(UpdateLog.class.getName());\n    if (!core.isReloaded() && !core.getDirectoryFactory().isPersistent()) {\n      clearLog(ulogPluginInfo);\n    }\n    if (updateLog == null) {\n      initLog(ulogPluginInfo);\n    } else {\n      this.ulog = updateLog;\n    }\n  }\n\n","sourceOld":"  public UpdateHandler(SolrCore core, UpdateLog updateLog)  {\n    this.core=core;\n    schema = core.getSchema();\n    idField = schema.getUniqueKeyField();\n    idFieldType = idField!=null ? idField.getType() : null;\n    parseEventListeners();\n    PluginInfo ulogPluginInfo = core.getSolrConfig().getPluginInfo(UpdateLog.class.getName());\n    if (!core.isReloaded() && !core.getDirectoryFactory().isPersistent()) {\n      clearLog(ulogPluginInfo);\n    }\n    if (updateLog == null) {\n      initLog(ulogPluginInfo);\n    } else {\n      this.ulog = updateLog;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6ab99a2487a34179af579c58aee0f6954a54173b","date":1370025444,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateHandler#UpdateHandler(SolrCore,UpdateLog).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateHandler#UpdateHandler(SolrCore,UpdateLog).mjava","sourceNew":"  public UpdateHandler(SolrCore core, UpdateLog updateLog)  {\n    this.core=core;\n    idField = core.getLatestSchema().getUniqueKeyField();\n    idFieldType = idField!=null ? idField.getType() : null;\n    parseEventListeners();\n    PluginInfo ulogPluginInfo = core.getSolrConfig().getPluginInfo(UpdateLog.class.getName());\n    if (!core.isReloaded() && !core.getDirectoryFactory().isPersistent()) {\n      clearLog(ulogPluginInfo);\n    }\n    initLog(ulogPluginInfo, updateLog);\n  }\n\n","sourceOld":"  public UpdateHandler(SolrCore core, UpdateLog updateLog)  {\n    this.core=core;\n    idField = core.getLatestSchema().getUniqueKeyField();\n    idFieldType = idField!=null ? idField.getType() : null;\n    parseEventListeners();\n    PluginInfo ulogPluginInfo = core.getSolrConfig().getPluginInfo(UpdateLog.class.getName());\n    if (!core.isReloaded() && !core.getDirectoryFactory().isPersistent()) {\n      clearLog(ulogPluginInfo);\n    }\n    if (updateLog == null) {\n      initLog(ulogPluginInfo);\n    } else {\n      this.ulog = updateLog;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15c29c7456c370c1d07e8c4543e1ce7208b4cd2e","date":1371592334,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateHandler#UpdateHandler(SolrCore,UpdateLog).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateHandler#UpdateHandler(SolrCore,UpdateLog).mjava","sourceNew":"  public UpdateHandler(SolrCore core, UpdateLog updateLog)  {\n    this.core=core;\n    idField = core.getLatestSchema().getUniqueKeyField();\n    idFieldType = idField!=null ? idField.getType() : null;\n    parseEventListeners();\n    PluginInfo ulogPluginInfo = core.getSolrConfig().getPluginInfo(UpdateLog.class.getName());\n    if (!core.isReloaded() && !core.getDirectoryFactory().isPersistent()) {\n      clearLog(ulogPluginInfo);\n    }\n\n    if (updateLog == null && ulogPluginInfo != null && ulogPluginInfo.isEnabled()) {\n      ulog = new UpdateLog();\n      ulog.init(ulogPluginInfo);\n      // ulog = core.createInitInstance(ulogPluginInfo, UpdateLog.class, \"update log\", \"solr.NullUpdateLog\");\n      ulog.init(this, core);\n    } else {\n      ulog = updateLog;\n    }\n    // ulog.init() when reusing an existing log is deferred (currently at the end of the DUH2 constructor\n  }\n\n","sourceOld":"  public UpdateHandler(SolrCore core, UpdateLog updateLog)  {\n    this.core=core;\n    idField = core.getLatestSchema().getUniqueKeyField();\n    idFieldType = idField!=null ? idField.getType() : null;\n    parseEventListeners();\n    PluginInfo ulogPluginInfo = core.getSolrConfig().getPluginInfo(UpdateLog.class.getName());\n    if (!core.isReloaded() && !core.getDirectoryFactory().isPersistent()) {\n      clearLog(ulogPluginInfo);\n    }\n    initLog(ulogPluginInfo, updateLog);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"849494cf2f3a96af5c8c84995108ddd8456fcd04","date":1372277913,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateHandler#UpdateHandler(SolrCore,UpdateLog).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateHandler#UpdateHandler(SolrCore,UpdateLog).mjava","sourceNew":"  public UpdateHandler(SolrCore core, UpdateLog updateLog)  {\n    this.core=core;\n    idField = core.getLatestSchema().getUniqueKeyField();\n    idFieldType = idField!=null ? idField.getType() : null;\n    parseEventListeners();\n    PluginInfo ulogPluginInfo = core.getSolrConfig().getPluginInfo(UpdateLog.class.getName());\n    \n\n    if (updateLog == null && ulogPluginInfo != null && ulogPluginInfo.isEnabled()) {\n      String dataDir = (String)ulogPluginInfo.initArgs.get(\"dir\");\n      \n      String ulogDir = core.getCoreDescriptor().getUlogDir();\n      if (ulogDir != null) {\n        dataDir = ulogDir;\n      }\n      if (dataDir == null || dataDir.length()==0) {\n        dataDir = core.getDataDir();\n      }\n           \n      if (dataDir != null && dataDir.startsWith(\"hdfs:/\")) {\n        DirectoryFactory dirFactory = core.getDirectoryFactory();\n        if (dirFactory instanceof HdfsDirectoryFactory) {\n          ulog = new HdfsUpdateLog(((HdfsDirectoryFactory)dirFactory).getConfDir());\n        } else {\n          ulog = new HdfsUpdateLog();\n        }\n        \n      } else {\n        ulog = new UpdateLog();\n      }\n      \n      if (!core.isReloaded() && !core.getDirectoryFactory().isPersistent()) {\n        ulog.clearLog(core, ulogPluginInfo);\n      }\n      \n      ulog.init(ulogPluginInfo);\n\n      ulog.init(this, core);\n    } else {\n      ulog = updateLog;\n    }\n    // ulog.init() when reusing an existing log is deferred (currently at the end of the DUH2 constructor\n\n  }\n\n","sourceOld":"  public UpdateHandler(SolrCore core, UpdateLog updateLog)  {\n    this.core=core;\n    idField = core.getLatestSchema().getUniqueKeyField();\n    idFieldType = idField!=null ? idField.getType() : null;\n    parseEventListeners();\n    PluginInfo ulogPluginInfo = core.getSolrConfig().getPluginInfo(UpdateLog.class.getName());\n    if (!core.isReloaded() && !core.getDirectoryFactory().isPersistent()) {\n      clearLog(ulogPluginInfo);\n    }\n\n    if (updateLog == null && ulogPluginInfo != null && ulogPluginInfo.isEnabled()) {\n      ulog = new UpdateLog();\n      ulog.init(ulogPluginInfo);\n      // ulog = core.createInitInstance(ulogPluginInfo, UpdateLog.class, \"update log\", \"solr.NullUpdateLog\");\n      ulog.init(this, core);\n    } else {\n      ulog = updateLog;\n    }\n    // ulog.init() when reusing an existing log is deferred (currently at the end of the DUH2 constructor\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateHandler#UpdateHandler(SolrCore,UpdateLog).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateHandler#UpdateHandler(SolrCore,UpdateLog).mjava","sourceNew":"  public UpdateHandler(SolrCore core, UpdateLog updateLog)  {\n    this.core=core;\n    idField = core.getLatestSchema().getUniqueKeyField();\n    idFieldType = idField!=null ? idField.getType() : null;\n    parseEventListeners();\n    PluginInfo ulogPluginInfo = core.getSolrConfig().getPluginInfo(UpdateLog.class.getName());\n    \n\n    if (updateLog == null && ulogPluginInfo != null && ulogPluginInfo.isEnabled()) {\n      String dataDir = (String)ulogPluginInfo.initArgs.get(\"dir\");\n      \n      String ulogDir = core.getCoreDescriptor().getUlogDir();\n      if (ulogDir != null) {\n        dataDir = ulogDir;\n      }\n      if (dataDir == null || dataDir.length()==0) {\n        dataDir = core.getDataDir();\n      }\n           \n      if (dataDir != null && dataDir.startsWith(\"hdfs:/\")) {\n        DirectoryFactory dirFactory = core.getDirectoryFactory();\n        if (dirFactory instanceof HdfsDirectoryFactory) {\n          ulog = new HdfsUpdateLog(((HdfsDirectoryFactory)dirFactory).getConfDir());\n        } else {\n          ulog = new HdfsUpdateLog();\n        }\n        \n      } else {\n        ulog = new UpdateLog();\n      }\n      \n      if (!core.isReloaded() && !core.getDirectoryFactory().isPersistent()) {\n        ulog.clearLog(core, ulogPluginInfo);\n      }\n      \n      ulog.init(ulogPluginInfo);\n\n      ulog.init(this, core);\n    } else {\n      ulog = updateLog;\n    }\n    // ulog.init() when reusing an existing log is deferred (currently at the end of the DUH2 constructor\n\n  }\n\n","sourceOld":"  public UpdateHandler(SolrCore core, UpdateLog updateLog)  {\n    this.core=core;\n    idField = core.getLatestSchema().getUniqueKeyField();\n    idFieldType = idField!=null ? idField.getType() : null;\n    parseEventListeners();\n    PluginInfo ulogPluginInfo = core.getSolrConfig().getPluginInfo(UpdateLog.class.getName());\n    if (!core.isReloaded() && !core.getDirectoryFactory().isPersistent()) {\n      clearLog(ulogPluginInfo);\n    }\n    initLog(ulogPluginInfo, updateLog);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70505a4870244b22d4d0f1a98951b08b197d5bb0","date":1424906348,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateHandler#UpdateHandler(SolrCore,UpdateLog).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateHandler#UpdateHandler(SolrCore,UpdateLog).mjava","sourceNew":"  public UpdateHandler(SolrCore core, UpdateLog updateLog)  {\n    this.core=core;\n    idField = core.getLatestSchema().getUniqueKeyField();\n    idFieldType = idField!=null ? idField.getType() : null;\n    parseEventListeners();\n    PluginInfo ulogPluginInfo = core.getSolrConfig().getPluginInfo(UpdateLog.class.getName());\n    \n\n    if (updateLog == null && ulogPluginInfo != null && ulogPluginInfo.isEnabled()) {\n      String dataDir = (String)ulogPluginInfo.initArgs.get(\"dir\");\n      \n      String ulogDir = core.getCoreDescriptor().getUlogDir();\n      if (ulogDir != null) {\n        dataDir = ulogDir;\n      }\n      if (dataDir == null || dataDir.length()==0) {\n        dataDir = core.getDataDir();\n      }\n           \n      if (dataDir != null && dataDir.startsWith(\"hdfs:/\")) {\n        DirectoryFactory dirFactory = core.getDirectoryFactory();\n        if (dirFactory instanceof HdfsDirectoryFactory) {\n          ulog = new HdfsUpdateLog(((HdfsDirectoryFactory)dirFactory).getConfDir());\n        } else {\n          ulog = new HdfsUpdateLog();\n        }\n        \n      } else {\n        ulog = new UpdateLog();\n      }\n      \n      if (!core.isReloaded() && !core.getDirectoryFactory().isPersistent()) {\n        ulog.clearLog(core, ulogPluginInfo);\n      }\n      \n      log.info(\"Using UpdateLog implementation: \" + ulog.getClass().getName());\n      \n      ulog.init(ulogPluginInfo);\n\n      ulog.init(this, core);\n    } else {\n      ulog = updateLog;\n    }\n    // ulog.init() when reusing an existing log is deferred (currently at the end of the DUH2 constructor\n\n  }\n\n","sourceOld":"  public UpdateHandler(SolrCore core, UpdateLog updateLog)  {\n    this.core=core;\n    idField = core.getLatestSchema().getUniqueKeyField();\n    idFieldType = idField!=null ? idField.getType() : null;\n    parseEventListeners();\n    PluginInfo ulogPluginInfo = core.getSolrConfig().getPluginInfo(UpdateLog.class.getName());\n    \n\n    if (updateLog == null && ulogPluginInfo != null && ulogPluginInfo.isEnabled()) {\n      String dataDir = (String)ulogPluginInfo.initArgs.get(\"dir\");\n      \n      String ulogDir = core.getCoreDescriptor().getUlogDir();\n      if (ulogDir != null) {\n        dataDir = ulogDir;\n      }\n      if (dataDir == null || dataDir.length()==0) {\n        dataDir = core.getDataDir();\n      }\n           \n      if (dataDir != null && dataDir.startsWith(\"hdfs:/\")) {\n        DirectoryFactory dirFactory = core.getDirectoryFactory();\n        if (dirFactory instanceof HdfsDirectoryFactory) {\n          ulog = new HdfsUpdateLog(((HdfsDirectoryFactory)dirFactory).getConfDir());\n        } else {\n          ulog = new HdfsUpdateLog();\n        }\n        \n      } else {\n        ulog = new UpdateLog();\n      }\n      \n      if (!core.isReloaded() && !core.getDirectoryFactory().isPersistent()) {\n        ulog.clearLog(core, ulogPluginInfo);\n      }\n      \n      ulog.init(ulogPluginInfo);\n\n      ulog.init(this, core);\n    } else {\n      ulog = updateLog;\n    }\n    // ulog.init() when reusing an existing log is deferred (currently at the end of the DUH2 constructor\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateHandler#UpdateHandler(SolrCore,UpdateLog).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateHandler#UpdateHandler(SolrCore,UpdateLog).mjava","sourceNew":"  public UpdateHandler(SolrCore core, UpdateLog updateLog)  {\n    this.core=core;\n    idField = core.getLatestSchema().getUniqueKeyField();\n    idFieldType = idField!=null ? idField.getType() : null;\n    parseEventListeners();\n    PluginInfo ulogPluginInfo = core.getSolrConfig().getPluginInfo(UpdateLog.class.getName());\n    \n\n    if (updateLog == null && ulogPluginInfo != null && ulogPluginInfo.isEnabled()) {\n      String dataDir = (String)ulogPluginInfo.initArgs.get(\"dir\");\n      \n      String ulogDir = core.getCoreDescriptor().getUlogDir();\n      if (ulogDir != null) {\n        dataDir = ulogDir;\n      }\n      if (dataDir == null || dataDir.length()==0) {\n        dataDir = core.getDataDir();\n      }\n           \n      if (dataDir != null && dataDir.startsWith(\"hdfs:/\")) {\n        DirectoryFactory dirFactory = core.getDirectoryFactory();\n        if (dirFactory instanceof HdfsDirectoryFactory) {\n          ulog = new HdfsUpdateLog(((HdfsDirectoryFactory)dirFactory).getConfDir());\n        } else {\n          ulog = new HdfsUpdateLog();\n        }\n        \n      } else {\n        ulog = new UpdateLog();\n      }\n      \n      if (!core.isReloaded() && !core.getDirectoryFactory().isPersistent()) {\n        ulog.clearLog(core, ulogPluginInfo);\n      }\n      \n      log.info(\"Using UpdateLog implementation: \" + ulog.getClass().getName());\n      \n      ulog.init(ulogPluginInfo);\n\n      ulog.init(this, core);\n    } else {\n      ulog = updateLog;\n    }\n    // ulog.init() when reusing an existing log is deferred (currently at the end of the DUH2 constructor\n\n  }\n\n","sourceOld":"  public UpdateHandler(SolrCore core, UpdateLog updateLog)  {\n    this.core=core;\n    idField = core.getLatestSchema().getUniqueKeyField();\n    idFieldType = idField!=null ? idField.getType() : null;\n    parseEventListeners();\n    PluginInfo ulogPluginInfo = core.getSolrConfig().getPluginInfo(UpdateLog.class.getName());\n    \n\n    if (updateLog == null && ulogPluginInfo != null && ulogPluginInfo.isEnabled()) {\n      String dataDir = (String)ulogPluginInfo.initArgs.get(\"dir\");\n      \n      String ulogDir = core.getCoreDescriptor().getUlogDir();\n      if (ulogDir != null) {\n        dataDir = ulogDir;\n      }\n      if (dataDir == null || dataDir.length()==0) {\n        dataDir = core.getDataDir();\n      }\n           \n      if (dataDir != null && dataDir.startsWith(\"hdfs:/\")) {\n        DirectoryFactory dirFactory = core.getDirectoryFactory();\n        if (dirFactory instanceof HdfsDirectoryFactory) {\n          ulog = new HdfsUpdateLog(((HdfsDirectoryFactory)dirFactory).getConfDir());\n        } else {\n          ulog = new HdfsUpdateLog();\n        }\n        \n      } else {\n        ulog = new UpdateLog();\n      }\n      \n      if (!core.isReloaded() && !core.getDirectoryFactory().isPersistent()) {\n        ulog.clearLog(core, ulogPluginInfo);\n      }\n      \n      ulog.init(ulogPluginInfo);\n\n      ulog.init(this, core);\n    } else {\n      ulog = updateLog;\n    }\n    // ulog.init() when reusing an existing log is deferred (currently at the end of the DUH2 constructor\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"86290366cefc1b9d4eced13b430858c4a4c0421d","date":1432321109,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateHandler#UpdateHandler(SolrCore,UpdateLog).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateHandler#UpdateHandler(SolrCore,UpdateLog).mjava","sourceNew":"  public UpdateHandler(SolrCore core, UpdateLog updateLog)  {\n    this.core=core;\n    idField = core.getLatestSchema().getUniqueKeyField();\n    idFieldType = idField!=null ? idField.getType() : null;\n    parseEventListeners();\n    PluginInfo ulogPluginInfo = core.getSolrConfig().getPluginInfo(UpdateLog.class.getName());\n\n\n    if (updateLog == null && ulogPluginInfo != null && ulogPluginInfo.isEnabled()) {\n      String dataDir = (String)ulogPluginInfo.initArgs.get(\"dir\");\n\n      String ulogDir = core.getCoreDescriptor().getUlogDir();\n      if (ulogDir != null) {\n        dataDir = ulogDir;\n      }\n      if (dataDir == null || dataDir.length()==0) {\n        dataDir = core.getDataDir();\n      }\n\n      if (dataDir != null && dataDir.startsWith(\"hdfs:/\")) {\n        DirectoryFactory dirFactory = core.getDirectoryFactory();\n        if (dirFactory instanceof HdfsDirectoryFactory) {\n          ulog = new HdfsUpdateLog(((HdfsDirectoryFactory)dirFactory).getConfDir());\n        } else {\n          ulog = new HdfsUpdateLog();\n        }\n\n      } else {\n        String className = ulogPluginInfo.className == null ? UpdateLog.class.getName() : ulogPluginInfo.className;\n        ulog = core.getResourceLoader().newInstance(className, UpdateLog.class);\n      }\n\n      if (!core.isReloaded() && !core.getDirectoryFactory().isPersistent()) {\n        ulog.clearLog(core, ulogPluginInfo);\n      }\n\n      log.info(\"Using UpdateLog implementation: \" + ulog.getClass().getName());\n\n      ulog.init(ulogPluginInfo);\n\n      ulog.init(this, core);\n    } else {\n      ulog = updateLog;\n    }\n    // ulog.init() when reusing an existing log is deferred (currently at the end of the DUH2 constructor\n\n  }\n\n","sourceOld":"  public UpdateHandler(SolrCore core, UpdateLog updateLog)  {\n    this.core=core;\n    idField = core.getLatestSchema().getUniqueKeyField();\n    idFieldType = idField!=null ? idField.getType() : null;\n    parseEventListeners();\n    PluginInfo ulogPluginInfo = core.getSolrConfig().getPluginInfo(UpdateLog.class.getName());\n    \n\n    if (updateLog == null && ulogPluginInfo != null && ulogPluginInfo.isEnabled()) {\n      String dataDir = (String)ulogPluginInfo.initArgs.get(\"dir\");\n      \n      String ulogDir = core.getCoreDescriptor().getUlogDir();\n      if (ulogDir != null) {\n        dataDir = ulogDir;\n      }\n      if (dataDir == null || dataDir.length()==0) {\n        dataDir = core.getDataDir();\n      }\n           \n      if (dataDir != null && dataDir.startsWith(\"hdfs:/\")) {\n        DirectoryFactory dirFactory = core.getDirectoryFactory();\n        if (dirFactory instanceof HdfsDirectoryFactory) {\n          ulog = new HdfsUpdateLog(((HdfsDirectoryFactory)dirFactory).getConfDir());\n        } else {\n          ulog = new HdfsUpdateLog();\n        }\n        \n      } else {\n        ulog = new UpdateLog();\n      }\n      \n      if (!core.isReloaded() && !core.getDirectoryFactory().isPersistent()) {\n        ulog.clearLog(core, ulogPluginInfo);\n      }\n      \n      log.info(\"Using UpdateLog implementation: \" + ulog.getClass().getName());\n      \n      ulog.init(ulogPluginInfo);\n\n      ulog.init(this, core);\n    } else {\n      ulog = updateLog;\n    }\n    // ulog.init() when reusing an existing log is deferred (currently at the end of the DUH2 constructor\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"61c45e99cf6676da48f19d7511c73712ad39402b","date":1495508331,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateHandler#UpdateHandler(SolrCore,UpdateLog).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateHandler#UpdateHandler(SolrCore,UpdateLog).mjava","sourceNew":"  public UpdateHandler(SolrCore core, UpdateLog updateLog)  {\n    this.core=core;\n    idField = core.getLatestSchema().getUniqueKeyField();\n    idFieldType = idField!=null ? idField.getType() : null;\n    parseEventListeners();\n    PluginInfo ulogPluginInfo = core.getSolrConfig().getPluginInfo(UpdateLog.class.getName());\n\n\n    // If this is a replica of type PULL, don't create the update log\n    boolean skipUpdateLog = core.getCoreDescriptor().getCloudDescriptor() != null && !core.getCoreDescriptor().getCloudDescriptor().requiresTransactionLog();\n    if (updateLog == null && ulogPluginInfo != null && ulogPluginInfo.isEnabled() && !skipUpdateLog) {\n      String dataDir = (String)ulogPluginInfo.initArgs.get(\"dir\");\n\n      String ulogDir = core.getCoreDescriptor().getUlogDir();\n      if (ulogDir != null) {\n        dataDir = ulogDir;\n      }\n      if (dataDir == null || dataDir.length()==0) {\n        dataDir = core.getDataDir();\n      }\n\n      if (dataDir != null && dataDir.startsWith(\"hdfs:/\")) {\n        DirectoryFactory dirFactory = core.getDirectoryFactory();\n        if (dirFactory instanceof HdfsDirectoryFactory) {\n          ulog = new HdfsUpdateLog(((HdfsDirectoryFactory)dirFactory).getConfDir());\n        } else {\n          ulog = new HdfsUpdateLog();\n        }\n\n      } else {\n        String className = ulogPluginInfo.className == null ? UpdateLog.class.getName() : ulogPluginInfo.className;\n        ulog = core.getResourceLoader().newInstance(className, UpdateLog.class);\n      }\n\n      if (!core.isReloaded() && !core.getDirectoryFactory().isPersistent()) {\n        ulog.clearLog(core, ulogPluginInfo);\n      }\n\n      log.info(\"Using UpdateLog implementation: \" + ulog.getClass().getName());\n\n      ulog.init(ulogPluginInfo);\n\n      ulog.init(this, core);\n    } else {\n      ulog = updateLog;\n    }\n    // ulog.init() when reusing an existing log is deferred (currently at the end of the DUH2 constructor\n\n  }\n\n","sourceOld":"  public UpdateHandler(SolrCore core, UpdateLog updateLog)  {\n    this.core=core;\n    idField = core.getLatestSchema().getUniqueKeyField();\n    idFieldType = idField!=null ? idField.getType() : null;\n    parseEventListeners();\n    PluginInfo ulogPluginInfo = core.getSolrConfig().getPluginInfo(UpdateLog.class.getName());\n\n\n    if (updateLog == null && ulogPluginInfo != null && ulogPluginInfo.isEnabled()) {\n      String dataDir = (String)ulogPluginInfo.initArgs.get(\"dir\");\n\n      String ulogDir = core.getCoreDescriptor().getUlogDir();\n      if (ulogDir != null) {\n        dataDir = ulogDir;\n      }\n      if (dataDir == null || dataDir.length()==0) {\n        dataDir = core.getDataDir();\n      }\n\n      if (dataDir != null && dataDir.startsWith(\"hdfs:/\")) {\n        DirectoryFactory dirFactory = core.getDirectoryFactory();\n        if (dirFactory instanceof HdfsDirectoryFactory) {\n          ulog = new HdfsUpdateLog(((HdfsDirectoryFactory)dirFactory).getConfDir());\n        } else {\n          ulog = new HdfsUpdateLog();\n        }\n\n      } else {\n        String className = ulogPluginInfo.className == null ? UpdateLog.class.getName() : ulogPluginInfo.className;\n        ulog = core.getResourceLoader().newInstance(className, UpdateLog.class);\n      }\n\n      if (!core.isReloaded() && !core.getDirectoryFactory().isPersistent()) {\n        ulog.clearLog(core, ulogPluginInfo);\n      }\n\n      log.info(\"Using UpdateLog implementation: \" + ulog.getClass().getName());\n\n      ulog.init(ulogPluginInfo);\n\n      ulog.init(this, core);\n    } else {\n      ulog = updateLog;\n    }\n    // ulog.init() when reusing an existing log is deferred (currently at the end of the DUH2 constructor\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateHandler#UpdateHandler(SolrCore,UpdateLog).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateHandler#UpdateHandler(SolrCore,UpdateLog).mjava","sourceNew":"  public UpdateHandler(SolrCore core, UpdateLog updateLog)  {\n    this.core=core;\n    idField = core.getLatestSchema().getUniqueKeyField();\n    idFieldType = idField!=null ? idField.getType() : null;\n    parseEventListeners();\n    PluginInfo ulogPluginInfo = core.getSolrConfig().getPluginInfo(UpdateLog.class.getName());\n\n\n    // If this is a replica of type PULL, don't create the update log\n    boolean skipUpdateLog = core.getCoreDescriptor().getCloudDescriptor() != null && !core.getCoreDescriptor().getCloudDescriptor().requiresTransactionLog();\n    if (updateLog == null && ulogPluginInfo != null && ulogPluginInfo.isEnabled() && !skipUpdateLog) {\n      String dataDir = (String)ulogPluginInfo.initArgs.get(\"dir\");\n\n      String ulogDir = core.getCoreDescriptor().getUlogDir();\n      if (ulogDir != null) {\n        dataDir = ulogDir;\n      }\n      if (dataDir == null || dataDir.length()==0) {\n        dataDir = core.getDataDir();\n      }\n\n      if (dataDir != null && dataDir.startsWith(\"hdfs:/\")) {\n        DirectoryFactory dirFactory = core.getDirectoryFactory();\n        if (dirFactory instanceof HdfsDirectoryFactory) {\n          ulog = new HdfsUpdateLog(((HdfsDirectoryFactory)dirFactory).getConfDir());\n        } else {\n          ulog = new HdfsUpdateLog();\n        }\n\n      } else {\n        String className = ulogPluginInfo.className == null ? UpdateLog.class.getName() : ulogPluginInfo.className;\n        ulog = core.getResourceLoader().newInstance(className, UpdateLog.class);\n      }\n\n      if (!core.isReloaded() && !core.getDirectoryFactory().isPersistent()) {\n        ulog.clearLog(core, ulogPluginInfo);\n      }\n\n      log.info(\"Using UpdateLog implementation: \" + ulog.getClass().getName());\n\n      ulog.init(ulogPluginInfo);\n\n      ulog.init(this, core);\n    } else {\n      ulog = updateLog;\n    }\n    // ulog.init() when reusing an existing log is deferred (currently at the end of the DUH2 constructor\n\n  }\n\n","sourceOld":"  public UpdateHandler(SolrCore core, UpdateLog updateLog)  {\n    this.core=core;\n    idField = core.getLatestSchema().getUniqueKeyField();\n    idFieldType = idField!=null ? idField.getType() : null;\n    parseEventListeners();\n    PluginInfo ulogPluginInfo = core.getSolrConfig().getPluginInfo(UpdateLog.class.getName());\n\n\n    if (updateLog == null && ulogPluginInfo != null && ulogPluginInfo.isEnabled()) {\n      String dataDir = (String)ulogPluginInfo.initArgs.get(\"dir\");\n\n      String ulogDir = core.getCoreDescriptor().getUlogDir();\n      if (ulogDir != null) {\n        dataDir = ulogDir;\n      }\n      if (dataDir == null || dataDir.length()==0) {\n        dataDir = core.getDataDir();\n      }\n\n      if (dataDir != null && dataDir.startsWith(\"hdfs:/\")) {\n        DirectoryFactory dirFactory = core.getDirectoryFactory();\n        if (dirFactory instanceof HdfsDirectoryFactory) {\n          ulog = new HdfsUpdateLog(((HdfsDirectoryFactory)dirFactory).getConfDir());\n        } else {\n          ulog = new HdfsUpdateLog();\n        }\n\n      } else {\n        String className = ulogPluginInfo.className == null ? UpdateLog.class.getName() : ulogPluginInfo.className;\n        ulog = core.getResourceLoader().newInstance(className, UpdateLog.class);\n      }\n\n      if (!core.isReloaded() && !core.getDirectoryFactory().isPersistent()) {\n        ulog.clearLog(core, ulogPluginInfo);\n      }\n\n      log.info(\"Using UpdateLog implementation: \" + ulog.getClass().getName());\n\n      ulog.init(ulogPluginInfo);\n\n      ulog.init(this, core);\n    } else {\n      ulog = updateLog;\n    }\n    // ulog.init() when reusing an existing log is deferred (currently at the end of the DUH2 constructor\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3aeccbf44209684948b6b0a33a3ee1173d0ddc4","date":1554043557,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateHandler#UpdateHandler(SolrCore,UpdateLog).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateHandler#UpdateHandler(SolrCore,UpdateLog).mjava","sourceNew":"  public UpdateHandler(SolrCore core, UpdateLog updateLog)  {\n    this.core=core;\n    idField = core.getLatestSchema().getUniqueKeyField();\n    idFieldType = idField!=null ? idField.getType() : null;\n    parseEventListeners();\n    PluginInfo ulogPluginInfo = core.getSolrConfig().getPluginInfo(UpdateLog.class.getName());\n\n    // If this is a replica of type PULL, don't create the update log\n    boolean skipUpdateLog = core.getCoreDescriptor().getCloudDescriptor() != null && !core.getCoreDescriptor().getCloudDescriptor().requiresTransactionLog();\n    if (updateLog == null && ulogPluginInfo != null && ulogPluginInfo.isEnabled() && !skipUpdateLog) {\n      DirectoryFactory dirFactory = core.getDirectoryFactory();\n      if (dirFactory instanceof HdfsDirectoryFactory) {\n        ulog = new HdfsUpdateLog(((HdfsDirectoryFactory)dirFactory).getConfDir());\n      } else {\n        String className = ulogPluginInfo.className == null ? UpdateLog.class.getName() : ulogPluginInfo.className;\n        ulog = core.getResourceLoader().newInstance(className, UpdateLog.class);\n      }\n\n      if (!core.isReloaded() && !dirFactory.isPersistent()) {\n        ulog.clearLog(core, ulogPluginInfo);\n      }\n\n      log.info(\"Using UpdateLog implementation: \" + ulog.getClass().getName());\n      ulog.init(ulogPluginInfo);\n      ulog.init(this, core);\n    } else {\n      ulog = updateLog;\n    }\n  }\n\n","sourceOld":"  public UpdateHandler(SolrCore core, UpdateLog updateLog)  {\n    this.core=core;\n    idField = core.getLatestSchema().getUniqueKeyField();\n    idFieldType = idField!=null ? idField.getType() : null;\n    parseEventListeners();\n    PluginInfo ulogPluginInfo = core.getSolrConfig().getPluginInfo(UpdateLog.class.getName());\n\n\n    // If this is a replica of type PULL, don't create the update log\n    boolean skipUpdateLog = core.getCoreDescriptor().getCloudDescriptor() != null && !core.getCoreDescriptor().getCloudDescriptor().requiresTransactionLog();\n    if (updateLog == null && ulogPluginInfo != null && ulogPluginInfo.isEnabled() && !skipUpdateLog) {\n      String dataDir = (String)ulogPluginInfo.initArgs.get(\"dir\");\n\n      String ulogDir = core.getCoreDescriptor().getUlogDir();\n      if (ulogDir != null) {\n        dataDir = ulogDir;\n      }\n      if (dataDir == null || dataDir.length()==0) {\n        dataDir = core.getDataDir();\n      }\n\n      if (dataDir != null && dataDir.startsWith(\"hdfs:/\")) {\n        DirectoryFactory dirFactory = core.getDirectoryFactory();\n        if (dirFactory instanceof HdfsDirectoryFactory) {\n          ulog = new HdfsUpdateLog(((HdfsDirectoryFactory)dirFactory).getConfDir());\n        } else {\n          ulog = new HdfsUpdateLog();\n        }\n\n      } else {\n        String className = ulogPluginInfo.className == null ? UpdateLog.class.getName() : ulogPluginInfo.className;\n        ulog = core.getResourceLoader().newInstance(className, UpdateLog.class);\n      }\n\n      if (!core.isReloaded() && !core.getDirectoryFactory().isPersistent()) {\n        ulog.clearLog(core, ulogPluginInfo);\n      }\n\n      log.info(\"Using UpdateLog implementation: \" + ulog.getClass().getName());\n\n      ulog.init(ulogPluginInfo);\n\n      ulog.init(this, core);\n    } else {\n      ulog = updateLog;\n    }\n    // ulog.init() when reusing an existing log is deferred (currently at the end of the DUH2 constructor\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"740d649f013f07efbeb73ca854f106c60166e7c0","date":1587431295,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateHandler#UpdateHandler(SolrCore,UpdateLog).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateHandler#UpdateHandler(SolrCore,UpdateLog).mjava","sourceNew":"  public UpdateHandler(SolrCore core, UpdateLog updateLog)  {\n    this.core=core;\n    idField = core.getLatestSchema().getUniqueKeyField();\n    idFieldType = idField!=null ? idField.getType() : null;\n    parseEventListeners();\n    PluginInfo ulogPluginInfo = core.getSolrConfig().getPluginInfo(UpdateLog.class.getName());\n\n    // If this is a replica of type PULL, don't create the update log\n    boolean skipUpdateLog = core.getCoreDescriptor().getCloudDescriptor() != null && !core.getCoreDescriptor().getCloudDescriptor().requiresTransactionLog();\n    if (updateLog == null && ulogPluginInfo != null && ulogPluginInfo.isEnabled() && !skipUpdateLog) {\n      DirectoryFactory dirFactory = core.getDirectoryFactory();\n      if (dirFactory instanceof HdfsDirectoryFactory) {\n        ulog = new HdfsUpdateLog(((HdfsDirectoryFactory)dirFactory).getConfDir());\n      } else {\n        String className = ulogPluginInfo.className == null ? UpdateLog.class.getName() : ulogPluginInfo.className;\n        ulog = core.getResourceLoader().newInstance(className, UpdateLog.class);\n      }\n\n      if (!core.isReloaded() && !dirFactory.isPersistent()) {\n        ulog.clearLog(core, ulogPluginInfo);\n      }\n\n      if (log.isInfoEnabled()) {\n        log.info(\"Using UpdateLog implementation: {}\", ulog.getClass().getName());\n      }\n      ulog.init(ulogPluginInfo);\n      ulog.init(this, core);\n    } else {\n      ulog = updateLog;\n    }\n  }\n\n","sourceOld":"  public UpdateHandler(SolrCore core, UpdateLog updateLog)  {\n    this.core=core;\n    idField = core.getLatestSchema().getUniqueKeyField();\n    idFieldType = idField!=null ? idField.getType() : null;\n    parseEventListeners();\n    PluginInfo ulogPluginInfo = core.getSolrConfig().getPluginInfo(UpdateLog.class.getName());\n\n    // If this is a replica of type PULL, don't create the update log\n    boolean skipUpdateLog = core.getCoreDescriptor().getCloudDescriptor() != null && !core.getCoreDescriptor().getCloudDescriptor().requiresTransactionLog();\n    if (updateLog == null && ulogPluginInfo != null && ulogPluginInfo.isEnabled() && !skipUpdateLog) {\n      DirectoryFactory dirFactory = core.getDirectoryFactory();\n      if (dirFactory instanceof HdfsDirectoryFactory) {\n        ulog = new HdfsUpdateLog(((HdfsDirectoryFactory)dirFactory).getConfDir());\n      } else {\n        String className = ulogPluginInfo.className == null ? UpdateLog.class.getName() : ulogPluginInfo.className;\n        ulog = core.getResourceLoader().newInstance(className, UpdateLog.class);\n      }\n\n      if (!core.isReloaded() && !dirFactory.isPersistent()) {\n        ulog.clearLog(core, ulogPluginInfo);\n      }\n\n      log.info(\"Using UpdateLog implementation: \" + ulog.getClass().getName());\n      ulog.init(ulogPluginInfo);\n      ulog.init(this, core);\n    } else {\n      ulog = updateLog;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"15c29c7456c370c1d07e8c4543e1ce7208b4cd2e":["6ab99a2487a34179af579c58aee0f6954a54173b"],"d3aeccbf44209684948b6b0a33a3ee1173d0ddc4":["61c45e99cf6676da48f19d7511c73712ad39402b"],"740d649f013f07efbeb73ca854f106c60166e7c0":["d3aeccbf44209684948b6b0a33a3ee1173d0ddc4"],"61c45e99cf6676da48f19d7511c73712ad39402b":["86290366cefc1b9d4eced13b430858c4a4c0421d"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["6ab99a2487a34179af579c58aee0f6954a54173b","849494cf2f3a96af5c8c84995108ddd8456fcd04"],"08970e5b8411182a29412c177eff67ec1110095b":["28d656aaac42f919a3a7e8a859407018d75fed41"],"849494cf2f3a96af5c8c84995108ddd8456fcd04":["15c29c7456c370c1d07e8c4543e1ce7208b4cd2e"],"86290366cefc1b9d4eced13b430858c4a4c0421d":["70505a4870244b22d4d0f1a98951b08b197d5bb0"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["86290366cefc1b9d4eced13b430858c4a4c0421d","61c45e99cf6676da48f19d7511c73712ad39402b"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["849494cf2f3a96af5c8c84995108ddd8456fcd04","70505a4870244b22d4d0f1a98951b08b197d5bb0"],"28d656aaac42f919a3a7e8a859407018d75fed41":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"70505a4870244b22d4d0f1a98951b08b197d5bb0":["849494cf2f3a96af5c8c84995108ddd8456fcd04"],"6ab99a2487a34179af579c58aee0f6954a54173b":["08970e5b8411182a29412c177eff67ec1110095b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["740d649f013f07efbeb73ca854f106c60166e7c0"]},"commit2Childs":{"15c29c7456c370c1d07e8c4543e1ce7208b4cd2e":["849494cf2f3a96af5c8c84995108ddd8456fcd04"],"d3aeccbf44209684948b6b0a33a3ee1173d0ddc4":["740d649f013f07efbeb73ca854f106c60166e7c0"],"61c45e99cf6676da48f19d7511c73712ad39402b":["d3aeccbf44209684948b6b0a33a3ee1173d0ddc4","e9017cf144952056066919f1ebc7897ff9bd71b1"],"740d649f013f07efbeb73ca854f106c60166e7c0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"08970e5b8411182a29412c177eff67ec1110095b":["6ab99a2487a34179af579c58aee0f6954a54173b"],"849494cf2f3a96af5c8c84995108ddd8456fcd04":["37a0f60745e53927c4c876cfe5b5a58170f0646c","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","70505a4870244b22d4d0f1a98951b08b197d5bb0"],"86290366cefc1b9d4eced13b430858c4a4c0421d":["61c45e99cf6676da48f19d7511c73712ad39402b","e9017cf144952056066919f1ebc7897ff9bd71b1"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"28d656aaac42f919a3a7e8a859407018d75fed41":["08970e5b8411182a29412c177eff67ec1110095b"],"70505a4870244b22d4d0f1a98951b08b197d5bb0":["86290366cefc1b9d4eced13b430858c4a4c0421d","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"6ab99a2487a34179af579c58aee0f6954a54173b":["15c29c7456c370c1d07e8c4543e1ce7208b4cd2e","37a0f60745e53927c4c876cfe5b5a58170f0646c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["28d656aaac42f919a3a7e8a859407018d75fed41"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","e9017cf144952056066919f1ebc7897ff9bd71b1","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}