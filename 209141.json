{"path":"solr/core/src/java/org/apache/solr/cloud/api/collections/ReindexCollectionCmd#setReindexingState(String,State,Map[String,Object]).mjava","commits":[{"id":"dad6a48950aafc9c2f5dc54740f8c6ab81304203","date":1552999379,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/ReindexCollectionCmd#setReindexingState(String,State,Map[String,Object]).mjava","pathOld":"/dev/null","sourceNew":"  private Map<String, Object> setReindexingState(String collection, State state, Map<String, Object> props) throws Exception {\n    String path = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection + REINDEXING_STATE_PATH;\n    DistribStateManager stateManager = ocmh.cloudManager.getDistribStateManager();\n    Map<String, Object> copyProps = new HashMap<>();\n    if (props == null) { // retrieve existing props, if any\n      props = Utils.getJson(stateManager, path);\n    }\n    copyProps.putAll(props);\n    copyProps.put(\"state\", state.toLower());\n    if (stateManager.hasData(path)) {\n      stateManager.setData(path, Utils.toJSON(copyProps), -1);\n    } else {\n      stateManager.makePath(path, Utils.toJSON(copyProps), CreateMode.PERSISTENT, false);\n    }\n    return copyProps;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"23b14fc1cb7939c2aad1d3a40f6282dee0bfda2e","date":1571071547,"type":3,"author":"Koen De Groote","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/ReindexCollectionCmd#setReindexingState(String,State,Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/ReindexCollectionCmd#setReindexingState(String,State,Map[String,Object]).mjava","sourceNew":"  private Map<String, Object> setReindexingState(String collection, State state, Map<String, Object> props) throws Exception {\n    String path = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection + REINDEXING_STATE_PATH;\n    DistribStateManager stateManager = ocmh.cloudManager.getDistribStateManager();\n    if (props == null) { // retrieve existing props, if any\n      props = Utils.getJson(stateManager, path);\n    }\n    Map<String, Object> copyProps = new HashMap<>(props);\n    copyProps.put(\"state\", state.toLower());\n    if (stateManager.hasData(path)) {\n      stateManager.setData(path, Utils.toJSON(copyProps), -1);\n    } else {\n      stateManager.makePath(path, Utils.toJSON(copyProps), CreateMode.PERSISTENT, false);\n    }\n    return copyProps;\n  }\n\n","sourceOld":"  private Map<String, Object> setReindexingState(String collection, State state, Map<String, Object> props) throws Exception {\n    String path = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection + REINDEXING_STATE_PATH;\n    DistribStateManager stateManager = ocmh.cloudManager.getDistribStateManager();\n    Map<String, Object> copyProps = new HashMap<>();\n    if (props == null) { // retrieve existing props, if any\n      props = Utils.getJson(stateManager, path);\n    }\n    copyProps.putAll(props);\n    copyProps.put(\"state\", state.toLower());\n    if (stateManager.hasData(path)) {\n      stateManager.setData(path, Utils.toJSON(copyProps), -1);\n    } else {\n      stateManager.makePath(path, Utils.toJSON(copyProps), CreateMode.PERSISTENT, false);\n    }\n    return copyProps;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":3,"author":"jimczi","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/ReindexCollectionCmd#setReindexingState(String,State,Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/ReindexCollectionCmd#setReindexingState(String,State,Map[String,Object]).mjava","sourceNew":"  private Map<String, Object> setReindexingState(String collection, State state, Map<String, Object> props) throws Exception {\n    String path = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection + REINDEXING_STATE_PATH;\n    DistribStateManager stateManager = ocmh.cloudManager.getDistribStateManager();\n    if (props == null) { // retrieve existing props, if any\n      props = Utils.getJson(stateManager, path);\n    }\n    Map<String, Object> copyProps = new HashMap<>(props);\n    copyProps.put(\"state\", state.toLower());\n    if (stateManager.hasData(path)) {\n      stateManager.setData(path, Utils.toJSON(copyProps), -1);\n    } else {\n      stateManager.makePath(path, Utils.toJSON(copyProps), CreateMode.PERSISTENT, false);\n    }\n    return copyProps;\n  }\n\n","sourceOld":"  private Map<String, Object> setReindexingState(String collection, State state, Map<String, Object> props) throws Exception {\n    String path = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection + REINDEXING_STATE_PATH;\n    DistribStateManager stateManager = ocmh.cloudManager.getDistribStateManager();\n    Map<String, Object> copyProps = new HashMap<>();\n    if (props == null) { // retrieve existing props, if any\n      props = Utils.getJson(stateManager, path);\n    }\n    copyProps.putAll(props);\n    copyProps.put(\"state\", state.toLower());\n    if (stateManager.hasData(path)) {\n      stateManager.setData(path, Utils.toJSON(copyProps), -1);\n    } else {\n      stateManager.makePath(path, Utils.toJSON(copyProps), CreateMode.PERSISTENT, false);\n    }\n    return copyProps;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"23b14fc1cb7939c2aad1d3a40f6282dee0bfda2e":["dad6a48950aafc9c2f5dc54740f8c6ab81304203"],"dad6a48950aafc9c2f5dc54740f8c6ab81304203":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["23b14fc1cb7939c2aad1d3a40f6282dee0bfda2e"],"b0b597c65628ca9e73913a07e81691f8229bae35":["dad6a48950aafc9c2f5dc54740f8c6ab81304203","23b14fc1cb7939c2aad1d3a40f6282dee0bfda2e"]},"commit2Childs":{"23b14fc1cb7939c2aad1d3a40f6282dee0bfda2e":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"dad6a48950aafc9c2f5dc54740f8c6ab81304203":["23b14fc1cb7939c2aad1d3a40f6282dee0bfda2e","b0b597c65628ca9e73913a07e81691f8229bae35"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["dad6a48950aafc9c2f5dc54740f8c6ab81304203"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}