{"path":"solr/core/src/test/org/apache/solr/search/TestComplexPhraseQParserPlugin#testDefaultField().mjava","commits":[{"id":"e0aed040842b70826cfd518b076d58adcaede282","date":1395018675,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestComplexPhraseQParserPlugin#testDefaultField().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testDefaultField() {\n\n    assertU(adoc(\"text\", \"john smith\", \"id\", \"1\"));\n    assertU(adoc(\"text\", \"johathon smith\", \"id\", \"2\"));\n    assertU(adoc(\"text\", \"john percival smith\", \"id\", \"3\"));\n    assertU(commit());\n    assertU(optimize());\n\n    assertQ(req(\"q\", \"{!complexphrase} \\\"john smith\\\"\")\n            , \"//result[@numFound='1']\"\n            , \"//doc[./int[@name='id']='1']\"\n    );\n\n    assertQ(req(\"q\", \"{!complexphrase} \\\"j* smyth~\\\"\")\n            , \"//result[@numFound='2']\"\n            , \"//doc[./int[@name='id']='1']\"\n            , \"//doc[./int[@name='id']='2']\"\n    );\n\n    assertQ(req(\"q\", \"{!complexphrase} \\\"(jo* -john) smith\\\"\")\n            , \"//result[@numFound='1']\"\n            , \"//doc[./int[@name='id']='2']\"\n    );\n\n    assertQ(req(\"q\", \"{!complexphrase} \\\"jo* smith\\\"~2\")\n            , \"//result[@numFound='3']\"\n            , \"//doc[./int[@name='id']='1']\"\n            , \"//doc[./int[@name='id']='2']\"\n            , \"//doc[./int[@name='id']='3']\"\n    );\n\n    assertQ(req(\"q\", \"{!complexphrase} \\\"jo* [sma TO smz]\\\"\")\n            , \"//result[@numFound='2']\"\n            , \"//doc[./int[@name='id']='1']\"\n            , \"//doc[./int[@name='id']='2']\"\n    );\n\n    assertQ(req(\"q\", \"{!complexphrase} \\\"john\\\"\")\n            , \"//result[@numFound='2']\"\n            , \"//doc[./int[@name='id']='1']\"\n            , \"//doc[./int[@name='id']='3']\"\n    );\n\n    assertQ(req(\"q\", \"{!complexphrase} \\\"(john johathon) smith\\\"\")\n            , \"//result[@numFound='2']\"\n            , \"//doc[./int[@name='id']='1']\"\n            , \"//doc[./int[@name='id']='2']\"\n    );\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c10121be7f9dc2db5f9d4adc9ee6d30c6ad5ec","date":1398363135,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestComplexPhraseQParserPlugin#testDefaultField().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestComplexPhraseQParserPlugin#testDefaultField().mjava","sourceNew":"  @Test\n  public void testDefaultField() {\n\n    assertU(adoc(\"text\", \"john smith\", \"id\", \"1\"));\n    assertU(adoc(\"text\", \"johathon smith\", \"id\", \"2\"));\n    assertU(adoc(\"text\", \"john percival smith\", \"id\", \"3\"));\n    assertU(commit());\n    assertU(optimize());\n\n    assertQ(req(\"q\", \"{!complexphrase} \\\"john smith\\\"\")\n            , \"//result[@numFound='1']\"\n            , \"//doc[./str[@name='id']='1']\"\n    );\n\n    assertQ(req(\"q\", \"{!complexphrase} \\\"j* smyth~\\\"\")\n            , \"//result[@numFound='2']\"\n            , \"//doc[./str[@name='id']='1']\"\n            , \"//doc[./str[@name='id']='2']\"\n    );\n\n    assertQ(req(\"q\", \"{!complexphrase} \\\"(jo* -john) smith\\\"\")\n            , \"//result[@numFound='1']\"\n            , \"//doc[./str[@name='id']='2']\"\n    );\n\n    assertQ(req(\"q\", \"{!complexphrase} \\\"jo* smith\\\"~2\")\n            , \"//result[@numFound='3']\"\n            , \"//doc[./str[@name='id']='1']\"\n            , \"//doc[./str[@name='id']='2']\"\n            , \"//doc[./str[@name='id']='3']\"\n    );\n\n    assertQ(req(\"q\", \"{!complexphrase} \\\"jo* [sma TO smz]\\\"\")\n            , \"//result[@numFound='2']\"\n            , \"//doc[./str[@name='id']='1']\"\n            , \"//doc[./str[@name='id']='2']\"\n    );\n\n    assertQ(req(\"q\", \"{!complexphrase} \\\"john\\\"\")\n            , \"//result[@numFound='2']\"\n            , \"//doc[./str[@name='id']='1']\"\n            , \"//doc[./str[@name='id']='3']\"\n    );\n\n    assertQ(req(\"q\", \"{!complexphrase} \\\"(john johathon) smith\\\"\")\n            , \"//result[@numFound='2']\"\n            , \"//doc[./str[@name='id']='1']\"\n            , \"//doc[./str[@name='id']='2']\"\n    );\n\n  }\n\n","sourceOld":"  @Test\n  public void testDefaultField() {\n\n    assertU(adoc(\"text\", \"john smith\", \"id\", \"1\"));\n    assertU(adoc(\"text\", \"johathon smith\", \"id\", \"2\"));\n    assertU(adoc(\"text\", \"john percival smith\", \"id\", \"3\"));\n    assertU(commit());\n    assertU(optimize());\n\n    assertQ(req(\"q\", \"{!complexphrase} \\\"john smith\\\"\")\n            , \"//result[@numFound='1']\"\n            , \"//doc[./int[@name='id']='1']\"\n    );\n\n    assertQ(req(\"q\", \"{!complexphrase} \\\"j* smyth~\\\"\")\n            , \"//result[@numFound='2']\"\n            , \"//doc[./int[@name='id']='1']\"\n            , \"//doc[./int[@name='id']='2']\"\n    );\n\n    assertQ(req(\"q\", \"{!complexphrase} \\\"(jo* -john) smith\\\"\")\n            , \"//result[@numFound='1']\"\n            , \"//doc[./int[@name='id']='2']\"\n    );\n\n    assertQ(req(\"q\", \"{!complexphrase} \\\"jo* smith\\\"~2\")\n            , \"//result[@numFound='3']\"\n            , \"//doc[./int[@name='id']='1']\"\n            , \"//doc[./int[@name='id']='2']\"\n            , \"//doc[./int[@name='id']='3']\"\n    );\n\n    assertQ(req(\"q\", \"{!complexphrase} \\\"jo* [sma TO smz]\\\"\")\n            , \"//result[@numFound='2']\"\n            , \"//doc[./int[@name='id']='1']\"\n            , \"//doc[./int[@name='id']='2']\"\n    );\n\n    assertQ(req(\"q\", \"{!complexphrase} \\\"john\\\"\")\n            , \"//result[@numFound='2']\"\n            , \"//doc[./int[@name='id']='1']\"\n            , \"//doc[./int[@name='id']='3']\"\n    );\n\n    assertQ(req(\"q\", \"{!complexphrase} \\\"(john johathon) smith\\\"\")\n            , \"//result[@numFound='2']\"\n            , \"//doc[./int[@name='id']='1']\"\n            , \"//doc[./int[@name='id']='2']\"\n    );\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","date":1398844771,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestComplexPhraseQParserPlugin#testDefaultField().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestComplexPhraseQParserPlugin#testDefaultField().mjava","sourceNew":"  @Test\n  public void testDefaultField() {\n\n    assertU(adoc(\"text\", \"john smith\", \"id\", \"1\"));\n    assertU(adoc(\"text\", \"johathon smith\", \"id\", \"2\"));\n    assertU(adoc(\"text\", \"john percival smith\", \"id\", \"3\"));\n    assertU(commit());\n    assertU(optimize());\n\n    assertQ(req(\"q\", \"{!complexphrase} \\\"john smith\\\"\")\n            , \"//result[@numFound='1']\"\n            , \"//doc[./str[@name='id']='1']\"\n    );\n\n    assertQ(req(\"q\", \"{!complexphrase} \\\"j* smyth~\\\"\")\n            , \"//result[@numFound='2']\"\n            , \"//doc[./str[@name='id']='1']\"\n            , \"//doc[./str[@name='id']='2']\"\n    );\n\n    assertQ(req(\"q\", \"{!complexphrase} \\\"(jo* -john) smith\\\"\")\n            , \"//result[@numFound='1']\"\n            , \"//doc[./str[@name='id']='2']\"\n    );\n\n    assertQ(req(\"q\", \"{!complexphrase} \\\"jo* smith\\\"~2\")\n            , \"//result[@numFound='3']\"\n            , \"//doc[./str[@name='id']='1']\"\n            , \"//doc[./str[@name='id']='2']\"\n            , \"//doc[./str[@name='id']='3']\"\n    );\n\n    assertQ(req(\"q\", \"{!complexphrase} \\\"jo* [sma TO smz]\\\"\")\n            , \"//result[@numFound='2']\"\n            , \"//doc[./str[@name='id']='1']\"\n            , \"//doc[./str[@name='id']='2']\"\n    );\n\n    assertQ(req(\"q\", \"{!complexphrase} \\\"john\\\"\")\n            , \"//result[@numFound='2']\"\n            , \"//doc[./str[@name='id']='1']\"\n            , \"//doc[./str[@name='id']='3']\"\n    );\n\n    assertQ(req(\"q\", \"{!complexphrase} \\\"(john johathon) smith\\\"\")\n            , \"//result[@numFound='2']\"\n            , \"//doc[./str[@name='id']='1']\"\n            , \"//doc[./str[@name='id']='2']\"\n    );\n\n  }\n\n","sourceOld":"  @Test\n  public void testDefaultField() {\n\n    assertU(adoc(\"text\", \"john smith\", \"id\", \"1\"));\n    assertU(adoc(\"text\", \"johathon smith\", \"id\", \"2\"));\n    assertU(adoc(\"text\", \"john percival smith\", \"id\", \"3\"));\n    assertU(commit());\n    assertU(optimize());\n\n    assertQ(req(\"q\", \"{!complexphrase} \\\"john smith\\\"\")\n            , \"//result[@numFound='1']\"\n            , \"//doc[./int[@name='id']='1']\"\n    );\n\n    assertQ(req(\"q\", \"{!complexphrase} \\\"j* smyth~\\\"\")\n            , \"//result[@numFound='2']\"\n            , \"//doc[./int[@name='id']='1']\"\n            , \"//doc[./int[@name='id']='2']\"\n    );\n\n    assertQ(req(\"q\", \"{!complexphrase} \\\"(jo* -john) smith\\\"\")\n            , \"//result[@numFound='1']\"\n            , \"//doc[./int[@name='id']='2']\"\n    );\n\n    assertQ(req(\"q\", \"{!complexphrase} \\\"jo* smith\\\"~2\")\n            , \"//result[@numFound='3']\"\n            , \"//doc[./int[@name='id']='1']\"\n            , \"//doc[./int[@name='id']='2']\"\n            , \"//doc[./int[@name='id']='3']\"\n    );\n\n    assertQ(req(\"q\", \"{!complexphrase} \\\"jo* [sma TO smz]\\\"\")\n            , \"//result[@numFound='2']\"\n            , \"//doc[./int[@name='id']='1']\"\n            , \"//doc[./int[@name='id']='2']\"\n    );\n\n    assertQ(req(\"q\", \"{!complexphrase} \\\"john\\\"\")\n            , \"//result[@numFound='2']\"\n            , \"//doc[./int[@name='id']='1']\"\n            , \"//doc[./int[@name='id']='3']\"\n    );\n\n    assertQ(req(\"q\", \"{!complexphrase} \\\"(john johathon) smith\\\"\")\n            , \"//result[@numFound='2']\"\n            , \"//doc[./int[@name='id']='1']\"\n            , \"//doc[./int[@name='id']='2']\"\n    );\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe":["e0aed040842b70826cfd518b076d58adcaede282","f2c10121be7f9dc2db5f9d4adc9ee6d30c6ad5ec"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e0aed040842b70826cfd518b076d58adcaede282":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f2c10121be7f9dc2db5f9d4adc9ee6d30c6ad5ec":["e0aed040842b70826cfd518b076d58adcaede282"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f2c10121be7f9dc2db5f9d4adc9ee6d30c6ad5ec"]},"commit2Childs":{"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e0aed040842b70826cfd518b076d58adcaede282"],"e0aed040842b70826cfd518b076d58adcaede282":["c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","f2c10121be7f9dc2db5f9d4adc9ee6d30c6ad5ec"],"f2c10121be7f9dc2db5f9d4adc9ee6d30c6ad5ec":["c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}