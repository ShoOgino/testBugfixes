{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsReader#decodeTerm(long[],DataInput,FieldInfo,BlockTermState,boolean).mjava","commits":[{"id":"1a88d7b0899b7d22dcbd4cf8ca35d9ec9850ab98","date":1377268487,"type":0,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsReader#decodeTerm(long[],DataInput,FieldInfo,BlockTermState,boolean).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void decodeTerm(long[] longs, DataInput in, FieldInfo fieldInfo, BlockTermState _termState, boolean absolute)\n    throws IOException {\n    final IntBlockTermState termState = (IntBlockTermState) _termState;\n    final boolean fieldHasPositions = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;\n    final boolean fieldHasOffsets = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n    final boolean fieldHasPayloads = fieldInfo.hasPayloads();\n\n    // nocommit: use old version\n    if (absolute) {\n      termState.docStartFP = 0;\n      termState.posStartFP = 0;\n      termState.payStartFP = 0;\n    }\n    termState.docStartFP += longs[0];\n    if (fieldHasPositions) {\n      termState.posStartFP += longs[1];\n      if (fieldHasOffsets || fieldHasPayloads) {\n        termState.payStartFP += longs[2];\n      }\n    }\n    if (termState.docFreq == 1) {\n      termState.singletonDocID = in.readVInt();\n    } else {\n      termState.singletonDocID = -1;\n    }\n    if (fieldHasPositions) {\n      if (termState.totalTermFreq > BLOCK_SIZE) {\n        termState.lastPosBlockOffset = in.readVLong();\n      } else {\n        termState.lastPosBlockOffset = -1;\n      }\n    }\n\n    if (termState.docFreq > BLOCK_SIZE) {\n      termState.skipOffset = in.readVLong();\n    } else {\n      termState.skipOffset = -1;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3263230f04a1aa8d431d722fdfce583a9542c18","date":1377603209,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsReader#decodeTerm(long[],DataInput,FieldInfo,BlockTermState,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsReader#decodeTerm(long[],DataInput,FieldInfo,BlockTermState,boolean).mjava","sourceNew":"  @Override\n  public void decodeTerm(long[] longs, DataInput in, FieldInfo fieldInfo, BlockTermState _termState, boolean absolute)\n    throws IOException {\n    final IntBlockTermState termState = (IntBlockTermState) _termState;\n    final boolean fieldHasPositions = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;\n    final boolean fieldHasOffsets = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n    final boolean fieldHasPayloads = fieldInfo.hasPayloads();\n\n    // nocommit: use old version\n    if (absolute) {\n      termState.docStartFP = 0;\n      termState.posStartFP = 0;\n      termState.payStartFP = 0;\n    }\n    if (version < Lucene41PostingsWriter.VERSION_META_ARRAY) {  // impersonation\n      _decodeTerm(in, fieldInfo, termState);\n      return;\n    }\n    termState.docStartFP += longs[0];\n    if (fieldHasPositions) {\n      termState.posStartFP += longs[1];\n      if (fieldHasOffsets || fieldHasPayloads) {\n        termState.payStartFP += longs[2];\n      }\n    }\n    if (termState.docFreq == 1) {\n      termState.singletonDocID = in.readVInt();\n    } else {\n      termState.singletonDocID = -1;\n    }\n    if (fieldHasPositions) {\n      if (termState.totalTermFreq > BLOCK_SIZE) {\n        termState.lastPosBlockOffset = in.readVLong();\n      } else {\n        termState.lastPosBlockOffset = -1;\n      }\n    }\n    if (termState.docFreq > BLOCK_SIZE) {\n      termState.skipOffset = in.readVLong();\n    } else {\n      termState.skipOffset = -1;\n    }\n  }\n\n","sourceOld":"  @Override\n  public void decodeTerm(long[] longs, DataInput in, FieldInfo fieldInfo, BlockTermState _termState, boolean absolute)\n    throws IOException {\n    final IntBlockTermState termState = (IntBlockTermState) _termState;\n    final boolean fieldHasPositions = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;\n    final boolean fieldHasOffsets = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n    final boolean fieldHasPayloads = fieldInfo.hasPayloads();\n\n    // nocommit: use old version\n    if (absolute) {\n      termState.docStartFP = 0;\n      termState.posStartFP = 0;\n      termState.payStartFP = 0;\n    }\n    termState.docStartFP += longs[0];\n    if (fieldHasPositions) {\n      termState.posStartFP += longs[1];\n      if (fieldHasOffsets || fieldHasPayloads) {\n        termState.payStartFP += longs[2];\n      }\n    }\n    if (termState.docFreq == 1) {\n      termState.singletonDocID = in.readVInt();\n    } else {\n      termState.singletonDocID = -1;\n    }\n    if (fieldHasPositions) {\n      if (termState.totalTermFreq > BLOCK_SIZE) {\n        termState.lastPosBlockOffset = in.readVLong();\n      } else {\n        termState.lastPosBlockOffset = -1;\n      }\n    }\n\n    if (termState.docFreq > BLOCK_SIZE) {\n      termState.skipOffset = in.readVLong();\n    } else {\n      termState.skipOffset = -1;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e6904bcc97d8afa27bd72ee29ac01e525e327ad4","date":1377958787,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsReader#decodeTerm(long[],DataInput,FieldInfo,BlockTermState,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsReader#decodeTerm(long[],DataInput,FieldInfo,BlockTermState,boolean).mjava","sourceNew":"  @Override\n  public void decodeTerm(long[] longs, DataInput in, FieldInfo fieldInfo, BlockTermState _termState, boolean absolute)\n    throws IOException {\n    final IntBlockTermState termState = (IntBlockTermState) _termState;\n    final boolean fieldHasPositions = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;\n    final boolean fieldHasOffsets = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n    final boolean fieldHasPayloads = fieldInfo.hasPayloads();\n\n    if (absolute) {\n      termState.docStartFP = 0;\n      termState.posStartFP = 0;\n      termState.payStartFP = 0;\n    }\n    if (version < Lucene41PostingsWriter.VERSION_META_ARRAY) {  // impersonation\n      _decodeTerm(in, fieldInfo, termState);\n      return;\n    }\n    termState.docStartFP += longs[0];\n    if (fieldHasPositions) {\n      termState.posStartFP += longs[1];\n      if (fieldHasOffsets || fieldHasPayloads) {\n        termState.payStartFP += longs[2];\n      }\n    }\n    if (termState.docFreq == 1) {\n      termState.singletonDocID = in.readVInt();\n    } else {\n      termState.singletonDocID = -1;\n    }\n    if (fieldHasPositions) {\n      if (termState.totalTermFreq > BLOCK_SIZE) {\n        termState.lastPosBlockOffset = in.readVLong();\n      } else {\n        termState.lastPosBlockOffset = -1;\n      }\n    }\n    if (termState.docFreq > BLOCK_SIZE) {\n      termState.skipOffset = in.readVLong();\n    } else {\n      termState.skipOffset = -1;\n    }\n  }\n\n","sourceOld":"  @Override\n  public void decodeTerm(long[] longs, DataInput in, FieldInfo fieldInfo, BlockTermState _termState, boolean absolute)\n    throws IOException {\n    final IntBlockTermState termState = (IntBlockTermState) _termState;\n    final boolean fieldHasPositions = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;\n    final boolean fieldHasOffsets = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n    final boolean fieldHasPayloads = fieldInfo.hasPayloads();\n\n    // nocommit: use old version\n    if (absolute) {\n      termState.docStartFP = 0;\n      termState.posStartFP = 0;\n      termState.payStartFP = 0;\n    }\n    if (version < Lucene41PostingsWriter.VERSION_META_ARRAY) {  // impersonation\n      _decodeTerm(in, fieldInfo, termState);\n      return;\n    }\n    termState.docStartFP += longs[0];\n    if (fieldHasPositions) {\n      termState.posStartFP += longs[1];\n      if (fieldHasOffsets || fieldHasPayloads) {\n        termState.payStartFP += longs[2];\n      }\n    }\n    if (termState.docFreq == 1) {\n      termState.singletonDocID = in.readVInt();\n    } else {\n      termState.singletonDocID = -1;\n    }\n    if (fieldHasPositions) {\n      if (termState.totalTermFreq > BLOCK_SIZE) {\n        termState.lastPosBlockOffset = in.readVLong();\n      } else {\n        termState.lastPosBlockOffset = -1;\n      }\n    }\n    if (termState.docFreq > BLOCK_SIZE) {\n      termState.skipOffset = in.readVLong();\n    } else {\n      termState.skipOffset = -1;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"563ccede63f326b5dfd37df2341608ce1a80075d","date":1378480344,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsReader#decodeTerm(long[],DataInput,FieldInfo,BlockTermState,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsReader#decodeTerm(long[],DataInput,FieldInfo,BlockTermState,boolean).mjava","sourceNew":"  @Override\n  public void decodeTerm(long[] longs, DataInput in, FieldInfo fieldInfo, BlockTermState _termState, boolean absolute)\n    throws IOException {\n    final IntBlockTermState termState = (IntBlockTermState) _termState;\n    final boolean fieldHasPositions = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;\n    final boolean fieldHasOffsets = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n    final boolean fieldHasPayloads = fieldInfo.hasPayloads();\n\n    if (absolute) {\n      termState.docStartFP = 0;\n      termState.posStartFP = 0;\n      termState.payStartFP = 0;\n    }\n    if (version < Lucene41PostingsWriter.VERSION_META_ARRAY) {  // backward compatibility\n      _decodeTerm(in, fieldInfo, termState);\n      return;\n    }\n    termState.docStartFP += longs[0];\n    if (fieldHasPositions) {\n      termState.posStartFP += longs[1];\n      if (fieldHasOffsets || fieldHasPayloads) {\n        termState.payStartFP += longs[2];\n      }\n    }\n    if (termState.docFreq == 1) {\n      termState.singletonDocID = in.readVInt();\n    } else {\n      termState.singletonDocID = -1;\n    }\n    if (fieldHasPositions) {\n      if (termState.totalTermFreq > BLOCK_SIZE) {\n        termState.lastPosBlockOffset = in.readVLong();\n      } else {\n        termState.lastPosBlockOffset = -1;\n      }\n    }\n    if (termState.docFreq > BLOCK_SIZE) {\n      termState.skipOffset = in.readVLong();\n    } else {\n      termState.skipOffset = -1;\n    }\n  }\n\n","sourceOld":"  @Override\n  public void decodeTerm(long[] longs, DataInput in, FieldInfo fieldInfo, BlockTermState _termState, boolean absolute)\n    throws IOException {\n    final IntBlockTermState termState = (IntBlockTermState) _termState;\n    final boolean fieldHasPositions = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;\n    final boolean fieldHasOffsets = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n    final boolean fieldHasPayloads = fieldInfo.hasPayloads();\n\n    if (absolute) {\n      termState.docStartFP = 0;\n      termState.posStartFP = 0;\n      termState.payStartFP = 0;\n    }\n    if (version < Lucene41PostingsWriter.VERSION_META_ARRAY) {  // impersonation\n      _decodeTerm(in, fieldInfo, termState);\n      return;\n    }\n    termState.docStartFP += longs[0];\n    if (fieldHasPositions) {\n      termState.posStartFP += longs[1];\n      if (fieldHasOffsets || fieldHasPayloads) {\n        termState.payStartFP += longs[2];\n      }\n    }\n    if (termState.docFreq == 1) {\n      termState.singletonDocID = in.readVInt();\n    } else {\n      termState.singletonDocID = -1;\n    }\n    if (fieldHasPositions) {\n      if (termState.totalTermFreq > BLOCK_SIZE) {\n        termState.lastPosBlockOffset = in.readVLong();\n      } else {\n        termState.lastPosBlockOffset = -1;\n      }\n    }\n    if (termState.docFreq > BLOCK_SIZE) {\n      termState.skipOffset = in.readVLong();\n    } else {\n      termState.skipOffset = -1;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2f948dd442d23baa6cbb28daf77c8db78b351329","date":1378742876,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsReader#decodeTerm(long[],DataInput,FieldInfo,BlockTermState,boolean).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void decodeTerm(long[] longs, DataInput in, FieldInfo fieldInfo, BlockTermState _termState, boolean absolute)\n    throws IOException {\n    final IntBlockTermState termState = (IntBlockTermState) _termState;\n    final boolean fieldHasPositions = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;\n    final boolean fieldHasOffsets = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n    final boolean fieldHasPayloads = fieldInfo.hasPayloads();\n\n    if (absolute) {\n      termState.docStartFP = 0;\n      termState.posStartFP = 0;\n      termState.payStartFP = 0;\n    }\n    if (version < Lucene41PostingsWriter.VERSION_META_ARRAY) {  // backward compatibility\n      _decodeTerm(in, fieldInfo, termState);\n      return;\n    }\n    termState.docStartFP += longs[0];\n    if (fieldHasPositions) {\n      termState.posStartFP += longs[1];\n      if (fieldHasOffsets || fieldHasPayloads) {\n        termState.payStartFP += longs[2];\n      }\n    }\n    if (termState.docFreq == 1) {\n      termState.singletonDocID = in.readVInt();\n    } else {\n      termState.singletonDocID = -1;\n    }\n    if (fieldHasPositions) {\n      if (termState.totalTermFreq > BLOCK_SIZE) {\n        termState.lastPosBlockOffset = in.readVLong();\n      } else {\n        termState.lastPosBlockOffset = -1;\n      }\n    }\n    if (termState.docFreq > BLOCK_SIZE) {\n      termState.skipOffset = in.readVLong();\n    } else {\n      termState.skipOffset = -1;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"99eb4a732d1a908f4636ace52928876136bf1896","date":1413829552,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsReader#decodeTerm(long[],DataInput,FieldInfo,BlockTermState,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsReader#decodeTerm(long[],DataInput,FieldInfo,BlockTermState,boolean).mjava","sourceNew":"  @Override\n  public void decodeTerm(long[] longs, DataInput in, FieldInfo fieldInfo, BlockTermState _termState, boolean absolute)\n    throws IOException {\n    final IntBlockTermState termState = (IntBlockTermState) _termState;\n    final boolean fieldHasPositions = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;\n    final boolean fieldHasOffsets = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n    final boolean fieldHasPayloads = fieldInfo.hasPayloads();\n\n    if (absolute) {\n      termState.docStartFP = 0;\n      termState.posStartFP = 0;\n      termState.payStartFP = 0;\n    }\n    if (version < Lucene41PostingsFormat.VERSION_META_ARRAY) {  // backward compatibility\n      _decodeTerm(in, fieldInfo, termState);\n      return;\n    }\n    termState.docStartFP += longs[0];\n    if (fieldHasPositions) {\n      termState.posStartFP += longs[1];\n      if (fieldHasOffsets || fieldHasPayloads) {\n        termState.payStartFP += longs[2];\n      }\n    }\n    if (termState.docFreq == 1) {\n      termState.singletonDocID = in.readVInt();\n    } else {\n      termState.singletonDocID = -1;\n    }\n    if (fieldHasPositions) {\n      if (termState.totalTermFreq > BLOCK_SIZE) {\n        termState.lastPosBlockOffset = in.readVLong();\n      } else {\n        termState.lastPosBlockOffset = -1;\n      }\n    }\n    if (termState.docFreq > BLOCK_SIZE) {\n      termState.skipOffset = in.readVLong();\n    } else {\n      termState.skipOffset = -1;\n    }\n  }\n\n","sourceOld":"  @Override\n  public void decodeTerm(long[] longs, DataInput in, FieldInfo fieldInfo, BlockTermState _termState, boolean absolute)\n    throws IOException {\n    final IntBlockTermState termState = (IntBlockTermState) _termState;\n    final boolean fieldHasPositions = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;\n    final boolean fieldHasOffsets = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n    final boolean fieldHasPayloads = fieldInfo.hasPayloads();\n\n    if (absolute) {\n      termState.docStartFP = 0;\n      termState.posStartFP = 0;\n      termState.payStartFP = 0;\n    }\n    if (version < Lucene41PostingsWriter.VERSION_META_ARRAY) {  // backward compatibility\n      _decodeTerm(in, fieldInfo, termState);\n      return;\n    }\n    termState.docStartFP += longs[0];\n    if (fieldHasPositions) {\n      termState.posStartFP += longs[1];\n      if (fieldHasOffsets || fieldHasPayloads) {\n        termState.payStartFP += longs[2];\n      }\n    }\n    if (termState.docFreq == 1) {\n      termState.singletonDocID = in.readVInt();\n    } else {\n      termState.singletonDocID = -1;\n    }\n    if (fieldHasPositions) {\n      if (termState.totalTermFreq > BLOCK_SIZE) {\n        termState.lastPosBlockOffset = in.readVLong();\n      } else {\n        termState.lastPosBlockOffset = -1;\n      }\n    }\n    if (termState.docFreq > BLOCK_SIZE) {\n      termState.skipOffset = in.readVLong();\n    } else {\n      termState.skipOffset = -1;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"99eb4a732d1a908f4636ace52928876136bf1896","date":1413829552,"type":6,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsReader#decodeTerm(long[],DataInput,FieldInfo,BlockTermState,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsReader#decodeTerm(long[],DataInput,FieldInfo,BlockTermState,boolean).mjava","sourceNew":"  @Override\n  public void decodeTerm(long[] longs, DataInput in, FieldInfo fieldInfo, BlockTermState _termState, boolean absolute)\n    throws IOException {\n    final IntBlockTermState termState = (IntBlockTermState) _termState;\n    final boolean fieldHasPositions = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;\n    final boolean fieldHasOffsets = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n    final boolean fieldHasPayloads = fieldInfo.hasPayloads();\n\n    if (absolute) {\n      termState.docStartFP = 0;\n      termState.posStartFP = 0;\n      termState.payStartFP = 0;\n    }\n\n    termState.docStartFP += longs[0];\n    if (fieldHasPositions) {\n      termState.posStartFP += longs[1];\n      if (fieldHasOffsets || fieldHasPayloads) {\n        termState.payStartFP += longs[2];\n      }\n    }\n    if (termState.docFreq == 1) {\n      termState.singletonDocID = in.readVInt();\n    } else {\n      termState.singletonDocID = -1;\n    }\n    if (fieldHasPositions) {\n      if (termState.totalTermFreq > BLOCK_SIZE) {\n        termState.lastPosBlockOffset = in.readVLong();\n      } else {\n        termState.lastPosBlockOffset = -1;\n      }\n    }\n    if (termState.docFreq > BLOCK_SIZE) {\n      termState.skipOffset = in.readVLong();\n    } else {\n      termState.skipOffset = -1;\n    }\n  }\n\n","sourceOld":"  @Override\n  public void decodeTerm(long[] longs, DataInput in, FieldInfo fieldInfo, BlockTermState _termState, boolean absolute)\n    throws IOException {\n    final IntBlockTermState termState = (IntBlockTermState) _termState;\n    final boolean fieldHasPositions = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;\n    final boolean fieldHasOffsets = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n    final boolean fieldHasPayloads = fieldInfo.hasPayloads();\n\n    if (absolute) {\n      termState.docStartFP = 0;\n      termState.posStartFP = 0;\n      termState.payStartFP = 0;\n    }\n    if (version < Lucene41PostingsWriter.VERSION_META_ARRAY) {  // backward compatibility\n      _decodeTerm(in, fieldInfo, termState);\n      return;\n    }\n    termState.docStartFP += longs[0];\n    if (fieldHasPositions) {\n      termState.posStartFP += longs[1];\n      if (fieldHasOffsets || fieldHasPayloads) {\n        termState.payStartFP += longs[2];\n      }\n    }\n    if (termState.docFreq == 1) {\n      termState.singletonDocID = in.readVInt();\n    } else {\n      termState.singletonDocID = -1;\n    }\n    if (fieldHasPositions) {\n      if (termState.totalTermFreq > BLOCK_SIZE) {\n        termState.lastPosBlockOffset = in.readVLong();\n      } else {\n        termState.lastPosBlockOffset = -1;\n      }\n    }\n    if (termState.docFreq > BLOCK_SIZE) {\n      termState.skipOffset = in.readVLong();\n    } else {\n      termState.skipOffset = -1;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db68c63cbfaa8698b9c4475f75ed2b9c9696d238","date":1414118621,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsReader#decodeTerm(long[],DataInput,FieldInfo,BlockTermState,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsReader#decodeTerm(long[],DataInput,FieldInfo,BlockTermState,boolean).mjava","sourceNew":"  @Override\n  public void decodeTerm(long[] longs, DataInput in, FieldInfo fieldInfo, BlockTermState _termState, boolean absolute)\n    throws IOException {\n    final IntBlockTermState termState = (IntBlockTermState) _termState;\n    final boolean fieldHasPositions = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;\n    final boolean fieldHasOffsets = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n    final boolean fieldHasPayloads = fieldInfo.hasPayloads();\n\n    if (absolute) {\n      termState.docStartFP = 0;\n      termState.posStartFP = 0;\n      termState.payStartFP = 0;\n    }\n    if (version < Lucene41PostingsFormat.VERSION_META_ARRAY) {  // backward compatibility\n      _decodeTerm(in, fieldInfo, termState);\n      return;\n    }\n    termState.docStartFP += longs[0];\n    if (fieldHasPositions) {\n      termState.posStartFP += longs[1];\n      if (fieldHasOffsets || fieldHasPayloads) {\n        termState.payStartFP += longs[2];\n      }\n    }\n    if (termState.docFreq == 1) {\n      termState.singletonDocID = in.readVInt();\n    } else {\n      termState.singletonDocID = -1;\n    }\n    if (fieldHasPositions) {\n      if (termState.totalTermFreq > BLOCK_SIZE) {\n        termState.lastPosBlockOffset = in.readVLong();\n      } else {\n        termState.lastPosBlockOffset = -1;\n      }\n    }\n    if (termState.docFreq > BLOCK_SIZE) {\n      termState.skipOffset = in.readVLong();\n    } else {\n      termState.skipOffset = -1;\n    }\n  }\n\n","sourceOld":"  @Override\n  public void decodeTerm(long[] longs, DataInput in, FieldInfo fieldInfo, BlockTermState _termState, boolean absolute)\n    throws IOException {\n    final IntBlockTermState termState = (IntBlockTermState) _termState;\n    final boolean fieldHasPositions = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;\n    final boolean fieldHasOffsets = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n    final boolean fieldHasPayloads = fieldInfo.hasPayloads();\n\n    if (absolute) {\n      termState.docStartFP = 0;\n      termState.posStartFP = 0;\n      termState.payStartFP = 0;\n    }\n    if (version < Lucene41PostingsWriter.VERSION_META_ARRAY) {  // backward compatibility\n      _decodeTerm(in, fieldInfo, termState);\n      return;\n    }\n    termState.docStartFP += longs[0];\n    if (fieldHasPositions) {\n      termState.posStartFP += longs[1];\n      if (fieldHasOffsets || fieldHasPayloads) {\n        termState.payStartFP += longs[2];\n      }\n    }\n    if (termState.docFreq == 1) {\n      termState.singletonDocID = in.readVInt();\n    } else {\n      termState.singletonDocID = -1;\n    }\n    if (fieldHasPositions) {\n      if (termState.totalTermFreq > BLOCK_SIZE) {\n        termState.lastPosBlockOffset = in.readVLong();\n      } else {\n        termState.lastPosBlockOffset = -1;\n      }\n    }\n    if (termState.docFreq > BLOCK_SIZE) {\n      termState.skipOffset = in.readVLong();\n    } else {\n      termState.skipOffset = -1;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db68c63cbfaa8698b9c4475f75ed2b9c9696d238","date":1414118621,"type":6,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsReader#decodeTerm(long[],DataInput,FieldInfo,BlockTermState,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsReader#decodeTerm(long[],DataInput,FieldInfo,BlockTermState,boolean).mjava","sourceNew":"  @Override\n  public void decodeTerm(long[] longs, DataInput in, FieldInfo fieldInfo, BlockTermState _termState, boolean absolute)\n    throws IOException {\n    final IntBlockTermState termState = (IntBlockTermState) _termState;\n    final boolean fieldHasPositions = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;\n    final boolean fieldHasOffsets = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n    final boolean fieldHasPayloads = fieldInfo.hasPayloads();\n\n    if (absolute) {\n      termState.docStartFP = 0;\n      termState.posStartFP = 0;\n      termState.payStartFP = 0;\n    }\n\n    termState.docStartFP += longs[0];\n    if (fieldHasPositions) {\n      termState.posStartFP += longs[1];\n      if (fieldHasOffsets || fieldHasPayloads) {\n        termState.payStartFP += longs[2];\n      }\n    }\n    if (termState.docFreq == 1) {\n      termState.singletonDocID = in.readVInt();\n    } else {\n      termState.singletonDocID = -1;\n    }\n    if (fieldHasPositions) {\n      if (termState.totalTermFreq > BLOCK_SIZE) {\n        termState.lastPosBlockOffset = in.readVLong();\n      } else {\n        termState.lastPosBlockOffset = -1;\n      }\n    }\n    if (termState.docFreq > BLOCK_SIZE) {\n      termState.skipOffset = in.readVLong();\n    } else {\n      termState.skipOffset = -1;\n    }\n  }\n\n","sourceOld":"  @Override\n  public void decodeTerm(long[] longs, DataInput in, FieldInfo fieldInfo, BlockTermState _termState, boolean absolute)\n    throws IOException {\n    final IntBlockTermState termState = (IntBlockTermState) _termState;\n    final boolean fieldHasPositions = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;\n    final boolean fieldHasOffsets = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n    final boolean fieldHasPayloads = fieldInfo.hasPayloads();\n\n    if (absolute) {\n      termState.docStartFP = 0;\n      termState.posStartFP = 0;\n      termState.payStartFP = 0;\n    }\n    if (version < Lucene41PostingsWriter.VERSION_META_ARRAY) {  // backward compatibility\n      _decodeTerm(in, fieldInfo, termState);\n      return;\n    }\n    termState.docStartFP += longs[0];\n    if (fieldHasPositions) {\n      termState.posStartFP += longs[1];\n      if (fieldHasOffsets || fieldHasPayloads) {\n        termState.payStartFP += longs[2];\n      }\n    }\n    if (termState.docFreq == 1) {\n      termState.singletonDocID = in.readVInt();\n    } else {\n      termState.singletonDocID = -1;\n    }\n    if (fieldHasPositions) {\n      if (termState.totalTermFreq > BLOCK_SIZE) {\n        termState.lastPosBlockOffset = in.readVLong();\n      } else {\n        termState.lastPosBlockOffset = -1;\n      }\n    }\n    if (termState.docFreq > BLOCK_SIZE) {\n      termState.skipOffset = in.readVLong();\n    } else {\n      termState.skipOffset = -1;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"563ccede63f326b5dfd37df2341608ce1a80075d":["e6904bcc97d8afa27bd72ee29ac01e525e327ad4"],"1a88d7b0899b7d22dcbd4cf8ca35d9ec9850ab98":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"99eb4a732d1a908f4636ace52928876136bf1896":["2f948dd442d23baa6cbb28daf77c8db78b351329"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e6904bcc97d8afa27bd72ee29ac01e525e327ad4":["e3263230f04a1aa8d431d722fdfce583a9542c18"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["2f948dd442d23baa6cbb28daf77c8db78b351329","99eb4a732d1a908f4636ace52928876136bf1896"],"2f948dd442d23baa6cbb28daf77c8db78b351329":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","563ccede63f326b5dfd37df2341608ce1a80075d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"e3263230f04a1aa8d431d722fdfce583a9542c18":["1a88d7b0899b7d22dcbd4cf8ca35d9ec9850ab98"]},"commit2Childs":{"563ccede63f326b5dfd37df2341608ce1a80075d":["2f948dd442d23baa6cbb28daf77c8db78b351329"],"1a88d7b0899b7d22dcbd4cf8ca35d9ec9850ab98":["e3263230f04a1aa8d431d722fdfce583a9542c18"],"99eb4a732d1a908f4636ace52928876136bf1896":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1a88d7b0899b7d22dcbd4cf8ca35d9ec9850ab98","2f948dd442d23baa6cbb28daf77c8db78b351329"],"e6904bcc97d8afa27bd72ee29ac01e525e327ad4":["563ccede63f326b5dfd37df2341608ce1a80075d"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2f948dd442d23baa6cbb28daf77c8db78b351329":["99eb4a732d1a908f4636ace52928876136bf1896","db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"e3263230f04a1aa8d431d722fdfce583a9542c18":["e6904bcc97d8afa27bd72ee29ac01e525e327ad4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}