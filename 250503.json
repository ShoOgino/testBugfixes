{"path":"solr/core/src/java/org/apache/solr/core/PluginBag.LazyPluginHolder#createInst().mjava","commits":[{"id":"69cad0546debf9ce9d44e309ecfa26760fecd5d8","date":1425846082,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/PluginBag.LazyPluginHolder#createInst().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/PluginRegistry.LazyPluginHolder#createInst().mjava","sourceNew":"    protected synchronized void createInst() {\n      if (inst != null) return;\n      log.info(\"Going to create a new {} with {} \", pluginMeta.tag, pluginInfo.toString());\n      if (resourceLoader instanceof MemClassLoader) {\n        MemClassLoader loader = (MemClassLoader) resourceLoader;\n        loader.loadJars();\n      }\n      Class<T> clazz = (Class<T>) pluginMeta.clazz;\n      inst = core.createInstance(pluginInfo.className, clazz, pluginMeta.tag, null, resourceLoader);\n      initInstance(inst, pluginInfo, core);\n      if (inst instanceof SolrCoreAware) {\n        SolrResourceLoader.assertAwareCompatibility(SolrCoreAware.class, inst);\n        ((SolrCoreAware) inst).inform(core);\n      }\n      if (inst instanceof ResourceLoaderAware) {\n        SolrResourceLoader.assertAwareCompatibility(ResourceLoaderAware.class, inst);\n        try {\n          ((ResourceLoaderAware) inst).inform(core.getResourceLoader());\n        } catch (IOException e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"error initializing component\", e);\n        }\n      }\n    }\n\n","sourceOld":"    protected synchronized void createInst() {\n      if (inst != null) return;\n      log.info(\"Going to create a new {} with {} \", pluginMeta.tag, pluginInfo.toString());\n      if (resourceLoader instanceof MemClassLoader) {\n        MemClassLoader loader = (MemClassLoader) resourceLoader;\n        loader.loadJars();\n      }\n      Class<T> clazz = (Class<T>) pluginMeta.clazz;\n      inst = core.createInstance(pluginInfo.className, clazz, pluginMeta.tag, null, resourceLoader);\n      initInstance(inst, pluginInfo, core);\n      if (inst instanceof SolrCoreAware) {\n        SolrResourceLoader.assertAwareCompatibility(SolrCoreAware.class, inst);\n        ((SolrCoreAware) inst).inform(core);\n      }\n      if (inst instanceof ResourceLoaderAware) {\n        SolrResourceLoader.assertAwareCompatibility(ResourceLoaderAware.class, inst);\n        try {\n          ((ResourceLoaderAware) inst).inform(core.getResourceLoader());\n        } catch (IOException e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"error initializing component\", e);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55a86e1831066267af63feede06bff6aa3141a40","date":1426643621,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/PluginBag.LazyPluginHolder#createInst().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/PluginBag.LazyPluginHolder#createInst().mjava","sourceNew":"    private synchronized boolean createInst() {\n      if (lazyInst != null) return false;\n      log.info(\"Going to create a new {} with {} \", pluginMeta.tag, pluginInfo.toString());\n      if (resourceLoader instanceof MemClassLoader) {\n        MemClassLoader loader = (MemClassLoader) resourceLoader;\n        loader.loadJars();\n      }\n      Class<T> clazz = (Class<T>) pluginMeta.clazz;\n      T localInst = core.createInstance(pluginInfo.className, clazz, pluginMeta.tag, null, resourceLoader);\n      initInstance(localInst, pluginInfo, core);\n      if (localInst instanceof SolrCoreAware) {\n        SolrResourceLoader.assertAwareCompatibility(SolrCoreAware.class, localInst);\n        ((SolrCoreAware) localInst).inform(core);\n      }\n      if (localInst instanceof ResourceLoaderAware) {\n        SolrResourceLoader.assertAwareCompatibility(ResourceLoaderAware.class, localInst);\n        try {\n          ((ResourceLoaderAware) localInst).inform(core.getResourceLoader());\n        } catch (IOException e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"error initializing component\", e);\n        }\n      }\n      lazyInst = localInst;  // only assign the volatile until after the plugin is completely ready to use\n      return true;\n    }\n\n","sourceOld":"    protected synchronized void createInst() {\n      if (inst != null) return;\n      log.info(\"Going to create a new {} with {} \", pluginMeta.tag, pluginInfo.toString());\n      if (resourceLoader instanceof MemClassLoader) {\n        MemClassLoader loader = (MemClassLoader) resourceLoader;\n        loader.loadJars();\n      }\n      Class<T> clazz = (Class<T>) pluginMeta.clazz;\n      inst = core.createInstance(pluginInfo.className, clazz, pluginMeta.tag, null, resourceLoader);\n      initInstance(inst, pluginInfo, core);\n      if (inst instanceof SolrCoreAware) {\n        SolrResourceLoader.assertAwareCompatibility(SolrCoreAware.class, inst);\n        ((SolrCoreAware) inst).inform(core);\n      }\n      if (inst instanceof ResourceLoaderAware) {\n        SolrResourceLoader.assertAwareCompatibility(ResourceLoaderAware.class, inst);\n        try {\n          ((ResourceLoaderAware) inst).inform(core.getResourceLoader());\n        } catch (IOException e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"error initializing component\", e);\n        }\n      }\n    }\n\n","bugFix":["9aea0485ecacb6734c17da2d02569816c23a69c1"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae2f5be890d26585d438eba0b9cc7d3c0a9775be","date":1427387954,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/PluginBag.LazyPluginHolder#createInst().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/PluginBag.LazyPluginHolder#createInst().mjava","sourceNew":"    private synchronized boolean createInst() {\n      if (lazyInst != null) return false;\n      log.info(\"Going to create a new {} with {} \", pluginMeta.getCleanTag(), pluginInfo.toString());\n      if (resourceLoader instanceof MemClassLoader) {\n        MemClassLoader loader = (MemClassLoader) resourceLoader;\n        loader.loadJars();\n      }\n      Class<T> clazz = (Class<T>) pluginMeta.clazz;\n      T localInst = core.createInstance(pluginInfo.className, clazz, pluginMeta.getCleanTag(), null, resourceLoader);\n      initInstance(localInst, pluginInfo);\n      if (localInst instanceof SolrCoreAware) {\n        SolrResourceLoader.assertAwareCompatibility(SolrCoreAware.class, localInst);\n        ((SolrCoreAware) localInst).inform(core);\n      }\n      if (localInst instanceof ResourceLoaderAware) {\n        SolrResourceLoader.assertAwareCompatibility(ResourceLoaderAware.class, localInst);\n        try {\n          ((ResourceLoaderAware) localInst).inform(core.getResourceLoader());\n        } catch (IOException e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"error initializing component\", e);\n        }\n      }\n      lazyInst = localInst;  // only assign the volatile until after the plugin is completely ready to use\n      return true;\n    }\n\n","sourceOld":"    private synchronized boolean createInst() {\n      if (lazyInst != null) return false;\n      log.info(\"Going to create a new {} with {} \", pluginMeta.tag, pluginInfo.toString());\n      if (resourceLoader instanceof MemClassLoader) {\n        MemClassLoader loader = (MemClassLoader) resourceLoader;\n        loader.loadJars();\n      }\n      Class<T> clazz = (Class<T>) pluginMeta.clazz;\n      T localInst = core.createInstance(pluginInfo.className, clazz, pluginMeta.tag, null, resourceLoader);\n      initInstance(localInst, pluginInfo, core);\n      if (localInst instanceof SolrCoreAware) {\n        SolrResourceLoader.assertAwareCompatibility(SolrCoreAware.class, localInst);\n        ((SolrCoreAware) localInst).inform(core);\n      }\n      if (localInst instanceof ResourceLoaderAware) {\n        SolrResourceLoader.assertAwareCompatibility(ResourceLoaderAware.class, localInst);\n        try {\n          ((ResourceLoaderAware) localInst).inform(core.getResourceLoader());\n        } catch (IOException e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"error initializing component\", e);\n        }\n      }\n      lazyInst = localInst;  // only assign the volatile until after the plugin is completely ready to use\n      return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/PluginBag.LazyPluginHolder#createInst().mjava","pathOld":"/dev/null","sourceNew":"    private synchronized boolean createInst() {\n      if (lazyInst != null) return false;\n      log.info(\"Going to create a new {} with {} \", pluginMeta.getCleanTag(), pluginInfo.toString());\n      if (resourceLoader instanceof MemClassLoader) {\n        MemClassLoader loader = (MemClassLoader) resourceLoader;\n        loader.loadJars();\n      }\n      Class<T> clazz = (Class<T>) pluginMeta.clazz;\n      T localInst = core.createInstance(pluginInfo.className, clazz, pluginMeta.getCleanTag(), null, resourceLoader);\n      initInstance(localInst, pluginInfo);\n      if (localInst instanceof SolrCoreAware) {\n        SolrResourceLoader.assertAwareCompatibility(SolrCoreAware.class, localInst);\n        ((SolrCoreAware) localInst).inform(core);\n      }\n      if (localInst instanceof ResourceLoaderAware) {\n        SolrResourceLoader.assertAwareCompatibility(ResourceLoaderAware.class, localInst);\n        try {\n          ((ResourceLoaderAware) localInst).inform(core.getResourceLoader());\n        } catch (IOException e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"error initializing component\", e);\n        }\n      }\n      lazyInst = localInst;  // only assign the volatile until after the plugin is completely ready to use\n      return true;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ed1b270b5ea6e1859f4b77233891fbb991898dba","date":1497429460,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/PluginBag.LazyPluginHolder#createInst().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/PluginBag.LazyPluginHolder#createInst().mjava","sourceNew":"    private synchronized boolean createInst() {\n      if (lazyInst != null) return false;\n      log.info(\"Going to create a new {} with {} \", pluginMeta.getCleanTag(), pluginInfo.toString());\n      if (resourceLoader instanceof MemClassLoader) {\n        MemClassLoader loader = (MemClassLoader) resourceLoader;\n        loader.loadJars();\n      }\n      Class<T> clazz = (Class<T>) pluginMeta.clazz;\n      T localInst = null;\n      try {\n        localInst = core.createInstance(pluginInfo.className, clazz, pluginMeta.getCleanTag(), null, resourceLoader);\n      } catch (SolrException e) {\n        if (isRuntimeLib && !(resourceLoader instanceof MemClassLoader)) {\n          throw new SolrException(SolrException.ErrorCode.getErrorCode(e.code()),\n              e.getMessage() + \". runtime library loading is not enabled, start Solr with -Denable.runtime.lib=true\",\n              e.getCause());\n        }\n        throw e;\n\n\n      }\n      initInstance(localInst, pluginInfo);\n      if (localInst instanceof SolrCoreAware) {\n        SolrResourceLoader.assertAwareCompatibility(SolrCoreAware.class, localInst);\n        ((SolrCoreAware) localInst).inform(core);\n      }\n      if (localInst instanceof ResourceLoaderAware) {\n        SolrResourceLoader.assertAwareCompatibility(ResourceLoaderAware.class, localInst);\n        try {\n          ((ResourceLoaderAware) localInst).inform(core.getResourceLoader());\n        } catch (IOException e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"error initializing component\", e);\n        }\n      }\n      lazyInst = localInst;  // only assign the volatile until after the plugin is completely ready to use\n      return true;\n    }\n\n","sourceOld":"    private synchronized boolean createInst() {\n      if (lazyInst != null) return false;\n      log.info(\"Going to create a new {} with {} \", pluginMeta.getCleanTag(), pluginInfo.toString());\n      if (resourceLoader instanceof MemClassLoader) {\n        MemClassLoader loader = (MemClassLoader) resourceLoader;\n        loader.loadJars();\n      }\n      Class<T> clazz = (Class<T>) pluginMeta.clazz;\n      T localInst = core.createInstance(pluginInfo.className, clazz, pluginMeta.getCleanTag(), null, resourceLoader);\n      initInstance(localInst, pluginInfo);\n      if (localInst instanceof SolrCoreAware) {\n        SolrResourceLoader.assertAwareCompatibility(SolrCoreAware.class, localInst);\n        ((SolrCoreAware) localInst).inform(core);\n      }\n      if (localInst instanceof ResourceLoaderAware) {\n        SolrResourceLoader.assertAwareCompatibility(ResourceLoaderAware.class, localInst);\n        try {\n          ((ResourceLoaderAware) localInst).inform(core.getResourceLoader());\n        } catch (IOException e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"error initializing component\", e);\n        }\n      }\n      lazyInst = localInst;  // only assign the volatile until after the plugin is completely ready to use\n      return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/PluginBag.LazyPluginHolder#createInst().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/PluginBag.LazyPluginHolder#createInst().mjava","sourceNew":"    private synchronized boolean createInst() {\n      if (lazyInst != null) return false;\n      log.info(\"Going to create a new {} with {} \", pluginMeta.getCleanTag(), pluginInfo.toString());\n      if (resourceLoader instanceof MemClassLoader) {\n        MemClassLoader loader = (MemClassLoader) resourceLoader;\n        loader.loadJars();\n      }\n      Class<T> clazz = (Class<T>) pluginMeta.clazz;\n      T localInst = null;\n      try {\n        localInst = core.createInstance(pluginInfo.className, clazz, pluginMeta.getCleanTag(), null, resourceLoader);\n      } catch (SolrException e) {\n        if (isRuntimeLib && !(resourceLoader instanceof MemClassLoader)) {\n          throw new SolrException(SolrException.ErrorCode.getErrorCode(e.code()),\n              e.getMessage() + \". runtime library loading is not enabled, start Solr with -Denable.runtime.lib=true\",\n              e.getCause());\n        }\n        throw e;\n\n\n      }\n      initInstance(localInst, pluginInfo);\n      if (localInst instanceof SolrCoreAware) {\n        SolrResourceLoader.assertAwareCompatibility(SolrCoreAware.class, localInst);\n        ((SolrCoreAware) localInst).inform(core);\n      }\n      if (localInst instanceof ResourceLoaderAware) {\n        SolrResourceLoader.assertAwareCompatibility(ResourceLoaderAware.class, localInst);\n        try {\n          ((ResourceLoaderAware) localInst).inform(core.getResourceLoader());\n        } catch (IOException e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"error initializing component\", e);\n        }\n      }\n      lazyInst = localInst;  // only assign the volatile until after the plugin is completely ready to use\n      return true;\n    }\n\n","sourceOld":"    private synchronized boolean createInst() {\n      if (lazyInst != null) return false;\n      log.info(\"Going to create a new {} with {} \", pluginMeta.getCleanTag(), pluginInfo.toString());\n      if (resourceLoader instanceof MemClassLoader) {\n        MemClassLoader loader = (MemClassLoader) resourceLoader;\n        loader.loadJars();\n      }\n      Class<T> clazz = (Class<T>) pluginMeta.clazz;\n      T localInst = core.createInstance(pluginInfo.className, clazz, pluginMeta.getCleanTag(), null, resourceLoader);\n      initInstance(localInst, pluginInfo);\n      if (localInst instanceof SolrCoreAware) {\n        SolrResourceLoader.assertAwareCompatibility(SolrCoreAware.class, localInst);\n        ((SolrCoreAware) localInst).inform(core);\n      }\n      if (localInst instanceof ResourceLoaderAware) {\n        SolrResourceLoader.assertAwareCompatibility(ResourceLoaderAware.class, localInst);\n        try {\n          ((ResourceLoaderAware) localInst).inform(core.getResourceLoader());\n        } catch (IOException e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"error initializing component\", e);\n        }\n      }\n      lazyInst = localInst;  // only assign the volatile until after the plugin is completely ready to use\n      return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/PluginBag.LazyPluginHolder#createInst().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/PluginBag.LazyPluginHolder#createInst().mjava","sourceNew":"    private synchronized boolean createInst() {\n      if (lazyInst != null) return false;\n      log.info(\"Going to create a new {} with {} \", pluginMeta.getCleanTag(), pluginInfo.toString());\n      if (resourceLoader instanceof MemClassLoader) {\n        MemClassLoader loader = (MemClassLoader) resourceLoader;\n        loader.loadJars();\n      }\n      Class<T> clazz = (Class<T>) pluginMeta.clazz;\n      T localInst = null;\n      try {\n        localInst = core.createInstance(pluginInfo.className, clazz, pluginMeta.getCleanTag(), null, resourceLoader);\n      } catch (SolrException e) {\n        if (isRuntimeLib && !(resourceLoader instanceof MemClassLoader)) {\n          throw new SolrException(SolrException.ErrorCode.getErrorCode(e.code()),\n              e.getMessage() + \". runtime library loading is not enabled, start Solr with -Denable.runtime.lib=true\",\n              e.getCause());\n        }\n        throw e;\n\n\n      }\n      initInstance(localInst, pluginInfo);\n      if (localInst instanceof SolrCoreAware) {\n        SolrResourceLoader.assertAwareCompatibility(SolrCoreAware.class, localInst);\n        ((SolrCoreAware) localInst).inform(core);\n      }\n      if (localInst instanceof ResourceLoaderAware) {\n        SolrResourceLoader.assertAwareCompatibility(ResourceLoaderAware.class, localInst);\n        try {\n          ((ResourceLoaderAware) localInst).inform(core.getResourceLoader());\n        } catch (IOException e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"error initializing component\", e);\n        }\n      }\n      lazyInst = localInst;  // only assign the volatile until after the plugin is completely ready to use\n      return true;\n    }\n\n","sourceOld":"    private synchronized boolean createInst() {\n      if (lazyInst != null) return false;\n      log.info(\"Going to create a new {} with {} \", pluginMeta.getCleanTag(), pluginInfo.toString());\n      if (resourceLoader instanceof MemClassLoader) {\n        MemClassLoader loader = (MemClassLoader) resourceLoader;\n        loader.loadJars();\n      }\n      Class<T> clazz = (Class<T>) pluginMeta.clazz;\n      T localInst = core.createInstance(pluginInfo.className, clazz, pluginMeta.getCleanTag(), null, resourceLoader);\n      initInstance(localInst, pluginInfo);\n      if (localInst instanceof SolrCoreAware) {\n        SolrResourceLoader.assertAwareCompatibility(SolrCoreAware.class, localInst);\n        ((SolrCoreAware) localInst).inform(core);\n      }\n      if (localInst instanceof ResourceLoaderAware) {\n        SolrResourceLoader.assertAwareCompatibility(ResourceLoaderAware.class, localInst);\n        try {\n          ((ResourceLoaderAware) localInst).inform(core.getResourceLoader());\n        } catch (IOException e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"error initializing component\", e);\n        }\n      }\n      lazyInst = localInst;  // only assign the volatile until after the plugin is completely ready to use\n      return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d52ea0bca71d3b5f5fd37c12585ccd9309f8ea74","date":1563736916,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/PluginBag.LazyPluginHolder#createInst().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/PluginBag.LazyPluginHolder#createInst().mjava","sourceNew":"    private synchronized boolean createInst() {\n      if (lazyInst != null) return false;\n      log.info(\"Going to create a new {} with {} \", pluginMeta.getCleanTag(), pluginInfo.toString());\n      if (resourceLoader instanceof MemClassLoader) {\n        MemClassLoader loader = (MemClassLoader) resourceLoader;\n        loader.loadJars();\n      }\n      lazyInst = createInitInstance(pluginInfo,pluginMeta,core,resourceLoader, isRuntimeLib);\n     /* Class<T> clazz = (Class<T>) pluginMeta.clazz;\n      T localInst = null;\n      try {\n        localInst = core.createInstance(pluginInfo.className, clazz, pluginMeta.getCleanTag(), null, resourceLoader);\n      } catch (SolrException e) {\n        if (isRuntimeLib && !(resourceLoader instanceof MemClassLoader)) {\n          throw new SolrException(SolrException.ErrorCode.getErrorCode(e.code()),\n              e.getMessage() + \". runtime library loading is not enabled, start Solr with -Denable.runtime.lib=true\",\n              e.getCause());\n        }\n        throw e;\n\n\n      }\n      initInstance(localInst, pluginInfo);\n      if (localInst instanceof SolrCoreAware) {\n        SolrResourceLoader.assertAwareCompatibility(SolrCoreAware.class, localInst);\n        ((SolrCoreAware) localInst).inform(core);\n      }\n      if (localInst instanceof ResourceLoaderAware) {\n        SolrResourceLoader.assertAwareCompatibility(ResourceLoaderAware.class, localInst);\n        try {\n          ((ResourceLoaderAware) localInst).inform(core.getResourceLoader());\n        } catch (IOException e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"error initializing component\", e);\n        }\n      }\n      lazyInst = localInst;  // only assign the volatile until after the plugin is completely ready to use*/\n      return true;\n    }\n\n","sourceOld":"    private synchronized boolean createInst() {\n      if (lazyInst != null) return false;\n      log.info(\"Going to create a new {} with {} \", pluginMeta.getCleanTag(), pluginInfo.toString());\n      if (resourceLoader instanceof MemClassLoader) {\n        MemClassLoader loader = (MemClassLoader) resourceLoader;\n        loader.loadJars();\n      }\n      Class<T> clazz = (Class<T>) pluginMeta.clazz;\n      T localInst = null;\n      try {\n        localInst = core.createInstance(pluginInfo.className, clazz, pluginMeta.getCleanTag(), null, resourceLoader);\n      } catch (SolrException e) {\n        if (isRuntimeLib && !(resourceLoader instanceof MemClassLoader)) {\n          throw new SolrException(SolrException.ErrorCode.getErrorCode(e.code()),\n              e.getMessage() + \". runtime library loading is not enabled, start Solr with -Denable.runtime.lib=true\",\n              e.getCause());\n        }\n        throw e;\n\n\n      }\n      initInstance(localInst, pluginInfo);\n      if (localInst instanceof SolrCoreAware) {\n        SolrResourceLoader.assertAwareCompatibility(SolrCoreAware.class, localInst);\n        ((SolrCoreAware) localInst).inform(core);\n      }\n      if (localInst instanceof ResourceLoaderAware) {\n        SolrResourceLoader.assertAwareCompatibility(ResourceLoaderAware.class, localInst);\n        try {\n          ((ResourceLoaderAware) localInst).inform(core.getResourceLoader());\n        } catch (IOException e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"error initializing component\", e);\n        }\n      }\n      lazyInst = localInst;  // only assign the volatile until after the plugin is completely ready to use\n      return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"39dabfd19b49b248d63cedbb01ea144ee5ad071c","date":1566241238,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/PluginBag.LazyPluginHolder#createInst().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/PluginBag.LazyPluginHolder#createInst().mjava","sourceNew":"    private synchronized boolean createInst() {\n      if (lazyInst != null) return false;\n      log.info(\"Going to create a new {} with {} \", pluginMeta.getCleanTag(), pluginInfo.toString());\n      if (resourceLoader instanceof MemClassLoader) {\n        MemClassLoader loader = (MemClassLoader) resourceLoader;\n        loader.loadJars();\n      }\n      lazyInst = createInitInstance(pluginInfo,pluginMeta,core,resourceLoader, isRuntimeLib);\n      return true;\n    }\n\n","sourceOld":"    private synchronized boolean createInst() {\n      if (lazyInst != null) return false;\n      log.info(\"Going to create a new {} with {} \", pluginMeta.getCleanTag(), pluginInfo.toString());\n      if (resourceLoader instanceof MemClassLoader) {\n        MemClassLoader loader = (MemClassLoader) resourceLoader;\n        loader.loadJars();\n      }\n      lazyInst = createInitInstance(pluginInfo,pluginMeta,core,resourceLoader, isRuntimeLib);\n     /* Class<T> clazz = (Class<T>) pluginMeta.clazz;\n      T localInst = null;\n      try {\n        localInst = core.createInstance(pluginInfo.className, clazz, pluginMeta.getCleanTag(), null, resourceLoader);\n      } catch (SolrException e) {\n        if (isRuntimeLib && !(resourceLoader instanceof MemClassLoader)) {\n          throw new SolrException(SolrException.ErrorCode.getErrorCode(e.code()),\n              e.getMessage() + \". runtime library loading is not enabled, start Solr with -Denable.runtime.lib=true\",\n              e.getCause());\n        }\n        throw e;\n\n\n      }\n      initInstance(localInst, pluginInfo);\n      if (localInst instanceof SolrCoreAware) {\n        SolrResourceLoader.assertAwareCompatibility(SolrCoreAware.class, localInst);\n        ((SolrCoreAware) localInst).inform(core);\n      }\n      if (localInst instanceof ResourceLoaderAware) {\n        SolrResourceLoader.assertAwareCompatibility(ResourceLoaderAware.class, localInst);\n        try {\n          ((ResourceLoaderAware) localInst).inform(core.getResourceLoader());\n        } catch (IOException e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"error initializing component\", e);\n        }\n      }\n      lazyInst = localInst;  // only assign the volatile until after the plugin is completely ready to use*/\n      return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c44cc06c26e456fe9c215072b79fce30babe3975","date":1570365040,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/PluginBag.LazyPluginHolder#createInst().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/PluginBag.LazyPluginHolder#createInst().mjava","sourceNew":"    private synchronized boolean createInst() {\n      if (lazyInst != null) return false;\n      log.info(\"Going to create a new {} with {} \", pluginMeta.getCleanTag(), pluginInfo.toString());\n      if (resourceLoader instanceof MemClassLoader) {\n        MemClassLoader loader = (MemClassLoader) resourceLoader;\n        loader.loadJars();\n      }\n      Class<T> clazz = (Class<T>) pluginMeta.clazz;\n      T localInst = null;\n      try {\n        localInst = core.createInstance(pluginInfo.className, clazz, pluginMeta.getCleanTag(), null, resourceLoader);\n      } catch (SolrException e) {\n        if (isRuntimeLib && !(resourceLoader instanceof MemClassLoader)) {\n          throw new SolrException(SolrException.ErrorCode.getErrorCode(e.code()),\n              e.getMessage() + \". runtime library loading is not enabled, start Solr with -Denable.runtime.lib=true\",\n              e.getCause());\n        }\n        throw e;\n\n\n      }\n      initInstance(localInst, pluginInfo);\n      if (localInst instanceof SolrCoreAware) {\n        SolrResourceLoader.assertAwareCompatibility(SolrCoreAware.class, localInst);\n        ((SolrCoreAware) localInst).inform(core);\n      }\n      if (localInst instanceof ResourceLoaderAware) {\n        SolrResourceLoader.assertAwareCompatibility(ResourceLoaderAware.class, localInst);\n        try {\n          ((ResourceLoaderAware) localInst).inform(core.getResourceLoader());\n        } catch (IOException e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"error initializing component\", e);\n        }\n      }\n      lazyInst = localInst;  // only assign the volatile until after the plugin is completely ready to use\n      return true;\n    }\n\n","sourceOld":"    private synchronized boolean createInst() {\n      if (lazyInst != null) return false;\n      log.info(\"Going to create a new {} with {} \", pluginMeta.getCleanTag(), pluginInfo.toString());\n      if (resourceLoader instanceof MemClassLoader) {\n        MemClassLoader loader = (MemClassLoader) resourceLoader;\n        loader.loadJars();\n      }\n      lazyInst = createInitInstance(pluginInfo,pluginMeta,core,resourceLoader, isRuntimeLib);\n      return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":3,"author":"jimczi","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/PluginBag.LazyPluginHolder#createInst().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/PluginBag.LazyPluginHolder#createInst().mjava","sourceNew":"    private synchronized boolean createInst() {\n      if (lazyInst != null) return false;\n      log.info(\"Going to create a new {} with {} \", pluginMeta.getCleanTag(), pluginInfo.toString());\n      if (resourceLoader instanceof MemClassLoader) {\n        MemClassLoader loader = (MemClassLoader) resourceLoader;\n        loader.loadJars();\n      }\n      Class<T> clazz = (Class<T>) pluginMeta.clazz;\n      T localInst = null;\n      try {\n        localInst = core.createInstance(pluginInfo.className, clazz, pluginMeta.getCleanTag(), null, resourceLoader);\n      } catch (SolrException e) {\n        if (isRuntimeLib && !(resourceLoader instanceof MemClassLoader)) {\n          throw new SolrException(SolrException.ErrorCode.getErrorCode(e.code()),\n              e.getMessage() + \". runtime library loading is not enabled, start Solr with -Denable.runtime.lib=true\",\n              e.getCause());\n        }\n        throw e;\n\n\n      }\n      initInstance(localInst, pluginInfo);\n      if (localInst instanceof SolrCoreAware) {\n        SolrResourceLoader.assertAwareCompatibility(SolrCoreAware.class, localInst);\n        ((SolrCoreAware) localInst).inform(core);\n      }\n      if (localInst instanceof ResourceLoaderAware) {\n        SolrResourceLoader.assertAwareCompatibility(ResourceLoaderAware.class, localInst);\n        try {\n          ((ResourceLoaderAware) localInst).inform(core.getResourceLoader());\n        } catch (IOException e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"error initializing component\", e);\n        }\n      }\n      lazyInst = localInst;  // only assign the volatile until after the plugin is completely ready to use\n      return true;\n    }\n\n","sourceOld":"    private synchronized boolean createInst() {\n      if (lazyInst != null) return false;\n      log.info(\"Going to create a new {} with {} \", pluginMeta.getCleanTag(), pluginInfo.toString());\n      if (resourceLoader instanceof MemClassLoader) {\n        MemClassLoader loader = (MemClassLoader) resourceLoader;\n        loader.loadJars();\n      }\n      lazyInst = createInitInstance(pluginInfo,pluginMeta,core,resourceLoader, isRuntimeLib);\n      return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"140be51d03394488536f4aacedace29f9b318347","date":1587170432,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/PluginBag.LazyPluginHolder#createInst().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/PluginBag.LazyPluginHolder#createInst().mjava","sourceNew":"    private synchronized boolean createInst() {\n      if (lazyInst != null) return false;\n      if (log.isInfoEnabled()) {\n        log.info(\"Going to create a new {} with {} \", pluginMeta.getCleanTag(), pluginInfo.toString());\n      }\n      if (resourceLoader instanceof MemClassLoader) {\n        MemClassLoader loader = (MemClassLoader) resourceLoader;\n        loader.loadJars();\n      }\n      Class<T> clazz = (Class<T>) pluginMeta.clazz;\n      T localInst = null;\n      try {\n        localInst = core.createInstance(pluginInfo.className, clazz, pluginMeta.getCleanTag(), null, resourceLoader);\n      } catch (SolrException e) {\n        if (isRuntimeLib && !(resourceLoader instanceof MemClassLoader)) {\n          throw new SolrException(SolrException.ErrorCode.getErrorCode(e.code()),\n              e.getMessage() + \". runtime library loading is not enabled, start Solr with -Denable.runtime.lib=true\",\n              e.getCause());\n        }\n        throw e;\n\n\n      }\n      initInstance(localInst, pluginInfo);\n      if (localInst instanceof SolrCoreAware) {\n        SolrResourceLoader.assertAwareCompatibility(SolrCoreAware.class, localInst);\n        ((SolrCoreAware) localInst).inform(core);\n      }\n      if (localInst instanceof ResourceLoaderAware) {\n        SolrResourceLoader.assertAwareCompatibility(ResourceLoaderAware.class, localInst);\n        try {\n          ((ResourceLoaderAware) localInst).inform(core.getResourceLoader());\n        } catch (IOException e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"error initializing component\", e);\n        }\n      }\n      lazyInst = localInst;  // only assign the volatile until after the plugin is completely ready to use\n      return true;\n    }\n\n","sourceOld":"    private synchronized boolean createInst() {\n      if (lazyInst != null) return false;\n      log.info(\"Going to create a new {} with {} \", pluginMeta.getCleanTag(), pluginInfo.toString());\n      if (resourceLoader instanceof MemClassLoader) {\n        MemClassLoader loader = (MemClassLoader) resourceLoader;\n        loader.loadJars();\n      }\n      Class<T> clazz = (Class<T>) pluginMeta.clazz;\n      T localInst = null;\n      try {\n        localInst = core.createInstance(pluginInfo.className, clazz, pluginMeta.getCleanTag(), null, resourceLoader);\n      } catch (SolrException e) {\n        if (isRuntimeLib && !(resourceLoader instanceof MemClassLoader)) {\n          throw new SolrException(SolrException.ErrorCode.getErrorCode(e.code()),\n              e.getMessage() + \". runtime library loading is not enabled, start Solr with -Denable.runtime.lib=true\",\n              e.getCause());\n        }\n        throw e;\n\n\n      }\n      initInstance(localInst, pluginInfo);\n      if (localInst instanceof SolrCoreAware) {\n        SolrResourceLoader.assertAwareCompatibility(SolrCoreAware.class, localInst);\n        ((SolrCoreAware) localInst).inform(core);\n      }\n      if (localInst instanceof ResourceLoaderAware) {\n        SolrResourceLoader.assertAwareCompatibility(ResourceLoaderAware.class, localInst);\n        try {\n          ((ResourceLoaderAware) localInst).inform(core.getResourceLoader());\n        } catch (IOException e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"error initializing component\", e);\n        }\n      }\n      lazyInst = localInst;  // only assign the volatile until after the plugin is completely ready to use\n      return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"575e66bd4b2349209027f6801184da7fc3cba13f","date":1587609169,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/PluginBag.LazyPluginHolder#createInst().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/PluginBag.LazyPluginHolder#createInst().mjava","sourceNew":"    private synchronized boolean createInst() {\n      if (lazyInst != null) return false;\n      if (log.isInfoEnabled()) {\n        log.info(\"Going to create a new {} with {} \", pluginMeta.getCleanTag(), pluginInfo);\n      }\n      if (resourceLoader instanceof MemClassLoader) {\n        MemClassLoader loader = (MemClassLoader) resourceLoader;\n        loader.loadJars();\n      }\n      Class<T> clazz = (Class<T>) pluginMeta.clazz;\n      T localInst = null;\n      try {\n        localInst = core.createInstance(pluginInfo.className, clazz, pluginMeta.getCleanTag(), null, resourceLoader);\n      } catch (SolrException e) {\n        if (isRuntimeLib && !(resourceLoader instanceof MemClassLoader)) {\n          throw new SolrException(SolrException.ErrorCode.getErrorCode(e.code()),\n              e.getMessage() + \". runtime library loading is not enabled, start Solr with -Denable.runtime.lib=true\",\n              e.getCause());\n        }\n        throw e;\n\n\n      }\n      initInstance(localInst, pluginInfo);\n      if (localInst instanceof SolrCoreAware) {\n        SolrResourceLoader.assertAwareCompatibility(SolrCoreAware.class, localInst);\n        ((SolrCoreAware) localInst).inform(core);\n      }\n      if (localInst instanceof ResourceLoaderAware) {\n        SolrResourceLoader.assertAwareCompatibility(ResourceLoaderAware.class, localInst);\n        try {\n          ((ResourceLoaderAware) localInst).inform(core.getResourceLoader());\n        } catch (IOException e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"error initializing component\", e);\n        }\n      }\n      lazyInst = localInst;  // only assign the volatile until after the plugin is completely ready to use\n      return true;\n    }\n\n","sourceOld":"    private synchronized boolean createInst() {\n      if (lazyInst != null) return false;\n      if (log.isInfoEnabled()) {\n        log.info(\"Going to create a new {} with {} \", pluginMeta.getCleanTag(), pluginInfo.toString());\n      }\n      if (resourceLoader instanceof MemClassLoader) {\n        MemClassLoader loader = (MemClassLoader) resourceLoader;\n        loader.loadJars();\n      }\n      Class<T> clazz = (Class<T>) pluginMeta.clazz;\n      T localInst = null;\n      try {\n        localInst = core.createInstance(pluginInfo.className, clazz, pluginMeta.getCleanTag(), null, resourceLoader);\n      } catch (SolrException e) {\n        if (isRuntimeLib && !(resourceLoader instanceof MemClassLoader)) {\n          throw new SolrException(SolrException.ErrorCode.getErrorCode(e.code()),\n              e.getMessage() + \". runtime library loading is not enabled, start Solr with -Denable.runtime.lib=true\",\n              e.getCause());\n        }\n        throw e;\n\n\n      }\n      initInstance(localInst, pluginInfo);\n      if (localInst instanceof SolrCoreAware) {\n        SolrResourceLoader.assertAwareCompatibility(SolrCoreAware.class, localInst);\n        ((SolrCoreAware) localInst).inform(core);\n      }\n      if (localInst instanceof ResourceLoaderAware) {\n        SolrResourceLoader.assertAwareCompatibility(ResourceLoaderAware.class, localInst);\n        try {\n          ((ResourceLoaderAware) localInst).inform(core.getResourceLoader());\n        } catch (IOException e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"error initializing component\", e);\n        }\n      }\n      lazyInst = localInst;  // only assign the volatile until after the plugin is completely ready to use\n      return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"75237075d8425856bf4bbf52a6be4f9162b8187d","date":1591103291,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/PluginBag.LazyPluginHolder#createInst().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/PluginBag.LazyPluginHolder#createInst().mjava","sourceNew":"    private synchronized boolean createInst() {\n      if (lazyInst != null) return false;\n      if (log.isInfoEnabled()) {\n        log.info(\"Going to create a new {} with {} \", pluginMeta.getCleanTag(), pluginInfo);\n      }\n      if (resourceLoader instanceof MemClassLoader) {\n        MemClassLoader loader = (MemClassLoader) resourceLoader;\n        loader.loadJars();\n      }\n      @SuppressWarnings({\"unchecked\"})\n      Class<T> clazz = (Class<T>) pluginMeta.clazz;\n      T localInst = null;\n      try {\n        localInst = SolrCore.createInstance(pluginInfo.className, clazz, pluginMeta.getCleanTag(), null, resourceLoader);\n      } catch (SolrException e) {\n        if (isRuntimeLib && !(resourceLoader instanceof MemClassLoader)) {\n          throw new SolrException(SolrException.ErrorCode.getErrorCode(e.code()),\n              e.getMessage() + \". runtime library loading is not enabled, start Solr with -Denable.runtime.lib=true\",\n              e.getCause());\n        }\n        throw e;\n\n\n      }\n      initInstance(localInst, pluginInfo);\n      if (localInst instanceof SolrCoreAware) {\n        SolrResourceLoader.assertAwareCompatibility(SolrCoreAware.class, localInst);\n        ((SolrCoreAware) localInst).inform(core);\n      }\n      if (localInst instanceof ResourceLoaderAware) {\n        SolrResourceLoader.assertAwareCompatibility(ResourceLoaderAware.class, localInst);\n        try {\n          ((ResourceLoaderAware) localInst).inform(core.getResourceLoader());\n        } catch (IOException e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"error initializing component\", e);\n        }\n      }\n      lazyInst = localInst;  // only assign the volatile until after the plugin is completely ready to use\n      return true;\n    }\n\n","sourceOld":"    private synchronized boolean createInst() {\n      if (lazyInst != null) return false;\n      if (log.isInfoEnabled()) {\n        log.info(\"Going to create a new {} with {} \", pluginMeta.getCleanTag(), pluginInfo);\n      }\n      if (resourceLoader instanceof MemClassLoader) {\n        MemClassLoader loader = (MemClassLoader) resourceLoader;\n        loader.loadJars();\n      }\n      Class<T> clazz = (Class<T>) pluginMeta.clazz;\n      T localInst = null;\n      try {\n        localInst = core.createInstance(pluginInfo.className, clazz, pluginMeta.getCleanTag(), null, resourceLoader);\n      } catch (SolrException e) {\n        if (isRuntimeLib && !(resourceLoader instanceof MemClassLoader)) {\n          throw new SolrException(SolrException.ErrorCode.getErrorCode(e.code()),\n              e.getMessage() + \". runtime library loading is not enabled, start Solr with -Denable.runtime.lib=true\",\n              e.getCause());\n        }\n        throw e;\n\n\n      }\n      initInstance(localInst, pluginInfo);\n      if (localInst instanceof SolrCoreAware) {\n        SolrResourceLoader.assertAwareCompatibility(SolrCoreAware.class, localInst);\n        ((SolrCoreAware) localInst).inform(core);\n      }\n      if (localInst instanceof ResourceLoaderAware) {\n        SolrResourceLoader.assertAwareCompatibility(ResourceLoaderAware.class, localInst);\n        try {\n          ((ResourceLoaderAware) localInst).inform(core.getResourceLoader());\n        } catch (IOException e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"error initializing component\", e);\n        }\n      }\n      lazyInst = localInst;  // only assign the volatile until after the plugin is completely ready to use\n      return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d16198391f70a4ee52a8c8792c91eb87a30f1d6","date":1596695552,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/PluginBag.LazyPluginHolder#createInst().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/PluginBag.LazyPluginHolder#createInst().mjava","sourceNew":"    private synchronized boolean createInst() {\n      if (lazyInst != null) return false;\n      if (log.isInfoEnabled()) {\n        log.info(\"Going to create a new {} with {} \", pluginMeta.getCleanTag(), pluginInfo);\n      }\n\n      @SuppressWarnings({\"unchecked\"})\n      Class<T> clazz = (Class<T>) pluginMeta.clazz;\n      T localInst = null;\n      try {\n        localInst = SolrCore.createInstance(pluginInfo.className, clazz, pluginMeta.getCleanTag(), null, resourceLoader);\n      } catch (SolrException e) {\n        throw e;\n      }\n      initInstance(localInst, pluginInfo);\n      if (localInst instanceof SolrCoreAware) {\n        SolrResourceLoader.assertAwareCompatibility(SolrCoreAware.class, localInst);\n        ((SolrCoreAware) localInst).inform(core);\n      }\n      if (localInst instanceof ResourceLoaderAware) {\n        SolrResourceLoader.assertAwareCompatibility(ResourceLoaderAware.class, localInst);\n        try {\n          ((ResourceLoaderAware) localInst).inform(core.getResourceLoader());\n        } catch (IOException e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"error initializing component\", e);\n        }\n      }\n      lazyInst = localInst;  // only assign the volatile until after the plugin is completely ready to use\n      return true;\n    }\n\n","sourceOld":"    private synchronized boolean createInst() {\n      if (lazyInst != null) return false;\n      if (log.isInfoEnabled()) {\n        log.info(\"Going to create a new {} with {} \", pluginMeta.getCleanTag(), pluginInfo);\n      }\n      if (resourceLoader instanceof MemClassLoader) {\n        MemClassLoader loader = (MemClassLoader) resourceLoader;\n        loader.loadJars();\n      }\n      @SuppressWarnings({\"unchecked\"})\n      Class<T> clazz = (Class<T>) pluginMeta.clazz;\n      T localInst = null;\n      try {\n        localInst = SolrCore.createInstance(pluginInfo.className, clazz, pluginMeta.getCleanTag(), null, resourceLoader);\n      } catch (SolrException e) {\n        if (isRuntimeLib && !(resourceLoader instanceof MemClassLoader)) {\n          throw new SolrException(SolrException.ErrorCode.getErrorCode(e.code()),\n              e.getMessage() + \". runtime library loading is not enabled, start Solr with -Denable.runtime.lib=true\",\n              e.getCause());\n        }\n        throw e;\n\n\n      }\n      initInstance(localInst, pluginInfo);\n      if (localInst instanceof SolrCoreAware) {\n        SolrResourceLoader.assertAwareCompatibility(SolrCoreAware.class, localInst);\n        ((SolrCoreAware) localInst).inform(core);\n      }\n      if (localInst instanceof ResourceLoaderAware) {\n        SolrResourceLoader.assertAwareCompatibility(ResourceLoaderAware.class, localInst);\n        try {\n          ((ResourceLoaderAware) localInst).inform(core.getResourceLoader());\n        } catch (IOException e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"error initializing component\", e);\n        }\n      }\n      lazyInst = localInst;  // only assign the volatile until after the plugin is completely ready to use\n      return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"75237075d8425856bf4bbf52a6be4f9162b8187d":["575e66bd4b2349209027f6801184da7fc3cba13f"],"39dabfd19b49b248d63cedbb01ea144ee5ad071c":["d52ea0bca71d3b5f5fd37c12585ccd9309f8ea74"],"d52ea0bca71d3b5f5fd37c12585ccd9309f8ea74":["28288370235ed02234a64753cdbf0c6ec096304a"],"575e66bd4b2349209027f6801184da7fc3cba13f":["140be51d03394488536f4aacedace29f9b318347"],"c44cc06c26e456fe9c215072b79fce30babe3975":["39dabfd19b49b248d63cedbb01ea144ee5ad071c"],"ae2f5be890d26585d438eba0b9cc7d3c0a9775be":["55a86e1831066267af63feede06bff6aa3141a40"],"28288370235ed02234a64753cdbf0c6ec096304a":["ae2f5be890d26585d438eba0b9cc7d3c0a9775be","ed1b270b5ea6e1859f4b77233891fbb991898dba"],"ed1b270b5ea6e1859f4b77233891fbb991898dba":["ae2f5be890d26585d438eba0b9cc7d3c0a9775be"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ae2f5be890d26585d438eba0b9cc7d3c0a9775be"],"140be51d03394488536f4aacedace29f9b318347":["c44cc06c26e456fe9c215072b79fce30babe3975"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0d16198391f70a4ee52a8c8792c91eb87a30f1d6":["75237075d8425856bf4bbf52a6be4f9162b8187d"],"69cad0546debf9ce9d44e309ecfa26760fecd5d8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["ae2f5be890d26585d438eba0b9cc7d3c0a9775be","ed1b270b5ea6e1859f4b77233891fbb991898dba"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0d16198391f70a4ee52a8c8792c91eb87a30f1d6"],"55a86e1831066267af63feede06bff6aa3141a40":["69cad0546debf9ce9d44e309ecfa26760fecd5d8"],"b0b597c65628ca9e73913a07e81691f8229bae35":["39dabfd19b49b248d63cedbb01ea144ee5ad071c","c44cc06c26e456fe9c215072b79fce30babe3975"]},"commit2Childs":{"75237075d8425856bf4bbf52a6be4f9162b8187d":["0d16198391f70a4ee52a8c8792c91eb87a30f1d6"],"39dabfd19b49b248d63cedbb01ea144ee5ad071c":["c44cc06c26e456fe9c215072b79fce30babe3975","b0b597c65628ca9e73913a07e81691f8229bae35"],"d52ea0bca71d3b5f5fd37c12585ccd9309f8ea74":["39dabfd19b49b248d63cedbb01ea144ee5ad071c"],"575e66bd4b2349209027f6801184da7fc3cba13f":["75237075d8425856bf4bbf52a6be4f9162b8187d"],"c44cc06c26e456fe9c215072b79fce30babe3975":["140be51d03394488536f4aacedace29f9b318347","b0b597c65628ca9e73913a07e81691f8229bae35"],"28288370235ed02234a64753cdbf0c6ec096304a":["d52ea0bca71d3b5f5fd37c12585ccd9309f8ea74"],"ae2f5be890d26585d438eba0b9cc7d3c0a9775be":["28288370235ed02234a64753cdbf0c6ec096304a","ed1b270b5ea6e1859f4b77233891fbb991898dba","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"ed1b270b5ea6e1859f4b77233891fbb991898dba":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"140be51d03394488536f4aacedace29f9b318347":["575e66bd4b2349209027f6801184da7fc3cba13f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","69cad0546debf9ce9d44e309ecfa26760fecd5d8"],"0d16198391f70a4ee52a8c8792c91eb87a30f1d6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"69cad0546debf9ce9d44e309ecfa26760fecd5d8":["55a86e1831066267af63feede06bff6aa3141a40"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":[],"55a86e1831066267af63feede06bff6aa3141a40":["ae2f5be890d26585d438eba0b9cc7d3c0a9775be"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}