{"path":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/analyzing/TestFoldingFilter[TestAnalyzingQueryParser]#incrementToken().mjava","commits":[{"id":"967b81abdda07e0975b376eff34820e8adb6270d","date":1272916926,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/analyzing/TestFoldingFilter[TestAnalyzingQueryParser]#incrementToken().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (input.incrementToken()) {\n      char term[] = termAtt.buffer();\n      for (int i = 0; i < term.length; i++)\n        switch(term[i]) {\n          case 'ü':\n          case 'Ü':\n            term[i] = 'u'; \n            break;\n          case 'ö': \n            term[i] = 'o'; \n            break;\n          case 'é': \n            term[i] = 'e'; \n            break;\n          case 'ï': \n            term[i] = 'i'; \n            break;\n        }\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7f8e68717c68517265937c911e1ce9f25750247","date":1274071103,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/analyzing/TestFoldingFilter[TestAnalyzingQueryParser]#incrementToken().mjava","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/analyzing/TestFoldingFilter[TestAnalyzingQueryParser]#incrementToken().mjava","sourceNew":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (input.incrementToken()) {\n      char term[] = termAtt.buffer();\n      for (int i = 0; i < term.length; i++)\n        switch(term[i]) {\n          case 'ü':\n            term[i] = 'u'; \n            break;\n          case 'ö': \n            term[i] = 'o'; \n            break;\n          case 'é': \n            term[i] = 'e'; \n            break;\n          case 'ï': \n            term[i] = 'i'; \n            break;\n        }\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","sourceOld":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (input.incrementToken()) {\n      char term[] = termAtt.buffer();\n      for (int i = 0; i < term.length; i++)\n        switch(term[i]) {\n          case 'ü':\n          case 'Ü':\n            term[i] = 'u'; \n            break;\n          case 'ö': \n            term[i] = 'o'; \n            break;\n          case 'é': \n            term[i] = 'e'; \n            break;\n          case 'ï': \n            term[i] = 'i'; \n            break;\n        }\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a53a291ad9b1cc050d846b68758c061a55d52734","date":1310437344,"type":5,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queryparser/src/test/org/apache/lucene/queryparser/analyzing/TestFoldingFilter[TestAnalyzingQueryParser]#incrementToken().mjava","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/analyzing/TestFoldingFilter[TestAnalyzingQueryParser]#incrementToken().mjava","sourceNew":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (input.incrementToken()) {\n      char term[] = termAtt.buffer();\n      for (int i = 0; i < term.length; i++)\n        switch(term[i]) {\n          case 'ü':\n            term[i] = 'u'; \n            break;\n          case 'ö': \n            term[i] = 'o'; \n            break;\n          case 'é': \n            term[i] = 'e'; \n            break;\n          case 'ï': \n            term[i] = 'i'; \n            break;\n        }\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","sourceOld":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (input.incrementToken()) {\n      char term[] = termAtt.buffer();\n      for (int i = 0; i < term.length; i++)\n        switch(term[i]) {\n          case 'ü':\n            term[i] = 'u'; \n            break;\n          case 'ö': \n            term[i] = 'o'; \n            break;\n          case 'é': \n            term[i] = 'e'; \n            break;\n          case 'ï': \n            term[i] = 'i'; \n            break;\n        }\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c7f8e68717c68517265937c911e1ce9f25750247":["967b81abdda07e0975b376eff34820e8adb6270d"],"a53a291ad9b1cc050d846b68758c061a55d52734":["c7f8e68717c68517265937c911e1ce9f25750247"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a53a291ad9b1cc050d846b68758c061a55d52734"],"967b81abdda07e0975b376eff34820e8adb6270d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["967b81abdda07e0975b376eff34820e8adb6270d"],"c7f8e68717c68517265937c911e1ce9f25750247":["a53a291ad9b1cc050d846b68758c061a55d52734"],"a53a291ad9b1cc050d846b68758c061a55d52734":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"967b81abdda07e0975b376eff34820e8adb6270d":["c7f8e68717c68517265937c911e1ce9f25750247"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}