{"path":"solr/core/src/java/org/apache/solr/cloud/api/collections/TimeRoutedAlias#findCandidateGivenValue(AddUpdateCommand).mjava","commits":[{"id":"1eebf1b080530bdd7572c4927fb2bb52334b7a86","date":1563199033,"type":0,"author":"Gus Heck","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/TimeRoutedAlias#findCandidateGivenValue(AddUpdateCommand).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Given the route key, finds the correct collection and an indication of any collection that needs to be created.\n   * Future docs will potentially cause creation of a collection that does not yet exist. This method presumes that the\n   * doc time stamp has already been checked to not exceed maxFutureMs\n   *\n   * @throws SolrException if the doc is too old to be stored in the TRA\n   */\n  @Override\n  public CandidateCollection findCandidateGivenValue(AddUpdateCommand cmd) {\n    Object value = cmd.getSolrInputDocument().getFieldValue(getRouteField());\n    ZkStateReader zkStateReader = cmd.getReq().getCore().getCoreContainer().getZkController().zkStateReader;\n    String printableId = cmd.getPrintableId();\n    updateParsedCollectionAliases(zkStateReader, true);\n\n    final Instant docTimestamp = parseRouteKey(value);\n\n    // reparse explicitly such that if we are a dimension in a DRA, the list gets culled by our context\n    // This does not normally happen with the above updateParsedCollectionAliases, because at that point the aliases\n    // should be up to date and updateParsedCollectionAliases will short circuit\n    this.parsedCollectionsDesc = parseCollections(zkStateReader.getAliases());\n    CandidateCollection next1 = calcCandidateCollection(docTimestamp);\n    if (next1 != null) return next1;\n\n    throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n        \"Doc \" + printableId + \" couldn't be routed with \" + getRouteField() + \"=\" + docTimestamp);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1eebf1b080530bdd7572c4927fb2bb52334b7a86":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1eebf1b080530bdd7572c4927fb2bb52334b7a86"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1eebf1b080530bdd7572c4927fb2bb52334b7a86"],"1eebf1b080530bdd7572c4927fb2bb52334b7a86":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}