{"path":"src/test/org/apache/lucene/search/CheckHits#checkHits(Query,String,Searcher,int[]).mjava","commits":[{"id":"56b47d7ef702892600c875ce48ffbdd5701bb3f3","date":1115407780,"type":1,"author":"Daniel Naber","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/CheckHits#checkHits(Query,String,Searcher,int[]).mjava","pathOld":"src/test/org/apache/lucene/search/CheckHits#checkHits(Query,String,Searcher,int[],TestCase).mjava","sourceNew":"  /** Tests that a query has expected document number results.\n   */\n  public static void checkHits(\n        Query query,\n        String defaultFieldName,\n        Searcher searcher,\n        int[] results)\n          throws IOException {\n    Hits hits = searcher.search(query);\n\n    Set correct = new TreeSet();\n    for (int i = 0; i < results.length; i++) {\n      correct.add(new Integer(results[i]));\n    }\n\n    Set actual = new TreeSet();\n    for (int i = 0; i < hits.length(); i++) {\n      actual.add(new Integer(hits.id(i)));\n    }\n\n    TestCase.assertEquals(query.toString(defaultFieldName), correct, actual);\n  }\n\n","sourceOld":"  /** Tests that a query has expected document number results.\n   */\n  public static void checkHits(\n        Query query,\n        String defaultFieldName,\n        Searcher searcher,\n        int[] results,\n        TestCase testCase)\n          throws IOException {\n    Hits hits = searcher.search(query);\n\n    Set correct = new TreeSet();\n    for (int i = 0; i < results.length; i++) {\n      correct.add(new Integer(results[i]));\n    }\n\n    Set actual = new TreeSet();\n    for (int i = 0; i < hits.length(); i++) {\n      actual.add(new Integer(hits.id(i)));\n    }\n\n    TestCase.assertEquals(query.toString(defaultFieldName), correct, actual);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a53ba34cf04e8d72c7d4c4bd297d32206a25c05","date":1150765993,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/CheckHits#checkHits(Query,String,Searcher,int[]).mjava","pathOld":"src/test/org/apache/lucene/search/CheckHits#checkHits(Query,String,Searcher,int[]).mjava","sourceNew":"  /**\n   * Tests that a query matches the an expected set of documents\n   *\n   * @param query the query to test\n   * @param searcher the searcher to test the query against\n   * @param defaultFieldName used for displaing the query in assertion messages\n   * @param results a list of documentIds that must match the query\n   */\n  public static void checkHits(\n        Query query,\n        String defaultFieldName,\n        Searcher searcher,\n        int[] results)\n          throws IOException {\n    Hits hits = searcher.search(query);\n\n    Set correct = new TreeSet();\n    for (int i = 0; i < results.length; i++) {\n      correct.add(new Integer(results[i]));\n    }\n\n    Set actual = new TreeSet();\n    for (int i = 0; i < hits.length(); i++) {\n      actual.add(new Integer(hits.id(i)));\n    }\n\n    TestCase.assertEquals(query.toString(defaultFieldName), correct, actual);\n  }\n\n","sourceOld":"  /** Tests that a query has expected document number results.\n   */\n  public static void checkHits(\n        Query query,\n        String defaultFieldName,\n        Searcher searcher,\n        int[] results)\n          throws IOException {\n    Hits hits = searcher.search(query);\n\n    Set correct = new TreeSet();\n    for (int i = 0; i < results.length; i++) {\n      correct.add(new Integer(results[i]));\n    }\n\n    Set actual = new TreeSet();\n    for (int i = 0; i < hits.length(); i++) {\n      actual.add(new Integer(hits.id(i)));\n    }\n\n    TestCase.assertEquals(query.toString(defaultFieldName), correct, actual);\n  }\n\n","bugFix":null,"bugIntro":["f4e4ac061c7cb668bd0651cb565ebbad1157cadc"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f4e4ac061c7cb668bd0651cb565ebbad1157cadc","date":1151347127,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/CheckHits#checkHits(Query,String,Searcher,int[]).mjava","pathOld":"src/test/org/apache/lucene/search/CheckHits#checkHits(Query,String,Searcher,int[]).mjava","sourceNew":"  /**\n   * Tests that a query matches the an expected set of documents using Hits.\n   *\n   * <p>\n   * Note that when using the Hits API, documents will only be returned\n   * if they have a positive normalized score.\n   * </p>\n   * @param query the query to test\n   * @param searcher the searcher to test the query against\n   * @param defaultFieldName used for displaing the query in assertion messages\n   * @param results a list of documentIds that must match the query\n   * @see Searcher#search(Query)\n   * @see #checkHitCollector\n   */\n  public static void checkHits(\n        Query query,\n        String defaultFieldName,\n        Searcher searcher,\n        int[] results)\n          throws IOException {\n    Hits hits = searcher.search(query);\n\n    Set correct = new TreeSet();\n    for (int i = 0; i < results.length; i++) {\n      correct.add(new Integer(results[i]));\n    }\n\n    Set actual = new TreeSet();\n    for (int i = 0; i < hits.length(); i++) {\n      actual.add(new Integer(hits.id(i)));\n    }\n\n    TestCase.assertEquals(query.toString(defaultFieldName), correct, actual);\n  }\n\n","sourceOld":"  /**\n   * Tests that a query matches the an expected set of documents\n   *\n   * @param query the query to test\n   * @param searcher the searcher to test the query against\n   * @param defaultFieldName used for displaing the query in assertion messages\n   * @param results a list of documentIds that must match the query\n   */\n  public static void checkHits(\n        Query query,\n        String defaultFieldName,\n        Searcher searcher,\n        int[] results)\n          throws IOException {\n    Hits hits = searcher.search(query);\n\n    Set correct = new TreeSet();\n    for (int i = 0; i < results.length; i++) {\n      correct.add(new Integer(results[i]));\n    }\n\n    Set actual = new TreeSet();\n    for (int i = 0; i < hits.length(); i++) {\n      actual.add(new Integer(hits.id(i)));\n    }\n\n    TestCase.assertEquals(query.toString(defaultFieldName), correct, actual);\n  }\n\n","bugFix":["7a53ba34cf04e8d72c7d4c4bd297d32206a25c05"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aabae793f43472efdf1dcdaae4e01e28cfc23ccd","date":1161750034,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/CheckHits#checkHits(Query,String,Searcher,int[]).mjava","pathOld":"src/test/org/apache/lucene/search/CheckHits#checkHits(Query,String,Searcher,int[]).mjava","sourceNew":"  /**\n   * Tests that a query matches the an expected set of documents using Hits.\n   *\n   * <p>\n   * Note that when using the Hits API, documents will only be returned\n   * if they have a positive normalized score.\n   * </p>\n   * @param query the query to test\n   * @param searcher the searcher to test the query against\n   * @param defaultFieldName used for displaing the query in assertion messages\n   * @param results a list of documentIds that must match the query\n   * @see Searcher#search(Query)\n   * @see #checkHitCollector\n   */\n  public static void checkHits(\n        Query query,\n        String defaultFieldName,\n        Searcher searcher,\n        int[] results)\n          throws IOException {\n    if (searcher instanceof IndexSearcher) {\n      QueryUtils.check(query,(IndexSearcher)searcher);\n    }\n\n    Hits hits = searcher.search(query);\n\n    Set correct = new TreeSet();\n    for (int i = 0; i < results.length; i++) {\n      correct.add(new Integer(results[i]));\n    }\n\n    Set actual = new TreeSet();\n    for (int i = 0; i < hits.length(); i++) {\n      actual.add(new Integer(hits.id(i)));\n    }\n\n    TestCase.assertEquals(query.toString(defaultFieldName), correct, actual);\n\n    QueryUtils.check(query,searcher);\n  }\n\n","sourceOld":"  /**\n   * Tests that a query matches the an expected set of documents using Hits.\n   *\n   * <p>\n   * Note that when using the Hits API, documents will only be returned\n   * if they have a positive normalized score.\n   * </p>\n   * @param query the query to test\n   * @param searcher the searcher to test the query against\n   * @param defaultFieldName used for displaing the query in assertion messages\n   * @param results a list of documentIds that must match the query\n   * @see Searcher#search(Query)\n   * @see #checkHitCollector\n   */\n  public static void checkHits(\n        Query query,\n        String defaultFieldName,\n        Searcher searcher,\n        int[] results)\n          throws IOException {\n    Hits hits = searcher.search(query);\n\n    Set correct = new TreeSet();\n    for (int i = 0; i < results.length; i++) {\n      correct.add(new Integer(results[i]));\n    }\n\n    Set actual = new TreeSet();\n    for (int i = 0; i < hits.length(); i++) {\n      actual.add(new Integer(hits.id(i)));\n    }\n\n    TestCase.assertEquals(query.toString(defaultFieldName), correct, actual);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5af07783dbc171e26a694c4f7d735e30c2769faa","date":1211569075,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/CheckHits#checkHits(Query,String,Searcher,int[]).mjava","pathOld":"src/test/org/apache/lucene/search/CheckHits#checkHits(Query,String,Searcher,int[]).mjava","sourceNew":"  /**\n   * Tests that a query matches the an expected set of documents using Hits.\n   *\n   * <p>\n   * Note that when using the Hits API, documents will only be returned\n   * if they have a positive normalized score.\n   * </p>\n   * @param query the query to test\n   * @param searcher the searcher to test the query against\n   * @param defaultFieldName used for displaing the query in assertion messages\n   * @param results a list of documentIds that must match the query\n   * @see Searcher#search(Query)\n   * @see #checkHitCollector\n   */\n  public static void checkHits(\n        Query query,\n        String defaultFieldName,\n        Searcher searcher,\n        int[] results)\n          throws IOException {\n    if (searcher instanceof IndexSearcher) {\n      QueryUtils.check(query,(IndexSearcher)searcher);\n    }\n\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n\n    Set correct = new TreeSet();\n    for (int i = 0; i < results.length; i++) {\n      correct.add(new Integer(results[i]));\n    }\n\n    Set actual = new TreeSet();\n    for (int i = 0; i < hits.length; i++) {\n      actual.add(new Integer(hits[i].doc));\n    }\n\n    TestCase.assertEquals(query.toString(defaultFieldName), correct, actual);\n\n    QueryUtils.check(query,searcher);\n  }\n\n","sourceOld":"  /**\n   * Tests that a query matches the an expected set of documents using Hits.\n   *\n   * <p>\n   * Note that when using the Hits API, documents will only be returned\n   * if they have a positive normalized score.\n   * </p>\n   * @param query the query to test\n   * @param searcher the searcher to test the query against\n   * @param defaultFieldName used for displaing the query in assertion messages\n   * @param results a list of documentIds that must match the query\n   * @see Searcher#search(Query)\n   * @see #checkHitCollector\n   */\n  public static void checkHits(\n        Query query,\n        String defaultFieldName,\n        Searcher searcher,\n        int[] results)\n          throws IOException {\n    if (searcher instanceof IndexSearcher) {\n      QueryUtils.check(query,(IndexSearcher)searcher);\n    }\n\n    Hits hits = searcher.search(query);\n\n    Set correct = new TreeSet();\n    for (int i = 0; i < results.length; i++) {\n      correct.add(new Integer(results[i]));\n    }\n\n    Set actual = new TreeSet();\n    for (int i = 0; i < hits.length(); i++) {\n      actual.add(new Integer(hits.id(i)));\n    }\n\n    TestCase.assertEquals(query.toString(defaultFieldName), correct, actual);\n\n    QueryUtils.check(query,searcher);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"052fac7830290bd38a04cddee1a121ee07656b56","date":1245780702,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/CheckHits#checkHits(Query,String,Searcher,int[]).mjava","pathOld":"src/test/org/apache/lucene/search/CheckHits#checkHits(Query,String,Searcher,int[]).mjava","sourceNew":"  /**\n   * Tests that a query matches the an expected set of documents using Hits.\n   *\n   * <p>\n   * Note that when using the Hits API, documents will only be returned\n   * if they have a positive normalized score.\n   * </p>\n   * @param query the query to test\n   * @param searcher the searcher to test the query against\n   * @param defaultFieldName used for displaing the query in assertion messages\n   * @param results a list of documentIds that must match the query\n   * @see Searcher#search(Query)\n   * @see #checkHitCollector\n   */\n  public static void checkHits(\n        Query query,\n        String defaultFieldName,\n        Searcher searcher,\n        int[] results)\n          throws IOException {\n    if (searcher instanceof IndexSearcher) {\n      QueryUtils.check(query,searcher);\n    }\n\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n\n    Set correct = new TreeSet();\n    for (int i = 0; i < results.length; i++) {\n      correct.add(new Integer(results[i]));\n    }\n\n    Set actual = new TreeSet();\n    for (int i = 0; i < hits.length; i++) {\n      actual.add(new Integer(hits[i].doc));\n    }\n\n    Assert.assertEquals(query.toString(defaultFieldName), correct, actual);\n\n    QueryUtils.check(query,searcher);\n  }\n\n","sourceOld":"  /**\n   * Tests that a query matches the an expected set of documents using Hits.\n   *\n   * <p>\n   * Note that when using the Hits API, documents will only be returned\n   * if they have a positive normalized score.\n   * </p>\n   * @param query the query to test\n   * @param searcher the searcher to test the query against\n   * @param defaultFieldName used for displaing the query in assertion messages\n   * @param results a list of documentIds that must match the query\n   * @see Searcher#search(Query)\n   * @see #checkHitCollector\n   */\n  public static void checkHits(\n        Query query,\n        String defaultFieldName,\n        Searcher searcher,\n        int[] results)\n          throws IOException {\n    if (searcher instanceof IndexSearcher) {\n      QueryUtils.check(query,(IndexSearcher)searcher);\n    }\n\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n\n    Set correct = new TreeSet();\n    for (int i = 0; i < results.length; i++) {\n      correct.add(new Integer(results[i]));\n    }\n\n    Set actual = new TreeSet();\n    for (int i = 0; i < hits.length; i++) {\n      actual.add(new Integer(hits[i].doc));\n    }\n\n    TestCase.assertEquals(query.toString(defaultFieldName), correct, actual);\n\n    QueryUtils.check(query,searcher);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6bcde5e3f23911110baa101ed062b544162825b5","date":1254521804,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/CheckHits#checkHits(Query,String,Searcher,int[]).mjava","pathOld":"src/test/org/apache/lucene/search/CheckHits#checkHits(Query,String,Searcher,int[]).mjava","sourceNew":"  /**\n   * Tests that a query matches the an expected set of documents using Hits.\n   *\n   * <p>\n   * Note that when using the Hits API, documents will only be returned\n   * if they have a positive normalized score.\n   * </p>\n   * @param query the query to test\n   * @param searcher the searcher to test the query against\n   * @param defaultFieldName used for displaing the query in assertion messages\n   * @param results a list of documentIds that must match the query\n   * @see Searcher#search(Query)\n   * @see #checkHitCollector\n   */\n  public static void checkHits(\n        Query query,\n        String defaultFieldName,\n        Searcher searcher,\n        int[] results)\n          throws IOException {\n    if (searcher instanceof IndexSearcher) {\n      QueryUtils.check(query,searcher);\n    }\n\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n\n    Set correct = new TreeSet();\n    for (int i = 0; i < results.length; i++) {\n      correct.add(Integer.valueOf(results[i]));\n    }\n\n    Set actual = new TreeSet();\n    for (int i = 0; i < hits.length; i++) {\n      actual.add(Integer.valueOf(hits[i].doc));\n    }\n\n    Assert.assertEquals(query.toString(defaultFieldName), correct, actual);\n\n    QueryUtils.check(query,searcher);\n  }\n\n","sourceOld":"  /**\n   * Tests that a query matches the an expected set of documents using Hits.\n   *\n   * <p>\n   * Note that when using the Hits API, documents will only be returned\n   * if they have a positive normalized score.\n   * </p>\n   * @param query the query to test\n   * @param searcher the searcher to test the query against\n   * @param defaultFieldName used for displaing the query in assertion messages\n   * @param results a list of documentIds that must match the query\n   * @see Searcher#search(Query)\n   * @see #checkHitCollector\n   */\n  public static void checkHits(\n        Query query,\n        String defaultFieldName,\n        Searcher searcher,\n        int[] results)\n          throws IOException {\n    if (searcher instanceof IndexSearcher) {\n      QueryUtils.check(query,searcher);\n    }\n\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n\n    Set correct = new TreeSet();\n    for (int i = 0; i < results.length; i++) {\n      correct.add(new Integer(results[i]));\n    }\n\n    Set actual = new TreeSet();\n    for (int i = 0; i < hits.length; i++) {\n      actual.add(new Integer(hits[i].doc));\n    }\n\n    Assert.assertEquals(query.toString(defaultFieldName), correct, actual);\n\n    QueryUtils.check(query,searcher);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90cb6b3f4e5652555b614adc90204287fbebd27c","date":1259494272,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/CheckHits#checkHits(Query,String,Searcher,int[]).mjava","pathOld":"src/test/org/apache/lucene/search/CheckHits#checkHits(Query,String,Searcher,int[]).mjava","sourceNew":"  /**\n   * Tests that a query matches the an expected set of documents using Hits.\n   *\n   * <p>\n   * Note that when using the Hits API, documents will only be returned\n   * if they have a positive normalized score.\n   * </p>\n   * @param query the query to test\n   * @param searcher the searcher to test the query against\n   * @param defaultFieldName used for displaing the query in assertion messages\n   * @param results a list of documentIds that must match the query\n   * @see Searcher#search(Query)\n   * @see #checkHitCollector\n   */\n  public static void checkHits(\n        Query query,\n        String defaultFieldName,\n        Searcher searcher,\n        int[] results)\n          throws IOException {\n\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n\n    Set correct = new TreeSet();\n    for (int i = 0; i < results.length; i++) {\n      correct.add(Integer.valueOf(results[i]));\n    }\n\n    Set actual = new TreeSet();\n    for (int i = 0; i < hits.length; i++) {\n      actual.add(Integer.valueOf(hits[i].doc));\n    }\n\n    Assert.assertEquals(query.toString(defaultFieldName), correct, actual);\n\n    QueryUtils.check(query,searcher);\n  }\n\n","sourceOld":"  /**\n   * Tests that a query matches the an expected set of documents using Hits.\n   *\n   * <p>\n   * Note that when using the Hits API, documents will only be returned\n   * if they have a positive normalized score.\n   * </p>\n   * @param query the query to test\n   * @param searcher the searcher to test the query against\n   * @param defaultFieldName used for displaing the query in assertion messages\n   * @param results a list of documentIds that must match the query\n   * @see Searcher#search(Query)\n   * @see #checkHitCollector\n   */\n  public static void checkHits(\n        Query query,\n        String defaultFieldName,\n        Searcher searcher,\n        int[] results)\n          throws IOException {\n    if (searcher instanceof IndexSearcher) {\n      QueryUtils.check(query,searcher);\n    }\n\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n\n    Set correct = new TreeSet();\n    for (int i = 0; i < results.length; i++) {\n      correct.add(Integer.valueOf(results[i]));\n    }\n\n    Set actual = new TreeSet();\n    for (int i = 0; i < hits.length; i++) {\n      actual.add(Integer.valueOf(hits[i].doc));\n    }\n\n    Assert.assertEquals(query.toString(defaultFieldName), correct, actual);\n\n    QueryUtils.check(query,searcher);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e450c7d50c2fc84c963d0d7ade9d3217d868064d","date":1259932067,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/CheckHits#checkHits(Query,String,Searcher,int[]).mjava","pathOld":"src/test/org/apache/lucene/search/CheckHits#checkHits(Query,String,Searcher,int[]).mjava","sourceNew":"  /**\n   * Tests that a query matches the an expected set of documents using Hits.\n   *\n   * <p>\n   * Note that when using the Hits API, documents will only be returned\n   * if they have a positive normalized score.\n   * </p>\n   * @param query the query to test\n   * @param searcher the searcher to test the query against\n   * @param defaultFieldName used for displaing the query in assertion messages\n   * @param results a list of documentIds that must match the query\n   * @see Searcher#search(Query)\n   * @see #checkHitCollector\n   */\n  public static void checkHits(\n        Query query,\n        String defaultFieldName,\n        Searcher searcher,\n        int[] results)\n          throws IOException {\n\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n\n    Set<Integer> correct = new TreeSet<Integer>();\n    for (int i = 0; i < results.length; i++) {\n      correct.add(Integer.valueOf(results[i]));\n    }\n\n    Set<Integer> actual = new TreeSet<Integer>();\n    for (int i = 0; i < hits.length; i++) {\n      actual.add(Integer.valueOf(hits[i].doc));\n    }\n\n    Assert.assertEquals(query.toString(defaultFieldName), correct, actual);\n\n    QueryUtils.check(query,searcher);\n  }\n\n","sourceOld":"  /**\n   * Tests that a query matches the an expected set of documents using Hits.\n   *\n   * <p>\n   * Note that when using the Hits API, documents will only be returned\n   * if they have a positive normalized score.\n   * </p>\n   * @param query the query to test\n   * @param searcher the searcher to test the query against\n   * @param defaultFieldName used for displaing the query in assertion messages\n   * @param results a list of documentIds that must match the query\n   * @see Searcher#search(Query)\n   * @see #checkHitCollector\n   */\n  public static void checkHits(\n        Query query,\n        String defaultFieldName,\n        Searcher searcher,\n        int[] results)\n          throws IOException {\n\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n\n    Set correct = new TreeSet();\n    for (int i = 0; i < results.length; i++) {\n      correct.add(Integer.valueOf(results[i]));\n    }\n\n    Set actual = new TreeSet();\n    for (int i = 0; i < hits.length; i++) {\n      actual.add(Integer.valueOf(hits[i].doc));\n    }\n\n    Assert.assertEquals(query.toString(defaultFieldName), correct, actual);\n\n    QueryUtils.check(query,searcher);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a","date":1267298041,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/CheckHits#checkHits(Query,String,Searcher,int[]).mjava","pathOld":"src/test/org/apache/lucene/search/CheckHits#checkHits(Query,String,Searcher,int[]).mjava","sourceNew":"  /**\n   * Tests that a query matches the an expected set of documents using Hits.\n   *\n   * <p>\n   * Note that when using the Hits API, documents will only be returned\n   * if they have a positive normalized score.\n   * </p>\n   * @param query the query to test\n   * @param searcher the searcher to test the query against\n   * @param defaultFieldName used for displaing the query in assertion messages\n   * @param results a list of documentIds that must match the query\n   * @see Searcher#search(Query, int)\n   * @see #checkHitCollector\n   */\n  public static void checkHits(\n        Query query,\n        String defaultFieldName,\n        Searcher searcher,\n        int[] results)\n          throws IOException {\n\n    ScoreDoc[] hits = searcher.search(query, 1000).scoreDocs;\n\n    Set<Integer> correct = new TreeSet<Integer>();\n    for (int i = 0; i < results.length; i++) {\n      correct.add(Integer.valueOf(results[i]));\n    }\n\n    Set<Integer> actual = new TreeSet<Integer>();\n    for (int i = 0; i < hits.length; i++) {\n      actual.add(Integer.valueOf(hits[i].doc));\n    }\n\n    Assert.assertEquals(query.toString(defaultFieldName), correct, actual);\n\n    QueryUtils.check(query,searcher);\n  }\n\n","sourceOld":"  /**\n   * Tests that a query matches the an expected set of documents using Hits.\n   *\n   * <p>\n   * Note that when using the Hits API, documents will only be returned\n   * if they have a positive normalized score.\n   * </p>\n   * @param query the query to test\n   * @param searcher the searcher to test the query against\n   * @param defaultFieldName used for displaing the query in assertion messages\n   * @param results a list of documentIds that must match the query\n   * @see Searcher#search(Query)\n   * @see #checkHitCollector\n   */\n  public static void checkHits(\n        Query query,\n        String defaultFieldName,\n        Searcher searcher,\n        int[] results)\n          throws IOException {\n\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n\n    Set<Integer> correct = new TreeSet<Integer>();\n    for (int i = 0; i < results.length; i++) {\n      correct.add(Integer.valueOf(results[i]));\n    }\n\n    Set<Integer> actual = new TreeSet<Integer>();\n    for (int i = 0; i < hits.length; i++) {\n      actual.add(Integer.valueOf(hits[i].doc));\n    }\n\n    Assert.assertEquals(query.toString(defaultFieldName), correct, actual);\n\n    QueryUtils.check(query,searcher);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/CheckHits#checkHits(Query,String,Searcher,int[]).mjava","pathOld":"src/test/org/apache/lucene/search/CheckHits#checkHits(Query,String,Searcher,int[]).mjava","sourceNew":"  /**\n   * Tests that a query matches the an expected set of documents using Hits.\n   *\n   * <p>\n   * Note that when using the Hits API, documents will only be returned\n   * if they have a positive normalized score.\n   * </p>\n   * @param query the query to test\n   * @param searcher the searcher to test the query against\n   * @param defaultFieldName used for displaing the query in assertion messages\n   * @param results a list of documentIds that must match the query\n   * @see Searcher#search(Query, int)\n   * @see #checkHitCollector\n   */\n  public static void checkHits(\n        Query query,\n        String defaultFieldName,\n        Searcher searcher,\n        int[] results)\n          throws IOException {\n\n    ScoreDoc[] hits = searcher.search(query, 1000).scoreDocs;\n\n    Set<Integer> correct = new TreeSet<Integer>();\n    for (int i = 0; i < results.length; i++) {\n      correct.add(Integer.valueOf(results[i]));\n    }\n\n    Set<Integer> actual = new TreeSet<Integer>();\n    for (int i = 0; i < hits.length; i++) {\n      actual.add(Integer.valueOf(hits[i].doc));\n    }\n\n    Assert.assertEquals(query.toString(defaultFieldName), correct, actual);\n\n    QueryUtils.check(query,searcher);\n  }\n\n","sourceOld":"  /**\n   * Tests that a query matches the an expected set of documents using Hits.\n   *\n   * <p>\n   * Note that when using the Hits API, documents will only be returned\n   * if they have a positive normalized score.\n   * </p>\n   * @param query the query to test\n   * @param searcher the searcher to test the query against\n   * @param defaultFieldName used for displaing the query in assertion messages\n   * @param results a list of documentIds that must match the query\n   * @see Searcher#search(Query, int)\n   * @see #checkHitCollector\n   */\n  public static void checkHits(\n        Query query,\n        String defaultFieldName,\n        Searcher searcher,\n        int[] results)\n          throws IOException {\n\n    ScoreDoc[] hits = searcher.search(query, 1000).scoreDocs;\n\n    Set<Integer> correct = new TreeSet<Integer>();\n    for (int i = 0; i < results.length; i++) {\n      correct.add(Integer.valueOf(results[i]));\n    }\n\n    Set<Integer> actual = new TreeSet<Integer>();\n    for (int i = 0; i < hits.length; i++) {\n      actual.add(Integer.valueOf(hits[i].doc));\n    }\n\n    Assert.assertEquals(query.toString(defaultFieldName), correct, actual);\n\n    QueryUtils.check(query,searcher);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6bcde5e3f23911110baa101ed062b544162825b5":["052fac7830290bd38a04cddee1a121ee07656b56"],"e450c7d50c2fc84c963d0d7ade9d3217d868064d":["90cb6b3f4e5652555b614adc90204287fbebd27c"],"aabae793f43472efdf1dcdaae4e01e28cfc23ccd":["f4e4ac061c7cb668bd0651cb565ebbad1157cadc"],"90cb6b3f4e5652555b614adc90204287fbebd27c":["6bcde5e3f23911110baa101ed062b544162825b5"],"56b47d7ef702892600c875ce48ffbdd5701bb3f3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7a53ba34cf04e8d72c7d4c4bd297d32206a25c05":["56b47d7ef702892600c875ce48ffbdd5701bb3f3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f4e4ac061c7cb668bd0651cb565ebbad1157cadc":["7a53ba34cf04e8d72c7d4c4bd297d32206a25c05"],"5af07783dbc171e26a694c4f7d735e30c2769faa":["aabae793f43472efdf1dcdaae4e01e28cfc23ccd"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["e450c7d50c2fc84c963d0d7ade9d3217d868064d"],"052fac7830290bd38a04cddee1a121ee07656b56":["5af07783dbc171e26a694c4f7d735e30c2769faa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"]},"commit2Childs":{"6bcde5e3f23911110baa101ed062b544162825b5":["90cb6b3f4e5652555b614adc90204287fbebd27c"],"e450c7d50c2fc84c963d0d7ade9d3217d868064d":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"aabae793f43472efdf1dcdaae4e01e28cfc23ccd":["5af07783dbc171e26a694c4f7d735e30c2769faa"],"90cb6b3f4e5652555b614adc90204287fbebd27c":["e450c7d50c2fc84c963d0d7ade9d3217d868064d"],"56b47d7ef702892600c875ce48ffbdd5701bb3f3":["7a53ba34cf04e8d72c7d4c4bd297d32206a25c05"],"7a53ba34cf04e8d72c7d4c4bd297d32206a25c05":["f4e4ac061c7cb668bd0651cb565ebbad1157cadc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["56b47d7ef702892600c875ce48ffbdd5701bb3f3"],"f4e4ac061c7cb668bd0651cb565ebbad1157cadc":["aabae793f43472efdf1dcdaae4e01e28cfc23ccd"],"5af07783dbc171e26a694c4f7d735e30c2769faa":["052fac7830290bd38a04cddee1a121ee07656b56"],"052fac7830290bd38a04cddee1a121ee07656b56":["6bcde5e3f23911110baa101ed062b544162825b5"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}