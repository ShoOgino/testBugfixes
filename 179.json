{"path":"lucene/analysis/common/src/java/org/apache/lucene/analysis/util/CharacterUtils#toCodePoints(char[],int,int,int[],int).mjava","commits":[{"id":"bd095de1c7ac6b6ab3a330b5fbe8cb37e4f34704","date":1371043069,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/util/CharacterUtils#toCodePoints(char[],int,int,int[],int).mjava","pathOld":"/dev/null","sourceNew":"  /** Converts a sequence of Java characters to a sequence of unicode code points.\n   *  @return the number of code points written to the destination buffer */\n  public final int toCodePoints(char[] src, int srcOff, int srcLen, int[] dest, int destOff) {\n    int codePointCount = 0;\n    for (int i = 0; i < srcLen; ) {\n      final int cp = codePointAt(src, srcOff + i, srcOff + srcLen);\n      final int charCount = Character.charCount(cp);\n      dest[destOff + codePointCount++] = cp;\n      i += charCount;\n    }\n    return codePointCount;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d29048034555f0f5f5d552500a7d75c9e8a91d09","date":1371107175,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/util/CharacterUtils#toCodePoints(char[],int,int,int[],int).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/util/CharacterUtils#toCodePoints(char[],int,int,int[],int).mjava","sourceNew":"  /** Converts a sequence of Java characters to a sequence of unicode code points.\n   *  @return the number of code points written to the destination buffer */\n  public final int toCodePoints(char[] src, int srcOff, int srcLen, int[] dest, int destOff) {\n    if (srcLen < 0) {\n      throw new IllegalArgumentException(\"srcLen must be >= 0\");\n    }\n    int codePointCount = 0;\n    for (int i = 0; i < srcLen; ) {\n      final int cp = codePointAt(src, srcOff + i, srcOff + srcLen);\n      final int charCount = Character.charCount(cp);\n      dest[destOff + codePointCount++] = cp;\n      i += charCount;\n    }\n    return codePointCount;\n  }\n\n","sourceOld":"  /** Converts a sequence of Java characters to a sequence of unicode code points.\n   *  @return the number of code points written to the destination buffer */\n  public final int toCodePoints(char[] src, int srcOff, int srcLen, int[] dest, int destOff) {\n    int codePointCount = 0;\n    for (int i = 0; i < srcLen; ) {\n      final int cp = codePointAt(src, srcOff + i, srcOff + srcLen);\n      final int charCount = Character.charCount(cp);\n      dest[destOff + codePointCount++] = cp;\n      i += charCount;\n    }\n    return codePointCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fba4cd6a5aae0bc17cc1cbf1e84b0ae32ee039dc","date":1465824262,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/util/CharacterUtils#toCodePoints(char[],int,int,int[],int).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/util/CharacterUtils#toCodePoints(char[],int,int,int[],int).mjava","sourceNew":"  /** Converts a sequence of Java characters to a sequence of unicode code points.\n   *  @return the number of code points written to the destination buffer */\n  public static int toCodePoints(char[] src, int srcOff, int srcLen, int[] dest, int destOff) {\n    if (srcLen < 0) {\n      throw new IllegalArgumentException(\"srcLen must be >= 0\");\n    }\n    int codePointCount = 0;\n    for (int i = 0; i < srcLen; ) {\n      final int cp = Character.codePointAt(src, srcOff + i, srcOff + srcLen);\n      final int charCount = Character.charCount(cp);\n      dest[destOff + codePointCount++] = cp;\n      i += charCount;\n    }\n    return codePointCount;\n  }\n\n","sourceOld":"  /** Converts a sequence of Java characters to a sequence of unicode code points.\n   *  @return the number of code points written to the destination buffer */\n  public final int toCodePoints(char[] src, int srcOff, int srcLen, int[] dest, int destOff) {\n    if (srcLen < 0) {\n      throw new IllegalArgumentException(\"srcLen must be >= 0\");\n    }\n    int codePointCount = 0;\n    for (int i = 0; i < srcLen; ) {\n      final int cp = codePointAt(src, srcOff + i, srcOff + srcLen);\n      final int charCount = Character.charCount(cp);\n      dest[destOff + codePointCount++] = cp;\n      i += charCount;\n    }\n    return codePointCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57dc82c7b33cd580e7ab5179019bc78f3d7f8e79","date":1465913303,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/util/CharacterUtils#toCodePoints(char[],int,int,int[],int).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/util/CharacterUtils#toCodePoints(char[],int,int,int[],int).mjava","sourceNew":"  /** Converts a sequence of Java characters to a sequence of unicode code points.\n   *  @return the number of code points written to the destination buffer */\n  public static int toCodePoints(char[] src, int srcOff, int srcLen, int[] dest, int destOff) {\n    if (srcLen < 0) {\n      throw new IllegalArgumentException(\"srcLen must be >= 0\");\n    }\n    int codePointCount = 0;\n    for (int i = 0; i < srcLen; ) {\n      final int cp = Character.codePointAt(src, srcOff + i, srcOff + srcLen);\n      final int charCount = Character.charCount(cp);\n      dest[destOff + codePointCount++] = cp;\n      i += charCount;\n    }\n    return codePointCount;\n  }\n\n","sourceOld":"  /** Converts a sequence of Java characters to a sequence of unicode code points.\n   *  @return the number of code points written to the destination buffer */\n  public final int toCodePoints(char[] src, int srcOff, int srcLen, int[] dest, int destOff) {\n    if (srcLen < 0) {\n      throw new IllegalArgumentException(\"srcLen must be >= 0\");\n    }\n    int codePointCount = 0;\n    for (int i = 0; i < srcLen; ) {\n      final int cp = codePointAt(src, srcOff + i, srcOff + srcLen);\n      final int charCount = Character.charCount(cp);\n      dest[destOff + codePointCount++] = cp;\n      i += charCount;\n    }\n    return codePointCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b266fe0ac2172d4ad87cff12bd9bf9f8c8247345","date":1465936684,"type":5,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/analysis/CharacterUtils#toCodePoints(char[],int,int,int[],int).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/util/CharacterUtils#toCodePoints(char[],int,int,int[],int).mjava","sourceNew":"  /** Converts a sequence of Java characters to a sequence of unicode code points.\n   *  @return the number of code points written to the destination buffer */\n  public static int toCodePoints(char[] src, int srcOff, int srcLen, int[] dest, int destOff) {\n    if (srcLen < 0) {\n      throw new IllegalArgumentException(\"srcLen must be >= 0\");\n    }\n    int codePointCount = 0;\n    for (int i = 0; i < srcLen; ) {\n      final int cp = Character.codePointAt(src, srcOff + i, srcOff + srcLen);\n      final int charCount = Character.charCount(cp);\n      dest[destOff + codePointCount++] = cp;\n      i += charCount;\n    }\n    return codePointCount;\n  }\n\n","sourceOld":"  /** Converts a sequence of Java characters to a sequence of unicode code points.\n   *  @return the number of code points written to the destination buffer */\n  public static int toCodePoints(char[] src, int srcOff, int srcLen, int[] dest, int destOff) {\n    if (srcLen < 0) {\n      throw new IllegalArgumentException(\"srcLen must be >= 0\");\n    }\n    int codePointCount = 0;\n    for (int i = 0; i < srcLen; ) {\n      final int cp = Character.codePointAt(src, srcOff + i, srcOff + srcLen);\n      final int charCount = Character.charCount(cp);\n      dest[destOff + codePointCount++] = cp;\n      i += charCount;\n    }\n    return codePointCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/util/CharacterUtils#toCodePoints(char[],int,int,int[],int).mjava","sourceNew":null,"sourceOld":"  /** Converts a sequence of Java characters to a sequence of unicode code points.\n   *  @return the number of code points written to the destination buffer */\n  public final int toCodePoints(char[] src, int srcOff, int srcLen, int[] dest, int destOff) {\n    if (srcLen < 0) {\n      throw new IllegalArgumentException(\"srcLen must be >= 0\");\n    }\n    int codePointCount = 0;\n    for (int i = 0; i < srcLen; ) {\n      final int cp = codePointAt(src, srcOff + i, srcOff + srcLen);\n      final int charCount = Character.charCount(cp);\n      dest[destOff + codePointCount++] = cp;\n      i += charCount;\n    }\n    return codePointCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bd095de1c7ac6b6ab3a330b5fbe8cb37e4f34704":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fba4cd6a5aae0bc17cc1cbf1e84b0ae32ee039dc":["d29048034555f0f5f5d552500a7d75c9e8a91d09"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"57dc82c7b33cd580e7ab5179019bc78f3d7f8e79":["d29048034555f0f5f5d552500a7d75c9e8a91d09","fba4cd6a5aae0bc17cc1cbf1e84b0ae32ee039dc"],"b266fe0ac2172d4ad87cff12bd9bf9f8c8247345":["57dc82c7b33cd580e7ab5179019bc78f3d7f8e79"],"d29048034555f0f5f5d552500a7d75c9e8a91d09":["bd095de1c7ac6b6ab3a330b5fbe8cb37e4f34704"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["d29048034555f0f5f5d552500a7d75c9e8a91d09","b266fe0ac2172d4ad87cff12bd9bf9f8c8247345"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b266fe0ac2172d4ad87cff12bd9bf9f8c8247345"]},"commit2Childs":{"bd095de1c7ac6b6ab3a330b5fbe8cb37e4f34704":["d29048034555f0f5f5d552500a7d75c9e8a91d09"],"fba4cd6a5aae0bc17cc1cbf1e84b0ae32ee039dc":["57dc82c7b33cd580e7ab5179019bc78f3d7f8e79"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bd095de1c7ac6b6ab3a330b5fbe8cb37e4f34704"],"57dc82c7b33cd580e7ab5179019bc78f3d7f8e79":["b266fe0ac2172d4ad87cff12bd9bf9f8c8247345"],"d29048034555f0f5f5d552500a7d75c9e8a91d09":["fba4cd6a5aae0bc17cc1cbf1e84b0ae32ee039dc","57dc82c7b33cd580e7ab5179019bc78f3d7f8e79","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"b266fe0ac2172d4ad87cff12bd9bf9f8c8247345":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}