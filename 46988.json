{"path":"backwards/src/test/org/apache/lucene/search/TestBooleanScorer#testEmptyBucketWithMoreDocs().mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/test/org/apache/lucene/search/TestBooleanScorer#testEmptyBucketWithMoreDocs().mjava","pathOld":"/dev/null","sourceNew":"  public void testEmptyBucketWithMoreDocs() throws Exception {\n    // This test checks the logic of nextDoc() when all sub scorers have docs\n    // beyond the first bucket (for example). Currently, the code relies on the\n    // 'more' variable to work properly, and this test ensures that if the logic\n    // changes, we have a test to back it up.\n    \n    Similarity sim = Similarity.getDefault();\n    Scorer[] scorers = new Scorer[] {new Scorer(sim) {\n      private int doc = -1;\n      @Override public float score() throws IOException { return 0; }\n      @Override public int docID() { return doc; }\n      \n      @Override public int nextDoc() throws IOException {\n        return doc = doc == -1 ? 3000 : NO_MORE_DOCS;\n      }\n\n      @Override public int advance(int target) throws IOException {\n        return doc = target <= 3000 ? 3000 : NO_MORE_DOCS;\n      }\n      \n    }};\n    BooleanScorer bs = new BooleanScorer(sim, 1, Arrays.asList(scorers), null);\n    \n    assertEquals(\"should have received 3000\", 3000, bs.nextDoc());\n    assertEquals(\"should have received NO_MORE_DOCS\", DocIdSetIterator.NO_MORE_DOCS, bs.nextDoc());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/search/TestBooleanScorer#testEmptyBucketWithMoreDocs().mjava","pathOld":"backwards/src/test/org/apache/lucene/search/TestBooleanScorer#testEmptyBucketWithMoreDocs().mjava","sourceNew":"  public void testEmptyBucketWithMoreDocs() throws Exception {\n    // This test checks the logic of nextDoc() when all sub scorers have docs\n    // beyond the first bucket (for example). Currently, the code relies on the\n    // 'more' variable to work properly, and this test ensures that if the logic\n    // changes, we have a test to back it up.\n    \n    Similarity sim = Similarity.getDefault();\n    Scorer[] scorers = new Scorer[] {new Scorer(sim) {\n      private int doc = -1;\n      @Override public float score() throws IOException { return 0; }\n      @Override public int docID() { return doc; }\n      \n      @Override public int nextDoc() throws IOException {\n        return doc = doc == -1 ? 3000 : NO_MORE_DOCS;\n      }\n\n      @Override public int advance(int target) throws IOException {\n        return doc = target <= 3000 ? 3000 : NO_MORE_DOCS;\n      }\n      \n    }};\n    BooleanScorer bs = new BooleanScorer(sim, 1, Arrays.asList(scorers), null);\n    \n    assertEquals(\"should have received 3000\", 3000, bs.nextDoc());\n    assertEquals(\"should have received NO_MORE_DOCS\", DocIdSetIterator.NO_MORE_DOCS, bs.nextDoc());\n  }\n\n","sourceOld":"  public void testEmptyBucketWithMoreDocs() throws Exception {\n    // This test checks the logic of nextDoc() when all sub scorers have docs\n    // beyond the first bucket (for example). Currently, the code relies on the\n    // 'more' variable to work properly, and this test ensures that if the logic\n    // changes, we have a test to back it up.\n    \n    Similarity sim = Similarity.getDefault();\n    Scorer[] scorers = new Scorer[] {new Scorer(sim) {\n      private int doc = -1;\n      @Override public float score() throws IOException { return 0; }\n      @Override public int docID() { return doc; }\n      \n      @Override public int nextDoc() throws IOException {\n        return doc = doc == -1 ? 3000 : NO_MORE_DOCS;\n      }\n\n      @Override public int advance(int target) throws IOException {\n        return doc = target <= 3000 ? 3000 : NO_MORE_DOCS;\n      }\n      \n    }};\n    BooleanScorer bs = new BooleanScorer(sim, 1, Arrays.asList(scorers), null);\n    \n    assertEquals(\"should have received 3000\", 3000, bs.nextDoc());\n    assertEquals(\"should have received NO_MORE_DOCS\", DocIdSetIterator.NO_MORE_DOCS, bs.nextDoc());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}