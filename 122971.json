{"path":"modules/spatial-TEMP/src/java/org/apache/lucene/spatial/strategy/prefix/TermQueryPrefixTreeStrategy#makeQuery(SpatialArgs,SimpleSpatialFieldInfo).mjava","commits":[{"id":"33ee89d976c91275e5be5da438ca0977b1c5b90f","date":1329808149,"type":1,"author":"Ryan McKinley","isMerge":false,"pathNew":"modules/spatial-TEMP/src/java/org/apache/lucene/spatial/strategy/prefix/TermQueryPrefixTreeStrategy#makeQuery(SpatialArgs,SimpleSpatialFieldInfo).mjava","pathOld":"modules/spatial/src/java/org/apache/lucene/spatial/strategy/prefix/TermQueryPrefixTreeStrategy#makeQuery(SpatialArgs,SimpleSpatialFieldInfo).mjava","sourceNew":"  @Override\n  public Query makeQuery(SpatialArgs args, SimpleSpatialFieldInfo fieldInfo) {\n    if (args.getOperation() != SpatialOperation.Intersects &&\n        args.getOperation() != SpatialOperation.IsWithin &&\n        args.getOperation() != SpatialOperation.Overlaps ){\n      // TODO -- can translate these other query types\n      throw new UnsupportedSpatialOperation(args.getOperation());\n    }\n    Shape qshape = args.getShape();\n    int detailLevel = grid.getMaxLevelForPrecision(qshape, args.getDistPrecision());\n    List<Node> cells = grid.getNodes(qshape, detailLevel, false);\n\n    BooleanQuery booleanQuery = new BooleanQuery();\n    for (Node cell : cells) {\n      booleanQuery.add(new TermQuery(new Term(fieldInfo.getFieldName(), cell.getTokenString())), BooleanClause.Occur.SHOULD);\n    }\n    return booleanQuery;\n  }\n\n","sourceOld":"  @Override\n  public Query makeQuery(SpatialArgs args, SimpleSpatialFieldInfo fieldInfo) {\n    if (args.getOperation() != SpatialOperation.Intersects &&\n        args.getOperation() != SpatialOperation.IsWithin &&\n        args.getOperation() != SpatialOperation.Overlaps ){\n      // TODO -- can translate these other query types\n      throw new UnsupportedSpatialOperation(args.getOperation());\n    }\n    Shape qshape = args.getShape();\n    int detailLevel = grid.getMaxLevelForPrecision(qshape, args.getDistPrecision());\n    List<Node> cells = grid.getNodes(qshape, detailLevel, false);\n\n    BooleanQuery booleanQuery = new BooleanQuery();\n    for (Node cell : cells) {\n      booleanQuery.add(new TermQuery(new Term(fieldInfo.getFieldName(), cell.getTokenString())), BooleanClause.Occur.SHOULD);\n    }\n    return booleanQuery;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c2047ba81272a0c4edeb11b1c7810ee23ba73502","date":1329808655,"type":5,"author":"Ryan McKinley","isMerge":false,"pathNew":"modules/spatial/strategy/src/java/org/apache/lucene/spatial/strategy/prefix/TermQueryPrefixTreeStrategy#makeQuery(SpatialArgs,SimpleSpatialFieldInfo).mjava","pathOld":"modules/spatial-TEMP/src/java/org/apache/lucene/spatial/strategy/prefix/TermQueryPrefixTreeStrategy#makeQuery(SpatialArgs,SimpleSpatialFieldInfo).mjava","sourceNew":"  @Override\n  public Query makeQuery(SpatialArgs args, SimpleSpatialFieldInfo fieldInfo) {\n    if (args.getOperation() != SpatialOperation.Intersects &&\n        args.getOperation() != SpatialOperation.IsWithin &&\n        args.getOperation() != SpatialOperation.Overlaps ){\n      // TODO -- can translate these other query types\n      throw new UnsupportedSpatialOperation(args.getOperation());\n    }\n    Shape qshape = args.getShape();\n    int detailLevel = grid.getMaxLevelForPrecision(qshape, args.getDistPrecision());\n    List<Node> cells = grid.getNodes(qshape, detailLevel, false);\n\n    BooleanQuery booleanQuery = new BooleanQuery();\n    for (Node cell : cells) {\n      booleanQuery.add(new TermQuery(new Term(fieldInfo.getFieldName(), cell.getTokenString())), BooleanClause.Occur.SHOULD);\n    }\n    return booleanQuery;\n  }\n\n","sourceOld":"  @Override\n  public Query makeQuery(SpatialArgs args, SimpleSpatialFieldInfo fieldInfo) {\n    if (args.getOperation() != SpatialOperation.Intersects &&\n        args.getOperation() != SpatialOperation.IsWithin &&\n        args.getOperation() != SpatialOperation.Overlaps ){\n      // TODO -- can translate these other query types\n      throw new UnsupportedSpatialOperation(args.getOperation());\n    }\n    Shape qshape = args.getShape();\n    int detailLevel = grid.getMaxLevelForPrecision(qshape, args.getDistPrecision());\n    List<Node> cells = grid.getNodes(qshape, detailLevel, false);\n\n    BooleanQuery booleanQuery = new BooleanQuery();\n    for (Node cell : cells) {\n      booleanQuery.add(new TermQuery(new Term(fieldInfo.getFieldName(), cell.getTokenString())), BooleanClause.Occur.SHOULD);\n    }\n    return booleanQuery;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c2047ba81272a0c4edeb11b1c7810ee23ba73502":["33ee89d976c91275e5be5da438ca0977b1c5b90f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"33ee89d976c91275e5be5da438ca0977b1c5b90f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"c2047ba81272a0c4edeb11b1c7810ee23ba73502":[],"33ee89d976c91275e5be5da438ca0977b1c5b90f":["c2047ba81272a0c4edeb11b1c7810ee23ba73502"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["33ee89d976c91275e5be5da438ca0977b1c5b90f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c2047ba81272a0c4edeb11b1c7810ee23ba73502","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}