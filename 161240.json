{"path":"lucene/src/test/org/apache/lucene/index/TestTermsEnum#testEasy().mjava","commits":[{"id":"60ba444201d2570214b6fcf1d15600dc1a01f548","date":1313868045,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestTermsEnum#testEasy().mjava","pathOld":"/dev/null","sourceNew":"  public void testEasy() throws Exception {\n    // No floor arcs:\n    r = makeIndex(\"aa0\", \"aa1\", \"aa2\", \"aa3\", \"bb0\", \"bb1\", \"bb2\", \"bb3\", \"aa\");\n\n    // First term in block:\n    assertEquals(1, docFreq(r, \"aa0\"));\n\n    // Scan forward to another term in same block\n    assertEquals(1, docFreq(r, \"aa2\"));\n\n    assertEquals(1, docFreq(r, \"aa\"));\n\n    // Reset same block then scan forwards\n    assertEquals(1, docFreq(r, \"aa1\"));\n\n    // Not found, in same block\n    assertEquals(0, docFreq(r, \"aa5\"));\n\n    // Found, in same block\n    assertEquals(1, docFreq(r, \"aa2\"));\n\n    // Not found in index:\n    assertEquals(0, docFreq(r, \"b0\"));\n\n    // Found:\n    assertEquals(1, docFreq(r, \"aa2\"));\n\n    // Found, rewind:\n    assertEquals(1, docFreq(r, \"aa0\"));\n\n\n    // First term in block:\n    assertEquals(1, docFreq(r, \"bb0\"));\n\n    // Scan forward to another term in same block\n    assertEquals(1, docFreq(r, \"bb2\"));\n\n    // Reset same block then scan forwards\n    assertEquals(1, docFreq(r, \"bb1\"));\n\n    // Not found, in same block\n    assertEquals(0, docFreq(r, \"bb5\"));\n\n    // Found, in same block\n    assertEquals(1, docFreq(r, \"bb2\"));\n\n    // Not found in index:\n    assertEquals(0, docFreq(r, \"b0\"));\n\n    // Found:\n    assertEquals(1, docFreq(r, \"bb2\"));\n\n    // Found, rewind:\n    assertEquals(1, docFreq(r, \"bb0\"));\n\n    close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum#testEasy().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestTermsEnum#testEasy().mjava","sourceNew":"  public void testEasy() throws Exception {\n    // No floor arcs:\n    r = makeIndex(\"aa0\", \"aa1\", \"aa2\", \"aa3\", \"bb0\", \"bb1\", \"bb2\", \"bb3\", \"aa\");\n\n    // First term in block:\n    assertEquals(1, docFreq(r, \"aa0\"));\n\n    // Scan forward to another term in same block\n    assertEquals(1, docFreq(r, \"aa2\"));\n\n    assertEquals(1, docFreq(r, \"aa\"));\n\n    // Reset same block then scan forwards\n    assertEquals(1, docFreq(r, \"aa1\"));\n\n    // Not found, in same block\n    assertEquals(0, docFreq(r, \"aa5\"));\n\n    // Found, in same block\n    assertEquals(1, docFreq(r, \"aa2\"));\n\n    // Not found in index:\n    assertEquals(0, docFreq(r, \"b0\"));\n\n    // Found:\n    assertEquals(1, docFreq(r, \"aa2\"));\n\n    // Found, rewind:\n    assertEquals(1, docFreq(r, \"aa0\"));\n\n\n    // First term in block:\n    assertEquals(1, docFreq(r, \"bb0\"));\n\n    // Scan forward to another term in same block\n    assertEquals(1, docFreq(r, \"bb2\"));\n\n    // Reset same block then scan forwards\n    assertEquals(1, docFreq(r, \"bb1\"));\n\n    // Not found, in same block\n    assertEquals(0, docFreq(r, \"bb5\"));\n\n    // Found, in same block\n    assertEquals(1, docFreq(r, \"bb2\"));\n\n    // Not found in index:\n    assertEquals(0, docFreq(r, \"b0\"));\n\n    // Found:\n    assertEquals(1, docFreq(r, \"bb2\"));\n\n    // Found, rewind:\n    assertEquals(1, docFreq(r, \"bb0\"));\n\n    close();\n  }\n\n","sourceOld":"  public void testEasy() throws Exception {\n    // No floor arcs:\n    r = makeIndex(\"aa0\", \"aa1\", \"aa2\", \"aa3\", \"bb0\", \"bb1\", \"bb2\", \"bb3\", \"aa\");\n\n    // First term in block:\n    assertEquals(1, docFreq(r, \"aa0\"));\n\n    // Scan forward to another term in same block\n    assertEquals(1, docFreq(r, \"aa2\"));\n\n    assertEquals(1, docFreq(r, \"aa\"));\n\n    // Reset same block then scan forwards\n    assertEquals(1, docFreq(r, \"aa1\"));\n\n    // Not found, in same block\n    assertEquals(0, docFreq(r, \"aa5\"));\n\n    // Found, in same block\n    assertEquals(1, docFreq(r, \"aa2\"));\n\n    // Not found in index:\n    assertEquals(0, docFreq(r, \"b0\"));\n\n    // Found:\n    assertEquals(1, docFreq(r, \"aa2\"));\n\n    // Found, rewind:\n    assertEquals(1, docFreq(r, \"aa0\"));\n\n\n    // First term in block:\n    assertEquals(1, docFreq(r, \"bb0\"));\n\n    // Scan forward to another term in same block\n    assertEquals(1, docFreq(r, \"bb2\"));\n\n    // Reset same block then scan forwards\n    assertEquals(1, docFreq(r, \"bb1\"));\n\n    // Not found, in same block\n    assertEquals(0, docFreq(r, \"bb5\"));\n\n    // Found, in same block\n    assertEquals(1, docFreq(r, \"bb2\"));\n\n    // Not found in index:\n    assertEquals(0, docFreq(r, \"b0\"));\n\n    // Found:\n    assertEquals(1, docFreq(r, \"bb2\"));\n\n    // Found, rewind:\n    assertEquals(1, docFreq(r, \"bb0\"));\n\n    close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"60ba444201d2570214b6fcf1d15600dc1a01f548":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["60ba444201d2570214b6fcf1d15600dc1a01f548"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"60ba444201d2570214b6fcf1d15600dc1a01f548":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["60ba444201d2570214b6fcf1d15600dc1a01f548"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}