{"path":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader#decodeTerm(long[],DataInput,FieldInfo,BlockTermState,boolean).mjava","commits":[{"id":"4cc45c615dbb82bf79d5f9550286098367874fbf","date":1409571423,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader#decodeTerm(long[],DataInput,FieldInfo,BlockTermState,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader#decodeTerm(long[],DataInput,FieldInfo,BlockTermState,boolean).mjava","sourceNew":"  @Override\n  public void decodeTerm(long[] longs, DataInput in, FieldInfo fieldInfo, BlockTermState _termState, boolean absolute)\n    throws IOException {\n    final StandardTermState termState = (StandardTermState) _termState;\n    // if (DEBUG) System.out.println(\"SPR: nextTerm seg=\" + segment + \" tbOrd=\" + termState.termBlockOrd + \" bytesReader.fp=\" + termState.bytesReader.getPosition());\n    final boolean isFirstTerm = termState.termBlockOrd == 0;\n    if (absolute) {\n      termState.freqOffset = 0;\n      termState.proxOffset = 0;\n    }\n\n    termState.freqOffset += in.readVLong();\n    /*\n    if (DEBUG) {\n      System.out.println(\"  dF=\" + termState.docFreq);\n      System.out.println(\"  freqFP=\" + termState.freqOffset);\n    }\n    */\n    assert termState.freqOffset < freqIn.length();\n\n    if (termState.docFreq >= skipMinimum) {\n      termState.skipOffset = in.readVLong();\n      // if (DEBUG) System.out.println(\"  skipOffset=\" + termState.skipOffset + \" vs freqIn.length=\" + freqIn.length());\n      assert termState.freqOffset + termState.skipOffset < freqIn.length();\n    } else {\n      // undefined\n    }\n\n    if (fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0) {\n      termState.proxOffset += in.readVLong();\n      // if (DEBUG) System.out.println(\"  proxFP=\" + termState.proxOffset);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void decodeTerm(long[] longs, DataInput in, FieldInfo fieldInfo, BlockTermState _termState, boolean absolute)\n    throws IOException {\n    final StandardTermState termState = (StandardTermState) _termState;\n    // if (DEBUG) System.out.println(\"SPR: nextTerm seg=\" + segment + \" tbOrd=\" + termState.termBlockOrd + \" bytesReader.fp=\" + termState.bytesReader.getPosition());\n    final boolean isFirstTerm = termState.termBlockOrd == 0;\n    if (absolute) {\n      termState.freqOffset = 0;\n      termState.proxOffset = 0;\n    }\n\n    termState.freqOffset += in.readVLong();\n    /*\n    if (DEBUG) {\n      System.out.println(\"  dF=\" + termState.docFreq);\n      System.out.println(\"  freqFP=\" + termState.freqOffset);\n    }\n    */\n    assert termState.freqOffset < freqIn.length();\n\n    if (termState.docFreq >= skipMinimum) {\n      termState.skipOffset = in.readVLong();\n      // if (DEBUG) System.out.println(\"  skipOffset=\" + termState.skipOffset + \" vs freqIn.length=\" + freqIn.length());\n      assert termState.freqOffset + termState.skipOffset < freqIn.length();\n    } else {\n      // undefined\n    }\n\n    if (fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0) {\n      termState.proxOffset += in.readVLong();\n      // if (DEBUG) System.out.println(\"  proxFP=\" + termState.proxOffset);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"402ad3ddc9da7b70da1b167667a60ece6a1381fb","date":1409656478,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader#decodeTerm(long[],DataInput,FieldInfo,BlockTermState,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader#decodeTerm(long[],DataInput,FieldInfo,BlockTermState,boolean).mjava","sourceNew":"  @Override\n  public void decodeTerm(long[] longs, DataInput in, FieldInfo fieldInfo, BlockTermState _termState, boolean absolute)\n    throws IOException {\n    final StandardTermState termState = (StandardTermState) _termState;\n    // if (DEBUG) System.out.println(\"SPR: nextTerm seg=\" + segment + \" tbOrd=\" + termState.termBlockOrd + \" bytesReader.fp=\" + termState.bytesReader.getPosition());\n    final boolean isFirstTerm = termState.termBlockOrd == 0;\n    if (absolute) {\n      termState.freqOffset = 0;\n      termState.proxOffset = 0;\n    }\n\n    termState.freqOffset += in.readVLong();\n    /*\n    if (DEBUG) {\n      System.out.println(\"  dF=\" + termState.docFreq);\n      System.out.println(\"  freqFP=\" + termState.freqOffset);\n    }\n    */\n    assert termState.freqOffset < freqIn.length();\n\n    if (termState.docFreq >= skipMinimum) {\n      termState.skipOffset = in.readVLong();\n      // if (DEBUG) System.out.println(\"  skipOffset=\" + termState.skipOffset + \" vs freqIn.length=\" + freqIn.length());\n      assert termState.freqOffset + termState.skipOffset < freqIn.length();\n    } else {\n      // undefined\n    }\n\n    if (fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0) {\n      termState.proxOffset += in.readVLong();\n      // if (DEBUG) System.out.println(\"  proxFP=\" + termState.proxOffset);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void decodeTerm(long[] longs, DataInput in, FieldInfo fieldInfo, BlockTermState _termState, boolean absolute)\n    throws IOException {\n    final StandardTermState termState = (StandardTermState) _termState;\n    // if (DEBUG) System.out.println(\"SPR: nextTerm seg=\" + segment + \" tbOrd=\" + termState.termBlockOrd + \" bytesReader.fp=\" + termState.bytesReader.getPosition());\n    final boolean isFirstTerm = termState.termBlockOrd == 0;\n    if (absolute) {\n      termState.freqOffset = 0;\n      termState.proxOffset = 0;\n    }\n\n    termState.freqOffset += in.readVLong();\n    /*\n    if (DEBUG) {\n      System.out.println(\"  dF=\" + termState.docFreq);\n      System.out.println(\"  freqFP=\" + termState.freqOffset);\n    }\n    */\n    assert termState.freqOffset < freqIn.length();\n\n    if (termState.docFreq >= skipMinimum) {\n      termState.skipOffset = in.readVLong();\n      // if (DEBUG) System.out.println(\"  skipOffset=\" + termState.skipOffset + \" vs freqIn.length=\" + freqIn.length());\n      assert termState.freqOffset + termState.skipOffset < freqIn.length();\n    } else {\n      // undefined\n    }\n\n    if (fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0) {\n      termState.proxOffset += in.readVLong();\n      // if (DEBUG) System.out.println(\"  proxFP=\" + termState.proxOffset);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"71387d8cb6923eb831b17a8b734608ba2e21c653","date":1414126093,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader#decodeTerm(long[],DataInput,FieldInfo,BlockTermState,boolean).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void decodeTerm(long[] longs, DataInput in, FieldInfo fieldInfo, BlockTermState _termState, boolean absolute)\n    throws IOException {\n    final StandardTermState termState = (StandardTermState) _termState;\n    // if (DEBUG) System.out.println(\"SPR: nextTerm seg=\" + segment + \" tbOrd=\" + termState.termBlockOrd + \" bytesReader.fp=\" + termState.bytesReader.getPosition());\n    final boolean isFirstTerm = termState.termBlockOrd == 0;\n    if (absolute) {\n      termState.freqOffset = 0;\n      termState.proxOffset = 0;\n    }\n\n    termState.freqOffset += in.readVLong();\n    /*\n    if (DEBUG) {\n      System.out.println(\"  dF=\" + termState.docFreq);\n      System.out.println(\"  freqFP=\" + termState.freqOffset);\n    }\n    */\n    assert termState.freqOffset < freqIn.length();\n\n    if (termState.docFreq >= skipMinimum) {\n      termState.skipOffset = in.readVLong();\n      // if (DEBUG) System.out.println(\"  skipOffset=\" + termState.skipOffset + \" vs freqIn.length=\" + freqIn.length());\n      assert termState.freqOffset + termState.skipOffset < freqIn.length();\n    } else {\n      // undefined\n    }\n\n    if (fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0) {\n      termState.proxOffset += in.readVLong();\n      // if (DEBUG) System.out.println(\"  proxFP=\" + termState.proxOffset);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cc45c615dbb82bf79d5f9550286098367874fbf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"71387d8cb6923eb831b17a8b734608ba2e21c653":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["71387d8cb6923eb831b17a8b734608ba2e21c653"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4cc45c615dbb82bf79d5f9550286098367874fbf"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4cc45c615dbb82bf79d5f9550286098367874fbf","402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"4cc45c615dbb82bf79d5f9550286098367874fbf":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"71387d8cb6923eb831b17a8b734608ba2e21c653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["71387d8cb6923eb831b17a8b734608ba2e21c653"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}