{"path":"solr/core/src/java/org/apache/solr/search/similarities/SweetSpotSimilarityFactory#init(SolrParams).mjava","commits":[{"id":"81ac83661cf5972c111e31e4249749b6506d5f18","date":1361930287,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/similarities/SweetSpotSimilarityFactory#init(SolrParams).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void init(SolrParams params) {\n    super.init(params);\n\n    Integer ln_min = params.getInt(\"lengthNormMin\");\n    Integer ln_max = params.getInt(\"lengthNormMax\");\n    Float ln_steep = params.getFloat(\"lengthNormSteepness\");\n    if (! allOrNoneNull(ln_min, ln_max, ln_steep)) {\n      throw new SolrException(SERVER_ERROR, \"Overriding default lengthNorm settings requires all to be specified: lengthNormMin, lengthNormMax, lengthNormSteepness\");\n    }\n\n    Float hyper_min = params.getFloat(\"hyperbolicTfMin\");\n    Float hyper_max = params.getFloat(\"hyperbolicTfMax\");\n    Double hyper_base = params.getDouble(\"hyperbolicTfBase\");\n    Float hyper_offset = params.getFloat(\"hyperbolicTfOffset\");\n    if (! allOrNoneNull(hyper_min, hyper_max, hyper_base, hyper_offset)) {\n      throw new SolrException(SERVER_ERROR, \"Overriding default hyperbolicTf settings requires all to be specified: hyperbolicTfMin, hyperbolicTfMax, hyperbolicTfBase, hyperbolicTfOffset\");\n    }\n\n    Float baseline_base = params.getFloat(\"baselineTfBase\");\n    Float baseline_min = params.getFloat(\"baselineTfMin\");\n    if (! allOrNoneNull(baseline_min, baseline_base)) {\n      throw new SolrException(SERVER_ERROR, \"Overriding default baselineTf settings requires all to be specified: baselineTfBase, baselineTfMin\");\n    }\n\n    // sanity check that they aren't trying to use two diff tf impls\n    if ((null != hyper_min) && (null != baseline_min)) {\n      throw new SolrException(SERVER_ERROR, \"Can not mix hyperbolicTf settings with baselineTf settings\");\n    }\n\n    // pick Similarity impl based on wether hyper tf settings are set\n    sim = (null != hyper_min) ? new HyperbolicSweetSpotSimilarity() \n      : new SweetSpotSimilarity();\n    \n    if (null != ln_min) {\n      // overlaps already handled by super factory\n      sim.setLengthNormFactors(ln_min, ln_max, ln_steep, this.discountOverlaps);\n    }\n\n    if (null != hyper_min) {\n      sim.setHyperbolicTfFactors(hyper_min, hyper_max, hyper_base, hyper_offset);\n    }\n\n    if (null != baseline_min) {\n      sim.setBaselineTfFactors(baseline_base, baseline_min);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"60e4efc947592a22b8b79c8b7a18bfb8f1eb89b9","date":1419431639,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/similarities/SweetSpotSimilarityFactory#init(SolrParams).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/similarities/SweetSpotSimilarityFactory#init(SolrParams).mjava","sourceNew":"  @Override\n  public void init(SolrParams params) {\n    super.init(params);\n\n    Integer ln_min = params.getInt(\"lengthNormMin\");\n    Integer ln_max = params.getInt(\"lengthNormMax\");\n    Float ln_steep = params.getFloat(\"lengthNormSteepness\");\n    if (! allOrNoneNull(ln_min, ln_max, ln_steep)) {\n      throw new SolrException(SERVER_ERROR, \"Overriding default lengthNorm settings requires all to be specified: lengthNormMin, lengthNormMax, lengthNormSteepness\");\n    }\n\n    Float hyper_min = params.getFloat(\"hyperbolicTfMin\");\n    Float hyper_max = params.getFloat(\"hyperbolicTfMax\");\n    Double hyper_base = params.getDouble(\"hyperbolicTfBase\");\n    Float hyper_offset = params.getFloat(\"hyperbolicTfOffset\");\n    if (! allOrNoneNull(hyper_min, hyper_max, hyper_base, hyper_offset)) {\n      throw new SolrException(SERVER_ERROR, \"Overriding default hyperbolicTf settings requires all to be specified: hyperbolicTfMin, hyperbolicTfMax, hyperbolicTfBase, hyperbolicTfOffset\");\n    }\n\n    Float baseline_base = params.getFloat(\"baselineTfBase\");\n    Float baseline_min = params.getFloat(\"baselineTfMin\");\n    if (! allOrNoneNull(baseline_min, baseline_base)) {\n      throw new SolrException(SERVER_ERROR, \"Overriding default baselineTf settings requires all to be specified: baselineTfBase, baselineTfMin\");\n    }\n\n    // sanity check that they aren't trying to use two diff tf impls\n    if ((null != hyper_min) && (null != baseline_min)) {\n      throw new SolrException(SERVER_ERROR, \"Can not mix hyperbolicTf settings with baselineTf settings\");\n    }\n\n    // pick Similarity impl based on whether hyper tf settings are set\n    sim = (null != hyper_min) ? new HyperbolicSweetSpotSimilarity() \n      : new SweetSpotSimilarity();\n    \n    if (null != ln_min) {\n      // overlaps already handled by super factory\n      sim.setLengthNormFactors(ln_min, ln_max, ln_steep, this.discountOverlaps);\n    }\n\n    if (null != hyper_min) {\n      sim.setHyperbolicTfFactors(hyper_min, hyper_max, hyper_base, hyper_offset);\n    }\n\n    if (null != baseline_min) {\n      sim.setBaselineTfFactors(baseline_base, baseline_min);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void init(SolrParams params) {\n    super.init(params);\n\n    Integer ln_min = params.getInt(\"lengthNormMin\");\n    Integer ln_max = params.getInt(\"lengthNormMax\");\n    Float ln_steep = params.getFloat(\"lengthNormSteepness\");\n    if (! allOrNoneNull(ln_min, ln_max, ln_steep)) {\n      throw new SolrException(SERVER_ERROR, \"Overriding default lengthNorm settings requires all to be specified: lengthNormMin, lengthNormMax, lengthNormSteepness\");\n    }\n\n    Float hyper_min = params.getFloat(\"hyperbolicTfMin\");\n    Float hyper_max = params.getFloat(\"hyperbolicTfMax\");\n    Double hyper_base = params.getDouble(\"hyperbolicTfBase\");\n    Float hyper_offset = params.getFloat(\"hyperbolicTfOffset\");\n    if (! allOrNoneNull(hyper_min, hyper_max, hyper_base, hyper_offset)) {\n      throw new SolrException(SERVER_ERROR, \"Overriding default hyperbolicTf settings requires all to be specified: hyperbolicTfMin, hyperbolicTfMax, hyperbolicTfBase, hyperbolicTfOffset\");\n    }\n\n    Float baseline_base = params.getFloat(\"baselineTfBase\");\n    Float baseline_min = params.getFloat(\"baselineTfMin\");\n    if (! allOrNoneNull(baseline_min, baseline_base)) {\n      throw new SolrException(SERVER_ERROR, \"Overriding default baselineTf settings requires all to be specified: baselineTfBase, baselineTfMin\");\n    }\n\n    // sanity check that they aren't trying to use two diff tf impls\n    if ((null != hyper_min) && (null != baseline_min)) {\n      throw new SolrException(SERVER_ERROR, \"Can not mix hyperbolicTf settings with baselineTf settings\");\n    }\n\n    // pick Similarity impl based on wether hyper tf settings are set\n    sim = (null != hyper_min) ? new HyperbolicSweetSpotSimilarity() \n      : new SweetSpotSimilarity();\n    \n    if (null != ln_min) {\n      // overlaps already handled by super factory\n      sim.setLengthNormFactors(ln_min, ln_max, ln_steep, this.discountOverlaps);\n    }\n\n    if (null != hyper_min) {\n      sim.setHyperbolicTfFactors(hyper_min, hyper_max, hyper_base, hyper_offset);\n    }\n\n    if (null != baseline_min) {\n      sim.setBaselineTfFactors(baseline_base, baseline_min);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"81ac83661cf5972c111e31e4249749b6506d5f18":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["60e4efc947592a22b8b79c8b7a18bfb8f1eb89b9"],"60e4efc947592a22b8b79c8b7a18bfb8f1eb89b9":["81ac83661cf5972c111e31e4249749b6506d5f18"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["81ac83661cf5972c111e31e4249749b6506d5f18"],"81ac83661cf5972c111e31e4249749b6506d5f18":["60e4efc947592a22b8b79c8b7a18bfb8f1eb89b9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"60e4efc947592a22b8b79c8b7a18bfb8f1eb89b9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}