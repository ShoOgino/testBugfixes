{"path":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testFieldCacheReuseAfterReopen().mjava","commits":[{"id":"83e99d44c4a660a48c0fcc7a0108ad0a56dc2f87","date":1328967626,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testFieldCacheReuseAfterReopen().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexReader#testFieldCacheReuseAfterReopen().mjava","sourceNew":"  // LUCENE-1579: Ensure that on a reopened reader, that any\n  // shared segments reuse the doc values arrays in\n  // FieldCache\n  public void testFieldCacheReuseAfterReopen() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    Document doc = new Document();\n    doc.add(newField(\"number\", \"17\", StringField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n    writer.commit();\n  \n    // Open reader1\n    DirectoryReader r = DirectoryReader.open(dir);\n    AtomicReader r1 = getOnlySegmentReader(r);\n    final int[] ints = FieldCache.DEFAULT.getInts(r1, \"number\", false);\n    assertEquals(1, ints.length);\n    assertEquals(17, ints[0]);\n  \n    // Add new segment\n    writer.addDocument(doc);\n    writer.commit();\n  \n    // Reopen reader1 --> reader2\n    DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n    assertNotNull(r2);\n    r.close();\n    AtomicReader sub0 = r2.getSequentialSubReaders()[0];\n    final int[] ints2 = FieldCache.DEFAULT.getInts(sub0, \"number\", false);\n    r2.close();\n    assertTrue(ints == ints2);\n  \n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1579: Ensure that on a reopened reader, that any\n  // shared segments reuse the doc values arrays in\n  // FieldCache\n  public void testFieldCacheReuseAfterReopen() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    Document doc = new Document();\n    doc.add(newField(\"number\", \"17\", StringField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Open reader1\n    DirectoryReader r = DirectoryReader.open(dir);\n    AtomicReader r1 = getOnlySegmentReader(r);\n    final int[] ints = FieldCache.DEFAULT.getInts(r1, \"number\", false);\n    assertEquals(1, ints.length);\n    assertEquals(17, ints[0]);\n\n    // Add new segment\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Reopen reader1 --> reader2\n    DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n    assertNotNull(r2);\n    r.close();\n    AtomicReader sub0 = r2.getSequentialSubReaders()[0];\n    final int[] ints2 = FieldCache.DEFAULT.getInts(sub0, \"number\", false);\n    r2.close();\n    assertTrue(ints == ints2);\n\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testFieldCacheReuseAfterReopen().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testFieldCacheReuseAfterReopen().mjava","sourceNew":"  // LUCENE-1579: Ensure that on a reopened reader, that any\n  // shared segments reuse the doc values arrays in\n  // FieldCache\n  public void testFieldCacheReuseAfterReopen() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    Document doc = new Document();\n    doc.add(newField(\"number\", \"17\", StringField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n    writer.commit();\n  \n    // Open reader1\n    DirectoryReader r = DirectoryReader.open(dir);\n    AtomicReader r1 = getOnlySegmentReader(r);\n    final int[] ints = FieldCache.DEFAULT.getInts(r1, \"number\", false);\n    assertEquals(1, ints.length);\n    assertEquals(17, ints[0]);\n  \n    // Add new segment\n    writer.addDocument(doc);\n    writer.commit();\n  \n    // Reopen reader1 --> reader2\n    DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n    assertNotNull(r2);\n    r.close();\n    AtomicReader sub0 = r2.getSequentialSubReaders()[0];\n    final int[] ints2 = FieldCache.DEFAULT.getInts(sub0, \"number\", false);\n    r2.close();\n    assertTrue(ints == ints2);\n  \n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1579: Ensure that on a reopened reader, that any\n  // shared segments reuse the doc values arrays in\n  // FieldCache\n  public void testFieldCacheReuseAfterReopen() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    Document doc = new Document();\n    doc.add(newField(\"number\", \"17\", StringField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n    writer.commit();\n  \n    // Open reader1\n    DirectoryReader r = DirectoryReader.open(dir);\n    AtomicReader r1 = getOnlySegmentReader(r);\n    final int[] ints = FieldCache.DEFAULT.getInts(r1, \"number\", false);\n    assertEquals(1, ints.length);\n    assertEquals(17, ints[0]);\n  \n    // Add new segment\n    writer.addDocument(doc);\n    writer.commit();\n  \n    // Reopen reader1 --> reader2\n    DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n    assertNotNull(r2);\n    r.close();\n    AtomicReader sub0 = r2.getSequentialSubReaders()[0];\n    final int[] ints2 = FieldCache.DEFAULT.getInts(sub0, \"number\", false);\n    r2.close();\n    assertTrue(ints == ints2);\n  \n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"04f07771a2a7dd3a395700665ed839c3dae2def2","date":1339350139,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testFieldCacheReuseAfterReopen().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testFieldCacheReuseAfterReopen().mjava","sourceNew":"  // LUCENE-1579: Ensure that on a reopened reader, that any\n  // shared segments reuse the doc values arrays in\n  // FieldCache\n  public void testFieldCacheReuseAfterReopen() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    Document doc = new Document();\n    doc.add(newStringField(\"number\", \"17\", Field.Store.NO));\n    writer.addDocument(doc);\n    writer.commit();\n  \n    // Open reader1\n    DirectoryReader r = DirectoryReader.open(dir);\n    AtomicReader r1 = getOnlySegmentReader(r);\n    final int[] ints = FieldCache.DEFAULT.getInts(r1, \"number\", false);\n    assertEquals(1, ints.length);\n    assertEquals(17, ints[0]);\n  \n    // Add new segment\n    writer.addDocument(doc);\n    writer.commit();\n  \n    // Reopen reader1 --> reader2\n    DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n    assertNotNull(r2);\n    r.close();\n    AtomicReader sub0 = r2.getSequentialSubReaders()[0];\n    final int[] ints2 = FieldCache.DEFAULT.getInts(sub0, \"number\", false);\n    r2.close();\n    assertTrue(ints == ints2);\n  \n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1579: Ensure that on a reopened reader, that any\n  // shared segments reuse the doc values arrays in\n  // FieldCache\n  public void testFieldCacheReuseAfterReopen() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    Document doc = new Document();\n    doc.add(newField(\"number\", \"17\", StringField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n    writer.commit();\n  \n    // Open reader1\n    DirectoryReader r = DirectoryReader.open(dir);\n    AtomicReader r1 = getOnlySegmentReader(r);\n    final int[] ints = FieldCache.DEFAULT.getInts(r1, \"number\", false);\n    assertEquals(1, ints.length);\n    assertEquals(17, ints[0]);\n  \n    // Add new segment\n    writer.addDocument(doc);\n    writer.commit();\n  \n    // Reopen reader1 --> reader2\n    DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n    assertNotNull(r2);\n    r.close();\n    AtomicReader sub0 = r2.getSequentialSubReaders()[0];\n    final int[] ints2 = FieldCache.DEFAULT.getInts(sub0, \"number\", false);\n    r2.close();\n    assertTrue(ints == ints2);\n  \n    writer.close();\n    dir.close();\n  }\n\n","bugFix":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c","date":1340090669,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testFieldCacheReuseAfterReopen().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testFieldCacheReuseAfterReopen().mjava","sourceNew":"  // LUCENE-1579: Ensure that on a reopened reader, that any\n  // shared segments reuse the doc values arrays in\n  // FieldCache\n  public void testFieldCacheReuseAfterReopen() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    Document doc = new Document();\n    doc.add(newStringField(\"number\", \"17\", Field.Store.NO));\n    writer.addDocument(doc);\n    writer.commit();\n  \n    // Open reader1\n    DirectoryReader r = DirectoryReader.open(dir);\n    AtomicReader r1 = getOnlySegmentReader(r);\n    final int[] ints = FieldCache.DEFAULT.getInts(r1, \"number\", false);\n    assertEquals(1, ints.length);\n    assertEquals(17, ints[0]);\n  \n    // Add new segment\n    writer.addDocument(doc);\n    writer.commit();\n  \n    // Reopen reader1 --> reader2\n    DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n    assertNotNull(r2);\n    r.close();\n    AtomicReader sub0 = r2.getSequentialSubReaders().get(0);\n    final int[] ints2 = FieldCache.DEFAULT.getInts(sub0, \"number\", false);\n    r2.close();\n    assertTrue(ints == ints2);\n  \n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1579: Ensure that on a reopened reader, that any\n  // shared segments reuse the doc values arrays in\n  // FieldCache\n  public void testFieldCacheReuseAfterReopen() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    Document doc = new Document();\n    doc.add(newStringField(\"number\", \"17\", Field.Store.NO));\n    writer.addDocument(doc);\n    writer.commit();\n  \n    // Open reader1\n    DirectoryReader r = DirectoryReader.open(dir);\n    AtomicReader r1 = getOnlySegmentReader(r);\n    final int[] ints = FieldCache.DEFAULT.getInts(r1, \"number\", false);\n    assertEquals(1, ints.length);\n    assertEquals(17, ints[0]);\n  \n    // Add new segment\n    writer.addDocument(doc);\n    writer.commit();\n  \n    // Reopen reader1 --> reader2\n    DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n    assertNotNull(r2);\n    r.close();\n    AtomicReader sub0 = r2.getSequentialSubReaders()[0];\n    final int[] ints2 = FieldCache.DEFAULT.getInts(sub0, \"number\", false);\n    r2.close();\n    assertTrue(ints == ints2);\n  \n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":["ced66195b26fdb1f77ee00e2a77ec6918dedd766"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ced66195b26fdb1f77ee00e2a77ec6918dedd766","date":1344948886,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testFieldCacheReuseAfterReopen().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testFieldCacheReuseAfterReopen().mjava","sourceNew":"  // LUCENE-1579: Ensure that on a reopened reader, that any\n  // shared segments reuse the doc values arrays in\n  // FieldCache\n  public void testFieldCacheReuseAfterReopen() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    Document doc = new Document();\n    doc.add(newStringField(\"number\", \"17\", Field.Store.NO));\n    writer.addDocument(doc);\n    writer.commit();\n  \n    // Open reader1\n    DirectoryReader r = DirectoryReader.open(dir);\n    AtomicReader r1 = getOnlySegmentReader(r);\n    final int[] ints = FieldCache.DEFAULT.getInts(r1, \"number\", false);\n    assertEquals(1, ints.length);\n    assertEquals(17, ints[0]);\n  \n    // Add new segment\n    writer.addDocument(doc);\n    writer.commit();\n  \n    // Reopen reader1 --> reader2\n    DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n    assertNotNull(r2);\n    r.close();\n    AtomicReader sub0 = r2.leaves().get(0).reader();\n    final int[] ints2 = FieldCache.DEFAULT.getInts(sub0, \"number\", false);\n    r2.close();\n    assertTrue(ints == ints2);\n  \n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1579: Ensure that on a reopened reader, that any\n  // shared segments reuse the doc values arrays in\n  // FieldCache\n  public void testFieldCacheReuseAfterReopen() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    Document doc = new Document();\n    doc.add(newStringField(\"number\", \"17\", Field.Store.NO));\n    writer.addDocument(doc);\n    writer.commit();\n  \n    // Open reader1\n    DirectoryReader r = DirectoryReader.open(dir);\n    AtomicReader r1 = getOnlySegmentReader(r);\n    final int[] ints = FieldCache.DEFAULT.getInts(r1, \"number\", false);\n    assertEquals(1, ints.length);\n    assertEquals(17, ints[0]);\n  \n    // Add new segment\n    writer.addDocument(doc);\n    writer.commit();\n  \n    // Reopen reader1 --> reader2\n    DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n    assertNotNull(r2);\n    r.close();\n    AtomicReader sub0 = r2.getSequentialSubReaders().get(0);\n    final int[] ints2 = FieldCache.DEFAULT.getInts(sub0, \"number\", false);\n    r2.close();\n    assertTrue(ints == ints2);\n  \n    writer.close();\n    dir.close();\n  }\n\n","bugFix":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","date":1345029782,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testFieldCacheReuseAfterReopen().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testFieldCacheReuseAfterReopen().mjava","sourceNew":"  // LUCENE-1579: Ensure that on a reopened reader, that any\n  // shared segments reuse the doc values arrays in\n  // FieldCache\n  public void testFieldCacheReuseAfterReopen() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    Document doc = new Document();\n    doc.add(newStringField(\"number\", \"17\", Field.Store.NO));\n    writer.addDocument(doc);\n    writer.commit();\n  \n    // Open reader1\n    DirectoryReader r = DirectoryReader.open(dir);\n    AtomicReader r1 = getOnlySegmentReader(r);\n    final int[] ints = FieldCache.DEFAULT.getInts(r1, \"number\", false);\n    assertEquals(1, ints.length);\n    assertEquals(17, ints[0]);\n  \n    // Add new segment\n    writer.addDocument(doc);\n    writer.commit();\n  \n    // Reopen reader1 --> reader2\n    DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n    assertNotNull(r2);\n    r.close();\n    AtomicReader sub0 = r2.leaves().get(0).reader();\n    final int[] ints2 = FieldCache.DEFAULT.getInts(sub0, \"number\", false);\n    r2.close();\n    assertTrue(ints == ints2);\n  \n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1579: Ensure that on a reopened reader, that any\n  // shared segments reuse the doc values arrays in\n  // FieldCache\n  public void testFieldCacheReuseAfterReopen() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    Document doc = new Document();\n    doc.add(newStringField(\"number\", \"17\", Field.Store.NO));\n    writer.addDocument(doc);\n    writer.commit();\n  \n    // Open reader1\n    DirectoryReader r = DirectoryReader.open(dir);\n    AtomicReader r1 = getOnlySegmentReader(r);\n    final int[] ints = FieldCache.DEFAULT.getInts(r1, \"number\", false);\n    assertEquals(1, ints.length);\n    assertEquals(17, ints[0]);\n  \n    // Add new segment\n    writer.addDocument(doc);\n    writer.commit();\n  \n    // Reopen reader1 --> reader2\n    DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n    assertNotNull(r2);\n    r.close();\n    AtomicReader sub0 = r2.getSequentialSubReaders().get(0);\n    final int[] ints2 = FieldCache.DEFAULT.getInts(sub0, \"number\", false);\n    r2.close();\n    assertTrue(ints == ints2);\n  \n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3c188105a9aae04f56c24996f98f8333fc825d2e","date":1345031914,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testFieldCacheReuseAfterReopen().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testFieldCacheReuseAfterReopen().mjava","sourceNew":"  // LUCENE-1579: Ensure that on a reopened reader, that any\n  // shared segments reuse the doc values arrays in\n  // FieldCache\n  public void testFieldCacheReuseAfterReopen() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    Document doc = new Document();\n    doc.add(newStringField(\"number\", \"17\", Field.Store.NO));\n    writer.addDocument(doc);\n    writer.commit();\n  \n    // Open reader1\n    DirectoryReader r = DirectoryReader.open(dir);\n    AtomicReader r1 = getOnlySegmentReader(r);\n    final int[] ints = FieldCache.DEFAULT.getInts(r1, \"number\", false);\n    assertEquals(1, ints.length);\n    assertEquals(17, ints[0]);\n  \n    // Add new segment\n    writer.addDocument(doc);\n    writer.commit();\n  \n    // Reopen reader1 --> reader2\n    DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n    assertNotNull(r2);\n    r.close();\n    AtomicReader sub0 = r2.leaves().get(0).reader();\n    final int[] ints2 = FieldCache.DEFAULT.getInts(sub0, \"number\", false);\n    r2.close();\n    assertTrue(ints == ints2);\n  \n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1579: Ensure that on a reopened reader, that any\n  // shared segments reuse the doc values arrays in\n  // FieldCache\n  public void testFieldCacheReuseAfterReopen() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    Document doc = new Document();\n    doc.add(newStringField(\"number\", \"17\", Field.Store.NO));\n    writer.addDocument(doc);\n    writer.commit();\n  \n    // Open reader1\n    DirectoryReader r = DirectoryReader.open(dir);\n    AtomicReader r1 = getOnlySegmentReader(r);\n    final int[] ints = FieldCache.DEFAULT.getInts(r1, \"number\", false);\n    assertEquals(1, ints.length);\n    assertEquals(17, ints[0]);\n  \n    // Add new segment\n    writer.addDocument(doc);\n    writer.commit();\n  \n    // Reopen reader1 --> reader2\n    DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n    assertNotNull(r2);\n    r.close();\n    AtomicReader sub0 = r2.getSequentialSubReaders().get(0);\n    final int[] ints2 = FieldCache.DEFAULT.getInts(sub0, \"number\", false);\n    r2.close();\n    assertTrue(ints == ints2);\n  \n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1c93396a1df03720cb20e2c2f513a6fa59b21e4c","date":1345032673,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testFieldCacheReuseAfterReopen().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testFieldCacheReuseAfterReopen().mjava","sourceNew":"  // LUCENE-1579: Ensure that on a reopened reader, that any\n  // shared segments reuse the doc values arrays in\n  // FieldCache\n  public void testFieldCacheReuseAfterReopen() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    Document doc = new Document();\n    doc.add(newStringField(\"number\", \"17\", Field.Store.NO));\n    writer.addDocument(doc);\n    writer.commit();\n  \n    // Open reader1\n    DirectoryReader r = DirectoryReader.open(dir);\n    AtomicReader r1 = getOnlySegmentReader(r);\n    final int[] ints = FieldCache.DEFAULT.getInts(r1, \"number\", false);\n    assertEquals(1, ints.length);\n    assertEquals(17, ints[0]);\n  \n    // Add new segment\n    writer.addDocument(doc);\n    writer.commit();\n  \n    // Reopen reader1 --> reader2\n    DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n    assertNotNull(r2);\n    r.close();\n    AtomicReader sub0 = r2.getSequentialSubReaders().get(0);\n    final int[] ints2 = FieldCache.DEFAULT.getInts(sub0, \"number\", false);\n    r2.close();\n    assertTrue(ints == ints2);\n  \n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1579: Ensure that on a reopened reader, that any\n  // shared segments reuse the doc values arrays in\n  // FieldCache\n  public void testFieldCacheReuseAfterReopen() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    Document doc = new Document();\n    doc.add(newStringField(\"number\", \"17\", Field.Store.NO));\n    writer.addDocument(doc);\n    writer.commit();\n  \n    // Open reader1\n    DirectoryReader r = DirectoryReader.open(dir);\n    AtomicReader r1 = getOnlySegmentReader(r);\n    final int[] ints = FieldCache.DEFAULT.getInts(r1, \"number\", false);\n    assertEquals(1, ints.length);\n    assertEquals(17, ints[0]);\n  \n    // Add new segment\n    writer.addDocument(doc);\n    writer.commit();\n  \n    // Reopen reader1 --> reader2\n    DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n    assertNotNull(r2);\n    r.close();\n    AtomicReader sub0 = r2.leaves().get(0).reader();\n    final int[] ints2 = FieldCache.DEFAULT.getInts(sub0, \"number\", false);\n    r2.close();\n    assertTrue(ints == ints2);\n  \n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b05c56a41b733e02a189c48895922b5bd8c7f3d1","date":1345033322,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testFieldCacheReuseAfterReopen().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testFieldCacheReuseAfterReopen().mjava","sourceNew":"  // LUCENE-1579: Ensure that on a reopened reader, that any\n  // shared segments reuse the doc values arrays in\n  // FieldCache\n  public void testFieldCacheReuseAfterReopen() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    Document doc = new Document();\n    doc.add(newStringField(\"number\", \"17\", Field.Store.NO));\n    writer.addDocument(doc);\n    writer.commit();\n  \n    // Open reader1\n    DirectoryReader r = DirectoryReader.open(dir);\n    AtomicReader r1 = getOnlySegmentReader(r);\n    final int[] ints = FieldCache.DEFAULT.getInts(r1, \"number\", false);\n    assertEquals(1, ints.length);\n    assertEquals(17, ints[0]);\n  \n    // Add new segment\n    writer.addDocument(doc);\n    writer.commit();\n  \n    // Reopen reader1 --> reader2\n    DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n    assertNotNull(r2);\n    r.close();\n    AtomicReader sub0 = r2.leaves().get(0).reader();\n    final int[] ints2 = FieldCache.DEFAULT.getInts(sub0, \"number\", false);\n    r2.close();\n    assertTrue(ints == ints2);\n  \n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1579: Ensure that on a reopened reader, that any\n  // shared segments reuse the doc values arrays in\n  // FieldCache\n  public void testFieldCacheReuseAfterReopen() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    Document doc = new Document();\n    doc.add(newStringField(\"number\", \"17\", Field.Store.NO));\n    writer.addDocument(doc);\n    writer.commit();\n  \n    // Open reader1\n    DirectoryReader r = DirectoryReader.open(dir);\n    AtomicReader r1 = getOnlySegmentReader(r);\n    final int[] ints = FieldCache.DEFAULT.getInts(r1, \"number\", false);\n    assertEquals(1, ints.length);\n    assertEquals(17, ints[0]);\n  \n    // Add new segment\n    writer.addDocument(doc);\n    writer.commit();\n  \n    // Reopen reader1 --> reader2\n    DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n    assertNotNull(r2);\n    r.close();\n    AtomicReader sub0 = r2.getSequentialSubReaders().get(0);\n    final int[] ints2 = FieldCache.DEFAULT.getInts(sub0, \"number\", false);\n    r2.close();\n    assertTrue(ints == ints2);\n  \n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f45457a742a53533c348c4b990b1c579ff364467","date":1353197071,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testFieldCacheReuseAfterReopen().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testFieldCacheReuseAfterReopen().mjava","sourceNew":"  // LUCENE-1579: Ensure that on a reopened reader, that any\n  // shared segments reuse the doc values arrays in\n  // FieldCache\n  public void testFieldCacheReuseAfterReopen() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    Document doc = new Document();\n    doc.add(newStringField(\"number\", \"17\", Field.Store.NO));\n    writer.addDocument(doc);\n    writer.commit();\n  \n    // Open reader1\n    DirectoryReader r = DirectoryReader.open(dir);\n    AtomicReader r1 = getOnlySegmentReader(r);\n    final FieldCache.Ints ints = FieldCache.DEFAULT.getInts(r1, \"number\", false);\n    assertEquals(17, ints.get(0));\n  \n    // Add new segment\n    writer.addDocument(doc);\n    writer.commit();\n  \n    // Reopen reader1 --> reader2\n    DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n    assertNotNull(r2);\n    r.close();\n    AtomicReader sub0 = r2.leaves().get(0).reader();\n    final FieldCache.Ints ints2 = FieldCache.DEFAULT.getInts(sub0, \"number\", false);\n    r2.close();\n    assertTrue(ints == ints2);\n  \n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1579: Ensure that on a reopened reader, that any\n  // shared segments reuse the doc values arrays in\n  // FieldCache\n  public void testFieldCacheReuseAfterReopen() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    Document doc = new Document();\n    doc.add(newStringField(\"number\", \"17\", Field.Store.NO));\n    writer.addDocument(doc);\n    writer.commit();\n  \n    // Open reader1\n    DirectoryReader r = DirectoryReader.open(dir);\n    AtomicReader r1 = getOnlySegmentReader(r);\n    final int[] ints = FieldCache.DEFAULT.getInts(r1, \"number\", false);\n    assertEquals(1, ints.length);\n    assertEquals(17, ints[0]);\n  \n    // Add new segment\n    writer.addDocument(doc);\n    writer.commit();\n  \n    // Reopen reader1 --> reader2\n    DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n    assertNotNull(r2);\n    r.close();\n    AtomicReader sub0 = r2.leaves().get(0).reader();\n    final int[] ints2 = FieldCache.DEFAULT.getInts(sub0, \"number\", false);\n    r2.close();\n    assertTrue(ints == ints2);\n  \n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testFieldCacheReuseAfterReopen().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testFieldCacheReuseAfterReopen().mjava","sourceNew":"  // LUCENE-1579: Ensure that on a reopened reader, that any\n  // shared segments reuse the doc values arrays in\n  // FieldCache\n  public void testFieldCacheReuseAfterReopen() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    Document doc = new Document();\n    doc.add(newStringField(\"number\", \"17\", Field.Store.NO));\n    writer.addDocument(doc);\n    writer.commit();\n  \n    // Open reader1\n    DirectoryReader r = DirectoryReader.open(dir);\n    AtomicReader r1 = getOnlySegmentReader(r);\n    final FieldCache.Ints ints = FieldCache.DEFAULT.getInts(r1, \"number\", false);\n    assertEquals(17, ints.get(0));\n  \n    // Add new segment\n    writer.addDocument(doc);\n    writer.commit();\n  \n    // Reopen reader1 --> reader2\n    DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n    assertNotNull(r2);\n    r.close();\n    AtomicReader sub0 = r2.leaves().get(0).reader();\n    final FieldCache.Ints ints2 = FieldCache.DEFAULT.getInts(sub0, \"number\", false);\n    r2.close();\n    assertTrue(ints == ints2);\n  \n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1579: Ensure that on a reopened reader, that any\n  // shared segments reuse the doc values arrays in\n  // FieldCache\n  public void testFieldCacheReuseAfterReopen() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    Document doc = new Document();\n    doc.add(newStringField(\"number\", \"17\", Field.Store.NO));\n    writer.addDocument(doc);\n    writer.commit();\n  \n    // Open reader1\n    DirectoryReader r = DirectoryReader.open(dir);\n    AtomicReader r1 = getOnlySegmentReader(r);\n    final int[] ints = FieldCache.DEFAULT.getInts(r1, \"number\", false);\n    assertEquals(1, ints.length);\n    assertEquals(17, ints[0]);\n  \n    // Add new segment\n    writer.addDocument(doc);\n    writer.commit();\n  \n    // Reopen reader1 --> reader2\n    DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n    assertNotNull(r2);\n    r.close();\n    AtomicReader sub0 = r2.leaves().get(0).reader();\n    final int[] ints2 = FieldCache.DEFAULT.getInts(sub0, \"number\", false);\n    r2.close();\n    assertTrue(ints == ints2);\n  \n    writer.close();\n    dir.close();\n  }\n\n","bugFix":["c302627a03bb83cf186ac5d7d3239e0c764f4432","382fe3a6ca9745891afebda9b9a57cc158305545"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"59a0020b413d44dd79d85d7a66ed5004265fb453","date":1371758877,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testFieldCacheReuseAfterReopen().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testFieldCacheReuseAfterReopen().mjava","sourceNew":"  // LUCENE-1579: Ensure that on a reopened reader, that any\n  // shared segments reuse the doc values arrays in\n  // FieldCache\n  public void testFieldCacheReuseAfterReopen() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    Document doc = new Document();\n    doc.add(new IntField(\"number\", 17, Field.Store.NO));\n    writer.addDocument(doc);\n    writer.commit();\n  \n    // Open reader1\n    DirectoryReader r = DirectoryReader.open(dir);\n    AtomicReader r1 = getOnlySegmentReader(r);\n    final FieldCache.Ints ints = FieldCache.DEFAULT.getInts(r1, \"number\", false);\n    assertEquals(17, ints.get(0));\n  \n    // Add new segment\n    writer.addDocument(doc);\n    writer.commit();\n  \n    // Reopen reader1 --> reader2\n    DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n    assertNotNull(r2);\n    r.close();\n    AtomicReader sub0 = r2.leaves().get(0).reader();\n    final FieldCache.Ints ints2 = FieldCache.DEFAULT.getInts(sub0, \"number\", false);\n    r2.close();\n    assertTrue(ints == ints2);\n  \n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1579: Ensure that on a reopened reader, that any\n  // shared segments reuse the doc values arrays in\n  // FieldCache\n  public void testFieldCacheReuseAfterReopen() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    Document doc = new Document();\n    doc.add(newStringField(\"number\", \"17\", Field.Store.NO));\n    writer.addDocument(doc);\n    writer.commit();\n  \n    // Open reader1\n    DirectoryReader r = DirectoryReader.open(dir);\n    AtomicReader r1 = getOnlySegmentReader(r);\n    final FieldCache.Ints ints = FieldCache.DEFAULT.getInts(r1, \"number\", false);\n    assertEquals(17, ints.get(0));\n  \n    // Add new segment\n    writer.addDocument(doc);\n    writer.commit();\n  \n    // Reopen reader1 --> reader2\n    DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n    assertNotNull(r2);\n    r.close();\n    AtomicReader sub0 = r2.leaves().get(0).reader();\n    final FieldCache.Ints ints2 = FieldCache.DEFAULT.getInts(sub0, \"number\", false);\n    r2.close();\n    assertTrue(ints == ints2);\n  \n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testFieldCacheReuseAfterReopen().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testFieldCacheReuseAfterReopen().mjava","sourceNew":"  // LUCENE-1579: Ensure that on a reopened reader, that any\n  // shared segments reuse the doc values arrays in\n  // FieldCache\n  public void testFieldCacheReuseAfterReopen() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    Document doc = new Document();\n    doc.add(new IntField(\"number\", 17, Field.Store.NO));\n    writer.addDocument(doc);\n    writer.commit();\n  \n    // Open reader1\n    DirectoryReader r = DirectoryReader.open(dir);\n    AtomicReader r1 = getOnlySegmentReader(r);\n    final FieldCache.Ints ints = FieldCache.DEFAULT.getInts(r1, \"number\", false);\n    assertEquals(17, ints.get(0));\n  \n    // Add new segment\n    writer.addDocument(doc);\n    writer.commit();\n  \n    // Reopen reader1 --> reader2\n    DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n    assertNotNull(r2);\n    r.close();\n    AtomicReader sub0 = r2.leaves().get(0).reader();\n    final FieldCache.Ints ints2 = FieldCache.DEFAULT.getInts(sub0, \"number\", false);\n    r2.close();\n    assertTrue(ints == ints2);\n  \n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1579: Ensure that on a reopened reader, that any\n  // shared segments reuse the doc values arrays in\n  // FieldCache\n  public void testFieldCacheReuseAfterReopen() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    Document doc = new Document();\n    doc.add(newStringField(\"number\", \"17\", Field.Store.NO));\n    writer.addDocument(doc);\n    writer.commit();\n  \n    // Open reader1\n    DirectoryReader r = DirectoryReader.open(dir);\n    AtomicReader r1 = getOnlySegmentReader(r);\n    final FieldCache.Ints ints = FieldCache.DEFAULT.getInts(r1, \"number\", false);\n    assertEquals(17, ints.get(0));\n  \n    // Add new segment\n    writer.addDocument(doc);\n    writer.commit();\n  \n    // Reopen reader1 --> reader2\n    DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n    assertNotNull(r2);\n    r.close();\n    AtomicReader sub0 = r2.leaves().get(0).reader();\n    final FieldCache.Ints ints2 = FieldCache.DEFAULT.getInts(sub0, \"number\", false);\n    r2.close();\n    assertTrue(ints == ints2);\n  \n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testFieldCacheReuseAfterReopen().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testFieldCacheReuseAfterReopen().mjava","sourceNew":"  // LUCENE-1579: Ensure that on a reopened reader, that any\n  // shared segments reuse the doc values arrays in\n  // FieldCache\n  public void testFieldCacheReuseAfterReopen() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    Document doc = new Document();\n    doc.add(new IntField(\"number\", 17, Field.Store.NO));\n    writer.addDocument(doc);\n    writer.commit();\n  \n    // Open reader1\n    DirectoryReader r = DirectoryReader.open(dir);\n    AtomicReader r1 = getOnlySegmentReader(r);\n    final FieldCache.Ints ints = FieldCache.DEFAULT.getInts(r1, \"number\", false);\n    assertEquals(17, ints.get(0));\n  \n    // Add new segment\n    writer.addDocument(doc);\n    writer.commit();\n  \n    // Reopen reader1 --> reader2\n    DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n    assertNotNull(r2);\n    r.close();\n    AtomicReader sub0 = r2.leaves().get(0).reader();\n    final FieldCache.Ints ints2 = FieldCache.DEFAULT.getInts(sub0, \"number\", false);\n    r2.close();\n    assertTrue(ints == ints2);\n  \n    writer.shutdown();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1579: Ensure that on a reopened reader, that any\n  // shared segments reuse the doc values arrays in\n  // FieldCache\n  public void testFieldCacheReuseAfterReopen() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    Document doc = new Document();\n    doc.add(new IntField(\"number\", 17, Field.Store.NO));\n    writer.addDocument(doc);\n    writer.commit();\n  \n    // Open reader1\n    DirectoryReader r = DirectoryReader.open(dir);\n    AtomicReader r1 = getOnlySegmentReader(r);\n    final FieldCache.Ints ints = FieldCache.DEFAULT.getInts(r1, \"number\", false);\n    assertEquals(17, ints.get(0));\n  \n    // Add new segment\n    writer.addDocument(doc);\n    writer.commit();\n  \n    // Reopen reader1 --> reader2\n    DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n    assertNotNull(r2);\n    r.close();\n    AtomicReader sub0 = r2.leaves().get(0).reader();\n    final FieldCache.Ints ints2 = FieldCache.DEFAULT.getInts(sub0, \"number\", false);\n    r2.close();\n    assertTrue(ints == ints2);\n  \n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","date":1399816179,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheReopen#testFieldCacheReuseAfterReopen().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testFieldCacheReuseAfterReopen().mjava","sourceNew":"  // LUCENE-1579: Ensure that on a reopened reader, that any\n  // shared segments reuse the doc values arrays in\n  // FieldCache\n  public void testFieldCacheReuseAfterReopen() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    Document doc = new Document();\n    doc.add(new IntField(\"number\", 17, Field.Store.NO));\n    writer.addDocument(doc);\n    writer.commit();\n  \n    // Open reader1\n    DirectoryReader r = DirectoryReader.open(dir);\n    AtomicReader r1 = getOnlySegmentReader(r);\n    final NumericDocValues ints = FieldCache.DEFAULT.getNumerics(r1, \"number\", FieldCache.NUMERIC_UTILS_INT_PARSER, false);\n    assertEquals(17, ints.get(0));\n  \n    // Add new segment\n    writer.addDocument(doc);\n    writer.commit();\n  \n    // Reopen reader1 --> reader2\n    DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n    assertNotNull(r2);\n    r.close();\n    AtomicReader sub0 = r2.leaves().get(0).reader();\n    final NumericDocValues ints2 = FieldCache.DEFAULT.getNumerics(sub0, \"number\", FieldCache.NUMERIC_UTILS_INT_PARSER, false);\n    r2.close();\n    assertTrue(ints == ints2);\n  \n    writer.shutdown();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1579: Ensure that on a reopened reader, that any\n  // shared segments reuse the doc values arrays in\n  // FieldCache\n  public void testFieldCacheReuseAfterReopen() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    Document doc = new Document();\n    doc.add(new IntField(\"number\", 17, Field.Store.NO));\n    writer.addDocument(doc);\n    writer.commit();\n  \n    // Open reader1\n    DirectoryReader r = DirectoryReader.open(dir);\n    AtomicReader r1 = getOnlySegmentReader(r);\n    final FieldCache.Ints ints = FieldCache.DEFAULT.getInts(r1, \"number\", false);\n    assertEquals(17, ints.get(0));\n  \n    // Add new segment\n    writer.addDocument(doc);\n    writer.commit();\n  \n    // Reopen reader1 --> reader2\n    DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n    assertNotNull(r2);\n    r.close();\n    AtomicReader sub0 = r2.leaves().get(0).reader();\n    final FieldCache.Ints ints2 = FieldCache.DEFAULT.getInts(sub0, \"number\", false);\n    r2.close();\n    assertTrue(ints == ints2);\n  \n    writer.shutdown();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":["8c146731a64debc22c115bbf11ee1a060aa7ea02","8c146731a64debc22c115bbf11ee1a060aa7ea02","8c146731a64debc22c115bbf11ee1a060aa7ea02"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"93dd449115a9247533e44bab47e8429e5dccbc6d","date":1400258396,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheReopen#testFieldCacheReuseAfterReopen().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testFieldCacheReuseAfterReopen().mjava","sourceNew":"  // LUCENE-1579: Ensure that on a reopened reader, that any\n  // shared segments reuse the doc values arrays in\n  // FieldCache\n  public void testFieldCacheReuseAfterReopen() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    Document doc = new Document();\n    doc.add(new IntField(\"number\", 17, Field.Store.NO));\n    writer.addDocument(doc);\n    writer.commit();\n  \n    // Open reader1\n    DirectoryReader r = DirectoryReader.open(dir);\n    AtomicReader r1 = getOnlySegmentReader(r);\n    final NumericDocValues ints = FieldCache.DEFAULT.getNumerics(r1, \"number\", FieldCache.NUMERIC_UTILS_INT_PARSER, false);\n    assertEquals(17, ints.get(0));\n  \n    // Add new segment\n    writer.addDocument(doc);\n    writer.commit();\n  \n    // Reopen reader1 --> reader2\n    DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n    assertNotNull(r2);\n    r.close();\n    AtomicReader sub0 = r2.leaves().get(0).reader();\n    final NumericDocValues ints2 = FieldCache.DEFAULT.getNumerics(sub0, \"number\", FieldCache.NUMERIC_UTILS_INT_PARSER, false);\n    r2.close();\n    assertTrue(ints == ints2);\n  \n    writer.shutdown();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1579: Ensure that on a reopened reader, that any\n  // shared segments reuse the doc values arrays in\n  // FieldCache\n  public void testFieldCacheReuseAfterReopen() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    Document doc = new Document();\n    doc.add(new IntField(\"number\", 17, Field.Store.NO));\n    writer.addDocument(doc);\n    writer.commit();\n  \n    // Open reader1\n    DirectoryReader r = DirectoryReader.open(dir);\n    AtomicReader r1 = getOnlySegmentReader(r);\n    final FieldCache.Ints ints = FieldCache.DEFAULT.getInts(r1, \"number\", false);\n    assertEquals(17, ints.get(0));\n  \n    // Add new segment\n    writer.addDocument(doc);\n    writer.commit();\n  \n    // Reopen reader1 --> reader2\n    DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n    assertNotNull(r2);\n    r.close();\n    AtomicReader sub0 = r2.leaves().get(0).reader();\n    final FieldCache.Ints ints2 = FieldCache.DEFAULT.getInts(sub0, \"number\", false);\n    r2.close();\n    assertTrue(ints == ints2);\n  \n    writer.shutdown();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"56572ec06f1407c066d6b7399413178b33176cd8","date":1400495675,"type":5,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheReopen#testFieldCacheReuseAfterReopen().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testFieldCacheReuseAfterReopen().mjava","sourceNew":"  // LUCENE-1579: Ensure that on a reopened reader, that any\n  // shared segments reuse the doc values arrays in\n  // FieldCache\n  public void testFieldCacheReuseAfterReopen() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    Document doc = new Document();\n    doc.add(new IntField(\"number\", 17, Field.Store.NO));\n    writer.addDocument(doc);\n    writer.commit();\n  \n    // Open reader1\n    DirectoryReader r = DirectoryReader.open(dir);\n    AtomicReader r1 = getOnlySegmentReader(r);\n    final NumericDocValues ints = FieldCache.DEFAULT.getNumerics(r1, \"number\", FieldCache.NUMERIC_UTILS_INT_PARSER, false);\n    assertEquals(17, ints.get(0));\n  \n    // Add new segment\n    writer.addDocument(doc);\n    writer.commit();\n  \n    // Reopen reader1 --> reader2\n    DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n    assertNotNull(r2);\n    r.close();\n    AtomicReader sub0 = r2.leaves().get(0).reader();\n    final NumericDocValues ints2 = FieldCache.DEFAULT.getNumerics(sub0, \"number\", FieldCache.NUMERIC_UTILS_INT_PARSER, false);\n    r2.close();\n    assertTrue(ints == ints2);\n  \n    writer.shutdown();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1579: Ensure that on a reopened reader, that any\n  // shared segments reuse the doc values arrays in\n  // FieldCache\n  public void testFieldCacheReuseAfterReopen() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    Document doc = new Document();\n    doc.add(new IntField(\"number\", 17, Field.Store.NO));\n    writer.addDocument(doc);\n    writer.commit();\n  \n    // Open reader1\n    DirectoryReader r = DirectoryReader.open(dir);\n    AtomicReader r1 = getOnlySegmentReader(r);\n    final FieldCache.Ints ints = FieldCache.DEFAULT.getInts(r1, \"number\", false);\n    assertEquals(17, ints.get(0));\n  \n    // Add new segment\n    writer.addDocument(doc);\n    writer.commit();\n  \n    // Reopen reader1 --> reader2\n    DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n    assertNotNull(r2);\n    r.close();\n    AtomicReader sub0 = r2.leaves().get(0).reader();\n    final FieldCache.Ints ints2 = FieldCache.DEFAULT.getInts(sub0, \"number\", false);\n    r2.close();\n    assertTrue(ints == ints2);\n  \n    writer.shutdown();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"83e99d44c4a660a48c0fcc7a0108ad0a56dc2f87":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["d4d69c535930b5cce125cff868d40f6373dc27d4","59a0020b413d44dd79d85d7a66ed5004265fb453"],"3c188105a9aae04f56c24996f98f8333fc825d2e":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c"],"4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"b05c56a41b733e02a189c48895922b5bd8c7f3d1":["1c93396a1df03720cb20e2c2f513a6fa59b21e4c","ced66195b26fdb1f77ee00e2a77ec6918dedd766"],"1c93396a1df03720cb20e2c2f513a6fa59b21e4c":["3c188105a9aae04f56c24996f98f8333fc825d2e"],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c","ced66195b26fdb1f77ee00e2a77ec6918dedd766"],"56572ec06f1407c066d6b7399413178b33176cd8":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a","93dd449115a9247533e44bab47e8429e5dccbc6d"],"f45457a742a53533c348c4b990b1c579ff364467":["ced66195b26fdb1f77ee00e2a77ec6918dedd766"],"04f07771a2a7dd3a395700665ed839c3dae2def2":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["ced66195b26fdb1f77ee00e2a77ec6918dedd766","f45457a742a53533c348c4b990b1c579ff364467"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a","b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"59a0020b413d44dd79d85d7a66ed5004265fb453":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["59a0020b413d44dd79d85d7a66ed5004265fb453"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["83e99d44c4a660a48c0fcc7a0108ad0a56dc2f87"],"ced66195b26fdb1f77ee00e2a77ec6918dedd766":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["93dd449115a9247533e44bab47e8429e5dccbc6d"]},"commit2Childs":{"83e99d44c4a660a48c0fcc7a0108ad0a56dc2f87":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"3c188105a9aae04f56c24996f98f8333fc825d2e":["1c93396a1df03720cb20e2c2f513a6fa59b21e4c"],"4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c":["3c188105a9aae04f56c24996f98f8333fc825d2e","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","ced66195b26fdb1f77ee00e2a77ec6918dedd766"],"b05c56a41b733e02a189c48895922b5bd8c7f3d1":[],"1c93396a1df03720cb20e2c2f513a6fa59b21e4c":["b05c56a41b733e02a189c48895922b5bd8c7f3d1"],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198":[],"56572ec06f1407c066d6b7399413178b33176cd8":[],"f45457a742a53533c348c4b990b1c579ff364467":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"04f07771a2a7dd3a395700665ed839c3dae2def2":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["37a0f60745e53927c4c876cfe5b5a58170f0646c","59a0020b413d44dd79d85d7a66ed5004265fb453"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["56572ec06f1407c066d6b7399413178b33176cd8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["83e99d44c4a660a48c0fcc7a0108ad0a56dc2f87"],"59a0020b413d44dd79d85d7a66ed5004265fb453":["37a0f60745e53927c4c876cfe5b5a58170f0646c","ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","56572ec06f1407c066d6b7399413178b33176cd8","93dd449115a9247533e44bab47e8429e5dccbc6d"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"ced66195b26fdb1f77ee00e2a77ec6918dedd766":["b05c56a41b733e02a189c48895922b5bd8c7f3d1","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","f45457a742a53533c348c4b990b1c579ff364467","d4d69c535930b5cce125cff868d40f6373dc27d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","b05c56a41b733e02a189c48895922b5bd8c7f3d1","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","56572ec06f1407c066d6b7399413178b33176cd8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}