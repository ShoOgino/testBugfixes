{"path":"solr/contrib/extraction/src/java/org/apache/solr/handler/extraction/SolrContentHandler#addField(String,String,String[]).mjava","commits":[{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/extraction/src/java/org/apache/solr/handler/extraction/SolrContentHandler#addField(String,String,String[]).mjava","pathOld":"solr/contrib/extraction/src/main/java/org/apache/solr/handler/extraction/SolrContentHandler#addField(String,String,String[]).mjava","sourceNew":"  // Naming rules:\n  // 1) optionally map names to nicenames (lowercase+underscores)\n  // 2) execute \"map\" commands\n  // 3) if resulting field is unknown, map it to a common prefix\n  protected void addField(String fname, String fval, String[] vals) {\n    if (lowerNames) {\n      StringBuilder sb = new StringBuilder();\n      for (int i=0; i<fname.length(); i++) {\n        char ch = fname.charAt(i);\n        if (!Character.isLetterOrDigit(ch)) ch='_';\n        else ch=Character.toLowerCase(ch);\n        sb.append(ch);\n      }\n      fname = sb.toString();\n    }    \n\n    String name = findMappedName(fname);\n    SchemaField sf = schema.getFieldOrNull(name);\n    if (sf==null && unknownFieldPrefix.length() > 0) {\n      name = unknownFieldPrefix + name;\n      sf = schema.getFieldOrNull(name);\n    } else if (sf == null && defaultField.length() > 0 && name.equals(Metadata.RESOURCE_NAME_KEY) == false /*let the fall through below handle this*/){\n      name = defaultField;\n      sf = schema.getFieldOrNull(name);\n    }\n\n    // Arguably we should handle this as a special case. Why? Because unlike basically\n    // all the other fields in metadata, this one was probably set not by Tika by in\n    // ExtractingDocumentLoader.load(). You shouldn't have to define a mapping for this\n    // field just because you specified a resource.name parameter to the handler, should\n    // you?\n    if (sf == null && unknownFieldPrefix.length()==0 && name == Metadata.RESOURCE_NAME_KEY) {\n      return;\n    }\n\n    // normalize val params so vals.length>1\n    if (vals != null && vals.length==1) {\n      fval = vals[0];\n      vals = null;\n    }\n\n    // single valued field with multiple values... catenate them.\n    if (sf != null && !sf.multiValued() && vals != null) {\n      StringBuilder builder = new StringBuilder();\n      boolean first=true;\n      for (String val : vals) {\n        if (first) {\n          first=false;\n        } else {\n          builder.append(' ');\n        }\n        builder.append(val);\n      }\n      fval = builder.toString();\n      vals=null;\n    }\n\n    float boost = getBoost(name);\n\n    if (fval != null) {\n      document.addField(name, transformValue(fval, sf), boost);\n    }\n\n    if (vals != null) {\n      for (String val : vals) {\n        document.addField(name, transformValue(val, sf), boost);\n      }\n    }\n\n    // no value set - throw exception for debugging\n    // if (vals==null && fval==null) throw new RuntimeException(name + \" has no non-null value \");\n  }\n\n","sourceOld":"  // Naming rules:\n  // 1) optionally map names to nicenames (lowercase+underscores)\n  // 2) execute \"map\" commands\n  // 3) if resulting field is unknown, map it to a common prefix\n  protected void addField(String fname, String fval, String[] vals) {\n    if (lowerNames) {\n      StringBuilder sb = new StringBuilder();\n      for (int i=0; i<fname.length(); i++) {\n        char ch = fname.charAt(i);\n        if (!Character.isLetterOrDigit(ch)) ch='_';\n        else ch=Character.toLowerCase(ch);\n        sb.append(ch);\n      }\n      fname = sb.toString();\n    }    \n\n    String name = findMappedName(fname);\n    SchemaField sf = schema.getFieldOrNull(name);\n    if (sf==null && unknownFieldPrefix.length() > 0) {\n      name = unknownFieldPrefix + name;\n      sf = schema.getFieldOrNull(name);\n    } else if (sf == null && defaultField.length() > 0 && name.equals(Metadata.RESOURCE_NAME_KEY) == false /*let the fall through below handle this*/){\n      name = defaultField;\n      sf = schema.getFieldOrNull(name);\n    }\n\n    // Arguably we should handle this as a special case. Why? Because unlike basically\n    // all the other fields in metadata, this one was probably set not by Tika by in\n    // ExtractingDocumentLoader.load(). You shouldn't have to define a mapping for this\n    // field just because you specified a resource.name parameter to the handler, should\n    // you?\n    if (sf == null && unknownFieldPrefix.length()==0 && name == Metadata.RESOURCE_NAME_KEY) {\n      return;\n    }\n\n    // normalize val params so vals.length>1\n    if (vals != null && vals.length==1) {\n      fval = vals[0];\n      vals = null;\n    }\n\n    // single valued field with multiple values... catenate them.\n    if (sf != null && !sf.multiValued() && vals != null) {\n      StringBuilder builder = new StringBuilder();\n      boolean first=true;\n      for (String val : vals) {\n        if (first) {\n          first=false;\n        } else {\n          builder.append(' ');\n        }\n        builder.append(val);\n      }\n      fval = builder.toString();\n      vals=null;\n    }\n\n    float boost = getBoost(name);\n\n    if (fval != null) {\n      document.addField(name, transformValue(fval, sf), boost);\n    }\n\n    if (vals != null) {\n      for (String val : vals) {\n        document.addField(name, transformValue(val, sf), boost);\n      }\n    }\n\n    // no value set - throw exception for debugging\n    // if (vals==null && fval==null) throw new RuntimeException(name + \" has no non-null value \");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/extraction/src/java/org/apache/solr/handler/extraction/SolrContentHandler#addField(String,String,String[]).mjava","pathOld":"solr/contrib/extraction/src/main/java/org/apache/solr/handler/extraction/SolrContentHandler#addField(String,String,String[]).mjava","sourceNew":"  // Naming rules:\n  // 1) optionally map names to nicenames (lowercase+underscores)\n  // 2) execute \"map\" commands\n  // 3) if resulting field is unknown, map it to a common prefix\n  protected void addField(String fname, String fval, String[] vals) {\n    if (lowerNames) {\n      StringBuilder sb = new StringBuilder();\n      for (int i=0; i<fname.length(); i++) {\n        char ch = fname.charAt(i);\n        if (!Character.isLetterOrDigit(ch)) ch='_';\n        else ch=Character.toLowerCase(ch);\n        sb.append(ch);\n      }\n      fname = sb.toString();\n    }    \n\n    String name = findMappedName(fname);\n    SchemaField sf = schema.getFieldOrNull(name);\n    if (sf==null && unknownFieldPrefix.length() > 0) {\n      name = unknownFieldPrefix + name;\n      sf = schema.getFieldOrNull(name);\n    } else if (sf == null && defaultField.length() > 0 && name.equals(Metadata.RESOURCE_NAME_KEY) == false /*let the fall through below handle this*/){\n      name = defaultField;\n      sf = schema.getFieldOrNull(name);\n    }\n\n    // Arguably we should handle this as a special case. Why? Because unlike basically\n    // all the other fields in metadata, this one was probably set not by Tika by in\n    // ExtractingDocumentLoader.load(). You shouldn't have to define a mapping for this\n    // field just because you specified a resource.name parameter to the handler, should\n    // you?\n    if (sf == null && unknownFieldPrefix.length()==0 && name == Metadata.RESOURCE_NAME_KEY) {\n      return;\n    }\n\n    // normalize val params so vals.length>1\n    if (vals != null && vals.length==1) {\n      fval = vals[0];\n      vals = null;\n    }\n\n    // single valued field with multiple values... catenate them.\n    if (sf != null && !sf.multiValued() && vals != null) {\n      StringBuilder builder = new StringBuilder();\n      boolean first=true;\n      for (String val : vals) {\n        if (first) {\n          first=false;\n        } else {\n          builder.append(' ');\n        }\n        builder.append(val);\n      }\n      fval = builder.toString();\n      vals=null;\n    }\n\n    float boost = getBoost(name);\n\n    if (fval != null) {\n      document.addField(name, transformValue(fval, sf), boost);\n    }\n\n    if (vals != null) {\n      for (String val : vals) {\n        document.addField(name, transformValue(val, sf), boost);\n      }\n    }\n\n    // no value set - throw exception for debugging\n    // if (vals==null && fval==null) throw new RuntimeException(name + \" has no non-null value \");\n  }\n\n","sourceOld":"  // Naming rules:\n  // 1) optionally map names to nicenames (lowercase+underscores)\n  // 2) execute \"map\" commands\n  // 3) if resulting field is unknown, map it to a common prefix\n  protected void addField(String fname, String fval, String[] vals) {\n    if (lowerNames) {\n      StringBuilder sb = new StringBuilder();\n      for (int i=0; i<fname.length(); i++) {\n        char ch = fname.charAt(i);\n        if (!Character.isLetterOrDigit(ch)) ch='_';\n        else ch=Character.toLowerCase(ch);\n        sb.append(ch);\n      }\n      fname = sb.toString();\n    }    \n\n    String name = findMappedName(fname);\n    SchemaField sf = schema.getFieldOrNull(name);\n    if (sf==null && unknownFieldPrefix.length() > 0) {\n      name = unknownFieldPrefix + name;\n      sf = schema.getFieldOrNull(name);\n    } else if (sf == null && defaultField.length() > 0 && name.equals(Metadata.RESOURCE_NAME_KEY) == false /*let the fall through below handle this*/){\n      name = defaultField;\n      sf = schema.getFieldOrNull(name);\n    }\n\n    // Arguably we should handle this as a special case. Why? Because unlike basically\n    // all the other fields in metadata, this one was probably set not by Tika by in\n    // ExtractingDocumentLoader.load(). You shouldn't have to define a mapping for this\n    // field just because you specified a resource.name parameter to the handler, should\n    // you?\n    if (sf == null && unknownFieldPrefix.length()==0 && name == Metadata.RESOURCE_NAME_KEY) {\n      return;\n    }\n\n    // normalize val params so vals.length>1\n    if (vals != null && vals.length==1) {\n      fval = vals[0];\n      vals = null;\n    }\n\n    // single valued field with multiple values... catenate them.\n    if (sf != null && !sf.multiValued() && vals != null) {\n      StringBuilder builder = new StringBuilder();\n      boolean first=true;\n      for (String val : vals) {\n        if (first) {\n          first=false;\n        } else {\n          builder.append(' ');\n        }\n        builder.append(val);\n      }\n      fval = builder.toString();\n      vals=null;\n    }\n\n    float boost = getBoost(name);\n\n    if (fval != null) {\n      document.addField(name, transformValue(fval, sf), boost);\n    }\n\n    if (vals != null) {\n      for (String val : vals) {\n        document.addField(name, transformValue(val, sf), boost);\n      }\n    }\n\n    // no value set - throw exception for debugging\n    // if (vals==null && fval==null) throw new RuntimeException(name + \" has no non-null value \");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f08557cdb6c60ac7b88a9342c983a20cd236e74f","date":1330954480,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/contrib/extraction/src/java/org/apache/solr/handler/extraction/SolrContentHandler#addField(String,String,String[]).mjava","pathOld":"solr/contrib/extraction/src/java/org/apache/solr/handler/extraction/SolrContentHandler#addField(String,String,String[]).mjava","sourceNew":"  // Naming rules:\n  // 1) optionally map names to nicenames (lowercase+underscores)\n  // 2) execute \"map\" commands\n  // 3) if resulting field is unknown, map it to a common prefix\n  protected void addField(String fname, String fval, String[] vals) {\n    if (lowerNames) {\n      StringBuilder sb = new StringBuilder();\n      for (int i=0; i<fname.length(); i++) {\n        char ch = fname.charAt(i);\n        if (!Character.isLetterOrDigit(ch)) ch='_';\n        else ch=Character.toLowerCase(ch);\n        sb.append(ch);\n      }\n      fname = sb.toString();\n    }    \n\n    String name = findMappedName(fname);\n    SchemaField sf = schema.getFieldOrNull(name);\n    if (sf==null && unknownFieldPrefix.length() > 0) {\n      name = unknownFieldPrefix + name;\n      sf = schema.getFieldOrNull(name);\n    } else if (sf == null && defaultField.length() > 0 && name.equals(TikaMetadataKeys.RESOURCE_NAME_KEY) == false /*let the fall through below handle this*/){\n      name = defaultField;\n      sf = schema.getFieldOrNull(name);\n    }\n\n    // Arguably we should handle this as a special case. Why? Because unlike basically\n    // all the other fields in metadata, this one was probably set not by Tika by in\n    // ExtractingDocumentLoader.load(). You shouldn't have to define a mapping for this\n    // field just because you specified a resource.name parameter to the handler, should\n    // you?\n    if (sf == null && unknownFieldPrefix.length()==0 && name == TikaMetadataKeys.RESOURCE_NAME_KEY) {\n      return;\n    }\n\n    // normalize val params so vals.length>1\n    if (vals != null && vals.length==1) {\n      fval = vals[0];\n      vals = null;\n    }\n\n    // single valued field with multiple values... catenate them.\n    if (sf != null && !sf.multiValued() && vals != null) {\n      StringBuilder builder = new StringBuilder();\n      boolean first=true;\n      for (String val : vals) {\n        if (first) {\n          first=false;\n        } else {\n          builder.append(' ');\n        }\n        builder.append(val);\n      }\n      fval = builder.toString();\n      vals=null;\n    }\n\n    float boost = getBoost(name);\n\n    if (fval != null) {\n      document.addField(name, transformValue(fval, sf), boost);\n    }\n\n    if (vals != null) {\n      for (String val : vals) {\n        document.addField(name, transformValue(val, sf), boost);\n      }\n    }\n\n    // no value set - throw exception for debugging\n    // if (vals==null && fval==null) throw new RuntimeException(name + \" has no non-null value \");\n  }\n\n","sourceOld":"  // Naming rules:\n  // 1) optionally map names to nicenames (lowercase+underscores)\n  // 2) execute \"map\" commands\n  // 3) if resulting field is unknown, map it to a common prefix\n  protected void addField(String fname, String fval, String[] vals) {\n    if (lowerNames) {\n      StringBuilder sb = new StringBuilder();\n      for (int i=0; i<fname.length(); i++) {\n        char ch = fname.charAt(i);\n        if (!Character.isLetterOrDigit(ch)) ch='_';\n        else ch=Character.toLowerCase(ch);\n        sb.append(ch);\n      }\n      fname = sb.toString();\n    }    \n\n    String name = findMappedName(fname);\n    SchemaField sf = schema.getFieldOrNull(name);\n    if (sf==null && unknownFieldPrefix.length() > 0) {\n      name = unknownFieldPrefix + name;\n      sf = schema.getFieldOrNull(name);\n    } else if (sf == null && defaultField.length() > 0 && name.equals(Metadata.RESOURCE_NAME_KEY) == false /*let the fall through below handle this*/){\n      name = defaultField;\n      sf = schema.getFieldOrNull(name);\n    }\n\n    // Arguably we should handle this as a special case. Why? Because unlike basically\n    // all the other fields in metadata, this one was probably set not by Tika by in\n    // ExtractingDocumentLoader.load(). You shouldn't have to define a mapping for this\n    // field just because you specified a resource.name parameter to the handler, should\n    // you?\n    if (sf == null && unknownFieldPrefix.length()==0 && name == Metadata.RESOURCE_NAME_KEY) {\n      return;\n    }\n\n    // normalize val params so vals.length>1\n    if (vals != null && vals.length==1) {\n      fval = vals[0];\n      vals = null;\n    }\n\n    // single valued field with multiple values... catenate them.\n    if (sf != null && !sf.multiValued() && vals != null) {\n      StringBuilder builder = new StringBuilder();\n      boolean first=true;\n      for (String val : vals) {\n        if (first) {\n          first=false;\n        } else {\n          builder.append(' ');\n        }\n        builder.append(val);\n      }\n      fval = builder.toString();\n      vals=null;\n    }\n\n    float boost = getBoost(name);\n\n    if (fval != null) {\n      document.addField(name, transformValue(fval, sf), boost);\n    }\n\n    if (vals != null) {\n      for (String val : vals) {\n        document.addField(name, transformValue(val, sf), boost);\n      }\n    }\n\n    // no value set - throw exception for debugging\n    // if (vals==null && fval==null) throw new RuntimeException(name + \" has no non-null value \");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"solr/contrib/extraction/src/java/org/apache/solr/handler/extraction/SolrContentHandler#addField(String,String,String[]).mjava","pathOld":"solr/contrib/extraction/src/java/org/apache/solr/handler/extraction/SolrContentHandler#addField(String,String,String[]).mjava","sourceNew":"  // Naming rules:\n  // 1) optionally map names to nicenames (lowercase+underscores)\n  // 2) execute \"map\" commands\n  // 3) if resulting field is unknown, map it to a common prefix\n  protected void addField(String fname, String fval, String[] vals) {\n    if (lowerNames) {\n      StringBuilder sb = new StringBuilder();\n      for (int i=0; i<fname.length(); i++) {\n        char ch = fname.charAt(i);\n        if (!Character.isLetterOrDigit(ch)) ch='_';\n        else ch=Character.toLowerCase(ch);\n        sb.append(ch);\n      }\n      fname = sb.toString();\n    }    \n\n    String name = findMappedName(fname);\n    SchemaField sf = schema.getFieldOrNull(name);\n    if (sf==null && unknownFieldPrefix.length() > 0) {\n      name = unknownFieldPrefix + name;\n      sf = schema.getFieldOrNull(name);\n    } else if (sf == null && defaultField.length() > 0 && name.equals(TikaMetadataKeys.RESOURCE_NAME_KEY) == false /*let the fall through below handle this*/){\n      name = defaultField;\n      sf = schema.getFieldOrNull(name);\n    }\n\n    // Arguably we should handle this as a special case. Why? Because unlike basically\n    // all the other fields in metadata, this one was probably set not by Tika by in\n    // ExtractingDocumentLoader.load(). You shouldn't have to define a mapping for this\n    // field just because you specified a resource.name parameter to the handler, should\n    // you?\n    if (sf == null && unknownFieldPrefix.length()==0 && name == TikaMetadataKeys.RESOURCE_NAME_KEY) {\n      return;\n    }\n\n    // normalize val params so vals.length>1\n    if (vals != null && vals.length==1) {\n      fval = vals[0];\n      vals = null;\n    }\n\n    // single valued field with multiple values... catenate them.\n    if (sf != null && !sf.multiValued() && vals != null) {\n      StringBuilder builder = new StringBuilder();\n      boolean first=true;\n      for (String val : vals) {\n        if (first) {\n          first=false;\n        } else {\n          builder.append(' ');\n        }\n        builder.append(val);\n      }\n      fval = builder.toString();\n      vals=null;\n    }\n\n    float boost = getBoost(name);\n\n    if (fval != null) {\n      document.addField(name, transformValue(fval, sf), boost);\n    }\n\n    if (vals != null) {\n      for (String val : vals) {\n        document.addField(name, transformValue(val, sf), boost);\n      }\n    }\n\n    // no value set - throw exception for debugging\n    // if (vals==null && fval==null) throw new RuntimeException(name + \" has no non-null value \");\n  }\n\n","sourceOld":"  // Naming rules:\n  // 1) optionally map names to nicenames (lowercase+underscores)\n  // 2) execute \"map\" commands\n  // 3) if resulting field is unknown, map it to a common prefix\n  protected void addField(String fname, String fval, String[] vals) {\n    if (lowerNames) {\n      StringBuilder sb = new StringBuilder();\n      for (int i=0; i<fname.length(); i++) {\n        char ch = fname.charAt(i);\n        if (!Character.isLetterOrDigit(ch)) ch='_';\n        else ch=Character.toLowerCase(ch);\n        sb.append(ch);\n      }\n      fname = sb.toString();\n    }    \n\n    String name = findMappedName(fname);\n    SchemaField sf = schema.getFieldOrNull(name);\n    if (sf==null && unknownFieldPrefix.length() > 0) {\n      name = unknownFieldPrefix + name;\n      sf = schema.getFieldOrNull(name);\n    } else if (sf == null && defaultField.length() > 0 && name.equals(Metadata.RESOURCE_NAME_KEY) == false /*let the fall through below handle this*/){\n      name = defaultField;\n      sf = schema.getFieldOrNull(name);\n    }\n\n    // Arguably we should handle this as a special case. Why? Because unlike basically\n    // all the other fields in metadata, this one was probably set not by Tika by in\n    // ExtractingDocumentLoader.load(). You shouldn't have to define a mapping for this\n    // field just because you specified a resource.name parameter to the handler, should\n    // you?\n    if (sf == null && unknownFieldPrefix.length()==0 && name == Metadata.RESOURCE_NAME_KEY) {\n      return;\n    }\n\n    // normalize val params so vals.length>1\n    if (vals != null && vals.length==1) {\n      fval = vals[0];\n      vals = null;\n    }\n\n    // single valued field with multiple values... catenate them.\n    if (sf != null && !sf.multiValued() && vals != null) {\n      StringBuilder builder = new StringBuilder();\n      boolean first=true;\n      for (String val : vals) {\n        if (first) {\n          first=false;\n        } else {\n          builder.append(' ');\n        }\n        builder.append(val);\n      }\n      fval = builder.toString();\n      vals=null;\n    }\n\n    float boost = getBoost(name);\n\n    if (fval != null) {\n      document.addField(name, transformValue(fval, sf), boost);\n    }\n\n    if (vals != null) {\n      for (String val : vals) {\n        document.addField(name, transformValue(val, sf), boost);\n      }\n    }\n\n    // no value set - throw exception for debugging\n    // if (vals==null && fval==null) throw new RuntimeException(name + \" has no non-null value \");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"acd9883560fd89e6448b2b447302fe543040cd4f","date":1488478696,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/contrib/extraction/src/java/org/apache/solr/handler/extraction/SolrContentHandler#addField(String,String,String[]).mjava","pathOld":"solr/contrib/extraction/src/java/org/apache/solr/handler/extraction/SolrContentHandler#addField(String,String,String[]).mjava","sourceNew":"  // Naming rules:\n  // 1) optionally map names to nicenames (lowercase+underscores)\n  // 2) execute \"map\" commands\n  // 3) if resulting field is unknown, map it to a common prefix\n  protected void addField(String fname, String fval, String[] vals) {\n    if (lowerNames) {\n      StringBuilder sb = new StringBuilder();\n      for (int i=0; i<fname.length(); i++) {\n        char ch = fname.charAt(i);\n        if (!Character.isLetterOrDigit(ch)) ch='_';\n        else ch=Character.toLowerCase(ch);\n        sb.append(ch);\n      }\n      fname = sb.toString();\n    }    \n\n    String name = findMappedName(fname);\n    SchemaField sf = schema.getFieldOrNull(name);\n    if (sf==null && unknownFieldPrefix.length() > 0) {\n      name = unknownFieldPrefix + name;\n      sf = schema.getFieldOrNull(name);\n    } else if (sf == null && defaultField.length() > 0 && name.equals(TikaMetadataKeys.RESOURCE_NAME_KEY) == false /*let the fall through below handle this*/){\n      name = defaultField;\n      sf = schema.getFieldOrNull(name);\n    }\n\n    // Arguably we should handle this as a special case. Why? Because unlike basically\n    // all the other fields in metadata, this one was probably set not by Tika by in\n    // ExtractingDocumentLoader.load(). You shouldn't have to define a mapping for this\n    // field just because you specified a resource.name parameter to the handler, should\n    // you?\n    if (sf == null && unknownFieldPrefix.length()==0 && name == TikaMetadataKeys.RESOURCE_NAME_KEY) {\n      return;\n    }\n\n    // normalize val params so vals.length>1\n    if (vals != null && vals.length==1) {\n      fval = vals[0];\n      vals = null;\n    }\n\n    // single valued field with multiple values... catenate them.\n    if (sf != null && !sf.multiValued() && vals != null) {\n      StringBuilder builder = new StringBuilder();\n      boolean first=true;\n      for (String val : vals) {\n        if (first) {\n          first=false;\n        } else {\n          builder.append(' ');\n        }\n        builder.append(val);\n      }\n      fval = builder.toString();\n      vals=null;\n    }\n\n    if (fval != null) {\n      document.addField(name, transformValue(fval, sf));\n    }\n\n    if (vals != null) {\n      for (String val : vals) {\n        document.addField(name, transformValue(val, sf));\n      }\n    }\n\n    // no value set - throw exception for debugging\n    // if (vals==null && fval==null) throw new RuntimeException(name + \" has no non-null value \");\n  }\n\n","sourceOld":"  // Naming rules:\n  // 1) optionally map names to nicenames (lowercase+underscores)\n  // 2) execute \"map\" commands\n  // 3) if resulting field is unknown, map it to a common prefix\n  protected void addField(String fname, String fval, String[] vals) {\n    if (lowerNames) {\n      StringBuilder sb = new StringBuilder();\n      for (int i=0; i<fname.length(); i++) {\n        char ch = fname.charAt(i);\n        if (!Character.isLetterOrDigit(ch)) ch='_';\n        else ch=Character.toLowerCase(ch);\n        sb.append(ch);\n      }\n      fname = sb.toString();\n    }    \n\n    String name = findMappedName(fname);\n    SchemaField sf = schema.getFieldOrNull(name);\n    if (sf==null && unknownFieldPrefix.length() > 0) {\n      name = unknownFieldPrefix + name;\n      sf = schema.getFieldOrNull(name);\n    } else if (sf == null && defaultField.length() > 0 && name.equals(TikaMetadataKeys.RESOURCE_NAME_KEY) == false /*let the fall through below handle this*/){\n      name = defaultField;\n      sf = schema.getFieldOrNull(name);\n    }\n\n    // Arguably we should handle this as a special case. Why? Because unlike basically\n    // all the other fields in metadata, this one was probably set not by Tika by in\n    // ExtractingDocumentLoader.load(). You shouldn't have to define a mapping for this\n    // field just because you specified a resource.name parameter to the handler, should\n    // you?\n    if (sf == null && unknownFieldPrefix.length()==0 && name == TikaMetadataKeys.RESOURCE_NAME_KEY) {\n      return;\n    }\n\n    // normalize val params so vals.length>1\n    if (vals != null && vals.length==1) {\n      fval = vals[0];\n      vals = null;\n    }\n\n    // single valued field with multiple values... catenate them.\n    if (sf != null && !sf.multiValued() && vals != null) {\n      StringBuilder builder = new StringBuilder();\n      boolean first=true;\n      for (String val : vals) {\n        if (first) {\n          first=false;\n        } else {\n          builder.append(' ');\n        }\n        builder.append(val);\n      }\n      fval = builder.toString();\n      vals=null;\n    }\n\n    float boost = getBoost(name);\n\n    if (fval != null) {\n      document.addField(name, transformValue(fval, sf), boost);\n    }\n\n    if (vals != null) {\n      for (String val : vals) {\n        document.addField(name, transformValue(val, sf), boost);\n      }\n    }\n\n    // no value set - throw exception for debugging\n    // if (vals==null && fval==null) throw new RuntimeException(name + \" has no non-null value \");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0982ea5c2b7f50890065ccf2b59068efc40eaafe","date":1538167811,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/contrib/extraction/src/java/org/apache/solr/handler/extraction/SolrContentHandler#addField(String,String,String[]).mjava","pathOld":"solr/contrib/extraction/src/java/org/apache/solr/handler/extraction/SolrContentHandler#addField(String,String,String[]).mjava","sourceNew":"  // Naming rules:\n  // 1) optionally map names to nicenames (lowercase+underscores)\n  // 2) execute \"map\" commands\n  // 3) if resulting field is unknown, map it to a common prefix\n  protected void addField(String fname, String fval, String[] vals) {\n    if (lowerNames) {\n      StringBuilder sb = new StringBuilder();\n      for (int i=0; i<fname.length(); i++) {\n        char ch = fname.charAt(i);\n        if (!Character.isLetterOrDigit(ch)) ch='_';\n        else ch=Character.toLowerCase(ch);\n        sb.append(ch);\n      }\n      fname = sb.toString();\n    }    \n\n    String name = findMappedName(fname);\n    SchemaField sf = schema.getFieldOrNull(name);\n    if (sf==null && unknownFieldPrefix.length() > 0) {\n      name = unknownFieldPrefix + name;\n      sf = schema.getFieldOrNull(name);\n    } else if (sf == null && defaultField.length() > 0 && name.equals(TikaMetadataKeys.RESOURCE_NAME_KEY) == false /*let the fall through below handle this*/){\n      name = defaultField;\n      sf = schema.getFieldOrNull(name);\n    }\n\n    // Arguably we should handle this as a special case. Why? Because unlike basically\n    // all the other fields in metadata, this one was probably set not by Tika by in\n    // ExtractingDocumentLoader.load(). You shouldn't have to define a mapping for this\n    // field just because you specified a resource.name parameter to the handler, should\n    // you?\n    if (sf == null && unknownFieldPrefix.length()==0 && name == TikaMetadataKeys.RESOURCE_NAME_KEY) {\n      return;\n    }\n\n    // normalize val params so vals.length>1\n    if (vals != null && vals.length==1) {\n      fval = vals[0];\n      vals = null;\n    }\n\n    // single valued field with multiple values... catenate them.\n    if (sf != null && !sf.multiValued() && vals != null) {\n      StringBuilder builder = new StringBuilder();\n      boolean first=true;\n      for (String val : vals) {\n        if (first) {\n          first=false;\n        } else {\n          builder.append(' ');\n        }\n        builder.append(val);\n      }\n      fval = builder.toString();\n      vals=null;\n    }\n\n    if (fval != null) {\n      document.addField(name, fval);\n    }\n\n    if (vals != null) {\n      for (String val : vals) {\n        document.addField(name, val);\n      }\n    }\n\n    // no value set - throw exception for debugging\n    // if (vals==null && fval==null) throw new RuntimeException(name + \" has no non-null value \");\n  }\n\n","sourceOld":"  // Naming rules:\n  // 1) optionally map names to nicenames (lowercase+underscores)\n  // 2) execute \"map\" commands\n  // 3) if resulting field is unknown, map it to a common prefix\n  protected void addField(String fname, String fval, String[] vals) {\n    if (lowerNames) {\n      StringBuilder sb = new StringBuilder();\n      for (int i=0; i<fname.length(); i++) {\n        char ch = fname.charAt(i);\n        if (!Character.isLetterOrDigit(ch)) ch='_';\n        else ch=Character.toLowerCase(ch);\n        sb.append(ch);\n      }\n      fname = sb.toString();\n    }    \n\n    String name = findMappedName(fname);\n    SchemaField sf = schema.getFieldOrNull(name);\n    if (sf==null && unknownFieldPrefix.length() > 0) {\n      name = unknownFieldPrefix + name;\n      sf = schema.getFieldOrNull(name);\n    } else if (sf == null && defaultField.length() > 0 && name.equals(TikaMetadataKeys.RESOURCE_NAME_KEY) == false /*let the fall through below handle this*/){\n      name = defaultField;\n      sf = schema.getFieldOrNull(name);\n    }\n\n    // Arguably we should handle this as a special case. Why? Because unlike basically\n    // all the other fields in metadata, this one was probably set not by Tika by in\n    // ExtractingDocumentLoader.load(). You shouldn't have to define a mapping for this\n    // field just because you specified a resource.name parameter to the handler, should\n    // you?\n    if (sf == null && unknownFieldPrefix.length()==0 && name == TikaMetadataKeys.RESOURCE_NAME_KEY) {\n      return;\n    }\n\n    // normalize val params so vals.length>1\n    if (vals != null && vals.length==1) {\n      fval = vals[0];\n      vals = null;\n    }\n\n    // single valued field with multiple values... catenate them.\n    if (sf != null && !sf.multiValued() && vals != null) {\n      StringBuilder builder = new StringBuilder();\n      boolean first=true;\n      for (String val : vals) {\n        if (first) {\n          first=false;\n        } else {\n          builder.append(' ');\n        }\n        builder.append(val);\n      }\n      fval = builder.toString();\n      vals=null;\n    }\n\n    if (fval != null) {\n      document.addField(name, transformValue(fval, sf));\n    }\n\n    if (vals != null) {\n      for (String val : vals) {\n        document.addField(name, transformValue(val, sf));\n      }\n    }\n\n    // no value set - throw exception for debugging\n    // if (vals==null && fval==null) throw new RuntimeException(name + \" has no non-null value \");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["c26f00b574427b55127e869b935845554afde1fa","f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f08557cdb6c60ac7b88a9342c983a20cd236e74f":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0982ea5c2b7f50890065ccf2b59068efc40eaafe":["acd9883560fd89e6448b2b447302fe543040cd4f"],"acd9883560fd89e6448b2b447302fe543040cd4f":["f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0982ea5c2b7f50890065ccf2b59068efc40eaafe"]},"commit2Childs":{"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"f08557cdb6c60ac7b88a9342c983a20cd236e74f":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","acd9883560fd89e6448b2b447302fe543040cd4f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","c26f00b574427b55127e869b935845554afde1fa"],"0982ea5c2b7f50890065ccf2b59068efc40eaafe":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"acd9883560fd89e6448b2b447302fe543040cd4f":["0982ea5c2b7f50890065ccf2b59068efc40eaafe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}