{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoAddReplicasPlanActionTest#assertOperations(String,List[SolrRequest],String,Set[String],JettySolrRunner).mjava","commits":[{"id":"47a99fe8ee3f74e8da2ece1bddbc059d1e1beffa","date":1498706808,"type":0,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoAddReplicasPlanActionTest#assertOperations(String,List[SolrRequest],String,Set[String],JettySolrRunner).mjava","pathOld":"/dev/null","sourceNew":"  private void assertOperations(String collection, List<SolrRequest> operations, String lostNodeName, Set<String> coreNodeNames, JettySolrRunner destJetty) {\n    assertEquals(\"Replicas of \" + collection + \" is not fully moved, operations=\"+operations,\n        2, operations.size());\n    for (SolrRequest solrRequest : operations) {\n      assertTrue(solrRequest instanceof CollectionAdminRequest.MoveReplica);\n      SolrParams params = solrRequest.getParams();\n\n      assertEquals(params.get(\"collection\"), collection);\n\n      String replica = params.get(\"replica\");\n      assertTrue(\"Can not find \"+replica+ \" in node \" + lostNodeName, coreNodeNames.contains(replica));\n\n      String targetNode = params.get(\"targetNode\");\n      assertFalse(\"Target node match the lost one \" + lostNodeName, lostNodeName.equals(targetNode));\n      if (destJetty != null) {\n        assertEquals(\"Target not is expected\", destJetty.getNodeName(), targetNode);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5ce607fb6b5358969d344ac8e2ce3a79ff5bc6d1","date":1498792294,"type":5,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoAddReplicasPlanActionTest#assertOperations(String,List[SolrRequest],String,List[CloudDescriptor],JettySolrRunner).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoAddReplicasPlanActionTest#assertOperations(String,List[SolrRequest],String,Set[String],JettySolrRunner).mjava","sourceNew":"  private void assertOperations(String collection, List<SolrRequest> operations, String lostNodeName,\n                                List<CloudDescriptor> cloudDescriptors, JettySolrRunner destJetty) {\n    assertEquals(\"Replicas of \" + collection + \" is not fully moved, operations=\"+operations,\n        cloudDescriptors.stream().filter(cd -> cd.getCollectionName().equals(collection)).count(), operations.size());\n    for (SolrRequest solrRequest : operations) {\n      assertTrue(solrRequest instanceof CollectionAdminRequest.MoveReplica);\n      SolrParams params = solrRequest.getParams();\n\n      assertEquals(params.get(\"collection\"), collection);\n\n      String replica = params.get(\"replica\");\n      boolean found = false;\n      Iterator<CloudDescriptor> it = cloudDescriptors.iterator();\n      while (it.hasNext()) {\n        CloudDescriptor cd = it.next();\n        if (cd.getCollectionName().equals(collection) && cd.getCoreNodeName().equals(replica)) {\n          found = true;\n          it.remove();\n          break;\n        }\n      }\n      assertTrue(\"Can not find \"+replica+ \" in node \" + lostNodeName, found);\n\n      String targetNode = params.get(\"targetNode\");\n      assertFalse(\"Target node match the lost one \" + lostNodeName, lostNodeName.equals(targetNode));\n      if (destJetty != null) {\n        assertEquals(\"Target node is not as expectation\", destJetty.getNodeName(), targetNode);\n      }\n    }\n\n    for (CloudDescriptor cd : cloudDescriptors) {\n      if (cd.getCollectionName().equals(collection)) {\n        fail(\"Exist replica which is not moved \" + cd);\n      }\n    }\n  }\n\n","sourceOld":"  private void assertOperations(String collection, List<SolrRequest> operations, String lostNodeName, Set<String> coreNodeNames, JettySolrRunner destJetty) {\n    assertEquals(\"Replicas of \" + collection + \" is not fully moved, operations=\"+operations,\n        2, operations.size());\n    for (SolrRequest solrRequest : operations) {\n      assertTrue(solrRequest instanceof CollectionAdminRequest.MoveReplica);\n      SolrParams params = solrRequest.getParams();\n\n      assertEquals(params.get(\"collection\"), collection);\n\n      String replica = params.get(\"replica\");\n      assertTrue(\"Can not find \"+replica+ \" in node \" + lostNodeName, coreNodeNames.contains(replica));\n\n      String targetNode = params.get(\"targetNode\");\n      assertFalse(\"Target node match the lost one \" + lostNodeName, lostNodeName.equals(targetNode));\n      if (destJetty != null) {\n        assertEquals(\"Target not is expected\", destJetty.getNodeName(), targetNode);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"47a99fe8ee3f74e8da2ece1bddbc059d1e1beffa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5ce607fb6b5358969d344ac8e2ce3a79ff5bc6d1":["47a99fe8ee3f74e8da2ece1bddbc059d1e1beffa"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["47a99fe8ee3f74e8da2ece1bddbc059d1e1beffa","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"47a99fe8ee3f74e8da2ece1bddbc059d1e1beffa":["5ce607fb6b5358969d344ac8e2ce3a79ff5bc6d1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"5ce607fb6b5358969d344ac8e2ce3a79ff5bc6d1":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","5ce607fb6b5358969d344ac8e2ce3a79ff5bc6d1"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}