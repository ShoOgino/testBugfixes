{"path":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#validateConfigOrThrowSolrException(String).mjava","commits":[{"id":"4425aa1103f1abe8e39d220f12e82b94c4f8272a","date":1467268836,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#validateConfigOrThrowSolrException(String).mjava","pathOld":"/dev/null","sourceNew":"  private void validateConfigOrThrowSolrException(String configName) throws KeeperException, InterruptedException {\n    boolean isValid = zkStateReader.getZkClient().exists(ZkConfigManager.CONFIGS_ZKNODE + \"/\" + configName, true);\n    if(!isValid) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Can not find the specified config set: \" + configName);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"66e0b82bd39567aa2bf534e5282d05fb4a4a2c76","date":1471585465,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#validateConfigOrThrowSolrException(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#validateConfigOrThrowSolrException(String).mjava","sourceNew":"  void validateConfigOrThrowSolrException(String configName) throws KeeperException, InterruptedException {\n    boolean isValid = zkStateReader.getZkClient().exists(ZkConfigManager.CONFIGS_ZKNODE + \"/\" + configName, true);\n    if(!isValid) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Can not find the specified config set: \" + configName);\n    }\n  }\n\n","sourceOld":"  private void validateConfigOrThrowSolrException(String configName) throws KeeperException, InterruptedException {\n    boolean isValid = zkStateReader.getZkClient().exists(ZkConfigManager.CONFIGS_ZKNODE + \"/\" + configName, true);\n    if(!isValid) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Can not find the specified config set: \" + configName);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"403d05f7f8d69b65659157eff1bc1d2717f04c66","date":1471692961,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#validateConfigOrThrowSolrException(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#validateConfigOrThrowSolrException(String).mjava","sourceNew":"  void validateConfigOrThrowSolrException(String configName) throws KeeperException, InterruptedException {\n    boolean isValid = zkStateReader.getZkClient().exists(ZkConfigManager.CONFIGS_ZKNODE + \"/\" + configName, true);\n    if(!isValid) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Can not find the specified config set: \" + configName);\n    }\n  }\n\n","sourceOld":"  private void validateConfigOrThrowSolrException(String configName) throws KeeperException, InterruptedException {\n    boolean isValid = zkStateReader.getZkClient().exists(ZkConfigManager.CONFIGS_ZKNODE + \"/\" + configName, true);\n    if(!isValid) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Can not find the specified config set: \" + configName);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#validateConfigOrThrowSolrException(String).mjava","pathOld":"/dev/null","sourceNew":"  void validateConfigOrThrowSolrException(String configName) throws KeeperException, InterruptedException {\n    boolean isValid = zkStateReader.getZkClient().exists(ZkConfigManager.CONFIGS_ZKNODE + \"/\" + configName, true);\n    if(!isValid) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Can not find the specified config set: \" + configName);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","date":1513252583,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#validateConfigOrThrowSolrException(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#validateConfigOrThrowSolrException(String).mjava","sourceNew":"  void validateConfigOrThrowSolrException(String configName) throws IOException, KeeperException, InterruptedException {\n    boolean isValid = cloudManager.getDistribStateManager().hasData(ZkConfigManager.CONFIGS_ZKNODE + \"/\" + configName);\n    if(!isValid) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Can not find the specified config set: \" + configName);\n    }\n  }\n\n","sourceOld":"  void validateConfigOrThrowSolrException(String configName) throws KeeperException, InterruptedException {\n    boolean isValid = zkStateReader.getZkClient().exists(ZkConfigManager.CONFIGS_ZKNODE + \"/\" + configName, true);\n    if(!isValid) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Can not find the specified config set: \" + configName);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6146c07c0dee1ae1e42926167acd127fed5ef59d","date":1516129420,"type":5,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#validateConfigOrThrowSolrException(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#validateConfigOrThrowSolrException(String).mjava","sourceNew":"  void validateConfigOrThrowSolrException(String configName) throws IOException, KeeperException, InterruptedException {\n    boolean isValid = cloudManager.getDistribStateManager().hasData(ZkConfigManager.CONFIGS_ZKNODE + \"/\" + configName);\n    if(!isValid) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Can not find the specified config set: \" + configName);\n    }\n  }\n\n","sourceOld":"  void validateConfigOrThrowSolrException(String configName) throws IOException, KeeperException, InterruptedException {\n    boolean isValid = cloudManager.getDistribStateManager().hasData(ZkConfigManager.CONFIGS_ZKNODE + \"/\" + configName);\n    if(!isValid) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Can not find the specified config set: \" + configName);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#validateConfigOrThrowSolrException(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#validateConfigOrThrowSolrException(String).mjava","sourceNew":"  void validateConfigOrThrowSolrException(String configName) throws IOException, KeeperException, InterruptedException {\n    boolean isValid = cloudManager.getDistribStateManager().hasData(ZkConfigManager.CONFIGS_ZKNODE + \"/\" + configName);\n    if(!isValid) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Can not find the specified config set: \" + configName);\n    }\n  }\n\n","sourceOld":"  void validateConfigOrThrowSolrException(String configName) throws IOException, KeeperException, InterruptedException {\n    boolean isValid = cloudManager.getDistribStateManager().hasData(ZkConfigManager.CONFIGS_ZKNODE + \"/\" + configName);\n    if(!isValid) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Can not find the specified config set: \" + configName);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"403d05f7f8d69b65659157eff1bc1d2717f04c66":["4425aa1103f1abe8e39d220f12e82b94c4f8272a","66e0b82bd39567aa2bf534e5282d05fb4a4a2c76"],"4425aa1103f1abe8e39d220f12e82b94c4f8272a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"66e0b82bd39567aa2bf534e5282d05fb4a4a2c76":["4425aa1103f1abe8e39d220f12e82b94c4f8272a"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","403d05f7f8d69b65659157eff1bc1d2717f04c66"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b94236357aaa22b76c10629851fe4e376e0cea82"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"403d05f7f8d69b65659157eff1bc1d2717f04c66":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4425aa1103f1abe8e39d220f12e82b94c4f8272a":["403d05f7f8d69b65659157eff1bc1d2717f04c66","66e0b82bd39567aa2bf534e5282d05fb4a4a2c76"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4425aa1103f1abe8e39d220f12e82b94c4f8272a","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"66e0b82bd39567aa2bf534e5282d05fb4a4a2c76":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["b94236357aaa22b76c10629851fe4e376e0cea82"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["b94236357aaa22b76c10629851fe4e376e0cea82","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}