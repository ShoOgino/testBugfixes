{"path":"backwards/src/java/org/apache/lucene/util/OpenBitSetDISI#inPlaceAnd(DocIdSetIterator).mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/java/org/apache/lucene/util/OpenBitSetDISI#inPlaceAnd(DocIdSetIterator).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Perform an inplace AND with the doc ids from a given DocIdSetIterator,\n   * leaving only the bits set for which the doc ids are in common.\n   * These doc ids should be smaller than the maximum size passed to the\n   * constructor.\n   */   \n  public void inPlaceAnd(DocIdSetIterator disi) throws IOException {\n    int bitSetDoc = nextSetBit(0);\n    int disiDoc;\n    while (bitSetDoc != -1 && (disiDoc = disi.advance(bitSetDoc)) != DocIdSetIterator.NO_MORE_DOCS) {\n      clear(bitSetDoc, disiDoc);\n      bitSetDoc = nextSetBit(disiDoc + 1);\n    }\n    if (bitSetDoc != -1) {\n      clear(bitSetDoc, size());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/util/OpenBitSetDISI#inPlaceAnd(DocIdSetIterator).mjava","pathOld":"backwards/src/java/org/apache/lucene/util/OpenBitSetDISI#inPlaceAnd(DocIdSetIterator).mjava","sourceNew":"  /**\n   * Perform an inplace AND with the doc ids from a given DocIdSetIterator,\n   * leaving only the bits set for which the doc ids are in common.\n   * These doc ids should be smaller than the maximum size passed to the\n   * constructor.\n   */   \n  public void inPlaceAnd(DocIdSetIterator disi) throws IOException {\n    int bitSetDoc = nextSetBit(0);\n    int disiDoc;\n    while (bitSetDoc != -1 && (disiDoc = disi.advance(bitSetDoc)) != DocIdSetIterator.NO_MORE_DOCS) {\n      clear(bitSetDoc, disiDoc);\n      bitSetDoc = nextSetBit(disiDoc + 1);\n    }\n    if (bitSetDoc != -1) {\n      clear(bitSetDoc, size());\n    }\n  }\n\n","sourceOld":"  /**\n   * Perform an inplace AND with the doc ids from a given DocIdSetIterator,\n   * leaving only the bits set for which the doc ids are in common.\n   * These doc ids should be smaller than the maximum size passed to the\n   * constructor.\n   */   \n  public void inPlaceAnd(DocIdSetIterator disi) throws IOException {\n    int bitSetDoc = nextSetBit(0);\n    int disiDoc;\n    while (bitSetDoc != -1 && (disiDoc = disi.advance(bitSetDoc)) != DocIdSetIterator.NO_MORE_DOCS) {\n      clear(bitSetDoc, disiDoc);\n      bitSetDoc = nextSetBit(disiDoc + 1);\n    }\n    if (bitSetDoc != -1) {\n      clear(bitSetDoc, size());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}