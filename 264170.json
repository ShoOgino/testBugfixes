{"path":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#unzip(String,String).mjava","commits":[{"id":"ddc9931b60a4b1618b9f7cb9c176883390697b1b","date":1173207152,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#unzip(String,String).mjava","pathOld":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#unzip(String).mjava","sourceNew":"  /* Unzips dirName + \".zip\" --> dirName, removing dirName\n     first */\n  public void unzip(String zipName, String destDirName) throws IOException {\n\n    Enumeration entries;\n    ZipFile zipFile;\n    zipFile = new ZipFile(zipName + \".zip\");\n\n    entries = zipFile.entries();\n\n    String dirName = fullDir(destDirName);\n\n    File fileDir = new File(dirName);\n    rmDir(dirName);\n\n    fileDir.mkdir();\n\n    while (entries.hasMoreElements()) {\n      ZipEntry entry = (ZipEntry) entries.nextElement();\n\n      InputStream in = zipFile.getInputStream(entry);\n      OutputStream out = new BufferedOutputStream(new FileOutputStream(new File(fileDir, entry.getName())));\n\n      byte[] buffer = new byte[8192];\n      int len;\n      while((len = in.read(buffer)) >= 0) {\n        out.write(buffer, 0, len);\n      }\n\n      in.close();\n      out.close();\n    }\n\n    zipFile.close();\n  }\n\n","sourceOld":"  /* Unzips dirName + \".zip\" --> dirName, removing dirName\n     first */\n  public void unzip(String dirName) throws IOException {\n    rmDir(dirName);\n\n    Enumeration entries;\n    ZipFile zipFile;\n    zipFile = new ZipFile(dirName + \".zip\");\n\n    entries = zipFile.entries();\n    File fileDir = new File(dirName);\n    fileDir.mkdir();\n\n    while (entries.hasMoreElements()) {\n      ZipEntry entry = (ZipEntry) entries.nextElement();\n\n      InputStream in = zipFile.getInputStream(entry);\n      OutputStream out = new BufferedOutputStream(new FileOutputStream(new File(fileDir, entry.getName())));\n\n      byte[] buffer = new byte[8192];\n      int len;\n      while((len = in.read(buffer)) >= 0) {\n        out.write(buffer, 0, len);\n      }\n\n      in.close();\n      out.close();\n    }\n\n    zipFile.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2f7860d2774dad8347b70e75017322e4816a981","date":1173319910,"type":3,"author":"Doron Cohen","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#unzip(String,String).mjava","pathOld":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#unzip(String,String).mjava","sourceNew":"  /* Unzips dirName + \".zip\" --> dirName, removing dirName\n     first */\n  public void unzip(String zipName, String destDirName) throws IOException {\n\n    Enumeration entries;\n    ZipFile zipFile;\n    zipFile = new ZipFile(zipName + \".zip\");\n\n    entries = zipFile.entries();\n\n    String dirName = fullDir(destDirName);\n\n    File fileDir = new File(dirName);\n    rmDir(destDirName);\n\n    fileDir.mkdir();\n\n    while (entries.hasMoreElements()) {\n      ZipEntry entry = (ZipEntry) entries.nextElement();\n\n      InputStream in = zipFile.getInputStream(entry);\n      OutputStream out = new BufferedOutputStream(new FileOutputStream(new File(fileDir, entry.getName())));\n\n      byte[] buffer = new byte[8192];\n      int len;\n      while((len = in.read(buffer)) >= 0) {\n        out.write(buffer, 0, len);\n      }\n\n      in.close();\n      out.close();\n    }\n\n    zipFile.close();\n  }\n\n","sourceOld":"  /* Unzips dirName + \".zip\" --> dirName, removing dirName\n     first */\n  public void unzip(String zipName, String destDirName) throws IOException {\n\n    Enumeration entries;\n    ZipFile zipFile;\n    zipFile = new ZipFile(zipName + \".zip\");\n\n    entries = zipFile.entries();\n\n    String dirName = fullDir(destDirName);\n\n    File fileDir = new File(dirName);\n    rmDir(dirName);\n\n    fileDir.mkdir();\n\n    while (entries.hasMoreElements()) {\n      ZipEntry entry = (ZipEntry) entries.nextElement();\n\n      InputStream in = zipFile.getInputStream(entry);\n      OutputStream out = new BufferedOutputStream(new FileOutputStream(new File(fileDir, entry.getName())));\n\n      byte[] buffer = new byte[8192];\n      int len;\n      while((len = in.read(buffer)) >= 0) {\n        out.write(buffer, 0, len);\n      }\n\n      in.close();\n      out.close();\n    }\n\n    zipFile.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8d1458a2543cbd30cbfe7929be4dcb5c5251659","date":1254582241,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#unzip(String,String).mjava","sourceNew":null,"sourceOld":"  /* Unzips dirName + \".zip\" --> dirName, removing dirName\n     first */\n  public void unzip(String zipName, String destDirName) throws IOException {\n\n    Enumeration entries;\n    ZipFile zipFile;\n    zipFile = new ZipFile(zipName + \".zip\");\n\n    entries = zipFile.entries();\n\n    String dirName = fullDir(destDirName);\n\n    File fileDir = new File(dirName);\n    rmDir(destDirName);\n\n    fileDir.mkdir();\n\n    while (entries.hasMoreElements()) {\n      ZipEntry entry = (ZipEntry) entries.nextElement();\n\n      InputStream in = zipFile.getInputStream(entry);\n      OutputStream out = new BufferedOutputStream(new FileOutputStream(new File(fileDir, entry.getName())));\n\n      byte[] buffer = new byte[8192];\n      int len;\n      while((len = in.read(buffer)) >= 0) {\n        out.write(buffer, 0, len);\n      }\n\n      in.close();\n      out.close();\n    }\n\n    zipFile.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a046c0c310bc77931fc8441bd920053b607dd14","date":1254584734,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#unzip(String,String).mjava","sourceNew":null,"sourceOld":"  /* Unzips dirName + \".zip\" --> dirName, removing dirName\n     first */\n  public void unzip(String zipName, String destDirName) throws IOException {\n\n    Enumeration entries;\n    ZipFile zipFile;\n    zipFile = new ZipFile(zipName + \".zip\");\n\n    entries = zipFile.entries();\n\n    String dirName = fullDir(destDirName);\n\n    File fileDir = new File(dirName);\n    rmDir(destDirName);\n\n    fileDir.mkdir();\n\n    while (entries.hasMoreElements()) {\n      ZipEntry entry = (ZipEntry) entries.nextElement();\n\n      InputStream in = zipFile.getInputStream(entry);\n      OutputStream out = new BufferedOutputStream(new FileOutputStream(new File(fileDir, entry.getName())));\n\n      byte[] buffer = new byte[8192];\n      int len;\n      while((len = in.read(buffer)) >= 0) {\n        out.write(buffer, 0, len);\n      }\n\n      in.close();\n      out.close();\n    }\n\n    zipFile.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f1b736248cf13d8c143d4af78b588926f4151240","date":1254825163,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#unzip(String,String).mjava","pathOld":"/dev/null","sourceNew":"  /* Unzips dirName + \".zip\" --> dirName, removing dirName\n     first */\n  public void unzip(String zipName, String destDirName) throws IOException {\n\n    Enumeration entries;\n    ZipFile zipFile;\n    zipFile = new ZipFile(zipName + \".zip\");\n\n    entries = zipFile.entries();\n\n    String dirName = fullDir(destDirName);\n\n    File fileDir = new File(dirName);\n    rmDir(destDirName);\n\n    fileDir.mkdir();\n\n    while (entries.hasMoreElements()) {\n      ZipEntry entry = (ZipEntry) entries.nextElement();\n\n      InputStream in = zipFile.getInputStream(entry);\n      OutputStream out = new BufferedOutputStream(new FileOutputStream(new File(fileDir, entry.getName())));\n\n      byte[] buffer = new byte[8192];\n      int len;\n      while((len = in.read(buffer)) >= 0) {\n        out.write(buffer, 0, len);\n      }\n\n      in.close();\n      out.close();\n    }\n\n    zipFile.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9a4b98263fc6c77bb5eb34f7c3e9fd7542b9650","date":1254831793,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#unzip(String,String).mjava","sourceNew":null,"sourceOld":"  /* Unzips dirName + \".zip\" --> dirName, removing dirName\n     first */\n  public void unzip(String zipName, String destDirName) throws IOException {\n\n    Enumeration entries;\n    ZipFile zipFile;\n    zipFile = new ZipFile(zipName + \".zip\");\n\n    entries = zipFile.entries();\n\n    String dirName = fullDir(destDirName);\n\n    File fileDir = new File(dirName);\n    rmDir(destDirName);\n\n    fileDir.mkdir();\n\n    while (entries.hasMoreElements()) {\n      ZipEntry entry = (ZipEntry) entries.nextElement();\n\n      InputStream in = zipFile.getInputStream(entry);\n      OutputStream out = new BufferedOutputStream(new FileOutputStream(new File(fileDir, entry.getName())));\n\n      byte[] buffer = new byte[8192];\n      int len;\n      while((len = in.read(buffer)) >= 0) {\n        out.write(buffer, 0, len);\n      }\n\n      in.close();\n      out.close();\n    }\n\n    zipFile.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c5c0bd3bf61809aea862d848dcf2119d3b9c38bf","date":1254831905,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#unzip(String,String).mjava","pathOld":"/dev/null","sourceNew":"  /* Unzips dirName + \".zip\" --> dirName, removing dirName\n     first */\n  public void unzip(String zipName, String destDirName) throws IOException {\n\n    Enumeration entries;\n    ZipFile zipFile;\n    zipFile = new ZipFile(zipName + \".zip\");\n\n    entries = zipFile.entries();\n\n    String dirName = fullDir(destDirName);\n\n    File fileDir = new File(dirName);\n    rmDir(destDirName);\n\n    fileDir.mkdir();\n\n    while (entries.hasMoreElements()) {\n      ZipEntry entry = (ZipEntry) entries.nextElement();\n\n      InputStream in = zipFile.getInputStream(entry);\n      OutputStream out = new BufferedOutputStream(new FileOutputStream(new File(fileDir, entry.getName())));\n\n      byte[] buffer = new byte[8192];\n      int len;\n      while((len = in.read(buffer)) >= 0) {\n        out.write(buffer, 0, len);\n      }\n\n      in.close();\n      out.close();\n    }\n\n    zipFile.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a","date":1267298041,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#unzip(String,String).mjava","pathOld":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#unzip(String,String).mjava","sourceNew":"  /* Unzips dirName + \".zip\" --> dirName, removing dirName\n     first */\n  public void unzip(String zipName, String destDirName) throws IOException {\n\n    ZipFile zipFile = new ZipFile(zipName + \".zip\");\n\n    Enumeration<? extends ZipEntry> entries = zipFile.entries();\n\n    String dirName = fullDir(destDirName);\n\n    File fileDir = new File(dirName);\n    rmDir(destDirName);\n\n    fileDir.mkdir();\n\n    while (entries.hasMoreElements()) {\n      ZipEntry entry = entries.nextElement();\n\n      InputStream in = zipFile.getInputStream(entry);\n      OutputStream out = new BufferedOutputStream(new FileOutputStream(new File(fileDir, entry.getName())));\n\n      byte[] buffer = new byte[8192];\n      int len;\n      while((len = in.read(buffer)) >= 0) {\n        out.write(buffer, 0, len);\n      }\n\n      in.close();\n      out.close();\n    }\n\n    zipFile.close();\n  }\n\n","sourceOld":"  /* Unzips dirName + \".zip\" --> dirName, removing dirName\n     first */\n  public void unzip(String zipName, String destDirName) throws IOException {\n\n    Enumeration entries;\n    ZipFile zipFile;\n    zipFile = new ZipFile(zipName + \".zip\");\n\n    entries = zipFile.entries();\n\n    String dirName = fullDir(destDirName);\n\n    File fileDir = new File(dirName);\n    rmDir(destDirName);\n\n    fileDir.mkdir();\n\n    while (entries.hasMoreElements()) {\n      ZipEntry entry = (ZipEntry) entries.nextElement();\n\n      InputStream in = zipFile.getInputStream(entry);\n      OutputStream out = new BufferedOutputStream(new FileOutputStream(new File(fileDir, entry.getName())));\n\n      byte[] buffer = new byte[8192];\n      int len;\n      while((len = in.read(buffer)) >= 0) {\n        out.write(buffer, 0, len);\n      }\n\n      in.close();\n      out.close();\n    }\n\n    zipFile.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#unzip(String,String).mjava","pathOld":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#unzip(String,String).mjava","sourceNew":"  /* Unzips dirName + \".zip\" --> dirName, removing dirName\n     first */\n  public void unzip(String zipName, String destDirName) throws IOException {\n\n    ZipFile zipFile = new ZipFile(zipName + \".zip\");\n\n    Enumeration<? extends ZipEntry> entries = zipFile.entries();\n\n    String dirName = fullDir(destDirName);\n\n    File fileDir = new File(dirName);\n    rmDir(destDirName);\n\n    fileDir.mkdir();\n\n    while (entries.hasMoreElements()) {\n      ZipEntry entry = entries.nextElement();\n\n      InputStream in = zipFile.getInputStream(entry);\n      OutputStream out = new BufferedOutputStream(new FileOutputStream(new File(fileDir, entry.getName())));\n\n      byte[] buffer = new byte[8192];\n      int len;\n      while((len = in.read(buffer)) >= 0) {\n        out.write(buffer, 0, len);\n      }\n\n      in.close();\n      out.close();\n    }\n\n    zipFile.close();\n  }\n\n","sourceOld":"  /* Unzips dirName + \".zip\" --> dirName, removing dirName\n     first */\n  public void unzip(String zipName, String destDirName) throws IOException {\n\n    ZipFile zipFile = new ZipFile(zipName + \".zip\");\n\n    Enumeration<? extends ZipEntry> entries = zipFile.entries();\n\n    String dirName = fullDir(destDirName);\n\n    File fileDir = new File(dirName);\n    rmDir(destDirName);\n\n    fileDir.mkdir();\n\n    while (entries.hasMoreElements()) {\n      ZipEntry entry = entries.nextElement();\n\n      InputStream in = zipFile.getInputStream(entry);\n      OutputStream out = new BufferedOutputStream(new FileOutputStream(new File(fileDir, entry.getName())));\n\n      byte[] buffer = new byte[8192];\n      int len;\n      while((len = in.read(buffer)) >= 0) {\n        out.write(buffer, 0, len);\n      }\n\n      in.close();\n      out.close();\n    }\n\n    zipFile.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a9a4b98263fc6c77bb5eb34f7c3e9fd7542b9650":["f1b736248cf13d8c143d4af78b588926f4151240"],"f1b736248cf13d8c143d4af78b588926f4151240":["0a046c0c310bc77931fc8441bd920053b607dd14"],"d2f7860d2774dad8347b70e75017322e4816a981":["ddc9931b60a4b1618b9f7cb9c176883390697b1b"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["d2f7860d2774dad8347b70e75017322e4816a981"],"ddc9931b60a4b1618b9f7cb9c176883390697b1b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0a046c0c310bc77931fc8441bd920053b607dd14":["d2f7860d2774dad8347b70e75017322e4816a981","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"c5c0bd3bf61809aea862d848dcf2119d3b9c38bf":["a9a4b98263fc6c77bb5eb34f7c3e9fd7542b9650"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["c5c0bd3bf61809aea862d848dcf2119d3b9c38bf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"]},"commit2Childs":{"a9a4b98263fc6c77bb5eb34f7c3e9fd7542b9650":["c5c0bd3bf61809aea862d848dcf2119d3b9c38bf"],"f1b736248cf13d8c143d4af78b588926f4151240":["a9a4b98263fc6c77bb5eb34f7c3e9fd7542b9650"],"d2f7860d2774dad8347b70e75017322e4816a981":["e8d1458a2543cbd30cbfe7929be4dcb5c5251659","0a046c0c310bc77931fc8441bd920053b607dd14"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["0a046c0c310bc77931fc8441bd920053b607dd14"],"ddc9931b60a4b1618b9f7cb9c176883390697b1b":["d2f7860d2774dad8347b70e75017322e4816a981"],"0a046c0c310bc77931fc8441bd920053b607dd14":["f1b736248cf13d8c143d4af78b588926f4151240"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ddc9931b60a4b1618b9f7cb9c176883390697b1b"],"c5c0bd3bf61809aea862d848dcf2119d3b9c38bf":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}