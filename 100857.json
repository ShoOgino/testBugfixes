{"path":"solr/core/src/java/org/apache/solr/core/IndexDeletionPolicyWrapper#updateCommitPoints(List[IndexCommitWrapper]).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/IndexDeletionPolicyWrapper#updateCommitPoints(List[IndexCommitWrapper]).mjava","pathOld":"solr/src/java/org/apache/solr/core/IndexDeletionPolicyWrapper#updateCommitPoints(List[IndexCommitWrapper]).mjava","sourceNew":"  private void updateCommitPoints(List<IndexCommitWrapper> list) {\n    Map<Long, IndexCommit> map = new ConcurrentHashMap<Long, IndexCommit>();\n    for (IndexCommitWrapper wrapper : list) {\n      if (!wrapper.isDeleted())\n        map.put(wrapper.getVersion(), wrapper.delegate);\n    }\n    solrVersionVsCommits = map;\n    latestCommit = ((list.get(list.size() - 1)).delegate);\n  }\n\n","sourceOld":"  private void updateCommitPoints(List<IndexCommitWrapper> list) {\n    Map<Long, IndexCommit> map = new ConcurrentHashMap<Long, IndexCommit>();\n    for (IndexCommitWrapper wrapper : list) {\n      if (!wrapper.isDeleted())\n        map.put(wrapper.getVersion(), wrapper.delegate);\n    }\n    solrVersionVsCommits = map;\n    latestCommit = ((list.get(list.size() - 1)).delegate);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/IndexDeletionPolicyWrapper#updateCommitPoints(List[IndexCommitWrapper]).mjava","pathOld":"solr/src/java/org/apache/solr/core/IndexDeletionPolicyWrapper#updateCommitPoints(List[IndexCommitWrapper]).mjava","sourceNew":"  private void updateCommitPoints(List<IndexCommitWrapper> list) {\n    Map<Long, IndexCommit> map = new ConcurrentHashMap<Long, IndexCommit>();\n    for (IndexCommitWrapper wrapper : list) {\n      if (!wrapper.isDeleted())\n        map.put(wrapper.getVersion(), wrapper.delegate);\n    }\n    solrVersionVsCommits = map;\n    latestCommit = ((list.get(list.size() - 1)).delegate);\n  }\n\n","sourceOld":"  private void updateCommitPoints(List<IndexCommitWrapper> list) {\n    Map<Long, IndexCommit> map = new ConcurrentHashMap<Long, IndexCommit>();\n    for (IndexCommitWrapper wrapper : list) {\n      if (!wrapper.isDeleted())\n        map.put(wrapper.getVersion(), wrapper.delegate);\n    }\n    solrVersionVsCommits = map;\n    latestCommit = ((list.get(list.size() - 1)).delegate);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/IndexDeletionPolicyWrapper#updateCommitPoints(List[IndexCommitWrapper]).mjava","pathOld":"solr/src/java/org/apache/solr/core/IndexDeletionPolicyWrapper#updateCommitPoints(List[IndexCommitWrapper]).mjava","sourceNew":"  private void updateCommitPoints(List<IndexCommitWrapper> list) {\n    Map<Long, IndexCommit> map = new ConcurrentHashMap<Long, IndexCommit>();\n    for (IndexCommitWrapper wrapper : list) {\n      if (!wrapper.isDeleted())\n        map.put(wrapper.getVersion(), wrapper.delegate);\n    }\n    solrVersionVsCommits = map;\n    latestCommit = ((list.get(list.size() - 1)).delegate);\n  }\n\n","sourceOld":"  private void updateCommitPoints(List<IndexCommitWrapper> list) {\n    Map<Long, IndexCommit> map = new ConcurrentHashMap<Long, IndexCommit>();\n    for (IndexCommitWrapper wrapper : list) {\n      if (!wrapper.isDeleted())\n        map.put(wrapper.getVersion(), wrapper.delegate);\n    }\n    solrVersionVsCommits = map;\n    latestCommit = ((list.get(list.size() - 1)).delegate);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c01638f4dd94981c1d3d52c4f7991246a5a24aba","date":1327876712,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/IndexDeletionPolicyWrapper#updateCommitPoints(List[IndexCommitWrapper]).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/IndexDeletionPolicyWrapper#updateCommitPoints(List[IndexCommitWrapper]).mjava","sourceNew":"  private void updateCommitPoints(List<IndexCommitWrapper> list) {\n    Map<Long, IndexCommit> map = new ConcurrentHashMap<Long, IndexCommit>();\n    for (IndexCommitWrapper wrapper : list) {\n      if (!wrapper.isDeleted())\n        map.put(wrapper.delegate.getGeneration(), wrapper.delegate);\n    }\n    solrVersionVsCommits = map;\n    latestCommit = ((list.get(list.size() - 1)).delegate);\n  }\n\n","sourceOld":"  private void updateCommitPoints(List<IndexCommitWrapper> list) {\n    Map<Long, IndexCommit> map = new ConcurrentHashMap<Long, IndexCommit>();\n    for (IndexCommitWrapper wrapper : list) {\n      if (!wrapper.isDeleted())\n        map.put(wrapper.getVersion(), wrapper.delegate);\n    }\n    solrVersionVsCommits = map;\n    latestCommit = ((list.get(list.size() - 1)).delegate);\n  }\n\n","bugFix":["97fc5a00245e9b31c118c53df88b1376237ea87b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817882884229bace7dc5d1b75f6b0e4aa1e47122","date":1327879145,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/IndexDeletionPolicyWrapper#updateCommitPoints(List[IndexCommitWrapper]).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/IndexDeletionPolicyWrapper#updateCommitPoints(List[IndexCommitWrapper]).mjava","sourceNew":"  private void updateCommitPoints(List<IndexCommitWrapper> list) {\n    Map<Long, IndexCommit> map = new ConcurrentHashMap<Long, IndexCommit>();\n    for (IndexCommitWrapper wrapper : list) {\n      if (!wrapper.isDeleted())\n        map.put(wrapper.delegate.getGeneration(), wrapper.delegate);\n    }\n    solrVersionVsCommits = map;\n    latestCommit = ((list.get(list.size() - 1)).delegate);\n  }\n\n","sourceOld":"  private void updateCommitPoints(List<IndexCommitWrapper> list) {\n    Map<Long, IndexCommit> map = new ConcurrentHashMap<Long, IndexCommit>();\n    for (IndexCommitWrapper wrapper : list) {\n      if (!wrapper.isDeleted())\n        map.put(wrapper.getVersion(), wrapper.delegate);\n    }\n    solrVersionVsCommits = map;\n    latestCommit = ((list.get(list.size() - 1)).delegate);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5b6fdfce35d0adb18836cf8711abe487a934df33","date":1327946200,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/IndexDeletionPolicyWrapper#updateCommitPoints(List[IndexCommitWrapper]).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/IndexDeletionPolicyWrapper#updateCommitPoints(List[IndexCommitWrapper]).mjava","sourceNew":"  private void updateCommitPoints(List<IndexCommitWrapper> list) {\n    Map<Long, IndexCommit> map = new ConcurrentHashMap<Long, IndexCommit>();\n    for (IndexCommitWrapper wrapper : list) {\n      if (!wrapper.isDeleted())\n        map.put(wrapper.delegate.getGeneration(), wrapper.delegate);\n    }\n    solrVersionVsCommits = map;\n    latestCommit = ((list.get(list.size() - 1)).delegate);\n  }\n\n","sourceOld":"  private void updateCommitPoints(List<IndexCommitWrapper> list) {\n    Map<Long, IndexCommit> map = new ConcurrentHashMap<Long, IndexCommit>();\n    for (IndexCommitWrapper wrapper : list) {\n      if (!wrapper.isDeleted())\n        map.put(wrapper.getVersion(), wrapper.delegate);\n    }\n    solrVersionVsCommits = map;\n    latestCommit = ((list.get(list.size() - 1)).delegate);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"109b21abdf0fadd51984c2935526ece798cbb7b4","date":1367597542,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/IndexDeletionPolicyWrapper#updateCommitPoints(List[IndexCommitWrapper]).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/IndexDeletionPolicyWrapper#updateCommitPoints(List[IndexCommitWrapper]).mjava","sourceNew":"  private void updateCommitPoints(List<IndexCommitWrapper> list) {\n    Map<Long, IndexCommit> map = new ConcurrentHashMap<Long, IndexCommit>();\n    for (IndexCommitWrapper wrapper : list) {\n      if (!wrapper.isDeleted())\n        map.put(wrapper.delegate.getGeneration(), wrapper.delegate);\n    }\n    solrVersionVsCommits = map;\n    if (!list.isEmpty()) {\n      latestCommit = ((list.get(list.size() - 1)).delegate);\n    }\n  }\n\n","sourceOld":"  private void updateCommitPoints(List<IndexCommitWrapper> list) {\n    Map<Long, IndexCommit> map = new ConcurrentHashMap<Long, IndexCommit>();\n    for (IndexCommitWrapper wrapper : list) {\n      if (!wrapper.isDeleted())\n        map.put(wrapper.delegate.getGeneration(), wrapper.delegate);\n    }\n    solrVersionVsCommits = map;\n    latestCommit = ((list.get(list.size() - 1)).delegate);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/IndexDeletionPolicyWrapper#updateCommitPoints(List[IndexCommitWrapper]).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/IndexDeletionPolicyWrapper#updateCommitPoints(List[IndexCommitWrapper]).mjava","sourceNew":"  private void updateCommitPoints(List<IndexCommitWrapper> list) {\n    Map<Long, IndexCommit> map = new ConcurrentHashMap<>();\n    for (IndexCommitWrapper wrapper : list) {\n      if (!wrapper.isDeleted())\n        map.put(wrapper.delegate.getGeneration(), wrapper.delegate);\n    }\n    solrVersionVsCommits = map;\n    if (!list.isEmpty()) {\n      latestCommit = ((list.get(list.size() - 1)).delegate);\n    }\n  }\n\n","sourceOld":"  private void updateCommitPoints(List<IndexCommitWrapper> list) {\n    Map<Long, IndexCommit> map = new ConcurrentHashMap<Long, IndexCommit>();\n    for (IndexCommitWrapper wrapper : list) {\n      if (!wrapper.isDeleted())\n        map.put(wrapper.delegate.getGeneration(), wrapper.delegate);\n    }\n    solrVersionVsCommits = map;\n    if (!list.isEmpty()) {\n      latestCommit = ((list.get(list.size() - 1)).delegate);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19f02bb04467ed179738a398a7da80bbbe161c16","date":1573660732,"type":4,"author":"Chris Hostetter","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/core/IndexDeletionPolicyWrapper#updateCommitPoints(List[IndexCommitWrapper]).mjava","sourceNew":null,"sourceOld":"  private void updateCommitPoints(List<IndexCommitWrapper> list) {\n    Map<Long, IndexCommit> map = new ConcurrentHashMap<>();\n    for (IndexCommitWrapper wrapper : list) {\n      if (!wrapper.isDeleted())\n        map.put(wrapper.delegate.getGeneration(), wrapper.delegate);\n    }\n    solrVersionVsCommits = map;\n    if (!list.isEmpty()) {\n      latestCommit = ((list.get(list.size() - 1)).delegate);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["109b21abdf0fadd51984c2935526ece798cbb7b4"],"109b21abdf0fadd51984c2935526ece798cbb7b4":["c01638f4dd94981c1d3d52c4f7991246a5a24aba"],"c01638f4dd94981c1d3d52c4f7991246a5a24aba":["c26f00b574427b55127e869b935845554afde1fa"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"817882884229bace7dc5d1b75f6b0e4aa1e47122":["c26f00b574427b55127e869b935845554afde1fa","c01638f4dd94981c1d3d52c4f7991246a5a24aba"],"19f02bb04467ed179738a398a7da80bbbe161c16":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5b6fdfce35d0adb18836cf8711abe487a934df33":["c26f00b574427b55127e869b935845554afde1fa","c01638f4dd94981c1d3d52c4f7991246a5a24aba"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["19f02bb04467ed179738a398a7da80bbbe161c16"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["19f02bb04467ed179738a398a7da80bbbe161c16"],"109b21abdf0fadd51984c2935526ece798cbb7b4":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"c01638f4dd94981c1d3d52c4f7991246a5a24aba":["109b21abdf0fadd51984c2935526ece798cbb7b4","817882884229bace7dc5d1b75f6b0e4aa1e47122","5b6fdfce35d0adb18836cf8711abe487a934df33"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"817882884229bace7dc5d1b75f6b0e4aa1e47122":[],"c26f00b574427b55127e869b935845554afde1fa":["c01638f4dd94981c1d3d52c4f7991246a5a24aba","817882884229bace7dc5d1b75f6b0e4aa1e47122","5b6fdfce35d0adb18836cf8711abe487a934df33"],"19f02bb04467ed179738a398a7da80bbbe161c16":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"5b6fdfce35d0adb18836cf8711abe487a934df33":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["817882884229bace7dc5d1b75f6b0e4aa1e47122","5b6fdfce35d0adb18836cf8711abe487a934df33","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}