{"path":"lucene/queries/src/java/org/apache/lucene/queries/TermsQuery#TermsQuery(String,List[BytesRef]).mjava","commits":[{"id":"c2042d3e27841c5b60112990fc33559e10ccf6dd","date":1424537395,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/TermsQuery#TermsQuery(String,List[BytesRef]).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/TermsFilter#TermsFilter(String,List[BytesRef]).mjava","sourceNew":"  /**\n   * Creates a new {@link TermsQuery} from the given {@link BytesRef} list for\n   * a single field.\n   */\n  public TermsQuery(final String field, final List<BytesRef> terms) {\n    this(new FieldAndTermEnum(field) {\n      // we need to sort for deduplication and to have a common cache key\n      final Iterator<BytesRef> iter = sort(terms).iterator();\n      @Override\n      public BytesRef next() {\n        if (iter.hasNext()) {\n          return iter.next();\n        }\n        return null;\n      }\n    }, terms.size());\n  }\n\n","sourceOld":"  /**\n   * Creates a new {@link TermsFilter} from the given {@link BytesRef} list for\n   * a single field.\n   */\n  public TermsFilter(final String field, final List<BytesRef> terms) {\n    this(new FieldAndTermEnum(field) {\n      // we need to sort for deduplication and to have a common cache key\n      final Iterator<BytesRef> iter = sort(terms).iterator();\n      @Override\n      public BytesRef next() {\n        if (iter.hasNext()) {\n          return iter.next();\n        }\n        return null;\n      }\n    }, terms.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a54410d37fe11baed59cc55dcad44db795f732c2","date":1430995912,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/TermsQuery#TermsQuery(String,List[BytesRef]).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/TermsQuery#TermsQuery(String,List[BytesRef]).mjava","sourceNew":"  /**\n   * Creates a new {@link TermsQuery} from the given {@link BytesRef} list for\n   * a single field.\n   */\n  public TermsQuery(final String field, final List<BytesRef> terms) {\n    this(toTermArray(field, terms));\n  }\n\n","sourceOld":"  /**\n   * Creates a new {@link TermsQuery} from the given {@link BytesRef} list for\n   * a single field.\n   */\n  public TermsQuery(final String field, final List<BytesRef> terms) {\n    this(new FieldAndTermEnum(field) {\n      // we need to sort for deduplication and to have a common cache key\n      final Iterator<BytesRef> iter = sort(terms).iterator();\n      @Override\n      public BytesRef next() {\n        if (iter.hasNext()) {\n          return iter.next();\n        }\n        return null;\n      }\n    }, terms.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"01fc0eec0e4dd3fdd2977bb8d7d2997a4c8075cb","date":1453797574,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/TermsQuery#TermsQuery(String,List[BytesRef]).mjava","sourceNew":null,"sourceOld":"  /**\n   * Creates a new {@link TermsQuery} from the given {@link BytesRef} list for\n   * a single field.\n   */\n  public TermsQuery(final String field, final List<BytesRef> terms) {\n    this(toTermArray(field, terms));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac88193d9fe80e165a43bb0555c43afa83da8330","date":1453823827,"type":4,"author":"jbernste","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/TermsQuery#TermsQuery(String,List[BytesRef]).mjava","sourceNew":null,"sourceOld":"  /**\n   * Creates a new {@link TermsQuery} from the given {@link BytesRef} list for\n   * a single field.\n   */\n  public TermsQuery(final String field, final List<BytesRef> terms) {\n    this(toTermArray(field, terms));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":4,"author":"Mike McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/TermsQuery#TermsQuery(String,List[BytesRef]).mjava","sourceNew":null,"sourceOld":"  /**\n   * Creates a new {@link TermsQuery} from the given {@link BytesRef} list for\n   * a single field.\n   */\n  public TermsQuery(final String field, final List<BytesRef> terms) {\n    this(toTermArray(field, terms));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ac88193d9fe80e165a43bb0555c43afa83da8330":["a54410d37fe11baed59cc55dcad44db795f732c2","01fc0eec0e4dd3fdd2977bb8d7d2997a4c8075cb"],"01fc0eec0e4dd3fdd2977bb8d7d2997a4c8075cb":["a54410d37fe11baed59cc55dcad44db795f732c2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["a54410d37fe11baed59cc55dcad44db795f732c2","ac88193d9fe80e165a43bb0555c43afa83da8330"],"a54410d37fe11baed59cc55dcad44db795f732c2":["c2042d3e27841c5b60112990fc33559e10ccf6dd"],"c2042d3e27841c5b60112990fc33559e10ccf6dd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ac88193d9fe80e165a43bb0555c43afa83da8330"]},"commit2Childs":{"ac88193d9fe80e165a43bb0555c43afa83da8330":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"01fc0eec0e4dd3fdd2977bb8d7d2997a4c8075cb":["ac88193d9fe80e165a43bb0555c43afa83da8330"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c2042d3e27841c5b60112990fc33559e10ccf6dd"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"a54410d37fe11baed59cc55dcad44db795f732c2":["ac88193d9fe80e165a43bb0555c43afa83da8330","01fc0eec0e4dd3fdd2977bb8d7d2997a4c8075cb","1e6acbaae7af722f17204ceccf0f7db5753eccf3"],"c2042d3e27841c5b60112990fc33559e10ccf6dd":["a54410d37fe11baed59cc55dcad44db795f732c2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}