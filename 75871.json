{"path":"lucene/core/src/java/org/apache/lucene/codecs/sep/SepDocValuesConsumer#files(Directory,FieldInfos,String,Set[String]).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/sep/SepDocValuesConsumer#files(Directory,FieldInfos,String,Set[String]).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/sep/SepDocValuesConsumer#files(Directory,FieldInfos,String,Set[String]).mjava","sourceNew":"  @SuppressWarnings(\"fallthrough\")\n  private static void files(Directory dir,FieldInfos fieldInfos, String segmentName, Set<String> files)  {\n    for (FieldInfo fieldInfo : fieldInfos) {\n      if (fieldInfo.hasDocValues()) {\n        String filename = docValuesId(segmentName, fieldInfo.number);\n        switch (fieldInfo.getDocValuesType()) {\n          case BYTES_FIXED_DEREF:\n          case BYTES_VAR_DEREF:\n          case BYTES_VAR_STRAIGHT:\n          case BYTES_FIXED_SORTED:\n          case BYTES_VAR_SORTED:\n            files.add(IndexFileNames.segmentFileName(filename, \"\",\n                Writer.INDEX_EXTENSION));\n            try {\n            assert dir.fileExists(IndexFileNames.segmentFileName(filename, \"\",\n                Writer.INDEX_EXTENSION));\n            } catch (IOException e) {\n              // don't throw checked exception - dir is only used in assert \n              throw new RuntimeException(e);\n            }\n            // until here all types use an index\n          case BYTES_FIXED_STRAIGHT:\n          case FLOAT_32:\n          case FLOAT_64:\n          case VAR_INTS:\n          case FIXED_INTS_16:\n          case FIXED_INTS_32:\n          case FIXED_INTS_64:\n          case FIXED_INTS_8:\n            files.add(IndexFileNames.segmentFileName(filename, \"\",\n                Writer.DATA_EXTENSION));\n          try {\n            assert dir.fileExists(IndexFileNames.segmentFileName(filename, \"\",\n                Writer.DATA_EXTENSION));\n          } catch (IOException e) {\n            // don't throw checked exception - dir is only used in assert\n            throw new RuntimeException(e);\n          }\n            break;\n          default:\n            assert false;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"fallthrough\")\n  private static void files(Directory dir,FieldInfos fieldInfos, String segmentName, Set<String> files)  {\n    for (FieldInfo fieldInfo : fieldInfos) {\n      if (fieldInfo.hasDocValues()) {\n        String filename = docValuesId(segmentName, fieldInfo.number);\n        switch (fieldInfo.getDocValuesType()) {\n          case BYTES_FIXED_DEREF:\n          case BYTES_VAR_DEREF:\n          case BYTES_VAR_STRAIGHT:\n          case BYTES_FIXED_SORTED:\n          case BYTES_VAR_SORTED:\n            files.add(IndexFileNames.segmentFileName(filename, \"\",\n                Writer.INDEX_EXTENSION));\n            try {\n            assert dir.fileExists(IndexFileNames.segmentFileName(filename, \"\",\n                Writer.INDEX_EXTENSION));\n            } catch (IOException e) {\n              // don't throw checked exception - dir is only used in assert \n              throw new RuntimeException(e);\n            }\n            // until here all types use an index\n          case BYTES_FIXED_STRAIGHT:\n          case FLOAT_32:\n          case FLOAT_64:\n          case VAR_INTS:\n          case FIXED_INTS_16:\n          case FIXED_INTS_32:\n          case FIXED_INTS_64:\n          case FIXED_INTS_8:\n            files.add(IndexFileNames.segmentFileName(filename, \"\",\n                Writer.DATA_EXTENSION));\n          try {\n            assert dir.fileExists(IndexFileNames.segmentFileName(filename, \"\",\n                Writer.DATA_EXTENSION));\n          } catch (IOException e) {\n            // don't throw checked exception - dir is only used in assert\n            throw new RuntimeException(e);\n          }\n            break;\n          default:\n            assert false;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e0f5e4b06eda9c2996435d90659faa1a8601d196","date":1329255071,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/sep/SepDocValuesConsumer#files(Directory,FieldInfos,String,Set[String]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/sep/SepDocValuesConsumer#files(Directory,FieldInfos,String,Set[String]).mjava","sourceNew":"  @SuppressWarnings(\"fallthrough\")\n  private static void files(Directory dir,FieldInfos fieldInfos, String segmentName, Set<String> files)  {\n    for (FieldInfo fieldInfo : fieldInfos) {\n      if (fieldInfo.hasDocValues()) {\n        String filename = docValuesId(segmentName, fieldInfo.number);\n        switch (fieldInfo.getDocValuesType()) {\n          case BYTES_FIXED_DEREF:\n          case BYTES_VAR_DEREF:\n          case BYTES_VAR_STRAIGHT:\n          case BYTES_FIXED_SORTED:\n          case BYTES_VAR_SORTED:\n            files.add(IndexFileNames.segmentFileName(filename, \"\",\n                INDEX_EXTENSION));\n            try {\n            assert dir.fileExists(IndexFileNames.segmentFileName(filename, \"\",\n                INDEX_EXTENSION));\n            } catch (IOException e) {\n              // don't throw checked exception - dir is only used in assert \n              throw new RuntimeException(e);\n            }\n            // until here all types use an index\n          case BYTES_FIXED_STRAIGHT:\n          case FLOAT_32:\n          case FLOAT_64:\n          case VAR_INTS:\n          case FIXED_INTS_16:\n          case FIXED_INTS_32:\n          case FIXED_INTS_64:\n          case FIXED_INTS_8:\n            files.add(IndexFileNames.segmentFileName(filename, \"\",\n                DATA_EXTENSION));\n          try {\n            assert dir.fileExists(IndexFileNames.segmentFileName(filename, \"\",\n                DATA_EXTENSION));\n          } catch (IOException e) {\n            // don't throw checked exception - dir is only used in assert\n            throw new RuntimeException(e);\n          }\n            break;\n          default:\n            assert false;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"fallthrough\")\n  private static void files(Directory dir,FieldInfos fieldInfos, String segmentName, Set<String> files)  {\n    for (FieldInfo fieldInfo : fieldInfos) {\n      if (fieldInfo.hasDocValues()) {\n        String filename = docValuesId(segmentName, fieldInfo.number);\n        switch (fieldInfo.getDocValuesType()) {\n          case BYTES_FIXED_DEREF:\n          case BYTES_VAR_DEREF:\n          case BYTES_VAR_STRAIGHT:\n          case BYTES_FIXED_SORTED:\n          case BYTES_VAR_SORTED:\n            files.add(IndexFileNames.segmentFileName(filename, \"\",\n                Writer.INDEX_EXTENSION));\n            try {\n            assert dir.fileExists(IndexFileNames.segmentFileName(filename, \"\",\n                Writer.INDEX_EXTENSION));\n            } catch (IOException e) {\n              // don't throw checked exception - dir is only used in assert \n              throw new RuntimeException(e);\n            }\n            // until here all types use an index\n          case BYTES_FIXED_STRAIGHT:\n          case FLOAT_32:\n          case FLOAT_64:\n          case VAR_INTS:\n          case FIXED_INTS_16:\n          case FIXED_INTS_32:\n          case FIXED_INTS_64:\n          case FIXED_INTS_8:\n            files.add(IndexFileNames.segmentFileName(filename, \"\",\n                Writer.DATA_EXTENSION));\n          try {\n            assert dir.fileExists(IndexFileNames.segmentFileName(filename, \"\",\n                Writer.DATA_EXTENSION));\n          } catch (IOException e) {\n            // don't throw checked exception - dir is only used in assert\n            throw new RuntimeException(e);\n          }\n            break;\n          default:\n            assert false;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"de5bbadeb3abac0f650298bff584bd4317bd75aa","date":1331116004,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/sep/SepDocValuesConsumer#files(Directory,FieldInfos,String,Set[String]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/sep/SepDocValuesConsumer#files(Directory,FieldInfos,String,Set[String]).mjava","sourceNew":"  @SuppressWarnings(\"fallthrough\")\n  private static void files(Directory dir,FieldInfos fieldInfos, String segmentName, Set<String> files)  {\n    for (FieldInfo fieldInfo : fieldInfos) {\n      if (fieldInfo.hasDocValues()) {\n        String filename = PerDocProducerBase.docValuesId(segmentName, fieldInfo.number);\n        switch (fieldInfo.getDocValuesType()) {\n          case BYTES_FIXED_DEREF:\n          case BYTES_VAR_DEREF:\n          case BYTES_VAR_STRAIGHT:\n          case BYTES_FIXED_SORTED:\n          case BYTES_VAR_SORTED:\n            files.add(IndexFileNames.segmentFileName(filename, \"\",\n                INDEX_EXTENSION));\n            try {\n            assert dir.fileExists(IndexFileNames.segmentFileName(filename, \"\",\n                INDEX_EXTENSION));\n            } catch (IOException e) {\n              // don't throw checked exception - dir is only used in assert \n              throw new RuntimeException(e);\n            }\n            // until here all types use an index\n          case BYTES_FIXED_STRAIGHT:\n          case FLOAT_32:\n          case FLOAT_64:\n          case VAR_INTS:\n          case FIXED_INTS_16:\n          case FIXED_INTS_32:\n          case FIXED_INTS_64:\n          case FIXED_INTS_8:\n            files.add(IndexFileNames.segmentFileName(filename, \"\",\n                DATA_EXTENSION));\n          try {\n            assert dir.fileExists(IndexFileNames.segmentFileName(filename, \"\",\n                DATA_EXTENSION));\n          } catch (IOException e) {\n            // don't throw checked exception - dir is only used in assert\n            throw new RuntimeException(e);\n          }\n            break;\n          default:\n            assert false;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"fallthrough\")\n  private static void files(Directory dir,FieldInfos fieldInfos, String segmentName, Set<String> files)  {\n    for (FieldInfo fieldInfo : fieldInfos) {\n      if (fieldInfo.hasDocValues()) {\n        String filename = docValuesId(segmentName, fieldInfo.number);\n        switch (fieldInfo.getDocValuesType()) {\n          case BYTES_FIXED_DEREF:\n          case BYTES_VAR_DEREF:\n          case BYTES_VAR_STRAIGHT:\n          case BYTES_FIXED_SORTED:\n          case BYTES_VAR_SORTED:\n            files.add(IndexFileNames.segmentFileName(filename, \"\",\n                INDEX_EXTENSION));\n            try {\n            assert dir.fileExists(IndexFileNames.segmentFileName(filename, \"\",\n                INDEX_EXTENSION));\n            } catch (IOException e) {\n              // don't throw checked exception - dir is only used in assert \n              throw new RuntimeException(e);\n            }\n            // until here all types use an index\n          case BYTES_FIXED_STRAIGHT:\n          case FLOAT_32:\n          case FLOAT_64:\n          case VAR_INTS:\n          case FIXED_INTS_16:\n          case FIXED_INTS_32:\n          case FIXED_INTS_64:\n          case FIXED_INTS_8:\n            files.add(IndexFileNames.segmentFileName(filename, \"\",\n                DATA_EXTENSION));\n          try {\n            assert dir.fileExists(IndexFileNames.segmentFileName(filename, \"\",\n                DATA_EXTENSION));\n          } catch (IOException e) {\n            // don't throw checked exception - dir is only used in assert\n            throw new RuntimeException(e);\n          }\n            break;\n          default:\n            assert false;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"38e3b736c7ca086d61b7dbb841c905ee115490da","date":1331657018,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/sep/SepDocValuesConsumer#files(Directory,FieldInfos,String,Set[String]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/sep/SepDocValuesConsumer#files(Directory,FieldInfos,String,Set[String]).mjava","sourceNew":"  @SuppressWarnings(\"fallthrough\")\n  private static void files(Directory dir,FieldInfos fieldInfos, String segmentName, Set<String> files)  {\n    for (FieldInfo fieldInfo : fieldInfos) {\n      if (fieldInfo.hasDocValues()) {\n        String filename = PerDocProducerBase.docValuesId(segmentName, fieldInfo.number);\n        switch (fieldInfo.getDocValuesType()) {\n          case BYTES_FIXED_DEREF:\n          case BYTES_VAR_DEREF:\n          case BYTES_VAR_STRAIGHT:\n          case BYTES_FIXED_SORTED:\n          case BYTES_VAR_SORTED:\n            files.add(IndexFileNames.segmentFileName(filename, \"\",\n                INDEX_EXTENSION));\n            try {\n            assert dir.fileExists(IndexFileNames.segmentFileName(filename, \"\",\n                INDEX_EXTENSION));\n            } catch (IOException e) {\n              // don't throw checked exception - dir is only used in assert \n              throw new RuntimeException(e);\n            }\n            // until here all types use an index\n          case BYTES_FIXED_STRAIGHT:\n          case FLOAT_32:\n          case FLOAT_64:\n          case VAR_INTS:\n          case FIXED_INTS_16:\n          case FIXED_INTS_32:\n          case FIXED_INTS_64:\n          case FIXED_INTS_8:\n            files.add(IndexFileNames.segmentFileName(filename, \"\",\n                DATA_EXTENSION));\n          try {\n            assert dir.fileExists(IndexFileNames.segmentFileName(filename, \"\",\n                DATA_EXTENSION));\n          } catch (IOException e) {\n            // don't throw checked exception - dir is only used in assert\n            throw new RuntimeException(e);\n          }\n            break;\n          default:\n            assert false;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"fallthrough\")\n  private static void files(Directory dir,FieldInfos fieldInfos, String segmentName, Set<String> files)  {\n    for (FieldInfo fieldInfo : fieldInfos) {\n      if (fieldInfo.hasDocValues()) {\n        String filename = docValuesId(segmentName, fieldInfo.number);\n        switch (fieldInfo.getDocValuesType()) {\n          case BYTES_FIXED_DEREF:\n          case BYTES_VAR_DEREF:\n          case BYTES_VAR_STRAIGHT:\n          case BYTES_FIXED_SORTED:\n          case BYTES_VAR_SORTED:\n            files.add(IndexFileNames.segmentFileName(filename, \"\",\n                INDEX_EXTENSION));\n            try {\n            assert dir.fileExists(IndexFileNames.segmentFileName(filename, \"\",\n                INDEX_EXTENSION));\n            } catch (IOException e) {\n              // don't throw checked exception - dir is only used in assert \n              throw new RuntimeException(e);\n            }\n            // until here all types use an index\n          case BYTES_FIXED_STRAIGHT:\n          case FLOAT_32:\n          case FLOAT_64:\n          case VAR_INTS:\n          case FIXED_INTS_16:\n          case FIXED_INTS_32:\n          case FIXED_INTS_64:\n          case FIXED_INTS_8:\n            files.add(IndexFileNames.segmentFileName(filename, \"\",\n                DATA_EXTENSION));\n          try {\n            assert dir.fileExists(IndexFileNames.segmentFileName(filename, \"\",\n                DATA_EXTENSION));\n          } catch (IOException e) {\n            // don't throw checked exception - dir is only used in assert\n            throw new RuntimeException(e);\n          }\n            break;\n          default:\n            assert false;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2dee33619431ada2a7a07f5fe2dbd94bac6a460","date":1337274029,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/sep/SepDocValuesConsumer#files(Directory,FieldInfos,String,Set[String]).mjava","sourceNew":null,"sourceOld":"  @SuppressWarnings(\"fallthrough\")\n  private static void files(Directory dir,FieldInfos fieldInfos, String segmentName, Set<String> files)  {\n    for (FieldInfo fieldInfo : fieldInfos) {\n      if (fieldInfo.hasDocValues()) {\n        String filename = PerDocProducerBase.docValuesId(segmentName, fieldInfo.number);\n        switch (fieldInfo.getDocValuesType()) {\n          case BYTES_FIXED_DEREF:\n          case BYTES_VAR_DEREF:\n          case BYTES_VAR_STRAIGHT:\n          case BYTES_FIXED_SORTED:\n          case BYTES_VAR_SORTED:\n            files.add(IndexFileNames.segmentFileName(filename, \"\",\n                INDEX_EXTENSION));\n            try {\n            assert dir.fileExists(IndexFileNames.segmentFileName(filename, \"\",\n                INDEX_EXTENSION));\n            } catch (IOException e) {\n              // don't throw checked exception - dir is only used in assert \n              throw new RuntimeException(e);\n            }\n            // until here all types use an index\n          case BYTES_FIXED_STRAIGHT:\n          case FLOAT_32:\n          case FLOAT_64:\n          case VAR_INTS:\n          case FIXED_INTS_16:\n          case FIXED_INTS_32:\n          case FIXED_INTS_64:\n          case FIXED_INTS_8:\n            files.add(IndexFileNames.segmentFileName(filename, \"\",\n                DATA_EXTENSION));\n          try {\n            assert dir.fileExists(IndexFileNames.segmentFileName(filename, \"\",\n                DATA_EXTENSION));\n          } catch (IOException e) {\n            // don't throw checked exception - dir is only used in assert\n            throw new RuntimeException(e);\n          }\n            break;\n          default:\n            assert false;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"615ddbd81799980d0fdd95e0238e1c498b6f47b0","date":1338233290,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/sep/SepDocValuesConsumer#files(Directory,FieldInfos,String,Set[String]).mjava","sourceNew":null,"sourceOld":"  @SuppressWarnings(\"fallthrough\")\n  private static void files(Directory dir,FieldInfos fieldInfos, String segmentName, Set<String> files)  {\n    for (FieldInfo fieldInfo : fieldInfos) {\n      if (fieldInfo.hasDocValues()) {\n        String filename = PerDocProducerBase.docValuesId(segmentName, fieldInfo.number);\n        switch (fieldInfo.getDocValuesType()) {\n          case BYTES_FIXED_DEREF:\n          case BYTES_VAR_DEREF:\n          case BYTES_VAR_STRAIGHT:\n          case BYTES_FIXED_SORTED:\n          case BYTES_VAR_SORTED:\n            files.add(IndexFileNames.segmentFileName(filename, \"\",\n                INDEX_EXTENSION));\n            try {\n            assert dir.fileExists(IndexFileNames.segmentFileName(filename, \"\",\n                INDEX_EXTENSION));\n            } catch (IOException e) {\n              // don't throw checked exception - dir is only used in assert \n              throw new RuntimeException(e);\n            }\n            // until here all types use an index\n          case BYTES_FIXED_STRAIGHT:\n          case FLOAT_32:\n          case FLOAT_64:\n          case VAR_INTS:\n          case FIXED_INTS_16:\n          case FIXED_INTS_32:\n          case FIXED_INTS_64:\n          case FIXED_INTS_8:\n            files.add(IndexFileNames.segmentFileName(filename, \"\",\n                DATA_EXTENSION));\n          try {\n            assert dir.fileExists(IndexFileNames.segmentFileName(filename, \"\",\n                DATA_EXTENSION));\n          } catch (IOException e) {\n            // don't throw checked exception - dir is only used in assert\n            throw new RuntimeException(e);\n          }\n            break;\n          default:\n            assert false;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d2dee33619431ada2a7a07f5fe2dbd94bac6a460":["de5bbadeb3abac0f650298bff584bd4317bd75aa"],"38e3b736c7ca086d61b7dbb841c905ee115490da":["e0f5e4b06eda9c2996435d90659faa1a8601d196","de5bbadeb3abac0f650298bff584bd4317bd75aa"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["de5bbadeb3abac0f650298bff584bd4317bd75aa","d2dee33619431ada2a7a07f5fe2dbd94bac6a460"],"e0f5e4b06eda9c2996435d90659faa1a8601d196":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"de5bbadeb3abac0f650298bff584bd4317bd75aa":["e0f5e4b06eda9c2996435d90659faa1a8601d196"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"]},"commit2Childs":{"d2dee33619431ada2a7a07f5fe2dbd94bac6a460":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"38e3b736c7ca086d61b7dbb841c905ee115490da":[],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e0f5e4b06eda9c2996435d90659faa1a8601d196":["38e3b736c7ca086d61b7dbb841c905ee115490da","de5bbadeb3abac0f650298bff584bd4317bd75aa"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["e0f5e4b06eda9c2996435d90659faa1a8601d196"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"de5bbadeb3abac0f650298bff584bd4317bd75aa":["d2dee33619431ada2a7a07f5fe2dbd94bac6a460","38e3b736c7ca086d61b7dbb841c905ee115490da","615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["38e3b736c7ca086d61b7dbb841c905ee115490da","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}