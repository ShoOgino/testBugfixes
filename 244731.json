{"path":"src/test/org/apache/lucene/index/TestIndexWriter#testStoredFieldsOrder().mjava","commits":[{"id":"99351c613f288821fa2b1fa505fe5cbab9ab0600","date":1247144008,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testStoredFieldsOrder().mjava","pathOld":"/dev/null","sourceNew":"  // LUCENE-1727: make sure doc fields are stored in order\n  public void testStoredFieldsOrder() throws Throwable {\n    Directory d = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(d, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.UNLIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"zzz\", \"a b c\", Field.Store.YES, Field.Index.NO));\n    doc.add(new Field(\"aaa\", \"a b c\", Field.Store.YES, Field.Index.NO));\n    doc.add(new Field(\"zzz\", \"1 2 3\", Field.Store.YES, Field.Index.NO));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    doc = r.document(0);\n    Iterator it = doc.getFields().iterator();\n    assertTrue(it.hasNext());\n    Field f = (Field) it.next();\n    assertEquals(f.name(), \"zzz\");\n    assertEquals(f.stringValue(), \"a b c\");\n\n    assertTrue(it.hasNext());\n    f = (Field) it.next();\n    assertEquals(f.name(), \"aaa\");\n    assertEquals(f.stringValue(), \"a b c\");\n\n    assertTrue(it.hasNext());\n    f = (Field) it.next();\n    assertEquals(f.name(), \"zzz\");\n    assertEquals(f.stringValue(), \"1 2 3\");\n    assertFalse(it.hasNext());\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e450c7d50c2fc84c963d0d7ade9d3217d868064d","date":1259932067,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testStoredFieldsOrder().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testStoredFieldsOrder().mjava","sourceNew":"  // LUCENE-1727: make sure doc fields are stored in order\n  public void testStoredFieldsOrder() throws Throwable {\n    Directory d = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(d, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.UNLIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"zzz\", \"a b c\", Field.Store.YES, Field.Index.NO));\n    doc.add(new Field(\"aaa\", \"a b c\", Field.Store.YES, Field.Index.NO));\n    doc.add(new Field(\"zzz\", \"1 2 3\", Field.Store.YES, Field.Index.NO));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    doc = r.document(0);\n    Iterator<Fieldable> it = doc.getFields().iterator();\n    assertTrue(it.hasNext());\n    Field f = (Field) it.next();\n    assertEquals(f.name(), \"zzz\");\n    assertEquals(f.stringValue(), \"a b c\");\n\n    assertTrue(it.hasNext());\n    f = (Field) it.next();\n    assertEquals(f.name(), \"aaa\");\n    assertEquals(f.stringValue(), \"a b c\");\n\n    assertTrue(it.hasNext());\n    f = (Field) it.next();\n    assertEquals(f.name(), \"zzz\");\n    assertEquals(f.stringValue(), \"1 2 3\");\n    assertFalse(it.hasNext());\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","sourceOld":"  // LUCENE-1727: make sure doc fields are stored in order\n  public void testStoredFieldsOrder() throws Throwable {\n    Directory d = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(d, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.UNLIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"zzz\", \"a b c\", Field.Store.YES, Field.Index.NO));\n    doc.add(new Field(\"aaa\", \"a b c\", Field.Store.YES, Field.Index.NO));\n    doc.add(new Field(\"zzz\", \"1 2 3\", Field.Store.YES, Field.Index.NO));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    doc = r.document(0);\n    Iterator it = doc.getFields().iterator();\n    assertTrue(it.hasNext());\n    Field f = (Field) it.next();\n    assertEquals(f.name(), \"zzz\");\n    assertEquals(f.stringValue(), \"a b c\");\n\n    assertTrue(it.hasNext());\n    f = (Field) it.next();\n    assertEquals(f.name(), \"aaa\");\n    assertEquals(f.stringValue(), \"a b c\");\n\n    assertTrue(it.hasNext());\n    f = (Field) it.next();\n    assertEquals(f.name(), \"zzz\");\n    assertEquals(f.stringValue(), \"1 2 3\");\n    assertFalse(it.hasNext());\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe0932c1d340f83fb0a611e5829b3046a1cc1152","date":1264946739,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testStoredFieldsOrder().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testStoredFieldsOrder().mjava","sourceNew":"  // LUCENE-1727: make sure doc fields are stored in order\n  public void testStoredFieldsOrder() throws Throwable {\n    Directory d = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(d, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), IndexWriter.MaxFieldLength.UNLIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"zzz\", \"a b c\", Field.Store.YES, Field.Index.NO));\n    doc.add(new Field(\"aaa\", \"a b c\", Field.Store.YES, Field.Index.NO));\n    doc.add(new Field(\"zzz\", \"1 2 3\", Field.Store.YES, Field.Index.NO));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    doc = r.document(0);\n    Iterator<Fieldable> it = doc.getFields().iterator();\n    assertTrue(it.hasNext());\n    Field f = (Field) it.next();\n    assertEquals(f.name(), \"zzz\");\n    assertEquals(f.stringValue(), \"a b c\");\n\n    assertTrue(it.hasNext());\n    f = (Field) it.next();\n    assertEquals(f.name(), \"aaa\");\n    assertEquals(f.stringValue(), \"a b c\");\n\n    assertTrue(it.hasNext());\n    f = (Field) it.next();\n    assertEquals(f.name(), \"zzz\");\n    assertEquals(f.stringValue(), \"1 2 3\");\n    assertFalse(it.hasNext());\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","sourceOld":"  // LUCENE-1727: make sure doc fields are stored in order\n  public void testStoredFieldsOrder() throws Throwable {\n    Directory d = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(d, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.UNLIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"zzz\", \"a b c\", Field.Store.YES, Field.Index.NO));\n    doc.add(new Field(\"aaa\", \"a b c\", Field.Store.YES, Field.Index.NO));\n    doc.add(new Field(\"zzz\", \"1 2 3\", Field.Store.YES, Field.Index.NO));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    doc = r.document(0);\n    Iterator<Fieldable> it = doc.getFields().iterator();\n    assertTrue(it.hasNext());\n    Field f = (Field) it.next();\n    assertEquals(f.name(), \"zzz\");\n    assertEquals(f.stringValue(), \"a b c\");\n\n    assertTrue(it.hasNext());\n    f = (Field) it.next();\n    assertEquals(f.name(), \"aaa\");\n    assertEquals(f.stringValue(), \"a b c\");\n\n    assertTrue(it.hasNext());\n    f = (Field) it.next();\n    assertEquals(f.name(), \"zzz\");\n    assertEquals(f.stringValue(), \"1 2 3\");\n    assertFalse(it.hasNext());\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testStoredFieldsOrder().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testStoredFieldsOrder().mjava","sourceNew":"  // LUCENE-1727: make sure doc fields are stored in order\n  public void testStoredFieldsOrder() throws Throwable {\n    Directory d = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(d, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), IndexWriter.MaxFieldLength.UNLIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"zzz\", \"a b c\", Field.Store.YES, Field.Index.NO));\n    doc.add(new Field(\"aaa\", \"a b c\", Field.Store.YES, Field.Index.NO));\n    doc.add(new Field(\"zzz\", \"1 2 3\", Field.Store.YES, Field.Index.NO));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    doc = r.document(0);\n    Iterator<Fieldable> it = doc.getFields().iterator();\n    assertTrue(it.hasNext());\n    Field f = (Field) it.next();\n    assertEquals(f.name(), \"zzz\");\n    assertEquals(f.stringValue(), \"a b c\");\n\n    assertTrue(it.hasNext());\n    f = (Field) it.next();\n    assertEquals(f.name(), \"aaa\");\n    assertEquals(f.stringValue(), \"a b c\");\n\n    assertTrue(it.hasNext());\n    f = (Field) it.next();\n    assertEquals(f.name(), \"zzz\");\n    assertEquals(f.stringValue(), \"1 2 3\");\n    assertFalse(it.hasNext());\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","sourceOld":"  // LUCENE-1727: make sure doc fields are stored in order\n  public void testStoredFieldsOrder() throws Throwable {\n    Directory d = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(d, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), IndexWriter.MaxFieldLength.UNLIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"zzz\", \"a b c\", Field.Store.YES, Field.Index.NO));\n    doc.add(new Field(\"aaa\", \"a b c\", Field.Store.YES, Field.Index.NO));\n    doc.add(new Field(\"zzz\", \"1 2 3\", Field.Store.YES, Field.Index.NO));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    doc = r.document(0);\n    Iterator<Fieldable> it = doc.getFields().iterator();\n    assertTrue(it.hasNext());\n    Field f = (Field) it.next();\n    assertEquals(f.name(), \"zzz\");\n    assertEquals(f.stringValue(), \"a b c\");\n\n    assertTrue(it.hasNext());\n    f = (Field) it.next();\n    assertEquals(f.name(), \"aaa\");\n    assertEquals(f.stringValue(), \"a b c\");\n\n    assertTrue(it.hasNext());\n    f = (Field) it.next();\n    assertEquals(f.name(), \"zzz\");\n    assertEquals(f.stringValue(), \"1 2 3\");\n    assertFalse(it.hasNext());\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testStoredFieldsOrder().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testStoredFieldsOrder().mjava","sourceNew":"  // LUCENE-1727: make sure doc fields are stored in order\n  public void testStoredFieldsOrder() throws Throwable {\n    Directory d = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(d, new IndexWriterConfig(TEST_VERSION_CURRENT));\n    Document doc = new Document();\n    doc.add(new Field(\"zzz\", \"a b c\", Field.Store.YES, Field.Index.NO));\n    doc.add(new Field(\"aaa\", \"a b c\", Field.Store.YES, Field.Index.NO));\n    doc.add(new Field(\"zzz\", \"1 2 3\", Field.Store.YES, Field.Index.NO));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    doc = r.document(0);\n    Iterator<Fieldable> it = doc.getFields().iterator();\n    assertTrue(it.hasNext());\n    Field f = (Field) it.next();\n    assertEquals(f.name(), \"zzz\");\n    assertEquals(f.stringValue(), \"a b c\");\n\n    assertTrue(it.hasNext());\n    f = (Field) it.next();\n    assertEquals(f.name(), \"aaa\");\n    assertEquals(f.stringValue(), \"a b c\");\n\n    assertTrue(it.hasNext());\n    f = (Field) it.next();\n    assertEquals(f.name(), \"zzz\");\n    assertEquals(f.stringValue(), \"1 2 3\");\n    assertFalse(it.hasNext());\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","sourceOld":"  // LUCENE-1727: make sure doc fields are stored in order\n  public void testStoredFieldsOrder() throws Throwable {\n    Directory d = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(d, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), IndexWriter.MaxFieldLength.UNLIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"zzz\", \"a b c\", Field.Store.YES, Field.Index.NO));\n    doc.add(new Field(\"aaa\", \"a b c\", Field.Store.YES, Field.Index.NO));\n    doc.add(new Field(\"zzz\", \"1 2 3\", Field.Store.YES, Field.Index.NO));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    doc = r.document(0);\n    Iterator<Fieldable> it = doc.getFields().iterator();\n    assertTrue(it.hasNext());\n    Field f = (Field) it.next();\n    assertEquals(f.name(), \"zzz\");\n    assertEquals(f.stringValue(), \"a b c\");\n\n    assertTrue(it.hasNext());\n    f = (Field) it.next();\n    assertEquals(f.name(), \"aaa\");\n    assertEquals(f.stringValue(), \"a b c\");\n\n    assertTrue(it.hasNext());\n    f = (Field) it.next();\n    assertEquals(f.name(), \"zzz\");\n    assertEquals(f.stringValue(), \"1 2 3\");\n    assertFalse(it.hasNext());\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testStoredFieldsOrder().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testStoredFieldsOrder().mjava","sourceNew":"  // LUCENE-1727: make sure doc fields are stored in order\n  public void testStoredFieldsOrder() throws Throwable {\n    Directory d = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(d, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), IndexWriter.MaxFieldLength.UNLIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"zzz\", \"a b c\", Field.Store.YES, Field.Index.NO));\n    doc.add(new Field(\"aaa\", \"a b c\", Field.Store.YES, Field.Index.NO));\n    doc.add(new Field(\"zzz\", \"1 2 3\", Field.Store.YES, Field.Index.NO));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    doc = r.document(0);\n    Iterator<Fieldable> it = doc.getFields().iterator();\n    assertTrue(it.hasNext());\n    Field f = (Field) it.next();\n    assertEquals(f.name(), \"zzz\");\n    assertEquals(f.stringValue(), \"a b c\");\n\n    assertTrue(it.hasNext());\n    f = (Field) it.next();\n    assertEquals(f.name(), \"aaa\");\n    assertEquals(f.stringValue(), \"a b c\");\n\n    assertTrue(it.hasNext());\n    f = (Field) it.next();\n    assertEquals(f.name(), \"zzz\");\n    assertEquals(f.stringValue(), \"1 2 3\");\n    assertFalse(it.hasNext());\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","sourceOld":"  // LUCENE-1727: make sure doc fields are stored in order\n  public void testStoredFieldsOrder() throws Throwable {\n    Directory d = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(d, new IndexWriterConfig(TEST_VERSION_CURRENT));\n    Document doc = new Document();\n    doc.add(new Field(\"zzz\", \"a b c\", Field.Store.YES, Field.Index.NO));\n    doc.add(new Field(\"aaa\", \"a b c\", Field.Store.YES, Field.Index.NO));\n    doc.add(new Field(\"zzz\", \"1 2 3\", Field.Store.YES, Field.Index.NO));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    doc = r.document(0);\n    Iterator<Fieldable> it = doc.getFields().iterator();\n    assertTrue(it.hasNext());\n    Field f = (Field) it.next();\n    assertEquals(f.name(), \"zzz\");\n    assertEquals(f.stringValue(), \"a b c\");\n\n    assertTrue(it.hasNext());\n    f = (Field) it.next();\n    assertEquals(f.name(), \"aaa\");\n    assertEquals(f.stringValue(), \"a b c\");\n\n    assertTrue(it.hasNext());\n    f = (Field) it.next();\n    assertEquals(f.name(), \"zzz\");\n    assertEquals(f.stringValue(), \"1 2 3\");\n    assertFalse(it.hasNext());\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testStoredFieldsOrder().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testStoredFieldsOrder().mjava","sourceNew":"  // LUCENE-1727: make sure doc fields are stored in order\n  public void testStoredFieldsOrder() throws Throwable {\n    Directory d = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(d, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    Document doc = new Document();\n    doc.add(new Field(\"zzz\", \"a b c\", Field.Store.YES, Field.Index.NO));\n    doc.add(new Field(\"aaa\", \"a b c\", Field.Store.YES, Field.Index.NO));\n    doc.add(new Field(\"zzz\", \"1 2 3\", Field.Store.YES, Field.Index.NO));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    doc = r.document(0);\n    Iterator<Fieldable> it = doc.getFields().iterator();\n    assertTrue(it.hasNext());\n    Field f = (Field) it.next();\n    assertEquals(f.name(), \"zzz\");\n    assertEquals(f.stringValue(), \"a b c\");\n\n    assertTrue(it.hasNext());\n    f = (Field) it.next();\n    assertEquals(f.name(), \"aaa\");\n    assertEquals(f.stringValue(), \"a b c\");\n\n    assertTrue(it.hasNext());\n    f = (Field) it.next();\n    assertEquals(f.name(), \"zzz\");\n    assertEquals(f.stringValue(), \"1 2 3\");\n    assertFalse(it.hasNext());\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","sourceOld":"  // LUCENE-1727: make sure doc fields are stored in order\n  public void testStoredFieldsOrder() throws Throwable {\n    Directory d = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(d, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), IndexWriter.MaxFieldLength.UNLIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"zzz\", \"a b c\", Field.Store.YES, Field.Index.NO));\n    doc.add(new Field(\"aaa\", \"a b c\", Field.Store.YES, Field.Index.NO));\n    doc.add(new Field(\"zzz\", \"1 2 3\", Field.Store.YES, Field.Index.NO));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    doc = r.document(0);\n    Iterator<Fieldable> it = doc.getFields().iterator();\n    assertTrue(it.hasNext());\n    Field f = (Field) it.next();\n    assertEquals(f.name(), \"zzz\");\n    assertEquals(f.stringValue(), \"a b c\");\n\n    assertTrue(it.hasNext());\n    f = (Field) it.next();\n    assertEquals(f.name(), \"aaa\");\n    assertEquals(f.stringValue(), \"a b c\");\n\n    assertTrue(it.hasNext());\n    f = (Field) it.next();\n    assertEquals(f.name(), \"zzz\");\n    assertEquals(f.stringValue(), \"1 2 3\");\n    assertFalse(it.hasNext());\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testStoredFieldsOrder().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testStoredFieldsOrder().mjava","sourceNew":"  // LUCENE-1727: make sure doc fields are stored in order\n  public void testStoredFieldsOrder() throws Throwable {\n    Directory d = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(d, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    Document doc = new Document();\n    doc.add(new Field(\"zzz\", \"a b c\", Field.Store.YES, Field.Index.NO));\n    doc.add(new Field(\"aaa\", \"a b c\", Field.Store.YES, Field.Index.NO));\n    doc.add(new Field(\"zzz\", \"1 2 3\", Field.Store.YES, Field.Index.NO));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    doc = r.document(0);\n    Iterator<Fieldable> it = doc.getFields().iterator();\n    assertTrue(it.hasNext());\n    Field f = (Field) it.next();\n    assertEquals(f.name(), \"zzz\");\n    assertEquals(f.stringValue(), \"a b c\");\n\n    assertTrue(it.hasNext());\n    f = (Field) it.next();\n    assertEquals(f.name(), \"aaa\");\n    assertEquals(f.stringValue(), \"a b c\");\n\n    assertTrue(it.hasNext());\n    f = (Field) it.next();\n    assertEquals(f.name(), \"zzz\");\n    assertEquals(f.stringValue(), \"1 2 3\");\n    assertFalse(it.hasNext());\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","sourceOld":"  // LUCENE-1727: make sure doc fields are stored in order\n  public void testStoredFieldsOrder() throws Throwable {\n    Directory d = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(d, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    Document doc = new Document();\n    doc.add(new Field(\"zzz\", \"a b c\", Field.Store.YES, Field.Index.NO));\n    doc.add(new Field(\"aaa\", \"a b c\", Field.Store.YES, Field.Index.NO));\n    doc.add(new Field(\"zzz\", \"1 2 3\", Field.Store.YES, Field.Index.NO));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    doc = r.document(0);\n    Iterator<Fieldable> it = doc.getFields().iterator();\n    assertTrue(it.hasNext());\n    Field f = (Field) it.next();\n    assertEquals(f.name(), \"zzz\");\n    assertEquals(f.stringValue(), \"a b c\");\n\n    assertTrue(it.hasNext());\n    f = (Field) it.next();\n    assertEquals(f.name(), \"aaa\");\n    assertEquals(f.stringValue(), \"a b c\");\n\n    assertTrue(it.hasNext());\n    f = (Field) it.next();\n    assertEquals(f.name(), \"zzz\");\n    assertEquals(f.stringValue(), \"1 2 3\");\n    assertFalse(it.hasNext());\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["e450c7d50c2fc84c963d0d7ade9d3217d868064d"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"99351c613f288821fa2b1fa505fe5cbab9ab0600":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1cedb00d2dd44640194401179358a2e3ba6051bf":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"e450c7d50c2fc84c963d0d7ade9d3217d868064d":["99351c613f288821fa2b1fa505fe5cbab9ab0600"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"]},"commit2Childs":{"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"99351c613f288821fa2b1fa505fe5cbab9ab0600":["e450c7d50c2fc84c963d0d7ade9d3217d868064d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["99351c613f288821fa2b1fa505fe5cbab9ab0600"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"e450c7d50c2fc84c963d0d7ade9d3217d868064d":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}