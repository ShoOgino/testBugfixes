{"path":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testTermUTF16SortOrder().mjava","commits":[{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testTermUTF16SortOrder().mjava","pathOld":"/dev/null","sourceNew":"  // Make sure terms, including ones with surrogate pairs,\n  // sort in UTF16 sort order by default\n  public void testTermUTF16SortOrder() throws Throwable {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new SimpleAnalyzer(), IndexWriter.MaxFieldLength.UNLIMITED);\n    Document d = new Document();\n    // Single segment\n    Field f = new Field(\"f\", \"\", Field.Store.NO, Field.Index.NOT_ANALYZED);\n    d.add(f);\n    char[] chars = new char[2];\n    Random rnd = newRandom();\n    final Set<String> allTerms = new HashSet<String>();\n\n    for(int i=0;i<200;i++) {\n\n      final String s;\n      if (rnd.nextBoolean()) {\n        // Single char\n        if (rnd.nextBoolean()) {\n          // Above surrogates\n          chars[0] = (char) getInt(rnd, 1+UnicodeUtil.UNI_SUR_LOW_END, 0xffff);\n        } else {\n          // Below surrogates\n          chars[0] = (char) getInt(rnd, 0, UnicodeUtil.UNI_SUR_HIGH_START-1);\n        }\n        s = new String(chars, 0, 1);\n      } else {\n        // Surrogate pair\n        chars[0] = (char) getInt(rnd, UnicodeUtil.UNI_SUR_HIGH_START, UnicodeUtil.UNI_SUR_HIGH_END);\n        assertTrue(((int) chars[0]) >= UnicodeUtil.UNI_SUR_HIGH_START && ((int) chars[0]) <= UnicodeUtil.UNI_SUR_HIGH_END);\n        chars[1] = (char) getInt(rnd, UnicodeUtil.UNI_SUR_LOW_START, UnicodeUtil.UNI_SUR_LOW_END);\n        s = new String(chars, 0, 2);\n      }\n      allTerms.add(s);\n      f.setValue(s);\n\n      //System.out.println(\"add \" + termDesc(s));\n      writer.addDocument(d);\n\n      if ((1+i) % 42 == 0) {\n        writer.commit();\n      }\n    }\n    \n    IndexReader r = writer.getReader();\n\n    // Test each sub-segment\n    final IndexReader[] subs = r.getSequentialSubReaders();\n    assertEquals(5, subs.length);\n    for(int i=0;i<subs.length;i++) {\n      checkTermsOrder(subs[i], allTerms, false);\n    }\n    checkTermsOrder(r, allTerms, true);\n\n    // Test multi segment\n    r.close();\n\n    writer.optimize();\n\n    // Test optimized single segment\n    r = writer.getReader();\n    checkTermsOrder(r, allTerms, true);\n    r.close();\n\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["a78a90fc9701e511308346ea29f4f5e548bb39fe","a78a90fc9701e511308346ea29f4f5e548bb39fe","a78a90fc9701e511308346ea29f4f5e548bb39fe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2aafd88401639311b0404e67c94e829e123a0e45","date":1273477632,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testTermUTF16SortOrder().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testTermUTF16SortOrder().mjava","sourceNew":"  // Make sure terms, including ones with surrogate pairs,\n  // sort in UTF16 sort order by default\n  public void testTermUTF16SortOrder() throws Throwable {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new SimpleAnalyzer(), IndexWriter.MaxFieldLength.UNLIMITED);\n    Document d = new Document();\n    // Single segment\n    Field f = new Field(\"f\", \"\", Field.Store.NO, Field.Index.NOT_ANALYZED);\n    d.add(f);\n    char[] chars = new char[2];\n    Random rnd = newRandom();\n    final Set<String> allTerms = new HashSet<String>();\n\n    for(int i=0;i<200*_TestUtil.getRandomMultiplier();i++) {\n\n      final String s;\n      if (rnd.nextBoolean()) {\n        // Single char\n        if (rnd.nextBoolean()) {\n          // Above surrogates\n          chars[0] = (char) getInt(rnd, 1+UnicodeUtil.UNI_SUR_LOW_END, 0xffff);\n        } else {\n          // Below surrogates\n          chars[0] = (char) getInt(rnd, 0, UnicodeUtil.UNI_SUR_HIGH_START-1);\n        }\n        s = new String(chars, 0, 1);\n      } else {\n        // Surrogate pair\n        chars[0] = (char) getInt(rnd, UnicodeUtil.UNI_SUR_HIGH_START, UnicodeUtil.UNI_SUR_HIGH_END);\n        assertTrue(((int) chars[0]) >= UnicodeUtil.UNI_SUR_HIGH_START && ((int) chars[0]) <= UnicodeUtil.UNI_SUR_HIGH_END);\n        chars[1] = (char) getInt(rnd, UnicodeUtil.UNI_SUR_LOW_START, UnicodeUtil.UNI_SUR_LOW_END);\n        s = new String(chars, 0, 2);\n      }\n      allTerms.add(s);\n      f.setValue(s);\n\n      //System.out.println(\"add \" + termDesc(s));\n      writer.addDocument(d);\n\n      if ((1+i) % 42 == 0) {\n        writer.commit();\n      }\n    }\n    \n    IndexReader r = writer.getReader();\n\n    // Test each sub-segment\n    final IndexReader[] subs = r.getSequentialSubReaders();\n    for(int i=0;i<subs.length;i++) {\n      checkTermsOrder(subs[i], allTerms, false);\n    }\n    checkTermsOrder(r, allTerms, true);\n\n    // Test multi segment\n    r.close();\n\n    writer.optimize();\n\n    // Test optimized single segment\n    r = writer.getReader();\n    checkTermsOrder(r, allTerms, true);\n    r.close();\n\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // Make sure terms, including ones with surrogate pairs,\n  // sort in UTF16 sort order by default\n  public void testTermUTF16SortOrder() throws Throwable {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new SimpleAnalyzer(), IndexWriter.MaxFieldLength.UNLIMITED);\n    Document d = new Document();\n    // Single segment\n    Field f = new Field(\"f\", \"\", Field.Store.NO, Field.Index.NOT_ANALYZED);\n    d.add(f);\n    char[] chars = new char[2];\n    Random rnd = newRandom();\n    final Set<String> allTerms = new HashSet<String>();\n\n    for(int i=0;i<200;i++) {\n\n      final String s;\n      if (rnd.nextBoolean()) {\n        // Single char\n        if (rnd.nextBoolean()) {\n          // Above surrogates\n          chars[0] = (char) getInt(rnd, 1+UnicodeUtil.UNI_SUR_LOW_END, 0xffff);\n        } else {\n          // Below surrogates\n          chars[0] = (char) getInt(rnd, 0, UnicodeUtil.UNI_SUR_HIGH_START-1);\n        }\n        s = new String(chars, 0, 1);\n      } else {\n        // Surrogate pair\n        chars[0] = (char) getInt(rnd, UnicodeUtil.UNI_SUR_HIGH_START, UnicodeUtil.UNI_SUR_HIGH_END);\n        assertTrue(((int) chars[0]) >= UnicodeUtil.UNI_SUR_HIGH_START && ((int) chars[0]) <= UnicodeUtil.UNI_SUR_HIGH_END);\n        chars[1] = (char) getInt(rnd, UnicodeUtil.UNI_SUR_LOW_START, UnicodeUtil.UNI_SUR_LOW_END);\n        s = new String(chars, 0, 2);\n      }\n      allTerms.add(s);\n      f.setValue(s);\n\n      //System.out.println(\"add \" + termDesc(s));\n      writer.addDocument(d);\n\n      if ((1+i) % 42 == 0) {\n        writer.commit();\n      }\n    }\n    \n    IndexReader r = writer.getReader();\n\n    // Test each sub-segment\n    final IndexReader[] subs = r.getSequentialSubReaders();\n    assertEquals(5, subs.length);\n    for(int i=0;i<subs.length;i++) {\n      checkTermsOrder(subs[i], allTerms, false);\n    }\n    checkTermsOrder(r, allTerms, true);\n\n    // Test multi segment\n    r.close();\n\n    writer.optimize();\n\n    // Test optimized single segment\n    r = writer.getReader();\n    checkTermsOrder(r, allTerms, true);\n    r.close();\n\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d572389229127c297dd1fa5ce4758e1cec41e799","date":1273610938,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testTermUTF16SortOrder().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testTermUTF16SortOrder().mjava","sourceNew":"  // Make sure terms, including ones with surrogate pairs,\n  // sort in UTF16 sort order by default\n  public void testTermUTF16SortOrder() throws Throwable {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new MockAnalyzer(), IndexWriter.MaxFieldLength.UNLIMITED);\n    Document d = new Document();\n    // Single segment\n    Field f = new Field(\"f\", \"\", Field.Store.NO, Field.Index.NOT_ANALYZED);\n    d.add(f);\n    char[] chars = new char[2];\n    Random rnd = newRandom();\n    final Set<String> allTerms = new HashSet<String>();\n\n    for(int i=0;i<200*_TestUtil.getRandomMultiplier();i++) {\n\n      final String s;\n      if (rnd.nextBoolean()) {\n        // Single char\n        if (rnd.nextBoolean()) {\n          // Above surrogates\n          chars[0] = (char) getInt(rnd, 1+UnicodeUtil.UNI_SUR_LOW_END, 0xffff);\n        } else {\n          // Below surrogates\n          chars[0] = (char) getInt(rnd, 0, UnicodeUtil.UNI_SUR_HIGH_START-1);\n        }\n        s = new String(chars, 0, 1);\n      } else {\n        // Surrogate pair\n        chars[0] = (char) getInt(rnd, UnicodeUtil.UNI_SUR_HIGH_START, UnicodeUtil.UNI_SUR_HIGH_END);\n        assertTrue(((int) chars[0]) >= UnicodeUtil.UNI_SUR_HIGH_START && ((int) chars[0]) <= UnicodeUtil.UNI_SUR_HIGH_END);\n        chars[1] = (char) getInt(rnd, UnicodeUtil.UNI_SUR_LOW_START, UnicodeUtil.UNI_SUR_LOW_END);\n        s = new String(chars, 0, 2);\n      }\n      allTerms.add(s);\n      f.setValue(s);\n\n      //System.out.println(\"add \" + termDesc(s));\n      writer.addDocument(d);\n\n      if ((1+i) % 42 == 0) {\n        writer.commit();\n      }\n    }\n    \n    IndexReader r = writer.getReader();\n\n    // Test each sub-segment\n    final IndexReader[] subs = r.getSequentialSubReaders();\n    for(int i=0;i<subs.length;i++) {\n      checkTermsOrder(subs[i], allTerms, false);\n    }\n    checkTermsOrder(r, allTerms, true);\n\n    // Test multi segment\n    r.close();\n\n    writer.optimize();\n\n    // Test optimized single segment\n    r = writer.getReader();\n    checkTermsOrder(r, allTerms, true);\n    r.close();\n\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // Make sure terms, including ones with surrogate pairs,\n  // sort in UTF16 sort order by default\n  public void testTermUTF16SortOrder() throws Throwable {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new SimpleAnalyzer(), IndexWriter.MaxFieldLength.UNLIMITED);\n    Document d = new Document();\n    // Single segment\n    Field f = new Field(\"f\", \"\", Field.Store.NO, Field.Index.NOT_ANALYZED);\n    d.add(f);\n    char[] chars = new char[2];\n    Random rnd = newRandom();\n    final Set<String> allTerms = new HashSet<String>();\n\n    for(int i=0;i<200*_TestUtil.getRandomMultiplier();i++) {\n\n      final String s;\n      if (rnd.nextBoolean()) {\n        // Single char\n        if (rnd.nextBoolean()) {\n          // Above surrogates\n          chars[0] = (char) getInt(rnd, 1+UnicodeUtil.UNI_SUR_LOW_END, 0xffff);\n        } else {\n          // Below surrogates\n          chars[0] = (char) getInt(rnd, 0, UnicodeUtil.UNI_SUR_HIGH_START-1);\n        }\n        s = new String(chars, 0, 1);\n      } else {\n        // Surrogate pair\n        chars[0] = (char) getInt(rnd, UnicodeUtil.UNI_SUR_HIGH_START, UnicodeUtil.UNI_SUR_HIGH_END);\n        assertTrue(((int) chars[0]) >= UnicodeUtil.UNI_SUR_HIGH_START && ((int) chars[0]) <= UnicodeUtil.UNI_SUR_HIGH_END);\n        chars[1] = (char) getInt(rnd, UnicodeUtil.UNI_SUR_LOW_START, UnicodeUtil.UNI_SUR_LOW_END);\n        s = new String(chars, 0, 2);\n      }\n      allTerms.add(s);\n      f.setValue(s);\n\n      //System.out.println(\"add \" + termDesc(s));\n      writer.addDocument(d);\n\n      if ((1+i) % 42 == 0) {\n        writer.commit();\n      }\n    }\n    \n    IndexReader r = writer.getReader();\n\n    // Test each sub-segment\n    final IndexReader[] subs = r.getSequentialSubReaders();\n    for(int i=0;i<subs.length;i++) {\n      checkTermsOrder(subs[i], allTerms, false);\n    }\n    checkTermsOrder(r, allTerms, true);\n\n    // Test multi segment\n    r.close();\n\n    writer.optimize();\n\n    // Test optimized single segment\n    r = writer.getReader();\n    checkTermsOrder(r, allTerms, true);\n    r.close();\n\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"163fe85a71d778fd2b7747f65ca27b54829e2e57","date":1279898785,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testTermUTF16SortOrder().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testTermUTF16SortOrder().mjava","sourceNew":"  // Make sure terms, including ones with surrogate pairs,\n  // sort in UTF16 sort order by default\n  public void testTermUTF16SortOrder() throws Throwable {\n    Directory dir = new MockRAMDirectory();\n    // nocommit -- allow preflexrw but must force preflex\n    // for reading\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setCodecProvider(_TestUtil.alwaysCodec(\"Standard\")));\n    Document d = new Document();\n    // Single segment\n    Field f = new Field(\"f\", \"\", Field.Store.NO, Field.Index.NOT_ANALYZED);\n    d.add(f);\n    char[] chars = new char[2];\n    Random rnd = newRandom();\n    final Set<String> allTerms = new HashSet<String>();\n\n    for(int i=0;i<10*_TestUtil.getRandomMultiplier();i++) {\n\n      final String s;\n      if (rnd.nextBoolean()) {\n        // Single char\n        if (rnd.nextBoolean()) {\n          // Above surrogates\n          chars[0] = (char) getInt(rnd, 1+UnicodeUtil.UNI_SUR_LOW_END, 0xffff);\n        } else {\n          // Below surrogates\n          chars[0] = (char) getInt(rnd, 0, UnicodeUtil.UNI_SUR_HIGH_START-1);\n        }\n        s = new String(chars, 0, 1);\n      } else {\n        // Surrogate pair\n        chars[0] = (char) getInt(rnd, UnicodeUtil.UNI_SUR_HIGH_START, UnicodeUtil.UNI_SUR_HIGH_END);\n        assertTrue(((int) chars[0]) >= UnicodeUtil.UNI_SUR_HIGH_START && ((int) chars[0]) <= UnicodeUtil.UNI_SUR_HIGH_END);\n        chars[1] = (char) getInt(rnd, UnicodeUtil.UNI_SUR_LOW_START, UnicodeUtil.UNI_SUR_LOW_END);\n        s = new String(chars, 0, 2);\n      }\n      allTerms.add(s);\n      f.setValue(s);\n\n      writer.addDocument(d);\n\n      if ((1+i) % 42 == 0) {\n        writer.commit();\n      }\n    }\n\n    IndexReader r = writer.getReader();\n\n    // Test each sub-segment\n    final IndexReader[] subs = r.getSequentialSubReaders();\n    for(int i=0;i<subs.length;i++) {\n      checkTermsOrder(subs[i], allTerms, false);\n    }\n    checkTermsOrder(r, allTerms, true);\n\n    // Test multi segment\n    r.close();\n\n    writer.optimize();\n\n    // Test optimized single segment\n    r = writer.getReader();\n    checkTermsOrder(r, allTerms, true);\n    r.close();\n\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // Make sure terms, including ones with surrogate pairs,\n  // sort in UTF16 sort order by default\n  public void testTermUTF16SortOrder() throws Throwable {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new MockAnalyzer(), IndexWriter.MaxFieldLength.UNLIMITED);\n    Document d = new Document();\n    // Single segment\n    Field f = new Field(\"f\", \"\", Field.Store.NO, Field.Index.NOT_ANALYZED);\n    d.add(f);\n    char[] chars = new char[2];\n    Random rnd = newRandom();\n    final Set<String> allTerms = new HashSet<String>();\n\n    for(int i=0;i<200*_TestUtil.getRandomMultiplier();i++) {\n\n      final String s;\n      if (rnd.nextBoolean()) {\n        // Single char\n        if (rnd.nextBoolean()) {\n          // Above surrogates\n          chars[0] = (char) getInt(rnd, 1+UnicodeUtil.UNI_SUR_LOW_END, 0xffff);\n        } else {\n          // Below surrogates\n          chars[0] = (char) getInt(rnd, 0, UnicodeUtil.UNI_SUR_HIGH_START-1);\n        }\n        s = new String(chars, 0, 1);\n      } else {\n        // Surrogate pair\n        chars[0] = (char) getInt(rnd, UnicodeUtil.UNI_SUR_HIGH_START, UnicodeUtil.UNI_SUR_HIGH_END);\n        assertTrue(((int) chars[0]) >= UnicodeUtil.UNI_SUR_HIGH_START && ((int) chars[0]) <= UnicodeUtil.UNI_SUR_HIGH_END);\n        chars[1] = (char) getInt(rnd, UnicodeUtil.UNI_SUR_LOW_START, UnicodeUtil.UNI_SUR_LOW_END);\n        s = new String(chars, 0, 2);\n      }\n      allTerms.add(s);\n      f.setValue(s);\n\n      //System.out.println(\"add \" + termDesc(s));\n      writer.addDocument(d);\n\n      if ((1+i) % 42 == 0) {\n        writer.commit();\n      }\n    }\n    \n    IndexReader r = writer.getReader();\n\n    // Test each sub-segment\n    final IndexReader[] subs = r.getSequentialSubReaders();\n    for(int i=0;i<subs.length;i++) {\n      checkTermsOrder(subs[i], allTerms, false);\n    }\n    checkTermsOrder(r, allTerms, true);\n\n    // Test multi segment\n    r.close();\n\n    writer.optimize();\n\n    // Test optimized single segment\n    r = writer.getReader();\n    checkTermsOrder(r, allTerms, true);\n    r.close();\n\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"24b91b08ba3110a0904b8ba9803276bf9a9b5f6d","date":1279972526,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testTermUTF16SortOrder().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testTermUTF16SortOrder().mjava","sourceNew":"  // Make sure terms, including ones with surrogate pairs,\n  // sort in codepoint sort order by default\n  public void testTermUTF16SortOrder() throws Throwable {\n    Random rnd = newRandom();\n    Directory dir = new MockRAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(rnd, dir);\n    Document d = new Document();\n    // Single segment\n    Field f = new Field(\"f\", \"\", Field.Store.NO, Field.Index.NOT_ANALYZED);\n    d.add(f);\n    char[] chars = new char[2];\n    final Set<String> allTerms = new HashSet<String>();\n\n    for(int i=0;i<10*_TestUtil.getRandomMultiplier();i++) {\n\n      final String s;\n      if (rnd.nextBoolean()) {\n        // Single char\n        if (rnd.nextBoolean()) {\n          // Above surrogates\n          chars[0] = (char) getInt(rnd, 1+UnicodeUtil.UNI_SUR_LOW_END, 0xffff);\n        } else {\n          // Below surrogates\n          chars[0] = (char) getInt(rnd, 0, UnicodeUtil.UNI_SUR_HIGH_START-1);\n        }\n        s = new String(chars, 0, 1);\n      } else {\n        // Surrogate pair\n        chars[0] = (char) getInt(rnd, UnicodeUtil.UNI_SUR_HIGH_START, UnicodeUtil.UNI_SUR_HIGH_END);\n        assertTrue(((int) chars[0]) >= UnicodeUtil.UNI_SUR_HIGH_START && ((int) chars[0]) <= UnicodeUtil.UNI_SUR_HIGH_END);\n        chars[1] = (char) getInt(rnd, UnicodeUtil.UNI_SUR_LOW_START, UnicodeUtil.UNI_SUR_LOW_END);\n        s = new String(chars, 0, 2);\n      }\n      allTerms.add(s);\n      f.setValue(s);\n\n      writer.addDocument(d);\n\n      if ((1+i) % 42 == 0) {\n        writer.commit();\n      }\n    }\n\n    IndexReader r = writer.getReader();\n\n    // Test each sub-segment\n    final IndexReader[] subs = r.getSequentialSubReaders();\n    for(int i=0;i<subs.length;i++) {\n      checkTermsOrder(subs[i], allTerms, false);\n    }\n    checkTermsOrder(r, allTerms, true);\n\n    // Test multi segment\n    r.close();\n\n    writer.optimize();\n\n    // Test optimized single segment\n    r = writer.getReader();\n    checkTermsOrder(r, allTerms, true);\n    r.close();\n\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // Make sure terms, including ones with surrogate pairs,\n  // sort in UTF16 sort order by default\n  public void testTermUTF16SortOrder() throws Throwable {\n    Directory dir = new MockRAMDirectory();\n    // nocommit -- allow preflexrw but must force preflex\n    // for reading\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setCodecProvider(_TestUtil.alwaysCodec(\"Standard\")));\n    Document d = new Document();\n    // Single segment\n    Field f = new Field(\"f\", \"\", Field.Store.NO, Field.Index.NOT_ANALYZED);\n    d.add(f);\n    char[] chars = new char[2];\n    Random rnd = newRandom();\n    final Set<String> allTerms = new HashSet<String>();\n\n    for(int i=0;i<10*_TestUtil.getRandomMultiplier();i++) {\n\n      final String s;\n      if (rnd.nextBoolean()) {\n        // Single char\n        if (rnd.nextBoolean()) {\n          // Above surrogates\n          chars[0] = (char) getInt(rnd, 1+UnicodeUtil.UNI_SUR_LOW_END, 0xffff);\n        } else {\n          // Below surrogates\n          chars[0] = (char) getInt(rnd, 0, UnicodeUtil.UNI_SUR_HIGH_START-1);\n        }\n        s = new String(chars, 0, 1);\n      } else {\n        // Surrogate pair\n        chars[0] = (char) getInt(rnd, UnicodeUtil.UNI_SUR_HIGH_START, UnicodeUtil.UNI_SUR_HIGH_END);\n        assertTrue(((int) chars[0]) >= UnicodeUtil.UNI_SUR_HIGH_START && ((int) chars[0]) <= UnicodeUtil.UNI_SUR_HIGH_END);\n        chars[1] = (char) getInt(rnd, UnicodeUtil.UNI_SUR_LOW_START, UnicodeUtil.UNI_SUR_LOW_END);\n        s = new String(chars, 0, 2);\n      }\n      allTerms.add(s);\n      f.setValue(s);\n\n      writer.addDocument(d);\n\n      if ((1+i) % 42 == 0) {\n        writer.commit();\n      }\n    }\n\n    IndexReader r = writer.getReader();\n\n    // Test each sub-segment\n    final IndexReader[] subs = r.getSequentialSubReaders();\n    for(int i=0;i<subs.length;i++) {\n      checkTermsOrder(subs[i], allTerms, false);\n    }\n    checkTermsOrder(r, allTerms, true);\n\n    // Test multi segment\n    r.close();\n\n    writer.optimize();\n\n    // Test optimized single segment\n    r = writer.getReader();\n    checkTermsOrder(r, allTerms, true);\n    r.close();\n\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4b103252dee6afa1b6d7a622c773d178788eb85a","date":1280180143,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testTermUTF16SortOrder().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testTermUTF16SortOrder().mjava","sourceNew":"  // Make sure terms, including ones with surrogate pairs,\n  // sort in codepoint sort order by default\n  public void testTermUTF16SortOrder() throws Throwable {\n    Random rnd = newRandom();\n    Directory dir = new MockRAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(rnd, dir);\n    Document d = new Document();\n    // Single segment\n    Field f = new Field(\"f\", \"\", Field.Store.NO, Field.Index.NOT_ANALYZED);\n    d.add(f);\n    char[] chars = new char[2];\n    final Set<String> allTerms = new HashSet<String>();\n\n    for(int i=0;i<200*_TestUtil.getRandomMultiplier();i++) {\n\n      final String s;\n      if (rnd.nextBoolean()) {\n        // Single char\n        if (rnd.nextBoolean()) {\n          // Above surrogates\n          chars[0] = (char) getInt(rnd, 1+UnicodeUtil.UNI_SUR_LOW_END, 0xffff);\n        } else {\n          // Below surrogates\n          chars[0] = (char) getInt(rnd, 0, UnicodeUtil.UNI_SUR_HIGH_START-1);\n        }\n        s = new String(chars, 0, 1);\n      } else {\n        // Surrogate pair\n        chars[0] = (char) getInt(rnd, UnicodeUtil.UNI_SUR_HIGH_START, UnicodeUtil.UNI_SUR_HIGH_END);\n        assertTrue(((int) chars[0]) >= UnicodeUtil.UNI_SUR_HIGH_START && ((int) chars[0]) <= UnicodeUtil.UNI_SUR_HIGH_END);\n        chars[1] = (char) getInt(rnd, UnicodeUtil.UNI_SUR_LOW_START, UnicodeUtil.UNI_SUR_LOW_END);\n        s = new String(chars, 0, 2);\n      }\n      allTerms.add(s);\n      f.setValue(s);\n\n      writer.addDocument(d);\n\n      if ((1+i) % 42 == 0) {\n        writer.commit();\n      }\n    }\n\n    IndexReader r = writer.getReader();\n\n    // Test each sub-segment\n    final IndexReader[] subs = r.getSequentialSubReaders();\n    for(int i=0;i<subs.length;i++) {\n      checkTermsOrder(subs[i], allTerms, false);\n    }\n    checkTermsOrder(r, allTerms, true);\n\n    // Test multi segment\n    r.close();\n\n    writer.optimize();\n\n    // Test optimized single segment\n    r = writer.getReader();\n    checkTermsOrder(r, allTerms, true);\n    r.close();\n\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // Make sure terms, including ones with surrogate pairs,\n  // sort in UTF16 sort order by default\n  public void testTermUTF16SortOrder() throws Throwable {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new MockAnalyzer(), IndexWriter.MaxFieldLength.UNLIMITED);\n    Document d = new Document();\n    // Single segment\n    Field f = new Field(\"f\", \"\", Field.Store.NO, Field.Index.NOT_ANALYZED);\n    d.add(f);\n    char[] chars = new char[2];\n    Random rnd = newRandom();\n    final Set<String> allTerms = new HashSet<String>();\n\n    for(int i=0;i<200*_TestUtil.getRandomMultiplier();i++) {\n\n      final String s;\n      if (rnd.nextBoolean()) {\n        // Single char\n        if (rnd.nextBoolean()) {\n          // Above surrogates\n          chars[0] = (char) getInt(rnd, 1+UnicodeUtil.UNI_SUR_LOW_END, 0xffff);\n        } else {\n          // Below surrogates\n          chars[0] = (char) getInt(rnd, 0, UnicodeUtil.UNI_SUR_HIGH_START-1);\n        }\n        s = new String(chars, 0, 1);\n      } else {\n        // Surrogate pair\n        chars[0] = (char) getInt(rnd, UnicodeUtil.UNI_SUR_HIGH_START, UnicodeUtil.UNI_SUR_HIGH_END);\n        assertTrue(((int) chars[0]) >= UnicodeUtil.UNI_SUR_HIGH_START && ((int) chars[0]) <= UnicodeUtil.UNI_SUR_HIGH_END);\n        chars[1] = (char) getInt(rnd, UnicodeUtil.UNI_SUR_LOW_START, UnicodeUtil.UNI_SUR_LOW_END);\n        s = new String(chars, 0, 2);\n      }\n      allTerms.add(s);\n      f.setValue(s);\n\n      //System.out.println(\"add \" + termDesc(s));\n      writer.addDocument(d);\n\n      if ((1+i) % 42 == 0) {\n        writer.commit();\n      }\n    }\n    \n    IndexReader r = writer.getReader();\n\n    // Test each sub-segment\n    final IndexReader[] subs = r.getSequentialSubReaders();\n    for(int i=0;i<subs.length;i++) {\n      checkTermsOrder(subs[i], allTerms, false);\n    }\n    checkTermsOrder(r, allTerms, true);\n\n    // Test multi segment\n    r.close();\n\n    writer.optimize();\n\n    // Test optimized single segment\n    r = writer.getReader();\n    checkTermsOrder(r, allTerms, true);\n    r.close();\n\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0e45742e10e8e3b98e854babe6dbb07a4197b71","date":1280230285,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testTermUTF16SortOrder().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testTermUTF16SortOrder().mjava","sourceNew":"  // Make sure terms, including ones with surrogate pairs,\n  // sort in codepoint sort order by default\n  public void testTermUTF16SortOrder() throws Throwable {\n    Random rnd = newRandom();\n    Directory dir = new MockRAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(rnd, dir);\n    Document d = new Document();\n    // Single segment\n    Field f = new Field(\"f\", \"\", Field.Store.NO, Field.Index.NOT_ANALYZED);\n    d.add(f);\n    char[] chars = new char[2];\n    final Set<String> allTerms = new HashSet<String>();\n\n    int num = 200 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n\n      final String s;\n      if (rnd.nextBoolean()) {\n        // Single char\n        if (rnd.nextBoolean()) {\n          // Above surrogates\n          chars[0] = (char) getInt(rnd, 1+UnicodeUtil.UNI_SUR_LOW_END, 0xffff);\n        } else {\n          // Below surrogates\n          chars[0] = (char) getInt(rnd, 0, UnicodeUtil.UNI_SUR_HIGH_START-1);\n        }\n        s = new String(chars, 0, 1);\n      } else {\n        // Surrogate pair\n        chars[0] = (char) getInt(rnd, UnicodeUtil.UNI_SUR_HIGH_START, UnicodeUtil.UNI_SUR_HIGH_END);\n        assertTrue(((int) chars[0]) >= UnicodeUtil.UNI_SUR_HIGH_START && ((int) chars[0]) <= UnicodeUtil.UNI_SUR_HIGH_END);\n        chars[1] = (char) getInt(rnd, UnicodeUtil.UNI_SUR_LOW_START, UnicodeUtil.UNI_SUR_LOW_END);\n        s = new String(chars, 0, 2);\n      }\n      allTerms.add(s);\n      f.setValue(s);\n\n      writer.addDocument(d);\n\n      if ((1+i) % 42 == 0) {\n        writer.commit();\n      }\n    }\n\n    IndexReader r = writer.getReader();\n\n    // Test each sub-segment\n    final IndexReader[] subs = r.getSequentialSubReaders();\n    for(int i=0;i<subs.length;i++) {\n      checkTermsOrder(subs[i], allTerms, false);\n    }\n    checkTermsOrder(r, allTerms, true);\n\n    // Test multi segment\n    r.close();\n\n    writer.optimize();\n\n    // Test optimized single segment\n    r = writer.getReader();\n    checkTermsOrder(r, allTerms, true);\n    r.close();\n\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // Make sure terms, including ones with surrogate pairs,\n  // sort in codepoint sort order by default\n  public void testTermUTF16SortOrder() throws Throwable {\n    Random rnd = newRandom();\n    Directory dir = new MockRAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(rnd, dir);\n    Document d = new Document();\n    // Single segment\n    Field f = new Field(\"f\", \"\", Field.Store.NO, Field.Index.NOT_ANALYZED);\n    d.add(f);\n    char[] chars = new char[2];\n    final Set<String> allTerms = new HashSet<String>();\n\n    for(int i=0;i<200*_TestUtil.getRandomMultiplier();i++) {\n\n      final String s;\n      if (rnd.nextBoolean()) {\n        // Single char\n        if (rnd.nextBoolean()) {\n          // Above surrogates\n          chars[0] = (char) getInt(rnd, 1+UnicodeUtil.UNI_SUR_LOW_END, 0xffff);\n        } else {\n          // Below surrogates\n          chars[0] = (char) getInt(rnd, 0, UnicodeUtil.UNI_SUR_HIGH_START-1);\n        }\n        s = new String(chars, 0, 1);\n      } else {\n        // Surrogate pair\n        chars[0] = (char) getInt(rnd, UnicodeUtil.UNI_SUR_HIGH_START, UnicodeUtil.UNI_SUR_HIGH_END);\n        assertTrue(((int) chars[0]) >= UnicodeUtil.UNI_SUR_HIGH_START && ((int) chars[0]) <= UnicodeUtil.UNI_SUR_HIGH_END);\n        chars[1] = (char) getInt(rnd, UnicodeUtil.UNI_SUR_LOW_START, UnicodeUtil.UNI_SUR_LOW_END);\n        s = new String(chars, 0, 2);\n      }\n      allTerms.add(s);\n      f.setValue(s);\n\n      writer.addDocument(d);\n\n      if ((1+i) % 42 == 0) {\n        writer.commit();\n      }\n    }\n\n    IndexReader r = writer.getReader();\n\n    // Test each sub-segment\n    final IndexReader[] subs = r.getSequentialSubReaders();\n    for(int i=0;i<subs.length;i++) {\n      checkTermsOrder(subs[i], allTerms, false);\n    }\n    checkTermsOrder(r, allTerms, true);\n\n    // Test multi segment\n    r.close();\n\n    writer.optimize();\n\n    // Test optimized single segment\n    r = writer.getReader();\n    checkTermsOrder(r, allTerms, true);\n    r.close();\n\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3242a09f703274d3b9283f2064a1a33064b53a1b","date":1280263474,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testTermUTF16SortOrder().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testTermUTF16SortOrder().mjava","sourceNew":"  // Make sure terms, including ones with surrogate pairs,\n  // sort in codepoint sort order by default\n  public void testTermUTF16SortOrder() throws Throwable {\n    Random rnd = newRandom();\n    Directory dir = new MockRAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(rnd, dir);\n    Document d = new Document();\n    // Single segment\n    Field f = new Field(\"f\", \"\", Field.Store.NO, Field.Index.NOT_ANALYZED);\n    d.add(f);\n    char[] chars = new char[2];\n    final Set<String> allTerms = new HashSet<String>();\n\n    int num = 200 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n\n      final String s;\n      if (rnd.nextBoolean()) {\n        // Single char\n        if (rnd.nextBoolean()) {\n          // Above surrogates\n          chars[0] = (char) getInt(rnd, 1+UnicodeUtil.UNI_SUR_LOW_END, 0xffff);\n        } else {\n          // Below surrogates\n          chars[0] = (char) getInt(rnd, 0, UnicodeUtil.UNI_SUR_HIGH_START-1);\n        }\n        s = new String(chars, 0, 1);\n      } else {\n        // Surrogate pair\n        chars[0] = (char) getInt(rnd, UnicodeUtil.UNI_SUR_HIGH_START, UnicodeUtil.UNI_SUR_HIGH_END);\n        assertTrue(((int) chars[0]) >= UnicodeUtil.UNI_SUR_HIGH_START && ((int) chars[0]) <= UnicodeUtil.UNI_SUR_HIGH_END);\n        chars[1] = (char) getInt(rnd, UnicodeUtil.UNI_SUR_LOW_START, UnicodeUtil.UNI_SUR_LOW_END);\n        s = new String(chars, 0, 2);\n      }\n      allTerms.add(s);\n      f.setValue(s);\n\n      writer.addDocument(d);\n\n      if ((1+i) % 42 == 0) {\n        writer.commit();\n      }\n    }\n\n    IndexReader r = writer.getReader();\n\n    // Test each sub-segment\n    final IndexReader[] subs = r.getSequentialSubReaders();\n    for(int i=0;i<subs.length;i++) {\n      checkTermsOrder(subs[i], allTerms, false);\n    }\n    checkTermsOrder(r, allTerms, true);\n\n    // Test multi segment\n    r.close();\n\n    writer.optimize();\n\n    // Test optimized single segment\n    r = writer.getReader();\n    checkTermsOrder(r, allTerms, true);\n    r.close();\n\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // Make sure terms, including ones with surrogate pairs,\n  // sort in UTF16 sort order by default\n  public void testTermUTF16SortOrder() throws Throwable {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new MockAnalyzer(), IndexWriter.MaxFieldLength.UNLIMITED);\n    Document d = new Document();\n    // Single segment\n    Field f = new Field(\"f\", \"\", Field.Store.NO, Field.Index.NOT_ANALYZED);\n    d.add(f);\n    char[] chars = new char[2];\n    Random rnd = newRandom();\n    final Set<String> allTerms = new HashSet<String>();\n\n    for(int i=0;i<200*_TestUtil.getRandomMultiplier();i++) {\n\n      final String s;\n      if (rnd.nextBoolean()) {\n        // Single char\n        if (rnd.nextBoolean()) {\n          // Above surrogates\n          chars[0] = (char) getInt(rnd, 1+UnicodeUtil.UNI_SUR_LOW_END, 0xffff);\n        } else {\n          // Below surrogates\n          chars[0] = (char) getInt(rnd, 0, UnicodeUtil.UNI_SUR_HIGH_START-1);\n        }\n        s = new String(chars, 0, 1);\n      } else {\n        // Surrogate pair\n        chars[0] = (char) getInt(rnd, UnicodeUtil.UNI_SUR_HIGH_START, UnicodeUtil.UNI_SUR_HIGH_END);\n        assertTrue(((int) chars[0]) >= UnicodeUtil.UNI_SUR_HIGH_START && ((int) chars[0]) <= UnicodeUtil.UNI_SUR_HIGH_END);\n        chars[1] = (char) getInt(rnd, UnicodeUtil.UNI_SUR_LOW_START, UnicodeUtil.UNI_SUR_LOW_END);\n        s = new String(chars, 0, 2);\n      }\n      allTerms.add(s);\n      f.setValue(s);\n\n      //System.out.println(\"add \" + termDesc(s));\n      writer.addDocument(d);\n\n      if ((1+i) % 42 == 0) {\n        writer.commit();\n      }\n    }\n    \n    IndexReader r = writer.getReader();\n\n    // Test each sub-segment\n    final IndexReader[] subs = r.getSequentialSubReaders();\n    for(int i=0;i<subs.length;i++) {\n      checkTermsOrder(subs[i], allTerms, false);\n    }\n    checkTermsOrder(r, allTerms, true);\n\n    // Test multi segment\n    r.close();\n\n    writer.optimize();\n\n    // Test optimized single segment\n    r = writer.getReader();\n    checkTermsOrder(r, allTerms, true);\n    r.close();\n\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b21422ff1d1d56499dec481f193b402e5e8def5b","date":1281472367,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testTermUTF16SortOrder().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testTermUTF16SortOrder().mjava","sourceNew":"  // Make sure terms, including ones with surrogate pairs,\n  // sort in codepoint sort order by default\n  public void testTermUTF16SortOrder() throws Throwable {\n    Random rnd = random;\n    Directory dir = new MockRAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(rnd, dir);\n    Document d = new Document();\n    // Single segment\n    Field f = new Field(\"f\", \"\", Field.Store.NO, Field.Index.NOT_ANALYZED);\n    d.add(f);\n    char[] chars = new char[2];\n    final Set<String> allTerms = new HashSet<String>();\n\n    int num = 200 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n\n      final String s;\n      if (rnd.nextBoolean()) {\n        // Single char\n        if (rnd.nextBoolean()) {\n          // Above surrogates\n          chars[0] = (char) getInt(rnd, 1+UnicodeUtil.UNI_SUR_LOW_END, 0xffff);\n        } else {\n          // Below surrogates\n          chars[0] = (char) getInt(rnd, 0, UnicodeUtil.UNI_SUR_HIGH_START-1);\n        }\n        s = new String(chars, 0, 1);\n      } else {\n        // Surrogate pair\n        chars[0] = (char) getInt(rnd, UnicodeUtil.UNI_SUR_HIGH_START, UnicodeUtil.UNI_SUR_HIGH_END);\n        assertTrue(((int) chars[0]) >= UnicodeUtil.UNI_SUR_HIGH_START && ((int) chars[0]) <= UnicodeUtil.UNI_SUR_HIGH_END);\n        chars[1] = (char) getInt(rnd, UnicodeUtil.UNI_SUR_LOW_START, UnicodeUtil.UNI_SUR_LOW_END);\n        s = new String(chars, 0, 2);\n      }\n      allTerms.add(s);\n      f.setValue(s);\n\n      writer.addDocument(d);\n\n      if ((1+i) % 42 == 0) {\n        writer.commit();\n      }\n    }\n\n    IndexReader r = writer.getReader();\n\n    // Test each sub-segment\n    final IndexReader[] subs = r.getSequentialSubReaders();\n    for(int i=0;i<subs.length;i++) {\n      checkTermsOrder(subs[i], allTerms, false);\n    }\n    checkTermsOrder(r, allTerms, true);\n\n    // Test multi segment\n    r.close();\n\n    writer.optimize();\n\n    // Test optimized single segment\n    r = writer.getReader();\n    checkTermsOrder(r, allTerms, true);\n    r.close();\n\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // Make sure terms, including ones with surrogate pairs,\n  // sort in codepoint sort order by default\n  public void testTermUTF16SortOrder() throws Throwable {\n    Random rnd = newRandom();\n    Directory dir = new MockRAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(rnd, dir);\n    Document d = new Document();\n    // Single segment\n    Field f = new Field(\"f\", \"\", Field.Store.NO, Field.Index.NOT_ANALYZED);\n    d.add(f);\n    char[] chars = new char[2];\n    final Set<String> allTerms = new HashSet<String>();\n\n    int num = 200 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n\n      final String s;\n      if (rnd.nextBoolean()) {\n        // Single char\n        if (rnd.nextBoolean()) {\n          // Above surrogates\n          chars[0] = (char) getInt(rnd, 1+UnicodeUtil.UNI_SUR_LOW_END, 0xffff);\n        } else {\n          // Below surrogates\n          chars[0] = (char) getInt(rnd, 0, UnicodeUtil.UNI_SUR_HIGH_START-1);\n        }\n        s = new String(chars, 0, 1);\n      } else {\n        // Surrogate pair\n        chars[0] = (char) getInt(rnd, UnicodeUtil.UNI_SUR_HIGH_START, UnicodeUtil.UNI_SUR_HIGH_END);\n        assertTrue(((int) chars[0]) >= UnicodeUtil.UNI_SUR_HIGH_START && ((int) chars[0]) <= UnicodeUtil.UNI_SUR_HIGH_END);\n        chars[1] = (char) getInt(rnd, UnicodeUtil.UNI_SUR_LOW_START, UnicodeUtil.UNI_SUR_LOW_END);\n        s = new String(chars, 0, 2);\n      }\n      allTerms.add(s);\n      f.setValue(s);\n\n      writer.addDocument(d);\n\n      if ((1+i) % 42 == 0) {\n        writer.commit();\n      }\n    }\n\n    IndexReader r = writer.getReader();\n\n    // Test each sub-segment\n    final IndexReader[] subs = r.getSequentialSubReaders();\n    for(int i=0;i<subs.length;i++) {\n      checkTermsOrder(subs[i], allTerms, false);\n    }\n    checkTermsOrder(r, allTerms, true);\n\n    // Test multi segment\n    r.close();\n\n    writer.optimize();\n\n    // Test optimized single segment\n    r = writer.getReader();\n    checkTermsOrder(r, allTerms, true);\n    r.close();\n\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testTermUTF16SortOrder().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testTermUTF16SortOrder().mjava","sourceNew":"  // Make sure terms, including ones with surrogate pairs,\n  // sort in codepoint sort order by default\n  public void testTermUTF16SortOrder() throws Throwable {\n    Random rnd = random;\n    Directory dir = newDirectory(random);\n    RandomIndexWriter writer = new RandomIndexWriter(rnd, dir);\n    Document d = new Document();\n    // Single segment\n    Field f = new Field(\"f\", \"\", Field.Store.NO, Field.Index.NOT_ANALYZED);\n    d.add(f);\n    char[] chars = new char[2];\n    final Set<String> allTerms = new HashSet<String>();\n\n    int num = 200 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n\n      final String s;\n      if (rnd.nextBoolean()) {\n        // Single char\n        if (rnd.nextBoolean()) {\n          // Above surrogates\n          chars[0] = (char) getInt(rnd, 1+UnicodeUtil.UNI_SUR_LOW_END, 0xffff);\n        } else {\n          // Below surrogates\n          chars[0] = (char) getInt(rnd, 0, UnicodeUtil.UNI_SUR_HIGH_START-1);\n        }\n        s = new String(chars, 0, 1);\n      } else {\n        // Surrogate pair\n        chars[0] = (char) getInt(rnd, UnicodeUtil.UNI_SUR_HIGH_START, UnicodeUtil.UNI_SUR_HIGH_END);\n        assertTrue(((int) chars[0]) >= UnicodeUtil.UNI_SUR_HIGH_START && ((int) chars[0]) <= UnicodeUtil.UNI_SUR_HIGH_END);\n        chars[1] = (char) getInt(rnd, UnicodeUtil.UNI_SUR_LOW_START, UnicodeUtil.UNI_SUR_LOW_END);\n        s = new String(chars, 0, 2);\n      }\n      allTerms.add(s);\n      f.setValue(s);\n\n      writer.addDocument(d);\n\n      if ((1+i) % 42 == 0) {\n        writer.commit();\n      }\n    }\n\n    IndexReader r = writer.getReader();\n\n    // Test each sub-segment\n    final IndexReader[] subs = r.getSequentialSubReaders();\n    for(int i=0;i<subs.length;i++) {\n      checkTermsOrder(subs[i], allTerms, false);\n    }\n    checkTermsOrder(r, allTerms, true);\n\n    // Test multi segment\n    r.close();\n\n    writer.optimize();\n\n    // Test optimized single segment\n    r = writer.getReader();\n    checkTermsOrder(r, allTerms, true);\n    r.close();\n\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // Make sure terms, including ones with surrogate pairs,\n  // sort in codepoint sort order by default\n  public void testTermUTF16SortOrder() throws Throwable {\n    Random rnd = random;\n    Directory dir = new MockRAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(rnd, dir);\n    Document d = new Document();\n    // Single segment\n    Field f = new Field(\"f\", \"\", Field.Store.NO, Field.Index.NOT_ANALYZED);\n    d.add(f);\n    char[] chars = new char[2];\n    final Set<String> allTerms = new HashSet<String>();\n\n    int num = 200 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n\n      final String s;\n      if (rnd.nextBoolean()) {\n        // Single char\n        if (rnd.nextBoolean()) {\n          // Above surrogates\n          chars[0] = (char) getInt(rnd, 1+UnicodeUtil.UNI_SUR_LOW_END, 0xffff);\n        } else {\n          // Below surrogates\n          chars[0] = (char) getInt(rnd, 0, UnicodeUtil.UNI_SUR_HIGH_START-1);\n        }\n        s = new String(chars, 0, 1);\n      } else {\n        // Surrogate pair\n        chars[0] = (char) getInt(rnd, UnicodeUtil.UNI_SUR_HIGH_START, UnicodeUtil.UNI_SUR_HIGH_END);\n        assertTrue(((int) chars[0]) >= UnicodeUtil.UNI_SUR_HIGH_START && ((int) chars[0]) <= UnicodeUtil.UNI_SUR_HIGH_END);\n        chars[1] = (char) getInt(rnd, UnicodeUtil.UNI_SUR_LOW_START, UnicodeUtil.UNI_SUR_LOW_END);\n        s = new String(chars, 0, 2);\n      }\n      allTerms.add(s);\n      f.setValue(s);\n\n      writer.addDocument(d);\n\n      if ((1+i) % 42 == 0) {\n        writer.commit();\n      }\n    }\n\n    IndexReader r = writer.getReader();\n\n    // Test each sub-segment\n    final IndexReader[] subs = r.getSequentialSubReaders();\n    for(int i=0;i<subs.length;i++) {\n      checkTermsOrder(subs[i], allTerms, false);\n    }\n    checkTermsOrder(r, allTerms, true);\n\n    // Test multi segment\n    r.close();\n\n    writer.optimize();\n\n    // Test optimized single segment\n    r = writer.getReader();\n    checkTermsOrder(r, allTerms, true);\n    r.close();\n\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testTermUTF16SortOrder().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testTermUTF16SortOrder().mjava","sourceNew":"  // Make sure terms, including ones with surrogate pairs,\n  // sort in codepoint sort order by default\n  public void testTermUTF16SortOrder() throws Throwable {\n    Random rnd = random;\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(rnd, dir);\n    Document d = new Document();\n    // Single segment\n    Field f = new Field(\"f\", \"\", Field.Store.NO, Field.Index.NOT_ANALYZED);\n    d.add(f);\n    char[] chars = new char[2];\n    final Set<String> allTerms = new HashSet<String>();\n\n    int num = 200 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n\n      final String s;\n      if (rnd.nextBoolean()) {\n        // Single char\n        if (rnd.nextBoolean()) {\n          // Above surrogates\n          chars[0] = (char) getInt(rnd, 1+UnicodeUtil.UNI_SUR_LOW_END, 0xffff);\n        } else {\n          // Below surrogates\n          chars[0] = (char) getInt(rnd, 0, UnicodeUtil.UNI_SUR_HIGH_START-1);\n        }\n        s = new String(chars, 0, 1);\n      } else {\n        // Surrogate pair\n        chars[0] = (char) getInt(rnd, UnicodeUtil.UNI_SUR_HIGH_START, UnicodeUtil.UNI_SUR_HIGH_END);\n        assertTrue(((int) chars[0]) >= UnicodeUtil.UNI_SUR_HIGH_START && ((int) chars[0]) <= UnicodeUtil.UNI_SUR_HIGH_END);\n        chars[1] = (char) getInt(rnd, UnicodeUtil.UNI_SUR_LOW_START, UnicodeUtil.UNI_SUR_LOW_END);\n        s = new String(chars, 0, 2);\n      }\n      allTerms.add(s);\n      f.setValue(s);\n\n      writer.addDocument(d);\n\n      if ((1+i) % 42 == 0) {\n        writer.commit();\n      }\n    }\n\n    IndexReader r = writer.getReader();\n\n    // Test each sub-segment\n    final IndexReader[] subs = r.getSequentialSubReaders();\n    for(int i=0;i<subs.length;i++) {\n      checkTermsOrder(subs[i], allTerms, false);\n    }\n    checkTermsOrder(r, allTerms, true);\n\n    // Test multi segment\n    r.close();\n\n    writer.optimize();\n\n    // Test optimized single segment\n    r = writer.getReader();\n    checkTermsOrder(r, allTerms, true);\n    r.close();\n\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // Make sure terms, including ones with surrogate pairs,\n  // sort in codepoint sort order by default\n  public void testTermUTF16SortOrder() throws Throwable {\n    Random rnd = random;\n    Directory dir = newDirectory(random);\n    RandomIndexWriter writer = new RandomIndexWriter(rnd, dir);\n    Document d = new Document();\n    // Single segment\n    Field f = new Field(\"f\", \"\", Field.Store.NO, Field.Index.NOT_ANALYZED);\n    d.add(f);\n    char[] chars = new char[2];\n    final Set<String> allTerms = new HashSet<String>();\n\n    int num = 200 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n\n      final String s;\n      if (rnd.nextBoolean()) {\n        // Single char\n        if (rnd.nextBoolean()) {\n          // Above surrogates\n          chars[0] = (char) getInt(rnd, 1+UnicodeUtil.UNI_SUR_LOW_END, 0xffff);\n        } else {\n          // Below surrogates\n          chars[0] = (char) getInt(rnd, 0, UnicodeUtil.UNI_SUR_HIGH_START-1);\n        }\n        s = new String(chars, 0, 1);\n      } else {\n        // Surrogate pair\n        chars[0] = (char) getInt(rnd, UnicodeUtil.UNI_SUR_HIGH_START, UnicodeUtil.UNI_SUR_HIGH_END);\n        assertTrue(((int) chars[0]) >= UnicodeUtil.UNI_SUR_HIGH_START && ((int) chars[0]) <= UnicodeUtil.UNI_SUR_HIGH_END);\n        chars[1] = (char) getInt(rnd, UnicodeUtil.UNI_SUR_LOW_START, UnicodeUtil.UNI_SUR_LOW_END);\n        s = new String(chars, 0, 2);\n      }\n      allTerms.add(s);\n      f.setValue(s);\n\n      writer.addDocument(d);\n\n      if ((1+i) % 42 == 0) {\n        writer.commit();\n      }\n    }\n\n    IndexReader r = writer.getReader();\n\n    // Test each sub-segment\n    final IndexReader[] subs = r.getSequentialSubReaders();\n    for(int i=0;i<subs.length;i++) {\n      checkTermsOrder(subs[i], allTerms, false);\n    }\n    checkTermsOrder(r, allTerms, true);\n\n    // Test multi segment\n    r.close();\n\n    writer.optimize();\n\n    // Test optimized single segment\n    r = writer.getReader();\n    checkTermsOrder(r, allTerms, true);\n    r.close();\n\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"132903c28af3aa6f67284b78de91c0f0a99488c2","date":1284282129,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testTermUTF16SortOrder().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testTermUTF16SortOrder().mjava","sourceNew":"  // Make sure terms, including ones with surrogate pairs,\n  // sort in codepoint sort order by default\n  public void testTermUTF16SortOrder() throws Throwable {\n    Random rnd = random;\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(rnd, dir);\n    Document d = new Document();\n    // Single segment\n    Field f = newField(\"f\", \"\", Field.Store.NO, Field.Index.NOT_ANALYZED);\n    d.add(f);\n    char[] chars = new char[2];\n    final Set<String> allTerms = new HashSet<String>();\n\n    int num = 200 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n\n      final String s;\n      if (rnd.nextBoolean()) {\n        // Single char\n        if (rnd.nextBoolean()) {\n          // Above surrogates\n          chars[0] = (char) getInt(rnd, 1+UnicodeUtil.UNI_SUR_LOW_END, 0xffff);\n        } else {\n          // Below surrogates\n          chars[0] = (char) getInt(rnd, 0, UnicodeUtil.UNI_SUR_HIGH_START-1);\n        }\n        s = new String(chars, 0, 1);\n      } else {\n        // Surrogate pair\n        chars[0] = (char) getInt(rnd, UnicodeUtil.UNI_SUR_HIGH_START, UnicodeUtil.UNI_SUR_HIGH_END);\n        assertTrue(((int) chars[0]) >= UnicodeUtil.UNI_SUR_HIGH_START && ((int) chars[0]) <= UnicodeUtil.UNI_SUR_HIGH_END);\n        chars[1] = (char) getInt(rnd, UnicodeUtil.UNI_SUR_LOW_START, UnicodeUtil.UNI_SUR_LOW_END);\n        s = new String(chars, 0, 2);\n      }\n      allTerms.add(s);\n      f.setValue(s);\n\n      writer.addDocument(d);\n\n      if ((1+i) % 42 == 0) {\n        writer.commit();\n      }\n    }\n\n    IndexReader r = writer.getReader();\n\n    // Test each sub-segment\n    final IndexReader[] subs = r.getSequentialSubReaders();\n    for(int i=0;i<subs.length;i++) {\n      checkTermsOrder(subs[i], allTerms, false);\n    }\n    checkTermsOrder(r, allTerms, true);\n\n    // Test multi segment\n    r.close();\n\n    writer.optimize();\n\n    // Test optimized single segment\n    r = writer.getReader();\n    checkTermsOrder(r, allTerms, true);\n    r.close();\n\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // Make sure terms, including ones with surrogate pairs,\n  // sort in codepoint sort order by default\n  public void testTermUTF16SortOrder() throws Throwable {\n    Random rnd = random;\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(rnd, dir);\n    Document d = new Document();\n    // Single segment\n    Field f = new Field(\"f\", \"\", Field.Store.NO, Field.Index.NOT_ANALYZED);\n    d.add(f);\n    char[] chars = new char[2];\n    final Set<String> allTerms = new HashSet<String>();\n\n    int num = 200 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n\n      final String s;\n      if (rnd.nextBoolean()) {\n        // Single char\n        if (rnd.nextBoolean()) {\n          // Above surrogates\n          chars[0] = (char) getInt(rnd, 1+UnicodeUtil.UNI_SUR_LOW_END, 0xffff);\n        } else {\n          // Below surrogates\n          chars[0] = (char) getInt(rnd, 0, UnicodeUtil.UNI_SUR_HIGH_START-1);\n        }\n        s = new String(chars, 0, 1);\n      } else {\n        // Surrogate pair\n        chars[0] = (char) getInt(rnd, UnicodeUtil.UNI_SUR_HIGH_START, UnicodeUtil.UNI_SUR_HIGH_END);\n        assertTrue(((int) chars[0]) >= UnicodeUtil.UNI_SUR_HIGH_START && ((int) chars[0]) <= UnicodeUtil.UNI_SUR_HIGH_END);\n        chars[1] = (char) getInt(rnd, UnicodeUtil.UNI_SUR_LOW_START, UnicodeUtil.UNI_SUR_LOW_END);\n        s = new String(chars, 0, 2);\n      }\n      allTerms.add(s);\n      f.setValue(s);\n\n      writer.addDocument(d);\n\n      if ((1+i) % 42 == 0) {\n        writer.commit();\n      }\n    }\n\n    IndexReader r = writer.getReader();\n\n    // Test each sub-segment\n    final IndexReader[] subs = r.getSequentialSubReaders();\n    for(int i=0;i<subs.length;i++) {\n      checkTermsOrder(subs[i], allTerms, false);\n    }\n    checkTermsOrder(r, allTerms, true);\n\n    // Test multi segment\n    r.close();\n\n    writer.optimize();\n\n    // Test optimized single segment\n    r = writer.getReader();\n    checkTermsOrder(r, allTerms, true);\n    r.close();\n\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testTermUTF16SortOrder().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testTermUTF16SortOrder().mjava","sourceNew":"  // Make sure terms, including ones with surrogate pairs,\n  // sort in codepoint sort order by default\n  public void testTermUTF16SortOrder() throws Throwable {\n    Random rnd = random;\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(rnd, dir);\n    Document d = new Document();\n    // Single segment\n    Field f = newField(\"f\", \"\", Field.Store.NO, Field.Index.NOT_ANALYZED);\n    d.add(f);\n    char[] chars = new char[2];\n    final Set<String> allTerms = new HashSet<String>();\n\n    int num = 200 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n\n      final String s;\n      if (rnd.nextBoolean()) {\n        // Single char\n        if (rnd.nextBoolean()) {\n          // Above surrogates\n          chars[0] = (char) getInt(rnd, 1+UnicodeUtil.UNI_SUR_LOW_END, 0xffff);\n        } else {\n          // Below surrogates\n          chars[0] = (char) getInt(rnd, 0, UnicodeUtil.UNI_SUR_HIGH_START-1);\n        }\n        s = new String(chars, 0, 1);\n      } else {\n        // Surrogate pair\n        chars[0] = (char) getInt(rnd, UnicodeUtil.UNI_SUR_HIGH_START, UnicodeUtil.UNI_SUR_HIGH_END);\n        assertTrue(((int) chars[0]) >= UnicodeUtil.UNI_SUR_HIGH_START && ((int) chars[0]) <= UnicodeUtil.UNI_SUR_HIGH_END);\n        chars[1] = (char) getInt(rnd, UnicodeUtil.UNI_SUR_LOW_START, UnicodeUtil.UNI_SUR_LOW_END);\n        s = new String(chars, 0, 2);\n      }\n      allTerms.add(s);\n      f.setValue(s);\n\n      writer.addDocument(d);\n\n      if ((1+i) % 42 == 0) {\n        writer.commit();\n      }\n    }\n\n    IndexReader r = writer.getReader();\n\n    // Test each sub-segment\n    final IndexReader[] subs = r.getSequentialSubReaders();\n    for(int i=0;i<subs.length;i++) {\n      checkTermsOrder(subs[i], allTerms, false);\n    }\n    checkTermsOrder(r, allTerms, true);\n\n    // Test multi segment\n    r.close();\n\n    writer.optimize();\n\n    // Test optimized single segment\n    r = writer.getReader();\n    checkTermsOrder(r, allTerms, true);\n    r.close();\n\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // Make sure terms, including ones with surrogate pairs,\n  // sort in codepoint sort order by default\n  public void testTermUTF16SortOrder() throws Throwable {\n    Random rnd = newRandom();\n    Directory dir = new MockRAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(rnd, dir);\n    Document d = new Document();\n    // Single segment\n    Field f = new Field(\"f\", \"\", Field.Store.NO, Field.Index.NOT_ANALYZED);\n    d.add(f);\n    char[] chars = new char[2];\n    final Set<String> allTerms = new HashSet<String>();\n\n    int num = 200 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n\n      final String s;\n      if (rnd.nextBoolean()) {\n        // Single char\n        if (rnd.nextBoolean()) {\n          // Above surrogates\n          chars[0] = (char) getInt(rnd, 1+UnicodeUtil.UNI_SUR_LOW_END, 0xffff);\n        } else {\n          // Below surrogates\n          chars[0] = (char) getInt(rnd, 0, UnicodeUtil.UNI_SUR_HIGH_START-1);\n        }\n        s = new String(chars, 0, 1);\n      } else {\n        // Surrogate pair\n        chars[0] = (char) getInt(rnd, UnicodeUtil.UNI_SUR_HIGH_START, UnicodeUtil.UNI_SUR_HIGH_END);\n        assertTrue(((int) chars[0]) >= UnicodeUtil.UNI_SUR_HIGH_START && ((int) chars[0]) <= UnicodeUtil.UNI_SUR_HIGH_END);\n        chars[1] = (char) getInt(rnd, UnicodeUtil.UNI_SUR_LOW_START, UnicodeUtil.UNI_SUR_LOW_END);\n        s = new String(chars, 0, 2);\n      }\n      allTerms.add(s);\n      f.setValue(s);\n\n      writer.addDocument(d);\n\n      if ((1+i) % 42 == 0) {\n        writer.commit();\n      }\n    }\n\n    IndexReader r = writer.getReader();\n\n    // Test each sub-segment\n    final IndexReader[] subs = r.getSequentialSubReaders();\n    for(int i=0;i<subs.length;i++) {\n      checkTermsOrder(subs[i], allTerms, false);\n    }\n    checkTermsOrder(r, allTerms, true);\n\n    // Test multi segment\n    r.close();\n\n    writer.optimize();\n\n    // Test optimized single segment\n    r = writer.getReader();\n    checkTermsOrder(r, allTerms, true);\n    r.close();\n\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff6fd241dc6610f7f81b62e3ba4cedf105939623","date":1307331653,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterUnicode#testTermUTF16SortOrder().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testTermUTF16SortOrder().mjava","sourceNew":"  // Make sure terms, including ones with surrogate pairs,\n  // sort in codepoint sort order by default\n  public void testTermUTF16SortOrder() throws Throwable {\n    Random rnd = random;\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(rnd, dir);\n    Document d = new Document();\n    // Single segment\n    Field f = newField(\"f\", \"\", Field.Store.NO, Field.Index.NOT_ANALYZED);\n    d.add(f);\n    char[] chars = new char[2];\n    final Set<String> allTerms = new HashSet<String>();\n\n    int num = 200 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n\n      final String s;\n      if (rnd.nextBoolean()) {\n        // Single char\n        if (rnd.nextBoolean()) {\n          // Above surrogates\n          chars[0] = (char) getInt(rnd, 1+UnicodeUtil.UNI_SUR_LOW_END, 0xffff);\n        } else {\n          // Below surrogates\n          chars[0] = (char) getInt(rnd, 0, UnicodeUtil.UNI_SUR_HIGH_START-1);\n        }\n        s = new String(chars, 0, 1);\n      } else {\n        // Surrogate pair\n        chars[0] = (char) getInt(rnd, UnicodeUtil.UNI_SUR_HIGH_START, UnicodeUtil.UNI_SUR_HIGH_END);\n        assertTrue(((int) chars[0]) >= UnicodeUtil.UNI_SUR_HIGH_START && ((int) chars[0]) <= UnicodeUtil.UNI_SUR_HIGH_END);\n        chars[1] = (char) getInt(rnd, UnicodeUtil.UNI_SUR_LOW_START, UnicodeUtil.UNI_SUR_LOW_END);\n        s = new String(chars, 0, 2);\n      }\n      allTerms.add(s);\n      f.setValue(s);\n\n      writer.addDocument(d);\n\n      if ((1+i) % 42 == 0) {\n        writer.commit();\n      }\n    }\n\n    IndexReader r = writer.getReader();\n\n    // Test each sub-segment\n    final IndexReader[] subs = r.getSequentialSubReaders();\n    for(int i=0;i<subs.length;i++) {\n      checkTermsOrder(subs[i], allTerms, false);\n    }\n    checkTermsOrder(r, allTerms, true);\n\n    // Test multi segment\n    r.close();\n\n    writer.optimize();\n\n    // Test optimized single segment\n    r = writer.getReader();\n    checkTermsOrder(r, allTerms, true);\n    r.close();\n\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // Make sure terms, including ones with surrogate pairs,\n  // sort in codepoint sort order by default\n  public void testTermUTF16SortOrder() throws Throwable {\n    Random rnd = random;\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(rnd, dir);\n    Document d = new Document();\n    // Single segment\n    Field f = newField(\"f\", \"\", Field.Store.NO, Field.Index.NOT_ANALYZED);\n    d.add(f);\n    char[] chars = new char[2];\n    final Set<String> allTerms = new HashSet<String>();\n\n    int num = 200 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n\n      final String s;\n      if (rnd.nextBoolean()) {\n        // Single char\n        if (rnd.nextBoolean()) {\n          // Above surrogates\n          chars[0] = (char) getInt(rnd, 1+UnicodeUtil.UNI_SUR_LOW_END, 0xffff);\n        } else {\n          // Below surrogates\n          chars[0] = (char) getInt(rnd, 0, UnicodeUtil.UNI_SUR_HIGH_START-1);\n        }\n        s = new String(chars, 0, 1);\n      } else {\n        // Surrogate pair\n        chars[0] = (char) getInt(rnd, UnicodeUtil.UNI_SUR_HIGH_START, UnicodeUtil.UNI_SUR_HIGH_END);\n        assertTrue(((int) chars[0]) >= UnicodeUtil.UNI_SUR_HIGH_START && ((int) chars[0]) <= UnicodeUtil.UNI_SUR_HIGH_END);\n        chars[1] = (char) getInt(rnd, UnicodeUtil.UNI_SUR_LOW_START, UnicodeUtil.UNI_SUR_LOW_END);\n        s = new String(chars, 0, 2);\n      }\n      allTerms.add(s);\n      f.setValue(s);\n\n      writer.addDocument(d);\n\n      if ((1+i) % 42 == 0) {\n        writer.commit();\n      }\n    }\n\n    IndexReader r = writer.getReader();\n\n    // Test each sub-segment\n    final IndexReader[] subs = r.getSequentialSubReaders();\n    for(int i=0;i<subs.length;i++) {\n      checkTermsOrder(subs[i], allTerms, false);\n    }\n    checkTermsOrder(r, allTerms, true);\n\n    // Test multi segment\n    r.close();\n\n    writer.optimize();\n\n    // Test optimized single segment\n    r = writer.getReader();\n    checkTermsOrder(r, allTerms, true);\n    r.close();\n\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"79c2cb24929f2649a8875fb629086171f914d5ce","date":1307332717,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterUnicode#testTermUTF16SortOrder().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testTermUTF16SortOrder().mjava","sourceNew":"  // Make sure terms, including ones with surrogate pairs,\n  // sort in codepoint sort order by default\n  public void testTermUTF16SortOrder() throws Throwable {\n    Random rnd = random;\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(rnd, dir);\n    Document d = new Document();\n    // Single segment\n    Field f = newField(\"f\", \"\", Field.Store.NO, Field.Index.NOT_ANALYZED);\n    d.add(f);\n    char[] chars = new char[2];\n    final Set<String> allTerms = new HashSet<String>();\n\n    int num = 200 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n\n      final String s;\n      if (rnd.nextBoolean()) {\n        // Single char\n        if (rnd.nextBoolean()) {\n          // Above surrogates\n          chars[0] = (char) getInt(rnd, 1+UnicodeUtil.UNI_SUR_LOW_END, 0xffff);\n        } else {\n          // Below surrogates\n          chars[0] = (char) getInt(rnd, 0, UnicodeUtil.UNI_SUR_HIGH_START-1);\n        }\n        s = new String(chars, 0, 1);\n      } else {\n        // Surrogate pair\n        chars[0] = (char) getInt(rnd, UnicodeUtil.UNI_SUR_HIGH_START, UnicodeUtil.UNI_SUR_HIGH_END);\n        assertTrue(((int) chars[0]) >= UnicodeUtil.UNI_SUR_HIGH_START && ((int) chars[0]) <= UnicodeUtil.UNI_SUR_HIGH_END);\n        chars[1] = (char) getInt(rnd, UnicodeUtil.UNI_SUR_LOW_START, UnicodeUtil.UNI_SUR_LOW_END);\n        s = new String(chars, 0, 2);\n      }\n      allTerms.add(s);\n      f.setValue(s);\n\n      writer.addDocument(d);\n\n      if ((1+i) % 42 == 0) {\n        writer.commit();\n      }\n    }\n\n    IndexReader r = writer.getReader();\n\n    // Test each sub-segment\n    final IndexReader[] subs = r.getSequentialSubReaders();\n    for(int i=0;i<subs.length;i++) {\n      checkTermsOrder(subs[i], allTerms, false);\n    }\n    checkTermsOrder(r, allTerms, true);\n\n    // Test multi segment\n    r.close();\n\n    writer.optimize();\n\n    // Test optimized single segment\n    r = writer.getReader();\n    checkTermsOrder(r, allTerms, true);\n    r.close();\n\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // Make sure terms, including ones with surrogate pairs,\n  // sort in codepoint sort order by default\n  public void testTermUTF16SortOrder() throws Throwable {\n    Random rnd = random;\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(rnd, dir);\n    Document d = new Document();\n    // Single segment\n    Field f = newField(\"f\", \"\", Field.Store.NO, Field.Index.NOT_ANALYZED);\n    d.add(f);\n    char[] chars = new char[2];\n    final Set<String> allTerms = new HashSet<String>();\n\n    int num = 200 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n\n      final String s;\n      if (rnd.nextBoolean()) {\n        // Single char\n        if (rnd.nextBoolean()) {\n          // Above surrogates\n          chars[0] = (char) getInt(rnd, 1+UnicodeUtil.UNI_SUR_LOW_END, 0xffff);\n        } else {\n          // Below surrogates\n          chars[0] = (char) getInt(rnd, 0, UnicodeUtil.UNI_SUR_HIGH_START-1);\n        }\n        s = new String(chars, 0, 1);\n      } else {\n        // Surrogate pair\n        chars[0] = (char) getInt(rnd, UnicodeUtil.UNI_SUR_HIGH_START, UnicodeUtil.UNI_SUR_HIGH_END);\n        assertTrue(((int) chars[0]) >= UnicodeUtil.UNI_SUR_HIGH_START && ((int) chars[0]) <= UnicodeUtil.UNI_SUR_HIGH_END);\n        chars[1] = (char) getInt(rnd, UnicodeUtil.UNI_SUR_LOW_START, UnicodeUtil.UNI_SUR_LOW_END);\n        s = new String(chars, 0, 2);\n      }\n      allTerms.add(s);\n      f.setValue(s);\n\n      writer.addDocument(d);\n\n      if ((1+i) % 42 == 0) {\n        writer.commit();\n      }\n    }\n\n    IndexReader r = writer.getReader();\n\n    // Test each sub-segment\n    final IndexReader[] subs = r.getSequentialSubReaders();\n    for(int i=0;i<subs.length;i++) {\n      checkTermsOrder(subs[i], allTerms, false);\n    }\n    checkTermsOrder(r, allTerms, true);\n\n    // Test multi segment\n    r.close();\n\n    writer.optimize();\n\n    // Test optimized single segment\n    r = writer.getReader();\n    checkTermsOrder(r, allTerms, true);\n    r.close();\n\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"77cf4379b2824f6ea34b091c495d6e95c38ff9e2","date":1307610475,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterUnicode#testTermUTF16SortOrder().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testTermUTF16SortOrder().mjava","sourceNew":"  // Make sure terms, including ones with surrogate pairs,\n  // sort in codepoint sort order by default\n  public void testTermUTF16SortOrder() throws Throwable {\n    Random rnd = random;\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(rnd, dir);\n    Document d = new Document();\n    // Single segment\n    Field f = newField(\"f\", \"\", Field.Store.NO, Field.Index.NOT_ANALYZED);\n    d.add(f);\n    char[] chars = new char[2];\n    final Set<String> allTerms = new HashSet<String>();\n\n    int num = atLeast(200);\n    for (int i = 0; i < num; i++) {\n\n      final String s;\n      if (rnd.nextBoolean()) {\n        // Single char\n        if (rnd.nextBoolean()) {\n          // Above surrogates\n          chars[0] = (char) getInt(rnd, 1+UnicodeUtil.UNI_SUR_LOW_END, 0xffff);\n        } else {\n          // Below surrogates\n          chars[0] = (char) getInt(rnd, 0, UnicodeUtil.UNI_SUR_HIGH_START-1);\n        }\n        s = new String(chars, 0, 1);\n      } else {\n        // Surrogate pair\n        chars[0] = (char) getInt(rnd, UnicodeUtil.UNI_SUR_HIGH_START, UnicodeUtil.UNI_SUR_HIGH_END);\n        assertTrue(((int) chars[0]) >= UnicodeUtil.UNI_SUR_HIGH_START && ((int) chars[0]) <= UnicodeUtil.UNI_SUR_HIGH_END);\n        chars[1] = (char) getInt(rnd, UnicodeUtil.UNI_SUR_LOW_START, UnicodeUtil.UNI_SUR_LOW_END);\n        s = new String(chars, 0, 2);\n      }\n      allTerms.add(s);\n      f.setValue(s);\n\n      writer.addDocument(d);\n\n      if ((1+i) % 42 == 0) {\n        writer.commit();\n      }\n    }\n\n    IndexReader r = writer.getReader();\n\n    // Test each sub-segment\n    final IndexReader[] subs = r.getSequentialSubReaders();\n    for(int i=0;i<subs.length;i++) {\n      checkTermsOrder(subs[i], allTerms, false);\n    }\n    checkTermsOrder(r, allTerms, true);\n\n    // Test multi segment\n    r.close();\n\n    writer.optimize();\n\n    // Test optimized single segment\n    r = writer.getReader();\n    checkTermsOrder(r, allTerms, true);\n    r.close();\n\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // Make sure terms, including ones with surrogate pairs,\n  // sort in codepoint sort order by default\n  public void testTermUTF16SortOrder() throws Throwable {\n    Random rnd = random;\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(rnd, dir);\n    Document d = new Document();\n    // Single segment\n    Field f = newField(\"f\", \"\", Field.Store.NO, Field.Index.NOT_ANALYZED);\n    d.add(f);\n    char[] chars = new char[2];\n    final Set<String> allTerms = new HashSet<String>();\n\n    int num = 200 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n\n      final String s;\n      if (rnd.nextBoolean()) {\n        // Single char\n        if (rnd.nextBoolean()) {\n          // Above surrogates\n          chars[0] = (char) getInt(rnd, 1+UnicodeUtil.UNI_SUR_LOW_END, 0xffff);\n        } else {\n          // Below surrogates\n          chars[0] = (char) getInt(rnd, 0, UnicodeUtil.UNI_SUR_HIGH_START-1);\n        }\n        s = new String(chars, 0, 1);\n      } else {\n        // Surrogate pair\n        chars[0] = (char) getInt(rnd, UnicodeUtil.UNI_SUR_HIGH_START, UnicodeUtil.UNI_SUR_HIGH_END);\n        assertTrue(((int) chars[0]) >= UnicodeUtil.UNI_SUR_HIGH_START && ((int) chars[0]) <= UnicodeUtil.UNI_SUR_HIGH_END);\n        chars[1] = (char) getInt(rnd, UnicodeUtil.UNI_SUR_LOW_START, UnicodeUtil.UNI_SUR_LOW_END);\n        s = new String(chars, 0, 2);\n      }\n      allTerms.add(s);\n      f.setValue(s);\n\n      writer.addDocument(d);\n\n      if ((1+i) % 42 == 0) {\n        writer.commit();\n      }\n    }\n\n    IndexReader r = writer.getReader();\n\n    // Test each sub-segment\n    final IndexReader[] subs = r.getSequentialSubReaders();\n    for(int i=0;i<subs.length;i++) {\n      checkTermsOrder(subs[i], allTerms, false);\n    }\n    checkTermsOrder(r, allTerms, true);\n\n    // Test multi segment\n    r.close();\n\n    writer.optimize();\n\n    // Test optimized single segment\n    r = writer.getReader();\n    checkTermsOrder(r, allTerms, true);\n    r.close();\n\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e45742e10e8e3b98e854babe6dbb07a4197b71":["4b103252dee6afa1b6d7a622c773d178788eb85a"],"ff6fd241dc6610f7f81b62e3ba4cedf105939623":["132903c28af3aa6f67284b78de91c0f0a99488c2"],"3242a09f703274d3b9283f2064a1a33064b53a1b":["d572389229127c297dd1fa5ce4758e1cec41e799","a0e45742e10e8e3b98e854babe6dbb07a4197b71"],"4b103252dee6afa1b6d7a622c773d178788eb85a":["d572389229127c297dd1fa5ce4758e1cec41e799","24b91b08ba3110a0904b8ba9803276bf9a9b5f6d"],"163fe85a71d778fd2b7747f65ca27b54829e2e57":["d572389229127c297dd1fa5ce4758e1cec41e799"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["b21422ff1d1d56499dec481f193b402e5e8def5b"],"d572389229127c297dd1fa5ce4758e1cec41e799":["2aafd88401639311b0404e67c94e829e123a0e45"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"132903c28af3aa6f67284b78de91c0f0a99488c2":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"2aafd88401639311b0404e67c94e829e123a0e45":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["3242a09f703274d3b9283f2064a1a33064b53a1b","132903c28af3aa6f67284b78de91c0f0a99488c2"],"79c2cb24929f2649a8875fb629086171f914d5ce":["132903c28af3aa6f67284b78de91c0f0a99488c2","ff6fd241dc6610f7f81b62e3ba4cedf105939623"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":["132903c28af3aa6f67284b78de91c0f0a99488c2","ff6fd241dc6610f7f81b62e3ba4cedf105939623"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["a0e45742e10e8e3b98e854babe6dbb07a4197b71"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ff6fd241dc6610f7f81b62e3ba4cedf105939623"],"24b91b08ba3110a0904b8ba9803276bf9a9b5f6d":["163fe85a71d778fd2b7747f65ca27b54829e2e57"]},"commit2Childs":{"a0e45742e10e8e3b98e854babe6dbb07a4197b71":["3242a09f703274d3b9283f2064a1a33064b53a1b","b21422ff1d1d56499dec481f193b402e5e8def5b"],"ff6fd241dc6610f7f81b62e3ba4cedf105939623":["79c2cb24929f2649a8875fb629086171f914d5ce","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3242a09f703274d3b9283f2064a1a33064b53a1b":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"4b103252dee6afa1b6d7a622c773d178788eb85a":["a0e45742e10e8e3b98e854babe6dbb07a4197b71"],"163fe85a71d778fd2b7747f65ca27b54829e2e57":["24b91b08ba3110a0904b8ba9803276bf9a9b5f6d"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"d572389229127c297dd1fa5ce4758e1cec41e799":["3242a09f703274d3b9283f2064a1a33064b53a1b","4b103252dee6afa1b6d7a622c773d178788eb85a","163fe85a71d778fd2b7747f65ca27b54829e2e57"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["2aafd88401639311b0404e67c94e829e123a0e45"],"132903c28af3aa6f67284b78de91c0f0a99488c2":["ff6fd241dc6610f7f81b62e3ba4cedf105939623","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","79c2cb24929f2649a8875fb629086171f914d5ce","77cf4379b2824f6ea34b091c495d6e95c38ff9e2"],"2aafd88401639311b0404e67c94e829e123a0e45":["d572389229127c297dd1fa5ce4758e1cec41e799"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"79c2cb24929f2649a8875fb629086171f914d5ce":[],"1f653cfcf159baeaafe5d01682a911e95bba4012":["132903c28af3aa6f67284b78de91c0f0a99488c2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":[],"b21422ff1d1d56499dec481f193b402e5e8def5b":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"24b91b08ba3110a0904b8ba9803276bf9a9b5f6d":["4b103252dee6afa1b6d7a622c773d178788eb85a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","79c2cb24929f2649a8875fb629086171f914d5ce","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}