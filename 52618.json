{"path":"lucene/core/src/test/org/apache/lucene/TestDemoDocValue#testOneValue().mjava","commits":[{"id":"f366ce28775e2b8ea4e06355009471328711666d","date":1360551293,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/TestDemoDocValue#testOneValue().mjava","pathOld":"/dev/null","sourceNew":"  public void testOneValue() throws IOException {\n    Analyzer analyzer = new MockAnalyzer(random());\n\n    // Store the index in memory:\n    Directory directory = newDirectory();\n    // To store an index on disk, use this instead:\n    // Directory directory = FSDirectory.open(new File(\"/tmp/testindex\"));\n    RandomIndexWriter iwriter = new RandomIndexWriter(random(), directory, analyzer);\n    Document doc = new Document();\n    doc.add(new SortedSetDocValuesField(\"field\", new BytesRef(\"hello\")));\n    iwriter.addDocument(doc);\n    iwriter.close();\n    \n    // Now search the index:\n    DirectoryReader ireader = DirectoryReader.open(directory); // read-only=true\n    SortedSetDocValues dv = getOnlySegmentReader(ireader).getSortedSetDocValues(\"field\");\n    OrdIterator oi = dv.getOrds(0, null);\n    assertEquals(0, oi.nextOrd());\n    assertEquals(OrdIterator.NO_MORE_ORDS, oi.nextOrd());\n    \n    BytesRef bytes = new BytesRef();\n    dv.lookupOrd(0, bytes);\n    assertEquals(new BytesRef(\"hello\"), bytes);\n\n    ireader.close();\n    directory.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"988e3f44fe797ee94a0135abfe27e5872b99844d","date":1360563792,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/TestDemoDocValue#testOneValue().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/TestDemoDocValue#testOneValue().mjava","sourceNew":"  public void testOneValue() throws IOException {\n    Analyzer analyzer = new MockAnalyzer(random());\n\n    // Store the index in memory:\n    Directory directory = newDirectory();\n    // To store an index on disk, use this instead:\n    // Directory directory = FSDirectory.open(new File(\"/tmp/testindex\"));\n    RandomIndexWriter iwriter = new RandomIndexWriter(random(), directory, analyzer);\n    Document doc = new Document();\n    doc.add(new SortedSetDocValuesField(\"field\", new BytesRef(\"hello\")));\n    iwriter.addDocument(doc);\n    iwriter.close();\n    \n    // Now search the index:\n    DirectoryReader ireader = DirectoryReader.open(directory); // read-only=true\n    SortedSetDocValues dv = getOnlySegmentReader(ireader).getSortedSetDocValues(\"field\");\n    dv.setDocument(0);\n    assertEquals(0, dv.nextOrd());\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, dv.nextOrd());\n    \n    BytesRef bytes = new BytesRef();\n    dv.lookupOrd(0, bytes);\n    assertEquals(new BytesRef(\"hello\"), bytes);\n\n    ireader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testOneValue() throws IOException {\n    Analyzer analyzer = new MockAnalyzer(random());\n\n    // Store the index in memory:\n    Directory directory = newDirectory();\n    // To store an index on disk, use this instead:\n    // Directory directory = FSDirectory.open(new File(\"/tmp/testindex\"));\n    RandomIndexWriter iwriter = new RandomIndexWriter(random(), directory, analyzer);\n    Document doc = new Document();\n    doc.add(new SortedSetDocValuesField(\"field\", new BytesRef(\"hello\")));\n    iwriter.addDocument(doc);\n    iwriter.close();\n    \n    // Now search the index:\n    DirectoryReader ireader = DirectoryReader.open(directory); // read-only=true\n    SortedSetDocValues dv = getOnlySegmentReader(ireader).getSortedSetDocValues(\"field\");\n    OrdIterator oi = dv.getOrds(0, null);\n    assertEquals(0, oi.nextOrd());\n    assertEquals(OrdIterator.NO_MORE_ORDS, oi.nextOrd());\n    \n    BytesRef bytes = new BytesRef();\n    dv.lookupOrd(0, bytes);\n    assertEquals(new BytesRef(\"hello\"), bytes);\n\n    ireader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1272e04e4f27b1c1f8cdb786b642c536a429386e","date":1360592091,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/TestDemoDocValue#testOneValue().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/TestDemoDocValue#testOneValue().mjava","sourceNew":"  public void testOneValue() throws IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter iwriter = new RandomIndexWriter(random(), directory);\n    \n    Document doc = new Document();\n    doc.add(new SortedSetDocValuesField(\"field\", new BytesRef(\"hello\")));\n    iwriter.addDocument(doc);\n    \n    DirectoryReader ireader = iwriter.getReader();\n    iwriter.close();\n    \n    SortedSetDocValues dv = getOnlySegmentReader(ireader).getSortedSetDocValues(\"field\");\n    \n    dv.setDocument(0);\n    assertEquals(0, dv.nextOrd());\n    assertEquals(NO_MORE_ORDS, dv.nextOrd());\n    \n    BytesRef bytes = new BytesRef();\n    dv.lookupOrd(0, bytes);\n    assertEquals(new BytesRef(\"hello\"), bytes);\n\n    ireader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testOneValue() throws IOException {\n    Analyzer analyzer = new MockAnalyzer(random());\n\n    // Store the index in memory:\n    Directory directory = newDirectory();\n    // To store an index on disk, use this instead:\n    // Directory directory = FSDirectory.open(new File(\"/tmp/testindex\"));\n    RandomIndexWriter iwriter = new RandomIndexWriter(random(), directory, analyzer);\n    Document doc = new Document();\n    doc.add(new SortedSetDocValuesField(\"field\", new BytesRef(\"hello\")));\n    iwriter.addDocument(doc);\n    iwriter.close();\n    \n    // Now search the index:\n    DirectoryReader ireader = DirectoryReader.open(directory); // read-only=true\n    SortedSetDocValues dv = getOnlySegmentReader(ireader).getSortedSetDocValues(\"field\");\n    dv.setDocument(0);\n    assertEquals(0, dv.nextOrd());\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, dv.nextOrd());\n    \n    BytesRef bytes = new BytesRef();\n    dv.lookupOrd(0, bytes);\n    assertEquals(new BytesRef(\"hello\"), bytes);\n\n    ireader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"56fca4cf418a84a71d0701bbb6fda4db84fa5796","date":1361031660,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/TestDemoDocValue#testSortedSetOneValue().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/TestDemoDocValue#testOneValue().mjava","sourceNew":"  public void testSortedSetOneValue() throws IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter iwriter = new RandomIndexWriter(random(), directory);\n    \n    Document doc = new Document();\n    doc.add(new SortedSetDocValuesField(\"field\", new BytesRef(\"hello\")));\n    iwriter.addDocument(doc);\n    \n    DirectoryReader ireader = iwriter.getReader();\n    iwriter.close();\n    \n    SortedSetDocValues dv = getOnlySegmentReader(ireader).getSortedSetDocValues(\"field\");\n    \n    dv.setDocument(0);\n    assertEquals(0, dv.nextOrd());\n    assertEquals(NO_MORE_ORDS, dv.nextOrd());\n    \n    BytesRef bytes = new BytesRef();\n    dv.lookupOrd(0, bytes);\n    assertEquals(new BytesRef(\"hello\"), bytes);\n\n    ireader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testOneValue() throws IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter iwriter = new RandomIndexWriter(random(), directory);\n    \n    Document doc = new Document();\n    doc.add(new SortedSetDocValuesField(\"field\", new BytesRef(\"hello\")));\n    iwriter.addDocument(doc);\n    \n    DirectoryReader ireader = iwriter.getReader();\n    iwriter.close();\n    \n    SortedSetDocValues dv = getOnlySegmentReader(ireader).getSortedSetDocValues(\"field\");\n    \n    dv.setDocument(0);\n    assertEquals(0, dv.nextOrd());\n    assertEquals(NO_MORE_ORDS, dv.nextOrd());\n    \n    BytesRef bytes = new BytesRef();\n    dv.lookupOrd(0, bytes);\n    assertEquals(new BytesRef(\"hello\"), bytes);\n\n    ireader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"56fca4cf418a84a71d0701bbb6fda4db84fa5796":["1272e04e4f27b1c1f8cdb786b642c536a429386e"],"1272e04e4f27b1c1f8cdb786b642c536a429386e":["988e3f44fe797ee94a0135abfe27e5872b99844d"],"f366ce28775e2b8ea4e06355009471328711666d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"988e3f44fe797ee94a0135abfe27e5872b99844d":["f366ce28775e2b8ea4e06355009471328711666d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f366ce28775e2b8ea4e06355009471328711666d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"56fca4cf418a84a71d0701bbb6fda4db84fa5796":[],"1272e04e4f27b1c1f8cdb786b642c536a429386e":["56fca4cf418a84a71d0701bbb6fda4db84fa5796"],"f366ce28775e2b8ea4e06355009471328711666d":["988e3f44fe797ee94a0135abfe27e5872b99844d"],"988e3f44fe797ee94a0135abfe27e5872b99844d":["1272e04e4f27b1c1f8cdb786b642c536a429386e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["56fca4cf418a84a71d0701bbb6fda4db84fa5796","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}