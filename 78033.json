{"path":"lucene/core/src/test/org/apache/lucene/search/TermInSetQueryTest#termsQuery(boolean,Collection[Term]).mjava","commits":[{"id":"8d73510b39df24d6b65de48e56f8dccb136b9d01","date":1483971905,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TermInSetQueryTest#termsQuery(boolean,Collection[Term]).mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/TermsQueryTest#termsQuery(boolean,Collection[Term]).mjava","sourceNew":"  private TermInSetQuery termsQuery(boolean singleField, Collection<Term> termList) {\n    if (!singleField) {\n      return new TermInSetQuery(new ArrayList<>(termList));\n    }\n    final TermInSetQuery filter;\n    List<BytesRef> bytes = new ArrayList<>();\n    String field = null;\n    for (Term term : termList) {\n        bytes.add(term.bytes());\n        if (field != null) {\n          assertEquals(term.field(), field);\n        }\n        field = term.field();\n    }\n    assertNotNull(field);\n    filter = new TermInSetQuery(field, bytes);\n    return filter;\n  }\n\n","sourceOld":"  private TermsQuery termsQuery(boolean singleField, Collection<Term> termList) {\n    if (!singleField) {\n      return new TermsQuery(new ArrayList<>(termList));\n    }\n    final TermsQuery filter;\n    List<BytesRef> bytes = new ArrayList<>();\n    String field = null;\n    for (Term term : termList) {\n        bytes.add(term.bytes());\n        if (field != null) {\n          assertEquals(term.field(), field);\n        }\n        field = term.field();\n    }\n    assertNotNull(field);\n    filter = new TermsQuery(field, bytes);\n    return filter;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","date":1484239864,"type":1,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TermInSetQueryTest#termsQuery(boolean,Collection[Term]).mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/TermsQueryTest#termsQuery(boolean,Collection[Term]).mjava","sourceNew":"  private TermInSetQuery termsQuery(boolean singleField, Collection<Term> termList) {\n    if (!singleField) {\n      return new TermInSetQuery(new ArrayList<>(termList));\n    }\n    final TermInSetQuery filter;\n    List<BytesRef> bytes = new ArrayList<>();\n    String field = null;\n    for (Term term : termList) {\n        bytes.add(term.bytes());\n        if (field != null) {\n          assertEquals(term.field(), field);\n        }\n        field = term.field();\n    }\n    assertNotNull(field);\n    filter = new TermInSetQuery(field, bytes);\n    return filter;\n  }\n\n","sourceOld":"  private TermsQuery termsQuery(boolean singleField, Collection<Term> termList) {\n    if (!singleField) {\n      return new TermsQuery(new ArrayList<>(termList));\n    }\n    final TermsQuery filter;\n    List<BytesRef> bytes = new ArrayList<>();\n    String field = null;\n    for (Term term : termList) {\n        bytes.add(term.bytes());\n        if (field != null) {\n          assertEquals(term.field(), field);\n        }\n        field = term.field();\n    }\n    assertNotNull(field);\n    filter = new TermsQuery(field, bytes);\n    return filter;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"830a7b9be2f498e249b346796921c94cdd39d98f","date":1484639518,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/search/TermInSetQueryTest#termsQuery(boolean,Collection[Term]).mjava","sourceNew":null,"sourceOld":"  private TermInSetQuery termsQuery(boolean singleField, Collection<Term> termList) {\n    if (!singleField) {\n      return new TermInSetQuery(new ArrayList<>(termList));\n    }\n    final TermInSetQuery filter;\n    List<BytesRef> bytes = new ArrayList<>();\n    String field = null;\n    for (Term term : termList) {\n        bytes.add(term.bytes());\n        if (field != null) {\n          assertEquals(term.field(), field);\n        }\n        field = term.field();\n    }\n    assertNotNull(field);\n    filter = new TermInSetQuery(field, bytes);\n    return filter;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"302d34f2c66e8d489ee13078305c330cbf67b226","date":1484754357,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/search/TermInSetQueryTest#termsQuery(boolean,Collection[Term]).mjava","sourceNew":null,"sourceOld":"  private TermInSetQuery termsQuery(boolean singleField, Collection<Term> termList) {\n    if (!singleField) {\n      return new TermInSetQuery(new ArrayList<>(termList));\n    }\n    final TermInSetQuery filter;\n    List<BytesRef> bytes = new ArrayList<>();\n    String field = null;\n    for (Term term : termList) {\n        bytes.add(term.bytes());\n        if (field != null) {\n          assertEquals(term.field(), field);\n        }\n        field = term.field();\n    }\n    assertNotNull(field);\n    filter = new TermInSetQuery(field, bytes);\n    return filter;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"830a7b9be2f498e249b346796921c94cdd39d98f":["8d73510b39df24d6b65de48e56f8dccb136b9d01"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8d73510b39df24d6b65de48e56f8dccb136b9d01":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8d73510b39df24d6b65de48e56f8dccb136b9d01"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["830a7b9be2f498e249b346796921c94cdd39d98f"],"302d34f2c66e8d489ee13078305c330cbf67b226":["09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","830a7b9be2f498e249b346796921c94cdd39d98f"]},"commit2Childs":{"830a7b9be2f498e249b346796921c94cdd39d98f":["cd5edd1f2b162a5cfa08efd17851a07373a96817","302d34f2c66e8d489ee13078305c330cbf67b226"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8d73510b39df24d6b65de48e56f8dccb136b9d01","09ab8ee44ca898536770d0106a7c0ee4be4f0eb7"],"8d73510b39df24d6b65de48e56f8dccb136b9d01":["830a7b9be2f498e249b346796921c94cdd39d98f","09ab8ee44ca898536770d0106a7c0ee4be4f0eb7"],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":["302d34f2c66e8d489ee13078305c330cbf67b226"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"302d34f2c66e8d489ee13078305c330cbf67b226":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","302d34f2c66e8d489ee13078305c330cbf67b226"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}