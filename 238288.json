{"path":"lucene/core/src/test/org/apache/lucene/index/TestSortingCodecReader#testSortOnAddIndicesRandom().mjava","commits":[{"id":"19d8bfe2b34f3ba4420efc1f441e4145a2ad6c63","date":1599130480,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSortingCodecReader#testSortOnAddIndicesRandom().mjava","pathOld":"/dev/null","sourceNew":"  public void testSortOnAddIndicesRandom() throws IOException {\n    try (Directory dir = newDirectory()) {\n      int numDocs = atLeast(200);\n      int actualNumDocs;\n      List<Integer> docIds = new ArrayList<>(numDocs);\n      for (int i = 0; i < numDocs; i++) {\n        docIds.add(i);\n      }\n      Collections.shuffle(docIds, random());\n      try (RandomIndexWriter iw = new RandomIndexWriter(random(), dir)) {\n        for (int i = 0; i < numDocs; i++) {\n          int docId = docIds.get(i);\n          Document doc = new Document();\n          doc.add(new NumericDocValuesField(\"foo\", random().nextInt(20)));\n          doc.add(new StringField(\"id\", Integer.toString(docId), Field.Store.YES));\n          doc.add(new LongPoint(\"id\", docId));\n          doc.add(new TextField(\"text_field\", RandomStrings.randomRealisticUnicodeOfLength(random(), 25), Field.Store.YES));\n          doc.add(new SortedNumericDocValuesField(\"sorted_numeric_dv\", docId));\n          doc.add(new SortedDocValuesField(\"binary_sorted_dv\", new BytesRef(Integer.toString(docId))));\n          doc.add(new BinaryDocValuesField(\"binary_dv\", new BytesRef(Integer.toString(docId))));\n          doc.add(new SortedSetDocValuesField(\"sorted_set_dv\", new BytesRef(Integer.toString(docId))));\n\n          FieldType ft = new FieldType(StringField.TYPE_NOT_STORED);\n          ft.setStoreTermVectors(true);\n          doc.add(new Field(\"term_vectors\", \"test\" + docId, ft));\n          if (rarely() == false) {\n            doc.add(new NumericDocValuesField(\"id\", docId));\n            doc.add(new SortedSetDocValuesField(\"sorted_set_sort_field\", new BytesRef(String.format(Locale.ROOT, \"%06d\", docId))));\n            doc.add(new SortedDocValuesField(\"sorted_binary_sort_field\", new BytesRef(String.format(Locale.ROOT, \"%06d\", docId))));\n            doc.add(new SortedNumericDocValuesField(\"sorted_numeric_sort_field\", docId));\n          } else {\n            doc.add(new NumericDocValuesField(\"alt_id\", docId));\n          }\n          iw.addDocument(doc);\n          if (i > 0 && random().nextInt(5) == 0) {\n            final int id = RandomPicks.randomFrom(random(), docIds.subList(0, i));\n            iw.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n          }\n        }\n        iw.commit();\n        actualNumDocs = iw.getDocStats().numDocs;\n      }\n      Sort indexSort = RandomPicks.randomFrom(random(), Arrays.asList(\n          new Sort(new SortField(\"id\", SortField.Type.INT),\n              new SortField(\"alt_id\", SortField.Type.INT)),\n          new Sort(new SortedSetSortField(\"sorted_set_sort_field\", false),\n              new SortField(\"alt_id\", SortField.Type.INT)),\n          new Sort(new SortedNumericSortField(\"sorted_numeric_sort_field\", SortField.Type.INT),\n              new SortField(\"alt_id\", SortField.Type.INT)),\n          new Sort(new SortField(\"sorted_binary_sort_field\", SortField.Type.STRING, false),\n              new SortField(\"alt_id\", SortField.Type.INT))\n          ));\n      try (Directory sortDir = newDirectory()) {\n        try (IndexWriter writer = new IndexWriter(sortDir, newIndexWriterConfig().setIndexSort(indexSort))) {\n          try (DirectoryReader reader = DirectoryReader.open(dir)) {\n            List<CodecReader> readers = new ArrayList<>();\n            for (LeafReaderContext ctx : reader.leaves()) {\n              CodecReader wrap = SortingCodecReader.wrap(SlowCodecReaderWrapper.wrap(ctx.reader()), indexSort);\n              readers.add(wrap);\n              TermVectorsReader termVectorsReader = wrap.getTermVectorsReader();\n              TermVectorsReader clone = termVectorsReader.clone();\n              assertNotSame(termVectorsReader, clone);\n              clone.close();\n            }\n            writer.addIndexes(readers.toArray(new CodecReader[0]));\n          }\n          assumeTrue(\"must have at least one doc\", actualNumDocs > 0);\n          try (DirectoryReader r = DirectoryReader.open(writer)) {\n            LeafReader leaf = getOnlyLeafReader(r);\n            assertEquals(actualNumDocs, leaf.maxDoc());\n            BinaryDocValues binary_dv = leaf.getBinaryDocValues(\"binary_dv\");\n            SortedNumericDocValues sorted_numeric_dv = leaf.getSortedNumericDocValues(\"sorted_numeric_dv\");\n            SortedSetDocValues sorted_set_dv = leaf.getSortedSetDocValues(\"sorted_set_dv\");\n            SortedDocValues binary_sorted_dv = leaf.getSortedDocValues(\"binary_sorted_dv\");\n            NumericDocValues ids = leaf.getNumericDocValues(\"id\");\n            long prevValue = -1;\n            boolean usingAltIds = false;\n            for (int i = 0; i < actualNumDocs; i++) {\n              int idNext = ids.nextDoc();\n              if (idNext == DocIdSetIterator.NO_MORE_DOCS) {\n                assertFalse(usingAltIds);\n                usingAltIds = true;\n                ids = leaf.getNumericDocValues(\"alt_id\");\n                idNext = ids.nextDoc();\n                binary_dv = leaf.getBinaryDocValues(\"binary_dv\");\n                sorted_numeric_dv = leaf.getSortedNumericDocValues(\"sorted_numeric_dv\");\n                sorted_set_dv = leaf.getSortedSetDocValues(\"sorted_set_dv\");\n                binary_sorted_dv = leaf.getSortedDocValues(\"binary_sorted_dv\");\n                prevValue = -1;\n              }\n              assertTrue(prevValue + \" < \" + ids.longValue(), prevValue < ids.longValue());\n              prevValue = ids.longValue();\n              assertTrue(binary_dv.advanceExact(idNext));\n              assertTrue(sorted_numeric_dv.advanceExact(idNext));\n              assertTrue(sorted_set_dv.advanceExact(idNext));\n              assertTrue(binary_sorted_dv.advanceExact(idNext));\n              assertEquals(new BytesRef(ids.longValue() + \"\"), binary_dv.binaryValue());\n              assertEquals(new BytesRef(ids.longValue() + \"\"), binary_sorted_dv.binaryValue());\n              assertEquals(new BytesRef(ids.longValue() + \"\"), sorted_set_dv.lookupOrd(sorted_set_dv.nextOrd()));\n              assertEquals(1, sorted_numeric_dv.docValueCount());\n              assertEquals(ids.longValue(), sorted_numeric_dv.nextValue());\n              Fields termVectors = leaf.getTermVectors(idNext);\n              assertTrue(termVectors.terms(\"term_vectors\").iterator().seekExact(new BytesRef(\"test\" + ids.longValue())));\n              assertEquals(Long.toString(ids.longValue()), leaf.document(idNext).get(\"id\"));\n              IndexSearcher searcher = new IndexSearcher(r);\n              TopDocs result = searcher.search(LongPoint.newExactQuery(\"id\", ids.longValue()), 1);\n              assertEquals(1, result.totalHits.value);\n              assertEquals(idNext, result.scoreDocs[0].doc);\n\n              result = searcher.search(new TermQuery(new Term(\"id\", \"\" + ids.longValue())), 1);\n              assertEquals(1, result.totalHits.value);\n              assertEquals(idNext, result.scoreDocs[0].doc);\n            }\n            assertEquals(DocIdSetIterator.NO_MORE_DOCS, ids.nextDoc());\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c6109eb85278a3a0b573c754977177cbad278c6c","date":1600863688,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSortingCodecReader#testSortOnAddIndicesRandom().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSortingCodecReader#testSortOnAddIndicesRandom().mjava","sourceNew":"  public void testSortOnAddIndicesRandom() throws IOException {\n    try (Directory dir = newDirectory()) {\n      int numDocs = atLeast(200);\n      int actualNumDocs;\n      List<Integer> docIds = new ArrayList<>(numDocs);\n      for (int i = 0; i < numDocs; i++) {\n        docIds.add(i);\n      }\n      Collections.shuffle(docIds, random());\n      try (RandomIndexWriter iw = new RandomIndexWriter(random(), dir)) {\n        for (int i = 0; i < numDocs; i++) {\n          int docId = docIds.get(i);\n          Document doc = new Document();\n          doc.add(new StringField(\"id\", Integer.toString(docId), Field.Store.YES));\n          doc.add(new LongPoint(\"id\", docId));\n          String s = RandomStrings.randomRealisticUnicodeOfLength(random(), 25);\n          doc.add(new TextField(\"text_field\", s, Field.Store.YES));\n          doc.add(new BinaryDocValuesField(\"text_field\", new BytesRef(s)));\n          doc.add(new TextField(\"another_text_field\", s, Field.Store.YES));\n          doc.add(new BinaryDocValuesField(\"another_text_field\", new BytesRef(s)));\n          doc.add(new SortedNumericDocValuesField(\"sorted_numeric_dv\", docId));\n          doc.add(new SortedDocValuesField(\"binary_sorted_dv\", new BytesRef(Integer.toString(docId))));\n          doc.add(new BinaryDocValuesField(\"binary_dv\", new BytesRef(Integer.toString(docId))));\n          doc.add(new SortedSetDocValuesField(\"sorted_set_dv\", new BytesRef(Integer.toString(docId))));\n          doc.add(new NumericDocValuesField(\"foo\", random().nextInt(20)));\n\n          FieldType ft = new FieldType(StringField.TYPE_NOT_STORED);\n          ft.setStoreTermVectors(true);\n          doc.add(new Field(\"term_vectors\", \"test\" + docId, ft));\n          if (rarely() == false) {\n            doc.add(new NumericDocValuesField(\"id\", docId));\n            doc.add(new SortedSetDocValuesField(\"sorted_set_sort_field\", new BytesRef(String.format(Locale.ROOT, \"%06d\", docId))));\n            doc.add(new SortedDocValuesField(\"sorted_binary_sort_field\", new BytesRef(String.format(Locale.ROOT, \"%06d\", docId))));\n            doc.add(new SortedNumericDocValuesField(\"sorted_numeric_sort_field\", docId));\n          } else {\n            doc.add(new NumericDocValuesField(\"alt_id\", docId));\n          }\n          iw.addDocument(doc);\n          if (i > 0 && random().nextInt(5) == 0) {\n            final int id = RandomPicks.randomFrom(random(), docIds.subList(0, i));\n            iw.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n          }\n        }\n        iw.commit();\n        actualNumDocs = iw.getDocStats().numDocs;\n      }\n      Sort indexSort = RandomPicks.randomFrom(random(), Arrays.asList(\n          new Sort(new SortField(\"id\", SortField.Type.INT),\n              new SortField(\"alt_id\", SortField.Type.INT)),\n          new Sort(new SortedSetSortField(\"sorted_set_sort_field\", false),\n              new SortField(\"alt_id\", SortField.Type.INT)),\n          new Sort(new SortedNumericSortField(\"sorted_numeric_sort_field\", SortField.Type.INT),\n              new SortField(\"alt_id\", SortField.Type.INT)),\n          new Sort(new SortField(\"sorted_binary_sort_field\", SortField.Type.STRING, false),\n              new SortField(\"alt_id\", SortField.Type.INT))\n          ));\n      try (Directory sortDir = newDirectory()) {\n        try (IndexWriter writer = new IndexWriter(sortDir, newIndexWriterConfig().setIndexSort(indexSort))) {\n          try (DirectoryReader reader = DirectoryReader.open(dir)) {\n            List<CodecReader> readers = new ArrayList<>();\n            for (LeafReaderContext ctx : reader.leaves()) {\n              CodecReader wrap = SortingCodecReader.wrap(SlowCodecReaderWrapper.wrap(ctx.reader()), indexSort);\n              readers.add(wrap);\n              TermVectorsReader termVectorsReader = wrap.getTermVectorsReader();\n              TermVectorsReader clone = termVectorsReader.clone();\n              assertNotSame(termVectorsReader, clone);\n              clone.close();\n            }\n            writer.addIndexes(readers.toArray(new CodecReader[0]));\n          }\n          assumeTrue(\"must have at least one doc\", actualNumDocs > 0);\n          try (DirectoryReader r = DirectoryReader.open(writer)) {\n            LeafReader leaf = getOnlyLeafReader(r);\n            assertEquals(actualNumDocs, leaf.maxDoc());\n            BinaryDocValues binary_dv = leaf.getBinaryDocValues(\"binary_dv\");\n            SortedNumericDocValues sorted_numeric_dv = leaf.getSortedNumericDocValues(\"sorted_numeric_dv\");\n            SortedSetDocValues sorted_set_dv = leaf.getSortedSetDocValues(\"sorted_set_dv\");\n            SortedDocValues binary_sorted_dv = leaf.getSortedDocValues(\"binary_sorted_dv\");\n            NumericDocValues ids = leaf.getNumericDocValues(\"id\");\n            long prevValue = -1;\n            boolean usingAltIds = false;\n            for (int i = 0; i < actualNumDocs; i++) {\n              int idNext = ids.nextDoc();\n              if (idNext == DocIdSetIterator.NO_MORE_DOCS) {\n                assertFalse(usingAltIds);\n                usingAltIds = true;\n                ids = leaf.getNumericDocValues(\"alt_id\");\n                idNext = ids.nextDoc();\n                binary_dv = leaf.getBinaryDocValues(\"binary_dv\");\n                sorted_numeric_dv = leaf.getSortedNumericDocValues(\"sorted_numeric_dv\");\n                sorted_set_dv = leaf.getSortedSetDocValues(\"sorted_set_dv\");\n                binary_sorted_dv = leaf.getSortedDocValues(\"binary_sorted_dv\");\n                prevValue = -1;\n              }\n              assertTrue(prevValue + \" < \" + ids.longValue(), prevValue < ids.longValue());\n              prevValue = ids.longValue();\n              assertTrue(binary_dv.advanceExact(idNext));\n              assertTrue(sorted_numeric_dv.advanceExact(idNext));\n              assertTrue(sorted_set_dv.advanceExact(idNext));\n              assertTrue(binary_sorted_dv.advanceExact(idNext));\n              assertEquals(new BytesRef(ids.longValue() + \"\"), binary_dv.binaryValue());\n              assertEquals(new BytesRef(ids.longValue() + \"\"), binary_sorted_dv.binaryValue());\n              assertEquals(new BytesRef(ids.longValue() + \"\"), sorted_set_dv.lookupOrd(sorted_set_dv.nextOrd()));\n              assertEquals(1, sorted_numeric_dv.docValueCount());\n              assertEquals(ids.longValue(), sorted_numeric_dv.nextValue());\n              Fields termVectors = leaf.getTermVectors(idNext);\n              assertTrue(termVectors.terms(\"term_vectors\").iterator().seekExact(new BytesRef(\"test\" + ids.longValue())));\n              assertEquals(Long.toString(ids.longValue()), leaf.document(idNext).get(\"id\"));\n              IndexSearcher searcher = new IndexSearcher(r);\n              TopDocs result = searcher.search(LongPoint.newExactQuery(\"id\", ids.longValue()), 1);\n              assertEquals(1, result.totalHits.value);\n              assertEquals(idNext, result.scoreDocs[0].doc);\n\n              result = searcher.search(new TermQuery(new Term(\"id\", \"\" + ids.longValue())), 1);\n              assertEquals(1, result.totalHits.value);\n              assertEquals(idNext, result.scoreDocs[0].doc);\n            }\n            assertEquals(DocIdSetIterator.NO_MORE_DOCS, ids.nextDoc());\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void testSortOnAddIndicesRandom() throws IOException {\n    try (Directory dir = newDirectory()) {\n      int numDocs = atLeast(200);\n      int actualNumDocs;\n      List<Integer> docIds = new ArrayList<>(numDocs);\n      for (int i = 0; i < numDocs; i++) {\n        docIds.add(i);\n      }\n      Collections.shuffle(docIds, random());\n      try (RandomIndexWriter iw = new RandomIndexWriter(random(), dir)) {\n        for (int i = 0; i < numDocs; i++) {\n          int docId = docIds.get(i);\n          Document doc = new Document();\n          doc.add(new NumericDocValuesField(\"foo\", random().nextInt(20)));\n          doc.add(new StringField(\"id\", Integer.toString(docId), Field.Store.YES));\n          doc.add(new LongPoint(\"id\", docId));\n          doc.add(new TextField(\"text_field\", RandomStrings.randomRealisticUnicodeOfLength(random(), 25), Field.Store.YES));\n          doc.add(new SortedNumericDocValuesField(\"sorted_numeric_dv\", docId));\n          doc.add(new SortedDocValuesField(\"binary_sorted_dv\", new BytesRef(Integer.toString(docId))));\n          doc.add(new BinaryDocValuesField(\"binary_dv\", new BytesRef(Integer.toString(docId))));\n          doc.add(new SortedSetDocValuesField(\"sorted_set_dv\", new BytesRef(Integer.toString(docId))));\n\n          FieldType ft = new FieldType(StringField.TYPE_NOT_STORED);\n          ft.setStoreTermVectors(true);\n          doc.add(new Field(\"term_vectors\", \"test\" + docId, ft));\n          if (rarely() == false) {\n            doc.add(new NumericDocValuesField(\"id\", docId));\n            doc.add(new SortedSetDocValuesField(\"sorted_set_sort_field\", new BytesRef(String.format(Locale.ROOT, \"%06d\", docId))));\n            doc.add(new SortedDocValuesField(\"sorted_binary_sort_field\", new BytesRef(String.format(Locale.ROOT, \"%06d\", docId))));\n            doc.add(new SortedNumericDocValuesField(\"sorted_numeric_sort_field\", docId));\n          } else {\n            doc.add(new NumericDocValuesField(\"alt_id\", docId));\n          }\n          iw.addDocument(doc);\n          if (i > 0 && random().nextInt(5) == 0) {\n            final int id = RandomPicks.randomFrom(random(), docIds.subList(0, i));\n            iw.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n          }\n        }\n        iw.commit();\n        actualNumDocs = iw.getDocStats().numDocs;\n      }\n      Sort indexSort = RandomPicks.randomFrom(random(), Arrays.asList(\n          new Sort(new SortField(\"id\", SortField.Type.INT),\n              new SortField(\"alt_id\", SortField.Type.INT)),\n          new Sort(new SortedSetSortField(\"sorted_set_sort_field\", false),\n              new SortField(\"alt_id\", SortField.Type.INT)),\n          new Sort(new SortedNumericSortField(\"sorted_numeric_sort_field\", SortField.Type.INT),\n              new SortField(\"alt_id\", SortField.Type.INT)),\n          new Sort(new SortField(\"sorted_binary_sort_field\", SortField.Type.STRING, false),\n              new SortField(\"alt_id\", SortField.Type.INT))\n          ));\n      try (Directory sortDir = newDirectory()) {\n        try (IndexWriter writer = new IndexWriter(sortDir, newIndexWriterConfig().setIndexSort(indexSort))) {\n          try (DirectoryReader reader = DirectoryReader.open(dir)) {\n            List<CodecReader> readers = new ArrayList<>();\n            for (LeafReaderContext ctx : reader.leaves()) {\n              CodecReader wrap = SortingCodecReader.wrap(SlowCodecReaderWrapper.wrap(ctx.reader()), indexSort);\n              readers.add(wrap);\n              TermVectorsReader termVectorsReader = wrap.getTermVectorsReader();\n              TermVectorsReader clone = termVectorsReader.clone();\n              assertNotSame(termVectorsReader, clone);\n              clone.close();\n            }\n            writer.addIndexes(readers.toArray(new CodecReader[0]));\n          }\n          assumeTrue(\"must have at least one doc\", actualNumDocs > 0);\n          try (DirectoryReader r = DirectoryReader.open(writer)) {\n            LeafReader leaf = getOnlyLeafReader(r);\n            assertEquals(actualNumDocs, leaf.maxDoc());\n            BinaryDocValues binary_dv = leaf.getBinaryDocValues(\"binary_dv\");\n            SortedNumericDocValues sorted_numeric_dv = leaf.getSortedNumericDocValues(\"sorted_numeric_dv\");\n            SortedSetDocValues sorted_set_dv = leaf.getSortedSetDocValues(\"sorted_set_dv\");\n            SortedDocValues binary_sorted_dv = leaf.getSortedDocValues(\"binary_sorted_dv\");\n            NumericDocValues ids = leaf.getNumericDocValues(\"id\");\n            long prevValue = -1;\n            boolean usingAltIds = false;\n            for (int i = 0; i < actualNumDocs; i++) {\n              int idNext = ids.nextDoc();\n              if (idNext == DocIdSetIterator.NO_MORE_DOCS) {\n                assertFalse(usingAltIds);\n                usingAltIds = true;\n                ids = leaf.getNumericDocValues(\"alt_id\");\n                idNext = ids.nextDoc();\n                binary_dv = leaf.getBinaryDocValues(\"binary_dv\");\n                sorted_numeric_dv = leaf.getSortedNumericDocValues(\"sorted_numeric_dv\");\n                sorted_set_dv = leaf.getSortedSetDocValues(\"sorted_set_dv\");\n                binary_sorted_dv = leaf.getSortedDocValues(\"binary_sorted_dv\");\n                prevValue = -1;\n              }\n              assertTrue(prevValue + \" < \" + ids.longValue(), prevValue < ids.longValue());\n              prevValue = ids.longValue();\n              assertTrue(binary_dv.advanceExact(idNext));\n              assertTrue(sorted_numeric_dv.advanceExact(idNext));\n              assertTrue(sorted_set_dv.advanceExact(idNext));\n              assertTrue(binary_sorted_dv.advanceExact(idNext));\n              assertEquals(new BytesRef(ids.longValue() + \"\"), binary_dv.binaryValue());\n              assertEquals(new BytesRef(ids.longValue() + \"\"), binary_sorted_dv.binaryValue());\n              assertEquals(new BytesRef(ids.longValue() + \"\"), sorted_set_dv.lookupOrd(sorted_set_dv.nextOrd()));\n              assertEquals(1, sorted_numeric_dv.docValueCount());\n              assertEquals(ids.longValue(), sorted_numeric_dv.nextValue());\n              Fields termVectors = leaf.getTermVectors(idNext);\n              assertTrue(termVectors.terms(\"term_vectors\").iterator().seekExact(new BytesRef(\"test\" + ids.longValue())));\n              assertEquals(Long.toString(ids.longValue()), leaf.document(idNext).get(\"id\"));\n              IndexSearcher searcher = new IndexSearcher(r);\n              TopDocs result = searcher.search(LongPoint.newExactQuery(\"id\", ids.longValue()), 1);\n              assertEquals(1, result.totalHits.value);\n              assertEquals(idNext, result.scoreDocs[0].doc);\n\n              result = searcher.search(new TermQuery(new Term(\"id\", \"\" + ids.longValue())), 1);\n              assertEquals(1, result.totalHits.value);\n              assertEquals(idNext, result.scoreDocs[0].doc);\n            }\n            assertEquals(DocIdSetIterator.NO_MORE_DOCS, ids.nextDoc());\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c6109eb85278a3a0b573c754977177cbad278c6c":["19d8bfe2b34f3ba4420efc1f441e4145a2ad6c63"],"19d8bfe2b34f3ba4420efc1f441e4145a2ad6c63":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c6109eb85278a3a0b573c754977177cbad278c6c"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["19d8bfe2b34f3ba4420efc1f441e4145a2ad6c63"],"c6109eb85278a3a0b573c754977177cbad278c6c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"19d8bfe2b34f3ba4420efc1f441e4145a2ad6c63":["c6109eb85278a3a0b573c754977177cbad278c6c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}