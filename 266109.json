{"path":"solr/core/src/java/org/apache/solr/update/UpdateShardHandler#UpdateShardHandler(UpdateShardHandlerConfig).mjava","commits":[{"id":"e15199583d3635cb940942caed05132dd6c4c7c6","date":1424875551,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateShardHandler#UpdateShardHandler(UpdateShardHandlerConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateShardHandler#UpdateShardHandler(ConfigSolr).mjava","sourceNew":"  public UpdateShardHandler(UpdateShardHandlerConfig cfg) {\n    \n    clientConnectionManager = new PoolingClientConnectionManager(SchemeRegistryFactory.createSystemDefault());\n    if (cfg != null ) {\n      clientConnectionManager.setMaxTotal(cfg.getMaxUpdateConnections());\n      clientConnectionManager.setDefaultMaxPerRoute(cfg.getMaxUpdateConnectionsPerHost());\n    }\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n    if (cfg != null) {\n      params.set(HttpClientUtil.PROP_SO_TIMEOUT,\n          cfg.getDistributedSocketTimeout());\n      params.set(HttpClientUtil.PROP_CONNECTION_TIMEOUT,\n          cfg.getDistributedConnectionTimeout());\n    }\n    // in the update case, we want to do retries, and to use\n    // the default Solr retry handler that createClient will \n    // give us\n    params.set(HttpClientUtil.PROP_USE_RETRY, true);\n    log.info(\"Creating UpdateShardHandler HTTP client with params: {}\", params);\n    client = HttpClientUtil.createClient(params, clientConnectionManager);\n  }\n\n","sourceOld":"  public UpdateShardHandler(ConfigSolr cfg) {\n    \n    clientConnectionManager = new PoolingClientConnectionManager(SchemeRegistryFactory.createSystemDefault());\n    if (cfg != null ) {\n      clientConnectionManager.setMaxTotal(cfg.getMaxUpdateConnections());\n      clientConnectionManager.setDefaultMaxPerRoute(cfg.getMaxUpdateConnectionsPerHost());\n    }\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n    if (cfg != null) {\n      params.set(HttpClientUtil.PROP_SO_TIMEOUT,\n          cfg.getDistributedSocketTimeout());\n      params.set(HttpClientUtil.PROP_CONNECTION_TIMEOUT,\n          cfg.getDistributedConnectionTimeout());\n    }\n    // in the update case, we want to do retries, and to use\n    // the default Solr retry handler that createClient will \n    // give us\n    params.set(HttpClientUtil.PROP_USE_RETRY, true);\n    log.info(\"Creating UpdateShardHandler HTTP client with params: {}\", params);\n    client = HttpClientUtil.createClient(params, clientConnectionManager);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateShardHandler#UpdateShardHandler(UpdateShardHandlerConfig).mjava","pathOld":"/dev/null","sourceNew":"  public UpdateShardHandler(UpdateShardHandlerConfig cfg) {\n    \n    clientConnectionManager = new PoolingClientConnectionManager(SchemeRegistryFactory.createSystemDefault());\n    if (cfg != null ) {\n      clientConnectionManager.setMaxTotal(cfg.getMaxUpdateConnections());\n      clientConnectionManager.setDefaultMaxPerRoute(cfg.getMaxUpdateConnectionsPerHost());\n    }\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n    if (cfg != null) {\n      params.set(HttpClientUtil.PROP_SO_TIMEOUT,\n          cfg.getDistributedSocketTimeout());\n      params.set(HttpClientUtil.PROP_CONNECTION_TIMEOUT,\n          cfg.getDistributedConnectionTimeout());\n    }\n    // in the update case, we want to do retries, and to use\n    // the default Solr retry handler that createClient will \n    // give us\n    params.set(HttpClientUtil.PROP_USE_RETRY, true);\n    log.info(\"Creating UpdateShardHandler HTTP client with params: {}\", params);\n    client = HttpClientUtil.createClient(params, clientConnectionManager);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"58b7eb80017f1c5b32035176b965fa0cc0287d04","date":1432069816,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateShardHandler#UpdateShardHandler(UpdateShardHandlerConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateShardHandler#UpdateShardHandler(UpdateShardHandlerConfig).mjava","sourceNew":"  public UpdateShardHandler(UpdateShardHandlerConfig cfg) {\n    this.cfg = cfg;\n    clientConnectionManager = new PoolingClientConnectionManager(SchemeRegistryFactory.createSystemDefault());\n    if (cfg != null ) {\n      clientConnectionManager.setMaxTotal(cfg.getMaxUpdateConnections());\n      clientConnectionManager.setDefaultMaxPerRoute(cfg.getMaxUpdateConnectionsPerHost());\n    }\n\n    ModifiableSolrParams clientParams = getClientParams();\n    log.info(\"Creating UpdateShardHandler HTTP client with params: {}\", clientParams);\n    client = HttpClientUtil.createClient(clientParams, clientConnectionManager);\n  }\n\n","sourceOld":"  public UpdateShardHandler(UpdateShardHandlerConfig cfg) {\n    \n    clientConnectionManager = new PoolingClientConnectionManager(SchemeRegistryFactory.createSystemDefault());\n    if (cfg != null ) {\n      clientConnectionManager.setMaxTotal(cfg.getMaxUpdateConnections());\n      clientConnectionManager.setDefaultMaxPerRoute(cfg.getMaxUpdateConnectionsPerHost());\n    }\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n    if (cfg != null) {\n      params.set(HttpClientUtil.PROP_SO_TIMEOUT,\n          cfg.getDistributedSocketTimeout());\n      params.set(HttpClientUtil.PROP_CONNECTION_TIMEOUT,\n          cfg.getDistributedConnectionTimeout());\n    }\n    // in the update case, we want to do retries, and to use\n    // the default Solr retry handler that createClient will \n    // give us\n    params.set(HttpClientUtil.PROP_USE_RETRY, true);\n    log.info(\"Creating UpdateShardHandler HTTP client with params: {}\", params);\n    client = HttpClientUtil.createClient(params, clientConnectionManager);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"859081acf00749f5dd462772c571d611d4a4d2db","date":1459527719,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateShardHandler#UpdateShardHandler(UpdateShardHandlerConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateShardHandler#UpdateShardHandler(UpdateShardHandlerConfig).mjava","sourceNew":"  public UpdateShardHandler(UpdateShardHandlerConfig cfg) {\n    clientConnectionManager = new PoolingHttpClientConnectionManager(HttpClientUtil.getSchemaRegisteryProvider().getSchemaRegistry());\n    if (cfg != null ) {\n      clientConnectionManager.setMaxTotal(cfg.getMaxUpdateConnections());\n      clientConnectionManager.setDefaultMaxPerRoute(cfg.getMaxUpdateConnectionsPerHost());\n    }\n\n    ModifiableSolrParams clientParams = new ModifiableSolrParams();\n    log.info(\"Creating UpdateShardHandler HTTP client with params: {}\", clientParams);\n    client = HttpClientUtil.createClient(clientParams, clientConnectionManager);\n  }\n\n","sourceOld":"  public UpdateShardHandler(UpdateShardHandlerConfig cfg) {\n    this.cfg = cfg;\n    clientConnectionManager = new PoolingClientConnectionManager(SchemeRegistryFactory.createSystemDefault());\n    if (cfg != null ) {\n      clientConnectionManager.setMaxTotal(cfg.getMaxUpdateConnections());\n      clientConnectionManager.setDefaultMaxPerRoute(cfg.getMaxUpdateConnectionsPerHost());\n    }\n\n    ModifiableSolrParams clientParams = getClientParams();\n    log.info(\"Creating UpdateShardHandler HTTP client with params: {}\", clientParams);\n    client = HttpClientUtil.createClient(clientParams, clientConnectionManager);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"26e0252a32b4b4d04820aedc5e0ff9dbae0695e0","date":1467357425,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateShardHandler#UpdateShardHandler(UpdateShardHandlerConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateShardHandler#UpdateShardHandler(UpdateShardHandlerConfig).mjava","sourceNew":"  public UpdateShardHandler(UpdateShardHandlerConfig cfg) {\n    clientConnectionManager = new PoolingHttpClientConnectionManager(HttpClientUtil.getSchemaRegisteryProvider().getSchemaRegistry());\n    if (cfg != null ) {\n      clientConnectionManager.setMaxTotal(cfg.getMaxUpdateConnections());\n      clientConnectionManager.setDefaultMaxPerRoute(cfg.getMaxUpdateConnectionsPerHost());\n    }\n\n    ModifiableSolrParams clientParams = new ModifiableSolrParams();\n    if (cfg != null)  {\n      clientParams.set(HttpClientUtil.PROP_SO_TIMEOUT, cfg.getDistributedSocketTimeout());\n      clientParams.set(HttpClientUtil.PROP_CONNECTION_TIMEOUT, cfg.getDistributedConnectionTimeout());\n    }\n    client = HttpClientUtil.createClient(clientParams, clientConnectionManager);\n\n    // following is done only for logging complete configuration.\n    // The maxConnections and maxConnectionsPerHost have already been specified on the connection manager\n    if (cfg != null)  {\n      clientParams.set(HttpClientUtil.PROP_MAX_CONNECTIONS, cfg.getMaxUpdateConnections());\n      clientParams.set(HttpClientUtil.PROP_MAX_CONNECTIONS_PER_HOST, cfg.getMaxUpdateConnectionsPerHost());\n    }\n    log.info(\"Created UpdateShardHandler HTTP client with params: {}\", clientParams);\n  }\n\n","sourceOld":"  public UpdateShardHandler(UpdateShardHandlerConfig cfg) {\n    clientConnectionManager = new PoolingHttpClientConnectionManager(HttpClientUtil.getSchemaRegisteryProvider().getSchemaRegistry());\n    if (cfg != null ) {\n      clientConnectionManager.setMaxTotal(cfg.getMaxUpdateConnections());\n      clientConnectionManager.setDefaultMaxPerRoute(cfg.getMaxUpdateConnectionsPerHost());\n    }\n\n    ModifiableSolrParams clientParams = new ModifiableSolrParams();\n    log.info(\"Creating UpdateShardHandler HTTP client with params: {}\", clientParams);\n    client = HttpClientUtil.createClient(clientParams, clientConnectionManager);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"dcd6a14058a87dd9bf7c9d844f4d14c95f0846e8","date":1467358136,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateShardHandler#UpdateShardHandler(UpdateShardHandlerConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateShardHandler#UpdateShardHandler(UpdateShardHandlerConfig).mjava","sourceNew":"  public UpdateShardHandler(UpdateShardHandlerConfig cfg) {\n    clientConnectionManager = new PoolingHttpClientConnectionManager(HttpClientUtil.getSchemaRegisteryProvider().getSchemaRegistry());\n    if (cfg != null ) {\n      clientConnectionManager.setMaxTotal(cfg.getMaxUpdateConnections());\n      clientConnectionManager.setDefaultMaxPerRoute(cfg.getMaxUpdateConnectionsPerHost());\n    }\n\n    ModifiableSolrParams clientParams = new ModifiableSolrParams();\n    log.info(\"Creating UpdateShardHandler HTTP client with params: {}\", clientParams);\n    client = HttpClientUtil.createClient(clientParams, clientConnectionManager);\n  }\n\n","sourceOld":"  public UpdateShardHandler(UpdateShardHandlerConfig cfg) {\n    clientConnectionManager = new PoolingHttpClientConnectionManager(HttpClientUtil.getSchemaRegisteryProvider().getSchemaRegistry());\n    if (cfg != null ) {\n      clientConnectionManager.setMaxTotal(cfg.getMaxUpdateConnections());\n      clientConnectionManager.setDefaultMaxPerRoute(cfg.getMaxUpdateConnectionsPerHost());\n    }\n\n    ModifiableSolrParams clientParams = new ModifiableSolrParams();\n    if (cfg != null)  {\n      clientParams.set(HttpClientUtil.PROP_SO_TIMEOUT, cfg.getDistributedSocketTimeout());\n      clientParams.set(HttpClientUtil.PROP_CONNECTION_TIMEOUT, cfg.getDistributedConnectionTimeout());\n    }\n    client = HttpClientUtil.createClient(clientParams, clientConnectionManager);\n\n    // following is done only for logging complete configuration.\n    // The maxConnections and maxConnectionsPerHost have already been specified on the connection manager\n    if (cfg != null)  {\n      clientParams.set(HttpClientUtil.PROP_MAX_CONNECTIONS, cfg.getMaxUpdateConnections());\n      clientParams.set(HttpClientUtil.PROP_MAX_CONNECTIONS_PER_HOST, cfg.getMaxUpdateConnectionsPerHost());\n    }\n    log.info(\"Created UpdateShardHandler HTTP client with params: {}\", clientParams);\n  }\n\n","bugFix":null,"bugIntro":["b3a63e635085f13be62c7e0829c70cb104e601b2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b3a63e635085f13be62c7e0829c70cb104e601b2","date":1467359206,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateShardHandler#UpdateShardHandler(UpdateShardHandlerConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateShardHandler#UpdateShardHandler(UpdateShardHandlerConfig).mjava","sourceNew":"  public UpdateShardHandler(UpdateShardHandlerConfig cfg) {\n    clientConnectionManager = new PoolingHttpClientConnectionManager(HttpClientUtil.getSchemaRegisteryProvider().getSchemaRegistry());\n    if (cfg != null ) {\n      clientConnectionManager.setMaxTotal(cfg.getMaxUpdateConnections());\n      clientConnectionManager.setDefaultMaxPerRoute(cfg.getMaxUpdateConnectionsPerHost());\n    }\n\n    ModifiableSolrParams clientParams = new ModifiableSolrParams();\n    if (cfg != null)  {\n      clientParams.set(HttpClientUtil.PROP_SO_TIMEOUT, cfg.getDistributedSocketTimeout());\n      clientParams.set(HttpClientUtil.PROP_CONNECTION_TIMEOUT, cfg.getDistributedConnectionTimeout());\n    }\n    client = HttpClientUtil.createClient(clientParams, clientConnectionManager);\n\n    // following is done only for logging complete configuration.\n    // The maxConnections and maxConnectionsPerHost have already been specified on the connection manager\n    if (cfg != null)  {\n      clientParams.set(HttpClientUtil.PROP_MAX_CONNECTIONS, cfg.getMaxUpdateConnections());\n      clientParams.set(HttpClientUtil.PROP_MAX_CONNECTIONS_PER_HOST, cfg.getMaxUpdateConnectionsPerHost());\n    }\n    log.info(\"Created UpdateShardHandler HTTP client with params: {}\", clientParams);\n  }\n\n","sourceOld":"  public UpdateShardHandler(UpdateShardHandlerConfig cfg) {\n    clientConnectionManager = new PoolingHttpClientConnectionManager(HttpClientUtil.getSchemaRegisteryProvider().getSchemaRegistry());\n    if (cfg != null ) {\n      clientConnectionManager.setMaxTotal(cfg.getMaxUpdateConnections());\n      clientConnectionManager.setDefaultMaxPerRoute(cfg.getMaxUpdateConnectionsPerHost());\n    }\n\n    ModifiableSolrParams clientParams = new ModifiableSolrParams();\n    log.info(\"Creating UpdateShardHandler HTTP client with params: {}\", clientParams);\n    client = HttpClientUtil.createClient(clientParams, clientConnectionManager);\n  }\n\n","bugFix":["dcd6a14058a87dd9bf7c9d844f4d14c95f0846e8"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"56ae3539e829325e80cc0e8d65df4d724cc762d1","date":1467374872,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateShardHandler#UpdateShardHandler(UpdateShardHandlerConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateShardHandler#UpdateShardHandler(UpdateShardHandlerConfig).mjava","sourceNew":"  public UpdateShardHandler(UpdateShardHandlerConfig cfg) {\n    clientConnectionManager = new PoolingHttpClientConnectionManager(HttpClientUtil.getSchemaRegisteryProvider().getSchemaRegistry());\n    if (cfg != null ) {\n      clientConnectionManager.setMaxTotal(cfg.getMaxUpdateConnections());\n      clientConnectionManager.setDefaultMaxPerRoute(cfg.getMaxUpdateConnectionsPerHost());\n    }\n\n    ModifiableSolrParams clientParams = new ModifiableSolrParams();\n    if (cfg != null)  {\n      clientParams.set(HttpClientUtil.PROP_SO_TIMEOUT, cfg.getDistributedSocketTimeout());\n      clientParams.set(HttpClientUtil.PROP_CONNECTION_TIMEOUT, cfg.getDistributedConnectionTimeout());\n    }\n    client = HttpClientUtil.createClient(clientParams, clientConnectionManager);\n\n    // following is done only for logging complete configuration.\n    // The maxConnections and maxConnectionsPerHost have already been specified on the connection manager\n    if (cfg != null)  {\n      clientParams.set(HttpClientUtil.PROP_MAX_CONNECTIONS, cfg.getMaxUpdateConnections());\n      clientParams.set(HttpClientUtil.PROP_MAX_CONNECTIONS_PER_HOST, cfg.getMaxUpdateConnectionsPerHost());\n    }\n    log.info(\"Created UpdateShardHandler HTTP client with params: {}\", clientParams);\n  }\n\n","sourceOld":"  public UpdateShardHandler(UpdateShardHandlerConfig cfg) {\n    clientConnectionManager = new PoolingHttpClientConnectionManager(HttpClientUtil.getSchemaRegisteryProvider().getSchemaRegistry());\n    if (cfg != null ) {\n      clientConnectionManager.setMaxTotal(cfg.getMaxUpdateConnections());\n      clientConnectionManager.setDefaultMaxPerRoute(cfg.getMaxUpdateConnectionsPerHost());\n    }\n\n    ModifiableSolrParams clientParams = new ModifiableSolrParams();\n    log.info(\"Creating UpdateShardHandler HTTP client with params: {}\", clientParams);\n    client = HttpClientUtil.createClient(clientParams, clientConnectionManager);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7f0c8426396c925de8db3ed3f8ff40fd73670a5c","date":1474556641,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateShardHandler#UpdateShardHandler(UpdateShardHandlerConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateShardHandler#UpdateShardHandler(UpdateShardHandlerConfig).mjava","sourceNew":"  public UpdateShardHandler(UpdateShardHandlerConfig cfg) {\n    clientConnectionManager = new PoolingHttpClientConnectionManager(HttpClientUtil.getSchemaRegisteryProvider().getSchemaRegistry());\n    if (cfg != null ) {\n      clientConnectionManager.setMaxTotal(cfg.getMaxUpdateConnections());\n      clientConnectionManager.setDefaultMaxPerRoute(cfg.getMaxUpdateConnectionsPerHost());\n    }\n\n    ModifiableSolrParams clientParams = new ModifiableSolrParams();\n    if (cfg != null)  {\n      clientParams.set(HttpClientUtil.PROP_SO_TIMEOUT, cfg.getDistributedSocketTimeout());\n      clientParams.set(HttpClientUtil.PROP_CONNECTION_TIMEOUT, cfg.getDistributedConnectionTimeout());\n    }\n    client = HttpClientUtil.createClient(clientParams, clientConnectionManager);\n\n    // following is done only for logging complete configuration.\n    // The maxConnections and maxConnectionsPerHost have already been specified on the connection manager\n    if (cfg != null)  {\n      clientParams.set(HttpClientUtil.PROP_MAX_CONNECTIONS, cfg.getMaxUpdateConnections());\n      clientParams.set(HttpClientUtil.PROP_MAX_CONNECTIONS_PER_HOST, cfg.getMaxUpdateConnectionsPerHost());\n    }\n    log.debug(\"Created UpdateShardHandler HTTP client with params: {}\", clientParams);\n  }\n\n","sourceOld":"  public UpdateShardHandler(UpdateShardHandlerConfig cfg) {\n    clientConnectionManager = new PoolingHttpClientConnectionManager(HttpClientUtil.getSchemaRegisteryProvider().getSchemaRegistry());\n    if (cfg != null ) {\n      clientConnectionManager.setMaxTotal(cfg.getMaxUpdateConnections());\n      clientConnectionManager.setDefaultMaxPerRoute(cfg.getMaxUpdateConnectionsPerHost());\n    }\n\n    ModifiableSolrParams clientParams = new ModifiableSolrParams();\n    if (cfg != null)  {\n      clientParams.set(HttpClientUtil.PROP_SO_TIMEOUT, cfg.getDistributedSocketTimeout());\n      clientParams.set(HttpClientUtil.PROP_CONNECTION_TIMEOUT, cfg.getDistributedConnectionTimeout());\n    }\n    client = HttpClientUtil.createClient(clientParams, clientConnectionManager);\n\n    // following is done only for logging complete configuration.\n    // The maxConnections and maxConnectionsPerHost have already been specified on the connection manager\n    if (cfg != null)  {\n      clientParams.set(HttpClientUtil.PROP_MAX_CONNECTIONS, cfg.getMaxUpdateConnections());\n      clientParams.set(HttpClientUtil.PROP_MAX_CONNECTIONS_PER_HOST, cfg.getMaxUpdateConnectionsPerHost());\n    }\n    log.info(\"Created UpdateShardHandler HTTP client with params: {}\", clientParams);\n  }\n\n","bugFix":null,"bugIntro":["3646ead588297558973dbd1162e69791e822b944"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"126d6ad24eed13163ba0959435d5a80e5672837c","date":1474567302,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateShardHandler#UpdateShardHandler(UpdateShardHandlerConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateShardHandler#UpdateShardHandler(UpdateShardHandlerConfig).mjava","sourceNew":"  public UpdateShardHandler(UpdateShardHandlerConfig cfg) {\n    clientConnectionManager = new PoolingHttpClientConnectionManager(HttpClientUtil.getSchemaRegisteryProvider().getSchemaRegistry());\n    if (cfg != null ) {\n      clientConnectionManager.setMaxTotal(cfg.getMaxUpdateConnections());\n      clientConnectionManager.setDefaultMaxPerRoute(cfg.getMaxUpdateConnectionsPerHost());\n    }\n\n    ModifiableSolrParams clientParams = new ModifiableSolrParams();\n    if (cfg != null)  {\n      clientParams.set(HttpClientUtil.PROP_SO_TIMEOUT, cfg.getDistributedSocketTimeout());\n      clientParams.set(HttpClientUtil.PROP_CONNECTION_TIMEOUT, cfg.getDistributedConnectionTimeout());\n    }\n    client = HttpClientUtil.createClient(clientParams, clientConnectionManager);\n\n    // following is done only for logging complete configuration.\n    // The maxConnections and maxConnectionsPerHost have already been specified on the connection manager\n    if (cfg != null)  {\n      clientParams.set(HttpClientUtil.PROP_MAX_CONNECTIONS, cfg.getMaxUpdateConnections());\n      clientParams.set(HttpClientUtil.PROP_MAX_CONNECTIONS_PER_HOST, cfg.getMaxUpdateConnectionsPerHost());\n    }\n    log.debug(\"Created UpdateShardHandler HTTP client with params: {}\", clientParams);\n  }\n\n","sourceOld":"  public UpdateShardHandler(UpdateShardHandlerConfig cfg) {\n    clientConnectionManager = new PoolingHttpClientConnectionManager(HttpClientUtil.getSchemaRegisteryProvider().getSchemaRegistry());\n    if (cfg != null ) {\n      clientConnectionManager.setMaxTotal(cfg.getMaxUpdateConnections());\n      clientConnectionManager.setDefaultMaxPerRoute(cfg.getMaxUpdateConnectionsPerHost());\n    }\n\n    ModifiableSolrParams clientParams = new ModifiableSolrParams();\n    if (cfg != null)  {\n      clientParams.set(HttpClientUtil.PROP_SO_TIMEOUT, cfg.getDistributedSocketTimeout());\n      clientParams.set(HttpClientUtil.PROP_CONNECTION_TIMEOUT, cfg.getDistributedConnectionTimeout());\n    }\n    client = HttpClientUtil.createClient(clientParams, clientConnectionManager);\n\n    // following is done only for logging complete configuration.\n    // The maxConnections and maxConnectionsPerHost have already been specified on the connection manager\n    if (cfg != null)  {\n      clientParams.set(HttpClientUtil.PROP_MAX_CONNECTIONS, cfg.getMaxUpdateConnections());\n      clientParams.set(HttpClientUtil.PROP_MAX_CONNECTIONS_PER_HOST, cfg.getMaxUpdateConnectionsPerHost());\n    }\n    log.info(\"Created UpdateShardHandler HTTP client with params: {}\", clientParams);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateShardHandler#UpdateShardHandler(UpdateShardHandlerConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateShardHandler#UpdateShardHandler(UpdateShardHandlerConfig).mjava","sourceNew":"  public UpdateShardHandler(UpdateShardHandlerConfig cfg) {\n    clientConnectionManager = new PoolingHttpClientConnectionManager(HttpClientUtil.getSchemaRegisteryProvider().getSchemaRegistry());\n    if (cfg != null ) {\n      clientConnectionManager.setMaxTotal(cfg.getMaxUpdateConnections());\n      clientConnectionManager.setDefaultMaxPerRoute(cfg.getMaxUpdateConnectionsPerHost());\n    }\n\n    ModifiableSolrParams clientParams = new ModifiableSolrParams();\n    if (cfg != null)  {\n      clientParams.set(HttpClientUtil.PROP_SO_TIMEOUT, cfg.getDistributedSocketTimeout());\n      clientParams.set(HttpClientUtil.PROP_CONNECTION_TIMEOUT, cfg.getDistributedConnectionTimeout());\n    }\n    client = HttpClientUtil.createClient(clientParams, clientConnectionManager);\n\n    // following is done only for logging complete configuration.\n    // The maxConnections and maxConnectionsPerHost have already been specified on the connection manager\n    if (cfg != null)  {\n      clientParams.set(HttpClientUtil.PROP_MAX_CONNECTIONS, cfg.getMaxUpdateConnections());\n      clientParams.set(HttpClientUtil.PROP_MAX_CONNECTIONS_PER_HOST, cfg.getMaxUpdateConnectionsPerHost());\n    }\n    log.debug(\"Created UpdateShardHandler HTTP client with params: {}\", clientParams);\n  }\n\n","sourceOld":"  public UpdateShardHandler(UpdateShardHandlerConfig cfg) {\n    clientConnectionManager = new PoolingHttpClientConnectionManager(HttpClientUtil.getSchemaRegisteryProvider().getSchemaRegistry());\n    if (cfg != null ) {\n      clientConnectionManager.setMaxTotal(cfg.getMaxUpdateConnections());\n      clientConnectionManager.setDefaultMaxPerRoute(cfg.getMaxUpdateConnectionsPerHost());\n    }\n\n    ModifiableSolrParams clientParams = new ModifiableSolrParams();\n    if (cfg != null)  {\n      clientParams.set(HttpClientUtil.PROP_SO_TIMEOUT, cfg.getDistributedSocketTimeout());\n      clientParams.set(HttpClientUtil.PROP_CONNECTION_TIMEOUT, cfg.getDistributedConnectionTimeout());\n    }\n    client = HttpClientUtil.createClient(clientParams, clientConnectionManager);\n\n    // following is done only for logging complete configuration.\n    // The maxConnections and maxConnectionsPerHost have already been specified on the connection manager\n    if (cfg != null)  {\n      clientParams.set(HttpClientUtil.PROP_MAX_CONNECTIONS, cfg.getMaxUpdateConnections());\n      clientParams.set(HttpClientUtil.PROP_MAX_CONNECTIONS_PER_HOST, cfg.getMaxUpdateConnectionsPerHost());\n    }\n    log.info(\"Created UpdateShardHandler HTTP client with params: {}\", clientParams);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateShardHandler#UpdateShardHandler(UpdateShardHandlerConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateShardHandler#UpdateShardHandler(UpdateShardHandlerConfig).mjava","sourceNew":"  public UpdateShardHandler(UpdateShardHandlerConfig cfg) {\n    clientConnectionManager = new PoolingHttpClientConnectionManager(HttpClientUtil.getSchemaRegisteryProvider().getSchemaRegistry());\n    if (cfg != null ) {\n      clientConnectionManager.setMaxTotal(cfg.getMaxUpdateConnections());\n      clientConnectionManager.setDefaultMaxPerRoute(cfg.getMaxUpdateConnectionsPerHost());\n    }\n\n    ModifiableSolrParams clientParams = new ModifiableSolrParams();\n    if (cfg != null)  {\n      clientParams.set(HttpClientUtil.PROP_SO_TIMEOUT, cfg.getDistributedSocketTimeout());\n      clientParams.set(HttpClientUtil.PROP_CONNECTION_TIMEOUT, cfg.getDistributedConnectionTimeout());\n    }\n    client = HttpClientUtil.createClient(clientParams, clientConnectionManager);\n\n    // following is done only for logging complete configuration.\n    // The maxConnections and maxConnectionsPerHost have already been specified on the connection manager\n    if (cfg != null)  {\n      clientParams.set(HttpClientUtil.PROP_MAX_CONNECTIONS, cfg.getMaxUpdateConnections());\n      clientParams.set(HttpClientUtil.PROP_MAX_CONNECTIONS_PER_HOST, cfg.getMaxUpdateConnectionsPerHost());\n    }\n    log.debug(\"Created UpdateShardHandler HTTP client with params: {}\", clientParams);\n  }\n\n","sourceOld":"  public UpdateShardHandler(UpdateShardHandlerConfig cfg) {\n    clientConnectionManager = new PoolingHttpClientConnectionManager(HttpClientUtil.getSchemaRegisteryProvider().getSchemaRegistry());\n    if (cfg != null ) {\n      clientConnectionManager.setMaxTotal(cfg.getMaxUpdateConnections());\n      clientConnectionManager.setDefaultMaxPerRoute(cfg.getMaxUpdateConnectionsPerHost());\n    }\n\n    ModifiableSolrParams clientParams = new ModifiableSolrParams();\n    log.info(\"Creating UpdateShardHandler HTTP client with params: {}\", clientParams);\n    client = HttpClientUtil.createClient(clientParams, clientConnectionManager);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"16fa358573e3c2508728b3c7c438a8c19a3f0ae4","date":1482846144,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateShardHandler#UpdateShardHandler(UpdateShardHandlerConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateShardHandler#UpdateShardHandler(UpdateShardHandlerConfig).mjava","sourceNew":"  public UpdateShardHandler(UpdateShardHandlerConfig cfg) {\n    clientConnectionManager = new InstrumentedPoolingHttpClientConnectionManager(HttpClientUtil.getSchemaRegisteryProvider().getSchemaRegistry());\n    if (cfg != null ) {\n      clientConnectionManager.setMaxTotal(cfg.getMaxUpdateConnections());\n      clientConnectionManager.setDefaultMaxPerRoute(cfg.getMaxUpdateConnectionsPerHost());\n    }\n\n    ModifiableSolrParams clientParams = new ModifiableSolrParams();\n    if (cfg != null)  {\n      clientParams.set(HttpClientUtil.PROP_SO_TIMEOUT, cfg.getDistributedSocketTimeout());\n      clientParams.set(HttpClientUtil.PROP_CONNECTION_TIMEOUT, cfg.getDistributedConnectionTimeout());\n    }\n    httpRequestExecutor = new InstrumentedHttpRequestExecutor();\n    client = HttpClientUtil.createClient(clientParams, clientConnectionManager, false, httpRequestExecutor);\n\n    // following is done only for logging complete configuration.\n    // The maxConnections and maxConnectionsPerHost have already been specified on the connection manager\n    if (cfg != null)  {\n      clientParams.set(HttpClientUtil.PROP_MAX_CONNECTIONS, cfg.getMaxUpdateConnections());\n      clientParams.set(HttpClientUtil.PROP_MAX_CONNECTIONS_PER_HOST, cfg.getMaxUpdateConnectionsPerHost());\n    }\n    log.debug(\"Created UpdateShardHandler HTTP client with params: {}\", clientParams);\n  }\n\n","sourceOld":"  public UpdateShardHandler(UpdateShardHandlerConfig cfg) {\n    clientConnectionManager = new PoolingHttpClientConnectionManager(HttpClientUtil.getSchemaRegisteryProvider().getSchemaRegistry());\n    if (cfg != null ) {\n      clientConnectionManager.setMaxTotal(cfg.getMaxUpdateConnections());\n      clientConnectionManager.setDefaultMaxPerRoute(cfg.getMaxUpdateConnectionsPerHost());\n    }\n\n    ModifiableSolrParams clientParams = new ModifiableSolrParams();\n    if (cfg != null)  {\n      clientParams.set(HttpClientUtil.PROP_SO_TIMEOUT, cfg.getDistributedSocketTimeout());\n      clientParams.set(HttpClientUtil.PROP_CONNECTION_TIMEOUT, cfg.getDistributedConnectionTimeout());\n    }\n    client = HttpClientUtil.createClient(clientParams, clientConnectionManager);\n\n    // following is done only for logging complete configuration.\n    // The maxConnections and maxConnectionsPerHost have already been specified on the connection manager\n    if (cfg != null)  {\n      clientParams.set(HttpClientUtil.PROP_MAX_CONNECTIONS, cfg.getMaxUpdateConnections());\n      clientParams.set(HttpClientUtil.PROP_MAX_CONNECTIONS_PER_HOST, cfg.getMaxUpdateConnectionsPerHost());\n    }\n    log.debug(\"Created UpdateShardHandler HTTP client with params: {}\", clientParams);\n  }\n\n","bugFix":null,"bugIntro":["3646ead588297558973dbd1162e69791e822b944"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f03e4bed5023ec3ef93a771b8888cae991cf448d","date":1483469262,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateShardHandler#UpdateShardHandler(UpdateShardHandlerConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateShardHandler#UpdateShardHandler(UpdateShardHandlerConfig).mjava","sourceNew":"  public UpdateShardHandler(UpdateShardHandlerConfig cfg) {\n    clientConnectionManager = new InstrumentedPoolingHttpClientConnectionManager(HttpClientUtil.getSchemaRegisteryProvider().getSchemaRegistry());\n    if (cfg != null ) {\n      clientConnectionManager.setMaxTotal(cfg.getMaxUpdateConnections());\n      clientConnectionManager.setDefaultMaxPerRoute(cfg.getMaxUpdateConnectionsPerHost());\n    }\n\n    ModifiableSolrParams clientParams = new ModifiableSolrParams();\n    if (cfg != null)  {\n      clientParams.set(HttpClientUtil.PROP_SO_TIMEOUT, cfg.getDistributedSocketTimeout());\n      clientParams.set(HttpClientUtil.PROP_CONNECTION_TIMEOUT, cfg.getDistributedConnectionTimeout());\n    }\n    httpRequestExecutor = new InstrumentedHttpRequestExecutor();\n    client = HttpClientUtil.createClient(clientParams, clientConnectionManager, false, httpRequestExecutor);\n\n    // following is done only for logging complete configuration.\n    // The maxConnections and maxConnectionsPerHost have already been specified on the connection manager\n    if (cfg != null)  {\n      clientParams.set(HttpClientUtil.PROP_MAX_CONNECTIONS, cfg.getMaxUpdateConnections());\n      clientParams.set(HttpClientUtil.PROP_MAX_CONNECTIONS_PER_HOST, cfg.getMaxUpdateConnectionsPerHost());\n    }\n    log.debug(\"Created UpdateShardHandler HTTP client with params: {}\", clientParams);\n  }\n\n","sourceOld":"  public UpdateShardHandler(UpdateShardHandlerConfig cfg) {\n    clientConnectionManager = new PoolingHttpClientConnectionManager(HttpClientUtil.getSchemaRegisteryProvider().getSchemaRegistry());\n    if (cfg != null ) {\n      clientConnectionManager.setMaxTotal(cfg.getMaxUpdateConnections());\n      clientConnectionManager.setDefaultMaxPerRoute(cfg.getMaxUpdateConnectionsPerHost());\n    }\n\n    ModifiableSolrParams clientParams = new ModifiableSolrParams();\n    if (cfg != null)  {\n      clientParams.set(HttpClientUtil.PROP_SO_TIMEOUT, cfg.getDistributedSocketTimeout());\n      clientParams.set(HttpClientUtil.PROP_CONNECTION_TIMEOUT, cfg.getDistributedConnectionTimeout());\n    }\n    client = HttpClientUtil.createClient(clientParams, clientConnectionManager);\n\n    // following is done only for logging complete configuration.\n    // The maxConnections and maxConnectionsPerHost have already been specified on the connection manager\n    if (cfg != null)  {\n      clientParams.set(HttpClientUtil.PROP_MAX_CONNECTIONS, cfg.getMaxUpdateConnections());\n      clientParams.set(HttpClientUtil.PROP_MAX_CONNECTIONS_PER_HOST, cfg.getMaxUpdateConnectionsPerHost());\n    }\n    log.debug(\"Created UpdateShardHandler HTTP client with params: {}\", clientParams);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fc0351e5a64998aa87ebea3be11fca66075eb1b0","date":1484206200,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateShardHandler#UpdateShardHandler(UpdateShardHandlerConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateShardHandler#UpdateShardHandler(UpdateShardHandlerConfig).mjava","sourceNew":"  public UpdateShardHandler(UpdateShardHandlerConfig cfg) {\n    clientConnectionManager = new InstrumentedPoolingHttpClientConnectionManager(HttpClientUtil.getSchemaRegisteryProvider().getSchemaRegistry());\n    if (cfg != null ) {\n      clientConnectionManager.setMaxTotal(cfg.getMaxUpdateConnections());\n      clientConnectionManager.setDefaultMaxPerRoute(cfg.getMaxUpdateConnectionsPerHost());\n    }\n\n    ModifiableSolrParams clientParams = new ModifiableSolrParams();\n    if (cfg != null)  {\n      clientParams.set(HttpClientUtil.PROP_SO_TIMEOUT, cfg.getDistributedSocketTimeout());\n      clientParams.set(HttpClientUtil.PROP_CONNECTION_TIMEOUT, cfg.getDistributedConnectionTimeout());\n    }\n    HttpClientMetricNameStrategy metricNameStrategy = KNOWN_METRIC_NAME_STRATEGIES.get(UpdateShardHandlerConfig.DEFAULT_METRICNAMESTRATEGY);\n    if (cfg != null)  {\n      metricNameStrategy = KNOWN_METRIC_NAME_STRATEGIES.get(cfg.getMetricNameStrategy());\n      if (metricNameStrategy == null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unknown metricNameStrategy: \" + cfg.getMetricNameStrategy() + \" found. Must be one of: \" + KNOWN_METRIC_NAME_STRATEGIES.keySet());\n      }\n    }\n\n    httpRequestExecutor = new InstrumentedHttpRequestExecutor(metricNameStrategy);\n    client = HttpClientUtil.createClient(clientParams, clientConnectionManager, false, httpRequestExecutor);\n\n    // following is done only for logging complete configuration.\n    // The maxConnections and maxConnectionsPerHost have already been specified on the connection manager\n    if (cfg != null)  {\n      clientParams.set(HttpClientUtil.PROP_MAX_CONNECTIONS, cfg.getMaxUpdateConnections());\n      clientParams.set(HttpClientUtil.PROP_MAX_CONNECTIONS_PER_HOST, cfg.getMaxUpdateConnectionsPerHost());\n    }\n    log.debug(\"Created UpdateShardHandler HTTP client with params: {}\", clientParams);\n  }\n\n","sourceOld":"  public UpdateShardHandler(UpdateShardHandlerConfig cfg) {\n    clientConnectionManager = new InstrumentedPoolingHttpClientConnectionManager(HttpClientUtil.getSchemaRegisteryProvider().getSchemaRegistry());\n    if (cfg != null ) {\n      clientConnectionManager.setMaxTotal(cfg.getMaxUpdateConnections());\n      clientConnectionManager.setDefaultMaxPerRoute(cfg.getMaxUpdateConnectionsPerHost());\n    }\n\n    ModifiableSolrParams clientParams = new ModifiableSolrParams();\n    if (cfg != null)  {\n      clientParams.set(HttpClientUtil.PROP_SO_TIMEOUT, cfg.getDistributedSocketTimeout());\n      clientParams.set(HttpClientUtil.PROP_CONNECTION_TIMEOUT, cfg.getDistributedConnectionTimeout());\n    }\n    httpRequestExecutor = new InstrumentedHttpRequestExecutor();\n    client = HttpClientUtil.createClient(clientParams, clientConnectionManager, false, httpRequestExecutor);\n\n    // following is done only for logging complete configuration.\n    // The maxConnections and maxConnectionsPerHost have already been specified on the connection manager\n    if (cfg != null)  {\n      clientParams.set(HttpClientUtil.PROP_MAX_CONNECTIONS, cfg.getMaxUpdateConnections());\n      clientParams.set(HttpClientUtil.PROP_MAX_CONNECTIONS_PER_HOST, cfg.getMaxUpdateConnectionsPerHost());\n    }\n    log.debug(\"Created UpdateShardHandler HTTP client with params: {}\", clientParams);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","date":1484239864,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateShardHandler#UpdateShardHandler(UpdateShardHandlerConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateShardHandler#UpdateShardHandler(UpdateShardHandlerConfig).mjava","sourceNew":"  public UpdateShardHandler(UpdateShardHandlerConfig cfg) {\n    clientConnectionManager = new InstrumentedPoolingHttpClientConnectionManager(HttpClientUtil.getSchemaRegisteryProvider().getSchemaRegistry());\n    if (cfg != null ) {\n      clientConnectionManager.setMaxTotal(cfg.getMaxUpdateConnections());\n      clientConnectionManager.setDefaultMaxPerRoute(cfg.getMaxUpdateConnectionsPerHost());\n    }\n\n    ModifiableSolrParams clientParams = new ModifiableSolrParams();\n    if (cfg != null)  {\n      clientParams.set(HttpClientUtil.PROP_SO_TIMEOUT, cfg.getDistributedSocketTimeout());\n      clientParams.set(HttpClientUtil.PROP_CONNECTION_TIMEOUT, cfg.getDistributedConnectionTimeout());\n    }\n    HttpClientMetricNameStrategy metricNameStrategy = KNOWN_METRIC_NAME_STRATEGIES.get(UpdateShardHandlerConfig.DEFAULT_METRICNAMESTRATEGY);\n    if (cfg != null)  {\n      metricNameStrategy = KNOWN_METRIC_NAME_STRATEGIES.get(cfg.getMetricNameStrategy());\n      if (metricNameStrategy == null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unknown metricNameStrategy: \" + cfg.getMetricNameStrategy() + \" found. Must be one of: \" + KNOWN_METRIC_NAME_STRATEGIES.keySet());\n      }\n    }\n\n    httpRequestExecutor = new InstrumentedHttpRequestExecutor(metricNameStrategy);\n    client = HttpClientUtil.createClient(clientParams, clientConnectionManager, false, httpRequestExecutor);\n\n    // following is done only for logging complete configuration.\n    // The maxConnections and maxConnectionsPerHost have already been specified on the connection manager\n    if (cfg != null)  {\n      clientParams.set(HttpClientUtil.PROP_MAX_CONNECTIONS, cfg.getMaxUpdateConnections());\n      clientParams.set(HttpClientUtil.PROP_MAX_CONNECTIONS_PER_HOST, cfg.getMaxUpdateConnectionsPerHost());\n    }\n    log.debug(\"Created UpdateShardHandler HTTP client with params: {}\", clientParams);\n  }\n\n","sourceOld":"  public UpdateShardHandler(UpdateShardHandlerConfig cfg) {\n    clientConnectionManager = new InstrumentedPoolingHttpClientConnectionManager(HttpClientUtil.getSchemaRegisteryProvider().getSchemaRegistry());\n    if (cfg != null ) {\n      clientConnectionManager.setMaxTotal(cfg.getMaxUpdateConnections());\n      clientConnectionManager.setDefaultMaxPerRoute(cfg.getMaxUpdateConnectionsPerHost());\n    }\n\n    ModifiableSolrParams clientParams = new ModifiableSolrParams();\n    if (cfg != null)  {\n      clientParams.set(HttpClientUtil.PROP_SO_TIMEOUT, cfg.getDistributedSocketTimeout());\n      clientParams.set(HttpClientUtil.PROP_CONNECTION_TIMEOUT, cfg.getDistributedConnectionTimeout());\n    }\n    httpRequestExecutor = new InstrumentedHttpRequestExecutor();\n    client = HttpClientUtil.createClient(clientParams, clientConnectionManager, false, httpRequestExecutor);\n\n    // following is done only for logging complete configuration.\n    // The maxConnections and maxConnectionsPerHost have already been specified on the connection manager\n    if (cfg != null)  {\n      clientParams.set(HttpClientUtil.PROP_MAX_CONNECTIONS, cfg.getMaxUpdateConnections());\n      clientParams.set(HttpClientUtil.PROP_MAX_CONNECTIONS_PER_HOST, cfg.getMaxUpdateConnectionsPerHost());\n    }\n    log.debug(\"Created UpdateShardHandler HTTP client with params: {}\", clientParams);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"40c3e653c3daffe5784c647ee85d0fcb16639d5a","date":1492147999,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateShardHandler#UpdateShardHandler(UpdateShardHandlerConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateShardHandler#UpdateShardHandler(UpdateShardHandlerConfig).mjava","sourceNew":"  public UpdateShardHandler(UpdateShardHandlerConfig cfg) {\n    clientConnectionManager = new InstrumentedPoolingHttpClientConnectionManager(HttpClientUtil.getSchemaRegisteryProvider().getSchemaRegistry());\n    if (cfg != null ) {\n      clientConnectionManager.setMaxTotal(cfg.getMaxUpdateConnections());\n      clientConnectionManager.setDefaultMaxPerRoute(cfg.getMaxUpdateConnectionsPerHost());\n    }\n\n    ModifiableSolrParams clientParams = new ModifiableSolrParams();\n    if (cfg != null)  {\n      clientParams.set(HttpClientUtil.PROP_SO_TIMEOUT, cfg.getDistributedSocketTimeout());\n      clientParams.set(HttpClientUtil.PROP_CONNECTION_TIMEOUT, cfg.getDistributedConnectionTimeout());\n    }\n    HttpClientMetricNameStrategy metricNameStrategy = KNOWN_METRIC_NAME_STRATEGIES.get(UpdateShardHandlerConfig.DEFAULT_METRICNAMESTRATEGY);\n    if (cfg != null)  {\n      metricNameStrategy = KNOWN_METRIC_NAME_STRATEGIES.get(cfg.getMetricNameStrategy());\n      if (metricNameStrategy == null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unknown metricNameStrategy: \" + cfg.getMetricNameStrategy() + \" found. Must be one of: \" + KNOWN_METRIC_NAME_STRATEGIES.keySet());\n      }\n    }\n\n    httpRequestExecutor = new InstrumentedHttpRequestExecutor(metricNameStrategy);\n    client = HttpClientUtil.createClient(clientParams, clientConnectionManager, false, httpRequestExecutor);\n\n    // following is done only for logging complete configuration.\n    // The maxConnections and maxConnectionsPerHost have already been specified on the connection manager\n    if (cfg != null)  {\n      clientParams.set(HttpClientUtil.PROP_MAX_CONNECTIONS, cfg.getMaxUpdateConnections());\n      clientParams.set(HttpClientUtil.PROP_MAX_CONNECTIONS_PER_HOST, cfg.getMaxUpdateConnectionsPerHost());\n    }\n    log.debug(\"Created UpdateShardHandler HTTP client with params: {}\", clientParams);\n\n    ThreadFactory recoveryThreadFactory = new SolrjNamedThreadFactory(\"recoveryExecutor\");\n    if (cfg != null && cfg.getMaxRecoveryThreads() > 0) {\n      log.debug(\"Creating recoveryExecutor with pool size {}\", cfg.getMaxRecoveryThreads());\n      recoveryExecutor = ExecutorUtil.newMDCAwareFixedThreadPool(cfg.getMaxRecoveryThreads(), recoveryThreadFactory);\n    } else {\n      log.debug(\"Creating recoveryExecutor with unbounded pool\");\n      recoveryExecutor = ExecutorUtil.newMDCAwareCachedThreadPool(recoveryThreadFactory);\n    }\n  }\n\n","sourceOld":"  public UpdateShardHandler(UpdateShardHandlerConfig cfg) {\n    clientConnectionManager = new InstrumentedPoolingHttpClientConnectionManager(HttpClientUtil.getSchemaRegisteryProvider().getSchemaRegistry());\n    if (cfg != null ) {\n      clientConnectionManager.setMaxTotal(cfg.getMaxUpdateConnections());\n      clientConnectionManager.setDefaultMaxPerRoute(cfg.getMaxUpdateConnectionsPerHost());\n    }\n\n    ModifiableSolrParams clientParams = new ModifiableSolrParams();\n    if (cfg != null)  {\n      clientParams.set(HttpClientUtil.PROP_SO_TIMEOUT, cfg.getDistributedSocketTimeout());\n      clientParams.set(HttpClientUtil.PROP_CONNECTION_TIMEOUT, cfg.getDistributedConnectionTimeout());\n    }\n    HttpClientMetricNameStrategy metricNameStrategy = KNOWN_METRIC_NAME_STRATEGIES.get(UpdateShardHandlerConfig.DEFAULT_METRICNAMESTRATEGY);\n    if (cfg != null)  {\n      metricNameStrategy = KNOWN_METRIC_NAME_STRATEGIES.get(cfg.getMetricNameStrategy());\n      if (metricNameStrategy == null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unknown metricNameStrategy: \" + cfg.getMetricNameStrategy() + \" found. Must be one of: \" + KNOWN_METRIC_NAME_STRATEGIES.keySet());\n      }\n    }\n\n    httpRequestExecutor = new InstrumentedHttpRequestExecutor(metricNameStrategy);\n    client = HttpClientUtil.createClient(clientParams, clientConnectionManager, false, httpRequestExecutor);\n\n    // following is done only for logging complete configuration.\n    // The maxConnections and maxConnectionsPerHost have already been specified on the connection manager\n    if (cfg != null)  {\n      clientParams.set(HttpClientUtil.PROP_MAX_CONNECTIONS, cfg.getMaxUpdateConnections());\n      clientParams.set(HttpClientUtil.PROP_MAX_CONNECTIONS_PER_HOST, cfg.getMaxUpdateConnectionsPerHost());\n    }\n    log.debug(\"Created UpdateShardHandler HTTP client with params: {}\", clientParams);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateShardHandler#UpdateShardHandler(UpdateShardHandlerConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateShardHandler#UpdateShardHandler(UpdateShardHandlerConfig).mjava","sourceNew":"  public UpdateShardHandler(UpdateShardHandlerConfig cfg) {\n    clientConnectionManager = new InstrumentedPoolingHttpClientConnectionManager(HttpClientUtil.getSchemaRegisteryProvider().getSchemaRegistry());\n    if (cfg != null ) {\n      clientConnectionManager.setMaxTotal(cfg.getMaxUpdateConnections());\n      clientConnectionManager.setDefaultMaxPerRoute(cfg.getMaxUpdateConnectionsPerHost());\n    }\n\n    ModifiableSolrParams clientParams = new ModifiableSolrParams();\n    if (cfg != null)  {\n      clientParams.set(HttpClientUtil.PROP_SO_TIMEOUT, cfg.getDistributedSocketTimeout());\n      clientParams.set(HttpClientUtil.PROP_CONNECTION_TIMEOUT, cfg.getDistributedConnectionTimeout());\n    }\n    HttpClientMetricNameStrategy metricNameStrategy = KNOWN_METRIC_NAME_STRATEGIES.get(UpdateShardHandlerConfig.DEFAULT_METRICNAMESTRATEGY);\n    if (cfg != null)  {\n      metricNameStrategy = KNOWN_METRIC_NAME_STRATEGIES.get(cfg.getMetricNameStrategy());\n      if (metricNameStrategy == null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unknown metricNameStrategy: \" + cfg.getMetricNameStrategy() + \" found. Must be one of: \" + KNOWN_METRIC_NAME_STRATEGIES.keySet());\n      }\n    }\n\n    httpRequestExecutor = new InstrumentedHttpRequestExecutor(metricNameStrategy);\n    client = HttpClientUtil.createClient(clientParams, clientConnectionManager, false, httpRequestExecutor);\n\n    // following is done only for logging complete configuration.\n    // The maxConnections and maxConnectionsPerHost have already been specified on the connection manager\n    if (cfg != null)  {\n      clientParams.set(HttpClientUtil.PROP_MAX_CONNECTIONS, cfg.getMaxUpdateConnections());\n      clientParams.set(HttpClientUtil.PROP_MAX_CONNECTIONS_PER_HOST, cfg.getMaxUpdateConnectionsPerHost());\n    }\n    log.debug(\"Created UpdateShardHandler HTTP client with params: {}\", clientParams);\n\n    ThreadFactory recoveryThreadFactory = new SolrjNamedThreadFactory(\"recoveryExecutor\");\n    if (cfg != null && cfg.getMaxRecoveryThreads() > 0) {\n      log.debug(\"Creating recoveryExecutor with pool size {}\", cfg.getMaxRecoveryThreads());\n      recoveryExecutor = ExecutorUtil.newMDCAwareFixedThreadPool(cfg.getMaxRecoveryThreads(), recoveryThreadFactory);\n    } else {\n      log.debug(\"Creating recoveryExecutor with unbounded pool\");\n      recoveryExecutor = ExecutorUtil.newMDCAwareCachedThreadPool(recoveryThreadFactory);\n    }\n  }\n\n","sourceOld":"  public UpdateShardHandler(UpdateShardHandlerConfig cfg) {\n    clientConnectionManager = new InstrumentedPoolingHttpClientConnectionManager(HttpClientUtil.getSchemaRegisteryProvider().getSchemaRegistry());\n    if (cfg != null ) {\n      clientConnectionManager.setMaxTotal(cfg.getMaxUpdateConnections());\n      clientConnectionManager.setDefaultMaxPerRoute(cfg.getMaxUpdateConnectionsPerHost());\n    }\n\n    ModifiableSolrParams clientParams = new ModifiableSolrParams();\n    if (cfg != null)  {\n      clientParams.set(HttpClientUtil.PROP_SO_TIMEOUT, cfg.getDistributedSocketTimeout());\n      clientParams.set(HttpClientUtil.PROP_CONNECTION_TIMEOUT, cfg.getDistributedConnectionTimeout());\n    }\n    HttpClientMetricNameStrategy metricNameStrategy = KNOWN_METRIC_NAME_STRATEGIES.get(UpdateShardHandlerConfig.DEFAULT_METRICNAMESTRATEGY);\n    if (cfg != null)  {\n      metricNameStrategy = KNOWN_METRIC_NAME_STRATEGIES.get(cfg.getMetricNameStrategy());\n      if (metricNameStrategy == null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unknown metricNameStrategy: \" + cfg.getMetricNameStrategy() + \" found. Must be one of: \" + KNOWN_METRIC_NAME_STRATEGIES.keySet());\n      }\n    }\n\n    httpRequestExecutor = new InstrumentedHttpRequestExecutor(metricNameStrategy);\n    client = HttpClientUtil.createClient(clientParams, clientConnectionManager, false, httpRequestExecutor);\n\n    // following is done only for logging complete configuration.\n    // The maxConnections and maxConnectionsPerHost have already been specified on the connection manager\n    if (cfg != null)  {\n      clientParams.set(HttpClientUtil.PROP_MAX_CONNECTIONS, cfg.getMaxUpdateConnections());\n      clientParams.set(HttpClientUtil.PROP_MAX_CONNECTIONS_PER_HOST, cfg.getMaxUpdateConnectionsPerHost());\n    }\n    log.debug(\"Created UpdateShardHandler HTTP client with params: {}\", clientParams);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3646ead588297558973dbd1162e69791e822b944","date":1525482176,"type":3,"author":"Mark Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateShardHandler#UpdateShardHandler(UpdateShardHandlerConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateShardHandler#UpdateShardHandler(UpdateShardHandlerConfig).mjava","sourceNew":"  public UpdateShardHandler(UpdateShardHandlerConfig cfg) {\n    updateOnlyConnectionManager = new InstrumentedPoolingHttpClientConnectionManager(HttpClientUtil.getSchemaRegisteryProvider().getSchemaRegistry());\n    defaultConnectionManager = new InstrumentedPoolingHttpClientConnectionManager(HttpClientUtil.getSchemaRegisteryProvider().getSchemaRegistry());\n    if (cfg != null ) {\n      updateOnlyConnectionManager.setMaxTotal(cfg.getMaxUpdateConnections());\n      updateOnlyConnectionManager.setDefaultMaxPerRoute(cfg.getMaxUpdateConnectionsPerHost());\n      defaultConnectionManager.setMaxTotal(cfg.getMaxUpdateConnections());\n      defaultConnectionManager.setDefaultMaxPerRoute(cfg.getMaxUpdateConnectionsPerHost());\n    }\n\n    ModifiableSolrParams clientParams = new ModifiableSolrParams();\n    if (cfg != null)  {\n      clientParams.set(HttpClientUtil.PROP_SO_TIMEOUT, cfg.getDistributedSocketTimeout());\n      clientParams.set(HttpClientUtil.PROP_CONNECTION_TIMEOUT, cfg.getDistributedConnectionTimeout());\n    }\n    HttpClientMetricNameStrategy metricNameStrategy = KNOWN_METRIC_NAME_STRATEGIES.get(UpdateShardHandlerConfig.DEFAULT_METRICNAMESTRATEGY);\n    if (cfg != null)  {\n      metricNameStrategy = KNOWN_METRIC_NAME_STRATEGIES.get(cfg.getMetricNameStrategy());\n      if (metricNameStrategy == null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unknown metricNameStrategy: \" + cfg.getMetricNameStrategy() + \" found. Must be one of: \" + KNOWN_METRIC_NAME_STRATEGIES.keySet());\n      }\n    }\n\n\n    httpRequestExecutor = new InstrumentedHttpRequestExecutor(metricNameStrategy);\n    updateOnlyClient = HttpClientUtil.createClient(clientParams, updateOnlyConnectionManager, false, httpRequestExecutor);\n    defaultClient = HttpClientUtil.createClient(clientParams, defaultConnectionManager, false, httpRequestExecutor);\n\n    // following is done only for logging complete configuration.\n    // The maxConnections and maxConnectionsPerHost have already been specified on the connection manager\n    if (cfg != null)  {\n      clientParams.set(HttpClientUtil.PROP_MAX_CONNECTIONS, cfg.getMaxUpdateConnections());\n      clientParams.set(HttpClientUtil.PROP_MAX_CONNECTIONS_PER_HOST, cfg.getMaxUpdateConnectionsPerHost());\n    }\n    log.debug(\"Created default UpdateShardHandler HTTP client with params: {}\", clientParams);\n    log.debug(\"Created update only UpdateShardHandler HTTP client with params: {}\", clientParams);\n\n    ThreadFactory recoveryThreadFactory = new SolrjNamedThreadFactory(\"recoveryExecutor\");\n    if (cfg != null && cfg.getMaxRecoveryThreads() > 0) {\n      log.debug(\"Creating recoveryExecutor with pool size {}\", cfg.getMaxRecoveryThreads());\n      recoveryExecutor = ExecutorUtil.newMDCAwareFixedThreadPool(cfg.getMaxRecoveryThreads(), recoveryThreadFactory);\n    } else {\n      log.debug(\"Creating recoveryExecutor with unbounded pool\");\n      recoveryExecutor = ExecutorUtil.newMDCAwareCachedThreadPool(recoveryThreadFactory);\n    }\n  }\n\n","sourceOld":"  public UpdateShardHandler(UpdateShardHandlerConfig cfg) {\n    clientConnectionManager = new InstrumentedPoolingHttpClientConnectionManager(HttpClientUtil.getSchemaRegisteryProvider().getSchemaRegistry());\n    if (cfg != null ) {\n      clientConnectionManager.setMaxTotal(cfg.getMaxUpdateConnections());\n      clientConnectionManager.setDefaultMaxPerRoute(cfg.getMaxUpdateConnectionsPerHost());\n    }\n\n    ModifiableSolrParams clientParams = new ModifiableSolrParams();\n    if (cfg != null)  {\n      clientParams.set(HttpClientUtil.PROP_SO_TIMEOUT, cfg.getDistributedSocketTimeout());\n      clientParams.set(HttpClientUtil.PROP_CONNECTION_TIMEOUT, cfg.getDistributedConnectionTimeout());\n    }\n    HttpClientMetricNameStrategy metricNameStrategy = KNOWN_METRIC_NAME_STRATEGIES.get(UpdateShardHandlerConfig.DEFAULT_METRICNAMESTRATEGY);\n    if (cfg != null)  {\n      metricNameStrategy = KNOWN_METRIC_NAME_STRATEGIES.get(cfg.getMetricNameStrategy());\n      if (metricNameStrategy == null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unknown metricNameStrategy: \" + cfg.getMetricNameStrategy() + \" found. Must be one of: \" + KNOWN_METRIC_NAME_STRATEGIES.keySet());\n      }\n    }\n\n    httpRequestExecutor = new InstrumentedHttpRequestExecutor(metricNameStrategy);\n    client = HttpClientUtil.createClient(clientParams, clientConnectionManager, false, httpRequestExecutor);\n\n    // following is done only for logging complete configuration.\n    // The maxConnections and maxConnectionsPerHost have already been specified on the connection manager\n    if (cfg != null)  {\n      clientParams.set(HttpClientUtil.PROP_MAX_CONNECTIONS, cfg.getMaxUpdateConnections());\n      clientParams.set(HttpClientUtil.PROP_MAX_CONNECTIONS_PER_HOST, cfg.getMaxUpdateConnectionsPerHost());\n    }\n    log.debug(\"Created UpdateShardHandler HTTP client with params: {}\", clientParams);\n\n    ThreadFactory recoveryThreadFactory = new SolrjNamedThreadFactory(\"recoveryExecutor\");\n    if (cfg != null && cfg.getMaxRecoveryThreads() > 0) {\n      log.debug(\"Creating recoveryExecutor with pool size {}\", cfg.getMaxRecoveryThreads());\n      recoveryExecutor = ExecutorUtil.newMDCAwareFixedThreadPool(cfg.getMaxRecoveryThreads(), recoveryThreadFactory);\n    } else {\n      log.debug(\"Creating recoveryExecutor with unbounded pool\");\n      recoveryExecutor = ExecutorUtil.newMDCAwareCachedThreadPool(recoveryThreadFactory);\n    }\n  }\n\n","bugFix":["7f0c8426396c925de8db3ed3f8ff40fd73670a5c","0ad7bdba3e91cf3373cda2e52239cb761fc0b452","16fa358573e3c2508728b3c7c438a8c19a3f0ae4"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a2e58c9eb8714e96373ecfded6d0bfc84ad1d93d","date":1527531709,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateShardHandler#UpdateShardHandler(UpdateShardHandlerConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateShardHandler#UpdateShardHandler(UpdateShardHandlerConfig).mjava","sourceNew":"  public UpdateShardHandler(UpdateShardHandlerConfig cfg) {\n    updateOnlyConnectionManager = new InstrumentedPoolingHttpClientConnectionManager(HttpClientUtil.getSchemaRegisteryProvider().getSchemaRegistry());\n    defaultConnectionManager = new InstrumentedPoolingHttpClientConnectionManager(HttpClientUtil.getSchemaRegisteryProvider().getSchemaRegistry());\n    if (cfg != null ) {\n      updateOnlyConnectionManager.setMaxTotal(cfg.getMaxUpdateConnections());\n      updateOnlyConnectionManager.setDefaultMaxPerRoute(cfg.getMaxUpdateConnectionsPerHost());\n      defaultConnectionManager.setMaxTotal(cfg.getMaxUpdateConnections());\n      defaultConnectionManager.setDefaultMaxPerRoute(cfg.getMaxUpdateConnectionsPerHost());\n    }\n\n    ModifiableSolrParams clientParams = new ModifiableSolrParams();\n    if (cfg != null)  {\n      clientParams.set(HttpClientUtil.PROP_SO_TIMEOUT, cfg.getDistributedSocketTimeout());\n      clientParams.set(HttpClientUtil.PROP_CONNECTION_TIMEOUT, cfg.getDistributedConnectionTimeout());\n      socketTimeout = cfg.getDistributedSocketTimeout();\n      connectionTimeout = cfg.getDistributedConnectionTimeout();\n    }\n    HttpClientMetricNameStrategy metricNameStrategy = KNOWN_METRIC_NAME_STRATEGIES.get(UpdateShardHandlerConfig.DEFAULT_METRICNAMESTRATEGY);\n    if (cfg != null)  {\n      metricNameStrategy = KNOWN_METRIC_NAME_STRATEGIES.get(cfg.getMetricNameStrategy());\n      if (metricNameStrategy == null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unknown metricNameStrategy: \" + cfg.getMetricNameStrategy() + \" found. Must be one of: \" + KNOWN_METRIC_NAME_STRATEGIES.keySet());\n      }\n    }\n\n\n    httpRequestExecutor = new InstrumentedHttpRequestExecutor(metricNameStrategy);\n    updateOnlyClient = HttpClientUtil.createClient(clientParams, updateOnlyConnectionManager, false, httpRequestExecutor);\n    defaultClient = HttpClientUtil.createClient(clientParams, defaultConnectionManager, false, httpRequestExecutor);\n\n    // following is done only for logging complete configuration.\n    // The maxConnections and maxConnectionsPerHost have already been specified on the connection manager\n    if (cfg != null)  {\n      clientParams.set(HttpClientUtil.PROP_MAX_CONNECTIONS, cfg.getMaxUpdateConnections());\n      clientParams.set(HttpClientUtil.PROP_MAX_CONNECTIONS_PER_HOST, cfg.getMaxUpdateConnectionsPerHost());\n    }\n    log.debug(\"Created default UpdateShardHandler HTTP client with params: {}\", clientParams);\n    log.debug(\"Created update only UpdateShardHandler HTTP client with params: {}\", clientParams);\n\n    ThreadFactory recoveryThreadFactory = new SolrjNamedThreadFactory(\"recoveryExecutor\");\n    if (cfg != null && cfg.getMaxRecoveryThreads() > 0) {\n      log.debug(\"Creating recoveryExecutor with pool size {}\", cfg.getMaxRecoveryThreads());\n      recoveryExecutor = ExecutorUtil.newMDCAwareFixedThreadPool(cfg.getMaxRecoveryThreads(), recoveryThreadFactory);\n    } else {\n      log.debug(\"Creating recoveryExecutor with unbounded pool\");\n      recoveryExecutor = ExecutorUtil.newMDCAwareCachedThreadPool(recoveryThreadFactory);\n    }\n  }\n\n","sourceOld":"  public UpdateShardHandler(UpdateShardHandlerConfig cfg) {\n    updateOnlyConnectionManager = new InstrumentedPoolingHttpClientConnectionManager(HttpClientUtil.getSchemaRegisteryProvider().getSchemaRegistry());\n    defaultConnectionManager = new InstrumentedPoolingHttpClientConnectionManager(HttpClientUtil.getSchemaRegisteryProvider().getSchemaRegistry());\n    if (cfg != null ) {\n      updateOnlyConnectionManager.setMaxTotal(cfg.getMaxUpdateConnections());\n      updateOnlyConnectionManager.setDefaultMaxPerRoute(cfg.getMaxUpdateConnectionsPerHost());\n      defaultConnectionManager.setMaxTotal(cfg.getMaxUpdateConnections());\n      defaultConnectionManager.setDefaultMaxPerRoute(cfg.getMaxUpdateConnectionsPerHost());\n    }\n\n    ModifiableSolrParams clientParams = new ModifiableSolrParams();\n    if (cfg != null)  {\n      clientParams.set(HttpClientUtil.PROP_SO_TIMEOUT, cfg.getDistributedSocketTimeout());\n      clientParams.set(HttpClientUtil.PROP_CONNECTION_TIMEOUT, cfg.getDistributedConnectionTimeout());\n    }\n    HttpClientMetricNameStrategy metricNameStrategy = KNOWN_METRIC_NAME_STRATEGIES.get(UpdateShardHandlerConfig.DEFAULT_METRICNAMESTRATEGY);\n    if (cfg != null)  {\n      metricNameStrategy = KNOWN_METRIC_NAME_STRATEGIES.get(cfg.getMetricNameStrategy());\n      if (metricNameStrategy == null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unknown metricNameStrategy: \" + cfg.getMetricNameStrategy() + \" found. Must be one of: \" + KNOWN_METRIC_NAME_STRATEGIES.keySet());\n      }\n    }\n\n\n    httpRequestExecutor = new InstrumentedHttpRequestExecutor(metricNameStrategy);\n    updateOnlyClient = HttpClientUtil.createClient(clientParams, updateOnlyConnectionManager, false, httpRequestExecutor);\n    defaultClient = HttpClientUtil.createClient(clientParams, defaultConnectionManager, false, httpRequestExecutor);\n\n    // following is done only for logging complete configuration.\n    // The maxConnections and maxConnectionsPerHost have already been specified on the connection manager\n    if (cfg != null)  {\n      clientParams.set(HttpClientUtil.PROP_MAX_CONNECTIONS, cfg.getMaxUpdateConnections());\n      clientParams.set(HttpClientUtil.PROP_MAX_CONNECTIONS_PER_HOST, cfg.getMaxUpdateConnectionsPerHost());\n    }\n    log.debug(\"Created default UpdateShardHandler HTTP client with params: {}\", clientParams);\n    log.debug(\"Created update only UpdateShardHandler HTTP client with params: {}\", clientParams);\n\n    ThreadFactory recoveryThreadFactory = new SolrjNamedThreadFactory(\"recoveryExecutor\");\n    if (cfg != null && cfg.getMaxRecoveryThreads() > 0) {\n      log.debug(\"Creating recoveryExecutor with pool size {}\", cfg.getMaxRecoveryThreads());\n      recoveryExecutor = ExecutorUtil.newMDCAwareFixedThreadPool(cfg.getMaxRecoveryThreads(), recoveryThreadFactory);\n    } else {\n      log.debug(\"Creating recoveryExecutor with unbounded pool\");\n      recoveryExecutor = ExecutorUtil.newMDCAwareCachedThreadPool(recoveryThreadFactory);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateShardHandler#UpdateShardHandler(UpdateShardHandlerConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateShardHandler#UpdateShardHandler(UpdateShardHandlerConfig).mjava","sourceNew":"  public UpdateShardHandler(UpdateShardHandlerConfig cfg) {\n    updateOnlyConnectionManager = new InstrumentedPoolingHttpClientConnectionManager(HttpClientUtil.getSchemaRegisteryProvider().getSchemaRegistry());\n    recoveryOnlyConnectionManager = new InstrumentedPoolingHttpClientConnectionManager(HttpClientUtil.getSchemaRegisteryProvider().getSchemaRegistry());\n    defaultConnectionManager = new InstrumentedPoolingHttpClientConnectionManager(HttpClientUtil.getSchemaRegisteryProvider().getSchemaRegistry());\n    if (cfg != null ) {\n      updateOnlyConnectionManager.setMaxTotal(cfg.getMaxUpdateConnections());\n      updateOnlyConnectionManager.setDefaultMaxPerRoute(cfg.getMaxUpdateConnectionsPerHost());\n      recoveryOnlyConnectionManager.setMaxTotal(cfg.getMaxUpdateConnections());\n      recoveryOnlyConnectionManager.setDefaultMaxPerRoute(cfg.getMaxUpdateConnectionsPerHost());\n      defaultConnectionManager.setMaxTotal(cfg.getMaxUpdateConnections());\n      defaultConnectionManager.setDefaultMaxPerRoute(cfg.getMaxUpdateConnectionsPerHost());\n    }\n\n    ModifiableSolrParams clientParams = new ModifiableSolrParams();\n    if (cfg != null)  {\n      clientParams.set(HttpClientUtil.PROP_SO_TIMEOUT, cfg.getDistributedSocketTimeout());\n      clientParams.set(HttpClientUtil.PROP_CONNECTION_TIMEOUT, cfg.getDistributedConnectionTimeout());\n      socketTimeout = cfg.getDistributedSocketTimeout();\n      connectionTimeout = cfg.getDistributedConnectionTimeout();\n    }\n    HttpClientMetricNameStrategy metricNameStrategy = KNOWN_METRIC_NAME_STRATEGIES.get(UpdateShardHandlerConfig.DEFAULT_METRICNAMESTRATEGY);\n    if (cfg != null)  {\n      metricNameStrategy = KNOWN_METRIC_NAME_STRATEGIES.get(cfg.getMetricNameStrategy());\n      if (metricNameStrategy == null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unknown metricNameStrategy: \" + cfg.getMetricNameStrategy() + \" found. Must be one of: \" + KNOWN_METRIC_NAME_STRATEGIES.keySet());\n      }\n    }\n\n\n    httpRequestExecutor = new InstrumentedHttpRequestExecutor(metricNameStrategy);\n    updateOnlyClient = HttpClientUtil.createClient(clientParams, updateOnlyConnectionManager, false, httpRequestExecutor);\n    recoveryOnlyClient = HttpClientUtil.createClient(clientParams, recoveryOnlyConnectionManager, false, httpRequestExecutor);\n    defaultClient = HttpClientUtil.createClient(clientParams, defaultConnectionManager, false, httpRequestExecutor);\n\n    // following is done only for logging complete configuration.\n    // The maxConnections and maxConnectionsPerHost have already been specified on the connection manager\n    if (cfg != null)  {\n      clientParams.set(HttpClientUtil.PROP_MAX_CONNECTIONS, cfg.getMaxUpdateConnections());\n      clientParams.set(HttpClientUtil.PROP_MAX_CONNECTIONS_PER_HOST, cfg.getMaxUpdateConnectionsPerHost());\n    }\n    log.debug(\"Created default UpdateShardHandler HTTP client with params: {}\", clientParams);\n    log.debug(\"Created update only UpdateShardHandler HTTP client with params: {}\", clientParams);\n\n    ThreadFactory recoveryThreadFactory = new SolrjNamedThreadFactory(\"recoveryExecutor\");\n    if (cfg != null && cfg.getMaxRecoveryThreads() > 0) {\n      log.debug(\"Creating recoveryExecutor with pool size {}\", cfg.getMaxRecoveryThreads());\n      recoveryExecutor = ExecutorUtil.newMDCAwareFixedThreadPool(cfg.getMaxRecoveryThreads(), recoveryThreadFactory);\n    } else {\n      log.debug(\"Creating recoveryExecutor with unbounded pool\");\n      recoveryExecutor = ExecutorUtil.newMDCAwareCachedThreadPool(recoveryThreadFactory);\n    }\n  }\n\n","sourceOld":"  public UpdateShardHandler(UpdateShardHandlerConfig cfg) {\n    updateOnlyConnectionManager = new InstrumentedPoolingHttpClientConnectionManager(HttpClientUtil.getSchemaRegisteryProvider().getSchemaRegistry());\n    defaultConnectionManager = new InstrumentedPoolingHttpClientConnectionManager(HttpClientUtil.getSchemaRegisteryProvider().getSchemaRegistry());\n    if (cfg != null ) {\n      updateOnlyConnectionManager.setMaxTotal(cfg.getMaxUpdateConnections());\n      updateOnlyConnectionManager.setDefaultMaxPerRoute(cfg.getMaxUpdateConnectionsPerHost());\n      defaultConnectionManager.setMaxTotal(cfg.getMaxUpdateConnections());\n      defaultConnectionManager.setDefaultMaxPerRoute(cfg.getMaxUpdateConnectionsPerHost());\n    }\n\n    ModifiableSolrParams clientParams = new ModifiableSolrParams();\n    if (cfg != null)  {\n      clientParams.set(HttpClientUtil.PROP_SO_TIMEOUT, cfg.getDistributedSocketTimeout());\n      clientParams.set(HttpClientUtil.PROP_CONNECTION_TIMEOUT, cfg.getDistributedConnectionTimeout());\n      socketTimeout = cfg.getDistributedSocketTimeout();\n      connectionTimeout = cfg.getDistributedConnectionTimeout();\n    }\n    HttpClientMetricNameStrategy metricNameStrategy = KNOWN_METRIC_NAME_STRATEGIES.get(UpdateShardHandlerConfig.DEFAULT_METRICNAMESTRATEGY);\n    if (cfg != null)  {\n      metricNameStrategy = KNOWN_METRIC_NAME_STRATEGIES.get(cfg.getMetricNameStrategy());\n      if (metricNameStrategy == null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unknown metricNameStrategy: \" + cfg.getMetricNameStrategy() + \" found. Must be one of: \" + KNOWN_METRIC_NAME_STRATEGIES.keySet());\n      }\n    }\n\n\n    httpRequestExecutor = new InstrumentedHttpRequestExecutor(metricNameStrategy);\n    updateOnlyClient = HttpClientUtil.createClient(clientParams, updateOnlyConnectionManager, false, httpRequestExecutor);\n    defaultClient = HttpClientUtil.createClient(clientParams, defaultConnectionManager, false, httpRequestExecutor);\n\n    // following is done only for logging complete configuration.\n    // The maxConnections and maxConnectionsPerHost have already been specified on the connection manager\n    if (cfg != null)  {\n      clientParams.set(HttpClientUtil.PROP_MAX_CONNECTIONS, cfg.getMaxUpdateConnections());\n      clientParams.set(HttpClientUtil.PROP_MAX_CONNECTIONS_PER_HOST, cfg.getMaxUpdateConnectionsPerHost());\n    }\n    log.debug(\"Created default UpdateShardHandler HTTP client with params: {}\", clientParams);\n    log.debug(\"Created update only UpdateShardHandler HTTP client with params: {}\", clientParams);\n\n    ThreadFactory recoveryThreadFactory = new SolrjNamedThreadFactory(\"recoveryExecutor\");\n    if (cfg != null && cfg.getMaxRecoveryThreads() > 0) {\n      log.debug(\"Creating recoveryExecutor with pool size {}\", cfg.getMaxRecoveryThreads());\n      recoveryExecutor = ExecutorUtil.newMDCAwareFixedThreadPool(cfg.getMaxRecoveryThreads(), recoveryThreadFactory);\n    } else {\n      log.debug(\"Creating recoveryExecutor with unbounded pool\");\n      recoveryExecutor = ExecutorUtil.newMDCAwareCachedThreadPool(recoveryThreadFactory);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a77e5e21cbd575a8240b0e3926164f15295f4e8","date":1544979500,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateShardHandler#UpdateShardHandler(UpdateShardHandlerConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateShardHandler#UpdateShardHandler(UpdateShardHandlerConfig).mjava","sourceNew":"  public UpdateShardHandler(UpdateShardHandlerConfig cfg) {\n    updateOnlyConnectionManager = new InstrumentedPoolingHttpClientConnectionManager(HttpClientUtil.getSchemaRegisteryProvider().getSchemaRegistry());\n    recoveryOnlyConnectionManager = new InstrumentedPoolingHttpClientConnectionManager(HttpClientUtil.getSchemaRegisteryProvider().getSchemaRegistry());\n    defaultConnectionManager = new InstrumentedPoolingHttpClientConnectionManager(HttpClientUtil.getSchemaRegisteryProvider().getSchemaRegistry());\n    ModifiableSolrParams clientParams = new ModifiableSolrParams();\n    if (cfg != null ) {\n      updateOnlyConnectionManager.setMaxTotal(cfg.getMaxUpdateConnections());\n      updateOnlyConnectionManager.setDefaultMaxPerRoute(cfg.getMaxUpdateConnectionsPerHost());\n      recoveryOnlyConnectionManager.setMaxTotal(cfg.getMaxUpdateConnections());\n      recoveryOnlyConnectionManager.setDefaultMaxPerRoute(cfg.getMaxUpdateConnectionsPerHost());\n      defaultConnectionManager.setMaxTotal(cfg.getMaxUpdateConnections());\n      defaultConnectionManager.setDefaultMaxPerRoute(cfg.getMaxUpdateConnectionsPerHost());\n      clientParams.set(HttpClientUtil.PROP_SO_TIMEOUT, cfg.getDistributedSocketTimeout());\n      clientParams.set(HttpClientUtil.PROP_CONNECTION_TIMEOUT, cfg.getDistributedConnectionTimeout());\n      // following is done only for logging complete configuration.\n      // The maxConnections and maxConnectionsPerHost have already been specified on the connection manager\n      clientParams.set(HttpClientUtil.PROP_MAX_CONNECTIONS, cfg.getMaxUpdateConnections());\n      clientParams.set(HttpClientUtil.PROP_MAX_CONNECTIONS_PER_HOST, cfg.getMaxUpdateConnectionsPerHost());\n      socketTimeout = cfg.getDistributedSocketTimeout();\n      connectionTimeout = cfg.getDistributedConnectionTimeout();\n    }\n    log.debug(\"Created default UpdateShardHandler HTTP client with params: {}\", clientParams);\n\n    httpRequestExecutor = new InstrumentedHttpRequestExecutor(getMetricNameStrategy(cfg));\n    updateHttpListenerFactory = new InstrumentedHttpListenerFactory(getNameStrategy(cfg));\n    recoveryOnlyClient = HttpClientUtil.createClient(clientParams, recoveryOnlyConnectionManager, false, httpRequestExecutor);\n    defaultClient = HttpClientUtil.createClient(clientParams, defaultConnectionManager, false, httpRequestExecutor);\n\n    Http2SolrClient.Builder updateOnlyClientBuilder = new Http2SolrClient.Builder();\n    if (cfg != null) {\n      updateOnlyClientBuilder\n          .connectionTimeout(cfg.getDistributedConnectionTimeout())\n          .idleTimeout(cfg.getDistributedSocketTimeout())\n          .maxConnectionsPerHost(cfg.getMaxUpdateConnectionsPerHost());\n    }\n    updateOnlyClient = updateOnlyClientBuilder.build();\n    updateOnlyClient.addListenerFactory(updateHttpListenerFactory);\n    Set<String> queryParams = new HashSet<>(2);\n    queryParams.add(DistributedUpdateProcessor.DISTRIB_FROM);\n    queryParams.add(DistributingUpdateProcessorFactory.DISTRIB_UPDATE_PARAM);\n    updateOnlyClient.setQueryParams(queryParams);\n\n    ThreadFactory recoveryThreadFactory = new SolrjNamedThreadFactory(\"recoveryExecutor\");\n    if (cfg != null && cfg.getMaxRecoveryThreads() > 0) {\n      log.debug(\"Creating recoveryExecutor with pool size {}\", cfg.getMaxRecoveryThreads());\n      recoveryExecutor = ExecutorUtil.newMDCAwareFixedThreadPool(cfg.getMaxRecoveryThreads(), recoveryThreadFactory);\n    } else {\n      log.debug(\"Creating recoveryExecutor with unbounded pool\");\n      recoveryExecutor = ExecutorUtil.newMDCAwareCachedThreadPool(recoveryThreadFactory);\n    }\n  }\n\n","sourceOld":"  public UpdateShardHandler(UpdateShardHandlerConfig cfg) {\n    updateOnlyConnectionManager = new InstrumentedPoolingHttpClientConnectionManager(HttpClientUtil.getSchemaRegisteryProvider().getSchemaRegistry());\n    recoveryOnlyConnectionManager = new InstrumentedPoolingHttpClientConnectionManager(HttpClientUtil.getSchemaRegisteryProvider().getSchemaRegistry());\n    defaultConnectionManager = new InstrumentedPoolingHttpClientConnectionManager(HttpClientUtil.getSchemaRegisteryProvider().getSchemaRegistry());\n    if (cfg != null ) {\n      updateOnlyConnectionManager.setMaxTotal(cfg.getMaxUpdateConnections());\n      updateOnlyConnectionManager.setDefaultMaxPerRoute(cfg.getMaxUpdateConnectionsPerHost());\n      recoveryOnlyConnectionManager.setMaxTotal(cfg.getMaxUpdateConnections());\n      recoveryOnlyConnectionManager.setDefaultMaxPerRoute(cfg.getMaxUpdateConnectionsPerHost());\n      defaultConnectionManager.setMaxTotal(cfg.getMaxUpdateConnections());\n      defaultConnectionManager.setDefaultMaxPerRoute(cfg.getMaxUpdateConnectionsPerHost());\n    }\n\n    ModifiableSolrParams clientParams = new ModifiableSolrParams();\n    if (cfg != null)  {\n      clientParams.set(HttpClientUtil.PROP_SO_TIMEOUT, cfg.getDistributedSocketTimeout());\n      clientParams.set(HttpClientUtil.PROP_CONNECTION_TIMEOUT, cfg.getDistributedConnectionTimeout());\n      socketTimeout = cfg.getDistributedSocketTimeout();\n      connectionTimeout = cfg.getDistributedConnectionTimeout();\n    }\n    HttpClientMetricNameStrategy metricNameStrategy = KNOWN_METRIC_NAME_STRATEGIES.get(UpdateShardHandlerConfig.DEFAULT_METRICNAMESTRATEGY);\n    if (cfg != null)  {\n      metricNameStrategy = KNOWN_METRIC_NAME_STRATEGIES.get(cfg.getMetricNameStrategy());\n      if (metricNameStrategy == null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unknown metricNameStrategy: \" + cfg.getMetricNameStrategy() + \" found. Must be one of: \" + KNOWN_METRIC_NAME_STRATEGIES.keySet());\n      }\n    }\n\n\n    httpRequestExecutor = new InstrumentedHttpRequestExecutor(metricNameStrategy);\n    updateOnlyClient = HttpClientUtil.createClient(clientParams, updateOnlyConnectionManager, false, httpRequestExecutor);\n    recoveryOnlyClient = HttpClientUtil.createClient(clientParams, recoveryOnlyConnectionManager, false, httpRequestExecutor);\n    defaultClient = HttpClientUtil.createClient(clientParams, defaultConnectionManager, false, httpRequestExecutor);\n\n    // following is done only for logging complete configuration.\n    // The maxConnections and maxConnectionsPerHost have already been specified on the connection manager\n    if (cfg != null)  {\n      clientParams.set(HttpClientUtil.PROP_MAX_CONNECTIONS, cfg.getMaxUpdateConnections());\n      clientParams.set(HttpClientUtil.PROP_MAX_CONNECTIONS_PER_HOST, cfg.getMaxUpdateConnectionsPerHost());\n    }\n    log.debug(\"Created default UpdateShardHandler HTTP client with params: {}\", clientParams);\n    log.debug(\"Created update only UpdateShardHandler HTTP client with params: {}\", clientParams);\n\n    ThreadFactory recoveryThreadFactory = new SolrjNamedThreadFactory(\"recoveryExecutor\");\n    if (cfg != null && cfg.getMaxRecoveryThreads() > 0) {\n      log.debug(\"Creating recoveryExecutor with pool size {}\", cfg.getMaxRecoveryThreads());\n      recoveryExecutor = ExecutorUtil.newMDCAwareFixedThreadPool(cfg.getMaxRecoveryThreads(), recoveryThreadFactory);\n    } else {\n      log.debug(\"Creating recoveryExecutor with unbounded pool\");\n      recoveryExecutor = ExecutorUtil.newMDCAwareCachedThreadPool(recoveryThreadFactory);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9e856e5ac973044540959acff90fa900278d2692","date":1585275350,"type":3,"author":"Andy Throgmorton","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateShardHandler#UpdateShardHandler(UpdateShardHandlerConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateShardHandler#UpdateShardHandler(UpdateShardHandlerConfig).mjava","sourceNew":"  public UpdateShardHandler(UpdateShardHandlerConfig cfg) {\n    updateOnlyConnectionManager = new InstrumentedPoolingHttpClientConnectionManager(HttpClientUtil.getSocketFactoryRegistryProvider().getSocketFactoryRegistry());\n    recoveryOnlyConnectionManager = new InstrumentedPoolingHttpClientConnectionManager(HttpClientUtil.getSocketFactoryRegistryProvider().getSocketFactoryRegistry());\n    defaultConnectionManager = new InstrumentedPoolingHttpClientConnectionManager(HttpClientUtil.getSocketFactoryRegistryProvider().getSocketFactoryRegistry());\n    ModifiableSolrParams clientParams = new ModifiableSolrParams();\n    if (cfg != null ) {\n      updateOnlyConnectionManager.setMaxTotal(cfg.getMaxUpdateConnections());\n      updateOnlyConnectionManager.setDefaultMaxPerRoute(cfg.getMaxUpdateConnectionsPerHost());\n      recoveryOnlyConnectionManager.setMaxTotal(cfg.getMaxUpdateConnections());\n      recoveryOnlyConnectionManager.setDefaultMaxPerRoute(cfg.getMaxUpdateConnectionsPerHost());\n      defaultConnectionManager.setMaxTotal(cfg.getMaxUpdateConnections());\n      defaultConnectionManager.setDefaultMaxPerRoute(cfg.getMaxUpdateConnectionsPerHost());\n      clientParams.set(HttpClientUtil.PROP_SO_TIMEOUT, cfg.getDistributedSocketTimeout());\n      clientParams.set(HttpClientUtil.PROP_CONNECTION_TIMEOUT, cfg.getDistributedConnectionTimeout());\n      // following is done only for logging complete configuration.\n      // The maxConnections and maxConnectionsPerHost have already been specified on the connection manager\n      clientParams.set(HttpClientUtil.PROP_MAX_CONNECTIONS, cfg.getMaxUpdateConnections());\n      clientParams.set(HttpClientUtil.PROP_MAX_CONNECTIONS_PER_HOST, cfg.getMaxUpdateConnectionsPerHost());\n      socketTimeout = cfg.getDistributedSocketTimeout();\n      connectionTimeout = cfg.getDistributedConnectionTimeout();\n    }\n    log.debug(\"Created default UpdateShardHandler HTTP client with params: {}\", clientParams);\n\n    httpRequestExecutor = new InstrumentedHttpRequestExecutor(getMetricNameStrategy(cfg));\n    updateHttpListenerFactory = new InstrumentedHttpListenerFactory(getNameStrategy(cfg));\n    recoveryOnlyClient = HttpClientUtil.createClient(clientParams, recoveryOnlyConnectionManager, false, httpRequestExecutor);\n    defaultClient = HttpClientUtil.createClient(clientParams, defaultConnectionManager, false, httpRequestExecutor);\n\n    Http2SolrClient.Builder updateOnlyClientBuilder = new Http2SolrClient.Builder();\n    if (cfg != null) {\n      updateOnlyClientBuilder\n          .connectionTimeout(cfg.getDistributedConnectionTimeout())\n          .idleTimeout(cfg.getDistributedSocketTimeout())\n          .maxConnectionsPerHost(cfg.getMaxUpdateConnectionsPerHost());\n    }\n    updateOnlyClient = updateOnlyClientBuilder.build();\n    updateOnlyClient.addListenerFactory(updateHttpListenerFactory);\n    Set<String> queryParams = new HashSet<>(2);\n    queryParams.add(DistributedUpdateProcessor.DISTRIB_FROM);\n    queryParams.add(DistributingUpdateProcessorFactory.DISTRIB_UPDATE_PARAM);\n    updateOnlyClient.setQueryParams(queryParams);\n\n    ThreadFactory recoveryThreadFactory = new SolrjNamedThreadFactory(\"recoveryExecutor\");\n    if (cfg != null && cfg.getMaxRecoveryThreads() > 0) {\n      log.debug(\"Creating recoveryExecutor with pool size {}\", cfg.getMaxRecoveryThreads());\n      recoveryExecutor = ExecutorUtil.newMDCAwareFixedThreadPool(cfg.getMaxRecoveryThreads(), recoveryThreadFactory);\n    } else {\n      log.debug(\"Creating recoveryExecutor with unbounded pool\");\n      recoveryExecutor = ExecutorUtil.newMDCAwareCachedThreadPool(recoveryThreadFactory);\n    }\n  }\n\n","sourceOld":"  public UpdateShardHandler(UpdateShardHandlerConfig cfg) {\n    updateOnlyConnectionManager = new InstrumentedPoolingHttpClientConnectionManager(HttpClientUtil.getSchemaRegisteryProvider().getSchemaRegistry());\n    recoveryOnlyConnectionManager = new InstrumentedPoolingHttpClientConnectionManager(HttpClientUtil.getSchemaRegisteryProvider().getSchemaRegistry());\n    defaultConnectionManager = new InstrumentedPoolingHttpClientConnectionManager(HttpClientUtil.getSchemaRegisteryProvider().getSchemaRegistry());\n    ModifiableSolrParams clientParams = new ModifiableSolrParams();\n    if (cfg != null ) {\n      updateOnlyConnectionManager.setMaxTotal(cfg.getMaxUpdateConnections());\n      updateOnlyConnectionManager.setDefaultMaxPerRoute(cfg.getMaxUpdateConnectionsPerHost());\n      recoveryOnlyConnectionManager.setMaxTotal(cfg.getMaxUpdateConnections());\n      recoveryOnlyConnectionManager.setDefaultMaxPerRoute(cfg.getMaxUpdateConnectionsPerHost());\n      defaultConnectionManager.setMaxTotal(cfg.getMaxUpdateConnections());\n      defaultConnectionManager.setDefaultMaxPerRoute(cfg.getMaxUpdateConnectionsPerHost());\n      clientParams.set(HttpClientUtil.PROP_SO_TIMEOUT, cfg.getDistributedSocketTimeout());\n      clientParams.set(HttpClientUtil.PROP_CONNECTION_TIMEOUT, cfg.getDistributedConnectionTimeout());\n      // following is done only for logging complete configuration.\n      // The maxConnections and maxConnectionsPerHost have already been specified on the connection manager\n      clientParams.set(HttpClientUtil.PROP_MAX_CONNECTIONS, cfg.getMaxUpdateConnections());\n      clientParams.set(HttpClientUtil.PROP_MAX_CONNECTIONS_PER_HOST, cfg.getMaxUpdateConnectionsPerHost());\n      socketTimeout = cfg.getDistributedSocketTimeout();\n      connectionTimeout = cfg.getDistributedConnectionTimeout();\n    }\n    log.debug(\"Created default UpdateShardHandler HTTP client with params: {}\", clientParams);\n\n    httpRequestExecutor = new InstrumentedHttpRequestExecutor(getMetricNameStrategy(cfg));\n    updateHttpListenerFactory = new InstrumentedHttpListenerFactory(getNameStrategy(cfg));\n    recoveryOnlyClient = HttpClientUtil.createClient(clientParams, recoveryOnlyConnectionManager, false, httpRequestExecutor);\n    defaultClient = HttpClientUtil.createClient(clientParams, defaultConnectionManager, false, httpRequestExecutor);\n\n    Http2SolrClient.Builder updateOnlyClientBuilder = new Http2SolrClient.Builder();\n    if (cfg != null) {\n      updateOnlyClientBuilder\n          .connectionTimeout(cfg.getDistributedConnectionTimeout())\n          .idleTimeout(cfg.getDistributedSocketTimeout())\n          .maxConnectionsPerHost(cfg.getMaxUpdateConnectionsPerHost());\n    }\n    updateOnlyClient = updateOnlyClientBuilder.build();\n    updateOnlyClient.addListenerFactory(updateHttpListenerFactory);\n    Set<String> queryParams = new HashSet<>(2);\n    queryParams.add(DistributedUpdateProcessor.DISTRIB_FROM);\n    queryParams.add(DistributingUpdateProcessorFactory.DISTRIB_UPDATE_PARAM);\n    updateOnlyClient.setQueryParams(queryParams);\n\n    ThreadFactory recoveryThreadFactory = new SolrjNamedThreadFactory(\"recoveryExecutor\");\n    if (cfg != null && cfg.getMaxRecoveryThreads() > 0) {\n      log.debug(\"Creating recoveryExecutor with pool size {}\", cfg.getMaxRecoveryThreads());\n      recoveryExecutor = ExecutorUtil.newMDCAwareFixedThreadPool(cfg.getMaxRecoveryThreads(), recoveryThreadFactory);\n    } else {\n      log.debug(\"Creating recoveryExecutor with unbounded pool\");\n      recoveryExecutor = ExecutorUtil.newMDCAwareCachedThreadPool(recoveryThreadFactory);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb03700c9690d16b15fb4f56f6ec36b128fd894e","date":1586745995,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateShardHandler#UpdateShardHandler(UpdateShardHandlerConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateShardHandler#UpdateShardHandler(UpdateShardHandlerConfig).mjava","sourceNew":"  public UpdateShardHandler(UpdateShardHandlerConfig cfg) {\n    updateOnlyConnectionManager = new InstrumentedPoolingHttpClientConnectionManager(HttpClientUtil.getSocketFactoryRegistryProvider().getSocketFactoryRegistry());\n    recoveryOnlyConnectionManager = new InstrumentedPoolingHttpClientConnectionManager(HttpClientUtil.getSocketFactoryRegistryProvider().getSocketFactoryRegistry());\n    defaultConnectionManager = new InstrumentedPoolingHttpClientConnectionManager(HttpClientUtil.getSocketFactoryRegistryProvider().getSocketFactoryRegistry());\n    ModifiableSolrParams clientParams = new ModifiableSolrParams();\n    if (cfg != null ) {\n      updateOnlyConnectionManager.setMaxTotal(cfg.getMaxUpdateConnections());\n      updateOnlyConnectionManager.setDefaultMaxPerRoute(cfg.getMaxUpdateConnectionsPerHost());\n      recoveryOnlyConnectionManager.setMaxTotal(cfg.getMaxUpdateConnections());\n      recoveryOnlyConnectionManager.setDefaultMaxPerRoute(cfg.getMaxUpdateConnectionsPerHost());\n      defaultConnectionManager.setMaxTotal(cfg.getMaxUpdateConnections());\n      defaultConnectionManager.setDefaultMaxPerRoute(cfg.getMaxUpdateConnectionsPerHost());\n      clientParams.set(HttpClientUtil.PROP_SO_TIMEOUT, cfg.getDistributedSocketTimeout());\n      clientParams.set(HttpClientUtil.PROP_CONNECTION_TIMEOUT, cfg.getDistributedConnectionTimeout());\n      // following is done only for logging complete configuration.\n      // The maxConnections and maxConnectionsPerHost have already been specified on the connection manager\n      clientParams.set(HttpClientUtil.PROP_MAX_CONNECTIONS, cfg.getMaxUpdateConnections());\n      clientParams.set(HttpClientUtil.PROP_MAX_CONNECTIONS_PER_HOST, cfg.getMaxUpdateConnectionsPerHost());\n      socketTimeout = cfg.getDistributedSocketTimeout();\n      connectionTimeout = cfg.getDistributedConnectionTimeout();\n    }\n    log.debug(\"Created default UpdateShardHandler HTTP client with params: {}\", clientParams);\n\n    httpRequestExecutor = new InstrumentedHttpRequestExecutor(getMetricNameStrategy(cfg));\n    updateHttpListenerFactory = new InstrumentedHttpListenerFactory(getNameStrategy(cfg));\n    recoveryOnlyClient = HttpClientUtil.createClient(clientParams, recoveryOnlyConnectionManager, false, httpRequestExecutor);\n    defaultClient = HttpClientUtil.createClient(clientParams, defaultConnectionManager, false, httpRequestExecutor);\n\n    Http2SolrClient.Builder updateOnlyClientBuilder = new Http2SolrClient.Builder();\n    if (cfg != null) {\n      updateOnlyClientBuilder\n          .connectionTimeout(cfg.getDistributedConnectionTimeout())\n          .idleTimeout(cfg.getDistributedSocketTimeout())\n          .maxConnectionsPerHost(cfg.getMaxUpdateConnectionsPerHost());\n    }\n    updateOnlyClient = updateOnlyClientBuilder.build();\n    updateOnlyClient.addListenerFactory(updateHttpListenerFactory);\n    Set<String> queryParams = new HashSet<>(2);\n    queryParams.add(DistributedUpdateProcessor.DISTRIB_FROM);\n    queryParams.add(DistributingUpdateProcessorFactory.DISTRIB_UPDATE_PARAM);\n    updateOnlyClient.setQueryParams(queryParams);\n\n    ThreadFactory recoveryThreadFactory = new SolrNamedThreadFactory(\"recoveryExecutor\");\n    if (cfg != null && cfg.getMaxRecoveryThreads() > 0) {\n      log.debug(\"Creating recoveryExecutor with pool size {}\", cfg.getMaxRecoveryThreads());\n      recoveryExecutor = ExecutorUtil.newMDCAwareFixedThreadPool(cfg.getMaxRecoveryThreads(), recoveryThreadFactory);\n    } else {\n      log.debug(\"Creating recoveryExecutor with unbounded pool\");\n      recoveryExecutor = ExecutorUtil.newMDCAwareCachedThreadPool(recoveryThreadFactory);\n    }\n  }\n\n","sourceOld":"  public UpdateShardHandler(UpdateShardHandlerConfig cfg) {\n    updateOnlyConnectionManager = new InstrumentedPoolingHttpClientConnectionManager(HttpClientUtil.getSocketFactoryRegistryProvider().getSocketFactoryRegistry());\n    recoveryOnlyConnectionManager = new InstrumentedPoolingHttpClientConnectionManager(HttpClientUtil.getSocketFactoryRegistryProvider().getSocketFactoryRegistry());\n    defaultConnectionManager = new InstrumentedPoolingHttpClientConnectionManager(HttpClientUtil.getSocketFactoryRegistryProvider().getSocketFactoryRegistry());\n    ModifiableSolrParams clientParams = new ModifiableSolrParams();\n    if (cfg != null ) {\n      updateOnlyConnectionManager.setMaxTotal(cfg.getMaxUpdateConnections());\n      updateOnlyConnectionManager.setDefaultMaxPerRoute(cfg.getMaxUpdateConnectionsPerHost());\n      recoveryOnlyConnectionManager.setMaxTotal(cfg.getMaxUpdateConnections());\n      recoveryOnlyConnectionManager.setDefaultMaxPerRoute(cfg.getMaxUpdateConnectionsPerHost());\n      defaultConnectionManager.setMaxTotal(cfg.getMaxUpdateConnections());\n      defaultConnectionManager.setDefaultMaxPerRoute(cfg.getMaxUpdateConnectionsPerHost());\n      clientParams.set(HttpClientUtil.PROP_SO_TIMEOUT, cfg.getDistributedSocketTimeout());\n      clientParams.set(HttpClientUtil.PROP_CONNECTION_TIMEOUT, cfg.getDistributedConnectionTimeout());\n      // following is done only for logging complete configuration.\n      // The maxConnections and maxConnectionsPerHost have already been specified on the connection manager\n      clientParams.set(HttpClientUtil.PROP_MAX_CONNECTIONS, cfg.getMaxUpdateConnections());\n      clientParams.set(HttpClientUtil.PROP_MAX_CONNECTIONS_PER_HOST, cfg.getMaxUpdateConnectionsPerHost());\n      socketTimeout = cfg.getDistributedSocketTimeout();\n      connectionTimeout = cfg.getDistributedConnectionTimeout();\n    }\n    log.debug(\"Created default UpdateShardHandler HTTP client with params: {}\", clientParams);\n\n    httpRequestExecutor = new InstrumentedHttpRequestExecutor(getMetricNameStrategy(cfg));\n    updateHttpListenerFactory = new InstrumentedHttpListenerFactory(getNameStrategy(cfg));\n    recoveryOnlyClient = HttpClientUtil.createClient(clientParams, recoveryOnlyConnectionManager, false, httpRequestExecutor);\n    defaultClient = HttpClientUtil.createClient(clientParams, defaultConnectionManager, false, httpRequestExecutor);\n\n    Http2SolrClient.Builder updateOnlyClientBuilder = new Http2SolrClient.Builder();\n    if (cfg != null) {\n      updateOnlyClientBuilder\n          .connectionTimeout(cfg.getDistributedConnectionTimeout())\n          .idleTimeout(cfg.getDistributedSocketTimeout())\n          .maxConnectionsPerHost(cfg.getMaxUpdateConnectionsPerHost());\n    }\n    updateOnlyClient = updateOnlyClientBuilder.build();\n    updateOnlyClient.addListenerFactory(updateHttpListenerFactory);\n    Set<String> queryParams = new HashSet<>(2);\n    queryParams.add(DistributedUpdateProcessor.DISTRIB_FROM);\n    queryParams.add(DistributingUpdateProcessorFactory.DISTRIB_UPDATE_PARAM);\n    updateOnlyClient.setQueryParams(queryParams);\n\n    ThreadFactory recoveryThreadFactory = new SolrjNamedThreadFactory(\"recoveryExecutor\");\n    if (cfg != null && cfg.getMaxRecoveryThreads() > 0) {\n      log.debug(\"Creating recoveryExecutor with pool size {}\", cfg.getMaxRecoveryThreads());\n      recoveryExecutor = ExecutorUtil.newMDCAwareFixedThreadPool(cfg.getMaxRecoveryThreads(), recoveryThreadFactory);\n    } else {\n      log.debug(\"Creating recoveryExecutor with unbounded pool\");\n      recoveryExecutor = ExecutorUtil.newMDCAwareCachedThreadPool(recoveryThreadFactory);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"740d649f013f07efbeb73ca854f106c60166e7c0","date":1587431295,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateShardHandler#UpdateShardHandler(UpdateShardHandlerConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateShardHandler#UpdateShardHandler(UpdateShardHandlerConfig).mjava","sourceNew":"  public UpdateShardHandler(UpdateShardHandlerConfig cfg) {\n    updateOnlyConnectionManager = new InstrumentedPoolingHttpClientConnectionManager(HttpClientUtil.getSocketFactoryRegistryProvider().getSocketFactoryRegistry());\n    recoveryOnlyConnectionManager = new InstrumentedPoolingHttpClientConnectionManager(HttpClientUtil.getSocketFactoryRegistryProvider().getSocketFactoryRegistry());\n    defaultConnectionManager = new InstrumentedPoolingHttpClientConnectionManager(HttpClientUtil.getSocketFactoryRegistryProvider().getSocketFactoryRegistry());\n    ModifiableSolrParams clientParams = new ModifiableSolrParams();\n    if (cfg != null ) {\n      updateOnlyConnectionManager.setMaxTotal(cfg.getMaxUpdateConnections());\n      updateOnlyConnectionManager.setDefaultMaxPerRoute(cfg.getMaxUpdateConnectionsPerHost());\n      recoveryOnlyConnectionManager.setMaxTotal(cfg.getMaxUpdateConnections());\n      recoveryOnlyConnectionManager.setDefaultMaxPerRoute(cfg.getMaxUpdateConnectionsPerHost());\n      defaultConnectionManager.setMaxTotal(cfg.getMaxUpdateConnections());\n      defaultConnectionManager.setDefaultMaxPerRoute(cfg.getMaxUpdateConnectionsPerHost());\n      clientParams.set(HttpClientUtil.PROP_SO_TIMEOUT, cfg.getDistributedSocketTimeout());\n      clientParams.set(HttpClientUtil.PROP_CONNECTION_TIMEOUT, cfg.getDistributedConnectionTimeout());\n      // following is done only for logging complete configuration.\n      // The maxConnections and maxConnectionsPerHost have already been specified on the connection manager\n      clientParams.set(HttpClientUtil.PROP_MAX_CONNECTIONS, cfg.getMaxUpdateConnections());\n      clientParams.set(HttpClientUtil.PROP_MAX_CONNECTIONS_PER_HOST, cfg.getMaxUpdateConnectionsPerHost());\n      socketTimeout = cfg.getDistributedSocketTimeout();\n      connectionTimeout = cfg.getDistributedConnectionTimeout();\n    }\n    log.debug(\"Created default UpdateShardHandler HTTP client with params: {}\", clientParams);\n\n    httpRequestExecutor = new InstrumentedHttpRequestExecutor(getMetricNameStrategy(cfg));\n    updateHttpListenerFactory = new InstrumentedHttpListenerFactory(getNameStrategy(cfg));\n    recoveryOnlyClient = HttpClientUtil.createClient(clientParams, recoveryOnlyConnectionManager, false, httpRequestExecutor);\n    defaultClient = HttpClientUtil.createClient(clientParams, defaultConnectionManager, false, httpRequestExecutor);\n\n    Http2SolrClient.Builder updateOnlyClientBuilder = new Http2SolrClient.Builder();\n    if (cfg != null) {\n      updateOnlyClientBuilder\n          .connectionTimeout(cfg.getDistributedConnectionTimeout())\n          .idleTimeout(cfg.getDistributedSocketTimeout())\n          .maxConnectionsPerHost(cfg.getMaxUpdateConnectionsPerHost());\n    }\n    updateOnlyClient = updateOnlyClientBuilder.build();\n    updateOnlyClient.addListenerFactory(updateHttpListenerFactory);\n    Set<String> queryParams = new HashSet<>(2);\n    queryParams.add(DistributedUpdateProcessor.DISTRIB_FROM);\n    queryParams.add(DistributingUpdateProcessorFactory.DISTRIB_UPDATE_PARAM);\n    updateOnlyClient.setQueryParams(queryParams);\n\n    ThreadFactory recoveryThreadFactory = new SolrNamedThreadFactory(\"recoveryExecutor\");\n    if (cfg != null && cfg.getMaxRecoveryThreads() > 0) {\n      if (log.isDebugEnabled()) {\n        log.debug(\"Creating recoveryExecutor with pool size {}\", cfg.getMaxRecoveryThreads());\n      }\n      recoveryExecutor = ExecutorUtil.newMDCAwareFixedThreadPool(cfg.getMaxRecoveryThreads(), recoveryThreadFactory);\n    } else {\n      log.debug(\"Creating recoveryExecutor with unbounded pool\");\n      recoveryExecutor = ExecutorUtil.newMDCAwareCachedThreadPool(recoveryThreadFactory);\n    }\n  }\n\n","sourceOld":"  public UpdateShardHandler(UpdateShardHandlerConfig cfg) {\n    updateOnlyConnectionManager = new InstrumentedPoolingHttpClientConnectionManager(HttpClientUtil.getSocketFactoryRegistryProvider().getSocketFactoryRegistry());\n    recoveryOnlyConnectionManager = new InstrumentedPoolingHttpClientConnectionManager(HttpClientUtil.getSocketFactoryRegistryProvider().getSocketFactoryRegistry());\n    defaultConnectionManager = new InstrumentedPoolingHttpClientConnectionManager(HttpClientUtil.getSocketFactoryRegistryProvider().getSocketFactoryRegistry());\n    ModifiableSolrParams clientParams = new ModifiableSolrParams();\n    if (cfg != null ) {\n      updateOnlyConnectionManager.setMaxTotal(cfg.getMaxUpdateConnections());\n      updateOnlyConnectionManager.setDefaultMaxPerRoute(cfg.getMaxUpdateConnectionsPerHost());\n      recoveryOnlyConnectionManager.setMaxTotal(cfg.getMaxUpdateConnections());\n      recoveryOnlyConnectionManager.setDefaultMaxPerRoute(cfg.getMaxUpdateConnectionsPerHost());\n      defaultConnectionManager.setMaxTotal(cfg.getMaxUpdateConnections());\n      defaultConnectionManager.setDefaultMaxPerRoute(cfg.getMaxUpdateConnectionsPerHost());\n      clientParams.set(HttpClientUtil.PROP_SO_TIMEOUT, cfg.getDistributedSocketTimeout());\n      clientParams.set(HttpClientUtil.PROP_CONNECTION_TIMEOUT, cfg.getDistributedConnectionTimeout());\n      // following is done only for logging complete configuration.\n      // The maxConnections and maxConnectionsPerHost have already been specified on the connection manager\n      clientParams.set(HttpClientUtil.PROP_MAX_CONNECTIONS, cfg.getMaxUpdateConnections());\n      clientParams.set(HttpClientUtil.PROP_MAX_CONNECTIONS_PER_HOST, cfg.getMaxUpdateConnectionsPerHost());\n      socketTimeout = cfg.getDistributedSocketTimeout();\n      connectionTimeout = cfg.getDistributedConnectionTimeout();\n    }\n    log.debug(\"Created default UpdateShardHandler HTTP client with params: {}\", clientParams);\n\n    httpRequestExecutor = new InstrumentedHttpRequestExecutor(getMetricNameStrategy(cfg));\n    updateHttpListenerFactory = new InstrumentedHttpListenerFactory(getNameStrategy(cfg));\n    recoveryOnlyClient = HttpClientUtil.createClient(clientParams, recoveryOnlyConnectionManager, false, httpRequestExecutor);\n    defaultClient = HttpClientUtil.createClient(clientParams, defaultConnectionManager, false, httpRequestExecutor);\n\n    Http2SolrClient.Builder updateOnlyClientBuilder = new Http2SolrClient.Builder();\n    if (cfg != null) {\n      updateOnlyClientBuilder\n          .connectionTimeout(cfg.getDistributedConnectionTimeout())\n          .idleTimeout(cfg.getDistributedSocketTimeout())\n          .maxConnectionsPerHost(cfg.getMaxUpdateConnectionsPerHost());\n    }\n    updateOnlyClient = updateOnlyClientBuilder.build();\n    updateOnlyClient.addListenerFactory(updateHttpListenerFactory);\n    Set<String> queryParams = new HashSet<>(2);\n    queryParams.add(DistributedUpdateProcessor.DISTRIB_FROM);\n    queryParams.add(DistributingUpdateProcessorFactory.DISTRIB_UPDATE_PARAM);\n    updateOnlyClient.setQueryParams(queryParams);\n\n    ThreadFactory recoveryThreadFactory = new SolrNamedThreadFactory(\"recoveryExecutor\");\n    if (cfg != null && cfg.getMaxRecoveryThreads() > 0) {\n      log.debug(\"Creating recoveryExecutor with pool size {}\", cfg.getMaxRecoveryThreads());\n      recoveryExecutor = ExecutorUtil.newMDCAwareFixedThreadPool(cfg.getMaxRecoveryThreads(), recoveryThreadFactory);\n    } else {\n      log.debug(\"Creating recoveryExecutor with unbounded pool\");\n      recoveryExecutor = ExecutorUtil.newMDCAwareCachedThreadPool(recoveryThreadFactory);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["fc0351e5a64998aa87ebea3be11fca66075eb1b0"],"a2e58c9eb8714e96373ecfded6d0bfc84ad1d93d":["3646ead588297558973dbd1162e69791e822b944"],"740d649f013f07efbeb73ca854f106c60166e7c0":["fb03700c9690d16b15fb4f56f6ec36b128fd894e"],"58b7eb80017f1c5b32035176b965fa0cc0287d04":["e15199583d3635cb940942caed05132dd6c4c7c6"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["a2e58c9eb8714e96373ecfded6d0bfc84ad1d93d"],"26e0252a32b4b4d04820aedc5e0ff9dbae0695e0":["859081acf00749f5dd462772c571d611d4a4d2db"],"fc0351e5a64998aa87ebea3be11fca66075eb1b0":["16fa358573e3c2508728b3c7c438a8c19a3f0ae4"],"7f0c8426396c925de8db3ed3f8ff40fd73670a5c":["56ae3539e829325e80cc0e8d65df4d724cc762d1"],"e15199583d3635cb940942caed05132dd6c4c7c6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e15199583d3635cb940942caed05132dd6c4c7c6"],"1a77e5e21cbd575a8240b0e3926164f15295f4e8":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["56ae3539e829325e80cc0e8d65df4d724cc762d1","126d6ad24eed13163ba0959435d5a80e5672837c"],"56ae3539e829325e80cc0e8d65df4d724cc762d1":["859081acf00749f5dd462772c571d611d4a4d2db","b3a63e635085f13be62c7e0829c70cb104e601b2"],"9e856e5ac973044540959acff90fa900278d2692":["1a77e5e21cbd575a8240b0e3926164f15295f4e8"],"b3a63e635085f13be62c7e0829c70cb104e601b2":["dcd6a14058a87dd9bf7c9d844f4d14c95f0846e8"],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":["f03e4bed5023ec3ef93a771b8888cae991cf448d","fc0351e5a64998aa87ebea3be11fca66075eb1b0"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["859081acf00749f5dd462772c571d611d4a4d2db","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","16fa358573e3c2508728b3c7c438a8c19a3f0ae4"],"859081acf00749f5dd462772c571d611d4a4d2db":["58b7eb80017f1c5b32035176b965fa0cc0287d04"],"126d6ad24eed13163ba0959435d5a80e5672837c":["56ae3539e829325e80cc0e8d65df4d724cc762d1","7f0c8426396c925de8db3ed3f8ff40fd73670a5c"],"3646ead588297558973dbd1162e69791e822b944":["40c3e653c3daffe5784c647ee85d0fcb16639d5a"],"dcd6a14058a87dd9bf7c9d844f4d14c95f0846e8":["26e0252a32b4b4d04820aedc5e0ff9dbae0695e0"],"40c3e653c3daffe5784c647ee85d0fcb16639d5a":["fc0351e5a64998aa87ebea3be11fca66075eb1b0"],"fb03700c9690d16b15fb4f56f6ec36b128fd894e":["9e856e5ac973044540959acff90fa900278d2692"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["740d649f013f07efbeb73ca854f106c60166e7c0"],"16fa358573e3c2508728b3c7c438a8c19a3f0ae4":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"a2e58c9eb8714e96373ecfded6d0bfc84ad1d93d":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"740d649f013f07efbeb73ca854f106c60166e7c0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"58b7eb80017f1c5b32035176b965fa0cc0287d04":["859081acf00749f5dd462772c571d611d4a4d2db"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["1a77e5e21cbd575a8240b0e3926164f15295f4e8"],"26e0252a32b4b4d04820aedc5e0ff9dbae0695e0":["dcd6a14058a87dd9bf7c9d844f4d14c95f0846e8"],"fc0351e5a64998aa87ebea3be11fca66075eb1b0":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","40c3e653c3daffe5784c647ee85d0fcb16639d5a"],"7f0c8426396c925de8db3ed3f8ff40fd73670a5c":["126d6ad24eed13163ba0959435d5a80e5672837c"],"e15199583d3635cb940942caed05132dd6c4c7c6":["58b7eb80017f1c5b32035176b965fa0cc0287d04","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"1a77e5e21cbd575a8240b0e3926164f15295f4e8":["9e856e5ac973044540959acff90fa900278d2692"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e15199583d3635cb940942caed05132dd6c4c7c6","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","16fa358573e3c2508728b3c7c438a8c19a3f0ae4"],"56ae3539e829325e80cc0e8d65df4d724cc762d1":["7f0c8426396c925de8db3ed3f8ff40fd73670a5c","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","126d6ad24eed13163ba0959435d5a80e5672837c"],"9e856e5ac973044540959acff90fa900278d2692":["fb03700c9690d16b15fb4f56f6ec36b128fd894e"],"b3a63e635085f13be62c7e0829c70cb104e601b2":["56ae3539e829325e80cc0e8d65df4d724cc762d1"],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["f03e4bed5023ec3ef93a771b8888cae991cf448d"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":["09ab8ee44ca898536770d0106a7c0ee4be4f0eb7"],"859081acf00749f5dd462772c571d611d4a4d2db":["26e0252a32b4b4d04820aedc5e0ff9dbae0695e0","56ae3539e829325e80cc0e8d65df4d724cc762d1","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"126d6ad24eed13163ba0959435d5a80e5672837c":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"3646ead588297558973dbd1162e69791e822b944":["a2e58c9eb8714e96373ecfded6d0bfc84ad1d93d"],"dcd6a14058a87dd9bf7c9d844f4d14c95f0846e8":["b3a63e635085f13be62c7e0829c70cb104e601b2"],"40c3e653c3daffe5784c647ee85d0fcb16639d5a":["3646ead588297558973dbd1162e69791e822b944"],"fb03700c9690d16b15fb4f56f6ec36b128fd894e":["740d649f013f07efbeb73ca854f106c60166e7c0"],"16fa358573e3c2508728b3c7c438a8c19a3f0ae4":["fc0351e5a64998aa87ebea3be11fca66075eb1b0","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}