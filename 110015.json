{"path":"solr/contrib/solr-morphlines-core/src/java/org/apache/solr/morphlines/solr/SolrLocator#getLoader().mjava","commits":[{"id":"d6e604e9030fb0cabf0c5a85ae6039921a81419c","date":1386009743,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/solr-morphlines-core/src/java/org/apache/solr/morphlines/solr/SolrLocator#getLoader().mjava","pathOld":"/dev/null","sourceNew":"  public DocumentLoader getLoader() {\n    if (context instanceof SolrMorphlineContext) {\n      DocumentLoader loader = ((SolrMorphlineContext)context).getDocumentLoader();\n      if (loader != null) {\n        return loader;\n      }\n    }\n    \n    if (zkHost != null && zkHost.length() > 0) {\n      if (collectionName == null || collectionName.length() == 0) {\n        throw new MorphlineCompilationException(\"Parameter 'zkHost' requires that you also pass parameter 'collection'\", config);\n      }\n      try {\n        CloudSolrServer cloudSolrServer = new CloudSolrServer(zkHost);\n        cloudSolrServer.setDefaultCollection(collectionName);\n        cloudSolrServer.connect();\n        return new SolrServerDocumentLoader(cloudSolrServer, batchSize);\n      } catch (MalformedURLException e) {\n        throw new MorphlineRuntimeException(e);\n      }\n    } else {\n      if (solrUrl == null || solrUrl.length() == 0) {\n        throw new MorphlineCompilationException(\"Missing parameter 'solrUrl'\", config);\n      }\n      int solrServerNumThreads = 2;\n      int solrServerQueueLength = solrServerNumThreads;\n      SolrServer server = new SafeConcurrentUpdateSolrServer(solrUrl, solrServerQueueLength, solrServerNumThreads);\n      // SolrServer server = new HttpSolrServer(solrServerUrl);\n      // SolrServer server = new ConcurrentUpdateSolrServer(solrServerUrl, solrServerQueueLength, solrServerNumThreads);\n      // server.setParser(new XMLResponseParser()); // binary parser is used by default\n      return new SolrServerDocumentLoader(server, batchSize);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70f91c8322fbffe3a3a897ef20ea19119cac10cd","date":1386170124,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/morphlines-core/src/java/org/apache/solr/morphlines/solr/SolrLocator#getLoader().mjava","pathOld":"solr/contrib/solr-morphlines-core/src/java/org/apache/solr/morphlines/solr/SolrLocator#getLoader().mjava","sourceNew":"  public DocumentLoader getLoader() {\n    if (context instanceof SolrMorphlineContext) {\n      DocumentLoader loader = ((SolrMorphlineContext)context).getDocumentLoader();\n      if (loader != null) {\n        return loader;\n      }\n    }\n    \n    if (zkHost != null && zkHost.length() > 0) {\n      if (collectionName == null || collectionName.length() == 0) {\n        throw new MorphlineCompilationException(\"Parameter 'zkHost' requires that you also pass parameter 'collection'\", config);\n      }\n      try {\n        CloudSolrServer cloudSolrServer = new CloudSolrServer(zkHost);\n        cloudSolrServer.setDefaultCollection(collectionName);\n        cloudSolrServer.connect();\n        return new SolrServerDocumentLoader(cloudSolrServer, batchSize);\n      } catch (MalformedURLException e) {\n        throw new MorphlineRuntimeException(e);\n      }\n    } else {\n      if (solrUrl == null || solrUrl.length() == 0) {\n        throw new MorphlineCompilationException(\"Missing parameter 'solrUrl'\", config);\n      }\n      int solrServerNumThreads = 2;\n      int solrServerQueueLength = solrServerNumThreads;\n      SolrServer server = new SafeConcurrentUpdateSolrServer(solrUrl, solrServerQueueLength, solrServerNumThreads);\n      // SolrServer server = new HttpSolrServer(solrServerUrl);\n      // SolrServer server = new ConcurrentUpdateSolrServer(solrServerUrl, solrServerQueueLength, solrServerNumThreads);\n      // server.setParser(new XMLResponseParser()); // binary parser is used by default\n      return new SolrServerDocumentLoader(server, batchSize);\n    }\n  }\n\n","sourceOld":"  public DocumentLoader getLoader() {\n    if (context instanceof SolrMorphlineContext) {\n      DocumentLoader loader = ((SolrMorphlineContext)context).getDocumentLoader();\n      if (loader != null) {\n        return loader;\n      }\n    }\n    \n    if (zkHost != null && zkHost.length() > 0) {\n      if (collectionName == null || collectionName.length() == 0) {\n        throw new MorphlineCompilationException(\"Parameter 'zkHost' requires that you also pass parameter 'collection'\", config);\n      }\n      try {\n        CloudSolrServer cloudSolrServer = new CloudSolrServer(zkHost);\n        cloudSolrServer.setDefaultCollection(collectionName);\n        cloudSolrServer.connect();\n        return new SolrServerDocumentLoader(cloudSolrServer, batchSize);\n      } catch (MalformedURLException e) {\n        throw new MorphlineRuntimeException(e);\n      }\n    } else {\n      if (solrUrl == null || solrUrl.length() == 0) {\n        throw new MorphlineCompilationException(\"Missing parameter 'solrUrl'\", config);\n      }\n      int solrServerNumThreads = 2;\n      int solrServerQueueLength = solrServerNumThreads;\n      SolrServer server = new SafeConcurrentUpdateSolrServer(solrUrl, solrServerQueueLength, solrServerNumThreads);\n      // SolrServer server = new HttpSolrServer(solrServerUrl);\n      // SolrServer server = new ConcurrentUpdateSolrServer(solrServerUrl, solrServerQueueLength, solrServerNumThreads);\n      // server.setParser(new XMLResponseParser()); // binary parser is used by default\n      return new SolrServerDocumentLoader(server, batchSize);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70f91c8322fbffe3a3a897ef20ea19119cac10cd":["d6e604e9030fb0cabf0c5a85ae6039921a81419c"],"d6e604e9030fb0cabf0c5a85ae6039921a81419c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["70f91c8322fbffe3a3a897ef20ea19119cac10cd"]},"commit2Childs":{"70f91c8322fbffe3a3a897ef20ea19119cac10cd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d6e604e9030fb0cabf0c5a85ae6039921a81419c":["70f91c8322fbffe3a3a897ef20ea19119cac10cd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d6e604e9030fb0cabf0c5a85ae6039921a81419c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}