{"path":"backwards/src/java/org/apache/lucene/index/DirectoryReader#doReopen(boolean,IndexCommit).mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/java/org/apache/lucene/index/DirectoryReader#doReopen(boolean,IndexCommit).mjava","pathOld":"/dev/null","sourceNew":"  private synchronized IndexReader doReopen(final boolean openReadOnly, IndexCommit commit) throws CorruptIndexException, IOException {\n    ensureOpen();\n\n    assert commit == null || openReadOnly;\n\n    // If we were obtained by writer.getReader(), re-ask the\n    // writer to get a new reader.\n    if (writer != null) {\n      assert readOnly;\n\n      if (!openReadOnly) {\n        throw new IllegalArgumentException(\"a reader obtained from IndexWriter.getReader() can only be reopened with openReadOnly=true (got false)\");\n      }\n\n      if (commit != null) {\n        throw new IllegalArgumentException(\"a reader obtained from IndexWriter.getReader() cannot currently accept a commit\");\n      }\n\n      if (!writer.isOpen(true)) {\n        throw new AlreadyClosedException(\"cannot reopen: the IndexWriter this reader was obtained from is now closed\");\n      }\n\n      // TODO: right now we *always* make a new reader; in\n      // the future we could have write make some effort to\n      // detect that no changes have occurred\n      IndexReader reader = writer.getReader();\n      return reader;\n    }\n\n    if (commit == null) {\n      if (hasChanges) {\n        // We have changes, which means we are not readOnly:\n        assert readOnly == false;\n        // and we hold the write lock:\n        assert writeLock != null;\n        // so no other writer holds the write lock, which\n        // means no changes could have been done to the index:\n        assert isCurrent();\n\n        if (openReadOnly) {\n          return clone(openReadOnly);\n        } else {\n          return this;\n        }\n      } else if (isCurrent()) {\n        if (openReadOnly != readOnly) {\n          // Just fallback to clone\n          return clone(openReadOnly);\n        } else {\n          return this;\n        }\n      }\n    } else {\n      if (directory != commit.getDirectory())\n        throw new IOException(\"the specified commit does not match the specified Directory\");\n      if (segmentInfos != null && commit.getSegmentsFileName().equals(segmentInfos.getCurrentSegmentFileName())) {\n        if (readOnly != openReadOnly) {\n          // Just fallback to clone\n          return clone(openReadOnly);\n        } else {\n          return this;\n        }\n      }\n    }\n\n    return (IndexReader) new SegmentInfos.FindSegmentsFile(directory) {\n      @Override\n      protected Object doBody(String segmentFileName) throws CorruptIndexException, IOException {\n        SegmentInfos infos = new SegmentInfos();\n        infos.read(directory, segmentFileName);\n        return doReopen(infos, false, openReadOnly);\n      }\n    }.run(commit);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/index/DirectoryReader#doReopen(boolean,IndexCommit).mjava","pathOld":"backwards/src/java/org/apache/lucene/index/DirectoryReader#doReopen(boolean,IndexCommit).mjava","sourceNew":"  private synchronized IndexReader doReopen(final boolean openReadOnly, IndexCommit commit) throws CorruptIndexException, IOException {\n    ensureOpen();\n\n    assert commit == null || openReadOnly;\n\n    // If we were obtained by writer.getReader(), re-ask the\n    // writer to get a new reader.\n    if (writer != null) {\n      assert readOnly;\n\n      if (!openReadOnly) {\n        throw new IllegalArgumentException(\"a reader obtained from IndexWriter.getReader() can only be reopened with openReadOnly=true (got false)\");\n      }\n\n      if (commit != null) {\n        throw new IllegalArgumentException(\"a reader obtained from IndexWriter.getReader() cannot currently accept a commit\");\n      }\n\n      if (!writer.isOpen(true)) {\n        throw new AlreadyClosedException(\"cannot reopen: the IndexWriter this reader was obtained from is now closed\");\n      }\n\n      // TODO: right now we *always* make a new reader; in\n      // the future we could have write make some effort to\n      // detect that no changes have occurred\n      IndexReader reader = writer.getReader();\n      return reader;\n    }\n\n    if (commit == null) {\n      if (hasChanges) {\n        // We have changes, which means we are not readOnly:\n        assert readOnly == false;\n        // and we hold the write lock:\n        assert writeLock != null;\n        // so no other writer holds the write lock, which\n        // means no changes could have been done to the index:\n        assert isCurrent();\n\n        if (openReadOnly) {\n          return clone(openReadOnly);\n        } else {\n          return this;\n        }\n      } else if (isCurrent()) {\n        if (openReadOnly != readOnly) {\n          // Just fallback to clone\n          return clone(openReadOnly);\n        } else {\n          return this;\n        }\n      }\n    } else {\n      if (directory != commit.getDirectory())\n        throw new IOException(\"the specified commit does not match the specified Directory\");\n      if (segmentInfos != null && commit.getSegmentsFileName().equals(segmentInfos.getCurrentSegmentFileName())) {\n        if (readOnly != openReadOnly) {\n          // Just fallback to clone\n          return clone(openReadOnly);\n        } else {\n          return this;\n        }\n      }\n    }\n\n    return (IndexReader) new SegmentInfos.FindSegmentsFile(directory) {\n      @Override\n      protected Object doBody(String segmentFileName) throws CorruptIndexException, IOException {\n        SegmentInfos infos = new SegmentInfos();\n        infos.read(directory, segmentFileName);\n        return doReopen(infos, false, openReadOnly);\n      }\n    }.run(commit);\n  }\n\n","sourceOld":"  private synchronized IndexReader doReopen(final boolean openReadOnly, IndexCommit commit) throws CorruptIndexException, IOException {\n    ensureOpen();\n\n    assert commit == null || openReadOnly;\n\n    // If we were obtained by writer.getReader(), re-ask the\n    // writer to get a new reader.\n    if (writer != null) {\n      assert readOnly;\n\n      if (!openReadOnly) {\n        throw new IllegalArgumentException(\"a reader obtained from IndexWriter.getReader() can only be reopened with openReadOnly=true (got false)\");\n      }\n\n      if (commit != null) {\n        throw new IllegalArgumentException(\"a reader obtained from IndexWriter.getReader() cannot currently accept a commit\");\n      }\n\n      if (!writer.isOpen(true)) {\n        throw new AlreadyClosedException(\"cannot reopen: the IndexWriter this reader was obtained from is now closed\");\n      }\n\n      // TODO: right now we *always* make a new reader; in\n      // the future we could have write make some effort to\n      // detect that no changes have occurred\n      IndexReader reader = writer.getReader();\n      return reader;\n    }\n\n    if (commit == null) {\n      if (hasChanges) {\n        // We have changes, which means we are not readOnly:\n        assert readOnly == false;\n        // and we hold the write lock:\n        assert writeLock != null;\n        // so no other writer holds the write lock, which\n        // means no changes could have been done to the index:\n        assert isCurrent();\n\n        if (openReadOnly) {\n          return clone(openReadOnly);\n        } else {\n          return this;\n        }\n      } else if (isCurrent()) {\n        if (openReadOnly != readOnly) {\n          // Just fallback to clone\n          return clone(openReadOnly);\n        } else {\n          return this;\n        }\n      }\n    } else {\n      if (directory != commit.getDirectory())\n        throw new IOException(\"the specified commit does not match the specified Directory\");\n      if (segmentInfos != null && commit.getSegmentsFileName().equals(segmentInfos.getCurrentSegmentFileName())) {\n        if (readOnly != openReadOnly) {\n          // Just fallback to clone\n          return clone(openReadOnly);\n        } else {\n          return this;\n        }\n      }\n    }\n\n    return (IndexReader) new SegmentInfos.FindSegmentsFile(directory) {\n      @Override\n      protected Object doBody(String segmentFileName) throws CorruptIndexException, IOException {\n        SegmentInfos infos = new SegmentInfos();\n        infos.read(directory, segmentFileName);\n        return doReopen(infos, false, openReadOnly);\n      }\n    }.run(commit);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}