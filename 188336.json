{"path":"lucene/test-framework/src/java/org/apache/lucene/index/BaseStoredFieldsFormatTestCase#testReadSkip().mjava","commits":[{"id":"70b55953b6a72596cb534ead735a8b849a473cac","date":1363634568,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseStoredFieldsFormatTestCase#testReadSkip().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/compressing/TestCompressingStoredFieldsFormat#testReadSkip().mjava","sourceNew":"  public void testReadSkip() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwConf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwConf.setMaxBufferedDocs(RandomInts.randomIntBetween(random(), 2, 30));\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwConf);\n    \n    FieldType ft = new FieldType();\n    ft.setStored(true);\n    ft.freeze();\n\n    final String string = _TestUtil.randomSimpleString(random(), 50);\n    final byte[] bytes = string.getBytes(\"UTF-8\");\n    final long l = random().nextBoolean() ? random().nextInt(42) : random().nextLong();\n    final int i = random().nextBoolean() ? random().nextInt(42) : random().nextInt();\n    final float f = random().nextFloat();\n    final double d = random().nextDouble();\n\n    List<Field> fields = Arrays.asList(\n        new Field(\"bytes\", bytes, ft),\n        new Field(\"string\", string, ft),\n        new LongField(\"long\", l, Store.YES),\n        new IntField(\"int\", i, Store.YES),\n        new FloatField(\"float\", f, Store.YES),\n        new DoubleField(\"double\", d, Store.YES)\n    );\n\n    for (int k = 0; k < 100; ++k) {\n      Document doc = new Document();\n      for (Field fld : fields) {\n        doc.add(fld);\n      }\n      iw.w.addDocument(doc);\n    }\n    iw.commit();\n\n    final DirectoryReader reader = DirectoryReader.open(dir);\n    final int docID = random().nextInt(100);\n    for (Field fld : fields) {\n      String fldName = fld.name();\n      final StoredDocument sDoc = reader.document(docID, Collections.singleton(fldName));\n      final StorableField sField = sDoc.getField(fldName);\n      if (Field.class.equals(fld.getClass())) {\n        assertEquals(fld.binaryValue(), sField.binaryValue());\n        assertEquals(fld.stringValue(), sField.stringValue());\n      } else {\n        assertEquals(fld.numericValue(), sField.numericValue());\n      }\n    }\n    reader.close();\n    iw.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testReadSkip() throws IOException {\n    FieldType ft = new FieldType();\n    ft.setStored(true);\n    ft.freeze();\n\n    final String string = _TestUtil.randomSimpleString(random(), 50);\n    final byte[] bytes = string.getBytes(\"UTF-8\");\n    final long l = random().nextBoolean() ? random().nextInt(42) : random().nextLong();\n    final int i = random().nextBoolean() ? random().nextInt(42) : random().nextInt();\n    final float f = random().nextFloat();\n    final double d = random().nextDouble();\n\n    List<Field> fields = Arrays.asList(\n        new Field(\"bytes\", bytes, ft),\n        new Field(\"string\", string, ft),\n        new LongField(\"long\", l, Store.YES),\n        new IntField(\"int\", i, Store.YES),\n        new FloatField(\"float\", f, Store.YES),\n        new DoubleField(\"double\", d, Store.YES)\n    );\n\n    for (int k = 0; k < 100; ++k) {\n      Document doc = new Document();\n      for (Field fld : fields) {\n        doc.add(fld);\n      }\n      iw.w.addDocument(doc);\n    }\n    iw.commit();\n\n    final DirectoryReader reader = DirectoryReader.open(dir);\n    final int docID = random().nextInt(100);\n    for (Field fld : fields) {\n      String fldName = fld.name();\n      final StoredDocument sDoc = reader.document(docID, Collections.singleton(fldName));\n      final StorableField sField = sDoc.getField(fldName);\n      if (Field.class.equals(fld.getClass())) {\n        assertEquals(fld.binaryValue(), sField.binaryValue());\n        assertEquals(fld.stringValue(), sField.stringValue());\n      } else {\n        assertEquals(fld.numericValue(), sField.numericValue());\n      }\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseStoredFieldsFormatTestCase#testReadSkip().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseStoredFieldsFormatTestCase#testReadSkip().mjava","sourceNew":"  public void testReadSkip() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwConf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwConf.setMaxBufferedDocs(RandomInts.randomIntBetween(random(), 2, 30));\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwConf);\n    \n    FieldType ft = new FieldType();\n    ft.setStored(true);\n    ft.freeze();\n\n    final String string = TestUtil.randomSimpleString(random(), 50);\n    final byte[] bytes = string.getBytes(\"UTF-8\");\n    final long l = random().nextBoolean() ? random().nextInt(42) : random().nextLong();\n    final int i = random().nextBoolean() ? random().nextInt(42) : random().nextInt();\n    final float f = random().nextFloat();\n    final double d = random().nextDouble();\n\n    List<Field> fields = Arrays.asList(\n        new Field(\"bytes\", bytes, ft),\n        new Field(\"string\", string, ft),\n        new LongField(\"long\", l, Store.YES),\n        new IntField(\"int\", i, Store.YES),\n        new FloatField(\"float\", f, Store.YES),\n        new DoubleField(\"double\", d, Store.YES)\n    );\n\n    for (int k = 0; k < 100; ++k) {\n      Document doc = new Document();\n      for (Field fld : fields) {\n        doc.add(fld);\n      }\n      iw.w.addDocument(doc);\n    }\n    iw.commit();\n\n    final DirectoryReader reader = DirectoryReader.open(dir);\n    final int docID = random().nextInt(100);\n    for (Field fld : fields) {\n      String fldName = fld.name();\n      final StoredDocument sDoc = reader.document(docID, Collections.singleton(fldName));\n      final StorableField sField = sDoc.getField(fldName);\n      if (Field.class.equals(fld.getClass())) {\n        assertEquals(fld.binaryValue(), sField.binaryValue());\n        assertEquals(fld.stringValue(), sField.stringValue());\n      } else {\n        assertEquals(fld.numericValue(), sField.numericValue());\n      }\n    }\n    reader.close();\n    iw.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testReadSkip() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwConf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwConf.setMaxBufferedDocs(RandomInts.randomIntBetween(random(), 2, 30));\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwConf);\n    \n    FieldType ft = new FieldType();\n    ft.setStored(true);\n    ft.freeze();\n\n    final String string = _TestUtil.randomSimpleString(random(), 50);\n    final byte[] bytes = string.getBytes(\"UTF-8\");\n    final long l = random().nextBoolean() ? random().nextInt(42) : random().nextLong();\n    final int i = random().nextBoolean() ? random().nextInt(42) : random().nextInt();\n    final float f = random().nextFloat();\n    final double d = random().nextDouble();\n\n    List<Field> fields = Arrays.asList(\n        new Field(\"bytes\", bytes, ft),\n        new Field(\"string\", string, ft),\n        new LongField(\"long\", l, Store.YES),\n        new IntField(\"int\", i, Store.YES),\n        new FloatField(\"float\", f, Store.YES),\n        new DoubleField(\"double\", d, Store.YES)\n    );\n\n    for (int k = 0; k < 100; ++k) {\n      Document doc = new Document();\n      for (Field fld : fields) {\n        doc.add(fld);\n      }\n      iw.w.addDocument(doc);\n    }\n    iw.commit();\n\n    final DirectoryReader reader = DirectoryReader.open(dir);\n    final int docID = random().nextInt(100);\n    for (Field fld : fields) {\n      String fldName = fld.name();\n      final StoredDocument sDoc = reader.document(docID, Collections.singleton(fldName));\n      final StorableField sField = sDoc.getField(fldName);\n      if (Field.class.equals(fld.getClass())) {\n        assertEquals(fld.binaryValue(), sField.binaryValue());\n        assertEquals(fld.stringValue(), sField.stringValue());\n      } else {\n        assertEquals(fld.numericValue(), sField.numericValue());\n      }\n    }\n    reader.close();\n    iw.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7d89d7e4e5101347833eea558851bf4209218619","date":1396265641,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseStoredFieldsFormatTestCase#testReadSkip().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseStoredFieldsFormatTestCase#testReadSkip().mjava","sourceNew":"  public void testReadSkip() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwConf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwConf.setMaxBufferedDocs(RandomInts.randomIntBetween(random(), 2, 30));\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwConf);\n    \n    FieldType ft = new FieldType();\n    ft.setStored(true);\n    ft.freeze();\n\n    final String string = TestUtil.randomSimpleString(random(), 50);\n    final byte[] bytes = string.getBytes(StandardCharsets.UTF_8);\n    final long l = random().nextBoolean() ? random().nextInt(42) : random().nextLong();\n    final int i = random().nextBoolean() ? random().nextInt(42) : random().nextInt();\n    final float f = random().nextFloat();\n    final double d = random().nextDouble();\n\n    List<Field> fields = Arrays.asList(\n        new Field(\"bytes\", bytes, ft),\n        new Field(\"string\", string, ft),\n        new LongField(\"long\", l, Store.YES),\n        new IntField(\"int\", i, Store.YES),\n        new FloatField(\"float\", f, Store.YES),\n        new DoubleField(\"double\", d, Store.YES)\n    );\n\n    for (int k = 0; k < 100; ++k) {\n      Document doc = new Document();\n      for (Field fld : fields) {\n        doc.add(fld);\n      }\n      iw.w.addDocument(doc);\n    }\n    iw.commit();\n\n    final DirectoryReader reader = DirectoryReader.open(dir);\n    final int docID = random().nextInt(100);\n    for (Field fld : fields) {\n      String fldName = fld.name();\n      final StoredDocument sDoc = reader.document(docID, Collections.singleton(fldName));\n      final StorableField sField = sDoc.getField(fldName);\n      if (Field.class.equals(fld.getClass())) {\n        assertEquals(fld.binaryValue(), sField.binaryValue());\n        assertEquals(fld.stringValue(), sField.stringValue());\n      } else {\n        assertEquals(fld.numericValue(), sField.numericValue());\n      }\n    }\n    reader.close();\n    iw.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testReadSkip() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwConf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwConf.setMaxBufferedDocs(RandomInts.randomIntBetween(random(), 2, 30));\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwConf);\n    \n    FieldType ft = new FieldType();\n    ft.setStored(true);\n    ft.freeze();\n\n    final String string = TestUtil.randomSimpleString(random(), 50);\n    final byte[] bytes = string.getBytes(\"UTF-8\");\n    final long l = random().nextBoolean() ? random().nextInt(42) : random().nextLong();\n    final int i = random().nextBoolean() ? random().nextInt(42) : random().nextInt();\n    final float f = random().nextFloat();\n    final double d = random().nextDouble();\n\n    List<Field> fields = Arrays.asList(\n        new Field(\"bytes\", bytes, ft),\n        new Field(\"string\", string, ft),\n        new LongField(\"long\", l, Store.YES),\n        new IntField(\"int\", i, Store.YES),\n        new FloatField(\"float\", f, Store.YES),\n        new DoubleField(\"double\", d, Store.YES)\n    );\n\n    for (int k = 0; k < 100; ++k) {\n      Document doc = new Document();\n      for (Field fld : fields) {\n        doc.add(fld);\n      }\n      iw.w.addDocument(doc);\n    }\n    iw.commit();\n\n    final DirectoryReader reader = DirectoryReader.open(dir);\n    final int docID = random().nextInt(100);\n    for (Field fld : fields) {\n      String fldName = fld.name();\n      final StoredDocument sDoc = reader.document(docID, Collections.singleton(fldName));\n      final StorableField sField = sDoc.getField(fldName);\n      if (Field.class.equals(fld.getClass())) {\n        assertEquals(fld.binaryValue(), sField.binaryValue());\n        assertEquals(fld.stringValue(), sField.stringValue());\n      } else {\n        assertEquals(fld.numericValue(), sField.numericValue());\n      }\n    }\n    reader.close();\n    iw.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseStoredFieldsFormatTestCase#testReadSkip().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseStoredFieldsFormatTestCase#testReadSkip().mjava","sourceNew":"  public void testReadSkip() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwConf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwConf.setMaxBufferedDocs(RandomInts.randomIntBetween(random(), 2, 30));\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwConf);\n    \n    FieldType ft = new FieldType();\n    ft.setStored(true);\n    ft.freeze();\n\n    final String string = TestUtil.randomSimpleString(random(), 50);\n    final byte[] bytes = string.getBytes(StandardCharsets.UTF_8);\n    final long l = random().nextBoolean() ? random().nextInt(42) : random().nextLong();\n    final int i = random().nextBoolean() ? random().nextInt(42) : random().nextInt();\n    final float f = random().nextFloat();\n    final double d = random().nextDouble();\n\n    List<Field> fields = Arrays.asList(\n        new Field(\"bytes\", bytes, ft),\n        new Field(\"string\", string, ft),\n        new LongField(\"long\", l, Store.YES),\n        new IntField(\"int\", i, Store.YES),\n        new FloatField(\"float\", f, Store.YES),\n        new DoubleField(\"double\", d, Store.YES)\n    );\n\n    for (int k = 0; k < 100; ++k) {\n      Document doc = new Document();\n      for (Field fld : fields) {\n        doc.add(fld);\n      }\n      iw.w.addDocument(doc);\n    }\n    iw.commit();\n\n    final DirectoryReader reader = DirectoryReader.open(dir);\n    final int docID = random().nextInt(100);\n    for (Field fld : fields) {\n      String fldName = fld.name();\n      final StoredDocument sDoc = reader.document(docID, Collections.singleton(fldName));\n      final StorableField sField = sDoc.getField(fldName);\n      if (Field.class.equals(fld.getClass())) {\n        assertEquals(fld.binaryValue(), sField.binaryValue());\n        assertEquals(fld.stringValue(), sField.stringValue());\n      } else {\n        assertEquals(fld.numericValue(), sField.numericValue());\n      }\n    }\n    reader.close();\n    iw.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testReadSkip() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwConf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwConf.setMaxBufferedDocs(RandomInts.randomIntBetween(random(), 2, 30));\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwConf);\n    \n    FieldType ft = new FieldType();\n    ft.setStored(true);\n    ft.freeze();\n\n    final String string = TestUtil.randomSimpleString(random(), 50);\n    final byte[] bytes = string.getBytes(\"UTF-8\");\n    final long l = random().nextBoolean() ? random().nextInt(42) : random().nextLong();\n    final int i = random().nextBoolean() ? random().nextInt(42) : random().nextInt();\n    final float f = random().nextFloat();\n    final double d = random().nextDouble();\n\n    List<Field> fields = Arrays.asList(\n        new Field(\"bytes\", bytes, ft),\n        new Field(\"string\", string, ft),\n        new LongField(\"long\", l, Store.YES),\n        new IntField(\"int\", i, Store.YES),\n        new FloatField(\"float\", f, Store.YES),\n        new DoubleField(\"double\", d, Store.YES)\n    );\n\n    for (int k = 0; k < 100; ++k) {\n      Document doc = new Document();\n      for (Field fld : fields) {\n        doc.add(fld);\n      }\n      iw.w.addDocument(doc);\n    }\n    iw.commit();\n\n    final DirectoryReader reader = DirectoryReader.open(dir);\n    final int docID = random().nextInt(100);\n    for (Field fld : fields) {\n      String fldName = fld.name();\n      final StoredDocument sDoc = reader.document(docID, Collections.singleton(fldName));\n      final StorableField sField = sDoc.getField(fldName);\n      if (Field.class.equals(fld.getClass())) {\n        assertEquals(fld.binaryValue(), sField.binaryValue());\n        assertEquals(fld.stringValue(), sField.stringValue());\n      } else {\n        assertEquals(fld.numericValue(), sField.numericValue());\n      }\n    }\n    reader.close();\n    iw.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseStoredFieldsFormatTestCase#testReadSkip().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseStoredFieldsFormatTestCase#testReadSkip().mjava","sourceNew":"  public void testReadSkip() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwConf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwConf.setMaxBufferedDocs(RandomInts.randomIntBetween(random(), 2, 30));\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwConf);\n    \n    FieldType ft = new FieldType();\n    ft.setStored(true);\n    ft.freeze();\n\n    final String string = TestUtil.randomSimpleString(random(), 50);\n    final byte[] bytes = string.getBytes(StandardCharsets.UTF_8);\n    final long l = random().nextBoolean() ? random().nextInt(42) : random().nextLong();\n    final int i = random().nextBoolean() ? random().nextInt(42) : random().nextInt();\n    final float f = random().nextFloat();\n    final double d = random().nextDouble();\n\n    List<Field> fields = Arrays.asList(\n        new Field(\"bytes\", bytes, ft),\n        new Field(\"string\", string, ft),\n        new LongField(\"long\", l, Store.YES),\n        new IntField(\"int\", i, Store.YES),\n        new FloatField(\"float\", f, Store.YES),\n        new DoubleField(\"double\", d, Store.YES)\n    );\n\n    for (int k = 0; k < 100; ++k) {\n      Document doc = new Document();\n      for (Field fld : fields) {\n        doc.add(fld);\n      }\n      iw.w.addDocument(doc);\n    }\n    iw.commit();\n\n    final DirectoryReader reader = DirectoryReader.open(dir);\n    final int docID = random().nextInt(100);\n    for (Field fld : fields) {\n      String fldName = fld.name();\n      final StoredDocument sDoc = reader.document(docID, Collections.singleton(fldName));\n      final StorableField sField = sDoc.getField(fldName);\n      if (Field.class.equals(fld.getClass())) {\n        assertEquals(fld.binaryValue(), sField.binaryValue());\n        assertEquals(fld.stringValue(), sField.stringValue());\n      } else {\n        assertEquals(fld.numericValue(), sField.numericValue());\n      }\n    }\n    reader.close();\n    iw.shutdown();\n    dir.close();\n  }\n\n","sourceOld":"  public void testReadSkip() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwConf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwConf.setMaxBufferedDocs(RandomInts.randomIntBetween(random(), 2, 30));\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwConf);\n    \n    FieldType ft = new FieldType();\n    ft.setStored(true);\n    ft.freeze();\n\n    final String string = TestUtil.randomSimpleString(random(), 50);\n    final byte[] bytes = string.getBytes(StandardCharsets.UTF_8);\n    final long l = random().nextBoolean() ? random().nextInt(42) : random().nextLong();\n    final int i = random().nextBoolean() ? random().nextInt(42) : random().nextInt();\n    final float f = random().nextFloat();\n    final double d = random().nextDouble();\n\n    List<Field> fields = Arrays.asList(\n        new Field(\"bytes\", bytes, ft),\n        new Field(\"string\", string, ft),\n        new LongField(\"long\", l, Store.YES),\n        new IntField(\"int\", i, Store.YES),\n        new FloatField(\"float\", f, Store.YES),\n        new DoubleField(\"double\", d, Store.YES)\n    );\n\n    for (int k = 0; k < 100; ++k) {\n      Document doc = new Document();\n      for (Field fld : fields) {\n        doc.add(fld);\n      }\n      iw.w.addDocument(doc);\n    }\n    iw.commit();\n\n    final DirectoryReader reader = DirectoryReader.open(dir);\n    final int docID = random().nextInt(100);\n    for (Field fld : fields) {\n      String fldName = fld.name();\n      final StoredDocument sDoc = reader.document(docID, Collections.singleton(fldName));\n      final StorableField sField = sDoc.getField(fldName);\n      if (Field.class.equals(fld.getClass())) {\n        assertEquals(fld.binaryValue(), sField.binaryValue());\n        assertEquals(fld.stringValue(), sField.stringValue());\n      } else {\n        assertEquals(fld.numericValue(), sField.numericValue());\n      }\n    }\n    reader.close();\n    iw.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseStoredFieldsFormatTestCase#testReadSkip().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseStoredFieldsFormatTestCase#testReadSkip().mjava","sourceNew":"  public void testReadSkip() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwConf = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwConf.setMaxBufferedDocs(RandomInts.randomIntBetween(random(), 2, 30));\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwConf);\n    \n    FieldType ft = new FieldType();\n    ft.setStored(true);\n    ft.freeze();\n\n    final String string = TestUtil.randomSimpleString(random(), 50);\n    final byte[] bytes = string.getBytes(StandardCharsets.UTF_8);\n    final long l = random().nextBoolean() ? random().nextInt(42) : random().nextLong();\n    final int i = random().nextBoolean() ? random().nextInt(42) : random().nextInt();\n    final float f = random().nextFloat();\n    final double d = random().nextDouble();\n\n    List<Field> fields = Arrays.asList(\n        new Field(\"bytes\", bytes, ft),\n        new Field(\"string\", string, ft),\n        new LongField(\"long\", l, Store.YES),\n        new IntField(\"int\", i, Store.YES),\n        new FloatField(\"float\", f, Store.YES),\n        new DoubleField(\"double\", d, Store.YES)\n    );\n\n    for (int k = 0; k < 100; ++k) {\n      Document doc = new Document();\n      for (Field fld : fields) {\n        doc.add(fld);\n      }\n      iw.w.addDocument(doc);\n    }\n    iw.commit();\n\n    final DirectoryReader reader = DirectoryReader.open(dir);\n    final int docID = random().nextInt(100);\n    for (Field fld : fields) {\n      String fldName = fld.name();\n      final StoredDocument sDoc = reader.document(docID, Collections.singleton(fldName));\n      final StorableField sField = sDoc.getField(fldName);\n      if (Field.class.equals(fld.getClass())) {\n        assertEquals(fld.binaryValue(), sField.binaryValue());\n        assertEquals(fld.stringValue(), sField.stringValue());\n      } else {\n        assertEquals(fld.numericValue(), sField.numericValue());\n      }\n    }\n    reader.close();\n    iw.shutdown();\n    dir.close();\n  }\n\n","sourceOld":"  public void testReadSkip() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwConf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwConf.setMaxBufferedDocs(RandomInts.randomIntBetween(random(), 2, 30));\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwConf);\n    \n    FieldType ft = new FieldType();\n    ft.setStored(true);\n    ft.freeze();\n\n    final String string = TestUtil.randomSimpleString(random(), 50);\n    final byte[] bytes = string.getBytes(StandardCharsets.UTF_8);\n    final long l = random().nextBoolean() ? random().nextInt(42) : random().nextLong();\n    final int i = random().nextBoolean() ? random().nextInt(42) : random().nextInt();\n    final float f = random().nextFloat();\n    final double d = random().nextDouble();\n\n    List<Field> fields = Arrays.asList(\n        new Field(\"bytes\", bytes, ft),\n        new Field(\"string\", string, ft),\n        new LongField(\"long\", l, Store.YES),\n        new IntField(\"int\", i, Store.YES),\n        new FloatField(\"float\", f, Store.YES),\n        new DoubleField(\"double\", d, Store.YES)\n    );\n\n    for (int k = 0; k < 100; ++k) {\n      Document doc = new Document();\n      for (Field fld : fields) {\n        doc.add(fld);\n      }\n      iw.w.addDocument(doc);\n    }\n    iw.commit();\n\n    final DirectoryReader reader = DirectoryReader.open(dir);\n    final int docID = random().nextInt(100);\n    for (Field fld : fields) {\n      String fldName = fld.name();\n      final StoredDocument sDoc = reader.document(docID, Collections.singleton(fldName));\n      final StorableField sField = sDoc.getField(fldName);\n      if (Field.class.equals(fld.getClass())) {\n        assertEquals(fld.binaryValue(), sField.binaryValue());\n        assertEquals(fld.stringValue(), sField.stringValue());\n      } else {\n        assertEquals(fld.numericValue(), sField.numericValue());\n      }\n    }\n    reader.close();\n    iw.shutdown();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseStoredFieldsFormatTestCase#testReadSkip().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseStoredFieldsFormatTestCase#testReadSkip().mjava","sourceNew":"  public void testReadSkip() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwConf = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwConf.setMaxBufferedDocs(RandomInts.randomIntBetween(random(), 2, 30));\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwConf);\n    \n    FieldType ft = new FieldType();\n    ft.setStored(true);\n    ft.freeze();\n\n    final String string = TestUtil.randomSimpleString(random(), 50);\n    final byte[] bytes = string.getBytes(StandardCharsets.UTF_8);\n    final long l = random().nextBoolean() ? random().nextInt(42) : random().nextLong();\n    final int i = random().nextBoolean() ? random().nextInt(42) : random().nextInt();\n    final float f = random().nextFloat();\n    final double d = random().nextDouble();\n\n    List<Field> fields = Arrays.asList(\n        new Field(\"bytes\", bytes, ft),\n        new Field(\"string\", string, ft),\n        new LongField(\"long\", l, Store.YES),\n        new IntField(\"int\", i, Store.YES),\n        new FloatField(\"float\", f, Store.YES),\n        new DoubleField(\"double\", d, Store.YES)\n    );\n\n    for (int k = 0; k < 100; ++k) {\n      Document doc = new Document();\n      for (Field fld : fields) {\n        doc.add(fld);\n      }\n      iw.w.addDocument(doc);\n    }\n    iw.commit();\n\n    final DirectoryReader reader = DirectoryReader.open(dir);\n    final int docID = random().nextInt(100);\n    for (Field fld : fields) {\n      String fldName = fld.name();\n      final StoredDocument sDoc = reader.document(docID, Collections.singleton(fldName));\n      final StorableField sField = sDoc.getField(fldName);\n      if (Field.class.equals(fld.getClass())) {\n        assertEquals(fld.binaryValue(), sField.binaryValue());\n        assertEquals(fld.stringValue(), sField.stringValue());\n      } else {\n        assertEquals(fld.numericValue(), sField.numericValue());\n      }\n    }\n    reader.close();\n    iw.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testReadSkip() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwConf = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwConf.setMaxBufferedDocs(RandomInts.randomIntBetween(random(), 2, 30));\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwConf);\n    \n    FieldType ft = new FieldType();\n    ft.setStored(true);\n    ft.freeze();\n\n    final String string = TestUtil.randomSimpleString(random(), 50);\n    final byte[] bytes = string.getBytes(StandardCharsets.UTF_8);\n    final long l = random().nextBoolean() ? random().nextInt(42) : random().nextLong();\n    final int i = random().nextBoolean() ? random().nextInt(42) : random().nextInt();\n    final float f = random().nextFloat();\n    final double d = random().nextDouble();\n\n    List<Field> fields = Arrays.asList(\n        new Field(\"bytes\", bytes, ft),\n        new Field(\"string\", string, ft),\n        new LongField(\"long\", l, Store.YES),\n        new IntField(\"int\", i, Store.YES),\n        new FloatField(\"float\", f, Store.YES),\n        new DoubleField(\"double\", d, Store.YES)\n    );\n\n    for (int k = 0; k < 100; ++k) {\n      Document doc = new Document();\n      for (Field fld : fields) {\n        doc.add(fld);\n      }\n      iw.w.addDocument(doc);\n    }\n    iw.commit();\n\n    final DirectoryReader reader = DirectoryReader.open(dir);\n    final int docID = random().nextInt(100);\n    for (Field fld : fields) {\n      String fldName = fld.name();\n      final StoredDocument sDoc = reader.document(docID, Collections.singleton(fldName));\n      final StorableField sField = sDoc.getField(fldName);\n      if (Field.class.equals(fld.getClass())) {\n        assertEquals(fld.binaryValue(), sField.binaryValue());\n        assertEquals(fld.stringValue(), sField.stringValue());\n      } else {\n        assertEquals(fld.numericValue(), sField.numericValue());\n      }\n    }\n    reader.close();\n    iw.shutdown();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"770342641f7b505eaa8dccdc666158bff2419109","date":1449868421,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseStoredFieldsFormatTestCase#testReadSkip().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseStoredFieldsFormatTestCase#testReadSkip().mjava","sourceNew":"  public void testReadSkip() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwConf = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwConf.setMaxBufferedDocs(RandomInts.randomIntBetween(random(), 2, 30));\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwConf);\n    \n    FieldType ft = new FieldType();\n    ft.setStored(true);\n    ft.freeze();\n\n    final String string = TestUtil.randomSimpleString(random(), 50);\n    final byte[] bytes = string.getBytes(StandardCharsets.UTF_8);\n    final long l = random().nextBoolean() ? random().nextInt(42) : random().nextLong();\n    final int i = random().nextBoolean() ? random().nextInt(42) : random().nextInt();\n    final float f = random().nextFloat();\n    final double d = random().nextDouble();\n\n    List<Field> fields = Arrays.asList(\n        new Field(\"bytes\", bytes, ft),\n        new Field(\"string\", string, ft),\n        new LegacyLongField(\"long\", l, Store.YES),\n        new LegacyIntField(\"int\", i, Store.YES),\n        new LegacyFloatField(\"float\", f, Store.YES),\n        new LegacyDoubleField(\"double\", d, Store.YES)\n    );\n\n    for (int k = 0; k < 100; ++k) {\n      Document doc = new Document();\n      for (Field fld : fields) {\n        doc.add(fld);\n      }\n      iw.w.addDocument(doc);\n    }\n    iw.commit();\n\n    final DirectoryReader reader = DirectoryReader.open(dir);\n    final int docID = random().nextInt(100);\n    for (Field fld : fields) {\n      String fldName = fld.name();\n      final StoredDocument sDoc = reader.document(docID, Collections.singleton(fldName));\n      final StorableField sField = sDoc.getField(fldName);\n      if (Field.class.equals(fld.getClass())) {\n        assertEquals(fld.binaryValue(), sField.binaryValue());\n        assertEquals(fld.stringValue(), sField.stringValue());\n      } else {\n        assertEquals(fld.numericValue(), sField.numericValue());\n      }\n    }\n    reader.close();\n    iw.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testReadSkip() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwConf = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwConf.setMaxBufferedDocs(RandomInts.randomIntBetween(random(), 2, 30));\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwConf);\n    \n    FieldType ft = new FieldType();\n    ft.setStored(true);\n    ft.freeze();\n\n    final String string = TestUtil.randomSimpleString(random(), 50);\n    final byte[] bytes = string.getBytes(StandardCharsets.UTF_8);\n    final long l = random().nextBoolean() ? random().nextInt(42) : random().nextLong();\n    final int i = random().nextBoolean() ? random().nextInt(42) : random().nextInt();\n    final float f = random().nextFloat();\n    final double d = random().nextDouble();\n\n    List<Field> fields = Arrays.asList(\n        new Field(\"bytes\", bytes, ft),\n        new Field(\"string\", string, ft),\n        new LongField(\"long\", l, Store.YES),\n        new IntField(\"int\", i, Store.YES),\n        new FloatField(\"float\", f, Store.YES),\n        new DoubleField(\"double\", d, Store.YES)\n    );\n\n    for (int k = 0; k < 100; ++k) {\n      Document doc = new Document();\n      for (Field fld : fields) {\n        doc.add(fld);\n      }\n      iw.w.addDocument(doc);\n    }\n    iw.commit();\n\n    final DirectoryReader reader = DirectoryReader.open(dir);\n    final int docID = random().nextInt(100);\n    for (Field fld : fields) {\n      String fldName = fld.name();\n      final StoredDocument sDoc = reader.document(docID, Collections.singleton(fldName));\n      final StorableField sField = sDoc.getField(fldName);\n      if (Field.class.equals(fld.getClass())) {\n        assertEquals(fld.binaryValue(), sField.binaryValue());\n        assertEquals(fld.stringValue(), sField.stringValue());\n      } else {\n        assertEquals(fld.numericValue(), sField.numericValue());\n      }\n    }\n    reader.close();\n    iw.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","date":1453060490,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseStoredFieldsFormatTestCase#testReadSkip().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseStoredFieldsFormatTestCase#testReadSkip().mjava","sourceNew":"  public void testReadSkip() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwConf = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwConf.setMaxBufferedDocs(RandomInts.randomIntBetween(random(), 2, 30));\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwConf);\n    \n    FieldType ft = new FieldType();\n    ft.setStored(true);\n    ft.freeze();\n\n    final String string = TestUtil.randomSimpleString(random(), 50);\n    final byte[] bytes = string.getBytes(StandardCharsets.UTF_8);\n    final long l = random().nextBoolean() ? random().nextInt(42) : random().nextLong();\n    final int i = random().nextBoolean() ? random().nextInt(42) : random().nextInt();\n    final float f = random().nextFloat();\n    final double d = random().nextDouble();\n\n    List<Field> fields = Arrays.asList(\n        new Field(\"bytes\", bytes, ft),\n        new Field(\"string\", string, ft),\n        new LegacyLongField(\"long\", l, Store.YES),\n        new LegacyIntField(\"int\", i, Store.YES),\n        new LegacyFloatField(\"float\", f, Store.YES),\n        new LegacyDoubleField(\"double\", d, Store.YES)\n    );\n\n    for (int k = 0; k < 100; ++k) {\n      Document doc = new Document();\n      for (Field fld : fields) {\n        doc.add(fld);\n      }\n      iw.w.addDocument(doc);\n    }\n    iw.commit();\n\n    final DirectoryReader reader = DirectoryReader.open(dir);\n    final int docID = random().nextInt(100);\n    for (Field fld : fields) {\n      String fldName = fld.name();\n      final Document sDoc = reader.document(docID, Collections.singleton(fldName));\n      final IndexableField sField = sDoc.getField(fldName);\n      if (Field.class.equals(fld.getClass())) {\n        assertEquals(fld.binaryValue(), sField.binaryValue());\n        assertEquals(fld.stringValue(), sField.stringValue());\n      } else {\n        assertEquals(fld.numericValue(), sField.numericValue());\n      }\n    }\n    reader.close();\n    iw.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testReadSkip() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwConf = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwConf.setMaxBufferedDocs(RandomInts.randomIntBetween(random(), 2, 30));\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwConf);\n    \n    FieldType ft = new FieldType();\n    ft.setStored(true);\n    ft.freeze();\n\n    final String string = TestUtil.randomSimpleString(random(), 50);\n    final byte[] bytes = string.getBytes(StandardCharsets.UTF_8);\n    final long l = random().nextBoolean() ? random().nextInt(42) : random().nextLong();\n    final int i = random().nextBoolean() ? random().nextInt(42) : random().nextInt();\n    final float f = random().nextFloat();\n    final double d = random().nextDouble();\n\n    List<Field> fields = Arrays.asList(\n        new Field(\"bytes\", bytes, ft),\n        new Field(\"string\", string, ft),\n        new LegacyLongField(\"long\", l, Store.YES),\n        new LegacyIntField(\"int\", i, Store.YES),\n        new LegacyFloatField(\"float\", f, Store.YES),\n        new LegacyDoubleField(\"double\", d, Store.YES)\n    );\n\n    for (int k = 0; k < 100; ++k) {\n      Document doc = new Document();\n      for (Field fld : fields) {\n        doc.add(fld);\n      }\n      iw.w.addDocument(doc);\n    }\n    iw.commit();\n\n    final DirectoryReader reader = DirectoryReader.open(dir);\n    final int docID = random().nextInt(100);\n    for (Field fld : fields) {\n      String fldName = fld.name();\n      final StoredDocument sDoc = reader.document(docID, Collections.singleton(fldName));\n      final StorableField sField = sDoc.getField(fldName);\n      if (Field.class.equals(fld.getClass())) {\n        assertEquals(fld.binaryValue(), sField.binaryValue());\n        assertEquals(fld.stringValue(), sField.stringValue());\n      } else {\n        assertEquals(fld.numericValue(), sField.numericValue());\n      }\n    }\n    reader.close();\n    iw.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"906cb8d88e3e0d9b0dc30dafb99c128a6b7ad004","date":1457440594,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseStoredFieldsFormatTestCase#testReadSkip().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseStoredFieldsFormatTestCase#testReadSkip().mjava","sourceNew":"  public void testReadSkip() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwConf = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwConf.setMaxBufferedDocs(RandomInts.randomIntBetween(random(), 2, 30));\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwConf);\n    \n    FieldType ft = new FieldType();\n    ft.setStored(true);\n    ft.freeze();\n\n    final String string = TestUtil.randomSimpleString(random(), 50);\n    final byte[] bytes = string.getBytes(StandardCharsets.UTF_8);\n    final long l = random().nextBoolean() ? random().nextInt(42) : random().nextLong();\n    final int i = random().nextBoolean() ? random().nextInt(42) : random().nextInt();\n    final float f = random().nextFloat();\n    final double d = random().nextDouble();\n\n    List<Field> fields = Arrays.asList(\n        new Field(\"bytes\", bytes, ft),\n        new Field(\"string\", string, ft),\n        new StoredField(\"long\", l),\n        new StoredField(\"int\", i),\n        new StoredField(\"float\", f),\n        new StoredField(\"double\", d)\n    );\n\n    for (int k = 0; k < 100; ++k) {\n      Document doc = new Document();\n      for (Field fld : fields) {\n        doc.add(fld);\n      }\n      iw.w.addDocument(doc);\n    }\n    iw.commit();\n\n    final DirectoryReader reader = DirectoryReader.open(dir);\n    final int docID = random().nextInt(100);\n    for (Field fld : fields) {\n      String fldName = fld.name();\n      final Document sDoc = reader.document(docID, Collections.singleton(fldName));\n      final IndexableField sField = sDoc.getField(fldName);\n      if (Field.class.equals(fld.getClass())) {\n        assertEquals(fld.binaryValue(), sField.binaryValue());\n        assertEquals(fld.stringValue(), sField.stringValue());\n      } else {\n        assertEquals(fld.numericValue(), sField.numericValue());\n      }\n    }\n    reader.close();\n    iw.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testReadSkip() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwConf = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwConf.setMaxBufferedDocs(RandomInts.randomIntBetween(random(), 2, 30));\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwConf);\n    \n    FieldType ft = new FieldType();\n    ft.setStored(true);\n    ft.freeze();\n\n    final String string = TestUtil.randomSimpleString(random(), 50);\n    final byte[] bytes = string.getBytes(StandardCharsets.UTF_8);\n    final long l = random().nextBoolean() ? random().nextInt(42) : random().nextLong();\n    final int i = random().nextBoolean() ? random().nextInt(42) : random().nextInt();\n    final float f = random().nextFloat();\n    final double d = random().nextDouble();\n\n    List<Field> fields = Arrays.asList(\n        new Field(\"bytes\", bytes, ft),\n        new Field(\"string\", string, ft),\n        new LegacyLongField(\"long\", l, Store.YES),\n        new LegacyIntField(\"int\", i, Store.YES),\n        new LegacyFloatField(\"float\", f, Store.YES),\n        new LegacyDoubleField(\"double\", d, Store.YES)\n    );\n\n    for (int k = 0; k < 100; ++k) {\n      Document doc = new Document();\n      for (Field fld : fields) {\n        doc.add(fld);\n      }\n      iw.w.addDocument(doc);\n    }\n    iw.commit();\n\n    final DirectoryReader reader = DirectoryReader.open(dir);\n    final int docID = random().nextInt(100);\n    for (Field fld : fields) {\n      String fldName = fld.name();\n      final Document sDoc = reader.document(docID, Collections.singleton(fldName));\n      final IndexableField sField = sDoc.getField(fldName);\n      if (Field.class.equals(fld.getClass())) {\n        assertEquals(fld.binaryValue(), sField.binaryValue());\n        assertEquals(fld.stringValue(), sField.stringValue());\n      } else {\n        assertEquals(fld.numericValue(), sField.numericValue());\n      }\n    }\n    reader.close();\n    iw.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6c3ddb1d93e1f94eb5a00f9bc3e64439807ecf7e","date":1457443460,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseStoredFieldsFormatTestCase#testReadSkip().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseStoredFieldsFormatTestCase#testReadSkip().mjava","sourceNew":"  public void testReadSkip() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwConf = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwConf.setMaxBufferedDocs(RandomInts.randomIntBetween(random(), 2, 30));\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwConf);\n    \n    FieldType ft = new FieldType();\n    ft.setStored(true);\n    ft.freeze();\n\n    final String string = TestUtil.randomSimpleString(random(), 50);\n    final byte[] bytes = string.getBytes(StandardCharsets.UTF_8);\n    final long l = random().nextBoolean() ? random().nextInt(42) : random().nextLong();\n    final int i = random().nextBoolean() ? random().nextInt(42) : random().nextInt();\n    final float f = random().nextFloat();\n    final double d = random().nextDouble();\n\n    List<Field> fields = Arrays.asList(\n        new Field(\"bytes\", bytes, ft),\n        new Field(\"string\", string, ft),\n        new StoredField(\"long\", l),\n        new StoredField(\"int\", i),\n        new StoredField(\"float\", f),\n        new StoredField(\"double\", d)\n    );\n\n    for (int k = 0; k < 100; ++k) {\n      Document doc = new Document();\n      for (Field fld : fields) {\n        doc.add(fld);\n      }\n      iw.w.addDocument(doc);\n    }\n    iw.commit();\n\n    final DirectoryReader reader = DirectoryReader.open(dir);\n    final int docID = random().nextInt(100);\n    for (Field fld : fields) {\n      String fldName = fld.name();\n      final Document sDoc = reader.document(docID, Collections.singleton(fldName));\n      final IndexableField sField = sDoc.getField(fldName);\n      if (Field.class.equals(fld.getClass())) {\n        assertEquals(fld.binaryValue(), sField.binaryValue());\n        assertEquals(fld.stringValue(), sField.stringValue());\n      } else {\n        assertEquals(fld.numericValue(), sField.numericValue());\n      }\n    }\n    reader.close();\n    iw.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testReadSkip() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwConf = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwConf.setMaxBufferedDocs(RandomInts.randomIntBetween(random(), 2, 30));\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwConf);\n    \n    FieldType ft = new FieldType();\n    ft.setStored(true);\n    ft.freeze();\n\n    final String string = TestUtil.randomSimpleString(random(), 50);\n    final byte[] bytes = string.getBytes(StandardCharsets.UTF_8);\n    final long l = random().nextBoolean() ? random().nextInt(42) : random().nextLong();\n    final int i = random().nextBoolean() ? random().nextInt(42) : random().nextInt();\n    final float f = random().nextFloat();\n    final double d = random().nextDouble();\n\n    List<Field> fields = Arrays.asList(\n        new Field(\"bytes\", bytes, ft),\n        new Field(\"string\", string, ft),\n        new LegacyLongField(\"long\", l, Store.YES),\n        new LegacyIntField(\"int\", i, Store.YES),\n        new LegacyFloatField(\"float\", f, Store.YES),\n        new LegacyDoubleField(\"double\", d, Store.YES)\n    );\n\n    for (int k = 0; k < 100; ++k) {\n      Document doc = new Document();\n      for (Field fld : fields) {\n        doc.add(fld);\n      }\n      iw.w.addDocument(doc);\n    }\n    iw.commit();\n\n    final DirectoryReader reader = DirectoryReader.open(dir);\n    final int docID = random().nextInt(100);\n    for (Field fld : fields) {\n      String fldName = fld.name();\n      final Document sDoc = reader.document(docID, Collections.singleton(fldName));\n      final IndexableField sField = sDoc.getField(fldName);\n      if (Field.class.equals(fld.getClass())) {\n        assertEquals(fld.binaryValue(), sField.binaryValue());\n        assertEquals(fld.stringValue(), sField.stringValue());\n      } else {\n        assertEquals(fld.numericValue(), sField.numericValue());\n      }\n    }\n    reader.close();\n    iw.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6448f67be45147de82a85cd903fec34e8930da75","date":1477041277,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseStoredFieldsFormatTestCase#testReadSkip().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseStoredFieldsFormatTestCase#testReadSkip().mjava","sourceNew":"  public void testReadSkip() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwConf = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwConf.setMaxBufferedDocs(RandomNumbers.randomIntBetween(random(), 2, 30));\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwConf);\n    \n    FieldType ft = new FieldType();\n    ft.setStored(true);\n    ft.freeze();\n\n    final String string = TestUtil.randomSimpleString(random(), 50);\n    final byte[] bytes = string.getBytes(StandardCharsets.UTF_8);\n    final long l = random().nextBoolean() ? random().nextInt(42) : random().nextLong();\n    final int i = random().nextBoolean() ? random().nextInt(42) : random().nextInt();\n    final float f = random().nextFloat();\n    final double d = random().nextDouble();\n\n    List<Field> fields = Arrays.asList(\n        new Field(\"bytes\", bytes, ft),\n        new Field(\"string\", string, ft),\n        new StoredField(\"long\", l),\n        new StoredField(\"int\", i),\n        new StoredField(\"float\", f),\n        new StoredField(\"double\", d)\n    );\n\n    for (int k = 0; k < 100; ++k) {\n      Document doc = new Document();\n      for (Field fld : fields) {\n        doc.add(fld);\n      }\n      iw.w.addDocument(doc);\n    }\n    iw.commit();\n\n    final DirectoryReader reader = DirectoryReader.open(dir);\n    final int docID = random().nextInt(100);\n    for (Field fld : fields) {\n      String fldName = fld.name();\n      final Document sDoc = reader.document(docID, Collections.singleton(fldName));\n      final IndexableField sField = sDoc.getField(fldName);\n      if (Field.class.equals(fld.getClass())) {\n        assertEquals(fld.binaryValue(), sField.binaryValue());\n        assertEquals(fld.stringValue(), sField.stringValue());\n      } else {\n        assertEquals(fld.numericValue(), sField.numericValue());\n      }\n    }\n    reader.close();\n    iw.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testReadSkip() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwConf = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwConf.setMaxBufferedDocs(RandomInts.randomIntBetween(random(), 2, 30));\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwConf);\n    \n    FieldType ft = new FieldType();\n    ft.setStored(true);\n    ft.freeze();\n\n    final String string = TestUtil.randomSimpleString(random(), 50);\n    final byte[] bytes = string.getBytes(StandardCharsets.UTF_8);\n    final long l = random().nextBoolean() ? random().nextInt(42) : random().nextLong();\n    final int i = random().nextBoolean() ? random().nextInt(42) : random().nextInt();\n    final float f = random().nextFloat();\n    final double d = random().nextDouble();\n\n    List<Field> fields = Arrays.asList(\n        new Field(\"bytes\", bytes, ft),\n        new Field(\"string\", string, ft),\n        new StoredField(\"long\", l),\n        new StoredField(\"int\", i),\n        new StoredField(\"float\", f),\n        new StoredField(\"double\", d)\n    );\n\n    for (int k = 0; k < 100; ++k) {\n      Document doc = new Document();\n      for (Field fld : fields) {\n        doc.add(fld);\n      }\n      iw.w.addDocument(doc);\n    }\n    iw.commit();\n\n    final DirectoryReader reader = DirectoryReader.open(dir);\n    final int docID = random().nextInt(100);\n    for (Field fld : fields) {\n      String fldName = fld.name();\n      final Document sDoc = reader.document(docID, Collections.singleton(fldName));\n      final IndexableField sField = sDoc.getField(fldName);\n      if (Field.class.equals(fld.getClass())) {\n        assertEquals(fld.binaryValue(), sField.binaryValue());\n        assertEquals(fld.stringValue(), sField.stringValue());\n      } else {\n        assertEquals(fld.numericValue(), sField.numericValue());\n      }\n    }\n    reader.close();\n    iw.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"80d0e6d59ae23f4a6f30eaf40bfb40742300287f","date":1477598926,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseStoredFieldsFormatTestCase#testReadSkip().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseStoredFieldsFormatTestCase#testReadSkip().mjava","sourceNew":"  public void testReadSkip() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwConf = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwConf.setMaxBufferedDocs(RandomNumbers.randomIntBetween(random(), 2, 30));\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwConf);\n    \n    FieldType ft = new FieldType();\n    ft.setStored(true);\n    ft.freeze();\n\n    final String string = TestUtil.randomSimpleString(random(), 50);\n    final byte[] bytes = string.getBytes(StandardCharsets.UTF_8);\n    final long l = random().nextBoolean() ? random().nextInt(42) : random().nextLong();\n    final int i = random().nextBoolean() ? random().nextInt(42) : random().nextInt();\n    final float f = random().nextFloat();\n    final double d = random().nextDouble();\n\n    List<Field> fields = Arrays.asList(\n        new Field(\"bytes\", bytes, ft),\n        new Field(\"string\", string, ft),\n        new StoredField(\"long\", l),\n        new StoredField(\"int\", i),\n        new StoredField(\"float\", f),\n        new StoredField(\"double\", d)\n    );\n\n    for (int k = 0; k < 100; ++k) {\n      Document doc = new Document();\n      for (Field fld : fields) {\n        doc.add(fld);\n      }\n      iw.w.addDocument(doc);\n    }\n    iw.commit();\n\n    final DirectoryReader reader = DirectoryReader.open(dir);\n    final int docID = random().nextInt(100);\n    for (Field fld : fields) {\n      String fldName = fld.name();\n      final Document sDoc = reader.document(docID, Collections.singleton(fldName));\n      final IndexableField sField = sDoc.getField(fldName);\n      if (Field.class.equals(fld.getClass())) {\n        assertEquals(fld.binaryValue(), sField.binaryValue());\n        assertEquals(fld.stringValue(), sField.stringValue());\n      } else {\n        assertEquals(fld.numericValue(), sField.numericValue());\n      }\n    }\n    reader.close();\n    iw.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testReadSkip() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwConf = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwConf.setMaxBufferedDocs(RandomInts.randomIntBetween(random(), 2, 30));\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwConf);\n    \n    FieldType ft = new FieldType();\n    ft.setStored(true);\n    ft.freeze();\n\n    final String string = TestUtil.randomSimpleString(random(), 50);\n    final byte[] bytes = string.getBytes(StandardCharsets.UTF_8);\n    final long l = random().nextBoolean() ? random().nextInt(42) : random().nextLong();\n    final int i = random().nextBoolean() ? random().nextInt(42) : random().nextInt();\n    final float f = random().nextFloat();\n    final double d = random().nextDouble();\n\n    List<Field> fields = Arrays.asList(\n        new Field(\"bytes\", bytes, ft),\n        new Field(\"string\", string, ft),\n        new StoredField(\"long\", l),\n        new StoredField(\"int\", i),\n        new StoredField(\"float\", f),\n        new StoredField(\"double\", d)\n    );\n\n    for (int k = 0; k < 100; ++k) {\n      Document doc = new Document();\n      for (Field fld : fields) {\n        doc.add(fld);\n      }\n      iw.w.addDocument(doc);\n    }\n    iw.commit();\n\n    final DirectoryReader reader = DirectoryReader.open(dir);\n    final int docID = random().nextInt(100);\n    for (Field fld : fields) {\n      String fldName = fld.name();\n      final Document sDoc = reader.document(docID, Collections.singleton(fldName));\n      final IndexableField sField = sDoc.getField(fldName);\n      if (Field.class.equals(fld.getClass())) {\n        assertEquals(fld.binaryValue(), sField.binaryValue());\n        assertEquals(fld.stringValue(), sField.stringValue());\n      } else {\n        assertEquals(fld.numericValue(), sField.numericValue());\n      }\n    }\n    reader.close();\n    iw.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dbc046116d49cd3d0c50f7169cabaa295bc23a4a","date":1552989114,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseStoredFieldsFormatTestCase#testReadSkip().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseStoredFieldsFormatTestCase#testReadSkip().mjava","sourceNew":"  public void testReadSkip() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwConf = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwConf.setMaxBufferedDocs(RandomNumbers.randomIntBetween(random(), 2, 30));\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwConf);\n    \n    FieldType ft = new FieldType();\n    ft.setStored(true);\n    ft.freeze();\n\n    final String string = TestUtil.randomSimpleString(random(), 50);\n    final byte[] bytes = string.getBytes(StandardCharsets.UTF_8);\n    final long l = random().nextBoolean() ? random().nextInt(42) : random().nextLong();\n    final int i = random().nextBoolean() ? random().nextInt(42) : random().nextInt();\n    final float f = random().nextFloat();\n    final double d = random().nextDouble();\n\n    List<Field> fields = Arrays.asList(\n        new Field(\"bytes\", bytes, ft),\n        new Field(\"string\", string, ft),\n        new StoredField(\"long\", l),\n        new StoredField(\"int\", i),\n        new StoredField(\"float\", f),\n        new StoredField(\"double\", d)\n    );\n\n    for (int k = 0; k < 100; ++k) {\n      Document doc = new Document();\n      for (Field fld : fields) {\n        doc.add(fld);\n      }\n      iw.w.addDocument(doc);\n    }\n    iw.commit();\n\n    final DirectoryReader reader = maybeWrapWithMergingReader(DirectoryReader.open(dir));\n    final int docID = random().nextInt(100);\n    for (Field fld : fields) {\n      String fldName = fld.name();\n      final Document sDoc = reader.document(docID, Collections.singleton(fldName));\n      final IndexableField sField = sDoc.getField(fldName);\n      if (Field.class.equals(fld.getClass())) {\n        assertEquals(fld.binaryValue(), sField.binaryValue());\n        assertEquals(fld.stringValue(), sField.stringValue());\n      } else {\n        assertEquals(fld.numericValue(), sField.numericValue());\n      }\n    }\n    reader.close();\n    iw.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testReadSkip() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwConf = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwConf.setMaxBufferedDocs(RandomNumbers.randomIntBetween(random(), 2, 30));\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwConf);\n    \n    FieldType ft = new FieldType();\n    ft.setStored(true);\n    ft.freeze();\n\n    final String string = TestUtil.randomSimpleString(random(), 50);\n    final byte[] bytes = string.getBytes(StandardCharsets.UTF_8);\n    final long l = random().nextBoolean() ? random().nextInt(42) : random().nextLong();\n    final int i = random().nextBoolean() ? random().nextInt(42) : random().nextInt();\n    final float f = random().nextFloat();\n    final double d = random().nextDouble();\n\n    List<Field> fields = Arrays.asList(\n        new Field(\"bytes\", bytes, ft),\n        new Field(\"string\", string, ft),\n        new StoredField(\"long\", l),\n        new StoredField(\"int\", i),\n        new StoredField(\"float\", f),\n        new StoredField(\"double\", d)\n    );\n\n    for (int k = 0; k < 100; ++k) {\n      Document doc = new Document();\n      for (Field fld : fields) {\n        doc.add(fld);\n      }\n      iw.w.addDocument(doc);\n    }\n    iw.commit();\n\n    final DirectoryReader reader = DirectoryReader.open(dir);\n    final int docID = random().nextInt(100);\n    for (Field fld : fields) {\n      String fldName = fld.name();\n      final Document sDoc = reader.document(docID, Collections.singleton(fldName));\n      final IndexableField sField = sDoc.getField(fldName);\n      if (Field.class.equals(fld.getClass())) {\n        assertEquals(fld.binaryValue(), sField.binaryValue());\n        assertEquals(fld.stringValue(), sField.stringValue());\n      } else {\n        assertEquals(fld.numericValue(), sField.numericValue());\n      }\n    }\n    reader.close();\n    iw.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5eb2511ababf862ea11e10761c70ee560cd84510":["6613659748fe4411a7dcf85266e55db1f95f7315","7d89d7e4e5101347833eea558851bf4209218619"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"6613659748fe4411a7dcf85266e55db1f95f7315":["70b55953b6a72596cb534ead735a8b849a473cac"],"dbc046116d49cd3d0c50f7169cabaa295bc23a4a":["6448f67be45147de82a85cd903fec34e8930da75"],"6c3ddb1d93e1f94eb5a00f9bc3e64439807ecf7e":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","906cb8d88e3e0d9b0dc30dafb99c128a6b7ad004"],"906cb8d88e3e0d9b0dc30dafb99c128a6b7ad004":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"7d89d7e4e5101347833eea558851bf4209218619":["6613659748fe4411a7dcf85266e55db1f95f7315"],"770342641f7b505eaa8dccdc666158bff2419109":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"6448f67be45147de82a85cd903fec34e8930da75":["6c3ddb1d93e1f94eb5a00f9bc3e64439807ecf7e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":["6c3ddb1d93e1f94eb5a00f9bc3e64439807ecf7e","6448f67be45147de82a85cd903fec34e8930da75"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"70b55953b6a72596cb534ead735a8b849a473cac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["7d89d7e4e5101347833eea558851bf4209218619"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["dbc046116d49cd3d0c50f7169cabaa295bc23a4a"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["770342641f7b505eaa8dccdc666158bff2419109"]},"commit2Childs":{"5eb2511ababf862ea11e10761c70ee560cd84510":[],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"6613659748fe4411a7dcf85266e55db1f95f7315":["5eb2511ababf862ea11e10761c70ee560cd84510","7d89d7e4e5101347833eea558851bf4209218619"],"dbc046116d49cd3d0c50f7169cabaa295bc23a4a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6c3ddb1d93e1f94eb5a00f9bc3e64439807ecf7e":["6448f67be45147de82a85cd903fec34e8930da75","80d0e6d59ae23f4a6f30eaf40bfb40742300287f"],"906cb8d88e3e0d9b0dc30dafb99c128a6b7ad004":["6c3ddb1d93e1f94eb5a00f9bc3e64439807ecf7e"],"7d89d7e4e5101347833eea558851bf4209218619":["5eb2511ababf862ea11e10761c70ee560cd84510","ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"770342641f7b505eaa8dccdc666158bff2419109":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"6448f67be45147de82a85cd903fec34e8930da75":["dbc046116d49cd3d0c50f7169cabaa295bc23a4a","80d0e6d59ae23f4a6f30eaf40bfb40742300287f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["70b55953b6a72596cb534ead735a8b849a473cac"],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["770342641f7b505eaa8dccdc666158bff2419109"],"70b55953b6a72596cb534ead735a8b849a473cac":["6613659748fe4411a7dcf85266e55db1f95f7315"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["6c3ddb1d93e1f94eb5a00f9bc3e64439807ecf7e","906cb8d88e3e0d9b0dc30dafb99c128a6b7ad004"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","80d0e6d59ae23f4a6f30eaf40bfb40742300287f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}