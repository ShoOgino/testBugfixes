{"path":"lucene/backwards/src/java/org/apache/lucene/index/IndexWriter#close(boolean).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/index/IndexWriter#close(boolean).mjava","pathOld":"backwards/src/java/org/apache/lucene/index/IndexWriter#close(boolean).mjava","sourceNew":"  /**\n   * Closes the index with or without waiting for currently\n   * running merges to finish.  This is only meaningful when\n   * using a MergeScheduler that runs merges in background\n   * threads.\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer, again.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * <p><b>NOTE</b>: it is dangerous to always call\n   * close(false), especially when IndexWriter is not open\n   * for very long, because this can result in \"merge\n   * starvation\" whereby long merges will never have a\n   * chance to finish.  This will cause too many segments in\n   * your index over time.</p>\n   *\n   * @param waitForMerges if true, this call will block\n   * until all merges complete; else, it will ask all\n   * running merges to abort, wait until those merges have\n   * finished (which should be at most a few seconds), and\n   * then return.\n   */\n  public void close(boolean waitForMerges) throws CorruptIndexException, IOException {\n\n    // Ensure that only one thread actually gets to do the closing:\n    if (shouldClose()) {\n      // If any methods have hit OutOfMemoryError, then abort\n      // on close, in case the internal state of IndexWriter\n      // or DocumentsWriter is corrupt\n      if (hitOOM)\n        rollbackInternal();\n      else\n        closeInternal(waitForMerges);\n    }\n  }\n\n","sourceOld":"  /**\n   * Closes the index with or without waiting for currently\n   * running merges to finish.  This is only meaningful when\n   * using a MergeScheduler that runs merges in background\n   * threads.\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer, again.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * <p><b>NOTE</b>: it is dangerous to always call\n   * close(false), especially when IndexWriter is not open\n   * for very long, because this can result in \"merge\n   * starvation\" whereby long merges will never have a\n   * chance to finish.  This will cause too many segments in\n   * your index over time.</p>\n   *\n   * @param waitForMerges if true, this call will block\n   * until all merges complete; else, it will ask all\n   * running merges to abort, wait until those merges have\n   * finished (which should be at most a few seconds), and\n   * then return.\n   */\n  public void close(boolean waitForMerges) throws CorruptIndexException, IOException {\n\n    // Ensure that only one thread actually gets to do the closing:\n    if (shouldClose()) {\n      // If any methods have hit OutOfMemoryError, then abort\n      // on close, in case the internal state of IndexWriter\n      // or DocumentsWriter is corrupt\n      if (hitOOM)\n        rollbackInternal();\n      else\n        closeInternal(waitForMerges);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/java/org/apache/lucene/index/IndexWriter#close(boolean).mjava","sourceNew":null,"sourceOld":"  /**\n   * Closes the index with or without waiting for currently\n   * running merges to finish.  This is only meaningful when\n   * using a MergeScheduler that runs merges in background\n   * threads.\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer, again.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * <p><b>NOTE</b>: it is dangerous to always call\n   * close(false), especially when IndexWriter is not open\n   * for very long, because this can result in \"merge\n   * starvation\" whereby long merges will never have a\n   * chance to finish.  This will cause too many segments in\n   * your index over time.</p>\n   *\n   * @param waitForMerges if true, this call will block\n   * until all merges complete; else, it will ask all\n   * running merges to abort, wait until those merges have\n   * finished (which should be at most a few seconds), and\n   * then return.\n   */\n  public void close(boolean waitForMerges) throws CorruptIndexException, IOException {\n\n    // Ensure that only one thread actually gets to do the closing:\n    if (shouldClose()) {\n      // If any methods have hit OutOfMemoryError, then abort\n      // on close, in case the internal state of IndexWriter\n      // or DocumentsWriter is corrupt\n      if (hitOOM)\n        rollbackInternal();\n      else\n        closeInternal(waitForMerges);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}