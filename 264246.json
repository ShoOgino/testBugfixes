{"path":"lucene/core/src/test/org/apache/lucene/util/automaton/TestAutomaton#testMakeBinaryIntervalFiniteCasesRandom().mjava","commits":[{"id":"6652cc2bf75afdcb0c22e7b20d7708f365d20416","date":1428845341,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestAutomaton#testMakeBinaryIntervalFiniteCasesRandom().mjava","pathOld":"/dev/null","sourceNew":"  public void testMakeBinaryIntervalFiniteCasesRandom() throws Exception {\n    int iters = atLeast(100);\n    for(int iter=0;iter<iters;iter++) {\n      BytesRef prefix = new BytesRef(TestUtil.randomRealisticUnicodeString(random()));\n\n      BytesRefBuilder b = new BytesRefBuilder();\n      b.append(prefix);\n      int numZeros = random().nextInt(10);\n      for(int i=0;i<numZeros;i++) {\n        b.append((byte) 0);\n      }\n      BytesRef minTerm = b.get();\n\n      b = new BytesRefBuilder();\n      b.append(minTerm);\n      numZeros = random().nextInt(10);\n      for(int i=0;i<numZeros;i++) {\n        b.append((byte) 0);\n      }\n      BytesRef maxTerm = b.get();\n      \n      boolean minInclusive = random().nextBoolean();\n      boolean maxInclusive = random().nextBoolean();\n      Automaton a = makeBinaryInterval(minTerm, minInclusive,\n                                       maxTerm, maxInclusive);\n      assertTrue(Operations.isFinite(a));\n      int expectedCount = maxTerm.length - minTerm.length + 1;\n      if (minInclusive == false) {\n        expectedCount--;\n      }\n      if (maxInclusive == false) {\n        expectedCount--;\n      }\n\n      if (expectedCount <= 0) {\n        assertTrue(Operations.isEmpty(a));\n        continue;\n      } else {\n        // Enumerate all finite strings and verify the count matches what we expect:\n        assertEquals(expectedCount, Operations.getFiniteStrings(a, expectedCount).size());\n      }\n\n      b = new BytesRefBuilder();\n      b.append(minTerm);\n      if (minInclusive == false) {\n        assertFalse(accepts(a, b.get()));\n        b.append((byte) 0);\n      }\n      while (b.length() < maxTerm.length) {\n        b.append((byte) 0);\n\n        boolean expected;\n        if (b.length() == maxTerm.length) {\n          expected = maxInclusive;\n        } else {\n          expected = true;\n        }\n        assertEquals(expected, accepts(a, b.get()));\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"35fa550f45857d99d3d6d743420ee54b4d0c37f8","date":1436039255,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestAutomaton#testMakeBinaryIntervalFiniteCasesRandom().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/automaton/TestAutomaton#testMakeBinaryIntervalFiniteCasesRandom().mjava","sourceNew":"  public void testMakeBinaryIntervalFiniteCasesRandom() throws Exception {\n    int iters = atLeast(100);\n    for(int iter=0;iter<iters;iter++) {\n      BytesRef prefix = new BytesRef(TestUtil.randomRealisticUnicodeString(random()));\n\n      BytesRefBuilder b = new BytesRefBuilder();\n      b.append(prefix);\n      int numZeros = random().nextInt(10);\n      for(int i=0;i<numZeros;i++) {\n        b.append((byte) 0);\n      }\n      BytesRef minTerm = b.get();\n\n      b = new BytesRefBuilder();\n      b.append(minTerm);\n      numZeros = random().nextInt(10);\n      for(int i=0;i<numZeros;i++) {\n        b.append((byte) 0);\n      }\n      BytesRef maxTerm = b.get();\n      \n      boolean minInclusive = random().nextBoolean();\n      boolean maxInclusive = random().nextBoolean();\n      Automaton a = makeBinaryInterval(minTerm, minInclusive,\n                                       maxTerm, maxInclusive);\n      assertTrue(Operations.isFinite(a));\n      int expectedCount = maxTerm.length - minTerm.length + 1;\n      if (minInclusive == false) {\n        expectedCount--;\n      }\n      if (maxInclusive == false) {\n        expectedCount--;\n      }\n\n      if (expectedCount <= 0) {\n        assertTrue(Operations.isEmpty(a));\n        continue;\n      } else {\n        // Enumerate all finite strings and verify the count matches what we expect:\n        assertEquals(expectedCount, TestOperations.getFiniteStrings(a, expectedCount).size());\n      }\n\n      b = new BytesRefBuilder();\n      b.append(minTerm);\n      if (minInclusive == false) {\n        assertFalse(accepts(a, b.get()));\n        b.append((byte) 0);\n      }\n      while (b.length() < maxTerm.length) {\n        b.append((byte) 0);\n\n        boolean expected;\n        if (b.length() == maxTerm.length) {\n          expected = maxInclusive;\n        } else {\n          expected = true;\n        }\n        assertEquals(expected, accepts(a, b.get()));\n      }\n    }\n  }\n\n","sourceOld":"  public void testMakeBinaryIntervalFiniteCasesRandom() throws Exception {\n    int iters = atLeast(100);\n    for(int iter=0;iter<iters;iter++) {\n      BytesRef prefix = new BytesRef(TestUtil.randomRealisticUnicodeString(random()));\n\n      BytesRefBuilder b = new BytesRefBuilder();\n      b.append(prefix);\n      int numZeros = random().nextInt(10);\n      for(int i=0;i<numZeros;i++) {\n        b.append((byte) 0);\n      }\n      BytesRef minTerm = b.get();\n\n      b = new BytesRefBuilder();\n      b.append(minTerm);\n      numZeros = random().nextInt(10);\n      for(int i=0;i<numZeros;i++) {\n        b.append((byte) 0);\n      }\n      BytesRef maxTerm = b.get();\n      \n      boolean minInclusive = random().nextBoolean();\n      boolean maxInclusive = random().nextBoolean();\n      Automaton a = makeBinaryInterval(minTerm, minInclusive,\n                                       maxTerm, maxInclusive);\n      assertTrue(Operations.isFinite(a));\n      int expectedCount = maxTerm.length - minTerm.length + 1;\n      if (minInclusive == false) {\n        expectedCount--;\n      }\n      if (maxInclusive == false) {\n        expectedCount--;\n      }\n\n      if (expectedCount <= 0) {\n        assertTrue(Operations.isEmpty(a));\n        continue;\n      } else {\n        // Enumerate all finite strings and verify the count matches what we expect:\n        assertEquals(expectedCount, Operations.getFiniteStrings(a, expectedCount).size());\n      }\n\n      b = new BytesRefBuilder();\n      b.append(minTerm);\n      if (minInclusive == false) {\n        assertFalse(accepts(a, b.get()));\n        b.append((byte) 0);\n      }\n      while (b.length() < maxTerm.length) {\n        b.append((byte) 0);\n\n        boolean expected;\n        if (b.length() == maxTerm.length) {\n          expected = maxInclusive;\n        } else {\n          expected = true;\n        }\n        assertEquals(expected, accepts(a, b.get()));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"35fa550f45857d99d3d6d743420ee54b4d0c37f8":["6652cc2bf75afdcb0c22e7b20d7708f365d20416"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6652cc2bf75afdcb0c22e7b20d7708f365d20416":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["35fa550f45857d99d3d6d743420ee54b4d0c37f8"]},"commit2Childs":{"35fa550f45857d99d3d6d743420ee54b4d0c37f8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6652cc2bf75afdcb0c22e7b20d7708f365d20416"],"6652cc2bf75afdcb0c22e7b20d7708f365d20416":["35fa550f45857d99d3d6d743420ee54b4d0c37f8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}