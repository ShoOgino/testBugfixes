{"path":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testDocValuesUpdates().mjava","commits":[{"id":"4cc45c615dbb82bf79d5f9550286098367874fbf","date":1409571423,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testDocValuesUpdates().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testDocValuesUpdates().mjava","sourceNew":"  public void testDocValuesUpdates() throws Exception {\n    File oldIndexDir = createTempDir(\"dvupdates\");\n    TestUtil.unzip(getDataFile(dvUpdatesIndex), oldIndexDir);\n    Directory dir = newFSDirectory(oldIndexDir);\n    \n    verifyDocValues(dir);\n    \n    // update fields and verify index\n    IndexWriterConfig conf = new IndexWriterConfig(new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    updateNumeric(writer, \"1\", \"ndv1\", \"ndv1_c\", 300L);\n    updateNumeric(writer, \"1\", \"ndv2\", \"ndv2_c\", 300L);\n    updateBinary(writer, \"1\", \"bdv1\", \"bdv1_c\", 300L);\n    updateBinary(writer, \"1\", \"bdv2\", \"bdv2_c\", 300L);\n    writer.commit();\n    verifyDocValues(dir);\n    \n    // merge all segments\n    writer.forceMerge(1);\n    writer.commit();\n    verifyDocValues(dir);\n    \n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDocValuesUpdates() throws Exception {\n    File oldIndexDir = createTempDir(\"dvupdates\");\n    TestUtil.unzip(getDataFile(dvUpdatesIndex), oldIndexDir);\n    Directory dir = newFSDirectory(oldIndexDir);\n    \n    verifyDocValues(dir);\n    \n    // update fields and verify index\n    IndexWriterConfig conf = new IndexWriterConfig(new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    updateNumeric(writer, \"1\", \"ndv1\", \"ndv1_c\", 300L);\n    updateNumeric(writer, \"1\", \"ndv2\", \"ndv2_c\", 300L);\n    updateBinary(writer, \"1\", \"bdv1\", \"bdv1_c\", 300L);\n    updateBinary(writer, \"1\", \"bdv2\", \"bdv2_c\", 300L);\n    writer.commit();\n    verifyDocValues(dir);\n    \n    // merge all segments\n    writer.forceMerge(1);\n    writer.commit();\n    verifyDocValues(dir);\n    \n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"402ad3ddc9da7b70da1b167667a60ece6a1381fb","date":1409656478,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testDocValuesUpdates().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testDocValuesUpdates().mjava","sourceNew":"  public void testDocValuesUpdates() throws Exception {\n    File oldIndexDir = createTempDir(\"dvupdates\");\n    TestUtil.unzip(getDataFile(dvUpdatesIndex), oldIndexDir);\n    Directory dir = newFSDirectory(oldIndexDir);\n    \n    verifyDocValues(dir);\n    \n    // update fields and verify index\n    IndexWriterConfig conf = new IndexWriterConfig(new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    updateNumeric(writer, \"1\", \"ndv1\", \"ndv1_c\", 300L);\n    updateNumeric(writer, \"1\", \"ndv2\", \"ndv2_c\", 300L);\n    updateBinary(writer, \"1\", \"bdv1\", \"bdv1_c\", 300L);\n    updateBinary(writer, \"1\", \"bdv2\", \"bdv2_c\", 300L);\n    writer.commit();\n    verifyDocValues(dir);\n    \n    // merge all segments\n    writer.forceMerge(1);\n    writer.commit();\n    verifyDocValues(dir);\n    \n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDocValuesUpdates() throws Exception {\n    File oldIndexDir = createTempDir(\"dvupdates\");\n    TestUtil.unzip(getDataFile(dvUpdatesIndex), oldIndexDir);\n    Directory dir = newFSDirectory(oldIndexDir);\n    \n    verifyDocValues(dir);\n    \n    // update fields and verify index\n    IndexWriterConfig conf = new IndexWriterConfig(new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    updateNumeric(writer, \"1\", \"ndv1\", \"ndv1_c\", 300L);\n    updateNumeric(writer, \"1\", \"ndv2\", \"ndv2_c\", 300L);\n    updateBinary(writer, \"1\", \"bdv1\", \"bdv1_c\", 300L);\n    updateBinary(writer, \"1\", \"bdv2\", \"bdv2_c\", 300L);\n    writer.commit();\n    verifyDocValues(dir);\n    \n    // merge all segments\n    writer.forceMerge(1);\n    writer.commit();\n    verifyDocValues(dir);\n    \n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4abec28b874149a7223e32cc7a01704c27790de","date":1410644789,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testDocValuesUpdates().mjava","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testDocValuesUpdates().mjava","sourceNew":"  public void testDocValuesUpdates() throws Exception {\n    Path oldIndexDir = createTempDir(\"dvupdates\");\n    TestUtil.unzip(getDataPath(dvUpdatesIndex), oldIndexDir);\n    Directory dir = newFSDirectory(oldIndexDir);\n    \n    verifyDocValues(dir);\n    \n    // update fields and verify index\n    IndexWriterConfig conf = new IndexWriterConfig(new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    updateNumeric(writer, \"1\", \"ndv1\", \"ndv1_c\", 300L);\n    updateNumeric(writer, \"1\", \"ndv2\", \"ndv2_c\", 300L);\n    updateBinary(writer, \"1\", \"bdv1\", \"bdv1_c\", 300L);\n    updateBinary(writer, \"1\", \"bdv2\", \"bdv2_c\", 300L);\n    writer.commit();\n    verifyDocValues(dir);\n    \n    // merge all segments\n    writer.forceMerge(1);\n    writer.commit();\n    verifyDocValues(dir);\n    \n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDocValuesUpdates() throws Exception {\n    File oldIndexDir = createTempDir(\"dvupdates\");\n    TestUtil.unzip(getDataFile(dvUpdatesIndex), oldIndexDir);\n    Directory dir = newFSDirectory(oldIndexDir);\n    \n    verifyDocValues(dir);\n    \n    // update fields and verify index\n    IndexWriterConfig conf = new IndexWriterConfig(new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    updateNumeric(writer, \"1\", \"ndv1\", \"ndv1_c\", 300L);\n    updateNumeric(writer, \"1\", \"ndv2\", \"ndv2_c\", 300L);\n    updateBinary(writer, \"1\", \"bdv1\", \"bdv1_c\", 300L);\n    updateBinary(writer, \"1\", \"bdv2\", \"bdv2_c\", 300L);\n    writer.commit();\n    verifyDocValues(dir);\n    \n    // merge all segments\n    writer.forceMerge(1);\n    writer.commit();\n    verifyDocValues(dir);\n    \n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"509b34c7d48bc90eb4ec5e8757e0f879a19f22ee","date":1410650745,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testDocValuesUpdates().mjava","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testDocValuesUpdates().mjava","sourceNew":"  public void testDocValuesUpdates() throws Exception {\n    Path oldIndexDir = createTempDir(\"dvupdates\");\n    TestUtil.unzip(getDataInputStream(dvUpdatesIndex), oldIndexDir);\n    Directory dir = newFSDirectory(oldIndexDir);\n    \n    verifyDocValues(dir);\n    \n    // update fields and verify index\n    IndexWriterConfig conf = new IndexWriterConfig(new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    updateNumeric(writer, \"1\", \"ndv1\", \"ndv1_c\", 300L);\n    updateNumeric(writer, \"1\", \"ndv2\", \"ndv2_c\", 300L);\n    updateBinary(writer, \"1\", \"bdv1\", \"bdv1_c\", 300L);\n    updateBinary(writer, \"1\", \"bdv2\", \"bdv2_c\", 300L);\n    writer.commit();\n    verifyDocValues(dir);\n    \n    // merge all segments\n    writer.forceMerge(1);\n    writer.commit();\n    verifyDocValues(dir);\n    \n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDocValuesUpdates() throws Exception {\n    Path oldIndexDir = createTempDir(\"dvupdates\");\n    TestUtil.unzip(getDataPath(dvUpdatesIndex), oldIndexDir);\n    Directory dir = newFSDirectory(oldIndexDir);\n    \n    verifyDocValues(dir);\n    \n    // update fields and verify index\n    IndexWriterConfig conf = new IndexWriterConfig(new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    updateNumeric(writer, \"1\", \"ndv1\", \"ndv1_c\", 300L);\n    updateNumeric(writer, \"1\", \"ndv2\", \"ndv2_c\", 300L);\n    updateBinary(writer, \"1\", \"bdv1\", \"bdv1_c\", 300L);\n    updateBinary(writer, \"1\", \"bdv2\", \"bdv2_c\", 300L);\n    writer.commit();\n    verifyDocValues(dir);\n    \n    // merge all segments\n    writer.forceMerge(1);\n    writer.commit();\n    verifyDocValues(dir);\n    \n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1169b01224241198a3eb11c9dcc42dc921b02235","date":1411505234,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testDocValuesUpdates().mjava","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testDocValuesUpdates().mjava","sourceNew":"  public void testDocValuesUpdates() throws Exception {\n    Path oldIndexDir = createTempDir(\"dvupdates\");\n    TestUtil.unzip(getDataInputStream(dvUpdatesIndex), oldIndexDir);\n    Directory dir = newFSDirectory(oldIndexDir);\n    verifyUsesDefaultCodec(dir, dvUpdatesIndex);\n    \n    verifyDocValues(dir);\n    \n    // update fields and verify index\n    IndexWriterConfig conf = new IndexWriterConfig(new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    updateNumeric(writer, \"1\", \"ndv1\", \"ndv1_c\", 300L);\n    updateNumeric(writer, \"1\", \"ndv2\", \"ndv2_c\", 300L);\n    updateBinary(writer, \"1\", \"bdv1\", \"bdv1_c\", 300L);\n    updateBinary(writer, \"1\", \"bdv2\", \"bdv2_c\", 300L);\n    writer.commit();\n    verifyDocValues(dir);\n    \n    // merge all segments\n    writer.forceMerge(1);\n    writer.commit();\n    verifyDocValues(dir);\n    \n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDocValuesUpdates() throws Exception {\n    Path oldIndexDir = createTempDir(\"dvupdates\");\n    TestUtil.unzip(getDataInputStream(dvUpdatesIndex), oldIndexDir);\n    Directory dir = newFSDirectory(oldIndexDir);\n    \n    verifyDocValues(dir);\n    \n    // update fields and verify index\n    IndexWriterConfig conf = new IndexWriterConfig(new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    updateNumeric(writer, \"1\", \"ndv1\", \"ndv1_c\", 300L);\n    updateNumeric(writer, \"1\", \"ndv2\", \"ndv2_c\", 300L);\n    updateBinary(writer, \"1\", \"bdv1\", \"bdv1_c\", 300L);\n    updateBinary(writer, \"1\", \"bdv2\", \"bdv2_c\", 300L);\n    writer.commit();\n    verifyDocValues(dir);\n    \n    // merge all segments\n    writer.forceMerge(1);\n    writer.commit();\n    verifyDocValues(dir);\n    \n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"71387d8cb6923eb831b17a8b734608ba2e21c653","date":1414126093,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testDocValuesUpdates().mjava","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testDocValuesUpdates().mjava","sourceNew":"  @Ignore(\"needs a 5.0 index once released\")\n  public void testDocValuesUpdates() throws Exception {\n    Path oldIndexDir = createTempDir(\"dvupdates\");\n    TestUtil.unzip(getDataInputStream(dvUpdatesIndex), oldIndexDir);\n    Directory dir = newFSDirectory(oldIndexDir);\n    verifyUsesDefaultCodec(dir, dvUpdatesIndex);\n    \n    verifyDocValues(dir);\n    \n    // update fields and verify index\n    IndexWriterConfig conf = new IndexWriterConfig(new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    updateNumeric(writer, \"1\", \"ndv1\", \"ndv1_c\", 300L);\n    updateNumeric(writer, \"1\", \"ndv2\", \"ndv2_c\", 300L);\n    updateBinary(writer, \"1\", \"bdv1\", \"bdv1_c\", 300L);\n    updateBinary(writer, \"1\", \"bdv2\", \"bdv2_c\", 300L);\n    writer.commit();\n    verifyDocValues(dir);\n    \n    // merge all segments\n    writer.forceMerge(1);\n    writer.commit();\n    verifyDocValues(dir);\n    \n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDocValuesUpdates() throws Exception {\n    Path oldIndexDir = createTempDir(\"dvupdates\");\n    TestUtil.unzip(getDataInputStream(dvUpdatesIndex), oldIndexDir);\n    Directory dir = newFSDirectory(oldIndexDir);\n    verifyUsesDefaultCodec(dir, dvUpdatesIndex);\n    \n    verifyDocValues(dir);\n    \n    // update fields and verify index\n    IndexWriterConfig conf = new IndexWriterConfig(new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    updateNumeric(writer, \"1\", \"ndv1\", \"ndv1_c\", 300L);\n    updateNumeric(writer, \"1\", \"ndv2\", \"ndv2_c\", 300L);\n    updateBinary(writer, \"1\", \"bdv1\", \"bdv1_c\", 300L);\n    updateBinary(writer, \"1\", \"bdv2\", \"bdv2_c\", 300L);\n    writer.commit();\n    verifyDocValues(dir);\n    \n    // merge all segments\n    writer.forceMerge(1);\n    writer.commit();\n    verifyDocValues(dir);\n    \n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9c729e86d5b7b290b3e15719529435d373746781","date":1424682118,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testDocValuesUpdates().mjava","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testDocValuesUpdates().mjava","sourceNew":"  public void testDocValuesUpdates() throws Exception {\n    Path oldIndexDir = createTempDir(\"dvupdates\");\n    TestUtil.unzip(getDataInputStream(dvUpdatesIndex), oldIndexDir);\n    Directory dir = newFSDirectory(oldIndexDir);\n    verifyUsesDefaultCodec(dir, dvUpdatesIndex);\n    \n    verifyDocValues(dir);\n    \n    // update fields and verify index\n    IndexWriterConfig conf = new IndexWriterConfig(new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    updateNumeric(writer, \"1\", \"ndv1\", \"ndv1_c\", 300L);\n    updateNumeric(writer, \"1\", \"ndv2\", \"ndv2_c\", 300L);\n    updateBinary(writer, \"1\", \"bdv1\", \"bdv1_c\", 300L);\n    updateBinary(writer, \"1\", \"bdv2\", \"bdv2_c\", 300L);\n    writer.commit();\n    verifyDocValues(dir);\n    \n    // merge all segments\n    writer.forceMerge(1);\n    writer.commit();\n    verifyDocValues(dir);\n    \n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Ignore(\"needs a 5.0 index once released\")\n  public void testDocValuesUpdates() throws Exception {\n    Path oldIndexDir = createTempDir(\"dvupdates\");\n    TestUtil.unzip(getDataInputStream(dvUpdatesIndex), oldIndexDir);\n    Directory dir = newFSDirectory(oldIndexDir);\n    verifyUsesDefaultCodec(dir, dvUpdatesIndex);\n    \n    verifyDocValues(dir);\n    \n    // update fields and verify index\n    IndexWriterConfig conf = new IndexWriterConfig(new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    updateNumeric(writer, \"1\", \"ndv1\", \"ndv1_c\", 300L);\n    updateNumeric(writer, \"1\", \"ndv2\", \"ndv2_c\", 300L);\n    updateBinary(writer, \"1\", \"bdv1\", \"bdv1_c\", 300L);\n    updateBinary(writer, \"1\", \"bdv2\", \"bdv2_c\", 300L);\n    writer.commit();\n    verifyDocValues(dir);\n    \n    // merge all segments\n    writer.forceMerge(1);\n    writer.commit();\n    verifyDocValues(dir);\n    \n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1fe05f332e77cbf262172227a8ab7b0c396db6fe","date":1499084178,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testDocValuesUpdates().mjava","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testDocValuesUpdates().mjava","sourceNew":"  public void testDocValuesUpdates() throws Exception {\n    assumeTrue(\"Reenable when 7.0 is released\", false);\n    Path oldIndexDir = createTempDir(\"dvupdates\");\n    TestUtil.unzip(getDataInputStream(dvUpdatesIndex), oldIndexDir);\n    Directory dir = newFSDirectory(oldIndexDir);\n    verifyUsesDefaultCodec(dir, dvUpdatesIndex);\n    \n    verifyDocValues(dir);\n    \n    // update fields and verify index\n    IndexWriterConfig conf = new IndexWriterConfig(new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    updateNumeric(writer, \"1\", \"ndv1\", \"ndv1_c\", 300L);\n    updateNumeric(writer, \"1\", \"ndv2\", \"ndv2_c\", 300L);\n    updateBinary(writer, \"1\", \"bdv1\", \"bdv1_c\", 300L);\n    updateBinary(writer, \"1\", \"bdv2\", \"bdv2_c\", 300L);\n    writer.commit();\n    verifyDocValues(dir);\n    \n    // merge all segments\n    writer.forceMerge(1);\n    writer.commit();\n    verifyDocValues(dir);\n    \n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDocValuesUpdates() throws Exception {\n    Path oldIndexDir = createTempDir(\"dvupdates\");\n    TestUtil.unzip(getDataInputStream(dvUpdatesIndex), oldIndexDir);\n    Directory dir = newFSDirectory(oldIndexDir);\n    verifyUsesDefaultCodec(dir, dvUpdatesIndex);\n    \n    verifyDocValues(dir);\n    \n    // update fields and verify index\n    IndexWriterConfig conf = new IndexWriterConfig(new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    updateNumeric(writer, \"1\", \"ndv1\", \"ndv1_c\", 300L);\n    updateNumeric(writer, \"1\", \"ndv2\", \"ndv2_c\", 300L);\n    updateBinary(writer, \"1\", \"bdv1\", \"bdv1_c\", 300L);\n    updateBinary(writer, \"1\", \"bdv2\", \"bdv2_c\", 300L);\n    writer.commit();\n    verifyDocValues(dir);\n    \n    // merge all segments\n    writer.forceMerge(1);\n    writer.commit();\n    verifyDocValues(dir);\n    \n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cc018b79379c67835b40b1259cd3dc931df60944","date":1499109112,"type":3,"author":"Anshum Gupta","isMerge":true,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testDocValuesUpdates().mjava","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testDocValuesUpdates().mjava","sourceNew":"  public void testDocValuesUpdates() throws Exception {\n    assumeTrue(\"Reenable when 7.0 is released\", false);\n    Path oldIndexDir = createTempDir(\"dvupdates\");\n    TestUtil.unzip(getDataInputStream(dvUpdatesIndex), oldIndexDir);\n    Directory dir = newFSDirectory(oldIndexDir);\n    verifyUsesDefaultCodec(dir, dvUpdatesIndex);\n    \n    verifyDocValues(dir);\n    \n    // update fields and verify index\n    IndexWriterConfig conf = new IndexWriterConfig(new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    updateNumeric(writer, \"1\", \"ndv1\", \"ndv1_c\", 300L);\n    updateNumeric(writer, \"1\", \"ndv2\", \"ndv2_c\", 300L);\n    updateBinary(writer, \"1\", \"bdv1\", \"bdv1_c\", 300L);\n    updateBinary(writer, \"1\", \"bdv2\", \"bdv2_c\", 300L);\n    writer.commit();\n    verifyDocValues(dir);\n    \n    // merge all segments\n    writer.forceMerge(1);\n    writer.commit();\n    verifyDocValues(dir);\n    \n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDocValuesUpdates() throws Exception {\n    Path oldIndexDir = createTempDir(\"dvupdates\");\n    TestUtil.unzip(getDataInputStream(dvUpdatesIndex), oldIndexDir);\n    Directory dir = newFSDirectory(oldIndexDir);\n    verifyUsesDefaultCodec(dir, dvUpdatesIndex);\n    \n    verifyDocValues(dir);\n    \n    // update fields and verify index\n    IndexWriterConfig conf = new IndexWriterConfig(new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    updateNumeric(writer, \"1\", \"ndv1\", \"ndv1_c\", 300L);\n    updateNumeric(writer, \"1\", \"ndv2\", \"ndv2_c\", 300L);\n    updateBinary(writer, \"1\", \"bdv1\", \"bdv1_c\", 300L);\n    updateBinary(writer, \"1\", \"bdv2\", \"bdv2_c\", 300L);\n    writer.commit();\n    verifyDocValues(dir);\n    \n    // merge all segments\n    writer.forceMerge(1);\n    writer.commit();\n    verifyDocValues(dir);\n    \n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30c8e5574b55d57947e989443dfde611646530ee","date":1499131153,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testDocValuesUpdates().mjava","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testDocValuesUpdates().mjava","sourceNew":"  public void testDocValuesUpdates() throws Exception {\n    assumeTrue(\"Reenable when 7.0 is released\", false);\n    Path oldIndexDir = createTempDir(\"dvupdates\");\n    TestUtil.unzip(getDataInputStream(dvUpdatesIndex), oldIndexDir);\n    Directory dir = newFSDirectory(oldIndexDir);\n    verifyUsesDefaultCodec(dir, dvUpdatesIndex);\n    \n    verifyDocValues(dir);\n    \n    // update fields and verify index\n    IndexWriterConfig conf = new IndexWriterConfig(new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    updateNumeric(writer, \"1\", \"ndv1\", \"ndv1_c\", 300L);\n    updateNumeric(writer, \"1\", \"ndv2\", \"ndv2_c\", 300L);\n    updateBinary(writer, \"1\", \"bdv1\", \"bdv1_c\", 300L);\n    updateBinary(writer, \"1\", \"bdv2\", \"bdv2_c\", 300L);\n    writer.commit();\n    verifyDocValues(dir);\n    \n    // merge all segments\n    writer.forceMerge(1);\n    writer.commit();\n    verifyDocValues(dir);\n    \n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDocValuesUpdates() throws Exception {\n    Path oldIndexDir = createTempDir(\"dvupdates\");\n    TestUtil.unzip(getDataInputStream(dvUpdatesIndex), oldIndexDir);\n    Directory dir = newFSDirectory(oldIndexDir);\n    verifyUsesDefaultCodec(dir, dvUpdatesIndex);\n    \n    verifyDocValues(dir);\n    \n    // update fields and verify index\n    IndexWriterConfig conf = new IndexWriterConfig(new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    updateNumeric(writer, \"1\", \"ndv1\", \"ndv1_c\", 300L);\n    updateNumeric(writer, \"1\", \"ndv2\", \"ndv2_c\", 300L);\n    updateBinary(writer, \"1\", \"bdv1\", \"bdv1_c\", 300L);\n    updateBinary(writer, \"1\", \"bdv2\", \"bdv2_c\", 300L);\n    writer.commit();\n    verifyDocValues(dir);\n    \n    // merge all segments\n    writer.forceMerge(1);\n    writer.commit();\n    verifyDocValues(dir);\n    \n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"87655ca85dc29fc6a56702a356b312ebac60bd2d","date":1506818641,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testDocValuesUpdates().mjava","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testDocValuesUpdates().mjava","sourceNew":"  public void testDocValuesUpdates() throws Exception {\n    Path oldIndexDir = createTempDir(\"dvupdates\");\n    TestUtil.unzip(getDataInputStream(dvUpdatesIndex), oldIndexDir);\n    Directory dir = newFSDirectory(oldIndexDir);\n    verifyUsesDefaultCodec(dir, dvUpdatesIndex);\n    \n    verifyDocValues(dir);\n    \n    // update fields and verify index\n    IndexWriterConfig conf = new IndexWriterConfig(new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    updateNumeric(writer, \"1\", \"ndv1\", \"ndv1_c\", 300L);\n    updateNumeric(writer, \"1\", \"ndv2\", \"ndv2_c\", 300L);\n    updateBinary(writer, \"1\", \"bdv1\", \"bdv1_c\", 300L);\n    updateBinary(writer, \"1\", \"bdv2\", \"bdv2_c\", 300L);\n    writer.commit();\n    verifyDocValues(dir);\n    \n    // merge all segments\n    writer.forceMerge(1);\n    writer.commit();\n    verifyDocValues(dir);\n    \n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDocValuesUpdates() throws Exception {\n    assumeTrue(\"Reenable when 7.0 is released\", false);\n    Path oldIndexDir = createTempDir(\"dvupdates\");\n    TestUtil.unzip(getDataInputStream(dvUpdatesIndex), oldIndexDir);\n    Directory dir = newFSDirectory(oldIndexDir);\n    verifyUsesDefaultCodec(dir, dvUpdatesIndex);\n    \n    verifyDocValues(dir);\n    \n    // update fields and verify index\n    IndexWriterConfig conf = new IndexWriterConfig(new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    updateNumeric(writer, \"1\", \"ndv1\", \"ndv1_c\", 300L);\n    updateNumeric(writer, \"1\", \"ndv2\", \"ndv2_c\", 300L);\n    updateBinary(writer, \"1\", \"bdv1\", \"bdv1_c\", 300L);\n    updateBinary(writer, \"1\", \"bdv2\", \"bdv2_c\", 300L);\n    writer.commit();\n    verifyDocValues(dir);\n    \n    // merge all segments\n    writer.forceMerge(1);\n    writer.commit();\n    verifyDocValues(dir);\n    \n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6240b74b884c5587f2a4062dd27d6c32bf228889","date":1507037235,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testDocValuesUpdates().mjava","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testDocValuesUpdates().mjava","sourceNew":"  public void testDocValuesUpdates() throws Exception {\n    Path oldIndexDir = createTempDir(\"dvupdates\");\n    TestUtil.unzip(getDataInputStream(dvUpdatesIndex), oldIndexDir);\n    Directory dir = newFSDirectory(oldIndexDir);\n    verifyUsesDefaultCodec(dir, dvUpdatesIndex);\n    \n    verifyDocValues(dir);\n    \n    // update fields and verify index\n    IndexWriterConfig conf = new IndexWriterConfig(new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    updateNumeric(writer, \"1\", \"ndv1\", \"ndv1_c\", 300L);\n    updateNumeric(writer, \"1\", \"ndv2\", \"ndv2_c\", 300L);\n    updateBinary(writer, \"1\", \"bdv1\", \"bdv1_c\", 300L);\n    updateBinary(writer, \"1\", \"bdv2\", \"bdv2_c\", 300L);\n    writer.commit();\n    verifyDocValues(dir);\n    \n    // merge all segments\n    writer.forceMerge(1);\n    writer.commit();\n    verifyDocValues(dir);\n    \n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDocValuesUpdates() throws Exception {\n    assumeTrue(\"Reenable when 7.0 is released\", false);\n    Path oldIndexDir = createTempDir(\"dvupdates\");\n    TestUtil.unzip(getDataInputStream(dvUpdatesIndex), oldIndexDir);\n    Directory dir = newFSDirectory(oldIndexDir);\n    verifyUsesDefaultCodec(dir, dvUpdatesIndex);\n    \n    verifyDocValues(dir);\n    \n    // update fields and verify index\n    IndexWriterConfig conf = new IndexWriterConfig(new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    updateNumeric(writer, \"1\", \"ndv1\", \"ndv1_c\", 300L);\n    updateNumeric(writer, \"1\", \"ndv2\", \"ndv2_c\", 300L);\n    updateBinary(writer, \"1\", \"bdv1\", \"bdv1_c\", 300L);\n    updateBinary(writer, \"1\", \"bdv2\", \"bdv2_c\", 300L);\n    writer.commit();\n    verifyDocValues(dir);\n    \n    // merge all segments\n    writer.forceMerge(1);\n    writer.commit();\n    verifyDocValues(dir);\n    \n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9135dfa8824df4c6f7619bd2ac9507d821c61239","date":1544123763,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testDocValuesUpdates().mjava","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testDocValuesUpdates().mjava","sourceNew":"  public void testDocValuesUpdates() throws Exception {\n    Path oldIndexDir = createTempDir(\"dvupdates\");\n    TestUtil.unzip(getDataInputStream(dvUpdatesIndex), oldIndexDir);\n    Directory dir = newFSDirectory(oldIndexDir);\n    verifyUsesDefaultCodec(dir, dvUpdatesIndex);\n    \n    verifyDocValues(dir);\n    \n    // update fields and verify index\n    IndexWriterConfig conf = new IndexWriterConfig(new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    updateNumeric(writer, \"1\", \"ndv1\", \"ndv1_c\", 300L);\n    updateNumeric(writer, \"1\", \"ndv2\", \"ndv2_c\", 300L);\n    updateBinary(writer, \"1\", \"bdv1\", \"bdv1_c\", 300L);\n    updateBinary(writer, \"1\", \"bdv2\", \"bdv2_c\", 300L);\n\n    writer.commit();\n    verifyDocValues(dir);\n    \n    // merge all segments\n    writer.forceMerge(1);\n    writer.commit();\n    verifyDocValues(dir);\n    \n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDocValuesUpdates() throws Exception {\n    Path oldIndexDir = createTempDir(\"dvupdates\");\n    TestUtil.unzip(getDataInputStream(dvUpdatesIndex), oldIndexDir);\n    Directory dir = newFSDirectory(oldIndexDir);\n    verifyUsesDefaultCodec(dir, dvUpdatesIndex);\n    \n    verifyDocValues(dir);\n    \n    // update fields and verify index\n    IndexWriterConfig conf = new IndexWriterConfig(new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    updateNumeric(writer, \"1\", \"ndv1\", \"ndv1_c\", 300L);\n    updateNumeric(writer, \"1\", \"ndv2\", \"ndv2_c\", 300L);\n    updateBinary(writer, \"1\", \"bdv1\", \"bdv1_c\", 300L);\n    updateBinary(writer, \"1\", \"bdv2\", \"bdv2_c\", 300L);\n    writer.commit();\n    verifyDocValues(dir);\n    \n    // merge all segments\n    writer.forceMerge(1);\n    writer.commit();\n    verifyDocValues(dir);\n    \n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d722b735bc69d2234e957cb69cf96ad28ea7e1c3","date":1546867201,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testDocValuesUpdates().mjava","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testDocValuesUpdates().mjava","sourceNew":"  public void testDocValuesUpdates() throws Exception {\n    assumeTrue(\"Reenable when 8.0 is released\", false);\n    Path oldIndexDir = createTempDir(\"dvupdates\");\n    TestUtil.unzip(getDataInputStream(dvUpdatesIndex), oldIndexDir);\n    Directory dir = newFSDirectory(oldIndexDir);\n    verifyUsesDefaultCodec(dir, dvUpdatesIndex);\n    \n    verifyDocValues(dir);\n    \n    // update fields and verify index\n    IndexWriterConfig conf = new IndexWriterConfig(new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    updateNumeric(writer, \"1\", \"ndv1\", \"ndv1_c\", 300L);\n    updateNumeric(writer, \"1\", \"ndv2\", \"ndv2_c\", 300L);\n    updateBinary(writer, \"1\", \"bdv1\", \"bdv1_c\", 300L);\n    updateBinary(writer, \"1\", \"bdv2\", \"bdv2_c\", 300L);\n\n    writer.commit();\n    verifyDocValues(dir);\n    \n    // merge all segments\n    writer.forceMerge(1);\n    writer.commit();\n    verifyDocValues(dir);\n    \n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDocValuesUpdates() throws Exception {\n    Path oldIndexDir = createTempDir(\"dvupdates\");\n    TestUtil.unzip(getDataInputStream(dvUpdatesIndex), oldIndexDir);\n    Directory dir = newFSDirectory(oldIndexDir);\n    verifyUsesDefaultCodec(dir, dvUpdatesIndex);\n    \n    verifyDocValues(dir);\n    \n    // update fields and verify index\n    IndexWriterConfig conf = new IndexWriterConfig(new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    updateNumeric(writer, \"1\", \"ndv1\", \"ndv1_c\", 300L);\n    updateNumeric(writer, \"1\", \"ndv2\", \"ndv2_c\", 300L);\n    updateBinary(writer, \"1\", \"bdv1\", \"bdv1_c\", 300L);\n    updateBinary(writer, \"1\", \"bdv2\", \"bdv2_c\", 300L);\n\n    writer.commit();\n    verifyDocValues(dir);\n    \n    // merge all segments\n    writer.forceMerge(1);\n    writer.commit();\n    verifyDocValues(dir);\n    \n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3c167f43985b3d924e6402ded39beada51a81b6b","date":1552568413,"type":3,"author":"jimczi","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testDocValuesUpdates().mjava","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testDocValuesUpdates().mjava","sourceNew":"  public void testDocValuesUpdates() throws Exception {\n    Path oldIndexDir = createTempDir(\"dvupdates\");\n    TestUtil.unzip(getDataInputStream(dvUpdatesIndex), oldIndexDir);\n    Directory dir = newFSDirectory(oldIndexDir);\n    verifyUsesDefaultCodec(dir, dvUpdatesIndex);\n    \n    verifyDocValues(dir);\n    \n    // update fields and verify index\n    IndexWriterConfig conf = new IndexWriterConfig(new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    updateNumeric(writer, \"1\", \"ndv1\", \"ndv1_c\", 300L);\n    updateNumeric(writer, \"1\", \"ndv2\", \"ndv2_c\", 300L);\n    updateBinary(writer, \"1\", \"bdv1\", \"bdv1_c\", 300L);\n    updateBinary(writer, \"1\", \"bdv2\", \"bdv2_c\", 300L);\n\n    writer.commit();\n    verifyDocValues(dir);\n    \n    // merge all segments\n    writer.forceMerge(1);\n    writer.commit();\n    verifyDocValues(dir);\n    \n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDocValuesUpdates() throws Exception {\n    assumeTrue(\"Reenable when 8.0 is released\", false);\n    Path oldIndexDir = createTempDir(\"dvupdates\");\n    TestUtil.unzip(getDataInputStream(dvUpdatesIndex), oldIndexDir);\n    Directory dir = newFSDirectory(oldIndexDir);\n    verifyUsesDefaultCodec(dir, dvUpdatesIndex);\n    \n    verifyDocValues(dir);\n    \n    // update fields and verify index\n    IndexWriterConfig conf = new IndexWriterConfig(new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    updateNumeric(writer, \"1\", \"ndv1\", \"ndv1_c\", 300L);\n    updateNumeric(writer, \"1\", \"ndv2\", \"ndv2_c\", 300L);\n    updateBinary(writer, \"1\", \"bdv1\", \"bdv1_c\", 300L);\n    updateBinary(writer, \"1\", \"bdv2\", \"bdv2_c\", 300L);\n\n    writer.commit();\n    verifyDocValues(dir);\n    \n    // merge all segments\n    writer.forceMerge(1);\n    writer.commit();\n    verifyDocValues(dir);\n    \n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9135dfa8824df4c6f7619bd2ac9507d821c61239":["87655ca85dc29fc6a56702a356b312ebac60bd2d"],"87655ca85dc29fc6a56702a356b312ebac60bd2d":["cc018b79379c67835b40b1259cd3dc931df60944"],"30c8e5574b55d57947e989443dfde611646530ee":["9c729e86d5b7b290b3e15719529435d373746781","cc018b79379c67835b40b1259cd3dc931df60944"],"1169b01224241198a3eb11c9dcc42dc921b02235":["509b34c7d48bc90eb4ec5e8757e0f879a19f22ee"],"f4abec28b874149a7223e32cc7a01704c27790de":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"71387d8cb6923eb831b17a8b734608ba2e21c653":["1169b01224241198a3eb11c9dcc42dc921b02235"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4cc45c615dbb82bf79d5f9550286098367874fbf"],"6240b74b884c5587f2a4062dd27d6c32bf228889":["30c8e5574b55d57947e989443dfde611646530ee","87655ca85dc29fc6a56702a356b312ebac60bd2d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cc45c615dbb82bf79d5f9550286098367874fbf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"509b34c7d48bc90eb4ec5e8757e0f879a19f22ee":["f4abec28b874149a7223e32cc7a01704c27790de"],"cc018b79379c67835b40b1259cd3dc931df60944":["9c729e86d5b7b290b3e15719529435d373746781","1fe05f332e77cbf262172227a8ab7b0c396db6fe"],"1fe05f332e77cbf262172227a8ab7b0c396db6fe":["9c729e86d5b7b290b3e15719529435d373746781"],"3c167f43985b3d924e6402ded39beada51a81b6b":["d722b735bc69d2234e957cb69cf96ad28ea7e1c3"],"9c729e86d5b7b290b3e15719529435d373746781":["71387d8cb6923eb831b17a8b734608ba2e21c653"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3c167f43985b3d924e6402ded39beada51a81b6b"],"d722b735bc69d2234e957cb69cf96ad28ea7e1c3":["9135dfa8824df4c6f7619bd2ac9507d821c61239"]},"commit2Childs":{"9135dfa8824df4c6f7619bd2ac9507d821c61239":["d722b735bc69d2234e957cb69cf96ad28ea7e1c3"],"87655ca85dc29fc6a56702a356b312ebac60bd2d":["9135dfa8824df4c6f7619bd2ac9507d821c61239","6240b74b884c5587f2a4062dd27d6c32bf228889"],"30c8e5574b55d57947e989443dfde611646530ee":["6240b74b884c5587f2a4062dd27d6c32bf228889"],"1169b01224241198a3eb11c9dcc42dc921b02235":["71387d8cb6923eb831b17a8b734608ba2e21c653"],"f4abec28b874149a7223e32cc7a01704c27790de":["509b34c7d48bc90eb4ec5e8757e0f879a19f22ee"],"71387d8cb6923eb831b17a8b734608ba2e21c653":["9c729e86d5b7b290b3e15719529435d373746781"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["f4abec28b874149a7223e32cc7a01704c27790de"],"6240b74b884c5587f2a4062dd27d6c32bf228889":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["402ad3ddc9da7b70da1b167667a60ece6a1381fb","4cc45c615dbb82bf79d5f9550286098367874fbf"],"4cc45c615dbb82bf79d5f9550286098367874fbf":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"cc018b79379c67835b40b1259cd3dc931df60944":["87655ca85dc29fc6a56702a356b312ebac60bd2d","30c8e5574b55d57947e989443dfde611646530ee"],"509b34c7d48bc90eb4ec5e8757e0f879a19f22ee":["1169b01224241198a3eb11c9dcc42dc921b02235"],"1fe05f332e77cbf262172227a8ab7b0c396db6fe":["cc018b79379c67835b40b1259cd3dc931df60944"],"3c167f43985b3d924e6402ded39beada51a81b6b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9c729e86d5b7b290b3e15719529435d373746781":["30c8e5574b55d57947e989443dfde611646530ee","cc018b79379c67835b40b1259cd3dc931df60944","1fe05f332e77cbf262172227a8ab7b0c396db6fe"],"d722b735bc69d2234e957cb69cf96ad28ea7e1c3":["3c167f43985b3d924e6402ded39beada51a81b6b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["6240b74b884c5587f2a4062dd27d6c32bf228889","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}