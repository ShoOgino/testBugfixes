{"path":"solr/src/java/org/apache/solr/util/BCDUtils#base10kSortableIntToBase10(char[],int,int,char[],int).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/util/BCDUtils#base10kSortableIntToBase10(char[],int,int,char[],int).mjava","pathOld":"/dev/null","sourceNew":"  // Converts a base100 sortable number to base10 character form\n// returns number of chars written.\n// At least 1 char is always written.\n  public static int base10kSortableIntToBase10(char[] arr, int start, int end,\n                                               char[] out, int offset)\n  {\n    // Take care of \"0\" case first.  It's the only number that is represented\n    // in one char since we don't chop trailing zeros.\n    if (end-start == 1) {\n      out[offset]='0';\n      return 1;\n    }\n\n    int wpos = offset;  // write position\n    boolean neg;\n    int exp = arr[start++];\n    if (exp < ZERO_EXPONENT) {\n      neg=true;\n      // We don't currently use exp on decoding...\n      // exp = ZERO_EXPONENT - exp;\n      out[wpos++]='-';\n    } else {\n      neg=false;\n    }\n\n    // since so many values will fall in one char, pull it\n    // out of the loop (esp since the first value must\n    // be special-cased to not print leading zeros.\n    // integer division is still expensive, so it's best to check\n    // if you actually need to do it.\n    //\n    // TIP: write a small function in gcc or cl and see what\n    // the optimized assemply output looks like (and which is fastest).\n    // In C you can specify \"unsigned\" which gives the compiler more\n    // info than the Java compiler has.\n    int val = arr[start++];\n    if (neg) val = 9999 - val;\n\n    /***\n    if (val < 10) {\n      out[wpos++] = (char)(val + '0');\n    } else if (val < 100) {\n      out[wpos++] = (char)(val/10 + '0');\n      out[wpos++] = (char)(val%10 + '0');\n    } else if (val < 1000) {\n      out[wpos++] = (char)(val/100 + '0');\n      out[wpos++] = (char)((val/10)%10 + '0');\n      out[wpos++] = (char)(val%10 + '0');\n    } else {\n      out[wpos++] = (char)(val/1000 + '0');\n      out[wpos++] = (char)((val/100)%10 + '0');\n      out[wpos++] = (char)((val/10)%10 + '0');\n      out[wpos++] = (char)(val % 10 + '0');\n    }\n    ***/\n\n    if (val < 10) {\n      out[wpos++] = (char)(val + '0');\n    } else if (val < 100) {\n      int div = div10(val);\n      int ones = val - mul10(div); // mod 10\n      out[wpos++] = (char)(div + '0');\n      out[wpos++] = (char)(ones + '0');\n    } else if (val < 1000) {\n      int div = div10(val);\n      int ones = val - mul10(div); // mod 10\n      val=div;\n      div = div10(val);\n      int tens = val - mul10(div); // mod 10\n      out[wpos++] = (char)(div + '0');\n      out[wpos++] = (char)(tens + '0');\n      out[wpos++] = (char)(ones + '0');\n    } else {\n      int div = div10(val);\n      int ones = val - mul10(div); // mod 10\n      val=div;\n      div = div10(val);\n      int tens = val - mul10(div); // mod 10\n      val=div;\n      div = div10(val);\n      int hundreds = val - mul10(div); // mod 10\n\n      out[wpos++] = (char)(div + '0');\n      out[wpos++] = (char)(hundreds + '0');\n      out[wpos++] = (char)(tens + '0');\n      out[wpos++] = (char)(ones + '0');\n    }\n\n\n    while (start < end) {\n      val = arr[start++];\n      if (neg) val = 9999 - val;\n\n      int div = div10(val);\n      int ones = val - mul10(div); // mod 10\n      val=div;\n      div = div10(val);\n      int tens = val - mul10(div); // mod 10\n      val=div;\n      div = div10(val);\n      int hundreds = val - mul10(div); // mod 10\n\n      /***\n      int ones = val % 10;\n      val /= 10;\n      int tens = val!=0 ? val % 10 : 0;\n      val /= 10;\n      int hundreds = val!=0 ? val % 10 : 0;\n      val /= 10;\n      int thousands = val!=0 ? val % 10 : 0;\n      ***/\n\n      /***\n      int thousands = val>=1000 ? val/1000 : 0;\n      int hundreds  = val>=100 ? (val/100)%10 : 0;\n      int tens      = val>=10 ? (val/10)%10 : 0;\n      int ones      = val % 10;\n      ***/\n\n      /***\n      int thousands =  val/1000;\n      int hundreds  = (val/100)%10;\n      int tens      = (val/10)%10;\n      int ones      = val % 10;\n      ***/\n\n      out[wpos++] = (char)(div + '0');\n      out[wpos++] = (char)(hundreds + '0');\n      out[wpos++] = (char)(tens + '0');\n      out[wpos++] = (char)(ones + '0');\n    }\n\n    // OPTIONAL: if trailing zeros were truncated, then this is where\n    // we would restore them (compare number of chars read vs exponent)\n\n    return wpos-offset;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/util/BCDUtils#base10kSortableIntToBase10(char[],int,int,char[],int).mjava","sourceNew":null,"sourceOld":"  // Converts a base100 sortable number to base10 character form\n// returns number of chars written.\n// At least 1 char is always written.\n  public static int base10kSortableIntToBase10(char[] arr, int start, int end,\n                                               char[] out, int offset)\n  {\n    // Take care of \"0\" case first.  It's the only number that is represented\n    // in one char since we don't chop trailing zeros.\n    if (end-start == 1) {\n      out[offset]='0';\n      return 1;\n    }\n\n    int wpos = offset;  // write position\n    boolean neg;\n    int exp = arr[start++];\n    if (exp < ZERO_EXPONENT) {\n      neg=true;\n      // We don't currently use exp on decoding...\n      // exp = ZERO_EXPONENT - exp;\n      out[wpos++]='-';\n    } else {\n      neg=false;\n    }\n\n    // since so many values will fall in one char, pull it\n    // out of the loop (esp since the first value must\n    // be special-cased to not print leading zeros.\n    // integer division is still expensive, so it's best to check\n    // if you actually need to do it.\n    //\n    // TIP: write a small function in gcc or cl and see what\n    // the optimized assemply output looks like (and which is fastest).\n    // In C you can specify \"unsigned\" which gives the compiler more\n    // info than the Java compiler has.\n    int val = arr[start++];\n    if (neg) val = 9999 - val;\n\n    /***\n    if (val < 10) {\n      out[wpos++] = (char)(val + '0');\n    } else if (val < 100) {\n      out[wpos++] = (char)(val/10 + '0');\n      out[wpos++] = (char)(val%10 + '0');\n    } else if (val < 1000) {\n      out[wpos++] = (char)(val/100 + '0');\n      out[wpos++] = (char)((val/10)%10 + '0');\n      out[wpos++] = (char)(val%10 + '0');\n    } else {\n      out[wpos++] = (char)(val/1000 + '0');\n      out[wpos++] = (char)((val/100)%10 + '0');\n      out[wpos++] = (char)((val/10)%10 + '0');\n      out[wpos++] = (char)(val % 10 + '0');\n    }\n    ***/\n\n    if (val < 10) {\n      out[wpos++] = (char)(val + '0');\n    } else if (val < 100) {\n      int div = div10(val);\n      int ones = val - mul10(div); // mod 10\n      out[wpos++] = (char)(div + '0');\n      out[wpos++] = (char)(ones + '0');\n    } else if (val < 1000) {\n      int div = div10(val);\n      int ones = val - mul10(div); // mod 10\n      val=div;\n      div = div10(val);\n      int tens = val - mul10(div); // mod 10\n      out[wpos++] = (char)(div + '0');\n      out[wpos++] = (char)(tens + '0');\n      out[wpos++] = (char)(ones + '0');\n    } else {\n      int div = div10(val);\n      int ones = val - mul10(div); // mod 10\n      val=div;\n      div = div10(val);\n      int tens = val - mul10(div); // mod 10\n      val=div;\n      div = div10(val);\n      int hundreds = val - mul10(div); // mod 10\n\n      out[wpos++] = (char)(div + '0');\n      out[wpos++] = (char)(hundreds + '0');\n      out[wpos++] = (char)(tens + '0');\n      out[wpos++] = (char)(ones + '0');\n    }\n\n\n    while (start < end) {\n      val = arr[start++];\n      if (neg) val = 9999 - val;\n\n      int div = div10(val);\n      int ones = val - mul10(div); // mod 10\n      val=div;\n      div = div10(val);\n      int tens = val - mul10(div); // mod 10\n      val=div;\n      div = div10(val);\n      int hundreds = val - mul10(div); // mod 10\n\n      /***\n      int ones = val % 10;\n      val /= 10;\n      int tens = val!=0 ? val % 10 : 0;\n      val /= 10;\n      int hundreds = val!=0 ? val % 10 : 0;\n      val /= 10;\n      int thousands = val!=0 ? val % 10 : 0;\n      ***/\n\n      /***\n      int thousands = val>=1000 ? val/1000 : 0;\n      int hundreds  = val>=100 ? (val/100)%10 : 0;\n      int tens      = val>=10 ? (val/10)%10 : 0;\n      int ones      = val % 10;\n      ***/\n\n      /***\n      int thousands =  val/1000;\n      int hundreds  = (val/100)%10;\n      int tens      = (val/10)%10;\n      int ones      = val % 10;\n      ***/\n\n      out[wpos++] = (char)(div + '0');\n      out[wpos++] = (char)(hundreds + '0');\n      out[wpos++] = (char)(tens + '0');\n      out[wpos++] = (char)(ones + '0');\n    }\n\n    // OPTIONAL: if trailing zeros were truncated, then this is where\n    // we would restore them (compare number of chars read vs exponent)\n\n    return wpos-offset;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/util/BCDUtils#base10kSortableIntToBase10(char[],int,int,char[],int).mjava","pathOld":"src/java/org/apache/solr/util/BCDUtils#base10kSortableIntToBase10(char[],int,int,char[],int).mjava","sourceNew":"  // Converts a base100 sortable number to base10 character form\n// returns number of chars written.\n// At least 1 char is always written.\n  public static int base10kSortableIntToBase10(char[] arr, int start, int end,\n                                               char[] out, int offset)\n  {\n    // Take care of \"0\" case first.  It's the only number that is represented\n    // in one char since we don't chop trailing zeros.\n    if (end-start == 1) {\n      out[offset]='0';\n      return 1;\n    }\n\n    int wpos = offset;  // write position\n    boolean neg;\n    int exp = arr[start++];\n    if (exp < ZERO_EXPONENT) {\n      neg=true;\n      // We don't currently use exp on decoding...\n      // exp = ZERO_EXPONENT - exp;\n      out[wpos++]='-';\n    } else {\n      neg=false;\n    }\n\n    // since so many values will fall in one char, pull it\n    // out of the loop (esp since the first value must\n    // be special-cased to not print leading zeros.\n    // integer division is still expensive, so it's best to check\n    // if you actually need to do it.\n    //\n    // TIP: write a small function in gcc or cl and see what\n    // the optimized assemply output looks like (and which is fastest).\n    // In C you can specify \"unsigned\" which gives the compiler more\n    // info than the Java compiler has.\n    int val = arr[start++];\n    if (neg) val = 9999 - val;\n\n    /***\n    if (val < 10) {\n      out[wpos++] = (char)(val + '0');\n    } else if (val < 100) {\n      out[wpos++] = (char)(val/10 + '0');\n      out[wpos++] = (char)(val%10 + '0');\n    } else if (val < 1000) {\n      out[wpos++] = (char)(val/100 + '0');\n      out[wpos++] = (char)((val/10)%10 + '0');\n      out[wpos++] = (char)(val%10 + '0');\n    } else {\n      out[wpos++] = (char)(val/1000 + '0');\n      out[wpos++] = (char)((val/100)%10 + '0');\n      out[wpos++] = (char)((val/10)%10 + '0');\n      out[wpos++] = (char)(val % 10 + '0');\n    }\n    ***/\n\n    if (val < 10) {\n      out[wpos++] = (char)(val + '0');\n    } else if (val < 100) {\n      int div = div10(val);\n      int ones = val - mul10(div); // mod 10\n      out[wpos++] = (char)(div + '0');\n      out[wpos++] = (char)(ones + '0');\n    } else if (val < 1000) {\n      int div = div10(val);\n      int ones = val - mul10(div); // mod 10\n      val=div;\n      div = div10(val);\n      int tens = val - mul10(div); // mod 10\n      out[wpos++] = (char)(div + '0');\n      out[wpos++] = (char)(tens + '0');\n      out[wpos++] = (char)(ones + '0');\n    } else {\n      int div = div10(val);\n      int ones = val - mul10(div); // mod 10\n      val=div;\n      div = div10(val);\n      int tens = val - mul10(div); // mod 10\n      val=div;\n      div = div10(val);\n      int hundreds = val - mul10(div); // mod 10\n\n      out[wpos++] = (char)(div + '0');\n      out[wpos++] = (char)(hundreds + '0');\n      out[wpos++] = (char)(tens + '0');\n      out[wpos++] = (char)(ones + '0');\n    }\n\n\n    while (start < end) {\n      val = arr[start++];\n      if (neg) val = 9999 - val;\n\n      int div = div10(val);\n      int ones = val - mul10(div); // mod 10\n      val=div;\n      div = div10(val);\n      int tens = val - mul10(div); // mod 10\n      val=div;\n      div = div10(val);\n      int hundreds = val - mul10(div); // mod 10\n\n      /***\n      int ones = val % 10;\n      val /= 10;\n      int tens = val!=0 ? val % 10 : 0;\n      val /= 10;\n      int hundreds = val!=0 ? val % 10 : 0;\n      val /= 10;\n      int thousands = val!=0 ? val % 10 : 0;\n      ***/\n\n      /***\n      int thousands = val>=1000 ? val/1000 : 0;\n      int hundreds  = val>=100 ? (val/100)%10 : 0;\n      int tens      = val>=10 ? (val/10)%10 : 0;\n      int ones      = val % 10;\n      ***/\n\n      /***\n      int thousands =  val/1000;\n      int hundreds  = (val/100)%10;\n      int tens      = (val/10)%10;\n      int ones      = val % 10;\n      ***/\n\n      out[wpos++] = (char)(div + '0');\n      out[wpos++] = (char)(hundreds + '0');\n      out[wpos++] = (char)(tens + '0');\n      out[wpos++] = (char)(ones + '0');\n    }\n\n    // OPTIONAL: if trailing zeros were truncated, then this is where\n    // we would restore them (compare number of chars read vs exponent)\n\n    return wpos-offset;\n  }\n\n","sourceOld":"  // Converts a base100 sortable number to base10 character form\n// returns number of chars written.\n// At least 1 char is always written.\n  public static int base10kSortableIntToBase10(char[] arr, int start, int end,\n                                               char[] out, int offset)\n  {\n    // Take care of \"0\" case first.  It's the only number that is represented\n    // in one char since we don't chop trailing zeros.\n    if (end-start == 1) {\n      out[offset]='0';\n      return 1;\n    }\n\n    int wpos = offset;  // write position\n    boolean neg;\n    int exp = arr[start++];\n    if (exp < ZERO_EXPONENT) {\n      neg=true;\n      // We don't currently use exp on decoding...\n      // exp = ZERO_EXPONENT - exp;\n      out[wpos++]='-';\n    } else {\n      neg=false;\n    }\n\n    // since so many values will fall in one char, pull it\n    // out of the loop (esp since the first value must\n    // be special-cased to not print leading zeros.\n    // integer division is still expensive, so it's best to check\n    // if you actually need to do it.\n    //\n    // TIP: write a small function in gcc or cl and see what\n    // the optimized assemply output looks like (and which is fastest).\n    // In C you can specify \"unsigned\" which gives the compiler more\n    // info than the Java compiler has.\n    int val = arr[start++];\n    if (neg) val = 9999 - val;\n\n    /***\n    if (val < 10) {\n      out[wpos++] = (char)(val + '0');\n    } else if (val < 100) {\n      out[wpos++] = (char)(val/10 + '0');\n      out[wpos++] = (char)(val%10 + '0');\n    } else if (val < 1000) {\n      out[wpos++] = (char)(val/100 + '0');\n      out[wpos++] = (char)((val/10)%10 + '0');\n      out[wpos++] = (char)(val%10 + '0');\n    } else {\n      out[wpos++] = (char)(val/1000 + '0');\n      out[wpos++] = (char)((val/100)%10 + '0');\n      out[wpos++] = (char)((val/10)%10 + '0');\n      out[wpos++] = (char)(val % 10 + '0');\n    }\n    ***/\n\n    if (val < 10) {\n      out[wpos++] = (char)(val + '0');\n    } else if (val < 100) {\n      int div = div10(val);\n      int ones = val - mul10(div); // mod 10\n      out[wpos++] = (char)(div + '0');\n      out[wpos++] = (char)(ones + '0');\n    } else if (val < 1000) {\n      int div = div10(val);\n      int ones = val - mul10(div); // mod 10\n      val=div;\n      div = div10(val);\n      int tens = val - mul10(div); // mod 10\n      out[wpos++] = (char)(div + '0');\n      out[wpos++] = (char)(tens + '0');\n      out[wpos++] = (char)(ones + '0');\n    } else {\n      int div = div10(val);\n      int ones = val - mul10(div); // mod 10\n      val=div;\n      div = div10(val);\n      int tens = val - mul10(div); // mod 10\n      val=div;\n      div = div10(val);\n      int hundreds = val - mul10(div); // mod 10\n\n      out[wpos++] = (char)(div + '0');\n      out[wpos++] = (char)(hundreds + '0');\n      out[wpos++] = (char)(tens + '0');\n      out[wpos++] = (char)(ones + '0');\n    }\n\n\n    while (start < end) {\n      val = arr[start++];\n      if (neg) val = 9999 - val;\n\n      int div = div10(val);\n      int ones = val - mul10(div); // mod 10\n      val=div;\n      div = div10(val);\n      int tens = val - mul10(div); // mod 10\n      val=div;\n      div = div10(val);\n      int hundreds = val - mul10(div); // mod 10\n\n      /***\n      int ones = val % 10;\n      val /= 10;\n      int tens = val!=0 ? val % 10 : 0;\n      val /= 10;\n      int hundreds = val!=0 ? val % 10 : 0;\n      val /= 10;\n      int thousands = val!=0 ? val % 10 : 0;\n      ***/\n\n      /***\n      int thousands = val>=1000 ? val/1000 : 0;\n      int hundreds  = val>=100 ? (val/100)%10 : 0;\n      int tens      = val>=10 ? (val/10)%10 : 0;\n      int ones      = val % 10;\n      ***/\n\n      /***\n      int thousands =  val/1000;\n      int hundreds  = (val/100)%10;\n      int tens      = (val/10)%10;\n      int ones      = val % 10;\n      ***/\n\n      out[wpos++] = (char)(div + '0');\n      out[wpos++] = (char)(hundreds + '0');\n      out[wpos++] = (char)(tens + '0');\n      out[wpos++] = (char)(ones + '0');\n    }\n\n    // OPTIONAL: if trailing zeros were truncated, then this is where\n    // we would restore them (compare number of chars read vs exponent)\n\n    return wpos-offset;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/util/BCDUtils#base10kSortableIntToBase10(char[],int,int,char[],int).mjava","pathOld":"/dev/null","sourceNew":"  // Converts a base100 sortable number to base10 character form\n// returns number of chars written.\n// At least 1 char is always written.\n  public static int base10kSortableIntToBase10(char[] arr, int start, int end,\n                                               char[] out, int offset)\n  {\n    // Take care of \"0\" case first.  It's the only number that is represented\n    // in one char since we don't chop trailing zeros.\n    if (end-start == 1) {\n      out[offset]='0';\n      return 1;\n    }\n\n    int wpos = offset;  // write position\n    boolean neg;\n    int exp = arr[start++];\n    if (exp < ZERO_EXPONENT) {\n      neg=true;\n      // We don't currently use exp on decoding...\n      // exp = ZERO_EXPONENT - exp;\n      out[wpos++]='-';\n    } else {\n      neg=false;\n    }\n\n    // since so many values will fall in one char, pull it\n    // out of the loop (esp since the first value must\n    // be special-cased to not print leading zeros.\n    // integer division is still expensive, so it's best to check\n    // if you actually need to do it.\n    //\n    // TIP: write a small function in gcc or cl and see what\n    // the optimized assemply output looks like (and which is fastest).\n    // In C you can specify \"unsigned\" which gives the compiler more\n    // info than the Java compiler has.\n    int val = arr[start++];\n    if (neg) val = 9999 - val;\n\n    /***\n    if (val < 10) {\n      out[wpos++] = (char)(val + '0');\n    } else if (val < 100) {\n      out[wpos++] = (char)(val/10 + '0');\n      out[wpos++] = (char)(val%10 + '0');\n    } else if (val < 1000) {\n      out[wpos++] = (char)(val/100 + '0');\n      out[wpos++] = (char)((val/10)%10 + '0');\n      out[wpos++] = (char)(val%10 + '0');\n    } else {\n      out[wpos++] = (char)(val/1000 + '0');\n      out[wpos++] = (char)((val/100)%10 + '0');\n      out[wpos++] = (char)((val/10)%10 + '0');\n      out[wpos++] = (char)(val % 10 + '0');\n    }\n    ***/\n\n    if (val < 10) {\n      out[wpos++] = (char)(val + '0');\n    } else if (val < 100) {\n      int div = div10(val);\n      int ones = val - mul10(div); // mod 10\n      out[wpos++] = (char)(div + '0');\n      out[wpos++] = (char)(ones + '0');\n    } else if (val < 1000) {\n      int div = div10(val);\n      int ones = val - mul10(div); // mod 10\n      val=div;\n      div = div10(val);\n      int tens = val - mul10(div); // mod 10\n      out[wpos++] = (char)(div + '0');\n      out[wpos++] = (char)(tens + '0');\n      out[wpos++] = (char)(ones + '0');\n    } else {\n      int div = div10(val);\n      int ones = val - mul10(div); // mod 10\n      val=div;\n      div = div10(val);\n      int tens = val - mul10(div); // mod 10\n      val=div;\n      div = div10(val);\n      int hundreds = val - mul10(div); // mod 10\n\n      out[wpos++] = (char)(div + '0');\n      out[wpos++] = (char)(hundreds + '0');\n      out[wpos++] = (char)(tens + '0');\n      out[wpos++] = (char)(ones + '0');\n    }\n\n\n    while (start < end) {\n      val = arr[start++];\n      if (neg) val = 9999 - val;\n\n      int div = div10(val);\n      int ones = val - mul10(div); // mod 10\n      val=div;\n      div = div10(val);\n      int tens = val - mul10(div); // mod 10\n      val=div;\n      div = div10(val);\n      int hundreds = val - mul10(div); // mod 10\n\n      /***\n      int ones = val % 10;\n      val /= 10;\n      int tens = val!=0 ? val % 10 : 0;\n      val /= 10;\n      int hundreds = val!=0 ? val % 10 : 0;\n      val /= 10;\n      int thousands = val!=0 ? val % 10 : 0;\n      ***/\n\n      /***\n      int thousands = val>=1000 ? val/1000 : 0;\n      int hundreds  = val>=100 ? (val/100)%10 : 0;\n      int tens      = val>=10 ? (val/10)%10 : 0;\n      int ones      = val % 10;\n      ***/\n\n      /***\n      int thousands =  val/1000;\n      int hundreds  = (val/100)%10;\n      int tens      = (val/10)%10;\n      int ones      = val % 10;\n      ***/\n\n      out[wpos++] = (char)(div + '0');\n      out[wpos++] = (char)(hundreds + '0');\n      out[wpos++] = (char)(tens + '0');\n      out[wpos++] = (char)(ones + '0');\n    }\n\n    // OPTIONAL: if trailing zeros were truncated, then this is where\n    // we would restore them (compare number of chars read vs exponent)\n\n    return wpos-offset;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/BCDUtils#base10kSortableIntToBase10(char[],int,int,char[],int).mjava","pathOld":"solr/src/java/org/apache/solr/util/BCDUtils#base10kSortableIntToBase10(char[],int,int,char[],int).mjava","sourceNew":"  // Converts a base100 sortable number to base10 character form\n// returns number of chars written.\n// At least 1 char is always written.\n  public static int base10kSortableIntToBase10(char[] arr, int start, int end,\n                                               char[] out, int offset)\n  {\n    // Take care of \"0\" case first.  It's the only number that is represented\n    // in one char since we don't chop trailing zeros.\n    if (end-start == 1) {\n      out[offset]='0';\n      return 1;\n    }\n\n    int wpos = offset;  // write position\n    boolean neg;\n    int exp = arr[start++];\n    if (exp < ZERO_EXPONENT) {\n      neg=true;\n      // We don't currently use exp on decoding...\n      // exp = ZERO_EXPONENT - exp;\n      out[wpos++]='-';\n    } else {\n      neg=false;\n    }\n\n    // since so many values will fall in one char, pull it\n    // out of the loop (esp since the first value must\n    // be special-cased to not print leading zeros.\n    // integer division is still expensive, so it's best to check\n    // if you actually need to do it.\n    //\n    // TIP: write a small function in gcc or cl and see what\n    // the optimized assemply output looks like (and which is fastest).\n    // In C you can specify \"unsigned\" which gives the compiler more\n    // info than the Java compiler has.\n    int val = arr[start++];\n    if (neg) val = 9999 - val;\n\n    /***\n    if (val < 10) {\n      out[wpos++] = (char)(val + '0');\n    } else if (val < 100) {\n      out[wpos++] = (char)(val/10 + '0');\n      out[wpos++] = (char)(val%10 + '0');\n    } else if (val < 1000) {\n      out[wpos++] = (char)(val/100 + '0');\n      out[wpos++] = (char)((val/10)%10 + '0');\n      out[wpos++] = (char)(val%10 + '0');\n    } else {\n      out[wpos++] = (char)(val/1000 + '0');\n      out[wpos++] = (char)((val/100)%10 + '0');\n      out[wpos++] = (char)((val/10)%10 + '0');\n      out[wpos++] = (char)(val % 10 + '0');\n    }\n    ***/\n\n    if (val < 10) {\n      out[wpos++] = (char)(val + '0');\n    } else if (val < 100) {\n      int div = div10(val);\n      int ones = val - mul10(div); // mod 10\n      out[wpos++] = (char)(div + '0');\n      out[wpos++] = (char)(ones + '0');\n    } else if (val < 1000) {\n      int div = div10(val);\n      int ones = val - mul10(div); // mod 10\n      val=div;\n      div = div10(val);\n      int tens = val - mul10(div); // mod 10\n      out[wpos++] = (char)(div + '0');\n      out[wpos++] = (char)(tens + '0');\n      out[wpos++] = (char)(ones + '0');\n    } else {\n      int div = div10(val);\n      int ones = val - mul10(div); // mod 10\n      val=div;\n      div = div10(val);\n      int tens = val - mul10(div); // mod 10\n      val=div;\n      div = div10(val);\n      int hundreds = val - mul10(div); // mod 10\n\n      out[wpos++] = (char)(div + '0');\n      out[wpos++] = (char)(hundreds + '0');\n      out[wpos++] = (char)(tens + '0');\n      out[wpos++] = (char)(ones + '0');\n    }\n\n\n    while (start < end) {\n      val = arr[start++];\n      if (neg) val = 9999 - val;\n\n      int div = div10(val);\n      int ones = val - mul10(div); // mod 10\n      val=div;\n      div = div10(val);\n      int tens = val - mul10(div); // mod 10\n      val=div;\n      div = div10(val);\n      int hundreds = val - mul10(div); // mod 10\n\n      /***\n      int ones = val % 10;\n      val /= 10;\n      int tens = val!=0 ? val % 10 : 0;\n      val /= 10;\n      int hundreds = val!=0 ? val % 10 : 0;\n      val /= 10;\n      int thousands = val!=0 ? val % 10 : 0;\n      ***/\n\n      /***\n      int thousands = val>=1000 ? val/1000 : 0;\n      int hundreds  = val>=100 ? (val/100)%10 : 0;\n      int tens      = val>=10 ? (val/10)%10 : 0;\n      int ones      = val % 10;\n      ***/\n\n      /***\n      int thousands =  val/1000;\n      int hundreds  = (val/100)%10;\n      int tens      = (val/10)%10;\n      int ones      = val % 10;\n      ***/\n\n      out[wpos++] = (char)(div + '0');\n      out[wpos++] = (char)(hundreds + '0');\n      out[wpos++] = (char)(tens + '0');\n      out[wpos++] = (char)(ones + '0');\n    }\n\n    // OPTIONAL: if trailing zeros were truncated, then this is where\n    // we would restore them (compare number of chars read vs exponent)\n\n    return wpos-offset;\n  }\n\n","sourceOld":"  // Converts a base100 sortable number to base10 character form\n// returns number of chars written.\n// At least 1 char is always written.\n  public static int base10kSortableIntToBase10(char[] arr, int start, int end,\n                                               char[] out, int offset)\n  {\n    // Take care of \"0\" case first.  It's the only number that is represented\n    // in one char since we don't chop trailing zeros.\n    if (end-start == 1) {\n      out[offset]='0';\n      return 1;\n    }\n\n    int wpos = offset;  // write position\n    boolean neg;\n    int exp = arr[start++];\n    if (exp < ZERO_EXPONENT) {\n      neg=true;\n      // We don't currently use exp on decoding...\n      // exp = ZERO_EXPONENT - exp;\n      out[wpos++]='-';\n    } else {\n      neg=false;\n    }\n\n    // since so many values will fall in one char, pull it\n    // out of the loop (esp since the first value must\n    // be special-cased to not print leading zeros.\n    // integer division is still expensive, so it's best to check\n    // if you actually need to do it.\n    //\n    // TIP: write a small function in gcc or cl and see what\n    // the optimized assemply output looks like (and which is fastest).\n    // In C you can specify \"unsigned\" which gives the compiler more\n    // info than the Java compiler has.\n    int val = arr[start++];\n    if (neg) val = 9999 - val;\n\n    /***\n    if (val < 10) {\n      out[wpos++] = (char)(val + '0');\n    } else if (val < 100) {\n      out[wpos++] = (char)(val/10 + '0');\n      out[wpos++] = (char)(val%10 + '0');\n    } else if (val < 1000) {\n      out[wpos++] = (char)(val/100 + '0');\n      out[wpos++] = (char)((val/10)%10 + '0');\n      out[wpos++] = (char)(val%10 + '0');\n    } else {\n      out[wpos++] = (char)(val/1000 + '0');\n      out[wpos++] = (char)((val/100)%10 + '0');\n      out[wpos++] = (char)((val/10)%10 + '0');\n      out[wpos++] = (char)(val % 10 + '0');\n    }\n    ***/\n\n    if (val < 10) {\n      out[wpos++] = (char)(val + '0');\n    } else if (val < 100) {\n      int div = div10(val);\n      int ones = val - mul10(div); // mod 10\n      out[wpos++] = (char)(div + '0');\n      out[wpos++] = (char)(ones + '0');\n    } else if (val < 1000) {\n      int div = div10(val);\n      int ones = val - mul10(div); // mod 10\n      val=div;\n      div = div10(val);\n      int tens = val - mul10(div); // mod 10\n      out[wpos++] = (char)(div + '0');\n      out[wpos++] = (char)(tens + '0');\n      out[wpos++] = (char)(ones + '0');\n    } else {\n      int div = div10(val);\n      int ones = val - mul10(div); // mod 10\n      val=div;\n      div = div10(val);\n      int tens = val - mul10(div); // mod 10\n      val=div;\n      div = div10(val);\n      int hundreds = val - mul10(div); // mod 10\n\n      out[wpos++] = (char)(div + '0');\n      out[wpos++] = (char)(hundreds + '0');\n      out[wpos++] = (char)(tens + '0');\n      out[wpos++] = (char)(ones + '0');\n    }\n\n\n    while (start < end) {\n      val = arr[start++];\n      if (neg) val = 9999 - val;\n\n      int div = div10(val);\n      int ones = val - mul10(div); // mod 10\n      val=div;\n      div = div10(val);\n      int tens = val - mul10(div); // mod 10\n      val=div;\n      div = div10(val);\n      int hundreds = val - mul10(div); // mod 10\n\n      /***\n      int ones = val % 10;\n      val /= 10;\n      int tens = val!=0 ? val % 10 : 0;\n      val /= 10;\n      int hundreds = val!=0 ? val % 10 : 0;\n      val /= 10;\n      int thousands = val!=0 ? val % 10 : 0;\n      ***/\n\n      /***\n      int thousands = val>=1000 ? val/1000 : 0;\n      int hundreds  = val>=100 ? (val/100)%10 : 0;\n      int tens      = val>=10 ? (val/10)%10 : 0;\n      int ones      = val % 10;\n      ***/\n\n      /***\n      int thousands =  val/1000;\n      int hundreds  = (val/100)%10;\n      int tens      = (val/10)%10;\n      int ones      = val % 10;\n      ***/\n\n      out[wpos++] = (char)(div + '0');\n      out[wpos++] = (char)(hundreds + '0');\n      out[wpos++] = (char)(tens + '0');\n      out[wpos++] = (char)(ones + '0');\n    }\n\n    // OPTIONAL: if trailing zeros were truncated, then this is where\n    // we would restore them (compare number of chars read vs exponent)\n\n    return wpos-offset;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/BCDUtils#base10kSortableIntToBase10(char[],int,int,char[],int).mjava","pathOld":"solr/src/java/org/apache/solr/util/BCDUtils#base10kSortableIntToBase10(char[],int,int,char[],int).mjava","sourceNew":"  // Converts a base100 sortable number to base10 character form\n// returns number of chars written.\n// At least 1 char is always written.\n  public static int base10kSortableIntToBase10(char[] arr, int start, int end,\n                                               char[] out, int offset)\n  {\n    // Take care of \"0\" case first.  It's the only number that is represented\n    // in one char since we don't chop trailing zeros.\n    if (end-start == 1) {\n      out[offset]='0';\n      return 1;\n    }\n\n    int wpos = offset;  // write position\n    boolean neg;\n    int exp = arr[start++];\n    if (exp < ZERO_EXPONENT) {\n      neg=true;\n      // We don't currently use exp on decoding...\n      // exp = ZERO_EXPONENT - exp;\n      out[wpos++]='-';\n    } else {\n      neg=false;\n    }\n\n    // since so many values will fall in one char, pull it\n    // out of the loop (esp since the first value must\n    // be special-cased to not print leading zeros.\n    // integer division is still expensive, so it's best to check\n    // if you actually need to do it.\n    //\n    // TIP: write a small function in gcc or cl and see what\n    // the optimized assemply output looks like (and which is fastest).\n    // In C you can specify \"unsigned\" which gives the compiler more\n    // info than the Java compiler has.\n    int val = arr[start++];\n    if (neg) val = 9999 - val;\n\n    /***\n    if (val < 10) {\n      out[wpos++] = (char)(val + '0');\n    } else if (val < 100) {\n      out[wpos++] = (char)(val/10 + '0');\n      out[wpos++] = (char)(val%10 + '0');\n    } else if (val < 1000) {\n      out[wpos++] = (char)(val/100 + '0');\n      out[wpos++] = (char)((val/10)%10 + '0');\n      out[wpos++] = (char)(val%10 + '0');\n    } else {\n      out[wpos++] = (char)(val/1000 + '0');\n      out[wpos++] = (char)((val/100)%10 + '0');\n      out[wpos++] = (char)((val/10)%10 + '0');\n      out[wpos++] = (char)(val % 10 + '0');\n    }\n    ***/\n\n    if (val < 10) {\n      out[wpos++] = (char)(val + '0');\n    } else if (val < 100) {\n      int div = div10(val);\n      int ones = val - mul10(div); // mod 10\n      out[wpos++] = (char)(div + '0');\n      out[wpos++] = (char)(ones + '0');\n    } else if (val < 1000) {\n      int div = div10(val);\n      int ones = val - mul10(div); // mod 10\n      val=div;\n      div = div10(val);\n      int tens = val - mul10(div); // mod 10\n      out[wpos++] = (char)(div + '0');\n      out[wpos++] = (char)(tens + '0');\n      out[wpos++] = (char)(ones + '0');\n    } else {\n      int div = div10(val);\n      int ones = val - mul10(div); // mod 10\n      val=div;\n      div = div10(val);\n      int tens = val - mul10(div); // mod 10\n      val=div;\n      div = div10(val);\n      int hundreds = val - mul10(div); // mod 10\n\n      out[wpos++] = (char)(div + '0');\n      out[wpos++] = (char)(hundreds + '0');\n      out[wpos++] = (char)(tens + '0');\n      out[wpos++] = (char)(ones + '0');\n    }\n\n\n    while (start < end) {\n      val = arr[start++];\n      if (neg) val = 9999 - val;\n\n      int div = div10(val);\n      int ones = val - mul10(div); // mod 10\n      val=div;\n      div = div10(val);\n      int tens = val - mul10(div); // mod 10\n      val=div;\n      div = div10(val);\n      int hundreds = val - mul10(div); // mod 10\n\n      /***\n      int ones = val % 10;\n      val /= 10;\n      int tens = val!=0 ? val % 10 : 0;\n      val /= 10;\n      int hundreds = val!=0 ? val % 10 : 0;\n      val /= 10;\n      int thousands = val!=0 ? val % 10 : 0;\n      ***/\n\n      /***\n      int thousands = val>=1000 ? val/1000 : 0;\n      int hundreds  = val>=100 ? (val/100)%10 : 0;\n      int tens      = val>=10 ? (val/10)%10 : 0;\n      int ones      = val % 10;\n      ***/\n\n      /***\n      int thousands =  val/1000;\n      int hundreds  = (val/100)%10;\n      int tens      = (val/10)%10;\n      int ones      = val % 10;\n      ***/\n\n      out[wpos++] = (char)(div + '0');\n      out[wpos++] = (char)(hundreds + '0');\n      out[wpos++] = (char)(tens + '0');\n      out[wpos++] = (char)(ones + '0');\n    }\n\n    // OPTIONAL: if trailing zeros were truncated, then this is where\n    // we would restore them (compare number of chars read vs exponent)\n\n    return wpos-offset;\n  }\n\n","sourceOld":"  // Converts a base100 sortable number to base10 character form\n// returns number of chars written.\n// At least 1 char is always written.\n  public static int base10kSortableIntToBase10(char[] arr, int start, int end,\n                                               char[] out, int offset)\n  {\n    // Take care of \"0\" case first.  It's the only number that is represented\n    // in one char since we don't chop trailing zeros.\n    if (end-start == 1) {\n      out[offset]='0';\n      return 1;\n    }\n\n    int wpos = offset;  // write position\n    boolean neg;\n    int exp = arr[start++];\n    if (exp < ZERO_EXPONENT) {\n      neg=true;\n      // We don't currently use exp on decoding...\n      // exp = ZERO_EXPONENT - exp;\n      out[wpos++]='-';\n    } else {\n      neg=false;\n    }\n\n    // since so many values will fall in one char, pull it\n    // out of the loop (esp since the first value must\n    // be special-cased to not print leading zeros.\n    // integer division is still expensive, so it's best to check\n    // if you actually need to do it.\n    //\n    // TIP: write a small function in gcc or cl and see what\n    // the optimized assemply output looks like (and which is fastest).\n    // In C you can specify \"unsigned\" which gives the compiler more\n    // info than the Java compiler has.\n    int val = arr[start++];\n    if (neg) val = 9999 - val;\n\n    /***\n    if (val < 10) {\n      out[wpos++] = (char)(val + '0');\n    } else if (val < 100) {\n      out[wpos++] = (char)(val/10 + '0');\n      out[wpos++] = (char)(val%10 + '0');\n    } else if (val < 1000) {\n      out[wpos++] = (char)(val/100 + '0');\n      out[wpos++] = (char)((val/10)%10 + '0');\n      out[wpos++] = (char)(val%10 + '0');\n    } else {\n      out[wpos++] = (char)(val/1000 + '0');\n      out[wpos++] = (char)((val/100)%10 + '0');\n      out[wpos++] = (char)((val/10)%10 + '0');\n      out[wpos++] = (char)(val % 10 + '0');\n    }\n    ***/\n\n    if (val < 10) {\n      out[wpos++] = (char)(val + '0');\n    } else if (val < 100) {\n      int div = div10(val);\n      int ones = val - mul10(div); // mod 10\n      out[wpos++] = (char)(div + '0');\n      out[wpos++] = (char)(ones + '0');\n    } else if (val < 1000) {\n      int div = div10(val);\n      int ones = val - mul10(div); // mod 10\n      val=div;\n      div = div10(val);\n      int tens = val - mul10(div); // mod 10\n      out[wpos++] = (char)(div + '0');\n      out[wpos++] = (char)(tens + '0');\n      out[wpos++] = (char)(ones + '0');\n    } else {\n      int div = div10(val);\n      int ones = val - mul10(div); // mod 10\n      val=div;\n      div = div10(val);\n      int tens = val - mul10(div); // mod 10\n      val=div;\n      div = div10(val);\n      int hundreds = val - mul10(div); // mod 10\n\n      out[wpos++] = (char)(div + '0');\n      out[wpos++] = (char)(hundreds + '0');\n      out[wpos++] = (char)(tens + '0');\n      out[wpos++] = (char)(ones + '0');\n    }\n\n\n    while (start < end) {\n      val = arr[start++];\n      if (neg) val = 9999 - val;\n\n      int div = div10(val);\n      int ones = val - mul10(div); // mod 10\n      val=div;\n      div = div10(val);\n      int tens = val - mul10(div); // mod 10\n      val=div;\n      div = div10(val);\n      int hundreds = val - mul10(div); // mod 10\n\n      /***\n      int ones = val % 10;\n      val /= 10;\n      int tens = val!=0 ? val % 10 : 0;\n      val /= 10;\n      int hundreds = val!=0 ? val % 10 : 0;\n      val /= 10;\n      int thousands = val!=0 ? val % 10 : 0;\n      ***/\n\n      /***\n      int thousands = val>=1000 ? val/1000 : 0;\n      int hundreds  = val>=100 ? (val/100)%10 : 0;\n      int tens      = val>=10 ? (val/10)%10 : 0;\n      int ones      = val % 10;\n      ***/\n\n      /***\n      int thousands =  val/1000;\n      int hundreds  = (val/100)%10;\n      int tens      = (val/10)%10;\n      int ones      = val % 10;\n      ***/\n\n      out[wpos++] = (char)(div + '0');\n      out[wpos++] = (char)(hundreds + '0');\n      out[wpos++] = (char)(tens + '0');\n      out[wpos++] = (char)(ones + '0');\n    }\n\n    // OPTIONAL: if trailing zeros were truncated, then this is where\n    // we would restore them (compare number of chars read vs exponent)\n\n    return wpos-offset;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/BCDUtils#base10kSortableIntToBase10(char[],int,int,char[],int).mjava","pathOld":"solr/src/java/org/apache/solr/util/BCDUtils#base10kSortableIntToBase10(char[],int,int,char[],int).mjava","sourceNew":"  // Converts a base100 sortable number to base10 character form\n// returns number of chars written.\n// At least 1 char is always written.\n  public static int base10kSortableIntToBase10(char[] arr, int start, int end,\n                                               char[] out, int offset)\n  {\n    // Take care of \"0\" case first.  It's the only number that is represented\n    // in one char since we don't chop trailing zeros.\n    if (end-start == 1) {\n      out[offset]='0';\n      return 1;\n    }\n\n    int wpos = offset;  // write position\n    boolean neg;\n    int exp = arr[start++];\n    if (exp < ZERO_EXPONENT) {\n      neg=true;\n      // We don't currently use exp on decoding...\n      // exp = ZERO_EXPONENT - exp;\n      out[wpos++]='-';\n    } else {\n      neg=false;\n    }\n\n    // since so many values will fall in one char, pull it\n    // out of the loop (esp since the first value must\n    // be special-cased to not print leading zeros.\n    // integer division is still expensive, so it's best to check\n    // if you actually need to do it.\n    //\n    // TIP: write a small function in gcc or cl and see what\n    // the optimized assemply output looks like (and which is fastest).\n    // In C you can specify \"unsigned\" which gives the compiler more\n    // info than the Java compiler has.\n    int val = arr[start++];\n    if (neg) val = 9999 - val;\n\n    /***\n    if (val < 10) {\n      out[wpos++] = (char)(val + '0');\n    } else if (val < 100) {\n      out[wpos++] = (char)(val/10 + '0');\n      out[wpos++] = (char)(val%10 + '0');\n    } else if (val < 1000) {\n      out[wpos++] = (char)(val/100 + '0');\n      out[wpos++] = (char)((val/10)%10 + '0');\n      out[wpos++] = (char)(val%10 + '0');\n    } else {\n      out[wpos++] = (char)(val/1000 + '0');\n      out[wpos++] = (char)((val/100)%10 + '0');\n      out[wpos++] = (char)((val/10)%10 + '0');\n      out[wpos++] = (char)(val % 10 + '0');\n    }\n    ***/\n\n    if (val < 10) {\n      out[wpos++] = (char)(val + '0');\n    } else if (val < 100) {\n      int div = div10(val);\n      int ones = val - mul10(div); // mod 10\n      out[wpos++] = (char)(div + '0');\n      out[wpos++] = (char)(ones + '0');\n    } else if (val < 1000) {\n      int div = div10(val);\n      int ones = val - mul10(div); // mod 10\n      val=div;\n      div = div10(val);\n      int tens = val - mul10(div); // mod 10\n      out[wpos++] = (char)(div + '0');\n      out[wpos++] = (char)(tens + '0');\n      out[wpos++] = (char)(ones + '0');\n    } else {\n      int div = div10(val);\n      int ones = val - mul10(div); // mod 10\n      val=div;\n      div = div10(val);\n      int tens = val - mul10(div); // mod 10\n      val=div;\n      div = div10(val);\n      int hundreds = val - mul10(div); // mod 10\n\n      out[wpos++] = (char)(div + '0');\n      out[wpos++] = (char)(hundreds + '0');\n      out[wpos++] = (char)(tens + '0');\n      out[wpos++] = (char)(ones + '0');\n    }\n\n\n    while (start < end) {\n      val = arr[start++];\n      if (neg) val = 9999 - val;\n\n      int div = div10(val);\n      int ones = val - mul10(div); // mod 10\n      val=div;\n      div = div10(val);\n      int tens = val - mul10(div); // mod 10\n      val=div;\n      div = div10(val);\n      int hundreds = val - mul10(div); // mod 10\n\n      /***\n      int ones = val % 10;\n      val /= 10;\n      int tens = val!=0 ? val % 10 : 0;\n      val /= 10;\n      int hundreds = val!=0 ? val % 10 : 0;\n      val /= 10;\n      int thousands = val!=0 ? val % 10 : 0;\n      ***/\n\n      /***\n      int thousands = val>=1000 ? val/1000 : 0;\n      int hundreds  = val>=100 ? (val/100)%10 : 0;\n      int tens      = val>=10 ? (val/10)%10 : 0;\n      int ones      = val % 10;\n      ***/\n\n      /***\n      int thousands =  val/1000;\n      int hundreds  = (val/100)%10;\n      int tens      = (val/10)%10;\n      int ones      = val % 10;\n      ***/\n\n      out[wpos++] = (char)(div + '0');\n      out[wpos++] = (char)(hundreds + '0');\n      out[wpos++] = (char)(tens + '0');\n      out[wpos++] = (char)(ones + '0');\n    }\n\n    // OPTIONAL: if trailing zeros were truncated, then this is where\n    // we would restore them (compare number of chars read vs exponent)\n\n    return wpos-offset;\n  }\n\n","sourceOld":"  // Converts a base100 sortable number to base10 character form\n// returns number of chars written.\n// At least 1 char is always written.\n  public static int base10kSortableIntToBase10(char[] arr, int start, int end,\n                                               char[] out, int offset)\n  {\n    // Take care of \"0\" case first.  It's the only number that is represented\n    // in one char since we don't chop trailing zeros.\n    if (end-start == 1) {\n      out[offset]='0';\n      return 1;\n    }\n\n    int wpos = offset;  // write position\n    boolean neg;\n    int exp = arr[start++];\n    if (exp < ZERO_EXPONENT) {\n      neg=true;\n      // We don't currently use exp on decoding...\n      // exp = ZERO_EXPONENT - exp;\n      out[wpos++]='-';\n    } else {\n      neg=false;\n    }\n\n    // since so many values will fall in one char, pull it\n    // out of the loop (esp since the first value must\n    // be special-cased to not print leading zeros.\n    // integer division is still expensive, so it's best to check\n    // if you actually need to do it.\n    //\n    // TIP: write a small function in gcc or cl and see what\n    // the optimized assemply output looks like (and which is fastest).\n    // In C you can specify \"unsigned\" which gives the compiler more\n    // info than the Java compiler has.\n    int val = arr[start++];\n    if (neg) val = 9999 - val;\n\n    /***\n    if (val < 10) {\n      out[wpos++] = (char)(val + '0');\n    } else if (val < 100) {\n      out[wpos++] = (char)(val/10 + '0');\n      out[wpos++] = (char)(val%10 + '0');\n    } else if (val < 1000) {\n      out[wpos++] = (char)(val/100 + '0');\n      out[wpos++] = (char)((val/10)%10 + '0');\n      out[wpos++] = (char)(val%10 + '0');\n    } else {\n      out[wpos++] = (char)(val/1000 + '0');\n      out[wpos++] = (char)((val/100)%10 + '0');\n      out[wpos++] = (char)((val/10)%10 + '0');\n      out[wpos++] = (char)(val % 10 + '0');\n    }\n    ***/\n\n    if (val < 10) {\n      out[wpos++] = (char)(val + '0');\n    } else if (val < 100) {\n      int div = div10(val);\n      int ones = val - mul10(div); // mod 10\n      out[wpos++] = (char)(div + '0');\n      out[wpos++] = (char)(ones + '0');\n    } else if (val < 1000) {\n      int div = div10(val);\n      int ones = val - mul10(div); // mod 10\n      val=div;\n      div = div10(val);\n      int tens = val - mul10(div); // mod 10\n      out[wpos++] = (char)(div + '0');\n      out[wpos++] = (char)(tens + '0');\n      out[wpos++] = (char)(ones + '0');\n    } else {\n      int div = div10(val);\n      int ones = val - mul10(div); // mod 10\n      val=div;\n      div = div10(val);\n      int tens = val - mul10(div); // mod 10\n      val=div;\n      div = div10(val);\n      int hundreds = val - mul10(div); // mod 10\n\n      out[wpos++] = (char)(div + '0');\n      out[wpos++] = (char)(hundreds + '0');\n      out[wpos++] = (char)(tens + '0');\n      out[wpos++] = (char)(ones + '0');\n    }\n\n\n    while (start < end) {\n      val = arr[start++];\n      if (neg) val = 9999 - val;\n\n      int div = div10(val);\n      int ones = val - mul10(div); // mod 10\n      val=div;\n      div = div10(val);\n      int tens = val - mul10(div); // mod 10\n      val=div;\n      div = div10(val);\n      int hundreds = val - mul10(div); // mod 10\n\n      /***\n      int ones = val % 10;\n      val /= 10;\n      int tens = val!=0 ? val % 10 : 0;\n      val /= 10;\n      int hundreds = val!=0 ? val % 10 : 0;\n      val /= 10;\n      int thousands = val!=0 ? val % 10 : 0;\n      ***/\n\n      /***\n      int thousands = val>=1000 ? val/1000 : 0;\n      int hundreds  = val>=100 ? (val/100)%10 : 0;\n      int tens      = val>=10 ? (val/10)%10 : 0;\n      int ones      = val % 10;\n      ***/\n\n      /***\n      int thousands =  val/1000;\n      int hundreds  = (val/100)%10;\n      int tens      = (val/10)%10;\n      int ones      = val % 10;\n      ***/\n\n      out[wpos++] = (char)(div + '0');\n      out[wpos++] = (char)(hundreds + '0');\n      out[wpos++] = (char)(tens + '0');\n      out[wpos++] = (char)(ones + '0');\n    }\n\n    // OPTIONAL: if trailing zeros were truncated, then this is where\n    // we would restore them (compare number of chars read vs exponent)\n\n    return wpos-offset;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["1da8d55113b689b06716246649de6f62430f15c0"],"c26f00b574427b55127e869b935845554afde1fa":["1da8d55113b689b06716246649de6f62430f15c0","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["1da8d55113b689b06716246649de6f62430f15c0"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"1da8d55113b689b06716246649de6f62430f15c0":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}