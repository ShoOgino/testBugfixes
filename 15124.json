{"path":"lucene/src/test/org/apache/lucene/index/TestIndexReaderClone#performDefaultTests(IndexReader).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderClone#performDefaultTests(IndexReader).mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReaderClone#performDefaultTests(IndexReader).mjava","sourceNew":"  /**\n   * 1. Get a norm from the original reader 2. Clone the original reader 3.\n   * Delete a document and set the norm of the cloned reader 4. Verify the norms\n   * are not the same on each reader 5. Verify the doc deleted is only in the\n   * cloned reader 6. Try to delete a document in the original reader, an\n   * exception should be thrown\n   * \n   * @param r1 IndexReader to perform tests on\n   * @throws Exception\n   */\n  private void performDefaultTests(IndexReader r1) throws Exception {\n    float norm1 = Similarity.getDefault().decodeNormValue(r1.norms(\"field1\")[4]);\n\n    IndexReader pr1Clone = (IndexReader) r1.clone();\n    pr1Clone.deleteDocument(10);\n    pr1Clone.setNorm(4, \"field1\", 0.5f);\n    assertTrue(Similarity.getDefault().decodeNormValue(r1.norms(\"field1\")[4]) == norm1);\n    assertTrue(Similarity.getDefault().decodeNormValue(pr1Clone.norms(\"field1\")[4]) != norm1);\n\n    assertTrue(!r1.isDeleted(10));\n    assertTrue(pr1Clone.isDeleted(10));\n\n    // try to update the original reader, which should throw an exception\n    try {\n      r1.deleteDocument(11);\n      fail(\"Tried to delete doc 11 and an exception should have been thrown\");\n    } catch (Exception exception) {\n      // expectted\n    }\n    pr1Clone.close();\n  }\n\n","sourceOld":"  /**\n   * 1. Get a norm from the original reader 2. Clone the original reader 3.\n   * Delete a document and set the norm of the cloned reader 4. Verify the norms\n   * are not the same on each reader 5. Verify the doc deleted is only in the\n   * cloned reader 6. Try to delete a document in the original reader, an\n   * exception should be thrown\n   * \n   * @param r1 IndexReader to perform tests on\n   * @throws Exception\n   */\n  private void performDefaultTests(IndexReader r1) throws Exception {\n    float norm1 = Similarity.getDefault().decodeNormValue(r1.norms(\"field1\")[4]);\n\n    IndexReader pr1Clone = (IndexReader) r1.clone();\n    pr1Clone.deleteDocument(10);\n    pr1Clone.setNorm(4, \"field1\", 0.5f);\n    assertTrue(Similarity.getDefault().decodeNormValue(r1.norms(\"field1\")[4]) == norm1);\n    assertTrue(Similarity.getDefault().decodeNormValue(pr1Clone.norms(\"field1\")[4]) != norm1);\n\n    assertTrue(!r1.isDeleted(10));\n    assertTrue(pr1Clone.isDeleted(10));\n\n    // try to update the original reader, which should throw an exception\n    try {\n      r1.deleteDocument(11);\n      fail(\"Tried to delete doc 11 and an exception should have been thrown\");\n    } catch (Exception exception) {\n      // expectted\n    }\n    pr1Clone.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"406e7055a3e99d3fa6ce49a555a51dd18b321806","date":1282520243,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderClone#performDefaultTests(IndexReader).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderClone#performDefaultTests(IndexReader).mjava","sourceNew":"  /**\n   * 1. Get a norm from the original reader 2. Clone the original reader 3.\n   * Delete a document and set the norm of the cloned reader 4. Verify the norms\n   * are not the same on each reader 5. Verify the doc deleted is only in the\n   * cloned reader 6. Try to delete a document in the original reader, an\n   * exception should be thrown\n   * \n   * @param r1 IndexReader to perform tests on\n   * @throws Exception\n   */\n  private void performDefaultTests(IndexReader r1) throws Exception {\n    float norm1 = Similarity.getDefault().decodeNormValue(r1.norms(\"field1\")[4]);\n\n    IndexReader pr1Clone = (IndexReader) r1.clone();\n    pr1Clone.deleteDocument(10);\n    pr1Clone.setNorm(4, \"field1\", 0.5f);\n    assertTrue(Similarity.getDefault().decodeNormValue(r1.norms(\"field1\")[4]) == norm1);\n    assertTrue(Similarity.getDefault().decodeNormValue(pr1Clone.norms(\"field1\")[4]) != norm1);\n\n    final Bits delDocs = MultiFields.getDeletedDocs(r1);\n    assertTrue(delDocs == null || !delDocs.get(10));\n    assertTrue(MultiFields.getDeletedDocs(pr1Clone).get(10));\n\n    // try to update the original reader, which should throw an exception\n    try {\n      r1.deleteDocument(11);\n      fail(\"Tried to delete doc 11 and an exception should have been thrown\");\n    } catch (Exception exception) {\n      // expectted\n    }\n    pr1Clone.close();\n  }\n\n","sourceOld":"  /**\n   * 1. Get a norm from the original reader 2. Clone the original reader 3.\n   * Delete a document and set the norm of the cloned reader 4. Verify the norms\n   * are not the same on each reader 5. Verify the doc deleted is only in the\n   * cloned reader 6. Try to delete a document in the original reader, an\n   * exception should be thrown\n   * \n   * @param r1 IndexReader to perform tests on\n   * @throws Exception\n   */\n  private void performDefaultTests(IndexReader r1) throws Exception {\n    float norm1 = Similarity.getDefault().decodeNormValue(r1.norms(\"field1\")[4]);\n\n    IndexReader pr1Clone = (IndexReader) r1.clone();\n    pr1Clone.deleteDocument(10);\n    pr1Clone.setNorm(4, \"field1\", 0.5f);\n    assertTrue(Similarity.getDefault().decodeNormValue(r1.norms(\"field1\")[4]) == norm1);\n    assertTrue(Similarity.getDefault().decodeNormValue(pr1Clone.norms(\"field1\")[4]) != norm1);\n\n    assertTrue(!r1.isDeleted(10));\n    assertTrue(pr1Clone.isDeleted(10));\n\n    // try to update the original reader, which should throw an exception\n    try {\n      r1.deleteDocument(11);\n      fail(\"Tried to delete doc 11 and an exception should have been thrown\");\n    } catch (Exception exception) {\n      // expectted\n    }\n    pr1Clone.close();\n  }\n\n","bugFix":["6db660b56f04fdb2853d25cdee8ee0d36559a521"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderClone#performDefaultTests(IndexReader).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderClone#performDefaultTests(IndexReader).mjava","sourceNew":"  /**\n   * 1. Get a norm from the original reader 2. Clone the original reader 3.\n   * Delete a document and set the norm of the cloned reader 4. Verify the norms\n   * are not the same on each reader 5. Verify the doc deleted is only in the\n   * cloned reader 6. Try to delete a document in the original reader, an\n   * exception should be thrown\n   *\n   * @param r1 IndexReader to perform tests on\n   * @throws Exception\n   */\n  private void performDefaultTests(IndexReader r1) throws Exception {\n    float norm1 = Similarity.getDefault().decodeNormValue(r1.norms(\"field1\")[4]);\n\n    IndexReader pr1Clone = (IndexReader) r1.clone();\n    pr1Clone.deleteDocument(10);\n    pr1Clone.setNorm(4, \"field1\", 0.5f);\n    assertTrue(Similarity.getDefault().decodeNormValue(r1.norms(\"field1\")[4]) == norm1);\n    assertTrue(Similarity.getDefault().decodeNormValue(pr1Clone.norms(\"field1\")[4]) != norm1);\n\n    final Bits delDocs = MultiFields.getDeletedDocs(r1);\n    assertTrue(delDocs == null || !delDocs.get(10));\n    assertTrue(MultiFields.getDeletedDocs(pr1Clone).get(10));\n\n    // try to update the original reader, which should throw an exception\n    try {\n      r1.deleteDocument(11);\n      fail(\"Tried to delete doc 11 and an exception should have been thrown\");\n    } catch (Exception exception) {\n      // expectted\n    }\n    pr1Clone.close();\n  }\n\n","sourceOld":"  /**\n   * 1. Get a norm from the original reader 2. Clone the original reader 3.\n   * Delete a document and set the norm of the cloned reader 4. Verify the norms\n   * are not the same on each reader 5. Verify the doc deleted is only in the\n   * cloned reader 6. Try to delete a document in the original reader, an\n   * exception should be thrown\n   * \n   * @param r1 IndexReader to perform tests on\n   * @throws Exception\n   */\n  private void performDefaultTests(IndexReader r1) throws Exception {\n    float norm1 = Similarity.getDefault().decodeNormValue(r1.norms(\"field1\")[4]);\n\n    IndexReader pr1Clone = (IndexReader) r1.clone();\n    pr1Clone.deleteDocument(10);\n    pr1Clone.setNorm(4, \"field1\", 0.5f);\n    assertTrue(Similarity.getDefault().decodeNormValue(r1.norms(\"field1\")[4]) == norm1);\n    assertTrue(Similarity.getDefault().decodeNormValue(pr1Clone.norms(\"field1\")[4]) != norm1);\n\n    assertTrue(!r1.isDeleted(10));\n    assertTrue(pr1Clone.isDeleted(10));\n\n    // try to update the original reader, which should throw an exception\n    try {\n      r1.deleteDocument(11);\n      fail(\"Tried to delete doc 11 and an exception should have been thrown\");\n    } catch (Exception exception) {\n      // expectted\n    }\n    pr1Clone.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0d06946f61921459f43309f86ed621ebe67eebe","date":1294182697,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderClone#performDefaultTests(IndexReader).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderClone#performDefaultTests(IndexReader).mjava","sourceNew":"  /**\n   * 1. Get a norm from the original reader 2. Clone the original reader 3.\n   * Delete a document and set the norm of the cloned reader 4. Verify the norms\n   * are not the same on each reader 5. Verify the doc deleted is only in the\n   * cloned reader 6. Try to delete a document in the original reader, an\n   * exception should be thrown\n   * \n   * @param r1 IndexReader to perform tests on\n   * @throws Exception\n   */\n  private void performDefaultTests(IndexReader r1) throws Exception {\n    float norm1 = Similarity.getDefault().decodeNormValue(MultiNorms.norms(r1, \"field1\")[4]);\n\n    IndexReader pr1Clone = (IndexReader) r1.clone();\n    pr1Clone.deleteDocument(10);\n    pr1Clone.setNorm(4, \"field1\", 0.5f);\n    assertTrue(Similarity.getDefault().decodeNormValue(MultiNorms.norms(r1, \"field1\")[4]) == norm1);\n    assertTrue(Similarity.getDefault().decodeNormValue(MultiNorms.norms(pr1Clone, \"field1\")[4]) != norm1);\n\n    final Bits delDocs = MultiFields.getDeletedDocs(r1);\n    assertTrue(delDocs == null || !delDocs.get(10));\n    assertTrue(MultiFields.getDeletedDocs(pr1Clone).get(10));\n\n    // try to update the original reader, which should throw an exception\n    try {\n      r1.deleteDocument(11);\n      fail(\"Tried to delete doc 11 and an exception should have been thrown\");\n    } catch (Exception exception) {\n      // expectted\n    }\n    pr1Clone.close();\n  }\n\n","sourceOld":"  /**\n   * 1. Get a norm from the original reader 2. Clone the original reader 3.\n   * Delete a document and set the norm of the cloned reader 4. Verify the norms\n   * are not the same on each reader 5. Verify the doc deleted is only in the\n   * cloned reader 6. Try to delete a document in the original reader, an\n   * exception should be thrown\n   * \n   * @param r1 IndexReader to perform tests on\n   * @throws Exception\n   */\n  private void performDefaultTests(IndexReader r1) throws Exception {\n    float norm1 = Similarity.getDefault().decodeNormValue(r1.norms(\"field1\")[4]);\n\n    IndexReader pr1Clone = (IndexReader) r1.clone();\n    pr1Clone.deleteDocument(10);\n    pr1Clone.setNorm(4, \"field1\", 0.5f);\n    assertTrue(Similarity.getDefault().decodeNormValue(r1.norms(\"field1\")[4]) == norm1);\n    assertTrue(Similarity.getDefault().decodeNormValue(pr1Clone.norms(\"field1\")[4]) != norm1);\n\n    final Bits delDocs = MultiFields.getDeletedDocs(r1);\n    assertTrue(delDocs == null || !delDocs.get(10));\n    assertTrue(MultiFields.getDeletedDocs(pr1Clone).get(10));\n\n    // try to update the original reader, which should throw an exception\n    try {\n      r1.deleteDocument(11);\n      fail(\"Tried to delete doc 11 and an exception should have been thrown\");\n    } catch (Exception exception) {\n      // expectted\n    }\n    pr1Clone.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderClone#performDefaultTests(IndexReader).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderClone#performDefaultTests(IndexReader).mjava","sourceNew":"  /**\n   * 1. Get a norm from the original reader 2. Clone the original reader 3.\n   * Delete a document and set the norm of the cloned reader 4. Verify the norms\n   * are not the same on each reader 5. Verify the doc deleted is only in the\n   * cloned reader 6. Try to delete a document in the original reader, an\n   * exception should be thrown\n   * \n   * @param r1 IndexReader to perform tests on\n   * @throws Exception\n   */\n  private void performDefaultTests(IndexReader r1) throws Exception {\n    float norm1 = Similarity.getDefault().decodeNormValue(MultiNorms.norms(r1, \"field1\")[4]);\n\n    IndexReader pr1Clone = (IndexReader) r1.clone();\n    pr1Clone.deleteDocument(10);\n    pr1Clone.setNorm(4, \"field1\", 0.5f);\n    assertTrue(Similarity.getDefault().decodeNormValue(MultiNorms.norms(r1, \"field1\")[4]) == norm1);\n    assertTrue(Similarity.getDefault().decodeNormValue(MultiNorms.norms(pr1Clone, \"field1\")[4]) != norm1);\n\n    final Bits delDocs = MultiFields.getDeletedDocs(r1);\n    assertTrue(delDocs == null || !delDocs.get(10));\n    assertTrue(MultiFields.getDeletedDocs(pr1Clone).get(10));\n\n    // try to update the original reader, which should throw an exception\n    try {\n      r1.deleteDocument(11);\n      fail(\"Tried to delete doc 11 and an exception should have been thrown\");\n    } catch (Exception exception) {\n      // expectted\n    }\n    pr1Clone.close();\n  }\n\n","sourceOld":"  /**\n   * 1. Get a norm from the original reader 2. Clone the original reader 3.\n   * Delete a document and set the norm of the cloned reader 4. Verify the norms\n   * are not the same on each reader 5. Verify the doc deleted is only in the\n   * cloned reader 6. Try to delete a document in the original reader, an\n   * exception should be thrown\n   * \n   * @param r1 IndexReader to perform tests on\n   * @throws Exception\n   */\n  private void performDefaultTests(IndexReader r1) throws Exception {\n    float norm1 = Similarity.getDefault().decodeNormValue(r1.norms(\"field1\")[4]);\n\n    IndexReader pr1Clone = (IndexReader) r1.clone();\n    pr1Clone.deleteDocument(10);\n    pr1Clone.setNorm(4, \"field1\", 0.5f);\n    assertTrue(Similarity.getDefault().decodeNormValue(r1.norms(\"field1\")[4]) == norm1);\n    assertTrue(Similarity.getDefault().decodeNormValue(pr1Clone.norms(\"field1\")[4]) != norm1);\n\n    final Bits delDocs = MultiFields.getDeletedDocs(r1);\n    assertTrue(delDocs == null || !delDocs.get(10));\n    assertTrue(MultiFields.getDeletedDocs(pr1Clone).get(10));\n\n    // try to update the original reader, which should throw an exception\n    try {\n      r1.deleteDocument(11);\n      fail(\"Tried to delete doc 11 and an exception should have been thrown\");\n    } catch (Exception exception) {\n      // expectted\n    }\n    pr1Clone.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a54e23e03b47f3d568ab3020bdd386e4b2f0a05","date":1294877328,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderClone#performDefaultTests(IndexReader).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderClone#performDefaultTests(IndexReader).mjava","sourceNew":"  /**\n   * 1. Get a norm from the original reader 2. Clone the original reader 3.\n   * Delete a document and set the norm of the cloned reader 4. Verify the norms\n   * are not the same on each reader 5. Verify the doc deleted is only in the\n   * cloned reader 6. Try to delete a document in the original reader, an\n   * exception should be thrown\n   * \n   * @param r1 IndexReader to perform tests on\n   * @throws Exception\n   */\n  private void performDefaultTests(IndexReader r1) throws Exception {\n    float norm1 = Similarity.getDefault().decodeNormValue(MultiNorms.norms(r1, \"field1\")[4]);\n\n    IndexReader pr1Clone = (IndexReader) r1.clone();\n    pr1Clone.deleteDocument(10);\n    pr1Clone.setNorm(4, \"field1\", Similarity.getDefault().encodeNormValue(0.5f));\n    assertTrue(Similarity.getDefault().decodeNormValue(MultiNorms.norms(r1, \"field1\")[4]) == norm1);\n    assertTrue(Similarity.getDefault().decodeNormValue(MultiNorms.norms(pr1Clone, \"field1\")[4]) != norm1);\n\n    final Bits delDocs = MultiFields.getDeletedDocs(r1);\n    assertTrue(delDocs == null || !delDocs.get(10));\n    assertTrue(MultiFields.getDeletedDocs(pr1Clone).get(10));\n\n    // try to update the original reader, which should throw an exception\n    try {\n      r1.deleteDocument(11);\n      fail(\"Tried to delete doc 11 and an exception should have been thrown\");\n    } catch (Exception exception) {\n      // expectted\n    }\n    pr1Clone.close();\n  }\n\n","sourceOld":"  /**\n   * 1. Get a norm from the original reader 2. Clone the original reader 3.\n   * Delete a document and set the norm of the cloned reader 4. Verify the norms\n   * are not the same on each reader 5. Verify the doc deleted is only in the\n   * cloned reader 6. Try to delete a document in the original reader, an\n   * exception should be thrown\n   * \n   * @param r1 IndexReader to perform tests on\n   * @throws Exception\n   */\n  private void performDefaultTests(IndexReader r1) throws Exception {\n    float norm1 = Similarity.getDefault().decodeNormValue(MultiNorms.norms(r1, \"field1\")[4]);\n\n    IndexReader pr1Clone = (IndexReader) r1.clone();\n    pr1Clone.deleteDocument(10);\n    pr1Clone.setNorm(4, \"field1\", 0.5f);\n    assertTrue(Similarity.getDefault().decodeNormValue(MultiNorms.norms(r1, \"field1\")[4]) == norm1);\n    assertTrue(Similarity.getDefault().decodeNormValue(MultiNorms.norms(pr1Clone, \"field1\")[4]) != norm1);\n\n    final Bits delDocs = MultiFields.getDeletedDocs(r1);\n    assertTrue(delDocs == null || !delDocs.get(10));\n    assertTrue(MultiFields.getDeletedDocs(pr1Clone).get(10));\n\n    // try to update the original reader, which should throw an exception\n    try {\n      r1.deleteDocument(11);\n      fail(\"Tried to delete doc 11 and an exception should have been thrown\");\n    } catch (Exception exception) {\n      // expectted\n    }\n    pr1Clone.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderClone#performDefaultTests(IndexReader).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderClone#performDefaultTests(IndexReader).mjava","sourceNew":"  /**\n   * 1. Get a norm from the original reader 2. Clone the original reader 3.\n   * Delete a document and set the norm of the cloned reader 4. Verify the norms\n   * are not the same on each reader 5. Verify the doc deleted is only in the\n   * cloned reader 6. Try to delete a document in the original reader, an\n   * exception should be thrown\n   *\n   * @param r1 IndexReader to perform tests on\n   * @throws Exception\n   */\n  private void performDefaultTests(IndexReader r1) throws Exception {\n    float norm1 = Similarity.getDefault().decodeNormValue(MultiNorms.norms(r1, \"field1\")[4]);\n\n    IndexReader pr1Clone = (IndexReader) r1.clone();\n    pr1Clone.deleteDocument(10);\n    pr1Clone.setNorm(4, \"field1\", Similarity.getDefault().encodeNormValue(0.5f));\n    assertTrue(Similarity.getDefault().decodeNormValue(MultiNorms.norms(r1, \"field1\")[4]) == norm1);\n    assertTrue(Similarity.getDefault().decodeNormValue(MultiNorms.norms(pr1Clone, \"field1\")[4]) != norm1);\n\n    final Bits delDocs = MultiFields.getDeletedDocs(r1);\n    assertTrue(delDocs == null || !delDocs.get(10));\n    assertTrue(MultiFields.getDeletedDocs(pr1Clone).get(10));\n\n    // try to update the original reader, which should throw an exception\n    try {\n      r1.deleteDocument(11);\n      fail(\"Tried to delete doc 11 and an exception should have been thrown\");\n    } catch (Exception exception) {\n      // expectted\n    }\n    pr1Clone.close();\n  }\n\n","sourceOld":"  /**\n   * 1. Get a norm from the original reader 2. Clone the original reader 3.\n   * Delete a document and set the norm of the cloned reader 4. Verify the norms\n   * are not the same on each reader 5. Verify the doc deleted is only in the\n   * cloned reader 6. Try to delete a document in the original reader, an\n   * exception should be thrown\n   *\n   * @param r1 IndexReader to perform tests on\n   * @throws Exception\n   */\n  private void performDefaultTests(IndexReader r1) throws Exception {\n    float norm1 = Similarity.getDefault().decodeNormValue(r1.norms(\"field1\")[4]);\n\n    IndexReader pr1Clone = (IndexReader) r1.clone();\n    pr1Clone.deleteDocument(10);\n    pr1Clone.setNorm(4, \"field1\", 0.5f);\n    assertTrue(Similarity.getDefault().decodeNormValue(r1.norms(\"field1\")[4]) == norm1);\n    assertTrue(Similarity.getDefault().decodeNormValue(pr1Clone.norms(\"field1\")[4]) != norm1);\n\n    final Bits delDocs = MultiFields.getDeletedDocs(r1);\n    assertTrue(delDocs == null || !delDocs.get(10));\n    assertTrue(MultiFields.getDeletedDocs(pr1Clone).get(10));\n\n    // try to update the original reader, which should throw an exception\n    try {\n      r1.deleteDocument(11);\n      fail(\"Tried to delete doc 11 and an exception should have been thrown\");\n    } catch (Exception exception) {\n      // expectted\n    }\n    pr1Clone.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd9325c7ff9928fabe81c28553b41fc7aa57dfab","date":1295896411,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderClone#performDefaultTests(IndexReader).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderClone#performDefaultTests(IndexReader).mjava","sourceNew":"  /**\n   * 1. Get a norm from the original reader 2. Clone the original reader 3.\n   * Delete a document and set the norm of the cloned reader 4. Verify the norms\n   * are not the same on each reader 5. Verify the doc deleted is only in the\n   * cloned reader 6. Try to delete a document in the original reader, an\n   * exception should be thrown\n   * \n   * @param r1 IndexReader to perform tests on\n   * @throws Exception\n   */\n  private void performDefaultTests(IndexReader r1) throws Exception {\n    Similarity sim = new DefaultSimilarity().get(\"field1\");\n    float norm1 = sim.decodeNormValue(MultiNorms.norms(r1, \"field1\")[4]);\n\n    IndexReader pr1Clone = (IndexReader) r1.clone();\n    pr1Clone.deleteDocument(10);\n    pr1Clone.setNorm(4, \"field1\", sim.encodeNormValue(0.5f));\n    assertTrue(sim.decodeNormValue(MultiNorms.norms(r1, \"field1\")[4]) == norm1);\n    assertTrue(sim.decodeNormValue(MultiNorms.norms(pr1Clone, \"field1\")[4]) != norm1);\n\n    final Bits delDocs = MultiFields.getDeletedDocs(r1);\n    assertTrue(delDocs == null || !delDocs.get(10));\n    assertTrue(MultiFields.getDeletedDocs(pr1Clone).get(10));\n\n    // try to update the original reader, which should throw an exception\n    try {\n      r1.deleteDocument(11);\n      fail(\"Tried to delete doc 11 and an exception should have been thrown\");\n    } catch (Exception exception) {\n      // expectted\n    }\n    pr1Clone.close();\n  }\n\n","sourceOld":"  /**\n   * 1. Get a norm from the original reader 2. Clone the original reader 3.\n   * Delete a document and set the norm of the cloned reader 4. Verify the norms\n   * are not the same on each reader 5. Verify the doc deleted is only in the\n   * cloned reader 6. Try to delete a document in the original reader, an\n   * exception should be thrown\n   * \n   * @param r1 IndexReader to perform tests on\n   * @throws Exception\n   */\n  private void performDefaultTests(IndexReader r1) throws Exception {\n    float norm1 = Similarity.getDefault().decodeNormValue(MultiNorms.norms(r1, \"field1\")[4]);\n\n    IndexReader pr1Clone = (IndexReader) r1.clone();\n    pr1Clone.deleteDocument(10);\n    pr1Clone.setNorm(4, \"field1\", Similarity.getDefault().encodeNormValue(0.5f));\n    assertTrue(Similarity.getDefault().decodeNormValue(MultiNorms.norms(r1, \"field1\")[4]) == norm1);\n    assertTrue(Similarity.getDefault().decodeNormValue(MultiNorms.norms(pr1Clone, \"field1\")[4]) != norm1);\n\n    final Bits delDocs = MultiFields.getDeletedDocs(r1);\n    assertTrue(delDocs == null || !delDocs.get(10));\n    assertTrue(MultiFields.getDeletedDocs(pr1Clone).get(10));\n\n    // try to update the original reader, which should throw an exception\n    try {\n      r1.deleteDocument(11);\n      fail(\"Tried to delete doc 11 and an exception should have been thrown\");\n    } catch (Exception exception) {\n      // expectted\n    }\n    pr1Clone.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb9b72f7c3d7827c64dd4ec580ded81778da361d","date":1295897920,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderClone#performDefaultTests(IndexReader).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderClone#performDefaultTests(IndexReader).mjava","sourceNew":"  /**\n   * 1. Get a norm from the original reader 2. Clone the original reader 3.\n   * Delete a document and set the norm of the cloned reader 4. Verify the norms\n   * are not the same on each reader 5. Verify the doc deleted is only in the\n   * cloned reader 6. Try to delete a document in the original reader, an\n   * exception should be thrown\n   *\n   * @param r1 IndexReader to perform tests on\n   * @throws Exception\n   */\n  private void performDefaultTests(IndexReader r1) throws Exception {\n    Similarity sim = new DefaultSimilarity().get(\"field1\");\n    float norm1 = sim.decodeNormValue(MultiNorms.norms(r1, \"field1\")[4]);\n\n    IndexReader pr1Clone = (IndexReader) r1.clone();\n    pr1Clone.deleteDocument(10);\n    pr1Clone.setNorm(4, \"field1\", sim.encodeNormValue(0.5f));\n    assertTrue(sim.decodeNormValue(MultiNorms.norms(r1, \"field1\")[4]) == norm1);\n    assertTrue(sim.decodeNormValue(MultiNorms.norms(pr1Clone, \"field1\")[4]) != norm1);\n\n    final Bits delDocs = MultiFields.getDeletedDocs(r1);\n    assertTrue(delDocs == null || !delDocs.get(10));\n    assertTrue(MultiFields.getDeletedDocs(pr1Clone).get(10));\n\n    // try to update the original reader, which should throw an exception\n    try {\n      r1.deleteDocument(11);\n      fail(\"Tried to delete doc 11 and an exception should have been thrown\");\n    } catch (Exception exception) {\n      // expectted\n    }\n    pr1Clone.close();\n  }\n\n","sourceOld":"  /**\n   * 1. Get a norm from the original reader 2. Clone the original reader 3.\n   * Delete a document and set the norm of the cloned reader 4. Verify the norms\n   * are not the same on each reader 5. Verify the doc deleted is only in the\n   * cloned reader 6. Try to delete a document in the original reader, an\n   * exception should be thrown\n   *\n   * @param r1 IndexReader to perform tests on\n   * @throws Exception\n   */\n  private void performDefaultTests(IndexReader r1) throws Exception {\n    float norm1 = Similarity.getDefault().decodeNormValue(MultiNorms.norms(r1, \"field1\")[4]);\n\n    IndexReader pr1Clone = (IndexReader) r1.clone();\n    pr1Clone.deleteDocument(10);\n    pr1Clone.setNorm(4, \"field1\", Similarity.getDefault().encodeNormValue(0.5f));\n    assertTrue(Similarity.getDefault().decodeNormValue(MultiNorms.norms(r1, \"field1\")[4]) == norm1);\n    assertTrue(Similarity.getDefault().decodeNormValue(MultiNorms.norms(pr1Clone, \"field1\")[4]) != norm1);\n\n    final Bits delDocs = MultiFields.getDeletedDocs(r1);\n    assertTrue(delDocs == null || !delDocs.get(10));\n    assertTrue(MultiFields.getDeletedDocs(pr1Clone).get(10));\n\n    // try to update the original reader, which should throw an exception\n    try {\n      r1.deleteDocument(11);\n      fail(\"Tried to delete doc 11 and an exception should have been thrown\");\n    } catch (Exception exception) {\n      // expectted\n    }\n    pr1Clone.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderClone#performDefaultTests(IndexReader).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderClone#performDefaultTests(IndexReader).mjava","sourceNew":"  /**\n   * 1. Get a norm from the original reader 2. Clone the original reader 3.\n   * Delete a document and set the norm of the cloned reader 4. Verify the norms\n   * are not the same on each reader 5. Verify the doc deleted is only in the\n   * cloned reader 6. Try to delete a document in the original reader, an\n   * exception should be thrown\n   * \n   * @param r1 IndexReader to perform tests on\n   * @throws Exception\n   */\n  private void performDefaultTests(IndexReader r1) throws Exception {\n    Similarity sim = new DefaultSimilarity().get(\"field1\");\n    float norm1 = sim.decodeNormValue(MultiNorms.norms(r1, \"field1\")[4]);\n\n    IndexReader pr1Clone = (IndexReader) r1.clone();\n    pr1Clone.deleteDocument(10);\n    pr1Clone.setNorm(4, \"field1\", sim.encodeNormValue(0.5f));\n    assertTrue(sim.decodeNormValue(MultiNorms.norms(r1, \"field1\")[4]) == norm1);\n    assertTrue(sim.decodeNormValue(MultiNorms.norms(pr1Clone, \"field1\")[4]) != norm1);\n\n    final Bits delDocs = MultiFields.getDeletedDocs(r1);\n    assertTrue(delDocs == null || !delDocs.get(10));\n    assertTrue(MultiFields.getDeletedDocs(pr1Clone).get(10));\n\n    // try to update the original reader, which should throw an exception\n    try {\n      r1.deleteDocument(11);\n      fail(\"Tried to delete doc 11 and an exception should have been thrown\");\n    } catch (Exception exception) {\n      // expectted\n    }\n    pr1Clone.close();\n  }\n\n","sourceOld":"  /**\n   * 1. Get a norm from the original reader 2. Clone the original reader 3.\n   * Delete a document and set the norm of the cloned reader 4. Verify the norms\n   * are not the same on each reader 5. Verify the doc deleted is only in the\n   * cloned reader 6. Try to delete a document in the original reader, an\n   * exception should be thrown\n   * \n   * @param r1 IndexReader to perform tests on\n   * @throws Exception\n   */\n  private void performDefaultTests(IndexReader r1) throws Exception {\n    float norm1 = Similarity.getDefault().decodeNormValue(MultiNorms.norms(r1, \"field1\")[4]);\n\n    IndexReader pr1Clone = (IndexReader) r1.clone();\n    pr1Clone.deleteDocument(10);\n    pr1Clone.setNorm(4, \"field1\", 0.5f);\n    assertTrue(Similarity.getDefault().decodeNormValue(MultiNorms.norms(r1, \"field1\")[4]) == norm1);\n    assertTrue(Similarity.getDefault().decodeNormValue(MultiNorms.norms(pr1Clone, \"field1\")[4]) != norm1);\n\n    final Bits delDocs = MultiFields.getDeletedDocs(r1);\n    assertTrue(delDocs == null || !delDocs.get(10));\n    assertTrue(MultiFields.getDeletedDocs(pr1Clone).get(10));\n\n    // try to update the original reader, which should throw an exception\n    try {\n      r1.deleteDocument(11);\n      fail(\"Tried to delete doc 11 and an exception should have been thrown\");\n    } catch (Exception exception) {\n      // expectted\n    }\n    pr1Clone.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a31c91eda919456f5f9237b086174385292f9935","date":1299074041,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderClone#performDefaultTests(IndexReader).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderClone#performDefaultTests(IndexReader).mjava","sourceNew":"  /**\n   * 1. Get a norm from the original reader 2. Clone the original reader 3.\n   * Delete a document and set the norm of the cloned reader 4. Verify the norms\n   * are not the same on each reader 5. Verify the doc deleted is only in the\n   * cloned reader 6. Try to delete a document in the original reader, an\n   * exception should be thrown\n   * \n   * @param r1 IndexReader to perform tests on\n   * @throws Exception\n   */\n  private void performDefaultTests(IndexReader r1) throws Exception {\n    Similarity sim = new DefaultSimilarity();\n    float norm1 = sim.decodeNormValue(MultiNorms.norms(r1, \"field1\")[4]);\n\n    IndexReader pr1Clone = (IndexReader) r1.clone();\n    pr1Clone.deleteDocument(10);\n    pr1Clone.setNorm(4, \"field1\", sim.encodeNormValue(0.5f));\n    assertTrue(sim.decodeNormValue(MultiNorms.norms(r1, \"field1\")[4]) == norm1);\n    assertTrue(sim.decodeNormValue(MultiNorms.norms(pr1Clone, \"field1\")[4]) != norm1);\n\n    final Bits delDocs = MultiFields.getDeletedDocs(r1);\n    assertTrue(delDocs == null || !delDocs.get(10));\n    assertTrue(MultiFields.getDeletedDocs(pr1Clone).get(10));\n\n    // try to update the original reader, which should throw an exception\n    try {\n      r1.deleteDocument(11);\n      fail(\"Tried to delete doc 11 and an exception should have been thrown\");\n    } catch (Exception exception) {\n      // expectted\n    }\n    pr1Clone.close();\n  }\n\n","sourceOld":"  /**\n   * 1. Get a norm from the original reader 2. Clone the original reader 3.\n   * Delete a document and set the norm of the cloned reader 4. Verify the norms\n   * are not the same on each reader 5. Verify the doc deleted is only in the\n   * cloned reader 6. Try to delete a document in the original reader, an\n   * exception should be thrown\n   * \n   * @param r1 IndexReader to perform tests on\n   * @throws Exception\n   */\n  private void performDefaultTests(IndexReader r1) throws Exception {\n    Similarity sim = new DefaultSimilarity().get(\"field1\");\n    float norm1 = sim.decodeNormValue(MultiNorms.norms(r1, \"field1\")[4]);\n\n    IndexReader pr1Clone = (IndexReader) r1.clone();\n    pr1Clone.deleteDocument(10);\n    pr1Clone.setNorm(4, \"field1\", sim.encodeNormValue(0.5f));\n    assertTrue(sim.decodeNormValue(MultiNorms.norms(r1, \"field1\")[4]) == norm1);\n    assertTrue(sim.decodeNormValue(MultiNorms.norms(pr1Clone, \"field1\")[4]) != norm1);\n\n    final Bits delDocs = MultiFields.getDeletedDocs(r1);\n    assertTrue(delDocs == null || !delDocs.get(10));\n    assertTrue(MultiFields.getDeletedDocs(pr1Clone).get(10));\n\n    // try to update the original reader, which should throw an exception\n    try {\n      r1.deleteDocument(11);\n      fail(\"Tried to delete doc 11 and an exception should have been thrown\");\n    } catch (Exception exception) {\n      // expectted\n    }\n    pr1Clone.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderClone#performDefaultTests(IndexReader).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderClone#performDefaultTests(IndexReader).mjava","sourceNew":"  /**\n   * 1. Get a norm from the original reader 2. Clone the original reader 3.\n   * Delete a document and set the norm of the cloned reader 4. Verify the norms\n   * are not the same on each reader 5. Verify the doc deleted is only in the\n   * cloned reader 6. Try to delete a document in the original reader, an\n   * exception should be thrown\n   * \n   * @param r1 IndexReader to perform tests on\n   * @throws Exception\n   */\n  private void performDefaultTests(IndexReader r1) throws Exception {\n    Similarity sim = new DefaultSimilarity();\n    float norm1 = sim.decodeNormValue(MultiNorms.norms(r1, \"field1\")[4]);\n\n    IndexReader pr1Clone = (IndexReader) r1.clone();\n    pr1Clone.deleteDocument(10);\n    pr1Clone.setNorm(4, \"field1\", sim.encodeNormValue(0.5f));\n    assertTrue(sim.decodeNormValue(MultiNorms.norms(r1, \"field1\")[4]) == norm1);\n    assertTrue(sim.decodeNormValue(MultiNorms.norms(pr1Clone, \"field1\")[4]) != norm1);\n\n    final Bits delDocs = MultiFields.getDeletedDocs(r1);\n    assertTrue(delDocs == null || !delDocs.get(10));\n    assertTrue(MultiFields.getDeletedDocs(pr1Clone).get(10));\n\n    // try to update the original reader, which should throw an exception\n    try {\n      r1.deleteDocument(11);\n      fail(\"Tried to delete doc 11 and an exception should have been thrown\");\n    } catch (Exception exception) {\n      // expectted\n    }\n    pr1Clone.close();\n  }\n\n","sourceOld":"  /**\n   * 1. Get a norm from the original reader 2. Clone the original reader 3.\n   * Delete a document and set the norm of the cloned reader 4. Verify the norms\n   * are not the same on each reader 5. Verify the doc deleted is only in the\n   * cloned reader 6. Try to delete a document in the original reader, an\n   * exception should be thrown\n   * \n   * @param r1 IndexReader to perform tests on\n   * @throws Exception\n   */\n  private void performDefaultTests(IndexReader r1) throws Exception {\n    Similarity sim = new DefaultSimilarity().get(\"field1\");\n    float norm1 = sim.decodeNormValue(MultiNorms.norms(r1, \"field1\")[4]);\n\n    IndexReader pr1Clone = (IndexReader) r1.clone();\n    pr1Clone.deleteDocument(10);\n    pr1Clone.setNorm(4, \"field1\", sim.encodeNormValue(0.5f));\n    assertTrue(sim.decodeNormValue(MultiNorms.norms(r1, \"field1\")[4]) == norm1);\n    assertTrue(sim.decodeNormValue(MultiNorms.norms(pr1Clone, \"field1\")[4]) != norm1);\n\n    final Bits delDocs = MultiFields.getDeletedDocs(r1);\n    assertTrue(delDocs == null || !delDocs.get(10));\n    assertTrue(MultiFields.getDeletedDocs(pr1Clone).get(10));\n\n    // try to update the original reader, which should throw an exception\n    try {\n      r1.deleteDocument(11);\n      fail(\"Tried to delete doc 11 and an exception should have been thrown\");\n    } catch (Exception exception) {\n      // expectted\n    }\n    pr1Clone.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderClone#performDefaultTests(IndexReader).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderClone#performDefaultTests(IndexReader).mjava","sourceNew":"  /**\n   * 1. Get a norm from the original reader 2. Clone the original reader 3.\n   * Delete a document and set the norm of the cloned reader 4. Verify the norms\n   * are not the same on each reader 5. Verify the doc deleted is only in the\n   * cloned reader 6. Try to delete a document in the original reader, an\n   * exception should be thrown\n   *\n   * @param r1 IndexReader to perform tests on\n   * @throws Exception\n   */\n  private void performDefaultTests(IndexReader r1) throws Exception {\n    Similarity sim = new DefaultSimilarity();\n    float norm1 = sim.decodeNormValue(MultiNorms.norms(r1, \"field1\")[4]);\n\n    IndexReader pr1Clone = (IndexReader) r1.clone();\n    pr1Clone.deleteDocument(10);\n    pr1Clone.setNorm(4, \"field1\", sim.encodeNormValue(0.5f));\n    assertTrue(sim.decodeNormValue(MultiNorms.norms(r1, \"field1\")[4]) == norm1);\n    assertTrue(sim.decodeNormValue(MultiNorms.norms(pr1Clone, \"field1\")[4]) != norm1);\n\n    final Bits delDocs = MultiFields.getDeletedDocs(r1);\n    assertTrue(delDocs == null || !delDocs.get(10));\n    assertTrue(MultiFields.getDeletedDocs(pr1Clone).get(10));\n\n    // try to update the original reader, which should throw an exception\n    try {\n      r1.deleteDocument(11);\n      fail(\"Tried to delete doc 11 and an exception should have been thrown\");\n    } catch (Exception exception) {\n      // expectted\n    }\n    pr1Clone.close();\n  }\n\n","sourceOld":"  /**\n   * 1. Get a norm from the original reader 2. Clone the original reader 3.\n   * Delete a document and set the norm of the cloned reader 4. Verify the norms\n   * are not the same on each reader 5. Verify the doc deleted is only in the\n   * cloned reader 6. Try to delete a document in the original reader, an\n   * exception should be thrown\n   *\n   * @param r1 IndexReader to perform tests on\n   * @throws Exception\n   */\n  private void performDefaultTests(IndexReader r1) throws Exception {\n    Similarity sim = new DefaultSimilarity().get(\"field1\");\n    float norm1 = sim.decodeNormValue(MultiNorms.norms(r1, \"field1\")[4]);\n\n    IndexReader pr1Clone = (IndexReader) r1.clone();\n    pr1Clone.deleteDocument(10);\n    pr1Clone.setNorm(4, \"field1\", sim.encodeNormValue(0.5f));\n    assertTrue(sim.decodeNormValue(MultiNorms.norms(r1, \"field1\")[4]) == norm1);\n    assertTrue(sim.decodeNormValue(MultiNorms.norms(pr1Clone, \"field1\")[4]) != norm1);\n\n    final Bits delDocs = MultiFields.getDeletedDocs(r1);\n    assertTrue(delDocs == null || !delDocs.get(10));\n    assertTrue(MultiFields.getDeletedDocs(pr1Clone).get(10));\n\n    // try to update the original reader, which should throw an exception\n    try {\n      r1.deleteDocument(11);\n      fail(\"Tried to delete doc 11 and an exception should have been thrown\");\n    } catch (Exception exception) {\n      // expectted\n    }\n    pr1Clone.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","date":1309960478,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderClone#performDefaultTests(IndexReader).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderClone#performDefaultTests(IndexReader).mjava","sourceNew":"  /**\n   * 1. Get a norm from the original reader 2. Clone the original reader 3.\n   * Delete a document and set the norm of the cloned reader 4. Verify the norms\n   * are not the same on each reader 5. Verify the doc deleted is only in the\n   * cloned reader 6. Try to delete a document in the original reader, an\n   * exception should be thrown\n   * \n   * @param r1 IndexReader to perform tests on\n   * @throws Exception\n   */\n  private void performDefaultTests(IndexReader r1) throws Exception {\n    Similarity sim = new DefaultSimilarity();\n    float norm1 = sim.decodeNormValue(MultiNorms.norms(r1, \"field1\")[4]);\n\n    IndexReader pr1Clone = (IndexReader) r1.clone();\n    pr1Clone.deleteDocument(10);\n    pr1Clone.setNorm(4, \"field1\", sim.encodeNormValue(0.5f));\n    assertTrue(sim.decodeNormValue(MultiNorms.norms(r1, \"field1\")[4]) == norm1);\n    assertTrue(sim.decodeNormValue(MultiNorms.norms(pr1Clone, \"field1\")[4]) != norm1);\n\n    final Bits liveDocs = MultiFields.getLiveDocs(r1);\n    assertTrue(liveDocs == null || liveDocs.get(10));\n    assertFalse(MultiFields.getLiveDocs(pr1Clone).get(10));\n\n    // try to update the original reader, which should throw an exception\n    try {\n      r1.deleteDocument(11);\n      fail(\"Tried to delete doc 11 and an exception should have been thrown\");\n    } catch (Exception exception) {\n      // expectted\n    }\n    pr1Clone.close();\n  }\n\n","sourceOld":"  /**\n   * 1. Get a norm from the original reader 2. Clone the original reader 3.\n   * Delete a document and set the norm of the cloned reader 4. Verify the norms\n   * are not the same on each reader 5. Verify the doc deleted is only in the\n   * cloned reader 6. Try to delete a document in the original reader, an\n   * exception should be thrown\n   * \n   * @param r1 IndexReader to perform tests on\n   * @throws Exception\n   */\n  private void performDefaultTests(IndexReader r1) throws Exception {\n    Similarity sim = new DefaultSimilarity();\n    float norm1 = sim.decodeNormValue(MultiNorms.norms(r1, \"field1\")[4]);\n\n    IndexReader pr1Clone = (IndexReader) r1.clone();\n    pr1Clone.deleteDocument(10);\n    pr1Clone.setNorm(4, \"field1\", sim.encodeNormValue(0.5f));\n    assertTrue(sim.decodeNormValue(MultiNorms.norms(r1, \"field1\")[4]) == norm1);\n    assertTrue(sim.decodeNormValue(MultiNorms.norms(pr1Clone, \"field1\")[4]) != norm1);\n\n    final Bits delDocs = MultiFields.getDeletedDocs(r1);\n    assertTrue(delDocs == null || !delDocs.get(10));\n    assertTrue(MultiFields.getDeletedDocs(pr1Clone).get(10));\n\n    // try to update the original reader, which should throw an exception\n    try {\n      r1.deleteDocument(11);\n      fail(\"Tried to delete doc 11 and an exception should have been thrown\");\n    } catch (Exception exception) {\n      // expectted\n    }\n    pr1Clone.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderClone#performDefaultTests(IndexReader).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderClone#performDefaultTests(IndexReader).mjava","sourceNew":"  /**\n   * 1. Get a norm from the original reader 2. Clone the original reader 3.\n   * Delete a document and set the norm of the cloned reader 4. Verify the norms\n   * are not the same on each reader 5. Verify the doc deleted is only in the\n   * cloned reader 6. Try to delete a document in the original reader, an\n   * exception should be thrown\n   * \n   * @param r1 IndexReader to perform tests on\n   * @throws Exception\n   */\n  private void performDefaultTests(IndexReader r1) throws Exception {\n    Similarity sim = new DefaultSimilarity();\n    float norm1 = sim.decodeNormValue(MultiNorms.norms(r1, \"field1\")[4]);\n\n    IndexReader pr1Clone = (IndexReader) r1.clone();\n    pr1Clone.deleteDocument(10);\n    pr1Clone.setNorm(4, \"field1\", sim.encodeNormValue(0.5f));\n    assertTrue(sim.decodeNormValue(MultiNorms.norms(r1, \"field1\")[4]) == norm1);\n    assertTrue(sim.decodeNormValue(MultiNorms.norms(pr1Clone, \"field1\")[4]) != norm1);\n\n    final Bits liveDocs = MultiFields.getLiveDocs(r1);\n    assertTrue(liveDocs == null || liveDocs.get(10));\n    assertFalse(MultiFields.getLiveDocs(pr1Clone).get(10));\n\n    // try to update the original reader, which should throw an exception\n    try {\n      r1.deleteDocument(11);\n      fail(\"Tried to delete doc 11 and an exception should have been thrown\");\n    } catch (Exception exception) {\n      // expectted\n    }\n    pr1Clone.close();\n  }\n\n","sourceOld":"  /**\n   * 1. Get a norm from the original reader 2. Clone the original reader 3.\n   * Delete a document and set the norm of the cloned reader 4. Verify the norms\n   * are not the same on each reader 5. Verify the doc deleted is only in the\n   * cloned reader 6. Try to delete a document in the original reader, an\n   * exception should be thrown\n   * \n   * @param r1 IndexReader to perform tests on\n   * @throws Exception\n   */\n  private void performDefaultTests(IndexReader r1) throws Exception {\n    Similarity sim = new DefaultSimilarity();\n    float norm1 = sim.decodeNormValue(MultiNorms.norms(r1, \"field1\")[4]);\n\n    IndexReader pr1Clone = (IndexReader) r1.clone();\n    pr1Clone.deleteDocument(10);\n    pr1Clone.setNorm(4, \"field1\", sim.encodeNormValue(0.5f));\n    assertTrue(sim.decodeNormValue(MultiNorms.norms(r1, \"field1\")[4]) == norm1);\n    assertTrue(sim.decodeNormValue(MultiNorms.norms(pr1Clone, \"field1\")[4]) != norm1);\n\n    final Bits delDocs = MultiFields.getDeletedDocs(r1);\n    assertTrue(delDocs == null || !delDocs.get(10));\n    assertTrue(MultiFields.getDeletedDocs(pr1Clone).get(10));\n\n    // try to update the original reader, which should throw an exception\n    try {\n      r1.deleteDocument(11);\n      fail(\"Tried to delete doc 11 and an exception should have been thrown\");\n    } catch (Exception exception) {\n      // expectted\n    }\n    pr1Clone.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderClone#performDefaultTests(IndexReader).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderClone#performDefaultTests(IndexReader).mjava","sourceNew":"  /**\n   * 1. Get a norm from the original reader 2. Clone the original reader 3.\n   * Delete a document and set the norm of the cloned reader 4. Verify the norms\n   * are not the same on each reader 5. Verify the doc deleted is only in the\n   * cloned reader 6. Try to delete a document in the original reader, an\n   * exception should be thrown\n   * \n   * @param r1 IndexReader to perform tests on\n   * @throws Exception\n   */\n  private void performDefaultTests(IndexReader r1) throws Exception {\n    Similarity sim = new DefaultSimilarity();\n    float norm1 = sim.decodeNormValue(MultiNorms.norms(r1, \"field1\")[4]);\n\n    IndexReader pr1Clone = (IndexReader) r1.clone();\n    pr1Clone.deleteDocument(10);\n    pr1Clone.setNorm(4, \"field1\", sim.encodeNormValue(0.5f));\n    assertTrue(sim.decodeNormValue(MultiNorms.norms(r1, \"field1\")[4]) == norm1);\n    assertTrue(sim.decodeNormValue(MultiNorms.norms(pr1Clone, \"field1\")[4]) != norm1);\n\n    final Bits liveDocs = MultiFields.getLiveDocs(r1);\n    assertTrue(liveDocs == null || liveDocs.get(10));\n    assertFalse(MultiFields.getLiveDocs(pr1Clone).get(10));\n\n    // try to update the original reader, which should throw an exception\n    try {\n      r1.deleteDocument(11);\n      fail(\"Tried to delete doc 11 and an exception should have been thrown\");\n    } catch (Exception exception) {\n      // expectted\n    }\n    pr1Clone.close();\n  }\n\n","sourceOld":"  /**\n   * 1. Get a norm from the original reader 2. Clone the original reader 3.\n   * Delete a document and set the norm of the cloned reader 4. Verify the norms\n   * are not the same on each reader 5. Verify the doc deleted is only in the\n   * cloned reader 6. Try to delete a document in the original reader, an\n   * exception should be thrown\n   * \n   * @param r1 IndexReader to perform tests on\n   * @throws Exception\n   */\n  private void performDefaultTests(IndexReader r1) throws Exception {\n    Similarity sim = new DefaultSimilarity();\n    float norm1 = sim.decodeNormValue(MultiNorms.norms(r1, \"field1\")[4]);\n\n    IndexReader pr1Clone = (IndexReader) r1.clone();\n    pr1Clone.deleteDocument(10);\n    pr1Clone.setNorm(4, \"field1\", sim.encodeNormValue(0.5f));\n    assertTrue(sim.decodeNormValue(MultiNorms.norms(r1, \"field1\")[4]) == norm1);\n    assertTrue(sim.decodeNormValue(MultiNorms.norms(pr1Clone, \"field1\")[4]) != norm1);\n\n    final Bits delDocs = MultiFields.getDeletedDocs(r1);\n    assertTrue(delDocs == null || !delDocs.get(10));\n    assertTrue(MultiFields.getDeletedDocs(pr1Clone).get(10));\n\n    // try to update the original reader, which should throw an exception\n    try {\n      r1.deleteDocument(11);\n      fail(\"Tried to delete doc 11 and an exception should have been thrown\");\n    } catch (Exception exception) {\n      // expectted\n    }\n    pr1Clone.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f3cee3d20b0c786e6fca20539454262e29edcab","date":1310101685,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderClone#performDefaultTests(IndexReader).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderClone#performDefaultTests(IndexReader).mjava","sourceNew":"  /**\n   * 1. Get a norm from the original reader 2. Clone the original reader 3.\n   * Delete a document and set the norm of the cloned reader 4. Verify the norms\n   * are not the same on each reader 5. Verify the doc deleted is only in the\n   * cloned reader 6. Try to delete a document in the original reader, an\n   * exception should be thrown\n   * \n   * @param r1 IndexReader to perform tests on\n   * @throws Exception\n   */\n  private void performDefaultTests(IndexReader r1) throws Exception {\n    DefaultSimilarity sim = new DefaultSimilarity();\n    float norm1 = sim.decodeNormValue(MultiNorms.norms(r1, \"field1\")[4]);\n\n    IndexReader pr1Clone = (IndexReader) r1.clone();\n    pr1Clone.deleteDocument(10);\n    pr1Clone.setNorm(4, \"field1\", sim.encodeNormValue(0.5f));\n    assertTrue(sim.decodeNormValue(MultiNorms.norms(r1, \"field1\")[4]) == norm1);\n    assertTrue(sim.decodeNormValue(MultiNorms.norms(pr1Clone, \"field1\")[4]) != norm1);\n\n    final Bits liveDocs = MultiFields.getLiveDocs(r1);\n    assertTrue(liveDocs == null || liveDocs.get(10));\n    assertFalse(MultiFields.getLiveDocs(pr1Clone).get(10));\n\n    // try to update the original reader, which should throw an exception\n    try {\n      r1.deleteDocument(11);\n      fail(\"Tried to delete doc 11 and an exception should have been thrown\");\n    } catch (Exception exception) {\n      // expectted\n    }\n    pr1Clone.close();\n  }\n\n","sourceOld":"  /**\n   * 1. Get a norm from the original reader 2. Clone the original reader 3.\n   * Delete a document and set the norm of the cloned reader 4. Verify the norms\n   * are not the same on each reader 5. Verify the doc deleted is only in the\n   * cloned reader 6. Try to delete a document in the original reader, an\n   * exception should be thrown\n   * \n   * @param r1 IndexReader to perform tests on\n   * @throws Exception\n   */\n  private void performDefaultTests(IndexReader r1) throws Exception {\n    Similarity sim = new DefaultSimilarity();\n    float norm1 = sim.decodeNormValue(MultiNorms.norms(r1, \"field1\")[4]);\n\n    IndexReader pr1Clone = (IndexReader) r1.clone();\n    pr1Clone.deleteDocument(10);\n    pr1Clone.setNorm(4, \"field1\", sim.encodeNormValue(0.5f));\n    assertTrue(sim.decodeNormValue(MultiNorms.norms(r1, \"field1\")[4]) == norm1);\n    assertTrue(sim.decodeNormValue(MultiNorms.norms(pr1Clone, \"field1\")[4]) != norm1);\n\n    final Bits liveDocs = MultiFields.getLiveDocs(r1);\n    assertTrue(liveDocs == null || liveDocs.get(10));\n    assertFalse(MultiFields.getLiveDocs(pr1Clone).get(10));\n\n    // try to update the original reader, which should throw an exception\n    try {\n      r1.deleteDocument(11);\n      fail(\"Tried to delete doc 11 and an exception should have been thrown\");\n    } catch (Exception exception) {\n      // expectted\n    }\n    pr1Clone.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f0b9507caf22f292ac0e5e59f62db4275adf4511","date":1310107283,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderClone#performDefaultTests(IndexReader).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderClone#performDefaultTests(IndexReader).mjava","sourceNew":"  /**\n   * 1. Get a norm from the original reader 2. Clone the original reader 3.\n   * Delete a document and set the norm of the cloned reader 4. Verify the norms\n   * are not the same on each reader 5. Verify the doc deleted is only in the\n   * cloned reader 6. Try to delete a document in the original reader, an\n   * exception should be thrown\n   * \n   * @param r1 IndexReader to perform tests on\n   * @throws Exception\n   */\n  private void performDefaultTests(IndexReader r1) throws Exception {\n    DefaultSimilarity sim = new DefaultSimilarity();\n    float norm1 = sim.decodeNormValue(MultiNorms.norms(r1, \"field1\")[4]);\n\n    IndexReader pr1Clone = (IndexReader) r1.clone();\n    pr1Clone.deleteDocument(10);\n    pr1Clone.setNorm(4, \"field1\", sim.encodeNormValue(0.5f));\n    assertTrue(sim.decodeNormValue(MultiNorms.norms(r1, \"field1\")[4]) == norm1);\n    assertTrue(sim.decodeNormValue(MultiNorms.norms(pr1Clone, \"field1\")[4]) != norm1);\n\n    final Bits liveDocs = MultiFields.getLiveDocs(r1);\n    assertTrue(liveDocs == null || liveDocs.get(10));\n    assertFalse(MultiFields.getLiveDocs(pr1Clone).get(10));\n\n    // try to update the original reader, which should throw an exception\n    try {\n      r1.deleteDocument(11);\n      fail(\"Tried to delete doc 11 and an exception should have been thrown\");\n    } catch (Exception exception) {\n      // expectted\n    }\n    pr1Clone.close();\n  }\n\n","sourceOld":"  /**\n   * 1. Get a norm from the original reader 2. Clone the original reader 3.\n   * Delete a document and set the norm of the cloned reader 4. Verify the norms\n   * are not the same on each reader 5. Verify the doc deleted is only in the\n   * cloned reader 6. Try to delete a document in the original reader, an\n   * exception should be thrown\n   * \n   * @param r1 IndexReader to perform tests on\n   * @throws Exception\n   */\n  private void performDefaultTests(IndexReader r1) throws Exception {\n    Similarity sim = new DefaultSimilarity();\n    float norm1 = sim.decodeNormValue(MultiNorms.norms(r1, \"field1\")[4]);\n\n    IndexReader pr1Clone = (IndexReader) r1.clone();\n    pr1Clone.deleteDocument(10);\n    pr1Clone.setNorm(4, \"field1\", sim.encodeNormValue(0.5f));\n    assertTrue(sim.decodeNormValue(MultiNorms.norms(r1, \"field1\")[4]) == norm1);\n    assertTrue(sim.decodeNormValue(MultiNorms.norms(pr1Clone, \"field1\")[4]) != norm1);\n\n    final Bits liveDocs = MultiFields.getLiveDocs(r1);\n    assertTrue(liveDocs == null || liveDocs.get(10));\n    assertFalse(MultiFields.getLiveDocs(pr1Clone).get(10));\n\n    // try to update the original reader, which should throw an exception\n    try {\n      r1.deleteDocument(11);\n      fail(\"Tried to delete doc 11 and an exception should have been thrown\");\n    } catch (Exception exception) {\n      // expectted\n    }\n    pr1Clone.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1291e4568eb7d9463d751627596ef14baf4c1603","date":1310112572,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderClone#performDefaultTests(IndexReader).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderClone#performDefaultTests(IndexReader).mjava","sourceNew":"  /**\n   * 1. Get a norm from the original reader 2. Clone the original reader 3.\n   * Delete a document and set the norm of the cloned reader 4. Verify the norms\n   * are not the same on each reader 5. Verify the doc deleted is only in the\n   * cloned reader 6. Try to delete a document in the original reader, an\n   * exception should be thrown\n   * \n   * @param r1 IndexReader to perform tests on\n   * @throws Exception\n   */\n  private void performDefaultTests(IndexReader r1) throws Exception {\n    DefaultSimilarity sim = new DefaultSimilarity();\n    float norm1 = sim.decodeNormValue(MultiNorms.norms(r1, \"field1\")[4]);\n\n    IndexReader pr1Clone = (IndexReader) r1.clone();\n    pr1Clone.deleteDocument(10);\n    pr1Clone.setNorm(4, \"field1\", sim.encodeNormValue(0.5f));\n    assertTrue(sim.decodeNormValue(MultiNorms.norms(r1, \"field1\")[4]) == norm1);\n    assertTrue(sim.decodeNormValue(MultiNorms.norms(pr1Clone, \"field1\")[4]) != norm1);\n\n    final Bits liveDocs = MultiFields.getLiveDocs(r1);\n    assertTrue(liveDocs == null || liveDocs.get(10));\n    assertFalse(MultiFields.getLiveDocs(pr1Clone).get(10));\n\n    // try to update the original reader, which should throw an exception\n    try {\n      r1.deleteDocument(11);\n      fail(\"Tried to delete doc 11 and an exception should have been thrown\");\n    } catch (Exception exception) {\n      // expectted\n    }\n    pr1Clone.close();\n  }\n\n","sourceOld":"  /**\n   * 1. Get a norm from the original reader 2. Clone the original reader 3.\n   * Delete a document and set the norm of the cloned reader 4. Verify the norms\n   * are not the same on each reader 5. Verify the doc deleted is only in the\n   * cloned reader 6. Try to delete a document in the original reader, an\n   * exception should be thrown\n   * \n   * @param r1 IndexReader to perform tests on\n   * @throws Exception\n   */\n  private void performDefaultTests(IndexReader r1) throws Exception {\n    Similarity sim = new DefaultSimilarity();\n    float norm1 = sim.decodeNormValue(MultiNorms.norms(r1, \"field1\")[4]);\n\n    IndexReader pr1Clone = (IndexReader) r1.clone();\n    pr1Clone.deleteDocument(10);\n    pr1Clone.setNorm(4, \"field1\", sim.encodeNormValue(0.5f));\n    assertTrue(sim.decodeNormValue(MultiNorms.norms(r1, \"field1\")[4]) == norm1);\n    assertTrue(sim.decodeNormValue(MultiNorms.norms(pr1Clone, \"field1\")[4]) != norm1);\n\n    final Bits liveDocs = MultiFields.getLiveDocs(r1);\n    assertTrue(liveDocs == null || liveDocs.get(10));\n    assertFalse(MultiFields.getLiveDocs(pr1Clone).get(10));\n\n    // try to update the original reader, which should throw an exception\n    try {\n      r1.deleteDocument(11);\n      fail(\"Tried to delete doc 11 and an exception should have been thrown\");\n    } catch (Exception exception) {\n      // expectted\n    }\n    pr1Clone.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4122a26e1fd0457a340616673a3d3aada370f713","date":1322955654,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderClone#performDefaultTests(IndexReader).mjava","sourceNew":null,"sourceOld":"  /**\n   * 1. Get a norm from the original reader 2. Clone the original reader 3.\n   * Delete a document and set the norm of the cloned reader 4. Verify the norms\n   * are not the same on each reader 5. Verify the doc deleted is only in the\n   * cloned reader 6. Try to delete a document in the original reader, an\n   * exception should be thrown\n   * \n   * @param r1 IndexReader to perform tests on\n   * @throws Exception\n   */\n  private void performDefaultTests(IndexReader r1) throws Exception {\n    DefaultSimilarity sim = new DefaultSimilarity();\n    float norm1 = sim.decodeNormValue(MultiNorms.norms(r1, \"field1\")[4]);\n\n    IndexReader pr1Clone = (IndexReader) r1.clone();\n    pr1Clone.deleteDocument(10);\n    pr1Clone.setNorm(4, \"field1\", sim.encodeNormValue(0.5f));\n    assertTrue(sim.decodeNormValue(MultiNorms.norms(r1, \"field1\")[4]) == norm1);\n    assertTrue(sim.decodeNormValue(MultiNorms.norms(pr1Clone, \"field1\")[4]) != norm1);\n\n    final Bits liveDocs = MultiFields.getLiveDocs(r1);\n    assertTrue(liveDocs == null || liveDocs.get(10));\n    assertFalse(MultiFields.getLiveDocs(pr1Clone).get(10));\n\n    // try to update the original reader, which should throw an exception\n    try {\n      r1.deleteDocument(11);\n      fail(\"Tried to delete doc 11 and an exception should have been thrown\");\n    } catch (Exception exception) {\n      // expectted\n    }\n    pr1Clone.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderClone#performDefaultTests(IndexReader).mjava","sourceNew":null,"sourceOld":"  /**\n   * 1. Get a norm from the original reader 2. Clone the original reader 3.\n   * Delete a document and set the norm of the cloned reader 4. Verify the norms\n   * are not the same on each reader 5. Verify the doc deleted is only in the\n   * cloned reader 6. Try to delete a document in the original reader, an\n   * exception should be thrown\n   * \n   * @param r1 IndexReader to perform tests on\n   * @throws Exception\n   */\n  private void performDefaultTests(IndexReader r1) throws Exception {\n    DefaultSimilarity sim = new DefaultSimilarity();\n    float norm1 = sim.decodeNormValue(MultiNorms.norms(r1, \"field1\")[4]);\n\n    IndexReader pr1Clone = (IndexReader) r1.clone();\n    pr1Clone.deleteDocument(10);\n    pr1Clone.setNorm(4, \"field1\", sim.encodeNormValue(0.5f));\n    assertTrue(sim.decodeNormValue(MultiNorms.norms(r1, \"field1\")[4]) == norm1);\n    assertTrue(sim.decodeNormValue(MultiNorms.norms(pr1Clone, \"field1\")[4]) != norm1);\n\n    final Bits liveDocs = MultiFields.getLiveDocs(r1);\n    assertTrue(liveDocs == null || liveDocs.get(10));\n    assertFalse(MultiFields.getLiveDocs(pr1Clone).get(10));\n\n    // try to update the original reader, which should throw an exception\n    try {\n      r1.deleteDocument(11);\n      fail(\"Tried to delete doc 11 and an exception should have been thrown\");\n    } catch (Exception exception) {\n      // expectted\n    }\n    pr1Clone.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderClone#performDefaultTests(IndexReader).mjava","sourceNew":null,"sourceOld":"  /**\n   * 1. Get a norm from the original reader 2. Clone the original reader 3.\n   * Delete a document and set the norm of the cloned reader 4. Verify the norms\n   * are not the same on each reader 5. Verify the doc deleted is only in the\n   * cloned reader 6. Try to delete a document in the original reader, an\n   * exception should be thrown\n   * \n   * @param r1 IndexReader to perform tests on\n   * @throws Exception\n   */\n  private void performDefaultTests(IndexReader r1) throws Exception {\n    DefaultSimilarity sim = new DefaultSimilarity();\n    float norm1 = sim.decodeNormValue(MultiNorms.norms(r1, \"field1\")[4]);\n\n    IndexReader pr1Clone = (IndexReader) r1.clone();\n    pr1Clone.deleteDocument(10);\n    pr1Clone.setNorm(4, \"field1\", sim.encodeNormValue(0.5f));\n    assertTrue(sim.decodeNormValue(MultiNorms.norms(r1, \"field1\")[4]) == norm1);\n    assertTrue(sim.decodeNormValue(MultiNorms.norms(pr1Clone, \"field1\")[4]) != norm1);\n\n    final Bits liveDocs = MultiFields.getLiveDocs(r1);\n    assertTrue(liveDocs == null || liveDocs.get(10));\n    assertFalse(MultiFields.getLiveDocs(pr1Clone).get(10));\n\n    // try to update the original reader, which should throw an exception\n    try {\n      r1.deleteDocument(11);\n      fail(\"Tried to delete doc 11 and an exception should have been thrown\");\n    } catch (Exception exception) {\n      // expectted\n    }\n    pr1Clone.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ef53d1d25057e41eff3dce2a7f3e880a78ed7069","date":1323523707,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderClone#performDefaultTests(IndexReader).mjava","pathOld":"/dev/null","sourceNew":"  private void performDefaultTests(IndexReader r1) throws Exception {\n    IndexReader r2 = (IndexReader) r1.clone();\n    assertTrue(r1 != r2);\n    TestIndexReader.assertIndexEquals(r1, r2);\n    r1.close();\n    r2.close();\n    TestIndexReaderReopen.assertReaderClosed(r1, true, true);\n    TestIndexReaderReopen.assertReaderClosed(r2, true, true);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff99371bc1f34bf1a2ccdb754940ee5fe5cc2565","date":1323540308,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderClone#performDefaultTests(IndexReader).mjava","pathOld":"/dev/null","sourceNew":"  private void performDefaultTests(IndexReader r1) throws Exception {\n    IndexReader r2 = (IndexReader) r1.clone();\n    assertTrue(r1 != r2);\n    TestIndexReader.assertIndexEquals(r1, r2);\n    r1.close();\n    r2.close();\n    TestIndexReaderReopen.assertReaderClosed(r1, true, true);\n    TestIndexReaderReopen.assertReaderClosed(r2, true, true);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ce667c6d3400b22523701c549c0d35e26da8b46","date":1324405053,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderClone#performDefaultTests(IndexReader).mjava","sourceNew":null,"sourceOld":"  private void performDefaultTests(IndexReader r1) throws Exception {\n    IndexReader r2 = (IndexReader) r1.clone();\n    assertTrue(r1 != r2);\n    TestIndexReader.assertIndexEquals(r1, r2);\n    r1.close();\n    r2.close();\n    TestIndexReaderReopen.assertReaderClosed(r1, true, true);\n    TestIndexReaderReopen.assertReaderClosed(r2, true, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b0d06946f61921459f43309f86ed621ebe67eebe":["406e7055a3e99d3fa6ce49a555a51dd18b321806"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["0f3cee3d20b0c786e6fca20539454262e29edcab","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb":["a31c91eda919456f5f9237b086174385292f9935"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["9454a6510e2db155fb01faa5c049b06ece95fab9","406e7055a3e99d3fa6ce49a555a51dd18b321806"],"bb9b72f7c3d7827c64dd4ec580ded81778da361d":["868da859b43505d9d2a023bfeae6dd0c795f5295","fd9325c7ff9928fabe81c28553b41fc7aa57dfab"],"fd9325c7ff9928fabe81c28553b41fc7aa57dfab":["7a54e23e03b47f3d568ab3020bdd386e4b2f0a05"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["bb9b72f7c3d7827c64dd4ec580ded81778da361d","a31c91eda919456f5f9237b086174385292f9935"],"f0b9507caf22f292ac0e5e59f62db4275adf4511":["817d8435e9135b756f08ce6710ab0baac51bdf88","0f3cee3d20b0c786e6fca20539454262e29edcab"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["70ad682703b8585f5d0a637efec044d57ec05efb","fd9325c7ff9928fabe81c28553b41fc7aa57dfab"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ff99371bc1f34bf1a2ccdb754940ee5fe5cc2565":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","ef53d1d25057e41eff3dce2a7f3e880a78ed7069"],"9ce667c6d3400b22523701c549c0d35e26da8b46":["ef53d1d25057e41eff3dce2a7f3e880a78ed7069"],"406e7055a3e99d3fa6ce49a555a51dd18b321806":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"ef53d1d25057e41eff3dce2a7f3e880a78ed7069":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7a54e23e03b47f3d568ab3020bdd386e4b2f0a05":["b0d06946f61921459f43309f86ed621ebe67eebe"],"70ad682703b8585f5d0a637efec044d57ec05efb":["406e7055a3e99d3fa6ce49a555a51dd18b321806","b0d06946f61921459f43309f86ed621ebe67eebe"],"0f3cee3d20b0c786e6fca20539454262e29edcab":["e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"a31c91eda919456f5f9237b086174385292f9935":["fd9325c7ff9928fabe81c28553b41fc7aa57dfab"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["a31c91eda919456f5f9237b086174385292f9935","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["a31c91eda919456f5f9237b086174385292f9935","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"1291e4568eb7d9463d751627596ef14baf4c1603":["d083e83f225b11e5fdd900e83d26ddb385b6955c","0f3cee3d20b0c786e6fca20539454262e29edcab"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["29ef99d61cda9641b6250bf9567329a6e65f901d","a31c91eda919456f5f9237b086174385292f9935"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["0f3cee3d20b0c786e6fca20539454262e29edcab","4122a26e1fd0457a340616673a3d3aada370f713"],"4122a26e1fd0457a340616673a3d3aada370f713":["0f3cee3d20b0c786e6fca20539454262e29edcab"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","7a54e23e03b47f3d568ab3020bdd386e4b2f0a05"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ce667c6d3400b22523701c549c0d35e26da8b46"]},"commit2Childs":{"b0d06946f61921459f43309f86ed621ebe67eebe":["7a54e23e03b47f3d568ab3020bdd386e4b2f0a05","70ad682703b8585f5d0a637efec044d57ec05efb"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["ff99371bc1f34bf1a2ccdb754940ee5fe5cc2565"],"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb":["0f3cee3d20b0c786e6fca20539454262e29edcab","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["868da859b43505d9d2a023bfeae6dd0c795f5295"],"bb9b72f7c3d7827c64dd4ec580ded81778da361d":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df"],"fd9325c7ff9928fabe81c28553b41fc7aa57dfab":["bb9b72f7c3d7827c64dd4ec580ded81778da361d","29ef99d61cda9641b6250bf9567329a6e65f901d","a31c91eda919456f5f9237b086174385292f9935"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":[],"f0b9507caf22f292ac0e5e59f62db4275adf4511":[],"29ef99d61cda9641b6250bf9567329a6e65f901d":["d619839baa8ce5503e496b94a9e42ad6f079293f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"ff99371bc1f34bf1a2ccdb754940ee5fe5cc2565":[],"406e7055a3e99d3fa6ce49a555a51dd18b321806":["b0d06946f61921459f43309f86ed621ebe67eebe","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","70ad682703b8585f5d0a637efec044d57ec05efb"],"9ce667c6d3400b22523701c549c0d35e26da8b46":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","406e7055a3e99d3fa6ce49a555a51dd18b321806"],"ef53d1d25057e41eff3dce2a7f3e880a78ed7069":["ff99371bc1f34bf1a2ccdb754940ee5fe5cc2565","9ce667c6d3400b22523701c549c0d35e26da8b46"],"7a54e23e03b47f3d568ab3020bdd386e4b2f0a05":["fd9325c7ff9928fabe81c28553b41fc7aa57dfab","868da859b43505d9d2a023bfeae6dd0c795f5295"],"70ad682703b8585f5d0a637efec044d57ec05efb":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"0f3cee3d20b0c786e6fca20539454262e29edcab":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","f0b9507caf22f292ac0e5e59f62db4275adf4511","1291e4568eb7d9463d751627596ef14baf4c1603","3615ce4a1f785ae1b779244de52c6a7d99227e60","4122a26e1fd0457a340616673a3d3aada370f713"],"a31c91eda919456f5f9237b086174385292f9935":["e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","d619839baa8ce5503e496b94a9e42ad6f079293f"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["1291e4568eb7d9463d751627596ef14baf4c1603"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["f0b9507caf22f292ac0e5e59f62db4275adf4511"],"1291e4568eb7d9463d751627596ef14baf4c1603":[],"d619839baa8ce5503e496b94a9e42ad6f079293f":[],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","ef53d1d25057e41eff3dce2a7f3e880a78ed7069"],"4122a26e1fd0457a340616673a3d3aada370f713":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["bb9b72f7c3d7827c64dd4ec580ded81778da361d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","f0b9507caf22f292ac0e5e59f62db4275adf4511","ff99371bc1f34bf1a2ccdb754940ee5fe5cc2565","1291e4568eb7d9463d751627596ef14baf4c1603","d619839baa8ce5503e496b94a9e42ad6f079293f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}