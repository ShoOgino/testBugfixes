{"path":"lucene/core/src/test/org/apache/lucene/util/bkd/TestDocIdsWriter#test(Directory,int[]).mjava","commits":[{"id":"adc24e961ba2d17d4cc061a9fde65e9059b7f1ee","date":1467616421,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/bkd/TestDocIdsWriter#test(Directory,int[]).mjava","pathOld":"/dev/null","sourceNew":"  private void test(Directory dir, int[] ints) throws Exception {\n    final long len;\n    try(IndexOutput out = dir.createOutput(\"tmp\", IOContext.DEFAULT)) {\n      DocIdsWriter.writeDocIds(ints, 0, ints.length, out);\n      len = out.getFilePointer();\n      if (random().nextBoolean()) {\n        out.writeLong(0); // garbage\n      }\n    }\n    try (IndexInput in = dir.openInput(\"tmp\", IOContext.READONCE)) {\n      int[] read = new int[ints.length];\n      DocIdsWriter.readInts(in, ints.length, read);\n      assertArrayEquals(ints, read);\n      assertEquals(len, in.getFilePointer());\n    }\n    try (IndexInput in = dir.openInput(\"tmp\", IOContext.READONCE)) {\n      int[] read = new int[ints.length];\n      DocIdsWriter.readInts(in, ints.length, new IntersectVisitor() {\n        int i = 0;\n        @Override\n        public void visit(int docID) throws IOException {\n          read[i++] = docID;\n        }\n\n        @Override\n        public void visit(int docID, byte[] packedValue) throws IOException {\n          throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n          throw new UnsupportedOperationException();\n        }\n\n      });\n      assertArrayEquals(ints, read);\n      assertEquals(len, in.getFilePointer());\n    }\n    dir.deleteFile(\"tmp\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/bkd/TestDocIdsWriter#test(Directory,int[]).mjava","pathOld":"/dev/null","sourceNew":"  private void test(Directory dir, int[] ints) throws Exception {\n    final long len;\n    try(IndexOutput out = dir.createOutput(\"tmp\", IOContext.DEFAULT)) {\n      DocIdsWriter.writeDocIds(ints, 0, ints.length, out);\n      len = out.getFilePointer();\n      if (random().nextBoolean()) {\n        out.writeLong(0); // garbage\n      }\n    }\n    try (IndexInput in = dir.openInput(\"tmp\", IOContext.READONCE)) {\n      int[] read = new int[ints.length];\n      DocIdsWriter.readInts(in, ints.length, read);\n      assertArrayEquals(ints, read);\n      assertEquals(len, in.getFilePointer());\n    }\n    try (IndexInput in = dir.openInput(\"tmp\", IOContext.READONCE)) {\n      int[] read = new int[ints.length];\n      DocIdsWriter.readInts(in, ints.length, new IntersectVisitor() {\n        int i = 0;\n        @Override\n        public void visit(int docID) throws IOException {\n          read[i++] = docID;\n        }\n\n        @Override\n        public void visit(int docID, byte[] packedValue) throws IOException {\n          throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n          throw new UnsupportedOperationException();\n        }\n\n      });\n      assertArrayEquals(ints, read);\n      assertEquals(len, in.getFilePointer());\n    }\n    dir.deleteFile(\"tmp\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"adc24e961ba2d17d4cc061a9fde65e9059b7f1ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","adc24e961ba2d17d4cc061a9fde65e9059b7f1ee"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["adc24e961ba2d17d4cc061a9fde65e9059b7f1ee"]},"commit2Childs":{"adc24e961ba2d17d4cc061a9fde65e9059b7f1ee":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["adc24e961ba2d17d4cc061a9fde65e9059b7f1ee","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}