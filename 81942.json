{"path":"lucene/contrib/misc/src/test/org/apache/lucene/misc/TestHighFreqTerms#indexDocs(IndexWriter).mjava","commits":[{"id":"1513361122ebc5ddd6075f633cd77d2345611767","date":1273770174,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/contrib/misc/src/test/org/apache/lucene/misc/TestHighFreqTerms#indexDocs(IndexWriter).mjava","pathOld":"/dev/null","sourceNew":"  /********************Testing Utils**********************************/\n    \n  private static void indexDocs(IndexWriter writer) throws Exception {\n\n    /**\n     * Generate 10 documents where term n  has a docFreq of n and a totalTermFreq of n*2 (squared). \n     */\n    for (int i = 1; i <= 10; i++) {\n      Document doc = new Document();\n      String content = getContent(i);\n    \n      doc.add(new Field(\"FIELD_1\", content, Field.Store.YES,Field.Index.ANALYZED, Field.TermVector.NO));\n      //add a different field\n      doc.add(new Field(\"different_field\", \"diff\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.NO));\n      writer.addDocument(doc);\n    }\n    \n    //add 10 more docs with the term \"diff\" this will make it have the highest docFreq if we don't ask for the\n    //highest freq terms for a specific field.\n    for (int i = 1; i <= 10; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"different_field\", \"diff\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.NO));\n      writer.addDocument(doc);\n    }\n    // add some docs where tf < df so we can see if sorting works\n    // highTF low df\n    int highTF = 200;\n    Document doc = new Document();\n    String content = \"\";\n    for (int i = 0; i < highTF; i++) {\n      content += \"highTF \";\n    }\n    doc.add(new Field(\"FIELD_1\", content, Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.NO));\n    writer.addDocument(doc);\n    // highTF medium df =5\n    int medium_df = 5;\n    for (int i = 0; i < medium_df; i++) {\n      int tf = 25;\n      Document newdoc = new Document();\n      String newcontent = \"\";\n      for (int j = 0; j < tf; j++) {\n        newcontent += \"highTFmedDF \";\n      }\n      newdoc.add(new Field(\"FIELD_1\", newcontent, Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.NO));\n      writer.addDocument(newdoc);\n    }\n    // add a doc with high tf in field different_field\n    int targetTF =150;\n    doc = new Document();\n    content = \"\";\n    for (int i = 0; i < targetTF; i++) {\n      content += \"TF150 \";\n    }\n    doc.add(new Field(\"different_field\", content, Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.NO));\n    writer.addDocument(doc);\n    writer.close();\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"132903c28af3aa6f67284b78de91c0f0a99488c2","date":1284282129,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/misc/src/test/org/apache/lucene/misc/TestHighFreqTerms#indexDocs(IndexWriter).mjava","pathOld":"lucene/contrib/misc/src/test/org/apache/lucene/misc/TestHighFreqTerms#indexDocs(IndexWriter).mjava","sourceNew":"  /********************Testing Utils**********************************/\n    \n  private void indexDocs(IndexWriter writer) throws Exception {\n\n    /**\n     * Generate 10 documents where term n  has a docFreq of n and a totalTermFreq of n*2 (squared). \n     */\n    for (int i = 1; i <= 10; i++) {\n      Document doc = new Document();\n      String content = getContent(i);\n    \n      doc.add(newField(\"FIELD_1\", content, Field.Store.YES,Field.Index.ANALYZED, Field.TermVector.NO));\n      //add a different field\n      doc.add(newField(\"different_field\", \"diff\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.NO));\n      writer.addDocument(doc);\n    }\n    \n    //add 10 more docs with the term \"diff\" this will make it have the highest docFreq if we don't ask for the\n    //highest freq terms for a specific field.\n    for (int i = 1; i <= 10; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"different_field\", \"diff\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.NO));\n      writer.addDocument(doc);\n    }\n    // add some docs where tf < df so we can see if sorting works\n    // highTF low df\n    int highTF = 200;\n    Document doc = new Document();\n    String content = \"\";\n    for (int i = 0; i < highTF; i++) {\n      content += \"highTF \";\n    }\n    doc.add(newField(\"FIELD_1\", content, Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.NO));\n    writer.addDocument(doc);\n    // highTF medium df =5\n    int medium_df = 5;\n    for (int i = 0; i < medium_df; i++) {\n      int tf = 25;\n      Document newdoc = new Document();\n      String newcontent = \"\";\n      for (int j = 0; j < tf; j++) {\n        newcontent += \"highTFmedDF \";\n      }\n      newdoc.add(newField(\"FIELD_1\", newcontent, Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.NO));\n      writer.addDocument(newdoc);\n    }\n    // add a doc with high tf in field different_field\n    int targetTF =150;\n    doc = new Document();\n    content = \"\";\n    for (int i = 0; i < targetTF; i++) {\n      content += \"TF150 \";\n    }\n    doc.add(newField(\"different_field\", content, Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.NO));\n    writer.addDocument(doc);\n    writer.close();\n    \n  }\n\n","sourceOld":"  /********************Testing Utils**********************************/\n    \n  private static void indexDocs(IndexWriter writer) throws Exception {\n\n    /**\n     * Generate 10 documents where term n  has a docFreq of n and a totalTermFreq of n*2 (squared). \n     */\n    for (int i = 1; i <= 10; i++) {\n      Document doc = new Document();\n      String content = getContent(i);\n    \n      doc.add(new Field(\"FIELD_1\", content, Field.Store.YES,Field.Index.ANALYZED, Field.TermVector.NO));\n      //add a different field\n      doc.add(new Field(\"different_field\", \"diff\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.NO));\n      writer.addDocument(doc);\n    }\n    \n    //add 10 more docs with the term \"diff\" this will make it have the highest docFreq if we don't ask for the\n    //highest freq terms for a specific field.\n    for (int i = 1; i <= 10; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"different_field\", \"diff\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.NO));\n      writer.addDocument(doc);\n    }\n    // add some docs where tf < df so we can see if sorting works\n    // highTF low df\n    int highTF = 200;\n    Document doc = new Document();\n    String content = \"\";\n    for (int i = 0; i < highTF; i++) {\n      content += \"highTF \";\n    }\n    doc.add(new Field(\"FIELD_1\", content, Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.NO));\n    writer.addDocument(doc);\n    // highTF medium df =5\n    int medium_df = 5;\n    for (int i = 0; i < medium_df; i++) {\n      int tf = 25;\n      Document newdoc = new Document();\n      String newcontent = \"\";\n      for (int j = 0; j < tf; j++) {\n        newcontent += \"highTFmedDF \";\n      }\n      newdoc.add(new Field(\"FIELD_1\", newcontent, Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.NO));\n      writer.addDocument(newdoc);\n    }\n    // add a doc with high tf in field different_field\n    int targetTF =150;\n    doc = new Document();\n    content = \"\";\n    for (int i = 0; i < targetTF; i++) {\n      content += \"TF150 \";\n    }\n    doc.add(new Field(\"different_field\", content, Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.NO));\n    writer.addDocument(doc);\n    writer.close();\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"24bbea3efc4507c483f922462353c5994867de42","date":1284405081,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/contrib/misc/src/test/org/apache/lucene/misc/TestHighFreqTerms#indexDocs(IndexWriter).mjava","pathOld":"lucene/contrib/misc/src/test/org/apache/lucene/misc/TestHighFreqTerms#indexDocs(IndexWriter).mjava","sourceNew":"  /********************Testing Utils**********************************/\n    \n  private static void indexDocs(IndexWriter writer) throws Exception {\n\n    /**\n     * Generate 10 documents where term n  has a docFreq of n and a totalTermFreq of n*2 (squared). \n     */\n    for (int i = 1; i <= 10; i++) {\n      Document doc = new Document();\n      String content = getContent(i);\n    \n      doc.add(newField(random, \"FIELD_1\", content, Field.Store.YES,Field.Index.ANALYZED, Field.TermVector.NO));\n      //add a different field\n      doc.add(newField(random, \"different_field\", \"diff\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.NO));\n      writer.addDocument(doc);\n    }\n    \n    //add 10 more docs with the term \"diff\" this will make it have the highest docFreq if we don't ask for the\n    //highest freq terms for a specific field.\n    for (int i = 1; i <= 10; i++) {\n      Document doc = new Document();\n      doc.add(newField(random, \"different_field\", \"diff\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.NO));\n      writer.addDocument(doc);\n    }\n    // add some docs where tf < df so we can see if sorting works\n    // highTF low df\n    int highTF = 200;\n    Document doc = new Document();\n    String content = \"\";\n    for (int i = 0; i < highTF; i++) {\n      content += \"highTF \";\n    }\n    doc.add(newField(random, \"FIELD_1\", content, Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.NO));\n    writer.addDocument(doc);\n    // highTF medium df =5\n    int medium_df = 5;\n    for (int i = 0; i < medium_df; i++) {\n      int tf = 25;\n      Document newdoc = new Document();\n      String newcontent = \"\";\n      for (int j = 0; j < tf; j++) {\n        newcontent += \"highTFmedDF \";\n      }\n      newdoc.add(newField(random, \"FIELD_1\", newcontent, Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.NO));\n      writer.addDocument(newdoc);\n    }\n    // add a doc with high tf in field different_field\n    int targetTF =150;\n    doc = new Document();\n    content = \"\";\n    for (int i = 0; i < targetTF; i++) {\n      content += \"TF150 \";\n    }\n    doc.add(newField(random, \"different_field\", content, Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.NO));\n    writer.addDocument(doc);\n    writer.close();\n    \n  }\n\n","sourceOld":"  /********************Testing Utils**********************************/\n    \n  private void indexDocs(IndexWriter writer) throws Exception {\n\n    /**\n     * Generate 10 documents where term n  has a docFreq of n and a totalTermFreq of n*2 (squared). \n     */\n    for (int i = 1; i <= 10; i++) {\n      Document doc = new Document();\n      String content = getContent(i);\n    \n      doc.add(newField(\"FIELD_1\", content, Field.Store.YES,Field.Index.ANALYZED, Field.TermVector.NO));\n      //add a different field\n      doc.add(newField(\"different_field\", \"diff\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.NO));\n      writer.addDocument(doc);\n    }\n    \n    //add 10 more docs with the term \"diff\" this will make it have the highest docFreq if we don't ask for the\n    //highest freq terms for a specific field.\n    for (int i = 1; i <= 10; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"different_field\", \"diff\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.NO));\n      writer.addDocument(doc);\n    }\n    // add some docs where tf < df so we can see if sorting works\n    // highTF low df\n    int highTF = 200;\n    Document doc = new Document();\n    String content = \"\";\n    for (int i = 0; i < highTF; i++) {\n      content += \"highTF \";\n    }\n    doc.add(newField(\"FIELD_1\", content, Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.NO));\n    writer.addDocument(doc);\n    // highTF medium df =5\n    int medium_df = 5;\n    for (int i = 0; i < medium_df; i++) {\n      int tf = 25;\n      Document newdoc = new Document();\n      String newcontent = \"\";\n      for (int j = 0; j < tf; j++) {\n        newcontent += \"highTFmedDF \";\n      }\n      newdoc.add(newField(\"FIELD_1\", newcontent, Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.NO));\n      writer.addDocument(newdoc);\n    }\n    // add a doc with high tf in field different_field\n    int targetTF =150;\n    doc = new Document();\n    content = \"\";\n    for (int i = 0; i < targetTF; i++) {\n      content += \"TF150 \";\n    }\n    doc.add(newField(\"different_field\", content, Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.NO));\n    writer.addDocument(doc);\n    writer.close();\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/contrib/misc/src/test/org/apache/lucene/misc/TestHighFreqTerms#indexDocs(IndexWriter).mjava","pathOld":"lucene/contrib/misc/src/test/org/apache/lucene/misc/TestHighFreqTerms#indexDocs(IndexWriter).mjava","sourceNew":"  /********************Testing Utils**********************************/\n    \n  private static void indexDocs(IndexWriter writer) throws Exception {\n\n    /**\n     * Generate 10 documents where term n  has a docFreq of n and a totalTermFreq of n*2 (squared). \n     */\n    for (int i = 1; i <= 10; i++) {\n      Document doc = new Document();\n      String content = getContent(i);\n    \n      doc.add(newField(random, \"FIELD_1\", content, Field.Store.YES,Field.Index.ANALYZED, Field.TermVector.NO));\n      //add a different field\n      doc.add(newField(random, \"different_field\", \"diff\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.NO));\n      writer.addDocument(doc);\n    }\n    \n    //add 10 more docs with the term \"diff\" this will make it have the highest docFreq if we don't ask for the\n    //highest freq terms for a specific field.\n    for (int i = 1; i <= 10; i++) {\n      Document doc = new Document();\n      doc.add(newField(random, \"different_field\", \"diff\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.NO));\n      writer.addDocument(doc);\n    }\n    // add some docs where tf < df so we can see if sorting works\n    // highTF low df\n    int highTF = 200;\n    Document doc = new Document();\n    String content = \"\";\n    for (int i = 0; i < highTF; i++) {\n      content += \"highTF \";\n    }\n    doc.add(newField(random, \"FIELD_1\", content, Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.NO));\n    writer.addDocument(doc);\n    // highTF medium df =5\n    int medium_df = 5;\n    for (int i = 0; i < medium_df; i++) {\n      int tf = 25;\n      Document newdoc = new Document();\n      String newcontent = \"\";\n      for (int j = 0; j < tf; j++) {\n        newcontent += \"highTFmedDF \";\n      }\n      newdoc.add(newField(random, \"FIELD_1\", newcontent, Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.NO));\n      writer.addDocument(newdoc);\n    }\n    // add a doc with high tf in field different_field\n    int targetTF =150;\n    doc = new Document();\n    content = \"\";\n    for (int i = 0; i < targetTF; i++) {\n      content += \"TF150 \";\n    }\n    doc.add(newField(random, \"different_field\", content, Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.NO));\n    writer.addDocument(doc);\n    writer.close();\n    \n  }\n\n","sourceOld":"  /********************Testing Utils**********************************/\n    \n  private static void indexDocs(IndexWriter writer) throws Exception {\n\n    /**\n     * Generate 10 documents where term n  has a docFreq of n and a totalTermFreq of n*2 (squared). \n     */\n    for (int i = 1; i <= 10; i++) {\n      Document doc = new Document();\n      String content = getContent(i);\n    \n      doc.add(new Field(\"FIELD_1\", content, Field.Store.YES,Field.Index.ANALYZED, Field.TermVector.NO));\n      //add a different field\n      doc.add(new Field(\"different_field\", \"diff\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.NO));\n      writer.addDocument(doc);\n    }\n    \n    //add 10 more docs with the term \"diff\" this will make it have the highest docFreq if we don't ask for the\n    //highest freq terms for a specific field.\n    for (int i = 1; i <= 10; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"different_field\", \"diff\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.NO));\n      writer.addDocument(doc);\n    }\n    // add some docs where tf < df so we can see if sorting works\n    // highTF low df\n    int highTF = 200;\n    Document doc = new Document();\n    String content = \"\";\n    for (int i = 0; i < highTF; i++) {\n      content += \"highTF \";\n    }\n    doc.add(new Field(\"FIELD_1\", content, Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.NO));\n    writer.addDocument(doc);\n    // highTF medium df =5\n    int medium_df = 5;\n    for (int i = 0; i < medium_df; i++) {\n      int tf = 25;\n      Document newdoc = new Document();\n      String newcontent = \"\";\n      for (int j = 0; j < tf; j++) {\n        newcontent += \"highTFmedDF \";\n      }\n      newdoc.add(new Field(\"FIELD_1\", newcontent, Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.NO));\n      writer.addDocument(newdoc);\n    }\n    // add a doc with high tf in field different_field\n    int targetTF =150;\n    doc = new Document();\n    content = \"\";\n    for (int i = 0; i < targetTF; i++) {\n      content += \"TF150 \";\n    }\n    doc.add(new Field(\"different_field\", content, Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.NO));\n    writer.addDocument(doc);\n    writer.close();\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/contrib/misc/src/test/org/apache/lucene/misc/TestHighFreqTerms#indexDocs(IndexWriter).mjava","pathOld":"lucene/contrib/misc/src/test/org/apache/lucene/misc/TestHighFreqTerms#indexDocs(IndexWriter).mjava","sourceNew":"  /********************Testing Utils**********************************/\n    \n  private static void indexDocs(IndexWriter writer) throws Exception {\n\n    /**\n     * Generate 10 documents where term n  has a docFreq of n and a totalTermFreq of n*2 (squared). \n     */\n    for (int i = 1; i <= 10; i++) {\n      Document doc = new Document();\n      String content = getContent(i);\n    \n      doc.add(newField(random, \"FIELD_1\", content, TextField.TYPE_STORED));\n      //add a different field\n      doc.add(newField(random, \"different_field\", \"diff\", TextField.TYPE_STORED));\n      writer.addDocument(doc);\n    }\n    \n    //add 10 more docs with the term \"diff\" this will make it have the highest docFreq if we don't ask for the\n    //highest freq terms for a specific field.\n    for (int i = 1; i <= 10; i++) {\n      Document doc = new Document();\n      doc.add(newField(random, \"different_field\", \"diff\", TextField.TYPE_STORED));\n      writer.addDocument(doc);\n    }\n    // add some docs where tf < df so we can see if sorting works\n    // highTF low df\n    int highTF = 200;\n    Document doc = new Document();\n    String content = \"\";\n    for (int i = 0; i < highTF; i++) {\n      content += \"highTF \";\n    }\n    doc.add(newField(random, \"FIELD_1\", content, TextField.TYPE_STORED));\n    writer.addDocument(doc);\n    // highTF medium df =5\n    int medium_df = 5;\n    for (int i = 0; i < medium_df; i++) {\n      int tf = 25;\n      Document newdoc = new Document();\n      String newcontent = \"\";\n      for (int j = 0; j < tf; j++) {\n        newcontent += \"highTFmedDF \";\n      }\n      newdoc.add(newField(random, \"FIELD_1\", newcontent, TextField.TYPE_STORED));\n      writer.addDocument(newdoc);\n    }\n    // add a doc with high tf in field different_field\n    int targetTF =150;\n    doc = new Document();\n    content = \"\";\n    for (int i = 0; i < targetTF; i++) {\n      content += \"TF150 \";\n    }\n    doc.add(newField(random, \"different_field\", content, TextField.TYPE_STORED));\n    writer.addDocument(doc);\n    writer.close();\n    \n  }\n\n","sourceOld":"  /********************Testing Utils**********************************/\n    \n  private static void indexDocs(IndexWriter writer) throws Exception {\n\n    /**\n     * Generate 10 documents where term n  has a docFreq of n and a totalTermFreq of n*2 (squared). \n     */\n    for (int i = 1; i <= 10; i++) {\n      Document doc = new Document();\n      String content = getContent(i);\n    \n      doc.add(newField(random, \"FIELD_1\", content, Field.Store.YES,Field.Index.ANALYZED, Field.TermVector.NO));\n      //add a different field\n      doc.add(newField(random, \"different_field\", \"diff\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.NO));\n      writer.addDocument(doc);\n    }\n    \n    //add 10 more docs with the term \"diff\" this will make it have the highest docFreq if we don't ask for the\n    //highest freq terms for a specific field.\n    for (int i = 1; i <= 10; i++) {\n      Document doc = new Document();\n      doc.add(newField(random, \"different_field\", \"diff\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.NO));\n      writer.addDocument(doc);\n    }\n    // add some docs where tf < df so we can see if sorting works\n    // highTF low df\n    int highTF = 200;\n    Document doc = new Document();\n    String content = \"\";\n    for (int i = 0; i < highTF; i++) {\n      content += \"highTF \";\n    }\n    doc.add(newField(random, \"FIELD_1\", content, Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.NO));\n    writer.addDocument(doc);\n    // highTF medium df =5\n    int medium_df = 5;\n    for (int i = 0; i < medium_df; i++) {\n      int tf = 25;\n      Document newdoc = new Document();\n      String newcontent = \"\";\n      for (int j = 0; j < tf; j++) {\n        newcontent += \"highTFmedDF \";\n      }\n      newdoc.add(newField(random, \"FIELD_1\", newcontent, Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.NO));\n      writer.addDocument(newdoc);\n    }\n    // add a doc with high tf in field different_field\n    int targetTF =150;\n    doc = new Document();\n    content = \"\";\n    for (int i = 0; i < targetTF; i++) {\n      content += \"TF150 \";\n    }\n    doc.add(newField(random, \"different_field\", content, Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.NO));\n    writer.addDocument(doc);\n    writer.close();\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/misc/src/test/org/apache/lucene/misc/TestHighFreqTerms#indexDocs(IndexWriter).mjava","pathOld":"lucene/contrib/misc/src/test/org/apache/lucene/misc/TestHighFreqTerms#indexDocs(IndexWriter).mjava","sourceNew":"  /********************Testing Utils**********************************/\n    \n  private static void indexDocs(IndexWriter writer) throws Exception {\n    Random rnd = random();\n    \n    /**\n     * Generate 10 documents where term n  has a docFreq of n and a totalTermFreq of n*2 (squared). \n     */\n    for (int i = 1; i <= 10; i++) {\n      Document doc = new Document();\n      String content = getContent(i);\n    \n      doc.add(newField(rnd, \"FIELD_1\", content, TextField.TYPE_STORED));\n      //add a different field\n      doc.add(newField(rnd, \"different_field\", \"diff\", TextField.TYPE_STORED));\n      writer.addDocument(doc);\n    }\n    \n    //add 10 more docs with the term \"diff\" this will make it have the highest docFreq if we don't ask for the\n    //highest freq terms for a specific field.\n    for (int i = 1; i <= 10; i++) {\n      Document doc = new Document();\n      doc.add(newField(rnd, \"different_field\", \"diff\", TextField.TYPE_STORED));\n      writer.addDocument(doc);\n    }\n    // add some docs where tf < df so we can see if sorting works\n    // highTF low df\n    int highTF = 200;\n    Document doc = new Document();\n    String content = \"\";\n    for (int i = 0; i < highTF; i++) {\n      content += \"highTF \";\n    }\n    doc.add(newField(rnd, \"FIELD_1\", content, TextField.TYPE_STORED));\n    writer.addDocument(doc);\n    // highTF medium df =5\n    int medium_df = 5;\n    for (int i = 0; i < medium_df; i++) {\n      int tf = 25;\n      Document newdoc = new Document();\n      String newcontent = \"\";\n      for (int j = 0; j < tf; j++) {\n        newcontent += \"highTFmedDF \";\n      }\n      newdoc.add(newField(rnd, \"FIELD_1\", newcontent, TextField.TYPE_STORED));\n      writer.addDocument(newdoc);\n    }\n    // add a doc with high tf in field different_field\n    int targetTF =150;\n    doc = new Document();\n    content = \"\";\n    for (int i = 0; i < targetTF; i++) {\n      content += \"TF150 \";\n    }\n    doc.add(newField(rnd, \"different_field\", content, TextField.TYPE_STORED));\n    writer.addDocument(doc);\n    writer.close();\n    \n  }\n\n","sourceOld":"  /********************Testing Utils**********************************/\n    \n  private static void indexDocs(IndexWriter writer) throws Exception {\n\n    /**\n     * Generate 10 documents where term n  has a docFreq of n and a totalTermFreq of n*2 (squared). \n     */\n    for (int i = 1; i <= 10; i++) {\n      Document doc = new Document();\n      String content = getContent(i);\n    \n      doc.add(newField(random, \"FIELD_1\", content, TextField.TYPE_STORED));\n      //add a different field\n      doc.add(newField(random, \"different_field\", \"diff\", TextField.TYPE_STORED));\n      writer.addDocument(doc);\n    }\n    \n    //add 10 more docs with the term \"diff\" this will make it have the highest docFreq if we don't ask for the\n    //highest freq terms for a specific field.\n    for (int i = 1; i <= 10; i++) {\n      Document doc = new Document();\n      doc.add(newField(random, \"different_field\", \"diff\", TextField.TYPE_STORED));\n      writer.addDocument(doc);\n    }\n    // add some docs where tf < df so we can see if sorting works\n    // highTF low df\n    int highTF = 200;\n    Document doc = new Document();\n    String content = \"\";\n    for (int i = 0; i < highTF; i++) {\n      content += \"highTF \";\n    }\n    doc.add(newField(random, \"FIELD_1\", content, TextField.TYPE_STORED));\n    writer.addDocument(doc);\n    // highTF medium df =5\n    int medium_df = 5;\n    for (int i = 0; i < medium_df; i++) {\n      int tf = 25;\n      Document newdoc = new Document();\n      String newcontent = \"\";\n      for (int j = 0; j < tf; j++) {\n        newcontent += \"highTFmedDF \";\n      }\n      newdoc.add(newField(random, \"FIELD_1\", newcontent, TextField.TYPE_STORED));\n      writer.addDocument(newdoc);\n    }\n    // add a doc with high tf in field different_field\n    int targetTF =150;\n    doc = new Document();\n    content = \"\";\n    for (int i = 0; i < targetTF; i++) {\n      content += \"TF150 \";\n    }\n    doc.add(newField(random, \"different_field\", content, TextField.TYPE_STORED));\n    writer.addDocument(doc);\n    writer.close();\n    \n  }\n\n","bugFix":null,"bugIntro":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/misc/TestHighFreqTerms#indexDocs(IndexWriter).mjava","pathOld":"lucene/contrib/misc/src/test/org/apache/lucene/misc/TestHighFreqTerms#indexDocs(IndexWriter).mjava","sourceNew":"  /********************Testing Utils**********************************/\n    \n  private static void indexDocs(IndexWriter writer) throws Exception {\n    Random rnd = random();\n    \n    /**\n     * Generate 10 documents where term n  has a docFreq of n and a totalTermFreq of n*2 (squared). \n     */\n    for (int i = 1; i <= 10; i++) {\n      Document doc = new Document();\n      String content = getContent(i);\n    \n      doc.add(newField(rnd, \"FIELD_1\", content, TextField.TYPE_STORED));\n      //add a different field\n      doc.add(newField(rnd, \"different_field\", \"diff\", TextField.TYPE_STORED));\n      writer.addDocument(doc);\n    }\n    \n    //add 10 more docs with the term \"diff\" this will make it have the highest docFreq if we don't ask for the\n    //highest freq terms for a specific field.\n    for (int i = 1; i <= 10; i++) {\n      Document doc = new Document();\n      doc.add(newField(rnd, \"different_field\", \"diff\", TextField.TYPE_STORED));\n      writer.addDocument(doc);\n    }\n    // add some docs where tf < df so we can see if sorting works\n    // highTF low df\n    int highTF = 200;\n    Document doc = new Document();\n    String content = \"\";\n    for (int i = 0; i < highTF; i++) {\n      content += \"highTF \";\n    }\n    doc.add(newField(rnd, \"FIELD_1\", content, TextField.TYPE_STORED));\n    writer.addDocument(doc);\n    // highTF medium df =5\n    int medium_df = 5;\n    for (int i = 0; i < medium_df; i++) {\n      int tf = 25;\n      Document newdoc = new Document();\n      String newcontent = \"\";\n      for (int j = 0; j < tf; j++) {\n        newcontent += \"highTFmedDF \";\n      }\n      newdoc.add(newField(rnd, \"FIELD_1\", newcontent, TextField.TYPE_STORED));\n      writer.addDocument(newdoc);\n    }\n    // add a doc with high tf in field different_field\n    int targetTF =150;\n    doc = new Document();\n    content = \"\";\n    for (int i = 0; i < targetTF; i++) {\n      content += \"TF150 \";\n    }\n    doc.add(newField(rnd, \"different_field\", content, TextField.TYPE_STORED));\n    writer.addDocument(doc);\n    writer.close();\n    \n  }\n\n","sourceOld":"  /********************Testing Utils**********************************/\n    \n  private static void indexDocs(IndexWriter writer) throws Exception {\n    Random rnd = random();\n    \n    /**\n     * Generate 10 documents where term n  has a docFreq of n and a totalTermFreq of n*2 (squared). \n     */\n    for (int i = 1; i <= 10; i++) {\n      Document doc = new Document();\n      String content = getContent(i);\n    \n      doc.add(newField(rnd, \"FIELD_1\", content, TextField.TYPE_STORED));\n      //add a different field\n      doc.add(newField(rnd, \"different_field\", \"diff\", TextField.TYPE_STORED));\n      writer.addDocument(doc);\n    }\n    \n    //add 10 more docs with the term \"diff\" this will make it have the highest docFreq if we don't ask for the\n    //highest freq terms for a specific field.\n    for (int i = 1; i <= 10; i++) {\n      Document doc = new Document();\n      doc.add(newField(rnd, \"different_field\", \"diff\", TextField.TYPE_STORED));\n      writer.addDocument(doc);\n    }\n    // add some docs where tf < df so we can see if sorting works\n    // highTF low df\n    int highTF = 200;\n    Document doc = new Document();\n    String content = \"\";\n    for (int i = 0; i < highTF; i++) {\n      content += \"highTF \";\n    }\n    doc.add(newField(rnd, \"FIELD_1\", content, TextField.TYPE_STORED));\n    writer.addDocument(doc);\n    // highTF medium df =5\n    int medium_df = 5;\n    for (int i = 0; i < medium_df; i++) {\n      int tf = 25;\n      Document newdoc = new Document();\n      String newcontent = \"\";\n      for (int j = 0; j < tf; j++) {\n        newcontent += \"highTFmedDF \";\n      }\n      newdoc.add(newField(rnd, \"FIELD_1\", newcontent, TextField.TYPE_STORED));\n      writer.addDocument(newdoc);\n    }\n    // add a doc with high tf in field different_field\n    int targetTF =150;\n    doc = new Document();\n    content = \"\";\n    for (int i = 0; i < targetTF; i++) {\n      content += \"TF150 \";\n    }\n    doc.add(newField(rnd, \"different_field\", content, TextField.TYPE_STORED));\n    writer.addDocument(doc);\n    writer.close();\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"24bbea3efc4507c483f922462353c5994867de42":["132903c28af3aa6f67284b78de91c0f0a99488c2"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"132903c28af3aa6f67284b78de91c0f0a99488c2":["1513361122ebc5ddd6075f633cd77d2345611767"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["24bbea3efc4507c483f922462353c5994867de42"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["1513361122ebc5ddd6075f633cd77d2345611767","24bbea3efc4507c483f922462353c5994867de42"],"1513361122ebc5ddd6075f633cd77d2345611767":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"24bbea3efc4507c483f922462353c5994867de42":["1509f151d7692d84fae414b2b799ac06ba60fcb4","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1513361122ebc5ddd6075f633cd77d2345611767"],"132903c28af3aa6f67284b78de91c0f0a99488c2":["24bbea3efc4507c483f922462353c5994867de42"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"1513361122ebc5ddd6075f633cd77d2345611767":["132903c28af3aa6f67284b78de91c0f0a99488c2","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}