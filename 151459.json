{"path":"modules/facet/src/test/org/apache/lucene/util/encoding/EncodingSpeed#encoderTest(IntEncoder,int[],int).mjava","commits":[{"id":"89f15687f60bd49cd3d9de427e85c17fd9397d61","date":1309381327,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"modules/facet/src/test/org/apache/lucene/util/encoding/EncodingSpeed#encoderTest(IntEncoder,int[],int).mjava","pathOld":"/dev/null","sourceNew":"  private static void encoderTest(IntEncoder encoder, int[] data,\n      int loopFactor) throws IOException {\n\n    long startTime, endTime;\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n\n    // -- Looping 100 times as a warm up --------------------------\n    for (int i = 100; i != 0; --i) {\n      baos.reset();\n      encoder.reInit(baos);\n      for (int value : data) {\n        encoder.encode(value);\n      }\n      encoder.close();\n    }\n    // -----------------------------------------------------------\n\n    startTime = System.currentTimeMillis();\n    for (int factor = loopFactor; factor > 0; --factor) {\n      baos.reset();\n      encoder.reInit(baos);\n      for (int value : data) {\n        encoder.encode(value);\n      }\n      encoder.close();\n    }\n    endTime = System.currentTimeMillis();\n\n    long encodeTime = endTime - startTime;\n\n    ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray());\n    IntDecoder decoder = encoder.createMatchingDecoder();\n    decoder.reInit(bais);\n    \n    // -- Looping 100 times as a warm up --------------------------\n    for (int i = 100; i != 0; --i) {\n      bais.mark(baos.size());\n      while (decoder.decode() != IntDecoder.EOS) {\n      }\n      bais.reset();\n      decoder.reInit(bais);\n    }\n    // -----------------------------------------------------------\n\n    decoder.reInit(bais);\n    startTime = System.currentTimeMillis();\n    for (int i = loopFactor; i > 0; --i) {\n      bais.mark(baos.size());\n      while (decoder.decode() != IntDecoder.EOS) {\n      }\n      bais.reset();\n      decoder.reInit(bais);\n    }\n\n    endTime = System.currentTimeMillis();\n    long decodeTime = endTime - startTime;\n\n    System.out.println(String.format(resultsFormat, encoder, nf.format(baos\n        .size()\n        * 8.0 / data.length), encodeTime, nf.format(encodeTime\n        * 1000000.0 / (loopFactor * data.length)), decodeTime, nf\n        .format(decodeTime * 1000000.0 / (loopFactor * data.length))));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/facet/src/test/org/apache/lucene/util/encoding/EncodingSpeed#encoderTest(IntEncoder,int[],int).mjava","pathOld":"/dev/null","sourceNew":"  private static void encoderTest(IntEncoder encoder, int[] data,\n      int loopFactor) throws IOException {\n\n    long startTime, endTime;\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n\n    // -- Looping 100 times as a warm up --------------------------\n    for (int i = 100; i != 0; --i) {\n      baos.reset();\n      encoder.reInit(baos);\n      for (int value : data) {\n        encoder.encode(value);\n      }\n      encoder.close();\n    }\n    // -----------------------------------------------------------\n\n    startTime = System.currentTimeMillis();\n    for (int factor = loopFactor; factor > 0; --factor) {\n      baos.reset();\n      encoder.reInit(baos);\n      for (int value : data) {\n        encoder.encode(value);\n      }\n      encoder.close();\n    }\n    endTime = System.currentTimeMillis();\n\n    long encodeTime = endTime - startTime;\n\n    ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray());\n    IntDecoder decoder = encoder.createMatchingDecoder();\n    decoder.reInit(bais);\n    \n    // -- Looping 100 times as a warm up --------------------------\n    for (int i = 100; i != 0; --i) {\n      bais.mark(baos.size());\n      while (decoder.decode() != IntDecoder.EOS) {\n      }\n      bais.reset();\n      decoder.reInit(bais);\n    }\n    // -----------------------------------------------------------\n\n    decoder.reInit(bais);\n    startTime = System.currentTimeMillis();\n    for (int i = loopFactor; i > 0; --i) {\n      bais.mark(baos.size());\n      while (decoder.decode() != IntDecoder.EOS) {\n      }\n      bais.reset();\n      decoder.reInit(bais);\n    }\n\n    endTime = System.currentTimeMillis();\n    long decodeTime = endTime - startTime;\n\n    System.out.println(String.format(resultsFormat, encoder, nf.format(baos\n        .size()\n        * 8.0 / data.length), encodeTime, nf.format(encodeTime\n        * 1000000.0 / (loopFactor * data.length)), decodeTime, nf\n        .format(decodeTime * 1000000.0 / (loopFactor * data.length))));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/facet/src/test/org/apache/lucene/util/encoding/EncodingSpeed#encoderTest(IntEncoder,int[],int).mjava","pathOld":"/dev/null","sourceNew":"  private static void encoderTest(IntEncoder encoder, int[] data,\n      int loopFactor) throws IOException {\n\n    long startTime, endTime;\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n\n    // -- Looping 100 times as a warm up --------------------------\n    for (int i = 100; i != 0; --i) {\n      baos.reset();\n      encoder.reInit(baos);\n      for (int value : data) {\n        encoder.encode(value);\n      }\n      encoder.close();\n    }\n    // -----------------------------------------------------------\n\n    startTime = System.currentTimeMillis();\n    for (int factor = loopFactor; factor > 0; --factor) {\n      baos.reset();\n      encoder.reInit(baos);\n      for (int value : data) {\n        encoder.encode(value);\n      }\n      encoder.close();\n    }\n    endTime = System.currentTimeMillis();\n\n    long encodeTime = endTime - startTime;\n\n    ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray());\n    IntDecoder decoder = encoder.createMatchingDecoder();\n    decoder.reInit(bais);\n    \n    // -- Looping 100 times as a warm up --------------------------\n    for (int i = 100; i != 0; --i) {\n      bais.mark(baos.size());\n      while (decoder.decode() != IntDecoder.EOS) {\n      }\n      bais.reset();\n      decoder.reInit(bais);\n    }\n    // -----------------------------------------------------------\n\n    decoder.reInit(bais);\n    startTime = System.currentTimeMillis();\n    for (int i = loopFactor; i > 0; --i) {\n      bais.mark(baos.size());\n      while (decoder.decode() != IntDecoder.EOS) {\n      }\n      bais.reset();\n      decoder.reInit(bais);\n    }\n\n    endTime = System.currentTimeMillis();\n    long decodeTime = endTime - startTime;\n\n    System.out.println(String.format(resultsFormat, encoder, nf.format(baos\n        .size()\n        * 8.0 / data.length), encodeTime, nf.format(encodeTime\n        * 1000000.0 / (loopFactor * data.length)), decodeTime, nf\n        .format(decodeTime * 1000000.0 / (loopFactor * data.length))));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/util/encoding/EncodingSpeed#encoderTest(IntEncoder,int[],int).mjava","pathOld":"modules/facet/src/test/org/apache/lucene/util/encoding/EncodingSpeed#encoderTest(IntEncoder,int[],int).mjava","sourceNew":"  private static void encoderTest(IntEncoder encoder, int[] data,\n      int loopFactor) throws IOException {\n\n    long startTime, endTime;\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n\n    // -- Looping 100 times as a warm up --------------------------\n    for (int i = 100; i != 0; --i) {\n      baos.reset();\n      encoder.reInit(baos);\n      for (int value : data) {\n        encoder.encode(value);\n      }\n      encoder.close();\n    }\n    // -----------------------------------------------------------\n\n    startTime = System.currentTimeMillis();\n    for (int factor = loopFactor; factor > 0; --factor) {\n      baos.reset();\n      encoder.reInit(baos);\n      for (int value : data) {\n        encoder.encode(value);\n      }\n      encoder.close();\n    }\n    endTime = System.currentTimeMillis();\n\n    long encodeTime = endTime - startTime;\n\n    ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray());\n    IntDecoder decoder = encoder.createMatchingDecoder();\n    decoder.reInit(bais);\n    \n    // -- Looping 100 times as a warm up --------------------------\n    for (int i = 100; i != 0; --i) {\n      bais.mark(baos.size());\n      while (decoder.decode() != IntDecoder.EOS) {\n      }\n      bais.reset();\n      decoder.reInit(bais);\n    }\n    // -----------------------------------------------------------\n\n    decoder.reInit(bais);\n    startTime = System.currentTimeMillis();\n    for (int i = loopFactor; i > 0; --i) {\n      bais.mark(baos.size());\n      while (decoder.decode() != IntDecoder.EOS) {\n      }\n      bais.reset();\n      decoder.reInit(bais);\n    }\n\n    endTime = System.currentTimeMillis();\n    long decodeTime = endTime - startTime;\n\n    System.out.println(String.format(resultsFormat, encoder, nf.format(baos\n        .size()\n        * 8.0 / data.length), encodeTime, nf.format(encodeTime\n        * 1000000.0 / (loopFactor * data.length)), decodeTime, nf\n        .format(decodeTime * 1000000.0 / (loopFactor * data.length))));\n  }\n\n","sourceOld":"  private static void encoderTest(IntEncoder encoder, int[] data,\n      int loopFactor) throws IOException {\n\n    long startTime, endTime;\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n\n    // -- Looping 100 times as a warm up --------------------------\n    for (int i = 100; i != 0; --i) {\n      baos.reset();\n      encoder.reInit(baos);\n      for (int value : data) {\n        encoder.encode(value);\n      }\n      encoder.close();\n    }\n    // -----------------------------------------------------------\n\n    startTime = System.currentTimeMillis();\n    for (int factor = loopFactor; factor > 0; --factor) {\n      baos.reset();\n      encoder.reInit(baos);\n      for (int value : data) {\n        encoder.encode(value);\n      }\n      encoder.close();\n    }\n    endTime = System.currentTimeMillis();\n\n    long encodeTime = endTime - startTime;\n\n    ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray());\n    IntDecoder decoder = encoder.createMatchingDecoder();\n    decoder.reInit(bais);\n    \n    // -- Looping 100 times as a warm up --------------------------\n    for (int i = 100; i != 0; --i) {\n      bais.mark(baos.size());\n      while (decoder.decode() != IntDecoder.EOS) {\n      }\n      bais.reset();\n      decoder.reInit(bais);\n    }\n    // -----------------------------------------------------------\n\n    decoder.reInit(bais);\n    startTime = System.currentTimeMillis();\n    for (int i = loopFactor; i > 0; --i) {\n      bais.mark(baos.size());\n      while (decoder.decode() != IntDecoder.EOS) {\n      }\n      bais.reset();\n      decoder.reInit(bais);\n    }\n\n    endTime = System.currentTimeMillis();\n    long decodeTime = endTime - startTime;\n\n    System.out.println(String.format(resultsFormat, encoder, nf.format(baos\n        .size()\n        * 8.0 / data.length), encodeTime, nf.format(encodeTime\n        * 1000000.0 / (loopFactor * data.length)), decodeTime, nf\n        .format(decodeTime * 1000000.0 / (loopFactor * data.length))));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["89f15687f60bd49cd3d9de427e85c17fd9397d61"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","89f15687f60bd49cd3d9de427e85c17fd9397d61"],"89f15687f60bd49cd3d9de427e85c17fd9397d61":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","89f15687f60bd49cd3d9de427e85c17fd9397d61"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d083e83f225b11e5fdd900e83d26ddb385b6955c","89f15687f60bd49cd3d9de427e85c17fd9397d61","817d8435e9135b756f08ce6710ab0baac51bdf88"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"89f15687f60bd49cd3d9de427e85c17fd9397d61":["b89678825b68eccaf09e6ab71675fc0b0af1e099","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}