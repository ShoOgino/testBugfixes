{"path":"lucene/src/java/org/apache/lucene/store/FSDirectory#getLockID().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/store/FSDirectory#getLockID().mjava","pathOld":"src/java/org/apache/lucene/store/FSDirectory#getLockID().mjava","sourceNew":"  @Override\n  public String getLockID() {\n    ensureOpen();\n    String dirName;                               // name to be hashed\n    try {\n      dirName = directory.getCanonicalPath();\n    } catch (IOException e) {\n      throw new RuntimeException(e.toString(), e);\n    }\n\n    byte digest[];\n    synchronized (DIGESTER) {\n      digest = DIGESTER.digest(dirName.getBytes());\n    }\n    StringBuilder buf = new StringBuilder();\n    buf.append(\"lucene-\");\n    for (int i = 0; i < digest.length; i++) {\n      int b = digest[i];\n      buf.append(HEX_DIGITS[(b >> 4) & 0xf]);\n      buf.append(HEX_DIGITS[b & 0xf]);\n    }\n\n    return buf.toString();\n  }\n\n","sourceOld":"  @Override\n  public String getLockID() {\n    ensureOpen();\n    String dirName;                               // name to be hashed\n    try {\n      dirName = directory.getCanonicalPath();\n    } catch (IOException e) {\n      throw new RuntimeException(e.toString(), e);\n    }\n\n    byte digest[];\n    synchronized (DIGESTER) {\n      digest = DIGESTER.digest(dirName.getBytes());\n    }\n    StringBuilder buf = new StringBuilder();\n    buf.append(\"lucene-\");\n    for (int i = 0; i < digest.length; i++) {\n      int b = digest[i];\n      buf.append(HEX_DIGITS[(b >> 4) & 0xf]);\n      buf.append(HEX_DIGITS[b & 0xf]);\n    }\n\n    return buf.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e538cbd7f572f646f36c73053aea561d95c2cb2","date":1306660868,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/store/FSDirectory#getLockID().mjava","pathOld":"lucene/src/java/org/apache/lucene/store/FSDirectory#getLockID().mjava","sourceNew":"  @Override\n  public String getLockID() {\n    ensureOpen();\n    String dirName;                               // name to be hashed\n    try {\n      dirName = directory.getCanonicalPath();\n    } catch (IOException e) {\n      throw new RuntimeException(e.toString(), e);\n    }\n\n    int digest = 0;\n    for(int charIDX=0;charIDX<dirName.length();charIDX++) {\n      final char ch = dirName.charAt(charIDX);\n      digest = 31 * digest + ch;\n    }\n    return \"lucene-\" + Integer.toHexString(digest);\n  }\n\n","sourceOld":"  @Override\n  public String getLockID() {\n    ensureOpen();\n    String dirName;                               // name to be hashed\n    try {\n      dirName = directory.getCanonicalPath();\n    } catch (IOException e) {\n      throw new RuntimeException(e.toString(), e);\n    }\n\n    byte digest[];\n    synchronized (DIGESTER) {\n      digest = DIGESTER.digest(dirName.getBytes());\n    }\n    StringBuilder buf = new StringBuilder();\n    buf.append(\"lucene-\");\n    for (int i = 0; i < digest.length; i++) {\n      int b = digest[i];\n      buf.append(HEX_DIGITS[(b >> 4) & 0xf]);\n      buf.append(HEX_DIGITS[b & 0xf]);\n    }\n\n    return buf.toString();\n  }\n\n","bugFix":["4625cb7ffd7c9caaf2d62b206ba9a382d68da82c","5c6bd70b660528bcf8dd3216ea1f7565ac220a20","16df95df890d76f133a069351e752080aada6c46"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/store/FSDirectory#getLockID().mjava","pathOld":"lucene/src/java/org/apache/lucene/store/FSDirectory#getLockID().mjava","sourceNew":"  @Override\n  public String getLockID() {\n    ensureOpen();\n    String dirName;                               // name to be hashed\n    try {\n      dirName = directory.getCanonicalPath();\n    } catch (IOException e) {\n      throw new RuntimeException(e.toString(), e);\n    }\n\n    int digest = 0;\n    for(int charIDX=0;charIDX<dirName.length();charIDX++) {\n      final char ch = dirName.charAt(charIDX);\n      digest = 31 * digest + ch;\n    }\n    return \"lucene-\" + Integer.toHexString(digest);\n  }\n\n","sourceOld":"  @Override\n  public String getLockID() {\n    ensureOpen();\n    String dirName;                               // name to be hashed\n    try {\n      dirName = directory.getCanonicalPath();\n    } catch (IOException e) {\n      throw new RuntimeException(e.toString(), e);\n    }\n\n    byte digest[];\n    synchronized (DIGESTER) {\n      digest = DIGESTER.digest(dirName.getBytes());\n    }\n    StringBuilder buf = new StringBuilder();\n    buf.append(\"lucene-\");\n    for (int i = 0; i < digest.length; i++) {\n      int b = digest[i];\n      buf.append(HEX_DIGITS[(b >> 4) & 0xf]);\n      buf.append(HEX_DIGITS[b & 0xf]);\n    }\n\n    return buf.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e10cb22a8bdb44339e282925a29182bb2f3174d","date":1306841137,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/store/FSDirectory#getLockID().mjava","pathOld":"lucene/src/java/org/apache/lucene/store/FSDirectory#getLockID().mjava","sourceNew":"  @Override\n  public String getLockID() {\n    ensureOpen();\n    String dirName;                               // name to be hashed\n    try {\n      dirName = directory.getCanonicalPath();\n    } catch (IOException e) {\n      throw new RuntimeException(e.toString(), e);\n    }\n\n    int digest = 0;\n    for(int charIDX=0;charIDX<dirName.length();charIDX++) {\n      final char ch = dirName.charAt(charIDX);\n      digest = 31 * digest + ch;\n    }\n    return \"lucene-\" + Integer.toHexString(digest);\n  }\n\n","sourceOld":"  @Override\n  public String getLockID() {\n    ensureOpen();\n    String dirName;                               // name to be hashed\n    try {\n      dirName = directory.getCanonicalPath();\n    } catch (IOException e) {\n      throw new RuntimeException(e.toString(), e);\n    }\n\n    byte digest[];\n    synchronized (DIGESTER) {\n      digest = DIGESTER.digest(dirName.getBytes());\n    }\n    StringBuilder buf = new StringBuilder();\n    buf.append(\"lucene-\");\n    for (int i = 0; i < digest.length; i++) {\n      int b = digest[i];\n      buf.append(HEX_DIGITS[(b >> 4) & 0xf]);\n      buf.append(HEX_DIGITS[b & 0xf]);\n    }\n\n    return buf.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/FSDirectory#getLockID().mjava","pathOld":"lucene/src/java/org/apache/lucene/store/FSDirectory#getLockID().mjava","sourceNew":"  @Override\n  public String getLockID() {\n    ensureOpen();\n    String dirName;                               // name to be hashed\n    try {\n      dirName = directory.getCanonicalPath();\n    } catch (IOException e) {\n      throw new RuntimeException(e.toString(), e);\n    }\n\n    int digest = 0;\n    for(int charIDX=0;charIDX<dirName.length();charIDX++) {\n      final char ch = dirName.charAt(charIDX);\n      digest = 31 * digest + ch;\n    }\n    return \"lucene-\" + Integer.toHexString(digest);\n  }\n\n","sourceOld":"  @Override\n  public String getLockID() {\n    ensureOpen();\n    String dirName;                               // name to be hashed\n    try {\n      dirName = directory.getCanonicalPath();\n    } catch (IOException e) {\n      throw new RuntimeException(e.toString(), e);\n    }\n\n    int digest = 0;\n    for(int charIDX=0;charIDX<dirName.length();charIDX++) {\n      final char ch = dirName.charAt(charIDX);\n      digest = 31 * digest + ch;\n    }\n    return \"lucene-\" + Integer.toHexString(digest);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["9454a6510e2db155fb01faa5c049b06ece95fab9","1e538cbd7f572f646f36c73053aea561d95c2cb2"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["1e538cbd7f572f646f36c73053aea561d95c2cb2"],"1e538cbd7f572f646f36c73053aea561d95c2cb2":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["9454a6510e2db155fb01faa5c049b06ece95fab9","1e538cbd7f572f646f36c73053aea561d95c2cb2"]},"commit2Childs":{"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1e538cbd7f572f646f36c73053aea561d95c2cb2":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","3a119bbc8703c10faa329ec201c654b3a35a1e3e","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","1e538cbd7f572f646f36c73053aea561d95c2cb2","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2e10cb22a8bdb44339e282925a29182bb2f3174d":[]},"heads":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}