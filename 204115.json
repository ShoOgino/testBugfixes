{"path":"solr/core/src/test/org/apache/solr/request/TestStreamBody#testStreamBodyDefaultAndConfigApi().mjava","commits":[{"id":"e2238da841c6da38e6ed909d35da8f4c0ea3147b","date":1499346175,"type":0,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/request/TestStreamBody#testStreamBodyDefaultAndConfigApi().mjava","pathOld":"/dev/null","sourceNew":"  // Tests that stream.body is disabled by default, and can be edited through Config API\n  @Test\n  public void testStreamBodyDefaultAndConfigApi() throws Exception {\n    SolrQuery query = new SolrQuery();\n    query.add(CommonParams.STREAM_BODY,\"<delete><query>*:*</query></delete>\");\n    query.add(\"commit\",\"true\");\n\n    QueryRequest queryRequest = new QueryRequest(query) {\n      @Override\n      public String getPath() { //don't let superclass substitute qt for the path\n        return \"/update\";\n      }\n    };    \n    try {\n      queryRequest.process(getSolrClient());\n      fail();\n    } catch (SolrException se) {\n      assertTrue(se.getMessage(), se.getMessage().contains(\"Stream Body is disabled\"));\n    }\n    enableStreamBody(true);\n    queryRequest.process(getSolrClient());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e73d8d559120669b47658108d818b637df5456ea","date":1499401413,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/request/TestStreamBody#testStreamBodyDefaultAndConfigApi().mjava","pathOld":"/dev/null","sourceNew":"  // Tests that stream.body is disabled by default, and can be edited through Config API\n  @Test\n  public void testStreamBodyDefaultAndConfigApi() throws Exception {\n    SolrQuery query = new SolrQuery();\n    query.add(CommonParams.STREAM_BODY,\"<delete><query>*:*</query></delete>\");\n    query.add(\"commit\",\"true\");\n\n    QueryRequest queryRequest = new QueryRequest(query) {\n      @Override\n      public String getPath() { //don't let superclass substitute qt for the path\n        return \"/update\";\n      }\n    };    \n    try {\n      queryRequest.process(getSolrClient());\n      fail();\n    } catch (SolrException se) {\n      assertTrue(se.getMessage(), se.getMessage().contains(\"Stream Body is disabled\"));\n    }\n    enableStreamBody(true);\n    queryRequest.process(getSolrClient());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1a307447328c95a00248512b40d7a5ff12ecd6a","date":1564817449,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/request/TestStreamBody#testStreamBodyDefaultAndConfigApi().mjava","pathOld":"solr/core/src/test/org/apache/solr/request/TestStreamBody#testStreamBodyDefaultAndConfigApi().mjava","sourceNew":"  // Tests that stream.body is disabled by default, and can be edited through Config API\n  @Test\n  public void testStreamBodyDefaultAndConfigApi() throws Exception {\n    SolrQuery query = new SolrQuery();\n    query.add(CommonParams.STREAM_BODY,\"<delete><query>*:*</query></delete>\");\n    query.add(\"commit\",\"true\");\n\n    QueryRequest queryRequest = new QueryRequest(query) {\n      @Override\n      public String getPath() { //don't let superclass substitute qt for the path\n        return \"/update\";\n      }\n    };\n    SolrException se = expectThrows(SolrException.class, () -> queryRequest.process(getSolrClient()));\n    assertTrue(se.getMessage(), se.getMessage().contains(\"Stream Body is disabled\"));\n    enableStreamBody(true);\n    queryRequest.process(getSolrClient());\n  }\n\n","sourceOld":"  // Tests that stream.body is disabled by default, and can be edited through Config API\n  @Test\n  public void testStreamBodyDefaultAndConfigApi() throws Exception {\n    SolrQuery query = new SolrQuery();\n    query.add(CommonParams.STREAM_BODY,\"<delete><query>*:*</query></delete>\");\n    query.add(\"commit\",\"true\");\n\n    QueryRequest queryRequest = new QueryRequest(query) {\n      @Override\n      public String getPath() { //don't let superclass substitute qt for the path\n        return \"/update\";\n      }\n    };    \n    try {\n      queryRequest.process(getSolrClient());\n      fail();\n    } catch (SolrException se) {\n      assertTrue(se.getMessage(), se.getMessage().contains(\"Stream Body is disabled\"));\n    }\n    enableStreamBody(true);\n    queryRequest.process(getSolrClient());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/request/TestStreamBody#testStreamBodyDefaultAndConfigApi().mjava","pathOld":"solr/core/src/test/org/apache/solr/request/TestStreamBody#testStreamBodyDefaultAndConfigApi().mjava","sourceNew":"  // Tests that stream.body is disabled by default, and can be edited through Config API\n  @Test\n  public void testStreamBodyDefaultAndConfigApi() throws Exception {\n    SolrQuery query = new SolrQuery();\n    query.add(CommonParams.STREAM_BODY,\"<delete><query>*:*</query></delete>\");\n    query.add(\"commit\",\"true\");\n\n    QueryRequest queryRequest = new QueryRequest(query) {\n      @Override\n      public String getPath() { //don't let superclass substitute qt for the path\n        return \"/update\";\n      }\n    };\n    SolrException se = expectThrows(SolrException.class, () -> queryRequest.process(getSolrClient()));\n    assertTrue(se.getMessage(), se.getMessage().contains(\"Stream Body is disabled\"));\n    enableStreamBody(true);\n    queryRequest.process(getSolrClient());\n  }\n\n","sourceOld":"  // Tests that stream.body is disabled by default, and can be edited through Config API\n  @Test\n  public void testStreamBodyDefaultAndConfigApi() throws Exception {\n    SolrQuery query = new SolrQuery();\n    query.add(CommonParams.STREAM_BODY,\"<delete><query>*:*</query></delete>\");\n    query.add(\"commit\",\"true\");\n\n    QueryRequest queryRequest = new QueryRequest(query) {\n      @Override\n      public String getPath() { //don't let superclass substitute qt for the path\n        return \"/update\";\n      }\n    };    \n    try {\n      queryRequest.process(getSolrClient());\n      fail();\n    } catch (SolrException se) {\n      assertTrue(se.getMessage(), se.getMessage().contains(\"Stream Body is disabled\"));\n    }\n    enableStreamBody(true);\n    queryRequest.process(getSolrClient());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","date":1565097295,"type":3,"author":"Jan Høydahl","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/request/TestStreamBody#testStreamBodyDefaultAndConfigApi().mjava","pathOld":"solr/core/src/test/org/apache/solr/request/TestStreamBody#testStreamBodyDefaultAndConfigApi().mjava","sourceNew":"  // Tests that stream.body is disabled by default, and can be edited through Config API\n  @Test\n  public void testStreamBodyDefaultAndConfigApi() throws Exception {\n    SolrQuery query = new SolrQuery();\n    query.add(CommonParams.STREAM_BODY,\"<delete><query>*:*</query></delete>\");\n    query.add(\"commit\",\"true\");\n\n    QueryRequest queryRequest = new QueryRequest(query) {\n      @Override\n      public String getPath() { //don't let superclass substitute qt for the path\n        return \"/update\";\n      }\n    };\n    SolrException se = expectThrows(SolrException.class, () -> queryRequest.process(getSolrClient()));\n    assertTrue(se.getMessage(), se.getMessage().contains(\"Stream Body is disabled\"));\n    enableStreamBody(true);\n    queryRequest.process(getSolrClient());\n  }\n\n","sourceOld":"  // Tests that stream.body is disabled by default, and can be edited through Config API\n  @Test\n  public void testStreamBodyDefaultAndConfigApi() throws Exception {\n    SolrQuery query = new SolrQuery();\n    query.add(CommonParams.STREAM_BODY,\"<delete><query>*:*</query></delete>\");\n    query.add(\"commit\",\"true\");\n\n    QueryRequest queryRequest = new QueryRequest(query) {\n      @Override\n      public String getPath() { //don't let superclass substitute qt for the path\n        return \"/update\";\n      }\n    };    \n    try {\n      queryRequest.process(getSolrClient());\n      fail();\n    } catch (SolrException se) {\n      assertTrue(se.getMessage(), se.getMessage().contains(\"Stream Body is disabled\"));\n    }\n    enableStreamBody(true);\n    queryRequest.process(getSolrClient());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e2238da841c6da38e6ed909d35da8f4c0ea3147b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e73d8d559120669b47658108d818b637df5456ea":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e2238da841c6da38e6ed909d35da8f4c0ea3147b"],"d1a307447328c95a00248512b40d7a5ff12ecd6a":["e2238da841c6da38e6ed909d35da8f4c0ea3147b"],"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693":["e2238da841c6da38e6ed909d35da8f4c0ea3147b","d1a307447328c95a00248512b40d7a5ff12ecd6a"],"f8061ddd97f3352007d927dae445884a6f3d857b":["e2238da841c6da38e6ed909d35da8f4c0ea3147b","d1a307447328c95a00248512b40d7a5ff12ecd6a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d1a307447328c95a00248512b40d7a5ff12ecd6a"]},"commit2Childs":{"e2238da841c6da38e6ed909d35da8f4c0ea3147b":["e73d8d559120669b47658108d818b637df5456ea","d1a307447328c95a00248512b40d7a5ff12ecd6a","d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","f8061ddd97f3352007d927dae445884a6f3d857b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e2238da841c6da38e6ed909d35da8f4c0ea3147b","e73d8d559120669b47658108d818b637df5456ea"],"e73d8d559120669b47658108d818b637df5456ea":[],"d1a307447328c95a00248512b40d7a5ff12ecd6a":["d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693":[],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e73d8d559120669b47658108d818b637df5456ea","d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}