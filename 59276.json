{"path":"src/test/org/apache/lucene/search/QueryUtils#makeEmptyIndex(int).mjava","commits":[{"id":"1ffe619bf5bbe00453bab7103c36fd38c8417f6c","date":1250619947,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/QueryUtils#makeEmptyIndex(int).mjava","pathOld":"/dev/null","sourceNew":"  private static RAMDirectory makeEmptyIndex(final int numDeletedDocs) \n    throws IOException {\n      RAMDirectory d = new RAMDirectory();\n      IndexWriter w = new IndexWriter(d, new WhitespaceAnalyzer(), true,\n                                      MaxFieldLength.LIMITED);\n      for (int i = 0; i < numDeletedDocs; i++) {\n        w.addDocument(new Document());\n      }\n      w.commit();\n      w.deleteDocuments( new MatchAllDocsQuery() );\n      w.commit();\n\n      if (0 < numDeletedDocs)\n        Assert.assertTrue(\"writer has no deletions\", w.hasDeletions());\n\n      Assert.assertEquals(\"writer is missing some deleted docs\", \n                          numDeletedDocs, w.maxDoc());\n      Assert.assertEquals(\"writer has non-deleted docs\", \n                          0, w.numDocs());\n      w.close();\n      IndexReader r = IndexReader.open(d);\n      Assert.assertEquals(\"reader has wrong number of deleted docs\", \n                          numDeletedDocs, r.numDeletedDocs());\n      r.close();\n      return d;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8d1458a2543cbd30cbfe7929be4dcb5c5251659","date":1254582241,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/QueryUtils#makeEmptyIndex(int).mjava","pathOld":"src/test/org/apache/lucene/search/QueryUtils#makeEmptyIndex(int).mjava","sourceNew":"  private static RAMDirectory makeEmptyIndex(final int numDeletedDocs) \n    throws IOException {\n      RAMDirectory d = new RAMDirectory();\n      IndexWriter w = new IndexWriter(d, new WhitespaceAnalyzer(), true,\n                                      MaxFieldLength.LIMITED);\n      for (int i = 0; i < numDeletedDocs; i++) {\n        w.addDocument(new Document());\n      }\n      w.commit();\n      w.deleteDocuments( new MatchAllDocsQuery() );\n      w.commit();\n\n      if (0 < numDeletedDocs)\n        Assert.assertTrue(\"writer has no deletions\", w.hasDeletions());\n\n      Assert.assertEquals(\"writer is missing some deleted docs\", \n                          numDeletedDocs, w.maxDoc());\n      Assert.assertEquals(\"writer has non-deleted docs\", \n                          0, w.numDocs());\n      w.close();\n      IndexReader r = IndexReader.open(d, true);\n      Assert.assertEquals(\"reader has wrong number of deleted docs\", \n                          numDeletedDocs, r.numDeletedDocs());\n      r.close();\n      return d;\n  }\n\n","sourceOld":"  private static RAMDirectory makeEmptyIndex(final int numDeletedDocs) \n    throws IOException {\n      RAMDirectory d = new RAMDirectory();\n      IndexWriter w = new IndexWriter(d, new WhitespaceAnalyzer(), true,\n                                      MaxFieldLength.LIMITED);\n      for (int i = 0; i < numDeletedDocs; i++) {\n        w.addDocument(new Document());\n      }\n      w.commit();\n      w.deleteDocuments( new MatchAllDocsQuery() );\n      w.commit();\n\n      if (0 < numDeletedDocs)\n        Assert.assertTrue(\"writer has no deletions\", w.hasDeletions());\n\n      Assert.assertEquals(\"writer is missing some deleted docs\", \n                          numDeletedDocs, w.maxDoc());\n      Assert.assertEquals(\"writer has non-deleted docs\", \n                          0, w.numDocs());\n      w.close();\n      IndexReader r = IndexReader.open(d);\n      Assert.assertEquals(\"reader has wrong number of deleted docs\", \n                          numDeletedDocs, r.numDeletedDocs());\n      r.close();\n      return d;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a046c0c310bc77931fc8441bd920053b607dd14","date":1254584734,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"src/test/org/apache/lucene/search/QueryUtils#makeEmptyIndex(int).mjava","pathOld":"src/test/org/apache/lucene/search/QueryUtils#makeEmptyIndex(int).mjava","sourceNew":"  private static RAMDirectory makeEmptyIndex(final int numDeletedDocs) \n    throws IOException {\n      RAMDirectory d = new RAMDirectory();\n      IndexWriter w = new IndexWriter(d, new WhitespaceAnalyzer(), true,\n                                      MaxFieldLength.LIMITED);\n      for (int i = 0; i < numDeletedDocs; i++) {\n        w.addDocument(new Document());\n      }\n      w.commit();\n      w.deleteDocuments( new MatchAllDocsQuery() );\n      w.commit();\n\n      if (0 < numDeletedDocs)\n        Assert.assertTrue(\"writer has no deletions\", w.hasDeletions());\n\n      Assert.assertEquals(\"writer is missing some deleted docs\", \n                          numDeletedDocs, w.maxDoc());\n      Assert.assertEquals(\"writer has non-deleted docs\", \n                          0, w.numDocs());\n      w.close();\n      IndexReader r = IndexReader.open(d, true);\n      Assert.assertEquals(\"reader has wrong number of deleted docs\", \n                          numDeletedDocs, r.numDeletedDocs());\n      r.close();\n      return d;\n  }\n\n","sourceOld":"  private static RAMDirectory makeEmptyIndex(final int numDeletedDocs) \n    throws IOException {\n      RAMDirectory d = new RAMDirectory();\n      IndexWriter w = new IndexWriter(d, new WhitespaceAnalyzer(), true,\n                                      MaxFieldLength.LIMITED);\n      for (int i = 0; i < numDeletedDocs; i++) {\n        w.addDocument(new Document());\n      }\n      w.commit();\n      w.deleteDocuments( new MatchAllDocsQuery() );\n      w.commit();\n\n      if (0 < numDeletedDocs)\n        Assert.assertTrue(\"writer has no deletions\", w.hasDeletions());\n\n      Assert.assertEquals(\"writer is missing some deleted docs\", \n                          numDeletedDocs, w.maxDoc());\n      Assert.assertEquals(\"writer has non-deleted docs\", \n                          0, w.numDocs());\n      w.close();\n      IndexReader r = IndexReader.open(d);\n      Assert.assertEquals(\"reader has wrong number of deleted docs\", \n                          numDeletedDocs, r.numDeletedDocs());\n      r.close();\n      return d;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe0932c1d340f83fb0a611e5829b3046a1cc1152","date":1264946739,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/QueryUtils#makeEmptyIndex(int).mjava","pathOld":"src/test/org/apache/lucene/search/QueryUtils#makeEmptyIndex(int).mjava","sourceNew":"  private static RAMDirectory makeEmptyIndex(final int numDeletedDocs) \n    throws IOException {\n      RAMDirectory d = new RAMDirectory();\n      IndexWriter w = new IndexWriter(d, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), true,\n                                      MaxFieldLength.LIMITED);\n      for (int i = 0; i < numDeletedDocs; i++) {\n        w.addDocument(new Document());\n      }\n      w.commit();\n      w.deleteDocuments( new MatchAllDocsQuery() );\n      w.commit();\n\n      if (0 < numDeletedDocs)\n        Assert.assertTrue(\"writer has no deletions\", w.hasDeletions());\n\n      Assert.assertEquals(\"writer is missing some deleted docs\", \n                          numDeletedDocs, w.maxDoc());\n      Assert.assertEquals(\"writer has non-deleted docs\", \n                          0, w.numDocs());\n      w.close();\n      IndexReader r = IndexReader.open(d, true);\n      Assert.assertEquals(\"reader has wrong number of deleted docs\", \n                          numDeletedDocs, r.numDeletedDocs());\n      r.close();\n      return d;\n  }\n\n","sourceOld":"  private static RAMDirectory makeEmptyIndex(final int numDeletedDocs) \n    throws IOException {\n      RAMDirectory d = new RAMDirectory();\n      IndexWriter w = new IndexWriter(d, new WhitespaceAnalyzer(), true,\n                                      MaxFieldLength.LIMITED);\n      for (int i = 0; i < numDeletedDocs; i++) {\n        w.addDocument(new Document());\n      }\n      w.commit();\n      w.deleteDocuments( new MatchAllDocsQuery() );\n      w.commit();\n\n      if (0 < numDeletedDocs)\n        Assert.assertTrue(\"writer has no deletions\", w.hasDeletions());\n\n      Assert.assertEquals(\"writer is missing some deleted docs\", \n                          numDeletedDocs, w.maxDoc());\n      Assert.assertEquals(\"writer has non-deleted docs\", \n                          0, w.numDocs());\n      w.close();\n      IndexReader r = IndexReader.open(d, true);\n      Assert.assertEquals(\"reader has wrong number of deleted docs\", \n                          numDeletedDocs, r.numDeletedDocs());\n      r.close();\n      return d;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/QueryUtils#makeEmptyIndex(int).mjava","pathOld":"src/test/org/apache/lucene/search/QueryUtils#makeEmptyIndex(int).mjava","sourceNew":"  private static RAMDirectory makeEmptyIndex(final int numDeletedDocs) \n    throws IOException {\n      RAMDirectory d = new RAMDirectory();\n      IndexWriter w = new IndexWriter(d, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true,\n                                      MaxFieldLength.LIMITED);\n      for (int i = 0; i < numDeletedDocs; i++) {\n        w.addDocument(new Document());\n      }\n      w.commit();\n      w.deleteDocuments( new MatchAllDocsQuery() );\n      w.commit();\n\n      if (0 < numDeletedDocs)\n        Assert.assertTrue(\"writer has no deletions\", w.hasDeletions());\n\n      Assert.assertEquals(\"writer is missing some deleted docs\", \n                          numDeletedDocs, w.maxDoc());\n      Assert.assertEquals(\"writer has non-deleted docs\", \n                          0, w.numDocs());\n      w.close();\n      IndexReader r = IndexReader.open(d, true);\n      Assert.assertEquals(\"reader has wrong number of deleted docs\", \n                          numDeletedDocs, r.numDeletedDocs());\n      r.close();\n      return d;\n  }\n\n","sourceOld":"  private static RAMDirectory makeEmptyIndex(final int numDeletedDocs) \n    throws IOException {\n      RAMDirectory d = new RAMDirectory();\n      IndexWriter w = new IndexWriter(d, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), true,\n                                      MaxFieldLength.LIMITED);\n      for (int i = 0; i < numDeletedDocs; i++) {\n        w.addDocument(new Document());\n      }\n      w.commit();\n      w.deleteDocuments( new MatchAllDocsQuery() );\n      w.commit();\n\n      if (0 < numDeletedDocs)\n        Assert.assertTrue(\"writer has no deletions\", w.hasDeletions());\n\n      Assert.assertEquals(\"writer is missing some deleted docs\", \n                          numDeletedDocs, w.maxDoc());\n      Assert.assertEquals(\"writer has non-deleted docs\", \n                          0, w.numDocs());\n      w.close();\n      IndexReader r = IndexReader.open(d, true);\n      Assert.assertEquals(\"reader has wrong number of deleted docs\", \n                          numDeletedDocs, r.numDeletedDocs());\n      r.close();\n      return d;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/QueryUtils#makeEmptyIndex(int).mjava","pathOld":"src/test/org/apache/lucene/search/QueryUtils#makeEmptyIndex(int).mjava","sourceNew":"  private static RAMDirectory makeEmptyIndex(final int numDeletedDocs) \n    throws IOException {\n      RAMDirectory d = new RAMDirectory();\n      IndexWriter w = new IndexWriter(d, new IndexWriterConfig(TEST_VERSION_CURRENT));\n      for (int i = 0; i < numDeletedDocs; i++) {\n        w.addDocument(new Document());\n      }\n      w.commit();\n      w.deleteDocuments( new MatchAllDocsQuery() );\n      w.commit();\n\n      if (0 < numDeletedDocs)\n        Assert.assertTrue(\"writer has no deletions\", w.hasDeletions());\n\n      Assert.assertEquals(\"writer is missing some deleted docs\", \n                          numDeletedDocs, w.maxDoc());\n      Assert.assertEquals(\"writer has non-deleted docs\", \n                          0, w.numDocs());\n      w.close();\n      IndexReader r = IndexReader.open(d, true);\n      Assert.assertEquals(\"reader has wrong number of deleted docs\", \n                          numDeletedDocs, r.numDeletedDocs());\n      r.close();\n      return d;\n  }\n\n","sourceOld":"  private static RAMDirectory makeEmptyIndex(final int numDeletedDocs) \n    throws IOException {\n      RAMDirectory d = new RAMDirectory();\n      IndexWriter w = new IndexWriter(d, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true,\n                                      MaxFieldLength.LIMITED);\n      for (int i = 0; i < numDeletedDocs; i++) {\n        w.addDocument(new Document());\n      }\n      w.commit();\n      w.deleteDocuments( new MatchAllDocsQuery() );\n      w.commit();\n\n      if (0 < numDeletedDocs)\n        Assert.assertTrue(\"writer has no deletions\", w.hasDeletions());\n\n      Assert.assertEquals(\"writer is missing some deleted docs\", \n                          numDeletedDocs, w.maxDoc());\n      Assert.assertEquals(\"writer has non-deleted docs\", \n                          0, w.numDocs());\n      w.close();\n      IndexReader r = IndexReader.open(d, true);\n      Assert.assertEquals(\"reader has wrong number of deleted docs\", \n                          numDeletedDocs, r.numDeletedDocs());\n      r.close();\n      return d;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/QueryUtils#makeEmptyIndex(int).mjava","pathOld":"src/test/org/apache/lucene/search/QueryUtils#makeEmptyIndex(int).mjava","sourceNew":"  private static RAMDirectory makeEmptyIndex(final int numDeletedDocs) \n    throws IOException {\n      RAMDirectory d = new RAMDirectory();\n      IndexWriter w = new IndexWriter(d, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true,\n                                      MaxFieldLength.LIMITED);\n      for (int i = 0; i < numDeletedDocs; i++) {\n        w.addDocument(new Document());\n      }\n      w.commit();\n      w.deleteDocuments( new MatchAllDocsQuery() );\n      w.commit();\n\n      if (0 < numDeletedDocs)\n        Assert.assertTrue(\"writer has no deletions\", w.hasDeletions());\n\n      Assert.assertEquals(\"writer is missing some deleted docs\", \n                          numDeletedDocs, w.maxDoc());\n      Assert.assertEquals(\"writer has non-deleted docs\", \n                          0, w.numDocs());\n      w.close();\n      IndexReader r = IndexReader.open(d, true);\n      Assert.assertEquals(\"reader has wrong number of deleted docs\", \n                          numDeletedDocs, r.numDeletedDocs());\n      r.close();\n      return d;\n  }\n\n","sourceOld":"  private static RAMDirectory makeEmptyIndex(final int numDeletedDocs) \n    throws IOException {\n      RAMDirectory d = new RAMDirectory();\n      IndexWriter w = new IndexWriter(d, new IndexWriterConfig(TEST_VERSION_CURRENT));\n      for (int i = 0; i < numDeletedDocs; i++) {\n        w.addDocument(new Document());\n      }\n      w.commit();\n      w.deleteDocuments( new MatchAllDocsQuery() );\n      w.commit();\n\n      if (0 < numDeletedDocs)\n        Assert.assertTrue(\"writer has no deletions\", w.hasDeletions());\n\n      Assert.assertEquals(\"writer is missing some deleted docs\", \n                          numDeletedDocs, w.maxDoc());\n      Assert.assertEquals(\"writer has non-deleted docs\", \n                          0, w.numDocs());\n      w.close();\n      IndexReader r = IndexReader.open(d, true);\n      Assert.assertEquals(\"reader has wrong number of deleted docs\", \n                          numDeletedDocs, r.numDeletedDocs());\n      r.close();\n      return d;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/QueryUtils#makeEmptyIndex(int).mjava","pathOld":"src/test/org/apache/lucene/search/QueryUtils#makeEmptyIndex(int).mjava","sourceNew":"  private static RAMDirectory makeEmptyIndex(final int numDeletedDocs) \n    throws IOException {\n      RAMDirectory d = new RAMDirectory();\n      IndexWriter w = new IndexWriter(d, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n      for (int i = 0; i < numDeletedDocs; i++) {\n        w.addDocument(new Document());\n      }\n      w.commit();\n      w.deleteDocuments( new MatchAllDocsQuery() );\n      w.commit();\n\n      if (0 < numDeletedDocs)\n        Assert.assertTrue(\"writer has no deletions\", w.hasDeletions());\n\n      Assert.assertEquals(\"writer is missing some deleted docs\", \n                          numDeletedDocs, w.maxDoc());\n      Assert.assertEquals(\"writer has non-deleted docs\", \n                          0, w.numDocs());\n      w.close();\n      IndexReader r = IndexReader.open(d, true);\n      Assert.assertEquals(\"reader has wrong number of deleted docs\", \n                          numDeletedDocs, r.numDeletedDocs());\n      r.close();\n      return d;\n  }\n\n","sourceOld":"  private static RAMDirectory makeEmptyIndex(final int numDeletedDocs) \n    throws IOException {\n      RAMDirectory d = new RAMDirectory();\n      IndexWriter w = new IndexWriter(d, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true,\n                                      MaxFieldLength.LIMITED);\n      for (int i = 0; i < numDeletedDocs; i++) {\n        w.addDocument(new Document());\n      }\n      w.commit();\n      w.deleteDocuments( new MatchAllDocsQuery() );\n      w.commit();\n\n      if (0 < numDeletedDocs)\n        Assert.assertTrue(\"writer has no deletions\", w.hasDeletions());\n\n      Assert.assertEquals(\"writer is missing some deleted docs\", \n                          numDeletedDocs, w.maxDoc());\n      Assert.assertEquals(\"writer has non-deleted docs\", \n                          0, w.numDocs());\n      w.close();\n      IndexReader r = IndexReader.open(d, true);\n      Assert.assertEquals(\"reader has wrong number of deleted docs\", \n                          numDeletedDocs, r.numDeletedDocs());\n      r.close();\n      return d;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/QueryUtils#makeEmptyIndex(int).mjava","pathOld":"src/test/org/apache/lucene/search/QueryUtils#makeEmptyIndex(int).mjava","sourceNew":"  private static RAMDirectory makeEmptyIndex(final int numDeletedDocs) \n    throws IOException {\n      RAMDirectory d = new RAMDirectory();\n      IndexWriter w = new IndexWriter(d, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n      for (int i = 0; i < numDeletedDocs; i++) {\n        w.addDocument(new Document());\n      }\n      w.commit();\n      w.deleteDocuments( new MatchAllDocsQuery() );\n      w.commit();\n\n      if (0 < numDeletedDocs)\n        Assert.assertTrue(\"writer has no deletions\", w.hasDeletions());\n\n      Assert.assertEquals(\"writer is missing some deleted docs\", \n                          numDeletedDocs, w.maxDoc());\n      Assert.assertEquals(\"writer has non-deleted docs\", \n                          0, w.numDocs());\n      w.close();\n      IndexReader r = IndexReader.open(d, true);\n      Assert.assertEquals(\"reader has wrong number of deleted docs\", \n                          numDeletedDocs, r.numDeletedDocs());\n      r.close();\n      return d;\n  }\n\n","sourceOld":"  private static RAMDirectory makeEmptyIndex(final int numDeletedDocs) \n    throws IOException {\n      RAMDirectory d = new RAMDirectory();\n      IndexWriter w = new IndexWriter(d, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n      for (int i = 0; i < numDeletedDocs; i++) {\n        w.addDocument(new Document());\n      }\n      w.commit();\n      w.deleteDocuments( new MatchAllDocsQuery() );\n      w.commit();\n\n      if (0 < numDeletedDocs)\n        Assert.assertTrue(\"writer has no deletions\", w.hasDeletions());\n\n      Assert.assertEquals(\"writer is missing some deleted docs\", \n                          numDeletedDocs, w.maxDoc());\n      Assert.assertEquals(\"writer has non-deleted docs\", \n                          0, w.numDocs());\n      w.close();\n      IndexReader r = IndexReader.open(d, true);\n      Assert.assertEquals(\"reader has wrong number of deleted docs\", \n                          numDeletedDocs, r.numDeletedDocs());\n      r.close();\n      return d;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1ffe619bf5bbe00453bab7103c36fd38c8417f6c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["1ffe619bf5bbe00453bab7103c36fd38c8417f6c"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["0a046c0c310bc77931fc8441bd920053b607dd14"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0a046c0c310bc77931fc8441bd920053b607dd14":["1ffe619bf5bbe00453bab7103c36fd38c8417f6c","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"]},"commit2Childs":{"1ffe619bf5bbe00453bab7103c36fd38c8417f6c":["e8d1458a2543cbd30cbfe7929be4dcb5c5251659","0a046c0c310bc77931fc8441bd920053b607dd14"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["0a046c0c310bc77931fc8441bd920053b607dd14"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1ffe619bf5bbe00453bab7103c36fd38c8417f6c"],"0a046c0c310bc77931fc8441bd920053b607dd14":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}