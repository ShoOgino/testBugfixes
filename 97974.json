{"path":"lucene/core/src/java/org/apache/lucene/search/BooleanWeight#matches(LeafReaderContext,int).mjava","commits":[{"id":"657704b225b01c6ff4bada5b6667f1f60aaaad0f","date":1523436207,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanWeight#matches(LeafReaderContext,int).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Matches matches(LeafReaderContext context, int doc) throws IOException {\n    final int minShouldMatch = query.getMinimumNumberShouldMatch();\n    List<Matches> matches = new ArrayList<>();\n    int shouldMatchCount = 0;\n    Iterator<Weight> wIt = weights.iterator();\n    Iterator<BooleanClause> cIt = query.clauses().iterator();\n    while (wIt.hasNext()) {\n      Weight w = wIt.next();\n      BooleanClause bc = cIt.next();\n      Matches m = w.matches(context, doc);\n      if (bc.isProhibited()) {\n        if (m != null) {\n          return null;\n        }\n      }\n      if (bc.isRequired()) {\n        if (m == null) {\n          return null;\n        }\n        matches.add(m);\n      }\n      if (bc.getOccur() == Occur.SHOULD) {\n        if (m != null) {\n          matches.add(m);\n          shouldMatchCount++;\n        }\n      }\n    }\n    if (shouldMatchCount < minShouldMatch) {\n      return null;\n    }\n    return Matches.fromSubMatches(matches);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43345f1452f9510f8aaadae6156fe0c834e7d957","date":1523483670,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanWeight#matches(LeafReaderContext,int).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Matches matches(LeafReaderContext context, int doc) throws IOException {\n    final int minShouldMatch = query.getMinimumNumberShouldMatch();\n    List<Matches> matches = new ArrayList<>();\n    int shouldMatchCount = 0;\n    Iterator<Weight> wIt = weights.iterator();\n    Iterator<BooleanClause> cIt = query.clauses().iterator();\n    while (wIt.hasNext()) {\n      Weight w = wIt.next();\n      BooleanClause bc = cIt.next();\n      Matches m = w.matches(context, doc);\n      if (bc.isProhibited()) {\n        if (m != null) {\n          return null;\n        }\n      }\n      if (bc.isRequired()) {\n        if (m == null) {\n          return null;\n        }\n        matches.add(m);\n      }\n      if (bc.getOccur() == Occur.SHOULD) {\n        if (m != null) {\n          matches.add(m);\n          shouldMatchCount++;\n        }\n      }\n    }\n    if (shouldMatchCount < minShouldMatch) {\n      return null;\n    }\n    return Matches.fromSubMatches(matches);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2375622520a4e480775e3104a2f9a423536755b4","date":1536005521,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanWeight#matches(LeafReaderContext,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanWeight#matches(LeafReaderContext,int).mjava","sourceNew":"  @Override\n  public Matches matches(LeafReaderContext context, int doc) throws IOException {\n    final int minShouldMatch = query.getMinimumNumberShouldMatch();\n    List<Matches> matches = new ArrayList<>();\n    int shouldMatchCount = 0;\n    Iterator<Weight> wIt = weights.iterator();\n    Iterator<BooleanClause> cIt = query.clauses().iterator();\n    while (wIt.hasNext()) {\n      Weight w = wIt.next();\n      BooleanClause bc = cIt.next();\n      Matches m = w.matches(context, doc);\n      if (bc.isProhibited()) {\n        if (m != null) {\n          return null;\n        }\n      }\n      if (bc.isRequired()) {\n        if (m == null) {\n          return null;\n        }\n        matches.add(m);\n      }\n      if (bc.getOccur() == Occur.SHOULD) {\n        if (m != null) {\n          matches.add(m);\n          shouldMatchCount++;\n        }\n      }\n    }\n    if (shouldMatchCount < minShouldMatch) {\n      return null;\n    }\n    return MatchesUtils.fromSubMatches(matches);\n  }\n\n","sourceOld":"  @Override\n  public Matches matches(LeafReaderContext context, int doc) throws IOException {\n    final int minShouldMatch = query.getMinimumNumberShouldMatch();\n    List<Matches> matches = new ArrayList<>();\n    int shouldMatchCount = 0;\n    Iterator<Weight> wIt = weights.iterator();\n    Iterator<BooleanClause> cIt = query.clauses().iterator();\n    while (wIt.hasNext()) {\n      Weight w = wIt.next();\n      BooleanClause bc = cIt.next();\n      Matches m = w.matches(context, doc);\n      if (bc.isProhibited()) {\n        if (m != null) {\n          return null;\n        }\n      }\n      if (bc.isRequired()) {\n        if (m == null) {\n          return null;\n        }\n        matches.add(m);\n      }\n      if (bc.getOccur() == Occur.SHOULD) {\n        if (m != null) {\n          matches.add(m);\n          shouldMatchCount++;\n        }\n      }\n    }\n    if (shouldMatchCount < minShouldMatch) {\n      return null;\n    }\n    return Matches.fromSubMatches(matches);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a13f208db1e7d2e6004f070428b8dc9f533a14c","date":1561708237,"type":3,"author":"Sven Amann","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanWeight#matches(LeafReaderContext,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanWeight#matches(LeafReaderContext,int).mjava","sourceNew":"  @Override\n  public Matches matches(LeafReaderContext context, int doc) throws IOException {\n    final int minShouldMatch = query.getMinimumNumberShouldMatch();\n    List<Matches> matches = new ArrayList<>();\n    int shouldMatchCount = 0;\n    for (WeightedBooleanClause wc : weightedClauses) {\n      Weight w = wc.weight;\n      BooleanClause bc = wc.clause;\n      Matches m = w.matches(context, doc);\n      if (bc.isProhibited()) {\n        if (m != null) {\n          return null;\n        }\n      }\n      if (bc.isRequired()) {\n        if (m == null) {\n          return null;\n        }\n        matches.add(m);\n      }\n      if (bc.getOccur() == Occur.SHOULD) {\n        if (m != null) {\n          matches.add(m);\n          shouldMatchCount++;\n        }\n      }\n    }\n    if (shouldMatchCount < minShouldMatch) {\n      return null;\n    }\n    return MatchesUtils.fromSubMatches(matches);\n  }\n\n","sourceOld":"  @Override\n  public Matches matches(LeafReaderContext context, int doc) throws IOException {\n    final int minShouldMatch = query.getMinimumNumberShouldMatch();\n    List<Matches> matches = new ArrayList<>();\n    int shouldMatchCount = 0;\n    Iterator<Weight> wIt = weights.iterator();\n    Iterator<BooleanClause> cIt = query.clauses().iterator();\n    while (wIt.hasNext()) {\n      Weight w = wIt.next();\n      BooleanClause bc = cIt.next();\n      Matches m = w.matches(context, doc);\n      if (bc.isProhibited()) {\n        if (m != null) {\n          return null;\n        }\n      }\n      if (bc.isRequired()) {\n        if (m == null) {\n          return null;\n        }\n        matches.add(m);\n      }\n      if (bc.getOccur() == Occur.SHOULD) {\n        if (m != null) {\n          matches.add(m);\n          shouldMatchCount++;\n        }\n      }\n    }\n    if (shouldMatchCount < minShouldMatch) {\n      return null;\n    }\n    return MatchesUtils.fromSubMatches(matches);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"657704b225b01c6ff4bada5b6667f1f60aaaad0f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2375622520a4e480775e3104a2f9a423536755b4":["43345f1452f9510f8aaadae6156fe0c834e7d957"],"43345f1452f9510f8aaadae6156fe0c834e7d957":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","657704b225b01c6ff4bada5b6667f1f60aaaad0f"],"3a13f208db1e7d2e6004f070428b8dc9f533a14c":["2375622520a4e480775e3104a2f9a423536755b4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a13f208db1e7d2e6004f070428b8dc9f533a14c"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["657704b225b01c6ff4bada5b6667f1f60aaaad0f","43345f1452f9510f8aaadae6156fe0c834e7d957"],"657704b225b01c6ff4bada5b6667f1f60aaaad0f":["43345f1452f9510f8aaadae6156fe0c834e7d957"],"2375622520a4e480775e3104a2f9a423536755b4":["3a13f208db1e7d2e6004f070428b8dc9f533a14c"],"43345f1452f9510f8aaadae6156fe0c834e7d957":["2375622520a4e480775e3104a2f9a423536755b4"],"3a13f208db1e7d2e6004f070428b8dc9f533a14c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}