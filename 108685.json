{"path":"solr/core/src/java/org/apache/solr/util/stats/MetricUtils#convertTimer(String,Timer,PropertyFilter,boolean,boolean,BiConsumer[String,Object]).mjava","commits":[{"id":"0d6879a535f14bc53be7c86de58142558c4f9eee","date":1492512399,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/stats/MetricUtils#convertTimer(String,Timer,PropertyFilter,boolean,boolean,BiConsumer[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/stats/MetricUtils#convertTimer(String,Timer,boolean,boolean,BiConsumer[String,Object]).mjava","sourceNew":"  /**\n   * Convert a {@link Timer} to a map.\n   * @param name metric name\n   * @param timer timer instance\n   * @param propertyFilter limit what properties of a metric are returned\n   * @param skipHistograms if true then discard the histogram part of the timer.\n   * @param simple use simplified representation for complex metrics - instead of a (name, map)\n   *             only the selected (name \".\" key, value) pairs will be produced.\n   * @param consumer consumer that accepts produced objects\n   */\n  public static void convertTimer(String name, Timer timer, PropertyFilter propertyFilter, boolean skipHistograms,\n                                                boolean simple, BiConsumer<String, Object> consumer) {\n    if (simple) {\n      String prop = \"meanRate\";\n      if (propertyFilter.accept(prop)) {\n        consumer.accept(name + \".\" + prop, timer.getMeanRate());\n      }\n    } else {\n      Map<String, Object> response = new LinkedHashMap<>();\n      BiConsumer<String,Object> filter = (k, v) -> {\n        if (propertyFilter.accept(k)) {\n          response.put(k, v);\n        }\n      };\n      filter.accept(\"count\", timer.getCount());\n      filter.accept(\"meanRate\", timer.getMeanRate());\n      filter.accept(\"1minRate\", timer.getOneMinuteRate());\n      filter.accept(\"5minRate\", timer.getFiveMinuteRate());\n      filter.accept(\"15minRate\", timer.getFifteenMinuteRate());\n      if (!skipHistograms) {\n        // time-based values in nanoseconds\n        addSnapshot(response, timer.getSnapshot(), propertyFilter, true);\n      }\n      if (!response.isEmpty()) {\n        consumer.accept(name, response);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Convert a {@link Timer} to a map.\n   * @param name metric name\n   * @param timer timer instance\n   * @param skipHistograms if true then discard the histogram part of the timer.\n   * @param simple use simplified representation for complex metrics - instead of a (name, map)\n   *             only the selected (name \".\" key, value) pairs will be produced.\n   * @param consumer consumer that accepts produced objects\n   */\n  public static void convertTimer(String name, Timer timer, boolean skipHistograms,\n                                                boolean simple, BiConsumer<String, Object> consumer) {\n    if (simple) {\n      consumer.accept(name + \".meanRate\", timer.getMeanRate());\n    } else {\n      Map<String, Object> response = new LinkedHashMap<>();\n      response.put(\"count\", timer.getCount());\n      response.put(\"meanRate\", timer.getMeanRate());\n      response.put(\"1minRate\", timer.getOneMinuteRate());\n      response.put(\"5minRate\", timer.getFiveMinuteRate());\n      response.put(\"15minRate\", timer.getFifteenMinuteRate());\n      if (!skipHistograms) {\n        // time-based values in nanoseconds\n        addSnapshot(response, timer.getSnapshot(), true);\n      }\n      consumer.accept(name, response);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/stats/MetricUtils#convertTimer(String,Timer,PropertyFilter,boolean,boolean,BiConsumer[String,Object]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Convert a {@link Timer} to a map.\n   * @param name metric name\n   * @param timer timer instance\n   * @param propertyFilter limit what properties of a metric are returned\n   * @param skipHistograms if true then discard the histogram part of the timer.\n   * @param simple use simplified representation for complex metrics - instead of a (name, map)\n   *             only the selected (name \".\" key, value) pairs will be produced.\n   * @param consumer consumer that accepts produced objects\n   */\n  public static void convertTimer(String name, Timer timer, PropertyFilter propertyFilter, boolean skipHistograms,\n                                                boolean simple, BiConsumer<String, Object> consumer) {\n    if (simple) {\n      String prop = \"meanRate\";\n      if (propertyFilter.accept(prop)) {\n        consumer.accept(name + \".\" + prop, timer.getMeanRate());\n      }\n    } else {\n      Map<String, Object> response = new LinkedHashMap<>();\n      BiConsumer<String,Object> filter = (k, v) -> {\n        if (propertyFilter.accept(k)) {\n          response.put(k, v);\n        }\n      };\n      filter.accept(\"count\", timer.getCount());\n      filter.accept(\"meanRate\", timer.getMeanRate());\n      filter.accept(\"1minRate\", timer.getOneMinuteRate());\n      filter.accept(\"5minRate\", timer.getFiveMinuteRate());\n      filter.accept(\"15minRate\", timer.getFifteenMinuteRate());\n      if (!skipHistograms) {\n        // time-based values in nanoseconds\n        addSnapshot(response, timer.getSnapshot(), propertyFilter, true);\n      }\n      if (!response.isEmpty()) {\n        consumer.accept(name, response);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e75e40c2252a5624016ad28ba7e8d3354c4d9c86","date":1502965942,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/stats/MetricUtils#convertTimer(String,Timer,PropertyFilter,boolean,boolean,String,BiConsumer[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/stats/MetricUtils#convertTimer(String,Timer,PropertyFilter,boolean,boolean,BiConsumer[String,Object]).mjava","sourceNew":"  /**\n   * Convert a {@link Timer} to a map.\n   * @param name metric name\n   * @param timer timer instance\n   * @param propertyFilter limit what properties of a metric are returned\n   * @param skipHistograms if true then discard the histogram part of the timer.\n   * @param simple use simplified representation for complex metrics - instead of a (name, map)\n   *             only the selected (name \".\" key, value) pairs will be produced.\n   * @param consumer consumer that accepts produced objects\n   */\n  public static void convertTimer(String name, Timer timer, PropertyFilter propertyFilter, boolean skipHistograms,\n                                                boolean simple, String separator, BiConsumer<String, Object> consumer) {\n    if (simple) {\n      String prop = \"meanRate\";\n      if (propertyFilter.accept(prop)) {\n        consumer.accept(name + separator + prop, timer.getMeanRate());\n      }\n    } else {\n      Map<String, Object> response = new LinkedHashMap<>();\n      BiConsumer<String,Object> filter = (k, v) -> {\n        if (propertyFilter.accept(k)) {\n          response.put(k, v);\n        }\n      };\n      filter.accept(\"count\", timer.getCount());\n      filter.accept(\"meanRate\", timer.getMeanRate());\n      filter.accept(\"1minRate\", timer.getOneMinuteRate());\n      filter.accept(\"5minRate\", timer.getFiveMinuteRate());\n      filter.accept(\"15minRate\", timer.getFifteenMinuteRate());\n      if (!skipHistograms) {\n        // time-based values in nanoseconds\n        addSnapshot(response, timer.getSnapshot(), propertyFilter, true);\n      }\n      if (!response.isEmpty()) {\n        consumer.accept(name, response);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Convert a {@link Timer} to a map.\n   * @param name metric name\n   * @param timer timer instance\n   * @param propertyFilter limit what properties of a metric are returned\n   * @param skipHistograms if true then discard the histogram part of the timer.\n   * @param simple use simplified representation for complex metrics - instead of a (name, map)\n   *             only the selected (name \".\" key, value) pairs will be produced.\n   * @param consumer consumer that accepts produced objects\n   */\n  public static void convertTimer(String name, Timer timer, PropertyFilter propertyFilter, boolean skipHistograms,\n                                                boolean simple, BiConsumer<String, Object> consumer) {\n    if (simple) {\n      String prop = \"meanRate\";\n      if (propertyFilter.accept(prop)) {\n        consumer.accept(name + \".\" + prop, timer.getMeanRate());\n      }\n    } else {\n      Map<String, Object> response = new LinkedHashMap<>();\n      BiConsumer<String,Object> filter = (k, v) -> {\n        if (propertyFilter.accept(k)) {\n          response.put(k, v);\n        }\n      };\n      filter.accept(\"count\", timer.getCount());\n      filter.accept(\"meanRate\", timer.getMeanRate());\n      filter.accept(\"1minRate\", timer.getOneMinuteRate());\n      filter.accept(\"5minRate\", timer.getFiveMinuteRate());\n      filter.accept(\"15minRate\", timer.getFifteenMinuteRate());\n      if (!skipHistograms) {\n        // time-based values in nanoseconds\n        addSnapshot(response, timer.getSnapshot(), propertyFilter, true);\n      }\n      if (!response.isEmpty()) {\n        consumer.accept(name, response);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"68541eebed1904d72a1ab713fc1afcec49e3f466","date":1502966016,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/stats/MetricUtils#convertTimer(String,Timer,PropertyFilter,boolean,boolean,String,BiConsumer[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/stats/MetricUtils#convertTimer(String,Timer,PropertyFilter,boolean,boolean,BiConsumer[String,Object]).mjava","sourceNew":"  /**\n   * Convert a {@link Timer} to a map.\n   * @param name metric name\n   * @param timer timer instance\n   * @param propertyFilter limit what properties of a metric are returned\n   * @param skipHistograms if true then discard the histogram part of the timer.\n   * @param simple use simplified representation for complex metrics - instead of a (name, map)\n   *             only the selected (name \".\" key, value) pairs will be produced.\n   * @param consumer consumer that accepts produced objects\n   */\n  public static void convertTimer(String name, Timer timer, PropertyFilter propertyFilter, boolean skipHistograms,\n                                                boolean simple, String separator, BiConsumer<String, Object> consumer) {\n    if (simple) {\n      String prop = \"meanRate\";\n      if (propertyFilter.accept(prop)) {\n        consumer.accept(name + separator + prop, timer.getMeanRate());\n      }\n    } else {\n      Map<String, Object> response = new LinkedHashMap<>();\n      BiConsumer<String,Object> filter = (k, v) -> {\n        if (propertyFilter.accept(k)) {\n          response.put(k, v);\n        }\n      };\n      filter.accept(\"count\", timer.getCount());\n      filter.accept(\"meanRate\", timer.getMeanRate());\n      filter.accept(\"1minRate\", timer.getOneMinuteRate());\n      filter.accept(\"5minRate\", timer.getFiveMinuteRate());\n      filter.accept(\"15minRate\", timer.getFifteenMinuteRate());\n      if (!skipHistograms) {\n        // time-based values in nanoseconds\n        addSnapshot(response, timer.getSnapshot(), propertyFilter, true);\n      }\n      if (!response.isEmpty()) {\n        consumer.accept(name, response);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Convert a {@link Timer} to a map.\n   * @param name metric name\n   * @param timer timer instance\n   * @param propertyFilter limit what properties of a metric are returned\n   * @param skipHistograms if true then discard the histogram part of the timer.\n   * @param simple use simplified representation for complex metrics - instead of a (name, map)\n   *             only the selected (name \".\" key, value) pairs will be produced.\n   * @param consumer consumer that accepts produced objects\n   */\n  public static void convertTimer(String name, Timer timer, PropertyFilter propertyFilter, boolean skipHistograms,\n                                                boolean simple, BiConsumer<String, Object> consumer) {\n    if (simple) {\n      String prop = \"meanRate\";\n      if (propertyFilter.accept(prop)) {\n        consumer.accept(name + \".\" + prop, timer.getMeanRate());\n      }\n    } else {\n      Map<String, Object> response = new LinkedHashMap<>();\n      BiConsumer<String,Object> filter = (k, v) -> {\n        if (propertyFilter.accept(k)) {\n          response.put(k, v);\n        }\n      };\n      filter.accept(\"count\", timer.getCount());\n      filter.accept(\"meanRate\", timer.getMeanRate());\n      filter.accept(\"1minRate\", timer.getOneMinuteRate());\n      filter.accept(\"5minRate\", timer.getFiveMinuteRate());\n      filter.accept(\"15minRate\", timer.getFifteenMinuteRate());\n      if (!skipHistograms) {\n        // time-based values in nanoseconds\n        addSnapshot(response, timer.getSnapshot(), propertyFilter, true);\n      }\n      if (!response.isEmpty()) {\n        consumer.accept(name, response);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"68541eebed1904d72a1ab713fc1afcec49e3f466":["0d6879a535f14bc53be7c86de58142558c4f9eee"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e75e40c2252a5624016ad28ba7e8d3354c4d9c86":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["68541eebed1904d72a1ab713fc1afcec49e3f466"],"0d6879a535f14bc53be7c86de58142558c4f9eee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["e75e40c2252a5624016ad28ba7e8d3354c4d9c86"],"68541eebed1904d72a1ab713fc1afcec49e3f466":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","0d6879a535f14bc53be7c86de58142558c4f9eee"],"e75e40c2252a5624016ad28ba7e8d3354c4d9c86":[],"0d6879a535f14bc53be7c86de58142558c4f9eee":["68541eebed1904d72a1ab713fc1afcec49e3f466"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e75e40c2252a5624016ad28ba7e8d3354c4d9c86","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}