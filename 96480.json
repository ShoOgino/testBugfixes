{"path":"lucene/backwards/src/java/org/apache/lucene/index/FieldInfo#update(boolean,boolean,boolean,boolean,boolean,boolean,boolean).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/index/FieldInfo#update(boolean,boolean,boolean,boolean,boolean,boolean,boolean).mjava","pathOld":"backwards/src/java/org/apache/lucene/index/FieldInfo#update(boolean,boolean,boolean,boolean,boolean,boolean,boolean).mjava","sourceNew":"  void update(boolean isIndexed, boolean storeTermVector, boolean storePositionWithTermVector, \n              boolean storeOffsetWithTermVector, boolean omitNorms, boolean storePayloads, boolean omitTermFreqAndPositions) {\n    if (this.isIndexed != isIndexed) {\n      this.isIndexed = true;                      // once indexed, always index\n    }\n    if (isIndexed) { // if updated field data is not for indexing, leave the updates out\n      if (this.storeTermVector != storeTermVector) {\n        this.storeTermVector = true;                // once vector, always vector\n      }\n      if (this.storePositionWithTermVector != storePositionWithTermVector) {\n        this.storePositionWithTermVector = true;                // once vector, always vector\n      }\n      if (this.storeOffsetWithTermVector != storeOffsetWithTermVector) {\n        this.storeOffsetWithTermVector = true;                // once vector, always vector\n      }\n      if (this.storePayloads != storePayloads) {\n        this.storePayloads = true;\n      }\n      if (this.omitNorms != omitNorms) {\n        this.omitNorms = false;                // once norms are stored, always store\n      }\n      if (this.omitTermFreqAndPositions != omitTermFreqAndPositions) {\n        this.omitTermFreqAndPositions = true;                // if one require omitTermFreqAndPositions at least once, it remains off for life\n      }\n    }\n  }\n\n","sourceOld":"  void update(boolean isIndexed, boolean storeTermVector, boolean storePositionWithTermVector, \n              boolean storeOffsetWithTermVector, boolean omitNorms, boolean storePayloads, boolean omitTermFreqAndPositions) {\n    if (this.isIndexed != isIndexed) {\n      this.isIndexed = true;                      // once indexed, always index\n    }\n    if (isIndexed) { // if updated field data is not for indexing, leave the updates out\n      if (this.storeTermVector != storeTermVector) {\n        this.storeTermVector = true;                // once vector, always vector\n      }\n      if (this.storePositionWithTermVector != storePositionWithTermVector) {\n        this.storePositionWithTermVector = true;                // once vector, always vector\n      }\n      if (this.storeOffsetWithTermVector != storeOffsetWithTermVector) {\n        this.storeOffsetWithTermVector = true;                // once vector, always vector\n      }\n      if (this.storePayloads != storePayloads) {\n        this.storePayloads = true;\n      }\n      if (this.omitNorms != omitNorms) {\n        this.omitNorms = false;                // once norms are stored, always store\n      }\n      if (this.omitTermFreqAndPositions != omitTermFreqAndPositions) {\n        this.omitTermFreqAndPositions = true;                // if one require omitTermFreqAndPositions at least once, it remains off for life\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/java/org/apache/lucene/index/FieldInfo#update(boolean,boolean,boolean,boolean,boolean,boolean,boolean).mjava","sourceNew":null,"sourceOld":"  void update(boolean isIndexed, boolean storeTermVector, boolean storePositionWithTermVector, \n              boolean storeOffsetWithTermVector, boolean omitNorms, boolean storePayloads, boolean omitTermFreqAndPositions) {\n    if (this.isIndexed != isIndexed) {\n      this.isIndexed = true;                      // once indexed, always index\n    }\n    if (isIndexed) { // if updated field data is not for indexing, leave the updates out\n      if (this.storeTermVector != storeTermVector) {\n        this.storeTermVector = true;                // once vector, always vector\n      }\n      if (this.storePositionWithTermVector != storePositionWithTermVector) {\n        this.storePositionWithTermVector = true;                // once vector, always vector\n      }\n      if (this.storeOffsetWithTermVector != storeOffsetWithTermVector) {\n        this.storeOffsetWithTermVector = true;                // once vector, always vector\n      }\n      if (this.storePayloads != storePayloads) {\n        this.storePayloads = true;\n      }\n      if (this.omitNorms != omitNorms) {\n        this.omitNorms = false;                // once norms are stored, always store\n      }\n      if (this.omitTermFreqAndPositions != omitTermFreqAndPositions) {\n        this.omitTermFreqAndPositions = true;                // if one require omitTermFreqAndPositions at least once, it remains off for life\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}