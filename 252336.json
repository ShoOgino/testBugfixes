{"path":"modules/analysis/common/src/test/org/apache/lucene/analysis/charfilter/TestMappingCharFilter#testFinalOffsetSpecialCase().mjava","commits":[{"id":"238cd960837496985a6271b37fc509cbfe1058a3","date":1334068719,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/charfilter/TestMappingCharFilter#testFinalOffsetSpecialCase().mjava","pathOld":"/dev/null","sourceNew":"  // nocommit: wrong final offset, fix this!\n  public void testFinalOffsetSpecialCase() throws Exception {  \n    final NormalizeCharMap map = new NormalizeCharMap();\n    map.add(\"t\", \"\");\n    // even though this below rule has no effect, the test passes if you remove it!!\n    map.add(\"tmakdbl\", \"c\");\n    \n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }\n\n      @Override\n      protected Reader initReader(Reader reader) {\n        return new MappingCharFilter(map, CharReader.get(reader));\n      }\n    };\n    \n    String text = \"gzw f quaxot\";\n    checkAnalysisConsistency(random, analyzer, false, text);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["56584ae6fa4912e4dd6e818a7da3799cf807234f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"888c2d6bca1edd8d9293631d6e1d188b036e0f05","date":1334076894,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/charfilter/TestMappingCharFilter#testFinalOffsetSpecialCase().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/charfilter/TestMappingCharFilter#testFinalOffsetSpecialCase().mjava","sourceNew":"  // nocommit: wrong final offset, fix this!\n  @Ignore\n  public void testFinalOffsetSpecialCase() throws Exception {  \n    final NormalizeCharMap map = new NormalizeCharMap();\n    map.add(\"t\", \"\");\n    // even though this below rule has no effect, the test passes if you remove it!!\n    map.add(\"tmakdbl\", \"c\");\n    \n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }\n\n      @Override\n      protected Reader initReader(Reader reader) {\n        return new MappingCharFilter(map, CharReader.get(reader));\n      }\n    };\n    \n    String text = \"gzw f quaxot\";\n    checkAnalysisConsistency(random, analyzer, false, text);\n  }\n\n","sourceOld":"  // nocommit: wrong final offset, fix this!\n  public void testFinalOffsetSpecialCase() throws Exception {  \n    final NormalizeCharMap map = new NormalizeCharMap();\n    map.add(\"t\", \"\");\n    // even though this below rule has no effect, the test passes if you remove it!!\n    map.add(\"tmakdbl\", \"c\");\n    \n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }\n\n      @Override\n      protected Reader initReader(Reader reader) {\n        return new MappingCharFilter(map, CharReader.get(reader));\n      }\n    };\n    \n    String text = \"gzw f quaxot\";\n    checkAnalysisConsistency(random, analyzer, false, text);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fb58c6e219d9b9bcb1b4f293dc24b067aa45cd2c","date":1334160067,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/charfilter/TestMappingCharFilter#testFinalOffsetSpecialCase().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/charfilter/TestMappingCharFilter#testFinalOffsetSpecialCase().mjava","sourceNew":"  @Ignore(\"wrong finalOffset: https://issues.apache.org/jira/browse/LUCENE-3971\")\n  public void testFinalOffsetSpecialCase() throws Exception {  \n    final NormalizeCharMap map = new NormalizeCharMap();\n    map.add(\"t\", \"\");\n    // even though this below rule has no effect, the test passes if you remove it!!\n    map.add(\"tmakdbl\", \"c\");\n    \n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }\n\n      @Override\n      protected Reader initReader(Reader reader) {\n        return new MappingCharFilter(map, CharReader.get(reader));\n      }\n    };\n    \n    String text = \"gzw f quaxot\";\n    checkAnalysisConsistency(random, analyzer, false, text);\n  }\n\n","sourceOld":"  // nocommit: wrong final offset, fix this!\n  @Ignore\n  public void testFinalOffsetSpecialCase() throws Exception {  \n    final NormalizeCharMap map = new NormalizeCharMap();\n    map.add(\"t\", \"\");\n    // even though this below rule has no effect, the test passes if you remove it!!\n    map.add(\"tmakdbl\", \"c\");\n    \n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }\n\n      @Override\n      protected Reader initReader(Reader reader) {\n        return new MappingCharFilter(map, CharReader.get(reader));\n      }\n    };\n    \n    String text = \"gzw f quaxot\";\n    checkAnalysisConsistency(random, analyzer, false, text);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad9e3deabce40d9849c1b75ef706bfa79f4f0d1e","date":1334174049,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/charfilter/TestMappingCharFilter#testFinalOffsetSpecialCase().mjava","pathOld":"/dev/null","sourceNew":"  @Ignore(\"wrong finalOffset: https://issues.apache.org/jira/browse/LUCENE-3971\")\n  public void testFinalOffsetSpecialCase() throws Exception {  \n    final NormalizeCharMap map = new NormalizeCharMap();\n    map.add(\"t\", \"\");\n    // even though this below rule has no effect, the test passes if you remove it!!\n    map.add(\"tmakdbl\", \"c\");\n    \n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }\n\n      @Override\n      protected Reader initReader(Reader reader) {\n        return new MappingCharFilter(map, CharReader.get(reader));\n      }\n    };\n    \n    String text = \"gzw f quaxot\";\n    checkAnalysisConsistency(random, analyzer, false, text);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8b686d5876fce6a1ff9e9c1f7366ba00c622cad9","date":1334388762,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/charfilter/TestMappingCharFilter#testFinalOffsetSpecialCase().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/charfilter/TestMappingCharFilter#testFinalOffsetSpecialCase().mjava","sourceNew":"  //@Ignore(\"wrong finalOffset: https://issues.apache.org/jira/browse/LUCENE-3971\")\n  public void testFinalOffsetSpecialCase() throws Exception {  \n    final NormalizeCharMap map = new NormalizeCharMap();\n    map.add(\"t\", \"\");\n    // even though this below rule has no effect, the test passes if you remove it!!\n    map.add(\"tmakdbl\", \"c\");\n    \n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }\n\n      @Override\n      protected Reader initReader(Reader reader) {\n        return new MappingCharFilter(map, CharReader.get(reader));\n      }\n    };\n    \n    String text = \"gzw f quaxot\";\n    checkAnalysisConsistency(random, analyzer, false, text);\n  }\n\n","sourceOld":"  @Ignore(\"wrong finalOffset: https://issues.apache.org/jira/browse/LUCENE-3971\")\n  public void testFinalOffsetSpecialCase() throws Exception {  \n    final NormalizeCharMap map = new NormalizeCharMap();\n    map.add(\"t\", \"\");\n    // even though this below rule has no effect, the test passes if you remove it!!\n    map.add(\"tmakdbl\", \"c\");\n    \n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }\n\n      @Override\n      protected Reader initReader(Reader reader) {\n        return new MappingCharFilter(map, CharReader.get(reader));\n      }\n    };\n    \n    String text = \"gzw f quaxot\";\n    checkAnalysisConsistency(random, analyzer, false, text);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/charfilter/TestMappingCharFilter#testFinalOffsetSpecialCase().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/charfilter/TestMappingCharFilter#testFinalOffsetSpecialCase().mjava","sourceNew":"  //@Ignore(\"wrong finalOffset: https://issues.apache.org/jira/browse/LUCENE-3971\")\n  public void testFinalOffsetSpecialCase() throws Exception {  \n    final NormalizeCharMap map = new NormalizeCharMap();\n    map.add(\"t\", \"\");\n    // even though this below rule has no effect, the test passes if you remove it!!\n    map.add(\"tmakdbl\", \"c\");\n    \n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }\n\n      @Override\n      protected Reader initReader(Reader reader) {\n        return new MappingCharFilter(map, CharReader.get(reader));\n      }\n    };\n    \n    String text = \"gzw f quaxot\";\n    checkAnalysisConsistency(random(), analyzer, false, text);\n  }\n\n","sourceOld":"  //@Ignore(\"wrong finalOffset: https://issues.apache.org/jira/browse/LUCENE-3971\")\n  public void testFinalOffsetSpecialCase() throws Exception {  \n    final NormalizeCharMap map = new NormalizeCharMap();\n    map.add(\"t\", \"\");\n    // even though this below rule has no effect, the test passes if you remove it!!\n    map.add(\"tmakdbl\", \"c\");\n    \n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }\n\n      @Override\n      protected Reader initReader(Reader reader) {\n        return new MappingCharFilter(map, CharReader.get(reader));\n      }\n    };\n    \n    String text = \"gzw f quaxot\";\n    checkAnalysisConsistency(random, analyzer, false, text);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/charfilter/TestMappingCharFilter#testFinalOffsetSpecialCase().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/charfilter/TestMappingCharFilter#testFinalOffsetSpecialCase().mjava","sourceNew":"  //@Ignore(\"wrong finalOffset: https://issues.apache.org/jira/browse/LUCENE-3971\")\n  public void testFinalOffsetSpecialCase() throws Exception {  \n    final NormalizeCharMap map = new NormalizeCharMap();\n    map.add(\"t\", \"\");\n    // even though this below rule has no effect, the test passes if you remove it!!\n    map.add(\"tmakdbl\", \"c\");\n    \n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }\n\n      @Override\n      protected Reader initReader(Reader reader) {\n        return new MappingCharFilter(map, CharReader.get(reader));\n      }\n    };\n    \n    String text = \"gzw f quaxot\";\n    checkAnalysisConsistency(random(), analyzer, false, text);\n  }\n\n","sourceOld":"  //@Ignore(\"wrong finalOffset: https://issues.apache.org/jira/browse/LUCENE-3971\")\n  public void testFinalOffsetSpecialCase() throws Exception {  \n    final NormalizeCharMap map = new NormalizeCharMap();\n    map.add(\"t\", \"\");\n    // even though this below rule has no effect, the test passes if you remove it!!\n    map.add(\"tmakdbl\", \"c\");\n    \n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }\n\n      @Override\n      protected Reader initReader(Reader reader) {\n        return new MappingCharFilter(map, CharReader.get(reader));\n      }\n    };\n    \n    String text = \"gzw f quaxot\";\n    checkAnalysisConsistency(random(), analyzer, false, text);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"888c2d6bca1edd8d9293631d6e1d188b036e0f05":["238cd960837496985a6271b37fc509cbfe1058a3"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"fb58c6e219d9b9bcb1b4f293dc24b067aa45cd2c":["888c2d6bca1edd8d9293631d6e1d188b036e0f05"],"ad9e3deabce40d9849c1b75ef706bfa79f4f0d1e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fb58c6e219d9b9bcb1b4f293dc24b067aa45cd2c"],"8b686d5876fce6a1ff9e9c1f7366ba00c622cad9":["ad9e3deabce40d9849c1b75ef706bfa79f4f0d1e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["8b686d5876fce6a1ff9e9c1f7366ba00c622cad9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"238cd960837496985a6271b37fc509cbfe1058a3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"888c2d6bca1edd8d9293631d6e1d188b036e0f05":["fb58c6e219d9b9bcb1b4f293dc24b067aa45cd2c"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fb58c6e219d9b9bcb1b4f293dc24b067aa45cd2c":["ad9e3deabce40d9849c1b75ef706bfa79f4f0d1e"],"ad9e3deabce40d9849c1b75ef706bfa79f4f0d1e":["8b686d5876fce6a1ff9e9c1f7366ba00c622cad9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ad9e3deabce40d9849c1b75ef706bfa79f4f0d1e","238cd960837496985a6271b37fc509cbfe1058a3"],"8b686d5876fce6a1ff9e9c1f7366ba00c622cad9":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"238cd960837496985a6271b37fc509cbfe1058a3":["888c2d6bca1edd8d9293631d6e1d188b036e0f05"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}