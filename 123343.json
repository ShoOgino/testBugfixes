{"path":"lucene/core/src/java/org/apache/lucene/search/UnionDocsAndPositionsEnum[MultiPhraseQuery]#UnionDocsAndPositionsEnum(Bits,LeafReaderContext,Term[],Map[Term,TermContext],TermsEnum).mjava","commits":[{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":0,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/UnionDocsAndPositionsEnum[MultiPhraseQuery]#UnionDocsAndPositionsEnum(Bits,LeafReaderContext,Term[],Map[Term,TermContext],TermsEnum).mjava","pathOld":"/dev/null","sourceNew":"  public UnionDocsAndPositionsEnum(Bits liveDocs, LeafReaderContext context, Term[] terms, Map<Term,TermContext> termContexts, TermsEnum termsEnum) throws IOException {\n    List<DocsAndPositionsEnum> docsEnums = new LinkedList<>();\n    for (int i = 0; i < terms.length; i++) {\n      final Term term = terms[i];\n      TermState termState = termContexts.get(term).get(context.ord);\n      if (termState == null) {\n        // Term doesn't exist in reader\n        continue;\n      }\n      termsEnum.seekExact(term.bytes(), termState);\n      DocsAndPositionsEnum postings = termsEnum.docsAndPositions(liveDocs, null, DocsEnum.FLAG_NONE);\n      if (postings == null) {\n        // term does exist, but has no positions\n        throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed without position data; cannot run PhraseQuery (term=\" + term.text() + \")\");\n      }\n      cost += postings.cost();\n      docsEnums.add(postings);\n    }\n\n    _queue = new DocsQueue(docsEnums);\n    _posList = new IntQueue();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"51f5280f31484820499077f41fcdfe92d527d9dc","date":1423229122,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/UnionPostingsEnum[MultiPhraseQuery]#UnionPostingsEnum(Bits,LeafReaderContext,Term[],Map[Term,TermContext],TermsEnum).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/UnionDocsAndPositionsEnum[MultiPhraseQuery]#UnionDocsAndPositionsEnum(Bits,LeafReaderContext,Term[],Map[Term,TermContext],TermsEnum).mjava","sourceNew":"  public UnionPostingsEnum(Bits liveDocs, LeafReaderContext context, Term[] terms, Map<Term, TermContext> termContexts, TermsEnum termsEnum) throws IOException {\n    List<PostingsEnum> postingsEnums = new LinkedList<>();\n    for (int i = 0; i < terms.length; i++) {\n      final Term term = terms[i];\n      TermState termState = termContexts.get(term).get(context.ord);\n      if (termState == null) {\n        // Term doesn't exist in reader\n        continue;\n      }\n      termsEnum.seekExact(term.bytes(), termState);\n      PostingsEnum postings = termsEnum.postings(liveDocs, null, PostingsEnum.FLAG_POSITIONS);\n      if (postings == null) {\n        // term does exist, but has no positions\n        throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed without position data; cannot run PhraseQuery (term=\" + term.text() + \")\");\n      }\n      cost += postings.cost();\n      postingsEnums.add(postings);\n    }\n\n    _queue = new DocsQueue(postingsEnums);\n    _posList = new IntQueue();\n  }\n\n","sourceOld":"  public UnionDocsAndPositionsEnum(Bits liveDocs, LeafReaderContext context, Term[] terms, Map<Term,TermContext> termContexts, TermsEnum termsEnum) throws IOException {\n    List<DocsAndPositionsEnum> docsEnums = new LinkedList<>();\n    for (int i = 0; i < terms.length; i++) {\n      final Term term = terms[i];\n      TermState termState = termContexts.get(term).get(context.ord);\n      if (termState == null) {\n        // Term doesn't exist in reader\n        continue;\n      }\n      termsEnum.seekExact(term.bytes(), termState);\n      DocsAndPositionsEnum postings = termsEnum.docsAndPositions(liveDocs, null, DocsEnum.FLAG_NONE);\n      if (postings == null) {\n        // term does exist, but has no positions\n        throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed without position data; cannot run PhraseQuery (term=\" + term.text() + \")\");\n      }\n      cost += postings.cost();\n      docsEnums.add(postings);\n    }\n\n    _queue = new DocsQueue(docsEnums);\n    _posList = new IntQueue();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"51f5280f31484820499077f41fcdfe92d527d9dc":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["51f5280f31484820499077f41fcdfe92d527d9dc"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"51f5280f31484820499077f41fcdfe92d527d9dc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["51f5280f31484820499077f41fcdfe92d527d9dc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}