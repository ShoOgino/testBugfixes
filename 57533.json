{"path":"lucene/src/java/org/apache/lucene/index/MergePolicy#findMergesForOptimize(SegmentInfos,int,Set[SegmentInfo]).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/MergePolicy#findMergesForOptimize(SegmentInfos,int,Set[SegmentInfo]).mjava","pathOld":"src/java/org/apache/lucene/index/MergePolicy#findMergesForOptimize(SegmentInfos,int,Set[SegmentInfo]).mjava","sourceNew":"  /**\n   * Determine what set of merge operations is necessary in order to optimize\n   * the index. {@link IndexWriter} calls this when its\n   * {@link IndexWriter#optimize()} method is called. This call is always\n   * synchronized on the {@link IndexWriter} instance so only one thread at a\n   * time will call this method.\n   * \n   * @param segmentInfos\n   *          the total set of segments in the index\n   * @param maxSegmentCount\n   *          requested maximum number of segments in the index (currently this\n   *          is always 1)\n   * @param segmentsToOptimize\n   *          contains the specific SegmentInfo instances that must be merged\n   *          away. This may be a subset of all SegmentInfos.\n   */\n  public abstract MergeSpecification findMergesForOptimize(\n      SegmentInfos segmentInfos, int maxSegmentCount, Set<SegmentInfo> segmentsToOptimize)\n      throws CorruptIndexException, IOException;\n\n","sourceOld":"  /**\n   * Determine what set of merge operations is necessary in order to optimize\n   * the index. {@link IndexWriter} calls this when its\n   * {@link IndexWriter#optimize()} method is called. This call is always\n   * synchronized on the {@link IndexWriter} instance so only one thread at a\n   * time will call this method.\n   * \n   * @param segmentInfos\n   *          the total set of segments in the index\n   * @param maxSegmentCount\n   *          requested maximum number of segments in the index (currently this\n   *          is always 1)\n   * @param segmentsToOptimize\n   *          contains the specific SegmentInfo instances that must be merged\n   *          away. This may be a subset of all SegmentInfos.\n   */\n  public abstract MergeSpecification findMergesForOptimize(\n      SegmentInfos segmentInfos, int maxSegmentCount, Set<SegmentInfo> segmentsToOptimize)\n      throws CorruptIndexException, IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09b6beb7329eb1b75a38c94b1c5ab4e840743c59","date":1308413204,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/MergePolicy#findMergesForOptimize(SegmentInfos,int,Map[SegmentInfo,Boolean]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/MergePolicy#findMergesForOptimize(SegmentInfos,int,Set[SegmentInfo]).mjava","sourceNew":"  /**\n   * Determine what set of merge operations is necessary in order to optimize\n   * the index. {@link IndexWriter} calls this when its\n   * {@link IndexWriter#optimize()} method is called. This call is always\n   * synchronized on the {@link IndexWriter} instance so only one thread at a\n   * time will call this method.\n   * \n   * @param segmentInfos\n   *          the total set of segments in the index\n   * @param maxSegmentCount\n   *          requested maximum number of segments in the index (currently this\n   *          is always 1)\n   * @param segmentsToOptimize\n   *          contains the specific SegmentInfo instances that must be merged\n   *          away. This may be a subset of all\n   *          SegmentInfos.  If the value is True for a\n   *          given SegmentInfo, that means this segment was\n   *          an original segment present in the\n   *          to-be-optimized index; else, it was a segment\n   *          produced by a cascaded merge.\n   */\n  public abstract MergeSpecification findMergesForOptimize(\n          SegmentInfos segmentInfos, int maxSegmentCount, Map<SegmentInfo,Boolean> segmentsToOptimize)\n      throws CorruptIndexException, IOException;\n\n","sourceOld":"  /**\n   * Determine what set of merge operations is necessary in order to optimize\n   * the index. {@link IndexWriter} calls this when its\n   * {@link IndexWriter#optimize()} method is called. This call is always\n   * synchronized on the {@link IndexWriter} instance so only one thread at a\n   * time will call this method.\n   * \n   * @param segmentInfos\n   *          the total set of segments in the index\n   * @param maxSegmentCount\n   *          requested maximum number of segments in the index (currently this\n   *          is always 1)\n   * @param segmentsToOptimize\n   *          contains the specific SegmentInfo instances that must be merged\n   *          away. This may be a subset of all SegmentInfos.\n   */\n  public abstract MergeSpecification findMergesForOptimize(\n      SegmentInfos segmentInfos, int maxSegmentCount, Set<SegmentInfo> segmentsToOptimize)\n      throws CorruptIndexException, IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d1ded5d4f5b5e3e5f32bff69cd6fe5e64322a886","date":1308439813,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/MergePolicy#findMergesForOptimize(SegmentInfos,int,Map[SegmentInfo,Boolean]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/MergePolicy#findMergesForOptimize(SegmentInfos,int,Set[SegmentInfo]).mjava","sourceNew":"  /**\n   * Determine what set of merge operations is necessary in order to optimize\n   * the index. {@link IndexWriter} calls this when its\n   * {@link IndexWriter#optimize()} method is called. This call is always\n   * synchronized on the {@link IndexWriter} instance so only one thread at a\n   * time will call this method.\n   * \n   * @param segmentInfos\n   *          the total set of segments in the index\n   * @param maxSegmentCount\n   *          requested maximum number of segments in the index (currently this\n   *          is always 1)\n   * @param segmentsToOptimize\n   *          contains the specific SegmentInfo instances that must be merged\n   *          away. This may be a subset of all\n   *          SegmentInfos.  If the value is True for a\n   *          given SegmentInfo, that means this segment was\n   *          an original segment present in the\n   *          to-be-optimized index; else, it was a segment\n   *          produced by a cascaded merge.\n   */\n  public abstract MergeSpecification findMergesForOptimize(\n          SegmentInfos segmentInfos, int maxSegmentCount, Map<SegmentInfo,Boolean> segmentsToOptimize)\n      throws CorruptIndexException, IOException;\n\n","sourceOld":"  /**\n   * Determine what set of merge operations is necessary in order to optimize\n   * the index. {@link IndexWriter} calls this when its\n   * {@link IndexWriter#optimize()} method is called. This call is always\n   * synchronized on the {@link IndexWriter} instance so only one thread at a\n   * time will call this method.\n   * \n   * @param segmentInfos\n   *          the total set of segments in the index\n   * @param maxSegmentCount\n   *          requested maximum number of segments in the index (currently this\n   *          is always 1)\n   * @param segmentsToOptimize\n   *          contains the specific SegmentInfo instances that must be merged\n   *          away. This may be a subset of all SegmentInfos.\n   */\n  public abstract MergeSpecification findMergesForOptimize(\n      SegmentInfos segmentInfos, int maxSegmentCount, Set<SegmentInfo> segmentsToOptimize)\n      throws CorruptIndexException, IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d1ded5d4f5b5e3e5f32bff69cd6fe5e64322a886":["9454a6510e2db155fb01faa5c049b06ece95fab9","09b6beb7329eb1b75a38c94b1c5ab4e840743c59"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["09b6beb7329eb1b75a38c94b1c5ab4e840743c59"],"09b6beb7329eb1b75a38c94b1c5ab4e840743c59":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"d1ded5d4f5b5e3e5f32bff69cd6fe5e64322a886":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["d1ded5d4f5b5e3e5f32bff69cd6fe5e64322a886","09b6beb7329eb1b75a38c94b1c5ab4e840743c59"],"09b6beb7329eb1b75a38c94b1c5ab4e840743c59":["d1ded5d4f5b5e3e5f32bff69cd6fe5e64322a886","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d1ded5d4f5b5e3e5f32bff69cd6fe5e64322a886","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}