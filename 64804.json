{"path":"src/test/org/apache/lucene/store/TestLockFactory#testDisableLocks().mjava","commits":[{"id":"5c6bd70b660528bcf8dd3216ea1f7565ac220a20","date":1156813990,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/lucene/store/TestLockFactory#testDisableLocks().mjava","pathOld":"/dev/null","sourceNew":"    // Verify: setDisableLocks works\n    public void testDisableLocks() throws IOException {\n        String indexDirName = \"index.TestLockFactory4\";\n        \n        assertTrue(\"Locks are already disabled\", !FSDirectory.getDisableLocks());\n        FSDirectory.setDisableLocks(true);\n\n        IndexWriter writer = new IndexWriter(indexDirName, new WhitespaceAnalyzer(), true);\n\n        assertTrue(\"FSDirectory did not use correct default LockFactory: got \" + writer.getDirectory().getLockFactory(),\n                   NoLockFactory.class.isInstance(writer.getDirectory().getLockFactory()));\n\n        // Should be no error since locking is disabled:\n        IndexWriter writer2 = null;\n        try {\n            writer2 = new IndexWriter(indexDirName, new WhitespaceAnalyzer(), false);\n        } catch (IOException e) {\n            fail(\"Should not have hit an IOException with locking disabled\");\n        }\n\n        // Put back to the correct default for subsequent tests:\n        System.setProperty(\"org.apache.lucene.store.FSDirectoryLockFactoryClass\",\n                           \"org.apache.lucene.store.SimpleFSLockFactory\");\n\n        FSDirectory.setDisableLocks(false);\n        writer.close();\n        if (writer2 != null) {\n            writer2.close();\n        }\n        // Cleanup\n        rmDir(indexDirName);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f118a5ec962b5e2658d313e6f4e6f28faa3bcb39","date":1161023282,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/lucene/store/TestLockFactory#testDisableLocks().mjava","pathOld":"src/test/org/apache/lucene/store/TestLockFactory#testDisableLocks().mjava","sourceNew":"    // Verify: setDisableLocks works\n    public void testDisableLocks() throws IOException {\n        String indexDirName = \"index.TestLockFactory4\";\n        \n        assertTrue(\"Locks are already disabled\", !FSDirectory.getDisableLocks());\n        FSDirectory.setDisableLocks(true);\n\n        IndexWriter writer = new IndexWriter(indexDirName, new WhitespaceAnalyzer(), true);\n\n        assertTrue(\"FSDirectory did not use correct default LockFactory: got \" + writer.getDirectory().getLockFactory(),\n                   NoLockFactory.class.isInstance(writer.getDirectory().getLockFactory()));\n\n        // Should be no error since locking is disabled:\n        IndexWriter writer2 = null;\n        try {\n            writer2 = new IndexWriter(indexDirName, new WhitespaceAnalyzer(), false);\n        } catch (IOException e) {\n            fail(\"Should not have hit an IOException with locking disabled\");\n        }\n\n        FSDirectory.setDisableLocks(false);\n        writer.close();\n        if (writer2 != null) {\n            writer2.close();\n        }\n        // Cleanup\n        rmDir(indexDirName);\n    }\n\n","sourceOld":"    // Verify: setDisableLocks works\n    public void testDisableLocks() throws IOException {\n        String indexDirName = \"index.TestLockFactory4\";\n        \n        assertTrue(\"Locks are already disabled\", !FSDirectory.getDisableLocks());\n        FSDirectory.setDisableLocks(true);\n\n        IndexWriter writer = new IndexWriter(indexDirName, new WhitespaceAnalyzer(), true);\n\n        assertTrue(\"FSDirectory did not use correct default LockFactory: got \" + writer.getDirectory().getLockFactory(),\n                   NoLockFactory.class.isInstance(writer.getDirectory().getLockFactory()));\n\n        // Should be no error since locking is disabled:\n        IndexWriter writer2 = null;\n        try {\n            writer2 = new IndexWriter(indexDirName, new WhitespaceAnalyzer(), false);\n        } catch (IOException e) {\n            fail(\"Should not have hit an IOException with locking disabled\");\n        }\n\n        // Put back to the correct default for subsequent tests:\n        System.setProperty(\"org.apache.lucene.store.FSDirectoryLockFactoryClass\",\n                           \"org.apache.lucene.store.SimpleFSLockFactory\");\n\n        FSDirectory.setDisableLocks(false);\n        writer.close();\n        if (writer2 != null) {\n            writer2.close();\n        }\n        // Cleanup\n        rmDir(indexDirName);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"284c1d3c8b19931bf6f312fae7470487f5d9e580","date":1163805527,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/store/TestLockFactory#testDisableLocks().mjava","pathOld":"src/test/org/apache/lucene/store/TestLockFactory#testDisableLocks().mjava","sourceNew":"    // Verify: setDisableLocks works\n    public void testDisableLocks() throws IOException {\n        String indexDirName = \"index.TestLockFactory4\";\n        \n        assertTrue(\"Locks are already disabled\", !FSDirectory.getDisableLocks());\n        FSDirectory.setDisableLocks(true);\n\n        IndexWriter writer = new IndexWriter(indexDirName, new WhitespaceAnalyzer(), true);\n\n        assertTrue(\"FSDirectory did not use correct default LockFactory: got \" + writer.getDirectory().getLockFactory(),\n                   NoLockFactory.class.isInstance(writer.getDirectory().getLockFactory()));\n\n        // Should be no error since locking is disabled:\n        IndexWriter writer2 = null;\n        try {\n            writer2 = new IndexWriter(indexDirName, new WhitespaceAnalyzer(), false);\n        } catch (IOException e) {\n            e.printStackTrace(System.out);\n            fail(\"Should not have hit an IOException with locking disabled\");\n        }\n\n        FSDirectory.setDisableLocks(false);\n        writer.close();\n        if (writer2 != null) {\n            writer2.close();\n        }\n        // Cleanup\n        rmDir(indexDirName);\n    }\n\n","sourceOld":"    // Verify: setDisableLocks works\n    public void testDisableLocks() throws IOException {\n        String indexDirName = \"index.TestLockFactory4\";\n        \n        assertTrue(\"Locks are already disabled\", !FSDirectory.getDisableLocks());\n        FSDirectory.setDisableLocks(true);\n\n        IndexWriter writer = new IndexWriter(indexDirName, new WhitespaceAnalyzer(), true);\n\n        assertTrue(\"FSDirectory did not use correct default LockFactory: got \" + writer.getDirectory().getLockFactory(),\n                   NoLockFactory.class.isInstance(writer.getDirectory().getLockFactory()));\n\n        // Should be no error since locking is disabled:\n        IndexWriter writer2 = null;\n        try {\n            writer2 = new IndexWriter(indexDirName, new WhitespaceAnalyzer(), false);\n        } catch (IOException e) {\n            fail(\"Should not have hit an IOException with locking disabled\");\n        }\n\n        FSDirectory.setDisableLocks(false);\n        writer.close();\n        if (writer2 != null) {\n            writer2.close();\n        }\n        // Cleanup\n        rmDir(indexDirName);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"235efcba838a273934c5dd0ef66bb07c7fb0d718","date":1201256475,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/store/TestLockFactory#testDisableLocks().mjava","pathOld":"src/test/org/apache/lucene/store/TestLockFactory#testDisableLocks().mjava","sourceNew":"    // Verify: setDisableLocks works\n    public void testDisableLocks() throws IOException {\n        String indexDirName = \"index.TestLockFactory4\";\n        \n        assertTrue(\"Locks are already disabled\", !FSDirectory.getDisableLocks());\n        FSDirectory.setDisableLocks(true);\n\n        IndexWriter writer = new IndexWriter(indexDirName, new WhitespaceAnalyzer(), true,\n                                             IndexWriter.MaxFieldLength.LIMITED);\n\n        assertTrue(\"FSDirectory did not use correct default LockFactory: got \" + writer.getDirectory().getLockFactory(),\n                   NoLockFactory.class.isInstance(writer.getDirectory().getLockFactory()));\n\n        // Should be no error since locking is disabled:\n        IndexWriter writer2 = null;\n        try {\n            writer2 = new IndexWriter(indexDirName, new WhitespaceAnalyzer(), false,\n                                      IndexWriter.MaxFieldLength.LIMITED);\n        } catch (IOException e) {\n            e.printStackTrace(System.out);\n            fail(\"Should not have hit an IOException with locking disabled\");\n        }\n\n        FSDirectory.setDisableLocks(false);\n        writer.close();\n        if (writer2 != null) {\n            writer2.close();\n        }\n        // Cleanup\n        rmDir(indexDirName);\n    }\n\n","sourceOld":"    // Verify: setDisableLocks works\n    public void testDisableLocks() throws IOException {\n        String indexDirName = \"index.TestLockFactory4\";\n        \n        assertTrue(\"Locks are already disabled\", !FSDirectory.getDisableLocks());\n        FSDirectory.setDisableLocks(true);\n\n        IndexWriter writer = new IndexWriter(indexDirName, new WhitespaceAnalyzer(), true);\n\n        assertTrue(\"FSDirectory did not use correct default LockFactory: got \" + writer.getDirectory().getLockFactory(),\n                   NoLockFactory.class.isInstance(writer.getDirectory().getLockFactory()));\n\n        // Should be no error since locking is disabled:\n        IndexWriter writer2 = null;\n        try {\n            writer2 = new IndexWriter(indexDirName, new WhitespaceAnalyzer(), false);\n        } catch (IOException e) {\n            e.printStackTrace(System.out);\n            fail(\"Should not have hit an IOException with locking disabled\");\n        }\n\n        FSDirectory.setDisableLocks(false);\n        writer.close();\n        if (writer2 != null) {\n            writer2.close();\n        }\n        // Cleanup\n        rmDir(indexDirName);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8f7faff7550034759516ce7f4898cd16c1816cde","date":1245778901,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/store/TestLockFactory#testDisableLocks().mjava","pathOld":"src/test/org/apache/lucene/store/TestLockFactory#testDisableLocks().mjava","sourceNew":"    // Verify: setDisableLocks works\n    public void testDisableLocks() throws IOException {\n        File indexDirName = _TestUtil.getTempDir(\"index.TestLockFactory4\");\n        \n        assertTrue(\"Locks are already disabled\", !FSDirectory.getDisableLocks());\n        FSDirectory.setDisableLocks(true);\n\n        IndexWriter writer = new IndexWriter(indexDirName, new WhitespaceAnalyzer(), true,\n                                             IndexWriter.MaxFieldLength.LIMITED);\n\n        assertTrue(\"FSDirectory did not use correct default LockFactory: got \" + writer.getDirectory().getLockFactory(),\n                   NoLockFactory.class.isInstance(writer.getDirectory().getLockFactory()));\n\n        // Should be no error since locking is disabled:\n        IndexWriter writer2 = null;\n        try {\n            writer2 = new IndexWriter(indexDirName, new WhitespaceAnalyzer(), false,\n                                      IndexWriter.MaxFieldLength.LIMITED);\n        } catch (IOException e) {\n            e.printStackTrace(System.out);\n            fail(\"Should not have hit an IOException with locking disabled\");\n        }\n\n        FSDirectory.setDisableLocks(false);\n        writer.close();\n        if (writer2 != null) {\n            writer2.close();\n        }\n        // Cleanup\n        _TestUtil.rmDir(indexDirName);\n    }\n\n","sourceOld":"    // Verify: setDisableLocks works\n    public void testDisableLocks() throws IOException {\n        String indexDirName = \"index.TestLockFactory4\";\n        \n        assertTrue(\"Locks are already disabled\", !FSDirectory.getDisableLocks());\n        FSDirectory.setDisableLocks(true);\n\n        IndexWriter writer = new IndexWriter(indexDirName, new WhitespaceAnalyzer(), true,\n                                             IndexWriter.MaxFieldLength.LIMITED);\n\n        assertTrue(\"FSDirectory did not use correct default LockFactory: got \" + writer.getDirectory().getLockFactory(),\n                   NoLockFactory.class.isInstance(writer.getDirectory().getLockFactory()));\n\n        // Should be no error since locking is disabled:\n        IndexWriter writer2 = null;\n        try {\n            writer2 = new IndexWriter(indexDirName, new WhitespaceAnalyzer(), false,\n                                      IndexWriter.MaxFieldLength.LIMITED);\n        } catch (IOException e) {\n            e.printStackTrace(System.out);\n            fail(\"Should not have hit an IOException with locking disabled\");\n        }\n\n        FSDirectory.setDisableLocks(false);\n        writer.close();\n        if (writer2 != null) {\n            writer2.close();\n        }\n        // Cleanup\n        rmDir(indexDirName);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8ebf3b77e5581d3b403ec1799f461a9b46fc6bf8","date":1254593002,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"src/test/org/apache/lucene/store/TestLockFactory#testDisableLocks().mjava","sourceNew":null,"sourceOld":"    // Verify: setDisableLocks works\n    public void testDisableLocks() throws IOException {\n        File indexDirName = _TestUtil.getTempDir(\"index.TestLockFactory4\");\n        \n        assertTrue(\"Locks are already disabled\", !FSDirectory.getDisableLocks());\n        FSDirectory.setDisableLocks(true);\n\n        IndexWriter writer = new IndexWriter(indexDirName, new WhitespaceAnalyzer(), true,\n                                             IndexWriter.MaxFieldLength.LIMITED);\n\n        assertTrue(\"FSDirectory did not use correct default LockFactory: got \" + writer.getDirectory().getLockFactory(),\n                   NoLockFactory.class.isInstance(writer.getDirectory().getLockFactory()));\n\n        // Should be no error since locking is disabled:\n        IndexWriter writer2 = null;\n        try {\n            writer2 = new IndexWriter(indexDirName, new WhitespaceAnalyzer(), false,\n                                      IndexWriter.MaxFieldLength.LIMITED);\n        } catch (IOException e) {\n            e.printStackTrace(System.out);\n            fail(\"Should not have hit an IOException with locking disabled\");\n        }\n\n        FSDirectory.setDisableLocks(false);\n        writer.close();\n        if (writer2 != null) {\n            writer2.close();\n        }\n        // Cleanup\n        _TestUtil.rmDir(indexDirName);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5c6bd70b660528bcf8dd3216ea1f7565ac220a20":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"235efcba838a273934c5dd0ef66bb07c7fb0d718":["284c1d3c8b19931bf6f312fae7470487f5d9e580"],"284c1d3c8b19931bf6f312fae7470487f5d9e580":["f118a5ec962b5e2658d313e6f4e6f28faa3bcb39"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8ebf3b77e5581d3b403ec1799f461a9b46fc6bf8":["8f7faff7550034759516ce7f4898cd16c1816cde"],"f118a5ec962b5e2658d313e6f4e6f28faa3bcb39":["5c6bd70b660528bcf8dd3216ea1f7565ac220a20"],"8f7faff7550034759516ce7f4898cd16c1816cde":["235efcba838a273934c5dd0ef66bb07c7fb0d718"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8ebf3b77e5581d3b403ec1799f461a9b46fc6bf8"]},"commit2Childs":{"5c6bd70b660528bcf8dd3216ea1f7565ac220a20":["f118a5ec962b5e2658d313e6f4e6f28faa3bcb39"],"235efcba838a273934c5dd0ef66bb07c7fb0d718":["8f7faff7550034759516ce7f4898cd16c1816cde"],"284c1d3c8b19931bf6f312fae7470487f5d9e580":["235efcba838a273934c5dd0ef66bb07c7fb0d718"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5c6bd70b660528bcf8dd3216ea1f7565ac220a20"],"f118a5ec962b5e2658d313e6f4e6f28faa3bcb39":["284c1d3c8b19931bf6f312fae7470487f5d9e580"],"8ebf3b77e5581d3b403ec1799f461a9b46fc6bf8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8f7faff7550034759516ce7f4898cd16c1816cde":["8ebf3b77e5581d3b403ec1799f461a9b46fc6bf8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}