{"path":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl#getDocTermOrds(AtomicReader,String).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl#getDocTermOrds(AtomicReader,String).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FieldCacheImpl#getDocTermOrds(AtomicReader,String).mjava","sourceNew":"  public DocTermOrds getDocTermOrds(AtomicReader reader, String field) throws IOException {\n    return (DocTermOrds) caches.get(DocTermOrds.class).get(reader, new Entry(field, null), false);\n  }\n\n","sourceOld":"  public DocTermOrds getDocTermOrds(AtomicReader reader, String field) throws IOException {\n    return (DocTermOrds) caches.get(DocTermOrds.class).get(reader, new Entry(field, null), false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a4d374b2bebd0d52acaa61038fbf23068620fba7","date":1353240004,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl#getDocTermOrds(AtomicReader,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl#getDocTermOrds(AtomicReader,String).mjava","sourceNew":"  public DocTermOrds getDocTermOrds(AtomicReader reader, String field) throws IOException {\n    return (DocTermOrds) caches.get(DocTermOrds.class).get(reader, new CacheKey(field, null), false);\n  }\n\n","sourceOld":"  public DocTermOrds getDocTermOrds(AtomicReader reader, String field) throws IOException {\n    return (DocTermOrds) caches.get(DocTermOrds.class).get(reader, new Entry(field, null), false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl#getDocTermOrds(AtomicReader,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl#getDocTermOrds(AtomicReader,String).mjava","sourceNew":"  @Override\n  public DocTermOrds getDocTermOrds(AtomicReader reader, String field) throws IOException {\n    return (DocTermOrds) caches.get(DocTermOrds.class).get(reader, new Entry(field, null), false);\n  }\n\n","sourceOld":"  public DocTermOrds getDocTermOrds(AtomicReader reader, String field) throws IOException {\n    return (DocTermOrds) caches.get(DocTermOrds.class).get(reader, new Entry(field, null), false);\n  }\n\n","bugFix":null,"bugIntro":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl#getDocTermOrds(AtomicReader,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl#getDocTermOrds(AtomicReader,String).mjava","sourceNew":"  public DocTermOrds getDocTermOrds(AtomicReader reader, String field) throws IOException {\n    return (DocTermOrds) caches.get(DocTermOrds.class).get(reader, new CacheKey(field, null), false);\n  }\n\n","sourceOld":"  @Override\n  public DocTermOrds getDocTermOrds(AtomicReader reader, String field) throws IOException {\n    return (DocTermOrds) caches.get(DocTermOrds.class).get(reader, new Entry(field, null), false);\n  }\n\n","bugFix":["7530de27b87b961b51f01bd1299b7004d46e8823","da6d5ac19a80d65b1e864251f155d30960353b7e"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f438915b81b54f1fdff40443da8c4fb15c61c777","date":1360597404,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl#getDocTermOrds(AtomicReader,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl#getDocTermOrds(AtomicReader,String).mjava","sourceNew":"  public SortedSetDocValues getDocTermOrds(AtomicReader reader, String field) throws IOException {\n    SortedSetDocValues dv = reader.getSortedSetDocValues(field);\n    if (dv != null) {\n      return dv;\n    }\n    \n    // nocommit: actually if they have a SortedDV (either indexed as DV or cached), we should return an impl\n    // over that: its like a specialized single-value case of this thing...\n    \n    DocTermOrds dto = (DocTermOrds) caches.get(DocTermOrds.class).get(reader, new CacheKey(field, null), false);\n    return dto.iterator(dto.getOrdTermsEnum(reader));\n  }\n\n","sourceOld":"  public DocTermOrds getDocTermOrds(AtomicReader reader, String field) throws IOException {\n    return (DocTermOrds) caches.get(DocTermOrds.class).get(reader, new CacheKey(field, null), false);\n  }\n\n","bugFix":null,"bugIntro":["240cffb5a9df98261aab509ee8fd2a252bccf157"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3e4a9d2228b1d0367ab23ab19e1b1af63b83c70d","date":1360736371,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl#getDocTermOrds(AtomicReader,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl#getDocTermOrds(AtomicReader,String).mjava","sourceNew":"  // TODO: this if DocTermsIndex was already created, we\n  // should share it...\n  public SortedSetDocValues getDocTermOrds(AtomicReader reader, String field) throws IOException {\n    SortedSetDocValues dv = reader.getSortedSetDocValues(field);\n    if (dv != null) {\n      return dv;\n    }\n    \n    SortedDocValues sdv = reader.getSortedDocValues(field);\n    if (sdv != null) {\n      return new SingletonSortedSetDocValues(sdv);\n    }\n    \n    DocTermOrds dto = (DocTermOrds) caches.get(DocTermOrds.class).get(reader, new CacheKey(field, null), false);\n    return dto.iterator(dto.getOrdTermsEnum(reader));\n  }\n\n","sourceOld":"  public SortedSetDocValues getDocTermOrds(AtomicReader reader, String field) throws IOException {\n    SortedSetDocValues dv = reader.getSortedSetDocValues(field);\n    if (dv != null) {\n      return dv;\n    }\n    \n    // nocommit: actually if they have a SortedDV (either indexed as DV or cached), we should return an impl\n    // over that: its like a specialized single-value case of this thing...\n    \n    DocTermOrds dto = (DocTermOrds) caches.get(DocTermOrds.class).get(reader, new CacheKey(field, null), false);\n    return dto.iterator(dto.getOrdTermsEnum(reader));\n  }\n\n","bugFix":null,"bugIntro":["8429ddf2214f2bf8abcbb5484fefef6aaf5c417e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fd4c0978a282e44867032b4d99f280a07fa16321","date":1360738062,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl#getDocTermOrds(AtomicReader,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl#getDocTermOrds(AtomicReader,String).mjava","sourceNew":"  // TODO: this if DocTermsIndex was already created, we\n  // should share it...\n  public SortedSetDocValues getDocTermOrds(AtomicReader reader, String field) throws IOException {\n    SortedSetDocValues dv = reader.getSortedSetDocValues(field);\n    if (dv != null) {\n      return dv;\n    }\n    \n    SortedDocValues sdv = reader.getSortedDocValues(field);\n    if (sdv != null) {\n      return new SingletonSortedSetDocValues(sdv);\n    }\n    \n    final FieldInfo info = reader.getFieldInfos().fieldInfo(field);\n    if (info != null && info.hasDocValues()) {\n      throw new IllegalStateException(\"Type mismatch: \" + field + \" was indexed as \" + info.getDocValuesType());\n    }\n    \n    DocTermOrds dto = (DocTermOrds) caches.get(DocTermOrds.class).get(reader, new CacheKey(field, null), false);\n    return dto.iterator(dto.getOrdTermsEnum(reader));\n  }\n\n","sourceOld":"  // TODO: this if DocTermsIndex was already created, we\n  // should share it...\n  public SortedSetDocValues getDocTermOrds(AtomicReader reader, String field) throws IOException {\n    SortedSetDocValues dv = reader.getSortedSetDocValues(field);\n    if (dv != null) {\n      return dv;\n    }\n    \n    SortedDocValues sdv = reader.getSortedDocValues(field);\n    if (sdv != null) {\n      return new SingletonSortedSetDocValues(sdv);\n    }\n    \n    DocTermOrds dto = (DocTermOrds) caches.get(DocTermOrds.class).get(reader, new CacheKey(field, null), false);\n    return dto.iterator(dto.getOrdTermsEnum(reader));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb11e4a63ba3891117b5988c50a7a927c27b3656","date":1360788410,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl#getDocTermOrds(AtomicReader,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl#getDocTermOrds(AtomicReader,String).mjava","sourceNew":"  // TODO: this if DocTermsIndex was already created, we\n  // should share it...\n  public SortedSetDocValues getDocTermOrds(AtomicReader reader, String field) throws IOException {\n    SortedSetDocValues dv = reader.getSortedSetDocValues(field);\n    if (dv != null) {\n      return dv;\n    }\n    \n    SortedDocValues sdv = reader.getSortedDocValues(field);\n    if (sdv != null) {\n      return new SingletonSortedSetDocValues(sdv);\n    }\n    \n    final FieldInfo info = reader.getFieldInfos().fieldInfo(field);\n    if (info == null) {\n      return SortedSetDocValues.EMPTY;\n    } else if (info.hasDocValues()) {\n      throw new IllegalStateException(\"Type mismatch: \" + field + \" was indexed as \" + info.getDocValuesType());\n    } else if (!info.isIndexed()) {\n      return SortedSetDocValues.EMPTY;\n    }\n    \n    DocTermOrds dto = (DocTermOrds) caches.get(DocTermOrds.class).get(reader, new CacheKey(field, null), false);\n    return dto.iterator(dto.getOrdTermsEnum(reader));\n  }\n\n","sourceOld":"  // TODO: this if DocTermsIndex was already created, we\n  // should share it...\n  public SortedSetDocValues getDocTermOrds(AtomicReader reader, String field) throws IOException {\n    SortedSetDocValues dv = reader.getSortedSetDocValues(field);\n    if (dv != null) {\n      return dv;\n    }\n    \n    SortedDocValues sdv = reader.getSortedDocValues(field);\n    if (sdv != null) {\n      return new SingletonSortedSetDocValues(sdv);\n    }\n    \n    final FieldInfo info = reader.getFieldInfos().fieldInfo(field);\n    if (info != null && info.hasDocValues()) {\n      throw new IllegalStateException(\"Type mismatch: \" + field + \" was indexed as \" + info.getDocValuesType());\n    }\n    \n    DocTermOrds dto = (DocTermOrds) caches.get(DocTermOrds.class).get(reader, new CacheKey(field, null), false);\n    return dto.iterator(dto.getOrdTermsEnum(reader));\n  }\n\n","bugFix":null,"bugIntro":["8429ddf2214f2bf8abcbb5484fefef6aaf5c417e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ddbb72a33557d2b5bc22ee95daf3281c43560502","date":1361334582,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl#getDocTermOrds(AtomicReader,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl#getDocTermOrds(AtomicReader,String).mjava","sourceNew":"  // TODO: this if DocTermsIndex was already created, we\n  // should share it...\n  public SortedSetDocValues getDocTermOrds(AtomicReader reader, String field) throws IOException {\n    SortedSetDocValues dv = reader.getSortedSetDocValues(field);\n    if (dv != null) {\n      return dv;\n    }\n    \n    SortedDocValues sdv = reader.getSortedDocValues(field);\n    if (sdv != null) {\n      return new SingletonSortedSetDocValues(sdv);\n    }\n    \n    final FieldInfo info = reader.getFieldInfos().fieldInfo(field);\n    if (info == null) {\n      return SortedSetDocValues.EMPTY;\n    } else if (info.hasDocValues()) {\n      throw new IllegalStateException(\"Type mismatch: \" + field + \" was indexed as \" + info.getDocValuesType());\n    } else if (!info.isIndexed()) {\n      return SortedSetDocValues.EMPTY;\n    }\n    \n    DocTermOrds dto = (DocTermOrds) caches.get(DocTermOrds.class).get(reader, new CacheKey(field, null), false);\n    return dto.iterator(dto.getOrdTermsEnum(reader));\n  }\n\n","sourceOld":"  public DocTermOrds getDocTermOrds(AtomicReader reader, String field) throws IOException {\n    return (DocTermOrds) caches.get(DocTermOrds.class).get(reader, new CacheKey(field, null), false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"240cffb5a9df98261aab509ee8fd2a252bccf157","date":1363702876,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl#getDocTermOrds(AtomicReader,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl#getDocTermOrds(AtomicReader,String).mjava","sourceNew":"  // TODO: this if DocTermsIndex was already created, we\n  // should share it...\n  public SortedSetDocValues getDocTermOrds(AtomicReader reader, String field) throws IOException {\n    SortedSetDocValues dv = reader.getSortedSetDocValues(field);\n    if (dv != null) {\n      return dv;\n    }\n    \n    SortedDocValues sdv = reader.getSortedDocValues(field);\n    if (sdv != null) {\n      return new SingletonSortedSetDocValues(sdv);\n    }\n    \n    final FieldInfo info = reader.getFieldInfos().fieldInfo(field);\n    if (info == null) {\n      return SortedSetDocValues.EMPTY;\n    } else if (info.hasDocValues()) {\n      throw new IllegalStateException(\"Type mismatch: \" + field + \" was indexed as \" + info.getDocValuesType());\n    } else if (!info.isIndexed()) {\n      return SortedSetDocValues.EMPTY;\n    }\n    \n    DocTermOrds dto = (DocTermOrds) caches.get(DocTermOrds.class).get(reader, new CacheKey(field, null), false);\n    return dto.iterator(reader);\n  }\n\n","sourceOld":"  // TODO: this if DocTermsIndex was already created, we\n  // should share it...\n  public SortedSetDocValues getDocTermOrds(AtomicReader reader, String field) throws IOException {\n    SortedSetDocValues dv = reader.getSortedSetDocValues(field);\n    if (dv != null) {\n      return dv;\n    }\n    \n    SortedDocValues sdv = reader.getSortedDocValues(field);\n    if (sdv != null) {\n      return new SingletonSortedSetDocValues(sdv);\n    }\n    \n    final FieldInfo info = reader.getFieldInfos().fieldInfo(field);\n    if (info == null) {\n      return SortedSetDocValues.EMPTY;\n    } else if (info.hasDocValues()) {\n      throw new IllegalStateException(\"Type mismatch: \" + field + \" was indexed as \" + info.getDocValuesType());\n    } else if (!info.isIndexed()) {\n      return SortedSetDocValues.EMPTY;\n    }\n    \n    DocTermOrds dto = (DocTermOrds) caches.get(DocTermOrds.class).get(reader, new CacheKey(field, null), false);\n    return dto.iterator(dto.getOrdTermsEnum(reader));\n  }\n\n","bugFix":["f438915b81b54f1fdff40443da8c4fb15c61c777"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8429ddf2214f2bf8abcbb5484fefef6aaf5c417e","date":1397206443,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl#getDocTermOrds(AtomicReader,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl#getDocTermOrds(AtomicReader,String).mjava","sourceNew":"  // TODO: this if DocTermsIndex was already created, we\n  // should share it...\n  public SortedSetDocValues getDocTermOrds(AtomicReader reader, String field) throws IOException {\n    SortedSetDocValues dv = reader.getSortedSetDocValues(field);\n    if (dv != null) {\n      return dv;\n    }\n    \n    SortedDocValues sdv = reader.getSortedDocValues(field);\n    if (sdv != null) {\n      return DocValues.singleton(sdv);\n    }\n    \n    final FieldInfo info = reader.getFieldInfos().fieldInfo(field);\n    if (info == null) {\n      return DocValues.EMPTY_SORTED_SET;\n    } else if (info.hasDocValues()) {\n      throw new IllegalStateException(\"Type mismatch: \" + field + \" was indexed as \" + info.getDocValuesType());\n    } else if (!info.isIndexed()) {\n      return DocValues.EMPTY_SORTED_SET;\n    }\n    \n    DocTermOrds dto = (DocTermOrds) caches.get(DocTermOrds.class).get(reader, new CacheKey(field, null), false);\n    return dto.iterator(reader);\n  }\n\n","sourceOld":"  // TODO: this if DocTermsIndex was already created, we\n  // should share it...\n  public SortedSetDocValues getDocTermOrds(AtomicReader reader, String field) throws IOException {\n    SortedSetDocValues dv = reader.getSortedSetDocValues(field);\n    if (dv != null) {\n      return dv;\n    }\n    \n    SortedDocValues sdv = reader.getSortedDocValues(field);\n    if (sdv != null) {\n      return new SingletonSortedSetDocValues(sdv);\n    }\n    \n    final FieldInfo info = reader.getFieldInfos().fieldInfo(field);\n    if (info == null) {\n      return SortedSetDocValues.EMPTY;\n    } else if (info.hasDocValues()) {\n      throw new IllegalStateException(\"Type mismatch: \" + field + \" was indexed as \" + info.getDocValuesType());\n    } else if (!info.isIndexed()) {\n      return SortedSetDocValues.EMPTY;\n    }\n    \n    DocTermOrds dto = (DocTermOrds) caches.get(DocTermOrds.class).get(reader, new CacheKey(field, null), false);\n    return dto.iterator(reader);\n  }\n\n","bugFix":["bb11e4a63ba3891117b5988c50a7a927c27b3656","3e4a9d2228b1d0367ab23ab19e1b1af63b83c70d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","date":1399816179,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/uninverting/FieldCacheImpl#getDocTermOrds(AtomicReader,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl#getDocTermOrds(AtomicReader,String).mjava","sourceNew":"  // TODO: this if DocTermsIndex was already created, we\n  // should share it...\n  public SortedSetDocValues getDocTermOrds(AtomicReader reader, String field) throws IOException {\n    SortedSetDocValues dv = reader.getSortedSetDocValues(field);\n    if (dv != null) {\n      return dv;\n    }\n    \n    SortedDocValues sdv = reader.getSortedDocValues(field);\n    if (sdv != null) {\n      return DocValues.singleton(sdv);\n    }\n    \n    final FieldInfo info = reader.getFieldInfos().fieldInfo(field);\n    if (info == null) {\n      return DocValues.EMPTY_SORTED_SET;\n    } else if (info.hasDocValues()) {\n      throw new IllegalStateException(\"Type mismatch: \" + field + \" was indexed as \" + info.getDocValuesType());\n    } else if (!info.isIndexed()) {\n      return DocValues.EMPTY_SORTED_SET;\n    }\n    \n    DocTermOrds dto = (DocTermOrds) caches.get(DocTermOrds.class).get(reader, new CacheKey(field, null), false);\n    return dto.iterator(reader);\n  }\n\n","sourceOld":"  // TODO: this if DocTermsIndex was already created, we\n  // should share it...\n  public SortedSetDocValues getDocTermOrds(AtomicReader reader, String field) throws IOException {\n    SortedSetDocValues dv = reader.getSortedSetDocValues(field);\n    if (dv != null) {\n      return dv;\n    }\n    \n    SortedDocValues sdv = reader.getSortedDocValues(field);\n    if (sdv != null) {\n      return DocValues.singleton(sdv);\n    }\n    \n    final FieldInfo info = reader.getFieldInfos().fieldInfo(field);\n    if (info == null) {\n      return DocValues.EMPTY_SORTED_SET;\n    } else if (info.hasDocValues()) {\n      throw new IllegalStateException(\"Type mismatch: \" + field + \" was indexed as \" + info.getDocValuesType());\n    } else if (!info.isIndexed()) {\n      return DocValues.EMPTY_SORTED_SET;\n    }\n    \n    DocTermOrds dto = (DocTermOrds) caches.get(DocTermOrds.class).get(reader, new CacheKey(field, null), false);\n    return dto.iterator(reader);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93dd449115a9247533e44bab47e8429e5dccbc6d","date":1400258396,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/misc/src/java/org/apache/lucene/uninverting/FieldCacheImpl#getDocTermOrds(AtomicReader,String,BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl#getDocTermOrds(AtomicReader,String).mjava","sourceNew":"  // TODO: this if DocTermsIndex was already created, we\n  // should share it...\n  public SortedSetDocValues getDocTermOrds(AtomicReader reader, String field, BytesRef prefix) throws IOException {\n    // not a general purpose filtering mechanism...\n    assert prefix == null || prefix == INT32_TERM_PREFIX || prefix == INT64_TERM_PREFIX;\n    \n    SortedSetDocValues dv = reader.getSortedSetDocValues(field);\n    if (dv != null) {\n      return dv;\n    }\n    \n    SortedDocValues sdv = reader.getSortedDocValues(field);\n    if (sdv != null) {\n      return DocValues.singleton(sdv);\n    }\n    \n    final FieldInfo info = reader.getFieldInfos().fieldInfo(field);\n    if (info == null) {\n      return DocValues.EMPTY_SORTED_SET;\n    } else if (info.hasDocValues()) {\n      throw new IllegalStateException(\"Type mismatch: \" + field + \" was indexed as \" + info.getDocValuesType());\n    } else if (!info.isIndexed()) {\n      return DocValues.EMPTY_SORTED_SET;\n    }\n    \n    // ok we need to uninvert. check if we can optimize a bit.\n    \n    Terms terms = reader.terms(field);\n    if (terms == null) {\n      return DocValues.EMPTY_SORTED_SET;\n    } else {\n      // if #postings = #docswithfield we know that the field is \"single valued enough\".\n      // its possible the same term might appear twice in the same document, but SORTED_SET discards frequency.\n      // its still ok with filtering (which we limit to numerics), it just means precisionStep = Inf\n      long numPostings = terms.getSumDocFreq();\n      if (numPostings != -1 && numPostings == terms.getDocCount()) {\n        return DocValues.singleton(getTermsIndex(reader, field));\n      }\n    }\n    \n    DocTermOrds dto = (DocTermOrds) caches.get(DocTermOrds.class).get(reader, new CacheKey(field, prefix), false);\n    return dto.iterator(reader);\n  }\n\n","sourceOld":"  // TODO: this if DocTermsIndex was already created, we\n  // should share it...\n  public SortedSetDocValues getDocTermOrds(AtomicReader reader, String field) throws IOException {\n    SortedSetDocValues dv = reader.getSortedSetDocValues(field);\n    if (dv != null) {\n      return dv;\n    }\n    \n    SortedDocValues sdv = reader.getSortedDocValues(field);\n    if (sdv != null) {\n      return DocValues.singleton(sdv);\n    }\n    \n    final FieldInfo info = reader.getFieldInfos().fieldInfo(field);\n    if (info == null) {\n      return DocValues.EMPTY_SORTED_SET;\n    } else if (info.hasDocValues()) {\n      throw new IllegalStateException(\"Type mismatch: \" + field + \" was indexed as \" + info.getDocValuesType());\n    } else if (!info.isIndexed()) {\n      return DocValues.EMPTY_SORTED_SET;\n    }\n    \n    DocTermOrds dto = (DocTermOrds) caches.get(DocTermOrds.class).get(reader, new CacheKey(field, null), false);\n    return dto.iterator(reader);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56572ec06f1407c066d6b7399413178b33176cd8","date":1400495675,"type":5,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/misc/src/java/org/apache/lucene/uninverting/FieldCacheImpl#getDocTermOrds(AtomicReader,String,BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl#getDocTermOrds(AtomicReader,String).mjava","sourceNew":"  // TODO: this if DocTermsIndex was already created, we\n  // should share it...\n  public SortedSetDocValues getDocTermOrds(AtomicReader reader, String field, BytesRef prefix) throws IOException {\n    // not a general purpose filtering mechanism...\n    assert prefix == null || prefix == INT32_TERM_PREFIX || prefix == INT64_TERM_PREFIX;\n    \n    SortedSetDocValues dv = reader.getSortedSetDocValues(field);\n    if (dv != null) {\n      return dv;\n    }\n    \n    SortedDocValues sdv = reader.getSortedDocValues(field);\n    if (sdv != null) {\n      return DocValues.singleton(sdv);\n    }\n    \n    final FieldInfo info = reader.getFieldInfos().fieldInfo(field);\n    if (info == null) {\n      return DocValues.EMPTY_SORTED_SET;\n    } else if (info.hasDocValues()) {\n      throw new IllegalStateException(\"Type mismatch: \" + field + \" was indexed as \" + info.getDocValuesType());\n    } else if (!info.isIndexed()) {\n      return DocValues.EMPTY_SORTED_SET;\n    }\n    \n    // ok we need to uninvert. check if we can optimize a bit.\n    \n    Terms terms = reader.terms(field);\n    if (terms == null) {\n      return DocValues.EMPTY_SORTED_SET;\n    } else {\n      // if #postings = #docswithfield we know that the field is \"single valued enough\".\n      // its possible the same term might appear twice in the same document, but SORTED_SET discards frequency.\n      // its still ok with filtering (which we limit to numerics), it just means precisionStep = Inf\n      long numPostings = terms.getSumDocFreq();\n      if (numPostings != -1 && numPostings == terms.getDocCount()) {\n        return DocValues.singleton(getTermsIndex(reader, field));\n      }\n    }\n    \n    DocTermOrds dto = (DocTermOrds) caches.get(DocTermOrds.class).get(reader, new CacheKey(field, prefix), false);\n    return dto.iterator(reader);\n  }\n\n","sourceOld":"  // TODO: this if DocTermsIndex was already created, we\n  // should share it...\n  public SortedSetDocValues getDocTermOrds(AtomicReader reader, String field) throws IOException {\n    SortedSetDocValues dv = reader.getSortedSetDocValues(field);\n    if (dv != null) {\n      return dv;\n    }\n    \n    SortedDocValues sdv = reader.getSortedDocValues(field);\n    if (sdv != null) {\n      return DocValues.singleton(sdv);\n    }\n    \n    final FieldInfo info = reader.getFieldInfos().fieldInfo(field);\n    if (info == null) {\n      return DocValues.EMPTY_SORTED_SET;\n    } else if (info.hasDocValues()) {\n      throw new IllegalStateException(\"Type mismatch: \" + field + \" was indexed as \" + info.getDocValuesType());\n    } else if (!info.isIndexed()) {\n      return DocValues.EMPTY_SORTED_SET;\n    }\n    \n    DocTermOrds dto = (DocTermOrds) caches.get(DocTermOrds.class).get(reader, new CacheKey(field, null), false);\n    return dto.iterator(reader);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f438915b81b54f1fdff40443da8c4fb15c61c777":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["8429ddf2214f2bf8abcbb5484fefef6aaf5c417e"],"a4d374b2bebd0d52acaa61038fbf23068620fba7":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"ddbb72a33557d2b5bc22ee95daf3281c43560502":["d4d69c535930b5cce125cff868d40f6373dc27d4","bb11e4a63ba3891117b5988c50a7a927c27b3656"],"56572ec06f1407c066d6b7399413178b33176cd8":["8429ddf2214f2bf8abcbb5484fefef6aaf5c417e","93dd449115a9247533e44bab47e8429e5dccbc6d"],"8429ddf2214f2bf8abcbb5484fefef6aaf5c417e":["240cffb5a9df98261aab509ee8fd2a252bccf157"],"3e4a9d2228b1d0367ab23ab19e1b1af63b83c70d":["f438915b81b54f1fdff40443da8c4fb15c61c777"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["7530de27b87b961b51f01bd1299b7004d46e8823","a4d374b2bebd0d52acaa61038fbf23068620fba7"],"bb11e4a63ba3891117b5988c50a7a927c27b3656":["fd4c0978a282e44867032b4d99f280a07fa16321"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["8429ddf2214f2bf8abcbb5484fefef6aaf5c417e","b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"240cffb5a9df98261aab509ee8fd2a252bccf157":["ddbb72a33557d2b5bc22ee95daf3281c43560502"],"fd4c0978a282e44867032b4d99f280a07fa16321":["3e4a9d2228b1d0367ab23ab19e1b1af63b83c70d"],"7530de27b87b961b51f01bd1299b7004d46e8823":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["93dd449115a9247533e44bab47e8429e5dccbc6d"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a4d374b2bebd0d52acaa61038fbf23068620fba7","7530de27b87b961b51f01bd1299b7004d46e8823"],"f438915b81b54f1fdff40443da8c4fb15c61c777":["3e4a9d2228b1d0367ab23ab19e1b1af63b83c70d"],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"a4d374b2bebd0d52acaa61038fbf23068620fba7":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"ddbb72a33557d2b5bc22ee95daf3281c43560502":["240cffb5a9df98261aab509ee8fd2a252bccf157"],"56572ec06f1407c066d6b7399413178b33176cd8":[],"8429ddf2214f2bf8abcbb5484fefef6aaf5c417e":["b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","56572ec06f1407c066d6b7399413178b33176cd8","93dd449115a9247533e44bab47e8429e5dccbc6d"],"3e4a9d2228b1d0367ab23ab19e1b1af63b83c70d":["fd4c0978a282e44867032b4d99f280a07fa16321"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["f438915b81b54f1fdff40443da8c4fb15c61c777","ddbb72a33557d2b5bc22ee95daf3281c43560502"],"bb11e4a63ba3891117b5988c50a7a927c27b3656":["ddbb72a33557d2b5bc22ee95daf3281c43560502"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["56572ec06f1407c066d6b7399413178b33176cd8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"240cffb5a9df98261aab509ee8fd2a252bccf157":["8429ddf2214f2bf8abcbb5484fefef6aaf5c417e"],"fd4c0978a282e44867032b4d99f280a07fa16321":["bb11e4a63ba3891117b5988c50a7a927c27b3656"],"7530de27b87b961b51f01bd1299b7004d46e8823":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["56572ec06f1407c066d6b7399413178b33176cd8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}