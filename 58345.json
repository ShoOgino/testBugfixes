{"path":"lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/dict/ConnectionCosts#ConnectionCosts(BinaryDictionary.ResourceScheme,String).mjava","commits":[{"id":"c0b14f16b545ec357d824d7dd34040f8b0460284","date":1568213150,"type":0,"author":"Michael Sokolov","isMerge":false,"pathNew":"lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/dict/ConnectionCosts#ConnectionCosts(BinaryDictionary.ResourceScheme,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * @param scheme - scheme for loading resources (FILE or CLASSPATH).\n   * @param path - where to load resources from, without the \".dat\" suffix\n   */\n  public ConnectionCosts(BinaryDictionary.ResourceScheme scheme, String path) throws IOException {\n    InputStream is = null;\n    short[][] costs = null;\n    boolean success = false;\n    try {\n      is = BinaryDictionary.getResource(scheme, path.replace('.', '/') + FILENAME_SUFFIX);\n      is = new BufferedInputStream(is);\n      final DataInput in = new InputStreamDataInput(is);\n      CodecUtil.checkHeader(in, HEADER, VERSION, VERSION);\n      int forwardSize = in.readVInt();\n      int backwardSize = in.readVInt();\n      costs = new short[backwardSize][forwardSize];\n      int accum = 0;\n      for (int j = 0; j < costs.length; j++) {\n        final short[] a = costs[j];\n        for (int i = 0; i < a.length; i++) {\n          accum += in.readZInt();\n          a[i] = (short)accum;\n        }\n      }\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(is);\n      } else {\n        IOUtils.closeWhileHandlingException(is);\n      }\n    }\n    \n    this.costs = costs;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5acb8730dbbbb0f88bb8db80769aa6e9b29d817b","date":1583461779,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/dict/ConnectionCosts#ConnectionCosts(BinaryDictionary.ResourceScheme,String).mjava","pathOld":"lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/dict/ConnectionCosts#ConnectionCosts(BinaryDictionary.ResourceScheme,String).mjava","sourceNew":"  /**\n   * @param scheme - scheme for loading resources (FILE or CLASSPATH).\n   * @param path - where to load resources from, without the \".dat\" suffix\n   */\n  public ConnectionCosts(BinaryDictionary.ResourceScheme scheme, String path) throws IOException {\n    InputStream is = null;\n    boolean success = false;\n    try {\n      is = BinaryDictionary.getResource(scheme, path.replace('.', '/') + FILENAME_SUFFIX);\n      is = new BufferedInputStream(is);\n      final DataInput in = new InputStreamDataInput(is);\n      CodecUtil.checkHeader(in, HEADER, VERSION, VERSION);\n      forwardSize = in.readVInt();\n      int backwardSize = in.readVInt();\n      int size = forwardSize * backwardSize;\n\n      // copy the matrix into a direct byte buffer\n      final ByteBuffer tmpBuffer = ByteBuffer.allocateDirect(size*2);\n      int accum = 0;\n      for (int j = 0; j < backwardSize; j++) {\n        for (int i = 0; i < forwardSize; i++) {\n          accum += in.readZInt();\n          tmpBuffer.putShort((short) accum);\n        }\n      }\n      buffer = tmpBuffer.asReadOnlyBuffer();\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(is);\n      } else {\n        IOUtils.closeWhileHandlingException(is);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * @param scheme - scheme for loading resources (FILE or CLASSPATH).\n   * @param path - where to load resources from, without the \".dat\" suffix\n   */\n  public ConnectionCosts(BinaryDictionary.ResourceScheme scheme, String path) throws IOException {\n    InputStream is = null;\n    short[][] costs = null;\n    boolean success = false;\n    try {\n      is = BinaryDictionary.getResource(scheme, path.replace('.', '/') + FILENAME_SUFFIX);\n      is = new BufferedInputStream(is);\n      final DataInput in = new InputStreamDataInput(is);\n      CodecUtil.checkHeader(in, HEADER, VERSION, VERSION);\n      int forwardSize = in.readVInt();\n      int backwardSize = in.readVInt();\n      costs = new short[backwardSize][forwardSize];\n      int accum = 0;\n      for (int j = 0; j < costs.length; j++) {\n        final short[] a = costs[j];\n        for (int i = 0; i < a.length; i++) {\n          accum += in.readZInt();\n          a[i] = (short)accum;\n        }\n      }\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(is);\n      } else {\n        IOUtils.closeWhileHandlingException(is);\n      }\n    }\n    \n    this.costs = costs;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c0b14f16b545ec357d824d7dd34040f8b0460284":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5acb8730dbbbb0f88bb8db80769aa6e9b29d817b":["c0b14f16b545ec357d824d7dd34040f8b0460284"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5acb8730dbbbb0f88bb8db80769aa6e9b29d817b"]},"commit2Childs":{"c0b14f16b545ec357d824d7dd34040f8b0460284":["5acb8730dbbbb0f88bb8db80769aa6e9b29d817b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c0b14f16b545ec357d824d7dd34040f8b0460284"],"5acb8730dbbbb0f88bb8db80769aa6e9b29d817b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}