{"path":"src/java/org/apache/solr/analysis/ReversedWildcardFilterFactory#shouldReverse(String).mjava","commits":[{"id":"f66fbc07ecf3707c1ec81e35ca9e4df7ff22101a","date":1252677016,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/solr/analysis/ReversedWildcardFilterFactory#shouldReverse(String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * This method encapsulates the logic that determines whether\n   * a query token should be reversed in order to use the\n   * reversed terms in the index.\n   * @param token input token.\n   * @return true if input token should be reversed, false otherwise.\n   */\n  public boolean shouldReverse(String token) {\n    int posQ = token.indexOf('?');\n    int posA = token.indexOf('*');\n    if (posQ == -1 && posA == -1) { // not a wildcard query\n      return false;\n    }\n    int pos;\n    int lastPos;\n    int len = token.length();\n    lastPos = token.lastIndexOf('?');\n    pos = token.lastIndexOf('*');\n    if (pos > lastPos) lastPos = pos;\n    if (posQ != -1) {\n      pos = posQ;\n      if (posA != -1) {\n        pos = Math.min(posQ, posA);\n      }\n    } else {\n      pos = posA;\n    }\n    if (len - lastPos < minTrailing)  { // too few trailing chars\n      return false;\n    }\n    if (posQ != -1 && posQ < maxPosQuestion) {  // leading '?'\n      return true;\n    }\n    if (posA != -1 && posA < maxPosAsterisk) { // leading '*'\n      return true;\n    }\n    // '*' in the leading part\n    if (maxFractionAsterisk > 0.0f && pos < (float)token.length() * maxFractionAsterisk) {\n      return true;\n    }\n    return false;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/analysis/ReversedWildcardFilterFactory#shouldReverse(String).mjava","pathOld":"src/java/org/apache/solr/analysis/ReversedWildcardFilterFactory#shouldReverse(String).mjava","sourceNew":"  /**\n   * This method encapsulates the logic that determines whether\n   * a query token should be reversed in order to use the\n   * reversed terms in the index.\n   * @param token input token.\n   * @return true if input token should be reversed, false otherwise.\n   */\n  public boolean shouldReverse(String token) {\n    int posQ = token.indexOf('?');\n    int posA = token.indexOf('*');\n    if (posQ == -1 && posA == -1) { // not a wildcard query\n      return false;\n    }\n    int pos;\n    int lastPos;\n    int len = token.length();\n    lastPos = token.lastIndexOf('?');\n    pos = token.lastIndexOf('*');\n    if (pos > lastPos) lastPos = pos;\n    if (posQ != -1) {\n      pos = posQ;\n      if (posA != -1) {\n        pos = Math.min(posQ, posA);\n      }\n    } else {\n      pos = posA;\n    }\n    if (len - lastPos < minTrailing)  { // too few trailing chars\n      return false;\n    }\n    if (posQ != -1 && posQ < maxPosQuestion) {  // leading '?'\n      return true;\n    }\n    if (posA != -1 && posA < maxPosAsterisk) { // leading '*'\n      return true;\n    }\n    // '*' in the leading part\n    if (maxFractionAsterisk > 0.0f && pos < (float)token.length() * maxFractionAsterisk) {\n      return true;\n    }\n    return false;\n  }\n\n","sourceOld":"  /**\n   * This method encapsulates the logic that determines whether\n   * a query token should be reversed in order to use the\n   * reversed terms in the index.\n   * @param token input token.\n   * @return true if input token should be reversed, false otherwise.\n   */\n  public boolean shouldReverse(String token) {\n    int posQ = token.indexOf('?');\n    int posA = token.indexOf('*');\n    if (posQ == -1 && posA == -1) { // not a wildcard query\n      return false;\n    }\n    int pos;\n    int lastPos;\n    int len = token.length();\n    lastPos = token.lastIndexOf('?');\n    pos = token.lastIndexOf('*');\n    if (pos > lastPos) lastPos = pos;\n    if (posQ != -1) {\n      pos = posQ;\n      if (posA != -1) {\n        pos = Math.min(posQ, posA);\n      }\n    } else {\n      pos = posA;\n    }\n    if (len - lastPos < minTrailing)  { // too few trailing chars\n      return false;\n    }\n    if (posQ != -1 && posQ < maxPosQuestion) {  // leading '?'\n      return true;\n    }\n    if (posA != -1 && posA < maxPosAsterisk) { // leading '*'\n      return true;\n    }\n    // '*' in the leading part\n    if (maxFractionAsterisk > 0.0f && pos < (float)token.length() * maxFractionAsterisk) {\n      return true;\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"f66fbc07ecf3707c1ec81e35ca9e4df7ff22101a":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"ad94625fb8d088209f46650c8097196fec67f00c":["f66fbc07ecf3707c1ec81e35ca9e4df7ff22101a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["f66fbc07ecf3707c1ec81e35ca9e4df7ff22101a"],"f66fbc07ecf3707c1ec81e35ca9e4df7ff22101a":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}