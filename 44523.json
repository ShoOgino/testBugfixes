{"path":"src/test/org/apache/lucene/analysis/TestStopFilter#testStopPositons().mjava","commits":[{"id":"693d6573b6621fc1265316fc6b042c24235c81d8","date":1199049557,"type":0,"author":"Doron Cohen","isMerge":false,"pathNew":"src/test/org/apache/lucene/analysis/TestStopFilter#testStopPositons().mjava","pathOld":"/dev/null","sourceNew":"  /**\r\n   * Test Position increments applied by StopFilter with and without enabling this option.\r\n   */\r\n  public void testStopPositons() throws IOException {\r\n    StringBuffer sb = new StringBuffer();\r\n    ArrayList a = new ArrayList();\r\n    for (int i=0; i<20; i++) {\r\n      String w = English.intToEnglish(i).trim();\r\n      sb.append(w).append(\" \");\r\n      if (i%3 != 0) a.add(w);\r\n    }\r\n    log(sb.toString());\r\n    String stopWords[] = (String[]) a.toArray(new String[0]);\r\n    for (int i=0; i<a.size(); i++) log(\"Stop: \"+stopWords[i]);\r\n    Set stopSet = StopFilter.makeStopSet(stopWords);\r\n    // with increments\r\n    StringReader reader = new StringReader(sb.toString());\r\n    StopFilter stpf = new StopFilter(new WhitespaceTokenizer(reader), stopSet);\r\n    doTestStopPositons(stpf,true);\r\n    // without increments\r\n    reader = new StringReader(sb.toString());\r\n    stpf = new StopFilter(new WhitespaceTokenizer(reader), stopSet);\r\n    doTestStopPositons(stpf,false);\r\n    // with increments, concatenating two stop filters\r\n    ArrayList a0 = new ArrayList();\r\n    ArrayList a1 = new ArrayList();\r\n    for (int i=0; i<a.size(); i++) {\r\n      if (i%2==0) { \r\n        a0.add(a.get(i));\r\n      } else {\r\n        a1.add(a.get(i));\r\n      }\r\n    }\r\n    String stopWords0[] = (String[]) a0.toArray(new String[0]);\r\n    for (int i=0; i<a0.size(); i++) log(\"Stop0: \"+stopWords0[i]);\r\n    String stopWords1[] = (String[]) a1.toArray(new String[0]);\r\n    for (int i=0; i<a1.size(); i++) log(\"Stop1: \"+stopWords1[i]);\r\n    Set stopSet0 = StopFilter.makeStopSet(stopWords0);\r\n    Set stopSet1 = StopFilter.makeStopSet(stopWords1);\r\n    reader = new StringReader(sb.toString());\r\n    StopFilter stpf0 = new StopFilter(new WhitespaceTokenizer(reader), stopSet0); // first part of the set\r\n    stpf0.setEnablePositionIncrements(true);\r\n    StopFilter stpf01 = new StopFilter(stpf0, stopSet1); // two stop filters concatenated!\r\n    doTestStopPositons(stpf01,true);\r\n  }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2123bddbd65dea198cac380540636ce43a880403","date":1211269254,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/analysis/TestStopFilter#testStopPositons().mjava","pathOld":"src/test/org/apache/lucene/analysis/TestStopFilter#testStopPositons().mjava","sourceNew":"  /**\n   * Test Position increments applied by StopFilter with and without enabling this option.\n   */\n  public void testStopPositons() throws IOException {\n    StringBuffer sb = new StringBuffer();\n    ArrayList a = new ArrayList();\n    for (int i=0; i<20; i++) {\n      String w = English.intToEnglish(i).trim();\n      sb.append(w).append(\" \");\n      if (i%3 != 0) a.add(w);\n    }\n    log(sb.toString());\n    String stopWords[] = (String[]) a.toArray(new String[0]);\n    for (int i=0; i<a.size(); i++) log(\"Stop: \"+stopWords[i]);\n    Set stopSet = StopFilter.makeStopSet(stopWords);\n    // with increments\n    StringReader reader = new StringReader(sb.toString());\n    StopFilter stpf = new StopFilter(new WhitespaceTokenizer(reader), stopSet);\n    doTestStopPositons(stpf,true);\n    // without increments\n    reader = new StringReader(sb.toString());\n    stpf = new StopFilter(new WhitespaceTokenizer(reader), stopSet);\n    doTestStopPositons(stpf,false);\n    // with increments, concatenating two stop filters\n    ArrayList a0 = new ArrayList();\n    ArrayList a1 = new ArrayList();\n    for (int i=0; i<a.size(); i++) {\n      if (i%2==0) { \n        a0.add(a.get(i));\n      } else {\n        a1.add(a.get(i));\n      }\n    }\n    String stopWords0[] = (String[]) a0.toArray(new String[0]);\n    for (int i=0; i<a0.size(); i++) log(\"Stop0: \"+stopWords0[i]);\n    String stopWords1[] = (String[]) a1.toArray(new String[0]);\n    for (int i=0; i<a1.size(); i++) log(\"Stop1: \"+stopWords1[i]);\n    Set stopSet0 = StopFilter.makeStopSet(stopWords0);\n    Set stopSet1 = StopFilter.makeStopSet(stopWords1);\n    reader = new StringReader(sb.toString());\n    StopFilter stpf0 = new StopFilter(new WhitespaceTokenizer(reader), stopSet0); // first part of the set\n    stpf0.setEnablePositionIncrements(true);\n    StopFilter stpf01 = new StopFilter(stpf0, stopSet1); // two stop filters concatenated!\n    doTestStopPositons(stpf01,true);\n  }\n\n","sourceOld":"  /**\r\n   * Test Position increments applied by StopFilter with and without enabling this option.\r\n   */\r\n  public void testStopPositons() throws IOException {\r\n    StringBuffer sb = new StringBuffer();\r\n    ArrayList a = new ArrayList();\r\n    for (int i=0; i<20; i++) {\r\n      String w = English.intToEnglish(i).trim();\r\n      sb.append(w).append(\" \");\r\n      if (i%3 != 0) a.add(w);\r\n    }\r\n    log(sb.toString());\r\n    String stopWords[] = (String[]) a.toArray(new String[0]);\r\n    for (int i=0; i<a.size(); i++) log(\"Stop: \"+stopWords[i]);\r\n    Set stopSet = StopFilter.makeStopSet(stopWords);\r\n    // with increments\r\n    StringReader reader = new StringReader(sb.toString());\r\n    StopFilter stpf = new StopFilter(new WhitespaceTokenizer(reader), stopSet);\r\n    doTestStopPositons(stpf,true);\r\n    // without increments\r\n    reader = new StringReader(sb.toString());\r\n    stpf = new StopFilter(new WhitespaceTokenizer(reader), stopSet);\r\n    doTestStopPositons(stpf,false);\r\n    // with increments, concatenating two stop filters\r\n    ArrayList a0 = new ArrayList();\r\n    ArrayList a1 = new ArrayList();\r\n    for (int i=0; i<a.size(); i++) {\r\n      if (i%2==0) { \r\n        a0.add(a.get(i));\r\n      } else {\r\n        a1.add(a.get(i));\r\n      }\r\n    }\r\n    String stopWords0[] = (String[]) a0.toArray(new String[0]);\r\n    for (int i=0; i<a0.size(); i++) log(\"Stop0: \"+stopWords0[i]);\r\n    String stopWords1[] = (String[]) a1.toArray(new String[0]);\r\n    for (int i=0; i<a1.size(); i++) log(\"Stop1: \"+stopWords1[i]);\r\n    Set stopSet0 = StopFilter.makeStopSet(stopWords0);\r\n    Set stopSet1 = StopFilter.makeStopSet(stopWords1);\r\n    reader = new StringReader(sb.toString());\r\n    StopFilter stpf0 = new StopFilter(new WhitespaceTokenizer(reader), stopSet0); // first part of the set\r\n    stpf0.setEnablePositionIncrements(true);\r\n    StopFilter stpf01 = new StopFilter(stpf0, stopSet1); // two stop filters concatenated!\r\n    doTestStopPositons(stpf01,true);\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54c106a73719ede69e08f8b0ffe2950cc9ebfa07","date":1244055085,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/analysis/TestStopFilter#testStopPositons().mjava","pathOld":"src/test/org/apache/lucene/analysis/TestStopFilter#testStopPositons().mjava","sourceNew":"  /**\n   * Test Position increments applied by StopFilter with and without enabling this option.\n   */\n  public void testStopPositons() throws IOException {\n    StringBuffer sb = new StringBuffer();\n    ArrayList a = new ArrayList();\n    for (int i=0; i<20; i++) {\n      String w = English.intToEnglish(i).trim();\n      sb.append(w).append(\" \");\n      if (i%3 != 0) a.add(w);\n    }\n    log(sb.toString());\n    String stopWords[] = (String[]) a.toArray(new String[0]);\n    for (int i=0; i<a.size(); i++) log(\"Stop: \"+stopWords[i]);\n    Set stopSet = StopFilter.makeStopSet(stopWords);\n    // with increments\n    StringReader reader = new StringReader(sb.toString());\n    StopFilter stpf = new StopFilter(false, new WhitespaceTokenizer(reader), stopSet);\n    doTestStopPositons(stpf,true);\n    // without increments\n    reader = new StringReader(sb.toString());\n    stpf = new StopFilter(false, new WhitespaceTokenizer(reader), stopSet);\n    doTestStopPositons(stpf,false);\n    // with increments, concatenating two stop filters\n    ArrayList a0 = new ArrayList();\n    ArrayList a1 = new ArrayList();\n    for (int i=0; i<a.size(); i++) {\n      if (i%2==0) { \n        a0.add(a.get(i));\n      } else {\n        a1.add(a.get(i));\n      }\n    }\n    String stopWords0[] = (String[]) a0.toArray(new String[0]);\n    for (int i=0; i<a0.size(); i++) log(\"Stop0: \"+stopWords0[i]);\n    String stopWords1[] = (String[]) a1.toArray(new String[0]);\n    for (int i=0; i<a1.size(); i++) log(\"Stop1: \"+stopWords1[i]);\n    Set stopSet0 = StopFilter.makeStopSet(stopWords0);\n    Set stopSet1 = StopFilter.makeStopSet(stopWords1);\n    reader = new StringReader(sb.toString());\n    StopFilter stpf0 = new StopFilter(false, new WhitespaceTokenizer(reader), stopSet0); // first part of the set\n    stpf0.setEnablePositionIncrements(true);\n    StopFilter stpf01 = new StopFilter(false, stpf0, stopSet1); // two stop filters concatenated!\n    doTestStopPositons(stpf01,true);\n  }\n\n","sourceOld":"  /**\n   * Test Position increments applied by StopFilter with and without enabling this option.\n   */\n  public void testStopPositons() throws IOException {\n    StringBuffer sb = new StringBuffer();\n    ArrayList a = new ArrayList();\n    for (int i=0; i<20; i++) {\n      String w = English.intToEnglish(i).trim();\n      sb.append(w).append(\" \");\n      if (i%3 != 0) a.add(w);\n    }\n    log(sb.toString());\n    String stopWords[] = (String[]) a.toArray(new String[0]);\n    for (int i=0; i<a.size(); i++) log(\"Stop: \"+stopWords[i]);\n    Set stopSet = StopFilter.makeStopSet(stopWords);\n    // with increments\n    StringReader reader = new StringReader(sb.toString());\n    StopFilter stpf = new StopFilter(new WhitespaceTokenizer(reader), stopSet);\n    doTestStopPositons(stpf,true);\n    // without increments\n    reader = new StringReader(sb.toString());\n    stpf = new StopFilter(new WhitespaceTokenizer(reader), stopSet);\n    doTestStopPositons(stpf,false);\n    // with increments, concatenating two stop filters\n    ArrayList a0 = new ArrayList();\n    ArrayList a1 = new ArrayList();\n    for (int i=0; i<a.size(); i++) {\n      if (i%2==0) { \n        a0.add(a.get(i));\n      } else {\n        a1.add(a.get(i));\n      }\n    }\n    String stopWords0[] = (String[]) a0.toArray(new String[0]);\n    for (int i=0; i<a0.size(); i++) log(\"Stop0: \"+stopWords0[i]);\n    String stopWords1[] = (String[]) a1.toArray(new String[0]);\n    for (int i=0; i<a1.size(); i++) log(\"Stop1: \"+stopWords1[i]);\n    Set stopSet0 = StopFilter.makeStopSet(stopWords0);\n    Set stopSet1 = StopFilter.makeStopSet(stopWords1);\n    reader = new StringReader(sb.toString());\n    StopFilter stpf0 = new StopFilter(new WhitespaceTokenizer(reader), stopSet0); // first part of the set\n    stpf0.setEnablePositionIncrements(true);\n    StopFilter stpf01 = new StopFilter(stpf0, stopSet1); // two stop filters concatenated!\n    doTestStopPositons(stpf01,true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4625cb7ffd7c9caaf2d62b206ba9a382d68da82c","date":1254521470,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/analysis/TestStopFilter#testStopPositons().mjava","pathOld":"src/test/org/apache/lucene/analysis/TestStopFilter#testStopPositons().mjava","sourceNew":"  /**\n   * Test Position increments applied by StopFilter with and without enabling this option.\n   */\n  public void testStopPositons() throws IOException {\n    StringBuilder sb = new StringBuilder();\n    ArrayList a = new ArrayList();\n    for (int i=0; i<20; i++) {\n      String w = English.intToEnglish(i).trim();\n      sb.append(w).append(\" \");\n      if (i%3 != 0) a.add(w);\n    }\n    log(sb.toString());\n    String stopWords[] = (String[]) a.toArray(new String[0]);\n    for (int i=0; i<a.size(); i++) log(\"Stop: \"+stopWords[i]);\n    Set stopSet = StopFilter.makeStopSet(stopWords);\n    // with increments\n    StringReader reader = new StringReader(sb.toString());\n    StopFilter stpf = new StopFilter(false, new WhitespaceTokenizer(reader), stopSet);\n    doTestStopPositons(stpf,true);\n    // without increments\n    reader = new StringReader(sb.toString());\n    stpf = new StopFilter(false, new WhitespaceTokenizer(reader), stopSet);\n    doTestStopPositons(stpf,false);\n    // with increments, concatenating two stop filters\n    ArrayList a0 = new ArrayList();\n    ArrayList a1 = new ArrayList();\n    for (int i=0; i<a.size(); i++) {\n      if (i%2==0) { \n        a0.add(a.get(i));\n      } else {\n        a1.add(a.get(i));\n      }\n    }\n    String stopWords0[] = (String[]) a0.toArray(new String[0]);\n    for (int i=0; i<a0.size(); i++) log(\"Stop0: \"+stopWords0[i]);\n    String stopWords1[] = (String[]) a1.toArray(new String[0]);\n    for (int i=0; i<a1.size(); i++) log(\"Stop1: \"+stopWords1[i]);\n    Set stopSet0 = StopFilter.makeStopSet(stopWords0);\n    Set stopSet1 = StopFilter.makeStopSet(stopWords1);\n    reader = new StringReader(sb.toString());\n    StopFilter stpf0 = new StopFilter(false, new WhitespaceTokenizer(reader), stopSet0); // first part of the set\n    stpf0.setEnablePositionIncrements(true);\n    StopFilter stpf01 = new StopFilter(false, stpf0, stopSet1); // two stop filters concatenated!\n    doTestStopPositons(stpf01,true);\n  }\n\n","sourceOld":"  /**\n   * Test Position increments applied by StopFilter with and without enabling this option.\n   */\n  public void testStopPositons() throws IOException {\n    StringBuffer sb = new StringBuffer();\n    ArrayList a = new ArrayList();\n    for (int i=0; i<20; i++) {\n      String w = English.intToEnglish(i).trim();\n      sb.append(w).append(\" \");\n      if (i%3 != 0) a.add(w);\n    }\n    log(sb.toString());\n    String stopWords[] = (String[]) a.toArray(new String[0]);\n    for (int i=0; i<a.size(); i++) log(\"Stop: \"+stopWords[i]);\n    Set stopSet = StopFilter.makeStopSet(stopWords);\n    // with increments\n    StringReader reader = new StringReader(sb.toString());\n    StopFilter stpf = new StopFilter(false, new WhitespaceTokenizer(reader), stopSet);\n    doTestStopPositons(stpf,true);\n    // without increments\n    reader = new StringReader(sb.toString());\n    stpf = new StopFilter(false, new WhitespaceTokenizer(reader), stopSet);\n    doTestStopPositons(stpf,false);\n    // with increments, concatenating two stop filters\n    ArrayList a0 = new ArrayList();\n    ArrayList a1 = new ArrayList();\n    for (int i=0; i<a.size(); i++) {\n      if (i%2==0) { \n        a0.add(a.get(i));\n      } else {\n        a1.add(a.get(i));\n      }\n    }\n    String stopWords0[] = (String[]) a0.toArray(new String[0]);\n    for (int i=0; i<a0.size(); i++) log(\"Stop0: \"+stopWords0[i]);\n    String stopWords1[] = (String[]) a1.toArray(new String[0]);\n    for (int i=0; i<a1.size(); i++) log(\"Stop1: \"+stopWords1[i]);\n    Set stopSet0 = StopFilter.makeStopSet(stopWords0);\n    Set stopSet1 = StopFilter.makeStopSet(stopWords1);\n    reader = new StringReader(sb.toString());\n    StopFilter stpf0 = new StopFilter(false, new WhitespaceTokenizer(reader), stopSet0); // first part of the set\n    stpf0.setEnablePositionIncrements(true);\n    StopFilter stpf01 = new StopFilter(false, stpf0, stopSet1); // two stop filters concatenated!\n    doTestStopPositons(stpf01,true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f6c85ffa816c86be877aa7a5029a5daa1336e7f","date":1259617761,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/analysis/TestStopFilter#testStopPositons().mjava","pathOld":"src/test/org/apache/lucene/analysis/TestStopFilter#testStopPositons().mjava","sourceNew":"  /**\n   * Test Position increments applied by StopFilter with and without enabling this option.\n   */\n  public void testStopPositons() throws IOException {\n    StringBuilder sb = new StringBuilder();\n    ArrayList a = new ArrayList();\n    for (int i=0; i<20; i++) {\n      String w = English.intToEnglish(i).trim();\n      sb.append(w).append(\" \");\n      if (i%3 != 0) a.add(w);\n    }\n    log(sb.toString());\n    String stopWords[] = (String[]) a.toArray(new String[0]);\n    for (int i=0; i<a.size(); i++) log(\"Stop: \"+stopWords[i]);\n    Set stopSet = StopFilter.makeStopSet(Version.LUCENE_CURRENT, stopWords);\n    // with increments\n    StringReader reader = new StringReader(sb.toString());\n    StopFilter stpf = new StopFilter(Version.LUCENE_24, new WhitespaceTokenizer(reader), stopSet);\n    doTestStopPositons(stpf,true);\n    // without increments\n    reader = new StringReader(sb.toString());\n    stpf = new StopFilter(Version.LUCENE_CURRENT, new WhitespaceTokenizer(reader), stopSet);\n    doTestStopPositons(stpf,false);\n    // with increments, concatenating two stop filters\n    ArrayList a0 = new ArrayList();\n    ArrayList a1 = new ArrayList();\n    for (int i=0; i<a.size(); i++) {\n      if (i%2==0) { \n        a0.add(a.get(i));\n      } else {\n        a1.add(a.get(i));\n      }\n    }\n    String stopWords0[] = (String[]) a0.toArray(new String[0]);\n    for (int i=0; i<a0.size(); i++) log(\"Stop0: \"+stopWords0[i]);\n    String stopWords1[] = (String[]) a1.toArray(new String[0]);\n    for (int i=0; i<a1.size(); i++) log(\"Stop1: \"+stopWords1[i]);\n    Set stopSet0 = StopFilter.makeStopSet(Version.LUCENE_CURRENT, stopWords0);\n    Set stopSet1 = StopFilter.makeStopSet(Version.LUCENE_CURRENT, stopWords1);\n    reader = new StringReader(sb.toString());\n    StopFilter stpf0 = new StopFilter(Version.LUCENE_CURRENT, new WhitespaceTokenizer(reader), stopSet0); // first part of the set\n    stpf0.setEnablePositionIncrements(true);\n    StopFilter stpf01 = new StopFilter(Version.LUCENE_CURRENT, stpf0, stopSet1); // two stop filters concatenated!\n    doTestStopPositons(stpf01,true);\n  }\n\n","sourceOld":"  /**\n   * Test Position increments applied by StopFilter with and without enabling this option.\n   */\n  public void testStopPositons() throws IOException {\n    StringBuilder sb = new StringBuilder();\n    ArrayList a = new ArrayList();\n    for (int i=0; i<20; i++) {\n      String w = English.intToEnglish(i).trim();\n      sb.append(w).append(\" \");\n      if (i%3 != 0) a.add(w);\n    }\n    log(sb.toString());\n    String stopWords[] = (String[]) a.toArray(new String[0]);\n    for (int i=0; i<a.size(); i++) log(\"Stop: \"+stopWords[i]);\n    Set stopSet = StopFilter.makeStopSet(stopWords);\n    // with increments\n    StringReader reader = new StringReader(sb.toString());\n    StopFilter stpf = new StopFilter(false, new WhitespaceTokenizer(reader), stopSet);\n    doTestStopPositons(stpf,true);\n    // without increments\n    reader = new StringReader(sb.toString());\n    stpf = new StopFilter(false, new WhitespaceTokenizer(reader), stopSet);\n    doTestStopPositons(stpf,false);\n    // with increments, concatenating two stop filters\n    ArrayList a0 = new ArrayList();\n    ArrayList a1 = new ArrayList();\n    for (int i=0; i<a.size(); i++) {\n      if (i%2==0) { \n        a0.add(a.get(i));\n      } else {\n        a1.add(a.get(i));\n      }\n    }\n    String stopWords0[] = (String[]) a0.toArray(new String[0]);\n    for (int i=0; i<a0.size(); i++) log(\"Stop0: \"+stopWords0[i]);\n    String stopWords1[] = (String[]) a1.toArray(new String[0]);\n    for (int i=0; i<a1.size(); i++) log(\"Stop1: \"+stopWords1[i]);\n    Set stopSet0 = StopFilter.makeStopSet(stopWords0);\n    Set stopSet1 = StopFilter.makeStopSet(stopWords1);\n    reader = new StringReader(sb.toString());\n    StopFilter stpf0 = new StopFilter(false, new WhitespaceTokenizer(reader), stopSet0); // first part of the set\n    stpf0.setEnablePositionIncrements(true);\n    StopFilter stpf01 = new StopFilter(false, stpf0, stopSet1); // two stop filters concatenated!\n    doTestStopPositons(stpf01,true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e450c7d50c2fc84c963d0d7ade9d3217d868064d","date":1259932067,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/analysis/TestStopFilter#testStopPositons().mjava","pathOld":"src/test/org/apache/lucene/analysis/TestStopFilter#testStopPositons().mjava","sourceNew":"  /**\n   * Test Position increments applied by StopFilter with and without enabling this option.\n   */\n  public void testStopPositons() throws IOException {\n    StringBuilder sb = new StringBuilder();\n    ArrayList<String> a = new ArrayList<String>();\n    for (int i=0; i<20; i++) {\n      String w = English.intToEnglish(i).trim();\n      sb.append(w).append(\" \");\n      if (i%3 != 0) a.add(w);\n    }\n    log(sb.toString());\n    String stopWords[] = a.toArray(new String[0]);\n    for (int i=0; i<a.size(); i++) log(\"Stop: \"+stopWords[i]);\n    Set<Object> stopSet = StopFilter.makeStopSet(Version.LUCENE_CURRENT, stopWords);\n    // with increments\n    StringReader reader = new StringReader(sb.toString());\n    StopFilter stpf = new StopFilter(Version.LUCENE_24, new WhitespaceTokenizer(reader), stopSet);\n    doTestStopPositons(stpf,true);\n    // without increments\n    reader = new StringReader(sb.toString());\n    stpf = new StopFilter(Version.LUCENE_CURRENT, new WhitespaceTokenizer(reader), stopSet);\n    doTestStopPositons(stpf,false);\n    // with increments, concatenating two stop filters\n    ArrayList<String> a0 = new ArrayList<String>();\n    ArrayList<String> a1 = new ArrayList<String>();\n    for (int i=0; i<a.size(); i++) {\n      if (i%2==0) { \n        a0.add(a.get(i));\n      } else {\n        a1.add(a.get(i));\n      }\n    }\n    String stopWords0[] =  a0.toArray(new String[0]);\n    for (int i=0; i<a0.size(); i++) log(\"Stop0: \"+stopWords0[i]);\n    String stopWords1[] =  a1.toArray(new String[0]);\n    for (int i=0; i<a1.size(); i++) log(\"Stop1: \"+stopWords1[i]);\n    Set<Object> stopSet0 = StopFilter.makeStopSet(Version.LUCENE_CURRENT, stopWords0);\n    Set<Object> stopSet1 = StopFilter.makeStopSet(Version.LUCENE_CURRENT, stopWords1);\n    reader = new StringReader(sb.toString());\n    StopFilter stpf0 = new StopFilter(Version.LUCENE_CURRENT, new WhitespaceTokenizer(reader), stopSet0); // first part of the set\n    stpf0.setEnablePositionIncrements(true);\n    StopFilter stpf01 = new StopFilter(Version.LUCENE_CURRENT, stpf0, stopSet1); // two stop filters concatenated!\n    doTestStopPositons(stpf01,true);\n  }\n\n","sourceOld":"  /**\n   * Test Position increments applied by StopFilter with and without enabling this option.\n   */\n  public void testStopPositons() throws IOException {\n    StringBuilder sb = new StringBuilder();\n    ArrayList a = new ArrayList();\n    for (int i=0; i<20; i++) {\n      String w = English.intToEnglish(i).trim();\n      sb.append(w).append(\" \");\n      if (i%3 != 0) a.add(w);\n    }\n    log(sb.toString());\n    String stopWords[] = (String[]) a.toArray(new String[0]);\n    for (int i=0; i<a.size(); i++) log(\"Stop: \"+stopWords[i]);\n    Set stopSet = StopFilter.makeStopSet(Version.LUCENE_CURRENT, stopWords);\n    // with increments\n    StringReader reader = new StringReader(sb.toString());\n    StopFilter stpf = new StopFilter(Version.LUCENE_24, new WhitespaceTokenizer(reader), stopSet);\n    doTestStopPositons(stpf,true);\n    // without increments\n    reader = new StringReader(sb.toString());\n    stpf = new StopFilter(Version.LUCENE_CURRENT, new WhitespaceTokenizer(reader), stopSet);\n    doTestStopPositons(stpf,false);\n    // with increments, concatenating two stop filters\n    ArrayList a0 = new ArrayList();\n    ArrayList a1 = new ArrayList();\n    for (int i=0; i<a.size(); i++) {\n      if (i%2==0) { \n        a0.add(a.get(i));\n      } else {\n        a1.add(a.get(i));\n      }\n    }\n    String stopWords0[] = (String[]) a0.toArray(new String[0]);\n    for (int i=0; i<a0.size(); i++) log(\"Stop0: \"+stopWords0[i]);\n    String stopWords1[] = (String[]) a1.toArray(new String[0]);\n    for (int i=0; i<a1.size(); i++) log(\"Stop1: \"+stopWords1[i]);\n    Set stopSet0 = StopFilter.makeStopSet(Version.LUCENE_CURRENT, stopWords0);\n    Set stopSet1 = StopFilter.makeStopSet(Version.LUCENE_CURRENT, stopWords1);\n    reader = new StringReader(sb.toString());\n    StopFilter stpf0 = new StopFilter(Version.LUCENE_CURRENT, new WhitespaceTokenizer(reader), stopSet0); // first part of the set\n    stpf0.setEnablePositionIncrements(true);\n    StopFilter stpf01 = new StopFilter(Version.LUCENE_CURRENT, stpf0, stopSet1); // two stop filters concatenated!\n    doTestStopPositons(stpf01,true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe0932c1d340f83fb0a611e5829b3046a1cc1152","date":1264946739,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/analysis/TestStopFilter#testStopPositons().mjava","pathOld":"src/test/org/apache/lucene/analysis/TestStopFilter#testStopPositons().mjava","sourceNew":"  /**\n   * Test Position increments applied by StopFilter with and without enabling this option.\n   */\n  public void testStopPositons() throws IOException {\n    StringBuilder sb = new StringBuilder();\n    ArrayList<String> a = new ArrayList<String>();\n    for (int i=0; i<20; i++) {\n      String w = English.intToEnglish(i).trim();\n      sb.append(w).append(\" \");\n      if (i%3 != 0) a.add(w);\n    }\n    log(sb.toString());\n    String stopWords[] = a.toArray(new String[0]);\n    for (int i=0; i<a.size(); i++) log(\"Stop: \"+stopWords[i]);\n    Set<Object> stopSet = StopFilter.makeStopSet(Version.LUCENE_CURRENT, stopWords);\n    // with increments\n    StringReader reader = new StringReader(sb.toString());\n    StopFilter stpf = new StopFilter(Version.LUCENE_24, new WhitespaceTokenizer(Version.LUCENE_CURRENT, reader), stopSet);\n    doTestStopPositons(stpf,true);\n    // without increments\n    reader = new StringReader(sb.toString());\n    stpf = new StopFilter(Version.LUCENE_CURRENT, new WhitespaceTokenizer(Version.LUCENE_CURRENT, reader), stopSet);\n    doTestStopPositons(stpf,false);\n    // with increments, concatenating two stop filters\n    ArrayList<String> a0 = new ArrayList<String>();\n    ArrayList<String> a1 = new ArrayList<String>();\n    for (int i=0; i<a.size(); i++) {\n      if (i%2==0) { \n        a0.add(a.get(i));\n      } else {\n        a1.add(a.get(i));\n      }\n    }\n    String stopWords0[] =  a0.toArray(new String[0]);\n    for (int i=0; i<a0.size(); i++) log(\"Stop0: \"+stopWords0[i]);\n    String stopWords1[] =  a1.toArray(new String[0]);\n    for (int i=0; i<a1.size(); i++) log(\"Stop1: \"+stopWords1[i]);\n    Set<Object> stopSet0 = StopFilter.makeStopSet(Version.LUCENE_CURRENT, stopWords0);\n    Set<Object> stopSet1 = StopFilter.makeStopSet(Version.LUCENE_CURRENT, stopWords1);\n    reader = new StringReader(sb.toString());\n    StopFilter stpf0 = new StopFilter(Version.LUCENE_CURRENT, new WhitespaceTokenizer(Version.LUCENE_CURRENT, reader), stopSet0); // first part of the set\n    stpf0.setEnablePositionIncrements(true);\n    StopFilter stpf01 = new StopFilter(Version.LUCENE_CURRENT, stpf0, stopSet1); // two stop filters concatenated!\n    doTestStopPositons(stpf01,true);\n  }\n\n","sourceOld":"  /**\n   * Test Position increments applied by StopFilter with and without enabling this option.\n   */\n  public void testStopPositons() throws IOException {\n    StringBuilder sb = new StringBuilder();\n    ArrayList<String> a = new ArrayList<String>();\n    for (int i=0; i<20; i++) {\n      String w = English.intToEnglish(i).trim();\n      sb.append(w).append(\" \");\n      if (i%3 != 0) a.add(w);\n    }\n    log(sb.toString());\n    String stopWords[] = a.toArray(new String[0]);\n    for (int i=0; i<a.size(); i++) log(\"Stop: \"+stopWords[i]);\n    Set<Object> stopSet = StopFilter.makeStopSet(Version.LUCENE_CURRENT, stopWords);\n    // with increments\n    StringReader reader = new StringReader(sb.toString());\n    StopFilter stpf = new StopFilter(Version.LUCENE_24, new WhitespaceTokenizer(reader), stopSet);\n    doTestStopPositons(stpf,true);\n    // without increments\n    reader = new StringReader(sb.toString());\n    stpf = new StopFilter(Version.LUCENE_CURRENT, new WhitespaceTokenizer(reader), stopSet);\n    doTestStopPositons(stpf,false);\n    // with increments, concatenating two stop filters\n    ArrayList<String> a0 = new ArrayList<String>();\n    ArrayList<String> a1 = new ArrayList<String>();\n    for (int i=0; i<a.size(); i++) {\n      if (i%2==0) { \n        a0.add(a.get(i));\n      } else {\n        a1.add(a.get(i));\n      }\n    }\n    String stopWords0[] =  a0.toArray(new String[0]);\n    for (int i=0; i<a0.size(); i++) log(\"Stop0: \"+stopWords0[i]);\n    String stopWords1[] =  a1.toArray(new String[0]);\n    for (int i=0; i<a1.size(); i++) log(\"Stop1: \"+stopWords1[i]);\n    Set<Object> stopSet0 = StopFilter.makeStopSet(Version.LUCENE_CURRENT, stopWords0);\n    Set<Object> stopSet1 = StopFilter.makeStopSet(Version.LUCENE_CURRENT, stopWords1);\n    reader = new StringReader(sb.toString());\n    StopFilter stpf0 = new StopFilter(Version.LUCENE_CURRENT, new WhitespaceTokenizer(reader), stopSet0); // first part of the set\n    stpf0.setEnablePositionIncrements(true);\n    StopFilter stpf01 = new StopFilter(Version.LUCENE_CURRENT, stpf0, stopSet1); // two stop filters concatenated!\n    doTestStopPositons(stpf01,true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/analysis/TestStopFilter#testStopPositons().mjava","pathOld":"src/test/org/apache/lucene/analysis/TestStopFilter#testStopPositons().mjava","sourceNew":"  /**\n   * Test Position increments applied by StopFilter with and without enabling this option.\n   */\n  public void testStopPositons() throws IOException {\n    StringBuilder sb = new StringBuilder();\n    ArrayList<String> a = new ArrayList<String>();\n    for (int i=0; i<20; i++) {\n      String w = English.intToEnglish(i).trim();\n      sb.append(w).append(\" \");\n      if (i%3 != 0) a.add(w);\n    }\n    log(sb.toString());\n    String stopWords[] = a.toArray(new String[0]);\n    for (int i=0; i<a.size(); i++) log(\"Stop: \"+stopWords[i]);\n    Set<Object> stopSet = StopFilter.makeStopSet(TEST_VERSION_CURRENT, stopWords);\n    // with increments\n    StringReader reader = new StringReader(sb.toString());\n    StopFilter stpf = new StopFilter(Version.LUCENE_24, new WhitespaceTokenizer(TEST_VERSION_CURRENT, reader), stopSet);\n    doTestStopPositons(stpf,true);\n    // without increments\n    reader = new StringReader(sb.toString());\n    stpf = new StopFilter(TEST_VERSION_CURRENT, new WhitespaceTokenizer(TEST_VERSION_CURRENT, reader), stopSet);\n    doTestStopPositons(stpf,false);\n    // with increments, concatenating two stop filters\n    ArrayList<String> a0 = new ArrayList<String>();\n    ArrayList<String> a1 = new ArrayList<String>();\n    for (int i=0; i<a.size(); i++) {\n      if (i%2==0) { \n        a0.add(a.get(i));\n      } else {\n        a1.add(a.get(i));\n      }\n    }\n    String stopWords0[] =  a0.toArray(new String[0]);\n    for (int i=0; i<a0.size(); i++) log(\"Stop0: \"+stopWords0[i]);\n    String stopWords1[] =  a1.toArray(new String[0]);\n    for (int i=0; i<a1.size(); i++) log(\"Stop1: \"+stopWords1[i]);\n    Set<Object> stopSet0 = StopFilter.makeStopSet(TEST_VERSION_CURRENT, stopWords0);\n    Set<Object> stopSet1 = StopFilter.makeStopSet(TEST_VERSION_CURRENT, stopWords1);\n    reader = new StringReader(sb.toString());\n    StopFilter stpf0 = new StopFilter(TEST_VERSION_CURRENT, new WhitespaceTokenizer(TEST_VERSION_CURRENT, reader), stopSet0); // first part of the set\n    stpf0.setEnablePositionIncrements(true);\n    StopFilter stpf01 = new StopFilter(TEST_VERSION_CURRENT, stpf0, stopSet1); // two stop filters concatenated!\n    doTestStopPositons(stpf01,true);\n  }\n\n","sourceOld":"  /**\n   * Test Position increments applied by StopFilter with and without enabling this option.\n   */\n  public void testStopPositons() throws IOException {\n    StringBuilder sb = new StringBuilder();\n    ArrayList<String> a = new ArrayList<String>();\n    for (int i=0; i<20; i++) {\n      String w = English.intToEnglish(i).trim();\n      sb.append(w).append(\" \");\n      if (i%3 != 0) a.add(w);\n    }\n    log(sb.toString());\n    String stopWords[] = a.toArray(new String[0]);\n    for (int i=0; i<a.size(); i++) log(\"Stop: \"+stopWords[i]);\n    Set<Object> stopSet = StopFilter.makeStopSet(Version.LUCENE_CURRENT, stopWords);\n    // with increments\n    StringReader reader = new StringReader(sb.toString());\n    StopFilter stpf = new StopFilter(Version.LUCENE_24, new WhitespaceTokenizer(Version.LUCENE_CURRENT, reader), stopSet);\n    doTestStopPositons(stpf,true);\n    // without increments\n    reader = new StringReader(sb.toString());\n    stpf = new StopFilter(Version.LUCENE_CURRENT, new WhitespaceTokenizer(Version.LUCENE_CURRENT, reader), stopSet);\n    doTestStopPositons(stpf,false);\n    // with increments, concatenating two stop filters\n    ArrayList<String> a0 = new ArrayList<String>();\n    ArrayList<String> a1 = new ArrayList<String>();\n    for (int i=0; i<a.size(); i++) {\n      if (i%2==0) { \n        a0.add(a.get(i));\n      } else {\n        a1.add(a.get(i));\n      }\n    }\n    String stopWords0[] =  a0.toArray(new String[0]);\n    for (int i=0; i<a0.size(); i++) log(\"Stop0: \"+stopWords0[i]);\n    String stopWords1[] =  a1.toArray(new String[0]);\n    for (int i=0; i<a1.size(); i++) log(\"Stop1: \"+stopWords1[i]);\n    Set<Object> stopSet0 = StopFilter.makeStopSet(Version.LUCENE_CURRENT, stopWords0);\n    Set<Object> stopSet1 = StopFilter.makeStopSet(Version.LUCENE_CURRENT, stopWords1);\n    reader = new StringReader(sb.toString());\n    StopFilter stpf0 = new StopFilter(Version.LUCENE_CURRENT, new WhitespaceTokenizer(Version.LUCENE_CURRENT, reader), stopSet0); // first part of the set\n    stpf0.setEnablePositionIncrements(true);\n    StopFilter stpf01 = new StopFilter(Version.LUCENE_CURRENT, stpf0, stopSet1); // two stop filters concatenated!\n    doTestStopPositons(stpf01,true);\n  }\n\n","bugFix":null,"bugIntro":["fcbc12aa8147f5203ca283e7252ba4280d6ffd16","c39363fefe2d7f6a6d50ce8e8b758c17a257c58e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/analysis/TestStopFilter#testStopPositons().mjava","pathOld":"src/test/org/apache/lucene/analysis/TestStopFilter#testStopPositons().mjava","sourceNew":"  /**\n   * Test Position increments applied by StopFilter with and without enabling this option.\n   */\n  public void testStopPositons() throws IOException {\n    StringBuilder sb = new StringBuilder();\n    ArrayList<String> a = new ArrayList<String>();\n    for (int i=0; i<20; i++) {\n      String w = English.intToEnglish(i).trim();\n      sb.append(w).append(\" \");\n      if (i%3 != 0) a.add(w);\n    }\n    log(sb.toString());\n    String stopWords[] = a.toArray(new String[0]);\n    for (int i=0; i<a.size(); i++) log(\"Stop: \"+stopWords[i]);\n    Set<Object> stopSet = StopFilter.makeStopSet(TEST_VERSION_CURRENT, stopWords);\n    // with increments\n    StringReader reader = new StringReader(sb.toString());\n    StopFilter stpf = new StopFilter(Version.LUCENE_24, new WhitespaceTokenizer(TEST_VERSION_CURRENT, reader), stopSet);\n    doTestStopPositons(stpf,true);\n    // without increments\n    reader = new StringReader(sb.toString());\n    stpf = new StopFilter(TEST_VERSION_CURRENT, new WhitespaceTokenizer(TEST_VERSION_CURRENT, reader), stopSet);\n    doTestStopPositons(stpf,false);\n    // with increments, concatenating two stop filters\n    ArrayList<String> a0 = new ArrayList<String>();\n    ArrayList<String> a1 = new ArrayList<String>();\n    for (int i=0; i<a.size(); i++) {\n      if (i%2==0) { \n        a0.add(a.get(i));\n      } else {\n        a1.add(a.get(i));\n      }\n    }\n    String stopWords0[] =  a0.toArray(new String[0]);\n    for (int i=0; i<a0.size(); i++) log(\"Stop0: \"+stopWords0[i]);\n    String stopWords1[] =  a1.toArray(new String[0]);\n    for (int i=0; i<a1.size(); i++) log(\"Stop1: \"+stopWords1[i]);\n    Set<Object> stopSet0 = StopFilter.makeStopSet(TEST_VERSION_CURRENT, stopWords0);\n    Set<Object> stopSet1 = StopFilter.makeStopSet(TEST_VERSION_CURRENT, stopWords1);\n    reader = new StringReader(sb.toString());\n    StopFilter stpf0 = new StopFilter(TEST_VERSION_CURRENT, new WhitespaceTokenizer(TEST_VERSION_CURRENT, reader), stopSet0); // first part of the set\n    stpf0.setEnablePositionIncrements(true);\n    StopFilter stpf01 = new StopFilter(TEST_VERSION_CURRENT, stpf0, stopSet1); // two stop filters concatenated!\n    doTestStopPositons(stpf01,true);\n  }\n\n","sourceOld":"  /**\n   * Test Position increments applied by StopFilter with and without enabling this option.\n   */\n  public void testStopPositons() throws IOException {\n    StringBuilder sb = new StringBuilder();\n    ArrayList<String> a = new ArrayList<String>();\n    for (int i=0; i<20; i++) {\n      String w = English.intToEnglish(i).trim();\n      sb.append(w).append(\" \");\n      if (i%3 != 0) a.add(w);\n    }\n    log(sb.toString());\n    String stopWords[] = a.toArray(new String[0]);\n    for (int i=0; i<a.size(); i++) log(\"Stop: \"+stopWords[i]);\n    Set<Object> stopSet = StopFilter.makeStopSet(TEST_VERSION_CURRENT, stopWords);\n    // with increments\n    StringReader reader = new StringReader(sb.toString());\n    StopFilter stpf = new StopFilter(Version.LUCENE_24, new WhitespaceTokenizer(TEST_VERSION_CURRENT, reader), stopSet);\n    doTestStopPositons(stpf,true);\n    // without increments\n    reader = new StringReader(sb.toString());\n    stpf = new StopFilter(TEST_VERSION_CURRENT, new WhitespaceTokenizer(TEST_VERSION_CURRENT, reader), stopSet);\n    doTestStopPositons(stpf,false);\n    // with increments, concatenating two stop filters\n    ArrayList<String> a0 = new ArrayList<String>();\n    ArrayList<String> a1 = new ArrayList<String>();\n    for (int i=0; i<a.size(); i++) {\n      if (i%2==0) { \n        a0.add(a.get(i));\n      } else {\n        a1.add(a.get(i));\n      }\n    }\n    String stopWords0[] =  a0.toArray(new String[0]);\n    for (int i=0; i<a0.size(); i++) log(\"Stop0: \"+stopWords0[i]);\n    String stopWords1[] =  a1.toArray(new String[0]);\n    for (int i=0; i<a1.size(); i++) log(\"Stop1: \"+stopWords1[i]);\n    Set<Object> stopSet0 = StopFilter.makeStopSet(TEST_VERSION_CURRENT, stopWords0);\n    Set<Object> stopSet1 = StopFilter.makeStopSet(TEST_VERSION_CURRENT, stopWords1);\n    reader = new StringReader(sb.toString());\n    StopFilter stpf0 = new StopFilter(TEST_VERSION_CURRENT, new WhitespaceTokenizer(TEST_VERSION_CURRENT, reader), stopSet0); // first part of the set\n    stpf0.setEnablePositionIncrements(true);\n    StopFilter stpf01 = new StopFilter(TEST_VERSION_CURRENT, stpf0, stopSet1); // two stop filters concatenated!\n    doTestStopPositons(stpf01,true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["e450c7d50c2fc84c963d0d7ade9d3217d868064d"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2123bddbd65dea198cac380540636ce43a880403":["693d6573b6621fc1265316fc6b042c24235c81d8"],"4625cb7ffd7c9caaf2d62b206ba9a382d68da82c":["54c106a73719ede69e08f8b0ffe2950cc9ebfa07"],"693d6573b6621fc1265316fc6b042c24235c81d8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e450c7d50c2fc84c963d0d7ade9d3217d868064d":["7f6c85ffa816c86be877aa7a5029a5daa1336e7f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"7f6c85ffa816c86be877aa7a5029a5daa1336e7f":["4625cb7ffd7c9caaf2d62b206ba9a382d68da82c"],"54c106a73719ede69e08f8b0ffe2950cc9ebfa07":["2123bddbd65dea198cac380540636ce43a880403"]},"commit2Childs":{"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["693d6573b6621fc1265316fc6b042c24235c81d8"],"2123bddbd65dea198cac380540636ce43a880403":["54c106a73719ede69e08f8b0ffe2950cc9ebfa07"],"693d6573b6621fc1265316fc6b042c24235c81d8":["2123bddbd65dea198cac380540636ce43a880403"],"4625cb7ffd7c9caaf2d62b206ba9a382d68da82c":["7f6c85ffa816c86be877aa7a5029a5daa1336e7f"],"e450c7d50c2fc84c963d0d7ade9d3217d868064d":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"54c106a73719ede69e08f8b0ffe2950cc9ebfa07":["4625cb7ffd7c9caaf2d62b206ba9a382d68da82c"],"7f6c85ffa816c86be877aa7a5029a5daa1336e7f":["e450c7d50c2fc84c963d0d7ade9d3217d868064d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}