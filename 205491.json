{"path":"solr/test-framework/src/java/org/apache/solr/cloud/MiniSolrCloudCluster#MiniSolrCloudCluster(int,File,File,JettyConfig,ZkTestServer).mjava","commits":[{"id":"2209af2c265d2258ec4b29c8cc78622d36994a15","date":1440641916,"type":0,"author":"Gregory Chanan","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/MiniSolrCloudCluster#MiniSolrCloudCluster(int,File,File,JettyConfig,ZkTestServer).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Create a MiniSolrCloudCluster\n   *\n   * @param numServers number of Solr servers to start\n   * @param baseDir base directory that the mini cluster should be run from\n   * @param solrXml solr.xml file to be uploaded to ZooKeeper\n   * @param jettyConfig Jetty configuration\n   * @param zkTestServer ZkTestServer to use.  If null, one will be created\n   *\n   * @throws Exception if there was an error starting the cluster\n   */\n  public MiniSolrCloudCluster(int numServers, File baseDir, File solrXml, JettyConfig jettyConfig, ZkTestServer zkTestServer) throws Exception {\n\n    this.testDir = baseDir;\n    this.jettyConfig = jettyConfig;\n\n    this.externalZkServer = zkTestServer != null;\n    if (!externalZkServer) {\n      String zkDir = testDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n      zkTestServer = new ZkTestServer(zkDir);\n      zkTestServer.run();\n    }\n    this.zkServer = zkTestServer;\n\n    try(SolrZkClient zkClient = new SolrZkClient(zkServer.getZkHost(),\n        AbstractZkTestCase.TIMEOUT, 45000, null)) {\n      zkClient.makePath(\"/solr/solr.xml\", solrXml, false, true);\n      if (jettyConfig.sslConfig != null && jettyConfig.sslConfig.isSSLMode()) {\n        zkClient.makePath(\"/solr\" + ZkStateReader.CLUSTER_PROPS, \"{'urlScheme':'https'}\".getBytes(Charsets.UTF_8), true);\n      }\n    }\n\n    // tell solr to look in zookeeper for solr.xml\n    System.setProperty(\"zkHost\", zkServer.getZkAddress());\n\n    List<Callable<JettySolrRunner>> startups = new ArrayList<>(numServers);\n    for (int i = 0; i < numServers; ++i) {\n      startups.add(new Callable<JettySolrRunner>() {\n        @Override\n        public JettySolrRunner call() throws Exception {\n          return startJettySolrRunner(jettyConfig);\n        }\n      });\n    }\n\n    Collection<Future<JettySolrRunner>> futures = executor.invokeAll(startups);\n    Exception startupError = checkForExceptions(\"Error starting up MiniSolrCloudCluster\", futures);\n    if (startupError != null) {\n      try {\n        this.shutdown();\n      }\n      catch (Throwable t) {\n        startupError.addSuppressed(t);\n      }\n      throw startupError;\n    }\n\n    try (SolrZkClient zkClient = new SolrZkClient(zkServer.getZkHost(),\n        AbstractZkTestCase.TIMEOUT, 45000, null)) {\n      int numliveNodes = 0;\n      int retries = 60;\n      String liveNodesPath = \"/solr/live_nodes\";\n      // Wait up to 60 seconds for number of live_nodes to match up number of servers\n      do {\n        if (zkClient.exists(liveNodesPath, true)) {\n          numliveNodes = zkClient.getChildren(liveNodesPath, null, true).size();\n          if (numliveNodes == numServers) {\n            break;\n          }\n        }\n        retries--;\n        if (retries == 0) {\n          throw new IllegalStateException(\"Solr servers failed to register with ZK.\"\n              + \" Current count: \" + numliveNodes + \"; Expected count: \" + numServers);\n        }\n\n        Thread.sleep(1000);\n      } while (numliveNodes != numServers);\n    }\n\n    solrClient = buildSolrClient();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57131fa4ce09b8042f56ebbbd65dfe28c51d2ad7","date":1445955220,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/MiniSolrCloudCluster#MiniSolrCloudCluster(int,File,File,JettyConfig,ZkTestServer).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/MiniSolrCloudCluster#MiniSolrCloudCluster(int,File,File,JettyConfig,ZkTestServer).mjava","sourceNew":"  /**\n   * Create a MiniSolrCloudCluster\n   *\n   * @param numServers number of Solr servers to start\n   * @param baseDir base directory that the mini cluster should be run from\n   * @param solrXml solr.xml file to be uploaded to ZooKeeper\n   * @param jettyConfig Jetty configuration\n   * @param zkTestServer ZkTestServer to use.  If null, one will be created\n   *\n   * @throws Exception if there was an error starting the cluster\n   */\n  public MiniSolrCloudCluster(int numServers, File baseDir, File solrXml, JettyConfig jettyConfig, ZkTestServer zkTestServer) throws Exception {\n    this(numServers, baseDir, null, solrXml, jettyConfig, zkTestServer);\n  }\n\n","sourceOld":"  /**\n   * Create a MiniSolrCloudCluster\n   *\n   * @param numServers number of Solr servers to start\n   * @param baseDir base directory that the mini cluster should be run from\n   * @param solrXml solr.xml file to be uploaded to ZooKeeper\n   * @param jettyConfig Jetty configuration\n   * @param zkTestServer ZkTestServer to use.  If null, one will be created\n   *\n   * @throws Exception if there was an error starting the cluster\n   */\n  public MiniSolrCloudCluster(int numServers, File baseDir, File solrXml, JettyConfig jettyConfig, ZkTestServer zkTestServer) throws Exception {\n\n    this.testDir = baseDir;\n    this.jettyConfig = jettyConfig;\n\n    this.externalZkServer = zkTestServer != null;\n    if (!externalZkServer) {\n      String zkDir = testDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n      zkTestServer = new ZkTestServer(zkDir);\n      zkTestServer.run();\n    }\n    this.zkServer = zkTestServer;\n\n    try(SolrZkClient zkClient = new SolrZkClient(zkServer.getZkHost(),\n        AbstractZkTestCase.TIMEOUT, 45000, null)) {\n      zkClient.makePath(\"/solr/solr.xml\", solrXml, false, true);\n      if (jettyConfig.sslConfig != null && jettyConfig.sslConfig.isSSLMode()) {\n        zkClient.makePath(\"/solr\" + ZkStateReader.CLUSTER_PROPS, \"{'urlScheme':'https'}\".getBytes(Charsets.UTF_8), true);\n      }\n    }\n\n    // tell solr to look in zookeeper for solr.xml\n    System.setProperty(\"zkHost\", zkServer.getZkAddress());\n\n    List<Callable<JettySolrRunner>> startups = new ArrayList<>(numServers);\n    for (int i = 0; i < numServers; ++i) {\n      startups.add(new Callable<JettySolrRunner>() {\n        @Override\n        public JettySolrRunner call() throws Exception {\n          return startJettySolrRunner(jettyConfig);\n        }\n      });\n    }\n\n    Collection<Future<JettySolrRunner>> futures = executor.invokeAll(startups);\n    Exception startupError = checkForExceptions(\"Error starting up MiniSolrCloudCluster\", futures);\n    if (startupError != null) {\n      try {\n        this.shutdown();\n      }\n      catch (Throwable t) {\n        startupError.addSuppressed(t);\n      }\n      throw startupError;\n    }\n\n    try (SolrZkClient zkClient = new SolrZkClient(zkServer.getZkHost(),\n        AbstractZkTestCase.TIMEOUT, 45000, null)) {\n      int numliveNodes = 0;\n      int retries = 60;\n      String liveNodesPath = \"/solr/live_nodes\";\n      // Wait up to 60 seconds for number of live_nodes to match up number of servers\n      do {\n        if (zkClient.exists(liveNodesPath, true)) {\n          numliveNodes = zkClient.getChildren(liveNodesPath, null, true).size();\n          if (numliveNodes == numServers) {\n            break;\n          }\n        }\n        retries--;\n        if (retries == 0) {\n          throw new IllegalStateException(\"Solr servers failed to register with ZK.\"\n              + \" Current count: \" + numliveNodes + \"; Expected count: \" + numServers);\n        }\n\n        Thread.sleep(1000);\n      } while (numliveNodes != numServers);\n    }\n\n    solrClient = buildSolrClient();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f0c130ec24cbb2eef3d8e7f0e971736f0bea8f54","date":1446047031,"type":6,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/MiniSolrCloudCluster#MiniSolrCloudCluster(int,Path).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/MiniSolrCloudCluster#MiniSolrCloudCluster(int,File,File,JettyConfig,ZkTestServer).mjava","sourceNew":"  /**\n   * Create a MiniSolrCloudCluster with default configuration\n   *\n   * @param numServers number of Solr servers to start\n   * @param baseDir base directory that the mini cluster should be run from\n   *\n   * @throws Exception if there was an error starting the cluster\n   */\n  public MiniSolrCloudCluster(int numServers, Path baseDir) throws Exception {\n    this(numServers, baseDir, DEFAULT_CLOUD_SOLR_XML, DEFAULT_JETTY_CONFIG, null);\n  }\n\n","sourceOld":"  /**\n   * Create a MiniSolrCloudCluster\n   *\n   * @param numServers number of Solr servers to start\n   * @param baseDir base directory that the mini cluster should be run from\n   * @param solrXml solr.xml file to be uploaded to ZooKeeper\n   * @param jettyConfig Jetty configuration\n   * @param zkTestServer ZkTestServer to use.  If null, one will be created\n   *\n   * @throws Exception if there was an error starting the cluster\n   */\n  public MiniSolrCloudCluster(int numServers, File baseDir, File solrXml, JettyConfig jettyConfig, ZkTestServer zkTestServer) throws Exception {\n    this(numServers, baseDir, null, solrXml, jettyConfig, zkTestServer);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f0c130ec24cbb2eef3d8e7f0e971736f0bea8f54","date":1446047031,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/MiniSolrCloudCluster#MiniSolrCloudCluster(int,Path,JettyConfig).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/MiniSolrCloudCluster#MiniSolrCloudCluster(int,File,File,JettyConfig,ZkTestServer).mjava","sourceNew":"  /**\n   * Create a MiniSolrCloudCluster with default solr.xml\n   *\n   * @param numServers number of Solr servers to start\n   * @param baseDir base directory that the mini cluster should be run from\n   * @param jettyConfig Jetty configuration\n   *\n   * @throws Exception if there was an error starting the cluster\n   */\n  public MiniSolrCloudCluster(int numServers, Path baseDir, JettyConfig jettyConfig) throws Exception {\n    this(numServers, baseDir, DEFAULT_CLOUD_SOLR_XML, jettyConfig, null);\n  }\n\n","sourceOld":"  /**\n   * Create a MiniSolrCloudCluster\n   *\n   * @param numServers number of Solr servers to start\n   * @param baseDir base directory that the mini cluster should be run from\n   * @param solrXml solr.xml file to be uploaded to ZooKeeper\n   * @param jettyConfig Jetty configuration\n   * @param zkTestServer ZkTestServer to use.  If null, one will be created\n   *\n   * @throws Exception if there was an error starting the cluster\n   */\n  public MiniSolrCloudCluster(int numServers, File baseDir, File solrXml, JettyConfig jettyConfig, ZkTestServer zkTestServer) throws Exception {\n    this(numServers, baseDir, null, solrXml, jettyConfig, zkTestServer);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2209af2c265d2258ec4b29c8cc78622d36994a15":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f0c130ec24cbb2eef3d8e7f0e971736f0bea8f54":["57131fa4ce09b8042f56ebbbd65dfe28c51d2ad7"],"57131fa4ce09b8042f56ebbbd65dfe28c51d2ad7":["2209af2c265d2258ec4b29c8cc78622d36994a15"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f0c130ec24cbb2eef3d8e7f0e971736f0bea8f54"]},"commit2Childs":{"2209af2c265d2258ec4b29c8cc78622d36994a15":["57131fa4ce09b8042f56ebbbd65dfe28c51d2ad7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2209af2c265d2258ec4b29c8cc78622d36994a15"],"f0c130ec24cbb2eef3d8e7f0e971736f0bea8f54":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"57131fa4ce09b8042f56ebbbd65dfe28c51d2ad7":["f0c130ec24cbb2eef3d8e7f0e971736f0bea8f54"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}