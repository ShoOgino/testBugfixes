{"path":"lucene/facet/src/test/org/apache/lucene/util/collections/IntToFloatMapTest#test3().mjava","commits":[{"id":"7a1037d9031f9702ee6912f8751ef1d5320da6d9","date":1357217787,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/util/collections/IntToFloatMapTest#test3().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void test3() {\n    IntToFloatMap map = new IntToFloatMap();\n    int length = 100;\n    for (int i = 0; i < length; ++i) {\n      map.put(i*64, 100 + i);\n    }\n    HashSet<Integer> keySet = new HashSet<Integer>();\n    for (IntIterator iit = map.keyIterator(); iit.hasNext(); ) {\n      keySet.add(iit.next());\n    }\n    assertEquals(length, keySet.size());\n    for (int i = 0; i < length; ++i) {\n      assertTrue(keySet.contains(i * 64));\n    }\n    \n    HashSet<Float> valueSet = new HashSet<Float>();\n    for (FloatIterator iit = map.iterator(); iit.hasNext(); ) {\n      valueSet.add(iit.next());\n    }\n    assertEquals(length, valueSet.size());\n    float[] array = map.toArray();\n    assertEquals(length, array.length);\n    for (float value: array) {\n      assertTrue(valueSet.contains(value));\n    }\n    \n    float[] array2 = new float[80];\n    array2 = map.toArray(array2);\n    assertEquals(length, array2.length);\n    for (float value: array2) {\n      assertTrue(valueSet.contains(value));\n    }\n    \n    float[] array3 = new float[120];\n    array3 = map.toArray(array3);\n    for (int i = 0 ;i < length; ++i) {\n      assertTrue(valueSet.contains(array3[i]));\n    }\n    \n    for (int i = 0; i < length; ++i) {\n      assertTrue(map.containsValue(i + 100));\n      assertTrue(map.containsKey(i*64));\n    }\n    \n    for (IntIterator iit = map.keyIterator(); iit.hasNext(); ) {\n      iit.next();\n      iit.remove();\n    }\n    assertTrue(map.isEmpty());\n    assertEquals(0, map.size());\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/util/collections/IntToFloatMapTest#test3().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void test3() {\n    IntToFloatMap map = new IntToFloatMap();\n    int length = 100;\n    for (int i = 0; i < length; ++i) {\n      map.put(i*64, 100 + i);\n    }\n    HashSet<Integer> keySet = new HashSet<Integer>();\n    for (IntIterator iit = map.keyIterator(); iit.hasNext(); ) {\n      keySet.add(iit.next());\n    }\n    assertEquals(length, keySet.size());\n    for (int i = 0; i < length; ++i) {\n      assertTrue(keySet.contains(i * 64));\n    }\n    \n    HashSet<Float> valueSet = new HashSet<Float>();\n    for (FloatIterator iit = map.iterator(); iit.hasNext(); ) {\n      valueSet.add(iit.next());\n    }\n    assertEquals(length, valueSet.size());\n    float[] array = map.toArray();\n    assertEquals(length, array.length);\n    for (float value: array) {\n      assertTrue(valueSet.contains(value));\n    }\n    \n    float[] array2 = new float[80];\n    array2 = map.toArray(array2);\n    assertEquals(length, array2.length);\n    for (float value: array2) {\n      assertTrue(valueSet.contains(value));\n    }\n    \n    float[] array3 = new float[120];\n    array3 = map.toArray(array3);\n    for (int i = 0 ;i < length; ++i) {\n      assertTrue(valueSet.contains(array3[i]));\n    }\n    \n    for (int i = 0; i < length; ++i) {\n      assertTrue(map.containsValue(i + 100));\n      assertTrue(map.containsKey(i*64));\n    }\n    \n    for (IntIterator iit = map.keyIterator(); iit.hasNext(); ) {\n      iit.next();\n      iit.remove();\n    }\n    assertTrue(map.isEmpty());\n    assertEquals(0, map.size());\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"607428da722dcb3e86bbd11c63de8986e6275c36","date":1360334150,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/collections/IntToFloatMapTest#test3().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/util/collections/IntToFloatMapTest#test3().mjava","sourceNew":"  @Test\n  public void test3() {\n    IntToFloatMap map = new IntToFloatMap();\n    int length = 100;\n    for (int i = 0; i < length; ++i) {\n      map.put(i*64, 100 + i);\n    }\n    HashSet<Integer> keySet = new HashSet<Integer>();\n    for (IntIterator iit = map.keyIterator(); iit.hasNext(); ) {\n      keySet.add(iit.next());\n    }\n    assertEquals(length, keySet.size());\n    for (int i = 0; i < length; ++i) {\n      assertTrue(keySet.contains(i * 64));\n    }\n    \n    HashSet<Float> valueSet = new HashSet<Float>();\n    for (FloatIterator iit = map.iterator(); iit.hasNext(); ) {\n      valueSet.add(iit.next());\n    }\n    assertEquals(length, valueSet.size());\n    float[] array = map.toArray();\n    assertEquals(length, array.length);\n    for (float value: array) {\n      assertTrue(valueSet.contains(value));\n    }\n    \n    float[] array2 = new float[80];\n    array2 = map.toArray(array2);\n    assertEquals(length, array2.length);\n    for (float value: array2) {\n      assertTrue(valueSet.contains(value));\n    }\n    \n    float[] array3 = new float[120];\n    array3 = map.toArray(array3);\n    for (int i = 0 ;i < length; ++i) {\n      assertTrue(valueSet.contains(array3[i]));\n    }\n    \n    for (int i = 0; i < length; ++i) {\n      assertTrue(map.containsValue(i + 100));\n      assertTrue(map.containsKey(i*64));\n    }\n    \n    for (IntIterator iit = map.keyIterator(); iit.hasNext(); ) {\n      iit.next();\n      iit.remove();\n    }\n    assertTrue(map.isEmpty());\n    assertEquals(0, map.size());\n    \n  }\n\n","sourceOld":"  @Test\n  public void test3() {\n    IntToFloatMap map = new IntToFloatMap();\n    int length = 100;\n    for (int i = 0; i < length; ++i) {\n      map.put(i*64, 100 + i);\n    }\n    HashSet<Integer> keySet = new HashSet<Integer>();\n    for (IntIterator iit = map.keyIterator(); iit.hasNext(); ) {\n      keySet.add(iit.next());\n    }\n    assertEquals(length, keySet.size());\n    for (int i = 0; i < length; ++i) {\n      assertTrue(keySet.contains(i * 64));\n    }\n    \n    HashSet<Float> valueSet = new HashSet<Float>();\n    for (FloatIterator iit = map.iterator(); iit.hasNext(); ) {\n      valueSet.add(iit.next());\n    }\n    assertEquals(length, valueSet.size());\n    float[] array = map.toArray();\n    assertEquals(length, array.length);\n    for (float value: array) {\n      assertTrue(valueSet.contains(value));\n    }\n    \n    float[] array2 = new float[80];\n    array2 = map.toArray(array2);\n    assertEquals(length, array2.length);\n    for (float value: array2) {\n      assertTrue(valueSet.contains(value));\n    }\n    \n    float[] array3 = new float[120];\n    array3 = map.toArray(array3);\n    for (int i = 0 ;i < length; ++i) {\n      assertTrue(valueSet.contains(array3[i]));\n    }\n    \n    for (int i = 0; i < length; ++i) {\n      assertTrue(map.containsValue(i + 100));\n      assertTrue(map.containsKey(i*64));\n    }\n    \n    for (IntIterator iit = map.keyIterator(); iit.hasNext(); ) {\n      iit.next();\n      iit.remove();\n    }\n    assertTrue(map.isEmpty());\n    assertEquals(0, map.size());\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7a1037d9031f9702ee6912f8751ef1d5320da6d9"],"607428da722dcb3e86bbd11c63de8986e6275c36":["7a1037d9031f9702ee6912f8751ef1d5320da6d9"],"7a1037d9031f9702ee6912f8751ef1d5320da6d9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["607428da722dcb3e86bbd11c63de8986e6275c36"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"7a1037d9031f9702ee6912f8751ef1d5320da6d9":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","607428da722dcb3e86bbd11c63de8986e6275c36"],"607428da722dcb3e86bbd11c63de8986e6275c36":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","7a1037d9031f9702ee6912f8751ef1d5320da6d9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}