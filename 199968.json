{"path":"solr/core/src/java/org/apache/solr/metrics/SolrCoreMetricManager#registerMetricProducer(String,SolrMetricProducer).mjava","commits":[{"id":"0265144286422ad99682a00904cc2536b79c8535","date":1482222684,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrCoreMetricManager#registerMetricProducer(String,SolrMetricProducer).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Registers a mapping of name/metric's with the manager's metric registry.\n   *\n   * @param scope     the scope of the metrics to be registered (e.g. `/admin/ping`)\n   * @param producer  producer of metrics to be registered\n   */\n  public void registerMetricProducer(String scope, SolrMetricProducer producer) {\n    if (scope == null || producer == null || producer.getCategory() == null) {\n      throw new IllegalArgumentException(\"registerMetricProducer() called with illegal arguments: \" +\n          \"scope = \" + scope + \", producer = \" + producer);\n    }\n    Collection<String> registered = producer.initializeMetrics(metricManager, getRegistryName(), scope);\n    if (registered == null || registered.isEmpty()) {\n      throw new IllegalArgumentException(\"registerMetricProducer() did not register any metrics \" +\n      \"for scope = \" + scope + \", producer = \" + producer);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","date":1482251961,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrCoreMetricManager#registerMetricProducer(String,SolrMetricProducer).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Registers a mapping of name/metric's with the manager's metric registry.\n   *\n   * @param scope     the scope of the metrics to be registered (e.g. `/admin/ping`)\n   * @param producer  producer of metrics to be registered\n   */\n  public void registerMetricProducer(String scope, SolrMetricProducer producer) {\n    if (scope == null || producer == null || producer.getCategory() == null) {\n      throw new IllegalArgumentException(\"registerMetricProducer() called with illegal arguments: \" +\n          \"scope = \" + scope + \", producer = \" + producer);\n    }\n    Collection<String> registered = producer.initializeMetrics(metricManager, getRegistryName(), scope);\n    if (registered == null || registered.isEmpty()) {\n      throw new IllegalArgumentException(\"registerMetricProducer() did not register any metrics \" +\n      \"for scope = \" + scope + \", producer = \" + producer);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d646b44d1d17a867bcd0e7a07b11c4837b169366","date":1483540291,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrCoreMetricManager#registerMetricProducer(String,SolrMetricProducer).mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/SolrCoreMetricManager#registerMetricProducer(String,SolrMetricProducer).mjava","sourceNew":"  /**\n   * Registers a mapping of name/metric's with the manager's metric registry.\n   *\n   * @param scope     the scope of the metrics to be registered (e.g. `/admin/ping`)\n   * @param producer  producer of metrics to be registered\n   */\n  public void registerMetricProducer(String scope, SolrMetricProducer producer) {\n    if (scope == null || producer == null) {\n      throw new IllegalArgumentException(\"registerMetricProducer() called with illegal arguments: \" +\n          \"scope = \" + scope + \", producer = \" + producer);\n    }\n    producer.initializeMetrics(metricManager, getRegistryName(), scope);\n  }\n\n","sourceOld":"  /**\n   * Registers a mapping of name/metric's with the manager's metric registry.\n   *\n   * @param scope     the scope of the metrics to be registered (e.g. `/admin/ping`)\n   * @param producer  producer of metrics to be registered\n   */\n  public void registerMetricProducer(String scope, SolrMetricProducer producer) {\n    if (scope == null || producer == null || producer.getCategory() == null) {\n      throw new IllegalArgumentException(\"registerMetricProducer() called with illegal arguments: \" +\n          \"scope = \" + scope + \", producer = \" + producer);\n    }\n    Collection<String> registered = producer.initializeMetrics(metricManager, getRegistryName(), scope);\n    if (registered == null || registered.isEmpty()) {\n      throw new IllegalArgumentException(\"registerMetricProducer() did not register any metrics \" +\n      \"for scope = \" + scope + \", producer = \" + producer);\n    }\n  }\n\n","bugFix":null,"bugIntro":["bfc52860e6d13d034226a760813c59d984c6817a"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"491c9672ec42582fe43960452dbd37f1c80fe0f0","date":1483739222,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrCoreMetricManager#registerMetricProducer(String,SolrMetricProducer).mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/SolrCoreMetricManager#registerMetricProducer(String,SolrMetricProducer).mjava","sourceNew":"  /**\n   * Registers a mapping of name/metric's with the manager's metric registry.\n   *\n   * @param scope     the scope of the metrics to be registered (e.g. `/admin/ping`)\n   * @param producer  producer of metrics to be registered\n   */\n  public void registerMetricProducer(String scope, SolrMetricProducer producer) {\n    if (scope == null || producer == null) {\n      throw new IllegalArgumentException(\"registerMetricProducer() called with illegal arguments: \" +\n          \"scope = \" + scope + \", producer = \" + producer);\n    }\n    producer.initializeMetrics(metricManager, getRegistryName(), scope);\n  }\n\n","sourceOld":"  /**\n   * Registers a mapping of name/metric's with the manager's metric registry.\n   *\n   * @param scope     the scope of the metrics to be registered (e.g. `/admin/ping`)\n   * @param producer  producer of metrics to be registered\n   */\n  public void registerMetricProducer(String scope, SolrMetricProducer producer) {\n    if (scope == null || producer == null || producer.getCategory() == null) {\n      throw new IllegalArgumentException(\"registerMetricProducer() called with illegal arguments: \" +\n          \"scope = \" + scope + \", producer = \" + producer);\n    }\n    Collection<String> registered = producer.initializeMetrics(metricManager, getRegistryName(), scope);\n    if (registered == null || registered.isEmpty()) {\n      throw new IllegalArgumentException(\"registerMetricProducer() did not register any metrics \" +\n      \"for scope = \" + scope + \", producer = \" + producer);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bfc52860e6d13d034226a760813c59d984c6817a","date":1522229027,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrCoreMetricManager#registerMetricProducer(String,SolrMetricProducer).mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/SolrCoreMetricManager#registerMetricProducer(String,SolrMetricProducer).mjava","sourceNew":"  /**\n   * Registers a mapping of name/metric's with the manager's metric registry.\n   *\n   * @param scope     the scope of the metrics to be registered (e.g. `/admin/ping`)\n   * @param producer  producer of metrics to be registered\n   */\n  public void registerMetricProducer(String scope, SolrMetricProducer producer) {\n    if (scope == null || producer == null) {\n      throw new IllegalArgumentException(\"registerMetricProducer() called with illegal arguments: \" +\n          \"scope = \" + scope + \", producer = \" + producer);\n    }\n    producer.initializeMetrics(metricManager, getRegistryName(), tag, scope);\n  }\n\n","sourceOld":"  /**\n   * Registers a mapping of name/metric's with the manager's metric registry.\n   *\n   * @param scope     the scope of the metrics to be registered (e.g. `/admin/ping`)\n   * @param producer  producer of metrics to be registered\n   */\n  public void registerMetricProducer(String scope, SolrMetricProducer producer) {\n    if (scope == null || producer == null) {\n      throw new IllegalArgumentException(\"registerMetricProducer() called with illegal arguments: \" +\n          \"scope = \" + scope + \", producer = \" + producer);\n    }\n    producer.initializeMetrics(metricManager, getRegistryName(), scope);\n  }\n\n","bugFix":["d646b44d1d17a867bcd0e7a07b11c4837b169366"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43564cbb30b064675027cfb569564e8531096e97","date":1522334265,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrCoreMetricManager#registerMetricProducer(String,SolrMetricProducer).mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/SolrCoreMetricManager#registerMetricProducer(String,SolrMetricProducer).mjava","sourceNew":"  /**\n   * Registers a mapping of name/metric's with the manager's metric registry.\n   *\n   * @param scope     the scope of the metrics to be registered (e.g. `/admin/ping`)\n   * @param producer  producer of metrics to be registered\n   */\n  public void registerMetricProducer(String scope, SolrMetricProducer producer) {\n    if (scope == null || producer == null) {\n      throw new IllegalArgumentException(\"registerMetricProducer() called with illegal arguments: \" +\n          \"scope = \" + scope + \", producer = \" + producer);\n    }\n    producer.initializeMetrics(metricManager, getRegistryName(), tag, scope);\n  }\n\n","sourceOld":"  /**\n   * Registers a mapping of name/metric's with the manager's metric registry.\n   *\n   * @param scope     the scope of the metrics to be registered (e.g. `/admin/ping`)\n   * @param producer  producer of metrics to be registered\n   */\n  public void registerMetricProducer(String scope, SolrMetricProducer producer) {\n    if (scope == null || producer == null) {\n      throw new IllegalArgumentException(\"registerMetricProducer() called with illegal arguments: \" +\n          \"scope = \" + scope + \", producer = \" + producer);\n    }\n    producer.initializeMetrics(metricManager, getRegistryName(), scope);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa","date":1571411704,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrCoreMetricManager#registerMetricProducer(String,SolrMetricProducer).mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/SolrCoreMetricManager#registerMetricProducer(String,SolrMetricProducer).mjava","sourceNew":"  /**\n   * Registers a mapping of name/metric's with the manager's metric registry.\n   *\n   * @param scope     the scope of the metrics to be registered (e.g. `/admin/ping`)\n   * @param producer  producer of metrics to be registered\n   */\n  public void registerMetricProducer(String scope, SolrMetricProducer producer) {\n    if (scope == null || producer == null) {\n      throw new IllegalArgumentException(\"registerMetricProducer() called with illegal arguments: \" +\n          \"scope = \" + scope + \", producer = \" + producer);\n    }\n    // use deprecated method for back-compat, remove in 9.0\n    producer.initializeMetrics(solrMetricsContext.metricManager, solrMetricsContext.registry, solrMetricsContext.tag, scope);\n  }\n\n","sourceOld":"  /**\n   * Registers a mapping of name/metric's with the manager's metric registry.\n   *\n   * @param scope     the scope of the metrics to be registered (e.g. `/admin/ping`)\n   * @param producer  producer of metrics to be registered\n   */\n  public void registerMetricProducer(String scope, SolrMetricProducer producer) {\n    if (scope == null || producer == null) {\n      throw new IllegalArgumentException(\"registerMetricProducer() called with illegal arguments: \" +\n          \"scope = \" + scope + \", producer = \" + producer);\n    }\n    producer.initializeMetrics(metricManager, getRegistryName(), tag, scope);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e9e5eaf280a6aa21423126b8232aa157a9b7366","date":1571772228,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrCoreMetricManager#registerMetricProducer(String,SolrMetricProducer).mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/SolrCoreMetricManager#registerMetricProducer(String,SolrMetricProducer).mjava","sourceNew":"  /**\n   * Registers a mapping of name/metric's with the manager's metric registry.\n   *\n   * @param scope     the scope of the metrics to be registered (e.g. `/admin/ping`)\n   * @param producer  producer of metrics to be registered\n   */\n  public void registerMetricProducer(String scope, SolrMetricProducer producer) {\n    if (scope == null || producer == null) {\n      throw new IllegalArgumentException(\"registerMetricProducer() called with illegal arguments: \" +\n          \"scope = \" + scope + \", producer = \" + producer);\n    }\n    // use deprecated method for back-compat, remove in 9.0\n    producer.initializeMetrics(solrMetricsContext, scope);\n  }\n\n","sourceOld":"  /**\n   * Registers a mapping of name/metric's with the manager's metric registry.\n   *\n   * @param scope     the scope of the metrics to be registered (e.g. `/admin/ping`)\n   * @param producer  producer of metrics to be registered\n   */\n  public void registerMetricProducer(String scope, SolrMetricProducer producer) {\n    if (scope == null || producer == null) {\n      throw new IllegalArgumentException(\"registerMetricProducer() called with illegal arguments: \" +\n          \"scope = \" + scope + \", producer = \" + producer);\n    }\n    // use deprecated method for back-compat, remove in 9.0\n    producer.initializeMetrics(solrMetricsContext.metricManager, solrMetricsContext.registry, solrMetricsContext.tag, scope);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0265144286422ad99682a00904cc2536b79c8535":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bfc52860e6d13d034226a760813c59d984c6817a":["d646b44d1d17a867bcd0e7a07b11c4837b169366"],"c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa":["43564cbb30b064675027cfb569564e8531096e97"],"43564cbb30b064675027cfb569564e8531096e97":["d646b44d1d17a867bcd0e7a07b11c4837b169366","bfc52860e6d13d034226a760813c59d984c6817a"],"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0265144286422ad99682a00904cc2536b79c8535"],"d646b44d1d17a867bcd0e7a07b11c4837b169366":["0265144286422ad99682a00904cc2536b79c8535"],"2e9e5eaf280a6aa21423126b8232aa157a9b7366":["c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2e9e5eaf280a6aa21423126b8232aa157a9b7366"],"491c9672ec42582fe43960452dbd37f1c80fe0f0":["5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","d646b44d1d17a867bcd0e7a07b11c4837b169366"]},"commit2Childs":{"0265144286422ad99682a00904cc2536b79c8535":["5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","d646b44d1d17a867bcd0e7a07b11c4837b169366"],"bfc52860e6d13d034226a760813c59d984c6817a":["43564cbb30b064675027cfb569564e8531096e97"],"c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa":["2e9e5eaf280a6aa21423126b8232aa157a9b7366"],"43564cbb30b064675027cfb569564e8531096e97":["c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa"],"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf":["491c9672ec42582fe43960452dbd37f1c80fe0f0"],"d646b44d1d17a867bcd0e7a07b11c4837b169366":["bfc52860e6d13d034226a760813c59d984c6817a","43564cbb30b064675027cfb569564e8531096e97","491c9672ec42582fe43960452dbd37f1c80fe0f0"],"2e9e5eaf280a6aa21423126b8232aa157a9b7366":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0265144286422ad99682a00904cc2536b79c8535","5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"491c9672ec42582fe43960452dbd37f1c80fe0f0":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","491c9672ec42582fe43960452dbd37f1c80fe0f0"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}