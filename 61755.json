{"path":"solr/core/src/java/org/apache/solr/rest/RestManager#init(SolrResourceLoader,NamedList[String],StorageIO).mjava","commits":[{"id":"afb6bf9ce227ab6aac5068547e286ecc958b8b9d","date":1394661169,"type":0,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/rest/RestManager#init(SolrResourceLoader,NamedList[String],StorageIO).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Initializes the RestManager with the storageIO being optionally created outside of this implementation\n   * such as to use ZooKeeper instead of the local FS. \n   */\n  public void init(SolrResourceLoader loader,\n                   NamedList<String> initArgs, \n                   StorageIO storageIO) \n      throws SolrException\n  {\n    log.info(\"Initializing RestManager with initArgs: \"+initArgs);\n\n    if (storageIO == null)\n      throw new IllegalArgumentException(\n          \"Must provide a valid StorageIO implementation to the RestManager!\");\n    \n    this.storageIO = storageIO;\n    this.loader = loader;\n    \n    registry = loader.getManagedResourceRegistry();\n    \n    // the RestManager provides metadata about managed resources via the /managed endpoint\n    // and allows you to create new ManagedResources dynamically by PUT'ing to this endpoint\n    endpoint = new RestManagerManagedResource(this);\n    endpoint.loadManagedDataAndNotify(null); // no observers for my endpoint\n    // responds to requests to /config/managed and /schema/managed\n    managed.put(CONFIG_BASE_PATH+MANAGED_ENDPOINT, endpoint);\n    managed.put(SCHEMA_BASE_PATH+MANAGED_ENDPOINT, endpoint);\n            \n    // init registered managed resources\n    log.info(\"Initializing {} registered ManagedResources\", registry.registered.size());\n    for (ManagedResourceRegistration reg : registry.registered.values()) {\n      // keep track of this for lookups during request processing\n      managed.put(reg.resourceId, createManagedResource(reg));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bdf16ebe435fc9daea90a73b8683ff001c6d3523","date":1409931231,"type":3,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/rest/RestManager#init(SolrResourceLoader,NamedList[String],StorageIO).mjava","pathOld":"solr/core/src/java/org/apache/solr/rest/RestManager#init(SolrResourceLoader,NamedList[String],StorageIO).mjava","sourceNew":"  /**\n   * Initializes the RestManager with the storageIO being optionally created outside of this implementation\n   * such as to use ZooKeeper instead of the local FS. \n   */\n  public void init(SolrResourceLoader loader,\n                   NamedList<String> initArgs, \n                   StorageIO storageIO) \n      throws SolrException\n  {\n    log.info(\"Initializing RestManager with initArgs: \"+initArgs);\n\n    if (storageIO == null)\n      throw new IllegalArgumentException(\n          \"Must provide a valid StorageIO implementation to the RestManager!\");\n    \n    this.storageIO = storageIO;\n    this.loader = loader;\n    \n    registry = loader.getManagedResourceRegistry();\n    \n    // the RestManager provides metadata about managed resources via the /managed endpoint\n    // and allows you to create new ManagedResources dynamically by PUT'ing to this endpoint\n    endpoint = new RestManagerManagedResource(this);\n    endpoint.loadManagedDataAndNotify(null); // no observers for my endpoint\n    // responds to requests to /config/managed and /schema/managed\n    managed.put(CONFIG_BASE_PATH+MANAGED_ENDPOINT, endpoint);\n    managed.put(SCHEMA_BASE_PATH+MANAGED_ENDPOINT, endpoint);\n            \n    // init registered managed resources\n    log.info(\"Initializing {} registered ManagedResources\", registry.registered.size());\n    for (ManagedResourceRegistration reg : registry.registered.values()) {\n      // keep track of this for lookups during request processing\n      managed.put(reg.resourceId, createManagedResource(reg));\n    }\n    \n    // this is for any new registrations that don't come through the API\n    // such as from adding a new fieldType to a managed schema that uses a ManagedResource\n    registry.initializedRestManager = this;\n  }\n\n","sourceOld":"  /**\n   * Initializes the RestManager with the storageIO being optionally created outside of this implementation\n   * such as to use ZooKeeper instead of the local FS. \n   */\n  public void init(SolrResourceLoader loader,\n                   NamedList<String> initArgs, \n                   StorageIO storageIO) \n      throws SolrException\n  {\n    log.info(\"Initializing RestManager with initArgs: \"+initArgs);\n\n    if (storageIO == null)\n      throw new IllegalArgumentException(\n          \"Must provide a valid StorageIO implementation to the RestManager!\");\n    \n    this.storageIO = storageIO;\n    this.loader = loader;\n    \n    registry = loader.getManagedResourceRegistry();\n    \n    // the RestManager provides metadata about managed resources via the /managed endpoint\n    // and allows you to create new ManagedResources dynamically by PUT'ing to this endpoint\n    endpoint = new RestManagerManagedResource(this);\n    endpoint.loadManagedDataAndNotify(null); // no observers for my endpoint\n    // responds to requests to /config/managed and /schema/managed\n    managed.put(CONFIG_BASE_PATH+MANAGED_ENDPOINT, endpoint);\n    managed.put(SCHEMA_BASE_PATH+MANAGED_ENDPOINT, endpoint);\n            \n    // init registered managed resources\n    log.info(\"Initializing {} registered ManagedResources\", registry.registered.size());\n    for (ManagedResourceRegistration reg : registry.registered.values()) {\n      // keep track of this for lookups during request processing\n      managed.put(reg.resourceId, createManagedResource(reg));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"858c0f62e7b20002e4d94702c510512fb6292988","date":1417427955,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/rest/RestManager#init(SolrResourceLoader,NamedList[String],StorageIO).mjava","pathOld":"solr/core/src/java/org/apache/solr/rest/RestManager#init(SolrResourceLoader,NamedList[String],StorageIO).mjava","sourceNew":"  /**\n   * Initializes the RestManager with the storageIO being optionally created outside of this implementation\n   * such as to use ZooKeeper instead of the local FS. \n   */\n  public void init(SolrResourceLoader loader,\n                   NamedList<String> initArgs, \n                   StorageIO storageIO) \n      throws SolrException\n  {\n    log.info(\"Initializing RestManager with initArgs: \"+initArgs);\n\n    if (storageIO == null)\n      throw new IllegalArgumentException(\n          \"Must provide a valid StorageIO implementation to the RestManager!\");\n    \n    this.storageIO = storageIO;\n    this.loader = loader;\n    \n    registry = loader.getManagedResourceRegistry();\n    \n    // the RestManager provides metadata about managed resources via the /managed endpoint\n    // and allows you to create new ManagedResources dynamically by PUT'ing to this endpoint\n    endpoint = new RestManagerManagedResource(this);\n    endpoint.loadManagedDataAndNotify(null); // no observers for my endpoint\n    // responds to requests to /config/managed and /schema/managed\n    managed.put(SCHEMA_BASE_PATH+MANAGED_ENDPOINT, endpoint);\n            \n    // init registered managed resources\n    log.info(\"Initializing {} registered ManagedResources\", registry.registered.size());\n    for (ManagedResourceRegistration reg : registry.registered.values()) {\n      // keep track of this for lookups during request processing\n      managed.put(reg.resourceId, createManagedResource(reg));\n    }\n    \n    // this is for any new registrations that don't come through the API\n    // such as from adding a new fieldType to a managed schema that uses a ManagedResource\n    registry.initializedRestManager = this;\n  }\n\n","sourceOld":"  /**\n   * Initializes the RestManager with the storageIO being optionally created outside of this implementation\n   * such as to use ZooKeeper instead of the local FS. \n   */\n  public void init(SolrResourceLoader loader,\n                   NamedList<String> initArgs, \n                   StorageIO storageIO) \n      throws SolrException\n  {\n    log.info(\"Initializing RestManager with initArgs: \"+initArgs);\n\n    if (storageIO == null)\n      throw new IllegalArgumentException(\n          \"Must provide a valid StorageIO implementation to the RestManager!\");\n    \n    this.storageIO = storageIO;\n    this.loader = loader;\n    \n    registry = loader.getManagedResourceRegistry();\n    \n    // the RestManager provides metadata about managed resources via the /managed endpoint\n    // and allows you to create new ManagedResources dynamically by PUT'ing to this endpoint\n    endpoint = new RestManagerManagedResource(this);\n    endpoint.loadManagedDataAndNotify(null); // no observers for my endpoint\n    // responds to requests to /config/managed and /schema/managed\n    managed.put(CONFIG_BASE_PATH+MANAGED_ENDPOINT, endpoint);\n    managed.put(SCHEMA_BASE_PATH+MANAGED_ENDPOINT, endpoint);\n            \n    // init registered managed resources\n    log.info(\"Initializing {} registered ManagedResources\", registry.registered.size());\n    for (ManagedResourceRegistration reg : registry.registered.values()) {\n      // keep track of this for lookups during request processing\n      managed.put(reg.resourceId, createManagedResource(reg));\n    }\n    \n    // this is for any new registrations that don't come through the API\n    // such as from adding a new fieldType to a managed schema that uses a ManagedResource\n    registry.initializedRestManager = this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d62172dd2fc1195c7e475550ac394a9948a18ae","date":1474974102,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/rest/RestManager#init(SolrResourceLoader,NamedList[String],StorageIO).mjava","pathOld":"solr/core/src/java/org/apache/solr/rest/RestManager#init(SolrResourceLoader,NamedList[String],StorageIO).mjava","sourceNew":"  /**\n   * Initializes the RestManager with the storageIO being optionally created outside of this implementation\n   * such as to use ZooKeeper instead of the local FS. \n   */\n  public void init(SolrResourceLoader loader,\n                   NamedList<String> initArgs, \n                   StorageIO storageIO) \n      throws SolrException\n  {\n    log.debug(\"Initializing RestManager with initArgs: \"+initArgs);\n\n    if (storageIO == null)\n      throw new IllegalArgumentException(\n          \"Must provide a valid StorageIO implementation to the RestManager!\");\n    \n    this.storageIO = storageIO;\n    this.loader = loader;\n    \n    registry = loader.getManagedResourceRegistry();\n    \n    // the RestManager provides metadata about managed resources via the /managed endpoint\n    // and allows you to create new ManagedResources dynamically by PUT'ing to this endpoint\n    endpoint = new RestManagerManagedResource(this);\n    endpoint.loadManagedDataAndNotify(null); // no observers for my endpoint\n    // responds to requests to /config/managed and /schema/managed\n    managed.put(SCHEMA_BASE_PATH+MANAGED_ENDPOINT, endpoint);\n            \n    // init registered managed resources\n    log.debug(\"Initializing {} registered ManagedResources\", registry.registered.size());\n    for (ManagedResourceRegistration reg : registry.registered.values()) {\n      // keep track of this for lookups during request processing\n      managed.put(reg.resourceId, createManagedResource(reg));\n    }\n    \n    // this is for any new registrations that don't come through the API\n    // such as from adding a new fieldType to a managed schema that uses a ManagedResource\n    registry.initializedRestManager = this;\n  }\n\n","sourceOld":"  /**\n   * Initializes the RestManager with the storageIO being optionally created outside of this implementation\n   * such as to use ZooKeeper instead of the local FS. \n   */\n  public void init(SolrResourceLoader loader,\n                   NamedList<String> initArgs, \n                   StorageIO storageIO) \n      throws SolrException\n  {\n    log.info(\"Initializing RestManager with initArgs: \"+initArgs);\n\n    if (storageIO == null)\n      throw new IllegalArgumentException(\n          \"Must provide a valid StorageIO implementation to the RestManager!\");\n    \n    this.storageIO = storageIO;\n    this.loader = loader;\n    \n    registry = loader.getManagedResourceRegistry();\n    \n    // the RestManager provides metadata about managed resources via the /managed endpoint\n    // and allows you to create new ManagedResources dynamically by PUT'ing to this endpoint\n    endpoint = new RestManagerManagedResource(this);\n    endpoint.loadManagedDataAndNotify(null); // no observers for my endpoint\n    // responds to requests to /config/managed and /schema/managed\n    managed.put(SCHEMA_BASE_PATH+MANAGED_ENDPOINT, endpoint);\n            \n    // init registered managed resources\n    log.info(\"Initializing {} registered ManagedResources\", registry.registered.size());\n    for (ManagedResourceRegistration reg : registry.registered.values()) {\n      // keep track of this for lookups during request processing\n      managed.put(reg.resourceId, createManagedResource(reg));\n    }\n    \n    // this is for any new registrations that don't come through the API\n    // such as from adding a new fieldType to a managed schema that uses a ManagedResource\n    registry.initializedRestManager = this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/rest/RestManager#init(SolrResourceLoader,NamedList[String],StorageIO).mjava","pathOld":"solr/core/src/java/org/apache/solr/rest/RestManager#init(SolrResourceLoader,NamedList[String],StorageIO).mjava","sourceNew":"  /**\n   * Initializes the RestManager with the storageIO being optionally created outside of this implementation\n   * such as to use ZooKeeper instead of the local FS. \n   */\n  public void init(SolrResourceLoader loader,\n                   NamedList<String> initArgs, \n                   StorageIO storageIO) \n      throws SolrException\n  {\n    log.debug(\"Initializing RestManager with initArgs: \"+initArgs);\n\n    if (storageIO == null)\n      throw new IllegalArgumentException(\n          \"Must provide a valid StorageIO implementation to the RestManager!\");\n    \n    this.storageIO = storageIO;\n    this.loader = loader;\n    \n    registry = loader.getManagedResourceRegistry();\n    \n    // the RestManager provides metadata about managed resources via the /managed endpoint\n    // and allows you to create new ManagedResources dynamically by PUT'ing to this endpoint\n    endpoint = new RestManagerManagedResource(this);\n    endpoint.loadManagedDataAndNotify(null); // no observers for my endpoint\n    // responds to requests to /config/managed and /schema/managed\n    managed.put(SCHEMA_BASE_PATH+MANAGED_ENDPOINT, endpoint);\n            \n    // init registered managed resources\n    log.debug(\"Initializing {} registered ManagedResources\", registry.registered.size());\n    for (ManagedResourceRegistration reg : registry.registered.values()) {\n      // keep track of this for lookups during request processing\n      managed.put(reg.resourceId, createManagedResource(reg));\n    }\n    \n    // this is for any new registrations that don't come through the API\n    // such as from adding a new fieldType to a managed schema that uses a ManagedResource\n    registry.initializedRestManager = this;\n  }\n\n","sourceOld":"  /**\n   * Initializes the RestManager with the storageIO being optionally created outside of this implementation\n   * such as to use ZooKeeper instead of the local FS. \n   */\n  public void init(SolrResourceLoader loader,\n                   NamedList<String> initArgs, \n                   StorageIO storageIO) \n      throws SolrException\n  {\n    log.info(\"Initializing RestManager with initArgs: \"+initArgs);\n\n    if (storageIO == null)\n      throw new IllegalArgumentException(\n          \"Must provide a valid StorageIO implementation to the RestManager!\");\n    \n    this.storageIO = storageIO;\n    this.loader = loader;\n    \n    registry = loader.getManagedResourceRegistry();\n    \n    // the RestManager provides metadata about managed resources via the /managed endpoint\n    // and allows you to create new ManagedResources dynamically by PUT'ing to this endpoint\n    endpoint = new RestManagerManagedResource(this);\n    endpoint.loadManagedDataAndNotify(null); // no observers for my endpoint\n    // responds to requests to /config/managed and /schema/managed\n    managed.put(SCHEMA_BASE_PATH+MANAGED_ENDPOINT, endpoint);\n            \n    // init registered managed resources\n    log.info(\"Initializing {} registered ManagedResources\", registry.registered.size());\n    for (ManagedResourceRegistration reg : registry.registered.values()) {\n      // keep track of this for lookups during request processing\n      managed.put(reg.resourceId, createManagedResource(reg));\n    }\n    \n    // this is for any new registrations that don't come through the API\n    // such as from adding a new fieldType to a managed schema that uses a ManagedResource\n    registry.initializedRestManager = this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/rest/RestManager#init(SolrResourceLoader,NamedList[String],StorageIO).mjava","pathOld":"solr/core/src/java/org/apache/solr/rest/RestManager#init(SolrResourceLoader,NamedList[String],StorageIO).mjava","sourceNew":"  /**\n   * Initializes the RestManager with the storageIO being optionally created outside of this implementation\n   * such as to use ZooKeeper instead of the local FS. \n   */\n  public void init(SolrResourceLoader loader,\n                   NamedList<String> initArgs, \n                   StorageIO storageIO) \n      throws SolrException\n  {\n    log.debug(\"Initializing RestManager with initArgs: \"+initArgs);\n\n    if (storageIO == null)\n      throw new IllegalArgumentException(\n          \"Must provide a valid StorageIO implementation to the RestManager!\");\n    \n    this.storageIO = storageIO;\n    this.loader = loader;\n    \n    registry = loader.getManagedResourceRegistry();\n    \n    // the RestManager provides metadata about managed resources via the /managed endpoint\n    // and allows you to create new ManagedResources dynamically by PUT'ing to this endpoint\n    endpoint = new RestManagerManagedResource(this);\n    endpoint.loadManagedDataAndNotify(null); // no observers for my endpoint\n    // responds to requests to /config/managed and /schema/managed\n    managed.put(SCHEMA_BASE_PATH+MANAGED_ENDPOINT, endpoint);\n            \n    // init registered managed resources\n    log.debug(\"Initializing {} registered ManagedResources\", registry.registered.size());\n    for (ManagedResourceRegistration reg : registry.registered.values()) {\n      // keep track of this for lookups during request processing\n      managed.put(reg.resourceId, createManagedResource(reg));\n    }\n    \n    // this is for any new registrations that don't come through the API\n    // such as from adding a new fieldType to a managed schema that uses a ManagedResource\n    registry.initializedRestManager = this;\n  }\n\n","sourceOld":"  /**\n   * Initializes the RestManager with the storageIO being optionally created outside of this implementation\n   * such as to use ZooKeeper instead of the local FS. \n   */\n  public void init(SolrResourceLoader loader,\n                   NamedList<String> initArgs, \n                   StorageIO storageIO) \n      throws SolrException\n  {\n    log.info(\"Initializing RestManager with initArgs: \"+initArgs);\n\n    if (storageIO == null)\n      throw new IllegalArgumentException(\n          \"Must provide a valid StorageIO implementation to the RestManager!\");\n    \n    this.storageIO = storageIO;\n    this.loader = loader;\n    \n    registry = loader.getManagedResourceRegistry();\n    \n    // the RestManager provides metadata about managed resources via the /managed endpoint\n    // and allows you to create new ManagedResources dynamically by PUT'ing to this endpoint\n    endpoint = new RestManagerManagedResource(this);\n    endpoint.loadManagedDataAndNotify(null); // no observers for my endpoint\n    // responds to requests to /config/managed and /schema/managed\n    managed.put(SCHEMA_BASE_PATH+MANAGED_ENDPOINT, endpoint);\n            \n    // init registered managed resources\n    log.info(\"Initializing {} registered ManagedResources\", registry.registered.size());\n    for (ManagedResourceRegistration reg : registry.registered.values()) {\n      // keep track of this for lookups during request processing\n      managed.put(reg.resourceId, createManagedResource(reg));\n    }\n    \n    // this is for any new registrations that don't come through the API\n    // such as from adding a new fieldType to a managed schema that uses a ManagedResource\n    registry.initializedRestManager = this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"140be51d03394488536f4aacedace29f9b318347","date":1587170432,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/rest/RestManager#init(SolrResourceLoader,NamedList[String],StorageIO).mjava","pathOld":"solr/core/src/java/org/apache/solr/rest/RestManager#init(SolrResourceLoader,NamedList[String],StorageIO).mjava","sourceNew":"  /**\n   * Initializes the RestManager with the storageIO being optionally created outside of this implementation\n   * such as to use ZooKeeper instead of the local FS. \n   */\n  public void init(SolrResourceLoader loader,\n                   NamedList<String> initArgs, \n                   StorageIO storageIO) \n      throws SolrException\n  {\n    log.debug(\"Initializing RestManager with initArgs: {}\", initArgs);\n\n    if (storageIO == null)\n      throw new IllegalArgumentException(\n          \"Must provide a valid StorageIO implementation to the RestManager!\");\n    \n    this.storageIO = storageIO;\n    this.loader = loader;\n    \n    registry = loader.getManagedResourceRegistry();\n    \n    // the RestManager provides metadata about managed resources via the /managed endpoint\n    // and allows you to create new ManagedResources dynamically by PUT'ing to this endpoint\n    endpoint = new RestManagerManagedResource(this);\n    endpoint.loadManagedDataAndNotify(null); // no observers for my endpoint\n    // responds to requests to /config/managed and /schema/managed\n    managed.put(SCHEMA_BASE_PATH+MANAGED_ENDPOINT, endpoint);\n            \n    // init registered managed resources\n    if (log.isDebugEnabled()) {\n      log.debug(\"Initializing {} registered ManagedResources\", registry.registered.size());\n    }\n    for (ManagedResourceRegistration reg : registry.registered.values()) {\n      // keep track of this for lookups during request processing\n      managed.put(reg.resourceId, createManagedResource(reg));\n    }\n    \n    // this is for any new registrations that don't come through the API\n    // such as from adding a new fieldType to a managed schema that uses a ManagedResource\n    registry.initializedRestManager = this;\n  }\n\n","sourceOld":"  /**\n   * Initializes the RestManager with the storageIO being optionally created outside of this implementation\n   * such as to use ZooKeeper instead of the local FS. \n   */\n  public void init(SolrResourceLoader loader,\n                   NamedList<String> initArgs, \n                   StorageIO storageIO) \n      throws SolrException\n  {\n    log.debug(\"Initializing RestManager with initArgs: \"+initArgs);\n\n    if (storageIO == null)\n      throw new IllegalArgumentException(\n          \"Must provide a valid StorageIO implementation to the RestManager!\");\n    \n    this.storageIO = storageIO;\n    this.loader = loader;\n    \n    registry = loader.getManagedResourceRegistry();\n    \n    // the RestManager provides metadata about managed resources via the /managed endpoint\n    // and allows you to create new ManagedResources dynamically by PUT'ing to this endpoint\n    endpoint = new RestManagerManagedResource(this);\n    endpoint.loadManagedDataAndNotify(null); // no observers for my endpoint\n    // responds to requests to /config/managed and /schema/managed\n    managed.put(SCHEMA_BASE_PATH+MANAGED_ENDPOINT, endpoint);\n            \n    // init registered managed resources\n    log.debug(\"Initializing {} registered ManagedResources\", registry.registered.size());\n    for (ManagedResourceRegistration reg : registry.registered.values()) {\n      // keep track of this for lookups during request processing\n      managed.put(reg.resourceId, createManagedResource(reg));\n    }\n    \n    // this is for any new registrations that don't come through the API\n    // such as from adding a new fieldType to a managed schema that uses a ManagedResource\n    registry.initializedRestManager = this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89fd5bce15c8e0ca1b10c9988cff9fdcc88c152b","date":1601832109,"type":3,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/rest/RestManager#init(SolrResourceLoader,NamedList[String],StorageIO).mjava","pathOld":"solr/core/src/java/org/apache/solr/rest/RestManager#init(SolrResourceLoader,NamedList[String],StorageIO).mjava","sourceNew":"  /**\n   * Initializes the RestManager with the storageIO being optionally created outside of this implementation\n   * such as to use ZooKeeper instead of the local FS. \n   */\n  public void init(SolrResourceLoader loader,\n                   NamedList<String> initArgs, \n                   StorageIO storageIO) \n      throws SolrException\n  {\n    log.debug(\"Initializing RestManager with initArgs: {}\", initArgs);\n\n    if (storageIO == null)\n      throw new IllegalArgumentException(\n          \"Must provide a valid StorageIO implementation to the RestManager!\");\n    \n    this.storageIO = storageIO;\n    this.loader = loader;\n\n    registry = loader.getManagedResourceRegistry();\n    \n    // the RestManager provides metadata about managed resources via the /managed endpoint\n    // and allows you to create new ManagedResources dynamically by PUT'ing to this endpoint\n    endpoint = new RestManagerManagedResource(this);\n    endpoint.loadManagedDataAndNotify(null); // no observers for my endpoint\n    // responds to requests to /config/managed and /schema/managed\n    managed.put(SCHEMA_BASE_PATH+MANAGED_ENDPOINT, endpoint);\n            \n    // init registered managed resources\n    if (log.isDebugEnabled()) {\n      log.debug(\"Initializing {} registered ManagedResources\", registry.registered.size());\n    }\n    for (ManagedResourceRegistration reg : registry.registered.values()) {\n      // keep track of this for lookups during request processing\n      managed.put(reg.resourceId, createManagedResource(reg));\n    }\n    \n    // this is for any new registrations that don't come through the API\n    // such as from adding a new fieldType to a managed schema that uses a ManagedResource\n    registry.initializedRestManager = this;\n  }\n\n","sourceOld":"  /**\n   * Initializes the RestManager with the storageIO being optionally created outside of this implementation\n   * such as to use ZooKeeper instead of the local FS. \n   */\n  public void init(SolrResourceLoader loader,\n                   NamedList<String> initArgs, \n                   StorageIO storageIO) \n      throws SolrException\n  {\n    log.debug(\"Initializing RestManager with initArgs: {}\", initArgs);\n\n    if (storageIO == null)\n      throw new IllegalArgumentException(\n          \"Must provide a valid StorageIO implementation to the RestManager!\");\n    \n    this.storageIO = storageIO;\n    this.loader = loader;\n    \n    registry = loader.getManagedResourceRegistry();\n    \n    // the RestManager provides metadata about managed resources via the /managed endpoint\n    // and allows you to create new ManagedResources dynamically by PUT'ing to this endpoint\n    endpoint = new RestManagerManagedResource(this);\n    endpoint.loadManagedDataAndNotify(null); // no observers for my endpoint\n    // responds to requests to /config/managed and /schema/managed\n    managed.put(SCHEMA_BASE_PATH+MANAGED_ENDPOINT, endpoint);\n            \n    // init registered managed resources\n    if (log.isDebugEnabled()) {\n      log.debug(\"Initializing {} registered ManagedResources\", registry.registered.size());\n    }\n    for (ManagedResourceRegistration reg : registry.registered.values()) {\n      // keep track of this for lookups during request processing\n      managed.put(reg.resourceId, createManagedResource(reg));\n    }\n    \n    // this is for any new registrations that don't come through the API\n    // such as from adding a new fieldType to a managed schema that uses a ManagedResource\n    registry.initializedRestManager = this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"89fd5bce15c8e0ca1b10c9988cff9fdcc88c152b":["140be51d03394488536f4aacedace29f9b318347"],"0d62172dd2fc1195c7e475550ac394a9948a18ae":["858c0f62e7b20002e4d94702c510512fb6292988"],"afb6bf9ce227ab6aac5068547e286ecc958b8b9d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"140be51d03394488536f4aacedace29f9b318347":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"858c0f62e7b20002e4d94702c510512fb6292988":["bdf16ebe435fc9daea90a73b8683ff001c6d3523"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["858c0f62e7b20002e4d94702c510512fb6292988","0d62172dd2fc1195c7e475550ac394a9948a18ae"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["858c0f62e7b20002e4d94702c510512fb6292988","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["89fd5bce15c8e0ca1b10c9988cff9fdcc88c152b"],"bdf16ebe435fc9daea90a73b8683ff001c6d3523":["afb6bf9ce227ab6aac5068547e286ecc958b8b9d"]},"commit2Childs":{"89fd5bce15c8e0ca1b10c9988cff9fdcc88c152b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0d62172dd2fc1195c7e475550ac394a9948a18ae":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"afb6bf9ce227ab6aac5068547e286ecc958b8b9d":["bdf16ebe435fc9daea90a73b8683ff001c6d3523"],"140be51d03394488536f4aacedace29f9b318347":["89fd5bce15c8e0ca1b10c9988cff9fdcc88c152b"],"858c0f62e7b20002e4d94702c510512fb6292988":["0d62172dd2fc1195c7e475550ac394a9948a18ae","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["afb6bf9ce227ab6aac5068547e286ecc958b8b9d"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["140be51d03394488536f4aacedace29f9b318347","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"bdf16ebe435fc9daea90a73b8683ff001c6d3523":["858c0f62e7b20002e4d94702c510512fb6292988"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}