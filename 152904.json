{"path":"solr/core/src/test/org/apache/solr/cloud/ZkShardTermsTest#testCoreRemovalWhileRecovering().mjava","commits":[{"id":"79715cc168db6c41f12a0d85ca105f6c2887dcf4","date":1572618893,"type":0,"author":"Houston Putman","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkShardTermsTest#testCoreRemovalWhileRecovering().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testCoreRemovalWhileRecovering() {\n    String collection = \"recoveringFlag\";\n    try (ZkShardTerms zkShardTerms = new ZkShardTerms(collection, \"shard1\", cluster.getZkClient())) {\n      // List all possible orders of ensureTermIsHigher, startRecovering, doneRecovering\n      zkShardTerms.registerTerm(\"replica1_rem\");\n      zkShardTerms.registerTerm(\"replica2_rem\");\n\n      // normal case when leader failed to send an update to replica\n      zkShardTerms.ensureTermsIsHigher(\"replica1_rem\", Collections.singleton(\"replica2_rem\"));\n      zkShardTerms.startRecovering(\"replica2_rem\");\n      assertEquals(zkShardTerms.getTerm(\"replica2_rem\"), 1);\n      assertEquals(zkShardTerms.getTerm(\"replica2_rem_recovering\"), 0);\n\n      // Remove core, and check if the correct core was removed as well as the recovering term for that core\n      zkShardTerms.removeTerm(\"replica2_rem\");\n      assertEquals(zkShardTerms.getTerm(\"replica1_rem\"), 1);\n      assertEquals(zkShardTerms.getTerm(\"replica2_rem\"), -1);\n      assertEquals(zkShardTerms.getTerm(\"replica2_rem_recovering\"), -1);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7f423b306a390be4cab59694121e397a4c9b4ac","date":1573061095,"type":3,"author":"Houston Putman","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkShardTermsTest#testCoreRemovalWhileRecovering().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ZkShardTermsTest#testCoreRemovalWhileRecovering().mjava","sourceNew":"  @Test\n  public void testCoreRemovalWhileRecovering() {\n    String collection = \"recoveringFlagRemoval\";\n    try (ZkShardTerms zkShardTerms = new ZkShardTerms(collection, \"shard1\", cluster.getZkClient())) {\n      // List all possible orders of ensureTermIsHigher, startRecovering, doneRecovering\n      zkShardTerms.registerTerm(\"replica1_rem\");\n      zkShardTerms.registerTerm(\"replica2_rem\");\n\n      // normal case when leader failed to send an update to replica\n      zkShardTerms.ensureTermsIsHigher(\"replica1_rem\", Collections.singleton(\"replica2_rem\"));\n      zkShardTerms.startRecovering(\"replica2_rem\");\n      assertEquals(zkShardTerms.getTerm(\"replica2_rem\"), 1);\n      assertEquals(zkShardTerms.getTerm(\"replica2_rem_recovering\"), 0);\n\n      // Remove core, and check if the correct core was removed as well as the recovering term for that core\n      zkShardTerms.removeTerm(\"replica2_rem\");\n      assertEquals(zkShardTerms.getTerm(\"replica1_rem\"), 1);\n      assertEquals(zkShardTerms.getTerm(\"replica2_rem\"), -1);\n      assertEquals(zkShardTerms.getTerm(\"replica2_rem_recovering\"), -1);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testCoreRemovalWhileRecovering() {\n    String collection = \"recoveringFlag\";\n    try (ZkShardTerms zkShardTerms = new ZkShardTerms(collection, \"shard1\", cluster.getZkClient())) {\n      // List all possible orders of ensureTermIsHigher, startRecovering, doneRecovering\n      zkShardTerms.registerTerm(\"replica1_rem\");\n      zkShardTerms.registerTerm(\"replica2_rem\");\n\n      // normal case when leader failed to send an update to replica\n      zkShardTerms.ensureTermsIsHigher(\"replica1_rem\", Collections.singleton(\"replica2_rem\"));\n      zkShardTerms.startRecovering(\"replica2_rem\");\n      assertEquals(zkShardTerms.getTerm(\"replica2_rem\"), 1);\n      assertEquals(zkShardTerms.getTerm(\"replica2_rem_recovering\"), 0);\n\n      // Remove core, and check if the correct core was removed as well as the recovering term for that core\n      zkShardTerms.removeTerm(\"replica2_rem\");\n      assertEquals(zkShardTerms.getTerm(\"replica1_rem\"), 1);\n      assertEquals(zkShardTerms.getTerm(\"replica2_rem\"), -1);\n      assertEquals(zkShardTerms.getTerm(\"replica2_rem_recovering\"), -1);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"79715cc168db6c41f12a0d85ca105f6c2887dcf4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e7f423b306a390be4cab59694121e397a4c9b4ac"],"e7f423b306a390be4cab59694121e397a4c9b4ac":["79715cc168db6c41f12a0d85ca105f6c2887dcf4"]},"commit2Childs":{"79715cc168db6c41f12a0d85ca105f6c2887dcf4":["e7f423b306a390be4cab59694121e397a4c9b4ac"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["79715cc168db6c41f12a0d85ca105f6c2887dcf4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"e7f423b306a390be4cab59694121e397a4c9b4ac":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}