{"path":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/TemplateString#fillTokens(VariableResolver).mjava","commits":[{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/TemplateString#fillTokens(VariableResolver).mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/TemplateString#fillTokens(VariableResolver).mjava","sourceNew":"  private String fillTokens(VariableResolver resolver) {\n    String[] s = new String[variables.size()];\n    for (int i = 0; i < variables.size(); i++) {\n      Object val = resolver.resolve(variables.get(i));\n      s[i] = val == null ? \"\" : getObjectAsString(val);\n    }\n\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < pcs.size(); i++) {\n      sb.append(pcs.get(i));\n      if (i < s.length) {\n        sb.append(s[i]);\n      }\n    }\n\n    return sb.toString();\n  }\n\n","sourceOld":"  private String fillTokens(VariableResolver resolver) {\n    String[] s = new String[variables.size()];\n    for (int i = 0; i < variables.size(); i++) {\n      Object val = resolver.resolve(variables.get(i));\n      s[i] = val == null ? \"\" : getObjectAsString(val);\n    }\n\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < pcs.size(); i++) {\n      sb.append(pcs.get(i));\n      if (i < s.length) {\n        sb.append(s[i]);\n      }\n    }\n\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/TemplateString#fillTokens(VariableResolver).mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/TemplateString#fillTokens(VariableResolver).mjava","sourceNew":"  private String fillTokens(VariableResolver resolver) {\n    String[] s = new String[variables.size()];\n    for (int i = 0; i < variables.size(); i++) {\n      Object val = resolver.resolve(variables.get(i));\n      s[i] = val == null ? \"\" : getObjectAsString(val);\n    }\n\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < pcs.size(); i++) {\n      sb.append(pcs.get(i));\n      if (i < s.length) {\n        sb.append(s[i]);\n      }\n    }\n\n    return sb.toString();\n  }\n\n","sourceOld":"  private String fillTokens(VariableResolver resolver) {\n    String[] s = new String[variables.size()];\n    for (int i = 0; i < variables.size(); i++) {\n      Object val = resolver.resolve(variables.get(i));\n      s[i] = val == null ? \"\" : getObjectAsString(val);\n    }\n\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < pcs.size(); i++) {\n      sb.append(pcs.get(i));\n      if (i < s.length) {\n        sb.append(s[i]);\n      }\n    }\n\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b4804614e0358954d5d9f51128fcf3cd79e6e25b","date":1352831451,"type":3,"author":"James Dyer","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/TemplateString#fillTokens(VariableResolver).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/TemplateString#fillTokens(VariableResolver).mjava","sourceNew":"  private String fillTokens(VariableResolver resolver) {\n    String[] s = new String[variables.size()];\n    for (int i = 0; i < variables.size(); i++) {\n      Object val = resolver.resolve(variables.get(i));\n      s[i] = val == null ? \"\" : val.toString();\n    }\n\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < pcs.size(); i++) {\n      sb.append(pcs.get(i));\n      if (i < s.length) {\n        sb.append(s[i]);\n      }\n    }\n\n    return sb.toString();\n  }\n\n","sourceOld":"  private String fillTokens(VariableResolver resolver) {\n    String[] s = new String[variables.size()];\n    for (int i = 0; i < variables.size(); i++) {\n      Object val = resolver.resolve(variables.get(i));\n      s[i] = val == null ? \"\" : getObjectAsString(val);\n    }\n\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < pcs.size(); i++) {\n      sb.append(pcs.get(i));\n      if (i < s.length) {\n        sb.append(s[i]);\n      }\n    }\n\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c7b0ae5716b6c2044195a818e9ae58205175659","date":1353342230,"type":4,"author":"James Dyer","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/TemplateString#fillTokens(VariableResolver).mjava","sourceNew":null,"sourceOld":"  private String fillTokens(VariableResolver resolver) {\n    String[] s = new String[variables.size()];\n    for (int i = 0; i < variables.size(); i++) {\n      Object val = resolver.resolve(variables.get(i));\n      s[i] = val == null ? \"\" : val.toString();\n    }\n\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < pcs.size(); i++) {\n      sb.append(pcs.get(i));\n      if (i < s.length) {\n        sb.append(s[i]);\n      }\n    }\n\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/TemplateString#fillTokens(VariableResolver).mjava","sourceNew":null,"sourceOld":"  private String fillTokens(VariableResolver resolver) {\n    String[] s = new String[variables.size()];\n    for (int i = 0; i < variables.size(); i++) {\n      Object val = resolver.resolve(variables.get(i));\n      s[i] = val == null ? \"\" : getObjectAsString(val);\n    }\n\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < pcs.size(); i++) {\n      sb.append(pcs.get(i));\n      if (i < s.length) {\n        sb.append(s[i]);\n      }\n    }\n\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b4804614e0358954d5d9f51128fcf3cd79e6e25b":["c26f00b574427b55127e869b935845554afde1fa"],"7c7b0ae5716b6c2044195a818e9ae58205175659":["b4804614e0358954d5d9f51128fcf3cd79e6e25b"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["c26f00b574427b55127e869b935845554afde1fa","7c7b0ae5716b6c2044195a818e9ae58205175659"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7c7b0ae5716b6c2044195a818e9ae58205175659"]},"commit2Childs":{"b4804614e0358954d5d9f51128fcf3cd79e6e25b":["7c7b0ae5716b6c2044195a818e9ae58205175659"],"7c7b0ae5716b6c2044195a818e9ae58205175659":["407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["b4804614e0358954d5d9f51128fcf3cd79e6e25b","407687e67faf6e1f02a211ca078d8e3eed631027"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","c26f00b574427b55127e869b935845554afde1fa"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}