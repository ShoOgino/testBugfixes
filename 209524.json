{"path":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/EntityProcessorWrapper#applyTransformer(Map[String,Object]).mjava","commits":[{"id":"758fdd153bb361b47f22db79ace6af6f6b7b9330","date":1240213015,"type":1,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/EntityProcessorWrapper#applyTransformer(Map[String,Object]).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/EntityProcessorBase#applyTransformer(Map[String,Object]).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  protected Map<String, Object> applyTransformer(Map<String, Object> row) {\n    if (transformers == null)\n      loadTransformers();\n    if (transformers == Collections.EMPTY_LIST)\n      return row;\n    Map<String, Object> transformedRow = row;\n    List<Map<String, Object>> rows = null;\n    boolean stopTransform = checkStopTransform(row);\n    for (Transformer t : transformers) {\n      if (stopTransform) break;\n      try {\n        if (rows != null) {\n          List<Map<String, Object>> tmpRows = new ArrayList<Map<String, Object>>();\n          for (Map<String, Object> map : rows) {\n            resolver.addNamespace(entityName, map);\n            Object o = t.transformRow(map, context);\n            if (o == null)\n              continue;\n            if (o instanceof Map) {\n              Map oMap = (Map) o;\n              stopTransform = checkStopTransform(oMap);\n              tmpRows.add((Map) o);\n            } else if (o instanceof List) {\n              tmpRows.addAll((List) o);\n            } else {\n              log.error(\"Transformer must return Map<String, Object> or a List<Map<String, Object>>\");\n            }\n          }\n          rows = tmpRows;\n        } else {\n          resolver.addNamespace(entityName, transformedRow);\n          Object o = t.transformRow(transformedRow, context);\n          if (o == null)\n            return null;\n          if (o instanceof Map) {\n            Map oMap = (Map) o;\n            stopTransform = checkStopTransform(oMap);\n            transformedRow = (Map) o;\n          } else if (o instanceof List) {\n            rows = (List) o;\n          } else {\n            log.error(\"Transformer must return Map<String, Object> or a List<Map<String, Object>>\");\n          }\n        }\n      } catch (Exception e) {\n        log.warn(\"transformer threw error\", e);\n        if (ABORT.equals(onError)) {\n          wrapAndThrow(SEVERE, e);\n        } else if (SKIP.equals(onError)) {\n          wrapAndThrow(DataImportHandlerException.SKIP, e);\n        }\n        // onError = continue\n      }\n    }\n    if (rows == null) {\n      return transformedRow;\n    } else {\n      rowcache = rows;\n      return getFromRowCache();\n    }\n\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  protected Map<String, Object> applyTransformer(Map<String, Object> row) {\n    if (transformers == null)\n      loadTransformers();\n    if (transformers == Collections.EMPTY_LIST)\n      return row;\n    Map<String, Object> transformedRow = row;\n    List<Map<String, Object>> rows = null;\n    boolean stopTransform = checkStopTransform(row);\n    for (Transformer t : transformers) {\n      if(stopTransform) break;\n      try {\n        if (rows != null) {\n          List<Map<String, Object>> tmpRows = new ArrayList<Map<String, Object>>();\n          for (Map<String, Object> map : rows) {\n            resolver.addNamespace(entityName, map);\n            Object o = t.transformRow(map, context);\n            if (o == null)\n              continue;\n            if (o instanceof Map) {\n              Map oMap = (Map) o;\n              stopTransform = checkStopTransform(oMap);\n              tmpRows.add((Map) o);\n            } else if (o instanceof List) {\n              tmpRows.addAll((List) o);\n            } else {\n              log.error(\"Transformer must return Map<String, Object> or a List<Map<String, Object>>\");\n            }\n          }\n          rows = tmpRows;\n        } else {\n          resolver.addNamespace(entityName, transformedRow);\n          Object o = t.transformRow(transformedRow, context);\n          if (o == null)\n            return null;\n          if (o instanceof Map) {\n            Map oMap = (Map) o;\n            stopTransform = checkStopTransform(oMap);\n            transformedRow = (Map) o;\n          } else if (o instanceof List) {\n            rows = (List) o;\n          } else {\n            log.error(\"Transformer must return Map<String, Object> or a List<Map<String, Object>>\");\n          }\n        }\n      } catch (Exception e) {\n        log.warn(\"transformer threw error\", e);\n        if (ABORT.equals(onError)) {\n          wrapAndThrow(SEVERE, e);\n        } else if (SKIP.equals(onError)) {\n          wrapAndThrow(DataImportHandlerException.SKIP, e);\n        }\n        // onError = continue\n      }\n    }\n    if (rows == null) {\n      return transformedRow;\n    } else {\n      rowcache = rows;\n      return getFromRowCache();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ed55495a0b2d338e8cf9c537712c96ed11804049","date":1245995066,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/EntityProcessorWrapper#applyTransformer(Map[String,Object]).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/EntityProcessorWrapper#applyTransformer(Map[String,Object]).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  protected Map<String, Object> applyTransformer(Map<String, Object> row) {\n    if(row == null) return null;\n    if (transformers == null)\n      loadTransformers();\n    if (transformers == Collections.EMPTY_LIST)\n      return row;\n    Map<String, Object> transformedRow = row;\n    List<Map<String, Object>> rows = null;\n    boolean stopTransform = checkStopTransform(row);\n    for (Transformer t : transformers) {\n      if (stopTransform) break;\n      try {\n        if (rows != null) {\n          List<Map<String, Object>> tmpRows = new ArrayList<Map<String, Object>>();\n          for (Map<String, Object> map : rows) {\n            resolver.addNamespace(entityName, map);\n            Object o = t.transformRow(map, context);\n            if (o == null)\n              continue;\n            if (o instanceof Map) {\n              Map oMap = (Map) o;\n              stopTransform = checkStopTransform(oMap);\n              tmpRows.add((Map) o);\n            } else if (o instanceof List) {\n              tmpRows.addAll((List) o);\n            } else {\n              log.error(\"Transformer must return Map<String, Object> or a List<Map<String, Object>>\");\n            }\n          }\n          rows = tmpRows;\n        } else {\n          resolver.addNamespace(entityName, transformedRow);\n          Object o = t.transformRow(transformedRow, context);\n          if (o == null)\n            return null;\n          if (o instanceof Map) {\n            Map oMap = (Map) o;\n            stopTransform = checkStopTransform(oMap);\n            transformedRow = (Map) o;\n          } else if (o instanceof List) {\n            rows = (List) o;\n          } else {\n            log.error(\"Transformer must return Map<String, Object> or a List<Map<String, Object>>\");\n          }\n        }\n      } catch (Exception e) {\n        log.warn(\"transformer threw error\", e);\n        if (ABORT.equals(onError)) {\n          wrapAndThrow(SEVERE, e);\n        } else if (SKIP.equals(onError)) {\n          wrapAndThrow(DataImportHandlerException.SKIP, e);\n        }\n        // onError = continue\n      }\n    }\n    if (rows == null) {\n      return transformedRow;\n    } else {\n      rowcache = rows;\n      return getFromRowCache();\n    }\n\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  protected Map<String, Object> applyTransformer(Map<String, Object> row) {\n    if (transformers == null)\n      loadTransformers();\n    if (transformers == Collections.EMPTY_LIST)\n      return row;\n    Map<String, Object> transformedRow = row;\n    List<Map<String, Object>> rows = null;\n    boolean stopTransform = checkStopTransform(row);\n    for (Transformer t : transformers) {\n      if (stopTransform) break;\n      try {\n        if (rows != null) {\n          List<Map<String, Object>> tmpRows = new ArrayList<Map<String, Object>>();\n          for (Map<String, Object> map : rows) {\n            resolver.addNamespace(entityName, map);\n            Object o = t.transformRow(map, context);\n            if (o == null)\n              continue;\n            if (o instanceof Map) {\n              Map oMap = (Map) o;\n              stopTransform = checkStopTransform(oMap);\n              tmpRows.add((Map) o);\n            } else if (o instanceof List) {\n              tmpRows.addAll((List) o);\n            } else {\n              log.error(\"Transformer must return Map<String, Object> or a List<Map<String, Object>>\");\n            }\n          }\n          rows = tmpRows;\n        } else {\n          resolver.addNamespace(entityName, transformedRow);\n          Object o = t.transformRow(transformedRow, context);\n          if (o == null)\n            return null;\n          if (o instanceof Map) {\n            Map oMap = (Map) o;\n            stopTransform = checkStopTransform(oMap);\n            transformedRow = (Map) o;\n          } else if (o instanceof List) {\n            rows = (List) o;\n          } else {\n            log.error(\"Transformer must return Map<String, Object> or a List<Map<String, Object>>\");\n          }\n        }\n      } catch (Exception e) {\n        log.warn(\"transformer threw error\", e);\n        if (ABORT.equals(onError)) {\n          wrapAndThrow(SEVERE, e);\n        } else if (SKIP.equals(onError)) {\n          wrapAndThrow(DataImportHandlerException.SKIP, e);\n        }\n        // onError = continue\n      }\n    }\n    if (rows == null) {\n      return transformedRow;\n    } else {\n      rowcache = rows;\n      return getFromRowCache();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"153cc06382fdc94d0ea3db127eab860ae4310525","date":1260181667,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/EntityProcessorWrapper#applyTransformer(Map[String,Object]).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/EntityProcessorWrapper#applyTransformer(Map[String,Object]).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  protected Map<String, Object> applyTransformer(Map<String, Object> row) {\n    if(row == null) return null;\n    if (transformers == null)\n      loadTransformers();\n    if (transformers == Collections.EMPTY_LIST)\n      return row;\n    Map<String, Object> transformedRow = row;\n    List<Map<String, Object>> rows = null;\n    boolean stopTransform = checkStopTransform(row);\n    VariableResolverImpl resolver = (VariableResolverImpl) context.getVariableResolver();\n    for (Transformer t : transformers) {\n      if (stopTransform) break;\n      try {\n        if (rows != null) {\n          List<Map<String, Object>> tmpRows = new ArrayList<Map<String, Object>>();\n          for (Map<String, Object> map : rows) {\n            resolver.addNamespace(entityName, map);\n            Object o = t.transformRow(map, context);\n            if (o == null)\n              continue;\n            if (o instanceof Map) {\n              Map oMap = (Map) o;\n              stopTransform = checkStopTransform(oMap);\n              tmpRows.add((Map) o);\n            } else if (o instanceof List) {\n              tmpRows.addAll((List) o);\n            } else {\n              log.error(\"Transformer must return Map<String, Object> or a List<Map<String, Object>>\");\n            }\n          }\n          rows = tmpRows;\n        } else {\n          resolver.addNamespace(entityName, transformedRow);\n          Object o = t.transformRow(transformedRow, context);\n          if (o == null)\n            return null;\n          if (o instanceof Map) {\n            Map oMap = (Map) o;\n            stopTransform = checkStopTransform(oMap);\n            transformedRow = (Map) o;\n          } else if (o instanceof List) {\n            rows = (List) o;\n          } else {\n            log.error(\"Transformer must return Map<String, Object> or a List<Map<String, Object>>\");\n          }\n        }\n      } catch (Exception e) {\n        log.warn(\"transformer threw error\", e);\n        if (ABORT.equals(onError)) {\n          wrapAndThrow(SEVERE, e);\n        } else if (SKIP.equals(onError)) {\n          wrapAndThrow(DataImportHandlerException.SKIP, e);\n        }\n        // onError = continue\n      }\n    }\n    if (rows == null) {\n      return transformedRow;\n    } else {\n      rowcache = rows;\n      return getFromRowCache();\n    }\n\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  protected Map<String, Object> applyTransformer(Map<String, Object> row) {\n    if(row == null) return null;\n    if (transformers == null)\n      loadTransformers();\n    if (transformers == Collections.EMPTY_LIST)\n      return row;\n    Map<String, Object> transformedRow = row;\n    List<Map<String, Object>> rows = null;\n    boolean stopTransform = checkStopTransform(row);\n    for (Transformer t : transformers) {\n      if (stopTransform) break;\n      try {\n        if (rows != null) {\n          List<Map<String, Object>> tmpRows = new ArrayList<Map<String, Object>>();\n          for (Map<String, Object> map : rows) {\n            resolver.addNamespace(entityName, map);\n            Object o = t.transformRow(map, context);\n            if (o == null)\n              continue;\n            if (o instanceof Map) {\n              Map oMap = (Map) o;\n              stopTransform = checkStopTransform(oMap);\n              tmpRows.add((Map) o);\n            } else if (o instanceof List) {\n              tmpRows.addAll((List) o);\n            } else {\n              log.error(\"Transformer must return Map<String, Object> or a List<Map<String, Object>>\");\n            }\n          }\n          rows = tmpRows;\n        } else {\n          resolver.addNamespace(entityName, transformedRow);\n          Object o = t.transformRow(transformedRow, context);\n          if (o == null)\n            return null;\n          if (o instanceof Map) {\n            Map oMap = (Map) o;\n            stopTransform = checkStopTransform(oMap);\n            transformedRow = (Map) o;\n          } else if (o instanceof List) {\n            rows = (List) o;\n          } else {\n            log.error(\"Transformer must return Map<String, Object> or a List<Map<String, Object>>\");\n          }\n        }\n      } catch (Exception e) {\n        log.warn(\"transformer threw error\", e);\n        if (ABORT.equals(onError)) {\n          wrapAndThrow(SEVERE, e);\n        } else if (SKIP.equals(onError)) {\n          wrapAndThrow(DataImportHandlerException.SKIP, e);\n        }\n        // onError = continue\n      }\n    }\n    if (rows == null) {\n      return transformedRow;\n    } else {\n      rowcache = rows;\n      return getFromRowCache();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/EntityProcessorWrapper#applyTransformer(Map[String,Object]).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/EntityProcessorWrapper#applyTransformer(Map[String,Object]).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  protected Map<String, Object> applyTransformer(Map<String, Object> row) {\n    if(row == null) return null;\n    if (transformers == null)\n      loadTransformers();\n    if (transformers == Collections.EMPTY_LIST)\n      return row;\n    Map<String, Object> transformedRow = row;\n    List<Map<String, Object>> rows = null;\n    boolean stopTransform = checkStopTransform(row);\n    VariableResolverImpl resolver = (VariableResolverImpl) context.getVariableResolver();\n    for (Transformer t : transformers) {\n      if (stopTransform) break;\n      try {\n        if (rows != null) {\n          List<Map<String, Object>> tmpRows = new ArrayList<Map<String, Object>>();\n          for (Map<String, Object> map : rows) {\n            resolver.addNamespace(entityName, map);\n            Object o = t.transformRow(map, context);\n            if (o == null)\n              continue;\n            if (o instanceof Map) {\n              Map oMap = (Map) o;\n              stopTransform = checkStopTransform(oMap);\n              tmpRows.add((Map) o);\n            } else if (o instanceof List) {\n              tmpRows.addAll((List) o);\n            } else {\n              log.error(\"Transformer must return Map<String, Object> or a List<Map<String, Object>>\");\n            }\n          }\n          rows = tmpRows;\n        } else {\n          resolver.addNamespace(entityName, transformedRow);\n          Object o = t.transformRow(transformedRow, context);\n          if (o == null)\n            return null;\n          if (o instanceof Map) {\n            Map oMap = (Map) o;\n            stopTransform = checkStopTransform(oMap);\n            transformedRow = (Map) o;\n          } else if (o instanceof List) {\n            rows = (List) o;\n          } else {\n            log.error(\"Transformer must return Map<String, Object> or a List<Map<String, Object>>\");\n          }\n        }\n      } catch (Exception e) {\n        log.warn(\"transformer threw error\", e);\n        if (ABORT.equals(onError)) {\n          wrapAndThrow(SEVERE, e);\n        } else if (SKIP.equals(onError)) {\n          wrapAndThrow(DataImportHandlerException.SKIP, e);\n        }\n        // onError = continue\n      }\n    }\n    if (rows == null) {\n      return transformedRow;\n    } else {\n      rowcache = rows;\n      return getFromRowCache();\n    }\n\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  protected Map<String, Object> applyTransformer(Map<String, Object> row) {\n    if(row == null) return null;\n    if (transformers == null)\n      loadTransformers();\n    if (transformers == Collections.EMPTY_LIST)\n      return row;\n    Map<String, Object> transformedRow = row;\n    List<Map<String, Object>> rows = null;\n    boolean stopTransform = checkStopTransform(row);\n    VariableResolverImpl resolver = (VariableResolverImpl) context.getVariableResolver();\n    for (Transformer t : transformers) {\n      if (stopTransform) break;\n      try {\n        if (rows != null) {\n          List<Map<String, Object>> tmpRows = new ArrayList<Map<String, Object>>();\n          for (Map<String, Object> map : rows) {\n            resolver.addNamespace(entityName, map);\n            Object o = t.transformRow(map, context);\n            if (o == null)\n              continue;\n            if (o instanceof Map) {\n              Map oMap = (Map) o;\n              stopTransform = checkStopTransform(oMap);\n              tmpRows.add((Map) o);\n            } else if (o instanceof List) {\n              tmpRows.addAll((List) o);\n            } else {\n              log.error(\"Transformer must return Map<String, Object> or a List<Map<String, Object>>\");\n            }\n          }\n          rows = tmpRows;\n        } else {\n          resolver.addNamespace(entityName, transformedRow);\n          Object o = t.transformRow(transformedRow, context);\n          if (o == null)\n            return null;\n          if (o instanceof Map) {\n            Map oMap = (Map) o;\n            stopTransform = checkStopTransform(oMap);\n            transformedRow = (Map) o;\n          } else if (o instanceof List) {\n            rows = (List) o;\n          } else {\n            log.error(\"Transformer must return Map<String, Object> or a List<Map<String, Object>>\");\n          }\n        }\n      } catch (Exception e) {\n        log.warn(\"transformer threw error\", e);\n        if (ABORT.equals(onError)) {\n          wrapAndThrow(SEVERE, e);\n        } else if (SKIP.equals(onError)) {\n          wrapAndThrow(DataImportHandlerException.SKIP, e);\n        }\n        // onError = continue\n      }\n    }\n    if (rows == null) {\n      return transformedRow;\n    } else {\n      rowcache = rows;\n      return getFromRowCache();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ed55495a0b2d338e8cf9c537712c96ed11804049":["758fdd153bb361b47f22db79ace6af6f6b7b9330"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"758fdd153bb361b47f22db79ace6af6f6b7b9330":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"ad94625fb8d088209f46650c8097196fec67f00c":["153cc06382fdc94d0ea3db127eab860ae4310525"],"153cc06382fdc94d0ea3db127eab860ae4310525":["ed55495a0b2d338e8cf9c537712c96ed11804049"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ed55495a0b2d338e8cf9c537712c96ed11804049":["153cc06382fdc94d0ea3db127eab860ae4310525"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["758fdd153bb361b47f22db79ace6af6f6b7b9330"],"758fdd153bb361b47f22db79ace6af6f6b7b9330":["ed55495a0b2d338e8cf9c537712c96ed11804049"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"153cc06382fdc94d0ea3db127eab860ae4310525":["ad94625fb8d088209f46650c8097196fec67f00c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}