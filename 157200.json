{"path":"lucene/core/src/java/org/apache/lucene/index/FieldInfo#FieldInfo(String,int,boolean,boolean,boolean,IndexOptions,DocValuesType,long,Map[String,String],int,int).mjava","commits":[{"id":"ca792c26af46bd6c4a08d81117c60440cf6a7e3d","date":1445938295,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FieldInfo#FieldInfo(String,int,boolean,boolean,boolean,IndexOptions,DocValuesType,long,Map[String,String],int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/FieldInfo#FieldInfo(String,int,boolean,boolean,boolean,IndexOptions,DocValuesType,long,Map[String,String]).mjava","sourceNew":"  /**\n   * Sole constructor.\n   *\n   * @lucene.experimental\n   */\n  public FieldInfo(String name, int number, boolean storeTermVector, boolean omitNorms, \n                   boolean storePayloads, IndexOptions indexOptions, DocValuesType docValues,\n                   long dvGen, Map<String,String> attributes, int dimensionCount, int dimensionNumBytes) {\n    this.name = Objects.requireNonNull(name);\n    this.number = number;\n    this.docValuesType = Objects.requireNonNull(docValues, \"DocValuesType cannot be null (field: \\\"\" + name + \"\\\")\");\n    this.indexOptions = Objects.requireNonNull(indexOptions, \"IndexOptions cannot be null (field: \\\"\" + name + \"\\\")\");\n    if (indexOptions != IndexOptions.NONE) {\n      this.storeTermVector = storeTermVector;\n      this.storePayloads = storePayloads;\n      this.omitNorms = omitNorms;\n    } else { // for non-indexed fields, leave defaults\n      this.storeTermVector = false;\n      this.storePayloads = false;\n      this.omitNorms = false;\n    }\n    this.dvGen = dvGen;\n    this.attributes = Objects.requireNonNull(attributes);\n    this.dimensionCount = dimensionCount;\n    this.dimensionNumBytes = dimensionNumBytes;\n    assert checkConsistency();\n  }\n\n","sourceOld":"  /**\n   * Sole constructor.\n   *\n   * @lucene.experimental\n   */\n  public FieldInfo(String name, int number, boolean storeTermVector, boolean omitNorms, \n      boolean storePayloads, IndexOptions indexOptions, DocValuesType docValues,\n      long dvGen, Map<String,String> attributes) {\n    this.name = Objects.requireNonNull(name);\n    this.number = number;\n    this.docValuesType = Objects.requireNonNull(docValues, \"DocValuesType cannot be null (field: \\\"\" + name + \"\\\")\");\n    this.indexOptions = Objects.requireNonNull(indexOptions, \"IndexOptions cannot be null (field: \\\"\" + name + \"\\\")\");\n    if (indexOptions != IndexOptions.NONE) {\n      this.storeTermVector = storeTermVector;\n      this.storePayloads = storePayloads;\n      this.omitNorms = omitNorms;\n    } else { // for non-indexed fields, leave defaults\n      this.storeTermVector = false;\n      this.storePayloads = false;\n      this.omitNorms = false;\n    }\n    this.dvGen = dvGen;\n    this.attributes = Objects.requireNonNull(attributes);\n    assert checkConsistency();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cab7a79353f33d1a94cd307bf33aa5148601ebe6","date":1453391888,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FieldInfo#FieldInfo(String,int,boolean,boolean,boolean,IndexOptions,DocValuesType,long,Map[String,String],int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/FieldInfo#FieldInfo(String,int,boolean,boolean,boolean,IndexOptions,DocValuesType,long,Map[String,String],int,int).mjava","sourceNew":"  /**\n   * Sole constructor.\n   *\n   * @lucene.experimental\n   */\n  public FieldInfo(String name, int number, boolean storeTermVector, boolean omitNorms, \n                   boolean storePayloads, IndexOptions indexOptions, DocValuesType docValues,\n                   long dvGen, Map<String,String> attributes, int pointDimensionCount, int pointNumBytes) {\n    this.name = Objects.requireNonNull(name);\n    this.number = number;\n    this.docValuesType = Objects.requireNonNull(docValues, \"DocValuesType cannot be null (field: \\\"\" + name + \"\\\")\");\n    this.indexOptions = Objects.requireNonNull(indexOptions, \"IndexOptions cannot be null (field: \\\"\" + name + \"\\\")\");\n    if (indexOptions != IndexOptions.NONE) {\n      this.storeTermVector = storeTermVector;\n      this.storePayloads = storePayloads;\n      this.omitNorms = omitNorms;\n    } else { // for non-indexed fields, leave defaults\n      this.storeTermVector = false;\n      this.storePayloads = false;\n      this.omitNorms = false;\n    }\n    this.dvGen = dvGen;\n    this.attributes = Objects.requireNonNull(attributes);\n    this.pointDimensionCount = pointDimensionCount;\n    this.pointNumBytes = pointNumBytes;\n    assert checkConsistency();\n  }\n\n","sourceOld":"  /**\n   * Sole constructor.\n   *\n   * @lucene.experimental\n   */\n  public FieldInfo(String name, int number, boolean storeTermVector, boolean omitNorms, \n                   boolean storePayloads, IndexOptions indexOptions, DocValuesType docValues,\n                   long dvGen, Map<String,String> attributes, int dimensionCount, int dimensionNumBytes) {\n    this.name = Objects.requireNonNull(name);\n    this.number = number;\n    this.docValuesType = Objects.requireNonNull(docValues, \"DocValuesType cannot be null (field: \\\"\" + name + \"\\\")\");\n    this.indexOptions = Objects.requireNonNull(indexOptions, \"IndexOptions cannot be null (field: \\\"\" + name + \"\\\")\");\n    if (indexOptions != IndexOptions.NONE) {\n      this.storeTermVector = storeTermVector;\n      this.storePayloads = storePayloads;\n      this.omitNorms = omitNorms;\n    } else { // for non-indexed fields, leave defaults\n      this.storeTermVector = false;\n      this.storePayloads = false;\n      this.omitNorms = false;\n    }\n    this.dvGen = dvGen;\n    this.attributes = Objects.requireNonNull(attributes);\n    this.dimensionCount = dimensionCount;\n    this.dimensionNumBytes = dimensionNumBytes;\n    assert checkConsistency();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad0d09e969f4763b0df4230f8e3f74357872a4e4","date":1459188769,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FieldInfo#FieldInfo(String,int,boolean,boolean,boolean,IndexOptions,DocValuesType,long,Map[String,String],int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/FieldInfo#FieldInfo(String,int,boolean,boolean,boolean,IndexOptions,DocValuesType,long,Map[String,String],int,int).mjava","sourceNew":"  /**\n   * Sole constructor.\n   *\n   * @lucene.experimental\n   */\n  public FieldInfo(String name, int number, boolean storeTermVector, boolean omitNorms, \n                   boolean storePayloads, IndexOptions indexOptions, DocValuesType docValues,\n                   long dvGen, Map<String,String> attributes, int pointDimensionCount, int pointNumBytes) {\n    this.name = Objects.requireNonNull(name);\n    this.number = number;\n    this.docValuesType = Objects.requireNonNull(docValues, \"DocValuesType must not be null (field: \\\"\" + name + \"\\\")\");\n    this.indexOptions = Objects.requireNonNull(indexOptions, \"IndexOptions must not be null (field: \\\"\" + name + \"\\\")\");\n    if (indexOptions != IndexOptions.NONE) {\n      this.storeTermVector = storeTermVector;\n      this.storePayloads = storePayloads;\n      this.omitNorms = omitNorms;\n    } else { // for non-indexed fields, leave defaults\n      this.storeTermVector = false;\n      this.storePayloads = false;\n      this.omitNorms = false;\n    }\n    this.dvGen = dvGen;\n    this.attributes = Objects.requireNonNull(attributes);\n    this.pointDimensionCount = pointDimensionCount;\n    this.pointNumBytes = pointNumBytes;\n    assert checkConsistency();\n  }\n\n","sourceOld":"  /**\n   * Sole constructor.\n   *\n   * @lucene.experimental\n   */\n  public FieldInfo(String name, int number, boolean storeTermVector, boolean omitNorms, \n                   boolean storePayloads, IndexOptions indexOptions, DocValuesType docValues,\n                   long dvGen, Map<String,String> attributes, int pointDimensionCount, int pointNumBytes) {\n    this.name = Objects.requireNonNull(name);\n    this.number = number;\n    this.docValuesType = Objects.requireNonNull(docValues, \"DocValuesType cannot be null (field: \\\"\" + name + \"\\\")\");\n    this.indexOptions = Objects.requireNonNull(indexOptions, \"IndexOptions cannot be null (field: \\\"\" + name + \"\\\")\");\n    if (indexOptions != IndexOptions.NONE) {\n      this.storeTermVector = storeTermVector;\n      this.storePayloads = storePayloads;\n      this.omitNorms = omitNorms;\n    } else { // for non-indexed fields, leave defaults\n      this.storeTermVector = false;\n      this.storePayloads = false;\n      this.omitNorms = false;\n    }\n    this.dvGen = dvGen;\n    this.attributes = Objects.requireNonNull(attributes);\n    this.pointDimensionCount = pointDimensionCount;\n    this.pointNumBytes = pointNumBytes;\n    assert checkConsistency();\n  }\n\n","bugFix":["79700663e164dece87bed4adfd3e28bab6cb1385"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eeba0a4d0845889a402dd225793d62f009d029c9","date":1527938093,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FieldInfo#FieldInfo(String,int,boolean,boolean,boolean,IndexOptions,DocValuesType,long,Map[String,String],int,int,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/FieldInfo#FieldInfo(String,int,boolean,boolean,boolean,IndexOptions,DocValuesType,long,Map[String,String],int,int).mjava","sourceNew":"  /**\n   * Sole constructor.\n   *\n   * @lucene.experimental\n   */\n  public FieldInfo(String name, int number, boolean storeTermVector, boolean omitNorms, boolean storePayloads,\n                   IndexOptions indexOptions, DocValuesType docValues, long dvGen, Map<String,String> attributes,\n                   int pointDimensionCount, int pointNumBytes, boolean softDeletesField) {\n    this.name = Objects.requireNonNull(name);\n    this.number = number;\n    this.docValuesType = Objects.requireNonNull(docValues, \"DocValuesType must not be null (field: \\\"\" + name + \"\\\")\");\n    this.indexOptions = Objects.requireNonNull(indexOptions, \"IndexOptions must not be null (field: \\\"\" + name + \"\\\")\");\n    if (indexOptions != IndexOptions.NONE) {\n      this.storeTermVector = storeTermVector;\n      this.storePayloads = storePayloads;\n      this.omitNorms = omitNorms;\n    } else { // for non-indexed fields, leave defaults\n      this.storeTermVector = false;\n      this.storePayloads = false;\n      this.omitNorms = false;\n    }\n    this.dvGen = dvGen;\n    this.attributes = Objects.requireNonNull(attributes);\n    this.pointDimensionCount = pointDimensionCount;\n    this.pointNumBytes = pointNumBytes;\n    this.softDeletesField = softDeletesField;\n    assert checkConsistency();\n  }\n\n","sourceOld":"  /**\n   * Sole constructor.\n   *\n   * @lucene.experimental\n   */\n  public FieldInfo(String name, int number, boolean storeTermVector, boolean omitNorms, \n                   boolean storePayloads, IndexOptions indexOptions, DocValuesType docValues,\n                   long dvGen, Map<String,String> attributes, int pointDimensionCount, int pointNumBytes) {\n    this.name = Objects.requireNonNull(name);\n    this.number = number;\n    this.docValuesType = Objects.requireNonNull(docValues, \"DocValuesType must not be null (field: \\\"\" + name + \"\\\")\");\n    this.indexOptions = Objects.requireNonNull(indexOptions, \"IndexOptions must not be null (field: \\\"\" + name + \"\\\")\");\n    if (indexOptions != IndexOptions.NONE) {\n      this.storeTermVector = storeTermVector;\n      this.storePayloads = storePayloads;\n      this.omitNorms = omitNorms;\n    } else { // for non-indexed fields, leave defaults\n      this.storeTermVector = false;\n      this.storePayloads = false;\n      this.omitNorms = false;\n    }\n    this.dvGen = dvGen;\n    this.attributes = Objects.requireNonNull(attributes);\n    this.pointDimensionCount = pointDimensionCount;\n    this.pointNumBytes = pointNumBytes;\n    assert checkConsistency();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab548c8f96022b4780f7500a30b19b4f4a5feeb6","date":1527940044,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FieldInfo#FieldInfo(String,int,boolean,boolean,boolean,IndexOptions,DocValuesType,long,Map[String,String],int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/FieldInfo#FieldInfo(String,int,boolean,boolean,boolean,IndexOptions,DocValuesType,long,Map[String,String],int,int,boolean).mjava","sourceNew":"  /**\n   * Sole constructor.\n   *\n   * @lucene.experimental\n   */\n  public FieldInfo(String name, int number, boolean storeTermVector, boolean omitNorms, \n                   boolean storePayloads, IndexOptions indexOptions, DocValuesType docValues,\n                   long dvGen, Map<String,String> attributes, int pointDimensionCount, int pointNumBytes) {\n    this.name = Objects.requireNonNull(name);\n    this.number = number;\n    this.docValuesType = Objects.requireNonNull(docValues, \"DocValuesType must not be null (field: \\\"\" + name + \"\\\")\");\n    this.indexOptions = Objects.requireNonNull(indexOptions, \"IndexOptions must not be null (field: \\\"\" + name + \"\\\")\");\n    if (indexOptions != IndexOptions.NONE) {\n      this.storeTermVector = storeTermVector;\n      this.storePayloads = storePayloads;\n      this.omitNorms = omitNorms;\n    } else { // for non-indexed fields, leave defaults\n      this.storeTermVector = false;\n      this.storePayloads = false;\n      this.omitNorms = false;\n    }\n    this.dvGen = dvGen;\n    this.attributes = Objects.requireNonNull(attributes);\n    this.pointDimensionCount = pointDimensionCount;\n    this.pointNumBytes = pointNumBytes;\n    assert checkConsistency();\n  }\n\n","sourceOld":"  /**\n   * Sole constructor.\n   *\n   * @lucene.experimental\n   */\n  public FieldInfo(String name, int number, boolean storeTermVector, boolean omitNorms, boolean storePayloads,\n                   IndexOptions indexOptions, DocValuesType docValues, long dvGen, Map<String,String> attributes,\n                   int pointDimensionCount, int pointNumBytes, boolean softDeletesField) {\n    this.name = Objects.requireNonNull(name);\n    this.number = number;\n    this.docValuesType = Objects.requireNonNull(docValues, \"DocValuesType must not be null (field: \\\"\" + name + \"\\\")\");\n    this.indexOptions = Objects.requireNonNull(indexOptions, \"IndexOptions must not be null (field: \\\"\" + name + \"\\\")\");\n    if (indexOptions != IndexOptions.NONE) {\n      this.storeTermVector = storeTermVector;\n      this.storePayloads = storePayloads;\n      this.omitNorms = omitNorms;\n    } else { // for non-indexed fields, leave defaults\n      this.storeTermVector = false;\n      this.storePayloads = false;\n      this.omitNorms = false;\n    }\n    this.dvGen = dvGen;\n    this.attributes = Objects.requireNonNull(attributes);\n    this.pointDimensionCount = pointDimensionCount;\n    this.pointNumBytes = pointNumBytes;\n    this.softDeletesField = softDeletesField;\n    assert checkConsistency();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7e4ca6dc9612ff741d8713743e2bccfae5eadac","date":1528093718,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FieldInfo#FieldInfo(String,int,boolean,boolean,boolean,IndexOptions,DocValuesType,long,Map[String,String],int,int,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/FieldInfo#FieldInfo(String,int,boolean,boolean,boolean,IndexOptions,DocValuesType,long,Map[String,String],int,int).mjava","sourceNew":"  /**\n   * Sole constructor.\n   *\n   * @lucene.experimental\n   */\n  public FieldInfo(String name, int number, boolean storeTermVector, boolean omitNorms, boolean storePayloads,\n                   IndexOptions indexOptions, DocValuesType docValues, long dvGen, Map<String,String> attributes,\n                   int pointDimensionCount, int pointNumBytes, boolean softDeletesField) {\n    this.name = Objects.requireNonNull(name);\n    this.number = number;\n    this.docValuesType = Objects.requireNonNull(docValues, \"DocValuesType must not be null (field: \\\"\" + name + \"\\\")\");\n    this.indexOptions = Objects.requireNonNull(indexOptions, \"IndexOptions must not be null (field: \\\"\" + name + \"\\\")\");\n    if (indexOptions != IndexOptions.NONE) {\n      this.storeTermVector = storeTermVector;\n      this.storePayloads = storePayloads;\n      this.omitNorms = omitNorms;\n    } else { // for non-indexed fields, leave defaults\n      this.storeTermVector = false;\n      this.storePayloads = false;\n      this.omitNorms = false;\n    }\n    this.dvGen = dvGen;\n    this.attributes = Objects.requireNonNull(attributes);\n    this.pointDimensionCount = pointDimensionCount;\n    this.pointNumBytes = pointNumBytes;\n    this.softDeletesField = softDeletesField;\n    assert checkConsistency();\n  }\n\n","sourceOld":"  /**\n   * Sole constructor.\n   *\n   * @lucene.experimental\n   */\n  public FieldInfo(String name, int number, boolean storeTermVector, boolean omitNorms, \n                   boolean storePayloads, IndexOptions indexOptions, DocValuesType docValues,\n                   long dvGen, Map<String,String> attributes, int pointDimensionCount, int pointNumBytes) {\n    this.name = Objects.requireNonNull(name);\n    this.number = number;\n    this.docValuesType = Objects.requireNonNull(docValues, \"DocValuesType must not be null (field: \\\"\" + name + \"\\\")\");\n    this.indexOptions = Objects.requireNonNull(indexOptions, \"IndexOptions must not be null (field: \\\"\" + name + \"\\\")\");\n    if (indexOptions != IndexOptions.NONE) {\n      this.storeTermVector = storeTermVector;\n      this.storePayloads = storePayloads;\n      this.omitNorms = omitNorms;\n    } else { // for non-indexed fields, leave defaults\n      this.storeTermVector = false;\n      this.storePayloads = false;\n      this.omitNorms = false;\n    }\n    this.dvGen = dvGen;\n    this.attributes = Objects.requireNonNull(attributes);\n    this.pointDimensionCount = pointDimensionCount;\n    this.pointNumBytes = pointNumBytes;\n    assert checkConsistency();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f592209545c71895260367152601e9200399776d","date":1528238935,"type":5,"author":"Michael Braun","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FieldInfo#FieldInfo(String,int,boolean,boolean,boolean,IndexOptions,DocValuesType,long,Map[String,String],int,int,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/FieldInfo#FieldInfo(String,int,boolean,boolean,boolean,IndexOptions,DocValuesType,long,Map[String,String],int,int).mjava","sourceNew":"  /**\n   * Sole constructor.\n   *\n   * @lucene.experimental\n   */\n  public FieldInfo(String name, int number, boolean storeTermVector, boolean omitNorms, boolean storePayloads,\n                   IndexOptions indexOptions, DocValuesType docValues, long dvGen, Map<String,String> attributes,\n                   int pointDimensionCount, int pointNumBytes, boolean softDeletesField) {\n    this.name = Objects.requireNonNull(name);\n    this.number = number;\n    this.docValuesType = Objects.requireNonNull(docValues, \"DocValuesType must not be null (field: \\\"\" + name + \"\\\")\");\n    this.indexOptions = Objects.requireNonNull(indexOptions, \"IndexOptions must not be null (field: \\\"\" + name + \"\\\")\");\n    if (indexOptions != IndexOptions.NONE) {\n      this.storeTermVector = storeTermVector;\n      this.storePayloads = storePayloads;\n      this.omitNorms = omitNorms;\n    } else { // for non-indexed fields, leave defaults\n      this.storeTermVector = false;\n      this.storePayloads = false;\n      this.omitNorms = false;\n    }\n    this.dvGen = dvGen;\n    this.attributes = Objects.requireNonNull(attributes);\n    this.pointDimensionCount = pointDimensionCount;\n    this.pointNumBytes = pointNumBytes;\n    this.softDeletesField = softDeletesField;\n    assert checkConsistency();\n  }\n\n","sourceOld":"  /**\n   * Sole constructor.\n   *\n   * @lucene.experimental\n   */\n  public FieldInfo(String name, int number, boolean storeTermVector, boolean omitNorms, \n                   boolean storePayloads, IndexOptions indexOptions, DocValuesType docValues,\n                   long dvGen, Map<String,String> attributes, int pointDimensionCount, int pointNumBytes) {\n    this.name = Objects.requireNonNull(name);\n    this.number = number;\n    this.docValuesType = Objects.requireNonNull(docValues, \"DocValuesType must not be null (field: \\\"\" + name + \"\\\")\");\n    this.indexOptions = Objects.requireNonNull(indexOptions, \"IndexOptions must not be null (field: \\\"\" + name + \"\\\")\");\n    if (indexOptions != IndexOptions.NONE) {\n      this.storeTermVector = storeTermVector;\n      this.storePayloads = storePayloads;\n      this.omitNorms = omitNorms;\n    } else { // for non-indexed fields, leave defaults\n      this.storeTermVector = false;\n      this.storePayloads = false;\n      this.omitNorms = false;\n    }\n    this.dvGen = dvGen;\n    this.attributes = Objects.requireNonNull(attributes);\n    this.pointDimensionCount = pointDimensionCount;\n    this.pointNumBytes = pointNumBytes;\n    assert checkConsistency();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70042a8a492f7054d480ccdd2be9796510d4327","date":1528386658,"type":5,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FieldInfo#FieldInfo(String,int,boolean,boolean,boolean,IndexOptions,DocValuesType,long,Map[String,String],int,int,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/FieldInfo#FieldInfo(String,int,boolean,boolean,boolean,IndexOptions,DocValuesType,long,Map[String,String],int,int).mjava","sourceNew":"  /**\n   * Sole constructor.\n   *\n   * @lucene.experimental\n   */\n  public FieldInfo(String name, int number, boolean storeTermVector, boolean omitNorms, boolean storePayloads,\n                   IndexOptions indexOptions, DocValuesType docValues, long dvGen, Map<String,String> attributes,\n                   int pointDimensionCount, int pointNumBytes, boolean softDeletesField) {\n    this.name = Objects.requireNonNull(name);\n    this.number = number;\n    this.docValuesType = Objects.requireNonNull(docValues, \"DocValuesType must not be null (field: \\\"\" + name + \"\\\")\");\n    this.indexOptions = Objects.requireNonNull(indexOptions, \"IndexOptions must not be null (field: \\\"\" + name + \"\\\")\");\n    if (indexOptions != IndexOptions.NONE) {\n      this.storeTermVector = storeTermVector;\n      this.storePayloads = storePayloads;\n      this.omitNorms = omitNorms;\n    } else { // for non-indexed fields, leave defaults\n      this.storeTermVector = false;\n      this.storePayloads = false;\n      this.omitNorms = false;\n    }\n    this.dvGen = dvGen;\n    this.attributes = Objects.requireNonNull(attributes);\n    this.pointDimensionCount = pointDimensionCount;\n    this.pointNumBytes = pointNumBytes;\n    this.softDeletesField = softDeletesField;\n    assert checkConsistency();\n  }\n\n","sourceOld":"  /**\n   * Sole constructor.\n   *\n   * @lucene.experimental\n   */\n  public FieldInfo(String name, int number, boolean storeTermVector, boolean omitNorms, \n                   boolean storePayloads, IndexOptions indexOptions, DocValuesType docValues,\n                   long dvGen, Map<String,String> attributes, int pointDimensionCount, int pointNumBytes) {\n    this.name = Objects.requireNonNull(name);\n    this.number = number;\n    this.docValuesType = Objects.requireNonNull(docValues, \"DocValuesType must not be null (field: \\\"\" + name + \"\\\")\");\n    this.indexOptions = Objects.requireNonNull(indexOptions, \"IndexOptions must not be null (field: \\\"\" + name + \"\\\")\");\n    if (indexOptions != IndexOptions.NONE) {\n      this.storeTermVector = storeTermVector;\n      this.storePayloads = storePayloads;\n      this.omitNorms = omitNorms;\n    } else { // for non-indexed fields, leave defaults\n      this.storeTermVector = false;\n      this.storePayloads = false;\n      this.omitNorms = false;\n    }\n    this.dvGen = dvGen;\n    this.attributes = Objects.requireNonNull(attributes);\n    this.pointDimensionCount = pointDimensionCount;\n    this.pointNumBytes = pointNumBytes;\n    assert checkConsistency();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"cab7a79353f33d1a94cd307bf33aa5148601ebe6":["ca792c26af46bd6c4a08d81117c60440cf6a7e3d"],"ab548c8f96022b4780f7500a30b19b4f4a5feeb6":["eeba0a4d0845889a402dd225793d62f009d029c9"],"ca792c26af46bd6c4a08d81117c60440cf6a7e3d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b70042a8a492f7054d480ccdd2be9796510d4327":["ad0d09e969f4763b0df4230f8e3f74357872a4e4","b7e4ca6dc9612ff741d8713743e2bccfae5eadac"],"b7e4ca6dc9612ff741d8713743e2bccfae5eadac":["ab548c8f96022b4780f7500a30b19b4f4a5feeb6"],"eeba0a4d0845889a402dd225793d62f009d029c9":["ad0d09e969f4763b0df4230f8e3f74357872a4e4"],"ad0d09e969f4763b0df4230f8e3f74357872a4e4":["cab7a79353f33d1a94cd307bf33aa5148601ebe6"],"f592209545c71895260367152601e9200399776d":["ab548c8f96022b4780f7500a30b19b4f4a5feeb6","b7e4ca6dc9612ff741d8713743e2bccfae5eadac"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b7e4ca6dc9612ff741d8713743e2bccfae5eadac"]},"commit2Childs":{"cab7a79353f33d1a94cd307bf33aa5148601ebe6":["ad0d09e969f4763b0df4230f8e3f74357872a4e4"],"ca792c26af46bd6c4a08d81117c60440cf6a7e3d":["cab7a79353f33d1a94cd307bf33aa5148601ebe6"],"ab548c8f96022b4780f7500a30b19b4f4a5feeb6":["b7e4ca6dc9612ff741d8713743e2bccfae5eadac","f592209545c71895260367152601e9200399776d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ca792c26af46bd6c4a08d81117c60440cf6a7e3d"],"b70042a8a492f7054d480ccdd2be9796510d4327":[],"eeba0a4d0845889a402dd225793d62f009d029c9":["ab548c8f96022b4780f7500a30b19b4f4a5feeb6"],"b7e4ca6dc9612ff741d8713743e2bccfae5eadac":["b70042a8a492f7054d480ccdd2be9796510d4327","f592209545c71895260367152601e9200399776d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad0d09e969f4763b0df4230f8e3f74357872a4e4":["b70042a8a492f7054d480ccdd2be9796510d4327","eeba0a4d0845889a402dd225793d62f009d029c9"],"f592209545c71895260367152601e9200399776d":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b70042a8a492f7054d480ccdd2be9796510d4327","f592209545c71895260367152601e9200399776d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}