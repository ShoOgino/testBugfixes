{"path":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#writeField(IndexOutput,String,MutablePointValues).mjava","commits":[{"id":"367f57e2ee85b7f7e28cfe73370a22cf67624f65","date":1476778467,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#writeField(IndexOutput,String,MutablePointValues).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#writeField(IndexOutput,String,MutablePointsReader).mjava","sourceNew":"  /** Write a field from a {@link MutablePointValues}. This way of writing\n   *  points is faster than regular writes with {@link BKDWriter#add} since\n   *  there is opportunity for reordering points before writing them to\n   *  disk. This method does not use transient disk in order to reorder points.\n   */\n  public long writeField(IndexOutput out, String fieldName, MutablePointValues reader) throws IOException {\n    if (numDims == 1) {\n      return writeField1Dim(out, fieldName, reader);\n    } else {\n      return writeFieldNDims(out, fieldName, reader);\n    }\n  }\n\n","sourceOld":"  /** Write a field from a {@link MutablePointsReader}. This way of writing\n   *  points is faster than regular writes with {@link BKDWriter#add} since\n   *  there is opportunity for reordering points before writing them to\n   *  disk. This method does not use transient disk in order to reorder points.\n   */\n  public long writeField(IndexOutput out, String fieldName, MutablePointsReader reader) throws IOException {\n    if (numDims == 1) {\n      return writeField1Dim(out, fieldName, reader);\n    } else {\n      return writeFieldNDims(out, fieldName, reader);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#writeField(IndexOutput,String,MutablePointValues).mjava","pathOld":"/dev/null","sourceNew":"  /** Write a field from a {@link MutablePointValues}. This way of writing\n   *  points is faster than regular writes with {@link BKDWriter#add} since\n   *  there is opportunity for reordering points before writing them to\n   *  disk. This method does not use transient disk in order to reorder points.\n   */\n  public long writeField(IndexOutput out, String fieldName, MutablePointValues reader) throws IOException {\n    if (numDims == 1) {\n      return writeField1Dim(out, fieldName, reader);\n    } else {\n      return writeFieldNDims(out, fieldName, reader);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f6652c943595e92c187ee904c382863013eae28f","date":1539042663,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#writeField(IndexOutput,String,MutablePointValues).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#writeField(IndexOutput,String,MutablePointValues).mjava","sourceNew":"  /** Write a field from a {@link MutablePointValues}. This way of writing\n   *  points is faster than regular writes with {@link BKDWriter#add} since\n   *  there is opportunity for reordering points before writing them to\n   *  disk. This method does not use transient disk in order to reorder points.\n   */\n  public long writeField(IndexOutput out, String fieldName, MutablePointValues reader) throws IOException {\n    if (numIndexDims == 1) {\n      return writeField1Dim(out, fieldName, reader);\n    } else {\n      return writeFieldNDims(out, fieldName, reader);\n    }\n  }\n\n","sourceOld":"  /** Write a field from a {@link MutablePointValues}. This way of writing\n   *  points is faster than regular writes with {@link BKDWriter#add} since\n   *  there is opportunity for reordering points before writing them to\n   *  disk. This method does not use transient disk in order to reorder points.\n   */\n  public long writeField(IndexOutput out, String fieldName, MutablePointValues reader) throws IOException {\n    if (numDims == 1) {\n      return writeField1Dim(out, fieldName, reader);\n    } else {\n      return writeFieldNDims(out, fieldName, reader);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"055bcddc7e92ac39737a56f616d6b01f8420e53c","date":1539182119,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#writeField(IndexOutput,String,MutablePointValues).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#writeField(IndexOutput,String,MutablePointValues).mjava","sourceNew":"  /** Write a field from a {@link MutablePointValues}. This way of writing\n   *  points is faster than regular writes with {@link BKDWriter#add} since\n   *  there is opportunity for reordering points before writing them to\n   *  disk. This method does not use transient disk in order to reorder points.\n   */\n  public long writeField(IndexOutput out, String fieldName, MutablePointValues reader) throws IOException {\n    if (numDataDims == 1) {\n      return writeField1Dim(out, fieldName, reader);\n    } else {\n      return writeFieldNDims(out, fieldName, reader);\n    }\n  }\n\n","sourceOld":"  /** Write a field from a {@link MutablePointValues}. This way of writing\n   *  points is faster than regular writes with {@link BKDWriter#add} since\n   *  there is opportunity for reordering points before writing them to\n   *  disk. This method does not use transient disk in order to reorder points.\n   */\n  public long writeField(IndexOutput out, String fieldName, MutablePointValues reader) throws IOException {\n    if (numIndexDims == 1) {\n      return writeField1Dim(out, fieldName, reader);\n    } else {\n      return writeFieldNDims(out, fieldName, reader);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"78e689a3b60e84c75dc6dd7b181a71fc19ef8482","date":1591689554,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#writeField(IndexOutput,IndexOutput,IndexOutput,String,MutablePointValues).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#writeField(IndexOutput,String,MutablePointValues).mjava","sourceNew":"  /** Write a field from a {@link MutablePointValues}. This way of writing\n   *  points is faster than regular writes with {@link BKDWriter#add} since\n   *  there is opportunity for reordering points before writing them to\n   *  disk. This method does not use transient disk in order to reorder points.\n   */\n  public Runnable writeField(IndexOutput metaOut, IndexOutput indexOut, IndexOutput dataOut, String fieldName, MutablePointValues reader) throws IOException {\n    if (numDataDims == 1) {\n      return writeField1Dim(metaOut, indexOut, dataOut, fieldName, reader);\n    } else {\n      return writeFieldNDims(metaOut, indexOut, dataOut, fieldName, reader);\n    }\n  }\n\n","sourceOld":"  /** Write a field from a {@link MutablePointValues}. This way of writing\n   *  points is faster than regular writes with {@link BKDWriter#add} since\n   *  there is opportunity for reordering points before writing them to\n   *  disk. This method does not use transient disk in order to reorder points.\n   */\n  public long writeField(IndexOutput out, String fieldName, MutablePointValues reader) throws IOException {\n    if (numDataDims == 1) {\n      return writeField1Dim(out, fieldName, reader);\n    } else {\n      return writeFieldNDims(out, fieldName, reader);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f6652c943595e92c187ee904c382863013eae28f":["367f57e2ee85b7f7e28cfe73370a22cf67624f65"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"78e689a3b60e84c75dc6dd7b181a71fc19ef8482":["055bcddc7e92ac39737a56f616d6b01f8420e53c"],"367f57e2ee85b7f7e28cfe73370a22cf67624f65":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"055bcddc7e92ac39737a56f616d6b01f8420e53c":["f6652c943595e92c187ee904c382863013eae28f"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","367f57e2ee85b7f7e28cfe73370a22cf67624f65"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["78e689a3b60e84c75dc6dd7b181a71fc19ef8482"]},"commit2Childs":{"f6652c943595e92c187ee904c382863013eae28f":["055bcddc7e92ac39737a56f616d6b01f8420e53c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["367f57e2ee85b7f7e28cfe73370a22cf67624f65","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"78e689a3b60e84c75dc6dd7b181a71fc19ef8482":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"367f57e2ee85b7f7e28cfe73370a22cf67624f65":["f6652c943595e92c187ee904c382863013eae28f","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"055bcddc7e92ac39737a56f616d6b01f8420e53c":["78e689a3b60e84c75dc6dd7b181a71fc19ef8482"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}