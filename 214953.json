{"path":"lucene/src/test/org/apache/lucene/search/TestWildcard#testParsingAndSearching().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestWildcard#testParsingAndSearching().mjava","pathOld":"src/test/org/apache/lucene/search/TestWildcard#testParsingAndSearching().mjava","sourceNew":"  /**\n   * Test that wild card queries are parsed to the correct type and are searched correctly.\n   * This test looks at both parsing and execution of wildcard queries.\n   * Although placed here, it also tests prefix queries, verifying that\n   * prefix queries are not parsed into wild card queries, and viceversa.\n   * @throws Exception\n   */\n  public void testParsingAndSearching() throws Exception {\n    String field = \"content\";\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, field, new WhitespaceAnalyzer(TEST_VERSION_CURRENT));\n    qp.setAllowLeadingWildcard(true);\n    String docs[] = {\n        \"\\\\ abcdefg1\",\n        \"\\\\79 hijklmn1\",\n        \"\\\\\\\\ opqrstu1\",\n    };\n    // queries that should find all docs\n    String matchAll[] = {\n        \"*\", \"*1\", \"**1\", \"*?\", \"*?1\", \"?*1\", \"**\", \"***\", \"\\\\\\\\*\"\n    };\n    // queries that should find no docs\n    String matchNone[] = {\n        \"a*h\", \"a?h\", \"*a*h\", \"?a\", \"a?\",\n    };\n    // queries that should be parsed to prefix queries\n    String matchOneDocPrefix[][] = {\n        {\"a*\", \"ab*\", \"abc*\", }, // these should find only doc 0 \n        {\"h*\", \"hi*\", \"hij*\", \"\\\\\\\\7*\"}, // these should find only doc 1\n        {\"o*\", \"op*\", \"opq*\", \"\\\\\\\\\\\\\\\\*\"}, // these should find only doc 2\n    };\n    // queries that should be parsed to wildcard queries\n    String matchOneDocWild[][] = {\n        {\"*a*\", \"*ab*\", \"*abc**\", \"ab*e*\", \"*g?\", \"*f?1\", \"abc**\"}, // these should find only doc 0\n        {\"*h*\", \"*hi*\", \"*hij**\", \"hi*k*\", \"*n?\", \"*m?1\", \"hij**\"}, // these should find only doc 1\n        {\"*o*\", \"*op*\", \"*opq**\", \"op*q*\", \"*u?\", \"*t?1\", \"opq**\"}, // these should find only doc 2\n    };\n\n    // prepare the index\n    RAMDirectory dir = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(field,docs[i],Store.NO,Index.ANALYZED));\n      iw.addDocument(doc);\n    }\n    iw.close();\n    \n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    \n    // test queries that must find all\n    for (int i = 0; i < matchAll.length; i++) {\n      String qtxt = matchAll[i];\n      Query q = qp.parse(qtxt);\n      if (VERBOSE) System.out.println(\"matchAll: qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(docs.length,hits.length);\n    }\n    \n    // test queries that must find none\n    for (int i = 0; i < matchNone.length; i++) {\n      String qtxt = matchNone[i];\n      Query q = qp.parse(qtxt);\n      if (VERBOSE) System.out.println(\"matchNone: qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(0,hits.length);\n    }\n\n    // test queries that must be prefix queries and must find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocPrefix[i].length; j++) {\n        String qtxt = matchOneDocPrefix[i][j];\n        Query q = qp.parse(qtxt);\n        if (VERBOSE) System.out.println(\"match 1 prefix: doc=\"+docs[i]+\" qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n        assertEquals(PrefixQuery.class, q.getClass());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    // test queries that must be wildcard queries and must find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocWild[i].length; j++) {\n        String qtxt = matchOneDocWild[i][j];\n        Query q = qp.parse(qtxt);\n        if (VERBOSE) System.out.println(\"match 1 wild: doc=\"+docs[i]+\" qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n        assertEquals(WildcardQuery.class, q.getClass());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    searcher.close();\n  }\n\n","sourceOld":"  /**\n   * Test that wild card queries are parsed to the correct type and are searched correctly.\n   * This test looks at both parsing and execution of wildcard queries.\n   * Although placed here, it also tests prefix queries, verifying that\n   * prefix queries are not parsed into wild card queries, and viceversa.\n   * @throws Exception\n   */\n  public void testParsingAndSearching() throws Exception {\n    String field = \"content\";\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, field, new WhitespaceAnalyzer(TEST_VERSION_CURRENT));\n    qp.setAllowLeadingWildcard(true);\n    String docs[] = {\n        \"\\\\ abcdefg1\",\n        \"\\\\79 hijklmn1\",\n        \"\\\\\\\\ opqrstu1\",\n    };\n    // queries that should find all docs\n    String matchAll[] = {\n        \"*\", \"*1\", \"**1\", \"*?\", \"*?1\", \"?*1\", \"**\", \"***\", \"\\\\\\\\*\"\n    };\n    // queries that should find no docs\n    String matchNone[] = {\n        \"a*h\", \"a?h\", \"*a*h\", \"?a\", \"a?\",\n    };\n    // queries that should be parsed to prefix queries\n    String matchOneDocPrefix[][] = {\n        {\"a*\", \"ab*\", \"abc*\", }, // these should find only doc 0 \n        {\"h*\", \"hi*\", \"hij*\", \"\\\\\\\\7*\"}, // these should find only doc 1\n        {\"o*\", \"op*\", \"opq*\", \"\\\\\\\\\\\\\\\\*\"}, // these should find only doc 2\n    };\n    // queries that should be parsed to wildcard queries\n    String matchOneDocWild[][] = {\n        {\"*a*\", \"*ab*\", \"*abc**\", \"ab*e*\", \"*g?\", \"*f?1\", \"abc**\"}, // these should find only doc 0\n        {\"*h*\", \"*hi*\", \"*hij**\", \"hi*k*\", \"*n?\", \"*m?1\", \"hij**\"}, // these should find only doc 1\n        {\"*o*\", \"*op*\", \"*opq**\", \"op*q*\", \"*u?\", \"*t?1\", \"opq**\"}, // these should find only doc 2\n    };\n\n    // prepare the index\n    RAMDirectory dir = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(field,docs[i],Store.NO,Index.ANALYZED));\n      iw.addDocument(doc);\n    }\n    iw.close();\n    \n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    \n    // test queries that must find all\n    for (int i = 0; i < matchAll.length; i++) {\n      String qtxt = matchAll[i];\n      Query q = qp.parse(qtxt);\n      if (VERBOSE) System.out.println(\"matchAll: qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(docs.length,hits.length);\n    }\n    \n    // test queries that must find none\n    for (int i = 0; i < matchNone.length; i++) {\n      String qtxt = matchNone[i];\n      Query q = qp.parse(qtxt);\n      if (VERBOSE) System.out.println(\"matchNone: qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(0,hits.length);\n    }\n\n    // test queries that must be prefix queries and must find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocPrefix[i].length; j++) {\n        String qtxt = matchOneDocPrefix[i][j];\n        Query q = qp.parse(qtxt);\n        if (VERBOSE) System.out.println(\"match 1 prefix: doc=\"+docs[i]+\" qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n        assertEquals(PrefixQuery.class, q.getClass());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    // test queries that must be wildcard queries and must find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocWild[i].length; j++) {\n        String qtxt = matchOneDocWild[i][j];\n        Query q = qp.parse(qtxt);\n        if (VERBOSE) System.out.println(\"match 1 wild: doc=\"+docs[i]+\" qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n        assertEquals(WildcardQuery.class, q.getClass());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d572389229127c297dd1fa5ce4758e1cec41e799","date":1273610938,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestWildcard#testParsingAndSearching().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestWildcard#testParsingAndSearching().mjava","sourceNew":"  /**\n   * Test that wild card queries are parsed to the correct type and are searched correctly.\n   * This test looks at both parsing and execution of wildcard queries.\n   * Although placed here, it also tests prefix queries, verifying that\n   * prefix queries are not parsed into wild card queries, and viceversa.\n   * @throws Exception\n   */\n  public void testParsingAndSearching() throws Exception {\n    String field = \"content\";\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, field, new MockAnalyzer());\n    qp.setAllowLeadingWildcard(true);\n    String docs[] = {\n        \"\\\\ abcdefg1\",\n        \"\\\\79 hijklmn1\",\n        \"\\\\\\\\ opqrstu1\",\n    };\n    // queries that should find all docs\n    String matchAll[] = {\n        \"*\", \"*1\", \"**1\", \"*?\", \"*?1\", \"?*1\", \"**\", \"***\", \"\\\\\\\\*\"\n    };\n    // queries that should find no docs\n    String matchNone[] = {\n        \"a*h\", \"a?h\", \"*a*h\", \"?a\", \"a?\",\n    };\n    // queries that should be parsed to prefix queries\n    String matchOneDocPrefix[][] = {\n        {\"a*\", \"ab*\", \"abc*\", }, // these should find only doc 0 \n        {\"h*\", \"hi*\", \"hij*\", \"\\\\\\\\7*\"}, // these should find only doc 1\n        {\"o*\", \"op*\", \"opq*\", \"\\\\\\\\\\\\\\\\*\"}, // these should find only doc 2\n    };\n    // queries that should be parsed to wildcard queries\n    String matchOneDocWild[][] = {\n        {\"*a*\", \"*ab*\", \"*abc**\", \"ab*e*\", \"*g?\", \"*f?1\", \"abc**\"}, // these should find only doc 0\n        {\"*h*\", \"*hi*\", \"*hij**\", \"hi*k*\", \"*n?\", \"*m?1\", \"hij**\"}, // these should find only doc 1\n        {\"*o*\", \"*op*\", \"*opq**\", \"op*q*\", \"*u?\", \"*t?1\", \"opq**\"}, // these should find only doc 2\n    };\n\n    // prepare the index\n    RAMDirectory dir = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(field,docs[i],Store.NO,Index.ANALYZED));\n      iw.addDocument(doc);\n    }\n    iw.close();\n    \n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    \n    // test queries that must find all\n    for (int i = 0; i < matchAll.length; i++) {\n      String qtxt = matchAll[i];\n      Query q = qp.parse(qtxt);\n      if (VERBOSE) System.out.println(\"matchAll: qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(docs.length,hits.length);\n    }\n    \n    // test queries that must find none\n    for (int i = 0; i < matchNone.length; i++) {\n      String qtxt = matchNone[i];\n      Query q = qp.parse(qtxt);\n      if (VERBOSE) System.out.println(\"matchNone: qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(0,hits.length);\n    }\n\n    // test queries that must be prefix queries and must find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocPrefix[i].length; j++) {\n        String qtxt = matchOneDocPrefix[i][j];\n        Query q = qp.parse(qtxt);\n        if (VERBOSE) System.out.println(\"match 1 prefix: doc=\"+docs[i]+\" qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n        assertEquals(PrefixQuery.class, q.getClass());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    // test queries that must be wildcard queries and must find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocWild[i].length; j++) {\n        String qtxt = matchOneDocWild[i][j];\n        Query q = qp.parse(qtxt);\n        if (VERBOSE) System.out.println(\"match 1 wild: doc=\"+docs[i]+\" qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n        assertEquals(WildcardQuery.class, q.getClass());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    searcher.close();\n  }\n\n","sourceOld":"  /**\n   * Test that wild card queries are parsed to the correct type and are searched correctly.\n   * This test looks at both parsing and execution of wildcard queries.\n   * Although placed here, it also tests prefix queries, verifying that\n   * prefix queries are not parsed into wild card queries, and viceversa.\n   * @throws Exception\n   */\n  public void testParsingAndSearching() throws Exception {\n    String field = \"content\";\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, field, new WhitespaceAnalyzer(TEST_VERSION_CURRENT));\n    qp.setAllowLeadingWildcard(true);\n    String docs[] = {\n        \"\\\\ abcdefg1\",\n        \"\\\\79 hijklmn1\",\n        \"\\\\\\\\ opqrstu1\",\n    };\n    // queries that should find all docs\n    String matchAll[] = {\n        \"*\", \"*1\", \"**1\", \"*?\", \"*?1\", \"?*1\", \"**\", \"***\", \"\\\\\\\\*\"\n    };\n    // queries that should find no docs\n    String matchNone[] = {\n        \"a*h\", \"a?h\", \"*a*h\", \"?a\", \"a?\",\n    };\n    // queries that should be parsed to prefix queries\n    String matchOneDocPrefix[][] = {\n        {\"a*\", \"ab*\", \"abc*\", }, // these should find only doc 0 \n        {\"h*\", \"hi*\", \"hij*\", \"\\\\\\\\7*\"}, // these should find only doc 1\n        {\"o*\", \"op*\", \"opq*\", \"\\\\\\\\\\\\\\\\*\"}, // these should find only doc 2\n    };\n    // queries that should be parsed to wildcard queries\n    String matchOneDocWild[][] = {\n        {\"*a*\", \"*ab*\", \"*abc**\", \"ab*e*\", \"*g?\", \"*f?1\", \"abc**\"}, // these should find only doc 0\n        {\"*h*\", \"*hi*\", \"*hij**\", \"hi*k*\", \"*n?\", \"*m?1\", \"hij**\"}, // these should find only doc 1\n        {\"*o*\", \"*op*\", \"*opq**\", \"op*q*\", \"*u?\", \"*t?1\", \"opq**\"}, // these should find only doc 2\n    };\n\n    // prepare the index\n    RAMDirectory dir = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(field,docs[i],Store.NO,Index.ANALYZED));\n      iw.addDocument(doc);\n    }\n    iw.close();\n    \n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    \n    // test queries that must find all\n    for (int i = 0; i < matchAll.length; i++) {\n      String qtxt = matchAll[i];\n      Query q = qp.parse(qtxt);\n      if (VERBOSE) System.out.println(\"matchAll: qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(docs.length,hits.length);\n    }\n    \n    // test queries that must find none\n    for (int i = 0; i < matchNone.length; i++) {\n      String qtxt = matchNone[i];\n      Query q = qp.parse(qtxt);\n      if (VERBOSE) System.out.println(\"matchNone: qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(0,hits.length);\n    }\n\n    // test queries that must be prefix queries and must find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocPrefix[i].length; j++) {\n        String qtxt = matchOneDocPrefix[i][j];\n        Query q = qp.parse(qtxt);\n        if (VERBOSE) System.out.println(\"match 1 prefix: doc=\"+docs[i]+\" qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n        assertEquals(PrefixQuery.class, q.getClass());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    // test queries that must be wildcard queries and must find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocWild[i].length; j++) {\n        String qtxt = matchOneDocWild[i][j];\n        Query q = qp.parse(qtxt);\n        if (VERBOSE) System.out.println(\"match 1 wild: doc=\"+docs[i]+\" qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n        assertEquals(WildcardQuery.class, q.getClass());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c084e47df29de3330311d69dabf515ceaa989512","date":1279030906,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestWildcard#testParsingAndSearching().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestWildcard#testParsingAndSearching().mjava","sourceNew":"  /**\n   * Test that wild card queries are parsed to the correct type and are searched correctly.\n   * This test looks at both parsing and execution of wildcard queries.\n   * Although placed here, it also tests prefix queries, verifying that\n   * prefix queries are not parsed into wild card queries, and viceversa.\n   * @throws Exception\n   */\n  public void testParsingAndSearching() throws Exception {\n    String field = \"content\";\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, field, new MockAnalyzer());\n    qp.setAllowLeadingWildcard(true);\n    String docs[] = {\n        \"\\\\ abcdefg1\",\n        \"\\\\79 hijklmn1\",\n        \"\\\\\\\\ opqrstu1\",\n    };\n    // queries that should find all docs\n    String matchAll[] = {\n        \"*\", \"*1\", \"**1\", \"*?\", \"*?1\", \"?*1\", \"**\", \"***\", \"\\\\\\\\*\"\n    };\n    // queries that should find no docs\n    String matchNone[] = {\n        \"a*h\", \"a?h\", \"*a*h\", \"?a\", \"a?\",\n    };\n    // queries that should be parsed to prefix queries\n    String matchOneDocPrefix[][] = {\n        {\"a*\", \"ab*\", \"abc*\", }, // these should find only doc 0 \n        {\"h*\", \"hi*\", \"hij*\", \"\\\\\\\\7*\"}, // these should find only doc 1\n        {\"o*\", \"op*\", \"opq*\", \"\\\\\\\\\\\\\\\\*\"}, // these should find only doc 2\n    };\n    // queries that should be parsed to wildcard queries\n    String matchOneDocWild[][] = {\n        {\"*a*\", \"*ab*\", \"*abc**\", \"ab*e*\", \"*g?\", \"*f?1\", \"abc**\"}, // these should find only doc 0\n        {\"*h*\", \"*hi*\", \"*hij**\", \"hi*k*\", \"*n?\", \"*m?1\", \"hij**\"}, // these should find only doc 1\n        {\"*o*\", \"*op*\", \"*opq**\", \"op*q*\", \"*u?\", \"*t?1\", \"opq**\"}, // these should find only doc 2\n    };\n\n    // prepare the index\n    RAMDirectory dir = new RAMDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir, \n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(field,docs[i],Store.NO,Index.ANALYZED));\n      iw.addDocument(doc);\n    }\n    iw.close();\n    \n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    \n    // test queries that must find all\n    for (int i = 0; i < matchAll.length; i++) {\n      String qtxt = matchAll[i];\n      Query q = qp.parse(qtxt);\n      if (VERBOSE) System.out.println(\"matchAll: qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(docs.length,hits.length);\n    }\n    \n    // test queries that must find none\n    for (int i = 0; i < matchNone.length; i++) {\n      String qtxt = matchNone[i];\n      Query q = qp.parse(qtxt);\n      if (VERBOSE) System.out.println(\"matchNone: qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(0,hits.length);\n    }\n\n    // test queries that must be prefix queries and must find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocPrefix[i].length; j++) {\n        String qtxt = matchOneDocPrefix[i][j];\n        Query q = qp.parse(qtxt);\n        if (VERBOSE) System.out.println(\"match 1 prefix: doc=\"+docs[i]+\" qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n        assertEquals(PrefixQuery.class, q.getClass());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    // test queries that must be wildcard queries and must find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocWild[i].length; j++) {\n        String qtxt = matchOneDocWild[i][j];\n        Query q = qp.parse(qtxt);\n        if (VERBOSE) System.out.println(\"match 1 wild: doc=\"+docs[i]+\" qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n        assertEquals(WildcardQuery.class, q.getClass());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    searcher.close();\n  }\n\n","sourceOld":"  /**\n   * Test that wild card queries are parsed to the correct type and are searched correctly.\n   * This test looks at both parsing and execution of wildcard queries.\n   * Although placed here, it also tests prefix queries, verifying that\n   * prefix queries are not parsed into wild card queries, and viceversa.\n   * @throws Exception\n   */\n  public void testParsingAndSearching() throws Exception {\n    String field = \"content\";\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, field, new MockAnalyzer());\n    qp.setAllowLeadingWildcard(true);\n    String docs[] = {\n        \"\\\\ abcdefg1\",\n        \"\\\\79 hijklmn1\",\n        \"\\\\\\\\ opqrstu1\",\n    };\n    // queries that should find all docs\n    String matchAll[] = {\n        \"*\", \"*1\", \"**1\", \"*?\", \"*?1\", \"?*1\", \"**\", \"***\", \"\\\\\\\\*\"\n    };\n    // queries that should find no docs\n    String matchNone[] = {\n        \"a*h\", \"a?h\", \"*a*h\", \"?a\", \"a?\",\n    };\n    // queries that should be parsed to prefix queries\n    String matchOneDocPrefix[][] = {\n        {\"a*\", \"ab*\", \"abc*\", }, // these should find only doc 0 \n        {\"h*\", \"hi*\", \"hij*\", \"\\\\\\\\7*\"}, // these should find only doc 1\n        {\"o*\", \"op*\", \"opq*\", \"\\\\\\\\\\\\\\\\*\"}, // these should find only doc 2\n    };\n    // queries that should be parsed to wildcard queries\n    String matchOneDocWild[][] = {\n        {\"*a*\", \"*ab*\", \"*abc**\", \"ab*e*\", \"*g?\", \"*f?1\", \"abc**\"}, // these should find only doc 0\n        {\"*h*\", \"*hi*\", \"*hij**\", \"hi*k*\", \"*n?\", \"*m?1\", \"hij**\"}, // these should find only doc 1\n        {\"*o*\", \"*op*\", \"*opq**\", \"op*q*\", \"*u?\", \"*t?1\", \"opq**\"}, // these should find only doc 2\n    };\n\n    // prepare the index\n    RAMDirectory dir = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(field,docs[i],Store.NO,Index.ANALYZED));\n      iw.addDocument(doc);\n    }\n    iw.close();\n    \n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    \n    // test queries that must find all\n    for (int i = 0; i < matchAll.length; i++) {\n      String qtxt = matchAll[i];\n      Query q = qp.parse(qtxt);\n      if (VERBOSE) System.out.println(\"matchAll: qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(docs.length,hits.length);\n    }\n    \n    // test queries that must find none\n    for (int i = 0; i < matchNone.length; i++) {\n      String qtxt = matchNone[i];\n      Query q = qp.parse(qtxt);\n      if (VERBOSE) System.out.println(\"matchNone: qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(0,hits.length);\n    }\n\n    // test queries that must be prefix queries and must find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocPrefix[i].length; j++) {\n        String qtxt = matchOneDocPrefix[i][j];\n        Query q = qp.parse(qtxt);\n        if (VERBOSE) System.out.println(\"match 1 prefix: doc=\"+docs[i]+\" qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n        assertEquals(PrefixQuery.class, q.getClass());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    // test queries that must be wildcard queries and must find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocWild[i].length; j++) {\n        String qtxt = matchOneDocWild[i][j];\n        Query q = qp.parse(qtxt);\n        if (VERBOSE) System.out.println(\"match 1 wild: doc=\"+docs[i]+\" qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n        assertEquals(WildcardQuery.class, q.getClass());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestWildcard#testParsingAndSearching().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestWildcard#testParsingAndSearching().mjava","sourceNew":"  /**\n   * Test that wild card queries are parsed to the correct type and are searched correctly.\n   * This test looks at both parsing and execution of wildcard queries.\n   * Although placed here, it also tests prefix queries, verifying that\n   * prefix queries are not parsed into wild card queries, and viceversa.\n   * @throws Exception\n   */\n  public void testParsingAndSearching() throws Exception {\n    String field = \"content\";\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, field, new MockAnalyzer());\n    qp.setAllowLeadingWildcard(true);\n    String docs[] = {\n        \"\\\\ abcdefg1\",\n        \"\\\\79 hijklmn1\",\n        \"\\\\\\\\ opqrstu1\",\n    };\n    // queries that should find all docs\n    String matchAll[] = {\n        \"*\", \"*1\", \"**1\", \"*?\", \"*?1\", \"?*1\", \"**\", \"***\", \"\\\\\\\\*\"\n    };\n    // queries that should find no docs\n    String matchNone[] = {\n        \"a*h\", \"a?h\", \"*a*h\", \"?a\", \"a?\",\n    };\n    // queries that should be parsed to prefix queries\n    String matchOneDocPrefix[][] = {\n        {\"a*\", \"ab*\", \"abc*\", }, // these should find only doc 0 \n        {\"h*\", \"hi*\", \"hij*\", \"\\\\\\\\7*\"}, // these should find only doc 1\n        {\"o*\", \"op*\", \"opq*\", \"\\\\\\\\\\\\\\\\*\"}, // these should find only doc 2\n    };\n    // queries that should be parsed to wildcard queries\n    String matchOneDocWild[][] = {\n        {\"*a*\", \"*ab*\", \"*abc**\", \"ab*e*\", \"*g?\", \"*f?1\", \"abc**\"}, // these should find only doc 0\n        {\"*h*\", \"*hi*\", \"*hij**\", \"hi*k*\", \"*n?\", \"*m?1\", \"hij**\"}, // these should find only doc 1\n        {\"*o*\", \"*op*\", \"*opq**\", \"op*q*\", \"*u?\", \"*t?1\", \"opq**\"}, // these should find only doc 2\n    };\n\n    // prepare the index\n    RAMDirectory dir = new RAMDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir, \n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(field,docs[i],Store.NO,Index.ANALYZED));\n      iw.addDocument(doc);\n    }\n    iw.close();\n    \n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    \n    // test queries that must find all\n    for (int i = 0; i < matchAll.length; i++) {\n      String qtxt = matchAll[i];\n      Query q = qp.parse(qtxt);\n      if (VERBOSE) System.out.println(\"matchAll: qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(docs.length,hits.length);\n    }\n    \n    // test queries that must find none\n    for (int i = 0; i < matchNone.length; i++) {\n      String qtxt = matchNone[i];\n      Query q = qp.parse(qtxt);\n      if (VERBOSE) System.out.println(\"matchNone: qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(0,hits.length);\n    }\n\n    // test queries that must be prefix queries and must find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocPrefix[i].length; j++) {\n        String qtxt = matchOneDocPrefix[i][j];\n        Query q = qp.parse(qtxt);\n        if (VERBOSE) System.out.println(\"match 1 prefix: doc=\"+docs[i]+\" qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n        assertEquals(PrefixQuery.class, q.getClass());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    // test queries that must be wildcard queries and must find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocWild[i].length; j++) {\n        String qtxt = matchOneDocWild[i][j];\n        Query q = qp.parse(qtxt);\n        if (VERBOSE) System.out.println(\"match 1 wild: doc=\"+docs[i]+\" qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n        assertEquals(WildcardQuery.class, q.getClass());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    searcher.close();\n  }\n\n","sourceOld":"  /**\n   * Test that wild card queries are parsed to the correct type and are searched correctly.\n   * This test looks at both parsing and execution of wildcard queries.\n   * Although placed here, it also tests prefix queries, verifying that\n   * prefix queries are not parsed into wild card queries, and viceversa.\n   * @throws Exception\n   */\n  public void testParsingAndSearching() throws Exception {\n    String field = \"content\";\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, field, new MockAnalyzer());\n    qp.setAllowLeadingWildcard(true);\n    String docs[] = {\n        \"\\\\ abcdefg1\",\n        \"\\\\79 hijklmn1\",\n        \"\\\\\\\\ opqrstu1\",\n    };\n    // queries that should find all docs\n    String matchAll[] = {\n        \"*\", \"*1\", \"**1\", \"*?\", \"*?1\", \"?*1\", \"**\", \"***\", \"\\\\\\\\*\"\n    };\n    // queries that should find no docs\n    String matchNone[] = {\n        \"a*h\", \"a?h\", \"*a*h\", \"?a\", \"a?\",\n    };\n    // queries that should be parsed to prefix queries\n    String matchOneDocPrefix[][] = {\n        {\"a*\", \"ab*\", \"abc*\", }, // these should find only doc 0 \n        {\"h*\", \"hi*\", \"hij*\", \"\\\\\\\\7*\"}, // these should find only doc 1\n        {\"o*\", \"op*\", \"opq*\", \"\\\\\\\\\\\\\\\\*\"}, // these should find only doc 2\n    };\n    // queries that should be parsed to wildcard queries\n    String matchOneDocWild[][] = {\n        {\"*a*\", \"*ab*\", \"*abc**\", \"ab*e*\", \"*g?\", \"*f?1\", \"abc**\"}, // these should find only doc 0\n        {\"*h*\", \"*hi*\", \"*hij**\", \"hi*k*\", \"*n?\", \"*m?1\", \"hij**\"}, // these should find only doc 1\n        {\"*o*\", \"*op*\", \"*opq**\", \"op*q*\", \"*u?\", \"*t?1\", \"opq**\"}, // these should find only doc 2\n    };\n\n    // prepare the index\n    RAMDirectory dir = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(field,docs[i],Store.NO,Index.ANALYZED));\n      iw.addDocument(doc);\n    }\n    iw.close();\n    \n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    \n    // test queries that must find all\n    for (int i = 0; i < matchAll.length; i++) {\n      String qtxt = matchAll[i];\n      Query q = qp.parse(qtxt);\n      if (VERBOSE) System.out.println(\"matchAll: qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(docs.length,hits.length);\n    }\n    \n    // test queries that must find none\n    for (int i = 0; i < matchNone.length; i++) {\n      String qtxt = matchNone[i];\n      Query q = qp.parse(qtxt);\n      if (VERBOSE) System.out.println(\"matchNone: qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(0,hits.length);\n    }\n\n    // test queries that must be prefix queries and must find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocPrefix[i].length; j++) {\n        String qtxt = matchOneDocPrefix[i][j];\n        Query q = qp.parse(qtxt);\n        if (VERBOSE) System.out.println(\"match 1 prefix: doc=\"+docs[i]+\" qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n        assertEquals(PrefixQuery.class, q.getClass());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    // test queries that must be wildcard queries and must find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocWild[i].length; j++) {\n        String qtxt = matchOneDocWild[i][j];\n        Query q = qp.parse(qtxt);\n        if (VERBOSE) System.out.println(\"match 1 wild: doc=\"+docs[i]+\" qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n        assertEquals(WildcardQuery.class, q.getClass());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15bbd254c1506df5299c4df8c148262c7bd6301e","date":1279913113,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestWildcard#testParsingAndSearching().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestWildcard#testParsingAndSearching().mjava","sourceNew":"  /**\n   * Test that wild card queries are parsed to the correct type and are searched correctly.\n   * This test looks at both parsing and execution of wildcard queries.\n   * Although placed here, it also tests prefix queries, verifying that\n   * prefix queries are not parsed into wild card queries, and viceversa.\n   * @throws Exception\n   */\n  public void testParsingAndSearching() throws Exception {\n    String field = \"content\";\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, field, new MockAnalyzer());\n    qp.setAllowLeadingWildcard(true);\n    String docs[] = {\n        \"\\\\ abcdefg1\",\n        \"\\\\79 hijklmn1\",\n        \"\\\\\\\\ opqrstu1\",\n    };\n    // queries that should find all docs\n    String matchAll[] = {\n        \"*\", \"*1\", \"**1\", \"*?\", \"*?1\", \"?*1\", \"**\", \"***\", \"\\\\\\\\*\"\n    };\n    // queries that should find no docs\n    String matchNone[] = {\n        \"a*h\", \"a?h\", \"*a*h\", \"?a\", \"a?\",\n    };\n    // queries that should be parsed to prefix queries\n    String matchOneDocPrefix[][] = {\n        {\"a*\", \"ab*\", \"abc*\", }, // these should find only doc 0 \n        {\"h*\", \"hi*\", \"hij*\", \"\\\\\\\\7*\"}, // these should find only doc 1\n        {\"o*\", \"op*\", \"opq*\", \"\\\\\\\\\\\\\\\\*\"}, // these should find only doc 2\n    };\n    // queries that should be parsed to wildcard queries\n    String matchOneDocWild[][] = {\n        {\"*a*\", \"*ab*\", \"*abc**\", \"ab*e*\", \"*g?\", \"*f?1\", \"abc**\"}, // these should find only doc 0\n        {\"*h*\", \"*hi*\", \"*hij**\", \"hi*k*\", \"*n?\", \"*m?1\", \"hij**\"}, // these should find only doc 1\n        {\"*o*\", \"*op*\", \"*opq**\", \"op*q*\", \"*u?\", \"*t?1\", \"opq**\"}, // these should find only doc 2\n    };\n\n    // prepare the index\n    RAMDirectory dir = new RAMDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir);\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(field,docs[i],Store.NO,Index.ANALYZED));\n      iw.addDocument(doc);\n    }\n    iw.close();\n    \n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    \n    // test queries that must find all\n    for (int i = 0; i < matchAll.length; i++) {\n      String qtxt = matchAll[i];\n      Query q = qp.parse(qtxt);\n      if (VERBOSE) System.out.println(\"matchAll: qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(docs.length,hits.length);\n    }\n    \n    // test queries that must find none\n    for (int i = 0; i < matchNone.length; i++) {\n      String qtxt = matchNone[i];\n      Query q = qp.parse(qtxt);\n      if (VERBOSE) System.out.println(\"matchNone: qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(0,hits.length);\n    }\n\n    // test queries that must be prefix queries and must find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocPrefix[i].length; j++) {\n        String qtxt = matchOneDocPrefix[i][j];\n        Query q = qp.parse(qtxt);\n        if (VERBOSE) System.out.println(\"match 1 prefix: doc=\"+docs[i]+\" qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n        assertEquals(PrefixQuery.class, q.getClass());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    // test queries that must be wildcard queries and must find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocWild[i].length; j++) {\n        String qtxt = matchOneDocWild[i][j];\n        Query q = qp.parse(qtxt);\n        if (VERBOSE) System.out.println(\"match 1 wild: doc=\"+docs[i]+\" qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n        assertEquals(WildcardQuery.class, q.getClass());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    searcher.close();\n  }\n\n","sourceOld":"  /**\n   * Test that wild card queries are parsed to the correct type and are searched correctly.\n   * This test looks at both parsing and execution of wildcard queries.\n   * Although placed here, it also tests prefix queries, verifying that\n   * prefix queries are not parsed into wild card queries, and viceversa.\n   * @throws Exception\n   */\n  public void testParsingAndSearching() throws Exception {\n    String field = \"content\";\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, field, new MockAnalyzer());\n    qp.setAllowLeadingWildcard(true);\n    String docs[] = {\n        \"\\\\ abcdefg1\",\n        \"\\\\79 hijklmn1\",\n        \"\\\\\\\\ opqrstu1\",\n    };\n    // queries that should find all docs\n    String matchAll[] = {\n        \"*\", \"*1\", \"**1\", \"*?\", \"*?1\", \"?*1\", \"**\", \"***\", \"\\\\\\\\*\"\n    };\n    // queries that should find no docs\n    String matchNone[] = {\n        \"a*h\", \"a?h\", \"*a*h\", \"?a\", \"a?\",\n    };\n    // queries that should be parsed to prefix queries\n    String matchOneDocPrefix[][] = {\n        {\"a*\", \"ab*\", \"abc*\", }, // these should find only doc 0 \n        {\"h*\", \"hi*\", \"hij*\", \"\\\\\\\\7*\"}, // these should find only doc 1\n        {\"o*\", \"op*\", \"opq*\", \"\\\\\\\\\\\\\\\\*\"}, // these should find only doc 2\n    };\n    // queries that should be parsed to wildcard queries\n    String matchOneDocWild[][] = {\n        {\"*a*\", \"*ab*\", \"*abc**\", \"ab*e*\", \"*g?\", \"*f?1\", \"abc**\"}, // these should find only doc 0\n        {\"*h*\", \"*hi*\", \"*hij**\", \"hi*k*\", \"*n?\", \"*m?1\", \"hij**\"}, // these should find only doc 1\n        {\"*o*\", \"*op*\", \"*opq**\", \"op*q*\", \"*u?\", \"*t?1\", \"opq**\"}, // these should find only doc 2\n    };\n\n    // prepare the index\n    RAMDirectory dir = new RAMDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir, \n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(field,docs[i],Store.NO,Index.ANALYZED));\n      iw.addDocument(doc);\n    }\n    iw.close();\n    \n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    \n    // test queries that must find all\n    for (int i = 0; i < matchAll.length; i++) {\n      String qtxt = matchAll[i];\n      Query q = qp.parse(qtxt);\n      if (VERBOSE) System.out.println(\"matchAll: qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(docs.length,hits.length);\n    }\n    \n    // test queries that must find none\n    for (int i = 0; i < matchNone.length; i++) {\n      String qtxt = matchNone[i];\n      Query q = qp.parse(qtxt);\n      if (VERBOSE) System.out.println(\"matchNone: qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(0,hits.length);\n    }\n\n    // test queries that must be prefix queries and must find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocPrefix[i].length; j++) {\n        String qtxt = matchOneDocPrefix[i][j];\n        Query q = qp.parse(qtxt);\n        if (VERBOSE) System.out.println(\"match 1 prefix: doc=\"+docs[i]+\" qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n        assertEquals(PrefixQuery.class, q.getClass());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    // test queries that must be wildcard queries and must find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocWild[i].length; j++) {\n        String qtxt = matchOneDocWild[i][j];\n        Query q = qp.parse(qtxt);\n        if (VERBOSE) System.out.println(\"match 1 wild: doc=\"+docs[i]+\" qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n        assertEquals(WildcardQuery.class, q.getClass());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b103252dee6afa1b6d7a622c773d178788eb85a","date":1280180143,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestWildcard#testParsingAndSearching().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestWildcard#testParsingAndSearching().mjava","sourceNew":"  /**\n   * Test that wild card queries are parsed to the correct type and are searched correctly.\n   * This test looks at both parsing and execution of wildcard queries.\n   * Although placed here, it also tests prefix queries, verifying that\n   * prefix queries are not parsed into wild card queries, and viceversa.\n   * @throws Exception\n   */\n  public void testParsingAndSearching() throws Exception {\n    String field = \"content\";\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, field, new MockAnalyzer());\n    qp.setAllowLeadingWildcard(true);\n    String docs[] = {\n        \"\\\\ abcdefg1\",\n        \"\\\\79 hijklmn1\",\n        \"\\\\\\\\ opqrstu1\",\n    };\n    // queries that should find all docs\n    String matchAll[] = {\n        \"*\", \"*1\", \"**1\", \"*?\", \"*?1\", \"?*1\", \"**\", \"***\", \"\\\\\\\\*\"\n    };\n    // queries that should find no docs\n    String matchNone[] = {\n        \"a*h\", \"a?h\", \"*a*h\", \"?a\", \"a?\",\n    };\n    // queries that should be parsed to prefix queries\n    String matchOneDocPrefix[][] = {\n        {\"a*\", \"ab*\", \"abc*\", }, // these should find only doc 0 \n        {\"h*\", \"hi*\", \"hij*\", \"\\\\\\\\7*\"}, // these should find only doc 1\n        {\"o*\", \"op*\", \"opq*\", \"\\\\\\\\\\\\\\\\*\"}, // these should find only doc 2\n    };\n    // queries that should be parsed to wildcard queries\n    String matchOneDocWild[][] = {\n        {\"*a*\", \"*ab*\", \"*abc**\", \"ab*e*\", \"*g?\", \"*f?1\", \"abc**\"}, // these should find only doc 0\n        {\"*h*\", \"*hi*\", \"*hij**\", \"hi*k*\", \"*n?\", \"*m?1\", \"hij**\"}, // these should find only doc 1\n        {\"*o*\", \"*op*\", \"*opq**\", \"op*q*\", \"*u?\", \"*t?1\", \"opq**\"}, // these should find only doc 2\n    };\n\n    // prepare the index\n    RAMDirectory dir = new RAMDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir);\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(field,docs[i],Store.NO,Index.ANALYZED));\n      iw.addDocument(doc);\n    }\n    iw.close();\n    \n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    \n    // test queries that must find all\n    for (int i = 0; i < matchAll.length; i++) {\n      String qtxt = matchAll[i];\n      Query q = qp.parse(qtxt);\n      if (VERBOSE) System.out.println(\"matchAll: qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(docs.length,hits.length);\n    }\n    \n    // test queries that must find none\n    for (int i = 0; i < matchNone.length; i++) {\n      String qtxt = matchNone[i];\n      Query q = qp.parse(qtxt);\n      if (VERBOSE) System.out.println(\"matchNone: qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(0,hits.length);\n    }\n\n    // test queries that must be prefix queries and must find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocPrefix[i].length; j++) {\n        String qtxt = matchOneDocPrefix[i][j];\n        Query q = qp.parse(qtxt);\n        if (VERBOSE) System.out.println(\"match 1 prefix: doc=\"+docs[i]+\" qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n        assertEquals(PrefixQuery.class, q.getClass());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    // test queries that must be wildcard queries and must find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocWild[i].length; j++) {\n        String qtxt = matchOneDocWild[i][j];\n        Query q = qp.parse(qtxt);\n        if (VERBOSE) System.out.println(\"match 1 wild: doc=\"+docs[i]+\" qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n        assertEquals(WildcardQuery.class, q.getClass());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    searcher.close();\n  }\n\n","sourceOld":"  /**\n   * Test that wild card queries are parsed to the correct type and are searched correctly.\n   * This test looks at both parsing and execution of wildcard queries.\n   * Although placed here, it also tests prefix queries, verifying that\n   * prefix queries are not parsed into wild card queries, and viceversa.\n   * @throws Exception\n   */\n  public void testParsingAndSearching() throws Exception {\n    String field = \"content\";\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, field, new MockAnalyzer());\n    qp.setAllowLeadingWildcard(true);\n    String docs[] = {\n        \"\\\\ abcdefg1\",\n        \"\\\\79 hijklmn1\",\n        \"\\\\\\\\ opqrstu1\",\n    };\n    // queries that should find all docs\n    String matchAll[] = {\n        \"*\", \"*1\", \"**1\", \"*?\", \"*?1\", \"?*1\", \"**\", \"***\", \"\\\\\\\\*\"\n    };\n    // queries that should find no docs\n    String matchNone[] = {\n        \"a*h\", \"a?h\", \"*a*h\", \"?a\", \"a?\",\n    };\n    // queries that should be parsed to prefix queries\n    String matchOneDocPrefix[][] = {\n        {\"a*\", \"ab*\", \"abc*\", }, // these should find only doc 0 \n        {\"h*\", \"hi*\", \"hij*\", \"\\\\\\\\7*\"}, // these should find only doc 1\n        {\"o*\", \"op*\", \"opq*\", \"\\\\\\\\\\\\\\\\*\"}, // these should find only doc 2\n    };\n    // queries that should be parsed to wildcard queries\n    String matchOneDocWild[][] = {\n        {\"*a*\", \"*ab*\", \"*abc**\", \"ab*e*\", \"*g?\", \"*f?1\", \"abc**\"}, // these should find only doc 0\n        {\"*h*\", \"*hi*\", \"*hij**\", \"hi*k*\", \"*n?\", \"*m?1\", \"hij**\"}, // these should find only doc 1\n        {\"*o*\", \"*op*\", \"*opq**\", \"op*q*\", \"*u?\", \"*t?1\", \"opq**\"}, // these should find only doc 2\n    };\n\n    // prepare the index\n    RAMDirectory dir = new RAMDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir, \n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(field,docs[i],Store.NO,Index.ANALYZED));\n      iw.addDocument(doc);\n    }\n    iw.close();\n    \n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    \n    // test queries that must find all\n    for (int i = 0; i < matchAll.length; i++) {\n      String qtxt = matchAll[i];\n      Query q = qp.parse(qtxt);\n      if (VERBOSE) System.out.println(\"matchAll: qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(docs.length,hits.length);\n    }\n    \n    // test queries that must find none\n    for (int i = 0; i < matchNone.length; i++) {\n      String qtxt = matchNone[i];\n      Query q = qp.parse(qtxt);\n      if (VERBOSE) System.out.println(\"matchNone: qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(0,hits.length);\n    }\n\n    // test queries that must be prefix queries and must find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocPrefix[i].length; j++) {\n        String qtxt = matchOneDocPrefix[i][j];\n        Query q = qp.parse(qtxt);\n        if (VERBOSE) System.out.println(\"match 1 prefix: doc=\"+docs[i]+\" qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n        assertEquals(PrefixQuery.class, q.getClass());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    // test queries that must be wildcard queries and must find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocWild[i].length; j++) {\n        String qtxt = matchOneDocWild[i][j];\n        Query q = qp.parse(qtxt);\n        if (VERBOSE) System.out.println(\"match 1 wild: doc=\"+docs[i]+\" qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n        assertEquals(WildcardQuery.class, q.getClass());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3242a09f703274d3b9283f2064a1a33064b53a1b","date":1280263474,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestWildcard#testParsingAndSearching().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestWildcard#testParsingAndSearching().mjava","sourceNew":"  /**\n   * Test that wild card queries are parsed to the correct type and are searched correctly.\n   * This test looks at both parsing and execution of wildcard queries.\n   * Although placed here, it also tests prefix queries, verifying that\n   * prefix queries are not parsed into wild card queries, and viceversa.\n   * @throws Exception\n   */\n  public void testParsingAndSearching() throws Exception {\n    String field = \"content\";\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, field, new MockAnalyzer());\n    qp.setAllowLeadingWildcard(true);\n    String docs[] = {\n        \"\\\\ abcdefg1\",\n        \"\\\\79 hijklmn1\",\n        \"\\\\\\\\ opqrstu1\",\n    };\n    // queries that should find all docs\n    String matchAll[] = {\n        \"*\", \"*1\", \"**1\", \"*?\", \"*?1\", \"?*1\", \"**\", \"***\", \"\\\\\\\\*\"\n    };\n    // queries that should find no docs\n    String matchNone[] = {\n        \"a*h\", \"a?h\", \"*a*h\", \"?a\", \"a?\",\n    };\n    // queries that should be parsed to prefix queries\n    String matchOneDocPrefix[][] = {\n        {\"a*\", \"ab*\", \"abc*\", }, // these should find only doc 0 \n        {\"h*\", \"hi*\", \"hij*\", \"\\\\\\\\7*\"}, // these should find only doc 1\n        {\"o*\", \"op*\", \"opq*\", \"\\\\\\\\\\\\\\\\*\"}, // these should find only doc 2\n    };\n    // queries that should be parsed to wildcard queries\n    String matchOneDocWild[][] = {\n        {\"*a*\", \"*ab*\", \"*abc**\", \"ab*e*\", \"*g?\", \"*f?1\", \"abc**\"}, // these should find only doc 0\n        {\"*h*\", \"*hi*\", \"*hij**\", \"hi*k*\", \"*n?\", \"*m?1\", \"hij**\"}, // these should find only doc 1\n        {\"*o*\", \"*op*\", \"*opq**\", \"op*q*\", \"*u?\", \"*t?1\", \"opq**\"}, // these should find only doc 2\n    };\n\n    // prepare the index\n    RAMDirectory dir = new RAMDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir);\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(field,docs[i],Store.NO,Index.ANALYZED));\n      iw.addDocument(doc);\n    }\n    iw.close();\n    \n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    \n    // test queries that must find all\n    for (int i = 0; i < matchAll.length; i++) {\n      String qtxt = matchAll[i];\n      Query q = qp.parse(qtxt);\n      if (VERBOSE) System.out.println(\"matchAll: qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(docs.length,hits.length);\n    }\n    \n    // test queries that must find none\n    for (int i = 0; i < matchNone.length; i++) {\n      String qtxt = matchNone[i];\n      Query q = qp.parse(qtxt);\n      if (VERBOSE) System.out.println(\"matchNone: qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(0,hits.length);\n    }\n\n    // test queries that must be prefix queries and must find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocPrefix[i].length; j++) {\n        String qtxt = matchOneDocPrefix[i][j];\n        Query q = qp.parse(qtxt);\n        if (VERBOSE) System.out.println(\"match 1 prefix: doc=\"+docs[i]+\" qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n        assertEquals(PrefixQuery.class, q.getClass());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    // test queries that must be wildcard queries and must find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocWild[i].length; j++) {\n        String qtxt = matchOneDocWild[i][j];\n        Query q = qp.parse(qtxt);\n        if (VERBOSE) System.out.println(\"match 1 wild: doc=\"+docs[i]+\" qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n        assertEquals(WildcardQuery.class, q.getClass());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    searcher.close();\n  }\n\n","sourceOld":"  /**\n   * Test that wild card queries are parsed to the correct type and are searched correctly.\n   * This test looks at both parsing and execution of wildcard queries.\n   * Although placed here, it also tests prefix queries, verifying that\n   * prefix queries are not parsed into wild card queries, and viceversa.\n   * @throws Exception\n   */\n  public void testParsingAndSearching() throws Exception {\n    String field = \"content\";\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, field, new MockAnalyzer());\n    qp.setAllowLeadingWildcard(true);\n    String docs[] = {\n        \"\\\\ abcdefg1\",\n        \"\\\\79 hijklmn1\",\n        \"\\\\\\\\ opqrstu1\",\n    };\n    // queries that should find all docs\n    String matchAll[] = {\n        \"*\", \"*1\", \"**1\", \"*?\", \"*?1\", \"?*1\", \"**\", \"***\", \"\\\\\\\\*\"\n    };\n    // queries that should find no docs\n    String matchNone[] = {\n        \"a*h\", \"a?h\", \"*a*h\", \"?a\", \"a?\",\n    };\n    // queries that should be parsed to prefix queries\n    String matchOneDocPrefix[][] = {\n        {\"a*\", \"ab*\", \"abc*\", }, // these should find only doc 0 \n        {\"h*\", \"hi*\", \"hij*\", \"\\\\\\\\7*\"}, // these should find only doc 1\n        {\"o*\", \"op*\", \"opq*\", \"\\\\\\\\\\\\\\\\*\"}, // these should find only doc 2\n    };\n    // queries that should be parsed to wildcard queries\n    String matchOneDocWild[][] = {\n        {\"*a*\", \"*ab*\", \"*abc**\", \"ab*e*\", \"*g?\", \"*f?1\", \"abc**\"}, // these should find only doc 0\n        {\"*h*\", \"*hi*\", \"*hij**\", \"hi*k*\", \"*n?\", \"*m?1\", \"hij**\"}, // these should find only doc 1\n        {\"*o*\", \"*op*\", \"*opq**\", \"op*q*\", \"*u?\", \"*t?1\", \"opq**\"}, // these should find only doc 2\n    };\n\n    // prepare the index\n    RAMDirectory dir = new RAMDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir, \n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(field,docs[i],Store.NO,Index.ANALYZED));\n      iw.addDocument(doc);\n    }\n    iw.close();\n    \n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    \n    // test queries that must find all\n    for (int i = 0; i < matchAll.length; i++) {\n      String qtxt = matchAll[i];\n      Query q = qp.parse(qtxt);\n      if (VERBOSE) System.out.println(\"matchAll: qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(docs.length,hits.length);\n    }\n    \n    // test queries that must find none\n    for (int i = 0; i < matchNone.length; i++) {\n      String qtxt = matchNone[i];\n      Query q = qp.parse(qtxt);\n      if (VERBOSE) System.out.println(\"matchNone: qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(0,hits.length);\n    }\n\n    // test queries that must be prefix queries and must find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocPrefix[i].length; j++) {\n        String qtxt = matchOneDocPrefix[i][j];\n        Query q = qp.parse(qtxt);\n        if (VERBOSE) System.out.println(\"match 1 prefix: doc=\"+docs[i]+\" qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n        assertEquals(PrefixQuery.class, q.getClass());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    // test queries that must be wildcard queries and must find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocWild[i].length; j++) {\n        String qtxt = matchOneDocWild[i][j];\n        Query q = qp.parse(qtxt);\n        if (VERBOSE) System.out.println(\"match 1 wild: doc=\"+docs[i]+\" qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n        assertEquals(WildcardQuery.class, q.getClass());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c","date":1281477834,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestWildcard#testParsingAndSearching().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestWildcard#testParsingAndSearching().mjava","sourceNew":"  /**\n   * Test that wild card queries are parsed to the correct type and are searched correctly.\n   * This test looks at both parsing and execution of wildcard queries.\n   * Although placed here, it also tests prefix queries, verifying that\n   * prefix queries are not parsed into wild card queries, and viceversa.\n   * @throws Exception\n   */\n  public void testParsingAndSearching() throws Exception {\n    String field = \"content\";\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, field, new MockAnalyzer());\n    qp.setAllowLeadingWildcard(true);\n    String docs[] = {\n        \"\\\\ abcdefg1\",\n        \"\\\\79 hijklmn1\",\n        \"\\\\\\\\ opqrstu1\",\n    };\n    // queries that should find all docs\n    String matchAll[] = {\n        \"*\", \"*1\", \"**1\", \"*?\", \"*?1\", \"?*1\", \"**\", \"***\", \"\\\\\\\\*\"\n    };\n    // queries that should find no docs\n    String matchNone[] = {\n        \"a*h\", \"a?h\", \"*a*h\", \"?a\", \"a?\",\n    };\n    // queries that should be parsed to prefix queries\n    String matchOneDocPrefix[][] = {\n        {\"a*\", \"ab*\", \"abc*\", }, // these should find only doc 0 \n        {\"h*\", \"hi*\", \"hij*\", \"\\\\\\\\7*\"}, // these should find only doc 1\n        {\"o*\", \"op*\", \"opq*\", \"\\\\\\\\\\\\\\\\*\"}, // these should find only doc 2\n    };\n    // queries that should be parsed to wildcard queries\n    String matchOneDocWild[][] = {\n        {\"*a*\", \"*ab*\", \"*abc**\", \"ab*e*\", \"*g?\", \"*f?1\", \"abc**\"}, // these should find only doc 0\n        {\"*h*\", \"*hi*\", \"*hij**\", \"hi*k*\", \"*n?\", \"*m?1\", \"hij**\"}, // these should find only doc 1\n        {\"*o*\", \"*op*\", \"*opq**\", \"op*q*\", \"*u?\", \"*t?1\", \"opq**\"}, // these should find only doc 2\n    };\n\n    // prepare the index\n    MockRAMDirectory dir = new MockRAMDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir);\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(field,docs[i],Store.NO,Index.ANALYZED));\n      iw.addDocument(doc);\n    }\n    iw.close();\n    \n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    \n    // test queries that must find all\n    for (int i = 0; i < matchAll.length; i++) {\n      String qtxt = matchAll[i];\n      Query q = qp.parse(qtxt);\n      if (VERBOSE) System.out.println(\"matchAll: qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(docs.length,hits.length);\n    }\n    \n    // test queries that must find none\n    for (int i = 0; i < matchNone.length; i++) {\n      String qtxt = matchNone[i];\n      Query q = qp.parse(qtxt);\n      if (VERBOSE) System.out.println(\"matchNone: qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(0,hits.length);\n    }\n\n    // test queries that must be prefix queries and must find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocPrefix[i].length; j++) {\n        String qtxt = matchOneDocPrefix[i][j];\n        Query q = qp.parse(qtxt);\n        if (VERBOSE) System.out.println(\"match 1 prefix: doc=\"+docs[i]+\" qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n        assertEquals(PrefixQuery.class, q.getClass());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    // test queries that must be wildcard queries and must find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocWild[i].length; j++) {\n        String qtxt = matchOneDocWild[i][j];\n        Query q = qp.parse(qtxt);\n        if (VERBOSE) System.out.println(\"match 1 wild: doc=\"+docs[i]+\" qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n        assertEquals(WildcardQuery.class, q.getClass());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    searcher.close();\n  }\n\n","sourceOld":"  /**\n   * Test that wild card queries are parsed to the correct type and are searched correctly.\n   * This test looks at both parsing and execution of wildcard queries.\n   * Although placed here, it also tests prefix queries, verifying that\n   * prefix queries are not parsed into wild card queries, and viceversa.\n   * @throws Exception\n   */\n  public void testParsingAndSearching() throws Exception {\n    String field = \"content\";\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, field, new MockAnalyzer());\n    qp.setAllowLeadingWildcard(true);\n    String docs[] = {\n        \"\\\\ abcdefg1\",\n        \"\\\\79 hijklmn1\",\n        \"\\\\\\\\ opqrstu1\",\n    };\n    // queries that should find all docs\n    String matchAll[] = {\n        \"*\", \"*1\", \"**1\", \"*?\", \"*?1\", \"?*1\", \"**\", \"***\", \"\\\\\\\\*\"\n    };\n    // queries that should find no docs\n    String matchNone[] = {\n        \"a*h\", \"a?h\", \"*a*h\", \"?a\", \"a?\",\n    };\n    // queries that should be parsed to prefix queries\n    String matchOneDocPrefix[][] = {\n        {\"a*\", \"ab*\", \"abc*\", }, // these should find only doc 0 \n        {\"h*\", \"hi*\", \"hij*\", \"\\\\\\\\7*\"}, // these should find only doc 1\n        {\"o*\", \"op*\", \"opq*\", \"\\\\\\\\\\\\\\\\*\"}, // these should find only doc 2\n    };\n    // queries that should be parsed to wildcard queries\n    String matchOneDocWild[][] = {\n        {\"*a*\", \"*ab*\", \"*abc**\", \"ab*e*\", \"*g?\", \"*f?1\", \"abc**\"}, // these should find only doc 0\n        {\"*h*\", \"*hi*\", \"*hij**\", \"hi*k*\", \"*n?\", \"*m?1\", \"hij**\"}, // these should find only doc 1\n        {\"*o*\", \"*op*\", \"*opq**\", \"op*q*\", \"*u?\", \"*t?1\", \"opq**\"}, // these should find only doc 2\n    };\n\n    // prepare the index\n    RAMDirectory dir = new RAMDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir);\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(field,docs[i],Store.NO,Index.ANALYZED));\n      iw.addDocument(doc);\n    }\n    iw.close();\n    \n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    \n    // test queries that must find all\n    for (int i = 0; i < matchAll.length; i++) {\n      String qtxt = matchAll[i];\n      Query q = qp.parse(qtxt);\n      if (VERBOSE) System.out.println(\"matchAll: qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(docs.length,hits.length);\n    }\n    \n    // test queries that must find none\n    for (int i = 0; i < matchNone.length; i++) {\n      String qtxt = matchNone[i];\n      Query q = qp.parse(qtxt);\n      if (VERBOSE) System.out.println(\"matchNone: qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(0,hits.length);\n    }\n\n    // test queries that must be prefix queries and must find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocPrefix[i].length; j++) {\n        String qtxt = matchOneDocPrefix[i][j];\n        Query q = qp.parse(qtxt);\n        if (VERBOSE) System.out.println(\"match 1 prefix: doc=\"+docs[i]+\" qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n        assertEquals(PrefixQuery.class, q.getClass());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    // test queries that must be wildcard queries and must find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocWild[i].length; j++) {\n        String qtxt = matchOneDocWild[i][j];\n        Query q = qp.parse(qtxt);\n        if (VERBOSE) System.out.println(\"match 1 wild: doc=\"+docs[i]+\" qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n        assertEquals(WildcardQuery.class, q.getClass());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestWildcard#testParsingAndSearching().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestWildcard#testParsingAndSearching().mjava","sourceNew":"  /**\n   * Test that wild card queries are parsed to the correct type and are searched correctly.\n   * This test looks at both parsing and execution of wildcard queries.\n   * Although placed here, it also tests prefix queries, verifying that\n   * prefix queries are not parsed into wild card queries, and viceversa.\n   * @throws Exception\n   */\n  public void testParsingAndSearching() throws Exception {\n    String field = \"content\";\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, field, new MockAnalyzer());\n    qp.setAllowLeadingWildcard(true);\n    String docs[] = {\n        \"\\\\ abcdefg1\",\n        \"\\\\79 hijklmn1\",\n        \"\\\\\\\\ opqrstu1\",\n    };\n    // queries that should find all docs\n    String matchAll[] = {\n        \"*\", \"*1\", \"**1\", \"*?\", \"*?1\", \"?*1\", \"**\", \"***\", \"\\\\\\\\*\"\n    };\n    // queries that should find no docs\n    String matchNone[] = {\n        \"a*h\", \"a?h\", \"*a*h\", \"?a\", \"a?\",\n    };\n    // queries that should be parsed to prefix queries\n    String matchOneDocPrefix[][] = {\n        {\"a*\", \"ab*\", \"abc*\", }, // these should find only doc 0 \n        {\"h*\", \"hi*\", \"hij*\", \"\\\\\\\\7*\"}, // these should find only doc 1\n        {\"o*\", \"op*\", \"opq*\", \"\\\\\\\\\\\\\\\\*\"}, // these should find only doc 2\n    };\n    // queries that should be parsed to wildcard queries\n    String matchOneDocWild[][] = {\n        {\"*a*\", \"*ab*\", \"*abc**\", \"ab*e*\", \"*g?\", \"*f?1\", \"abc**\"}, // these should find only doc 0\n        {\"*h*\", \"*hi*\", \"*hij**\", \"hi*k*\", \"*n?\", \"*m?1\", \"hij**\"}, // these should find only doc 1\n        {\"*o*\", \"*op*\", \"*opq**\", \"op*q*\", \"*u?\", \"*t?1\", \"opq**\"}, // these should find only doc 2\n    };\n\n    // prepare the index\n    MockRAMDirectory dir = newDirectory(random);\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir);\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(field,docs[i],Store.NO,Index.ANALYZED));\n      iw.addDocument(doc);\n    }\n    iw.close();\n    \n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    \n    // test queries that must find all\n    for (int i = 0; i < matchAll.length; i++) {\n      String qtxt = matchAll[i];\n      Query q = qp.parse(qtxt);\n      if (VERBOSE) System.out.println(\"matchAll: qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(docs.length,hits.length);\n    }\n    \n    // test queries that must find none\n    for (int i = 0; i < matchNone.length; i++) {\n      String qtxt = matchNone[i];\n      Query q = qp.parse(qtxt);\n      if (VERBOSE) System.out.println(\"matchNone: qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(0,hits.length);\n    }\n\n    // test queries that must be prefix queries and must find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocPrefix[i].length; j++) {\n        String qtxt = matchOneDocPrefix[i][j];\n        Query q = qp.parse(qtxt);\n        if (VERBOSE) System.out.println(\"match 1 prefix: doc=\"+docs[i]+\" qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n        assertEquals(PrefixQuery.class, q.getClass());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    // test queries that must be wildcard queries and must find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocWild[i].length; j++) {\n        String qtxt = matchOneDocWild[i][j];\n        Query q = qp.parse(qtxt);\n        if (VERBOSE) System.out.println(\"match 1 wild: doc=\"+docs[i]+\" qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n        assertEquals(WildcardQuery.class, q.getClass());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    searcher.close();\n    dir.close();\n  }\n\n","sourceOld":"  /**\n   * Test that wild card queries are parsed to the correct type and are searched correctly.\n   * This test looks at both parsing and execution of wildcard queries.\n   * Although placed here, it also tests prefix queries, verifying that\n   * prefix queries are not parsed into wild card queries, and viceversa.\n   * @throws Exception\n   */\n  public void testParsingAndSearching() throws Exception {\n    String field = \"content\";\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, field, new MockAnalyzer());\n    qp.setAllowLeadingWildcard(true);\n    String docs[] = {\n        \"\\\\ abcdefg1\",\n        \"\\\\79 hijklmn1\",\n        \"\\\\\\\\ opqrstu1\",\n    };\n    // queries that should find all docs\n    String matchAll[] = {\n        \"*\", \"*1\", \"**1\", \"*?\", \"*?1\", \"?*1\", \"**\", \"***\", \"\\\\\\\\*\"\n    };\n    // queries that should find no docs\n    String matchNone[] = {\n        \"a*h\", \"a?h\", \"*a*h\", \"?a\", \"a?\",\n    };\n    // queries that should be parsed to prefix queries\n    String matchOneDocPrefix[][] = {\n        {\"a*\", \"ab*\", \"abc*\", }, // these should find only doc 0 \n        {\"h*\", \"hi*\", \"hij*\", \"\\\\\\\\7*\"}, // these should find only doc 1\n        {\"o*\", \"op*\", \"opq*\", \"\\\\\\\\\\\\\\\\*\"}, // these should find only doc 2\n    };\n    // queries that should be parsed to wildcard queries\n    String matchOneDocWild[][] = {\n        {\"*a*\", \"*ab*\", \"*abc**\", \"ab*e*\", \"*g?\", \"*f?1\", \"abc**\"}, // these should find only doc 0\n        {\"*h*\", \"*hi*\", \"*hij**\", \"hi*k*\", \"*n?\", \"*m?1\", \"hij**\"}, // these should find only doc 1\n        {\"*o*\", \"*op*\", \"*opq**\", \"op*q*\", \"*u?\", \"*t?1\", \"opq**\"}, // these should find only doc 2\n    };\n\n    // prepare the index\n    MockRAMDirectory dir = new MockRAMDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir);\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(field,docs[i],Store.NO,Index.ANALYZED));\n      iw.addDocument(doc);\n    }\n    iw.close();\n    \n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    \n    // test queries that must find all\n    for (int i = 0; i < matchAll.length; i++) {\n      String qtxt = matchAll[i];\n      Query q = qp.parse(qtxt);\n      if (VERBOSE) System.out.println(\"matchAll: qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(docs.length,hits.length);\n    }\n    \n    // test queries that must find none\n    for (int i = 0; i < matchNone.length; i++) {\n      String qtxt = matchNone[i];\n      Query q = qp.parse(qtxt);\n      if (VERBOSE) System.out.println(\"matchNone: qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(0,hits.length);\n    }\n\n    // test queries that must be prefix queries and must find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocPrefix[i].length; j++) {\n        String qtxt = matchOneDocPrefix[i][j];\n        Query q = qp.parse(qtxt);\n        if (VERBOSE) System.out.println(\"match 1 prefix: doc=\"+docs[i]+\" qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n        assertEquals(PrefixQuery.class, q.getClass());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    // test queries that must be wildcard queries and must find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocWild[i].length; j++) {\n        String qtxt = matchOneDocWild[i][j];\n        Query q = qp.parse(qtxt);\n        if (VERBOSE) System.out.println(\"match 1 wild: doc=\"+docs[i]+\" qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n        assertEquals(WildcardQuery.class, q.getClass());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a05409176bd65129d67a785ee70e881e238a9aef","date":1282582843,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestWildcard#testParsingAndSearching().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestWildcard#testParsingAndSearching().mjava","sourceNew":"  /**\n   * Test that wild card queries are parsed to the correct type and are searched correctly.\n   * This test looks at both parsing and execution of wildcard queries.\n   * Although placed here, it also tests prefix queries, verifying that\n   * prefix queries are not parsed into wild card queries, and viceversa.\n   * @throws Exception\n   */\n  public void testParsingAndSearching() throws Exception {\n    String field = \"content\";\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, field, new MockAnalyzer());\n    qp.setAllowLeadingWildcard(true);\n    String docs[] = {\n        \"\\\\ abcdefg1\",\n        \"\\\\79 hijklmn1\",\n        \"\\\\\\\\ opqrstu1\",\n    };\n    // queries that should find all docs\n    String matchAll[] = {\n        \"*\", \"*1\", \"**1\", \"*?\", \"*?1\", \"?*1\", \"**\", \"***\", \"\\\\\\\\*\"\n    };\n    // queries that should find no docs\n    String matchNone[] = {\n        \"a*h\", \"a?h\", \"*a*h\", \"?a\", \"a?\",\n    };\n    // queries that should be parsed to prefix queries\n    String matchOneDocPrefix[][] = {\n        {\"a*\", \"ab*\", \"abc*\", }, // these should find only doc 0 \n        {\"h*\", \"hi*\", \"hij*\", \"\\\\\\\\7*\"}, // these should find only doc 1\n        {\"o*\", \"op*\", \"opq*\", \"\\\\\\\\\\\\\\\\*\"}, // these should find only doc 2\n    };\n    // queries that should be parsed to wildcard queries\n    String matchOneDocWild[][] = {\n        {\"*a*\", \"*ab*\", \"*abc**\", \"ab*e*\", \"*g?\", \"*f?1\", \"abc**\"}, // these should find only doc 0\n        {\"*h*\", \"*hi*\", \"*hij**\", \"hi*k*\", \"*n?\", \"*m?1\", \"hij**\"}, // these should find only doc 1\n        {\"*o*\", \"*op*\", \"*opq**\", \"op*q*\", \"*u?\", \"*t?1\", \"opq**\"}, // these should find only doc 2\n    };\n\n    // prepare the index\n    Directory dir = newDirectory(random);\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir);\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(field,docs[i],Store.NO,Index.ANALYZED));\n      iw.addDocument(doc);\n    }\n    iw.close();\n    \n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    \n    // test queries that must find all\n    for (int i = 0; i < matchAll.length; i++) {\n      String qtxt = matchAll[i];\n      Query q = qp.parse(qtxt);\n      if (VERBOSE) System.out.println(\"matchAll: qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(docs.length,hits.length);\n    }\n    \n    // test queries that must find none\n    for (int i = 0; i < matchNone.length; i++) {\n      String qtxt = matchNone[i];\n      Query q = qp.parse(qtxt);\n      if (VERBOSE) System.out.println(\"matchNone: qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(0,hits.length);\n    }\n\n    // test queries that must be prefix queries and must find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocPrefix[i].length; j++) {\n        String qtxt = matchOneDocPrefix[i][j];\n        Query q = qp.parse(qtxt);\n        if (VERBOSE) System.out.println(\"match 1 prefix: doc=\"+docs[i]+\" qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n        assertEquals(PrefixQuery.class, q.getClass());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    // test queries that must be wildcard queries and must find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocWild[i].length; j++) {\n        String qtxt = matchOneDocWild[i][j];\n        Query q = qp.parse(qtxt);\n        if (VERBOSE) System.out.println(\"match 1 wild: doc=\"+docs[i]+\" qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n        assertEquals(WildcardQuery.class, q.getClass());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    searcher.close();\n    dir.close();\n  }\n\n","sourceOld":"  /**\n   * Test that wild card queries are parsed to the correct type and are searched correctly.\n   * This test looks at both parsing and execution of wildcard queries.\n   * Although placed here, it also tests prefix queries, verifying that\n   * prefix queries are not parsed into wild card queries, and viceversa.\n   * @throws Exception\n   */\n  public void testParsingAndSearching() throws Exception {\n    String field = \"content\";\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, field, new MockAnalyzer());\n    qp.setAllowLeadingWildcard(true);\n    String docs[] = {\n        \"\\\\ abcdefg1\",\n        \"\\\\79 hijklmn1\",\n        \"\\\\\\\\ opqrstu1\",\n    };\n    // queries that should find all docs\n    String matchAll[] = {\n        \"*\", \"*1\", \"**1\", \"*?\", \"*?1\", \"?*1\", \"**\", \"***\", \"\\\\\\\\*\"\n    };\n    // queries that should find no docs\n    String matchNone[] = {\n        \"a*h\", \"a?h\", \"*a*h\", \"?a\", \"a?\",\n    };\n    // queries that should be parsed to prefix queries\n    String matchOneDocPrefix[][] = {\n        {\"a*\", \"ab*\", \"abc*\", }, // these should find only doc 0 \n        {\"h*\", \"hi*\", \"hij*\", \"\\\\\\\\7*\"}, // these should find only doc 1\n        {\"o*\", \"op*\", \"opq*\", \"\\\\\\\\\\\\\\\\*\"}, // these should find only doc 2\n    };\n    // queries that should be parsed to wildcard queries\n    String matchOneDocWild[][] = {\n        {\"*a*\", \"*ab*\", \"*abc**\", \"ab*e*\", \"*g?\", \"*f?1\", \"abc**\"}, // these should find only doc 0\n        {\"*h*\", \"*hi*\", \"*hij**\", \"hi*k*\", \"*n?\", \"*m?1\", \"hij**\"}, // these should find only doc 1\n        {\"*o*\", \"*op*\", \"*opq**\", \"op*q*\", \"*u?\", \"*t?1\", \"opq**\"}, // these should find only doc 2\n    };\n\n    // prepare the index\n    MockRAMDirectory dir = newDirectory(random);\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir);\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(field,docs[i],Store.NO,Index.ANALYZED));\n      iw.addDocument(doc);\n    }\n    iw.close();\n    \n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    \n    // test queries that must find all\n    for (int i = 0; i < matchAll.length; i++) {\n      String qtxt = matchAll[i];\n      Query q = qp.parse(qtxt);\n      if (VERBOSE) System.out.println(\"matchAll: qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(docs.length,hits.length);\n    }\n    \n    // test queries that must find none\n    for (int i = 0; i < matchNone.length; i++) {\n      String qtxt = matchNone[i];\n      Query q = qp.parse(qtxt);\n      if (VERBOSE) System.out.println(\"matchNone: qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(0,hits.length);\n    }\n\n    // test queries that must be prefix queries and must find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocPrefix[i].length; j++) {\n        String qtxt = matchOneDocPrefix[i][j];\n        Query q = qp.parse(qtxt);\n        if (VERBOSE) System.out.println(\"match 1 prefix: doc=\"+docs[i]+\" qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n        assertEquals(PrefixQuery.class, q.getClass());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    // test queries that must be wildcard queries and must find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocWild[i].length; j++) {\n        String qtxt = matchOneDocWild[i][j];\n        Query q = qp.parse(qtxt);\n        if (VERBOSE) System.out.println(\"match 1 wild: doc=\"+docs[i]+\" qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n        assertEquals(WildcardQuery.class, q.getClass());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    searcher.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestWildcard#testParsingAndSearching().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestWildcard#testParsingAndSearching().mjava","sourceNew":"  /**\n   * Test that wild card queries are parsed to the correct type and are searched correctly.\n   * This test looks at both parsing and execution of wildcard queries.\n   * Although placed here, it also tests prefix queries, verifying that\n   * prefix queries are not parsed into wild card queries, and viceversa.\n   * @throws Exception\n   */\n  public void testParsingAndSearching() throws Exception {\n    String field = \"content\";\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, field, new MockAnalyzer());\n    qp.setAllowLeadingWildcard(true);\n    String docs[] = {\n        \"\\\\ abcdefg1\",\n        \"\\\\79 hijklmn1\",\n        \"\\\\\\\\ opqrstu1\",\n    };\n    // queries that should find all docs\n    String matchAll[] = {\n        \"*\", \"*1\", \"**1\", \"*?\", \"*?1\", \"?*1\", \"**\", \"***\", \"\\\\\\\\*\"\n    };\n    // queries that should find no docs\n    String matchNone[] = {\n        \"a*h\", \"a?h\", \"*a*h\", \"?a\", \"a?\",\n    };\n    // queries that should be parsed to prefix queries\n    String matchOneDocPrefix[][] = {\n        {\"a*\", \"ab*\", \"abc*\", }, // these should find only doc 0 \n        {\"h*\", \"hi*\", \"hij*\", \"\\\\\\\\7*\"}, // these should find only doc 1\n        {\"o*\", \"op*\", \"opq*\", \"\\\\\\\\\\\\\\\\*\"}, // these should find only doc 2\n    };\n    // queries that should be parsed to wildcard queries\n    String matchOneDocWild[][] = {\n        {\"*a*\", \"*ab*\", \"*abc**\", \"ab*e*\", \"*g?\", \"*f?1\", \"abc**\"}, // these should find only doc 0\n        {\"*h*\", \"*hi*\", \"*hij**\", \"hi*k*\", \"*n?\", \"*m?1\", \"hij**\"}, // these should find only doc 1\n        {\"*o*\", \"*op*\", \"*opq**\", \"op*q*\", \"*u?\", \"*t?1\", \"opq**\"}, // these should find only doc 2\n    };\n\n    // prepare the index\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir);\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(field,docs[i],Store.NO,Index.ANALYZED));\n      iw.addDocument(doc);\n    }\n    iw.close();\n    \n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    \n    // test queries that must find all\n    for (int i = 0; i < matchAll.length; i++) {\n      String qtxt = matchAll[i];\n      Query q = qp.parse(qtxt);\n      if (VERBOSE) System.out.println(\"matchAll: qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(docs.length,hits.length);\n    }\n    \n    // test queries that must find none\n    for (int i = 0; i < matchNone.length; i++) {\n      String qtxt = matchNone[i];\n      Query q = qp.parse(qtxt);\n      if (VERBOSE) System.out.println(\"matchNone: qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(0,hits.length);\n    }\n\n    // test queries that must be prefix queries and must find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocPrefix[i].length; j++) {\n        String qtxt = matchOneDocPrefix[i][j];\n        Query q = qp.parse(qtxt);\n        if (VERBOSE) System.out.println(\"match 1 prefix: doc=\"+docs[i]+\" qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n        assertEquals(PrefixQuery.class, q.getClass());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    // test queries that must be wildcard queries and must find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocWild[i].length; j++) {\n        String qtxt = matchOneDocWild[i][j];\n        Query q = qp.parse(qtxt);\n        if (VERBOSE) System.out.println(\"match 1 wild: doc=\"+docs[i]+\" qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n        assertEquals(WildcardQuery.class, q.getClass());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    searcher.close();\n    dir.close();\n  }\n\n","sourceOld":"  /**\n   * Test that wild card queries are parsed to the correct type and are searched correctly.\n   * This test looks at both parsing and execution of wildcard queries.\n   * Although placed here, it also tests prefix queries, verifying that\n   * prefix queries are not parsed into wild card queries, and viceversa.\n   * @throws Exception\n   */\n  public void testParsingAndSearching() throws Exception {\n    String field = \"content\";\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, field, new MockAnalyzer());\n    qp.setAllowLeadingWildcard(true);\n    String docs[] = {\n        \"\\\\ abcdefg1\",\n        \"\\\\79 hijklmn1\",\n        \"\\\\\\\\ opqrstu1\",\n    };\n    // queries that should find all docs\n    String matchAll[] = {\n        \"*\", \"*1\", \"**1\", \"*?\", \"*?1\", \"?*1\", \"**\", \"***\", \"\\\\\\\\*\"\n    };\n    // queries that should find no docs\n    String matchNone[] = {\n        \"a*h\", \"a?h\", \"*a*h\", \"?a\", \"a?\",\n    };\n    // queries that should be parsed to prefix queries\n    String matchOneDocPrefix[][] = {\n        {\"a*\", \"ab*\", \"abc*\", }, // these should find only doc 0 \n        {\"h*\", \"hi*\", \"hij*\", \"\\\\\\\\7*\"}, // these should find only doc 1\n        {\"o*\", \"op*\", \"opq*\", \"\\\\\\\\\\\\\\\\*\"}, // these should find only doc 2\n    };\n    // queries that should be parsed to wildcard queries\n    String matchOneDocWild[][] = {\n        {\"*a*\", \"*ab*\", \"*abc**\", \"ab*e*\", \"*g?\", \"*f?1\", \"abc**\"}, // these should find only doc 0\n        {\"*h*\", \"*hi*\", \"*hij**\", \"hi*k*\", \"*n?\", \"*m?1\", \"hij**\"}, // these should find only doc 1\n        {\"*o*\", \"*op*\", \"*opq**\", \"op*q*\", \"*u?\", \"*t?1\", \"opq**\"}, // these should find only doc 2\n    };\n\n    // prepare the index\n    Directory dir = newDirectory(random);\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir);\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(field,docs[i],Store.NO,Index.ANALYZED));\n      iw.addDocument(doc);\n    }\n    iw.close();\n    \n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    \n    // test queries that must find all\n    for (int i = 0; i < matchAll.length; i++) {\n      String qtxt = matchAll[i];\n      Query q = qp.parse(qtxt);\n      if (VERBOSE) System.out.println(\"matchAll: qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(docs.length,hits.length);\n    }\n    \n    // test queries that must find none\n    for (int i = 0; i < matchNone.length; i++) {\n      String qtxt = matchNone[i];\n      Query q = qp.parse(qtxt);\n      if (VERBOSE) System.out.println(\"matchNone: qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(0,hits.length);\n    }\n\n    // test queries that must be prefix queries and must find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocPrefix[i].length; j++) {\n        String qtxt = matchOneDocPrefix[i][j];\n        Query q = qp.parse(qtxt);\n        if (VERBOSE) System.out.println(\"match 1 prefix: doc=\"+docs[i]+\" qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n        assertEquals(PrefixQuery.class, q.getClass());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    // test queries that must be wildcard queries and must find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocWild[i].length; j++) {\n        String qtxt = matchOneDocWild[i][j];\n        Query q = qp.parse(qtxt);\n        if (VERBOSE) System.out.println(\"match 1 wild: doc=\"+docs[i]+\" qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n        assertEquals(WildcardQuery.class, q.getClass());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    searcher.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"132903c28af3aa6f67284b78de91c0f0a99488c2","date":1284282129,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestWildcard#testParsingAndSearching().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestWildcard#testParsingAndSearching().mjava","sourceNew":"  /**\n   * Test that wild card queries are parsed to the correct type and are searched correctly.\n   * This test looks at both parsing and execution of wildcard queries.\n   * Although placed here, it also tests prefix queries, verifying that\n   * prefix queries are not parsed into wild card queries, and viceversa.\n   * @throws Exception\n   */\n  public void testParsingAndSearching() throws Exception {\n    String field = \"content\";\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, field, new MockAnalyzer());\n    qp.setAllowLeadingWildcard(true);\n    String docs[] = {\n        \"\\\\ abcdefg1\",\n        \"\\\\79 hijklmn1\",\n        \"\\\\\\\\ opqrstu1\",\n    };\n    // queries that should find all docs\n    String matchAll[] = {\n        \"*\", \"*1\", \"**1\", \"*?\", \"*?1\", \"?*1\", \"**\", \"***\", \"\\\\\\\\*\"\n    };\n    // queries that should find no docs\n    String matchNone[] = {\n        \"a*h\", \"a?h\", \"*a*h\", \"?a\", \"a?\",\n    };\n    // queries that should be parsed to prefix queries\n    String matchOneDocPrefix[][] = {\n        {\"a*\", \"ab*\", \"abc*\", }, // these should find only doc 0 \n        {\"h*\", \"hi*\", \"hij*\", \"\\\\\\\\7*\"}, // these should find only doc 1\n        {\"o*\", \"op*\", \"opq*\", \"\\\\\\\\\\\\\\\\*\"}, // these should find only doc 2\n    };\n    // queries that should be parsed to wildcard queries\n    String matchOneDocWild[][] = {\n        {\"*a*\", \"*ab*\", \"*abc**\", \"ab*e*\", \"*g?\", \"*f?1\", \"abc**\"}, // these should find only doc 0\n        {\"*h*\", \"*hi*\", \"*hij**\", \"hi*k*\", \"*n?\", \"*m?1\", \"hij**\"}, // these should find only doc 1\n        {\"*o*\", \"*op*\", \"*opq**\", \"op*q*\", \"*u?\", \"*t?1\", \"opq**\"}, // these should find only doc 2\n    };\n\n    // prepare the index\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir);\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(newField(field,docs[i],Store.NO,Index.ANALYZED));\n      iw.addDocument(doc);\n    }\n    iw.close();\n    \n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    \n    // test queries that must find all\n    for (int i = 0; i < matchAll.length; i++) {\n      String qtxt = matchAll[i];\n      Query q = qp.parse(qtxt);\n      if (VERBOSE) System.out.println(\"matchAll: qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(docs.length,hits.length);\n    }\n    \n    // test queries that must find none\n    for (int i = 0; i < matchNone.length; i++) {\n      String qtxt = matchNone[i];\n      Query q = qp.parse(qtxt);\n      if (VERBOSE) System.out.println(\"matchNone: qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(0,hits.length);\n    }\n\n    // test queries that must be prefix queries and must find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocPrefix[i].length; j++) {\n        String qtxt = matchOneDocPrefix[i][j];\n        Query q = qp.parse(qtxt);\n        if (VERBOSE) System.out.println(\"match 1 prefix: doc=\"+docs[i]+\" qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n        assertEquals(PrefixQuery.class, q.getClass());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    // test queries that must be wildcard queries and must find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocWild[i].length; j++) {\n        String qtxt = matchOneDocWild[i][j];\n        Query q = qp.parse(qtxt);\n        if (VERBOSE) System.out.println(\"match 1 wild: doc=\"+docs[i]+\" qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n        assertEquals(WildcardQuery.class, q.getClass());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    searcher.close();\n    dir.close();\n  }\n\n","sourceOld":"  /**\n   * Test that wild card queries are parsed to the correct type and are searched correctly.\n   * This test looks at both parsing and execution of wildcard queries.\n   * Although placed here, it also tests prefix queries, verifying that\n   * prefix queries are not parsed into wild card queries, and viceversa.\n   * @throws Exception\n   */\n  public void testParsingAndSearching() throws Exception {\n    String field = \"content\";\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, field, new MockAnalyzer());\n    qp.setAllowLeadingWildcard(true);\n    String docs[] = {\n        \"\\\\ abcdefg1\",\n        \"\\\\79 hijklmn1\",\n        \"\\\\\\\\ opqrstu1\",\n    };\n    // queries that should find all docs\n    String matchAll[] = {\n        \"*\", \"*1\", \"**1\", \"*?\", \"*?1\", \"?*1\", \"**\", \"***\", \"\\\\\\\\*\"\n    };\n    // queries that should find no docs\n    String matchNone[] = {\n        \"a*h\", \"a?h\", \"*a*h\", \"?a\", \"a?\",\n    };\n    // queries that should be parsed to prefix queries\n    String matchOneDocPrefix[][] = {\n        {\"a*\", \"ab*\", \"abc*\", }, // these should find only doc 0 \n        {\"h*\", \"hi*\", \"hij*\", \"\\\\\\\\7*\"}, // these should find only doc 1\n        {\"o*\", \"op*\", \"opq*\", \"\\\\\\\\\\\\\\\\*\"}, // these should find only doc 2\n    };\n    // queries that should be parsed to wildcard queries\n    String matchOneDocWild[][] = {\n        {\"*a*\", \"*ab*\", \"*abc**\", \"ab*e*\", \"*g?\", \"*f?1\", \"abc**\"}, // these should find only doc 0\n        {\"*h*\", \"*hi*\", \"*hij**\", \"hi*k*\", \"*n?\", \"*m?1\", \"hij**\"}, // these should find only doc 1\n        {\"*o*\", \"*op*\", \"*opq**\", \"op*q*\", \"*u?\", \"*t?1\", \"opq**\"}, // these should find only doc 2\n    };\n\n    // prepare the index\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir);\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(field,docs[i],Store.NO,Index.ANALYZED));\n      iw.addDocument(doc);\n    }\n    iw.close();\n    \n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    \n    // test queries that must find all\n    for (int i = 0; i < matchAll.length; i++) {\n      String qtxt = matchAll[i];\n      Query q = qp.parse(qtxt);\n      if (VERBOSE) System.out.println(\"matchAll: qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(docs.length,hits.length);\n    }\n    \n    // test queries that must find none\n    for (int i = 0; i < matchNone.length; i++) {\n      String qtxt = matchNone[i];\n      Query q = qp.parse(qtxt);\n      if (VERBOSE) System.out.println(\"matchNone: qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(0,hits.length);\n    }\n\n    // test queries that must be prefix queries and must find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocPrefix[i].length; j++) {\n        String qtxt = matchOneDocPrefix[i][j];\n        Query q = qp.parse(qtxt);\n        if (VERBOSE) System.out.println(\"match 1 prefix: doc=\"+docs[i]+\" qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n        assertEquals(PrefixQuery.class, q.getClass());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    // test queries that must be wildcard queries and must find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocWild[i].length; j++) {\n        String qtxt = matchOneDocWild[i][j];\n        Query q = qp.parse(qtxt);\n        if (VERBOSE) System.out.println(\"match 1 wild: doc=\"+docs[i]+\" qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n        assertEquals(WildcardQuery.class, q.getClass());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    searcher.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestWildcard#testParsingAndSearching().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestWildcard#testParsingAndSearching().mjava","sourceNew":"  /**\n   * Test that wild card queries are parsed to the correct type and are searched correctly.\n   * This test looks at both parsing and execution of wildcard queries.\n   * Although placed here, it also tests prefix queries, verifying that\n   * prefix queries are not parsed into wild card queries, and viceversa.\n   * @throws Exception\n   */\n  public void testParsingAndSearching() throws Exception {\n    String field = \"content\";\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, field, new MockAnalyzer());\n    qp.setAllowLeadingWildcard(true);\n    String docs[] = {\n        \"\\\\ abcdefg1\",\n        \"\\\\79 hijklmn1\",\n        \"\\\\\\\\ opqrstu1\",\n    };\n    // queries that should find all docs\n    String matchAll[] = {\n        \"*\", \"*1\", \"**1\", \"*?\", \"*?1\", \"?*1\", \"**\", \"***\", \"\\\\\\\\*\"\n    };\n    // queries that should find no docs\n    String matchNone[] = {\n        \"a*h\", \"a?h\", \"*a*h\", \"?a\", \"a?\",\n    };\n    // queries that should be parsed to prefix queries\n    String matchOneDocPrefix[][] = {\n        {\"a*\", \"ab*\", \"abc*\", }, // these should find only doc 0 \n        {\"h*\", \"hi*\", \"hij*\", \"\\\\\\\\7*\"}, // these should find only doc 1\n        {\"o*\", \"op*\", \"opq*\", \"\\\\\\\\\\\\\\\\*\"}, // these should find only doc 2\n    };\n    // queries that should be parsed to wildcard queries\n    String matchOneDocWild[][] = {\n        {\"*a*\", \"*ab*\", \"*abc**\", \"ab*e*\", \"*g?\", \"*f?1\", \"abc**\"}, // these should find only doc 0\n        {\"*h*\", \"*hi*\", \"*hij**\", \"hi*k*\", \"*n?\", \"*m?1\", \"hij**\"}, // these should find only doc 1\n        {\"*o*\", \"*op*\", \"*opq**\", \"op*q*\", \"*u?\", \"*t?1\", \"opq**\"}, // these should find only doc 2\n    };\n\n    // prepare the index\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir);\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(newField(field,docs[i],Store.NO,Index.ANALYZED));\n      iw.addDocument(doc);\n    }\n    iw.close();\n    \n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    \n    // test queries that must find all\n    for (int i = 0; i < matchAll.length; i++) {\n      String qtxt = matchAll[i];\n      Query q = qp.parse(qtxt);\n      if (VERBOSE) System.out.println(\"matchAll: qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(docs.length,hits.length);\n    }\n    \n    // test queries that must find none\n    for (int i = 0; i < matchNone.length; i++) {\n      String qtxt = matchNone[i];\n      Query q = qp.parse(qtxt);\n      if (VERBOSE) System.out.println(\"matchNone: qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(0,hits.length);\n    }\n\n    // test queries that must be prefix queries and must find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocPrefix[i].length; j++) {\n        String qtxt = matchOneDocPrefix[i][j];\n        Query q = qp.parse(qtxt);\n        if (VERBOSE) System.out.println(\"match 1 prefix: doc=\"+docs[i]+\" qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n        assertEquals(PrefixQuery.class, q.getClass());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    // test queries that must be wildcard queries and must find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocWild[i].length; j++) {\n        String qtxt = matchOneDocWild[i][j];\n        Query q = qp.parse(qtxt);\n        if (VERBOSE) System.out.println(\"match 1 wild: doc=\"+docs[i]+\" qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n        assertEquals(WildcardQuery.class, q.getClass());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    searcher.close();\n    dir.close();\n  }\n\n","sourceOld":"  /**\n   * Test that wild card queries are parsed to the correct type and are searched correctly.\n   * This test looks at both parsing and execution of wildcard queries.\n   * Although placed here, it also tests prefix queries, verifying that\n   * prefix queries are not parsed into wild card queries, and viceversa.\n   * @throws Exception\n   */\n  public void testParsingAndSearching() throws Exception {\n    String field = \"content\";\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, field, new MockAnalyzer());\n    qp.setAllowLeadingWildcard(true);\n    String docs[] = {\n        \"\\\\ abcdefg1\",\n        \"\\\\79 hijklmn1\",\n        \"\\\\\\\\ opqrstu1\",\n    };\n    // queries that should find all docs\n    String matchAll[] = {\n        \"*\", \"*1\", \"**1\", \"*?\", \"*?1\", \"?*1\", \"**\", \"***\", \"\\\\\\\\*\"\n    };\n    // queries that should find no docs\n    String matchNone[] = {\n        \"a*h\", \"a?h\", \"*a*h\", \"?a\", \"a?\",\n    };\n    // queries that should be parsed to prefix queries\n    String matchOneDocPrefix[][] = {\n        {\"a*\", \"ab*\", \"abc*\", }, // these should find only doc 0 \n        {\"h*\", \"hi*\", \"hij*\", \"\\\\\\\\7*\"}, // these should find only doc 1\n        {\"o*\", \"op*\", \"opq*\", \"\\\\\\\\\\\\\\\\*\"}, // these should find only doc 2\n    };\n    // queries that should be parsed to wildcard queries\n    String matchOneDocWild[][] = {\n        {\"*a*\", \"*ab*\", \"*abc**\", \"ab*e*\", \"*g?\", \"*f?1\", \"abc**\"}, // these should find only doc 0\n        {\"*h*\", \"*hi*\", \"*hij**\", \"hi*k*\", \"*n?\", \"*m?1\", \"hij**\"}, // these should find only doc 1\n        {\"*o*\", \"*op*\", \"*opq**\", \"op*q*\", \"*u?\", \"*t?1\", \"opq**\"}, // these should find only doc 2\n    };\n\n    // prepare the index\n    RAMDirectory dir = new RAMDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir);\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(field,docs[i],Store.NO,Index.ANALYZED));\n      iw.addDocument(doc);\n    }\n    iw.close();\n    \n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    \n    // test queries that must find all\n    for (int i = 0; i < matchAll.length; i++) {\n      String qtxt = matchAll[i];\n      Query q = qp.parse(qtxt);\n      if (VERBOSE) System.out.println(\"matchAll: qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(docs.length,hits.length);\n    }\n    \n    // test queries that must find none\n    for (int i = 0; i < matchNone.length; i++) {\n      String qtxt = matchNone[i];\n      Query q = qp.parse(qtxt);\n      if (VERBOSE) System.out.println(\"matchNone: qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(0,hits.length);\n    }\n\n    // test queries that must be prefix queries and must find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocPrefix[i].length; j++) {\n        String qtxt = matchOneDocPrefix[i][j];\n        Query q = qp.parse(qtxt);\n        if (VERBOSE) System.out.println(\"match 1 prefix: doc=\"+docs[i]+\" qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n        assertEquals(PrefixQuery.class, q.getClass());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    // test queries that must be wildcard queries and must find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocWild[i].length; j++) {\n        String qtxt = matchOneDocWild[i][j];\n        Query q = qp.parse(qtxt);\n        if (VERBOSE) System.out.println(\"match 1 wild: doc=\"+docs[i]+\" qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n        assertEquals(WildcardQuery.class, q.getClass());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"df64a95acf9fde66609a48f61c3bd0a41d17ad29","date":1296702672,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestWildcard#testParsingAndSearching().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestWildcard#testParsingAndSearching().mjava","sourceNew":"  /**\n   * Test that wild card queries are parsed to the correct type and are searched correctly.\n   * This test looks at both parsing and execution of wildcard queries.\n   * Although placed here, it also tests prefix queries, verifying that\n   * prefix queries are not parsed into wild card queries, and viceversa.\n   * @throws Exception\n   */\n  public void testParsingAndSearching() throws Exception {\n    String field = \"content\";\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, field, new MockAnalyzer());\n    qp.setAllowLeadingWildcard(true);\n    String docs[] = {\n        \"\\\\ abcdefg1\",\n        \"\\\\79 hijklmn1\",\n        \"\\\\\\\\ opqrstu1\",\n    };\n    // queries that should find all docs\n    String matchAll[] = {\n        \"*\", \"*1\", \"**1\", \"*?\", \"*?1\", \"?*1\", \"**\", \"***\", \"\\\\\\\\*\"\n    };\n    // queries that should find no docs\n    String matchNone[] = {\n        \"a*h\", \"a?h\", \"*a*h\", \"?a\", \"a?\",\n    };\n    // queries that should be parsed to prefix queries\n    String matchOneDocPrefix[][] = {\n        {\"a*\", \"ab*\", \"abc*\", }, // these should find only doc 0 \n        {\"h*\", \"hi*\", \"hij*\", \"\\\\\\\\7*\"}, // these should find only doc 1\n        {\"o*\", \"op*\", \"opq*\", \"\\\\\\\\\\\\\\\\*\"}, // these should find only doc 2\n    };\n    // queries that should be parsed to wildcard queries\n    String matchOneDocWild[][] = {\n        {\"*a*\", \"*ab*\", \"*abc**\", \"ab*e*\", \"*g?\", \"*f?1\", \"abc**\"}, // these should find only doc 0\n        {\"*h*\", \"*hi*\", \"*hij**\", \"hi*k*\", \"*n?\", \"*m?1\", \"hij**\"}, // these should find only doc 1\n        {\"*o*\", \"*op*\", \"*opq**\", \"op*q*\", \"*u?\", \"*t?1\", \"opq**\"}, // these should find only doc 2\n    };\n\n    // prepare the index\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMergePolicy(newInOrderLogMergePolicy()));\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(newField(field,docs[i],Store.NO,Index.ANALYZED));\n      iw.addDocument(doc);\n    }\n    iw.close();\n    \n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    \n    // test queries that must find all\n    for (int i = 0; i < matchAll.length; i++) {\n      String qtxt = matchAll[i];\n      Query q = qp.parse(qtxt);\n      if (VERBOSE) System.out.println(\"matchAll: qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(docs.length,hits.length);\n    }\n    \n    // test queries that must find none\n    for (int i = 0; i < matchNone.length; i++) {\n      String qtxt = matchNone[i];\n      Query q = qp.parse(qtxt);\n      if (VERBOSE) System.out.println(\"matchNone: qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(0,hits.length);\n    }\n\n    // test queries that must be prefix queries and must find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocPrefix[i].length; j++) {\n        String qtxt = matchOneDocPrefix[i][j];\n        Query q = qp.parse(qtxt);\n        if (VERBOSE) System.out.println(\"match 1 prefix: doc=\"+docs[i]+\" qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n        assertEquals(PrefixQuery.class, q.getClass());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    // test queries that must be wildcard queries and must find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocWild[i].length; j++) {\n        String qtxt = matchOneDocWild[i][j];\n        Query q = qp.parse(qtxt);\n        if (VERBOSE) System.out.println(\"match 1 wild: doc=\"+docs[i]+\" qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n        assertEquals(WildcardQuery.class, q.getClass());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    searcher.close();\n    dir.close();\n  }\n\n","sourceOld":"  /**\n   * Test that wild card queries are parsed to the correct type and are searched correctly.\n   * This test looks at both parsing and execution of wildcard queries.\n   * Although placed here, it also tests prefix queries, verifying that\n   * prefix queries are not parsed into wild card queries, and viceversa.\n   * @throws Exception\n   */\n  public void testParsingAndSearching() throws Exception {\n    String field = \"content\";\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, field, new MockAnalyzer());\n    qp.setAllowLeadingWildcard(true);\n    String docs[] = {\n        \"\\\\ abcdefg1\",\n        \"\\\\79 hijklmn1\",\n        \"\\\\\\\\ opqrstu1\",\n    };\n    // queries that should find all docs\n    String matchAll[] = {\n        \"*\", \"*1\", \"**1\", \"*?\", \"*?1\", \"?*1\", \"**\", \"***\", \"\\\\\\\\*\"\n    };\n    // queries that should find no docs\n    String matchNone[] = {\n        \"a*h\", \"a?h\", \"*a*h\", \"?a\", \"a?\",\n    };\n    // queries that should be parsed to prefix queries\n    String matchOneDocPrefix[][] = {\n        {\"a*\", \"ab*\", \"abc*\", }, // these should find only doc 0 \n        {\"h*\", \"hi*\", \"hij*\", \"\\\\\\\\7*\"}, // these should find only doc 1\n        {\"o*\", \"op*\", \"opq*\", \"\\\\\\\\\\\\\\\\*\"}, // these should find only doc 2\n    };\n    // queries that should be parsed to wildcard queries\n    String matchOneDocWild[][] = {\n        {\"*a*\", \"*ab*\", \"*abc**\", \"ab*e*\", \"*g?\", \"*f?1\", \"abc**\"}, // these should find only doc 0\n        {\"*h*\", \"*hi*\", \"*hij**\", \"hi*k*\", \"*n?\", \"*m?1\", \"hij**\"}, // these should find only doc 1\n        {\"*o*\", \"*op*\", \"*opq**\", \"op*q*\", \"*u?\", \"*t?1\", \"opq**\"}, // these should find only doc 2\n    };\n\n    // prepare the index\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir);\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(newField(field,docs[i],Store.NO,Index.ANALYZED));\n      iw.addDocument(doc);\n    }\n    iw.close();\n    \n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    \n    // test queries that must find all\n    for (int i = 0; i < matchAll.length; i++) {\n      String qtxt = matchAll[i];\n      Query q = qp.parse(qtxt);\n      if (VERBOSE) System.out.println(\"matchAll: qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(docs.length,hits.length);\n    }\n    \n    // test queries that must find none\n    for (int i = 0; i < matchNone.length; i++) {\n      String qtxt = matchNone[i];\n      Query q = qp.parse(qtxt);\n      if (VERBOSE) System.out.println(\"matchNone: qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(0,hits.length);\n    }\n\n    // test queries that must be prefix queries and must find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocPrefix[i].length; j++) {\n        String qtxt = matchOneDocPrefix[i][j];\n        Query q = qp.parse(qtxt);\n        if (VERBOSE) System.out.println(\"match 1 prefix: doc=\"+docs[i]+\" qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n        assertEquals(PrefixQuery.class, q.getClass());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    // test queries that must be wildcard queries and must find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocWild[i].length; j++) {\n        String qtxt = matchOneDocWild[i][j];\n        Query q = qp.parse(qtxt);\n        if (VERBOSE) System.out.println(\"match 1 wild: doc=\"+docs[i]+\" qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n        assertEquals(WildcardQuery.class, q.getClass());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    searcher.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestWildcard#testParsingAndSearching().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestWildcard#testParsingAndSearching().mjava","sourceNew":"  /**\n   * Test that wild card queries are parsed to the correct type and are searched correctly.\n   * This test looks at both parsing and execution of wildcard queries.\n   * Although placed here, it also tests prefix queries, verifying that\n   * prefix queries are not parsed into wild card queries, and viceversa.\n   * @throws Exception\n   */\n  public void testParsingAndSearching() throws Exception {\n    String field = \"content\";\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, field, new MockAnalyzer());\n    qp.setAllowLeadingWildcard(true);\n    String docs[] = {\n        \"\\\\ abcdefg1\",\n        \"\\\\79 hijklmn1\",\n        \"\\\\\\\\ opqrstu1\",\n    };\n    // queries that should find all docs\n    String matchAll[] = {\n        \"*\", \"*1\", \"**1\", \"*?\", \"*?1\", \"?*1\", \"**\", \"***\", \"\\\\\\\\*\"\n    };\n    // queries that should find no docs\n    String matchNone[] = {\n        \"a*h\", \"a?h\", \"*a*h\", \"?a\", \"a?\",\n    };\n    // queries that should be parsed to prefix queries\n    String matchOneDocPrefix[][] = {\n        {\"a*\", \"ab*\", \"abc*\", }, // these should find only doc 0 \n        {\"h*\", \"hi*\", \"hij*\", \"\\\\\\\\7*\"}, // these should find only doc 1\n        {\"o*\", \"op*\", \"opq*\", \"\\\\\\\\\\\\\\\\*\"}, // these should find only doc 2\n    };\n    // queries that should be parsed to wildcard queries\n    String matchOneDocWild[][] = {\n        {\"*a*\", \"*ab*\", \"*abc**\", \"ab*e*\", \"*g?\", \"*f?1\", \"abc**\"}, // these should find only doc 0\n        {\"*h*\", \"*hi*\", \"*hij**\", \"hi*k*\", \"*n?\", \"*m?1\", \"hij**\"}, // these should find only doc 1\n        {\"*o*\", \"*op*\", \"*opq**\", \"op*q*\", \"*u?\", \"*t?1\", \"opq**\"}, // these should find only doc 2\n    };\n\n    // prepare the index\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMergePolicy(newInOrderLogMergePolicy()));\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(newField(field,docs[i],Store.NO,Index.ANALYZED));\n      iw.addDocument(doc);\n    }\n    iw.close();\n    \n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    \n    // test queries that must find all\n    for (int i = 0; i < matchAll.length; i++) {\n      String qtxt = matchAll[i];\n      Query q = qp.parse(qtxt);\n      if (VERBOSE) System.out.println(\"matchAll: qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(docs.length,hits.length);\n    }\n    \n    // test queries that must find none\n    for (int i = 0; i < matchNone.length; i++) {\n      String qtxt = matchNone[i];\n      Query q = qp.parse(qtxt);\n      if (VERBOSE) System.out.println(\"matchNone: qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(0,hits.length);\n    }\n\n    // test queries that must be prefix queries and must find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocPrefix[i].length; j++) {\n        String qtxt = matchOneDocPrefix[i][j];\n        Query q = qp.parse(qtxt);\n        if (VERBOSE) System.out.println(\"match 1 prefix: doc=\"+docs[i]+\" qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n        assertEquals(PrefixQuery.class, q.getClass());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    // test queries that must be wildcard queries and must find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocWild[i].length; j++) {\n        String qtxt = matchOneDocWild[i][j];\n        Query q = qp.parse(qtxt);\n        if (VERBOSE) System.out.println(\"match 1 wild: doc=\"+docs[i]+\" qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n        assertEquals(WildcardQuery.class, q.getClass());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    searcher.close();\n    dir.close();\n  }\n\n","sourceOld":"  /**\n   * Test that wild card queries are parsed to the correct type and are searched correctly.\n   * This test looks at both parsing and execution of wildcard queries.\n   * Although placed here, it also tests prefix queries, verifying that\n   * prefix queries are not parsed into wild card queries, and viceversa.\n   * @throws Exception\n   */\n  public void testParsingAndSearching() throws Exception {\n    String field = \"content\";\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, field, new MockAnalyzer());\n    qp.setAllowLeadingWildcard(true);\n    String docs[] = {\n        \"\\\\ abcdefg1\",\n        \"\\\\79 hijklmn1\",\n        \"\\\\\\\\ opqrstu1\",\n    };\n    // queries that should find all docs\n    String matchAll[] = {\n        \"*\", \"*1\", \"**1\", \"*?\", \"*?1\", \"?*1\", \"**\", \"***\", \"\\\\\\\\*\"\n    };\n    // queries that should find no docs\n    String matchNone[] = {\n        \"a*h\", \"a?h\", \"*a*h\", \"?a\", \"a?\",\n    };\n    // queries that should be parsed to prefix queries\n    String matchOneDocPrefix[][] = {\n        {\"a*\", \"ab*\", \"abc*\", }, // these should find only doc 0 \n        {\"h*\", \"hi*\", \"hij*\", \"\\\\\\\\7*\"}, // these should find only doc 1\n        {\"o*\", \"op*\", \"opq*\", \"\\\\\\\\\\\\\\\\*\"}, // these should find only doc 2\n    };\n    // queries that should be parsed to wildcard queries\n    String matchOneDocWild[][] = {\n        {\"*a*\", \"*ab*\", \"*abc**\", \"ab*e*\", \"*g?\", \"*f?1\", \"abc**\"}, // these should find only doc 0\n        {\"*h*\", \"*hi*\", \"*hij**\", \"hi*k*\", \"*n?\", \"*m?1\", \"hij**\"}, // these should find only doc 1\n        {\"*o*\", \"*op*\", \"*opq**\", \"op*q*\", \"*u?\", \"*t?1\", \"opq**\"}, // these should find only doc 2\n    };\n\n    // prepare the index\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir);\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(newField(field,docs[i],Store.NO,Index.ANALYZED));\n      iw.addDocument(doc);\n    }\n    iw.close();\n    \n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    \n    // test queries that must find all\n    for (int i = 0; i < matchAll.length; i++) {\n      String qtxt = matchAll[i];\n      Query q = qp.parse(qtxt);\n      if (VERBOSE) System.out.println(\"matchAll: qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(docs.length,hits.length);\n    }\n    \n    // test queries that must find none\n    for (int i = 0; i < matchNone.length; i++) {\n      String qtxt = matchNone[i];\n      Query q = qp.parse(qtxt);\n      if (VERBOSE) System.out.println(\"matchNone: qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(0,hits.length);\n    }\n\n    // test queries that must be prefix queries and must find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocPrefix[i].length; j++) {\n        String qtxt = matchOneDocPrefix[i][j];\n        Query q = qp.parse(qtxt);\n        if (VERBOSE) System.out.println(\"match 1 prefix: doc=\"+docs[i]+\" qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n        assertEquals(PrefixQuery.class, q.getClass());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    // test queries that must be wildcard queries and must find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocWild[i].length; j++) {\n        String qtxt = matchOneDocWild[i][j];\n        Query q = qp.parse(qtxt);\n        if (VERBOSE) System.out.println(\"match 1 wild: doc=\"+docs[i]+\" qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n        assertEquals(WildcardQuery.class, q.getClass());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    searcher.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestWildcard#testParsingAndSearching().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestWildcard#testParsingAndSearching().mjava","sourceNew":"  /**\n   * Test that wild card queries are parsed to the correct type and are searched correctly.\n   * This test looks at both parsing and execution of wildcard queries.\n   * Although placed here, it also tests prefix queries, verifying that\n   * prefix queries are not parsed into wild card queries, and viceversa.\n   * @throws Exception\n   */\n  public void testParsingAndSearching() throws Exception {\n    String field = \"content\";\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, field, new MockAnalyzer());\n    qp.setAllowLeadingWildcard(true);\n    String docs[] = {\n        \"\\\\ abcdefg1\",\n        \"\\\\79 hijklmn1\",\n        \"\\\\\\\\ opqrstu1\",\n    };\n    // queries that should find all docs\n    String matchAll[] = {\n        \"*\", \"*1\", \"**1\", \"*?\", \"*?1\", \"?*1\", \"**\", \"***\", \"\\\\\\\\*\"\n    };\n    // queries that should find no docs\n    String matchNone[] = {\n        \"a*h\", \"a?h\", \"*a*h\", \"?a\", \"a?\",\n    };\n    // queries that should be parsed to prefix queries\n    String matchOneDocPrefix[][] = {\n        {\"a*\", \"ab*\", \"abc*\", }, // these should find only doc 0 \n        {\"h*\", \"hi*\", \"hij*\", \"\\\\\\\\7*\"}, // these should find only doc 1\n        {\"o*\", \"op*\", \"opq*\", \"\\\\\\\\\\\\\\\\*\"}, // these should find only doc 2\n    };\n    // queries that should be parsed to wildcard queries\n    String matchOneDocWild[][] = {\n        {\"*a*\", \"*ab*\", \"*abc**\", \"ab*e*\", \"*g?\", \"*f?1\", \"abc**\"}, // these should find only doc 0\n        {\"*h*\", \"*hi*\", \"*hij**\", \"hi*k*\", \"*n?\", \"*m?1\", \"hij**\"}, // these should find only doc 1\n        {\"*o*\", \"*op*\", \"*opq**\", \"op*q*\", \"*u?\", \"*t?1\", \"opq**\"}, // these should find only doc 2\n    };\n\n    // prepare the index\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMergePolicy(newInOrderLogMergePolicy()));\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(newField(field,docs[i],Store.NO,Index.ANALYZED));\n      iw.addDocument(doc);\n    }\n    iw.close();\n    \n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    \n    // test queries that must find all\n    for (int i = 0; i < matchAll.length; i++) {\n      String qtxt = matchAll[i];\n      Query q = qp.parse(qtxt);\n      if (VERBOSE) System.out.println(\"matchAll: qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(docs.length,hits.length);\n    }\n    \n    // test queries that must find none\n    for (int i = 0; i < matchNone.length; i++) {\n      String qtxt = matchNone[i];\n      Query q = qp.parse(qtxt);\n      if (VERBOSE) System.out.println(\"matchNone: qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(0,hits.length);\n    }\n\n    // test queries that must be prefix queries and must find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocPrefix[i].length; j++) {\n        String qtxt = matchOneDocPrefix[i][j];\n        Query q = qp.parse(qtxt);\n        if (VERBOSE) System.out.println(\"match 1 prefix: doc=\"+docs[i]+\" qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n        assertEquals(PrefixQuery.class, q.getClass());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    // test queries that must be wildcard queries and must find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocWild[i].length; j++) {\n        String qtxt = matchOneDocWild[i][j];\n        Query q = qp.parse(qtxt);\n        if (VERBOSE) System.out.println(\"match 1 wild: doc=\"+docs[i]+\" qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n        assertEquals(WildcardQuery.class, q.getClass());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    searcher.close();\n    dir.close();\n  }\n\n","sourceOld":"  /**\n   * Test that wild card queries are parsed to the correct type and are searched correctly.\n   * This test looks at both parsing and execution of wildcard queries.\n   * Although placed here, it also tests prefix queries, verifying that\n   * prefix queries are not parsed into wild card queries, and viceversa.\n   * @throws Exception\n   */\n  public void testParsingAndSearching() throws Exception {\n    String field = \"content\";\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, field, new MockAnalyzer());\n    qp.setAllowLeadingWildcard(true);\n    String docs[] = {\n        \"\\\\ abcdefg1\",\n        \"\\\\79 hijklmn1\",\n        \"\\\\\\\\ opqrstu1\",\n    };\n    // queries that should find all docs\n    String matchAll[] = {\n        \"*\", \"*1\", \"**1\", \"*?\", \"*?1\", \"?*1\", \"**\", \"***\", \"\\\\\\\\*\"\n    };\n    // queries that should find no docs\n    String matchNone[] = {\n        \"a*h\", \"a?h\", \"*a*h\", \"?a\", \"a?\",\n    };\n    // queries that should be parsed to prefix queries\n    String matchOneDocPrefix[][] = {\n        {\"a*\", \"ab*\", \"abc*\", }, // these should find only doc 0 \n        {\"h*\", \"hi*\", \"hij*\", \"\\\\\\\\7*\"}, // these should find only doc 1\n        {\"o*\", \"op*\", \"opq*\", \"\\\\\\\\\\\\\\\\*\"}, // these should find only doc 2\n    };\n    // queries that should be parsed to wildcard queries\n    String matchOneDocWild[][] = {\n        {\"*a*\", \"*ab*\", \"*abc**\", \"ab*e*\", \"*g?\", \"*f?1\", \"abc**\"}, // these should find only doc 0\n        {\"*h*\", \"*hi*\", \"*hij**\", \"hi*k*\", \"*n?\", \"*m?1\", \"hij**\"}, // these should find only doc 1\n        {\"*o*\", \"*op*\", \"*opq**\", \"op*q*\", \"*u?\", \"*t?1\", \"opq**\"}, // these should find only doc 2\n    };\n\n    // prepare the index\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir);\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(newField(field,docs[i],Store.NO,Index.ANALYZED));\n      iw.addDocument(doc);\n    }\n    iw.close();\n    \n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    \n    // test queries that must find all\n    for (int i = 0; i < matchAll.length; i++) {\n      String qtxt = matchAll[i];\n      Query q = qp.parse(qtxt);\n      if (VERBOSE) System.out.println(\"matchAll: qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(docs.length,hits.length);\n    }\n    \n    // test queries that must find none\n    for (int i = 0; i < matchNone.length; i++) {\n      String qtxt = matchNone[i];\n      Query q = qp.parse(qtxt);\n      if (VERBOSE) System.out.println(\"matchNone: qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(0,hits.length);\n    }\n\n    // test queries that must be prefix queries and must find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocPrefix[i].length; j++) {\n        String qtxt = matchOneDocPrefix[i][j];\n        Query q = qp.parse(qtxt);\n        if (VERBOSE) System.out.println(\"match 1 prefix: doc=\"+docs[i]+\" qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n        assertEquals(PrefixQuery.class, q.getClass());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    // test queries that must be wildcard queries and must find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocWild[i].length; j++) {\n        String qtxt = matchOneDocWild[i][j];\n        Query q = qp.parse(qtxt);\n        if (VERBOSE) System.out.println(\"match 1 wild: doc=\"+docs[i]+\" qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n        assertEquals(WildcardQuery.class, q.getClass());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    searcher.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"01e5948db9a07144112d2f08f28ca2e3cd880348","date":1301759232,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestWildcard#testParsingAndSearching().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestWildcard#testParsingAndSearching().mjava","sourceNew":"  /**\n   * Test that wild card queries are parsed to the correct type and are searched correctly.\n   * This test looks at both parsing and execution of wildcard queries.\n   * Although placed here, it also tests prefix queries, verifying that\n   * prefix queries are not parsed into wild card queries, and viceversa.\n   * @throws Exception\n   */\n  public void testParsingAndSearching() throws Exception {\n    String field = \"content\";\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, field, new MockAnalyzer());\n    qp.setAllowLeadingWildcard(true);\n    String docs[] = {\n        \"\\\\ abcdefg1\",\n        \"\\\\79 hijklmn1\",\n        \"\\\\\\\\ opqrstu1\",\n    };\n    // queries that should find all docs\n    String matchAll[] = {\n        \"*\", \"*1\", \"**1\", \"*?\", \"*?1\", \"?*1\", \"**\", \"***\", \"\\\\\\\\*\"\n    };\n    // queries that should find no docs\n    String matchNone[] = {\n        \"a*h\", \"a?h\", \"*a*h\", \"?a\", \"a?\",\n    };\n    // queries that should be parsed to prefix queries\n    String matchOneDocPrefix[][] = {\n        {\"a*\", \"ab*\", \"abc*\", }, // these should find only doc 0 \n        {\"h*\", \"hi*\", \"hij*\", \"\\\\\\\\7*\"}, // these should find only doc 1\n        {\"o*\", \"op*\", \"opq*\", \"\\\\\\\\\\\\\\\\*\"}, // these should find only doc 2\n    };\n    // queries that should be parsed to wildcard queries\n    String matchOneDocWild[][] = {\n        {\"*a*\", \"*ab*\", \"*abc**\", \"ab*e*\", \"*g?\", \"*f?1\", \"abc**\"}, // these should find only doc 0\n        {\"*h*\", \"*hi*\", \"*hij**\", \"hi*k*\", \"*n?\", \"*m?1\", \"hij**\"}, // these should find only doc 1\n        {\"*o*\", \"*op*\", \"*opq**\", \"op*q*\", \"*u?\", \"*t?1\", \"opq**\"}, // these should find only doc 2\n    };\n\n    // prepare the index\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMergePolicy(newLogMergePolicy()));\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(newField(field,docs[i],Store.NO,Index.ANALYZED));\n      iw.addDocument(doc);\n    }\n    iw.close();\n    \n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    \n    // test queries that must find all\n    for (int i = 0; i < matchAll.length; i++) {\n      String qtxt = matchAll[i];\n      Query q = qp.parse(qtxt);\n      if (VERBOSE) System.out.println(\"matchAll: qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(docs.length,hits.length);\n    }\n    \n    // test queries that must find none\n    for (int i = 0; i < matchNone.length; i++) {\n      String qtxt = matchNone[i];\n      Query q = qp.parse(qtxt);\n      if (VERBOSE) System.out.println(\"matchNone: qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(0,hits.length);\n    }\n\n    // test queries that must be prefix queries and must find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocPrefix[i].length; j++) {\n        String qtxt = matchOneDocPrefix[i][j];\n        Query q = qp.parse(qtxt);\n        if (VERBOSE) System.out.println(\"match 1 prefix: doc=\"+docs[i]+\" qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n        assertEquals(PrefixQuery.class, q.getClass());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    // test queries that must be wildcard queries and must find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocWild[i].length; j++) {\n        String qtxt = matchOneDocWild[i][j];\n        Query q = qp.parse(qtxt);\n        if (VERBOSE) System.out.println(\"match 1 wild: doc=\"+docs[i]+\" qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n        assertEquals(WildcardQuery.class, q.getClass());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    searcher.close();\n    dir.close();\n  }\n\n","sourceOld":"  /**\n   * Test that wild card queries are parsed to the correct type and are searched correctly.\n   * This test looks at both parsing and execution of wildcard queries.\n   * Although placed here, it also tests prefix queries, verifying that\n   * prefix queries are not parsed into wild card queries, and viceversa.\n   * @throws Exception\n   */\n  public void testParsingAndSearching() throws Exception {\n    String field = \"content\";\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, field, new MockAnalyzer());\n    qp.setAllowLeadingWildcard(true);\n    String docs[] = {\n        \"\\\\ abcdefg1\",\n        \"\\\\79 hijklmn1\",\n        \"\\\\\\\\ opqrstu1\",\n    };\n    // queries that should find all docs\n    String matchAll[] = {\n        \"*\", \"*1\", \"**1\", \"*?\", \"*?1\", \"?*1\", \"**\", \"***\", \"\\\\\\\\*\"\n    };\n    // queries that should find no docs\n    String matchNone[] = {\n        \"a*h\", \"a?h\", \"*a*h\", \"?a\", \"a?\",\n    };\n    // queries that should be parsed to prefix queries\n    String matchOneDocPrefix[][] = {\n        {\"a*\", \"ab*\", \"abc*\", }, // these should find only doc 0 \n        {\"h*\", \"hi*\", \"hij*\", \"\\\\\\\\7*\"}, // these should find only doc 1\n        {\"o*\", \"op*\", \"opq*\", \"\\\\\\\\\\\\\\\\*\"}, // these should find only doc 2\n    };\n    // queries that should be parsed to wildcard queries\n    String matchOneDocWild[][] = {\n        {\"*a*\", \"*ab*\", \"*abc**\", \"ab*e*\", \"*g?\", \"*f?1\", \"abc**\"}, // these should find only doc 0\n        {\"*h*\", \"*hi*\", \"*hij**\", \"hi*k*\", \"*n?\", \"*m?1\", \"hij**\"}, // these should find only doc 1\n        {\"*o*\", \"*op*\", \"*opq**\", \"op*q*\", \"*u?\", \"*t?1\", \"opq**\"}, // these should find only doc 2\n    };\n\n    // prepare the index\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMergePolicy(newInOrderLogMergePolicy()));\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(newField(field,docs[i],Store.NO,Index.ANALYZED));\n      iw.addDocument(doc);\n    }\n    iw.close();\n    \n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    \n    // test queries that must find all\n    for (int i = 0; i < matchAll.length; i++) {\n      String qtxt = matchAll[i];\n      Query q = qp.parse(qtxt);\n      if (VERBOSE) System.out.println(\"matchAll: qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(docs.length,hits.length);\n    }\n    \n    // test queries that must find none\n    for (int i = 0; i < matchNone.length; i++) {\n      String qtxt = matchNone[i];\n      Query q = qp.parse(qtxt);\n      if (VERBOSE) System.out.println(\"matchNone: qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(0,hits.length);\n    }\n\n    // test queries that must be prefix queries and must find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocPrefix[i].length; j++) {\n        String qtxt = matchOneDocPrefix[i][j];\n        Query q = qp.parse(qtxt);\n        if (VERBOSE) System.out.println(\"match 1 prefix: doc=\"+docs[i]+\" qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n        assertEquals(PrefixQuery.class, q.getClass());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    // test queries that must be wildcard queries and must find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocWild[i].length; j++) {\n        String qtxt = matchOneDocWild[i][j];\n        Query q = qp.parse(qtxt);\n        if (VERBOSE) System.out.println(\"match 1 wild: doc=\"+docs[i]+\" qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n        assertEquals(WildcardQuery.class, q.getClass());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    searcher.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"45669a651c970812a680841b97a77cce06af559f","date":1301922222,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestWildcard#testParsingAndSearching().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestWildcard#testParsingAndSearching().mjava","sourceNew":"  /**\n   * Test that wild card queries are parsed to the correct type and are searched correctly.\n   * This test looks at both parsing and execution of wildcard queries.\n   * Although placed here, it also tests prefix queries, verifying that\n   * prefix queries are not parsed into wild card queries, and viceversa.\n   * @throws Exception\n   */\n  public void testParsingAndSearching() throws Exception {\n    String field = \"content\";\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, field, new MockAnalyzer());\n    qp.setAllowLeadingWildcard(true);\n    String docs[] = {\n        \"\\\\ abcdefg1\",\n        \"\\\\79 hijklmn1\",\n        \"\\\\\\\\ opqrstu1\",\n    };\n    // queries that should find all docs\n    String matchAll[] = {\n        \"*\", \"*1\", \"**1\", \"*?\", \"*?1\", \"?*1\", \"**\", \"***\", \"\\\\\\\\*\"\n    };\n    // queries that should find no docs\n    String matchNone[] = {\n        \"a*h\", \"a?h\", \"*a*h\", \"?a\", \"a?\",\n    };\n    // queries that should be parsed to prefix queries\n    String matchOneDocPrefix[][] = {\n        {\"a*\", \"ab*\", \"abc*\", }, // these should find only doc 0 \n        {\"h*\", \"hi*\", \"hij*\", \"\\\\\\\\7*\"}, // these should find only doc 1\n        {\"o*\", \"op*\", \"opq*\", \"\\\\\\\\\\\\\\\\*\"}, // these should find only doc 2\n    };\n    // queries that should be parsed to wildcard queries\n    String matchOneDocWild[][] = {\n        {\"*a*\", \"*ab*\", \"*abc**\", \"ab*e*\", \"*g?\", \"*f?1\", \"abc**\"}, // these should find only doc 0\n        {\"*h*\", \"*hi*\", \"*hij**\", \"hi*k*\", \"*n?\", \"*m?1\", \"hij**\"}, // these should find only doc 1\n        {\"*o*\", \"*op*\", \"*opq**\", \"op*q*\", \"*u?\", \"*t?1\", \"opq**\"}, // these should find only doc 2\n    };\n\n    // prepare the index\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMergePolicy(newLogMergePolicy()));\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(newField(field,docs[i],Store.NO,Index.ANALYZED));\n      iw.addDocument(doc);\n    }\n    iw.close();\n    \n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    \n    // test queries that must find all\n    for (int i = 0; i < matchAll.length; i++) {\n      String qtxt = matchAll[i];\n      Query q = qp.parse(qtxt);\n      if (VERBOSE) System.out.println(\"matchAll: qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(docs.length,hits.length);\n    }\n    \n    // test queries that must find none\n    for (int i = 0; i < matchNone.length; i++) {\n      String qtxt = matchNone[i];\n      Query q = qp.parse(qtxt);\n      if (VERBOSE) System.out.println(\"matchNone: qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(0,hits.length);\n    }\n\n    // test queries that must be prefix queries and must find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocPrefix[i].length; j++) {\n        String qtxt = matchOneDocPrefix[i][j];\n        Query q = qp.parse(qtxt);\n        if (VERBOSE) System.out.println(\"match 1 prefix: doc=\"+docs[i]+\" qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n        assertEquals(PrefixQuery.class, q.getClass());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    // test queries that must be wildcard queries and must find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocWild[i].length; j++) {\n        String qtxt = matchOneDocWild[i][j];\n        Query q = qp.parse(qtxt);\n        if (VERBOSE) System.out.println(\"match 1 wild: doc=\"+docs[i]+\" qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n        assertEquals(WildcardQuery.class, q.getClass());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    searcher.close();\n    dir.close();\n  }\n\n","sourceOld":"  /**\n   * Test that wild card queries are parsed to the correct type and are searched correctly.\n   * This test looks at both parsing and execution of wildcard queries.\n   * Although placed here, it also tests prefix queries, verifying that\n   * prefix queries are not parsed into wild card queries, and viceversa.\n   * @throws Exception\n   */\n  public void testParsingAndSearching() throws Exception {\n    String field = \"content\";\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, field, new MockAnalyzer());\n    qp.setAllowLeadingWildcard(true);\n    String docs[] = {\n        \"\\\\ abcdefg1\",\n        \"\\\\79 hijklmn1\",\n        \"\\\\\\\\ opqrstu1\",\n    };\n    // queries that should find all docs\n    String matchAll[] = {\n        \"*\", \"*1\", \"**1\", \"*?\", \"*?1\", \"?*1\", \"**\", \"***\", \"\\\\\\\\*\"\n    };\n    // queries that should find no docs\n    String matchNone[] = {\n        \"a*h\", \"a?h\", \"*a*h\", \"?a\", \"a?\",\n    };\n    // queries that should be parsed to prefix queries\n    String matchOneDocPrefix[][] = {\n        {\"a*\", \"ab*\", \"abc*\", }, // these should find only doc 0 \n        {\"h*\", \"hi*\", \"hij*\", \"\\\\\\\\7*\"}, // these should find only doc 1\n        {\"o*\", \"op*\", \"opq*\", \"\\\\\\\\\\\\\\\\*\"}, // these should find only doc 2\n    };\n    // queries that should be parsed to wildcard queries\n    String matchOneDocWild[][] = {\n        {\"*a*\", \"*ab*\", \"*abc**\", \"ab*e*\", \"*g?\", \"*f?1\", \"abc**\"}, // these should find only doc 0\n        {\"*h*\", \"*hi*\", \"*hij**\", \"hi*k*\", \"*n?\", \"*m?1\", \"hij**\"}, // these should find only doc 1\n        {\"*o*\", \"*op*\", \"*opq**\", \"op*q*\", \"*u?\", \"*t?1\", \"opq**\"}, // these should find only doc 2\n    };\n\n    // prepare the index\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMergePolicy(newInOrderLogMergePolicy()));\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(newField(field,docs[i],Store.NO,Index.ANALYZED));\n      iw.addDocument(doc);\n    }\n    iw.close();\n    \n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    \n    // test queries that must find all\n    for (int i = 0; i < matchAll.length; i++) {\n      String qtxt = matchAll[i];\n      Query q = qp.parse(qtxt);\n      if (VERBOSE) System.out.println(\"matchAll: qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(docs.length,hits.length);\n    }\n    \n    // test queries that must find none\n    for (int i = 0; i < matchNone.length; i++) {\n      String qtxt = matchNone[i];\n      Query q = qp.parse(qtxt);\n      if (VERBOSE) System.out.println(\"matchNone: qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(0,hits.length);\n    }\n\n    // test queries that must be prefix queries and must find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocPrefix[i].length; j++) {\n        String qtxt = matchOneDocPrefix[i][j];\n        Query q = qp.parse(qtxt);\n        if (VERBOSE) System.out.println(\"match 1 prefix: doc=\"+docs[i]+\" qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n        assertEquals(PrefixQuery.class, q.getClass());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    // test queries that must be wildcard queries and must find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocWild[i].length; j++) {\n        String qtxt = matchOneDocWild[i][j];\n        Query q = qp.parse(qtxt);\n        if (VERBOSE) System.out.println(\"match 1 wild: doc=\"+docs[i]+\" qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n        assertEquals(WildcardQuery.class, q.getClass());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    searcher.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestWildcard#testParsingAndSearching().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestWildcard#testParsingAndSearching().mjava","sourceNew":"  /**\n   * Test that wild card queries are parsed to the correct type and are searched correctly.\n   * This test looks at both parsing and execution of wildcard queries.\n   * Although placed here, it also tests prefix queries, verifying that\n   * prefix queries are not parsed into wild card queries, and viceversa.\n   * @throws Exception\n   */\n  public void testParsingAndSearching() throws Exception {\n    String field = \"content\";\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, field, new MockAnalyzer(random));\n    qp.setAllowLeadingWildcard(true);\n    String docs[] = {\n        \"\\\\ abcdefg1\",\n        \"\\\\79 hijklmn1\",\n        \"\\\\\\\\ opqrstu1\",\n    };\n    // queries that should find all docs\n    String matchAll[] = {\n        \"*\", \"*1\", \"**1\", \"*?\", \"*?1\", \"?*1\", \"**\", \"***\", \"\\\\\\\\*\"\n    };\n    // queries that should find no docs\n    String matchNone[] = {\n        \"a*h\", \"a?h\", \"*a*h\", \"?a\", \"a?\",\n    };\n    // queries that should be parsed to prefix queries\n    String matchOneDocPrefix[][] = {\n        {\"a*\", \"ab*\", \"abc*\", }, // these should find only doc 0 \n        {\"h*\", \"hi*\", \"hij*\", \"\\\\\\\\7*\"}, // these should find only doc 1\n        {\"o*\", \"op*\", \"opq*\", \"\\\\\\\\\\\\\\\\*\"}, // these should find only doc 2\n    };\n    // queries that should be parsed to wildcard queries\n    String matchOneDocWild[][] = {\n        {\"*a*\", \"*ab*\", \"*abc**\", \"ab*e*\", \"*g?\", \"*f?1\", \"abc**\"}, // these should find only doc 0\n        {\"*h*\", \"*hi*\", \"*hij**\", \"hi*k*\", \"*n?\", \"*m?1\", \"hij**\"}, // these should find only doc 1\n        {\"*o*\", \"*op*\", \"*opq**\", \"op*q*\", \"*u?\", \"*t?1\", \"opq**\"}, // these should find only doc 2\n    };\n\n    // prepare the index\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMergePolicy(newLogMergePolicy()));\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(newField(field,docs[i],Store.NO,Index.ANALYZED));\n      iw.addDocument(doc);\n    }\n    iw.close();\n    \n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    \n    // test queries that must find all\n    for (int i = 0; i < matchAll.length; i++) {\n      String qtxt = matchAll[i];\n      Query q = qp.parse(qtxt);\n      if (VERBOSE) System.out.println(\"matchAll: qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(docs.length,hits.length);\n    }\n    \n    // test queries that must find none\n    for (int i = 0; i < matchNone.length; i++) {\n      String qtxt = matchNone[i];\n      Query q = qp.parse(qtxt);\n      if (VERBOSE) System.out.println(\"matchNone: qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(0,hits.length);\n    }\n\n    // test queries that must be prefix queries and must find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocPrefix[i].length; j++) {\n        String qtxt = matchOneDocPrefix[i][j];\n        Query q = qp.parse(qtxt);\n        if (VERBOSE) System.out.println(\"match 1 prefix: doc=\"+docs[i]+\" qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n        assertEquals(PrefixQuery.class, q.getClass());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    // test queries that must be wildcard queries and must find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocWild[i].length; j++) {\n        String qtxt = matchOneDocWild[i][j];\n        Query q = qp.parse(qtxt);\n        if (VERBOSE) System.out.println(\"match 1 wild: doc=\"+docs[i]+\" qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n        assertEquals(WildcardQuery.class, q.getClass());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    searcher.close();\n    dir.close();\n  }\n\n","sourceOld":"  /**\n   * Test that wild card queries are parsed to the correct type and are searched correctly.\n   * This test looks at both parsing and execution of wildcard queries.\n   * Although placed here, it also tests prefix queries, verifying that\n   * prefix queries are not parsed into wild card queries, and viceversa.\n   * @throws Exception\n   */\n  public void testParsingAndSearching() throws Exception {\n    String field = \"content\";\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, field, new MockAnalyzer());\n    qp.setAllowLeadingWildcard(true);\n    String docs[] = {\n        \"\\\\ abcdefg1\",\n        \"\\\\79 hijklmn1\",\n        \"\\\\\\\\ opqrstu1\",\n    };\n    // queries that should find all docs\n    String matchAll[] = {\n        \"*\", \"*1\", \"**1\", \"*?\", \"*?1\", \"?*1\", \"**\", \"***\", \"\\\\\\\\*\"\n    };\n    // queries that should find no docs\n    String matchNone[] = {\n        \"a*h\", \"a?h\", \"*a*h\", \"?a\", \"a?\",\n    };\n    // queries that should be parsed to prefix queries\n    String matchOneDocPrefix[][] = {\n        {\"a*\", \"ab*\", \"abc*\", }, // these should find only doc 0 \n        {\"h*\", \"hi*\", \"hij*\", \"\\\\\\\\7*\"}, // these should find only doc 1\n        {\"o*\", \"op*\", \"opq*\", \"\\\\\\\\\\\\\\\\*\"}, // these should find only doc 2\n    };\n    // queries that should be parsed to wildcard queries\n    String matchOneDocWild[][] = {\n        {\"*a*\", \"*ab*\", \"*abc**\", \"ab*e*\", \"*g?\", \"*f?1\", \"abc**\"}, // these should find only doc 0\n        {\"*h*\", \"*hi*\", \"*hij**\", \"hi*k*\", \"*n?\", \"*m?1\", \"hij**\"}, // these should find only doc 1\n        {\"*o*\", \"*op*\", \"*opq**\", \"op*q*\", \"*u?\", \"*t?1\", \"opq**\"}, // these should find only doc 2\n    };\n\n    // prepare the index\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMergePolicy(newLogMergePolicy()));\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(newField(field,docs[i],Store.NO,Index.ANALYZED));\n      iw.addDocument(doc);\n    }\n    iw.close();\n    \n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    \n    // test queries that must find all\n    for (int i = 0; i < matchAll.length; i++) {\n      String qtxt = matchAll[i];\n      Query q = qp.parse(qtxt);\n      if (VERBOSE) System.out.println(\"matchAll: qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(docs.length,hits.length);\n    }\n    \n    // test queries that must find none\n    for (int i = 0; i < matchNone.length; i++) {\n      String qtxt = matchNone[i];\n      Query q = qp.parse(qtxt);\n      if (VERBOSE) System.out.println(\"matchNone: qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(0,hits.length);\n    }\n\n    // test queries that must be prefix queries and must find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocPrefix[i].length; j++) {\n        String qtxt = matchOneDocPrefix[i][j];\n        Query q = qp.parse(qtxt);\n        if (VERBOSE) System.out.println(\"match 1 prefix: doc=\"+docs[i]+\" qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n        assertEquals(PrefixQuery.class, q.getClass());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    // test queries that must be wildcard queries and must find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocWild[i].length; j++) {\n        String qtxt = matchOneDocWild[i][j];\n        Query q = qp.parse(qtxt);\n        if (VERBOSE) System.out.println(\"match 1 wild: doc=\"+docs[i]+\" qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n        assertEquals(WildcardQuery.class, q.getClass());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    searcher.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestWildcard#testParsingAndSearching().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestWildcard#testParsingAndSearching().mjava","sourceNew":"  /**\n   * Test that wild card queries are parsed to the correct type and are searched correctly.\n   * This test looks at both parsing and execution of wildcard queries.\n   * Although placed here, it also tests prefix queries, verifying that\n   * prefix queries are not parsed into wild card queries, and viceversa.\n   * @throws Exception\n   */\n  public void testParsingAndSearching() throws Exception {\n    String field = \"content\";\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, field, new MockAnalyzer(random));\n    qp.setAllowLeadingWildcard(true);\n    String docs[] = {\n        \"\\\\ abcdefg1\",\n        \"\\\\79 hijklmn1\",\n        \"\\\\\\\\ opqrstu1\",\n    };\n    // queries that should find all docs\n    String matchAll[] = {\n        \"*\", \"*1\", \"**1\", \"*?\", \"*?1\", \"?*1\", \"**\", \"***\", \"\\\\\\\\*\"\n    };\n    // queries that should find no docs\n    String matchNone[] = {\n        \"a*h\", \"a?h\", \"*a*h\", \"?a\", \"a?\",\n    };\n    // queries that should be parsed to prefix queries\n    String matchOneDocPrefix[][] = {\n        {\"a*\", \"ab*\", \"abc*\", }, // these should find only doc 0 \n        {\"h*\", \"hi*\", \"hij*\", \"\\\\\\\\7*\"}, // these should find only doc 1\n        {\"o*\", \"op*\", \"opq*\", \"\\\\\\\\\\\\\\\\*\"}, // these should find only doc 2\n    };\n    // queries that should be parsed to wildcard queries\n    String matchOneDocWild[][] = {\n        {\"*a*\", \"*ab*\", \"*abc**\", \"ab*e*\", \"*g?\", \"*f?1\", \"abc**\"}, // these should find only doc 0\n        {\"*h*\", \"*hi*\", \"*hij**\", \"hi*k*\", \"*n?\", \"*m?1\", \"hij**\"}, // these should find only doc 1\n        {\"*o*\", \"*op*\", \"*opq**\", \"op*q*\", \"*u?\", \"*t?1\", \"opq**\"}, // these should find only doc 2\n    };\n\n    // prepare the index\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMergePolicy(newLogMergePolicy()));\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(newField(field,docs[i],Store.NO,Index.ANALYZED));\n      iw.addDocument(doc);\n    }\n    iw.close();\n    \n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    \n    // test queries that must find all\n    for (int i = 0; i < matchAll.length; i++) {\n      String qtxt = matchAll[i];\n      Query q = qp.parse(qtxt);\n      if (VERBOSE) System.out.println(\"matchAll: qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(docs.length,hits.length);\n    }\n    \n    // test queries that must find none\n    for (int i = 0; i < matchNone.length; i++) {\n      String qtxt = matchNone[i];\n      Query q = qp.parse(qtxt);\n      if (VERBOSE) System.out.println(\"matchNone: qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(0,hits.length);\n    }\n\n    // test queries that must be prefix queries and must find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocPrefix[i].length; j++) {\n        String qtxt = matchOneDocPrefix[i][j];\n        Query q = qp.parse(qtxt);\n        if (VERBOSE) System.out.println(\"match 1 prefix: doc=\"+docs[i]+\" qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n        assertEquals(PrefixQuery.class, q.getClass());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    // test queries that must be wildcard queries and must find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocWild[i].length; j++) {\n        String qtxt = matchOneDocWild[i][j];\n        Query q = qp.parse(qtxt);\n        if (VERBOSE) System.out.println(\"match 1 wild: doc=\"+docs[i]+\" qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n        assertEquals(WildcardQuery.class, q.getClass());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    searcher.close();\n    dir.close();\n  }\n\n","sourceOld":"  /**\n   * Test that wild card queries are parsed to the correct type and are searched correctly.\n   * This test looks at both parsing and execution of wildcard queries.\n   * Although placed here, it also tests prefix queries, verifying that\n   * prefix queries are not parsed into wild card queries, and viceversa.\n   * @throws Exception\n   */\n  public void testParsingAndSearching() throws Exception {\n    String field = \"content\";\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, field, new MockAnalyzer());\n    qp.setAllowLeadingWildcard(true);\n    String docs[] = {\n        \"\\\\ abcdefg1\",\n        \"\\\\79 hijklmn1\",\n        \"\\\\\\\\ opqrstu1\",\n    };\n    // queries that should find all docs\n    String matchAll[] = {\n        \"*\", \"*1\", \"**1\", \"*?\", \"*?1\", \"?*1\", \"**\", \"***\", \"\\\\\\\\*\"\n    };\n    // queries that should find no docs\n    String matchNone[] = {\n        \"a*h\", \"a?h\", \"*a*h\", \"?a\", \"a?\",\n    };\n    // queries that should be parsed to prefix queries\n    String matchOneDocPrefix[][] = {\n        {\"a*\", \"ab*\", \"abc*\", }, // these should find only doc 0 \n        {\"h*\", \"hi*\", \"hij*\", \"\\\\\\\\7*\"}, // these should find only doc 1\n        {\"o*\", \"op*\", \"opq*\", \"\\\\\\\\\\\\\\\\*\"}, // these should find only doc 2\n    };\n    // queries that should be parsed to wildcard queries\n    String matchOneDocWild[][] = {\n        {\"*a*\", \"*ab*\", \"*abc**\", \"ab*e*\", \"*g?\", \"*f?1\", \"abc**\"}, // these should find only doc 0\n        {\"*h*\", \"*hi*\", \"*hij**\", \"hi*k*\", \"*n?\", \"*m?1\", \"hij**\"}, // these should find only doc 1\n        {\"*o*\", \"*op*\", \"*opq**\", \"op*q*\", \"*u?\", \"*t?1\", \"opq**\"}, // these should find only doc 2\n    };\n\n    // prepare the index\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMergePolicy(newLogMergePolicy()));\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(newField(field,docs[i],Store.NO,Index.ANALYZED));\n      iw.addDocument(doc);\n    }\n    iw.close();\n    \n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    \n    // test queries that must find all\n    for (int i = 0; i < matchAll.length; i++) {\n      String qtxt = matchAll[i];\n      Query q = qp.parse(qtxt);\n      if (VERBOSE) System.out.println(\"matchAll: qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(docs.length,hits.length);\n    }\n    \n    // test queries that must find none\n    for (int i = 0; i < matchNone.length; i++) {\n      String qtxt = matchNone[i];\n      Query q = qp.parse(qtxt);\n      if (VERBOSE) System.out.println(\"matchNone: qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(0,hits.length);\n    }\n\n    // test queries that must be prefix queries and must find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocPrefix[i].length; j++) {\n        String qtxt = matchOneDocPrefix[i][j];\n        Query q = qp.parse(qtxt);\n        if (VERBOSE) System.out.println(\"match 1 prefix: doc=\"+docs[i]+\" qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n        assertEquals(PrefixQuery.class, q.getClass());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    // test queries that must be wildcard queries and must find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocWild[i].length; j++) {\n        String qtxt = matchOneDocWild[i][j];\n        Query q = qp.parse(qtxt);\n        if (VERBOSE) System.out.println(\"match 1 wild: doc=\"+docs[i]+\" qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n        assertEquals(WildcardQuery.class, q.getClass());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    searcher.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestWildcard#testParsingAndSearching().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestWildcard#testParsingAndSearching().mjava","sourceNew":"  /**\n   * Test that wild card queries are parsed to the correct type and are searched correctly.\n   * This test looks at both parsing and execution of wildcard queries.\n   * Although placed here, it also tests prefix queries, verifying that\n   * prefix queries are not parsed into wild card queries, and viceversa.\n   * @throws Exception\n   */\n  public void testParsingAndSearching() throws Exception {\n    String field = \"content\";\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, field, new MockAnalyzer(random));\n    qp.setAllowLeadingWildcard(true);\n    String docs[] = {\n        \"\\\\ abcdefg1\",\n        \"\\\\79 hijklmn1\",\n        \"\\\\\\\\ opqrstu1\",\n    };\n    // queries that should find all docs\n    String matchAll[] = {\n        \"*\", \"*1\", \"**1\", \"*?\", \"*?1\", \"?*1\", \"**\", \"***\", \"\\\\\\\\*\"\n    };\n    // queries that should find no docs\n    String matchNone[] = {\n        \"a*h\", \"a?h\", \"*a*h\", \"?a\", \"a?\",\n    };\n    // queries that should be parsed to prefix queries\n    String matchOneDocPrefix[][] = {\n        {\"a*\", \"ab*\", \"abc*\", }, // these should find only doc 0 \n        {\"h*\", \"hi*\", \"hij*\", \"\\\\\\\\7*\"}, // these should find only doc 1\n        {\"o*\", \"op*\", \"opq*\", \"\\\\\\\\\\\\\\\\*\"}, // these should find only doc 2\n    };\n    // queries that should be parsed to wildcard queries\n    String matchOneDocWild[][] = {\n        {\"*a*\", \"*ab*\", \"*abc**\", \"ab*e*\", \"*g?\", \"*f?1\", \"abc**\"}, // these should find only doc 0\n        {\"*h*\", \"*hi*\", \"*hij**\", \"hi*k*\", \"*n?\", \"*m?1\", \"hij**\"}, // these should find only doc 1\n        {\"*o*\", \"*op*\", \"*opq**\", \"op*q*\", \"*u?\", \"*t?1\", \"opq**\"}, // these should find only doc 2\n    };\n\n    // prepare the index\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMergePolicy(newLogMergePolicy()));\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(newField(field,docs[i],Store.NO,Index.ANALYZED));\n      iw.addDocument(doc);\n    }\n    iw.close();\n    \n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    \n    // test queries that must find all\n    for (int i = 0; i < matchAll.length; i++) {\n      String qtxt = matchAll[i];\n      Query q = qp.parse(qtxt);\n      if (VERBOSE) System.out.println(\"matchAll: qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(docs.length,hits.length);\n    }\n    \n    // test queries that must find none\n    for (int i = 0; i < matchNone.length; i++) {\n      String qtxt = matchNone[i];\n      Query q = qp.parse(qtxt);\n      if (VERBOSE) System.out.println(\"matchNone: qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(0,hits.length);\n    }\n\n    // test queries that must be prefix queries and must find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocPrefix[i].length; j++) {\n        String qtxt = matchOneDocPrefix[i][j];\n        Query q = qp.parse(qtxt);\n        if (VERBOSE) System.out.println(\"match 1 prefix: doc=\"+docs[i]+\" qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n        assertEquals(PrefixQuery.class, q.getClass());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    // test queries that must be wildcard queries and must find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocWild[i].length; j++) {\n        String qtxt = matchOneDocWild[i][j];\n        Query q = qp.parse(qtxt);\n        if (VERBOSE) System.out.println(\"match 1 wild: doc=\"+docs[i]+\" qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n        assertEquals(WildcardQuery.class, q.getClass());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    searcher.close();\n    dir.close();\n  }\n\n","sourceOld":"  /**\n   * Test that wild card queries are parsed to the correct type and are searched correctly.\n   * This test looks at both parsing and execution of wildcard queries.\n   * Although placed here, it also tests prefix queries, verifying that\n   * prefix queries are not parsed into wild card queries, and viceversa.\n   * @throws Exception\n   */\n  public void testParsingAndSearching() throws Exception {\n    String field = \"content\";\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, field, new MockAnalyzer());\n    qp.setAllowLeadingWildcard(true);\n    String docs[] = {\n        \"\\\\ abcdefg1\",\n        \"\\\\79 hijklmn1\",\n        \"\\\\\\\\ opqrstu1\",\n    };\n    // queries that should find all docs\n    String matchAll[] = {\n        \"*\", \"*1\", \"**1\", \"*?\", \"*?1\", \"?*1\", \"**\", \"***\", \"\\\\\\\\*\"\n    };\n    // queries that should find no docs\n    String matchNone[] = {\n        \"a*h\", \"a?h\", \"*a*h\", \"?a\", \"a?\",\n    };\n    // queries that should be parsed to prefix queries\n    String matchOneDocPrefix[][] = {\n        {\"a*\", \"ab*\", \"abc*\", }, // these should find only doc 0 \n        {\"h*\", \"hi*\", \"hij*\", \"\\\\\\\\7*\"}, // these should find only doc 1\n        {\"o*\", \"op*\", \"opq*\", \"\\\\\\\\\\\\\\\\*\"}, // these should find only doc 2\n    };\n    // queries that should be parsed to wildcard queries\n    String matchOneDocWild[][] = {\n        {\"*a*\", \"*ab*\", \"*abc**\", \"ab*e*\", \"*g?\", \"*f?1\", \"abc**\"}, // these should find only doc 0\n        {\"*h*\", \"*hi*\", \"*hij**\", \"hi*k*\", \"*n?\", \"*m?1\", \"hij**\"}, // these should find only doc 1\n        {\"*o*\", \"*op*\", \"*opq**\", \"op*q*\", \"*u?\", \"*t?1\", \"opq**\"}, // these should find only doc 2\n    };\n\n    // prepare the index\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMergePolicy(newInOrderLogMergePolicy()));\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(newField(field,docs[i],Store.NO,Index.ANALYZED));\n      iw.addDocument(doc);\n    }\n    iw.close();\n    \n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    \n    // test queries that must find all\n    for (int i = 0; i < matchAll.length; i++) {\n      String qtxt = matchAll[i];\n      Query q = qp.parse(qtxt);\n      if (VERBOSE) System.out.println(\"matchAll: qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(docs.length,hits.length);\n    }\n    \n    // test queries that must find none\n    for (int i = 0; i < matchNone.length; i++) {\n      String qtxt = matchNone[i];\n      Query q = qp.parse(qtxt);\n      if (VERBOSE) System.out.println(\"matchNone: qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(0,hits.length);\n    }\n\n    // test queries that must be prefix queries and must find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocPrefix[i].length; j++) {\n        String qtxt = matchOneDocPrefix[i][j];\n        Query q = qp.parse(qtxt);\n        if (VERBOSE) System.out.println(\"match 1 prefix: doc=\"+docs[i]+\" qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n        assertEquals(PrefixQuery.class, q.getClass());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    // test queries that must be wildcard queries and must find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocWild[i].length; j++) {\n        String qtxt = matchOneDocWild[i][j];\n        Query q = qp.parse(qtxt);\n        if (VERBOSE) System.out.println(\"match 1 wild: doc=\"+docs[i]+\" qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n        assertEquals(WildcardQuery.class, q.getClass());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    searcher.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestWildcard#testParsingAndSearching().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestWildcard#testParsingAndSearching().mjava","sourceNew":"  /**\n   * Test that wild card queries are parsed to the correct type and are searched correctly.\n   * This test looks at both parsing and execution of wildcard queries.\n   * Although placed here, it also tests prefix queries, verifying that\n   * prefix queries are not parsed into wild card queries, and viceversa.\n   * @throws Exception\n   */\n  public void testParsingAndSearching() throws Exception {\n    String field = \"content\";\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, field, new MockAnalyzer(random));\n    qp.setAllowLeadingWildcard(true);\n    String docs[] = {\n        \"\\\\ abcdefg1\",\n        \"\\\\79 hijklmn1\",\n        \"\\\\\\\\ opqrstu1\",\n    };\n    // queries that should find all docs\n    String matchAll[] = {\n        \"*\", \"*1\", \"**1\", \"*?\", \"*?1\", \"?*1\", \"**\", \"***\", \"\\\\\\\\*\"\n    };\n    // queries that should find no docs\n    String matchNone[] = {\n        \"a*h\", \"a?h\", \"*a*h\", \"?a\", \"a?\",\n    };\n    // queries that should be parsed to prefix queries\n    String matchOneDocPrefix[][] = {\n        {\"a*\", \"ab*\", \"abc*\", }, // these should find only doc 0 \n        {\"h*\", \"hi*\", \"hij*\", \"\\\\\\\\7*\"}, // these should find only doc 1\n        {\"o*\", \"op*\", \"opq*\", \"\\\\\\\\\\\\\\\\*\"}, // these should find only doc 2\n    };\n    // queries that should be parsed to wildcard queries\n    String matchOneDocWild[][] = {\n        {\"*a*\", \"*ab*\", \"*abc**\", \"ab*e*\", \"*g?\", \"*f?1\", \"abc**\"}, // these should find only doc 0\n        {\"*h*\", \"*hi*\", \"*hij**\", \"hi*k*\", \"*n?\", \"*m?1\", \"hij**\"}, // these should find only doc 1\n        {\"*o*\", \"*op*\", \"*opq**\", \"op*q*\", \"*u?\", \"*t?1\", \"opq**\"}, // these should find only doc 2\n    };\n\n    // prepare the index\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMergePolicy(newLogMergePolicy()));\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(newField(field,docs[i],Store.NO,Index.ANALYZED));\n      iw.addDocument(doc);\n    }\n    iw.close();\n    \n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    \n    // test queries that must find all\n    for (int i = 0; i < matchAll.length; i++) {\n      String qtxt = matchAll[i];\n      Query q = qp.parse(qtxt);\n      if (VERBOSE) System.out.println(\"matchAll: qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(docs.length,hits.length);\n    }\n    \n    // test queries that must find none\n    for (int i = 0; i < matchNone.length; i++) {\n      String qtxt = matchNone[i];\n      Query q = qp.parse(qtxt);\n      if (VERBOSE) System.out.println(\"matchNone: qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(0,hits.length);\n    }\n\n    // test queries that must be prefix queries and must find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocPrefix[i].length; j++) {\n        String qtxt = matchOneDocPrefix[i][j];\n        Query q = qp.parse(qtxt);\n        if (VERBOSE) System.out.println(\"match 1 prefix: doc=\"+docs[i]+\" qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n        assertEquals(PrefixQuery.class, q.getClass());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    // test queries that must be wildcard queries and must find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocWild[i].length; j++) {\n        String qtxt = matchOneDocWild[i][j];\n        Query q = qp.parse(qtxt);\n        if (VERBOSE) System.out.println(\"match 1 wild: doc=\"+docs[i]+\" qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n        assertEquals(WildcardQuery.class, q.getClass());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    searcher.close();\n    dir.close();\n  }\n\n","sourceOld":"  /**\n   * Test that wild card queries are parsed to the correct type and are searched correctly.\n   * This test looks at both parsing and execution of wildcard queries.\n   * Although placed here, it also tests prefix queries, verifying that\n   * prefix queries are not parsed into wild card queries, and viceversa.\n   * @throws Exception\n   */\n  public void testParsingAndSearching() throws Exception {\n    String field = \"content\";\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, field, new MockAnalyzer());\n    qp.setAllowLeadingWildcard(true);\n    String docs[] = {\n        \"\\\\ abcdefg1\",\n        \"\\\\79 hijklmn1\",\n        \"\\\\\\\\ opqrstu1\",\n    };\n    // queries that should find all docs\n    String matchAll[] = {\n        \"*\", \"*1\", \"**1\", \"*?\", \"*?1\", \"?*1\", \"**\", \"***\", \"\\\\\\\\*\"\n    };\n    // queries that should find no docs\n    String matchNone[] = {\n        \"a*h\", \"a?h\", \"*a*h\", \"?a\", \"a?\",\n    };\n    // queries that should be parsed to prefix queries\n    String matchOneDocPrefix[][] = {\n        {\"a*\", \"ab*\", \"abc*\", }, // these should find only doc 0 \n        {\"h*\", \"hi*\", \"hij*\", \"\\\\\\\\7*\"}, // these should find only doc 1\n        {\"o*\", \"op*\", \"opq*\", \"\\\\\\\\\\\\\\\\*\"}, // these should find only doc 2\n    };\n    // queries that should be parsed to wildcard queries\n    String matchOneDocWild[][] = {\n        {\"*a*\", \"*ab*\", \"*abc**\", \"ab*e*\", \"*g?\", \"*f?1\", \"abc**\"}, // these should find only doc 0\n        {\"*h*\", \"*hi*\", \"*hij**\", \"hi*k*\", \"*n?\", \"*m?1\", \"hij**\"}, // these should find only doc 1\n        {\"*o*\", \"*op*\", \"*opq**\", \"op*q*\", \"*u?\", \"*t?1\", \"opq**\"}, // these should find only doc 2\n    };\n\n    // prepare the index\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMergePolicy(newInOrderLogMergePolicy()));\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(newField(field,docs[i],Store.NO,Index.ANALYZED));\n      iw.addDocument(doc);\n    }\n    iw.close();\n    \n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    \n    // test queries that must find all\n    for (int i = 0; i < matchAll.length; i++) {\n      String qtxt = matchAll[i];\n      Query q = qp.parse(qtxt);\n      if (VERBOSE) System.out.println(\"matchAll: qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(docs.length,hits.length);\n    }\n    \n    // test queries that must find none\n    for (int i = 0; i < matchNone.length; i++) {\n      String qtxt = matchNone[i];\n      Query q = qp.parse(qtxt);\n      if (VERBOSE) System.out.println(\"matchNone: qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(0,hits.length);\n    }\n\n    // test queries that must be prefix queries and must find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocPrefix[i].length; j++) {\n        String qtxt = matchOneDocPrefix[i][j];\n        Query q = qp.parse(qtxt);\n        if (VERBOSE) System.out.println(\"match 1 prefix: doc=\"+docs[i]+\" qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n        assertEquals(PrefixQuery.class, q.getClass());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    // test queries that must be wildcard queries and must find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocWild[i].length; j++) {\n        String qtxt = matchOneDocWild[i][j];\n        Query q = qp.parse(qtxt);\n        if (VERBOSE) System.out.println(\"match 1 wild: doc=\"+docs[i]+\" qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n        assertEquals(WildcardQuery.class, q.getClass());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    searcher.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"112629f1dfd1451722c6047bcf593e6efc96f5f4","date":1309910887,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestWildcard#testParsingAndSearching().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestWildcard#testParsingAndSearching().mjava","sourceNew":"  /**\n   * Test that wild card queries are parsed to the correct type and are searched correctly.\n   * This test looks at both parsing and execution of wildcard queries.\n   * Although placed here, it also tests prefix queries, verifying that\n   * prefix queries are not parsed into wild card queries, and viceversa.\n   * @throws Exception\n   */\n  public void testParsingAndSearching() throws Exception {\n    String field = \"content\";\n    String docs[] = {\n        \"\\\\ abcdefg1\",\n        \"\\\\79 hijklmn1\",\n        \"\\\\\\\\ opqrstu1\",\n    };\n\n    // queries that should find all docs\n    Query matchAll[] = {\n        new WildcardQuery(new Term(field, \"*\")),\n        new WildcardQuery(new Term(field, \"*1\")),\n        new WildcardQuery(new Term(field, \"**1\")),\n        new WildcardQuery(new Term(field, \"*?\")),\n        new WildcardQuery(new Term(field, \"*?1\")),\n        new WildcardQuery(new Term(field, \"?*1\")),\n        new WildcardQuery(new Term(field, \"**\")),\n        new WildcardQuery(new Term(field, \"***\")),\n        new WildcardQuery(new Term(field, \"\\\\\\\\*\"))\n    };\n\n    // queries that should find no docs\n    Query matchNone[] = {\n        new WildcardQuery(new Term(field, \"a*h\")),\n        new WildcardQuery(new Term(field, \"a?h\")),\n        new WildcardQuery(new Term(field, \"*a*h\")),\n        new WildcardQuery(new Term(field, \"?a\")),\n        new WildcardQuery(new Term(field, \"a?\"))\n    };\n\n    PrefixQuery matchOneDocPrefix[][] = {\n        {new PrefixQuery(new Term(field, \"a\")),\n         new PrefixQuery(new Term(field, \"ab\")),\n         new PrefixQuery(new Term(field, \"abc\"))}, // these should find only doc 0\n\n        {new PrefixQuery(new Term(field, \"h\")),\n         new PrefixQuery(new Term(field, \"hi\")),\n         new PrefixQuery(new Term(field, \"hij\")),\n         new PrefixQuery(new Term(field, \"\\\\7\"))}, // these should find only doc 1\n\n        {new PrefixQuery(new Term(field, \"o\")),\n         new PrefixQuery(new Term(field, \"op\")),\n         new PrefixQuery(new Term(field, \"opq\")),\n         new PrefixQuery(new Term(field, \"\\\\\\\\\"))}, // these should find only doc 2\n    };\n\n    WildcardQuery matchOneDocWild[][] = {\n\n        {new WildcardQuery(new Term(field, \"*a*\")), // these should find only doc 0\n            new WildcardQuery(new Term(field, \"*ab*\")),\n            new WildcardQuery(new Term(field, \"*abc**\")),\n            new WildcardQuery(new Term(field, \"ab*e*\")),\n            new WildcardQuery(new Term(field, \"*g?\")),\n            new WildcardQuery(new Term(field, \"*f?1\"))},\n\n        {new WildcardQuery(new Term(field, \"*h*\")), // these should find only doc 1\n            new WildcardQuery(new Term(field, \"*hi*\")),\n            new WildcardQuery(new Term(field, \"*hij**\")),\n            new WildcardQuery(new Term(field, \"hi*k*\")),\n            new WildcardQuery(new Term(field, \"*n?\")),\n            new WildcardQuery(new Term(field, \"*m?1\")),\n            new WildcardQuery(new Term(field, \"hij**\"))},\n\n        {new WildcardQuery(new Term(field, \"*o*\")), // these should find only doc 2\n            new WildcardQuery(new Term(field, \"*op*\")),\n            new WildcardQuery(new Term(field, \"*opq**\")),\n            new WildcardQuery(new Term(field, \"op*q*\")),\n            new WildcardQuery(new Term(field, \"*u?\")),\n            new WildcardQuery(new Term(field, \"*t?1\")),\n            new WildcardQuery(new Term(field, \"opq**\"))}\n    };\n\n    // prepare the index\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMergePolicy(newLogMergePolicy()));\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(newField(field,docs[i],Store.NO,Index.ANALYZED));\n      iw.addDocument(doc);\n    }\n    iw.close();\n    \n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    \n    // test queries that must find all\n    for (Query q : matchAll) {\n      if (VERBOSE) System.out.println(\"matchAll: q=\" + q + \" \" + q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(docs.length, hits.length);\n    }\n    \n    // test queries that must find none\n    for (Query q : matchNone) {\n      if (VERBOSE) System.out.println(\"matchNone: q=\" + q + \" \" + q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(0, hits.length);\n    }\n\n    // thest the prefi queries find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocPrefix[i].length; j++) {\n        Query q = matchOneDocPrefix[i][j];\n        if (VERBOSE) System.out.println(\"match 1 prefix: doc=\"+docs[i]+\" q=\"+q+\" \"+q.getClass().getName());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    // test the wildcard queries find only one doc\n    for (int i = 0; i < matchOneDocWild.length; i++) {\n      for (int j = 0; j < matchOneDocWild[i].length; j++) {\n        Query q = matchOneDocWild[i][j];\n        if (VERBOSE) System.out.println(\"match 1 wild: doc=\"+docs[i]+\" q=\"+q+\" \"+q.getClass().getName());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    searcher.close();\n    dir.close();\n  }\n\n","sourceOld":"  /**\n   * Test that wild card queries are parsed to the correct type and are searched correctly.\n   * This test looks at both parsing and execution of wildcard queries.\n   * Although placed here, it also tests prefix queries, verifying that\n   * prefix queries are not parsed into wild card queries, and viceversa.\n   * @throws Exception\n   */\n  public void testParsingAndSearching() throws Exception {\n    String field = \"content\";\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, field, new MockAnalyzer(random));\n    qp.setAllowLeadingWildcard(true);\n    String docs[] = {\n        \"\\\\ abcdefg1\",\n        \"\\\\79 hijklmn1\",\n        \"\\\\\\\\ opqrstu1\",\n    };\n    // queries that should find all docs\n    String matchAll[] = {\n        \"*\", \"*1\", \"**1\", \"*?\", \"*?1\", \"?*1\", \"**\", \"***\", \"\\\\\\\\*\"\n    };\n    // queries that should find no docs\n    String matchNone[] = {\n        \"a*h\", \"a?h\", \"*a*h\", \"?a\", \"a?\",\n    };\n    // queries that should be parsed to prefix queries\n    String matchOneDocPrefix[][] = {\n        {\"a*\", \"ab*\", \"abc*\", }, // these should find only doc 0 \n        {\"h*\", \"hi*\", \"hij*\", \"\\\\\\\\7*\"}, // these should find only doc 1\n        {\"o*\", \"op*\", \"opq*\", \"\\\\\\\\\\\\\\\\*\"}, // these should find only doc 2\n    };\n    // queries that should be parsed to wildcard queries\n    String matchOneDocWild[][] = {\n        {\"*a*\", \"*ab*\", \"*abc**\", \"ab*e*\", \"*g?\", \"*f?1\", \"abc**\"}, // these should find only doc 0\n        {\"*h*\", \"*hi*\", \"*hij**\", \"hi*k*\", \"*n?\", \"*m?1\", \"hij**\"}, // these should find only doc 1\n        {\"*o*\", \"*op*\", \"*opq**\", \"op*q*\", \"*u?\", \"*t?1\", \"opq**\"}, // these should find only doc 2\n    };\n\n    // prepare the index\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMergePolicy(newLogMergePolicy()));\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(newField(field,docs[i],Store.NO,Index.ANALYZED));\n      iw.addDocument(doc);\n    }\n    iw.close();\n    \n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    \n    // test queries that must find all\n    for (int i = 0; i < matchAll.length; i++) {\n      String qtxt = matchAll[i];\n      Query q = qp.parse(qtxt);\n      if (VERBOSE) System.out.println(\"matchAll: qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(docs.length,hits.length);\n    }\n    \n    // test queries that must find none\n    for (int i = 0; i < matchNone.length; i++) {\n      String qtxt = matchNone[i];\n      Query q = qp.parse(qtxt);\n      if (VERBOSE) System.out.println(\"matchNone: qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(0,hits.length);\n    }\n\n    // test queries that must be prefix queries and must find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocPrefix[i].length; j++) {\n        String qtxt = matchOneDocPrefix[i][j];\n        Query q = qp.parse(qtxt);\n        if (VERBOSE) System.out.println(\"match 1 prefix: doc=\"+docs[i]+\" qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n        assertEquals(PrefixQuery.class, q.getClass());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    // test queries that must be wildcard queries and must find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocWild[i].length; j++) {\n        String qtxt = matchOneDocWild[i][j];\n        Query q = qp.parse(qtxt);\n        if (VERBOSE) System.out.println(\"match 1 wild: doc=\"+docs[i]+\" qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n        assertEquals(WildcardQuery.class, q.getClass());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    searcher.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestWildcard#testParsingAndSearching().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestWildcard#testParsingAndSearching().mjava","sourceNew":"  /**\n   * Test that wild card queries are parsed to the correct type and are searched correctly.\n   * This test looks at both parsing and execution of wildcard queries.\n   * Although placed here, it also tests prefix queries, verifying that\n   * prefix queries are not parsed into wild card queries, and viceversa.\n   * @throws Exception\n   */\n  public void testParsingAndSearching() throws Exception {\n    String field = \"content\";\n    String docs[] = {\n        \"\\\\ abcdefg1\",\n        \"\\\\79 hijklmn1\",\n        \"\\\\\\\\ opqrstu1\",\n    };\n\n    // queries that should find all docs\n    Query matchAll[] = {\n        new WildcardQuery(new Term(field, \"*\")),\n        new WildcardQuery(new Term(field, \"*1\")),\n        new WildcardQuery(new Term(field, \"**1\")),\n        new WildcardQuery(new Term(field, \"*?\")),\n        new WildcardQuery(new Term(field, \"*?1\")),\n        new WildcardQuery(new Term(field, \"?*1\")),\n        new WildcardQuery(new Term(field, \"**\")),\n        new WildcardQuery(new Term(field, \"***\")),\n        new WildcardQuery(new Term(field, \"\\\\\\\\*\"))\n    };\n\n    // queries that should find no docs\n    Query matchNone[] = {\n        new WildcardQuery(new Term(field, \"a*h\")),\n        new WildcardQuery(new Term(field, \"a?h\")),\n        new WildcardQuery(new Term(field, \"*a*h\")),\n        new WildcardQuery(new Term(field, \"?a\")),\n        new WildcardQuery(new Term(field, \"a?\"))\n    };\n\n    PrefixQuery matchOneDocPrefix[][] = {\n        {new PrefixQuery(new Term(field, \"a\")),\n         new PrefixQuery(new Term(field, \"ab\")),\n         new PrefixQuery(new Term(field, \"abc\"))}, // these should find only doc 0\n\n        {new PrefixQuery(new Term(field, \"h\")),\n         new PrefixQuery(new Term(field, \"hi\")),\n         new PrefixQuery(new Term(field, \"hij\")),\n         new PrefixQuery(new Term(field, \"\\\\7\"))}, // these should find only doc 1\n\n        {new PrefixQuery(new Term(field, \"o\")),\n         new PrefixQuery(new Term(field, \"op\")),\n         new PrefixQuery(new Term(field, \"opq\")),\n         new PrefixQuery(new Term(field, \"\\\\\\\\\"))}, // these should find only doc 2\n    };\n\n    WildcardQuery matchOneDocWild[][] = {\n\n        {new WildcardQuery(new Term(field, \"*a*\")), // these should find only doc 0\n            new WildcardQuery(new Term(field, \"*ab*\")),\n            new WildcardQuery(new Term(field, \"*abc**\")),\n            new WildcardQuery(new Term(field, \"ab*e*\")),\n            new WildcardQuery(new Term(field, \"*g?\")),\n            new WildcardQuery(new Term(field, \"*f?1\"))},\n\n        {new WildcardQuery(new Term(field, \"*h*\")), // these should find only doc 1\n            new WildcardQuery(new Term(field, \"*hi*\")),\n            new WildcardQuery(new Term(field, \"*hij**\")),\n            new WildcardQuery(new Term(field, \"hi*k*\")),\n            new WildcardQuery(new Term(field, \"*n?\")),\n            new WildcardQuery(new Term(field, \"*m?1\")),\n            new WildcardQuery(new Term(field, \"hij**\"))},\n\n        {new WildcardQuery(new Term(field, \"*o*\")), // these should find only doc 2\n            new WildcardQuery(new Term(field, \"*op*\")),\n            new WildcardQuery(new Term(field, \"*opq**\")),\n            new WildcardQuery(new Term(field, \"op*q*\")),\n            new WildcardQuery(new Term(field, \"*u?\")),\n            new WildcardQuery(new Term(field, \"*t?1\")),\n            new WildcardQuery(new Term(field, \"opq**\"))}\n    };\n\n    // prepare the index\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMergePolicy(newLogMergePolicy()));\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(newField(field,docs[i],Store.NO,Index.ANALYZED));\n      iw.addDocument(doc);\n    }\n    iw.close();\n    \n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    \n    // test queries that must find all\n    for (Query q : matchAll) {\n      if (VERBOSE) System.out.println(\"matchAll: q=\" + q + \" \" + q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(docs.length, hits.length);\n    }\n    \n    // test queries that must find none\n    for (Query q : matchNone) {\n      if (VERBOSE) System.out.println(\"matchNone: q=\" + q + \" \" + q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(0, hits.length);\n    }\n\n    // thest the prefi queries find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocPrefix[i].length; j++) {\n        Query q = matchOneDocPrefix[i][j];\n        if (VERBOSE) System.out.println(\"match 1 prefix: doc=\"+docs[i]+\" q=\"+q+\" \"+q.getClass().getName());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    // test the wildcard queries find only one doc\n    for (int i = 0; i < matchOneDocWild.length; i++) {\n      for (int j = 0; j < matchOneDocWild[i].length; j++) {\n        Query q = matchOneDocWild[i][j];\n        if (VERBOSE) System.out.println(\"match 1 wild: doc=\"+docs[i]+\" q=\"+q+\" \"+q.getClass().getName());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    searcher.close();\n    dir.close();\n  }\n\n","sourceOld":"  /**\n   * Test that wild card queries are parsed to the correct type and are searched correctly.\n   * This test looks at both parsing and execution of wildcard queries.\n   * Although placed here, it also tests prefix queries, verifying that\n   * prefix queries are not parsed into wild card queries, and viceversa.\n   * @throws Exception\n   */\n  public void testParsingAndSearching() throws Exception {\n    String field = \"content\";\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, field, new MockAnalyzer(random));\n    qp.setAllowLeadingWildcard(true);\n    String docs[] = {\n        \"\\\\ abcdefg1\",\n        \"\\\\79 hijklmn1\",\n        \"\\\\\\\\ opqrstu1\",\n    };\n    // queries that should find all docs\n    String matchAll[] = {\n        \"*\", \"*1\", \"**1\", \"*?\", \"*?1\", \"?*1\", \"**\", \"***\", \"\\\\\\\\*\"\n    };\n    // queries that should find no docs\n    String matchNone[] = {\n        \"a*h\", \"a?h\", \"*a*h\", \"?a\", \"a?\",\n    };\n    // queries that should be parsed to prefix queries\n    String matchOneDocPrefix[][] = {\n        {\"a*\", \"ab*\", \"abc*\", }, // these should find only doc 0 \n        {\"h*\", \"hi*\", \"hij*\", \"\\\\\\\\7*\"}, // these should find only doc 1\n        {\"o*\", \"op*\", \"opq*\", \"\\\\\\\\\\\\\\\\*\"}, // these should find only doc 2\n    };\n    // queries that should be parsed to wildcard queries\n    String matchOneDocWild[][] = {\n        {\"*a*\", \"*ab*\", \"*abc**\", \"ab*e*\", \"*g?\", \"*f?1\", \"abc**\"}, // these should find only doc 0\n        {\"*h*\", \"*hi*\", \"*hij**\", \"hi*k*\", \"*n?\", \"*m?1\", \"hij**\"}, // these should find only doc 1\n        {\"*o*\", \"*op*\", \"*opq**\", \"op*q*\", \"*u?\", \"*t?1\", \"opq**\"}, // these should find only doc 2\n    };\n\n    // prepare the index\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMergePolicy(newLogMergePolicy()));\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(newField(field,docs[i],Store.NO,Index.ANALYZED));\n      iw.addDocument(doc);\n    }\n    iw.close();\n    \n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    \n    // test queries that must find all\n    for (int i = 0; i < matchAll.length; i++) {\n      String qtxt = matchAll[i];\n      Query q = qp.parse(qtxt);\n      if (VERBOSE) System.out.println(\"matchAll: qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(docs.length,hits.length);\n    }\n    \n    // test queries that must find none\n    for (int i = 0; i < matchNone.length; i++) {\n      String qtxt = matchNone[i];\n      Query q = qp.parse(qtxt);\n      if (VERBOSE) System.out.println(\"matchNone: qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(0,hits.length);\n    }\n\n    // test queries that must be prefix queries and must find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocPrefix[i].length; j++) {\n        String qtxt = matchOneDocPrefix[i][j];\n        Query q = qp.parse(qtxt);\n        if (VERBOSE) System.out.println(\"match 1 prefix: doc=\"+docs[i]+\" qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n        assertEquals(PrefixQuery.class, q.getClass());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    // test queries that must be wildcard queries and must find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocWild[i].length; j++) {\n        String qtxt = matchOneDocWild[i][j];\n        Query q = qp.parse(qtxt);\n        if (VERBOSE) System.out.println(\"match 1 wild: doc=\"+docs[i]+\" qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n        assertEquals(WildcardQuery.class, q.getClass());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    searcher.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestWildcard#testParsingAndSearching().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestWildcard#testParsingAndSearching().mjava","sourceNew":"  /**\n   * Test that wild card queries are parsed to the correct type and are searched correctly.\n   * This test looks at both parsing and execution of wildcard queries.\n   * Although placed here, it also tests prefix queries, verifying that\n   * prefix queries are not parsed into wild card queries, and viceversa.\n   * @throws Exception\n   */\n  public void testParsingAndSearching() throws Exception {\n    String field = \"content\";\n    String docs[] = {\n        \"\\\\ abcdefg1\",\n        \"\\\\79 hijklmn1\",\n        \"\\\\\\\\ opqrstu1\",\n    };\n\n    // queries that should find all docs\n    Query matchAll[] = {\n        new WildcardQuery(new Term(field, \"*\")),\n        new WildcardQuery(new Term(field, \"*1\")),\n        new WildcardQuery(new Term(field, \"**1\")),\n        new WildcardQuery(new Term(field, \"*?\")),\n        new WildcardQuery(new Term(field, \"*?1\")),\n        new WildcardQuery(new Term(field, \"?*1\")),\n        new WildcardQuery(new Term(field, \"**\")),\n        new WildcardQuery(new Term(field, \"***\")),\n        new WildcardQuery(new Term(field, \"\\\\\\\\*\"))\n    };\n\n    // queries that should find no docs\n    Query matchNone[] = {\n        new WildcardQuery(new Term(field, \"a*h\")),\n        new WildcardQuery(new Term(field, \"a?h\")),\n        new WildcardQuery(new Term(field, \"*a*h\")),\n        new WildcardQuery(new Term(field, \"?a\")),\n        new WildcardQuery(new Term(field, \"a?\"))\n    };\n\n    PrefixQuery matchOneDocPrefix[][] = {\n        {new PrefixQuery(new Term(field, \"a\")),\n         new PrefixQuery(new Term(field, \"ab\")),\n         new PrefixQuery(new Term(field, \"abc\"))}, // these should find only doc 0\n\n        {new PrefixQuery(new Term(field, \"h\")),\n         new PrefixQuery(new Term(field, \"hi\")),\n         new PrefixQuery(new Term(field, \"hij\")),\n         new PrefixQuery(new Term(field, \"\\\\7\"))}, // these should find only doc 1\n\n        {new PrefixQuery(new Term(field, \"o\")),\n         new PrefixQuery(new Term(field, \"op\")),\n         new PrefixQuery(new Term(field, \"opq\")),\n         new PrefixQuery(new Term(field, \"\\\\\\\\\"))}, // these should find only doc 2\n    };\n\n    WildcardQuery matchOneDocWild[][] = {\n\n        {new WildcardQuery(new Term(field, \"*a*\")), // these should find only doc 0\n            new WildcardQuery(new Term(field, \"*ab*\")),\n            new WildcardQuery(new Term(field, \"*abc**\")),\n            new WildcardQuery(new Term(field, \"ab*e*\")),\n            new WildcardQuery(new Term(field, \"*g?\")),\n            new WildcardQuery(new Term(field, \"*f?1\"))},\n\n        {new WildcardQuery(new Term(field, \"*h*\")), // these should find only doc 1\n            new WildcardQuery(new Term(field, \"*hi*\")),\n            new WildcardQuery(new Term(field, \"*hij**\")),\n            new WildcardQuery(new Term(field, \"hi*k*\")),\n            new WildcardQuery(new Term(field, \"*n?\")),\n            new WildcardQuery(new Term(field, \"*m?1\")),\n            new WildcardQuery(new Term(field, \"hij**\"))},\n\n        {new WildcardQuery(new Term(field, \"*o*\")), // these should find only doc 2\n            new WildcardQuery(new Term(field, \"*op*\")),\n            new WildcardQuery(new Term(field, \"*opq**\")),\n            new WildcardQuery(new Term(field, \"op*q*\")),\n            new WildcardQuery(new Term(field, \"*u?\")),\n            new WildcardQuery(new Term(field, \"*t?1\")),\n            new WildcardQuery(new Term(field, \"opq**\"))}\n    };\n\n    // prepare the index\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMergePolicy(newLogMergePolicy()));\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(newField(field,docs[i],Store.NO,Index.ANALYZED));\n      iw.addDocument(doc);\n    }\n    iw.close();\n    \n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    \n    // test queries that must find all\n    for (Query q : matchAll) {\n      if (VERBOSE) System.out.println(\"matchAll: q=\" + q + \" \" + q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(docs.length, hits.length);\n    }\n    \n    // test queries that must find none\n    for (Query q : matchNone) {\n      if (VERBOSE) System.out.println(\"matchNone: q=\" + q + \" \" + q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(0, hits.length);\n    }\n\n    // thest the prefi queries find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocPrefix[i].length; j++) {\n        Query q = matchOneDocPrefix[i][j];\n        if (VERBOSE) System.out.println(\"match 1 prefix: doc=\"+docs[i]+\" q=\"+q+\" \"+q.getClass().getName());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    // test the wildcard queries find only one doc\n    for (int i = 0; i < matchOneDocWild.length; i++) {\n      for (int j = 0; j < matchOneDocWild[i].length; j++) {\n        Query q = matchOneDocWild[i][j];\n        if (VERBOSE) System.out.println(\"match 1 wild: doc=\"+docs[i]+\" q=\"+q+\" \"+q.getClass().getName());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    searcher.close();\n    dir.close();\n  }\n\n","sourceOld":"  /**\n   * Test that wild card queries are parsed to the correct type and are searched correctly.\n   * This test looks at both parsing and execution of wildcard queries.\n   * Although placed here, it also tests prefix queries, verifying that\n   * prefix queries are not parsed into wild card queries, and viceversa.\n   * @throws Exception\n   */\n  public void testParsingAndSearching() throws Exception {\n    String field = \"content\";\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, field, new MockAnalyzer(random));\n    qp.setAllowLeadingWildcard(true);\n    String docs[] = {\n        \"\\\\ abcdefg1\",\n        \"\\\\79 hijklmn1\",\n        \"\\\\\\\\ opqrstu1\",\n    };\n    // queries that should find all docs\n    String matchAll[] = {\n        \"*\", \"*1\", \"**1\", \"*?\", \"*?1\", \"?*1\", \"**\", \"***\", \"\\\\\\\\*\"\n    };\n    // queries that should find no docs\n    String matchNone[] = {\n        \"a*h\", \"a?h\", \"*a*h\", \"?a\", \"a?\",\n    };\n    // queries that should be parsed to prefix queries\n    String matchOneDocPrefix[][] = {\n        {\"a*\", \"ab*\", \"abc*\", }, // these should find only doc 0 \n        {\"h*\", \"hi*\", \"hij*\", \"\\\\\\\\7*\"}, // these should find only doc 1\n        {\"o*\", \"op*\", \"opq*\", \"\\\\\\\\\\\\\\\\*\"}, // these should find only doc 2\n    };\n    // queries that should be parsed to wildcard queries\n    String matchOneDocWild[][] = {\n        {\"*a*\", \"*ab*\", \"*abc**\", \"ab*e*\", \"*g?\", \"*f?1\", \"abc**\"}, // these should find only doc 0\n        {\"*h*\", \"*hi*\", \"*hij**\", \"hi*k*\", \"*n?\", \"*m?1\", \"hij**\"}, // these should find only doc 1\n        {\"*o*\", \"*op*\", \"*opq**\", \"op*q*\", \"*u?\", \"*t?1\", \"opq**\"}, // these should find only doc 2\n    };\n\n    // prepare the index\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMergePolicy(newLogMergePolicy()));\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(newField(field,docs[i],Store.NO,Index.ANALYZED));\n      iw.addDocument(doc);\n    }\n    iw.close();\n    \n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    \n    // test queries that must find all\n    for (int i = 0; i < matchAll.length; i++) {\n      String qtxt = matchAll[i];\n      Query q = qp.parse(qtxt);\n      if (VERBOSE) System.out.println(\"matchAll: qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(docs.length,hits.length);\n    }\n    \n    // test queries that must find none\n    for (int i = 0; i < matchNone.length; i++) {\n      String qtxt = matchNone[i];\n      Query q = qp.parse(qtxt);\n      if (VERBOSE) System.out.println(\"matchNone: qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(0,hits.length);\n    }\n\n    // test queries that must be prefix queries and must find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocPrefix[i].length; j++) {\n        String qtxt = matchOneDocPrefix[i][j];\n        Query q = qp.parse(qtxt);\n        if (VERBOSE) System.out.println(\"match 1 prefix: doc=\"+docs[i]+\" qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n        assertEquals(PrefixQuery.class, q.getClass());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    // test queries that must be wildcard queries and must find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocWild[i].length; j++) {\n        String qtxt = matchOneDocWild[i][j];\n        Query q = qp.parse(qtxt);\n        if (VERBOSE) System.out.println(\"match 1 wild: doc=\"+docs[i]+\" qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n        assertEquals(WildcardQuery.class, q.getClass());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    searcher.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestWildcard#testParsingAndSearching().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestWildcard#testParsingAndSearching().mjava","sourceNew":"  /**\n   * Test that wild card queries are parsed to the correct type and are searched correctly.\n   * This test looks at both parsing and execution of wildcard queries.\n   * Although placed here, it also tests prefix queries, verifying that\n   * prefix queries are not parsed into wild card queries, and viceversa.\n   * @throws Exception\n   */\n  public void testParsingAndSearching() throws Exception {\n    String field = \"content\";\n    String docs[] = {\n        \"\\\\ abcdefg1\",\n        \"\\\\79 hijklmn1\",\n        \"\\\\\\\\ opqrstu1\",\n    };\n\n    // queries that should find all docs\n    Query matchAll[] = {\n        new WildcardQuery(new Term(field, \"*\")),\n        new WildcardQuery(new Term(field, \"*1\")),\n        new WildcardQuery(new Term(field, \"**1\")),\n        new WildcardQuery(new Term(field, \"*?\")),\n        new WildcardQuery(new Term(field, \"*?1\")),\n        new WildcardQuery(new Term(field, \"?*1\")),\n        new WildcardQuery(new Term(field, \"**\")),\n        new WildcardQuery(new Term(field, \"***\")),\n        new WildcardQuery(new Term(field, \"\\\\\\\\*\"))\n    };\n\n    // queries that should find no docs\n    Query matchNone[] = {\n        new WildcardQuery(new Term(field, \"a*h\")),\n        new WildcardQuery(new Term(field, \"a?h\")),\n        new WildcardQuery(new Term(field, \"*a*h\")),\n        new WildcardQuery(new Term(field, \"?a\")),\n        new WildcardQuery(new Term(field, \"a?\"))\n    };\n\n    PrefixQuery matchOneDocPrefix[][] = {\n        {new PrefixQuery(new Term(field, \"a\")),\n         new PrefixQuery(new Term(field, \"ab\")),\n         new PrefixQuery(new Term(field, \"abc\"))}, // these should find only doc 0\n\n        {new PrefixQuery(new Term(field, \"h\")),\n         new PrefixQuery(new Term(field, \"hi\")),\n         new PrefixQuery(new Term(field, \"hij\")),\n         new PrefixQuery(new Term(field, \"\\\\7\"))}, // these should find only doc 1\n\n        {new PrefixQuery(new Term(field, \"o\")),\n         new PrefixQuery(new Term(field, \"op\")),\n         new PrefixQuery(new Term(field, \"opq\")),\n         new PrefixQuery(new Term(field, \"\\\\\\\\\"))}, // these should find only doc 2\n    };\n\n    WildcardQuery matchOneDocWild[][] = {\n\n        {new WildcardQuery(new Term(field, \"*a*\")), // these should find only doc 0\n            new WildcardQuery(new Term(field, \"*ab*\")),\n            new WildcardQuery(new Term(field, \"*abc**\")),\n            new WildcardQuery(new Term(field, \"ab*e*\")),\n            new WildcardQuery(new Term(field, \"*g?\")),\n            new WildcardQuery(new Term(field, \"*f?1\"))},\n\n        {new WildcardQuery(new Term(field, \"*h*\")), // these should find only doc 1\n            new WildcardQuery(new Term(field, \"*hi*\")),\n            new WildcardQuery(new Term(field, \"*hij**\")),\n            new WildcardQuery(new Term(field, \"hi*k*\")),\n            new WildcardQuery(new Term(field, \"*n?\")),\n            new WildcardQuery(new Term(field, \"*m?1\")),\n            new WildcardQuery(new Term(field, \"hij**\"))},\n\n        {new WildcardQuery(new Term(field, \"*o*\")), // these should find only doc 2\n            new WildcardQuery(new Term(field, \"*op*\")),\n            new WildcardQuery(new Term(field, \"*opq**\")),\n            new WildcardQuery(new Term(field, \"op*q*\")),\n            new WildcardQuery(new Term(field, \"*u?\")),\n            new WildcardQuery(new Term(field, \"*t?1\")),\n            new WildcardQuery(new Term(field, \"opq**\"))}\n    };\n\n    // prepare the index\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMergePolicy(newLogMergePolicy()));\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(newField(field,docs[i],TextField.TYPE_UNSTORED));\n      iw.addDocument(doc);\n    }\n    iw.close();\n    \n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    \n    // test queries that must find all\n    for (Query q : matchAll) {\n      if (VERBOSE) System.out.println(\"matchAll: q=\" + q + \" \" + q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(docs.length, hits.length);\n    }\n    \n    // test queries that must find none\n    for (Query q : matchNone) {\n      if (VERBOSE) System.out.println(\"matchNone: q=\" + q + \" \" + q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(0, hits.length);\n    }\n\n    // thest the prefi queries find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocPrefix[i].length; j++) {\n        Query q = matchOneDocPrefix[i][j];\n        if (VERBOSE) System.out.println(\"match 1 prefix: doc=\"+docs[i]+\" q=\"+q+\" \"+q.getClass().getName());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    // test the wildcard queries find only one doc\n    for (int i = 0; i < matchOneDocWild.length; i++) {\n      for (int j = 0; j < matchOneDocWild[i].length; j++) {\n        Query q = matchOneDocWild[i][j];\n        if (VERBOSE) System.out.println(\"match 1 wild: doc=\"+docs[i]+\" q=\"+q+\" \"+q.getClass().getName());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    searcher.close();\n    dir.close();\n  }\n\n","sourceOld":"  /**\n   * Test that wild card queries are parsed to the correct type and are searched correctly.\n   * This test looks at both parsing and execution of wildcard queries.\n   * Although placed here, it also tests prefix queries, verifying that\n   * prefix queries are not parsed into wild card queries, and viceversa.\n   * @throws Exception\n   */\n  public void testParsingAndSearching() throws Exception {\n    String field = \"content\";\n    String docs[] = {\n        \"\\\\ abcdefg1\",\n        \"\\\\79 hijklmn1\",\n        \"\\\\\\\\ opqrstu1\",\n    };\n\n    // queries that should find all docs\n    Query matchAll[] = {\n        new WildcardQuery(new Term(field, \"*\")),\n        new WildcardQuery(new Term(field, \"*1\")),\n        new WildcardQuery(new Term(field, \"**1\")),\n        new WildcardQuery(new Term(field, \"*?\")),\n        new WildcardQuery(new Term(field, \"*?1\")),\n        new WildcardQuery(new Term(field, \"?*1\")),\n        new WildcardQuery(new Term(field, \"**\")),\n        new WildcardQuery(new Term(field, \"***\")),\n        new WildcardQuery(new Term(field, \"\\\\\\\\*\"))\n    };\n\n    // queries that should find no docs\n    Query matchNone[] = {\n        new WildcardQuery(new Term(field, \"a*h\")),\n        new WildcardQuery(new Term(field, \"a?h\")),\n        new WildcardQuery(new Term(field, \"*a*h\")),\n        new WildcardQuery(new Term(field, \"?a\")),\n        new WildcardQuery(new Term(field, \"a?\"))\n    };\n\n    PrefixQuery matchOneDocPrefix[][] = {\n        {new PrefixQuery(new Term(field, \"a\")),\n         new PrefixQuery(new Term(field, \"ab\")),\n         new PrefixQuery(new Term(field, \"abc\"))}, // these should find only doc 0\n\n        {new PrefixQuery(new Term(field, \"h\")),\n         new PrefixQuery(new Term(field, \"hi\")),\n         new PrefixQuery(new Term(field, \"hij\")),\n         new PrefixQuery(new Term(field, \"\\\\7\"))}, // these should find only doc 1\n\n        {new PrefixQuery(new Term(field, \"o\")),\n         new PrefixQuery(new Term(field, \"op\")),\n         new PrefixQuery(new Term(field, \"opq\")),\n         new PrefixQuery(new Term(field, \"\\\\\\\\\"))}, // these should find only doc 2\n    };\n\n    WildcardQuery matchOneDocWild[][] = {\n\n        {new WildcardQuery(new Term(field, \"*a*\")), // these should find only doc 0\n            new WildcardQuery(new Term(field, \"*ab*\")),\n            new WildcardQuery(new Term(field, \"*abc**\")),\n            new WildcardQuery(new Term(field, \"ab*e*\")),\n            new WildcardQuery(new Term(field, \"*g?\")),\n            new WildcardQuery(new Term(field, \"*f?1\"))},\n\n        {new WildcardQuery(new Term(field, \"*h*\")), // these should find only doc 1\n            new WildcardQuery(new Term(field, \"*hi*\")),\n            new WildcardQuery(new Term(field, \"*hij**\")),\n            new WildcardQuery(new Term(field, \"hi*k*\")),\n            new WildcardQuery(new Term(field, \"*n?\")),\n            new WildcardQuery(new Term(field, \"*m?1\")),\n            new WildcardQuery(new Term(field, \"hij**\"))},\n\n        {new WildcardQuery(new Term(field, \"*o*\")), // these should find only doc 2\n            new WildcardQuery(new Term(field, \"*op*\")),\n            new WildcardQuery(new Term(field, \"*opq**\")),\n            new WildcardQuery(new Term(field, \"op*q*\")),\n            new WildcardQuery(new Term(field, \"*u?\")),\n            new WildcardQuery(new Term(field, \"*t?1\")),\n            new WildcardQuery(new Term(field, \"opq**\"))}\n    };\n\n    // prepare the index\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMergePolicy(newLogMergePolicy()));\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(newField(field,docs[i],Store.NO,Index.ANALYZED));\n      iw.addDocument(doc);\n    }\n    iw.close();\n    \n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    \n    // test queries that must find all\n    for (Query q : matchAll) {\n      if (VERBOSE) System.out.println(\"matchAll: q=\" + q + \" \" + q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(docs.length, hits.length);\n    }\n    \n    // test queries that must find none\n    for (Query q : matchNone) {\n      if (VERBOSE) System.out.println(\"matchNone: q=\" + q + \" \" + q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(0, hits.length);\n    }\n\n    // thest the prefi queries find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocPrefix[i].length; j++) {\n        Query q = matchOneDocPrefix[i][j];\n        if (VERBOSE) System.out.println(\"match 1 prefix: doc=\"+docs[i]+\" q=\"+q+\" \"+q.getClass().getName());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    // test the wildcard queries find only one doc\n    for (int i = 0; i < matchOneDocWild.length; i++) {\n      for (int j = 0; j < matchOneDocWild[i].length; j++) {\n        Query q = matchOneDocWild[i][j];\n        if (VERBOSE) System.out.println(\"match 1 wild: doc=\"+docs[i]+\" q=\"+q+\" \"+q.getClass().getName());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    searcher.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a3a0403b45dfe384fae4a1b6e96c3265d000c498","date":1321445981,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestWildcard#testParsingAndSearching().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestWildcard#testParsingAndSearching().mjava","sourceNew":"  /**\n   * Test that wild card queries are parsed to the correct type and are searched correctly.\n   * This test looks at both parsing and execution of wildcard queries.\n   * Although placed here, it also tests prefix queries, verifying that\n   * prefix queries are not parsed into wild card queries, and viceversa.\n   * @throws Exception\n   */\n  public void testParsingAndSearching() throws Exception {\n    String field = \"content\";\n    String docs[] = {\n        \"\\\\ abcdefg1\",\n        \"\\\\79 hijklmn1\",\n        \"\\\\\\\\ opqrstu1\",\n    };\n\n    // queries that should find all docs\n    Query matchAll[] = {\n        new WildcardQuery(new Term(field, \"*\")),\n        new WildcardQuery(new Term(field, \"*1\")),\n        new WildcardQuery(new Term(field, \"**1\")),\n        new WildcardQuery(new Term(field, \"*?\")),\n        new WildcardQuery(new Term(field, \"*?1\")),\n        new WildcardQuery(new Term(field, \"?*1\")),\n        new WildcardQuery(new Term(field, \"**\")),\n        new WildcardQuery(new Term(field, \"***\")),\n        new WildcardQuery(new Term(field, \"\\\\\\\\*\"))\n    };\n\n    // queries that should find no docs\n    Query matchNone[] = {\n        new WildcardQuery(new Term(field, \"a*h\")),\n        new WildcardQuery(new Term(field, \"a?h\")),\n        new WildcardQuery(new Term(field, \"*a*h\")),\n        new WildcardQuery(new Term(field, \"?a\")),\n        new WildcardQuery(new Term(field, \"a?\"))\n    };\n\n    PrefixQuery matchOneDocPrefix[][] = {\n        {new PrefixQuery(new Term(field, \"a\")),\n         new PrefixQuery(new Term(field, \"ab\")),\n         new PrefixQuery(new Term(field, \"abc\"))}, // these should find only doc 0\n\n        {new PrefixQuery(new Term(field, \"h\")),\n         new PrefixQuery(new Term(field, \"hi\")),\n         new PrefixQuery(new Term(field, \"hij\")),\n         new PrefixQuery(new Term(field, \"\\\\7\"))}, // these should find only doc 1\n\n        {new PrefixQuery(new Term(field, \"o\")),\n         new PrefixQuery(new Term(field, \"op\")),\n         new PrefixQuery(new Term(field, \"opq\")),\n         new PrefixQuery(new Term(field, \"\\\\\\\\\"))}, // these should find only doc 2\n    };\n\n    WildcardQuery matchOneDocWild[][] = {\n\n        {new WildcardQuery(new Term(field, \"*a*\")), // these should find only doc 0\n            new WildcardQuery(new Term(field, \"*ab*\")),\n            new WildcardQuery(new Term(field, \"*abc**\")),\n            new WildcardQuery(new Term(field, \"ab*e*\")),\n            new WildcardQuery(new Term(field, \"*g?\")),\n            new WildcardQuery(new Term(field, \"*f?1\"))},\n\n        {new WildcardQuery(new Term(field, \"*h*\")), // these should find only doc 1\n            new WildcardQuery(new Term(field, \"*hi*\")),\n            new WildcardQuery(new Term(field, \"*hij**\")),\n            new WildcardQuery(new Term(field, \"hi*k*\")),\n            new WildcardQuery(new Term(field, \"*n?\")),\n            new WildcardQuery(new Term(field, \"*m?1\")),\n            new WildcardQuery(new Term(field, \"hij**\"))},\n\n        {new WildcardQuery(new Term(field, \"*o*\")), // these should find only doc 2\n            new WildcardQuery(new Term(field, \"*op*\")),\n            new WildcardQuery(new Term(field, \"*opq**\")),\n            new WildcardQuery(new Term(field, \"op*q*\")),\n            new WildcardQuery(new Term(field, \"*u?\")),\n            new WildcardQuery(new Term(field, \"*t?1\")),\n            new WildcardQuery(new Term(field, \"opq**\"))}\n    };\n\n    // prepare the index\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMergePolicy(newLogMergePolicy()));\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(newField(field,docs[i],TextField.TYPE_UNSTORED));\n      iw.addDocument(doc);\n    }\n    iw.close();\n    \n    IndexReader reader = IndexReader.open(dir);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    \n    // test queries that must find all\n    for (Query q : matchAll) {\n      if (VERBOSE) System.out.println(\"matchAll: q=\" + q + \" \" + q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(docs.length, hits.length);\n    }\n    \n    // test queries that must find none\n    for (Query q : matchNone) {\n      if (VERBOSE) System.out.println(\"matchNone: q=\" + q + \" \" + q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(0, hits.length);\n    }\n\n    // thest the prefi queries find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocPrefix[i].length; j++) {\n        Query q = matchOneDocPrefix[i][j];\n        if (VERBOSE) System.out.println(\"match 1 prefix: doc=\"+docs[i]+\" q=\"+q+\" \"+q.getClass().getName());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    // test the wildcard queries find only one doc\n    for (int i = 0; i < matchOneDocWild.length; i++) {\n      for (int j = 0; j < matchOneDocWild[i].length; j++) {\n        Query q = matchOneDocWild[i][j];\n        if (VERBOSE) System.out.println(\"match 1 wild: doc=\"+docs[i]+\" q=\"+q+\" \"+q.getClass().getName());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    searcher.close();\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  /**\n   * Test that wild card queries are parsed to the correct type and are searched correctly.\n   * This test looks at both parsing and execution of wildcard queries.\n   * Although placed here, it also tests prefix queries, verifying that\n   * prefix queries are not parsed into wild card queries, and viceversa.\n   * @throws Exception\n   */\n  public void testParsingAndSearching() throws Exception {\n    String field = \"content\";\n    String docs[] = {\n        \"\\\\ abcdefg1\",\n        \"\\\\79 hijklmn1\",\n        \"\\\\\\\\ opqrstu1\",\n    };\n\n    // queries that should find all docs\n    Query matchAll[] = {\n        new WildcardQuery(new Term(field, \"*\")),\n        new WildcardQuery(new Term(field, \"*1\")),\n        new WildcardQuery(new Term(field, \"**1\")),\n        new WildcardQuery(new Term(field, \"*?\")),\n        new WildcardQuery(new Term(field, \"*?1\")),\n        new WildcardQuery(new Term(field, \"?*1\")),\n        new WildcardQuery(new Term(field, \"**\")),\n        new WildcardQuery(new Term(field, \"***\")),\n        new WildcardQuery(new Term(field, \"\\\\\\\\*\"))\n    };\n\n    // queries that should find no docs\n    Query matchNone[] = {\n        new WildcardQuery(new Term(field, \"a*h\")),\n        new WildcardQuery(new Term(field, \"a?h\")),\n        new WildcardQuery(new Term(field, \"*a*h\")),\n        new WildcardQuery(new Term(field, \"?a\")),\n        new WildcardQuery(new Term(field, \"a?\"))\n    };\n\n    PrefixQuery matchOneDocPrefix[][] = {\n        {new PrefixQuery(new Term(field, \"a\")),\n         new PrefixQuery(new Term(field, \"ab\")),\n         new PrefixQuery(new Term(field, \"abc\"))}, // these should find only doc 0\n\n        {new PrefixQuery(new Term(field, \"h\")),\n         new PrefixQuery(new Term(field, \"hi\")),\n         new PrefixQuery(new Term(field, \"hij\")),\n         new PrefixQuery(new Term(field, \"\\\\7\"))}, // these should find only doc 1\n\n        {new PrefixQuery(new Term(field, \"o\")),\n         new PrefixQuery(new Term(field, \"op\")),\n         new PrefixQuery(new Term(field, \"opq\")),\n         new PrefixQuery(new Term(field, \"\\\\\\\\\"))}, // these should find only doc 2\n    };\n\n    WildcardQuery matchOneDocWild[][] = {\n\n        {new WildcardQuery(new Term(field, \"*a*\")), // these should find only doc 0\n            new WildcardQuery(new Term(field, \"*ab*\")),\n            new WildcardQuery(new Term(field, \"*abc**\")),\n            new WildcardQuery(new Term(field, \"ab*e*\")),\n            new WildcardQuery(new Term(field, \"*g?\")),\n            new WildcardQuery(new Term(field, \"*f?1\"))},\n\n        {new WildcardQuery(new Term(field, \"*h*\")), // these should find only doc 1\n            new WildcardQuery(new Term(field, \"*hi*\")),\n            new WildcardQuery(new Term(field, \"*hij**\")),\n            new WildcardQuery(new Term(field, \"hi*k*\")),\n            new WildcardQuery(new Term(field, \"*n?\")),\n            new WildcardQuery(new Term(field, \"*m?1\")),\n            new WildcardQuery(new Term(field, \"hij**\"))},\n\n        {new WildcardQuery(new Term(field, \"*o*\")), // these should find only doc 2\n            new WildcardQuery(new Term(field, \"*op*\")),\n            new WildcardQuery(new Term(field, \"*opq**\")),\n            new WildcardQuery(new Term(field, \"op*q*\")),\n            new WildcardQuery(new Term(field, \"*u?\")),\n            new WildcardQuery(new Term(field, \"*t?1\")),\n            new WildcardQuery(new Term(field, \"opq**\"))}\n    };\n\n    // prepare the index\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMergePolicy(newLogMergePolicy()));\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(newField(field,docs[i],TextField.TYPE_UNSTORED));\n      iw.addDocument(doc);\n    }\n    iw.close();\n    \n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    \n    // test queries that must find all\n    for (Query q : matchAll) {\n      if (VERBOSE) System.out.println(\"matchAll: q=\" + q + \" \" + q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(docs.length, hits.length);\n    }\n    \n    // test queries that must find none\n    for (Query q : matchNone) {\n      if (VERBOSE) System.out.println(\"matchNone: q=\" + q + \" \" + q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(0, hits.length);\n    }\n\n    // thest the prefi queries find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocPrefix[i].length; j++) {\n        Query q = matchOneDocPrefix[i][j];\n        if (VERBOSE) System.out.println(\"match 1 prefix: doc=\"+docs[i]+\" q=\"+q+\" \"+q.getClass().getName());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    // test the wildcard queries find only one doc\n    for (int i = 0; i < matchOneDocWild.length; i++) {\n      for (int j = 0; j < matchOneDocWild[i].length; j++) {\n        Query q = matchOneDocWild[i][j];\n        if (VERBOSE) System.out.println(\"match 1 wild: doc=\"+docs[i]+\" q=\"+q+\" \"+q.getClass().getName());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    searcher.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0e7c2454a6a8237bfd0e953f5b940838408c9055","date":1323649300,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestWildcard#testParsingAndSearching().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestWildcard#testParsingAndSearching().mjava","sourceNew":"  /**\n   * Test that wild card queries are parsed to the correct type and are searched correctly.\n   * This test looks at both parsing and execution of wildcard queries.\n   * Although placed here, it also tests prefix queries, verifying that\n   * prefix queries are not parsed into wild card queries, and viceversa.\n   * @throws Exception\n   */\n  public void testParsingAndSearching() throws Exception {\n    String field = \"content\";\n    String docs[] = {\n        \"\\\\ abcdefg1\",\n        \"\\\\79 hijklmn1\",\n        \"\\\\\\\\ opqrstu1\",\n    };\n\n    // queries that should find all docs\n    Query matchAll[] = {\n        new WildcardQuery(new Term(field, \"*\")),\n        new WildcardQuery(new Term(field, \"*1\")),\n        new WildcardQuery(new Term(field, \"**1\")),\n        new WildcardQuery(new Term(field, \"*?\")),\n        new WildcardQuery(new Term(field, \"*?1\")),\n        new WildcardQuery(new Term(field, \"?*1\")),\n        new WildcardQuery(new Term(field, \"**\")),\n        new WildcardQuery(new Term(field, \"***\")),\n        new WildcardQuery(new Term(field, \"\\\\\\\\*\"))\n    };\n\n    // queries that should find no docs\n    Query matchNone[] = {\n        new WildcardQuery(new Term(field, \"a*h\")),\n        new WildcardQuery(new Term(field, \"a?h\")),\n        new WildcardQuery(new Term(field, \"*a*h\")),\n        new WildcardQuery(new Term(field, \"?a\")),\n        new WildcardQuery(new Term(field, \"a?\"))\n    };\n\n    PrefixQuery matchOneDocPrefix[][] = {\n        {new PrefixQuery(new Term(field, \"a\")),\n         new PrefixQuery(new Term(field, \"ab\")),\n         new PrefixQuery(new Term(field, \"abc\"))}, // these should find only doc 0\n\n        {new PrefixQuery(new Term(field, \"h\")),\n         new PrefixQuery(new Term(field, \"hi\")),\n         new PrefixQuery(new Term(field, \"hij\")),\n         new PrefixQuery(new Term(field, \"\\\\7\"))}, // these should find only doc 1\n\n        {new PrefixQuery(new Term(field, \"o\")),\n         new PrefixQuery(new Term(field, \"op\")),\n         new PrefixQuery(new Term(field, \"opq\")),\n         new PrefixQuery(new Term(field, \"\\\\\\\\\"))}, // these should find only doc 2\n    };\n\n    WildcardQuery matchOneDocWild[][] = {\n\n        {new WildcardQuery(new Term(field, \"*a*\")), // these should find only doc 0\n            new WildcardQuery(new Term(field, \"*ab*\")),\n            new WildcardQuery(new Term(field, \"*abc**\")),\n            new WildcardQuery(new Term(field, \"ab*e*\")),\n            new WildcardQuery(new Term(field, \"*g?\")),\n            new WildcardQuery(new Term(field, \"*f?1\"))},\n\n        {new WildcardQuery(new Term(field, \"*h*\")), // these should find only doc 1\n            new WildcardQuery(new Term(field, \"*hi*\")),\n            new WildcardQuery(new Term(field, \"*hij**\")),\n            new WildcardQuery(new Term(field, \"hi*k*\")),\n            new WildcardQuery(new Term(field, \"*n?\")),\n            new WildcardQuery(new Term(field, \"*m?1\")),\n            new WildcardQuery(new Term(field, \"hij**\"))},\n\n        {new WildcardQuery(new Term(field, \"*o*\")), // these should find only doc 2\n            new WildcardQuery(new Term(field, \"*op*\")),\n            new WildcardQuery(new Term(field, \"*opq**\")),\n            new WildcardQuery(new Term(field, \"op*q*\")),\n            new WildcardQuery(new Term(field, \"*u?\")),\n            new WildcardQuery(new Term(field, \"*t?1\")),\n            new WildcardQuery(new Term(field, \"opq**\"))}\n    };\n\n    // prepare the index\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMergePolicy(newLogMergePolicy()));\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(newField(field,docs[i],TextField.TYPE_UNSTORED));\n      iw.addDocument(doc);\n    }\n    iw.close();\n    \n    IndexReader reader = IndexReader.open(dir);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    \n    // test queries that must find all\n    for (Query q : matchAll) {\n      if (VERBOSE) System.out.println(\"matchAll: q=\" + q + \" \" + q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(docs.length, hits.length);\n    }\n    \n    // test queries that must find none\n    for (Query q : matchNone) {\n      if (VERBOSE) System.out.println(\"matchNone: q=\" + q + \" \" + q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(0, hits.length);\n    }\n\n    // thest the prefi queries find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocPrefix[i].length; j++) {\n        Query q = matchOneDocPrefix[i][j];\n        if (VERBOSE) System.out.println(\"match 1 prefix: doc=\"+docs[i]+\" q=\"+q+\" \"+q.getClass().getName());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    // test the wildcard queries find only one doc\n    for (int i = 0; i < matchOneDocWild.length; i++) {\n      for (int j = 0; j < matchOneDocWild[i].length; j++) {\n        Query q = matchOneDocWild[i][j];\n        if (VERBOSE) System.out.println(\"match 1 wild: doc=\"+docs[i]+\" q=\"+q+\" \"+q.getClass().getName());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  /**\n   * Test that wild card queries are parsed to the correct type and are searched correctly.\n   * This test looks at both parsing and execution of wildcard queries.\n   * Although placed here, it also tests prefix queries, verifying that\n   * prefix queries are not parsed into wild card queries, and viceversa.\n   * @throws Exception\n   */\n  public void testParsingAndSearching() throws Exception {\n    String field = \"content\";\n    String docs[] = {\n        \"\\\\ abcdefg1\",\n        \"\\\\79 hijklmn1\",\n        \"\\\\\\\\ opqrstu1\",\n    };\n\n    // queries that should find all docs\n    Query matchAll[] = {\n        new WildcardQuery(new Term(field, \"*\")),\n        new WildcardQuery(new Term(field, \"*1\")),\n        new WildcardQuery(new Term(field, \"**1\")),\n        new WildcardQuery(new Term(field, \"*?\")),\n        new WildcardQuery(new Term(field, \"*?1\")),\n        new WildcardQuery(new Term(field, \"?*1\")),\n        new WildcardQuery(new Term(field, \"**\")),\n        new WildcardQuery(new Term(field, \"***\")),\n        new WildcardQuery(new Term(field, \"\\\\\\\\*\"))\n    };\n\n    // queries that should find no docs\n    Query matchNone[] = {\n        new WildcardQuery(new Term(field, \"a*h\")),\n        new WildcardQuery(new Term(field, \"a?h\")),\n        new WildcardQuery(new Term(field, \"*a*h\")),\n        new WildcardQuery(new Term(field, \"?a\")),\n        new WildcardQuery(new Term(field, \"a?\"))\n    };\n\n    PrefixQuery matchOneDocPrefix[][] = {\n        {new PrefixQuery(new Term(field, \"a\")),\n         new PrefixQuery(new Term(field, \"ab\")),\n         new PrefixQuery(new Term(field, \"abc\"))}, // these should find only doc 0\n\n        {new PrefixQuery(new Term(field, \"h\")),\n         new PrefixQuery(new Term(field, \"hi\")),\n         new PrefixQuery(new Term(field, \"hij\")),\n         new PrefixQuery(new Term(field, \"\\\\7\"))}, // these should find only doc 1\n\n        {new PrefixQuery(new Term(field, \"o\")),\n         new PrefixQuery(new Term(field, \"op\")),\n         new PrefixQuery(new Term(field, \"opq\")),\n         new PrefixQuery(new Term(field, \"\\\\\\\\\"))}, // these should find only doc 2\n    };\n\n    WildcardQuery matchOneDocWild[][] = {\n\n        {new WildcardQuery(new Term(field, \"*a*\")), // these should find only doc 0\n            new WildcardQuery(new Term(field, \"*ab*\")),\n            new WildcardQuery(new Term(field, \"*abc**\")),\n            new WildcardQuery(new Term(field, \"ab*e*\")),\n            new WildcardQuery(new Term(field, \"*g?\")),\n            new WildcardQuery(new Term(field, \"*f?1\"))},\n\n        {new WildcardQuery(new Term(field, \"*h*\")), // these should find only doc 1\n            new WildcardQuery(new Term(field, \"*hi*\")),\n            new WildcardQuery(new Term(field, \"*hij**\")),\n            new WildcardQuery(new Term(field, \"hi*k*\")),\n            new WildcardQuery(new Term(field, \"*n?\")),\n            new WildcardQuery(new Term(field, \"*m?1\")),\n            new WildcardQuery(new Term(field, \"hij**\"))},\n\n        {new WildcardQuery(new Term(field, \"*o*\")), // these should find only doc 2\n            new WildcardQuery(new Term(field, \"*op*\")),\n            new WildcardQuery(new Term(field, \"*opq**\")),\n            new WildcardQuery(new Term(field, \"op*q*\")),\n            new WildcardQuery(new Term(field, \"*u?\")),\n            new WildcardQuery(new Term(field, \"*t?1\")),\n            new WildcardQuery(new Term(field, \"opq**\"))}\n    };\n\n    // prepare the index\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMergePolicy(newLogMergePolicy()));\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(newField(field,docs[i],TextField.TYPE_UNSTORED));\n      iw.addDocument(doc);\n    }\n    iw.close();\n    \n    IndexReader reader = IndexReader.open(dir);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    \n    // test queries that must find all\n    for (Query q : matchAll) {\n      if (VERBOSE) System.out.println(\"matchAll: q=\" + q + \" \" + q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(docs.length, hits.length);\n    }\n    \n    // test queries that must find none\n    for (Query q : matchNone) {\n      if (VERBOSE) System.out.println(\"matchNone: q=\" + q + \" \" + q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(0, hits.length);\n    }\n\n    // thest the prefi queries find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocPrefix[i].length; j++) {\n        Query q = matchOneDocPrefix[i][j];\n        if (VERBOSE) System.out.println(\"match 1 prefix: doc=\"+docs[i]+\" q=\"+q+\" \"+q.getClass().getName());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    // test the wildcard queries find only one doc\n    for (int i = 0; i < matchOneDocWild.length; i++) {\n      for (int j = 0; j < matchOneDocWild[i].length; j++) {\n        Query q = matchOneDocWild[i][j];\n        if (VERBOSE) System.out.println(\"match 1 wild: doc=\"+docs[i]+\" q=\"+q+\" \"+q.getClass().getName());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    searcher.close();\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","date":1323720782,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestWildcard#testParsingAndSearching().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestWildcard#testParsingAndSearching().mjava","sourceNew":"  /**\n   * Test that wild card queries are parsed to the correct type and are searched correctly.\n   * This test looks at both parsing and execution of wildcard queries.\n   * Although placed here, it also tests prefix queries, verifying that\n   * prefix queries are not parsed into wild card queries, and viceversa.\n   * @throws Exception\n   */\n  public void testParsingAndSearching() throws Exception {\n    String field = \"content\";\n    String docs[] = {\n        \"\\\\ abcdefg1\",\n        \"\\\\79 hijklmn1\",\n        \"\\\\\\\\ opqrstu1\",\n    };\n\n    // queries that should find all docs\n    Query matchAll[] = {\n        new WildcardQuery(new Term(field, \"*\")),\n        new WildcardQuery(new Term(field, \"*1\")),\n        new WildcardQuery(new Term(field, \"**1\")),\n        new WildcardQuery(new Term(field, \"*?\")),\n        new WildcardQuery(new Term(field, \"*?1\")),\n        new WildcardQuery(new Term(field, \"?*1\")),\n        new WildcardQuery(new Term(field, \"**\")),\n        new WildcardQuery(new Term(field, \"***\")),\n        new WildcardQuery(new Term(field, \"\\\\\\\\*\"))\n    };\n\n    // queries that should find no docs\n    Query matchNone[] = {\n        new WildcardQuery(new Term(field, \"a*h\")),\n        new WildcardQuery(new Term(field, \"a?h\")),\n        new WildcardQuery(new Term(field, \"*a*h\")),\n        new WildcardQuery(new Term(field, \"?a\")),\n        new WildcardQuery(new Term(field, \"a?\"))\n    };\n\n    PrefixQuery matchOneDocPrefix[][] = {\n        {new PrefixQuery(new Term(field, \"a\")),\n         new PrefixQuery(new Term(field, \"ab\")),\n         new PrefixQuery(new Term(field, \"abc\"))}, // these should find only doc 0\n\n        {new PrefixQuery(new Term(field, \"h\")),\n         new PrefixQuery(new Term(field, \"hi\")),\n         new PrefixQuery(new Term(field, \"hij\")),\n         new PrefixQuery(new Term(field, \"\\\\7\"))}, // these should find only doc 1\n\n        {new PrefixQuery(new Term(field, \"o\")),\n         new PrefixQuery(new Term(field, \"op\")),\n         new PrefixQuery(new Term(field, \"opq\")),\n         new PrefixQuery(new Term(field, \"\\\\\\\\\"))}, // these should find only doc 2\n    };\n\n    WildcardQuery matchOneDocWild[][] = {\n\n        {new WildcardQuery(new Term(field, \"*a*\")), // these should find only doc 0\n            new WildcardQuery(new Term(field, \"*ab*\")),\n            new WildcardQuery(new Term(field, \"*abc**\")),\n            new WildcardQuery(new Term(field, \"ab*e*\")),\n            new WildcardQuery(new Term(field, \"*g?\")),\n            new WildcardQuery(new Term(field, \"*f?1\"))},\n\n        {new WildcardQuery(new Term(field, \"*h*\")), // these should find only doc 1\n            new WildcardQuery(new Term(field, \"*hi*\")),\n            new WildcardQuery(new Term(field, \"*hij**\")),\n            new WildcardQuery(new Term(field, \"hi*k*\")),\n            new WildcardQuery(new Term(field, \"*n?\")),\n            new WildcardQuery(new Term(field, \"*m?1\")),\n            new WildcardQuery(new Term(field, \"hij**\"))},\n\n        {new WildcardQuery(new Term(field, \"*o*\")), // these should find only doc 2\n            new WildcardQuery(new Term(field, \"*op*\")),\n            new WildcardQuery(new Term(field, \"*opq**\")),\n            new WildcardQuery(new Term(field, \"op*q*\")),\n            new WildcardQuery(new Term(field, \"*u?\")),\n            new WildcardQuery(new Term(field, \"*t?1\")),\n            new WildcardQuery(new Term(field, \"opq**\"))}\n    };\n\n    // prepare the index\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMergePolicy(newLogMergePolicy()));\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(newField(field,docs[i],TextField.TYPE_UNSTORED));\n      iw.addDocument(doc);\n    }\n    iw.close();\n    \n    IndexReader reader = IndexReader.open(dir);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    \n    // test queries that must find all\n    for (Query q : matchAll) {\n      if (VERBOSE) System.out.println(\"matchAll: q=\" + q + \" \" + q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(docs.length, hits.length);\n    }\n    \n    // test queries that must find none\n    for (Query q : matchNone) {\n      if (VERBOSE) System.out.println(\"matchNone: q=\" + q + \" \" + q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(0, hits.length);\n    }\n\n    // thest the prefi queries find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocPrefix[i].length; j++) {\n        Query q = matchOneDocPrefix[i][j];\n        if (VERBOSE) System.out.println(\"match 1 prefix: doc=\"+docs[i]+\" q=\"+q+\" \"+q.getClass().getName());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    // test the wildcard queries find only one doc\n    for (int i = 0; i < matchOneDocWild.length; i++) {\n      for (int j = 0; j < matchOneDocWild[i].length; j++) {\n        Query q = matchOneDocWild[i][j];\n        if (VERBOSE) System.out.println(\"match 1 wild: doc=\"+docs[i]+\" q=\"+q+\" \"+q.getClass().getName());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  /**\n   * Test that wild card queries are parsed to the correct type and are searched correctly.\n   * This test looks at both parsing and execution of wildcard queries.\n   * Although placed here, it also tests prefix queries, verifying that\n   * prefix queries are not parsed into wild card queries, and viceversa.\n   * @throws Exception\n   */\n  public void testParsingAndSearching() throws Exception {\n    String field = \"content\";\n    String docs[] = {\n        \"\\\\ abcdefg1\",\n        \"\\\\79 hijklmn1\",\n        \"\\\\\\\\ opqrstu1\",\n    };\n\n    // queries that should find all docs\n    Query matchAll[] = {\n        new WildcardQuery(new Term(field, \"*\")),\n        new WildcardQuery(new Term(field, \"*1\")),\n        new WildcardQuery(new Term(field, \"**1\")),\n        new WildcardQuery(new Term(field, \"*?\")),\n        new WildcardQuery(new Term(field, \"*?1\")),\n        new WildcardQuery(new Term(field, \"?*1\")),\n        new WildcardQuery(new Term(field, \"**\")),\n        new WildcardQuery(new Term(field, \"***\")),\n        new WildcardQuery(new Term(field, \"\\\\\\\\*\"))\n    };\n\n    // queries that should find no docs\n    Query matchNone[] = {\n        new WildcardQuery(new Term(field, \"a*h\")),\n        new WildcardQuery(new Term(field, \"a?h\")),\n        new WildcardQuery(new Term(field, \"*a*h\")),\n        new WildcardQuery(new Term(field, \"?a\")),\n        new WildcardQuery(new Term(field, \"a?\"))\n    };\n\n    PrefixQuery matchOneDocPrefix[][] = {\n        {new PrefixQuery(new Term(field, \"a\")),\n         new PrefixQuery(new Term(field, \"ab\")),\n         new PrefixQuery(new Term(field, \"abc\"))}, // these should find only doc 0\n\n        {new PrefixQuery(new Term(field, \"h\")),\n         new PrefixQuery(new Term(field, \"hi\")),\n         new PrefixQuery(new Term(field, \"hij\")),\n         new PrefixQuery(new Term(field, \"\\\\7\"))}, // these should find only doc 1\n\n        {new PrefixQuery(new Term(field, \"o\")),\n         new PrefixQuery(new Term(field, \"op\")),\n         new PrefixQuery(new Term(field, \"opq\")),\n         new PrefixQuery(new Term(field, \"\\\\\\\\\"))}, // these should find only doc 2\n    };\n\n    WildcardQuery matchOneDocWild[][] = {\n\n        {new WildcardQuery(new Term(field, \"*a*\")), // these should find only doc 0\n            new WildcardQuery(new Term(field, \"*ab*\")),\n            new WildcardQuery(new Term(field, \"*abc**\")),\n            new WildcardQuery(new Term(field, \"ab*e*\")),\n            new WildcardQuery(new Term(field, \"*g?\")),\n            new WildcardQuery(new Term(field, \"*f?1\"))},\n\n        {new WildcardQuery(new Term(field, \"*h*\")), // these should find only doc 1\n            new WildcardQuery(new Term(field, \"*hi*\")),\n            new WildcardQuery(new Term(field, \"*hij**\")),\n            new WildcardQuery(new Term(field, \"hi*k*\")),\n            new WildcardQuery(new Term(field, \"*n?\")),\n            new WildcardQuery(new Term(field, \"*m?1\")),\n            new WildcardQuery(new Term(field, \"hij**\"))},\n\n        {new WildcardQuery(new Term(field, \"*o*\")), // these should find only doc 2\n            new WildcardQuery(new Term(field, \"*op*\")),\n            new WildcardQuery(new Term(field, \"*opq**\")),\n            new WildcardQuery(new Term(field, \"op*q*\")),\n            new WildcardQuery(new Term(field, \"*u?\")),\n            new WildcardQuery(new Term(field, \"*t?1\")),\n            new WildcardQuery(new Term(field, \"opq**\"))}\n    };\n\n    // prepare the index\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMergePolicy(newLogMergePolicy()));\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(newField(field,docs[i],TextField.TYPE_UNSTORED));\n      iw.addDocument(doc);\n    }\n    iw.close();\n    \n    IndexReader reader = IndexReader.open(dir);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    \n    // test queries that must find all\n    for (Query q : matchAll) {\n      if (VERBOSE) System.out.println(\"matchAll: q=\" + q + \" \" + q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(docs.length, hits.length);\n    }\n    \n    // test queries that must find none\n    for (Query q : matchNone) {\n      if (VERBOSE) System.out.println(\"matchNone: q=\" + q + \" \" + q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(0, hits.length);\n    }\n\n    // thest the prefi queries find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocPrefix[i].length; j++) {\n        Query q = matchOneDocPrefix[i][j];\n        if (VERBOSE) System.out.println(\"match 1 prefix: doc=\"+docs[i]+\" q=\"+q+\" \"+q.getClass().getName());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    // test the wildcard queries find only one doc\n    for (int i = 0; i < matchOneDocWild.length; i++) {\n      for (int j = 0; j < matchOneDocWild[i].length; j++) {\n        Query q = matchOneDocWild[i][j];\n        if (VERBOSE) System.out.println(\"match 1 wild: doc=\"+docs[i]+\" q=\"+q+\" \"+q.getClass().getName());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    searcher.close();\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestWildcard#testParsingAndSearching().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestWildcard#testParsingAndSearching().mjava","sourceNew":"  /**\n   * Test that wild card queries are parsed to the correct type and are searched correctly.\n   * This test looks at both parsing and execution of wildcard queries.\n   * Although placed here, it also tests prefix queries, verifying that\n   * prefix queries are not parsed into wild card queries, and viceversa.\n   * @throws Exception\n   */\n  public void testParsingAndSearching() throws Exception {\n    String field = \"content\";\n    String docs[] = {\n        \"\\\\ abcdefg1\",\n        \"\\\\79 hijklmn1\",\n        \"\\\\\\\\ opqrstu1\",\n    };\n\n    // queries that should find all docs\n    Query matchAll[] = {\n        new WildcardQuery(new Term(field, \"*\")),\n        new WildcardQuery(new Term(field, \"*1\")),\n        new WildcardQuery(new Term(field, \"**1\")),\n        new WildcardQuery(new Term(field, \"*?\")),\n        new WildcardQuery(new Term(field, \"*?1\")),\n        new WildcardQuery(new Term(field, \"?*1\")),\n        new WildcardQuery(new Term(field, \"**\")),\n        new WildcardQuery(new Term(field, \"***\")),\n        new WildcardQuery(new Term(field, \"\\\\\\\\*\"))\n    };\n\n    // queries that should find no docs\n    Query matchNone[] = {\n        new WildcardQuery(new Term(field, \"a*h\")),\n        new WildcardQuery(new Term(field, \"a?h\")),\n        new WildcardQuery(new Term(field, \"*a*h\")),\n        new WildcardQuery(new Term(field, \"?a\")),\n        new WildcardQuery(new Term(field, \"a?\"))\n    };\n\n    PrefixQuery matchOneDocPrefix[][] = {\n        {new PrefixQuery(new Term(field, \"a\")),\n         new PrefixQuery(new Term(field, \"ab\")),\n         new PrefixQuery(new Term(field, \"abc\"))}, // these should find only doc 0\n\n        {new PrefixQuery(new Term(field, \"h\")),\n         new PrefixQuery(new Term(field, \"hi\")),\n         new PrefixQuery(new Term(field, \"hij\")),\n         new PrefixQuery(new Term(field, \"\\\\7\"))}, // these should find only doc 1\n\n        {new PrefixQuery(new Term(field, \"o\")),\n         new PrefixQuery(new Term(field, \"op\")),\n         new PrefixQuery(new Term(field, \"opq\")),\n         new PrefixQuery(new Term(field, \"\\\\\\\\\"))}, // these should find only doc 2\n    };\n\n    WildcardQuery matchOneDocWild[][] = {\n\n        {new WildcardQuery(new Term(field, \"*a*\")), // these should find only doc 0\n            new WildcardQuery(new Term(field, \"*ab*\")),\n            new WildcardQuery(new Term(field, \"*abc**\")),\n            new WildcardQuery(new Term(field, \"ab*e*\")),\n            new WildcardQuery(new Term(field, \"*g?\")),\n            new WildcardQuery(new Term(field, \"*f?1\"))},\n\n        {new WildcardQuery(new Term(field, \"*h*\")), // these should find only doc 1\n            new WildcardQuery(new Term(field, \"*hi*\")),\n            new WildcardQuery(new Term(field, \"*hij**\")),\n            new WildcardQuery(new Term(field, \"hi*k*\")),\n            new WildcardQuery(new Term(field, \"*n?\")),\n            new WildcardQuery(new Term(field, \"*m?1\")),\n            new WildcardQuery(new Term(field, \"hij**\"))},\n\n        {new WildcardQuery(new Term(field, \"*o*\")), // these should find only doc 2\n            new WildcardQuery(new Term(field, \"*op*\")),\n            new WildcardQuery(new Term(field, \"*opq**\")),\n            new WildcardQuery(new Term(field, \"op*q*\")),\n            new WildcardQuery(new Term(field, \"*u?\")),\n            new WildcardQuery(new Term(field, \"*t?1\")),\n            new WildcardQuery(new Term(field, \"opq**\"))}\n    };\n\n    // prepare the index\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMergePolicy(newLogMergePolicy()));\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(newField(field,docs[i],TextField.TYPE_UNSTORED));\n      iw.addDocument(doc);\n    }\n    iw.close();\n    \n    IndexReader reader = IndexReader.open(dir);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    \n    // test queries that must find all\n    for (Query q : matchAll) {\n      if (VERBOSE) System.out.println(\"matchAll: q=\" + q + \" \" + q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(docs.length, hits.length);\n    }\n    \n    // test queries that must find none\n    for (Query q : matchNone) {\n      if (VERBOSE) System.out.println(\"matchNone: q=\" + q + \" \" + q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(0, hits.length);\n    }\n\n    // thest the prefi queries find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocPrefix[i].length; j++) {\n        Query q = matchOneDocPrefix[i][j];\n        if (VERBOSE) System.out.println(\"match 1 prefix: doc=\"+docs[i]+\" q=\"+q+\" \"+q.getClass().getName());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    // test the wildcard queries find only one doc\n    for (int i = 0; i < matchOneDocWild.length; i++) {\n      for (int j = 0; j < matchOneDocWild[i].length; j++) {\n        Query q = matchOneDocWild[i][j];\n        if (VERBOSE) System.out.println(\"match 1 wild: doc=\"+docs[i]+\" q=\"+q+\" \"+q.getClass().getName());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  /**\n   * Test that wild card queries are parsed to the correct type and are searched correctly.\n   * This test looks at both parsing and execution of wildcard queries.\n   * Although placed here, it also tests prefix queries, verifying that\n   * prefix queries are not parsed into wild card queries, and viceversa.\n   * @throws Exception\n   */\n  public void testParsingAndSearching() throws Exception {\n    String field = \"content\";\n    String docs[] = {\n        \"\\\\ abcdefg1\",\n        \"\\\\79 hijklmn1\",\n        \"\\\\\\\\ opqrstu1\",\n    };\n\n    // queries that should find all docs\n    Query matchAll[] = {\n        new WildcardQuery(new Term(field, \"*\")),\n        new WildcardQuery(new Term(field, \"*1\")),\n        new WildcardQuery(new Term(field, \"**1\")),\n        new WildcardQuery(new Term(field, \"*?\")),\n        new WildcardQuery(new Term(field, \"*?1\")),\n        new WildcardQuery(new Term(field, \"?*1\")),\n        new WildcardQuery(new Term(field, \"**\")),\n        new WildcardQuery(new Term(field, \"***\")),\n        new WildcardQuery(new Term(field, \"\\\\\\\\*\"))\n    };\n\n    // queries that should find no docs\n    Query matchNone[] = {\n        new WildcardQuery(new Term(field, \"a*h\")),\n        new WildcardQuery(new Term(field, \"a?h\")),\n        new WildcardQuery(new Term(field, \"*a*h\")),\n        new WildcardQuery(new Term(field, \"?a\")),\n        new WildcardQuery(new Term(field, \"a?\"))\n    };\n\n    PrefixQuery matchOneDocPrefix[][] = {\n        {new PrefixQuery(new Term(field, \"a\")),\n         new PrefixQuery(new Term(field, \"ab\")),\n         new PrefixQuery(new Term(field, \"abc\"))}, // these should find only doc 0\n\n        {new PrefixQuery(new Term(field, \"h\")),\n         new PrefixQuery(new Term(field, \"hi\")),\n         new PrefixQuery(new Term(field, \"hij\")),\n         new PrefixQuery(new Term(field, \"\\\\7\"))}, // these should find only doc 1\n\n        {new PrefixQuery(new Term(field, \"o\")),\n         new PrefixQuery(new Term(field, \"op\")),\n         new PrefixQuery(new Term(field, \"opq\")),\n         new PrefixQuery(new Term(field, \"\\\\\\\\\"))}, // these should find only doc 2\n    };\n\n    WildcardQuery matchOneDocWild[][] = {\n\n        {new WildcardQuery(new Term(field, \"*a*\")), // these should find only doc 0\n            new WildcardQuery(new Term(field, \"*ab*\")),\n            new WildcardQuery(new Term(field, \"*abc**\")),\n            new WildcardQuery(new Term(field, \"ab*e*\")),\n            new WildcardQuery(new Term(field, \"*g?\")),\n            new WildcardQuery(new Term(field, \"*f?1\"))},\n\n        {new WildcardQuery(new Term(field, \"*h*\")), // these should find only doc 1\n            new WildcardQuery(new Term(field, \"*hi*\")),\n            new WildcardQuery(new Term(field, \"*hij**\")),\n            new WildcardQuery(new Term(field, \"hi*k*\")),\n            new WildcardQuery(new Term(field, \"*n?\")),\n            new WildcardQuery(new Term(field, \"*m?1\")),\n            new WildcardQuery(new Term(field, \"hij**\"))},\n\n        {new WildcardQuery(new Term(field, \"*o*\")), // these should find only doc 2\n            new WildcardQuery(new Term(field, \"*op*\")),\n            new WildcardQuery(new Term(field, \"*opq**\")),\n            new WildcardQuery(new Term(field, \"op*q*\")),\n            new WildcardQuery(new Term(field, \"*u?\")),\n            new WildcardQuery(new Term(field, \"*t?1\")),\n            new WildcardQuery(new Term(field, \"opq**\"))}\n    };\n\n    // prepare the index\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMergePolicy(newLogMergePolicy()));\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(newField(field,docs[i],TextField.TYPE_UNSTORED));\n      iw.addDocument(doc);\n    }\n    iw.close();\n    \n    IndexReader reader = IndexReader.open(dir);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    \n    // test queries that must find all\n    for (Query q : matchAll) {\n      if (VERBOSE) System.out.println(\"matchAll: q=\" + q + \" \" + q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(docs.length, hits.length);\n    }\n    \n    // test queries that must find none\n    for (Query q : matchNone) {\n      if (VERBOSE) System.out.println(\"matchNone: q=\" + q + \" \" + q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(0, hits.length);\n    }\n\n    // thest the prefi queries find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocPrefix[i].length; j++) {\n        Query q = matchOneDocPrefix[i][j];\n        if (VERBOSE) System.out.println(\"match 1 prefix: doc=\"+docs[i]+\" q=\"+q+\" \"+q.getClass().getName());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    // test the wildcard queries find only one doc\n    for (int i = 0; i < matchOneDocWild.length; i++) {\n      for (int j = 0; j < matchOneDocWild[i].length; j++) {\n        Query q = matchOneDocWild[i][j];\n        if (VERBOSE) System.out.println(\"match 1 wild: doc=\"+docs[i]+\" q=\"+q+\" \"+q.getClass().getName());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["0e7c2454a6a8237bfd0e953f5b940838408c9055"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":["a3a0403b45dfe384fae4a1b6e96c3265d000c498","0e7c2454a6a8237bfd0e953f5b940838408c9055"],"15bbd254c1506df5299c4df8c148262c7bd6301e":["c084e47df29de3330311d69dabf515ceaa989512"],"132903c28af3aa6f67284b78de91c0f0a99488c2":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["3242a09f703274d3b9283f2064a1a33064b53a1b","132903c28af3aa6f67284b78de91c0f0a99488c2"],"01e5948db9a07144112d2f08f28ca2e3cd880348":["df64a95acf9fde66609a48f61c3bd0a41d17ad29"],"c084e47df29de3330311d69dabf515ceaa989512":["d572389229127c297dd1fa5ce4758e1cec41e799"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["01e5948db9a07144112d2f08f28ca2e3cd880348"],"0e7c2454a6a8237bfd0e953f5b940838408c9055":["a3a0403b45dfe384fae4a1b6e96c3265d000c498"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["a05409176bd65129d67a785ee70e881e238a9aef"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["132903c28af3aa6f67284b78de91c0f0a99488c2","df64a95acf9fde66609a48f61c3bd0a41d17ad29"],"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c":["4b103252dee6afa1b6d7a622c773d178788eb85a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a05409176bd65129d67a785ee70e881e238a9aef":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"a3a0403b45dfe384fae4a1b6e96c3265d000c498":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["112629f1dfd1451722c6047bcf593e6efc96f5f4"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","df64a95acf9fde66609a48f61c3bd0a41d17ad29"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3242a09f703274d3b9283f2064a1a33064b53a1b":["5f4e87790277826a2aea119328600dfb07761f32","4b103252dee6afa1b6d7a622c773d178788eb85a"],"4b103252dee6afa1b6d7a622c773d178788eb85a":["c084e47df29de3330311d69dabf515ceaa989512","15bbd254c1506df5299c4df8c148262c7bd6301e"],"df64a95acf9fde66609a48f61c3bd0a41d17ad29":["132903c28af3aa6f67284b78de91c0f0a99488c2"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["29ef99d61cda9641b6250bf9567329a6e65f901d","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"d572389229127c297dd1fa5ce4758e1cec41e799":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"5f4e87790277826a2aea119328600dfb07761f32":["d572389229127c297dd1fa5ce4758e1cec41e799","c084e47df29de3330311d69dabf515ceaa989512"],"962d04139994fce5193143ef35615499a9a96d78":["45669a651c970812a680841b97a77cce06af559f","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["f2c5f0cb44df114db4228c8f77861714b5cabaea","112629f1dfd1451722c6047bcf593e6efc96f5f4"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["a3776dccca01c11e7046323cfad46a3b4a471233","112629f1dfd1451722c6047bcf593e6efc96f5f4"],"a3776dccca01c11e7046323cfad46a3b4a471233":["df64a95acf9fde66609a48f61c3bd0a41d17ad29","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"112629f1dfd1451722c6047bcf593e6efc96f5f4":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"45669a651c970812a680841b97a77cce06af559f":["bde51b089eb7f86171eb3406e38a274743f9b7ac","01e5948db9a07144112d2f08f28ca2e3cd880348"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":[],"15bbd254c1506df5299c4df8c148262c7bd6301e":["4b103252dee6afa1b6d7a622c773d178788eb85a"],"132903c28af3aa6f67284b78de91c0f0a99488c2":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","29ef99d61cda9641b6250bf9567329a6e65f901d","df64a95acf9fde66609a48f61c3bd0a41d17ad29"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"01e5948db9a07144112d2f08f28ca2e3cd880348":["f2c5f0cb44df114db4228c8f77861714b5cabaea","45669a651c970812a680841b97a77cce06af559f"],"c084e47df29de3330311d69dabf515ceaa989512":["15bbd254c1506df5299c4df8c148262c7bd6301e","4b103252dee6afa1b6d7a622c773d178788eb85a","5f4e87790277826a2aea119328600dfb07761f32"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","d083e83f225b11e5fdd900e83d26ddb385b6955c","a3776dccca01c11e7046323cfad46a3b4a471233","112629f1dfd1451722c6047bcf593e6efc96f5f4"],"0e7c2454a6a8237bfd0e953f5b940838408c9055":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","93ccd971aca7fb61b7f1b946e44714cfc80bfc7c"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["132903c28af3aa6f67284b78de91c0f0a99488c2"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a05409176bd65129d67a785ee70e881e238a9aef":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"a3a0403b45dfe384fae4a1b6e96c3265d000c498":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","0e7c2454a6a8237bfd0e953f5b940838408c9055"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["a3a0403b45dfe384fae4a1b6e96c3265d000c498"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["45669a651c970812a680841b97a77cce06af559f"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["d572389229127c297dd1fa5ce4758e1cec41e799"],"3242a09f703274d3b9283f2064a1a33064b53a1b":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"4b103252dee6afa1b6d7a622c773d178788eb85a":["1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c","3242a09f703274d3b9283f2064a1a33064b53a1b"],"df64a95acf9fde66609a48f61c3bd0a41d17ad29":["01e5948db9a07144112d2f08f28ca2e3cd880348","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","a3776dccca01c11e7046323cfad46a3b4a471233"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["a05409176bd65129d67a785ee70e881e238a9aef"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"d572389229127c297dd1fa5ce4758e1cec41e799":["c084e47df29de3330311d69dabf515ceaa989512","5f4e87790277826a2aea119328600dfb07761f32"],"5f4e87790277826a2aea119328600dfb07761f32":["3242a09f703274d3b9283f2064a1a33064b53a1b"],"962d04139994fce5193143ef35615499a9a96d78":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"a3776dccca01c11e7046323cfad46a3b4a471233":["817d8435e9135b756f08ce6710ab0baac51bdf88"],"112629f1dfd1451722c6047bcf593e6efc96f5f4":["1509f151d7692d84fae414b2b799ac06ba60fcb4","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"45669a651c970812a680841b97a77cce06af559f":["962d04139994fce5193143ef35615499a9a96d78"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}