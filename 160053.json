{"path":"solr/core/src/test/org/apache/solr/response/SmileWriterTest#getVal(JsonNode).mjava","commits":[{"id":"fe874d5dba38e8313b2090a3d7335f4a39269336","date":1474455035,"type":0,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/response/SmileWriterTest#getVal(JsonNode).mjava","pathOld":"/dev/null","sourceNew":"  public static Object getVal(JsonNode value) {\n    if (value instanceof NullNode) {\n      return null;\n    }\n    if (value instanceof NumericNode) {\n      return ((NumericNode) value).numberValue();\n    }\n    if (value instanceof BooleanNode) {\n      ((BooleanNode) value).booleanValue();\n    }\n    if(value instanceof ObjectNode){\n      Iterator<Map.Entry<String, JsonNode>> it = ((ObjectNode)value).fields();\n      Map result = new LinkedHashMap<>();\n      while(it.hasNext()){\n        Map.Entry<String, JsonNode> e = it.next();\n        result.put(e.getKey(),getVal(e.getValue()));\n      }\n      return result;\n    }\n    if (value instanceof ArrayNode) {\n      ArrayList result =  new ArrayList();\n      Iterator<JsonNode> it = ((ArrayNode) value).elements();\n      while (it.hasNext()) {\n        result.add(getVal(it.next()));\n      }\n      return result;\n\n    }\n    if(value instanceof BinaryNode) {\n      return ((BinaryNode) value).binaryValue();\n    }\n\n    return value.textValue();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/response/SmileWriterTest#getVal(JsonNode).mjava","pathOld":"solr/core/src/test/org/apache/solr/request/SmileWriterTest#getVal(JsonNode).mjava","sourceNew":"  public static Object getVal(JsonNode value) {\n    if (value instanceof NullNode) {\n      return null;\n    }\n    if (value instanceof NumericNode) {\n      return ((NumericNode) value).numberValue();\n    }\n    if (value instanceof BooleanNode) {\n      ((BooleanNode) value).booleanValue();\n    }\n    if(value instanceof ObjectNode){\n      Iterator<Map.Entry<String, JsonNode>> it = ((ObjectNode)value).fields();\n      Map result = new LinkedHashMap<>();\n      while(it.hasNext()){\n        Map.Entry<String, JsonNode> e = it.next();\n        result.put(e.getKey(),getVal(e.getValue()));\n      }\n      return result;\n    }\n    if (value instanceof ArrayNode) {\n      ArrayList result =  new ArrayList();\n      Iterator<JsonNode> it = ((ArrayNode) value).elements();\n      while (it.hasNext()) {\n        result.add(getVal(it.next()));\n      }\n      return result;\n\n    }\n    if(value instanceof BinaryNode) {\n      return ((BinaryNode) value).binaryValue();\n    }\n\n    return value.textValue();\n  }\n\n","sourceOld":"  public static Object getVal(JsonNode value) {\n    if (value instanceof NullNode) {\n      return null;\n    }\n    if (value instanceof NumericNode) {\n      return ((NumericNode) value).numberValue();\n    }\n    if (value instanceof BooleanNode) {\n      ((BooleanNode) value).booleanValue();\n    }\n    if(value instanceof ObjectNode){\n      Iterator<Map.Entry<String, JsonNode>> it = ((ObjectNode)value).fields();\n      Map result = new LinkedHashMap<>();\n      while(it.hasNext()){\n        Map.Entry<String, JsonNode> e = it.next();\n        result.put(e.getKey(),getVal(e.getValue()));\n      }\n      return result;\n    }\n    if (value instanceof ArrayNode) {\n      ArrayList result =  new ArrayList();\n      Iterator<JsonNode> it = ((ArrayNode) value).elements();\n      while (it.hasNext()) {\n        result.add(getVal(it.next()));\n      }\n      return result;\n\n    }\n    if(value instanceof BinaryNode) {\n      return ((BinaryNode) value).binaryValue();\n    }\n\n    return value.textValue();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":1,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/response/SmileWriterTest#getVal(JsonNode).mjava","pathOld":"solr/core/src/test/org/apache/solr/request/SmileWriterTest#getVal(JsonNode).mjava","sourceNew":"  public static Object getVal(JsonNode value) {\n    if (value instanceof NullNode) {\n      return null;\n    }\n    if (value instanceof NumericNode) {\n      return ((NumericNode) value).numberValue();\n    }\n    if (value instanceof BooleanNode) {\n      ((BooleanNode) value).booleanValue();\n    }\n    if(value instanceof ObjectNode){\n      Iterator<Map.Entry<String, JsonNode>> it = ((ObjectNode)value).fields();\n      Map result = new LinkedHashMap<>();\n      while(it.hasNext()){\n        Map.Entry<String, JsonNode> e = it.next();\n        result.put(e.getKey(),getVal(e.getValue()));\n      }\n      return result;\n    }\n    if (value instanceof ArrayNode) {\n      ArrayList result =  new ArrayList();\n      Iterator<JsonNode> it = ((ArrayNode) value).elements();\n      while (it.hasNext()) {\n        result.add(getVal(it.next()));\n      }\n      return result;\n\n    }\n    if(value instanceof BinaryNode) {\n      return ((BinaryNode) value).binaryValue();\n    }\n\n    return value.textValue();\n  }\n\n","sourceOld":"  public static Object getVal(JsonNode value) {\n    if (value instanceof NullNode) {\n      return null;\n    }\n    if (value instanceof NumericNode) {\n      return ((NumericNode) value).numberValue();\n    }\n    if (value instanceof BooleanNode) {\n      ((BooleanNode) value).booleanValue();\n    }\n    if(value instanceof ObjectNode){\n      Iterator<Map.Entry<String, JsonNode>> it = ((ObjectNode)value).fields();\n      Map result = new LinkedHashMap<>();\n      while(it.hasNext()){\n        Map.Entry<String, JsonNode> e = it.next();\n        result.put(e.getKey(),getVal(e.getValue()));\n      }\n      return result;\n    }\n    if (value instanceof ArrayNode) {\n      ArrayList result =  new ArrayList();\n      Iterator<JsonNode> it = ((ArrayNode) value).elements();\n      while (it.hasNext()) {\n        result.add(getVal(it.next()));\n      }\n      return result;\n\n    }\n    if(value instanceof BinaryNode) {\n      return ((BinaryNode) value).binaryValue();\n    }\n\n    return value.textValue();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98520789adb1d5ad05afb4956eca0944a929688","date":1592430701,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/response/SmileWriterTest#getVal(JsonNode).mjava","pathOld":"solr/core/src/test/org/apache/solr/response/SmileWriterTest#getVal(JsonNode).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  public static Object getVal(JsonNode value) {\n    if (value instanceof NullNode) {\n      return null;\n    }\n    if (value instanceof NumericNode) {\n      return ((NumericNode) value).numberValue();\n    }\n    if (value instanceof BooleanNode) {\n      ((BooleanNode) value).booleanValue();\n    }\n    if(value instanceof ObjectNode){\n      Iterator<Map.Entry<String, JsonNode>> it = ((ObjectNode)value).fields();\n      Map result = new LinkedHashMap<>();\n      while(it.hasNext()){\n        Map.Entry<String, JsonNode> e = it.next();\n        result.put(e.getKey(),getVal(e.getValue()));\n      }\n      return result;\n    }\n    if (value instanceof ArrayNode) {\n      ArrayList result =  new ArrayList();\n      Iterator<JsonNode> it = ((ArrayNode) value).elements();\n      while (it.hasNext()) {\n        result.add(getVal(it.next()));\n      }\n      return result;\n\n    }\n    if(value instanceof BinaryNode) {\n      return ((BinaryNode) value).binaryValue();\n    }\n\n    return value.textValue();\n  }\n\n","sourceOld":"  public static Object getVal(JsonNode value) {\n    if (value instanceof NullNode) {\n      return null;\n    }\n    if (value instanceof NumericNode) {\n      return ((NumericNode) value).numberValue();\n    }\n    if (value instanceof BooleanNode) {\n      ((BooleanNode) value).booleanValue();\n    }\n    if(value instanceof ObjectNode){\n      Iterator<Map.Entry<String, JsonNode>> it = ((ObjectNode)value).fields();\n      Map result = new LinkedHashMap<>();\n      while(it.hasNext()){\n        Map.Entry<String, JsonNode> e = it.next();\n        result.put(e.getKey(),getVal(e.getValue()));\n      }\n      return result;\n    }\n    if (value instanceof ArrayNode) {\n      ArrayList result =  new ArrayList();\n      Iterator<JsonNode> it = ((ArrayNode) value).elements();\n      while (it.hasNext()) {\n        result.add(getVal(it.next()));\n      }\n      return result;\n\n    }\n    if(value instanceof BinaryNode) {\n      return ((BinaryNode) value).binaryValue();\n    }\n\n    return value.textValue();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fe874d5dba38e8313b2090a3d7335f4a39269336":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fe874d5dba38e8313b2090a3d7335f4a39269336"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e98520789adb1d5ad05afb4956eca0944a929688"],"e98520789adb1d5ad05afb4956eca0944a929688":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"]},"commit2Childs":{"fe874d5dba38e8313b2090a3d7335f4a39269336":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fe874d5dba38e8313b2090a3d7335f4a39269336","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","e98520789adb1d5ad05afb4956eca0944a929688"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"e98520789adb1d5ad05afb4956eca0944a929688":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}