{"path":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","commits":[{"id":"33d0ed80b7b47e34ad3ff033a77544563aba3085","date":1341244632,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Make sure the cores is enabled\n    CoreContainer cores = getCoreContainer();\n    if (cores == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Core container instance missing\");\n    }\n\n    // Pick the action\n    SolrParams params = req.getParams();\n    CollectionAction action = null;\n    String a = params.get(CoreAdminParams.ACTION);\n    if (a != null) {\n      action = CollectionAction.get(a);\n    }\n    if (action != null) {\n      switch (action) {\n        case CREATE: {\n          this.handleCreateAction(req, rsp);\n          break;\n        }\n        case DELETE: {\n          this.handleDeleteAction(req, rsp);\n          break;\n        }\n        \n        default: {\n          throw new RuntimeException(\"Unknown action: \" + action);\n        }\n      }\n    }\n\n    rsp.setHttpCaching(false);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8512200aed2724abd80dbeb686d3412d537b7d8a","date":1342139754,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Make sure the cores is enabled\n    CoreContainer cores = getCoreContainer();\n    if (cores == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Core container instance missing\");\n    }\n\n    // Pick the action\n    SolrParams params = req.getParams();\n    CollectionAction action = null;\n    String a = params.get(CoreAdminParams.ACTION);\n    if (a != null) {\n      action = CollectionAction.get(a);\n    }\n    if (action != null) {\n      switch (action) {\n        case CREATE: {\n          this.handleCreateAction(req, rsp);\n          break;\n        }\n        case DELETE: {\n          this.handleDeleteAction(req, rsp);\n          break;\n        }\n        case RELOAD: {\n          this.handleReloadAction(req, rsp);\n          break;\n        }\n        \n        default: {\n          throw new RuntimeException(\"Unknown action: \" + action);\n        }\n      }\n    }\n\n    rsp.setHttpCaching(false);\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Make sure the cores is enabled\n    CoreContainer cores = getCoreContainer();\n    if (cores == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Core container instance missing\");\n    }\n\n    // Pick the action\n    SolrParams params = req.getParams();\n    CollectionAction action = null;\n    String a = params.get(CoreAdminParams.ACTION);\n    if (a != null) {\n      action = CollectionAction.get(a);\n    }\n    if (action != null) {\n      switch (action) {\n        case CREATE: {\n          this.handleCreateAction(req, rsp);\n          break;\n        }\n        case DELETE: {\n          this.handleDeleteAction(req, rsp);\n          break;\n        }\n        \n        default: {\n          throw new RuntimeException(\"Unknown action: \" + action);\n        }\n      }\n    }\n\n    rsp.setHttpCaching(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Make sure the cores is enabled\n    CoreContainer cores = getCoreContainer();\n    if (cores == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Core container instance missing\");\n    }\n\n    // Pick the action\n    SolrParams params = req.getParams();\n    CollectionAction action = null;\n    String a = params.get(CoreAdminParams.ACTION);\n    if (a != null) {\n      action = CollectionAction.get(a);\n    }\n    if (action != null) {\n      switch (action) {\n        case CREATE: {\n          this.handleCreateAction(req, rsp);\n          break;\n        }\n        case DELETE: {\n          this.handleDeleteAction(req, rsp);\n          break;\n        }\n        case RELOAD: {\n          this.handleReloadAction(req, rsp);\n          break;\n        }\n        \n        default: {\n          throw new RuntimeException(\"Unknown action: \" + action);\n        }\n      }\n    }\n\n    rsp.setHttpCaching(false);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"933fa8f09adfcd1a858cd0fc7912e21ee993b7fc","date":1342989037,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Make sure the cores is enabled\n    CoreContainer cores = getCoreContainer();\n    if (cores == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Core container instance missing\");\n    }\n\n    // Pick the action\n    SolrParams params = req.getParams();\n    CollectionAction action = null;\n    String a = params.get(CoreAdminParams.ACTION);\n    if (a != null) {\n      action = CollectionAction.get(a);\n    }\n    if (action != null) {\n      switch (action) {\n        case CREATE: {\n          this.handleCreateAction(req, rsp);\n          break;\n        }\n        case DELETE: {\n          this.handleDeleteAction(req, rsp);\n          break;\n        }\n        case RELOAD: {\n          this.handleReloadAction(req, rsp);\n          break;\n        }\n        case SYNCSHARD: {\n          this.handleSyncShardAction(req, rsp);\n          break;\n        }\n        \n        default: {\n          throw new RuntimeException(\"Unknown action: \" + action);\n        }\n      }\n    }\n\n    rsp.setHttpCaching(false);\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Make sure the cores is enabled\n    CoreContainer cores = getCoreContainer();\n    if (cores == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Core container instance missing\");\n    }\n\n    // Pick the action\n    SolrParams params = req.getParams();\n    CollectionAction action = null;\n    String a = params.get(CoreAdminParams.ACTION);\n    if (a != null) {\n      action = CollectionAction.get(a);\n    }\n    if (action != null) {\n      switch (action) {\n        case CREATE: {\n          this.handleCreateAction(req, rsp);\n          break;\n        }\n        case DELETE: {\n          this.handleDeleteAction(req, rsp);\n          break;\n        }\n        case RELOAD: {\n          this.handleReloadAction(req, rsp);\n          break;\n        }\n        \n        default: {\n          throw new RuntimeException(\"Unknown action: \" + action);\n        }\n      }\n    }\n\n    rsp.setHttpCaching(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","date":1343059585,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Make sure the cores is enabled\n    CoreContainer cores = getCoreContainer();\n    if (cores == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Core container instance missing\");\n    }\n\n    // Pick the action\n    SolrParams params = req.getParams();\n    CollectionAction action = null;\n    String a = params.get(CoreAdminParams.ACTION);\n    if (a != null) {\n      action = CollectionAction.get(a);\n    }\n    if (action != null) {\n      switch (action) {\n        case CREATE: {\n          this.handleCreateAction(req, rsp);\n          break;\n        }\n        case DELETE: {\n          this.handleDeleteAction(req, rsp);\n          break;\n        }\n        case RELOAD: {\n          this.handleReloadAction(req, rsp);\n          break;\n        }\n        case SYNCSHARD: {\n          this.handleSyncShardAction(req, rsp);\n          break;\n        }\n        \n        default: {\n          throw new RuntimeException(\"Unknown action: \" + action);\n        }\n      }\n    }\n\n    rsp.setHttpCaching(false);\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Make sure the cores is enabled\n    CoreContainer cores = getCoreContainer();\n    if (cores == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Core container instance missing\");\n    }\n\n    // Pick the action\n    SolrParams params = req.getParams();\n    CollectionAction action = null;\n    String a = params.get(CoreAdminParams.ACTION);\n    if (a != null) {\n      action = CollectionAction.get(a);\n    }\n    if (action != null) {\n      switch (action) {\n        case CREATE: {\n          this.handleCreateAction(req, rsp);\n          break;\n        }\n        case DELETE: {\n          this.handleDeleteAction(req, rsp);\n          break;\n        }\n        case RELOAD: {\n          this.handleReloadAction(req, rsp);\n          break;\n        }\n        \n        default: {\n          throw new RuntimeException(\"Unknown action: \" + action);\n        }\n      }\n    }\n\n    rsp.setHttpCaching(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Make sure the cores is enabled\n    CoreContainer cores = getCoreContainer();\n    if (cores == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Core container instance missing\");\n    }\n\n    // Pick the action\n    SolrParams params = req.getParams();\n    CollectionAction action = null;\n    String a = params.get(CoreAdminParams.ACTION);\n    if (a != null) {\n      action = CollectionAction.get(a);\n    }\n    if (action != null) {\n      switch (action) {\n        case CREATE: {\n          this.handleCreateAction(req, rsp);\n          break;\n        }\n        case DELETE: {\n          this.handleDeleteAction(req, rsp);\n          break;\n        }\n        case RELOAD: {\n          this.handleReloadAction(req, rsp);\n          break;\n        }\n        case SYNCSHARD: {\n          this.handleSyncShardAction(req, rsp);\n          break;\n        }\n        \n        default: {\n          throw new RuntimeException(\"Unknown action: \" + action);\n        }\n      }\n    }\n\n    rsp.setHttpCaching(false);\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Make sure the cores is enabled\n    CoreContainer cores = getCoreContainer();\n    if (cores == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Core container instance missing\");\n    }\n\n    // Pick the action\n    SolrParams params = req.getParams();\n    CollectionAction action = null;\n    String a = params.get(CoreAdminParams.ACTION);\n    if (a != null) {\n      action = CollectionAction.get(a);\n    }\n    if (action != null) {\n      switch (action) {\n        case CREATE: {\n          this.handleCreateAction(req, rsp);\n          break;\n        }\n        case DELETE: {\n          this.handleDeleteAction(req, rsp);\n          break;\n        }\n        \n        default: {\n          throw new RuntimeException(\"Unknown action: \" + action);\n        }\n      }\n    }\n\n    rsp.setHttpCaching(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cfa38e36fa296bb93d77df7d5556257dffa4535","date":1362635543,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Make sure the cores is enabled\n    CoreContainer cores = getCoreContainer();\n    if (cores == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Core container instance missing\");\n    }\n\n    // Pick the action\n    SolrParams params = req.getParams();\n    CollectionAction action = null;\n    String a = params.get(CoreAdminParams.ACTION);\n    if (a != null) {\n      action = CollectionAction.get(a);\n    }\n    if (action != null) {\n      switch (action) {\n        case CREATE: {\n          this.handleCreateAction(req, rsp);\n          break;\n        }\n        case DELETE: {\n          this.handleDeleteAction(req, rsp);\n          break;\n        }\n        case RELOAD: {\n          this.handleReloadAction(req, rsp);\n          break;\n        }\n        case SYNCSHARD: {\n          this.handleSyncShardAction(req, rsp);\n          break;\n        }\n        case CREATEALIAS: {\n          this.handleCreateAliasAction(req, rsp);\n          break;\n        }\n        case DELETEALIAS: {\n          this.handleDeleteAliasAction(req, rsp);\n          break;\n        }\n        default: {\n          throw new RuntimeException(\"Unknown action: \" + action);\n        }\n      }\n    }\n\n    rsp.setHttpCaching(false);\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Make sure the cores is enabled\n    CoreContainer cores = getCoreContainer();\n    if (cores == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Core container instance missing\");\n    }\n\n    // Pick the action\n    SolrParams params = req.getParams();\n    CollectionAction action = null;\n    String a = params.get(CoreAdminParams.ACTION);\n    if (a != null) {\n      action = CollectionAction.get(a);\n    }\n    if (action != null) {\n      switch (action) {\n        case CREATE: {\n          this.handleCreateAction(req, rsp);\n          break;\n        }\n        case DELETE: {\n          this.handleDeleteAction(req, rsp);\n          break;\n        }\n        case RELOAD: {\n          this.handleReloadAction(req, rsp);\n          break;\n        }\n        case SYNCSHARD: {\n          this.handleSyncShardAction(req, rsp);\n          break;\n        }\n        \n        default: {\n          throw new RuntimeException(\"Unknown action: \" + action);\n        }\n      }\n    }\n\n    rsp.setHttpCaching(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe999fc2d95d6fea71f960bf9556858387ba21f5","date":1363294860,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Make sure the cores is enabled\n    CoreContainer cores = getCoreContainer();\n    if (cores == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Core container instance missing\");\n    }\n\n    // Pick the action\n    SolrParams params = req.getParams();\n    CollectionAction action = null;\n    String a = params.get(CoreAdminParams.ACTION);\n    if (a != null) {\n      action = CollectionAction.get(a);\n    }\n    if (action == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown action: \" + a);\n    }\n    \n    switch (action) {\n      case CREATE: {\n        this.handleCreateAction(req, rsp);\n        break;\n      }\n      case DELETE: {\n        this.handleDeleteAction(req, rsp);\n        break;\n      }\n      case RELOAD: {\n        this.handleReloadAction(req, rsp);\n        break;\n      }\n      case SYNCSHARD: {\n        this.handleSyncShardAction(req, rsp);\n        break;\n      }\n      case CREATEALIAS: {\n        this.handleCreateAliasAction(req, rsp);\n        break;\n      }\n      case DELETEALIAS: {\n        this.handleDeleteAliasAction(req, rsp);\n        break;\n      }\n      default: {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown action: \"\n            + action);\n      }\n    }\n\n    rsp.setHttpCaching(false);\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Make sure the cores is enabled\n    CoreContainer cores = getCoreContainer();\n    if (cores == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Core container instance missing\");\n    }\n\n    // Pick the action\n    SolrParams params = req.getParams();\n    CollectionAction action = null;\n    String a = params.get(CoreAdminParams.ACTION);\n    if (a != null) {\n      action = CollectionAction.get(a);\n    }\n    if (action != null) {\n      switch (action) {\n        case CREATE: {\n          this.handleCreateAction(req, rsp);\n          break;\n        }\n        case DELETE: {\n          this.handleDeleteAction(req, rsp);\n          break;\n        }\n        case RELOAD: {\n          this.handleReloadAction(req, rsp);\n          break;\n        }\n        case SYNCSHARD: {\n          this.handleSyncShardAction(req, rsp);\n          break;\n        }\n        case CREATEALIAS: {\n          this.handleCreateAliasAction(req, rsp);\n          break;\n        }\n        case DELETEALIAS: {\n          this.handleDeleteAliasAction(req, rsp);\n          break;\n        }\n        default: {\n          throw new RuntimeException(\"Unknown action: \" + action);\n        }\n      }\n    }\n\n    rsp.setHttpCaching(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0beaed456aa3358e5e4a99ea2aea994ef6c81de3","date":1365434191,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Make sure the cores is enabled\n    CoreContainer cores = getCoreContainer();\n    if (cores == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Core container instance missing\");\n    }\n\n    // Pick the action\n    SolrParams params = req.getParams();\n    CollectionAction action = null;\n    String a = params.get(CoreAdminParams.ACTION);\n    if (a != null) {\n      action = CollectionAction.get(a);\n    }\n    if (action == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown action: \" + a);\n    }\n    \n    switch (action) {\n      case CREATE: {\n        this.handleCreateAction(req, rsp);\n        break;\n      }\n      case DELETE: {\n        this.handleDeleteAction(req, rsp);\n        break;\n      }\n      case RELOAD: {\n        this.handleReloadAction(req, rsp);\n        break;\n      }\n      case SYNCSHARD: {\n        this.handleSyncShardAction(req, rsp);\n        break;\n      }\n      case CREATEALIAS: {\n        this.handleCreateAliasAction(req, rsp);\n        break;\n      }\n      case DELETEALIAS: {\n        this.handleDeleteAliasAction(req, rsp);\n        break;\n      }\n        case SPLITSHARD:  {\n          this.handleSplitShardAction(req, rsp);\n          break;\n        }\n\n      default: {\n          throw new RuntimeException(\"Unknown action: \" + action);\n      }\n    }\n\n    rsp.setHttpCaching(false);\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Make sure the cores is enabled\n    CoreContainer cores = getCoreContainer();\n    if (cores == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Core container instance missing\");\n    }\n\n    // Pick the action\n    SolrParams params = req.getParams();\n    CollectionAction action = null;\n    String a = params.get(CoreAdminParams.ACTION);\n    if (a != null) {\n      action = CollectionAction.get(a);\n    }\n    if (action == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown action: \" + a);\n    }\n    \n    switch (action) {\n      case CREATE: {\n        this.handleCreateAction(req, rsp);\n        break;\n      }\n      case DELETE: {\n        this.handleDeleteAction(req, rsp);\n        break;\n      }\n      case RELOAD: {\n        this.handleReloadAction(req, rsp);\n        break;\n      }\n      case SYNCSHARD: {\n        this.handleSyncShardAction(req, rsp);\n        break;\n      }\n      case CREATEALIAS: {\n        this.handleCreateAliasAction(req, rsp);\n        break;\n      }\n      case DELETEALIAS: {\n        this.handleDeleteAliasAction(req, rsp);\n        break;\n      }\n      default: {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown action: \"\n            + action);\n      }\n    }\n\n    rsp.setHttpCaching(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ee5a5186e7187cd42c6f7ff64b6e7206a780325","date":1372914261,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Make sure the cores is enabled\n    CoreContainer cores = getCoreContainer();\n    if (cores == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Core container instance missing\");\n    }\n\n    // Pick the action\n    SolrParams params = req.getParams();\n    CollectionAction action = null;\n    String a = params.get(CoreAdminParams.ACTION);\n    if (a != null) {\n      action = CollectionAction.get(a);\n    }\n    if (action == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown action: \" + a);\n    }\n    \n    switch (action) {\n      case CREATE: {\n        this.handleCreateAction(req, rsp);\n        break;\n      }\n      case DELETE: {\n        this.handleDeleteAction(req, rsp);\n        break;\n      }\n      case RELOAD: {\n        this.handleReloadAction(req, rsp);\n        break;\n      }\n      case SYNCSHARD: {\n        this.handleSyncShardAction(req, rsp);\n        break;\n      }\n      case CREATEALIAS: {\n        this.handleCreateAliasAction(req, rsp);\n        break;\n      }\n      case DELETEALIAS: {\n        this.handleDeleteAliasAction(req, rsp);\n        break;\n      }\n      case SPLITSHARD:  {\n        this.handleSplitShardAction(req, rsp);\n        break;\n      }\n      case DELETESHARD: {\n        this.handleDeleteShardAction(req, rsp);\n        break;\n      }\n\n      default: {\n          throw new RuntimeException(\"Unknown action: \" + action);\n      }\n    }\n\n    rsp.setHttpCaching(false);\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Make sure the cores is enabled\n    CoreContainer cores = getCoreContainer();\n    if (cores == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Core container instance missing\");\n    }\n\n    // Pick the action\n    SolrParams params = req.getParams();\n    CollectionAction action = null;\n    String a = params.get(CoreAdminParams.ACTION);\n    if (a != null) {\n      action = CollectionAction.get(a);\n    }\n    if (action == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown action: \" + a);\n    }\n    \n    switch (action) {\n      case CREATE: {\n        this.handleCreateAction(req, rsp);\n        break;\n      }\n      case DELETE: {\n        this.handleDeleteAction(req, rsp);\n        break;\n      }\n      case RELOAD: {\n        this.handleReloadAction(req, rsp);\n        break;\n      }\n      case SYNCSHARD: {\n        this.handleSyncShardAction(req, rsp);\n        break;\n      }\n      case CREATEALIAS: {\n        this.handleCreateAliasAction(req, rsp);\n        break;\n      }\n      case DELETEALIAS: {\n        this.handleDeleteAliasAction(req, rsp);\n        break;\n      }\n        case SPLITSHARD:  {\n          this.handleSplitShardAction(req, rsp);\n          break;\n        }\n\n      default: {\n          throw new RuntimeException(\"Unknown action: \" + action);\n      }\n    }\n\n    rsp.setHttpCaching(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Make sure the cores is enabled\n    CoreContainer cores = getCoreContainer();\n    if (cores == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Core container instance missing\");\n    }\n\n    // Pick the action\n    SolrParams params = req.getParams();\n    CollectionAction action = null;\n    String a = params.get(CoreAdminParams.ACTION);\n    if (a != null) {\n      action = CollectionAction.get(a);\n    }\n    if (action == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown action: \" + a);\n    }\n    \n    switch (action) {\n      case CREATE: {\n        this.handleCreateAction(req, rsp);\n        break;\n      }\n      case DELETE: {\n        this.handleDeleteAction(req, rsp);\n        break;\n      }\n      case RELOAD: {\n        this.handleReloadAction(req, rsp);\n        break;\n      }\n      case SYNCSHARD: {\n        this.handleSyncShardAction(req, rsp);\n        break;\n      }\n      case CREATEALIAS: {\n        this.handleCreateAliasAction(req, rsp);\n        break;\n      }\n      case DELETEALIAS: {\n        this.handleDeleteAliasAction(req, rsp);\n        break;\n      }\n      case SPLITSHARD:  {\n        this.handleSplitShardAction(req, rsp);\n        break;\n      }\n      case DELETESHARD: {\n        this.handleDeleteShardAction(req, rsp);\n        break;\n      }\n\n      default: {\n          throw new RuntimeException(\"Unknown action: \" + action);\n      }\n    }\n\n    rsp.setHttpCaching(false);\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Make sure the cores is enabled\n    CoreContainer cores = getCoreContainer();\n    if (cores == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Core container instance missing\");\n    }\n\n    // Pick the action\n    SolrParams params = req.getParams();\n    CollectionAction action = null;\n    String a = params.get(CoreAdminParams.ACTION);\n    if (a != null) {\n      action = CollectionAction.get(a);\n    }\n    if (action == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown action: \" + a);\n    }\n    \n    switch (action) {\n      case CREATE: {\n        this.handleCreateAction(req, rsp);\n        break;\n      }\n      case DELETE: {\n        this.handleDeleteAction(req, rsp);\n        break;\n      }\n      case RELOAD: {\n        this.handleReloadAction(req, rsp);\n        break;\n      }\n      case SYNCSHARD: {\n        this.handleSyncShardAction(req, rsp);\n        break;\n      }\n      case CREATEALIAS: {\n        this.handleCreateAliasAction(req, rsp);\n        break;\n      }\n      case DELETEALIAS: {\n        this.handleDeleteAliasAction(req, rsp);\n        break;\n      }\n        case SPLITSHARD:  {\n          this.handleSplitShardAction(req, rsp);\n          break;\n        }\n\n      default: {\n          throw new RuntimeException(\"Unknown action: \" + action);\n      }\n    }\n\n    rsp.setHttpCaching(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1eeda7e62e149f90eee8895af874c74efa7d4852","date":1375293182,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Make sure the cores is enabled\n    CoreContainer cores = getCoreContainer();\n    if (cores == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Core container instance missing\");\n    }\n\n    // Pick the action\n    SolrParams params = req.getParams();\n    CollectionAction action = null;\n    String a = params.get(CoreAdminParams.ACTION);\n    if (a != null) {\n      action = CollectionAction.get(a);\n    }\n    if (action == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown action: \" + a);\n    }\n    \n    switch (action) {\n      case CREATE: {\n        this.handleCreateAction(req, rsp);\n        break;\n      }\n      case DELETE: {\n        this.handleDeleteAction(req, rsp);\n        break;\n      }\n      case RELOAD: {\n        this.handleReloadAction(req, rsp);\n        break;\n      }\n      case SYNCSHARD: {\n        this.handleSyncShardAction(req, rsp);\n        break;\n      }\n      case CREATEALIAS: {\n        this.handleCreateAliasAction(req, rsp);\n        break;\n      }\n      case DELETEALIAS: {\n        this.handleDeleteAliasAction(req, rsp);\n        break;\n      }\n      case SPLITSHARD:  {\n        this.handleSplitShardAction(req, rsp);\n        break;\n      }\n      case DELETESHARD: {\n        this.handleDeleteShardAction(req, rsp);\n        break;\n      }case CREATESHARD: {\n        this.handleCreateShard(req, rsp);\n        break;\n      }\n\n      default: {\n          throw new RuntimeException(\"Unknown action: \" + action);\n      }\n    }\n\n    rsp.setHttpCaching(false);\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Make sure the cores is enabled\n    CoreContainer cores = getCoreContainer();\n    if (cores == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Core container instance missing\");\n    }\n\n    // Pick the action\n    SolrParams params = req.getParams();\n    CollectionAction action = null;\n    String a = params.get(CoreAdminParams.ACTION);\n    if (a != null) {\n      action = CollectionAction.get(a);\n    }\n    if (action == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown action: \" + a);\n    }\n    \n    switch (action) {\n      case CREATE: {\n        this.handleCreateAction(req, rsp);\n        break;\n      }\n      case DELETE: {\n        this.handleDeleteAction(req, rsp);\n        break;\n      }\n      case RELOAD: {\n        this.handleReloadAction(req, rsp);\n        break;\n      }\n      case SYNCSHARD: {\n        this.handleSyncShardAction(req, rsp);\n        break;\n      }\n      case CREATEALIAS: {\n        this.handleCreateAliasAction(req, rsp);\n        break;\n      }\n      case DELETEALIAS: {\n        this.handleDeleteAliasAction(req, rsp);\n        break;\n      }\n      case SPLITSHARD:  {\n        this.handleSplitShardAction(req, rsp);\n        break;\n      }\n      case DELETESHARD: {\n        this.handleDeleteShardAction(req, rsp);\n        break;\n      }\n\n      default: {\n          throw new RuntimeException(\"Unknown action: \" + action);\n      }\n    }\n\n    rsp.setHttpCaching(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Make sure the cores is enabled\n    CoreContainer cores = getCoreContainer();\n    if (cores == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Core container instance missing\");\n    }\n\n    // Pick the action\n    SolrParams params = req.getParams();\n    CollectionAction action = null;\n    String a = params.get(CoreAdminParams.ACTION);\n    if (a != null) {\n      action = CollectionAction.get(a);\n    }\n    if (action == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown action: \" + a);\n    }\n    \n    switch (action) {\n      case CREATE: {\n        this.handleCreateAction(req, rsp);\n        break;\n      }\n      case DELETE: {\n        this.handleDeleteAction(req, rsp);\n        break;\n      }\n      case RELOAD: {\n        this.handleReloadAction(req, rsp);\n        break;\n      }\n      case SYNCSHARD: {\n        this.handleSyncShardAction(req, rsp);\n        break;\n      }\n      case CREATEALIAS: {\n        this.handleCreateAliasAction(req, rsp);\n        break;\n      }\n      case DELETEALIAS: {\n        this.handleDeleteAliasAction(req, rsp);\n        break;\n      }\n      case SPLITSHARD:  {\n        this.handleSplitShardAction(req, rsp);\n        break;\n      }\n      case DELETESHARD: {\n        this.handleDeleteShardAction(req, rsp);\n        break;\n      }case CREATESHARD: {\n        this.handleCreateShard(req, rsp);\n        break;\n      }\n\n      default: {\n          throw new RuntimeException(\"Unknown action: \" + action);\n      }\n    }\n\n    rsp.setHttpCaching(false);\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Make sure the cores is enabled\n    CoreContainer cores = getCoreContainer();\n    if (cores == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Core container instance missing\");\n    }\n\n    // Pick the action\n    SolrParams params = req.getParams();\n    CollectionAction action = null;\n    String a = params.get(CoreAdminParams.ACTION);\n    if (a != null) {\n      action = CollectionAction.get(a);\n    }\n    if (action == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown action: \" + a);\n    }\n    \n    switch (action) {\n      case CREATE: {\n        this.handleCreateAction(req, rsp);\n        break;\n      }\n      case DELETE: {\n        this.handleDeleteAction(req, rsp);\n        break;\n      }\n      case RELOAD: {\n        this.handleReloadAction(req, rsp);\n        break;\n      }\n      case SYNCSHARD: {\n        this.handleSyncShardAction(req, rsp);\n        break;\n      }\n      case CREATEALIAS: {\n        this.handleCreateAliasAction(req, rsp);\n        break;\n      }\n      case DELETEALIAS: {\n        this.handleDeleteAliasAction(req, rsp);\n        break;\n      }\n      case SPLITSHARD:  {\n        this.handleSplitShardAction(req, rsp);\n        break;\n      }\n      case DELETESHARD: {\n        this.handleDeleteShardAction(req, rsp);\n        break;\n      }\n\n      default: {\n          throw new RuntimeException(\"Unknown action: \" + action);\n      }\n    }\n\n    rsp.setHttpCaching(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"966680ec125a9cc7b7fc2a85cd8fa5d4008ff6ef","date":1380216721,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Make sure the cores is enabled\n    CoreContainer cores = getCoreContainer();\n    if (cores == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Core container instance missing\");\n    }\n\n    // Make sure that the core is ZKAware\n    if(!cores.isZooKeeperAware()) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Solr instance is not running in SolrCloud mode.\");\n    }\n\n    // Pick the action\n    SolrParams params = req.getParams();\n    CollectionAction action = null;\n    String a = params.get(CoreAdminParams.ACTION);\n    if (a != null) {\n      action = CollectionAction.get(a);\n    }\n    if (action == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown action: \" + a);\n    }\n    \n    switch (action) {\n      case CREATE: {\n        this.handleCreateAction(req, rsp);\n        break;\n      }\n      case DELETE: {\n        this.handleDeleteAction(req, rsp);\n        break;\n      }\n      case RELOAD: {\n        this.handleReloadAction(req, rsp);\n        break;\n      }\n      case SYNCSHARD: {\n        this.handleSyncShardAction(req, rsp);\n        break;\n      }\n      case CREATEALIAS: {\n        this.handleCreateAliasAction(req, rsp);\n        break;\n      }\n      case DELETEALIAS: {\n        this.handleDeleteAliasAction(req, rsp);\n        break;\n      }\n      case SPLITSHARD:  {\n        this.handleSplitShardAction(req, rsp);\n        break;\n      }\n      case DELETESHARD: {\n        this.handleDeleteShardAction(req, rsp);\n        break;\n      }case CREATESHARD: {\n        this.handleCreateShard(req, rsp);\n        break;\n      }\n\n      default: {\n          throw new RuntimeException(\"Unknown action: \" + action);\n      }\n    }\n\n    rsp.setHttpCaching(false);\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Make sure the cores is enabled\n    CoreContainer cores = getCoreContainer();\n    if (cores == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Core container instance missing\");\n    }\n\n    // Pick the action\n    SolrParams params = req.getParams();\n    CollectionAction action = null;\n    String a = params.get(CoreAdminParams.ACTION);\n    if (a != null) {\n      action = CollectionAction.get(a);\n    }\n    if (action == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown action: \" + a);\n    }\n    \n    switch (action) {\n      case CREATE: {\n        this.handleCreateAction(req, rsp);\n        break;\n      }\n      case DELETE: {\n        this.handleDeleteAction(req, rsp);\n        break;\n      }\n      case RELOAD: {\n        this.handleReloadAction(req, rsp);\n        break;\n      }\n      case SYNCSHARD: {\n        this.handleSyncShardAction(req, rsp);\n        break;\n      }\n      case CREATEALIAS: {\n        this.handleCreateAliasAction(req, rsp);\n        break;\n      }\n      case DELETEALIAS: {\n        this.handleDeleteAliasAction(req, rsp);\n        break;\n      }\n      case SPLITSHARD:  {\n        this.handleSplitShardAction(req, rsp);\n        break;\n      }\n      case DELETESHARD: {\n        this.handleDeleteShardAction(req, rsp);\n        break;\n      }case CREATESHARD: {\n        this.handleCreateShard(req, rsp);\n        break;\n      }\n\n      default: {\n          throw new RuntimeException(\"Unknown action: \" + action);\n      }\n    }\n\n    rsp.setHttpCaching(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"40dce2b6d4360eb09fa16fb6c40a18b25507ed73","date":1383035822,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Make sure the cores is enabled\n    CoreContainer cores = getCoreContainer();\n    if (cores == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Core container instance missing\");\n    }\n\n    // Make sure that the core is ZKAware\n    if(!cores.isZooKeeperAware()) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Solr instance is not running in SolrCloud mode.\");\n    }\n\n    // Pick the action\n    SolrParams params = req.getParams();\n    CollectionAction action = null;\n    String a = params.get(CoreAdminParams.ACTION);\n    if (a != null) {\n      action = CollectionAction.get(a);\n    }\n    if (action == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown action: \" + a);\n    }\n    \n    switch (action) {\n      case CREATE: {\n        this.handleCreateAction(req, rsp);\n        break;\n      }\n      case DELETE: {\n        this.handleDeleteAction(req, rsp);\n        break;\n      }\n      case RELOAD: {\n        this.handleReloadAction(req, rsp);\n        break;\n      }\n      case SYNCSHARD: {\n        this.handleSyncShardAction(req, rsp);\n        break;\n      }\n      case CREATEALIAS: {\n        this.handleCreateAliasAction(req, rsp);\n        break;\n      }\n      case DELETEALIAS: {\n        this.handleDeleteAliasAction(req, rsp);\n        break;\n      }\n      case SPLITSHARD:  {\n        this.handleSplitShardAction(req, rsp);\n        break;\n      }\n      case DELETESHARD: {\n        this.handleDeleteShardAction(req, rsp);\n        break;\n      }case CREATESHARD: {\n        this.handleCreateShard(req, rsp);\n        break;\n      }\n      case DELETEREPLICA: {\n        this.handleRemoveReplica(req, rsp);\n        break;\n      }\n\n      default: {\n          throw new RuntimeException(\"Unknown action: \" + action);\n      }\n    }\n\n    rsp.setHttpCaching(false);\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Make sure the cores is enabled\n    CoreContainer cores = getCoreContainer();\n    if (cores == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Core container instance missing\");\n    }\n\n    // Make sure that the core is ZKAware\n    if(!cores.isZooKeeperAware()) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Solr instance is not running in SolrCloud mode.\");\n    }\n\n    // Pick the action\n    SolrParams params = req.getParams();\n    CollectionAction action = null;\n    String a = params.get(CoreAdminParams.ACTION);\n    if (a != null) {\n      action = CollectionAction.get(a);\n    }\n    if (action == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown action: \" + a);\n    }\n    \n    switch (action) {\n      case CREATE: {\n        this.handleCreateAction(req, rsp);\n        break;\n      }\n      case DELETE: {\n        this.handleDeleteAction(req, rsp);\n        break;\n      }\n      case RELOAD: {\n        this.handleReloadAction(req, rsp);\n        break;\n      }\n      case SYNCSHARD: {\n        this.handleSyncShardAction(req, rsp);\n        break;\n      }\n      case CREATEALIAS: {\n        this.handleCreateAliasAction(req, rsp);\n        break;\n      }\n      case DELETEALIAS: {\n        this.handleDeleteAliasAction(req, rsp);\n        break;\n      }\n      case SPLITSHARD:  {\n        this.handleSplitShardAction(req, rsp);\n        break;\n      }\n      case DELETESHARD: {\n        this.handleDeleteShardAction(req, rsp);\n        break;\n      }case CREATESHARD: {\n        this.handleCreateShard(req, rsp);\n        break;\n      }\n\n      default: {\n          throw new RuntimeException(\"Unknown action: \" + action);\n      }\n    }\n\n    rsp.setHttpCaching(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"da888af1ab894358122a22229051215f58cf4d54","date":1384408702,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Make sure the cores is enabled\n    CoreContainer cores = getCoreContainer();\n    if (cores == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Core container instance missing\");\n    }\n\n    // Make sure that the core is ZKAware\n    if(!cores.isZooKeeperAware()) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Solr instance is not running in SolrCloud mode.\");\n    }\n\n    // Pick the action\n    SolrParams params = req.getParams();\n    CollectionAction action = null;\n    String a = params.get(CoreAdminParams.ACTION);\n    if (a != null) {\n      action = CollectionAction.get(a);\n    }\n    if (action == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown action: \" + a);\n    }\n    \n    switch (action) {\n      case CREATE: {\n        this.handleCreateAction(req, rsp);\n        break;\n      }\n      case DELETE: {\n        this.handleDeleteAction(req, rsp);\n        break;\n      }\n      case RELOAD: {\n        this.handleReloadAction(req, rsp);\n        break;\n      }\n      case SYNCSHARD: {\n        this.handleSyncShardAction(req, rsp);\n        break;\n      }\n      case CREATEALIAS: {\n        this.handleCreateAliasAction(req, rsp);\n        break;\n      }\n      case DELETEALIAS: {\n        this.handleDeleteAliasAction(req, rsp);\n        break;\n      }\n      case SPLITSHARD:  {\n        this.handleSplitShardAction(req, rsp);\n        break;\n      }\n      case DELETESHARD: {\n        this.handleDeleteShardAction(req, rsp);\n        break;\n      }\n      case CREATESHARD: {\n        this.handleCreateShard(req, rsp);\n        break;\n      }\n      case DELETEREPLICA: {\n        this.handleRemoveReplica(req, rsp);\n        break;\n      }\n      case MIGRATE: {\n        this.handleMigrate(req, rsp);\n        break;\n      }\n      default: {\n          throw new RuntimeException(\"Unknown action: \" + action);\n      }\n    }\n\n    rsp.setHttpCaching(false);\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Make sure the cores is enabled\n    CoreContainer cores = getCoreContainer();\n    if (cores == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Core container instance missing\");\n    }\n\n    // Make sure that the core is ZKAware\n    if(!cores.isZooKeeperAware()) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Solr instance is not running in SolrCloud mode.\");\n    }\n\n    // Pick the action\n    SolrParams params = req.getParams();\n    CollectionAction action = null;\n    String a = params.get(CoreAdminParams.ACTION);\n    if (a != null) {\n      action = CollectionAction.get(a);\n    }\n    if (action == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown action: \" + a);\n    }\n    \n    switch (action) {\n      case CREATE: {\n        this.handleCreateAction(req, rsp);\n        break;\n      }\n      case DELETE: {\n        this.handleDeleteAction(req, rsp);\n        break;\n      }\n      case RELOAD: {\n        this.handleReloadAction(req, rsp);\n        break;\n      }\n      case SYNCSHARD: {\n        this.handleSyncShardAction(req, rsp);\n        break;\n      }\n      case CREATEALIAS: {\n        this.handleCreateAliasAction(req, rsp);\n        break;\n      }\n      case DELETEALIAS: {\n        this.handleDeleteAliasAction(req, rsp);\n        break;\n      }\n      case SPLITSHARD:  {\n        this.handleSplitShardAction(req, rsp);\n        break;\n      }\n      case DELETESHARD: {\n        this.handleDeleteShardAction(req, rsp);\n        break;\n      }case CREATESHARD: {\n        this.handleCreateShard(req, rsp);\n        break;\n      }\n      case DELETEREPLICA: {\n        this.handleRemoveReplica(req, rsp);\n        break;\n      }\n\n      default: {\n          throw new RuntimeException(\"Unknown action: \" + action);\n      }\n    }\n\n    rsp.setHttpCaching(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"44de42d869f7d8e5235d43c4ad9a99f520363a2f","date":1389871557,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Make sure the cores is enabled\n    CoreContainer cores = getCoreContainer();\n    if (cores == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Core container instance missing\");\n    }\n\n    // Make sure that the core is ZKAware\n    if(!cores.isZooKeeperAware()) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Solr instance is not running in SolrCloud mode.\");\n    }\n\n    // Pick the action\n    SolrParams params = req.getParams();\n    CollectionAction action = null;\n    String a = params.get(CoreAdminParams.ACTION);\n    if (a != null) {\n      action = CollectionAction.get(a);\n    }\n    if (action == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown action: \" + a);\n    }\n    \n    switch (action) {\n      case CREATE: {\n        this.handleCreateAction(req, rsp);\n        break;\n      }\n      case DELETE: {\n        this.handleDeleteAction(req, rsp);\n        break;\n      }\n      case RELOAD: {\n        this.handleReloadAction(req, rsp);\n        break;\n      }\n      case SYNCSHARD: {\n        this.handleSyncShardAction(req, rsp);\n        break;\n      }\n      case CREATEALIAS: {\n        this.handleCreateAliasAction(req, rsp);\n        break;\n      }\n      case DELETEALIAS: {\n        this.handleDeleteAliasAction(req, rsp);\n        break;\n      }\n      case SPLITSHARD:  {\n        this.handleSplitShardAction(req, rsp);\n        break;\n      }\n      case DELETESHARD: {\n        this.handleDeleteShardAction(req, rsp);\n        break;\n      }\n      case CREATESHARD: {\n        this.handleCreateShard(req, rsp);\n        break;\n      }\n      case DELETEREPLICA: {\n        this.handleRemoveReplica(req, rsp);\n        break;\n      }\n      case MIGRATE: {\n        this.handleMigrate(req, rsp);\n        break;\n      } case ADDROLE:{\n        handleRole(ADDROLE, req, rsp);\n        break;\n      } case REMOVEROLE:{\n        handleRole(REMOVEROLE, req, rsp);\n        break;\n      }\n      default: {\n          throw new RuntimeException(\"Unknown action: \" + action);\n      }\n    }\n\n    rsp.setHttpCaching(false);\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Make sure the cores is enabled\n    CoreContainer cores = getCoreContainer();\n    if (cores == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Core container instance missing\");\n    }\n\n    // Make sure that the core is ZKAware\n    if(!cores.isZooKeeperAware()) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Solr instance is not running in SolrCloud mode.\");\n    }\n\n    // Pick the action\n    SolrParams params = req.getParams();\n    CollectionAction action = null;\n    String a = params.get(CoreAdminParams.ACTION);\n    if (a != null) {\n      action = CollectionAction.get(a);\n    }\n    if (action == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown action: \" + a);\n    }\n    \n    switch (action) {\n      case CREATE: {\n        this.handleCreateAction(req, rsp);\n        break;\n      }\n      case DELETE: {\n        this.handleDeleteAction(req, rsp);\n        break;\n      }\n      case RELOAD: {\n        this.handleReloadAction(req, rsp);\n        break;\n      }\n      case SYNCSHARD: {\n        this.handleSyncShardAction(req, rsp);\n        break;\n      }\n      case CREATEALIAS: {\n        this.handleCreateAliasAction(req, rsp);\n        break;\n      }\n      case DELETEALIAS: {\n        this.handleDeleteAliasAction(req, rsp);\n        break;\n      }\n      case SPLITSHARD:  {\n        this.handleSplitShardAction(req, rsp);\n        break;\n      }\n      case DELETESHARD: {\n        this.handleDeleteShardAction(req, rsp);\n        break;\n      }\n      case CREATESHARD: {\n        this.handleCreateShard(req, rsp);\n        break;\n      }\n      case DELETEREPLICA: {\n        this.handleRemoveReplica(req, rsp);\n        break;\n      }\n      case MIGRATE: {\n        this.handleMigrate(req, rsp);\n        break;\n      }\n      default: {\n          throw new RuntimeException(\"Unknown action: \" + action);\n      }\n    }\n\n    rsp.setHttpCaching(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fab88842367a77ce26aedb47e9ea666beea01cf9","date":1391433372,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Make sure the cores is enabled\n    CoreContainer cores = getCoreContainer();\n    if (cores == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Core container instance missing\");\n    }\n\n    // Make sure that the core is ZKAware\n    if(!cores.isZooKeeperAware()) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Solr instance is not running in SolrCloud mode.\");\n    }\n\n    // Pick the action\n    SolrParams params = req.getParams();\n    CollectionAction action = null;\n    String a = params.get(CoreAdminParams.ACTION);\n    if (a != null) {\n      action = CollectionAction.get(a);\n    }\n    if (action == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown action: \" + a);\n    }\n    \n    switch (action) {\n      case CREATE: {\n        this.handleCreateAction(req, rsp);\n        break;\n      }\n      case DELETE: {\n        this.handleDeleteAction(req, rsp);\n        break;\n      }\n      case RELOAD: {\n        this.handleReloadAction(req, rsp);\n        break;\n      }\n      case SYNCSHARD: {\n        this.handleSyncShardAction(req, rsp);\n        break;\n      }\n      case CREATEALIAS: {\n        this.handleCreateAliasAction(req, rsp);\n        break;\n      }\n      case DELETEALIAS: {\n        this.handleDeleteAliasAction(req, rsp);\n        break;\n      }\n      case SPLITSHARD:  {\n        this.handleSplitShardAction(req, rsp);\n        break;\n      }\n      case DELETESHARD: {\n        this.handleDeleteShardAction(req, rsp);\n        break;\n      }\n      case CREATESHARD: {\n        this.handleCreateShard(req, rsp);\n        break;\n      }\n      case DELETEREPLICA: {\n        this.handleRemoveReplica(req, rsp);\n        break;\n      }\n      case MIGRATE: {\n        this.handleMigrate(req, rsp);\n        break;\n      } case ADDROLE:{\n        handleRole(ADDROLE, req, rsp);\n        break;\n      } case REMOVEROLE:{\n        handleRole(REMOVEROLE, req, rsp);\n        break;\n      }\n      case CLUSTERPROP: {\n        this.handleProp(req, rsp);\n        break;\n      }\n      default: {\n          throw new RuntimeException(\"Unknown action: \" + action);\n      }\n    }\n\n    rsp.setHttpCaching(false);\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Make sure the cores is enabled\n    CoreContainer cores = getCoreContainer();\n    if (cores == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Core container instance missing\");\n    }\n\n    // Make sure that the core is ZKAware\n    if(!cores.isZooKeeperAware()) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Solr instance is not running in SolrCloud mode.\");\n    }\n\n    // Pick the action\n    SolrParams params = req.getParams();\n    CollectionAction action = null;\n    String a = params.get(CoreAdminParams.ACTION);\n    if (a != null) {\n      action = CollectionAction.get(a);\n    }\n    if (action == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown action: \" + a);\n    }\n    \n    switch (action) {\n      case CREATE: {\n        this.handleCreateAction(req, rsp);\n        break;\n      }\n      case DELETE: {\n        this.handleDeleteAction(req, rsp);\n        break;\n      }\n      case RELOAD: {\n        this.handleReloadAction(req, rsp);\n        break;\n      }\n      case SYNCSHARD: {\n        this.handleSyncShardAction(req, rsp);\n        break;\n      }\n      case CREATEALIAS: {\n        this.handleCreateAliasAction(req, rsp);\n        break;\n      }\n      case DELETEALIAS: {\n        this.handleDeleteAliasAction(req, rsp);\n        break;\n      }\n      case SPLITSHARD:  {\n        this.handleSplitShardAction(req, rsp);\n        break;\n      }\n      case DELETESHARD: {\n        this.handleDeleteShardAction(req, rsp);\n        break;\n      }\n      case CREATESHARD: {\n        this.handleCreateShard(req, rsp);\n        break;\n      }\n      case DELETEREPLICA: {\n        this.handleRemoveReplica(req, rsp);\n        break;\n      }\n      case MIGRATE: {\n        this.handleMigrate(req, rsp);\n        break;\n      } case ADDROLE:{\n        handleRole(ADDROLE, req, rsp);\n        break;\n      } case REMOVEROLE:{\n        handleRole(REMOVEROLE, req, rsp);\n        break;\n      }\n      default: {\n          throw new RuntimeException(\"Unknown action: \" + action);\n      }\n    }\n\n    rsp.setHttpCaching(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8497bb4f9de61b5520423bd9af88ea11a6e109e7","date":1393245090,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Make sure the cores is enabled\n    CoreContainer cores = getCoreContainer();\n    if (cores == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Core container instance missing\");\n    }\n\n    // Make sure that the core is ZKAware\n    if(!cores.isZooKeeperAware()) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Solr instance is not running in SolrCloud mode.\");\n    }\n\n    // Pick the action\n    SolrParams params = req.getParams();\n    CollectionAction action = null;\n    String a = params.get(CoreAdminParams.ACTION);\n    if (a != null) {\n      action = CollectionAction.get(a);\n    }\n    if (action == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown action: \" + a);\n    }\n    \n    switch (action) {\n      case CREATE: {\n        this.handleCreateAction(req, rsp);\n        break;\n      }\n      case DELETE: {\n        this.handleDeleteAction(req, rsp);\n        break;\n      }\n      case RELOAD: {\n        this.handleReloadAction(req, rsp);\n        break;\n      }\n      case SYNCSHARD: {\n        this.handleSyncShardAction(req, rsp);\n        break;\n      }\n      case CREATEALIAS: {\n        this.handleCreateAliasAction(req, rsp);\n        break;\n      }\n      case DELETEALIAS: {\n        this.handleDeleteAliasAction(req, rsp);\n        break;\n      }\n      case SPLITSHARD:  {\n        this.handleSplitShardAction(req, rsp);\n        break;\n      }\n      case DELETESHARD: {\n        this.handleDeleteShardAction(req, rsp);\n        break;\n      }\n      case CREATESHARD: {\n        this.handleCreateShard(req, rsp);\n        break;\n      }\n      case DELETEREPLICA: {\n        this.handleRemoveReplica(req, rsp);\n        break;\n      }\n      case MIGRATE: {\n        this.handleMigrate(req, rsp);\n        break;\n      }\n      case ADDROLE: {\n        handleRole(ADDROLE, req, rsp);\n        break;\n      }\n      case REMOVEROLE: {\n        handleRole(REMOVEROLE, req, rsp);\n        break;\n      }\n      case CLUSTERPROP: {\n        this.handleProp(req, rsp);\n        break;\n      }\n      case ADDREPLICA:  {\n        this.handleAddReplica(req, rsp);\n        break;\n      }\n      default: {\n          throw new RuntimeException(\"Unknown action: \" + action);\n      }\n    }\n\n    rsp.setHttpCaching(false);\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Make sure the cores is enabled\n    CoreContainer cores = getCoreContainer();\n    if (cores == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Core container instance missing\");\n    }\n\n    // Make sure that the core is ZKAware\n    if(!cores.isZooKeeperAware()) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Solr instance is not running in SolrCloud mode.\");\n    }\n\n    // Pick the action\n    SolrParams params = req.getParams();\n    CollectionAction action = null;\n    String a = params.get(CoreAdminParams.ACTION);\n    if (a != null) {\n      action = CollectionAction.get(a);\n    }\n    if (action == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown action: \" + a);\n    }\n    \n    switch (action) {\n      case CREATE: {\n        this.handleCreateAction(req, rsp);\n        break;\n      }\n      case DELETE: {\n        this.handleDeleteAction(req, rsp);\n        break;\n      }\n      case RELOAD: {\n        this.handleReloadAction(req, rsp);\n        break;\n      }\n      case SYNCSHARD: {\n        this.handleSyncShardAction(req, rsp);\n        break;\n      }\n      case CREATEALIAS: {\n        this.handleCreateAliasAction(req, rsp);\n        break;\n      }\n      case DELETEALIAS: {\n        this.handleDeleteAliasAction(req, rsp);\n        break;\n      }\n      case SPLITSHARD:  {\n        this.handleSplitShardAction(req, rsp);\n        break;\n      }\n      case DELETESHARD: {\n        this.handleDeleteShardAction(req, rsp);\n        break;\n      }\n      case CREATESHARD: {\n        this.handleCreateShard(req, rsp);\n        break;\n      }\n      case DELETEREPLICA: {\n        this.handleRemoveReplica(req, rsp);\n        break;\n      }\n      case MIGRATE: {\n        this.handleMigrate(req, rsp);\n        break;\n      } case ADDROLE:{\n        handleRole(ADDROLE, req, rsp);\n        break;\n      } case REMOVEROLE:{\n        handleRole(REMOVEROLE, req, rsp);\n        break;\n      }\n      case CLUSTERPROP: {\n        this.handleProp(req, rsp);\n        break;\n      }\n      default: {\n          throw new RuntimeException(\"Unknown action: \" + action);\n      }\n    }\n\n    rsp.setHttpCaching(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8","date":1393532551,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Make sure the cores is enabled\n    CoreContainer cores = getCoreContainer();\n    if (cores == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Core container instance missing\");\n    }\n\n    // Make sure that the core is ZKAware\n    if(!cores.isZooKeeperAware()) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Solr instance is not running in SolrCloud mode.\");\n    }\n\n    // Pick the action\n    SolrParams params = req.getParams();\n    CollectionAction action = null;\n    String a = params.get(CoreAdminParams.ACTION);\n    if (a != null) {\n      action = CollectionAction.get(a);\n    }\n    if (action == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown action: \" + a);\n    }\n    \n    switch (action) {\n      case CREATE: {\n        this.handleCreateAction(req, rsp);\n        break;\n      }\n      case DELETE: {\n        this.handleDeleteAction(req, rsp);\n        break;\n      }\n      case RELOAD: {\n        this.handleReloadAction(req, rsp);\n        break;\n      }\n      case SYNCSHARD: {\n        this.handleSyncShardAction(req, rsp);\n        break;\n      }\n      case CREATEALIAS: {\n        this.handleCreateAliasAction(req, rsp);\n        break;\n      }\n      case DELETEALIAS: {\n        this.handleDeleteAliasAction(req, rsp);\n        break;\n      }\n      case SPLITSHARD:  {\n        this.handleSplitShardAction(req, rsp);\n        break;\n      }\n      case DELETESHARD: {\n        this.handleDeleteShardAction(req, rsp);\n        break;\n      }\n      case CREATESHARD: {\n        this.handleCreateShard(req, rsp);\n        break;\n      }\n      case DELETEREPLICA: {\n        this.handleRemoveReplica(req, rsp);\n        break;\n      }\n      case MIGRATE: {\n        this.handleMigrate(req, rsp);\n        break;\n      }\n      case ADDROLE: {\n        handleRole(ADDROLE, req, rsp);\n        break;\n      }\n      case REMOVEROLE: {\n        handleRole(REMOVEROLE, req, rsp);\n        break;\n      }\n      case CLUSTERPROP: {\n        this.handleProp(req, rsp);\n        break;\n      }\n      case ADDREPLICA:  {\n        this.handleAddReplica(req, rsp);\n        break;\n      }\n      default: {\n          throw new RuntimeException(\"Unknown action: \" + action);\n      }\n    }\n\n    rsp.setHttpCaching(false);\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Make sure the cores is enabled\n    CoreContainer cores = getCoreContainer();\n    if (cores == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Core container instance missing\");\n    }\n\n    // Make sure that the core is ZKAware\n    if(!cores.isZooKeeperAware()) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Solr instance is not running in SolrCloud mode.\");\n    }\n\n    // Pick the action\n    SolrParams params = req.getParams();\n    CollectionAction action = null;\n    String a = params.get(CoreAdminParams.ACTION);\n    if (a != null) {\n      action = CollectionAction.get(a);\n    }\n    if (action == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown action: \" + a);\n    }\n    \n    switch (action) {\n      case CREATE: {\n        this.handleCreateAction(req, rsp);\n        break;\n      }\n      case DELETE: {\n        this.handleDeleteAction(req, rsp);\n        break;\n      }\n      case RELOAD: {\n        this.handleReloadAction(req, rsp);\n        break;\n      }\n      case SYNCSHARD: {\n        this.handleSyncShardAction(req, rsp);\n        break;\n      }\n      case CREATEALIAS: {\n        this.handleCreateAliasAction(req, rsp);\n        break;\n      }\n      case DELETEALIAS: {\n        this.handleDeleteAliasAction(req, rsp);\n        break;\n      }\n      case SPLITSHARD:  {\n        this.handleSplitShardAction(req, rsp);\n        break;\n      }\n      case DELETESHARD: {\n        this.handleDeleteShardAction(req, rsp);\n        break;\n      }\n      case CREATESHARD: {\n        this.handleCreateShard(req, rsp);\n        break;\n      }\n      case DELETEREPLICA: {\n        this.handleRemoveReplica(req, rsp);\n        break;\n      }\n      case MIGRATE: {\n        this.handleMigrate(req, rsp);\n        break;\n      } case ADDROLE:{\n        handleRole(ADDROLE, req, rsp);\n        break;\n      } case REMOVEROLE:{\n        handleRole(REMOVEROLE, req, rsp);\n        break;\n      }\n      case CLUSTERPROP: {\n        this.handleProp(req, rsp);\n        break;\n      }\n      default: {\n          throw new RuntimeException(\"Unknown action: \" + action);\n      }\n    }\n\n    rsp.setHttpCaching(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"058f5a3debcfa0ea477da3eabb4cbe2ec0fac211","date":1394784078,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Make sure the cores is enabled\n    CoreContainer cores = getCoreContainer();\n    if (cores == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Core container instance missing\");\n    }\n\n    // Make sure that the core is ZKAware\n    if(!cores.isZooKeeperAware()) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Solr instance is not running in SolrCloud mode.\");\n    }\n\n    // Pick the action\n    SolrParams params = req.getParams();\n    CollectionAction action = null;\n    String a = params.get(CoreAdminParams.ACTION);\n    if (a != null) {\n      action = CollectionAction.get(a);\n    }\n    if (action == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown action: \" + a);\n    }\n    \n    switch (action) {\n      case CREATE: {\n        this.handleCreateAction(req, rsp);\n        break;\n      }\n      case DELETE: {\n        this.handleDeleteAction(req, rsp);\n        break;\n      }\n      case RELOAD: {\n        this.handleReloadAction(req, rsp);\n        break;\n      }\n      case SYNCSHARD: {\n        this.handleSyncShardAction(req, rsp);\n        break;\n      }\n      case CREATEALIAS: {\n        this.handleCreateAliasAction(req, rsp);\n        break;\n      }\n      case DELETEALIAS: {\n        this.handleDeleteAliasAction(req, rsp);\n        break;\n      }\n      case SPLITSHARD:  {\n        this.handleSplitShardAction(req, rsp);\n        break;\n      }\n      case DELETESHARD: {\n        this.handleDeleteShardAction(req, rsp);\n        break;\n      }\n      case CREATESHARD: {\n        this.handleCreateShard(req, rsp);\n        break;\n      }\n      case DELETEREPLICA: {\n        this.handleRemoveReplica(req, rsp);\n        break;\n      }\n      case MIGRATE: {\n        this.handleMigrate(req, rsp);\n        break;\n      }\n      case ADDROLE: {\n        handleRole(ADDROLE, req, rsp);\n        break;\n      }\n      case REMOVEROLE: {\n        handleRole(REMOVEROLE, req, rsp);\n        break;\n      }\n      case CLUSTERPROP: {\n        this.handleProp(req, rsp);\n        break;\n      }\n      case ADDREPLICA:  {\n        this.handleAddReplica(req, rsp);\n        break;\n      }\n      case REQUESTSTATUS: {\n        this.handleRequestStatus(req, rsp);\n        break;\n      }\n      default: {\n          throw new RuntimeException(\"Unknown action: \" + action);\n      }\n    }\n\n    rsp.setHttpCaching(false);\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Make sure the cores is enabled\n    CoreContainer cores = getCoreContainer();\n    if (cores == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Core container instance missing\");\n    }\n\n    // Make sure that the core is ZKAware\n    if(!cores.isZooKeeperAware()) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Solr instance is not running in SolrCloud mode.\");\n    }\n\n    // Pick the action\n    SolrParams params = req.getParams();\n    CollectionAction action = null;\n    String a = params.get(CoreAdminParams.ACTION);\n    if (a != null) {\n      action = CollectionAction.get(a);\n    }\n    if (action == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown action: \" + a);\n    }\n    \n    switch (action) {\n      case CREATE: {\n        this.handleCreateAction(req, rsp);\n        break;\n      }\n      case DELETE: {\n        this.handleDeleteAction(req, rsp);\n        break;\n      }\n      case RELOAD: {\n        this.handleReloadAction(req, rsp);\n        break;\n      }\n      case SYNCSHARD: {\n        this.handleSyncShardAction(req, rsp);\n        break;\n      }\n      case CREATEALIAS: {\n        this.handleCreateAliasAction(req, rsp);\n        break;\n      }\n      case DELETEALIAS: {\n        this.handleDeleteAliasAction(req, rsp);\n        break;\n      }\n      case SPLITSHARD:  {\n        this.handleSplitShardAction(req, rsp);\n        break;\n      }\n      case DELETESHARD: {\n        this.handleDeleteShardAction(req, rsp);\n        break;\n      }\n      case CREATESHARD: {\n        this.handleCreateShard(req, rsp);\n        break;\n      }\n      case DELETEREPLICA: {\n        this.handleRemoveReplica(req, rsp);\n        break;\n      }\n      case MIGRATE: {\n        this.handleMigrate(req, rsp);\n        break;\n      }\n      case ADDROLE: {\n        handleRole(ADDROLE, req, rsp);\n        break;\n      }\n      case REMOVEROLE: {\n        handleRole(REMOVEROLE, req, rsp);\n        break;\n      }\n      case CLUSTERPROP: {\n        this.handleProp(req, rsp);\n        break;\n      }\n      case ADDREPLICA:  {\n        this.handleAddReplica(req, rsp);\n        break;\n      }\n      default: {\n          throw new RuntimeException(\"Unknown action: \" + action);\n      }\n    }\n\n    rsp.setHttpCaching(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9f45f67a018421da088ea39274f23ad5d339b97d","date":1395559348,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Make sure the cores is enabled\n    CoreContainer cores = getCoreContainer();\n    if (cores == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Core container instance missing\");\n    }\n\n    // Make sure that the core is ZKAware\n    if(!cores.isZooKeeperAware()) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Solr instance is not running in SolrCloud mode.\");\n    }\n\n    // Pick the action\n    SolrParams params = req.getParams();\n    CollectionAction action = null;\n    String a = params.get(CoreAdminParams.ACTION);\n    if (a != null) {\n      action = CollectionAction.get(a);\n    }\n    if (action == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown action: \" + a);\n    }\n    \n    switch (action) {\n      case CREATE: {\n        this.handleCreateAction(req, rsp);\n        break;\n      }\n      case DELETE: {\n        this.handleDeleteAction(req, rsp);\n        break;\n      }\n      case RELOAD: {\n        this.handleReloadAction(req, rsp);\n        break;\n      }\n      case SYNCSHARD: {\n        this.handleSyncShardAction(req, rsp);\n        break;\n      }\n      case CREATEALIAS: {\n        this.handleCreateAliasAction(req, rsp);\n        break;\n      }\n      case DELETEALIAS: {\n        this.handleDeleteAliasAction(req, rsp);\n        break;\n      }\n      case SPLITSHARD:  {\n        this.handleSplitShardAction(req, rsp);\n        break;\n      }\n      case DELETESHARD: {\n        this.handleDeleteShardAction(req, rsp);\n        break;\n      }\n      case CREATESHARD: {\n        this.handleCreateShard(req, rsp);\n        break;\n      }\n      case DELETEREPLICA: {\n        this.handleRemoveReplica(req, rsp);\n        break;\n      }\n      case MIGRATE: {\n        this.handleMigrate(req, rsp);\n        break;\n      }\n      case ADDROLE: {\n        handleRole(ADDROLE, req, rsp);\n        break;\n      }\n      case REMOVEROLE: {\n        handleRole(REMOVEROLE, req, rsp);\n        break;\n      }\n      case CLUSTERPROP: {\n        this.handleProp(req, rsp);\n        break;\n      }\n      case ADDREPLICA:  {\n        this.handleAddReplica(req, rsp);\n        break;\n      }\n      case REQUESTSTATUS: {\n        this.handleRequestStatus(req, rsp);\n        break;\n      }\n      case OVERSEERSTATUS:  {\n        this.handleOverseerStatus(req, rsp);\n        break;\n      }\n      default: {\n          throw new RuntimeException(\"Unknown action: \" + action);\n      }\n    }\n\n    rsp.setHttpCaching(false);\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Make sure the cores is enabled\n    CoreContainer cores = getCoreContainer();\n    if (cores == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Core container instance missing\");\n    }\n\n    // Make sure that the core is ZKAware\n    if(!cores.isZooKeeperAware()) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Solr instance is not running in SolrCloud mode.\");\n    }\n\n    // Pick the action\n    SolrParams params = req.getParams();\n    CollectionAction action = null;\n    String a = params.get(CoreAdminParams.ACTION);\n    if (a != null) {\n      action = CollectionAction.get(a);\n    }\n    if (action == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown action: \" + a);\n    }\n    \n    switch (action) {\n      case CREATE: {\n        this.handleCreateAction(req, rsp);\n        break;\n      }\n      case DELETE: {\n        this.handleDeleteAction(req, rsp);\n        break;\n      }\n      case RELOAD: {\n        this.handleReloadAction(req, rsp);\n        break;\n      }\n      case SYNCSHARD: {\n        this.handleSyncShardAction(req, rsp);\n        break;\n      }\n      case CREATEALIAS: {\n        this.handleCreateAliasAction(req, rsp);\n        break;\n      }\n      case DELETEALIAS: {\n        this.handleDeleteAliasAction(req, rsp);\n        break;\n      }\n      case SPLITSHARD:  {\n        this.handleSplitShardAction(req, rsp);\n        break;\n      }\n      case DELETESHARD: {\n        this.handleDeleteShardAction(req, rsp);\n        break;\n      }\n      case CREATESHARD: {\n        this.handleCreateShard(req, rsp);\n        break;\n      }\n      case DELETEREPLICA: {\n        this.handleRemoveReplica(req, rsp);\n        break;\n      }\n      case MIGRATE: {\n        this.handleMigrate(req, rsp);\n        break;\n      }\n      case ADDROLE: {\n        handleRole(ADDROLE, req, rsp);\n        break;\n      }\n      case REMOVEROLE: {\n        handleRole(REMOVEROLE, req, rsp);\n        break;\n      }\n      case CLUSTERPROP: {\n        this.handleProp(req, rsp);\n        break;\n      }\n      case ADDREPLICA:  {\n        this.handleAddReplica(req, rsp);\n        break;\n      }\n      case REQUESTSTATUS: {\n        this.handleRequestStatus(req, rsp);\n        break;\n      }\n      default: {\n          throw new RuntimeException(\"Unknown action: \" + action);\n      }\n    }\n\n    rsp.setHttpCaching(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"78ae724e55b07e7d158110151c0a7247cd54b460","date":1396011287,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Make sure the cores is enabled\n    CoreContainer cores = getCoreContainer();\n    if (cores == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Core container instance missing\");\n    }\n\n    // Make sure that the core is ZKAware\n    if(!cores.isZooKeeperAware()) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Solr instance is not running in SolrCloud mode.\");\n    }\n\n    // Pick the action\n    SolrParams params = req.getParams();\n    CollectionAction action = null;\n    String a = params.get(CoreAdminParams.ACTION);\n    if (a != null) {\n      action = CollectionAction.get(a);\n    }\n    if (action == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown action: \" + a);\n    }\n    \n    switch (action) {\n      case CREATE: {\n        this.handleCreateAction(req, rsp);\n        break;\n      }\n      case DELETE: {\n        this.handleDeleteAction(req, rsp);\n        break;\n      }\n      case RELOAD: {\n        this.handleReloadAction(req, rsp);\n        break;\n      }\n      case SYNCSHARD: {\n        this.handleSyncShardAction(req, rsp);\n        break;\n      }\n      case CREATEALIAS: {\n        this.handleCreateAliasAction(req, rsp);\n        break;\n      }\n      case DELETEALIAS: {\n        this.handleDeleteAliasAction(req, rsp);\n        break;\n      }\n      case SPLITSHARD:  {\n        this.handleSplitShardAction(req, rsp);\n        break;\n      }\n      case DELETESHARD: {\n        this.handleDeleteShardAction(req, rsp);\n        break;\n      }\n      case CREATESHARD: {\n        this.handleCreateShard(req, rsp);\n        break;\n      }\n      case DELETEREPLICA: {\n        this.handleRemoveReplica(req, rsp);\n        break;\n      }\n      case MIGRATE: {\n        this.handleMigrate(req, rsp);\n        break;\n      }\n      case ADDROLE: {\n        handleRole(ADDROLE, req, rsp);\n        break;\n      }\n      case REMOVEROLE: {\n        handleRole(REMOVEROLE, req, rsp);\n        break;\n      }\n      case CLUSTERPROP: {\n        this.handleProp(req, rsp);\n        break;\n      }\n      case ADDREPLICA:  {\n        this.handleAddReplica(req, rsp);\n        break;\n      }\n      case REQUESTSTATUS: {\n        this.handleRequestStatus(req, rsp);\n        break;\n      }\n      case OVERSEERSTATUS:  {\n        this.handleOverseerStatus(req, rsp);\n        break;\n      }\n      case LIST: {\n        this.handleListAction(req, rsp);\n        break;\n      }\n      case CLUSTERSTATUS:  {\n        this.handleClusterStatus(req, rsp);\n        break;\n      }\n      default: {\n          throw new RuntimeException(\"Unknown action: \" + action);\n      }\n    }\n\n    rsp.setHttpCaching(false);\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Make sure the cores is enabled\n    CoreContainer cores = getCoreContainer();\n    if (cores == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Core container instance missing\");\n    }\n\n    // Make sure that the core is ZKAware\n    if(!cores.isZooKeeperAware()) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Solr instance is not running in SolrCloud mode.\");\n    }\n\n    // Pick the action\n    SolrParams params = req.getParams();\n    CollectionAction action = null;\n    String a = params.get(CoreAdminParams.ACTION);\n    if (a != null) {\n      action = CollectionAction.get(a);\n    }\n    if (action == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown action: \" + a);\n    }\n    \n    switch (action) {\n      case CREATE: {\n        this.handleCreateAction(req, rsp);\n        break;\n      }\n      case DELETE: {\n        this.handleDeleteAction(req, rsp);\n        break;\n      }\n      case RELOAD: {\n        this.handleReloadAction(req, rsp);\n        break;\n      }\n      case SYNCSHARD: {\n        this.handleSyncShardAction(req, rsp);\n        break;\n      }\n      case CREATEALIAS: {\n        this.handleCreateAliasAction(req, rsp);\n        break;\n      }\n      case DELETEALIAS: {\n        this.handleDeleteAliasAction(req, rsp);\n        break;\n      }\n      case SPLITSHARD:  {\n        this.handleSplitShardAction(req, rsp);\n        break;\n      }\n      case DELETESHARD: {\n        this.handleDeleteShardAction(req, rsp);\n        break;\n      }\n      case CREATESHARD: {\n        this.handleCreateShard(req, rsp);\n        break;\n      }\n      case DELETEREPLICA: {\n        this.handleRemoveReplica(req, rsp);\n        break;\n      }\n      case MIGRATE: {\n        this.handleMigrate(req, rsp);\n        break;\n      }\n      case ADDROLE: {\n        handleRole(ADDROLE, req, rsp);\n        break;\n      }\n      case REMOVEROLE: {\n        handleRole(REMOVEROLE, req, rsp);\n        break;\n      }\n      case CLUSTERPROP: {\n        this.handleProp(req, rsp);\n        break;\n      }\n      case ADDREPLICA:  {\n        this.handleAddReplica(req, rsp);\n        break;\n      }\n      case REQUESTSTATUS: {\n        this.handleRequestStatus(req, rsp);\n        break;\n      }\n      case OVERSEERSTATUS:  {\n        this.handleOverseerStatus(req, rsp);\n        break;\n      }\n      default: {\n          throw new RuntimeException(\"Unknown action: \" + action);\n      }\n    }\n\n    rsp.setHttpCaching(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Make sure the cores is enabled\n    CoreContainer cores = getCoreContainer();\n    if (cores == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Core container instance missing\");\n    }\n\n    // Make sure that the core is ZKAware\n    if(!cores.isZooKeeperAware()) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Solr instance is not running in SolrCloud mode.\");\n    }\n\n    // Pick the action\n    SolrParams params = req.getParams();\n    CollectionAction action = null;\n    String a = params.get(CoreAdminParams.ACTION);\n    if (a != null) {\n      action = CollectionAction.get(a);\n    }\n    if (action == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown action: \" + a);\n    }\n    \n    switch (action) {\n      case CREATE: {\n        this.handleCreateAction(req, rsp);\n        break;\n      }\n      case DELETE: {\n        this.handleDeleteAction(req, rsp);\n        break;\n      }\n      case RELOAD: {\n        this.handleReloadAction(req, rsp);\n        break;\n      }\n      case SYNCSHARD: {\n        this.handleSyncShardAction(req, rsp);\n        break;\n      }\n      case CREATEALIAS: {\n        this.handleCreateAliasAction(req, rsp);\n        break;\n      }\n      case DELETEALIAS: {\n        this.handleDeleteAliasAction(req, rsp);\n        break;\n      }\n      case SPLITSHARD:  {\n        this.handleSplitShardAction(req, rsp);\n        break;\n      }\n      case DELETESHARD: {\n        this.handleDeleteShardAction(req, rsp);\n        break;\n      }\n      case CREATESHARD: {\n        this.handleCreateShard(req, rsp);\n        break;\n      }\n      case DELETEREPLICA: {\n        this.handleRemoveReplica(req, rsp);\n        break;\n      }\n      case MIGRATE: {\n        this.handleMigrate(req, rsp);\n        break;\n      }\n      case ADDROLE: {\n        handleRole(ADDROLE, req, rsp);\n        break;\n      }\n      case REMOVEROLE: {\n        handleRole(REMOVEROLE, req, rsp);\n        break;\n      }\n      case CLUSTERPROP: {\n        this.handleProp(req, rsp);\n        break;\n      }\n      case ADDREPLICA:  {\n        this.handleAddReplica(req, rsp);\n        break;\n      }\n      case REQUESTSTATUS: {\n        this.handleRequestStatus(req, rsp);\n        break;\n      }\n      case OVERSEERSTATUS:  {\n        this.handleOverseerStatus(req, rsp);\n        break;\n      }\n      case LIST: {\n        this.handleListAction(req, rsp);\n        break;\n      }\n      case CLUSTERSTATUS:  {\n        this.handleClusterStatus(req, rsp);\n        break;\n      }\n      default: {\n          throw new RuntimeException(\"Unknown action: \" + action);\n      }\n    }\n\n    rsp.setHttpCaching(false);\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Make sure the cores is enabled\n    CoreContainer cores = getCoreContainer();\n    if (cores == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Core container instance missing\");\n    }\n\n    // Make sure that the core is ZKAware\n    if(!cores.isZooKeeperAware()) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Solr instance is not running in SolrCloud mode.\");\n    }\n\n    // Pick the action\n    SolrParams params = req.getParams();\n    CollectionAction action = null;\n    String a = params.get(CoreAdminParams.ACTION);\n    if (a != null) {\n      action = CollectionAction.get(a);\n    }\n    if (action == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown action: \" + a);\n    }\n    \n    switch (action) {\n      case CREATE: {\n        this.handleCreateAction(req, rsp);\n        break;\n      }\n      case DELETE: {\n        this.handleDeleteAction(req, rsp);\n        break;\n      }\n      case RELOAD: {\n        this.handleReloadAction(req, rsp);\n        break;\n      }\n      case SYNCSHARD: {\n        this.handleSyncShardAction(req, rsp);\n        break;\n      }\n      case CREATEALIAS: {\n        this.handleCreateAliasAction(req, rsp);\n        break;\n      }\n      case DELETEALIAS: {\n        this.handleDeleteAliasAction(req, rsp);\n        break;\n      }\n      case SPLITSHARD:  {\n        this.handleSplitShardAction(req, rsp);\n        break;\n      }\n      case DELETESHARD: {\n        this.handleDeleteShardAction(req, rsp);\n        break;\n      }\n      case CREATESHARD: {\n        this.handleCreateShard(req, rsp);\n        break;\n      }\n      case DELETEREPLICA: {\n        this.handleRemoveReplica(req, rsp);\n        break;\n      }\n      case MIGRATE: {\n        this.handleMigrate(req, rsp);\n        break;\n      }\n      case ADDROLE: {\n        handleRole(ADDROLE, req, rsp);\n        break;\n      }\n      case REMOVEROLE: {\n        handleRole(REMOVEROLE, req, rsp);\n        break;\n      }\n      case CLUSTERPROP: {\n        this.handleProp(req, rsp);\n        break;\n      }\n      case ADDREPLICA:  {\n        this.handleAddReplica(req, rsp);\n        break;\n      }\n      case REQUESTSTATUS: {\n        this.handleRequestStatus(req, rsp);\n        break;\n      }\n      case OVERSEERSTATUS:  {\n        this.handleOverseerStatus(req, rsp);\n        break;\n      }\n      default: {\n          throw new RuntimeException(\"Unknown action: \" + action);\n      }\n    }\n\n    rsp.setHttpCaching(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a6f693ed86f289b2e42b46684409b3997f2c264a","date":1404319832,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Make sure the cores is enabled\n    CoreContainer cores = getCoreContainer();\n    if (cores == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Core container instance missing\");\n    }\n\n    // Make sure that the core is ZKAware\n    if(!cores.isZooKeeperAware()) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Solr instance is not running in SolrCloud mode.\");\n    }\n\n    // Pick the action\n    SolrParams params = req.getParams();\n    CollectionAction action = null;\n    String a = params.get(CoreAdminParams.ACTION);\n    if (a != null) {\n      action = CollectionAction.get(a);\n    }\n    if (action == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown action: \" + a);\n    }\n\n    switch (action) {\n      case CREATE: {\n        this.handleCreateAction(req, rsp);\n        break;\n      }\n      case DELETE: {\n        this.handleDeleteAction(req, rsp);\n        break;\n      }\n      case RELOAD: {\n        this.handleReloadAction(req, rsp);\n        break;\n      }\n      case SYNCSHARD: {\n        this.handleSyncShardAction(req, rsp);\n        break;\n      }\n      case CREATEALIAS: {\n        this.handleCreateAliasAction(req, rsp);\n        break;\n      }\n      case DELETEALIAS: {\n        this.handleDeleteAliasAction(req, rsp);\n        break;\n      }\n      case SPLITSHARD:  {\n        this.handleSplitShardAction(req, rsp);\n        break;\n      }\n      case DELETESHARD: {\n        this.handleDeleteShardAction(req, rsp);\n        break;\n      }\n      case CREATESHARD: {\n        this.handleCreateShard(req, rsp);\n        break;\n      }\n      case DELETEREPLICA: {\n        this.handleRemoveReplica(req, rsp);\n        break;\n      }\n      case MIGRATE: {\n        this.handleMigrate(req, rsp);\n        break;\n      }\n      case ADDROLE: {\n        handleRole(ADDROLE, req, rsp);\n        break;\n      }\n      case REMOVEROLE: {\n        handleRole(REMOVEROLE, req, rsp);\n        break;\n      }\n      case CLUSTERPROP: {\n        this.handleProp(req, rsp);\n        break;\n      }\n      case ADDREPLICA:  {\n        this.handleAddReplica(req, rsp);\n        break;\n      }\n      case REQUESTSTATUS: {\n        this.handleRequestStatus(req, rsp);\n        break;\n      }\n      case OVERSEERSTATUS:  {\n        this.handleOverseerStatus(req, rsp);\n        break;\n      }\n      case LIST: {\n        this.handleListAction(req, rsp);\n        break;\n      }\n      case CLUSTERSTATUS:  {\n        this.handleClusterStatus(req, rsp);\n        break;\n      }\n      default: {\n          throw new RuntimeException(\"Unknown action: \" + action);\n      }\n    }\n\n    rsp.setHttpCaching(false);\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Make sure the cores is enabled\n    CoreContainer cores = getCoreContainer();\n    if (cores == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Core container instance missing\");\n    }\n\n    // Make sure that the core is ZKAware\n    if(!cores.isZooKeeperAware()) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Solr instance is not running in SolrCloud mode.\");\n    }\n\n    // Pick the action\n    SolrParams params = req.getParams();\n    CollectionAction action = null;\n    String a = params.get(CoreAdminParams.ACTION);\n    if (a != null) {\n      action = CollectionAction.get(a);\n    }\n    if (action == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown action: \" + a);\n    }\n    \n    switch (action) {\n      case CREATE: {\n        this.handleCreateAction(req, rsp);\n        break;\n      }\n      case DELETE: {\n        this.handleDeleteAction(req, rsp);\n        break;\n      }\n      case RELOAD: {\n        this.handleReloadAction(req, rsp);\n        break;\n      }\n      case SYNCSHARD: {\n        this.handleSyncShardAction(req, rsp);\n        break;\n      }\n      case CREATEALIAS: {\n        this.handleCreateAliasAction(req, rsp);\n        break;\n      }\n      case DELETEALIAS: {\n        this.handleDeleteAliasAction(req, rsp);\n        break;\n      }\n      case SPLITSHARD:  {\n        this.handleSplitShardAction(req, rsp);\n        break;\n      }\n      case DELETESHARD: {\n        this.handleDeleteShardAction(req, rsp);\n        break;\n      }\n      case CREATESHARD: {\n        this.handleCreateShard(req, rsp);\n        break;\n      }\n      case DELETEREPLICA: {\n        this.handleRemoveReplica(req, rsp);\n        break;\n      }\n      case MIGRATE: {\n        this.handleMigrate(req, rsp);\n        break;\n      }\n      case ADDROLE: {\n        handleRole(ADDROLE, req, rsp);\n        break;\n      }\n      case REMOVEROLE: {\n        handleRole(REMOVEROLE, req, rsp);\n        break;\n      }\n      case CLUSTERPROP: {\n        this.handleProp(req, rsp);\n        break;\n      }\n      case ADDREPLICA:  {\n        this.handleAddReplica(req, rsp);\n        break;\n      }\n      case REQUESTSTATUS: {\n        this.handleRequestStatus(req, rsp);\n        break;\n      }\n      case OVERSEERSTATUS:  {\n        this.handleOverseerStatus(req, rsp);\n        break;\n      }\n      case LIST: {\n        this.handleListAction(req, rsp);\n        break;\n      }\n      case CLUSTERSTATUS:  {\n        this.handleClusterStatus(req, rsp);\n        break;\n      }\n      default: {\n          throw new RuntimeException(\"Unknown action: \" + action);\n      }\n    }\n\n    rsp.setHttpCaching(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4c07fa58a256dccf8b95364855fd5e9ad4d1401","date":1404386015,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Make sure the cores is enabled\n    CoreContainer cores = getCoreContainer();\n    if (cores == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Core container instance missing\");\n    }\n\n    // Make sure that the core is ZKAware\n    if(!cores.isZooKeeperAware()) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Solr instance is not running in SolrCloud mode.\");\n    }\n\n    // Pick the action\n    SolrParams params = req.getParams();\n    CollectionAction action = null;\n    String a = params.get(CoreAdminParams.ACTION);\n    if (a != null) {\n      action = CollectionAction.get(a);\n    }\n    if (action == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown action: \" + a);\n    }\n    \n    switch (action) {\n      case CREATE: {\n        this.handleCreateAction(req, rsp);\n        break;\n      }\n      case DELETE: {\n        this.handleDeleteAction(req, rsp);\n        break;\n      }\n      case RELOAD: {\n        this.handleReloadAction(req, rsp);\n        break;\n      }\n      case SYNCSHARD: {\n        this.handleSyncShardAction(req, rsp);\n        break;\n      }\n      case CREATEALIAS: {\n        this.handleCreateAliasAction(req, rsp);\n        break;\n      }\n      case DELETEALIAS: {\n        this.handleDeleteAliasAction(req, rsp);\n        break;\n      }\n      case SPLITSHARD:  {\n        this.handleSplitShardAction(req, rsp);\n        break;\n      }\n      case DELETESHARD: {\n        this.handleDeleteShardAction(req, rsp);\n        break;\n      }\n      case CREATESHARD: {\n        this.handleCreateShard(req, rsp);\n        break;\n      }\n      case DELETEREPLICA: {\n        this.handleRemoveReplica(req, rsp);\n        break;\n      }\n      case MIGRATE: {\n        this.handleMigrate(req, rsp);\n        break;\n      }\n      case ADDROLE: {\n        handleRole(ADDROLE, req, rsp);\n        break;\n      }\n      case REMOVEROLE: {\n        handleRole(REMOVEROLE, req, rsp);\n        break;\n      }\n      case CLUSTERPROP: {\n        this.handleProp(req, rsp);\n        break;\n      }\n      case ADDREPLICA:  {\n        this.handleAddReplica(req, rsp);\n        break;\n      }\n      case REQUESTSTATUS: {\n        this.handleRequestStatus(req, rsp);\n        break;\n      }\n      case OVERSEERSTATUS:  {\n        this.handleOverseerStatus(req, rsp);\n        break;\n      }\n      case LIST: {\n        this.handleListAction(req, rsp);\n        break;\n      }\n      case CLUSTERSTATUS:  {\n        this.handleClusterStatus(req, rsp);\n        break;\n      }\n      default: {\n          throw new RuntimeException(\"Unknown action: \" + action);\n      }\n    }\n\n    rsp.setHttpCaching(false);\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Make sure the cores is enabled\n    CoreContainer cores = getCoreContainer();\n    if (cores == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Core container instance missing\");\n    }\n\n    // Make sure that the core is ZKAware\n    if(!cores.isZooKeeperAware()) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Solr instance is not running in SolrCloud mode.\");\n    }\n\n    // Pick the action\n    SolrParams params = req.getParams();\n    CollectionAction action = null;\n    String a = params.get(CoreAdminParams.ACTION);\n    if (a != null) {\n      action = CollectionAction.get(a);\n    }\n    if (action == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown action: \" + a);\n    }\n\n    switch (action) {\n      case CREATE: {\n        this.handleCreateAction(req, rsp);\n        break;\n      }\n      case DELETE: {\n        this.handleDeleteAction(req, rsp);\n        break;\n      }\n      case RELOAD: {\n        this.handleReloadAction(req, rsp);\n        break;\n      }\n      case SYNCSHARD: {\n        this.handleSyncShardAction(req, rsp);\n        break;\n      }\n      case CREATEALIAS: {\n        this.handleCreateAliasAction(req, rsp);\n        break;\n      }\n      case DELETEALIAS: {\n        this.handleDeleteAliasAction(req, rsp);\n        break;\n      }\n      case SPLITSHARD:  {\n        this.handleSplitShardAction(req, rsp);\n        break;\n      }\n      case DELETESHARD: {\n        this.handleDeleteShardAction(req, rsp);\n        break;\n      }\n      case CREATESHARD: {\n        this.handleCreateShard(req, rsp);\n        break;\n      }\n      case DELETEREPLICA: {\n        this.handleRemoveReplica(req, rsp);\n        break;\n      }\n      case MIGRATE: {\n        this.handleMigrate(req, rsp);\n        break;\n      }\n      case ADDROLE: {\n        handleRole(ADDROLE, req, rsp);\n        break;\n      }\n      case REMOVEROLE: {\n        handleRole(REMOVEROLE, req, rsp);\n        break;\n      }\n      case CLUSTERPROP: {\n        this.handleProp(req, rsp);\n        break;\n      }\n      case ADDREPLICA:  {\n        this.handleAddReplica(req, rsp);\n        break;\n      }\n      case REQUESTSTATUS: {\n        this.handleRequestStatus(req, rsp);\n        break;\n      }\n      case OVERSEERSTATUS:  {\n        this.handleOverseerStatus(req, rsp);\n        break;\n      }\n      case LIST: {\n        this.handleListAction(req, rsp);\n        break;\n      }\n      case CLUSTERSTATUS:  {\n        this.handleClusterStatus(req, rsp);\n        break;\n      }\n      default: {\n          throw new RuntimeException(\"Unknown action: \" + action);\n      }\n    }\n\n    rsp.setHttpCaching(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9279b175e5e66258442d2123a50f052219a9cc1b","date":1410531077,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Make sure the cores is enabled\n    CoreContainer cores = getCoreContainer();\n    if (cores == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Core container instance missing\");\n    }\n\n    // Make sure that the core is ZKAware\n    if(!cores.isZooKeeperAware()) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Solr instance is not running in SolrCloud mode.\");\n    }\n\n    // Pick the action\n    SolrParams params = req.getParams();\n    CollectionAction action = null;\n    String a = params.get(CoreAdminParams.ACTION);\n    if (a != null) {\n      action = CollectionAction.get(a);\n    }\n    if (action == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown action: \" + a);\n    }\n\n    switch (action) {\n      case CREATE: {\n        this.handleCreateAction(req, rsp);\n        break;\n      }\n      case DELETE: {\n        this.handleDeleteAction(req, rsp);\n        break;\n      }\n      case RELOAD: {\n        this.handleReloadAction(req, rsp);\n        break;\n      }\n      case SYNCSHARD: {\n        this.handleSyncShardAction(req, rsp);\n        break;\n      }\n      case CREATEALIAS: {\n        this.handleCreateAliasAction(req, rsp);\n        break;\n      }\n      case DELETEALIAS: {\n        this.handleDeleteAliasAction(req, rsp);\n        break;\n      }\n      case SPLITSHARD:  {\n        this.handleSplitShardAction(req, rsp);\n        break;\n      }\n      case DELETESHARD: {\n        this.handleDeleteShardAction(req, rsp);\n        break;\n      }\n      case CREATESHARD: {\n        this.handleCreateShard(req, rsp);\n        break;\n      }\n      case DELETEREPLICA: {\n        this.handleRemoveReplica(req, rsp);\n        break;\n      }\n      case MIGRATE: {\n        this.handleMigrate(req, rsp);\n        break;\n      }\n      case ADDROLE: {\n        handleRole(ADDROLE, req, rsp);\n        break;\n      }\n      case REMOVEROLE: {\n        handleRole(REMOVEROLE, req, rsp);\n        break;\n      }\n      case CLUSTERPROP: {\n        this.handleProp(req, rsp);\n        break;\n      }\n      case ADDREPLICA:  {\n        this.handleAddReplica(req, rsp);\n        break;\n      }\n      case REQUESTSTATUS: {\n        this.handleRequestStatus(req, rsp);\n        break;\n      }\n      case OVERSEERSTATUS:  {\n        this.handleOverseerStatus(req, rsp);\n        break;\n      }\n      case LIST: {\n        this.handleListAction(req, rsp);\n        break;\n      }\n      case CLUSTERSTATUS:  {\n        this.handleClusterStatus(req, rsp);\n        break;\n      }\n      default: {\n          throw new RuntimeException(\"Unknown action: \" + action);\n      }\n    }\n\n    rsp.setHttpCaching(false);\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Make sure the cores is enabled\n    CoreContainer cores = getCoreContainer();\n    if (cores == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Core container instance missing\");\n    }\n\n    // Make sure that the core is ZKAware\n    if(!cores.isZooKeeperAware()) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Solr instance is not running in SolrCloud mode.\");\n    }\n\n    // Pick the action\n    SolrParams params = req.getParams();\n    CollectionAction action = null;\n    String a = params.get(CoreAdminParams.ACTION);\n    if (a != null) {\n      action = CollectionAction.get(a);\n    }\n    if (action == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown action: \" + a);\n    }\n    \n    switch (action) {\n      case CREATE: {\n        this.handleCreateAction(req, rsp);\n        break;\n      }\n      case DELETE: {\n        this.handleDeleteAction(req, rsp);\n        break;\n      }\n      case RELOAD: {\n        this.handleReloadAction(req, rsp);\n        break;\n      }\n      case SYNCSHARD: {\n        this.handleSyncShardAction(req, rsp);\n        break;\n      }\n      case CREATEALIAS: {\n        this.handleCreateAliasAction(req, rsp);\n        break;\n      }\n      case DELETEALIAS: {\n        this.handleDeleteAliasAction(req, rsp);\n        break;\n      }\n      case SPLITSHARD:  {\n        this.handleSplitShardAction(req, rsp);\n        break;\n      }\n      case DELETESHARD: {\n        this.handleDeleteShardAction(req, rsp);\n        break;\n      }\n      case CREATESHARD: {\n        this.handleCreateShard(req, rsp);\n        break;\n      }\n      case DELETEREPLICA: {\n        this.handleRemoveReplica(req, rsp);\n        break;\n      }\n      case MIGRATE: {\n        this.handleMigrate(req, rsp);\n        break;\n      }\n      case ADDROLE: {\n        handleRole(ADDROLE, req, rsp);\n        break;\n      }\n      case REMOVEROLE: {\n        handleRole(REMOVEROLE, req, rsp);\n        break;\n      }\n      case CLUSTERPROP: {\n        this.handleProp(req, rsp);\n        break;\n      }\n      case ADDREPLICA:  {\n        this.handleAddReplica(req, rsp);\n        break;\n      }\n      case REQUESTSTATUS: {\n        this.handleRequestStatus(req, rsp);\n        break;\n      }\n      case OVERSEERSTATUS:  {\n        this.handleOverseerStatus(req, rsp);\n        break;\n      }\n      case LIST: {\n        this.handleListAction(req, rsp);\n        break;\n      }\n      case CLUSTERSTATUS:  {\n        this.handleClusterStatus(req, rsp);\n        break;\n      }\n      default: {\n          throw new RuntimeException(\"Unknown action: \" + action);\n      }\n    }\n\n    rsp.setHttpCaching(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dc2bafa00000be70227a04c29e3f885ff41e531d","date":1412182669,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Make sure the cores is enabled\n    CoreContainer cores = getCoreContainer();\n    if (cores == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Core container instance missing\");\n    }\n\n    // Make sure that the core is ZKAware\n    if(!cores.isZooKeeperAware()) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Solr instance is not running in SolrCloud mode.\");\n    }\n\n    // Pick the action\n    SolrParams params = req.getParams();\n    CollectionAction action = null;\n    String a = params.get(CoreAdminParams.ACTION);\n    if (a != null) {\n      action = CollectionAction.get(a);\n    }\n    if (action == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown action: \" + a);\n    }\n\n    switch (action) {\n      case CREATE: {\n        this.handleCreateAction(req, rsp);\n        break;\n      }\n      case DELETE: {\n        this.handleDeleteAction(req, rsp);\n        break;\n      }\n      case RELOAD: {\n        this.handleReloadAction(req, rsp);\n        break;\n      }\n      case SYNCSHARD: {\n        this.handleSyncShardAction(req, rsp);\n        break;\n      }\n      case CREATEALIAS: {\n        this.handleCreateAliasAction(req, rsp);\n        break;\n      }\n      case DELETEALIAS: {\n        this.handleDeleteAliasAction(req, rsp);\n        break;\n      }\n      case SPLITSHARD:  {\n        this.handleSplitShardAction(req, rsp);\n        break;\n      }\n      case DELETESHARD: {\n        this.handleDeleteShardAction(req, rsp);\n        break;\n      }\n      case CREATESHARD: {\n        this.handleCreateShard(req, rsp);\n        break;\n      }\n      case DELETEREPLICA: {\n        this.handleRemoveReplica(req, rsp);\n        break;\n      }\n      case MIGRATE: {\n        this.handleMigrate(req, rsp);\n        break;\n      }\n      case ADDROLE: {\n        handleRole(ADDROLE, req, rsp);\n        break;\n      }\n      case REMOVEROLE: {\n        handleRole(REMOVEROLE, req, rsp);\n        break;\n      }\n      case CLUSTERPROP: {\n        this.handleProp(req, rsp);\n        break;\n      }\n      case ADDREPLICA:  {\n        this.handleAddReplica(req, rsp);\n        break;\n      }\n      case REQUESTSTATUS: {\n        this.handleRequestStatus(req, rsp);\n        break;\n      }\n      case OVERSEERSTATUS:  {\n        this.handleOverseerStatus(req, rsp);\n        break;\n      }\n      case LIST: {\n        this.handleListAction(req, rsp);\n        break;\n      }\n      case CLUSTERSTATUS:  {\n        this.handleClusterStatus(req, rsp);\n        break;\n      }\n      case ADDREPLICAPROP: {\n        this.handleAddReplicaProp(req, rsp);\n        break;\n      }\n      case DELETEREPLICAPROP: {\n        this.handleDeleteReplicaProp(req, rsp);\n        break;\n      }\n\n      default: {\n          throw new RuntimeException(\"Unknown action: \" + action);\n      }\n    }\n\n    rsp.setHttpCaching(false);\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Make sure the cores is enabled\n    CoreContainer cores = getCoreContainer();\n    if (cores == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Core container instance missing\");\n    }\n\n    // Make sure that the core is ZKAware\n    if(!cores.isZooKeeperAware()) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Solr instance is not running in SolrCloud mode.\");\n    }\n\n    // Pick the action\n    SolrParams params = req.getParams();\n    CollectionAction action = null;\n    String a = params.get(CoreAdminParams.ACTION);\n    if (a != null) {\n      action = CollectionAction.get(a);\n    }\n    if (action == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown action: \" + a);\n    }\n\n    switch (action) {\n      case CREATE: {\n        this.handleCreateAction(req, rsp);\n        break;\n      }\n      case DELETE: {\n        this.handleDeleteAction(req, rsp);\n        break;\n      }\n      case RELOAD: {\n        this.handleReloadAction(req, rsp);\n        break;\n      }\n      case SYNCSHARD: {\n        this.handleSyncShardAction(req, rsp);\n        break;\n      }\n      case CREATEALIAS: {\n        this.handleCreateAliasAction(req, rsp);\n        break;\n      }\n      case DELETEALIAS: {\n        this.handleDeleteAliasAction(req, rsp);\n        break;\n      }\n      case SPLITSHARD:  {\n        this.handleSplitShardAction(req, rsp);\n        break;\n      }\n      case DELETESHARD: {\n        this.handleDeleteShardAction(req, rsp);\n        break;\n      }\n      case CREATESHARD: {\n        this.handleCreateShard(req, rsp);\n        break;\n      }\n      case DELETEREPLICA: {\n        this.handleRemoveReplica(req, rsp);\n        break;\n      }\n      case MIGRATE: {\n        this.handleMigrate(req, rsp);\n        break;\n      }\n      case ADDROLE: {\n        handleRole(ADDROLE, req, rsp);\n        break;\n      }\n      case REMOVEROLE: {\n        handleRole(REMOVEROLE, req, rsp);\n        break;\n      }\n      case CLUSTERPROP: {\n        this.handleProp(req, rsp);\n        break;\n      }\n      case ADDREPLICA:  {\n        this.handleAddReplica(req, rsp);\n        break;\n      }\n      case REQUESTSTATUS: {\n        this.handleRequestStatus(req, rsp);\n        break;\n      }\n      case OVERSEERSTATUS:  {\n        this.handleOverseerStatus(req, rsp);\n        break;\n      }\n      case LIST: {\n        this.handleListAction(req, rsp);\n        break;\n      }\n      case CLUSTERSTATUS:  {\n        this.handleClusterStatus(req, rsp);\n        break;\n      }\n      default: {\n          throw new RuntimeException(\"Unknown action: \" + action);\n      }\n    }\n\n    rsp.setHttpCaching(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d9a47902d6207303f5ed3e7aaca62ca33433af66","date":1412435312,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Make sure the cores is enabled\n    CoreContainer cores = getCoreContainer();\n    if (cores == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Core container instance missing\");\n    }\n\n    // Make sure that the core is ZKAware\n    if(!cores.isZooKeeperAware()) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Solr instance is not running in SolrCloud mode.\");\n    }\n\n    // Pick the action\n    SolrParams params = req.getParams();\n    CollectionAction action = null;\n    String a = params.get(CoreAdminParams.ACTION);\n    if (a != null) {\n      action = CollectionAction.get(a);\n    }\n    if (action == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown action: \" + a);\n    }\n\n    switch (action) {\n      case CREATE: {\n        this.handleCreateAction(req, rsp);\n        break;\n      }\n      case DELETE: {\n        this.handleDeleteAction(req, rsp);\n        break;\n      }\n      case RELOAD: {\n        this.handleReloadAction(req, rsp);\n        break;\n      }\n      case SYNCSHARD: {\n        this.handleSyncShardAction(req, rsp);\n        break;\n      }\n      case CREATEALIAS: {\n        this.handleCreateAliasAction(req, rsp);\n        break;\n      }\n      case DELETEALIAS: {\n        this.handleDeleteAliasAction(req, rsp);\n        break;\n      }\n      case SPLITSHARD:  {\n        this.handleSplitShardAction(req, rsp);\n        break;\n      }\n      case DELETESHARD: {\n        this.handleDeleteShardAction(req, rsp);\n        break;\n      }\n      case CREATESHARD: {\n        this.handleCreateShard(req, rsp);\n        break;\n      }\n      case DELETEREPLICA: {\n        this.handleRemoveReplica(req, rsp);\n        break;\n      }\n      case MIGRATE: {\n        this.handleMigrate(req, rsp);\n        break;\n      }\n      case ADDROLE: {\n        handleRole(ADDROLE, req, rsp);\n        break;\n      }\n      case REMOVEROLE: {\n        handleRole(REMOVEROLE, req, rsp);\n        break;\n      }\n      case CLUSTERPROP: {\n        this.handleProp(req, rsp);\n        break;\n      }\n      case ADDREPLICA:  {\n        this.handleAddReplica(req, rsp);\n        break;\n      }\n      case REQUESTSTATUS: {\n        this.handleRequestStatus(req, rsp);\n        break;\n      }\n      case OVERSEERSTATUS:  {\n        this.handleOverseerStatus(req, rsp);\n        break;\n      }\n      case LIST: {\n        this.handleListAction(req, rsp);\n        break;\n      }\n      case CLUSTERSTATUS:  {\n        this.handleClusterStatus(req, rsp);\n        break;\n      }\n      case ADDREPLICAPROP: {\n        this.handleAddReplicaProp(req, rsp);\n        break;\n      }\n      case DELETEREPLICAPROP: {\n        this.handleDeleteReplicaProp(req, rsp);\n        break;\n      }\n\n      default: {\n          throw new RuntimeException(\"Unknown action: \" + action);\n      }\n    }\n\n    rsp.setHttpCaching(false);\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Make sure the cores is enabled\n    CoreContainer cores = getCoreContainer();\n    if (cores == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Core container instance missing\");\n    }\n\n    // Make sure that the core is ZKAware\n    if(!cores.isZooKeeperAware()) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Solr instance is not running in SolrCloud mode.\");\n    }\n\n    // Pick the action\n    SolrParams params = req.getParams();\n    CollectionAction action = null;\n    String a = params.get(CoreAdminParams.ACTION);\n    if (a != null) {\n      action = CollectionAction.get(a);\n    }\n    if (action == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown action: \" + a);\n    }\n\n    switch (action) {\n      case CREATE: {\n        this.handleCreateAction(req, rsp);\n        break;\n      }\n      case DELETE: {\n        this.handleDeleteAction(req, rsp);\n        break;\n      }\n      case RELOAD: {\n        this.handleReloadAction(req, rsp);\n        break;\n      }\n      case SYNCSHARD: {\n        this.handleSyncShardAction(req, rsp);\n        break;\n      }\n      case CREATEALIAS: {\n        this.handleCreateAliasAction(req, rsp);\n        break;\n      }\n      case DELETEALIAS: {\n        this.handleDeleteAliasAction(req, rsp);\n        break;\n      }\n      case SPLITSHARD:  {\n        this.handleSplitShardAction(req, rsp);\n        break;\n      }\n      case DELETESHARD: {\n        this.handleDeleteShardAction(req, rsp);\n        break;\n      }\n      case CREATESHARD: {\n        this.handleCreateShard(req, rsp);\n        break;\n      }\n      case DELETEREPLICA: {\n        this.handleRemoveReplica(req, rsp);\n        break;\n      }\n      case MIGRATE: {\n        this.handleMigrate(req, rsp);\n        break;\n      }\n      case ADDROLE: {\n        handleRole(ADDROLE, req, rsp);\n        break;\n      }\n      case REMOVEROLE: {\n        handleRole(REMOVEROLE, req, rsp);\n        break;\n      }\n      case CLUSTERPROP: {\n        this.handleProp(req, rsp);\n        break;\n      }\n      case ADDREPLICA:  {\n        this.handleAddReplica(req, rsp);\n        break;\n      }\n      case REQUESTSTATUS: {\n        this.handleRequestStatus(req, rsp);\n        break;\n      }\n      case OVERSEERSTATUS:  {\n        this.handleOverseerStatus(req, rsp);\n        break;\n      }\n      case LIST: {\n        this.handleListAction(req, rsp);\n        break;\n      }\n      case CLUSTERSTATUS:  {\n        this.handleClusterStatus(req, rsp);\n        break;\n      }\n      default: {\n          throw new RuntimeException(\"Unknown action: \" + action);\n      }\n    }\n\n    rsp.setHttpCaching(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"64707d25b6352cf02909d3916038a3b3cec7f0a8","date":1412782122,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Make sure the cores is enabled\n    CoreContainer cores = getCoreContainer();\n    if (cores == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Core container instance missing\");\n    }\n\n    // Make sure that the core is ZKAware\n    if(!cores.isZooKeeperAware()) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Solr instance is not running in SolrCloud mode.\");\n    }\n\n    // Pick the action\n    SolrParams params = req.getParams();\n    CollectionAction action = null;\n    String a = params.get(CoreAdminParams.ACTION);\n    if (a != null) {\n      action = CollectionAction.get(a);\n    }\n    if (action == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown action: \" + a);\n    }\n\n    switch (action) {\n      case CREATE: {\n        this.handleCreateAction(req, rsp);\n        break;\n      }\n      case DELETE: {\n        this.handleDeleteAction(req, rsp);\n        break;\n      }\n      case RELOAD: {\n        this.handleReloadAction(req, rsp);\n        break;\n      }\n      case SYNCSHARD: {\n        this.handleSyncShardAction(req, rsp);\n        break;\n      }\n      case CREATEALIAS: {\n        this.handleCreateAliasAction(req, rsp);\n        break;\n      }\n      case DELETEALIAS: {\n        this.handleDeleteAliasAction(req, rsp);\n        break;\n      }\n      case SPLITSHARD:  {\n        this.handleSplitShardAction(req, rsp);\n        break;\n      }\n      case DELETESHARD: {\n        this.handleDeleteShardAction(req, rsp);\n        break;\n      }\n      case CREATESHARD: {\n        this.handleCreateShard(req, rsp);\n        break;\n      }\n      case DELETEREPLICA: {\n        this.handleRemoveReplica(req, rsp);\n        break;\n      }\n      case MIGRATE: {\n        this.handleMigrate(req, rsp);\n        break;\n      }\n      case ADDROLE: {\n        handleRole(ADDROLE, req, rsp);\n        break;\n      }\n      case REMOVEROLE: {\n        handleRole(REMOVEROLE, req, rsp);\n        break;\n      }\n      case CLUSTERPROP: {\n        this.handleProp(req, rsp);\n        break;\n      }\n      case ADDREPLICA:  {\n        this.handleAddReplica(req, rsp);\n        break;\n      }\n      case REQUESTSTATUS: {\n        this.handleRequestStatus(req, rsp);\n        break;\n      }\n      case OVERSEERSTATUS:  {\n        this.handleOverseerStatus(req, rsp);\n        break;\n      }\n      case LIST: {\n        this.handleListAction(req, rsp);\n        break;\n      }\n      case CLUSTERSTATUS:  {\n        this.handleClusterStatus(req, rsp);\n        break;\n      }\n      case ADDREPLICAPROP: {\n        this.handleAddReplicaProp(req, rsp);\n        break;\n      }\n      case DELETEREPLICAPROP: {\n        this.handleDeleteReplicaProp(req, rsp);\n        break;\n      }\n      case BALANCESLICEUNIQUE: {\n        this.handleBalanceSliceUnique(req, rsp);\n        break;\n      }\n      default: {\n          throw new RuntimeException(\"Unknown action: \" + action);\n      }\n    }\n\n    rsp.setHttpCaching(false);\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Make sure the cores is enabled\n    CoreContainer cores = getCoreContainer();\n    if (cores == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Core container instance missing\");\n    }\n\n    // Make sure that the core is ZKAware\n    if(!cores.isZooKeeperAware()) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Solr instance is not running in SolrCloud mode.\");\n    }\n\n    // Pick the action\n    SolrParams params = req.getParams();\n    CollectionAction action = null;\n    String a = params.get(CoreAdminParams.ACTION);\n    if (a != null) {\n      action = CollectionAction.get(a);\n    }\n    if (action == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown action: \" + a);\n    }\n\n    switch (action) {\n      case CREATE: {\n        this.handleCreateAction(req, rsp);\n        break;\n      }\n      case DELETE: {\n        this.handleDeleteAction(req, rsp);\n        break;\n      }\n      case RELOAD: {\n        this.handleReloadAction(req, rsp);\n        break;\n      }\n      case SYNCSHARD: {\n        this.handleSyncShardAction(req, rsp);\n        break;\n      }\n      case CREATEALIAS: {\n        this.handleCreateAliasAction(req, rsp);\n        break;\n      }\n      case DELETEALIAS: {\n        this.handleDeleteAliasAction(req, rsp);\n        break;\n      }\n      case SPLITSHARD:  {\n        this.handleSplitShardAction(req, rsp);\n        break;\n      }\n      case DELETESHARD: {\n        this.handleDeleteShardAction(req, rsp);\n        break;\n      }\n      case CREATESHARD: {\n        this.handleCreateShard(req, rsp);\n        break;\n      }\n      case DELETEREPLICA: {\n        this.handleRemoveReplica(req, rsp);\n        break;\n      }\n      case MIGRATE: {\n        this.handleMigrate(req, rsp);\n        break;\n      }\n      case ADDROLE: {\n        handleRole(ADDROLE, req, rsp);\n        break;\n      }\n      case REMOVEROLE: {\n        handleRole(REMOVEROLE, req, rsp);\n        break;\n      }\n      case CLUSTERPROP: {\n        this.handleProp(req, rsp);\n        break;\n      }\n      case ADDREPLICA:  {\n        this.handleAddReplica(req, rsp);\n        break;\n      }\n      case REQUESTSTATUS: {\n        this.handleRequestStatus(req, rsp);\n        break;\n      }\n      case OVERSEERSTATUS:  {\n        this.handleOverseerStatus(req, rsp);\n        break;\n      }\n      case LIST: {\n        this.handleListAction(req, rsp);\n        break;\n      }\n      case CLUSTERSTATUS:  {\n        this.handleClusterStatus(req, rsp);\n        break;\n      }\n      case ADDREPLICAPROP: {\n        this.handleAddReplicaProp(req, rsp);\n        break;\n      }\n      case DELETEREPLICAPROP: {\n        this.handleDeleteReplicaProp(req, rsp);\n        break;\n      }\n\n      default: {\n          throw new RuntimeException(\"Unknown action: \" + action);\n      }\n    }\n\n    rsp.setHttpCaching(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55980207f1977bd1463465de1659b821347e2fa8","date":1413336386,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Make sure the cores is enabled\n    CoreContainer cores = getCoreContainer();\n    if (cores == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Core container instance missing\");\n    }\n\n    // Make sure that the core is ZKAware\n    if(!cores.isZooKeeperAware()) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Solr instance is not running in SolrCloud mode.\");\n    }\n\n    // Pick the action\n    SolrParams params = req.getParams();\n    CollectionAction action = null;\n    String a = params.get(CoreAdminParams.ACTION);\n    if (a != null) {\n      action = CollectionAction.get(a);\n    }\n    if (action == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown action: \" + a);\n    }\n\n    switch (action) {\n      case CREATE: {\n        this.handleCreateAction(req, rsp);\n        break;\n      }\n      case DELETE: {\n        this.handleDeleteAction(req, rsp);\n        break;\n      }\n      case RELOAD: {\n        this.handleReloadAction(req, rsp);\n        break;\n      }\n      case SYNCSHARD: {\n        this.handleSyncShardAction(req, rsp);\n        break;\n      }\n      case CREATEALIAS: {\n        this.handleCreateAliasAction(req, rsp);\n        break;\n      }\n      case DELETEALIAS: {\n        this.handleDeleteAliasAction(req, rsp);\n        break;\n      }\n      case SPLITSHARD:  {\n        this.handleSplitShardAction(req, rsp);\n        break;\n      }\n      case DELETESHARD: {\n        this.handleDeleteShardAction(req, rsp);\n        break;\n      }\n      case CREATESHARD: {\n        this.handleCreateShard(req, rsp);\n        break;\n      }\n      case DELETEREPLICA: {\n        this.handleRemoveReplica(req, rsp);\n        break;\n      }\n      case MIGRATE: {\n        this.handleMigrate(req, rsp);\n        break;\n      }\n      case ADDROLE: {\n        handleRole(ADDROLE, req, rsp);\n        break;\n      }\n      case REMOVEROLE: {\n        handleRole(REMOVEROLE, req, rsp);\n        break;\n      }\n      case CLUSTERPROP: {\n        this.handleProp(req, rsp);\n        break;\n      }\n      case ADDREPLICA:  {\n        this.handleAddReplica(req, rsp);\n        break;\n      }\n      case REQUESTSTATUS: {\n        this.handleRequestStatus(req, rsp);\n        break;\n      }\n      case OVERSEERSTATUS:  {\n        this.handleOverseerStatus(req, rsp);\n        break;\n      }\n      case LIST: {\n        this.handleListAction(req, rsp);\n        break;\n      }\n      case CLUSTERSTATUS:  {\n        this.handleClusterStatus(req, rsp);\n        break;\n      }\n      case ADDREPLICAPROP: {\n        this.handleAddReplicaProp(req, rsp);\n        break;\n      }\n      case DELETEREPLICAPROP: {\n        this.handleDeleteReplicaProp(req, rsp);\n        break;\n      }\n      case BALANCESLICEUNIQUE: {\n        this.handleBalanceSliceUnique(req, rsp);\n        break;\n      }\n      default: {\n          throw new RuntimeException(\"Unknown action: \" + action);\n      }\n    }\n\n    rsp.setHttpCaching(false);\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Make sure the cores is enabled\n    CoreContainer cores = getCoreContainer();\n    if (cores == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Core container instance missing\");\n    }\n\n    // Make sure that the core is ZKAware\n    if(!cores.isZooKeeperAware()) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Solr instance is not running in SolrCloud mode.\");\n    }\n\n    // Pick the action\n    SolrParams params = req.getParams();\n    CollectionAction action = null;\n    String a = params.get(CoreAdminParams.ACTION);\n    if (a != null) {\n      action = CollectionAction.get(a);\n    }\n    if (action == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown action: \" + a);\n    }\n\n    switch (action) {\n      case CREATE: {\n        this.handleCreateAction(req, rsp);\n        break;\n      }\n      case DELETE: {\n        this.handleDeleteAction(req, rsp);\n        break;\n      }\n      case RELOAD: {\n        this.handleReloadAction(req, rsp);\n        break;\n      }\n      case SYNCSHARD: {\n        this.handleSyncShardAction(req, rsp);\n        break;\n      }\n      case CREATEALIAS: {\n        this.handleCreateAliasAction(req, rsp);\n        break;\n      }\n      case DELETEALIAS: {\n        this.handleDeleteAliasAction(req, rsp);\n        break;\n      }\n      case SPLITSHARD:  {\n        this.handleSplitShardAction(req, rsp);\n        break;\n      }\n      case DELETESHARD: {\n        this.handleDeleteShardAction(req, rsp);\n        break;\n      }\n      case CREATESHARD: {\n        this.handleCreateShard(req, rsp);\n        break;\n      }\n      case DELETEREPLICA: {\n        this.handleRemoveReplica(req, rsp);\n        break;\n      }\n      case MIGRATE: {\n        this.handleMigrate(req, rsp);\n        break;\n      }\n      case ADDROLE: {\n        handleRole(ADDROLE, req, rsp);\n        break;\n      }\n      case REMOVEROLE: {\n        handleRole(REMOVEROLE, req, rsp);\n        break;\n      }\n      case CLUSTERPROP: {\n        this.handleProp(req, rsp);\n        break;\n      }\n      case ADDREPLICA:  {\n        this.handleAddReplica(req, rsp);\n        break;\n      }\n      case REQUESTSTATUS: {\n        this.handleRequestStatus(req, rsp);\n        break;\n      }\n      case OVERSEERSTATUS:  {\n        this.handleOverseerStatus(req, rsp);\n        break;\n      }\n      case LIST: {\n        this.handleListAction(req, rsp);\n        break;\n      }\n      case CLUSTERSTATUS:  {\n        this.handleClusterStatus(req, rsp);\n        break;\n      }\n      case ADDREPLICAPROP: {\n        this.handleAddReplicaProp(req, rsp);\n        break;\n      }\n      case DELETEREPLICAPROP: {\n        this.handleDeleteReplicaProp(req, rsp);\n        break;\n      }\n\n      default: {\n          throw new RuntimeException(\"Unknown action: \" + action);\n      }\n    }\n\n    rsp.setHttpCaching(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5455c7b3fed6c1671990a44c19071cb0488c2c25","date":1413557414,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Make sure the cores is enabled\n    CoreContainer cores = getCoreContainer();\n    if (cores == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Core container instance missing\");\n    }\n\n    // Make sure that the core is ZKAware\n    if(!cores.isZooKeeperAware()) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Solr instance is not running in SolrCloud mode.\");\n    }\n\n    // Pick the action\n    SolrParams params = req.getParams();\n    CollectionAction action = null;\n    String a = params.get(CoreAdminParams.ACTION);\n    if (a != null) {\n      action = CollectionAction.get(a);\n    }\n    if (action == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown action: \" + a);\n    }\n\n    switch (action) {\n      case CREATE: {\n        this.handleCreateAction(req, rsp);\n        break;\n      }\n      case DELETE: {\n        this.handleDeleteAction(req, rsp);\n        break;\n      }\n      case RELOAD: {\n        this.handleReloadAction(req, rsp);\n        break;\n      }\n      case SYNCSHARD: {\n        this.handleSyncShardAction(req, rsp);\n        break;\n      }\n      case CREATEALIAS: {\n        this.handleCreateAliasAction(req, rsp);\n        break;\n      }\n      case DELETEALIAS: {\n        this.handleDeleteAliasAction(req, rsp);\n        break;\n      }\n      case SPLITSHARD:  {\n        this.handleSplitShardAction(req, rsp);\n        break;\n      }\n      case DELETESHARD: {\n        this.handleDeleteShardAction(req, rsp);\n        break;\n      }\n      case CREATESHARD: {\n        this.handleCreateShard(req, rsp);\n        break;\n      }\n      case DELETEREPLICA: {\n        this.handleRemoveReplica(req, rsp);\n        break;\n      }\n      case MIGRATE: {\n        this.handleMigrate(req, rsp);\n        break;\n      }\n      case ADDROLE: {\n        handleRole(ADDROLE, req, rsp);\n        break;\n      }\n      case REMOVEROLE: {\n        handleRole(REMOVEROLE, req, rsp);\n        break;\n      }\n      case CLUSTERPROP: {\n        this.handleProp(req, rsp);\n        break;\n      }\n      case ADDREPLICA:  {\n        this.handleAddReplica(req, rsp);\n        break;\n      }\n      case REQUESTSTATUS: {\n        this.handleRequestStatus(req, rsp);\n        break;\n      }\n      case OVERSEERSTATUS:  {\n        this.handleOverseerStatus(req, rsp);\n        break;\n      }\n      case LIST: {\n        this.handleListAction(req, rsp);\n        break;\n      }\n      case CLUSTERSTATUS:  {\n        this.handleClusterStatus(req, rsp);\n        break;\n      }\n      case ADDREPLICAPROP: {\n        this.handleAddReplicaProp(req, rsp);\n        break;\n      }\n      case DELETEREPLICAPROP: {\n        this.handleDeleteReplicaProp(req, rsp);\n        break;\n      }\n      case BALANCESLICEUNIQUE: {\n        this.handleBalanceSliceUnique(req, rsp);\n        break;\n      }\n      case REBALANCELEADERS: {\n        this.handleBalanceLeaders(req, rsp);\n        break;\n      }\n      default: {\n          throw new RuntimeException(\"Unknown action: \" + action);\n      }\n    }\n\n    rsp.setHttpCaching(false);\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Make sure the cores is enabled\n    CoreContainer cores = getCoreContainer();\n    if (cores == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Core container instance missing\");\n    }\n\n    // Make sure that the core is ZKAware\n    if(!cores.isZooKeeperAware()) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Solr instance is not running in SolrCloud mode.\");\n    }\n\n    // Pick the action\n    SolrParams params = req.getParams();\n    CollectionAction action = null;\n    String a = params.get(CoreAdminParams.ACTION);\n    if (a != null) {\n      action = CollectionAction.get(a);\n    }\n    if (action == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown action: \" + a);\n    }\n\n    switch (action) {\n      case CREATE: {\n        this.handleCreateAction(req, rsp);\n        break;\n      }\n      case DELETE: {\n        this.handleDeleteAction(req, rsp);\n        break;\n      }\n      case RELOAD: {\n        this.handleReloadAction(req, rsp);\n        break;\n      }\n      case SYNCSHARD: {\n        this.handleSyncShardAction(req, rsp);\n        break;\n      }\n      case CREATEALIAS: {\n        this.handleCreateAliasAction(req, rsp);\n        break;\n      }\n      case DELETEALIAS: {\n        this.handleDeleteAliasAction(req, rsp);\n        break;\n      }\n      case SPLITSHARD:  {\n        this.handleSplitShardAction(req, rsp);\n        break;\n      }\n      case DELETESHARD: {\n        this.handleDeleteShardAction(req, rsp);\n        break;\n      }\n      case CREATESHARD: {\n        this.handleCreateShard(req, rsp);\n        break;\n      }\n      case DELETEREPLICA: {\n        this.handleRemoveReplica(req, rsp);\n        break;\n      }\n      case MIGRATE: {\n        this.handleMigrate(req, rsp);\n        break;\n      }\n      case ADDROLE: {\n        handleRole(ADDROLE, req, rsp);\n        break;\n      }\n      case REMOVEROLE: {\n        handleRole(REMOVEROLE, req, rsp);\n        break;\n      }\n      case CLUSTERPROP: {\n        this.handleProp(req, rsp);\n        break;\n      }\n      case ADDREPLICA:  {\n        this.handleAddReplica(req, rsp);\n        break;\n      }\n      case REQUESTSTATUS: {\n        this.handleRequestStatus(req, rsp);\n        break;\n      }\n      case OVERSEERSTATUS:  {\n        this.handleOverseerStatus(req, rsp);\n        break;\n      }\n      case LIST: {\n        this.handleListAction(req, rsp);\n        break;\n      }\n      case CLUSTERSTATUS:  {\n        this.handleClusterStatus(req, rsp);\n        break;\n      }\n      case ADDREPLICAPROP: {\n        this.handleAddReplicaProp(req, rsp);\n        break;\n      }\n      case DELETEREPLICAPROP: {\n        this.handleDeleteReplicaProp(req, rsp);\n        break;\n      }\n      case BALANCESLICEUNIQUE: {\n        this.handleBalanceSliceUnique(req, rsp);\n        break;\n      }\n      default: {\n          throw new RuntimeException(\"Unknown action: \" + action);\n      }\n    }\n\n    rsp.setHttpCaching(false);\n  }\n\n","bugFix":null,"bugIntro":["1bd110770d1b52ca7d7201410a102c468c540967"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0a22eafe3f72a4c2945eaad9547e6c78816978f4","date":1413956657,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Make sure the cores is enabled\n    CoreContainer cores = getCoreContainer();\n    if (cores == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Core container instance missing\");\n    }\n\n    // Make sure that the core is ZKAware\n    if(!cores.isZooKeeperAware()) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Solr instance is not running in SolrCloud mode.\");\n    }\n\n    // Pick the action\n    SolrParams params = req.getParams();\n    CollectionAction action = null;\n    String a = params.get(CoreAdminParams.ACTION);\n    if (a != null) {\n      action = CollectionAction.get(a);\n    }\n    if (action == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown action: \" + a);\n    }\n\n    switch (action) {\n      case CREATE: {\n        this.handleCreateAction(req, rsp);\n        break;\n      }\n      case DELETE: {\n        this.handleDeleteAction(req, rsp);\n        break;\n      }\n      case RELOAD: {\n        this.handleReloadAction(req, rsp);\n        break;\n      }\n      case SYNCSHARD: {\n        this.handleSyncShardAction(req, rsp);\n        break;\n      }\n      case CREATEALIAS: {\n        this.handleCreateAliasAction(req, rsp);\n        break;\n      }\n      case DELETEALIAS: {\n        this.handleDeleteAliasAction(req, rsp);\n        break;\n      }\n      case SPLITSHARD:  {\n        this.handleSplitShardAction(req, rsp);\n        break;\n      }\n      case DELETESHARD: {\n        this.handleDeleteShardAction(req, rsp);\n        break;\n      }\n      case CREATESHARD: {\n        this.handleCreateShard(req, rsp);\n        break;\n      }\n      case DELETEREPLICA: {\n        this.handleRemoveReplica(req, rsp);\n        break;\n      }\n      case MIGRATE: {\n        this.handleMigrate(req, rsp);\n        break;\n      }\n      case ADDROLE: {\n        handleRole(ADDROLE, req, rsp);\n        break;\n      }\n      case REMOVEROLE: {\n        handleRole(REMOVEROLE, req, rsp);\n        break;\n      }\n      case CLUSTERPROP: {\n        this.handleProp(req, rsp);\n        break;\n      }\n      case ADDREPLICA:  {\n        this.handleAddReplica(req, rsp);\n        break;\n      }\n      case REQUESTSTATUS: {\n        this.handleRequestStatus(req, rsp);\n        break;\n      }\n      case OVERSEERSTATUS:  {\n        this.handleOverseerStatus(req, rsp);\n        break;\n      }\n      case LIST: {\n        this.handleListAction(req, rsp);\n        break;\n      }\n      case CLUSTERSTATUS:  {\n        this.handleClusterStatus(req, rsp);\n        break;\n      }\n      case ADDREPLICAPROP: {\n        this.handleAddReplicaProp(req, rsp);\n        break;\n      }\n      case DELETEREPLICAPROP: {\n        this.handleDeleteReplicaProp(req, rsp);\n        break;\n      }\n      case BALANCESLICEUNIQUE: {\n        this.handleBalanceSliceUnique(req, rsp);\n        break;\n      }\n      case REBALANCELEADERS: {\n        this.handleBalanceLeaders(req, rsp);\n        break;\n      }\n      default: {\n          throw new RuntimeException(\"Unknown action: \" + action);\n      }\n    }\n\n    rsp.setHttpCaching(false);\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Make sure the cores is enabled\n    CoreContainer cores = getCoreContainer();\n    if (cores == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Core container instance missing\");\n    }\n\n    // Make sure that the core is ZKAware\n    if(!cores.isZooKeeperAware()) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Solr instance is not running in SolrCloud mode.\");\n    }\n\n    // Pick the action\n    SolrParams params = req.getParams();\n    CollectionAction action = null;\n    String a = params.get(CoreAdminParams.ACTION);\n    if (a != null) {\n      action = CollectionAction.get(a);\n    }\n    if (action == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown action: \" + a);\n    }\n\n    switch (action) {\n      case CREATE: {\n        this.handleCreateAction(req, rsp);\n        break;\n      }\n      case DELETE: {\n        this.handleDeleteAction(req, rsp);\n        break;\n      }\n      case RELOAD: {\n        this.handleReloadAction(req, rsp);\n        break;\n      }\n      case SYNCSHARD: {\n        this.handleSyncShardAction(req, rsp);\n        break;\n      }\n      case CREATEALIAS: {\n        this.handleCreateAliasAction(req, rsp);\n        break;\n      }\n      case DELETEALIAS: {\n        this.handleDeleteAliasAction(req, rsp);\n        break;\n      }\n      case SPLITSHARD:  {\n        this.handleSplitShardAction(req, rsp);\n        break;\n      }\n      case DELETESHARD: {\n        this.handleDeleteShardAction(req, rsp);\n        break;\n      }\n      case CREATESHARD: {\n        this.handleCreateShard(req, rsp);\n        break;\n      }\n      case DELETEREPLICA: {\n        this.handleRemoveReplica(req, rsp);\n        break;\n      }\n      case MIGRATE: {\n        this.handleMigrate(req, rsp);\n        break;\n      }\n      case ADDROLE: {\n        handleRole(ADDROLE, req, rsp);\n        break;\n      }\n      case REMOVEROLE: {\n        handleRole(REMOVEROLE, req, rsp);\n        break;\n      }\n      case CLUSTERPROP: {\n        this.handleProp(req, rsp);\n        break;\n      }\n      case ADDREPLICA:  {\n        this.handleAddReplica(req, rsp);\n        break;\n      }\n      case REQUESTSTATUS: {\n        this.handleRequestStatus(req, rsp);\n        break;\n      }\n      case OVERSEERSTATUS:  {\n        this.handleOverseerStatus(req, rsp);\n        break;\n      }\n      case LIST: {\n        this.handleListAction(req, rsp);\n        break;\n      }\n      case CLUSTERSTATUS:  {\n        this.handleClusterStatus(req, rsp);\n        break;\n      }\n      case ADDREPLICAPROP: {\n        this.handleAddReplicaProp(req, rsp);\n        break;\n      }\n      case DELETEREPLICAPROP: {\n        this.handleDeleteReplicaProp(req, rsp);\n        break;\n      }\n      case BALANCESLICEUNIQUE: {\n        this.handleBalanceSliceUnique(req, rsp);\n        break;\n      }\n      default: {\n          throw new RuntimeException(\"Unknown action: \" + action);\n      }\n    }\n\n    rsp.setHttpCaching(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cfb61c9baefa8681e40fca3c803f61bf485a9d8d","date":1414979559,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Make sure the cores is enabled\n    CoreContainer cores = getCoreContainer();\n    if (cores == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Core container instance missing\");\n    }\n\n    // Make sure that the core is ZKAware\n    if(!cores.isZooKeeperAware()) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Solr instance is not running in SolrCloud mode.\");\n    }\n\n    // Pick the action\n    SolrParams params = req.getParams();\n    CollectionAction action = null;\n    String a = params.get(CoreAdminParams.ACTION);\n    if (a != null) {\n      action = CollectionAction.get(a);\n    }\n    if (action == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown action: \" + a);\n    }\n\n    switch (action) {\n      case CREATE: {\n        this.handleCreateAction(req, rsp);\n        break;\n      }\n      case DELETE: {\n        this.handleDeleteAction(req, rsp);\n        break;\n      }\n      case RELOAD: {\n        this.handleReloadAction(req, rsp);\n        break;\n      }\n      case SYNCSHARD: {\n        this.handleSyncShardAction(req, rsp);\n        break;\n      }\n      case CREATEALIAS: {\n        this.handleCreateAliasAction(req, rsp);\n        break;\n      }\n      case DELETEALIAS: {\n        this.handleDeleteAliasAction(req, rsp);\n        break;\n      }\n      case SPLITSHARD:  {\n        this.handleSplitShardAction(req, rsp);\n        break;\n      }\n      case DELETESHARD: {\n        this.handleDeleteShardAction(req, rsp);\n        break;\n      }\n      case CREATESHARD: {\n        this.handleCreateShard(req, rsp);\n        break;\n      }\n      case DELETEREPLICA: {\n        this.handleRemoveReplica(req, rsp);\n        break;\n      }\n      case MIGRATE: {\n        this.handleMigrate(req, rsp);\n        break;\n      }\n      case ADDROLE: {\n        handleRole(ADDROLE, req, rsp);\n        break;\n      }\n      case REMOVEROLE: {\n        handleRole(REMOVEROLE, req, rsp);\n        break;\n      }\n      case CLUSTERPROP: {\n        this.handleProp(req, rsp);\n        break;\n      }\n      case ADDREPLICA:  {\n        this.handleAddReplica(req, rsp);\n        break;\n      }\n      case REQUESTSTATUS: {\n        this.handleRequestStatus(req, rsp);\n        break;\n      }\n      case OVERSEERSTATUS:  {\n        this.handleOverseerStatus(req, rsp);\n        break;\n      }\n      case LIST: {\n        this.handleListAction(req, rsp);\n        break;\n      }\n      case CLUSTERSTATUS:  {\n        this.handleClusterStatus(req, rsp);\n        break;\n      }\n      case ADDREPLICAPROP: {\n        this.handleAddReplicaProp(req, rsp);\n        break;\n      }\n      case DELETEREPLICAPROP: {\n        this.handleDeleteReplicaProp(req, rsp);\n        break;\n      }\n      case BALANCESHARDUNIQUE: {\n        this.handleBalanceShardUnique(req, rsp);\n        break;\n      }\n      case REBALANCELEADERS: {\n        this.handleBalanceLeaders(req, rsp);\n        break;\n      }\n      default: {\n          throw new RuntimeException(\"Unknown action: \" + action);\n      }\n    }\n\n    rsp.setHttpCaching(false);\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Make sure the cores is enabled\n    CoreContainer cores = getCoreContainer();\n    if (cores == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Core container instance missing\");\n    }\n\n    // Make sure that the core is ZKAware\n    if(!cores.isZooKeeperAware()) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Solr instance is not running in SolrCloud mode.\");\n    }\n\n    // Pick the action\n    SolrParams params = req.getParams();\n    CollectionAction action = null;\n    String a = params.get(CoreAdminParams.ACTION);\n    if (a != null) {\n      action = CollectionAction.get(a);\n    }\n    if (action == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown action: \" + a);\n    }\n\n    switch (action) {\n      case CREATE: {\n        this.handleCreateAction(req, rsp);\n        break;\n      }\n      case DELETE: {\n        this.handleDeleteAction(req, rsp);\n        break;\n      }\n      case RELOAD: {\n        this.handleReloadAction(req, rsp);\n        break;\n      }\n      case SYNCSHARD: {\n        this.handleSyncShardAction(req, rsp);\n        break;\n      }\n      case CREATEALIAS: {\n        this.handleCreateAliasAction(req, rsp);\n        break;\n      }\n      case DELETEALIAS: {\n        this.handleDeleteAliasAction(req, rsp);\n        break;\n      }\n      case SPLITSHARD:  {\n        this.handleSplitShardAction(req, rsp);\n        break;\n      }\n      case DELETESHARD: {\n        this.handleDeleteShardAction(req, rsp);\n        break;\n      }\n      case CREATESHARD: {\n        this.handleCreateShard(req, rsp);\n        break;\n      }\n      case DELETEREPLICA: {\n        this.handleRemoveReplica(req, rsp);\n        break;\n      }\n      case MIGRATE: {\n        this.handleMigrate(req, rsp);\n        break;\n      }\n      case ADDROLE: {\n        handleRole(ADDROLE, req, rsp);\n        break;\n      }\n      case REMOVEROLE: {\n        handleRole(REMOVEROLE, req, rsp);\n        break;\n      }\n      case CLUSTERPROP: {\n        this.handleProp(req, rsp);\n        break;\n      }\n      case ADDREPLICA:  {\n        this.handleAddReplica(req, rsp);\n        break;\n      }\n      case REQUESTSTATUS: {\n        this.handleRequestStatus(req, rsp);\n        break;\n      }\n      case OVERSEERSTATUS:  {\n        this.handleOverseerStatus(req, rsp);\n        break;\n      }\n      case LIST: {\n        this.handleListAction(req, rsp);\n        break;\n      }\n      case CLUSTERSTATUS:  {\n        this.handleClusterStatus(req, rsp);\n        break;\n      }\n      case ADDREPLICAPROP: {\n        this.handleAddReplicaProp(req, rsp);\n        break;\n      }\n      case DELETEREPLICAPROP: {\n        this.handleDeleteReplicaProp(req, rsp);\n        break;\n      }\n      case BALANCESLICEUNIQUE: {\n        this.handleBalanceSliceUnique(req, rsp);\n        break;\n      }\n      case REBALANCELEADERS: {\n        this.handleBalanceLeaders(req, rsp);\n        break;\n      }\n      default: {\n          throw new RuntimeException(\"Unknown action: \" + action);\n      }\n    }\n\n    rsp.setHttpCaching(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1bd110770d1b52ca7d7201410a102c468c540967","date":1419034668,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Make sure the cores is enabled\n    CoreContainer cores = getCoreContainer();\n    if (cores == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Core container instance missing\");\n    }\n\n    // Make sure that the core is ZKAware\n    if(!cores.isZooKeeperAware()) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Solr instance is not running in SolrCloud mode.\");\n    }\n\n    // Pick the action\n    SolrParams params = req.getParams();\n    CollectionAction action = null;\n    String a = params.get(CoreAdminParams.ACTION);\n    if (a != null) {\n      action = CollectionAction.get(a);\n    }\n    if (action == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown action: \" + a);\n    }\n\n    switch (action) {\n      case CREATE: {\n        this.handleCreateAction(req, rsp);\n        break;\n      }\n      case DELETE: {\n        this.handleDeleteAction(req, rsp);\n        break;\n      }\n      case RELOAD: {\n        this.handleReloadAction(req, rsp);\n        break;\n      }\n      case SYNCSHARD: {\n        this.handleSyncShardAction(req, rsp);\n        break;\n      }\n      case CREATEALIAS: {\n        this.handleCreateAliasAction(req, rsp);\n        break;\n      }\n      case DELETEALIAS: {\n        this.handleDeleteAliasAction(req, rsp);\n        break;\n      }\n      case SPLITSHARD:  {\n        this.handleSplitShardAction(req, rsp);\n        break;\n      }\n      case DELETESHARD: {\n        this.handleDeleteShardAction(req, rsp);\n        break;\n      }\n      case CREATESHARD: {\n        this.handleCreateShard(req, rsp);\n        break;\n      }\n      case DELETEREPLICA: {\n        this.handleRemoveReplica(req, rsp);\n        break;\n      }\n      case MIGRATE: {\n        this.handleMigrate(req, rsp);\n        break;\n      }\n      case ADDROLE: {\n        handleRole(ADDROLE, req, rsp);\n        break;\n      }\n      case REMOVEROLE: {\n        handleRole(REMOVEROLE, req, rsp);\n        break;\n      }\n      case CLUSTERPROP: {\n        this.handleProp(req, rsp);\n        break;\n      }\n      case ADDREPLICA:  {\n        this.handleAddReplica(req, rsp);\n        break;\n      }\n      case REQUESTSTATUS: {\n        this.handleRequestStatus(req, rsp);\n        break;\n      }\n      case OVERSEERSTATUS:  {\n        this.handleOverseerStatus(req, rsp);\n        break;\n      }\n      case LIST: {\n        this.handleListAction(req, rsp);\n        break;\n      }\n      case CLUSTERSTATUS:  {\n        this.handleClusterStatus(req, rsp);\n        break;\n      }\n      case ADDREPLICAPROP: {\n        this.handleAddReplicaProp(req, rsp);\n        break;\n      }\n      case DELETEREPLICAPROP: {\n        this.handleDeleteReplicaProp(req, rsp);\n        break;\n      }\n      case BALANCESHARDUNIQUE: {\n        this.handleBalanceShardUnique(req, rsp);\n        break;\n      }\n//      case REBALANCELEADERS: {\n//        this.handleBalanceLeaders(req, rsp);\n//        break;\n//      }\n      default: {\n          throw new RuntimeException(\"Unknown action: \" + action);\n      }\n    }\n\n    rsp.setHttpCaching(false);\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Make sure the cores is enabled\n    CoreContainer cores = getCoreContainer();\n    if (cores == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Core container instance missing\");\n    }\n\n    // Make sure that the core is ZKAware\n    if(!cores.isZooKeeperAware()) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Solr instance is not running in SolrCloud mode.\");\n    }\n\n    // Pick the action\n    SolrParams params = req.getParams();\n    CollectionAction action = null;\n    String a = params.get(CoreAdminParams.ACTION);\n    if (a != null) {\n      action = CollectionAction.get(a);\n    }\n    if (action == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown action: \" + a);\n    }\n\n    switch (action) {\n      case CREATE: {\n        this.handleCreateAction(req, rsp);\n        break;\n      }\n      case DELETE: {\n        this.handleDeleteAction(req, rsp);\n        break;\n      }\n      case RELOAD: {\n        this.handleReloadAction(req, rsp);\n        break;\n      }\n      case SYNCSHARD: {\n        this.handleSyncShardAction(req, rsp);\n        break;\n      }\n      case CREATEALIAS: {\n        this.handleCreateAliasAction(req, rsp);\n        break;\n      }\n      case DELETEALIAS: {\n        this.handleDeleteAliasAction(req, rsp);\n        break;\n      }\n      case SPLITSHARD:  {\n        this.handleSplitShardAction(req, rsp);\n        break;\n      }\n      case DELETESHARD: {\n        this.handleDeleteShardAction(req, rsp);\n        break;\n      }\n      case CREATESHARD: {\n        this.handleCreateShard(req, rsp);\n        break;\n      }\n      case DELETEREPLICA: {\n        this.handleRemoveReplica(req, rsp);\n        break;\n      }\n      case MIGRATE: {\n        this.handleMigrate(req, rsp);\n        break;\n      }\n      case ADDROLE: {\n        handleRole(ADDROLE, req, rsp);\n        break;\n      }\n      case REMOVEROLE: {\n        handleRole(REMOVEROLE, req, rsp);\n        break;\n      }\n      case CLUSTERPROP: {\n        this.handleProp(req, rsp);\n        break;\n      }\n      case ADDREPLICA:  {\n        this.handleAddReplica(req, rsp);\n        break;\n      }\n      case REQUESTSTATUS: {\n        this.handleRequestStatus(req, rsp);\n        break;\n      }\n      case OVERSEERSTATUS:  {\n        this.handleOverseerStatus(req, rsp);\n        break;\n      }\n      case LIST: {\n        this.handleListAction(req, rsp);\n        break;\n      }\n      case CLUSTERSTATUS:  {\n        this.handleClusterStatus(req, rsp);\n        break;\n      }\n      case ADDREPLICAPROP: {\n        this.handleAddReplicaProp(req, rsp);\n        break;\n      }\n      case DELETEREPLICAPROP: {\n        this.handleDeleteReplicaProp(req, rsp);\n        break;\n      }\n      case BALANCESHARDUNIQUE: {\n        this.handleBalanceShardUnique(req, rsp);\n        break;\n      }\n      case REBALANCELEADERS: {\n        this.handleBalanceLeaders(req, rsp);\n        break;\n      }\n      default: {\n          throw new RuntimeException(\"Unknown action: \" + action);\n      }\n    }\n\n    rsp.setHttpCaching(false);\n  }\n\n","bugFix":["5455c7b3fed6c1671990a44c19071cb0488c2c25"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1fd45c40db7386b20de53b81216bcf574f15be40","date":1419458105,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Make sure the cores is enabled\n    CoreContainer cores = getCoreContainer();\n    if (cores == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Core container instance missing\");\n    }\n\n    // Make sure that the core is ZKAware\n    if(!cores.isZooKeeperAware()) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Solr instance is not running in SolrCloud mode.\");\n    }\n\n    // Pick the action\n    SolrParams params = req.getParams();\n    CollectionAction action = null;\n    String a = params.get(CoreAdminParams.ACTION);\n    if (a != null) {\n      action = CollectionAction.get(a);\n    }\n    if (action == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown action: \" + a);\n    }\n\n    switch (action) {\n      case CREATE: {\n        this.handleCreateAction(req, rsp);\n        break;\n      }\n      case DELETE: {\n        this.handleDeleteAction(req, rsp);\n        break;\n      }\n      case RELOAD: {\n        this.handleReloadAction(req, rsp);\n        break;\n      }\n      case SYNCSHARD: {\n        this.handleSyncShardAction(req, rsp);\n        break;\n      }\n      case CREATEALIAS: {\n        this.handleCreateAliasAction(req, rsp);\n        break;\n      }\n      case DELETEALIAS: {\n        this.handleDeleteAliasAction(req, rsp);\n        break;\n      }\n      case SPLITSHARD:  {\n        this.handleSplitShardAction(req, rsp);\n        break;\n      }\n      case DELETESHARD: {\n        this.handleDeleteShardAction(req, rsp);\n        break;\n      }\n      case CREATESHARD: {\n        this.handleCreateShard(req, rsp);\n        break;\n      }\n      case DELETEREPLICA: {\n        this.handleRemoveReplica(req, rsp);\n        break;\n      }\n      case MIGRATE: {\n        this.handleMigrate(req, rsp);\n        break;\n      }\n      case ADDROLE: {\n        handleRole(ADDROLE, req, rsp);\n        break;\n      }\n      case REMOVEROLE: {\n        handleRole(REMOVEROLE, req, rsp);\n        break;\n      }\n      case CLUSTERPROP: {\n        this.handleProp(req, rsp);\n        break;\n      }\n      case ADDREPLICA:  {\n        this.handleAddReplica(req, rsp);\n        break;\n      }\n      case REQUESTSTATUS: {\n        this.handleRequestStatus(req, rsp);\n        break;\n      }\n      case OVERSEERSTATUS:  {\n        this.handleOverseerStatus(req, rsp);\n        break;\n      }\n      case LIST: {\n        this.handleListAction(req, rsp);\n        break;\n      }\n      case CLUSTERSTATUS:  {\n        this.handleClusterStatus(req, rsp);\n        break;\n      }\n      case ADDREPLICAPROP: {\n        this.handleAddReplicaProp(req, rsp);\n        break;\n      }\n      case DELETEREPLICAPROP: {\n        this.handleDeleteReplicaProp(req, rsp);\n        break;\n      }\n      case BALANCESHARDUNIQUE: {\n        this.handleBalanceShardUnique(req, rsp);\n        break;\n      }\n      case REBALANCELEADERS: {\n        this.handleBalanceLeaders(req, rsp);\n        break;\n      }\n      default: {\n          throw new RuntimeException(\"Unknown action: \" + action);\n      }\n    }\n\n    rsp.setHttpCaching(false);\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Make sure the cores is enabled\n    CoreContainer cores = getCoreContainer();\n    if (cores == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Core container instance missing\");\n    }\n\n    // Make sure that the core is ZKAware\n    if(!cores.isZooKeeperAware()) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Solr instance is not running in SolrCloud mode.\");\n    }\n\n    // Pick the action\n    SolrParams params = req.getParams();\n    CollectionAction action = null;\n    String a = params.get(CoreAdminParams.ACTION);\n    if (a != null) {\n      action = CollectionAction.get(a);\n    }\n    if (action == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown action: \" + a);\n    }\n\n    switch (action) {\n      case CREATE: {\n        this.handleCreateAction(req, rsp);\n        break;\n      }\n      case DELETE: {\n        this.handleDeleteAction(req, rsp);\n        break;\n      }\n      case RELOAD: {\n        this.handleReloadAction(req, rsp);\n        break;\n      }\n      case SYNCSHARD: {\n        this.handleSyncShardAction(req, rsp);\n        break;\n      }\n      case CREATEALIAS: {\n        this.handleCreateAliasAction(req, rsp);\n        break;\n      }\n      case DELETEALIAS: {\n        this.handleDeleteAliasAction(req, rsp);\n        break;\n      }\n      case SPLITSHARD:  {\n        this.handleSplitShardAction(req, rsp);\n        break;\n      }\n      case DELETESHARD: {\n        this.handleDeleteShardAction(req, rsp);\n        break;\n      }\n      case CREATESHARD: {\n        this.handleCreateShard(req, rsp);\n        break;\n      }\n      case DELETEREPLICA: {\n        this.handleRemoveReplica(req, rsp);\n        break;\n      }\n      case MIGRATE: {\n        this.handleMigrate(req, rsp);\n        break;\n      }\n      case ADDROLE: {\n        handleRole(ADDROLE, req, rsp);\n        break;\n      }\n      case REMOVEROLE: {\n        handleRole(REMOVEROLE, req, rsp);\n        break;\n      }\n      case CLUSTERPROP: {\n        this.handleProp(req, rsp);\n        break;\n      }\n      case ADDREPLICA:  {\n        this.handleAddReplica(req, rsp);\n        break;\n      }\n      case REQUESTSTATUS: {\n        this.handleRequestStatus(req, rsp);\n        break;\n      }\n      case OVERSEERSTATUS:  {\n        this.handleOverseerStatus(req, rsp);\n        break;\n      }\n      case LIST: {\n        this.handleListAction(req, rsp);\n        break;\n      }\n      case CLUSTERSTATUS:  {\n        this.handleClusterStatus(req, rsp);\n        break;\n      }\n      case ADDREPLICAPROP: {\n        this.handleAddReplicaProp(req, rsp);\n        break;\n      }\n      case DELETEREPLICAPROP: {\n        this.handleDeleteReplicaProp(req, rsp);\n        break;\n      }\n      case BALANCESHARDUNIQUE: {\n        this.handleBalanceShardUnique(req, rsp);\n        break;\n      }\n//      case REBALANCELEADERS: {\n//        this.handleBalanceLeaders(req, rsp);\n//        break;\n//      }\n      default: {\n          throw new RuntimeException(\"Unknown action: \" + action);\n      }\n    }\n\n    rsp.setHttpCaching(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ebd3a557326ef3eab85b73a8cff781f7d801248","date":1431620752,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Make sure the cores is enabled\n    CoreContainer cores = getCoreContainer();\n    if (cores == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Core container instance missing\");\n    }\n\n    // Make sure that the core is ZKAware\n    if(!cores.isZooKeeperAware()) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Solr instance is not running in SolrCloud mode.\");\n    }\n\n    // Pick the action\n    SolrParams params = req.getParams();\n    String a = params.get(CoreAdminParams.ACTION);\n    if (a != null) {\n      CollectionAction action = CollectionAction.get(a);\n      if (action == null)\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown action: \" + a);\n      CollectionOperation operation = CollectionOperation.get(action);\n      log.info(\"Invoked Collection Action :{} with params{} \", action.toLower(), req.getParamString());\n      Map<String, Object> result = operation.call(req, rsp, this);\n      if (result != null) {\n        result.put(QUEUE_OPERATION, operation.action.toLower());\n        ZkNodeProps props = new ZkNodeProps(result);\n        handleResponse(operation.action.toLower(), props, rsp, operation.timeOut);\n      }\n    } else {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"action is a required param\");\n\n    }\n\n    rsp.setHttpCaching(false);\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Make sure the cores is enabled\n    CoreContainer cores = getCoreContainer();\n    if (cores == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Core container instance missing\");\n    }\n\n    // Make sure that the core is ZKAware\n    if(!cores.isZooKeeperAware()) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Solr instance is not running in SolrCloud mode.\");\n    }\n\n    // Pick the action\n    SolrParams params = req.getParams();\n    CollectionAction action = null;\n    String a = params.get(CoreAdminParams.ACTION);\n    if (a != null) {\n      action = CollectionAction.get(a);\n    }\n    if (action == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown action: \" + a);\n    }\n\n    switch (action) {\n      case CREATE: {\n        this.handleCreateAction(req, rsp);\n        break;\n      }\n      case DELETE: {\n        this.handleDeleteAction(req, rsp);\n        break;\n      }\n      case RELOAD: {\n        this.handleReloadAction(req, rsp);\n        break;\n      }\n      case SYNCSHARD: {\n        this.handleSyncShardAction(req, rsp);\n        break;\n      }\n      case CREATEALIAS: {\n        this.handleCreateAliasAction(req, rsp);\n        break;\n      }\n      case DELETEALIAS: {\n        this.handleDeleteAliasAction(req, rsp);\n        break;\n      }\n      case SPLITSHARD:  {\n        this.handleSplitShardAction(req, rsp);\n        break;\n      }\n      case DELETESHARD: {\n        this.handleDeleteShardAction(req, rsp);\n        break;\n      }\n      case CREATESHARD: {\n        this.handleCreateShard(req, rsp);\n        break;\n      }\n      case DELETEREPLICA: {\n        this.handleRemoveReplica(req, rsp);\n        break;\n      }\n      case MIGRATE: {\n        this.handleMigrate(req, rsp);\n        break;\n      }\n      case ADDROLE: {\n        handleRole(ADDROLE, req, rsp);\n        break;\n      }\n      case REMOVEROLE: {\n        handleRole(REMOVEROLE, req, rsp);\n        break;\n      }\n      case CLUSTERPROP: {\n        this.handleProp(req, rsp);\n        break;\n      }\n      case ADDREPLICA:  {\n        this.handleAddReplica(req, rsp);\n        break;\n      }\n      case REQUESTSTATUS: {\n        this.handleRequestStatus(req, rsp);\n        break;\n      }\n      case OVERSEERSTATUS:  {\n        this.handleOverseerStatus(req, rsp);\n        break;\n      }\n      case LIST: {\n        this.handleListAction(req, rsp);\n        break;\n      }\n      case CLUSTERSTATUS:  {\n        this.handleClusterStatus(req, rsp);\n        break;\n      }\n      case ADDREPLICAPROP: {\n        this.handleAddReplicaProp(req, rsp);\n        break;\n      }\n      case DELETEREPLICAPROP: {\n        this.handleDeleteReplicaProp(req, rsp);\n        break;\n      }\n      case BALANCESHARDUNIQUE: {\n        this.handleBalanceShardUnique(req, rsp);\n        break;\n      }\n      case REBALANCELEADERS: {\n        this.handleBalanceLeaders(req, rsp);\n        break;\n      }\n      default: {\n          throw new RuntimeException(\"Unknown action: \" + action);\n      }\n    }\n\n    rsp.setHttpCaching(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"07dbf37ea1062f6f3f4fc7deb3ae385ab837ebc8","date":1431966199,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Make sure the cores is enabled\n    CoreContainer cores = getCoreContainer();\n    if (cores == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Core container instance missing\");\n    }\n\n    // Make sure that the core is ZKAware\n    if(!cores.isZooKeeperAware()) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Solr instance is not running in SolrCloud mode.\");\n    }\n\n    // Pick the action\n    SolrParams params = req.getParams();\n    String a = params.get(CoreAdminParams.ACTION);\n    if (a != null) {\n      CollectionAction action = CollectionAction.get(a);\n      if (action == null)\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown action: \" + a);\n      CollectionOperation operation = CollectionOperation.get(action);\n      log.info(\"Invoked Collection Action :{} with params{} \", action.toLower(), req.getParamString());\n      Map<String, Object> result = operation.call(req, rsp, this);\n      if (result != null) {\n        result.put(QUEUE_OPERATION, operation.action.toLower());\n        ZkNodeProps props = new ZkNodeProps(result);\n        if (operation.sendToOCPQueue) handleResponse(operation.action.toLower(), props, rsp, operation.timeOut);\n        else Overseer.getInQueue(coreContainer.getZkController().getZkClient()).offer(ZkStateReader.toJSON(props));\n\n      }\n    } else {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"action is a required param\");\n\n    }\n\n    rsp.setHttpCaching(false);\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Make sure the cores is enabled\n    CoreContainer cores = getCoreContainer();\n    if (cores == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Core container instance missing\");\n    }\n\n    // Make sure that the core is ZKAware\n    if(!cores.isZooKeeperAware()) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Solr instance is not running in SolrCloud mode.\");\n    }\n\n    // Pick the action\n    SolrParams params = req.getParams();\n    String a = params.get(CoreAdminParams.ACTION);\n    if (a != null) {\n      CollectionAction action = CollectionAction.get(a);\n      if (action == null)\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown action: \" + a);\n      CollectionOperation operation = CollectionOperation.get(action);\n      log.info(\"Invoked Collection Action :{} with params{} \", action.toLower(), req.getParamString());\n      Map<String, Object> result = operation.call(req, rsp, this);\n      if (result != null) {\n        result.put(QUEUE_OPERATION, operation.action.toLower());\n        ZkNodeProps props = new ZkNodeProps(result);\n        handleResponse(operation.action.toLower(), props, rsp, operation.timeOut);\n      }\n    } else {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"action is a required param\");\n\n    }\n\n    rsp.setHttpCaching(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"50d6978d50a20568ca78a42c96927bbd9e97d919","date":1434141110,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Make sure the cores is enabled\n    CoreContainer cores = getCoreContainer();\n    if (cores == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Core container instance missing\");\n    }\n\n    // Make sure that the core is ZKAware\n    if(!cores.isZooKeeperAware()) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Solr instance is not running in SolrCloud mode.\");\n    }\n\n    // Pick the action\n    SolrParams params = req.getParams();\n    String a = params.get(CoreAdminParams.ACTION);\n    if (a != null) {\n      CollectionAction action = CollectionAction.get(a);\n      if (action == null)\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown action: \" + a);\n      CollectionOperation operation = CollectionOperation.get(action);\n      log.info(\"Invoked Collection Action :{} with params {} \", action.toLower(), req.getParamString());\n      Map<String, Object> result = operation.call(req, rsp, this);\n      if (result != null) {\n        result.put(QUEUE_OPERATION, operation.action.toLower());\n        ZkNodeProps props = new ZkNodeProps(result);\n        if (operation.sendToOCPQueue) handleResponse(operation.action.toLower(), props, rsp, operation.timeOut);\n        else Overseer.getInQueue(coreContainer.getZkController().getZkClient()).offer(ZkStateReader.toJSON(props));\n\n      }\n    } else {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"action is a required param\");\n\n    }\n\n    rsp.setHttpCaching(false);\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Make sure the cores is enabled\n    CoreContainer cores = getCoreContainer();\n    if (cores == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Core container instance missing\");\n    }\n\n    // Make sure that the core is ZKAware\n    if(!cores.isZooKeeperAware()) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Solr instance is not running in SolrCloud mode.\");\n    }\n\n    // Pick the action\n    SolrParams params = req.getParams();\n    String a = params.get(CoreAdminParams.ACTION);\n    if (a != null) {\n      CollectionAction action = CollectionAction.get(a);\n      if (action == null)\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown action: \" + a);\n      CollectionOperation operation = CollectionOperation.get(action);\n      log.info(\"Invoked Collection Action :{} with params{} \", action.toLower(), req.getParamString());\n      Map<String, Object> result = operation.call(req, rsp, this);\n      if (result != null) {\n        result.put(QUEUE_OPERATION, operation.action.toLower());\n        ZkNodeProps props = new ZkNodeProps(result);\n        if (operation.sendToOCPQueue) handleResponse(operation.action.toLower(), props, rsp, operation.timeOut);\n        else Overseer.getInQueue(coreContainer.getZkController().getZkClient()).offer(ZkStateReader.toJSON(props));\n\n      }\n    } else {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"action is a required param\");\n\n    }\n\n    rsp.setHttpCaching(false);\n  }\n\n","bugFix":null,"bugIntro":["b1197d6f54676973038ad402280d80a139dfd27b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b693a83132c9e45afcd564fd65a25b60ed80388b","date":1436882146,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Make sure the cores is enabled\n    CoreContainer cores = getCoreContainer();\n    if (cores == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Core container instance missing\");\n    }\n\n    // Make sure that the core is ZKAware\n    if(!cores.isZooKeeperAware()) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Solr instance is not running in SolrCloud mode.\");\n    }\n\n    // Pick the action\n    SolrParams params = req.getParams();\n    String a = params.get(CoreAdminParams.ACTION);\n    if (a != null) {\n      CollectionAction action = CollectionAction.get(a);\n      if (action == null)\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown action: \" + a);\n      CollectionOperation operation = CollectionOperation.get(action);\n      log.info(\"Invoked Collection Action :{} with params {} \", action.toLower(), req.getParamString());\n      Map<String, Object> result = operation.call(req, rsp, this);\n      if (result != null) {\n        result.put(QUEUE_OPERATION, operation.action.toLower());\n        ZkNodeProps props = new ZkNodeProps(result);\n        if (operation.sendToOCPQueue) handleResponse(operation.action.toLower(), props, rsp, operation.timeOut);\n        else Overseer.getInQueue(coreContainer.getZkController().getZkClient()).offer(Utils.toJSON(props));\n\n      }\n    } else {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"action is a required param\");\n\n    }\n\n    rsp.setHttpCaching(false);\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Make sure the cores is enabled\n    CoreContainer cores = getCoreContainer();\n    if (cores == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Core container instance missing\");\n    }\n\n    // Make sure that the core is ZKAware\n    if(!cores.isZooKeeperAware()) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Solr instance is not running in SolrCloud mode.\");\n    }\n\n    // Pick the action\n    SolrParams params = req.getParams();\n    String a = params.get(CoreAdminParams.ACTION);\n    if (a != null) {\n      CollectionAction action = CollectionAction.get(a);\n      if (action == null)\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown action: \" + a);\n      CollectionOperation operation = CollectionOperation.get(action);\n      log.info(\"Invoked Collection Action :{} with params {} \", action.toLower(), req.getParamString());\n      Map<String, Object> result = operation.call(req, rsp, this);\n      if (result != null) {\n        result.put(QUEUE_OPERATION, operation.action.toLower());\n        ZkNodeProps props = new ZkNodeProps(result);\n        if (operation.sendToOCPQueue) handleResponse(operation.action.toLower(), props, rsp, operation.timeOut);\n        else Overseer.getInQueue(coreContainer.getZkController().getZkClient()).offer(ZkStateReader.toJSON(props));\n\n      }\n    } else {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"action is a required param\");\n\n    }\n\n    rsp.setHttpCaching(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3bbb741690cdafda7f1f7549c26351c912917a69","date":1453203134,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Make sure the cores is enabled\n    CoreContainer cores = getCoreContainer();\n    if (cores == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Core container instance missing\");\n    }\n\n    // Make sure that the core is ZKAware\n    if(!cores.isZooKeeperAware()) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Solr instance is not running in SolrCloud mode.\");\n    }\n\n    // Pick the action\n    SolrParams params = req.getParams();\n    String a = params.get(CoreAdminParams.ACTION);\n    if (a != null) {\n      CollectionAction action = CollectionAction.get(a);\n      if (action == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown action: \" + a);\n      }\n      CollectionOperation operation = CollectionOperation.get(action);\n      log.info(\"Invoked Collection Action :{} with params {} \", action.toLower(), req.getParamString());\n\n      Map<String, Object> props = operation.call(req, rsp, this);\n      String asyncId = req.getParams().get(ASYNC);\n      if (props != null) {\n        if (asyncId != null) {\n          props.put(ASYNC, asyncId);\n        }\n        props.put(QUEUE_OPERATION, operation.action.toLower());\n        ZkNodeProps zkProps = new ZkNodeProps(props);\n        if (operation.sendToOCPQueue) handleResponse(operation.action.toLower(), zkProps, rsp, operation.timeOut);\n        else Overseer.getInQueue(coreContainer.getZkController().getZkClient()).offer(Utils.toJSON(props));\n      }\n    } else {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"action is a required param\");\n    }\n    rsp.setHttpCaching(false);\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Make sure the cores is enabled\n    CoreContainer cores = getCoreContainer();\n    if (cores == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Core container instance missing\");\n    }\n\n    // Make sure that the core is ZKAware\n    if(!cores.isZooKeeperAware()) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Solr instance is not running in SolrCloud mode.\");\n    }\n\n    // Pick the action\n    SolrParams params = req.getParams();\n    String a = params.get(CoreAdminParams.ACTION);\n    if (a != null) {\n      CollectionAction action = CollectionAction.get(a);\n      if (action == null)\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown action: \" + a);\n      CollectionOperation operation = CollectionOperation.get(action);\n      log.info(\"Invoked Collection Action :{} with params {} \", action.toLower(), req.getParamString());\n      Map<String, Object> result = operation.call(req, rsp, this);\n      if (result != null) {\n        result.put(QUEUE_OPERATION, operation.action.toLower());\n        ZkNodeProps props = new ZkNodeProps(result);\n        if (operation.sendToOCPQueue) handleResponse(operation.action.toLower(), props, rsp, operation.timeOut);\n        else Overseer.getInQueue(coreContainer.getZkController().getZkClient()).offer(Utils.toJSON(props));\n\n      }\n    } else {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"action is a required param\");\n\n    }\n\n    rsp.setHttpCaching(false);\n  }\n\n","bugFix":null,"bugIntro":["b1197d6f54676973038ad402280d80a139dfd27b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b1197d6f54676973038ad402280d80a139dfd27b","date":1455734228,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Make sure the cores is enabled\n    CoreContainer cores = getCoreContainer();\n    if (cores == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Core container instance missing\");\n    }\n\n    // Make sure that the core is ZKAware\n    if(!cores.isZooKeeperAware()) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Solr instance is not running in SolrCloud mode.\");\n    }\n\n    // Pick the action\n    SolrParams params = req.getParams();\n    String a = params.get(CoreAdminParams.ACTION);\n    if (a != null) {\n      CollectionAction action = CollectionAction.get(a);\n      if (action == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown action: \" + a);\n      }\n      CollectionOperation operation = CollectionOperation.get(action);\n      log.info(\"Invoked Collection Action :{} with params {} and sendToOCPQueue={}\", action.toLower(), req.getParamString(), operation.sendToOCPQueue);\n\n      SolrResponse response = null;\n      Map<String, Object> props = operation.call(req, rsp, this);\n      String asyncId = req.getParams().get(ASYNC);\n      if (props != null) {\n        if (asyncId != null) {\n          props.put(ASYNC, asyncId);\n        }\n        props.put(QUEUE_OPERATION, operation.action.toLower());\n        ZkNodeProps zkProps = new ZkNodeProps(props);\n        if (operation.sendToOCPQueue) {\n          response = handleResponse(operation.action.toLower(), zkProps, rsp, operation.timeOut);\n        }\n        else Overseer.getInQueue(coreContainer.getZkController().getZkClient()).offer(Utils.toJSON(props));\n        final String collectionName = zkProps.getStr(NAME);\n        if (action.equals(CollectionAction.CREATE) && asyncId == null) {\n          if (rsp.getException() == null) {\n            waitForActiveCollection(collectionName, zkProps, cores, response);\n          }\n        }\n      }\n    } else {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"action is a required param\");\n    }\n    rsp.setHttpCaching(false);\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Make sure the cores is enabled\n    CoreContainer cores = getCoreContainer();\n    if (cores == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Core container instance missing\");\n    }\n\n    // Make sure that the core is ZKAware\n    if(!cores.isZooKeeperAware()) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Solr instance is not running in SolrCloud mode.\");\n    }\n\n    // Pick the action\n    SolrParams params = req.getParams();\n    String a = params.get(CoreAdminParams.ACTION);\n    if (a != null) {\n      CollectionAction action = CollectionAction.get(a);\n      if (action == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown action: \" + a);\n      }\n      CollectionOperation operation = CollectionOperation.get(action);\n      log.info(\"Invoked Collection Action :{} with params {} \", action.toLower(), req.getParamString());\n\n      Map<String, Object> props = operation.call(req, rsp, this);\n      String asyncId = req.getParams().get(ASYNC);\n      if (props != null) {\n        if (asyncId != null) {\n          props.put(ASYNC, asyncId);\n        }\n        props.put(QUEUE_OPERATION, operation.action.toLower());\n        ZkNodeProps zkProps = new ZkNodeProps(props);\n        if (operation.sendToOCPQueue) handleResponse(operation.action.toLower(), zkProps, rsp, operation.timeOut);\n        else Overseer.getInQueue(coreContainer.getZkController().getZkClient()).offer(Utils.toJSON(props));\n      }\n    } else {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"action is a required param\");\n    }\n    rsp.setHttpCaching(false);\n  }\n\n","bugFix":["3bbb741690cdafda7f1f7549c26351c912917a69","50d6978d50a20568ca78a42c96927bbd9e97d919"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19498030e0adab22f604f935cae3c03dcf0952a6","date":1456558851,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Make sure the cores is enabled\n    CoreContainer cores = getCoreContainer();\n    if (cores == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Core container instance missing\");\n    }\n\n    // Make sure that the core is ZKAware\n    if(!cores.isZooKeeperAware()) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Solr instance is not running in SolrCloud mode.\");\n    }\n\n    // Pick the action\n    SolrParams params = req.getParams();\n    String a = params.get(CoreAdminParams.ACTION);\n    if (a != null) {\n      CollectionAction action = CollectionAction.get(a);\n      if (action == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown action: \" + a);\n      }\n      CollectionOperation operation = CollectionOperation.get(action);\n      log.info(\"Invoked Collection Action :{} with params {} and sendToOCPQueue={}\", action.toLower(), req.getParamString(), operation.sendToOCPQueue);\n\n      SolrResponse response = null;\n      Map<String, Object> props = operation.call(req, rsp, this);\n      String asyncId = req.getParams().get(ASYNC);\n      if (props != null) {\n        if (asyncId != null) {\n          props.put(ASYNC, asyncId);\n        }\n        props.put(QUEUE_OPERATION, operation.action.toLower());\n        ZkNodeProps zkProps = new ZkNodeProps(props);\n        if (operation.sendToOCPQueue) {\n          response = handleResponse(operation.action.toLower(), zkProps, rsp, operation.timeOut);\n        }\n        else Overseer.getStateUpdateQueue(coreContainer.getZkController().getZkClient()).offer(Utils.toJSON(props));\n        final String collectionName = zkProps.getStr(NAME);\n        if (action.equals(CollectionAction.CREATE) && asyncId == null) {\n          if (rsp.getException() == null) {\n            waitForActiveCollection(collectionName, zkProps, cores, response);\n          }\n        }\n      }\n    } else {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"action is a required param\");\n    }\n    rsp.setHttpCaching(false);\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Make sure the cores is enabled\n    CoreContainer cores = getCoreContainer();\n    if (cores == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Core container instance missing\");\n    }\n\n    // Make sure that the core is ZKAware\n    if(!cores.isZooKeeperAware()) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Solr instance is not running in SolrCloud mode.\");\n    }\n\n    // Pick the action\n    SolrParams params = req.getParams();\n    String a = params.get(CoreAdminParams.ACTION);\n    if (a != null) {\n      CollectionAction action = CollectionAction.get(a);\n      if (action == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown action: \" + a);\n      }\n      CollectionOperation operation = CollectionOperation.get(action);\n      log.info(\"Invoked Collection Action :{} with params {} and sendToOCPQueue={}\", action.toLower(), req.getParamString(), operation.sendToOCPQueue);\n\n      SolrResponse response = null;\n      Map<String, Object> props = operation.call(req, rsp, this);\n      String asyncId = req.getParams().get(ASYNC);\n      if (props != null) {\n        if (asyncId != null) {\n          props.put(ASYNC, asyncId);\n        }\n        props.put(QUEUE_OPERATION, operation.action.toLower());\n        ZkNodeProps zkProps = new ZkNodeProps(props);\n        if (operation.sendToOCPQueue) {\n          response = handleResponse(operation.action.toLower(), zkProps, rsp, operation.timeOut);\n        }\n        else Overseer.getInQueue(coreContainer.getZkController().getZkClient()).offer(Utils.toJSON(props));\n        final String collectionName = zkProps.getStr(NAME);\n        if (action.equals(CollectionAction.CREATE) && asyncId == null) {\n          if (rsp.getException() == null) {\n            waitForActiveCollection(collectionName, zkProps, cores, response);\n          }\n        }\n      }\n    } else {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"action is a required param\");\n    }\n    rsp.setHttpCaching(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af2638813028b254a88b418ebeafb541afb49653","date":1456804822,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Make sure the cores is enabled\n    CoreContainer cores = getCoreContainer();\n    if (cores == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Core container instance missing\");\n    }\n\n    // Make sure that the core is ZKAware\n    if(!cores.isZooKeeperAware()) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Solr instance is not running in SolrCloud mode.\");\n    }\n\n    // Pick the action\n    SolrParams params = req.getParams();\n    String a = params.get(CoreAdminParams.ACTION);\n    if (a != null) {\n      CollectionAction action = CollectionAction.get(a);\n      if (action == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown action: \" + a);\n      }\n      CollectionOperation operation = CollectionOperation.get(action);\n      log.info(\"Invoked Collection Action :{} with params {} and sendToOCPQueue={}\", action.toLower(), req.getParamString(), operation.sendToOCPQueue);\n\n      SolrResponse response = null;\n      Map<String, Object> props = operation.call(req, rsp, this);\n      String asyncId = req.getParams().get(ASYNC);\n      if (props != null) {\n        if (asyncId != null) {\n          props.put(ASYNC, asyncId);\n        }\n        props.put(QUEUE_OPERATION, operation.action.toLower());\n        ZkNodeProps zkProps = new ZkNodeProps(props);\n        if (operation.sendToOCPQueue) {\n          response = handleResponse(operation.action.toLower(), zkProps, rsp, operation.timeOut);\n        }\n        else Overseer.getStateUpdateQueue(coreContainer.getZkController().getZkClient()).offer(Utils.toJSON(props));\n        final String collectionName = zkProps.getStr(NAME);\n        if (action.equals(CollectionAction.CREATE) && asyncId == null) {\n          if (rsp.getException() == null) {\n            waitForActiveCollection(collectionName, zkProps, cores, response);\n          }\n        }\n      }\n    } else {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"action is a required param\");\n    }\n    rsp.setHttpCaching(false);\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Make sure the cores is enabled\n    CoreContainer cores = getCoreContainer();\n    if (cores == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Core container instance missing\");\n    }\n\n    // Make sure that the core is ZKAware\n    if(!cores.isZooKeeperAware()) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Solr instance is not running in SolrCloud mode.\");\n    }\n\n    // Pick the action\n    SolrParams params = req.getParams();\n    String a = params.get(CoreAdminParams.ACTION);\n    if (a != null) {\n      CollectionAction action = CollectionAction.get(a);\n      if (action == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown action: \" + a);\n      }\n      CollectionOperation operation = CollectionOperation.get(action);\n      log.info(\"Invoked Collection Action :{} with params {} and sendToOCPQueue={}\", action.toLower(), req.getParamString(), operation.sendToOCPQueue);\n\n      SolrResponse response = null;\n      Map<String, Object> props = operation.call(req, rsp, this);\n      String asyncId = req.getParams().get(ASYNC);\n      if (props != null) {\n        if (asyncId != null) {\n          props.put(ASYNC, asyncId);\n        }\n        props.put(QUEUE_OPERATION, operation.action.toLower());\n        ZkNodeProps zkProps = new ZkNodeProps(props);\n        if (operation.sendToOCPQueue) {\n          response = handleResponse(operation.action.toLower(), zkProps, rsp, operation.timeOut);\n        }\n        else Overseer.getInQueue(coreContainer.getZkController().getZkClient()).offer(Utils.toJSON(props));\n        final String collectionName = zkProps.getStr(NAME);\n        if (action.equals(CollectionAction.CREATE) && asyncId == null) {\n          if (rsp.getException() == null) {\n            waitForActiveCollection(collectionName, zkProps, cores, response);\n          }\n        }\n      }\n    } else {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"action is a required param\");\n    }\n    rsp.setHttpCaching(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dcd5215a06a4284c4cecb6fd8e55461411b6cca4","date":1469032255,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Make sure the cores is enabled\n    CoreContainer cores = getCoreContainer();\n    if (cores == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Core container instance missing\");\n    }\n\n    // Make sure that the core is ZKAware\n    if(!cores.isZooKeeperAware()) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Solr instance is not running in SolrCloud mode.\");\n    }\n\n    // Pick the action\n    SolrParams params = req.getParams();\n    String a = params.get(CoreAdminParams.ACTION);\n    if (a != null) {\n      CollectionAction action = CollectionAction.get(a);\n      if (action == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown action: \" + a);\n      }\n      CollectionOperation operation = CollectionOperation.get(action);\n      log.info(\"Invoked Collection Action :{} with params {} and sendToOCPQueue={}\", action.toLower(), req.getParamString(), operation.sendToOCPQueue);\n\n      SolrResponse response = null;\n      Map<String, Object> props = operation.execute(req, rsp, this);\n      String asyncId = req.getParams().get(ASYNC);\n      if (props != null) {\n        if (asyncId != null) {\n          props.put(ASYNC, asyncId);\n        }\n        props.put(QUEUE_OPERATION, operation.action.toLower());\n        ZkNodeProps zkProps = new ZkNodeProps(props);\n        if (operation.sendToOCPQueue) {\n          response = handleResponse(operation.action.toLower(), zkProps, rsp, operation.timeOut);\n        }\n        else Overseer.getStateUpdateQueue(coreContainer.getZkController().getZkClient()).offer(Utils.toJSON(props));\n        final String collectionName = zkProps.getStr(NAME);\n        if (action.equals(CollectionAction.CREATE) && asyncId == null) {\n          if (rsp.getException() == null) {\n            waitForActiveCollection(collectionName, zkProps, cores, response);\n          }\n        }\n      }\n    } else {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"action is a required param\");\n    }\n    rsp.setHttpCaching(false);\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Make sure the cores is enabled\n    CoreContainer cores = getCoreContainer();\n    if (cores == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Core container instance missing\");\n    }\n\n    // Make sure that the core is ZKAware\n    if(!cores.isZooKeeperAware()) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Solr instance is not running in SolrCloud mode.\");\n    }\n\n    // Pick the action\n    SolrParams params = req.getParams();\n    String a = params.get(CoreAdminParams.ACTION);\n    if (a != null) {\n      CollectionAction action = CollectionAction.get(a);\n      if (action == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown action: \" + a);\n      }\n      CollectionOperation operation = CollectionOperation.get(action);\n      log.info(\"Invoked Collection Action :{} with params {} and sendToOCPQueue={}\", action.toLower(), req.getParamString(), operation.sendToOCPQueue);\n\n      SolrResponse response = null;\n      Map<String, Object> props = operation.call(req, rsp, this);\n      String asyncId = req.getParams().get(ASYNC);\n      if (props != null) {\n        if (asyncId != null) {\n          props.put(ASYNC, asyncId);\n        }\n        props.put(QUEUE_OPERATION, operation.action.toLower());\n        ZkNodeProps zkProps = new ZkNodeProps(props);\n        if (operation.sendToOCPQueue) {\n          response = handleResponse(operation.action.toLower(), zkProps, rsp, operation.timeOut);\n        }\n        else Overseer.getStateUpdateQueue(coreContainer.getZkController().getZkClient()).offer(Utils.toJSON(props));\n        final String collectionName = zkProps.getStr(NAME);\n        if (action.equals(CollectionAction.CREATE) && asyncId == null) {\n          if (rsp.getException() == null) {\n            waitForActiveCollection(collectionName, zkProps, cores, response);\n          }\n        }\n      }\n    } else {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"action is a required param\");\n    }\n    rsp.setHttpCaching(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Make sure the cores is enabled\n    CoreContainer cores = getCoreContainer();\n    if (cores == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Core container instance missing\");\n    }\n\n    // Make sure that the core is ZKAware\n    if(!cores.isZooKeeperAware()) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Solr instance is not running in SolrCloud mode.\");\n    }\n\n    // Pick the action\n    SolrParams params = req.getParams();\n    String a = params.get(CoreAdminParams.ACTION);\n    if (a != null) {\n      CollectionAction action = CollectionAction.get(a);\n      if (action == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown action: \" + a);\n      }\n      CollectionOperation operation = CollectionOperation.get(action);\n      log.info(\"Invoked Collection Action :{} with params {} and sendToOCPQueue={}\", action.toLower(), req.getParamString(), operation.sendToOCPQueue);\n\n      SolrResponse response = null;\n      Map<String, Object> props = operation.execute(req, rsp, this);\n      String asyncId = req.getParams().get(ASYNC);\n      if (props != null) {\n        if (asyncId != null) {\n          props.put(ASYNC, asyncId);\n        }\n        props.put(QUEUE_OPERATION, operation.action.toLower());\n        ZkNodeProps zkProps = new ZkNodeProps(props);\n        if (operation.sendToOCPQueue) {\n          response = handleResponse(operation.action.toLower(), zkProps, rsp, operation.timeOut);\n        }\n        else Overseer.getStateUpdateQueue(coreContainer.getZkController().getZkClient()).offer(Utils.toJSON(props));\n        final String collectionName = zkProps.getStr(NAME);\n        if (action.equals(CollectionAction.CREATE) && asyncId == null) {\n          if (rsp.getException() == null) {\n            waitForActiveCollection(collectionName, zkProps, cores, response);\n          }\n        }\n      }\n    } else {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"action is a required param\");\n    }\n    rsp.setHttpCaching(false);\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Make sure the cores is enabled\n    CoreContainer cores = getCoreContainer();\n    if (cores == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Core container instance missing\");\n    }\n\n    // Make sure that the core is ZKAware\n    if(!cores.isZooKeeperAware()) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Solr instance is not running in SolrCloud mode.\");\n    }\n\n    // Pick the action\n    SolrParams params = req.getParams();\n    String a = params.get(CoreAdminParams.ACTION);\n    if (a != null) {\n      CollectionAction action = CollectionAction.get(a);\n      if (action == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown action: \" + a);\n      }\n      CollectionOperation operation = CollectionOperation.get(action);\n      log.info(\"Invoked Collection Action :{} with params {} and sendToOCPQueue={}\", action.toLower(), req.getParamString(), operation.sendToOCPQueue);\n\n      SolrResponse response = null;\n      Map<String, Object> props = operation.call(req, rsp, this);\n      String asyncId = req.getParams().get(ASYNC);\n      if (props != null) {\n        if (asyncId != null) {\n          props.put(ASYNC, asyncId);\n        }\n        props.put(QUEUE_OPERATION, operation.action.toLower());\n        ZkNodeProps zkProps = new ZkNodeProps(props);\n        if (operation.sendToOCPQueue) {\n          response = handleResponse(operation.action.toLower(), zkProps, rsp, operation.timeOut);\n        }\n        else Overseer.getStateUpdateQueue(coreContainer.getZkController().getZkClient()).offer(Utils.toJSON(props));\n        final String collectionName = zkProps.getStr(NAME);\n        if (action.equals(CollectionAction.CREATE) && asyncId == null) {\n          if (rsp.getException() == null) {\n            waitForActiveCollection(collectionName, zkProps, cores, response);\n          }\n        }\n      }\n    } else {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"action is a required param\");\n    }\n    rsp.setHttpCaching(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fcf710a8fcd590cf55c855d422c7a10fce3e6117","date":1485842253,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Make sure the cores is enabled\n    CoreContainer cores = getCoreContainer();\n    if (cores == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Core container instance missing\");\n    }\n\n    // Make sure that the core is ZKAware\n    if(!cores.isZooKeeperAware()) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Solr instance is not running in SolrCloud mode.\");\n    }\n\n    // Pick the action\n    SolrParams params = req.getParams();\n    String a = params.get(CoreAdminParams.ACTION);\n    if (a != null) {\n      CollectionAction action = CollectionAction.get(a);\n      if (action == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown action: \" + a);\n      }\n      CollectionOperation operation = CollectionOperation.get(action);\n      log.info(\"Invoked Collection Action :{} with params {} and sendToOCPQueue={}\", action.toLower(), req.getParamString(), operation.sendToOCPQueue);\n\n      invokeAction(req, rsp, cores, action, operation);\n    } else {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"action is a required param\");\n    }\n    rsp.setHttpCaching(false);\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Make sure the cores is enabled\n    CoreContainer cores = getCoreContainer();\n    if (cores == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Core container instance missing\");\n    }\n\n    // Make sure that the core is ZKAware\n    if(!cores.isZooKeeperAware()) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Solr instance is not running in SolrCloud mode.\");\n    }\n\n    // Pick the action\n    SolrParams params = req.getParams();\n    String a = params.get(CoreAdminParams.ACTION);\n    if (a != null) {\n      CollectionAction action = CollectionAction.get(a);\n      if (action == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown action: \" + a);\n      }\n      CollectionOperation operation = CollectionOperation.get(action);\n      log.info(\"Invoked Collection Action :{} with params {} and sendToOCPQueue={}\", action.toLower(), req.getParamString(), operation.sendToOCPQueue);\n\n      SolrResponse response = null;\n      Map<String, Object> props = operation.execute(req, rsp, this);\n      String asyncId = req.getParams().get(ASYNC);\n      if (props != null) {\n        if (asyncId != null) {\n          props.put(ASYNC, asyncId);\n        }\n        props.put(QUEUE_OPERATION, operation.action.toLower());\n        ZkNodeProps zkProps = new ZkNodeProps(props);\n        if (operation.sendToOCPQueue) {\n          response = handleResponse(operation.action.toLower(), zkProps, rsp, operation.timeOut);\n        }\n        else Overseer.getStateUpdateQueue(coreContainer.getZkController().getZkClient()).offer(Utils.toJSON(props));\n        final String collectionName = zkProps.getStr(NAME);\n        if (action.equals(CollectionAction.CREATE) && asyncId == null) {\n          if (rsp.getException() == null) {\n            waitForActiveCollection(collectionName, zkProps, cores, response);\n          }\n        }\n      }\n    } else {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"action is a required param\");\n    }\n    rsp.setHttpCaching(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c3523a0ab04c3002eee3896c75ea5f10f388bcc","date":1485968422,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Make sure the cores is enabled\n    CoreContainer cores = getCoreContainer();\n    if (cores == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Core container instance missing\");\n    }\n\n    // Make sure that the core is ZKAware\n    if(!cores.isZooKeeperAware()) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Solr instance is not running in SolrCloud mode.\");\n    }\n\n    // Pick the action\n    SolrParams params = req.getParams();\n    String a = params.get(CoreAdminParams.ACTION);\n    if (a != null) {\n      CollectionAction action = CollectionAction.get(a);\n      if (action == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown action: \" + a);\n      }\n      CollectionOperation operation = CollectionOperation.get(action);\n      log.info(\"Invoked Collection Action :{} with params {} and sendToOCPQueue={}\", action.toLower(), req.getParamString(), operation.sendToOCPQueue);\n\n      invokeAction(req, rsp, cores, action, operation);\n    } else {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"action is a required param\");\n    }\n    rsp.setHttpCaching(false);\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Make sure the cores is enabled\n    CoreContainer cores = getCoreContainer();\n    if (cores == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Core container instance missing\");\n    }\n\n    // Make sure that the core is ZKAware\n    if(!cores.isZooKeeperAware()) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Solr instance is not running in SolrCloud mode.\");\n    }\n\n    // Pick the action\n    SolrParams params = req.getParams();\n    String a = params.get(CoreAdminParams.ACTION);\n    if (a != null) {\n      CollectionAction action = CollectionAction.get(a);\n      if (action == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown action: \" + a);\n      }\n      CollectionOperation operation = CollectionOperation.get(action);\n      log.info(\"Invoked Collection Action :{} with params {} and sendToOCPQueue={}\", action.toLower(), req.getParamString(), operation.sendToOCPQueue);\n\n      SolrResponse response = null;\n      Map<String, Object> props = operation.execute(req, rsp, this);\n      String asyncId = req.getParams().get(ASYNC);\n      if (props != null) {\n        if (asyncId != null) {\n          props.put(ASYNC, asyncId);\n        }\n        props.put(QUEUE_OPERATION, operation.action.toLower());\n        ZkNodeProps zkProps = new ZkNodeProps(props);\n        if (operation.sendToOCPQueue) {\n          response = handleResponse(operation.action.toLower(), zkProps, rsp, operation.timeOut);\n        }\n        else Overseer.getStateUpdateQueue(coreContainer.getZkController().getZkClient()).offer(Utils.toJSON(props));\n        final String collectionName = zkProps.getStr(NAME);\n        if (action.equals(CollectionAction.CREATE) && asyncId == null) {\n          if (rsp.getException() == null) {\n            waitForActiveCollection(collectionName, zkProps, cores, response);\n          }\n        }\n      }\n    } else {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"action is a required param\");\n    }\n    rsp.setHttpCaching(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4a5ccd0bfaf3f19cb94878533706f75a5b132227","date":1525312867,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Make sure the cores is enabled\n    CoreContainer cores = getCoreContainer();\n    if (cores == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Core container instance missing\");\n    }\n\n    // Make sure that the core is ZKAware\n    if(!cores.isZooKeeperAware()) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Solr instance is not running in SolrCloud mode.\");\n    }\n\n    // Pick the action\n    SolrParams params = req.getParams();\n    String a = params.get(CoreAdminParams.ACTION);\n    if (a != null) {\n      CollectionAction action = CollectionAction.get(a);\n      if (action == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown action: \" + a);\n      }\n      CollectionOperation operation = CollectionOperation.get(action);\n      log.info(\"Invoked Collection Action :{} with params {} and sendToOCPQueue={}\", action.toLower(), req.getParamString(), operation.sendToOCPQueue);\n      MDCLoggingContext.setCollection(req.getParams().get(COLLECTION));\n      invokeAction(req, rsp, cores, action, operation);\n    } else {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"action is a required param\");\n    }\n    rsp.setHttpCaching(false);\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Make sure the cores is enabled\n    CoreContainer cores = getCoreContainer();\n    if (cores == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Core container instance missing\");\n    }\n\n    // Make sure that the core is ZKAware\n    if(!cores.isZooKeeperAware()) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Solr instance is not running in SolrCloud mode.\");\n    }\n\n    // Pick the action\n    SolrParams params = req.getParams();\n    String a = params.get(CoreAdminParams.ACTION);\n    if (a != null) {\n      CollectionAction action = CollectionAction.get(a);\n      if (action == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown action: \" + a);\n      }\n      CollectionOperation operation = CollectionOperation.get(action);\n      log.info(\"Invoked Collection Action :{} with params {} and sendToOCPQueue={}\", action.toLower(), req.getParamString(), operation.sendToOCPQueue);\n\n      invokeAction(req, rsp, cores, action, operation);\n    } else {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"action is a required param\");\n    }\n    rsp.setHttpCaching(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2668c99990e4c94a78bac005aa682b7c5986d23a","date":1561446137,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Make sure the cores is enabled\n    CoreContainer cores = getCoreContainer();\n    if (cores == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Core container instance missing\");\n    }\n\n    // Make sure that the core is ZKAware\n    if (!cores.isZooKeeperAware()) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Solr instance is not running in SolrCloud mode.\");\n    }\n\n    // Pick the action\n    SolrParams params = req.getParams();\n    String a = params.get(CoreAdminParams.ACTION);\n    if (a != null) {\n      CollectionAction action = CollectionAction.get(a);\n      if (action == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown action: \" + a);\n      }\n      CollectionOperation operation = CollectionOperation.get(action);\n      log.info(\"Invoked Collection Action :{} with params {} and sendToOCPQueue={}\", action.toLower(), req.getParamString(), operation.sendToOCPQueue);\n      MDCLoggingContext.setCollection(req.getParams().get(COLLECTION));\n      invokeAction(req, rsp, cores, action, operation);\n    } else {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"action is a required param\");\n    }\n    rsp.setHttpCaching(false);\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Make sure the cores is enabled\n    CoreContainer cores = getCoreContainer();\n    if (cores == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Core container instance missing\");\n    }\n\n    // Make sure that the core is ZKAware\n    if(!cores.isZooKeeperAware()) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Solr instance is not running in SolrCloud mode.\");\n    }\n\n    // Pick the action\n    SolrParams params = req.getParams();\n    String a = params.get(CoreAdminParams.ACTION);\n    if (a != null) {\n      CollectionAction action = CollectionAction.get(a);\n      if (action == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown action: \" + a);\n      }\n      CollectionOperation operation = CollectionOperation.get(action);\n      log.info(\"Invoked Collection Action :{} with params {} and sendToOCPQueue={}\", action.toLower(), req.getParamString(), operation.sendToOCPQueue);\n      MDCLoggingContext.setCollection(req.getParams().get(COLLECTION));\n      invokeAction(req, rsp, cores, action, operation);\n    } else {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"action is a required param\");\n    }\n    rsp.setHttpCaching(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"575e66bd4b2349209027f6801184da7fc3cba13f","date":1587609169,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Make sure the cores is enabled\n    CoreContainer cores = getCoreContainer();\n    if (cores == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Core container instance missing\");\n    }\n\n    // Make sure that the core is ZKAware\n    if (!cores.isZooKeeperAware()) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Solr instance is not running in SolrCloud mode.\");\n    }\n\n    // Pick the action\n    SolrParams params = req.getParams();\n    String a = params.get(CoreAdminParams.ACTION);\n    if (a != null) {\n      CollectionAction action = CollectionAction.get(a);\n      if (action == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown action: \" + a);\n      }\n      CollectionOperation operation = CollectionOperation.get(action);\n      if (log.isInfoEnabled()) {\n        log.info(\"Invoked Collection Action :{} with params {} and sendToOCPQueue={}\"\n            , action.toLower(), req.getParamString(), operation.sendToOCPQueue);\n      }\n      MDCLoggingContext.setCollection(req.getParams().get(COLLECTION));\n      invokeAction(req, rsp, cores, action, operation);\n    } else {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"action is a required param\");\n    }\n    rsp.setHttpCaching(false);\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Make sure the cores is enabled\n    CoreContainer cores = getCoreContainer();\n    if (cores == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Core container instance missing\");\n    }\n\n    // Make sure that the core is ZKAware\n    if (!cores.isZooKeeperAware()) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Solr instance is not running in SolrCloud mode.\");\n    }\n\n    // Pick the action\n    SolrParams params = req.getParams();\n    String a = params.get(CoreAdminParams.ACTION);\n    if (a != null) {\n      CollectionAction action = CollectionAction.get(a);\n      if (action == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown action: \" + a);\n      }\n      CollectionOperation operation = CollectionOperation.get(action);\n      log.info(\"Invoked Collection Action :{} with params {} and sendToOCPQueue={}\", action.toLower(), req.getParamString(), operation.sendToOCPQueue);\n      MDCLoggingContext.setCollection(req.getParams().get(COLLECTION));\n      invokeAction(req, rsp, cores, action, operation);\n    } else {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"action is a required param\");\n    }\n    rsp.setHttpCaching(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0b6680904fafe5905f847812d32dc7ad79c96a0","date":1600243603,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Make sure the cores is enabled\n    CoreContainer cores = checkErrors();\n\n    // Pick the action\n    SolrParams params = req.getParams();\n    String a = params.get(CoreAdminParams.ACTION);\n    if (a != null) {\n      CollectionAction action = CollectionAction.get(a);\n      if (action == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown action: \" + a);\n      }\n      CollectionOperation operation = CollectionOperation.get(action);\n      if (log.isInfoEnabled()) {\n        log.info(\"Invoked Collection Action :{} with params {} and sendToOCPQueue={}\"\n            , action.toLower(), req.getParamString(), operation.sendToOCPQueue);\n      }\n      MDCLoggingContext.setCollection(req.getParams().get(COLLECTION));\n      invokeAction(req, rsp, cores, action, operation);\n    } else {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"action is a required param\");\n    }\n    rsp.setHttpCaching(false);\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Make sure the cores is enabled\n    CoreContainer cores = getCoreContainer();\n    if (cores == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Core container instance missing\");\n    }\n\n    // Make sure that the core is ZKAware\n    if (!cores.isZooKeeperAware()) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Solr instance is not running in SolrCloud mode.\");\n    }\n\n    // Pick the action\n    SolrParams params = req.getParams();\n    String a = params.get(CoreAdminParams.ACTION);\n    if (a != null) {\n      CollectionAction action = CollectionAction.get(a);\n      if (action == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown action: \" + a);\n      }\n      CollectionOperation operation = CollectionOperation.get(action);\n      if (log.isInfoEnabled()) {\n        log.info(\"Invoked Collection Action :{} with params {} and sendToOCPQueue={}\"\n            , action.toLower(), req.getParamString(), operation.sendToOCPQueue);\n      }\n      MDCLoggingContext.setCollection(req.getParams().get(COLLECTION));\n      invokeAction(req, rsp, cores, action, operation);\n    } else {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"action is a required param\");\n    }\n    rsp.setHttpCaching(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"680b6449f09827f58fe987aff279e014c311d966","date":1600247985,"type":3,"author":"noblepaul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Make sure the cores is enabled\n    CoreContainer cores = checkErrors();\n\n    // Pick the action\n    SolrParams params = req.getParams();\n    String a = params.get(CoreAdminParams.ACTION);\n    if (a != null) {\n      CollectionAction action = CollectionAction.get(a);\n      if (action == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown action: \" + a);\n      }\n      CollectionOperation operation = CollectionOperation.get(action);\n      if (log.isInfoEnabled()) {\n        log.info(\"Invoked Collection Action :{} with params {} and sendToOCPQueue={}\"\n            , action.toLower(), req.getParamString(), operation.sendToOCPQueue);\n      }\n      MDCLoggingContext.setCollection(req.getParams().get(COLLECTION));\n      invokeAction(req, rsp, cores, action, operation);\n    } else {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"action is a required param\");\n    }\n    rsp.setHttpCaching(false);\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Make sure the cores is enabled\n    CoreContainer cores = getCoreContainer();\n    if (cores == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Core container instance missing\");\n    }\n\n    // Make sure that the core is ZKAware\n    if (!cores.isZooKeeperAware()) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Solr instance is not running in SolrCloud mode.\");\n    }\n\n    // Pick the action\n    SolrParams params = req.getParams();\n    String a = params.get(CoreAdminParams.ACTION);\n    if (a != null) {\n      CollectionAction action = CollectionAction.get(a);\n      if (action == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown action: \" + a);\n      }\n      CollectionOperation operation = CollectionOperation.get(action);\n      if (log.isInfoEnabled()) {\n        log.info(\"Invoked Collection Action :{} with params {} and sendToOCPQueue={}\"\n            , action.toLower(), req.getParamString(), operation.sendToOCPQueue);\n      }\n      MDCLoggingContext.setCollection(req.getParams().get(COLLECTION));\n      invokeAction(req, rsp, cores, action, operation);\n    } else {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"action is a required param\");\n    }\n    rsp.setHttpCaching(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"af2638813028b254a88b418ebeafb541afb49653":["b1197d6f54676973038ad402280d80a139dfd27b","19498030e0adab22f604f935cae3c03dcf0952a6"],"1fd45c40db7386b20de53b81216bcf574f15be40":["1bd110770d1b52ca7d7201410a102c468c540967"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["0beaed456aa3358e5e4a99ea2aea994ef6c81de3","4ee5a5186e7187cd42c6f7ff64b6e7206a780325"],"1cfa38e36fa296bb93d77df7d5556257dffa4535":["933fa8f09adfcd1a858cd0fc7912e21ee993b7fc"],"1bd110770d1b52ca7d7201410a102c468c540967":["cfb61c9baefa8681e40fca3c803f61bf485a9d8d"],"64707d25b6352cf02909d3916038a3b3cec7f0a8":["dc2bafa00000be70227a04c29e3f885ff41e531d"],"058f5a3debcfa0ea477da3eabb4cbe2ec0fac211":["8497bb4f9de61b5520423bd9af88ea11a6e109e7"],"dc2bafa00000be70227a04c29e3f885ff41e531d":["9279b175e5e66258442d2123a50f052219a9cc1b"],"1eeda7e62e149f90eee8895af874c74efa7d4852":["4ee5a5186e7187cd42c6f7ff64b6e7206a780325"],"933fa8f09adfcd1a858cd0fc7912e21ee993b7fc":["8512200aed2724abd80dbeb686d3412d537b7d8a"],"680b6449f09827f58fe987aff279e014c311d966":["575e66bd4b2349209027f6801184da7fc3cba13f","c0b6680904fafe5905f847812d32dc7ad79c96a0"],"aba371508186796cc6151d8223a5b4e16d02e26e":["33d0ed80b7b47e34ad3ff033a77544563aba3085","933fa8f09adfcd1a858cd0fc7912e21ee993b7fc"],"3bbb741690cdafda7f1f7549c26351c912917a69":["b693a83132c9e45afcd564fd65a25b60ed80388b"],"fab88842367a77ce26aedb47e9ea666beea01cf9":["44de42d869f7d8e5235d43c4ad9a99f520363a2f"],"33d0ed80b7b47e34ad3ff033a77544563aba3085":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f4c07fa58a256dccf8b95364855fd5e9ad4d1401":["a6f693ed86f289b2e42b46684409b3997f2c264a"],"d9a47902d6207303f5ed3e7aaca62ca33433af66":["9279b175e5e66258442d2123a50f052219a9cc1b","dc2bafa00000be70227a04c29e3f885ff41e531d"],"575e66bd4b2349209027f6801184da7fc3cba13f":["2668c99990e4c94a78bac005aa682b7c5986d23a"],"5455c7b3fed6c1671990a44c19071cb0488c2c25":["64707d25b6352cf02909d3916038a3b3cec7f0a8"],"50d6978d50a20568ca78a42c96927bbd9e97d919":["07dbf37ea1062f6f3f4fc7deb3ae385ab837ebc8"],"da888af1ab894358122a22229051215f58cf4d54":["40dce2b6d4360eb09fa16fb6c40a18b25507ed73"],"fe999fc2d95d6fea71f960bf9556858387ba21f5":["1cfa38e36fa296bb93d77df7d5556257dffa4535"],"19498030e0adab22f604f935cae3c03dcf0952a6":["b1197d6f54676973038ad402280d80a139dfd27b"],"4a5ccd0bfaf3f19cb94878533706f75a5b132227":["fcf710a8fcd590cf55c855d422c7a10fce3e6117"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8512200aed2724abd80dbeb686d3412d537b7d8a"],"8497bb4f9de61b5520423bd9af88ea11a6e109e7":["fab88842367a77ce26aedb47e9ea666beea01cf9"],"4ee5a5186e7187cd42c6f7ff64b6e7206a780325":["0beaed456aa3358e5e4a99ea2aea994ef6c81de3"],"cfb61c9baefa8681e40fca3c803f61bf485a9d8d":["5455c7b3fed6c1671990a44c19071cb0488c2c25"],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","fcf710a8fcd590cf55c855d422c7a10fce3e6117"],"9f45f67a018421da088ea39274f23ad5d339b97d":["058f5a3debcfa0ea477da3eabb4cbe2ec0fac211"],"9ebd3a557326ef3eab85b73a8cff781f7d801248":["1fd45c40db7386b20de53b81216bcf574f15be40"],"78ae724e55b07e7d158110151c0a7247cd54b460":["9f45f67a018421da088ea39274f23ad5d339b97d"],"44de42d869f7d8e5235d43c4ad9a99f520363a2f":["da888af1ab894358122a22229051215f58cf4d54"],"13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8":["fab88842367a77ce26aedb47e9ea666beea01cf9","8497bb4f9de61b5520423bd9af88ea11a6e109e7"],"b1197d6f54676973038ad402280d80a139dfd27b":["3bbb741690cdafda7f1f7549c26351c912917a69"],"2668c99990e4c94a78bac005aa682b7c5986d23a":["4a5ccd0bfaf3f19cb94878533706f75a5b132227"],"07dbf37ea1062f6f3f4fc7deb3ae385ab837ebc8":["9ebd3a557326ef3eab85b73a8cff781f7d801248"],"8512200aed2724abd80dbeb686d3412d537b7d8a":["33d0ed80b7b47e34ad3ff033a77544563aba3085"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7":["fe33227f6805edab2036cbb80645cc4e2d1fa424","933fa8f09adfcd1a858cd0fc7912e21ee993b7fc"],"966680ec125a9cc7b7fc2a85cd8fa5d4008ff6ef":["1eeda7e62e149f90eee8895af874c74efa7d4852"],"5eb2511ababf862ea11e10761c70ee560cd84510":["9f45f67a018421da088ea39274f23ad5d339b97d","78ae724e55b07e7d158110151c0a7247cd54b460"],"55980207f1977bd1463465de1659b821347e2fa8":["d9a47902d6207303f5ed3e7aaca62ca33433af66","64707d25b6352cf02909d3916038a3b3cec7f0a8"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["37a0f60745e53927c4c876cfe5b5a58170f0646c","1eeda7e62e149f90eee8895af874c74efa7d4852"],"fcf710a8fcd590cf55c855d422c7a10fce3e6117":["dcd5215a06a4284c4cecb6fd8e55461411b6cca4"],"b693a83132c9e45afcd564fd65a25b60ed80388b":["50d6978d50a20568ca78a42c96927bbd9e97d919"],"0beaed456aa3358e5e4a99ea2aea994ef6c81de3":["fe999fc2d95d6fea71f960bf9556858387ba21f5"],"c0b6680904fafe5905f847812d32dc7ad79c96a0":["575e66bd4b2349209027f6801184da7fc3cba13f"],"dcd5215a06a4284c4cecb6fd8e55461411b6cca4":["af2638813028b254a88b418ebeafb541afb49653"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["af2638813028b254a88b418ebeafb541afb49653","dcd5215a06a4284c4cecb6fd8e55461411b6cca4"],"9279b175e5e66258442d2123a50f052219a9cc1b":["f4c07fa58a256dccf8b95364855fd5e9ad4d1401"],"a6f693ed86f289b2e42b46684409b3997f2c264a":["78ae724e55b07e7d158110151c0a7247cd54b460"],"0a22eafe3f72a4c2945eaad9547e6c78816978f4":["55980207f1977bd1463465de1659b821347e2fa8","5455c7b3fed6c1671990a44c19071cb0488c2c25"],"40dce2b6d4360eb09fa16fb6c40a18b25507ed73":["966680ec125a9cc7b7fc2a85cd8fa5d4008ff6ef"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["680b6449f09827f58fe987aff279e014c311d966"]},"commit2Childs":{"af2638813028b254a88b418ebeafb541afb49653":["dcd5215a06a4284c4cecb6fd8e55461411b6cca4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"1fd45c40db7386b20de53b81216bcf574f15be40":["9ebd3a557326ef3eab85b73a8cff781f7d801248"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec"],"1cfa38e36fa296bb93d77df7d5556257dffa4535":["fe999fc2d95d6fea71f960bf9556858387ba21f5"],"1bd110770d1b52ca7d7201410a102c468c540967":["1fd45c40db7386b20de53b81216bcf574f15be40"],"64707d25b6352cf02909d3916038a3b3cec7f0a8":["5455c7b3fed6c1671990a44c19071cb0488c2c25","55980207f1977bd1463465de1659b821347e2fa8"],"058f5a3debcfa0ea477da3eabb4cbe2ec0fac211":["9f45f67a018421da088ea39274f23ad5d339b97d"],"dc2bafa00000be70227a04c29e3f885ff41e531d":["64707d25b6352cf02909d3916038a3b3cec7f0a8","d9a47902d6207303f5ed3e7aaca62ca33433af66"],"1eeda7e62e149f90eee8895af874c74efa7d4852":["966680ec125a9cc7b7fc2a85cd8fa5d4008ff6ef","716d18f3a9b0993bc679d7fa7abdc9bfb03411ec"],"933fa8f09adfcd1a858cd0fc7912e21ee993b7fc":["1cfa38e36fa296bb93d77df7d5556257dffa4535","aba371508186796cc6151d8223a5b4e16d02e26e","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7"],"680b6449f09827f58fe987aff279e014c311d966":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"33d0ed80b7b47e34ad3ff033a77544563aba3085":["aba371508186796cc6151d8223a5b4e16d02e26e","8512200aed2724abd80dbeb686d3412d537b7d8a"],"3bbb741690cdafda7f1f7549c26351c912917a69":["b1197d6f54676973038ad402280d80a139dfd27b"],"fab88842367a77ce26aedb47e9ea666beea01cf9":["8497bb4f9de61b5520423bd9af88ea11a6e109e7","13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8"],"f4c07fa58a256dccf8b95364855fd5e9ad4d1401":["9279b175e5e66258442d2123a50f052219a9cc1b"],"d9a47902d6207303f5ed3e7aaca62ca33433af66":["55980207f1977bd1463465de1659b821347e2fa8"],"575e66bd4b2349209027f6801184da7fc3cba13f":["680b6449f09827f58fe987aff279e014c311d966","c0b6680904fafe5905f847812d32dc7ad79c96a0"],"5455c7b3fed6c1671990a44c19071cb0488c2c25":["cfb61c9baefa8681e40fca3c803f61bf485a9d8d","0a22eafe3f72a4c2945eaad9547e6c78816978f4"],"50d6978d50a20568ca78a42c96927bbd9e97d919":["b693a83132c9e45afcd564fd65a25b60ed80388b"],"da888af1ab894358122a22229051215f58cf4d54":["44de42d869f7d8e5235d43c4ad9a99f520363a2f"],"19498030e0adab22f604f935cae3c03dcf0952a6":["af2638813028b254a88b418ebeafb541afb49653"],"fe999fc2d95d6fea71f960bf9556858387ba21f5":["0beaed456aa3358e5e4a99ea2aea994ef6c81de3"],"4a5ccd0bfaf3f19cb94878533706f75a5b132227":["2668c99990e4c94a78bac005aa682b7c5986d23a"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["4b51f65902cc2d20ddeb7a5b949aaddf990f31a7"],"8497bb4f9de61b5520423bd9af88ea11a6e109e7":["058f5a3debcfa0ea477da3eabb4cbe2ec0fac211","13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8"],"4ee5a5186e7187cd42c6f7ff64b6e7206a780325":["37a0f60745e53927c4c876cfe5b5a58170f0646c","1eeda7e62e149f90eee8895af874c74efa7d4852"],"cfb61c9baefa8681e40fca3c803f61bf485a9d8d":["1bd110770d1b52ca7d7201410a102c468c540967"],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":[],"9f45f67a018421da088ea39274f23ad5d339b97d":["78ae724e55b07e7d158110151c0a7247cd54b460","5eb2511ababf862ea11e10761c70ee560cd84510"],"9ebd3a557326ef3eab85b73a8cff781f7d801248":["07dbf37ea1062f6f3f4fc7deb3ae385ab837ebc8"],"44de42d869f7d8e5235d43c4ad9a99f520363a2f":["fab88842367a77ce26aedb47e9ea666beea01cf9"],"78ae724e55b07e7d158110151c0a7247cd54b460":["5eb2511ababf862ea11e10761c70ee560cd84510","a6f693ed86f289b2e42b46684409b3997f2c264a"],"13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8":[],"b1197d6f54676973038ad402280d80a139dfd27b":["af2638813028b254a88b418ebeafb541afb49653","19498030e0adab22f604f935cae3c03dcf0952a6"],"2668c99990e4c94a78bac005aa682b7c5986d23a":["575e66bd4b2349209027f6801184da7fc3cba13f"],"8512200aed2724abd80dbeb686d3412d537b7d8a":["933fa8f09adfcd1a858cd0fc7912e21ee993b7fc","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"07dbf37ea1062f6f3f4fc7deb3ae385ab837ebc8":["50d6978d50a20568ca78a42c96927bbd9e97d919"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["33d0ed80b7b47e34ad3ff033a77544563aba3085","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7":[],"966680ec125a9cc7b7fc2a85cd8fa5d4008ff6ef":["40dce2b6d4360eb09fa16fb6c40a18b25507ed73"],"5eb2511ababf862ea11e10761c70ee560cd84510":[],"55980207f1977bd1463465de1659b821347e2fa8":["0a22eafe3f72a4c2945eaad9547e6c78816978f4"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":[],"fcf710a8fcd590cf55c855d422c7a10fce3e6117":["4a5ccd0bfaf3f19cb94878533706f75a5b132227","7c3523a0ab04c3002eee3896c75ea5f10f388bcc"],"b693a83132c9e45afcd564fd65a25b60ed80388b":["3bbb741690cdafda7f1f7549c26351c912917a69"],"0beaed456aa3358e5e4a99ea2aea994ef6c81de3":["37a0f60745e53927c4c876cfe5b5a58170f0646c","4ee5a5186e7187cd42c6f7ff64b6e7206a780325"],"c0b6680904fafe5905f847812d32dc7ad79c96a0":["680b6449f09827f58fe987aff279e014c311d966"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc"],"dcd5215a06a4284c4cecb6fd8e55461411b6cca4":["fcf710a8fcd590cf55c855d422c7a10fce3e6117","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"9279b175e5e66258442d2123a50f052219a9cc1b":["dc2bafa00000be70227a04c29e3f885ff41e531d","d9a47902d6207303f5ed3e7aaca62ca33433af66"],"a6f693ed86f289b2e42b46684409b3997f2c264a":["f4c07fa58a256dccf8b95364855fd5e9ad4d1401"],"0a22eafe3f72a4c2945eaad9547e6c78816978f4":[],"40dce2b6d4360eb09fa16fb6c40a18b25507ed73":["da888af1ab894358122a22229051215f58cf4d54"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aba371508186796cc6151d8223a5b4e16d02e26e","7c3523a0ab04c3002eee3896c75ea5f10f388bcc","13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","5eb2511ababf862ea11e10761c70ee560cd84510","716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","0a22eafe3f72a4c2945eaad9547e6c78816978f4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}