{"path":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ScheduledTriggers#removeTriggerZKData(String).mjava","commits":[{"id":"464244264804e3f981bf1fb4b732516d8d62dbc2","date":1495736161,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ScheduledTriggers#removeTriggerZKData(String).mjava","pathOld":"/dev/null","sourceNew":"  private void removeTriggerZKData(String triggerName) {\n    String statePath = ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH + \"/\" + triggerName;\n    String eventsPath = ZkStateReader.SOLR_AUTOSCALING_EVENTS_PATH + \"/\" + triggerName;\n    try {\n      if (zkClient.exists(statePath, true)) {\n        zkClient.delete(statePath, -1, true);\n      }\n    } catch (KeeperException | InterruptedException e) {\n      log.warn(\"Failed to remove state for removed trigger \" + statePath, e);\n    }\n    try {\n      if (zkClient.exists(eventsPath, true)) {\n        zkClient.delete(eventsPath, -1, true);\n      }\n    } catch (KeeperException | InterruptedException e) {\n      log.warn(\"Failed to remove events for removed trigger \" + eventsPath, e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5531f16a602ef350b6c9adfb08ebaa13a60fe3db","date":1495756318,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ScheduledTriggers#removeTriggerZKData(String).mjava","pathOld":"/dev/null","sourceNew":"  private void removeTriggerZKData(String triggerName) {\n    String statePath = ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH + \"/\" + triggerName;\n    String eventsPath = ZkStateReader.SOLR_AUTOSCALING_EVENTS_PATH + \"/\" + triggerName;\n    try {\n      if (zkClient.exists(statePath, true)) {\n        zkClient.delete(statePath, -1, true);\n      }\n    } catch (KeeperException | InterruptedException e) {\n      log.warn(\"Failed to remove state for removed trigger \" + statePath, e);\n    }\n    try {\n      if (zkClient.exists(eventsPath, true)) {\n        zkClient.delete(eventsPath, -1, true);\n      }\n    } catch (KeeperException | InterruptedException e) {\n      log.warn(\"Failed to remove events for removed trigger \" + eventsPath, e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c32a8448145a74a8902798f2e63e322827757ff2","date":1496834422,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ScheduledTriggers#removeTriggerZKData(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ScheduledTriggers#removeTriggerZKData(String).mjava","sourceNew":"  private void removeTriggerZKData(String triggerName) {\n    String statePath = ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH + \"/\" + triggerName;\n    String eventsPath = ZkStateReader.SOLR_AUTOSCALING_EVENTS_PATH + \"/\" + triggerName;\n    try {\n      if (zkClient.exists(statePath, true)) {\n        zkClient.delete(statePath, -1, true);\n      }\n    } catch (KeeperException | InterruptedException e) {\n      log.warn(\"Failed to remove state for removed trigger \" + statePath, e);\n    }\n    try {\n      if (zkClient.exists(eventsPath, true)) {\n        List<String> events = zkClient.getChildren(eventsPath, null, true);\n        List<Op> ops = new ArrayList<>(events.size() + 1);\n        events.forEach(ev -> {\n          ops.add(Op.delete(eventsPath + \"/\" + ev, -1));\n        });\n        ops.add(Op.delete(eventsPath, -1));\n        zkClient.multi(ops, true);\n      }\n    } catch (KeeperException | InterruptedException e) {\n      log.warn(\"Failed to remove events for removed trigger \" + eventsPath, e);\n    }\n  }\n\n","sourceOld":"  private void removeTriggerZKData(String triggerName) {\n    String statePath = ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH + \"/\" + triggerName;\n    String eventsPath = ZkStateReader.SOLR_AUTOSCALING_EVENTS_PATH + \"/\" + triggerName;\n    try {\n      if (zkClient.exists(statePath, true)) {\n        zkClient.delete(statePath, -1, true);\n      }\n    } catch (KeeperException | InterruptedException e) {\n      log.warn(\"Failed to remove state for removed trigger \" + statePath, e);\n    }\n    try {\n      if (zkClient.exists(eventsPath, true)) {\n        zkClient.delete(eventsPath, -1, true);\n      }\n    } catch (KeeperException | InterruptedException e) {\n      log.warn(\"Failed to remove events for removed trigger \" + eventsPath, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"664ff2b928393480d9655010aa700656b0fcade0","date":1496842764,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ScheduledTriggers#removeTriggerZKData(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ScheduledTriggers#removeTriggerZKData(String).mjava","sourceNew":"  private void removeTriggerZKData(String triggerName) {\n    String statePath = ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH + \"/\" + triggerName;\n    String eventsPath = ZkStateReader.SOLR_AUTOSCALING_EVENTS_PATH + \"/\" + triggerName;\n    try {\n      if (zkClient.exists(statePath, true)) {\n        zkClient.delete(statePath, -1, true);\n      }\n    } catch (KeeperException | InterruptedException e) {\n      log.warn(\"Failed to remove state for removed trigger \" + statePath, e);\n    }\n    try {\n      if (zkClient.exists(eventsPath, true)) {\n        List<String> events = zkClient.getChildren(eventsPath, null, true);\n        List<Op> ops = new ArrayList<>(events.size() + 1);\n        events.forEach(ev -> {\n          ops.add(Op.delete(eventsPath + \"/\" + ev, -1));\n        });\n        ops.add(Op.delete(eventsPath, -1));\n        zkClient.multi(ops, true);\n      }\n    } catch (KeeperException | InterruptedException e) {\n      log.warn(\"Failed to remove events for removed trigger \" + eventsPath, e);\n    }\n  }\n\n","sourceOld":"  private void removeTriggerZKData(String triggerName) {\n    String statePath = ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH + \"/\" + triggerName;\n    String eventsPath = ZkStateReader.SOLR_AUTOSCALING_EVENTS_PATH + \"/\" + triggerName;\n    try {\n      if (zkClient.exists(statePath, true)) {\n        zkClient.delete(statePath, -1, true);\n      }\n    } catch (KeeperException | InterruptedException e) {\n      log.warn(\"Failed to remove state for removed trigger \" + statePath, e);\n    }\n    try {\n      if (zkClient.exists(eventsPath, true)) {\n        zkClient.delete(eventsPath, -1, true);\n      }\n    } catch (KeeperException | InterruptedException e) {\n      log.warn(\"Failed to remove events for removed trigger \" + eventsPath, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac","date":1503580177,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ScheduledTriggers#removeTriggerZKData(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ScheduledTriggers#removeTriggerZKData(String).mjava","sourceNew":"  private void removeTriggerZKData(String triggerName) {\n    String statePath = ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH + \"/\" + triggerName;\n    String eventsPath = ZkStateReader.SOLR_AUTOSCALING_EVENTS_PATH + \"/\" + triggerName;\n    try {\n      if (clusterDataProvider.hasData(statePath)) {\n        clusterDataProvider.removeData(statePath, -1);\n      }\n    } catch (Exception e) {\n      log.warn(\"Failed to remove state for removed trigger \" + statePath, e);\n    }\n    try {\n      if (clusterDataProvider.hasData(eventsPath)) {\n        List<String> events = clusterDataProvider.listData(eventsPath);\n        List<Op> ops = new ArrayList<>(events.size() + 1);\n        events.forEach(ev -> {\n          ops.add(Op.delete(eventsPath + \"/\" + ev, -1));\n        });\n        ops.add(Op.delete(eventsPath, -1));\n        clusterDataProvider.multi(ops);\n      }\n    } catch (Exception e) {\n      log.warn(\"Failed to remove events for removed trigger \" + eventsPath, e);\n    }\n  }\n\n","sourceOld":"  private void removeTriggerZKData(String triggerName) {\n    String statePath = ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH + \"/\" + triggerName;\n    String eventsPath = ZkStateReader.SOLR_AUTOSCALING_EVENTS_PATH + \"/\" + triggerName;\n    try {\n      if (zkClient.exists(statePath, true)) {\n        zkClient.delete(statePath, -1, true);\n      }\n    } catch (KeeperException | InterruptedException e) {\n      log.warn(\"Failed to remove state for removed trigger \" + statePath, e);\n    }\n    try {\n      if (zkClient.exists(eventsPath, true)) {\n        List<String> events = zkClient.getChildren(eventsPath, null, true);\n        List<Op> ops = new ArrayList<>(events.size() + 1);\n        events.forEach(ev -> {\n          ops.add(Op.delete(eventsPath + \"/\" + ev, -1));\n        });\n        ops.add(Op.delete(eventsPath, -1));\n        zkClient.multi(ops, true);\n      }\n    } catch (KeeperException | InterruptedException e) {\n      log.warn(\"Failed to remove events for removed trigger \" + eventsPath, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b869898f50ca80263bac2e3ae0949f7700e5c977","date":1503580229,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ScheduledTriggers#removeTriggerZKData(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ScheduledTriggers#removeTriggerZKData(String).mjava","sourceNew":"  private void removeTriggerZKData(String triggerName) {\n    String statePath = ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH + \"/\" + triggerName;\n    String eventsPath = ZkStateReader.SOLR_AUTOSCALING_EVENTS_PATH + \"/\" + triggerName;\n    try {\n      if (zkClient.exists(statePath, true)) {\n        zkClient.delete(statePath, -1, true);\n      }\n    } catch (KeeperException | InterruptedException e) {\n      log.warn(\"Failed to remove state for removed trigger \" + statePath, e);\n    }\n    try {\n      if (zkClient.exists(eventsPath, true)) {\n        List<String> events = zkClient.getChildren(eventsPath, null, true);\n        List<Op> ops = new ArrayList<>(events.size() + 1);\n        events.forEach(ev -> {\n          ops.add(Op.delete(eventsPath + \"/\" + ev, -1));\n        });\n        ops.add(Op.delete(eventsPath, -1));\n        zkClient.multi(ops, true);\n      }\n    } catch (KeeperException | InterruptedException e) {\n      log.warn(\"Failed to remove events for removed trigger \" + eventsPath, e);\n    }\n  }\n\n","sourceOld":"  private void removeTriggerZKData(String triggerName) {\n    String statePath = ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH + \"/\" + triggerName;\n    String eventsPath = ZkStateReader.SOLR_AUTOSCALING_EVENTS_PATH + \"/\" + triggerName;\n    try {\n      if (clusterDataProvider.hasData(statePath)) {\n        clusterDataProvider.removeData(statePath, -1);\n      }\n    } catch (Exception e) {\n      log.warn(\"Failed to remove state for removed trigger \" + statePath, e);\n    }\n    try {\n      if (clusterDataProvider.hasData(eventsPath)) {\n        List<String> events = clusterDataProvider.listData(eventsPath);\n        List<Op> ops = new ArrayList<>(events.size() + 1);\n        events.forEach(ev -> {\n          ops.add(Op.delete(eventsPath + \"/\" + ev, -1));\n        });\n        ops.add(Op.delete(eventsPath, -1));\n        clusterDataProvider.multi(ops);\n      }\n    } catch (Exception e) {\n      log.warn(\"Failed to remove events for removed trigger \" + eventsPath, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5b8cffee0b9c10b78bd087c71485b482217fe84f","date":1505950827,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ScheduledTriggers#removeTriggerZKData(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ScheduledTriggers#removeTriggerZKData(String).mjava","sourceNew":"  private void removeTriggerZKData(String triggerName) {\n    String statePath = ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH + \"/\" + triggerName;\n    String eventsPath = ZkStateReader.SOLR_AUTOSCALING_EVENTS_PATH + \"/\" + triggerName;\n    try {\n      zkDelTree(zkClient, statePath);\n    } catch (KeeperException | InterruptedException e) {\n      log.warn(\"Failed to remove state for removed trigger \" + statePath, e);\n    }\n    try {\n      zkDelTree(zkClient, eventsPath);\n    } catch (KeeperException | InterruptedException e) {\n      log.warn(\"Failed to remove events for removed trigger \" + eventsPath, e);\n    }\n  }\n\n","sourceOld":"  private void removeTriggerZKData(String triggerName) {\n    String statePath = ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH + \"/\" + triggerName;\n    String eventsPath = ZkStateReader.SOLR_AUTOSCALING_EVENTS_PATH + \"/\" + triggerName;\n    try {\n      if (zkClient.exists(statePath, true)) {\n        zkClient.delete(statePath, -1, true);\n      }\n    } catch (KeeperException | InterruptedException e) {\n      log.warn(\"Failed to remove state for removed trigger \" + statePath, e);\n    }\n    try {\n      if (zkClient.exists(eventsPath, true)) {\n        List<String> events = zkClient.getChildren(eventsPath, null, true);\n        List<Op> ops = new ArrayList<>(events.size() + 1);\n        events.forEach(ev -> {\n          ops.add(Op.delete(eventsPath + \"/\" + ev, -1));\n        });\n        ops.add(Op.delete(eventsPath, -1));\n        zkClient.multi(ops, true);\n      }\n    } catch (KeeperException | InterruptedException e) {\n      log.warn(\"Failed to remove events for removed trigger \" + eventsPath, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c304e97e7c1d472bc70e801b35ee78583916c6cd","date":1507105431,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ScheduledTriggers#removeTriggerZKData(String).mjava","pathOld":"/dev/null","sourceNew":"  private void removeTriggerZKData(String triggerName) {\n    String statePath = ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH + \"/\" + triggerName;\n    String eventsPath = ZkStateReader.SOLR_AUTOSCALING_EVENTS_PATH + \"/\" + triggerName;\n    try {\n      zkDelTree(zkClient, statePath);\n    } catch (KeeperException | InterruptedException e) {\n      log.warn(\"Failed to remove state for removed trigger \" + statePath, e);\n    }\n    try {\n      zkDelTree(zkClient, eventsPath);\n    } catch (KeeperException | InterruptedException e) {\n      log.warn(\"Failed to remove events for removed trigger \" + eventsPath, e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"560c18d71dad43d675158783c3840f8c80d6d39c","date":1507105532,"type":0,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ScheduledTriggers#removeTriggerZKData(String).mjava","pathOld":"/dev/null","sourceNew":"  private void removeTriggerZKData(String triggerName) {\n    String statePath = ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH + \"/\" + triggerName;\n    String eventsPath = ZkStateReader.SOLR_AUTOSCALING_EVENTS_PATH + \"/\" + triggerName;\n    try {\n      zkDelTree(zkClient, statePath);\n    } catch (KeeperException | InterruptedException e) {\n      log.warn(\"Failed to remove state for removed trigger \" + statePath, e);\n    }\n    try {\n      zkDelTree(zkClient, eventsPath);\n    } catch (KeeperException | InterruptedException e) {\n      log.warn(\"Failed to remove events for removed trigger \" + eventsPath, e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85212dad4ed576c7f7e6c165ee19e597b7b4efc8","date":1507997740,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ScheduledTriggers#removeTriggerZKData(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ScheduledTriggers#removeTriggerZKData(String).mjava","sourceNew":"  private void removeTriggerZKData(String triggerName) {\n    String statePath = ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH + \"/\" + triggerName;\n    String eventsPath = ZkStateReader.SOLR_AUTOSCALING_EVENTS_PATH + \"/\" + triggerName;\n    try {\n      if (stateManager.hasData(statePath)) {\n        stateManager.removeData(statePath, -1);\n      }\n    } catch (Exception e) {\n      log.warn(\"Failed to remove state for removed trigger \" + statePath, e);\n    }\n    try {\n      if (stateManager.hasData(eventsPath)) {\n        List<String> events = stateManager.listData(eventsPath);\n        List<Op> ops = new ArrayList<>(events.size() + 1);\n        events.forEach(ev -> {\n          ops.add(Op.delete(eventsPath + \"/\" + ev, -1));\n        });\n        ops.add(Op.delete(eventsPath, -1));\n        stateManager.multi(ops);\n      }\n    } catch (Exception e) {\n      log.warn(\"Failed to remove events for removed trigger \" + eventsPath, e);\n    }\n  }\n\n","sourceOld":"  private void removeTriggerZKData(String triggerName) {\n    String statePath = ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH + \"/\" + triggerName;\n    String eventsPath = ZkStateReader.SOLR_AUTOSCALING_EVENTS_PATH + \"/\" + triggerName;\n    try {\n      zkDelTree(zkClient, statePath);\n    } catch (KeeperException | InterruptedException e) {\n      log.warn(\"Failed to remove state for removed trigger \" + statePath, e);\n    }\n    try {\n      zkDelTree(zkClient, eventsPath);\n    } catch (KeeperException | InterruptedException e) {\n      log.warn(\"Failed to remove events for removed trigger \" + eventsPath, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7d7cf463e12b13965d63f133adc46a1c673d0c4e","date":1509636749,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ScheduledTriggers#removeTriggerZKData(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ScheduledTriggers#removeTriggerZKData(String).mjava","sourceNew":"  private void removeTriggerZKData(String triggerName) {\n    String statePath = ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH + \"/\" + triggerName;\n    String eventsPath = ZkStateReader.SOLR_AUTOSCALING_EVENTS_PATH + \"/\" + triggerName;\n    try {\n      if (stateManager.hasData(statePath)) {\n        stateManager.removeData(statePath, -1);\n      }\n    } catch (NoSuchElementException e) {\n      // already removed by someone else\n    } catch (Exception e) {\n      log.warn(\"Failed to remove state for removed trigger \" + statePath, e);\n    }\n    try {\n      if (stateManager.hasData(eventsPath)) {\n        List<String> events = stateManager.listData(eventsPath);\n        List<Op> ops = new ArrayList<>(events.size() + 1);\n        events.forEach(ev -> {\n          ops.add(Op.delete(eventsPath + \"/\" + ev, -1));\n        });\n        ops.add(Op.delete(eventsPath, -1));\n        stateManager.multi(ops);\n      }\n    } catch (NoSuchElementException e) {\n      // already removed by someone else\n    } catch (Exception e) {\n      log.warn(\"Failed to remove events for removed trigger \" + eventsPath, e);\n    }\n  }\n\n","sourceOld":"  private void removeTriggerZKData(String triggerName) {\n    String statePath = ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH + \"/\" + triggerName;\n    String eventsPath = ZkStateReader.SOLR_AUTOSCALING_EVENTS_PATH + \"/\" + triggerName;\n    try {\n      if (stateManager.hasData(statePath)) {\n        stateManager.removeData(statePath, -1);\n      }\n    } catch (Exception e) {\n      log.warn(\"Failed to remove state for removed trigger \" + statePath, e);\n    }\n    try {\n      if (stateManager.hasData(eventsPath)) {\n        List<String> events = stateManager.listData(eventsPath);\n        List<Op> ops = new ArrayList<>(events.size() + 1);\n        events.forEach(ev -> {\n          ops.add(Op.delete(eventsPath + \"/\" + ev, -1));\n        });\n        ops.add(Op.delete(eventsPath, -1));\n        stateManager.multi(ops);\n      }\n    } catch (Exception e) {\n      log.warn(\"Failed to remove events for removed trigger \" + eventsPath, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d523b8189b211dd1630166aa77b8c88bb48b3fcc","date":1510144168,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ScheduledTriggers#removeTriggerZKData(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ScheduledTriggers#removeTriggerZKData(String).mjava","sourceNew":"  private void removeTriggerZKData(String triggerName) {\n    String statePath = ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH + \"/\" + triggerName;\n    String eventsPath = ZkStateReader.SOLR_AUTOSCALING_EVENTS_PATH + \"/\" + triggerName;\n    try {\n      if (stateManager.hasData(statePath)) {\n        stateManager.removeData(statePath, -1);\n      }\n    } catch (NoSuchElementException e) {\n      // already removed by someone else\n    } catch (Exception e) {\n      log.warn(\"Failed to remove state for removed trigger \" + statePath, e);\n    }\n    try {\n      if (stateManager.hasData(eventsPath)) {\n        List<String> events = stateManager.listData(eventsPath);\n        List<Op> ops = new ArrayList<>(events.size() + 1);\n        events.forEach(ev -> {\n          ops.add(Op.delete(eventsPath + \"/\" + ev, -1));\n        });\n        ops.add(Op.delete(eventsPath, -1));\n        stateManager.multi(ops);\n      }\n    } catch (NoSuchElementException e) {\n      // already removed by someone else\n    } catch (Exception e) {\n      log.warn(\"Failed to remove events for removed trigger \" + eventsPath, e);\n    }\n  }\n\n","sourceOld":"  private void removeTriggerZKData(String triggerName) {\n    String statePath = ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH + \"/\" + triggerName;\n    String eventsPath = ZkStateReader.SOLR_AUTOSCALING_EVENTS_PATH + \"/\" + triggerName;\n    try {\n      if (stateManager.hasData(statePath)) {\n        stateManager.removeData(statePath, -1);\n      }\n    } catch (Exception e) {\n      log.warn(\"Failed to remove state for removed trigger \" + statePath, e);\n    }\n    try {\n      if (stateManager.hasData(eventsPath)) {\n        List<String> events = stateManager.listData(eventsPath);\n        List<Op> ops = new ArrayList<>(events.size() + 1);\n        events.forEach(ev -> {\n          ops.add(Op.delete(eventsPath + \"/\" + ev, -1));\n        });\n        ops.add(Op.delete(eventsPath, -1));\n        stateManager.multi(ops);\n      }\n    } catch (Exception e) {\n      log.warn(\"Failed to remove events for removed trigger \" + eventsPath, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"01e3e55745c6667006f67aaa604466b9974425f4","date":1518776937,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ScheduledTriggers#removeTriggerZKData(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ScheduledTriggers#removeTriggerZKData(String).mjava","sourceNew":"  private void removeTriggerZKData(String triggerName) {\n    String statePath = ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH + \"/\" + triggerName;\n    String eventsPath = ZkStateReader.SOLR_AUTOSCALING_EVENTS_PATH + \"/\" + triggerName;\n    try {\n      stateManager.removeRecursively(statePath, true, true);\n    } catch (Exception e) {\n      log.warn(\"Failed to remove state for removed trigger \" + statePath, e);\n    }\n    try {\n      stateManager.removeRecursively(eventsPath, true, true);\n    } catch (Exception e) {\n      log.warn(\"Failed to remove events for removed trigger \" + eventsPath, e);\n    }\n  }\n\n","sourceOld":"  private void removeTriggerZKData(String triggerName) {\n    String statePath = ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH + \"/\" + triggerName;\n    String eventsPath = ZkStateReader.SOLR_AUTOSCALING_EVENTS_PATH + \"/\" + triggerName;\n    try {\n      if (stateManager.hasData(statePath)) {\n        stateManager.removeData(statePath, -1);\n      }\n    } catch (NoSuchElementException e) {\n      // already removed by someone else\n    } catch (Exception e) {\n      log.warn(\"Failed to remove state for removed trigger \" + statePath, e);\n    }\n    try {\n      if (stateManager.hasData(eventsPath)) {\n        List<String> events = stateManager.listData(eventsPath);\n        List<Op> ops = new ArrayList<>(events.size() + 1);\n        events.forEach(ev -> {\n          ops.add(Op.delete(eventsPath + \"/\" + ev, -1));\n        });\n        ops.add(Op.delete(eventsPath, -1));\n        stateManager.multi(ops);\n      }\n    } catch (NoSuchElementException e) {\n      // already removed by someone else\n    } catch (Exception e) {\n      log.warn(\"Failed to remove events for removed trigger \" + eventsPath, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e35f2dde06b35aa9904949a3a93fabd090371077","date":1587906921,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ScheduledTriggers#removeTriggerZKData(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ScheduledTriggers#removeTriggerZKData(String).mjava","sourceNew":"  private void removeTriggerZKData(String triggerName) {\n    String statePath = ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH + \"/\" + triggerName;\n    String eventsPath = ZkStateReader.SOLR_AUTOSCALING_EVENTS_PATH + \"/\" + triggerName;\n    try {\n      stateManager.removeRecursively(statePath, true, true);\n    } catch (Exception e) {\n      log.warn(\"Failed to remove state for removed trigger {}\", statePath, e);\n    }\n    try {\n      stateManager.removeRecursively(eventsPath, true, true);\n    } catch (Exception e) {\n      log.warn(\"Failed to remove events for removed trigger {}\", eventsPath, e);\n    }\n  }\n\n","sourceOld":"  private void removeTriggerZKData(String triggerName) {\n    String statePath = ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH + \"/\" + triggerName;\n    String eventsPath = ZkStateReader.SOLR_AUTOSCALING_EVENTS_PATH + \"/\" + triggerName;\n    try {\n      stateManager.removeRecursively(statePath, true, true);\n    } catch (Exception e) {\n      log.warn(\"Failed to remove state for removed trigger \" + statePath, e);\n    }\n    try {\n      stateManager.removeRecursively(eventsPath, true, true);\n    } catch (Exception e) {\n      log.warn(\"Failed to remove events for removed trigger \" + eventsPath, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ScheduledTriggers#removeTriggerZKData(String).mjava","sourceNew":null,"sourceOld":"  private void removeTriggerZKData(String triggerName) {\n    String statePath = ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH + \"/\" + triggerName;\n    String eventsPath = ZkStateReader.SOLR_AUTOSCALING_EVENTS_PATH + \"/\" + triggerName;\n    try {\n      stateManager.removeRecursively(statePath, true, true);\n    } catch (Exception e) {\n      log.warn(\"Failed to remove state for removed trigger {}\", statePath, e);\n    }\n    try {\n      stateManager.removeRecursively(eventsPath, true, true);\n    } catch (Exception e) {\n      log.warn(\"Failed to remove events for removed trigger {}\", eventsPath, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5b8cffee0b9c10b78bd087c71485b482217fe84f"],"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac":["664ff2b928393480d9655010aa700656b0fcade0"],"3f504512a03d978990cbff30db0522b354e846db":["e35f2dde06b35aa9904949a3a93fabd090371077"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8","7d7cf463e12b13965d63f133adc46a1c673d0c4e"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["560c18d71dad43d675158783c3840f8c80d6d39c"],"b869898f50ca80263bac2e3ae0949f7700e5c977":["c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac"],"7d7cf463e12b13965d63f133adc46a1c673d0c4e":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"5531f16a602ef350b6c9adfb08ebaa13a60fe3db":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","464244264804e3f981bf1fb4b732516d8d62dbc2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5b8cffee0b9c10b78bd087c71485b482217fe84f":["b869898f50ca80263bac2e3ae0949f7700e5c977"],"464244264804e3f981bf1fb4b732516d8d62dbc2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e35f2dde06b35aa9904949a3a93fabd090371077":["01e3e55745c6667006f67aaa604466b9974425f4"],"c32a8448145a74a8902798f2e63e322827757ff2":["5531f16a602ef350b6c9adfb08ebaa13a60fe3db"],"560c18d71dad43d675158783c3840f8c80d6d39c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c304e97e7c1d472bc70e801b35ee78583916c6cd"],"01e3e55745c6667006f67aaa604466b9974425f4":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"],"664ff2b928393480d9655010aa700656b0fcade0":["5531f16a602ef350b6c9adfb08ebaa13a60fe3db","c32a8448145a74a8902798f2e63e322827757ff2"]},"commit2Childs":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["560c18d71dad43d675158783c3840f8c80d6d39c"],"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac":["b869898f50ca80263bac2e3ae0949f7700e5c977"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["01e3e55745c6667006f67aaa604466b9974425f4"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["d523b8189b211dd1630166aa77b8c88bb48b3fcc","7d7cf463e12b13965d63f133adc46a1c673d0c4e"],"7d7cf463e12b13965d63f133adc46a1c673d0c4e":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"b869898f50ca80263bac2e3ae0949f7700e5c977":["5b8cffee0b9c10b78bd087c71485b482217fe84f"],"5531f16a602ef350b6c9adfb08ebaa13a60fe3db":["c32a8448145a74a8902798f2e63e322827757ff2","664ff2b928393480d9655010aa700656b0fcade0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c304e97e7c1d472bc70e801b35ee78583916c6cd","5531f16a602ef350b6c9adfb08ebaa13a60fe3db","464244264804e3f981bf1fb4b732516d8d62dbc2","560c18d71dad43d675158783c3840f8c80d6d39c"],"5b8cffee0b9c10b78bd087c71485b482217fe84f":["c304e97e7c1d472bc70e801b35ee78583916c6cd"],"464244264804e3f981bf1fb4b732516d8d62dbc2":["5531f16a602ef350b6c9adfb08ebaa13a60fe3db"],"e35f2dde06b35aa9904949a3a93fabd090371077":["3f504512a03d978990cbff30db0522b354e846db"],"c32a8448145a74a8902798f2e63e322827757ff2":["664ff2b928393480d9655010aa700656b0fcade0"],"560c18d71dad43d675158783c3840f8c80d6d39c":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"01e3e55745c6667006f67aaa604466b9974425f4":["e35f2dde06b35aa9904949a3a93fabd090371077"],"664ff2b928393480d9655010aa700656b0fcade0":["c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}