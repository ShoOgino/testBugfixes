{"path":"lucene/core/src/java/org/apache/lucene/search/MultiTermQueryWrapperFilter#getDocIdSet(LeafReaderContext,Bits).mjava","commits":[{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":0,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/MultiTermQueryWrapperFilter#getDocIdSet(LeafReaderContext,Bits).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns a DocIdSet with documents that should be permitted in search\n   * results.\n   */\n  @Override\n  public DocIdSet getDocIdSet(LeafReaderContext context, Bits acceptDocs) throws IOException {\n    final LeafReader reader = context.reader();\n    final Fields fields = reader.fields();\n    if (fields == null) {\n      // reader has no fields\n      return null;\n    }\n\n    final Terms terms = fields.terms(query.field);\n    if (terms == null) {\n      // field does not exist\n      return null;\n    }\n\n    final TermsEnum termsEnum = query.getTermsEnum(terms);\n    assert termsEnum != null;\n    if (termsEnum.next() != null) {\n      // fill into a FixedBitSet\n      final FixedBitSet bitSet = new FixedBitSet(context.reader().maxDoc());\n      DocsEnum docsEnum = null;\n      do {\n        // System.out.println(\"  iter termCount=\" + termCount + \" term=\" +\n        // enumerator.term().toBytesString());\n        docsEnum = termsEnum.docs(acceptDocs, docsEnum, DocsEnum.FLAG_NONE);\n        int docid;\n        while ((docid = docsEnum.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n          bitSet.set(docid);\n        }\n      } while (termsEnum.next() != null);\n      // System.out.println(\"  done termCount=\" + termCount);\n\n      return bitSet;\n    } else {\n      return null;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["8028ab7a24273833d53d35eb160dba5b57283cf5"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"59ce67ef5584d0d65a576a6bbe06322cc84eb9b0","date":1412077943,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/MultiTermQueryWrapperFilter#getDocIdSet(LeafReaderContext,Bits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/MultiTermQueryWrapperFilter#getDocIdSet(LeafReaderContext,Bits).mjava","sourceNew":"  /**\n   * Returns a DocIdSet with documents that should be permitted in search\n   * results.\n   */\n  @Override\n  public DocIdSet getDocIdSet(LeafReaderContext context, Bits acceptDocs) throws IOException {\n    final LeafReader reader = context.reader();\n    final Fields fields = reader.fields();\n    if (fields == null) {\n      // reader has no fields\n      return null;\n    }\n\n    final Terms terms = fields.terms(query.field);\n    if (terms == null) {\n      // field does not exist\n      return null;\n    }\n\n    final TermsEnum termsEnum = query.getTermsEnum(terms);\n    assert termsEnum != null;\n\n    DocIdSetBuilder builder = new DocIdSetBuilder(context.reader().maxDoc());\n    DocsEnum docs = null;\n    while (termsEnum.next() != null) {\n      docs = termsEnum.docs(acceptDocs, docs, DocsEnum.FLAG_NONE);\n      builder.or(docs);\n    }\n    return builder.build();\n  }\n\n","sourceOld":"  /**\n   * Returns a DocIdSet with documents that should be permitted in search\n   * results.\n   */\n  @Override\n  public DocIdSet getDocIdSet(LeafReaderContext context, Bits acceptDocs) throws IOException {\n    final LeafReader reader = context.reader();\n    final Fields fields = reader.fields();\n    if (fields == null) {\n      // reader has no fields\n      return null;\n    }\n\n    final Terms terms = fields.terms(query.field);\n    if (terms == null) {\n      // field does not exist\n      return null;\n    }\n\n    final TermsEnum termsEnum = query.getTermsEnum(terms);\n    assert termsEnum != null;\n    if (termsEnum.next() != null) {\n      // fill into a FixedBitSet\n      final FixedBitSet bitSet = new FixedBitSet(context.reader().maxDoc());\n      DocsEnum docsEnum = null;\n      do {\n        // System.out.println(\"  iter termCount=\" + termCount + \" term=\" +\n        // enumerator.term().toBytesString());\n        docsEnum = termsEnum.docs(acceptDocs, docsEnum, DocsEnum.FLAG_NONE);\n        int docid;\n        while ((docid = docsEnum.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n          bitSet.set(docid);\n        }\n      } while (termsEnum.next() != null);\n      // System.out.println(\"  done termCount=\" + termCount);\n\n      return bitSet;\n    } else {\n      return null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d9a47902d6207303f5ed3e7aaca62ca33433af66","date":1412435312,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/MultiTermQueryWrapperFilter#getDocIdSet(LeafReaderContext,Bits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/MultiTermQueryWrapperFilter#getDocIdSet(LeafReaderContext,Bits).mjava","sourceNew":"  /**\n   * Returns a DocIdSet with documents that should be permitted in search\n   * results.\n   */\n  @Override\n  public DocIdSet getDocIdSet(LeafReaderContext context, Bits acceptDocs) throws IOException {\n    final LeafReader reader = context.reader();\n    final Fields fields = reader.fields();\n    if (fields == null) {\n      // reader has no fields\n      return null;\n    }\n\n    final Terms terms = fields.terms(query.field);\n    if (terms == null) {\n      // field does not exist\n      return null;\n    }\n\n    final TermsEnum termsEnum = query.getTermsEnum(terms);\n    assert termsEnum != null;\n\n    DocIdSetBuilder builder = new DocIdSetBuilder(context.reader().maxDoc());\n    DocsEnum docs = null;\n    while (termsEnum.next() != null) {\n      docs = termsEnum.docs(acceptDocs, docs, DocsEnum.FLAG_NONE);\n      builder.or(docs);\n    }\n    return builder.build();\n  }\n\n","sourceOld":"  /**\n   * Returns a DocIdSet with documents that should be permitted in search\n   * results.\n   */\n  @Override\n  public DocIdSet getDocIdSet(LeafReaderContext context, Bits acceptDocs) throws IOException {\n    final LeafReader reader = context.reader();\n    final Fields fields = reader.fields();\n    if (fields == null) {\n      // reader has no fields\n      return null;\n    }\n\n    final Terms terms = fields.terms(query.field);\n    if (terms == null) {\n      // field does not exist\n      return null;\n    }\n\n    final TermsEnum termsEnum = query.getTermsEnum(terms);\n    assert termsEnum != null;\n    if (termsEnum.next() != null) {\n      // fill into a FixedBitSet\n      final FixedBitSet bitSet = new FixedBitSet(context.reader().maxDoc());\n      DocsEnum docsEnum = null;\n      do {\n        // System.out.println(\"  iter termCount=\" + termCount + \" term=\" +\n        // enumerator.term().toBytesString());\n        docsEnum = termsEnum.docs(acceptDocs, docsEnum, DocsEnum.FLAG_NONE);\n        int docid;\n        while ((docid = docsEnum.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n          bitSet.set(docid);\n        }\n      } while (termsEnum.next() != null);\n      // System.out.println(\"  done termCount=\" + termCount);\n\n      return bitSet;\n    } else {\n      return null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b012914a8110b2ff1d075ed1ef72aa57084d4897","date":1414685177,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/MultiTermQueryWrapperFilter#getDocIdSet(LeafReaderContext,Bits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/MultiTermQueryWrapperFilter#getDocIdSet(LeafReaderContext,Bits).mjava","sourceNew":"  /**\n   * Returns a DocIdSet with documents that should be permitted in search\n   * results.\n   */\n  @Override\n  public DocIdSet getDocIdSet(LeafReaderContext context, Bits acceptDocs) throws IOException {\n    final LeafReader reader = context.reader();\n    final Fields fields = reader.fields();\n    if (fields == null) {\n      // reader has no fields\n      return null;\n    }\n\n    final Terms terms = fields.terms(query.field);\n    if (terms == null) {\n      // field does not exist\n      return null;\n    }\n\n    final TermsEnum termsEnum = query.getTermsEnum(terms);\n    assert termsEnum != null;\n\n    BitDocIdSet.Builder builder = new BitDocIdSet.Builder(context.reader().maxDoc());\n    DocsEnum docs = null;\n    while (termsEnum.next() != null) {\n      docs = termsEnum.docs(acceptDocs, docs, DocsEnum.FLAG_NONE);\n      builder.or(docs);\n    }\n    return builder.build();\n  }\n\n","sourceOld":"  /**\n   * Returns a DocIdSet with documents that should be permitted in search\n   * results.\n   */\n  @Override\n  public DocIdSet getDocIdSet(LeafReaderContext context, Bits acceptDocs) throws IOException {\n    final LeafReader reader = context.reader();\n    final Fields fields = reader.fields();\n    if (fields == null) {\n      // reader has no fields\n      return null;\n    }\n\n    final Terms terms = fields.terms(query.field);\n    if (terms == null) {\n      // field does not exist\n      return null;\n    }\n\n    final TermsEnum termsEnum = query.getTermsEnum(terms);\n    assert termsEnum != null;\n\n    DocIdSetBuilder builder = new DocIdSetBuilder(context.reader().maxDoc());\n    DocsEnum docs = null;\n    while (termsEnum.next() != null) {\n      docs = termsEnum.docs(acceptDocs, docs, DocsEnum.FLAG_NONE);\n      builder.or(docs);\n    }\n    return builder.build();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8028ab7a24273833d53d35eb160dba5b57283cf5","date":1416767720,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/MultiTermQueryWrapperFilter#getDocIdSet(LeafReaderContext,Bits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/MultiTermQueryWrapperFilter#getDocIdSet(LeafReaderContext,Bits).mjava","sourceNew":"  /**\n   * Returns a DocIdSet with documents that should be permitted in search\n   * results.\n   */\n  @Override\n  public DocIdSet getDocIdSet(LeafReaderContext context, Bits acceptDocs) throws IOException {\n    final Terms terms = context.reader().terms(query.field);\n    if (terms == null) {\n      // field does not exist\n      return null;\n    }\n\n    final TermsEnum termsEnum = query.getTermsEnum(terms);\n    assert termsEnum != null;\n\n    BitDocIdSet.Builder builder = new BitDocIdSet.Builder(context.reader().maxDoc());\n    DocsEnum docs = null;\n    while (termsEnum.next() != null) {\n      docs = termsEnum.docs(acceptDocs, docs, DocsEnum.FLAG_NONE);\n      builder.or(docs);\n    }\n    return builder.build();\n  }\n\n","sourceOld":"  /**\n   * Returns a DocIdSet with documents that should be permitted in search\n   * results.\n   */\n  @Override\n  public DocIdSet getDocIdSet(LeafReaderContext context, Bits acceptDocs) throws IOException {\n    final LeafReader reader = context.reader();\n    final Fields fields = reader.fields();\n    if (fields == null) {\n      // reader has no fields\n      return null;\n    }\n\n    final Terms terms = fields.terms(query.field);\n    if (terms == null) {\n      // field does not exist\n      return null;\n    }\n\n    final TermsEnum termsEnum = query.getTermsEnum(terms);\n    assert termsEnum != null;\n\n    BitDocIdSet.Builder builder = new BitDocIdSet.Builder(context.reader().maxDoc());\n    DocsEnum docs = null;\n    while (termsEnum.next() != null) {\n      docs = termsEnum.docs(acceptDocs, docs, DocsEnum.FLAG_NONE);\n      builder.or(docs);\n    }\n    return builder.build();\n  }\n\n","bugFix":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"51f5280f31484820499077f41fcdfe92d527d9dc","date":1423229122,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/MultiTermQueryWrapperFilter#getDocIdSet(LeafReaderContext,Bits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/MultiTermQueryWrapperFilter#getDocIdSet(LeafReaderContext,Bits).mjava","sourceNew":"  /**\n   * Returns a DocIdSet with documents that should be permitted in search\n   * results.\n   */\n  @Override\n  public DocIdSet getDocIdSet(LeafReaderContext context, Bits acceptDocs) throws IOException {\n    final Terms terms = context.reader().terms(query.field);\n    if (terms == null) {\n      // field does not exist\n      return null;\n    }\n\n    final TermsEnum termsEnum = query.getTermsEnum(terms);\n    assert termsEnum != null;\n\n    BitDocIdSet.Builder builder = new BitDocIdSet.Builder(context.reader().maxDoc());\n    PostingsEnum docs = null;\n    while (termsEnum.next() != null) {\n      docs = termsEnum.postings(acceptDocs, docs, PostingsEnum.FLAG_NONE);\n      builder.or(docs);\n    }\n    return builder.build();\n  }\n\n","sourceOld":"  /**\n   * Returns a DocIdSet with documents that should be permitted in search\n   * results.\n   */\n  @Override\n  public DocIdSet getDocIdSet(LeafReaderContext context, Bits acceptDocs) throws IOException {\n    final Terms terms = context.reader().terms(query.field);\n    if (terms == null) {\n      // field does not exist\n      return null;\n    }\n\n    final TermsEnum termsEnum = query.getTermsEnum(terms);\n    assert termsEnum != null;\n\n    BitDocIdSet.Builder builder = new BitDocIdSet.Builder(context.reader().maxDoc());\n    DocsEnum docs = null;\n    while (termsEnum.next() != null) {\n      docs = termsEnum.docs(acceptDocs, docs, DocsEnum.FLAG_NONE);\n      builder.or(docs);\n    }\n    return builder.build();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e73063b92d958076ef4ae8beb5f493e8ccdcecb4","date":1424177215,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/MultiTermQueryWrapperFilter#getDocIdSet(LeafReaderContext,Bits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/MultiTermQueryWrapperFilter#getDocIdSet(LeafReaderContext,Bits).mjava","sourceNew":"  /**\n   * Returns a DocIdSet with documents that should be permitted in search\n   * results.\n   */\n  @Override\n  public DocIdSet getDocIdSet(LeafReaderContext context, Bits acceptDocs) throws IOException {\n    final Terms terms = context.reader().terms(query.field);\n    if (terms == null) {\n      // field does not exist\n      return null;\n    }\n\n    final TermsEnum termsEnum = query.getTermsEnum(terms);\n    assert termsEnum != null;\n\n    BitDocIdSet.Builder builder = new BitDocIdSet.Builder(context.reader().maxDoc());\n    PostingsEnum docs = null;\n    while (termsEnum.next() != null) {\n      docs = termsEnum.postings(acceptDocs, docs, PostingsEnum.NONE);\n      builder.or(docs);\n    }\n    return builder.build();\n  }\n\n","sourceOld":"  /**\n   * Returns a DocIdSet with documents that should be permitted in search\n   * results.\n   */\n  @Override\n  public DocIdSet getDocIdSet(LeafReaderContext context, Bits acceptDocs) throws IOException {\n    final Terms terms = context.reader().terms(query.field);\n    if (terms == null) {\n      // field does not exist\n      return null;\n    }\n\n    final TermsEnum termsEnum = query.getTermsEnum(terms);\n    assert termsEnum != null;\n\n    BitDocIdSet.Builder builder = new BitDocIdSet.Builder(context.reader().maxDoc());\n    PostingsEnum docs = null;\n    while (termsEnum.next() != null) {\n      docs = termsEnum.postings(acceptDocs, docs, PostingsEnum.FLAG_NONE);\n      builder.or(docs);\n    }\n    return builder.build();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2713584a660051cd646423be682771e3bbd99985","date":1425046322,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/MultiTermQueryWrapperFilter#getDocIdSet(LeafReaderContext,Bits).mjava","sourceNew":null,"sourceOld":"  /**\n   * Returns a DocIdSet with documents that should be permitted in search\n   * results.\n   */\n  @Override\n  public DocIdSet getDocIdSet(LeafReaderContext context, Bits acceptDocs) throws IOException {\n    final Terms terms = context.reader().terms(query.field);\n    if (terms == null) {\n      // field does not exist\n      return null;\n    }\n\n    final TermsEnum termsEnum = query.getTermsEnum(terms);\n    assert termsEnum != null;\n\n    BitDocIdSet.Builder builder = new BitDocIdSet.Builder(context.reader().maxDoc());\n    PostingsEnum docs = null;\n    while (termsEnum.next() != null) {\n      docs = termsEnum.postings(acceptDocs, docs, PostingsEnum.NONE);\n      builder.or(docs);\n    }\n    return builder.build();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":4,"author":"Ryan Ernst","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/MultiTermQueryWrapperFilter#getDocIdSet(LeafReaderContext,Bits).mjava","sourceNew":null,"sourceOld":"  /**\n   * Returns a DocIdSet with documents that should be permitted in search\n   * results.\n   */\n  @Override\n  public DocIdSet getDocIdSet(LeafReaderContext context, Bits acceptDocs) throws IOException {\n    final Terms terms = context.reader().terms(query.field);\n    if (terms == null) {\n      // field does not exist\n      return null;\n    }\n\n    final TermsEnum termsEnum = query.getTermsEnum(terms);\n    assert termsEnum != null;\n\n    BitDocIdSet.Builder builder = new BitDocIdSet.Builder(context.reader().maxDoc());\n    PostingsEnum docs = null;\n    while (termsEnum.next() != null) {\n      docs = termsEnum.postings(acceptDocs, docs, PostingsEnum.NONE);\n      builder.or(docs);\n    }\n    return builder.build();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["e73063b92d958076ef4ae8beb5f493e8ccdcecb4","2713584a660051cd646423be682771e3bbd99985"],"e73063b92d958076ef4ae8beb5f493e8ccdcecb4":["51f5280f31484820499077f41fcdfe92d527d9dc"],"8028ab7a24273833d53d35eb160dba5b57283cf5":["b012914a8110b2ff1d075ed1ef72aa57084d4897"],"b012914a8110b2ff1d075ed1ef72aa57084d4897":["59ce67ef5584d0d65a576a6bbe06322cc84eb9b0"],"2713584a660051cd646423be682771e3bbd99985":["e73063b92d958076ef4ae8beb5f493e8ccdcecb4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d9a47902d6207303f5ed3e7aaca62ca33433af66":["c9fb5f46e264daf5ba3860defe623a89d202dd87","59ce67ef5584d0d65a576a6bbe06322cc84eb9b0"],"51f5280f31484820499077f41fcdfe92d527d9dc":["8028ab7a24273833d53d35eb160dba5b57283cf5"],"59ce67ef5584d0d65a576a6bbe06322cc84eb9b0":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2713584a660051cd646423be682771e3bbd99985"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"e73063b92d958076ef4ae8beb5f493e8ccdcecb4":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","2713584a660051cd646423be682771e3bbd99985"],"8028ab7a24273833d53d35eb160dba5b57283cf5":["51f5280f31484820499077f41fcdfe92d527d9dc"],"b012914a8110b2ff1d075ed1ef72aa57084d4897":["8028ab7a24273833d53d35eb160dba5b57283cf5"],"2713584a660051cd646423be682771e3bbd99985":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"d9a47902d6207303f5ed3e7aaca62ca33433af66":[],"51f5280f31484820499077f41fcdfe92d527d9dc":["e73063b92d958076ef4ae8beb5f493e8ccdcecb4"],"59ce67ef5584d0d65a576a6bbe06322cc84eb9b0":["b012914a8110b2ff1d075ed1ef72aa57084d4897","d9a47902d6207303f5ed3e7aaca62ca33433af66"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["d9a47902d6207303f5ed3e7aaca62ca33433af66","59ce67ef5584d0d65a576a6bbe06322cc84eb9b0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","d9a47902d6207303f5ed3e7aaca62ca33433af66","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}