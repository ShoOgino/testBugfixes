{"path":"src/java/org/apache/lucene/queryParser/precedence/TokenMgrError#LexicalError(boolean,int,int,int,String,char).mjava","commits":[{"id":"de78a3a2b1c56fcb670ee23d8c50ce678b7c1b1c","date":1110211682,"type":0,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/java/org/apache/lucene/queryParser/precedence/TokenMgrError#LexicalError(boolean,int,int,int,String,char).mjava","pathOld":"/dev/null","sourceNew":"   /**\n    * Returns a detailed message for the Error when it is thrown by the\n    * token manager to indicate a lexical error.\n    * Parameters : \n    *    EOFSeen     : indicates if EOF caused the lexicl error\n    *    curLexState : lexical state in which this error occured\n    *    errorLine   : line number when the error occured\n    *    errorColumn : column number when the error occured\n    *    errorAfter  : prefix that was seen before this error occured\n    *    curchar     : the offending character\n    * Note: You can customize the lexical error message by modifying this method.\n    */\n   protected static String LexicalError(boolean EOFSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar) {\n      return(\"Lexical error at line \" +\n           errorLine + \", column \" +\n           errorColumn + \".  Encountered: \" +\n           (EOFSeen ? \"<EOF> \" : (\"\\\"\" + addEscapes(String.valueOf(curChar)) + \"\\\"\") + \" (\" + (int)curChar + \"), \") +\n           \"after : \\\"\" + addEscapes(errorAfter) + \"\\\"\");\n   }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9a6ad8e299e8d7e15e32e68d75b73ed7d04756a","date":1114594353,"type":5,"author":"Erik Hatcher","isMerge":false,"pathNew":"contrib/miscellaneous/src/java/org/apache/lucene/queryParser/precedence/TokenMgrError#LexicalError(boolean,int,int,int,String,char).mjava","pathOld":"src/java/org/apache/lucene/queryParser/precedence/TokenMgrError#LexicalError(boolean,int,int,int,String,char).mjava","sourceNew":"   /**\n    * Returns a detailed message for the Error when it is thrown by the\n    * token manager to indicate a lexical error.\n    * Parameters : \n    *    EOFSeen     : indicates if EOF caused the lexicl error\n    *    curLexState : lexical state in which this error occured\n    *    errorLine   : line number when the error occured\n    *    errorColumn : column number when the error occured\n    *    errorAfter  : prefix that was seen before this error occured\n    *    curchar     : the offending character\n    * Note: You can customize the lexical error message by modifying this method.\n    */\n   protected static String LexicalError(boolean EOFSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar) {\n      return(\"Lexical error at line \" +\n           errorLine + \", column \" +\n           errorColumn + \".  Encountered: \" +\n           (EOFSeen ? \"<EOF> \" : (\"\\\"\" + addEscapes(String.valueOf(curChar)) + \"\\\"\") + \" (\" + (int)curChar + \"), \") +\n           \"after : \\\"\" + addEscapes(errorAfter) + \"\\\"\");\n   }\n\n","sourceOld":"   /**\n    * Returns a detailed message for the Error when it is thrown by the\n    * token manager to indicate a lexical error.\n    * Parameters : \n    *    EOFSeen     : indicates if EOF caused the lexicl error\n    *    curLexState : lexical state in which this error occured\n    *    errorLine   : line number when the error occured\n    *    errorColumn : column number when the error occured\n    *    errorAfter  : prefix that was seen before this error occured\n    *    curchar     : the offending character\n    * Note: You can customize the lexical error message by modifying this method.\n    */\n   protected static String LexicalError(boolean EOFSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar) {\n      return(\"Lexical error at line \" +\n           errorLine + \", column \" +\n           errorColumn + \".  Encountered: \" +\n           (EOFSeen ? \"<EOF> \" : (\"\\\"\" + addEscapes(String.valueOf(curChar)) + \"\\\"\") + \" (\" + (int)curChar + \"), \") +\n           \"after : \\\"\" + addEscapes(errorAfter) + \"\\\"\");\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9a6ad8e299e8d7e15e32e68d75b73ed7d04756a":["de78a3a2b1c56fcb670ee23d8c50ce678b7c1b1c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"de78a3a2b1c56fcb670ee23d8c50ce678b7c1b1c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e9a6ad8e299e8d7e15e32e68d75b73ed7d04756a"]},"commit2Childs":{"e9a6ad8e299e8d7e15e32e68d75b73ed7d04756a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["de78a3a2b1c56fcb670ee23d8c50ce678b7c1b1c"],"de78a3a2b1c56fcb670ee23d8c50ce678b7c1b1c":["e9a6ad8e299e8d7e15e32e68d75b73ed7d04756a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}