{"path":"lucene/core/src/test/org/apache/lucene/search/TestFieldCacheRewriteMethod#assertSame(String).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFieldCacheRewriteMethod#assertSame(String).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFieldCacheRewriteMethod#assertSame(String).mjava","sourceNew":"  /** Test fieldcache rewrite against filter rewrite */\n  @Override\n  protected void assertSame(String regexp) throws IOException {   \n    RegexpQuery fieldCache = new RegexpQuery(new Term(fieldName, regexp), RegExp.NONE);\n    fieldCache.setRewriteMethod(new FieldCacheRewriteMethod());\n    \n    RegexpQuery filter = new RegexpQuery(new Term(fieldName, regexp), RegExp.NONE);\n    filter.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);\n    \n    TopDocs fieldCacheDocs = searcher1.search(fieldCache, 25);\n    TopDocs filterDocs = searcher2.search(filter, 25);\n\n    CheckHits.checkEqual(fieldCache, fieldCacheDocs.scoreDocs, filterDocs.scoreDocs);\n  }\n\n","sourceOld":"  /** Test fieldcache rewrite against filter rewrite */\n  @Override\n  protected void assertSame(String regexp) throws IOException {   \n    RegexpQuery fieldCache = new RegexpQuery(new Term(fieldName, regexp), RegExp.NONE);\n    fieldCache.setRewriteMethod(new FieldCacheRewriteMethod());\n    \n    RegexpQuery filter = new RegexpQuery(new Term(fieldName, regexp), RegExp.NONE);\n    filter.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);\n    \n    TopDocs fieldCacheDocs = searcher1.search(fieldCache, 25);\n    TopDocs filterDocs = searcher2.search(filter, 25);\n\n    CheckHits.checkEqual(fieldCache, fieldCacheDocs.scoreDocs, filterDocs.scoreDocs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9274621789ce990dbfef455dabdf026bb3184821","date":1400046684,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFieldCacheRewriteMethod#assertSame(String).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFieldCacheRewriteMethod#assertSame(String).mjava","sourceNew":"  /** Test fieldcache rewrite against filter rewrite */\n  @Override\n  protected void assertSame(String regexp) throws IOException {   \n    RegexpQuery fieldCache = new RegexpQuery(new Term(fieldName, regexp), RegExp.NONE);\n    fieldCache.setRewriteMethod(new DocValuesRewriteMethod());\n    \n    RegexpQuery filter = new RegexpQuery(new Term(fieldName, regexp), RegExp.NONE);\n    filter.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);\n    \n    TopDocs fieldCacheDocs = searcher1.search(fieldCache, 25);\n    TopDocs filterDocs = searcher2.search(filter, 25);\n\n    CheckHits.checkEqual(fieldCache, fieldCacheDocs.scoreDocs, filterDocs.scoreDocs);\n  }\n\n","sourceOld":"  /** Test fieldcache rewrite against filter rewrite */\n  @Override\n  protected void assertSame(String regexp) throws IOException {   \n    RegexpQuery fieldCache = new RegexpQuery(new Term(fieldName, regexp), RegExp.NONE);\n    fieldCache.setRewriteMethod(new FieldCacheRewriteMethod());\n    \n    RegexpQuery filter = new RegexpQuery(new Term(fieldName, regexp), RegExp.NONE);\n    filter.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);\n    \n    TopDocs fieldCacheDocs = searcher1.search(fieldCache, 25);\n    TopDocs filterDocs = searcher2.search(filter, 25);\n\n    CheckHits.checkEqual(fieldCache, fieldCacheDocs.scoreDocs, filterDocs.scoreDocs);\n  }\n\n","bugFix":["25833e37398c5210d7bddaca9d14de45e194439a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93dd449115a9247533e44bab47e8429e5dccbc6d","date":1400258396,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFieldCacheRewriteMethod#assertSame(String).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFieldCacheRewriteMethod#assertSame(String).mjava","sourceNew":"  /** Test fieldcache rewrite against filter rewrite */\n  @Override\n  protected void assertSame(String regexp) throws IOException {   \n    RegexpQuery fieldCache = new RegexpQuery(new Term(fieldName, regexp), RegExp.NONE);\n    fieldCache.setRewriteMethod(new DocValuesRewriteMethod());\n    \n    RegexpQuery filter = new RegexpQuery(new Term(fieldName, regexp), RegExp.NONE);\n    filter.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);\n    \n    TopDocs fieldCacheDocs = searcher1.search(fieldCache, 25);\n    TopDocs filterDocs = searcher2.search(filter, 25);\n\n    CheckHits.checkEqual(fieldCache, fieldCacheDocs.scoreDocs, filterDocs.scoreDocs);\n  }\n\n","sourceOld":"  /** Test fieldcache rewrite against filter rewrite */\n  @Override\n  protected void assertSame(String regexp) throws IOException {   \n    RegexpQuery fieldCache = new RegexpQuery(new Term(fieldName, regexp), RegExp.NONE);\n    fieldCache.setRewriteMethod(new FieldCacheRewriteMethod());\n    \n    RegexpQuery filter = new RegexpQuery(new Term(fieldName, regexp), RegExp.NONE);\n    filter.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);\n    \n    TopDocs fieldCacheDocs = searcher1.search(fieldCache, 25);\n    TopDocs filterDocs = searcher2.search(filter, 25);\n\n    CheckHits.checkEqual(fieldCache, fieldCacheDocs.scoreDocs, filterDocs.scoreDocs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56572ec06f1407c066d6b7399413178b33176cd8","date":1400495675,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFieldCacheRewriteMethod#assertSame(String).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFieldCacheRewriteMethod#assertSame(String).mjava","sourceNew":"  /** Test fieldcache rewrite against filter rewrite */\n  @Override\n  protected void assertSame(String regexp) throws IOException {   \n    RegexpQuery fieldCache = new RegexpQuery(new Term(fieldName, regexp), RegExp.NONE);\n    fieldCache.setRewriteMethod(new DocValuesRewriteMethod());\n    \n    RegexpQuery filter = new RegexpQuery(new Term(fieldName, regexp), RegExp.NONE);\n    filter.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);\n    \n    TopDocs fieldCacheDocs = searcher1.search(fieldCache, 25);\n    TopDocs filterDocs = searcher2.search(filter, 25);\n\n    CheckHits.checkEqual(fieldCache, fieldCacheDocs.scoreDocs, filterDocs.scoreDocs);\n  }\n\n","sourceOld":"  /** Test fieldcache rewrite against filter rewrite */\n  @Override\n  protected void assertSame(String regexp) throws IOException {   \n    RegexpQuery fieldCache = new RegexpQuery(new Term(fieldName, regexp), RegExp.NONE);\n    fieldCache.setRewriteMethod(new FieldCacheRewriteMethod());\n    \n    RegexpQuery filter = new RegexpQuery(new Term(fieldName, regexp), RegExp.NONE);\n    filter.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);\n    \n    TopDocs fieldCacheDocs = searcher1.search(fieldCache, 25);\n    TopDocs filterDocs = searcher2.search(filter, 25);\n\n    CheckHits.checkEqual(fieldCache, fieldCacheDocs.scoreDocs, filterDocs.scoreDocs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2713584a660051cd646423be682771e3bbd99985","date":1425046322,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFieldCacheRewriteMethod#assertSame(String).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFieldCacheRewriteMethod#assertSame(String).mjava","sourceNew":"  /** Test fieldcache rewrite against filter rewrite */\n  @Override\n  protected void assertSame(String regexp) throws IOException {   \n    RegexpQuery fieldCache = new RegexpQuery(new Term(fieldName, regexp), RegExp.NONE);\n    fieldCache.setRewriteMethod(new DocValuesRewriteMethod());\n    \n    RegexpQuery filter = new RegexpQuery(new Term(fieldName, regexp), RegExp.NONE);\n    filter.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_REWRITE);\n    \n    TopDocs fieldCacheDocs = searcher1.search(fieldCache, 25);\n    TopDocs filterDocs = searcher2.search(filter, 25);\n\n    CheckHits.checkEqual(fieldCache, fieldCacheDocs.scoreDocs, filterDocs.scoreDocs);\n  }\n\n","sourceOld":"  /** Test fieldcache rewrite against filter rewrite */\n  @Override\n  protected void assertSame(String regexp) throws IOException {   \n    RegexpQuery fieldCache = new RegexpQuery(new Term(fieldName, regexp), RegExp.NONE);\n    fieldCache.setRewriteMethod(new DocValuesRewriteMethod());\n    \n    RegexpQuery filter = new RegexpQuery(new Term(fieldName, regexp), RegExp.NONE);\n    filter.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);\n    \n    TopDocs fieldCacheDocs = searcher1.search(fieldCache, 25);\n    TopDocs filterDocs = searcher2.search(filter, 25);\n\n    CheckHits.checkEqual(fieldCache, fieldCacheDocs.scoreDocs, filterDocs.scoreDocs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFieldCacheRewriteMethod#assertSame(String).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFieldCacheRewriteMethod#assertSame(String).mjava","sourceNew":"  /** Test fieldcache rewrite against filter rewrite */\n  @Override\n  protected void assertSame(String regexp) throws IOException {   \n    RegexpQuery fieldCache = new RegexpQuery(new Term(fieldName, regexp), RegExp.NONE);\n    fieldCache.setRewriteMethod(new DocValuesRewriteMethod());\n    \n    RegexpQuery filter = new RegexpQuery(new Term(fieldName, regexp), RegExp.NONE);\n    filter.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_REWRITE);\n    \n    TopDocs fieldCacheDocs = searcher1.search(fieldCache, 25);\n    TopDocs filterDocs = searcher2.search(filter, 25);\n\n    CheckHits.checkEqual(fieldCache, fieldCacheDocs.scoreDocs, filterDocs.scoreDocs);\n  }\n\n","sourceOld":"  /** Test fieldcache rewrite against filter rewrite */\n  @Override\n  protected void assertSame(String regexp) throws IOException {   \n    RegexpQuery fieldCache = new RegexpQuery(new Term(fieldName, regexp), RegExp.NONE);\n    fieldCache.setRewriteMethod(new DocValuesRewriteMethod());\n    \n    RegexpQuery filter = new RegexpQuery(new Term(fieldName, regexp), RegExp.NONE);\n    filter.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);\n    \n    TopDocs fieldCacheDocs = searcher1.search(fieldCache, 25);\n    TopDocs filterDocs = searcher2.search(filter, 25);\n\n    CheckHits.checkEqual(fieldCache, fieldCacheDocs.scoreDocs, filterDocs.scoreDocs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["93dd449115a9247533e44bab47e8429e5dccbc6d","2713584a660051cd646423be682771e3bbd99985"],"9274621789ce990dbfef455dabdf026bb3184821":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"2713584a660051cd646423be682771e3bbd99985":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","9274621789ce990dbfef455dabdf026bb3184821"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"56572ec06f1407c066d6b7399413178b33176cd8":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","93dd449115a9247533e44bab47e8429e5dccbc6d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2713584a660051cd646423be682771e3bbd99985"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"9274621789ce990dbfef455dabdf026bb3184821":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","2713584a660051cd646423be682771e3bbd99985","56572ec06f1407c066d6b7399413178b33176cd8"],"2713584a660051cd646423be682771e3bbd99985":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["9274621789ce990dbfef455dabdf026bb3184821","93dd449115a9247533e44bab47e8429e5dccbc6d","56572ec06f1407c066d6b7399413178b33176cd8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"56572ec06f1407c066d6b7399413178b33176cd8":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","56572ec06f1407c066d6b7399413178b33176cd8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}