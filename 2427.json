{"path":"contrib/benchmark/src/java/org/apache/lucene/benchmark/quality/utils/SubmissionReport#report(QualityQuery,TopDocs,String,Searcher).mjava","commits":[{"id":"df2d68685a69bd82bf79243e28623c0775eb7bd8","date":1185567892,"type":0,"author":"Doron Cohen","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/quality/utils/SubmissionReport#report(QualityQuery,TopDocs,String,Searcher).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Report a search result for a certain quality query.\n   * @param qq quality query for which the results are reported.\n   * @param td search results for the query.\n   * @param docNameField stored field used for fetching the result doc name.  \n   * @param searcher index access for fetching doc name.\n   * @throws IOException in case of a problem.\n   */\n  public void report(QualityQuery qq, TopDocs td, String docNameField, Searcher searcher) throws IOException {\n    if (logger==null) {\n      return;\n    }\n    ScoreDoc sd[] = td.scoreDocs;\n    String sep = \" \\t \";\n    DocNameExtractor xt = new DocNameExtractor(docNameField);\n    for (int i=0; i<sd.length; i++) {\n      String docName = xt.docName(searcher,sd[i].doc);\n      logger.println(\n          qq.getQueryID()       + sep +\n          '0'                   + sep +\n          format(docName,20)    + sep +\n          format(\"\"+i,7)        + sep +\n          nf.format(sd[i].score)\n          );\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"05d64184e4c44205b1dfa1cdf3869230c4025dc9","date":1199346280,"type":3,"author":"Doron Cohen","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/quality/utils/SubmissionReport#report(QualityQuery,TopDocs,String,Searcher).mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/quality/utils/SubmissionReport#report(QualityQuery,TopDocs,String,Searcher).mjava","sourceNew":"  /**\n   * Report a search result for a certain quality query.\n   * @param qq quality query for which the results are reported.\n   * @param td search results for the query.\n   * @param docNameField stored field used for fetching the result doc name.  \n   * @param searcher index access for fetching doc name.\n   * @throws IOException in case of a problem.\n   */\n  public void report(QualityQuery qq, TopDocs td, String docNameField, Searcher searcher) throws IOException {\n    if (logger==null) {\n      return;\n    }\n    ScoreDoc sd[] = td.scoreDocs;\n    String sep = \" \\t \";\n    DocNameExtractor xt = new DocNameExtractor(docNameField);\n    for (int i=0; i<sd.length; i++) {\n      String docName = xt.docName(searcher,sd[i].doc);\n      logger.println(\n          qq.getQueryID()       + sep +\n          \"Q0\"                   + sep +\n          format(docName,20)    + sep +\n          format(\"\"+i,7)        + sep +\n          nf.format(sd[i].score) + sep +\n          name\n          );\n    }\n  }\n\n","sourceOld":"  /**\n   * Report a search result for a certain quality query.\n   * @param qq quality query for which the results are reported.\n   * @param td search results for the query.\n   * @param docNameField stored field used for fetching the result doc name.  \n   * @param searcher index access for fetching doc name.\n   * @throws IOException in case of a problem.\n   */\n  public void report(QualityQuery qq, TopDocs td, String docNameField, Searcher searcher) throws IOException {\n    if (logger==null) {\n      return;\n    }\n    ScoreDoc sd[] = td.scoreDocs;\n    String sep = \" \\t \";\n    DocNameExtractor xt = new DocNameExtractor(docNameField);\n    for (int i=0; i<sd.length; i++) {\n      String docName = xt.docName(searcher,sd[i].doc);\n      logger.println(\n          qq.getQueryID()       + sep +\n          '0'                   + sep +\n          format(docName,20)    + sep +\n          format(\"\"+i,7)        + sep +\n          nf.format(sd[i].score)\n          );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/quality/utils/SubmissionReport#report(QualityQuery,TopDocs,String,Searcher).mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/quality/utils/SubmissionReport#report(QualityQuery,TopDocs,String,Searcher).mjava","sourceNew":"  /**\n   * Report a search result for a certain quality query.\n   * @param qq quality query for which the results are reported.\n   * @param td search results for the query.\n   * @param docNameField stored field used for fetching the result doc name.  \n   * @param searcher index access for fetching doc name.\n   * @throws IOException in case of a problem.\n   */\n  public void report(QualityQuery qq, TopDocs td, String docNameField, Searcher searcher) throws IOException {\n    if (logger==null) {\n      return;\n    }\n    ScoreDoc sd[] = td.scoreDocs;\n    String sep = \" \\t \";\n    DocNameExtractor xt = new DocNameExtractor(docNameField);\n    for (int i=0; i<sd.length; i++) {\n      String docName = xt.docName(searcher,sd[i].doc);\n      logger.println(\n          qq.getQueryID()       + sep +\n          \"Q0\"                   + sep +\n          format(docName,20)    + sep +\n          format(\"\"+i,7)        + sep +\n          nf.format(sd[i].score) + sep +\n          name\n          );\n    }\n  }\n\n","sourceOld":"  /**\n   * Report a search result for a certain quality query.\n   * @param qq quality query for which the results are reported.\n   * @param td search results for the query.\n   * @param docNameField stored field used for fetching the result doc name.  \n   * @param searcher index access for fetching doc name.\n   * @throws IOException in case of a problem.\n   */\n  public void report(QualityQuery qq, TopDocs td, String docNameField, Searcher searcher) throws IOException {\n    if (logger==null) {\n      return;\n    }\n    ScoreDoc sd[] = td.scoreDocs;\n    String sep = \" \\t \";\n    DocNameExtractor xt = new DocNameExtractor(docNameField);\n    for (int i=0; i<sd.length; i++) {\n      String docName = xt.docName(searcher,sd[i].doc);\n      logger.println(\n          qq.getQueryID()       + sep +\n          \"Q0\"                   + sep +\n          format(docName,20)    + sep +\n          format(\"\"+i,7)        + sep +\n          nf.format(sd[i].score) + sep +\n          name\n          );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"df2d68685a69bd82bf79243e28623c0775eb7bd8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"05d64184e4c44205b1dfa1cdf3869230c4025dc9":["df2d68685a69bd82bf79243e28623c0775eb7bd8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["05d64184e4c44205b1dfa1cdf3869230c4025dc9"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["df2d68685a69bd82bf79243e28623c0775eb7bd8"],"df2d68685a69bd82bf79243e28623c0775eb7bd8":["05d64184e4c44205b1dfa1cdf3869230c4025dc9"],"05d64184e4c44205b1dfa1cdf3869230c4025dc9":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}