{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getDocsWithField(FieldInfo).mjava","commits":[{"id":"9faa42f41b6adb98daf009cf99a4ee239189e469","date":1376648738,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getDocsWithField(FieldInfo).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Bits getDocsWithField(FieldInfo field) throws IOException {\n    if (field.getDocValuesType() == FieldInfo.DocValuesType.SORTED_SET) {\n      return new SortedSetDocsWithField(getSortedSet(field), maxDoc);\n    } else if (field.getDocValuesType() == FieldInfo.DocValuesType.SORTED) {\n      return new SortedDocsWithField(getSorted(field), maxDoc);\n    } else if (field.getDocValuesType() == FieldInfo.DocValuesType.BINARY) {\n      return getBinaryDocsWithField(field);\n    } else if (field.getDocValuesType() == FieldInfo.DocValuesType.NUMERIC) {\n      return getNumericDocsWithField(field);\n    } else {\n      return new Bits.MatchAllBits(maxDoc);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d12774649e77a6efccc3502c735c2893b52af6d6","date":1376964312,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getDocsWithField(FieldInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getDocsWithField(FieldInfo).mjava","sourceNew":"  @Override\n  public Bits getDocsWithField(FieldInfo field) throws IOException {\n    switch (field.getDocValuesType()) {\n      case SORTED_SET:\n        return new SortedSetDocsWithField(getSortedSet(field), maxDoc);\n      case SORTED:\n        return new SortedDocsWithField(getSorted(field), maxDoc);\n      case BINARY:\n        return getBinaryDocsWithField(field);\n      case NUMERIC:\n        return getNumericDocsWithField(field);\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","sourceOld":"  @Override\n  public Bits getDocsWithField(FieldInfo field) throws IOException {\n    if (field.getDocValuesType() == FieldInfo.DocValuesType.SORTED_SET) {\n      return new SortedSetDocsWithField(getSortedSet(field), maxDoc);\n    } else if (field.getDocValuesType() == FieldInfo.DocValuesType.SORTED) {\n      return new SortedDocsWithField(getSorted(field), maxDoc);\n    } else if (field.getDocValuesType() == FieldInfo.DocValuesType.BINARY) {\n      return getBinaryDocsWithField(field);\n    } else if (field.getDocValuesType() == FieldInfo.DocValuesType.NUMERIC) {\n      return getNumericDocsWithField(field);\n    } else {\n      return new Bits.MatchAllBits(maxDoc);\n    }\n  }\n\n","bugFix":null,"bugIntro":["8429ddf2214f2bf8abcbb5484fefef6aaf5c417e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff","date":1377034255,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getDocsWithField(FieldInfo).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Bits getDocsWithField(FieldInfo field) throws IOException {\n    switch (field.getDocValuesType()) {\n      case SORTED_SET:\n        return new SortedSetDocsWithField(getSortedSet(field), maxDoc);\n      case SORTED:\n        return new SortedDocsWithField(getSorted(field), maxDoc);\n      case BINARY:\n        return getBinaryDocsWithField(field);\n      case NUMERIC:\n        return getNumericDocsWithField(field);\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getDocsWithField(FieldInfo).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Bits getDocsWithField(FieldInfo field) throws IOException {\n    switch (field.getDocValuesType()) {\n      case SORTED_SET:\n        return new SortedSetDocsWithField(getSortedSet(field), maxDoc);\n      case SORTED:\n        return new SortedDocsWithField(getSorted(field), maxDoc);\n      case BINARY:\n        return getBinaryDocsWithField(field);\n      case NUMERIC:\n        return getNumericDocsWithField(field);\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8429ddf2214f2bf8abcbb5484fefef6aaf5c417e","date":1397206443,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getDocsWithField(FieldInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getDocsWithField(FieldInfo).mjava","sourceNew":"  @Override\n  public Bits getDocsWithField(FieldInfo field) throws IOException {\n    switch (field.getDocValuesType()) {\n      case SORTED_SET:\n        return DocValues.docsWithValue(getSortedSet(field), maxDoc);\n      case SORTED:\n        return DocValues.docsWithValue(getSorted(field), maxDoc);\n      case BINARY:\n        return getBinaryDocsWithField(field);\n      case NUMERIC:\n        return getNumericDocsWithField(field);\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","sourceOld":"  @Override\n  public Bits getDocsWithField(FieldInfo field) throws IOException {\n    switch (field.getDocValuesType()) {\n      case SORTED_SET:\n        return new SortedSetDocsWithField(getSortedSet(field), maxDoc);\n      case SORTED:\n        return new SortedDocsWithField(getSorted(field), maxDoc);\n      case BINARY:\n        return getBinaryDocsWithField(field);\n      case NUMERIC:\n        return getNumericDocsWithField(field);\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","bugFix":["d12774649e77a6efccc3502c735c2893b52af6d6"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d14ffaac9c4a4a2c750bf0cd956506802561e062","date":1402602036,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getDocsWithField(FieldInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getDocsWithField(FieldInfo).mjava","sourceNew":"  @Override\n  public Bits getDocsWithField(FieldInfo field) throws IOException {\n    switch (field.getDocValuesType()) {\n      case SORTED_SET:\n        return DocValues.docsWithValue(getSortedSet(field), maxDoc);\n      case SORTED_NUMERIC:\n        return DocValues.docsWithValue(getSortedNumeric(field), maxDoc);\n      case SORTED:\n        return DocValues.docsWithValue(getSorted(field), maxDoc);\n      case BINARY:\n        return getBinaryDocsWithField(field);\n      case NUMERIC:\n        return getNumericDocsWithField(field);\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","sourceOld":"  @Override\n  public Bits getDocsWithField(FieldInfo field) throws IOException {\n    switch (field.getDocValuesType()) {\n      case SORTED_SET:\n        return DocValues.docsWithValue(getSortedSet(field), maxDoc);\n      case SORTED:\n        return DocValues.docsWithValue(getSorted(field), maxDoc);\n      case BINARY:\n        return getBinaryDocsWithField(field);\n      case NUMERIC:\n        return getNumericDocsWithField(field);\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c6f080a2ab37c464dd98db173f6cbf10dc74f211","date":1402946779,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getDocsWithField(FieldInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getDocsWithField(FieldInfo).mjava","sourceNew":"  @Override\n  public Bits getDocsWithField(FieldInfo field) throws IOException {\n    switch (field.getDocValuesType()) {\n      case SORTED_SET:\n        return DocValues.docsWithValue(getSortedSet(field), maxDoc);\n      case SORTED_NUMERIC:\n        return DocValues.docsWithValue(getSortedNumeric(field), maxDoc);\n      case SORTED:\n        return DocValues.docsWithValue(getSorted(field), maxDoc);\n      case BINARY:\n        return getBinaryDocsWithField(field);\n      case NUMERIC:\n        return getNumericDocsWithField(field);\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","sourceOld":"  @Override\n  public Bits getDocsWithField(FieldInfo field) throws IOException {\n    switch (field.getDocValuesType()) {\n      case SORTED_SET:\n        return DocValues.docsWithValue(getSortedSet(field), maxDoc);\n      case SORTED:\n        return DocValues.docsWithValue(getSorted(field), maxDoc);\n      case BINARY:\n        return getBinaryDocsWithField(field);\n      case NUMERIC:\n        return getNumericDocsWithField(field);\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":4,"author":"Mike McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getDocsWithField(FieldInfo).mjava","sourceNew":null,"sourceOld":"  @Override\n  public Bits getDocsWithField(FieldInfo field) throws IOException {\n    switch (field.getDocValuesType()) {\n      case SORTED_SET:\n        return DocValues.docsWithValue(getSortedSet(field), maxDoc);\n      case SORTED_NUMERIC:\n        return DocValues.docsWithValue(getSortedNumeric(field), maxDoc);\n      case SORTED:\n        return DocValues.docsWithValue(getSorted(field), maxDoc);\n      case BINARY:\n        return getBinaryDocsWithField(field);\n      case NUMERIC:\n        return getNumericDocsWithField(field);\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getDocsWithField(FieldInfo).mjava","sourceNew":null,"sourceOld":"  @Override\n  public Bits getDocsWithField(FieldInfo field) throws IOException {\n    switch (field.getDocValuesType()) {\n      case SORTED_SET:\n        return DocValues.docsWithValue(getSortedSet(field), maxDoc);\n      case SORTED_NUMERIC:\n        return DocValues.docsWithValue(getSortedNumeric(field), maxDoc);\n      case SORTED:\n        return DocValues.docsWithValue(getSorted(field), maxDoc);\n      case BINARY:\n        return getBinaryDocsWithField(field);\n      case NUMERIC:\n        return getNumericDocsWithField(field);\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getDocsWithField(FieldInfo).mjava","sourceNew":null,"sourceOld":"  @Override\n  public Bits getDocsWithField(FieldInfo field) throws IOException {\n    switch (field.getDocValuesType()) {\n      case SORTED_SET:\n        return DocValues.docsWithValue(getSortedSet(field), maxDoc);\n      case SORTED_NUMERIC:\n        return DocValues.docsWithValue(getSortedNumeric(field), maxDoc);\n      case SORTED:\n        return DocValues.docsWithValue(getSorted(field), maxDoc);\n      case BINARY:\n        return getBinaryDocsWithField(field);\n      case NUMERIC:\n        return getNumericDocsWithField(field);\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9faa42f41b6adb98daf009cf99a4ee239189e469":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["d14ffaac9c4a4a2c750bf0cd956506802561e062","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["d14ffaac9c4a4a2c750bf0cd956506802561e062"],"d12774649e77a6efccc3502c735c2893b52af6d6":["9faa42f41b6adb98daf009cf99a4ee239189e469"],"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d12774649e77a6efccc3502c735c2893b52af6d6"],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":["8429ddf2214f2bf8abcbb5484fefef6aaf5c417e","d14ffaac9c4a4a2c750bf0cd956506802561e062"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["d14ffaac9c4a4a2c750bf0cd956506802561e062","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"d14ffaac9c4a4a2c750bf0cd956506802561e062":["8429ddf2214f2bf8abcbb5484fefef6aaf5c417e"],"8429ddf2214f2bf8abcbb5484fefef6aaf5c417e":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"]},"commit2Childs":{"9faa42f41b6adb98daf009cf99a4ee239189e469":["d12774649e77a6efccc3502c735c2893b52af6d6"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9faa42f41b6adb98daf009cf99a4ee239189e469","3dffec77fb8f7d0e9ca4869dddd6af94528b4576","e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"d12774649e77a6efccc3502c735c2893b52af6d6":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","8429ddf2214f2bf8abcbb5484fefef6aaf5c417e"],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d14ffaac9c4a4a2c750bf0cd956506802561e062":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d","c6f080a2ab37c464dd98db173f6cbf10dc74f211","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"8429ddf2214f2bf8abcbb5484fefef6aaf5c417e":["c6f080a2ab37c464dd98db173f6cbf10dc74f211","d14ffaac9c4a4a2c750bf0cd956506802561e062"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","c6f080a2ab37c464dd98db173f6cbf10dc74f211","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}