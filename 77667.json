{"path":"lucene/src/java/org/apache/lucene/util/automaton/RegExp#makeCharRange(int,int).mjava","commits":[{"id":"5acb0ee59cc50caf85402e92d148fdb2af61bc19","date":1272929037,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/RegExp#makeCharRange(int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/RegExp#makeCharRange(char,char).mjava","sourceNew":"  static RegExp makeCharRange(int from, int to) {\n    RegExp r = new RegExp();\n    r.kind = Kind.REGEXP_CHAR_RANGE;\n    r.from = from;\n    r.to = to;\n    return r;\n  }\n\n","sourceOld":"  static RegExp makeCharRange(char from, char to) {\n    RegExp r = new RegExp();\n    r.kind = Kind.REGEXP_CHAR_RANGE;\n    r.from = from;\n    r.to = to;\n    return r;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5e284be8a1c5d2e34d6dc2886a2c3506c4b443a6","date":1285970109,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/RegExp#makeCharRange(int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/RegExp#makeCharRange(int,int).mjava","sourceNew":"  static RegExp makeCharRange(int from, int to) {\n    if (from > to) \n      throw new IllegalArgumentException(\"invalid range: from (\" + from + \") cannot be > to (\" + to + \")\");\n    RegExp r = new RegExp();\n    r.kind = Kind.REGEXP_CHAR_RANGE;\n    r.from = from;\n    r.to = to;\n    return r;\n  }\n\n","sourceOld":"  static RegExp makeCharRange(int from, int to) {\n    RegExp r = new RegExp();\n    r.kind = Kind.REGEXP_CHAR_RANGE;\n    r.from = from;\n    r.to = to;\n    return r;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/RegExp#makeCharRange(int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/RegExp#makeCharRange(int,int).mjava","sourceNew":"  static RegExp makeCharRange(int from, int to) {\n    if (from > to) \n      throw new IllegalArgumentException(\"invalid range: from (\" + from + \") cannot be > to (\" + to + \")\");\n    RegExp r = new RegExp();\n    r.kind = Kind.REGEXP_CHAR_RANGE;\n    r.from = from;\n    r.to = to;\n    return r;\n  }\n\n","sourceOld":"  static RegExp makeCharRange(int from, int to) {\n    RegExp r = new RegExp();\n    r.kind = Kind.REGEXP_CHAR_RANGE;\n    r.from = from;\n    r.to = to;\n    return r;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/RegExp#makeCharRange(int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/RegExp#makeCharRange(int,int).mjava","sourceNew":"  static RegExp makeCharRange(int from, int to) {\n    if (from > to) \n      throw new IllegalArgumentException(\"invalid range: from (\" + from + \") cannot be > to (\" + to + \")\");\n    RegExp r = new RegExp();\n    r.kind = Kind.REGEXP_CHAR_RANGE;\n    r.from = from;\n    r.to = to;\n    return r;\n  }\n\n","sourceOld":"  static RegExp makeCharRange(int from, int to) {\n    if (from > to) \n      throw new IllegalArgumentException(\"invalid range: from (\" + from + \") cannot be > to (\" + to + \")\");\n    RegExp r = new RegExp();\n    r.kind = Kind.REGEXP_CHAR_RANGE;\n    r.from = from;\n    r.to = to;\n    return r;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5e284be8a1c5d2e34d6dc2886a2c3506c4b443a6":["5acb0ee59cc50caf85402e92d148fdb2af61bc19"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5e284be8a1c5d2e34d6dc2886a2c3506c4b443a6"],"5acb0ee59cc50caf85402e92d148fdb2af61bc19":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["5acb0ee59cc50caf85402e92d148fdb2af61bc19","5e284be8a1c5d2e34d6dc2886a2c3506c4b443a6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"5e284be8a1c5d2e34d6dc2886a2c3506c4b443a6":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5acb0ee59cc50caf85402e92d148fdb2af61bc19":["5e284be8a1c5d2e34d6dc2886a2c3506c4b443a6","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5acb0ee59cc50caf85402e92d148fdb2af61bc19"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}