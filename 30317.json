{"path":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Clause#test(Row).mjava","commits":[{"id":"653c1ca305e0065ee988a09e59c8316b8cde02fd","date":1492506780,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Clause#test(Row).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/recipe/Clause#test(Row).mjava","sourceNew":"  TestStatus test(Row row) {\n    AtomicReference<TestStatus> result = new AtomicReference<>(NOT_APPLICABLE);\n\n    for (Map.Entry<String, Map<String, List<ReplicaInfo>>> colls : row.replicaInfo.entrySet()) {\n      if (result.get() == FAIL) break;\n      if (!collection.isPass(colls.getKey())) continue;\n      int count = 0;\n      for (Map.Entry<String, List<ReplicaInfo>> shards : colls.getValue().entrySet()) {\n        if (!shard.isPass(shards.getKey()) || result.get() == FAIL) break;\n        count += shards.getValue().size();\n        if (shard.val.equals(EACH)) testReplicaCount(row, result, count);\n        if (EACH.equals(shard.val)) count = 0;\n        }\n      if (shard.val.equals(ANY)) testReplicaCount(row, result, count);\n      }\n    if (result.get() == FAIL) row.violations.add(this);\n    return result.get();\n\n  }\n\n","sourceOld":"  TestStatus test(Row row) {\n    AtomicReference<TestStatus> result = new AtomicReference<>(NOT_APPLICABLE);\n\n    for (Map.Entry<String, Map<String, List<ReplicaInfo>>> colls : row.replicaInfo.entrySet()) {\n      if (result.get() == FAIL) break;\n      if (!collection.isPass(colls.getKey())) continue;\n      int count = 0;\n      for (Map.Entry<String, List<ReplicaInfo>> shards : colls.getValue().entrySet()) {\n        if (!shard.isPass(shards.getKey()) || result.get() == FAIL) break;\n        count += shards.getValue().size();\n        if (shard.val.equals(EACH)) testReplicaCount(row, result, count);\n        if (EACH.equals(shard.val)) count = 0;\n        }\n      if (shard.val.equals(ANY)) testReplicaCount(row, result, count);\n      }\n    if (result.get() == FAIL) row.violations.add(this);\n    return result.get();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"86fff6c123a5a1d38adb665dd045347219798da9","date":1493623721,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Clause#test(Row).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Clause#test(Row).mjava","sourceNew":"  TestStatus test(Row row) {\n    AtomicReference<TestStatus> result = new AtomicReference<>(NOT_APPLICABLE);\n\n    for (Map.Entry<String, Map<String, List<ReplicaInfo>>> colls : row.replicaInfo.entrySet()) {\n      if (result.get() == FAIL) break;\n      if (!collection.isPass(colls.getKey())) continue;\n      int count = 0;\n      for (Map.Entry<String, List<ReplicaInfo>> shards : colls.getValue().entrySet()) {\n        if (!shard.isPass(shards.getKey()) || result.get() == FAIL) break;\n        count += shards.getValue().size();\n        if (shard.val.equals(EACH)) testReplicaCount(row, result, count);\n        if (EACH.equals(shard.val)) count = 0;\n      }\n      if (shard.val.equals(ANY)) testReplicaCount(row, result, count);\n    }\n    if (result.get() == FAIL) row.violations.add(this);\n    return result.get();\n\n  }\n\n","sourceOld":"  TestStatus test(Row row) {\n    AtomicReference<TestStatus> result = new AtomicReference<>(NOT_APPLICABLE);\n\n    for (Map.Entry<String, Map<String, List<ReplicaInfo>>> colls : row.replicaInfo.entrySet()) {\n      if (result.get() == FAIL) break;\n      if (!collection.isPass(colls.getKey())) continue;\n      int count = 0;\n      for (Map.Entry<String, List<ReplicaInfo>> shards : colls.getValue().entrySet()) {\n        if (!shard.isPass(shards.getKey()) || result.get() == FAIL) break;\n        count += shards.getValue().size();\n        if (shard.val.equals(EACH)) testReplicaCount(row, result, count);\n        if (EACH.equals(shard.val)) count = 0;\n        }\n      if (shard.val.equals(ANY)) testReplicaCount(row, result, count);\n      }\n    if (result.get() == FAIL) row.violations.add(this);\n    return result.get();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8439b737e0aa59b02fd1f14b436d75050e70076f","date":1493715391,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Clause#test(Row).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Clause#test(Row).mjava","sourceNew":"  TestStatus test(Row row) {\n    AtomicReference<TestStatus> result = new AtomicReference<>(NOT_APPLICABLE);\n    if (isPerCollectiontag()) {\n\n      for (Map.Entry<String, Map<String, List<ReplicaInfo>>> colls : row.replicaInfo.entrySet()) {\n        if (result.get() == FAIL) break;\n        if (!collection.isPass(colls.getKey())) continue;\n        int count = 0;\n        for (Map.Entry<String, List<ReplicaInfo>> shards : colls.getValue().entrySet()) {\n          if (!shard.isPass(shards.getKey()) || result.get() == FAIL) break;\n          count += shards.getValue().size();\n          if (shard.val.equals(EACH)) testReplicaCount(row, result, count);\n          if (EACH.equals(shard.val)) count = 0;\n        }\n        if (shard.val.equals(ANY)) testReplicaCount(row, result, count);\n      }\n    } else {\n      if (!tag.isPass(row)) result.set(TestStatus.FAIL);\n    }\n    if (result.get() == FAIL) row.violations.add(this);\n    return result.get();\n\n  }\n\n","sourceOld":"  TestStatus test(Row row) {\n    AtomicReference<TestStatus> result = new AtomicReference<>(NOT_APPLICABLE);\n\n    for (Map.Entry<String, Map<String, List<ReplicaInfo>>> colls : row.replicaInfo.entrySet()) {\n      if (result.get() == FAIL) break;\n      if (!collection.isPass(colls.getKey())) continue;\n      int count = 0;\n      for (Map.Entry<String, List<ReplicaInfo>> shards : colls.getValue().entrySet()) {\n        if (!shard.isPass(shards.getKey()) || result.get() == FAIL) break;\n        count += shards.getValue().size();\n        if (shard.val.equals(EACH)) testReplicaCount(row, result, count);\n        if (EACH.equals(shard.val)) count = 0;\n      }\n      if (shard.val.equals(ANY)) testReplicaCount(row, result, count);\n    }\n    if (result.get() == FAIL) row.violations.add(this);\n    return result.get();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"44c9a458cd4ceff8755128274a56cc87271cb3d9","date":1493722297,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Clause#test(Row).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Clause#test(Row).mjava","sourceNew":"  TestStatus test(Row row) {\n    AtomicReference<TestStatus> result = new AtomicReference<>(NOT_APPLICABLE);\n    if (isPerCollectiontag()) {\n\n      for (Map.Entry<String, Map<String, List<ReplicaInfo>>> colls : row.replicaInfo.entrySet()) {\n        if (result.get() == FAIL) break;\n        if (!collection.isPass(colls.getKey())) continue;\n        int count = 0;\n        for (Map.Entry<String, List<ReplicaInfo>> shards : colls.getValue().entrySet()) {\n          if (!shard.isPass(shards.getKey()) || result.get() == FAIL) break;\n          count += shards.getValue().size();\n          if (shard.val.equals(EACH)) testReplicaCount(row, result, count);\n          if (EACH.equals(shard.val)) count = 0;\n        }\n        if (shard.val.equals(ANY)) testReplicaCount(row, result, count);\n      }\n    } else {\n      if (!tag.isPass(row)) result.set(TestStatus.FAIL);\n    }\n    if (result.get() == FAIL)\n      row.violations.add(this);\n    return result.get();\n\n  }\n\n","sourceOld":"  TestStatus test(Row row) {\n    AtomicReference<TestStatus> result = new AtomicReference<>(NOT_APPLICABLE);\n    if (isPerCollectiontag()) {\n\n      for (Map.Entry<String, Map<String, List<ReplicaInfo>>> colls : row.replicaInfo.entrySet()) {\n        if (result.get() == FAIL) break;\n        if (!collection.isPass(colls.getKey())) continue;\n        int count = 0;\n        for (Map.Entry<String, List<ReplicaInfo>> shards : colls.getValue().entrySet()) {\n          if (!shard.isPass(shards.getKey()) || result.get() == FAIL) break;\n          count += shards.getValue().size();\n          if (shard.val.equals(EACH)) testReplicaCount(row, result, count);\n          if (EACH.equals(shard.val)) count = 0;\n        }\n        if (shard.val.equals(ANY)) testReplicaCount(row, result, count);\n      }\n    } else {\n      if (!tag.isPass(row)) result.set(TestStatus.FAIL);\n    }\n    if (result.get() == FAIL) row.violations.add(this);\n    return result.get();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1fca549db64ee4c87a83a94e7c224506fa20d396","date":1495433449,"type":4,"author":"Noble Paul","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Clause#test(Row).mjava","sourceNew":null,"sourceOld":"  TestStatus test(Row row) {\n    AtomicReference<TestStatus> result = new AtomicReference<>(NOT_APPLICABLE);\n    if (isPerCollectiontag()) {\n\n      for (Map.Entry<String, Map<String, List<ReplicaInfo>>> colls : row.replicaInfo.entrySet()) {\n        if (result.get() == FAIL) break;\n        if (!collection.isPass(colls.getKey())) continue;\n        int count = 0;\n        for (Map.Entry<String, List<ReplicaInfo>> shards : colls.getValue().entrySet()) {\n          if (!shard.isPass(shards.getKey()) || result.get() == FAIL) break;\n          count += shards.getValue().size();\n          if (shard.val.equals(EACH)) testReplicaCount(row, result, count);\n          if (EACH.equals(shard.val)) count = 0;\n        }\n        if (shard.val.equals(ANY)) testReplicaCount(row, result, count);\n      }\n    } else {\n      if (!tag.isPass(row)) result.set(TestStatus.FAIL);\n    }\n    if (result.get() == FAIL)\n      row.violations.add(this);\n    return result.get();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"44c9a458cd4ceff8755128274a56cc87271cb3d9":["8439b737e0aa59b02fd1f14b436d75050e70076f"],"8439b737e0aa59b02fd1f14b436d75050e70076f":["86fff6c123a5a1d38adb665dd045347219798da9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1fca549db64ee4c87a83a94e7c224506fa20d396":["44c9a458cd4ceff8755128274a56cc87271cb3d9"],"86fff6c123a5a1d38adb665dd045347219798da9":["653c1ca305e0065ee988a09e59c8316b8cde02fd"],"653c1ca305e0065ee988a09e59c8316b8cde02fd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"44c9a458cd4ceff8755128274a56cc87271cb3d9":["1fca549db64ee4c87a83a94e7c224506fa20d396"],"8439b737e0aa59b02fd1f14b436d75050e70076f":["44c9a458cd4ceff8755128274a56cc87271cb3d9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["653c1ca305e0065ee988a09e59c8316b8cde02fd","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1fca549db64ee4c87a83a94e7c224506fa20d396":[],"86fff6c123a5a1d38adb665dd045347219798da9":["8439b737e0aa59b02fd1f14b436d75050e70076f"],"653c1ca305e0065ee988a09e59c8316b8cde02fd":["86fff6c123a5a1d38adb665dd045347219798da9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1fca549db64ee4c87a83a94e7c224506fa20d396","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}