{"path":"lucene/core/src/java/org/apache/lucene/search/BlockMaxConjunctionScorer#BlockMaxConjunctionScorer(Weight,Collection[Scorer]).mjava","commits":[{"id":"523cc6563c99a55527ef7993efc5413c6648852d","date":1518704038,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BlockMaxConjunctionScorer#BlockMaxConjunctionScorer(Weight,Collection[Scorer]).mjava","pathOld":"/dev/null","sourceNew":"  /** Create a new {@link BlockMaxConjunctionScorer} from scoring clauses. */\n  BlockMaxConjunctionScorer(Weight weight, Collection<Scorer> scorersList) throws IOException {\n    super(weight);\n    this.scorers = scorersList.toArray(new Scorer[scorersList.size()]);\n    this.maxScorePropagator = new MaxScoreSumPropagator(scorersList);\n\n    // Put scorers with the higher max scores first\n    // We tie-break on cost\n    Comparator<Scorer> comparator = (s1, s2) -> {\n      int cmp;\n      try {\n        cmp = Float.compare(s2.getMaxScore(DocIdSetIterator.NO_MORE_DOCS), s1.getMaxScore(DocIdSetIterator.NO_MORE_DOCS));\n      } catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n      if (cmp == 0) {\n        cmp = Long.compare(s1.iterator().cost(), s2.iterator().cost());\n      }\n      return cmp;\n    };\n    Arrays.sort(this.scorers, comparator);\n    minScores = new double[this.scorers.length];\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6a692be6c8e120ef6dbfcd5dde3de42815813cd2","date":1525265372,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BlockMaxConjunctionScorer#BlockMaxConjunctionScorer(Weight,Collection[Scorer]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BlockMaxConjunctionScorer#BlockMaxConjunctionScorer(Weight,Collection[Scorer]).mjava","sourceNew":"  /** Create a new {@link BlockMaxConjunctionScorer} from scoring clauses. */\n  BlockMaxConjunctionScorer(Weight weight, Collection<Scorer> scorersList) throws IOException {\n    super(weight);\n    this.scorers = scorersList.toArray(new Scorer[scorersList.size()]);\n    for (Scorer scorer : scorers) {\n      scorer.advanceShallow(0);\n    }\n    this.maxScorePropagator = new MaxScoreSumPropagator(scorersList);\n\n    // Put scorers with the higher max scores first\n    // We tie-break on cost\n    Comparator<Scorer> comparator = (s1, s2) -> {\n      int cmp;\n      try {\n        cmp = Float.compare(s2.getMaxScore(DocIdSetIterator.NO_MORE_DOCS), s1.getMaxScore(DocIdSetIterator.NO_MORE_DOCS));\n      } catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n      if (cmp == 0) {\n        cmp = Long.compare(s1.iterator().cost(), s2.iterator().cost());\n      }\n      return cmp;\n    };\n    Arrays.sort(this.scorers, comparator);\n    minScores = new double[this.scorers.length];\n  }\n\n","sourceOld":"  /** Create a new {@link BlockMaxConjunctionScorer} from scoring clauses. */\n  BlockMaxConjunctionScorer(Weight weight, Collection<Scorer> scorersList) throws IOException {\n    super(weight);\n    this.scorers = scorersList.toArray(new Scorer[scorersList.size()]);\n    this.maxScorePropagator = new MaxScoreSumPropagator(scorersList);\n\n    // Put scorers with the higher max scores first\n    // We tie-break on cost\n    Comparator<Scorer> comparator = (s1, s2) -> {\n      int cmp;\n      try {\n        cmp = Float.compare(s2.getMaxScore(DocIdSetIterator.NO_MORE_DOCS), s1.getMaxScore(DocIdSetIterator.NO_MORE_DOCS));\n      } catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n      if (cmp == 0) {\n        cmp = Long.compare(s1.iterator().cost(), s2.iterator().cost());\n      }\n      return cmp;\n    };\n    Arrays.sort(this.scorers, comparator);\n    minScores = new double[this.scorers.length];\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"edc1c8fc0262c6b5526c8e0e23f9b72ddcff6aac","date":1558431344,"type":3,"author":"jimczi","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BlockMaxConjunctionScorer#BlockMaxConjunctionScorer(Weight,Collection[Scorer]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BlockMaxConjunctionScorer#BlockMaxConjunctionScorer(Weight,Collection[Scorer]).mjava","sourceNew":"  /** Create a new {@link BlockMaxConjunctionScorer} from scoring clauses. */\n  BlockMaxConjunctionScorer(Weight weight, Collection<Scorer> scorersList) throws IOException {\n    super(weight);\n    this.scorers = scorersList.toArray(new Scorer[scorersList.size()]);\n    // Sort scorer by cost\n    Arrays.sort(this.scorers, Comparator.comparingLong(s -> s.iterator().cost()));\n    this.maxScorePropagator = new MaxScoreSumPropagator(Arrays.asList(scorers));\n\n    this.approximations = new DocIdSetIterator[scorers.length];\n    List<TwoPhaseIterator> twoPhaseList = new ArrayList<>();\n    for (int i = 0; i < scorers.length; i++) {\n      Scorer scorer = scorers[i];\n      TwoPhaseIterator twoPhase = scorer.twoPhaseIterator();\n      if (twoPhase != null) {\n        twoPhaseList.add(twoPhase);\n        approximations[i] = twoPhase.approximation();\n      } else {\n        approximations[i] = scorer.iterator();\n      }\n      scorer.advanceShallow(0);\n    }\n    this.twoPhases = twoPhaseList.toArray(new TwoPhaseIterator[twoPhaseList.size()]);\n    Arrays.sort(this.twoPhases, Comparator.comparingDouble(TwoPhaseIterator::matchCost));\n  }\n\n","sourceOld":"  /** Create a new {@link BlockMaxConjunctionScorer} from scoring clauses. */\n  BlockMaxConjunctionScorer(Weight weight, Collection<Scorer> scorersList) throws IOException {\n    super(weight);\n    this.scorers = scorersList.toArray(new Scorer[scorersList.size()]);\n    for (Scorer scorer : scorers) {\n      scorer.advanceShallow(0);\n    }\n    this.maxScorePropagator = new MaxScoreSumPropagator(scorersList);\n\n    // Put scorers with the higher max scores first\n    // We tie-break on cost\n    Comparator<Scorer> comparator = (s1, s2) -> {\n      int cmp;\n      try {\n        cmp = Float.compare(s2.getMaxScore(DocIdSetIterator.NO_MORE_DOCS), s1.getMaxScore(DocIdSetIterator.NO_MORE_DOCS));\n      } catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n      if (cmp == 0) {\n        cmp = Long.compare(s1.iterator().cost(), s2.iterator().cost());\n      }\n      return cmp;\n    };\n    Arrays.sort(this.scorers, comparator);\n    minScores = new double[this.scorers.length];\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"edc1c8fc0262c6b5526c8e0e23f9b72ddcff6aac":["6a692be6c8e120ef6dbfcd5dde3de42815813cd2"],"6a692be6c8e120ef6dbfcd5dde3de42815813cd2":["523cc6563c99a55527ef7993efc5413c6648852d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"523cc6563c99a55527ef7993efc5413c6648852d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["edc1c8fc0262c6b5526c8e0e23f9b72ddcff6aac"]},"commit2Childs":{"edc1c8fc0262c6b5526c8e0e23f9b72ddcff6aac":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6a692be6c8e120ef6dbfcd5dde3de42815813cd2":["edc1c8fc0262c6b5526c8e0e23f9b72ddcff6aac"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["523cc6563c99a55527ef7993efc5413c6648852d"],"523cc6563c99a55527ef7993efc5413c6648852d":["6a692be6c8e120ef6dbfcd5dde3de42815813cd2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}