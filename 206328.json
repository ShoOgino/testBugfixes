{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/ArrayEvaluator#extractSortOrder(StreamExpression,StreamFactory).mjava","commits":[{"id":"e2ca4206e5497c29b07a997ea7fc47d3bac0a352","date":1497801058,"type":0,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/ArrayEvaluator#extractSortOrder(StreamExpression,StreamFactory).mjava","pathOld":"/dev/null","sourceNew":"  private String extractSortOrder(StreamExpression expression, StreamFactory factory) throws IOException{\n    StreamExpressionNamedParameter sortParam = factory.getNamedOperand(expression, \"sort\");\n    if(null == sortParam){\n      return null; // this is ok\n    }\n    \n    if(sortParam.getParameter() instanceof StreamExpressionValue){\n      String sortOrder = ((StreamExpressionValue)sortParam.getParameter()).getValue().trim().toLowerCase(Locale.ROOT);\n      if(\"asc\".equals(sortOrder) || \"desc\".equals(sortOrder)){\n        return sortOrder;\n      }\n    }\n    \n    throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - invalid 'sort' parameter - expecting either 'asc' or 'desc'\", expression));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/ArrayEvaluator#extractSortOrder(StreamExpression,StreamFactory).mjava","pathOld":"/dev/null","sourceNew":"  private String extractSortOrder(StreamExpression expression, StreamFactory factory) throws IOException{\n    StreamExpressionNamedParameter sortParam = factory.getNamedOperand(expression, \"sort\");\n    if(null == sortParam){\n      return null; // this is ok\n    }\n    \n    if(sortParam.getParameter() instanceof StreamExpressionValue){\n      String sortOrder = ((StreamExpressionValue)sortParam.getParameter()).getValue().trim().toLowerCase(Locale.ROOT);\n      if(\"asc\".equals(sortOrder) || \"desc\".equals(sortOrder)){\n        return sortOrder;\n      }\n    }\n    \n    throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - invalid 'sort' parameter - expecting either 'asc' or 'desc'\", expression));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/ArrayEvaluator#extractSortOrder(StreamExpression,StreamFactory).mjava","pathOld":"/dev/null","sourceNew":"  private String extractSortOrder(StreamExpression expression, StreamFactory factory) throws IOException{\n    StreamExpressionNamedParameter sortParam = factory.getNamedOperand(expression, \"sort\");\n    if(null == sortParam){\n      return null; // this is ok\n    }\n    \n    if(sortParam.getParameter() instanceof StreamExpressionValue){\n      String sortOrder = ((StreamExpressionValue)sortParam.getParameter()).getValue().trim().toLowerCase(Locale.ROOT);\n      if(\"asc\".equals(sortOrder) || \"desc\".equals(sortOrder)){\n        return sortOrder;\n      }\n    }\n    \n    throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - invalid 'sort' parameter - expecting either 'asc' or 'desc'\", expression));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba1e7de64990e3928b90142a52fb92eeff556475","date":1503713257,"type":4,"author":"Dennis Gove","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/ArrayEvaluator#extractSortOrder(StreamExpression,StreamFactory).mjava","sourceNew":null,"sourceOld":"  private String extractSortOrder(StreamExpression expression, StreamFactory factory) throws IOException{\n    StreamExpressionNamedParameter sortParam = factory.getNamedOperand(expression, \"sort\");\n    if(null == sortParam){\n      return null; // this is ok\n    }\n    \n    if(sortParam.getParameter() instanceof StreamExpressionValue){\n      String sortOrder = ((StreamExpressionValue)sortParam.getParameter()).getValue().trim().toLowerCase(Locale.ROOT);\n      if(\"asc\".equals(sortOrder) || \"desc\".equals(sortOrder)){\n        return sortOrder;\n      }\n    }\n    \n    throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - invalid 'sort' parameter - expecting either 'asc' or 'desc'\", expression));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"45c28dbb559366e1f4ef8077346552bfb3f7ecf6","date":1503738439,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/ArrayEvaluator#extractSortOrder(StreamExpression,StreamFactory).mjava","sourceNew":null,"sourceOld":"  private String extractSortOrder(StreamExpression expression, StreamFactory factory) throws IOException{\n    StreamExpressionNamedParameter sortParam = factory.getNamedOperand(expression, \"sort\");\n    if(null == sortParam){\n      return null; // this is ok\n    }\n    \n    if(sortParam.getParameter() instanceof StreamExpressionValue){\n      String sortOrder = ((StreamExpressionValue)sortParam.getParameter()).getValue().trim().toLowerCase(Locale.ROOT);\n      if(\"asc\".equals(sortOrder) || \"desc\".equals(sortOrder)){\n        return sortOrder;\n      }\n    }\n    \n    throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - invalid 'sort' parameter - expecting either 'asc' or 'desc'\", expression));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a7809d1d753b67f48b1a706e17034bf8b624ea3","date":1504366927,"type":4,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/ArrayEvaluator#extractSortOrder(StreamExpression,StreamFactory).mjava","sourceNew":null,"sourceOld":"  private String extractSortOrder(StreamExpression expression, StreamFactory factory) throws IOException{\n    StreamExpressionNamedParameter sortParam = factory.getNamedOperand(expression, \"sort\");\n    if(null == sortParam){\n      return null; // this is ok\n    }\n    \n    if(sortParam.getParameter() instanceof StreamExpressionValue){\n      String sortOrder = ((StreamExpressionValue)sortParam.getParameter()).getValue().trim().toLowerCase(Locale.ROOT);\n      if(\"asc\".equals(sortOrder) || \"desc\".equals(sortOrder)){\n        return sortOrder;\n      }\n    }\n    \n    throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - invalid 'sort' parameter - expecting either 'asc' or 'desc'\", expression));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a7809d1d753b67f48b1a706e17034bf8b624ea3":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","45c28dbb559366e1f4ef8077346552bfb3f7ecf6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"45c28dbb559366e1f4ef8077346552bfb3f7ecf6":["28288370235ed02234a64753cdbf0c6ec096304a","ba1e7de64990e3928b90142a52fb92eeff556475"],"ba1e7de64990e3928b90142a52fb92eeff556475":["28288370235ed02234a64753cdbf0c6ec096304a"],"28288370235ed02234a64753cdbf0c6ec096304a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e2ca4206e5497c29b07a997ea7fc47d3bac0a352"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e2ca4206e5497c29b07a997ea7fc47d3bac0a352"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["45c28dbb559366e1f4ef8077346552bfb3f7ecf6"],"e2ca4206e5497c29b07a997ea7fc47d3bac0a352":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"3a7809d1d753b67f48b1a706e17034bf8b624ea3":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","e2ca4206e5497c29b07a997ea7fc47d3bac0a352"],"45c28dbb559366e1f4ef8077346552bfb3f7ecf6":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ba1e7de64990e3928b90142a52fb92eeff556475":["45c28dbb559366e1f4ef8077346552bfb3f7ecf6"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["3a7809d1d753b67f48b1a706e17034bf8b624ea3"],"28288370235ed02234a64753cdbf0c6ec096304a":["45c28dbb559366e1f4ef8077346552bfb3f7ecf6","ba1e7de64990e3928b90142a52fb92eeff556475"],"e2ca4206e5497c29b07a997ea7fc47d3bac0a352":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}