{"path":"lucene/test-framework/src/java/org/apache/lucene/util/TestUtil#cloneDocument(Document).mjava","commits":[{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":1,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestUtil#cloneDocument(Document).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/_TestUtil#cloneDocument(Document).mjava","sourceNew":"  // TODO: is there a pre-existing way to do this!!!\n  public static Document cloneDocument(Document doc1) {\n    final Document doc2 = new Document();\n    for(IndexableField f : doc1.getFields()) {\n      final Field field1 = (Field) f;\n      final Field field2;\n      final DocValuesType dvType = field1.fieldType().docValueType();\n      final NumericType numType = field1.fieldType().numericType();\n      if (dvType != null) {\n        switch(dvType) {\n          case NUMERIC:\n            field2 = new NumericDocValuesField(field1.name(), field1.numericValue().longValue());\n            break;\n          case BINARY:\n            field2 = new BinaryDocValuesField(field1.name(), field1.binaryValue());\n          break;\n          case SORTED:\n            field2 = new SortedDocValuesField(field1.name(), field1.binaryValue());\n            break;\n          default:\n            throw new IllegalStateException(\"unknown Type: \" + dvType);\n        }\n      } else if (numType != null) {\n        switch (numType) {\n          case INT:\n            field2 = new IntField(field1.name(), field1.numericValue().intValue(), field1.fieldType());\n            break;\n          case FLOAT:\n            field2 = new FloatField(field1.name(), field1.numericValue().intValue(), field1.fieldType());\n            break;\n          case LONG:\n            field2 = new LongField(field1.name(), field1.numericValue().intValue(), field1.fieldType());\n            break;\n          case DOUBLE:\n            field2 = new DoubleField(field1.name(), field1.numericValue().intValue(), field1.fieldType());\n            break;\n          default:\n            throw new IllegalStateException(\"unknown Type: \" + numType);\n        }\n      } else {\n        field2 = new Field(field1.name(), field1.stringValue(), field1.fieldType());\n      }\n      doc2.add(field2);\n    }\n\n    return doc2;\n  }\n\n","sourceOld":"  // TODO: is there a pre-existing way to do this!!!\n  public static Document cloneDocument(Document doc1) {\n    final Document doc2 = new Document();\n    for(IndexableField f : doc1.getFields()) {\n      final Field field1 = (Field) f;\n      final Field field2;\n      final DocValuesType dvType = field1.fieldType().docValueType();\n      final NumericType numType = field1.fieldType().numericType();\n      if (dvType != null) {\n        switch(dvType) {\n          case NUMERIC:\n            field2 = new NumericDocValuesField(field1.name(), field1.numericValue().longValue());\n            break;\n          case BINARY:\n            field2 = new BinaryDocValuesField(field1.name(), field1.binaryValue());\n          break;\n          case SORTED:\n            field2 = new SortedDocValuesField(field1.name(), field1.binaryValue());\n            break;\n          default:\n            throw new IllegalStateException(\"unknown Type: \" + dvType);\n        }\n      } else if (numType != null) {\n        switch (numType) {\n          case INT:\n            field2 = new IntField(field1.name(), field1.numericValue().intValue(), field1.fieldType());\n            break;\n          case FLOAT:\n            field2 = new FloatField(field1.name(), field1.numericValue().intValue(), field1.fieldType());\n            break;\n          case LONG:\n            field2 = new LongField(field1.name(), field1.numericValue().intValue(), field1.fieldType());\n            break;\n          case DOUBLE:\n            field2 = new DoubleField(field1.name(), field1.numericValue().intValue(), field1.fieldType());\n            break;\n          default:\n            throw new IllegalStateException(\"unknown Type: \" + numType);\n        }\n      } else {\n        field2 = new Field(field1.name(), field1.stringValue(), field1.fieldType());\n      }\n      doc2.add(field2);\n    }\n\n    return doc2;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2bb2842e561df4e8e9ad89010605fc86ac265465","date":1414768208,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestUtil#cloneDocument(Document).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestUtil#cloneDocument(Document).mjava","sourceNew":"  // TODO: is there a pre-existing way to do this!!!\n  public static Document cloneDocument(Document doc1) {\n    final Document doc2 = new Document();\n    for(IndexableField f : doc1.getFields()) {\n      final Field field1 = (Field) f;\n      final Field field2;\n      final DocValuesType dvType = field1.fieldType().docValueType();\n      final NumericType numType = field1.fieldType().numericType();\n      if (dvType != DocValuesType.NO) {\n        switch(dvType) {\n          case NUMERIC:\n            field2 = new NumericDocValuesField(field1.name(), field1.numericValue().longValue());\n            break;\n          case BINARY:\n            field2 = new BinaryDocValuesField(field1.name(), field1.binaryValue());\n            break;\n          case SORTED:\n            field2 = new SortedDocValuesField(field1.name(), field1.binaryValue());\n            break;\n          default:\n            throw new IllegalStateException(\"unknown Type: \" + dvType);\n        }\n      } else if (numType != null) {\n        switch (numType) {\n          case INT:\n            field2 = new IntField(field1.name(), field1.numericValue().intValue(), field1.fieldType());\n            break;\n          case FLOAT:\n            field2 = new FloatField(field1.name(), field1.numericValue().intValue(), field1.fieldType());\n            break;\n          case LONG:\n            field2 = new LongField(field1.name(), field1.numericValue().intValue(), field1.fieldType());\n            break;\n          case DOUBLE:\n            field2 = new DoubleField(field1.name(), field1.numericValue().intValue(), field1.fieldType());\n            break;\n          default:\n            throw new IllegalStateException(\"unknown Type: \" + numType);\n        }\n      } else {\n        field2 = new Field(field1.name(), field1.stringValue(), field1.fieldType());\n      }\n      doc2.add(field2);\n    }\n\n    return doc2;\n  }\n\n","sourceOld":"  // TODO: is there a pre-existing way to do this!!!\n  public static Document cloneDocument(Document doc1) {\n    final Document doc2 = new Document();\n    for(IndexableField f : doc1.getFields()) {\n      final Field field1 = (Field) f;\n      final Field field2;\n      final DocValuesType dvType = field1.fieldType().docValueType();\n      final NumericType numType = field1.fieldType().numericType();\n      if (dvType != null) {\n        switch(dvType) {\n          case NUMERIC:\n            field2 = new NumericDocValuesField(field1.name(), field1.numericValue().longValue());\n            break;\n          case BINARY:\n            field2 = new BinaryDocValuesField(field1.name(), field1.binaryValue());\n          break;\n          case SORTED:\n            field2 = new SortedDocValuesField(field1.name(), field1.binaryValue());\n            break;\n          default:\n            throw new IllegalStateException(\"unknown Type: \" + dvType);\n        }\n      } else if (numType != null) {\n        switch (numType) {\n          case INT:\n            field2 = new IntField(field1.name(), field1.numericValue().intValue(), field1.fieldType());\n            break;\n          case FLOAT:\n            field2 = new FloatField(field1.name(), field1.numericValue().intValue(), field1.fieldType());\n            break;\n          case LONG:\n            field2 = new LongField(field1.name(), field1.numericValue().intValue(), field1.fieldType());\n            break;\n          case DOUBLE:\n            field2 = new DoubleField(field1.name(), field1.numericValue().intValue(), field1.fieldType());\n            break;\n          default:\n            throw new IllegalStateException(\"unknown Type: \" + numType);\n        }\n      } else {\n        field2 = new Field(field1.name(), field1.stringValue(), field1.fieldType());\n      }\n      doc2.add(field2);\n    }\n\n    return doc2;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f95ce1375367b92d411a06175eab3915fe93c6bc","date":1414788502,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestUtil#cloneDocument(Document).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestUtil#cloneDocument(Document).mjava","sourceNew":"  // TODO: is there a pre-existing way to do this!!!\n  public static Document cloneDocument(Document doc1) {\n    final Document doc2 = new Document();\n    for(IndexableField f : doc1.getFields()) {\n      final Field field1 = (Field) f;\n      final Field field2;\n      final DocValuesType dvType = field1.fieldType().docValueType();\n      final NumericType numType = field1.fieldType().numericType();\n      if (dvType != DocValuesType.NONE) {\n        switch(dvType) {\n          case NUMERIC:\n            field2 = new NumericDocValuesField(field1.name(), field1.numericValue().longValue());\n            break;\n          case BINARY:\n            field2 = new BinaryDocValuesField(field1.name(), field1.binaryValue());\n            break;\n          case SORTED:\n            field2 = new SortedDocValuesField(field1.name(), field1.binaryValue());\n            break;\n          default:\n            throw new IllegalStateException(\"unknown Type: \" + dvType);\n        }\n      } else if (numType != null) {\n        switch (numType) {\n          case INT:\n            field2 = new IntField(field1.name(), field1.numericValue().intValue(), field1.fieldType());\n            break;\n          case FLOAT:\n            field2 = new FloatField(field1.name(), field1.numericValue().intValue(), field1.fieldType());\n            break;\n          case LONG:\n            field2 = new LongField(field1.name(), field1.numericValue().intValue(), field1.fieldType());\n            break;\n          case DOUBLE:\n            field2 = new DoubleField(field1.name(), field1.numericValue().intValue(), field1.fieldType());\n            break;\n          default:\n            throw new IllegalStateException(\"unknown Type: \" + numType);\n        }\n      } else {\n        field2 = new Field(field1.name(), field1.stringValue(), field1.fieldType());\n      }\n      doc2.add(field2);\n    }\n\n    return doc2;\n  }\n\n","sourceOld":"  // TODO: is there a pre-existing way to do this!!!\n  public static Document cloneDocument(Document doc1) {\n    final Document doc2 = new Document();\n    for(IndexableField f : doc1.getFields()) {\n      final Field field1 = (Field) f;\n      final Field field2;\n      final DocValuesType dvType = field1.fieldType().docValueType();\n      final NumericType numType = field1.fieldType().numericType();\n      if (dvType != DocValuesType.NO) {\n        switch(dvType) {\n          case NUMERIC:\n            field2 = new NumericDocValuesField(field1.name(), field1.numericValue().longValue());\n            break;\n          case BINARY:\n            field2 = new BinaryDocValuesField(field1.name(), field1.binaryValue());\n            break;\n          case SORTED:\n            field2 = new SortedDocValuesField(field1.name(), field1.binaryValue());\n            break;\n          default:\n            throw new IllegalStateException(\"unknown Type: \" + dvType);\n        }\n      } else if (numType != null) {\n        switch (numType) {\n          case INT:\n            field2 = new IntField(field1.name(), field1.numericValue().intValue(), field1.fieldType());\n            break;\n          case FLOAT:\n            field2 = new FloatField(field1.name(), field1.numericValue().intValue(), field1.fieldType());\n            break;\n          case LONG:\n            field2 = new LongField(field1.name(), field1.numericValue().intValue(), field1.fieldType());\n            break;\n          case DOUBLE:\n            field2 = new DoubleField(field1.name(), field1.numericValue().intValue(), field1.fieldType());\n            break;\n          default:\n            throw new IllegalStateException(\"unknown Type: \" + numType);\n        }\n      } else {\n        field2 = new Field(field1.name(), field1.stringValue(), field1.fieldType());\n      }\n      doc2.add(field2);\n    }\n\n    return doc2;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eac6ccb51c439bec7f67cb0e299d3cb77b62b87e","date":1415435053,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestUtil#cloneDocument(Document).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestUtil#cloneDocument(Document).mjava","sourceNew":"  // TODO: is there a pre-existing way to do this!!!\n  public static Document cloneDocument(Document doc1) {\n    final Document doc2 = new Document();\n    for(IndexableField f : doc1.getFields()) {\n      final Field field1 = (Field) f;\n      final Field field2;\n      final DocValuesType dvType = field1.fieldType().docValuesType();\n      final NumericType numType = field1.fieldType().numericType();\n      if (dvType != DocValuesType.NONE) {\n        switch(dvType) {\n          case NUMERIC:\n            field2 = new NumericDocValuesField(field1.name(), field1.numericValue().longValue());\n            break;\n          case BINARY:\n            field2 = new BinaryDocValuesField(field1.name(), field1.binaryValue());\n            break;\n          case SORTED:\n            field2 = new SortedDocValuesField(field1.name(), field1.binaryValue());\n            break;\n          default:\n            throw new IllegalStateException(\"unknown Type: \" + dvType);\n        }\n      } else if (numType != null) {\n        switch (numType) {\n          case INT:\n            field2 = new IntField(field1.name(), field1.numericValue().intValue(), field1.fieldType());\n            break;\n          case FLOAT:\n            field2 = new FloatField(field1.name(), field1.numericValue().intValue(), field1.fieldType());\n            break;\n          case LONG:\n            field2 = new LongField(field1.name(), field1.numericValue().intValue(), field1.fieldType());\n            break;\n          case DOUBLE:\n            field2 = new DoubleField(field1.name(), field1.numericValue().intValue(), field1.fieldType());\n            break;\n          default:\n            throw new IllegalStateException(\"unknown Type: \" + numType);\n        }\n      } else {\n        field2 = new Field(field1.name(), field1.stringValue(), field1.fieldType());\n      }\n      doc2.add(field2);\n    }\n\n    return doc2;\n  }\n\n","sourceOld":"  // TODO: is there a pre-existing way to do this!!!\n  public static Document cloneDocument(Document doc1) {\n    final Document doc2 = new Document();\n    for(IndexableField f : doc1.getFields()) {\n      final Field field1 = (Field) f;\n      final Field field2;\n      final DocValuesType dvType = field1.fieldType().docValueType();\n      final NumericType numType = field1.fieldType().numericType();\n      if (dvType != DocValuesType.NONE) {\n        switch(dvType) {\n          case NUMERIC:\n            field2 = new NumericDocValuesField(field1.name(), field1.numericValue().longValue());\n            break;\n          case BINARY:\n            field2 = new BinaryDocValuesField(field1.name(), field1.binaryValue());\n            break;\n          case SORTED:\n            field2 = new SortedDocValuesField(field1.name(), field1.binaryValue());\n            break;\n          default:\n            throw new IllegalStateException(\"unknown Type: \" + dvType);\n        }\n      } else if (numType != null) {\n        switch (numType) {\n          case INT:\n            field2 = new IntField(field1.name(), field1.numericValue().intValue(), field1.fieldType());\n            break;\n          case FLOAT:\n            field2 = new FloatField(field1.name(), field1.numericValue().intValue(), field1.fieldType());\n            break;\n          case LONG:\n            field2 = new LongField(field1.name(), field1.numericValue().intValue(), field1.fieldType());\n            break;\n          case DOUBLE:\n            field2 = new DoubleField(field1.name(), field1.numericValue().intValue(), field1.fieldType());\n            break;\n          default:\n            throw new IllegalStateException(\"unknown Type: \" + numType);\n        }\n      } else {\n        field2 = new Field(field1.name(), field1.stringValue(), field1.fieldType());\n      }\n      doc2.add(field2);\n    }\n\n    return doc2;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"770342641f7b505eaa8dccdc666158bff2419109","date":1449868421,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestUtil#cloneDocument(Document).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestUtil#cloneDocument(Document).mjava","sourceNew":"  // TODO: is there a pre-existing way to do this!!!\n  public static Document cloneDocument(Document doc1) {\n    final Document doc2 = new Document();\n    for(IndexableField f : doc1.getFields()) {\n      final Field field1 = (Field) f;\n      final Field field2;\n      final DocValuesType dvType = field1.fieldType().docValuesType();\n      final int dimCount = field1.fieldType().dimensionCount();\n      final LegacyNumericType numType = field1.fieldType().numericType();\n      if (dvType != DocValuesType.NONE) {\n        switch(dvType) {\n          case NUMERIC:\n            field2 = new NumericDocValuesField(field1.name(), field1.numericValue().longValue());\n            break;\n          case BINARY:\n            field2 = new BinaryDocValuesField(field1.name(), field1.binaryValue());\n            break;\n          case SORTED:\n            field2 = new SortedDocValuesField(field1.name(), field1.binaryValue());\n            break;\n          default:\n            throw new IllegalStateException(\"unknown Type: \" + dvType);\n        }\n      } else if (dimCount != 0) {\n        BytesRef br = field1.binaryValue();\n        byte[] bytes = new byte[br.length];\n        System.arraycopy(br.bytes, br.offset, bytes, 0, br.length);\n        field2 = new DimensionalBinaryField(field1.name(), bytes, field1.fieldType());\n      } else if (numType != null) {\n        switch (numType) {\n          case INT:\n            field2 = new LegacyIntField(field1.name(), field1.numericValue().intValue(), field1.fieldType());\n            break;\n          case FLOAT:\n            field2 = new LegacyFloatField(field1.name(), field1.numericValue().intValue(), field1.fieldType());\n            break;\n          case LONG:\n            field2 = new LegacyLongField(field1.name(), field1.numericValue().intValue(), field1.fieldType());\n            break;\n          case DOUBLE:\n            field2 = new LegacyDoubleField(field1.name(), field1.numericValue().intValue(), field1.fieldType());\n            break;\n          default:\n            throw new IllegalStateException(\"unknown Type: \" + numType);\n        }\n      } else {\n        field2 = new Field(field1.name(), field1.stringValue(), field1.fieldType());\n      }\n      doc2.add(field2);\n    }\n\n    return doc2;\n  }\n\n","sourceOld":"  // TODO: is there a pre-existing way to do this!!!\n  public static Document cloneDocument(Document doc1) {\n    final Document doc2 = new Document();\n    for(IndexableField f : doc1.getFields()) {\n      final Field field1 = (Field) f;\n      final Field field2;\n      final DocValuesType dvType = field1.fieldType().docValuesType();\n      final NumericType numType = field1.fieldType().numericType();\n      if (dvType != DocValuesType.NONE) {\n        switch(dvType) {\n          case NUMERIC:\n            field2 = new NumericDocValuesField(field1.name(), field1.numericValue().longValue());\n            break;\n          case BINARY:\n            field2 = new BinaryDocValuesField(field1.name(), field1.binaryValue());\n            break;\n          case SORTED:\n            field2 = new SortedDocValuesField(field1.name(), field1.binaryValue());\n            break;\n          default:\n            throw new IllegalStateException(\"unknown Type: \" + dvType);\n        }\n      } else if (numType != null) {\n        switch (numType) {\n          case INT:\n            field2 = new IntField(field1.name(), field1.numericValue().intValue(), field1.fieldType());\n            break;\n          case FLOAT:\n            field2 = new FloatField(field1.name(), field1.numericValue().intValue(), field1.fieldType());\n            break;\n          case LONG:\n            field2 = new LongField(field1.name(), field1.numericValue().intValue(), field1.fieldType());\n            break;\n          case DOUBLE:\n            field2 = new DoubleField(field1.name(), field1.numericValue().intValue(), field1.fieldType());\n            break;\n          default:\n            throw new IllegalStateException(\"unknown Type: \" + numType);\n        }\n      } else {\n        field2 = new Field(field1.name(), field1.stringValue(), field1.fieldType());\n      }\n      doc2.add(field2);\n    }\n\n    return doc2;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cab7a79353f33d1a94cd307bf33aa5148601ebe6","date":1453391888,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestUtil#cloneDocument(Document).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestUtil#cloneDocument(Document).mjava","sourceNew":"  // TODO: is there a pre-existing way to do this!!!\n  public static Document cloneDocument(Document doc1) {\n    final Document doc2 = new Document();\n    for(IndexableField f : doc1.getFields()) {\n      final Field field1 = (Field) f;\n      final Field field2;\n      final DocValuesType dvType = field1.fieldType().docValuesType();\n      final int dimCount = field1.fieldType().pointDimensionCount();\n      final LegacyNumericType numType = field1.fieldType().numericType();\n      if (dvType != DocValuesType.NONE) {\n        switch(dvType) {\n          case NUMERIC:\n            field2 = new NumericDocValuesField(field1.name(), field1.numericValue().longValue());\n            break;\n          case BINARY:\n            field2 = new BinaryDocValuesField(field1.name(), field1.binaryValue());\n            break;\n          case SORTED:\n            field2 = new SortedDocValuesField(field1.name(), field1.binaryValue());\n            break;\n          default:\n            throw new IllegalStateException(\"unknown Type: \" + dvType);\n        }\n      } else if (dimCount != 0) {\n        BytesRef br = field1.binaryValue();\n        byte[] bytes = new byte[br.length];\n        System.arraycopy(br.bytes, br.offset, bytes, 0, br.length);\n        field2 = new BinaryPoint(field1.name(), bytes, field1.fieldType());\n      } else if (numType != null) {\n        switch (numType) {\n          case INT:\n            field2 = new LegacyIntField(field1.name(), field1.numericValue().intValue(), field1.fieldType());\n            break;\n          case FLOAT:\n            field2 = new LegacyFloatField(field1.name(), field1.numericValue().intValue(), field1.fieldType());\n            break;\n          case LONG:\n            field2 = new LegacyLongField(field1.name(), field1.numericValue().intValue(), field1.fieldType());\n            break;\n          case DOUBLE:\n            field2 = new LegacyDoubleField(field1.name(), field1.numericValue().intValue(), field1.fieldType());\n            break;\n          default:\n            throw new IllegalStateException(\"unknown Type: \" + numType);\n        }\n      } else {\n        field2 = new Field(field1.name(), field1.stringValue(), field1.fieldType());\n      }\n      doc2.add(field2);\n    }\n\n    return doc2;\n  }\n\n","sourceOld":"  // TODO: is there a pre-existing way to do this!!!\n  public static Document cloneDocument(Document doc1) {\n    final Document doc2 = new Document();\n    for(IndexableField f : doc1.getFields()) {\n      final Field field1 = (Field) f;\n      final Field field2;\n      final DocValuesType dvType = field1.fieldType().docValuesType();\n      final int dimCount = field1.fieldType().dimensionCount();\n      final LegacyNumericType numType = field1.fieldType().numericType();\n      if (dvType != DocValuesType.NONE) {\n        switch(dvType) {\n          case NUMERIC:\n            field2 = new NumericDocValuesField(field1.name(), field1.numericValue().longValue());\n            break;\n          case BINARY:\n            field2 = new BinaryDocValuesField(field1.name(), field1.binaryValue());\n            break;\n          case SORTED:\n            field2 = new SortedDocValuesField(field1.name(), field1.binaryValue());\n            break;\n          default:\n            throw new IllegalStateException(\"unknown Type: \" + dvType);\n        }\n      } else if (dimCount != 0) {\n        BytesRef br = field1.binaryValue();\n        byte[] bytes = new byte[br.length];\n        System.arraycopy(br.bytes, br.offset, bytes, 0, br.length);\n        field2 = new DimensionalBinaryField(field1.name(), bytes, field1.fieldType());\n      } else if (numType != null) {\n        switch (numType) {\n          case INT:\n            field2 = new LegacyIntField(field1.name(), field1.numericValue().intValue(), field1.fieldType());\n            break;\n          case FLOAT:\n            field2 = new LegacyFloatField(field1.name(), field1.numericValue().intValue(), field1.fieldType());\n            break;\n          case LONG:\n            field2 = new LegacyLongField(field1.name(), field1.numericValue().intValue(), field1.fieldType());\n            break;\n          case DOUBLE:\n            field2 = new LegacyDoubleField(field1.name(), field1.numericValue().intValue(), field1.fieldType());\n            break;\n          default:\n            throw new IllegalStateException(\"unknown Type: \" + numType);\n        }\n      } else {\n        field2 = new Field(field1.name(), field1.stringValue(), field1.fieldType());\n      }\n      doc2.add(field2);\n    }\n\n    return doc2;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a8a6e8618a812308bce0a978e52ca5c453a112","date":1457444484,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestUtil#cloneDocument(Document).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestUtil#cloneDocument(Document).mjava","sourceNew":"  // TODO: is there a pre-existing way to do this!!!\n  public static Document cloneDocument(Document doc1) {\n    final Document doc2 = new Document();\n    for(IndexableField f : doc1.getFields()) {\n      final Field field1 = (Field) f;\n      final Field field2;\n      final DocValuesType dvType = field1.fieldType().docValuesType();\n      final int dimCount = field1.fieldType().pointDimensionCount();\n      if (dvType != DocValuesType.NONE) {\n        switch(dvType) {\n          case NUMERIC:\n            field2 = new NumericDocValuesField(field1.name(), field1.numericValue().longValue());\n            break;\n          case BINARY:\n            field2 = new BinaryDocValuesField(field1.name(), field1.binaryValue());\n            break;\n          case SORTED:\n            field2 = new SortedDocValuesField(field1.name(), field1.binaryValue());\n            break;\n          default:\n            throw new IllegalStateException(\"unknown Type: \" + dvType);\n        }\n      } else if (dimCount != 0) {\n        BytesRef br = field1.binaryValue();\n        byte[] bytes = new byte[br.length];\n        System.arraycopy(br.bytes, br.offset, bytes, 0, br.length);\n        field2 = new BinaryPoint(field1.name(), bytes, field1.fieldType());\n      } else {\n        field2 = new Field(field1.name(), field1.stringValue(), field1.fieldType());\n      }\n      doc2.add(field2);\n    }\n\n    return doc2;\n  }\n\n","sourceOld":"  // TODO: is there a pre-existing way to do this!!!\n  public static Document cloneDocument(Document doc1) {\n    final Document doc2 = new Document();\n    for(IndexableField f : doc1.getFields()) {\n      final Field field1 = (Field) f;\n      final Field field2;\n      final DocValuesType dvType = field1.fieldType().docValuesType();\n      final int dimCount = field1.fieldType().pointDimensionCount();\n      final LegacyNumericType numType = field1.fieldType().numericType();\n      if (dvType != DocValuesType.NONE) {\n        switch(dvType) {\n          case NUMERIC:\n            field2 = new NumericDocValuesField(field1.name(), field1.numericValue().longValue());\n            break;\n          case BINARY:\n            field2 = new BinaryDocValuesField(field1.name(), field1.binaryValue());\n            break;\n          case SORTED:\n            field2 = new SortedDocValuesField(field1.name(), field1.binaryValue());\n            break;\n          default:\n            throw new IllegalStateException(\"unknown Type: \" + dvType);\n        }\n      } else if (dimCount != 0) {\n        BytesRef br = field1.binaryValue();\n        byte[] bytes = new byte[br.length];\n        System.arraycopy(br.bytes, br.offset, bytes, 0, br.length);\n        field2 = new BinaryPoint(field1.name(), bytes, field1.fieldType());\n      } else if (numType != null) {\n        switch (numType) {\n          case INT:\n            field2 = new LegacyIntField(field1.name(), field1.numericValue().intValue(), field1.fieldType());\n            break;\n          case FLOAT:\n            field2 = new LegacyFloatField(field1.name(), field1.numericValue().intValue(), field1.fieldType());\n            break;\n          case LONG:\n            field2 = new LegacyLongField(field1.name(), field1.numericValue().intValue(), field1.fieldType());\n            break;\n          case DOUBLE:\n            field2 = new LegacyDoubleField(field1.name(), field1.numericValue().intValue(), field1.fieldType());\n            break;\n          default:\n            throw new IllegalStateException(\"unknown Type: \" + numType);\n        }\n      } else {\n        field2 = new Field(field1.name(), field1.stringValue(), field1.fieldType());\n      }\n      doc2.add(field2);\n    }\n\n    return doc2;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f6652c943595e92c187ee904c382863013eae28f","date":1539042663,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestUtil#cloneDocument(Document).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestUtil#cloneDocument(Document).mjava","sourceNew":"  // TODO: is there a pre-existing way to do this!!!\n  public static Document cloneDocument(Document doc1) {\n    final Document doc2 = new Document();\n    for(IndexableField f : doc1.getFields()) {\n      final Field field1 = (Field) f;\n      final Field field2;\n      final DocValuesType dvType = field1.fieldType().docValuesType();\n      final int dimCount = field1.fieldType().pointDataDimensionCount();\n      if (dvType != DocValuesType.NONE) {\n        switch(dvType) {\n          case NUMERIC:\n            field2 = new NumericDocValuesField(field1.name(), field1.numericValue().longValue());\n            break;\n          case BINARY:\n            field2 = new BinaryDocValuesField(field1.name(), field1.binaryValue());\n            break;\n          case SORTED:\n            field2 = new SortedDocValuesField(field1.name(), field1.binaryValue());\n            break;\n          default:\n            throw new IllegalStateException(\"unknown Type: \" + dvType);\n        }\n      } else if (dimCount != 0) {\n        BytesRef br = field1.binaryValue();\n        byte[] bytes = new byte[br.length];\n        System.arraycopy(br.bytes, br.offset, bytes, 0, br.length);\n        field2 = new BinaryPoint(field1.name(), bytes, field1.fieldType());\n      } else {\n        field2 = new Field(field1.name(), field1.stringValue(), field1.fieldType());\n      }\n      doc2.add(field2);\n    }\n\n    return doc2;\n  }\n\n","sourceOld":"  // TODO: is there a pre-existing way to do this!!!\n  public static Document cloneDocument(Document doc1) {\n    final Document doc2 = new Document();\n    for(IndexableField f : doc1.getFields()) {\n      final Field field1 = (Field) f;\n      final Field field2;\n      final DocValuesType dvType = field1.fieldType().docValuesType();\n      final int dimCount = field1.fieldType().pointDimensionCount();\n      if (dvType != DocValuesType.NONE) {\n        switch(dvType) {\n          case NUMERIC:\n            field2 = new NumericDocValuesField(field1.name(), field1.numericValue().longValue());\n            break;\n          case BINARY:\n            field2 = new BinaryDocValuesField(field1.name(), field1.binaryValue());\n            break;\n          case SORTED:\n            field2 = new SortedDocValuesField(field1.name(), field1.binaryValue());\n            break;\n          default:\n            throw new IllegalStateException(\"unknown Type: \" + dvType);\n        }\n      } else if (dimCount != 0) {\n        BytesRef br = field1.binaryValue();\n        byte[] bytes = new byte[br.length];\n        System.arraycopy(br.bytes, br.offset, bytes, 0, br.length);\n        field2 = new BinaryPoint(field1.name(), bytes, field1.fieldType());\n      } else {\n        field2 = new Field(field1.name(), field1.stringValue(), field1.fieldType());\n      }\n      doc2.add(field2);\n    }\n\n    return doc2;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"59ed8c026ba85e3c42fb89605b2032dc6f9cc241","date":1581113294,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestUtil#cloneDocument(Document).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestUtil#cloneDocument(Document).mjava","sourceNew":"  // TODO: is there a pre-existing way to do this!!!\n  public static Document cloneDocument(Document doc1) {\n    final Document doc2 = new Document();\n    for(IndexableField f : doc1.getFields()) {\n      final Field field1 = (Field) f;\n      final Field field2;\n      final DocValuesType dvType = field1.fieldType().docValuesType();\n      final int dimCount = field1.fieldType().pointDimensionCount();\n      if (dvType != DocValuesType.NONE) {\n        switch(dvType) {\n          case NUMERIC:\n            field2 = new NumericDocValuesField(field1.name(), field1.numericValue().longValue());\n            break;\n          case BINARY:\n            field2 = new BinaryDocValuesField(field1.name(), field1.binaryValue());\n            break;\n          case SORTED:\n            field2 = new SortedDocValuesField(field1.name(), field1.binaryValue());\n            break;\n          default:\n            throw new IllegalStateException(\"unknown Type: \" + dvType);\n        }\n      } else if (dimCount != 0) {\n        BytesRef br = field1.binaryValue();\n        byte[] bytes = new byte[br.length];\n        System.arraycopy(br.bytes, br.offset, bytes, 0, br.length);\n        field2 = new BinaryPoint(field1.name(), bytes, field1.fieldType());\n      } else {\n        field2 = new Field(field1.name(), field1.stringValue(), field1.fieldType());\n      }\n      doc2.add(field2);\n    }\n\n    return doc2;\n  }\n\n","sourceOld":"  // TODO: is there a pre-existing way to do this!!!\n  public static Document cloneDocument(Document doc1) {\n    final Document doc2 = new Document();\n    for(IndexableField f : doc1.getFields()) {\n      final Field field1 = (Field) f;\n      final Field field2;\n      final DocValuesType dvType = field1.fieldType().docValuesType();\n      final int dimCount = field1.fieldType().pointDataDimensionCount();\n      if (dvType != DocValuesType.NONE) {\n        switch(dvType) {\n          case NUMERIC:\n            field2 = new NumericDocValuesField(field1.name(), field1.numericValue().longValue());\n            break;\n          case BINARY:\n            field2 = new BinaryDocValuesField(field1.name(), field1.binaryValue());\n            break;\n          case SORTED:\n            field2 = new SortedDocValuesField(field1.name(), field1.binaryValue());\n            break;\n          default:\n            throw new IllegalStateException(\"unknown Type: \" + dvType);\n        }\n      } else if (dimCount != 0) {\n        BytesRef br = field1.binaryValue();\n        byte[] bytes = new byte[br.length];\n        System.arraycopy(br.bytes, br.offset, bytes, 0, br.length);\n        field2 = new BinaryPoint(field1.name(), bytes, field1.fieldType());\n      } else {\n        field2 = new Field(field1.name(), field1.stringValue(), field1.fieldType());\n      }\n      doc2.add(field2);\n    }\n\n    return doc2;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"cab7a79353f33d1a94cd307bf33aa5148601ebe6":["770342641f7b505eaa8dccdc666158bff2419109"],"59ed8c026ba85e3c42fb89605b2032dc6f9cc241":["f6652c943595e92c187ee904c382863013eae28f"],"f6652c943595e92c187ee904c382863013eae28f":["37a8a6e8618a812308bce0a978e52ca5c453a112"],"6613659748fe4411a7dcf85266e55db1f95f7315":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"37a8a6e8618a812308bce0a978e52ca5c453a112":["cab7a79353f33d1a94cd307bf33aa5148601ebe6"],"2bb2842e561df4e8e9ad89010605fc86ac265465":["6613659748fe4411a7dcf85266e55db1f95f7315"],"eac6ccb51c439bec7f67cb0e299d3cb77b62b87e":["f95ce1375367b92d411a06175eab3915fe93c6bc"],"770342641f7b505eaa8dccdc666158bff2419109":["eac6ccb51c439bec7f67cb0e299d3cb77b62b87e"],"f95ce1375367b92d411a06175eab3915fe93c6bc":["2bb2842e561df4e8e9ad89010605fc86ac265465"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["59ed8c026ba85e3c42fb89605b2032dc6f9cc241"]},"commit2Childs":{"cab7a79353f33d1a94cd307bf33aa5148601ebe6":["37a8a6e8618a812308bce0a978e52ca5c453a112"],"59ed8c026ba85e3c42fb89605b2032dc6f9cc241":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f6652c943595e92c187ee904c382863013eae28f":["59ed8c026ba85e3c42fb89605b2032dc6f9cc241"],"6613659748fe4411a7dcf85266e55db1f95f7315":["2bb2842e561df4e8e9ad89010605fc86ac265465"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6613659748fe4411a7dcf85266e55db1f95f7315"],"37a8a6e8618a812308bce0a978e52ca5c453a112":["f6652c943595e92c187ee904c382863013eae28f"],"2bb2842e561df4e8e9ad89010605fc86ac265465":["f95ce1375367b92d411a06175eab3915fe93c6bc"],"eac6ccb51c439bec7f67cb0e299d3cb77b62b87e":["770342641f7b505eaa8dccdc666158bff2419109"],"770342641f7b505eaa8dccdc666158bff2419109":["cab7a79353f33d1a94cd307bf33aa5148601ebe6"],"f95ce1375367b92d411a06175eab3915fe93c6bc":["eac6ccb51c439bec7f67cb0e299d3cb77b62b87e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}