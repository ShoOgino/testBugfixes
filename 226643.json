{"path":"modules/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/GraphvizFormatter#setBestPathMap(WrappedPositionArray,int,Position,int).mjava","commits":[{"id":"98d45c1ff2c99694b6de2201175f9b8b8b27b597","date":1332757908,"type":1,"author":"Christian Moen","isMerge":false,"pathNew":"modules/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/GraphvizFormatter#setBestPathMap(WrappedPositionArray,int,Position,int).mjava","pathOld":"modules/analysis/kuromoji/src/java/org/apache/lucene/analysis/kuromoji/GraphvizFormatter#setBestPathMap(WrappedPositionArray,int,Position,int).mjava","sourceNew":"  // Records which arcs make up the best bath:\n  private void setBestPathMap(WrappedPositionArray positions, int startPos, Position endPosData, int fromIDX) {\n    bestPathMap.clear();\n\n    int pos = endPosData.pos;\n    int bestIDX = fromIDX;\n    while (pos > startPos) {\n      final Position posData = positions.get(pos);\n\n      final int backPos = posData.backPos[bestIDX];\n      final int backIDX = posData.backIndex[bestIDX];\n\n      final String toNodeID = getNodeID(pos, bestIDX);\n      final String fromNodeID = getNodeID(backPos, backIDX);\n      \n      assert !bestPathMap.containsKey(fromNodeID);\n      assert !bestPathMap.containsValue(toNodeID);\n      bestPathMap.put(fromNodeID, toNodeID);\n      pos = backPos;\n      bestIDX = backIDX;\n    }\n  }\n\n","sourceOld":"  // Records which arcs make up the best bath:\n  private void setBestPathMap(WrappedPositionArray positions, int startPos, Position endPosData, int fromIDX) {\n    bestPathMap.clear();\n\n    int pos = endPosData.pos;\n    int bestIDX = fromIDX;\n    while (pos > startPos) {\n      final Position posData = positions.get(pos);\n\n      final int backPos = posData.backPos[bestIDX];\n      final int backIDX = posData.backIndex[bestIDX];\n\n      final String toNodeID = getNodeID(pos, bestIDX);\n      final String fromNodeID = getNodeID(backPos, backIDX);\n      \n      assert !bestPathMap.containsKey(fromNodeID);\n      assert !bestPathMap.containsValue(toNodeID);\n      bestPathMap.put(fromNodeID, toNodeID);\n      pos = backPos;\n      bestIDX = backIDX;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/GraphvizFormatter#setBestPathMap(WrappedPositionArray,int,Position,int).mjava","pathOld":"modules/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/GraphvizFormatter#setBestPathMap(WrappedPositionArray,int,Position,int).mjava","sourceNew":"  // Records which arcs make up the best bath:\n  private void setBestPathMap(WrappedPositionArray positions, int startPos, Position endPosData, int fromIDX) {\n    bestPathMap.clear();\n\n    int pos = endPosData.pos;\n    int bestIDX = fromIDX;\n    while (pos > startPos) {\n      final Position posData = positions.get(pos);\n\n      final int backPos = posData.backPos[bestIDX];\n      final int backIDX = posData.backIndex[bestIDX];\n\n      final String toNodeID = getNodeID(pos, bestIDX);\n      final String fromNodeID = getNodeID(backPos, backIDX);\n      \n      assert !bestPathMap.containsKey(fromNodeID);\n      assert !bestPathMap.containsValue(toNodeID);\n      bestPathMap.put(fromNodeID, toNodeID);\n      pos = backPos;\n      bestIDX = backIDX;\n    }\n  }\n\n","sourceOld":"  // Records which arcs make up the best bath:\n  private void setBestPathMap(WrappedPositionArray positions, int startPos, Position endPosData, int fromIDX) {\n    bestPathMap.clear();\n\n    int pos = endPosData.pos;\n    int bestIDX = fromIDX;\n    while (pos > startPos) {\n      final Position posData = positions.get(pos);\n\n      final int backPos = posData.backPos[bestIDX];\n      final int backIDX = posData.backIndex[bestIDX];\n\n      final String toNodeID = getNodeID(pos, bestIDX);\n      final String fromNodeID = getNodeID(backPos, backIDX);\n      \n      assert !bestPathMap.containsKey(fromNodeID);\n      assert !bestPathMap.containsValue(toNodeID);\n      bestPathMap.put(fromNodeID, toNodeID);\n      pos = backPos;\n      bestIDX = backIDX;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["98d45c1ff2c99694b6de2201175f9b8b8b27b597"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"98d45c1ff2c99694b6de2201175f9b8b8b27b597":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["98d45c1ff2c99694b6de2201175f9b8b8b27b597"],"98d45c1ff2c99694b6de2201175f9b8b8b27b597":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}