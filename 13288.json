{"path":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/Plane#constructNormalizedZPlane(Vector...).mjava","commits":[{"id":"b4e444678504caf66a8060b1d514383aa4feac0c","date":1457399659,"type":1,"author":"David Smiley","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/Plane#constructNormalizedZPlane(Vector...).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/Plane#constructNormalizedZPlane(Vector...).mjava","sourceNew":"  /** Construct the most accurate normalized plane through an x-y point and including the Z axis.\n   * If none of the points can determine the plane, return null.\n   * @param planePoints is a set of points to choose from.  The best one for constructing the most precise plane is picked.\n   * @return the plane\n   */\n  public static Plane constructNormalizedZPlane(final Vector... planePoints) {\n    // Pick the best one (with the greatest x-y distance)\n    double bestDistance = 0.0;\n    Vector bestPoint = null;\n    for (final Vector point : planePoints) {\n      final double pointDist = point.x * point.x + point.y * point.y;\n      if (pointDist > bestDistance) {\n        bestDistance = pointDist;\n        bestPoint = point;\n      }\n    }\n    return constructNormalizedZPlane(bestPoint.x, bestPoint.y);\n  }\n\n","sourceOld":"  /** Construct the most accurate normalized plane through an x-y point and including the Z axis.\n   * If none of the points can determine the plane, return null.\n   * @param planePoints is a set of points to choose from.  The best one for constructing the most precise plane is picked.\n   * @return the plane\n   */\n  public static Plane constructNormalizedZPlane(final Vector... planePoints) {\n    // Pick the best one (with the greatest x-y distance)\n    double bestDistance = 0.0;\n    Vector bestPoint = null;\n    for (final Vector point : planePoints) {\n      final double pointDist = point.x * point.x + point.y * point.y;\n      if (pointDist > bestDistance) {\n        bestDistance = pointDist;\n        bestPoint = point;\n      }\n    }\n    return constructNormalizedZPlane(bestPoint.x, bestPoint.y);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b4e444678504caf66a8060b1d514383aa4feac0c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b4e444678504caf66a8060b1d514383aa4feac0c"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b4e444678504caf66a8060b1d514383aa4feac0c"],"b4e444678504caf66a8060b1d514383aa4feac0c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}