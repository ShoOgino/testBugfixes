{"path":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsIndexWriter#writeIndex(int,long).mjava","commits":[{"id":"5e04b732c631a77cbbd25b6ce43c2a8abb1e9e69","date":1352818449,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsIndexWriter#writeIndex(int,long).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsIndexWriter#writeIndex(int,long).mjava","sourceNew":"  void writeIndex(int numDocs, long startPointer) throws IOException {\n    if (blockChunks == BLOCK_SIZE) {\n      writeBlock();\n      reset();\n    }\n\n    if (firstStartPointer == -1) {\n      firstStartPointer = maxStartPointer = startPointer;\n    }\n    assert firstStartPointer > 0 && startPointer >= firstStartPointer;\n\n    docBaseDeltas[blockChunks] = numDocs;\n    startPointerDeltas[blockChunks] = startPointer - maxStartPointer;\n\n    ++blockChunks;\n    blockDocs += numDocs;\n    totalDocs += numDocs;\n    maxStartPointer = startPointer;\n  }\n\n","sourceOld":"  void writeIndex(int numDocs, long startPointer) throws IOException {\n    if (blockChunks == BLOCK_SIZE) {\n      writeBlock();\n      reset();\n    }\n\n    if (firstStartPointer == -1) {\n      firstStartPointer = maxStartPointer = startPointer;\n    }\n    assert firstStartPointer > 0 && startPointer >= firstStartPointer;\n\n    docBaseDeltas[blockChunks] = numDocs;\n    startPointerDeltas[blockChunks] = startPointer - maxStartPointer;\n\n    ++blockChunks;\n    blockDocs += numDocs;\n    totalDocs += numDocs;\n    maxStartPointer = startPointer;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsIndexWriter#writeIndex(int,long).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsIndexWriter#writeIndex(int,long).mjava","sourceNew":"  void writeIndex(int numDocs, long startPointer) throws IOException {\n    if (blockChunks == BLOCK_SIZE) {\n      writeBlock();\n      reset();\n    }\n\n    if (firstStartPointer == -1) {\n      firstStartPointer = maxStartPointer = startPointer;\n    }\n    assert firstStartPointer > 0 && startPointer >= firstStartPointer;\n\n    docBaseDeltas[blockChunks] = numDocs;\n    startPointerDeltas[blockChunks] = startPointer - maxStartPointer;\n\n    ++blockChunks;\n    blockDocs += numDocs;\n    totalDocs += numDocs;\n    maxStartPointer = startPointer;\n  }\n\n","sourceOld":"  void writeIndex(int numDocs, long startPointer) throws IOException {\n    if (blockChunks == BLOCK_SIZE) {\n      writeBlock();\n      reset();\n    }\n\n    if (firstStartPointer == -1) {\n      firstStartPointer = maxStartPointer = startPointer;\n    }\n    assert firstStartPointer > 0 && startPointer >= firstStartPointer;\n\n    docBaseDeltas[blockChunks] = numDocs;\n    startPointerDeltas[blockChunks] = startPointer - maxStartPointer;\n\n    ++blockChunks;\n    blockDocs += numDocs;\n    totalDocs += numDocs;\n    maxStartPointer = startPointer;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"59d4661023aa9541b0a759e4d2e11dcf83b923a0","date":1420124226,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsIndexWriter#writeIndex(int,long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsIndexWriter#writeIndex(int,long).mjava","sourceNew":"  void writeIndex(int numDocs, long startPointer) throws IOException {\n    if (blockChunks == blockSize) {\n      writeBlock();\n      reset();\n    }\n\n    if (firstStartPointer == -1) {\n      firstStartPointer = maxStartPointer = startPointer;\n    }\n    assert firstStartPointer > 0 && startPointer >= firstStartPointer;\n\n    docBaseDeltas[blockChunks] = numDocs;\n    startPointerDeltas[blockChunks] = startPointer - maxStartPointer;\n\n    ++blockChunks;\n    blockDocs += numDocs;\n    totalDocs += numDocs;\n    maxStartPointer = startPointer;\n  }\n\n","sourceOld":"  void writeIndex(int numDocs, long startPointer) throws IOException {\n    if (blockChunks == BLOCK_SIZE) {\n      writeBlock();\n      reset();\n    }\n\n    if (firstStartPointer == -1) {\n      firstStartPointer = maxStartPointer = startPointer;\n    }\n    assert firstStartPointer > 0 && startPointer >= firstStartPointer;\n\n    docBaseDeltas[blockChunks] = numDocs;\n    startPointerDeltas[blockChunks] = startPointer - maxStartPointer;\n\n    ++blockChunks;\n    blockDocs += numDocs;\n    totalDocs += numDocs;\n    maxStartPointer = startPointer;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70a4487b07c49a1861c05720e04624826ecbe9fa","date":1580924108,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsIndexWriter#writeIndex(int,long).mjava","sourceNew":null,"sourceOld":"  void writeIndex(int numDocs, long startPointer) throws IOException {\n    if (blockChunks == blockSize) {\n      writeBlock();\n      reset();\n    }\n\n    if (firstStartPointer == -1) {\n      firstStartPointer = maxStartPointer = startPointer;\n    }\n    assert firstStartPointer > 0 && startPointer >= firstStartPointer;\n\n    docBaseDeltas[blockChunks] = numDocs;\n    startPointerDeltas[blockChunks] = startPointer - maxStartPointer;\n\n    ++blockChunks;\n    blockDocs += numDocs;\n    totalDocs += numDocs;\n    maxStartPointer = startPointer;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70a4487b07c49a1861c05720e04624826ecbe9fa":["59d4661023aa9541b0a759e4d2e11dcf83b923a0"],"5e04b732c631a77cbbd25b6ce43c2a8abb1e9e69":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"59d4661023aa9541b0a759e4d2e11dcf83b923a0":["5e04b732c631a77cbbd25b6ce43c2a8abb1e9e69"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5e04b732c631a77cbbd25b6ce43c2a8abb1e9e69"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["70a4487b07c49a1861c05720e04624826ecbe9fa"]},"commit2Childs":{"70a4487b07c49a1861c05720e04624826ecbe9fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5e04b732c631a77cbbd25b6ce43c2a8abb1e9e69":["59d4661023aa9541b0a759e4d2e11dcf83b923a0","407687e67faf6e1f02a211ca078d8e3eed631027"],"59d4661023aa9541b0a759e4d2e11dcf83b923a0":["70a4487b07c49a1861c05720e04624826ecbe9fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5e04b732c631a77cbbd25b6ce43c2a8abb1e9e69","407687e67faf6e1f02a211ca078d8e3eed631027"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}