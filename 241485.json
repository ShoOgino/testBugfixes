{"path":"src/test/org/apache/lucene/index/TestDoc#merge(SegmentInfo,SegmentInfo,String,boolean).mjava","commits":[{"id":"8a5cfde941b2f8208d739344fef3821381885618","date":1168979092,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestDoc#merge(SegmentInfo,SegmentInfo,String,boolean).mjava","pathOld":"src/test/org/apache/lucene/index/TestDoc#merge(String,int,String,int,String,boolean).mjava","sourceNew":"   private SegmentInfo merge(SegmentInfo si1, SegmentInfo si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      Directory directory = FSDirectory.getDirectory(indexDir, false);\n\n      SegmentReader r1 = SegmentReader.get(si1);\n      SegmentReader r2 = SegmentReader.get(si2);\n\n      SegmentMerger merger = new SegmentMerger(directory, merged);\n\n      merger.add(r1);\n      merger.add(r2);\n      merger.merge();\n      merger.closeReaders();\n      \n      if (useCompoundFile) {\n        Vector filesToDelete = merger.createCompoundFile(merged + \".cfs\");\n        for (Iterator iter = filesToDelete.iterator(); iter.hasNext();)\n          directory.deleteFile((String) iter.next());\n      }\n\n      directory.close();\n      return new SegmentInfo(merged, si1.docCount + si2.docCount, directory, useCompoundFile, true);\n   }\n\n","sourceOld":"   private void merge(String seg1, int docCount1, String seg2, int docCount2, String merged, boolean useCompoundFile)\n   throws Exception {\n      Directory directory = FSDirectory.getDirectory(indexDir, false);\n\n      SegmentReader r1 = SegmentReader.get(new SegmentInfo(seg1, docCount1, directory));\n      SegmentReader r2 = SegmentReader.get(new SegmentInfo(seg2, docCount2, directory));\n\n      SegmentMerger merger =\n        new SegmentMerger(directory, merged);\n\n      merger.add(r1);\n      merger.add(r2);\n      merger.merge();\n      merger.closeReaders();\n      \n      if (useCompoundFile) {\n        Vector filesToDelete = merger.createCompoundFile(merged + \".cfs\");\n        for (Iterator iter = filesToDelete.iterator(); iter.hasNext();)\n          directory.deleteFile((String) iter.next());\n      }\n\n      directory.close();\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7b6cdc70e097da94da79a655ed8f94477ff69f5","date":1220815360,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestDoc#merge(SegmentInfo,SegmentInfo,String,boolean).mjava","pathOld":"src/test/org/apache/lucene/index/TestDoc#merge(SegmentInfo,SegmentInfo,String,boolean).mjava","sourceNew":"   private SegmentInfo merge(SegmentInfo si1, SegmentInfo si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      Directory directory = FSDirectory.getDirectory(indexDir, false);\n\n      SegmentReader r1 = SegmentReader.get(si1);\n      SegmentReader r2 = SegmentReader.get(si2);\n\n      SegmentMerger merger = new SegmentMerger(directory, merged);\n\n      merger.add(r1);\n      merger.add(r2);\n      merger.merge();\n      merger.closeReaders();\n      \n      if (useCompoundFile) {\n        List filesToDelete = merger.createCompoundFile(merged + \".cfs\");\n        for (Iterator iter = filesToDelete.iterator(); iter.hasNext();)\n          directory.deleteFile((String) iter.next());\n      }\n\n      directory.close();\n      return new SegmentInfo(merged, si1.docCount + si2.docCount, directory, useCompoundFile, true);\n   }\n\n","sourceOld":"   private SegmentInfo merge(SegmentInfo si1, SegmentInfo si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      Directory directory = FSDirectory.getDirectory(indexDir, false);\n\n      SegmentReader r1 = SegmentReader.get(si1);\n      SegmentReader r2 = SegmentReader.get(si2);\n\n      SegmentMerger merger = new SegmentMerger(directory, merged);\n\n      merger.add(r1);\n      merger.add(r2);\n      merger.merge();\n      merger.closeReaders();\n      \n      if (useCompoundFile) {\n        Vector filesToDelete = merger.createCompoundFile(merged + \".cfs\");\n        for (Iterator iter = filesToDelete.iterator(); iter.hasNext();)\n          directory.deleteFile((String) iter.next());\n      }\n\n      directory.close();\n      return new SegmentInfo(merged, si1.docCount + si2.docCount, directory, useCompoundFile, true);\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5309ea37b2a7ec9c5f21c9eeacc9d9fb808cdb02","date":1243677645,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestDoc#merge(SegmentInfo,SegmentInfo,String,boolean).mjava","pathOld":"src/test/org/apache/lucene/index/TestDoc#merge(SegmentInfo,SegmentInfo,String,boolean).mjava","sourceNew":"   private SegmentInfo merge(SegmentInfo si1, SegmentInfo si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      SegmentReader r1 = SegmentReader.get(si1);\n      SegmentReader r2 = SegmentReader.get(si2);\n\n      SegmentMerger merger = new SegmentMerger(si1.dir, merged);\n\n      merger.add(r1);\n      merger.add(r2);\n      merger.merge();\n      merger.closeReaders();\n      \n      if (useCompoundFile) {\n        List filesToDelete = merger.createCompoundFile(merged + \".cfs\");\n        for (Iterator iter = filesToDelete.iterator(); iter.hasNext();)\n          si1.dir.deleteFile((String) iter.next());\n      }\n\n      return new SegmentInfo(merged, si1.docCount + si2.docCount, si1.dir, useCompoundFile, true);\n   }\n\n","sourceOld":"   private SegmentInfo merge(SegmentInfo si1, SegmentInfo si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      Directory directory = FSDirectory.getDirectory(indexDir, false);\n\n      SegmentReader r1 = SegmentReader.get(si1);\n      SegmentReader r2 = SegmentReader.get(si2);\n\n      SegmentMerger merger = new SegmentMerger(directory, merged);\n\n      merger.add(r1);\n      merger.add(r2);\n      merger.merge();\n      merger.closeReaders();\n      \n      if (useCompoundFile) {\n        List filesToDelete = merger.createCompoundFile(merged + \".cfs\");\n        for (Iterator iter = filesToDelete.iterator(); iter.hasNext();)\n          directory.deleteFile((String) iter.next());\n      }\n\n      directory.close();\n      return new SegmentInfo(merged, si1.docCount + si2.docCount, directory, useCompoundFile, true);\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"be2419774ad2eb3c65ca1cb035c3a2ccc6ae7da1","date":1255502337,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestDoc#merge(SegmentInfo,SegmentInfo,String,boolean).mjava","pathOld":"src/test/org/apache/lucene/index/TestDoc#merge(SegmentInfo,SegmentInfo,String,boolean).mjava","sourceNew":"   private SegmentInfo merge(SegmentInfo si1, SegmentInfo si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      SegmentReader r1 = SegmentReader.get(true, si1, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n      SegmentReader r2 = SegmentReader.get(true, si2, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n\n      SegmentMerger merger = new SegmentMerger(si1.dir, merged);\n\n      merger.add(r1);\n      merger.add(r2);\n      merger.merge();\n      merger.closeReaders();\n      \n      if (useCompoundFile) {\n        List filesToDelete = merger.createCompoundFile(merged + \".cfs\");\n        for (Iterator iter = filesToDelete.iterator(); iter.hasNext();)\n          si1.dir.deleteFile((String) iter.next());\n      }\n\n      return new SegmentInfo(merged, si1.docCount + si2.docCount, si1.dir, useCompoundFile, true);\n   }\n\n","sourceOld":"   private SegmentInfo merge(SegmentInfo si1, SegmentInfo si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      SegmentReader r1 = SegmentReader.get(si1);\n      SegmentReader r2 = SegmentReader.get(si2);\n\n      SegmentMerger merger = new SegmentMerger(si1.dir, merged);\n\n      merger.add(r1);\n      merger.add(r2);\n      merger.merge();\n      merger.closeReaders();\n      \n      if (useCompoundFile) {\n        List filesToDelete = merger.createCompoundFile(merged + \".cfs\");\n        for (Iterator iter = filesToDelete.iterator(); iter.hasNext();)\n          si1.dir.deleteFile((String) iter.next());\n      }\n\n      return new SegmentInfo(merged, si1.docCount + si2.docCount, si1.dir, useCompoundFile, true);\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e450c7d50c2fc84c963d0d7ade9d3217d868064d","date":1259932067,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestDoc#merge(SegmentInfo,SegmentInfo,String,boolean).mjava","pathOld":"src/test/org/apache/lucene/index/TestDoc#merge(SegmentInfo,SegmentInfo,String,boolean).mjava","sourceNew":"   private SegmentInfo merge(SegmentInfo si1, SegmentInfo si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      SegmentReader r1 = SegmentReader.get(true, si1, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n      SegmentReader r2 = SegmentReader.get(true, si2, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n\n      SegmentMerger merger = new SegmentMerger(si1.dir, merged);\n\n      merger.add(r1);\n      merger.add(r2);\n      merger.merge();\n      merger.closeReaders();\n      \n      if (useCompoundFile) {\n        List<String> filesToDelete = merger.createCompoundFile(merged + \".cfs\");\n        for (final String fileToDelete : filesToDelete) \n          si1.dir.deleteFile(fileToDelete);\n      }\n\n      return new SegmentInfo(merged, si1.docCount + si2.docCount, si1.dir, useCompoundFile, true);\n   }\n\n","sourceOld":"   private SegmentInfo merge(SegmentInfo si1, SegmentInfo si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      SegmentReader r1 = SegmentReader.get(true, si1, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n      SegmentReader r2 = SegmentReader.get(true, si2, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n\n      SegmentMerger merger = new SegmentMerger(si1.dir, merged);\n\n      merger.add(r1);\n      merger.add(r2);\n      merger.merge();\n      merger.closeReaders();\n      \n      if (useCompoundFile) {\n        List filesToDelete = merger.createCompoundFile(merged + \".cfs\");\n        for (Iterator iter = filesToDelete.iterator(); iter.hasNext();)\n          si1.dir.deleteFile((String) iter.next());\n      }\n\n      return new SegmentInfo(merged, si1.docCount + si2.docCount, si1.dir, useCompoundFile, true);\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDoc#merge(SegmentInfo,SegmentInfo,String,boolean).mjava","pathOld":"src/test/org/apache/lucene/index/TestDoc#merge(SegmentInfo,SegmentInfo,String,boolean).mjava","sourceNew":"   private SegmentInfo merge(SegmentInfo si1, SegmentInfo si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      SegmentReader r1 = SegmentReader.get(true, si1, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n      SegmentReader r2 = SegmentReader.get(true, si2, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n\n      SegmentMerger merger = new SegmentMerger(si1.dir, merged);\n\n      merger.add(r1);\n      merger.add(r2);\n      merger.merge();\n      merger.closeReaders();\n      \n      if (useCompoundFile) {\n        List<String> filesToDelete = merger.createCompoundFile(merged + \".cfs\");\n        for (final String fileToDelete : filesToDelete) \n          si1.dir.deleteFile(fileToDelete);\n      }\n\n      return new SegmentInfo(merged, si1.docCount + si2.docCount, si1.dir, useCompoundFile, true);\n   }\n\n","sourceOld":"   private SegmentInfo merge(SegmentInfo si1, SegmentInfo si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      SegmentReader r1 = SegmentReader.get(true, si1, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n      SegmentReader r2 = SegmentReader.get(true, si2, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n\n      SegmentMerger merger = new SegmentMerger(si1.dir, merged);\n\n      merger.add(r1);\n      merger.add(r2);\n      merger.merge();\n      merger.closeReaders();\n      \n      if (useCompoundFile) {\n        List<String> filesToDelete = merger.createCompoundFile(merged + \".cfs\");\n        for (final String fileToDelete : filesToDelete) \n          si1.dir.deleteFile(fileToDelete);\n      }\n\n      return new SegmentInfo(merged, si1.docCount + si2.docCount, si1.dir, useCompoundFile, true);\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8a5cfde941b2f8208d739344fef3821381885618":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5309ea37b2a7ec9c5f21c9eeacc9d9fb808cdb02":["c7b6cdc70e097da94da79a655ed8f94477ff69f5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"be2419774ad2eb3c65ca1cb035c3a2ccc6ae7da1":["5309ea37b2a7ec9c5f21c9eeacc9d9fb808cdb02"],"c7b6cdc70e097da94da79a655ed8f94477ff69f5":["8a5cfde941b2f8208d739344fef3821381885618"],"e450c7d50c2fc84c963d0d7ade9d3217d868064d":["be2419774ad2eb3c65ca1cb035c3a2ccc6ae7da1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["e450c7d50c2fc84c963d0d7ade9d3217d868064d"]},"commit2Childs":{"8a5cfde941b2f8208d739344fef3821381885618":["c7b6cdc70e097da94da79a655ed8f94477ff69f5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8a5cfde941b2f8208d739344fef3821381885618"],"5309ea37b2a7ec9c5f21c9eeacc9d9fb808cdb02":["be2419774ad2eb3c65ca1cb035c3a2ccc6ae7da1"],"be2419774ad2eb3c65ca1cb035c3a2ccc6ae7da1":["e450c7d50c2fc84c963d0d7ade9d3217d868064d"],"c7b6cdc70e097da94da79a655ed8f94477ff69f5":["5309ea37b2a7ec9c5f21c9eeacc9d9fb808cdb02"],"e450c7d50c2fc84c963d0d7ade9d3217d868064d":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}