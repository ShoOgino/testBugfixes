{"path":"lucene/core/src/java/org/apache/lucene/codecs/bloom/BloomFilteringPostingsFormat.BloomFilteredFieldsProducer#BloomFilteredFieldsProducer(SegmentReadState).mjava","commits":[{"id":"0274c27988a26cb0cda3a0d15b282221b1b453f0","date":1343923460,"type":0,"author":"Mark Harwood","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/bloom/BloomFilteringPostingsFormat.BloomFilteredFieldsProducer#BloomFilteredFieldsProducer(SegmentReadState).mjava","pathOld":"/dev/null","sourceNew":"    public BloomFilteredFieldsProducer(SegmentReadState state)\r\n        throws IOException {\r\n      \r\n      String bloomFileName = IndexFileNames.segmentFileName(\r\n          state.segmentInfo.name, state.segmentSuffix, BLOOM_EXTENSION);\r\n      IndexInput bloomIn = null;\r\n      try {\r\n        bloomIn = state.dir.openInput(bloomFileName, state.context);\r\n        CodecUtil.checkHeader(bloomIn, BLOOM_CODEC_NAME, BLOOM_CODEC_VERSION,\r\n            BLOOM_CODEC_VERSION);\r\n        // // Load the hash function used in the BloomFilter\r\n        // hashFunction = HashFunction.forName(bloomIn.readString());\r\n        // Load the delegate postings format\r\n        PostingsFormat delegatePostingsFormat = PostingsFormat.forName(bloomIn\r\n            .readString());\r\n        \r\n        this.delegateFieldsProducer = delegatePostingsFormat\r\n            .fieldsProducer(state);\r\n        int numBlooms = bloomIn.readInt();\r\n        for (int i = 0; i < numBlooms; i++) {\r\n          int fieldNum = bloomIn.readInt();\r\n          FuzzySet bloom = FuzzySet.deserialize(bloomIn);\r\n          FieldInfo fieldInfo = state.fieldInfos.fieldInfo(fieldNum);\r\n          bloomsByFieldName.put(fieldInfo.name, bloom);\r\n        }\r\n      } finally {\r\n        IOUtils.close(bloomIn);\r\n      }\r\n      \r\n    }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8fd5be977c105554c6a7b68afcdbc511439723ab","date":1344115570,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/bloom/BloomFilteringPostingsFormat.BloomFilteredFieldsProducer#BloomFilteredFieldsProducer(SegmentReadState).mjava","pathOld":"/dev/null","sourceNew":"    public BloomFilteredFieldsProducer(SegmentReadState state)\r\n        throws IOException {\r\n      \r\n      String bloomFileName = IndexFileNames.segmentFileName(\r\n          state.segmentInfo.name, state.segmentSuffix, BLOOM_EXTENSION);\r\n      IndexInput bloomIn = null;\r\n      try {\r\n        bloomIn = state.dir.openInput(bloomFileName, state.context);\r\n        CodecUtil.checkHeader(bloomIn, BLOOM_CODEC_NAME, BLOOM_CODEC_VERSION,\r\n            BLOOM_CODEC_VERSION);\r\n        // // Load the hash function used in the BloomFilter\r\n        // hashFunction = HashFunction.forName(bloomIn.readString());\r\n        // Load the delegate postings format\r\n        PostingsFormat delegatePostingsFormat = PostingsFormat.forName(bloomIn\r\n            .readString());\r\n        \r\n        this.delegateFieldsProducer = delegatePostingsFormat\r\n            .fieldsProducer(state);\r\n        int numBlooms = bloomIn.readInt();\r\n        for (int i = 0; i < numBlooms; i++) {\r\n          int fieldNum = bloomIn.readInt();\r\n          FuzzySet bloom = FuzzySet.deserialize(bloomIn);\r\n          FieldInfo fieldInfo = state.fieldInfos.fieldInfo(fieldNum);\r\n          bloomsByFieldName.put(fieldInfo.name, bloom);\r\n        }\r\n      } finally {\r\n        IOUtils.close(bloomIn);\r\n      }\r\n      \r\n    }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/bloom/BloomFilteringPostingsFormat.BloomFilteredFieldsProducer#BloomFilteredFieldsProducer(SegmentReadState).mjava","pathOld":"/dev/null","sourceNew":"    public BloomFilteredFieldsProducer(SegmentReadState state)\r\n        throws IOException {\r\n      \r\n      String bloomFileName = IndexFileNames.segmentFileName(\r\n          state.segmentInfo.name, state.segmentSuffix, BLOOM_EXTENSION);\r\n      IndexInput bloomIn = null;\r\n      try {\r\n        bloomIn = state.dir.openInput(bloomFileName, state.context);\r\n        CodecUtil.checkHeader(bloomIn, BLOOM_CODEC_NAME, BLOOM_CODEC_VERSION,\r\n            BLOOM_CODEC_VERSION);\r\n        // // Load the hash function used in the BloomFilter\r\n        // hashFunction = HashFunction.forName(bloomIn.readString());\r\n        // Load the delegate postings format\r\n        PostingsFormat delegatePostingsFormat = PostingsFormat.forName(bloomIn\r\n            .readString());\r\n        \r\n        this.delegateFieldsProducer = delegatePostingsFormat\r\n            .fieldsProducer(state);\r\n        int numBlooms = bloomIn.readInt();\r\n        for (int i = 0; i < numBlooms; i++) {\r\n          int fieldNum = bloomIn.readInt();\r\n          FuzzySet bloom = FuzzySet.deserialize(bloomIn);\r\n          FieldInfo fieldInfo = state.fieldInfos.fieldInfo(fieldNum);\r\n          bloomsByFieldName.put(fieldInfo.name, bloom);\r\n        }\r\n      } finally {\r\n        IOUtils.close(bloomIn);\r\n      }\r\n      \r\n    }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d681ca1a1c487b2501ef9bde8602a65c4c717a46","date":1346078839,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/bloom/BloomFilteringPostingsFormat.BloomFilteredFieldsProducer#BloomFilteredFieldsProducer(SegmentReadState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/bloom/BloomFilteringPostingsFormat.BloomFilteredFieldsProducer#BloomFilteredFieldsProducer(SegmentReadState).mjava","sourceNew":"    public BloomFilteredFieldsProducer(SegmentReadState state)\n        throws IOException {\n      \n      String bloomFileName = IndexFileNames.segmentFileName(\n          state.segmentInfo.name, state.segmentSuffix, BLOOM_EXTENSION);\n      IndexInput bloomIn = null;\n      try {\n        bloomIn = state.dir.openInput(bloomFileName, state.context);\n        CodecUtil.checkHeader(bloomIn, BLOOM_CODEC_NAME, BLOOM_CODEC_VERSION,\n            BLOOM_CODEC_VERSION);\n        // // Load the hash function used in the BloomFilter\n        // hashFunction = HashFunction.forName(bloomIn.readString());\n        // Load the delegate postings format\n        PostingsFormat delegatePostingsFormat = PostingsFormat.forName(bloomIn\n            .readString());\n        \n        this.delegateFieldsProducer = delegatePostingsFormat\n            .fieldsProducer(state);\n        int numBlooms = bloomIn.readInt();\n        for (int i = 0; i < numBlooms; i++) {\n          int fieldNum = bloomIn.readInt();\n          FuzzySet bloom = FuzzySet.deserialize(bloomIn);\n          FieldInfo fieldInfo = state.fieldInfos.fieldInfo(fieldNum);\n          bloomsByFieldName.put(fieldInfo.name, bloom);\n        }\n      } finally {\n        IOUtils.close(bloomIn);\n      }\n      \n    }\n\n","sourceOld":"    public BloomFilteredFieldsProducer(SegmentReadState state)\r\n        throws IOException {\r\n      \r\n      String bloomFileName = IndexFileNames.segmentFileName(\r\n          state.segmentInfo.name, state.segmentSuffix, BLOOM_EXTENSION);\r\n      IndexInput bloomIn = null;\r\n      try {\r\n        bloomIn = state.dir.openInput(bloomFileName, state.context);\r\n        CodecUtil.checkHeader(bloomIn, BLOOM_CODEC_NAME, BLOOM_CODEC_VERSION,\r\n            BLOOM_CODEC_VERSION);\r\n        // // Load the hash function used in the BloomFilter\r\n        // hashFunction = HashFunction.forName(bloomIn.readString());\r\n        // Load the delegate postings format\r\n        PostingsFormat delegatePostingsFormat = PostingsFormat.forName(bloomIn\r\n            .readString());\r\n        \r\n        this.delegateFieldsProducer = delegatePostingsFormat\r\n            .fieldsProducer(state);\r\n        int numBlooms = bloomIn.readInt();\r\n        for (int i = 0; i < numBlooms; i++) {\r\n          int fieldNum = bloomIn.readInt();\r\n          FuzzySet bloom = FuzzySet.deserialize(bloomIn);\r\n          FieldInfo fieldInfo = state.fieldInfos.fieldInfo(fieldNum);\r\n          bloomsByFieldName.put(fieldInfo.name, bloom);\r\n        }\r\n      } finally {\r\n        IOUtils.close(bloomIn);\r\n      }\r\n      \r\n    }\r\n\n","bugFix":null,"bugIntro":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"05a14b2611ead08655a2b2bdc61632eb31316e57","date":1346366621,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/bloom/BloomFilteringPostingsFormat.BloomFilteredFieldsProducer#BloomFilteredFieldsProducer(SegmentReadState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/bloom/BloomFilteringPostingsFormat.BloomFilteredFieldsProducer#BloomFilteredFieldsProducer(SegmentReadState).mjava","sourceNew":"    public BloomFilteredFieldsProducer(SegmentReadState state)\n        throws IOException {\n      \n      String bloomFileName = IndexFileNames.segmentFileName(\n          state.segmentInfo.name, state.segmentSuffix, BLOOM_EXTENSION);\n      IndexInput bloomIn = null;\n      try {\n        bloomIn = state.dir.openInput(bloomFileName, state.context);\n        CodecUtil.checkHeader(bloomIn, BLOOM_CODEC_NAME, BLOOM_CODEC_VERSION,\n            BLOOM_CODEC_VERSION);\n        // // Load the hash function used in the BloomFilter\n        // hashFunction = HashFunction.forName(bloomIn.readString());\n        // Load the delegate postings format\n        PostingsFormat delegatePostingsFormat = PostingsFormat.forName(bloomIn\n            .readString());\n        \n        this.delegateFieldsProducer = delegatePostingsFormat\n            .fieldsProducer(state);\n        int numBlooms = bloomIn.readInt();\n        for (int i = 0; i < numBlooms; i++) {\n          int fieldNum = bloomIn.readInt();\n          FuzzySet bloom = FuzzySet.deserialize(bloomIn);\n          FieldInfo fieldInfo = state.fieldInfos.fieldInfo(fieldNum);\n          bloomsByFieldName.put(fieldInfo.name, bloom);\n        }\n      } finally {\n        IOUtils.close(bloomIn);\n      }\n      \n    }\n\n","sourceOld":"    public BloomFilteredFieldsProducer(SegmentReadState state)\r\n        throws IOException {\r\n      \r\n      String bloomFileName = IndexFileNames.segmentFileName(\r\n          state.segmentInfo.name, state.segmentSuffix, BLOOM_EXTENSION);\r\n      IndexInput bloomIn = null;\r\n      try {\r\n        bloomIn = state.dir.openInput(bloomFileName, state.context);\r\n        CodecUtil.checkHeader(bloomIn, BLOOM_CODEC_NAME, BLOOM_CODEC_VERSION,\r\n            BLOOM_CODEC_VERSION);\r\n        // // Load the hash function used in the BloomFilter\r\n        // hashFunction = HashFunction.forName(bloomIn.readString());\r\n        // Load the delegate postings format\r\n        PostingsFormat delegatePostingsFormat = PostingsFormat.forName(bloomIn\r\n            .readString());\r\n        \r\n        this.delegateFieldsProducer = delegatePostingsFormat\r\n            .fieldsProducer(state);\r\n        int numBlooms = bloomIn.readInt();\r\n        for (int i = 0; i < numBlooms; i++) {\r\n          int fieldNum = bloomIn.readInt();\r\n          FuzzySet bloom = FuzzySet.deserialize(bloomIn);\r\n          FieldInfo fieldInfo = state.fieldInfos.fieldInfo(fieldNum);\r\n          bloomsByFieldName.put(fieldInfo.name, bloom);\r\n        }\r\n      } finally {\r\n        IOUtils.close(bloomIn);\r\n      }\r\n      \r\n    }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2","date":1346834651,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/bloom/BloomFilteringPostingsFormat.BloomFilteredFieldsProducer#BloomFilteredFieldsProducer(SegmentReadState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/bloom/BloomFilteringPostingsFormat.BloomFilteredFieldsProducer#BloomFilteredFieldsProducer(SegmentReadState).mjava","sourceNew":"    public BloomFilteredFieldsProducer(SegmentReadState state)\n        throws IOException {\n      \n      String bloomFileName = IndexFileNames.segmentFileName(\n          state.segmentInfo.name, state.segmentSuffix, BLOOM_EXTENSION);\n      IndexInput bloomIn = null;\n      try {\n        bloomIn = state.dir.openInput(bloomFileName, state.context);\n        CodecUtil.checkHeader(bloomIn, BLOOM_CODEC_NAME, BLOOM_CODEC_VERSION,\n            BLOOM_CODEC_VERSION);\n        // // Load the hash function used in the BloomFilter\n        // hashFunction = HashFunction.forName(bloomIn.readString());\n        // Load the delegate postings format\n        PostingsFormat delegatePostingsFormat = PostingsFormat.forName(bloomIn\n            .readString());\n        \n        this.delegateFieldsProducer = delegatePostingsFormat\n            .fieldsProducer(state);\n        int numBlooms = bloomIn.readInt();\n        for (int i = 0; i < numBlooms; i++) {\n          int fieldNum = bloomIn.readInt();\n          FuzzySet bloom = FuzzySet.deserialize(bloomIn);\n          FieldInfo fieldInfo = state.fieldInfos.fieldInfo(fieldNum);\n          bloomsByFieldName.put(fieldInfo.name, bloom);\n        }\n      } finally {\n        IOUtils.close(bloomIn);\n      }\n      \n    }\n\n","sourceOld":"    public BloomFilteredFieldsProducer(SegmentReadState state)\n        throws IOException {\n      \n      String bloomFileName = IndexFileNames.segmentFileName(\n          state.segmentInfo.name, state.segmentSuffix, BLOOM_EXTENSION);\n      IndexInput bloomIn = null;\n      try {\n        bloomIn = state.dir.openInput(bloomFileName, state.context);\n        CodecUtil.checkHeader(bloomIn, BLOOM_CODEC_NAME, BLOOM_CODEC_VERSION,\n            BLOOM_CODEC_VERSION);\n        // // Load the hash function used in the BloomFilter\n        // hashFunction = HashFunction.forName(bloomIn.readString());\n        // Load the delegate postings format\n        PostingsFormat delegatePostingsFormat = PostingsFormat.forName(bloomIn\n            .readString());\n        \n        this.delegateFieldsProducer = delegatePostingsFormat\n            .fieldsProducer(state);\n        int numBlooms = bloomIn.readInt();\n        for (int i = 0; i < numBlooms; i++) {\n          int fieldNum = bloomIn.readInt();\n          FuzzySet bloom = FuzzySet.deserialize(bloomIn);\n          FieldInfo fieldInfo = state.fieldInfos.fieldInfo(fieldNum);\n          bloomsByFieldName.put(fieldInfo.name, bloom);\n        }\n      } finally {\n        IOUtils.close(bloomIn);\n      }\n      \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"d681ca1a1c487b2501ef9bde8602a65c4c717a46":["0274c27988a26cb0cda3a0d15b282221b1b453f0"],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["d681ca1a1c487b2501ef9bde8602a65c4c717a46"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0274c27988a26cb0cda3a0d15b282221b1b453f0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0274c27988a26cb0cda3a0d15b282221b1b453f0"],"8fd5be977c105554c6a7b68afcdbc511439723ab":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0274c27988a26cb0cda3a0d15b282221b1b453f0"],"05a14b2611ead08655a2b2bdc61632eb31316e57":["d6f074e73200c07d54f242d3880a8da5a35ff97b","d681ca1a1c487b2501ef9bde8602a65c4c717a46"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"]},"commit2Childs":{"d681ca1a1c487b2501ef9bde8602a65c4c717a46":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2","05a14b2611ead08655a2b2bdc61632eb31316e57"],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0274c27988a26cb0cda3a0d15b282221b1b453f0","d6f074e73200c07d54f242d3880a8da5a35ff97b","8fd5be977c105554c6a7b68afcdbc511439723ab"],"0274c27988a26cb0cda3a0d15b282221b1b453f0":["d681ca1a1c487b2501ef9bde8602a65c4c717a46","d6f074e73200c07d54f242d3880a8da5a35ff97b","8fd5be977c105554c6a7b68afcdbc511439723ab"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["05a14b2611ead08655a2b2bdc61632eb31316e57"],"8fd5be977c105554c6a7b68afcdbc511439723ab":[],"05a14b2611ead08655a2b2bdc61632eb31316e57":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8fd5be977c105554c6a7b68afcdbc511439723ab","05a14b2611ead08655a2b2bdc61632eb31316e57","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}