{"path":"solr/core/src/java/org/apache/solr/util/SolrCLI.AuthTool#handleBasicAuth(CommandLine).mjava","commits":[{"id":"6e12ffe0fc2f16d13edb8f82cd33da7cbedda264","date":1499421663,"type":0,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.AuthTool#handleBasicAuth(CommandLine).mjava","pathOld":"/dev/null","sourceNew":"    private int handleBasicAuth(CommandLine cli) throws Exception {\n      String cmd = cli.getArgs()[0];\n      boolean prompt = Boolean.parseBoolean(cli.getOptionValue(\"prompt\", \"false\"));\n      boolean updateIncludeFileOnly = Boolean.parseBoolean(cli.getOptionValue(\"updateIncludeFileOnly\", \"false\"));\n      switch (cmd) {\n        case \"enable\":\n          if (!prompt && !cli.hasOption(\"credentials\")) {\n            System.out.println(\"Option -credentials or -prompt is required with enable.\");\n            new HelpFormatter().printHelp(\"bin/solr auth <enable|disable> [OPTIONS]\", getToolOptions(this));\n            exit(1);\n          } else if (!prompt && (cli.getOptionValue(\"credentials\") == null || !cli.getOptionValue(\"credentials\").contains(\":\"))) {\n            System.out.println(\"Option -credentials is not in correct format.\");\n            new HelpFormatter().printHelp(\"bin/solr auth <enable|disable> [OPTIONS]\", getToolOptions(this));\n            exit(1);\n          }\n\n          String zkHost = null;\n\n          if (!updateIncludeFileOnly) {\n            try {\n              zkHost = getZkHost(cli);\n            } catch (Exception ex) {\n              if (cli.hasOption(\"zkHost\")) {\n                System.out.println(\"Couldn't get ZooKeeper host. Please make sure that ZooKeeper is running and the correct zkHost has been passed in.\");\n              } else {\n                System.out.println(\"Couldn't get ZooKeeper host. Please make sure Solr is running in cloud mode, or a zkHost has been passed in.\");\n              }\n              exit(1);\n            }\n            if (zkHost == null) {\n              if (cli.hasOption(\"zkHost\")) {\n                System.out.println(\"Couldn't get ZooKeeper host. Please make sure that ZooKeeper is running and the correct zkHost has been passed in.\");\n              } else {\n                System.out.println(\"Couldn't get ZooKeeper host. Please make sure Solr is running in cloud mode, or a zkHost has been passed in.\");\n              }\n              exit(1);\n            }\n\n            // check if security is already enabled or not\n            try (SolrZkClient zkClient = new SolrZkClient(zkHost, 10000)) {\n              if (zkClient.exists(\"/security.json\", true)) {\n                byte oldSecurityBytes[] = zkClient.getData(\"/security.json\", null, null, true);\n                if (!\"{}\".equals(new String(oldSecurityBytes, StandardCharsets.UTF_8).trim())) {\n                  System.out.println(\"Security is already enabled. You can disable it with 'bin/solr auth disable'. Existing security.json: \\n\"\n                      + new String(oldSecurityBytes, StandardCharsets.UTF_8));\n                  exit(1);\n                }\n              }\n            }\n          }\n\n          String username, password;\n          if (cli.hasOption(\"credentials\")) {\n            String credentials = cli.getOptionValue(\"credentials\");\n            username = credentials.split(\":\")[0];\n            password = credentials.split(\":\")[1];\n          } else {\n            Console console = System.console();\n            username = console.readLine(\"Enter username: \");\n            password = new String(console.readPassword(\"Enter password: \"));\n          }\n\n          boolean blockUnknown = Boolean.valueOf(cli.getOptionValue(\"blockUnknown\", \"false\"));\n\n          String securityJson = \"{\" +\n              \"\\n  \\\"authentication\\\":{\" +\n              \"\\n   \\\"blockUnknown\\\": \" + blockUnknown + \",\" +\n              \"\\n   \\\"class\\\":\\\"solr.BasicAuthPlugin\\\",\" +\n              \"\\n   \\\"credentials\\\":{\\\"\" + username + \"\\\":\\\"\" + Sha256AuthenticationProvider.getSaltedHashedValue(password) + \"\\\"}\" +\n              \"\\n  },\" +\n              \"\\n  \\\"authorization\\\":{\" +\n              \"\\n   \\\"class\\\":\\\"solr.RuleBasedAuthorizationPlugin\\\",\" +\n              \"\\n   \\\"permissions\\\":[\" +\n              \"\\n {\\\"name\\\":\\\"security-edit\\\", \\\"role\\\":\\\"admin\\\"},\" +\n              \"\\n {\\\"name\\\":\\\"collection-admin-edit\\\", \\\"role\\\":\\\"admin\\\"},\" +\n              \"\\n {\\\"name\\\":\\\"core-admin-edit\\\", \\\"role\\\":\\\"admin\\\"}\" +\n              \"\\n   ],\" +\n              \"\\n   \\\"user-role\\\":{\\\"\" + username + \"\\\":\\\"admin\\\"}\" +\n              \"\\n  }\" +\n              \"\\n}\";\n\n          if (!updateIncludeFileOnly) {\n            System.out.println(\"Uploading following security.json: \" + securityJson);\n            try (SolrZkClient zkClient = new SolrZkClient(zkHost, 10000)) {\n              zkClient.setData(\"/security.json\", securityJson.getBytes(StandardCharsets.UTF_8), true);\n            }\n          }\n\n          String solrIncludeFilename = cli.getOptionValue(\"solrIncludeFile\");\n          File includeFile = new File(solrIncludeFilename);\n          if (includeFile.exists() == false || includeFile.canWrite() == false) {\n            System.out.println(\"Solr include file \" + solrIncludeFilename + \" doesn't exist or is not writeable.\");\n            printAuthEnablingInstructions(username, password);\n            System.exit(0);\n          }\n          String authConfDir = cli.getOptionValue(\"authConfDir\");\n          File basicAuthConfFile = new File(authConfDir + File.separator + \"basicAuth.conf\");\n\n          if (basicAuthConfFile.getParentFile().canWrite() == false) {\n            System.out.println(\"Cannot write to file: \" + basicAuthConfFile.getAbsolutePath());\n            printAuthEnablingInstructions(username, password);\n            System.exit(0);\n          }\n\n          FileUtils.writeStringToFile(basicAuthConfFile,\n              \"httpBasicAuthUser=\" + username + \"\\nhttpBasicAuthPassword=\" + password, StandardCharsets.UTF_8);\n\n          // update the solr.in.sh file to contain the necessary authentication lines\n          updateIncludeFileEnableAuth(includeFile, basicAuthConfFile.getAbsolutePath(), null);\n          return 0;\n\n        case \"disable\":\n          if (!updateIncludeFileOnly) {\n            zkHost = getZkHost(cli);\n            if (zkHost == null) {\n              stdout.print(\"ZK Host not found. Solr should be running in cloud mode\");\n              exit(1);\n            }\n\n            System.out.println(\"Uploading following security.json: {}\");\n\n            try (SolrZkClient zkClient = new SolrZkClient(zkHost, 10000)) {\n              zkClient.setData(\"/security.json\", \"{}\".getBytes(StandardCharsets.UTF_8), true);\n            }\n          }\n\n          solrIncludeFilename = cli.getOptionValue(\"solrIncludeFile\");\n          includeFile = new File(solrIncludeFilename);\n          if (!includeFile.exists() || !includeFile.canWrite()) {\n            System.out.println(\"Solr include file \" + solrIncludeFilename + \" doesn't exist or is not writeable.\");\n            System.out.println(\"Security has been disabled. Please remove any SOLR_AUTH_TYPE or SOLR_AUTHENTICATION_OPTS configuration from solr.in.sh/solr.in.cmd.\\n\");\n            System.exit(0);\n          }\n\n          // update the solr.in.sh file to comment out the necessary authentication lines\n          updateIncludeFileDisableAuth(includeFile);\n          return 0;\n\n        default:\n          System.out.println(\"Valid auth commands are: enable, disable\");\n          exit(1);\n      }\n\n      System.out.println(\"Options not understood.\");\n      new HelpFormatter().printHelp(\"bin/solr auth <enable|disable> [OPTIONS]\", getToolOptions(this));\n      return 1;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f9a989a32a073c55e3aef6f807a3474184bbcf49","date":1499930209,"type":0,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.AuthTool#handleBasicAuth(CommandLine).mjava","pathOld":"/dev/null","sourceNew":"    private int handleBasicAuth(CommandLine cli) throws Exception {\n      String cmd = cli.getArgs()[0];\n      boolean prompt = Boolean.parseBoolean(cli.getOptionValue(\"prompt\", \"false\"));\n      boolean updateIncludeFileOnly = Boolean.parseBoolean(cli.getOptionValue(\"updateIncludeFileOnly\", \"false\"));\n      switch (cmd) {\n        case \"enable\":\n          if (!prompt && !cli.hasOption(\"credentials\")) {\n            System.out.println(\"Option -credentials or -prompt is required with enable.\");\n            new HelpFormatter().printHelp(\"bin/solr auth <enable|disable> [OPTIONS]\", getToolOptions(this));\n            exit(1);\n          } else if (!prompt && (cli.getOptionValue(\"credentials\") == null || !cli.getOptionValue(\"credentials\").contains(\":\"))) {\n            System.out.println(\"Option -credentials is not in correct format.\");\n            new HelpFormatter().printHelp(\"bin/solr auth <enable|disable> [OPTIONS]\", getToolOptions(this));\n            exit(1);\n          }\n\n          String zkHost = null;\n\n          if (!updateIncludeFileOnly) {\n            try {\n              zkHost = getZkHost(cli);\n            } catch (Exception ex) {\n              if (cli.hasOption(\"zkHost\")) {\n                System.out.println(\"Couldn't get ZooKeeper host. Please make sure that ZooKeeper is running and the correct zkHost has been passed in.\");\n              } else {\n                System.out.println(\"Couldn't get ZooKeeper host. Please make sure Solr is running in cloud mode, or a zkHost has been passed in.\");\n              }\n              exit(1);\n            }\n            if (zkHost == null) {\n              if (cli.hasOption(\"zkHost\")) {\n                System.out.println(\"Couldn't get ZooKeeper host. Please make sure that ZooKeeper is running and the correct zkHost has been passed in.\");\n              } else {\n                System.out.println(\"Couldn't get ZooKeeper host. Please make sure Solr is running in cloud mode, or a zkHost has been passed in.\");\n              }\n              exit(1);\n            }\n\n            // check if security is already enabled or not\n            try (SolrZkClient zkClient = new SolrZkClient(zkHost, 10000)) {\n              if (zkClient.exists(\"/security.json\", true)) {\n                byte oldSecurityBytes[] = zkClient.getData(\"/security.json\", null, null, true);\n                if (!\"{}\".equals(new String(oldSecurityBytes, StandardCharsets.UTF_8).trim())) {\n                  System.out.println(\"Security is already enabled. You can disable it with 'bin/solr auth disable'. Existing security.json: \\n\"\n                      + new String(oldSecurityBytes, StandardCharsets.UTF_8));\n                  exit(1);\n                }\n              }\n            }\n          }\n\n          String username, password;\n          if (cli.hasOption(\"credentials\")) {\n            String credentials = cli.getOptionValue(\"credentials\");\n            username = credentials.split(\":\")[0];\n            password = credentials.split(\":\")[1];\n          } else {\n            Console console = System.console();\n            username = console.readLine(\"Enter username: \");\n            password = new String(console.readPassword(\"Enter password: \"));\n          }\n\n          boolean blockUnknown = Boolean.valueOf(cli.getOptionValue(\"blockUnknown\", \"false\"));\n\n          String securityJson = \"{\" +\n              \"\\n  \\\"authentication\\\":{\" +\n              \"\\n   \\\"blockUnknown\\\": \" + blockUnknown + \",\" +\n              \"\\n   \\\"class\\\":\\\"solr.BasicAuthPlugin\\\",\" +\n              \"\\n   \\\"credentials\\\":{\\\"\" + username + \"\\\":\\\"\" + Sha256AuthenticationProvider.getSaltedHashedValue(password) + \"\\\"}\" +\n              \"\\n  },\" +\n              \"\\n  \\\"authorization\\\":{\" +\n              \"\\n   \\\"class\\\":\\\"solr.RuleBasedAuthorizationPlugin\\\",\" +\n              \"\\n   \\\"permissions\\\":[\" +\n              \"\\n {\\\"name\\\":\\\"security-edit\\\", \\\"role\\\":\\\"admin\\\"},\" +\n              \"\\n {\\\"name\\\":\\\"collection-admin-edit\\\", \\\"role\\\":\\\"admin\\\"},\" +\n              \"\\n {\\\"name\\\":\\\"core-admin-edit\\\", \\\"role\\\":\\\"admin\\\"}\" +\n              \"\\n   ],\" +\n              \"\\n   \\\"user-role\\\":{\\\"\" + username + \"\\\":\\\"admin\\\"}\" +\n              \"\\n  }\" +\n              \"\\n}\";\n\n          if (!updateIncludeFileOnly) {\n            System.out.println(\"Uploading following security.json: \" + securityJson);\n            try (SolrZkClient zkClient = new SolrZkClient(zkHost, 10000)) {\n              zkClient.setData(\"/security.json\", securityJson.getBytes(StandardCharsets.UTF_8), true);\n            }\n          }\n\n          String solrIncludeFilename = cli.getOptionValue(\"solrIncludeFile\");\n          File includeFile = new File(solrIncludeFilename);\n          if (includeFile.exists() == false || includeFile.canWrite() == false) {\n            System.out.println(\"Solr include file \" + solrIncludeFilename + \" doesn't exist or is not writeable.\");\n            printAuthEnablingInstructions(username, password);\n            System.exit(0);\n          }\n          String authConfDir = cli.getOptionValue(\"authConfDir\");\n          File basicAuthConfFile = new File(authConfDir + File.separator + \"basicAuth.conf\");\n\n          if (basicAuthConfFile.getParentFile().canWrite() == false) {\n            System.out.println(\"Cannot write to file: \" + basicAuthConfFile.getAbsolutePath());\n            printAuthEnablingInstructions(username, password);\n            System.exit(0);\n          }\n\n          FileUtils.writeStringToFile(basicAuthConfFile,\n              \"httpBasicAuthUser=\" + username + \"\\nhttpBasicAuthPassword=\" + password, StandardCharsets.UTF_8);\n\n          // update the solr.in.sh file to contain the necessary authentication lines\n          updateIncludeFileEnableAuth(includeFile, basicAuthConfFile.getAbsolutePath(), null);\n          return 0;\n\n        case \"disable\":\n          if (!updateIncludeFileOnly) {\n            zkHost = getZkHost(cli);\n            if (zkHost == null) {\n              stdout.print(\"ZK Host not found. Solr should be running in cloud mode\");\n              exit(1);\n            }\n\n            System.out.println(\"Uploading following security.json: {}\");\n\n            try (SolrZkClient zkClient = new SolrZkClient(zkHost, 10000)) {\n              zkClient.setData(\"/security.json\", \"{}\".getBytes(StandardCharsets.UTF_8), true);\n            }\n          }\n\n          solrIncludeFilename = cli.getOptionValue(\"solrIncludeFile\");\n          includeFile = new File(solrIncludeFilename);\n          if (!includeFile.exists() || !includeFile.canWrite()) {\n            System.out.println(\"Solr include file \" + solrIncludeFilename + \" doesn't exist or is not writeable.\");\n            System.out.println(\"Security has been disabled. Please remove any SOLR_AUTH_TYPE or SOLR_AUTHENTICATION_OPTS configuration from solr.in.sh/solr.in.cmd.\\n\");\n            System.exit(0);\n          }\n\n          // update the solr.in.sh file to comment out the necessary authentication lines\n          updateIncludeFileDisableAuth(includeFile);\n          return 0;\n\n        default:\n          System.out.println(\"Valid auth commands are: enable, disable\");\n          exit(1);\n      }\n\n      System.out.println(\"Options not understood.\");\n      new HelpFormatter().printHelp(\"bin/solr auth <enable|disable> [OPTIONS]\", getToolOptions(this));\n      return 1;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb569fd721c41eafc2a2d788499a7df490c7f1a5","date":1499930871,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.AuthTool#handleBasicAuth(CommandLine).mjava","pathOld":"/dev/null","sourceNew":"    private int handleBasicAuth(CommandLine cli) throws Exception {\n      String cmd = cli.getArgs()[0];\n      boolean prompt = Boolean.parseBoolean(cli.getOptionValue(\"prompt\", \"false\"));\n      boolean updateIncludeFileOnly = Boolean.parseBoolean(cli.getOptionValue(\"updateIncludeFileOnly\", \"false\"));\n      switch (cmd) {\n        case \"enable\":\n          if (!prompt && !cli.hasOption(\"credentials\")) {\n            System.out.println(\"Option -credentials or -prompt is required with enable.\");\n            new HelpFormatter().printHelp(\"bin/solr auth <enable|disable> [OPTIONS]\", getToolOptions(this));\n            exit(1);\n          } else if (!prompt && (cli.getOptionValue(\"credentials\") == null || !cli.getOptionValue(\"credentials\").contains(\":\"))) {\n            System.out.println(\"Option -credentials is not in correct format.\");\n            new HelpFormatter().printHelp(\"bin/solr auth <enable|disable> [OPTIONS]\", getToolOptions(this));\n            exit(1);\n          }\n\n          String zkHost = null;\n\n          if (!updateIncludeFileOnly) {\n            try {\n              zkHost = getZkHost(cli);\n            } catch (Exception ex) {\n              if (cli.hasOption(\"zkHost\")) {\n                System.out.println(\"Couldn't get ZooKeeper host. Please make sure that ZooKeeper is running and the correct zkHost has been passed in.\");\n              } else {\n                System.out.println(\"Couldn't get ZooKeeper host. Please make sure Solr is running in cloud mode, or a zkHost has been passed in.\");\n              }\n              exit(1);\n            }\n            if (zkHost == null) {\n              if (cli.hasOption(\"zkHost\")) {\n                System.out.println(\"Couldn't get ZooKeeper host. Please make sure that ZooKeeper is running and the correct zkHost has been passed in.\");\n              } else {\n                System.out.println(\"Couldn't get ZooKeeper host. Please make sure Solr is running in cloud mode, or a zkHost has been passed in.\");\n              }\n              exit(1);\n            }\n\n            // check if security is already enabled or not\n            try (SolrZkClient zkClient = new SolrZkClient(zkHost, 10000)) {\n              if (zkClient.exists(\"/security.json\", true)) {\n                byte oldSecurityBytes[] = zkClient.getData(\"/security.json\", null, null, true);\n                if (!\"{}\".equals(new String(oldSecurityBytes, StandardCharsets.UTF_8).trim())) {\n                  System.out.println(\"Security is already enabled. You can disable it with 'bin/solr auth disable'. Existing security.json: \\n\"\n                      + new String(oldSecurityBytes, StandardCharsets.UTF_8));\n                  exit(1);\n                }\n              }\n            }\n          }\n\n          String username, password;\n          if (cli.hasOption(\"credentials\")) {\n            String credentials = cli.getOptionValue(\"credentials\");\n            username = credentials.split(\":\")[0];\n            password = credentials.split(\":\")[1];\n          } else {\n            Console console = System.console();\n            username = console.readLine(\"Enter username: \");\n            password = new String(console.readPassword(\"Enter password: \"));\n          }\n\n          boolean blockUnknown = Boolean.valueOf(cli.getOptionValue(\"blockUnknown\", \"false\"));\n\n          String securityJson = \"{\" +\n              \"\\n  \\\"authentication\\\":{\" +\n              \"\\n   \\\"blockUnknown\\\": \" + blockUnknown + \",\" +\n              \"\\n   \\\"class\\\":\\\"solr.BasicAuthPlugin\\\",\" +\n              \"\\n   \\\"credentials\\\":{\\\"\" + username + \"\\\":\\\"\" + Sha256AuthenticationProvider.getSaltedHashedValue(password) + \"\\\"}\" +\n              \"\\n  },\" +\n              \"\\n  \\\"authorization\\\":{\" +\n              \"\\n   \\\"class\\\":\\\"solr.RuleBasedAuthorizationPlugin\\\",\" +\n              \"\\n   \\\"permissions\\\":[\" +\n              \"\\n {\\\"name\\\":\\\"security-edit\\\", \\\"role\\\":\\\"admin\\\"},\" +\n              \"\\n {\\\"name\\\":\\\"collection-admin-edit\\\", \\\"role\\\":\\\"admin\\\"},\" +\n              \"\\n {\\\"name\\\":\\\"core-admin-edit\\\", \\\"role\\\":\\\"admin\\\"}\" +\n              \"\\n   ],\" +\n              \"\\n   \\\"user-role\\\":{\\\"\" + username + \"\\\":\\\"admin\\\"}\" +\n              \"\\n  }\" +\n              \"\\n}\";\n\n          if (!updateIncludeFileOnly) {\n            System.out.println(\"Uploading following security.json: \" + securityJson);\n            try (SolrZkClient zkClient = new SolrZkClient(zkHost, 10000)) {\n              zkClient.setData(\"/security.json\", securityJson.getBytes(StandardCharsets.UTF_8), true);\n            }\n          }\n\n          String solrIncludeFilename = cli.getOptionValue(\"solrIncludeFile\");\n          File includeFile = new File(solrIncludeFilename);\n          if (includeFile.exists() == false || includeFile.canWrite() == false) {\n            System.out.println(\"Solr include file \" + solrIncludeFilename + \" doesn't exist or is not writeable.\");\n            printAuthEnablingInstructions(username, password);\n            System.exit(0);\n          }\n          String authConfDir = cli.getOptionValue(\"authConfDir\");\n          File basicAuthConfFile = new File(authConfDir + File.separator + \"basicAuth.conf\");\n\n          if (basicAuthConfFile.getParentFile().canWrite() == false) {\n            System.out.println(\"Cannot write to file: \" + basicAuthConfFile.getAbsolutePath());\n            printAuthEnablingInstructions(username, password);\n            System.exit(0);\n          }\n\n          FileUtils.writeStringToFile(basicAuthConfFile,\n              \"httpBasicAuthUser=\" + username + \"\\nhttpBasicAuthPassword=\" + password, StandardCharsets.UTF_8);\n\n          // update the solr.in.sh file to contain the necessary authentication lines\n          updateIncludeFileEnableAuth(includeFile, basicAuthConfFile.getAbsolutePath(), null);\n          return 0;\n\n        case \"disable\":\n          if (!updateIncludeFileOnly) {\n            zkHost = getZkHost(cli);\n            if (zkHost == null) {\n              stdout.print(\"ZK Host not found. Solr should be running in cloud mode\");\n              exit(1);\n            }\n\n            System.out.println(\"Uploading following security.json: {}\");\n\n            try (SolrZkClient zkClient = new SolrZkClient(zkHost, 10000)) {\n              zkClient.setData(\"/security.json\", \"{}\".getBytes(StandardCharsets.UTF_8), true);\n            }\n          }\n\n          solrIncludeFilename = cli.getOptionValue(\"solrIncludeFile\");\n          includeFile = new File(solrIncludeFilename);\n          if (!includeFile.exists() || !includeFile.canWrite()) {\n            System.out.println(\"Solr include file \" + solrIncludeFilename + \" doesn't exist or is not writeable.\");\n            System.out.println(\"Security has been disabled. Please remove any SOLR_AUTH_TYPE or SOLR_AUTHENTICATION_OPTS configuration from solr.in.sh/solr.in.cmd.\\n\");\n            System.exit(0);\n          }\n\n          // update the solr.in.sh file to comment out the necessary authentication lines\n          updateIncludeFileDisableAuth(includeFile);\n          return 0;\n\n        default:\n          System.out.println(\"Valid auth commands are: enable, disable\");\n          exit(1);\n      }\n\n      System.out.println(\"Options not understood.\");\n      new HelpFormatter().printHelp(\"bin/solr auth <enable|disable> [OPTIONS]\", getToolOptions(this));\n      return 1;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a7809d1d753b67f48b1a706e17034bf8b624ea3","date":1504366927,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.AuthTool#handleBasicAuth(CommandLine).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.AuthTool#handleBasicAuth(CommandLine).mjava","sourceNew":"    private int handleBasicAuth(CommandLine cli) throws Exception {\n      String cmd = cli.getArgs()[0];\n      boolean prompt = Boolean.parseBoolean(cli.getOptionValue(\"prompt\", \"false\"));\n      boolean updateIncludeFileOnly = Boolean.parseBoolean(cli.getOptionValue(\"updateIncludeFileOnly\", \"false\"));\n      switch (cmd) {\n        case \"enable\":\n          if (!prompt && !cli.hasOption(\"credentials\")) {\n            System.out.println(\"Option -credentials or -prompt is required with enable.\");\n            new HelpFormatter().printHelp(\"bin/solr auth <enable|disable> [OPTIONS]\", getToolOptions(this));\n            exit(1);\n          } else if (!prompt && (cli.getOptionValue(\"credentials\") == null || !cli.getOptionValue(\"credentials\").contains(\":\"))) {\n            System.out.println(\"Option -credentials is not in correct format.\");\n            new HelpFormatter().printHelp(\"bin/solr auth <enable|disable> [OPTIONS]\", getToolOptions(this));\n            exit(1);\n          }\n\n          String zkHost = null;\n\n          if (!updateIncludeFileOnly) {\n            try {\n              zkHost = getZkHost(cli);\n            } catch (Exception ex) {\n              if (cli.hasOption(\"zkHost\")) {\n                System.out.println(\"Couldn't get ZooKeeper host. Please make sure that ZooKeeper is running and the correct zkHost has been passed in.\");\n              } else {\n                System.out.println(\"Couldn't get ZooKeeper host. Please make sure Solr is running in cloud mode, or a zkHost has been passed in.\");\n              }\n              exit(1);\n            }\n            if (zkHost == null) {\n              if (cli.hasOption(\"zkHost\")) {\n                System.out.println(\"Couldn't get ZooKeeper host. Please make sure that ZooKeeper is running and the correct zkHost has been passed in.\");\n              } else {\n                System.out.println(\"Couldn't get ZooKeeper host. Please make sure Solr is running in cloud mode, or a zkHost has been passed in.\");\n              }\n              exit(1);\n            }\n\n            // check if security is already enabled or not\n            try (SolrZkClient zkClient = new SolrZkClient(zkHost, 10000)) {\n              if (zkClient.exists(\"/security.json\", true)) {\n                byte oldSecurityBytes[] = zkClient.getData(\"/security.json\", null, null, true);\n                if (!\"{}\".equals(new String(oldSecurityBytes, StandardCharsets.UTF_8).trim())) {\n                  System.out.println(\"Security is already enabled. You can disable it with 'bin/solr auth disable'. Existing security.json: \\n\"\n                      + new String(oldSecurityBytes, StandardCharsets.UTF_8));\n                  exit(1);\n                }\n              }\n            }\n          }\n\n          String username, password;\n          if (cli.hasOption(\"credentials\")) {\n            String credentials = cli.getOptionValue(\"credentials\");\n            username = credentials.split(\":\")[0];\n            password = credentials.split(\":\")[1];\n          } else {\n            Console console = System.console();\n            username = console.readLine(\"Enter username: \");\n            password = new String(console.readPassword(\"Enter password: \"));\n          }\n\n          boolean blockUnknown = Boolean.valueOf(cli.getOptionValue(\"blockUnknown\", \"false\"));\n\n          String securityJson = \"{\" +\n              \"\\n  \\\"authentication\\\":{\" +\n              \"\\n   \\\"blockUnknown\\\": \" + blockUnknown + \",\" +\n              \"\\n   \\\"class\\\":\\\"solr.BasicAuthPlugin\\\",\" +\n              \"\\n   \\\"credentials\\\":{\\\"\" + username + \"\\\":\\\"\" + Sha256AuthenticationProvider.getSaltedHashedValue(password) + \"\\\"}\" +\n              \"\\n  },\" +\n              \"\\n  \\\"authorization\\\":{\" +\n              \"\\n   \\\"class\\\":\\\"solr.RuleBasedAuthorizationPlugin\\\",\" +\n              \"\\n   \\\"permissions\\\":[\" +\n              \"\\n {\\\"name\\\":\\\"security-edit\\\", \\\"role\\\":\\\"admin\\\"},\" +\n              \"\\n {\\\"name\\\":\\\"collection-admin-edit\\\", \\\"role\\\":\\\"admin\\\"},\" +\n              \"\\n {\\\"name\\\":\\\"core-admin-edit\\\", \\\"role\\\":\\\"admin\\\"}\" +\n              \"\\n   ],\" +\n              \"\\n   \\\"user-role\\\":{\\\"\" + username + \"\\\":\\\"admin\\\"}\" +\n              \"\\n  }\" +\n              \"\\n}\";\n\n          if (!updateIncludeFileOnly) {\n            echoIfVerbose(\"Uploading following security.json: \" + securityJson, cli);\n            try (SolrZkClient zkClient = new SolrZkClient(zkHost, 10000)) {\n              zkClient.setData(\"/security.json\", securityJson.getBytes(StandardCharsets.UTF_8), true);\n            }\n          }\n\n          String solrIncludeFilename = cli.getOptionValue(\"solrIncludeFile\");\n          File includeFile = new File(solrIncludeFilename);\n          if (includeFile.exists() == false || includeFile.canWrite() == false) {\n            System.out.println(\"Solr include file \" + solrIncludeFilename + \" doesn't exist or is not writeable.\");\n            printAuthEnablingInstructions(username, password);\n            System.exit(0);\n          }\n          String authConfDir = cli.getOptionValue(\"authConfDir\");\n          File basicAuthConfFile = new File(authConfDir + File.separator + \"basicAuth.conf\");\n\n          if (basicAuthConfFile.getParentFile().canWrite() == false) {\n            System.out.println(\"Cannot write to file: \" + basicAuthConfFile.getAbsolutePath());\n            printAuthEnablingInstructions(username, password);\n            System.exit(0);\n          }\n\n          FileUtils.writeStringToFile(basicAuthConfFile,\n              \"httpBasicAuthUser=\" + username + \"\\nhttpBasicAuthPassword=\" + password, StandardCharsets.UTF_8);\n\n          // update the solr.in.sh file to contain the necessary authentication lines\n          updateIncludeFileEnableAuth(includeFile, basicAuthConfFile.getAbsolutePath(), null, cli);\n          final String successMessage = String.format(Locale.ROOT,\n              \"Successfully enabled basic auth with username [%s] and password [%s].\", username, password);\n          echo(successMessage);\n          return 0;\n\n        case \"disable\":\n          if (!updateIncludeFileOnly) {\n            zkHost = getZkHost(cli);\n            if (zkHost == null) {\n              stdout.print(\"ZK Host not found. Solr should be running in cloud mode\");\n              exit(1);\n            }\n\n            echoIfVerbose(\"Uploading following security.json: {}\", cli);\n\n            try (SolrZkClient zkClient = new SolrZkClient(zkHost, 10000)) {\n              zkClient.setData(\"/security.json\", \"{}\".getBytes(StandardCharsets.UTF_8), true);\n            }\n          }\n\n          solrIncludeFilename = cli.getOptionValue(\"solrIncludeFile\");\n          includeFile = new File(solrIncludeFilename);\n          if (!includeFile.exists() || !includeFile.canWrite()) {\n            System.out.println(\"Solr include file \" + solrIncludeFilename + \" doesn't exist or is not writeable.\");\n            System.out.println(\"Security has been disabled. Please remove any SOLR_AUTH_TYPE or SOLR_AUTHENTICATION_OPTS configuration from solr.in.sh/solr.in.cmd.\\n\");\n            System.exit(0);\n          }\n\n          // update the solr.in.sh file to comment out the necessary authentication lines\n          updateIncludeFileDisableAuth(includeFile, cli);\n          return 0;\n\n        default:\n          System.out.println(\"Valid auth commands are: enable, disable\");\n          exit(1);\n      }\n\n      System.out.println(\"Options not understood.\");\n      new HelpFormatter().printHelp(\"bin/solr auth <enable|disable> [OPTIONS]\", getToolOptions(this));\n      return 1;\n    }\n\n","sourceOld":"    private int handleBasicAuth(CommandLine cli) throws Exception {\n      String cmd = cli.getArgs()[0];\n      boolean prompt = Boolean.parseBoolean(cli.getOptionValue(\"prompt\", \"false\"));\n      boolean updateIncludeFileOnly = Boolean.parseBoolean(cli.getOptionValue(\"updateIncludeFileOnly\", \"false\"));\n      switch (cmd) {\n        case \"enable\":\n          if (!prompt && !cli.hasOption(\"credentials\")) {\n            System.out.println(\"Option -credentials or -prompt is required with enable.\");\n            new HelpFormatter().printHelp(\"bin/solr auth <enable|disable> [OPTIONS]\", getToolOptions(this));\n            exit(1);\n          } else if (!prompt && (cli.getOptionValue(\"credentials\") == null || !cli.getOptionValue(\"credentials\").contains(\":\"))) {\n            System.out.println(\"Option -credentials is not in correct format.\");\n            new HelpFormatter().printHelp(\"bin/solr auth <enable|disable> [OPTIONS]\", getToolOptions(this));\n            exit(1);\n          }\n\n          String zkHost = null;\n\n          if (!updateIncludeFileOnly) {\n            try {\n              zkHost = getZkHost(cli);\n            } catch (Exception ex) {\n              if (cli.hasOption(\"zkHost\")) {\n                System.out.println(\"Couldn't get ZooKeeper host. Please make sure that ZooKeeper is running and the correct zkHost has been passed in.\");\n              } else {\n                System.out.println(\"Couldn't get ZooKeeper host. Please make sure Solr is running in cloud mode, or a zkHost has been passed in.\");\n              }\n              exit(1);\n            }\n            if (zkHost == null) {\n              if (cli.hasOption(\"zkHost\")) {\n                System.out.println(\"Couldn't get ZooKeeper host. Please make sure that ZooKeeper is running and the correct zkHost has been passed in.\");\n              } else {\n                System.out.println(\"Couldn't get ZooKeeper host. Please make sure Solr is running in cloud mode, or a zkHost has been passed in.\");\n              }\n              exit(1);\n            }\n\n            // check if security is already enabled or not\n            try (SolrZkClient zkClient = new SolrZkClient(zkHost, 10000)) {\n              if (zkClient.exists(\"/security.json\", true)) {\n                byte oldSecurityBytes[] = zkClient.getData(\"/security.json\", null, null, true);\n                if (!\"{}\".equals(new String(oldSecurityBytes, StandardCharsets.UTF_8).trim())) {\n                  System.out.println(\"Security is already enabled. You can disable it with 'bin/solr auth disable'. Existing security.json: \\n\"\n                      + new String(oldSecurityBytes, StandardCharsets.UTF_8));\n                  exit(1);\n                }\n              }\n            }\n          }\n\n          String username, password;\n          if (cli.hasOption(\"credentials\")) {\n            String credentials = cli.getOptionValue(\"credentials\");\n            username = credentials.split(\":\")[0];\n            password = credentials.split(\":\")[1];\n          } else {\n            Console console = System.console();\n            username = console.readLine(\"Enter username: \");\n            password = new String(console.readPassword(\"Enter password: \"));\n          }\n\n          boolean blockUnknown = Boolean.valueOf(cli.getOptionValue(\"blockUnknown\", \"false\"));\n\n          String securityJson = \"{\" +\n              \"\\n  \\\"authentication\\\":{\" +\n              \"\\n   \\\"blockUnknown\\\": \" + blockUnknown + \",\" +\n              \"\\n   \\\"class\\\":\\\"solr.BasicAuthPlugin\\\",\" +\n              \"\\n   \\\"credentials\\\":{\\\"\" + username + \"\\\":\\\"\" + Sha256AuthenticationProvider.getSaltedHashedValue(password) + \"\\\"}\" +\n              \"\\n  },\" +\n              \"\\n  \\\"authorization\\\":{\" +\n              \"\\n   \\\"class\\\":\\\"solr.RuleBasedAuthorizationPlugin\\\",\" +\n              \"\\n   \\\"permissions\\\":[\" +\n              \"\\n {\\\"name\\\":\\\"security-edit\\\", \\\"role\\\":\\\"admin\\\"},\" +\n              \"\\n {\\\"name\\\":\\\"collection-admin-edit\\\", \\\"role\\\":\\\"admin\\\"},\" +\n              \"\\n {\\\"name\\\":\\\"core-admin-edit\\\", \\\"role\\\":\\\"admin\\\"}\" +\n              \"\\n   ],\" +\n              \"\\n   \\\"user-role\\\":{\\\"\" + username + \"\\\":\\\"admin\\\"}\" +\n              \"\\n  }\" +\n              \"\\n}\";\n\n          if (!updateIncludeFileOnly) {\n            System.out.println(\"Uploading following security.json: \" + securityJson);\n            try (SolrZkClient zkClient = new SolrZkClient(zkHost, 10000)) {\n              zkClient.setData(\"/security.json\", securityJson.getBytes(StandardCharsets.UTF_8), true);\n            }\n          }\n\n          String solrIncludeFilename = cli.getOptionValue(\"solrIncludeFile\");\n          File includeFile = new File(solrIncludeFilename);\n          if (includeFile.exists() == false || includeFile.canWrite() == false) {\n            System.out.println(\"Solr include file \" + solrIncludeFilename + \" doesn't exist or is not writeable.\");\n            printAuthEnablingInstructions(username, password);\n            System.exit(0);\n          }\n          String authConfDir = cli.getOptionValue(\"authConfDir\");\n          File basicAuthConfFile = new File(authConfDir + File.separator + \"basicAuth.conf\");\n\n          if (basicAuthConfFile.getParentFile().canWrite() == false) {\n            System.out.println(\"Cannot write to file: \" + basicAuthConfFile.getAbsolutePath());\n            printAuthEnablingInstructions(username, password);\n            System.exit(0);\n          }\n\n          FileUtils.writeStringToFile(basicAuthConfFile,\n              \"httpBasicAuthUser=\" + username + \"\\nhttpBasicAuthPassword=\" + password, StandardCharsets.UTF_8);\n\n          // update the solr.in.sh file to contain the necessary authentication lines\n          updateIncludeFileEnableAuth(includeFile, basicAuthConfFile.getAbsolutePath(), null);\n          return 0;\n\n        case \"disable\":\n          if (!updateIncludeFileOnly) {\n            zkHost = getZkHost(cli);\n            if (zkHost == null) {\n              stdout.print(\"ZK Host not found. Solr should be running in cloud mode\");\n              exit(1);\n            }\n\n            System.out.println(\"Uploading following security.json: {}\");\n\n            try (SolrZkClient zkClient = new SolrZkClient(zkHost, 10000)) {\n              zkClient.setData(\"/security.json\", \"{}\".getBytes(StandardCharsets.UTF_8), true);\n            }\n          }\n\n          solrIncludeFilename = cli.getOptionValue(\"solrIncludeFile\");\n          includeFile = new File(solrIncludeFilename);\n          if (!includeFile.exists() || !includeFile.canWrite()) {\n            System.out.println(\"Solr include file \" + solrIncludeFilename + \" doesn't exist or is not writeable.\");\n            System.out.println(\"Security has been disabled. Please remove any SOLR_AUTH_TYPE or SOLR_AUTHENTICATION_OPTS configuration from solr.in.sh/solr.in.cmd.\\n\");\n            System.exit(0);\n          }\n\n          // update the solr.in.sh file to comment out the necessary authentication lines\n          updateIncludeFileDisableAuth(includeFile);\n          return 0;\n\n        default:\n          System.out.println(\"Valid auth commands are: enable, disable\");\n          exit(1);\n      }\n\n      System.out.println(\"Options not understood.\");\n      new HelpFormatter().printHelp(\"bin/solr auth <enable|disable> [OPTIONS]\", getToolOptions(this));\n      return 1;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b79a5db147a1c6f95d1625ddbc3561ef56955225","date":1528848080,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.AuthTool#handleBasicAuth(CommandLine).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.AuthTool#handleBasicAuth(CommandLine).mjava","sourceNew":"    private int handleBasicAuth(CommandLine cli) throws Exception {\n      String cmd = cli.getArgs()[0];\n      boolean prompt = Boolean.parseBoolean(cli.getOptionValue(\"prompt\", \"false\"));\n      boolean updateIncludeFileOnly = Boolean.parseBoolean(cli.getOptionValue(\"updateIncludeFileOnly\", \"false\"));\n      switch (cmd) {\n        case \"enable\":\n          if (!prompt && !cli.hasOption(\"credentials\")) {\n            System.out.println(\"Option -credentials or -prompt is required with enable.\");\n            new HelpFormatter().printHelp(\"bin/solr auth <enable|disable> [OPTIONS]\", getToolOptions(this));\n            exit(1);\n          } else if (!prompt && (cli.getOptionValue(\"credentials\") == null || !cli.getOptionValue(\"credentials\").contains(\":\"))) {\n            System.out.println(\"Option -credentials is not in correct format.\");\n            new HelpFormatter().printHelp(\"bin/solr auth <enable|disable> [OPTIONS]\", getToolOptions(this));\n            exit(1);\n          }\n\n          String zkHost = null;\n\n          if (!updateIncludeFileOnly) {\n            try {\n              zkHost = getZkHost(cli);\n            } catch (Exception ex) {\n              if (cli.hasOption(\"zkHost\")) {\n                System.out.println(\"Couldn't get ZooKeeper host. Please make sure that ZooKeeper is running and the correct zkHost has been passed in.\");\n              } else {\n                System.out.println(\"Couldn't get ZooKeeper host. Please make sure Solr is running in cloud mode, or a zkHost has been passed in.\");\n              }\n              exit(1);\n            }\n            if (zkHost == null) {\n              if (cli.hasOption(\"zkHost\")) {\n                System.out.println(\"Couldn't get ZooKeeper host. Please make sure that ZooKeeper is running and the correct zkHost has been passed in.\");\n              } else {\n                System.out.println(\"Couldn't get ZooKeeper host. Please make sure Solr is running in cloud mode, or a zkHost has been passed in.\");\n              }\n              exit(1);\n            }\n\n            // check if security is already enabled or not\n            try (SolrZkClient zkClient = new SolrZkClient(zkHost, 10000)) {\n              if (zkClient.exists(\"/security.json\", true)) {\n                byte oldSecurityBytes[] = zkClient.getData(\"/security.json\", null, null, true);\n                if (!\"{}\".equals(new String(oldSecurityBytes, StandardCharsets.UTF_8).trim())) {\n                  System.out.println(\"Security is already enabled. You can disable it with 'bin/solr auth disable'. Existing security.json: \\n\"\n                      + new String(oldSecurityBytes, StandardCharsets.UTF_8));\n                  exit(1);\n                }\n              }\n            }\n          }\n\n          String username, password;\n          if (cli.hasOption(\"credentials\")) {\n            String credentials = cli.getOptionValue(\"credentials\");\n            username = credentials.split(\":\")[0];\n            password = credentials.split(\":\")[1];\n          } else {\n            Console console = System.console();\n            username = console.readLine(\"Enter username: \");\n            password = new String(console.readPassword(\"Enter password: \"));\n          }\n\n          boolean blockUnknown = Boolean.valueOf(cli.getOptionValue(\"blockUnknown\", \"false\"));\n\n          String securityJson = \"{\" +\n              \"\\n  \\\"authentication\\\":{\" +\n              \"\\n   \\\"blockUnknown\\\": \" + blockUnknown + \",\" +\n              \"\\n   \\\"class\\\":\\\"solr.BasicAuthPlugin\\\",\" +\n              \"\\n   \\\"credentials\\\":{\\\"\" + username + \"\\\":\\\"\" + Sha256AuthenticationProvider.getSaltedHashedValue(password) + \"\\\"}\" +\n              \"\\n  },\" +\n              \"\\n  \\\"authorization\\\":{\" +\n              \"\\n   \\\"class\\\":\\\"solr.RuleBasedAuthorizationPlugin\\\",\" +\n              \"\\n   \\\"permissions\\\":[\" +\n              \"\\n {\\\"name\\\":\\\"security-edit\\\", \\\"role\\\":\\\"admin\\\"},\" +\n              \"\\n {\\\"name\\\":\\\"collection-admin-edit\\\", \\\"role\\\":\\\"admin\\\"},\" +\n              \"\\n {\\\"name\\\":\\\"core-admin-edit\\\", \\\"role\\\":\\\"admin\\\"}\" +\n              \"\\n   ],\" +\n              \"\\n   \\\"user-role\\\":{\\\"\" + username + \"\\\":\\\"admin\\\"}\" +\n              \"\\n  }\" +\n              \"\\n}\";\n\n          if (!updateIncludeFileOnly) {\n            echoIfVerbose(\"Uploading following security.json: \" + securityJson, cli);\n            try (SolrZkClient zkClient = new SolrZkClient(zkHost, 10000)) {\n              zkClient.setData(\"/security.json\", securityJson.getBytes(StandardCharsets.UTF_8), true);\n            }\n          }\n\n          String solrIncludeFilename = cli.getOptionValue(\"solrIncludeFile\");\n          File includeFile = new File(solrIncludeFilename);\n          if (includeFile.exists() == false || includeFile.canWrite() == false) {\n            System.out.println(\"Solr include file \" + solrIncludeFilename + \" doesn't exist or is not writeable.\");\n            printAuthEnablingInstructions(username, password);\n            System.exit(0);\n          }\n          String authConfDir = cli.getOptionValue(\"authConfDir\");\n          File basicAuthConfFile = new File(authConfDir + File.separator + \"basicAuth.conf\");\n\n          if (basicAuthConfFile.getParentFile().canWrite() == false) {\n            System.out.println(\"Cannot write to file: \" + basicAuthConfFile.getAbsolutePath());\n            printAuthEnablingInstructions(username, password);\n            System.exit(0);\n          }\n\n          FileUtils.writeStringToFile(basicAuthConfFile,\n              \"httpBasicAuthUser=\" + username + \"\\nhttpBasicAuthPassword=\" + password, StandardCharsets.UTF_8);\n\n          // update the solr.in.sh file to contain the necessary authentication lines\n          updateIncludeFileEnableAuth(includeFile, basicAuthConfFile.getAbsolutePath(), null, cli);\n          final String successMessage = String.format(Locale.ROOT,\n              \"Successfully enabled basic auth with username [%s] and password [%s].\", username, password);\n          echo(successMessage);\n          return 0;\n\n        case \"disable\":\n          if (!updateIncludeFileOnly) {\n            zkHost = getZkHost(cli);\n            if (zkHost == null) {\n              stdout.print(\"ZK Host not found. Solr should be running in cloud mode\");\n              exit(1);\n            }\n\n            echoIfVerbose(\"Uploading following security.json: {}\", cli);\n\n            try (SolrZkClient zkClient = new SolrZkClient(zkHost, 10000)) {\n              zkClient.setData(\"/security.json\", \"{}\".getBytes(StandardCharsets.UTF_8), true);\n            }\n          }\n\n          solrIncludeFilename = cli.getOptionValue(\"solrIncludeFile\");\n          includeFile = new File(solrIncludeFilename);\n          if (!includeFile.exists() || !includeFile.canWrite()) {\n            System.out.println(\"Solr include file \" + solrIncludeFilename + \" doesn't exist or is not writeable.\");\n            System.out.println(\"Security has been disabled. Please remove any SOLR_AUTH_TYPE or SOLR_AUTHENTICATION_OPTS configuration from solr.in.sh/solr.in.cmd.\\n\");\n            System.exit(0);\n          }\n\n          // update the solr.in.sh file to comment out the necessary authentication lines\n          updateIncludeFileDisableAuth(includeFile, cli);\n          return 0;\n\n        default:\n          System.out.println(\"Valid auth commands are: enable, disable\");\n          exit(1);\n      }\n\n      System.out.println(\"Options not understood.\");\n      new HelpFormatter().printHelp(\"bin/solr auth <enable|disable> [OPTIONS]\", getToolOptions(this));\n      return 1;\n    }\n\n","sourceOld":"    private int handleBasicAuth(CommandLine cli) throws Exception {\n      String cmd = cli.getArgs()[0];\n      boolean prompt = Boolean.parseBoolean(cli.getOptionValue(\"prompt\", \"false\"));\n      boolean updateIncludeFileOnly = Boolean.parseBoolean(cli.getOptionValue(\"updateIncludeFileOnly\", \"false\"));\n      switch (cmd) {\n        case \"enable\":\n          if (!prompt && !cli.hasOption(\"credentials\")) {\n            System.out.println(\"Option -credentials or -prompt is required with enable.\");\n            new HelpFormatter().printHelp(\"bin/solr auth <enable|disable> [OPTIONS]\", getToolOptions(this));\n            exit(1);\n          } else if (!prompt && (cli.getOptionValue(\"credentials\") == null || !cli.getOptionValue(\"credentials\").contains(\":\"))) {\n            System.out.println(\"Option -credentials is not in correct format.\");\n            new HelpFormatter().printHelp(\"bin/solr auth <enable|disable> [OPTIONS]\", getToolOptions(this));\n            exit(1);\n          }\n\n          String zkHost = null;\n\n          if (!updateIncludeFileOnly) {\n            try {\n              zkHost = getZkHost(cli);\n            } catch (Exception ex) {\n              if (cli.hasOption(\"zkHost\")) {\n                System.out.println(\"Couldn't get ZooKeeper host. Please make sure that ZooKeeper is running and the correct zkHost has been passed in.\");\n              } else {\n                System.out.println(\"Couldn't get ZooKeeper host. Please make sure Solr is running in cloud mode, or a zkHost has been passed in.\");\n              }\n              exit(1);\n            }\n            if (zkHost == null) {\n              if (cli.hasOption(\"zkHost\")) {\n                System.out.println(\"Couldn't get ZooKeeper host. Please make sure that ZooKeeper is running and the correct zkHost has been passed in.\");\n              } else {\n                System.out.println(\"Couldn't get ZooKeeper host. Please make sure Solr is running in cloud mode, or a zkHost has been passed in.\");\n              }\n              exit(1);\n            }\n\n            // check if security is already enabled or not\n            try (SolrZkClient zkClient = new SolrZkClient(zkHost, 10000)) {\n              if (zkClient.exists(\"/security.json\", true)) {\n                byte oldSecurityBytes[] = zkClient.getData(\"/security.json\", null, null, true);\n                if (!\"{}\".equals(new String(oldSecurityBytes, StandardCharsets.UTF_8).trim())) {\n                  System.out.println(\"Security is already enabled. You can disable it with 'bin/solr auth disable'. Existing security.json: \\n\"\n                      + new String(oldSecurityBytes, StandardCharsets.UTF_8));\n                  exit(1);\n                }\n              }\n            }\n          }\n\n          String username, password;\n          if (cli.hasOption(\"credentials\")) {\n            String credentials = cli.getOptionValue(\"credentials\");\n            username = credentials.split(\":\")[0];\n            password = credentials.split(\":\")[1];\n          } else {\n            Console console = System.console();\n            username = console.readLine(\"Enter username: \");\n            password = new String(console.readPassword(\"Enter password: \"));\n          }\n\n          boolean blockUnknown = Boolean.valueOf(cli.getOptionValue(\"blockUnknown\", \"false\"));\n\n          String securityJson = \"{\" +\n              \"\\n  \\\"authentication\\\":{\" +\n              \"\\n   \\\"blockUnknown\\\": \" + blockUnknown + \",\" +\n              \"\\n   \\\"class\\\":\\\"solr.BasicAuthPlugin\\\",\" +\n              \"\\n   \\\"credentials\\\":{\\\"\" + username + \"\\\":\\\"\" + Sha256AuthenticationProvider.getSaltedHashedValue(password) + \"\\\"}\" +\n              \"\\n  },\" +\n              \"\\n  \\\"authorization\\\":{\" +\n              \"\\n   \\\"class\\\":\\\"solr.RuleBasedAuthorizationPlugin\\\",\" +\n              \"\\n   \\\"permissions\\\":[\" +\n              \"\\n {\\\"name\\\":\\\"security-edit\\\", \\\"role\\\":\\\"admin\\\"},\" +\n              \"\\n {\\\"name\\\":\\\"collection-admin-edit\\\", \\\"role\\\":\\\"admin\\\"},\" +\n              \"\\n {\\\"name\\\":\\\"core-admin-edit\\\", \\\"role\\\":\\\"admin\\\"}\" +\n              \"\\n   ],\" +\n              \"\\n   \\\"user-role\\\":{\\\"\" + username + \"\\\":\\\"admin\\\"}\" +\n              \"\\n  }\" +\n              \"\\n}\";\n\n          if (!updateIncludeFileOnly) {\n            echoIfVerbose(\"Uploading following security.json: \" + securityJson, cli);\n            try (SolrZkClient zkClient = new SolrZkClient(zkHost, 10000)) {\n              zkClient.setData(\"/security.json\", securityJson.getBytes(StandardCharsets.UTF_8), true);\n            }\n          }\n\n          String solrIncludeFilename = cli.getOptionValue(\"solrIncludeFile\");\n          File includeFile = new File(solrIncludeFilename);\n          if (includeFile.exists() == false || includeFile.canWrite() == false) {\n            System.out.println(\"Solr include file \" + solrIncludeFilename + \" doesn't exist or is not writeable.\");\n            printAuthEnablingInstructions(username, password);\n            System.exit(0);\n          }\n          String authConfDir = cli.getOptionValue(\"authConfDir\");\n          File basicAuthConfFile = new File(authConfDir + File.separator + \"basicAuth.conf\");\n\n          if (basicAuthConfFile.getParentFile().canWrite() == false) {\n            System.out.println(\"Cannot write to file: \" + basicAuthConfFile.getAbsolutePath());\n            printAuthEnablingInstructions(username, password);\n            System.exit(0);\n          }\n\n          FileUtils.writeStringToFile(basicAuthConfFile,\n              \"httpBasicAuthUser=\" + username + \"\\nhttpBasicAuthPassword=\" + password, StandardCharsets.UTF_8);\n\n          // update the solr.in.sh file to contain the necessary authentication lines\n          updateIncludeFileEnableAuth(includeFile, basicAuthConfFile.getAbsolutePath(), null, cli);\n          final String successMessage = String.format(Locale.ROOT,\n              \"Successfully enabled basic auth with username [%s] and password [%s].\", username, password);\n          echo(successMessage);\n          return 0;\n\n        case \"disable\":\n          if (!updateIncludeFileOnly) {\n            zkHost = getZkHost(cli);\n            if (zkHost == null) {\n              stdout.print(\"ZK Host not found. Solr should be running in cloud mode\");\n              exit(1);\n            }\n\n            echoIfVerbose(\"Uploading following security.json: {}\", cli);\n\n            try (SolrZkClient zkClient = new SolrZkClient(zkHost, 10000)) {\n              zkClient.setData(\"/security.json\", \"{}\".getBytes(StandardCharsets.UTF_8), true);\n            }\n          }\n\n          solrIncludeFilename = cli.getOptionValue(\"solrIncludeFile\");\n          includeFile = new File(solrIncludeFilename);\n          if (!includeFile.exists() || !includeFile.canWrite()) {\n            System.out.println(\"Solr include file \" + solrIncludeFilename + \" doesn't exist or is not writeable.\");\n            System.out.println(\"Security has been disabled. Please remove any SOLR_AUTH_TYPE or SOLR_AUTHENTICATION_OPTS configuration from solr.in.sh/solr.in.cmd.\\n\");\n            System.exit(0);\n          }\n\n          // update the solr.in.sh file to comment out the necessary authentication lines\n          updateIncludeFileDisableAuth(includeFile, cli);\n          return 0;\n\n        default:\n          System.out.println(\"Valid auth commands are: enable, disable\");\n          exit(1);\n      }\n\n      System.out.println(\"Options not understood.\");\n      new HelpFormatter().printHelp(\"bin/solr auth <enable|disable> [OPTIONS]\", getToolOptions(this));\n      return 1;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.AuthTool#handleBasicAuth(CommandLine).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.AuthTool#handleBasicAuth(CommandLine).mjava","sourceNew":"    private int handleBasicAuth(CommandLine cli) throws Exception {\n      String cmd = cli.getArgs()[0];\n      boolean prompt = Boolean.parseBoolean(cli.getOptionValue(\"prompt\", \"false\"));\n      boolean updateIncludeFileOnly = Boolean.parseBoolean(cli.getOptionValue(\"updateIncludeFileOnly\", \"false\"));\n      switch (cmd) {\n        case \"enable\":\n          if (!prompt && !cli.hasOption(\"credentials\")) {\n            System.out.println(\"Option -credentials or -prompt is required with enable.\");\n            new HelpFormatter().printHelp(\"bin/solr auth <enable|disable> [OPTIONS]\", getToolOptions(this));\n            exit(1);\n          } else if (!prompt && (cli.getOptionValue(\"credentials\") == null || !cli.getOptionValue(\"credentials\").contains(\":\"))) {\n            System.out.println(\"Option -credentials is not in correct format.\");\n            new HelpFormatter().printHelp(\"bin/solr auth <enable|disable> [OPTIONS]\", getToolOptions(this));\n            exit(1);\n          }\n\n          String zkHost = null;\n\n          if (!updateIncludeFileOnly) {\n            try {\n              zkHost = getZkHost(cli);\n            } catch (Exception ex) {\n              if (cli.hasOption(\"zkHost\")) {\n                System.out.println(\"Couldn't get ZooKeeper host. Please make sure that ZooKeeper is running and the correct zkHost has been passed in.\");\n              } else {\n                System.out.println(\"Couldn't get ZooKeeper host. Please make sure Solr is running in cloud mode, or a zkHost has been passed in.\");\n              }\n              exit(1);\n            }\n            if (zkHost == null) {\n              if (cli.hasOption(\"zkHost\")) {\n                System.out.println(\"Couldn't get ZooKeeper host. Please make sure that ZooKeeper is running and the correct zkHost has been passed in.\");\n              } else {\n                System.out.println(\"Couldn't get ZooKeeper host. Please make sure Solr is running in cloud mode, or a zkHost has been passed in.\");\n              }\n              exit(1);\n            }\n\n            // check if security is already enabled or not\n            try (SolrZkClient zkClient = new SolrZkClient(zkHost, 10000)) {\n              if (zkClient.exists(\"/security.json\", true)) {\n                byte oldSecurityBytes[] = zkClient.getData(\"/security.json\", null, null, true);\n                if (!\"{}\".equals(new String(oldSecurityBytes, StandardCharsets.UTF_8).trim())) {\n                  System.out.println(\"Security is already enabled. You can disable it with 'bin/solr auth disable'. Existing security.json: \\n\"\n                      + new String(oldSecurityBytes, StandardCharsets.UTF_8));\n                  exit(1);\n                }\n              }\n            }\n          }\n\n          String username, password;\n          if (cli.hasOption(\"credentials\")) {\n            String credentials = cli.getOptionValue(\"credentials\");\n            username = credentials.split(\":\")[0];\n            password = credentials.split(\":\")[1];\n          } else {\n            Console console = System.console();\n            username = console.readLine(\"Enter username: \");\n            password = new String(console.readPassword(\"Enter password: \"));\n          }\n\n          boolean blockUnknown = Boolean.valueOf(cli.getOptionValue(\"blockUnknown\", \"false\"));\n\n          String securityJson = \"{\" +\n              \"\\n  \\\"authentication\\\":{\" +\n              \"\\n   \\\"blockUnknown\\\": \" + blockUnknown + \",\" +\n              \"\\n   \\\"class\\\":\\\"solr.BasicAuthPlugin\\\",\" +\n              \"\\n   \\\"credentials\\\":{\\\"\" + username + \"\\\":\\\"\" + Sha256AuthenticationProvider.getSaltedHashedValue(password) + \"\\\"}\" +\n              \"\\n  },\" +\n              \"\\n  \\\"authorization\\\":{\" +\n              \"\\n   \\\"class\\\":\\\"solr.RuleBasedAuthorizationPlugin\\\",\" +\n              \"\\n   \\\"permissions\\\":[\" +\n              \"\\n {\\\"name\\\":\\\"security-edit\\\", \\\"role\\\":\\\"admin\\\"},\" +\n              \"\\n {\\\"name\\\":\\\"collection-admin-edit\\\", \\\"role\\\":\\\"admin\\\"},\" +\n              \"\\n {\\\"name\\\":\\\"core-admin-edit\\\", \\\"role\\\":\\\"admin\\\"}\" +\n              \"\\n   ],\" +\n              \"\\n   \\\"user-role\\\":{\\\"\" + username + \"\\\":\\\"admin\\\"}\" +\n              \"\\n  }\" +\n              \"\\n}\";\n\n          if (!updateIncludeFileOnly) {\n            echoIfVerbose(\"Uploading following security.json: \" + securityJson, cli);\n            try (SolrZkClient zkClient = new SolrZkClient(zkHost, 10000)) {\n              zkClient.setData(\"/security.json\", securityJson.getBytes(StandardCharsets.UTF_8), true);\n            }\n          }\n\n          String solrIncludeFilename = cli.getOptionValue(\"solrIncludeFile\");\n          File includeFile = new File(solrIncludeFilename);\n          if (includeFile.exists() == false || includeFile.canWrite() == false) {\n            System.out.println(\"Solr include file \" + solrIncludeFilename + \" doesn't exist or is not writeable.\");\n            printAuthEnablingInstructions(username, password);\n            System.exit(0);\n          }\n          String authConfDir = cli.getOptionValue(\"authConfDir\");\n          File basicAuthConfFile = new File(authConfDir + File.separator + \"basicAuth.conf\");\n\n          if (basicAuthConfFile.getParentFile().canWrite() == false) {\n            System.out.println(\"Cannot write to file: \" + basicAuthConfFile.getAbsolutePath());\n            printAuthEnablingInstructions(username, password);\n            System.exit(0);\n          }\n\n          FileUtils.writeStringToFile(basicAuthConfFile,\n              \"httpBasicAuthUser=\" + username + \"\\nhttpBasicAuthPassword=\" + password, StandardCharsets.UTF_8);\n\n          // update the solr.in.sh file to contain the necessary authentication lines\n          updateIncludeFileEnableAuth(includeFile, basicAuthConfFile.getAbsolutePath(), null, cli);\n          final String successMessage = String.format(Locale.ROOT,\n              \"Successfully enabled basic auth with username [%s] and password [%s].\", username, password);\n          echo(successMessage);\n          return 0;\n\n        case \"disable\":\n          if (!updateIncludeFileOnly) {\n            zkHost = getZkHost(cli);\n            if (zkHost == null) {\n              stdout.print(\"ZK Host not found. Solr should be running in cloud mode\");\n              exit(1);\n            }\n\n            echoIfVerbose(\"Uploading following security.json: {}\", cli);\n\n            try (SolrZkClient zkClient = new SolrZkClient(zkHost, 10000)) {\n              zkClient.setData(\"/security.json\", \"{}\".getBytes(StandardCharsets.UTF_8), true);\n            }\n          }\n\n          solrIncludeFilename = cli.getOptionValue(\"solrIncludeFile\");\n          includeFile = new File(solrIncludeFilename);\n          if (!includeFile.exists() || !includeFile.canWrite()) {\n            System.out.println(\"Solr include file \" + solrIncludeFilename + \" doesn't exist or is not writeable.\");\n            System.out.println(\"Security has been disabled. Please remove any SOLR_AUTH_TYPE or SOLR_AUTHENTICATION_OPTS configuration from solr.in.sh/solr.in.cmd.\\n\");\n            System.exit(0);\n          }\n\n          // update the solr.in.sh file to comment out the necessary authentication lines\n          updateIncludeFileDisableAuth(includeFile, cli);\n          return 0;\n\n        default:\n          System.out.println(\"Valid auth commands are: enable, disable\");\n          exit(1);\n      }\n\n      System.out.println(\"Options not understood.\");\n      new HelpFormatter().printHelp(\"bin/solr auth <enable|disable> [OPTIONS]\", getToolOptions(this));\n      return 1;\n    }\n\n","sourceOld":"    private int handleBasicAuth(CommandLine cli) throws Exception {\n      String cmd = cli.getArgs()[0];\n      boolean prompt = Boolean.parseBoolean(cli.getOptionValue(\"prompt\", \"false\"));\n      boolean updateIncludeFileOnly = Boolean.parseBoolean(cli.getOptionValue(\"updateIncludeFileOnly\", \"false\"));\n      switch (cmd) {\n        case \"enable\":\n          if (!prompt && !cli.hasOption(\"credentials\")) {\n            System.out.println(\"Option -credentials or -prompt is required with enable.\");\n            new HelpFormatter().printHelp(\"bin/solr auth <enable|disable> [OPTIONS]\", getToolOptions(this));\n            exit(1);\n          } else if (!prompt && (cli.getOptionValue(\"credentials\") == null || !cli.getOptionValue(\"credentials\").contains(\":\"))) {\n            System.out.println(\"Option -credentials is not in correct format.\");\n            new HelpFormatter().printHelp(\"bin/solr auth <enable|disable> [OPTIONS]\", getToolOptions(this));\n            exit(1);\n          }\n\n          String zkHost = null;\n\n          if (!updateIncludeFileOnly) {\n            try {\n              zkHost = getZkHost(cli);\n            } catch (Exception ex) {\n              if (cli.hasOption(\"zkHost\")) {\n                System.out.println(\"Couldn't get ZooKeeper host. Please make sure that ZooKeeper is running and the correct zkHost has been passed in.\");\n              } else {\n                System.out.println(\"Couldn't get ZooKeeper host. Please make sure Solr is running in cloud mode, or a zkHost has been passed in.\");\n              }\n              exit(1);\n            }\n            if (zkHost == null) {\n              if (cli.hasOption(\"zkHost\")) {\n                System.out.println(\"Couldn't get ZooKeeper host. Please make sure that ZooKeeper is running and the correct zkHost has been passed in.\");\n              } else {\n                System.out.println(\"Couldn't get ZooKeeper host. Please make sure Solr is running in cloud mode, or a zkHost has been passed in.\");\n              }\n              exit(1);\n            }\n\n            // check if security is already enabled or not\n            try (SolrZkClient zkClient = new SolrZkClient(zkHost, 10000)) {\n              if (zkClient.exists(\"/security.json\", true)) {\n                byte oldSecurityBytes[] = zkClient.getData(\"/security.json\", null, null, true);\n                if (!\"{}\".equals(new String(oldSecurityBytes, StandardCharsets.UTF_8).trim())) {\n                  System.out.println(\"Security is already enabled. You can disable it with 'bin/solr auth disable'. Existing security.json: \\n\"\n                      + new String(oldSecurityBytes, StandardCharsets.UTF_8));\n                  exit(1);\n                }\n              }\n            }\n          }\n\n          String username, password;\n          if (cli.hasOption(\"credentials\")) {\n            String credentials = cli.getOptionValue(\"credentials\");\n            username = credentials.split(\":\")[0];\n            password = credentials.split(\":\")[1];\n          } else {\n            Console console = System.console();\n            username = console.readLine(\"Enter username: \");\n            password = new String(console.readPassword(\"Enter password: \"));\n          }\n\n          boolean blockUnknown = Boolean.valueOf(cli.getOptionValue(\"blockUnknown\", \"false\"));\n\n          String securityJson = \"{\" +\n              \"\\n  \\\"authentication\\\":{\" +\n              \"\\n   \\\"blockUnknown\\\": \" + blockUnknown + \",\" +\n              \"\\n   \\\"class\\\":\\\"solr.BasicAuthPlugin\\\",\" +\n              \"\\n   \\\"credentials\\\":{\\\"\" + username + \"\\\":\\\"\" + Sha256AuthenticationProvider.getSaltedHashedValue(password) + \"\\\"}\" +\n              \"\\n  },\" +\n              \"\\n  \\\"authorization\\\":{\" +\n              \"\\n   \\\"class\\\":\\\"solr.RuleBasedAuthorizationPlugin\\\",\" +\n              \"\\n   \\\"permissions\\\":[\" +\n              \"\\n {\\\"name\\\":\\\"security-edit\\\", \\\"role\\\":\\\"admin\\\"},\" +\n              \"\\n {\\\"name\\\":\\\"collection-admin-edit\\\", \\\"role\\\":\\\"admin\\\"},\" +\n              \"\\n {\\\"name\\\":\\\"core-admin-edit\\\", \\\"role\\\":\\\"admin\\\"}\" +\n              \"\\n   ],\" +\n              \"\\n   \\\"user-role\\\":{\\\"\" + username + \"\\\":\\\"admin\\\"}\" +\n              \"\\n  }\" +\n              \"\\n}\";\n\n          if (!updateIncludeFileOnly) {\n            echoIfVerbose(\"Uploading following security.json: \" + securityJson, cli);\n            try (SolrZkClient zkClient = new SolrZkClient(zkHost, 10000)) {\n              zkClient.setData(\"/security.json\", securityJson.getBytes(StandardCharsets.UTF_8), true);\n            }\n          }\n\n          String solrIncludeFilename = cli.getOptionValue(\"solrIncludeFile\");\n          File includeFile = new File(solrIncludeFilename);\n          if (includeFile.exists() == false || includeFile.canWrite() == false) {\n            System.out.println(\"Solr include file \" + solrIncludeFilename + \" doesn't exist or is not writeable.\");\n            printAuthEnablingInstructions(username, password);\n            System.exit(0);\n          }\n          String authConfDir = cli.getOptionValue(\"authConfDir\");\n          File basicAuthConfFile = new File(authConfDir + File.separator + \"basicAuth.conf\");\n\n          if (basicAuthConfFile.getParentFile().canWrite() == false) {\n            System.out.println(\"Cannot write to file: \" + basicAuthConfFile.getAbsolutePath());\n            printAuthEnablingInstructions(username, password);\n            System.exit(0);\n          }\n\n          FileUtils.writeStringToFile(basicAuthConfFile,\n              \"httpBasicAuthUser=\" + username + \"\\nhttpBasicAuthPassword=\" + password, StandardCharsets.UTF_8);\n\n          // update the solr.in.sh file to contain the necessary authentication lines\n          updateIncludeFileEnableAuth(includeFile, basicAuthConfFile.getAbsolutePath(), null, cli);\n          final String successMessage = String.format(Locale.ROOT,\n              \"Successfully enabled basic auth with username [%s] and password [%s].\", username, password);\n          echo(successMessage);\n          return 0;\n\n        case \"disable\":\n          if (!updateIncludeFileOnly) {\n            zkHost = getZkHost(cli);\n            if (zkHost == null) {\n              stdout.print(\"ZK Host not found. Solr should be running in cloud mode\");\n              exit(1);\n            }\n\n            echoIfVerbose(\"Uploading following security.json: {}\", cli);\n\n            try (SolrZkClient zkClient = new SolrZkClient(zkHost, 10000)) {\n              zkClient.setData(\"/security.json\", \"{}\".getBytes(StandardCharsets.UTF_8), true);\n            }\n          }\n\n          solrIncludeFilename = cli.getOptionValue(\"solrIncludeFile\");\n          includeFile = new File(solrIncludeFilename);\n          if (!includeFile.exists() || !includeFile.canWrite()) {\n            System.out.println(\"Solr include file \" + solrIncludeFilename + \" doesn't exist or is not writeable.\");\n            System.out.println(\"Security has been disabled. Please remove any SOLR_AUTH_TYPE or SOLR_AUTHENTICATION_OPTS configuration from solr.in.sh/solr.in.cmd.\\n\");\n            System.exit(0);\n          }\n\n          // update the solr.in.sh file to comment out the necessary authentication lines\n          updateIncludeFileDisableAuth(includeFile, cli);\n          return 0;\n\n        default:\n          System.out.println(\"Valid auth commands are: enable, disable\");\n          exit(1);\n      }\n\n      System.out.println(\"Options not understood.\");\n      new HelpFormatter().printHelp(\"bin/solr auth <enable|disable> [OPTIONS]\", getToolOptions(this));\n      return 1;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.AuthTool#handleBasicAuth(CommandLine).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.AuthTool#handleBasicAuth(CommandLine).mjava","sourceNew":"    private int handleBasicAuth(CommandLine cli) throws Exception {\n      String cmd = cli.getArgs()[0];\n      boolean prompt = Boolean.parseBoolean(cli.getOptionValue(\"prompt\", \"false\"));\n      boolean updateIncludeFileOnly = Boolean.parseBoolean(cli.getOptionValue(\"updateIncludeFileOnly\", \"false\"));\n      switch (cmd) {\n        case \"enable\":\n          if (!prompt && !cli.hasOption(\"credentials\")) {\n            System.out.println(\"Option -credentials or -prompt is required with enable.\");\n            new HelpFormatter().printHelp(\"bin/solr auth <enable|disable> [OPTIONS]\", getToolOptions(this));\n            exit(1);\n          } else if (!prompt && (cli.getOptionValue(\"credentials\") == null || !cli.getOptionValue(\"credentials\").contains(\":\"))) {\n            System.out.println(\"Option -credentials is not in correct format.\");\n            new HelpFormatter().printHelp(\"bin/solr auth <enable|disable> [OPTIONS]\", getToolOptions(this));\n            exit(1);\n          }\n\n          String zkHost = null;\n\n          if (!updateIncludeFileOnly) {\n            try {\n              zkHost = getZkHost(cli);\n            } catch (Exception ex) {\n              if (cli.hasOption(\"zkHost\")) {\n                System.out.println(\"Couldn't get ZooKeeper host. Please make sure that ZooKeeper is running and the correct zkHost has been passed in.\");\n              } else {\n                System.out.println(\"Couldn't get ZooKeeper host. Please make sure Solr is running in cloud mode, or a zkHost has been passed in.\");\n              }\n              exit(1);\n            }\n            if (zkHost == null) {\n              if (cli.hasOption(\"zkHost\")) {\n                System.out.println(\"Couldn't get ZooKeeper host. Please make sure that ZooKeeper is running and the correct zkHost has been passed in.\");\n              } else {\n                System.out.println(\"Couldn't get ZooKeeper host. Please make sure Solr is running in cloud mode, or a zkHost has been passed in.\");\n              }\n              exit(1);\n            }\n\n            // check if security is already enabled or not\n            try (SolrZkClient zkClient = new SolrZkClient(zkHost, 10000)) {\n              if (zkClient.exists(\"/security.json\", true)) {\n                byte oldSecurityBytes[] = zkClient.getData(\"/security.json\", null, null, true);\n                if (!\"{}\".equals(new String(oldSecurityBytes, StandardCharsets.UTF_8).trim())) {\n                  System.out.println(\"Security is already enabled. You can disable it with 'bin/solr auth disable'. Existing security.json: \\n\"\n                      + new String(oldSecurityBytes, StandardCharsets.UTF_8));\n                  exit(1);\n                }\n              }\n            }\n          }\n\n          String username, password;\n          if (cli.hasOption(\"credentials\")) {\n            String credentials = cli.getOptionValue(\"credentials\");\n            username = credentials.split(\":\")[0];\n            password = credentials.split(\":\")[1];\n          } else {\n            Console console = System.console();\n            username = console.readLine(\"Enter username: \");\n            password = new String(console.readPassword(\"Enter password: \"));\n          }\n\n          boolean blockUnknown = Boolean.valueOf(cli.getOptionValue(\"blockUnknown\", \"false\"));\n\n          String securityJson = \"{\" +\n              \"\\n  \\\"authentication\\\":{\" +\n              \"\\n   \\\"blockUnknown\\\": \" + blockUnknown + \",\" +\n              \"\\n   \\\"class\\\":\\\"solr.BasicAuthPlugin\\\",\" +\n              \"\\n   \\\"credentials\\\":{\\\"\" + username + \"\\\":\\\"\" + Sha256AuthenticationProvider.getSaltedHashedValue(password) + \"\\\"}\" +\n              \"\\n  },\" +\n              \"\\n  \\\"authorization\\\":{\" +\n              \"\\n   \\\"class\\\":\\\"solr.RuleBasedAuthorizationPlugin\\\",\" +\n              \"\\n   \\\"permissions\\\":[\" +\n              \"\\n {\\\"name\\\":\\\"security-edit\\\", \\\"role\\\":\\\"admin\\\"},\" +\n              \"\\n {\\\"name\\\":\\\"collection-admin-edit\\\", \\\"role\\\":\\\"admin\\\"},\" +\n              \"\\n {\\\"name\\\":\\\"core-admin-edit\\\", \\\"role\\\":\\\"admin\\\"}\" +\n              \"\\n   ],\" +\n              \"\\n   \\\"user-role\\\":{\\\"\" + username + \"\\\":\\\"admin\\\"}\" +\n              \"\\n  }\" +\n              \"\\n}\";\n\n          if (!updateIncludeFileOnly) {\n            echoIfVerbose(\"Uploading following security.json: \" + securityJson, cli);\n            try (SolrZkClient zkClient = new SolrZkClient(zkHost, 10000)) {\n              zkClient.setData(\"/security.json\", securityJson.getBytes(StandardCharsets.UTF_8), true);\n            }\n          }\n\n          String solrIncludeFilename = cli.getOptionValue(\"solrIncludeFile\");\n          File includeFile = new File(solrIncludeFilename);\n          if (includeFile.exists() == false || includeFile.canWrite() == false) {\n            System.out.println(\"Solr include file \" + solrIncludeFilename + \" doesn't exist or is not writeable.\");\n            printAuthEnablingInstructions(username, password);\n            System.exit(0);\n          }\n          String authConfDir = cli.getOptionValue(\"authConfDir\");\n          File basicAuthConfFile = new File(authConfDir + File.separator + \"basicAuth.conf\");\n\n          if (basicAuthConfFile.getParentFile().canWrite() == false) {\n            System.out.println(\"Cannot write to file: \" + basicAuthConfFile.getAbsolutePath());\n            printAuthEnablingInstructions(username, password);\n            System.exit(0);\n          }\n\n          FileUtils.writeStringToFile(basicAuthConfFile,\n              \"httpBasicAuthUser=\" + username + \"\\nhttpBasicAuthPassword=\" + password, StandardCharsets.UTF_8);\n\n          // update the solr.in.sh file to contain the necessary authentication lines\n          updateIncludeFileEnableAuth(includeFile, basicAuthConfFile.getAbsolutePath(), null, cli);\n          final String successMessage = String.format(Locale.ROOT,\n              \"Successfully enabled basic auth with username [%s] and password [%s].\", username, password);\n          echo(successMessage);\n          return 0;\n\n        case \"disable\":\n          if (!updateIncludeFileOnly) {\n            zkHost = getZkHost(cli);\n            if (zkHost == null) {\n              stdout.print(\"ZK Host not found. Solr should be running in cloud mode\");\n              exit(1);\n            }\n\n            echoIfVerbose(\"Uploading following security.json: {}\", cli);\n\n            try (SolrZkClient zkClient = new SolrZkClient(zkHost, 10000)) {\n              zkClient.setData(\"/security.json\", \"{}\".getBytes(StandardCharsets.UTF_8), true);\n            }\n          }\n\n          solrIncludeFilename = cli.getOptionValue(\"solrIncludeFile\");\n          includeFile = new File(solrIncludeFilename);\n          if (!includeFile.exists() || !includeFile.canWrite()) {\n            System.out.println(\"Solr include file \" + solrIncludeFilename + \" doesn't exist or is not writeable.\");\n            System.out.println(\"Security has been disabled. Please remove any SOLR_AUTH_TYPE or SOLR_AUTHENTICATION_OPTS configuration from solr.in.sh/solr.in.cmd.\\n\");\n            System.exit(0);\n          }\n\n          // update the solr.in.sh file to comment out the necessary authentication lines\n          updateIncludeFileDisableAuth(includeFile, cli);\n          return 0;\n\n        default:\n          System.out.println(\"Valid auth commands are: enable, disable\");\n          exit(1);\n      }\n\n      System.out.println(\"Options not understood.\");\n      new HelpFormatter().printHelp(\"bin/solr auth <enable|disable> [OPTIONS]\", getToolOptions(this));\n      return 1;\n    }\n\n","sourceOld":"    private int handleBasicAuth(CommandLine cli) throws Exception {\n      String cmd = cli.getArgs()[0];\n      boolean prompt = Boolean.parseBoolean(cli.getOptionValue(\"prompt\", \"false\"));\n      boolean updateIncludeFileOnly = Boolean.parseBoolean(cli.getOptionValue(\"updateIncludeFileOnly\", \"false\"));\n      switch (cmd) {\n        case \"enable\":\n          if (!prompt && !cli.hasOption(\"credentials\")) {\n            System.out.println(\"Option -credentials or -prompt is required with enable.\");\n            new HelpFormatter().printHelp(\"bin/solr auth <enable|disable> [OPTIONS]\", getToolOptions(this));\n            exit(1);\n          } else if (!prompt && (cli.getOptionValue(\"credentials\") == null || !cli.getOptionValue(\"credentials\").contains(\":\"))) {\n            System.out.println(\"Option -credentials is not in correct format.\");\n            new HelpFormatter().printHelp(\"bin/solr auth <enable|disable> [OPTIONS]\", getToolOptions(this));\n            exit(1);\n          }\n\n          String zkHost = null;\n\n          if (!updateIncludeFileOnly) {\n            try {\n              zkHost = getZkHost(cli);\n            } catch (Exception ex) {\n              if (cli.hasOption(\"zkHost\")) {\n                System.out.println(\"Couldn't get ZooKeeper host. Please make sure that ZooKeeper is running and the correct zkHost has been passed in.\");\n              } else {\n                System.out.println(\"Couldn't get ZooKeeper host. Please make sure Solr is running in cloud mode, or a zkHost has been passed in.\");\n              }\n              exit(1);\n            }\n            if (zkHost == null) {\n              if (cli.hasOption(\"zkHost\")) {\n                System.out.println(\"Couldn't get ZooKeeper host. Please make sure that ZooKeeper is running and the correct zkHost has been passed in.\");\n              } else {\n                System.out.println(\"Couldn't get ZooKeeper host. Please make sure Solr is running in cloud mode, or a zkHost has been passed in.\");\n              }\n              exit(1);\n            }\n\n            // check if security is already enabled or not\n            try (SolrZkClient zkClient = new SolrZkClient(zkHost, 10000)) {\n              if (zkClient.exists(\"/security.json\", true)) {\n                byte oldSecurityBytes[] = zkClient.getData(\"/security.json\", null, null, true);\n                if (!\"{}\".equals(new String(oldSecurityBytes, StandardCharsets.UTF_8).trim())) {\n                  System.out.println(\"Security is already enabled. You can disable it with 'bin/solr auth disable'. Existing security.json: \\n\"\n                      + new String(oldSecurityBytes, StandardCharsets.UTF_8));\n                  exit(1);\n                }\n              }\n            }\n          }\n\n          String username, password;\n          if (cli.hasOption(\"credentials\")) {\n            String credentials = cli.getOptionValue(\"credentials\");\n            username = credentials.split(\":\")[0];\n            password = credentials.split(\":\")[1];\n          } else {\n            Console console = System.console();\n            username = console.readLine(\"Enter username: \");\n            password = new String(console.readPassword(\"Enter password: \"));\n          }\n\n          boolean blockUnknown = Boolean.valueOf(cli.getOptionValue(\"blockUnknown\", \"false\"));\n\n          String securityJson = \"{\" +\n              \"\\n  \\\"authentication\\\":{\" +\n              \"\\n   \\\"blockUnknown\\\": \" + blockUnknown + \",\" +\n              \"\\n   \\\"class\\\":\\\"solr.BasicAuthPlugin\\\",\" +\n              \"\\n   \\\"credentials\\\":{\\\"\" + username + \"\\\":\\\"\" + Sha256AuthenticationProvider.getSaltedHashedValue(password) + \"\\\"}\" +\n              \"\\n  },\" +\n              \"\\n  \\\"authorization\\\":{\" +\n              \"\\n   \\\"class\\\":\\\"solr.RuleBasedAuthorizationPlugin\\\",\" +\n              \"\\n   \\\"permissions\\\":[\" +\n              \"\\n {\\\"name\\\":\\\"security-edit\\\", \\\"role\\\":\\\"admin\\\"},\" +\n              \"\\n {\\\"name\\\":\\\"collection-admin-edit\\\", \\\"role\\\":\\\"admin\\\"},\" +\n              \"\\n {\\\"name\\\":\\\"core-admin-edit\\\", \\\"role\\\":\\\"admin\\\"}\" +\n              \"\\n   ],\" +\n              \"\\n   \\\"user-role\\\":{\\\"\" + username + \"\\\":\\\"admin\\\"}\" +\n              \"\\n  }\" +\n              \"\\n}\";\n\n          if (!updateIncludeFileOnly) {\n            echoIfVerbose(\"Uploading following security.json: \" + securityJson, cli);\n            try (SolrZkClient zkClient = new SolrZkClient(zkHost, 10000)) {\n              zkClient.setData(\"/security.json\", securityJson.getBytes(StandardCharsets.UTF_8), true);\n            }\n          }\n\n          String solrIncludeFilename = cli.getOptionValue(\"solrIncludeFile\");\n          File includeFile = new File(solrIncludeFilename);\n          if (includeFile.exists() == false || includeFile.canWrite() == false) {\n            System.out.println(\"Solr include file \" + solrIncludeFilename + \" doesn't exist or is not writeable.\");\n            printAuthEnablingInstructions(username, password);\n            System.exit(0);\n          }\n          String authConfDir = cli.getOptionValue(\"authConfDir\");\n          File basicAuthConfFile = new File(authConfDir + File.separator + \"basicAuth.conf\");\n\n          if (basicAuthConfFile.getParentFile().canWrite() == false) {\n            System.out.println(\"Cannot write to file: \" + basicAuthConfFile.getAbsolutePath());\n            printAuthEnablingInstructions(username, password);\n            System.exit(0);\n          }\n\n          FileUtils.writeStringToFile(basicAuthConfFile,\n              \"httpBasicAuthUser=\" + username + \"\\nhttpBasicAuthPassword=\" + password, StandardCharsets.UTF_8);\n\n          // update the solr.in.sh file to contain the necessary authentication lines\n          updateIncludeFileEnableAuth(includeFile, basicAuthConfFile.getAbsolutePath(), null, cli);\n          final String successMessage = String.format(Locale.ROOT,\n              \"Successfully enabled basic auth with username [%s] and password [%s].\", username, password);\n          echo(successMessage);\n          return 0;\n\n        case \"disable\":\n          if (!updateIncludeFileOnly) {\n            zkHost = getZkHost(cli);\n            if (zkHost == null) {\n              stdout.print(\"ZK Host not found. Solr should be running in cloud mode\");\n              exit(1);\n            }\n\n            echoIfVerbose(\"Uploading following security.json: {}\", cli);\n\n            try (SolrZkClient zkClient = new SolrZkClient(zkHost, 10000)) {\n              zkClient.setData(\"/security.json\", \"{}\".getBytes(StandardCharsets.UTF_8), true);\n            }\n          }\n\n          solrIncludeFilename = cli.getOptionValue(\"solrIncludeFile\");\n          includeFile = new File(solrIncludeFilename);\n          if (!includeFile.exists() || !includeFile.canWrite()) {\n            System.out.println(\"Solr include file \" + solrIncludeFilename + \" doesn't exist or is not writeable.\");\n            System.out.println(\"Security has been disabled. Please remove any SOLR_AUTH_TYPE or SOLR_AUTHENTICATION_OPTS configuration from solr.in.sh/solr.in.cmd.\\n\");\n            System.exit(0);\n          }\n\n          // update the solr.in.sh file to comment out the necessary authentication lines\n          updateIncludeFileDisableAuth(includeFile, cli);\n          return 0;\n\n        default:\n          System.out.println(\"Valid auth commands are: enable, disable\");\n          exit(1);\n      }\n\n      System.out.println(\"Options not understood.\");\n      new HelpFormatter().printHelp(\"bin/solr auth <enable|disable> [OPTIONS]\", getToolOptions(this));\n      return 1;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15","date":1554259533,"type":3,"author":"Gus Heck","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.AuthTool#handleBasicAuth(CommandLine).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.AuthTool#handleBasicAuth(CommandLine).mjava","sourceNew":"    private int handleBasicAuth(CommandLine cli) throws Exception {\n      String cmd = cli.getArgs()[0];\n      boolean prompt = Boolean.parseBoolean(cli.getOptionValue(\"prompt\", \"false\"));\n      boolean updateIncludeFileOnly = Boolean.parseBoolean(cli.getOptionValue(\"updateIncludeFileOnly\", \"false\"));\n      switch (cmd) {\n        case \"enable\":\n          if (!prompt && !cli.hasOption(\"credentials\")) {\n            CLIO.out(\"Option -credentials or -prompt is required with enable.\");\n            new HelpFormatter().printHelp(\"bin/solr auth <enable|disable> [OPTIONS]\", getToolOptions(this));\n            exit(1);\n          } else if (!prompt && (cli.getOptionValue(\"credentials\") == null || !cli.getOptionValue(\"credentials\").contains(\":\"))) {\n            CLIO.out(\"Option -credentials is not in correct format.\");\n            new HelpFormatter().printHelp(\"bin/solr auth <enable|disable> [OPTIONS]\", getToolOptions(this));\n            exit(1);\n          }\n\n          String zkHost = null;\n\n          if (!updateIncludeFileOnly) {\n            try {\n              zkHost = getZkHost(cli);\n            } catch (Exception ex) {\n              if (cli.hasOption(\"zkHost\")) {\n                CLIO.out(\"Couldn't get ZooKeeper host. Please make sure that ZooKeeper is running and the correct zkHost has been passed in.\");\n              } else {\n                CLIO.out(\"Couldn't get ZooKeeper host. Please make sure Solr is running in cloud mode, or a zkHost has been passed in.\");\n              }\n              exit(1);\n            }\n            if (zkHost == null) {\n              if (cli.hasOption(\"zkHost\")) {\n                CLIO.out(\"Couldn't get ZooKeeper host. Please make sure that ZooKeeper is running and the correct zkHost has been passed in.\");\n              } else {\n                CLIO.out(\"Couldn't get ZooKeeper host. Please make sure Solr is running in cloud mode, or a zkHost has been passed in.\");\n              }\n              exit(1);\n            }\n\n            // check if security is already enabled or not\n            try (SolrZkClient zkClient = new SolrZkClient(zkHost, 10000)) {\n              if (zkClient.exists(\"/security.json\", true)) {\n                byte oldSecurityBytes[] = zkClient.getData(\"/security.json\", null, null, true);\n                if (!\"{}\".equals(new String(oldSecurityBytes, StandardCharsets.UTF_8).trim())) {\n                  CLIO.out(\"Security is already enabled. You can disable it with 'bin/solr auth disable'. Existing security.json: \\n\"\n                      + new String(oldSecurityBytes, StandardCharsets.UTF_8));\n                  exit(1);\n                }\n              }\n            }\n          }\n\n          String username, password;\n          if (cli.hasOption(\"credentials\")) {\n            String credentials = cli.getOptionValue(\"credentials\");\n            username = credentials.split(\":\")[0];\n            password = credentials.split(\":\")[1];\n          } else {\n            Console console = System.console();\n            username = console.readLine(\"Enter username: \");\n            password = new String(console.readPassword(\"Enter password: \"));\n          }\n\n          boolean blockUnknown = Boolean.valueOf(cli.getOptionValue(\"blockUnknown\", \"false\"));\n\n          String securityJson = \"{\" +\n              \"\\n  \\\"authentication\\\":{\" +\n              \"\\n   \\\"blockUnknown\\\": \" + blockUnknown + \",\" +\n              \"\\n   \\\"class\\\":\\\"solr.BasicAuthPlugin\\\",\" +\n              \"\\n   \\\"credentials\\\":{\\\"\" + username + \"\\\":\\\"\" + Sha256AuthenticationProvider.getSaltedHashedValue(password) + \"\\\"}\" +\n              \"\\n  },\" +\n              \"\\n  \\\"authorization\\\":{\" +\n              \"\\n   \\\"class\\\":\\\"solr.RuleBasedAuthorizationPlugin\\\",\" +\n              \"\\n   \\\"permissions\\\":[\" +\n              \"\\n {\\\"name\\\":\\\"security-edit\\\", \\\"role\\\":\\\"admin\\\"},\" +\n              \"\\n {\\\"name\\\":\\\"collection-admin-edit\\\", \\\"role\\\":\\\"admin\\\"},\" +\n              \"\\n {\\\"name\\\":\\\"core-admin-edit\\\", \\\"role\\\":\\\"admin\\\"}\" +\n              \"\\n   ],\" +\n              \"\\n   \\\"user-role\\\":{\\\"\" + username + \"\\\":\\\"admin\\\"}\" +\n              \"\\n  }\" +\n              \"\\n}\";\n\n          if (!updateIncludeFileOnly) {\n            echoIfVerbose(\"Uploading following security.json: \" + securityJson, cli);\n            try (SolrZkClient zkClient = new SolrZkClient(zkHost, 10000)) {\n              zkClient.setData(\"/security.json\", securityJson.getBytes(StandardCharsets.UTF_8), true);\n            }\n          }\n\n          String solrIncludeFilename = cli.getOptionValue(\"solrIncludeFile\");\n          File includeFile = new File(solrIncludeFilename);\n          if (includeFile.exists() == false || includeFile.canWrite() == false) {\n            CLIO.out(\"Solr include file \" + solrIncludeFilename + \" doesn't exist or is not writeable.\");\n            printAuthEnablingInstructions(username, password);\n            System.exit(0);\n          }\n          String authConfDir = cli.getOptionValue(\"authConfDir\");\n          File basicAuthConfFile = new File(authConfDir + File.separator + \"basicAuth.conf\");\n\n          if (basicAuthConfFile.getParentFile().canWrite() == false) {\n            CLIO.out(\"Cannot write to file: \" + basicAuthConfFile.getAbsolutePath());\n            printAuthEnablingInstructions(username, password);\n            System.exit(0);\n          }\n\n          FileUtils.writeStringToFile(basicAuthConfFile,\n              \"httpBasicAuthUser=\" + username + \"\\nhttpBasicAuthPassword=\" + password, StandardCharsets.UTF_8);\n\n          // update the solr.in.sh file to contain the necessary authentication lines\n          updateIncludeFileEnableAuth(includeFile, basicAuthConfFile.getAbsolutePath(), null, cli);\n          final String successMessage = String.format(Locale.ROOT,\n              \"Successfully enabled basic auth with username [%s] and password [%s].\", username, password);\n          echo(successMessage);\n          return 0;\n\n        case \"disable\":\n          if (!updateIncludeFileOnly) {\n            zkHost = getZkHost(cli);\n            if (zkHost == null) {\n              stdout.print(\"ZK Host not found. Solr should be running in cloud mode\");\n              exit(1);\n            }\n\n            echoIfVerbose(\"Uploading following security.json: {}\", cli);\n\n            try (SolrZkClient zkClient = new SolrZkClient(zkHost, 10000)) {\n              zkClient.setData(\"/security.json\", \"{}\".getBytes(StandardCharsets.UTF_8), true);\n            }\n          }\n\n          solrIncludeFilename = cli.getOptionValue(\"solrIncludeFile\");\n          includeFile = new File(solrIncludeFilename);\n          if (!includeFile.exists() || !includeFile.canWrite()) {\n            CLIO.out(\"Solr include file \" + solrIncludeFilename + \" doesn't exist or is not writeable.\");\n            CLIO.out(\"Security has been disabled. Please remove any SOLR_AUTH_TYPE or SOLR_AUTHENTICATION_OPTS configuration from solr.in.sh/solr.in.cmd.\\n\");\n            System.exit(0);\n          }\n\n          // update the solr.in.sh file to comment out the necessary authentication lines\n          updateIncludeFileDisableAuth(includeFile, cli);\n          return 0;\n\n        default:\n          CLIO.out(\"Valid auth commands are: enable, disable\");\n          exit(1);\n      }\n\n      CLIO.out(\"Options not understood.\");\n      new HelpFormatter().printHelp(\"bin/solr auth <enable|disable> [OPTIONS]\", getToolOptions(this));\n      return 1;\n    }\n\n","sourceOld":"    private int handleBasicAuth(CommandLine cli) throws Exception {\n      String cmd = cli.getArgs()[0];\n      boolean prompt = Boolean.parseBoolean(cli.getOptionValue(\"prompt\", \"false\"));\n      boolean updateIncludeFileOnly = Boolean.parseBoolean(cli.getOptionValue(\"updateIncludeFileOnly\", \"false\"));\n      switch (cmd) {\n        case \"enable\":\n          if (!prompt && !cli.hasOption(\"credentials\")) {\n            System.out.println(\"Option -credentials or -prompt is required with enable.\");\n            new HelpFormatter().printHelp(\"bin/solr auth <enable|disable> [OPTIONS]\", getToolOptions(this));\n            exit(1);\n          } else if (!prompt && (cli.getOptionValue(\"credentials\") == null || !cli.getOptionValue(\"credentials\").contains(\":\"))) {\n            System.out.println(\"Option -credentials is not in correct format.\");\n            new HelpFormatter().printHelp(\"bin/solr auth <enable|disable> [OPTIONS]\", getToolOptions(this));\n            exit(1);\n          }\n\n          String zkHost = null;\n\n          if (!updateIncludeFileOnly) {\n            try {\n              zkHost = getZkHost(cli);\n            } catch (Exception ex) {\n              if (cli.hasOption(\"zkHost\")) {\n                System.out.println(\"Couldn't get ZooKeeper host. Please make sure that ZooKeeper is running and the correct zkHost has been passed in.\");\n              } else {\n                System.out.println(\"Couldn't get ZooKeeper host. Please make sure Solr is running in cloud mode, or a zkHost has been passed in.\");\n              }\n              exit(1);\n            }\n            if (zkHost == null) {\n              if (cli.hasOption(\"zkHost\")) {\n                System.out.println(\"Couldn't get ZooKeeper host. Please make sure that ZooKeeper is running and the correct zkHost has been passed in.\");\n              } else {\n                System.out.println(\"Couldn't get ZooKeeper host. Please make sure Solr is running in cloud mode, or a zkHost has been passed in.\");\n              }\n              exit(1);\n            }\n\n            // check if security is already enabled or not\n            try (SolrZkClient zkClient = new SolrZkClient(zkHost, 10000)) {\n              if (zkClient.exists(\"/security.json\", true)) {\n                byte oldSecurityBytes[] = zkClient.getData(\"/security.json\", null, null, true);\n                if (!\"{}\".equals(new String(oldSecurityBytes, StandardCharsets.UTF_8).trim())) {\n                  System.out.println(\"Security is already enabled. You can disable it with 'bin/solr auth disable'. Existing security.json: \\n\"\n                      + new String(oldSecurityBytes, StandardCharsets.UTF_8));\n                  exit(1);\n                }\n              }\n            }\n          }\n\n          String username, password;\n          if (cli.hasOption(\"credentials\")) {\n            String credentials = cli.getOptionValue(\"credentials\");\n            username = credentials.split(\":\")[0];\n            password = credentials.split(\":\")[1];\n          } else {\n            Console console = System.console();\n            username = console.readLine(\"Enter username: \");\n            password = new String(console.readPassword(\"Enter password: \"));\n          }\n\n          boolean blockUnknown = Boolean.valueOf(cli.getOptionValue(\"blockUnknown\", \"false\"));\n\n          String securityJson = \"{\" +\n              \"\\n  \\\"authentication\\\":{\" +\n              \"\\n   \\\"blockUnknown\\\": \" + blockUnknown + \",\" +\n              \"\\n   \\\"class\\\":\\\"solr.BasicAuthPlugin\\\",\" +\n              \"\\n   \\\"credentials\\\":{\\\"\" + username + \"\\\":\\\"\" + Sha256AuthenticationProvider.getSaltedHashedValue(password) + \"\\\"}\" +\n              \"\\n  },\" +\n              \"\\n  \\\"authorization\\\":{\" +\n              \"\\n   \\\"class\\\":\\\"solr.RuleBasedAuthorizationPlugin\\\",\" +\n              \"\\n   \\\"permissions\\\":[\" +\n              \"\\n {\\\"name\\\":\\\"security-edit\\\", \\\"role\\\":\\\"admin\\\"},\" +\n              \"\\n {\\\"name\\\":\\\"collection-admin-edit\\\", \\\"role\\\":\\\"admin\\\"},\" +\n              \"\\n {\\\"name\\\":\\\"core-admin-edit\\\", \\\"role\\\":\\\"admin\\\"}\" +\n              \"\\n   ],\" +\n              \"\\n   \\\"user-role\\\":{\\\"\" + username + \"\\\":\\\"admin\\\"}\" +\n              \"\\n  }\" +\n              \"\\n}\";\n\n          if (!updateIncludeFileOnly) {\n            echoIfVerbose(\"Uploading following security.json: \" + securityJson, cli);\n            try (SolrZkClient zkClient = new SolrZkClient(zkHost, 10000)) {\n              zkClient.setData(\"/security.json\", securityJson.getBytes(StandardCharsets.UTF_8), true);\n            }\n          }\n\n          String solrIncludeFilename = cli.getOptionValue(\"solrIncludeFile\");\n          File includeFile = new File(solrIncludeFilename);\n          if (includeFile.exists() == false || includeFile.canWrite() == false) {\n            System.out.println(\"Solr include file \" + solrIncludeFilename + \" doesn't exist or is not writeable.\");\n            printAuthEnablingInstructions(username, password);\n            System.exit(0);\n          }\n          String authConfDir = cli.getOptionValue(\"authConfDir\");\n          File basicAuthConfFile = new File(authConfDir + File.separator + \"basicAuth.conf\");\n\n          if (basicAuthConfFile.getParentFile().canWrite() == false) {\n            System.out.println(\"Cannot write to file: \" + basicAuthConfFile.getAbsolutePath());\n            printAuthEnablingInstructions(username, password);\n            System.exit(0);\n          }\n\n          FileUtils.writeStringToFile(basicAuthConfFile,\n              \"httpBasicAuthUser=\" + username + \"\\nhttpBasicAuthPassword=\" + password, StandardCharsets.UTF_8);\n\n          // update the solr.in.sh file to contain the necessary authentication lines\n          updateIncludeFileEnableAuth(includeFile, basicAuthConfFile.getAbsolutePath(), null, cli);\n          final String successMessage = String.format(Locale.ROOT,\n              \"Successfully enabled basic auth with username [%s] and password [%s].\", username, password);\n          echo(successMessage);\n          return 0;\n\n        case \"disable\":\n          if (!updateIncludeFileOnly) {\n            zkHost = getZkHost(cli);\n            if (zkHost == null) {\n              stdout.print(\"ZK Host not found. Solr should be running in cloud mode\");\n              exit(1);\n            }\n\n            echoIfVerbose(\"Uploading following security.json: {}\", cli);\n\n            try (SolrZkClient zkClient = new SolrZkClient(zkHost, 10000)) {\n              zkClient.setData(\"/security.json\", \"{}\".getBytes(StandardCharsets.UTF_8), true);\n            }\n          }\n\n          solrIncludeFilename = cli.getOptionValue(\"solrIncludeFile\");\n          includeFile = new File(solrIncludeFilename);\n          if (!includeFile.exists() || !includeFile.canWrite()) {\n            System.out.println(\"Solr include file \" + solrIncludeFilename + \" doesn't exist or is not writeable.\");\n            System.out.println(\"Security has been disabled. Please remove any SOLR_AUTH_TYPE or SOLR_AUTHENTICATION_OPTS configuration from solr.in.sh/solr.in.cmd.\\n\");\n            System.exit(0);\n          }\n\n          // update the solr.in.sh file to comment out the necessary authentication lines\n          updateIncludeFileDisableAuth(includeFile, cli);\n          return 0;\n\n        default:\n          System.out.println(\"Valid auth commands are: enable, disable\");\n          exit(1);\n      }\n\n      System.out.println(\"Options not understood.\");\n      new HelpFormatter().printHelp(\"bin/solr auth <enable|disable> [OPTIONS]\", getToolOptions(this));\n      return 1;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5580de1ca6cf6a8ac7b40d0008b458bb1319d7fd","date":1567056470,"type":3,"author":"Marcus","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.AuthTool#handleBasicAuth(CommandLine).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.AuthTool#handleBasicAuth(CommandLine).mjava","sourceNew":"    private int handleBasicAuth(CommandLine cli) throws Exception {\n      String cmd = cli.getArgs()[0];\n      boolean prompt = Boolean.parseBoolean(cli.getOptionValue(\"prompt\", \"false\"));\n      boolean updateIncludeFileOnly = Boolean.parseBoolean(cli.getOptionValue(\"updateIncludeFileOnly\", \"false\"));\n      switch (cmd) {\n        case \"enable\":\n          if (!prompt && !cli.hasOption(\"credentials\")) {\n            CLIO.out(\"Option -credentials or -prompt is required with enable.\");\n            new HelpFormatter().printHelp(\"bin/solr auth <enable|disable> [OPTIONS]\", getToolOptions(this));\n            exit(1);\n          } else if (!prompt && (cli.getOptionValue(\"credentials\") == null || !cli.getOptionValue(\"credentials\").contains(\":\"))) {\n            CLIO.out(\"Option -credentials is not in correct format.\");\n            new HelpFormatter().printHelp(\"bin/solr auth <enable|disable> [OPTIONS]\", getToolOptions(this));\n            exit(1);\n          }\n\n          String zkHost = null;\n\n          if (!updateIncludeFileOnly) {\n            try {\n              zkHost = getZkHost(cli);\n            } catch (Exception ex) {\n              if (cli.hasOption(\"zkHost\")) {\n                CLIO.out(\"Couldn't get ZooKeeper host. Please make sure that ZooKeeper is running and the correct zkHost has been passed in.\");\n              } else {\n                CLIO.out(\"Couldn't get ZooKeeper host. Please make sure Solr is running in cloud mode, or a zkHost has been passed in.\");\n              }\n              exit(1);\n            }\n            if (zkHost == null) {\n              if (cli.hasOption(\"zkHost\")) {\n                CLIO.out(\"Couldn't get ZooKeeper host. Please make sure that ZooKeeper is running and the correct zkHost has been passed in.\");\n              } else {\n                CLIO.out(\"Couldn't get ZooKeeper host. Please make sure Solr is running in cloud mode, or a zkHost has been passed in.\");\n              }\n              exit(1);\n            }\n\n            // check if security is already enabled or not\n            try (SolrZkClient zkClient = new SolrZkClient(zkHost, 10000)) {\n              if (zkClient.exists(\"/security.json\", true)) {\n                byte oldSecurityBytes[] = zkClient.getData(\"/security.json\", null, null, true);\n                if (!\"{}\".equals(new String(oldSecurityBytes, StandardCharsets.UTF_8).trim())) {\n                  CLIO.out(\"Security is already enabled. You can disable it with 'bin/solr auth disable'. Existing security.json: \\n\"\n                      + new String(oldSecurityBytes, StandardCharsets.UTF_8));\n                  exit(1);\n                }\n              }\n            }\n          }\n\n          String username, password;\n          if (cli.hasOption(\"credentials\")) {\n            String credentials = cli.getOptionValue(\"credentials\");\n            username = credentials.split(\":\")[0];\n            password = credentials.split(\":\")[1];\n          } else {\n            Console console = System.console();\n            username = console.readLine(\"Enter username: \");\n            password = new String(console.readPassword(\"Enter password: \"));\n          }\n\n          boolean blockUnknown = Boolean.valueOf(cli.getOptionValue(\"blockUnknown\", \"true\"));\n\n          String securityJson = \"{\" +\n              \"\\n  \\\"authentication\\\":{\" +\n              \"\\n   \\\"blockUnknown\\\": \" + blockUnknown + \",\" +\n              \"\\n   \\\"class\\\":\\\"solr.BasicAuthPlugin\\\",\" +\n              \"\\n   \\\"credentials\\\":{\\\"\" + username + \"\\\":\\\"\" + Sha256AuthenticationProvider.getSaltedHashedValue(password) + \"\\\"}\" +\n              \"\\n  },\" +\n              \"\\n  \\\"authorization\\\":{\" +\n              \"\\n   \\\"class\\\":\\\"solr.RuleBasedAuthorizationPlugin\\\",\" +\n              \"\\n   \\\"permissions\\\":[\" +\n              \"\\n {\\\"name\\\":\\\"security-edit\\\", \\\"role\\\":\\\"admin\\\"},\" +\n              \"\\n {\\\"name\\\":\\\"collection-admin-edit\\\", \\\"role\\\":\\\"admin\\\"},\" +\n              \"\\n {\\\"name\\\":\\\"core-admin-edit\\\", \\\"role\\\":\\\"admin\\\"}\" +\n              \"\\n   ],\" +\n              \"\\n   \\\"user-role\\\":{\\\"\" + username + \"\\\":\\\"admin\\\"}\" +\n              \"\\n  }\" +\n              \"\\n}\";\n\n          if (!updateIncludeFileOnly) {\n            echoIfVerbose(\"Uploading following security.json: \" + securityJson, cli);\n            try (SolrZkClient zkClient = new SolrZkClient(zkHost, 10000)) {\n              zkClient.setData(\"/security.json\", securityJson.getBytes(StandardCharsets.UTF_8), true);\n            }\n          }\n\n          String solrIncludeFilename = cli.getOptionValue(\"solrIncludeFile\");\n          File includeFile = new File(solrIncludeFilename);\n          if (includeFile.exists() == false || includeFile.canWrite() == false) {\n            CLIO.out(\"Solr include file \" + solrIncludeFilename + \" doesn't exist or is not writeable.\");\n            printAuthEnablingInstructions(username, password);\n            System.exit(0);\n          }\n          String authConfDir = cli.getOptionValue(\"authConfDir\");\n          File basicAuthConfFile = new File(authConfDir + File.separator + \"basicAuth.conf\");\n\n          if (basicAuthConfFile.getParentFile().canWrite() == false) {\n            CLIO.out(\"Cannot write to file: \" + basicAuthConfFile.getAbsolutePath());\n            printAuthEnablingInstructions(username, password);\n            System.exit(0);\n          }\n\n          FileUtils.writeStringToFile(basicAuthConfFile,\n              \"httpBasicAuthUser=\" + username + \"\\nhttpBasicAuthPassword=\" + password, StandardCharsets.UTF_8);\n\n          // update the solr.in.sh file to contain the necessary authentication lines\n          updateIncludeFileEnableAuth(includeFile, basicAuthConfFile.getAbsolutePath(), null, cli);\n          final String successMessage = String.format(Locale.ROOT,\n              \"Successfully enabled basic auth with username [%s] and password [%s].\", username, password);\n          echo(successMessage);\n          return 0;\n\n        case \"disable\":\n          if (!updateIncludeFileOnly) {\n            zkHost = getZkHost(cli);\n            if (zkHost == null) {\n              stdout.print(\"ZK Host not found. Solr should be running in cloud mode\");\n              exit(1);\n            }\n\n            echoIfVerbose(\"Uploading following security.json: {}\", cli);\n\n            try (SolrZkClient zkClient = new SolrZkClient(zkHost, 10000)) {\n              zkClient.setData(\"/security.json\", \"{}\".getBytes(StandardCharsets.UTF_8), true);\n            }\n          }\n\n          solrIncludeFilename = cli.getOptionValue(\"solrIncludeFile\");\n          includeFile = new File(solrIncludeFilename);\n          if (!includeFile.exists() || !includeFile.canWrite()) {\n            CLIO.out(\"Solr include file \" + solrIncludeFilename + \" doesn't exist or is not writeable.\");\n            CLIO.out(\"Security has been disabled. Please remove any SOLR_AUTH_TYPE or SOLR_AUTHENTICATION_OPTS configuration from solr.in.sh/solr.in.cmd.\\n\");\n            System.exit(0);\n          }\n\n          // update the solr.in.sh file to comment out the necessary authentication lines\n          updateIncludeFileDisableAuth(includeFile, cli);\n          return 0;\n\n        default:\n          CLIO.out(\"Valid auth commands are: enable, disable\");\n          exit(1);\n      }\n\n      CLIO.out(\"Options not understood.\");\n      new HelpFormatter().printHelp(\"bin/solr auth <enable|disable> [OPTIONS]\", getToolOptions(this));\n      return 1;\n    }\n\n","sourceOld":"    private int handleBasicAuth(CommandLine cli) throws Exception {\n      String cmd = cli.getArgs()[0];\n      boolean prompt = Boolean.parseBoolean(cli.getOptionValue(\"prompt\", \"false\"));\n      boolean updateIncludeFileOnly = Boolean.parseBoolean(cli.getOptionValue(\"updateIncludeFileOnly\", \"false\"));\n      switch (cmd) {\n        case \"enable\":\n          if (!prompt && !cli.hasOption(\"credentials\")) {\n            CLIO.out(\"Option -credentials or -prompt is required with enable.\");\n            new HelpFormatter().printHelp(\"bin/solr auth <enable|disable> [OPTIONS]\", getToolOptions(this));\n            exit(1);\n          } else if (!prompt && (cli.getOptionValue(\"credentials\") == null || !cli.getOptionValue(\"credentials\").contains(\":\"))) {\n            CLIO.out(\"Option -credentials is not in correct format.\");\n            new HelpFormatter().printHelp(\"bin/solr auth <enable|disable> [OPTIONS]\", getToolOptions(this));\n            exit(1);\n          }\n\n          String zkHost = null;\n\n          if (!updateIncludeFileOnly) {\n            try {\n              zkHost = getZkHost(cli);\n            } catch (Exception ex) {\n              if (cli.hasOption(\"zkHost\")) {\n                CLIO.out(\"Couldn't get ZooKeeper host. Please make sure that ZooKeeper is running and the correct zkHost has been passed in.\");\n              } else {\n                CLIO.out(\"Couldn't get ZooKeeper host. Please make sure Solr is running in cloud mode, or a zkHost has been passed in.\");\n              }\n              exit(1);\n            }\n            if (zkHost == null) {\n              if (cli.hasOption(\"zkHost\")) {\n                CLIO.out(\"Couldn't get ZooKeeper host. Please make sure that ZooKeeper is running and the correct zkHost has been passed in.\");\n              } else {\n                CLIO.out(\"Couldn't get ZooKeeper host. Please make sure Solr is running in cloud mode, or a zkHost has been passed in.\");\n              }\n              exit(1);\n            }\n\n            // check if security is already enabled or not\n            try (SolrZkClient zkClient = new SolrZkClient(zkHost, 10000)) {\n              if (zkClient.exists(\"/security.json\", true)) {\n                byte oldSecurityBytes[] = zkClient.getData(\"/security.json\", null, null, true);\n                if (!\"{}\".equals(new String(oldSecurityBytes, StandardCharsets.UTF_8).trim())) {\n                  CLIO.out(\"Security is already enabled. You can disable it with 'bin/solr auth disable'. Existing security.json: \\n\"\n                      + new String(oldSecurityBytes, StandardCharsets.UTF_8));\n                  exit(1);\n                }\n              }\n            }\n          }\n\n          String username, password;\n          if (cli.hasOption(\"credentials\")) {\n            String credentials = cli.getOptionValue(\"credentials\");\n            username = credentials.split(\":\")[0];\n            password = credentials.split(\":\")[1];\n          } else {\n            Console console = System.console();\n            username = console.readLine(\"Enter username: \");\n            password = new String(console.readPassword(\"Enter password: \"));\n          }\n\n          boolean blockUnknown = Boolean.valueOf(cli.getOptionValue(\"blockUnknown\", \"false\"));\n\n          String securityJson = \"{\" +\n              \"\\n  \\\"authentication\\\":{\" +\n              \"\\n   \\\"blockUnknown\\\": \" + blockUnknown + \",\" +\n              \"\\n   \\\"class\\\":\\\"solr.BasicAuthPlugin\\\",\" +\n              \"\\n   \\\"credentials\\\":{\\\"\" + username + \"\\\":\\\"\" + Sha256AuthenticationProvider.getSaltedHashedValue(password) + \"\\\"}\" +\n              \"\\n  },\" +\n              \"\\n  \\\"authorization\\\":{\" +\n              \"\\n   \\\"class\\\":\\\"solr.RuleBasedAuthorizationPlugin\\\",\" +\n              \"\\n   \\\"permissions\\\":[\" +\n              \"\\n {\\\"name\\\":\\\"security-edit\\\", \\\"role\\\":\\\"admin\\\"},\" +\n              \"\\n {\\\"name\\\":\\\"collection-admin-edit\\\", \\\"role\\\":\\\"admin\\\"},\" +\n              \"\\n {\\\"name\\\":\\\"core-admin-edit\\\", \\\"role\\\":\\\"admin\\\"}\" +\n              \"\\n   ],\" +\n              \"\\n   \\\"user-role\\\":{\\\"\" + username + \"\\\":\\\"admin\\\"}\" +\n              \"\\n  }\" +\n              \"\\n}\";\n\n          if (!updateIncludeFileOnly) {\n            echoIfVerbose(\"Uploading following security.json: \" + securityJson, cli);\n            try (SolrZkClient zkClient = new SolrZkClient(zkHost, 10000)) {\n              zkClient.setData(\"/security.json\", securityJson.getBytes(StandardCharsets.UTF_8), true);\n            }\n          }\n\n          String solrIncludeFilename = cli.getOptionValue(\"solrIncludeFile\");\n          File includeFile = new File(solrIncludeFilename);\n          if (includeFile.exists() == false || includeFile.canWrite() == false) {\n            CLIO.out(\"Solr include file \" + solrIncludeFilename + \" doesn't exist or is not writeable.\");\n            printAuthEnablingInstructions(username, password);\n            System.exit(0);\n          }\n          String authConfDir = cli.getOptionValue(\"authConfDir\");\n          File basicAuthConfFile = new File(authConfDir + File.separator + \"basicAuth.conf\");\n\n          if (basicAuthConfFile.getParentFile().canWrite() == false) {\n            CLIO.out(\"Cannot write to file: \" + basicAuthConfFile.getAbsolutePath());\n            printAuthEnablingInstructions(username, password);\n            System.exit(0);\n          }\n\n          FileUtils.writeStringToFile(basicAuthConfFile,\n              \"httpBasicAuthUser=\" + username + \"\\nhttpBasicAuthPassword=\" + password, StandardCharsets.UTF_8);\n\n          // update the solr.in.sh file to contain the necessary authentication lines\n          updateIncludeFileEnableAuth(includeFile, basicAuthConfFile.getAbsolutePath(), null, cli);\n          final String successMessage = String.format(Locale.ROOT,\n              \"Successfully enabled basic auth with username [%s] and password [%s].\", username, password);\n          echo(successMessage);\n          return 0;\n\n        case \"disable\":\n          if (!updateIncludeFileOnly) {\n            zkHost = getZkHost(cli);\n            if (zkHost == null) {\n              stdout.print(\"ZK Host not found. Solr should be running in cloud mode\");\n              exit(1);\n            }\n\n            echoIfVerbose(\"Uploading following security.json: {}\", cli);\n\n            try (SolrZkClient zkClient = new SolrZkClient(zkHost, 10000)) {\n              zkClient.setData(\"/security.json\", \"{}\".getBytes(StandardCharsets.UTF_8), true);\n            }\n          }\n\n          solrIncludeFilename = cli.getOptionValue(\"solrIncludeFile\");\n          includeFile = new File(solrIncludeFilename);\n          if (!includeFile.exists() || !includeFile.canWrite()) {\n            CLIO.out(\"Solr include file \" + solrIncludeFilename + \" doesn't exist or is not writeable.\");\n            CLIO.out(\"Security has been disabled. Please remove any SOLR_AUTH_TYPE or SOLR_AUTHENTICATION_OPTS configuration from solr.in.sh/solr.in.cmd.\\n\");\n            System.exit(0);\n          }\n\n          // update the solr.in.sh file to comment out the necessary authentication lines\n          updateIncludeFileDisableAuth(includeFile, cli);\n          return 0;\n\n        default:\n          CLIO.out(\"Valid auth commands are: enable, disable\");\n          exit(1);\n      }\n\n      CLIO.out(\"Options not understood.\");\n      new HelpFormatter().printHelp(\"bin/solr auth <enable|disable> [OPTIONS]\", getToolOptions(this));\n      return 1;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["6e12ffe0fc2f16d13edb8f82cd33da7cbedda264","b79a5db147a1c6f95d1625ddbc3561ef56955225"],"5580de1ca6cf6a8ac7b40d0008b458bb1319d7fd":["0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15"],"3a7809d1d753b67f48b1a706e17034bf8b624ea3":["fb569fd721c41eafc2a2d788499a7df490c7f1a5","6e12ffe0fc2f16d13edb8f82cd33da7cbedda264"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fb569fd721c41eafc2a2d788499a7df490c7f1a5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f9a989a32a073c55e3aef6f807a3474184bbcf49"],"6e12ffe0fc2f16d13edb8f82cd33da7cbedda264":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15":["b79a5db147a1c6f95d1625ddbc3561ef56955225"],"f9a989a32a073c55e3aef6f807a3474184bbcf49":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6e12ffe0fc2f16d13edb8f82cd33da7cbedda264"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5580de1ca6cf6a8ac7b40d0008b458bb1319d7fd"],"b79a5db147a1c6f95d1625ddbc3561ef56955225":["6e12ffe0fc2f16d13edb8f82cd33da7cbedda264"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["6e12ffe0fc2f16d13edb8f82cd33da7cbedda264","b79a5db147a1c6f95d1625ddbc3561ef56955225"]},"commit2Childs":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"5580de1ca6cf6a8ac7b40d0008b458bb1319d7fd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a7809d1d753b67f48b1a706e17034bf8b624ea3":[],"fb569fd721c41eafc2a2d788499a7df490c7f1a5":["3a7809d1d753b67f48b1a706e17034bf8b624ea3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fb569fd721c41eafc2a2d788499a7df490c7f1a5","6e12ffe0fc2f16d13edb8f82cd33da7cbedda264","f9a989a32a073c55e3aef6f807a3474184bbcf49"],"6e12ffe0fc2f16d13edb8f82cd33da7cbedda264":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","3a7809d1d753b67f48b1a706e17034bf8b624ea3","f9a989a32a073c55e3aef6f807a3474184bbcf49","b79a5db147a1c6f95d1625ddbc3561ef56955225","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15":["5580de1ca6cf6a8ac7b40d0008b458bb1319d7fd"],"f9a989a32a073c55e3aef6f807a3474184bbcf49":["fb569fd721c41eafc2a2d788499a7df490c7f1a5"],"b79a5db147a1c6f95d1625ddbc3561ef56955225":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","3a7809d1d753b67f48b1a706e17034bf8b624ea3","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}