{"path":"lucene/core/src/java/org/apache/lucene/index/ReadersAndLiveDocs#getReader(boolean,IOContext).mjava","commits":[{"id":"e072d0b1fc19e0533d8ce432eed245196bca6fde","date":1379265112,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/ReadersAndLiveDocs#getReader(boolean,IOContext).mjava","pathOld":"/dev/null","sourceNew":"  /** Returns a {@link SegmentReader} while applying field updates if requested. */\n  public SegmentReader getReader(boolean applyFieldUpdates, IOContext context) throws IOException {\n    // if we need to apply field updates, we call writeLiveDocs and change\n    // SegmentInfos. Therefore must hold the lock on IndexWriter. This code\n    // ensures that readers that don't need to apply updates don't pay the\n    // cost of obtaining it.\n    if (applyFieldUpdates && hasFieldUpdates()) {\n      synchronized (writer) {\n        return doGetReaderWithUpdates(context);\n      }\n    } else {\n      return doGetReader(context);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"75e4e08ceec867127dcd9913a5ebbc46cf85a28d","date":1379651991,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/ReadersAndLiveDocs#getReader(boolean,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/ReadersAndLiveDocs#getReader(boolean,IOContext).mjava","sourceNew":"  /** Returns a {@link SegmentReader} while applying field updates if requested. */\n  public SegmentReader getReader(boolean applyFieldUpdates, IOContext context) throws IOException {\n    // if we need to apply field updates, we call writeLiveDocs and change\n    // SegmentInfos. Therefore must hold the lock on IndexWriter. This code\n    // ensures that readers that don't need to apply updates don't pay the\n    // cost of obtaining it.\n    if (applyFieldUpdates && hasFieldUpdates()) {\n      synchronized (writer) {\n//        System.out.println(\"[\" + Thread.currentThread().getName() + \"] RLD.getReader: getReaderWithUpdates \" + info);\n        return doGetReaderWithUpdates(context);\n      }\n    } else {\n//      System.out.println(\"[\" + Thread.currentThread().getName() + \"] RLD.getReader: getReader no updates \" + info);\n      return doGetReader(context);\n    }\n  }\n\n","sourceOld":"  /** Returns a {@link SegmentReader} while applying field updates if requested. */\n  public SegmentReader getReader(boolean applyFieldUpdates, IOContext context) throws IOException {\n    // if we need to apply field updates, we call writeLiveDocs and change\n    // SegmentInfos. Therefore must hold the lock on IndexWriter. This code\n    // ensures that readers that don't need to apply updates don't pay the\n    // cost of obtaining it.\n    if (applyFieldUpdates && hasFieldUpdates()) {\n      synchronized (writer) {\n        return doGetReaderWithUpdates(context);\n      }\n    } else {\n      return doGetReader(context);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1bae040fd1d5e03e0d8d695a9c25cf4f402e7ffe","date":1381909398,"type":4,"author":"Shai Erera","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/ReadersAndLiveDocs#getReader(boolean,IOContext).mjava","sourceNew":null,"sourceOld":"  /** Returns a {@link SegmentReader} while applying field updates if requested. */\n  public SegmentReader getReader(boolean applyFieldUpdates, IOContext context) throws IOException {\n    // if we need to apply field updates, we call writeLiveDocs and change\n    // SegmentInfos. Therefore must hold the lock on IndexWriter. This code\n    // ensures that readers that don't need to apply updates don't pay the\n    // cost of obtaining it.\n    if (applyFieldUpdates && hasFieldUpdates()) {\n      synchronized (writer) {\n//        System.out.println(\"[\" + Thread.currentThread().getName() + \"] RLD.getReader: getReaderWithUpdates \" + info);\n        return doGetReaderWithUpdates(context);\n      }\n    } else {\n//      System.out.println(\"[\" + Thread.currentThread().getName() + \"] RLD.getReader: getReader no updates \" + info);\n      return doGetReader(context);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e072d0b1fc19e0533d8ce432eed245196bca6fde":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"75e4e08ceec867127dcd9913a5ebbc46cf85a28d":["e072d0b1fc19e0533d8ce432eed245196bca6fde"],"1bae040fd1d5e03e0d8d695a9c25cf4f402e7ffe":["75e4e08ceec867127dcd9913a5ebbc46cf85a28d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1bae040fd1d5e03e0d8d695a9c25cf4f402e7ffe"]},"commit2Childs":{"e072d0b1fc19e0533d8ce432eed245196bca6fde":["75e4e08ceec867127dcd9913a5ebbc46cf85a28d"],"75e4e08ceec867127dcd9913a5ebbc46cf85a28d":["1bae040fd1d5e03e0d8d695a9c25cf4f402e7ffe"],"1bae040fd1d5e03e0d8d695a9c25cf4f402e7ffe":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e072d0b1fc19e0533d8ce432eed245196bca6fde"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}