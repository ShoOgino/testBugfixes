{"path":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/tree/DateRangePrefixTree#toCalendar(UnitNRShape).mjava","commits":[{"id":"112d77ac8d3e10a362516ad834c9a11d35c94234","date":1456784319,"type":1,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/tree/DateRangePrefixTree#toCalendar(UnitNRShape).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/DateRangePrefixTree#toCalendar(UnitNRShape).mjava","sourceNew":"  /** Converts the {@link org.apache.lucene.spatial.prefix.tree.NumberRangePrefixTree.UnitNRShape} shape to a\n   * corresponding Calendar that is cleared below its level. */\n  public Calendar toCalendar(UnitNRShape lv) {\n    if (lv.getLevel() == 0)\n      return newCal();\n    if (comparePrefix(lv, minLV) <= 0) {//shouldn't typically happen; sometimes in a debugger\n      return (Calendar) MINCAL.clone();//full precision; truncation would cause underflow\n    }\n    assert comparePrefix(lv, maxLV) <= 0;\n    Calendar cal = newCal();\n\n    int yearAdj = lv.getValAtLevel(1) * 1_000_000;\n    if (lv.getLevel() > 1) {\n      yearAdj += lv.getValAtLevel(2) * 1000;\n      if (lv.getLevel() > 2) {\n        yearAdj += lv.getValAtLevel(3);\n      }\n    }\n    if (yearAdj > AD_YEAR_BASE) {\n      cal.set(Calendar.ERA, 1);\n      cal.set(Calendar.YEAR, yearAdj - AD_YEAR_BASE);//setting the year resets the era\n    } else {\n      cal.set(Calendar.ERA, 0);//we assert this \"sticks\" at the end\n      cal.set(Calendar.YEAR, (AD_YEAR_BASE - yearAdj) + 1);\n    }\n    for (int level = yearLevel+1; level <= lv.getLevel(); level++) {\n      int field = FIELD_BY_LEVEL[level];\n      cal.set(field, lv.getValAtLevel(level) + cal.getActualMinimum(field));\n    }\n    assert yearAdj > AD_YEAR_BASE || ((Calendar)cal.clone()).get(Calendar.ERA) == 0 : \"ERA / YEAR underflow\";\n    return cal;\n  }\n\n","sourceOld":"  /** Converts the {@link org.apache.lucene.spatial.prefix.tree.NumberRangePrefixTree.UnitNRShape} shape to a\n   * corresponding Calendar that is cleared below its level. */\n  public Calendar toCalendar(UnitNRShape lv) {\n    if (lv.getLevel() == 0)\n      return newCal();\n    if (comparePrefix(lv, minLV) <= 0) {//shouldn't typically happen; sometimes in a debugger\n      return (Calendar) MINCAL.clone();//full precision; truncation would cause underflow\n    }\n    assert comparePrefix(lv, maxLV) <= 0;\n    Calendar cal = newCal();\n\n    int yearAdj = lv.getValAtLevel(1) * 1_000_000;\n    if (lv.getLevel() > 1) {\n      yearAdj += lv.getValAtLevel(2) * 1000;\n      if (lv.getLevel() > 2) {\n        yearAdj += lv.getValAtLevel(3);\n      }\n    }\n    if (yearAdj > AD_YEAR_BASE) {\n      cal.set(Calendar.ERA, 1);\n      cal.set(Calendar.YEAR, yearAdj - AD_YEAR_BASE);//setting the year resets the era\n    } else {\n      cal.set(Calendar.ERA, 0);//we assert this \"sticks\" at the end\n      cal.set(Calendar.YEAR, (AD_YEAR_BASE - yearAdj) + 1);\n    }\n    for (int level = yearLevel+1; level <= lv.getLevel(); level++) {\n      int field = FIELD_BY_LEVEL[level];\n      cal.set(field, lv.getValAtLevel(level) + cal.getActualMinimum(field));\n    }\n    assert yearAdj > AD_YEAR_BASE || ((Calendar)cal.clone()).get(Calendar.ERA) == 0 : \"ERA / YEAR underflow\";\n    return cal;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af2638813028b254a88b418ebeafb541afb49653","date":1456804822,"type":1,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/tree/DateRangePrefixTree#toCalendar(UnitNRShape).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/DateRangePrefixTree#toCalendar(UnitNRShape).mjava","sourceNew":"  /** Converts the {@link org.apache.lucene.spatial.prefix.tree.NumberRangePrefixTree.UnitNRShape} shape to a\n   * corresponding Calendar that is cleared below its level. */\n  public Calendar toCalendar(UnitNRShape lv) {\n    if (lv.getLevel() == 0)\n      return newCal();\n    if (comparePrefix(lv, minLV) <= 0) {//shouldn't typically happen; sometimes in a debugger\n      return (Calendar) MINCAL.clone();//full precision; truncation would cause underflow\n    }\n    assert comparePrefix(lv, maxLV) <= 0;\n    Calendar cal = newCal();\n\n    int yearAdj = lv.getValAtLevel(1) * 1_000_000;\n    if (lv.getLevel() > 1) {\n      yearAdj += lv.getValAtLevel(2) * 1000;\n      if (lv.getLevel() > 2) {\n        yearAdj += lv.getValAtLevel(3);\n      }\n    }\n    if (yearAdj > AD_YEAR_BASE) {\n      cal.set(Calendar.ERA, 1);\n      cal.set(Calendar.YEAR, yearAdj - AD_YEAR_BASE);//setting the year resets the era\n    } else {\n      cal.set(Calendar.ERA, 0);//we assert this \"sticks\" at the end\n      cal.set(Calendar.YEAR, (AD_YEAR_BASE - yearAdj) + 1);\n    }\n    for (int level = yearLevel+1; level <= lv.getLevel(); level++) {\n      int field = FIELD_BY_LEVEL[level];\n      cal.set(field, lv.getValAtLevel(level) + cal.getActualMinimum(field));\n    }\n    assert yearAdj > AD_YEAR_BASE || ((Calendar)cal.clone()).get(Calendar.ERA) == 0 : \"ERA / YEAR underflow\";\n    return cal;\n  }\n\n","sourceOld":"  /** Converts the {@link org.apache.lucene.spatial.prefix.tree.NumberRangePrefixTree.UnitNRShape} shape to a\n   * corresponding Calendar that is cleared below its level. */\n  public Calendar toCalendar(UnitNRShape lv) {\n    if (lv.getLevel() == 0)\n      return newCal();\n    if (comparePrefix(lv, minLV) <= 0) {//shouldn't typically happen; sometimes in a debugger\n      return (Calendar) MINCAL.clone();//full precision; truncation would cause underflow\n    }\n    assert comparePrefix(lv, maxLV) <= 0;\n    Calendar cal = newCal();\n\n    int yearAdj = lv.getValAtLevel(1) * 1_000_000;\n    if (lv.getLevel() > 1) {\n      yearAdj += lv.getValAtLevel(2) * 1000;\n      if (lv.getLevel() > 2) {\n        yearAdj += lv.getValAtLevel(3);\n      }\n    }\n    if (yearAdj > AD_YEAR_BASE) {\n      cal.set(Calendar.ERA, 1);\n      cal.set(Calendar.YEAR, yearAdj - AD_YEAR_BASE);//setting the year resets the era\n    } else {\n      cal.set(Calendar.ERA, 0);//we assert this \"sticks\" at the end\n      cal.set(Calendar.YEAR, (AD_YEAR_BASE - yearAdj) + 1);\n    }\n    for (int level = yearLevel+1; level <= lv.getLevel(); level++) {\n      int field = FIELD_BY_LEVEL[level];\n      cal.set(field, lv.getValAtLevel(level) + cal.getActualMinimum(field));\n    }\n    assert yearAdj > AD_YEAR_BASE || ((Calendar)cal.clone()).get(Calendar.ERA) == 0 : \"ERA / YEAR underflow\";\n    return cal;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17bb09a766d49e4c0bb1049cebc1cf10236004f7","date":1463076873,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/tree/DateRangePrefixTree#toCalendar(UnitNRShape).mjava","pathOld":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/tree/DateRangePrefixTree#toCalendar(UnitNRShape).mjava","sourceNew":"  /** Converts the {@link org.apache.lucene.spatial.prefix.tree.NumberRangePrefixTree.UnitNRShape} shape to a\n   * corresponding Calendar that is cleared below its level. */\n  public Calendar toCalendar(UnitNRShape lv) {\n    if (lv.getLevel() == 0)\n      return newCal();\n    if (comparePrefix(lv, minLV) <= 0) {//shouldn't typically happen; sometimes in a debugger\n      return (Calendar) MINCAL.clone();//full precision; truncation would cause underflow\n    }\n    assert comparePrefix(lv, maxLV) <= 0;\n    Calendar cal = newCal();\n\n    int yearAdj = lv.getValAtLevel(1) * 1_000_000;\n    if (lv.getLevel() > 1) {\n      yearAdj += lv.getValAtLevel(2) * 1000;\n      if (lv.getLevel() > 2) {\n        yearAdj += lv.getValAtLevel(3);\n      }\n    }\n    if (yearAdj > AD_YEAR_BASE) {\n      cal.set(Calendar.ERA, 1);\n      cal.set(Calendar.YEAR, yearAdj - AD_YEAR_BASE);//setting the year resets the era\n    } else {\n      cal.set(Calendar.ERA, 0);//we assert this \"sticks\" at the end\n      cal.set(Calendar.YEAR, (AD_YEAR_BASE - yearAdj) + 1);\n    }\n    for (int level = YEAR_LEVEL + 1; level <= lv.getLevel(); level++) {\n      int field = FIELD_BY_LEVEL[level];\n      cal.set(field, lv.getValAtLevel(level) + cal.getActualMinimum(field));\n    }\n    assert yearAdj > AD_YEAR_BASE || ((Calendar)cal.clone()).get(Calendar.ERA) == 0 : \"ERA / YEAR underflow\";\n    return cal;\n  }\n\n","sourceOld":"  /** Converts the {@link org.apache.lucene.spatial.prefix.tree.NumberRangePrefixTree.UnitNRShape} shape to a\n   * corresponding Calendar that is cleared below its level. */\n  public Calendar toCalendar(UnitNRShape lv) {\n    if (lv.getLevel() == 0)\n      return newCal();\n    if (comparePrefix(lv, minLV) <= 0) {//shouldn't typically happen; sometimes in a debugger\n      return (Calendar) MINCAL.clone();//full precision; truncation would cause underflow\n    }\n    assert comparePrefix(lv, maxLV) <= 0;\n    Calendar cal = newCal();\n\n    int yearAdj = lv.getValAtLevel(1) * 1_000_000;\n    if (lv.getLevel() > 1) {\n      yearAdj += lv.getValAtLevel(2) * 1000;\n      if (lv.getLevel() > 2) {\n        yearAdj += lv.getValAtLevel(3);\n      }\n    }\n    if (yearAdj > AD_YEAR_BASE) {\n      cal.set(Calendar.ERA, 1);\n      cal.set(Calendar.YEAR, yearAdj - AD_YEAR_BASE);//setting the year resets the era\n    } else {\n      cal.set(Calendar.ERA, 0);//we assert this \"sticks\" at the end\n      cal.set(Calendar.YEAR, (AD_YEAR_BASE - yearAdj) + 1);\n    }\n    for (int level = yearLevel+1; level <= lv.getLevel(); level++) {\n      int field = FIELD_BY_LEVEL[level];\n      cal.set(field, lv.getValAtLevel(level) + cal.getActualMinimum(field));\n    }\n    assert yearAdj > AD_YEAR_BASE || ((Calendar)cal.clone()).get(Calendar.ERA) == 0 : \"ERA / YEAR underflow\";\n    return cal;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ad30c6a479e764150a3316e57263319775f1df2","date":1463395403,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/tree/DateRangePrefixTree#toCalendar(UnitNRShape).mjava","pathOld":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/tree/DateRangePrefixTree#toCalendar(UnitNRShape).mjava","sourceNew":"  /** Converts the {@link org.apache.lucene.spatial.prefix.tree.NumberRangePrefixTree.UnitNRShape} shape to a\n   * corresponding Calendar that is cleared below its level. */\n  public Calendar toCalendar(UnitNRShape lv) {\n    if (lv.getLevel() == 0)\n      return newCal();\n    if (comparePrefix(lv, minLV) <= 0) {//shouldn't typically happen; sometimes in a debugger\n      return (Calendar) MINCAL.clone();//full precision; truncation would cause underflow\n    }\n    assert comparePrefix(lv, maxLV) <= 0;\n    Calendar cal = newCal();\n\n    int yearAdj = lv.getValAtLevel(1) * 1_000_000;\n    if (lv.getLevel() > 1) {\n      yearAdj += lv.getValAtLevel(2) * 1000;\n      if (lv.getLevel() > 2) {\n        yearAdj += lv.getValAtLevel(3);\n      }\n    }\n    if (yearAdj > AD_YEAR_BASE) {\n      cal.set(Calendar.ERA, 1);\n      cal.set(Calendar.YEAR, yearAdj - AD_YEAR_BASE);//setting the year resets the era\n    } else {\n      cal.set(Calendar.ERA, 0);//we assert this \"sticks\" at the end\n      cal.set(Calendar.YEAR, (AD_YEAR_BASE - yearAdj) + 1);\n    }\n    for (int level = YEAR_LEVEL + 1; level <= lv.getLevel(); level++) {\n      int field = FIELD_BY_LEVEL[level];\n      cal.set(field, lv.getValAtLevel(level) + cal.getActualMinimum(field));\n    }\n    assert yearAdj > AD_YEAR_BASE || ((Calendar)cal.clone()).get(Calendar.ERA) == 0 : \"ERA / YEAR underflow\";\n    return cal;\n  }\n\n","sourceOld":"  /** Converts the {@link org.apache.lucene.spatial.prefix.tree.NumberRangePrefixTree.UnitNRShape} shape to a\n   * corresponding Calendar that is cleared below its level. */\n  public Calendar toCalendar(UnitNRShape lv) {\n    if (lv.getLevel() == 0)\n      return newCal();\n    if (comparePrefix(lv, minLV) <= 0) {//shouldn't typically happen; sometimes in a debugger\n      return (Calendar) MINCAL.clone();//full precision; truncation would cause underflow\n    }\n    assert comparePrefix(lv, maxLV) <= 0;\n    Calendar cal = newCal();\n\n    int yearAdj = lv.getValAtLevel(1) * 1_000_000;\n    if (lv.getLevel() > 1) {\n      yearAdj += lv.getValAtLevel(2) * 1000;\n      if (lv.getLevel() > 2) {\n        yearAdj += lv.getValAtLevel(3);\n      }\n    }\n    if (yearAdj > AD_YEAR_BASE) {\n      cal.set(Calendar.ERA, 1);\n      cal.set(Calendar.YEAR, yearAdj - AD_YEAR_BASE);//setting the year resets the era\n    } else {\n      cal.set(Calendar.ERA, 0);//we assert this \"sticks\" at the end\n      cal.set(Calendar.YEAR, (AD_YEAR_BASE - yearAdj) + 1);\n    }\n    for (int level = yearLevel+1; level <= lv.getLevel(); level++) {\n      int field = FIELD_BY_LEVEL[level];\n      cal.set(field, lv.getValAtLevel(level) + cal.getActualMinimum(field));\n    }\n    assert yearAdj > AD_YEAR_BASE || ((Calendar)cal.clone()).get(Calendar.ERA) == 0 : \"ERA / YEAR underflow\";\n    return cal;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/tree/DateRangePrefixTree#toCalendar(UnitNRShape).mjava","pathOld":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/tree/DateRangePrefixTree#toCalendar(UnitNRShape).mjava","sourceNew":"  /** Converts the {@link org.apache.lucene.spatial.prefix.tree.NumberRangePrefixTree.UnitNRShape} shape to a\n   * corresponding Calendar that is cleared below its level. */\n  public Calendar toCalendar(UnitNRShape lv) {\n    if (lv.getLevel() == 0)\n      return newCal();\n    if (comparePrefix(lv, minLV) <= 0) {//shouldn't typically happen; sometimes in a debugger\n      return (Calendar) MINCAL.clone();//full precision; truncation would cause underflow\n    }\n    assert comparePrefix(lv, maxLV) <= 0;\n    Calendar cal = newCal();\n\n    int yearAdj = lv.getValAtLevel(1) * 1_000_000;\n    if (lv.getLevel() > 1) {\n      yearAdj += lv.getValAtLevel(2) * 1000;\n      if (lv.getLevel() > 2) {\n        yearAdj += lv.getValAtLevel(3);\n      }\n    }\n    if (yearAdj > AD_YEAR_BASE) {\n      cal.set(Calendar.ERA, 1);\n      cal.set(Calendar.YEAR, yearAdj - AD_YEAR_BASE);//setting the year resets the era\n    } else {\n      cal.set(Calendar.ERA, 0);//we assert this \"sticks\" at the end\n      cal.set(Calendar.YEAR, (AD_YEAR_BASE - yearAdj) + 1);\n    }\n    for (int level = YEAR_LEVEL + 1; level <= lv.getLevel(); level++) {\n      int field = FIELD_BY_LEVEL[level];\n      cal.set(field, lv.getValAtLevel(level) + cal.getActualMinimum(field));\n    }\n    assert yearAdj > AD_YEAR_BASE || ((Calendar)cal.clone()).get(Calendar.ERA) == 0 : \"ERA / YEAR underflow\";\n    return cal;\n  }\n\n","sourceOld":"  /** Converts the {@link org.apache.lucene.spatial.prefix.tree.NumberRangePrefixTree.UnitNRShape} shape to a\n   * corresponding Calendar that is cleared below its level. */\n  public Calendar toCalendar(UnitNRShape lv) {\n    if (lv.getLevel() == 0)\n      return newCal();\n    if (comparePrefix(lv, minLV) <= 0) {//shouldn't typically happen; sometimes in a debugger\n      return (Calendar) MINCAL.clone();//full precision; truncation would cause underflow\n    }\n    assert comparePrefix(lv, maxLV) <= 0;\n    Calendar cal = newCal();\n\n    int yearAdj = lv.getValAtLevel(1) * 1_000_000;\n    if (lv.getLevel() > 1) {\n      yearAdj += lv.getValAtLevel(2) * 1000;\n      if (lv.getLevel() > 2) {\n        yearAdj += lv.getValAtLevel(3);\n      }\n    }\n    if (yearAdj > AD_YEAR_BASE) {\n      cal.set(Calendar.ERA, 1);\n      cal.set(Calendar.YEAR, yearAdj - AD_YEAR_BASE);//setting the year resets the era\n    } else {\n      cal.set(Calendar.ERA, 0);//we assert this \"sticks\" at the end\n      cal.set(Calendar.YEAR, (AD_YEAR_BASE - yearAdj) + 1);\n    }\n    for (int level = yearLevel+1; level <= lv.getLevel(); level++) {\n      int field = FIELD_BY_LEVEL[level];\n      cal.set(field, lv.getValAtLevel(level) + cal.getActualMinimum(field));\n    }\n    assert yearAdj > AD_YEAR_BASE || ((Calendar)cal.clone()).get(Calendar.ERA) == 0 : \"ERA / YEAR underflow\";\n    return cal;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/tree/DateRangePrefixTree#toCalendar(UnitNRShape).mjava","pathOld":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/tree/DateRangePrefixTree#toCalendar(UnitNRShape).mjava","sourceNew":"  /** Converts the {@link org.apache.lucene.spatial.prefix.tree.NumberRangePrefixTree.UnitNRShape} shape to a\n   * corresponding Calendar that is cleared below its level. */\n  public Calendar toCalendar(UnitNRShape lv) {\n    if (lv.getLevel() == 0)\n      return newCal();\n    if (comparePrefix(lv, minLV) <= 0) {//shouldn't typically happen; sometimes in a debugger\n      return (Calendar) MINCAL.clone();//full precision; truncation would cause underflow\n    }\n    assert comparePrefix(lv, maxLV) <= 0;\n    Calendar cal = newCal();\n\n    int yearAdj = lv.getValAtLevel(1) * 1_000_000;\n    if (lv.getLevel() > 1) {\n      yearAdj += lv.getValAtLevel(2) * 1000;\n      if (lv.getLevel() > 2) {\n        yearAdj += lv.getValAtLevel(3);\n      }\n    }\n    if (yearAdj > AD_YEAR_BASE) {\n      cal.set(Calendar.ERA, 1);\n      cal.set(Calendar.YEAR, yearAdj - AD_YEAR_BASE);//setting the year resets the era\n    } else {\n      cal.set(Calendar.ERA, 0);//we assert this \"sticks\" at the end\n      cal.set(Calendar.YEAR, (AD_YEAR_BASE - yearAdj) + 1);\n    }\n    for (int level = YEAR_LEVEL + 1; level <= lv.getLevel(); level++) {\n      int field = FIELD_BY_LEVEL[level];\n      cal.set(field, lv.getValAtLevel(level) + cal.getActualMinimum(field));\n    }\n    assert yearAdj > AD_YEAR_BASE || ((Calendar)cal.clone()).get(Calendar.ERA) == 0 : \"ERA / YEAR underflow\";\n    return cal;\n  }\n\n","sourceOld":"  /** Converts the {@link org.apache.lucene.spatial.prefix.tree.NumberRangePrefixTree.UnitNRShape} shape to a\n   * corresponding Calendar that is cleared below its level. */\n  public Calendar toCalendar(UnitNRShape lv) {\n    if (lv.getLevel() == 0)\n      return newCal();\n    if (comparePrefix(lv, minLV) <= 0) {//shouldn't typically happen; sometimes in a debugger\n      return (Calendar) MINCAL.clone();//full precision; truncation would cause underflow\n    }\n    assert comparePrefix(lv, maxLV) <= 0;\n    Calendar cal = newCal();\n\n    int yearAdj = lv.getValAtLevel(1) * 1_000_000;\n    if (lv.getLevel() > 1) {\n      yearAdj += lv.getValAtLevel(2) * 1000;\n      if (lv.getLevel() > 2) {\n        yearAdj += lv.getValAtLevel(3);\n      }\n    }\n    if (yearAdj > AD_YEAR_BASE) {\n      cal.set(Calendar.ERA, 1);\n      cal.set(Calendar.YEAR, yearAdj - AD_YEAR_BASE);//setting the year resets the era\n    } else {\n      cal.set(Calendar.ERA, 0);//we assert this \"sticks\" at the end\n      cal.set(Calendar.YEAR, (AD_YEAR_BASE - yearAdj) + 1);\n    }\n    for (int level = yearLevel+1; level <= lv.getLevel(); level++) {\n      int field = FIELD_BY_LEVEL[level];\n      cal.set(field, lv.getValAtLevel(level) + cal.getActualMinimum(field));\n    }\n    assert yearAdj > AD_YEAR_BASE || ((Calendar)cal.clone()).get(Calendar.ERA) == 0 : \"ERA / YEAR underflow\";\n    return cal;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"af2638813028b254a88b418ebeafb541afb49653":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","112d77ac8d3e10a362516ad834c9a11d35c94234"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"112d77ac8d3e10a362516ad834c9a11d35c94234":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0ad30c6a479e764150a3316e57263319775f1df2":["af2638813028b254a88b418ebeafb541afb49653","17bb09a766d49e4c0bb1049cebc1cf10236004f7"],"17bb09a766d49e4c0bb1049cebc1cf10236004f7":["af2638813028b254a88b418ebeafb541afb49653"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["af2638813028b254a88b418ebeafb541afb49653","d470c8182e92b264680e34081b75e70a9f2b3c89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["af2638813028b254a88b418ebeafb541afb49653","0ad30c6a479e764150a3316e57263319775f1df2"]},"commit2Childs":{"af2638813028b254a88b418ebeafb541afb49653":["0ad30c6a479e764150a3316e57263319775f1df2","17bb09a766d49e4c0bb1049cebc1cf10236004f7","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["af2638813028b254a88b418ebeafb541afb49653","112d77ac8d3e10a362516ad834c9a11d35c94234"],"112d77ac8d3e10a362516ad834c9a11d35c94234":["af2638813028b254a88b418ebeafb541afb49653"],"0ad30c6a479e764150a3316e57263319775f1df2":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"17bb09a766d49e4c0bb1049cebc1cf10236004f7":["0ad30c6a479e764150a3316e57263319775f1df2"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}